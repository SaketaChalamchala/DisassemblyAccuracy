.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : A8E23FC418761EA44020E0805200A146
.text:00000000 ; Input CRC32 : FDD9952D
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\MyString.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; int __stdcall FindCharPosInString(const char *, char)
.text:00000000                 public ?FindCharPosInString@@YGHPBDD@Z
.text:00000000 ?FindCharPosInString@@YGHPBDD@Z proc near
.text:00000000                                         ; CODE XREF: AString::Find(char,uint)+2Cp
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = byte ptr  0Ch
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000B                 mov     eax, [ebp+arg_0]
.text:0000000E                 mov     [ebp+var_4], eax
.text:00000011                 jmp     short loc_1C
.text:00000013 ; ---------------------------------------------------------------------------
.text:00000013
.text:00000013 loc_13:                                 ; CODE XREF: FindCharPosInString(char const *,char):loc_41j
.text:00000013                 mov     ecx, [ebp+var_4]
.text:00000016                 add     ecx, 1
.text:00000019                 mov     [ebp+var_4], ecx
.text:0000001C
.text:0000001C loc_1C:                                 ; CODE XREF: FindCharPosInString(char const *,char)+11j
.text:0000001C                 mov     edx, [ebp+var_4]
.text:0000001F                 movsx   eax, byte ptr [edx]
.text:00000022                 movsx   ecx, [ebp+arg_4]
.text:00000026                 cmp     eax, ecx
.text:00000028                 jnz     short loc_32
.text:0000002A                 mov     eax, [ebp+var_4]
.text:0000002D                 sub     eax, [ebp+arg_0]
.text:00000030                 jmp     short loc_43
.text:00000032 ; ---------------------------------------------------------------------------
.text:00000032
.text:00000032 loc_32:                                 ; CODE XREF: FindCharPosInString(char const *,char)+28j
.text:00000032                 mov     edx, [ebp+var_4]
.text:00000035                 movsx   eax, byte ptr [edx]
.text:00000038                 test    eax, eax
.text:0000003A                 jnz     short loc_41
.text:0000003C                 or      eax, 0FFFFFFFFh
.text:0000003F                 jmp     short loc_43
.text:00000041 ; ---------------------------------------------------------------------------
.text:00000041
.text:00000041 loc_41:                                 ; CODE XREF: FindCharPosInString(char const *,char)+3Aj
.text:00000041                 jmp     short loc_13
.text:00000043 ; ---------------------------------------------------------------------------
.text:00000043
.text:00000043 loc_43:                                 ; CODE XREF: FindCharPosInString(char const *,char)+30j
.text:00000043                                         ; FindCharPosInString(char const *,char)+3Fj
.text:00000043                 mov     esp, ebp
.text:00000045                 pop     ebp
.text:00000046                 retn    8
.text:00000046 ?FindCharPosInString@@YGHPBDD@Z endp
.text:00000046
.text:00000046 ; ---------------------------------------------------------------------------
.text:00000049                 align 10h
.text:00000050
.text:00000050 ; =============== S U B R O U T I N E =======================================
.text:00000050
.text:00000050 ; Attributes: bp-based frame
.text:00000050
.text:00000050 ; int __stdcall FindCharPosInString(const wchar_t *, wchar_t)
.text:00000050                 public ?FindCharPosInString@@YGHPB_W_W@Z
.text:00000050 ?FindCharPosInString@@YGHPB_W_W@Z proc near
.text:00000050                                         ; CODE XREF: UString::Find(wchar_t,uint)+2Fp
.text:00000050
.text:00000050 var_4           = dword ptr -4
.text:00000050 arg_0           = dword ptr  8
.text:00000050 arg_4           = word ptr  0Ch
.text:00000050
.text:00000050                 push    ebp
.text:00000051                 mov     ebp, esp
.text:00000053                 push    ecx
.text:00000054                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000005B                 mov     eax, [ebp+arg_0]
.text:0000005E                 mov     [ebp+var_4], eax
.text:00000061                 jmp     short loc_6C
.text:00000063 ; ---------------------------------------------------------------------------
.text:00000063
.text:00000063 loc_63:                                 ; CODE XREF: FindCharPosInString(wchar_t const *,wchar_t):loc_93j
.text:00000063                 mov     ecx, [ebp+var_4]
.text:00000066                 add     ecx, 2
.text:00000069                 mov     [ebp+var_4], ecx
.text:0000006C
.text:0000006C loc_6C:                                 ; CODE XREF: FindCharPosInString(wchar_t const *,wchar_t)+11j
.text:0000006C                 mov     edx, [ebp+var_4]
.text:0000006F                 movzx   eax, word ptr [edx]
.text:00000072                 movzx   ecx, [ebp+arg_4]
.text:00000076                 cmp     eax, ecx
.text:00000078                 jnz     short loc_84
.text:0000007A                 mov     eax, [ebp+var_4]
.text:0000007D                 sub     eax, [ebp+arg_0]
.text:00000080                 sar     eax, 1
.text:00000082                 jmp     short loc_95
.text:00000084 ; ---------------------------------------------------------------------------
.text:00000084
.text:00000084 loc_84:                                 ; CODE XREF: FindCharPosInString(wchar_t const *,wchar_t)+28j
.text:00000084                 mov     edx, [ebp+var_4]
.text:00000087                 movzx   eax, word ptr [edx]
.text:0000008A                 test    eax, eax
.text:0000008C                 jnz     short loc_93
.text:0000008E                 or      eax, 0FFFFFFFFh
.text:00000091                 jmp     short loc_95
.text:00000093 ; ---------------------------------------------------------------------------
.text:00000093
.text:00000093 loc_93:                                 ; CODE XREF: FindCharPosInString(wchar_t const *,wchar_t)+3Cj
.text:00000093                 jmp     short loc_63
.text:00000095 ; ---------------------------------------------------------------------------
.text:00000095
.text:00000095 loc_95:                                 ; CODE XREF: FindCharPosInString(wchar_t const *,wchar_t)+32j
.text:00000095                                         ; FindCharPosInString(wchar_t const *,wchar_t)+41j
.text:00000095                 mov     esp, ebp
.text:00000097                 pop     ebp
.text:00000098                 retn    8
.text:00000098 ?FindCharPosInString@@YGHPB_W_W@Z endp
.text:00000098
.text:00000098 ; ---------------------------------------------------------------------------
.text:0000009B                 align 10h
.text:000000A0
.text:000000A0 ; =============== S U B R O U T I N E =======================================
.text:000000A0
.text:000000A0 ; Attributes: bp-based frame
.text:000000A0
.text:000000A0 ; void __stdcall MyStringLower_Ascii(char *)
.text:000000A0                 public ?MyStringLower_Ascii@@YGXPAD@Z
.text:000000A0 ?MyStringLower_Ascii@@YGXPAD@Z proc near
.text:000000A0
.text:000000A0 var_4           = dword ptr -4
.text:000000A0 arg_0           = dword ptr  8
.text:000000A0
.text:000000A0                 push    ebp
.text:000000A1                 mov     ebp, esp
.text:000000A3                 push    ecx
.text:000000A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000AB
.text:000000AB loc_AB:                                 ; CODE XREF: MyStringLower_Ascii(char *)+35j
.text:000000AB                 mov     eax, [ebp+arg_0]
.text:000000AE                 mov     cl, [eax]
.text:000000B0                 mov     byte ptr [ebp+var_4+3], cl
.text:000000B3                 movsx   edx, byte ptr [ebp+var_4+3]
.text:000000B7                 test    edx, edx
.text:000000B9                 jnz     short loc_BD
.text:000000BB                 jmp     short loc_D7
.text:000000BD ; ---------------------------------------------------------------------------
.text:000000BD
.text:000000BD loc_BD:                                 ; CODE XREF: MyStringLower_Ascii(char *)+19j
.text:000000BD                 movzx   eax, byte ptr [ebp+var_4+3]
.text:000000C1                 push    eax             ; char
.text:000000C2                 call    ?MyCharLower_Ascii@@YGDD@Z ; MyCharLower_Ascii(char)
.text:000000C7                 mov     ecx, [ebp+arg_0]
.text:000000CA                 mov     [ecx], al
.text:000000CC                 mov     edx, [ebp+arg_0]
.text:000000CF                 add     edx, 1
.text:000000D2                 mov     [ebp+arg_0], edx
.text:000000D5                 jmp     short loc_AB
.text:000000D7 ; ---------------------------------------------------------------------------
.text:000000D7
.text:000000D7 loc_D7:                                 ; CODE XREF: MyStringLower_Ascii(char *)+1Bj
.text:000000D7                 add     esp, 4
.text:000000DA                 cmp     ebp, esp
.text:000000DC                 call    __RTC_CheckEsp
.text:000000E1                 mov     esp, ebp
.text:000000E3                 pop     ebp
.text:000000E4                 retn    4
.text:000000E4 ?MyStringLower_Ascii@@YGXPAD@Z endp
.text:000000E4
.text:000000E4 ; ---------------------------------------------------------------------------
.text:000000E7                 align 10h
.text:000000F0
.text:000000F0 ; =============== S U B R O U T I N E =======================================
.text:000000F0
.text:000000F0 ; Attributes: bp-based frame
.text:000000F0
.text:000000F0 ; void __stdcall MyStringLower_Ascii(wchar_t *)
.text:000000F0                 public ?MyStringLower_Ascii@@YGXPA_W@Z
.text:000000F0 ?MyStringLower_Ascii@@YGXPA_W@Z proc near
.text:000000F0
.text:000000F0 var_4           = dword ptr -4
.text:000000F0 arg_0           = dword ptr  8
.text:000000F0
.text:000000F0                 push    ebp
.text:000000F1                 mov     ebp, esp
.text:000000F3                 push    ecx
.text:000000F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000FB
.text:000000FB loc_FB:                                 ; CODE XREF: MyStringLower_Ascii(wchar_t *)+38j
.text:000000FB                 mov     eax, [ebp+arg_0]
.text:000000FE                 mov     cx, [eax]
.text:00000101                 mov     word ptr [ebp+var_4], cx
.text:00000105                 movzx   edx, word ptr [ebp+var_4]
.text:00000109                 test    edx, edx
.text:0000010B                 jnz     short loc_10F
.text:0000010D                 jmp     short loc_12A
.text:0000010F ; ---------------------------------------------------------------------------
.text:0000010F
.text:0000010F loc_10F:                                ; CODE XREF: MyStringLower_Ascii(wchar_t *)+1Bj
.text:0000010F                 movzx   eax, word ptr [ebp+var_4]
.text:00000113                 push    eax             ; wchar_t
.text:00000114                 call    ?MyCharLower_Ascii@@YG_W_W@Z ; MyCharLower_Ascii(wchar_t)
.text:00000119                 mov     ecx, [ebp+arg_0]
.text:0000011C                 mov     [ecx], ax
.text:0000011F                 mov     edx, [ebp+arg_0]
.text:00000122                 add     edx, 2
.text:00000125                 mov     [ebp+arg_0], edx
.text:00000128                 jmp     short loc_FB
.text:0000012A ; ---------------------------------------------------------------------------
.text:0000012A
.text:0000012A loc_12A:                                ; CODE XREF: MyStringLower_Ascii(wchar_t *)+1Dj
.text:0000012A                 add     esp, 4
.text:0000012D                 cmp     ebp, esp
.text:0000012F                 call    __RTC_CheckEsp
.text:00000134                 mov     esp, ebp
.text:00000136                 pop     ebp
.text:00000137                 retn    4
.text:00000137 ?MyStringLower_Ascii@@YGXPA_W@Z endp
.text:00000137
.text:00000137 ; ---------------------------------------------------------------------------
.text:0000013A                 align 10h
.text:00000140
.text:00000140 ; =============== S U B R O U T I N E =======================================
.text:00000140
.text:00000140 ; Attributes: bp-based frame
.text:00000140
.text:00000140 ; wchar_t __stdcall MyCharUpper_WIN(wchar_t WideCharStr)
.text:00000140                 public ?MyCharUpper_WIN@@YG_W_W@Z
.text:00000140 ?MyCharUpper_WIN@@YG_W_W@Z proc near    ; CODE XREF: MyCharUpper(wchar_t)+38p
.text:00000140
.text:00000140 cbMultiByte     = dword ptr -20h
.text:00000140 var_1C          = dword ptr -1Ch
.text:00000140 MultiByteStr    = byte ptr -18h
.text:00000140 var_14          = dword ptr -14h
.text:00000140 var_10          = dword ptr -10h
.text:00000140 var_C           = dword ptr -0Ch
.text:00000140 var_8           = dword ptr -8
.text:00000140 var_4           = dword ptr -4
.text:00000140 WideCharStr     = word ptr  8
.text:00000140
.text:00000140                 push    ebp
.text:00000141                 mov     ebp, esp
.text:00000143                 sub     esp, 20h
.text:00000146                 push    esi
.text:00000147                 mov     eax, 0CCCCCCCCh
.text:0000014C                 mov     [ebp+cbMultiByte], eax
.text:0000014F                 mov     [ebp+var_1C], eax
.text:00000152                 mov     dword ptr [ebp+MultiByteStr], eax
.text:00000155                 mov     [ebp+var_14], eax
.text:00000158                 mov     [ebp+var_10], eax
.text:0000015B                 mov     [ebp+var_C], eax
.text:0000015E                 mov     [ebp+var_8], eax
.text:00000161                 mov     [ebp+var_4], eax
.text:00000164                 mov     eax, dword ptr ds:___security_cookie
.text:00000169                 xor     eax, ebp
.text:0000016B                 mov     [ebp+var_4], eax
.text:0000016E                 movzx   eax, [ebp+WideCharStr]
.text:00000172                 mov     esi, esp
.text:00000174                 push    eax             ; lpsz
.text:00000175                 call    dword ptr ds:__imp__CharUpperW@4 ; CharUpperW(x)
.text:0000017B                 cmp     esi, esp
.text:0000017D                 call    __RTC_CheckEsp
.text:00000182                 mov     [ebp+var_8], eax
.text:00000185                 cmp     [ebp+var_8], 0
.text:00000189                 jnz     short loc_19F
.text:0000018B                 mov     esi, esp
.text:0000018D                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00000193                 cmp     esi, esp
.text:00000195                 call    __RTC_CheckEsp
.text:0000019A                 cmp     eax, 78h ; 'x'
.text:0000019D                 jz      short loc_1A5
.text:0000019F
.text:0000019F loc_19F:                                ; CODE XREF: MyCharUpper_WIN(wchar_t)+49j
.text:0000019F                 mov     ax, word ptr [ebp+var_8]
.text:000001A3                 jmp     short loc_224
.text:000001A5 ; ---------------------------------------------------------------------------
.text:000001A5
.text:000001A5 loc_1A5:                                ; CODE XREF: MyCharUpper_WIN(wchar_t)+5Dj
.text:000001A5                 mov     [ebp+var_C], 4
.text:000001AC                 mov     esi, esp
.text:000001AE                 push    0               ; lpUsedDefaultChar
.text:000001B0                 push    0               ; lpDefaultChar
.text:000001B2                 push    4               ; cbMultiByte
.text:000001B4                 lea     ecx, [ebp+MultiByteStr]
.text:000001B7                 push    ecx             ; lpMultiByteStr
.text:000001B8                 push    1               ; cchWideChar
.text:000001BA                 lea     edx, [ebp+WideCharStr]
.text:000001BD                 push    edx             ; lpWideCharStr
.text:000001BE                 push    0               ; dwFlags
.text:000001C0                 push    0               ; CodePage
.text:000001C2                 call    dword ptr ds:__imp__WideCharToMultiByte@32 ; WideCharToMultiByte(x,x,x,x,x,x,x,x)
.text:000001C8                 cmp     esi, esp
.text:000001CA                 call    __RTC_CheckEsp
.text:000001CF                 mov     [ebp+cbMultiByte], eax
.text:000001D2                 cmp     [ebp+cbMultiByte], 0
.text:000001D6                 jz      short loc_1DE
.text:000001D8                 cmp     [ebp+cbMultiByte], 4
.text:000001DC                 jle     short loc_1E4
.text:000001DE
.text:000001DE loc_1DE:                                ; CODE XREF: MyCharUpper_WIN(wchar_t)+96j
.text:000001DE                 mov     ax, [ebp+WideCharStr]
.text:000001E2                 jmp     short loc_224
.text:000001E4 ; ---------------------------------------------------------------------------
.text:000001E4
.text:000001E4 loc_1E4:                                ; CODE XREF: MyCharUpper_WIN(wchar_t)+9Cj
.text:000001E4                 mov     eax, [ebp+cbMultiByte]
.text:000001E7                 mov     [ebp+eax+MultiByteStr], 0
.text:000001EC                 mov     esi, esp
.text:000001EE                 lea     ecx, [ebp+MultiByteStr]
.text:000001F1                 push    ecx             ; lpsz
.text:000001F2                 call    dword ptr ds:__imp__CharUpperA@4 ; CharUpperA(x)
.text:000001F8                 cmp     esi, esp
.text:000001FA                 call    __RTC_CheckEsp
.text:000001FF                 mov     esi, esp
.text:00000201                 push    1               ; cchWideChar
.text:00000203                 lea     edx, [ebp+WideCharStr]
.text:00000206                 push    edx             ; lpWideCharStr
.text:00000207                 mov     eax, [ebp+cbMultiByte]
.text:0000020A                 push    eax             ; cbMultiByte
.text:0000020B                 lea     ecx, [ebp+MultiByteStr]
.text:0000020E                 push    ecx             ; lpMultiByteStr
.text:0000020F                 push    0               ; dwFlags
.text:00000211                 push    0               ; CodePage
.text:00000213                 call    dword ptr ds:__imp__MultiByteToWideChar@24 ; MultiByteToWideChar(x,x,x,x,x,x)
.text:00000219                 cmp     esi, esp
.text:0000021B                 call    __RTC_CheckEsp
.text:00000220                 mov     ax, [ebp+WideCharStr]
.text:00000224
.text:00000224 loc_224:                                ; CODE XREF: MyCharUpper_WIN(wchar_t)+63j
.text:00000224                                         ; MyCharUpper_WIN(wchar_t)+A2j
.text:00000224                 push    edx
.text:00000225                 mov     ecx, ebp
.text:00000227                 push    eax
.text:00000228                 lea     edx, $LN9
.text:0000022E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000233                 pop     eax
.text:00000234                 pop     edx
.text:00000235                 pop     esi
.text:00000236                 mov     ecx, [ebp+var_4]
.text:00000239                 xor     ecx, ebp
.text:0000023B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000240                 add     esp, 20h
.text:00000243                 cmp     ebp, esp
.text:00000245                 call    __RTC_CheckEsp
.text:0000024A                 mov     esp, ebp
.text:0000024C                 pop     ebp
.text:0000024D                 retn    4
.text:0000024D ?MyCharUpper_WIN@@YG_W_W@Z endp
.text:0000024D
.text:0000024D ; ---------------------------------------------------------------------------
.text:00000250 $LN9            dd 1                    ; DATA XREF: MyCharUpper_WIN(wchar_t)+E8o
.text:00000254                 dd offset $LN8
.text:00000258 $LN8            dd 0FFFFFFE8h, 5        ; DATA XREF: .text:00000254o
.text:00000260                 dd offset $LN7
.text:00000264 $LN7            dd 0CCCC0073h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00000260o
.text:00000270
.text:00000270 ; =============== S U B R O U T I N E =======================================
.text:00000270
.text:00000270 ; Attributes: bp-based frame
.text:00000270
.text:00000270 ; bool __stdcall IsString1PrefixedByString2(const char *, const char *)
.text:00000270                 public ?IsString1PrefixedByString2@@YG_NPBD0@Z
.text:00000270 ?IsString1PrefixedByString2@@YG_NPBD0@Z proc near
.text:00000270
.text:00000270 var_4           = dword ptr -4
.text:00000270 arg_0           = dword ptr  8
.text:00000270 arg_4           = dword ptr  0Ch
.text:00000270
.text:00000270                 push    ebp
.text:00000271                 mov     ebp, esp
.text:00000273                 push    ecx
.text:00000274                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000027B
.text:0000027B loc_27B:                                ; CODE XREF: IsString1PrefixedByString2(char const *,char const *):loc_2B9j
.text:0000027B                 mov     eax, [ebp+arg_4]
.text:0000027E                 mov     cl, [eax]
.text:00000280                 mov     byte ptr [ebp+var_4+3], cl
.text:00000283                 mov     edx, [ebp+arg_4]
.text:00000286                 add     edx, 1
.text:00000289                 mov     [ebp+arg_4], edx
.text:0000028C                 movzx   eax, byte ptr [ebp+var_4+3]
.text:00000290                 test    eax, eax
.text:00000292                 jnz     short loc_298
.text:00000294                 mov     al, 1
.text:00000296                 jmp     short loc_2BB
.text:00000298 ; ---------------------------------------------------------------------------
.text:00000298
.text:00000298 loc_298:                                ; CODE XREF: IsString1PrefixedByString2(char const *,char const *)+22j
.text:00000298                 mov     ecx, [ebp+arg_0]
.text:0000029B                 mov     dl, [ecx]
.text:0000029D                 mov     byte ptr [ebp+var_4+2], dl
.text:000002A0                 mov     eax, [ebp+arg_0]
.text:000002A3                 add     eax, 1
.text:000002A6                 mov     [ebp+arg_0], eax
.text:000002A9                 movzx   ecx, byte ptr [ebp+var_4+2]
.text:000002AD                 movzx   edx, byte ptr [ebp+var_4+3]
.text:000002B1                 cmp     ecx, edx
.text:000002B3                 jz      short loc_2B9
.text:000002B5                 xor     al, al
.text:000002B7                 jmp     short loc_2BB
.text:000002B9 ; ---------------------------------------------------------------------------
.text:000002B9
.text:000002B9 loc_2B9:                                ; CODE XREF: IsString1PrefixedByString2(char const *,char const *)+43j
.text:000002B9                 jmp     short loc_27B
.text:000002BB ; ---------------------------------------------------------------------------
.text:000002BB
.text:000002BB loc_2BB:                                ; CODE XREF: IsString1PrefixedByString2(char const *,char const *)+26j
.text:000002BB                                         ; IsString1PrefixedByString2(char const *,char const *)+47j
.text:000002BB                 mov     esp, ebp
.text:000002BD                 pop     ebp
.text:000002BE                 retn    8
.text:000002BE ?IsString1PrefixedByString2@@YG_NPBD0@Z endp
.text:000002BE
.text:000002BE ; ---------------------------------------------------------------------------
.text:000002C1                 align 10h
.text:000002D0
.text:000002D0 ; =============== S U B R O U T I N E =======================================
.text:000002D0
.text:000002D0 ; Attributes: bp-based frame
.text:000002D0
.text:000002D0 ; bool __stdcall StringsAreEqualNoCase(const wchar_t *, const wchar_t *)
.text:000002D0                 public ?StringsAreEqualNoCase@@YG_NPB_W0@Z
.text:000002D0 ?StringsAreEqualNoCase@@YG_NPB_W0@Z proc near
.text:000002D0
.text:000002D0 var_8           = dword ptr -8
.text:000002D0 var_4           = dword ptr -4
.text:000002D0 arg_0           = dword ptr  8
.text:000002D0 arg_4           = dword ptr  0Ch
.text:000002D0
.text:000002D0                 push    ebp
.text:000002D1                 mov     ebp, esp
.text:000002D3                 sub     esp, 8
.text:000002D6                 push    esi
.text:000002D7                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000002DE                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002E5
.text:000002E5 loc_2E5:                                ; CODE XREF: StringsAreEqualNoCase(wchar_t const *,wchar_t const *):loc_345j
.text:000002E5                 mov     eax, [ebp+arg_0]
.text:000002E8                 mov     cx, [eax]
.text:000002EB                 mov     word ptr [ebp+var_4], cx
.text:000002EF                 mov     edx, [ebp+arg_0]
.text:000002F2                 add     edx, 2
.text:000002F5                 mov     [ebp+arg_0], edx
.text:000002F8                 mov     eax, [ebp+arg_4]
.text:000002FB                 mov     cx, [eax]
.text:000002FE                 mov     word ptr [ebp+var_8], cx
.text:00000302                 mov     edx, [ebp+arg_4]
.text:00000305                 add     edx, 2
.text:00000308                 mov     [ebp+arg_4], edx
.text:0000030B                 movzx   eax, word ptr [ebp+var_4]
.text:0000030F                 movzx   ecx, word ptr [ebp+var_8]
.text:00000313                 cmp     eax, ecx
.text:00000315                 jz      short loc_339
.text:00000317                 movzx   edx, word ptr [ebp+var_4]
.text:0000031B                 push    edx             ; wchar_t
.text:0000031C                 call    ?MyCharUpper@@YG_W_W@Z ; MyCharUpper(wchar_t)
.text:00000321                 movzx   esi, ax
.text:00000324                 movzx   eax, word ptr [ebp+var_8]
.text:00000328                 push    eax             ; wchar_t
.text:00000329                 call    ?MyCharUpper@@YG_W_W@Z ; MyCharUpper(wchar_t)
.text:0000032E                 movzx   ecx, ax
.text:00000331                 cmp     esi, ecx
.text:00000333                 jz      short loc_339
.text:00000335                 xor     al, al
.text:00000337                 jmp     short loc_347
.text:00000339 ; ---------------------------------------------------------------------------
.text:00000339
.text:00000339 loc_339:                                ; CODE XREF: StringsAreEqualNoCase(wchar_t const *,wchar_t const *)+45j
.text:00000339                                         ; StringsAreEqualNoCase(wchar_t const *,wchar_t const *)+63j
.text:00000339                 movzx   edx, word ptr [ebp+var_4]
.text:0000033D                 test    edx, edx
.text:0000033F                 jnz     short loc_345
.text:00000341                 mov     al, 1
.text:00000343                 jmp     short loc_347
.text:00000345 ; ---------------------------------------------------------------------------
.text:00000345
.text:00000345 loc_345:                                ; CODE XREF: StringsAreEqualNoCase(wchar_t const *,wchar_t const *)+6Fj
.text:00000345                 jmp     short loc_2E5
.text:00000347 ; ---------------------------------------------------------------------------
.text:00000347
.text:00000347 loc_347:                                ; CODE XREF: StringsAreEqualNoCase(wchar_t const *,wchar_t const *)+67j
.text:00000347                                         ; StringsAreEqualNoCase(wchar_t const *,wchar_t const *)+73j
.text:00000347                 pop     esi
.text:00000348                 add     esp, 8
.text:0000034B                 cmp     ebp, esp
.text:0000034D                 call    __RTC_CheckEsp
.text:00000352                 mov     esp, ebp
.text:00000354                 pop     ebp
.text:00000355                 retn    8
.text:00000355 ?StringsAreEqualNoCase@@YG_NPB_W0@Z endp
.text:00000355
.text:00000355 ; ---------------------------------------------------------------------------
.text:00000358                 align 10h
.text:00000360
.text:00000360 ; =============== S U B R O U T I N E =======================================
.text:00000360
.text:00000360 ; Attributes: bp-based frame
.text:00000360
.text:00000360 ; bool __thiscall AString::IsPrefixedBy_Ascii_NoCase(AString *this, const char *)
.text:00000360                 public ?IsPrefixedBy_Ascii_NoCase@AString@@QBE_NPBD@Z
.text:00000360 ?IsPrefixedBy_Ascii_NoCase@AString@@QBE_NPBD@Z proc near
.text:00000360
.text:00000360 var_C           = dword ptr -0Ch
.text:00000360 var_8           = dword ptr -8
.text:00000360 var_4           = dword ptr -4
.text:00000360 arg_0           = dword ptr  8
.text:00000360
.text:00000360                 push    ebp
.text:00000361                 mov     ebp, esp
.text:00000363                 sub     esp, 0Ch
.text:00000366                 push    esi
.text:00000367                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000036E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000375                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000037C                 mov     [ebp+var_4], ecx
.text:0000037F                 mov     eax, [ebp+var_4]
.text:00000382                 mov     ecx, [eax]
.text:00000384                 mov     [ebp+var_8], ecx
.text:00000387
.text:00000387 loc_387:                                ; CODE XREF: AString::IsPrefixedBy_Ascii_NoCase(char const *):loc_3D7j
.text:00000387                 mov     edx, [ebp+arg_0]
.text:0000038A                 mov     al, [edx]
.text:0000038C                 mov     byte ptr [ebp+var_C+3], al
.text:0000038F                 mov     ecx, [ebp+arg_0]
.text:00000392                 add     ecx, 1
.text:00000395                 mov     [ebp+arg_0], ecx
.text:00000398                 movsx   edx, byte ptr [ebp+var_C+3]
.text:0000039C                 test    edx, edx
.text:0000039E                 jnz     short loc_3A4
.text:000003A0                 mov     al, 1
.text:000003A2                 jmp     short loc_3D9
.text:000003A4 ; ---------------------------------------------------------------------------
.text:000003A4
.text:000003A4 loc_3A4:                                ; CODE XREF: AString::IsPrefixedBy_Ascii_NoCase(char const *)+3Ej
.text:000003A4                 mov     eax, [ebp+var_8]
.text:000003A7                 mov     cl, [eax]
.text:000003A9                 mov     byte ptr [ebp+var_C+2], cl
.text:000003AC                 mov     edx, [ebp+var_8]
.text:000003AF                 add     edx, 1
.text:000003B2                 mov     [ebp+var_8], edx
.text:000003B5                 movzx   eax, byte ptr [ebp+var_C+2]
.text:000003B9                 push    eax             ; char
.text:000003BA                 call    ?MyCharLower_Ascii@@YGDD@Z ; MyCharLower_Ascii(char)
.text:000003BF                 movsx   esi, al
.text:000003C2                 movzx   ecx, byte ptr [ebp+var_C+3]
.text:000003C6                 push    ecx             ; char
.text:000003C7                 call    ?MyCharLower_Ascii@@YGDD@Z ; MyCharLower_Ascii(char)
.text:000003CC                 movsx   edx, al
.text:000003CF                 cmp     esi, edx
.text:000003D1                 jz      short loc_3D7
.text:000003D3                 xor     al, al
.text:000003D5                 jmp     short loc_3D9
.text:000003D7 ; ---------------------------------------------------------------------------
.text:000003D7
.text:000003D7 loc_3D7:                                ; CODE XREF: AString::IsPrefixedBy_Ascii_NoCase(char const *)+71j
.text:000003D7                 jmp     short loc_387
.text:000003D9 ; ---------------------------------------------------------------------------
.text:000003D9
.text:000003D9 loc_3D9:                                ; CODE XREF: AString::IsPrefixedBy_Ascii_NoCase(char const *)+42j
.text:000003D9                                         ; AString::IsPrefixedBy_Ascii_NoCase(char const *)+75j
.text:000003D9                 pop     esi
.text:000003DA                 add     esp, 0Ch
.text:000003DD                 cmp     ebp, esp
.text:000003DF                 call    __RTC_CheckEsp
.text:000003E4                 mov     esp, ebp
.text:000003E6                 pop     ebp
.text:000003E7                 retn    4
.text:000003E7 ?IsPrefixedBy_Ascii_NoCase@AString@@QBE_NPBD@Z endp
.text:000003E7
.text:000003E7 ; ---------------------------------------------------------------------------
.text:000003EA                 align 10h
.text:000003F0
.text:000003F0 ; =============== S U B R O U T I N E =======================================
.text:000003F0
.text:000003F0 ; Attributes: bp-based frame
.text:000003F0
.text:000003F0 ; bool __thiscall UString::IsPrefixedBy_Ascii_NoCase(UString *this, const char *)
.text:000003F0                 public ?IsPrefixedBy_Ascii_NoCase@UString@@QBE_NPBD@Z
.text:000003F0 ?IsPrefixedBy_Ascii_NoCase@UString@@QBE_NPBD@Z proc near
.text:000003F0
.text:000003F0 var_10          = dword ptr -10h
.text:000003F0 var_C           = dword ptr -0Ch
.text:000003F0 var_8           = dword ptr -8
.text:000003F0 var_4           = dword ptr -4
.text:000003F0 arg_0           = dword ptr  8
.text:000003F0
.text:000003F0                 push    ebp
.text:000003F1                 mov     ebp, esp
.text:000003F3                 sub     esp, 10h
.text:000003F6                 push    esi
.text:000003F7                 mov     eax, 0CCCCCCCCh
.text:000003FC                 mov     [ebp+var_10], eax
.text:000003FF                 mov     [ebp+var_C], eax
.text:00000402                 mov     [ebp+var_8], eax
.text:00000405                 mov     [ebp+var_4], eax
.text:00000408                 mov     [ebp+var_4], ecx
.text:0000040B                 mov     eax, [ebp+var_4]
.text:0000040E                 mov     ecx, [eax]
.text:00000410                 mov     [ebp+var_8], ecx
.text:00000413
.text:00000413 loc_413:                                ; CODE XREF: UString::IsPrefixedBy_Ascii_NoCase(char const *):loc_465j
.text:00000413                 mov     edx, [ebp+arg_0]
.text:00000416                 mov     al, [edx]
.text:00000418                 mov     byte ptr [ebp+var_C+3], al
.text:0000041B                 mov     ecx, [ebp+arg_0]
.text:0000041E                 add     ecx, 1
.text:00000421                 mov     [ebp+arg_0], ecx
.text:00000424                 movsx   edx, byte ptr [ebp+var_C+3]
.text:00000428                 test    edx, edx
.text:0000042A                 jnz     short loc_430
.text:0000042C                 mov     al, 1
.text:0000042E                 jmp     short loc_467
.text:00000430 ; ---------------------------------------------------------------------------
.text:00000430
.text:00000430 loc_430:                                ; CODE XREF: UString::IsPrefixedBy_Ascii_NoCase(char const *)+3Aj
.text:00000430                 mov     eax, [ebp+var_8]
.text:00000433                 mov     cx, [eax]
.text:00000436                 mov     word ptr [ebp+var_10], cx
.text:0000043A                 mov     edx, [ebp+var_8]
.text:0000043D                 add     edx, 2
.text:00000440                 mov     [ebp+var_8], edx
.text:00000443                 movzx   eax, word ptr [ebp+var_10]
.text:00000447                 push    eax             ; wchar_t
.text:00000448                 call    ?MyCharLower_Ascii@@YG_W_W@Z ; MyCharLower_Ascii(wchar_t)
.text:0000044D                 movzx   esi, ax
.text:00000450                 movzx   ecx, byte ptr [ebp+var_C+3]
.text:00000454                 push    ecx             ; char
.text:00000455                 call    ?MyCharLower_Ascii@@YGDD@Z ; MyCharLower_Ascii(char)
.text:0000045A                 movzx   edx, al
.text:0000045D                 cmp     esi, edx
.text:0000045F                 jz      short loc_465
.text:00000461                 xor     al, al
.text:00000463                 jmp     short loc_467
.text:00000465 ; ---------------------------------------------------------------------------
.text:00000465
.text:00000465 loc_465:                                ; CODE XREF: UString::IsPrefixedBy_Ascii_NoCase(char const *)+6Fj
.text:00000465                 jmp     short loc_413
.text:00000467 ; ---------------------------------------------------------------------------
.text:00000467
.text:00000467 loc_467:                                ; CODE XREF: UString::IsPrefixedBy_Ascii_NoCase(char const *)+3Ej
.text:00000467                                         ; UString::IsPrefixedBy_Ascii_NoCase(char const *)+73j
.text:00000467                 pop     esi
.text:00000468                 add     esp, 10h
.text:0000046B                 cmp     ebp, esp
.text:0000046D                 call    __RTC_CheckEsp
.text:00000472                 mov     esp, ebp
.text:00000474                 pop     ebp
.text:00000475                 retn    4
.text:00000475 ?IsPrefixedBy_Ascii_NoCase@UString@@QBE_NPBD@Z endp
.text:00000475
.text:00000475 ; ---------------------------------------------------------------------------
.text:00000478                 align 10h
.text:00000480
.text:00000480 ; =============== S U B R O U T I N E =======================================
.text:00000480
.text:00000480 ; Attributes: bp-based frame
.text:00000480
.text:00000480 ; bool __stdcall StringsAreEqual_Ascii(const wchar_t *, const char *)
.text:00000480                 public ?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z
.text:00000480 ?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z proc near
.text:00000480
.text:00000480 var_4           = dword ptr -4
.text:00000480 arg_0           = dword ptr  8
.text:00000480 arg_4           = dword ptr  0Ch
.text:00000480
.text:00000480                 push    ebp
.text:00000481                 mov     ebp, esp
.text:00000483                 push    ecx
.text:00000484                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000048B
.text:0000048B loc_48B:                                ; CODE XREF: StringsAreEqual_Ascii(wchar_t const *,char const *)+43j
.text:0000048B                 mov     eax, [ebp+arg_4]
.text:0000048E                 mov     cl, [eax]
.text:00000490                 mov     byte ptr [ebp+var_4+3], cl
.text:00000493                 movzx   edx, byte ptr [ebp+var_4+3]
.text:00000497                 mov     eax, [ebp+arg_0]
.text:0000049A                 movzx   ecx, word ptr [eax]
.text:0000049D                 cmp     edx, ecx
.text:0000049F                 jz      short loc_4A5
.text:000004A1                 xor     al, al
.text:000004A3                 jmp     short loc_4C5
.text:000004A5 ; ---------------------------------------------------------------------------
.text:000004A5
.text:000004A5 loc_4A5:                                ; CODE XREF: StringsAreEqual_Ascii(wchar_t const *,char const *)+1Fj
.text:000004A5                 movzx   edx, byte ptr [ebp+var_4+3]
.text:000004A9                 test    edx, edx
.text:000004AB                 jnz     short loc_4B1
.text:000004AD                 mov     al, 1
.text:000004AF                 jmp     short loc_4C5
.text:000004B1 ; ---------------------------------------------------------------------------
.text:000004B1
.text:000004B1 loc_4B1:                                ; CODE XREF: StringsAreEqual_Ascii(wchar_t const *,char const *)+2Bj
.text:000004B1                 mov     eax, [ebp+arg_4]
.text:000004B4                 add     eax, 1
.text:000004B7                 mov     [ebp+arg_4], eax
.text:000004BA                 mov     ecx, [ebp+arg_0]
.text:000004BD                 add     ecx, 2
.text:000004C0                 mov     [ebp+arg_0], ecx
.text:000004C3                 jmp     short loc_48B
.text:000004C5 ; ---------------------------------------------------------------------------
.text:000004C5
.text:000004C5 loc_4C5:                                ; CODE XREF: StringsAreEqual_Ascii(wchar_t const *,char const *)+23j
.text:000004C5                                         ; StringsAreEqual_Ascii(wchar_t const *,char const *)+2Fj
.text:000004C5                 mov     esp, ebp
.text:000004C7                 pop     ebp
.text:000004C8                 retn    8
.text:000004C8 ?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z endp
.text:000004C8
.text:000004C8 ; ---------------------------------------------------------------------------
.text:000004CB                 align 10h
.text:000004D0
.text:000004D0 ; =============== S U B R O U T I N E =======================================
.text:000004D0
.text:000004D0 ; Attributes: bp-based frame
.text:000004D0
.text:000004D0 ; bool __stdcall StringsAreEqualNoCase_Ascii(const char *, const char *)
.text:000004D0                 public ?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z
.text:000004D0 ?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z proc near
.text:000004D0
.text:000004D0 var_4           = dword ptr -4
.text:000004D0 arg_0           = dword ptr  8
.text:000004D0 arg_4           = dword ptr  0Ch
.text:000004D0
.text:000004D0                 push    ebp
.text:000004D1                 mov     ebp, esp
.text:000004D3                 push    ecx
.text:000004D4                 push    esi
.text:000004D5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004DC
.text:000004DC loc_4DC:                                ; CODE XREF: StringsAreEqualNoCase_Ascii(char const *,char const *):loc_538j
.text:000004DC                 mov     eax, [ebp+arg_0]
.text:000004DF                 mov     cl, [eax]
.text:000004E1                 mov     byte ptr [ebp+var_4+3], cl
.text:000004E4                 mov     edx, [ebp+arg_0]
.text:000004E7                 add     edx, 1
.text:000004EA                 mov     [ebp+arg_0], edx
.text:000004ED                 mov     eax, [ebp+arg_4]
.text:000004F0                 mov     cl, [eax]
.text:000004F2                 mov     byte ptr [ebp+var_4+2], cl
.text:000004F5                 mov     edx, [ebp+arg_4]
.text:000004F8                 add     edx, 1
.text:000004FB                 mov     [ebp+arg_4], edx
.text:000004FE                 movsx   eax, byte ptr [ebp+var_4+3]
.text:00000502                 movsx   ecx, byte ptr [ebp+var_4+2]
.text:00000506                 cmp     eax, ecx
.text:00000508                 jz      short loc_52C
.text:0000050A                 movzx   edx, byte ptr [ebp+var_4+3]
.text:0000050E                 push    edx             ; char
.text:0000050F                 call    ?MyCharLower_Ascii@@YGDD@Z ; MyCharLower_Ascii(char)
.text:00000514                 movsx   esi, al
.text:00000517                 movzx   eax, byte ptr [ebp+var_4+2]
.text:0000051B                 push    eax             ; char
.text:0000051C                 call    ?MyCharLower_Ascii@@YGDD@Z ; MyCharLower_Ascii(char)
.text:00000521                 movsx   ecx, al
.text:00000524                 cmp     esi, ecx
.text:00000526                 jz      short loc_52C
.text:00000528                 xor     al, al
.text:0000052A                 jmp     short loc_53A
.text:0000052C ; ---------------------------------------------------------------------------
.text:0000052C
.text:0000052C loc_52C:                                ; CODE XREF: StringsAreEqualNoCase_Ascii(char const *,char const *)+38j
.text:0000052C                                         ; StringsAreEqualNoCase_Ascii(char const *,char const *)+56j
.text:0000052C                 movsx   edx, byte ptr [ebp+var_4+3]
.text:00000530                 test    edx, edx
.text:00000532                 jnz     short loc_538
.text:00000534                 mov     al, 1
.text:00000536                 jmp     short loc_53A
.text:00000538 ; ---------------------------------------------------------------------------
.text:00000538
.text:00000538 loc_538:                                ; CODE XREF: StringsAreEqualNoCase_Ascii(char const *,char const *)+62j
.text:00000538                 jmp     short loc_4DC
.text:0000053A ; ---------------------------------------------------------------------------
.text:0000053A
.text:0000053A loc_53A:                                ; CODE XREF: StringsAreEqualNoCase_Ascii(char const *,char const *)+5Aj
.text:0000053A                                         ; StringsAreEqualNoCase_Ascii(char const *,char const *)+66j
.text:0000053A                 pop     esi
.text:0000053B                 add     esp, 4
.text:0000053E                 cmp     ebp, esp
.text:00000540                 call    __RTC_CheckEsp
.text:00000545                 mov     esp, ebp
.text:00000547                 pop     ebp
.text:00000548                 retn    8
.text:00000548 ?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z endp
.text:00000548
.text:00000548 ; ---------------------------------------------------------------------------
.text:0000054B                 align 10h
.text:00000550
.text:00000550 ; =============== S U B R O U T I N E =======================================
.text:00000550
.text:00000550 ; Attributes: bp-based frame
.text:00000550
.text:00000550 ; bool __stdcall StringsAreEqualNoCase_Ascii(const wchar_t *, const wchar_t *)
.text:00000550                 public ?StringsAreEqualNoCase_Ascii@@YG_NPB_W0@Z
.text:00000550 ?StringsAreEqualNoCase_Ascii@@YG_NPB_W0@Z proc near
.text:00000550
.text:00000550 var_8           = dword ptr -8
.text:00000550 var_4           = dword ptr -4
.text:00000550 arg_0           = dword ptr  8
.text:00000550 arg_4           = dword ptr  0Ch
.text:00000550
.text:00000550                 push    ebp
.text:00000551                 mov     ebp, esp
.text:00000553                 sub     esp, 8
.text:00000556                 push    esi
.text:00000557                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000055E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000565
.text:00000565 loc_565:                                ; CODE XREF: StringsAreEqualNoCase_Ascii(wchar_t const *,wchar_t const *):loc_5C5j
.text:00000565                 mov     eax, [ebp+arg_0]
.text:00000568                 mov     cx, [eax]
.text:0000056B                 mov     word ptr [ebp+var_4], cx
.text:0000056F                 mov     edx, [ebp+arg_0]
.text:00000572                 add     edx, 2
.text:00000575                 mov     [ebp+arg_0], edx
.text:00000578                 mov     eax, [ebp+arg_4]
.text:0000057B                 mov     cx, [eax]
.text:0000057E                 mov     word ptr [ebp+var_8], cx
.text:00000582                 mov     edx, [ebp+arg_4]
.text:00000585                 add     edx, 2
.text:00000588                 mov     [ebp+arg_4], edx
.text:0000058B                 movzx   eax, word ptr [ebp+var_4]
.text:0000058F                 movzx   ecx, word ptr [ebp+var_8]
.text:00000593                 cmp     eax, ecx
.text:00000595                 jz      short loc_5B9
.text:00000597                 movzx   edx, word ptr [ebp+var_4]
.text:0000059B                 push    edx             ; wchar_t
.text:0000059C                 call    ?MyCharLower_Ascii@@YG_W_W@Z ; MyCharLower_Ascii(wchar_t)
.text:000005A1                 movzx   esi, ax
.text:000005A4                 movzx   eax, word ptr [ebp+var_8]
.text:000005A8                 push    eax             ; wchar_t
.text:000005A9                 call    ?MyCharLower_Ascii@@YG_W_W@Z ; MyCharLower_Ascii(wchar_t)
.text:000005AE                 movzx   ecx, ax
.text:000005B1                 cmp     esi, ecx
.text:000005B3                 jz      short loc_5B9
.text:000005B5                 xor     al, al
.text:000005B7                 jmp     short loc_5C7
.text:000005B9 ; ---------------------------------------------------------------------------
.text:000005B9
.text:000005B9 loc_5B9:                                ; CODE XREF: StringsAreEqualNoCase_Ascii(wchar_t const *,wchar_t const *)+45j
.text:000005B9                                         ; StringsAreEqualNoCase_Ascii(wchar_t const *,wchar_t const *)+63j
.text:000005B9                 movzx   edx, word ptr [ebp+var_4]
.text:000005BD                 test    edx, edx
.text:000005BF                 jnz     short loc_5C5
.text:000005C1                 mov     al, 1
.text:000005C3                 jmp     short loc_5C7
.text:000005C5 ; ---------------------------------------------------------------------------
.text:000005C5
.text:000005C5 loc_5C5:                                ; CODE XREF: StringsAreEqualNoCase_Ascii(wchar_t const *,wchar_t const *)+6Fj
.text:000005C5                 jmp     short loc_565
.text:000005C7 ; ---------------------------------------------------------------------------
.text:000005C7
.text:000005C7 loc_5C7:                                ; CODE XREF: StringsAreEqualNoCase_Ascii(wchar_t const *,wchar_t const *)+67j
.text:000005C7                                         ; StringsAreEqualNoCase_Ascii(wchar_t const *,wchar_t const *)+73j
.text:000005C7                 pop     esi
.text:000005C8                 add     esp, 8
.text:000005CB                 cmp     ebp, esp
.text:000005CD                 call    __RTC_CheckEsp
.text:000005D2                 mov     esp, ebp
.text:000005D4                 pop     ebp
.text:000005D5                 retn    8
.text:000005D5 ?StringsAreEqualNoCase_Ascii@@YG_NPB_W0@Z endp
.text:000005D5
.text:000005D5 ; ---------------------------------------------------------------------------
.text:000005D8                 align 10h
.text:000005E0
.text:000005E0 ; =============== S U B R O U T I N E =======================================
.text:000005E0
.text:000005E0 ; Attributes: bp-based frame
.text:000005E0
.text:000005E0 ; bool __stdcall StringsAreEqualNoCase_Ascii(const wchar_t *, const char *)
.text:000005E0                 public ?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z
.text:000005E0 ?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z proc near
.text:000005E0
.text:000005E0 var_8           = dword ptr -8
.text:000005E0 var_4           = dword ptr -4
.text:000005E0 arg_0           = dword ptr  8
.text:000005E0 arg_4           = dword ptr  0Ch
.text:000005E0
.text:000005E0                 push    ebp
.text:000005E1                 mov     ebp, esp
.text:000005E3                 sub     esp, 8
.text:000005E6                 push    esi
.text:000005E7                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000005EE                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005F5
.text:000005F5 loc_5F5:                                ; CODE XREF: StringsAreEqualNoCase_Ascii(wchar_t const *,char const *):loc_65Cj
.text:000005F5                 mov     eax, [ebp+arg_0]
.text:000005F8                 mov     cx, [eax]
.text:000005FB                 mov     word ptr [ebp+var_4], cx
.text:000005FF                 mov     edx, [ebp+arg_0]
.text:00000602                 add     edx, 2
.text:00000605                 mov     [ebp+arg_0], edx
.text:00000608                 mov     eax, [ebp+arg_4]
.text:0000060B                 mov     cl, [eax]
.text:0000060D                 mov     byte ptr [ebp+var_8+3], cl
.text:00000610                 mov     edx, [ebp+arg_4]
.text:00000613                 add     edx, 1
.text:00000616                 mov     [ebp+arg_4], edx
.text:00000619                 movzx   eax, word ptr [ebp+var_4]
.text:0000061D                 movzx   ecx, byte ptr [ebp+var_8+3]
.text:00000621                 cmp     eax, ecx
.text:00000623                 jz      short loc_650
.text:00000625                 movzx   edx, word ptr [ebp+var_4]
.text:00000629                 cmp     edx, 7Fh ; ''
.text:0000062C                 jg      short loc_64C
.text:0000062E                 movzx   eax, word ptr [ebp+var_4]
.text:00000632                 push    eax             ; wchar_t
.text:00000633                 call    ?MyCharLower_Ascii@@YG_W_W@Z ; MyCharLower_Ascii(wchar_t)
.text:00000638                 movzx   esi, ax
.text:0000063B                 movzx   ecx, byte ptr [ebp+var_8+3]
.text:0000063F                 push    ecx             ; char
.text:00000640                 call    ?MyCharLower_Ascii@@YGDD@Z ; MyCharLower_Ascii(char)
.text:00000645                 movzx   edx, al
.text:00000648                 cmp     esi, edx
.text:0000064A                 jz      short loc_650
.text:0000064C
.text:0000064C loc_64C:                                ; CODE XREF: StringsAreEqualNoCase_Ascii(wchar_t const *,char const *)+4Cj
.text:0000064C                 xor     al, al
.text:0000064E                 jmp     short loc_65E
.text:00000650 ; ---------------------------------------------------------------------------
.text:00000650
.text:00000650 loc_650:                                ; CODE XREF: StringsAreEqualNoCase_Ascii(wchar_t const *,char const *)+43j
.text:00000650                                         ; StringsAreEqualNoCase_Ascii(wchar_t const *,char const *)+6Aj
.text:00000650                 movzx   eax, word ptr [ebp+var_4]
.text:00000654                 test    eax, eax
.text:00000656                 jnz     short loc_65C
.text:00000658                 mov     al, 1
.text:0000065A                 jmp     short loc_65E
.text:0000065C ; ---------------------------------------------------------------------------
.text:0000065C
.text:0000065C loc_65C:                                ; CODE XREF: StringsAreEqualNoCase_Ascii(wchar_t const *,char const *)+76j
.text:0000065C                 jmp     short loc_5F5
.text:0000065E ; ---------------------------------------------------------------------------
.text:0000065E
.text:0000065E loc_65E:                                ; CODE XREF: StringsAreEqualNoCase_Ascii(wchar_t const *,char const *)+6Ej
.text:0000065E                                         ; StringsAreEqualNoCase_Ascii(wchar_t const *,char const *)+7Aj
.text:0000065E                 pop     esi
.text:0000065F                 add     esp, 8
.text:00000662                 cmp     ebp, esp
.text:00000664                 call    __RTC_CheckEsp
.text:00000669                 mov     esp, ebp
.text:0000066B                 pop     ebp
.text:0000066C                 retn    8
.text:0000066C ?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z endp
.text:0000066C
.text:0000066C ; ---------------------------------------------------------------------------
.text:0000066F                 align 10h
.text:00000670
.text:00000670 ; =============== S U B R O U T I N E =======================================
.text:00000670
.text:00000670 ; Attributes: bp-based frame
.text:00000670
.text:00000670 ; bool __stdcall IsString1PrefixedByString2(const wchar_t *, const wchar_t *)
.text:00000670                 public ?IsString1PrefixedByString2@@YG_NPB_W0@Z
.text:00000670 ?IsString1PrefixedByString2@@YG_NPB_W0@Z proc near
.text:00000670
.text:00000670 var_8           = dword ptr -8
.text:00000670 var_4           = dword ptr -4
.text:00000670 arg_0           = dword ptr  8
.text:00000670 arg_4           = dword ptr  0Ch
.text:00000670
.text:00000670                 push    ebp
.text:00000671                 mov     ebp, esp
.text:00000673                 sub     esp, 8
.text:00000676                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000067D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000684
.text:00000684 loc_684:                                ; CODE XREF: IsString1PrefixedByString2(wchar_t const *,wchar_t const *):loc_6C6j
.text:00000684                 mov     eax, [ebp+arg_4]
.text:00000687                 mov     cx, [eax]
.text:0000068A                 mov     word ptr [ebp+var_4], cx
.text:0000068E                 mov     edx, [ebp+arg_4]
.text:00000691                 add     edx, 2
.text:00000694                 mov     [ebp+arg_4], edx
.text:00000697                 movzx   eax, word ptr [ebp+var_4]
.text:0000069B                 test    eax, eax
.text:0000069D                 jnz     short loc_6A3
.text:0000069F                 mov     al, 1
.text:000006A1                 jmp     short loc_6C8
.text:000006A3 ; ---------------------------------------------------------------------------
.text:000006A3
.text:000006A3 loc_6A3:                                ; CODE XREF: IsString1PrefixedByString2(wchar_t const *,wchar_t const *)+2Dj
.text:000006A3                 mov     ecx, [ebp+arg_0]
.text:000006A6                 mov     dx, [ecx]
.text:000006A9                 mov     word ptr [ebp+var_8], dx
.text:000006AD                 mov     eax, [ebp+arg_0]
.text:000006B0                 add     eax, 2
.text:000006B3                 mov     [ebp+arg_0], eax
.text:000006B6                 movzx   ecx, word ptr [ebp+var_8]
.text:000006BA                 movzx   edx, word ptr [ebp+var_4]
.text:000006BE                 cmp     ecx, edx
.text:000006C0                 jz      short loc_6C6
.text:000006C2                 xor     al, al
.text:000006C4                 jmp     short loc_6C8
.text:000006C6 ; ---------------------------------------------------------------------------
.text:000006C6
.text:000006C6 loc_6C6:                                ; CODE XREF: IsString1PrefixedByString2(wchar_t const *,wchar_t const *)+50j
.text:000006C6                 jmp     short loc_684
.text:000006C8 ; ---------------------------------------------------------------------------
.text:000006C8
.text:000006C8 loc_6C8:                                ; CODE XREF: IsString1PrefixedByString2(wchar_t const *,wchar_t const *)+31j
.text:000006C8                                         ; IsString1PrefixedByString2(wchar_t const *,wchar_t const *)+54j
.text:000006C8                 mov     esp, ebp
.text:000006CA                 pop     ebp
.text:000006CB                 retn    8
.text:000006CB ?IsString1PrefixedByString2@@YG_NPB_W0@Z endp
.text:000006CB
.text:000006CB ; ---------------------------------------------------------------------------
.text:000006CE                 align 10h
.text:000006D0
.text:000006D0 ; =============== S U B R O U T I N E =======================================
.text:000006D0
.text:000006D0 ; Attributes: bp-based frame
.text:000006D0
.text:000006D0 ; bool __stdcall IsString1PrefixedByString2_NoCase(const wchar_t *, const wchar_t *)
.text:000006D0                 public ?IsString1PrefixedByString2_NoCase@@YG_NPB_W0@Z
.text:000006D0 ?IsString1PrefixedByString2_NoCase@@YG_NPB_W0@Z proc near
.text:000006D0
.text:000006D0 var_8           = dword ptr -8
.text:000006D0 var_4           = dword ptr -4
.text:000006D0 arg_0           = dword ptr  8
.text:000006D0 arg_4           = dword ptr  0Ch
.text:000006D0
.text:000006D0                 push    ebp
.text:000006D1                 mov     ebp, esp
.text:000006D3                 sub     esp, 8
.text:000006D6                 push    esi
.text:000006D7                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000006DE                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006E5
.text:000006E5 loc_6E5:                                ; CODE XREF: IsString1PrefixedByString2_NoCase(wchar_t const *,wchar_t const *):loc_745j
.text:000006E5                 mov     eax, [ebp+arg_4]
.text:000006E8                 mov     cx, [eax]
.text:000006EB                 mov     word ptr [ebp+var_4], cx
.text:000006EF                 mov     edx, [ebp+arg_4]
.text:000006F2                 add     edx, 2
.text:000006F5                 mov     [ebp+arg_4], edx
.text:000006F8                 movzx   eax, word ptr [ebp+var_4]
.text:000006FC                 test    eax, eax
.text:000006FE                 jnz     short loc_704
.text:00000700                 mov     al, 1
.text:00000702                 jmp     short loc_747
.text:00000704 ; ---------------------------------------------------------------------------
.text:00000704
.text:00000704 loc_704:                                ; CODE XREF: IsString1PrefixedByString2_NoCase(wchar_t const *,wchar_t const *)+2Ej
.text:00000704                 mov     ecx, [ebp+arg_0]
.text:00000707                 mov     dx, [ecx]
.text:0000070A                 mov     word ptr [ebp+var_8], dx
.text:0000070E                 mov     eax, [ebp+arg_0]
.text:00000711                 add     eax, 2
.text:00000714                 mov     [ebp+arg_0], eax
.text:00000717                 movzx   ecx, word ptr [ebp+var_8]
.text:0000071B                 movzx   edx, word ptr [ebp+var_4]
.text:0000071F                 cmp     ecx, edx
.text:00000721                 jz      short loc_745
.text:00000723                 movzx   eax, word ptr [ebp+var_8]
.text:00000727                 push    eax             ; wchar_t
.text:00000728                 call    ?MyCharUpper@@YG_W_W@Z ; MyCharUpper(wchar_t)
.text:0000072D                 movzx   esi, ax
.text:00000730                 movzx   ecx, word ptr [ebp+var_4]
.text:00000734                 push    ecx             ; wchar_t
.text:00000735                 call    ?MyCharUpper@@YG_W_W@Z ; MyCharUpper(wchar_t)
.text:0000073A                 movzx   edx, ax
.text:0000073D                 cmp     esi, edx
.text:0000073F                 jz      short loc_745
.text:00000741                 xor     al, al
.text:00000743                 jmp     short loc_747
.text:00000745 ; ---------------------------------------------------------------------------
.text:00000745
.text:00000745 loc_745:                                ; CODE XREF: IsString1PrefixedByString2_NoCase(wchar_t const *,wchar_t const *)+51j
.text:00000745                                         ; IsString1PrefixedByString2_NoCase(wchar_t const *,wchar_t const *)+6Fj
.text:00000745                 jmp     short loc_6E5
.text:00000747 ; ---------------------------------------------------------------------------
.text:00000747
.text:00000747 loc_747:                                ; CODE XREF: IsString1PrefixedByString2_NoCase(wchar_t const *,wchar_t const *)+32j
.text:00000747                                         ; IsString1PrefixedByString2_NoCase(wchar_t const *,wchar_t const *)+73j
.text:00000747                 pop     esi
.text:00000748                 add     esp, 8
.text:0000074B                 cmp     ebp, esp
.text:0000074D                 call    __RTC_CheckEsp
.text:00000752                 mov     esp, ebp
.text:00000754                 pop     ebp
.text:00000755                 retn    8
.text:00000755 ?IsString1PrefixedByString2_NoCase@@YG_NPB_W0@Z endp
.text:00000755
.text:00000755 ; ---------------------------------------------------------------------------
.text:00000758                 align 10h
.text:00000760
.text:00000760 ; =============== S U B R O U T I N E =======================================
.text:00000760
.text:00000760 ; Attributes: bp-based frame
.text:00000760
.text:00000760 ; int __stdcall MyStringCompareNoCase(const wchar_t *, const wchar_t *)
.text:00000760                 public ?MyStringCompareNoCase@@YGHPB_W0@Z
.text:00000760 ?MyStringCompareNoCase@@YGHPB_W0@Z proc near
.text:00000760
.text:00000760 var_10          = dword ptr -10h
.text:00000760 var_C           = dword ptr -0Ch
.text:00000760 var_8           = dword ptr -8
.text:00000760 var_4           = dword ptr -4
.text:00000760 arg_0           = dword ptr  8
.text:00000760 arg_4           = dword ptr  0Ch
.text:00000760
.text:00000760                 push    ebp
.text:00000761                 mov     ebp, esp
.text:00000763                 sub     esp, 10h
.text:00000766                 mov     eax, 0CCCCCCCCh
.text:0000076B                 mov     [ebp+var_10], eax
.text:0000076E                 mov     [ebp+var_C], eax
.text:00000771                 mov     [ebp+var_8], eax
.text:00000774                 mov     [ebp+var_4], eax
.text:00000777
.text:00000777 loc_777:                                ; CODE XREF: MyStringCompareNoCase(wchar_t const *,wchar_t const *):loc_7F5j
.text:00000777                 mov     eax, [ebp+arg_0]
.text:0000077A                 mov     cx, [eax]
.text:0000077D                 mov     word ptr [ebp+var_4], cx
.text:00000781                 mov     edx, [ebp+arg_0]
.text:00000784                 add     edx, 2
.text:00000787                 mov     [ebp+arg_0], edx
.text:0000078A                 mov     eax, [ebp+arg_4]
.text:0000078D                 mov     cx, [eax]
.text:00000790                 mov     word ptr [ebp+var_8], cx
.text:00000794                 mov     edx, [ebp+arg_4]
.text:00000797                 add     edx, 2
.text:0000079A                 mov     [ebp+arg_4], edx
.text:0000079D                 movzx   eax, word ptr [ebp+var_4]
.text:000007A1                 movzx   ecx, word ptr [ebp+var_8]
.text:000007A5                 cmp     eax, ecx
.text:000007A7                 jz      short loc_7E9
.text:000007A9                 movzx   edx, word ptr [ebp+var_4]
.text:000007AD                 push    edx             ; wchar_t
.text:000007AE                 call    ?MyCharUpper@@YG_W_W@Z ; MyCharUpper(wchar_t)
.text:000007B3                 mov     word ptr [ebp+var_C], ax
.text:000007B7                 movzx   eax, word ptr [ebp+var_8]
.text:000007BB                 push    eax             ; wchar_t
.text:000007BC                 call    ?MyCharUpper@@YG_W_W@Z ; MyCharUpper(wchar_t)
.text:000007C1                 mov     word ptr [ebp+var_10], ax
.text:000007C5                 movzx   ecx, word ptr [ebp+var_C]
.text:000007C9                 movzx   edx, word ptr [ebp+var_10]
.text:000007CD                 cmp     ecx, edx
.text:000007CF                 jge     short loc_7D6
.text:000007D1                 or      eax, 0FFFFFFFFh
.text:000007D4                 jmp     short loc_7F7
.text:000007D6 ; ---------------------------------------------------------------------------
.text:000007D6
.text:000007D6 loc_7D6:                                ; CODE XREF: MyStringCompareNoCase(wchar_t const *,wchar_t const *)+6Fj
.text:000007D6                 movzx   eax, word ptr [ebp+var_C]
.text:000007DA                 movzx   ecx, word ptr [ebp+var_10]
.text:000007DE                 cmp     eax, ecx
.text:000007E0                 jle     short loc_7E9
.text:000007E2                 mov     eax, 1
.text:000007E7                 jmp     short loc_7F7
.text:000007E9 ; ---------------------------------------------------------------------------
.text:000007E9
.text:000007E9 loc_7E9:                                ; CODE XREF: MyStringCompareNoCase(wchar_t const *,wchar_t const *)+47j
.text:000007E9                                         ; MyStringCompareNoCase(wchar_t const *,wchar_t const *)+80j
.text:000007E9                 movzx   edx, word ptr [ebp+var_4]
.text:000007ED                 test    edx, edx
.text:000007EF                 jnz     short loc_7F5
.text:000007F1                 xor     eax, eax
.text:000007F3                 jmp     short loc_7F7
.text:000007F5 ; ---------------------------------------------------------------------------
.text:000007F5
.text:000007F5 loc_7F5:                                ; CODE XREF: MyStringCompareNoCase(wchar_t const *,wchar_t const *)+8Fj
.text:000007F5                 jmp     short loc_777
.text:000007F7 ; ---------------------------------------------------------------------------
.text:000007F7
.text:000007F7 loc_7F7:                                ; CODE XREF: MyStringCompareNoCase(wchar_t const *,wchar_t const *)+74j
.text:000007F7                                         ; MyStringCompareNoCase(wchar_t const *,wchar_t const *)+87j ...
.text:000007F7                 add     esp, 10h
.text:000007FA                 cmp     ebp, esp
.text:000007FC                 call    __RTC_CheckEsp
.text:00000801                 mov     esp, ebp
.text:00000803                 pop     ebp
.text:00000804                 retn    8
.text:00000804 ?MyStringCompareNoCase@@YGHPB_W0@Z endp
.text:00000804
.text:00000804 ; ---------------------------------------------------------------------------
.text:00000807                 align 10h
.text:00000810
.text:00000810 ; =============== S U B R O U T I N E =======================================
.text:00000810
.text:00000810 ; Attributes: bp-based frame
.text:00000810
.text:00000810 ; void __thiscall AString::InsertSpace(AString *this, unsigned int *, unsigned int)
.text:00000810                 public ?InsertSpace@AString@@AAEXAAII@Z
.text:00000810 ?InsertSpace@AString@@AAEXAAII@Z proc near
.text:00000810                                         ; CODE XREF: AString::Insert(uint,char const *)+34p
.text:00000810                                         ; AString::Insert(uint,AString const &)+33p
.text:00000810
.text:00000810 var_4           = dword ptr -4
.text:00000810 arg_0           = dword ptr  8
.text:00000810 arg_4           = dword ptr  0Ch
.text:00000810
.text:00000810                 push    ebp
.text:00000811                 mov     ebp, esp
.text:00000813                 push    ecx
.text:00000814                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000081B                 mov     [ebp+var_4], ecx
.text:0000081E                 mov     eax, [ebp+arg_4]
.text:00000821                 push    eax             ; unsigned int
.text:00000822                 mov     ecx, [ebp+var_4] ; this
.text:00000825                 call    ?Grow@AString@@AAEXI@Z ; AString::Grow(uint)
.text:0000082A                 mov     ecx, [ebp+arg_0]
.text:0000082D                 mov     edx, [ecx]
.text:0000082F                 push    edx             ; unsigned int
.text:00000830                 mov     eax, [ebp+arg_0]
.text:00000833                 mov     ecx, [eax]
.text:00000835                 add     ecx, [ebp+arg_4]
.text:00000838                 push    ecx             ; unsigned int
.text:00000839                 mov     ecx, [ebp+var_4] ; this
.text:0000083C                 call    ?MoveItems@AString@@AAEXII@Z ; AString::MoveItems(uint,uint)
.text:00000841                 add     esp, 4
.text:00000844                 cmp     ebp, esp
.text:00000846                 call    __RTC_CheckEsp
.text:0000084B                 mov     esp, ebp
.text:0000084D                 pop     ebp
.text:0000084E                 retn    8
.text:0000084E ?InsertSpace@AString@@AAEXAAII@Z endp
.text:0000084E
.text:0000084E ; ---------------------------------------------------------------------------
.text:00000851                 align 10h
.text:00000860
.text:00000860 ; =============== S U B R O U T I N E =======================================
.text:00000860
.text:00000860 ; Attributes: bp-based frame
.text:00000860
.text:00000860 ; void __thiscall AString::ReAlloc(AString *this, unsigned int)
.text:00000860                 public ?ReAlloc@AString@@AAEXI@Z
.text:00000860 ?ReAlloc@AString@@AAEXI@Z proc near     ; CODE XREF: AString::Grow_1(void)+47p
.text:00000860                                         ; AString::Grow(uint)+6Ap
.text:00000860
.text:00000860 var_14          = dword ptr -14h
.text:00000860 var_10          = dword ptr -10h
.text:00000860 var_C           = dword ptr -0Ch
.text:00000860 Dst             = dword ptr -8
.text:00000860 var_4           = dword ptr -4
.text:00000860 arg_0           = dword ptr  8
.text:00000860
.text:00000860                 push    ebp
.text:00000861                 mov     ebp, esp
.text:00000863                 sub     esp, 14h
.text:00000866                 mov     eax, 0CCCCCCCCh
.text:0000086B                 mov     [ebp+var_14], eax
.text:0000086E                 mov     [ebp+var_10], eax
.text:00000871                 mov     [ebp+var_C], eax
.text:00000874                 mov     [ebp+Dst], eax
.text:00000877                 mov     [ebp+var_4], eax
.text:0000087A                 mov     [ebp+var_4], ecx
.text:0000087D                 mov     eax, [ebp+var_4]
.text:00000880                 mov     ecx, [ebp+arg_0]
.text:00000883                 cmp     ecx, [eax+4]
.text:00000886                 jb      short loc_891
.text:00000888                 cmp     [ebp+arg_0], 40000000h
.text:0000088F                 jb      short loc_8A6
.text:00000891
.text:00000891 loc_891:                                ; CODE XREF: AString::ReAlloc(uint)+26j
.text:00000891                 mov     [ebp+var_C], 13329ACh
.text:00000898                 push    offset __TI1H
.text:0000089D                 lea     edx, [ebp+var_C]
.text:000008A0                 push    edx
.text:000008A1                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:000008A6 ; ---------------------------------------------------------------------------
.text:000008A6
.text:000008A6 loc_8A6:                                ; CODE XREF: AString::ReAlloc(uint)+2Fj
.text:000008A6                 mov     eax, [ebp+arg_0]
.text:000008A9                 add     eax, 1
.text:000008AC                 push    eax             ; unsigned int
.text:000008AD                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000008B2                 add     esp, 4
.text:000008B5                 mov     [ebp+var_10], eax
.text:000008B8                 mov     ecx, [ebp+var_10]
.text:000008BB                 mov     [ebp+Dst], ecx
.text:000008BE                 mov     edx, [ebp+var_4]
.text:000008C1                 mov     eax, [edx+4]
.text:000008C4                 add     eax, 1
.text:000008C7                 push    eax             ; Size
.text:000008C8                 mov     ecx, [ebp+var_4]
.text:000008CB                 mov     edx, [ecx]
.text:000008CD                 push    edx             ; Src
.text:000008CE                 mov     eax, [ebp+Dst]
.text:000008D1                 push    eax             ; Dst
.text:000008D2                 call    _memcpy
.text:000008D7                 add     esp, 0Ch
.text:000008DA                 mov     ecx, [ebp+var_4]
.text:000008DD                 mov     edx, [ecx]
.text:000008DF                 mov     [ebp+var_14], edx
.text:000008E2                 mov     eax, [ebp+var_14]
.text:000008E5                 push    eax             ; void *
.text:000008E6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000008EB                 add     esp, 4
.text:000008EE                 mov     ecx, [ebp+var_4]
.text:000008F1                 mov     edx, [ebp+Dst]
.text:000008F4                 mov     [ecx], edx
.text:000008F6                 mov     eax, [ebp+var_4]
.text:000008F9                 mov     ecx, [ebp+arg_0]
.text:000008FC                 mov     [eax+8], ecx
.text:000008FF                 add     esp, 14h
.text:00000902                 cmp     ebp, esp
.text:00000904                 call    __RTC_CheckEsp
.text:00000909                 mov     esp, ebp
.text:0000090B                 pop     ebp
.text:0000090C                 retn    4
.text:0000090C ?ReAlloc@AString@@AAEXI@Z endp
.text:0000090C
.text:0000090C ; ---------------------------------------------------------------------------
.text:0000090F                 align 10h
.text:00000910
.text:00000910 ; =============== S U B R O U T I N E =======================================
.text:00000910
.text:00000910 ; Attributes: bp-based frame
.text:00000910
.text:00000910 ; void __thiscall AString::ReAlloc2(AString *this, unsigned int)
.text:00000910                 public ?ReAlloc2@AString@@AAEXI@Z
.text:00000910 ?ReAlloc2@AString@@AAEXI@Z proc near
.text:00000910
.text:00000910 var_14          = dword ptr -14h
.text:00000910 var_10          = dword ptr -10h
.text:00000910 var_C           = dword ptr -0Ch
.text:00000910 var_8           = dword ptr -8
.text:00000910 var_4           = dword ptr -4
.text:00000910 arg_0           = dword ptr  8
.text:00000910
.text:00000910                 push    ebp
.text:00000911                 mov     ebp, esp
.text:00000913                 sub     esp, 14h
.text:00000916                 mov     eax, 0CCCCCCCCh
.text:0000091B                 mov     [ebp+var_14], eax
.text:0000091E                 mov     [ebp+var_10], eax
.text:00000921                 mov     [ebp+var_C], eax
.text:00000924                 mov     [ebp+var_8], eax
.text:00000927                 mov     [ebp+var_4], eax
.text:0000092A                 mov     [ebp+var_4], ecx
.text:0000092D                 cmp     [ebp+arg_0], 40000000h
.text:00000934                 jb      short loc_94B
.text:00000936                 mov     [ebp+var_C], 13329ACh
.text:0000093D                 push    offset __TI1H
.text:00000942                 lea     eax, [ebp+var_C]
.text:00000945                 push    eax
.text:00000946                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:0000094B ; ---------------------------------------------------------------------------
.text:0000094B
.text:0000094B loc_94B:                                ; CODE XREF: AString::ReAlloc2(uint)+24j
.text:0000094B                 mov     ecx, [ebp+arg_0]
.text:0000094E                 add     ecx, 1
.text:00000951                 push    ecx             ; unsigned int
.text:00000952                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000957                 add     esp, 4
.text:0000095A                 mov     [ebp+var_10], eax
.text:0000095D                 mov     edx, [ebp+var_10]
.text:00000960                 mov     [ebp+var_8], edx
.text:00000963                 mov     eax, [ebp+var_8]
.text:00000966                 mov     byte ptr [eax], 0
.text:00000969                 mov     ecx, [ebp+var_4]
.text:0000096C                 mov     edx, [ecx]
.text:0000096E                 mov     [ebp+var_14], edx
.text:00000971                 mov     eax, [ebp+var_14]
.text:00000974                 push    eax             ; void *
.text:00000975                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000097A                 add     esp, 4
.text:0000097D                 mov     ecx, [ebp+var_4]
.text:00000980                 mov     edx, [ebp+var_8]
.text:00000983                 mov     [ecx], edx
.text:00000985                 mov     eax, [ebp+var_4]
.text:00000988                 mov     ecx, [ebp+arg_0]
.text:0000098B                 mov     [eax+8], ecx
.text:0000098E                 add     esp, 14h
.text:00000991                 cmp     ebp, esp
.text:00000993                 call    __RTC_CheckEsp
.text:00000998                 mov     esp, ebp
.text:0000099A                 pop     ebp
.text:0000099B                 retn    4
.text:0000099B ?ReAlloc2@AString@@AAEXI@Z endp
.text:0000099B
.text:0000099B ; ---------------------------------------------------------------------------
.text:0000099E                 align 10h
.text:000009A0
.text:000009A0 ; =============== S U B R O U T I N E =======================================
.text:000009A0
.text:000009A0 ; Attributes: bp-based frame
.text:000009A0
.text:000009A0 ; void __thiscall AString::SetStartLen(AString *this, unsigned int)
.text:000009A0                 public ?SetStartLen@AString@@AAEXI@Z
.text:000009A0 ?SetStartLen@AString@@AAEXI@Z proc near ; CODE XREF: AString::AString(uint,AString const &)+29p
.text:000009A0                                         ; AString::AString(AString const &,char)+2Dp ...
.text:000009A0
.text:000009A0 var_8           = dword ptr -8
.text:000009A0 var_4           = dword ptr -4
.text:000009A0 arg_0           = dword ptr  8
.text:000009A0
.text:000009A0                 push    ebp
.text:000009A1                 mov     ebp, esp
.text:000009A3                 sub     esp, 8
.text:000009A6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000009AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009B4                 mov     [ebp+var_4], ecx
.text:000009B7                 mov     eax, [ebp+var_4]
.text:000009BA                 mov     dword ptr [eax], 0
.text:000009C0                 mov     ecx, [ebp+arg_0]
.text:000009C3                 add     ecx, 1
.text:000009C6                 push    ecx             ; unsigned int
.text:000009C7                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000009CC                 add     esp, 4
.text:000009CF                 mov     [ebp+var_8], eax
.text:000009D2                 mov     edx, [ebp+var_4]
.text:000009D5                 mov     eax, [ebp+var_8]
.text:000009D8                 mov     [edx], eax
.text:000009DA                 mov     ecx, [ebp+var_4]
.text:000009DD                 mov     edx, [ebp+arg_0]
.text:000009E0                 mov     [ecx+4], edx
.text:000009E3                 mov     eax, [ebp+var_4]
.text:000009E6                 mov     ecx, [ebp+arg_0]
.text:000009E9                 mov     [eax+8], ecx
.text:000009EC                 add     esp, 8
.text:000009EF                 cmp     ebp, esp
.text:000009F1                 call    __RTC_CheckEsp
.text:000009F6                 mov     esp, ebp
.text:000009F8                 pop     ebp
.text:000009F9                 retn    4
.text:000009F9 ?SetStartLen@AString@@AAEXI@Z endp
.text:000009F9
.text:000009F9 ; ---------------------------------------------------------------------------
.text:000009FC                 align 10h
.text:00000A00
.text:00000A00 ; =============== S U B R O U T I N E =======================================
.text:00000A00
.text:00000A00 ; Attributes: bp-based frame
.text:00000A00
.text:00000A00 ; void __thiscall AString::Grow_1(AString *__hidden this)
.text:00000A00                 public ?Grow_1@AString@@AAEXXZ
.text:00000A00 ?Grow_1@AString@@AAEXXZ proc near       ; CODE XREF: AString::InsertAtFront(char)+1Fp
.text:00000A00                                         ; AString::operator+=(char)+2Fp
.text:00000A00
.text:00000A00 var_8           = dword ptr -8
.text:00000A00 var_4           = dword ptr -4
.text:00000A00
.text:00000A00                 push    ebp
.text:00000A01                 mov     ebp, esp
.text:00000A03                 sub     esp, 8
.text:00000A06                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000A0D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A14                 mov     [ebp+var_4], ecx
.text:00000A17                 mov     eax, [ebp+var_4]
.text:00000A1A                 mov     ecx, [eax+4]
.text:00000A1D                 mov     [ebp+var_8], ecx
.text:00000A20                 mov     edx, [ebp+var_8]
.text:00000A23                 shr     edx, 1
.text:00000A25                 add     edx, [ebp+var_8]
.text:00000A28                 mov     [ebp+var_8], edx
.text:00000A2B                 mov     eax, [ebp+var_8]
.text:00000A2E                 add     eax, 10h
.text:00000A31                 mov     [ebp+var_8], eax
.text:00000A34                 mov     ecx, [ebp+var_8]
.text:00000A37                 and     ecx, 0FFFFFFF0h
.text:00000A3A                 mov     [ebp+var_8], ecx
.text:00000A3D                 mov     edx, [ebp+var_8]
.text:00000A40                 sub     edx, 1
.text:00000A43                 push    edx             ; unsigned int
.text:00000A44                 mov     ecx, [ebp+var_4] ; this
.text:00000A47                 call    ?ReAlloc@AString@@AAEXI@Z ; AString::ReAlloc(uint)
.text:00000A4C                 add     esp, 8
.text:00000A4F                 cmp     ebp, esp
.text:00000A51                 call    __RTC_CheckEsp
.text:00000A56                 mov     esp, ebp
.text:00000A58                 pop     ebp
.text:00000A59                 retn
.text:00000A59 ?Grow_1@AString@@AAEXXZ endp
.text:00000A59
.text:00000A59 ; ---------------------------------------------------------------------------
.text:00000A5A                 align 10h
.text:00000A60
.text:00000A60 ; =============== S U B R O U T I N E =======================================
.text:00000A60
.text:00000A60 ; Attributes: bp-based frame
.text:00000A60
.text:00000A60 ; void __thiscall AString::Grow(AString *this, unsigned int)
.text:00000A60                 public ?Grow@AString@@AAEXI@Z
.text:00000A60 ?Grow@AString@@AAEXI@Z proc near        ; CODE XREF: AString::InsertSpace(uint &,uint)+15p
.text:00000A60                                         ; AString::operator+=(char const *)+2Ap ...
.text:00000A60
.text:00000A60 var_C           = dword ptr -0Ch
.text:00000A60 var_8           = dword ptr -8
.text:00000A60 var_4           = dword ptr -4
.text:00000A60 arg_0           = dword ptr  8
.text:00000A60
.text:00000A60                 push    ebp
.text:00000A61                 mov     ebp, esp
.text:00000A63                 sub     esp, 0Ch
.text:00000A66                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000A6D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000A74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A7B                 mov     [ebp+var_4], ecx
.text:00000A7E                 mov     eax, [ebp+var_4]
.text:00000A81                 mov     ecx, [ebp+var_4]
.text:00000A84                 mov     edx, [eax+8]
.text:00000A87                 sub     edx, [ecx+4]
.text:00000A8A                 mov     [ebp+var_8], edx
.text:00000A8D                 mov     eax, [ebp+arg_0]
.text:00000A90                 cmp     eax, [ebp+var_8]
.text:00000A93                 ja      short loc_A97
.text:00000A95                 jmp     short loc_ACF
.text:00000A97 ; ---------------------------------------------------------------------------
.text:00000A97
.text:00000A97 loc_A97:                                ; CODE XREF: AString::Grow(uint)+33j
.text:00000A97                 mov     ecx, [ebp+var_4]
.text:00000A9A                 mov     edx, [ecx+4]
.text:00000A9D                 add     edx, [ebp+arg_0]
.text:00000AA0                 mov     [ebp+var_C], edx
.text:00000AA3                 mov     eax, [ebp+var_C]
.text:00000AA6                 shr     eax, 1
.text:00000AA8                 add     eax, [ebp+var_C]
.text:00000AAB                 mov     [ebp+var_C], eax
.text:00000AAE                 mov     ecx, [ebp+var_C]
.text:00000AB1                 add     ecx, 10h
.text:00000AB4                 mov     [ebp+var_C], ecx
.text:00000AB7                 mov     edx, [ebp+var_C]
.text:00000ABA                 and     edx, 0FFFFFFF0h
.text:00000ABD                 mov     [ebp+var_C], edx
.text:00000AC0                 mov     eax, [ebp+var_C]
.text:00000AC3                 sub     eax, 1
.text:00000AC6                 push    eax             ; unsigned int
.text:00000AC7                 mov     ecx, [ebp+var_4] ; this
.text:00000ACA                 call    ?ReAlloc@AString@@AAEXI@Z ; AString::ReAlloc(uint)
.text:00000ACF
.text:00000ACF loc_ACF:                                ; CODE XREF: AString::Grow(uint)+35j
.text:00000ACF                 add     esp, 0Ch
.text:00000AD2                 cmp     ebp, esp
.text:00000AD4                 call    __RTC_CheckEsp
.text:00000AD9                 mov     esp, ebp
.text:00000ADB                 pop     ebp
.text:00000ADC                 retn    4
.text:00000ADC ?Grow@AString@@AAEXI@Z endp
.text:00000ADC
.text:00000ADC ; ---------------------------------------------------------------------------
.text:00000ADF                 align 10h
.text:00000AE0
.text:00000AE0 ; =============== S U B R O U T I N E =======================================
.text:00000AE0
.text:00000AE0 ; Attributes: bp-based frame
.text:00000AE0
.text:00000AE0 ; int __stdcall AString::AString(size_t Size, int)
.text:00000AE0                 public ??0AString@@AAE@IABV0@@Z
.text:00000AE0 ??0AString@@AAE@IABV0@@Z proc near
.text:00000AE0
.text:00000AE0 var_4           = dword ptr -4
.text:00000AE0 Size            = dword ptr  8
.text:00000AE0 arg_4           = dword ptr  0Ch
.text:00000AE0
.text:00000AE0                 push    ebp
.text:00000AE1                 mov     ebp, esp
.text:00000AE3                 push    ecx
.text:00000AE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AEB                 mov     [ebp+var_4], ecx
.text:00000AEE                 mov     eax, [ebp+arg_4]
.text:00000AF1                 mov     ecx, [ebp+Size]
.text:00000AF4                 cmp     ecx, [eax+4]
.text:00000AF7                 jbe     short loc_B02
.text:00000AF9                 mov     edx, [ebp+arg_4]
.text:00000AFC                 mov     eax, [edx+4]
.text:00000AFF                 mov     [ebp+Size], eax
.text:00000B02
.text:00000B02 loc_B02:                                ; CODE XREF: AString::AString(uint,AString const &)+17j
.text:00000B02                 mov     ecx, [ebp+Size]
.text:00000B05                 push    ecx             ; unsigned int
.text:00000B06                 mov     ecx, [ebp+var_4] ; this
.text:00000B09                 call    ?SetStartLen@AString@@AAEXI@Z ; AString::SetStartLen(uint)
.text:00000B0E                 mov     edx, [ebp+Size]
.text:00000B11                 push    edx             ; Size
.text:00000B12                 mov     eax, [ebp+arg_4]
.text:00000B15                 mov     ecx, [eax]
.text:00000B17                 push    ecx             ; Src
.text:00000B18                 mov     edx, [ebp+var_4]
.text:00000B1B                 mov     eax, [edx]
.text:00000B1D                 push    eax             ; Dst
.text:00000B1E                 call    _memcpy
.text:00000B23                 add     esp, 0Ch
.text:00000B26                 mov     ecx, [ebp+var_4]
.text:00000B29                 mov     edx, [ecx]
.text:00000B2B                 mov     eax, [ebp+Size]
.text:00000B2E                 mov     byte ptr [edx+eax], 0
.text:00000B32                 mov     eax, [ebp+var_4]
.text:00000B35                 add     esp, 4
.text:00000B38                 cmp     ebp, esp
.text:00000B3A                 call    __RTC_CheckEsp
.text:00000B3F                 mov     esp, ebp
.text:00000B41                 pop     ebp
.text:00000B42                 retn    8
.text:00000B42 ??0AString@@AAE@IABV0@@Z endp
.text:00000B42
.text:00000B42 ; ---------------------------------------------------------------------------
.text:00000B45                 align 10h
.text:00000B50
.text:00000B50 ; =============== S U B R O U T I N E =======================================
.text:00000B50
.text:00000B50 ; Attributes: bp-based frame
.text:00000B50
.text:00000B50 ; int __stdcall AString::AString(AString *, char)
.text:00000B50                 public ??0AString@@AAE@ABV0@D@Z
.text:00000B50 ??0AString@@AAE@ABV0@D@Z proc near
.text:00000B50
.text:00000B50 Size            = dword ptr -0Ch
.text:00000B50 Dst             = dword ptr -8
.text:00000B50 var_4           = dword ptr -4
.text:00000B50 arg_0           = dword ptr  8
.text:00000B50 arg_4           = byte ptr  0Ch
.text:00000B50
.text:00000B50                 push    ebp
.text:00000B51                 mov     ebp, esp
.text:00000B53                 sub     esp, 0Ch
.text:00000B56                 mov     [ebp+Size], 0CCCCCCCCh
.text:00000B5D                 mov     [ebp+Dst], 0CCCCCCCCh
.text:00000B64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B6B                 mov     [ebp+var_4], ecx
.text:00000B6E                 mov     ecx, [ebp+arg_0] ; this
.text:00000B71                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000B76                 add     eax, 1
.text:00000B79                 push    eax             ; unsigned int
.text:00000B7A                 mov     ecx, [ebp+var_4] ; this
.text:00000B7D                 call    ?SetStartLen@AString@@AAEXI@Z ; AString::SetStartLen(uint)
.text:00000B82                 mov     eax, [ebp+var_4]
.text:00000B85                 mov     ecx, [eax]
.text:00000B87                 mov     [ebp+Dst], ecx
.text:00000B8A                 mov     ecx, [ebp+arg_0] ; this
.text:00000B8D                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000B92                 mov     [ebp+Size], eax
.text:00000B95                 mov     edx, [ebp+Size]
.text:00000B98                 push    edx             ; Size
.text:00000B99                 mov     ecx, [ebp+arg_0]
.text:00000B9C                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000BA1                 push    eax             ; Src
.text:00000BA2                 mov     eax, [ebp+Dst]
.text:00000BA5                 push    eax             ; Dst
.text:00000BA6                 call    _memcpy
.text:00000BAB                 add     esp, 0Ch
.text:00000BAE                 mov     ecx, [ebp+Dst]
.text:00000BB1                 add     ecx, [ebp+Size]
.text:00000BB4                 mov     dl, [ebp+arg_4]
.text:00000BB7                 mov     [ecx], dl
.text:00000BB9                 mov     eax, [ebp+Dst]
.text:00000BBC                 add     eax, [ebp+Size]
.text:00000BBF                 mov     byte ptr [eax+1], 0
.text:00000BC3                 mov     eax, [ebp+var_4]
.text:00000BC6                 add     esp, 0Ch
.text:00000BC9                 cmp     ebp, esp
.text:00000BCB                 call    __RTC_CheckEsp
.text:00000BD0                 mov     esp, ebp
.text:00000BD2                 pop     ebp
.text:00000BD3                 retn    8
.text:00000BD3 ??0AString@@AAE@ABV0@D@Z endp
.text:00000BD3
.text:00000BD3 ; ---------------------------------------------------------------------------
.text:00000BD6                 align 10h
.text:00000BE0
.text:00000BE0 ; =============== S U B R O U T I N E =======================================
.text:00000BE0
.text:00000BE0 ; Attributes: bp-based frame
.text:00000BE0
.text:00000BE0 ; int __stdcall AString::AString(void *Src, size_t Size, void *, int)
.text:00000BE0                 public ??0AString@@AAE@PBDI0I@Z
.text:00000BE0 ??0AString@@AAE@PBDI0I@Z proc near      ; CODE XREF: operator+(AString const &,AString const &)+39p
.text:00000BE0                                         ; operator+(AString const &,char const *)+35p ...
.text:00000BE0
.text:00000BE0 Dst             = dword ptr -8
.text:00000BE0 var_4           = dword ptr -4
.text:00000BE0 Src             = dword ptr  8
.text:00000BE0 Size            = dword ptr  0Ch
.text:00000BE0 arg_8           = dword ptr  10h
.text:00000BE0 arg_C           = dword ptr  14h
.text:00000BE0
.text:00000BE0                 push    ebp
.text:00000BE1                 mov     ebp, esp
.text:00000BE3                 sub     esp, 8
.text:00000BE6                 mov     [ebp+Dst], 0CCCCCCCCh
.text:00000BED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BF4                 mov     [ebp+var_4], ecx
.text:00000BF7                 mov     eax, [ebp+Size]
.text:00000BFA                 add     eax, [ebp+arg_C]
.text:00000BFD                 push    eax             ; unsigned int
.text:00000BFE                 mov     ecx, [ebp+var_4] ; this
.text:00000C01                 call    ?SetStartLen@AString@@AAEXI@Z ; AString::SetStartLen(uint)
.text:00000C06                 mov     ecx, [ebp+var_4]
.text:00000C09                 mov     edx, [ecx]
.text:00000C0B                 mov     [ebp+Dst], edx
.text:00000C0E                 mov     eax, [ebp+Size]
.text:00000C11                 push    eax             ; Size
.text:00000C12                 mov     ecx, [ebp+Src]
.text:00000C15                 push    ecx             ; Src
.text:00000C16                 mov     edx, [ebp+Dst]
.text:00000C19                 push    edx             ; Dst
.text:00000C1A                 call    _memcpy
.text:00000C1F                 add     esp, 0Ch
.text:00000C22                 mov     eax, [ebp+arg_C]
.text:00000C25                 add     eax, 1
.text:00000C28                 push    eax             ; Size
.text:00000C29                 mov     ecx, [ebp+arg_8]
.text:00000C2C                 push    ecx             ; Src
.text:00000C2D                 mov     edx, [ebp+Dst]
.text:00000C30                 add     edx, [ebp+Size]
.text:00000C33                 push    edx             ; Dst
.text:00000C34                 call    _memcpy
.text:00000C39                 add     esp, 0Ch
.text:00000C3C                 mov     eax, [ebp+var_4]
.text:00000C3F                 add     esp, 8
.text:00000C42                 cmp     ebp, esp
.text:00000C44                 call    __RTC_CheckEsp
.text:00000C49                 mov     esp, ebp
.text:00000C4B                 pop     ebp
.text:00000C4C                 retn    10h
.text:00000C4C ??0AString@@AAE@PBDI0I@Z endp
.text:00000C4C
.text:00000C4C ; ---------------------------------------------------------------------------
.text:00000C4F                 align 10h
.text:00000C50
.text:00000C50 ; =============== S U B R O U T I N E =======================================
.text:00000C50
.text:00000C50 ; Attributes: bp-based frame
.text:00000C50
.text:00000C50 ; int __stdcall operator+(int, AString *, AString *)
.text:00000C50                 public ??H@YG?AVAString@@ABV0@0@Z
.text:00000C50 ??H@YG?AVAString@@ABV0@0@Z proc near
.text:00000C50
.text:00000C50 var_4           = dword ptr -4
.text:00000C50 arg_0           = dword ptr  8
.text:00000C50 arg_4           = dword ptr  0Ch
.text:00000C50 arg_8           = dword ptr  10h
.text:00000C50
.text:00000C50                 push    ebp
.text:00000C51                 mov     ebp, esp
.text:00000C53                 push    ecx
.text:00000C54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C5B                 mov     [ebp+var_4], 0
.text:00000C62                 mov     ecx, [ebp+arg_8] ; this
.text:00000C65                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000C6A                 push    eax             ; int
.text:00000C6B                 mov     ecx, [ebp+arg_8]
.text:00000C6E                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000C73                 push    eax             ; void *
.text:00000C74                 mov     ecx, [ebp+arg_4] ; this
.text:00000C77                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000C7C                 push    eax             ; Size
.text:00000C7D                 mov     ecx, [ebp+arg_4]
.text:00000C80                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000C85                 push    eax             ; Src
.text:00000C86                 mov     ecx, [ebp+arg_0]
.text:00000C89                 call    ??0AString@@AAE@PBDI0I@Z ; AString::AString(char const *,uint,char const *,uint)
.text:00000C8E                 mov     eax, [ebp+var_4]
.text:00000C91                 or      eax, 1
.text:00000C94                 mov     [ebp+var_4], eax
.text:00000C97                 mov     eax, [ebp+arg_0]
.text:00000C9A                 add     esp, 4
.text:00000C9D                 cmp     ebp, esp
.text:00000C9F                 call    __RTC_CheckEsp
.text:00000CA4                 mov     esp, ebp
.text:00000CA6                 pop     ebp
.text:00000CA7                 retn    0Ch
.text:00000CA7 ??H@YG?AVAString@@ABV0@0@Z endp
.text:00000CA7
.text:00000CA7 ; ---------------------------------------------------------------------------
.text:00000CAA                 align 10h
.text:00000CB0
.text:00000CB0 ; =============== S U B R O U T I N E =======================================
.text:00000CB0
.text:00000CB0 ; Attributes: bp-based frame
.text:00000CB0
.text:00000CB0 ; int __stdcall operator+(int, AString *, char *)
.text:00000CB0                 public ??H@YG?AVAString@@ABV0@PBD@Z
.text:00000CB0 ??H@YG?AVAString@@ABV0@PBD@Z proc near
.text:00000CB0
.text:00000CB0 var_4           = dword ptr -4
.text:00000CB0 arg_0           = dword ptr  8
.text:00000CB0 arg_4           = dword ptr  0Ch
.text:00000CB0 arg_8           = dword ptr  10h
.text:00000CB0
.text:00000CB0                 push    ebp
.text:00000CB1                 mov     ebp, esp
.text:00000CB3                 push    ecx
.text:00000CB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CBB                 mov     [ebp+var_4], 0
.text:00000CC2                 mov     eax, [ebp+arg_8]
.text:00000CC5                 push    eax             ; char *
.text:00000CC6                 call    ?MyStringLen@@YGIPBD@Z ; MyStringLen(char const *)
.text:00000CCB                 push    eax             ; int
.text:00000CCC                 mov     ecx, [ebp+arg_8]
.text:00000CCF                 push    ecx             ; void *
.text:00000CD0                 mov     ecx, [ebp+arg_4] ; this
.text:00000CD3                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000CD8                 push    eax             ; Size
.text:00000CD9                 mov     ecx, [ebp+arg_4]
.text:00000CDC                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000CE1                 push    eax             ; Src
.text:00000CE2                 mov     ecx, [ebp+arg_0]
.text:00000CE5                 call    ??0AString@@AAE@PBDI0I@Z ; AString::AString(char const *,uint,char const *,uint)
.text:00000CEA                 mov     edx, [ebp+var_4]
.text:00000CED                 or      edx, 1
.text:00000CF0                 mov     [ebp+var_4], edx
.text:00000CF3                 mov     eax, [ebp+arg_0]
.text:00000CF6                 add     esp, 4
.text:00000CF9                 cmp     ebp, esp
.text:00000CFB                 call    __RTC_CheckEsp
.text:00000D00                 mov     esp, ebp
.text:00000D02                 pop     ebp
.text:00000D03                 retn    0Ch
.text:00000D03 ??H@YG?AVAString@@ABV0@PBD@Z endp
.text:00000D03
.text:00000D03 ; ---------------------------------------------------------------------------
.text:00000D06                 align 10h
.text:00000D10
.text:00000D10 ; =============== S U B R O U T I N E =======================================
.text:00000D10
.text:00000D10 ; Attributes: bp-based frame
.text:00000D10
.text:00000D10 ; int __stdcall operator+(int, char *, AString *)
.text:00000D10                 public ??H@YG?AVAString@@PBDABV0@@Z
.text:00000D10 ??H@YG?AVAString@@PBDABV0@@Z proc near
.text:00000D10
.text:00000D10 var_4           = dword ptr -4
.text:00000D10 arg_0           = dword ptr  8
.text:00000D10 arg_4           = dword ptr  0Ch
.text:00000D10 arg_8           = dword ptr  10h
.text:00000D10
.text:00000D10                 push    ebp
.text:00000D11                 mov     ebp, esp
.text:00000D13                 push    ecx
.text:00000D14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D1B                 mov     [ebp+var_4], 0
.text:00000D22                 mov     ecx, [ebp+arg_8] ; this
.text:00000D25                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000D2A                 push    eax             ; int
.text:00000D2B                 mov     ecx, [ebp+arg_8]
.text:00000D2E                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000D33                 push    eax             ; void *
.text:00000D34                 mov     eax, [ebp+arg_4]
.text:00000D37                 push    eax             ; char *
.text:00000D38                 call    ?MyStringLen@@YGIPBD@Z ; MyStringLen(char const *)
.text:00000D3D                 push    eax             ; Size
.text:00000D3E                 mov     ecx, [ebp+arg_4]
.text:00000D41                 push    ecx             ; Src
.text:00000D42                 mov     ecx, [ebp+arg_0]
.text:00000D45                 call    ??0AString@@AAE@PBDI0I@Z ; AString::AString(char const *,uint,char const *,uint)
.text:00000D4A                 mov     edx, [ebp+var_4]
.text:00000D4D                 or      edx, 1
.text:00000D50                 mov     [ebp+var_4], edx
.text:00000D53                 mov     eax, [ebp+arg_0]
.text:00000D56                 add     esp, 4
.text:00000D59                 cmp     ebp, esp
.text:00000D5B                 call    __RTC_CheckEsp
.text:00000D60                 mov     esp, ebp
.text:00000D62                 pop     ebp
.text:00000D63                 retn    0Ch
.text:00000D63 ??H@YG?AVAString@@PBDABV0@@Z endp
.text:00000D63
.text:00000D63 ; ---------------------------------------------------------------------------
.text:00000D66                 align 10h
.text:00000D70
.text:00000D70 ; =============== S U B R O U T I N E =======================================
.text:00000D70
.text:00000D70 ; Attributes: bp-based frame
.text:00000D70
.text:00000D70 ; public: __thiscall AString::AString(void)
.text:00000D70                 public ??0AString@@QAE@XZ
.text:00000D70 ??0AString@@QAE@XZ proc near
.text:00000D70
.text:00000D70 var_8           = dword ptr -8
.text:00000D70 var_4           = dword ptr -4
.text:00000D70
.text:00000D70                 push    ebp
.text:00000D71                 mov     ebp, esp
.text:00000D73                 sub     esp, 8
.text:00000D76                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000D7D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D84                 mov     [ebp+var_4], ecx
.text:00000D87                 mov     eax, [ebp+var_4]
.text:00000D8A                 mov     dword ptr [eax], 0
.text:00000D90                 push    4               ; unsigned int
.text:00000D92                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000D97                 add     esp, 4
.text:00000D9A                 mov     [ebp+var_8], eax
.text:00000D9D                 mov     ecx, [ebp+var_4]
.text:00000DA0                 mov     edx, [ebp+var_8]
.text:00000DA3                 mov     [ecx], edx
.text:00000DA5                 mov     eax, [ebp+var_4]
.text:00000DA8                 mov     dword ptr [eax+4], 0
.text:00000DAF                 mov     ecx, [ebp+var_4]
.text:00000DB2                 mov     dword ptr [ecx+8], 3
.text:00000DB9                 mov     edx, [ebp+var_4]
.text:00000DBC                 mov     eax, [edx]
.text:00000DBE                 mov     byte ptr [eax], 0
.text:00000DC1                 mov     eax, [ebp+var_4]
.text:00000DC4                 add     esp, 8
.text:00000DC7                 cmp     ebp, esp
.text:00000DC9                 call    __RTC_CheckEsp
.text:00000DCE                 mov     esp, ebp
.text:00000DD0                 pop     ebp
.text:00000DD1                 retn
.text:00000DD1 ??0AString@@QAE@XZ endp
.text:00000DD1
.text:00000DD1 ; ---------------------------------------------------------------------------
.text:00000DD2                 align 10h
.text:00000DE0
.text:00000DE0 ; =============== S U B R O U T I N E =======================================
.text:00000DE0
.text:00000DE0 ; Attributes: bp-based frame
.text:00000DE0
.text:00000DE0 ; public: __thiscall AString::AString(char)
.text:00000DE0                 public ??0AString@@QAE@D@Z
.text:00000DE0 ??0AString@@QAE@D@Z proc near
.text:00000DE0
.text:00000DE0 var_4           = dword ptr -4
.text:00000DE0 arg_0           = byte ptr  8
.text:00000DE0
.text:00000DE0                 push    ebp
.text:00000DE1                 mov     ebp, esp
.text:00000DE3                 push    ecx
.text:00000DE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DEB                 mov     [ebp+var_4], ecx
.text:00000DEE                 push    1               ; unsigned int
.text:00000DF0                 mov     ecx, [ebp+var_4] ; this
.text:00000DF3                 call    ?SetStartLen@AString@@AAEXI@Z ; AString::SetStartLen(uint)
.text:00000DF8                 mov     eax, [ebp+var_4]
.text:00000DFB                 mov     ecx, [eax]
.text:00000DFD                 mov     dl, [ebp+arg_0]
.text:00000E00                 mov     [ecx], dl
.text:00000E02                 mov     eax, [ebp+var_4]
.text:00000E05                 mov     ecx, [eax]
.text:00000E07                 mov     byte ptr [ecx+1], 0
.text:00000E0B                 mov     eax, [ebp+var_4]
.text:00000E0E                 add     esp, 4
.text:00000E11                 cmp     ebp, esp
.text:00000E13                 call    __RTC_CheckEsp
.text:00000E18                 mov     esp, ebp
.text:00000E1A                 pop     ebp
.text:00000E1B                 retn    4
.text:00000E1B ??0AString@@QAE@D@Z endp
.text:00000E1B
.text:00000E1B ; ---------------------------------------------------------------------------
.text:00000E1E                 align 10h
.text:00000E20
.text:00000E20 ; =============== S U B R O U T I N E =======================================
.text:00000E20
.text:00000E20 ; Attributes: bp-based frame
.text:00000E20
.text:00000E20 ; int __stdcall AString::AString(char *)
.text:00000E20                 public ??0AString@@QAE@PBD@Z
.text:00000E20 ??0AString@@QAE@PBD@Z proc near
.text:00000E20
.text:00000E20 var_4           = dword ptr -4
.text:00000E20 arg_0           = dword ptr  8
.text:00000E20
.text:00000E20                 push    ebp
.text:00000E21                 mov     ebp, esp
.text:00000E23                 push    ecx
.text:00000E24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E2B                 mov     [ebp+var_4], ecx
.text:00000E2E                 mov     eax, [ebp+arg_0]
.text:00000E31                 push    eax             ; char *
.text:00000E32                 call    ?MyStringLen@@YGIPBD@Z ; MyStringLen(char const *)
.text:00000E37                 push    eax             ; unsigned int
.text:00000E38                 mov     ecx, [ebp+var_4] ; this
.text:00000E3B                 call    ?SetStartLen@AString@@AAEXI@Z ; AString::SetStartLen(uint)
.text:00000E40                 mov     ecx, [ebp+arg_0]
.text:00000E43                 push    ecx             ; char *
.text:00000E44                 mov     edx, [ebp+var_4]
.text:00000E47                 mov     eax, [edx]
.text:00000E49                 push    eax             ; char *
.text:00000E4A                 call    ?MyStringCopy@@YGXPADPBD@Z ; MyStringCopy(char *,char const *)
.text:00000E4F                 mov     eax, [ebp+var_4]
.text:00000E52                 add     esp, 4
.text:00000E55                 cmp     ebp, esp
.text:00000E57                 call    __RTC_CheckEsp
.text:00000E5C                 mov     esp, ebp
.text:00000E5E                 pop     ebp
.text:00000E5F                 retn    4
.text:00000E5F ??0AString@@QAE@PBD@Z endp
.text:00000E5F
.text:00000E5F ; ---------------------------------------------------------------------------
.text:00000E62                 align 10h
.text:00000E70
.text:00000E70 ; =============== S U B R O U T I N E =======================================
.text:00000E70
.text:00000E70 ; Attributes: bp-based frame
.text:00000E70
.text:00000E70 ; public: __thiscall AString::AString(class AString const &)
.text:00000E70                 public ??0AString@@QAE@ABV0@@Z
.text:00000E70 ??0AString@@QAE@ABV0@@Z proc near
.text:00000E70
.text:00000E70 var_4           = dword ptr -4
.text:00000E70 arg_0           = dword ptr  8
.text:00000E70
.text:00000E70                 push    ebp
.text:00000E71                 mov     ebp, esp
.text:00000E73                 push    ecx
.text:00000E74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E7B                 mov     [ebp+var_4], ecx
.text:00000E7E                 mov     eax, [ebp+arg_0]
.text:00000E81                 mov     ecx, [eax+4]
.text:00000E84                 push    ecx             ; unsigned int
.text:00000E85                 mov     ecx, [ebp+var_4] ; this
.text:00000E88                 call    ?SetStartLen@AString@@AAEXI@Z ; AString::SetStartLen(uint)
.text:00000E8D                 mov     edx, [ebp+arg_0]
.text:00000E90                 mov     eax, [edx]
.text:00000E92                 push    eax             ; char *
.text:00000E93                 mov     ecx, [ebp+var_4]
.text:00000E96                 mov     edx, [ecx]
.text:00000E98                 push    edx             ; char *
.text:00000E99                 call    ?MyStringCopy@@YGXPADPBD@Z ; MyStringCopy(char *,char const *)
.text:00000E9E                 mov     eax, [ebp+var_4]
.text:00000EA1                 add     esp, 4
.text:00000EA4                 cmp     ebp, esp
.text:00000EA6                 call    __RTC_CheckEsp
.text:00000EAB                 mov     esp, ebp
.text:00000EAD                 pop     ebp
.text:00000EAE                 retn    4
.text:00000EAE ??0AString@@QAE@ABV0@@Z endp
.text:00000EAE
.text:00000EAE ; ---------------------------------------------------------------------------
.text:00000EB1                 align 10h
.text:00000EC0
.text:00000EC0 ; =============== S U B R O U T I N E =======================================
.text:00000EC0
.text:00000EC0 ; Attributes: bp-based frame
.text:00000EC0
.text:00000EC0 ; public: class AString & __thiscall AString::operator=(char)
.text:00000EC0                 public ??4AString@@QAEAAV0@D@Z
.text:00000EC0 ??4AString@@QAEAAV0@D@Z proc near
.text:00000EC0
.text:00000EC0 var_10          = dword ptr -10h
.text:00000EC0 var_C           = dword ptr -0Ch
.text:00000EC0 var_8           = dword ptr -8
.text:00000EC0 var_4           = dword ptr -4
.text:00000EC0 arg_0           = byte ptr  8
.text:00000EC0
.text:00000EC0                 push    ebp
.text:00000EC1                 mov     ebp, esp
.text:00000EC3                 sub     esp, 10h
.text:00000EC6                 mov     eax, 0CCCCCCCCh
.text:00000ECB                 mov     [ebp+var_10], eax
.text:00000ECE                 mov     [ebp+var_C], eax
.text:00000ED1                 mov     [ebp+var_8], eax
.text:00000ED4                 mov     [ebp+var_4], eax
.text:00000ED7                 mov     [ebp+var_4], ecx
.text:00000EDA                 mov     eax, [ebp+var_4]
.text:00000EDD                 cmp     dword ptr [eax+8], 1
.text:00000EE1                 jnb     short loc_F1C
.text:00000EE3                 push    2               ; unsigned int
.text:00000EE5                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000EEA                 add     esp, 4
.text:00000EED                 mov     [ebp+var_C], eax
.text:00000EF0                 mov     ecx, [ebp+var_C]
.text:00000EF3                 mov     [ebp+var_8], ecx
.text:00000EF6                 mov     edx, [ebp+var_4]
.text:00000EF9                 mov     eax, [edx]
.text:00000EFB                 mov     [ebp+var_10], eax
.text:00000EFE                 mov     ecx, [ebp+var_10]
.text:00000F01                 push    ecx             ; void *
.text:00000F02                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000F07                 add     esp, 4
.text:00000F0A                 mov     edx, [ebp+var_4]
.text:00000F0D                 mov     eax, [ebp+var_8]
.text:00000F10                 mov     [edx], eax
.text:00000F12                 mov     ecx, [ebp+var_4]
.text:00000F15                 mov     dword ptr [ecx+8], 1
.text:00000F1C
.text:00000F1C loc_F1C:                                ; CODE XREF: AString::operator=(char)+21j
.text:00000F1C                 mov     edx, [ebp+var_4]
.text:00000F1F                 mov     dword ptr [edx+4], 1
.text:00000F26                 mov     eax, [ebp+var_4]
.text:00000F29                 mov     ecx, [eax]
.text:00000F2B                 mov     dl, [ebp+arg_0]
.text:00000F2E                 mov     [ecx], dl
.text:00000F30                 mov     eax, [ebp+var_4]
.text:00000F33                 mov     ecx, [eax]
.text:00000F35                 mov     byte ptr [ecx+1], 0
.text:00000F39                 mov     eax, [ebp+var_4]
.text:00000F3C                 add     esp, 10h
.text:00000F3F                 cmp     ebp, esp
.text:00000F41                 call    __RTC_CheckEsp
.text:00000F46                 mov     esp, ebp
.text:00000F48                 pop     ebp
.text:00000F49                 retn    4
.text:00000F49 ??4AString@@QAEAAV0@D@Z endp
.text:00000F49
.text:00000F49 ; ---------------------------------------------------------------------------
.text:00000F4C                 align 10h
.text:00000F50
.text:00000F50 ; =============== S U B R O U T I N E =======================================
.text:00000F50
.text:00000F50 ; Attributes: bp-based frame
.text:00000F50
.text:00000F50 ; int __stdcall AString::operator=(char *)
.text:00000F50                 public ??4AString@@QAEAAV0@PBD@Z
.text:00000F50 ??4AString@@QAEAAV0@PBD@Z proc near
.text:00000F50
.text:00000F50 var_14          = dword ptr -14h
.text:00000F50 var_10          = dword ptr -10h
.text:00000F50 var_C           = dword ptr -0Ch
.text:00000F50 var_8           = dword ptr -8
.text:00000F50 var_4           = dword ptr -4
.text:00000F50 arg_0           = dword ptr  8
.text:00000F50
.text:00000F50                 push    ebp
.text:00000F51                 mov     ebp, esp
.text:00000F53                 sub     esp, 14h
.text:00000F56                 mov     eax, 0CCCCCCCCh
.text:00000F5B                 mov     [ebp+var_14], eax
.text:00000F5E                 mov     [ebp+var_10], eax
.text:00000F61                 mov     [ebp+var_C], eax
.text:00000F64                 mov     [ebp+var_8], eax
.text:00000F67                 mov     [ebp+var_4], eax
.text:00000F6A                 mov     [ebp+var_4], ecx
.text:00000F6D                 mov     eax, [ebp+arg_0]
.text:00000F70                 push    eax             ; char *
.text:00000F71                 call    ?MyStringLen@@YGIPBD@Z ; MyStringLen(char const *)
.text:00000F76                 mov     [ebp+var_8], eax
.text:00000F79                 mov     ecx, [ebp+var_4]
.text:00000F7C                 mov     edx, [ebp+var_8]
.text:00000F7F                 cmp     edx, [ecx+8]
.text:00000F82                 jbe     short loc_FC1
.text:00000F84                 mov     eax, [ebp+var_8]
.text:00000F87                 add     eax, 1
.text:00000F8A                 push    eax             ; unsigned int
.text:00000F8B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000F90                 add     esp, 4
.text:00000F93                 mov     [ebp+var_10], eax
.text:00000F96                 mov     ecx, [ebp+var_10]
.text:00000F99                 mov     [ebp+var_C], ecx
.text:00000F9C                 mov     edx, [ebp+var_4]
.text:00000F9F                 mov     eax, [edx]
.text:00000FA1                 mov     [ebp+var_14], eax
.text:00000FA4                 mov     ecx, [ebp+var_14]
.text:00000FA7                 push    ecx             ; void *
.text:00000FA8                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000FAD                 add     esp, 4
.text:00000FB0                 mov     edx, [ebp+var_4]
.text:00000FB3                 mov     eax, [ebp+var_C]
.text:00000FB6                 mov     [edx], eax
.text:00000FB8                 mov     ecx, [ebp+var_4]
.text:00000FBB                 mov     edx, [ebp+var_8]
.text:00000FBE                 mov     [ecx+8], edx
.text:00000FC1
.text:00000FC1 loc_FC1:                                ; CODE XREF: AString::operator=(char const *)+32j
.text:00000FC1                 mov     eax, [ebp+var_4]
.text:00000FC4                 mov     ecx, [ebp+var_8]
.text:00000FC7                 mov     [eax+4], ecx
.text:00000FCA                 mov     edx, [ebp+arg_0]
.text:00000FCD                 push    edx             ; char *
.text:00000FCE                 mov     eax, [ebp+var_4]
.text:00000FD1                 mov     ecx, [eax]
.text:00000FD3                 push    ecx             ; char *
.text:00000FD4                 call    ?MyStringCopy@@YGXPADPBD@Z ; MyStringCopy(char *,char const *)
.text:00000FD9                 mov     eax, [ebp+var_4]
.text:00000FDC                 add     esp, 14h
.text:00000FDF                 cmp     ebp, esp
.text:00000FE1                 call    __RTC_CheckEsp
.text:00000FE6                 mov     esp, ebp
.text:00000FE8                 pop     ebp
.text:00000FE9                 retn    4
.text:00000FE9 ??4AString@@QAEAAV0@PBD@Z endp
.text:00000FE9
.text:00000FE9 ; ---------------------------------------------------------------------------
.text:00000FEC                 align 10h
.text:00000FF0
.text:00000FF0 ; =============== S U B R O U T I N E =======================================
.text:00000FF0
.text:00000FF0 ; Attributes: bp-based frame
.text:00000FF0
.text:00000FF0 ; public: class AString & __thiscall AString::operator=(class AString const &)
.text:00000FF0                 public ??4AString@@QAEAAV0@ABV0@@Z
.text:00000FF0 ??4AString@@QAEAAV0@ABV0@@Z proc near
.text:00000FF0
.text:00000FF0 var_14          = dword ptr -14h
.text:00000FF0 var_10          = dword ptr -10h
.text:00000FF0 var_C           = dword ptr -0Ch
.text:00000FF0 var_8           = dword ptr -8
.text:00000FF0 var_4           = dword ptr -4
.text:00000FF0 arg_0           = dword ptr  8
.text:00000FF0
.text:00000FF0                 push    ebp
.text:00000FF1                 mov     ebp, esp
.text:00000FF3                 sub     esp, 14h
.text:00000FF6                 mov     eax, 0CCCCCCCCh
.text:00000FFB                 mov     [ebp+var_14], eax
.text:00000FFE                 mov     [ebp+var_10], eax
.text:00001001                 mov     [ebp+var_C], eax
.text:00001004                 mov     [ebp+var_8], eax
.text:00001007                 mov     [ebp+var_4], eax
.text:0000100A                 mov     [ebp+var_4], ecx
.text:0000100D                 mov     eax, [ebp+arg_0]
.text:00001010                 cmp     eax, [ebp+var_4]
.text:00001013                 jnz     short loc_101A
.text:00001015                 mov     eax, [ebp+var_4]
.text:00001018                 jmp     short loc_1088
.text:0000101A ; ---------------------------------------------------------------------------
.text:0000101A
.text:0000101A loc_101A:                               ; CODE XREF: AString::operator=(AString const &)+23j
.text:0000101A                 mov     ecx, [ebp+arg_0]
.text:0000101D                 mov     edx, [ecx+4]
.text:00001020                 mov     [ebp+var_8], edx
.text:00001023                 mov     eax, [ebp+var_4]
.text:00001026                 mov     ecx, [ebp+var_8]
.text:00001029                 cmp     ecx, [eax+8]
.text:0000102C                 jbe     short loc_106B
.text:0000102E                 mov     edx, [ebp+var_8]
.text:00001031                 add     edx, 1
.text:00001034                 push    edx             ; unsigned int
.text:00001035                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000103A                 add     esp, 4
.text:0000103D                 mov     [ebp+var_10], eax
.text:00001040                 mov     eax, [ebp+var_10]
.text:00001043                 mov     [ebp+var_C], eax
.text:00001046                 mov     ecx, [ebp+var_4]
.text:00001049                 mov     edx, [ecx]
.text:0000104B                 mov     [ebp+var_14], edx
.text:0000104E                 mov     eax, [ebp+var_14]
.text:00001051                 push    eax             ; void *
.text:00001052                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001057                 add     esp, 4
.text:0000105A                 mov     ecx, [ebp+var_4]
.text:0000105D                 mov     edx, [ebp+var_C]
.text:00001060                 mov     [ecx], edx
.text:00001062                 mov     eax, [ebp+var_4]
.text:00001065                 mov     ecx, [ebp+var_8]
.text:00001068                 mov     [eax+8], ecx
.text:0000106B
.text:0000106B loc_106B:                               ; CODE XREF: AString::operator=(AString const &)+3Cj
.text:0000106B                 mov     edx, [ebp+var_4]
.text:0000106E                 mov     eax, [ebp+var_8]
.text:00001071                 mov     [edx+4], eax
.text:00001074                 mov     ecx, [ebp+arg_0]
.text:00001077                 mov     edx, [ecx]
.text:00001079                 push    edx             ; char *
.text:0000107A                 mov     eax, [ebp+var_4]
.text:0000107D                 mov     ecx, [eax]
.text:0000107F                 push    ecx             ; char *
.text:00001080                 call    ?MyStringCopy@@YGXPADPBD@Z ; MyStringCopy(char *,char const *)
.text:00001085                 mov     eax, [ebp+var_4]
.text:00001088
.text:00001088 loc_1088:                               ; CODE XREF: AString::operator=(AString const &)+28j
.text:00001088                 add     esp, 14h
.text:0000108B                 cmp     ebp, esp
.text:0000108D                 call    __RTC_CheckEsp
.text:00001092                 mov     esp, ebp
.text:00001094                 pop     ebp
.text:00001095                 retn    4
.text:00001095 ??4AString@@QAEAAV0@ABV0@@Z endp
.text:00001095
.text:00001095 ; ---------------------------------------------------------------------------
.text:00001098                 align 10h
.text:000010A0
.text:000010A0 ; =============== S U B R O U T I N E =======================================
.text:000010A0
.text:000010A0 ; Attributes: bp-based frame
.text:000010A0
.text:000010A0 ; void __thiscall AString::SetFromWStr_if_Ascii(AString *this, const wchar_t *)
.text:000010A0                 public ?SetFromWStr_if_Ascii@AString@@QAEXPB_W@Z
.text:000010A0 ?SetFromWStr_if_Ascii@AString@@QAEXPB_W@Z proc near
.text:000010A0
.text:000010A0 var_20          = dword ptr -20h
.text:000010A0 var_1C          = dword ptr -1Ch
.text:000010A0 var_18          = dword ptr -18h
.text:000010A0 var_14          = dword ptr -14h
.text:000010A0 var_10          = dword ptr -10h
.text:000010A0 var_C           = dword ptr -0Ch
.text:000010A0 var_8           = dword ptr -8
.text:000010A0 var_4           = dword ptr -4
.text:000010A0 arg_0           = dword ptr  8
.text:000010A0
.text:000010A0                 push    ebp
.text:000010A1                 mov     ebp, esp
.text:000010A3                 sub     esp, 20h
.text:000010A6                 mov     eax, 0CCCCCCCCh
.text:000010AB                 mov     [ebp+var_20], eax
.text:000010AE                 mov     [ebp+var_1C], eax
.text:000010B1                 mov     [ebp+var_18], eax
.text:000010B4                 mov     [ebp+var_14], eax
.text:000010B7                 mov     [ebp+var_10], eax
.text:000010BA                 mov     [ebp+var_C], eax
.text:000010BD                 mov     [ebp+var_8], eax
.text:000010C0                 mov     [ebp+var_4], eax
.text:000010C3                 mov     [ebp+var_4], ecx
.text:000010C6                 mov     [ebp+var_8], 0
.text:000010CD                 jmp     short loc_10D8
.text:000010CF ; ---------------------------------------------------------------------------
.text:000010CF
.text:000010CF loc_10CF:                               ; CODE XREF: AString::SetFromWStr_if_Ascii(wchar_t const *):loc_1101j
.text:000010CF                 mov     eax, [ebp+var_8]
.text:000010D2                 add     eax, 1
.text:000010D5                 mov     [ebp+var_8], eax
.text:000010D8
.text:000010D8 loc_10D8:                               ; CODE XREF: AString::SetFromWStr_if_Ascii(wchar_t const *)+2Dj
.text:000010D8                 mov     ecx, [ebp+var_8]
.text:000010DB                 mov     edx, [ebp+arg_0]
.text:000010DE                 mov     ax, [edx+ecx*2]
.text:000010E2                 mov     word ptr [ebp+var_C], ax
.text:000010E6                 movzx   ecx, word ptr [ebp+var_C]
.text:000010EA                 test    ecx, ecx
.text:000010EC                 jnz     short loc_10F0
.text:000010EE                 jmp     short loc_1103
.text:000010F0 ; ---------------------------------------------------------------------------
.text:000010F0
.text:000010F0 loc_10F0:                               ; CODE XREF: AString::SetFromWStr_if_Ascii(wchar_t const *)+4Cj
.text:000010F0                 movzx   edx, word ptr [ebp+var_C]
.text:000010F4                 cmp     edx, 80h ; 'Ç'
.text:000010FA                 jl      short loc_1101
.text:000010FC                 jmp     loc_1192
.text:00001101 ; ---------------------------------------------------------------------------
.text:00001101
.text:00001101 loc_1101:                               ; CODE XREF: AString::SetFromWStr_if_Ascii(wchar_t const *)+5Aj
.text:00001101                 jmp     short loc_10CF
.text:00001103 ; ---------------------------------------------------------------------------
.text:00001103
.text:00001103 loc_1103:                               ; CODE XREF: AString::SetFromWStr_if_Ascii(wchar_t const *)+4Ej
.text:00001103                 mov     eax, [ebp+var_4]
.text:00001106                 mov     ecx, [ebp+var_8]
.text:00001109                 cmp     ecx, [eax+8]
.text:0000110C                 jbe     short loc_114B
.text:0000110E                 mov     edx, [ebp+var_8]
.text:00001111                 add     edx, 1
.text:00001114                 push    edx             ; unsigned int
.text:00001115                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000111A                 add     esp, 4
.text:0000111D                 mov     [ebp+var_1C], eax
.text:00001120                 mov     eax, [ebp+var_1C]
.text:00001123                 mov     [ebp+var_10], eax
.text:00001126                 mov     ecx, [ebp+var_4]
.text:00001129                 mov     edx, [ecx]
.text:0000112B                 mov     [ebp+var_20], edx
.text:0000112E                 mov     eax, [ebp+var_20]
.text:00001131                 push    eax             ; void *
.text:00001132                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001137                 add     esp, 4
.text:0000113A                 mov     ecx, [ebp+var_4]
.text:0000113D                 mov     edx, [ebp+var_10]
.text:00001140                 mov     [ecx], edx
.text:00001142                 mov     eax, [ebp+var_4]
.text:00001145                 mov     ecx, [ebp+var_8]
.text:00001148                 mov     [eax+8], ecx
.text:0000114B
.text:0000114B loc_114B:                               ; CODE XREF: AString::SetFromWStr_if_Ascii(wchar_t const *)+6Cj
.text:0000114B                 mov     edx, [ebp+var_4]
.text:0000114E                 mov     eax, [ebp+var_8]
.text:00001151                 mov     [edx+4], eax
.text:00001154                 mov     ecx, [ebp+var_4]
.text:00001157                 mov     edx, [ecx]
.text:00001159                 mov     [ebp+var_14], edx
.text:0000115C                 mov     [ebp+var_18], 0
.text:00001163                 jmp     short loc_116E
.text:00001165 ; ---------------------------------------------------------------------------
.text:00001165
.text:00001165 loc_1165:                               ; CODE XREF: AString::SetFromWStr_if_Ascii(wchar_t const *)+E7j
.text:00001165                 mov     eax, [ebp+var_18]
.text:00001168                 add     eax, 1
.text:0000116B                 mov     [ebp+var_18], eax
.text:0000116E
.text:0000116E loc_116E:                               ; CODE XREF: AString::SetFromWStr_if_Ascii(wchar_t const *)+C3j
.text:0000116E                 mov     ecx, [ebp+var_18]
.text:00001171                 cmp     ecx, [ebp+var_8]
.text:00001174                 jnb     short loc_1189
.text:00001176                 mov     edx, [ebp+var_14]
.text:00001179                 add     edx, [ebp+var_18]
.text:0000117C                 mov     eax, [ebp+var_18]
.text:0000117F                 mov     ecx, [ebp+arg_0]
.text:00001182                 mov     al, [ecx+eax*2]
.text:00001185                 mov     [edx], al
.text:00001187                 jmp     short loc_1165
.text:00001189 ; ---------------------------------------------------------------------------
.text:00001189
.text:00001189 loc_1189:                               ; CODE XREF: AString::SetFromWStr_if_Ascii(wchar_t const *)+D4j
.text:00001189                 mov     ecx, [ebp+var_14]
.text:0000118C                 add     ecx, [ebp+var_18]
.text:0000118F                 mov     byte ptr [ecx], 0
.text:00001192
.text:00001192 loc_1192:                               ; CODE XREF: AString::SetFromWStr_if_Ascii(wchar_t const *)+5Cj
.text:00001192                 add     esp, 20h
.text:00001195                 cmp     ebp, esp
.text:00001197                 call    __RTC_CheckEsp
.text:0000119C                 mov     esp, ebp
.text:0000119E                 pop     ebp
.text:0000119F                 retn    4
.text:0000119F ?SetFromWStr_if_Ascii@AString@@QAEXPB_W@Z endp
.text:0000119F
.text:0000119F ; ---------------------------------------------------------------------------
.text:000011A2                 align 10h
.text:000011B0
.text:000011B0 ; =============== S U B R O U T I N E =======================================
.text:000011B0
.text:000011B0 ; Attributes: bp-based frame
.text:000011B0
.text:000011B0 ; void __thiscall AString::Add_Space(AString *__hidden this)
.text:000011B0                 public ?Add_Space@AString@@QAEXXZ
.text:000011B0 ?Add_Space@AString@@QAEXXZ proc near    ; CODE XREF: AString::Add_Space_if_NotEmpty(void)+20p
.text:000011B0
.text:000011B0 var_4           = dword ptr -4
.text:000011B0
.text:000011B0                 push    ebp
.text:000011B1                 mov     ebp, esp
.text:000011B3                 push    ecx
.text:000011B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011BB                 mov     [ebp+var_4], ecx
.text:000011BE                 push    20h ; ' '
.text:000011C0                 mov     ecx, [ebp+var_4]
.text:000011C3                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:000011C8                 add     esp, 4
.text:000011CB                 cmp     ebp, esp
.text:000011CD                 call    __RTC_CheckEsp
.text:000011D2                 mov     esp, ebp
.text:000011D4                 pop     ebp
.text:000011D5                 retn
.text:000011D5 ?Add_Space@AString@@QAEXXZ endp
.text:000011D5
.text:000011D5 ; ---------------------------------------------------------------------------
.text:000011D6                 align 10h
.text:000011E0
.text:000011E0 ; =============== S U B R O U T I N E =======================================
.text:000011E0
.text:000011E0 ; Attributes: bp-based frame
.text:000011E0
.text:000011E0 ; void __thiscall AString::Add_Space_if_NotEmpty(AString *__hidden this)
.text:000011E0                 public ?Add_Space_if_NotEmpty@AString@@QAEXXZ
.text:000011E0 ?Add_Space_if_NotEmpty@AString@@QAEXXZ proc near
.text:000011E0
.text:000011E0 var_4           = dword ptr -4
.text:000011E0
.text:000011E0                 push    ebp
.text:000011E1                 mov     ebp, esp
.text:000011E3                 push    ecx
.text:000011E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011EB                 mov     [ebp+var_4], ecx
.text:000011EE                 mov     ecx, [ebp+var_4] ; this
.text:000011F1                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:000011F6                 movzx   eax, al
.text:000011F9                 test    eax, eax
.text:000011FB                 jnz     short loc_1205
.text:000011FD                 mov     ecx, [ebp+var_4] ; this
.text:00001200                 call    ?Add_Space@AString@@QAEXXZ ; AString::Add_Space(void)
.text:00001205
.text:00001205 loc_1205:                               ; CODE XREF: AString::Add_Space_if_NotEmpty(void)+1Bj
.text:00001205                 add     esp, 4
.text:00001208                 cmp     ebp, esp
.text:0000120A                 call    __RTC_CheckEsp
.text:0000120F                 mov     esp, ebp
.text:00001211                 pop     ebp
.text:00001212                 retn
.text:00001212 ?Add_Space_if_NotEmpty@AString@@QAEXXZ endp
.text:00001212
.text:00001212 ; ---------------------------------------------------------------------------
.text:00001213                 align 10h
.text:00001220
.text:00001220 ; =============== S U B R O U T I N E =======================================
.text:00001220
.text:00001220 ; Attributes: bp-based frame
.text:00001220
.text:00001220 ; void __thiscall AString::Add_LF(AString *__hidden this)
.text:00001220                 public ?Add_LF@AString@@QAEXXZ
.text:00001220 ?Add_LF@AString@@QAEXXZ proc near
.text:00001220
.text:00001220 var_4           = dword ptr -4
.text:00001220
.text:00001220                 push    ebp
.text:00001221                 mov     ebp, esp
.text:00001223                 push    ecx
.text:00001224                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000122B                 mov     [ebp+var_4], ecx
.text:0000122E                 push    0Ah
.text:00001230                 mov     ecx, [ebp+var_4]
.text:00001233                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:00001238                 add     esp, 4
.text:0000123B                 cmp     ebp, esp
.text:0000123D                 call    __RTC_CheckEsp
.text:00001242                 mov     esp, ebp
.text:00001244                 pop     ebp
.text:00001245                 retn
.text:00001245 ?Add_LF@AString@@QAEXXZ endp
.text:00001245
.text:00001245 ; ---------------------------------------------------------------------------
.text:00001246                 align 10h
.text:00001250
.text:00001250 ; =============== S U B R O U T I N E =======================================
.text:00001250
.text:00001250 ; Attributes: bp-based frame
.text:00001250
.text:00001250 ; int __stdcall AString::operator+=(char *)
.text:00001250                 public ??YAString@@QAEAAV0@PBD@Z
.text:00001250 ??YAString@@QAEAAV0@PBD@Z proc near
.text:00001250
.text:00001250 var_8           = dword ptr -8
.text:00001250 var_4           = dword ptr -4
.text:00001250 arg_0           = dword ptr  8
.text:00001250
.text:00001250                 push    ebp
.text:00001251                 mov     ebp, esp
.text:00001253                 sub     esp, 8
.text:00001256                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000125D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001264                 mov     [ebp+var_4], ecx
.text:00001267                 mov     eax, [ebp+arg_0]
.text:0000126A                 push    eax             ; char *
.text:0000126B                 call    ?MyStringLen@@YGIPBD@Z ; MyStringLen(char const *)
.text:00001270                 mov     [ebp+var_8], eax
.text:00001273                 mov     ecx, [ebp+var_8]
.text:00001276                 push    ecx             ; unsigned int
.text:00001277                 mov     ecx, [ebp+var_4] ; this
.text:0000127A                 call    ?Grow@AString@@AAEXI@Z ; AString::Grow(uint)
.text:0000127F                 mov     edx, [ebp+arg_0]
.text:00001282                 push    edx             ; char *
.text:00001283                 mov     eax, [ebp+var_4]
.text:00001286                 mov     ecx, [eax]
.text:00001288                 mov     edx, [ebp+var_4]
.text:0000128B                 add     ecx, [edx+4]
.text:0000128E                 push    ecx             ; char *
.text:0000128F                 call    ?MyStringCopy@@YGXPADPBD@Z ; MyStringCopy(char *,char const *)
.text:00001294                 mov     eax, [ebp+var_4]
.text:00001297                 mov     ecx, [eax+4]
.text:0000129A                 add     ecx, [ebp+var_8]
.text:0000129D                 mov     edx, [ebp+var_4]
.text:000012A0                 mov     [edx+4], ecx
.text:000012A3                 mov     eax, [ebp+var_4]
.text:000012A6                 add     esp, 8
.text:000012A9                 cmp     ebp, esp
.text:000012AB                 call    __RTC_CheckEsp
.text:000012B0                 mov     esp, ebp
.text:000012B2                 pop     ebp
.text:000012B3                 retn    4
.text:000012B3 ??YAString@@QAEAAV0@PBD@Z endp
.text:000012B3
.text:000012B3 ; ---------------------------------------------------------------------------
.text:000012B6                 align 10h
.text:000012C0
.text:000012C0 ; =============== S U B R O U T I N E =======================================
.text:000012C0
.text:000012C0 ; Attributes: bp-based frame
.text:000012C0
.text:000012C0 ; public: class AString & __thiscall AString::operator+=(class AString const &)
.text:000012C0                 public ??YAString@@QAEAAV0@ABV0@@Z
.text:000012C0 ??YAString@@QAEAAV0@ABV0@@Z proc near
.text:000012C0
.text:000012C0 var_4           = dword ptr -4
.text:000012C0 arg_0           = dword ptr  8
.text:000012C0
.text:000012C0                 push    ebp
.text:000012C1                 mov     ebp, esp
.text:000012C3                 push    ecx
.text:000012C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000012CB                 mov     [ebp+var_4], ecx
.text:000012CE                 mov     eax, [ebp+arg_0]
.text:000012D1                 mov     ecx, [eax+4]
.text:000012D4                 push    ecx             ; unsigned int
.text:000012D5                 mov     ecx, [ebp+var_4] ; this
.text:000012D8                 call    ?Grow@AString@@AAEXI@Z ; AString::Grow(uint)
.text:000012DD                 mov     edx, [ebp+arg_0]
.text:000012E0                 mov     eax, [edx]
.text:000012E2                 push    eax             ; char *
.text:000012E3                 mov     ecx, [ebp+var_4]
.text:000012E6                 mov     edx, [ecx]
.text:000012E8                 mov     eax, [ebp+var_4]
.text:000012EB                 add     edx, [eax+4]
.text:000012EE                 push    edx             ; char *
.text:000012EF                 call    ?MyStringCopy@@YGXPADPBD@Z ; MyStringCopy(char *,char const *)
.text:000012F4                 mov     ecx, [ebp+var_4]
.text:000012F7                 mov     edx, [ecx+4]
.text:000012FA                 mov     eax, [ebp+arg_0]
.text:000012FD                 add     edx, [eax+4]
.text:00001300                 mov     ecx, [ebp+var_4]
.text:00001303                 mov     [ecx+4], edx
.text:00001306                 mov     eax, [ebp+var_4]
.text:00001309                 add     esp, 4
.text:0000130C                 cmp     ebp, esp
.text:0000130E                 call    __RTC_CheckEsp
.text:00001313                 mov     esp, ebp
.text:00001315                 pop     ebp
.text:00001316                 retn    4
.text:00001316 ??YAString@@QAEAAV0@ABV0@@Z endp
.text:00001316
.text:00001316 ; ---------------------------------------------------------------------------
.text:00001319                 align 10h
.text:00001320
.text:00001320 ; =============== S U B R O U T I N E =======================================
.text:00001320
.text:00001320 ; Attributes: bp-based frame
.text:00001320
.text:00001320 ; void __thiscall AString::SetFrom(AString *this, const char *Src, unsigned int)
.text:00001320                 public ?SetFrom@AString@@QAEXPBDI@Z
.text:00001320 ?SetFrom@AString@@QAEXPBDI@Z proc near  ; CODE XREF: AString::SetFrom_CalcLen(char const *,uint)+4Dp
.text:00001320
.text:00001320 var_10          = dword ptr -10h
.text:00001320 var_C           = dword ptr -0Ch
.text:00001320 var_8           = dword ptr -8
.text:00001320 var_4           = dword ptr -4
.text:00001320 Src             = dword ptr  8
.text:00001320 Size            = dword ptr  0Ch
.text:00001320
.text:00001320                 push    ebp
.text:00001321                 mov     ebp, esp
.text:00001323                 sub     esp, 10h
.text:00001326                 mov     eax, 0CCCCCCCCh
.text:0000132B                 mov     [ebp+var_10], eax
.text:0000132E                 mov     [ebp+var_C], eax
.text:00001331                 mov     [ebp+var_8], eax
.text:00001334                 mov     [ebp+var_4], eax
.text:00001337                 mov     [ebp+var_4], ecx
.text:0000133A                 mov     eax, [ebp+var_4]
.text:0000133D                 mov     ecx, [ebp+Size]
.text:00001340                 cmp     ecx, [eax+8]
.text:00001343                 jbe     short loc_1382
.text:00001345                 mov     edx, [ebp+Size]
.text:00001348                 add     edx, 1
.text:0000134B                 push    edx             ; unsigned int
.text:0000134C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001351                 add     esp, 4
.text:00001354                 mov     [ebp+var_C], eax
.text:00001357                 mov     eax, [ebp+var_C]
.text:0000135A                 mov     [ebp+var_8], eax
.text:0000135D                 mov     ecx, [ebp+var_4]
.text:00001360                 mov     edx, [ecx]
.text:00001362                 mov     [ebp+var_10], edx
.text:00001365                 mov     eax, [ebp+var_10]
.text:00001368                 push    eax             ; void *
.text:00001369                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000136E                 add     esp, 4
.text:00001371                 mov     ecx, [ebp+var_4]
.text:00001374                 mov     edx, [ebp+var_8]
.text:00001377                 mov     [ecx], edx
.text:00001379                 mov     eax, [ebp+var_4]
.text:0000137C                 mov     ecx, [ebp+Size]
.text:0000137F                 mov     [eax+8], ecx
.text:00001382
.text:00001382 loc_1382:                               ; CODE XREF: AString::SetFrom(char const *,uint)+23j
.text:00001382                 cmp     [ebp+Size], 0
.text:00001386                 jz      short loc_139E
.text:00001388                 mov     edx, [ebp+Size]
.text:0000138B                 push    edx             ; Size
.text:0000138C                 mov     eax, [ebp+Src]
.text:0000138F                 push    eax             ; Src
.text:00001390                 mov     ecx, [ebp+var_4]
.text:00001393                 mov     edx, [ecx]
.text:00001395                 push    edx             ; Dst
.text:00001396                 call    _memcpy
.text:0000139B                 add     esp, 0Ch
.text:0000139E
.text:0000139E loc_139E:                               ; CODE XREF: AString::SetFrom(char const *,uint)+66j
.text:0000139E                 mov     eax, [ebp+var_4]
.text:000013A1                 mov     ecx, [eax]
.text:000013A3                 mov     edx, [ebp+Size]
.text:000013A6                 mov     byte ptr [ecx+edx], 0
.text:000013AA                 mov     eax, [ebp+var_4]
.text:000013AD                 mov     ecx, [ebp+Size]
.text:000013B0                 mov     [eax+4], ecx
.text:000013B3                 add     esp, 10h
.text:000013B6                 cmp     ebp, esp
.text:000013B8                 call    __RTC_CheckEsp
.text:000013BD                 mov     esp, ebp
.text:000013BF                 pop     ebp
.text:000013C0                 retn    8
.text:000013C0 ?SetFrom@AString@@QAEXPBDI@Z endp
.text:000013C0
.text:000013C0 ; ---------------------------------------------------------------------------
.text:000013C3                 align 10h
.text:000013D0
.text:000013D0 ; =============== S U B R O U T I N E =======================================
.text:000013D0
.text:000013D0 ; Attributes: bp-based frame
.text:000013D0
.text:000013D0 ; void __thiscall AString::SetFrom_CalcLen(AString *this, const char *Src, unsigned int)
.text:000013D0                 public ?SetFrom_CalcLen@AString@@QAEXPBDI@Z
.text:000013D0 ?SetFrom_CalcLen@AString@@QAEXPBDI@Z proc near
.text:000013D0
.text:000013D0 var_8           = dword ptr -8
.text:000013D0 var_4           = dword ptr -4
.text:000013D0 Src             = dword ptr  8
.text:000013D0 arg_4           = dword ptr  0Ch
.text:000013D0
.text:000013D0                 push    ebp
.text:000013D1                 mov     ebp, esp
.text:000013D3                 sub     esp, 8
.text:000013D6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000013DD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000013E4                 mov     [ebp+var_4], ecx
.text:000013E7                 mov     [ebp+var_8], 0
.text:000013EE                 jmp     short loc_13F9
.text:000013F0 ; ---------------------------------------------------------------------------
.text:000013F0
.text:000013F0 loc_13F0:                               ; CODE XREF: AString::SetFrom_CalcLen(char const *,uint):loc_1410j
.text:000013F0                 mov     eax, [ebp+var_8]
.text:000013F3                 add     eax, 1
.text:000013F6                 mov     [ebp+var_8], eax
.text:000013F9
.text:000013F9 loc_13F9:                               ; CODE XREF: AString::SetFrom_CalcLen(char const *,uint)+1Ej
.text:000013F9                 mov     ecx, [ebp+var_8]
.text:000013FC                 cmp     ecx, [ebp+arg_4]
.text:000013FF                 jnb     short loc_1412
.text:00001401                 mov     edx, [ebp+Src]
.text:00001404                 add     edx, [ebp+var_8]
.text:00001407                 movsx   eax, byte ptr [edx]
.text:0000140A                 test    eax, eax
.text:0000140C                 jnz     short loc_1410
.text:0000140E                 jmp     short loc_1412
.text:00001410 ; ---------------------------------------------------------------------------
.text:00001410
.text:00001410 loc_1410:                               ; CODE XREF: AString::SetFrom_CalcLen(char const *,uint)+3Cj
.text:00001410                 jmp     short loc_13F0
.text:00001412 ; ---------------------------------------------------------------------------
.text:00001412
.text:00001412 loc_1412:                               ; CODE XREF: AString::SetFrom_CalcLen(char const *,uint)+2Fj
.text:00001412                                         ; AString::SetFrom_CalcLen(char const *,uint)+3Ej
.text:00001412                 mov     ecx, [ebp+var_8]
.text:00001415                 push    ecx             ; unsigned int
.text:00001416                 mov     edx, [ebp+Src]
.text:00001419                 push    edx             ; Src
.text:0000141A                 mov     ecx, [ebp+var_4] ; this
.text:0000141D                 call    ?SetFrom@AString@@QAEXPBDI@Z ; AString::SetFrom(char const *,uint)
.text:00001422                 add     esp, 8
.text:00001425                 cmp     ebp, esp
.text:00001427                 call    __RTC_CheckEsp
.text:0000142C                 mov     esp, ebp
.text:0000142E                 pop     ebp
.text:0000142F                 retn    8
.text:0000142F ?SetFrom_CalcLen@AString@@QAEXPBDI@Z endp
.text:0000142F
.text:0000142F ; ---------------------------------------------------------------------------
.text:00001432                 align 10h
.text:00001440
.text:00001440 ; =============== S U B R O U T I N E =======================================
.text:00001440
.text:00001440 ; Attributes: bp-based frame
.text:00001440
.text:00001440 ; int __thiscall AString::Find(AString *this, const char *SubStr, unsigned int)
.text:00001440                 public ?Find@AString@@QBEHPBDI@Z
.text:00001440 ?Find@AString@@QBEHPBDI@Z proc near     ; CODE XREF: AString::Replace(AString const &,AString const &)+7Cp
.text:00001440
.text:00001440 var_8           = dword ptr -8
.text:00001440 var_4           = dword ptr -4
.text:00001440 SubStr          = dword ptr  8
.text:00001440 arg_4           = dword ptr  0Ch
.text:00001440
.text:00001440                 push    ebp
.text:00001441                 mov     ebp, esp
.text:00001443                 sub     esp, 8
.text:00001446                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000144D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001454                 mov     [ebp+var_4], ecx
.text:00001457                 mov     eax, [ebp+SubStr]
.text:0000145A                 push    eax             ; SubStr
.text:0000145B                 mov     ecx, [ebp+var_4]
.text:0000145E                 mov     edx, [ecx]
.text:00001460                 add     edx, [ebp+arg_4]
.text:00001463                 push    edx             ; Str
.text:00001464                 call    ?strstr@@YAPADPADPBD@Z ; strstr(char *,char const *)
.text:00001469                 add     esp, 8
.text:0000146C                 mov     [ebp+var_8], eax
.text:0000146F                 cmp     [ebp+var_8], 0
.text:00001473                 jnz     short loc_147A
.text:00001475                 or      eax, 0FFFFFFFFh
.text:00001478                 jmp     short loc_1484
.text:0000147A ; ---------------------------------------------------------------------------
.text:0000147A
.text:0000147A loc_147A:                               ; CODE XREF: AString::Find(char const *,uint)+33j
.text:0000147A                 mov     eax, [ebp+var_4]
.text:0000147D                 mov     ecx, [ebp+var_8]
.text:00001480                 sub     ecx, [eax]
.text:00001482                 mov     eax, ecx
.text:00001484
.text:00001484 loc_1484:                               ; CODE XREF: AString::Find(char const *,uint)+38j
.text:00001484                 add     esp, 8
.text:00001487                 cmp     ebp, esp
.text:00001489                 call    __RTC_CheckEsp
.text:0000148E                 mov     esp, ebp
.text:00001490                 pop     ebp
.text:00001491                 retn    8
.text:00001491 ?Find@AString@@QBEHPBDI@Z endp
.text:00001491
.text:00001491 ; ---------------------------------------------------------------------------
.text:00001494                 align 10h
.text:000014A0
.text:000014A0 ; =============== S U B R O U T I N E =======================================
.text:000014A0
.text:000014A0 ; Attributes: bp-based frame
.text:000014A0
.text:000014A0 ; int __thiscall AString::ReverseFind(AString *this, char)
.text:000014A0                 public ?ReverseFind@AString@@QBEHD@Z
.text:000014A0 ?ReverseFind@AString@@QBEHD@Z proc near
.text:000014A0
.text:000014A0 var_8           = dword ptr -8
.text:000014A0 var_4           = dword ptr -4
.text:000014A0 arg_0           = byte ptr  8
.text:000014A0
.text:000014A0                 push    ebp
.text:000014A1                 mov     ebp, esp
.text:000014A3                 sub     esp, 8
.text:000014A6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000014AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014B4                 mov     [ebp+var_4], ecx
.text:000014B7                 mov     eax, [ebp+var_4]
.text:000014BA                 cmp     dword ptr [eax+4], 0
.text:000014BE                 jnz     short loc_14C5
.text:000014C0                 or      eax, 0FFFFFFFFh
.text:000014C3                 jmp     short loc_150B
.text:000014C5 ; ---------------------------------------------------------------------------
.text:000014C5
.text:000014C5 loc_14C5:                               ; CODE XREF: AString::ReverseFind(char)+1Ej
.text:000014C5                 mov     ecx, [ebp+var_4]
.text:000014C8                 mov     edx, [ecx]
.text:000014CA                 mov     eax, [ebp+var_4]
.text:000014CD                 mov     ecx, [eax+4]
.text:000014D0                 lea     edx, [edx+ecx-1]
.text:000014D4                 mov     [ebp+var_8], edx
.text:000014D7
.text:000014D7 loc_14D7:                               ; CODE XREF: AString::ReverseFind(char)+69j
.text:000014D7                 mov     eax, [ebp+var_8]
.text:000014DA                 movsx   ecx, byte ptr [eax]
.text:000014DD                 movsx   edx, [ebp+arg_0]
.text:000014E1                 cmp     ecx, edx
.text:000014E3                 jnz     short loc_14F1
.text:000014E5                 mov     eax, [ebp+var_4]
.text:000014E8                 mov     ecx, [ebp+var_8]
.text:000014EB                 sub     ecx, [eax]
.text:000014ED                 mov     eax, ecx
.text:000014EF                 jmp     short loc_150B
.text:000014F1 ; ---------------------------------------------------------------------------
.text:000014F1
.text:000014F1 loc_14F1:                               ; CODE XREF: AString::ReverseFind(char)+43j
.text:000014F1                 mov     edx, [ebp+var_4]
.text:000014F4                 mov     eax, [ebp+var_8]
.text:000014F7                 cmp     eax, [edx]
.text:000014F9                 jnz     short loc_1500
.text:000014FB                 or      eax, 0FFFFFFFFh
.text:000014FE                 jmp     short loc_150B
.text:00001500 ; ---------------------------------------------------------------------------
.text:00001500
.text:00001500 loc_1500:                               ; CODE XREF: AString::ReverseFind(char)+59j
.text:00001500                 mov     ecx, [ebp+var_8]
.text:00001503                 sub     ecx, 1
.text:00001506                 mov     [ebp+var_8], ecx
.text:00001509                 jmp     short loc_14D7
.text:0000150B ; ---------------------------------------------------------------------------
.text:0000150B
.text:0000150B loc_150B:                               ; CODE XREF: AString::ReverseFind(char)+23j
.text:0000150B                                         ; AString::ReverseFind(char)+4Fj ...
.text:0000150B                 mov     esp, ebp
.text:0000150D                 pop     ebp
.text:0000150E                 retn    4
.text:0000150E ?ReverseFind@AString@@QBEHD@Z endp
.text:0000150E
.text:0000150E ; ---------------------------------------------------------------------------
.text:00001511                 align 10h
.text:00001520
.text:00001520 ; =============== S U B R O U T I N E =======================================
.text:00001520
.text:00001520 ; Attributes: bp-based frame
.text:00001520
.text:00001520 ; int __thiscall AString::ReverseFind_PathSepar(AString *__hidden this)
.text:00001520                 public ?ReverseFind_PathSepar@AString@@QBEHXZ
.text:00001520 ?ReverseFind_PathSepar@AString@@QBEHXZ proc near
.text:00001520
.text:00001520 var_C           = dword ptr -0Ch
.text:00001520 var_8           = dword ptr -8
.text:00001520 var_4           = dword ptr -4
.text:00001520
.text:00001520                 push    ebp
.text:00001521                 mov     ebp, esp
.text:00001523                 sub     esp, 0Ch
.text:00001526                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000152D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001534                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000153B                 mov     [ebp+var_4], ecx
.text:0000153E                 mov     eax, [ebp+var_4]
.text:00001541                 cmp     dword ptr [eax+4], 0
.text:00001545                 jnz     short loc_154C
.text:00001547                 or      eax, 0FFFFFFFFh
.text:0000154A                 jmp     short loc_159C
.text:0000154C ; ---------------------------------------------------------------------------
.text:0000154C
.text:0000154C loc_154C:                               ; CODE XREF: AString::ReverseFind_PathSepar(void)+25j
.text:0000154C                 mov     ecx, [ebp+var_4]
.text:0000154F                 mov     edx, [ecx]
.text:00001551                 mov     eax, [ebp+var_4]
.text:00001554                 mov     ecx, [eax+4]
.text:00001557                 lea     edx, [edx+ecx-1]
.text:0000155B                 mov     [ebp+var_8], edx
.text:0000155E
.text:0000155E loc_155E:                               ; CODE XREF: AString::ReverseFind_PathSepar(void)+7Aj
.text:0000155E                 mov     eax, [ebp+var_8]
.text:00001561                 mov     cl, [eax]
.text:00001563                 mov     byte ptr [ebp+var_C+3], cl
.text:00001566                 movsx   edx, byte ptr [ebp+var_C+3]
.text:0000156A                 cmp     edx, 5Ch ; '\'
.text:0000156D                 jz      short loc_1578
.text:0000156F                 movsx   eax, byte ptr [ebp+var_C+3]
.text:00001573                 cmp     eax, 2Fh ; '/'
.text:00001576                 jnz     short loc_1582
.text:00001578
.text:00001578 loc_1578:                               ; CODE XREF: AString::ReverseFind_PathSepar(void)+4Dj
.text:00001578                 mov     ecx, [ebp+var_4]
.text:0000157B                 mov     eax, [ebp+var_8]
.text:0000157E                 sub     eax, [ecx]
.text:00001580                 jmp     short loc_159C
.text:00001582 ; ---------------------------------------------------------------------------
.text:00001582
.text:00001582 loc_1582:                               ; CODE XREF: AString::ReverseFind_PathSepar(void)+56j
.text:00001582                 mov     edx, [ebp+var_4]
.text:00001585                 mov     eax, [ebp+var_8]
.text:00001588                 cmp     eax, [edx]
.text:0000158A                 jnz     short loc_1591
.text:0000158C                 or      eax, 0FFFFFFFFh
.text:0000158F                 jmp     short loc_159C
.text:00001591 ; ---------------------------------------------------------------------------
.text:00001591
.text:00001591 loc_1591:                               ; CODE XREF: AString::ReverseFind_PathSepar(void)+6Aj
.text:00001591                 mov     ecx, [ebp+var_8]
.text:00001594                 sub     ecx, 1
.text:00001597                 mov     [ebp+var_8], ecx
.text:0000159A                 jmp     short loc_155E
.text:0000159C ; ---------------------------------------------------------------------------
.text:0000159C
.text:0000159C loc_159C:                               ; CODE XREF: AString::ReverseFind_PathSepar(void)+2Aj
.text:0000159C                                         ; AString::ReverseFind_PathSepar(void)+60j ...
.text:0000159C                 mov     esp, ebp
.text:0000159E                 pop     ebp
.text:0000159F                 retn
.text:0000159F ?ReverseFind_PathSepar@AString@@QBEHXZ endp
.text:0000159F
.text:000015A0
.text:000015A0 ; =============== S U B R O U T I N E =======================================
.text:000015A0
.text:000015A0 ; Attributes: bp-based frame
.text:000015A0
.text:000015A0 ; void __thiscall AString::TrimLeft(AString *__hidden this)
.text:000015A0                 public ?TrimLeft@AString@@QAEXXZ
.text:000015A0 ?TrimLeft@AString@@QAEXXZ proc near
.text:000015A0
.text:000015A0 var_10          = dword ptr -10h
.text:000015A0 var_C           = dword ptr -0Ch
.text:000015A0 var_8           = dword ptr -8
.text:000015A0 var_4           = dword ptr -4
.text:000015A0
.text:000015A0                 push    ebp
.text:000015A1                 mov     ebp, esp
.text:000015A3                 sub     esp, 10h
.text:000015A6                 mov     eax, 0CCCCCCCCh
.text:000015AB                 mov     [ebp+var_10], eax
.text:000015AE                 mov     [ebp+var_C], eax
.text:000015B1                 mov     [ebp+var_8], eax
.text:000015B4                 mov     [ebp+var_4], eax
.text:000015B7                 mov     [ebp+var_4], ecx
.text:000015BA                 mov     eax, [ebp+var_4]
.text:000015BD                 mov     ecx, [eax]
.text:000015BF                 mov     [ebp+var_8], ecx
.text:000015C2                 jmp     short loc_15CD
.text:000015C4 ; ---------------------------------------------------------------------------
.text:000015C4
.text:000015C4 loc_15C4:                               ; CODE XREF: AString::TrimLeft(void):loc_15F2j
.text:000015C4                 mov     edx, [ebp+var_8]
.text:000015C7                 add     edx, 1
.text:000015CA                 mov     [ebp+var_8], edx
.text:000015CD
.text:000015CD loc_15CD:                               ; CODE XREF: AString::TrimLeft(void)+22j
.text:000015CD                 mov     eax, [ebp+var_8]
.text:000015D0                 mov     cl, [eax]
.text:000015D2                 mov     byte ptr [ebp+var_C+3], cl
.text:000015D5                 movsx   edx, byte ptr [ebp+var_C+3]
.text:000015D9                 cmp     edx, 20h ; ' '
.text:000015DC                 jz      short loc_15F2
.text:000015DE                 movsx   eax, byte ptr [ebp+var_C+3]
.text:000015E2                 cmp     eax, 0Ah
.text:000015E5                 jz      short loc_15F2
.text:000015E7                 movsx   ecx, byte ptr [ebp+var_C+3]
.text:000015EB                 cmp     ecx, 9
.text:000015EE                 jz      short loc_15F2
.text:000015F0                 jmp     short loc_15F4
.text:000015F2 ; ---------------------------------------------------------------------------
.text:000015F2
.text:000015F2 loc_15F2:                               ; CODE XREF: AString::TrimLeft(void)+3Cj
.text:000015F2                                         ; AString::TrimLeft(void)+45j ...
.text:000015F2                 jmp     short loc_15C4
.text:000015F4 ; ---------------------------------------------------------------------------
.text:000015F4
.text:000015F4 loc_15F4:                               ; CODE XREF: AString::TrimLeft(void)+50j
.text:000015F4                 mov     edx, [ebp+var_4]
.text:000015F7                 mov     eax, [ebp+var_8]
.text:000015FA                 sub     eax, [edx]
.text:000015FC                 mov     [ebp+var_10], eax
.text:000015FF                 jz      short loc_161E
.text:00001601                 mov     ecx, [ebp+var_10]
.text:00001604                 push    ecx             ; unsigned int
.text:00001605                 push    0               ; unsigned int
.text:00001607                 mov     ecx, [ebp+var_4] ; this
.text:0000160A                 call    ?MoveItems@AString@@AAEXII@Z ; AString::MoveItems(uint,uint)
.text:0000160F                 mov     edx, [ebp+var_4]
.text:00001612                 mov     eax, [edx+4]
.text:00001615                 sub     eax, [ebp+var_10]
.text:00001618                 mov     ecx, [ebp+var_4]
.text:0000161B                 mov     [ecx+4], eax
.text:0000161E
.text:0000161E loc_161E:                               ; CODE XREF: AString::TrimLeft(void)+5Fj
.text:0000161E                 add     esp, 10h
.text:00001621                 cmp     ebp, esp
.text:00001623                 call    __RTC_CheckEsp
.text:00001628                 mov     esp, ebp
.text:0000162A                 pop     ebp
.text:0000162B                 retn
.text:0000162B ?TrimLeft@AString@@QAEXXZ endp
.text:0000162B
.text:0000162B ; ---------------------------------------------------------------------------
.text:0000162C                 align 10h
.text:00001630
.text:00001630 ; =============== S U B R O U T I N E =======================================
.text:00001630
.text:00001630 ; Attributes: bp-based frame
.text:00001630
.text:00001630 ; void __thiscall AString::TrimRight(AString *__hidden this)
.text:00001630                 public ?TrimRight@AString@@QAEXXZ
.text:00001630 ?TrimRight@AString@@QAEXXZ proc near
.text:00001630
.text:00001630 var_10          = dword ptr -10h
.text:00001630 var_C           = dword ptr -0Ch
.text:00001630 var_8           = dword ptr -8
.text:00001630 var_4           = dword ptr -4
.text:00001630
.text:00001630                 push    ebp
.text:00001631                 mov     ebp, esp
.text:00001633                 sub     esp, 10h
.text:00001636                 mov     eax, 0CCCCCCCCh
.text:0000163B                 mov     [ebp+var_10], eax
.text:0000163E                 mov     [ebp+var_C], eax
.text:00001641                 mov     [ebp+var_8], eax
.text:00001644                 mov     [ebp+var_4], eax
.text:00001647                 mov     [ebp+var_4], ecx
.text:0000164A                 mov     eax, [ebp+var_4]
.text:0000164D                 mov     ecx, [eax]
.text:0000164F                 mov     [ebp+var_8], ecx
.text:00001652                 mov     edx, [ebp+var_4]
.text:00001655                 mov     eax, [edx+4]
.text:00001658                 mov     [ebp+var_C], eax
.text:0000165B                 jmp     short loc_1666
.text:0000165D ; ---------------------------------------------------------------------------
.text:0000165D
.text:0000165D loc_165D:                               ; CODE XREF: AString::TrimRight(void):loc_1695j
.text:0000165D                 mov     ecx, [ebp+var_C]
.text:00001660                 sub     ecx, 1
.text:00001663                 mov     [ebp+var_C], ecx
.text:00001666
.text:00001666 loc_1666:                               ; CODE XREF: AString::TrimRight(void)+2Bj
.text:00001666                 cmp     [ebp+var_C], 0
.text:0000166A                 jz      short loc_1697
.text:0000166C                 mov     edx, [ebp+var_8]
.text:0000166F                 add     edx, [ebp+var_C]
.text:00001672                 mov     al, [edx-1]
.text:00001675                 mov     byte ptr [ebp+var_10+3], al
.text:00001678                 movsx   ecx, byte ptr [ebp+var_10+3]
.text:0000167C                 cmp     ecx, 20h ; ' '
.text:0000167F                 jz      short loc_1695
.text:00001681                 movsx   edx, byte ptr [ebp+var_10+3]
.text:00001685                 cmp     edx, 0Ah
.text:00001688                 jz      short loc_1695
.text:0000168A                 movsx   eax, byte ptr [ebp+var_10+3]
.text:0000168E                 cmp     eax, 9
.text:00001691                 jz      short loc_1695
.text:00001693                 jmp     short loc_1697
.text:00001695 ; ---------------------------------------------------------------------------
.text:00001695
.text:00001695 loc_1695:                               ; CODE XREF: AString::TrimRight(void)+4Fj
.text:00001695                                         ; AString::TrimRight(void)+58j ...
.text:00001695                 jmp     short loc_165D
.text:00001697 ; ---------------------------------------------------------------------------
.text:00001697
.text:00001697 loc_1697:                               ; CODE XREF: AString::TrimRight(void)+3Aj
.text:00001697                                         ; AString::TrimRight(void)+63j
.text:00001697                 mov     ecx, [ebp+var_4]
.text:0000169A                 mov     edx, [ebp+var_C]
.text:0000169D                 cmp     edx, [ecx+4]
.text:000016A0                 jz      short loc_16B7
.text:000016A2                 mov     eax, [ebp+var_4]
.text:000016A5                 mov     ecx, [eax]
.text:000016A7                 mov     edx, [ebp+var_C]
.text:000016AA                 mov     byte ptr [ecx+edx], 0
.text:000016AE                 mov     eax, [ebp+var_4]
.text:000016B1                 mov     ecx, [ebp+var_C]
.text:000016B4                 mov     [eax+4], ecx
.text:000016B7
.text:000016B7 loc_16B7:                               ; CODE XREF: AString::TrimRight(void)+70j
.text:000016B7                 mov     esp, ebp
.text:000016B9                 pop     ebp
.text:000016BA                 retn
.text:000016BA ?TrimRight@AString@@QAEXXZ endp
.text:000016BA
.text:000016BA ; ---------------------------------------------------------------------------
.text:000016BB                 align 10h
.text:000016C0
.text:000016C0 ; =============== S U B R O U T I N E =======================================
.text:000016C0
.text:000016C0 ; Attributes: bp-based frame
.text:000016C0
.text:000016C0 ; void __thiscall AString::InsertAtFront(AString *this, char)
.text:000016C0                 public ?InsertAtFront@AString@@QAEXD@Z
.text:000016C0 ?InsertAtFront@AString@@QAEXD@Z proc near
.text:000016C0
.text:000016C0 var_4           = dword ptr -4
.text:000016C0 arg_0           = byte ptr  8
.text:000016C0
.text:000016C0                 push    ebp
.text:000016C1                 mov     ebp, esp
.text:000016C3                 push    ecx
.text:000016C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000016CB                 mov     [ebp+var_4], ecx
.text:000016CE                 mov     eax, [ebp+var_4]
.text:000016D1                 mov     ecx, [ebp+var_4]
.text:000016D4                 mov     edx, [eax+8]
.text:000016D7                 cmp     edx, [ecx+4]
.text:000016DA                 jnz     short loc_16E4
.text:000016DC                 mov     ecx, [ebp+var_4] ; this
.text:000016DF                 call    ?Grow_1@AString@@AAEXXZ ; AString::Grow_1(void)
.text:000016E4
.text:000016E4 loc_16E4:                               ; CODE XREF: AString::InsertAtFront(char)+1Aj
.text:000016E4                 push    0               ; unsigned int
.text:000016E6                 push    1               ; unsigned int
.text:000016E8                 mov     ecx, [ebp+var_4] ; this
.text:000016EB                 call    ?MoveItems@AString@@AAEXII@Z ; AString::MoveItems(uint,uint)
.text:000016F0                 mov     eax, [ebp+var_4]
.text:000016F3                 mov     ecx, [eax]
.text:000016F5                 mov     dl, [ebp+arg_0]
.text:000016F8                 mov     [ecx], dl
.text:000016FA                 mov     eax, [ebp+var_4]
.text:000016FD                 mov     ecx, [eax+4]
.text:00001700                 add     ecx, 1
.text:00001703                 mov     edx, [ebp+var_4]
.text:00001706                 mov     [edx+4], ecx
.text:00001709                 add     esp, 4
.text:0000170C                 cmp     ebp, esp
.text:0000170E                 call    __RTC_CheckEsp
.text:00001713                 mov     esp, ebp
.text:00001715                 pop     ebp
.text:00001716                 retn    4
.text:00001716 ?InsertAtFront@AString@@QAEXD@Z endp
.text:00001716
.text:00001716 ; ---------------------------------------------------------------------------
.text:00001719                 align 10h
.text:00001720
.text:00001720 ; =============== S U B R O U T I N E =======================================
.text:00001720
.text:00001720 ; Attributes: bp-based frame
.text:00001720
.text:00001720 ; void __thiscall AString::Insert(AString *this, unsigned int, const char *)
.text:00001720                 public ?Insert@AString@@QAEXIPBD@Z
.text:00001720 ?Insert@AString@@QAEXIPBD@Z proc near
.text:00001720
.text:00001720 Size            = dword ptr -8
.text:00001720 var_4           = dword ptr -4
.text:00001720 arg_0           = dword ptr  8
.text:00001720 Src             = dword ptr  0Ch
.text:00001720
.text:00001720                 push    ebp
.text:00001721                 mov     ebp, esp
.text:00001723                 sub     esp, 8
.text:00001726                 mov     [ebp+Size], 0CCCCCCCCh
.text:0000172D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001734                 mov     [ebp+var_4], ecx
.text:00001737                 mov     eax, [ebp+Src]
.text:0000173A                 push    eax             ; char *
.text:0000173B                 call    ?MyStringLen@@YGIPBD@Z ; MyStringLen(char const *)
.text:00001740                 mov     [ebp+Size], eax
.text:00001743                 cmp     [ebp+Size], 0
.text:00001747                 jz      short loc_1781
.text:00001749                 mov     ecx, [ebp+Size]
.text:0000174C                 push    ecx             ; unsigned int
.text:0000174D                 lea     edx, [ebp+arg_0]
.text:00001750                 push    edx             ; unsigned int *
.text:00001751                 mov     ecx, [ebp+var_4] ; this
.text:00001754                 call    ?InsertSpace@AString@@AAEXAAII@Z ; AString::InsertSpace(uint &,uint)
.text:00001759                 mov     eax, [ebp+Size]
.text:0000175C                 push    eax             ; Size
.text:0000175D                 mov     ecx, [ebp+Src]
.text:00001760                 push    ecx             ; Src
.text:00001761                 mov     edx, [ebp+var_4]
.text:00001764                 mov     eax, [edx]
.text:00001766                 add     eax, [ebp+arg_0]
.text:00001769                 push    eax             ; Dst
.text:0000176A                 call    _memcpy
.text:0000176F                 add     esp, 0Ch
.text:00001772                 mov     ecx, [ebp+var_4]
.text:00001775                 mov     edx, [ecx+4]
.text:00001778                 add     edx, [ebp+Size]
.text:0000177B                 mov     eax, [ebp+var_4]
.text:0000177E                 mov     [eax+4], edx
.text:00001781
.text:00001781 loc_1781:                               ; CODE XREF: AString::Insert(uint,char const *)+27j
.text:00001781                 add     esp, 8
.text:00001784                 cmp     ebp, esp
.text:00001786                 call    __RTC_CheckEsp
.text:0000178B                 mov     esp, ebp
.text:0000178D                 pop     ebp
.text:0000178E                 retn    8
.text:0000178E ?Insert@AString@@QAEXIPBD@Z endp
.text:0000178E
.text:0000178E ; ---------------------------------------------------------------------------
.text:00001791                 align 10h
.text:000017A0
.text:000017A0 ; =============== S U B R O U T I N E =======================================
.text:000017A0
.text:000017A0 ; Attributes: bp-based frame
.text:000017A0
.text:000017A0 ; void __thiscall AString::Insert(AString *this, unsigned int, const struct AString *)
.text:000017A0                 public ?Insert@AString@@QAEXIABV1@@Z
.text:000017A0 ?Insert@AString@@QAEXIABV1@@Z proc near ; CODE XREF: AString::Replace(AString const &,AString const &)+A7p
.text:000017A0
.text:000017A0 Size            = dword ptr -8
.text:000017A0 var_4           = dword ptr -4
.text:000017A0 arg_0           = dword ptr  8
.text:000017A0 arg_4           = dword ptr  0Ch
.text:000017A0
.text:000017A0                 push    ebp
.text:000017A1                 mov     ebp, esp
.text:000017A3                 sub     esp, 8
.text:000017A6                 mov     [ebp+Size], 0CCCCCCCCh
.text:000017AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000017B4                 mov     [ebp+var_4], ecx
.text:000017B7                 mov     ecx, [ebp+arg_4] ; this
.text:000017BA                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:000017BF                 mov     [ebp+Size], eax
.text:000017C2                 cmp     [ebp+Size], 0
.text:000017C6                 jz      short loc_1805
.text:000017C8                 mov     eax, [ebp+Size]
.text:000017CB                 push    eax             ; unsigned int
.text:000017CC                 lea     ecx, [ebp+arg_0]
.text:000017CF                 push    ecx             ; unsigned int *
.text:000017D0                 mov     ecx, [ebp+var_4] ; this
.text:000017D3                 call    ?InsertSpace@AString@@AAEXAAII@Z ; AString::InsertSpace(uint &,uint)
.text:000017D8                 mov     edx, [ebp+Size]
.text:000017DB                 push    edx             ; Size
.text:000017DC                 mov     ecx, [ebp+arg_4]
.text:000017DF                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000017E4                 push    eax             ; Src
.text:000017E5                 mov     eax, [ebp+var_4]
.text:000017E8                 mov     ecx, [eax]
.text:000017EA                 add     ecx, [ebp+arg_0]
.text:000017ED                 push    ecx             ; Dst
.text:000017EE                 call    _memcpy
.text:000017F3                 add     esp, 0Ch
.text:000017F6                 mov     edx, [ebp+var_4]
.text:000017F9                 mov     eax, [edx+4]
.text:000017FC                 add     eax, [ebp+Size]
.text:000017FF                 mov     ecx, [ebp+var_4]
.text:00001802                 mov     [ecx+4], eax
.text:00001805
.text:00001805 loc_1805:                               ; CODE XREF: AString::Insert(uint,AString const &)+26j
.text:00001805                 add     esp, 8
.text:00001808                 cmp     ebp, esp
.text:0000180A                 call    __RTC_CheckEsp
.text:0000180F                 mov     esp, ebp
.text:00001811                 pop     ebp
.text:00001812                 retn    8
.text:00001812 ?Insert@AString@@QAEXIABV1@@Z endp
.text:00001812
.text:00001812 ; ---------------------------------------------------------------------------
.text:00001815                 align 10h
.text:00001820
.text:00001820 ; =============== S U B R O U T I N E =======================================
.text:00001820
.text:00001820 ; Attributes: bp-based frame
.text:00001820
.text:00001820 ; void __thiscall AString::RemoveChar(AString *this, char)
.text:00001820                 public ?RemoveChar@AString@@QAEXD@Z
.text:00001820 ?RemoveChar@AString@@QAEXD@Z proc near
.text:00001820
.text:00001820 var_14          = dword ptr -14h
.text:00001820 var_10          = dword ptr -10h
.text:00001820 var_C           = dword ptr -0Ch
.text:00001820 var_8           = dword ptr -8
.text:00001820 var_4           = dword ptr -4
.text:00001820 arg_0           = byte ptr  8
.text:00001820
.text:00001820                 push    ebp
.text:00001821                 mov     ebp, esp
.text:00001823                 sub     esp, 14h
.text:00001826                 mov     eax, 0CCCCCCCCh
.text:0000182B                 mov     [ebp+var_14], eax
.text:0000182E                 mov     [ebp+var_10], eax
.text:00001831                 mov     [ebp+var_C], eax
.text:00001834                 mov     [ebp+var_8], eax
.text:00001837                 mov     [ebp+var_4], eax
.text:0000183A                 mov     [ebp+var_4], ecx
.text:0000183D                 mov     eax, [ebp+var_4]
.text:00001840                 mov     ecx, [eax]
.text:00001842                 mov     [ebp+var_8], ecx
.text:00001845
.text:00001845 loc_1845:                               ; CODE XREF: AString::RemoveChar(char):loc_186Ej
.text:00001845                 mov     edx, [ebp+var_8]
.text:00001848                 mov     al, [edx]
.text:0000184A                 mov     byte ptr [ebp+var_C+3], al
.text:0000184D                 mov     ecx, [ebp+var_8]
.text:00001850                 add     ecx, 1
.text:00001853                 mov     [ebp+var_8], ecx
.text:00001856                 movsx   edx, byte ptr [ebp+var_C+3]
.text:0000185A                 test    edx, edx
.text:0000185C                 jnz     short loc_1860
.text:0000185E                 jmp     short loc_18C7
.text:00001860 ; ---------------------------------------------------------------------------
.text:00001860
.text:00001860 loc_1860:                               ; CODE XREF: AString::RemoveChar(char)+3Cj
.text:00001860                 movsx   eax, byte ptr [ebp+var_C+3]
.text:00001864                 movsx   ecx, [ebp+arg_0]
.text:00001868                 cmp     eax, ecx
.text:0000186A                 jnz     short loc_186E
.text:0000186C                 jmp     short loc_1870
.text:0000186E ; ---------------------------------------------------------------------------
.text:0000186E
.text:0000186E loc_186E:                               ; CODE XREF: AString::RemoveChar(char)+4Aj
.text:0000186E                 jmp     short loc_1845
.text:00001870 ; ---------------------------------------------------------------------------
.text:00001870
.text:00001870 loc_1870:                               ; CODE XREF: AString::RemoveChar(char)+4Cj
.text:00001870                 mov     edx, [ebp+var_8]
.text:00001873                 sub     edx, 1
.text:00001876                 mov     [ebp+var_10], edx
.text:00001879
.text:00001879 loc_1879:                               ; CODE XREF: AString::RemoveChar(char):loc_18B1j
.text:00001879                 mov     eax, [ebp+var_8]
.text:0000187C                 mov     cl, [eax]
.text:0000187E                 mov     byte ptr [ebp+var_14+3], cl
.text:00001881                 mov     edx, [ebp+var_8]
.text:00001884                 add     edx, 1
.text:00001887                 mov     [ebp+var_8], edx
.text:0000188A                 movsx   eax, byte ptr [ebp+var_14+3]
.text:0000188E                 test    eax, eax
.text:00001890                 jnz     short loc_1894
.text:00001892                 jmp     short loc_18B3
.text:00001894 ; ---------------------------------------------------------------------------
.text:00001894
.text:00001894 loc_1894:                               ; CODE XREF: AString::RemoveChar(char)+70j
.text:00001894                 movsx   ecx, byte ptr [ebp+var_14+3]
.text:00001898                 movsx   edx, [ebp+arg_0]
.text:0000189C                 cmp     ecx, edx
.text:0000189E                 jz      short loc_18B1
.text:000018A0                 mov     eax, [ebp+var_10]
.text:000018A3                 mov     cl, byte ptr [ebp+var_14+3]
.text:000018A6                 mov     [eax], cl
.text:000018A8                 mov     edx, [ebp+var_10]
.text:000018AB                 add     edx, 1
.text:000018AE                 mov     [ebp+var_10], edx
.text:000018B1
.text:000018B1 loc_18B1:                               ; CODE XREF: AString::RemoveChar(char)+7Ej
.text:000018B1                 jmp     short loc_1879
.text:000018B3 ; ---------------------------------------------------------------------------
.text:000018B3
.text:000018B3 loc_18B3:                               ; CODE XREF: AString::RemoveChar(char)+72j
.text:000018B3                 mov     eax, [ebp+var_10]
.text:000018B6                 mov     byte ptr [eax], 0
.text:000018B9                 mov     ecx, [ebp+var_4]
.text:000018BC                 mov     edx, [ebp+var_10]
.text:000018BF                 sub     edx, [ecx]
.text:000018C1                 mov     eax, [ebp+var_4]
.text:000018C4                 mov     [eax+4], edx
.text:000018C7
.text:000018C7 loc_18C7:                               ; CODE XREF: AString::RemoveChar(char)+3Ej
.text:000018C7                 mov     esp, ebp
.text:000018C9                 pop     ebp
.text:000018CA                 retn    4
.text:000018CA ?RemoveChar@AString@@QAEXD@Z endp
.text:000018CA
.text:000018CA ; ---------------------------------------------------------------------------
.text:000018CD                 align 10h
.text:000018D0
.text:000018D0 ; =============== S U B R O U T I N E =======================================
.text:000018D0
.text:000018D0 ; Attributes: bp-based frame
.text:000018D0
.text:000018D0 ; void __thiscall AString::Replace(AString *this, char, char)
.text:000018D0                 public ?Replace@AString@@QAEXDD@Z
.text:000018D0 ?Replace@AString@@QAEXDD@Z proc near
.text:000018D0
.text:000018D0 var_8           = dword ptr -8
.text:000018D0 var_4           = dword ptr -4
.text:000018D0 arg_0           = byte ptr  8
.text:000018D0 arg_4           = byte ptr  0Ch
.text:000018D0
.text:000018D0                 push    ebp
.text:000018D1                 mov     ebp, esp
.text:000018D3                 sub     esp, 8
.text:000018D6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000018DD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000018E4                 mov     [ebp+var_4], ecx
.text:000018E7                 movsx   eax, [ebp+arg_0]
.text:000018EB                 movsx   ecx, [ebp+arg_4]
.text:000018EF                 cmp     eax, ecx
.text:000018F1                 jnz     short loc_18F5
.text:000018F3                 jmp     short loc_193C
.text:000018F5 ; ---------------------------------------------------------------------------
.text:000018F5
.text:000018F5 loc_18F5:                               ; CODE XREF: AString::Replace(char,char)+21j
.text:000018F5                 mov     [ebp+var_8], 0
.text:000018FC
.text:000018FC loc_18FC:                               ; CODE XREF: AString::Replace(char,char)+6Aj
.text:000018FC                 mov     edx, [ebp+var_4]
.text:000018FF                 mov     eax, [ebp+var_8]
.text:00001902                 cmp     eax, [edx+4]
.text:00001905                 jnb     short loc_193C
.text:00001907                 mov     ecx, [ebp+var_8]
.text:0000190A                 push    ecx             ; unsigned int
.text:0000190B                 movzx   edx, [ebp+arg_0]
.text:0000190F                 push    edx             ; char
.text:00001910                 mov     ecx, [ebp+var_4] ; this
.text:00001913                 call    ?Find@AString@@QBEHDI@Z ; AString::Find(char,uint)
.text:00001918                 mov     [ebp+var_8], eax
.text:0000191B                 cmp     [ebp+var_8], 0
.text:0000191F                 jge     short loc_1923
.text:00001921                 jmp     short loc_193C
.text:00001923 ; ---------------------------------------------------------------------------
.text:00001923
.text:00001923 loc_1923:                               ; CODE XREF: AString::Replace(char,char)+4Fj
.text:00001923                 mov     eax, [ebp+var_4]
.text:00001926                 mov     ecx, [eax]
.text:00001928                 mov     edx, [ebp+var_8]
.text:0000192B                 mov     al, [ebp+arg_4]
.text:0000192E                 mov     [ecx+edx], al
.text:00001931                 mov     ecx, [ebp+var_8]
.text:00001934                 add     ecx, 1
.text:00001937                 mov     [ebp+var_8], ecx
.text:0000193A                 jmp     short loc_18FC
.text:0000193C ; ---------------------------------------------------------------------------
.text:0000193C
.text:0000193C loc_193C:                               ; CODE XREF: AString::Replace(char,char)+23j
.text:0000193C                                         ; AString::Replace(char,char)+35j ...
.text:0000193C                 add     esp, 8
.text:0000193F                 cmp     ebp, esp
.text:00001941                 call    __RTC_CheckEsp
.text:00001946                 mov     esp, ebp
.text:00001948                 pop     ebp
.text:00001949                 retn    8
.text:00001949 ?Replace@AString@@QAEXDD@Z endp
.text:00001949
.text:00001949 ; ---------------------------------------------------------------------------
.text:0000194C                 align 10h
.text:00001950
.text:00001950 ; =============== S U B R O U T I N E =======================================
.text:00001950
.text:00001950 ; Attributes: bp-based frame
.text:00001950
.text:00001950 ; void __thiscall AString::Replace(AString *this, const struct AString *, const struct AString *)
.text:00001950                 public ?Replace@AString@@QAEXABV1@0@Z
.text:00001950 ?Replace@AString@@QAEXABV1@0@Z proc near
.text:00001950
.text:00001950 var_10          = dword ptr -10h
.text:00001950 var_C           = dword ptr -0Ch
.text:00001950 var_8           = dword ptr -8
.text:00001950 var_4           = dword ptr -4
.text:00001950 arg_0           = dword ptr  8
.text:00001950 arg_4           = dword ptr  0Ch
.text:00001950
.text:00001950                 push    ebp
.text:00001951                 mov     ebp, esp
.text:00001953                 sub     esp, 10h
.text:00001956                 mov     eax, 0CCCCCCCCh
.text:0000195B                 mov     [ebp+var_10], eax
.text:0000195E                 mov     [ebp+var_C], eax
.text:00001961                 mov     [ebp+var_8], eax
.text:00001964                 mov     [ebp+var_4], eax
.text:00001967                 mov     [ebp+var_4], ecx
.text:0000196A                 mov     ecx, [ebp+arg_0] ; this
.text:0000196D                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:00001972                 movzx   eax, al
.text:00001975                 test    eax, eax
.text:00001977                 jz      short loc_197E
.text:00001979                 jmp     loc_1A07
.text:0000197E ; ---------------------------------------------------------------------------
.text:0000197E
.text:0000197E loc_197E:                               ; CODE XREF: AString::Replace(AString const &,AString const &)+27j
.text:0000197E                 mov     ecx, [ebp+arg_4]
.text:00001981                 push    ecx             ; AString *
.text:00001982                 mov     edx, [ebp+arg_0]
.text:00001985                 push    edx             ; AString *
.text:00001986                 call    ??8@YG_NABVAString@@0@Z ; operator==(AString const &,AString const &)
.text:0000198B                 movzx   eax, al
.text:0000198E                 test    eax, eax
.text:00001990                 jz      short loc_1994
.text:00001992                 jmp     short loc_1A07
.text:00001994 ; ---------------------------------------------------------------------------
.text:00001994
.text:00001994 loc_1994:                               ; CODE XREF: AString::Replace(AString const &,AString const &)+40j
.text:00001994                 mov     ecx, [ebp+arg_0] ; this
.text:00001997                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:0000199C                 mov     [ebp+var_8], eax
.text:0000199F                 mov     ecx, [ebp+arg_4] ; this
.text:000019A2                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:000019A7                 mov     [ebp+var_C], eax
.text:000019AA                 mov     [ebp+var_10], 0
.text:000019B1
.text:000019B1 loc_19B1:                               ; CODE XREF: AString::Replace(AString const &,AString const &)+B5j
.text:000019B1                 mov     ecx, [ebp+var_4]
.text:000019B4                 mov     edx, [ebp+var_10]
.text:000019B7                 cmp     edx, [ecx+4]
.text:000019BA                 jnb     short loc_1A07
.text:000019BC                 mov     eax, [ebp+var_10]
.text:000019BF                 push    eax             ; unsigned int
.text:000019C0                 mov     ecx, [ebp+arg_0]
.text:000019C3                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000019C8                 push    eax             ; SubStr
.text:000019C9                 mov     ecx, [ebp+var_4] ; this
.text:000019CC                 call    ?Find@AString@@QBEHPBDI@Z ; AString::Find(char const *,uint)
.text:000019D1                 mov     [ebp+var_10], eax
.text:000019D4                 cmp     [ebp+var_10], 0
.text:000019D8                 jge     short loc_19DC
.text:000019DA                 jmp     short loc_1A07
.text:000019DC ; ---------------------------------------------------------------------------
.text:000019DC
.text:000019DC loc_19DC:                               ; CODE XREF: AString::Replace(AString const &,AString const &)+88j
.text:000019DC                 mov     ecx, [ebp+var_8]
.text:000019DF                 push    ecx             ; unsigned int
.text:000019E0                 mov     edx, [ebp+var_10]
.text:000019E3                 push    edx             ; unsigned int
.text:000019E4                 mov     ecx, [ebp+var_4] ; this
.text:000019E7                 call    ?Delete@AString@@QAEXII@Z ; AString::Delete(uint,uint)
.text:000019EC                 mov     eax, [ebp+arg_4]
.text:000019EF                 push    eax             ; struct AString *
.text:000019F0                 mov     ecx, [ebp+var_10]
.text:000019F3                 push    ecx             ; unsigned int
.text:000019F4                 mov     ecx, [ebp+var_4] ; this
.text:000019F7                 call    ?Insert@AString@@QAEXIABV1@@Z ; AString::Insert(uint,AString const &)
.text:000019FC                 mov     edx, [ebp+var_10]
.text:000019FF                 add     edx, [ebp+var_C]
.text:00001A02                 mov     [ebp+var_10], edx
.text:00001A05                 jmp     short loc_19B1
.text:00001A07 ; ---------------------------------------------------------------------------
.text:00001A07
.text:00001A07 loc_1A07:                               ; CODE XREF: AString::Replace(AString const &,AString const &)+29j
.text:00001A07                                         ; AString::Replace(AString const &,AString const &)+42j ...
.text:00001A07                 add     esp, 10h
.text:00001A0A                 cmp     ebp, esp
.text:00001A0C                 call    __RTC_CheckEsp
.text:00001A11                 mov     esp, ebp
.text:00001A13                 pop     ebp
.text:00001A14                 retn    8
.text:00001A14 ?Replace@AString@@QAEXABV1@0@Z endp
.text:00001A14
.text:00001A14 ; ---------------------------------------------------------------------------
.text:00001A17                 align 10h
.text:00001A20
.text:00001A20 ; =============== S U B R O U T I N E =======================================
.text:00001A20
.text:00001A20 ; Attributes: bp-based frame
.text:00001A20
.text:00001A20 ; void __thiscall AString::Delete(AString *this, unsigned int)
.text:00001A20                 public ?Delete@AString@@QAEXI@Z
.text:00001A20 ?Delete@AString@@QAEXI@Z proc near
.text:00001A20
.text:00001A20 var_4           = dword ptr -4
.text:00001A20 arg_0           = dword ptr  8
.text:00001A20
.text:00001A20                 push    ebp
.text:00001A21                 mov     ebp, esp
.text:00001A23                 push    ecx
.text:00001A24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A2B                 mov     [ebp+var_4], ecx
.text:00001A2E                 mov     eax, [ebp+arg_0]
.text:00001A31                 add     eax, 1
.text:00001A34                 push    eax             ; unsigned int
.text:00001A35                 mov     ecx, [ebp+arg_0]
.text:00001A38                 push    ecx             ; unsigned int
.text:00001A39                 mov     ecx, [ebp+var_4] ; this
.text:00001A3C                 call    ?MoveItems@AString@@AAEXII@Z ; AString::MoveItems(uint,uint)
.text:00001A41                 mov     edx, [ebp+var_4]
.text:00001A44                 mov     eax, [edx+4]
.text:00001A47                 sub     eax, 1
.text:00001A4A                 mov     ecx, [ebp+var_4]
.text:00001A4D                 mov     [ecx+4], eax
.text:00001A50                 add     esp, 4
.text:00001A53                 cmp     ebp, esp
.text:00001A55                 call    __RTC_CheckEsp
.text:00001A5A                 mov     esp, ebp
.text:00001A5C                 pop     ebp
.text:00001A5D                 retn    4
.text:00001A5D ?Delete@AString@@QAEXI@Z endp
.text:00001A5D
.text:00001A60
.text:00001A60 ; =============== S U B R O U T I N E =======================================
.text:00001A60
.text:00001A60 ; Attributes: bp-based frame
.text:00001A60
.text:00001A60 ; void __thiscall AString::Delete(AString *this, unsigned int, unsigned int)
.text:00001A60                 public ?Delete@AString@@QAEXII@Z
.text:00001A60 ?Delete@AString@@QAEXII@Z proc near     ; CODE XREF: AString::Replace(AString const &,AString const &)+97p
.text:00001A60
.text:00001A60 var_4           = dword ptr -4
.text:00001A60 arg_0           = dword ptr  8
.text:00001A60 arg_4           = dword ptr  0Ch
.text:00001A60
.text:00001A60                 push    ebp
.text:00001A61                 mov     ebp, esp
.text:00001A63                 push    ecx
.text:00001A64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A6B                 mov     [ebp+var_4], ecx
.text:00001A6E                 mov     eax, [ebp+arg_0]
.text:00001A71                 add     eax, [ebp+arg_4]
.text:00001A74                 mov     ecx, [ebp+var_4]
.text:00001A77                 cmp     eax, [ecx+4]
.text:00001A7A                 jbe     short loc_1A88
.text:00001A7C                 mov     edx, [ebp+var_4]
.text:00001A7F                 mov     eax, [edx+4]
.text:00001A82                 sub     eax, [ebp+arg_0]
.text:00001A85                 mov     [ebp+arg_4], eax
.text:00001A88
.text:00001A88 loc_1A88:                               ; CODE XREF: AString::Delete(uint,uint)+1Aj
.text:00001A88                 cmp     [ebp+arg_4], 0
.text:00001A8C                 jbe     short loc_1AB0
.text:00001A8E                 mov     ecx, [ebp+arg_0]
.text:00001A91                 add     ecx, [ebp+arg_4]
.text:00001A94                 push    ecx             ; unsigned int
.text:00001A95                 mov     edx, [ebp+arg_0]
.text:00001A98                 push    edx             ; unsigned int
.text:00001A99                 mov     ecx, [ebp+var_4] ; this
.text:00001A9C                 call    ?MoveItems@AString@@AAEXII@Z ; AString::MoveItems(uint,uint)
.text:00001AA1                 mov     eax, [ebp+var_4]
.text:00001AA4                 mov     ecx, [eax+4]
.text:00001AA7                 sub     ecx, [ebp+arg_4]
.text:00001AAA                 mov     edx, [ebp+var_4]
.text:00001AAD                 mov     [edx+4], ecx
.text:00001AB0
.text:00001AB0 loc_1AB0:                               ; CODE XREF: AString::Delete(uint,uint)+2Cj
.text:00001AB0                 add     esp, 4
.text:00001AB3                 cmp     ebp, esp
.text:00001AB5                 call    __RTC_CheckEsp
.text:00001ABA                 mov     esp, ebp
.text:00001ABC                 pop     ebp
.text:00001ABD                 retn    8
.text:00001ABD ?Delete@AString@@QAEXII@Z endp
.text:00001ABD
.text:00001AC0
.text:00001AC0 ; =============== S U B R O U T I N E =======================================
.text:00001AC0
.text:00001AC0 ; Attributes: bp-based frame
.text:00001AC0
.text:00001AC0 ; void __thiscall AString::DeleteFrontal(AString *this, unsigned int)
.text:00001AC0                 public ?DeleteFrontal@AString@@QAEXI@Z
.text:00001AC0 ?DeleteFrontal@AString@@QAEXI@Z proc near
.text:00001AC0
.text:00001AC0 var_4           = dword ptr -4
.text:00001AC0 arg_0           = dword ptr  8
.text:00001AC0
.text:00001AC0                 push    ebp
.text:00001AC1                 mov     ebp, esp
.text:00001AC3                 push    ecx
.text:00001AC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001ACB                 mov     [ebp+var_4], ecx
.text:00001ACE                 cmp     [ebp+arg_0], 0
.text:00001AD2                 jz      short loc_1AF1
.text:00001AD4                 mov     eax, [ebp+arg_0]
.text:00001AD7                 push    eax             ; unsigned int
.text:00001AD8                 push    0               ; unsigned int
.text:00001ADA                 mov     ecx, [ebp+var_4] ; this
.text:00001ADD                 call    ?MoveItems@AString@@AAEXII@Z ; AString::MoveItems(uint,uint)
.text:00001AE2                 mov     ecx, [ebp+var_4]
.text:00001AE5                 mov     edx, [ecx+4]
.text:00001AE8                 sub     edx, [ebp+arg_0]
.text:00001AEB                 mov     eax, [ebp+var_4]
.text:00001AEE                 mov     [eax+4], edx
.text:00001AF1
.text:00001AF1 loc_1AF1:                               ; CODE XREF: AString::DeleteFrontal(uint)+12j
.text:00001AF1                 add     esp, 4
.text:00001AF4                 cmp     ebp, esp
.text:00001AF6                 call    __RTC_CheckEsp
.text:00001AFB                 mov     esp, ebp
.text:00001AFD                 pop     ebp
.text:00001AFE                 retn    4
.text:00001AFE ?DeleteFrontal@AString@@QAEXI@Z endp
.text:00001AFE
.text:00001AFE ; ---------------------------------------------------------------------------
.text:00001B01                 align 10h
.text:00001B10
.text:00001B10 ; =============== S U B R O U T I N E =======================================
.text:00001B10
.text:00001B10 ; Attributes: bp-based frame
.text:00001B10
.text:00001B10 ; void __thiscall UString::InsertSpace(UString *this, unsigned int, unsigned int)
.text:00001B10                 public ?InsertSpace@UString@@AAEXII@Z
.text:00001B10 ?InsertSpace@UString@@AAEXII@Z proc near
.text:00001B10                                         ; CODE XREF: UString::Insert(uint,wchar_t const *)+34p
.text:00001B10                                         ; UString::Insert(uint,UString const &)+33p
.text:00001B10
.text:00001B10 var_4           = dword ptr -4
.text:00001B10 arg_0           = dword ptr  8
.text:00001B10 arg_4           = dword ptr  0Ch
.text:00001B10
.text:00001B10                 push    ebp
.text:00001B11                 mov     ebp, esp
.text:00001B13                 push    ecx
.text:00001B14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001B1B                 mov     [ebp+var_4], ecx
.text:00001B1E                 mov     eax, [ebp+arg_4]
.text:00001B21                 push    eax             ; unsigned int
.text:00001B22                 mov     ecx, [ebp+var_4] ; this
.text:00001B25                 call    ?Grow@UString@@AAEXI@Z ; UString::Grow(uint)
.text:00001B2A                 mov     ecx, [ebp+arg_0]
.text:00001B2D                 push    ecx             ; unsigned int
.text:00001B2E                 mov     edx, [ebp+arg_0]
.text:00001B31                 add     edx, [ebp+arg_4]
.text:00001B34                 push    edx             ; unsigned int
.text:00001B35                 mov     ecx, [ebp+var_4] ; this
.text:00001B38                 call    ?MoveItems@UString@@AAEXII@Z ; UString::MoveItems(uint,uint)
.text:00001B3D                 add     esp, 4
.text:00001B40                 cmp     ebp, esp
.text:00001B42                 call    __RTC_CheckEsp
.text:00001B47                 mov     esp, ebp
.text:00001B49                 pop     ebp
.text:00001B4A                 retn    8
.text:00001B4A ?InsertSpace@UString@@AAEXII@Z endp
.text:00001B4A
.text:00001B4A ; ---------------------------------------------------------------------------
.text:00001B4D                 align 10h
.text:00001B50
.text:00001B50 ; =============== S U B R O U T I N E =======================================
.text:00001B50
.text:00001B50 ; Attributes: bp-based frame
.text:00001B50
.text:00001B50 ; void __thiscall UString::ReAlloc(UString *this, unsigned int)
.text:00001B50                 public ?ReAlloc@UString@@AAEXI@Z
.text:00001B50 ?ReAlloc@UString@@AAEXI@Z proc near     ; CODE XREF: UString::Grow_1(void)+47p
.text:00001B50                                         ; UString::Grow(uint)+6Ap
.text:00001B50
.text:00001B50 var_14          = dword ptr -14h
.text:00001B50 var_10          = dword ptr -10h
.text:00001B50 var_C           = dword ptr -0Ch
.text:00001B50 Dst             = dword ptr -8
.text:00001B50 var_4           = dword ptr -4
.text:00001B50 arg_0           = dword ptr  8
.text:00001B50
.text:00001B50                 push    ebp
.text:00001B51                 mov     ebp, esp
.text:00001B53                 sub     esp, 14h
.text:00001B56                 mov     eax, 0CCCCCCCCh
.text:00001B5B                 mov     [ebp+var_14], eax
.text:00001B5E                 mov     [ebp+var_10], eax
.text:00001B61                 mov     [ebp+var_C], eax
.text:00001B64                 mov     [ebp+Dst], eax
.text:00001B67                 mov     [ebp+var_4], eax
.text:00001B6A                 mov     [ebp+var_4], ecx
.text:00001B6D                 mov     eax, [ebp+var_4]
.text:00001B70                 mov     ecx, [ebp+arg_0]
.text:00001B73                 cmp     ecx, [eax+4]
.text:00001B76                 jb      short loc_1B81
.text:00001B78                 cmp     [ebp+arg_0], 40000000h
.text:00001B7F                 jb      short loc_1B96
.text:00001B81
.text:00001B81 loc_1B81:                               ; CODE XREF: UString::ReAlloc(uint)+26j
.text:00001B81                 mov     [ebp+var_C], 13329ADh
.text:00001B88                 push    offset __TI1H
.text:00001B8D                 lea     edx, [ebp+var_C]
.text:00001B90                 push    edx
.text:00001B91                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00001B96 ; ---------------------------------------------------------------------------
.text:00001B96
.text:00001B96 loc_1B96:                               ; CODE XREF: UString::ReAlloc(uint)+2Fj
.text:00001B96                 mov     eax, [ebp+arg_0]
.text:00001B99                 add     eax, 1
.text:00001B9C                 xor     ecx, ecx
.text:00001B9E                 mov     edx, 2
.text:00001BA3                 mul     edx
.text:00001BA5                 seto    cl
.text:00001BA8                 neg     ecx
.text:00001BAA                 or      ecx, eax
.text:00001BAC                 push    ecx             ; unsigned int
.text:00001BAD                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001BB2                 add     esp, 4
.text:00001BB5                 mov     [ebp+var_10], eax
.text:00001BB8                 mov     eax, [ebp+var_10]
.text:00001BBB                 mov     [ebp+Dst], eax
.text:00001BBE                 mov     ecx, [ebp+var_4]
.text:00001BC1                 mov     edx, [ecx+4]
.text:00001BC4                 add     edx, 1
.text:00001BC7                 push    edx             ; int
.text:00001BC8                 mov     eax, [ebp+var_4]
.text:00001BCB                 mov     ecx, [eax]
.text:00001BCD                 push    ecx             ; Src
.text:00001BCE                 mov     edx, [ebp+Dst]
.text:00001BD1                 push    edx             ; Dst
.text:00001BD2                 call    _wmemcpy
.text:00001BD7                 add     esp, 0Ch
.text:00001BDA                 mov     eax, [ebp+var_4]
.text:00001BDD                 mov     ecx, [eax]
.text:00001BDF                 mov     [ebp+var_14], ecx
.text:00001BE2                 mov     edx, [ebp+var_14]
.text:00001BE5                 push    edx             ; void *
.text:00001BE6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001BEB                 add     esp, 4
.text:00001BEE                 mov     eax, [ebp+var_4]
.text:00001BF1                 mov     ecx, [ebp+Dst]
.text:00001BF4                 mov     [eax], ecx
.text:00001BF6                 mov     edx, [ebp+var_4]
.text:00001BF9                 mov     eax, [ebp+arg_0]
.text:00001BFC                 mov     [edx+8], eax
.text:00001BFF                 add     esp, 14h
.text:00001C02                 cmp     ebp, esp
.text:00001C04                 call    __RTC_CheckEsp
.text:00001C09                 mov     esp, ebp
.text:00001C0B                 pop     ebp
.text:00001C0C                 retn    4
.text:00001C0C ?ReAlloc@UString@@AAEXI@Z endp
.text:00001C0C
.text:00001C0C ; ---------------------------------------------------------------------------
.text:00001C0F                 align 10h
.text:00001C10
.text:00001C10 ; =============== S U B R O U T I N E =======================================
.text:00001C10
.text:00001C10 ; Attributes: bp-based frame
.text:00001C10
.text:00001C10 ; void __thiscall UString::ReAlloc2(UString *this, unsigned int)
.text:00001C10                 public ?ReAlloc2@UString@@AAEXI@Z
.text:00001C10 ?ReAlloc2@UString@@AAEXI@Z proc near
.text:00001C10
.text:00001C10 var_14          = dword ptr -14h
.text:00001C10 var_10          = dword ptr -10h
.text:00001C10 var_C           = dword ptr -0Ch
.text:00001C10 var_8           = dword ptr -8
.text:00001C10 var_4           = dword ptr -4
.text:00001C10 arg_0           = dword ptr  8
.text:00001C10
.text:00001C10                 push    ebp
.text:00001C11                 mov     ebp, esp
.text:00001C13                 sub     esp, 14h
.text:00001C16                 mov     eax, 0CCCCCCCCh
.text:00001C1B                 mov     [ebp+var_14], eax
.text:00001C1E                 mov     [ebp+var_10], eax
.text:00001C21                 mov     [ebp+var_C], eax
.text:00001C24                 mov     [ebp+var_8], eax
.text:00001C27                 mov     [ebp+var_4], eax
.text:00001C2A                 mov     [ebp+var_4], ecx
.text:00001C2D                 cmp     [ebp+arg_0], 40000000h
.text:00001C34                 jb      short loc_1C4B
.text:00001C36                 mov     [ebp+var_C], 13329ADh
.text:00001C3D                 push    offset __TI1H
.text:00001C42                 lea     eax, [ebp+var_C]
.text:00001C45                 push    eax
.text:00001C46                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00001C4B ; ---------------------------------------------------------------------------
.text:00001C4B
.text:00001C4B loc_1C4B:                               ; CODE XREF: UString::ReAlloc2(uint)+24j
.text:00001C4B                 mov     eax, [ebp+arg_0]
.text:00001C4E                 add     eax, 1
.text:00001C51                 xor     ecx, ecx
.text:00001C53                 mov     edx, 2
.text:00001C58                 mul     edx
.text:00001C5A                 seto    cl
.text:00001C5D                 neg     ecx
.text:00001C5F                 or      ecx, eax
.text:00001C61                 push    ecx             ; unsigned int
.text:00001C62                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001C67                 add     esp, 4
.text:00001C6A                 mov     [ebp+var_10], eax
.text:00001C6D                 mov     eax, [ebp+var_10]
.text:00001C70                 mov     [ebp+var_8], eax
.text:00001C73                 xor     ecx, ecx
.text:00001C75                 mov     edx, [ebp+var_8]
.text:00001C78                 mov     [edx], cx
.text:00001C7B                 mov     eax, [ebp+var_4]
.text:00001C7E                 mov     ecx, [eax]
.text:00001C80                 mov     [ebp+var_14], ecx
.text:00001C83                 mov     edx, [ebp+var_14]
.text:00001C86                 push    edx             ; void *
.text:00001C87                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001C8C                 add     esp, 4
.text:00001C8F                 mov     eax, [ebp+var_4]
.text:00001C92                 mov     ecx, [ebp+var_8]
.text:00001C95                 mov     [eax], ecx
.text:00001C97                 mov     edx, [ebp+var_4]
.text:00001C9A                 mov     eax, [ebp+arg_0]
.text:00001C9D                 mov     [edx+8], eax
.text:00001CA0                 add     esp, 14h
.text:00001CA3                 cmp     ebp, esp
.text:00001CA5                 call    __RTC_CheckEsp
.text:00001CAA                 mov     esp, ebp
.text:00001CAC                 pop     ebp
.text:00001CAD                 retn    4
.text:00001CAD ?ReAlloc2@UString@@AAEXI@Z endp
.text:00001CAD
.text:00001CB0
.text:00001CB0 ; =============== S U B R O U T I N E =======================================
.text:00001CB0
.text:00001CB0 ; Attributes: bp-based frame
.text:00001CB0
.text:00001CB0 ; void __thiscall UString::SetStartLen(UString *this, unsigned int)
.text:00001CB0                 public ?SetStartLen@UString@@AAEXI@Z
.text:00001CB0 ?SetStartLen@UString@@AAEXI@Z proc near ; CODE XREF: UString::UString(uint,wchar_t const *)+38p
.text:00001CB0                                         ; UString::UString(uint,UString const &)+29p ...
.text:00001CB0
.text:00001CB0 var_8           = dword ptr -8
.text:00001CB0 var_4           = dword ptr -4
.text:00001CB0 arg_0           = dword ptr  8
.text:00001CB0
.text:00001CB0                 push    ebp
.text:00001CB1                 mov     ebp, esp
.text:00001CB3                 sub     esp, 8
.text:00001CB6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001CBD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001CC4                 mov     [ebp+var_4], ecx
.text:00001CC7                 mov     eax, [ebp+var_4]
.text:00001CCA                 mov     dword ptr [eax], 0
.text:00001CD0                 mov     eax, [ebp+arg_0]
.text:00001CD3                 add     eax, 1
.text:00001CD6                 xor     ecx, ecx
.text:00001CD8                 mov     edx, 2
.text:00001CDD                 mul     edx
.text:00001CDF                 seto    cl
.text:00001CE2                 neg     ecx
.text:00001CE4                 or      ecx, eax
.text:00001CE6                 push    ecx             ; unsigned int
.text:00001CE7                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001CEC                 add     esp, 4
.text:00001CEF                 mov     [ebp+var_8], eax
.text:00001CF2                 mov     eax, [ebp+var_4]
.text:00001CF5                 mov     ecx, [ebp+var_8]
.text:00001CF8                 mov     [eax], ecx
.text:00001CFA                 mov     edx, [ebp+var_4]
.text:00001CFD                 mov     eax, [ebp+arg_0]
.text:00001D00                 mov     [edx+4], eax
.text:00001D03                 mov     ecx, [ebp+var_4]
.text:00001D06                 mov     edx, [ebp+arg_0]
.text:00001D09                 mov     [ecx+8], edx
.text:00001D0C                 add     esp, 8
.text:00001D0F                 cmp     ebp, esp
.text:00001D11                 call    __RTC_CheckEsp
.text:00001D16                 mov     esp, ebp
.text:00001D18                 pop     ebp
.text:00001D19                 retn    4
.text:00001D19 ?SetStartLen@UString@@AAEXI@Z endp
.text:00001D19
.text:00001D19 ; ---------------------------------------------------------------------------
.text:00001D1C                 align 10h
.text:00001D20
.text:00001D20 ; =============== S U B R O U T I N E =======================================
.text:00001D20
.text:00001D20 ; Attributes: bp-based frame
.text:00001D20
.text:00001D20 ; void __thiscall UString::Grow_1(UString *__hidden this)
.text:00001D20                 public ?Grow_1@UString@@AAEXXZ
.text:00001D20 ?Grow_1@UString@@AAEXXZ proc near       ; CODE XREF: UString::Add_LF(void)+2Fp
.text:00001D20                                         ; UString::InsertAtFront(wchar_t)+1Fp ...
.text:00001D20
.text:00001D20 var_8           = dword ptr -8
.text:00001D20 var_4           = dword ptr -4
.text:00001D20
.text:00001D20                 push    ebp
.text:00001D21                 mov     ebp, esp
.text:00001D23                 sub     esp, 8
.text:00001D26                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001D2D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001D34                 mov     [ebp+var_4], ecx
.text:00001D37                 mov     eax, [ebp+var_4]
.text:00001D3A                 mov     ecx, [eax+4]
.text:00001D3D                 mov     [ebp+var_8], ecx
.text:00001D40                 mov     edx, [ebp+var_8]
.text:00001D43                 shr     edx, 1
.text:00001D45                 add     edx, [ebp+var_8]
.text:00001D48                 mov     [ebp+var_8], edx
.text:00001D4B                 mov     eax, [ebp+var_8]
.text:00001D4E                 add     eax, 10h
.text:00001D51                 mov     [ebp+var_8], eax
.text:00001D54                 mov     ecx, [ebp+var_8]
.text:00001D57                 and     ecx, 0FFFFFFF0h
.text:00001D5A                 mov     [ebp+var_8], ecx
.text:00001D5D                 mov     edx, [ebp+var_8]
.text:00001D60                 sub     edx, 1
.text:00001D63                 push    edx             ; unsigned int
.text:00001D64                 mov     ecx, [ebp+var_4] ; this
.text:00001D67                 call    ?ReAlloc@UString@@AAEXI@Z ; UString::ReAlloc(uint)
.text:00001D6C                 add     esp, 8
.text:00001D6F                 cmp     ebp, esp
.text:00001D71                 call    __RTC_CheckEsp
.text:00001D76                 mov     esp, ebp
.text:00001D78                 pop     ebp
.text:00001D79                 retn
.text:00001D79 ?Grow_1@UString@@AAEXXZ endp
.text:00001D79
.text:00001D79 ; ---------------------------------------------------------------------------
.text:00001D7A                 align 10h
.text:00001D80
.text:00001D80 ; =============== S U B R O U T I N E =======================================
.text:00001D80
.text:00001D80 ; Attributes: bp-based frame
.text:00001D80
.text:00001D80 ; void __thiscall UString::Grow(UString *this, unsigned int)
.text:00001D80                 public ?Grow@UString@@AAEXI@Z
.text:00001D80 ?Grow@UString@@AAEXI@Z proc near        ; CODE XREF: UString::InsertSpace(uint,uint)+15p
.text:00001D80                                         ; UString::operator+=(wchar_t const *)+2Ap ...
.text:00001D80
.text:00001D80 var_C           = dword ptr -0Ch
.text:00001D80 var_8           = dword ptr -8
.text:00001D80 var_4           = dword ptr -4
.text:00001D80 arg_0           = dword ptr  8
.text:00001D80
.text:00001D80                 push    ebp
.text:00001D81                 mov     ebp, esp
.text:00001D83                 sub     esp, 0Ch
.text:00001D86                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001D8D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001D94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001D9B                 mov     [ebp+var_4], ecx
.text:00001D9E                 mov     eax, [ebp+var_4]
.text:00001DA1                 mov     ecx, [ebp+var_4]
.text:00001DA4                 mov     edx, [eax+8]
.text:00001DA7                 sub     edx, [ecx+4]
.text:00001DAA                 mov     [ebp+var_8], edx
.text:00001DAD                 mov     eax, [ebp+arg_0]
.text:00001DB0                 cmp     eax, [ebp+var_8]
.text:00001DB3                 ja      short loc_1DB7
.text:00001DB5                 jmp     short loc_1DEF
.text:00001DB7 ; ---------------------------------------------------------------------------
.text:00001DB7
.text:00001DB7 loc_1DB7:                               ; CODE XREF: UString::Grow(uint)+33j
.text:00001DB7                 mov     ecx, [ebp+var_4]
.text:00001DBA                 mov     edx, [ecx+4]
.text:00001DBD                 add     edx, [ebp+arg_0]
.text:00001DC0                 mov     [ebp+var_C], edx
.text:00001DC3                 mov     eax, [ebp+var_C]
.text:00001DC6                 shr     eax, 1
.text:00001DC8                 add     eax, [ebp+var_C]
.text:00001DCB                 mov     [ebp+var_C], eax
.text:00001DCE                 mov     ecx, [ebp+var_C]
.text:00001DD1                 add     ecx, 10h
.text:00001DD4                 mov     [ebp+var_C], ecx
.text:00001DD7                 mov     edx, [ebp+var_C]
.text:00001DDA                 and     edx, 0FFFFFFF0h
.text:00001DDD                 mov     [ebp+var_C], edx
.text:00001DE0                 mov     eax, [ebp+var_C]
.text:00001DE3                 sub     eax, 1
.text:00001DE6                 push    eax             ; unsigned int
.text:00001DE7                 mov     ecx, [ebp+var_4] ; this
.text:00001DEA                 call    ?ReAlloc@UString@@AAEXI@Z ; UString::ReAlloc(uint)
.text:00001DEF
.text:00001DEF loc_1DEF:                               ; CODE XREF: UString::Grow(uint)+35j
.text:00001DEF                 add     esp, 0Ch
.text:00001DF2                 cmp     ebp, esp
.text:00001DF4                 call    __RTC_CheckEsp
.text:00001DF9                 mov     esp, ebp
.text:00001DFB                 pop     ebp
.text:00001DFC                 retn    4
.text:00001DFC ?Grow@UString@@AAEXI@Z endp
.text:00001DFC
.text:00001DFC ; ---------------------------------------------------------------------------
.text:00001DFF                 align 10h
.text:00001E00
.text:00001E00 ; =============== S U B R O U T I N E =======================================
.text:00001E00
.text:00001E00 ; Attributes: bp-based frame
.text:00001E00
.text:00001E00 ; int __stdcall UString::UString(unsigned int, wchar_t *)
.text:00001E00                 public ??0UString@@AAE@IPB_W@Z
.text:00001E00 ??0UString@@AAE@IPB_W@Z proc near
.text:00001E00
.text:00001E00 var_8           = dword ptr -8
.text:00001E00 var_4           = dword ptr -4
.text:00001E00 arg_0           = dword ptr  8
.text:00001E00 arg_4           = dword ptr  0Ch
.text:00001E00
.text:00001E00                 push    ebp
.text:00001E01                 mov     ebp, esp
.text:00001E03                 sub     esp, 8
.text:00001E06                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001E0D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001E14                 mov     [ebp+var_4], ecx
.text:00001E17                 mov     eax, [ebp+arg_4]
.text:00001E1A                 push    eax             ; wchar_t *
.text:00001E1B                 call    ?MyStringLen@@YGIPB_W@Z ; MyStringLen(wchar_t const *)
.text:00001E20                 mov     [ebp+var_8], eax
.text:00001E23                 mov     ecx, [ebp+arg_0]
.text:00001E26                 cmp     ecx, [ebp+var_8]
.text:00001E29                 jbe     short loc_1E31
.text:00001E2B                 mov     edx, [ebp+var_8]
.text:00001E2E                 mov     [ebp+arg_0], edx
.text:00001E31
.text:00001E31 loc_1E31:                               ; CODE XREF: UString::UString(uint,wchar_t const *)+29j
.text:00001E31                 mov     eax, [ebp+arg_0]
.text:00001E34                 push    eax             ; unsigned int
.text:00001E35                 mov     ecx, [ebp+var_4] ; this
.text:00001E38                 call    ?SetStartLen@UString@@AAEXI@Z ; UString::SetStartLen(uint)
.text:00001E3D                 mov     ecx, [ebp+arg_0]
.text:00001E40                 push    ecx             ; int
.text:00001E41                 mov     edx, [ebp+arg_4]
.text:00001E44                 push    edx             ; Src
.text:00001E45                 mov     eax, [ebp+var_4]
.text:00001E48                 mov     ecx, [eax]
.text:00001E4A                 push    ecx             ; Dst
.text:00001E4B                 call    _wmemcpy
.text:00001E50                 add     esp, 0Ch
.text:00001E53                 mov     edx, [ebp+var_4]
.text:00001E56                 mov     eax, [edx]
.text:00001E58                 xor     ecx, ecx
.text:00001E5A                 mov     edx, [ebp+arg_0]
.text:00001E5D                 mov     [eax+edx*2], cx
.text:00001E61                 mov     eax, [ebp+var_4]
.text:00001E64                 add     esp, 8
.text:00001E67                 cmp     ebp, esp
.text:00001E69                 call    __RTC_CheckEsp
.text:00001E6E                 mov     esp, ebp
.text:00001E70                 pop     ebp
.text:00001E71                 retn    8
.text:00001E71 ??0UString@@AAE@IPB_W@Z endp
.text:00001E71
.text:00001E71 ; ---------------------------------------------------------------------------
.text:00001E74                 align 10h
.text:00001E80
.text:00001E80 ; =============== S U B R O U T I N E =======================================
.text:00001E80
.text:00001E80 ; Attributes: bp-based frame
.text:00001E80
.text:00001E80 ; private: __thiscall UString::UString(unsigned int, class UString const &)
.text:00001E80                 public ??0UString@@AAE@IABV0@@Z
.text:00001E80 ??0UString@@AAE@IABV0@@Z proc near
.text:00001E80
.text:00001E80 var_4           = dword ptr -4
.text:00001E80 arg_0           = dword ptr  8
.text:00001E80 arg_4           = dword ptr  0Ch
.text:00001E80
.text:00001E80                 push    ebp
.text:00001E81                 mov     ebp, esp
.text:00001E83                 push    ecx
.text:00001E84                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001E8B                 mov     [ebp+var_4], ecx
.text:00001E8E                 mov     eax, [ebp+arg_4]
.text:00001E91                 mov     ecx, [ebp+arg_0]
.text:00001E94                 cmp     ecx, [eax+4]
.text:00001E97                 jbe     short loc_1EA2
.text:00001E99                 mov     edx, [ebp+arg_4]
.text:00001E9C                 mov     eax, [edx+4]
.text:00001E9F                 mov     [ebp+arg_0], eax
.text:00001EA2
.text:00001EA2 loc_1EA2:                               ; CODE XREF: UString::UString(uint,UString const &)+17j
.text:00001EA2                 mov     ecx, [ebp+arg_0]
.text:00001EA5                 push    ecx             ; unsigned int
.text:00001EA6                 mov     ecx, [ebp+var_4] ; this
.text:00001EA9                 call    ?SetStartLen@UString@@AAEXI@Z ; UString::SetStartLen(uint)
.text:00001EAE                 mov     edx, [ebp+arg_0]
.text:00001EB1                 push    edx             ; int
.text:00001EB2                 mov     eax, [ebp+arg_4]
.text:00001EB5                 mov     ecx, [eax]
.text:00001EB7                 push    ecx             ; Src
.text:00001EB8                 mov     edx, [ebp+var_4]
.text:00001EBB                 mov     eax, [edx]
.text:00001EBD                 push    eax             ; Dst
.text:00001EBE                 call    _wmemcpy
.text:00001EC3                 add     esp, 0Ch
.text:00001EC6                 mov     ecx, [ebp+var_4]
.text:00001EC9                 mov     edx, [ecx]
.text:00001ECB                 xor     eax, eax
.text:00001ECD                 mov     ecx, [ebp+arg_0]
.text:00001ED0                 mov     [edx+ecx*2], ax
.text:00001ED4                 mov     eax, [ebp+var_4]
.text:00001ED7                 add     esp, 4
.text:00001EDA                 cmp     ebp, esp
.text:00001EDC                 call    __RTC_CheckEsp
.text:00001EE1                 mov     esp, ebp
.text:00001EE3                 pop     ebp
.text:00001EE4                 retn    8
.text:00001EE4 ??0UString@@AAE@IABV0@@Z endp
.text:00001EE4
.text:00001EE4 ; ---------------------------------------------------------------------------
.text:00001EE7                 align 10h
.text:00001EF0
.text:00001EF0 ; =============== S U B R O U T I N E =======================================
.text:00001EF0
.text:00001EF0 ; Attributes: bp-based frame
.text:00001EF0
.text:00001EF0 ; int __stdcall UString::UString(UString *, __int16)
.text:00001EF0                 public ??0UString@@AAE@ABV0@_W@Z
.text:00001EF0 ??0UString@@AAE@ABV0@_W@Z proc near
.text:00001EF0
.text:00001EF0 var_C           = dword ptr -0Ch
.text:00001EF0 Dst             = dword ptr -8
.text:00001EF0 var_4           = dword ptr -4
.text:00001EF0 arg_0           = dword ptr  8
.text:00001EF0 arg_4           = word ptr  0Ch
.text:00001EF0
.text:00001EF0                 push    ebp
.text:00001EF1                 mov     ebp, esp
.text:00001EF3                 sub     esp, 0Ch
.text:00001EF6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001EFD                 mov     [ebp+Dst], 0CCCCCCCCh
.text:00001F04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F0B                 mov     [ebp+var_4], ecx
.text:00001F0E                 mov     ecx, [ebp+arg_0] ; this
.text:00001F11                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00001F16                 add     eax, 1
.text:00001F19                 push    eax             ; unsigned int
.text:00001F1A                 mov     ecx, [ebp+var_4] ; this
.text:00001F1D                 call    ?SetStartLen@UString@@AAEXI@Z ; UString::SetStartLen(uint)
.text:00001F22                 mov     eax, [ebp+var_4]
.text:00001F25                 mov     ecx, [eax]
.text:00001F27                 mov     [ebp+Dst], ecx
.text:00001F2A                 mov     ecx, [ebp+arg_0] ; this
.text:00001F2D                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00001F32                 mov     [ebp+var_C], eax
.text:00001F35                 mov     edx, [ebp+var_C]
.text:00001F38                 push    edx             ; int
.text:00001F39                 mov     ecx, [ebp+arg_0]
.text:00001F3C                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001F41                 push    eax             ; Src
.text:00001F42                 mov     eax, [ebp+Dst]
.text:00001F45                 push    eax             ; Dst
.text:00001F46                 call    _wmemcpy
.text:00001F4B                 add     esp, 0Ch
.text:00001F4E                 mov     ecx, [ebp+var_C]
.text:00001F51                 mov     edx, [ebp+Dst]
.text:00001F54                 mov     ax, [ebp+arg_4]
.text:00001F58                 mov     [edx+ecx*2], ax
.text:00001F5C                 xor     ecx, ecx
.text:00001F5E                 mov     edx, [ebp+var_C]
.text:00001F61                 mov     eax, [ebp+Dst]
.text:00001F64                 mov     [eax+edx*2+2], cx
.text:00001F69                 mov     eax, [ebp+var_4]
.text:00001F6C                 add     esp, 0Ch
.text:00001F6F                 cmp     ebp, esp
.text:00001F71                 call    __RTC_CheckEsp
.text:00001F76                 mov     esp, ebp
.text:00001F78                 pop     ebp
.text:00001F79                 retn    8
.text:00001F79 ??0UString@@AAE@ABV0@_W@Z endp
.text:00001F79
.text:00001F79 ; ---------------------------------------------------------------------------
.text:00001F7C                 align 10h
.text:00001F80
.text:00001F80 ; =============== S U B R O U T I N E =======================================
.text:00001F80
.text:00001F80 ; Attributes: bp-based frame
.text:00001F80
.text:00001F80 ; int __stdcall UString::UString(void *Src, int, void *, int)
.text:00001F80                 public ??0UString@@AAE@PB_WI0I@Z
.text:00001F80 ??0UString@@AAE@PB_WI0I@Z proc near     ; CODE XREF: operator+(UString const &,UString const &)+39p
.text:00001F80                                         ; operator+(UString const &,wchar_t const *)+35p ...
.text:00001F80
.text:00001F80 Dst             = dword ptr -8
.text:00001F80 var_4           = dword ptr -4
.text:00001F80 Src             = dword ptr  8
.text:00001F80 arg_4           = dword ptr  0Ch
.text:00001F80 arg_8           = dword ptr  10h
.text:00001F80 arg_C           = dword ptr  14h
.text:00001F80
.text:00001F80                 push    ebp
.text:00001F81                 mov     ebp, esp
.text:00001F83                 sub     esp, 8
.text:00001F86                 mov     [ebp+Dst], 0CCCCCCCCh
.text:00001F8D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F94                 mov     [ebp+var_4], ecx
.text:00001F97                 mov     eax, [ebp+arg_4]
.text:00001F9A                 add     eax, [ebp+arg_C]
.text:00001F9D                 push    eax             ; unsigned int
.text:00001F9E                 mov     ecx, [ebp+var_4] ; this
.text:00001FA1                 call    ?SetStartLen@UString@@AAEXI@Z ; UString::SetStartLen(uint)
.text:00001FA6                 mov     ecx, [ebp+var_4]
.text:00001FA9                 mov     edx, [ecx]
.text:00001FAB                 mov     [ebp+Dst], edx
.text:00001FAE                 mov     eax, [ebp+arg_4]
.text:00001FB1                 push    eax             ; int
.text:00001FB2                 mov     ecx, [ebp+Src]
.text:00001FB5                 push    ecx             ; Src
.text:00001FB6                 mov     edx, [ebp+Dst]
.text:00001FB9                 push    edx             ; Dst
.text:00001FBA                 call    _wmemcpy
.text:00001FBF                 add     esp, 0Ch
.text:00001FC2                 mov     eax, [ebp+arg_C]
.text:00001FC5                 add     eax, 1
.text:00001FC8                 push    eax             ; int
.text:00001FC9                 mov     ecx, [ebp+arg_8]
.text:00001FCC                 push    ecx             ; Src
.text:00001FCD                 mov     edx, [ebp+arg_4]
.text:00001FD0                 mov     eax, [ebp+Dst]
.text:00001FD3                 lea     ecx, [eax+edx*2]
.text:00001FD6                 push    ecx             ; Dst
.text:00001FD7                 call    _wmemcpy
.text:00001FDC                 add     esp, 0Ch
.text:00001FDF                 mov     eax, [ebp+var_4]
.text:00001FE2                 add     esp, 8
.text:00001FE5                 cmp     ebp, esp
.text:00001FE7                 call    __RTC_CheckEsp
.text:00001FEC                 mov     esp, ebp
.text:00001FEE                 pop     ebp
.text:00001FEF                 retn    10h
.text:00001FEF ??0UString@@AAE@PB_WI0I@Z endp
.text:00001FEF
.text:00001FEF ; ---------------------------------------------------------------------------
.text:00001FF2                 align 10h
.text:00002000
.text:00002000 ; =============== S U B R O U T I N E =======================================
.text:00002000
.text:00002000 ; Attributes: bp-based frame
.text:00002000
.text:00002000 ; int __stdcall operator+(int, UString *, UString *)
.text:00002000                 public ??H@YG?AVUString@@ABV0@0@Z
.text:00002000 ??H@YG?AVUString@@ABV0@0@Z proc near
.text:00002000
.text:00002000 var_4           = dword ptr -4
.text:00002000 arg_0           = dword ptr  8
.text:00002000 arg_4           = dword ptr  0Ch
.text:00002000 arg_8           = dword ptr  10h
.text:00002000
.text:00002000                 push    ebp
.text:00002001                 mov     ebp, esp
.text:00002003                 push    ecx
.text:00002004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000200B                 mov     [ebp+var_4], 0
.text:00002012                 mov     ecx, [ebp+arg_8] ; this
.text:00002015                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000201A                 push    eax             ; int
.text:0000201B                 mov     ecx, [ebp+arg_8]
.text:0000201E                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002023                 push    eax             ; void *
.text:00002024                 mov     ecx, [ebp+arg_4] ; this
.text:00002027                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000202C                 push    eax             ; int
.text:0000202D                 mov     ecx, [ebp+arg_4]
.text:00002030                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002035                 push    eax             ; Src
.text:00002036                 mov     ecx, [ebp+arg_0]
.text:00002039                 call    ??0UString@@AAE@PB_WI0I@Z ; UString::UString(wchar_t const *,uint,wchar_t const *,uint)
.text:0000203E                 mov     eax, [ebp+var_4]
.text:00002041                 or      eax, 1
.text:00002044                 mov     [ebp+var_4], eax
.text:00002047                 mov     eax, [ebp+arg_0]
.text:0000204A                 add     esp, 4
.text:0000204D                 cmp     ebp, esp
.text:0000204F                 call    __RTC_CheckEsp
.text:00002054                 mov     esp, ebp
.text:00002056                 pop     ebp
.text:00002057                 retn    0Ch
.text:00002057 ??H@YG?AVUString@@ABV0@0@Z endp
.text:00002057
.text:00002057 ; ---------------------------------------------------------------------------
.text:0000205A                 align 10h
.text:00002060
.text:00002060 ; =============== S U B R O U T I N E =======================================
.text:00002060
.text:00002060 ; Attributes: bp-based frame
.text:00002060
.text:00002060 ; int __stdcall operator+(int, UString *, wchar_t *)
.text:00002060                 public ??H@YG?AVUString@@ABV0@PB_W@Z
.text:00002060 ??H@YG?AVUString@@ABV0@PB_W@Z proc near
.text:00002060
.text:00002060 var_4           = dword ptr -4
.text:00002060 arg_0           = dword ptr  8
.text:00002060 arg_4           = dword ptr  0Ch
.text:00002060 arg_8           = dword ptr  10h
.text:00002060
.text:00002060                 push    ebp
.text:00002061                 mov     ebp, esp
.text:00002063                 push    ecx
.text:00002064                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000206B                 mov     [ebp+var_4], 0
.text:00002072                 mov     eax, [ebp+arg_8]
.text:00002075                 push    eax             ; wchar_t *
.text:00002076                 call    ?MyStringLen@@YGIPB_W@Z ; MyStringLen(wchar_t const *)
.text:0000207B                 push    eax             ; int
.text:0000207C                 mov     ecx, [ebp+arg_8]
.text:0000207F                 push    ecx             ; void *
.text:00002080                 mov     ecx, [ebp+arg_4] ; this
.text:00002083                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00002088                 push    eax             ; int
.text:00002089                 mov     ecx, [ebp+arg_4]
.text:0000208C                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002091                 push    eax             ; Src
.text:00002092                 mov     ecx, [ebp+arg_0]
.text:00002095                 call    ??0UString@@AAE@PB_WI0I@Z ; UString::UString(wchar_t const *,uint,wchar_t const *,uint)
.text:0000209A                 mov     edx, [ebp+var_4]
.text:0000209D                 or      edx, 1
.text:000020A0                 mov     [ebp+var_4], edx
.text:000020A3                 mov     eax, [ebp+arg_0]
.text:000020A6                 add     esp, 4
.text:000020A9                 cmp     ebp, esp
.text:000020AB                 call    __RTC_CheckEsp
.text:000020B0                 mov     esp, ebp
.text:000020B2                 pop     ebp
.text:000020B3                 retn    0Ch
.text:000020B3 ??H@YG?AVUString@@ABV0@PB_W@Z endp
.text:000020B3
.text:000020B3 ; ---------------------------------------------------------------------------
.text:000020B6                 align 10h
.text:000020C0
.text:000020C0 ; =============== S U B R O U T I N E =======================================
.text:000020C0
.text:000020C0 ; Attributes: bp-based frame
.text:000020C0
.text:000020C0 ; int __stdcall operator+(int, wchar_t *, UString *)
.text:000020C0                 public ??H@YG?AVUString@@PB_WABV0@@Z
.text:000020C0 ??H@YG?AVUString@@PB_WABV0@@Z proc near
.text:000020C0
.text:000020C0 var_4           = dword ptr -4
.text:000020C0 arg_0           = dword ptr  8
.text:000020C0 arg_4           = dword ptr  0Ch
.text:000020C0 arg_8           = dword ptr  10h
.text:000020C0
.text:000020C0                 push    ebp
.text:000020C1                 mov     ebp, esp
.text:000020C3                 push    ecx
.text:000020C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000020CB                 mov     [ebp+var_4], 0
.text:000020D2                 mov     ecx, [ebp+arg_8] ; this
.text:000020D5                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000020DA                 push    eax             ; int
.text:000020DB                 mov     ecx, [ebp+arg_8]
.text:000020DE                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000020E3                 push    eax             ; void *
.text:000020E4                 mov     eax, [ebp+arg_4]
.text:000020E7                 push    eax             ; wchar_t *
.text:000020E8                 call    ?MyStringLen@@YGIPB_W@Z ; MyStringLen(wchar_t const *)
.text:000020ED                 push    eax             ; int
.text:000020EE                 mov     ecx, [ebp+arg_4]
.text:000020F1                 push    ecx             ; Src
.text:000020F2                 mov     ecx, [ebp+arg_0]
.text:000020F5                 call    ??0UString@@AAE@PB_WI0I@Z ; UString::UString(wchar_t const *,uint,wchar_t const *,uint)
.text:000020FA                 mov     edx, [ebp+var_4]
.text:000020FD                 or      edx, 1
.text:00002100                 mov     [ebp+var_4], edx
.text:00002103                 mov     eax, [ebp+arg_0]
.text:00002106                 add     esp, 4
.text:00002109                 cmp     ebp, esp
.text:0000210B                 call    __RTC_CheckEsp
.text:00002110                 mov     esp, ebp
.text:00002112                 pop     ebp
.text:00002113                 retn    0Ch
.text:00002113 ??H@YG?AVUString@@PB_WABV0@@Z endp
.text:00002113
.text:00002113 ; ---------------------------------------------------------------------------
.text:00002116                 align 10h
.text:00002120
.text:00002120 ; =============== S U B R O U T I N E =======================================
.text:00002120
.text:00002120 ; Attributes: bp-based frame
.text:00002120
.text:00002120 ; public: __thiscall UString::UString(void)
.text:00002120                 public ??0UString@@QAE@XZ
.text:00002120 ??0UString@@QAE@XZ proc near
.text:00002120
.text:00002120 var_8           = dword ptr -8
.text:00002120 var_4           = dword ptr -4
.text:00002120
.text:00002120                 push    ebp
.text:00002121                 mov     ebp, esp
.text:00002123                 sub     esp, 8
.text:00002126                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000212D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002134                 mov     [ebp+var_4], ecx
.text:00002137                 mov     eax, [ebp+var_4]
.text:0000213A                 mov     dword ptr [eax], 0
.text:00002140                 push    8               ; unsigned int
.text:00002142                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002147                 add     esp, 4
.text:0000214A                 mov     [ebp+var_8], eax
.text:0000214D                 mov     ecx, [ebp+var_4]
.text:00002150                 mov     edx, [ebp+var_8]
.text:00002153                 mov     [ecx], edx
.text:00002155                 mov     eax, [ebp+var_4]
.text:00002158                 mov     dword ptr [eax+4], 0
.text:0000215F                 mov     ecx, [ebp+var_4]
.text:00002162                 mov     dword ptr [ecx+8], 3
.text:00002169                 mov     edx, [ebp+var_4]
.text:0000216C                 mov     eax, [edx]
.text:0000216E                 xor     ecx, ecx
.text:00002170                 mov     [eax], cx
.text:00002173                 mov     eax, [ebp+var_4]
.text:00002176                 add     esp, 8
.text:00002179                 cmp     ebp, esp
.text:0000217B                 call    __RTC_CheckEsp
.text:00002180                 mov     esp, ebp
.text:00002182                 pop     ebp
.text:00002183                 retn
.text:00002183 ??0UString@@QAE@XZ endp
.text:00002183
.text:00002183 ; ---------------------------------------------------------------------------
.text:00002184                 align 10h
.text:00002190
.text:00002190 ; =============== S U B R O U T I N E =======================================
.text:00002190
.text:00002190 ; Attributes: bp-based frame
.text:00002190
.text:00002190 ; public: __thiscall UString::UString(wchar_t)
.text:00002190                 public ??0UString@@QAE@_W@Z
.text:00002190 ??0UString@@QAE@_W@Z proc near
.text:00002190
.text:00002190 var_4           = dword ptr -4
.text:00002190 arg_0           = word ptr  8
.text:00002190
.text:00002190                 push    ebp
.text:00002191                 mov     ebp, esp
.text:00002193                 push    ecx
.text:00002194                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000219B                 mov     [ebp+var_4], ecx
.text:0000219E                 push    1               ; unsigned int
.text:000021A0                 mov     ecx, [ebp+var_4] ; this
.text:000021A3                 call    ?SetStartLen@UString@@AAEXI@Z ; UString::SetStartLen(uint)
.text:000021A8                 mov     eax, [ebp+var_4]
.text:000021AB                 mov     ecx, [eax]
.text:000021AD                 mov     dx, [ebp+arg_0]
.text:000021B1                 mov     [ecx], dx
.text:000021B4                 mov     eax, [ebp+var_4]
.text:000021B7                 mov     ecx, [eax]
.text:000021B9                 xor     edx, edx
.text:000021BB                 mov     [ecx+2], dx
.text:000021BF                 mov     eax, [ebp+var_4]
.text:000021C2                 add     esp, 4
.text:000021C5                 cmp     ebp, esp
.text:000021C7                 call    __RTC_CheckEsp
.text:000021CC                 mov     esp, ebp
.text:000021CE                 pop     ebp
.text:000021CF                 retn    4
.text:000021CF ??0UString@@QAE@_W@Z endp
.text:000021CF
.text:000021CF ; ---------------------------------------------------------------------------
.text:000021D2                 align 10h
.text:000021E0
.text:000021E0 ; =============== S U B R O U T I N E =======================================
.text:000021E0
.text:000021E0 ; Attributes: bp-based frame
.text:000021E0
.text:000021E0 ; int __stdcall UString::UString(wchar_t *)
.text:000021E0                 public ??0UString@@QAE@PB_W@Z
.text:000021E0 ??0UString@@QAE@PB_W@Z proc near        ; CODE XREF: fs2fas(wchar_t const *)+44p
.text:000021E0
.text:000021E0 var_8           = dword ptr -8
.text:000021E0 var_4           = dword ptr -4
.text:000021E0 arg_0           = dword ptr  8
.text:000021E0
.text:000021E0                 push    ebp
.text:000021E1                 mov     ebp, esp
.text:000021E3                 sub     esp, 8
.text:000021E6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000021ED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000021F4                 mov     [ebp+var_4], ecx
.text:000021F7                 mov     eax, [ebp+arg_0]
.text:000021FA                 push    eax             ; wchar_t *
.text:000021FB                 call    ?MyStringLen@@YGIPB_W@Z ; MyStringLen(wchar_t const *)
.text:00002200                 mov     [ebp+var_8], eax
.text:00002203                 mov     ecx, [ebp+var_8]
.text:00002206                 push    ecx             ; unsigned int
.text:00002207                 mov     ecx, [ebp+var_4] ; this
.text:0000220A                 call    ?SetStartLen@UString@@AAEXI@Z ; UString::SetStartLen(uint)
.text:0000220F                 mov     edx, [ebp+var_8]
.text:00002212                 add     edx, 1
.text:00002215                 push    edx             ; int
.text:00002216                 mov     eax, [ebp+arg_0]
.text:00002219                 push    eax             ; Src
.text:0000221A                 mov     ecx, [ebp+var_4]
.text:0000221D                 mov     edx, [ecx]
.text:0000221F                 push    edx             ; Dst
.text:00002220                 call    _wmemcpy
.text:00002225                 add     esp, 0Ch
.text:00002228                 mov     eax, [ebp+var_4]
.text:0000222B                 add     esp, 8
.text:0000222E                 cmp     ebp, esp
.text:00002230                 call    __RTC_CheckEsp
.text:00002235                 mov     esp, ebp
.text:00002237                 pop     ebp
.text:00002238                 retn    4
.text:00002238 ??0UString@@QAE@PB_W@Z endp
.text:00002238
.text:00002238 ; ---------------------------------------------------------------------------
.text:0000223B                 align 10h
.text:00002240
.text:00002240 ; =============== S U B R O U T I N E =======================================
.text:00002240
.text:00002240 ; Attributes: bp-based frame
.text:00002240
.text:00002240 ; public: __thiscall UString::UString(class UString const &)
.text:00002240                 public ??0UString@@QAE@ABV0@@Z
.text:00002240 ??0UString@@QAE@ABV0@@Z proc near
.text:00002240
.text:00002240 var_4           = dword ptr -4
.text:00002240 arg_0           = dword ptr  8
.text:00002240
.text:00002240                 push    ebp
.text:00002241                 mov     ebp, esp
.text:00002243                 push    ecx
.text:00002244                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000224B                 mov     [ebp+var_4], ecx
.text:0000224E                 mov     eax, [ebp+arg_0]
.text:00002251                 mov     ecx, [eax+4]
.text:00002254                 push    ecx             ; unsigned int
.text:00002255                 mov     ecx, [ebp+var_4] ; this
.text:00002258                 call    ?SetStartLen@UString@@AAEXI@Z ; UString::SetStartLen(uint)
.text:0000225D                 mov     edx, [ebp+arg_0]
.text:00002260                 mov     eax, [edx+4]
.text:00002263                 add     eax, 1
.text:00002266                 push    eax             ; int
.text:00002267                 mov     ecx, [ebp+arg_0]
.text:0000226A                 mov     edx, [ecx]
.text:0000226C                 push    edx             ; Src
.text:0000226D                 mov     eax, [ebp+var_4]
.text:00002270                 mov     ecx, [eax]
.text:00002272                 push    ecx             ; Dst
.text:00002273                 call    _wmemcpy
.text:00002278                 add     esp, 0Ch
.text:0000227B                 mov     eax, [ebp+var_4]
.text:0000227E                 add     esp, 4
.text:00002281                 cmp     ebp, esp
.text:00002283                 call    __RTC_CheckEsp
.text:00002288                 mov     esp, ebp
.text:0000228A                 pop     ebp
.text:0000228B                 retn    4
.text:0000228B ??0UString@@QAE@ABV0@@Z endp
.text:0000228B
.text:0000228B ; ---------------------------------------------------------------------------
.text:0000228E                 align 10h
.text:00002290
.text:00002290 ; =============== S U B R O U T I N E =======================================
.text:00002290
.text:00002290 ; Attributes: bp-based frame
.text:00002290
.text:00002290 ; public: class UString & __thiscall UString::operator=(wchar_t)
.text:00002290                 public ??4UString@@QAEAAV0@_W@Z
.text:00002290 ??4UString@@QAEAAV0@_W@Z proc near
.text:00002290
.text:00002290 var_10          = dword ptr -10h
.text:00002290 var_C           = dword ptr -0Ch
.text:00002290 var_8           = dword ptr -8
.text:00002290 var_4           = dword ptr -4
.text:00002290 arg_0           = word ptr  8
.text:00002290
.text:00002290                 push    ebp
.text:00002291                 mov     ebp, esp
.text:00002293                 sub     esp, 10h
.text:00002296                 mov     eax, 0CCCCCCCCh
.text:0000229B                 mov     [ebp+var_10], eax
.text:0000229E                 mov     [ebp+var_C], eax
.text:000022A1                 mov     [ebp+var_8], eax
.text:000022A4                 mov     [ebp+var_4], eax
.text:000022A7                 mov     [ebp+var_4], ecx
.text:000022AA                 mov     eax, [ebp+var_4]
.text:000022AD                 cmp     dword ptr [eax+8], 1
.text:000022B1                 jnb     short loc_22EC
.text:000022B3                 push    4               ; unsigned int
.text:000022B5                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000022BA                 add     esp, 4
.text:000022BD                 mov     [ebp+var_C], eax
.text:000022C0                 mov     ecx, [ebp+var_C]
.text:000022C3                 mov     [ebp+var_8], ecx
.text:000022C6                 mov     edx, [ebp+var_4]
.text:000022C9                 mov     eax, [edx]
.text:000022CB                 mov     [ebp+var_10], eax
.text:000022CE                 mov     ecx, [ebp+var_10]
.text:000022D1                 push    ecx             ; void *
.text:000022D2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000022D7                 add     esp, 4
.text:000022DA                 mov     edx, [ebp+var_4]
.text:000022DD                 mov     eax, [ebp+var_8]
.text:000022E0                 mov     [edx], eax
.text:000022E2                 mov     ecx, [ebp+var_4]
.text:000022E5                 mov     dword ptr [ecx+8], 1
.text:000022EC
.text:000022EC loc_22EC:                               ; CODE XREF: UString::operator=(wchar_t)+21j
.text:000022EC                 mov     edx, [ebp+var_4]
.text:000022EF                 mov     dword ptr [edx+4], 1
.text:000022F6                 mov     eax, [ebp+var_4]
.text:000022F9                 mov     ecx, [eax]
.text:000022FB                 mov     dx, [ebp+arg_0]
.text:000022FF                 mov     [ecx], dx
.text:00002302                 mov     eax, [ebp+var_4]
.text:00002305                 mov     ecx, [eax]
.text:00002307                 xor     edx, edx
.text:00002309                 mov     [ecx+2], dx
.text:0000230D                 mov     eax, [ebp+var_4]
.text:00002310                 add     esp, 10h
.text:00002313                 cmp     ebp, esp
.text:00002315                 call    __RTC_CheckEsp
.text:0000231A                 mov     esp, ebp
.text:0000231C                 pop     ebp
.text:0000231D                 retn    4
.text:0000231D ??4UString@@QAEAAV0@_W@Z endp
.text:0000231D
.text:00002320
.text:00002320 ; =============== S U B R O U T I N E =======================================
.text:00002320
.text:00002320 ; Attributes: bp-based frame
.text:00002320
.text:00002320 ; int __stdcall UString::operator=(wchar_t *)
.text:00002320                 public ??4UString@@QAEAAV0@PB_W@Z
.text:00002320 ??4UString@@QAEAAV0@PB_W@Z proc near
.text:00002320
.text:00002320 var_14          = dword ptr -14h
.text:00002320 var_10          = dword ptr -10h
.text:00002320 var_C           = dword ptr -0Ch
.text:00002320 var_8           = dword ptr -8
.text:00002320 var_4           = dword ptr -4
.text:00002320 arg_0           = dword ptr  8
.text:00002320
.text:00002320                 push    ebp
.text:00002321                 mov     ebp, esp
.text:00002323                 sub     esp, 14h
.text:00002326                 mov     eax, 0CCCCCCCCh
.text:0000232B                 mov     [ebp+var_14], eax
.text:0000232E                 mov     [ebp+var_10], eax
.text:00002331                 mov     [ebp+var_C], eax
.text:00002334                 mov     [ebp+var_8], eax
.text:00002337                 mov     [ebp+var_4], eax
.text:0000233A                 mov     [ebp+var_4], ecx
.text:0000233D                 mov     eax, [ebp+arg_0]
.text:00002340                 push    eax             ; wchar_t *
.text:00002341                 call    ?MyStringLen@@YGIPB_W@Z ; MyStringLen(wchar_t const *)
.text:00002346                 mov     [ebp+var_8], eax
.text:00002349                 mov     ecx, [ebp+var_4]
.text:0000234C                 mov     edx, [ebp+var_8]
.text:0000234F                 cmp     edx, [ecx+8]
.text:00002352                 jbe     short loc_23A1
.text:00002354                 mov     eax, [ebp+var_8]
.text:00002357                 add     eax, 1
.text:0000235A                 xor     ecx, ecx
.text:0000235C                 mov     edx, 2
.text:00002361                 mul     edx
.text:00002363                 seto    cl
.text:00002366                 neg     ecx
.text:00002368                 or      ecx, eax
.text:0000236A                 push    ecx             ; unsigned int
.text:0000236B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002370                 add     esp, 4
.text:00002373                 mov     [ebp+var_10], eax
.text:00002376                 mov     eax, [ebp+var_10]
.text:00002379                 mov     [ebp+var_C], eax
.text:0000237C                 mov     ecx, [ebp+var_4]
.text:0000237F                 mov     edx, [ecx]
.text:00002381                 mov     [ebp+var_14], edx
.text:00002384                 mov     eax, [ebp+var_14]
.text:00002387                 push    eax             ; void *
.text:00002388                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000238D                 add     esp, 4
.text:00002390                 mov     ecx, [ebp+var_4]
.text:00002393                 mov     edx, [ebp+var_C]
.text:00002396                 mov     [ecx], edx
.text:00002398                 mov     eax, [ebp+var_4]
.text:0000239B                 mov     ecx, [ebp+var_8]
.text:0000239E                 mov     [eax+8], ecx
.text:000023A1
.text:000023A1 loc_23A1:                               ; CODE XREF: UString::operator=(wchar_t const *)+32j
.text:000023A1                 mov     edx, [ebp+var_4]
.text:000023A4                 mov     eax, [ebp+var_8]
.text:000023A7                 mov     [edx+4], eax
.text:000023AA                 mov     ecx, [ebp+var_8]
.text:000023AD                 add     ecx, 1
.text:000023B0                 push    ecx             ; int
.text:000023B1                 mov     edx, [ebp+arg_0]
.text:000023B4                 push    edx             ; Src
.text:000023B5                 mov     eax, [ebp+var_4]
.text:000023B8                 mov     ecx, [eax]
.text:000023BA                 push    ecx             ; Dst
.text:000023BB                 call    _wmemcpy
.text:000023C0                 add     esp, 0Ch
.text:000023C3                 mov     eax, [ebp+var_4]
.text:000023C6                 add     esp, 14h
.text:000023C9                 cmp     ebp, esp
.text:000023CB                 call    __RTC_CheckEsp
.text:000023D0                 mov     esp, ebp
.text:000023D2                 pop     ebp
.text:000023D3                 retn    4
.text:000023D3 ??4UString@@QAEAAV0@PB_W@Z endp
.text:000023D3
.text:000023D3 ; ---------------------------------------------------------------------------
.text:000023D6                 align 10h
.text:000023E0
.text:000023E0 ; =============== S U B R O U T I N E =======================================
.text:000023E0
.text:000023E0 ; Attributes: bp-based frame
.text:000023E0
.text:000023E0 ; public: class UString & __thiscall UString::operator=(class UString const &)
.text:000023E0                 public ??4UString@@QAEAAV0@ABV0@@Z
.text:000023E0 ??4UString@@QAEAAV0@ABV0@@Z proc near
.text:000023E0
.text:000023E0 var_14          = dword ptr -14h
.text:000023E0 var_10          = dword ptr -10h
.text:000023E0 var_C           = dword ptr -0Ch
.text:000023E0 var_8           = dword ptr -8
.text:000023E0 var_4           = dword ptr -4
.text:000023E0 arg_0           = dword ptr  8
.text:000023E0
.text:000023E0                 push    ebp
.text:000023E1                 mov     ebp, esp
.text:000023E3                 sub     esp, 14h
.text:000023E6                 mov     eax, 0CCCCCCCCh
.text:000023EB                 mov     [ebp+var_14], eax
.text:000023EE                 mov     [ebp+var_10], eax
.text:000023F1                 mov     [ebp+var_C], eax
.text:000023F4                 mov     [ebp+var_8], eax
.text:000023F7                 mov     [ebp+var_4], eax
.text:000023FA                 mov     [ebp+var_4], ecx
.text:000023FD                 mov     eax, [ebp+arg_0]
.text:00002400                 cmp     eax, [ebp+var_4]
.text:00002403                 jnz     short loc_240D
.text:00002405                 mov     eax, [ebp+var_4]
.text:00002408                 jmp     loc_2495
.text:0000240D ; ---------------------------------------------------------------------------
.text:0000240D
.text:0000240D loc_240D:                               ; CODE XREF: UString::operator=(UString const &)+23j
.text:0000240D                 mov     ecx, [ebp+arg_0]
.text:00002410                 mov     edx, [ecx+4]
.text:00002413                 mov     [ebp+var_8], edx
.text:00002416                 mov     eax, [ebp+var_4]
.text:00002419                 mov     ecx, [ebp+var_8]
.text:0000241C                 cmp     ecx, [eax+8]
.text:0000241F                 jbe     short loc_246E
.text:00002421                 mov     eax, [ebp+var_8]
.text:00002424                 add     eax, 1
.text:00002427                 xor     ecx, ecx
.text:00002429                 mov     edx, 2
.text:0000242E                 mul     edx
.text:00002430                 seto    cl
.text:00002433                 neg     ecx
.text:00002435                 or      ecx, eax
.text:00002437                 push    ecx             ; unsigned int
.text:00002438                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000243D                 add     esp, 4
.text:00002440                 mov     [ebp+var_10], eax
.text:00002443                 mov     eax, [ebp+var_10]
.text:00002446                 mov     [ebp+var_C], eax
.text:00002449                 mov     ecx, [ebp+var_4]
.text:0000244C                 mov     edx, [ecx]
.text:0000244E                 mov     [ebp+var_14], edx
.text:00002451                 mov     eax, [ebp+var_14]
.text:00002454                 push    eax             ; void *
.text:00002455                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000245A                 add     esp, 4
.text:0000245D                 mov     ecx, [ebp+var_4]
.text:00002460                 mov     edx, [ebp+var_C]
.text:00002463                 mov     [ecx], edx
.text:00002465                 mov     eax, [ebp+var_4]
.text:00002468                 mov     ecx, [ebp+var_8]
.text:0000246B                 mov     [eax+8], ecx
.text:0000246E
.text:0000246E loc_246E:                               ; CODE XREF: UString::operator=(UString const &)+3Fj
.text:0000246E                 mov     edx, [ebp+var_4]
.text:00002471                 mov     eax, [ebp+var_8]
.text:00002474                 mov     [edx+4], eax
.text:00002477                 mov     ecx, [ebp+var_8]
.text:0000247A                 add     ecx, 1
.text:0000247D                 push    ecx             ; int
.text:0000247E                 mov     edx, [ebp+arg_0]
.text:00002481                 mov     eax, [edx]
.text:00002483                 push    eax             ; Src
.text:00002484                 mov     ecx, [ebp+var_4]
.text:00002487                 mov     edx, [ecx]
.text:00002489                 push    edx             ; Dst
.text:0000248A                 call    _wmemcpy
.text:0000248F                 add     esp, 0Ch
.text:00002492                 mov     eax, [ebp+var_4]
.text:00002495
.text:00002495 loc_2495:                               ; CODE XREF: UString::operator=(UString const &)+28j
.text:00002495                 add     esp, 14h
.text:00002498                 cmp     ebp, esp
.text:0000249A                 call    __RTC_CheckEsp
.text:0000249F                 mov     esp, ebp
.text:000024A1                 pop     ebp
.text:000024A2                 retn    4
.text:000024A2 ??4UString@@QAEAAV0@ABV0@@Z endp
.text:000024A2
.text:000024A2 ; ---------------------------------------------------------------------------
.text:000024A5                 align 10h
.text:000024B0
.text:000024B0 ; =============== S U B R O U T I N E =======================================
.text:000024B0
.text:000024B0 ; Attributes: bp-based frame
.text:000024B0
.text:000024B0 ; void __thiscall UString::SetFromBstr(UString *this, wchar_t *)
.text:000024B0                 public ?SetFromBstr@UString@@QAEXPA_W@Z
.text:000024B0 ?SetFromBstr@UString@@QAEXPA_W@Z proc near
.text:000024B0
.text:000024B0 var_14          = dword ptr -14h
.text:000024B0 var_10          = dword ptr -10h
.text:000024B0 var_C           = dword ptr -0Ch
.text:000024B0 var_8           = dword ptr -8
.text:000024B0 var_4           = dword ptr -4
.text:000024B0 arg_0           = dword ptr  8
.text:000024B0
.text:000024B0                 push    ebp
.text:000024B1                 mov     ebp, esp
.text:000024B3                 sub     esp, 14h
.text:000024B6                 push    esi
.text:000024B7                 mov     eax, 0CCCCCCCCh
.text:000024BC                 mov     [ebp+var_14], eax
.text:000024BF                 mov     [ebp+var_10], eax
.text:000024C2                 mov     [ebp+var_C], eax
.text:000024C5                 mov     [ebp+var_8], eax
.text:000024C8                 mov     [ebp+var_4], eax
.text:000024CB                 mov     [ebp+var_4], ecx
.text:000024CE                 mov     esi, esp
.text:000024D0                 mov     eax, [ebp+arg_0]
.text:000024D3                 push    eax             ; BSTR
.text:000024D4                 call    dword ptr ds:__imp__SysStringLen@4 ; SysStringLen(x)
.text:000024DA                 cmp     esi, esp
.text:000024DC                 call    __RTC_CheckEsp
.text:000024E1                 mov     [ebp+var_8], eax
.text:000024E4                 mov     ecx, [ebp+var_4]
.text:000024E7                 mov     edx, [ebp+var_8]
.text:000024EA                 cmp     edx, [ecx+8]
.text:000024ED                 jbe     short loc_253C
.text:000024EF                 mov     eax, [ebp+var_8]
.text:000024F2                 add     eax, 1
.text:000024F5                 xor     ecx, ecx
.text:000024F7                 mov     edx, 2
.text:000024FC                 mul     edx
.text:000024FE                 seto    cl
.text:00002501                 neg     ecx
.text:00002503                 or      ecx, eax
.text:00002505                 push    ecx             ; unsigned int
.text:00002506                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000250B                 add     esp, 4
.text:0000250E                 mov     [ebp+var_10], eax
.text:00002511                 mov     eax, [ebp+var_10]
.text:00002514                 mov     [ebp+var_C], eax
.text:00002517                 mov     ecx, [ebp+var_4]
.text:0000251A                 mov     edx, [ecx]
.text:0000251C                 mov     [ebp+var_14], edx
.text:0000251F                 mov     eax, [ebp+var_14]
.text:00002522                 push    eax             ; void *
.text:00002523                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002528                 add     esp, 4
.text:0000252B                 mov     ecx, [ebp+var_4]
.text:0000252E                 mov     edx, [ebp+var_C]
.text:00002531                 mov     [ecx], edx
.text:00002533                 mov     eax, [ebp+var_4]
.text:00002536                 mov     ecx, [ebp+var_8]
.text:00002539                 mov     [eax+8], ecx
.text:0000253C
.text:0000253C loc_253C:                               ; CODE XREF: UString::SetFromBstr(wchar_t *)+3Dj
.text:0000253C                 mov     edx, [ebp+var_4]
.text:0000253F                 mov     eax, [ebp+var_8]
.text:00002542                 mov     [edx+4], eax
.text:00002545                 mov     ecx, [ebp+var_8]
.text:00002548                 add     ecx, 1
.text:0000254B                 push    ecx             ; int
.text:0000254C                 mov     edx, [ebp+arg_0]
.text:0000254F                 push    edx             ; Src
.text:00002550                 mov     eax, [ebp+var_4]
.text:00002553                 mov     ecx, [eax]
.text:00002555                 push    ecx             ; Dst
.text:00002556                 call    _wmemcpy
.text:0000255B                 add     esp, 0Ch
.text:0000255E                 pop     esi
.text:0000255F                 add     esp, 14h
.text:00002562                 cmp     ebp, esp
.text:00002564                 call    __RTC_CheckEsp
.text:00002569                 mov     esp, ebp
.text:0000256B                 pop     ebp
.text:0000256C                 retn    4
.text:0000256C ?SetFromBstr@UString@@QAEXPA_W@Z endp
.text:0000256C
.text:0000256C ; ---------------------------------------------------------------------------
.text:0000256F                 align 10h
.text:00002570
.text:00002570 ; =============== S U B R O U T I N E =======================================
.text:00002570
.text:00002570 ; Attributes: bp-based frame
.text:00002570
.text:00002570 ; void __thiscall UString::Add_Space(UString *__hidden this)
.text:00002570                 public ?Add_Space@UString@@QAEXXZ
.text:00002570 ?Add_Space@UString@@QAEXXZ proc near    ; CODE XREF: UString::Add_Space_if_NotEmpty(void)+20p
.text:00002570
.text:00002570 var_4           = dword ptr -4
.text:00002570
.text:00002570                 push    ebp
.text:00002571                 mov     ebp, esp
.text:00002573                 push    ecx
.text:00002574                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000257B                 mov     [ebp+var_4], ecx
.text:0000257E                 push    20h ; ' '
.text:00002580                 mov     ecx, [ebp+var_4]
.text:00002583                 call    ??YUString@@QAEAAV0@_W@Z ; UString::operator+=(wchar_t)
.text:00002588                 add     esp, 4
.text:0000258B                 cmp     ebp, esp
.text:0000258D                 call    __RTC_CheckEsp
.text:00002592                 mov     esp, ebp
.text:00002594                 pop     ebp
.text:00002595                 retn
.text:00002595 ?Add_Space@UString@@QAEXXZ endp
.text:00002595
.text:00002595 ; ---------------------------------------------------------------------------
.text:00002596                 align 10h
.text:000025A0
.text:000025A0 ; =============== S U B R O U T I N E =======================================
.text:000025A0
.text:000025A0 ; Attributes: bp-based frame
.text:000025A0
.text:000025A0 ; void __thiscall UString::Add_Space_if_NotEmpty(UString *__hidden this)
.text:000025A0                 public ?Add_Space_if_NotEmpty@UString@@QAEXXZ
.text:000025A0 ?Add_Space_if_NotEmpty@UString@@QAEXXZ proc near
.text:000025A0
.text:000025A0 var_4           = dword ptr -4
.text:000025A0
.text:000025A0                 push    ebp
.text:000025A1                 mov     ebp, esp
.text:000025A3                 push    ecx
.text:000025A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025AB                 mov     [ebp+var_4], ecx
.text:000025AE                 mov     ecx, [ebp+var_4] ; this
.text:000025B1                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:000025B6                 movzx   eax, al
.text:000025B9                 test    eax, eax
.text:000025BB                 jnz     short loc_25C5
.text:000025BD                 mov     ecx, [ebp+var_4] ; this
.text:000025C0                 call    ?Add_Space@UString@@QAEXXZ ; UString::Add_Space(void)
.text:000025C5
.text:000025C5 loc_25C5:                               ; CODE XREF: UString::Add_Space_if_NotEmpty(void)+1Bj
.text:000025C5                 add     esp, 4
.text:000025C8                 cmp     ebp, esp
.text:000025CA                 call    __RTC_CheckEsp
.text:000025CF                 mov     esp, ebp
.text:000025D1                 pop     ebp
.text:000025D2                 retn
.text:000025D2 ?Add_Space_if_NotEmpty@UString@@QAEXXZ endp
.text:000025D2
.text:000025D2 ; ---------------------------------------------------------------------------
.text:000025D3                 align 10h
.text:000025E0
.text:000025E0 ; =============== S U B R O U T I N E =======================================
.text:000025E0
.text:000025E0 ; Attributes: bp-based frame
.text:000025E0
.text:000025E0 ; void __thiscall UString::Add_LF(UString *__hidden this)
.text:000025E0                 public ?Add_LF@UString@@QAEXXZ
.text:000025E0 ?Add_LF@UString@@QAEXXZ proc near
.text:000025E0
.text:000025E0 var_C           = dword ptr -0Ch
.text:000025E0 var_8           = dword ptr -8
.text:000025E0 var_4           = dword ptr -4
.text:000025E0
.text:000025E0                 push    ebp
.text:000025E1                 mov     ebp, esp
.text:000025E3                 sub     esp, 0Ch
.text:000025E6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000025ED                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000025F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025FB                 mov     [ebp+var_4], ecx
.text:000025FE                 mov     eax, [ebp+var_4]
.text:00002601                 mov     ecx, [ebp+var_4]
.text:00002604                 mov     edx, [eax+8]
.text:00002607                 cmp     edx, [ecx+4]
.text:0000260A                 jnz     short loc_2614
.text:0000260C                 mov     ecx, [ebp+var_4] ; this
.text:0000260F                 call    ?Grow_1@UString@@AAEXXZ ; UString::Grow_1(void)
.text:00002614
.text:00002614 loc_2614:                               ; CODE XREF: UString::Add_LF(void)+2Aj
.text:00002614                 mov     eax, [ebp+var_4]
.text:00002617                 mov     ecx, [eax+4]
.text:0000261A                 mov     [ebp+var_8], ecx
.text:0000261D                 mov     edx, [ebp+var_4]
.text:00002620                 mov     eax, [edx]
.text:00002622                 mov     [ebp+var_C], eax
.text:00002625                 mov     ecx, 0Ah
.text:0000262A                 mov     edx, [ebp+var_8]
.text:0000262D                 mov     eax, [ebp+var_C]
.text:00002630                 mov     [eax+edx*2], cx
.text:00002634                 mov     ecx, [ebp+var_8]
.text:00002637                 add     ecx, 1
.text:0000263A                 mov     [ebp+var_8], ecx
.text:0000263D                 xor     edx, edx
.text:0000263F                 mov     eax, [ebp+var_8]
.text:00002642                 mov     ecx, [ebp+var_C]
.text:00002645                 mov     [ecx+eax*2], dx
.text:00002649                 mov     edx, [ebp+var_4]
.text:0000264C                 mov     eax, [ebp+var_8]
.text:0000264F                 mov     [edx+4], eax
.text:00002652                 add     esp, 0Ch
.text:00002655                 cmp     ebp, esp
.text:00002657                 call    __RTC_CheckEsp
.text:0000265C                 mov     esp, ebp
.text:0000265E                 pop     ebp
.text:0000265F                 retn
.text:0000265F ?Add_LF@UString@@QAEXXZ endp
.text:0000265F
.text:00002660
.text:00002660 ; =============== S U B R O U T I N E =======================================
.text:00002660
.text:00002660 ; Attributes: bp-based frame
.text:00002660
.text:00002660 ; int __stdcall UString::operator+=(wchar_t *)
.text:00002660                 public ??YUString@@QAEAAV0@PB_W@Z
.text:00002660 ??YUString@@QAEAAV0@PB_W@Z proc near
.text:00002660
.text:00002660 var_8           = dword ptr -8
.text:00002660 var_4           = dword ptr -4
.text:00002660 arg_0           = dword ptr  8
.text:00002660
.text:00002660                 push    ebp
.text:00002661                 mov     ebp, esp
.text:00002663                 sub     esp, 8
.text:00002666                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000266D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002674                 mov     [ebp+var_4], ecx
.text:00002677                 mov     eax, [ebp+arg_0]
.text:0000267A                 push    eax             ; wchar_t *
.text:0000267B                 call    ?MyStringLen@@YGIPB_W@Z ; MyStringLen(wchar_t const *)
.text:00002680                 mov     [ebp+var_8], eax
.text:00002683                 mov     ecx, [ebp+var_8]
.text:00002686                 push    ecx             ; unsigned int
.text:00002687                 mov     ecx, [ebp+var_4] ; this
.text:0000268A                 call    ?Grow@UString@@AAEXI@Z ; UString::Grow(uint)
.text:0000268F                 mov     edx, [ebp+var_8]
.text:00002692                 add     edx, 1
.text:00002695                 push    edx             ; int
.text:00002696                 mov     eax, [ebp+arg_0]
.text:00002699                 push    eax             ; Src
.text:0000269A                 mov     ecx, [ebp+var_4]
.text:0000269D                 mov     edx, [ecx+4]
.text:000026A0                 mov     eax, [ebp+var_4]
.text:000026A3                 mov     ecx, [eax]
.text:000026A5                 lea     edx, [ecx+edx*2]
.text:000026A8                 push    edx             ; Dst
.text:000026A9                 call    _wmemcpy
.text:000026AE                 add     esp, 0Ch
.text:000026B1                 mov     eax, [ebp+var_4]
.text:000026B4                 mov     ecx, [eax+4]
.text:000026B7                 add     ecx, [ebp+var_8]
.text:000026BA                 mov     edx, [ebp+var_4]
.text:000026BD                 mov     [edx+4], ecx
.text:000026C0                 mov     eax, [ebp+var_4]
.text:000026C3                 add     esp, 8
.text:000026C6                 cmp     ebp, esp
.text:000026C8                 call    __RTC_CheckEsp
.text:000026CD                 mov     esp, ebp
.text:000026CF                 pop     ebp
.text:000026D0                 retn    4
.text:000026D0 ??YUString@@QAEAAV0@PB_W@Z endp
.text:000026D0
.text:000026D0 ; ---------------------------------------------------------------------------
.text:000026D3                 align 10h
.text:000026E0
.text:000026E0 ; =============== S U B R O U T I N E =======================================
.text:000026E0
.text:000026E0 ; Attributes: bp-based frame
.text:000026E0
.text:000026E0 ; public: class UString & __thiscall UString::operator+=(class UString const &)
.text:000026E0                 public ??YUString@@QAEAAV0@ABV0@@Z
.text:000026E0 ??YUString@@QAEAAV0@ABV0@@Z proc near
.text:000026E0
.text:000026E0 var_4           = dword ptr -4
.text:000026E0 arg_0           = dword ptr  8
.text:000026E0
.text:000026E0                 push    ebp
.text:000026E1                 mov     ebp, esp
.text:000026E3                 push    ecx
.text:000026E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000026EB                 mov     [ebp+var_4], ecx
.text:000026EE                 mov     eax, [ebp+arg_0]
.text:000026F1                 mov     ecx, [eax+4]
.text:000026F4                 push    ecx             ; unsigned int
.text:000026F5                 mov     ecx, [ebp+var_4] ; this
.text:000026F8                 call    ?Grow@UString@@AAEXI@Z ; UString::Grow(uint)
.text:000026FD                 mov     edx, [ebp+arg_0]
.text:00002700                 mov     eax, [edx+4]
.text:00002703                 add     eax, 1
.text:00002706                 push    eax             ; int
.text:00002707                 mov     ecx, [ebp+arg_0]
.text:0000270A                 mov     edx, [ecx]
.text:0000270C                 push    edx             ; Src
.text:0000270D                 mov     eax, [ebp+var_4]
.text:00002710                 mov     ecx, [eax+4]
.text:00002713                 mov     edx, [ebp+var_4]
.text:00002716                 mov     eax, [edx]
.text:00002718                 lea     ecx, [eax+ecx*2]
.text:0000271B                 push    ecx             ; Dst
.text:0000271C                 call    _wmemcpy
.text:00002721                 add     esp, 0Ch
.text:00002724                 mov     edx, [ebp+var_4]
.text:00002727                 mov     eax, [edx+4]
.text:0000272A                 mov     ecx, [ebp+arg_0]
.text:0000272D                 add     eax, [ecx+4]
.text:00002730                 mov     edx, [ebp+var_4]
.text:00002733                 mov     [edx+4], eax
.text:00002736                 mov     eax, [ebp+var_4]
.text:00002739                 add     esp, 4
.text:0000273C                 cmp     ebp, esp
.text:0000273E                 call    __RTC_CheckEsp
.text:00002743                 mov     esp, ebp
.text:00002745                 pop     ebp
.text:00002746                 retn    4
.text:00002746 ??YUString@@QAEAAV0@ABV0@@Z endp
.text:00002746
.text:00002746 ; ---------------------------------------------------------------------------
.text:00002749                 align 10h
.text:00002750
.text:00002750 ; =============== S U B R O U T I N E =======================================
.text:00002750
.text:00002750 ; Attributes: bp-based frame
.text:00002750
.text:00002750 ; void __thiscall UString::SetFrom(UString *this, const wchar_t *Src, unsigned int)
.text:00002750                 public ?SetFrom@UString@@QAEXPB_WI@Z
.text:00002750 ?SetFrom@UString@@QAEXPB_WI@Z proc near
.text:00002750
.text:00002750 var_10          = dword ptr -10h
.text:00002750 var_C           = dword ptr -0Ch
.text:00002750 var_8           = dword ptr -8
.text:00002750 var_4           = dword ptr -4
.text:00002750 Src             = dword ptr  8
.text:00002750 arg_4           = dword ptr  0Ch
.text:00002750
.text:00002750                 push    ebp
.text:00002751                 mov     ebp, esp
.text:00002753                 sub     esp, 10h
.text:00002756                 mov     eax, 0CCCCCCCCh
.text:0000275B                 mov     [ebp+var_10], eax
.text:0000275E                 mov     [ebp+var_C], eax
.text:00002761                 mov     [ebp+var_8], eax
.text:00002764                 mov     [ebp+var_4], eax
.text:00002767                 mov     [ebp+var_4], ecx
.text:0000276A                 mov     eax, [ebp+var_4]
.text:0000276D                 mov     ecx, [ebp+arg_4]
.text:00002770                 cmp     ecx, [eax+8]
.text:00002773                 jbe     short loc_27C2
.text:00002775                 mov     eax, [ebp+arg_4]
.text:00002778                 add     eax, 1
.text:0000277B                 xor     ecx, ecx
.text:0000277D                 mov     edx, 2
.text:00002782                 mul     edx
.text:00002784                 seto    cl
.text:00002787                 neg     ecx
.text:00002789                 or      ecx, eax
.text:0000278B                 push    ecx             ; unsigned int
.text:0000278C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002791                 add     esp, 4
.text:00002794                 mov     [ebp+var_C], eax
.text:00002797                 mov     eax, [ebp+var_C]
.text:0000279A                 mov     [ebp+var_8], eax
.text:0000279D                 mov     ecx, [ebp+var_4]
.text:000027A0                 mov     edx, [ecx]
.text:000027A2                 mov     [ebp+var_10], edx
.text:000027A5                 mov     eax, [ebp+var_10]
.text:000027A8                 push    eax             ; void *
.text:000027A9                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000027AE                 add     esp, 4
.text:000027B1                 mov     ecx, [ebp+var_4]
.text:000027B4                 mov     edx, [ebp+var_8]
.text:000027B7                 mov     [ecx], edx
.text:000027B9                 mov     eax, [ebp+var_4]
.text:000027BC                 mov     ecx, [ebp+arg_4]
.text:000027BF                 mov     [eax+8], ecx
.text:000027C2
.text:000027C2 loc_27C2:                               ; CODE XREF: UString::SetFrom(wchar_t const *,uint)+23j
.text:000027C2                 cmp     [ebp+arg_4], 0
.text:000027C6                 jz      short loc_27DE
.text:000027C8                 mov     edx, [ebp+arg_4]
.text:000027CB                 push    edx             ; int
.text:000027CC                 mov     eax, [ebp+Src]
.text:000027CF                 push    eax             ; Src
.text:000027D0                 mov     ecx, [ebp+var_4]
.text:000027D3                 mov     edx, [ecx]
.text:000027D5                 push    edx             ; Dst
.text:000027D6                 call    _wmemcpy
.text:000027DB                 add     esp, 0Ch
.text:000027DE
.text:000027DE loc_27DE:                               ; CODE XREF: UString::SetFrom(wchar_t const *,uint)+76j
.text:000027DE                 mov     eax, [ebp+var_4]
.text:000027E1                 mov     ecx, [eax]
.text:000027E3                 xor     edx, edx
.text:000027E5                 mov     eax, [ebp+arg_4]
.text:000027E8                 mov     [ecx+eax*2], dx
.text:000027EC                 mov     ecx, [ebp+var_4]
.text:000027EF                 mov     edx, [ebp+arg_4]
.text:000027F2                 mov     [ecx+4], edx
.text:000027F5                 add     esp, 10h
.text:000027F8                 cmp     ebp, esp
.text:000027FA                 call    __RTC_CheckEsp
.text:000027FF                 mov     esp, ebp
.text:00002801                 pop     ebp
.text:00002802                 retn    8
.text:00002802 ?SetFrom@UString@@QAEXPB_WI@Z endp
.text:00002802
.text:00002802 ; ---------------------------------------------------------------------------
.text:00002805                 align 10h
.text:00002810
.text:00002810 ; =============== S U B R O U T I N E =======================================
.text:00002810
.text:00002810 ; Attributes: bp-based frame
.text:00002810
.text:00002810 ; void __thiscall UString::SetFromAscii(UString *this, const char *)
.text:00002810                 public ?SetFromAscii@UString@@QAEXPBD@Z
.text:00002810 ?SetFromAscii@UString@@QAEXPBD@Z proc near
.text:00002810
.text:00002810 var_1C          = dword ptr -1Ch
.text:00002810 var_18          = dword ptr -18h
.text:00002810 var_14          = dword ptr -14h
.text:00002810 var_10          = dword ptr -10h
.text:00002810 var_C           = dword ptr -0Ch
.text:00002810 var_8           = dword ptr -8
.text:00002810 var_4           = dword ptr -4
.text:00002810 arg_0           = dword ptr  8
.text:00002810
.text:00002810                 push    ebp
.text:00002811                 mov     ebp, esp
.text:00002813                 sub     esp, 1Ch
.text:00002816                 mov     eax, 0CCCCCCCCh
.text:0000281B                 mov     [ebp+var_1C], eax
.text:0000281E                 mov     [ebp+var_18], eax
.text:00002821                 mov     [ebp+var_14], eax
.text:00002824                 mov     [ebp+var_10], eax
.text:00002827                 mov     [ebp+var_C], eax
.text:0000282A                 mov     [ebp+var_8], eax
.text:0000282D                 mov     [ebp+var_4], eax
.text:00002830                 mov     [ebp+var_4], ecx
.text:00002833                 mov     eax, [ebp+arg_0]
.text:00002836                 push    eax             ; char *
.text:00002837                 call    ?MyStringLen@@YGIPBD@Z ; MyStringLen(char const *)
.text:0000283C                 mov     [ebp+var_8], eax
.text:0000283F                 mov     ecx, [ebp+var_4]
.text:00002842                 mov     edx, [ebp+var_8]
.text:00002845                 cmp     edx, [ecx+8]
.text:00002848                 jbe     short loc_2897
.text:0000284A                 mov     eax, [ebp+var_8]
.text:0000284D                 add     eax, 1
.text:00002850                 xor     ecx, ecx
.text:00002852                 mov     edx, 2
.text:00002857                 mul     edx
.text:00002859                 seto    cl
.text:0000285C                 neg     ecx
.text:0000285E                 or      ecx, eax
.text:00002860                 push    ecx             ; unsigned int
.text:00002861                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002866                 add     esp, 4
.text:00002869                 mov     [ebp+var_18], eax
.text:0000286C                 mov     eax, [ebp+var_18]
.text:0000286F                 mov     [ebp+var_C], eax
.text:00002872                 mov     ecx, [ebp+var_4]
.text:00002875                 mov     edx, [ecx]
.text:00002877                 mov     [ebp+var_1C], edx
.text:0000287A                 mov     eax, [ebp+var_1C]
.text:0000287D                 push    eax             ; void *
.text:0000287E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002883                 add     esp, 4
.text:00002886                 mov     ecx, [ebp+var_4]
.text:00002889                 mov     edx, [ebp+var_C]
.text:0000288C                 mov     [ecx], edx
.text:0000288E                 mov     eax, [ebp+var_4]
.text:00002891                 mov     ecx, [ebp+var_8]
.text:00002894                 mov     [eax+8], ecx
.text:00002897
.text:00002897 loc_2897:                               ; CODE XREF: UString::SetFromAscii(char const *)+38j
.text:00002897                 mov     edx, [ebp+var_4]
.text:0000289A                 mov     eax, [edx]
.text:0000289C                 mov     [ebp+var_10], eax
.text:0000289F                 mov     [ebp+var_14], 0
.text:000028A6                 jmp     short loc_28B1
.text:000028A8 ; ---------------------------------------------------------------------------
.text:000028A8
.text:000028A8 loc_28A8:                               ; CODE XREF: UString::SetFromAscii(char const *)+BDj
.text:000028A8                 mov     ecx, [ebp+var_14]
.text:000028AB                 add     ecx, 1
.text:000028AE                 mov     [ebp+var_14], ecx
.text:000028B1
.text:000028B1 loc_28B1:                               ; CODE XREF: UString::SetFromAscii(char const *)+96j
.text:000028B1                 mov     edx, [ebp+var_14]
.text:000028B4                 cmp     edx, [ebp+var_8]
.text:000028B7                 jnb     short loc_28CF
.text:000028B9                 mov     eax, [ebp+arg_0]
.text:000028BC                 add     eax, [ebp+var_14]
.text:000028BF                 movzx   cx, byte ptr [eax]
.text:000028C3                 mov     edx, [ebp+var_14]
.text:000028C6                 mov     eax, [ebp+var_10]
.text:000028C9                 mov     [eax+edx*2], cx
.text:000028CD                 jmp     short loc_28A8
.text:000028CF ; ---------------------------------------------------------------------------
.text:000028CF
.text:000028CF loc_28CF:                               ; CODE XREF: UString::SetFromAscii(char const *)+A7j
.text:000028CF                 xor     ecx, ecx
.text:000028D1                 mov     edx, [ebp+var_8]
.text:000028D4                 mov     eax, [ebp+var_10]
.text:000028D7                 mov     [eax+edx*2], cx
.text:000028DB                 mov     ecx, [ebp+var_4]
.text:000028DE                 mov     edx, [ebp+var_8]
.text:000028E1                 mov     [ecx+4], edx
.text:000028E4                 add     esp, 1Ch
.text:000028E7                 cmp     ebp, esp
.text:000028E9                 call    __RTC_CheckEsp
.text:000028EE                 mov     esp, ebp
.text:000028F0                 pop     ebp
.text:000028F1                 retn    4
.text:000028F1 ?SetFromAscii@UString@@QAEXPBD@Z endp
.text:000028F1
.text:000028F1 ; ---------------------------------------------------------------------------
.text:000028F4                 align 10h
.text:00002900
.text:00002900 ; =============== S U B R O U T I N E =======================================
.text:00002900
.text:00002900 ; Attributes: bp-based frame
.text:00002900
.text:00002900 ; void __thiscall UString::AddAscii(UString *this, const char *)
.text:00002900                 public ?AddAscii@UString@@QAEXPBD@Z
.text:00002900 ?AddAscii@UString@@QAEXPBD@Z proc near
.text:00002900
.text:00002900 var_10          = dword ptr -10h
.text:00002900 var_C           = dword ptr -0Ch
.text:00002900 var_8           = dword ptr -8
.text:00002900 var_4           = dword ptr -4
.text:00002900 arg_0           = dword ptr  8
.text:00002900
.text:00002900                 push    ebp
.text:00002901                 mov     ebp, esp
.text:00002903                 sub     esp, 10h
.text:00002906                 mov     eax, 0CCCCCCCCh
.text:0000290B                 mov     [ebp+var_10], eax
.text:0000290E                 mov     [ebp+var_C], eax
.text:00002911                 mov     [ebp+var_8], eax
.text:00002914                 mov     [ebp+var_4], eax
.text:00002917                 mov     [ebp+var_4], ecx
.text:0000291A                 mov     eax, [ebp+arg_0]
.text:0000291D                 push    eax             ; char *
.text:0000291E                 call    ?MyStringLen@@YGIPBD@Z ; MyStringLen(char const *)
.text:00002923                 mov     [ebp+var_8], eax
.text:00002926                 mov     ecx, [ebp+var_8]
.text:00002929                 push    ecx             ; unsigned int
.text:0000292A                 mov     ecx, [ebp+var_4] ; this
.text:0000292D                 call    ?Grow@UString@@AAEXI@Z ; UString::Grow(uint)
.text:00002932                 mov     edx, [ebp+var_4]
.text:00002935                 mov     eax, [edx+4]
.text:00002938                 mov     ecx, [ebp+var_4]
.text:0000293B                 mov     edx, [ecx]
.text:0000293D                 lea     eax, [edx+eax*2]
.text:00002940                 mov     [ebp+var_C], eax
.text:00002943                 mov     [ebp+var_10], 0
.text:0000294A                 jmp     short loc_2955
.text:0000294C ; ---------------------------------------------------------------------------
.text:0000294C
.text:0000294C loc_294C:                               ; CODE XREF: UString::AddAscii(char const *)+71j
.text:0000294C                 mov     ecx, [ebp+var_10]
.text:0000294F                 add     ecx, 1
.text:00002952                 mov     [ebp+var_10], ecx
.text:00002955
.text:00002955 loc_2955:                               ; CODE XREF: UString::AddAscii(char const *)+4Aj
.text:00002955                 mov     edx, [ebp+var_10]
.text:00002958                 cmp     edx, [ebp+var_8]
.text:0000295B                 jnb     short loc_2973
.text:0000295D                 mov     eax, [ebp+arg_0]
.text:00002960                 add     eax, [ebp+var_10]
.text:00002963                 movzx   cx, byte ptr [eax]
.text:00002967                 mov     edx, [ebp+var_10]
.text:0000296A                 mov     eax, [ebp+var_C]
.text:0000296D                 mov     [eax+edx*2], cx
.text:00002971                 jmp     short loc_294C
.text:00002973 ; ---------------------------------------------------------------------------
.text:00002973
.text:00002973 loc_2973:                               ; CODE XREF: UString::AddAscii(char const *)+5Bj
.text:00002973                 xor     ecx, ecx
.text:00002975                 mov     edx, [ebp+var_8]
.text:00002978                 mov     eax, [ebp+var_C]
.text:0000297B                 mov     [eax+edx*2], cx
.text:0000297F                 mov     ecx, [ebp+var_4]
.text:00002982                 mov     edx, [ecx+4]
.text:00002985                 add     edx, [ebp+var_8]
.text:00002988                 mov     eax, [ebp+var_4]
.text:0000298B                 mov     [eax+4], edx
.text:0000298E                 add     esp, 10h
.text:00002991                 cmp     ebp, esp
.text:00002993                 call    __RTC_CheckEsp
.text:00002998                 mov     esp, ebp
.text:0000299A                 pop     ebp
.text:0000299B                 retn    4
.text:0000299B ?AddAscii@UString@@QAEXPBD@Z endp
.text:0000299B
.text:0000299B ; ---------------------------------------------------------------------------
.text:0000299E                 align 10h
.text:000029A0
.text:000029A0 ; =============== S U B R O U T I N E =======================================
.text:000029A0
.text:000029A0 ; Attributes: bp-based frame
.text:000029A0
.text:000029A0 ; int __thiscall UString::Find(UString *this, const wchar_t *SubStr, unsigned int)
.text:000029A0                 public ?Find@UString@@QBEHPB_WI@Z
.text:000029A0 ?Find@UString@@QBEHPB_WI@Z proc near    ; CODE XREF: UString::Replace(UString const &,UString const &)+7Cp
.text:000029A0
.text:000029A0 var_8           = dword ptr -8
.text:000029A0 var_4           = dword ptr -4
.text:000029A0 SubStr          = dword ptr  8
.text:000029A0 arg_4           = dword ptr  0Ch
.text:000029A0
.text:000029A0                 push    ebp
.text:000029A1                 mov     ebp, esp
.text:000029A3                 sub     esp, 8
.text:000029A6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000029AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000029B4                 mov     [ebp+var_4], ecx
.text:000029B7                 mov     eax, [ebp+SubStr]
.text:000029BA                 push    eax             ; SubStr
.text:000029BB                 mov     ecx, [ebp+var_4]
.text:000029BE                 mov     edx, [ecx]
.text:000029C0                 mov     eax, [ebp+arg_4]
.text:000029C3                 lea     ecx, [edx+eax*2]
.text:000029C6                 push    ecx             ; Str
.text:000029C7                 call    ?wcsstr@@YAPA_WPA_WPB_W@Z ; wcsstr(wchar_t *,wchar_t const *)
.text:000029CC                 add     esp, 8
.text:000029CF                 mov     [ebp+var_8], eax
.text:000029D2                 cmp     [ebp+var_8], 0
.text:000029D6                 jnz     short loc_29DD
.text:000029D8                 or      eax, 0FFFFFFFFh
.text:000029DB                 jmp     short loc_29E7
.text:000029DD ; ---------------------------------------------------------------------------
.text:000029DD
.text:000029DD loc_29DD:                               ; CODE XREF: UString::Find(wchar_t const *,uint)+36j
.text:000029DD                 mov     edx, [ebp+var_4]
.text:000029E0                 mov     eax, [ebp+var_8]
.text:000029E3                 sub     eax, [edx]
.text:000029E5                 sar     eax, 1
.text:000029E7
.text:000029E7 loc_29E7:                               ; CODE XREF: UString::Find(wchar_t const *,uint)+3Bj
.text:000029E7                 add     esp, 8
.text:000029EA                 cmp     ebp, esp
.text:000029EC                 call    __RTC_CheckEsp
.text:000029F1                 mov     esp, ebp
.text:000029F3                 pop     ebp
.text:000029F4                 retn    8
.text:000029F4 ?Find@UString@@QBEHPB_WI@Z endp
.text:000029F4
.text:000029F4 ; ---------------------------------------------------------------------------
.text:000029F7                 align 10h
.text:00002A00
.text:00002A00 ; =============== S U B R O U T I N E =======================================
.text:00002A00
.text:00002A00 ; Attributes: bp-based frame
.text:00002A00
.text:00002A00 ; int __thiscall UString::ReverseFind(UString *this, wchar_t)
.text:00002A00                 public ?ReverseFind@UString@@QBEH_W@Z
.text:00002A00 ?ReverseFind@UString@@QBEH_W@Z proc near
.text:00002A00
.text:00002A00 var_8           = dword ptr -8
.text:00002A00 var_4           = dword ptr -4
.text:00002A00 arg_0           = word ptr  8
.text:00002A00
.text:00002A00                 push    ebp
.text:00002A01                 mov     ebp, esp
.text:00002A03                 sub     esp, 8
.text:00002A06                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002A0D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A14                 mov     [ebp+var_4], ecx
.text:00002A17                 mov     eax, [ebp+var_4]
.text:00002A1A                 cmp     dword ptr [eax+4], 0
.text:00002A1E                 jnz     short loc_2A25
.text:00002A20                 or      eax, 0FFFFFFFFh
.text:00002A23                 jmp     short loc_2A6D
.text:00002A25 ; ---------------------------------------------------------------------------
.text:00002A25
.text:00002A25 loc_2A25:                               ; CODE XREF: UString::ReverseFind(wchar_t)+1Ej
.text:00002A25                 mov     ecx, [ebp+var_4]
.text:00002A28                 mov     edx, [ecx+4]
.text:00002A2B                 mov     eax, [ebp+var_4]
.text:00002A2E                 mov     ecx, [eax]
.text:00002A30                 lea     edx, [ecx+edx*2-2]
.text:00002A34                 mov     [ebp+var_8], edx
.text:00002A37
.text:00002A37 loc_2A37:                               ; CODE XREF: UString::ReverseFind(wchar_t)+6Bj
.text:00002A37                 mov     eax, [ebp+var_8]
.text:00002A3A                 movzx   ecx, word ptr [eax]
.text:00002A3D                 movzx   edx, [ebp+arg_0]
.text:00002A41                 cmp     ecx, edx
.text:00002A43                 jnz     short loc_2A53
.text:00002A45                 mov     eax, [ebp+var_4]
.text:00002A48                 mov     ecx, [ebp+var_8]
.text:00002A4B                 sub     ecx, [eax]
.text:00002A4D                 sar     ecx, 1
.text:00002A4F                 mov     eax, ecx
.text:00002A51                 jmp     short loc_2A6D
.text:00002A53 ; ---------------------------------------------------------------------------
.text:00002A53
.text:00002A53 loc_2A53:                               ; CODE XREF: UString::ReverseFind(wchar_t)+43j
.text:00002A53                 mov     edx, [ebp+var_4]
.text:00002A56                 mov     eax, [ebp+var_8]
.text:00002A59                 cmp     eax, [edx]
.text:00002A5B                 jnz     short loc_2A62
.text:00002A5D                 or      eax, 0FFFFFFFFh
.text:00002A60                 jmp     short loc_2A6D
.text:00002A62 ; ---------------------------------------------------------------------------
.text:00002A62
.text:00002A62 loc_2A62:                               ; CODE XREF: UString::ReverseFind(wchar_t)+5Bj
.text:00002A62                 mov     ecx, [ebp+var_8]
.text:00002A65                 sub     ecx, 2
.text:00002A68                 mov     [ebp+var_8], ecx
.text:00002A6B                 jmp     short loc_2A37
.text:00002A6D ; ---------------------------------------------------------------------------
.text:00002A6D
.text:00002A6D loc_2A6D:                               ; CODE XREF: UString::ReverseFind(wchar_t)+23j
.text:00002A6D                                         ; UString::ReverseFind(wchar_t)+51j ...
.text:00002A6D                 mov     esp, ebp
.text:00002A6F                 pop     ebp
.text:00002A70                 retn    4
.text:00002A70 ?ReverseFind@UString@@QBEH_W@Z endp
.text:00002A70
.text:00002A70 ; ---------------------------------------------------------------------------
.text:00002A73                 align 10h
.text:00002A80
.text:00002A80 ; =============== S U B R O U T I N E =======================================
.text:00002A80
.text:00002A80 ; Attributes: bp-based frame
.text:00002A80
.text:00002A80 ; int __thiscall UString::ReverseFind_PathSepar(UString *__hidden this)
.text:00002A80                 public ?ReverseFind_PathSepar@UString@@QBEHXZ
.text:00002A80 ?ReverseFind_PathSepar@UString@@QBEHXZ proc near
.text:00002A80
.text:00002A80 var_C           = dword ptr -0Ch
.text:00002A80 var_8           = dword ptr -8
.text:00002A80 var_4           = dword ptr -4
.text:00002A80
.text:00002A80                 push    ebp
.text:00002A81                 mov     ebp, esp
.text:00002A83                 sub     esp, 0Ch
.text:00002A86                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00002A8D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002A94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A9B                 mov     [ebp+var_4], ecx
.text:00002A9E                 mov     eax, [ebp+var_4]
.text:00002AA1                 cmp     dword ptr [eax+4], 0
.text:00002AA5                 jnz     short loc_2AAC
.text:00002AA7                 or      eax, 0FFFFFFFFh
.text:00002AAA                 jmp     short loc_2B00
.text:00002AAC ; ---------------------------------------------------------------------------
.text:00002AAC
.text:00002AAC loc_2AAC:                               ; CODE XREF: UString::ReverseFind_PathSepar(void)+25j
.text:00002AAC                 mov     ecx, [ebp+var_4]
.text:00002AAF                 mov     edx, [ecx+4]
.text:00002AB2                 mov     eax, [ebp+var_4]
.text:00002AB5                 mov     ecx, [eax]
.text:00002AB7                 lea     edx, [ecx+edx*2-2]
.text:00002ABB                 mov     [ebp+var_8], edx
.text:00002ABE
.text:00002ABE loc_2ABE:                               ; CODE XREF: UString::ReverseFind_PathSepar(void)+7Ej
.text:00002ABE                 mov     eax, [ebp+var_8]
.text:00002AC1                 mov     cx, [eax]
.text:00002AC4                 mov     word ptr [ebp+var_C], cx
.text:00002AC8                 movzx   edx, word ptr [ebp+var_C]
.text:00002ACC                 cmp     edx, 5Ch ; '\'
.text:00002ACF                 jz      short loc_2ADA
.text:00002AD1                 movzx   eax, word ptr [ebp+var_C]
.text:00002AD5                 cmp     eax, 2Fh ; '/'
.text:00002AD8                 jnz     short loc_2AE6
.text:00002ADA
.text:00002ADA loc_2ADA:                               ; CODE XREF: UString::ReverseFind_PathSepar(void)+4Fj
.text:00002ADA                 mov     ecx, [ebp+var_4]
.text:00002ADD                 mov     eax, [ebp+var_8]
.text:00002AE0                 sub     eax, [ecx]
.text:00002AE2                 sar     eax, 1
.text:00002AE4                 jmp     short loc_2B00
.text:00002AE6 ; ---------------------------------------------------------------------------
.text:00002AE6
.text:00002AE6 loc_2AE6:                               ; CODE XREF: UString::ReverseFind_PathSepar(void)+58j
.text:00002AE6                 mov     edx, [ebp+var_4]
.text:00002AE9                 mov     eax, [ebp+var_8]
.text:00002AEC                 cmp     eax, [edx]
.text:00002AEE                 jnz     short loc_2AF5
.text:00002AF0                 or      eax, 0FFFFFFFFh
.text:00002AF3                 jmp     short loc_2B00
.text:00002AF5 ; ---------------------------------------------------------------------------
.text:00002AF5
.text:00002AF5 loc_2AF5:                               ; CODE XREF: UString::ReverseFind_PathSepar(void)+6Ej
.text:00002AF5                 mov     ecx, [ebp+var_8]
.text:00002AF8                 sub     ecx, 2
.text:00002AFB                 mov     [ebp+var_8], ecx
.text:00002AFE                 jmp     short loc_2ABE
.text:00002B00 ; ---------------------------------------------------------------------------
.text:00002B00
.text:00002B00 loc_2B00:                               ; CODE XREF: UString::ReverseFind_PathSepar(void)+2Aj
.text:00002B00                                         ; UString::ReverseFind_PathSepar(void)+64j ...
.text:00002B00                 mov     esp, ebp
.text:00002B02                 pop     ebp
.text:00002B03                 retn
.text:00002B03 ?ReverseFind_PathSepar@UString@@QBEHXZ endp
.text:00002B03
.text:00002B03 ; ---------------------------------------------------------------------------
.text:00002B04                 align 10h
.text:00002B10
.text:00002B10 ; =============== S U B R O U T I N E =======================================
.text:00002B10
.text:00002B10 ; Attributes: bp-based frame
.text:00002B10
.text:00002B10 ; void __thiscall UString::TrimLeft(UString *__hidden this)
.text:00002B10                 public ?TrimLeft@UString@@QAEXXZ
.text:00002B10 ?TrimLeft@UString@@QAEXXZ proc near
.text:00002B10
.text:00002B10 var_10          = dword ptr -10h
.text:00002B10 var_C           = dword ptr -0Ch
.text:00002B10 var_8           = dword ptr -8
.text:00002B10 var_4           = dword ptr -4
.text:00002B10
.text:00002B10                 push    ebp
.text:00002B11                 mov     ebp, esp
.text:00002B13                 sub     esp, 10h
.text:00002B16                 mov     eax, 0CCCCCCCCh
.text:00002B1B                 mov     [ebp+var_10], eax
.text:00002B1E                 mov     [ebp+var_C], eax
.text:00002B21                 mov     [ebp+var_8], eax
.text:00002B24                 mov     [ebp+var_4], eax
.text:00002B27                 mov     [ebp+var_4], ecx
.text:00002B2A                 mov     eax, [ebp+var_4]
.text:00002B2D                 mov     ecx, [eax]
.text:00002B2F                 mov     [ebp+var_8], ecx
.text:00002B32                 jmp     short loc_2B3D
.text:00002B34 ; ---------------------------------------------------------------------------
.text:00002B34
.text:00002B34 loc_2B34:                               ; CODE XREF: UString::TrimLeft(void):loc_2B64j
.text:00002B34                 mov     edx, [ebp+var_8]
.text:00002B37                 add     edx, 2
.text:00002B3A                 mov     [ebp+var_8], edx
.text:00002B3D
.text:00002B3D loc_2B3D:                               ; CODE XREF: UString::TrimLeft(void)+22j
.text:00002B3D                 mov     eax, [ebp+var_8]
.text:00002B40                 mov     cx, [eax]
.text:00002B43                 mov     word ptr [ebp+var_C], cx
.text:00002B47                 movzx   edx, word ptr [ebp+var_C]
.text:00002B4B                 cmp     edx, 20h ; ' '
.text:00002B4E                 jz      short loc_2B64
.text:00002B50                 movzx   eax, word ptr [ebp+var_C]
.text:00002B54                 cmp     eax, 0Ah
.text:00002B57                 jz      short loc_2B64
.text:00002B59                 movzx   ecx, word ptr [ebp+var_C]
.text:00002B5D                 cmp     ecx, 9
.text:00002B60                 jz      short loc_2B64
.text:00002B62                 jmp     short loc_2B66
.text:00002B64 ; ---------------------------------------------------------------------------
.text:00002B64
.text:00002B64 loc_2B64:                               ; CODE XREF: UString::TrimLeft(void)+3Ej
.text:00002B64                                         ; UString::TrimLeft(void)+47j ...
.text:00002B64                 jmp     short loc_2B34
.text:00002B66 ; ---------------------------------------------------------------------------
.text:00002B66
.text:00002B66 loc_2B66:                               ; CODE XREF: UString::TrimLeft(void)+52j
.text:00002B66                 mov     edx, [ebp+var_4]
.text:00002B69                 mov     eax, [ebp+var_8]
.text:00002B6C                 sub     eax, [edx]
.text:00002B6E                 sar     eax, 1
.text:00002B70                 mov     [ebp+var_10], eax
.text:00002B73                 jz      short loc_2B92
.text:00002B75                 mov     ecx, [ebp+var_10]
.text:00002B78                 push    ecx             ; unsigned int
.text:00002B79                 push    0               ; unsigned int
.text:00002B7B                 mov     ecx, [ebp+var_4] ; this
.text:00002B7E                 call    ?MoveItems@UString@@AAEXII@Z ; UString::MoveItems(uint,uint)
.text:00002B83                 mov     edx, [ebp+var_4]
.text:00002B86                 mov     eax, [edx+4]
.text:00002B89                 sub     eax, [ebp+var_10]
.text:00002B8C                 mov     ecx, [ebp+var_4]
.text:00002B8F                 mov     [ecx+4], eax
.text:00002B92
.text:00002B92 loc_2B92:                               ; CODE XREF: UString::TrimLeft(void)+63j
.text:00002B92                 add     esp, 10h
.text:00002B95                 cmp     ebp, esp
.text:00002B97                 call    __RTC_CheckEsp
.text:00002B9C                 mov     esp, ebp
.text:00002B9E                 pop     ebp
.text:00002B9F                 retn
.text:00002B9F ?TrimLeft@UString@@QAEXXZ endp
.text:00002B9F
.text:00002BA0
.text:00002BA0 ; =============== S U B R O U T I N E =======================================
.text:00002BA0
.text:00002BA0 ; Attributes: bp-based frame
.text:00002BA0
.text:00002BA0 ; void __thiscall UString::TrimRight(UString *__hidden this)
.text:00002BA0                 public ?TrimRight@UString@@QAEXXZ
.text:00002BA0 ?TrimRight@UString@@QAEXXZ proc near
.text:00002BA0
.text:00002BA0 var_10          = dword ptr -10h
.text:00002BA0 var_C           = dword ptr -0Ch
.text:00002BA0 var_8           = dword ptr -8
.text:00002BA0 var_4           = dword ptr -4
.text:00002BA0
.text:00002BA0                 push    ebp
.text:00002BA1                 mov     ebp, esp
.text:00002BA3                 sub     esp, 10h
.text:00002BA6                 mov     eax, 0CCCCCCCCh
.text:00002BAB                 mov     [ebp+var_10], eax
.text:00002BAE                 mov     [ebp+var_C], eax
.text:00002BB1                 mov     [ebp+var_8], eax
.text:00002BB4                 mov     [ebp+var_4], eax
.text:00002BB7                 mov     [ebp+var_4], ecx
.text:00002BBA                 mov     eax, [ebp+var_4]
.text:00002BBD                 mov     ecx, [eax]
.text:00002BBF                 mov     [ebp+var_8], ecx
.text:00002BC2                 mov     edx, [ebp+var_4]
.text:00002BC5                 mov     eax, [edx+4]
.text:00002BC8                 mov     [ebp+var_C], eax
.text:00002BCB                 jmp     short loc_2BD6
.text:00002BCD ; ---------------------------------------------------------------------------
.text:00002BCD
.text:00002BCD loc_2BCD:                               ; CODE XREF: UString::TrimRight(void):loc_2C08j
.text:00002BCD                 mov     ecx, [ebp+var_C]
.text:00002BD0                 sub     ecx, 1
.text:00002BD3                 mov     [ebp+var_C], ecx
.text:00002BD6
.text:00002BD6 loc_2BD6:                               ; CODE XREF: UString::TrimRight(void)+2Bj
.text:00002BD6                 cmp     [ebp+var_C], 0
.text:00002BDA                 jz      short loc_2C0A
.text:00002BDC                 mov     edx, [ebp+var_C]
.text:00002BDF                 mov     eax, [ebp+var_8]
.text:00002BE2                 mov     cx, [eax+edx*2-2]
.text:00002BE7                 mov     word ptr [ebp+var_10], cx
.text:00002BEB                 movzx   edx, word ptr [ebp+var_10]
.text:00002BEF                 cmp     edx, 20h ; ' '
.text:00002BF2                 jz      short loc_2C08
.text:00002BF4                 movzx   eax, word ptr [ebp+var_10]
.text:00002BF8                 cmp     eax, 0Ah
.text:00002BFB                 jz      short loc_2C08
.text:00002BFD                 movzx   ecx, word ptr [ebp+var_10]
.text:00002C01                 cmp     ecx, 9
.text:00002C04                 jz      short loc_2C08
.text:00002C06                 jmp     short loc_2C0A
.text:00002C08 ; ---------------------------------------------------------------------------
.text:00002C08
.text:00002C08 loc_2C08:                               ; CODE XREF: UString::TrimRight(void)+52j
.text:00002C08                                         ; UString::TrimRight(void)+5Bj ...
.text:00002C08                 jmp     short loc_2BCD
.text:00002C0A ; ---------------------------------------------------------------------------
.text:00002C0A
.text:00002C0A loc_2C0A:                               ; CODE XREF: UString::TrimRight(void)+3Aj
.text:00002C0A                                         ; UString::TrimRight(void)+66j
.text:00002C0A                 mov     edx, [ebp+var_4]
.text:00002C0D                 mov     eax, [ebp+var_C]
.text:00002C10                 cmp     eax, [edx+4]
.text:00002C13                 jz      short loc_2C2C
.text:00002C15                 mov     ecx, [ebp+var_4]
.text:00002C18                 mov     edx, [ecx]
.text:00002C1A                 xor     eax, eax
.text:00002C1C                 mov     ecx, [ebp+var_C]
.text:00002C1F                 mov     [edx+ecx*2], ax
.text:00002C23                 mov     edx, [ebp+var_4]
.text:00002C26                 mov     eax, [ebp+var_C]
.text:00002C29                 mov     [edx+4], eax
.text:00002C2C
.text:00002C2C loc_2C2C:                               ; CODE XREF: UString::TrimRight(void)+73j
.text:00002C2C                 mov     esp, ebp
.text:00002C2E                 pop     ebp
.text:00002C2F                 retn
.text:00002C2F ?TrimRight@UString@@QAEXXZ endp
.text:00002C2F
.text:00002C30
.text:00002C30 ; =============== S U B R O U T I N E =======================================
.text:00002C30
.text:00002C30 ; Attributes: bp-based frame
.text:00002C30
.text:00002C30 ; void __thiscall UString::InsertAtFront(UString *this, wchar_t)
.text:00002C30                 public ?InsertAtFront@UString@@QAEX_W@Z
.text:00002C30 ?InsertAtFront@UString@@QAEX_W@Z proc near
.text:00002C30
.text:00002C30 var_4           = dword ptr -4
.text:00002C30 arg_0           = word ptr  8
.text:00002C30
.text:00002C30                 push    ebp
.text:00002C31                 mov     ebp, esp
.text:00002C33                 push    ecx
.text:00002C34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C3B                 mov     [ebp+var_4], ecx
.text:00002C3E                 mov     eax, [ebp+var_4]
.text:00002C41                 mov     ecx, [ebp+var_4]
.text:00002C44                 mov     edx, [eax+8]
.text:00002C47                 cmp     edx, [ecx+4]
.text:00002C4A                 jnz     short loc_2C54
.text:00002C4C                 mov     ecx, [ebp+var_4] ; this
.text:00002C4F                 call    ?Grow_1@UString@@AAEXXZ ; UString::Grow_1(void)
.text:00002C54
.text:00002C54 loc_2C54:                               ; CODE XREF: UString::InsertAtFront(wchar_t)+1Aj
.text:00002C54                 push    0               ; unsigned int
.text:00002C56                 push    1               ; unsigned int
.text:00002C58                 mov     ecx, [ebp+var_4] ; this
.text:00002C5B                 call    ?MoveItems@UString@@AAEXII@Z ; UString::MoveItems(uint,uint)
.text:00002C60                 mov     eax, [ebp+var_4]
.text:00002C63                 mov     ecx, [eax]
.text:00002C65                 mov     dx, [ebp+arg_0]
.text:00002C69                 mov     [ecx], dx
.text:00002C6C                 mov     eax, [ebp+var_4]
.text:00002C6F                 mov     ecx, [eax+4]
.text:00002C72                 add     ecx, 1
.text:00002C75                 mov     edx, [ebp+var_4]
.text:00002C78                 mov     [edx+4], ecx
.text:00002C7B                 add     esp, 4
.text:00002C7E                 cmp     ebp, esp
.text:00002C80                 call    __RTC_CheckEsp
.text:00002C85                 mov     esp, ebp
.text:00002C87                 pop     ebp
.text:00002C88                 retn    4
.text:00002C88 ?InsertAtFront@UString@@QAEX_W@Z endp
.text:00002C88
.text:00002C88 ; ---------------------------------------------------------------------------
.text:00002C8B                 align 10h
.text:00002C90
.text:00002C90 ; =============== S U B R O U T I N E =======================================
.text:00002C90
.text:00002C90 ; Attributes: bp-based frame
.text:00002C90
.text:00002C90 ; void __thiscall UString::Insert(UString *this, unsigned int, const wchar_t *)
.text:00002C90                 public ?Insert@UString@@QAEXIPB_W@Z
.text:00002C90 ?Insert@UString@@QAEXIPB_W@Z proc near
.text:00002C90
.text:00002C90 var_8           = dword ptr -8
.text:00002C90 var_4           = dword ptr -4
.text:00002C90 arg_0           = dword ptr  8
.text:00002C90 arg_4           = dword ptr  0Ch
.text:00002C90
.text:00002C90                 push    ebp
.text:00002C91                 mov     ebp, esp
.text:00002C93                 sub     esp, 8
.text:00002C96                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002C9D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002CA4                 mov     [ebp+var_4], ecx
.text:00002CA7                 mov     eax, [ebp+arg_4]
.text:00002CAA                 push    eax             ; wchar_t *
.text:00002CAB                 call    ?MyStringLen@@YGIPB_W@Z ; MyStringLen(wchar_t const *)
.text:00002CB0                 mov     [ebp+var_8], eax
.text:00002CB3                 cmp     [ebp+var_8], 0
.text:00002CB7                 jz      short loc_2CF4
.text:00002CB9                 mov     ecx, [ebp+var_8]
.text:00002CBC                 push    ecx             ; unsigned int
.text:00002CBD                 mov     edx, [ebp+arg_0]
.text:00002CC0                 push    edx             ; unsigned int
.text:00002CC1                 mov     ecx, [ebp+var_4] ; this
.text:00002CC4                 call    ?InsertSpace@UString@@AAEXII@Z ; UString::InsertSpace(uint,uint)
.text:00002CC9                 mov     eax, [ebp+var_8]
.text:00002CCC                 push    eax             ; int
.text:00002CCD                 mov     ecx, [ebp+arg_4]
.text:00002CD0                 push    ecx             ; Src
.text:00002CD1                 mov     edx, [ebp+var_4]
.text:00002CD4                 mov     eax, [edx]
.text:00002CD6                 mov     ecx, [ebp+arg_0]
.text:00002CD9                 lea     edx, [eax+ecx*2]
.text:00002CDC                 push    edx             ; Dst
.text:00002CDD                 call    _wmemcpy
.text:00002CE2                 add     esp, 0Ch
.text:00002CE5                 mov     eax, [ebp+var_4]
.text:00002CE8                 mov     ecx, [eax+4]
.text:00002CEB                 add     ecx, [ebp+var_8]
.text:00002CEE                 mov     edx, [ebp+var_4]
.text:00002CF1                 mov     [edx+4], ecx
.text:00002CF4
.text:00002CF4 loc_2CF4:                               ; CODE XREF: UString::Insert(uint,wchar_t const *)+27j
.text:00002CF4                 add     esp, 8
.text:00002CF7                 cmp     ebp, esp
.text:00002CF9                 call    __RTC_CheckEsp
.text:00002CFE                 mov     esp, ebp
.text:00002D00                 pop     ebp
.text:00002D01                 retn    8
.text:00002D01 ?Insert@UString@@QAEXIPB_W@Z endp
.text:00002D01
.text:00002D01 ; ---------------------------------------------------------------------------
.text:00002D04                 align 10h
.text:00002D10
.text:00002D10 ; =============== S U B R O U T I N E =======================================
.text:00002D10
.text:00002D10 ; Attributes: bp-based frame
.text:00002D10
.text:00002D10 ; void __thiscall UString::Insert(UString *this, unsigned int, const struct UString *)
.text:00002D10                 public ?Insert@UString@@QAEXIABV1@@Z
.text:00002D10 ?Insert@UString@@QAEXIABV1@@Z proc near ; CODE XREF: UString::Replace(UString const &,UString const &)+A7p
.text:00002D10
.text:00002D10 var_8           = dword ptr -8
.text:00002D10 var_4           = dword ptr -4
.text:00002D10 arg_0           = dword ptr  8
.text:00002D10 arg_4           = dword ptr  0Ch
.text:00002D10
.text:00002D10                 push    ebp
.text:00002D11                 mov     ebp, esp
.text:00002D13                 sub     esp, 8
.text:00002D16                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002D1D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D24                 mov     [ebp+var_4], ecx
.text:00002D27                 mov     ecx, [ebp+arg_4] ; this
.text:00002D2A                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00002D2F                 mov     [ebp+var_8], eax
.text:00002D32                 cmp     [ebp+var_8], 0
.text:00002D36                 jz      short loc_2D78
.text:00002D38                 mov     eax, [ebp+var_8]
.text:00002D3B                 push    eax             ; unsigned int
.text:00002D3C                 mov     ecx, [ebp+arg_0]
.text:00002D3F                 push    ecx             ; unsigned int
.text:00002D40                 mov     ecx, [ebp+var_4] ; this
.text:00002D43                 call    ?InsertSpace@UString@@AAEXII@Z ; UString::InsertSpace(uint,uint)
.text:00002D48                 mov     edx, [ebp+var_8]
.text:00002D4B                 push    edx             ; int
.text:00002D4C                 mov     ecx, [ebp+arg_4]
.text:00002D4F                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002D54                 push    eax             ; Src
.text:00002D55                 mov     eax, [ebp+var_4]
.text:00002D58                 mov     ecx, [eax]
.text:00002D5A                 mov     edx, [ebp+arg_0]
.text:00002D5D                 lea     eax, [ecx+edx*2]
.text:00002D60                 push    eax             ; Dst
.text:00002D61                 call    _wmemcpy
.text:00002D66                 add     esp, 0Ch
.text:00002D69                 mov     ecx, [ebp+var_4]
.text:00002D6C                 mov     edx, [ecx+4]
.text:00002D6F                 add     edx, [ebp+var_8]
.text:00002D72                 mov     eax, [ebp+var_4]
.text:00002D75                 mov     [eax+4], edx
.text:00002D78
.text:00002D78 loc_2D78:                               ; CODE XREF: UString::Insert(uint,UString const &)+26j
.text:00002D78                 add     esp, 8
.text:00002D7B                 cmp     ebp, esp
.text:00002D7D                 call    __RTC_CheckEsp
.text:00002D82                 mov     esp, ebp
.text:00002D84                 pop     ebp
.text:00002D85                 retn    8
.text:00002D85 ?Insert@UString@@QAEXIABV1@@Z endp
.text:00002D85
.text:00002D85 ; ---------------------------------------------------------------------------
.text:00002D88                 align 10h
.text:00002D90
.text:00002D90 ; =============== S U B R O U T I N E =======================================
.text:00002D90
.text:00002D90 ; Attributes: bp-based frame
.text:00002D90
.text:00002D90 ; void __thiscall UString::RemoveChar(UString *this, wchar_t)
.text:00002D90                 public ?RemoveChar@UString@@QAEX_W@Z
.text:00002D90 ?RemoveChar@UString@@QAEX_W@Z proc near
.text:00002D90
.text:00002D90 var_14          = dword ptr -14h
.text:00002D90 var_10          = dword ptr -10h
.text:00002D90 var_C           = dword ptr -0Ch
.text:00002D90 var_8           = dword ptr -8
.text:00002D90 var_4           = dword ptr -4
.text:00002D90 arg_0           = word ptr  8
.text:00002D90
.text:00002D90                 push    ebp
.text:00002D91                 mov     ebp, esp
.text:00002D93                 sub     esp, 14h
.text:00002D96                 mov     eax, 0CCCCCCCCh
.text:00002D9B                 mov     [ebp+var_14], eax
.text:00002D9E                 mov     [ebp+var_10], eax
.text:00002DA1                 mov     [ebp+var_C], eax
.text:00002DA4                 mov     [ebp+var_8], eax
.text:00002DA7                 mov     [ebp+var_4], eax
.text:00002DAA                 mov     [ebp+var_4], ecx
.text:00002DAD                 mov     eax, [ebp+var_4]
.text:00002DB0                 mov     ecx, [eax]
.text:00002DB2                 mov     [ebp+var_8], ecx
.text:00002DB5
.text:00002DB5 loc_2DB5:                               ; CODE XREF: UString::RemoveChar(wchar_t):loc_2DE0j
.text:00002DB5                 mov     edx, [ebp+var_8]
.text:00002DB8                 mov     ax, [edx]
.text:00002DBB                 mov     word ptr [ebp+var_C], ax
.text:00002DBF                 mov     ecx, [ebp+var_8]
.text:00002DC2                 add     ecx, 2
.text:00002DC5                 mov     [ebp+var_8], ecx
.text:00002DC8                 movzx   edx, word ptr [ebp+var_C]
.text:00002DCC                 test    edx, edx
.text:00002DCE                 jnz     short loc_2DD2
.text:00002DD0                 jmp     short loc_2E41
.text:00002DD2 ; ---------------------------------------------------------------------------
.text:00002DD2
.text:00002DD2 loc_2DD2:                               ; CODE XREF: UString::RemoveChar(wchar_t)+3Ej
.text:00002DD2                 movzx   eax, word ptr [ebp+var_C]
.text:00002DD6                 movzx   ecx, [ebp+arg_0]
.text:00002DDA                 cmp     eax, ecx
.text:00002DDC                 jnz     short loc_2DE0
.text:00002DDE                 jmp     short loc_2DE2
.text:00002DE0 ; ---------------------------------------------------------------------------
.text:00002DE0
.text:00002DE0 loc_2DE0:                               ; CODE XREF: UString::RemoveChar(wchar_t)+4Cj
.text:00002DE0                 jmp     short loc_2DB5
.text:00002DE2 ; ---------------------------------------------------------------------------
.text:00002DE2
.text:00002DE2 loc_2DE2:                               ; CODE XREF: UString::RemoveChar(wchar_t)+4Ej
.text:00002DE2                 mov     edx, [ebp+var_8]
.text:00002DE5                 sub     edx, 2
.text:00002DE8                 mov     [ebp+var_10], edx
.text:00002DEB
.text:00002DEB loc_2DEB:                               ; CODE XREF: UString::RemoveChar(wchar_t):loc_2E27j
.text:00002DEB                 mov     eax, [ebp+var_8]
.text:00002DEE                 mov     cx, [eax]
.text:00002DF1                 mov     word ptr [ebp+var_14], cx
.text:00002DF5                 mov     edx, [ebp+var_8]
.text:00002DF8                 add     edx, 2
.text:00002DFB                 mov     [ebp+var_8], edx
.text:00002DFE                 movzx   eax, word ptr [ebp+var_14]
.text:00002E02                 test    eax, eax
.text:00002E04                 jnz     short loc_2E08
.text:00002E06                 jmp     short loc_2E29
.text:00002E08 ; ---------------------------------------------------------------------------
.text:00002E08
.text:00002E08 loc_2E08:                               ; CODE XREF: UString::RemoveChar(wchar_t)+74j
.text:00002E08                 movzx   ecx, word ptr [ebp+var_14]
.text:00002E0C                 movzx   edx, [ebp+arg_0]
.text:00002E10                 cmp     ecx, edx
.text:00002E12                 jz      short loc_2E27
.text:00002E14                 mov     eax, [ebp+var_10]
.text:00002E17                 mov     cx, word ptr [ebp+var_14]
.text:00002E1B                 mov     [eax], cx
.text:00002E1E                 mov     edx, [ebp+var_10]
.text:00002E21                 add     edx, 2
.text:00002E24                 mov     [ebp+var_10], edx
.text:00002E27
.text:00002E27 loc_2E27:                               ; CODE XREF: UString::RemoveChar(wchar_t)+82j
.text:00002E27                 jmp     short loc_2DEB
.text:00002E29 ; ---------------------------------------------------------------------------
.text:00002E29
.text:00002E29 loc_2E29:                               ; CODE XREF: UString::RemoveChar(wchar_t)+76j
.text:00002E29                 xor     eax, eax
.text:00002E2B                 mov     ecx, [ebp+var_10]
.text:00002E2E                 mov     [ecx], ax
.text:00002E31                 mov     edx, [ebp+var_4]
.text:00002E34                 mov     eax, [ebp+var_10]
.text:00002E37                 sub     eax, [edx]
.text:00002E39                 sar     eax, 1
.text:00002E3B                 mov     ecx, [ebp+var_4]
.text:00002E3E                 mov     [ecx+4], eax
.text:00002E41
.text:00002E41 loc_2E41:                               ; CODE XREF: UString::RemoveChar(wchar_t)+40j
.text:00002E41                 mov     esp, ebp
.text:00002E43                 pop     ebp
.text:00002E44                 retn    4
.text:00002E44 ?RemoveChar@UString@@QAEX_W@Z endp
.text:00002E44
.text:00002E44 ; ---------------------------------------------------------------------------
.text:00002E47                 align 10h
.text:00002E50
.text:00002E50 ; =============== S U B R O U T I N E =======================================
.text:00002E50
.text:00002E50 ; Attributes: bp-based frame
.text:00002E50
.text:00002E50 ; void __thiscall UString::Replace(UString *this, wchar_t, wchar_t)
.text:00002E50                 public ?Replace@UString@@QAEX_W0@Z
.text:00002E50 ?Replace@UString@@QAEX_W0@Z proc near
.text:00002E50
.text:00002E50 var_8           = dword ptr -8
.text:00002E50 var_4           = dword ptr -4
.text:00002E50 arg_0           = word ptr  8
.text:00002E50 arg_4           = word ptr  0Ch
.text:00002E50
.text:00002E50                 push    ebp
.text:00002E51                 mov     ebp, esp
.text:00002E53                 sub     esp, 8
.text:00002E56                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002E5D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E64                 mov     [ebp+var_4], ecx
.text:00002E67                 movzx   eax, [ebp+arg_0]
.text:00002E6B                 movzx   ecx, [ebp+arg_4]
.text:00002E6F                 cmp     eax, ecx
.text:00002E71                 jnz     short loc_2E75
.text:00002E73                 jmp     short loc_2EBE
.text:00002E75 ; ---------------------------------------------------------------------------
.text:00002E75
.text:00002E75 loc_2E75:                               ; CODE XREF: UString::Replace(wchar_t,wchar_t)+21j
.text:00002E75                 mov     [ebp+var_8], 0
.text:00002E7C
.text:00002E7C loc_2E7C:                               ; CODE XREF: UString::Replace(wchar_t,wchar_t)+6Cj
.text:00002E7C                 mov     edx, [ebp+var_4]
.text:00002E7F                 mov     eax, [ebp+var_8]
.text:00002E82                 cmp     eax, [edx+4]
.text:00002E85                 jnb     short loc_2EBE
.text:00002E87                 mov     ecx, [ebp+var_8]
.text:00002E8A                 push    ecx             ; unsigned int
.text:00002E8B                 movzx   edx, [ebp+arg_0]
.text:00002E8F                 push    edx             ; wchar_t
.text:00002E90                 mov     ecx, [ebp+var_4] ; this
.text:00002E93                 call    ?Find@UString@@QBEH_WI@Z ; UString::Find(wchar_t,uint)
.text:00002E98                 mov     [ebp+var_8], eax
.text:00002E9B                 cmp     [ebp+var_8], 0
.text:00002E9F                 jge     short loc_2EA3
.text:00002EA1                 jmp     short loc_2EBE
.text:00002EA3 ; ---------------------------------------------------------------------------
.text:00002EA3
.text:00002EA3 loc_2EA3:                               ; CODE XREF: UString::Replace(wchar_t,wchar_t)+4Fj
.text:00002EA3                 mov     eax, [ebp+var_4]
.text:00002EA6                 mov     ecx, [eax]
.text:00002EA8                 mov     edx, [ebp+var_8]
.text:00002EAB                 mov     ax, [ebp+arg_4]
.text:00002EAF                 mov     [ecx+edx*2], ax
.text:00002EB3                 mov     ecx, [ebp+var_8]
.text:00002EB6                 add     ecx, 1
.text:00002EB9                 mov     [ebp+var_8], ecx
.text:00002EBC                 jmp     short loc_2E7C
.text:00002EBE ; ---------------------------------------------------------------------------
.text:00002EBE
.text:00002EBE loc_2EBE:                               ; CODE XREF: UString::Replace(wchar_t,wchar_t)+23j
.text:00002EBE                                         ; UString::Replace(wchar_t,wchar_t)+35j ...
.text:00002EBE                 add     esp, 8
.text:00002EC1                 cmp     ebp, esp
.text:00002EC3                 call    __RTC_CheckEsp
.text:00002EC8                 mov     esp, ebp
.text:00002ECA                 pop     ebp
.text:00002ECB                 retn    8
.text:00002ECB ?Replace@UString@@QAEX_W0@Z endp
.text:00002ECB
.text:00002ECB ; ---------------------------------------------------------------------------
.text:00002ECE                 align 10h
.text:00002ED0
.text:00002ED0 ; =============== S U B R O U T I N E =======================================
.text:00002ED0
.text:00002ED0 ; Attributes: bp-based frame
.text:00002ED0
.text:00002ED0 ; void __thiscall UString::Replace(UString *this, const struct UString *, const struct UString *)
.text:00002ED0                 public ?Replace@UString@@QAEXABV1@0@Z
.text:00002ED0 ?Replace@UString@@QAEXABV1@0@Z proc near
.text:00002ED0
.text:00002ED0 var_10          = dword ptr -10h
.text:00002ED0 var_C           = dword ptr -0Ch
.text:00002ED0 var_8           = dword ptr -8
.text:00002ED0 var_4           = dword ptr -4
.text:00002ED0 arg_0           = dword ptr  8
.text:00002ED0 arg_4           = dword ptr  0Ch
.text:00002ED0
.text:00002ED0                 push    ebp
.text:00002ED1                 mov     ebp, esp
.text:00002ED3                 sub     esp, 10h
.text:00002ED6                 mov     eax, 0CCCCCCCCh
.text:00002EDB                 mov     [ebp+var_10], eax
.text:00002EDE                 mov     [ebp+var_C], eax
.text:00002EE1                 mov     [ebp+var_8], eax
.text:00002EE4                 mov     [ebp+var_4], eax
.text:00002EE7                 mov     [ebp+var_4], ecx
.text:00002EEA                 mov     ecx, [ebp+arg_0] ; this
.text:00002EED                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00002EF2                 movzx   eax, al
.text:00002EF5                 test    eax, eax
.text:00002EF7                 jz      short loc_2EFE
.text:00002EF9                 jmp     loc_2F87
.text:00002EFE ; ---------------------------------------------------------------------------
.text:00002EFE
.text:00002EFE loc_2EFE:                               ; CODE XREF: UString::Replace(UString const &,UString const &)+27j
.text:00002EFE                 mov     ecx, [ebp+arg_4]
.text:00002F01                 push    ecx             ; UString *
.text:00002F02                 mov     edx, [ebp+arg_0]
.text:00002F05                 push    edx             ; UString *
.text:00002F06                 call    ??8@YG_NABVUString@@0@Z ; operator==(UString const &,UString const &)
.text:00002F0B                 movzx   eax, al
.text:00002F0E                 test    eax, eax
.text:00002F10                 jz      short loc_2F14
.text:00002F12                 jmp     short loc_2F87
.text:00002F14 ; ---------------------------------------------------------------------------
.text:00002F14
.text:00002F14 loc_2F14:                               ; CODE XREF: UString::Replace(UString const &,UString const &)+40j
.text:00002F14                 mov     ecx, [ebp+arg_0] ; this
.text:00002F17                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00002F1C                 mov     [ebp+var_8], eax
.text:00002F1F                 mov     ecx, [ebp+arg_4] ; this
.text:00002F22                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00002F27                 mov     [ebp+var_C], eax
.text:00002F2A                 mov     [ebp+var_10], 0
.text:00002F31
.text:00002F31 loc_2F31:                               ; CODE XREF: UString::Replace(UString const &,UString const &)+B5j
.text:00002F31                 mov     ecx, [ebp+var_4]
.text:00002F34                 mov     edx, [ebp+var_10]
.text:00002F37                 cmp     edx, [ecx+4]
.text:00002F3A                 jnb     short loc_2F87
.text:00002F3C                 mov     eax, [ebp+var_10]
.text:00002F3F                 push    eax             ; unsigned int
.text:00002F40                 mov     ecx, [ebp+arg_0]
.text:00002F43                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002F48                 push    eax             ; SubStr
.text:00002F49                 mov     ecx, [ebp+var_4] ; this
.text:00002F4C                 call    ?Find@UString@@QBEHPB_WI@Z ; UString::Find(wchar_t const *,uint)
.text:00002F51                 mov     [ebp+var_10], eax
.text:00002F54                 cmp     [ebp+var_10], 0
.text:00002F58                 jge     short loc_2F5C
.text:00002F5A                 jmp     short loc_2F87
.text:00002F5C ; ---------------------------------------------------------------------------
.text:00002F5C
.text:00002F5C loc_2F5C:                               ; CODE XREF: UString::Replace(UString const &,UString const &)+88j
.text:00002F5C                 mov     ecx, [ebp+var_8]
.text:00002F5F                 push    ecx             ; unsigned int
.text:00002F60                 mov     edx, [ebp+var_10]
.text:00002F63                 push    edx             ; unsigned int
.text:00002F64                 mov     ecx, [ebp+var_4] ; this
.text:00002F67                 call    ?Delete@UString@@QAEXII@Z ; UString::Delete(uint,uint)
.text:00002F6C                 mov     eax, [ebp+arg_4]
.text:00002F6F                 push    eax             ; struct UString *
.text:00002F70                 mov     ecx, [ebp+var_10]
.text:00002F73                 push    ecx             ; unsigned int
.text:00002F74                 mov     ecx, [ebp+var_4] ; this
.text:00002F77                 call    ?Insert@UString@@QAEXIABV1@@Z ; UString::Insert(uint,UString const &)
.text:00002F7C                 mov     edx, [ebp+var_10]
.text:00002F7F                 add     edx, [ebp+var_C]
.text:00002F82                 mov     [ebp+var_10], edx
.text:00002F85                 jmp     short loc_2F31
.text:00002F87 ; ---------------------------------------------------------------------------
.text:00002F87
.text:00002F87 loc_2F87:                               ; CODE XREF: UString::Replace(UString const &,UString const &)+29j
.text:00002F87                                         ; UString::Replace(UString const &,UString const &)+42j ...
.text:00002F87                 add     esp, 10h
.text:00002F8A                 cmp     ebp, esp
.text:00002F8C                 call    __RTC_CheckEsp
.text:00002F91                 mov     esp, ebp
.text:00002F93                 pop     ebp
.text:00002F94                 retn    8
.text:00002F94 ?Replace@UString@@QAEXABV1@0@Z endp
.text:00002F94
.text:00002F94 ; ---------------------------------------------------------------------------
.text:00002F97                 align 10h
.text:00002FA0
.text:00002FA0 ; =============== S U B R O U T I N E =======================================
.text:00002FA0
.text:00002FA0 ; Attributes: bp-based frame
.text:00002FA0
.text:00002FA0 ; void __thiscall UString::Delete(UString *this, unsigned int)
.text:00002FA0                 public ?Delete@UString@@QAEXI@Z
.text:00002FA0 ?Delete@UString@@QAEXI@Z proc near
.text:00002FA0
.text:00002FA0 var_4           = dword ptr -4
.text:00002FA0 arg_0           = dword ptr  8
.text:00002FA0
.text:00002FA0                 push    ebp
.text:00002FA1                 mov     ebp, esp
.text:00002FA3                 push    ecx
.text:00002FA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002FAB                 mov     [ebp+var_4], ecx
.text:00002FAE                 mov     eax, [ebp+arg_0]
.text:00002FB1                 add     eax, 1
.text:00002FB4                 push    eax             ; unsigned int
.text:00002FB5                 mov     ecx, [ebp+arg_0]
.text:00002FB8                 push    ecx             ; unsigned int
.text:00002FB9                 mov     ecx, [ebp+var_4] ; this
.text:00002FBC                 call    ?MoveItems@UString@@AAEXII@Z ; UString::MoveItems(uint,uint)
.text:00002FC1                 mov     edx, [ebp+var_4]
.text:00002FC4                 mov     eax, [edx+4]
.text:00002FC7                 sub     eax, 1
.text:00002FCA                 mov     ecx, [ebp+var_4]
.text:00002FCD                 mov     [ecx+4], eax
.text:00002FD0                 add     esp, 4
.text:00002FD3                 cmp     ebp, esp
.text:00002FD5                 call    __RTC_CheckEsp
.text:00002FDA                 mov     esp, ebp
.text:00002FDC                 pop     ebp
.text:00002FDD                 retn    4
.text:00002FDD ?Delete@UString@@QAEXI@Z endp
.text:00002FDD
.text:00002FE0
.text:00002FE0 ; =============== S U B R O U T I N E =======================================
.text:00002FE0
.text:00002FE0 ; Attributes: bp-based frame
.text:00002FE0
.text:00002FE0 ; void __thiscall UString::Delete(UString *this, unsigned int, unsigned int)
.text:00002FE0                 public ?Delete@UString@@QAEXII@Z
.text:00002FE0 ?Delete@UString@@QAEXII@Z proc near     ; CODE XREF: UString::Replace(UString const &,UString const &)+97p
.text:00002FE0
.text:00002FE0 var_4           = dword ptr -4
.text:00002FE0 arg_0           = dword ptr  8
.text:00002FE0 arg_4           = dword ptr  0Ch
.text:00002FE0
.text:00002FE0                 push    ebp
.text:00002FE1                 mov     ebp, esp
.text:00002FE3                 push    ecx
.text:00002FE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002FEB                 mov     [ebp+var_4], ecx
.text:00002FEE                 mov     eax, [ebp+arg_0]
.text:00002FF1                 add     eax, [ebp+arg_4]
.text:00002FF4                 mov     ecx, [ebp+var_4]
.text:00002FF7                 cmp     eax, [ecx+4]
.text:00002FFA                 jbe     short loc_3008
.text:00002FFC                 mov     edx, [ebp+var_4]
.text:00002FFF                 mov     eax, [edx+4]
.text:00003002                 sub     eax, [ebp+arg_0]
.text:00003005                 mov     [ebp+arg_4], eax
.text:00003008
.text:00003008 loc_3008:                               ; CODE XREF: UString::Delete(uint,uint)+1Aj
.text:00003008                 cmp     [ebp+arg_4], 0
.text:0000300C                 jbe     short loc_3030
.text:0000300E                 mov     ecx, [ebp+arg_0]
.text:00003011                 add     ecx, [ebp+arg_4]
.text:00003014                 push    ecx             ; unsigned int
.text:00003015                 mov     edx, [ebp+arg_0]
.text:00003018                 push    edx             ; unsigned int
.text:00003019                 mov     ecx, [ebp+var_4] ; this
.text:0000301C                 call    ?MoveItems@UString@@AAEXII@Z ; UString::MoveItems(uint,uint)
.text:00003021                 mov     eax, [ebp+var_4]
.text:00003024                 mov     ecx, [eax+4]
.text:00003027                 sub     ecx, [ebp+arg_4]
.text:0000302A                 mov     edx, [ebp+var_4]
.text:0000302D                 mov     [edx+4], ecx
.text:00003030
.text:00003030 loc_3030:                               ; CODE XREF: UString::Delete(uint,uint)+2Cj
.text:00003030                 add     esp, 4
.text:00003033                 cmp     ebp, esp
.text:00003035                 call    __RTC_CheckEsp
.text:0000303A                 mov     esp, ebp
.text:0000303C                 pop     ebp
.text:0000303D                 retn    8
.text:0000303D ?Delete@UString@@QAEXII@Z endp
.text:0000303D
.text:00003040
.text:00003040 ; =============== S U B R O U T I N E =======================================
.text:00003040
.text:00003040 ; Attributes: bp-based frame
.text:00003040
.text:00003040 ; void __thiscall UString::DeleteFrontal(UString *this, unsigned int)
.text:00003040                 public ?DeleteFrontal@UString@@QAEXI@Z
.text:00003040 ?DeleteFrontal@UString@@QAEXI@Z proc near
.text:00003040
.text:00003040 var_4           = dword ptr -4
.text:00003040 arg_0           = dword ptr  8
.text:00003040
.text:00003040                 push    ebp
.text:00003041                 mov     ebp, esp
.text:00003043                 push    ecx
.text:00003044                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000304B                 mov     [ebp+var_4], ecx
.text:0000304E                 cmp     [ebp+arg_0], 0
.text:00003052                 jz      short loc_3071
.text:00003054                 mov     eax, [ebp+arg_0]
.text:00003057                 push    eax             ; unsigned int
.text:00003058                 push    0               ; unsigned int
.text:0000305A                 mov     ecx, [ebp+var_4] ; this
.text:0000305D                 call    ?MoveItems@UString@@AAEXII@Z ; UString::MoveItems(uint,uint)
.text:00003062                 mov     ecx, [ebp+var_4]
.text:00003065                 mov     edx, [ecx+4]
.text:00003068                 sub     edx, [ebp+arg_0]
.text:0000306B                 mov     eax, [ebp+var_4]
.text:0000306E                 mov     [eax+4], edx
.text:00003071
.text:00003071 loc_3071:                               ; CODE XREF: UString::DeleteFrontal(uint)+12j
.text:00003071                 add     esp, 4
.text:00003074                 cmp     ebp, esp
.text:00003076                 call    __RTC_CheckEsp
.text:0000307B                 mov     esp, ebp
.text:0000307D                 pop     ebp
.text:0000307E                 retn    4
.text:0000307E ?DeleteFrontal@UString@@QAEXI@Z endp
.text:0000307E
.text:0000307E ; ---------------------------------------------------------------------------
.text:00003081                 align 10h
.text:00003090
.text:00003090 ; =============== S U B R O U T I N E =======================================
.text:00003090
.text:00003090 ; Attributes: bp-based frame
.text:00003090
.text:00003090 ; void __thiscall UString2::ReAlloc2(UString2 *this, unsigned int)
.text:00003090                 public ?ReAlloc2@UString2@@AAEXI@Z
.text:00003090 ?ReAlloc2@UString2@@AAEXI@Z proc near
.text:00003090
.text:00003090 var_C           = dword ptr -0Ch
.text:00003090 var_8           = dword ptr -8
.text:00003090 var_4           = dword ptr -4
.text:00003090 arg_0           = dword ptr  8
.text:00003090
.text:00003090                 push    ebp
.text:00003091                 mov     ebp, esp
.text:00003093                 sub     esp, 0Ch
.text:00003096                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000309D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000030A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000030AB                 mov     [ebp+var_4], ecx
.text:000030AE                 cmp     [ebp+arg_0], 40000000h
.text:000030B5                 jb      short loc_30CC
.text:000030B7                 mov     [ebp+var_8], 13329ADh
.text:000030BE                 push    offset __TI1H
.text:000030C3                 lea     eax, [ebp+var_8]
.text:000030C6                 push    eax
.text:000030C7                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:000030CC ; ---------------------------------------------------------------------------
.text:000030CC
.text:000030CC loc_30CC:                               ; CODE XREF: UString2::ReAlloc2(uint)+25j
.text:000030CC                 mov     eax, [ebp+arg_0]
.text:000030CF                 add     eax, 1
.text:000030D2                 xor     ecx, ecx
.text:000030D4                 mov     edx, 2
.text:000030D9                 mul     edx
.text:000030DB                 seto    cl
.text:000030DE                 neg     ecx
.text:000030E0                 or      ecx, eax
.text:000030E2                 push    ecx             ; unsigned int
.text:000030E3                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000030E8                 add     esp, 4
.text:000030EB                 mov     [ebp+var_C], eax
.text:000030EE                 mov     eax, [ebp+var_4]
.text:000030F1                 mov     ecx, [ebp+var_C]
.text:000030F4                 mov     [eax], ecx
.text:000030F6                 add     esp, 0Ch
.text:000030F9                 cmp     ebp, esp
.text:000030FB                 call    __RTC_CheckEsp
.text:00003100                 mov     esp, ebp
.text:00003102                 pop     ebp
.text:00003103                 retn    4
.text:00003103 ?ReAlloc2@UString2@@AAEXI@Z endp
.text:00003103
.text:00003103 ; ---------------------------------------------------------------------------
.text:00003106                 align 10h
.text:00003110
.text:00003110 ; =============== S U B R O U T I N E =======================================
.text:00003110
.text:00003110 ; Attributes: bp-based frame
.text:00003110
.text:00003110 ; void __thiscall UString2::SetStartLen(UString2 *this, unsigned int)
.text:00003110                 public ?SetStartLen@UString2@@AAEXI@Z
.text:00003110 ?SetStartLen@UString2@@AAEXI@Z proc near
.text:00003110                                         ; CODE XREF: UString2::UString2(wchar_t const *)+2Ap
.text:00003110                                         ; UString2::UString2(UString2 const &)+33p
.text:00003110
.text:00003110 var_8           = dword ptr -8
.text:00003110 var_4           = dword ptr -4
.text:00003110 arg_0           = dword ptr  8
.text:00003110
.text:00003110                 push    ebp
.text:00003111                 mov     ebp, esp
.text:00003113                 sub     esp, 8
.text:00003116                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000311D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003124                 mov     [ebp+var_4], ecx
.text:00003127                 mov     eax, [ebp+var_4]
.text:0000312A                 mov     dword ptr [eax], 0
.text:00003130                 mov     eax, [ebp+arg_0]
.text:00003133                 add     eax, 1
.text:00003136                 xor     ecx, ecx
.text:00003138                 mov     edx, 2
.text:0000313D                 mul     edx
.text:0000313F                 seto    cl
.text:00003142                 neg     ecx
.text:00003144                 or      ecx, eax
.text:00003146                 push    ecx             ; unsigned int
.text:00003147                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000314C                 add     esp, 4
.text:0000314F                 mov     [ebp+var_8], eax
.text:00003152                 mov     eax, [ebp+var_4]
.text:00003155                 mov     ecx, [ebp+var_8]
.text:00003158                 mov     [eax], ecx
.text:0000315A                 mov     edx, [ebp+var_4]
.text:0000315D                 mov     eax, [ebp+arg_0]
.text:00003160                 mov     [edx+4], eax
.text:00003163                 add     esp, 8
.text:00003166                 cmp     ebp, esp
.text:00003168                 call    __RTC_CheckEsp
.text:0000316D                 mov     esp, ebp
.text:0000316F                 pop     ebp
.text:00003170                 retn    4
.text:00003170 ?SetStartLen@UString2@@AAEXI@Z endp
.text:00003170
.text:00003170 ; ---------------------------------------------------------------------------
.text:00003173                 align 10h
.text:00003180
.text:00003180 ; =============== S U B R O U T I N E =======================================
.text:00003180
.text:00003180 ; Attributes: bp-based frame
.text:00003180
.text:00003180 ; int __stdcall UString2::UString2(wchar_t *)
.text:00003180                 public ??0UString2@@QAE@PB_W@Z
.text:00003180 ??0UString2@@QAE@PB_W@Z proc near
.text:00003180
.text:00003180 var_8           = dword ptr -8
.text:00003180 var_4           = dword ptr -4
.text:00003180 arg_0           = dword ptr  8
.text:00003180
.text:00003180                 push    ebp
.text:00003181                 mov     ebp, esp
.text:00003183                 sub     esp, 8
.text:00003186                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000318D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003194                 mov     [ebp+var_4], ecx
.text:00003197                 mov     eax, [ebp+arg_0]
.text:0000319A                 push    eax             ; wchar_t *
.text:0000319B                 call    ?MyStringLen@@YGIPB_W@Z ; MyStringLen(wchar_t const *)
.text:000031A0                 mov     [ebp+var_8], eax
.text:000031A3                 mov     ecx, [ebp+var_8]
.text:000031A6                 push    ecx             ; unsigned int
.text:000031A7                 mov     ecx, [ebp+var_4] ; this
.text:000031AA                 call    ?SetStartLen@UString2@@AAEXI@Z ; UString2::SetStartLen(uint)
.text:000031AF                 mov     edx, [ebp+var_8]
.text:000031B2                 add     edx, 1
.text:000031B5                 push    edx             ; int
.text:000031B6                 mov     eax, [ebp+arg_0]
.text:000031B9                 push    eax             ; Src
.text:000031BA                 mov     ecx, [ebp+var_4]
.text:000031BD                 mov     edx, [ecx]
.text:000031BF                 push    edx             ; Dst
.text:000031C0                 call    _wmemcpy
.text:000031C5                 add     esp, 0Ch
.text:000031C8                 mov     eax, [ebp+var_4]
.text:000031CB                 add     esp, 8
.text:000031CE                 cmp     ebp, esp
.text:000031D0                 call    __RTC_CheckEsp
.text:000031D5                 mov     esp, ebp
.text:000031D7                 pop     ebp
.text:000031D8                 retn    4
.text:000031D8 ??0UString2@@QAE@PB_W@Z endp
.text:000031D8
.text:000031D8 ; ---------------------------------------------------------------------------
.text:000031DB                 align 10h
.text:000031E0
.text:000031E0 ; =============== S U B R O U T I N E =======================================
.text:000031E0
.text:000031E0 ; Attributes: bp-based frame
.text:000031E0
.text:000031E0 ; public: __thiscall UString2::UString2(class UString2 const &)
.text:000031E0                 public ??0UString2@@QAE@ABV0@@Z
.text:000031E0 ??0UString2@@QAE@ABV0@@Z proc near
.text:000031E0
.text:000031E0 var_4           = dword ptr -4
.text:000031E0 arg_0           = dword ptr  8
.text:000031E0
.text:000031E0                 push    ebp
.text:000031E1                 mov     ebp, esp
.text:000031E3                 push    ecx
.text:000031E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000031EB                 mov     [ebp+var_4], ecx
.text:000031EE                 mov     eax, [ebp+var_4]
.text:000031F1                 mov     dword ptr [eax], 0
.text:000031F7                 mov     ecx, [ebp+var_4]
.text:000031FA                 mov     dword ptr [ecx+4], 0
.text:00003201                 mov     edx, [ebp+arg_0]
.text:00003204                 cmp     dword ptr [edx], 0
.text:00003207                 jz      short loc_3236
.text:00003209                 mov     eax, [ebp+arg_0]
.text:0000320C                 mov     ecx, [eax+4]
.text:0000320F                 push    ecx             ; unsigned int
.text:00003210                 mov     ecx, [ebp+var_4] ; this
.text:00003213                 call    ?SetStartLen@UString2@@AAEXI@Z ; UString2::SetStartLen(uint)
.text:00003218                 mov     edx, [ebp+arg_0]
.text:0000321B                 mov     eax, [edx+4]
.text:0000321E                 add     eax, 1
.text:00003221                 push    eax             ; int
.text:00003222                 mov     ecx, [ebp+arg_0]
.text:00003225                 mov     edx, [ecx]
.text:00003227                 push    edx             ; Src
.text:00003228                 mov     eax, [ebp+var_4]
.text:0000322B                 mov     ecx, [eax]
.text:0000322D                 push    ecx             ; Dst
.text:0000322E                 call    _wmemcpy
.text:00003233                 add     esp, 0Ch
.text:00003236
.text:00003236 loc_3236:                               ; CODE XREF: UString2::UString2(UString2 const &)+27j
.text:00003236                 mov     eax, [ebp+var_4]
.text:00003239                 add     esp, 4
.text:0000323C                 cmp     ebp, esp
.text:0000323E                 call    __RTC_CheckEsp
.text:00003243                 mov     esp, ebp
.text:00003245                 pop     ebp
.text:00003246                 retn    4
.text:00003246 ??0UString2@@QAE@ABV0@@Z endp
.text:00003246
.text:00003246 ; ---------------------------------------------------------------------------
.text:00003249                 align 10h
.text:00003250
.text:00003250 ; =============== S U B R O U T I N E =======================================
.text:00003250
.text:00003250 ; Attributes: bp-based frame
.text:00003250
.text:00003250 ; int __stdcall UString2::operator=(wchar_t *)
.text:00003250                 public ??4UString2@@QAEAAV0@PB_W@Z
.text:00003250 ??4UString2@@QAEAAV0@PB_W@Z proc near
.text:00003250
.text:00003250 var_14          = dword ptr -14h
.text:00003250 var_10          = dword ptr -10h
.text:00003250 var_C           = dword ptr -0Ch
.text:00003250 var_8           = dword ptr -8
.text:00003250 var_4           = dword ptr -4
.text:00003250 arg_0           = dword ptr  8
.text:00003250
.text:00003250                 push    ebp
.text:00003251                 mov     ebp, esp
.text:00003253                 sub     esp, 14h
.text:00003256                 mov     eax, 0CCCCCCCCh
.text:0000325B                 mov     [ebp+var_14], eax
.text:0000325E                 mov     [ebp+var_10], eax
.text:00003261                 mov     [ebp+var_C], eax
.text:00003264                 mov     [ebp+var_8], eax
.text:00003267                 mov     [ebp+var_4], eax
.text:0000326A                 mov     [ebp+var_4], ecx
.text:0000326D                 mov     eax, [ebp+arg_0]
.text:00003270                 push    eax             ; wchar_t *
.text:00003271                 call    ?MyStringLen@@YGIPB_W@Z ; MyStringLen(wchar_t const *)
.text:00003276                 mov     [ebp+var_8], eax
.text:00003279                 mov     ecx, [ebp+var_4]
.text:0000327C                 mov     edx, [ebp+var_8]
.text:0000327F                 cmp     edx, [ecx+4]
.text:00003282                 jbe     short loc_32D0
.text:00003284                 mov     eax, [ebp+var_8]
.text:00003287                 add     eax, 1
.text:0000328A                 xor     ecx, ecx
.text:0000328C                 mov     edx, 2
.text:00003291                 mul     edx
.text:00003293                 seto    cl
.text:00003296                 neg     ecx
.text:00003298                 or      ecx, eax
.text:0000329A                 push    ecx             ; unsigned int
.text:0000329B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000032A0                 add     esp, 4
.text:000032A3                 mov     [ebp+var_10], eax
.text:000032A6                 mov     eax, [ebp+var_10]
.text:000032A9                 mov     [ebp+var_C], eax
.text:000032AC                 mov     ecx, [ebp+var_4]
.text:000032AF                 cmp     dword ptr [ecx], 0
.text:000032B2                 jz      short loc_32C8
.text:000032B4                 mov     edx, [ebp+var_4]
.text:000032B7                 mov     eax, [edx]
.text:000032B9                 mov     [ebp+var_14], eax
.text:000032BC                 mov     ecx, [ebp+var_14]
.text:000032BF                 push    ecx             ; void *
.text:000032C0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000032C5                 add     esp, 4
.text:000032C8
.text:000032C8 loc_32C8:                               ; CODE XREF: UString2::operator=(wchar_t const *)+62j
.text:000032C8                 mov     edx, [ebp+var_4]
.text:000032CB                 mov     eax, [ebp+var_C]
.text:000032CE                 mov     [edx], eax
.text:000032D0
.text:000032D0 loc_32D0:                               ; CODE XREF: UString2::operator=(wchar_t const *)+32j
.text:000032D0                 mov     ecx, [ebp+var_4]
.text:000032D3                 mov     edx, [ebp+var_8]
.text:000032D6                 mov     [ecx+4], edx
.text:000032D9                 mov     eax, [ebp+arg_0]
.text:000032DC                 push    eax             ; wchar_t *
.text:000032DD                 mov     ecx, [ebp+var_4]
.text:000032E0                 mov     edx, [ecx]
.text:000032E2                 push    edx             ; wchar_t *
.text:000032E3                 call    ?MyStringCopy@@YGXPA_WPB_W@Z ; MyStringCopy(wchar_t *,wchar_t const *)
.text:000032E8                 mov     eax, [ebp+var_4]
.text:000032EB                 add     esp, 14h
.text:000032EE                 cmp     ebp, esp
.text:000032F0                 call    __RTC_CheckEsp
.text:000032F5                 mov     esp, ebp
.text:000032F7                 pop     ebp
.text:000032F8                 retn    4
.text:000032F8 ??4UString2@@QAEAAV0@PB_W@Z endp
.text:000032F8
.text:000032F8 ; ---------------------------------------------------------------------------
.text:000032FB                 align 10h
.text:00003300
.text:00003300 ; =============== S U B R O U T I N E =======================================
.text:00003300
.text:00003300 ; Attributes: bp-based frame
.text:00003300
.text:00003300 ; void __thiscall UString2::SetFromAscii(UString2 *this, const char *)
.text:00003300                 public ?SetFromAscii@UString2@@QAEXPBD@Z
.text:00003300 ?SetFromAscii@UString2@@QAEXPBD@Z proc near
.text:00003300
.text:00003300 var_1C          = dword ptr -1Ch
.text:00003300 var_18          = dword ptr -18h
.text:00003300 var_14          = dword ptr -14h
.text:00003300 var_10          = dword ptr -10h
.text:00003300 var_C           = dword ptr -0Ch
.text:00003300 var_8           = dword ptr -8
.text:00003300 var_4           = dword ptr -4
.text:00003300 arg_0           = dword ptr  8
.text:00003300
.text:00003300                 push    ebp
.text:00003301                 mov     ebp, esp
.text:00003303                 sub     esp, 1Ch
.text:00003306                 mov     eax, 0CCCCCCCCh
.text:0000330B                 mov     [ebp+var_1C], eax
.text:0000330E                 mov     [ebp+var_18], eax
.text:00003311                 mov     [ebp+var_14], eax
.text:00003314                 mov     [ebp+var_10], eax
.text:00003317                 mov     [ebp+var_C], eax
.text:0000331A                 mov     [ebp+var_8], eax
.text:0000331D                 mov     [ebp+var_4], eax
.text:00003320                 mov     [ebp+var_4], ecx
.text:00003323                 mov     eax, [ebp+arg_0]
.text:00003326                 push    eax             ; char *
.text:00003327                 call    ?MyStringLen@@YGIPBD@Z ; MyStringLen(char const *)
.text:0000332C                 mov     [ebp+var_8], eax
.text:0000332F                 mov     ecx, [ebp+var_4]
.text:00003332                 mov     edx, [ebp+var_8]
.text:00003335                 cmp     edx, [ecx+4]
.text:00003338                 jbe     short loc_3386
.text:0000333A                 mov     eax, [ebp+var_8]
.text:0000333D                 add     eax, 1
.text:00003340                 xor     ecx, ecx
.text:00003342                 mov     edx, 2
.text:00003347                 mul     edx
.text:00003349                 seto    cl
.text:0000334C                 neg     ecx
.text:0000334E                 or      ecx, eax
.text:00003350                 push    ecx             ; unsigned int
.text:00003351                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00003356                 add     esp, 4
.text:00003359                 mov     [ebp+var_18], eax
.text:0000335C                 mov     eax, [ebp+var_18]
.text:0000335F                 mov     [ebp+var_C], eax
.text:00003362                 mov     ecx, [ebp+var_4]
.text:00003365                 cmp     dword ptr [ecx], 0
.text:00003368                 jz      short loc_337E
.text:0000336A                 mov     edx, [ebp+var_4]
.text:0000336D                 mov     eax, [edx]
.text:0000336F                 mov     [ebp+var_1C], eax
.text:00003372                 mov     ecx, [ebp+var_1C]
.text:00003375                 push    ecx             ; void *
.text:00003376                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000337B                 add     esp, 4
.text:0000337E
.text:0000337E loc_337E:                               ; CODE XREF: UString2::SetFromAscii(char const *)+68j
.text:0000337E                 mov     edx, [ebp+var_4]
.text:00003381                 mov     eax, [ebp+var_C]
.text:00003384                 mov     [edx], eax
.text:00003386
.text:00003386 loc_3386:                               ; CODE XREF: UString2::SetFromAscii(char const *)+38j
.text:00003386                 mov     ecx, [ebp+var_4]
.text:00003389                 mov     edx, [ecx]
.text:0000338B                 mov     [ebp+var_10], edx
.text:0000338E                 mov     [ebp+var_14], 0
.text:00003395                 jmp     short loc_33A0
.text:00003397 ; ---------------------------------------------------------------------------
.text:00003397
.text:00003397 loc_3397:                               ; CODE XREF: UString2::SetFromAscii(char const *)+BCj
.text:00003397                 mov     eax, [ebp+var_14]
.text:0000339A                 add     eax, 1
.text:0000339D                 mov     [ebp+var_14], eax
.text:000033A0
.text:000033A0 loc_33A0:                               ; CODE XREF: UString2::SetFromAscii(char const *)+95j
.text:000033A0                 mov     ecx, [ebp+var_14]
.text:000033A3                 cmp     ecx, [ebp+var_8]
.text:000033A6                 jnb     short loc_33BE
.text:000033A8                 mov     edx, [ebp+arg_0]
.text:000033AB                 add     edx, [ebp+var_14]
.text:000033AE                 movzx   ax, byte ptr [edx]
.text:000033B2                 mov     ecx, [ebp+var_14]
.text:000033B5                 mov     edx, [ebp+var_10]
.text:000033B8                 mov     [edx+ecx*2], ax
.text:000033BC                 jmp     short loc_3397
.text:000033BE ; ---------------------------------------------------------------------------
.text:000033BE
.text:000033BE loc_33BE:                               ; CODE XREF: UString2::SetFromAscii(char const *)+A6j
.text:000033BE                 xor     eax, eax
.text:000033C0                 mov     ecx, [ebp+var_8]
.text:000033C3                 mov     edx, [ebp+var_10]
.text:000033C6                 mov     [edx+ecx*2], ax
.text:000033CA                 mov     eax, [ebp+var_4]
.text:000033CD                 mov     ecx, [ebp+var_8]
.text:000033D0                 mov     [eax+4], ecx
.text:000033D3                 add     esp, 1Ch
.text:000033D6                 cmp     ebp, esp
.text:000033D8                 call    __RTC_CheckEsp
.text:000033DD                 mov     esp, ebp
.text:000033DF                 pop     ebp
.text:000033E0                 retn    4
.text:000033E0 ?SetFromAscii@UString2@@QAEXPBD@Z endp
.text:000033E0
.text:000033E0 ; ---------------------------------------------------------------------------
.text:000033E3                 align 10h
.text:000033F0
.text:000033F0 ; =============== S U B R O U T I N E =======================================
.text:000033F0
.text:000033F0 ; Attributes: bp-based frame
.text:000033F0
.text:000033F0 ; public: class UString2 & __thiscall UString2::operator=(class UString2 const &)
.text:000033F0                 public ??4UString2@@QAEAAV0@ABV0@@Z
.text:000033F0 ??4UString2@@QAEAAV0@ABV0@@Z proc near
.text:000033F0
.text:000033F0 var_14          = dword ptr -14h
.text:000033F0 var_10          = dword ptr -10h
.text:000033F0 var_C           = dword ptr -0Ch
.text:000033F0 var_8           = dword ptr -8
.text:000033F0 var_4           = dword ptr -4
.text:000033F0 arg_0           = dword ptr  8
.text:000033F0
.text:000033F0                 push    ebp
.text:000033F1                 mov     ebp, esp
.text:000033F3                 sub     esp, 14h
.text:000033F6                 mov     eax, 0CCCCCCCCh
.text:000033FB                 mov     [ebp+var_14], eax
.text:000033FE                 mov     [ebp+var_10], eax
.text:00003401                 mov     [ebp+var_C], eax
.text:00003404                 mov     [ebp+var_8], eax
.text:00003407                 mov     [ebp+var_4], eax
.text:0000340A                 mov     [ebp+var_4], ecx
.text:0000340D                 mov     eax, [ebp+arg_0]
.text:00003410                 cmp     eax, [ebp+var_4]
.text:00003413                 jnz     short loc_341A
.text:00003415                 mov     eax, [ebp+var_4]
.text:00003418                 jmp     short loc_3497
.text:0000341A ; ---------------------------------------------------------------------------
.text:0000341A
.text:0000341A loc_341A:                               ; CODE XREF: UString2::operator=(UString2 const &)+23j
.text:0000341A                 mov     ecx, [ebp+arg_0]
.text:0000341D                 mov     edx, [ecx+4]
.text:00003420                 mov     [ebp+var_8], edx
.text:00003423                 mov     eax, [ebp+var_4]
.text:00003426                 mov     ecx, [ebp+var_8]
.text:00003429                 cmp     ecx, [eax+4]
.text:0000342C                 jbe     short loc_347A
.text:0000342E                 mov     eax, [ebp+var_8]
.text:00003431                 add     eax, 1
.text:00003434                 xor     ecx, ecx
.text:00003436                 mov     edx, 2
.text:0000343B                 mul     edx
.text:0000343D                 seto    cl
.text:00003440                 neg     ecx
.text:00003442                 or      ecx, eax
.text:00003444                 push    ecx             ; unsigned int
.text:00003445                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000344A                 add     esp, 4
.text:0000344D                 mov     [ebp+var_10], eax
.text:00003450                 mov     eax, [ebp+var_10]
.text:00003453                 mov     [ebp+var_C], eax
.text:00003456                 mov     ecx, [ebp+var_4]
.text:00003459                 cmp     dword ptr [ecx], 0
.text:0000345C                 jz      short loc_3472
.text:0000345E                 mov     edx, [ebp+var_4]
.text:00003461                 mov     eax, [edx]
.text:00003463                 mov     [ebp+var_14], eax
.text:00003466                 mov     ecx, [ebp+var_14]
.text:00003469                 push    ecx             ; void *
.text:0000346A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000346F                 add     esp, 4
.text:00003472
.text:00003472 loc_3472:                               ; CODE XREF: UString2::operator=(UString2 const &)+6Cj
.text:00003472                 mov     edx, [ebp+var_4]
.text:00003475                 mov     eax, [ebp+var_C]
.text:00003478                 mov     [edx], eax
.text:0000347A
.text:0000347A loc_347A:                               ; CODE XREF: UString2::operator=(UString2 const &)+3Cj
.text:0000347A                 mov     ecx, [ebp+var_4]
.text:0000347D                 mov     edx, [ebp+var_8]
.text:00003480                 mov     [ecx+4], edx
.text:00003483                 mov     eax, [ebp+arg_0]
.text:00003486                 mov     ecx, [eax]
.text:00003488                 push    ecx             ; wchar_t *
.text:00003489                 mov     edx, [ebp+var_4]
.text:0000348C                 mov     eax, [edx]
.text:0000348E                 push    eax             ; wchar_t *
.text:0000348F                 call    ?MyStringCopy@@YGXPA_WPB_W@Z ; MyStringCopy(wchar_t *,wchar_t const *)
.text:00003494                 mov     eax, [ebp+var_4]
.text:00003497
.text:00003497 loc_3497:                               ; CODE XREF: UString2::operator=(UString2 const &)+28j
.text:00003497                 add     esp, 14h
.text:0000349A                 cmp     ebp, esp
.text:0000349C                 call    __RTC_CheckEsp
.text:000034A1                 mov     esp, ebp
.text:000034A3                 pop     ebp
.text:000034A4                 retn    4
.text:000034A4 ??4UString2@@QAEAAV0@ABV0@@Z endp
.text:000034A4
.text:000034A4 ; ---------------------------------------------------------------------------
.text:000034A7                 align 10h
.text:000034B0
.text:000034B0 ; =============== S U B R O U T I N E =======================================
.text:000034B0
.text:000034B0 ; Attributes: bp-based frame
.text:000034B0
.text:000034B0 ; int __stdcall operator==(UString2 *, UString2 *)
.text:000034B0                 public ??8@YG_NABVUString2@@0@Z
.text:000034B0 ??8@YG_NABVUString2@@0@Z proc near
.text:000034B0
.text:000034B0 var_4           = dword ptr -4
.text:000034B0 arg_0           = dword ptr  8
.text:000034B0 arg_4           = dword ptr  0Ch
.text:000034B0
.text:000034B0                 push    ebp
.text:000034B1                 mov     ebp, esp
.text:000034B3                 push    ecx
.text:000034B4                 push    esi
.text:000034B5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034BC                 mov     ecx, [ebp+arg_0] ; this
.text:000034BF                 call    ?Len@UString2@@QBEIXZ ; UString2::Len(void)
.text:000034C4                 mov     esi, eax
.text:000034C6                 mov     ecx, [ebp+arg_4] ; this
.text:000034C9                 call    ?Len@UString2@@QBEIXZ ; UString2::Len(void)
.text:000034CE                 cmp     esi, eax
.text:000034D0                 jnz     short loc_3512
.text:000034D2                 mov     ecx, [ebp+arg_0] ; this
.text:000034D5                 call    ?IsEmpty@UString2@@QBE_NXZ ; UString2::IsEmpty(void)
.text:000034DA                 movzx   eax, al
.text:000034DD                 test    eax, eax
.text:000034DF                 jnz     short loc_3509
.text:000034E1                 mov     ecx, [ebp+arg_4] ; this
.text:000034E4                 call    ?GetRawPtr@UString2@@QBEPB_WXZ ; UString2::GetRawPtr(void)
.text:000034E9                 mov     esi, esp
.text:000034EB                 push    eax             ; Str2
.text:000034EC                 mov     ecx, [ebp+arg_0] ; this
.text:000034EF                 call    ?GetRawPtr@UString2@@QBEPB_WXZ ; UString2::GetRawPtr(void)
.text:000034F4                 push    eax             ; Str1
.text:000034F5                 call    dword ptr ds:__imp__wcscmp
.text:000034FB                 add     esp, 8
.text:000034FE                 cmp     esi, esp
.text:00003500                 call    __RTC_CheckEsp
.text:00003505                 test    eax, eax
.text:00003507                 jnz     short loc_3512
.text:00003509
.text:00003509 loc_3509:                               ; CODE XREF: operator==(UString2 const &,UString2 const &)+2Fj
.text:00003509                 mov     [ebp+var_4], 1
.text:00003510                 jmp     short loc_3519
.text:00003512 ; ---------------------------------------------------------------------------
.text:00003512
.text:00003512 loc_3512:                               ; CODE XREF: operator==(UString2 const &,UString2 const &)+20j
.text:00003512                                         ; operator==(UString2 const &,UString2 const &)+57j
.text:00003512                 mov     [ebp+var_4], 0
.text:00003519
.text:00003519 loc_3519:                               ; CODE XREF: operator==(UString2 const &,UString2 const &)+60j
.text:00003519                 mov     al, byte ptr [ebp+var_4]
.text:0000351C                 pop     esi
.text:0000351D                 add     esp, 4
.text:00003520                 cmp     ebp, esp
.text:00003522                 call    __RTC_CheckEsp
.text:00003527                 mov     esp, ebp
.text:00003529                 pop     ebp
.text:0000352A                 retn    8
.text:0000352A ??8@YG_NABVUString2@@0@Z endp
.text:0000352A
.text:0000352A ; ---------------------------------------------------------------------------
.text:0000352D                 align 10h
.text:00003530
.text:00003530 ; =============== S U B R O U T I N E =======================================
.text:00003530
.text:00003530 ; Attributes: bp-based frame
.text:00003530
.text:00003530 ; int __stdcall operator==(UString2 *, wchar_t *Str2)
.text:00003530                 public ??8@YG_NABVUString2@@PB_W@Z
.text:00003530 ??8@YG_NABVUString2@@PB_W@Z proc near
.text:00003530
.text:00003530 arg_0           = dword ptr  8
.text:00003530 Str2            = dword ptr  0Ch
.text:00003530
.text:00003530                 push    ebp
.text:00003531                 mov     ebp, esp
.text:00003533                 push    esi
.text:00003534                 mov     ecx, [ebp+arg_0] ; this
.text:00003537                 call    ?IsEmpty@UString2@@QBE_NXZ ; UString2::IsEmpty(void)
.text:0000353C                 movzx   eax, al
.text:0000353F                 test    eax, eax
.text:00003541                 jz      short loc_3552
.text:00003543                 mov     ecx, [ebp+Str2]
.text:00003546                 movzx   eax, word ptr [ecx]
.text:00003549                 neg     eax
.text:0000354B                 sbb     eax, eax
.text:0000354D                 add     eax, 1
.text:00003550                 jmp     short loc_3578
.text:00003552 ; ---------------------------------------------------------------------------
.text:00003552
.text:00003552 loc_3552:                               ; CODE XREF: operator==(UString2 const &,wchar_t const *)+11j
.text:00003552                 mov     esi, esp
.text:00003554                 mov     edx, [ebp+Str2]
.text:00003557                 push    edx             ; Str2
.text:00003558                 mov     ecx, [ebp+arg_0] ; this
.text:0000355B                 call    ?GetRawPtr@UString2@@QBEPB_WXZ ; UString2::GetRawPtr(void)
.text:00003560                 push    eax             ; Str1
.text:00003561                 call    dword ptr ds:__imp__wcscmp
.text:00003567                 add     esp, 8
.text:0000356A                 cmp     esi, esp
.text:0000356C                 call    __RTC_CheckEsp
.text:00003571                 neg     eax
.text:00003573                 sbb     eax, eax
.text:00003575                 add     eax, 1
.text:00003578
.text:00003578 loc_3578:                               ; CODE XREF: operator==(UString2 const &,wchar_t const *)+20j
.text:00003578                 pop     esi
.text:00003579                 cmp     ebp, esp
.text:0000357B                 call    __RTC_CheckEsp
.text:00003580                 pop     ebp
.text:00003581                 retn    8
.text:00003581 ??8@YG_NABVUString2@@PB_W@Z endp
.text:00003581
.text:00003581 ; ---------------------------------------------------------------------------
.text:00003584                 align 10h
.text:00003590
.text:00003590 ; =============== S U B R O U T I N E =======================================
.text:00003590
.text:00003590 ; Attributes: bp-based frame
.text:00003590
.text:00003590 ; int __stdcall operator==(wchar_t *Str1, UString2 *)
.text:00003590                 public ??8@YG_NPB_WABVUString2@@@Z
.text:00003590 ??8@YG_NPB_WABVUString2@@@Z proc near
.text:00003590
.text:00003590 Str1            = dword ptr  8
.text:00003590 arg_4           = dword ptr  0Ch
.text:00003590
.text:00003590                 push    ebp
.text:00003591                 mov     ebp, esp
.text:00003593                 push    esi
.text:00003594                 mov     ecx, [ebp+arg_4] ; this
.text:00003597                 call    ?IsEmpty@UString2@@QBE_NXZ ; UString2::IsEmpty(void)
.text:0000359C                 movzx   eax, al
.text:0000359F                 test    eax, eax
.text:000035A1                 jz      short loc_35B2
.text:000035A3                 mov     ecx, [ebp+Str1]
.text:000035A6                 movzx   eax, word ptr [ecx]
.text:000035A9                 neg     eax
.text:000035AB                 sbb     eax, eax
.text:000035AD                 add     eax, 1
.text:000035B0                 jmp     short loc_35D8
.text:000035B2 ; ---------------------------------------------------------------------------
.text:000035B2
.text:000035B2 loc_35B2:                               ; CODE XREF: operator==(wchar_t const *,UString2 const &)+11j
.text:000035B2                 mov     ecx, [ebp+arg_4] ; this
.text:000035B5                 call    ?GetRawPtr@UString2@@QBEPB_WXZ ; UString2::GetRawPtr(void)
.text:000035BA                 mov     esi, esp
.text:000035BC                 push    eax             ; Str2
.text:000035BD                 mov     edx, [ebp+Str1]
.text:000035C0                 push    edx             ; Str1
.text:000035C1                 call    dword ptr ds:__imp__wcscmp
.text:000035C7                 add     esp, 8
.text:000035CA                 cmp     esi, esp
.text:000035CC                 call    __RTC_CheckEsp
.text:000035D1                 neg     eax
.text:000035D3                 sbb     eax, eax
.text:000035D5                 add     eax, 1
.text:000035D8
.text:000035D8 loc_35D8:                               ; CODE XREF: operator==(wchar_t const *,UString2 const &)+20j
.text:000035D8                 pop     esi
.text:000035D9                 cmp     ebp, esp
.text:000035DB                 call    __RTC_CheckEsp
.text:000035E0                 pop     ebp
.text:000035E1                 retn    8
.text:000035E1 ??8@YG_NPB_WABVUString2@@@Z endp
.text:000035E1
.text:000035E1 ; ---------------------------------------------------------------------------
.text:000035E4                 align 10h
.text:000035F0
.text:000035F0 ; =============== S U B R O U T I N E =======================================
.text:000035F0
.text:000035F0 ; Attributes: bp-based frame
.text:000035F0
.text:000035F0 ; class AString __stdcall fs2fas(wchar_t const *)
.text:000035F0                 public ?fs2fas@@YG?AVAString@@PB_W@Z
.text:000035F0 ?fs2fas@@YG?AVAString@@PB_W@Z proc near
.text:000035F0
.text:000035F0 var_1C          = dword ptr -1Ch
.text:000035F0 var_18          = dword ptr -18h
.text:000035F0 var_14          = dword ptr -14h
.text:000035F0 var_10          = dword ptr -10h
.text:000035F0 var_C           = dword ptr -0Ch
.text:000035F0 var_4           = dword ptr -4
.text:000035F0 arg_0           = dword ptr  8
.text:000035F0 arg_4           = dword ptr  0Ch
.text:000035F0
.text:000035F0                 push    ebp
.text:000035F1                 mov     ebp, esp
.text:000035F3                 push    0FFFFFFFFh
.text:000035F5                 push    offset __ehhandler$?fs2fas@@YG?AVAString@@PB_W@Z
.text:000035FA                 mov     eax, large fs:0
.text:00003600                 push    eax
.text:00003601                 sub     esp, 10h
.text:00003604                 mov     eax, 0CCCCCCCCh
.text:00003609                 mov     [ebp+var_1C], eax
.text:0000360C                 mov     [ebp+var_18], eax
.text:0000360F                 mov     [ebp+var_14], eax
.text:00003612                 mov     [ebp+var_10], eax
.text:00003615                 mov     eax, dword ptr ds:___security_cookie
.text:0000361A                 xor     eax, ebp
.text:0000361C                 push    eax
.text:0000361D                 lea     eax, [ebp+var_C]
.text:00003620                 mov     large fs:0, eax
.text:00003626                 mov     [ebp+var_1C], 0
.text:0000362D                 mov     eax, [ebp+arg_4]
.text:00003630                 push    eax             ; wchar_t *
.text:00003631                 lea     ecx, [ebp+var_18]
.text:00003634                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00003639                 mov     [ebp+var_4], 1
.text:00003640                 call    ?GetCurrentCodePage@@YGIXZ ; GetCurrentCodePage(void)
.text:00003645                 push    eax
.text:00003646                 lea     ecx, [ebp+var_18]
.text:00003649                 push    ecx
.text:0000364A                 mov     edx, [ebp+arg_0]
.text:0000364D                 push    edx
.text:0000364E                 call    ?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z ; UnicodeStringToMultiByte(UString const &,uint)
.text:00003653                 mov     eax, [ebp+var_1C]
.text:00003656                 or      eax, 1
.text:00003659                 mov     [ebp+var_1C], eax
.text:0000365C                 mov     byte ptr [ebp+var_4], 0
.text:00003660                 lea     ecx, [ebp+var_18] ; this
.text:00003663                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00003668                 mov     eax, [ebp+arg_0]
.text:0000366B                 mov     ecx, [ebp+var_C]
.text:0000366E                 mov     large fs:0, ecx
.text:00003675                 pop     ecx
.text:00003676                 add     esp, 1Ch
.text:00003679                 cmp     ebp, esp
.text:0000367B                 call    __RTC_CheckEsp
.text:00003680                 mov     esp, ebp
.text:00003682                 pop     ebp
.text:00003683                 retn    8
.text:00003683 ?fs2fas@@YG?AVAString@@PB_W@Z endp
.text:00003683
.text:00003683 ; ---------------------------------------------------------------------------
.text:00003686                 align 10h
.text:00003690
.text:00003690 ; =============== S U B R O U T I N E =======================================
.text:00003690
.text:00003690 ; Attributes: bp-based frame
.text:00003690
.text:00003690 ; unsigned int __stdcall GetCurrentCodePage(void)
.text:00003690 ?GetCurrentCodePage@@YGIXZ proc near    ; CODE XREF: fs2fas(wchar_t const *)+50p
.text:00003690                                         ; fas2fs(AString const &)+12p
.text:00003690                 push    ebp
.text:00003691                 mov     ebp, esp
.text:00003693                 push    esi
.text:00003694                 mov     esi, esp
.text:00003696                 call    dword ptr ds:__imp__AreFileApisANSI@0 ; AreFileApisANSI()
.text:0000369C                 cmp     esi, esp
.text:0000369E                 call    __RTC_CheckEsp
.text:000036A3                 neg     eax
.text:000036A5                 sbb     eax, eax
.text:000036A7                 add     eax, 1
.text:000036AA                 pop     esi
.text:000036AB                 cmp     ebp, esp
.text:000036AD                 call    __RTC_CheckEsp
.text:000036B2                 pop     ebp
.text:000036B3                 retn
.text:000036B3 ?GetCurrentCodePage@@YGIXZ endp
.text:000036B3
.text:000036B3 ; ---------------------------------------------------------------------------
.text:000036B4                 align 10h
.text:000036C0
.text:000036C0 ; =============== S U B R O U T I N E =======================================
.text:000036C0
.text:000036C0 ; Attributes: bp-based frame
.text:000036C0
.text:000036C0 ; class UString __stdcall fas2fs(class AString const &)
.text:000036C0                 public ?fas2fs@@YG?AVUString@@ABVAString@@@Z
.text:000036C0 ?fas2fs@@YG?AVUString@@ABVAString@@@Z proc near
.text:000036C0
.text:000036C0 var_4           = dword ptr -4
.text:000036C0 arg_0           = dword ptr  8
.text:000036C0 arg_4           = dword ptr  0Ch
.text:000036C0
.text:000036C0                 push    ebp
.text:000036C1                 mov     ebp, esp
.text:000036C3                 push    ecx
.text:000036C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000036CB                 mov     [ebp+var_4], 0
.text:000036D2                 call    ?GetCurrentCodePage@@YGIXZ ; GetCurrentCodePage(void)
.text:000036D7                 push    eax
.text:000036D8                 mov     eax, [ebp+arg_4]
.text:000036DB                 push    eax
.text:000036DC                 mov     ecx, [ebp+arg_0]
.text:000036DF                 push    ecx
.text:000036E0                 call    ?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z ; MultiByteToUnicodeString(AString const &,uint)
.text:000036E5                 mov     edx, [ebp+var_4]
.text:000036E8                 or      edx, 1
.text:000036EB                 mov     [ebp+var_4], edx
.text:000036EE                 mov     eax, [ebp+arg_0]
.text:000036F1                 add     esp, 4
.text:000036F4                 cmp     ebp, esp
.text:000036F6                 call    __RTC_CheckEsp
.text:000036FB                 mov     esp, ebp
.text:000036FD                 pop     ebp
.text:000036FE                 retn    8
.text:000036FE ?fas2fs@@YG?AVUString@@ABVAString@@@Z endp
.text:000036FE
.text:000036FE ; ---------------------------------------------------------------------------
.text:00003701                 align 4
.text:00003701 _text           ends
.text:00003701
.rtc$TMZ:00003704 ; ===========================================================================
.rtc$TMZ:00003704
.rtc$TMZ:00003704 ; Segment type: Pure data
.rtc$TMZ:00003704 ; Segment permissions: Read
.rtc$TMZ:00003704 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00003704                 assume cs:_rtc$TMZ
.rtc$TMZ:00003704                 ;org 3704h
.rtc$TMZ:00003704 ; COMDAT (pick any)
.rtc$TMZ:00003704 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00003704 _rtc$TMZ        ends
.rtc$TMZ:00003704
.rtc$IMZ:00003708 ; ===========================================================================
.rtc$IMZ:00003708
.rtc$IMZ:00003708 ; Segment type: Pure data
.rtc$IMZ:00003708 ; Segment permissions: Read
.rtc$IMZ:00003708 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00003708                 assume cs:_rtc$IMZ
.rtc$IMZ:00003708                 ;org 3708h
.rtc$IMZ:00003708 ; COMDAT (pick any)
.rtc$IMZ:00003708 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00003708 _rtc$IMZ        ends
.rtc$IMZ:00003708
.text:0000370C ; ===========================================================================
.text:0000370C
.text:0000370C ; Segment type: Pure code
.text:0000370C ; Segment permissions: Read/Execute
.text:0000370C _text           segment para public 'CODE' use32
.text:0000370C                 assume cs:_text
.text:0000370C                 ;org 370Ch
.text:0000370C ; COMDAT (pick any)
.text:0000370C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000370C
.text:0000370C ; =============== S U B R O U T I N E =======================================
.text:0000370C
.text:0000370C ; Attributes: bp-based frame
.text:0000370C
.text:0000370C ; char __stdcall MyCharLower_Ascii(char)
.text:0000370C                 public ?MyCharLower_Ascii@@YGDD@Z
.text:0000370C ?MyCharLower_Ascii@@YGDD@Z proc near    ; CODE XREF: MyStringLower_Ascii(char *)+22p
.text:0000370C                                         ; AString::IsPrefixedBy_Ascii_NoCase(char const *)+5Ap ...
.text:0000370C
.text:0000370C arg_0           = byte ptr  8
.text:0000370C
.text:0000370C                 push    ebp
.text:0000370D                 mov     ebp, esp
.text:0000370F                 movsx   eax, [ebp+arg_0]
.text:00003713                 cmp     eax, 41h ; 'A'
.text:00003716                 jl      short loc_372A
.text:00003718                 movsx   ecx, [ebp+arg_0]
.text:0000371C                 cmp     ecx, 5Ah ; 'Z'
.text:0000371F                 jg      short loc_372A
.text:00003721                 movzx   eax, [ebp+arg_0]
.text:00003725                 add     eax, 20h ; ' '
.text:00003728                 jmp     short loc_372D
.text:0000372A ; ---------------------------------------------------------------------------
.text:0000372A
.text:0000372A loc_372A:                               ; CODE XREF: MyCharLower_Ascii(char)+Aj
.text:0000372A                                         ; MyCharLower_Ascii(char)+13j
.text:0000372A                 mov     al, [ebp+arg_0]
.text:0000372D
.text:0000372D loc_372D:                               ; CODE XREF: MyCharLower_Ascii(char)+1Cj
.text:0000372D                 pop     ebp
.text:0000372E                 retn    4
.text:0000372E ?MyCharLower_Ascii@@YGDD@Z endp
.text:0000372E
.text:0000372E ; ---------------------------------------------------------------------------
.text:00003731                 align 4
.text:00003731 _text           ends
.text:00003731
.text:00003734 ; ===========================================================================
.text:00003734
.text:00003734 ; Segment type: Pure code
.text:00003734 ; Segment permissions: Read/Execute
.text:00003734 _text           segment para public 'CODE' use32
.text:00003734                 assume cs:_text
.text:00003734                 ;org 3734h
.text:00003734 ; COMDAT (pick any)
.text:00003734                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003734
.text:00003734 ; =============== S U B R O U T I N E =======================================
.text:00003734
.text:00003734 ; Attributes: bp-based frame
.text:00003734
.text:00003734 ; wchar_t __stdcall MyCharLower_Ascii(wchar_t)
.text:00003734                 public ?MyCharLower_Ascii@@YG_W_W@Z
.text:00003734 ?MyCharLower_Ascii@@YG_W_W@Z proc near  ; CODE XREF: MyStringLower_Ascii(wchar_t *)+24p
.text:00003734                                         ; UString::IsPrefixedBy_Ascii_NoCase(char const *)+58p ...
.text:00003734
.text:00003734 arg_0           = word ptr  8
.text:00003734
.text:00003734                 push    ebp
.text:00003735                 mov     ebp, esp
.text:00003737                 movzx   eax, [ebp+arg_0]
.text:0000373B                 cmp     eax, 41h ; 'A'
.text:0000373E                 jl      short loc_3752
.text:00003740                 movzx   ecx, [ebp+arg_0]
.text:00003744                 cmp     ecx, 5Ah ; 'Z'
.text:00003747                 jg      short loc_3752
.text:00003749                 movzx   eax, [ebp+arg_0]
.text:0000374D                 add     eax, 20h ; ' '
.text:00003750                 jmp     short loc_3756
.text:00003752 ; ---------------------------------------------------------------------------
.text:00003752
.text:00003752 loc_3752:                               ; CODE XREF: MyCharLower_Ascii(wchar_t)+Aj
.text:00003752                                         ; MyCharLower_Ascii(wchar_t)+13j
.text:00003752                 mov     ax, [ebp+arg_0]
.text:00003756
.text:00003756 loc_3756:                               ; CODE XREF: MyCharLower_Ascii(wchar_t)+1Cj
.text:00003756                 pop     ebp
.text:00003757                 retn    4
.text:00003757 ?MyCharLower_Ascii@@YG_W_W@Z endp
.text:00003757
.text:00003757 ; ---------------------------------------------------------------------------
.text:0000375A                 align 4
.text:0000375A _text           ends
.text:0000375A
.text:0000375C ; ===========================================================================
.text:0000375C
.text:0000375C ; Segment type: Pure code
.text:0000375C ; Segment permissions: Read/Execute
.text:0000375C _text           segment para public 'CODE' use32
.text:0000375C                 assume cs:_text
.text:0000375C                 ;org 375Ch
.text:0000375C ; COMDAT (pick any)
.text:0000375C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000375C
.text:0000375C ; =============== S U B R O U T I N E =======================================
.text:0000375C
.text:0000375C ; Attributes: bp-based frame
.text:0000375C
.text:0000375C ; wchar_t __stdcall MyCharUpper(wchar_t)
.text:0000375C                 public ?MyCharUpper@@YG_W_W@Z
.text:0000375C ?MyCharUpper@@YG_W_W@Z proc near        ; CODE XREF: StringsAreEqualNoCase(wchar_t const *,wchar_t const *)+4Cp
.text:0000375C                                         ; StringsAreEqualNoCase(wchar_t const *,wchar_t const *)+59p ...
.text:0000375C
.text:0000375C arg_0           = word ptr  8
.text:0000375C
.text:0000375C                 push    ebp
.text:0000375D                 mov     ebp, esp
.text:0000375F                 movzx   eax, [ebp+arg_0]
.text:00003763                 cmp     eax, 61h ; 'a'
.text:00003766                 jge     short loc_376E
.text:00003768                 mov     ax, [ebp+arg_0]
.text:0000376C                 jmp     short loc_3799
.text:0000376E ; ---------------------------------------------------------------------------
.text:0000376E
.text:0000376E loc_376E:                               ; CODE XREF: MyCharUpper(wchar_t)+Aj
.text:0000376E                 movzx   ecx, [ebp+arg_0]
.text:00003772                 cmp     ecx, 7Ah ; 'z'
.text:00003775                 jg      short loc_3780
.text:00003777                 movzx   eax, [ebp+arg_0]
.text:0000377B                 sub     eax, 20h ; ' '
.text:0000377E                 jmp     short loc_3799
.text:00003780 ; ---------------------------------------------------------------------------
.text:00003780
.text:00003780 loc_3780:                               ; CODE XREF: MyCharUpper(wchar_t)+19j
.text:00003780                 movzx   edx, [ebp+arg_0]
.text:00003784                 cmp     edx, 7Fh ; ''
.text:00003787                 jg      short loc_378F
.text:00003789                 mov     ax, [ebp+arg_0]
.text:0000378D                 jmp     short loc_3799
.text:0000378F ; ---------------------------------------------------------------------------
.text:0000378F
.text:0000378F loc_378F:                               ; CODE XREF: MyCharUpper(wchar_t)+2Bj
.text:0000378F                 movzx   eax, [ebp+arg_0]
.text:00003793                 push    eax             ; WideCharStr
.text:00003794                 call    ?MyCharUpper_WIN@@YG_W_W@Z ; MyCharUpper_WIN(wchar_t)
.text:00003799
.text:00003799 loc_3799:                               ; CODE XREF: MyCharUpper(wchar_t)+10j
.text:00003799                                         ; MyCharUpper(wchar_t)+22j ...
.text:00003799                 cmp     ebp, esp
.text:0000379B                 call    __RTC_CheckEsp
.text:000037A0                 pop     ebp
.text:000037A1                 retn    4
.text:000037A1 ?MyCharUpper@@YG_W_W@Z endp
.text:000037A1
.text:000037A1 _text           ends
.text:000037A1
.text:000037A4 ; ===========================================================================
.text:000037A4
.text:000037A4 ; Segment type: Pure code
.text:000037A4 ; Segment permissions: Read/Execute
.text:000037A4 _text           segment para public 'CODE' use32
.text:000037A4                 assume cs:_text
.text:000037A4                 ;org 37A4h
.text:000037A4 ; COMDAT (pick any)
.text:000037A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000037A4
.text:000037A4 ; =============== S U B R O U T I N E =======================================
.text:000037A4
.text:000037A4 ; Attributes: bp-based frame
.text:000037A4
.text:000037A4 ; void __thiscall AString::MoveItems(AString *this, unsigned int, unsigned int)
.text:000037A4                 public ?MoveItems@AString@@AAEXII@Z
.text:000037A4 ?MoveItems@AString@@AAEXII@Z proc near  ; CODE XREF: AString::InsertSpace(uint &,uint)+2Cp
.text:000037A4                                         ; AString::TrimLeft(void)+6Ap ...
.text:000037A4
.text:000037A4 var_4           = dword ptr -4
.text:000037A4 arg_0           = dword ptr  8
.text:000037A4 arg_4           = dword ptr  0Ch
.text:000037A4
.text:000037A4                 push    ebp
.text:000037A5                 mov     ebp, esp
.text:000037A7                 push    ecx
.text:000037A8                 push    esi
.text:000037A9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000037B0                 mov     [ebp+var_4], ecx
.text:000037B3                 mov     eax, [ebp+var_4]
.text:000037B6                 mov     ecx, [eax+4]
.text:000037B9                 sub     ecx, [ebp+arg_4]
.text:000037BC                 add     ecx, 1
.text:000037BF                 mov     esi, esp
.text:000037C1                 push    ecx             ; Size
.text:000037C2                 mov     edx, [ebp+var_4]
.text:000037C5                 mov     eax, [edx]
.text:000037C7                 add     eax, [ebp+arg_4]
.text:000037CA                 push    eax             ; Src
.text:000037CB                 mov     ecx, [ebp+var_4]
.text:000037CE                 mov     edx, [ecx]
.text:000037D0                 add     edx, [ebp+arg_0]
.text:000037D3                 push    edx             ; Dst
.text:000037D4                 call    dword ptr ds:__imp__memmove
.text:000037DA                 add     esp, 0Ch
.text:000037DD                 cmp     esi, esp
.text:000037DF                 call    __RTC_CheckEsp
.text:000037E4                 pop     esi
.text:000037E5                 add     esp, 4
.text:000037E8                 cmp     ebp, esp
.text:000037EA                 call    __RTC_CheckEsp
.text:000037EF                 mov     esp, ebp
.text:000037F1                 pop     ebp
.text:000037F2                 retn    8
.text:000037F2 ?MoveItems@AString@@AAEXII@Z endp
.text:000037F2
.text:000037F2 ; ---------------------------------------------------------------------------
.text:000037F5                 align 4
.text:000037F5 _text           ends
.text:000037F5
.xdata$x:000037F8 ; ===========================================================================
.xdata$x:000037F8
.xdata$x:000037F8 ; Segment type: Pure data
.xdata$x:000037F8 ; Segment permissions: Read
.xdata$x:000037F8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000037F8                 assume cs:_xdata$x
.xdata$x:000037F8                 ;org 37F8h
.xdata$x:000037F8 ; COMDAT (pick any)
.xdata$x:000037F8                 public __TI1H
.xdata$x:000037F8 __TI1H          db    0                 ; DATA XREF: AString::ReAlloc(uint)+38o
.xdata$x:000037F8                                         ; AString::ReAlloc2(uint)+2Do ...
.xdata$x:000037F9                 db    0
.xdata$x:000037FA                 db    0
.xdata$x:000037FB                 db    0
.xdata$x:000037FC                 db    0
.xdata$x:000037FD                 db    0
.xdata$x:000037FE                 db    0
.xdata$x:000037FF                 db    0
.xdata$x:00003800                 db    0
.xdata$x:00003801                 db    0
.xdata$x:00003802                 db    0
.xdata$x:00003803                 db    0
.xdata$x:00003804                 dd offset __CTA1H
.xdata$x:00003804 _xdata$x        ends
.xdata$x:00003804
.xdata$x:00003808 ; ===========================================================================
.xdata$x:00003808
.xdata$x:00003808 ; Segment type: Pure data
.xdata$x:00003808 ; Segment permissions: Read
.xdata$x:00003808 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003808                 assume cs:_xdata$x
.xdata$x:00003808                 ;org 3808h
.xdata$x:00003808 ; COMDAT (pick any)
.xdata$x:00003808                 public __CTA1H
.xdata$x:00003808 __CTA1H         db    1                 ; DATA XREF: .xdata$x:00003804o
.xdata$x:00003809                 db    0
.xdata$x:0000380A                 db    0
.xdata$x:0000380B                 db    0
.xdata$x:0000380C                 dd offset __CT??_R0H@84
.xdata$x:0000380C _xdata$x        ends
.xdata$x:0000380C
.xdata$x:00003810 ; ===========================================================================
.xdata$x:00003810
.xdata$x:00003810 ; Segment type: Pure data
.xdata$x:00003810 ; Segment permissions: Read
.xdata$x:00003810 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003810                 assume cs:_xdata$x
.xdata$x:00003810                 ;org 3810h
.xdata$x:00003810 ; COMDAT (pick any)
.xdata$x:00003810                 public __CT??_R0H@84
.xdata$x:00003810 __CT??_R0H@84   db    1                 ; DATA XREF: .xdata$x:0000380Co
.xdata$x:00003811                 db    0
.xdata$x:00003812                 db    0
.xdata$x:00003813                 db    0
.xdata$x:00003814                 dd offset ??_R0H@8      ; int `RTTI Type Descriptor'
.xdata$x:00003818                 db    0
.xdata$x:00003819                 db    0
.xdata$x:0000381A                 db    0
.xdata$x:0000381B                 db    0
.xdata$x:0000381C                 db 0FFh
.xdata$x:0000381D                 db 0FFh
.xdata$x:0000381E                 db 0FFh
.xdata$x:0000381F                 db 0FFh
.xdata$x:00003820                 db    0
.xdata$x:00003821                 db    0
.xdata$x:00003822                 db    0
.xdata$x:00003823                 db    0
.xdata$x:00003824                 db    4
.xdata$x:00003825                 db    0
.xdata$x:00003826                 db    0
.xdata$x:00003827                 db    0
.xdata$x:00003828                 db    0
.xdata$x:00003829                 db    0
.xdata$x:0000382A                 db    0
.xdata$x:0000382B                 db    0
.xdata$x:0000382B _xdata$x        ends
.xdata$x:0000382B
.data:0000382C ; ===========================================================================
.data:0000382C
.data:0000382C ; Segment type: Pure data
.data:0000382C ; Segment permissions: Read/Write
.data:0000382C _data           segment dword public 'DATA' use32
.data:0000382C                 assume cs:_data
.data:0000382C                 ;org 382Ch
.data:0000382C ; COMDAT (pick any)
.data:0000382C                 public ??_R0H@8
.data:0000382C ; int `RTTI Type Descriptor'
.data:0000382C ??_R0H@8        dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:00003814o
.data:0000382C                                         ; const type_info::`vftable'
.data:00003830                 db    0
.data:00003831                 db    0
.data:00003832                 db    0
.data:00003833                 db    0
.data:00003834                 db  2Eh ; .
.data:00003835                 db  48h ; H
.data:00003836                 db    0
.data:00003837                 align 4
.data:00003837 _data           ends
.data:00003837
.text:00003838 ; ===========================================================================
.text:00003838
.text:00003838 ; Segment type: Pure code
.text:00003838 ; Segment permissions: Read/Execute
.text:00003838 _text           segment para public 'CODE' use32
.text:00003838                 assume cs:_text
.text:00003838                 ;org 3838h
.text:00003838 ; COMDAT (pick any)
.text:00003838                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003838
.text:00003838 ; =============== S U B R O U T I N E =======================================
.text:00003838
.text:00003838 ; Attributes: bp-based frame
.text:00003838
.text:00003838 ; unsigned int __thiscall AString::Len(AString *__hidden this)
.text:00003838                 public ?Len@AString@@QBEIXZ
.text:00003838 ?Len@AString@@QBEIXZ proc near          ; CODE XREF: AString::AString(AString const &,char)+21p
.text:00003838                                         ; AString::AString(AString const &,char)+3Dp ...
.text:00003838
.text:00003838 var_4           = dword ptr -4
.text:00003838
.text:00003838                 push    ebp
.text:00003839                 mov     ebp, esp
.text:0000383B                 push    ecx
.text:0000383C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003843                 mov     [ebp+var_4], ecx
.text:00003846                 mov     eax, [ebp+var_4]
.text:00003849                 mov     eax, [eax+4]
.text:0000384C                 mov     esp, ebp
.text:0000384E                 pop     ebp
.text:0000384F                 retn
.text:0000384F ?Len@AString@@QBEIXZ endp
.text:0000384F
.text:0000384F _text           ends
.text:0000384F
.text:00003850 ; ===========================================================================
.text:00003850
.text:00003850 ; Segment type: Pure code
.text:00003850 ; Segment permissions: Read/Execute
.text:00003850 _text           segment para public 'CODE' use32
.text:00003850                 assume cs:_text
.text:00003850                 ;org 3850h
.text:00003850 ; COMDAT (pick any)
.text:00003850                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003850
.text:00003850 ; =============== S U B R O U T I N E =======================================
.text:00003850
.text:00003850 ; Attributes: bp-based frame
.text:00003850
.text:00003850 ; public: __thiscall AString::operator char const *(void)const
.text:00003850                 public ??BAString@@QBEPBDXZ
.text:00003850 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: AString::AString(AString const &,char)+4Cp
.text:00003850                                         ; operator+(AString const &,AString const &)+1Ep ...
.text:00003850
.text:00003850 var_4           = dword ptr -4
.text:00003850
.text:00003850                 push    ebp
.text:00003851                 mov     ebp, esp
.text:00003853                 push    ecx
.text:00003854                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000385B                 mov     [ebp+var_4], ecx
.text:0000385E                 mov     eax, [ebp+var_4]
.text:00003861                 mov     eax, [eax]
.text:00003863                 mov     esp, ebp
.text:00003865                 pop     ebp
.text:00003866                 retn
.text:00003866 ??BAString@@QBEPBDXZ endp
.text:00003866
.text:00003866 ; ---------------------------------------------------------------------------
.text:00003867                 align 4
.text:00003867 _text           ends
.text:00003867
.text:00003868 ; ===========================================================================
.text:00003868
.text:00003868 ; Segment type: Pure code
.text:00003868 ; Segment permissions: Read/Execute
.text:00003868 _text           segment para public 'CODE' use32
.text:00003868                 assume cs:_text
.text:00003868                 ;org 3868h
.text:00003868 ; COMDAT (pick any)
.text:00003868                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003868
.text:00003868 ; =============== S U B R O U T I N E =======================================
.text:00003868
.text:00003868 ; Attributes: bp-based frame
.text:00003868
.text:00003868 ; unsigned int __stdcall MyStringLen(const char *)
.text:00003868                 public ?MyStringLen@@YGIPBD@Z
.text:00003868 ?MyStringLen@@YGIPBD@Z proc near        ; CODE XREF: operator+(AString const &,char const *)+16p
.text:00003868                                         ; operator+(char const *,AString const &)+28p ...
.text:00003868
.text:00003868 var_4           = dword ptr -4
.text:00003868 arg_0           = dword ptr  8
.text:00003868
.text:00003868                 push    ebp
.text:00003869                 mov     ebp, esp
.text:0000386B                 push    ecx
.text:0000386C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003873                 mov     [ebp+var_4], 0
.text:0000387A                 jmp     short loc_3885
.text:0000387C ; ---------------------------------------------------------------------------
.text:0000387C
.text:0000387C loc_387C:                               ; CODE XREF: MyStringLen(char const *)+2Aj
.text:0000387C                 mov     eax, [ebp+var_4]
.text:0000387F                 add     eax, 1
.text:00003882                 mov     [ebp+var_4], eax
.text:00003885
.text:00003885 loc_3885:                               ; CODE XREF: MyStringLen(char const *)+12j
.text:00003885                 mov     ecx, [ebp+arg_0]
.text:00003888                 add     ecx, [ebp+var_4]
.text:0000388B                 movsx   edx, byte ptr [ecx]
.text:0000388E                 test    edx, edx
.text:00003890                 jz      short loc_3894
.text:00003892                 jmp     short loc_387C
.text:00003894 ; ---------------------------------------------------------------------------
.text:00003894
.text:00003894 loc_3894:                               ; CODE XREF: MyStringLen(char const *)+28j
.text:00003894                 mov     eax, [ebp+var_4]
.text:00003897                 mov     esp, ebp
.text:00003899                 pop     ebp
.text:0000389A                 retn    4
.text:0000389A ?MyStringLen@@YGIPBD@Z endp
.text:0000389A
.text:0000389A ; ---------------------------------------------------------------------------
.text:0000389D                 align 10h
.text:0000389D _text           ends
.text:0000389D
.text:000038A0 ; ===========================================================================
.text:000038A0
.text:000038A0 ; Segment type: Pure code
.text:000038A0 ; Segment permissions: Read/Execute
.text:000038A0 _text           segment para public 'CODE' use32
.text:000038A0                 assume cs:_text
.text:000038A0                 ;org 38A0h
.text:000038A0 ; COMDAT (pick any)
.text:000038A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000038A0
.text:000038A0 ; =============== S U B R O U T I N E =======================================
.text:000038A0
.text:000038A0 ; Attributes: bp-based frame
.text:000038A0
.text:000038A0 ; void __stdcall MyStringCopy(char *, const char *)
.text:000038A0                 public ?MyStringCopy@@YGXPADPBD@Z
.text:000038A0 ?MyStringCopy@@YGXPADPBD@Z proc near    ; CODE XREF: AString::AString(char const *)+2Ap
.text:000038A0                                         ; AString::AString(AString const &)+29p ...
.text:000038A0
.text:000038A0 var_4           = dword ptr -4
.text:000038A0 arg_0           = dword ptr  8
.text:000038A0 arg_4           = dword ptr  0Ch
.text:000038A0
.text:000038A0                 push    ebp
.text:000038A1                 mov     ebp, esp
.text:000038A3                 push    ecx
.text:000038A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000038AB
.text:000038AB loc_38AB:                               ; CODE XREF: MyStringCopy(char *,char const *)+47j
.text:000038AB                 mov     eax, [ebp+arg_0]
.text:000038AE                 mov     ecx, [ebp+arg_4]
.text:000038B1                 mov     dl, [ecx]
.text:000038B3                 mov     [eax], dl
.text:000038B5                 mov     eax, [ebp+arg_0]
.text:000038B8                 movsx   ecx, byte ptr [eax]
.text:000038BB                 mov     edx, [ebp+arg_0]
.text:000038BE                 add     edx, 1
.text:000038C1                 mov     [ebp+arg_0], edx
.text:000038C4                 mov     eax, [ebp+arg_4]
.text:000038C7                 add     eax, 1
.text:000038CA                 mov     [ebp+arg_4], eax
.text:000038CD                 test    ecx, ecx
.text:000038CF                 jz      short loc_38DA
.text:000038D1                 mov     [ebp+var_4], 1
.text:000038D8                 jmp     short loc_38E1
.text:000038DA ; ---------------------------------------------------------------------------
.text:000038DA
.text:000038DA loc_38DA:                               ; CODE XREF: MyStringCopy(char *,char const *)+2Fj
.text:000038DA                 mov     [ebp+var_4], 0
.text:000038E1
.text:000038E1 loc_38E1:                               ; CODE XREF: MyStringCopy(char *,char const *)+38j
.text:000038E1                 cmp     [ebp+var_4], 0
.text:000038E5                 jz      short loc_38E9
.text:000038E7                 jmp     short loc_38AB
.text:000038E9 ; ---------------------------------------------------------------------------
.text:000038E9
.text:000038E9 loc_38E9:                               ; CODE XREF: MyStringCopy(char *,char const *)+45j
.text:000038E9                 mov     esp, ebp
.text:000038EB                 pop     ebp
.text:000038EC                 retn    8
.text:000038EC ?MyStringCopy@@YGXPADPBD@Z endp
.text:000038EC
.text:000038EC ; ---------------------------------------------------------------------------
.text:000038EF                 align 10h
.text:000038EF _text           ends
.text:000038EF
.text:000038F0 ; ===========================================================================
.text:000038F0
.text:000038F0 ; Segment type: Pure code
.text:000038F0 ; Segment permissions: Read/Execute
.text:000038F0 _text           segment para public 'CODE' use32
.text:000038F0                 assume cs:_text
.text:000038F0                 ;org 38F0h
.text:000038F0 ; COMDAT (pick any)
.text:000038F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000038F0
.text:000038F0 ; =============== S U B R O U T I N E =======================================
.text:000038F0
.text:000038F0 ; Attributes: bp-based frame
.text:000038F0
.text:000038F0 ; public: class AString & __thiscall AString::operator+=(char)
.text:000038F0                 public ??YAString@@QAEAAV0@D@Z
.text:000038F0 ??YAString@@QAEAAV0@D@Z proc near       ; CODE XREF: AString::Add_Space(void)+13p
.text:000038F0                                         ; AString::Add_LF(void)+13p
.text:000038F0
.text:000038F0 var_C           = dword ptr -0Ch
.text:000038F0 var_8           = dword ptr -8
.text:000038F0 var_4           = dword ptr -4
.text:000038F0 arg_0           = byte ptr  8
.text:000038F0
.text:000038F0                 push    ebp
.text:000038F1                 mov     ebp, esp
.text:000038F3                 sub     esp, 0Ch
.text:000038F6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000038FD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003904                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000390B                 mov     [ebp+var_4], ecx
.text:0000390E                 mov     eax, [ebp+var_4]
.text:00003911                 mov     ecx, [ebp+var_4]
.text:00003914                 mov     edx, [eax+8]
.text:00003917                 cmp     edx, [ecx+4]
.text:0000391A                 jnz     short loc_3924
.text:0000391C                 mov     ecx, [ebp+var_4] ; this
.text:0000391F                 call    ?Grow_1@AString@@AAEXXZ ; AString::Grow_1(void)
.text:00003924
.text:00003924 loc_3924:                               ; CODE XREF: AString::operator+=(char)+2Aj
.text:00003924                 mov     eax, [ebp+var_4]
.text:00003927                 mov     ecx, [eax+4]
.text:0000392A                 mov     [ebp+var_8], ecx
.text:0000392D                 mov     edx, [ebp+var_4]
.text:00003930                 mov     eax, [edx]
.text:00003932                 mov     [ebp+var_C], eax
.text:00003935                 mov     ecx, [ebp+var_C]
.text:00003938                 add     ecx, [ebp+var_8]
.text:0000393B                 mov     dl, [ebp+arg_0]
.text:0000393E                 mov     [ecx], dl
.text:00003940                 mov     eax, [ebp+var_8]
.text:00003943                 add     eax, 1
.text:00003946                 mov     [ebp+var_8], eax
.text:00003949                 mov     ecx, [ebp+var_C]
.text:0000394C                 add     ecx, [ebp+var_8]
.text:0000394F                 mov     byte ptr [ecx], 0
.text:00003952                 mov     edx, [ebp+var_4]
.text:00003955                 mov     eax, [ebp+var_8]
.text:00003958                 mov     [edx+4], eax
.text:0000395B                 mov     eax, [ebp+var_4]
.text:0000395E                 add     esp, 0Ch
.text:00003961                 cmp     ebp, esp
.text:00003963                 call    __RTC_CheckEsp
.text:00003968                 mov     esp, ebp
.text:0000396A                 pop     ebp
.text:0000396B                 retn    4
.text:0000396B ??YAString@@QAEAAV0@D@Z endp
.text:0000396B
.text:0000396B ; ---------------------------------------------------------------------------
.text:0000396E                 align 10h
.text:0000396E _text           ends
.text:0000396E
.text:00003970 ; ===========================================================================
.text:00003970
.text:00003970 ; Segment type: Pure code
.text:00003970 ; Segment permissions: Read/Execute
.text:00003970 _text           segment para public 'CODE' use32
.text:00003970                 assume cs:_text
.text:00003970                 ;org 3970h
.text:00003970 ; COMDAT (pick any)
.text:00003970                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003970
.text:00003970 ; =============== S U B R O U T I N E =======================================
.text:00003970
.text:00003970 ; Attributes: bp-based frame
.text:00003970
.text:00003970 ; bool __thiscall AString::IsEmpty(AString *__hidden this)
.text:00003970                 public ?IsEmpty@AString@@QBE_NXZ
.text:00003970 ?IsEmpty@AString@@QBE_NXZ proc near     ; CODE XREF: AString::Add_Space_if_NotEmpty(void)+11p
.text:00003970                                         ; AString::Replace(AString const &,AString const &)+1Dp
.text:00003970
.text:00003970 var_4           = dword ptr -4
.text:00003970
.text:00003970                 push    ebp
.text:00003971                 mov     ebp, esp
.text:00003973                 push    ecx
.text:00003974                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000397B                 mov     [ebp+var_4], ecx
.text:0000397E                 mov     eax, [ebp+var_4]
.text:00003981                 xor     ecx, ecx
.text:00003983                 cmp     dword ptr [eax+4], 0
.text:00003987                 setz    cl
.text:0000398A                 mov     al, cl
.text:0000398C                 mov     esp, ebp
.text:0000398E                 pop     ebp
.text:0000398F                 retn
.text:0000398F ?IsEmpty@AString@@QBE_NXZ endp
.text:0000398F
.text:0000398F _text           ends
.text:0000398F
.text:00003990 ; ===========================================================================
.text:00003990
.text:00003990 ; Segment type: Pure code
.text:00003990 ; Segment permissions: Read/Execute
.text:00003990 _text           segment para public 'CODE' use32
.text:00003990                 assume cs:_text
.text:00003990                 ;org 3990h
.text:00003990 ; COMDAT (pick any)
.text:00003990                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003990
.text:00003990 ; =============== S U B R O U T I N E =======================================
.text:00003990
.text:00003990 ; Attributes: bp-based frame
.text:00003990
.text:00003990 ; char *__cdecl strstr(char *Str, const char *SubStr)
.text:00003990                 public ?strstr@@YAPADPADPBD@Z
.text:00003990 ?strstr@@YAPADPADPBD@Z proc near        ; CODE XREF: AString::Find(char const *,uint)+24p
.text:00003990
.text:00003990 Str             = dword ptr  8
.text:00003990 SubStr          = dword ptr  0Ch
.text:00003990
.text:00003990                 push    ebp
.text:00003991                 mov     ebp, esp
.text:00003993                 push    esi
.text:00003994                 mov     esi, esp
.text:00003996                 mov     eax, [ebp+SubStr]
.text:00003999                 push    eax             ; SubStr
.text:0000399A                 mov     ecx, [ebp+Str]
.text:0000399D                 push    ecx             ; Str
.text:0000399E                 call    dword ptr ds:__imp__strstr
.text:000039A4                 add     esp, 8
.text:000039A7                 cmp     esi, esp
.text:000039A9                 call    __RTC_CheckEsp
.text:000039AE                 pop     esi
.text:000039AF                 cmp     ebp, esp
.text:000039B1                 call    __RTC_CheckEsp
.text:000039B6                 pop     ebp
.text:000039B7                 retn
.text:000039B7 ?strstr@@YAPADPADPBD@Z endp
.text:000039B7
.text:000039B7 _text           ends
.text:000039B7
.text:000039B8 ; ===========================================================================
.text:000039B8
.text:000039B8 ; Segment type: Pure code
.text:000039B8 ; Segment permissions: Read/Execute
.text:000039B8 _text           segment para public 'CODE' use32
.text:000039B8                 assume cs:_text
.text:000039B8                 ;org 39B8h
.text:000039B8 ; COMDAT (pick any)
.text:000039B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000039B8
.text:000039B8 ; =============== S U B R O U T I N E =======================================
.text:000039B8
.text:000039B8 ; Attributes: bp-based frame
.text:000039B8
.text:000039B8 ; int __thiscall AString::Find(AString *this, char, unsigned int)
.text:000039B8                 public ?Find@AString@@QBEHDI@Z
.text:000039B8 ?Find@AString@@QBEHDI@Z proc near       ; CODE XREF: AString::Replace(char,char)+43p
.text:000039B8
.text:000039B8 var_C           = dword ptr -0Ch
.text:000039B8 var_8           = dword ptr -8
.text:000039B8 var_4           = dword ptr -4
.text:000039B8 arg_0           = byte ptr  8
.text:000039B8 arg_4           = dword ptr  0Ch
.text:000039B8
.text:000039B8                 push    ebp
.text:000039B9                 mov     ebp, esp
.text:000039BB                 sub     esp, 0Ch
.text:000039BE                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000039C5                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000039CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000039D3                 mov     [ebp+var_4], ecx
.text:000039D6                 movzx   eax, [ebp+arg_0]
.text:000039DA                 push    eax             ; char
.text:000039DB                 mov     ecx, [ebp+var_4]
.text:000039DE                 mov     edx, [ecx]
.text:000039E0                 add     edx, [ebp+arg_4]
.text:000039E3                 push    edx             ; char *
.text:000039E4                 call    ?FindCharPosInString@@YGHPBDD@Z ; FindCharPosInString(char const *,char)
.text:000039E9                 mov     [ebp+var_8], eax
.text:000039EC                 cmp     [ebp+var_8], 0
.text:000039F0                 jge     short loc_39FB
.text:000039F2                 mov     [ebp+var_C], 0FFFFFFFFh
.text:000039F9                 jmp     short loc_3A04
.text:000039FB ; ---------------------------------------------------------------------------
.text:000039FB
.text:000039FB loc_39FB:                               ; CODE XREF: AString::Find(char,uint)+38j
.text:000039FB                 mov     eax, [ebp+arg_4]
.text:000039FE                 add     eax, [ebp+var_8]
.text:00003A01                 mov     [ebp+var_C], eax
.text:00003A04
.text:00003A04 loc_3A04:                               ; CODE XREF: AString::Find(char,uint)+41j
.text:00003A04                 mov     eax, [ebp+var_C]
.text:00003A07                 add     esp, 0Ch
.text:00003A0A                 cmp     ebp, esp
.text:00003A0C                 call    __RTC_CheckEsp
.text:00003A11                 mov     esp, ebp
.text:00003A13                 pop     ebp
.text:00003A14                 retn    8
.text:00003A14 ?Find@AString@@QBEHDI@Z endp
.text:00003A14
.text:00003A14 ; ---------------------------------------------------------------------------
.text:00003A17                 align 4
.text:00003A17 _text           ends
.text:00003A17
.text:00003A18 ; ===========================================================================
.text:00003A18
.text:00003A18 ; Segment type: Pure code
.text:00003A18 ; Segment permissions: Read/Execute
.text:00003A18 _text           segment para public 'CODE' use32
.text:00003A18                 assume cs:_text
.text:00003A18                 ;org 3A18h
.text:00003A18 ; COMDAT (pick any)
.text:00003A18                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A18
.text:00003A18 ; =============== S U B R O U T I N E =======================================
.text:00003A18
.text:00003A18 ; Attributes: bp-based frame
.text:00003A18
.text:00003A18 ; int __stdcall operator==(AString *, AString *)
.text:00003A18                 public ??8@YG_NABVAString@@0@Z
.text:00003A18 ??8@YG_NABVAString@@0@Z proc near       ; CODE XREF: AString::Replace(AString const &,AString const &)+36p
.text:00003A18
.text:00003A18 var_4           = dword ptr -4
.text:00003A18 arg_0           = dword ptr  8
.text:00003A18 arg_4           = dword ptr  0Ch
.text:00003A18
.text:00003A18                 push    ebp
.text:00003A19                 mov     ebp, esp
.text:00003A1B                 push    ecx
.text:00003A1C                 push    esi
.text:00003A1D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A24                 mov     ecx, [ebp+arg_0] ; this
.text:00003A27                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00003A2C                 mov     esi, eax
.text:00003A2E                 mov     ecx, [ebp+arg_4] ; this
.text:00003A31                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00003A36                 cmp     esi, eax
.text:00003A38                 jnz     short loc_3A61
.text:00003A3A                 mov     ecx, [ebp+arg_4]
.text:00003A3D                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00003A42                 push    eax             ; Str2
.text:00003A43                 mov     ecx, [ebp+arg_0]
.text:00003A46                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00003A4B                 push    eax             ; Str1
.text:00003A4C                 call    _strcmp
.text:00003A51                 add     esp, 8
.text:00003A54                 test    eax, eax
.text:00003A56                 jnz     short loc_3A61
.text:00003A58                 mov     [ebp+var_4], 1
.text:00003A5F                 jmp     short loc_3A68
.text:00003A61 ; ---------------------------------------------------------------------------
.text:00003A61
.text:00003A61 loc_3A61:                               ; CODE XREF: operator==(AString const &,AString const &)+20j
.text:00003A61                                         ; operator==(AString const &,AString const &)+3Ej
.text:00003A61                 mov     [ebp+var_4], 0
.text:00003A68
.text:00003A68 loc_3A68:                               ; CODE XREF: operator==(AString const &,AString const &)+47j
.text:00003A68                 mov     al, byte ptr [ebp+var_4]
.text:00003A6B                 pop     esi
.text:00003A6C                 add     esp, 4
.text:00003A6F                 cmp     ebp, esp
.text:00003A71                 call    __RTC_CheckEsp
.text:00003A76                 mov     esp, ebp
.text:00003A78                 pop     ebp
.text:00003A79                 retn    8
.text:00003A79 ??8@YG_NABVAString@@0@Z endp
.text:00003A79
.text:00003A79 _text           ends
.text:00003A79
.text:00003A7C ; ===========================================================================
.text:00003A7C
.text:00003A7C ; Segment type: Pure code
.text:00003A7C ; Segment permissions: Read/Execute
.text:00003A7C _text           segment para public 'CODE' use32
.text:00003A7C                 assume cs:_text
.text:00003A7C                 ;org 3A7Ch
.text:00003A7C ; COMDAT (pick any)
.text:00003A7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A7C
.text:00003A7C ; =============== S U B R O U T I N E =======================================
.text:00003A7C
.text:00003A7C ; Attributes: bp-based frame
.text:00003A7C
.text:00003A7C ; void __thiscall UString::MoveItems(UString *this, unsigned int, unsigned int)
.text:00003A7C                 public ?MoveItems@UString@@AAEXII@Z
.text:00003A7C ?MoveItems@UString@@AAEXII@Z proc near  ; CODE XREF: UString::InsertSpace(uint,uint)+28p
.text:00003A7C                                         ; UString::TrimLeft(void)+6Ep ...
.text:00003A7C
.text:00003A7C var_4           = dword ptr -4
.text:00003A7C arg_0           = dword ptr  8
.text:00003A7C arg_4           = dword ptr  0Ch
.text:00003A7C
.text:00003A7C                 push    ebp
.text:00003A7D                 mov     ebp, esp
.text:00003A7F                 push    ecx
.text:00003A80                 push    esi
.text:00003A81                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A88                 mov     [ebp+var_4], ecx
.text:00003A8B                 mov     eax, [ebp+var_4]
.text:00003A8E                 mov     ecx, [eax+4]
.text:00003A91                 sub     ecx, [ebp+arg_4]
.text:00003A94                 lea     edx, [ecx+ecx+2]
.text:00003A98                 mov     esi, esp
.text:00003A9A                 push    edx             ; Size
.text:00003A9B                 mov     eax, [ebp+var_4]
.text:00003A9E                 mov     ecx, [eax]
.text:00003AA0                 mov     edx, [ebp+arg_4]
.text:00003AA3                 lea     eax, [ecx+edx*2]
.text:00003AA6                 push    eax             ; Src
.text:00003AA7                 mov     ecx, [ebp+var_4]
.text:00003AAA                 mov     edx, [ecx]
.text:00003AAC                 mov     eax, [ebp+arg_0]
.text:00003AAF                 lea     ecx, [edx+eax*2]
.text:00003AB2                 push    ecx             ; Dst
.text:00003AB3                 call    dword ptr ds:__imp__memmove
.text:00003AB9                 add     esp, 0Ch
.text:00003ABC                 cmp     esi, esp
.text:00003ABE                 call    __RTC_CheckEsp
.text:00003AC3                 pop     esi
.text:00003AC4                 add     esp, 4
.text:00003AC7                 cmp     ebp, esp
.text:00003AC9                 call    __RTC_CheckEsp
.text:00003ACE                 mov     esp, ebp
.text:00003AD0                 pop     ebp
.text:00003AD1                 retn    8
.text:00003AD1 ?MoveItems@UString@@AAEXII@Z endp
.text:00003AD1
.text:00003AD1 _text           ends
.text:00003AD1
.text:00003AD4 ; ===========================================================================
.text:00003AD4
.text:00003AD4 ; Segment type: Pure code
.text:00003AD4 ; Segment permissions: Read/Execute
.text:00003AD4 _text           segment para public 'CODE' use32
.text:00003AD4                 assume cs:_text
.text:00003AD4                 ;org 3AD4h
.text:00003AD4 ; COMDAT (pick any)
.text:00003AD4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003AD4
.text:00003AD4 ; =============== S U B R O U T I N E =======================================
.text:00003AD4
.text:00003AD4 ; Attributes: bp-based frame
.text:00003AD4
.text:00003AD4 ; int __cdecl wmemcpy(void *Dst, void *Src, int)
.text:00003AD4                 public _wmemcpy
.text:00003AD4 _wmemcpy        proc near               ; CODE XREF: UString::ReAlloc(uint)+82p
.text:00003AD4                                         ; UString::UString(uint,wchar_t const *)+4Bp ...
.text:00003AD4
.text:00003AD4 Dst             = dword ptr  8
.text:00003AD4 Src             = dword ptr  0Ch
.text:00003AD4 arg_8           = dword ptr  10h
.text:00003AD4
.text:00003AD4                 push    ebp
.text:00003AD5                 mov     ebp, esp
.text:00003AD7                 mov     eax, [ebp+arg_8]
.text:00003ADA                 shl     eax, 1
.text:00003ADC                 push    eax             ; Size
.text:00003ADD                 mov     ecx, [ebp+Src]
.text:00003AE0                 push    ecx             ; Src
.text:00003AE1                 mov     edx, [ebp+Dst]
.text:00003AE4                 push    edx             ; Dst
.text:00003AE5                 call    _memcpy
.text:00003AEA                 add     esp, 0Ch
.text:00003AED                 cmp     ebp, esp
.text:00003AEF                 call    __RTC_CheckEsp
.text:00003AF4                 pop     ebp
.text:00003AF5                 retn
.text:00003AF5 _wmemcpy        endp
.text:00003AF5
.text:00003AF5 ; ---------------------------------------------------------------------------
.text:00003AF6                 align 4
.text:00003AF6 _text           ends
.text:00003AF6
.text:00003AF8 ; ===========================================================================
.text:00003AF8
.text:00003AF8 ; Segment type: Pure code
.text:00003AF8 ; Segment permissions: Read/Execute
.text:00003AF8 _text           segment para public 'CODE' use32
.text:00003AF8                 assume cs:_text
.text:00003AF8                 ;org 3AF8h
.text:00003AF8 ; COMDAT (pick any)
.text:00003AF8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003AF8
.text:00003AF8 ; =============== S U B R O U T I N E =======================================
.text:00003AF8
.text:00003AF8 ; Attributes: bp-based frame
.text:00003AF8
.text:00003AF8 ; unsigned int __stdcall MyStringLen(const wchar_t *)
.text:00003AF8                 public ?MyStringLen@@YGIPB_W@Z
.text:00003AF8 ?MyStringLen@@YGIPB_W@Z proc near       ; CODE XREF: UString::UString(uint,wchar_t const *)+1Bp
.text:00003AF8                                         ; operator+(UString const &,wchar_t const *)+16p ...
.text:00003AF8
.text:00003AF8 var_4           = dword ptr -4
.text:00003AF8 arg_0           = dword ptr  8
.text:00003AF8
.text:00003AF8                 push    ebp
.text:00003AF9                 mov     ebp, esp
.text:00003AFB                 push    ecx
.text:00003AFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B03                 mov     [ebp+var_4], 0
.text:00003B0A                 jmp     short loc_3B15
.text:00003B0C ; ---------------------------------------------------------------------------
.text:00003B0C
.text:00003B0C loc_3B0C:                               ; CODE XREF: MyStringLen(wchar_t const *)+2Bj
.text:00003B0C                 mov     eax, [ebp+var_4]
.text:00003B0F                 add     eax, 1
.text:00003B12                 mov     [ebp+var_4], eax
.text:00003B15
.text:00003B15 loc_3B15:                               ; CODE XREF: MyStringLen(wchar_t const *)+12j
.text:00003B15                 mov     ecx, [ebp+var_4]
.text:00003B18                 mov     edx, [ebp+arg_0]
.text:00003B1B                 movzx   eax, word ptr [edx+ecx*2]
.text:00003B1F                 test    eax, eax
.text:00003B21                 jz      short loc_3B25
.text:00003B23                 jmp     short loc_3B0C
.text:00003B25 ; ---------------------------------------------------------------------------
.text:00003B25
.text:00003B25 loc_3B25:                               ; CODE XREF: MyStringLen(wchar_t const *)+29j
.text:00003B25                 mov     eax, [ebp+var_4]
.text:00003B28                 mov     esp, ebp
.text:00003B2A                 pop     ebp
.text:00003B2B                 retn    4
.text:00003B2B ?MyStringLen@@YGIPB_W@Z endp
.text:00003B2B
.text:00003B2B ; ---------------------------------------------------------------------------
.text:00003B2E                 align 10h
.text:00003B2E _text           ends
.text:00003B2E
.text:00003B30 ; ===========================================================================
.text:00003B30
.text:00003B30 ; Segment type: Pure code
.text:00003B30 ; Segment permissions: Read/Execute
.text:00003B30 _text           segment para public 'CODE' use32
.text:00003B30                 assume cs:_text
.text:00003B30                 ;org 3B30h
.text:00003B30 ; COMDAT (pick any)
.text:00003B30                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B30
.text:00003B30 ; =============== S U B R O U T I N E =======================================
.text:00003B30
.text:00003B30 ; Attributes: bp-based frame
.text:00003B30
.text:00003B30 ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:00003B30                 public ?Len@UString@@QBEIXZ
.text:00003B30 ?Len@UString@@QBEIXZ proc near          ; CODE XREF: UString::UString(UString const &,wchar_t)+21p
.text:00003B30                                         ; UString::UString(UString const &,wchar_t)+3Dp ...
.text:00003B30
.text:00003B30 var_4           = dword ptr -4
.text:00003B30
.text:00003B30                 push    ebp
.text:00003B31                 mov     ebp, esp
.text:00003B33                 push    ecx
.text:00003B34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B3B                 mov     [ebp+var_4], ecx
.text:00003B3E                 mov     eax, [ebp+var_4]
.text:00003B41                 mov     eax, [eax+4]
.text:00003B44                 mov     esp, ebp
.text:00003B46                 pop     ebp
.text:00003B47                 retn
.text:00003B47 ?Len@UString@@QBEIXZ endp
.text:00003B47
.text:00003B47 _text           ends
.text:00003B47
.text:00003B48 ; ===========================================================================
.text:00003B48
.text:00003B48 ; Segment type: Pure code
.text:00003B48 ; Segment permissions: Read/Execute
.text:00003B48 _text           segment para public 'CODE' use32
.text:00003B48                 assume cs:_text
.text:00003B48                 ;org 3B48h
.text:00003B48 ; COMDAT (pick any)
.text:00003B48                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B48
.text:00003B48 ; =============== S U B R O U T I N E =======================================
.text:00003B48
.text:00003B48 ; Attributes: bp-based frame
.text:00003B48
.text:00003B48 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00003B48                 public ??BUString@@QBEPB_WXZ
.text:00003B48 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: UString::UString(UString const &,wchar_t)+4Cp
.text:00003B48                                         ; operator+(UString const &,UString const &)+1Ep ...
.text:00003B48
.text:00003B48 var_4           = dword ptr -4
.text:00003B48
.text:00003B48                 push    ebp
.text:00003B49                 mov     ebp, esp
.text:00003B4B                 push    ecx
.text:00003B4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B53                 mov     [ebp+var_4], ecx
.text:00003B56                 mov     eax, [ebp+var_4]
.text:00003B59                 mov     eax, [eax]
.text:00003B5B                 mov     esp, ebp
.text:00003B5D                 pop     ebp
.text:00003B5E                 retn
.text:00003B5E ??BUString@@QBEPB_WXZ endp
.text:00003B5E
.text:00003B5E ; ---------------------------------------------------------------------------
.text:00003B5F                 align 10h
.text:00003B5F _text           ends
.text:00003B5F
.text:00003B60 ; ===========================================================================
.text:00003B60
.text:00003B60 ; Segment type: Pure code
.text:00003B60 ; Segment permissions: Read/Execute
.text:00003B60 _text           segment para public 'CODE' use32
.text:00003B60                 assume cs:_text
.text:00003B60                 ;org 3B60h
.text:00003B60 ; COMDAT (pick any)
.text:00003B60                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B60
.text:00003B60 ; =============== S U B R O U T I N E =======================================
.text:00003B60
.text:00003B60 ; Attributes: bp-based frame
.text:00003B60
.text:00003B60 ; public: class UString & __thiscall UString::operator+=(wchar_t)
.text:00003B60                 public ??YUString@@QAEAAV0@_W@Z
.text:00003B60 ??YUString@@QAEAAV0@_W@Z proc near      ; CODE XREF: UString::Add_Space(void)+13p
.text:00003B60
.text:00003B60 var_C           = dword ptr -0Ch
.text:00003B60 var_8           = dword ptr -8
.text:00003B60 var_4           = dword ptr -4
.text:00003B60 arg_0           = word ptr  8
.text:00003B60
.text:00003B60                 push    ebp
.text:00003B61                 mov     ebp, esp
.text:00003B63                 sub     esp, 0Ch
.text:00003B66                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00003B6D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003B74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B7B                 mov     [ebp+var_4], ecx
.text:00003B7E                 mov     eax, [ebp+var_4]
.text:00003B81                 mov     ecx, [ebp+var_4]
.text:00003B84                 mov     edx, [eax+8]
.text:00003B87                 cmp     edx, [ecx+4]
.text:00003B8A                 jnz     short loc_3B94
.text:00003B8C                 mov     ecx, [ebp+var_4] ; this
.text:00003B8F                 call    ?Grow_1@UString@@AAEXXZ ; UString::Grow_1(void)
.text:00003B94
.text:00003B94 loc_3B94:                               ; CODE XREF: UString::operator+=(wchar_t)+2Aj
.text:00003B94                 mov     eax, [ebp+var_4]
.text:00003B97                 mov     ecx, [eax+4]
.text:00003B9A                 mov     [ebp+var_8], ecx
.text:00003B9D                 mov     edx, [ebp+var_4]
.text:00003BA0                 mov     eax, [edx]
.text:00003BA2                 mov     [ebp+var_C], eax
.text:00003BA5                 mov     ecx, [ebp+var_8]
.text:00003BA8                 mov     edx, [ebp+var_C]
.text:00003BAB                 mov     ax, [ebp+arg_0]
.text:00003BAF                 mov     [edx+ecx*2], ax
.text:00003BB3                 mov     ecx, [ebp+var_8]
.text:00003BB6                 add     ecx, 1
.text:00003BB9                 mov     [ebp+var_8], ecx
.text:00003BBC                 xor     edx, edx
.text:00003BBE                 mov     eax, [ebp+var_8]
.text:00003BC1                 mov     ecx, [ebp+var_C]
.text:00003BC4                 mov     [ecx+eax*2], dx
.text:00003BC8                 mov     edx, [ebp+var_4]
.text:00003BCB                 mov     eax, [ebp+var_8]
.text:00003BCE                 mov     [edx+4], eax
.text:00003BD1                 mov     eax, [ebp+var_4]
.text:00003BD4                 add     esp, 0Ch
.text:00003BD7                 cmp     ebp, esp
.text:00003BD9                 call    __RTC_CheckEsp
.text:00003BDE                 mov     esp, ebp
.text:00003BE0                 pop     ebp
.text:00003BE1                 retn    4
.text:00003BE1 ??YUString@@QAEAAV0@_W@Z endp
.text:00003BE1
.text:00003BE1 _text           ends
.text:00003BE1
.text:00003BE4 ; ===========================================================================
.text:00003BE4
.text:00003BE4 ; Segment type: Pure code
.text:00003BE4 ; Segment permissions: Read/Execute
.text:00003BE4 _text           segment para public 'CODE' use32
.text:00003BE4                 assume cs:_text
.text:00003BE4                 ;org 3BE4h
.text:00003BE4 ; COMDAT (pick any)
.text:00003BE4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003BE4
.text:00003BE4 ; =============== S U B R O U T I N E =======================================
.text:00003BE4
.text:00003BE4 ; Attributes: bp-based frame
.text:00003BE4
.text:00003BE4 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:00003BE4                 public ?IsEmpty@UString@@QBE_NXZ
.text:00003BE4 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: UString::Add_Space_if_NotEmpty(void)+11p
.text:00003BE4                                         ; UString::Replace(UString const &,UString const &)+1Dp
.text:00003BE4
.text:00003BE4 var_4           = dword ptr -4
.text:00003BE4
.text:00003BE4                 push    ebp
.text:00003BE5                 mov     ebp, esp
.text:00003BE7                 push    ecx
.text:00003BE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003BEF                 mov     [ebp+var_4], ecx
.text:00003BF2                 mov     eax, [ebp+var_4]
.text:00003BF5                 xor     ecx, ecx
.text:00003BF7                 cmp     dword ptr [eax+4], 0
.text:00003BFB                 setz    cl
.text:00003BFE                 mov     al, cl
.text:00003C00                 mov     esp, ebp
.text:00003C02                 pop     ebp
.text:00003C03                 retn
.text:00003C03 ?IsEmpty@UString@@QBE_NXZ endp
.text:00003C03
.text:00003C03 _text           ends
.text:00003C03
.text:00003C04 ; ===========================================================================
.text:00003C04
.text:00003C04 ; Segment type: Pure code
.text:00003C04 ; Segment permissions: Read/Execute
.text:00003C04 _text           segment para public 'CODE' use32
.text:00003C04                 assume cs:_text
.text:00003C04                 ;org 3C04h
.text:00003C04 ; COMDAT (pick any)
.text:00003C04                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003C04
.text:00003C04 ; =============== S U B R O U T I N E =======================================
.text:00003C04
.text:00003C04 ; Attributes: bp-based frame
.text:00003C04
.text:00003C04 ; wchar_t *__cdecl wcsstr(wchar_t *Str, const wchar_t *SubStr)
.text:00003C04                 public ?wcsstr@@YAPA_WPA_WPB_W@Z
.text:00003C04 ?wcsstr@@YAPA_WPA_WPB_W@Z proc near     ; CODE XREF: UString::Find(wchar_t const *,uint)+27p
.text:00003C04
.text:00003C04 Str             = dword ptr  8
.text:00003C04 SubStr          = dword ptr  0Ch
.text:00003C04
.text:00003C04                 push    ebp
.text:00003C05                 mov     ebp, esp
.text:00003C07                 push    esi
.text:00003C08                 mov     esi, esp
.text:00003C0A                 mov     eax, [ebp+SubStr]
.text:00003C0D                 push    eax             ; SubStr
.text:00003C0E                 mov     ecx, [ebp+Str]
.text:00003C11                 push    ecx             ; Str
.text:00003C12                 call    dword ptr ds:__imp__wcsstr
.text:00003C18                 add     esp, 8
.text:00003C1B                 cmp     esi, esp
.text:00003C1D                 call    __RTC_CheckEsp
.text:00003C22                 pop     esi
.text:00003C23                 cmp     ebp, esp
.text:00003C25                 call    __RTC_CheckEsp
.text:00003C2A                 pop     ebp
.text:00003C2B                 retn
.text:00003C2B ?wcsstr@@YAPA_WPA_WPB_W@Z endp
.text:00003C2B
.text:00003C2B _text           ends
.text:00003C2B
.text:00003C2C ; ===========================================================================
.text:00003C2C
.text:00003C2C ; Segment type: Pure code
.text:00003C2C ; Segment permissions: Read/Execute
.text:00003C2C _text           segment para public 'CODE' use32
.text:00003C2C                 assume cs:_text
.text:00003C2C                 ;org 3C2Ch
.text:00003C2C ; COMDAT (pick any)
.text:00003C2C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003C2C
.text:00003C2C ; =============== S U B R O U T I N E =======================================
.text:00003C2C
.text:00003C2C ; Attributes: bp-based frame
.text:00003C2C
.text:00003C2C ; int __thiscall UString::Find(UString *this, wchar_t, unsigned int)
.text:00003C2C                 public ?Find@UString@@QBEH_WI@Z
.text:00003C2C ?Find@UString@@QBEH_WI@Z proc near      ; CODE XREF: UString::Replace(wchar_t,wchar_t)+43p
.text:00003C2C
.text:00003C2C var_C           = dword ptr -0Ch
.text:00003C2C var_8           = dword ptr -8
.text:00003C2C var_4           = dword ptr -4
.text:00003C2C arg_0           = word ptr  8
.text:00003C2C arg_4           = dword ptr  0Ch
.text:00003C2C
.text:00003C2C                 push    ebp
.text:00003C2D                 mov     ebp, esp
.text:00003C2F                 sub     esp, 0Ch
.text:00003C32                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00003C39                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003C40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003C47                 mov     [ebp+var_4], ecx
.text:00003C4A                 movzx   eax, [ebp+arg_0]
.text:00003C4E                 push    eax             ; wchar_t
.text:00003C4F                 mov     ecx, [ebp+var_4]
.text:00003C52                 mov     edx, [ecx]
.text:00003C54                 mov     eax, [ebp+arg_4]
.text:00003C57                 lea     ecx, [edx+eax*2]
.text:00003C5A                 push    ecx             ; wchar_t *
.text:00003C5B                 call    ?FindCharPosInString@@YGHPB_W_W@Z ; FindCharPosInString(wchar_t const *,wchar_t)
.text:00003C60                 mov     [ebp+var_8], eax
.text:00003C63                 cmp     [ebp+var_8], 0
.text:00003C67                 jge     short loc_3C72
.text:00003C69                 mov     [ebp+var_C], 0FFFFFFFFh
.text:00003C70                 jmp     short loc_3C7B
.text:00003C72 ; ---------------------------------------------------------------------------
.text:00003C72
.text:00003C72 loc_3C72:                               ; CODE XREF: UString::Find(wchar_t,uint)+3Bj
.text:00003C72                 mov     edx, [ebp+arg_4]
.text:00003C75                 add     edx, [ebp+var_8]
.text:00003C78                 mov     [ebp+var_C], edx
.text:00003C7B
.text:00003C7B loc_3C7B:                               ; CODE XREF: UString::Find(wchar_t,uint)+44j
.text:00003C7B                 mov     eax, [ebp+var_C]
.text:00003C7E                 add     esp, 0Ch
.text:00003C81                 cmp     ebp, esp
.text:00003C83                 call    __RTC_CheckEsp
.text:00003C88                 mov     esp, ebp
.text:00003C8A                 pop     ebp
.text:00003C8B                 retn    8
.text:00003C8B ?Find@UString@@QBEH_WI@Z endp
.text:00003C8B
.text:00003C8B ; ---------------------------------------------------------------------------
.text:00003C8E                 align 10h
.text:00003C8E _text           ends
.text:00003C8E
.text:00003C90 ; ===========================================================================
.text:00003C90
.text:00003C90 ; Segment type: Pure code
.text:00003C90 ; Segment permissions: Read/Execute
.text:00003C90 _text           segment para public 'CODE' use32
.text:00003C90                 assume cs:_text
.text:00003C90                 ;org 3C90h
.text:00003C90 ; COMDAT (pick any)
.text:00003C90                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003C90
.text:00003C90 ; =============== S U B R O U T I N E =======================================
.text:00003C90
.text:00003C90 ; Attributes: bp-based frame
.text:00003C90
.text:00003C90 ; int __stdcall operator==(UString *, UString *)
.text:00003C90                 public ??8@YG_NABVUString@@0@Z
.text:00003C90 ??8@YG_NABVUString@@0@Z proc near       ; CODE XREF: UString::Replace(UString const &,UString const &)+36p
.text:00003C90
.text:00003C90 var_4           = dword ptr -4
.text:00003C90 arg_0           = dword ptr  8
.text:00003C90 arg_4           = dword ptr  0Ch
.text:00003C90
.text:00003C90                 push    ebp
.text:00003C91                 mov     ebp, esp
.text:00003C93                 push    ecx
.text:00003C94                 push    esi
.text:00003C95                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003C9C                 mov     ecx, [ebp+arg_0] ; this
.text:00003C9F                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00003CA4                 mov     esi, eax
.text:00003CA6                 mov     ecx, [ebp+arg_4] ; this
.text:00003CA9                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00003CAE                 cmp     esi, eax
.text:00003CB0                 jnz     short loc_3CE3
.text:00003CB2                 mov     ecx, [ebp+arg_4]
.text:00003CB5                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00003CBA                 mov     esi, esp
.text:00003CBC                 push    eax             ; Str2
.text:00003CBD                 mov     ecx, [ebp+arg_0]
.text:00003CC0                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00003CC5                 push    eax             ; Str1
.text:00003CC6                 call    dword ptr ds:__imp__wcscmp
.text:00003CCC                 add     esp, 8
.text:00003CCF                 cmp     esi, esp
.text:00003CD1                 call    __RTC_CheckEsp
.text:00003CD6                 test    eax, eax
.text:00003CD8                 jnz     short loc_3CE3
.text:00003CDA                 mov     [ebp+var_4], 1
.text:00003CE1                 jmp     short loc_3CEA
.text:00003CE3 ; ---------------------------------------------------------------------------
.text:00003CE3
.text:00003CE3 loc_3CE3:                               ; CODE XREF: operator==(UString const &,UString const &)+20j
.text:00003CE3                                         ; operator==(UString const &,UString const &)+48j
.text:00003CE3                 mov     [ebp+var_4], 0
.text:00003CEA
.text:00003CEA loc_3CEA:                               ; CODE XREF: operator==(UString const &,UString const &)+51j
.text:00003CEA                 mov     al, byte ptr [ebp+var_4]
.text:00003CED                 pop     esi
.text:00003CEE                 add     esp, 4
.text:00003CF1                 cmp     ebp, esp
.text:00003CF3                 call    __RTC_CheckEsp
.text:00003CF8                 mov     esp, ebp
.text:00003CFA                 pop     ebp
.text:00003CFB                 retn    8
.text:00003CFB ??8@YG_NABVUString@@0@Z endp
.text:00003CFB
.text:00003CFB ; ---------------------------------------------------------------------------
.text:00003CFE                 align 10h
.text:00003CFE _text           ends
.text:00003CFE
.text:00003D00 ; ===========================================================================
.text:00003D00
.text:00003D00 ; Segment type: Pure code
.text:00003D00 ; Segment permissions: Read/Execute
.text:00003D00 _text           segment para public 'CODE' use32
.text:00003D00                 assume cs:_text
.text:00003D00                 ;org 3D00h
.text:00003D00 ; COMDAT (pick any)
.text:00003D00                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003D00
.text:00003D00 ; =============== S U B R O U T I N E =======================================
.text:00003D00
.text:00003D00 ; Attributes: bp-based frame
.text:00003D00
.text:00003D00 ; void __stdcall MyStringCopy(wchar_t *, const wchar_t *)
.text:00003D00                 public ?MyStringCopy@@YGXPA_WPB_W@Z
.text:00003D00 ?MyStringCopy@@YGXPA_WPB_W@Z proc near  ; CODE XREF: UString2::operator=(wchar_t const *)+93p
.text:00003D00                                         ; UString2::operator=(UString2 const &)+9Fp
.text:00003D00
.text:00003D00 var_4           = dword ptr -4
.text:00003D00 arg_0           = dword ptr  8
.text:00003D00 arg_4           = dword ptr  0Ch
.text:00003D00
.text:00003D00                 push    ebp
.text:00003D01                 mov     ebp, esp
.text:00003D03                 push    ecx
.text:00003D04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D0B
.text:00003D0B loc_3D0B:                               ; CODE XREF: MyStringCopy(wchar_t *,wchar_t const *)+49j
.text:00003D0B                 mov     eax, [ebp+arg_0]
.text:00003D0E                 mov     ecx, [ebp+arg_4]
.text:00003D11                 mov     dx, [ecx]
.text:00003D14                 mov     [eax], dx
.text:00003D17                 mov     eax, [ebp+arg_0]
.text:00003D1A                 movzx   ecx, word ptr [eax]
.text:00003D1D                 mov     edx, [ebp+arg_0]
.text:00003D20                 add     edx, 2
.text:00003D23                 mov     [ebp+arg_0], edx
.text:00003D26                 mov     eax, [ebp+arg_4]
.text:00003D29                 add     eax, 2
.text:00003D2C                 mov     [ebp+arg_4], eax
.text:00003D2F                 test    ecx, ecx
.text:00003D31                 jz      short loc_3D3C
.text:00003D33                 mov     [ebp+var_4], 1
.text:00003D3A                 jmp     short loc_3D43
.text:00003D3C ; ---------------------------------------------------------------------------
.text:00003D3C
.text:00003D3C loc_3D3C:                               ; CODE XREF: MyStringCopy(wchar_t *,wchar_t const *)+31j
.text:00003D3C                 mov     [ebp+var_4], 0
.text:00003D43
.text:00003D43 loc_3D43:                               ; CODE XREF: MyStringCopy(wchar_t *,wchar_t const *)+3Aj
.text:00003D43                 cmp     [ebp+var_4], 0
.text:00003D47                 jz      short loc_3D4B
.text:00003D49                 jmp     short loc_3D0B
.text:00003D4B ; ---------------------------------------------------------------------------
.text:00003D4B
.text:00003D4B loc_3D4B:                               ; CODE XREF: MyStringCopy(wchar_t *,wchar_t const *)+47j
.text:00003D4B                 mov     esp, ebp
.text:00003D4D                 pop     ebp
.text:00003D4E                 retn    8
.text:00003D4E ?MyStringCopy@@YGXPA_WPB_W@Z endp
.text:00003D4E
.text:00003D4E ; ---------------------------------------------------------------------------
.text:00003D51                 align 4
.text:00003D51 _text           ends
.text:00003D51
.text:00003D54 ; ===========================================================================
.text:00003D54
.text:00003D54 ; Segment type: Pure code
.text:00003D54 ; Segment permissions: Read/Execute
.text:00003D54 _text           segment para public 'CODE' use32
.text:00003D54                 assume cs:_text
.text:00003D54                 ;org 3D54h
.text:00003D54 ; COMDAT (pick any)
.text:00003D54                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003D54
.text:00003D54 ; =============== S U B R O U T I N E =======================================
.text:00003D54
.text:00003D54 ; Attributes: bp-based frame
.text:00003D54
.text:00003D54 ; unsigned int __thiscall UString2::Len(UString2 *__hidden this)
.text:00003D54                 public ?Len@UString2@@QBEIXZ
.text:00003D54 ?Len@UString2@@QBEIXZ proc near         ; CODE XREF: operator==(UString2 const &,UString2 const &)+Fp
.text:00003D54                                         ; operator==(UString2 const &,UString2 const &)+19p
.text:00003D54
.text:00003D54 var_4           = dword ptr -4
.text:00003D54
.text:00003D54                 push    ebp
.text:00003D55                 mov     ebp, esp
.text:00003D57                 push    ecx
.text:00003D58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D5F                 mov     [ebp+var_4], ecx
.text:00003D62                 mov     eax, [ebp+var_4]
.text:00003D65                 mov     eax, [eax+4]
.text:00003D68                 mov     esp, ebp
.text:00003D6A                 pop     ebp
.text:00003D6B                 retn
.text:00003D6B ?Len@UString2@@QBEIXZ endp
.text:00003D6B
.text:00003D6B _text           ends
.text:00003D6B
.text:00003D6C ; ===========================================================================
.text:00003D6C
.text:00003D6C ; Segment type: Pure code
.text:00003D6C ; Segment permissions: Read/Execute
.text:00003D6C _text           segment para public 'CODE' use32
.text:00003D6C                 assume cs:_text
.text:00003D6C                 ;org 3D6Ch
.text:00003D6C ; COMDAT (pick any)
.text:00003D6C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003D6C
.text:00003D6C ; =============== S U B R O U T I N E =======================================
.text:00003D6C
.text:00003D6C ; Attributes: bp-based frame
.text:00003D6C
.text:00003D6C ; bool __thiscall UString2::IsEmpty(UString2 *__hidden this)
.text:00003D6C                 public ?IsEmpty@UString2@@QBE_NXZ
.text:00003D6C ?IsEmpty@UString2@@QBE_NXZ proc near    ; CODE XREF: operator==(UString2 const &,UString2 const &)+25p
.text:00003D6C                                         ; operator==(UString2 const &,wchar_t const *)+7p ...
.text:00003D6C
.text:00003D6C var_4           = dword ptr -4
.text:00003D6C
.text:00003D6C                 push    ebp
.text:00003D6D                 mov     ebp, esp
.text:00003D6F                 push    ecx
.text:00003D70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D77                 mov     [ebp+var_4], ecx
.text:00003D7A                 mov     eax, [ebp+var_4]
.text:00003D7D                 xor     ecx, ecx
.text:00003D7F                 cmp     dword ptr [eax+4], 0
.text:00003D83                 setz    cl
.text:00003D86                 mov     al, cl
.text:00003D88                 mov     esp, ebp
.text:00003D8A                 pop     ebp
.text:00003D8B                 retn
.text:00003D8B ?IsEmpty@UString2@@QBE_NXZ endp
.text:00003D8B
.text:00003D8B _text           ends
.text:00003D8B
.text:00003D8C ; ===========================================================================
.text:00003D8C
.text:00003D8C ; Segment type: Pure code
.text:00003D8C ; Segment permissions: Read/Execute
.text:00003D8C _text           segment para public 'CODE' use32
.text:00003D8C                 assume cs:_text
.text:00003D8C                 ;org 3D8Ch
.text:00003D8C ; COMDAT (pick any)
.text:00003D8C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003D8C
.text:00003D8C ; =============== S U B R O U T I N E =======================================
.text:00003D8C
.text:00003D8C ; Attributes: bp-based frame
.text:00003D8C
.text:00003D8C ; const wchar_t *__thiscall UString2::GetRawPtr(UString2 *__hidden this)
.text:00003D8C                 public ?GetRawPtr@UString2@@QBEPB_WXZ
.text:00003D8C ?GetRawPtr@UString2@@QBEPB_WXZ proc near
.text:00003D8C                                         ; CODE XREF: operator==(UString2 const &,UString2 const &)+34p
.text:00003D8C                                         ; operator==(UString2 const &,UString2 const &)+3Fp ...
.text:00003D8C
.text:00003D8C var_4           = dword ptr -4
.text:00003D8C
.text:00003D8C                 push    ebp
.text:00003D8D                 mov     ebp, esp
.text:00003D8F                 push    ecx
.text:00003D90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D97                 mov     [ebp+var_4], ecx
.text:00003D9A                 mov     eax, [ebp+var_4]
.text:00003D9D                 mov     eax, [eax]
.text:00003D9F                 mov     esp, ebp
.text:00003DA1                 pop     ebp
.text:00003DA2                 retn
.text:00003DA2 ?GetRawPtr@UString2@@QBEPB_WXZ endp
.text:00003DA2
.text:00003DA2 ; ---------------------------------------------------------------------------
.text:00003DA3                 align 4
.text:00003DA3 _text           ends
.text:00003DA3
.text$x:00003DA4 ; ===========================================================================
.text$x:00003DA4
.text$x:00003DA4 ; Segment type: Pure code
.text$x:00003DA4 ; Segment permissions: Read/Execute
.text$x:00003DA4 _text$x         segment para public 'CODE' use32
.text$x:00003DA4                 assume cs:_text$x
.text$x:00003DA4                 ;org 3DA4h
.text$x:00003DA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00003DA4
.text$x:00003DA4 ; =============== S U B R O U T I N E =======================================
.text$x:00003DA4
.text$x:00003DA4
.text$x:00003DA4 __unwindfunclet$?fs2fas@@YG?AVAString@@PB_W@Z$0 proc near
.text$x:00003DA4                                         ; DATA XREF: .xdata$x:00003DECo
.text$x:00003DA4                 lea     ecx, [ebp-18h]  ; this
.text$x:00003DA7                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003DA7 __unwindfunclet$?fs2fas@@YG?AVAString@@PB_W@Z$0 endp
.text$x:00003DA7
.text$x:00003DAC
.text$x:00003DAC ; =============== S U B R O U T I N E =======================================
.text$x:00003DAC
.text$x:00003DAC
.text$x:00003DAC __unwindfunclet$?fs2fas@@YG?AVAString@@PB_W@Z$1 proc near
.text$x:00003DAC                                         ; DATA XREF: .xdata$x:00003DE4o
.text$x:00003DAC                 mov     eax, [ebp-1Ch]
.text$x:00003DAF                 and     eax, 1
.text$x:00003DB2                 jz      locret_3DC4
.text$x:00003DB8                 and     dword ptr [ebp-1Ch], 0FFFFFFFEh
.text$x:00003DBC                 mov     ecx, [ebp+8]    ; this
.text$x:00003DBF                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00003DC4 ; ---------------------------------------------------------------------------
.text$x:00003DC4
.text$x:00003DC4 locret_3DC4:                            ; CODE XREF: __unwindfunclet$?fs2fas@@YG?AVAString@@PB_W@Z$1+6j
.text$x:00003DC4                 retn
.text$x:00003DC4 __unwindfunclet$?fs2fas@@YG?AVAString@@PB_W@Z$1 endp
.text$x:00003DC4
.text$x:00003DC5
.text$x:00003DC5 ; =============== S U B R O U T I N E =======================================
.text$x:00003DC5
.text$x:00003DC5
.text$x:00003DC5 __ehhandler$?fs2fas@@YG?AVAString@@PB_W@Z proc near
.text$x:00003DC5                                         ; DATA XREF: fs2fas(wchar_t const *)+5o
.text$x:00003DC5
.text$x:00003DC5 arg_4           = dword ptr  8
.text$x:00003DC5
.text$x:00003DC5                 mov     edx, [esp+arg_4]
.text$x:00003DC9                 lea     eax, [edx+0Ch]
.text$x:00003DCC                 mov     ecx, [edx-14h]
.text$x:00003DCF                 xor     ecx, eax
.text$x:00003DD1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003DD6                 mov     eax, offset __ehfuncinfo$?fs2fas@@YG?AVAString@@PB_W@Z
.text$x:00003DDB                 jmp     ___CxxFrameHandler3
.text$x:00003DDB __ehhandler$?fs2fas@@YG?AVAString@@PB_W@Z endp
.text$x:00003DDB
.text$x:00003DDB _text$x         ends
.text$x:00003DDB
.xdata$x:00003DE0 ; ===========================================================================
.xdata$x:00003DE0
.xdata$x:00003DE0 ; Segment type: Pure data
.xdata$x:00003DE0 ; Segment permissions: Read
.xdata$x:00003DE0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003DE0                 assume cs:_xdata$x
.xdata$x:00003DE0                 ;org 3DE0h
.xdata$x:00003DE0 __unwindtable$?fs2fas@@YG?AVAString@@PB_W@Z db 0FFh
.xdata$x:00003DE0                                         ; DATA XREF: .xdata$x:00003DF8o
.xdata$x:00003DE1                 db 0FFh
.xdata$x:00003DE2                 db 0FFh
.xdata$x:00003DE3                 db 0FFh
.xdata$x:00003DE4                 dd offset __unwindfunclet$?fs2fas@@YG?AVAString@@PB_W@Z$1
.xdata$x:00003DE8                 db    0
.xdata$x:00003DE9                 db    0
.xdata$x:00003DEA                 db    0
.xdata$x:00003DEB                 db    0
.xdata$x:00003DEC                 dd offset __unwindfunclet$?fs2fas@@YG?AVAString@@PB_W@Z$0
.xdata$x:00003DF0 __ehfuncinfo$?fs2fas@@YG?AVAString@@PB_W@Z db  22h ; "
.xdata$x:00003DF0                                         ; DATA XREF: __ehhandler$?fs2fas@@YG?AVAString@@PB_W@Z+11o
.xdata$x:00003DF1                 db    5
.xdata$x:00003DF2                 db  93h ; ô
.xdata$x:00003DF3                 db  19h
.xdata$x:00003DF4                 db    2
.xdata$x:00003DF5                 db    0
.xdata$x:00003DF6                 db    0
.xdata$x:00003DF7                 db    0
.xdata$x:00003DF8                 dd offset __unwindtable$?fs2fas@@YG?AVAString@@PB_W@Z
.xdata$x:00003DFC                 db    0
.xdata$x:00003DFD                 db    0
.xdata$x:00003DFE                 db    0
.xdata$x:00003DFF                 db    0
.xdata$x:00003E00                 db    0
.xdata$x:00003E01                 db    0
.xdata$x:00003E02                 db    0
.xdata$x:00003E03                 db    0
.xdata$x:00003E04                 db    0
.xdata$x:00003E05                 db    0
.xdata$x:00003E06                 db    0
.xdata$x:00003E07                 db    0
.xdata$x:00003E08                 db    0
.xdata$x:00003E09                 db    0
.xdata$x:00003E0A                 db    0
.xdata$x:00003E0B                 db    0
.xdata$x:00003E0C                 db    0
.xdata$x:00003E0D                 db    0
.xdata$x:00003E0E                 db    0
.xdata$x:00003E0F                 db    0
.xdata$x:00003E10                 db    1
.xdata$x:00003E11                 db    0
.xdata$x:00003E12                 db    0
.xdata$x:00003E13                 db    0
.xdata$x:00003E13 _xdata$x        ends
.xdata$x:00003E13
.text:00003E14 ; ===========================================================================
.text:00003E14
.text:00003E14 ; Segment type: Pure code
.text:00003E14 ; Segment permissions: Read/Execute
.text:00003E14 _text           segment para public 'CODE' use32
.text:00003E14                 assume cs:_text
.text:00003E14                 ;org 3E14h
.text:00003E14 ; COMDAT (pick any)
.text:00003E14                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003E14
.text:00003E14 ; =============== S U B R O U T I N E =======================================
.text:00003E14
.text:00003E14 ; Attributes: bp-based frame
.text:00003E14
.text:00003E14 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00003E14                 public ??1AString@@QAE@XZ
.text:00003E14 ??1AString@@QAE@XZ proc near            ; CODE XREF: __unwindfunclet$?fs2fas@@YG?AVAString@@PB_W@Z$1+13j
.text:00003E14
.text:00003E14 var_8           = dword ptr -8
.text:00003E14 var_4           = dword ptr -4
.text:00003E14
.text:00003E14                 push    ebp
.text:00003E15                 mov     ebp, esp
.text:00003E17                 sub     esp, 8
.text:00003E1A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003E21                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E28                 mov     [ebp+var_4], ecx
.text:00003E2B                 mov     eax, [ebp+var_4]
.text:00003E2E                 mov     ecx, [eax]
.text:00003E30                 mov     [ebp+var_8], ecx
.text:00003E33                 mov     edx, [ebp+var_8]
.text:00003E36                 push    edx             ; void *
.text:00003E37                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003E3C                 add     esp, 4
.text:00003E3F                 add     esp, 8
.text:00003E42                 cmp     ebp, esp
.text:00003E44                 call    __RTC_CheckEsp
.text:00003E49                 mov     esp, ebp
.text:00003E4B                 pop     ebp
.text:00003E4C                 retn
.text:00003E4C ??1AString@@QAE@XZ endp
.text:00003E4C
.text:00003E4C ; ---------------------------------------------------------------------------
.text:00003E4D                 align 10h
.text:00003E4D _text           ends
.text:00003E4D
.text:00003E50 ; ===========================================================================
.text:00003E50
.text:00003E50 ; Segment type: Pure code
.text:00003E50 ; Segment permissions: Read/Execute
.text:00003E50 _text           segment para public 'CODE' use32
.text:00003E50                 assume cs:_text
.text:00003E50                 ;org 3E50h
.text:00003E50 ; COMDAT (pick any)
.text:00003E50                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003E50
.text:00003E50 ; =============== S U B R O U T I N E =======================================
.text:00003E50
.text:00003E50 ; Attributes: bp-based frame
.text:00003E50
.text:00003E50 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00003E50                 public ??1UString@@QAE@XZ
.text:00003E50 ??1UString@@QAE@XZ proc near            ; CODE XREF: fs2fas(wchar_t const *)+73p
.text:00003E50                                         ; __unwindfunclet$?fs2fas@@YG?AVAString@@PB_W@Z$0+3j
.text:00003E50
.text:00003E50 var_8           = dword ptr -8
.text:00003E50 var_4           = dword ptr -4
.text:00003E50
.text:00003E50                 push    ebp
.text:00003E51                 mov     ebp, esp
.text:00003E53                 sub     esp, 8
.text:00003E56                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003E5D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E64                 mov     [ebp+var_4], ecx
.text:00003E67                 mov     eax, [ebp+var_4]
.text:00003E6A                 mov     ecx, [eax]
.text:00003E6C                 mov     [ebp+var_8], ecx
.text:00003E6F                 mov     edx, [ebp+var_8]
.text:00003E72                 push    edx             ; void *
.text:00003E73                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003E78                 add     esp, 4
.text:00003E7B                 add     esp, 8
.text:00003E7E                 cmp     ebp, esp
.text:00003E80                 call    __RTC_CheckEsp
.text:00003E85                 mov     esp, ebp
.text:00003E87                 pop     ebp
.text:00003E88                 retn
.text:00003E88 ??1UString@@QAE@XZ endp
.text:00003E88
.text:00003E88 _text           ends
.text:00003E88
UNDEF:00003E90 ; ===========================================================================
UNDEF:00003E90
UNDEF:00003E90 ; Segment type: Externs
UNDEF:00003E90 ; UNDEF
UNDEF:00003E90                 extrn __RTC_Shutdown:near
UNDEF:00003E90                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00003E94                 extrn __RTC_InitBase:near
UNDEF:00003E94                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00003E98                 extrn __RTC_CheckEsp:near
UNDEF:00003E98                                         ; CODE XREF: MyStringLower_Ascii(char *)+3Cp
UNDEF:00003E98                                         ; MyStringLower_Ascii(wchar_t *)+3Fp ...
UNDEF:00003E9C ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCSTR lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
UNDEF:00003E9C                 extrn __imp__MultiByteToWideChar@24:near
UNDEF:00003E9C                                         ; CODE XREF: MyCharUpper_WIN(wchar_t)+D3p
UNDEF:00003E9C                                         ; DATA XREF: MyCharUpper_WIN(wchar_t)+D3r
UNDEF:00003EA0 ; LPSTR __stdcall CharUpperA(LPSTR lpsz)
UNDEF:00003EA0                 extrn __imp__CharUpperA@4:near
UNDEF:00003EA0                                         ; CODE XREF: MyCharUpper_WIN(wchar_t)+B2p
UNDEF:00003EA0                                         ; DATA XREF: MyCharUpper_WIN(wchar_t)+B2r
UNDEF:00003EA4 ; int __stdcall WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWSTR lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCSTR lpDefaultChar, LPBOOL lpUsedDefaultChar)
UNDEF:00003EA4                 extrn __imp__WideCharToMultiByte@32:near
UNDEF:00003EA4                                         ; CODE XREF: MyCharUpper_WIN(wchar_t)+82p
UNDEF:00003EA4                                         ; DATA XREF: MyCharUpper_WIN(wchar_t)+82r
UNDEF:00003EA8 ; DWORD __stdcall GetLastError()
UNDEF:00003EA8                 extrn __imp__GetLastError@0:near
UNDEF:00003EA8                                         ; CODE XREF: MyCharUpper_WIN(wchar_t)+4Dp
UNDEF:00003EA8                                         ; DATA XREF: MyCharUpper_WIN(wchar_t)+4Dr
UNDEF:00003EAC ; LPWSTR __stdcall CharUpperW(LPWSTR lpsz)
UNDEF:00003EAC                 extrn __imp__CharUpperW@4:near
UNDEF:00003EAC                                         ; CODE XREF: MyCharUpper_WIN(wchar_t)+35p
UNDEF:00003EAC                                         ; DATA XREF: MyCharUpper_WIN(wchar_t)+35r
UNDEF:00003EB0                 extrn ___security_cookie:near
UNDEF:00003EB0                                         ; DATA XREF: MyCharUpper_WIN(wchar_t)+24r
UNDEF:00003EB0                                         ; fs2fas(wchar_t const *)+25r
UNDEF:00003EB4 ; __fastcall __security_check_cookie(x)
UNDEF:00003EB4                 extrn @__security_check_cookie@4:near
UNDEF:00003EB4                                         ; CODE XREF: MyCharUpper_WIN(wchar_t)+FBp
UNDEF:00003EB4                                         ; __ehhandler$?fs2fas@@YG?AVAString@@PB_W@Z+Cp
UNDEF:00003EB8 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00003EB8                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00003EB8                                         ; CODE XREF: MyCharUpper_WIN(wchar_t)+EEp
UNDEF:00003EBC ; void *__cdecl _memmove(void *Dst, const void *Src, size_t Size)
UNDEF:00003EBC                 extrn __imp__memmove:near
UNDEF:00003EBC                                         ; CODE XREF: AString::MoveItems(uint,uint)+30p
UNDEF:00003EBC                                         ; UString::MoveItems(uint,uint)+37p
UNDEF:00003EBC                                         ; DATA XREF: ...
UNDEF:00003EC0 ; void __cdecl operator delete(void *)
UNDEF:00003EC0                 extrn ??3@YAXPAX@Z:near ; CODE XREF: AString::ReAlloc(uint)+86p
UNDEF:00003EC0                                         ; AString::ReAlloc2(uint)+65p ...
UNDEF:00003EC4 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00003EC4                 extrn _memcpy:near      ; CODE XREF: AString::ReAlloc(uint)+72p
UNDEF:00003EC4                                         ; AString::AString(uint,AString const &)+3Ep ...
UNDEF:00003EC8 ; void *__cdecl operator new(unsigned int)
UNDEF:00003EC8                 extrn ??2@YAPAXI@Z:near ; CODE XREF: AString::ReAlloc(uint)+4Dp
UNDEF:00003EC8                                         ; AString::ReAlloc2(uint)+42p ...
UNDEF:00003ECC ; __stdcall _CxxThrowException(x, x)
UNDEF:00003ECC                 extrn __CxxThrowException@8:near
UNDEF:00003ECC                                         ; CODE XREF: AString::ReAlloc(uint)+41p
UNDEF:00003ECC                                         ; AString::ReAlloc2(uint)+36p ...
UNDEF:00003ED0 ; const type_info::`vftable'
UNDEF:00003ED0                 extrn ??_7type_info@@6B@:near
UNDEF:00003ED0                                         ; DATA XREF: .data:int `RTTI Type Descriptor'o
UNDEF:00003ED4 ; char *__cdecl _strstr(const char *Str, const char *SubStr)
UNDEF:00003ED4                 extrn __imp__strstr:near
UNDEF:00003ED4                                         ; CODE XREF: strstr(char *,char const *)+Ep
UNDEF:00003ED4                                         ; DATA XREF: strstr(char *,char const *)+Er
UNDEF:00003ED8 ; int __cdecl strcmp(const char *Str1, const char *Str2)
UNDEF:00003ED8                 extrn _strcmp:near      ; CODE XREF: operator==(AString const &,AString const &)+34p
UNDEF:00003EDC ; UINT __stdcall SysStringLen(BSTR)
UNDEF:00003EDC                 extrn __imp__SysStringLen@4:near
UNDEF:00003EDC                                         ; CODE XREF: UString::SetFromBstr(wchar_t *)+24p
UNDEF:00003EDC                                         ; DATA XREF: UString::SetFromBstr(wchar_t *)+24r
UNDEF:00003EE0 ; wchar_t *__cdecl _wcsstr(const wchar_t *Str, const wchar_t *SubStr)
UNDEF:00003EE0                 extrn __imp__wcsstr:near
UNDEF:00003EE0                                         ; CODE XREF: wcsstr(wchar_t *,wchar_t const *)+Ep
UNDEF:00003EE0                                         ; DATA XREF: wcsstr(wchar_t *,wchar_t const *)+Er
UNDEF:00003EE4 ; int __cdecl _wcscmp(const wchar_t *Str1, const wchar_t *Str2)
UNDEF:00003EE4                 extrn __imp__wcscmp:near
UNDEF:00003EE4                                         ; CODE XREF: operator==(UString2 const &,UString2 const &)+45p
UNDEF:00003EE4                                         ; operator==(UString2 const &,wchar_t const *)+31p ...
UNDEF:00003EE8 ; struct AString __stdcall __high UnicodeStringToMultiByte(const struct UString *, unsigned int)
UNDEF:00003EE8                 extrn ?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z:near
UNDEF:00003EE8                                         ; CODE XREF: fs2fas(wchar_t const *)+5Ep
UNDEF:00003EEC                 extrn ___CxxFrameHandler3:near
UNDEF:00003EEC                                         ; CODE XREF: __ehhandler$?fs2fas@@YG?AVAString@@PB_W@Z+16j
UNDEF:00003EF0 ; BOOL __stdcall AreFileApisANSI()
UNDEF:00003EF0                 extrn __imp__AreFileApisANSI@0:near
UNDEF:00003EF0                                         ; CODE XREF: GetCurrentCodePage(void)+6p
UNDEF:00003EF0                                         ; DATA XREF: GetCurrentCodePage(void)+6r
UNDEF:00003EF4 ; struct UString __stdcall __high MultiByteToUnicodeString(const struct AString *, unsigned int)
UNDEF:00003EF4                 extrn ?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z:near
UNDEF:00003EF4                                         ; CODE XREF: fas2fs(AString const &)+20p
UNDEF:00003EF4
UNDEF:00003EF4
UNDEF:00003EF4                 end