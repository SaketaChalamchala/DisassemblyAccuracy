.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : B82BF4C77E7F6379536FEFCA17EB98E8
.text:00000000 ; Input CRC32 : 80533450
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\MultiStream.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __stdcall CMultiStream::Read(CMultiStream *this, void *, unsigned int, unsigned int *)
.text:00000000                 public ?Read@CMultiStream@@UAGJPAXIPAI@Z
.text:00000000 ?Read@CMultiStream@@UAGJPAXIPAI@Z proc near
.text:00000000
.text:00000000 var_5C          = dword ptr -5Ch
.text:00000000 var_58          = dword ptr -58h
.text:00000000 var_54          = dword ptr -54h
.text:00000000 var_50          = dword ptr -50h
.text:00000000 var_4C          = dword ptr -4Ch
.text:00000000 var_48          = dword ptr -48h
.text:00000000 var_44          = dword ptr -44h
.text:00000000 var_40          = dword ptr -40h
.text:00000000 var_3C          = dword ptr -3Ch
.text:00000000 var_38          = dword ptr -38h
.text:00000000 var_34          = dword ptr -34h
.text:00000000 var_30          = dword ptr -30h
.text:00000000 var_2C          = dword ptr -2Ch
.text:00000000 var_28          = dword ptr -28h
.text:00000000 var_24          = dword ptr -24h
.text:00000000 var_20          = dword ptr -20h
.text:00000000 var_1C          = dword ptr -1Ch
.text:00000000 var_18          = dword ptr -18h
.text:00000000 var_14          = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 this            = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_8           = dword ptr  10h
.text:00000000 arg_C           = dword ptr  14h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 5Ch
.text:00000006                 push    esi
.text:00000007                 push    edi
.text:00000008                 lea     edi, [ebp+var_5C]
.text:0000000B                 mov     ecx, 17h
.text:00000010                 mov     eax, 0CCCCCCCCh
.text:00000015                 rep stosd
.text:00000017                 cmp     [ebp+arg_C], 0
.text:0000001B                 jz      short loc_26
.text:0000001D                 mov     eax, [ebp+arg_C]
.text:00000020                 mov     dword ptr [eax], 0
.text:00000026
.text:00000026 loc_26:                                 ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+1Bj
.text:00000026                 cmp     [ebp+arg_8], 0
.text:0000002A                 jnz     short loc_33
.text:0000002C                 xor     eax, eax
.text:0000002E                 jmp     loc_260
.text:00000033 ; ---------------------------------------------------------------------------
.text:00000033
.text:00000033 loc_33:                                 ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+2Aj
.text:00000033                 mov     ecx, [ebp+this]
.text:00000036                 mov     edx, [ebp+this]
.text:00000039                 mov     [ebp+var_30], ecx
.text:0000003C                 mov     [ebp+var_34], edx
.text:0000003F                 mov     eax, [ebp+var_30]
.text:00000042                 mov     ecx, [ebp+var_34]
.text:00000045                 mov     edx, [eax+0Ch]
.text:00000048                 cmp     edx, [ecx+14h]
.text:0000004B                 jb      short loc_64
.text:0000004D                 ja      short loc_5D
.text:0000004F                 mov     eax, [ebp+var_30]
.text:00000052                 mov     ecx, [ebp+var_34]
.text:00000055                 mov     edx, [eax+8]
.text:00000058                 cmp     edx, [ecx+10h]
.text:0000005B                 jb      short loc_64
.text:0000005D
.text:0000005D loc_5D:                                 ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+4Dj
.text:0000005D                 xor     eax, eax
.text:0000005F                 jmp     loc_260
.text:00000064 ; ---------------------------------------------------------------------------
.text:00000064
.text:00000064 loc_64:                                 ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+4Bj
.text:00000064                                         ; CMultiStream::Read(void *,uint,uint *)+5Bj
.text:00000064                 mov     [ebp+var_4], 0
.text:0000006B                 mov     eax, [ebp+this]
.text:0000006E                 mov     ecx, [eax+18h]
.text:00000071                 mov     [ebp+var_8], ecx
.text:00000074                 mov     ecx, [ebp+this]
.text:00000077                 add     ecx, 1Ch
.text:0000007A                 call    ?Size@?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QBEIXZ ; CObjectVector<CMultiStream::CSubStreamInfo>::Size(void)
.text:0000007F                 mov     [ebp+var_C], eax
.text:00000082
.text:00000082 loc_82:                                 ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+11Dj
.text:00000082                 mov     edx, [ebp+var_8]
.text:00000085                 push    edx
.text:00000086                 mov     ecx, [ebp+this]
.text:00000089                 add     ecx, 1Ch
.text:0000008C                 call    ??A?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAEAAUCSubStreamInfo@CMultiStream@@I@Z ; CObjectVector<CMultiStream::CSubStreamInfo>::operator[](uint)
.text:00000091                 mov     [ebp+var_10], eax
.text:00000094                 mov     eax, [ebp+this]
.text:00000097                 mov     ecx, [ebp+var_10]
.text:0000009A                 mov     [ebp+var_38], eax
.text:0000009D                 mov     [ebp+var_3C], ecx
.text:000000A0                 mov     edx, [ebp+var_38]
.text:000000A3                 mov     eax, [ebp+var_3C]
.text:000000A6                 mov     ecx, [edx+0Ch]
.text:000000A9                 cmp     ecx, [eax+14h]
.text:000000AC                 ja      short loc_C6
.text:000000AE                 jb      short loc_BE
.text:000000B0                 mov     edx, [ebp+var_38]
.text:000000B3                 mov     eax, [ebp+var_3C]
.text:000000B6                 mov     ecx, [edx+8]
.text:000000B9                 cmp     ecx, [eax+10h]
.text:000000BC                 jnb     short loc_C6
.text:000000BE
.text:000000BE loc_BE:                                 ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+AEj
.text:000000BE                 mov     edx, [ebp+var_8]
.text:000000C1                 mov     [ebp+var_C], edx
.text:000000C4                 jmp     short loc_112
.text:000000C6 ; ---------------------------------------------------------------------------
.text:000000C6
.text:000000C6 loc_C6:                                 ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+ACj
.text:000000C6                                         ; CMultiStream::Read(void *,uint,uint *)+BCj
.text:000000C6                 mov     eax, [ebp+var_10]
.text:000000C9                 mov     ecx, [ebp+var_10]
.text:000000CC                 mov     edx, [eax+10h]
.text:000000CF                 add     edx, [ecx+8]
.text:000000D2                 mov     eax, [eax+14h]
.text:000000D5                 adc     eax, [ecx+0Ch]
.text:000000D8                 mov     ecx, [ebp+this]
.text:000000DB                 mov     [ebp+var_40], ecx
.text:000000DE                 mov     [ebp+var_48], edx
.text:000000E1                 mov     [ebp+var_44], eax
.text:000000E4                 mov     edx, [ebp+var_40]
.text:000000E7                 mov     eax, [edx+0Ch]
.text:000000EA                 cmp     eax, [ebp+var_44]
.text:000000ED                 jb      short loc_107
.text:000000EF                 ja      short loc_FC
.text:000000F1                 mov     ecx, [ebp+var_40]
.text:000000F4                 mov     edx, [ecx+8]
.text:000000F7                 cmp     edx, [ebp+var_48]
.text:000000FA                 jb      short loc_107
.text:000000FC
.text:000000FC loc_FC:                                 ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+EFj
.text:000000FC                 mov     eax, [ebp+var_8]
.text:000000FF                 add     eax, 1
.text:00000102                 mov     [ebp+var_4], eax
.text:00000105                 jmp     short loc_112
.text:00000107 ; ---------------------------------------------------------------------------
.text:00000107
.text:00000107 loc_107:                                ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+EDj
.text:00000107                                         ; CMultiStream::Read(void *,uint,uint *)+FAj
.text:00000107                 mov     ecx, [ebp+this]
.text:0000010A                 mov     edx, [ebp+var_8]
.text:0000010D                 mov     [ecx+18h], edx
.text:00000110                 jmp     short loc_122
.text:00000112 ; ---------------------------------------------------------------------------
.text:00000112
.text:00000112 loc_112:                                ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+C4j
.text:00000112                                         ; CMultiStream::Read(void *,uint,uint *)+105j
.text:00000112                 mov     eax, [ebp+var_4]
.text:00000115                 add     eax, [ebp+var_C]
.text:00000118                 shr     eax, 1
.text:0000011A                 mov     [ebp+var_8], eax
.text:0000011D                 jmp     loc_82
.text:00000122 ; ---------------------------------------------------------------------------
.text:00000122
.text:00000122 loc_122:                                ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+110j
.text:00000122                 mov     ecx, [ebp+this]
.text:00000125                 mov     edx, [ebp+var_8]
.text:00000128                 mov     [ecx+18h], edx
.text:0000012B                 mov     eax, [ebp+this]
.text:0000012E                 mov     ecx, [eax+18h]
.text:00000131                 push    ecx
.text:00000132                 mov     ecx, [ebp+this]
.text:00000135                 add     ecx, 1Ch
.text:00000138                 call    ??A?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAEAAUCSubStreamInfo@CMultiStream@@I@Z ; CObjectVector<CMultiStream::CSubStreamInfo>::operator[](uint)
.text:0000013D                 mov     [ebp+var_14], eax
.text:00000140                 mov     edx, [ebp+this]
.text:00000143                 mov     eax, [ebp+var_14]
.text:00000146                 mov     ecx, [edx+8]
.text:00000149                 sub     ecx, [eax+10h]
.text:0000014C                 mov     edx, [edx+0Ch]
.text:0000014F                 sbb     edx, [eax+14h]
.text:00000152                 mov     [ebp+var_1C], ecx
.text:00000155                 mov     [ebp+var_18], edx
.text:00000158                 mov     eax, [ebp+var_14]
.text:0000015B                 mov     [ebp+var_4C], eax
.text:0000015E                 mov     ecx, [ebp+var_4C]
.text:00000161                 mov     edx, [ebp+var_1C]
.text:00000164                 cmp     edx, [ecx+18h]
.text:00000167                 jnz     short loc_174
.text:00000169                 mov     eax, [ebp+var_4C]
.text:0000016C                 mov     ecx, [ebp+var_18]
.text:0000016F                 cmp     ecx, [eax+1Ch]
.text:00000172                 jz      short loc_1B8
.text:00000174
.text:00000174 loc_174:                                ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+167j
.text:00000174                 mov     ecx, [ebp+var_14]
.text:00000177                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:0000017C                 mov     [ebp+var_50], eax
.text:0000017F                 mov     edx, [ebp+var_14]
.text:00000182                 add     edx, 18h
.text:00000185                 mov     esi, esp
.text:00000187                 push    edx
.text:00000188                 push    0
.text:0000018A                 mov     eax, [ebp+var_18]
.text:0000018D                 push    eax
.text:0000018E                 mov     ecx, [ebp+var_1C]
.text:00000191                 push    ecx
.text:00000192                 mov     edx, [ebp+var_50]
.text:00000195                 push    edx
.text:00000196                 mov     eax, [ebp+var_50]
.text:00000199                 mov     ecx, [eax]
.text:0000019B                 mov     edx, [ecx+10h]
.text:0000019E                 call    edx
.text:000001A0                 cmp     esi, esp
.text:000001A2                 call    __RTC_CheckEsp
.text:000001A7                 mov     [ebp+var_20], eax
.text:000001AA                 cmp     [ebp+var_20], 0
.text:000001AE                 jz      short loc_1B8
.text:000001B0                 mov     eax, [ebp+var_20]
.text:000001B3                 jmp     loc_260
.text:000001B8 ; ---------------------------------------------------------------------------
.text:000001B8
.text:000001B8 loc_1B8:                                ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+172j
.text:000001B8                                         ; CMultiStream::Read(void *,uint,uint *)+1AEj
.text:000001B8                 mov     eax, [ebp+var_14]
.text:000001BB                 mov     ecx, [eax+8]
.text:000001BE                 sub     ecx, [ebp+var_1C]
.text:000001C1                 mov     edx, [eax+0Ch]
.text:000001C4                 sbb     edx, [ebp+var_18]
.text:000001C7                 mov     [ebp+var_28], ecx
.text:000001CA                 mov     [ebp+var_24], edx
.text:000001CD                 mov     eax, [ebp+arg_8]
.text:000001D0                 xor     ecx, ecx
.text:000001D2                 mov     [ebp+var_58], eax
.text:000001D5                 mov     [ebp+var_54], ecx
.text:000001D8                 mov     edx, [ebp+var_54]
.text:000001DB                 cmp     edx, [ebp+var_24]
.text:000001DE                 jb      short loc_1F0
.text:000001E0                 ja      short loc_1EA
.text:000001E2                 mov     eax, [ebp+var_58]
.text:000001E5                 cmp     eax, [ebp+var_28]
.text:000001E8                 jbe     short loc_1F0
.text:000001EA
.text:000001EA loc_1EA:                                ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+1E0j
.text:000001EA                 mov     ecx, [ebp+var_28]
.text:000001ED                 mov     [ebp+arg_8], ecx
.text:000001F0
.text:000001F0 loc_1F0:                                ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+1DEj
.text:000001F0                                         ; CMultiStream::Read(void *,uint,uint *)+1E8j
.text:000001F0                 mov     ecx, [ebp+var_14]
.text:000001F3                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:000001F8                 mov     [ebp+var_5C], eax
.text:000001FB                 mov     esi, esp
.text:000001FD                 lea     edx, [ebp+arg_8]
.text:00000200                 push    edx
.text:00000201                 mov     eax, [ebp+arg_8]
.text:00000204                 push    eax
.text:00000205                 mov     ecx, [ebp+arg_4]
.text:00000208                 push    ecx
.text:00000209                 mov     edx, [ebp+var_5C]
.text:0000020C                 push    edx
.text:0000020D                 mov     eax, [ebp+var_5C]
.text:00000210                 mov     ecx, [eax]
.text:00000212                 mov     edx, [ecx+0Ch]
.text:00000215                 call    edx
.text:00000217                 cmp     esi, esp
.text:00000219                 call    __RTC_CheckEsp
.text:0000021E                 mov     [ebp+var_2C], eax
.text:00000221                 mov     eax, [ebp+arg_8]
.text:00000224                 xor     ecx, ecx
.text:00000226                 mov     edx, [ebp+this]
.text:00000229                 add     eax, [edx+8]
.text:0000022C                 adc     ecx, [edx+0Ch]
.text:0000022F                 mov     edx, [ebp+this]
.text:00000232                 mov     [edx+8], eax
.text:00000235                 mov     [edx+0Ch], ecx
.text:00000238                 mov     eax, [ebp+arg_8]
.text:0000023B                 xor     ecx, ecx
.text:0000023D                 mov     edx, [ebp+var_14]
.text:00000240                 add     eax, [edx+18h]
.text:00000243                 adc     ecx, [edx+1Ch]
.text:00000246                 mov     edx, [ebp+var_14]
.text:00000249                 mov     [edx+18h], eax
.text:0000024C                 mov     [edx+1Ch], ecx
.text:0000024F                 cmp     [ebp+arg_C], 0
.text:00000253                 jz      short loc_25D
.text:00000255                 mov     eax, [ebp+arg_C]
.text:00000258                 mov     ecx, [ebp+arg_8]
.text:0000025B                 mov     [eax], ecx
.text:0000025D
.text:0000025D loc_25D:                                ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+253j
.text:0000025D                 mov     eax, [ebp+var_2C]
.text:00000260
.text:00000260 loc_260:                                ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+2Ej
.text:00000260                                         ; CMultiStream::Read(void *,uint,uint *)+5Fj ...
.text:00000260                 pop     edi
.text:00000261                 pop     esi
.text:00000262                 add     esp, 5Ch
.text:00000265                 cmp     ebp, esp
.text:00000267                 call    __RTC_CheckEsp
.text:0000026C                 mov     esp, ebp
.text:0000026E                 pop     ebp
.text:0000026F                 retn    10h
.text:0000026F ?Read@CMultiStream@@UAGJPAXIPAI@Z endp
.text:0000026F
.text:0000026F ; ---------------------------------------------------------------------------
.text:00000272                 align 10h
.text:00000280
.text:00000280 ; =============== S U B R O U T I N E =======================================
.text:00000280
.text:00000280 ; Attributes: bp-based frame
.text:00000280
.text:00000280 ; __int32 __stdcall CMultiStream::Seek(CMultiStream *this, __int64, unsigned int, unsigned __int64 *)
.text:00000280                 public ?Seek@CMultiStream@@UAGJ_JIPA_K@Z
.text:00000280 ?Seek@CMultiStream@@UAGJ_JIPA_K@Z proc near
.text:00000280
.text:00000280 var_4           = dword ptr -4
.text:00000280 this            = dword ptr  8
.text:00000280 arg_4           = qword ptr  0Ch
.text:00000280 arg_C           = dword ptr  14h
.text:00000280 arg_10          = dword ptr  18h
.text:00000280
.text:00000280                 push    ebp
.text:00000281                 mov     ebp, esp
.text:00000283                 push    ecx
.text:00000284                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000028B                 mov     eax, [ebp+arg_C]
.text:0000028E                 mov     [ebp+var_4], eax
.text:00000291                 cmp     [ebp+var_4], 0
.text:00000295                 jz      short loc_2A5
.text:00000297                 cmp     [ebp+var_4], 1
.text:0000029B                 jz      short loc_2A7
.text:0000029D                 cmp     [ebp+var_4], 2
.text:000002A1                 jz      short loc_2BE
.text:000002A3                 jmp     short loc_2D5
.text:000002A5 ; ---------------------------------------------------------------------------
.text:000002A5
.text:000002A5 loc_2A5:                                ; CODE XREF: CMultiStream::Seek(__int64,uint,unsigned __int64 *)+15j
.text:000002A5                 jmp     short loc_2DC
.text:000002A7 ; ---------------------------------------------------------------------------
.text:000002A7
.text:000002A7 loc_2A7:                                ; CODE XREF: CMultiStream::Seek(__int64,uint,unsigned __int64 *)+1Bj
.text:000002A7                 mov     ecx, [ebp+this]
.text:000002AA                 mov     edx, dword ptr [ebp+arg_4]
.text:000002AD                 add     edx, [ecx+8]
.text:000002B0                 mov     eax, dword ptr [ebp+arg_4+4]
.text:000002B3                 adc     eax, [ecx+0Ch]
.text:000002B6                 mov     dword ptr [ebp+arg_4], edx
.text:000002B9                 mov     dword ptr [ebp+arg_4+4], eax
.text:000002BC                 jmp     short loc_2DC
.text:000002BE ; ---------------------------------------------------------------------------
.text:000002BE
.text:000002BE loc_2BE:                                ; CODE XREF: CMultiStream::Seek(__int64,uint,unsigned __int64 *)+21j
.text:000002BE                 mov     ecx, [ebp+this]
.text:000002C1                 mov     edx, dword ptr [ebp+arg_4]
.text:000002C4                 add     edx, [ecx+10h]
.text:000002C7                 mov     eax, dword ptr [ebp+arg_4+4]
.text:000002CA                 adc     eax, [ecx+14h]
.text:000002CD                 mov     dword ptr [ebp+arg_4], edx
.text:000002D0                 mov     dword ptr [ebp+arg_4+4], eax
.text:000002D3                 jmp     short loc_2DC
.text:000002D5 ; ---------------------------------------------------------------------------
.text:000002D5
.text:000002D5 loc_2D5:                                ; CODE XREF: CMultiStream::Seek(__int64,uint,unsigned __int64 *)+23j
.text:000002D5                 mov     eax, 80030001h
.text:000002DA                 jmp     short loc_316
.text:000002DC ; ---------------------------------------------------------------------------
.text:000002DC
.text:000002DC loc_2DC:                                ; CODE XREF: CMultiStream::Seek(__int64,uint,unsigned __int64 *):loc_2A5j
.text:000002DC                                         ; CMultiStream::Seek(__int64,uint,unsigned __int64 *)+3Cj ...
.text:000002DC                 cmp     dword ptr [ebp+arg_4+4], 0
.text:000002E0                 jg      short loc_2F1
.text:000002E2                 jl      short loc_2EA
.text:000002E4                 cmp     dword ptr [ebp+arg_4], 0
.text:000002E8                 jnb     short loc_2F1
.text:000002EA
.text:000002EA loc_2EA:                                ; CODE XREF: CMultiStream::Seek(__int64,uint,unsigned __int64 *)+62j
.text:000002EA                 mov     eax, 80070083h
.text:000002EF                 jmp     short loc_316
.text:000002F1 ; ---------------------------------------------------------------------------
.text:000002F1
.text:000002F1 loc_2F1:                                ; CODE XREF: CMultiStream::Seek(__int64,uint,unsigned __int64 *)+60j
.text:000002F1                                         ; CMultiStream::Seek(__int64,uint,unsigned __int64 *)+68j
.text:000002F1                 mov     ecx, [ebp+this]
.text:000002F4                 mov     edx, dword ptr [ebp+arg_4]
.text:000002F7                 mov     [ecx+8], edx
.text:000002FA                 mov     eax, dword ptr [ebp+arg_4+4]
.text:000002FD                 mov     [ecx+0Ch], eax
.text:00000300                 cmp     [ebp+arg_10], 0
.text:00000304                 jz      short loc_314
.text:00000306                 mov     ecx, [ebp+arg_10]
.text:00000309                 mov     edx, dword ptr [ebp+arg_4]
.text:0000030C                 mov     [ecx], edx
.text:0000030E                 mov     eax, dword ptr [ebp+arg_4+4]
.text:00000311                 mov     [ecx+4], eax
.text:00000314
.text:00000314 loc_314:                                ; CODE XREF: CMultiStream::Seek(__int64,uint,unsigned __int64 *)+84j
.text:00000314                 xor     eax, eax
.text:00000316
.text:00000316 loc_316:                                ; CODE XREF: CMultiStream::Seek(__int64,uint,unsigned __int64 *)+5Aj
.text:00000316                                         ; CMultiStream::Seek(__int64,uint,unsigned __int64 *)+6Fj
.text:00000316                 mov     esp, ebp
.text:00000318                 pop     ebp
.text:00000319                 retn    14h
.text:00000319 ?Seek@CMultiStream@@UAGJ_JIPA_K@Z endp
.text:00000319
.text:00000319 _text           ends
.text:00000319
.rtc$TMZ:0000031C ; ===========================================================================
.rtc$TMZ:0000031C
.rtc$TMZ:0000031C ; Segment type: Pure data
.rtc$TMZ:0000031C ; Segment permissions: Read
.rtc$TMZ:0000031C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000031C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000031C                 ;org 31Ch
.rtc$TMZ:0000031C ; COMDAT (pick any)
.rtc$TMZ:0000031C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000031C _rtc$TMZ        ends
.rtc$TMZ:0000031C
.rtc$IMZ:00000320 ; ===========================================================================
.rtc$IMZ:00000320
.rtc$IMZ:00000320 ; Segment type: Pure data
.rtc$IMZ:00000320 ; Segment permissions: Read
.rtc$IMZ:00000320 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000320                 assume cs:_rtc$IMZ
.rtc$IMZ:00000320                 ;org 320h
.rtc$IMZ:00000320 ; COMDAT (pick any)
.rtc$IMZ:00000320 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000320 _rtc$IMZ        ends
.rtc$IMZ:00000320
.text:00000324 ; ===========================================================================
.text:00000324
.text:00000324 ; Segment type: Pure code
.text:00000324 ; Segment permissions: Read/Execute
.text:00000324 _text           segment para public 'CODE' use32
.text:00000324                 assume cs:_text
.text:00000324                 ;org 324h
.text:00000324 ; COMDAT (pick any)
.text:00000324                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000324
.text:00000324 ; =============== S U B R O U T I N E =======================================
.text:00000324
.text:00000324 ; Attributes: bp-based frame
.text:00000324
.text:00000324 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator->(void)const
.text:00000324                 public ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:00000324 ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:00000324                                         ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+177p
.text:00000324                                         ; CMultiStream::Read(void *,uint,uint *)+1F3p
.text:00000324
.text:00000324 var_4           = dword ptr -4
.text:00000324
.text:00000324                 push    ebp
.text:00000325                 mov     ebp, esp
.text:00000327                 push    ecx
.text:00000328                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000032F                 mov     [ebp+var_4], ecx
.text:00000332                 mov     eax, [ebp+var_4]
.text:00000335                 mov     eax, [eax]
.text:00000337                 mov     esp, ebp
.text:00000339                 pop     ebp
.text:0000033A                 retn
.text:0000033A ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:0000033A
.text:0000033A ; ---------------------------------------------------------------------------
.text:0000033B                 align 4
.text:0000033B _text           ends
.text:0000033B
.text:0000033C ; ===========================================================================
.text:0000033C
.text:0000033C ; Segment type: Pure code
.text:0000033C ; Segment permissions: Read/Execute
.text:0000033C _text           segment para public 'CODE' use32
.text:0000033C                 assume cs:_text
.text:0000033C                 ;org 33Ch
.text:0000033C ; COMDAT (pick any)
.text:0000033C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000033C
.text:0000033C ; =============== S U B R O U T I N E =======================================
.text:0000033C
.text:0000033C ; Attributes: bp-based frame
.text:0000033C
.text:0000033C ; public: unsigned int __thiscall CObjectVector<struct CMultiStream::CSubStreamInfo>::Size(void)const
.text:0000033C                 public ?Size@?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QBEIXZ
.text:0000033C ?Size@?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QBEIXZ proc near
.text:0000033C                                         ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+7Ap
.text:0000033C
.text:0000033C var_4           = dword ptr -4
.text:0000033C
.text:0000033C                 push    ebp
.text:0000033D                 mov     ebp, esp
.text:0000033F                 push    ecx
.text:00000340                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000347                 mov     [ebp+var_4], ecx
.text:0000034A                 mov     ecx, [ebp+var_4]
.text:0000034D                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00000352                 add     esp, 4
.text:00000355                 cmp     ebp, esp
.text:00000357                 call    __RTC_CheckEsp
.text:0000035C                 mov     esp, ebp
.text:0000035E                 pop     ebp
.text:0000035F                 retn
.text:0000035F ?Size@?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QBEIXZ endp
.text:0000035F
.text:0000035F _text           ends
.text:0000035F
.text:00000360 ; ===========================================================================
.text:00000360
.text:00000360 ; Segment type: Pure code
.text:00000360 ; Segment permissions: Read/Execute
.text:00000360 _text           segment para public 'CODE' use32
.text:00000360                 assume cs:_text
.text:00000360                 ;org 360h
.text:00000360 ; COMDAT (pick any)
.text:00000360                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000360
.text:00000360 ; =============== S U B R O U T I N E =======================================
.text:00000360
.text:00000360 ; Attributes: bp-based frame
.text:00000360
.text:00000360 ; public: struct CMultiStream::CSubStreamInfo & __thiscall CObjectVector<struct CMultiStream::CSubStreamInfo>::operator[](unsigned int)
.text:00000360                 public ??A?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAEAAUCSubStreamInfo@CMultiStream@@I@Z
.text:00000360 ??A?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAEAAUCSubStreamInfo@CMultiStream@@I@Z proc near
.text:00000360                                         ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+8Cp
.text:00000360                                         ; CMultiStream::Read(void *,uint,uint *)+138p
.text:00000360
.text:00000360 var_4           = dword ptr -4
.text:00000360 arg_0           = dword ptr  8
.text:00000360
.text:00000360                 push    ebp
.text:00000361                 mov     ebp, esp
.text:00000363                 push    ecx
.text:00000364                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000036B                 mov     [ebp+var_4], ecx
.text:0000036E                 mov     eax, [ebp+arg_0]
.text:00000371                 push    eax
.text:00000372                 mov     ecx, [ebp+var_4]
.text:00000375                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000037A                 mov     eax, [eax]
.text:0000037C                 add     esp, 4
.text:0000037F                 cmp     ebp, esp
.text:00000381                 call    __RTC_CheckEsp
.text:00000386                 mov     esp, ebp
.text:00000388                 pop     ebp
.text:00000389                 retn    4
.text:00000389 ??A?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAEAAUCSubStreamInfo@CMultiStream@@I@Z endp
.text:00000389
.text:00000389 _text           ends
.text:00000389
.text:0000038C ; ===========================================================================
.text:0000038C
.text:0000038C ; Segment type: Pure code
.text:0000038C ; Segment permissions: Read/Execute
.text:0000038C _text           segment para public 'CODE' use32
.text:0000038C                 assume cs:_text
.text:0000038C                 ;org 38Ch
.text:0000038C ; COMDAT (pick any)
.text:0000038C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000038C
.text:0000038C ; =============== S U B R O U T I N E =======================================
.text:0000038C
.text:0000038C ; Attributes: bp-based frame
.text:0000038C
.text:0000038C ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:0000038C                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:0000038C ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:0000038C                                         ; CODE XREF: CObjectVector<CMultiStream::CSubStreamInfo>::Size(void)+11p
.text:0000038C
.text:0000038C var_4           = dword ptr -4
.text:0000038C
.text:0000038C                 push    ebp
.text:0000038D                 mov     ebp, esp
.text:0000038F                 push    ecx
.text:00000390                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000397                 mov     [ebp+var_4], ecx
.text:0000039A                 mov     eax, [ebp+var_4]
.text:0000039D                 mov     eax, [eax+4]
.text:000003A0                 mov     esp, ebp
.text:000003A2                 pop     ebp
.text:000003A3                 retn
.text:000003A3 ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:000003A3
.text:000003A3 _text           ends
.text:000003A3
.text:000003A4 ; ===========================================================================
.text:000003A4
.text:000003A4 ; Segment type: Pure code
.text:000003A4 ; Segment permissions: Read/Execute
.text:000003A4 _text           segment para public 'CODE' use32
.text:000003A4                 assume cs:_text
.text:000003A4                 ;org 3A4h
.text:000003A4 ; COMDAT (pick any)
.text:000003A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000003A4
.text:000003A4 ; =============== S U B R O U T I N E =======================================
.text:000003A4
.text:000003A4 ; Attributes: bp-based frame
.text:000003A4
.text:000003A4 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:000003A4                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:000003A4 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:000003A4                                         ; CODE XREF: CObjectVector<CMultiStream::CSubStreamInfo>::operator[](uint)+15p
.text:000003A4
.text:000003A4 var_4           = dword ptr -4
.text:000003A4 arg_0           = dword ptr  8
.text:000003A4
.text:000003A4                 push    ebp
.text:000003A5                 mov     ebp, esp
.text:000003A7                 push    ecx
.text:000003A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003AF                 mov     [ebp+var_4], ecx
.text:000003B2                 mov     eax, [ebp+var_4]
.text:000003B5                 mov     ecx, [eax]
.text:000003B7                 mov     edx, [ebp+arg_0]
.text:000003BA                 lea     eax, [ecx+edx*4]
.text:000003BD                 mov     esp, ebp
.text:000003BF                 pop     ebp
.text:000003C0                 retn    4
.text:000003C0 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:000003C0
.text:000003C0 _text           ends
.text:000003C0
UNDEF:000003D0 ; ===========================================================================
UNDEF:000003D0
UNDEF:000003D0 ; Segment type: Externs
UNDEF:000003D0 ; UNDEF
UNDEF:000003D0                 extrn __RTC_CheckEsp:near
UNDEF:000003D0                                         ; CODE XREF: CMultiStream::Read(void *,uint,uint *)+1A2p
UNDEF:000003D0                                         ; CMultiStream::Read(void *,uint,uint *)+219p ...
UNDEF:000003D4                 extrn __RTC_Shutdown:near
UNDEF:000003D4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000003D8                 extrn __RTC_InitBase:near
UNDEF:000003D8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000003D8
UNDEF:000003D8
UNDEF:000003D8                 end