.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 624A12518142EE8345EF7C6DD8EB1B20
.rdata:00000000 ; Input CRC32 : 5F870C43
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\BcjRegister.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG66523        db  42h ; B             ; DATA XREF: .rdata:00000018o
.rdata:00000001                 db  43h ; C
.rdata:00000002                 db  4Ah ; J
.rdata:00000003                 db    0
.rdata:00000004                 db    0
.rdata:00000005                 db    0
.rdata:00000006                 db    0
.rdata:00000007                 db    0
.rdata:00000008 ; struct CCodecInfo g_CodecInfo
.rdata:00000008 _g_CodecInfo    dd offset ?CreateDec@@YGPAXXZ
.rdata:00000008                                         ; DATA XREF: CRegisterCodecBCJ::CRegisterCodecBCJ(void)+Eo
.rdata:00000008                                         ; CreateDec(void)
.rdata:0000000C                 dd offset ?CreateEnc@@YGPAXXZ ; CreateEnc(void)
.rdata:00000010                 db    3
.rdata:00000011                 db    1
.rdata:00000012                 db    3
.rdata:00000013                 db    3
.rdata:00000014                 db    0
.rdata:00000015                 db    0
.rdata:00000016                 db    0
.rdata:00000017                 db    0
.rdata:00000018                 dd offset $SG66523
.rdata:0000001C                 db    1
.rdata:0000001D                 db    0
.rdata:0000001E                 db    0
.rdata:0000001F                 db    0
.rdata:00000020                 db    1
.rdata:00000021                 db    0
.rdata:00000022                 db    0
.rdata:00000023                 db    0
.rdata:00000024                 db    0
.rdata:00000025                 db    0
.rdata:00000026                 db    0
.rdata:00000027                 db    0
.rdata:00000027 _rdata          ends
.rdata:00000027
.text:00000028 ; ===========================================================================
.text:00000028
.text:00000028 ; Segment type: Pure code
.text:00000028 ; Segment permissions: Read/Execute
.text:00000028 _text           segment para public 'CODE' use32
.text:00000028                 assume cs:_text
.text:00000028                 ;org 28h
.text:00000028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000028
.text:00000028 ; =============== S U B R O U T I N E =======================================
.text:00000028
.text:00000028 ; Attributes: bp-based frame
.text:00000028
.text:00000028 ; void * __stdcall CreateDec(void)
.text:00000028 ?CreateDec@@YGPAXXZ proc near           ; DATA XREF: .rdata:_g_CodecInfoo
.text:00000028
.text:00000028 var_18          = dword ptr -18h
.text:00000028 var_14          = dword ptr -14h
.text:00000028 var_10          = dword ptr -10h
.text:00000028 var_C           = dword ptr -0Ch
.text:00000028 var_4           = dword ptr -4
.text:00000028
.text:00000028                 push    ebp
.text:00000029                 mov     ebp, esp
.text:0000002B                 push    0FFFFFFFFh
.text:0000002D                 push    offset __ehhandler$?CreateDec@@YGPAXXZ
.text:00000032                 mov     eax, large fs:0
.text:00000038                 push    eax
.text:00000039                 sub     esp, 0Ch
.text:0000003C                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00000043                 mov     [ebp+var_14], 0CCCCCCCCh
.text:0000004A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000051                 mov     eax, dword ptr ds:___security_cookie
.text:00000056                 xor     eax, ebp
.text:00000058                 push    eax
.text:00000059                 lea     eax, [ebp+var_C]
.text:0000005C                 mov     large fs:0, eax
.text:00000062                 push    14h             ; unsigned int
.text:00000064                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000069                 add     esp, 4
.text:0000006C                 mov     [ebp+var_14], eax
.text:0000006F                 mov     [ebp+var_4], 0
.text:00000076                 cmp     [ebp+var_14], 0
.text:0000007A                 jz      short loc_8B
.text:0000007C                 push    0
.text:0000007E                 mov     ecx, [ebp+var_14]
.text:00000081                 call    ??0CBcjCoder@@QAE@H@Z ; CBcjCoder::CBcjCoder(int)
.text:00000086                 mov     [ebp+var_18], eax
.text:00000089                 jmp     short loc_92
.text:0000008B ; ---------------------------------------------------------------------------
.text:0000008B
.text:0000008B loc_8B:                                 ; CODE XREF: CreateDec(void)+52j
.text:0000008B                 mov     [ebp+var_18], 0
.text:00000092
.text:00000092 loc_92:                                 ; CODE XREF: CreateDec(void)+61j
.text:00000092                 mov     eax, [ebp+var_18]
.text:00000095                 mov     [ebp+var_10], eax
.text:00000098                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000009F                 mov     eax, [ebp+var_10]
.text:000000A2                 mov     ecx, [ebp+var_C]
.text:000000A5                 mov     large fs:0, ecx
.text:000000AC                 pop     ecx
.text:000000AD                 add     esp, 18h
.text:000000B0                 cmp     ebp, esp
.text:000000B2                 call    __RTC_CheckEsp
.text:000000B7                 mov     esp, ebp
.text:000000B9                 pop     ebp
.text:000000BA                 retn
.text:000000BA ?CreateDec@@YGPAXXZ endp
.text:000000BA
.text:000000BA ; ---------------------------------------------------------------------------
.text:000000BB                 db 0Dh dup(0CCh)
.text:000000C8
.text:000000C8 ; =============== S U B R O U T I N E =======================================
.text:000000C8
.text:000000C8 ; Attributes: bp-based frame
.text:000000C8
.text:000000C8 ; void * __stdcall CreateEnc(void)
.text:000000C8 ?CreateEnc@@YGPAXXZ proc near           ; DATA XREF: .rdata:0000000Co
.text:000000C8
.text:000000C8 var_18          = dword ptr -18h
.text:000000C8 var_14          = dword ptr -14h
.text:000000C8 var_10          = dword ptr -10h
.text:000000C8 var_C           = dword ptr -0Ch
.text:000000C8 var_4           = dword ptr -4
.text:000000C8
.text:000000C8                 push    ebp
.text:000000C9                 mov     ebp, esp
.text:000000CB                 push    0FFFFFFFFh
.text:000000CD                 push    offset __ehhandler$?CreateEnc@@YGPAXXZ
.text:000000D2                 mov     eax, large fs:0
.text:000000D8                 push    eax
.text:000000D9                 sub     esp, 0Ch
.text:000000DC                 mov     [ebp+var_18], 0CCCCCCCCh
.text:000000E3                 mov     [ebp+var_14], 0CCCCCCCCh
.text:000000EA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000000F1                 mov     eax, dword ptr ds:___security_cookie
.text:000000F6                 xor     eax, ebp
.text:000000F8                 push    eax
.text:000000F9                 lea     eax, [ebp+var_C]
.text:000000FC                 mov     large fs:0, eax
.text:00000102                 push    14h             ; unsigned int
.text:00000104                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000109                 add     esp, 4
.text:0000010C                 mov     [ebp+var_14], eax
.text:0000010F                 mov     [ebp+var_4], 0
.text:00000116                 cmp     [ebp+var_14], 0
.text:0000011A                 jz      short loc_12B
.text:0000011C                 push    1
.text:0000011E                 mov     ecx, [ebp+var_14]
.text:00000121                 call    ??0CBcjCoder@@QAE@H@Z ; CBcjCoder::CBcjCoder(int)
.text:00000126                 mov     [ebp+var_18], eax
.text:00000129                 jmp     short loc_132
.text:0000012B ; ---------------------------------------------------------------------------
.text:0000012B
.text:0000012B loc_12B:                                ; CODE XREF: CreateEnc(void)+52j
.text:0000012B                 mov     [ebp+var_18], 0
.text:00000132
.text:00000132 loc_132:                                ; CODE XREF: CreateEnc(void)+61j
.text:00000132                 mov     eax, [ebp+var_18]
.text:00000135                 mov     [ebp+var_10], eax
.text:00000138                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000013F                 mov     eax, [ebp+var_10]
.text:00000142                 mov     ecx, [ebp+var_C]
.text:00000145                 mov     large fs:0, ecx
.text:0000014C                 pop     ecx
.text:0000014D                 add     esp, 18h
.text:00000150                 cmp     ebp, esp
.text:00000152                 call    __RTC_CheckEsp
.text:00000157                 mov     esp, ebp
.text:00000159                 pop     ebp
.text:0000015A                 retn
.text:0000015A ?CreateEnc@@YGPAXXZ endp
.text:0000015A
.text:0000015A ; ---------------------------------------------------------------------------
.text:0000015B                 align 4
.text:0000015B _text           ends
.text:0000015B
.text$x:0000015C ; ===========================================================================
.text$x:0000015C
.text$x:0000015C ; Segment type: Pure code
.text$x:0000015C ; Segment permissions: Read/Execute
.text$x:0000015C _text$x         segment para public 'CODE' use32
.text$x:0000015C                 assume cs:_text$x
.text$x:0000015C                 ;org 15Ch
.text$x:0000015C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000015C
.text$x:0000015C ; =============== S U B R O U T I N E =======================================
.text$x:0000015C
.text$x:0000015C
.text$x:0000015C __unwindfunclet$?CreateDec@@YGPAXXZ$0 proc near
.text$x:0000015C                                         ; DATA XREF: .xdata$x:000001ACo
.text$x:0000015C                 mov     eax, [ebp-14h]
.text$x:0000015F                 push    eax             ; void *
.text$x:00000160                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000165                 pop     ecx
.text$x:00000166                 retn
.text$x:00000166 __unwindfunclet$?CreateDec@@YGPAXXZ$0 endp
.text$x:00000166
.text$x:00000167
.text$x:00000167 ; =============== S U B R O U T I N E =======================================
.text$x:00000167
.text$x:00000167
.text$x:00000167 __ehhandler$?CreateDec@@YGPAXXZ proc near ; DATA XREF: CreateDec(void)+5o
.text$x:00000167
.text$x:00000167 arg_4           = dword ptr  8
.text$x:00000167
.text$x:00000167                 mov     edx, [esp+arg_4]
.text$x:0000016B                 lea     eax, [edx+0Ch]
.text$x:0000016E                 mov     ecx, [edx-10h]
.text$x:00000171                 xor     ecx, eax
.text$x:00000173                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000178                 mov     eax, offset __ehfuncinfo$?CreateDec@@YGPAXXZ
.text$x:0000017D                 jmp     ___CxxFrameHandler3
.text$x:0000017D __ehhandler$?CreateDec@@YGPAXXZ endp
.text$x:0000017D
.text$x:00000182
.text$x:00000182 ; =============== S U B R O U T I N E =======================================
.text$x:00000182
.text$x:00000182
.text$x:00000182 __unwindfunclet$?CreateEnc@@YGPAXXZ$0 proc near
.text$x:00000182                                         ; DATA XREF: .xdata$x:000001D8o
.text$x:00000182                 mov     eax, [ebp-14h]
.text$x:00000185                 push    eax             ; void *
.text$x:00000186                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000018B                 pop     ecx
.text$x:0000018C                 retn
.text$x:0000018C __unwindfunclet$?CreateEnc@@YGPAXXZ$0 endp
.text$x:0000018C
.text$x:0000018D
.text$x:0000018D ; =============== S U B R O U T I N E =======================================
.text$x:0000018D
.text$x:0000018D
.text$x:0000018D __ehhandler$?CreateEnc@@YGPAXXZ proc near ; DATA XREF: CreateEnc(void)+5o
.text$x:0000018D
.text$x:0000018D arg_4           = dword ptr  8
.text$x:0000018D
.text$x:0000018D                 mov     edx, [esp+arg_4]
.text$x:00000191                 lea     eax, [edx+0Ch]
.text$x:00000194                 mov     ecx, [edx-10h]
.text$x:00000197                 xor     ecx, eax
.text$x:00000199                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000019E                 mov     eax, offset __ehfuncinfo$?CreateEnc@@YGPAXXZ
.text$x:000001A3                 jmp     ___CxxFrameHandler3
.text$x:000001A3 __ehhandler$?CreateEnc@@YGPAXXZ endp
.text$x:000001A3
.text$x:000001A3 _text$x         ends
.text$x:000001A3
.xdata$x:000001A8 ; ===========================================================================
.xdata$x:000001A8
.xdata$x:000001A8 ; Segment type: Pure data
.xdata$x:000001A8 ; Segment permissions: Read
.xdata$x:000001A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000001A8                 assume cs:_xdata$x
.xdata$x:000001A8                 ;org 1A8h
.xdata$x:000001A8 __unwindtable$?CreateDec@@YGPAXXZ db 0FFh ; DATA XREF: .xdata$x:000001B8o
.xdata$x:000001A9                 db 0FFh
.xdata$x:000001AA                 db 0FFh
.xdata$x:000001AB                 db 0FFh
.xdata$x:000001AC                 dd offset __unwindfunclet$?CreateDec@@YGPAXXZ$0
.xdata$x:000001B0 __ehfuncinfo$?CreateDec@@YGPAXXZ db  22h ; "
.xdata$x:000001B0                                         ; DATA XREF: __ehhandler$?CreateDec@@YGPAXXZ+11o
.xdata$x:000001B1                 db    5
.xdata$x:000001B2                 db  93h ; ô
.xdata$x:000001B3                 db  19h
.xdata$x:000001B4                 db    1
.xdata$x:000001B5                 db    0
.xdata$x:000001B6                 db    0
.xdata$x:000001B7                 db    0
.xdata$x:000001B8                 dd offset __unwindtable$?CreateDec@@YGPAXXZ
.xdata$x:000001BC                 db    0
.xdata$x:000001BD                 db    0
.xdata$x:000001BE                 db    0
.xdata$x:000001BF                 db    0
.xdata$x:000001C0                 db    0
.xdata$x:000001C1                 db    0
.xdata$x:000001C2                 db    0
.xdata$x:000001C3                 db    0
.xdata$x:000001C4                 db    0
.xdata$x:000001C5                 db    0
.xdata$x:000001C6                 db    0
.xdata$x:000001C7                 db    0
.xdata$x:000001C8                 db    0
.xdata$x:000001C9                 db    0
.xdata$x:000001CA                 db    0
.xdata$x:000001CB                 db    0
.xdata$x:000001CC                 db    0
.xdata$x:000001CD                 db    0
.xdata$x:000001CE                 db    0
.xdata$x:000001CF                 db    0
.xdata$x:000001D0                 db    1
.xdata$x:000001D1                 db    0
.xdata$x:000001D2                 db    0
.xdata$x:000001D3                 db    0
.xdata$x:000001D4 __unwindtable$?CreateEnc@@YGPAXXZ db 0FFh ; DATA XREF: .xdata$x:000001E4o
.xdata$x:000001D5                 db 0FFh
.xdata$x:000001D6                 db 0FFh
.xdata$x:000001D7                 db 0FFh
.xdata$x:000001D8                 dd offset __unwindfunclet$?CreateEnc@@YGPAXXZ$0
.xdata$x:000001DC __ehfuncinfo$?CreateEnc@@YGPAXXZ db  22h ; "
.xdata$x:000001DC                                         ; DATA XREF: __ehhandler$?CreateEnc@@YGPAXXZ+11o
.xdata$x:000001DD                 db    5
.xdata$x:000001DE                 db  93h ; ô
.xdata$x:000001DF                 db  19h
.xdata$x:000001E0                 db    1
.xdata$x:000001E1                 db    0
.xdata$x:000001E2                 db    0
.xdata$x:000001E3                 db    0
.xdata$x:000001E4                 dd offset __unwindtable$?CreateEnc@@YGPAXXZ
.xdata$x:000001E8                 db    0
.xdata$x:000001E9                 db    0
.xdata$x:000001EA                 db    0
.xdata$x:000001EB                 db    0
.xdata$x:000001EC                 db    0
.xdata$x:000001ED                 db    0
.xdata$x:000001EE                 db    0
.xdata$x:000001EF                 db    0
.xdata$x:000001F0                 db    0
.xdata$x:000001F1                 db    0
.xdata$x:000001F2                 db    0
.xdata$x:000001F3                 db    0
.xdata$x:000001F4                 db    0
.xdata$x:000001F5                 db    0
.xdata$x:000001F6                 db    0
.xdata$x:000001F7                 db    0
.xdata$x:000001F8                 db    0
.xdata$x:000001F9                 db    0
.xdata$x:000001FA                 db    0
.xdata$x:000001FB                 db    0
.xdata$x:000001FC                 db    1
.xdata$x:000001FD                 db    0
.xdata$x:000001FE                 db    0
.xdata$x:000001FF                 db    0
.xdata$x:000001FF _xdata$x        ends
.xdata$x:000001FF
.rtc$TMZ:00000200 ; ===========================================================================
.rtc$TMZ:00000200
.rtc$TMZ:00000200 ; Segment type: Pure data
.rtc$TMZ:00000200 ; Segment permissions: Read
.rtc$TMZ:00000200 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000200                 assume cs:_rtc$TMZ
.rtc$TMZ:00000200                 ;org 200h
.rtc$TMZ:00000200 ; COMDAT (pick any)
.rtc$TMZ:00000200 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000200 _rtc$TMZ        ends
.rtc$TMZ:00000200
.rtc$IMZ:00000204 ; ===========================================================================
.rtc$IMZ:00000204
.rtc$IMZ:00000204 ; Segment type: Pure data
.rtc$IMZ:00000204 ; Segment permissions: Read
.rtc$IMZ:00000204 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000204                 assume cs:_rtc$IMZ
.rtc$IMZ:00000204                 ;org 204h
.rtc$IMZ:00000204 ; COMDAT (pick any)
.rtc$IMZ:00000204 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000204 _rtc$IMZ        ends
.rtc$IMZ:00000204
.text:00000208 ; ===========================================================================
.text:00000208
.text:00000208 ; Segment type: Pure code
.text:00000208 ; Segment permissions: Read/Execute
.text:00000208 _text           segment para public 'CODE' use32
.text:00000208                 assume cs:_text
.text:00000208                 ;org 208h
.text:00000208 ; COMDAT (pick any)
.text:00000208                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000208
.text:00000208 ; =============== S U B R O U T I N E =======================================
.text:00000208
.text:00000208 ; Attributes: bp-based frame
.text:00000208
.text:00000208 ; public: __thiscall CBcjCoder::CBcjCoder(int)
.text:00000208                 public ??0CBcjCoder@@QAE@H@Z
.text:00000208 ??0CBcjCoder@@QAE@H@Z proc near         ; CODE XREF: CreateDec(void)+59p
.text:00000208                                         ; CreateEnc(void)+59p
.text:00000208
.text:00000208 var_4           = dword ptr -4
.text:00000208 arg_0           = dword ptr  8
.text:00000208
.text:00000208                 push    ebp
.text:00000209                 mov     ebp, esp
.text:0000020B                 push    ecx
.text:0000020C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000213                 mov     [ebp+var_4], ecx
.text:00000216                 mov     ecx, [ebp+var_4] ; this
.text:00000219                 call    ??0ICompressFilter@@QAE@XZ ; ICompressFilter::ICompressFilter(void)
.text:0000021E                 mov     ecx, [ebp+var_4]
.text:00000221                 add     ecx, 4          ; this
.text:00000224                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000229                 mov     eax, [ebp+var_4]
.text:0000022C                 mov     dword ptr [eax], offset ??_7CBcjCoder@@6B@ ; const CBcjCoder::`vftable'
.text:00000232                 mov     ecx, [ebp+var_4]
.text:00000235                 mov     dword ptr [ecx+8], 0
.text:0000023C                 mov     edx, [ebp+var_4]
.text:0000023F                 mov     eax, [ebp+arg_0]
.text:00000242                 mov     [edx+10h], eax
.text:00000245                 mov     ecx, [ebp+var_4]
.text:00000248                 mov     dword ptr [ecx+0Ch], 0
.text:0000024F                 mov     eax, [ebp+var_4]
.text:00000252                 add     esp, 4
.text:00000255                 cmp     ebp, esp
.text:00000257                 call    __RTC_CheckEsp
.text:0000025C                 mov     esp, ebp
.text:0000025E                 pop     ebp
.text:0000025F                 retn    4
.text:0000025F ??0CBcjCoder@@QAE@H@Z endp
.text:0000025F
.text:0000025F ; ---------------------------------------------------------------------------
.text:00000262                 align 4
.text:00000262 _text           ends
.text:00000262
.rdata:00000264 ; ===========================================================================
.rdata:00000264
.rdata:00000264 ; Segment type: Pure data
.rdata:00000264 ; Segment permissions: Read
.rdata:00000264 _rdata          segment dword public 'DATA' use32
.rdata:00000264                 assume cs:_rdata
.rdata:00000264                 ;org 264h
.rdata:00000264 ; COMDAT (pick largest)
.rdata:00000264                 dd offset ??_R4CBcjCoder@@6B@ ; const CBcjCoder::`RTTI Complete Object Locator'
.rdata:00000268                 public ??_7CBcjCoder@@6B@
.rdata:00000268 ; const CBcjCoder::`vftable'
.rdata:00000268 ??_7CBcjCoder@@6B@ dd offset ?QueryInterface@CBcjCoder@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000268                                         ; DATA XREF: CBcjCoder::CBcjCoder(int)+24o
.rdata:00000268                                         ; CBcjCoder::QueryInterface(_GUID const &,void * *)
.rdata:0000026C                 dd offset ?AddRef@CBcjCoder@@UAGKXZ ; CBcjCoder::AddRef(void)
.rdata:00000270                 dd offset ?Release@CBcjCoder@@UAGKXZ ; CBcjCoder::Release(void)
.rdata:00000274                 dd offset ?Init@CBcjCoder@@UAGJXZ ; CBcjCoder::Init(void)
.rdata:00000278                 dd offset ?Filter@CBcjCoder@@UAGIPAEI@Z ; CBcjCoder::Filter(uchar *,uint)
.rdata:00000278 _rdata          ends
.rdata:00000278
.rdata$r:0000027C ; ===========================================================================
.rdata$r:0000027C
.rdata$r:0000027C ; Segment type: Pure data
.rdata$r:0000027C ; Segment permissions: Read
.rdata$r:0000027C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000027C                 assume cs:_rdata$r
.rdata$r:0000027C                 ;org 27Ch
.rdata$r:0000027C ; COMDAT (pick any)
.rdata$r:0000027C                 public ??_R4CBcjCoder@@6B@
.rdata$r:0000027C ; const CBcjCoder::`RTTI Complete Object Locator'
.rdata$r:0000027C ??_R4CBcjCoder@@6B@ db    0             ; DATA XREF: .rdata:00000264o
.rdata$r:0000027D                 db    0
.rdata$r:0000027E                 db    0
.rdata$r:0000027F                 db    0
.rdata$r:00000280                 db    0
.rdata$r:00000281                 db    0
.rdata$r:00000282                 db    0
.rdata$r:00000283                 db    0
.rdata$r:00000284                 db    0
.rdata$r:00000285                 db    0
.rdata$r:00000286                 db    0
.rdata$r:00000287                 db    0
.rdata$r:00000288                 dd offset ??_R0?AVCBcjCoder@@@8 ; CBcjCoder `RTTI Type Descriptor'
.rdata$r:0000028C                 dd offset ??_R3CBcjCoder@@8 ; CBcjCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000028C _rdata$r        ends
.rdata$r:0000028C
.data:00000290 ; ===========================================================================
.data:00000290
.data:00000290 ; Segment type: Pure data
.data:00000290 ; Segment permissions: Read/Write
.data:00000290 _data           segment dword public 'DATA' use32
.data:00000290                 assume cs:_data
.data:00000290                 ;org 290h
.data:00000290 ; COMDAT (pick any)
.data:00000290                 public ??_R0?AVCBcjCoder@@@8
.data:00000290 ; class CBcjCoder `RTTI Type Descriptor'
.data:00000290 ??_R0?AVCBcjCoder@@@8 dd offset ??_7type_info@@6B@
.data:00000290                                         ; DATA XREF: .rdata$r:00000288o
.data:00000290                                         ; .rdata$r:CBcjCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000290                                         ; const type_info::`vftable'
.data:00000294                 align 8
.data:00000298 a_?avcbcjcoder@ db '.?AVCBcjCoder@@',0
.data:00000298 _data           ends
.data:00000298
.rdata$r:000002A8 ; ===========================================================================
.rdata$r:000002A8
.rdata$r:000002A8 ; Segment type: Pure data
.rdata$r:000002A8 ; Segment permissions: Read
.rdata$r:000002A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002A8                 assume cs:_rdata$r
.rdata$r:000002A8                 ;org 2A8h
.rdata$r:000002A8 ; COMDAT (pick any)
.rdata$r:000002A8                 public ??_R3CBcjCoder@@8
.rdata$r:000002A8 ; CBcjCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000002A8 ??_R3CBcjCoder@@8 db    0               ; DATA XREF: .rdata$r:0000028Co
.rdata$r:000002A8                                         ; .rdata$r:000002E4o
.rdata$r:000002A9                 db    0
.rdata$r:000002AA                 db    0
.rdata$r:000002AB                 db    0
.rdata$r:000002AC                 db    1
.rdata$r:000002AD                 db    0
.rdata$r:000002AE                 db    0
.rdata$r:000002AF                 db    0
.rdata$r:000002B0                 db    4
.rdata$r:000002B1                 db    0
.rdata$r:000002B2                 db    0
.rdata$r:000002B3                 db    0
.rdata$r:000002B4                 dd offset ??_R2CBcjCoder@@8 ; CBcjCoder::`RTTI Base Class Array'
.rdata$r:000002B4 _rdata$r        ends
.rdata$r:000002B4
.rdata$r:000002B8 ; ===========================================================================
.rdata$r:000002B8
.rdata$r:000002B8 ; Segment type: Pure data
.rdata$r:000002B8 ; Segment permissions: Read
.rdata$r:000002B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002B8                 assume cs:_rdata$r
.rdata$r:000002B8                 ;org 2B8h
.rdata$r:000002B8 ; COMDAT (pick any)
.rdata$r:000002B8                 public ??_R2CBcjCoder@@8
.rdata$r:000002B8 ; CBcjCoder::`RTTI Base Class Array'
.rdata$r:000002B8 ??_R2CBcjCoder@@8 dd offset ??_R1A@?0A@EA@CBcjCoder@@8
.rdata$r:000002B8                                         ; DATA XREF: .rdata$r:000002B4o
.rdata$r:000002B8                                         ; CBcjCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000002BC                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000002C0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000002C4                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000002C8                 db    0
.rdata$r:000002C9                 align 4
.rdata$r:000002C9 _rdata$r        ends
.rdata$r:000002C9
.rdata$r:000002CC ; ===========================================================================
.rdata$r:000002CC
.rdata$r:000002CC ; Segment type: Pure data
.rdata$r:000002CC ; Segment permissions: Read
.rdata$r:000002CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002CC                 assume cs:_rdata$r
.rdata$r:000002CC                 ;org 2CCh
.rdata$r:000002CC ; COMDAT (pick any)
.rdata$r:000002CC                 public ??_R1A@?0A@EA@CBcjCoder@@8
.rdata$r:000002CC ; CBcjCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000002CC ??_R1A@?0A@EA@CBcjCoder@@8 dd offset ??_R0?AVCBcjCoder@@@8
.rdata$r:000002CC                                         ; DATA XREF: .rdata$r:CBcjCoder::`RTTI Base Class Array'o
.rdata$r:000002CC                                         ; CBcjCoder `RTTI Type Descriptor'
.rdata$r:000002D0                 db    3
.rdata$r:000002D1                 db    0
.rdata$r:000002D2                 db    0
.rdata$r:000002D3                 db    0
.rdata$r:000002D4                 db    0
.rdata$r:000002D5                 db    0
.rdata$r:000002D6                 db    0
.rdata$r:000002D7                 db    0
.rdata$r:000002D8                 db 0FFh
.rdata$r:000002D9                 db 0FFh
.rdata$r:000002DA                 db 0FFh
.rdata$r:000002DB                 db 0FFh
.rdata$r:000002DC                 db    0
.rdata$r:000002DD                 db    0
.rdata$r:000002DE                 db    0
.rdata$r:000002DF                 db    0
.rdata$r:000002E0                 db  40h ; @
.rdata$r:000002E1                 db    0
.rdata$r:000002E2                 db    0
.rdata$r:000002E3                 db    0
.rdata$r:000002E4                 dd offset ??_R3CBcjCoder@@8 ; CBcjCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000002E4 _rdata$r        ends
.rdata$r:000002E4
.rdata$r:000002E8 ; ===========================================================================
.rdata$r:000002E8
.rdata$r:000002E8 ; Segment type: Pure data
.rdata$r:000002E8 ; Segment permissions: Read
.rdata$r:000002E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002E8                 assume cs:_rdata$r
.rdata$r:000002E8                 ;org 2E8h
.rdata$r:000002E8 ; COMDAT (pick any)
.rdata$r:000002E8                 public ??_R1A@?0A@EA@ICompressFilter@@8
.rdata$r:000002E8 ; ICompressFilter::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000002E8 ??_R1A@?0A@EA@ICompressFilter@@8 dd offset ??_R0?AUICompressFilter@@@8
.rdata$r:000002E8                                         ; DATA XREF: .rdata$r:000002BCo
.rdata$r:000002E8                                         ; .rdata$r:ICompressFilter::`RTTI Base Class Array'o
.rdata$r:000002E8                                         ; ICompressFilter `RTTI Type Descriptor'
.rdata$r:000002EC                 db    1
.rdata$r:000002ED                 db    0
.rdata$r:000002EE                 db    0
.rdata$r:000002EF                 db    0
.rdata$r:000002F0                 db    0
.rdata$r:000002F1                 db    0
.rdata$r:000002F2                 db    0
.rdata$r:000002F3                 db    0
.rdata$r:000002F4                 db 0FFh
.rdata$r:000002F5                 db 0FFh
.rdata$r:000002F6                 db 0FFh
.rdata$r:000002F7                 db 0FFh
.rdata$r:000002F8                 db    0
.rdata$r:000002F9                 db    0
.rdata$r:000002FA                 db    0
.rdata$r:000002FB                 db    0
.rdata$r:000002FC                 db  40h ; @
.rdata$r:000002FD                 db    0
.rdata$r:000002FE                 db    0
.rdata$r:000002FF                 db    0
.rdata$r:00000300                 dd offset ??_R3ICompressFilter@@8 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000300 _rdata$r        ends
.rdata$r:00000300
.data:00000304 ; ===========================================================================
.data:00000304
.data:00000304 ; Segment type: Pure data
.data:00000304 ; Segment permissions: Read/Write
.data:00000304 _data           segment dword public 'DATA' use32
.data:00000304                 assume cs:_data
.data:00000304                 ;org 304h
.data:00000304 ; COMDAT (pick any)
.data:00000304                 public ??_R0?AUICompressFilter@@@8
.data:00000304 ; struct ICompressFilter `RTTI Type Descriptor'
.data:00000304 ??_R0?AUICompressFilter@@@8 dd offset ??_7type_info@@6B@
.data:00000304                                         ; DATA XREF: .rdata$r:ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000304                                         ; .rdata$r:00000540o
.data:00000304                                         ; const type_info::`vftable'
.data:00000308                 db    0
.data:00000309                 db    0
.data:0000030A                 db    0
.data:0000030B                 db    0
.data:0000030C                 db  2Eh ; .
.data:0000030D                 db  3Fh ; ?
.data:0000030E                 db  41h ; A
.data:0000030F                 db  55h ; U
.data:00000310                 db  49h ; I
.data:00000311                 db  43h ; C
.data:00000312                 db  6Fh ; o
.data:00000313                 db  6Dh ; m
.data:00000314                 db  70h ; p
.data:00000315                 db  72h ; r
.data:00000316                 db  65h ; e
.data:00000317                 db  73h ; s
.data:00000318                 db  73h ; s
.data:00000319                 db  46h ; F
.data:0000031A                 db  69h ; i
.data:0000031B                 db  6Ch ; l
.data:0000031C                 db  74h ; t
.data:0000031D                 db  65h ; e
.data:0000031E                 db  72h ; r
.data:0000031F                 db  40h ; @
.data:00000320                 db  40h ; @
.data:00000321                 db    0
.data:00000322                 align 4
.data:00000322 _data           ends
.data:00000322
.rdata$r:00000324 ; ===========================================================================
.rdata$r:00000324
.rdata$r:00000324 ; Segment type: Pure data
.rdata$r:00000324 ; Segment permissions: Read
.rdata$r:00000324 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000324                 assume cs:_rdata$r
.rdata$r:00000324                 ;org 324h
.rdata$r:00000324 ; COMDAT (pick any)
.rdata$r:00000324                 public ??_R3ICompressFilter@@8
.rdata$r:00000324 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000324 ??_R3ICompressFilter@@8 db    0         ; DATA XREF: .rdata$r:00000300o
.rdata$r:00000324                                         ; .rdata$r:00000544o
.rdata$r:00000325                 db    0
.rdata$r:00000326                 db    0
.rdata$r:00000327                 db    0
.rdata$r:00000328                 db    0
.rdata$r:00000329                 db    0
.rdata$r:0000032A                 db    0
.rdata$r:0000032B                 db    0
.rdata$r:0000032C                 db    2
.rdata$r:0000032D                 db    0
.rdata$r:0000032E                 db    0
.rdata$r:0000032F                 db    0
.rdata$r:00000330                 dd offset ??_R2ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Array'
.rdata$r:00000330 _rdata$r        ends
.rdata$r:00000330
.rdata$r:00000334 ; ===========================================================================
.rdata$r:00000334
.rdata$r:00000334 ; Segment type: Pure data
.rdata$r:00000334 ; Segment permissions: Read
.rdata$r:00000334 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000334                 assume cs:_rdata$r
.rdata$r:00000334                 ;org 334h
.rdata$r:00000334 ; COMDAT (pick any)
.rdata$r:00000334                 public ??_R2ICompressFilter@@8
.rdata$r:00000334 ; ICompressFilter::`RTTI Base Class Array'
.rdata$r:00000334 ??_R2ICompressFilter@@8 dd offset ??_R1A@?0A@EA@ICompressFilter@@8
.rdata$r:00000334                                         ; DATA XREF: .rdata$r:00000330o
.rdata$r:00000334                                         ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000338                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000033C                 db    0
.rdata$r:0000033D                 align 10h
.rdata$r:0000033D _rdata$r        ends
.rdata$r:0000033D
.rdata$r:00000340 ; ===========================================================================
.rdata$r:00000340
.rdata$r:00000340 ; Segment type: Pure data
.rdata$r:00000340 ; Segment permissions: Read
.rdata$r:00000340 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000340                 assume cs:_rdata$r
.rdata$r:00000340                 ;org 340h
.rdata$r:00000340 ; COMDAT (pick any)
.rdata$r:00000340                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000340 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000340 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000340                                         ; DATA XREF: .rdata$r:000002C0o
.rdata$r:00000340                                         ; .rdata$r:00000338o ...
.rdata$r:00000340                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000344                 db    0
.rdata$r:00000345                 db    0
.rdata$r:00000346                 db    0
.rdata$r:00000347                 db    0
.rdata$r:00000348                 db    0
.rdata$r:00000349                 db    0
.rdata$r:0000034A                 db    0
.rdata$r:0000034B                 db    0
.rdata$r:0000034C                 db 0FFh
.rdata$r:0000034D                 db 0FFh
.rdata$r:0000034E                 db 0FFh
.rdata$r:0000034F                 db 0FFh
.rdata$r:00000350                 db    0
.rdata$r:00000351                 db    0
.rdata$r:00000352                 db    0
.rdata$r:00000353                 db    0
.rdata$r:00000354                 db  40h ; @
.rdata$r:00000355                 db    0
.rdata$r:00000356                 db    0
.rdata$r:00000357                 db    0
.rdata$r:00000358                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000358 _rdata$r        ends
.rdata$r:00000358
.data:0000035C ; ===========================================================================
.data:0000035C
.data:0000035C ; Segment type: Pure data
.data:0000035C ; Segment permissions: Read/Write
.data:0000035C _data           segment dword public 'DATA' use32
.data:0000035C                 assume cs:_data
.data:0000035C                 ;org 35Ch
.data:0000035C ; COMDAT (pick any)
.data:0000035C                 public ??_R0?AUIUnknown@@@8
.data:0000035C ; struct IUnknown `RTTI Type Descriptor'
.data:0000035C ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:0000035C                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000035C                                         ; const type_info::`vftable'
.data:00000360                 db    0
.data:00000361                 db    0
.data:00000362                 db    0
.data:00000363                 db    0
.data:00000364                 db  2Eh ; .
.data:00000365                 db  3Fh ; ?
.data:00000366                 db  41h ; A
.data:00000367                 db  55h ; U
.data:00000368                 db  49h ; I
.data:00000369                 db  55h ; U
.data:0000036A                 db  6Eh ; n
.data:0000036B                 db  6Bh ; k
.data:0000036C                 db  6Eh ; n
.data:0000036D                 db  6Fh ; o
.data:0000036E                 db  77h ; w
.data:0000036F                 db  6Eh ; n
.data:00000370                 db  40h ; @
.data:00000371                 db  40h ; @
.data:00000372                 db    0
.data:00000373                 align 4
.data:00000373 _data           ends
.data:00000373
.rdata$r:00000374 ; ===========================================================================
.rdata$r:00000374
.rdata$r:00000374 ; Segment type: Pure data
.rdata$r:00000374 ; Segment permissions: Read
.rdata$r:00000374 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000374                 assume cs:_rdata$r
.rdata$r:00000374                 ;org 374h
.rdata$r:00000374 ; COMDAT (pick any)
.rdata$r:00000374                 public ??_R3IUnknown@@8
.rdata$r:00000374 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000374 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00000358o
.rdata$r:00000375                 db    0
.rdata$r:00000376                 db    0
.rdata$r:00000377                 db    0
.rdata$r:00000378                 db    0
.rdata$r:00000379                 db    0
.rdata$r:0000037A                 db    0
.rdata$r:0000037B                 db    0
.rdata$r:0000037C                 db    1
.rdata$r:0000037D                 db    0
.rdata$r:0000037E                 db    0
.rdata$r:0000037F                 db    0
.rdata$r:00000380                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000380 _rdata$r        ends
.rdata$r:00000380
.rdata$r:00000384 ; ===========================================================================
.rdata$r:00000384
.rdata$r:00000384 ; Segment type: Pure data
.rdata$r:00000384 ; Segment permissions: Read
.rdata$r:00000384 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000384                 assume cs:_rdata$r
.rdata$r:00000384                 ;org 384h
.rdata$r:00000384 ; COMDAT (pick any)
.rdata$r:00000384                 public ??_R2IUnknown@@8
.rdata$r:00000384 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000384 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000384                                         ; DATA XREF: .rdata$r:00000380o
.rdata$r:00000384                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000388                 db    0
.rdata$r:00000389                 align 4
.rdata$r:00000389 _rdata$r        ends
.rdata$r:00000389
.rdata$r:0000038C ; ===========================================================================
.rdata$r:0000038C
.rdata$r:0000038C ; Segment type: Pure data
.rdata$r:0000038C ; Segment permissions: Read
.rdata$r:0000038C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000038C                 assume cs:_rdata$r
.rdata$r:0000038C                 ;org 38Ch
.rdata$r:0000038C ; COMDAT (pick any)
.rdata$r:0000038C                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:0000038C ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:0000038C ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:0000038C                                         ; DATA XREF: .rdata$r:000002C4o
.rdata$r:0000038C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000390                 db    0
.rdata$r:00000391                 db    0
.rdata$r:00000392                 db    0
.rdata$r:00000393                 db    0
.rdata$r:00000394                 db    4
.rdata$r:00000395                 db    0
.rdata$r:00000396                 db    0
.rdata$r:00000397                 db    0
.rdata$r:00000398                 db 0FFh
.rdata$r:00000399                 db 0FFh
.rdata$r:0000039A                 db 0FFh
.rdata$r:0000039B                 db 0FFh
.rdata$r:0000039C                 db    0
.rdata$r:0000039D                 db    0
.rdata$r:0000039E                 db    0
.rdata$r:0000039F                 db    0
.rdata$r:000003A0                 db  40h ; @
.rdata$r:000003A1                 db    0
.rdata$r:000003A2                 db    0
.rdata$r:000003A3                 db    0
.rdata$r:000003A4                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003A4 _rdata$r        ends
.rdata$r:000003A4
.data:000003A8 ; ===========================================================================
.data:000003A8
.data:000003A8 ; Segment type: Pure data
.data:000003A8 ; Segment permissions: Read/Write
.data:000003A8 _data           segment dword public 'DATA' use32
.data:000003A8                 assume cs:_data
.data:000003A8                 ;org 3A8h
.data:000003A8 ; COMDAT (pick any)
.data:000003A8                 public ??_R0?AVCMyUnknownImp@@@8
.data:000003A8 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:000003A8 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:000003A8                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000003A8                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000003A8                                         ; const type_info::`vftable'
.data:000003AC                 align 10h
.data:000003B0 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:000003B0 _data           ends
.data:000003B0
.rdata$r:000003C4 ; ===========================================================================
.rdata$r:000003C4
.rdata$r:000003C4 ; Segment type: Pure data
.rdata$r:000003C4 ; Segment permissions: Read
.rdata$r:000003C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003C4                 assume cs:_rdata$r
.rdata$r:000003C4                 ;org 3C4h
.rdata$r:000003C4 ; COMDAT (pick any)
.rdata$r:000003C4                 public ??_R3CMyUnknownImp@@8
.rdata$r:000003C4 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003C4 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:000003A4o
.rdata$r:000003C4                                         ; .rdata$r:000003F4o
.rdata$r:000003C5                 db    0
.rdata$r:000003C6                 db    0
.rdata$r:000003C7                 db    0
.rdata$r:000003C8                 db    0
.rdata$r:000003C9                 db    0
.rdata$r:000003CA                 db    0
.rdata$r:000003CB                 db    0
.rdata$r:000003CC                 db    1
.rdata$r:000003CD                 db    0
.rdata$r:000003CE                 db    0
.rdata$r:000003CF                 db    0
.rdata$r:000003D0                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000003D0 _rdata$r        ends
.rdata$r:000003D0
.rdata$r:000003D4 ; ===========================================================================
.rdata$r:000003D4
.rdata$r:000003D4 ; Segment type: Pure data
.rdata$r:000003D4 ; Segment permissions: Read
.rdata$r:000003D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003D4                 assume cs:_rdata$r
.rdata$r:000003D4                 ;org 3D4h
.rdata$r:000003D4 ; COMDAT (pick any)
.rdata$r:000003D4                 public ??_R2CMyUnknownImp@@8
.rdata$r:000003D4 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000003D4 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000003D4                                         ; DATA XREF: .rdata$r:000003D0o
.rdata$r:000003D4                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000003D8                 db    0
.rdata$r:000003D9                 align 4
.rdata$r:000003D9 _rdata$r        ends
.rdata$r:000003D9
.rdata$r:000003DC ; ===========================================================================
.rdata$r:000003DC
.rdata$r:000003DC ; Segment type: Pure data
.rdata$r:000003DC ; Segment permissions: Read
.rdata$r:000003DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003DC                 assume cs:_rdata$r
.rdata$r:000003DC                 ;org 3DCh
.rdata$r:000003DC ; COMDAT (pick any)
.rdata$r:000003DC                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000003DC ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000003DC ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000003DC                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:000003DC                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000003E0                 db    0
.rdata$r:000003E1                 db    0
.rdata$r:000003E2                 db    0
.rdata$r:000003E3                 db    0
.rdata$r:000003E4                 db    0
.rdata$r:000003E5                 db    0
.rdata$r:000003E6                 db    0
.rdata$r:000003E7                 db    0
.rdata$r:000003E8                 db 0FFh
.rdata$r:000003E9                 db 0FFh
.rdata$r:000003EA                 db 0FFh
.rdata$r:000003EB                 db 0FFh
.rdata$r:000003EC                 db    0
.rdata$r:000003ED                 db    0
.rdata$r:000003EE                 db    0
.rdata$r:000003EF                 db    0
.rdata$r:000003F0                 db  40h ; @
.rdata$r:000003F1                 db    0
.rdata$r:000003F2                 db    0
.rdata$r:000003F3                 db    0
.rdata$r:000003F4                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003F4 _rdata$r        ends
.rdata$r:000003F4
.text:000003F8 ; ===========================================================================
.text:000003F8
.text:000003F8 ; Segment type: Pure code
.text:000003F8 ; Segment permissions: Read/Execute
.text:000003F8 _text           segment para public 'CODE' use32
.text:000003F8                 assume cs:_text
.text:000003F8                 ;org 3F8h
.text:000003F8 ; COMDAT (pick any)
.text:000003F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000003F8
.text:000003F8 ; =============== S U B R O U T I N E =======================================
.text:000003F8
.text:000003F8 ; Attributes: bp-based frame
.text:000003F8
.text:000003F8 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:000003F8                 public ??0CMyUnknownImp@@QAE@XZ
.text:000003F8 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: CBcjCoder::CBcjCoder(int)+1Cp
.text:000003F8
.text:000003F8 var_4           = dword ptr -4
.text:000003F8
.text:000003F8                 push    ebp
.text:000003F9                 mov     ebp, esp
.text:000003FB                 push    ecx
.text:000003FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000403                 mov     [ebp+var_4], ecx
.text:00000406                 mov     eax, [ebp+var_4]
.text:00000409                 mov     dword ptr [eax], 0
.text:0000040F                 mov     eax, [ebp+var_4]
.text:00000412                 mov     esp, ebp
.text:00000414                 pop     ebp
.text:00000415                 retn
.text:00000415 ??0CMyUnknownImp@@QAE@XZ endp
.text:00000415
.text:00000415 ; ---------------------------------------------------------------------------
.text:00000416                 align 4
.text:00000416 _text           ends
.text:00000416
.text:00000418 ; ===========================================================================
.text:00000418
.text:00000418 ; Segment type: Pure code
.text:00000418 ; Segment permissions: Read/Execute
.text:00000418 _text           segment para public 'CODE' use32
.text:00000418                 assume cs:_text
.text:00000418                 ;org 418h
.text:00000418 ; COMDAT (pick any)
.text:00000418                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000418
.text:00000418 ; =============== S U B R O U T I N E =======================================
.text:00000418
.text:00000418 ; Attributes: bp-based frame
.text:00000418
.text:00000418 ; __int32 __stdcall CBcjCoder::QueryInterface(CBcjCoder *this, const struct _GUID *Buf1, void **)
.text:00000418                 public ?QueryInterface@CBcjCoder@@UAGJABU_GUID@@PAPAX@Z
.text:00000418 ?QueryInterface@CBcjCoder@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000418                                         ; DATA XREF: .rdata:const CBcjCoder::`vftable'o
.text:00000418
.text:00000418 this            = dword ptr  8
.text:00000418 Buf1            = dword ptr  0Ch
.text:00000418 arg_8           = dword ptr  10h
.text:00000418
.text:00000418                 push    ebp
.text:00000419                 mov     ebp, esp
.text:0000041B                 mov     eax, [ebp+arg_8]
.text:0000041E                 mov     dword ptr [eax], 0
.text:00000424                 push    offset _IID_IUnknown ; Buf2
.text:00000429                 mov     ecx, [ebp+Buf1]
.text:0000042C                 push    ecx             ; Buf1
.text:0000042D                 call    ___@8           ; __(x,x)
.text:00000432                 test    eax, eax
.text:00000434                 jz      short loc_440
.text:00000436                 mov     edx, [ebp+arg_8]
.text:00000439                 mov     eax, [ebp+this]
.text:0000043C                 mov     [edx], eax
.text:0000043E                 jmp     short loc_447
.text:00000440 ; ---------------------------------------------------------------------------
.text:00000440
.text:00000440 loc_440:                                ; CODE XREF: CBcjCoder::QueryInterface(_GUID const &,void * *)+1Cj
.text:00000440                 mov     eax, 80004002h
.text:00000445                 jmp     short loc_458
.text:00000447 ; ---------------------------------------------------------------------------
.text:00000447
.text:00000447 loc_447:                                ; CODE XREF: CBcjCoder::QueryInterface(_GUID const &,void * *)+26j
.text:00000447                 mov     ecx, [ebp+this]
.text:0000044A                 mov     edx, [ecx+4]
.text:0000044D                 add     edx, 1
.text:00000450                 mov     eax, [ebp+this]
.text:00000453                 mov     [eax+4], edx
.text:00000456                 xor     eax, eax
.text:00000458
.text:00000458 loc_458:                                ; CODE XREF: CBcjCoder::QueryInterface(_GUID const &,void * *)+2Dj
.text:00000458                 cmp     ebp, esp
.text:0000045A                 call    __RTC_CheckEsp
.text:0000045F                 pop     ebp
.text:00000460                 retn    0Ch
.text:00000460 ?QueryInterface@CBcjCoder@@UAGJABU_GUID@@PAPAX@Z endp
.text:00000460
.text:00000460 ; ---------------------------------------------------------------------------
.text:00000463                 align 4
.text:00000463 _text           ends
.text:00000463
.text:00000464 ; ===========================================================================
.text:00000464
.text:00000464 ; Segment type: Pure code
.text:00000464 ; Segment permissions: Read/Execute
.text:00000464 _text           segment para public 'CODE' use32
.text:00000464                 assume cs:_text
.text:00000464                 ;org 464h
.text:00000464 ; COMDAT (pick any)
.text:00000464                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000464
.text:00000464 ; =============== S U B R O U T I N E =======================================
.text:00000464
.text:00000464 ; Attributes: bp-based frame
.text:00000464
.text:00000464 ; unsigned __int32 __stdcall CBcjCoder::AddRef(CBcjCoder *this)
.text:00000464                 public ?AddRef@CBcjCoder@@UAGKXZ
.text:00000464 ?AddRef@CBcjCoder@@UAGKXZ proc near     ; DATA XREF: .rdata:0000026Co
.text:00000464
.text:00000464 var_4           = dword ptr -4
.text:00000464 this            = dword ptr  8
.text:00000464
.text:00000464                 push    ebp
.text:00000465                 mov     ebp, esp
.text:00000467                 push    ecx
.text:00000468                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000046F                 mov     eax, [ebp+this]
.text:00000472                 mov     ecx, [eax+4]
.text:00000475                 add     ecx, 1
.text:00000478                 mov     [ebp+var_4], ecx
.text:0000047B                 mov     edx, [ebp+this]
.text:0000047E                 mov     eax, [ebp+var_4]
.text:00000481                 mov     [edx+4], eax
.text:00000484                 mov     eax, [ebp+var_4]
.text:00000487                 mov     esp, ebp
.text:00000489                 pop     ebp
.text:0000048A                 retn    4
.text:0000048A ?AddRef@CBcjCoder@@UAGKXZ endp
.text:0000048A
.text:0000048A ; ---------------------------------------------------------------------------
.text:0000048D                 align 10h
.text:0000048D _text           ends
.text:0000048D
.text:00000490 ; ===========================================================================
.text:00000490
.text:00000490 ; Segment type: Pure code
.text:00000490 ; Segment permissions: Read/Execute
.text:00000490 _text           segment para public 'CODE' use32
.text:00000490                 assume cs:_text
.text:00000490                 ;org 490h
.text:00000490 ; COMDAT (pick any)
.text:00000490                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000490
.text:00000490 ; =============== S U B R O U T I N E =======================================
.text:00000490
.text:00000490 ; Attributes: bp-based frame
.text:00000490
.text:00000490 ; unsigned __int32 __stdcall CBcjCoder::Release(CBcjCoder *this)
.text:00000490                 public ?Release@CBcjCoder@@UAGKXZ
.text:00000490 ?Release@CBcjCoder@@UAGKXZ proc near    ; DATA XREF: .rdata:00000270o
.text:00000490
.text:00000490 var_8           = dword ptr -8
.text:00000490 var_4           = dword ptr -4
.text:00000490 this            = dword ptr  8
.text:00000490
.text:00000490                 push    ebp
.text:00000491                 mov     ebp, esp
.text:00000493                 sub     esp, 8
.text:00000496                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000049D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004A4                 mov     eax, [ebp+this]
.text:000004A7                 mov     ecx, [eax+4]
.text:000004AA                 sub     ecx, 1
.text:000004AD                 mov     [ebp+var_8], ecx
.text:000004B0                 mov     edx, [ebp+this]
.text:000004B3                 mov     eax, [ebp+var_8]
.text:000004B6                 mov     [edx+4], eax
.text:000004B9                 cmp     [ebp+var_8], 0
.text:000004BD                 jz      short loc_4C7
.text:000004BF                 mov     ecx, [ebp+this]
.text:000004C2                 mov     eax, [ecx+4]
.text:000004C5                 jmp     short loc_4DB
.text:000004C7 ; ---------------------------------------------------------------------------
.text:000004C7
.text:000004C7 loc_4C7:                                ; CODE XREF: CBcjCoder::Release(void)+2Dj
.text:000004C7                 mov     edx, [ebp+this]
.text:000004CA                 mov     [ebp+var_4], edx
.text:000004CD                 mov     eax, [ebp+var_4]
.text:000004D0                 push    eax             ; void *
.text:000004D1                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000004D6                 add     esp, 4
.text:000004D9                 xor     eax, eax
.text:000004DB
.text:000004DB loc_4DB:                                ; CODE XREF: CBcjCoder::Release(void)+35j
.text:000004DB                 add     esp, 8
.text:000004DE                 cmp     ebp, esp
.text:000004E0                 call    __RTC_CheckEsp
.text:000004E5                 mov     esp, ebp
.text:000004E7                 pop     ebp
.text:000004E8                 retn    4
.text:000004E8 ?Release@CBcjCoder@@UAGKXZ endp
.text:000004E8
.text:000004E8 ; ---------------------------------------------------------------------------
.text:000004EB                 align 4
.text:000004EB _text           ends
.text:000004EB
.text:000004EC ; ===========================================================================
.text:000004EC
.text:000004EC ; Segment type: Pure code
.text:000004EC ; Segment permissions: Read/Execute
.text:000004EC _text           segment para public 'CODE' use32
.text:000004EC                 assume cs:_text
.text:000004EC                 ;org 4ECh
.text:000004EC ; COMDAT (pick any)
.text:000004EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000004EC
.text:000004EC ; =============== S U B R O U T I N E =======================================
.text:000004EC
.text:000004EC ; Attributes: bp-based frame
.text:000004EC
.text:000004EC ; _DWORD __thiscall ICompressFilter::ICompressFilter(ICompressFilter *__hidden this)
.text:000004EC                 public ??0ICompressFilter@@QAE@XZ
.text:000004EC ??0ICompressFilter@@QAE@XZ proc near    ; CODE XREF: CBcjCoder::CBcjCoder(int)+11p
.text:000004EC
.text:000004EC var_4           = dword ptr -4
.text:000004EC
.text:000004EC                 push    ebp
.text:000004ED                 mov     ebp, esp
.text:000004EF                 push    ecx
.text:000004F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004F7                 mov     [ebp+var_4], ecx
.text:000004FA                 mov     ecx, [ebp+var_4]
.text:000004FD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000502                 mov     eax, [ebp+var_4]
.text:00000505                 mov     dword ptr [eax], offset ??_7ICompressFilter@@6B@ ; const ICompressFilter::`vftable'
.text:0000050B                 mov     eax, [ebp+var_4]
.text:0000050E                 add     esp, 4
.text:00000511                 cmp     ebp, esp
.text:00000513                 call    __RTC_CheckEsp
.text:00000518                 mov     esp, ebp
.text:0000051A                 pop     ebp
.text:0000051B                 retn
.text:0000051B ??0ICompressFilter@@QAE@XZ endp
.text:0000051B
.text:0000051B _text           ends
.text:0000051B
.rdata:0000051C ; ===========================================================================
.rdata:0000051C
.rdata:0000051C ; Segment type: Pure data
.rdata:0000051C ; Segment permissions: Read
.rdata:0000051C _rdata          segment dword public 'DATA' use32
.rdata:0000051C                 assume cs:_rdata
.rdata:0000051C                 ;org 51Ch
.rdata:0000051C ; COMDAT (pick largest)
.rdata:0000051C                 dd offset ??_R4ICompressFilter@@6B@ ; const ICompressFilter::`RTTI Complete Object Locator'
.rdata:00000520                 public ??_7ICompressFilter@@6B@
.rdata:00000520 ; const ICompressFilter::`vftable'
.rdata:00000520 ??_7ICompressFilter@@6B@ dd offset __purecall
.rdata:00000520                                         ; DATA XREF: ICompressFilter::ICompressFilter(void)+19o
.rdata:00000524                 dd offset __purecall
.rdata:00000528                 dd offset __purecall
.rdata:0000052C                 dd offset __purecall
.rdata:00000530                 dd offset __purecall
.rdata:00000530 _rdata          ends
.rdata:00000530
.rdata$r:00000534 ; ===========================================================================
.rdata$r:00000534
.rdata$r:00000534 ; Segment type: Pure data
.rdata$r:00000534 ; Segment permissions: Read
.rdata$r:00000534 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000534                 assume cs:_rdata$r
.rdata$r:00000534                 ;org 534h
.rdata$r:00000534 ; COMDAT (pick any)
.rdata$r:00000534                 public ??_R4ICompressFilter@@6B@
.rdata$r:00000534 ; const ICompressFilter::`RTTI Complete Object Locator'
.rdata$r:00000534 ??_R4ICompressFilter@@6B@ db    0       ; DATA XREF: .rdata:0000051Co
.rdata$r:00000535                 db    0
.rdata$r:00000536                 db    0
.rdata$r:00000537                 db    0
.rdata$r:00000538                 db    0
.rdata$r:00000539                 db    0
.rdata$r:0000053A                 db    0
.rdata$r:0000053B                 db    0
.rdata$r:0000053C                 db    0
.rdata$r:0000053D                 db    0
.rdata$r:0000053E                 db    0
.rdata$r:0000053F                 db    0
.rdata$r:00000540                 dd offset ??_R0?AUICompressFilter@@@8 ; ICompressFilter `RTTI Type Descriptor'
.rdata$r:00000544                 dd offset ??_R3ICompressFilter@@8 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000544 _rdata$r        ends
.rdata$r:00000544
.text:00000548 ; ===========================================================================
.text:00000548
.text:00000548 ; Segment type: Pure code
.text:00000548 ; Segment permissions: Read/Execute
.text:00000548 _text           segment para public 'CODE' use32
.text:00000548                 assume cs:_text
.text:00000548                 ;org 548h
.text:00000548 ; COMDAT (pick any)
.text:00000548                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000548
.text:00000548 ; =============== S U B R O U T I N E =======================================
.text:00000548
.text:00000548 ; Attributes: bp-based frame
.text:00000548
.text:00000548 ; public: __thiscall IUnknown::IUnknown(void)
.text:00000548                 public ??0IUnknown@@QAE@XZ
.text:00000548 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressFilter::ICompressFilter(void)+11p
.text:00000548
.text:00000548 var_4           = dword ptr -4
.text:00000548
.text:00000548                 push    ebp
.text:00000549                 mov     ebp, esp
.text:0000054B                 push    ecx
.text:0000054C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000553                 mov     [ebp+var_4], ecx
.text:00000556                 mov     eax, [ebp+var_4]
.text:00000559                 mov     esp, ebp
.text:0000055B                 pop     ebp
.text:0000055C                 retn
.text:0000055C ??0IUnknown@@QAE@XZ endp
.text:0000055C
.text:0000055C ; ---------------------------------------------------------------------------
.text:0000055D                 align 10h
.text:0000055D _text           ends
.text:0000055D
.text:00000560 ; ===========================================================================
.text:00000560
.text:00000560 ; Segment type: Pure code
.text:00000560 ; Segment permissions: Read/Execute
.text:00000560 _text           segment para public 'CODE' use32
.text:00000560                 assume cs:_text
.text:00000560                 ;org 560h
.text:00000560 ; COMDAT (pick any)
.text:00000560                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000560
.text:00000560 ; =============== S U B R O U T I N E =======================================
.text:00000560
.text:00000560 ; Attributes: bp-based frame
.text:00000560
.text:00000560 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00000560                 public ___@8
.text:00000560 ___@8           proc near               ; CODE XREF: CBcjCoder::QueryInterface(_GUID const &,void * *)+15p
.text:00000560
.text:00000560 Buf1            = dword ptr  8
.text:00000560 Buf2            = dword ptr  0Ch
.text:00000560
.text:00000560                 push    ebp
.text:00000561                 mov     ebp, esp
.text:00000563                 mov     eax, [ebp+Buf2]
.text:00000566                 push    eax             ; Buf2
.text:00000567                 mov     ecx, [ebp+Buf1]
.text:0000056A                 push    ecx             ; Buf1
.text:0000056B                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00000570                 cmp     ebp, esp
.text:00000572                 call    __RTC_CheckEsp
.text:00000577                 pop     ebp
.text:00000578                 retn    8
.text:00000578 ___@8           endp
.text:00000578
.text:00000578 ; ---------------------------------------------------------------------------
.text:0000057B                 align 4
.text:0000057B _text           ends
.text:0000057B
.text:0000057C ; ===========================================================================
.text:0000057C
.text:0000057C ; Segment type: Pure code
.text:0000057C ; Segment permissions: Read/Execute
.text:0000057C _text           segment para public 'CODE' use32
.text:0000057C                 assume cs:_text
.text:0000057C                 ;org 57Ch
.text:0000057C ; COMDAT (pick any)
.text:0000057C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000057C
.text:0000057C ; =============== S U B R O U T I N E =======================================
.text:0000057C
.text:0000057C ; Attributes: bp-based frame
.text:0000057C
.text:0000057C ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:0000057C                 public _IsEqualGUID@8
.text:0000057C _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:0000057C
.text:0000057C Buf1            = dword ptr  8
.text:0000057C Buf2            = dword ptr  0Ch
.text:0000057C
.text:0000057C                 push    ebp
.text:0000057D                 mov     ebp, esp
.text:0000057F                 push    10h             ; Size
.text:00000581                 mov     eax, [ebp+Buf2]
.text:00000584                 push    eax             ; Buf2
.text:00000585                 mov     ecx, [ebp+Buf1]
.text:00000588                 push    ecx             ; Buf1
.text:00000589                 call    _memcmp
.text:0000058E                 add     esp, 0Ch
.text:00000591                 neg     eax
.text:00000593                 sbb     eax, eax
.text:00000595                 add     eax, 1
.text:00000598                 cmp     ebp, esp
.text:0000059A                 call    __RTC_CheckEsp
.text:0000059F                 pop     ebp
.text:000005A0                 retn    8
.text:000005A0 _IsEqualGUID@8  endp
.text:000005A0
.text:000005A0 ; ---------------------------------------------------------------------------
.text:000005A3                 align 4
.text:000005A3 _text           ends
.text:000005A3
.text$yc:000005A4 ; ===========================================================================
.text$yc:000005A4
.text$yc:000005A4 ; Segment type: Pure code
.text$yc:000005A4 ; Segment permissions: Read/Execute
.text$yc:000005A4 _text$yc        segment para public 'CODE' use32
.text$yc:000005A4                 assume cs:_text$yc
.text$yc:000005A4                 ;org 5A4h
.text$yc:000005A4 ; COMDAT (pick any)
.text$yc:000005A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:000005A4
.text$yc:000005A4 ; =============== S U B R O U T I N E =======================================
.text$yc:000005A4
.text$yc:000005A4 ; Attributes: bp-based frame
.text$yc:000005A4
.text$yc:000005A4 ; void __cdecl `dynamic initializer for 'g_RegisterCodec''(void)
.text$yc:000005A4 ??__Eg_RegisterCodec@@YAXXZ proc near   ; DATA XREF: .CRT$XCU:_g_RegisterCodec$initializer$o
.text$yc:000005A4                 push    ebp
.text$yc:000005A5                 mov     ebp, esp
.text$yc:000005A7                 mov     ecx, offset _g_RegisterCodec ; this
.text$yc:000005AC                 call    ??0CRegisterCodecBCJ@@QAE@XZ ; CRegisterCodecBCJ::CRegisterCodecBCJ(void)
.text$yc:000005B1                 cmp     ebp, esp
.text$yc:000005B3                 call    __RTC_CheckEsp
.text$yc:000005B8                 pop     ebp
.text$yc:000005B9                 retn
.text$yc:000005B9 ??__Eg_RegisterCodec@@YAXXZ endp
.text$yc:000005B9
.text$yc:000005B9 ; ---------------------------------------------------------------------------
.text$yc:000005BA                 align 4
.text$yc:000005BA _text$yc        ends
.text$yc:000005BA
.text:000005BC ; ===========================================================================
.text:000005BC
.text:000005BC ; Segment type: Pure code
.text:000005BC ; Segment permissions: Read/Execute
.text:000005BC _text           segment para public 'CODE' use32
.text:000005BC                 assume cs:_text
.text:000005BC                 ;org 5BCh
.text:000005BC ; COMDAT (pick any)
.text:000005BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000005BC
.text:000005BC ; =============== S U B R O U T I N E =======================================
.text:000005BC
.text:000005BC ; Attributes: bp-based frame
.text:000005BC
.text:000005BC ; _DWORD __thiscall CRegisterCodecBCJ::CRegisterCodecBCJ(CRegisterCodecBCJ *__hidden this)
.text:000005BC                 public ??0CRegisterCodecBCJ@@QAE@XZ
.text:000005BC ??0CRegisterCodecBCJ@@QAE@XZ proc near  ; CODE XREF: `dynamic initializer for 'g_RegisterCodec''(void)+8p
.text:000005BC
.text:000005BC var_4           = dword ptr -4
.text:000005BC
.text:000005BC                 push    ebp
.text:000005BD                 mov     ebp, esp
.text:000005BF                 push    ecx
.text:000005C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005C7                 mov     [ebp+var_4], ecx
.text:000005CA                 push    offset _g_CodecInfo ; struct CCodecInfo *
.text:000005CF                 call    ?RegisterCodec@@YGXPBUCCodecInfo@@@Z ; RegisterCodec(CCodecInfo const *)
.text:000005D4                 mov     eax, [ebp+var_4]
.text:000005D7                 add     esp, 4
.text:000005DA                 cmp     ebp, esp
.text:000005DC                 call    __RTC_CheckEsp
.text:000005E1                 mov     esp, ebp
.text:000005E3                 pop     ebp
.text:000005E4                 retn
.text:000005E4 ??0CRegisterCodecBCJ@@QAE@XZ endp
.text:000005E4
.text:000005E4 ; ---------------------------------------------------------------------------
.text:000005E5                 align 4
.text:000005E5 _text           ends
.text:000005E5
.bss:000005E8 ; ===========================================================================
.bss:000005E8
.bss:000005E8 ; Segment type: Uninitialized
.bss:000005E8 ; Segment permissions: Read/Write
.bss:000005E8 _bss            segment byte public 'BSS' use32
.bss:000005E8                 assume cs:_bss
.bss:000005E8                 ;org 5E8h
.bss:000005E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000005E8 ; CRegisterCodecBCJ g_RegisterCodec
.bss:000005E8 _g_RegisterCodec db    ? ;              ; DATA XREF: `dynamic initializer for 'g_RegisterCodec''(void)+3o
.bss:000005E9                 align 4
.bss:000005E9 _bss            ends
.bss:000005E9
.CRT$XCU:000005EC ; ===========================================================================
.CRT$XCU:000005EC
.CRT$XCU:000005EC ; Segment type: Pure data
.CRT$XCU:000005EC ; Segment permissions: Read
.CRT$XCU:000005EC _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000005EC                 assume cs:_CRT$XCU
.CRT$XCU:000005EC                 ;org 5ECh
.CRT$XCU:000005EC _g_RegisterCodec$initializer$ dd offset ??__Eg_RegisterCodec@@YAXXZ ; `dynamic initializer for 'g_RegisterCodec''(void)
.CRT$XCU:000005EC _CRT$XCU        ends
.CRT$XCU:000005EC
UNDEF:000005F0 ; ===========================================================================
UNDEF:000005F0
UNDEF:000005F0 ; Segment type: Externs
UNDEF:000005F0 ; UNDEF
UNDEF:000005F0 ; void __cdecl operator delete(void *)
UNDEF:000005F0                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?CreateDec@@YGPAXXZ$0+4p
UNDEF:000005F0                                         ; __unwindfunclet$?CreateEnc@@YGPAXXZ$0+4p ...
UNDEF:000005F4 ; void *__cdecl operator new(unsigned int)
UNDEF:000005F4                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CreateDec(void)+3Cp
UNDEF:000005F4                                         ; CreateEnc(void)+3Cp
UNDEF:000005F8                 extrn ___security_cookie:near
UNDEF:000005F8                                         ; DATA XREF: CreateDec(void)+29r
UNDEF:000005F8                                         ; CreateEnc(void)+29r
UNDEF:000005FC                 extrn ___CxxFrameHandler3:near
UNDEF:000005FC                                         ; CODE XREF: __ehhandler$?CreateDec@@YGPAXXZ+16j
UNDEF:000005FC                                         ; __ehhandler$?CreateEnc@@YGPAXXZ+16j
UNDEF:00000600 ; __fastcall __security_check_cookie(x)
UNDEF:00000600                 extrn @__security_check_cookie@4:near
UNDEF:00000600                                         ; CODE XREF: __ehhandler$?CreateDec@@YGPAXXZ+Cp
UNDEF:00000600                                         ; __ehhandler$?CreateEnc@@YGPAXXZ+Cp
UNDEF:00000604                 extrn __RTC_CheckEsp:near ; CODE XREF: CreateDec(void)+8Ap
UNDEF:00000604                                         ; CreateEnc(void)+8Ap ...
UNDEF:00000608                 extrn __RTC_Shutdown:near
UNDEF:00000608                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000060C                 extrn __RTC_InitBase:near
UNDEF:0000060C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000610 ; const type_info::`vftable'
UNDEF:00000610                 extrn ??_7type_info@@6B@:near
UNDEF:00000610                                         ; DATA XREF: .data:CBcjCoder `RTTI Type Descriptor'o
UNDEF:00000610                                         ; .data:ICompressFilter `RTTI Type Descriptor'o ...
UNDEF:00000614 ; public: virtual long __stdcall CBcjCoder::Init(void)
UNDEF:00000614                 extrn ?Init@CBcjCoder@@UAGJXZ:near
UNDEF:00000614                                         ; DATA XREF: .rdata:00000274o
UNDEF:00000618 ; public: virtual unsigned int __stdcall CBcjCoder::Filter(unsigned char *, unsigned int)
UNDEF:00000618                 extrn ?Filter@CBcjCoder@@UAGIPAEI@Z:near
UNDEF:00000618                                         ; DATA XREF: .rdata:00000278o
UNDEF:0000061C ; const IID IID_IUnknown
UNDEF:0000061C                 extrn _IID_IUnknown:near
UNDEF:0000061C                                         ; DATA XREF: CBcjCoder::QueryInterface(_GUID const &,void * *)+Co
UNDEF:00000620                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressFilter::`vftable'o
UNDEF:00000620                                         ; .rdata:00000524o ...
UNDEF:00000624 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00000624                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00000628 ; void __stdcall RegisterCodec(const struct CCodecInfo *)
UNDEF:00000628                 extrn ?RegisterCodec@@YGXPBUCCodecInfo@@@Z:near
UNDEF:00000628                                         ; CODE XREF: CRegisterCodecBCJ::CRegisterCodecBCJ(void)+13p
UNDEF:00000628
UNDEF:00000628
UNDEF:00000628                 end