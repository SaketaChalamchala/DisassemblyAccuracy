.bss:00000000 ;
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.bss:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.bss:00000000 ; |                      License info: 48-3677-7074-51                      |
.bss:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ;
.bss:00000000 ; Input MD5   : D045D6C5C2116AC6CCB549481C38D18D
.bss:00000000 ; Input CRC32 : C7FBF2F6
.bss:00000000
.bss:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\BZip2Crc.obj
.bss:00000000 ; Format      : COFF (X386MAGIC)
.bss:00000000 ; includelib "uuid.lib"
.bss:00000000 ; includelib "MSVCRTD"
.bss:00000000 ; includelib "OLDNAMES"
.bss:00000000
.bss:00000000                 .686p
.bss:00000000                 .mmx
.bss:00000000                 .model flat
.bss:00000000
.bss:00000000 ; ===========================================================================
.bss:00000000
.bss:00000000 ; Segment type: Uninitialized
.bss:00000000 ; Segment permissions: Read/Write
.bss:00000000 ; Segment alignment 'qword' can not be represented in assembly
.bss:00000000 _bss            segment para public 'BSS' use32
.bss:00000000                 assume cs:_bss
.bss:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.bss:00000000                 public ?Table@CBZip2Crc@@0PAIA
.bss:00000000 ; private: static unsigned int * CBZip2Crc::Table
.bss:00000000 ?Table@CBZip2Crc@@0PAIA dd ?            ; DATA XREF: CBZip2Crc::InitTable(void)+83w
.bss:00000004                 align 400h
.bss:00000400                 public ?g_BZip2CrcTableInit@@3VCBZip2CrcTableInit@@A
.bss:00000400 ; CBZip2CrcTableInit g_BZip2CrcTableInit
.bss:00000400 ?g_BZip2CrcTableInit@@3VCBZip2CrcTableInit@@A db    ? ;
.bss:00000400                                         ; DATA XREF: `dynamic initializer for 'g_BZip2CrcTableInit''(void)+3o
.bss:00000401                 align 4
.bss:00000401 _bss            ends
.bss:00000401
.text:00000404 ; ===========================================================================
.text:00000404
.text:00000404 ; Segment type: Pure code
.text:00000404 ; Segment permissions: Read/Execute
.text:00000404 _text           segment para public 'CODE' use32
.text:00000404                 assume cs:_text
.text:00000404                 ;org 404h
.text:00000404                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000404
.text:00000404 ; =============== S U B R O U T I N E =======================================
.text:00000404
.text:00000404 ; Attributes: bp-based frame
.text:00000404
.text:00000404 ; void __stdcall CBZip2Crc::InitTable()
.text:00000404                 public ?InitTable@CBZip2Crc@@SGXXZ
.text:00000404 ?InitTable@CBZip2Crc@@SGXXZ proc near   ; CODE XREF: CBZip2CrcTableInit::CBZip2CrcTableInit(void)+Ep
.text:00000404
.text:00000404 var_10          = dword ptr -10h
.text:00000404 var_C           = dword ptr -0Ch
.text:00000404 var_8           = dword ptr -8
.text:00000404 var_4           = dword ptr -4
.text:00000404
.text:00000404                 push    ebp
.text:00000405                 mov     ebp, esp
.text:00000407                 sub     esp, 10h
.text:0000040A                 mov     eax, 0CCCCCCCCh
.text:0000040F                 mov     [ebp+var_10], eax
.text:00000412                 mov     [ebp+var_C], eax
.text:00000415                 mov     [ebp+var_8], eax
.text:00000418                 mov     [ebp+var_4], eax
.text:0000041B                 mov     [ebp+var_4], 0
.text:00000422                 jmp     short loc_42D
.text:00000424 ; ---------------------------------------------------------------------------
.text:00000424
.text:00000424 loc_424:                                ; CODE XREF: CBZip2Crc::InitTable(void)+8Aj
.text:00000424                 mov     eax, [ebp+var_4]
.text:00000427                 add     eax, 1
.text:0000042A                 mov     [ebp+var_4], eax
.text:0000042D
.text:0000042D loc_42D:                                ; CODE XREF: CBZip2Crc::InitTable(void)+1Ej
.text:0000042D                 cmp     [ebp+var_4], 100h
.text:00000434                 jnb     short loc_490
.text:00000436                 mov     ecx, [ebp+var_4]
.text:00000439                 shl     ecx, 18h
.text:0000043C                 mov     [ebp+var_8], ecx
.text:0000043F                 mov     [ebp+var_C], 8
.text:00000446                 jmp     short loc_451
.text:00000448 ; ---------------------------------------------------------------------------
.text:00000448
.text:00000448 loc_448:                                ; CODE XREF: CBZip2Crc::InitTable(void)+7Bj
.text:00000448                 mov     edx, [ebp+var_C]
.text:0000044B                 sub     edx, 1
.text:0000044E                 mov     [ebp+var_C], edx
.text:00000451
.text:00000451 loc_451:                                ; CODE XREF: CBZip2Crc::InitTable(void)+42j
.text:00000451                 cmp     [ebp+var_C], 0
.text:00000455                 jle     short loc_481
.text:00000457                 mov     eax, [ebp+var_8]
.text:0000045A                 and     eax, 80000000h
.text:0000045F                 jz      short loc_471
.text:00000461                 mov     ecx, [ebp+var_8]
.text:00000464                 shl     ecx, 1
.text:00000466                 xor     ecx, 4C11DB7h
.text:0000046C                 mov     [ebp+var_10], ecx
.text:0000046F                 jmp     short loc_479
.text:00000471 ; ---------------------------------------------------------------------------
.text:00000471
.text:00000471 loc_471:                                ; CODE XREF: CBZip2Crc::InitTable(void)+5Bj
.text:00000471                 mov     edx, [ebp+var_8]
.text:00000474                 shl     edx, 1
.text:00000476                 mov     [ebp+var_10], edx
.text:00000479
.text:00000479 loc_479:                                ; CODE XREF: CBZip2Crc::InitTable(void)+6Bj
.text:00000479                 mov     eax, [ebp+var_10]
.text:0000047C                 mov     [ebp+var_8], eax
.text:0000047F                 jmp     short loc_448
.text:00000481 ; ---------------------------------------------------------------------------
.text:00000481
.text:00000481 loc_481:                                ; CODE XREF: CBZip2Crc::InitTable(void)+51j
.text:00000481                 mov     ecx, [ebp+var_4]
.text:00000484                 mov     edx, [ebp+var_8]
.text:00000487                 mov     ds:?Table@CBZip2Crc@@0PAIA[ecx*4], edx ; uint * CBZip2Crc::Table
.text:0000048E                 jmp     short loc_424
.text:00000490 ; ---------------------------------------------------------------------------
.text:00000490
.text:00000490 loc_490:                                ; CODE XREF: CBZip2Crc::InitTable(void)+30j
.text:00000490                 mov     esp, ebp
.text:00000492                 pop     ebp
.text:00000493                 retn
.text:00000493 ?InitTable@CBZip2Crc@@SGXXZ endp
.text:00000493
.text:00000493 _text           ends
.text:00000493
.rtc$TMZ:00000494 ; ===========================================================================
.rtc$TMZ:00000494
.rtc$TMZ:00000494 ; Segment type: Pure data
.rtc$TMZ:00000494 ; Segment permissions: Read
.rtc$TMZ:00000494 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000494                 assume cs:_rtc$TMZ
.rtc$TMZ:00000494                 ;org 494h
.rtc$TMZ:00000494 ; COMDAT (pick any)
.rtc$TMZ:00000494 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000494 _rtc$TMZ        ends
.rtc$TMZ:00000494
.rtc$IMZ:00000498 ; ===========================================================================
.rtc$IMZ:00000498
.rtc$IMZ:00000498 ; Segment type: Pure data
.rtc$IMZ:00000498 ; Segment permissions: Read
.rtc$IMZ:00000498 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000498                 assume cs:_rtc$IMZ
.rtc$IMZ:00000498                 ;org 498h
.rtc$IMZ:00000498 ; COMDAT (pick any)
.rtc$IMZ:00000498 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000498 _rtc$IMZ        ends
.rtc$IMZ:00000498
.text$yc:0000049C ; ===========================================================================
.text$yc:0000049C
.text$yc:0000049C ; Segment type: Pure code
.text$yc:0000049C ; Segment permissions: Read/Execute
.text$yc:0000049C _text$yc        segment para public 'CODE' use32
.text$yc:0000049C                 assume cs:_text$yc
.text$yc:0000049C                 ;org 49Ch
.text$yc:0000049C ; COMDAT (pick any)
.text$yc:0000049C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$yc:0000049C
.text$yc:0000049C ; =============== S U B R O U T I N E =======================================
.text$yc:0000049C
.text$yc:0000049C ; Attributes: bp-based frame
.text$yc:0000049C
.text$yc:0000049C ; void __cdecl `dynamic initializer for 'g_BZip2CrcTableInit''(void)
.text$yc:0000049C ??__Eg_BZip2CrcTableInit@@YAXXZ proc near
.text$yc:0000049C                                         ; DATA XREF: .CRT$XCU:_g_BZip2CrcTableInit$initializer$o
.text$yc:0000049C                 push    ebp
.text$yc:0000049D                 mov     ebp, esp
.text$yc:0000049F                 mov     ecx, offset ?g_BZip2CrcTableInit@@3VCBZip2CrcTableInit@@A ; this
.text$yc:000004A4                 call    ??0CBZip2CrcTableInit@@QAE@XZ ; CBZip2CrcTableInit::CBZip2CrcTableInit(void)
.text$yc:000004A9                 cmp     ebp, esp
.text$yc:000004AB                 call    __RTC_CheckEsp
.text$yc:000004B0                 pop     ebp
.text$yc:000004B1                 retn
.text$yc:000004B1 ??__Eg_BZip2CrcTableInit@@YAXXZ endp
.text$yc:000004B1
.text$yc:000004B1 ; ---------------------------------------------------------------------------
.text$yc:000004B2                 align 4
.text$yc:000004B2 _text$yc        ends
.text$yc:000004B2
.text:000004B4 ; ===========================================================================
.text:000004B4
.text:000004B4 ; Segment type: Pure code
.text:000004B4 ; Segment permissions: Read/Execute
.text:000004B4 _text           segment para public 'CODE' use32
.text:000004B4                 assume cs:_text
.text:000004B4                 ;org 4B4h
.text:000004B4 ; COMDAT (pick any)
.text:000004B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000004B4
.text:000004B4 ; =============== S U B R O U T I N E =======================================
.text:000004B4
.text:000004B4 ; Attributes: bp-based frame
.text:000004B4
.text:000004B4 ; _DWORD __thiscall CBZip2CrcTableInit::CBZip2CrcTableInit(CBZip2CrcTableInit *__hidden this)
.text:000004B4                 public ??0CBZip2CrcTableInit@@QAE@XZ
.text:000004B4 ??0CBZip2CrcTableInit@@QAE@XZ proc near ; CODE XREF: `dynamic initializer for 'g_BZip2CrcTableInit''(void)+8p
.text:000004B4
.text:000004B4 var_4           = dword ptr -4
.text:000004B4
.text:000004B4                 push    ebp
.text:000004B5                 mov     ebp, esp
.text:000004B7                 push    ecx
.text:000004B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004BF                 mov     [ebp+var_4], ecx
.text:000004C2                 call    ?InitTable@CBZip2Crc@@SGXXZ ; CBZip2Crc::InitTable(void)
.text:000004C7                 mov     eax, [ebp+var_4]
.text:000004CA                 add     esp, 4
.text:000004CD                 cmp     ebp, esp
.text:000004CF                 call    __RTC_CheckEsp
.text:000004D4                 mov     esp, ebp
.text:000004D6                 pop     ebp
.text:000004D7                 retn
.text:000004D7 ??0CBZip2CrcTableInit@@QAE@XZ endp
.text:000004D7
.text:000004D7 _text           ends
.text:000004D7
.CRT$XCU:000004D8 ; ===========================================================================
.CRT$XCU:000004D8
.CRT$XCU:000004D8 ; Segment type: Pure data
.CRT$XCU:000004D8 ; Segment permissions: Read
.CRT$XCU:000004D8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000004D8                 assume cs:_CRT$XCU
.CRT$XCU:000004D8                 ;org 4D8h
.CRT$XCU:000004D8 _g_BZip2CrcTableInit$initializer$ dd offset ??__Eg_BZip2CrcTableInit@@YAXXZ ; `dynamic initializer for 'g_BZip2CrcTableInit''(void)
.CRT$XCU:000004D8 _CRT$XCU        ends
.CRT$XCU:000004D8
UNDEF:000004E0 ; ===========================================================================
UNDEF:000004E0
UNDEF:000004E0 ; Segment type: Externs
UNDEF:000004E0 ; UNDEF
UNDEF:000004E0                 extrn __RTC_Shutdown:near
UNDEF:000004E0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000004E4                 extrn __RTC_InitBase:near
UNDEF:000004E4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000004E8                 extrn __RTC_CheckEsp:near
UNDEF:000004E8                                         ; CODE XREF: `dynamic initializer for 'g_BZip2CrcTableInit''(void)+Fp
UNDEF:000004E8                                         ; CBZip2CrcTableInit::CBZip2CrcTableInit(void)+1Bp
UNDEF:000004E8
UNDEF:000004E8