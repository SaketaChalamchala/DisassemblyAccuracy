.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 83574E6CD26A39B9DA934AB71264FD69
.rdata:00000000 ; Input CRC32 : 52245607
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Sha256Reg.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG66518        db 'SHA256',0           ; DATA XREF: .rdata:00000018o
.rdata:00000007                 align 4
.rdata:00000008 ; struct CHasherInfo g_HasherInfo
.rdata:00000008 _g_HasherInfo   dd offset ?CreateHasherSpec@@YGPAUIHasher@@XZ
.rdata:00000008                                         ; DATA XREF: CRegHasher_CSha256Hasher::CRegHasher_CSha256Hasher(void)+Eo
.rdata:00000008                                         ; CreateHasherSpec(void)
.rdata:0000000C                 align 10h
.rdata:00000010                 db  0Ah
.rdata:00000011                 db    0
.rdata:00000012                 db    0
.rdata:00000013                 db    0
.rdata:00000014                 db    0
.rdata:00000015                 db    0
.rdata:00000016                 db    0
.rdata:00000017                 db    0
.rdata:00000018                 dd offset $SG66518      ; "SHA256"
.rdata:0000001C                 dd offset ?Init@CSha256Hasher@@UAGXXZ ; CSha256Hasher::Init(void)
.rdata:0000001C _rdata          ends
.rdata:0000001C
.text:00000020 ; ===========================================================================
.text:00000020
.text:00000020 ; Segment type: Pure code
.text:00000020 ; Segment permissions: Read/Execute
.text:00000020 _text           segment para public 'CODE' use32
.text:00000020                 assume cs:_text
.text:00000020                 ;org 20h
.text:00000020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000020
.text:00000020 ; =============== S U B R O U T I N E =======================================
.text:00000020
.text:00000020 ; Attributes: bp-based frame
.text:00000020
.text:00000020 ; void __stdcall CSha256Hasher::Init(CSha256Hasher *this)
.text:00000020                 public ?Init@CSha256Hasher@@UAGXXZ
.text:00000020 ?Init@CSha256Hasher@@UAGXXZ proc near   ; DATA XREF: .rdata:0000001Co
.text:00000020                                         ; .rdata:000001E8o
.text:00000020
.text:00000020 this            = dword ptr  8
.text:00000020
.text:00000020                 push    ebp
.text:00000021                 mov     ebp, esp
.text:00000023                 mov     eax, [ebp+this]
.text:00000026                 add     eax, 8
.text:00000029                 push    eax
.text:0000002A                 call    _Sha256_Init@4  ; Sha256_Init(x)
.text:0000002F                 cmp     ebp, esp
.text:00000031                 call    __RTC_CheckEsp
.text:00000036                 pop     ebp
.text:00000037                 retn    4
.text:00000037 ?Init@CSha256Hasher@@UAGXXZ endp
.text:00000037
.text:00000037 ; ---------------------------------------------------------------------------
.text:0000003A                 align 10h
.text:00000040
.text:00000040 ; =============== S U B R O U T I N E =======================================
.text:00000040
.text:00000040 ; Attributes: bp-based frame
.text:00000040
.text:00000040 ; void __stdcall CSha256Hasher::Update(CSha256Hasher *this, const void *, unsigned int)
.text:00000040                 public ?Update@CSha256Hasher@@UAGXPBXI@Z
.text:00000040 ?Update@CSha256Hasher@@UAGXPBXI@Z proc near ; DATA XREF: .rdata:000001ECo
.text:00000040
.text:00000040 this            = dword ptr  8
.text:00000040 arg_4           = dword ptr  0Ch
.text:00000040 arg_8           = dword ptr  10h
.text:00000040
.text:00000040                 push    ebp
.text:00000041                 mov     ebp, esp
.text:00000043                 mov     eax, [ebp+arg_8]
.text:00000046                 push    eax
.text:00000047                 mov     ecx, [ebp+arg_4]
.text:0000004A                 push    ecx
.text:0000004B                 mov     edx, [ebp+this]
.text:0000004E                 add     edx, 8
.text:00000051                 push    edx
.text:00000052                 call    _Sha256_Update@12 ; Sha256_Update(x,x,x)
.text:00000057                 cmp     ebp, esp
.text:00000059                 call    __RTC_CheckEsp
.text:0000005E                 pop     ebp
.text:0000005F                 retn    0Ch
.text:0000005F ?Update@CSha256Hasher@@UAGXPBXI@Z endp
.text:0000005F
.text:0000005F ; ---------------------------------------------------------------------------
.text:00000062                 align 10h
.text:00000070
.text:00000070 ; =============== S U B R O U T I N E =======================================
.text:00000070
.text:00000070 ; Attributes: bp-based frame
.text:00000070
.text:00000070 ; void __stdcall CSha256Hasher::Final(CSha256Hasher *this, unsigned __int8 *)
.text:00000070                 public ?Final@CSha256Hasher@@UAGXPAE@Z
.text:00000070 ?Final@CSha256Hasher@@UAGXPAE@Z proc near ; DATA XREF: .rdata:000001F0o
.text:00000070
.text:00000070 this            = dword ptr  8
.text:00000070 arg_4           = dword ptr  0Ch
.text:00000070
.text:00000070                 push    ebp
.text:00000071                 mov     ebp, esp
.text:00000073                 mov     eax, [ebp+arg_4]
.text:00000076                 push    eax
.text:00000077                 mov     ecx, [ebp+this]
.text:0000007A                 add     ecx, 8
.text:0000007D                 push    ecx
.text:0000007E                 call    _Sha256_Final@8 ; Sha256_Final(x,x)
.text:00000083                 cmp     ebp, esp
.text:00000085                 call    __RTC_CheckEsp
.text:0000008A                 pop     ebp
.text:0000008B                 retn    8
.text:0000008B ?Final@CSha256Hasher@@UAGXPAE@Z endp
.text:0000008B
.text:0000008B ; ---------------------------------------------------------------------------
.text:0000008E                 align 10h
.text:00000090
.text:00000090 ; =============== S U B R O U T I N E =======================================
.text:00000090
.text:00000090 ; Attributes: bp-based frame
.text:00000090
.text:00000090 ; unsigned int __stdcall CSha256Hasher::GetDigestSize(CSha256Hasher *this)
.text:00000090                 public ?GetDigestSize@CSha256Hasher@@UAGIXZ
.text:00000090 ?GetDigestSize@CSha256Hasher@@UAGIXZ proc near ; DATA XREF: .rdata:000001F4o
.text:00000090
.text:00000090 this            = dword ptr  8
.text:00000090
.text:00000090                 push    ebp
.text:00000091                 mov     ebp, esp
.text:00000093                 mov     eax, 20h ; ' '
.text:00000098                 pop     ebp
.text:00000099                 retn    4
.text:00000099 ?GetDigestSize@CSha256Hasher@@UAGIXZ endp
.text:00000099
.text:00000099 ; ---------------------------------------------------------------------------
.text:0000009C                 align 10h
.text:000000A0
.text:000000A0 ; =============== S U B R O U T I N E =======================================
.text:000000A0
.text:000000A0 ; Attributes: bp-based frame
.text:000000A0
.text:000000A0 ; struct IHasher * __stdcall CreateHasherSpec(void)
.text:000000A0 ?CreateHasherSpec@@YGPAUIHasher@@XZ proc near
.text:000000A0                                         ; DATA XREF: .rdata:_g_HasherInfoo
.text:000000A0
.text:000000A0 var_18          = dword ptr -18h
.text:000000A0 var_14          = dword ptr -14h
.text:000000A0 var_10          = dword ptr -10h
.text:000000A0 var_C           = dword ptr -0Ch
.text:000000A0 var_4           = dword ptr -4
.text:000000A0
.text:000000A0                 push    ebp
.text:000000A1                 mov     ebp, esp
.text:000000A3                 push    0FFFFFFFFh
.text:000000A5                 push    offset __ehhandler$?CreateHasherSpec@@YGPAUIHasher@@XZ
.text:000000AA                 mov     eax, large fs:0
.text:000000B0                 push    eax
.text:000000B1                 sub     esp, 0Ch
.text:000000B4                 mov     [ebp+var_18], 0CCCCCCCCh
.text:000000BB                 mov     [ebp+var_14], 0CCCCCCCCh
.text:000000C2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000000C9                 mov     eax, dword ptr ds:___security_cookie
.text:000000CE                 xor     eax, ebp
.text:000000D0                 push    eax
.text:000000D1                 lea     eax, [ebp+var_C]
.text:000000D4                 mov     large fs:0, eax
.text:000000DA                 push    0F0h ; '='      ; unsigned int
.text:000000DF                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000000E4                 add     esp, 4
.text:000000E7                 mov     [ebp+var_14], eax
.text:000000EA                 mov     [ebp+var_4], 0
.text:000000F1                 cmp     [ebp+var_14], 0
.text:000000F5                 jz      short loc_104
.text:000000F7                 mov     ecx, [ebp+var_14]
.text:000000FA                 call    ??0CSha256Hasher@@QAE@XZ ; CSha256Hasher::CSha256Hasher(void)
.text:000000FF                 mov     [ebp+var_18], eax
.text:00000102                 jmp     short loc_10B
.text:00000104 ; ---------------------------------------------------------------------------
.text:00000104
.text:00000104 loc_104:                                ; CODE XREF: CreateHasherSpec(void)+55j
.text:00000104                 mov     [ebp+var_18], 0
.text:0000010B
.text:0000010B loc_10B:                                ; CODE XREF: CreateHasherSpec(void)+62j
.text:0000010B                 mov     eax, [ebp+var_18]
.text:0000010E                 mov     [ebp+var_10], eax
.text:00000111                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000118                 mov     eax, [ebp+var_10]
.text:0000011B                 mov     ecx, [ebp+var_C]
.text:0000011E                 mov     large fs:0, ecx
.text:00000125                 pop     ecx
.text:00000126                 add     esp, 18h
.text:00000129                 cmp     ebp, esp
.text:0000012B                 call    __RTC_CheckEsp
.text:00000130                 mov     esp, ebp
.text:00000132                 pop     ebp
.text:00000133                 retn
.text:00000133 ?CreateHasherSpec@@YGPAUIHasher@@XZ endp
.text:00000133
.text:00000133 _text           ends
.text:00000133
.rtc$TMZ:00000134 ; ===========================================================================
.rtc$TMZ:00000134
.rtc$TMZ:00000134 ; Segment type: Pure data
.rtc$TMZ:00000134 ; Segment permissions: Read
.rtc$TMZ:00000134 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000134                 assume cs:_rtc$TMZ
.rtc$TMZ:00000134                 ;org 134h
.rtc$TMZ:00000134 ; COMDAT (pick any)
.rtc$TMZ:00000134 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000134 _rtc$TMZ        ends
.rtc$TMZ:00000134
.rtc$IMZ:00000138 ; ===========================================================================
.rtc$IMZ:00000138
.rtc$IMZ:00000138 ; Segment type: Pure data
.rtc$IMZ:00000138 ; Segment permissions: Read
.rtc$IMZ:00000138 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000138                 assume cs:_rtc$IMZ
.rtc$IMZ:00000138                 ;org 138h
.rtc$IMZ:00000138 ; COMDAT (pick any)
.rtc$IMZ:00000138 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000138 _rtc$IMZ        ends
.rtc$IMZ:00000138
.text$x:0000013C ; ===========================================================================
.text$x:0000013C
.text$x:0000013C ; Segment type: Pure code
.text$x:0000013C ; Segment permissions: Read/Execute
.text$x:0000013C _text$x         segment para public 'CODE' use32
.text$x:0000013C                 assume cs:_text$x
.text$x:0000013C                 ;org 13Ch
.text$x:0000013C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000013C
.text$x:0000013C ; =============== S U B R O U T I N E =======================================
.text$x:0000013C
.text$x:0000013C
.text$x:0000013C __unwindfunclet$?CreateHasherSpec@@YGPAUIHasher@@XZ$0 proc near
.text$x:0000013C                                         ; DATA XREF: .xdata$x:00000168o
.text$x:0000013C                 mov     eax, [ebp-14h]
.text$x:0000013F                 push    eax             ; void *
.text$x:00000140                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000145                 pop     ecx
.text$x:00000146                 retn
.text$x:00000146 __unwindfunclet$?CreateHasherSpec@@YGPAUIHasher@@XZ$0 endp
.text$x:00000146
.text$x:00000147
.text$x:00000147 ; =============== S U B R O U T I N E =======================================
.text$x:00000147
.text$x:00000147
.text$x:00000147 __ehhandler$?CreateHasherSpec@@YGPAUIHasher@@XZ proc near
.text$x:00000147                                         ; DATA XREF: CreateHasherSpec(void)+5o
.text$x:00000147
.text$x:00000147 arg_4           = dword ptr  8
.text$x:00000147
.text$x:00000147                 mov     edx, [esp+arg_4]
.text$x:0000014B                 lea     eax, [edx+0Ch]
.text$x:0000014E                 mov     ecx, [edx-10h]
.text$x:00000151                 xor     ecx, eax
.text$x:00000153                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000158                 mov     eax, offset __ehfuncinfo$?CreateHasherSpec@@YGPAUIHasher@@XZ
.text$x:0000015D                 jmp     ___CxxFrameHandler3
.text$x:0000015D __ehhandler$?CreateHasherSpec@@YGPAUIHasher@@XZ endp
.text$x:0000015D
.text$x:0000015D ; ---------------------------------------------------------------------------
.text$x:00000162                 align 4
.text$x:00000162 _text$x         ends
.text$x:00000162
.xdata$x:00000164 ; ===========================================================================
.xdata$x:00000164
.xdata$x:00000164 ; Segment type: Pure data
.xdata$x:00000164 ; Segment permissions: Read
.xdata$x:00000164 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000164                 assume cs:_xdata$x
.xdata$x:00000164                 ;org 164h
.xdata$x:00000164 __unwindtable$?CreateHasherSpec@@YGPAUIHasher@@XZ db 0FFh
.xdata$x:00000164                                         ; DATA XREF: .xdata$x:00000174o
.xdata$x:00000165                 db 0FFh
.xdata$x:00000166                 db 0FFh
.xdata$x:00000167                 db 0FFh
.xdata$x:00000168                 dd offset __unwindfunclet$?CreateHasherSpec@@YGPAUIHasher@@XZ$0
.xdata$x:0000016C __ehfuncinfo$?CreateHasherSpec@@YGPAUIHasher@@XZ db  22h ; "
.xdata$x:0000016C                                         ; DATA XREF: __ehhandler$?CreateHasherSpec@@YGPAUIHasher@@XZ+11o
.xdata$x:0000016D                 db    5
.xdata$x:0000016E                 db  93h ; ô
.xdata$x:0000016F                 db  19h
.xdata$x:00000170                 db    1
.xdata$x:00000171                 db    0
.xdata$x:00000172                 db    0
.xdata$x:00000173                 db    0
.xdata$x:00000174                 dd offset __unwindtable$?CreateHasherSpec@@YGPAUIHasher@@XZ
.xdata$x:00000178                 db    0
.xdata$x:00000179                 db    0
.xdata$x:0000017A                 db    0
.xdata$x:0000017B                 db    0
.xdata$x:0000017C                 db    0
.xdata$x:0000017D                 db    0
.xdata$x:0000017E                 db    0
.xdata$x:0000017F                 db    0
.xdata$x:00000180                 db    0
.xdata$x:00000181                 db    0
.xdata$x:00000182                 db    0
.xdata$x:00000183                 db    0
.xdata$x:00000184                 db    0
.xdata$x:00000185                 db    0
.xdata$x:00000186                 db    0
.xdata$x:00000187                 db    0
.xdata$x:00000188                 db    0
.xdata$x:00000189                 db    0
.xdata$x:0000018A                 db    0
.xdata$x:0000018B                 db    0
.xdata$x:0000018C                 db    1
.xdata$x:0000018D                 db    0
.xdata$x:0000018E                 db    0
.xdata$x:0000018F                 db    0
.xdata$x:0000018F _xdata$x        ends
.xdata$x:0000018F
.text:00000190 ; ===========================================================================
.text:00000190
.text:00000190 ; Segment type: Pure code
.text:00000190 ; Segment permissions: Read/Execute
.text:00000190 _text           segment para public 'CODE' use32
.text:00000190                 assume cs:_text
.text:00000190                 ;org 190h
.text:00000190 ; COMDAT (pick any)
.text:00000190                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000190
.text:00000190 ; =============== S U B R O U T I N E =======================================
.text:00000190
.text:00000190 ; Attributes: bp-based frame
.text:00000190
.text:00000190 ; public: __thiscall CSha256Hasher::CSha256Hasher(void)
.text:00000190                 public ??0CSha256Hasher@@QAE@XZ
.text:00000190 ??0CSha256Hasher@@QAE@XZ proc near      ; CODE XREF: CreateHasherSpec(void)+5Ap
.text:00000190
.text:00000190 var_4           = dword ptr -4
.text:00000190
.text:00000190                 push    ebp
.text:00000191                 mov     ebp, esp
.text:00000193                 push    ecx
.text:00000194                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000019B                 mov     [ebp+var_4], ecx
.text:0000019E                 mov     ecx, [ebp+var_4] ; this
.text:000001A1                 call    ??0IHasher@@QAE@XZ ; IHasher::IHasher(void)
.text:000001A6                 mov     ecx, [ebp+var_4]
.text:000001A9                 add     ecx, 4          ; this
.text:000001AC                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000001B1                 mov     eax, [ebp+var_4]
.text:000001B4                 mov     dword ptr [eax], offset ??_7CSha256Hasher@@6B@ ; const CSha256Hasher::`vftable'
.text:000001BA                 mov     ecx, [ebp+var_4]
.text:000001BD                 add     ecx, 8
.text:000001C0                 push    ecx
.text:000001C1                 call    _Sha256_Init@4  ; Sha256_Init(x)
.text:000001C6                 mov     eax, [ebp+var_4]
.text:000001C9                 add     esp, 4
.text:000001CC                 cmp     ebp, esp
.text:000001CE                 call    __RTC_CheckEsp
.text:000001D3                 mov     esp, ebp
.text:000001D5                 pop     ebp
.text:000001D6                 retn
.text:000001D6 ??0CSha256Hasher@@QAE@XZ endp
.text:000001D6
.text:000001D6 ; ---------------------------------------------------------------------------
.text:000001D7                 align 4
.text:000001D7 _text           ends
.text:000001D7
.rdata:000001D8 ; ===========================================================================
.rdata:000001D8
.rdata:000001D8 ; Segment type: Pure data
.rdata:000001D8 ; Segment permissions: Read
.rdata:000001D8 _rdata          segment dword public 'DATA' use32
.rdata:000001D8                 assume cs:_rdata
.rdata:000001D8                 ;org 1D8h
.rdata:000001D8 ; COMDAT (pick largest)
.rdata:000001D8                 dd offset ??_R4CSha256Hasher@@6B@ ; const CSha256Hasher::`RTTI Complete Object Locator'
.rdata:000001DC                 public ??_7CSha256Hasher@@6B@
.rdata:000001DC ; const CSha256Hasher::`vftable'
.rdata:000001DC ??_7CSha256Hasher@@6B@ dd offset ?QueryInterface@CSha256Hasher@@UAGJABU_GUID@@PAPAX@Z
.rdata:000001DC                                         ; DATA XREF: CSha256Hasher::CSha256Hasher(void)+24o
.rdata:000001DC                                         ; CSha256Hasher::QueryInterface(_GUID const &,void * *)
.rdata:000001E0                 dd offset ?AddRef@CSha256Hasher@@UAGKXZ ; CSha256Hasher::AddRef(void)
.rdata:000001E4                 dd offset ?Release@CSha256Hasher@@UAGKXZ ; CSha256Hasher::Release(void)
.rdata:000001E8                 dd offset ?Init@CSha256Hasher@@UAGXXZ ; CSha256Hasher::Init(void)
.rdata:000001EC                 dd offset ?Update@CSha256Hasher@@UAGXPBXI@Z ; CSha256Hasher::Update(void const *,uint)
.rdata:000001F0                 dd offset ?Final@CSha256Hasher@@UAGXPAE@Z ; CSha256Hasher::Final(uchar *)
.rdata:000001F4                 dd offset ?GetDigestSize@CSha256Hasher@@UAGIXZ ; CSha256Hasher::GetDigestSize(void)
.rdata:000001F4 _rdata          ends
.rdata:000001F4
.rdata$r:000001F8 ; ===========================================================================
.rdata$r:000001F8
.rdata$r:000001F8 ; Segment type: Pure data
.rdata$r:000001F8 ; Segment permissions: Read
.rdata$r:000001F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000001F8                 assume cs:_rdata$r
.rdata$r:000001F8                 ;org 1F8h
.rdata$r:000001F8 ; COMDAT (pick any)
.rdata$r:000001F8                 public ??_R4CSha256Hasher@@6B@
.rdata$r:000001F8 ; const CSha256Hasher::`RTTI Complete Object Locator'
.rdata$r:000001F8 ??_R4CSha256Hasher@@6B@ db    0         ; DATA XREF: .rdata:000001D8o
.rdata$r:000001F9                 db    0
.rdata$r:000001FA                 db    0
.rdata$r:000001FB                 db    0
.rdata$r:000001FC                 db    0
.rdata$r:000001FD                 db    0
.rdata$r:000001FE                 db    0
.rdata$r:000001FF                 db    0
.rdata$r:00000200                 db    0
.rdata$r:00000201                 db    0
.rdata$r:00000202                 db    0
.rdata$r:00000203                 db    0
.rdata$r:00000204                 dd offset ??_R0?AVCSha256Hasher@@@8 ; CSha256Hasher `RTTI Type Descriptor'
.rdata$r:00000208                 dd offset ??_R3CSha256Hasher@@8 ; CSha256Hasher::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000208 _rdata$r        ends
.rdata$r:00000208
.data:0000020C ; ===========================================================================
.data:0000020C
.data:0000020C ; Segment type: Pure data
.data:0000020C ; Segment permissions: Read/Write
.data:0000020C _data           segment dword public 'DATA' use32
.data:0000020C                 assume cs:_data
.data:0000020C                 ;org 20Ch
.data:0000020C ; COMDAT (pick any)
.data:0000020C                 public ??_R0?AVCSha256Hasher@@@8
.data:0000020C ; class CSha256Hasher `RTTI Type Descriptor'
.data:0000020C ??_R0?AVCSha256Hasher@@@8 dd offset ??_7type_info@@6B@
.data:0000020C                                         ; DATA XREF: .rdata$r:00000204o
.data:0000020C                                         ; .rdata$r:CSha256Hasher::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000020C                                         ; const type_info::`vftable'
.data:00000210                 db    0
.data:00000211                 db    0
.data:00000212                 db    0
.data:00000213                 db    0
.data:00000214                 db  2Eh ; .
.data:00000215                 db  3Fh ; ?
.data:00000216                 db  41h ; A
.data:00000217                 db  56h ; V
.data:00000218                 db  43h ; C
.data:00000219                 db  53h ; S
.data:0000021A                 db  68h ; h
.data:0000021B                 db  61h ; a
.data:0000021C                 db  32h ; 2
.data:0000021D                 db  35h ; 5
.data:0000021E                 db  36h ; 6
.data:0000021F                 db  48h ; H
.data:00000220                 db  61h ; a
.data:00000221                 db  73h ; s
.data:00000222                 db  68h ; h
.data:00000223                 db  65h ; e
.data:00000224                 db  72h ; r
.data:00000225                 db  40h ; @
.data:00000226                 db  40h ; @
.data:00000227                 db    0
.data:00000227 _data           ends
.data:00000227
.rdata$r:00000228 ; ===========================================================================
.rdata$r:00000228
.rdata$r:00000228 ; Segment type: Pure data
.rdata$r:00000228 ; Segment permissions: Read
.rdata$r:00000228 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000228                 assume cs:_rdata$r
.rdata$r:00000228                 ;org 228h
.rdata$r:00000228 ; COMDAT (pick any)
.rdata$r:00000228                 public ??_R3CSha256Hasher@@8
.rdata$r:00000228 ; CSha256Hasher::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000228 ??_R3CSha256Hasher@@8 db    0           ; DATA XREF: .rdata$r:00000208o
.rdata$r:00000228                                         ; .rdata$r:00000264o
.rdata$r:00000229                 db    0
.rdata$r:0000022A                 db    0
.rdata$r:0000022B                 db    0
.rdata$r:0000022C                 db    1
.rdata$r:0000022D                 db    0
.rdata$r:0000022E                 db    0
.rdata$r:0000022F                 db    0
.rdata$r:00000230                 db    4
.rdata$r:00000231                 db    0
.rdata$r:00000232                 db    0
.rdata$r:00000233                 db    0
.rdata$r:00000234                 dd offset ??_R2CSha256Hasher@@8 ; CSha256Hasher::`RTTI Base Class Array'
.rdata$r:00000234 _rdata$r        ends
.rdata$r:00000234
.rdata$r:00000238 ; ===========================================================================
.rdata$r:00000238
.rdata$r:00000238 ; Segment type: Pure data
.rdata$r:00000238 ; Segment permissions: Read
.rdata$r:00000238 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000238                 assume cs:_rdata$r
.rdata$r:00000238                 ;org 238h
.rdata$r:00000238 ; COMDAT (pick any)
.rdata$r:00000238                 public ??_R2CSha256Hasher@@8
.rdata$r:00000238 ; CSha256Hasher::`RTTI Base Class Array'
.rdata$r:00000238 ??_R2CSha256Hasher@@8 dd offset ??_R1A@?0A@EA@CSha256Hasher@@8
.rdata$r:00000238                                         ; DATA XREF: .rdata$r:00000234o
.rdata$r:00000238                                         ; CSha256Hasher::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000023C                 dd offset ??_R1A@?0A@EA@IHasher@@8 ; IHasher::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000240                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000244                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000248                 db    0
.rdata$r:00000249                 align 4
.rdata$r:00000249 _rdata$r        ends
.rdata$r:00000249
.rdata$r:0000024C ; ===========================================================================
.rdata$r:0000024C
.rdata$r:0000024C ; Segment type: Pure data
.rdata$r:0000024C ; Segment permissions: Read
.rdata$r:0000024C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000024C                 assume cs:_rdata$r
.rdata$r:0000024C                 ;org 24Ch
.rdata$r:0000024C ; COMDAT (pick any)
.rdata$r:0000024C                 public ??_R1A@?0A@EA@CSha256Hasher@@8
.rdata$r:0000024C ; CSha256Hasher::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000024C ??_R1A@?0A@EA@CSha256Hasher@@8 dd offset ??_R0?AVCSha256Hasher@@@8
.rdata$r:0000024C                                         ; DATA XREF: .rdata$r:CSha256Hasher::`RTTI Base Class Array'o
.rdata$r:0000024C                                         ; CSha256Hasher `RTTI Type Descriptor'
.rdata$r:00000250                 db    3
.rdata$r:00000251                 db    0
.rdata$r:00000252                 db    0
.rdata$r:00000253                 db    0
.rdata$r:00000254                 db    0
.rdata$r:00000255                 db    0
.rdata$r:00000256                 db    0
.rdata$r:00000257                 db    0
.rdata$r:00000258                 db 0FFh
.rdata$r:00000259                 db 0FFh
.rdata$r:0000025A                 db 0FFh
.rdata$r:0000025B                 db 0FFh
.rdata$r:0000025C                 db    0
.rdata$r:0000025D                 db    0
.rdata$r:0000025E                 db    0
.rdata$r:0000025F                 db    0
.rdata$r:00000260                 db  40h ; @
.rdata$r:00000261                 db    0
.rdata$r:00000262                 db    0
.rdata$r:00000263                 db    0
.rdata$r:00000264                 dd offset ??_R3CSha256Hasher@@8 ; CSha256Hasher::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000264 _rdata$r        ends
.rdata$r:00000264
.rdata$r:00000268 ; ===========================================================================
.rdata$r:00000268
.rdata$r:00000268 ; Segment type: Pure data
.rdata$r:00000268 ; Segment permissions: Read
.rdata$r:00000268 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000268                 assume cs:_rdata$r
.rdata$r:00000268                 ;org 268h
.rdata$r:00000268 ; COMDAT (pick any)
.rdata$r:00000268                 public ??_R1A@?0A@EA@IHasher@@8
.rdata$r:00000268 ; IHasher::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000268 ??_R1A@?0A@EA@IHasher@@8 dd offset ??_R0?AUIHasher@@@8
.rdata$r:00000268                                         ; DATA XREF: .rdata$r:0000023Co
.rdata$r:00000268                                         ; .rdata$r:IHasher::`RTTI Base Class Array'o
.rdata$r:00000268                                         ; IHasher `RTTI Type Descriptor'
.rdata$r:0000026C                 db    1
.rdata$r:0000026D                 db    0
.rdata$r:0000026E                 db    0
.rdata$r:0000026F                 db    0
.rdata$r:00000270                 db    0
.rdata$r:00000271                 db    0
.rdata$r:00000272                 db    0
.rdata$r:00000273                 db    0
.rdata$r:00000274                 db 0FFh
.rdata$r:00000275                 db 0FFh
.rdata$r:00000276                 db 0FFh
.rdata$r:00000277                 db 0FFh
.rdata$r:00000278                 db    0
.rdata$r:00000279                 db    0
.rdata$r:0000027A                 db    0
.rdata$r:0000027B                 db    0
.rdata$r:0000027C                 db  40h ; @
.rdata$r:0000027D                 db    0
.rdata$r:0000027E                 db    0
.rdata$r:0000027F                 db    0
.rdata$r:00000280                 dd offset ??_R3IHasher@@8 ; IHasher::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000280 _rdata$r        ends
.rdata$r:00000280
.data:00000284 ; ===========================================================================
.data:00000284
.data:00000284 ; Segment type: Pure data
.data:00000284 ; Segment permissions: Read/Write
.data:00000284 _data           segment dword public 'DATA' use32
.data:00000284                 assume cs:_data
.data:00000284                 ;org 284h
.data:00000284 ; COMDAT (pick any)
.data:00000284                 public ??_R0?AUIHasher@@@8
.data:00000284 ; struct IHasher `RTTI Type Descriptor'
.data:00000284 ??_R0?AUIHasher@@@8 dd offset ??_7type_info@@6B@
.data:00000284                                         ; DATA XREF: .rdata$r:IHasher::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000284                                         ; .rdata$r:000004C0o
.data:00000284                                         ; const type_info::`vftable'
.data:00000288                 db    0
.data:00000289                 db    0
.data:0000028A                 db    0
.data:0000028B                 db    0
.data:0000028C                 db  2Eh ; .
.data:0000028D                 db  3Fh ; ?
.data:0000028E                 db  41h ; A
.data:0000028F                 db  55h ; U
.data:00000290                 db  49h ; I
.data:00000291                 db  48h ; H
.data:00000292                 db  61h ; a
.data:00000293                 db  73h ; s
.data:00000294                 db  68h ; h
.data:00000295                 db  65h ; e
.data:00000296                 db  72h ; r
.data:00000297                 db  40h ; @
.data:00000298                 db  40h ; @
.data:00000299                 db    0
.data:0000029A                 align 4
.data:0000029A _data           ends
.data:0000029A
.rdata$r:0000029C ; ===========================================================================
.rdata$r:0000029C
.rdata$r:0000029C ; Segment type: Pure data
.rdata$r:0000029C ; Segment permissions: Read
.rdata$r:0000029C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000029C                 assume cs:_rdata$r
.rdata$r:0000029C                 ;org 29Ch
.rdata$r:0000029C ; COMDAT (pick any)
.rdata$r:0000029C                 public ??_R3IHasher@@8
.rdata$r:0000029C ; IHasher::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000029C ??_R3IHasher@@8 db    0                 ; DATA XREF: .rdata$r:00000280o
.rdata$r:0000029C                                         ; .rdata$r:000004C4o
.rdata$r:0000029D                 db    0
.rdata$r:0000029E                 db    0
.rdata$r:0000029F                 db    0
.rdata$r:000002A0                 db    0
.rdata$r:000002A1                 db    0
.rdata$r:000002A2                 db    0
.rdata$r:000002A3                 db    0
.rdata$r:000002A4                 db    2
.rdata$r:000002A5                 db    0
.rdata$r:000002A6                 db    0
.rdata$r:000002A7                 db    0
.rdata$r:000002A8                 dd offset ??_R2IHasher@@8 ; IHasher::`RTTI Base Class Array'
.rdata$r:000002A8 _rdata$r        ends
.rdata$r:000002A8
.rdata$r:000002AC ; ===========================================================================
.rdata$r:000002AC
.rdata$r:000002AC ; Segment type: Pure data
.rdata$r:000002AC ; Segment permissions: Read
.rdata$r:000002AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002AC                 assume cs:_rdata$r
.rdata$r:000002AC                 ;org 2ACh
.rdata$r:000002AC ; COMDAT (pick any)
.rdata$r:000002AC                 public ??_R2IHasher@@8
.rdata$r:000002AC ; IHasher::`RTTI Base Class Array'
.rdata$r:000002AC ??_R2IHasher@@8 dd offset ??_R1A@?0A@EA@IHasher@@8
.rdata$r:000002AC                                         ; DATA XREF: .rdata$r:000002A8o
.rdata$r:000002AC                                         ; IHasher::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000002B0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000002B4                 db    0
.rdata$r:000002B5                 align 4
.rdata$r:000002B5 _rdata$r        ends
.rdata$r:000002B5
.rdata$r:000002B8 ; ===========================================================================
.rdata$r:000002B8
.rdata$r:000002B8 ; Segment type: Pure data
.rdata$r:000002B8 ; Segment permissions: Read
.rdata$r:000002B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002B8                 assume cs:_rdata$r
.rdata$r:000002B8                 ;org 2B8h
.rdata$r:000002B8 ; COMDAT (pick any)
.rdata$r:000002B8                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000002B8 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000002B8 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000002B8                                         ; DATA XREF: .rdata$r:00000240o
.rdata$r:000002B8                                         ; .rdata$r:000002B0o ...
.rdata$r:000002B8                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000002BC                 db    0
.rdata$r:000002BD                 db    0
.rdata$r:000002BE                 db    0
.rdata$r:000002BF                 db    0
.rdata$r:000002C0                 db    0
.rdata$r:000002C1                 db    0
.rdata$r:000002C2                 db    0
.rdata$r:000002C3                 db    0
.rdata$r:000002C4                 db 0FFh
.rdata$r:000002C5                 db 0FFh
.rdata$r:000002C6                 db 0FFh
.rdata$r:000002C7                 db 0FFh
.rdata$r:000002C8                 db    0
.rdata$r:000002C9                 db    0
.rdata$r:000002CA                 db    0
.rdata$r:000002CB                 db    0
.rdata$r:000002CC                 db  40h ; @
.rdata$r:000002CD                 db    0
.rdata$r:000002CE                 db    0
.rdata$r:000002CF                 db    0
.rdata$r:000002D0                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000002D0 _rdata$r        ends
.rdata$r:000002D0
.data:000002D4 ; ===========================================================================
.data:000002D4
.data:000002D4 ; Segment type: Pure data
.data:000002D4 ; Segment permissions: Read/Write
.data:000002D4 _data           segment dword public 'DATA' use32
.data:000002D4                 assume cs:_data
.data:000002D4                 ;org 2D4h
.data:000002D4 ; COMDAT (pick any)
.data:000002D4                 public ??_R0?AUIUnknown@@@8
.data:000002D4 ; struct IUnknown `RTTI Type Descriptor'
.data:000002D4 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:000002D4                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000002D4                                         ; const type_info::`vftable'
.data:000002D8                 db    0
.data:000002D9                 db    0
.data:000002DA                 db    0
.data:000002DB                 db    0
.data:000002DC                 db  2Eh ; .
.data:000002DD                 db  3Fh ; ?
.data:000002DE                 db  41h ; A
.data:000002DF                 db  55h ; U
.data:000002E0                 db  49h ; I
.data:000002E1                 db  55h ; U
.data:000002E2                 db  6Eh ; n
.data:000002E3                 db  6Bh ; k
.data:000002E4                 db  6Eh ; n
.data:000002E5                 db  6Fh ; o
.data:000002E6                 db  77h ; w
.data:000002E7                 db  6Eh ; n
.data:000002E8                 db  40h ; @
.data:000002E9                 db  40h ; @
.data:000002EA                 db    0
.data:000002EB                 align 4
.data:000002EB _data           ends
.data:000002EB
.rdata$r:000002EC ; ===========================================================================
.rdata$r:000002EC
.rdata$r:000002EC ; Segment type: Pure data
.rdata$r:000002EC ; Segment permissions: Read
.rdata$r:000002EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002EC                 assume cs:_rdata$r
.rdata$r:000002EC                 ;org 2ECh
.rdata$r:000002EC ; COMDAT (pick any)
.rdata$r:000002EC                 public ??_R3IUnknown@@8
.rdata$r:000002EC ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000002EC ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:000002D0o
.rdata$r:000002ED                 db    0
.rdata$r:000002EE                 db    0
.rdata$r:000002EF                 db    0
.rdata$r:000002F0                 db    0
.rdata$r:000002F1                 db    0
.rdata$r:000002F2                 db    0
.rdata$r:000002F3                 db    0
.rdata$r:000002F4                 db    1
.rdata$r:000002F5                 db    0
.rdata$r:000002F6                 db    0
.rdata$r:000002F7                 db    0
.rdata$r:000002F8                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000002F8 _rdata$r        ends
.rdata$r:000002F8
.rdata$r:000002FC ; ===========================================================================
.rdata$r:000002FC
.rdata$r:000002FC ; Segment type: Pure data
.rdata$r:000002FC ; Segment permissions: Read
.rdata$r:000002FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002FC                 assume cs:_rdata$r
.rdata$r:000002FC                 ;org 2FCh
.rdata$r:000002FC ; COMDAT (pick any)
.rdata$r:000002FC                 public ??_R2IUnknown@@8
.rdata$r:000002FC ; IUnknown::`RTTI Base Class Array'
.rdata$r:000002FC ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000002FC                                         ; DATA XREF: .rdata$r:000002F8o
.rdata$r:000002FC                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000300                 db    0
.rdata$r:00000301                 align 4
.rdata$r:00000301 _rdata$r        ends
.rdata$r:00000301
.rdata$r:00000304 ; ===========================================================================
.rdata$r:00000304
.rdata$r:00000304 ; Segment type: Pure data
.rdata$r:00000304 ; Segment permissions: Read
.rdata$r:00000304 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000304                 assume cs:_rdata$r
.rdata$r:00000304                 ;org 304h
.rdata$r:00000304 ; COMDAT (pick any)
.rdata$r:00000304                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00000304 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00000304 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000304                                         ; DATA XREF: .rdata$r:00000244o
.rdata$r:00000304                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000308                 db    0
.rdata$r:00000309                 db    0
.rdata$r:0000030A                 db    0
.rdata$r:0000030B                 db    0
.rdata$r:0000030C                 db    4
.rdata$r:0000030D                 db    0
.rdata$r:0000030E                 db    0
.rdata$r:0000030F                 db    0
.rdata$r:00000310                 db 0FFh
.rdata$r:00000311                 db 0FFh
.rdata$r:00000312                 db 0FFh
.rdata$r:00000313                 db 0FFh
.rdata$r:00000314                 db    0
.rdata$r:00000315                 db    0
.rdata$r:00000316                 db    0
.rdata$r:00000317                 db    0
.rdata$r:00000318                 db  40h ; @
.rdata$r:00000319                 db    0
.rdata$r:0000031A                 db    0
.rdata$r:0000031B                 db    0
.rdata$r:0000031C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000031C _rdata$r        ends
.rdata$r:0000031C
.data:00000320 ; ===========================================================================
.data:00000320
.data:00000320 ; Segment type: Pure data
.data:00000320 ; Segment permissions: Read/Write
.data:00000320 _data           segment dword public 'DATA' use32
.data:00000320                 assume cs:_data
.data:00000320                 ;org 320h
.data:00000320 ; COMDAT (pick any)
.data:00000320                 public ??_R0?AVCMyUnknownImp@@@8
.data:00000320 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00000320 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00000320                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00000320                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000320                                         ; const type_info::`vftable'
.data:00000324                 align 8
.data:00000328 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00000328 _data           ends
.data:00000328
.rdata$r:0000033C ; ===========================================================================
.rdata$r:0000033C
.rdata$r:0000033C ; Segment type: Pure data
.rdata$r:0000033C ; Segment permissions: Read
.rdata$r:0000033C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000033C                 assume cs:_rdata$r
.rdata$r:0000033C                 ;org 33Ch
.rdata$r:0000033C ; COMDAT (pick any)
.rdata$r:0000033C                 public ??_R3CMyUnknownImp@@8
.rdata$r:0000033C ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000033C ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:0000031Co
.rdata$r:0000033C                                         ; .rdata$r:0000036Co
.rdata$r:0000033D                 db    0
.rdata$r:0000033E                 db    0
.rdata$r:0000033F                 db    0
.rdata$r:00000340                 db    0
.rdata$r:00000341                 db    0
.rdata$r:00000342                 db    0
.rdata$r:00000343                 db    0
.rdata$r:00000344                 db    1
.rdata$r:00000345                 db    0
.rdata$r:00000346                 db    0
.rdata$r:00000347                 db    0
.rdata$r:00000348                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000348 _rdata$r        ends
.rdata$r:00000348
.rdata$r:0000034C ; ===========================================================================
.rdata$r:0000034C
.rdata$r:0000034C ; Segment type: Pure data
.rdata$r:0000034C ; Segment permissions: Read
.rdata$r:0000034C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000034C                 assume cs:_rdata$r
.rdata$r:0000034C                 ;org 34Ch
.rdata$r:0000034C ; COMDAT (pick any)
.rdata$r:0000034C                 public ??_R2CMyUnknownImp@@8
.rdata$r:0000034C ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:0000034C ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000034C                                         ; DATA XREF: .rdata$r:00000348o
.rdata$r:0000034C                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000350                 db    0
.rdata$r:00000351                 align 4
.rdata$r:00000351 _rdata$r        ends
.rdata$r:00000351
.rdata$r:00000354 ; ===========================================================================
.rdata$r:00000354
.rdata$r:00000354 ; Segment type: Pure data
.rdata$r:00000354 ; Segment permissions: Read
.rdata$r:00000354 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000354                 assume cs:_rdata$r
.rdata$r:00000354                 ;org 354h
.rdata$r:00000354 ; COMDAT (pick any)
.rdata$r:00000354                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000354 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000354 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000354                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00000354                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000358                 align 10h
.rdata$r:00000360                 db 0FFh
.rdata$r:00000361                 db 0FFh
.rdata$r:00000362                 db 0FFh
.rdata$r:00000363                 db 0FFh
.rdata$r:00000364                 db    0
.rdata$r:00000365                 db    0
.rdata$r:00000366                 db    0
.rdata$r:00000367                 db    0
.rdata$r:00000368                 db  40h ; @
.rdata$r:00000369                 db    0
.rdata$r:0000036A                 db    0
.rdata$r:0000036B                 db    0
.rdata$r:0000036C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000036C _rdata$r        ends
.rdata$r:0000036C
.text:00000370 ; ===========================================================================
.text:00000370
.text:00000370 ; Segment type: Pure code
.text:00000370 ; Segment permissions: Read/Execute
.text:00000370 _text           segment para public 'CODE' use32
.text:00000370                 assume cs:_text
.text:00000370                 ;org 370h
.text:00000370 ; COMDAT (pick any)
.text:00000370                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000370
.text:00000370 ; =============== S U B R O U T I N E =======================================
.text:00000370
.text:00000370 ; Attributes: bp-based frame
.text:00000370
.text:00000370 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00000370                 public ??0CMyUnknownImp@@QAE@XZ
.text:00000370 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: CSha256Hasher::CSha256Hasher(void)+1Cp
.text:00000370
.text:00000370 var_4           = dword ptr -4
.text:00000370
.text:00000370                 push    ebp
.text:00000371                 mov     ebp, esp
.text:00000373                 push    ecx
.text:00000374                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000037B                 mov     [ebp+var_4], ecx
.text:0000037E                 mov     eax, [ebp+var_4]
.text:00000381                 mov     dword ptr [eax], 0
.text:00000387                 mov     eax, [ebp+var_4]
.text:0000038A                 mov     esp, ebp
.text:0000038C                 pop     ebp
.text:0000038D                 retn
.text:0000038D ??0CMyUnknownImp@@QAE@XZ endp
.text:0000038D
.text:0000038D ; ---------------------------------------------------------------------------
.text:0000038E                 align 10h
.text:0000038E _text           ends
.text:0000038E
.text:00000390 ; ===========================================================================
.text:00000390
.text:00000390 ; Segment type: Pure code
.text:00000390 ; Segment permissions: Read/Execute
.text:00000390 _text           segment para public 'CODE' use32
.text:00000390                 assume cs:_text
.text:00000390                 ;org 390h
.text:00000390 ; COMDAT (pick any)
.text:00000390                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000390
.text:00000390 ; =============== S U B R O U T I N E =======================================
.text:00000390
.text:00000390 ; Attributes: bp-based frame
.text:00000390
.text:00000390 ; __int32 __stdcall CSha256Hasher::QueryInterface(CSha256Hasher *this, const struct _GUID *Buf1, void **)
.text:00000390                 public ?QueryInterface@CSha256Hasher@@UAGJABU_GUID@@PAPAX@Z
.text:00000390 ?QueryInterface@CSha256Hasher@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000390                                         ; DATA XREF: .rdata:const CSha256Hasher::`vftable'o
.text:00000390
.text:00000390 this            = dword ptr  8
.text:00000390 Buf1            = dword ptr  0Ch
.text:00000390 arg_8           = dword ptr  10h
.text:00000390
.text:00000390                 push    ebp
.text:00000391                 mov     ebp, esp
.text:00000393                 mov     eax, [ebp+arg_8]
.text:00000396                 mov     dword ptr [eax], 0
.text:0000039C                 push    offset _IID_IUnknown ; Buf2
.text:000003A1                 mov     ecx, [ebp+Buf1]
.text:000003A4                 push    ecx             ; Buf1
.text:000003A5                 call    ___@8           ; __(x,x)
.text:000003AA                 test    eax, eax
.text:000003AC                 jz      short loc_3B8
.text:000003AE                 mov     edx, [ebp+arg_8]
.text:000003B1                 mov     eax, [ebp+this]
.text:000003B4                 mov     [edx], eax
.text:000003B6                 jmp     short loc_3BF
.text:000003B8 ; ---------------------------------------------------------------------------
.text:000003B8
.text:000003B8 loc_3B8:                                ; CODE XREF: CSha256Hasher::QueryInterface(_GUID const &,void * *)+1Cj
.text:000003B8                 mov     eax, 80004002h
.text:000003BD                 jmp     short loc_3D0
.text:000003BF ; ---------------------------------------------------------------------------
.text:000003BF
.text:000003BF loc_3BF:                                ; CODE XREF: CSha256Hasher::QueryInterface(_GUID const &,void * *)+26j
.text:000003BF                 mov     ecx, [ebp+this]
.text:000003C2                 mov     edx, [ecx+4]
.text:000003C5                 add     edx, 1
.text:000003C8                 mov     eax, [ebp+this]
.text:000003CB                 mov     [eax+4], edx
.text:000003CE                 xor     eax, eax
.text:000003D0
.text:000003D0 loc_3D0:                                ; CODE XREF: CSha256Hasher::QueryInterface(_GUID const &,void * *)+2Dj
.text:000003D0                 cmp     ebp, esp
.text:000003D2                 call    __RTC_CheckEsp
.text:000003D7                 pop     ebp
.text:000003D8                 retn    0Ch
.text:000003D8 ?QueryInterface@CSha256Hasher@@UAGJABU_GUID@@PAPAX@Z endp
.text:000003D8
.text:000003D8 ; ---------------------------------------------------------------------------
.text:000003DB                 align 4
.text:000003DB _text           ends
.text:000003DB
.text:000003DC ; ===========================================================================
.text:000003DC
.text:000003DC ; Segment type: Pure code
.text:000003DC ; Segment permissions: Read/Execute
.text:000003DC _text           segment para public 'CODE' use32
.text:000003DC                 assume cs:_text
.text:000003DC                 ;org 3DCh
.text:000003DC ; COMDAT (pick any)
.text:000003DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000003DC
.text:000003DC ; =============== S U B R O U T I N E =======================================
.text:000003DC
.text:000003DC ; Attributes: bp-based frame
.text:000003DC
.text:000003DC ; unsigned __int32 __stdcall CSha256Hasher::AddRef(CSha256Hasher *this)
.text:000003DC                 public ?AddRef@CSha256Hasher@@UAGKXZ
.text:000003DC ?AddRef@CSha256Hasher@@UAGKXZ proc near ; DATA XREF: .rdata:000001E0o
.text:000003DC
.text:000003DC var_4           = dword ptr -4
.text:000003DC this            = dword ptr  8
.text:000003DC
.text:000003DC                 push    ebp
.text:000003DD                 mov     ebp, esp
.text:000003DF                 push    ecx
.text:000003E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003E7                 mov     eax, [ebp+this]
.text:000003EA                 mov     ecx, [eax+4]
.text:000003ED                 add     ecx, 1
.text:000003F0                 mov     [ebp+var_4], ecx
.text:000003F3                 mov     edx, [ebp+this]
.text:000003F6                 mov     eax, [ebp+var_4]
.text:000003F9                 mov     [edx+4], eax
.text:000003FC                 mov     eax, [ebp+var_4]
.text:000003FF                 mov     esp, ebp
.text:00000401                 pop     ebp
.text:00000402                 retn    4
.text:00000402 ?AddRef@CSha256Hasher@@UAGKXZ endp
.text:00000402
.text:00000402 ; ---------------------------------------------------------------------------
.text:00000405                 align 4
.text:00000405 _text           ends
.text:00000405
.text:00000408 ; ===========================================================================
.text:00000408
.text:00000408 ; Segment type: Pure code
.text:00000408 ; Segment permissions: Read/Execute
.text:00000408 _text           segment para public 'CODE' use32
.text:00000408                 assume cs:_text
.text:00000408                 ;org 408h
.text:00000408 ; COMDAT (pick any)
.text:00000408                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000408
.text:00000408 ; =============== S U B R O U T I N E =======================================
.text:00000408
.text:00000408 ; Attributes: bp-based frame
.text:00000408
.text:00000408 ; unsigned __int32 __stdcall CSha256Hasher::Release(CSha256Hasher *this)
.text:00000408                 public ?Release@CSha256Hasher@@UAGKXZ
.text:00000408 ?Release@CSha256Hasher@@UAGKXZ proc near ; DATA XREF: .rdata:000001E4o
.text:00000408
.text:00000408 var_8           = dword ptr -8
.text:00000408 var_4           = dword ptr -4
.text:00000408 this            = dword ptr  8
.text:00000408
.text:00000408                 push    ebp
.text:00000409                 mov     ebp, esp
.text:0000040B                 sub     esp, 8
.text:0000040E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000415                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000041C                 mov     eax, [ebp+this]
.text:0000041F                 mov     ecx, [eax+4]
.text:00000422                 sub     ecx, 1
.text:00000425                 mov     [ebp+var_8], ecx
.text:00000428                 mov     edx, [ebp+this]
.text:0000042B                 mov     eax, [ebp+var_8]
.text:0000042E                 mov     [edx+4], eax
.text:00000431                 cmp     [ebp+var_8], 0
.text:00000435                 jz      short loc_43F
.text:00000437                 mov     ecx, [ebp+this]
.text:0000043A                 mov     eax, [ecx+4]
.text:0000043D                 jmp     short loc_453
.text:0000043F ; ---------------------------------------------------------------------------
.text:0000043F
.text:0000043F loc_43F:                                ; CODE XREF: CSha256Hasher::Release(void)+2Dj
.text:0000043F                 mov     edx, [ebp+this]
.text:00000442                 mov     [ebp+var_4], edx
.text:00000445                 mov     eax, [ebp+var_4]
.text:00000448                 push    eax             ; void *
.text:00000449                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000044E                 add     esp, 4
.text:00000451                 xor     eax, eax
.text:00000453
.text:00000453 loc_453:                                ; CODE XREF: CSha256Hasher::Release(void)+35j
.text:00000453                 add     esp, 8
.text:00000456                 cmp     ebp, esp
.text:00000458                 call    __RTC_CheckEsp
.text:0000045D                 mov     esp, ebp
.text:0000045F                 pop     ebp
.text:00000460                 retn    4
.text:00000460 ?Release@CSha256Hasher@@UAGKXZ endp
.text:00000460
.text:00000460 ; ---------------------------------------------------------------------------
.text:00000463                 align 4
.text:00000463 _text           ends
.text:00000463
.text:00000464 ; ===========================================================================
.text:00000464
.text:00000464 ; Segment type: Pure code
.text:00000464 ; Segment permissions: Read/Execute
.text:00000464 _text           segment para public 'CODE' use32
.text:00000464                 assume cs:_text
.text:00000464                 ;org 464h
.text:00000464 ; COMDAT (pick any)
.text:00000464                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000464
.text:00000464 ; =============== S U B R O U T I N E =======================================
.text:00000464
.text:00000464 ; Attributes: bp-based frame
.text:00000464
.text:00000464 ; _DWORD __thiscall IHasher::IHasher(IHasher *__hidden this)
.text:00000464                 public ??0IHasher@@QAE@XZ
.text:00000464 ??0IHasher@@QAE@XZ proc near            ; CODE XREF: CSha256Hasher::CSha256Hasher(void)+11p
.text:00000464
.text:00000464 var_4           = dword ptr -4
.text:00000464
.text:00000464                 push    ebp
.text:00000465                 mov     ebp, esp
.text:00000467                 push    ecx
.text:00000468                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000046F                 mov     [ebp+var_4], ecx
.text:00000472                 mov     ecx, [ebp+var_4]
.text:00000475                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000047A                 mov     eax, [ebp+var_4]
.text:0000047D                 mov     dword ptr [eax], offset ??_7IHasher@@6B@ ; const IHasher::`vftable'
.text:00000483                 mov     eax, [ebp+var_4]
.text:00000486                 add     esp, 4
.text:00000489                 cmp     ebp, esp
.text:0000048B                 call    __RTC_CheckEsp
.text:00000490                 mov     esp, ebp
.text:00000492                 pop     ebp
.text:00000493                 retn
.text:00000493 ??0IHasher@@QAE@XZ endp
.text:00000493
.text:00000493 _text           ends
.text:00000493
.rdata:00000494 ; ===========================================================================
.rdata:00000494
.rdata:00000494 ; Segment type: Pure data
.rdata:00000494 ; Segment permissions: Read
.rdata:00000494 _rdata          segment dword public 'DATA' use32
.rdata:00000494                 assume cs:_rdata
.rdata:00000494                 ;org 494h
.rdata:00000494 ; COMDAT (pick largest)
.rdata:00000494                 dd offset ??_R4IHasher@@6B@ ; const IHasher::`RTTI Complete Object Locator'
.rdata:00000498                 public ??_7IHasher@@6B@
.rdata:00000498 ; const IHasher::`vftable'
.rdata:00000498 ??_7IHasher@@6B@ dd offset __purecall   ; DATA XREF: IHasher::IHasher(void)+19o
.rdata:0000049C                 dd offset __purecall
.rdata:000004A0                 dd offset __purecall
.rdata:000004A4                 dd offset __purecall
.rdata:000004A8                 dd offset __purecall
.rdata:000004AC                 dd offset __purecall
.rdata:000004B0                 dd offset __purecall
.rdata:000004B0 _rdata          ends
.rdata:000004B0
.rdata$r:000004B4 ; ===========================================================================
.rdata$r:000004B4
.rdata$r:000004B4 ; Segment type: Pure data
.rdata$r:000004B4 ; Segment permissions: Read
.rdata$r:000004B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004B4                 assume cs:_rdata$r
.rdata$r:000004B4                 ;org 4B4h
.rdata$r:000004B4 ; COMDAT (pick any)
.rdata$r:000004B4                 public ??_R4IHasher@@6B@
.rdata$r:000004B4 ; const IHasher::`RTTI Complete Object Locator'
.rdata$r:000004B4 ??_R4IHasher@@6B@ db    0               ; DATA XREF: .rdata:00000494o
.rdata$r:000004B5                 db    0
.rdata$r:000004B6                 db    0
.rdata$r:000004B7                 db    0
.rdata$r:000004B8                 db    0
.rdata$r:000004B9                 db    0
.rdata$r:000004BA                 db    0
.rdata$r:000004BB                 db    0
.rdata$r:000004BC                 db    0
.rdata$r:000004BD                 db    0
.rdata$r:000004BE                 db    0
.rdata$r:000004BF                 db    0
.rdata$r:000004C0                 dd offset ??_R0?AUIHasher@@@8 ; IHasher `RTTI Type Descriptor'
.rdata$r:000004C4                 dd offset ??_R3IHasher@@8 ; IHasher::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004C4 _rdata$r        ends
.rdata$r:000004C4
.text:000004C8 ; ===========================================================================
.text:000004C8
.text:000004C8 ; Segment type: Pure code
.text:000004C8 ; Segment permissions: Read/Execute
.text:000004C8 _text           segment para public 'CODE' use32
.text:000004C8                 assume cs:_text
.text:000004C8                 ;org 4C8h
.text:000004C8 ; COMDAT (pick any)
.text:000004C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000004C8
.text:000004C8 ; =============== S U B R O U T I N E =======================================
.text:000004C8
.text:000004C8 ; Attributes: bp-based frame
.text:000004C8
.text:000004C8 ; public: __thiscall IUnknown::IUnknown(void)
.text:000004C8                 public ??0IUnknown@@QAE@XZ
.text:000004C8 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: IHasher::IHasher(void)+11p
.text:000004C8
.text:000004C8 var_4           = dword ptr -4
.text:000004C8
.text:000004C8                 push    ebp
.text:000004C9                 mov     ebp, esp
.text:000004CB                 push    ecx
.text:000004CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004D3                 mov     [ebp+var_4], ecx
.text:000004D6                 mov     eax, [ebp+var_4]
.text:000004D9                 mov     esp, ebp
.text:000004DB                 pop     ebp
.text:000004DC                 retn
.text:000004DC ??0IUnknown@@QAE@XZ endp
.text:000004DC
.text:000004DC ; ---------------------------------------------------------------------------
.text:000004DD                 align 10h
.text:000004DD _text           ends
.text:000004DD
.text:000004E0 ; ===========================================================================
.text:000004E0
.text:000004E0 ; Segment type: Pure code
.text:000004E0 ; Segment permissions: Read/Execute
.text:000004E0 _text           segment para public 'CODE' use32
.text:000004E0                 assume cs:_text
.text:000004E0                 ;org 4E0h
.text:000004E0 ; COMDAT (pick any)
.text:000004E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000004E0
.text:000004E0 ; =============== S U B R O U T I N E =======================================
.text:000004E0
.text:000004E0 ; Attributes: bp-based frame
.text:000004E0
.text:000004E0 ; int __stdcall __(void *Buf1, void *Buf2)
.text:000004E0                 public ___@8
.text:000004E0 ___@8           proc near               ; CODE XREF: CSha256Hasher::QueryInterface(_GUID const &,void * *)+15p
.text:000004E0
.text:000004E0 Buf1            = dword ptr  8
.text:000004E0 Buf2            = dword ptr  0Ch
.text:000004E0
.text:000004E0                 push    ebp
.text:000004E1                 mov     ebp, esp
.text:000004E3                 mov     eax, [ebp+Buf2]
.text:000004E6                 push    eax             ; Buf2
.text:000004E7                 mov     ecx, [ebp+Buf1]
.text:000004EA                 push    ecx             ; Buf1
.text:000004EB                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:000004F0                 cmp     ebp, esp
.text:000004F2                 call    __RTC_CheckEsp
.text:000004F7                 pop     ebp
.text:000004F8                 retn    8
.text:000004F8 ___@8           endp
.text:000004F8
.text:000004F8 ; ---------------------------------------------------------------------------
.text:000004FB                 align 4
.text:000004FB _text           ends
.text:000004FB
.text:000004FC ; ===========================================================================
.text:000004FC
.text:000004FC ; Segment type: Pure code
.text:000004FC ; Segment permissions: Read/Execute
.text:000004FC _text           segment para public 'CODE' use32
.text:000004FC                 assume cs:_text
.text:000004FC                 ;org 4FCh
.text:000004FC ; COMDAT (pick any)
.text:000004FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000004FC
.text:000004FC ; =============== S U B R O U T I N E =======================================
.text:000004FC
.text:000004FC ; Attributes: bp-based frame
.text:000004FC
.text:000004FC ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:000004FC                 public _IsEqualGUID@8
.text:000004FC _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:000004FC
.text:000004FC Buf1            = dword ptr  8
.text:000004FC Buf2            = dword ptr  0Ch
.text:000004FC
.text:000004FC                 push    ebp
.text:000004FD                 mov     ebp, esp
.text:000004FF                 push    10h             ; Size
.text:00000501                 mov     eax, [ebp+Buf2]
.text:00000504                 push    eax             ; Buf2
.text:00000505                 mov     ecx, [ebp+Buf1]
.text:00000508                 push    ecx             ; Buf1
.text:00000509                 call    _memcmp
.text:0000050E                 add     esp, 0Ch
.text:00000511                 neg     eax
.text:00000513                 sbb     eax, eax
.text:00000515                 add     eax, 1
.text:00000518                 cmp     ebp, esp
.text:0000051A                 call    __RTC_CheckEsp
.text:0000051F                 pop     ebp
.text:00000520                 retn    8
.text:00000520 _IsEqualGUID@8  endp
.text:00000520
.text:00000520 ; ---------------------------------------------------------------------------
.text:00000523                 align 4
.text:00000523 _text           ends
.text:00000523
.text$yc:00000524 ; ===========================================================================
.text$yc:00000524
.text$yc:00000524 ; Segment type: Pure code
.text$yc:00000524 ; Segment permissions: Read/Execute
.text$yc:00000524 _text$yc        segment para public 'CODE' use32
.text$yc:00000524                 assume cs:_text$yc
.text$yc:00000524                 ;org 524h
.text$yc:00000524 ; COMDAT (pick any)
.text$yc:00000524                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:00000524
.text$yc:00000524 ; =============== S U B R O U T I N E =======================================
.text$yc:00000524
.text$yc:00000524 ; Attributes: bp-based frame
.text$yc:00000524
.text$yc:00000524 ; void __cdecl `dynamic initializer for 'g_RegisterHasher''(void)
.text$yc:00000524 ??__Eg_RegisterHasher@@YAXXZ proc near  ; DATA XREF: .CRT$XCU:_g_RegisterHasher$initializer$o
.text$yc:00000524                 push    ebp
.text$yc:00000525                 mov     ebp, esp
.text$yc:00000527                 mov     ecx, offset _g_RegisterHasher ; this
.text$yc:0000052C                 call    ??0CRegHasher_CSha256Hasher@@QAE@XZ ; CRegHasher_CSha256Hasher::CRegHasher_CSha256Hasher(void)
.text$yc:00000531                 cmp     ebp, esp
.text$yc:00000533                 call    __RTC_CheckEsp
.text$yc:00000538                 pop     ebp
.text$yc:00000539                 retn
.text$yc:00000539 ??__Eg_RegisterHasher@@YAXXZ endp
.text$yc:00000539
.text$yc:00000539 ; ---------------------------------------------------------------------------
.text$yc:0000053A                 align 4
.text$yc:0000053A _text$yc        ends
.text$yc:0000053A
.text:0000053C ; ===========================================================================
.text:0000053C
.text:0000053C ; Segment type: Pure code
.text:0000053C ; Segment permissions: Read/Execute
.text:0000053C _text           segment para public 'CODE' use32
.text:0000053C                 assume cs:_text
.text:0000053C                 ;org 53Ch
.text:0000053C ; COMDAT (pick any)
.text:0000053C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000053C
.text:0000053C ; =============== S U B R O U T I N E =======================================
.text:0000053C
.text:0000053C ; Attributes: bp-based frame
.text:0000053C
.text:0000053C ; _DWORD __thiscall CRegHasher_CSha256Hasher::CRegHasher_CSha256Hasher(CRegHasher_CSha256Hasher *__hidden this)
.text:0000053C                 public ??0CRegHasher_CSha256Hasher@@QAE@XZ
.text:0000053C ??0CRegHasher_CSha256Hasher@@QAE@XZ proc near
.text:0000053C                                         ; CODE XREF: `dynamic initializer for 'g_RegisterHasher''(void)+8p
.text:0000053C
.text:0000053C var_4           = dword ptr -4
.text:0000053C
.text:0000053C                 push    ebp
.text:0000053D                 mov     ebp, esp
.text:0000053F                 push    ecx
.text:00000540                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000547                 mov     [ebp+var_4], ecx
.text:0000054A                 push    offset _g_HasherInfo ; struct CHasherInfo *
.text:0000054F                 call    ?RegisterHasher@@YGXPBUCHasherInfo@@@Z ; RegisterHasher(CHasherInfo const *)
.text:00000554                 mov     eax, [ebp+var_4]
.text:00000557                 add     esp, 4
.text:0000055A                 cmp     ebp, esp
.text:0000055C                 call    __RTC_CheckEsp
.text:00000561                 mov     esp, ebp
.text:00000563                 pop     ebp
.text:00000564                 retn
.text:00000564 ??0CRegHasher_CSha256Hasher@@QAE@XZ endp
.text:00000564
.text:00000564 ; ---------------------------------------------------------------------------
.text:00000565                 align 4
.text:00000565 _text           ends
.text:00000565
.bss:00000568 ; ===========================================================================
.bss:00000568
.bss:00000568 ; Segment type: Uninitialized
.bss:00000568 ; Segment permissions: Read/Write
.bss:00000568 _bss            segment byte public 'BSS' use32
.bss:00000568                 assume cs:_bss
.bss:00000568                 ;org 568h
.bss:00000568                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00000568 ; CRegHasher_CSha256Hasher g_RegisterHasher
.bss:00000568 _g_RegisterHasher db    ? ;             ; DATA XREF: `dynamic initializer for 'g_RegisterHasher''(void)+3o
.bss:00000569                 align 4
.bss:00000569 _bss            ends
.bss:00000569
.CRT$XCU:0000056C ; ===========================================================================
.CRT$XCU:0000056C
.CRT$XCU:0000056C ; Segment type: Pure data
.CRT$XCU:0000056C ; Segment permissions: Read
.CRT$XCU:0000056C _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000056C                 assume cs:_CRT$XCU
.CRT$XCU:0000056C                 ;org 56Ch
.CRT$XCU:0000056C _g_RegisterHasher$initializer$ dd offset ??__Eg_RegisterHasher@@YAXXZ ; `dynamic initializer for 'g_RegisterHasher''(void)
.CRT$XCU:0000056C _CRT$XCU        ends
.CRT$XCU:0000056C
UNDEF:00000570 ; ===========================================================================
UNDEF:00000570
UNDEF:00000570 ; Segment type: Externs
UNDEF:00000570 ; UNDEF
UNDEF:00000570 ; __stdcall Sha256_Init(x)
UNDEF:00000570                 extrn _Sha256_Init@4:near
UNDEF:00000570                                         ; CODE XREF: CSha256Hasher::Init(void)+Ap
UNDEF:00000570                                         ; CSha256Hasher::CSha256Hasher(void)+31p
UNDEF:00000574                 extrn __RTC_CheckEsp:near
UNDEF:00000574                                         ; CODE XREF: CSha256Hasher::Init(void)+11p
UNDEF:00000574                                         ; CSha256Hasher::Update(void const *,uint)+19p ...
UNDEF:00000578                 extrn __RTC_Shutdown:near
UNDEF:00000578                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000057C                 extrn __RTC_InitBase:near
UNDEF:0000057C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000580 ; __stdcall Sha256_Update(x, x, x)
UNDEF:00000580                 extrn _Sha256_Update@12:near
UNDEF:00000580                                         ; CODE XREF: CSha256Hasher::Update(void const *,uint)+12p
UNDEF:00000584 ; __stdcall Sha256_Final(x, x)
UNDEF:00000584                 extrn _Sha256_Final@8:near
UNDEF:00000584                                         ; CODE XREF: CSha256Hasher::Final(uchar *)+Ep
UNDEF:00000588 ; void __cdecl operator delete(void *)
UNDEF:00000588                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?CreateHasherSpec@@YGPAUIHasher@@XZ$0+4p
UNDEF:00000588                                         ; CSha256Hasher::Release(void)+41p
UNDEF:0000058C ; void *__cdecl operator new(unsigned int)
UNDEF:0000058C                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CreateHasherSpec(void)+3Fp
UNDEF:00000590                 extrn ___security_cookie:near
UNDEF:00000590                                         ; DATA XREF: CreateHasherSpec(void)+29r
UNDEF:00000594                 extrn ___CxxFrameHandler3:near
UNDEF:00000594                                         ; CODE XREF: __ehhandler$?CreateHasherSpec@@YGPAUIHasher@@XZ+16j
UNDEF:00000598 ; __fastcall __security_check_cookie(x)
UNDEF:00000598                 extrn @__security_check_cookie@4:near
UNDEF:00000598                                         ; CODE XREF: __ehhandler$?CreateHasherSpec@@YGPAUIHasher@@XZ+Cp
UNDEF:0000059C ; const type_info::`vftable'
UNDEF:0000059C                 extrn ??_7type_info@@6B@:near
UNDEF:0000059C                                         ; DATA XREF: .data:CSha256Hasher `RTTI Type Descriptor'o
UNDEF:0000059C                                         ; .data:IHasher `RTTI Type Descriptor'o ...
UNDEF:000005A0 ; const IID IID_IUnknown
UNDEF:000005A0                 extrn _IID_IUnknown:near
UNDEF:000005A0                                         ; DATA XREF: CSha256Hasher::QueryInterface(_GUID const &,void * *)+Co
UNDEF:000005A4                 extrn __purecall:near   ; DATA XREF: .rdata:const IHasher::`vftable'o
UNDEF:000005A4                                         ; .rdata:0000049Co ...
UNDEF:000005A8 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:000005A8                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:000005AC ; void __stdcall RegisterHasher(const struct CHasherInfo *)
UNDEF:000005AC                 extrn ?RegisterHasher@@YGXPBUCHasherInfo@@@Z:near
UNDEF:000005AC                                         ; CODE XREF: CRegHasher_CSha256Hasher::CRegHasher_CSha256Hasher(void)+13p
UNDEF:000005AC
UNDEF:000005AC
UNDEF:000005AC                 end