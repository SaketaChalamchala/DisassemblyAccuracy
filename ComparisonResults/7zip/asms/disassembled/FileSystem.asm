.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 033A2E0215EB6EB5D6E45CF729915BAD
.rdata:00000000 ; Input CRC32 : BE1E48F6
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\FileSystem.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG67245        db 'GetDiskFreeSpaceExA',0
.rdata:00000000                                         ; DATA XREF: NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+51o
.rdata:00000014 ; CHAR _SG67246[]
.rdata:00000014 $SG67246        db 'kernel32.dll',0     ; DATA XREF: NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+58o
.rdata:00000021                 align 4
.rdata:00000024 ; CHAR _SG67258[]
.rdata:00000024 $SG67258        db 'GetDiskFreeSpaceExW',0
.rdata:00000024                                         ; DATA XREF: NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+195o
.rdata:00000038 ; CHAR _SG67259[]
.rdata:00000038 $SG67259        db 'kernel32.dll',0     ; DATA XREF: NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+19Co
.rdata:00000045                 align 4
.rdata:00000045 _rdata          ends
.rdata:00000045
.text:00000048 ; ===========================================================================
.text:00000048
.text:00000048 ; Segment type: Pure code
.text:00000048 ; Segment permissions: Read/Execute
.text:00000048 _text           segment para public 'CODE' use32
.text:00000048                 assume cs:_text
.text:00000048                 ;org 48h
.text:00000048                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000048
.text:00000048 ; =============== S U B R O U T I N E =======================================
.text:00000048
.text:00000048 ; Attributes: bp-based frame
.text:00000048
.text:00000048 ; bool __stdcall NWindows::NFile::NSystem::MyGetVolumeInformation(LPCWSTR lpRootPathName, const wchar_t *, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, unsigned __int32 *, struct UString *)
.text:00000048                 public ?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z
.text:00000048 ?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z proc near
.text:00000048
.text:00000048 var_6B0         = dword ptr -6B0h
.text:00000048 var_6AC         = dword ptr -6ACh
.text:00000048 var_6A8         = dword ptr -6A8h
.text:00000048 var_6A4         = dword ptr -6A4h
.text:00000048 var_6A0         = dword ptr -6A0h
.text:00000048 var_69C         = dword ptr -69Ch
.text:00000048 var_698         = byte ptr -698h
.text:00000048 var_68C         = byte ptr -68Ch
.text:00000048 var_680         = byte ptr -680h
.text:00000048 var_674         = byte ptr -674h
.text:00000048 var_668         = byte ptr -668h
.text:00000048 var_658         = word ptr -658h
.text:00000048 var_444         = word ptr -444h
.text:00000048 FileSystemNameBuffer= byte ptr -230h
.text:00000048 VolumeNameBuffer= byte ptr -120h
.text:00000048 var_14          = dword ptr -14h
.text:00000048 var_10          = dword ptr -10h
.text:00000048 var_C           = dword ptr -0Ch
.text:00000048 var_4           = dword ptr -4
.text:00000048 lpRootPathName  = dword ptr  8
.text:00000048 arg_4           = dword ptr  0Ch
.text:00000048 lpVolumeSerialNumber= dword ptr  10h
.text:00000048 lpMaximumComponentLength= dword ptr  14h
.text:00000048 lpFileSystemFlags= dword ptr  18h
.text:00000048 arg_14          = dword ptr  1Ch
.text:00000048
.text:00000048                 push    ebp
.text:00000049                 mov     ebp, esp
.text:0000004B                 push    0FFFFFFFFh
.text:0000004D                 push    offset __ehhandler$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z
.text:00000052                 mov     eax, large fs:0
.text:00000058                 push    eax
.text:00000059                 sub     esp, 6A4h
.text:0000005F                 push    esi
.text:00000060                 push    edi
.text:00000061                 lea     edi, [ebp+var_6B0]
.text:00000067                 mov     ecx, 1A9h
.text:0000006C                 mov     eax, 0CCCCCCCCh
.text:00000071                 rep stosd
.text:00000073                 mov     eax, dword ptr ds:___security_cookie
.text:00000078                 xor     eax, ebp
.text:0000007A                 mov     [ebp+var_10], eax
.text:0000007D                 push    eax
.text:0000007E                 lea     eax, [ebp+var_C]
.text:00000081                 mov     large fs:0, eax
.text:00000087                 movzx   eax, byte ptr ds:?g_IsNT@@3_NA ; bool g_IsNT
.text:0000008E                 test    eax, eax
.text:00000090                 jnz     loc_20B
.text:00000096                 mov     [ebp+VolumeNameBuffer], 0
.text:0000009D                 mov     [ebp+FileSystemNameBuffer], 0
.text:000000A4                 mov     esi, esp
.text:000000A6                 push    104h            ; nFileSystemNameSize
.text:000000AB                 lea     ecx, [ebp+FileSystemNameBuffer]
.text:000000B1                 push    ecx             ; lpFileSystemNameBuffer
.text:000000B2                 mov     edx, [ebp+lpFileSystemFlags]
.text:000000B5                 push    edx             ; nFileSystemNameSize
.text:000000B6                 mov     eax, [ebp+lpMaximumComponentLength]
.text:000000B9                 push    eax             ; lpFileSystemNameBuffer
.text:000000BA                 mov     ecx, [ebp+lpVolumeSerialNumber]
.text:000000BD                 push    ecx             ; lpFileSystemFlags
.text:000000BE                 push    (offset loc_FF+5) ; lpMaximumComponentLength
.text:000000C3                 lea     edx, [ebp+VolumeNameBuffer]
.text:000000C9                 push    edx             ; lpVolumeSerialNumber
.text:000000CA                 mov     eax, [ebp+lpRootPathName]
.text:000000CD                 push    eax             ; nVolumeNameSize
.text:000000CE                 lea     ecx, [ebp+var_668]
.text:000000D4                 push    ecx             ; lpVolumeNameBuffer
.text:000000D5                 call    ?fs2fas@@YG?AVAString@@PB_W@Z ; fs2fas(wchar_t const *)
.text:000000DA                 mov     [ebp+var_69C], eax
.text:000000E0                 mov     edx, [ebp+var_69C]
.text:000000E6                 mov     [ebp+var_6A0], edx
.text:000000EC                 mov     [ebp+var_4], 0
.text:000000F3                 mov     ecx, [ebp+var_6A0]
.text:000000F9                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000000FE                 push    eax             ; lpRootPathName
.text:000000FF
.text:000000FF loc_FF:                                 ; DATA XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+76o
.text:000000FF                 call    dword ptr ds:__imp__GetVolumeInformationA@32 ; GetVolumeInformationA(x,x,x,x,x,x,x,x)
.text:00000105                 cmp     esi, esp
.text:00000107                 call    __RTC_CheckEsp
.text:0000010C                 mov     [ebp+var_14], eax
.text:0000010F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000116                 lea     ecx, [ebp+var_668] ; this
.text:0000011C                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000121                 lea     eax, [ebp+VolumeNameBuffer]
.text:00000127                 push    eax             ; char *
.text:00000128                 lea     ecx, [ebp+var_674] ; this
.text:0000012E                 call    ??0AString@@QAE@PBD@Z ; AString::AString(char const *)
.text:00000133                 mov     [ebp+var_4], 1
.text:0000013A                 push    0
.text:0000013C                 lea     ecx, [ebp+var_674]
.text:00000142                 push    ecx
.text:00000143                 lea     edx, [ebp+var_680]
.text:00000149                 push    edx
.text:0000014A                 call    ?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z ; MultiByteToUnicodeString(AString const &,uint)
.text:0000014F                 mov     [ebp+var_6A4], eax
.text:00000155                 mov     eax, [ebp+var_6A4]
.text:0000015B                 mov     [ebp+var_6A8], eax
.text:00000161                 mov     byte ptr [ebp+var_4], 2
.text:00000165                 mov     ecx, [ebp+var_6A8]
.text:0000016B                 push    ecx
.text:0000016C                 mov     ecx, [ebp+arg_4]
.text:0000016F                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00000174                 mov     byte ptr [ebp+var_4], 1
.text:00000178                 lea     ecx, [ebp+var_680] ; this
.text:0000017E                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000183                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000018A                 lea     ecx, [ebp+var_674] ; this
.text:00000190                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000195                 lea     edx, [ebp+FileSystemNameBuffer]
.text:0000019B                 push    edx             ; char *
.text:0000019C                 lea     ecx, [ebp+var_68C] ; this
.text:000001A2                 call    ??0AString@@QAE@PBD@Z ; AString::AString(char const *)
.text:000001A7                 mov     [ebp+var_4], 3
.text:000001AE                 push    0
.text:000001B0                 lea     eax, [ebp+var_68C]
.text:000001B6                 push    eax
.text:000001B7                 lea     ecx, [ebp+var_698]
.text:000001BD                 push    ecx
.text:000001BE                 call    ?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z ; MultiByteToUnicodeString(AString const &,uint)
.text:000001C3                 mov     [ebp+var_6AC], eax
.text:000001C9                 mov     edx, [ebp+var_6AC]
.text:000001CF                 mov     [ebp+var_6B0], edx
.text:000001D5                 mov     byte ptr [ebp+var_4], 4
.text:000001D9                 mov     eax, [ebp+var_6B0]
.text:000001DF                 push    eax
.text:000001E0                 mov     ecx, [ebp+arg_14]
.text:000001E3                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:000001E8                 mov     byte ptr [ebp+var_4], 3
.text:000001EC                 lea     ecx, [ebp+var_698] ; this
.text:000001F2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000001F7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000001FE                 lea     ecx, [ebp+var_68C] ; this
.text:00000204                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000209                 jmp     short loc_275
.text:0000020B ; ---------------------------------------------------------------------------
.text:0000020B
.text:0000020B loc_20B:                                ; CODE XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+48j
.text:0000020B                 xor     ecx, ecx
.text:0000020D                 mov     [ebp+var_444], cx
.text:00000214                 xor     edx, edx
.text:00000216                 mov     [ebp+var_658], dx
.text:0000021D                 mov     esi, esp
.text:0000021F                 push    104h            ; nFileSystemNameSize
.text:00000224                 lea     eax, [ebp+var_658]
.text:0000022A                 push    eax             ; lpFileSystemNameBuffer
.text:0000022B                 mov     ecx, [ebp+lpFileSystemFlags]
.text:0000022E                 push    ecx             ; lpFileSystemFlags
.text:0000022F                 mov     edx, [ebp+lpMaximumComponentLength]
.text:00000232                 push    edx             ; lpMaximumComponentLength
.text:00000233                 mov     eax, [ebp+lpVolumeSerialNumber]
.text:00000236                 push    eax             ; lpVolumeSerialNumber
.text:00000237                 push    104h            ; nVolumeNameSize
.text:0000023C                 lea     ecx, [ebp+var_444]
.text:00000242                 push    ecx             ; lpVolumeNameBuffer
.text:00000243                 mov     edx, [ebp+lpRootPathName]
.text:00000246                 push    edx             ; lpRootPathName
.text:00000247                 call    dword ptr ds:__imp__GetVolumeInformationW@32 ; GetVolumeInformationW(x,x,x,x,x,x,x,x)
.text:0000024D                 cmp     esi, esp
.text:0000024F                 call    __RTC_CheckEsp
.text:00000254                 mov     [ebp+var_14], eax
.text:00000257                 lea     eax, [ebp+var_444]
.text:0000025D                 push    eax
.text:0000025E                 mov     ecx, [ebp+arg_4]
.text:00000261                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00000266                 lea     ecx, [ebp+var_658]
.text:0000026C                 push    ecx
.text:0000026D                 mov     ecx, [ebp+arg_14]
.text:00000270                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00000275
.text:00000275 loc_275:                                ; CODE XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+1C1j
.text:00000275                 mov     edx, [ebp+var_14]
.text:00000278                 push    edx             ; int
.text:00000279                 call    ?BOOLToBool@@YG_NH@Z ; BOOLToBool(int)
.text:0000027E                 push    edx
.text:0000027F                 mov     ecx, ebp
.text:00000281                 push    eax
.text:00000282                 lea     edx, $LN16
.text:00000288                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000028D                 pop     eax
.text:0000028E                 pop     edx
.text:0000028F                 mov     ecx, [ebp+var_C]
.text:00000292                 mov     large fs:0, ecx
.text:00000299                 pop     ecx
.text:0000029A                 pop     edi
.text:0000029B                 pop     esi
.text:0000029C                 mov     ecx, [ebp+var_10]
.text:0000029F                 xor     ecx, ebp
.text:000002A1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000002A6                 add     esp, 6B0h
.text:000002AC                 cmp     ebp, esp
.text:000002AE                 call    __RTC_CheckEsp
.text:000002B3                 mov     esp, ebp
.text:000002B5                 pop     ebp
.text:000002B6                 retn    18h
.text:000002B6 ?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z endp
.text:000002B6
.text:000002B6 ; ---------------------------------------------------------------------------
.text:000002B9                 align 4
.text:000002BC $LN16           dd 4                    ; DATA XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+23Ao
.text:000002C0                 dd offset $LN15
.text:000002C4 $LN15           dd 0FFFFFEE0h, 106h     ; DATA XREF: .text:000002C0o
.text:000002CC                 dd offset $LN10
.text:000002D0                 dd 0FFFFFDD0h, 106h
.text:000002D8                 dd offset $LN11
.text:000002DC                 dd 0FFFFFBBCh, 20Ch
.text:000002E4                 dd offset $LN12
.text:000002E8                 dd 0FFFFF9A8h, 20Ch
.text:000002F0                 dd offset $LN13
.text:000002F4 $LN13           db  66h ; f             ; DATA XREF: .text:000002F0o
.text:000002F5                 align 2
.text:000002F6 $LN12           dw 76h                  ; DATA XREF: .text:000002E4o
.text:000002F8 $LN11           db 66h, 0               ; DATA XREF: .text:000002D8o
.text:000002FA $LN10           dw 76h                  ; DATA XREF: .text:000002CCo
.text:000002FC                 db 0Ch dup(0CCh)
.text:00000308
.text:00000308 ; =============== S U B R O U T I N E =======================================
.text:00000308
.text:00000308 ; Attributes: bp-based frame
.text:00000308
.text:00000308 ; unsigned int __stdcall NWindows::NFile::NSystem::MyGetDriveType(LPCWSTR lpRootPathName, const wchar_t *)
.text:00000308                 public ?MyGetDriveType@NSystem@NFile@NWindows@@YGIPB_W@Z
.text:00000308 ?MyGetDriveType@NSystem@NFile@NWindows@@YGIPB_W@Z proc near
.text:00000308
.text:00000308 var_24          = dword ptr -24h
.text:00000308 var_20          = dword ptr -20h
.text:00000308 var_1C          = dword ptr -1Ch
.text:00000308 var_18          = dword ptr -18h
.text:00000308 var_14          = dword ptr -14h
.text:00000308 var_10          = dword ptr -10h
.text:00000308 var_C           = dword ptr -0Ch
.text:00000308 var_4           = dword ptr -4
.text:00000308 lpRootPathName  = dword ptr  8
.text:00000308
.text:00000308                 push    ebp
.text:00000309                 mov     ebp, esp
.text:0000030B                 push    0FFFFFFFFh
.text:0000030D                 push    offset __ehhandler$?MyGetDriveType@NSystem@NFile@NWindows@@YGIPB_W@Z
.text:00000312                 mov     eax, large fs:0
.text:00000318                 push    eax
.text:00000319                 sub     esp, 18h
.text:0000031C                 push    esi
.text:0000031D                 mov     eax, 0CCCCCCCCh
.text:00000322                 mov     [ebp+var_24], eax
.text:00000325                 mov     [ebp+var_20], eax
.text:00000328                 mov     [ebp+var_1C], eax
.text:0000032B                 mov     [ebp+var_18], eax
.text:0000032E                 mov     [ebp+var_14], eax
.text:00000331                 mov     [ebp+var_10], eax
.text:00000334                 mov     eax, dword ptr ds:___security_cookie
.text:00000339                 xor     eax, ebp
.text:0000033B                 push    eax
.text:0000033C                 lea     eax, [ebp+var_C]
.text:0000033F                 mov     large fs:0, eax
.text:00000345                 movzx   eax, byte ptr ds:?g_IsNT@@3_NA ; bool g_IsNT
.text:0000034C                 test    eax, eax
.text:0000034E                 jnz     short loc_39E
.text:00000350                 mov     ecx, [ebp+lpRootPathName]
.text:00000353                 push    ecx
.text:00000354                 lea     edx, [ebp+var_1C]
.text:00000357                 push    edx
.text:00000358                 call    ?fs2fas@@YG?AVAString@@PB_W@Z ; fs2fas(wchar_t const *)
.text:0000035D                 mov     [ebp+var_20], eax
.text:00000360                 mov     eax, [ebp+var_20]
.text:00000363                 mov     [ebp+var_24], eax
.text:00000366                 mov     [ebp+var_4], 0
.text:0000036D                 mov     ecx, [ebp+var_24]
.text:00000370                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000375                 mov     esi, esp
.text:00000377                 push    eax             ; lpRootPathName
.text:00000378                 call    dword ptr ds:__imp__GetDriveTypeA@4 ; GetDriveTypeA(x)
.text:0000037E                 cmp     esi, esp
.text:00000380                 call    __RTC_CheckEsp
.text:00000385                 mov     [ebp+var_10], eax
.text:00000388                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000038F                 lea     ecx, [ebp+var_1C] ; this
.text:00000392                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000397                 mov     eax, [ebp+var_10]
.text:0000039A                 jmp     short loc_3B1
.text:0000039C ; ---------------------------------------------------------------------------
.text:0000039C                 jmp     short loc_3B1
.text:0000039E ; ---------------------------------------------------------------------------
.text:0000039E
.text:0000039E loc_39E:                                ; CODE XREF: NWindows::NFile::NSystem::MyGetDriveType(wchar_t const *)+46j
.text:0000039E                 mov     esi, esp
.text:000003A0                 mov     ecx, [ebp+lpRootPathName]
.text:000003A3                 push    ecx             ; lpRootPathName
.text:000003A4                 call    dword ptr ds:__imp__GetDriveTypeW@4 ; GetDriveTypeW(x)
.text:000003AA                 cmp     esi, esp
.text:000003AC                 call    __RTC_CheckEsp
.text:000003B1
.text:000003B1 loc_3B1:                                ; CODE XREF: NWindows::NFile::NSystem::MyGetDriveType(wchar_t const *)+92j
.text:000003B1                                         ; NWindows::NFile::NSystem::MyGetDriveType(wchar_t const *)+94j
.text:000003B1                 mov     ecx, [ebp+var_C]
.text:000003B4                 mov     large fs:0, ecx
.text:000003BB                 pop     ecx
.text:000003BC                 pop     esi
.text:000003BD                 add     esp, 24h
.text:000003C0                 cmp     ebp, esp
.text:000003C2                 call    __RTC_CheckEsp
.text:000003C7                 mov     esp, ebp
.text:000003C9                 pop     ebp
.text:000003CA                 retn    4
.text:000003CA ?MyGetDriveType@NSystem@NFile@NWindows@@YGIPB_W@Z endp
.text:000003CA
.text:000003CA ; ---------------------------------------------------------------------------
.text:000003CD                 db 0Bh dup(0CCh)
.text:000003D8
.text:000003D8 ; =============== S U B R O U T I N E =======================================
.text:000003D8
.text:000003D8 ; Attributes: bp-based frame
.text:000003D8
.text:000003D8 ; bool __stdcall NWindows::NFile::NSystem::MyGetDiskFreeSpace(LPDWORD lpSectorsPerCluster, const wchar_t *, unsigned __int64 *, unsigned __int64 *, unsigned __int64 *)
.text:000003D8                 public ?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z
.text:000003D8 ?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z proc near
.text:000003D8
.text:000003D8 var_D4          = dword ptr -0D4h
.text:000003D8 var_D0          = dword ptr -0D0h
.text:000003D8 var_CC          = dword ptr -0CCh
.text:000003D8 var_C8          = dword ptr -0C8h
.text:000003D8 SectorsPerCluster= dword ptr -0C4h
.text:000003D8 var_B5          = byte ptr -0B5h
.text:000003D8 var_B4          = byte ptr -0B4h
.text:000003D8 var_A4          = dword ptr -0A4h
.text:000003D8 var_A0          = dword ptr -0A0h
.text:000003D8 var_94          = dword ptr -94h
.text:000003D8 var_90          = dword ptr -90h
.text:000003D8 var_84          = byte ptr -84h
.text:000003D8 var_78          = dword ptr -78h
.text:000003D8 var_70          = dword ptr -70h
.text:000003D8 var_6C          = dword ptr -6Ch
.text:000003D8 var_60          = dword ptr -60h
.text:000003D8 var_5C          = dword ptr -5Ch
.text:000003D8 var_50          = byte ptr -50h
.text:000003D8 var_44          = dword ptr -44h
.text:000003D8 var_3D          = byte ptr -3Dh
.text:000003D8 var_38          = dword ptr -38h
.text:000003D8 TotalNumberOfClusters= dword ptr -2Ch
.text:000003D8 NumberOfFreeClusters= dword ptr -20h
.text:000003D8 BytesPerSector  = dword ptr -14h
.text:000003D8 var_C           = dword ptr -0Ch
.text:000003D8 var_4           = dword ptr -4
.text:000003D8 lpSectorsPerCluster= dword ptr  8
.text:000003D8 arg_4           = dword ptr  0Ch
.text:000003D8 arg_8           = dword ptr  10h
.text:000003D8 arg_C           = dword ptr  14h
.text:000003D8
.text:000003D8                 push    ebp
.text:000003D9                 mov     ebp, esp
.text:000003DB                 push    0FFFFFFFFh
.text:000003DD                 push    offset __ehhandler$?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z
.text:000003E2                 mov     eax, large fs:0
.text:000003E8                 push    eax
.text:000003E9                 sub     esp, 0C8h
.text:000003EF                 push    esi
.text:000003F0                 push    edi
.text:000003F1                 lea     edi, [ebp+var_D4]
.text:000003F7                 mov     ecx, 32h ; '2'
.text:000003FC                 mov     eax, 0CCCCCCCCh
.text:00000401                 rep stosd
.text:00000403                 mov     eax, dword ptr ds:___security_cookie
.text:00000408                 xor     eax, ebp
.text:0000040A                 push    eax             ; lpProcName
.text:0000040B                 lea     eax, [ebp+var_C]
.text:0000040E                 mov     large fs:0, eax
.text:00000414                 mov     [ebp+var_3D], 0
.text:00000418                 movzx   eax, byte ptr ds:?g_IsNT@@3_NA ; bool g_IsNT
.text:0000041F                 test    eax, eax
.text:00000421                 jnz     loc_56B
.text:00000427                 mov     esi, esp
.text:00000429                 push    offset $SG67245 ; "GetDiskFreeSpaceExA"
.text:0000042E                 mov     edi, esp
.text:00000430                 push    offset $SG67246 ; "kernel32.dll"
.text:00000435                 call    dword ptr ds:__imp__GetModuleHandleA@4 ; GetModuleHandleA(x)
.text:0000043B                 cmp     edi, esp
.text:0000043D                 call    __RTC_CheckEsp
.text:00000442                 push    eax             ; hModule
.text:00000443                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00000449                 cmp     esi, esp
.text:0000044B                 call    __RTC_CheckEsp
.text:00000450                 mov     [ebp+var_44], eax
.text:00000453                 cmp     [ebp+var_44], 0
.text:00000457                 jz      loc_4E1
.text:0000045D                 mov     esi, esp
.text:0000045F                 lea     ecx, [ebp+var_70]
.text:00000462                 push    ecx
.text:00000463                 lea     edx, [ebp+var_60]
.text:00000466                 push    edx
.text:00000467                 lea     eax, [ebp+var_50]
.text:0000046A                 push    eax
.text:0000046B                 mov     ecx, [ebp+lpSectorsPerCluster]
.text:0000046E                 push    ecx
.text:0000046F                 lea     edx, [ebp+var_B4]
.text:00000475                 push    edx
.text:00000476                 call    ?fs2fas@@YG?AVAString@@PB_W@Z ; fs2fas(wchar_t const *)
.text:0000047B                 mov     [ebp+var_C8], eax
.text:00000481                 mov     eax, [ebp+var_C8]
.text:00000487                 mov     [ebp+var_CC], eax
.text:0000048D                 mov     [ebp+var_4], 0
.text:00000494                 mov     ecx, [ebp+var_CC]
.text:0000049A                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:0000049F                 push    eax
.text:000004A0                 call    [ebp+var_44]
.text:000004A3                 cmp     esi, esp
.text:000004A5                 call    __RTC_CheckEsp
.text:000004AA                 push    eax             ; int
.text:000004AB                 call    ?BOOLToBool@@YG_NH@Z ; BOOLToBool(int)
.text:000004B0                 mov     [ebp+var_3D], al
.text:000004B3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000004BA                 lea     ecx, [ebp+var_B4] ; this
.text:000004C0                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000004C5                 mov     ecx, [ebp+arg_8]
.text:000004C8                 mov     edx, [ebp+var_60]
.text:000004CB                 mov     [ecx], edx
.text:000004CD                 mov     eax, [ebp+var_5C]
.text:000004D0                 mov     [ecx+4], eax
.text:000004D3                 mov     ecx, [ebp+arg_C]
.text:000004D6                 mov     edx, [ebp+var_70]
.text:000004D9                 mov     [ecx], edx
.text:000004DB                 mov     eax, [ebp+var_6C]
.text:000004DE                 mov     [ecx+4], eax
.text:000004E1
.text:000004E1 loc_4E1:                                ; CODE XREF: NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+7Fj
.text:000004E1                 mov     esi, esp
.text:000004E3                 lea     ecx, [ebp+var_38]
.text:000004E6                 push    ecx
.text:000004E7                 lea     edx, [ebp+TotalNumberOfClusters]
.text:000004EA                 push    edx             ; lpTotalNumberOfClusters
.text:000004EB                 lea     eax, [ebp+NumberOfFreeClusters]
.text:000004EE                 push    eax             ; lpTotalNumberOfClusters
.text:000004EF                 lea     ecx, [ebp+BytesPerSector]
.text:000004F2                 push    ecx             ; lpNumberOfFreeClusters
.text:000004F3                 mov     edx, [ebp+lpSectorsPerCluster]
.text:000004F6                 push    edx             ; lpBytesPerSector
.text:000004F7                 lea     eax, [ebp+SectorsPerCluster]
.text:000004FD                 push    eax             ; lpSectorsPerCluster
.text:000004FE                 call    ?fs2fas@@YG?AVAString@@PB_W@Z ; fs2fas(wchar_t const *)
.text:00000503                 mov     [ebp+var_D0], eax
.text:00000509                 mov     ecx, [ebp+var_D0]
.text:0000050F                 mov     [ebp+var_D4], ecx
.text:00000515                 mov     [ebp+var_4], 1
.text:0000051C                 mov     ecx, [ebp+var_D4]
.text:00000522                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000527                 push    eax             ; lpRootPathName
.text:00000528                 call    dword ptr ds:__imp__GetDiskFreeSpaceA@20 ; GetDiskFreeSpaceA(x,x,x,x,x)
.text:0000052E                 cmp     esi, esp
.text:00000530                 call    __RTC_CheckEsp
.text:00000535                 neg     eax
.text:00000537                 sbb     eax, eax
.text:00000539                 add     eax, 1
.text:0000053C                 mov     [ebp+var_B5], al
.text:00000542                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000549                 lea     ecx, [ebp+SectorsPerCluster] ; this
.text:0000054F                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000554                 movzx   edx, [ebp+var_B5]
.text:0000055B                 test    edx, edx
.text:0000055D                 jz      short loc_566
.text:0000055F                 xor     al, al
.text:00000561                 jmp     loc_674
.text:00000566 ; ---------------------------------------------------------------------------
.text:00000566
.text:00000566 loc_566:                                ; CODE XREF: NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+185j
.text:00000566                 jmp     loc_61E
.text:0000056B ; ---------------------------------------------------------------------------
.text:0000056B
.text:0000056B loc_56B:                                ; CODE XREF: NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+49j
.text:0000056B                 mov     esi, esp
.text:0000056D                 push    offset $SG67258 ; "GetDiskFreeSpaceExW"
.text:00000572                 mov     edi, esp
.text:00000574                 push    offset $SG67259 ; "kernel32.dll"
.text:00000579                 call    dword ptr ds:__imp__GetModuleHandleA@4 ; GetModuleHandleA(x)
.text:0000057F                 cmp     edi, esp
.text:00000581                 call    __RTC_CheckEsp
.text:00000586                 push    eax             ; hModule
.text:00000587                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:0000058D                 cmp     esi, esp
.text:0000058F                 call    __RTC_CheckEsp
.text:00000594                 mov     [ebp+var_78], eax
.text:00000597                 cmp     [ebp+var_78], 0
.text:0000059B                 jz      short loc_5F3
.text:0000059D                 mov     esi, esp
.text:0000059F                 lea     eax, [ebp+var_A4]
.text:000005A5                 push    eax
.text:000005A6                 lea     ecx, [ebp+var_94]
.text:000005AC                 push    ecx
.text:000005AD                 lea     edx, [ebp+var_84]
.text:000005B3                 push    edx
.text:000005B4                 mov     eax, [ebp+lpSectorsPerCluster]
.text:000005B7                 push    eax
.text:000005B8                 call    [ebp+var_78]
.text:000005BB                 cmp     esi, esp
.text:000005BD                 call    __RTC_CheckEsp
.text:000005C2                 push    eax             ; int
.text:000005C3                 call    ?BOOLToBool@@YG_NH@Z ; BOOLToBool(int)
.text:000005C8                 mov     [ebp+var_3D], al
.text:000005CB                 mov     ecx, [ebp+arg_8]
.text:000005CE                 mov     edx, [ebp+var_94]
.text:000005D4                 mov     [ecx], edx
.text:000005D6                 mov     eax, [ebp+var_90]
.text:000005DC                 mov     [ecx+4], eax
.text:000005DF                 mov     ecx, [ebp+arg_C]
.text:000005E2                 mov     edx, [ebp+var_A4]
.text:000005E8                 mov     [ecx], edx
.text:000005EA                 mov     eax, [ebp+var_A0]
.text:000005F0                 mov     [ecx+4], eax
.text:000005F3
.text:000005F3 loc_5F3:                                ; CODE XREF: NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+1C3j
.text:000005F3                 mov     esi, esp
.text:000005F5                 lea     ecx, [ebp+var_38]
.text:000005F8                 push    ecx             ; lpTotalNumberOfClusters
.text:000005F9                 lea     edx, [ebp+TotalNumberOfClusters]
.text:000005FC                 push    edx             ; lpNumberOfFreeClusters
.text:000005FD                 lea     eax, [ebp+NumberOfFreeClusters]
.text:00000600                 push    eax             ; lpBytesPerSector
.text:00000601                 lea     ecx, [ebp+BytesPerSector]
.text:00000604                 push    ecx             ; lpSectorsPerCluster
.text:00000605                 mov     edx, [ebp+lpSectorsPerCluster]
.text:00000608                 push    edx             ; lpRootPathName
.text:00000609                 call    dword ptr ds:__imp__GetDiskFreeSpaceW@20 ; GetDiskFreeSpaceW(x,x,x,x,x)
.text:0000060F                 cmp     esi, esp
.text:00000611                 call    __RTC_CheckEsp
.text:00000616                 test    eax, eax
.text:00000618                 jnz     short loc_61E
.text:0000061A                 xor     al, al
.text:0000061C                 jmp     short loc_674
.text:0000061E ; ---------------------------------------------------------------------------
.text:0000061E
.text:0000061E loc_61E:                                ; CODE XREF: NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &):loc_566j
.text:0000061E                                         ; NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+240j
.text:0000061E                 mov     eax, [ebp+NumberOfFreeClusters]
.text:00000621                 mov     ecx, [ebp+BytesPerSector]
.text:00000624                 mul     ecx
.text:00000626                 mov     ecx, [ebp+arg_4]
.text:00000629                 mov     [ecx], eax
.text:0000062B                 mov     [ecx+4], edx
.text:0000062E                 movzx   edx, [ebp+var_3D]
.text:00000632                 test    edx, edx
.text:00000634                 jnz     short loc_672
.text:00000636                 mov     eax, [ebp+var_38]
.text:00000639                 xor     ecx, ecx
.text:0000063B                 mov     edx, [ebp+arg_4]
.text:0000063E                 push    ecx
.text:0000063F                 push    eax
.text:00000640                 mov     eax, [edx+4]
.text:00000643                 push    eax
.text:00000644                 mov     ecx, [edx]
.text:00000646                 push    ecx
.text:00000647                 call    __allmul
.text:0000064C                 mov     ecx, [ebp+arg_8]
.text:0000064F                 mov     [ecx], eax
.text:00000651                 mov     [ecx+4], edx
.text:00000654                 mov     edx, [ebp+TotalNumberOfClusters]
.text:00000657                 xor     eax, eax
.text:00000659                 mov     ecx, [ebp+arg_4]
.text:0000065C                 push    eax
.text:0000065D                 push    edx
.text:0000065E                 mov     edx, [ecx+4]
.text:00000661                 push    edx
.text:00000662                 mov     eax, [ecx]
.text:00000664                 push    eax
.text:00000665                 call    __allmul
.text:0000066A                 mov     ecx, [ebp+arg_C]
.text:0000066D                 mov     [ecx], eax
.text:0000066F                 mov     [ecx+4], edx
.text:00000672
.text:00000672 loc_672:                                ; CODE XREF: NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+25Cj
.text:00000672                 mov     al, 1
.text:00000674
.text:00000674 loc_674:                                ; CODE XREF: NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+189j
.text:00000674                                         ; NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+244j
.text:00000674                 push    edx
.text:00000675                 mov     ecx, ebp
.text:00000677                 push    eax
.text:00000678                 lea     edx, $LN24
.text:0000067E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000683                 pop     eax
.text:00000684                 pop     edx
.text:00000685                 mov     ecx, [ebp+var_C]
.text:00000688                 mov     large fs:0, ecx
.text:0000068F                 pop     ecx
.text:00000690                 pop     edi
.text:00000691                 pop     esi
.text:00000692                 add     esp, 0D4h
.text:00000698                 cmp     ebp, esp
.text:0000069A                 call    __RTC_CheckEsp
.text:0000069F                 mov     esp, ebp
.text:000006A1                 pop     ebp
.text:000006A2                 retn    10h
.text:000006A2 ?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z endp
.text:000006A2
.text:000006A2 ; ---------------------------------------------------------------------------
.text:000006A5                 align 4
.text:000006A8 $LN24           dd 0Ah                  ; DATA XREF: NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+2A0o
.text:000006AC                 dd offset $LN23
.text:000006B0 $LN23           dd 0FFFFFFECh, 4        ; DATA XREF: .text:000006ACo
.text:000006B8                 dd offset $LN12_0       ; "numSectorsPerCluster"
.text:000006BC                 dd 0FFFFFFE0h, 4
.text:000006C4                 dd offset $LN13_0       ; "bytesPerSector"
.text:000006C8                 dd 0FFFFFFD4h, 4
.text:000006D0                 dd offset $LN14         ; "numFreeClusters"
.text:000006D4                 dd 0FFFFFFC8h, 4
.text:000006DC                 dd offset $LN15_0       ; "numClusters"
.text:000006E0                 dd 0FFFFFFB0h, 8
.text:000006E8                 dd offset $LN16_0       ; "freeBytesToCaller2"
.text:000006EC                 dd 0FFFFFFA0h, 8
.text:000006F4                 dd offset $LN17         ; "totalSize2"
.text:000006F8                 db 90h
.text:000006F9                 db 3 dup(0FFh)
.text:000006FC                 dd 8
.text:00000700                 dd offset $LN18         ; "freeSize2"
.text:00000704                 dd 0FFFFFF7Ch, 8
.text:0000070C                 dd offset $LN19         ; "freeBytesToCaller2"
.text:00000710                 dd 0FFFFFF6Ch, 8
.text:00000718                 dd offset $LN20         ; "totalSize2"
.text:0000071C                 dd 0FFFFFF5Ch, 8
.text:00000724                 dd offset $LN21         ; "freeSize2"
.text:00000728 $LN21           db 'freeSize2',0        ; DATA XREF: .text:00000724o
.text:00000732 $LN20           db 'totalSize2',0       ; DATA XREF: .text:00000718o
.text:0000073D $LN19           db 'freeBytesToCaller2',0 ; DATA XREF: .text:0000070Co
.text:00000750 $LN18           db 'freeSize2',0        ; DATA XREF: .text:00000700o
.text:0000075A $LN17           db 'totalSize2',0       ; DATA XREF: .text:000006F4o
.text:00000765 $LN16_0         db 'freeBytesToCaller2',0 ; DATA XREF: .text:000006E8o
.text:00000778 $LN15_0         db 'numClusters',0      ; DATA XREF: .text:000006DCo
.text:00000784 $LN14           db 'numFreeClusters',0  ; DATA XREF: .text:000006D0o
.text:00000794 $LN13_0         db 'bytesPerSector',0   ; DATA XREF: .text:000006C4o
.text:000007A3 $LN12_0         db 'numSectorsPerCluster',0 ; DATA XREF: .text:000006B8o
.text:000007A3 _text           ends
.text:000007A3
.text$x:000007B8 ; ===========================================================================
.text$x:000007B8
.text$x:000007B8 ; Segment type: Pure code
.text$x:000007B8 ; Segment permissions: Read/Execute
.text$x:000007B8 _text$x         segment para public 'CODE' use32
.text$x:000007B8                 assume cs:_text$x
.text$x:000007B8                 ;org 7B8h
.text$x:000007B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000007B8
.text$x:000007B8 ; =============== S U B R O U T I N E =======================================
.text$x:000007B8
.text$x:000007B8
.text$x:000007B8 __unwindfunclet$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z$0 proc near
.text$x:000007B8                                         ; DATA XREF: .xdata$x:00000898o
.text$x:000007B8                 lea     ecx, [ebp-668h] ; this
.text$x:000007BE                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000007BE __unwindfunclet$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z$0 endp
.text$x:000007BE
.text$x:000007C3
.text$x:000007C3 ; =============== S U B R O U T I N E =======================================
.text$x:000007C3
.text$x:000007C3
.text$x:000007C3 __unwindfunclet$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z$1 proc near
.text$x:000007C3                                         ; DATA XREF: .xdata$x:000008A0o
.text$x:000007C3                 lea     ecx, [ebp-674h] ; this
.text$x:000007C9                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000007C9 __unwindfunclet$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z$1 endp
.text$x:000007C9
.text$x:000007CE
.text$x:000007CE ; =============== S U B R O U T I N E =======================================
.text$x:000007CE
.text$x:000007CE
.text$x:000007CE __unwindfunclet$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z$2 proc near
.text$x:000007CE                                         ; DATA XREF: .xdata$x:000008A8o
.text$x:000007CE                 lea     ecx, [ebp-680h] ; this
.text$x:000007D4                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000007D4 __unwindfunclet$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z$2 endp
.text$x:000007D4
.text$x:000007D9
.text$x:000007D9 ; =============== S U B R O U T I N E =======================================
.text$x:000007D9
.text$x:000007D9
.text$x:000007D9 __unwindfunclet$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z$3 proc near
.text$x:000007D9                                         ; DATA XREF: .xdata$x:000008B0o
.text$x:000007D9                 lea     ecx, [ebp-68Ch] ; this
.text$x:000007DF                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000007DF __unwindfunclet$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z$3 endp
.text$x:000007DF
.text$x:000007E4
.text$x:000007E4 ; =============== S U B R O U T I N E =======================================
.text$x:000007E4
.text$x:000007E4
.text$x:000007E4 __unwindfunclet$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z$4 proc near
.text$x:000007E4                                         ; DATA XREF: .xdata$x:000008B8o
.text$x:000007E4                 lea     ecx, [ebp-698h] ; this
.text$x:000007EA                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000007EA __unwindfunclet$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z$4 endp
.text$x:000007EA
.text$x:000007EF
.text$x:000007EF ; =============== S U B R O U T I N E =======================================
.text$x:000007EF
.text$x:000007EF
.text$x:000007EF __ehhandler$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z proc near
.text$x:000007EF                                         ; DATA XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+5o
.text$x:000007EF
.text$x:000007EF arg_4           = dword ptr  8
.text$x:000007EF
.text$x:000007EF                 mov     edx, [esp+arg_4]
.text$x:000007F3                 lea     eax, [edx+0Ch]
.text$x:000007F6                 mov     ecx, [edx-6B0h]
.text$x:000007FC                 xor     ecx, eax
.text$x:000007FE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000803                 mov     ecx, [edx-4]
.text$x:00000806                 xor     ecx, eax
.text$x:00000808                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000080D                 mov     eax, offset __ehfuncinfo$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z
.text$x:00000812                 jmp     ___CxxFrameHandler3
.text$x:00000812 __ehhandler$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z endp
.text$x:00000812
.text$x:00000817
.text$x:00000817 ; =============== S U B R O U T I N E =======================================
.text$x:00000817
.text$x:00000817
.text$x:00000817 __unwindfunclet$?MyGetDriveType@NSystem@NFile@NWindows@@YGIPB_W@Z$0 proc near
.text$x:00000817                                         ; DATA XREF: .xdata$x:000008C0o
.text$x:00000817                 lea     ecx, [ebp-1Ch]  ; this
.text$x:0000081A                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000081A __unwindfunclet$?MyGetDriveType@NSystem@NFile@NWindows@@YGIPB_W@Z$0 endp
.text$x:0000081A
.text$x:0000081F
.text$x:0000081F ; =============== S U B R O U T I N E =======================================
.text$x:0000081F
.text$x:0000081F
.text$x:0000081F __ehhandler$?MyGetDriveType@NSystem@NFile@NWindows@@YGIPB_W@Z proc near
.text$x:0000081F                                         ; DATA XREF: NWindows::NFile::NSystem::MyGetDriveType(wchar_t const *)+5o
.text$x:0000081F
.text$x:0000081F arg_4           = dword ptr  8
.text$x:0000081F
.text$x:0000081F                 mov     edx, [esp+arg_4]
.text$x:00000823                 lea     eax, [edx+0Ch]
.text$x:00000826                 mov     ecx, [edx-20h]
.text$x:00000829                 xor     ecx, eax
.text$x:0000082B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000830                 mov     eax, offset __ehfuncinfo$?MyGetDriveType@NSystem@NFile@NWindows@@YGIPB_W@Z
.text$x:00000835                 jmp     ___CxxFrameHandler3
.text$x:00000835 __ehhandler$?MyGetDriveType@NSystem@NFile@NWindows@@YGIPB_W@Z endp
.text$x:00000835
.text$x:0000083A
.text$x:0000083A ; =============== S U B R O U T I N E =======================================
.text$x:0000083A
.text$x:0000083A
.text$x:0000083A __unwindfunclet$?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z$0 proc near
.text$x:0000083A                                         ; DATA XREF: .xdata$x:000008ECo
.text$x:0000083A                 lea     ecx, [ebp-0B4h] ; this
.text$x:00000840                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00000840 __unwindfunclet$?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z$0 endp
.text$x:00000840
.text$x:00000845
.text$x:00000845 ; =============== S U B R O U T I N E =======================================
.text$x:00000845
.text$x:00000845
.text$x:00000845 __unwindfunclet$?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z$1 proc near
.text$x:00000845                                         ; DATA XREF: .xdata$x:000008F4o
.text$x:00000845                 lea     ecx, [ebp-0C4h] ; this
.text$x:0000084B                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000084B __unwindfunclet$?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z$1 endp
.text$x:0000084B
.text$x:00000850
.text$x:00000850 ; =============== S U B R O U T I N E =======================================
.text$x:00000850
.text$x:00000850
.text$x:00000850 __ehhandler$?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z proc near
.text$x:00000850                                         ; DATA XREF: NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+5o
.text$x:00000850
.text$x:00000850 arg_4           = dword ptr  8
.text$x:00000850
.text$x:00000850                 mov     edx, [esp+arg_4]
.text$x:00000854                 lea     eax, [edx+0Ch]
.text$x:00000857                 mov     ecx, [edx-0D4h]
.text$x:0000085D                 xor     ecx, eax
.text$x:0000085F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000864                 mov     eax, offset __ehfuncinfo$?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z
.text$x:00000869                 jmp     ___CxxFrameHandler3
.text$x:00000869 __ehhandler$?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z endp
.text$x:00000869
.text$x:00000869 ; ---------------------------------------------------------------------------
.text$x:0000086E                 align 10h
.text$x:0000086E _text$x         ends
.text$x:0000086E
.xdata$x:00000870 ; ===========================================================================
.xdata$x:00000870
.xdata$x:00000870 ; Segment type: Pure data
.xdata$x:00000870 ; Segment permissions: Read
.xdata$x:00000870 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000870                 assume cs:_xdata$x
.xdata$x:00000870                 ;org 870h
.xdata$x:00000870 __ehfuncinfo$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z db  22h ; "
.xdata$x:00000870                                         ; DATA XREF: __ehhandler$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z+1Eo
.xdata$x:00000871                 db    5
.xdata$x:00000872                 db  93h ; ô
.xdata$x:00000873                 db  19h
.xdata$x:00000874                 db    5
.xdata$x:00000875                 db    0
.xdata$x:00000876                 db    0
.xdata$x:00000877                 db    0
.xdata$x:00000878                 dd offset __unwindtable$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z
.xdata$x:0000087C                 db    0
.xdata$x:0000087D                 db    0
.xdata$x:0000087E                 db    0
.xdata$x:0000087F                 db    0
.xdata$x:00000880                 db    0
.xdata$x:00000881                 db    0
.xdata$x:00000882                 db    0
.xdata$x:00000883                 db    0
.xdata$x:00000884                 db    0
.xdata$x:00000885                 db    0
.xdata$x:00000886                 db    0
.xdata$x:00000887                 db    0
.xdata$x:00000888                 db    0
.xdata$x:00000889                 db    0
.xdata$x:0000088A                 db    0
.xdata$x:0000088B                 db    0
.xdata$x:0000088C                 db    0
.xdata$x:0000088D                 db    0
.xdata$x:0000088E                 db    0
.xdata$x:0000088F                 db    0
.xdata$x:00000890                 db    1
.xdata$x:00000891                 db    0
.xdata$x:00000892                 db    0
.xdata$x:00000893                 db    0
.xdata$x:00000894 __unwindtable$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z db 0FFh
.xdata$x:00000894                                         ; DATA XREF: .xdata$x:00000878o
.xdata$x:00000895                 db 0FFh
.xdata$x:00000896                 db 0FFh
.xdata$x:00000897                 db 0FFh
.xdata$x:00000898                 dd offset __unwindfunclet$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z$0
.xdata$x:0000089C                 db 0FFh
.xdata$x:0000089D                 db 0FFh
.xdata$x:0000089E                 db 0FFh
.xdata$x:0000089F                 db 0FFh
.xdata$x:000008A0                 dd offset __unwindfunclet$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z$1
.xdata$x:000008A4                 db    1
.xdata$x:000008A5                 db    0
.xdata$x:000008A6                 db    0
.xdata$x:000008A7                 db    0
.xdata$x:000008A8                 dd offset __unwindfunclet$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z$2
.xdata$x:000008AC                 db 0FFh
.xdata$x:000008AD                 db 0FFh
.xdata$x:000008AE                 db 0FFh
.xdata$x:000008AF                 db 0FFh
.xdata$x:000008B0                 dd offset __unwindfunclet$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z$3
.xdata$x:000008B4                 db    3
.xdata$x:000008B5                 db    0
.xdata$x:000008B6                 db    0
.xdata$x:000008B7                 db    0
.xdata$x:000008B8                 dd offset __unwindfunclet$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z$4
.xdata$x:000008BC __unwindtable$?MyGetDriveType@NSystem@NFile@NWindows@@YGIPB_W@Z db 0FFh
.xdata$x:000008BC                                         ; DATA XREF: .xdata$x:000008CCo
.xdata$x:000008BD                 db 0FFh
.xdata$x:000008BE                 db 0FFh
.xdata$x:000008BF                 db 0FFh
.xdata$x:000008C0                 dd offset __unwindfunclet$?MyGetDriveType@NSystem@NFile@NWindows@@YGIPB_W@Z$0
.xdata$x:000008C4 __ehfuncinfo$?MyGetDriveType@NSystem@NFile@NWindows@@YGIPB_W@Z db  22h ; "
.xdata$x:000008C4                                         ; DATA XREF: __ehhandler$?MyGetDriveType@NSystem@NFile@NWindows@@YGIPB_W@Z+11o
.xdata$x:000008C5                 db    5
.xdata$x:000008C6                 db  93h ; ô
.xdata$x:000008C7                 db  19h
.xdata$x:000008C8                 db    1
.xdata$x:000008C9                 db    0
.xdata$x:000008CA                 db    0
.xdata$x:000008CB                 db    0
.xdata$x:000008CC                 dd offset __unwindtable$?MyGetDriveType@NSystem@NFile@NWindows@@YGIPB_W@Z
.xdata$x:000008D0                 db    0
.xdata$x:000008D1                 db    0
.xdata$x:000008D2                 db    0
.xdata$x:000008D3                 db    0
.xdata$x:000008D4                 db    0
.xdata$x:000008D5                 db    0
.xdata$x:000008D6                 db    0
.xdata$x:000008D7                 db    0
.xdata$x:000008D8                 db    0
.xdata$x:000008D9                 db    0
.xdata$x:000008DA                 db    0
.xdata$x:000008DB                 db    0
.xdata$x:000008DC                 db    0
.xdata$x:000008DD                 db    0
.xdata$x:000008DE                 db    0
.xdata$x:000008DF                 db    0
.xdata$x:000008E0                 db    0
.xdata$x:000008E1                 db    0
.xdata$x:000008E2                 db    0
.xdata$x:000008E3                 db    0
.xdata$x:000008E4                 db    1
.xdata$x:000008E5                 db    0
.xdata$x:000008E6                 db    0
.xdata$x:000008E7                 db    0
.xdata$x:000008E8 __unwindtable$?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z db 0FFh
.xdata$x:000008E8                                         ; DATA XREF: .xdata$x:00000900o
.xdata$x:000008E9                 db 0FFh
.xdata$x:000008EA                 db 0FFh
.xdata$x:000008EB                 db 0FFh
.xdata$x:000008EC                 dd offset __unwindfunclet$?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z$0
.xdata$x:000008F0                 db 0FFh
.xdata$x:000008F1                 db 0FFh
.xdata$x:000008F2                 db 0FFh
.xdata$x:000008F3                 db 0FFh
.xdata$x:000008F4                 dd offset __unwindfunclet$?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z$1
.xdata$x:000008F8 __ehfuncinfo$?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z db  22h ; "
.xdata$x:000008F8                                         ; DATA XREF: __ehhandler$?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z+14o
.xdata$x:000008F9                 db    5
.xdata$x:000008FA                 db  93h ; ô
.xdata$x:000008FB                 db  19h
.xdata$x:000008FC                 db    2
.xdata$x:000008FD                 db    0
.xdata$x:000008FE                 db    0
.xdata$x:000008FF                 db    0
.xdata$x:00000900                 dd offset __unwindtable$?MyGetDiskFreeSpace@NSystem@NFile@NWindows@@YG_NPB_WAA_K11@Z
.xdata$x:00000904                 db    0
.xdata$x:00000905                 db    0
.xdata$x:00000906                 db    0
.xdata$x:00000907                 db    0
.xdata$x:00000908                 db    0
.xdata$x:00000909                 db    0
.xdata$x:0000090A                 db    0
.xdata$x:0000090B                 db    0
.xdata$x:0000090C                 db    0
.xdata$x:0000090D                 db    0
.xdata$x:0000090E                 db    0
.xdata$x:0000090F                 db    0
.xdata$x:00000910                 db    0
.xdata$x:00000911                 db    0
.xdata$x:00000912                 db    0
.xdata$x:00000913                 db    0
.xdata$x:00000914                 db    0
.xdata$x:00000915                 db    0
.xdata$x:00000916                 db    0
.xdata$x:00000917                 db    0
.xdata$x:00000918                 db    1
.xdata$x:00000919                 db    0
.xdata$x:0000091A                 db    0
.xdata$x:0000091B                 db    0
.xdata$x:0000091B _xdata$x        ends
.xdata$x:0000091B
.rtc$TMZ:0000091C ; ===========================================================================
.rtc$TMZ:0000091C
.rtc$TMZ:0000091C ; Segment type: Pure data
.rtc$TMZ:0000091C ; Segment permissions: Read
.rtc$TMZ:0000091C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000091C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000091C                 ;org 91Ch
.rtc$TMZ:0000091C ; COMDAT (pick any)
.rtc$TMZ:0000091C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000091C _rtc$TMZ        ends
.rtc$TMZ:0000091C
.rtc$IMZ:00000920 ; ===========================================================================
.rtc$IMZ:00000920
.rtc$IMZ:00000920 ; Segment type: Pure data
.rtc$IMZ:00000920 ; Segment permissions: Read
.rtc$IMZ:00000920 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000920                 assume cs:_rtc$IMZ
.rtc$IMZ:00000920                 ;org 920h
.rtc$IMZ:00000920 ; COMDAT (pick any)
.rtc$IMZ:00000920 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000920 _rtc$IMZ        ends
.rtc$IMZ:00000920
.text:00000924 ; ===========================================================================
.text:00000924
.text:00000924 ; Segment type: Pure code
.text:00000924 ; Segment permissions: Read/Execute
.text:00000924 _text           segment para public 'CODE' use32
.text:00000924                 assume cs:_text
.text:00000924                 ;org 924h
.text:00000924 ; COMDAT (pick any)
.text:00000924                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000924
.text:00000924 ; =============== S U B R O U T I N E =======================================
.text:00000924
.text:00000924 ; Attributes: bp-based frame
.text:00000924
.text:00000924 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00000924                 public ??1AString@@QAE@XZ
.text:00000924 ??1AString@@QAE@XZ proc near            ; CODE XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+D4p
.text:00000924                                         ; NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+148p ...
.text:00000924
.text:00000924 var_8           = dword ptr -8
.text:00000924 var_4           = dword ptr -4
.text:00000924
.text:00000924                 push    ebp
.text:00000925                 mov     ebp, esp
.text:00000927                 sub     esp, 8
.text:0000092A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000931                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000938                 mov     [ebp+var_4], ecx
.text:0000093B                 mov     eax, [ebp+var_4]
.text:0000093E                 mov     ecx, [eax]
.text:00000940                 mov     [ebp+var_8], ecx
.text:00000943                 mov     edx, [ebp+var_8]
.text:00000946                 push    edx             ; void *
.text:00000947                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000094C                 add     esp, 4
.text:0000094F                 add     esp, 8
.text:00000952                 cmp     ebp, esp
.text:00000954                 call    __RTC_CheckEsp
.text:00000959                 mov     esp, ebp
.text:0000095B                 pop     ebp
.text:0000095C                 retn
.text:0000095C ??1AString@@QAE@XZ endp
.text:0000095C
.text:0000095C ; ---------------------------------------------------------------------------
.text:0000095D                 align 10h
.text:0000095D _text           ends
.text:0000095D
.text:00000960 ; ===========================================================================
.text:00000960
.text:00000960 ; Segment type: Pure code
.text:00000960 ; Segment permissions: Read/Execute
.text:00000960 _text           segment para public 'CODE' use32
.text:00000960                 assume cs:_text
.text:00000960                 ;org 960h
.text:00000960 ; COMDAT (pick any)
.text:00000960                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000960
.text:00000960 ; =============== S U B R O U T I N E =======================================
.text:00000960
.text:00000960 ; Attributes: bp-based frame
.text:00000960
.text:00000960 ; public: __thiscall AString::operator char const *(void)const
.text:00000960                 public ??BAString@@QBEPBDXZ
.text:00000960 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+B1p
.text:00000960                                         ; NWindows::NFile::NSystem::MyGetDriveType(wchar_t const *)+68p ...
.text:00000960
.text:00000960 var_4           = dword ptr -4
.text:00000960
.text:00000960                 push    ebp
.text:00000961                 mov     ebp, esp
.text:00000963                 push    ecx
.text:00000964                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000096B                 mov     [ebp+var_4], ecx
.text:0000096E                 mov     eax, [ebp+var_4]
.text:00000971                 mov     eax, [eax]
.text:00000973                 mov     esp, ebp
.text:00000975                 pop     ebp
.text:00000976                 retn
.text:00000976 ??BAString@@QBEPBDXZ endp
.text:00000976
.text:00000976 ; ---------------------------------------------------------------------------
.text:00000977                 align 4
.text:00000977 _text           ends
.text:00000977
.text:00000978 ; ===========================================================================
.text:00000978
.text:00000978 ; Segment type: Pure code
.text:00000978 ; Segment permissions: Read/Execute
.text:00000978 _text           segment para public 'CODE' use32
.text:00000978                 assume cs:_text
.text:00000978                 ;org 978h
.text:00000978 ; COMDAT (pick any)
.text:00000978                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000978
.text:00000978 ; =============== S U B R O U T I N E =======================================
.text:00000978
.text:00000978 ; Attributes: bp-based frame
.text:00000978
.text:00000978 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00000978                 public ??1UString@@QAE@XZ
.text:00000978 ??1UString@@QAE@XZ proc near            ; CODE XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+136p
.text:00000978                                         ; NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+1AAp ...
.text:00000978
.text:00000978 var_8           = dword ptr -8
.text:00000978 var_4           = dword ptr -4
.text:00000978
.text:00000978                 push    ebp
.text:00000979                 mov     ebp, esp
.text:0000097B                 sub     esp, 8
.text:0000097E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000985                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000098C                 mov     [ebp+var_4], ecx
.text:0000098F                 mov     eax, [ebp+var_4]
.text:00000992                 mov     ecx, [eax]
.text:00000994                 mov     [ebp+var_8], ecx
.text:00000997                 mov     edx, [ebp+var_8]
.text:0000099A                 push    edx             ; void *
.text:0000099B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000009A0                 add     esp, 4
.text:000009A3                 add     esp, 8
.text:000009A6                 cmp     ebp, esp
.text:000009A8                 call    __RTC_CheckEsp
.text:000009AD                 mov     esp, ebp
.text:000009AF                 pop     ebp
.text:000009B0                 retn
.text:000009B0 ??1UString@@QAE@XZ endp
.text:000009B0
.text:000009B0 ; ---------------------------------------------------------------------------
.text:000009B1                 align 4
.text:000009B1 _text           ends
.text:000009B1
.text:000009B4 ; ===========================================================================
.text:000009B4
.text:000009B4 ; Segment type: Pure code
.text:000009B4 ; Segment permissions: Read/Execute
.text:000009B4 _text           segment para public 'CODE' use32
.text:000009B4                 assume cs:_text
.text:000009B4                 ;org 9B4h
.text:000009B4 ; COMDAT (pick any)
.text:000009B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000009B4
.text:000009B4 ; =============== S U B R O U T I N E =======================================
.text:000009B4
.text:000009B4 ; Attributes: bp-based frame
.text:000009B4
.text:000009B4 ; bool __stdcall BOOLToBool(int)
.text:000009B4                 public ?BOOLToBool@@YG_NH@Z
.text:000009B4 ?BOOLToBool@@YG_NH@Z proc near          ; CODE XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+231p
.text:000009B4                                         ; NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+D3p ...
.text:000009B4
.text:000009B4 arg_0           = dword ptr  8
.text:000009B4
.text:000009B4                 push    ebp
.text:000009B5                 mov     ebp, esp
.text:000009B7                 xor     eax, eax
.text:000009B9                 cmp     [ebp+arg_0], 0
.text:000009BD                 setnz   al
.text:000009C0                 pop     ebp
.text:000009C1                 retn    4
.text:000009C1 ?BOOLToBool@@YG_NH@Z endp
.text:000009C1
.text:000009C1 _text           ends
.text:000009C1
UNDEF:000009D0 ; ===========================================================================
UNDEF:000009D0
UNDEF:000009D0 ; Segment type: Externs
UNDEF:000009D0 ; UNDEF
UNDEF:000009D0 ; public: class UString & __thiscall UString::operator=(wchar_t const *)
UNDEF:000009D0                 extrn ??4UString@@QAEAAV0@PB_W@Z:near
UNDEF:000009D0                                         ; CODE XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+219p
UNDEF:000009D0                                         ; NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+228p
UNDEF:000009D4 ; BOOL __stdcall GetVolumeInformationW(LPCWSTR lpRootPathName, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
UNDEF:000009D4                 extrn __imp__GetVolumeInformationW@32:near
UNDEF:000009D4                                         ; CODE XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+1FFp
UNDEF:000009D4                                         ; DATA XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+1FFr
UNDEF:000009D8 ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:000009D8                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:000009D8                                         ; CODE XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+127p
UNDEF:000009D8                                         ; NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+19Bp
UNDEF:000009DC ; struct UString __stdcall __high MultiByteToUnicodeString(const struct AString *, unsigned int)
UNDEF:000009DC                 extrn ?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z:near
UNDEF:000009DC                                         ; CODE XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+102p
UNDEF:000009DC                                         ; NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+176p
UNDEF:000009E0 ; _DWORD __thiscall AString::AString(AString *__hidden this, const char *)
UNDEF:000009E0                 extrn ??0AString@@QAE@PBD@Z:near
UNDEF:000009E0                                         ; CODE XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+E6p
UNDEF:000009E0                                         ; NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+15Ap
UNDEF:000009E4 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
UNDEF:000009E4                 extrn __imp__GetVolumeInformationA@32:near
UNDEF:000009E4                                         ; CODE XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &):loc_FFp
UNDEF:000009E4                                         ; DATA XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &):loc_FFr
UNDEF:000009E8 ; struct AString __stdcall __high fs2fas(const wchar_t *)
UNDEF:000009E8                 extrn ?fs2fas@@YG?AVAString@@PB_W@Z:near
UNDEF:000009E8                                         ; CODE XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+8Dp
UNDEF:000009E8                                         ; NWindows::NFile::NSystem::MyGetDriveType(wchar_t const *)+50p ...
UNDEF:000009EC ; bool g_IsNT
UNDEF:000009EC                 extrn ?g_IsNT@@3_NA:near
UNDEF:000009EC                                         ; DATA XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+3Fr
UNDEF:000009EC                                         ; NWindows::NFile::NSystem::MyGetDriveType(wchar_t const *)+3Dr ...
UNDEF:000009F0                 extrn ___security_cookie:near
UNDEF:000009F0                                         ; DATA XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+2Br
UNDEF:000009F0                                         ; NWindows::NFile::NSystem::MyGetDriveType(wchar_t const *)+2Cr ...
UNDEF:000009F4                 extrn ___CxxFrameHandler3:near
UNDEF:000009F4                                         ; CODE XREF: __ehhandler$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z+23j
UNDEF:000009F4                                         ; __ehhandler$?MyGetDriveType@NSystem@NFile@NWindows@@YGIPB_W@Z+16j ...
UNDEF:000009F8 ; __fastcall __security_check_cookie(x)
UNDEF:000009F8                 extrn @__security_check_cookie@4:near
UNDEF:000009F8                                         ; CODE XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+259p
UNDEF:000009F8                                         ; __ehhandler$?MyGetVolumeInformation@NSystem@NFile@NWindows@@YG_NPB_WAAVUString@@PAK221@Z+Fp ...
UNDEF:000009FC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000009FC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000009FC                                         ; CODE XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+240p
UNDEF:000009FC                                         ; NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+2A6p
UNDEF:00000A00                 extrn __RTC_CheckEsp:near
UNDEF:00000A00                                         ; CODE XREF: NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+BFp
UNDEF:00000A00                                         ; NWindows::NFile::NSystem::MyGetVolumeInformation(wchar_t const *,UString &,ulong *,ulong *,ulong *,UString &)+207p ...
UNDEF:00000A04                 extrn __RTC_Shutdown:near
UNDEF:00000A04                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000A08                 extrn __RTC_InitBase:near
UNDEF:00000A08                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000A0C ; void __cdecl operator delete(void *)
UNDEF:00000A0C                 extrn ??3@YAXPAX@Z:near ; CODE XREF: AString::~AString(void)+23p
UNDEF:00000A0C                                         ; UString::~UString(void)+23p
UNDEF:00000A10 ; UINT __stdcall GetDriveTypeW(LPCWSTR lpRootPathName)
UNDEF:00000A10                 extrn __imp__GetDriveTypeW@4:near
UNDEF:00000A10                                         ; CODE XREF: NWindows::NFile::NSystem::MyGetDriveType(wchar_t const *)+9Cp
UNDEF:00000A10                                         ; DATA XREF: NWindows::NFile::NSystem::MyGetDriveType(wchar_t const *)+9Cr
UNDEF:00000A14 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
UNDEF:00000A14                 extrn __imp__GetDriveTypeA@4:near
UNDEF:00000A14                                         ; CODE XREF: NWindows::NFile::NSystem::MyGetDriveType(wchar_t const *)+70p
UNDEF:00000A14                                         ; DATA XREF: NWindows::NFile::NSystem::MyGetDriveType(wchar_t const *)+70r
UNDEF:00000A18 ; BOOL __stdcall GetDiskFreeSpaceW(LPCWSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
UNDEF:00000A18                 extrn __imp__GetDiskFreeSpaceW@20:near
UNDEF:00000A18                                         ; CODE XREF: NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+231p
UNDEF:00000A18                                         ; DATA XREF: NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+231r
UNDEF:00000A1C ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
UNDEF:00000A1C                 extrn __imp__GetDiskFreeSpaceA@20:near
UNDEF:00000A1C                                         ; CODE XREF: NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+150p
UNDEF:00000A1C                                         ; DATA XREF: NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+150r
UNDEF:00000A20 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
UNDEF:00000A20                 extrn __imp__GetProcAddress@8:near
UNDEF:00000A20                                         ; CODE XREF: NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+6Bp
UNDEF:00000A20                                         ; NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+1AFp
UNDEF:00000A20                                         ; DATA XREF: ...
UNDEF:00000A24 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
UNDEF:00000A24                 extrn __imp__GetModuleHandleA@4:near
UNDEF:00000A24                                         ; CODE XREF: NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+5Dp
UNDEF:00000A24                                         ; NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+1A1p
UNDEF:00000A24                                         ; DATA XREF: ...
UNDEF:00000A28                 extrn __allmul:near     ; CODE XREF: NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+26Fp
UNDEF:00000A28                                         ; NWindows::NFile::NSystem::MyGetDiskFreeSpace(wchar_t const *,unsigned __int64 &,unsigned __int64 &,unsigned __int64 &)+28Dp
UNDEF:00000A28
UNDEF:00000A28
UNDEF:00000A28                 end