.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : C7AF694E0DE29E4FA8B8D56C31846B3E
.text:00000000 ; Input CRC32 : 0539CDCC
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\XzCrc64Opt.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000 .intel_syntax noprefix
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000                 public @XzCrc64UpdateT4@20
.text:00000000 @XzCrc64UpdateT4@20 proc near
.text:00000000
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_8           = dword ptr  10h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 10h
.text:00000006                 push    esi
.text:00000007                 mov     eax, 0CCCCCCCCh
.text:0000000C                 mov     [ebp+var_10], eax
.text:0000000F                 mov     [ebp+var_C], eax
.text:00000012                 mov     [ebp+var_8], eax
.text:00000015                 mov     [ebp+var_4], eax
.text:00000018                 mov     [ebp+var_8], edx
.text:0000001B                 mov     [ebp+var_4], ecx
.text:0000001E                 mov     eax, [ebp+var_4]
.text:00000021                 mov     [ebp+var_C], eax
.text:00000024                 jmp     short loc_38
.text:00000026 ; ---------------------------------------------------------------------------
.text:00000026
.text:00000026 loc_26:                                 ; CODE XREF: @XzCrc64UpdateT4@20+85j
.text:00000026                 mov     ecx, [ebp+var_8]
.text:00000029                 sub     ecx, 1
.text:0000002C                 mov     [ebp+var_8], ecx
.text:0000002F                 mov     edx, [ebp+var_C]
.text:00000032                 add     edx, 1
.text:00000035                 mov     [ebp+var_C], edx
.text:00000038
.text:00000038 loc_38:                                 ; CODE XREF: @XzCrc64UpdateT4@20+24j
.text:00000038                 cmp     [ebp+var_8], 0
.text:0000003C                 jbe     short loc_87
.text:0000003E                 mov     eax, [ebp+var_C]
.text:00000041                 and     eax, 3
.text:00000044                 jz      short loc_87
.text:00000046                 mov     ecx, [ebp+var_C]
.text:00000049                 movzx   eax, byte ptr [ecx]
.text:0000004C                 cdq
.text:0000004D                 xor     eax, [ebp+arg_0]
.text:00000050                 xor     edx, [ebp+arg_4]
.text:00000053                 and     eax, 0FFh
.text:00000058                 and     edx, 0
.text:0000005B                 push    0
.text:0000005D                 push    8
.text:0000005F                 push    edx
.text:00000060                 push    eax
.text:00000061                 call    __allmul
.text:00000066                 mov     esi, eax
.text:00000068                 mov     eax, [ebp+arg_0]
.text:0000006B                 mov     edx, [ebp+arg_4]
.text:0000006E                 mov     cl, 8
.text:00000070                 call    __aullshr
.text:00000075                 mov     ecx, [ebp+arg_8]
.text:00000078                 xor     eax, [ecx+esi]
.text:0000007B                 xor     edx, [ecx+esi+4]
.text:0000007F                 mov     [ebp+arg_0], eax
.text:00000082                 mov     [ebp+arg_4], edx
.text:00000085                 jmp     short loc_26
.text:00000087 ; ---------------------------------------------------------------------------
.text:00000087
.text:00000087 loc_87:                                 ; CODE XREF: @XzCrc64UpdateT4@20+3Cj
.text:00000087                                         ; @XzCrc64UpdateT4@20+44j
.text:00000087                 jmp     short loc_9B
.text:00000089 ; ---------------------------------------------------------------------------
.text:00000089
.text:00000089 loc_89:                                 ; CODE XREF: @XzCrc64UpdateT4@20+127j
.text:00000089                 mov     edx, [ebp+var_8]
.text:0000008C                 sub     edx, 4
.text:0000008F                 mov     [ebp+var_8], edx
.text:00000092                 mov     eax, [ebp+var_C]
.text:00000095                 add     eax, 4
.text:00000098                 mov     [ebp+var_C], eax
.text:0000009B
.text:0000009B loc_9B:                                 ; CODE XREF: @XzCrc64UpdateT4@20:loc_87j
.text:0000009B                 cmp     [ebp+var_8], 4
.text:0000009F                 jb      loc_12C
.text:000000A5                 mov     ecx, [ebp+arg_0]
.text:000000A8                 mov     edx, [ebp+var_C]
.text:000000AB                 xor     ecx, [edx]
.text:000000AD                 mov     [ebp+var_10], ecx
.text:000000B0                 mov     eax, [ebp+arg_0]
.text:000000B3                 mov     edx, [ebp+arg_4]
.text:000000B6                 mov     cl, 20h ; ' '
.text:000000B8                 call    __aullshr
.text:000000BD                 mov     ecx, [ebp+var_10]
.text:000000C0                 and     ecx, 0FFh
.text:000000C6                 mov     esi, [ebp+arg_8]
.text:000000C9                 xor     eax, [esi+ecx*8+1800h]
.text:000000D0                 xor     edx, [esi+ecx*8+1804h]
.text:000000D7                 mov     ecx, [ebp+var_10]
.text:000000DA                 shr     ecx, 8
.text:000000DD                 and     ecx, 0FFh
.text:000000E3                 mov     esi, [ebp+arg_8]
.text:000000E6                 xor     eax, [esi+ecx*8+1000h]
.text:000000ED                 xor     edx, [esi+ecx*8+1004h]
.text:000000F4                 mov     ecx, [ebp+var_10]
.text:000000F7                 shr     ecx, 10h
.text:000000FA                 and     ecx, 0FFh
.text:00000100                 mov     esi, [ebp+arg_8]
.text:00000103                 xor     eax, [esi+ecx*8+800h]
.text:0000010A                 xor     edx, [esi+ecx*8+804h]
.text:00000111                 mov     ecx, [ebp+var_10]
.text:00000114                 shr     ecx, 18h
.text:00000117                 mov     esi, [ebp+arg_8]
.text:0000011A                 xor     eax, [esi+ecx*8]
.text:0000011D                 xor     edx, [esi+ecx*8+4]
.text:00000121                 mov     [ebp+arg_0], eax
.text:00000124                 mov     [ebp+arg_4], edx
.text:00000127                 jmp     loc_89
.text:0000012C ; ---------------------------------------------------------------------------
.text:0000012C
.text:0000012C loc_12C:                                ; CODE XREF: @XzCrc64UpdateT4@20+9Fj
.text:0000012C                 jmp     short loc_140
.text:0000012E ; ---------------------------------------------------------------------------
.text:0000012E
.text:0000012E loc_12E:                                ; CODE XREF: @XzCrc64UpdateT4@20+185j
.text:0000012E                 mov     edx, [ebp+var_8]
.text:00000131                 sub     edx, 1
.text:00000134                 mov     [ebp+var_8], edx
.text:00000137                 mov     eax, [ebp+var_C]
.text:0000013A                 add     eax, 1
.text:0000013D                 mov     [ebp+var_C], eax
.text:00000140
.text:00000140 loc_140:                                ; CODE XREF: @XzCrc64UpdateT4@20:loc_12Cj
.text:00000140                 cmp     [ebp+var_8], 0
.text:00000144                 jbe     short loc_187
.text:00000146                 mov     ecx, [ebp+var_C]
.text:00000149                 movzx   eax, byte ptr [ecx]
.text:0000014C                 cdq
.text:0000014D                 xor     eax, [ebp+arg_0]
.text:00000150                 xor     edx, [ebp+arg_4]
.text:00000153                 and     eax, 0FFh
.text:00000158                 and     edx, 0
.text:0000015B                 push    0
.text:0000015D                 push    8
.text:0000015F                 push    edx
.text:00000160                 push    eax
.text:00000161                 call    __allmul
.text:00000166                 mov     esi, eax
.text:00000168                 mov     eax, [ebp+arg_0]
.text:0000016B                 mov     edx, [ebp+arg_4]
.text:0000016E                 mov     cl, 8
.text:00000170                 call    __aullshr
.text:00000175                 mov     ecx, [ebp+arg_8]
.text:00000178                 xor     eax, [ecx+esi]
.text:0000017B                 xor     edx, [ecx+esi+4]
.text:0000017F                 mov     [ebp+arg_0], eax
.text:00000182                 mov     [ebp+arg_4], edx
.text:00000185                 jmp     short loc_12E
.text:00000187 ; ---------------------------------------------------------------------------
.text:00000187
.text:00000187 loc_187:                                ; CODE XREF: @XzCrc64UpdateT4@20+144j
.text:00000187                 mov     eax, [ebp+arg_0]
.text:0000018A                 mov     edx, [ebp+arg_4]
.text:0000018D                 pop     esi
.text:0000018E                 add     esp, 10h
.text:00000191                 cmp     ebp, esp
.text:00000193                 call    __RTC_CheckEsp
.text:00000198                 mov     esp, ebp
.text:0000019A                 pop     ebp
.text:0000019B                 retn    0Ch
.text:0000019B @XzCrc64UpdateT4@20 endp
.text:0000019B
.text:0000019B ; ---------------------------------------------------------------------------
.text:0000019E                 align 10h
.text:0000019E _text           ends
.text:0000019E
.rtc$TMZ:000001A0 ; ===========================================================================
.rtc$TMZ:000001A0
.rtc$TMZ:000001A0 ; Segment type: Pure data
.rtc$TMZ:000001A0 ; Segment permissions: Read
.rtc$TMZ:000001A0 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000001A0                 assume cs:_rtc$TMZ
.rtc$TMZ:000001A0                 ;org 1A0h
.rtc$TMZ:000001A0 ; COMDAT (pick any)
.rtc$TMZ:000001A0 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000001A0 _rtc$TMZ        ends
.rtc$TMZ:000001A0
.rtc$IMZ:000001A4 ; ===========================================================================
.rtc$IMZ:000001A4
.rtc$IMZ:000001A4 ; Segment type: Pure data
.rtc$IMZ:000001A4 ; Segment permissions: Read
.rtc$IMZ:000001A4 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000001A4                 assume cs:_rtc$IMZ
.rtc$IMZ:000001A4                 ;org 1A4h
.rtc$IMZ:000001A4 ; COMDAT (pick any)
.rtc$IMZ:000001A4 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000001A4 _rtc$IMZ        ends
.rtc$IMZ:000001A4
UNDEF:000001B0 ; ===========================================================================
UNDEF:000001B0
UNDEF:000001B0 ; Segment type: Externs
UNDEF:000001B0 ; UNDEF
UNDEF:000001B0                 extrn __RTC_CheckEsp:near
UNDEF:000001B0                                         ; CODE XREF: @XzCrc64UpdateT4@20+193p
UNDEF:000001B4                 extrn __aullshr:near    ; CODE XREF: @XzCrc64UpdateT4@20+70p
UNDEF:000001B4                                         ; @XzCrc64UpdateT4@20+B8p ...
UNDEF:000001B8                 extrn __allmul:near     ; CODE XREF: @XzCrc64UpdateT4@20+61p
UNDEF:000001B8                                         ; @XzCrc64UpdateT4@20+161p
UNDEF:000001BC                 extrn __RTC_Shutdown:near
UNDEF:000001BC                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000001C0                 extrn __RTC_InitBase:near
UNDEF:000001C0                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000001C0
UNDEF:000001C0
UNDEF:000001C0                 end