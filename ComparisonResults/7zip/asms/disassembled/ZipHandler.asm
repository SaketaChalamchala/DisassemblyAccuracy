.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 277190DDBD0FDEDE4A4180C8271D7E6E
.rdata:00000000 ; Input CRC32 : E42A2ECC
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ZipHandler.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG73946        db  46h ; F             ; DATA XREF: .rdata:_kHostOSo
.rdata:00000001                 db  41h ; A
.rdata:00000002                 db  54h ; T
.rdata:00000003                 db    0
.rdata:00000004 $SG73947        db 'AMIGA',0            ; DATA XREF: .rdata:000000A4o
.rdata:00000004                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+696o
.rdata:0000000A                 db    0
.rdata:0000000B ; struct NArchive::NZip::CIdToNamePair
.rdata:0000000B                 db    0                 ; DATA XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+5B9o
.rdata:0000000C $SG73948        db 'VMS',0              ; DATA XREF: .rdata:000000A8o
.rdata:00000010 $SG73949        db 'Unix',0             ; DATA XREF: .rdata:000000ACo
.rdata:00000015                 align 4
.rdata:00000018 $SG73950        db 'VM/CMS',0           ; DATA XREF: .rdata:000000B0o
.rdata:0000001F                 align 10h
.rdata:00000020 $SG73951        db 'Atari',0            ; DATA XREF: .rdata:000000B4o
.rdata:00000026                 align 4
.rdata:00000028 $SG73952        db 'HPFS',0             ; DATA XREF: .rdata:000000B8o
.rdata:0000002D                 align 10h
.rdata:00000030 $SG73953        db 'Macintosh',0        ; DATA XREF: .rdata:000000BCo
.rdata:0000003A                 align 4
.rdata:0000003C $SG73954        db 'Z-System',0         ; DATA XREF: .rdata:000000C0o
.rdata:0000003C                                         ; .xdata$x:__catchsym$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$5o ...
.rdata:00000045                 align 4
.rdata:00000048 $SG73955        db 'CP/M',0             ; DATA XREF: .rdata:000000C4o
.rdata:0000004D                 align 10h
.rdata:00000050 $SG73956        db 'TOPS-20',0          ; DATA XREF: .rdata:000000C8o
.rdata:00000058 $SG73957        db 'NTFS',0             ; DATA XREF: .rdata:000000CCo
.rdata:0000005D                 db    0
.rdata:0000005E                 db    0
.rdata:0000005F                 db    0                 ; DATA XREF: .rdata:000001ECo
.rdata:00000060 $SG73958        db 'SMS/QDOS',0         ; DATA XREF: .rdata:000000D0o
.rdata:00000060                                         ; .rdata:000001F4o ...
.rdata:00000069                 align 4
.rdata:0000006C $SG73959        db 'Acorn',0            ; DATA XREF: .rdata:000000D4o
.rdata:00000072                 align 4
.rdata:00000074 $SG73960        db 'VFAT',0             ; DATA XREF: .rdata:000000D8o
.rdata:00000079                 align 4
.rdata:0000007C $SG73961        db 'MVS',0              ; DATA XREF: .rdata:000000DCo
.rdata:00000080 $SG73962        db 'BeOS',0             ; DATA XREF: .rdata:000000E0o
.rdata:00000085                 align 4
.rdata:00000088 $SG73963        db 'Tandem',0           ; DATA XREF: .rdata:000000E4o
.rdata:0000008F                 align 10h
.rdata:00000090 $SG73964        db 'OS/400',0           ; DATA XREF: .rdata:000000E8o
.rdata:00000097                 align 4
.rdata:00000098 $SG73965        db 'OS/X',0             ; DATA XREF: .rdata:000000ECo
.rdata:0000009D                 align 10h
.rdata:000000A0 _kHostOS        dd offset $SG73946      ; DATA XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+78Br
.rdata:000000A4                 dd offset $SG73947      ; "AMIGA"
.rdata:000000A8                 dd offset $SG73948      ; "VMS"
.rdata:000000AC                 dd offset $SG73949      ; "Unix"
.rdata:000000B0                 dd offset $SG73950      ; "VM/CMS"
.rdata:000000B4                 dd offset $SG73951      ; "Atari"
.rdata:000000B8                 dd offset $SG73952      ; "HPFS"
.rdata:000000BC                 dd offset $SG73953      ; "Macintosh"
.rdata:000000C0                 dd offset $SG73954      ; "Z-System"
.rdata:000000C4                 dd offset $SG73955      ; "CP/M"
.rdata:000000C8                 dd offset $SG73956      ; "TOPS-20"
.rdata:000000CC                 dd offset $SG73957      ; "NTFS"
.rdata:000000D0                 dd offset $SG73958      ; "SMS/QDOS"
.rdata:000000D4                 dd offset $SG73959      ; "Acorn"
.rdata:000000D8                 dd offset $SG73960      ; "VFAT"
.rdata:000000DC                 dd offset $SG73961      ; "MVS"
.rdata:000000E0                 dd offset $SG73962      ; "BeOS"
.rdata:000000E4                 dd offset $SG73963      ; "Tandem"
.rdata:000000E8                 dd offset $SG73964      ; "OS/400"
.rdata:000000EC                 dd offset $SG73965      ; "OS/X"
.rdata:000000F0 $SG73967        db 'Store',0            ; DATA XREF: .rdata:_kMethodso
.rdata:000000F6                 align 4
.rdata:000000F8 $SG73968        db 'Shrink',0           ; DATA XREF: .rdata:00000168o
.rdata:000000FF                 align 10h
.rdata:00000100 $SG73969        db 'Reduced1',0         ; DATA XREF: .rdata:0000016Co
.rdata:00000109                 align 4
.rdata:0000010C $SG73970        db 'Reduced2',0         ; DATA XREF: .rdata:00000170o
.rdata:00000115                 align 4
.rdata:00000118 $SG73971        db 'Reduced3',0         ; DATA XREF: .rdata:00000174o
.rdata:00000121                 align 4
.rdata:00000124 $SG73972        db 'Reduced4',0         ; DATA XREF: .rdata:00000178o
.rdata:0000012D                 align 10h
.rdata:00000130 $SG73973        db 'Implode',0          ; DATA XREF: .rdata:0000017Co
.rdata:00000138 $SG73974        db 'Tokenizing',0       ; DATA XREF: .rdata:00000180o
.rdata:00000143                 align 4
.rdata:00000144 $SG73975        db 'Deflate',0          ; DATA XREF: .rdata:00000184o
.rdata:0000014C $SG73976        db 'Deflate64',0        ; DATA XREF: .rdata:00000188o
.rdata:00000156                 align 4
.rdata:00000158 $SG73977        db 'PKImploding',0      ; DATA XREF: .rdata:0000018Co
.rdata:00000164 _kMethods       dd offset $SG73967      ; DATA XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+680r
.rdata:00000164                                         ; "Store"
.rdata:00000168                 dd offset $SG73968      ; "Shrink"
.rdata:0000016C                 dd offset $SG73969      ; "Reduced1"
.rdata:00000170                 dd offset $SG73970      ; "Reduced2"
.rdata:00000174                 dd offset $SG73971      ; "Reduced3"
.rdata:00000178                 dd offset $SG73972      ; "Reduced4"
.rdata:0000017C                 dd offset $SG73973      ; "Implode"
.rdata:00000180                 dd offset $SG73974      ; "Tokenizing"
.rdata:00000184                 dd offset $SG73975      ; "Deflate"
.rdata:00000188                 dd offset $SG73976      ; "Deflate64"
.rdata:0000018C                 dd offset $SG73977      ; "PKImploding"
.rdata:00000190 $SG73979        db  41h ; A             ; DATA XREF: .data:_kMethod_AESo
.rdata:00000191                 db  45h ; E
.rdata:00000192                 db  53h ; S
.rdata:00000193                 db    0
.rdata:00000194 $SG73981        db 'ZipCrypto',0        ; DATA XREF: .data:_kMethod_ZipCryptoo
.rdata:0000019E                 align 10h
.rdata:000001A0 $SG73983        db 'StrongCrypto',0     ; DATA XREF: .data:_kMethod_StrongCryptoo
.rdata:000001AD                 align 10h
.rdata:000001B0 $SG73994        db 'BZip2',0            ; DATA XREF: .rdata:000001E0o
.rdata:000001B6                 align 4
.rdata:000001B8 $SG73995        db 'LZMA',0             ; DATA XREF: .rdata:000001E8o
.rdata:000001BD                 align 10h
.rdata:000001C0 $SG73996        dd offset ??_R3CDecoder@NShrink@NCompress@@8
.rdata:000001C0                                         ; DATA XREF: .rdata:000001F0o
.rdata:000001C0                                         ; NCompress::NShrink::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata:000001C4 $SG73997        db 'Jpeg',0             ; DATA XREF: .rdata:000001F8o
.rdata:000001C9                 align 4
.rdata:000001CC $SG73998        db 'WavPack',0          ; DATA XREF: .rdata:00000200o
.rdata:000001D4 $SG73999        db 'PPMd',0             ; DATA XREF: .rdata:00000208o
.rdata:000001D9                 align 4
.rdata:000001DC ; NArchive::NZip k_MethodIdNamePairs
.rdata:000001DC _k_MethodIdNamePairs db  0Ch            ; DATA XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+698o
.rdata:000001DD                 db    0
.rdata:000001DE                 db    0
.rdata:000001DF                 db    0
.rdata:000001E0                 dd offset $SG73994      ; "BZip2"
.rdata:000001E4                 db  0Eh
.rdata:000001E5                 db    0
.rdata:000001E6                 db    0
.rdata:000001E7                 db    0
.rdata:000001E8                 dd offset $SG73995      ; "LZMA"
.rdata:000001EC                 dd offset unk_5F
.rdata:000001F0                 dd offset $SG73996
.rdata:000001F4                 dd offset $SG73958      ; "SMS/QDOS"
.rdata:000001F8                 dd offset $SG73997      ; "Jpeg"
.rdata:000001FC                 dd offset $SG73958+1    ; "MS/QDOS"
.rdata:00000200                 dd offset $SG73998      ; "WavPack"
.rdata:00000204                 dd offset $SG73958+2    ; "S/QDOS"
.rdata:00000208                 dd offset $SG73999      ; "PPMd"
.rdata:0000020C $SG74001        db  44h ; D             ; DATA XREF: .rdata:00000274o
.rdata:0000020D                 db  45h ; E
.rdata:0000020E                 db  53h ; S
.rdata:0000020F                 db    0
.rdata:00000210 $SG74002        db 'RC2a',0             ; DATA XREF: .rdata:0000027Co
.rdata:00000215                 align 4
.rdata:00000218 $SG74003        db '3DES-168',0         ; DATA XREF: .rdata:00000284o
.rdata:00000221                 align 4
.rdata:00000224 $SG74004        db '3DES-112',0         ; DATA XREF: .rdata:0000028Co
.rdata:0000022D                 align 10h
.rdata:00000230 $SG74005        db 'pkAES-128',0        ; DATA XREF: .rdata:00000294o
.rdata:0000023A                 align 4
.rdata:0000023C $SG74006        db 'pkAES-192',0        ; DATA XREF: .rdata:0000029Co
.rdata:00000246                 align 4
.rdata:00000248 $SG74007        db 'pkAES-256',0        ; DATA XREF: .rdata:000002A4o
.rdata:00000252                 align 4
.rdata:00000254 $SG74008        db 'RC2',0              ; DATA XREF: .rdata:000002ACo
.rdata:00000258 $SG74009        db 'Blowfish',0         ; DATA XREF: .rdata:000002B4o
.rdata:00000261                 align 4
.rdata:00000264 $SG74010        db 'Twofish',0          ; DATA XREF: .rdata:000002BCo
.rdata:0000026C $SG74011        db 'RC4',0              ; DATA XREF: .rdata:000002C4o
.rdata:00000270 ; NArchive::NZip k_StrongCryptoPairs
.rdata:00000270 _k_StrongCryptoPairs dd offset off_6600+1
.rdata:00000270                                         ; DATA XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+5BBo
.rdata:00000274                 dd offset $SG74001
.rdata:00000278                 dd offset off_6600+2
.rdata:0000027C                 dd offset $SG74002      ; "RC2a"
.rdata:00000280                 dd offset off_6600+3
.rdata:00000284                 dd offset $SG74003      ; "3DES-168"
.rdata:00000288                 dd offset loc_6609
.rdata:0000028C                 dd offset $SG74004      ; "3DES-112"
.rdata:00000290                 dd offset loc_660E
.rdata:00000294                 dd offset $SG74005      ; "pkAES-128"
.rdata:00000298                 dd offset loc_660E+1
.rdata:0000029C                 dd offset $SG74006      ; "pkAES-192"
.rdata:000002A0                 dd offset loc_660E+2
.rdata:000002A4                 dd offset $SG74007      ; "pkAES-256"
.rdata:000002A8                 dd offset loc_6702
.rdata:000002AC                 dd offset $SG74008      ; "RC2"
.rdata:000002B0                 dd offset loc_671E+2
.rdata:000002B4                 dd offset $SG74009      ; "Blowfish"
.rdata:000002B8                 dd offset loc_6721
.rdata:000002BC                 dd offset $SG74010      ; "Twofish"
.rdata:000002C0                 dd offset off_6800+1
.rdata:000002C4                 dd offset $SG74011      ; "RC4"
.rdata:000002C8 _kProps         db 3                    ; DATA XREF: NArchive::NZip::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+13r
.rdata:000002C9                 db    6
.rdata:000002CA                 db    7
.rdata:000002CB                 db    8
.rdata:000002CC                 db  0Ch
.rdata:000002CD                 db  0Ah
.rdata:000002CE                 db  0Bh
.rdata:000002CF                 db    9
.rdata:000002D0                 db  0Fh
.rdata:000002D1                 db  1Ch
.rdata:000002D2                 db  13h
.rdata:000002D3                 db  16h
.rdata:000002D4                 db  17h
.rdata:000002D5                 db  21h ; !
.rdata:000002D6                 db    0
.rdata:000002D7                 db    0
.rdata:000002D8 _kArcProps      db 58h                  ; DATA XREF: NArchive::NZip::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+13r
.rdata:000002D9                 db  29h ; )
.rdata:000002DA                 db  1Ch
.rdata:000002DB                 db    0
.rdata:000002DC $SG74206        db ':EOS',0             ; DATA XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+710o
.rdata:000002E1                 align 4
.rdata:000002E1 _rdata          ends
.rdata:000002E1
.data:000002E4 ; ===========================================================================
.data:000002E4
.data:000002E4 ; Segment type: Pure data
.data:000002E4 ; Segment permissions: Read/Write
.data:000002E4 _data           segment dword public 'DATA' use32
.data:000002E4                 assume cs:_data
.data:000002E4                 ;org 2E4h
.data:000002E4 _kMethod_AES    dd offset $SG73979      ; DATA XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+4E0r
.data:000002E8 _kMethod_ZipCrypto dd offset $SG73981   ; DATA XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *):loc_1078r
.data:000002E8                                         ; "ZipCrypto"
.data:000002EC _kMethod_StrongCrypto dd offset $SG73983
.data:000002EC                                         ; DATA XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *):loc_1024r
.data:000002EC                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *):loc_1065r
.data:000002EC _data           ends                    ; "StrongCrypto"
.data:000002EC
.text:000002F0 ; ===========================================================================
.text:000002F0
.text:000002F0 ; Segment type: Pure code
.text:000002F0 ; Segment permissions: Read/Execute
.text:000002F0 _text           segment para public 'CODE' use32
.text:000002F0                 assume cs:_text
.text:000002F0                 ;org 2F0h
.text:000002F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000002F0
.text:000002F0 ; =============== S U B R O U T I N E =======================================
.text:000002F0
.text:000002F0 ; Attributes: bp-based frame
.text:000002F0
.text:000002F0 ; const char *__stdcall NArchive::NZip::FindNameForId(NArchive::NZip *this, const struct NArchive::NZip::CIdToNamePair *, unsigned int, unsigned int)
.text:000002F0                 public ?FindNameForId@NZip@NArchive@@YGPBDPBUCIdToNamePair@12@II@Z
.text:000002F0 ?FindNameForId@NZip@NArchive@@YGPBDPBUCIdToNamePair@12@II@Z proc near
.text:000002F0                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+5C0p
.text:000002F0                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+69Dp
.text:000002F0
.text:000002F0 var_8           = dword ptr -8
.text:000002F0 var_4           = dword ptr -4
.text:000002F0 this            = dword ptr  8
.text:000002F0 arg_4           = dword ptr  0Ch
.text:000002F0 arg_8           = dword ptr  10h
.text:000002F0
.text:000002F0                 push    ebp
.text:000002F1                 mov     ebp, esp
.text:000002F3                 sub     esp, 8
.text:000002F6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000002FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000304                 mov     [ebp+var_4], 0
.text:0000030B                 jmp     short loc_316
.text:0000030D ; ---------------------------------------------------------------------------
.text:0000030D
.text:0000030D loc_30D:                                ; CODE XREF: NArchive::NZip::FindNameForId(NArchive::NZip::CIdToNamePair const *,uint,uint):loc_33Cj
.text:0000030D                 mov     eax, [ebp+var_4]
.text:00000310                 add     eax, 1
.text:00000313                 mov     [ebp+var_4], eax
.text:00000316
.text:00000316 loc_316:                                ; CODE XREF: NArchive::NZip::FindNameForId(NArchive::NZip::CIdToNamePair const *,uint,uint)+1Bj
.text:00000316                 mov     ecx, [ebp+var_4]
.text:00000319                 cmp     ecx, [ebp+arg_4]
.text:0000031C                 jnb     short loc_33E
.text:0000031E                 mov     edx, [ebp+var_4]
.text:00000321                 mov     eax, [ebp+this]
.text:00000324                 lea     ecx, [eax+edx*8]
.text:00000327                 mov     [ebp+var_8], ecx
.text:0000032A                 mov     edx, [ebp+var_8]
.text:0000032D                 mov     eax, [ebp+arg_8]
.text:00000330                 cmp     eax, [edx]
.text:00000332                 jnz     short loc_33C
.text:00000334                 mov     ecx, [ebp+var_8]
.text:00000337                 mov     eax, [ecx+4]
.text:0000033A                 jmp     short loc_340
.text:0000033C ; ---------------------------------------------------------------------------
.text:0000033C
.text:0000033C loc_33C:                                ; CODE XREF: NArchive::NZip::FindNameForId(NArchive::NZip::CIdToNamePair const *,uint,uint)+42j
.text:0000033C                 jmp     short loc_30D
.text:0000033E ; ---------------------------------------------------------------------------
.text:0000033E
.text:0000033E loc_33E:                                ; CODE XREF: NArchive::NZip::FindNameForId(NArchive::NZip::CIdToNamePair const *,uint,uint)+2Cj
.text:0000033E                 xor     eax, eax
.text:00000340
.text:00000340 loc_340:                                ; CODE XREF: NArchive::NZip::FindNameForId(NArchive::NZip::CIdToNamePair const *,uint,uint)+4Aj
.text:00000340                 mov     esp, ebp
.text:00000342                 pop     ebp
.text:00000343                 retn    0Ch
.text:00000343 ?FindNameForId@NZip@NArchive@@YGPBDPBUCIdToNamePair@12@II@Z endp
.text:00000343
.text:00000343 ; ---------------------------------------------------------------------------
.text:00000346                 align 10h
.text:00000350
.text:00000350 ; =============== S U B R O U T I N E =======================================
.text:00000350
.text:00000350 ; Attributes: bp-based frame
.text:00000350
.text:00000350 ; _DWORD __thiscall NArchive::NZip::CHandler::CHandler(NArchive::NZip::CHandler *__hidden this)
.text:00000350                 public ??0CHandler@NZip@NArchive@@QAE@XZ
.text:00000350 ??0CHandler@NZip@NArchive@@QAE@XZ proc near
.text:00000350
.text:00000350 var_10          = dword ptr -10h
.text:00000350 var_C           = dword ptr -0Ch
.text:00000350 var_4           = dword ptr -4
.text:00000350
.text:00000350                 push    ebp
.text:00000351                 mov     ebp, esp
.text:00000353                 push    0FFFFFFFFh
.text:00000355                 push    offset __ehhandler$??0CHandler@NZip@NArchive@@QAE@XZ
.text:0000035A                 mov     eax, large fs:0
.text:00000360                 push    eax
.text:00000361                 push    ecx
.text:00000362                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000369                 mov     eax, dword ptr ds:___security_cookie
.text:0000036E                 xor     eax, ebp
.text:00000370                 push    eax
.text:00000371                 lea     eax, [ebp+var_C]
.text:00000374                 mov     large fs:0, eax
.text:0000037A                 mov     [ebp+var_10], ecx
.text:0000037D                 mov     ecx, [ebp+var_10] ; this
.text:00000380                 call    ??0IInArchive@@QAE@XZ ; IInArchive::IInArchive(void)
.text:00000385                 mov     ecx, [ebp+var_10]
.text:00000388                 add     ecx, 4          ; this
.text:0000038B                 call    ??0IOutArchive@@QAE@XZ ; IOutArchive::IOutArchive(void)
.text:00000390                 mov     ecx, [ebp+var_10]
.text:00000393                 add     ecx, 8          ; this
.text:00000396                 call    ??0ISetProperties@@QAE@XZ ; ISetProperties::ISetProperties(void)
.text:0000039B                 mov     ecx, [ebp+var_10]
.text:0000039E                 add     ecx, 0Ch        ; this
.text:000003A1                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000003A6                 mov     eax, [ebp+var_10]
.text:000003A9                 mov     dword ptr [eax], offset ??_7CHandler@NZip@NArchive@@6BIInArchive@@@ ; const NArchive::NZip::CHandler::`vftable'{for `IInArchive'}
.text:000003AF                 mov     ecx, [ebp+var_10]
.text:000003B2                 mov     dword ptr [ecx+4], offset ??_7CHandler@NZip@NArchive@@6BIOutArchive@@@ ; const NArchive::NZip::CHandler::`vftable'{for `IOutArchive'}
.text:000003B9                 mov     edx, [ebp+var_10]
.text:000003BC                 mov     dword ptr [edx+8], offset ??_7CHandler@NZip@NArchive@@6BISetProperties@@@ ; const NArchive::NZip::CHandler::`vftable'{for `ISetProperties'}
.text:000003C3                 mov     ecx, [ebp+var_10]
.text:000003C6                 add     ecx, 10h
.text:000003C9                 call    ??0?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::CObjectVector<NArchive::NZip::CItemEx>(void)
.text:000003CE                 mov     [ebp+var_4], 0
.text:000003D5                 mov     ecx, [ebp+var_10]
.text:000003D8                 add     ecx, 20h ; ' '  ; this
.text:000003DB                 call    ??0CInArchive@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CInArchive::CInArchive(void)
.text:000003E0                 mov     byte ptr [ebp+var_4], 1
.text:000003E4                 mov     ecx, [ebp+var_10]
.text:000003E7                 add     ecx, 0A8h ; '¿' ; this
.text:000003ED                 call    ??0CBaseProps@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CBaseProps::CBaseProps(void)
.text:000003F2                 mov     byte ptr [ebp+var_4], 2
.text:000003F6                 mov     ecx, [ebp+var_10] ; this
.text:000003F9                 call    ?InitMethodProps@CHandler@NZip@NArchive@@AAEXXZ ; NArchive::NZip::CHandler::InitMethodProps(void)
.text:000003FE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000405                 mov     eax, [ebp+var_10]
.text:00000408                 mov     ecx, [ebp+var_C]
.text:0000040B                 mov     large fs:0, ecx
.text:00000412                 pop     ecx
.text:00000413                 add     esp, 10h
.text:00000416                 cmp     ebp, esp
.text:00000418                 call    __RTC_CheckEsp
.text:0000041D                 mov     esp, ebp
.text:0000041F                 pop     ebp
.text:00000420                 retn
.text:00000420 ??0CHandler@NZip@NArchive@@QAE@XZ endp
.text:00000420
.text:00000420 ; ---------------------------------------------------------------------------
.text:00000421                 align 10h
.text:00000430
.text:00000430 ; =============== S U B R O U T I N E =======================================
.text:00000430
.text:00000430 ; Attributes: bp-based frame
.text:00000430
.text:00000430 ; __int32 __stdcall NArchive::NZip::CHandler::GetNumberOfProperties(NArchive::NZip::CHandler *this, unsigned int *)
.text:00000430                 public ?GetNumberOfProperties@CHandler@NZip@NArchive@@UAGJPAI@Z
.text:00000430 ?GetNumberOfProperties@CHandler@NZip@NArchive@@UAGJPAI@Z proc near
.text:00000430                                         ; DATA XREF: .rdata:00004398o
.text:00000430
.text:00000430 this            = dword ptr  8
.text:00000430 arg_4           = dword ptr  0Ch
.text:00000430
.text:00000430                 push    ebp
.text:00000431                 mov     ebp, esp
.text:00000433                 mov     eax, [ebp+arg_4]
.text:00000436                 mov     dword ptr [eax], 0Eh
.text:0000043C                 xor     eax, eax
.text:0000043E                 pop     ebp
.text:0000043F                 retn    8
.text:0000043F ?GetNumberOfProperties@CHandler@NZip@NArchive@@UAGJPAI@Z endp
.text:0000043F
.text:0000043F ; ---------------------------------------------------------------------------
.text:00000442                 align 10h
.text:00000450
.text:00000450 ; =============== S U B R O U T I N E =======================================
.text:00000450
.text:00000450 ; Attributes: bp-based frame
.text:00000450
.text:00000450 ; __int32 __stdcall NArchive::NZip::CHandler::GetPropertyInfo(NArchive::NZip::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *, unsigned __int16 *)
.text:00000450                 public ?GetPropertyInfo@CHandler@NZip@NArchive@@UAGJIPAPA_WPAKPAG@Z
.text:00000450 ?GetPropertyInfo@CHandler@NZip@NArchive@@UAGJIPAPA_WPAKPAG@Z proc near
.text:00000450                                         ; DATA XREF: .rdata:0000439Co
.text:00000450
.text:00000450 this            = dword ptr  8
.text:00000450 arg_4           = dword ptr  0Ch
.text:00000450 arg_8           = dword ptr  10h
.text:00000450 arg_C           = dword ptr  14h
.text:00000450 arg_10          = dword ptr  18h
.text:00000450
.text:00000450                 push    ebp
.text:00000451                 mov     ebp, esp
.text:00000453                 cmp     [ebp+arg_4], 0Eh
.text:00000457                 jb      short loc_460
.text:00000459                 mov     eax, 80070057h
.text:0000045E                 jmp     short loc_48D
.text:00000460 ; ---------------------------------------------------------------------------
.text:00000460
.text:00000460 loc_460:                                ; CODE XREF: NArchive::NZip::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+7j
.text:00000460                 mov     eax, [ebp+arg_4]
.text:00000463                 movzx   ecx, _kProps[eax]
.text:0000046A                 mov     edx, [ebp+arg_C]
.text:0000046D                 mov     [edx], ecx
.text:0000046F                 mov     eax, [ebp+arg_C]
.text:00000472                 mov     ecx, [eax]
.text:00000474                 movzx   dx, byte ptr ds:?k7z_PROPID_To_VARTYPE@@3QBEB[ecx] ; uchar const * const k7z_PROPID_To_VARTYPE
.text:0000047C                 mov     eax, [ebp+arg_10]
.text:0000047F                 mov     [eax], dx
.text:00000482                 mov     ecx, [ebp+arg_8]
.text:00000485                 mov     dword ptr [ecx], 0
.text:0000048B                 xor     eax, eax
.text:0000048D
.text:0000048D loc_48D:                                ; CODE XREF: NArchive::NZip::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+Ej
.text:0000048D                 pop     ebp
.text:0000048E                 retn    14h
.text:0000048E ?GetPropertyInfo@CHandler@NZip@NArchive@@UAGJIPAPA_WPAKPAG@Z endp
.text:0000048E
.text:0000048E ; ---------------------------------------------------------------------------
.text:00000491                 align 10h
.text:000004A0
.text:000004A0 ; =============== S U B R O U T I N E =======================================
.text:000004A0
.text:000004A0 ; Attributes: bp-based frame
.text:000004A0
.text:000004A0 ; __int32 __stdcall NArchive::NZip::CHandler::GetNumberOfArchiveProperties(NArchive::NZip::CHandler *this, unsigned int *)
.text:000004A0                 public ?GetNumberOfArchiveProperties@CHandler@NZip@NArchive@@UAGJPAI@Z
.text:000004A0 ?GetNumberOfArchiveProperties@CHandler@NZip@NArchive@@UAGJPAI@Z proc near
.text:000004A0                                         ; DATA XREF: .rdata:000043A0o
.text:000004A0
.text:000004A0 this            = dword ptr  8
.text:000004A0 arg_4           = dword ptr  0Ch
.text:000004A0
.text:000004A0                 push    ebp
.text:000004A1                 mov     ebp, esp
.text:000004A3                 mov     eax, [ebp+arg_4]
.text:000004A6                 mov     dword ptr [eax], 3
.text:000004AC                 xor     eax, eax
.text:000004AE                 pop     ebp
.text:000004AF                 retn    8
.text:000004AF ?GetNumberOfArchiveProperties@CHandler@NZip@NArchive@@UAGJPAI@Z endp
.text:000004AF
.text:000004AF ; ---------------------------------------------------------------------------
.text:000004B2                 align 10h
.text:000004C0
.text:000004C0 ; =============== S U B R O U T I N E =======================================
.text:000004C0
.text:000004C0 ; Attributes: bp-based frame
.text:000004C0
.text:000004C0 ; __int32 __stdcall NArchive::NZip::CHandler::GetArchivePropertyInfo(NArchive::NZip::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *, unsigned __int16 *)
.text:000004C0                 public ?GetArchivePropertyInfo@CHandler@NZip@NArchive@@UAGJIPAPA_WPAKPAG@Z
.text:000004C0 ?GetArchivePropertyInfo@CHandler@NZip@NArchive@@UAGJIPAPA_WPAKPAG@Z proc near
.text:000004C0                                         ; DATA XREF: .rdata:000043A4o
.text:000004C0
.text:000004C0 this            = dword ptr  8
.text:000004C0 arg_4           = dword ptr  0Ch
.text:000004C0 arg_8           = dword ptr  10h
.text:000004C0 arg_C           = dword ptr  14h
.text:000004C0 arg_10          = dword ptr  18h
.text:000004C0
.text:000004C0                 push    ebp
.text:000004C1                 mov     ebp, esp
.text:000004C3                 cmp     [ebp+arg_4], 3
.text:000004C7                 jb      short loc_4D0
.text:000004C9                 mov     eax, 80070057h
.text:000004CE                 jmp     short loc_4FD
.text:000004D0 ; ---------------------------------------------------------------------------
.text:000004D0
.text:000004D0 loc_4D0:                                ; CODE XREF: NArchive::NZip::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+7j
.text:000004D0                 mov     eax, [ebp+arg_4]
.text:000004D3                 movzx   ecx, _kArcProps[eax]
.text:000004DA                 mov     edx, [ebp+arg_C]
.text:000004DD                 mov     [edx], ecx
.text:000004DF                 mov     eax, [ebp+arg_C]
.text:000004E2                 mov     ecx, [eax]
.text:000004E4                 movzx   dx, byte ptr ds:?k7z_PROPID_To_VARTYPE@@3QBEB[ecx] ; uchar const * const k7z_PROPID_To_VARTYPE
.text:000004EC                 mov     eax, [ebp+arg_10]
.text:000004EF                 mov     [eax], dx
.text:000004F2                 mov     ecx, [ebp+arg_8]
.text:000004F5                 mov     dword ptr [ecx], 0
.text:000004FB                 xor     eax, eax
.text:000004FD
.text:000004FD loc_4FD:                                ; CODE XREF: NArchive::NZip::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+Ej
.text:000004FD                 pop     ebp
.text:000004FE                 retn    14h
.text:000004FE ?GetArchivePropertyInfo@CHandler@NZip@NArchive@@UAGJIPAPA_WPAKPAG@Z endp
.text:000004FE
.text:000004FE ; ---------------------------------------------------------------------------
.text:00000501                 align 10h
.text:00000510
.text:00000510 ; =============== S U B R O U T I N E =======================================
.text:00000510
.text:00000510 ; Attributes: bp-based frame
.text:00000510
.text:00000510 ; __int32 __cdecl NArchive::NZip::CHandler::GetArchiveProperty(NArchive::NZip::CHandler *this, unsigned __int32, struct tagPROPVARIANT *)
.text:00000510                 public ?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:00000510 ?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z proc near
.text:00000510                                         ; DATA XREF: .rdata:00004394o
.text:00000510
.text:00000510 var_A0          = byte ptr -0A0h
.text:00000510 var_9E          = byte ptr -9Eh
.text:00000510 var_9D          = byte ptr -9Dh
.text:00000510 var_9C          = dword ptr -9Ch
.text:00000510 var_98          = dword ptr -98h
.text:00000510 var_94          = dword ptr -94h
.text:00000510 var_90          = dword ptr -90h
.text:00000510 var_8C          = dword ptr -8Ch
.text:00000510 var_88          = dword ptr -88h
.text:00000510 var_84          = dword ptr -84h
.text:00000510 var_80          = dword ptr -80h
.text:00000510 var_7C          = dword ptr -7Ch
.text:00000510 var_78          = dword ptr -78h
.text:00000510 var_74          = dword ptr -74h
.text:00000510 var_70          = dword ptr -70h
.text:00000510 var_6C          = dword ptr -6Ch
.text:00000510 var_68          = dword ptr -68h
.text:00000510 var_64          = dword ptr -64h
.text:00000510 var_60          = dword ptr -60h
.text:00000510 var_58          = byte ptr -58h
.text:00000510 var_4C          = byte ptr -4Ch
.text:00000510 var_40          = dword ptr -40h
.text:00000510 var_3C          = dword ptr -3Ch
.text:00000510 var_38          = dword ptr -38h
.text:00000510 var_34          = dword ptr -34h
.text:00000510 var_30          = dword ptr -30h
.text:00000510 var_2C          = dword ptr -2Ch
.text:00000510 var_24          = byte ptr -24h
.text:00000510 var_10          = dword ptr -10h
.text:00000510 var_C           = byte ptr -0Ch
.text:00000510 var_4           = dword ptr -4
.text:00000510 this            = dword ptr  8
.text:00000510 arg_4           = dword ptr  0Ch
.text:00000510 arg_8           = dword ptr  10h
.text:00000510
.text:00000510 ; FUNCTION CHUNK AT .text:0000085C SIZE 00000009 BYTES
.text:00000510
.text:00000510                 push    ebp
.text:00000511                 mov     ebp, esp
.text:00000513                 push    0FFFFFFFFh
.text:00000515                 push    offset __ehhandler$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:0000051A                 mov     eax, large fs:0
.text:00000520                 push    eax
.text:00000521                 push    ecx
.text:00000522                 sub     esp, 90h
.text:00000528                 push    ebx
.text:00000529                 push    esi
.text:0000052A                 push    edi
.text:0000052B                 lea     edi, [ebp+var_A0]
.text:00000531                 mov     ecx, 24h ; '$'
.text:00000536                 mov     eax, 0CCCCCCCCh
.text:0000053B                 rep stosd
.text:0000053D                 mov     eax, dword ptr ds:___security_cookie
.text:00000542                 xor     eax, ebp
.text:00000544                 push    eax
.text:00000545                 lea     eax, [ebp+var_C]
.text:00000548                 mov     large fs:0, eax
.text:0000054E                 mov     [ebp+var_10], esp
.text:00000551                 mov     [ebp+var_4], 0
.text:00000558                 lea     ecx, [ebp+var_24] ; this
.text:0000055B                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00000560                 mov     [ebp+var_60], eax
.text:00000563                 mov     byte ptr [ebp+var_4], 1
.text:00000567                 mov     eax, [ebp+arg_4]
.text:0000056A                 mov     [ebp+var_64], eax
.text:0000056D                 mov     ecx, [ebp+var_64]
.text:00000570                 sub     ecx, 1Ch
.text:00000573                 mov     [ebp+var_64], ecx
.text:00000576                 cmp     [ebp+var_64], 41h ; 'A' ; switch 66 cases
.text:0000057A                 ja      $LN22           ; jumptable 0000058A default case
.text:00000580                 mov     edx, [ebp+var_64]
.text:00000583                 movzx   eax, ds:$LN35[edx]
.text:0000058A                 jmp     ds:$LN42[eax*4] ; switch jump
.text:00000591 ; ---------------------------------------------------------------------------
.text:00000591
.text:00000591 $LN21:                                  ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Aj
.text:00000591                                         ; DATA XREF: .text:$LN42o
.text:00000591                 mov     ecx, [ebp+this] ; jumptable 0000058A case 13
.text:00000594                 movzx   edx, byte ptr [ecx+99h]
.text:0000059B                 test    edx, edx
.text:0000059D                 jz      short loc_5B2
.text:0000059F                 mov     eax, [ebp+this]
.text:000005A2                 movzx   ecx, byte ptr [eax+99h]
.text:000005A9                 push    ecx
.text:000005AA                 lea     ecx, [ebp+var_24]
.text:000005AD                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=(bool)
.text:000005B2
.text:000005B2 loc_5B2:                                ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+8Dj
.text:000005B2                 jmp     $LN22           ; jumptable 0000058A default case
.text:000005B7 ; ---------------------------------------------------------------------------
.text:000005B7
.text:000005B7 $LN19:                                  ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Aj
.text:000005B7                                         ; DATA XREF: .text:$LN42o
.text:000005B7                 mov     ecx, [ebp+this] ; jumptable 0000058A case 0
.text:000005BA                 add     ecx, 8Ch ; 'î'
.text:000005C0                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:000005C5                 mov     [ebp+var_68], eax
.text:000005C8                 cmp     [ebp+var_68], 0
.text:000005CC                 jz      short loc_62E
.text:000005CE                 mov     edx, [ebp+this]
.text:000005D1                 add     edx, 8Ch ; 'î'
.text:000005D7                 push    edx
.text:000005D8                 lea     eax, [ebp+var_4C]
.text:000005DB                 push    eax
.text:000005DC                 call    ?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z ; NArchive::NZip::BytesToString(CBuffer<uchar> const &)
.text:000005E1                 mov     [ebp+var_6C], eax
.text:000005E4                 mov     ecx, [ebp+var_6C]
.text:000005E7                 mov     [ebp+var_70], ecx
.text:000005EA                 mov     byte ptr [ebp+var_4], 2
.text:000005EE                 push    0
.text:000005F0                 mov     edx, [ebp+var_70]
.text:000005F3                 push    edx
.text:000005F4                 lea     eax, [ebp+var_58]
.text:000005F7                 push    eax
.text:000005F8                 call    ?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z ; MultiByteToUnicodeString(AString const &,uint)
.text:000005FD                 mov     [ebp+var_74], eax
.text:00000600                 mov     ecx, [ebp+var_74]
.text:00000603                 mov     [ebp+var_78], ecx
.text:00000606                 mov     byte ptr [ebp+var_4], 3
.text:0000060A                 mov     edx, [ebp+var_78]
.text:0000060D                 push    edx
.text:0000060E                 lea     ecx, [ebp+var_24]
.text:00000611                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=(UString const &)
.text:00000616                 mov     byte ptr [ebp+var_4], 2
.text:0000061A                 lea     ecx, [ebp+var_58] ; this
.text:0000061D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000622                 mov     byte ptr [ebp+var_4], 1
.text:00000626                 lea     ecx, [ebp+var_4C] ; this
.text:00000629                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000062E
.text:0000062E loc_62E:                                ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+BCj
.text:0000062E                 jmp     $LN22           ; jumptable 0000058A default case
.text:00000633 ; ---------------------------------------------------------------------------
.text:00000633
.text:00000633 $LN17:                                  ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Aj
.text:00000633                                         ; DATA XREF: .text:$LN42o
.text:00000633                 mov     ecx, [ebp+this] ; jumptable 0000058A case 16
.text:00000636                 add     ecx, 58h ; 'X'  ; this
.text:00000639                 call    ?GetPhySize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CInArchiveInfo::GetPhySize(void)
.text:0000063E                 mov     [ebp+var_80], eax
.text:00000641                 mov     [ebp+var_7C], edx
.text:00000644                 mov     eax, [ebp+var_7C]
.text:00000647                 push    eax
.text:00000648                 mov     ecx, [ebp+var_80]
.text:0000064B                 push    ecx
.text:0000064C                 lea     ecx, [ebp+var_24]
.text:0000064F                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000654                 jmp     $LN22           ; jumptable 0000058A default case
.text:00000659 ; ---------------------------------------------------------------------------
.text:00000659
.text:00000659 $LN16:                                  ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Aj
.text:00000659                                         ; DATA XREF: .text:$LN42o
.text:00000659                 mov     edx, [ebp+this] ; jumptable 0000058A case 8
.text:0000065C                 mov     eax, [edx+5Ch]
.text:0000065F                 push    eax
.text:00000660                 mov     ecx, [edx+58h]
.text:00000663                 push    ecx
.text:00000664                 lea     ecx, [ebp+var_24]
.text:00000667                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_J@Z ; NWindows::NCOM::CPropVariant::operator=(__int64)
.text:0000066C                 jmp     $LN22           ; jumptable 0000058A default case
.text:00000671 ; ---------------------------------------------------------------------------
.text:00000671
.text:00000671 $LN15:                                  ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Aj
.text:00000671                                         ; DATA XREF: .text:$LN42o
.text:00000671                 mov     ecx, [ebp+this] ; jumptable 0000058A case 60
.text:00000674                 add     ecx, 58h ; 'X'  ; this
.text:00000677                 call    ?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize(void)
.text:0000067C                 mov     [ebp+var_88], eax
.text:00000682                 mov     [ebp+var_84], edx
.text:00000688                 mov     edx, [ebp+var_88]
.text:0000068E                 mov     [ebp+var_30], edx
.text:00000691                 mov     eax, [ebp+var_84]
.text:00000697                 mov     [ebp+var_2C], eax
.text:0000069A                 mov     ecx, [ebp+var_30]
.text:0000069D                 or      ecx, [ebp+var_2C]
.text:000006A0                 jz      short loc_6B2
.text:000006A2                 mov     edx, [ebp+var_2C]
.text:000006A5                 push    edx
.text:000006A6                 mov     eax, [ebp+var_30]
.text:000006A9                 push    eax
.text:000006AA                 lea     ecx, [ebp+var_24]
.text:000006AD                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000006B2
.text:000006B2 loc_6B2:                                ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+190j
.text:000006B2                 jmp     $LN22           ; jumptable 0000058A default case
.text:000006B7 ; ---------------------------------------------------------------------------
.text:000006B7
.text:000006B7 $LN13:                                  ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Aj
.text:000006B7                                         ; DATA XREF: .text:$LN42o
.text:000006B7                 mov     [ebp+var_34], 0 ; jumptable 0000058A case 44
.text:000006BE                 mov     ecx, [ebp+this]
.text:000006C1                 movzx   edx, byte ptr [ecx+9Bh]
.text:000006C8                 test    edx, edx
.text:000006CA                 jz      short loc_6D5
.text:000006CC                 mov     eax, [ebp+var_34]
.text:000006CF                 or      eax, 2
.text:000006D2                 mov     [ebp+var_34], eax
.text:000006D5
.text:000006D5 loc_6D5:                                ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1BAj
.text:000006D5                 cmp     [ebp+var_34], 0
.text:000006D9                 jz      short loc_6E7
.text:000006DB                 mov     ecx, [ebp+var_34]
.text:000006DE                 push    ecx
.text:000006DF                 lea     ecx, [ebp+var_24]
.text:000006E2                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:000006E7
.text:000006E7 loc_6E7:                                ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1C9j
.text:000006E7                 jmp     $LN22           ; jumptable 0000058A default case
.text:000006EC ; ---------------------------------------------------------------------------
.text:000006EC
.text:000006EC $LN10:                                  ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Aj
.text:000006EC                                         ; DATA XREF: .text:$LN42o
.text:000006EC                 mov     [ebp+var_38], 0 ; jumptable 0000058A case 43
.text:000006F3                 mov     edx, [ebp+this]
.text:000006F6                 movzx   eax, byte ptr [edx+98h]
.text:000006FD                 test    eax, eax
.text:000006FF                 jnz     short loc_70A
.text:00000701                 mov     ecx, [ebp+var_38]
.text:00000704                 or      ecx, 1
.text:00000707                 mov     [ebp+var_38], ecx
.text:0000070A
.text:0000070A loc_70A:                                ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1EFj
.text:0000070A                 mov     edx, [ebp+this]
.text:0000070D                 movzx   eax, byte ptr [edx+9Ah]
.text:00000714                 test    eax, eax
.text:00000716                 jz      short loc_721
.text:00000718                 mov     ecx, [ebp+var_38]
.text:0000071B                 or      ecx, 2
.text:0000071E                 mov     [ebp+var_38], ecx
.text:00000721
.text:00000721 loc_721:                                ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+206j
.text:00000721                 mov     edx, [ebp+this]
.text:00000724                 movzx   eax, byte ptr [edx+9Dh]
.text:0000072B                 test    eax, eax
.text:0000072D                 jz      short loc_738
.text:0000072F                 mov     ecx, [ebp+var_38]
.text:00000732                 or      ecx, 20h
.text:00000735                 mov     [ebp+var_38], ecx
.text:00000738
.text:00000738 loc_738:                                ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+21Dj
.text:00000738                 mov     edx, [ebp+this]
.text:0000073B                 mov     [ebp+var_8C], edx
.text:00000741                 mov     eax, [ebp+var_8C]
.text:00000747                 cmp     dword ptr [eax+5Ch], 0
.text:0000074B                 jg      short loc_7C1
.text:0000074D                 jl      short loc_75B
.text:0000074F                 mov     ecx, [ebp+var_8C]
.text:00000755                 cmp     dword ptr [ecx+58h], 0
.text:00000759                 jnb     short loc_7C1
.text:0000075B
.text:0000075B loc_75B:                                ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+23Dj
.text:0000075B                 mov     ecx, [ebp+this]
.text:0000075E                 add     ecx, 58h ; 'X'  ; this
.text:00000761                 call    ?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize(void)
.text:00000766                 mov     [ebp+var_94], eax
.text:0000076C                 mov     [ebp+var_90], edx
.text:00000772                 mov     edx, [ebp+var_94]
.text:00000778                 mov     [ebp+var_40], edx
.text:0000077B                 mov     eax, [ebp+var_90]
.text:00000781                 mov     [ebp+var_3C], eax
.text:00000784                 mov     ecx, [ebp+this]
.text:00000787                 mov     edx, [ecx+58h]
.text:0000078A                 neg     edx
.text:0000078C                 mov     eax, [ecx+5Ch]
.text:0000078F                 adc     eax, 0
.text:00000792                 neg     eax
.text:00000794                 mov     [ebp+var_9C], edx
.text:0000079A                 mov     [ebp+var_98], eax
.text:000007A0                 mov     ecx, [ebp+var_3C]
.text:000007A3                 cmp     ecx, [ebp+var_98]
.text:000007A9                 ja      short loc_7C1
.text:000007AB                 jb      short loc_7B8
.text:000007AD                 mov     edx, [ebp+var_40]
.text:000007B0                 cmp     edx, [ebp+var_9C]
.text:000007B6                 jnb     short loc_7C1
.text:000007B8
.text:000007B8 loc_7B8:                                ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+29Bj
.text:000007B8                 mov     eax, [ebp+var_38]
.text:000007BB                 or      eax, 8
.text:000007BE                 mov     [ebp+var_38], eax
.text:000007C1
.text:000007C1 loc_7C1:                                ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+23Bj
.text:000007C1                                         ; NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+249j ...
.text:000007C1                 mov     ecx, [ebp+this]
.text:000007C4                 movzx   edx, byte ptr [ecx+9Eh]
.text:000007CB                 test    edx, edx
.text:000007CD                 jz      short loc_7D8
.text:000007CF                 mov     eax, [ebp+var_38]
.text:000007D2                 or      eax, 10h
.text:000007D5                 mov     [ebp+var_38], eax
.text:000007D8
.text:000007D8 loc_7D8:                                ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+2BDj
.text:000007D8                 mov     ecx, [ebp+var_38]
.text:000007DB                 push    ecx
.text:000007DC                 lea     ecx, [ebp+var_24]
.text:000007DF                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:000007E4                 jmp     short $LN22     ; jumptable 0000058A default case
.text:000007E6 ; ---------------------------------------------------------------------------
.text:000007E6
.text:000007E6 $LN3:                                   ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Aj
.text:000007E6                                         ; DATA XREF: .text:$LN42o
.text:000007E6                 mov     ecx, [ebp+this] ; jumptable 0000058A case 65
.text:000007E9                 add     ecx, 20h ; ' '  ; this
.text:000007EC                 call    ?IsOpen@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::IsOpen(void)
.text:000007F1                 mov     [ebp+var_9D], al
.text:000007F7                 movzx   edx, [ebp+var_9D]
.text:000007FE                 test    edx, edx
.text:00000800                 jz      short $LN22     ; jumptable 0000058A default case
.text:00000802                 mov     ecx, [ebp+this]
.text:00000805                 add     ecx, 20h ; ' '  ; this
.text:00000808                 call    ?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::CanUpdate(void)
.text:0000080D                 mov     [ebp+var_9E], al
.text:00000813                 movzx   eax, [ebp+var_9E]
.text:0000081A                 test    eax, eax
.text:0000081C                 jnz     short $LN22     ; jumptable 0000058A default case
.text:0000081E                 push    1
.text:00000820                 lea     ecx, [ebp+var_24]
.text:00000823                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=(bool)
.text:00000828
.text:00000828 $LN22:                                  ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+6Aj
.text:00000828                                         ; NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Aj ...
.text:00000828                 mov     ecx, [ebp+arg_8] ; jumptable 0000058A default case
.text:0000082B                 push    ecx             ; struct tagPROPVARIANT *
.text:0000082C                 lea     ecx, [ebp+var_24] ; this
.text:0000082F                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:00000834                 mov     byte ptr [ebp+var_4], 0
.text:00000838                 lea     ecx, [ebp+var_24] ; this
.text:0000083B                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000840                 jmp     short $LN27
.text:00000840 ?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z endp
.text:00000840
.text:00000842
.text:00000842 ; =============== S U B R O U T I N E =======================================
.text:00000842
.text:00000842
.text:00000842 __catch$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0 proc near
.text:00000842                                         ; DATA XREF: .xdata$x:000043F0o
.text:00000842                 mov     dword ptr [ebp-5Ch], 8007000Eh
.text:00000849                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000850                 mov     eax, offset $LN33
.text:00000855                 retn
.text:00000855 __catch$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0 endp
.text:00000855
.text:00000856 ; ---------------------------------------------------------------------------
.text:00000856                 mov     eax, offset $LN27
.text:0000085B                 retn
.text:0000085C ; ---------------------------------------------------------------------------
.text:0000085C ; START OF FUNCTION CHUNK FOR ?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:0000085C
.text:0000085C $LN27:                                  ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+330j
.text:0000085C                                         ; DATA XREF: .text:00000856o
.text:0000085C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000863                 jmp     short loc_86A
.text:00000863 ; END OF FUNCTION CHUNK FOR ?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:00000865
.text:00000865 ; =============== S U B R O U T I N E =======================================
.text:00000865
.text:00000865
.text:00000865 $LN33           proc near               ; DATA XREF: __catch$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0+Eo
.text:00000865                 mov     eax, [ebp-5Ch]
.text:00000868                 jmp     short loc_86C
.text:0000086A ; ---------------------------------------------------------------------------
.text:0000086A
.text:0000086A loc_86A:                                ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+353j
.text:0000086A                 xor     eax, eax
.text:0000086C
.text:0000086C loc_86C:                                ; CODE XREF: $LN33+3j
.text:0000086C                 push    edx
.text:0000086D                 mov     ecx, ebp
.text:0000086F                 push    eax
.text:00000870                 lea     edx, $LN41
.text:00000876                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000087B                 pop     eax
.text:0000087C                 pop     edx
.text:0000087D                 mov     ecx, [ebp-0Ch]
.text:00000880                 mov     large fs:0, ecx
.text:00000887                 pop     ecx
.text:00000888                 pop     edi
.text:00000889                 pop     esi
.text:0000088A                 pop     ebx
.text:0000088B                 add     esp, 0A0h
.text:00000891                 cmp     ebp, esp
.text:00000893                 call    __RTC_CheckEsp
.text:00000898                 mov     esp, ebp
.text:0000089A                 pop     ebp
.text:0000089B                 retn    0Ch
.text:0000089B $LN33           endp ; sp-analysis failed
.text:0000089B
.text:0000089B ; ---------------------------------------------------------------------------
.text:0000089E                 align 10h
.text:000008A0 $LN41           dd 1                    ; DATA XREF: $LN33+Bo
.text:000008A4                 dd offset $LN40
.text:000008A8 $LN40           dd 0FFFFFFDCh, 10h      ; DATA XREF: .text:000008A4o
.text:000008B0                 dd offset $LN38         ; "prop"
.text:000008B4 $LN38           db 'prop',0             ; DATA XREF: .text:000008B0o
.text:000008B9                 align 4
.text:000008BC $LN42           dd offset $LN19, offset $LN16, offset $LN21, offset $LN17
.text:000008BC                                         ; DATA XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Ar
.text:000008BC                 dd offset $LN10, offset $LN13, offset $LN15, offset $LN3 ; jump table for switch statement
.text:000008BC                 dd offset $LN22
.text:000008E0 $LN35           db      0,     8,     8,     8
.text:000008E0                                         ; DATA XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+73r
.text:000008E0                 db      8,     8,     8,     8 ; indirect table for switch statement
.text:000008E0                 db      1,     8,     8,     8
.text:000008E0                 db      8,     2,     8,     8
.text:000008E0                 db      3,     8,     8,     8
.text:000008E0                 db      8,     8,     8,     8
.text:000008E0                 db      8,     8,     8,     8
.text:000008E0                 db      8,     8,     8,     8
.text:000008E0                 db      8,     8,     8,     8
.text:000008E0                 db      8,     8,     8,     8
.text:000008E0                 db      8,     8,     8,     4
.text:000008E0                 db      5,     8,     8,     8
.text:000008E0                 db      8,     8,     8,     8
.text:000008E0                 db      8,     8,     8,     8
.text:000008E0                 db      8,     8,     8,     8
.text:000008E0                 db      6,     8,     8,     8
.text:000008E0                 db      8,     7
.text:00000922                 align 10h
.text:00000930
.text:00000930 ; =============== S U B R O U T I N E =======================================
.text:00000930
.text:00000930 ; Attributes: bp-based frame
.text:00000930
.text:00000930 ; class AString __stdcall NArchive::NZip::BytesToString(class CBuffer<unsigned char> const &)
.text:00000930 ?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z proc near
.text:00000930                                         ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+CCp
.text:00000930                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+3EFp
.text:00000930
.text:00000930 var_24          = dword ptr -24h
.text:00000930 var_20          = dword ptr -20h
.text:00000930 var_1C          = dword ptr -1Ch
.text:00000930 var_18          = dword ptr -18h
.text:00000930 var_14          = dword ptr -14h
.text:00000930 var_10          = dword ptr -10h
.text:00000930 var_C           = dword ptr -0Ch
.text:00000930 var_4           = dword ptr -4
.text:00000930 arg_0           = dword ptr  8
.text:00000930 arg_4           = dword ptr  0Ch
.text:00000930
.text:00000930                 push    ebp
.text:00000931                 mov     ebp, esp
.text:00000933                 push    0FFFFFFFFh
.text:00000935                 push    offset __ehhandler$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z
.text:0000093A                 mov     eax, large fs:0
.text:00000940                 push    eax
.text:00000941                 sub     esp, 18h
.text:00000944                 mov     eax, 0CCCCCCCCh
.text:00000949                 mov     [ebp+var_24], eax
.text:0000094C                 mov     [ebp+var_20], eax
.text:0000094F                 mov     [ebp+var_1C], eax
.text:00000952                 mov     [ebp+var_18], eax
.text:00000955                 mov     [ebp+var_14], eax
.text:00000958                 mov     [ebp+var_10], eax
.text:0000095B                 mov     eax, dword ptr ds:___security_cookie
.text:00000960                 xor     eax, ebp
.text:00000962                 push    eax
.text:00000963                 lea     eax, [ebp+var_C]
.text:00000966                 mov     large fs:0, eax
.text:0000096C                 mov     [ebp+var_24], 0
.text:00000973                 lea     ecx, [ebp+var_1C]
.text:00000976                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:0000097B                 mov     [ebp+var_4], 1
.text:00000982                 mov     ecx, [ebp+arg_4]
.text:00000985                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:0000098A                 push    eax             ; unsigned int
.text:0000098B                 mov     ecx, [ebp+arg_4]
.text:0000098E                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00000993                 push    eax             ; char *
.text:00000994                 lea     ecx, [ebp+var_1C] ; this
.text:00000997                 call    ?SetFrom_CalcLen@AString@@QAEXPBDI@Z ; AString::SetFrom_CalcLen(char const *,uint)
.text:0000099C                 lea     eax, [ebp+var_1C]
.text:0000099F                 push    eax
.text:000009A0                 mov     ecx, [ebp+arg_0]
.text:000009A3                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:000009A8                 mov     ecx, [ebp+var_24]
.text:000009AB                 or      ecx, 1
.text:000009AE                 mov     [ebp+var_24], ecx
.text:000009B1                 mov     byte ptr [ebp+var_4], 0
.text:000009B5                 lea     ecx, [ebp+var_1C] ; this
.text:000009B8                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000009BD                 mov     eax, [ebp+arg_0]
.text:000009C0                 push    edx
.text:000009C1                 mov     ecx, ebp
.text:000009C3                 push    eax
.text:000009C4                 lea     edx, $LN9
.text:000009CA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000009CF                 pop     eax
.text:000009D0                 pop     edx
.text:000009D1                 mov     ecx, [ebp+var_C]
.text:000009D4                 mov     large fs:0, ecx
.text:000009DB                 pop     ecx
.text:000009DC                 add     esp, 24h
.text:000009DF                 cmp     ebp, esp
.text:000009E1                 call    __RTC_CheckEsp
.text:000009E6                 mov     esp, ebp
.text:000009E8                 pop     ebp
.text:000009E9                 retn    8
.text:000009E9 ?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z endp
.text:000009E9
.text:000009E9 ; ---------------------------------------------------------------------------
.text:000009EC $LN9            dd 1                    ; DATA XREF: NArchive::NZip::BytesToString(CBuffer<uchar> const &)+94o
.text:000009F0                 dd offset $LN8
.text:000009F4 $LN8            dd 0FFFFFFE4h, 0Ch      ; DATA XREF: .text:000009F0o
.text:000009FC                 dd offset $LN6
.text:00000A00 $LN6            dd 0CCCC0073h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:000009FCo
.text:00000A10
.text:00000A10 ; =============== S U B R O U T I N E =======================================
.text:00000A10
.text:00000A10 ; Attributes: bp-based frame
.text:00000A10
.text:00000A10 ; __int32 __stdcall NArchive::NZip::CHandler::GetNumberOfItems(NArchive::NZip::CHandler *this, unsigned int *)
.text:00000A10                 public ?GetNumberOfItems@CHandler@NZip@NArchive@@UAGJPAI@Z
.text:00000A10 ?GetNumberOfItems@CHandler@NZip@NArchive@@UAGJPAI@Z proc near
.text:00000A10                                         ; DATA XREF: .rdata:00004388o
.text:00000A10
.text:00000A10 this            = dword ptr  8
.text:00000A10 arg_4           = dword ptr  0Ch
.text:00000A10
.text:00000A10                 push    ebp
.text:00000A11                 mov     ebp, esp
.text:00000A13                 mov     ecx, [ebp+this]
.text:00000A16                 add     ecx, 10h
.text:00000A19                 call    ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size(void)
.text:00000A1E                 mov     ecx, [ebp+arg_4]
.text:00000A21                 mov     [ecx], eax
.text:00000A23                 xor     eax, eax
.text:00000A25                 cmp     ebp, esp
.text:00000A27                 call    __RTC_CheckEsp
.text:00000A2C                 pop     ebp
.text:00000A2D                 retn    8
.text:00000A2D ?GetNumberOfItems@CHandler@NZip@NArchive@@UAGJPAI@Z endp
.text:00000A2D
.text:00000A30
.text:00000A30 ; =============== S U B R O U T I N E =======================================
.text:00000A30
.text:00000A30 ; Attributes: bp-based frame
.text:00000A30
.text:00000A30 ; __int32 NArchive::NZip::CHandler::GetProperty(NArchive::NZip::CHandler *__hidden this, unsigned int, unsigned __int32, struct tagPROPVARIANT *)
.text:00000A30                 public ?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:00000A30 ?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z proc near
.text:00000A30                                         ; DATA XREF: .rdata:0000438Co
.text:00000A30
.text:00000A30 var_1E0         = byte ptr -1E0h
.text:00000A30 var_1DD         = byte ptr -1DDh
.text:00000A30 var_1DC         = dword ptr -1DCh
.text:00000A30 var_1D5         = byte ptr -1D5h
.text:00000A30 var_1D4         = dword ptr -1D4h
.text:00000A30 var_1D0         = dword ptr -1D0h
.text:00000A30 var_1CC         = byte ptr -1CCh
.text:00000A30 var_1CB         = byte ptr -1CBh
.text:00000A30 var_1CA         = byte ptr -1CAh
.text:00000A30 var_1C9         = byte ptr -1C9h
.text:00000A30 var_1C8         = dword ptr -1C8h
.text:00000A30 var_1C1         = byte ptr -1C1h
.text:00000A30 var_1C0         = dword ptr -1C0h
.text:00000A30 var_1BC         = dword ptr -1BCh
.text:00000A30 var_1B8         = dword ptr -1B8h
.text:00000A30 var_1B4         = dword ptr -1B4h
.text:00000A30 var_1AE         = byte ptr -1AEh
.text:00000A30 var_1AD         = byte ptr -1ADh
.text:00000A30 var_1AC         = dword ptr -1ACh
.text:00000A30 var_1A7         = byte ptr -1A7h
.text:00000A30 var_1A6         = byte ptr -1A6h
.text:00000A30 var_1A5         = byte ptr -1A5h
.text:00000A30 var_1A4         = byte ptr -1A4h
.text:00000A30 var_1A3         = byte ptr -1A3h
.text:00000A30 var_1A2         = byte ptr -1A2h
.text:00000A30 var_1A1         = byte ptr -1A1h
.text:00000A30 var_1A0         = dword ptr -1A0h
.text:00000A30 var_19C         = dword ptr -19Ch
.text:00000A30 var_198         = dword ptr -198h
.text:00000A30 var_194         = dword ptr -194h
.text:00000A30 var_18C         = dword ptr -18Ch
.text:00000A30 var_188         = byte ptr -188h
.text:00000A30 var_17C         = dword ptr -17Ch
.text:00000A30 var_174         = byte ptr -174h
.text:00000A30 var_15D         = byte ptr -15Dh
.text:00000A30 var_15C         = dword ptr -15Ch
.text:00000A30 var_154         = byte ptr -154h
.text:00000A30 var_13C         = byte ptr -13Ch
.text:00000A30 var_13B         = byte ptr -13Bh
.text:00000A30 var_128         = dword ptr -128h
.text:00000A30 var_120         = byte ptr -120h
.text:00000A30 var_11E         = word ptr -11Eh
.text:00000A30 var_110         = byte ptr -110h
.text:00000A30 var_10F         = byte ptr -10Fh
.text:00000A30 var_F8          = byte ptr -0F8h
.text:00000A30 var_F6          = byte ptr -0F6h
.text:00000A30 var_F4          = word ptr -0F4h
.text:00000A30 var_E8          = byte ptr -0E8h
.text:00000A30 var_D8          = dword ptr -0D8h
.text:00000A30 var_D0          = byte ptr -0D0h
.text:00000A30 var_BC          = dword ptr -0BCh
.text:00000A30 LocalFileTime   = FILETIME ptr -0B0h
.text:00000A30 var_A0          = dword ptr -0A0h
.text:00000A30 var_95          = byte ptr -95h
.text:00000A30 FileTime        = _FILETIME ptr -90h
.text:00000A30 var_80          = _FILETIME ptr -80h
.text:00000A30 var_70          = _FILETIME ptr -70h
.text:00000A30 var_64          = dword ptr -64h
.text:00000A30 var_5C          = dword ptr -5Ch
.text:00000A30 var_50          = _FILETIME ptr -50h
.text:00000A30 var_40          = byte ptr -40h
.text:00000A30 var_30          = dword ptr -30h
.text:00000A30 var_28          = byte ptr -28h
.text:00000A30 var_14          = dword ptr -14h
.text:00000A30 var_10          = dword ptr -10h
.text:00000A30 var_C           = dword ptr -0Ch
.text:00000A30 var_4           = dword ptr -4
.text:00000A30 this            = dword ptr  8
.text:00000A30 arg_4           = dword ptr  0Ch
.text:00000A30 arg_8           = dword ptr  10h
.text:00000A30 arg_C           = dword ptr  14h
.text:00000A30
.text:00000A30 ; FUNCTION CHUNK AT .text:00001261 SIZE 0000003C BYTES
.text:00000A30
.text:00000A30                 push    ebp
.text:00000A31                 mov     ebp, esp
.text:00000A33                 push    0FFFFFFFFh
.text:00000A35                 push    offset __ehhandler$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:00000A3A                 mov     eax, large fs:0
.text:00000A40                 push    eax
.text:00000A41                 push    ecx
.text:00000A42                 sub     esp, 1D0h
.text:00000A48                 push    ebx
.text:00000A49                 push    esi
.text:00000A4A                 push    edi             ; unsigned int
.text:00000A4B                 lea     edi, [ebp+var_1E0]
.text:00000A51                 mov     ecx, 74h ; 't'
.text:00000A56                 mov     eax, 0CCCCCCCCh
.text:00000A5B                 rep stosd
.text:00000A5D                 mov     eax, dword ptr ds:___security_cookie
.text:00000A62                 xor     eax, ebp
.text:00000A64                 mov     [ebp+var_14], eax
.text:00000A67                 push    eax             ; struct _FILETIME *
.text:00000A68                 lea     eax, [ebp+var_C]
.text:00000A6B                 mov     large fs:0, eax
.text:00000A71                 mov     [ebp+var_10], esp
.text:00000A74                 mov     [ebp+var_4], 0
.text:00000A7B                 lea     ecx, [ebp+var_28] ; this
.text:00000A7E                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00000A83                 mov     [ebp+var_194], eax
.text:00000A89                 mov     byte ptr [ebp+var_4], 1
.text:00000A8D                 mov     eax, [ebp+arg_4]
.text:00000A90                 push    eax
.text:00000A91                 mov     ecx, [ebp+this]
.text:00000A94                 add     ecx, 10h
.text:00000A97                 call    ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[](uint)
.text:00000A9C                 mov     [ebp+var_198], eax
.text:00000AA2                 mov     ecx, [ebp+var_198]
.text:00000AA8                 mov     [ebp+var_30], ecx
.text:00000AAB                 mov     edx, [ebp+arg_8]
.text:00000AAE                 mov     [ebp+var_19C], edx
.text:00000AB4                 mov     eax, [ebp+var_19C]
.text:00000ABA                 sub     eax, 3
.text:00000ABD                 mov     [ebp+var_19C], eax
.text:00000AC3                 cmp     [ebp+var_19C], 32h ; '2' ; switch 51 cases
.text:00000ACA                 ja      $LN50           ; jumptable 00000ADD default case
.text:00000AD0                 mov     ecx, [ebp+var_19C]
.text:00000AD6                 movzx   edx, ds:$LN65[ecx]
.text:00000ADD                 jmp     ds:$LN87[edx*4] ; switch jump
.text:00000AE4 ; ---------------------------------------------------------------------------
.text:00000AE4
.text:00000AE4 $LN49:                                  ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:00000AE4                                         ; DATA XREF: .text:$LN87o
.text:00000AE4                 lea     ecx, [ebp+var_40] ; jumptable 00000ADD case 0
.text:00000AE7                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000AEC                 mov     [ebp+var_1A0], eax
.text:00000AF2                 mov     byte ptr [ebp+var_4], 2
.text:00000AF6                 mov     eax, [ebp+this]
.text:00000AF9                 mov     ecx, [eax+0CCh]
.text:00000AFF                 push    ecx             ; unsigned int
.text:00000B00                 mov     edx, [ebp+this]
.text:00000B03                 movzx   eax, byte ptr [edx+0C9h]
.text:00000B0A                 push    eax             ; bool
.text:00000B0B                 lea     ecx, [ebp+var_40]
.text:00000B0E                 push    ecx             ; struct UString *
.text:00000B0F                 mov     edx, [ebp+var_30]
.text:00000B12                 add     edx, 20h ; ' '
.text:00000B15                 push    edx             ; struct AString *
.text:00000B16                 mov     ecx, [ebp+var_30] ; this
.text:00000B19                 call    ?GetUnicodeString@CItem@NZip@NArchive@@QBEXABVAString@@AAVUString@@_NI@Z ; NArchive::NZip::CItem::GetUnicodeString(AString const &,UString &,bool,uint)
.text:00000B1E                 lea     eax, [ebp+var_40]
.text:00000B21                 push    eax             ; this
.text:00000B22                 call    ?ConvertToOSName2@NItemName@NArchive@@YGXAAVUString@@@Z ; NArchive::NItemName::ConvertToOSName2(UString &)
.text:00000B27                 lea     ecx, [ebp+var_40]
.text:00000B2A                 push    ecx
.text:00000B2B                 lea     ecx, [ebp+var_28]
.text:00000B2E                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=(UString const &)
.text:00000B33                 mov     byte ptr [ebp+var_4], 1
.text:00000B37                 lea     ecx, [ebp+var_40] ; this
.text:00000B3A                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000B3F                 jmp     $LN50           ; jumptable 00000ADD default case
.text:00000B44 ; ---------------------------------------------------------------------------
.text:00000B44
.text:00000B44 $LN48:                                  ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:00000B44                                         ; DATA XREF: .text:$LN87o
.text:00000B44                 mov     ecx, [ebp+var_30] ; jumptable 00000ADD case 3
.text:00000B47                 call    ?IsDir@CItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CItem::IsDir(void)
.text:00000B4C                 mov     [ebp+var_1A1], al
.text:00000B52                 movzx   edx, [ebp+var_1A1]
.text:00000B59                 push    edx
.text:00000B5A                 lea     ecx, [ebp+var_28]
.text:00000B5D                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=(bool)
.text:00000B62                 jmp     $LN50           ; jumptable 00000ADD default case
.text:00000B67 ; ---------------------------------------------------------------------------
.text:00000B67
.text:00000B67 $LN47:                                  ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:00000B67                                         ; DATA XREF: .text:$LN87o
.text:00000B67                 mov     eax, [ebp+var_30] ; jumptable 00000ADD case 4
.text:00000B6A                 mov     ecx, [eax+0Ch]
.text:00000B6D                 push    ecx
.text:00000B6E                 mov     edx, [eax+8]
.text:00000B71                 push    edx
.text:00000B72                 lea     ecx, [ebp+var_28]
.text:00000B75                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000B7A                 jmp     $LN50           ; jumptable 00000ADD default case
.text:00000B7F ; ---------------------------------------------------------------------------
.text:00000B7F
.text:00000B7F $LN46:                                  ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:00000B7F                                         ; DATA XREF: .text:$LN87o
.text:00000B7F                 mov     eax, [ebp+var_30] ; jumptable 00000ADD case 5
.text:00000B82                 mov     ecx, [eax+14h]
.text:00000B85                 push    ecx
.text:00000B86                 mov     edx, [eax+10h]
.text:00000B89                 push    edx
.text:00000B8A                 lea     ecx, [ebp+var_28]
.text:00000B8D                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000B92                 jmp     $LN50           ; jumptable 00000ADD default case
.text:00000B97 ; ---------------------------------------------------------------------------
.text:00000B97
.text:00000B97 $LN45:                                  ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:00000B97                                         ; DATA XREF: .text:$LN87o
.text:00000B97                 lea     eax, [ebp+var_50] ; jumptable 00000ADD case 37
.text:00000B9A                 push    eax             ; struct _FILETIME *
.text:00000B9B                 push    0               ; unsigned int
.text:00000B9D                 mov     ecx, [ebp+var_30]
.text:00000BA0                 add     ecx, 48h ; 'H'  ; this
.text:00000BA3                 call    ?GetNtfsTime@CExtraBlock@NZip@NArchive@@QBE_NIAAU_FILETIME@@@Z ; NArchive::NZip::CExtraBlock::GetNtfsTime(uint,_FILETIME &)
.text:00000BA8                 mov     [ebp+var_1A2], al
.text:00000BAE                 movzx   ecx, [ebp+var_1A2]
.text:00000BB5                 test    ecx, ecx
.text:00000BB7                 jz      short loc_BC2
.text:00000BB9                 mov     [ebp+var_64], 0
.text:00000BC0                 jmp     short loc_BF6
.text:00000BC2 ; ---------------------------------------------------------------------------
.text:00000BC2
.text:00000BC2 loc_BC2:                                ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+187j
.text:00000BC2                 lea     edx, [ebp+var_5C]
.text:00000BC5                 push    edx             ; unsigned int *
.text:00000BC6                 push    0               ; unsigned int
.text:00000BC8                 push    1               ; bool
.text:00000BCA                 mov     ecx, [ebp+var_30]
.text:00000BCD                 add     ecx, 48h ; 'H'  ; this
.text:00000BD0                 call    ?GetUnixTime@CExtraBlock@NZip@NArchive@@QBE_N_NIAAI@Z ; NArchive::NZip::CExtraBlock::GetUnixTime(bool,uint,uint &)
.text:00000BD5                 mov     [ebp+var_1A3], al
.text:00000BDB                 movzx   eax, [ebp+var_1A3]
.text:00000BE2                 test    eax, eax
.text:00000BE4                 jz      short loc_BEF
.text:00000BE6                 mov     [ebp+var_64], 1
.text:00000BED                 jmp     short loc_BF6
.text:00000BEF ; ---------------------------------------------------------------------------
.text:00000BEF
.text:00000BEF loc_BEF:                                ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1B4j
.text:00000BEF                 mov     [ebp+var_64], 2
.text:00000BF6
.text:00000BF6 loc_BF6:                                ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+190j
.text:00000BF6                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1BDj
.text:00000BF6                 mov     ecx, [ebp+var_64]
.text:00000BF9                 push    ecx
.text:00000BFA                 lea     ecx, [ebp+var_28]
.text:00000BFD                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:00000C02                 jmp     $LN50           ; jumptable 00000ADD default case
.text:00000C07 ; ---------------------------------------------------------------------------
.text:00000C07
.text:00000C07 $LN40_0:                                ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:00000C07                                         ; DATA XREF: .text:$LN87o
.text:00000C07                 lea     edx, [ebp+var_70] ; jumptable 00000ADD case 7
.text:00000C0A                 push    edx             ; struct _FILETIME *
.text:00000C0B                 push    2               ; unsigned int
.text:00000C0D                 mov     ecx, [ebp+var_30]
.text:00000C10                 add     ecx, 48h ; 'H'  ; this
.text:00000C13                 call    ?GetNtfsTime@CExtraBlock@NZip@NArchive@@QBE_NIAAU_FILETIME@@@Z ; NArchive::NZip::CExtraBlock::GetNtfsTime(uint,_FILETIME &)
.text:00000C18                 mov     [ebp+var_1A4], al
.text:00000C1E                 movzx   eax, [ebp+var_1A4]
.text:00000C25                 test    eax, eax
.text:00000C27                 jz      short loc_C35
.text:00000C29                 lea     ecx, [ebp+var_70]
.text:00000C2C                 push    ecx
.text:00000C2D                 lea     ecx, [ebp+var_28]
.text:00000C30                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=(_FILETIME const &)
.text:00000C35
.text:00000C35 loc_C35:                                ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1F7j
.text:00000C35                 jmp     $LN50           ; jumptable 00000ADD default case
.text:00000C3A ; ---------------------------------------------------------------------------
.text:00000C3A
.text:00000C3A $LN38_0:                                ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:00000C3A                                         ; DATA XREF: .text:$LN87o
.text:00000C3A                 lea     edx, [ebp+var_80] ; jumptable 00000ADD case 8
.text:00000C3D                 push    edx             ; struct _FILETIME *
.text:00000C3E                 push    1               ; unsigned int
.text:00000C40                 mov     ecx, [ebp+var_30]
.text:00000C43                 add     ecx, 48h ; 'H'  ; this
.text:00000C46                 call    ?GetNtfsTime@CExtraBlock@NZip@NArchive@@QBE_NIAAU_FILETIME@@@Z ; NArchive::NZip::CExtraBlock::GetNtfsTime(uint,_FILETIME &)
.text:00000C4B                 mov     [ebp+var_1A5], al
.text:00000C51                 movzx   eax, [ebp+var_1A5]
.text:00000C58                 test    eax, eax
.text:00000C5A                 jz      short loc_C68
.text:00000C5C                 lea     ecx, [ebp+var_80]
.text:00000C5F                 push    ecx
.text:00000C60                 lea     ecx, [ebp+var_28]
.text:00000C63                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=(_FILETIME const &)
.text:00000C68
.text:00000C68 loc_C68:                                ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+22Aj
.text:00000C68                 jmp     $LN50           ; jumptable 00000ADD default case
.text:00000C6D ; ---------------------------------------------------------------------------
.text:00000C6D
.text:00000C6D $LN36:                                  ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:00000C6D                                         ; DATA XREF: .text:$LN87o
.text:00000C6D                 mov     [ebp+var_95], 1 ; jumptable 00000ADD case 9
.text:00000C74                 lea     edx, [ebp+FileTime]
.text:00000C7A                 push    edx             ; struct _FILETIME *
.text:00000C7B                 push    0               ; unsigned int
.text:00000C7D                 mov     ecx, [ebp+var_30]
.text:00000C80                 add     ecx, 48h ; 'H'  ; this
.text:00000C83                 call    ?GetNtfsTime@CExtraBlock@NZip@NArchive@@QBE_NIAAU_FILETIME@@@Z ; NArchive::NZip::CExtraBlock::GetNtfsTime(uint,_FILETIME &)
.text:00000C88                 mov     [ebp+var_1A6], al
.text:00000C8E                 movzx   eax, [ebp+var_1A6]
.text:00000C95                 test    eax, eax
.text:00000C97                 jnz     loc_D46
.text:00000C9D                 mov     [ebp+var_A0], 0
.text:00000CA7                 lea     ecx, [ebp+var_A0]
.text:00000CAD                 push    ecx             ; unsigned int *
.text:00000CAE                 push    0               ; unsigned int
.text:00000CB0                 push    1               ; bool
.text:00000CB2                 mov     ecx, [ebp+var_30]
.text:00000CB5                 add     ecx, 48h ; 'H'  ; this
.text:00000CB8                 call    ?GetUnixTime@CExtraBlock@NZip@NArchive@@QBE_N_NIAAI@Z ; NArchive::NZip::CExtraBlock::GetUnixTime(bool,uint,uint &)
.text:00000CBD                 mov     [ebp+var_1A7], al
.text:00000CC3                 movzx   edx, [ebp+var_1A7]
.text:00000CCA                 test    edx, edx
.text:00000CCC                 jz      short loc_CE3
.text:00000CCE                 lea     eax, [ebp+FileTime]
.text:00000CD4                 push    eax             ; unsigned int
.text:00000CD5                 mov     ecx, [ebp+var_A0]
.text:00000CDB                 push    ecx             ; this
.text:00000CDC                 call    ?UnixTimeToFileTime@NTime@NWindows@@YGXIAAU_FILETIME@@@Z ; NWindows::NTime::UnixTimeToFileTime(uint,_FILETIME &)
.text:00000CE1                 jmp     short loc_D46
.text:00000CE3 ; ---------------------------------------------------------------------------
.text:00000CE3
.text:00000CE3 loc_CE3:                                ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+29Cj
.text:00000CE3                 mov     edx, [ebp+var_30]
.text:00000CE6                 cmp     dword ptr [edx+18h], 0
.text:00000CEA                 jnz     short loc_CF5
.text:00000CEC                 mov     [ebp+var_95], 0
.text:00000CF3                 jmp     short loc_D46
.text:00000CF5 ; ---------------------------------------------------------------------------
.text:00000CF5
.text:00000CF5 loc_CF5:                                ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+2BAj
.text:00000CF5                 lea     eax, [ebp+LocalFileTime]
.text:00000CFB                 push    eax             ; unsigned int
.text:00000CFC                 mov     ecx, [ebp+var_30]
.text:00000CFF                 mov     edx, [ecx+18h]
.text:00000D02                 push    edx             ; this
.text:00000D03                 call    ?DosTimeToFileTime@NTime@NWindows@@YG_NIAAU_FILETIME@@@Z ; NWindows::NTime::DosTimeToFileTime(uint,_FILETIME &)
.text:00000D08                 movzx   eax, al
.text:00000D0B                 test    eax, eax
.text:00000D0D                 jz      short loc_D30
.text:00000D0F                 mov     esi, esp
.text:00000D11                 lea     ecx, [ebp+FileTime]
.text:00000D17                 push    ecx             ; lpFileTime
.text:00000D18                 lea     edx, [ebp+LocalFileTime]
.text:00000D1E                 push    edx             ; lpLocalFileTime
.text:00000D1F                 call    dword ptr ds:__imp__LocalFileTimeToFileTime@8 ; LocalFileTimeToFileTime(x,x)
.text:00000D25                 cmp     esi, esp
.text:00000D27                 call    __RTC_CheckEsp
.text:00000D2C                 test    eax, eax
.text:00000D2E                 jnz     short loc_D46
.text:00000D30
.text:00000D30 loc_D30:                                ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+2DDj
.text:00000D30                 mov     [ebp+FileTime.dwLowDateTime], 0
.text:00000D3A                 mov     eax, [ebp+FileTime.dwLowDateTime]
.text:00000D40                 mov     [ebp+FileTime.dwHighDateTime], eax
.text:00000D46
.text:00000D46 loc_D46:                                ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+267j
.text:00000D46                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+2B1j ...
.text:00000D46                 movzx   ecx, [ebp+var_95]
.text:00000D4D                 test    ecx, ecx
.text:00000D4F                 jz      short loc_D60
.text:00000D51                 lea     edx, [ebp+FileTime]
.text:00000D57                 push    edx
.text:00000D58                 lea     ecx, [ebp+var_28]
.text:00000D5B                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=(_FILETIME const &)
.text:00000D60
.text:00000D60 loc_D60:                                ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+31Fj
.text:00000D60                 jmp     $LN50           ; jumptable 00000ADD default case
.text:00000D65 ; ---------------------------------------------------------------------------
.text:00000D65
.text:00000D65 $LN27_0:                                ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:00000D65                                         ; DATA XREF: .text:$LN87o
.text:00000D65                 mov     ecx, [ebp+var_30] ; jumptable 00000ADD case 6
.text:00000D68                 call    ?GetWinAttrib@CItem@NZip@NArchive@@QBEIXZ ; NArchive::NZip::CItem::GetWinAttrib(void)
.text:00000D6D                 mov     [ebp+var_1AC], eax
.text:00000D73                 mov     eax, [ebp+var_1AC]
.text:00000D79                 push    eax
.text:00000D7A                 lea     ecx, [ebp+var_28]
.text:00000D7D                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:00000D82                 jmp     $LN50           ; jumptable 00000ADD default case
.text:00000D87 ; ---------------------------------------------------------------------------
.text:00000D87
.text:00000D87 $LN26:                                  ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:00000D87                                         ; DATA XREF: .text:$LN87o
.text:00000D87                 lea     ecx, [ebp+var_BC] ; jumptable 00000ADD case 50
.text:00000D8D                 push    ecx             ; unsigned int *
.text:00000D8E                 mov     ecx, [ebp+var_30] ; this
.text:00000D91                 call    ?GetPosixAttrib@CItem@NZip@NArchive@@QBE_NAAI@Z ; NArchive::NZip::CItem::GetPosixAttrib(uint &)
.text:00000D96                 mov     [ebp+var_1AD], al
.text:00000D9C                 movzx   edx, [ebp+var_1AD]
.text:00000DA3                 test    edx, edx
.text:00000DA5                 jz      short loc_DB6
.text:00000DA7                 mov     eax, [ebp+var_BC]
.text:00000DAD                 push    eax
.text:00000DAE                 lea     ecx, [ebp+var_28]
.text:00000DB1                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:00000DB6
.text:00000DB6 loc_DB6:                                ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+375j
.text:00000DB6                 jmp     $LN50           ; jumptable 00000ADD default case
.text:00000DBB ; ---------------------------------------------------------------------------
.text:00000DBB
.text:00000DBB $LN24:                                  ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:00000DBB                                         ; DATA XREF: .text:$LN87o
.text:00000DBB                 mov     ecx, [ebp+var_30] ; jumptable 00000ADD case 12
.text:00000DBE                 call    ?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsEncrypted(void)
.text:00000DC3                 mov     [ebp+var_1AE], al
.text:00000DC9                 movzx   ecx, [ebp+var_1AE]
.text:00000DD0                 push    ecx
.text:00000DD1                 lea     ecx, [ebp+var_28]
.text:00000DD4                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=(bool)
.text:00000DD9                 jmp     $LN50           ; jumptable 00000ADD default case
.text:00000DDE ; ---------------------------------------------------------------------------
.text:00000DDE
.text:00000DDE $LN23:                                  ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:00000DDE                                         ; DATA XREF: .text:$LN87o
.text:00000DDE                 mov     ecx, [ebp+var_30] ; jumptable 00000ADD case 25
.text:00000DE1                 add     ecx, 54h ; 'T'
.text:00000DE4                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00000DE9                 mov     [ebp+var_1B4], eax
.text:00000DEF                 cmp     [ebp+var_1B4], 0
.text:00000DF6                 jz      loc_E92
.text:00000DFC                 lea     ecx, [ebp+var_D0] ; this
.text:00000E02                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000E07                 mov     [ebp+var_1B8], eax
.text:00000E0D                 mov     byte ptr [ebp+var_4], 3
.text:00000E11                 mov     edx, [ebp+var_30]
.text:00000E14                 add     edx, 54h ; 'T'
.text:00000E17                 push    edx
.text:00000E18                 lea     eax, [ebp+var_188]
.text:00000E1E                 push    eax
.text:00000E1F                 call    ?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z ; NArchive::NZip::BytesToString(CBuffer<uchar> const &)
.text:00000E24                 mov     [ebp+var_1BC], eax
.text:00000E2A                 mov     ecx, [ebp+var_1BC]
.text:00000E30                 mov     [ebp+var_1C0], ecx
.text:00000E36                 mov     byte ptr [ebp+var_4], 4
.text:00000E3A                 mov     edx, [ebp+this]
.text:00000E3D                 mov     eax, [edx+0CCh]
.text:00000E43                 push    eax             ; unsigned int
.text:00000E44                 mov     ecx, [ebp+this]
.text:00000E47                 movzx   edx, byte ptr [ecx+0C9h]
.text:00000E4E                 push    edx             ; bool
.text:00000E4F                 lea     eax, [ebp+var_D0]
.text:00000E55                 push    eax             ; struct UString *
.text:00000E56                 mov     ecx, [ebp+var_1C0]
.text:00000E5C                 push    ecx             ; struct AString *
.text:00000E5D                 mov     ecx, [ebp+var_30] ; this
.text:00000E60                 call    ?GetUnicodeString@CItem@NZip@NArchive@@QBEXABVAString@@AAVUString@@_NI@Z ; NArchive::NZip::CItem::GetUnicodeString(AString const &,UString &,bool,uint)
.text:00000E65                 mov     byte ptr [ebp+var_4], 3
.text:00000E69                 lea     ecx, [ebp+var_188] ; this
.text:00000E6F                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000E74                 lea     edx, [ebp+var_D0]
.text:00000E7A                 push    edx
.text:00000E7B                 lea     ecx, [ebp+var_28]
.text:00000E7E                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=(UString const &)
.text:00000E83                 mov     byte ptr [ebp+var_4], 1
.text:00000E87                 lea     ecx, [ebp+var_D0] ; this
.text:00000E8D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000E92
.text:00000E92 loc_E92:                                ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+3C6j
.text:00000E92                 jmp     $LN50           ; jumptable 00000ADD default case
.text:00000E97 ; ---------------------------------------------------------------------------
.text:00000E97
.text:00000E97 $LN21_0:                                ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:00000E97                                         ; DATA XREF: .text:$LN87o
.text:00000E97                 mov     ecx, [ebp+var_30] ; jumptable 00000ADD case 16
.text:00000E9A                 call    ?IsThereCrc@CItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CItem::IsThereCrc(void)
.text:00000E9F                 mov     [ebp+var_1C1], al
.text:00000EA5                 movzx   eax, [ebp+var_1C1]
.text:00000EAC                 test    eax, eax
.text:00000EAE                 jz      short loc_EBF
.text:00000EB0                 mov     ecx, [ebp+var_30]
.text:00000EB3                 mov     edx, [ecx+1Ch]
.text:00000EB6                 push    edx
.text:00000EB7                 lea     ecx, [ebp+var_28]
.text:00000EBA                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:00000EBF
.text:00000EBF loc_EBF:                                ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+47Ej
.text:00000EBF                 jmp     $LN50           ; jumptable 00000ADD default case
.text:00000EC4 ; ---------------------------------------------------------------------------
.text:00000EC4
.text:00000EC4 $LN19_0:                                ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:00000EC4                                         ; DATA XREF: .text:$LN87o
.text:00000EC4                 mov     eax, [ebp+var_30] ; jumptable 00000ADD case 19
.text:00000EC7                 movzx   ecx, word ptr [eax+2]
.text:00000ECB                 mov     [ebp+var_D8], ecx
.text:00000ED1                 lea     ecx, [ebp+var_E8]
.text:00000ED7                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00000EDC                 mov     [ebp+var_1C8], eax
.text:00000EE2                 mov     byte ptr [ebp+var_4], 5
.text:00000EE6                 mov     ecx, [ebp+var_30] ; this
.text:00000EE9                 call    ?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsEncrypted(void)
.text:00000EEE                 mov     [ebp+var_1C9], al
.text:00000EF4                 movzx   edx, [ebp+var_1C9]
.text:00000EFB                 test    edx, edx
.text:00000EFD                 jz      loc_1097
.text:00000F03                 cmp     [ebp+var_D8], 63h ; 'c'
.text:00000F0A                 jnz     loc_F94
.text:00000F10                 mov     eax, ds:_kMethod_AES
.text:00000F15                 push    eax
.text:00000F16                 lea     ecx, [ebp+var_E8]
.text:00000F1C                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000F21                 lea     ecx, [ebp+var_F8] ; this
.text:00000F27                 call    ??0CWzAesExtra@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CWzAesExtra::CWzAesExtra(void)
.text:00000F2C                 lea     ecx, [ebp+var_F8]
.text:00000F32                 push    ecx             ; struct NArchive::NZip::CWzAesExtra *
.text:00000F33                 mov     ecx, [ebp+var_30]
.text:00000F36                 add     ecx, 48h ; 'H'  ; this
.text:00000F39                 call    ?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z ; NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &)
.text:00000F3E                 mov     [ebp+var_1CA], al
.text:00000F44                 movzx   edx, [ebp+var_1CA]
.text:00000F4B                 test    edx, edx
.text:00000F4D                 jz      short loc_F8F
.text:00000F4F                 mov     [ebp+var_110], 2Dh ; '-'
.text:00000F56                 lea     eax, [ebp+var_10F]
.text:00000F5C                 push    eax             ; char *
.text:00000F5D                 movzx   ecx, [ebp+var_F6]
.text:00000F64                 add     ecx, 1
.text:00000F67                 shl     ecx, 6
.text:00000F6A                 push    ecx             ; unsigned int
.text:00000F6B                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:00000F70                 lea     edx, [ebp+var_110]
.text:00000F76                 push    edx
.text:00000F77                 lea     ecx, [ebp+var_E8]
.text:00000F7D                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000F82                 movzx   eax, [ebp+var_F4]
.text:00000F89                 mov     [ebp+var_D8], eax
.text:00000F8F
.text:00000F8F loc_F8F:                                ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+51Dj
.text:00000F8F                 jmp     loc_108A
.text:00000F94 ; ---------------------------------------------------------------------------
.text:00000F94
.text:00000F94 loc_F94:                                ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+4DAj
.text:00000F94                 mov     ecx, [ebp+var_30] ; this
.text:00000F97                 call    ?IsStrongEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsStrongEncrypted(void)
.text:00000F9C                 mov     [ebp+var_1CB], al
.text:00000FA2                 movzx   ecx, [ebp+var_1CB]
.text:00000FA9                 test    ecx, ecx
.text:00000FAB                 jz      loc_1078
.text:00000FB1                 xor     edx, edx
.text:00000FB3                 mov     [ebp+var_11E], dx
.text:00000FBA                 lea     eax, [ebp+var_120]
.text:00000FC0                 push    eax             ; struct NArchive::NZip::CStrongCryptoExtra *
.text:00000FC1                 mov     ecx, [ebp+var_30]
.text:00000FC4                 add     ecx, 48h ; 'H'  ; this
.text:00000FC7                 call    ?GetStrongCrypto@CExtraBlock@NZip@NArchive@@QBE_NAAUCStrongCryptoExtra@23@@Z ; NArchive::NZip::CExtraBlock::GetStrongCrypto(NArchive::NZip::CStrongCryptoExtra &)
.text:00000FCC                 mov     [ebp+var_1CC], al
.text:00000FD2                 movzx   ecx, [ebp+var_1CC]
.text:00000FD9                 test    ecx, ecx
.text:00000FDB                 jz      loc_1065
.text:00000FE1                 movzx   edx, [ebp+var_11E]
.text:00000FE8                 push    edx             ; unsigned int
.text:00000FE9                 push    offset unk_B    ; struct NArchive::NZip::CIdToNamePair *
.text:00000FEB                 push    offset _k_StrongCryptoPairs ; this
.text:00000FF0                 call    ?FindNameForId@NZip@NArchive@@YGPBDPBUCIdToNamePair@12@II@Z ; NArchive::NZip::FindNameForId(NArchive::NZip::CIdToNamePair const *,uint,uint)
.text:00000FF5                 mov     [ebp+var_1D0], eax
.text:00000FFB                 mov     eax, [ebp+var_1D0]
.text:00001001                 mov     [ebp+var_128], eax
.text:00001007                 cmp     [ebp+var_128], 0
.text:0000100E                 jz      short loc_1024
.text:00001010                 mov     ecx, [ebp+var_128]
.text:00001016                 push    ecx
.text:00001017                 lea     ecx, [ebp+var_E8]
.text:0000101D                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00001022                 jmp     short loc_1063
.text:00001024 ; ---------------------------------------------------------------------------
.text:00001024
.text:00001024 loc_1024:                               ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+5DEj
.text:00001024                 mov     edx, ds:_kMethod_StrongCrypto
.text:0000102A                 push    edx
.text:0000102B                 lea     ecx, [ebp+var_E8]
.text:00001031                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00001036                 mov     [ebp+var_13C], 3Ah ; ':'
.text:0000103D                 lea     eax, [ebp+var_13B]
.text:00001043                 push    eax             ; char *
.text:00001044                 movzx   ecx, [ebp+var_11E]
.text:0000104B                 push    ecx             ; unsigned int
.text:0000104C                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:00001051                 lea     edx, [ebp+var_13C]
.text:00001057                 push    edx
.text:00001058                 lea     ecx, [ebp+var_E8]
.text:0000105E                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00001063
.text:00001063 loc_1063:                               ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+5F2j
.text:00001063                 jmp     short loc_1076
.text:00001065 ; ---------------------------------------------------------------------------
.text:00001065
.text:00001065 loc_1065:                               ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+5ABj
.text:00001065                 mov     eax, ds:_kMethod_StrongCrypto
.text:0000106A                 push    eax
.text:0000106B                 lea     ecx, [ebp+var_E8]
.text:00001071                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00001076
.text:00001076 loc_1076:                               ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *):loc_1063j
.text:00001076                 jmp     short loc_108A
.text:00001078 ; ---------------------------------------------------------------------------
.text:00001078
.text:00001078 loc_1078:                               ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+57Bj
.text:00001078                 mov     ecx, ds:_kMethod_ZipCrypto
.text:0000107E                 push    ecx
.text:0000107F                 lea     ecx, [ebp+var_E8]
.text:00001085                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:0000108A
.text:0000108A loc_108A:                               ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *):loc_F8Fj
.text:0000108A                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *):loc_1076j
.text:0000108A                 push    20h ; ' '
.text:0000108C                 lea     ecx, [ebp+var_E8]
.text:00001092                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:00001097
.text:00001097 loc_1097:                               ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+4CDj
.text:00001097                 mov     [ebp+var_15C], 0
.text:000010A1                 cmp     [ebp+var_D8], 0Bh
.text:000010A8                 jnb     short loc_10BF
.text:000010AA                 mov     edx, [ebp+var_D8]
.text:000010B0                 mov     eax, _kMethods[edx*4]
.text:000010B7                 mov     [ebp+var_15C], eax
.text:000010BD                 jmp     short loc_110C
.text:000010BF ; ---------------------------------------------------------------------------
.text:000010BF
.text:000010BF loc_10BF:                               ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+678j
.text:000010BF                 mov     ecx, [ebp+var_D8]
.text:000010C5                 push    ecx             ; unsigned int
.text:000010C6                 push    (offset $SG73947+2) ; struct NArchive::NZip::CIdToNamePair *
.text:000010C8                 push    offset _k_MethodIdNamePairs ; this
.text:000010CD                 call    ?FindNameForId@NZip@NArchive@@YGPBDPBUCIdToNamePair@12@II@Z ; NArchive::NZip::FindNameForId(NArchive::NZip::CIdToNamePair const *,uint,uint)
.text:000010D2                 mov     [ebp+var_1D4], eax
.text:000010D8                 mov     edx, [ebp+var_1D4]
.text:000010DE                 mov     [ebp+var_15C], edx
.text:000010E4                 cmp     [ebp+var_15C], 0
.text:000010EB                 jnz     short loc_110C
.text:000010ED                 lea     eax, [ebp+var_154]
.text:000010F3                 push    eax             ; char *
.text:000010F4                 mov     ecx, [ebp+var_D8]
.text:000010FA                 push    ecx             ; unsigned int
.text:000010FB                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:00001100                 lea     edx, [ebp+var_154]
.text:00001106                 mov     [ebp+var_15C], edx
.text:0000110C
.text:0000110C loc_110C:                               ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+68Dj
.text:0000110C                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6BBj
.text:0000110C                 mov     eax, [ebp+var_15C]
.text:00001112                 push    eax
.text:00001113                 lea     ecx, [ebp+var_E8]
.text:00001119                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:0000111E                 cmp     [ebp+var_D8], 0Eh
.text:00001125                 jnz     short loc_1150
.text:00001127                 mov     ecx, [ebp+var_30] ; this
.text:0000112A                 call    ?IsLzmaEOS@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsLzmaEOS(void)
.text:0000112F                 mov     [ebp+var_1D5], al
.text:00001135                 movzx   ecx, [ebp+var_1D5]
.text:0000113C                 test    ecx, ecx
.text:0000113E                 jz      short loc_1150
.text:00001140                 push    offset $SG74206 ; ":EOS"
.text:00001145                 lea     ecx, [ebp+var_E8]
.text:0000114B                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00001150
.text:00001150 loc_1150:                               ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6F5j
.text:00001150                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+70Ej
.text:00001150                 lea     ecx, [ebp+var_E8]
.text:00001156                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:0000115B                 mov     [ebp+var_1DC], eax
.text:00001161                 mov     edx, [ebp+var_1DC]
.text:00001167                 push    edx
.text:00001168                 lea     ecx, [ebp+var_28]
.text:0000116B                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=(char const *)
.text:00001170                 mov     byte ptr [ebp+var_4], 1
.text:00001174                 lea     ecx, [ebp+var_E8] ; this
.text:0000117A                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000117F                 jmp     $LN50           ; jumptable 00000ADD default case
.text:00001184 ; ---------------------------------------------------------------------------
.text:00001184
.text:00001184 $LN4:                                   ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:00001184                                         ; DATA XREF: .text:$LN87o
.text:00001184                 mov     ecx, [ebp+var_30] ; jumptable 00000ADD case 20
.text:00001187                 call    ?GetHostOS@CItem@NZip@NArchive@@QBEEXZ ; NArchive::NZip::CItem::GetHostOS(void)
.text:0000118C                 mov     [ebp+var_1DD], al
.text:00001192                 mov     al, [ebp+var_1DD]
.text:00001198                 mov     [ebp+var_15D], al
.text:0000119E                 mov     [ebp+var_17C], 0
.text:000011A8                 movzx   ecx, [ebp+var_15D]
.text:000011AF                 cmp     ecx, 14h
.text:000011B2                 jnb     short loc_11CA
.text:000011B4                 movzx   edx, [ebp+var_15D]
.text:000011BB                 mov     eax, _kHostOS[edx*4]
.text:000011C2                 mov     [ebp+var_17C], eax
.text:000011C8                 jmp     short loc_11EA
.text:000011CA ; ---------------------------------------------------------------------------
.text:000011CA
.text:000011CA loc_11CA:                               ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+782j
.text:000011CA                 lea     ecx, [ebp+var_174]
.text:000011D0                 push    ecx             ; char *
.text:000011D1                 movzx   edx, [ebp+var_15D]
.text:000011D8                 push    edx             ; unsigned int
.text:000011D9                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:000011DE                 lea     eax, [ebp+var_174]
.text:000011E4                 mov     [ebp+var_17C], eax
.text:000011EA
.text:000011EA loc_11EA:                               ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+798j
.text:000011EA                 mov     ecx, [ebp+var_17C]
.text:000011F0                 push    ecx
.text:000011F1                 lea     ecx, [ebp+var_28]
.text:000011F4                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=(char const *)
.text:000011F9                 jmp     short $LN50     ; jumptable 00000ADD default case
.text:000011FB ; ---------------------------------------------------------------------------
.text:000011FB
.text:000011FB $LN1:                                   ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj
.text:000011FB                                         ; DATA XREF: .text:$LN87o
.text:000011FB                 mov     edx, [ebp+var_30] ; jumptable 00000ADD case 30
.text:000011FE                 movzx   eax, byte ptr [edx+4]
.text:00001202                 push    eax
.text:00001203                 lea     ecx, [ebp+var_28]
.text:00001206                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:0000120B
.text:0000120B $LN50:                                  ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+9Aj
.text:0000120B                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADj ...
.text:0000120B                 mov     ecx, [ebp+arg_C] ; jumptable 00000ADD default case
.text:0000120E                 push    ecx             ; struct tagPROPVARIANT *
.text:0000120F                 lea     ecx, [ebp+var_28] ; this
.text:00001212                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:00001217                 mov     [ebp+var_18C], 0
.text:00001221                 mov     byte ptr [ebp+var_4], 0
.text:00001225                 lea     ecx, [ebp+var_28] ; this
.text:00001228                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000122D                 mov     eax, [ebp+var_18C]
.text:00001233                 jmp     short loc_1261
.text:00001233 ?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z endp ; sp-analysis failed
.text:00001233
.text:00001235
.text:00001235 ; =============== S U B R O U T I N E =======================================
.text:00001235
.text:00001235
.text:00001235 __catch$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0 proc near
.text:00001235                                         ; DATA XREF: .xdata$x:00004494o
.text:00001235                 mov     dword ptr [ebp-190h], 8007000Eh
.text:0000123F                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001246                 mov     eax, offset $LN63
.text:0000124B                 retn
.text:0000124B __catch$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0 endp
.text:0000124B
.text:0000124C ; ---------------------------------------------------------------------------
.text:0000124C                 mov     eax, offset __tryend$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$1
.text:00001251                 retn
.text:00001252 ; ---------------------------------------------------------------------------
.text:00001252
.text:00001252 __tryend$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$1:
.text:00001252                                         ; DATA XREF: .text:0000124Co
.text:00001252                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001259                 jmp     short loc_1261
.text:0000125B ; ---------------------------------------------------------------------------
.text:0000125B
.text:0000125B $LN63:                                  ; DATA XREF: __catch$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0+11o
.text:0000125B                 mov     eax, [ebp-190h]
.text:00001261 ; START OF FUNCTION CHUNK FOR ?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:00001261
.text:00001261 loc_1261:                               ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+803j
.text:00001261                                         ; .text:00001259j
.text:00001261                 push    edx
.text:00001262                 mov     ecx, ebp
.text:00001264                 push    eax
.text:00001265                 lea     edx, $LN86
.text:0000126B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001270                 pop     eax
.text:00001271                 pop     edx
.text:00001272                 mov     ecx, [ebp+var_C]
.text:00001275                 mov     large fs:0, ecx
.text:0000127C                 pop     ecx
.text:0000127D                 pop     edi
.text:0000127E                 pop     esi
.text:0000127F                 pop     ebx
.text:00001280                 mov     ecx, [ebp+var_14]
.text:00001283                 xor     ecx, ebp
.text:00001285                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000128A                 add     esp, 1E0h
.text:00001290                 cmp     ebp, esp
.text:00001292                 call    __RTC_CheckEsp
.text:00001297                 mov     esp, ebp
.text:00001299                 pop     ebp
.text:0000129A                 retn    10h
.text:0000129A ; END OF FUNCTION CHUNK FOR ?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:0000129A ; ---------------------------------------------------------------------------
.text:0000129D                 align 10h
.text:000012A0 $LN86           dd 12h                  ; DATA XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+835o
.text:000012A4                 dd offset $LN85
.text:000012A8 $LN85           dd 0FFFFFFD8h, 10h      ; DATA XREF: .text:000012A4o
.text:000012B0                 dd offset $LN66         ; "prop"
.text:000012B4                 dd 0FFFFFFC0h, 0Ch
.text:000012BC                 dd offset $LN67         ; "res"
.text:000012C0                 dd 0FFFFFFB0h, 8
.text:000012C8                 dd offset $LN68         ; "ft"
.text:000012CC                 dd 0FFFFFFA4h, 4
.text:000012D4                 dd offset $LN69         ; "unixTime"
.text:000012D8                 db 90h
.text:000012D9                 db 3 dup(0FFh)
.text:000012DC                 dd 8
.text:000012E0                 dd offset $LN70         ; "ft"
.text:000012E4                 dd 0FFFFFF80h, 8
.text:000012EC                 dd offset $LN71         ; "ft"
.text:000012F0                 dd 0FFFFFF70h, 8
.text:000012F8                 dd offset $LN72         ; "utc"
.text:000012FC                 dd 0FFFFFF60h, 4
.text:00001304                 dd offset $LN73         ; "unixTime"
.text:00001308                 dd 0FFFFFF50h, 8
.text:00001310                 dd offset $LN74         ; "localFileTime"
.text:00001314                 dd 0FFFFFF44h, 4
.text:0000131C                 dd offset $LN75         ; "attrib"
.text:00001320                 dd 0FFFFFF30h, 0Ch
.text:00001328                 dd offset $LN76         ; "res"
.text:0000132C                 dd 0FFFFFF18h, 0Ch
.text:00001334                 dd offset $LN77         ; "m"
.text:00001338                 db 8, 0FFh
.text:0000133A                 dw 0FFFFh
.text:0000133C                 dd 6
.text:00001340                 dd offset $LN78         ; "aesField"
.text:00001344                 dd 0FFFFFEF0h, 10h
.text:0000134C                 dd offset $LN79         ; "s"
.text:00001350                 dd 0FFFFFEE0h, 8
.text:00001358                 dd offset $LN80         ; "f"
.text:0000135C                 dd 0FFFFFEC4h, 10h
.text:00001364                 dd offset $LN81         ; "temp"
.text:00001368                 dd 0FFFFFEACh, 10h
.text:00001370                 dd offset $LN82         ; "temp"
.text:00001374                 dd 0FFFFFE8Ch, 10h
.text:0000137C                 dd offset $LN83         ; "temp"
.text:00001380 $LN83           db 'temp',0             ; DATA XREF: .text:0000137Co
.text:00001385 $LN82           db 'temp',0             ; DATA XREF: .text:00001370o
.text:0000138A $LN81           db 'temp',0             ; DATA XREF: .text:00001364o
.text:0000138F $LN80           db 'f',0                ; DATA XREF: .text:00001358o
.text:00001391 $LN79           db 's',0                ; DATA XREF: .text:0000134Co
.text:00001393 $LN78           db 'aesField',0         ; DATA XREF: .text:00001340o
.text:0000139C $LN77           db 'm',0                ; DATA XREF: .text:00001334o
.text:0000139E $LN76           db 'res',0              ; DATA XREF: .text:00001328o
.text:000013A2 $LN75           db 'attrib',0           ; DATA XREF: .text:0000131Co
.text:000013A9 $LN74           db 'localFileTime',0    ; DATA XREF: .text:00001310o
.text:000013B7 $LN73           db 'unixTime',0         ; DATA XREF: .text:00001304o
.text:000013C0 $LN72           db 'utc',0              ; DATA XREF: .text:000012F8o
.text:000013C4 $LN71           db 'ft',0               ; DATA XREF: .text:000012ECo
.text:000013C7 $LN70           db 'ft',0               ; DATA XREF: .text:000012E0o
.text:000013CA $LN69           db 'unixTime',0         ; DATA XREF: .text:000012D4o
.text:000013D3 $LN68           db 'ft',0               ; DATA XREF: .text:000012C8o
.text:000013D6 $LN67           db 'res',0              ; DATA XREF: .text:000012BCo
.text:000013DA $LN66           db 'prop',0             ; DATA XREF: .text:000012B0o
.text:000013DF                 align 10h
.text:000013E0 $LN87           dd offset $LN49, offset $LN48, offset $LN47, offset $LN46
.text:000013E0                                         ; DATA XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+ADr
.text:000013E0                 dd offset $LN27_0, offset $LN40_0, offset $LN38_0, offset $LN36 ; jump table for switch statement
.text:000013E0                 dd offset $LN24, offset $LN21_0, offset $LN19_0, offset $LN4
.text:000013E0                 dd offset $LN23, offset $LN1, offset $LN45, offset $LN26
.text:000013E0                 dd offset $LN50
.text:00001424 $LN65           db      0,   10h,   10h,     1
.text:00001424                                         ; DATA XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+A6r
.text:00001424                 db      2,     3,     4,     5 ; indirect table for switch statement
.text:00001424                 db      6,     7,   10h,   10h
.text:00001424                 db      8,   10h,   10h,   10h
.text:00001424                 db      9,   10h,   10h,   0Ah
.text:00001424                 db    0Bh,   10h,   10h,   10h
.text:00001424                 db    10h,   0Ch,   10h,   10h
.text:00001424                 db    10h,   10h,   0Dh,   10h
.text:00001424                 db    10h,   10h,   10h,   10h
.text:00001424                 db    10h,   0Eh,   10h,   10h
.text:00001424                 db    10h,   10h,   10h,   10h
.text:00001424                 db    10h,   10h,   10h,   10h
.text:00001424                 db    10h,   10h,   0Fh
.text:00001457                 align 10h
.text:00001460
.text:00001460 ; =============== S U B R O U T I N E =======================================
.text:00001460
.text:00001460 ; Attributes: bp-based frame
.text:00001460
.text:00001460 ; __int32 __thiscall NArchive::NZip::CProgressImp::SetCompletedLocal(NArchive::NZip::CProgressImp *this, char, char)
.text:00001460                 public ?SetCompletedLocal@CProgressImp@NZip@NArchive@@UAEJ_K0@Z
.text:00001460 ?SetCompletedLocal@CProgressImp@NZip@NArchive@@UAEJ_K0@Z proc near
.text:00001460                                         ; DATA XREF: .rdata:const NArchive::NZip::CProgressImp::`vftable'o
.text:00001460
.text:00001460 var_8           = dword ptr -8
.text:00001460 var_4           = dword ptr -4
.text:00001460 arg_0           = byte ptr  8
.text:00001460 arg_8           = byte ptr  10h
.text:00001460
.text:00001460                 push    ebp
.text:00001461                 mov     ebp, esp
.text:00001463                 sub     esp, 8
.text:00001466                 push    esi
.text:00001467                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000146E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001475                 mov     [ebp+var_4], ecx
.text:00001478                 mov     ecx, [ebp+var_4]
.text:0000147B                 add     ecx, 4
.text:0000147E                 call    ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator->(void)
.text:00001483                 mov     [ebp+var_8], eax
.text:00001486                 mov     esi, esp
.text:00001488                 lea     eax, [ebp+arg_8]
.text:0000148B                 push    eax
.text:0000148C                 lea     ecx, [ebp+arg_0]
.text:0000148F                 push    ecx
.text:00001490                 mov     edx, [ebp+var_8]
.text:00001493                 push    edx
.text:00001494                 mov     eax, [ebp+var_8]
.text:00001497                 mov     ecx, [eax]
.text:00001499                 mov     edx, [ecx+10h]
.text:0000149C                 call    edx
.text:0000149E                 cmp     esi, esp
.text:000014A0                 call    __RTC_CheckEsp
.text:000014A5                 pop     esi
.text:000014A6                 add     esp, 8
.text:000014A9                 cmp     ebp, esp
.text:000014AB                 call    __RTC_CheckEsp
.text:000014B0                 mov     esp, ebp
.text:000014B2                 pop     ebp
.text:000014B3                 retn    10h
.text:000014B3 ?SetCompletedLocal@CProgressImp@NZip@NArchive@@UAEJ_K0@Z endp
.text:000014B3
.text:000014B3 ; ---------------------------------------------------------------------------
.text:000014B6                 align 10h
.text:000014C0
.text:000014C0 ; =============== S U B R O U T I N E =======================================
.text:000014C0
.text:000014C0 ; Attributes: bp-based frame
.text:000014C0
.text:000014C0 ; __int32 __thiscall NArchive::NZip::CProgressImp::SetTotalCD(NArchive::NZip::CProgressImp *this, char)
.text:000014C0                 public ?SetTotalCD@CProgressImp@NZip@NArchive@@UAEJ_K@Z
.text:000014C0 ?SetTotalCD@CProgressImp@NZip@NArchive@@UAEJ_K@Z proc near
.text:000014C0                                         ; DATA XREF: .rdata:00005D40o
.text:000014C0
.text:000014C0 var_8           = dword ptr -8
.text:000014C0 var_4           = dword ptr -4
.text:000014C0 arg_0           = byte ptr  8
.text:000014C0
.text:000014C0                 push    ebp
.text:000014C1                 mov     ebp, esp
.text:000014C3                 sub     esp, 8
.text:000014C6                 push    esi
.text:000014C7                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000014CE                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014D5                 mov     [ebp+var_4], ecx
.text:000014D8                 mov     ecx, [ebp+var_4]
.text:000014DB                 add     ecx, 4
.text:000014DE                 call    ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator->(void)
.text:000014E3                 mov     [ebp+var_8], eax
.text:000014E6                 mov     esi, esp
.text:000014E8                 push    0
.text:000014EA                 lea     eax, [ebp+arg_0]
.text:000014ED                 push    eax
.text:000014EE                 mov     ecx, [ebp+var_8]
.text:000014F1                 push    ecx
.text:000014F2                 mov     edx, [ebp+var_8]
.text:000014F5                 mov     eax, [edx]
.text:000014F7                 mov     ecx, [eax+0Ch]
.text:000014FA                 call    ecx
.text:000014FC                 cmp     esi, esp
.text:000014FE                 call    __RTC_CheckEsp
.text:00001503                 pop     esi
.text:00001504                 add     esp, 8
.text:00001507                 cmp     ebp, esp
.text:00001509                 call    __RTC_CheckEsp
.text:0000150E                 mov     esp, ebp
.text:00001510                 pop     ebp
.text:00001511                 retn    8
.text:00001511 ?SetTotalCD@CProgressImp@NZip@NArchive@@UAEJ_K@Z endp
.text:00001511
.text:00001511 ; ---------------------------------------------------------------------------
.text:00001514                 align 10h
.text:00001520
.text:00001520 ; =============== S U B R O U T I N E =======================================
.text:00001520
.text:00001520 ; Attributes: bp-based frame
.text:00001520
.text:00001520 ; __int32 __thiscall NArchive::NZip::CProgressImp::SetCompletedCD(NArchive::NZip::CProgressImp *this, char)
.text:00001520                 public ?SetCompletedCD@CProgressImp@NZip@NArchive@@UAEJ_K@Z
.text:00001520 ?SetCompletedCD@CProgressImp@NZip@NArchive@@UAEJ_K@Z proc near
.text:00001520                                         ; DATA XREF: .rdata:00005D44o
.text:00001520
.text:00001520 var_8           = dword ptr -8
.text:00001520 var_4           = dword ptr -4
.text:00001520 arg_0           = byte ptr  8
.text:00001520
.text:00001520                 push    ebp
.text:00001521                 mov     ebp, esp
.text:00001523                 sub     esp, 8
.text:00001526                 push    esi
.text:00001527                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000152E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001535                 mov     [ebp+var_4], ecx
.text:00001538                 mov     ecx, [ebp+var_4]
.text:0000153B                 add     ecx, 4
.text:0000153E                 call    ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator->(void)
.text:00001543                 mov     [ebp+var_8], eax
.text:00001546                 mov     esi, esp
.text:00001548                 push    0
.text:0000154A                 lea     eax, [ebp+arg_0]
.text:0000154D                 push    eax
.text:0000154E                 mov     ecx, [ebp+var_8]
.text:00001551                 push    ecx
.text:00001552                 mov     edx, [ebp+var_8]
.text:00001555                 mov     eax, [edx]
.text:00001557                 mov     ecx, [eax+10h]
.text:0000155A                 call    ecx
.text:0000155C                 cmp     esi, esp
.text:0000155E                 call    __RTC_CheckEsp
.text:00001563                 pop     esi
.text:00001564                 add     esp, 8
.text:00001567                 cmp     ebp, esp
.text:00001569                 call    __RTC_CheckEsp
.text:0000156E                 mov     esp, ebp
.text:00001570                 pop     ebp
.text:00001571                 retn    8
.text:00001571 ?SetCompletedCD@CProgressImp@NZip@NArchive@@UAEJ_K@Z endp
.text:00001571
.text:00001571 ; ---------------------------------------------------------------------------
.text:00001574                 align 10h
.text:00001580
.text:00001580 ; =============== S U B R O U T I N E =======================================
.text:00001580
.text:00001580 ; Attributes: bp-based frame
.text:00001580
.text:00001580 ; __int32 __cdecl NArchive::NZip::CHandler::Open(NArchive::NZip::CHandler *this, struct IInStream *, const unsigned __int64 *, struct IArchiveOpenCallback *)
.text:00001580                 public ?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00001580 ?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z proc near
.text:00001580                                         ; DATA XREF: .rdata:00004380o
.text:00001580
.text:00001580 var_38          = dword ptr -38h
.text:00001580 var_34          = dword ptr -34h
.text:00001580 var_30          = dword ptr -30h
.text:00001580 var_28          = dword ptr -28h
.text:00001580 var_20          = byte ptr -20h
.text:00001580 var_14          = dword ptr -14h
.text:00001580 var_10          = dword ptr -10h
.text:00001580 var_C           = dword ptr -0Ch
.text:00001580 var_4           = dword ptr -4
.text:00001580 this            = dword ptr  8
.text:00001580 arg_4           = dword ptr  0Ch
.text:00001580 arg_8           = dword ptr  10h
.text:00001580 arg_C           = dword ptr  14h
.text:00001580
.text:00001580 ; FUNCTION CHUNK AT .text:000016AF SIZE 0000002F BYTES
.text:00001580
.text:00001580                 push    ebp
.text:00001581                 mov     ebp, esp
.text:00001583                 push    0FFFFFFFFh
.text:00001585                 push    offset __ehhandler$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:0000158A                 mov     eax, large fs:0
.text:00001590                 push    eax
.text:00001591                 push    ecx
.text:00001592                 sub     esp, 28h
.text:00001595                 push    ebx
.text:00001596                 push    esi
.text:00001597                 push    edi
.text:00001598                 lea     edi, [ebp+var_38]
.text:0000159B                 mov     ecx, 0Ah
.text:000015A0                 mov     eax, 0CCCCCCCCh
.text:000015A5                 rep stosd
.text:000015A7                 mov     eax, dword ptr ds:___security_cookie
.text:000015AC                 xor     eax, ebp
.text:000015AE                 push    eax
.text:000015AF                 lea     eax, [ebp+var_C]
.text:000015B2                 mov     large fs:0, eax
.text:000015B8                 mov     [ebp+var_10], esp
.text:000015BB                 mov     [ebp+var_4], 0
.text:000015C2                 mov     byte ptr [ebp+var_4], 1
.text:000015C6                 mov     esi, esp
.text:000015C8                 mov     eax, [ebp+this]
.text:000015CB                 push    eax
.text:000015CC                 mov     ecx, [ebp+this]
.text:000015CF                 mov     edx, [ecx]
.text:000015D1                 mov     eax, [edx+10h]
.text:000015D4                 call    eax
.text:000015D6                 cmp     esi, esp
.text:000015D8                 call    __RTC_CheckEsp
.text:000015DD                 mov     ecx, [ebp+arg_8]
.text:000015E0                 push    ecx             ; unsigned __int64 *
.text:000015E1                 mov     edx, [ebp+arg_4]
.text:000015E4                 push    edx             ; struct IInStream *
.text:000015E5                 mov     ecx, [ebp+this]
.text:000015E8                 add     ecx, 20h ; ' '  ; this
.text:000015EB                 call    ?Open@CInArchive@NZip@NArchive@@QAEJPAUIInStream@@PB_K@Z ; NArchive::NZip::CInArchive::Open(IInStream *,unsigned __int64 const *)
.text:000015F0                 mov     [ebp+var_30], eax
.text:000015F3                 mov     eax, [ebp+var_30]
.text:000015F6                 mov     [ebp+var_14], eax
.text:000015F9                 cmp     [ebp+var_14], 0
.text:000015FD                 jz      short loc_1607
.text:000015FF                 mov     eax, [ebp+var_14]
.text:00001602                 jmp     loc_16AF
.text:00001607 ; ---------------------------------------------------------------------------
.text:00001607
.text:00001607 loc_1607:                               ; CODE XREF: NArchive::NZip::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+7Dj
.text:00001607                 mov     ecx, [ebp+arg_C]
.text:0000160A                 push    ecx             ; struct IArchiveOpenCallback *
.text:0000160B                 lea     ecx, [ebp+var_20] ; this
.text:0000160E                 call    ??0CProgressImp@NZip@NArchive@@QAE@PAUIArchiveOpenCallback@@@Z ; NArchive::NZip::CProgressImp::CProgressImp(IArchiveOpenCallback *)
.text:00001613                 mov     [ebp+var_34], eax
.text:00001616                 mov     byte ptr [ebp+var_4], 2
.text:0000161A                 mov     edx, [ebp+arg_C]
.text:0000161D                 neg     edx
.text:0000161F                 sbb     edx, edx
.text:00001621                 lea     eax, [ebp+var_20]
.text:00001624                 and     edx, eax
.text:00001626                 push    edx
.text:00001627                 mov     ecx, [ebp+this]
.text:0000162A                 add     ecx, 10h
.text:0000162D                 push    ecx
.text:0000162E                 mov     ecx, [ebp+this]
.text:00001631                 add     ecx, 20h ; ' '
.text:00001634                 call    ?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z ; NArchive::NZip::CInArchive::ReadHeaders(CObjectVector<NArchive::NZip::CItemEx> &,NArchive::NZip::CProgressVirt *)
.text:00001639                 mov     [ebp+var_38], eax
.text:0000163C                 mov     edx, [ebp+var_38]
.text:0000163F                 mov     [ebp+var_28], edx
.text:00001642                 mov     byte ptr [ebp+var_4], 1
.text:00001646                 lea     ecx, [ebp+var_20] ; this
.text:00001649                 call    ??1CProgressImp@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CProgressImp::~CProgressImp(void)
.text:0000164E                 mov     eax, [ebp+var_28]
.text:00001651                 jmp     short loc_16AF
.text:00001651 ?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z endp
.text:00001651
.text:00001653
.text:00001653 ; =============== S U B R O U T I N E =======================================
.text:00001653
.text:00001653 ; Attributes: noreturn
.text:00001653
.text:00001653 __catch$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0 proc near
.text:00001653                                         ; DATA XREF: .xdata$x:00004524o
.text:00001653                 mov     esi, esp
.text:00001655                 mov     eax, [ebp+8]
.text:00001658                 push    eax
.text:00001659                 mov     ecx, [ebp+8]
.text:0000165C                 mov     edx, [ecx]
.text:0000165E                 mov     eax, [edx+10h]
.text:00001661                 call    eax
.text:00001663                 cmp     esi, esp
.text:00001665                 call    __RTC_CheckEsp
.text:0000166A                 push    0
.text:0000166C                 push    0
.text:0000166E                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:0000166E __catch$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0 endp
.text:0000166E
.text:00001673 ; ---------------------------------------------------------------------------
.text:00001673                 mov     dword ptr [ebp-4], 0
.text:0000167A                 mov     eax, offset __tryend$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1
.text:0000167F                 retn
.text:00001680 ; ---------------------------------------------------------------------------
.text:00001680                 mov     dword ptr [ebp-4], 0
.text:00001687
.text:00001687 __tryend$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1:
.text:00001687                                         ; DATA XREF: .text:0000167Ao
.text:00001687                 jmp     short $LN6_0
.text:00001689
.text:00001689 ; =============== S U B R O U T I N E =======================================
.text:00001689
.text:00001689
.text:00001689 __catch$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2 proc near
.text:00001689                                         ; DATA XREF: .xdata$x:00004514o
.text:00001689                 mov     dword ptr [ebp-2Ch], 8007000Eh
.text:00001690                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001697                 mov     eax, offset $LN14
.text:0000169C                 retn
.text:0000169C __catch$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2 endp
.text:0000169C
.text:0000169D ; ---------------------------------------------------------------------------
.text:0000169D                 mov     eax, offset $LN6_0
.text:000016A2                 retn
.text:000016A3 ; ---------------------------------------------------------------------------
.text:000016A3
.text:000016A3 $LN6_0:                                 ; CODE XREF: .text:__tryend$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1j
.text:000016A3                                         ; DATA XREF: .text:0000169Do
.text:000016A3                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000016AA                 jmp     short loc_16AF
.text:000016AC ; ---------------------------------------------------------------------------
.text:000016AC
.text:000016AC $LN14:                                  ; DATA XREF: __catch$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2+Eo
.text:000016AC                 mov     eax, [ebp-2Ch]
.text:000016AF ; START OF FUNCTION CHUNK FOR ?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:000016AF
.text:000016AF loc_16AF:                               ; CODE XREF: NArchive::NZip::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+82j
.text:000016AF                                         ; NArchive::NZip::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+D1j ...
.text:000016AF                 push    edx
.text:000016B0                 mov     ecx, ebp
.text:000016B2                 push    eax
.text:000016B3                 lea     edx, $LN20
.text:000016B9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000016BE                 pop     eax
.text:000016BF                 pop     edx
.text:000016C0                 mov     ecx, [ebp+var_C]
.text:000016C3                 mov     large fs:0, ecx
.text:000016CA                 pop     ecx
.text:000016CB                 pop     edi
.text:000016CC                 pop     esi
.text:000016CD                 pop     ebx
.text:000016CE                 add     esp, 38h
.text:000016D1                 cmp     ebp, esp
.text:000016D3                 call    __RTC_CheckEsp
.text:000016D8                 mov     esp, ebp
.text:000016DA                 pop     ebp
.text:000016DB                 retn    10h
.text:000016DB ; END OF FUNCTION CHUNK FOR ?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:000016DB ; ---------------------------------------------------------------------------
.text:000016DE                 align 10h
.text:000016E0 $LN20           dd 1                    ; DATA XREF: NArchive::NZip::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+133o
.text:000016E4                 dd offset $LN19_1
.text:000016E8 $LN19_1         dd 0FFFFFFE0h, 8        ; DATA XREF: .text:000016E4o
.text:000016F0                 dd offset $LN17_0       ; "progressImp"
.text:000016F4 $LN17_0         db 'progressImp',0      ; DATA XREF: .text:000016F0o
.text:00001700
.text:00001700 ; =============== S U B R O U T I N E =======================================
.text:00001700
.text:00001700 ; Attributes: bp-based frame
.text:00001700
.text:00001700 ; __int32 __stdcall NArchive::NZip::CHandler::Close(NArchive::NZip::CHandler *this)
.text:00001700                 public ?Close@CHandler@NZip@NArchive@@UAGJXZ
.text:00001700 ?Close@CHandler@NZip@NArchive@@UAGJXZ proc near ; DATA XREF: .rdata:00004384o
.text:00001700
.text:00001700 this            = dword ptr  8
.text:00001700
.text:00001700                 push    ebp
.text:00001701                 mov     ebp, esp
.text:00001703                 mov     ecx, [ebp+this]
.text:00001706                 add     ecx, 10h
.text:00001709                 call    ?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CItemEx>::Clear(void)
.text:0000170E                 mov     ecx, [ebp+this]
.text:00001711                 add     ecx, 20h ; ' '  ; this
.text:00001714                 call    ?Close@CInArchive@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CInArchive::Close(void)
.text:00001719                 xor     eax, eax
.text:0000171B                 cmp     ebp, esp
.text:0000171D                 call    __RTC_CheckEsp
.text:00001722                 pop     ebp
.text:00001723                 retn    4
.text:00001723 ?Close@CHandler@NZip@NArchive@@UAGJXZ endp
.text:00001723
.text:00001723 ; ---------------------------------------------------------------------------
.text:00001726                 align 10h
.text:00001730
.text:00001730 ; =============== S U B R O U T I N E =======================================
.text:00001730
.text:00001730 ; Attributes: bp-based frame
.text:00001730
.text:00001730 ; _DWORD __thiscall NArchive::NZip::CLzmaDecoder::CLzmaDecoder(NArchive::NZip::CLzmaDecoder *__hidden this)
.text:00001730                 public ??0CLzmaDecoder@NZip@NArchive@@QAE@XZ
.text:00001730 ??0CLzmaDecoder@NZip@NArchive@@QAE@XZ proc near
.text:00001730                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+B48p
.text:00001730
.text:00001730 var_1C          = dword ptr -1Ch
.text:00001730 var_18          = dword ptr -18h
.text:00001730 var_14          = dword ptr -14h
.text:00001730 var_10          = dword ptr -10h
.text:00001730 var_C           = dword ptr -0Ch
.text:00001730 var_4           = dword ptr -4
.text:00001730
.text:00001730                 push    ebp
.text:00001731                 mov     ebp, esp
.text:00001733                 push    0FFFFFFFFh
.text:00001735                 push    offset __ehhandler$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ
.text:0000173A                 mov     eax, large fs:0
.text:00001740                 push    eax
.text:00001741                 sub     esp, 10h
.text:00001744                 mov     eax, 0CCCCCCCCh
.text:00001749                 mov     [ebp+var_1C], eax
.text:0000174C                 mov     [ebp+var_18], eax
.text:0000174F                 mov     [ebp+var_14], eax
.text:00001752                 mov     [ebp+var_10], eax
.text:00001755                 mov     eax, dword ptr ds:___security_cookie
.text:0000175A                 xor     eax, ebp
.text:0000175C                 push    eax
.text:0000175D                 lea     eax, [ebp+var_C]
.text:00001760                 mov     large fs:0, eax
.text:00001766                 mov     [ebp+var_10], ecx
.text:00001769                 mov     ecx, [ebp+var_10] ; this
.text:0000176C                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:00001771                 mov     ecx, [ebp+var_10]
.text:00001774                 add     ecx, 4          ; this
.text:00001777                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000177C                 mov     eax, [ebp+var_10]
.text:0000177F                 mov     dword ptr [eax], offset ??_7CLzmaDecoder@NZip@NArchive@@6B@ ; const NArchive::NZip::CLzmaDecoder::`vftable'
.text:00001785                 mov     ecx, [ebp+var_10]
.text:00001788                 add     ecx, 0Ch
.text:0000178B                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(void)
.text:00001790                 mov     [ebp+var_4], 0
.text:00001797                 push    0D8h ; '+'      ; unsigned int
.text:0000179C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000017A1                 add     esp, 4
.text:000017A4                 mov     [ebp+var_18], eax
.text:000017A7                 mov     byte ptr [ebp+var_4], 1
.text:000017AB                 cmp     [ebp+var_18], 0
.text:000017AF                 jz      short loc_17BE
.text:000017B1                 mov     ecx, [ebp+var_18] ; this
.text:000017B4                 call    ??0CDecoder@NLzma@NCompress@@QAE@XZ ; NCompress::NLzma::CDecoder::CDecoder(void)
.text:000017B9                 mov     [ebp+var_1C], eax
.text:000017BC                 jmp     short loc_17C5
.text:000017BE ; ---------------------------------------------------------------------------
.text:000017BE
.text:000017BE loc_17BE:                               ; CODE XREF: NArchive::NZip::CLzmaDecoder::CLzmaDecoder(void)+7Fj
.text:000017BE                 mov     [ebp+var_1C], 0
.text:000017C5
.text:000017C5 loc_17C5:                               ; CODE XREF: NArchive::NZip::CLzmaDecoder::CLzmaDecoder(void)+8Cj
.text:000017C5                 mov     ecx, [ebp+var_1C]
.text:000017C8                 mov     [ebp+var_14], ecx
.text:000017CB                 mov     byte ptr [ebp+var_4], 0
.text:000017CF                 mov     edx, [ebp+var_10]
.text:000017D2                 mov     eax, [ebp+var_14]
.text:000017D5                 mov     [edx+8], eax
.text:000017D8                 mov     ecx, [ebp+var_10]
.text:000017DB                 mov     edx, [ecx+8]
.text:000017DE                 push    edx
.text:000017DF                 mov     ecx, [ebp+var_10]
.text:000017E2                 add     ecx, 0Ch
.text:000017E5                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:000017EA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000017F1                 mov     eax, [ebp+var_10]
.text:000017F4                 mov     ecx, [ebp+var_C]
.text:000017F7                 mov     large fs:0, ecx
.text:000017FE                 pop     ecx
.text:000017FF                 add     esp, 1Ch
.text:00001802                 cmp     ebp, esp
.text:00001804                 call    __RTC_CheckEsp
.text:00001809                 mov     esp, ebp
.text:0000180B                 pop     ebp
.text:0000180C                 retn
.text:0000180C ??0CLzmaDecoder@NZip@NArchive@@QAE@XZ endp
.text:0000180C
.text:0000180C ; ---------------------------------------------------------------------------
.text:0000180D                 align 10h
.text:00001810
.text:00001810 ; =============== S U B R O U T I N E =======================================
.text:00001810
.text:00001810 ; Attributes: bp-based frame
.text:00001810
.text:00001810 ; __int32 __stdcall NArchive::NZip::CLzmaDecoder::Code(NArchive::NZip::CLzmaDecoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00001810                 public ?Code@CLzmaDecoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00001810 ?Code@CLzmaDecoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00001810                                         ; DATA XREF: .rdata:00005E9Co
.text:00001810
.text:00001810 var_24          = dword ptr -24h
.text:00001810 var_20          = dword ptr -20h
.text:00001810 var_1C          = dword ptr -1Ch
.text:00001810 var_18          = dword ptr -18h
.text:00001810 var_14          = dword ptr -14h
.text:00001810 var_10          = dword ptr -10h
.text:00001810 var_C           = dword ptr -0Ch
.text:00001810 var_8           = dword ptr -8
.text:00001810 var_4           = dword ptr -4
.text:00001810 this            = dword ptr  8
.text:00001810 arg_4           = dword ptr  0Ch
.text:00001810 arg_8           = dword ptr  10h
.text:00001810 arg_10          = dword ptr  18h
.text:00001810 arg_14          = dword ptr  1Ch
.text:00001810
.text:00001810                 push    ebp
.text:00001811                 mov     ebp, esp
.text:00001813                 sub     esp, 24h
.text:00001816                 push    esi
.text:00001817                 mov     eax, 0CCCCCCCCh
.text:0000181C                 mov     [ebp+var_24], eax
.text:0000181F                 mov     [ebp+var_20], eax
.text:00001822                 mov     [ebp+var_1C], eax
.text:00001825                 mov     [ebp+var_18], eax
.text:00001828                 mov     [ebp+var_14], eax
.text:0000182B                 mov     [ebp+var_10], eax
.text:0000182E                 mov     [ebp+var_C], eax
.text:00001831                 mov     [ebp+var_8], eax
.text:00001834                 mov     [ebp+var_4], eax
.text:00001837                 mov     eax, dword ptr ds:___security_cookie
.text:0000183C                 xor     eax, ebp
.text:0000183E                 mov     [ebp+var_4], eax
.text:00001841                 push    9               ; unsigned int
.text:00001843                 lea     eax, [ebp+var_14]
.text:00001846                 push    eax             ; void *
.text:00001847                 mov     ecx, [ebp+arg_4]
.text:0000184A                 push    ecx             ; struct ISequentialInStream *
.text:0000184B                 call    ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE(ISequentialInStream *,void *,uint)
.text:00001850                 mov     [ebp+var_1C], eax
.text:00001853                 cmp     [ebp+var_1C], 0
.text:00001857                 jz      short loc_1861
.text:00001859                 mov     eax, [ebp+var_1C]
.text:0000185C                 jmp     loc_18E5
.text:00001861 ; ---------------------------------------------------------------------------
.text:00001861
.text:00001861 loc_1861:                               ; CODE XREF: NArchive::NZip::CLzmaDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+47j
.text:00001861                 movzx   edx, byte ptr [ebp+var_14+2]
.text:00001865                 cmp     edx, 5
.text:00001868                 jnz     short loc_1872
.text:0000186A                 movzx   eax, byte ptr [ebp+var_14+3]
.text:0000186E                 test    eax, eax
.text:00001870                 jz      short loc_1879
.text:00001872
.text:00001872 loc_1872:                               ; CODE XREF: NArchive::NZip::CLzmaDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+58j
.text:00001872                 mov     eax, 80004001h
.text:00001877                 jmp     short loc_18E5
.text:00001879 ; ---------------------------------------------------------------------------
.text:00001879
.text:00001879 loc_1879:                               ; CODE XREF: NArchive::NZip::CLzmaDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+60j
.text:00001879                 mov     esi, esp
.text:0000187B                 push    5
.text:0000187D                 lea     ecx, [ebp+var_10]
.text:00001880                 push    ecx
.text:00001881                 mov     edx, [ebp+this]
.text:00001884                 mov     eax, [edx+8]
.text:00001887                 mov     ecx, [ebp+this]
.text:0000188A                 mov     edx, [ecx+8]
.text:0000188D                 add     edx, 4
.text:00001890                 mov     eax, [eax+4]
.text:00001893                 push    edx
.text:00001894                 mov     ecx, [eax+0Ch]
.text:00001897                 call    ecx
.text:00001899                 cmp     esi, esp
.text:0000189B                 call    __RTC_CheckEsp
.text:000018A0                 mov     [ebp+var_20], eax
.text:000018A3                 cmp     [ebp+var_20], 0
.text:000018A7                 jz      short loc_18AE
.text:000018A9                 mov     eax, [ebp+var_20]
.text:000018AC                 jmp     short loc_18E5
.text:000018AE ; ---------------------------------------------------------------------------
.text:000018AE
.text:000018AE loc_18AE:                               ; CODE XREF: NArchive::NZip::CLzmaDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+97j
.text:000018AE                 mov     ecx, [ebp+this]
.text:000018B1                 add     ecx, 0Ch
.text:000018B4                 call    ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->(void)
.text:000018B9                 mov     [ebp+var_24], eax
.text:000018BC                 mov     esi, esp
.text:000018BE                 mov     edx, [ebp+arg_14]
.text:000018C1                 push    edx
.text:000018C2                 mov     eax, [ebp+arg_10]
.text:000018C5                 push    eax
.text:000018C6                 push    0
.text:000018C8                 mov     ecx, [ebp+arg_8]
.text:000018CB                 push    ecx
.text:000018CC                 mov     edx, [ebp+arg_4]
.text:000018CF                 push    edx
.text:000018D0                 mov     eax, [ebp+var_24]
.text:000018D3                 push    eax
.text:000018D4                 mov     ecx, [ebp+var_24]
.text:000018D7                 mov     edx, [ecx]
.text:000018D9                 mov     eax, [edx+0Ch]
.text:000018DC                 call    eax
.text:000018DE                 cmp     esi, esp
.text:000018E0                 call    __RTC_CheckEsp
.text:000018E5
.text:000018E5 loc_18E5:                               ; CODE XREF: NArchive::NZip::CLzmaDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+4Cj
.text:000018E5                                         ; NArchive::NZip::CLzmaDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+67j ...
.text:000018E5                 push    edx
.text:000018E6                 mov     ecx, ebp
.text:000018E8                 push    eax
.text:000018E9                 lea     edx, $LN9_1
.text:000018EF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000018F4                 pop     eax
.text:000018F5                 pop     edx
.text:000018F6                 pop     esi
.text:000018F7                 mov     ecx, [ebp+var_4]
.text:000018FA                 xor     ecx, ebp
.text:000018FC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001901                 add     esp, 24h
.text:00001904                 cmp     ebp, esp
.text:00001906                 call    __RTC_CheckEsp
.text:0000190B                 mov     esp, ebp
.text:0000190D                 pop     ebp
.text:0000190E                 retn    18h
.text:0000190E ?Code@CLzmaDecoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:0000190E
.text:0000190E ; ---------------------------------------------------------------------------
.text:00001911                 align 4
.text:00001914 $LN9_1          dd 1                    ; DATA XREF: NArchive::NZip::CLzmaDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+D9o
.text:00001918                 dd offset $LN8_1
.text:0000191C $LN8_1          dd 0FFFFFFECh, 9        ; DATA XREF: .text:00001918o
.text:00001924                 dd offset $LN7_0
.text:00001928 $LN7_0          dd 667562h, 0CCCCCCCCh  ; DATA XREF: .text:00001924o
.text:00001930
.text:00001930 ; =============== S U B R O U T I N E =======================================
.text:00001930
.text:00001930 ; Attributes: bp-based frame
.text:00001930
.text:00001930 ; __int32 __stdcall NArchive::NZip::CXzDecoder::Code(NArchive::NZip::CXzDecoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00001930                 public ?Code@CXzDecoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00001930 ?Code@CXzDecoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00001930                                         ; DATA XREF: .rdata:00007BE4o
.text:00001930
.text:00001930 var_8           = dword ptr -8
.text:00001930 var_4           = dword ptr -4
.text:00001930 this            = dword ptr  8
.text:00001930 arg_4           = dword ptr  0Ch
.text:00001930 arg_8           = dword ptr  10h
.text:00001930 arg_14          = dword ptr  1Ch
.text:00001930
.text:00001930                 push    ebp
.text:00001931                 mov     ebp, esp
.text:00001933                 sub     esp, 8
.text:00001936                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000193D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001944                 mov     eax, [ebp+arg_14]
.text:00001947                 push    eax             ; struct ICompressProgressInfo *
.text:00001948                 mov     ecx, [ebp+arg_8]
.text:0000194B                 push    ecx             ; struct ISequentialOutStream *
.text:0000194C                 mov     edx, [ebp+arg_4]
.text:0000194F                 push    edx             ; struct ISequentialInStream *
.text:00001950                 mov     ecx, [ebp+this]
.text:00001953                 add     ecx, 8          ; this
.text:00001956                 call    ?Decode@CDecoder@NXz@NArchive@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)
.text:0000195B                 mov     [ebp+var_4], eax
.text:0000195E                 cmp     [ebp+var_4], 0
.text:00001962                 jz      short loc_1969
.text:00001964                 mov     eax, [ebp+var_4]
.text:00001967                 jmp     short loc_1993
.text:00001969 ; ---------------------------------------------------------------------------
.text:00001969
.text:00001969 loc_1969:                               ; CODE XREF: NArchive::NZip::CXzDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+32j
.text:00001969                 mov     ecx, [ebp+this]
.text:0000196C                 add     ecx, 8          ; this
.text:0000196F                 call    ?Get_Extract_OperationResult@CDecoder@NXz@NArchive@@QBEHXZ ; NArchive::NXz::CDecoder::Get_Extract_OperationResult(void)
.text:00001974                 mov     [ebp+var_8], eax
.text:00001977                 cmp     [ebp+var_8], 1
.text:0000197B                 jnz     short loc_1984
.text:0000197D                 mov     eax, 80004001h
.text:00001982                 jmp     short loc_1993
.text:00001984 ; ---------------------------------------------------------------------------
.text:00001984
.text:00001984 loc_1984:                               ; CODE XREF: NArchive::NZip::CXzDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+4Bj
.text:00001984                 cmp     [ebp+var_8], 0
.text:00001988                 jz      short loc_1991
.text:0000198A                 mov     eax, 1
.text:0000198F                 jmp     short loc_1993
.text:00001991 ; ---------------------------------------------------------------------------
.text:00001991
.text:00001991 loc_1991:                               ; CODE XREF: NArchive::NZip::CXzDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+58j
.text:00001991                 xor     eax, eax
.text:00001993
.text:00001993 loc_1993:                               ; CODE XREF: NArchive::NZip::CXzDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+37j
.text:00001993                                         ; NArchive::NZip::CXzDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+52j ...
.text:00001993                 add     esp, 8
.text:00001996                 cmp     ebp, esp
.text:00001998                 call    __RTC_CheckEsp
.text:0000199D                 mov     esp, ebp
.text:0000199F                 pop     ebp
.text:000019A0                 retn    18h
.text:000019A0 ?Code@CXzDecoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:000019A0
.text:000019A0 ; ---------------------------------------------------------------------------
.text:000019A3                 align 10h
.text:000019B0
.text:000019B0 ; =============== S U B R O U T I N E =======================================
.text:000019B0
.text:000019B0 ; Attributes: bp-based frame
.text:000019B0
.text:000019B0 ; __int32 __thiscall NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CZipDecoder *this, struct NArchive::NZip::CInArchive *, const struct NArchive::NZip::CItemEx *, struct ISequentialOutStream *, struct IArchiveExtractCallback *, struct ICompressProgressInfo *, unsigned int, int *)
.text:000019B0                 public ?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z
.text:000019B0 ?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z proc near
.text:000019B0                                         ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+B02p
.text:000019B0
.text:000019B0 var_29C         = dword ptr -29Ch
.text:000019B0 var_298         = dword ptr -298h
.text:000019B0 var_294         = dword ptr -294h
.text:000019B0 var_290         = dword ptr -290h
.text:000019B0 var_28C         = dword ptr -28Ch
.text:000019B0 var_288         = dword ptr -288h
.text:000019B0 var_284         = dword ptr -284h
.text:000019B0 var_280         = dword ptr -280h
.text:000019B0 var_27C         = dword ptr -27Ch
.text:000019B0 var_278         = dword ptr -278h
.text:000019B0 var_274         = dword ptr -274h
.text:000019B0 var_270         = dword ptr -270h
.text:000019B0 var_26C         = dword ptr -26Ch
.text:000019B0 var_268         = dword ptr -268h
.text:000019B0 var_264         = dword ptr -264h
.text:000019B0 var_260         = dword ptr -260h
.text:000019B0 var_25C         = dword ptr -25Ch
.text:000019B0 var_258         = dword ptr -258h
.text:000019B0 var_254         = dword ptr -254h
.text:000019B0 var_250         = dword ptr -250h
.text:000019B0 var_24C         = dword ptr -24Ch
.text:000019B0 var_248         = dword ptr -248h
.text:000019B0 var_244         = dword ptr -244h
.text:000019B0 var_240         = dword ptr -240h
.text:000019B0 var_23C         = dword ptr -23Ch
.text:000019B0 var_238         = dword ptr -238h
.text:000019B0 var_234         = dword ptr -234h
.text:000019B0 var_230         = dword ptr -230h
.text:000019B0 var_22C         = dword ptr -22Ch
.text:000019B0 var_228         = dword ptr -228h
.text:000019B0 var_224         = dword ptr -224h
.text:000019B0 var_220         = dword ptr -220h
.text:000019B0 var_21C         = dword ptr -21Ch
.text:000019B0 var_218         = dword ptr -218h
.text:000019B0 var_214         = dword ptr -214h
.text:000019B0 var_210         = dword ptr -210h
.text:000019B0 var_20C         = dword ptr -20Ch
.text:000019B0 var_208         = dword ptr -208h
.text:000019B0 var_204         = dword ptr -204h
.text:000019B0 var_200         = dword ptr -200h
.text:000019B0 var_1FC         = dword ptr -1FCh
.text:000019B0 var_1F8         = dword ptr -1F8h
.text:000019B0 var_1F4         = dword ptr -1F4h
.text:000019B0 var_1F0         = dword ptr -1F0h
.text:000019B0 var_1EC         = dword ptr -1ECh
.text:000019B0 var_1E8         = dword ptr -1E8h
.text:000019B0 var_1E4         = dword ptr -1E4h
.text:000019B0 var_1E0         = dword ptr -1E0h
.text:000019B0 var_1DC         = dword ptr -1DCh
.text:000019B0 var_1D8         = dword ptr -1D8h
.text:000019B0 var_1D4         = dword ptr -1D4h
.text:000019B0 var_1D0         = dword ptr -1D0h
.text:000019B0 var_1CC         = dword ptr -1CCh
.text:000019B0 var_1C8         = dword ptr -1C8h
.text:000019B0 var_1C4         = byte ptr -1C4h
.text:000019B0 var_1B8         = byte ptr -1B8h
.text:000019B0 var_1AC         = byte ptr -1ACh
.text:000019B0 var_1A0         = byte ptr -1A0h
.text:000019B0 var_194         = dword ptr -194h
.text:000019B0 var_190         = dword ptr -190h
.text:000019B0 var_18C         = dword ptr -18Ch
.text:000019B0 var_188         = dword ptr -188h
.text:000019B0 var_184         = dword ptr -184h
.text:000019B0 var_180         = dword ptr -180h
.text:000019B0 var_17C         = dword ptr -17Ch
.text:000019B0 var_178         = dword ptr -178h
.text:000019B0 var_174         = dword ptr -174h
.text:000019B0 var_170         = dword ptr -170h
.text:000019B0 var_16C         = dword ptr -16Ch
.text:000019B0 var_168         = dword ptr -168h
.text:000019B0 var_164         = dword ptr -164h
.text:000019B0 var_160         = dword ptr -160h
.text:000019B0 var_155         = byte ptr -155h
.text:000019B0 var_14D         = byte ptr -14Dh
.text:000019B0 var_14C         = dword ptr -14Ch
.text:000019B0 var_148         = dword ptr -148h
.text:000019B0 var_144         = dword ptr -144h
.text:000019B0 var_13E         = byte ptr -13Eh
.text:000019B0 var_13D         = byte ptr -13Dh
.text:000019B0 var_135         = byte ptr -135h
.text:000019B0 var_12C         = byte ptr -12Ch
.text:000019B0 var_124         = dword ptr -124h
.text:000019B0 var_120         = dword ptr -120h
.text:000019B0 var_118         = byte ptr -118h
.text:000019B0 var_110         = dword ptr -110h
.text:000019B0 var_105         = byte ptr -105h
.text:000019B0 var_FC          = byte ptr -0FCh
.text:000019B0 var_F4          = dword ptr -0F4h
.text:000019B0 var_F0          = dword ptr -0F0h
.text:000019B0 var_EC          = dword ptr -0ECh
.text:000019B0 var_E8          = dword ptr -0E8h
.text:000019B0 var_E0          = dword ptr -0E0h
.text:000019B0 var_DC          = byte ptr -0DCh
.text:000019B0 var_D4          = dword ptr -0D4h
.text:000019B0 var_D0          = dword ptr -0D0h
.text:000019B0 var_CC          = dword ptr -0CCh
.text:000019B0 var_C4          = byte ptr -0C4h
.text:000019B0 var_B4          = dword ptr -0B4h
.text:000019B0 var_AC          = byte ptr -0ACh
.text:000019B0 var_A4          = dword ptr -0A4h
.text:000019B0 var_9C          = byte ptr -9Ch
.text:000019B0 var_90          = byte ptr -90h
.text:000019B0 var_8E          = byte ptr -8Eh
.text:000019B0 var_8C          = word ptr -8Ch
.text:000019B0 var_80          = byte ptr -80h
.text:000019B0 var_78          = qword ptr -78h
.text:000019B0 var_70          = qword ptr -70h
.text:000019B0 var_64          = byte ptr -64h
.text:000019B0 var_5C          = qword ptr -5Ch
.text:000019B0 var_50          = byte ptr -50h
.text:000019B0 var_48          = dword ptr -48h
.text:000019B0 var_40          = byte ptr -40h
.text:000019B0 var_30          = byte ptr -30h
.text:000019B0 var_24          = dword ptr -24h
.text:000019B0 var_1F          = byte ptr -1Fh
.text:000019B0 var_1E          = byte ptr -1Eh
.text:000019B0 var_1D          = byte ptr -1Dh
.text:000019B0 var_18          = dword ptr -18h
.text:000019B0 var_10          = dword ptr -10h
.text:000019B0 var_C           = dword ptr -0Ch
.text:000019B0 var_4           = dword ptr -4
.text:000019B0 arg_0           = dword ptr  8
.text:000019B0 arg_4           = dword ptr  0Ch
.text:000019B0 arg_8           = dword ptr  10h
.text:000019B0 arg_C           = dword ptr  14h
.text:000019B0 arg_10          = dword ptr  18h
.text:000019B0 arg_14          = dword ptr  1Ch
.text:000019B0 arg_18          = dword ptr  20h
.text:000019B0
.text:000019B0                 push    ebp
.text:000019B1                 mov     ebp, esp
.text:000019B3                 push    0FFFFFFFFh
.text:000019B5                 push    offset __ehhandler$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z
.text:000019BA                 mov     eax, large fs:0
.text:000019C0                 push    eax
.text:000019C1                 sub     esp, 290h
.text:000019C7                 push    esi
.text:000019C8                 push    edi
.text:000019C9                 push    ecx
.text:000019CA                 lea     edi, [ebp+var_29C]
.text:000019D0                 mov     ecx, 0A4h ; 'ñ'
.text:000019D5                 mov     eax, 0CCCCCCCCh
.text:000019DA                 rep stosd
.text:000019DC                 pop     ecx
.text:000019DD                 mov     eax, dword ptr ds:___security_cookie
.text:000019E2                 xor     eax, ebp
.text:000019E4                 push    eax
.text:000019E5                 lea     eax, [ebp+var_C]
.text:000019E8                 mov     large fs:0, eax
.text:000019EE                 mov     [ebp+var_10], ecx
.text:000019F1                 mov     eax, [ebp+arg_18]
.text:000019F4                 mov     dword ptr [eax], 2
.text:000019FA                 lea     ecx, [ebp+var_18] ; this
.text:000019FD                 call    ??0C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::C_InStream_Releaser(void)
.text:00001A02                 mov     [ebp+var_4], 0
.text:00001A09                 mov     [ebp+var_1D], 1
.text:00001A0D                 mov     [ebp+var_1E], 0
.text:00001A11                 mov     [ebp+var_1F], 0
.text:00001A15                 mov     ecx, [ebp+arg_4]
.text:00001A18                 movzx   edx, word ptr [ecx+2]
.text:00001A1C                 mov     [ebp+var_24], edx
.text:00001A1F                 mov     ecx, [ebp+arg_4] ; this
.text:00001A22                 call    ?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsEncrypted(void)
.text:00001A27                 movzx   eax, al
.text:00001A2A                 test    eax, eax
.text:00001A2C                 jz      loc_1ACB
.text:00001A32                 mov     ecx, [ebp+arg_4] ; this
.text:00001A35                 call    ?IsStrongEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsStrongEncrypted(void)
.text:00001A3A                 movzx   ecx, al
.text:00001A3D                 test    ecx, ecx
.text:00001A3F                 jz      short loc_1A90
.text:00001A41                 lea     edx, [ebp+var_30]
.text:00001A44                 push    edx             ; struct NArchive::NZip::CStrongCryptoExtra *
.text:00001A45                 mov     ecx, [ebp+arg_4]
.text:00001A48                 add     ecx, 48h ; 'H'  ; this
.text:00001A4B                 call    ?GetStrongCrypto@CExtraBlock@NZip@NArchive@@QBE_NAAUCStrongCryptoExtra@23@@Z ; NArchive::NZip::CExtraBlock::GetStrongCrypto(NArchive::NZip::CStrongCryptoExtra &)
.text:00001A50                 movzx   eax, al
.text:00001A53                 test    eax, eax
.text:00001A55                 jz      short loc_1A5B
.text:00001A57                 mov     [ebp+var_1F], 1
.text:00001A5B
.text:00001A5B loc_1A5B:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+A5j
.text:00001A5B                 movzx   ecx, [ebp+var_1F]
.text:00001A5F                 test    ecx, ecx
.text:00001A61                 jnz     short loc_1A90
.text:00001A63                 mov     edx, [ebp+arg_18]
.text:00001A66                 mov     dword ptr [edx], 1
.text:00001A6C                 mov     [ebp+var_160], 0
.text:00001A76                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001A7D                 lea     ecx, [ebp+var_18] ; this
.text:00001A80                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:00001A85                 mov     eax, [ebp+var_160]
.text:00001A8B                 jmp     loc_310D
.text:00001A90 ; ---------------------------------------------------------------------------
.text:00001A90
.text:00001A90 loc_1A90:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+8Fj
.text:00001A90                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+B1j
.text:00001A90                 movzx   eax, [ebp+var_1F]
.text:00001A94                 test    eax, eax
.text:00001A96                 jnz     short loc_1ACB
.text:00001A98                 cmp     [ebp+var_24], 63h ; 'c'
.text:00001A9C                 jnz     short loc_1ACB
.text:00001A9E                 lea     ecx, [ebp+var_40] ; this
.text:00001AA1                 call    ??0CWzAesExtra@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CWzAesExtra::CWzAesExtra(void)
.text:00001AA6                 lea     ecx, [ebp+var_40]
.text:00001AA9                 push    ecx             ; struct NArchive::NZip::CWzAesExtra *
.text:00001AAA                 mov     ecx, [ebp+arg_4]
.text:00001AAD                 add     ecx, 48h ; 'H'  ; this
.text:00001AB0                 call    ?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z ; NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &)
.text:00001AB5                 movzx   edx, al
.text:00001AB8                 test    edx, edx
.text:00001ABA                 jz      short loc_1ACB
.text:00001ABC                 mov     [ebp+var_1E], 1
.text:00001AC0                 lea     ecx, [ebp+var_40] ; this
.text:00001AC3                 call    ?NeedCrc@CWzAesExtra@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CWzAesExtra::NeedCrc(void)
.text:00001AC8                 mov     [ebp+var_1D], al
.text:00001ACB
.text:00001ACB loc_1ACB:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+7Cj
.text:00001ACB                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+E6j ...
.text:00001ACB                 push    20h ; ' '       ; unsigned int
.text:00001ACD                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001AD2                 add     esp, 4
.text:00001AD5                 mov     [ebp+var_168], eax
.text:00001ADB                 mov     byte ptr [ebp+var_4], 1
.text:00001ADF                 cmp     [ebp+var_168], 0
.text:00001AE6                 jz      short loc_1AFB
.text:00001AE8                 mov     ecx, [ebp+var_168]
.text:00001AEE                 call    ??0COutStreamWithCRC@@QAE@XZ ; COutStreamWithCRC::COutStreamWithCRC(void)
.text:00001AF3                 mov     [ebp+var_240], eax
.text:00001AF9                 jmp     short loc_1B05
.text:00001AFB ; ---------------------------------------------------------------------------
.text:00001AFB
.text:00001AFB loc_1AFB:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+136j
.text:00001AFB                 mov     [ebp+var_240], 0
.text:00001B05
.text:00001B05 loc_1B05:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+149j
.text:00001B05                 mov     eax, [ebp+var_240]
.text:00001B0B                 mov     [ebp+var_164], eax
.text:00001B11                 mov     byte ptr [ebp+var_4], 0
.text:00001B15                 mov     ecx, [ebp+var_164]
.text:00001B1B                 mov     [ebp+var_48], ecx
.text:00001B1E                 mov     edx, [ebp+var_48]
.text:00001B21                 push    edx
.text:00001B22                 lea     ecx, [ebp+var_50]
.text:00001B25                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)
.text:00001B2A                 mov     byte ptr [ebp+var_4], 2
.text:00001B2E                 mov     eax, [ebp+arg_8]
.text:00001B31                 push    eax             ; struct ISequentialOutStream *
.text:00001B32                 mov     ecx, [ebp+var_48] ; this
.text:00001B35                 call    ?SetStream@COutStreamWithCRC@@QAEXPAUISequentialOutStream@@@Z ; COutStreamWithCRC::SetStream(ISequentialOutStream *)
.text:00001B3A                 movzx   ecx, [ebp+var_1D]
.text:00001B3E                 push    ecx             ; bool
.text:00001B3F                 mov     ecx, [ebp+var_48] ; this
.text:00001B42                 call    ?Init@COutStreamWithCRC@@QAEX_N@Z ; COutStreamWithCRC::Init(bool)
.text:00001B47                 lea     ecx, [ebp+var_64]
.text:00001B4A                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00001B4F                 mov     byte ptr [ebp+var_4], 3
.text:00001B53                 mov     edx, [ebp+arg_4]
.text:00001B56                 mov     eax, [edx+10h]
.text:00001B59                 mov     dword ptr [ebp+var_70], eax
.text:00001B5C                 mov     ecx, [edx+14h]
.text:00001B5F                 mov     dword ptr [ebp+var_70+4], ecx
.text:00001B62                 movzx   edx, [ebp+var_1E]
.text:00001B66                 test    edx, edx
.text:00001B68                 jz      short loc_1BC6
.text:00001B6A                 cmp     dword ptr [ebp+var_70+4], 0
.text:00001B6E                 ja      short loc_1BB4
.text:00001B70                 jb      short loc_1B78
.text:00001B72                 cmp     dword ptr [ebp+var_70], 0Ah
.text:00001B76                 jnb     short loc_1BB4
.text:00001B78
.text:00001B78 loc_1B78:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1C0j
.text:00001B78                 mov     [ebp+var_16C], 0
.text:00001B82                 mov     byte ptr [ebp+var_4], 2
.text:00001B86                 lea     ecx, [ebp+var_64]
.text:00001B89                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001B8E                 mov     byte ptr [ebp+var_4], 0
.text:00001B92                 lea     ecx, [ebp+var_50]
.text:00001B95                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001B9A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001BA1                 lea     ecx, [ebp+var_18] ; this
.text:00001BA4                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:00001BA9                 mov     eax, [ebp+var_16C]
.text:00001BAF                 jmp     loc_310D
.text:00001BB4 ; ---------------------------------------------------------------------------
.text:00001BB4
.text:00001BB4 loc_1BB4:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1BEj
.text:00001BB4                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1C6j
.text:00001BB4                 mov     eax, dword ptr [ebp+var_70]
.text:00001BB7                 sub     eax, 0Ah
.text:00001BBA                 mov     ecx, dword ptr [ebp+var_70+4]
.text:00001BBD                 sbb     ecx, 0
.text:00001BC0                 mov     dword ptr [ebp+var_70], eax
.text:00001BC3                 mov     dword ptr [ebp+var_70+4], ecx
.text:00001BC6
.text:00001BC6 loc_1BC6:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1B8j
.text:00001BC6                 mov     ecx, [ebp+arg_4] ; this
.text:00001BC9                 call    ?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CItemEx::GetDataPosition(void)
.text:00001BCE                 mov     dword ptr [ebp+var_78], eax
.text:00001BD1                 mov     dword ptr [ebp+var_78+4], edx
.text:00001BD4                 mov     edx, dword ptr [ebp+var_70+4]
.text:00001BD7                 push    edx
.text:00001BD8                 mov     eax, dword ptr [ebp+var_70]
.text:00001BDB                 push    eax             ; unsigned __int64
.text:00001BDC                 mov     ecx, dword ptr [ebp+var_78+4]
.text:00001BDF                 push    ecx
.text:00001BE0                 mov     edx, dword ptr [ebp+var_78]
.text:00001BE3                 push    edx             ; unsigned __int64
.text:00001BE4                 mov     ecx, [ebp+arg_0] ; this
.text:00001BE7                 call    ?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z ; NArchive::NZip::CInArchive::CreateLimitedStream(unsigned __int64,unsigned __int64)
.text:00001BEC                 push    eax
.text:00001BED                 lea     ecx, [ebp+var_64]
.text:00001BF0                 call    ?Attach@?$CMyComPtr@UISequentialInStream@@@@QAEXPAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::Attach(ISequentialInStream *)
.text:00001BF5                 mov     eax, dword ptr [ebp+var_78]
.text:00001BF8                 add     eax, dword ptr [ebp+var_70]
.text:00001BFB                 mov     ecx, dword ptr [ebp+var_78+4]
.text:00001BFE                 adc     ecx, dword ptr [ebp+var_70+4]
.text:00001C01                 mov     dword ptr [ebp+var_5C], eax
.text:00001C04                 mov     dword ptr [ebp+var_5C+4], ecx
.text:00001C07                 lea     ecx, [ebp+var_80]
.text:00001C0A                 call    ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>(void)
.text:00001C0F                 mov     byte ptr [ebp+var_4], 4
.text:00001C13                 mov     ecx, [ebp+arg_4] ; this
.text:00001C16                 call    ?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsEncrypted(void)
.text:00001C1B                 movzx   edx, al
.text:00001C1E                 test    edx, edx
.text:00001C20                 jz      loc_231A
.text:00001C26                 movzx   eax, [ebp+var_1E]
.text:00001C2A                 test    eax, eax
.text:00001C2C                 jz      loc_1DA4
.text:00001C32                 lea     ecx, [ebp+var_90] ; this
.text:00001C38                 call    ??0CWzAesExtra@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CWzAesExtra::CWzAesExtra(void)
.text:00001C3D                 lea     ecx, [ebp+var_90]
.text:00001C43                 push    ecx             ; struct NArchive::NZip::CWzAesExtra *
.text:00001C44                 mov     ecx, [ebp+arg_4]
.text:00001C47                 add     ecx, 48h ; 'H'  ; this
.text:00001C4A                 call    ?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z ; NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &)
.text:00001C4F                 movzx   edx, al
.text:00001C52                 test    edx, edx
.text:00001C54                 jnz     short loc_1C9E
.text:00001C56                 mov     [ebp+var_170], 0
.text:00001C60                 mov     byte ptr [ebp+var_4], 3
.text:00001C64                 lea     ecx, [ebp+var_80]
.text:00001C67                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:00001C6C                 mov     byte ptr [ebp+var_4], 2
.text:00001C70                 lea     ecx, [ebp+var_64]
.text:00001C73                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001C78                 mov     byte ptr [ebp+var_4], 0
.text:00001C7C                 lea     ecx, [ebp+var_50]
.text:00001C7F                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001C84                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001C8B                 lea     ecx, [ebp+var_18] ; this
.text:00001C8E                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:00001C93                 mov     eax, [ebp+var_170]
.text:00001C99                 jmp     loc_310D
.text:00001C9E ; ---------------------------------------------------------------------------
.text:00001C9E
.text:00001C9E loc_1C9E:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+2A4j
.text:00001C9E                 movzx   eax, [ebp+var_8C]
.text:00001CA5                 mov     [ebp+var_24], eax
.text:00001CA8                 mov     ecx, [ebp+var_10]
.text:00001CAB                 add     ecx, 14h
.text:00001CAE                 call    ??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ ; CMyComPtr<ICompressFilter>::operator!(void)
.text:00001CB3                 movzx   ecx, al
.text:00001CB6                 test    ecx, ecx
.text:00001CB8                 jz      short loc_1D25
.text:00001CBA                 push    230h            ; unsigned int
.text:00001CBF                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001CC4                 add     esp, 4
.text:00001CC7                 mov     [ebp+var_178], eax
.text:00001CCD                 mov     byte ptr [ebp+var_4], 5
.text:00001CD1                 cmp     [ebp+var_178], 0
.text:00001CD8                 jz      short loc_1CED
.text:00001CDA                 mov     ecx, [ebp+var_178] ; this
.text:00001CE0                 call    ??0CDecoder@NWzAes@NCrypto@@QAE@XZ ; NCrypto::NWzAes::CDecoder::CDecoder(void)
.text:00001CE5                 mov     [ebp+var_244], eax
.text:00001CEB                 jmp     short loc_1CF7
.text:00001CED ; ---------------------------------------------------------------------------
.text:00001CED
.text:00001CED loc_1CED:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+328j
.text:00001CED                 mov     [ebp+var_244], 0
.text:00001CF7
.text:00001CF7 loc_1CF7:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+33Bj
.text:00001CF7                 mov     edx, [ebp+var_244]
.text:00001CFD                 mov     [ebp+var_174], edx
.text:00001D03                 mov     byte ptr [ebp+var_4], 4
.text:00001D07                 mov     eax, [ebp+var_10]
.text:00001D0A                 mov     ecx, [ebp+var_174]
.text:00001D10                 mov     [eax+8], ecx
.text:00001D13                 mov     edx, [ebp+var_10]
.text:00001D16                 mov     eax, [edx+8]
.text:00001D19                 push    eax
.text:00001D1A                 mov     ecx, [ebp+var_10]
.text:00001D1D                 add     ecx, 14h
.text:00001D20                 call    ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)
.text:00001D25
.text:00001D25 loc_1D25:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+308j
.text:00001D25                 mov     ecx, [ebp+var_10]
.text:00001D28                 add     ecx, 14h
.text:00001D2B                 push    ecx
.text:00001D2C                 lea     ecx, [ebp+var_80]
.text:00001D2F                 call    ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z ; CMyComPtr<ICompressFilter>::operator=(CMyComPtr<ICompressFilter> const &)
.text:00001D34                 movzx   edx, [ebp+var_8E]
.text:00001D3B                 push    edx             ; unsigned int
.text:00001D3C                 mov     eax, [ebp+var_10]
.text:00001D3F                 mov     ecx, [eax+8]    ; this
.text:00001D42                 call    ?SetKeyMode@CBaseCoder@NWzAes@NCrypto@@QAE_NI@Z ; NCrypto::NWzAes::CBaseCoder::SetKeyMode(uint)
.text:00001D47                 movzx   ecx, al
.text:00001D4A                 test    ecx, ecx
.text:00001D4C                 jnz     short loc_1D9F
.text:00001D4E                 mov     edx, [ebp+arg_18]
.text:00001D51                 mov     dword ptr [edx], 1
.text:00001D57                 mov     [ebp+var_17C], 0
.text:00001D61                 mov     byte ptr [ebp+var_4], 3
.text:00001D65                 lea     ecx, [ebp+var_80]
.text:00001D68                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:00001D6D                 mov     byte ptr [ebp+var_4], 2
.text:00001D71                 lea     ecx, [ebp+var_64]
.text:00001D74                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001D79                 mov     byte ptr [ebp+var_4], 0
.text:00001D7D                 lea     ecx, [ebp+var_50]
.text:00001D80                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001D85                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001D8C                 lea     ecx, [ebp+var_18] ; this
.text:00001D8F                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:00001D94                 mov     eax, [ebp+var_17C]
.text:00001D9A                 jmp     loc_310D
.text:00001D9F ; ---------------------------------------------------------------------------
.text:00001D9F
.text:00001D9F loc_1D9F:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+39Cj
.text:00001D9F                 jmp     loc_1EC8
.text:00001DA4 ; ---------------------------------------------------------------------------
.text:00001DA4
.text:00001DA4 loc_1DA4:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+27Cj
.text:00001DA4                 movzx   eax, [ebp+var_1F]
.text:00001DA8                 test    eax, eax
.text:00001DAA                 jz      loc_1E41
.text:00001DB0                 mov     ecx, [ebp+var_10]
.text:00001DB3                 add     ecx, 10h
.text:00001DB6                 call    ??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ ; CMyComPtr<ICompressFilter>::operator!(void)
.text:00001DBB                 movzx   ecx, al
.text:00001DBE                 test    ecx, ecx
.text:00001DC0                 jz      short loc_1E2D
.text:00001DC2                 push    198h            ; unsigned int
.text:00001DC7                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001DCC                 add     esp, 4
.text:00001DCF                 mov     [ebp+var_184], eax
.text:00001DD5                 mov     byte ptr [ebp+var_4], 6
.text:00001DD9                 cmp     [ebp+var_184], 0
.text:00001DE0                 jz      short loc_1DF5
.text:00001DE2                 mov     ecx, [ebp+var_184] ; this
.text:00001DE8                 call    ??0CDecoder@NZipStrong@NCrypto@@QAE@XZ ; NCrypto::NZipStrong::CDecoder::CDecoder(void)
.text:00001DED                 mov     [ebp+var_248], eax
.text:00001DF3                 jmp     short loc_1DFF
.text:00001DF5 ; ---------------------------------------------------------------------------
.text:00001DF5
.text:00001DF5 loc_1DF5:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+430j
.text:00001DF5                 mov     [ebp+var_248], 0
.text:00001DFF
.text:00001DFF loc_1DFF:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+443j
.text:00001DFF                 mov     edx, [ebp+var_248]
.text:00001E05                 mov     [ebp+var_180], edx
.text:00001E0B                 mov     byte ptr [ebp+var_4], 4
.text:00001E0F                 mov     eax, [ebp+var_10]
.text:00001E12                 mov     ecx, [ebp+var_180]
.text:00001E18                 mov     [eax+4], ecx
.text:00001E1B                 mov     edx, [ebp+var_10]
.text:00001E1E                 mov     eax, [edx+4]
.text:00001E21                 push    eax
.text:00001E22                 mov     ecx, [ebp+var_10]
.text:00001E25                 add     ecx, 10h
.text:00001E28                 call    ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)
.text:00001E2D
.text:00001E2D loc_1E2D:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+410j
.text:00001E2D                 mov     ecx, [ebp+var_10]
.text:00001E30                 add     ecx, 10h
.text:00001E33                 push    ecx
.text:00001E34                 lea     ecx, [ebp+var_80]
.text:00001E37                 call    ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z ; CMyComPtr<ICompressFilter>::operator=(CMyComPtr<ICompressFilter> const &)
.text:00001E3C                 jmp     loc_1EC8
.text:00001E41 ; ---------------------------------------------------------------------------
.text:00001E41
.text:00001E41 loc_1E41:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+3FAj
.text:00001E41                 mov     ecx, [ebp+var_10]
.text:00001E44                 add     ecx, 0Ch
.text:00001E47                 call    ??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ ; CMyComPtr<ICompressFilter>::operator!(void)
.text:00001E4C                 movzx   edx, al
.text:00001E4F                 test    edx, edx
.text:00001E51                 jz      short loc_1EB9
.text:00001E53                 push    30h ; '0'       ; unsigned int
.text:00001E55                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001E5A                 add     esp, 4
.text:00001E5D                 mov     [ebp+var_18C], eax
.text:00001E63                 mov     byte ptr [ebp+var_4], 7
.text:00001E67                 cmp     [ebp+var_18C], 0
.text:00001E6E                 jz      short loc_1E83
.text:00001E70                 mov     ecx, [ebp+var_18C] ; this
.text:00001E76                 call    ??0CDecoder@NZip@NCrypto@@QAE@XZ ; NCrypto::NZip::CDecoder::CDecoder(void)
.text:00001E7B                 mov     [ebp+var_24C], eax
.text:00001E81                 jmp     short loc_1E8D
.text:00001E83 ; ---------------------------------------------------------------------------
.text:00001E83
.text:00001E83 loc_1E83:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+4BEj
.text:00001E83                 mov     [ebp+var_24C], 0
.text:00001E8D
.text:00001E8D loc_1E8D:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+4D1j
.text:00001E8D                 mov     eax, [ebp+var_24C]
.text:00001E93                 mov     [ebp+var_188], eax
.text:00001E99                 mov     byte ptr [ebp+var_4], 4
.text:00001E9D                 mov     ecx, [ebp+var_10]
.text:00001EA0                 mov     edx, [ebp+var_188]
.text:00001EA6                 mov     [ecx], edx
.text:00001EA8                 mov     eax, [ebp+var_10]
.text:00001EAB                 mov     ecx, [eax]
.text:00001EAD                 push    ecx
.text:00001EAE                 mov     ecx, [ebp+var_10]
.text:00001EB1                 add     ecx, 0Ch
.text:00001EB4                 call    ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)
.text:00001EB9
.text:00001EB9 loc_1EB9:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+4A1j
.text:00001EB9                 mov     edx, [ebp+var_10]
.text:00001EBC                 add     edx, 0Ch
.text:00001EBF                 push    edx
.text:00001EC0                 lea     ecx, [ebp+var_80]
.text:00001EC3                 call    ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z ; CMyComPtr<ICompressFilter>::operator=(CMyComPtr<ICompressFilter> const &)
.text:00001EC8
.text:00001EC8 loc_1EC8:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &):loc_1D9Fj
.text:00001EC8                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+48Cj
.text:00001EC8                 lea     ecx, [ebp+var_9C]
.text:00001ECE                 call    ??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>(void)
.text:00001ED3                 mov     byte ptr [ebp+var_4], 8
.text:00001ED7                 lea     ecx, [ebp+var_9C]
.text:00001EDD                 call    ??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator&(void)
.text:00001EE2                 push    eax
.text:00001EE3                 push    offset _IID_ICryptoSetPassword
.text:00001EE8                 lea     ecx, [ebp+var_80]
.text:00001EEB                 call    ??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UICompressFilter@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z ; CMyComPtr<ICompressFilter>::QueryInterface<ICryptoSetPassword>(_GUID const &,ICryptoSetPassword * *)
.text:00001EF0                 mov     [ebp+var_A4], eax
.text:00001EF6                 cmp     [ebp+var_A4], 0
.text:00001EFD                 jz      short loc_1F58
.text:00001EFF                 mov     eax, [ebp+var_A4]
.text:00001F05                 mov     [ebp+var_190], eax
.text:00001F0B                 mov     byte ptr [ebp+var_4], 4
.text:00001F0F                 lea     ecx, [ebp+var_9C]
.text:00001F15                 call    ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)
.text:00001F1A                 mov     byte ptr [ebp+var_4], 3
.text:00001F1E                 lea     ecx, [ebp+var_80]
.text:00001F21                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:00001F26                 mov     byte ptr [ebp+var_4], 2
.text:00001F2A                 lea     ecx, [ebp+var_64]
.text:00001F2D                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001F32                 mov     byte ptr [ebp+var_4], 0
.text:00001F36                 lea     ecx, [ebp+var_50]
.text:00001F39                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001F3E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001F45                 lea     ecx, [ebp+var_18] ; this
.text:00001F48                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:00001F4D                 mov     eax, [ebp+var_190]
.text:00001F53                 jmp     loc_310D
.text:00001F58 ; ---------------------------------------------------------------------------
.text:00001F58
.text:00001F58 loc_1F58:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+54Dj
.text:00001F58                 mov     ecx, [ebp+var_10]
.text:00001F5B                 add     ecx, 20h ; ' '
.text:00001F5E                 call    ??7?$CMyComPtr@UICryptoGetTextPassword@@@@QBE_NXZ ; CMyComPtr<ICryptoGetTextPassword>::operator!(void)
.text:00001F63                 movzx   ecx, al
.text:00001F66                 test    ecx, ecx
.text:00001F68                 jz      short loc_1F91
.text:00001F6A                 mov     ecx, [ebp+var_10]
.text:00001F6D                 add     ecx, 20h ; ' '
.text:00001F70                 call    ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator&(void)
.text:00001F75                 mov     esi, esp
.text:00001F77                 push    eax
.text:00001F78                 push    offset _IID_ICryptoGetTextPassword
.text:00001F7D                 mov     edx, [ebp+arg_C]
.text:00001F80                 mov     eax, [edx]
.text:00001F82                 mov     ecx, [ebp+arg_C]
.text:00001F85                 push    ecx
.text:00001F86                 mov     edx, [eax]
.text:00001F88                 call    edx
.text:00001F8A                 cmp     esi, esp
.text:00001F8C                 call    __RTC_CheckEsp
.text:00001F91
.text:00001F91 loc_1F91:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+5B8j
.text:00001F91                 mov     ecx, [ebp+var_10]
.text:00001F94                 add     ecx, 20h ; ' '
.text:00001F97                 call    ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *(void)
.text:00001F9C                 test    eax, eax
.text:00001F9E                 jz      loc_2271
.text:00001FA4                 lea     ecx, [ebp+var_AC] ; this
.text:00001FAA                 call    ??0CMyComBSTR@@QAE@XZ ; CMyComBSTR::CMyComBSTR(void)
.text:00001FAF                 mov     byte ptr [ebp+var_4], 9
.text:00001FB3                 mov     ecx, [ebp+var_10]
.text:00001FB6                 add     ecx, 20h ; ' '
.text:00001FB9                 call    ??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator->(void)
.text:00001FBE                 mov     [ebp+var_250], eax
.text:00001FC4                 lea     ecx, [ebp+var_AC]
.text:00001FCA                 call    ??ICMyComBSTR@@QAEPAPA_WXZ ; CMyComBSTR::operator&(void)
.text:00001FCF                 mov     esi, esp
.text:00001FD1                 push    eax
.text:00001FD2                 mov     eax, [ebp+var_250]
.text:00001FD8                 push    eax
.text:00001FD9                 mov     ecx, [ebp+var_250]
.text:00001FDF                 mov     edx, [ecx]
.text:00001FE1                 mov     eax, [edx+0Ch]
.text:00001FE4                 call    eax
.text:00001FE6                 cmp     esi, esp
.text:00001FE8                 call    __RTC_CheckEsp
.text:00001FED                 mov     [ebp+var_B4], eax
.text:00001FF3                 cmp     [ebp+var_B4], 0
.text:00001FFA                 jz      short loc_2064
.text:00001FFC                 mov     ecx, [ebp+var_B4]
.text:00002002                 mov     [ebp+var_194], ecx
.text:00002008                 mov     byte ptr [ebp+var_4], 8
.text:0000200C                 lea     ecx, [ebp+var_AC] ; this
.text:00002012                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:00002017                 mov     byte ptr [ebp+var_4], 4
.text:0000201B                 lea     ecx, [ebp+var_9C]
.text:00002021                 call    ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)
.text:00002026                 mov     byte ptr [ebp+var_4], 3
.text:0000202A                 lea     ecx, [ebp+var_80]
.text:0000202D                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:00002032                 mov     byte ptr [ebp+var_4], 2
.text:00002036                 lea     ecx, [ebp+var_64]
.text:00002039                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000203E                 mov     byte ptr [ebp+var_4], 0
.text:00002042                 lea     ecx, [ebp+var_50]
.text:00002045                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000204A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002051                 lea     ecx, [ebp+var_18] ; this
.text:00002054                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:00002059                 mov     eax, [ebp+var_194]
.text:0000205F                 jmp     loc_310D
.text:00002064 ; ---------------------------------------------------------------------------
.text:00002064
.text:00002064 loc_2064:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+64Aj
.text:00002064                 lea     ecx, [ebp+var_C4]
.text:0000206A                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:0000206F                 mov     byte ptr [ebp+var_4], 0Ah
.text:00002073                 lea     ecx, [ebp+var_AC]
.text:00002079                 call    ??BCMyComBSTR@@QBEPB_WXZ ; CMyComBSTR::operator wchar_t const *(void)
.text:0000207E                 test    eax, eax
.text:00002080                 jz      loc_2184
.text:00002086                 movzx   edx, [ebp+var_1E]
.text:0000208A                 test    edx, edx
.text:0000208C                 jnz     short loc_2096
.text:0000208E                 movzx   eax, [ebp+var_1F]
.text:00002092                 test    eax, eax
.text:00002094                 jz      short loc_210E
.text:00002096
.text:00002096 loc_2096:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+6DCj
.text:00002096                 lea     ecx, [ebp+var_AC]
.text:0000209C                 call    ??BCMyComBSTR@@QBEPB_WXZ ; CMyComBSTR::operator wchar_t const *(void)
.text:000020A1                 push    eax
.text:000020A2                 lea     ecx, [ebp+var_1A0]
.text:000020A8                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:000020AD                 mov     byte ptr [ebp+var_4], 0Bh
.text:000020B1                 push    0
.text:000020B3                 lea     ecx, [ebp+var_1A0]
.text:000020B9                 push    ecx
.text:000020BA                 lea     edx, [ebp+var_1AC]
.text:000020C0                 push    edx
.text:000020C1                 call    ?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z ; UnicodeStringToMultiByte(UString const &,uint)
.text:000020C6                 mov     [ebp+var_254], eax
.text:000020CC                 mov     eax, [ebp+var_254]
.text:000020D2                 mov     [ebp+var_258], eax
.text:000020D8                 mov     byte ptr [ebp+var_4], 0Ch
.text:000020DC                 mov     ecx, [ebp+var_258]
.text:000020E2                 push    ecx
.text:000020E3                 lea     ecx, [ebp+var_C4]
.text:000020E9                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:000020EE                 mov     byte ptr [ebp+var_4], 0Bh
.text:000020F2                 lea     ecx, [ebp+var_1AC] ; this
.text:000020F8                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000020FD                 mov     byte ptr [ebp+var_4], 0Ah
.text:00002101                 lea     ecx, [ebp+var_1A0] ; this
.text:00002107                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000210C                 jmp     short loc_2184
.text:0000210E ; ---------------------------------------------------------------------------
.text:0000210E
.text:0000210E loc_210E:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+6E4j
.text:0000210E                 lea     ecx, [ebp+var_AC]
.text:00002114                 call    ??BCMyComBSTR@@QBEPB_WXZ ; CMyComBSTR::operator wchar_t const *(void)
.text:00002119                 push    eax
.text:0000211A                 lea     ecx, [ebp+var_1B8]
.text:00002120                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00002125                 mov     byte ptr [ebp+var_4], 0Dh
.text:00002129                 push    1
.text:0000212B                 lea     edx, [ebp+var_1B8]
.text:00002131                 push    edx
.text:00002132                 lea     eax, [ebp+var_1C4]
.text:00002138                 push    eax
.text:00002139                 call    ?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z ; UnicodeStringToMultiByte(UString const &,uint)
.text:0000213E                 mov     [ebp+var_25C], eax
.text:00002144                 mov     ecx, [ebp+var_25C]
.text:0000214A                 mov     [ebp+var_260], ecx
.text:00002150                 mov     byte ptr [ebp+var_4], 0Eh
.text:00002154                 mov     edx, [ebp+var_260]
.text:0000215A                 push    edx
.text:0000215B                 lea     ecx, [ebp+var_C4]
.text:00002161                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:00002166                 mov     byte ptr [ebp+var_4], 0Dh
.text:0000216A                 lea     ecx, [ebp+var_1C4] ; this
.text:00002170                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00002175                 mov     byte ptr [ebp+var_4], 0Ah
.text:00002179                 lea     ecx, [ebp+var_1B8] ; this
.text:0000217F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002184
.text:00002184 loc_2184:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+6D0j
.text:00002184                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+75Cj
.text:00002184                 lea     ecx, [ebp+var_9C]
.text:0000218A                 call    ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator->(void)
.text:0000218F                 mov     [ebp+var_264], eax
.text:00002195                 lea     ecx, [ebp+var_C4] ; this
.text:0000219B                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:000021A0                 mov     esi, esp
.text:000021A2                 push    eax
.text:000021A3                 lea     ecx, [ebp+var_C4]
.text:000021A9                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000021AE                 push    eax
.text:000021AF                 mov     eax, [ebp+var_264]
.text:000021B5                 push    eax
.text:000021B6                 mov     ecx, [ebp+var_264]
.text:000021BC                 mov     edx, [ecx]
.text:000021BE                 mov     eax, [edx+0Ch]
.text:000021C1                 call    eax
.text:000021C3                 cmp     esi, esp
.text:000021C5                 call    __RTC_CheckEsp
.text:000021CA                 mov     [ebp+var_CC], eax
.text:000021D0                 cmp     [ebp+var_CC], 0
.text:000021D7                 jz      short loc_224E
.text:000021D9                 mov     [ebp+var_1C8], 0
.text:000021E3                 mov     byte ptr [ebp+var_4], 9
.text:000021E7                 lea     ecx, [ebp+var_C4] ; this
.text:000021ED                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000021F2                 mov     byte ptr [ebp+var_4], 8
.text:000021F6                 lea     ecx, [ebp+var_AC] ; this
.text:000021FC                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:00002201                 mov     byte ptr [ebp+var_4], 4
.text:00002205                 lea     ecx, [ebp+var_9C]
.text:0000220B                 call    ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)
.text:00002210                 mov     byte ptr [ebp+var_4], 3
.text:00002214                 lea     ecx, [ebp+var_80]
.text:00002217                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:0000221C                 mov     byte ptr [ebp+var_4], 2
.text:00002220                 lea     ecx, [ebp+var_64]
.text:00002223                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002228                 mov     byte ptr [ebp+var_4], 0
.text:0000222C                 lea     ecx, [ebp+var_50]
.text:0000222F                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002234                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000223B                 lea     ecx, [ebp+var_18] ; this
.text:0000223E                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:00002243                 mov     eax, [ebp+var_1C8]
.text:00002249                 jmp     loc_310D
.text:0000224E ; ---------------------------------------------------------------------------
.text:0000224E
.text:0000224E loc_224E:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+827j
.text:0000224E                 mov     byte ptr [ebp+var_4], 9
.text:00002252                 lea     ecx, [ebp+var_C4] ; this
.text:00002258                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000225D                 mov     byte ptr [ebp+var_4], 8
.text:00002261                 lea     ecx, [ebp+var_AC] ; this
.text:00002267                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:0000226C                 jmp     loc_230B
.text:00002271 ; ---------------------------------------------------------------------------
.text:00002271
.text:00002271 loc_2271:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+5EEj
.text:00002271                 lea     ecx, [ebp+var_9C]
.text:00002277                 call    ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator->(void)
.text:0000227C                 mov     [ebp+var_268], eax
.text:00002282                 mov     esi, esp
.text:00002284                 push    0
.text:00002286                 push    0
.text:00002288                 mov     ecx, [ebp+var_268]
.text:0000228E                 push    ecx
.text:0000228F                 mov     edx, [ebp+var_268]
.text:00002295                 mov     eax, [edx]
.text:00002297                 mov     ecx, [eax+0Ch]
.text:0000229A                 call    ecx
.text:0000229C                 cmp     esi, esp
.text:0000229E                 call    __RTC_CheckEsp
.text:000022A3                 mov     [ebp+var_D0], eax
.text:000022A9                 cmp     [ebp+var_D0], 0
.text:000022B0                 jz      short loc_230B
.text:000022B2                 mov     edx, [ebp+var_D0]
.text:000022B8                 mov     [ebp+var_1CC], edx
.text:000022BE                 mov     byte ptr [ebp+var_4], 4
.text:000022C2                 lea     ecx, [ebp+var_9C]
.text:000022C8                 call    ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)
.text:000022CD                 mov     byte ptr [ebp+var_4], 3
.text:000022D1                 lea     ecx, [ebp+var_80]
.text:000022D4                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:000022D9                 mov     byte ptr [ebp+var_4], 2
.text:000022DD                 lea     ecx, [ebp+var_64]
.text:000022E0                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000022E5                 mov     byte ptr [ebp+var_4], 0
.text:000022E9                 lea     ecx, [ebp+var_50]
.text:000022EC                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000022F1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000022F8                 lea     ecx, [ebp+var_18] ; this
.text:000022FB                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:00002300                 mov     eax, [ebp+var_1CC]
.text:00002306                 jmp     loc_310D
.text:0000230B ; ---------------------------------------------------------------------------
.text:0000230B
.text:0000230B loc_230B:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+8BCj
.text:0000230B                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+900j
.text:0000230B                 mov     byte ptr [ebp+var_4], 4
.text:0000230F                 lea     ecx, [ebp+var_9C]
.text:00002315                 call    ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)
.text:0000231A
.text:0000231A loc_231A:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+270j
.text:0000231A                 mov     [ebp+var_D4], 0
.text:00002324                 jmp     short loc_2335
.text:00002326 ; ---------------------------------------------------------------------------
.text:00002326
.text:00002326 loc_2326:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &):loc_2363j
.text:00002326                 mov     eax, [ebp+var_D4]
.text:0000232C                 add     eax, 1
.text:0000232F                 mov     [ebp+var_D4], eax
.text:00002335
.text:00002335 loc_2335:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+974j
.text:00002335                 mov     ecx, [ebp+var_10]
.text:00002338                 add     ecx, 24h ; '$'
.text:0000233B                 call    ?Size@?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CMethodItem>::Size(void)
.text:00002340                 cmp     [ebp+var_D4], eax
.text:00002346                 jnb     short loc_2365
.text:00002348                 mov     ecx, [ebp+var_D4]
.text:0000234E                 push    ecx
.text:0000234F                 mov     ecx, [ebp+var_10]
.text:00002352                 add     ecx, 24h ; '$'
.text:00002355                 call    ??A?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAEAAUCMethodItem@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CMethodItem>::operator[](uint)
.text:0000235A                 mov     edx, [eax]
.text:0000235C                 cmp     edx, [ebp+var_24]
.text:0000235F                 jnz     short loc_2363
.text:00002361                 jmp     short loc_2365
.text:00002363 ; ---------------------------------------------------------------------------
.text:00002363
.text:00002363 loc_2363:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+9AFj
.text:00002363                 jmp     short loc_2326
.text:00002365 ; ---------------------------------------------------------------------------
.text:00002365
.text:00002365 loc_2365:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+996j
.text:00002365                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+9B1j
.text:00002365                 mov     ecx, [ebp+var_10]
.text:00002368                 add     ecx, 24h ; '$'
.text:0000236B                 call    ?Size@?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CMethodItem>::Size(void)
.text:00002370                 cmp     [ebp+var_D4], eax
.text:00002376                 jnz     loc_27C7
.text:0000237C                 lea     ecx, [ebp+var_E0] ; this
.text:00002382                 call    ??0CMethodItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMethodItem::CMethodItem(void)
.text:00002387                 mov     byte ptr [ebp+var_4], 0Fh
.text:0000238B                 mov     eax, [ebp+var_24]
.text:0000238E                 mov     [ebp+var_E0], eax
.text:00002394                 cmp     [ebp+var_24], 0
.text:00002398                 jnz     short loc_23FB
.text:0000239A                 push    28h ; '('       ; unsigned int
.text:0000239C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000023A1                 add     esp, 4
.text:000023A4                 mov     [ebp+var_1D4], eax
.text:000023AA                 mov     byte ptr [ebp+var_4], 10h
.text:000023AE                 cmp     [ebp+var_1D4], 0
.text:000023B5                 jz      short loc_23CA
.text:000023B7                 mov     ecx, [ebp+var_1D4] ; this
.text:000023BD                 call    ??0CCopyCoder@NCompress@@QAE@XZ ; NCompress::CCopyCoder::CCopyCoder(void)
.text:000023C2                 mov     [ebp+var_26C], eax
.text:000023C8                 jmp     short loc_23D4
.text:000023CA ; ---------------------------------------------------------------------------
.text:000023CA
.text:000023CA loc_23CA:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+A05j
.text:000023CA                 mov     [ebp+var_26C], 0
.text:000023D4
.text:000023D4 loc_23D4:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+A18j
.text:000023D4                 mov     ecx, [ebp+var_26C]
.text:000023DA                 mov     [ebp+var_1D0], ecx
.text:000023E0                 mov     byte ptr [ebp+var_4], 0Fh
.text:000023E4                 mov     edx, [ebp+var_1D0]
.text:000023EA                 push    edx
.text:000023EB                 lea     ecx, [ebp+var_DC]
.text:000023F1                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:000023F6                 jmp     loc_27A0
.text:000023FB ; ---------------------------------------------------------------------------
.text:000023FB
.text:000023FB loc_23FB:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+9E8j
.text:000023FB                 cmp     [ebp+var_24], 1
.text:000023FF                 jnz     short loc_2465
.text:00002401                 push    0C008h          ; unsigned int
.text:00002406                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000240B                 add     esp, 4
.text:0000240E                 mov     [ebp+var_1DC], eax
.text:00002414                 mov     byte ptr [ebp+var_4], 11h
.text:00002418                 cmp     [ebp+var_1DC], 0
.text:0000241F                 jz      short loc_2434
.text:00002421                 mov     ecx, [ebp+var_1DC] ; this
.text:00002427                 call    ??0CDecoder@NShrink@NCompress@@QAE@XZ ; NCompress::NShrink::CDecoder::CDecoder(void)
.text:0000242C                 mov     [ebp+var_270], eax
.text:00002432                 jmp     short loc_243E
.text:00002434 ; ---------------------------------------------------------------------------
.text:00002434
.text:00002434 loc_2434:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+A6Fj
.text:00002434                 mov     [ebp+var_270], 0
.text:0000243E
.text:0000243E loc_243E:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+A82j
.text:0000243E                 mov     eax, [ebp+var_270]
.text:00002444                 mov     [ebp+var_1D8], eax
.text:0000244A                 mov     byte ptr [ebp+var_4], 0Fh
.text:0000244E                 mov     ecx, [ebp+var_1D8]
.text:00002454                 push    ecx
.text:00002455                 lea     ecx, [ebp+var_DC]
.text:0000245B                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:00002460                 jmp     loc_27A0
.text:00002465 ; ---------------------------------------------------------------------------
.text:00002465
.text:00002465 loc_2465:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+A4Fj
.text:00002465                 cmp     [ebp+var_24], 6
.text:00002469                 jnz     short loc_24CF
.text:0000246B                 push    248h            ; unsigned int
.text:00002470                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002475                 add     esp, 4
.text:00002478                 mov     [ebp+var_1E4], eax
.text:0000247E                 mov     byte ptr [ebp+var_4], 12h
.text:00002482                 cmp     [ebp+var_1E4], 0
.text:00002489                 jz      short loc_249E
.text:0000248B                 mov     ecx, [ebp+var_1E4] ; this
.text:00002491                 call    ??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ ; NCompress::NImplode::NDecoder::CCoder::CCoder(void)
.text:00002496                 mov     [ebp+var_274], eax
.text:0000249C                 jmp     short loc_24A8
.text:0000249E ; ---------------------------------------------------------------------------
.text:0000249E
.text:0000249E loc_249E:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+AD9j
.text:0000249E                 mov     [ebp+var_274], 0
.text:000024A8
.text:000024A8 loc_24A8:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+AECj
.text:000024A8                 mov     edx, [ebp+var_274]
.text:000024AE                 mov     [ebp+var_1E0], edx
.text:000024B4                 mov     byte ptr [ebp+var_4], 0Fh
.text:000024B8                 mov     eax, [ebp+var_1E0]
.text:000024BE                 push    eax
.text:000024BF                 lea     ecx, [ebp+var_DC]
.text:000024C5                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:000024CA                 jmp     loc_27A0
.text:000024CF ; ---------------------------------------------------------------------------
.text:000024CF
.text:000024CF loc_24CF:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+AB9j
.text:000024CF                 cmp     [ebp+var_24], 0Eh
.text:000024D3                 jnz     short loc_2536
.text:000024D5                 push    10h             ; unsigned int
.text:000024D7                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000024DC                 add     esp, 4
.text:000024DF                 mov     [ebp+var_1EC], eax
.text:000024E5                 mov     byte ptr [ebp+var_4], 13h
.text:000024E9                 cmp     [ebp+var_1EC], 0
.text:000024F0                 jz      short loc_2505
.text:000024F2                 mov     ecx, [ebp+var_1EC] ; this
.text:000024F8                 call    ??0CLzmaDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CLzmaDecoder::CLzmaDecoder(void)
.text:000024FD                 mov     [ebp+var_278], eax
.text:00002503                 jmp     short loc_250F
.text:00002505 ; ---------------------------------------------------------------------------
.text:00002505
.text:00002505 loc_2505:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+B40j
.text:00002505                 mov     [ebp+var_278], 0
.text:0000250F
.text:0000250F loc_250F:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+B53j
.text:0000250F                 mov     ecx, [ebp+var_278]
.text:00002515                 mov     [ebp+var_1E8], ecx
.text:0000251B                 mov     byte ptr [ebp+var_4], 0Fh
.text:0000251F                 mov     edx, [ebp+var_1E8]
.text:00002525                 push    edx
.text:00002526                 lea     ecx, [ebp+var_DC]
.text:0000252C                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:00002531                 jmp     loc_27A0
.text:00002536 ; ---------------------------------------------------------------------------
.text:00002536
.text:00002536 loc_2536:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+B23j
.text:00002536                 cmp     [ebp+var_24], 5Fh ; '_'
.text:0000253A                 jnz     short loc_25A0
.text:0000253C                 push    6F0h            ; unsigned int
.text:00002541                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002546                 add     esp, 4
.text:00002549                 mov     [ebp+var_1F4], eax
.text:0000254F                 mov     byte ptr [ebp+var_4], 14h
.text:00002553                 cmp     [ebp+var_1F4], 0
.text:0000255A                 jz      short loc_256F
.text:0000255C                 mov     ecx, [ebp+var_1F4] ; this
.text:00002562                 call    ??0CXzDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CXzDecoder::CXzDecoder(void)
.text:00002567                 mov     [ebp+var_27C], eax
.text:0000256D                 jmp     short loc_2579
.text:0000256F ; ---------------------------------------------------------------------------
.text:0000256F
.text:0000256F loc_256F:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+BAAj
.text:0000256F                 mov     [ebp+var_27C], 0
.text:00002579
.text:00002579 loc_2579:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+BBDj
.text:00002579                 mov     eax, [ebp+var_27C]
.text:0000257F                 mov     [ebp+var_1F0], eax
.text:00002585                 mov     byte ptr [ebp+var_4], 0Fh
.text:00002589                 mov     ecx, [ebp+var_1F0]
.text:0000258F                 push    ecx
.text:00002590                 lea     ecx, [ebp+var_DC]
.text:00002596                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:0000259B                 jmp     loc_27A0
.text:000025A0 ; ---------------------------------------------------------------------------
.text:000025A0
.text:000025A0 loc_25A0:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+B8Aj
.text:000025A0                 cmp     [ebp+var_24], 62h ; 'b'
.text:000025A4                 jnz     short loc_260C
.text:000025A6                 push    1CF0h           ; unsigned int
.text:000025AB                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000025B0                 add     esp, 4
.text:000025B3                 mov     [ebp+var_1FC], eax
.text:000025B9                 mov     byte ptr [ebp+var_4], 15h
.text:000025BD                 cmp     [ebp+var_1FC], 0
.text:000025C4                 jz      short loc_25DB
.text:000025C6                 push    1               ; bool
.text:000025C8                 mov     ecx, [ebp+var_1FC] ; this
.text:000025CE                 call    ??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z ; NCompress::NPpmdZip::CDecoder::CDecoder(bool)
.text:000025D3                 mov     [ebp+var_280], eax
.text:000025D9                 jmp     short loc_25E5
.text:000025DB ; ---------------------------------------------------------------------------
.text:000025DB
.text:000025DB loc_25DB:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+C14j
.text:000025DB                 mov     [ebp+var_280], 0
.text:000025E5
.text:000025E5 loc_25E5:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+C29j
.text:000025E5                 mov     edx, [ebp+var_280]
.text:000025EB                 mov     [ebp+var_1F8], edx
.text:000025F1                 mov     byte ptr [ebp+var_4], 0Fh
.text:000025F5                 mov     eax, [ebp+var_1F8]
.text:000025FB                 push    eax
.text:000025FC                 lea     ecx, [ebp+var_DC]
.text:00002602                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:00002607                 jmp     loc_27A0
.text:0000260C ; ---------------------------------------------------------------------------
.text:0000260C
.text:0000260C loc_260C:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+BF4j
.text:0000260C                 cmp     [ebp+var_24], 0Ch
.text:00002610                 jnz     short loc_262B
.text:00002612                 mov     [ebp+var_EC], 40202h
.text:0000261C                 mov     [ebp+var_E8], 0
.text:00002626                 jmp     loc_26AD
.text:0000262B ; ---------------------------------------------------------------------------
.text:0000262B
.text:0000262B loc_262B:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+C60j
.text:0000262B                 cmp     [ebp+var_24], 0FFh
.text:00002632                 jbe     short loc_2694
.text:00002634                 mov     ecx, [ebp+arg_18]
.text:00002637                 mov     dword ptr [ecx], 1
.text:0000263D                 mov     [ebp+var_200], 0
.text:00002647                 mov     byte ptr [ebp+var_4], 4
.text:0000264B                 lea     ecx, [ebp+var_E0] ; this
.text:00002651                 call    ??1CMethodItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMethodItem::~CMethodItem(void)
.text:00002656                 mov     byte ptr [ebp+var_4], 3
.text:0000265A                 lea     ecx, [ebp+var_80]
.text:0000265D                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:00002662                 mov     byte ptr [ebp+var_4], 2
.text:00002666                 lea     ecx, [ebp+var_64]
.text:00002669                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000266E                 mov     byte ptr [ebp+var_4], 0
.text:00002672                 lea     ecx, [ebp+var_50]
.text:00002675                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000267A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002681                 lea     ecx, [ebp+var_18] ; this
.text:00002684                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:00002689                 mov     eax, [ebp+var_200]
.text:0000268F                 jmp     loc_310D
.text:00002694 ; ---------------------------------------------------------------------------
.text:00002694
.text:00002694 loc_2694:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+C82j
.text:00002694                 movzx   eax, byte ptr [ebp+var_24]
.text:00002698                 cdq
.text:00002699                 add     eax, 40100h
.text:0000269E                 adc     edx, 0
.text:000026A1                 mov     [ebp+var_EC], eax
.text:000026A7                 mov     [ebp+var_E8], edx
.text:000026AD
.text:000026AD loc_26AD:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+C76j
.text:000026AD                 lea     edx, [ebp+var_DC]
.text:000026B3                 push    edx
.text:000026B4                 push    0
.text:000026B6                 mov     eax, [ebp+var_E8]
.text:000026BC                 push    eax
.text:000026BD                 mov     ecx, [ebp+var_EC]
.text:000026C3                 push    ecx
.text:000026C4                 call    ?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z ; CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressCoder> &)
.text:000026C9                 mov     [ebp+var_F0], eax
.text:000026CF                 cmp     [ebp+var_F0], 0
.text:000026D6                 jz      short loc_2731
.text:000026D8                 mov     edx, [ebp+var_F0]
.text:000026DE                 mov     [ebp+var_204], edx
.text:000026E4                 mov     byte ptr [ebp+var_4], 4
.text:000026E8                 lea     ecx, [ebp+var_E0] ; this
.text:000026EE                 call    ??1CMethodItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMethodItem::~CMethodItem(void)
.text:000026F3                 mov     byte ptr [ebp+var_4], 3
.text:000026F7                 lea     ecx, [ebp+var_80]
.text:000026FA                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:000026FF                 mov     byte ptr [ebp+var_4], 2
.text:00002703                 lea     ecx, [ebp+var_64]
.text:00002706                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000270B                 mov     byte ptr [ebp+var_4], 0
.text:0000270F                 lea     ecx, [ebp+var_50]
.text:00002712                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002717                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000271E                 lea     ecx, [ebp+var_18] ; this
.text:00002721                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:00002726                 mov     eax, [ebp+var_204]
.text:0000272C                 jmp     loc_310D
.text:00002731 ; ---------------------------------------------------------------------------
.text:00002731
.text:00002731 loc_2731:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+D26j
.text:00002731                 lea     ecx, [ebp+var_DC]
.text:00002737                 call    ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *(void)
.text:0000273C                 test    eax, eax
.text:0000273E                 jnz     short loc_27A0
.text:00002740                 mov     eax, [ebp+arg_18]
.text:00002743                 mov     dword ptr [eax], 1
.text:00002749                 mov     [ebp+var_208], 0
.text:00002753                 mov     byte ptr [ebp+var_4], 4
.text:00002757                 lea     ecx, [ebp+var_E0] ; this
.text:0000275D                 call    ??1CMethodItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMethodItem::~CMethodItem(void)
.text:00002762                 mov     byte ptr [ebp+var_4], 3
.text:00002766                 lea     ecx, [ebp+var_80]
.text:00002769                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:0000276E                 mov     byte ptr [ebp+var_4], 2
.text:00002772                 lea     ecx, [ebp+var_64]
.text:00002775                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000277A                 mov     byte ptr [ebp+var_4], 0
.text:0000277E                 lea     ecx, [ebp+var_50]
.text:00002781                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002786                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000278D                 lea     ecx, [ebp+var_18] ; this
.text:00002790                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:00002795                 mov     eax, [ebp+var_208]
.text:0000279B                 jmp     loc_310D
.text:000027A0 ; ---------------------------------------------------------------------------
.text:000027A0
.text:000027A0 loc_27A0:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+A46j
.text:000027A0                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+AB0j ...
.text:000027A0                 lea     ecx, [ebp+var_E0]
.text:000027A6                 push    ecx             ; struct NArchive::NZip::CMethodItem *
.text:000027A7                 mov     ecx, [ebp+var_10]
.text:000027AA                 add     ecx, 24h ; '$'
.text:000027AD                 call    ?Add@?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAEIABUCMethodItem@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CMethodItem>::Add(NArchive::NZip::CMethodItem const &)
.text:000027B2                 mov     [ebp+var_D4], eax
.text:000027B8                 mov     byte ptr [ebp+var_4], 4
.text:000027BC                 lea     ecx, [ebp+var_E0] ; this
.text:000027C2                 call    ??1CMethodItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMethodItem::~CMethodItem(void)
.text:000027C7
.text:000027C7 loc_27C7:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+9C6j
.text:000027C7                 mov     edx, [ebp+var_D4]
.text:000027CD                 push    edx
.text:000027CE                 mov     ecx, [ebp+var_10]
.text:000027D1                 add     ecx, 24h ; '$'
.text:000027D4                 call    ??A?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAEAAUCMethodItem@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CMethodItem>::operator[](uint)
.text:000027D9                 add     eax, 4
.text:000027DC                 mov     ecx, eax
.text:000027DE                 call    ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *(void)
.text:000027E3                 mov     [ebp+var_F4], eax
.text:000027E9                 lea     ecx, [ebp+var_FC]
.text:000027EF                 call    ??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::CMyComPtr<ICompressSetDecoderProperties2>(void)
.text:000027F4                 mov     byte ptr [ebp+var_4], 16h
.text:000027F8                 lea     ecx, [ebp+var_FC]
.text:000027FE                 call    ??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator&(void)
.text:00002803                 mov     esi, esp
.text:00002805                 push    eax
.text:00002806                 push    offset _IID_ICompressSetDecoderProperties2
.text:0000280B                 mov     eax, [ebp+var_F4]
.text:00002811                 mov     ecx, [eax]
.text:00002813                 mov     edx, [ebp+var_F4]
.text:00002819                 push    edx
.text:0000281A                 mov     eax, [ecx]
.text:0000281C                 call    eax
.text:0000281E                 cmp     esi, esp
.text:00002820                 call    __RTC_CheckEsp
.text:00002825                 lea     ecx, [ebp+var_FC]
.text:0000282B                 call    ??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator ICompressSetDecoderProperties2 *(void)
.text:00002830                 test    eax, eax
.text:00002832                 jz      loc_28E2
.text:00002838                 mov     ecx, [ebp+arg_4]
.text:0000283B                 mov     dl, [ecx]
.text:0000283D                 mov     [ebp+var_105], dl
.text:00002843                 lea     ecx, [ebp+var_FC]
.text:00002849                 call    ??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator->(void)
.text:0000284E                 mov     [ebp+var_284], eax
.text:00002854                 mov     esi, esp
.text:00002856                 push    1
.text:00002858                 lea     eax, [ebp+var_105]
.text:0000285E                 push    eax
.text:0000285F                 mov     ecx, [ebp+var_284]
.text:00002865                 push    ecx
.text:00002866                 mov     edx, [ebp+var_284]
.text:0000286C                 mov     eax, [edx]
.text:0000286E                 mov     ecx, [eax+0Ch]
.text:00002871                 call    ecx
.text:00002873                 cmp     esi, esp
.text:00002875                 call    __RTC_CheckEsp
.text:0000287A                 mov     [ebp+var_110], eax
.text:00002880                 cmp     [ebp+var_110], 0
.text:00002887                 jz      short loc_28E2
.text:00002889                 mov     edx, [ebp+var_110]
.text:0000288F                 mov     [ebp+var_20C], edx
.text:00002895                 mov     byte ptr [ebp+var_4], 4
.text:00002899                 lea     ecx, [ebp+var_FC]
.text:0000289F                 call    ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>(void)
.text:000028A4                 mov     byte ptr [ebp+var_4], 3
.text:000028A8                 lea     ecx, [ebp+var_80]
.text:000028AB                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:000028B0                 mov     byte ptr [ebp+var_4], 2
.text:000028B4                 lea     ecx, [ebp+var_64]
.text:000028B7                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000028BC                 mov     byte ptr [ebp+var_4], 0
.text:000028C0                 lea     ecx, [ebp+var_50]
.text:000028C3                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000028C8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000028CF                 lea     ecx, [ebp+var_18] ; this
.text:000028D2                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:000028D7                 mov     eax, [ebp+var_20C]
.text:000028DD                 jmp     loc_310D
.text:000028E2 ; ---------------------------------------------------------------------------
.text:000028E2
.text:000028E2 loc_28E2:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+E82j
.text:000028E2                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+ED7j
.text:000028E2                 mov     byte ptr [ebp+var_4], 4
.text:000028E6                 lea     ecx, [ebp+var_FC]
.text:000028EC                 call    ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>(void)
.text:000028F1                 lea     ecx, [ebp+var_118]
.text:000028F7                 call    ??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::CMyComPtr<ICompressSetCoderMt>(void)
.text:000028FC                 mov     byte ptr [ebp+var_4], 17h
.text:00002900                 lea     ecx, [ebp+var_118]
.text:00002906                 call    ??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator&(void)
.text:0000290B                 mov     esi, esp
.text:0000290D                 push    eax
.text:0000290E                 push    offset _IID_ICompressSetCoderMt
.text:00002913                 mov     eax, [ebp+var_F4]
.text:00002919                 mov     ecx, [eax]
.text:0000291B                 mov     edx, [ebp+var_F4]
.text:00002921                 push    edx
.text:00002922                 mov     eax, [ecx]
.text:00002924                 call    eax
.text:00002926                 cmp     esi, esp
.text:00002928                 call    __RTC_CheckEsp
.text:0000292D                 lea     ecx, [ebp+var_118]
.text:00002933                 call    ??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator ICompressSetCoderMt *(void)
.text:00002938                 test    eax, eax
.text:0000293A                 jz      loc_29DA
.text:00002940                 lea     ecx, [ebp+var_118]
.text:00002946                 call    ??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator->(void)
.text:0000294B                 mov     [ebp+var_288], eax
.text:00002951                 mov     esi, esp
.text:00002953                 mov     ecx, [ebp+arg_14]
.text:00002956                 push    ecx
.text:00002957                 mov     edx, [ebp+var_288]
.text:0000295D                 push    edx
.text:0000295E                 mov     eax, [ebp+var_288]
.text:00002964                 mov     ecx, [eax]
.text:00002966                 mov     edx, [ecx+0Ch]
.text:00002969                 call    edx
.text:0000296B                 cmp     esi, esp
.text:0000296D                 call    __RTC_CheckEsp
.text:00002972                 mov     [ebp+var_120], eax
.text:00002978                 cmp     [ebp+var_120], 0
.text:0000297F                 jz      short loc_29DA
.text:00002981                 mov     eax, [ebp+var_120]
.text:00002987                 mov     [ebp+var_210], eax
.text:0000298D                 mov     byte ptr [ebp+var_4], 4
.text:00002991                 lea     ecx, [ebp+var_118]
.text:00002997                 call    ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>(void)
.text:0000299C                 mov     byte ptr [ebp+var_4], 3
.text:000029A0                 lea     ecx, [ebp+var_80]
.text:000029A3                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:000029A8                 mov     byte ptr [ebp+var_4], 2
.text:000029AC                 lea     ecx, [ebp+var_64]
.text:000029AF                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000029B4                 mov     byte ptr [ebp+var_4], 0
.text:000029B8                 lea     ecx, [ebp+var_50]
.text:000029BB                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000029C0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000029C7                 lea     ecx, [ebp+var_18] ; this
.text:000029CA                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:000029CF                 mov     eax, [ebp+var_210]
.text:000029D5                 jmp     loc_310D
.text:000029DA ; ---------------------------------------------------------------------------
.text:000029DA
.text:000029DA loc_29DA:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+F8Aj
.text:000029DA                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+FCFj
.text:000029DA                 mov     byte ptr [ebp+var_4], 4
.text:000029DE                 lea     ecx, [ebp+var_118]
.text:000029E4                 call    ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>(void)
.text:000029E9                 mov     [ebp+var_124], 0
.text:000029F3                 lea     ecx, [ebp+var_12C]
.text:000029F9                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:000029FE                 mov     byte ptr [ebp+var_4], 18h
.text:00002A02                 mov     ecx, [ebp+arg_4] ; this
.text:00002A05                 call    ?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsEncrypted(void)
.text:00002A0A                 movzx   ecx, al
.text:00002A0D                 test    ecx, ecx
.text:00002A0F                 jz      loc_2E73
.text:00002A15                 mov     ecx, [ebp+var_10]
.text:00002A18                 add     ecx, 1Ch
.text:00002A1B                 call    ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ ; CMyComPtr<ISequentialInStream>::operator!(void)
.text:00002A20                 movzx   edx, al
.text:00002A23                 test    edx, edx
.text:00002A25                 jz      loc_2AC8
.text:00002A2B                 push    98h ; 'ÿ'       ; unsigned int
.text:00002A30                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002A35                 add     esp, 4
.text:00002A38                 mov     [ebp+var_218], eax
.text:00002A3E                 mov     byte ptr [ebp+var_4], 19h
.text:00002A42                 cmp     [ebp+var_218], 0
.text:00002A49                 jz      short loc_2A60
.text:00002A4B                 push    0
.text:00002A4D                 mov     ecx, [ebp+var_218]
.text:00002A53                 call    ??0CFilterCoder@@QAE@_N@Z ; CFilterCoder::CFilterCoder(bool)
.text:00002A58                 mov     [ebp+var_28C], eax
.text:00002A5E                 jmp     short loc_2A6A
.text:00002A60 ; ---------------------------------------------------------------------------
.text:00002A60
.text:00002A60 loc_2A60:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1099j
.text:00002A60                 mov     [ebp+var_28C], 0
.text:00002A6A
.text:00002A6A loc_2A6A:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+10AEj
.text:00002A6A                 mov     eax, [ebp+var_28C]
.text:00002A70                 mov     [ebp+var_214], eax
.text:00002A76                 mov     byte ptr [ebp+var_4], 18h
.text:00002A7A                 mov     ecx, [ebp+var_10]
.text:00002A7D                 mov     edx, [ebp+var_214]
.text:00002A83                 mov     [ecx+18h], edx
.text:00002A86                 mov     eax, [ebp+var_10]
.text:00002A89                 mov     ecx, [eax+18h]
.text:00002A8C                 mov     [ebp+var_290], ecx
.text:00002A92                 cmp     [ebp+var_290], 0
.text:00002A99                 jz      short loc_2AAC
.text:00002A9B                 mov     edx, [ebp+var_290]
.text:00002AA1                 add     edx, 10h
.text:00002AA4                 mov     [ebp+var_294], edx
.text:00002AAA                 jmp     short loc_2AB6
.text:00002AAC ; ---------------------------------------------------------------------------
.text:00002AAC
.text:00002AAC loc_2AAC:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+10E9j
.text:00002AAC                 mov     [ebp+var_294], 0
.text:00002AB6
.text:00002AB6 loc_2AB6:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+10FAj
.text:00002AB6                 mov     eax, [ebp+var_294]
.text:00002ABC                 push    eax
.text:00002ABD                 mov     ecx, [ebp+var_10]
.text:00002AC0                 add     ecx, 1Ch
.text:00002AC3                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00002AC8
.text:00002AC8 loc_2AC8:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1075j
.text:00002AC8                 lea     ecx, [ebp+var_80]
.text:00002ACB                 push    ecx
.text:00002ACC                 mov     edx, [ebp+var_10]
.text:00002ACF                 mov     ecx, [edx+18h]
.text:00002AD2                 add     ecx, 94h ; 'ö'
.text:00002AD8                 call    ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z ; CMyComPtr<ICompressFilter>::operator=(CMyComPtr<ICompressFilter> const &)
.text:00002ADD                 movzx   eax, [ebp+var_1E]
.text:00002AE1                 test    eax, eax
.text:00002AE3                 jz      loc_2B83
.text:00002AE9                 lea     ecx, [ebp+var_64]
.text:00002AEC                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00002AF1                 push    eax             ; struct ISequentialInStream *
.text:00002AF2                 mov     ecx, [ebp+var_10]
.text:00002AF5                 mov     ecx, [ecx+8]    ; this
.text:00002AF8                 call    ?ReadHeader@CDecoder@NWzAes@NCrypto@@QAEJPAUISequentialInStream@@@Z ; NCrypto::NWzAes::CDecoder::ReadHeader(ISequentialInStream *)
.text:00002AFD                 mov     [ebp+var_124], eax
.text:00002B03                 cmp     [ebp+var_124], 0
.text:00002B0A                 jnz     short loc_2B7E
.text:00002B0C                 mov     edx, [ebp+var_10]
.text:00002B0F                 mov     ecx, [edx+8]    ; this
.text:00002B12                 call    ?Init_and_CheckPassword@CDecoder@NWzAes@NCrypto@@QAE_NXZ ; NCrypto::NWzAes::CDecoder::Init_and_CheckPassword(void)
.text:00002B17                 movzx   eax, al
.text:00002B1A                 test    eax, eax
.text:00002B1C                 jnz     short loc_2B7E
.text:00002B1E                 mov     ecx, [ebp+arg_18]
.text:00002B21                 mov     dword ptr [ecx], 9
.text:00002B27                 mov     [ebp+var_21C], 0
.text:00002B31                 mov     byte ptr [ebp+var_4], 4
.text:00002B35                 lea     ecx, [ebp+var_12C]
.text:00002B3B                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002B40                 mov     byte ptr [ebp+var_4], 3
.text:00002B44                 lea     ecx, [ebp+var_80]
.text:00002B47                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:00002B4C                 mov     byte ptr [ebp+var_4], 2
.text:00002B50                 lea     ecx, [ebp+var_64]
.text:00002B53                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002B58                 mov     byte ptr [ebp+var_4], 0
.text:00002B5C                 lea     ecx, [ebp+var_50]
.text:00002B5F                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002B64                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002B6B                 lea     ecx, [ebp+var_18] ; this
.text:00002B6E                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:00002B73                 mov     eax, [ebp+var_21C]
.text:00002B79                 jmp     loc_310D
.text:00002B7E ; ---------------------------------------------------------------------------
.text:00002B7E
.text:00002B7E loc_2B7E:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+115Aj
.text:00002B7E                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+116Cj
.text:00002B7E                 jmp     loc_2D44
.text:00002B83 ; ---------------------------------------------------------------------------
.text:00002B83
.text:00002B83 loc_2B83:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1133j
.text:00002B83                 movzx   edx, [ebp+var_1F]
.text:00002B87                 test    edx, edx
.text:00002B89                 jz      loc_2C59
.text:00002B8F                 mov     eax, [ebp+arg_4]
.text:00002B92                 mov     ecx, [eax+0Ch]
.text:00002B95                 push    ecx
.text:00002B96                 mov     edx, [eax+8]
.text:00002B99                 push    edx             ; unsigned __int64
.text:00002B9A                 mov     eax, [ebp+arg_4]
.text:00002B9D                 mov     ecx, [eax+1Ch]
.text:00002BA0                 push    ecx             ; unsigned int
.text:00002BA1                 lea     ecx, [ebp+var_64]
.text:00002BA4                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00002BA9                 push    eax             ; struct ISequentialInStream *
.text:00002BAA                 mov     edx, [ebp+var_10]
.text:00002BAD                 mov     ecx, [edx+4]    ; this
.text:00002BB0                 call    ?ReadHeader@CDecoder@NZipStrong@NCrypto@@QAEJPAUISequentialInStream@@I_K@Z ; NCrypto::NZipStrong::CDecoder::ReadHeader(ISequentialInStream *,uint,unsigned __int64)
.text:00002BB5                 mov     [ebp+var_124], eax
.text:00002BBB                 cmp     [ebp+var_124], 0
.text:00002BC2                 jnz     loc_2C54
.text:00002BC8                 lea     eax, [ebp+var_135]
.text:00002BCE                 push    eax             ; bool *
.text:00002BCF                 mov     ecx, [ebp+var_10]
.text:00002BD2                 mov     ecx, [ecx+4]    ; this
.text:00002BD5                 call    ?Init_and_CheckPassword@CDecoder@NZipStrong@NCrypto@@QAEJAA_N@Z ; NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)
.text:00002BDA                 mov     [ebp+var_124], eax
.text:00002BE0                 cmp     [ebp+var_124], 0
.text:00002BE7                 jnz     short loc_2C54
.text:00002BE9                 movzx   edx, [ebp+var_135]
.text:00002BF0                 test    edx, edx
.text:00002BF2                 jnz     short loc_2C54
.text:00002BF4                 mov     eax, [ebp+arg_18]
.text:00002BF7                 mov     dword ptr [eax], 9
.text:00002BFD                 mov     [ebp+var_220], 0
.text:00002C07                 mov     byte ptr [ebp+var_4], 4
.text:00002C0B                 lea     ecx, [ebp+var_12C]
.text:00002C11                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002C16                 mov     byte ptr [ebp+var_4], 3
.text:00002C1A                 lea     ecx, [ebp+var_80]
.text:00002C1D                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:00002C22                 mov     byte ptr [ebp+var_4], 2
.text:00002C26                 lea     ecx, [ebp+var_64]
.text:00002C29                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002C2E                 mov     byte ptr [ebp+var_4], 0
.text:00002C32                 lea     ecx, [ebp+var_50]
.text:00002C35                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002C3A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002C41                 lea     ecx, [ebp+var_18] ; this
.text:00002C44                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:00002C49                 mov     eax, [ebp+var_220]
.text:00002C4F                 jmp     loc_310D
.text:00002C54 ; ---------------------------------------------------------------------------
.text:00002C54
.text:00002C54 loc_2C54:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1212j
.text:00002C54                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1237j ...
.text:00002C54                 jmp     loc_2D44
.text:00002C59 ; ---------------------------------------------------------------------------
.text:00002C59
.text:00002C59 loc_2C59:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+11D9j
.text:00002C59                 lea     ecx, [ebp+var_64]
.text:00002C5C                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00002C61                 push    eax             ; struct ISequentialInStream *
.text:00002C62                 mov     ecx, [ebp+var_10]
.text:00002C65                 mov     ecx, [ecx]      ; this
.text:00002C67                 call    ?ReadHeader@CDecoder@NZip@NCrypto@@QAEJPAUISequentialInStream@@@Z ; NCrypto::NZip::CDecoder::ReadHeader(ISequentialInStream *)
.text:00002C6C                 mov     [ebp+var_124], eax
.text:00002C72                 cmp     [ebp+var_124], 0
.text:00002C79                 jnz     loc_2D44
.text:00002C7F                 mov     edx, [ebp+var_10]
.text:00002C82                 mov     ecx, [edx]      ; this
.text:00002C84                 call    ?Init_BeforeDecode@CDecoder@NZip@NCrypto@@QAEXXZ ; NCrypto::NZip::CDecoder::Init_BeforeDecode(void)
.text:00002C89                 mov     eax, [ebp+var_10]
.text:00002C8C                 mov     ecx, [eax]
.text:00002C8E                 mov     dl, [ecx+2Fh]
.text:00002C91                 mov     [ebp+var_13D], dl
.text:00002C97                 mov     ecx, [ebp+arg_4] ; this
.text:00002C9A                 call    ?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::HasDescriptor(void)
.text:00002C9F                 movzx   eax, al
.text:00002CA2                 test    eax, eax
.text:00002CA4                 jz      short loc_2CB7
.text:00002CA6                 mov     ecx, [ebp+arg_4]
.text:00002CA9                 mov     edx, [ecx+18h]
.text:00002CAC                 shr     edx, 8
.text:00002CAF                 mov     [ebp+var_298], edx
.text:00002CB5                 jmp     short loc_2CC6
.text:00002CB7 ; ---------------------------------------------------------------------------
.text:00002CB7
.text:00002CB7 loc_2CB7:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+12F4j
.text:00002CB7                 mov     eax, [ebp+arg_4]
.text:00002CBA                 mov     ecx, [eax+1Ch]
.text:00002CBD                 shr     ecx, 18h
.text:00002CC0                 mov     [ebp+var_298], ecx
.text:00002CC6
.text:00002CC6 loc_2CC6:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1305j
.text:00002CC6                 mov     dl, byte ptr [ebp+var_298]
.text:00002CCC                 mov     [ebp+var_13E], dl
.text:00002CD2                 movzx   eax, [ebp+var_13D]
.text:00002CD9                 movzx   ecx, [ebp+var_13E]
.text:00002CE0                 cmp     eax, ecx
.text:00002CE2                 jz      short loc_2D44
.text:00002CE4                 mov     edx, [ebp+arg_18]
.text:00002CE7                 mov     dword ptr [edx], 9
.text:00002CED                 mov     [ebp+var_224], 0
.text:00002CF7                 mov     byte ptr [ebp+var_4], 4
.text:00002CFB                 lea     ecx, [ebp+var_12C]
.text:00002D01                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002D06                 mov     byte ptr [ebp+var_4], 3
.text:00002D0A                 lea     ecx, [ebp+var_80]
.text:00002D0D                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:00002D12                 mov     byte ptr [ebp+var_4], 2
.text:00002D16                 lea     ecx, [ebp+var_64]
.text:00002D19                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002D1E                 mov     byte ptr [ebp+var_4], 0
.text:00002D22                 lea     ecx, [ebp+var_50]
.text:00002D25                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002D2A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002D31                 lea     ecx, [ebp+var_18] ; this
.text:00002D34                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:00002D39                 mov     eax, [ebp+var_224]
.text:00002D3F                 jmp     loc_310D
.text:00002D44 ; ---------------------------------------------------------------------------
.text:00002D44
.text:00002D44 loc_2D44:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &):loc_2B7Ej
.text:00002D44                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &):loc_2C54j ...
.text:00002D44                 cmp     [ebp+var_124], 0
.text:00002D4B                 jnz     loc_2E71
.text:00002D51                 mov     eax, [ebp+var_10]
.text:00002D54                 mov     ecx, [eax+18h]
.text:00002D57                 mov     [ebp+var_18], ecx
.text:00002D5A                 lea     ecx, [ebp+var_64]
.text:00002D5D                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00002D62                 mov     esi, esp
.text:00002D64                 push    eax
.text:00002D65                 mov     edx, [ebp+var_10]
.text:00002D68                 mov     eax, [edx+18h]
.text:00002D6B                 mov     ecx, [ebp+var_10]
.text:00002D6E                 mov     edx, [ecx+18h]
.text:00002D71                 add     edx, 0Ch
.text:00002D74                 mov     eax, [eax+0Ch]
.text:00002D77                 push    edx
.text:00002D78                 mov     ecx, [eax+0Ch]
.text:00002D7B                 call    ecx
.text:00002D7D                 cmp     esi, esp
.text:00002D7F                 call    __RTC_CheckEsp
.text:00002D84                 mov     [ebp+var_144], eax
.text:00002D8A                 cmp     [ebp+var_144], 0
.text:00002D91                 jz      short loc_2DEC
.text:00002D93                 mov     edx, [ebp+var_144]
.text:00002D99                 mov     [ebp+var_228], edx
.text:00002D9F                 mov     byte ptr [ebp+var_4], 4
.text:00002DA3                 lea     ecx, [ebp+var_12C]
.text:00002DA9                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002DAE                 mov     byte ptr [ebp+var_4], 3
.text:00002DB2                 lea     ecx, [ebp+var_80]
.text:00002DB5                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:00002DBA                 mov     byte ptr [ebp+var_4], 2
.text:00002DBE                 lea     ecx, [ebp+var_64]
.text:00002DC1                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002DC6                 mov     byte ptr [ebp+var_4], 0
.text:00002DCA                 lea     ecx, [ebp+var_50]
.text:00002DCD                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002DD2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002DD9                 lea     ecx, [ebp+var_18] ; this
.text:00002DDC                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:00002DE1                 mov     eax, [ebp+var_228]
.text:00002DE7                 jmp     loc_310D
.text:00002DEC ; ---------------------------------------------------------------------------
.text:00002DEC
.text:00002DEC loc_2DEC:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+13E1j
.text:00002DEC                 mov     eax, [ebp+var_10]
.text:00002DEF                 mov     ecx, [eax+18h]  ; this
.text:00002DF2                 call    ?Init_NoSubFilterInit@CFilterCoder@@QAEJXZ ; CFilterCoder::Init_NoSubFilterInit(void)
.text:00002DF7                 mov     [ebp+var_148], eax
.text:00002DFD                 cmp     [ebp+var_148], 0
.text:00002E04                 jz      short loc_2E5F
.text:00002E06                 mov     ecx, [ebp+var_148]
.text:00002E0C                 mov     [ebp+var_22C], ecx
.text:00002E12                 mov     byte ptr [ebp+var_4], 4
.text:00002E16                 lea     ecx, [ebp+var_12C]
.text:00002E1C                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002E21                 mov     byte ptr [ebp+var_4], 3
.text:00002E25                 lea     ecx, [ebp+var_80]
.text:00002E28                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:00002E2D                 mov     byte ptr [ebp+var_4], 2
.text:00002E31                 lea     ecx, [ebp+var_64]
.text:00002E34                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002E39                 mov     byte ptr [ebp+var_4], 0
.text:00002E3D                 lea     ecx, [ebp+var_50]
.text:00002E40                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002E45                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002E4C                 lea     ecx, [ebp+var_18] ; this
.text:00002E4F                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:00002E54                 mov     eax, [ebp+var_22C]
.text:00002E5A                 jmp     loc_310D
.text:00002E5F ; ---------------------------------------------------------------------------
.text:00002E5F
.text:00002E5F loc_2E5F:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1454j
.text:00002E5F                 mov     edx, [ebp+var_10]
.text:00002E62                 add     edx, 1Ch
.text:00002E65                 push    edx
.text:00002E66                 lea     ecx, [ebp+var_12C]
.text:00002E6C                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z ; CMyComPtr<ISequentialInStream>::operator=(CMyComPtr<ISequentialInStream> const &)
.text:00002E71
.text:00002E71 loc_2E71:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+139Bj
.text:00002E71                 jmp     short loc_2E82
.text:00002E73 ; ---------------------------------------------------------------------------
.text:00002E73
.text:00002E73 loc_2E73:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+105Fj
.text:00002E73                 lea     eax, [ebp+var_64]
.text:00002E76                 push    eax
.text:00002E77                 lea     ecx, [ebp+var_12C]
.text:00002E7D                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z ; CMyComPtr<ISequentialInStream>::operator=(CMyComPtr<ISequentialInStream> const &)
.text:00002E82
.text:00002E82 loc_2E82:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &):loc_2E71j
.text:00002E82                 cmp     [ebp+var_124], 0
.text:00002E89                 jnz     short loc_2ED0
.text:00002E8B                 mov     esi, esp
.text:00002E8D                 mov     ecx, [ebp+arg_10]
.text:00002E90                 push    ecx
.text:00002E91                 mov     edx, [ebp+arg_4]
.text:00002E94                 add     edx, 8
.text:00002E97                 push    edx
.text:00002E98                 push    0
.text:00002E9A                 lea     ecx, [ebp+var_50]
.text:00002E9D                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00002EA2                 push    eax
.text:00002EA3                 lea     ecx, [ebp+var_12C]
.text:00002EA9                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00002EAE                 push    eax
.text:00002EAF                 mov     eax, [ebp+var_F4]
.text:00002EB5                 mov     ecx, [eax]
.text:00002EB7                 mov     edx, [ebp+var_F4]
.text:00002EBD                 push    edx
.text:00002EBE                 mov     eax, [ecx+0Ch]
.text:00002EC1                 call    eax
.text:00002EC3                 cmp     esi, esp
.text:00002EC5                 call    __RTC_CheckEsp
.text:00002ECA                 mov     [ebp+var_124], eax
.text:00002ED0
.text:00002ED0 loc_2ED0:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+14D9j
.text:00002ED0                 cmp     [ebp+var_124], 1
.text:00002ED7                 jnz     short loc_2F30
.text:00002ED9                 mov     [ebp+var_230], 0
.text:00002EE3                 mov     byte ptr [ebp+var_4], 4
.text:00002EE7                 lea     ecx, [ebp+var_12C]
.text:00002EED                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002EF2                 mov     byte ptr [ebp+var_4], 3
.text:00002EF6                 lea     ecx, [ebp+var_80]
.text:00002EF9                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:00002EFE                 mov     byte ptr [ebp+var_4], 2
.text:00002F02                 lea     ecx, [ebp+var_64]
.text:00002F05                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002F0A                 mov     byte ptr [ebp+var_4], 0
.text:00002F0E                 lea     ecx, [ebp+var_50]
.text:00002F11                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002F16                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002F1D                 lea     ecx, [ebp+var_18] ; this
.text:00002F20                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:00002F25                 mov     eax, [ebp+var_230]
.text:00002F2B                 jmp     loc_310D
.text:00002F30 ; ---------------------------------------------------------------------------
.text:00002F30
.text:00002F30 loc_2F30:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1527j
.text:00002F30                 cmp     [ebp+var_124], 80004001h
.text:00002F3A                 jnz     short loc_2F9C
.text:00002F3C                 mov     ecx, [ebp+arg_18]
.text:00002F3F                 mov     dword ptr [ecx], 1
.text:00002F45                 mov     [ebp+var_234], 0
.text:00002F4F                 mov     byte ptr [ebp+var_4], 4
.text:00002F53                 lea     ecx, [ebp+var_12C]
.text:00002F59                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002F5E                 mov     byte ptr [ebp+var_4], 3
.text:00002F62                 lea     ecx, [ebp+var_80]
.text:00002F65                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:00002F6A                 mov     byte ptr [ebp+var_4], 2
.text:00002F6E                 lea     ecx, [ebp+var_64]
.text:00002F71                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002F76                 mov     byte ptr [ebp+var_4], 0
.text:00002F7A                 lea     ecx, [ebp+var_50]
.text:00002F7D                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002F82                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002F89                 lea     ecx, [ebp+var_18] ; this
.text:00002F8C                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:00002F91                 mov     eax, [ebp+var_234]
.text:00002F97                 jmp     loc_310D
.text:00002F9C ; ---------------------------------------------------------------------------
.text:00002F9C
.text:00002F9C loc_2F9C:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+158Aj
.text:00002F9C                 mov     edx, [ebp+var_124]
.text:00002FA2                 mov     [ebp+var_14C], edx
.text:00002FA8                 cmp     [ebp+var_14C], 0
.text:00002FAF                 jz      short loc_300A
.text:00002FB1                 mov     eax, [ebp+var_14C]
.text:00002FB7                 mov     [ebp+var_238], eax
.text:00002FBD                 mov     byte ptr [ebp+var_4], 4
.text:00002FC1                 lea     ecx, [ebp+var_12C]
.text:00002FC7                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002FCC                 mov     byte ptr [ebp+var_4], 3
.text:00002FD0                 lea     ecx, [ebp+var_80]
.text:00002FD3                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:00002FD8                 mov     byte ptr [ebp+var_4], 2
.text:00002FDC                 lea     ecx, [ebp+var_64]
.text:00002FDF                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002FE4                 mov     byte ptr [ebp+var_4], 0
.text:00002FE8                 lea     ecx, [ebp+var_50]
.text:00002FEB                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002FF0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002FF7                 lea     ecx, [ebp+var_18] ; this
.text:00002FFA                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:00002FFF                 mov     eax, [ebp+var_238]
.text:00003005                 jmp     loc_310D
.text:0000300A ; ---------------------------------------------------------------------------
.text:0000300A
.text:0000300A loc_300A:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+15FFj
.text:0000300A                 mov     byte ptr [ebp+var_4], 4
.text:0000300E                 lea     ecx, [ebp+var_12C]
.text:00003014                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003019                 mov     [ebp+var_14D], 1
.text:00003020                 mov     [ebp+var_155], 1
.text:00003027                 movzx   ecx, [ebp+var_1D]
.text:0000302B                 test    ecx, ecx
.text:0000302D                 jz      short loc_3048
.text:0000302F                 mov     ecx, [ebp+var_48] ; this
.text:00003032                 call    ?GetCRC@COutStreamWithCRC@@QBEIXZ ; COutStreamWithCRC::GetCRC(void)
.text:00003037                 mov     edx, [ebp+arg_4]
.text:0000303A                 xor     ecx, ecx
.text:0000303C                 cmp     eax, [edx+1Ch]
.text:0000303F                 setz    cl
.text:00003042                 mov     [ebp+var_14D], cl
.text:00003048
.text:00003048 loc_3048:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+167Dj
.text:00003048                 movzx   edx, [ebp+var_1E]
.text:0000304C                 test    edx, edx
.text:0000304E                 jz      short loc_3093
.text:00003050                 push    0
.text:00003052                 push    0Ah             ; unsigned __int64
.text:00003054                 mov     eax, dword ptr [ebp+var_5C+4]
.text:00003057                 push    eax
.text:00003058                 mov     ecx, dword ptr [ebp+var_5C]
.text:0000305B                 push    ecx             ; unsigned __int64
.text:0000305C                 mov     ecx, [ebp+arg_0] ; this
.text:0000305F                 call    ?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z ; NArchive::NZip::CInArchive::CreateLimitedStream(unsigned __int64,unsigned __int64)
.text:00003064                 push    eax
.text:00003065                 lea     ecx, [ebp+var_64]
.text:00003068                 call    ?Attach@?$CMyComPtr@UISequentialInStream@@@@QAEXPAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::Attach(ISequentialInStream *)
.text:0000306D                 lea     edx, [ebp+var_155]
.text:00003073                 push    edx             ; bool *
.text:00003074                 lea     ecx, [ebp+var_64]
.text:00003077                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:0000307C                 push    eax             ; struct ISequentialInStream *
.text:0000307D                 mov     eax, [ebp+var_10]
.text:00003080                 mov     ecx, [eax+8]    ; this
.text:00003083                 call    ?CheckMac@CDecoder@NWzAes@NCrypto@@QAEJPAUISequentialInStream@@AA_N@Z ; NCrypto::NWzAes::CDecoder::CheckMac(ISequentialInStream *,bool &)
.text:00003088                 test    eax, eax
.text:0000308A                 jz      short loc_3093
.text:0000308C                 mov     [ebp+var_155], 0
.text:00003093
.text:00003093 loc_3093:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+169Ej
.text:00003093                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+16DAj
.text:00003093                 movzx   ecx, [ebp+var_14D]
.text:0000309A                 test    ecx, ecx
.text:0000309C                 jz      short loc_30B5
.text:0000309E                 movzx   edx, [ebp+var_155]
.text:000030A5                 test    edx, edx
.text:000030A7                 jz      short loc_30B5
.text:000030A9                 mov     [ebp+var_29C], 0
.text:000030B3                 jmp     short loc_30BF
.text:000030B5 ; ---------------------------------------------------------------------------
.text:000030B5
.text:000030B5 loc_30B5:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+16ECj
.text:000030B5                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+16F7j
.text:000030B5                 mov     [ebp+var_29C], 3
.text:000030BF
.text:000030BF loc_30BF:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1703j
.text:000030BF                 mov     eax, [ebp+arg_18]
.text:000030C2                 mov     ecx, [ebp+var_29C]
.text:000030C8                 mov     [eax], ecx
.text:000030CA                 mov     [ebp+var_23C], 0
.text:000030D4                 mov     byte ptr [ebp+var_4], 3
.text:000030D8                 lea     ecx, [ebp+var_80]
.text:000030DB                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:000030E0                 mov     byte ptr [ebp+var_4], 2
.text:000030E4                 lea     ecx, [ebp+var_64]
.text:000030E7                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000030EC                 mov     byte ptr [ebp+var_4], 0
.text:000030F0                 lea     ecx, [ebp+var_50]
.text:000030F3                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000030F8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000030FF                 lea     ecx, [ebp+var_18] ; this
.text:00003102                 call    ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text:00003107                 mov     eax, [ebp+var_23C]
.text:0000310D
.text:0000310D loc_310D:                               ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+DBj
.text:0000310D                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1FFj ...
.text:0000310D                 push    edx
.text:0000310E                 mov     ecx, ebp
.text:00003110                 push    eax
.text:00003111                 lea     edx, $LN155
.text:00003117                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000311C                 pop     eax
.text:0000311D                 pop     edx
.text:0000311E                 mov     ecx, [ebp+var_C]
.text:00003121                 mov     large fs:0, ecx
.text:00003128                 pop     ecx
.text:00003129                 pop     edi
.text:0000312A                 pop     esi
.text:0000312B                 add     esp, 29Ch
.text:00003131                 cmp     ebp, esp
.text:00003133                 call    __RTC_CheckEsp
.text:00003138                 mov     esp, ebp
.text:0000313A                 pop     ebp
.text:0000313B                 retn    1Ch
.text:0000313B ?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z endp
.text:0000313B
.text:0000313B ; ---------------------------------------------------------------------------
.text:0000313E                 align 10h
.text:00003140 $LN155          dd 11h                  ; DATA XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1761o
.text:00003144                 dd offset $LN154
.text:00003148 $LN154          dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00003144o
.text:00003150                 dd offset $LN136        ; "inStreamReleaser"
.text:00003154                 dd 0FFFFFFD0h, 8
.text:0000315C                 dd offset $LN137        ; "f"
.text:00003160                 dd 0FFFFFFC0h, 6
.text:00003168                 dd offset $LN138        ; "aesField"
.text:0000316C                 dd 0FFFFFFB0h, 4
.text:00003174                 dd offset $LN139        ; "outStream"
.text:00003178                 dd 0FFFFFF9Ch, 4
.text:00003180                 dd offset $LN140        ; "inStream"
.text:00003184                 dd 0FFFFFF80h, 4
.text:0000318C                 dd offset $LN141        ; "cryptoFilter"
.text:00003190                 dd 0FFFFFF70h, 6
.text:00003198                 dd offset $LN142        ; "aesField"
.text:0000319C                 dd 0FFFFFF64h, 4
.text:000031A4                 dd offset $LN143        ; "cryptoSetPassword"
.text:000031A8                 dd 0FFFFFF54h, 4
.text:000031B0                 dd offset $LN144        ; "password"
.text:000031B4                 dd 0FFFFFF3Ch, 0Ch
.text:000031BC                 dd offset $LN145        ; "charPassword"
.text:000031C0                 dd 0FFFFFF20h, 8
.text:000031C8                 dd offset $LN146        ; "mi"
.text:000031CC                 dd 0FFFFFF04h, 4
.text:000031D4                 dd offset $LN147        ; "setDecoderProperties"
.text:000031D8                 dd 0FFFFFEFBh, 1
.text:000031E0                 dd offset $LN148        ; "properties"
.text:000031E4                 dd 0FFFFFEE8h, 4
.text:000031EC                 dd offset $LN149        ; "setCoderMt"
.text:000031F0                 dd 0FFFFFED4h, 4
.text:000031F8                 dd offset $LN150        ; "inStreamNew"
.text:000031FC ; ---------------------------------------------------------------------------
.text:000031FC                 retf
.text:000031FC ; ---------------------------------------------------------------------------
.text:000031FD                 db 0FEh, 2 dup(0FFh)
.text:00003200                 dd 1
.text:00003204                 dd offset $LN151        ; "passwOK"
.text:00003208                 dd 0FFFFFEABh, 1
.text:00003210                 dd offset $LN152        ; "authOk"
.text:00003214 $LN152          db 'authOk',0           ; DATA XREF: .text:00003210o
.text:0000321B $LN151          db 'passwOK',0          ; DATA XREF: .text:00003204o
.text:00003223 $LN150          db 'inStreamNew',0      ; DATA XREF: .text:000031F8o
.text:0000322F $LN149          db 'setCoderMt',0       ; DATA XREF: .text:000031ECo
.text:0000323A $LN148          db 'properties',0       ; DATA XREF: .text:000031E0o
.text:00003245 $LN147          db 'setDecoderProperties',0 ; DATA XREF: .text:000031D4o
.text:0000325A $LN146          db 'mi',0               ; DATA XREF: .text:000031C8o
.text:0000325D $LN145          db 'charPassword',0     ; DATA XREF: .text:000031BCo
.text:0000326A $LN144          db 'password',0         ; DATA XREF: .text:000031B0o
.text:00003273 $LN143          db 'cryptoSetPassword',0 ; DATA XREF: .text:000031A4o
.text:00003285 $LN142          db 'aesField',0         ; DATA XREF: .text:00003198o
.text:0000328E $LN141          db 'cryptoFilter',0     ; DATA XREF: .text:0000318Co
.text:0000329B $LN140          db 'inStream',0         ; DATA XREF: .text:00003180o
.text:000032A4 $LN139          db 'outStream',0        ; DATA XREF: .text:00003174o
.text:000032AE $LN138          db 'aesField',0         ; DATA XREF: .text:00003168o
.text:000032B7 $LN137          db 'f',0                ; DATA XREF: .text:0000315Co
.text:000032B9 $LN136          db 'inStreamReleaser',0 ; DATA XREF: .text:00003150o
.text:000032CA                 align 10h
.text:000032D0
.text:000032D0 ; =============== S U B R O U T I N E =======================================
.text:000032D0
.text:000032D0 ; Attributes: bp-based frame
.text:000032D0
.text:000032D0 ; __int32 __cdecl NArchive::NZip::CHandler::Extract(NArchive::NZip::CHandler *this, const unsigned int *, unsigned int, int, struct IArchiveExtractCallback *)
.text:000032D0                 public ?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:000032D0 ?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z proc near
.text:000032D0                                         ; DATA XREF: .rdata:00004390o
.text:000032D0
.text:000032D0 var_234         = dword ptr -234h
.text:000032D0 var_230         = dword ptr -230h
.text:000032D0 var_22C         = dword ptr -22Ch
.text:000032D0 var_228         = dword ptr -228h
.text:000032D0 var_224         = dword ptr -224h
.text:000032D0 var_220         = dword ptr -220h
.text:000032D0 var_219         = byte ptr -219h
.text:000032D0 var_218         = dword ptr -218h
.text:000032D0 var_214         = dword ptr -214h
.text:000032D0 var_20D         = byte ptr -20Dh
.text:000032D0 var_20C         = dword ptr -20Ch
.text:000032D0 var_208         = dword ptr -208h
.text:000032D0 var_204         = dword ptr -204h
.text:000032D0 var_1FD         = byte ptr -1FDh
.text:000032D0 var_1FC         = dword ptr -1FCh
.text:000032D0 var_1F8         = dword ptr -1F8h
.text:000032D0 var_1F4         = dword ptr -1F4h
.text:000032D0 var_1F0         = dword ptr -1F0h
.text:000032D0 var_1EC         = dword ptr -1ECh
.text:000032D0 var_1E8         = dword ptr -1E8h
.text:000032D0 var_1E2         = byte ptr -1E2h
.text:000032D0 var_1E1         = byte ptr -1E1h
.text:000032D0 var_1E0         = dword ptr -1E0h
.text:000032D0 var_1DC         = dword ptr -1DCh
.text:000032D0 var_1D8         = dword ptr -1D8h
.text:000032D0 var_1D4         = dword ptr -1D4h
.text:000032D0 var_1D0         = dword ptr -1D0h
.text:000032D0 var_1CC         = dword ptr -1CCh
.text:000032D0 var_1C8         = dword ptr -1C8h
.text:000032D0 var_1C4         = dword ptr -1C4h
.text:000032D0 var_1C0         = dword ptr -1C0h
.text:000032D0 var_1BC         = dword ptr -1BCh
.text:000032D0 var_1B8         = dword ptr -1B8h
.text:000032D0 var_1B4         = dword ptr -1B4h
.text:000032D0 var_1B0         = dword ptr -1B0h
.text:000032D0 var_1A8         = dword ptr -1A8h
.text:000032D0 var_1A4         = dword ptr -1A4h
.text:000032D0 var_1A0         = dword ptr -1A0h
.text:000032D0 var_19C         = dword ptr -19Ch
.text:000032D0 var_198         = dword ptr -198h
.text:000032D0 var_194         = dword ptr -194h
.text:000032D0 var_190         = dword ptr -190h
.text:000032D0 var_18C         = dword ptr -18Ch
.text:000032D0 var_188         = dword ptr -188h
.text:000032D0 var_184         = dword ptr -184h
.text:000032D0 var_180         = dword ptr -180h
.text:000032D0 var_17C         = dword ptr -17Ch
.text:000032D0 var_178         = dword ptr -178h
.text:000032D0 var_174         = dword ptr -174h
.text:000032D0 var_170         = dword ptr -170h
.text:000032D0 var_16C         = dword ptr -16Ch
.text:000032D0 var_168         = dword ptr -168h
.text:000032D0 var_164         = dword ptr -164h
.text:000032D0 var_160         = dword ptr -160h
.text:000032D0 var_15C         = dword ptr -15Ch
.text:000032D0 var_154         = dword ptr -154h
.text:000032D0 var_14C         = dword ptr -14Ch
.text:000032D0 var_148         = dword ptr -148h
.text:000032D0 var_144         = dword ptr -144h
.text:000032D0 var_140         = dword ptr -140h
.text:000032D0 var_13C         = dword ptr -13Ch
.text:000032D0 var_138         = dword ptr -138h
.text:000032D0 var_134         = dword ptr -134h
.text:000032D0 var_130         = dword ptr -130h
.text:000032D0 var_12C         = dword ptr -12Ch
.text:000032D0 var_128         = dword ptr -128h
.text:000032D0 var_122         = byte ptr -122h
.text:000032D0 var_121         = byte ptr -121h
.text:000032D0 var_11C         = byte ptr -11Ch
.text:000032D0 var_114         = dword ptr -114h
.text:000032D0 var_110         = dword ptr -110h
.text:000032D0 var_10C         = dword ptr -10Ch
.text:000032D0 var_108         = dword ptr -108h
.text:000032D0 var_C0          = byte ptr -0C0h
.text:000032D0 var_B0          = dword ptr -0B0h
.text:000032D0 var_AC          = dword ptr -0ACh
.text:000032D0 var_A4          = byte ptr -0A4h
.text:000032D0 var_9C          = dword ptr -9Ch
.text:000032D0 var_94          = byte ptr -94h
.text:000032D0 var_8C          = dword ptr -8Ch
.text:000032D0 var_88          = dword ptr -88h
.text:000032D0 var_84          = dword ptr -84h
.text:000032D0 var_80          = dword ptr -80h
.text:000032D0 var_7C          = dword ptr -7Ch
.text:000032D0 var_78          = dword ptr -78h
.text:000032D0 var_74          = dword ptr -74h
.text:000032D0 var_70          = dword ptr -70h
.text:000032D0 var_6C          = dword ptr -6Ch
.text:000032D0 var_68          = dword ptr -68h
.text:000032D0 var_64          = dword ptr -64h
.text:000032D0 var_60          = dword ptr -60h
.text:000032D0 var_59          = byte ptr -59h
.text:000032D0 var_58          = dword ptr -58h
.text:000032D0 var_54          = dword ptr -54h
.text:000032D0 var_50          = dword ptr -50h
.text:000032D0 var_4C          = dword ptr -4Ch
.text:000032D0 var_44          = byte ptr -44h
.text:000032D0 var_10          = dword ptr -10h
.text:000032D0 var_C           = dword ptr -0Ch
.text:000032D0 var_4           = dword ptr -4
.text:000032D0 this            = dword ptr  8
.text:000032D0 arg_4           = dword ptr  0Ch
.text:000032D0 arg_8           = dword ptr  10h
.text:000032D0 arg_C           = dword ptr  14h
.text:000032D0 arg_10          = dword ptr  18h
.text:000032D0
.text:000032D0 ; FUNCTION CHUNK AT .text:00003F95 SIZE 00000032 BYTES
.text:000032D0
.text:000032D0                 push    ebp
.text:000032D1                 mov     ebp, esp
.text:000032D3                 push    0FFFFFFFFh
.text:000032D5                 push    offset __ehhandler$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:000032DA                 mov     eax, large fs:0
.text:000032E0                 push    eax
.text:000032E1                 push    ecx
.text:000032E2                 sub     esp, 224h
.text:000032E8                 push    ebx
.text:000032E9                 push    esi
.text:000032EA                 push    edi
.text:000032EB                 lea     edi, [ebp+var_234]
.text:000032F1                 mov     ecx, 89h ; 'ë'
.text:000032F6                 mov     eax, 0CCCCCCCCh
.text:000032FB                 rep stosd
.text:000032FD                 mov     eax, dword ptr ds:___security_cookie
.text:00003302                 xor     eax, ebp
.text:00003304                 push    eax
.text:00003305                 lea     eax, [ebp+var_C]
.text:00003308                 mov     large fs:0, eax
.text:0000330E                 mov     [ebp+var_10], esp
.text:00003311                 mov     [ebp+var_4], 0
.text:00003318                 lea     ecx, [ebp+var_44] ; this
.text:0000331B                 call    ??0CZipDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CZipDecoder::CZipDecoder(void)
.text:00003320                 mov     [ebp+var_1B0], eax
.text:00003326                 mov     byte ptr [ebp+var_4], 1
.text:0000332A                 mov     [ebp+var_50], 0
.text:00003331                 mov     [ebp+var_4C], 0
.text:00003338                 mov     [ebp+var_58], 0
.text:0000333F                 mov     [ebp+var_54], 0
.text:00003346                 xor     eax, eax
.text:00003348                 cmp     [ebp+arg_8], 0FFFFFFFFh
.text:0000334C                 setz    al
.text:0000334F                 mov     [ebp+var_59], al
.text:00003352                 movzx   ecx, [ebp+var_59]
.text:00003356                 test    ecx, ecx
.text:00003358                 jz      short loc_3374
.text:0000335A                 mov     ecx, [ebp+this]
.text:0000335D                 add     ecx, 10h
.text:00003360                 call    ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size(void)
.text:00003365                 mov     [ebp+var_1B4], eax
.text:0000336B                 mov     edx, [ebp+var_1B4]
.text:00003371                 mov     [ebp+arg_8], edx
.text:00003374
.text:00003374 loc_3374:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+88j
.text:00003374                 cmp     [ebp+arg_8], 0
.text:00003378                 jnz     short loc_339B
.text:0000337A                 mov     [ebp+var_168], 0
.text:00003384                 mov     byte ptr [ebp+var_4], 0
.text:00003388                 lea     ecx, [ebp+var_44] ; this
.text:0000338B                 call    ??1CZipDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CZipDecoder::~CZipDecoder(void)
.text:00003390                 mov     eax, [ebp+var_168]
.text:00003396                 jmp     loc_3F95
.text:0000339B ; ---------------------------------------------------------------------------
.text:0000339B
.text:0000339B loc_339B:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+A8j
.text:0000339B                 mov     [ebp+var_60], 0
.text:000033A2                 jmp     short loc_33AD
.text:000033A4 ; ---------------------------------------------------------------------------
.text:000033A4
.text:000033A4 loc_33A4:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+152j
.text:000033A4                 mov     eax, [ebp+var_60]
.text:000033A7                 add     eax, 1
.text:000033AA                 mov     [ebp+var_60], eax
.text:000033AD
.text:000033AD loc_33AD:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+D2j
.text:000033AD                 mov     ecx, [ebp+var_60]
.text:000033B0                 cmp     ecx, [ebp+arg_8]
.text:000033B3                 jnb     short loc_3424
.text:000033B5                 movzx   edx, [ebp+var_59]
.text:000033B9                 test    edx, edx
.text:000033BB                 jz      short loc_33C8
.text:000033BD                 mov     eax, [ebp+var_60]
.text:000033C0                 mov     [ebp+var_1B8], eax
.text:000033C6                 jmp     short loc_33D7
.text:000033C8 ; ---------------------------------------------------------------------------
.text:000033C8
.text:000033C8 loc_33C8:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+EBj
.text:000033C8                 mov     ecx, [ebp+var_60]
.text:000033CB                 mov     edx, [ebp+arg_4]
.text:000033CE                 mov     eax, [edx+ecx*4]
.text:000033D1                 mov     [ebp+var_1B8], eax
.text:000033D7
.text:000033D7 loc_33D7:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+F6j
.text:000033D7                 mov     ecx, [ebp+var_1B8]
.text:000033DD                 push    ecx
.text:000033DE                 mov     ecx, [ebp+this]
.text:000033E1                 add     ecx, 10h
.text:000033E4                 call    ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[](uint)
.text:000033E9                 mov     [ebp+var_1BC], eax
.text:000033EF                 mov     edx, [ebp+var_1BC]
.text:000033F5                 mov     [ebp+var_64], edx
.text:000033F8                 mov     eax, [ebp+var_64]
.text:000033FB                 mov     ecx, [ebp+var_50]
.text:000033FE                 add     ecx, [eax+8]
.text:00003401                 mov     edx, [ebp+var_4C]
.text:00003404                 adc     edx, [eax+0Ch]
.text:00003407                 mov     [ebp+var_50], ecx
.text:0000340A                 mov     [ebp+var_4C], edx
.text:0000340D                 mov     eax, [ebp+var_64]
.text:00003410                 mov     ecx, [ebp+var_58]
.text:00003413                 add     ecx, [eax+10h]
.text:00003416                 mov     edx, [ebp+var_54]
.text:00003419                 adc     edx, [eax+14h]
.text:0000341C                 mov     [ebp+var_58], ecx
.text:0000341F                 mov     [ebp+var_54], edx
.text:00003422                 jmp     short loc_33A4
.text:00003424 ; ---------------------------------------------------------------------------
.text:00003424
.text:00003424 loc_3424:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+E3j
.text:00003424                 mov     esi, esp
.text:00003426                 mov     eax, [ebp+var_4C]
.text:00003429                 push    eax
.text:0000342A                 mov     ecx, [ebp+var_50]
.text:0000342D                 push    ecx
.text:0000342E                 mov     edx, [ebp+arg_10]
.text:00003431                 push    edx
.text:00003432                 mov     eax, [ebp+arg_10]
.text:00003435                 mov     ecx, [eax]
.text:00003437                 mov     edx, [ecx+0Ch]
.text:0000343A                 call    edx
.text:0000343C                 cmp     esi, esp
.text:0000343E                 call    __RTC_CheckEsp
.text:00003443                 mov     [ebp+var_1C0], eax
.text:00003449                 mov     eax, [ebp+var_1C0]
.text:0000344F                 mov     [ebp+var_68], eax
.text:00003452                 cmp     [ebp+var_68], 0
.text:00003456                 jz      short loc_3478
.text:00003458                 mov     ecx, [ebp+var_68]
.text:0000345B                 mov     [ebp+var_16C], ecx
.text:00003461                 mov     byte ptr [ebp+var_4], 0
.text:00003465                 lea     ecx, [ebp+var_44] ; this
.text:00003468                 call    ??1CZipDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CZipDecoder::~CZipDecoder(void)
.text:0000346D                 mov     eax, [ebp+var_16C]
.text:00003473                 jmp     loc_3F95
.text:00003478 ; ---------------------------------------------------------------------------
.text:00003478
.text:00003478 loc_3478:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+186j
.text:00003478                 mov     [ebp+var_70], 0
.text:0000347F                 mov     [ebp+var_6C], 0
.text:00003486                 mov     [ebp+var_78], 0
.text:0000348D                 mov     [ebp+var_74], 0
.text:00003494                 push    38h ; '8'       ; unsigned int
.text:00003496                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000349B                 add     esp, 4
.text:0000349E                 mov     [ebp+var_1C4], eax
.text:000034A4                 mov     edx, [ebp+var_1C4]
.text:000034AA                 mov     [ebp+var_174], edx
.text:000034B0                 mov     byte ptr [ebp+var_4], 2
.text:000034B4                 cmp     [ebp+var_174], 0
.text:000034BB                 jz      short loc_34DC
.text:000034BD                 mov     ecx, [ebp+var_174]
.text:000034C3                 call    ??0CLocalProgress@@QAE@XZ ; CLocalProgress::CLocalProgress(void)
.text:000034C8                 mov     [ebp+var_1C8], eax
.text:000034CE                 mov     eax, [ebp+var_1C8]
.text:000034D4                 mov     [ebp+var_1CC], eax
.text:000034DA                 jmp     short loc_34E6
.text:000034DC ; ---------------------------------------------------------------------------
.text:000034DC
.text:000034DC loc_34DC:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1EBj
.text:000034DC                 mov     [ebp+var_1CC], 0
.text:000034E6
.text:000034E6 loc_34E6:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+20Aj
.text:000034E6                 mov     ecx, [ebp+var_1CC]
.text:000034EC                 mov     [ebp+var_170], ecx
.text:000034F2                 mov     byte ptr [ebp+var_4], 1
.text:000034F6                 mov     edx, [ebp+var_170]
.text:000034FC                 mov     [ebp+var_8C], edx
.text:00003502                 mov     eax, [ebp+var_8C]
.text:00003508                 push    eax
.text:00003509                 lea     ecx, [ebp+var_94]
.text:0000350F                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)
.text:00003514                 mov     byte ptr [ebp+var_4], 3
.text:00003518                 push    0               ; bool
.text:0000351A                 mov     ecx, [ebp+arg_10]
.text:0000351D                 push    ecx             ; struct IProgress *
.text:0000351E                 mov     ecx, [ebp+var_8C] ; this
.text:00003524                 call    ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init(IProgress *,bool)
.text:00003529                 mov     [ebp+var_60], 0
.text:00003530                 jmp     short loc_3565
.text:00003532 ; ---------------------------------------------------------------------------
.text:00003532
.text:00003532 loc_3532:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+65Ej
.text:00003532                                         ; NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+819j ...
.text:00003532                 mov     edx, [ebp+var_60]
.text:00003535                 add     edx, 1
.text:00003538                 mov     [ebp+var_60], edx
.text:0000353B                 mov     eax, [ebp+var_70]
.text:0000353E                 add     eax, [ebp+var_80]
.text:00003541                 mov     ecx, [ebp+var_6C]
.text:00003544                 adc     ecx, [ebp+var_7C]
.text:00003547                 mov     [ebp+var_70], eax
.text:0000354A                 mov     [ebp+var_6C], ecx
.text:0000354D                 mov     edx, [ebp+var_78]
.text:00003550                 add     edx, [ebp+var_88]
.text:00003556                 mov     eax, [ebp+var_74]
.text:00003559                 adc     eax, [ebp+var_84]
.text:0000355F                 mov     [ebp+var_78], edx
.text:00003562                 mov     [ebp+var_74], eax
.text:00003565
.text:00003565 loc_3565:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+260j
.text:00003565                 mov     ecx, [ebp+var_60]
.text:00003568                 cmp     ecx, [ebp+arg_8]
.text:0000356B                 jnb     loc_3F05
.text:00003571                 mov     [ebp+var_80], 0
.text:00003578                 mov     [ebp+var_7C], 0
.text:0000357F                 mov     [ebp+var_88], 0
.text:00003589                 mov     [ebp+var_84], 0
.text:00003593                 mov     edx, [ebp+var_8C]
.text:00003599                 mov     eax, [ebp+var_78]
.text:0000359C                 mov     [edx+20h], eax
.text:0000359F                 mov     ecx, [ebp+var_74]
.text:000035A2                 mov     [edx+24h], ecx
.text:000035A5                 mov     edx, [ebp+var_8C]
.text:000035AB                 mov     eax, [ebp+var_70]
.text:000035AE                 mov     [edx+28h], eax
.text:000035B1                 mov     ecx, [ebp+var_6C]
.text:000035B4                 mov     [edx+2Ch], ecx
.text:000035B7                 mov     ecx, [ebp+var_8C] ; this
.text:000035BD                 call    ?SetCur@CLocalProgress@@QAEJXZ ; CLocalProgress::SetCur(void)
.text:000035C2                 mov     [ebp+var_1D0], eax
.text:000035C8                 mov     edx, [ebp+var_1D0]
.text:000035CE                 mov     [ebp+var_9C], edx
.text:000035D4                 cmp     [ebp+var_9C], 0
.text:000035DB                 jz      short loc_360F
.text:000035DD                 mov     eax, [ebp+var_9C]
.text:000035E3                 mov     [ebp+var_178], eax
.text:000035E9                 mov     byte ptr [ebp+var_4], 1
.text:000035ED                 lea     ecx, [ebp+var_94]
.text:000035F3                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000035F8                 mov     byte ptr [ebp+var_4], 0
.text:000035FC                 lea     ecx, [ebp+var_44] ; this
.text:000035FF                 call    ??1CZipDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CZipDecoder::~CZipDecoder(void)
.text:00003604                 mov     eax, [ebp+var_178]
.text:0000360A                 jmp     loc_3F95
.text:0000360F ; ---------------------------------------------------------------------------
.text:0000360F
.text:0000360F loc_360F:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+30Bj
.text:0000360F                 lea     ecx, [ebp+var_A4]
.text:00003615                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:0000361A                 mov     [ebp+var_1D4], eax
.text:00003620                 mov     byte ptr [ebp+var_4], 4
.text:00003624                 xor     ecx, ecx
.text:00003626                 cmp     [ebp+arg_C], 0
.text:0000362A                 setnz   cl
.text:0000362D                 mov     [ebp+var_AC], ecx
.text:00003633                 movzx   edx, [ebp+var_59]
.text:00003637                 test    edx, edx
.text:00003639                 jz      short loc_3646
.text:0000363B                 mov     eax, [ebp+var_60]
.text:0000363E                 mov     [ebp+var_1D8], eax
.text:00003644                 jmp     short loc_3655
.text:00003646 ; ---------------------------------------------------------------------------
.text:00003646
.text:00003646 loc_3646:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+369j
.text:00003646                 mov     ecx, [ebp+var_60]
.text:00003649                 mov     edx, [ebp+arg_4]
.text:0000364C                 mov     eax, [edx+ecx*4]
.text:0000364F                 mov     [ebp+var_1D8], eax
.text:00003655
.text:00003655 loc_3655:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+374j
.text:00003655                 mov     ecx, [ebp+var_1D8]
.text:0000365B                 mov     [ebp+var_B0], ecx
.text:00003661                 mov     edx, [ebp+var_B0]
.text:00003667                 push    edx
.text:00003668                 mov     ecx, [ebp+this]
.text:0000366B                 add     ecx, 10h
.text:0000366E                 call    ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[](uint)
.text:00003673                 mov     [ebp+var_1DC], eax
.text:00003679                 mov     eax, [ebp+var_1DC]
.text:0000367F                 push    eax             ; struct NArchive::NZip::CItemEx *
.text:00003680                 lea     ecx, [ebp+var_11C] ; this
.text:00003686                 call    ??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z ; NArchive::NZip::CItemEx::CItemEx(NArchive::NZip::CItemEx const &)
.text:0000368B                 mov     [ebp+var_1E0], eax
.text:00003691                 mov     byte ptr [ebp+var_4], 5
.text:00003695                 lea     ecx, [ebp+var_11C]
.text:0000369B                 push    ecx             ; struct NArchive::NZip::CItemEx *
.text:0000369C                 mov     ecx, [ebp+this]
.text:0000369F                 add     ecx, 20h ; ' '  ; this
.text:000036A2                 call    ?IsLocalOffsetOK@CInArchive@NZip@NArchive@@QBE_NABVCItemEx@23@@Z ; NArchive::NZip::CInArchive::IsLocalOffsetOK(NArchive::NZip::CItemEx const &)
.text:000036A7                 mov     [ebp+var_1E1], al
.text:000036AD                 mov     dl, [ebp+var_1E1]
.text:000036B3                 mov     [ebp+var_121], dl
.text:000036B9                 movzx   eax, [ebp+var_121]
.text:000036C0                 test    eax, eax
.text:000036C2                 jnz     short loc_36EC
.text:000036C4                 lea     ecx, [ebp+var_11C] ; this
.text:000036CA                 call    ?IsDir@CItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CItem::IsDir(void)
.text:000036CF                 mov     [ebp+var_1E2], al
.text:000036D5                 movzx   ecx, [ebp+var_1E2]
.text:000036DC                 test    ecx, ecx
.text:000036DE                 jnz     short loc_36EC
.text:000036E0                 mov     [ebp+var_1E8], 1
.text:000036EA                 jmp     short loc_36F6
.text:000036EC ; ---------------------------------------------------------------------------
.text:000036EC
.text:000036EC loc_36EC:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3F2j
.text:000036EC                                         ; NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+40Ej
.text:000036EC                 mov     [ebp+var_1E8], 0
.text:000036F6
.text:000036F6 loc_36F6:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+41Aj
.text:000036F6                 mov     dl, byte ptr [ebp+var_1E8]
.text:000036FC                 mov     [ebp+var_122], dl
.text:00003702                 movzx   eax, [ebp+var_122]
.text:00003709                 test    eax, eax
.text:0000370B                 jz      short loc_3717
.text:0000370D                 mov     [ebp+var_AC], 2
.text:00003717
.text:00003717 loc_3717:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+43Bj
.text:00003717                 mov     ecx, [ebp+var_114]
.text:0000371D                 mov     [ebp+var_80], ecx
.text:00003720                 mov     edx, [ebp+var_110]
.text:00003726                 mov     [ebp+var_7C], edx
.text:00003729                 mov     eax, [ebp+var_10C]
.text:0000372F                 mov     [ebp+var_88], eax
.text:00003735                 mov     ecx, [ebp+var_108]
.text:0000373B                 mov     [ebp+var_84], ecx
.text:00003741                 lea     ecx, [ebp+var_A4]
.text:00003747                 call    ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&(void)
.text:0000374C                 mov     [ebp+var_1EC], eax
.text:00003752                 mov     esi, esp
.text:00003754                 mov     edx, [ebp+var_AC]
.text:0000375A                 push    edx
.text:0000375B                 mov     eax, [ebp+var_1EC]
.text:00003761                 push    eax
.text:00003762                 mov     ecx, [ebp+var_B0]
.text:00003768                 push    ecx
.text:00003769                 mov     edx, [ebp+arg_10]
.text:0000376C                 push    edx
.text:0000376D                 mov     eax, [ebp+arg_10]
.text:00003770                 mov     ecx, [eax]
.text:00003772                 mov     edx, [ecx+14h]
.text:00003775                 call    edx
.text:00003777                 cmp     esi, esp
.text:00003779                 call    __RTC_CheckEsp
.text:0000377E                 mov     [ebp+var_1F0], eax
.text:00003784                 mov     eax, [ebp+var_1F0]
.text:0000378A                 mov     [ebp+var_128], eax
.text:00003790                 cmp     [ebp+var_128], 0
.text:00003797                 jz      short loc_37E9
.text:00003799                 mov     ecx, [ebp+var_128]
.text:0000379F                 mov     [ebp+var_17C], ecx
.text:000037A5                 mov     byte ptr [ebp+var_4], 4
.text:000037A9                 lea     ecx, [ebp+var_11C] ; this
.text:000037AF                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:000037B4                 mov     byte ptr [ebp+var_4], 3
.text:000037B8                 lea     ecx, [ebp+var_A4]
.text:000037BE                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000037C3                 mov     byte ptr [ebp+var_4], 1
.text:000037C7                 lea     ecx, [ebp+var_94]
.text:000037CD                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000037D2                 mov     byte ptr [ebp+var_4], 0
.text:000037D6                 lea     ecx, [ebp+var_44] ; this
.text:000037D9                 call    ??1CZipDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CZipDecoder::~CZipDecoder(void)
.text:000037DE                 mov     eax, [ebp+var_17C]
.text:000037E4                 jmp     loc_3F95
.text:000037E9 ; ---------------------------------------------------------------------------
.text:000037E9
.text:000037E9 loc_37E9:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4C7j
.text:000037E9                 movzx   edx, [ebp+var_121]
.text:000037F0                 test    edx, edx
.text:000037F2                 jnz     loc_3933
.text:000037F8                 mov     esi, esp
.text:000037FA                 mov     eax, [ebp+var_AC]
.text:00003800                 push    eax
.text:00003801                 mov     ecx, [ebp+arg_10]
.text:00003804                 push    ecx
.text:00003805                 mov     edx, [ebp+arg_10]
.text:00003808                 mov     eax, [edx]
.text:0000380A                 mov     ecx, [eax+18h]
.text:0000380D                 call    ecx
.text:0000380F                 cmp     esi, esp
.text:00003811                 call    __RTC_CheckEsp
.text:00003816                 mov     [ebp+var_1F4], eax
.text:0000381C                 mov     edx, [ebp+var_1F4]
.text:00003822                 mov     [ebp+var_12C], edx
.text:00003828                 cmp     [ebp+var_12C], 0
.text:0000382F                 jz      short loc_3881
.text:00003831                 mov     eax, [ebp+var_12C]
.text:00003837                 mov     [ebp+var_180], eax
.text:0000383D                 mov     byte ptr [ebp+var_4], 4
.text:00003841                 lea     ecx, [ebp+var_11C] ; this
.text:00003847                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:0000384C                 mov     byte ptr [ebp+var_4], 3
.text:00003850                 lea     ecx, [ebp+var_A4]
.text:00003856                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000385B                 mov     byte ptr [ebp+var_4], 1
.text:0000385F                 lea     ecx, [ebp+var_94]
.text:00003865                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000386A                 mov     byte ptr [ebp+var_4], 0
.text:0000386E                 lea     ecx, [ebp+var_44] ; this
.text:00003871                 call    ??1CZipDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CZipDecoder::~CZipDecoder(void)
.text:00003876                 mov     eax, [ebp+var_180]
.text:0000387C                 jmp     loc_3F95
.text:00003881 ; ---------------------------------------------------------------------------
.text:00003881
.text:00003881 loc_3881:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+55Fj
.text:00003881                 lea     ecx, [ebp+var_A4]
.text:00003887                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:0000388C                 mov     esi, esp
.text:0000388E                 push    4
.text:00003890                 mov     ecx, [ebp+arg_10]
.text:00003893                 push    ecx
.text:00003894                 mov     edx, [ebp+arg_10]
.text:00003897                 mov     eax, [edx]
.text:00003899                 mov     ecx, [eax+1Ch]
.text:0000389C                 call    ecx
.text:0000389E                 cmp     esi, esp
.text:000038A0                 call    __RTC_CheckEsp
.text:000038A5                 mov     [ebp+var_1F8], eax
.text:000038AB                 mov     edx, [ebp+var_1F8]
.text:000038B1                 mov     [ebp+var_130], edx
.text:000038B7                 cmp     [ebp+var_130], 0
.text:000038BE                 jz      short loc_3910
.text:000038C0                 mov     eax, [ebp+var_130]
.text:000038C6                 mov     [ebp+var_184], eax
.text:000038CC                 mov     byte ptr [ebp+var_4], 4
.text:000038D0                 lea     ecx, [ebp+var_11C] ; this
.text:000038D6                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:000038DB                 mov     byte ptr [ebp+var_4], 3
.text:000038DF                 lea     ecx, [ebp+var_A4]
.text:000038E5                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000038EA                 mov     byte ptr [ebp+var_4], 1
.text:000038EE                 lea     ecx, [ebp+var_94]
.text:000038F4                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000038F9                 mov     byte ptr [ebp+var_4], 0
.text:000038FD                 lea     ecx, [ebp+var_44] ; this
.text:00003900                 call    ??1CZipDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CZipDecoder::~CZipDecoder(void)
.text:00003905                 mov     eax, [ebp+var_184]
.text:0000390B                 jmp     loc_3F95
.text:00003910 ; ---------------------------------------------------------------------------
.text:00003910
.text:00003910 loc_3910:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5EEj
.text:00003910                 mov     byte ptr [ebp+var_4], 4
.text:00003914                 lea     ecx, [ebp+var_11C] ; this
.text:0000391A                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:0000391F                 mov     byte ptr [ebp+var_4], 3
.text:00003923                 lea     ecx, [ebp+var_A4]
.text:00003929                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000392E                 jmp     loc_3532
.text:00003933 ; ---------------------------------------------------------------------------
.text:00003933
.text:00003933 loc_3933:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+522j
.text:00003933                 movzx   ecx, [ebp+var_C0]
.text:0000393A                 test    ecx, ecx
.text:0000393C                 jnz     loc_3B53
.text:00003942                 lea     edx, [ebp+var_11C]
.text:00003948                 push    edx             ; struct NArchive::NZip::CItemEx *
.text:00003949                 mov     ecx, [ebp+this]
.text:0000394C                 add     ecx, 20h ; ' '  ; this
.text:0000394F                 call    ?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CItemEx &)
.text:00003954                 mov     [ebp+var_1FC], eax
.text:0000395A                 mov     eax, [ebp+var_1FC]
.text:00003960                 mov     [ebp+var_134], eax
.text:00003966                 cmp     [ebp+var_134], 1
.text:0000396D                 jnz     loc_3AEE
.text:00003973                 lea     ecx, [ebp+var_11C] ; this
.text:00003979                 call    ?IsDir@CItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CItem::IsDir(void)
.text:0000397E                 mov     [ebp+var_1FD], al
.text:00003984                 movzx   ecx, [ebp+var_1FD]
.text:0000398B                 test    ecx, ecx
.text:0000398D                 jnz     short loc_39B3
.text:0000398F                 lea     ecx, [ebp+var_A4]
.text:00003995                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:0000399A                 mov     [ebp+var_204], eax
.text:000039A0                 cmp     [ebp+var_204], 0
.text:000039A7                 jnz     short loc_39B3
.text:000039A9                 cmp     [ebp+arg_C], 0
.text:000039AD                 jz      loc_3ACB
.text:000039B3
.text:000039B3 loc_39B3:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6BDj
.text:000039B3                                         ; NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6D7j
.text:000039B3                 mov     esi, esp
.text:000039B5                 mov     edx, [ebp+var_AC]
.text:000039BB                 push    edx
.text:000039BC                 mov     eax, [ebp+arg_10]
.text:000039BF                 push    eax
.text:000039C0                 mov     ecx, [ebp+arg_10]
.text:000039C3                 mov     edx, [ecx]
.text:000039C5                 mov     eax, [edx+18h]
.text:000039C8                 call    eax
.text:000039CA                 cmp     esi, esp
.text:000039CC                 call    __RTC_CheckEsp
.text:000039D1                 mov     [ebp+var_208], eax
.text:000039D7                 mov     ecx, [ebp+var_208]
.text:000039DD                 mov     [ebp+var_138], ecx
.text:000039E3                 cmp     [ebp+var_138], 0
.text:000039EA                 jz      short loc_3A3C
.text:000039EC                 mov     edx, [ebp+var_138]
.text:000039F2                 mov     [ebp+var_188], edx
.text:000039F8                 mov     byte ptr [ebp+var_4], 4
.text:000039FC                 lea     ecx, [ebp+var_11C] ; this
.text:00003A02                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00003A07                 mov     byte ptr [ebp+var_4], 3
.text:00003A0B                 lea     ecx, [ebp+var_A4]
.text:00003A11                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003A16                 mov     byte ptr [ebp+var_4], 1
.text:00003A1A                 lea     ecx, [ebp+var_94]
.text:00003A20                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003A25                 mov     byte ptr [ebp+var_4], 0
.text:00003A29                 lea     ecx, [ebp+var_44] ; this
.text:00003A2C                 call    ??1CZipDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CZipDecoder::~CZipDecoder(void)
.text:00003A31                 mov     eax, [ebp+var_188]
.text:00003A37                 jmp     loc_3F95
.text:00003A3C ; ---------------------------------------------------------------------------
.text:00003A3C
.text:00003A3C loc_3A3C:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+71Aj
.text:00003A3C                 lea     ecx, [ebp+var_A4]
.text:00003A42                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:00003A47                 mov     esi, esp
.text:00003A49                 push    8
.text:00003A4B                 mov     eax, [ebp+arg_10]
.text:00003A4E                 push    eax
.text:00003A4F                 mov     ecx, [ebp+arg_10]
.text:00003A52                 mov     edx, [ecx]
.text:00003A54                 mov     eax, [edx+1Ch]
.text:00003A57                 call    eax
.text:00003A59                 cmp     esi, esp
.text:00003A5B                 call    __RTC_CheckEsp
.text:00003A60                 mov     [ebp+var_20C], eax
.text:00003A66                 mov     ecx, [ebp+var_20C]
.text:00003A6C                 mov     [ebp+var_13C], ecx
.text:00003A72                 cmp     [ebp+var_13C], 0
.text:00003A79                 jz      short loc_3ACB
.text:00003A7B                 mov     edx, [ebp+var_13C]
.text:00003A81                 mov     [ebp+var_18C], edx
.text:00003A87                 mov     byte ptr [ebp+var_4], 4
.text:00003A8B                 lea     ecx, [ebp+var_11C] ; this
.text:00003A91                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00003A96                 mov     byte ptr [ebp+var_4], 3
.text:00003A9A                 lea     ecx, [ebp+var_A4]
.text:00003AA0                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003AA5                 mov     byte ptr [ebp+var_4], 1
.text:00003AA9                 lea     ecx, [ebp+var_94]
.text:00003AAF                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003AB4                 mov     byte ptr [ebp+var_4], 0
.text:00003AB8                 lea     ecx, [ebp+var_44] ; this
.text:00003ABB                 call    ??1CZipDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CZipDecoder::~CZipDecoder(void)
.text:00003AC0                 mov     eax, [ebp+var_18C]
.text:00003AC6                 jmp     loc_3F95
.text:00003ACB ; ---------------------------------------------------------------------------
.text:00003ACB
.text:00003ACB loc_3ACB:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6DDj
.text:00003ACB                                         ; NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+7A9j
.text:00003ACB                 mov     byte ptr [ebp+var_4], 4
.text:00003ACF                 lea     ecx, [ebp+var_11C] ; this
.text:00003AD5                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00003ADA                 mov     byte ptr [ebp+var_4], 3
.text:00003ADE                 lea     ecx, [ebp+var_A4]
.text:00003AE4                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003AE9                 jmp     loc_3532
.text:00003AEE ; ---------------------------------------------------------------------------
.text:00003AEE
.text:00003AEE loc_3AEE:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+69Dj
.text:00003AEE                 mov     eax, [ebp+var_134]
.text:00003AF4                 mov     [ebp+var_140], eax
.text:00003AFA                 cmp     [ebp+var_140], 0
.text:00003B01                 jz      short loc_3B53
.text:00003B03                 mov     ecx, [ebp+var_140]
.text:00003B09                 mov     [ebp+var_190], ecx
.text:00003B0F                 mov     byte ptr [ebp+var_4], 4
.text:00003B13                 lea     ecx, [ebp+var_11C] ; this
.text:00003B19                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00003B1E                 mov     byte ptr [ebp+var_4], 3
.text:00003B22                 lea     ecx, [ebp+var_A4]
.text:00003B28                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003B2D                 mov     byte ptr [ebp+var_4], 1
.text:00003B31                 lea     ecx, [ebp+var_94]
.text:00003B37                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003B3C                 mov     byte ptr [ebp+var_4], 0
.text:00003B40                 lea     ecx, [ebp+var_44] ; this
.text:00003B43                 call    ??1CZipDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CZipDecoder::~CZipDecoder(void)
.text:00003B48                 mov     eax, [ebp+var_190]
.text:00003B4E                 jmp     loc_3F95
.text:00003B53 ; ---------------------------------------------------------------------------
.text:00003B53
.text:00003B53 loc_3B53:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+66Cj
.text:00003B53                                         ; NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+831j
.text:00003B53                 lea     ecx, [ebp+var_11C] ; this
.text:00003B59                 call    ?IsDir@CItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CItem::IsDir(void)
.text:00003B5E                 mov     [ebp+var_20D], al
.text:00003B64                 movzx   edx, [ebp+var_20D]
.text:00003B6B                 test    edx, edx
.text:00003B6D                 jz      loc_3CAE
.text:00003B73                 mov     esi, esp
.text:00003B75                 mov     eax, [ebp+var_AC]
.text:00003B7B                 push    eax
.text:00003B7C                 mov     ecx, [ebp+arg_10]
.text:00003B7F                 push    ecx
.text:00003B80                 mov     edx, [ebp+arg_10]
.text:00003B83                 mov     eax, [edx]
.text:00003B85                 mov     ecx, [eax+18h]
.text:00003B88                 call    ecx
.text:00003B8A                 cmp     esi, esp
.text:00003B8C                 call    __RTC_CheckEsp
.text:00003B91                 mov     [ebp+var_214], eax
.text:00003B97                 mov     edx, [ebp+var_214]
.text:00003B9D                 mov     [ebp+var_144], edx
.text:00003BA3                 cmp     [ebp+var_144], 0
.text:00003BAA                 jz      short loc_3BFC
.text:00003BAC                 mov     eax, [ebp+var_144]
.text:00003BB2                 mov     [ebp+var_194], eax
.text:00003BB8                 mov     byte ptr [ebp+var_4], 4
.text:00003BBC                 lea     ecx, [ebp+var_11C] ; this
.text:00003BC2                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00003BC7                 mov     byte ptr [ebp+var_4], 3
.text:00003BCB                 lea     ecx, [ebp+var_A4]
.text:00003BD1                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003BD6                 mov     byte ptr [ebp+var_4], 1
.text:00003BDA                 lea     ecx, [ebp+var_94]
.text:00003BE0                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003BE5                 mov     byte ptr [ebp+var_4], 0
.text:00003BE9                 lea     ecx, [ebp+var_44] ; this
.text:00003BEC                 call    ??1CZipDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CZipDecoder::~CZipDecoder(void)
.text:00003BF1                 mov     eax, [ebp+var_194]
.text:00003BF7                 jmp     loc_3F95
.text:00003BFC ; ---------------------------------------------------------------------------
.text:00003BFC
.text:00003BFC loc_3BFC:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+8DAj
.text:00003BFC                 lea     ecx, [ebp+var_A4]
.text:00003C02                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:00003C07                 mov     esi, esp
.text:00003C09                 push    0
.text:00003C0B                 mov     ecx, [ebp+arg_10]
.text:00003C0E                 push    ecx
.text:00003C0F                 mov     edx, [ebp+arg_10]
.text:00003C12                 mov     eax, [edx]
.text:00003C14                 mov     ecx, [eax+1Ch]
.text:00003C17                 call    ecx
.text:00003C19                 cmp     esi, esp
.text:00003C1B                 call    __RTC_CheckEsp
.text:00003C20                 mov     [ebp+var_218], eax
.text:00003C26                 mov     edx, [ebp+var_218]
.text:00003C2C                 mov     [ebp+var_148], edx
.text:00003C32                 cmp     [ebp+var_148], 0
.text:00003C39                 jz      short loc_3C8B
.text:00003C3B                 mov     eax, [ebp+var_148]
.text:00003C41                 mov     [ebp+var_198], eax
.text:00003C47                 mov     byte ptr [ebp+var_4], 4
.text:00003C4B                 lea     ecx, [ebp+var_11C] ; this
.text:00003C51                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00003C56                 mov     byte ptr [ebp+var_4], 3
.text:00003C5A                 lea     ecx, [ebp+var_A4]
.text:00003C60                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003C65                 mov     byte ptr [ebp+var_4], 1
.text:00003C69                 lea     ecx, [ebp+var_94]
.text:00003C6F                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003C74                 mov     byte ptr [ebp+var_4], 0
.text:00003C78                 lea     ecx, [ebp+var_44] ; this
.text:00003C7B                 call    ??1CZipDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CZipDecoder::~CZipDecoder(void)
.text:00003C80                 mov     eax, [ebp+var_198]
.text:00003C86                 jmp     loc_3F95
.text:00003C8B ; ---------------------------------------------------------------------------
.text:00003C8B
.text:00003C8B loc_3C8B:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+969j
.text:00003C8B                 mov     byte ptr [ebp+var_4], 4
.text:00003C8F                 lea     ecx, [ebp+var_11C] ; this
.text:00003C95                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00003C9A                 mov     byte ptr [ebp+var_4], 3
.text:00003C9E                 lea     ecx, [ebp+var_A4]
.text:00003CA4                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003CA9                 jmp     loc_3532
.text:00003CAE ; ---------------------------------------------------------------------------
.text:00003CAE
.text:00003CAE loc_3CAE:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+89Dj
.text:00003CAE                 cmp     [ebp+arg_C], 0
.text:00003CB2                 jnz     short loc_3CF3
.text:00003CB4                 lea     ecx, [ebp+var_A4]
.text:00003CBA                 call    ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!(void)
.text:00003CBF                 mov     [ebp+var_219], al
.text:00003CC5                 movzx   ecx, [ebp+var_219]
.text:00003CCC                 test    ecx, ecx
.text:00003CCE                 jz      short loc_3CF3
.text:00003CD0                 mov     byte ptr [ebp+var_4], 4
.text:00003CD4                 lea     ecx, [ebp+var_11C] ; this
.text:00003CDA                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00003CDF                 mov     byte ptr [ebp+var_4], 3
.text:00003CE3                 lea     ecx, [ebp+var_A4]
.text:00003CE9                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003CEE                 jmp     loc_3532
.text:00003CF3 ; ---------------------------------------------------------------------------
.text:00003CF3
.text:00003CF3 loc_3CF3:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+9E2j
.text:00003CF3                                         ; NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+9FEj
.text:00003CF3                 mov     esi, esp
.text:00003CF5                 mov     edx, [ebp+var_AC]
.text:00003CFB                 push    edx
.text:00003CFC                 mov     eax, [ebp+arg_10]
.text:00003CFF                 push    eax
.text:00003D00                 mov     ecx, [ebp+arg_10]
.text:00003D03                 mov     edx, [ecx]
.text:00003D05                 mov     eax, [edx+18h]
.text:00003D08                 call    eax
.text:00003D0A                 cmp     esi, esp
.text:00003D0C                 call    __RTC_CheckEsp
.text:00003D11                 mov     [ebp+var_220], eax
.text:00003D17                 mov     ecx, [ebp+var_220]
.text:00003D1D                 mov     [ebp+var_14C], ecx
.text:00003D23                 cmp     [ebp+var_14C], 0
.text:00003D2A                 jz      short loc_3D7C
.text:00003D2C                 mov     edx, [ebp+var_14C]
.text:00003D32                 mov     [ebp+var_19C], edx
.text:00003D38                 mov     byte ptr [ebp+var_4], 4
.text:00003D3C                 lea     ecx, [ebp+var_11C] ; this
.text:00003D42                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00003D47                 mov     byte ptr [ebp+var_4], 3
.text:00003D4B                 lea     ecx, [ebp+var_A4]
.text:00003D51                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003D56                 mov     byte ptr [ebp+var_4], 1
.text:00003D5A                 lea     ecx, [ebp+var_94]
.text:00003D60                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003D65                 mov     byte ptr [ebp+var_4], 0
.text:00003D69                 lea     ecx, [ebp+var_44] ; this
.text:00003D6C                 call    ??1CZipDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CZipDecoder::~CZipDecoder(void)
.text:00003D71                 mov     eax, [ebp+var_19C]
.text:00003D77                 jmp     loc_3F95
.text:00003D7C ; ---------------------------------------------------------------------------
.text:00003D7C
.text:00003D7C loc_3D7C:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+A5Aj
.text:00003D7C                 lea     ecx, [ebp+var_94]
.text:00003D82                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:00003D87                 mov     [ebp+var_224], eax
.text:00003D8D                 lea     ecx, [ebp+var_A4]
.text:00003D93                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00003D98                 mov     [ebp+var_228], eax
.text:00003D9E                 lea     eax, [ebp+var_154]
.text:00003DA4                 push    eax             ; int *
.text:00003DA5                 mov     ecx, [ebp+this]
.text:00003DA8                 mov     edx, [ecx+0B8h]
.text:00003DAE                 push    edx             ; unsigned int
.text:00003DAF                 mov     eax, [ebp+var_224]
.text:00003DB5                 push    eax             ; struct ICompressProgressInfo *
.text:00003DB6                 mov     ecx, [ebp+arg_10]
.text:00003DB9                 push    ecx             ; struct IArchiveExtractCallback *
.text:00003DBA                 mov     edx, [ebp+var_228]
.text:00003DC0                 push    edx             ; struct ISequentialOutStream *
.text:00003DC1                 lea     eax, [ebp+var_11C]
.text:00003DC7                 push    eax             ; struct NArchive::NZip::CItemEx *
.text:00003DC8                 mov     ecx, [ebp+this]
.text:00003DCB                 add     ecx, 20h ; ' '
.text:00003DCE                 push    ecx             ; struct NArchive::NZip::CInArchive *
.text:00003DCF                 lea     ecx, [ebp+var_44] ; this
.text:00003DD2                 call    ?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)
.text:00003DD7                 mov     [ebp+var_22C], eax
.text:00003DDD                 mov     edx, [ebp+var_22C]
.text:00003DE3                 mov     [ebp+var_15C], edx
.text:00003DE9                 mov     eax, [ebp+var_15C]
.text:00003DEF                 mov     [ebp+var_160], eax
.text:00003DF5                 cmp     [ebp+var_160], 0
.text:00003DFC                 jz      short loc_3E4E
.text:00003DFE                 mov     ecx, [ebp+var_160]
.text:00003E04                 mov     [ebp+var_1A0], ecx
.text:00003E0A                 mov     byte ptr [ebp+var_4], 4
.text:00003E0E                 lea     ecx, [ebp+var_11C] ; this
.text:00003E14                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00003E19                 mov     byte ptr [ebp+var_4], 3
.text:00003E1D                 lea     ecx, [ebp+var_A4]
.text:00003E23                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003E28                 mov     byte ptr [ebp+var_4], 1
.text:00003E2C                 lea     ecx, [ebp+var_94]
.text:00003E32                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003E37                 mov     byte ptr [ebp+var_4], 0
.text:00003E3B                 lea     ecx, [ebp+var_44] ; this
.text:00003E3E                 call    ??1CZipDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CZipDecoder::~CZipDecoder(void)
.text:00003E43                 mov     eax, [ebp+var_1A0]
.text:00003E49                 jmp     loc_3F95
.text:00003E4E ; ---------------------------------------------------------------------------
.text:00003E4E
.text:00003E4E loc_3E4E:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+B2Cj
.text:00003E4E                 lea     ecx, [ebp+var_A4]
.text:00003E54                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:00003E59                 mov     esi, esp
.text:00003E5B                 mov     edx, [ebp+var_154]
.text:00003E61                 push    edx
.text:00003E62                 mov     eax, [ebp+arg_10]
.text:00003E65                 push    eax
.text:00003E66                 mov     ecx, [ebp+arg_10]
.text:00003E69                 mov     edx, [ecx]
.text:00003E6B                 mov     eax, [edx+1Ch]
.text:00003E6E                 call    eax
.text:00003E70                 cmp     esi, esp
.text:00003E72                 call    __RTC_CheckEsp
.text:00003E77                 mov     [ebp+var_230], eax
.text:00003E7D                 mov     ecx, [ebp+var_230]
.text:00003E83                 mov     [ebp+var_164], ecx
.text:00003E89                 cmp     [ebp+var_164], 0
.text:00003E90                 jz      short loc_3EE2
.text:00003E92                 mov     edx, [ebp+var_164]
.text:00003E98                 mov     [ebp+var_1A4], edx
.text:00003E9E                 mov     byte ptr [ebp+var_4], 4
.text:00003EA2                 lea     ecx, [ebp+var_11C] ; this
.text:00003EA8                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00003EAD                 mov     byte ptr [ebp+var_4], 3
.text:00003EB1                 lea     ecx, [ebp+var_A4]
.text:00003EB7                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003EBC                 mov     byte ptr [ebp+var_4], 1
.text:00003EC0                 lea     ecx, [ebp+var_94]
.text:00003EC6                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003ECB                 mov     byte ptr [ebp+var_4], 0
.text:00003ECF                 lea     ecx, [ebp+var_44] ; this
.text:00003ED2                 call    ??1CZipDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CZipDecoder::~CZipDecoder(void)
.text:00003ED7                 mov     eax, [ebp+var_1A4]
.text:00003EDD                 jmp     loc_3F95
.text:00003EE2 ; ---------------------------------------------------------------------------
.text:00003EE2
.text:00003EE2 loc_3EE2:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+BC0j
.text:00003EE2                 mov     byte ptr [ebp+var_4], 4
.text:00003EE6                 lea     ecx, [ebp+var_11C] ; this
.text:00003EEC                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:00003EF1                 mov     byte ptr [ebp+var_4], 3
.text:00003EF5                 lea     ecx, [ebp+var_A4]
.text:00003EFB                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003F00                 jmp     loc_3532
.text:00003F05 ; ---------------------------------------------------------------------------
.text:00003F05
.text:00003F05 loc_3F05:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+29Bj
.text:00003F05                 mov     eax, [ebp+var_8C]
.text:00003F0B                 mov     ecx, [ebp+var_78]
.text:00003F0E                 mov     [eax+20h], ecx
.text:00003F11                 mov     edx, [ebp+var_74]
.text:00003F14                 mov     [eax+24h], edx
.text:00003F17                 mov     eax, [ebp+var_8C]
.text:00003F1D                 mov     ecx, [ebp+var_70]
.text:00003F20                 mov     [eax+28h], ecx
.text:00003F23                 mov     edx, [ebp+var_6C]
.text:00003F26                 mov     [eax+2Ch], edx
.text:00003F29                 mov     ecx, [ebp+var_8C] ; this
.text:00003F2F                 call    ?SetCur@CLocalProgress@@QAEJXZ ; CLocalProgress::SetCur(void)
.text:00003F34                 mov     [ebp+var_234], eax
.text:00003F3A                 mov     eax, [ebp+var_234]
.text:00003F40                 mov     [ebp+var_1A8], eax
.text:00003F46                 mov     byte ptr [ebp+var_4], 1
.text:00003F4A                 lea     ecx, [ebp+var_94]
.text:00003F50                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003F55                 mov     byte ptr [ebp+var_4], 0
.text:00003F59                 lea     ecx, [ebp+var_44] ; this
.text:00003F5C                 call    ??1CZipDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CZipDecoder::~CZipDecoder(void)
.text:00003F61                 mov     eax, [ebp+var_1A8]
.text:00003F67                 jmp     short loc_3F95
.text:00003F67 ?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z endp
.text:00003F67
.text:00003F69
.text:00003F69 ; =============== S U B R O U T I N E =======================================
.text:00003F69
.text:00003F69
.text:00003F69 __catch$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0 proc near
.text:00003F69                                         ; DATA XREF: .xdata$x:000046D0o
.text:00003F69                 mov     dword ptr [ebp-1ACh], 8007000Eh
.text:00003F73                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00003F7A                 mov     eax, offset $LN49_0
.text:00003F7F                 retn
.text:00003F7F __catch$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0 endp
.text:00003F7F
.text:00003F80 ; ---------------------------------------------------------------------------
.text:00003F80                 mov     eax, offset __tryend$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1
.text:00003F85                 retn
.text:00003F86 ; ---------------------------------------------------------------------------
.text:00003F86
.text:00003F86 __tryend$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1:
.text:00003F86                                         ; DATA XREF: .text:00003F80o
.text:00003F86                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00003F8D                 jmp     short loc_3F95
.text:00003F8F ; ---------------------------------------------------------------------------
.text:00003F8F
.text:00003F8F $LN49_0:                                ; DATA XREF: __catch$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0+11o
.text:00003F8F                 mov     eax, [ebp-1ACh]
.text:00003F95 ; START OF FUNCTION CHUNK FOR ?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00003F95
.text:00003F95 loc_3F95:                               ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+C6j
.text:00003F95                                         ; NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1A3j ...
.text:00003F95                 push    edx
.text:00003F96                 mov     ecx, ebp
.text:00003F98                 push    eax
.text:00003F99                 lea     edx, $LN58
.text:00003F9F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003FA4                 pop     eax
.text:00003FA5                 pop     edx
.text:00003FA6                 mov     ecx, [ebp+var_C]
.text:00003FA9                 mov     large fs:0, ecx
.text:00003FB0                 pop     ecx
.text:00003FB1                 pop     edi
.text:00003FB2                 pop     esi
.text:00003FB3                 pop     ebx
.text:00003FB4                 add     esp, 234h
.text:00003FBA                 cmp     ebp, esp
.text:00003FBC                 call    __RTC_CheckEsp
.text:00003FC1                 mov     esp, ebp
.text:00003FC3                 pop     ebp
.text:00003FC4                 retn    14h
.text:00003FC4 ; END OF FUNCTION CHUNK FOR ?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00003FC4 ; ---------------------------------------------------------------------------
.text:00003FC7                 align 4
.text:00003FC8 $LN58           dd 5                    ; DATA XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+CC9o
.text:00003FCC                 dd offset $LN57
.text:00003FD0 $LN57           dd 0FFFFFFBCh, 30h      ; DATA XREF: .text:00003FCCo
.text:00003FD8                 dd offset $LN51         ; "myDecoder"
.text:00003FDC                 dd 0FFFFFF6Ch, 4
.text:00003FE4                 dd offset $LN52         ; "progress"
.text:00003FE8                 dd 0FFFFFF5Ch, 4
.text:00003FF0                 dd offset $LN53         ; "realOutStream"
.text:00003FF4                 dd 0FFFFFEE4h, 68h
.text:00003FFC                 dd offset $LN54         ; "item"
.text:00004000                 dd 0FFFFFEACh, 4
.text:00004008                 dd offset $LN55
.text:0000400C $LN55           dd 736572h              ; DATA XREF: .text:00004008o
.text:00004010 $LN54           db 'item',0             ; DATA XREF: .text:00003FFCo
.text:00004015 $LN53           db 'realOutStream',0    ; DATA XREF: .text:00003FF0o
.text:00004023 $LN52           db 'progress',0         ; DATA XREF: .text:00003FE4o
.text:0000402C $LN51           db 'myDecoder',0        ; DATA XREF: .text:00003FD8o
.text:00004036                 align 4
.text:00004036 _text           ends
.text:00004036
.rtc$TMZ:00004038 ; ===========================================================================
.rtc$TMZ:00004038
.rtc$TMZ:00004038 ; Segment type: Pure data
.rtc$TMZ:00004038 ; Segment permissions: Read
.rtc$TMZ:00004038 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00004038                 assume cs:_rtc$TMZ
.rtc$TMZ:00004038                 ;org 4038h
.rtc$TMZ:00004038 ; COMDAT (pick any)
.rtc$TMZ:00004038 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00004038 _rtc$TMZ        ends
.rtc$TMZ:00004038
.rtc$IMZ:0000403C ; ===========================================================================
.rtc$IMZ:0000403C
.rtc$IMZ:0000403C ; Segment type: Pure data
.rtc$IMZ:0000403C ; Segment permissions: Read
.rtc$IMZ:0000403C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000403C                 assume cs:_rtc$IMZ
.rtc$IMZ:0000403C                 ;org 403Ch
.rtc$IMZ:0000403C ; COMDAT (pick any)
.rtc$IMZ:0000403C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000403C _rtc$IMZ        ends
.rtc$IMZ:0000403C
.text$x:00004040 ; ===========================================================================
.text$x:00004040
.text$x:00004040 ; Segment type: Pure code
.text$x:00004040 ; Segment permissions: Read/Execute
.text$x:00004040 _text$x         segment para public 'CODE' use32
.text$x:00004040                 assume cs:_text$x
.text$x:00004040                 ;org 4040h
.text$x:00004040                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004040
.text$x:00004040 ; =============== S U B R O U T I N E =======================================
.text$x:00004040
.text$x:00004040
.text$x:00004040 __unwindfunclet$??0CHandler@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00004040                                         ; DATA XREF: .xdata$x:000043ACo
.text$x:00004040                 mov     ecx, [ebp-10h]
.text$x:00004043                 add     ecx, 10h
.text$x:00004046                 jmp     ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)
.text$x:00004046 __unwindfunclet$??0CHandler@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00004046
.text$x:0000404B
.text$x:0000404B ; =============== S U B R O U T I N E =======================================
.text$x:0000404B
.text$x:0000404B
.text$x:0000404B __unwindfunclet$??0CHandler@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:0000404B                                         ; DATA XREF: .xdata$x:000043B4o
.text$x:0000404B                 mov     ecx, [ebp-10h]
.text$x:0000404E                 add     ecx, 20h ; ' '  ; this
.text$x:00004051                 jmp     ??1CInArchive@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CInArchive::~CInArchive(void)
.text$x:00004051 __unwindfunclet$??0CHandler@NZip@NArchive@@QAE@XZ$1 endp
.text$x:00004051
.text$x:00004056
.text$x:00004056 ; =============== S U B R O U T I N E =======================================
.text$x:00004056
.text$x:00004056
.text$x:00004056 __unwindfunclet$??0CHandler@NZip@NArchive@@QAE@XZ$2 proc near
.text$x:00004056                                         ; DATA XREF: .xdata$x:000043BCo
.text$x:00004056                 mov     ecx, [ebp-10h]
.text$x:00004059                 add     ecx, 0A8h ; '¿' ; this
.text$x:0000405F                 jmp     ??1CBaseProps@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CBaseProps::~CBaseProps(void)
.text$x:0000405F __unwindfunclet$??0CHandler@NZip@NArchive@@QAE@XZ$2 endp
.text$x:0000405F
.text$x:00004064
.text$x:00004064 ; =============== S U B R O U T I N E =======================================
.text$x:00004064
.text$x:00004064
.text$x:00004064 __ehhandler$??0CHandler@NZip@NArchive@@QAE@XZ proc near
.text$x:00004064                                         ; DATA XREF: NArchive::NZip::CHandler::CHandler(void)+5o
.text$x:00004064
.text$x:00004064 arg_4           = dword ptr  8
.text$x:00004064
.text$x:00004064                 mov     edx, [esp+arg_4]
.text$x:00004068                 lea     eax, [edx+0Ch]
.text$x:0000406B                 mov     ecx, [edx-8]
.text$x:0000406E                 xor     ecx, eax
.text$x:00004070                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004075                 mov     eax, offset __ehfuncinfo$??0CHandler@NZip@NArchive@@QAE@XZ
.text$x:0000407A                 jmp     ___CxxFrameHandler3
.text$x:0000407A __ehhandler$??0CHandler@NZip@NArchive@@QAE@XZ endp
.text$x:0000407A
.text$x:0000407F
.text$x:0000407F ; =============== S U B R O U T I N E =======================================
.text$x:0000407F
.text$x:0000407F
.text$x:0000407F __unwindfunclet$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$2 proc near
.text$x:0000407F                                         ; DATA XREF: .xdata$x:00004438o
.text$x:0000407F                 lea     ecx, [ebp-24h]  ; this
.text$x:00004082                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00004082 __unwindfunclet$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$2 endp
.text$x:00004082
.text$x:00004087
.text$x:00004087 ; =============== S U B R O U T I N E =======================================
.text$x:00004087
.text$x:00004087
.text$x:00004087 __unwindfunclet$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$3 proc near
.text$x:00004087                                         ; DATA XREF: .xdata$x:00004440o
.text$x:00004087                 lea     ecx, [ebp-4Ch]  ; this
.text$x:0000408A                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000408A __unwindfunclet$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$3 endp
.text$x:0000408A
.text$x:0000408F
.text$x:0000408F ; =============== S U B R O U T I N E =======================================
.text$x:0000408F
.text$x:0000408F
.text$x:0000408F __unwindfunclet$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$4 proc near
.text$x:0000408F                                         ; DATA XREF: .xdata$x:00004448o
.text$x:0000408F                 lea     ecx, [ebp-58h]  ; this
.text$x:00004092                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004092 __unwindfunclet$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$4 endp
.text$x:00004092
.text$x:00004097
.text$x:00004097 ; =============== S U B R O U T I N E =======================================
.text$x:00004097
.text$x:00004097
.text$x:00004097 __ehhandler$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z proc near
.text$x:00004097                                         ; DATA XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+5o
.text$x:00004097
.text$x:00004097 arg_4           = dword ptr  8
.text$x:00004097
.text$x:00004097                 mov     edx, [esp+arg_4]
.text$x:0000409B                 lea     eax, [edx+0Ch]
.text$x:0000409E                 mov     ecx, [edx-0A4h]
.text$x:000040A4                 xor     ecx, eax
.text$x:000040A6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000040AB                 mov     eax, offset __ehfuncinfo$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text$x:000040B0                 jmp     ___CxxFrameHandler3
.text$x:000040B0 __ehhandler$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z endp
.text$x:000040B0
.text$x:000040B5
.text$x:000040B5 ; =============== S U B R O U T I N E =======================================
.text$x:000040B5
.text$x:000040B5
.text$x:000040B5 __unwindfunclet$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z$0 proc near
.text$x:000040B5                                         ; DATA XREF: .xdata$x:00004460o
.text$x:000040B5                 lea     ecx, [ebp-1Ch]  ; this
.text$x:000040B8                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000040B8 __unwindfunclet$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z$0 endp
.text$x:000040B8
.text$x:000040BD
.text$x:000040BD ; =============== S U B R O U T I N E =======================================
.text$x:000040BD
.text$x:000040BD
.text$x:000040BD __unwindfunclet$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z$1 proc near
.text$x:000040BD                                         ; DATA XREF: .xdata$x:00004458o
.text$x:000040BD                 mov     eax, [ebp-24h]
.text$x:000040C0                 and     eax, 1
.text$x:000040C3                 jz      locret_40D5
.text$x:000040C9                 and     dword ptr [ebp-24h], 0FFFFFFFEh
.text$x:000040CD                 mov     ecx, [ebp+8]    ; this
.text$x:000040D0                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000040D5 ; ---------------------------------------------------------------------------
.text$x:000040D5
.text$x:000040D5 locret_40D5:                            ; CODE XREF: __unwindfunclet$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z$1+6j
.text$x:000040D5                 retn
.text$x:000040D5 __unwindfunclet$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z$1 endp
.text$x:000040D5
.text$x:000040D6
.text$x:000040D6 ; =============== S U B R O U T I N E =======================================
.text$x:000040D6
.text$x:000040D6
.text$x:000040D6 __ehhandler$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z proc near
.text$x:000040D6                                         ; DATA XREF: NArchive::NZip::BytesToString(CBuffer<uchar> const &)+5o
.text$x:000040D6
.text$x:000040D6 arg_4           = dword ptr  8
.text$x:000040D6
.text$x:000040D6                 mov     edx, [esp+arg_4]
.text$x:000040DA                 lea     eax, [edx+0Ch]
.text$x:000040DD                 mov     ecx, [edx-1Ch]
.text$x:000040E0                 xor     ecx, eax
.text$x:000040E2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000040E7                 mov     eax, offset __ehfuncinfo$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z
.text$x:000040EC                 jmp     ___CxxFrameHandler3
.text$x:000040EC __ehhandler$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z endp
.text$x:000040EC
.text$x:000040F1
.text$x:000040F1 ; =============== S U B R O U T I N E =======================================
.text$x:000040F1
.text$x:000040F1
.text$x:000040F1 __unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2 proc near
.text$x:000040F1                                         ; DATA XREF: .xdata$x:000044DCo
.text$x:000040F1                 lea     ecx, [ebp-28h]  ; this
.text$x:000040F4                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:000040F4 __unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2 endp
.text$x:000040F4
.text$x:000040F9
.text$x:000040F9 ; =============== S U B R O U T I N E =======================================
.text$x:000040F9
.text$x:000040F9
.text$x:000040F9 __unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3 proc near
.text$x:000040F9                                         ; DATA XREF: .xdata$x:000044E4o
.text$x:000040F9                 lea     ecx, [ebp-40h]  ; this
.text$x:000040FC                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000040FC __unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3 endp
.text$x:000040FC
.text$x:00004101
.text$x:00004101 ; =============== S U B R O U T I N E =======================================
.text$x:00004101
.text$x:00004101
.text$x:00004101 __unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$4 proc near
.text$x:00004101                                         ; DATA XREF: .xdata$x:000044ECo
.text$x:00004101                 lea     ecx, [ebp-0D0h] ; this
.text$x:00004107                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004107 __unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$4 endp
.text$x:00004107
.text$x:0000410C
.text$x:0000410C ; =============== S U B R O U T I N E =======================================
.text$x:0000410C
.text$x:0000410C
.text$x:0000410C __unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$5 proc near
.text$x:0000410C                                         ; DATA XREF: .xdata$x:000044F4o
.text$x:0000410C                 lea     ecx, [ebp-188h] ; this
.text$x:00004112                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00004112 __unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$5 endp
.text$x:00004112
.text$x:00004117
.text$x:00004117 ; =============== S U B R O U T I N E =======================================
.text$x:00004117
.text$x:00004117
.text$x:00004117 __unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$6 proc near
.text$x:00004117                                         ; DATA XREF: .xdata$x:000044FCo
.text$x:00004117                 lea     ecx, [ebp-0E8h] ; this
.text$x:0000411D                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000411D __unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$6 endp
.text$x:0000411D
.text$x:00004122
.text$x:00004122 ; =============== S U B R O U T I N E =======================================
.text$x:00004122
.text$x:00004122
.text$x:00004122 __ehhandler$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z proc near
.text$x:00004122                                         ; DATA XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+5o
.text$x:00004122
.text$x:00004122 arg_4           = dword ptr  8
.text$x:00004122
.text$x:00004122                 mov     edx, [esp+arg_4]
.text$x:00004126                 lea     eax, [edx+0Ch]
.text$x:00004129                 mov     ecx, [edx-1E4h]
.text$x:0000412F                 xor     ecx, eax
.text$x:00004131                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004136                 mov     ecx, [edx-8]
.text$x:00004139                 xor     ecx, eax
.text$x:0000413B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004140                 mov     eax, offset __ehfuncinfo$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text$x:00004145                 jmp     ___CxxFrameHandler3
.text$x:00004145 __ehhandler$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z endp
.text$x:00004145
.text$x:0000414A
.text$x:0000414A ; =============== S U B R O U T I N E =======================================
.text$x:0000414A
.text$x:0000414A
.text$x:0000414A __unwindfunclet$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$4 proc near
.text$x:0000414A                                         ; DATA XREF: .xdata$x:00004588o
.text$x:0000414A                 lea     ecx, [ebp-20h]  ; this
.text$x:0000414D                 jmp     ??1CProgressImp@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CProgressImp::~CProgressImp(void)
.text$x:0000414D __unwindfunclet$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$4 endp
.text$x:0000414D
.text$x:00004152
.text$x:00004152 ; =============== S U B R O U T I N E =======================================
.text$x:00004152
.text$x:00004152
.text$x:00004152 __ehhandler$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z proc near
.text$x:00004152                                         ; DATA XREF: NArchive::NZip::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+5o
.text$x:00004152
.text$x:00004152 arg_4           = dword ptr  8
.text$x:00004152
.text$x:00004152                 mov     edx, [esp+arg_4]
.text$x:00004156                 lea     eax, [edx+0Ch]
.text$x:00004159                 mov     ecx, [edx-3Ch]
.text$x:0000415C                 xor     ecx, eax
.text$x:0000415E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004163                 mov     eax, offset __ehfuncinfo$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text$x:00004168                 jmp     ___CxxFrameHandler3
.text$x:00004168 __ehhandler$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z endp
.text$x:00004168
.text$x:0000416D
.text$x:0000416D ; =============== S U B R O U T I N E =======================================
.text$x:0000416D
.text$x:0000416D
.text$x:0000416D __unwindfunclet$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:0000416D                                         ; DATA XREF: .xdata$x:000045A0o
.text$x:0000416D                 mov     ecx, [ebp-10h]
.text$x:00004170                 add     ecx, 0Ch
.text$x:00004173                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00004173 __unwindfunclet$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00004173
.text$x:00004178
.text$x:00004178 ; =============== S U B R O U T I N E =======================================
.text$x:00004178
.text$x:00004178
.text$x:00004178 __unwindfunclet$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:00004178                                         ; DATA XREF: .xdata$x:000045A8o
.text$x:00004178                 mov     eax, [ebp-18h]
.text$x:0000417B                 push    eax             ; void *
.text$x:0000417C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004181                 pop     ecx
.text$x:00004182                 retn
.text$x:00004182 __unwindfunclet$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ$1 endp
.text$x:00004182
.text$x:00004183
.text$x:00004183 ; =============== S U B R O U T I N E =======================================
.text$x:00004183
.text$x:00004183
.text$x:00004183 __ehhandler$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ proc near
.text$x:00004183                                         ; DATA XREF: NArchive::NZip::CLzmaDecoder::CLzmaDecoder(void)+5o
.text$x:00004183
.text$x:00004183 arg_4           = dword ptr  8
.text$x:00004183
.text$x:00004183                 mov     edx, [esp+arg_4]
.text$x:00004187                 lea     eax, [edx+0Ch]
.text$x:0000418A                 mov     ecx, [edx-14h]
.text$x:0000418D                 xor     ecx, eax
.text$x:0000418F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004194                 mov     eax, offset __ehfuncinfo$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ
.text$x:00004199                 jmp     ___CxxFrameHandler3
.text$x:00004199 __ehhandler$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ endp
.text$x:00004199
.text$x:0000419E
.text$x:0000419E ; =============== S U B R O U T I N E =======================================
.text$x:0000419E
.text$x:0000419E
.text$x:0000419E __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$0 proc near
.text$x:0000419E                                         ; DATA XREF: .xdata$x:000045F8o
.text$x:0000419E                 lea     ecx, [ebp-18h]  ; this
.text$x:000041A1                 jmp     ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)
.text$x:000041A1 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$0 endp
.text$x:000041A1
.text$x:000041A6
.text$x:000041A6 ; =============== S U B R O U T I N E =======================================
.text$x:000041A6
.text$x:000041A6
.text$x:000041A6 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$1 proc near
.text$x:000041A6                                         ; DATA XREF: .xdata$x:00004600o
.text$x:000041A6                 mov     eax, [ebp-168h]
.text$x:000041AC                 push    eax             ; void *
.text$x:000041AD                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000041B2                 pop     ecx
.text$x:000041B3                 retn
.text$x:000041B3 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$1 endp
.text$x:000041B3
.text$x:000041B4
.text$x:000041B4 ; =============== S U B R O U T I N E =======================================
.text$x:000041B4
.text$x:000041B4
.text$x:000041B4 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$2 proc near
.text$x:000041B4                                         ; DATA XREF: .xdata$x:00004608o
.text$x:000041B4                 lea     ecx, [ebp-50h]
.text$x:000041B7                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:000041B7 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$2 endp
.text$x:000041B7
.text$x:000041BC
.text$x:000041BC ; =============== S U B R O U T I N E =======================================
.text$x:000041BC
.text$x:000041BC
.text$x:000041BC __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$3 proc near
.text$x:000041BC                                         ; DATA XREF: .xdata$x:00004610o
.text$x:000041BC                 lea     ecx, [ebp-64h]
.text$x:000041BF                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:000041BF __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$3 endp
.text$x:000041BF
.text$x:000041C4
.text$x:000041C4 ; =============== S U B R O U T I N E =======================================
.text$x:000041C4
.text$x:000041C4
.text$x:000041C4 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$4 proc near
.text$x:000041C4                                         ; DATA XREF: .xdata$x:00004618o
.text$x:000041C4                 lea     ecx, [ebp-80h]
.text$x:000041C7                 jmp     ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text$x:000041C7 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$4 endp
.text$x:000041C7
.text$x:000041CC
.text$x:000041CC ; =============== S U B R O U T I N E =======================================
.text$x:000041CC
.text$x:000041CC
.text$x:000041CC __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$5 proc near
.text$x:000041CC                                         ; DATA XREF: .xdata$x:00004620o
.text$x:000041CC                 mov     eax, [ebp-178h]
.text$x:000041D2                 push    eax             ; void *
.text$x:000041D3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000041D8                 pop     ecx
.text$x:000041D9                 retn
.text$x:000041D9 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$5 endp
.text$x:000041D9
.text$x:000041DA
.text$x:000041DA ; =============== S U B R O U T I N E =======================================
.text$x:000041DA
.text$x:000041DA
.text$x:000041DA __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$6 proc near
.text$x:000041DA                                         ; DATA XREF: .xdata$x:00004628o
.text$x:000041DA                 mov     eax, [ebp-184h]
.text$x:000041E0                 push    eax             ; void *
.text$x:000041E1                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000041E6                 pop     ecx
.text$x:000041E7                 retn
.text$x:000041E7 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$6 endp
.text$x:000041E7
.text$x:000041E8
.text$x:000041E8 ; =============== S U B R O U T I N E =======================================
.text$x:000041E8
.text$x:000041E8
.text$x:000041E8 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$7 proc near
.text$x:000041E8                                         ; DATA XREF: .xdata$x:00004630o
.text$x:000041E8                 mov     eax, [ebp-18Ch]
.text$x:000041EE                 push    eax             ; void *
.text$x:000041EF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000041F4                 pop     ecx
.text$x:000041F5                 retn
.text$x:000041F5 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$7 endp
.text$x:000041F5
.text$x:000041F6
.text$x:000041F6 ; =============== S U B R O U T I N E =======================================
.text$x:000041F6
.text$x:000041F6
.text$x:000041F6 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$8 proc near
.text$x:000041F6                                         ; DATA XREF: .xdata$x:00004638o
.text$x:000041F6                 lea     ecx, [ebp-9Ch]
.text$x:000041FC                 jmp     ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)
.text$x:000041FC __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$8 endp
.text$x:000041FC
.text$x:00004201
.text$x:00004201 ; =============== S U B R O U T I N E =======================================
.text$x:00004201
.text$x:00004201
.text$x:00004201 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$9 proc near
.text$x:00004201                                         ; DATA XREF: .xdata$x:00004640o
.text$x:00004201                 lea     ecx, [ebp-0ACh] ; this
.text$x:00004207                 jmp     ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text$x:00004207 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$9 endp
.text$x:00004207
.text$x:0000420C
.text$x:0000420C ; =============== S U B R O U T I N E =======================================
.text$x:0000420C
.text$x:0000420C
.text$x:0000420C __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$10 proc near
.text$x:0000420C                                         ; DATA XREF: .xdata$x:00004648o
.text$x:0000420C                 lea     ecx, [ebp-0C4h] ; this
.text$x:00004212                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00004212 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$10 endp
.text$x:00004212
.text$x:00004217
.text$x:00004217 ; =============== S U B R O U T I N E =======================================
.text$x:00004217
.text$x:00004217
.text$x:00004217 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$11 proc near
.text$x:00004217                                         ; DATA XREF: .xdata$x:00004650o
.text$x:00004217                 lea     ecx, [ebp-1A0h] ; this
.text$x:0000421D                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000421D __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$11 endp
.text$x:0000421D
.text$x:00004222
.text$x:00004222 ; =============== S U B R O U T I N E =======================================
.text$x:00004222
.text$x:00004222
.text$x:00004222 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$12 proc near
.text$x:00004222                                         ; DATA XREF: .xdata$x:00004658o
.text$x:00004222                 lea     ecx, [ebp-1ACh] ; this
.text$x:00004228                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00004228 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$12 endp
.text$x:00004228
.text$x:0000422D
.text$x:0000422D ; =============== S U B R O U T I N E =======================================
.text$x:0000422D
.text$x:0000422D
.text$x:0000422D __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$13 proc near
.text$x:0000422D                                         ; DATA XREF: .xdata$x:00004660o
.text$x:0000422D                 lea     ecx, [ebp-1B8h] ; this
.text$x:00004233                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004233 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$13 endp
.text$x:00004233
.text$x:00004238
.text$x:00004238 ; =============== S U B R O U T I N E =======================================
.text$x:00004238
.text$x:00004238
.text$x:00004238 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$14 proc near
.text$x:00004238                                         ; DATA XREF: .xdata$x:00004668o
.text$x:00004238                 lea     ecx, [ebp-1C4h] ; this
.text$x:0000423E                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000423E __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$14 endp
.text$x:0000423E
.text$x:00004243
.text$x:00004243 ; =============== S U B R O U T I N E =======================================
.text$x:00004243
.text$x:00004243
.text$x:00004243 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$15 proc near
.text$x:00004243                                         ; DATA XREF: .xdata$x:00004670o
.text$x:00004243                 lea     ecx, [ebp-0E0h] ; this
.text$x:00004249                 jmp     ??1CMethodItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMethodItem::~CMethodItem(void)
.text$x:00004249 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$15 endp
.text$x:00004249
.text$x:0000424E
.text$x:0000424E ; =============== S U B R O U T I N E =======================================
.text$x:0000424E
.text$x:0000424E
.text$x:0000424E __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$16 proc near
.text$x:0000424E                                         ; DATA XREF: .xdata$x:00004678o
.text$x:0000424E                 mov     eax, [ebp-1D4h]
.text$x:00004254                 push    eax             ; void *
.text$x:00004255                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000425A                 pop     ecx
.text$x:0000425B                 retn
.text$x:0000425B __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$16 endp
.text$x:0000425B
.text$x:0000425C
.text$x:0000425C ; =============== S U B R O U T I N E =======================================
.text$x:0000425C
.text$x:0000425C
.text$x:0000425C __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$17 proc near
.text$x:0000425C                                         ; DATA XREF: .xdata$x:00004680o
.text$x:0000425C                 mov     eax, [ebp-1DCh]
.text$x:00004262                 push    eax             ; void *
.text$x:00004263                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004268                 pop     ecx
.text$x:00004269                 retn
.text$x:00004269 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$17 endp
.text$x:00004269
.text$x:0000426A
.text$x:0000426A ; =============== S U B R O U T I N E =======================================
.text$x:0000426A
.text$x:0000426A
.text$x:0000426A __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$18 proc near
.text$x:0000426A                                         ; DATA XREF: .xdata$x:00004688o
.text$x:0000426A                 mov     eax, [ebp-1E4h]
.text$x:00004270                 push    eax             ; void *
.text$x:00004271                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004276                 pop     ecx
.text$x:00004277                 retn
.text$x:00004277 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$18 endp
.text$x:00004277
.text$x:00004278
.text$x:00004278 ; =============== S U B R O U T I N E =======================================
.text$x:00004278
.text$x:00004278
.text$x:00004278 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$19 proc near
.text$x:00004278                                         ; DATA XREF: .xdata$x:00004690o
.text$x:00004278                 mov     eax, [ebp-1ECh]
.text$x:0000427E                 push    eax             ; void *
.text$x:0000427F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004284                 pop     ecx
.text$x:00004285                 retn
.text$x:00004285 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$19 endp
.text$x:00004285
.text$x:00004286
.text$x:00004286 ; =============== S U B R O U T I N E =======================================
.text$x:00004286
.text$x:00004286
.text$x:00004286 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$20 proc near
.text$x:00004286                                         ; DATA XREF: .xdata$x:00004698o
.text$x:00004286                 mov     eax, [ebp-1F4h]
.text$x:0000428C                 push    eax             ; void *
.text$x:0000428D                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004292                 pop     ecx
.text$x:00004293                 retn
.text$x:00004293 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$20 endp
.text$x:00004293
.text$x:00004294
.text$x:00004294 ; =============== S U B R O U T I N E =======================================
.text$x:00004294
.text$x:00004294
.text$x:00004294 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$21 proc near
.text$x:00004294                                         ; DATA XREF: .xdata$x:000046A0o
.text$x:00004294                 mov     eax, [ebp-1FCh]
.text$x:0000429A                 push    eax             ; void *
.text$x:0000429B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000042A0                 pop     ecx
.text$x:000042A1                 retn
.text$x:000042A1 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$21 endp
.text$x:000042A1
.text$x:000042A2
.text$x:000042A2 ; =============== S U B R O U T I N E =======================================
.text$x:000042A2
.text$x:000042A2
.text$x:000042A2 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$22 proc near
.text$x:000042A2                                         ; DATA XREF: .xdata$x:000046A8o
.text$x:000042A2                 lea     ecx, [ebp-0FCh]
.text$x:000042A8                 jmp     ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>(void)
.text$x:000042A8 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$22 endp
.text$x:000042A8
.text$x:000042AD
.text$x:000042AD ; =============== S U B R O U T I N E =======================================
.text$x:000042AD
.text$x:000042AD
.text$x:000042AD __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$23 proc near
.text$x:000042AD                                         ; DATA XREF: .xdata$x:000046B0o
.text$x:000042AD                 lea     ecx, [ebp-118h]
.text$x:000042B3                 jmp     ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>(void)
.text$x:000042B3 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$23 endp
.text$x:000042B3
.text$x:000042B8
.text$x:000042B8 ; =============== S U B R O U T I N E =======================================
.text$x:000042B8
.text$x:000042B8
.text$x:000042B8 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$24 proc near
.text$x:000042B8                                         ; DATA XREF: .xdata$x:000046B8o
.text$x:000042B8                 lea     ecx, [ebp-12Ch]
.text$x:000042BE                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:000042BE __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$24 endp
.text$x:000042BE
.text$x:000042C3
.text$x:000042C3 ; =============== S U B R O U T I N E =======================================
.text$x:000042C3
.text$x:000042C3
.text$x:000042C3 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$25 proc near
.text$x:000042C3                                         ; DATA XREF: .xdata$x:000046C0o
.text$x:000042C3                 mov     eax, [ebp-218h]
.text$x:000042C9                 push    eax             ; void *
.text$x:000042CA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000042CF                 pop     ecx
.text$x:000042D0                 retn
.text$x:000042D0 __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$25 endp
.text$x:000042D0
.text$x:000042D1
.text$x:000042D1 ; =============== S U B R O U T I N E =======================================
.text$x:000042D1
.text$x:000042D1
.text$x:000042D1 __ehhandler$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z proc near
.text$x:000042D1                                         ; DATA XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+5o
.text$x:000042D1
.text$x:000042D1 arg_4           = dword ptr  8
.text$x:000042D1
.text$x:000042D1                 mov     edx, [esp+arg_4]
.text$x:000042D5                 lea     eax, [edx+0Ch]
.text$x:000042D8                 mov     ecx, [edx-29Ch]
.text$x:000042DE                 xor     ecx, eax
.text$x:000042E0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000042E5                 mov     eax, offset __ehfuncinfo$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z
.text$x:000042EA                 jmp     ___CxxFrameHandler3
.text$x:000042EA __ehhandler$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z endp
.text$x:000042EA
.text$x:000042EF
.text$x:000042EF ; =============== S U B R O U T I N E =======================================
.text$x:000042EF
.text$x:000042EF
.text$x:000042EF __unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2 proc near
.text$x:000042EF                                         ; DATA XREF: .xdata$x:00004718o
.text$x:000042EF                 lea     ecx, [ebp-44h]  ; this
.text$x:000042F2                 jmp     ??1CZipDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CZipDecoder::~CZipDecoder(void)
.text$x:000042F2 __unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2 endp
.text$x:000042F2
.text$x:000042F7
.text$x:000042F7 ; =============== S U B R O U T I N E =======================================
.text$x:000042F7
.text$x:000042F7
.text$x:000042F7 __unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3 proc near
.text$x:000042F7                                         ; DATA XREF: .xdata$x:00004720o
.text$x:000042F7                 mov     eax, [ebp-174h]
.text$x:000042FD                 push    eax             ; void *
.text$x:000042FE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004303                 pop     ecx
.text$x:00004304                 retn
.text$x:00004304 __unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3 endp
.text$x:00004304
.text$x:00004305
.text$x:00004305 ; =============== S U B R O U T I N E =======================================
.text$x:00004305
.text$x:00004305
.text$x:00004305 __unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4 proc near
.text$x:00004305                                         ; DATA XREF: .xdata$x:00004728o
.text$x:00004305                 lea     ecx, [ebp-94h]
.text$x:0000430B                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:0000430B __unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4 endp
.text$x:0000430B
.text$x:00004310
.text$x:00004310 ; =============== S U B R O U T I N E =======================================
.text$x:00004310
.text$x:00004310
.text$x:00004310 __unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5 proc near
.text$x:00004310                                         ; DATA XREF: .xdata$x:00004730o
.text$x:00004310                 lea     ecx, [ebp-0A4h]
.text$x:00004316                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00004316 __unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5 endp
.text$x:00004316
.text$x:0000431B
.text$x:0000431B ; =============== S U B R O U T I N E =======================================
.text$x:0000431B
.text$x:0000431B
.text$x:0000431B __unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6 proc near
.text$x:0000431B                                         ; DATA XREF: .xdata$x:00004738o
.text$x:0000431B                 lea     ecx, [ebp-11Ch] ; this
.text$x:00004321                 jmp     ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text$x:00004321 __unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6 endp
.text$x:00004321
.text$x:00004326
.text$x:00004326 ; =============== S U B R O U T I N E =======================================
.text$x:00004326
.text$x:00004326
.text$x:00004326 __ehhandler$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z proc near
.text$x:00004326                                         ; DATA XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5o
.text$x:00004326
.text$x:00004326 arg_4           = dword ptr  8
.text$x:00004326
.text$x:00004326                 mov     edx, [esp+arg_4]
.text$x:0000432A                 lea     eax, [edx+0Ch]
.text$x:0000432D                 mov     ecx, [edx-238h]
.text$x:00004333                 xor     ecx, eax
.text$x:00004335                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000433A                 mov     eax, offset __ehfuncinfo$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text$x:0000433F                 jmp     ___CxxFrameHandler3
.text$x:0000433F __ehhandler$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z endp
.text$x:0000433F
.text$x:0000433F _text$x         ends
.text$x:0000433F
.rdata:00004344 ; ===========================================================================
.rdata:00004344
.rdata:00004344 ; Segment type: Pure data
.rdata:00004344 ; Segment permissions: Read
.rdata:00004344 _rdata          segment dword public 'DATA' use32
.rdata:00004344                 assume cs:_rdata
.rdata:00004344                 ;org 4344h
.rdata:00004344 ; COMDAT (pick largest)
.rdata:00004344                 dd offset ??_R4CHandler@NZip@NArchive@@6BISetProperties@@@ ; const NArchive::NZip::CHandler::`RTTI Complete Object Locator'{for `ISetProperties'}
.rdata:00004348                 public ??_7CHandler@NZip@NArchive@@6BISetProperties@@@
.rdata:00004348 ; const NArchive::NZip::CHandler::`vftable'{for `ISetProperties'}
.rdata:00004348 ??_7CHandler@NZip@NArchive@@6BISetProperties@@@ dd offset ?QueryInterface@CHandler@NZip@NArchive@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00004348                                         ; DATA XREF: NArchive::NZip::CHandler::CHandler(void)+6Co
.rdata:00004348                                         ; [thunk]:NArchive::NZip::CHandler::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:0000434C                 dd offset ?AddRef@CHandler@NZip@NArchive@@W7AGKXZ ; [thunk]:NArchive::NZip::CHandler::AddRef`adjustor{8}' (void)
.rdata:00004350                 dd offset ?Release@CHandler@NZip@NArchive@@W7AGKXZ ; [thunk]:NArchive::NZip::CHandler::Release`adjustor{8}' (void)
.rdata:00004354                 dd offset ?SetProperties@CHandler@NZip@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z ; NArchive::NZip::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)
.rdata:00004354 _rdata          ends
.rdata:00004354
.rdata:00004358 ; ===========================================================================
.rdata:00004358
.rdata:00004358 ; Segment type: Pure data
.rdata:00004358 ; Segment permissions: Read
.rdata:00004358 _rdata          segment dword public 'DATA' use32
.rdata:00004358                 assume cs:_rdata
.rdata:00004358                 ;org 4358h
.rdata:00004358 ; COMDAT (pick largest)
.rdata:00004358                 dd offset ??_R4CHandler@NZip@NArchive@@6BIOutArchive@@@ ; const NArchive::NZip::CHandler::`RTTI Complete Object Locator'{for `IOutArchive'}
.rdata:0000435C                 public ??_7CHandler@NZip@NArchive@@6BIOutArchive@@@
.rdata:0000435C ; const NArchive::NZip::CHandler::`vftable'{for `IOutArchive'}
.rdata:0000435C ??_7CHandler@NZip@NArchive@@6BIOutArchive@@@ dd offset ?QueryInterface@CHandler@NZip@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.rdata:0000435C                                         ; DATA XREF: NArchive::NZip::CHandler::CHandler(void)+62o
.rdata:0000435C                                         ; [thunk]:NArchive::NZip::CHandler::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00004360                 dd offset ?AddRef@CHandler@NZip@NArchive@@W3AGKXZ ; [thunk]:NArchive::NZip::CHandler::AddRef`adjustor{4}' (void)
.rdata:00004364                 dd offset ?Release@CHandler@NZip@NArchive@@W3AGKXZ ; [thunk]:NArchive::NZip::CHandler::Release`adjustor{4}' (void)
.rdata:00004368                 dd offset ?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z ; NArchive::NZip::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)
.rdata:0000436C                 dd offset ?GetFileTimeType@CHandler@NZip@NArchive@@UAGJPAI@Z ; NArchive::NZip::CHandler::GetFileTimeType(uint *)
.rdata:0000436C _rdata          ends
.rdata:0000436C
.rdata:00004370 ; ===========================================================================
.rdata:00004370
.rdata:00004370 ; Segment type: Pure data
.rdata:00004370 ; Segment permissions: Read
.rdata:00004370 _rdata          segment dword public 'DATA' use32
.rdata:00004370                 assume cs:_rdata
.rdata:00004370                 ;org 4370h
.rdata:00004370 ; COMDAT (pick largest)
.rdata:00004370                 dd offset ??_R4CHandler@NZip@NArchive@@6BIInArchive@@@ ; const NArchive::NZip::CHandler::`RTTI Complete Object Locator'{for `IInArchive'}
.rdata:00004374                 public ??_7CHandler@NZip@NArchive@@6BIInArchive@@@
.rdata:00004374 ; const NArchive::NZip::CHandler::`vftable'{for `IInArchive'}
.rdata:00004374 ??_7CHandler@NZip@NArchive@@6BIInArchive@@@ dd offset ?QueryInterface@CHandler@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:00004374                                         ; DATA XREF: NArchive::NZip::CHandler::CHandler(void)+59o
.rdata:00004374                                         ; NArchive::NZip::CHandler::QueryInterface(_GUID const &,void * *)
.rdata:00004378                 dd offset ?AddRef@CHandler@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CHandler::AddRef(void)
.rdata:0000437C                 dd offset ?Release@CHandler@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CHandler::Release(void)
.rdata:00004380                 dd offset ?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ; NArchive::NZip::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)
.rdata:00004384                 dd offset ?Close@CHandler@NZip@NArchive@@UAGJXZ ; NArchive::NZip::CHandler::Close(void)
.rdata:00004388                 dd offset ?GetNumberOfItems@CHandler@NZip@NArchive@@UAGJPAI@Z ; NArchive::NZip::CHandler::GetNumberOfItems(uint *)
.rdata:0000438C                 dd offset ?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)
.rdata:00004390                 dd offset ?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ; NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)
.rdata:00004394                 dd offset ?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ; NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)
.rdata:00004398                 dd offset ?GetNumberOfProperties@CHandler@NZip@NArchive@@UAGJPAI@Z ; NArchive::NZip::CHandler::GetNumberOfProperties(uint *)
.rdata:0000439C                 dd offset ?GetPropertyInfo@CHandler@NZip@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NZip::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)
.rdata:000043A0                 dd offset ?GetNumberOfArchiveProperties@CHandler@NZip@NArchive@@UAGJPAI@Z ; NArchive::NZip::CHandler::GetNumberOfArchiveProperties(uint *)
.rdata:000043A4                 dd offset ?GetArchivePropertyInfo@CHandler@NZip@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NZip::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)
.rdata:000043A4 _rdata          ends
.rdata:000043A4
.xdata$x:000043A8 ; ===========================================================================
.xdata$x:000043A8
.xdata$x:000043A8 ; Segment type: Pure data
.xdata$x:000043A8 ; Segment permissions: Read
.xdata$x:000043A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000043A8                 assume cs:_xdata$x
.xdata$x:000043A8                 ;org 43A8h
.xdata$x:000043A8 __unwindtable$??0CHandler@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:000043A8                                         ; DATA XREF: .xdata$x:000043C8o
.xdata$x:000043A9                 db 0FFh
.xdata$x:000043AA                 db 0FFh
.xdata$x:000043AB                 db 0FFh
.xdata$x:000043AC                 dd offset __unwindfunclet$??0CHandler@NZip@NArchive@@QAE@XZ$0
.xdata$x:000043B0                 db    0
.xdata$x:000043B1                 db    0
.xdata$x:000043B2                 db    0
.xdata$x:000043B3                 db    0
.xdata$x:000043B4                 dd offset __unwindfunclet$??0CHandler@NZip@NArchive@@QAE@XZ$1
.xdata$x:000043B8                 db    1
.xdata$x:000043B9                 db    0
.xdata$x:000043BA                 db    0
.xdata$x:000043BB                 db    0
.xdata$x:000043BC                 dd offset __unwindfunclet$??0CHandler@NZip@NArchive@@QAE@XZ$2
.xdata$x:000043C0 __ehfuncinfo$??0CHandler@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000043C0                                         ; DATA XREF: __ehhandler$??0CHandler@NZip@NArchive@@QAE@XZ+11o
.xdata$x:000043C1                 db    5
.xdata$x:000043C2                 db  93h ; ô
.xdata$x:000043C3                 db  19h
.xdata$x:000043C4                 db    3
.xdata$x:000043C5                 db    0
.xdata$x:000043C6                 db    0
.xdata$x:000043C7                 db    0
.xdata$x:000043C8                 dd offset __unwindtable$??0CHandler@NZip@NArchive@@QAE@XZ
.xdata$x:000043CC                 align 20h
.xdata$x:000043E0                 db    1
.xdata$x:000043E1                 db    0
.xdata$x:000043E2                 db    0
.xdata$x:000043E3                 db    0
.xdata$x:000043E4 __catchsym$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$5 dd offset $SG73954+4
.xdata$x:000043E4                                         ; DATA XREF: .xdata$x:00004404o
.xdata$x:000043E4                                         ; "stem"
.xdata$x:000043E8                 align 10h
.xdata$x:000043F0                 dd offset __catch$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0
.xdata$x:000043F4 __tryblocktable$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z db    0
.xdata$x:000043F4                                         ; DATA XREF: .xdata$x:00004418o
.xdata$x:000043F5                 db    0
.xdata$x:000043F6                 db    0
.xdata$x:000043F7                 db    0
.xdata$x:000043F8                 db    3
.xdata$x:000043F9                 db    0
.xdata$x:000043FA                 db    0
.xdata$x:000043FB                 db    0
.xdata$x:000043FC                 db    4
.xdata$x:000043FD                 db    0
.xdata$x:000043FE                 db    0
.xdata$x:000043FF                 db    0
.xdata$x:00004400                 db    1
.xdata$x:00004401                 db    0
.xdata$x:00004402                 db    0
.xdata$x:00004403                 db    0
.xdata$x:00004404                 dd offset __catchsym$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$5
.xdata$x:00004408 __ehfuncinfo$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z db  22h ; "
.xdata$x:00004408                                         ; DATA XREF: __ehhandler$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z+14o
.xdata$x:00004409                 db    5
.xdata$x:0000440A                 db  93h ; ô
.xdata$x:0000440B                 db  19h
.xdata$x:0000440C                 db    5
.xdata$x:0000440D                 db    0
.xdata$x:0000440E                 db    0
.xdata$x:0000440F                 db    0
.xdata$x:00004410                 dd offset __unwindtable$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.xdata$x:00004414                 db    1
.xdata$x:00004415                 db    0
.xdata$x:00004416                 db    0
.xdata$x:00004417                 db    0
.xdata$x:00004418                 dd offset __tryblocktable$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.xdata$x:0000441C                 db    0
.xdata$x:0000441D                 db    0
.xdata$x:0000441E                 db    0
.xdata$x:0000441F                 db    0
.xdata$x:00004420                 db    0
.xdata$x:00004421                 db    0
.xdata$x:00004422                 db    0
.xdata$x:00004423                 db    0
.xdata$x:00004424                 db    0
.xdata$x:00004425                 db    0
.xdata$x:00004426                 db    0
.xdata$x:00004427                 db    0
.xdata$x:00004428                 db    1
.xdata$x:00004429                 db    0
.xdata$x:0000442A                 db    0
.xdata$x:0000442B                 db    0
.xdata$x:0000442C __unwindtable$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z db 0FFh
.xdata$x:0000442C                                         ; DATA XREF: .xdata$x:00004410o
.xdata$x:0000442D                 db 0FFh
.xdata$x:0000442E                 db 0FFh
.xdata$x:0000442F                 db 0FFh
.xdata$x:00004430                 db    0
.xdata$x:00004431                 db    0
.xdata$x:00004432                 db    0
.xdata$x:00004433                 db    0
.xdata$x:00004434                 db    0
.xdata$x:00004435                 db    0
.xdata$x:00004436                 db    0
.xdata$x:00004437                 db    0
.xdata$x:00004438                 dd offset __unwindfunclet$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$2
.xdata$x:0000443C                 db    1
.xdata$x:0000443D                 db    0
.xdata$x:0000443E                 db    0
.xdata$x:0000443F                 db    0
.xdata$x:00004440                 dd offset __unwindfunclet$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$3
.xdata$x:00004444                 db    2
.xdata$x:00004445                 db    0
.xdata$x:00004446                 db    0
.xdata$x:00004447                 db    0
.xdata$x:00004448                 dd offset __unwindfunclet$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$4
.xdata$x:0000444C                 db 0FFh
.xdata$x:0000444D                 db 0FFh
.xdata$x:0000444E                 db 0FFh
.xdata$x:0000444F                 db 0FFh
.xdata$x:00004450                 db    0
.xdata$x:00004451                 db    0
.xdata$x:00004452                 db    0
.xdata$x:00004453                 db    0
.xdata$x:00004454 __unwindtable$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z db 0FFh
.xdata$x:00004454                                         ; DATA XREF: .xdata$x:0000446Co
.xdata$x:00004455                 db 0FFh
.xdata$x:00004456                 db 0FFh
.xdata$x:00004457                 db 0FFh
.xdata$x:00004458                 dd offset __unwindfunclet$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z$1
.xdata$x:0000445C                 align 10h
.xdata$x:00004460                 dd offset __unwindfunclet$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z$0
.xdata$x:00004464 __ehfuncinfo$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z db  22h ; "
.xdata$x:00004464                                         ; DATA XREF: __ehhandler$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z+11o
.xdata$x:00004465                 db    5
.xdata$x:00004466                 db  93h ; ô
.xdata$x:00004467                 db  19h
.xdata$x:00004468                 db    2
.xdata$x:00004469                 db    0
.xdata$x:0000446A                 db    0
.xdata$x:0000446B                 db    0
.xdata$x:0000446C                 dd offset __unwindtable$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z
.xdata$x:00004470                 db    0
.xdata$x:00004471                 db    0
.xdata$x:00004472                 db    0
.xdata$x:00004473                 db    0
.xdata$x:00004474                 db    0
.xdata$x:00004475                 db    0
.xdata$x:00004476                 db    0
.xdata$x:00004477                 db    0
.xdata$x:00004478                 db    0
.xdata$x:00004479                 db    0
.xdata$x:0000447A                 db    0
.xdata$x:0000447B                 db    0
.xdata$x:0000447C                 db    0
.xdata$x:0000447D                 db    0
.xdata$x:0000447E                 db    0
.xdata$x:0000447F                 db    0
.xdata$x:00004480                 db    0
.xdata$x:00004481                 db    0
.xdata$x:00004482                 db    0
.xdata$x:00004483                 db    0
.xdata$x:00004484                 db    1
.xdata$x:00004485                 db    0
.xdata$x:00004486                 db    0
.xdata$x:00004487                 db    0
.xdata$x:00004488 __catchsym$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$7 dd offset $SG73954+4
.xdata$x:00004488                                         ; DATA XREF: .xdata$x:000044A8o
.xdata$x:00004488                                         ; "stem"
.xdata$x:0000448C                 db    0
.xdata$x:0000448D                 db    0
.xdata$x:0000448E                 db    0
.xdata$x:0000448F                 db    0
.xdata$x:00004490                 db    0
.xdata$x:00004491                 db    0
.xdata$x:00004492                 db    0
.xdata$x:00004493                 db    0
.xdata$x:00004494                 dd offset __catch$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0
.xdata$x:00004498 __tryblocktable$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z db    0
.xdata$x:00004498                                         ; DATA XREF: .xdata$x:000044BCo
.xdata$x:00004499                 db    0
.xdata$x:0000449A                 db    0
.xdata$x:0000449B                 db    0
.xdata$x:0000449C                 db    5
.xdata$x:0000449D                 db    0
.xdata$x:0000449E                 db    0
.xdata$x:0000449F                 db    0
.xdata$x:000044A0                 db    6
.xdata$x:000044A1                 db    0
.xdata$x:000044A2                 db    0
.xdata$x:000044A3                 db    0
.xdata$x:000044A4                 db    1
.xdata$x:000044A5                 db    0
.xdata$x:000044A6                 db    0
.xdata$x:000044A7                 db    0
.xdata$x:000044A8                 dd offset __catchsym$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$7
.xdata$x:000044AC __ehfuncinfo$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z db  22h ; "
.xdata$x:000044AC                                         ; DATA XREF: __ehhandler$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z+1Eo
.xdata$x:000044AD                 db    5
.xdata$x:000044AE                 db  93h ; ô
.xdata$x:000044AF                 db  19h
.xdata$x:000044B0                 db    7
.xdata$x:000044B1                 db    0
.xdata$x:000044B2                 db    0
.xdata$x:000044B3                 db    0
.xdata$x:000044B4                 dd offset __unwindtable$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.xdata$x:000044B8                 db    1
.xdata$x:000044B9                 db    0
.xdata$x:000044BA                 db    0
.xdata$x:000044BB                 db    0
.xdata$x:000044BC                 dd offset __tryblocktable$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.xdata$x:000044C0                 db    0
.xdata$x:000044C1                 db    0
.xdata$x:000044C2                 db    0
.xdata$x:000044C3                 db    0
.xdata$x:000044C4                 db    0
.xdata$x:000044C5                 db    0
.xdata$x:000044C6                 db    0
.xdata$x:000044C7                 db    0
.xdata$x:000044C8                 db    0
.xdata$x:000044C9                 db    0
.xdata$x:000044CA                 db    0
.xdata$x:000044CB                 db    0
.xdata$x:000044CC                 db    1
.xdata$x:000044CD                 db    0
.xdata$x:000044CE                 db    0
.xdata$x:000044CF                 db    0
.xdata$x:000044D0 __unwindtable$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z db 0FFh
.xdata$x:000044D0                                         ; DATA XREF: .xdata$x:000044B4o
.xdata$x:000044D1                 db 0FFh
.xdata$x:000044D2                 db 0FFh
.xdata$x:000044D3                 db 0FFh
.xdata$x:000044D4                 db    0
.xdata$x:000044D5                 db    0
.xdata$x:000044D6                 db    0
.xdata$x:000044D7                 db    0
.xdata$x:000044D8                 db    0
.xdata$x:000044D9                 db    0
.xdata$x:000044DA                 db    0
.xdata$x:000044DB                 db    0
.xdata$x:000044DC                 dd offset __unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2
.xdata$x:000044E0                 db    1
.xdata$x:000044E1                 db    0
.xdata$x:000044E2                 db    0
.xdata$x:000044E3                 db    0
.xdata$x:000044E4                 dd offset __unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3
.xdata$x:000044E8                 db    1
.xdata$x:000044E9                 db    0
.xdata$x:000044EA                 db    0
.xdata$x:000044EB                 db    0
.xdata$x:000044EC                 dd offset __unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$4
.xdata$x:000044F0                 db    3
.xdata$x:000044F1                 db    0
.xdata$x:000044F2                 db    0
.xdata$x:000044F3                 db    0
.xdata$x:000044F4                 dd offset __unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$5
.xdata$x:000044F8                 db    1
.xdata$x:000044F9                 db    0
.xdata$x:000044FA                 db    0
.xdata$x:000044FB                 db    0
.xdata$x:000044FC                 dd offset __unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$6
.xdata$x:00004500                 db 0FFh
.xdata$x:00004501                 db 0FFh
.xdata$x:00004502                 db 0FFh
.xdata$x:00004503                 db 0FFh
.xdata$x:00004504                 db    0
.xdata$x:00004505                 db    0
.xdata$x:00004506                 db    0
.xdata$x:00004507                 db    0
.xdata$x:00004508 __catchsym$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$6 dd offset $SG73954+4
.xdata$x:00004508                                         ; DATA XREF: .xdata$x:00004570o
.xdata$x:00004508                                         ; "stem"
.xdata$x:0000450C                 db    0
.xdata$x:0000450D                 db    0
.xdata$x:0000450E                 db    0
.xdata$x:0000450F                 db    0
.xdata$x:00004510                 db    0
.xdata$x:00004511                 db    0
.xdata$x:00004512                 db    0
.xdata$x:00004513                 db    0
.xdata$x:00004514                 dd offset __catch$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2
.xdata$x:00004518 __catchsym$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$5 dd offset $SG73954+4
.xdata$x:00004518                                         ; DATA XREF: .xdata$x:0000455Co
.xdata$x:00004518                                         ; "stem"
.xdata$x:0000451C                 db    0
.xdata$x:0000451D                 db    0
.xdata$x:0000451E                 db    0
.xdata$x:0000451F                 db    0
.xdata$x:00004520                 db    0
.xdata$x:00004521                 db    0
.xdata$x:00004522                 db    0
.xdata$x:00004523                 db    0
.xdata$x:00004524                 dd offset __catch$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0
.xdata$x:00004528 __ehfuncinfo$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db  22h ; "
.xdata$x:00004528                                         ; DATA XREF: __ehhandler$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z+11o
.xdata$x:00004529                 db    5
.xdata$x:0000452A                 db  93h ; ô
.xdata$x:0000452B                 db  19h
.xdata$x:0000452C                 db    5
.xdata$x:0000452D                 db    0
.xdata$x:0000452E                 db    0
.xdata$x:0000452F                 db    0
.xdata$x:00004530                 dd offset __unwindtable$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.xdata$x:00004534                 db    2
.xdata$x:00004535                 db    0
.xdata$x:00004536                 db    0
.xdata$x:00004537                 db    0
.xdata$x:00004538                 dd offset __tryblocktable$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.xdata$x:0000453C                 db    0
.xdata$x:0000453D                 db    0
.xdata$x:0000453E                 db    0
.xdata$x:0000453F                 db    0
.xdata$x:00004540                 db    0
.xdata$x:00004541                 db    0
.xdata$x:00004542                 db    0
.xdata$x:00004543                 db    0
.xdata$x:00004544                 db    0
.xdata$x:00004545                 db    0
.xdata$x:00004546                 db    0
.xdata$x:00004547                 db    0
.xdata$x:00004548                 db    1
.xdata$x:00004549                 db    0
.xdata$x:0000454A                 db    0
.xdata$x:0000454B                 db    0
.xdata$x:0000454C __tryblocktable$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db    1
.xdata$x:0000454C                                         ; DATA XREF: .xdata$x:00004538o
.xdata$x:0000454D                 db    0
.xdata$x:0000454E                 db    0
.xdata$x:0000454F                 db    0
.xdata$x:00004550                 db    2
.xdata$x:00004551                 db    0
.xdata$x:00004552                 db    0
.xdata$x:00004553                 db    0
.xdata$x:00004554                 db    3
.xdata$x:00004555                 db    0
.xdata$x:00004556                 db    0
.xdata$x:00004557                 db    0
.xdata$x:00004558                 db    1
.xdata$x:00004559                 db    0
.xdata$x:0000455A                 db    0
.xdata$x:0000455B                 db    0
.xdata$x:0000455C                 dd offset __catchsym$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$5
.xdata$x:00004560                 db    0
.xdata$x:00004561                 db    0
.xdata$x:00004562                 db    0
.xdata$x:00004563                 db    0
.xdata$x:00004564                 db    3
.xdata$x:00004565                 db    0
.xdata$x:00004566                 db    0
.xdata$x:00004567                 db    0
.xdata$x:00004568                 db    4
.xdata$x:00004569                 db    0
.xdata$x:0000456A                 db    0
.xdata$x:0000456B                 db    0
.xdata$x:0000456C                 db    1
.xdata$x:0000456D                 db    0
.xdata$x:0000456E                 db    0
.xdata$x:0000456F                 db    0
.xdata$x:00004570                 dd offset __catchsym$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$6
.xdata$x:00004574 __unwindtable$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db 0FFh
.xdata$x:00004574                                         ; DATA XREF: .xdata$x:00004530o
.xdata$x:00004575                 db 0FFh
.xdata$x:00004576                 db 0FFh
.xdata$x:00004577                 db 0FFh
.xdata$x:00004578                 db    0
.xdata$x:00004579                 db    0
.xdata$x:0000457A                 db    0
.xdata$x:0000457B                 db    0
.xdata$x:0000457C                 db    0
.xdata$x:0000457D                 db    0
.xdata$x:0000457E                 db    0
.xdata$x:0000457F                 db    0
.xdata$x:00004580                 db    0
.xdata$x:00004581                 db    0
.xdata$x:00004582                 db    0
.xdata$x:00004583                 db    0
.xdata$x:00004584                 db    1
.xdata$x:00004585                 db    0
.xdata$x:00004586                 db    0
.xdata$x:00004587                 db    0
.xdata$x:00004588                 dd offset __unwindfunclet$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$4
.xdata$x:0000458C                 db    0
.xdata$x:0000458D                 db    0
.xdata$x:0000458E                 db    0
.xdata$x:0000458F                 db    0
.xdata$x:00004590                 db    0
.xdata$x:00004591                 db    0
.xdata$x:00004592                 db    0
.xdata$x:00004593                 db    0
.xdata$x:00004594                 db 0FFh
.xdata$x:00004595                 db 0FFh
.xdata$x:00004596                 db 0FFh
.xdata$x:00004597                 db 0FFh
.xdata$x:00004598                 db    0
.xdata$x:00004599                 db    0
.xdata$x:0000459A                 db    0
.xdata$x:0000459B                 db    0
.xdata$x:0000459C __unwindtable$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000459C                                         ; DATA XREF: .xdata$x:000045B4o
.xdata$x:0000459D                 db 0FFh
.xdata$x:0000459E                 db 0FFh
.xdata$x:0000459F                 db 0FFh
.xdata$x:000045A0                 dd offset __unwindfunclet$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ$0
.xdata$x:000045A4                 align 8
.xdata$x:000045A8                 dd offset __unwindfunclet$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ$1
.xdata$x:000045AC __ehfuncinfo$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000045AC                                         ; DATA XREF: __ehhandler$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ+11o
.xdata$x:000045AD                 db    5
.xdata$x:000045AE                 db  93h ; ô
.xdata$x:000045AF                 db  19h
.xdata$x:000045B0                 db    2
.xdata$x:000045B1                 db    0
.xdata$x:000045B2                 db    0
.xdata$x:000045B3                 db    0
.xdata$x:000045B4                 dd offset __unwindtable$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ
.xdata$x:000045B8                 db    0
.xdata$x:000045B9                 db    0
.xdata$x:000045BA                 db    0
.xdata$x:000045BB                 db    0
.xdata$x:000045BC                 db    0
.xdata$x:000045BD                 db    0
.xdata$x:000045BE                 db    0
.xdata$x:000045BF                 db    0
.xdata$x:000045C0                 db    0
.xdata$x:000045C1                 db    0
.xdata$x:000045C2                 db    0
.xdata$x:000045C3                 db    0
.xdata$x:000045C4                 db    0
.xdata$x:000045C5                 db    0
.xdata$x:000045C6                 db    0
.xdata$x:000045C7                 db    0
.xdata$x:000045C8                 db    0
.xdata$x:000045C9                 db    0
.xdata$x:000045CA                 db    0
.xdata$x:000045CB                 db    0
.xdata$x:000045CC                 db    1
.xdata$x:000045CD                 db    0
.xdata$x:000045CE                 db    0
.xdata$x:000045CF                 db    0
.xdata$x:000045D0 __ehfuncinfo$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z db  22h ; "
.xdata$x:000045D0                                         ; DATA XREF: __ehhandler$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z+14o
.xdata$x:000045D1                 db    5
.xdata$x:000045D2                 db  93h ; ô
.xdata$x:000045D3                 db  19h
.xdata$x:000045D4                 db  1Ah
.xdata$x:000045D5                 db    0
.xdata$x:000045D6                 db    0
.xdata$x:000045D7                 db    0
.xdata$x:000045D8                 dd offset __unwindtable$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z
.xdata$x:000045DC                 db    0
.xdata$x:000045DD                 db    0
.xdata$x:000045DE                 db    0
.xdata$x:000045DF                 db    0
.xdata$x:000045E0                 db    0
.xdata$x:000045E1                 db    0
.xdata$x:000045E2                 db    0
.xdata$x:000045E3                 db    0
.xdata$x:000045E4                 db    0
.xdata$x:000045E5                 db    0
.xdata$x:000045E6                 db    0
.xdata$x:000045E7                 db    0
.xdata$x:000045E8                 db    0
.xdata$x:000045E9                 db    0
.xdata$x:000045EA                 db    0
.xdata$x:000045EB                 db    0
.xdata$x:000045EC                 db    0
.xdata$x:000045ED                 db    0
.xdata$x:000045EE                 db    0
.xdata$x:000045EF                 db    0
.xdata$x:000045F0                 db    1
.xdata$x:000045F1                 db    0
.xdata$x:000045F2                 db    0
.xdata$x:000045F3                 db    0
.xdata$x:000045F4 __unwindtable$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z db 0FFh
.xdata$x:000045F4                                         ; DATA XREF: .xdata$x:000045D8o
.xdata$x:000045F5                 db 0FFh
.xdata$x:000045F6                 db 0FFh
.xdata$x:000045F7                 db 0FFh
.xdata$x:000045F8                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$0
.xdata$x:000045FC                 align 10h
.xdata$x:00004600                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$1
.xdata$x:00004604                 align 8
.xdata$x:00004608                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$2
.xdata$x:0000460C                 db    2
.xdata$x:0000460D                 db    0
.xdata$x:0000460E                 db    0
.xdata$x:0000460F                 db    0
.xdata$x:00004610                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$3
.xdata$x:00004614                 db    3
.xdata$x:00004615                 db    0
.xdata$x:00004616                 db    0
.xdata$x:00004617                 db    0
.xdata$x:00004618                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$4
.xdata$x:0000461C                 db    4
.xdata$x:0000461D                 db    0
.xdata$x:0000461E                 db    0
.xdata$x:0000461F                 db    0
.xdata$x:00004620                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$5
.xdata$x:00004624                 db    4
.xdata$x:00004625                 db    0
.xdata$x:00004626                 db    0
.xdata$x:00004627                 db    0
.xdata$x:00004628                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$6
.xdata$x:0000462C                 db    4
.xdata$x:0000462D                 db    0
.xdata$x:0000462E                 db    0
.xdata$x:0000462F                 db    0
.xdata$x:00004630                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$7
.xdata$x:00004634                 db    4
.xdata$x:00004635                 db    0
.xdata$x:00004636                 db    0
.xdata$x:00004637                 db    0
.xdata$x:00004638                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$8
.xdata$x:0000463C                 db    8
.xdata$x:0000463D                 db    0
.xdata$x:0000463E                 db    0
.xdata$x:0000463F                 db    0
.xdata$x:00004640                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$9
.xdata$x:00004644                 db    9
.xdata$x:00004645                 db    0
.xdata$x:00004646                 db    0
.xdata$x:00004647                 db    0
.xdata$x:00004648                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$10
.xdata$x:0000464C                 db  0Ah
.xdata$x:0000464D                 db    0
.xdata$x:0000464E                 db    0
.xdata$x:0000464F                 db    0
.xdata$x:00004650                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$11
.xdata$x:00004654                 db  0Bh
.xdata$x:00004655                 db    0
.xdata$x:00004656                 db    0
.xdata$x:00004657                 db    0
.xdata$x:00004658                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$12
.xdata$x:0000465C                 db  0Ah
.xdata$x:0000465D                 db    0
.xdata$x:0000465E                 db    0
.xdata$x:0000465F                 db    0
.xdata$x:00004660                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$13
.xdata$x:00004664                 db  0Dh
.xdata$x:00004665                 db    0
.xdata$x:00004666                 db    0
.xdata$x:00004667                 db    0
.xdata$x:00004668                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$14
.xdata$x:0000466C                 db    4
.xdata$x:0000466D                 db    0
.xdata$x:0000466E                 db    0
.xdata$x:0000466F                 db    0
.xdata$x:00004670                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$15
.xdata$x:00004674                 db  0Fh
.xdata$x:00004675                 db    0
.xdata$x:00004676                 db    0
.xdata$x:00004677                 db    0
.xdata$x:00004678                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$16
.xdata$x:0000467C                 db  0Fh
.xdata$x:0000467D                 db    0
.xdata$x:0000467E                 db    0
.xdata$x:0000467F                 db    0
.xdata$x:00004680                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$17
.xdata$x:00004684                 db  0Fh
.xdata$x:00004685                 db    0
.xdata$x:00004686                 db    0
.xdata$x:00004687                 db    0
.xdata$x:00004688                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$18
.xdata$x:0000468C                 db  0Fh
.xdata$x:0000468D                 db    0
.xdata$x:0000468E                 db    0
.xdata$x:0000468F                 db    0
.xdata$x:00004690                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$19
.xdata$x:00004694                 db  0Fh
.xdata$x:00004695                 db    0
.xdata$x:00004696                 db    0
.xdata$x:00004697                 db    0
.xdata$x:00004698                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$20
.xdata$x:0000469C                 db  0Fh
.xdata$x:0000469D                 db    0
.xdata$x:0000469E                 db    0
.xdata$x:0000469F                 db    0
.xdata$x:000046A0                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$21
.xdata$x:000046A4                 db    4
.xdata$x:000046A5                 db    0
.xdata$x:000046A6                 db    0
.xdata$x:000046A7                 db    0
.xdata$x:000046A8                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$22
.xdata$x:000046AC                 db    4
.xdata$x:000046AD                 db    0
.xdata$x:000046AE                 db    0
.xdata$x:000046AF                 db    0
.xdata$x:000046B0                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$23
.xdata$x:000046B4                 db    4
.xdata$x:000046B5                 db    0
.xdata$x:000046B6                 db    0
.xdata$x:000046B7                 db    0
.xdata$x:000046B8                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$24
.xdata$x:000046BC                 db  18h
.xdata$x:000046BD                 db    0
.xdata$x:000046BE                 db    0
.xdata$x:000046BF                 db    0
.xdata$x:000046C0                 dd offset __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$25
.xdata$x:000046C4 __catchsym$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7 dd offset $SG73954+4
.xdata$x:000046C4                                         ; DATA XREF: .xdata$x:000046E4o
.xdata$x:000046C4                                         ; "stem"
.xdata$x:000046C8                 align 10h
.xdata$x:000046D0                 dd offset __catch$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0
.xdata$x:000046D4 __tryblocktable$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db    0
.xdata$x:000046D4                                         ; DATA XREF: .xdata$x:000046F8o
.xdata$x:000046D5                 db    0
.xdata$x:000046D6                 db    0
.xdata$x:000046D7                 db    0
.xdata$x:000046D8                 db    5
.xdata$x:000046D9                 db    0
.xdata$x:000046DA                 db    0
.xdata$x:000046DB                 db    0
.xdata$x:000046DC                 db    6
.xdata$x:000046DD                 db    0
.xdata$x:000046DE                 db    0
.xdata$x:000046DF                 db    0
.xdata$x:000046E0                 db    1
.xdata$x:000046E1                 db    0
.xdata$x:000046E2                 db    0
.xdata$x:000046E3                 db    0
.xdata$x:000046E4                 dd offset __catchsym$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7
.xdata$x:000046E8 __ehfuncinfo$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db  22h ; "
.xdata$x:000046E8                                         ; DATA XREF: __ehhandler$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z+14o
.xdata$x:000046E9                 db    5
.xdata$x:000046EA                 db  93h ; ô
.xdata$x:000046EB                 db  19h
.xdata$x:000046EC                 db    7
.xdata$x:000046ED                 db    0
.xdata$x:000046EE                 db    0
.xdata$x:000046EF                 db    0
.xdata$x:000046F0                 dd offset __unwindtable$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.xdata$x:000046F4                 db    1
.xdata$x:000046F5                 db    0
.xdata$x:000046F6                 db    0
.xdata$x:000046F7                 db    0
.xdata$x:000046F8                 dd offset __tryblocktable$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.xdata$x:000046FC                 db    0
.xdata$x:000046FD                 db    0
.xdata$x:000046FE                 db    0
.xdata$x:000046FF                 db    0
.xdata$x:00004700                 db    0
.xdata$x:00004701                 db    0
.xdata$x:00004702                 db    0
.xdata$x:00004703                 db    0
.xdata$x:00004704                 db    0
.xdata$x:00004705                 db    0
.xdata$x:00004706                 db    0
.xdata$x:00004707                 db    0
.xdata$x:00004708                 db    1
.xdata$x:00004709                 db    0
.xdata$x:0000470A                 db    0
.xdata$x:0000470B                 db    0
.xdata$x:0000470C __unwindtable$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db 0FFh
.xdata$x:0000470C                                         ; DATA XREF: .xdata$x:000046F0o
.xdata$x:0000470D                 db 0FFh
.xdata$x:0000470E                 db 0FFh
.xdata$x:0000470F                 db 0FFh
.xdata$x:00004710                 db    0
.xdata$x:00004711                 db    0
.xdata$x:00004712                 db    0
.xdata$x:00004713                 db    0
.xdata$x:00004714                 db    0
.xdata$x:00004715                 db    0
.xdata$x:00004716                 db    0
.xdata$x:00004717                 db    0
.xdata$x:00004718                 dd offset __unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2
.xdata$x:0000471C                 db    1
.xdata$x:0000471D                 db    0
.xdata$x:0000471E                 db    0
.xdata$x:0000471F                 db    0
.xdata$x:00004720                 dd offset __unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3
.xdata$x:00004724                 db    1
.xdata$x:00004725                 db    0
.xdata$x:00004726                 db    0
.xdata$x:00004727                 db    0
.xdata$x:00004728                 dd offset __unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4
.xdata$x:0000472C                 db    3
.xdata$x:0000472D                 db    0
.xdata$x:0000472E                 db    0
.xdata$x:0000472F                 db    0
.xdata$x:00004730                 dd offset __unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5
.xdata$x:00004734                 db    4
.xdata$x:00004735                 db    0
.xdata$x:00004736                 db    0
.xdata$x:00004737                 db    0
.xdata$x:00004738                 dd offset __unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6
.xdata$x:0000473C                 db 0FFh
.xdata$x:0000473D                 db 0FFh
.xdata$x:0000473E                 db 0FFh
.xdata$x:0000473F                 db 0FFh
.xdata$x:00004740                 db    0
.xdata$x:00004741                 db    0
.xdata$x:00004742                 db    0
.xdata$x:00004743                 db    0
.xdata$x:00004743 _xdata$x        ends
.xdata$x:00004743
.rdata$r:00004744 ; ===========================================================================
.rdata$r:00004744
.rdata$r:00004744 ; Segment type: Pure data
.rdata$r:00004744 ; Segment permissions: Read
.rdata$r:00004744 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004744                 assume cs:_rdata$r
.rdata$r:00004744                 ;org 4744h
.rdata$r:00004744 ; COMDAT (pick any)
.rdata$r:00004744                 public ??_R4CHandler@NZip@NArchive@@6BIInArchive@@@
.rdata$r:00004744 ; const NArchive::NZip::CHandler::`RTTI Complete Object Locator'{for `IInArchive'}
.rdata$r:00004744 ??_R4CHandler@NZip@NArchive@@6BIInArchive@@@ db    0
.rdata$r:00004744                                         ; DATA XREF: .rdata:00004370o
.rdata$r:00004745                 db    0
.rdata$r:00004746                 db    0
.rdata$r:00004747                 db    0
.rdata$r:00004748                 db    0
.rdata$r:00004749                 db    0
.rdata$r:0000474A                 db    0
.rdata$r:0000474B                 db    0
.rdata$r:0000474C                 db    0
.rdata$r:0000474D                 db    0
.rdata$r:0000474E                 db    0
.rdata$r:0000474F                 db    0
.rdata$r:00004750                 dd offset ??_R0?AVCHandler@NZip@NArchive@@@8 ; NArchive::NZip::CHandler `RTTI Type Descriptor'
.rdata$r:00004754                 dd offset ??_R3CHandler@NZip@NArchive@@8 ; NArchive::NZip::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004754 _rdata$r        ends
.rdata$r:00004754
.data:00004758 ; ===========================================================================
.data:00004758
.data:00004758 ; Segment type: Pure data
.data:00004758 ; Segment permissions: Read/Write
.data:00004758 _data           segment dword public 'DATA' use32
.data:00004758                 assume cs:_data
.data:00004758                 ;org 4758h
.data:00004758 ; COMDAT (pick any)
.data:00004758                 public ??_R0?AVCHandler@NZip@NArchive@@@8
.data:00004758 ; class NArchive::NZip::CHandler `RTTI Type Descriptor'
.data:00004758 ??_R0?AVCHandler@NZip@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00004758                                         ; DATA XREF: .rdata$r:00004750o
.data:00004758                                         ; .rdata$r:NArchive::NZip::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00004758                                         ; const type_info::`vftable'
.data:0000475C                 align 10h
.data:00004760 a_?avchandler@n db '.?AVCHandler@NZip@NArchive@@',0
.data:0000477D                 align 10h
.data:0000477D _data           ends
.data:0000477D
.rdata$r:00004780 ; ===========================================================================
.rdata$r:00004780
.rdata$r:00004780 ; Segment type: Pure data
.rdata$r:00004780 ; Segment permissions: Read
.rdata$r:00004780 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004780                 assume cs:_rdata$r
.rdata$r:00004780                 ;org 4780h
.rdata$r:00004780 ; COMDAT (pick any)
.rdata$r:00004780                 public ??_R3CHandler@NZip@NArchive@@8
.rdata$r:00004780 ; NArchive::NZip::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004780 ??_R3CHandler@NZip@NArchive@@8 db    0  ; DATA XREF: .rdata$r:00004754o
.rdata$r:00004780                                         ; .rdata$r:000047CCo ...
.rdata$r:00004781                 db    0
.rdata$r:00004782                 db    0
.rdata$r:00004783                 db    0
.rdata$r:00004784                 db    1
.rdata$r:00004785                 db    0
.rdata$r:00004786                 db    0
.rdata$r:00004787                 db    0
.rdata$r:00004788                 db    8
.rdata$r:00004789                 db    0
.rdata$r:0000478A                 db    0
.rdata$r:0000478B                 db    0
.rdata$r:0000478C                 dd offset ??_R2CHandler@NZip@NArchive@@8 ; NArchive::NZip::CHandler::`RTTI Base Class Array'
.rdata$r:0000478C _rdata$r        ends
.rdata$r:0000478C
.rdata$r:00004790 ; ===========================================================================
.rdata$r:00004790
.rdata$r:00004790 ; Segment type: Pure data
.rdata$r:00004790 ; Segment permissions: Read
.rdata$r:00004790 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004790                 assume cs:_rdata$r
.rdata$r:00004790                 ;org 4790h
.rdata$r:00004790 ; COMDAT (pick any)
.rdata$r:00004790                 public ??_R2CHandler@NZip@NArchive@@8
.rdata$r:00004790 ; NArchive::NZip::CHandler::`RTTI Base Class Array'
.rdata$r:00004790 ??_R2CHandler@NZip@NArchive@@8 dd offset ??_R1A@?0A@EA@CHandler@NZip@NArchive@@8
.rdata$r:00004790                                         ; DATA XREF: .rdata$r:0000478Co
.rdata$r:00004790                                         ; NArchive::NZip::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004794                 dd offset ??_R1A@?0A@EA@IInArchive@@8 ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004798                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:0000479C                 dd offset ??_R13?0A@EA@IOutArchive@@8 ; IOutArchive::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000047A0                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:000047A4                 dd offset ??_R17?0A@EA@ISetProperties@@8 ; ISetProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:000047A8                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:000047AC                 dd offset ??_R1M@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:000047B0                 db    0
.rdata$r:000047B1                 align 4
.rdata$r:000047B1 _rdata$r        ends
.rdata$r:000047B1
.rdata$r:000047B4 ; ===========================================================================
.rdata$r:000047B4
.rdata$r:000047B4 ; Segment type: Pure data
.rdata$r:000047B4 ; Segment permissions: Read
.rdata$r:000047B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000047B4                 assume cs:_rdata$r
.rdata$r:000047B4                 ;org 47B4h
.rdata$r:000047B4 ; COMDAT (pick any)
.rdata$r:000047B4                 public ??_R1A@?0A@EA@CHandler@NZip@NArchive@@8
.rdata$r:000047B4 ; NArchive::NZip::CHandler::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000047B4 ??_R1A@?0A@EA@CHandler@NZip@NArchive@@8 dd offset ??_R0?AVCHandler@NZip@NArchive@@@8
.rdata$r:000047B4                                         ; DATA XREF: .rdata$r:NArchive::NZip::CHandler::`RTTI Base Class Array'o
.rdata$r:000047B4                                         ; NArchive::NZip::CHandler `RTTI Type Descriptor'
.rdata$r:000047B8                 db    7
.rdata$r:000047B9                 db    0
.rdata$r:000047BA                 db    0
.rdata$r:000047BB                 db    0
.rdata$r:000047BC                 db    0
.rdata$r:000047BD                 db    0
.rdata$r:000047BE                 db    0
.rdata$r:000047BF                 db    0
.rdata$r:000047C0                 db 0FFh
.rdata$r:000047C1                 db 0FFh
.rdata$r:000047C2                 db 0FFh
.rdata$r:000047C3                 db 0FFh
.rdata$r:000047C4                 db    0
.rdata$r:000047C5                 db    0
.rdata$r:000047C6                 db    0
.rdata$r:000047C7                 db    0
.rdata$r:000047C8                 db  40h ; @
.rdata$r:000047C9                 db    0
.rdata$r:000047CA                 db    0
.rdata$r:000047CB                 db    0
.rdata$r:000047CC                 dd offset ??_R3CHandler@NZip@NArchive@@8 ; NArchive::NZip::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:000047CC _rdata$r        ends
.rdata$r:000047CC
.rdata$r:000047D0 ; ===========================================================================
.rdata$r:000047D0
.rdata$r:000047D0 ; Segment type: Pure data
.rdata$r:000047D0 ; Segment permissions: Read
.rdata$r:000047D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000047D0                 assume cs:_rdata$r
.rdata$r:000047D0                 ;org 47D0h
.rdata$r:000047D0 ; COMDAT (pick any)
.rdata$r:000047D0                 public ??_R1A@?0A@EA@IInArchive@@8
.rdata$r:000047D0 ; IInArchive::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000047D0 ??_R1A@?0A@EA@IInArchive@@8 dd offset ??_R0?AUIInArchive@@@8
.rdata$r:000047D0                                         ; DATA XREF: .rdata$r:00004794o
.rdata$r:000047D0                                         ; .rdata$r:IInArchive::`RTTI Base Class Array'o
.rdata$r:000047D0                                         ; IInArchive `RTTI Type Descriptor'
.rdata$r:000047D4                 db    1
.rdata$r:000047D5                 db    0
.rdata$r:000047D6                 db    0
.rdata$r:000047D7                 db    0
.rdata$r:000047D8                 db    0
.rdata$r:000047D9                 db    0
.rdata$r:000047DA                 db    0
.rdata$r:000047DB                 db    0
.rdata$r:000047DC                 db 0FFh
.rdata$r:000047DD                 db 0FFh
.rdata$r:000047DE                 db 0FFh
.rdata$r:000047DF                 db 0FFh
.rdata$r:000047E0                 db    0
.rdata$r:000047E1                 db    0
.rdata$r:000047E2                 db    0
.rdata$r:000047E3                 db    0
.rdata$r:000047E4                 db  40h ; @
.rdata$r:000047E5                 db    0
.rdata$r:000047E6                 db    0
.rdata$r:000047E7                 db    0
.rdata$r:000047E8                 dd offset ??_R3IInArchive@@8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000047E8 _rdata$r        ends
.rdata$r:000047E8
.data:000047EC ; ===========================================================================
.data:000047EC
.data:000047EC ; Segment type: Pure data
.data:000047EC ; Segment permissions: Read/Write
.data:000047EC _data           segment dword public 'DATA' use32
.data:000047EC                 assume cs:_data
.data:000047EC                 ;org 47ECh
.data:000047EC ; COMDAT (pick any)
.data:000047EC                 public ??_R0?AUIInArchive@@@8
.data:000047EC ; struct IInArchive `RTTI Type Descriptor'
.data:000047EC ??_R0?AUIInArchive@@@8 dd offset ??_7type_info@@6B@
.data:000047EC                                         ; DATA XREF: .rdata$r:IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000047EC                                         ; .rdata$r:000050C4o
.data:000047EC                                         ; const type_info::`vftable'
.data:000047F0                 db    0
.data:000047F1                 db    0
.data:000047F2                 db    0
.data:000047F3                 db    0
.data:000047F4                 db  2Eh ; .
.data:000047F5                 db  3Fh ; ?
.data:000047F6                 db  41h ; A
.data:000047F7                 db  55h ; U
.data:000047F8                 db  49h ; I
.data:000047F9                 db  49h ; I
.data:000047FA                 db  6Eh ; n
.data:000047FB                 db  41h ; A
.data:000047FC                 db  72h ; r
.data:000047FD                 db  63h ; c
.data:000047FE                 db  68h ; h
.data:000047FF                 db  69h ; i
.data:00004800                 db  76h ; v
.data:00004801                 db  65h ; e
.data:00004802                 db  40h ; @
.data:00004803                 db  40h ; @
.data:00004804                 db    0
.data:00004805                 align 4
.data:00004805 _data           ends
.data:00004805
.rdata$r:00004808 ; ===========================================================================
.rdata$r:00004808
.rdata$r:00004808 ; Segment type: Pure data
.rdata$r:00004808 ; Segment permissions: Read
.rdata$r:00004808 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004808                 assume cs:_rdata$r
.rdata$r:00004808                 ;org 4808h
.rdata$r:00004808 ; COMDAT (pick any)
.rdata$r:00004808                 public ??_R3IInArchive@@8
.rdata$r:00004808 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004808 ??_R3IInArchive@@8 db    0              ; DATA XREF: .rdata$r:000047E8o
.rdata$r:00004808                                         ; .rdata$r:000050C8o
.rdata$r:00004809                 db    0
.rdata$r:0000480A                 db    0
.rdata$r:0000480B                 db    0
.rdata$r:0000480C                 db    0
.rdata$r:0000480D                 db    0
.rdata$r:0000480E                 db    0
.rdata$r:0000480F                 db    0
.rdata$r:00004810                 db    2
.rdata$r:00004811                 db    0
.rdata$r:00004812                 db    0
.rdata$r:00004813                 db    0
.rdata$r:00004814                 dd offset ??_R2IInArchive@@8 ; IInArchive::`RTTI Base Class Array'
.rdata$r:00004814 _rdata$r        ends
.rdata$r:00004814
.rdata$r:00004818 ; ===========================================================================
.rdata$r:00004818
.rdata$r:00004818 ; Segment type: Pure data
.rdata$r:00004818 ; Segment permissions: Read
.rdata$r:00004818 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004818                 assume cs:_rdata$r
.rdata$r:00004818                 ;org 4818h
.rdata$r:00004818 ; COMDAT (pick any)
.rdata$r:00004818                 public ??_R2IInArchive@@8
.rdata$r:00004818 ; IInArchive::`RTTI Base Class Array'
.rdata$r:00004818 ??_R2IInArchive@@8 dd offset ??_R1A@?0A@EA@IInArchive@@8
.rdata$r:00004818                                         ; DATA XREF: .rdata$r:00004814o
.rdata$r:00004818                                         ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000481C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004820                 db    0
.rdata$r:00004821                 align 4
.rdata$r:00004821 _rdata$r        ends
.rdata$r:00004821
.rdata$r:00004824 ; ===========================================================================
.rdata$r:00004824
.rdata$r:00004824 ; Segment type: Pure data
.rdata$r:00004824 ; Segment permissions: Read
.rdata$r:00004824 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004824                 assume cs:_rdata$r
.rdata$r:00004824                 ;org 4824h
.rdata$r:00004824 ; COMDAT (pick any)
.rdata$r:00004824                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00004824 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004824 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00004824                                         ; DATA XREF: .rdata$r:0000481Co
.rdata$r:00004824                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:00004824                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00004828                 align 10h
.rdata$r:00004830                 db 0FFh
.rdata$r:00004831                 db 0FFh
.rdata$r:00004832                 db 0FFh
.rdata$r:00004833                 db 0FFh
.rdata$r:00004834                 db    0
.rdata$r:00004835                 db    0
.rdata$r:00004836                 db    0
.rdata$r:00004837                 db    0
.rdata$r:00004838                 db  40h ; @
.rdata$r:00004839                 db    0
.rdata$r:0000483A                 db    0
.rdata$r:0000483B                 db    0
.rdata$r:0000483C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000483C _rdata$r        ends
.rdata$r:0000483C
.data:00004840 ; ===========================================================================
.data:00004840
.data:00004840 ; Segment type: Pure data
.data:00004840 ; Segment permissions: Read/Write
.data:00004840 _data           segment dword public 'DATA' use32
.data:00004840                 assume cs:_data
.data:00004840                 ;org 4840h
.data:00004840 ; COMDAT (pick any)
.data:00004840                 public ??_R0?AUIUnknown@@@8
.data:00004840 ; struct IUnknown `RTTI Type Descriptor'
.data:00004840 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00004840                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00004840                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00004840                                         ; const type_info::`vftable'
.data:00004844                 align 8
.data:00004848 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:00004857                 align 4
.data:00004857 _data           ends
.data:00004857
.rdata$r:00004858 ; ===========================================================================
.rdata$r:00004858
.rdata$r:00004858 ; Segment type: Pure data
.rdata$r:00004858 ; Segment permissions: Read
.rdata$r:00004858 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004858                 assume cs:_rdata$r
.rdata$r:00004858                 ;org 4858h
.rdata$r:00004858 ; COMDAT (pick any)
.rdata$r:00004858                 public ??_R3IUnknown@@8
.rdata$r:00004858 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004858 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:0000483Co
.rdata$r:00004858                                         ; .rdata$r:00004888o ...
.rdata$r:00004859                 db    0
.rdata$r:0000485A                 db    0
.rdata$r:0000485B                 db    0
.rdata$r:0000485C                 db    0
.rdata$r:0000485D                 db    0
.rdata$r:0000485E                 db    0
.rdata$r:0000485F                 db    0
.rdata$r:00004860                 db    1
.rdata$r:00004861                 db    0
.rdata$r:00004862                 db    0
.rdata$r:00004863                 db    0
.rdata$r:00004864                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00004864 _rdata$r        ends
.rdata$r:00004864
.rdata$r:00004868 ; ===========================================================================
.rdata$r:00004868
.rdata$r:00004868 ; Segment type: Pure data
.rdata$r:00004868 ; Segment permissions: Read
.rdata$r:00004868 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004868                 assume cs:_rdata$r
.rdata$r:00004868                 ;org 4868h
.rdata$r:00004868 ; COMDAT (pick any)
.rdata$r:00004868                 public ??_R2IUnknown@@8
.rdata$r:00004868 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00004868 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00004868                                         ; DATA XREF: .rdata$r:00004864o
.rdata$r:00004868                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000486C                 db    0
.rdata$r:0000486D                 align 10h
.rdata$r:0000486D _rdata$r        ends
.rdata$r:0000486D
.rdata$r:00004870 ; ===========================================================================
.rdata$r:00004870
.rdata$r:00004870 ; Segment type: Pure data
.rdata$r:00004870 ; Segment permissions: Read
.rdata$r:00004870 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004870                 assume cs:_rdata$r
.rdata$r:00004870                 ;org 4870h
.rdata$r:00004870 ; COMDAT (pick any)
.rdata$r:00004870                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00004870 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00004870 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00004870                                         ; DATA XREF: .rdata$r:00004798o
.rdata$r:00004870                                         ; .rdata$r:00006388o ...
.rdata$r:00004870                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00004874                 db    0
.rdata$r:00004875                 db    0
.rdata$r:00004876                 db    0
.rdata$r:00004877                 db    0
.rdata$r:00004878                 db    0
.rdata$r:00004879                 db    0
.rdata$r:0000487A                 db    0
.rdata$r:0000487B                 db    0
.rdata$r:0000487C                 db 0FFh
.rdata$r:0000487D                 db 0FFh
.rdata$r:0000487E                 db 0FFh
.rdata$r:0000487F                 db 0FFh
.rdata$r:00004880                 db    0
.rdata$r:00004881                 db    0
.rdata$r:00004882                 db    0
.rdata$r:00004883                 db    0
.rdata$r:00004884                 db  42h ; B
.rdata$r:00004885                 db    0
.rdata$r:00004886                 db    0
.rdata$r:00004887                 db    0
.rdata$r:00004888                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004888 _rdata$r        ends
.rdata$r:00004888
.rdata$r:0000488C ; ===========================================================================
.rdata$r:0000488C
.rdata$r:0000488C ; Segment type: Pure data
.rdata$r:0000488C ; Segment permissions: Read
.rdata$r:0000488C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000488C                 assume cs:_rdata$r
.rdata$r:0000488C                 ;org 488Ch
.rdata$r:0000488C ; COMDAT (pick any)
.rdata$r:0000488C                 public ??_R13?0A@EA@IOutArchive@@8
.rdata$r:0000488C ; IOutArchive::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:0000488C ??_R13?0A@EA@IOutArchive@@8 dd offset ??_R0?AUIOutArchive@@@8
.rdata$r:0000488C                                         ; DATA XREF: .rdata$r:0000479Co
.rdata$r:0000488C                                         ; IOutArchive `RTTI Type Descriptor'
.rdata$r:00004890                 db    1
.rdata$r:00004891                 db    0
.rdata$r:00004892                 db    0
.rdata$r:00004893                 db    0
.rdata$r:00004894                 db    4
.rdata$r:00004895                 db    0
.rdata$r:00004896                 db    0
.rdata$r:00004897                 db    0
.rdata$r:00004898                 db 0FFh
.rdata$r:00004899                 db 0FFh
.rdata$r:0000489A                 db 0FFh
.rdata$r:0000489B                 db 0FFh
.rdata$r:0000489C                 db    0
.rdata$r:0000489D                 db    0
.rdata$r:0000489E                 db    0
.rdata$r:0000489F                 db    0
.rdata$r:000048A0                 db  40h ; @
.rdata$r:000048A1                 db    0
.rdata$r:000048A2                 db    0
.rdata$r:000048A3                 db    0
.rdata$r:000048A4                 dd offset ??_R3IOutArchive@@8 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000048A4 _rdata$r        ends
.rdata$r:000048A4
.data:000048A8 ; ===========================================================================
.data:000048A8
.data:000048A8 ; Segment type: Pure data
.data:000048A8 ; Segment permissions: Read/Write
.data:000048A8 _data           segment dword public 'DATA' use32
.data:000048A8                 assume cs:_data
.data:000048A8                 ;org 48A8h
.data:000048A8 ; COMDAT (pick any)
.data:000048A8                 public ??_R0?AUIOutArchive@@@8
.data:000048A8 ; struct IOutArchive `RTTI Type Descriptor'
.data:000048A8 ??_R0?AUIOutArchive@@@8 dd offset ??_7type_info@@6B@
.data:000048A8                                         ; DATA XREF: .rdata$r:IOutArchive::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000048A8                                         ; .rdata$r:IOutArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000048A8                                         ; const type_info::`vftable'
.data:000048AC                 align 10h
.data:000048B0 a_?auioutarchiv db '.?AUIOutArchive@@',0
.data:000048C2                 align 4
.data:000048C2 _data           ends
.data:000048C2
.rdata$r:000048C4 ; ===========================================================================
.rdata$r:000048C4
.rdata$r:000048C4 ; Segment type: Pure data
.rdata$r:000048C4 ; Segment permissions: Read
.rdata$r:000048C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000048C4                 assume cs:_rdata$r
.rdata$r:000048C4                 ;org 48C4h
.rdata$r:000048C4 ; COMDAT (pick any)
.rdata$r:000048C4                 public ??_R3IOutArchive@@8
.rdata$r:000048C4 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000048C4 ??_R3IOutArchive@@8 db    0             ; DATA XREF: .rdata$r:000048A4o
.rdata$r:000048C4                                         ; .rdata$r:000048F8o ...
.rdata$r:000048C5                 db    0
.rdata$r:000048C6                 db    0
.rdata$r:000048C7                 db    0
.rdata$r:000048C8                 db    0
.rdata$r:000048C9                 db    0
.rdata$r:000048CA                 db    0
.rdata$r:000048CB                 db    0
.rdata$r:000048CC                 db    2
.rdata$r:000048CD                 db    0
.rdata$r:000048CE                 db    0
.rdata$r:000048CF                 db    0
.rdata$r:000048D0                 dd offset ??_R2IOutArchive@@8 ; IOutArchive::`RTTI Base Class Array'
.rdata$r:000048D0 _rdata$r        ends
.rdata$r:000048D0
.rdata$r:000048D4 ; ===========================================================================
.rdata$r:000048D4
.rdata$r:000048D4 ; Segment type: Pure data
.rdata$r:000048D4 ; Segment permissions: Read
.rdata$r:000048D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000048D4                 assume cs:_rdata$r
.rdata$r:000048D4                 ;org 48D4h
.rdata$r:000048D4 ; COMDAT (pick any)
.rdata$r:000048D4                 public ??_R2IOutArchive@@8
.rdata$r:000048D4 ; IOutArchive::`RTTI Base Class Array'
.rdata$r:000048D4 ??_R2IOutArchive@@8 dd offset ??_R1A@?0A@EA@IOutArchive@@8
.rdata$r:000048D4                                         ; DATA XREF: .rdata$r:000048D0o
.rdata$r:000048D4                                         ; IOutArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000048D8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000048DC                 db    0
.rdata$r:000048DD                 align 10h
.rdata$r:000048DD _rdata$r        ends
.rdata$r:000048DD
.rdata$r:000048E0 ; ===========================================================================
.rdata$r:000048E0
.rdata$r:000048E0 ; Segment type: Pure data
.rdata$r:000048E0 ; Segment permissions: Read
.rdata$r:000048E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000048E0                 assume cs:_rdata$r
.rdata$r:000048E0                 ;org 48E0h
.rdata$r:000048E0 ; COMDAT (pick any)
.rdata$r:000048E0                 public ??_R1A@?0A@EA@IOutArchive@@8
.rdata$r:000048E0 ; IOutArchive::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000048E0 ??_R1A@?0A@EA@IOutArchive@@8 dd offset ??_R0?AUIOutArchive@@@8
.rdata$r:000048E0                                         ; DATA XREF: .rdata$r:IOutArchive::`RTTI Base Class Array'o
.rdata$r:000048E0                                         ; IOutArchive `RTTI Type Descriptor'
.rdata$r:000048E4                 db    1
.rdata$r:000048E5                 db    0
.rdata$r:000048E6                 db    0
.rdata$r:000048E7                 db    0
.rdata$r:000048E8                 db    0
.rdata$r:000048E9                 db    0
.rdata$r:000048EA                 db    0
.rdata$r:000048EB                 db    0
.rdata$r:000048EC                 db 0FFh
.rdata$r:000048ED                 db 0FFh
.rdata$r:000048EE                 db 0FFh
.rdata$r:000048EF                 db 0FFh
.rdata$r:000048F0                 db    0
.rdata$r:000048F1                 db    0
.rdata$r:000048F2                 db    0
.rdata$r:000048F3                 db    0
.rdata$r:000048F4                 db  40h ; @
.rdata$r:000048F5                 db    0
.rdata$r:000048F6                 db    0
.rdata$r:000048F7                 db    0
.rdata$r:000048F8                 dd offset ??_R3IOutArchive@@8 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000048F8 _rdata$r        ends
.rdata$r:000048F8
.rdata$r:000048FC ; ===========================================================================
.rdata$r:000048FC
.rdata$r:000048FC ; Segment type: Pure data
.rdata$r:000048FC ; Segment permissions: Read
.rdata$r:000048FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000048FC                 assume cs:_rdata$r
.rdata$r:000048FC                 ;org 48FCh
.rdata$r:000048FC ; COMDAT (pick any)
.rdata$r:000048FC                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:000048FC ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:000048FC ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000048FC                                         ; DATA XREF: .rdata$r:000047A0o
.rdata$r:000048FC                                         ; .rdata$r:00006390o ...
.rdata$r:000048FC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00004900                 db    0
.rdata$r:00004901                 db    0
.rdata$r:00004902                 db    0
.rdata$r:00004903                 db    0
.rdata$r:00004904                 db    4
.rdata$r:00004905                 db    0
.rdata$r:00004906                 db    0
.rdata$r:00004907                 db    0
.rdata$r:00004908                 db 0FFh
.rdata$r:00004909                 db 0FFh
.rdata$r:0000490A                 db 0FFh
.rdata$r:0000490B                 db 0FFh
.rdata$r:0000490C                 db    0
.rdata$r:0000490D                 db    0
.rdata$r:0000490E                 db    0
.rdata$r:0000490F                 db    0
.rdata$r:00004910                 db  42h ; B
.rdata$r:00004911                 db    0
.rdata$r:00004912                 db    0
.rdata$r:00004913                 db    0
.rdata$r:00004914                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004914 _rdata$r        ends
.rdata$r:00004914
.rdata$r:00004918 ; ===========================================================================
.rdata$r:00004918
.rdata$r:00004918 ; Segment type: Pure data
.rdata$r:00004918 ; Segment permissions: Read
.rdata$r:00004918 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004918                 assume cs:_rdata$r
.rdata$r:00004918                 ;org 4918h
.rdata$r:00004918 ; COMDAT (pick any)
.rdata$r:00004918                 public ??_R17?0A@EA@ISetProperties@@8
.rdata$r:00004918 ; ISetProperties::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00004918 ??_R17?0A@EA@ISetProperties@@8 dd offset ??_R0?AUISetProperties@@@8
.rdata$r:00004918                                         ; DATA XREF: .rdata$r:000047A4o
.rdata$r:00004918                                         ; ISetProperties `RTTI Type Descriptor'
.rdata$r:0000491C                 db    1
.rdata$r:0000491D                 db    0
.rdata$r:0000491E                 db    0
.rdata$r:0000491F                 db    0
.rdata$r:00004920                 db    8
.rdata$r:00004921                 db    0
.rdata$r:00004922                 db    0
.rdata$r:00004923                 db    0
.rdata$r:00004924                 db 0FFh
.rdata$r:00004925                 db 0FFh
.rdata$r:00004926                 db 0FFh
.rdata$r:00004927                 db 0FFh
.rdata$r:00004928                 db    0
.rdata$r:00004929                 db    0
.rdata$r:0000492A                 db    0
.rdata$r:0000492B                 db    0
.rdata$r:0000492C                 db  40h ; @
.rdata$r:0000492D                 db    0
.rdata$r:0000492E                 db    0
.rdata$r:0000492F                 db    0
.rdata$r:00004930                 dd offset ??_R3ISetProperties@@8 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004930 _rdata$r        ends
.rdata$r:00004930
.data:00004934 ; ===========================================================================
.data:00004934
.data:00004934 ; Segment type: Pure data
.data:00004934 ; Segment permissions: Read/Write
.data:00004934 _data           segment dword public 'DATA' use32
.data:00004934                 assume cs:_data
.data:00004934                 ;org 4934h
.data:00004934 ; COMDAT (pick any)
.data:00004934                 public ??_R0?AUISetProperties@@@8
.data:00004934 ; struct ISetProperties `RTTI Type Descriptor'
.data:00004934 ??_R0?AUISetProperties@@@8 dd offset ??_7type_info@@6B@
.data:00004934                                         ; DATA XREF: .rdata$r:ISetProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00004934                                         ; .rdata$r:ISetProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00004934                                         ; const type_info::`vftable'
.data:00004938                 db    0
.data:00004939                 db    0
.data:0000493A                 db    0
.data:0000493B                 db    0
.data:0000493C                 db  2Eh ; .
.data:0000493D                 db  3Fh ; ?
.data:0000493E                 db  41h ; A
.data:0000493F                 db  55h ; U
.data:00004940                 db  49h ; I
.data:00004941                 db  53h ; S
.data:00004942                 db  65h ; e
.data:00004943                 db  74h ; t
.data:00004944                 db  50h ; P
.data:00004945                 db  72h ; r
.data:00004946                 db  6Fh ; o
.data:00004947                 db  70h ; p
.data:00004948                 db  65h ; e
.data:00004949                 db  72h ; r
.data:0000494A                 db  74h ; t
.data:0000494B                 db  69h ; i
.data:0000494C                 db  65h ; e
.data:0000494D                 db  73h ; s
.data:0000494E                 db  40h ; @
.data:0000494F                 db  40h ; @
.data:00004950                 db    0
.data:00004951                 align 4
.data:00004951 _data           ends
.data:00004951
.rdata$r:00004954 ; ===========================================================================
.rdata$r:00004954
.rdata$r:00004954 ; Segment type: Pure data
.rdata$r:00004954 ; Segment permissions: Read
.rdata$r:00004954 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004954                 assume cs:_rdata$r
.rdata$r:00004954                 ;org 4954h
.rdata$r:00004954 ; COMDAT (pick any)
.rdata$r:00004954                 public ??_R3ISetProperties@@8
.rdata$r:00004954 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004954 ??_R3ISetProperties@@8 db    0          ; DATA XREF: .rdata$r:00004930o
.rdata$r:00004954                                         ; .rdata$r:00004988o ...
.rdata$r:00004955                 db    0
.rdata$r:00004956                 db    0
.rdata$r:00004957                 db    0
.rdata$r:00004958                 db    0
.rdata$r:00004959                 db    0
.rdata$r:0000495A                 db    0
.rdata$r:0000495B                 db    0
.rdata$r:0000495C                 db    2
.rdata$r:0000495D                 db    0
.rdata$r:0000495E                 db    0
.rdata$r:0000495F                 db    0
.rdata$r:00004960                 dd offset ??_R2ISetProperties@@8 ; ISetProperties::`RTTI Base Class Array'
.rdata$r:00004960 _rdata$r        ends
.rdata$r:00004960
.rdata$r:00004964 ; ===========================================================================
.rdata$r:00004964
.rdata$r:00004964 ; Segment type: Pure data
.rdata$r:00004964 ; Segment permissions: Read
.rdata$r:00004964 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004964                 assume cs:_rdata$r
.rdata$r:00004964                 ;org 4964h
.rdata$r:00004964 ; COMDAT (pick any)
.rdata$r:00004964                 public ??_R2ISetProperties@@8
.rdata$r:00004964 ; ISetProperties::`RTTI Base Class Array'
.rdata$r:00004964 ??_R2ISetProperties@@8 dd offset ??_R1A@?0A@EA@ISetProperties@@8
.rdata$r:00004964                                         ; DATA XREF: .rdata$r:00004960o
.rdata$r:00004964                                         ; ISetProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004968                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000496C                 db    0
.rdata$r:0000496D                 align 10h
.rdata$r:0000496D _rdata$r        ends
.rdata$r:0000496D
.rdata$r:00004970 ; ===========================================================================
.rdata$r:00004970
.rdata$r:00004970 ; Segment type: Pure data
.rdata$r:00004970 ; Segment permissions: Read
.rdata$r:00004970 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004970                 assume cs:_rdata$r
.rdata$r:00004970                 ;org 4970h
.rdata$r:00004970 ; COMDAT (pick any)
.rdata$r:00004970                 public ??_R1A@?0A@EA@ISetProperties@@8
.rdata$r:00004970 ; ISetProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004970 ??_R1A@?0A@EA@ISetProperties@@8 dd offset ??_R0?AUISetProperties@@@8
.rdata$r:00004970                                         ; DATA XREF: .rdata$r:ISetProperties::`RTTI Base Class Array'o
.rdata$r:00004970                                         ; ISetProperties `RTTI Type Descriptor'
.rdata$r:00004974                 db    1
.rdata$r:00004975                 db    0
.rdata$r:00004976                 db    0
.rdata$r:00004977                 db    0
.rdata$r:00004978                 db    0
.rdata$r:00004979                 db    0
.rdata$r:0000497A                 db    0
.rdata$r:0000497B                 db    0
.rdata$r:0000497C                 db 0FFh
.rdata$r:0000497D                 db 0FFh
.rdata$r:0000497E                 db 0FFh
.rdata$r:0000497F                 db 0FFh
.rdata$r:00004980                 db    0
.rdata$r:00004981                 db    0
.rdata$r:00004982                 db    0
.rdata$r:00004983                 db    0
.rdata$r:00004984                 db  40h ; @
.rdata$r:00004985                 db    0
.rdata$r:00004986                 db    0
.rdata$r:00004987                 db    0
.rdata$r:00004988                 dd offset ??_R3ISetProperties@@8 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004988 _rdata$r        ends
.rdata$r:00004988
.rdata$r:0000498C ; ===========================================================================
.rdata$r:0000498C
.rdata$r:0000498C ; Segment type: Pure data
.rdata$r:0000498C ; Segment permissions: Read
.rdata$r:0000498C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000498C                 assume cs:_rdata$r
.rdata$r:0000498C                 ;org 498Ch
.rdata$r:0000498C ; COMDAT (pick any)
.rdata$r:0000498C                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:0000498C ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:0000498C ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000498C                                         ; DATA XREF: .rdata$r:000047A8o
.rdata$r:0000498C                                         ; .rdata$r:00006398o ...
.rdata$r:0000498C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00004990                 db    0
.rdata$r:00004991                 db    0
.rdata$r:00004992                 db    0
.rdata$r:00004993                 db    0
.rdata$r:00004994                 db    8
.rdata$r:00004995                 db    0
.rdata$r:00004996                 db    0
.rdata$r:00004997                 db    0
.rdata$r:00004998                 db 0FFh
.rdata$r:00004999                 db 0FFh
.rdata$r:0000499A                 db 0FFh
.rdata$r:0000499B                 db 0FFh
.rdata$r:0000499C                 db    0
.rdata$r:0000499D                 db    0
.rdata$r:0000499E                 db    0
.rdata$r:0000499F                 db    0
.rdata$r:000049A0                 db  42h ; B
.rdata$r:000049A1                 db    0
.rdata$r:000049A2                 db    0
.rdata$r:000049A3                 db    0
.rdata$r:000049A4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000049A4 _rdata$r        ends
.rdata$r:000049A4
.rdata$r:000049A8 ; ===========================================================================
.rdata$r:000049A8
.rdata$r:000049A8 ; Segment type: Pure data
.rdata$r:000049A8 ; Segment permissions: Read
.rdata$r:000049A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000049A8                 assume cs:_rdata$r
.rdata$r:000049A8                 ;org 49A8h
.rdata$r:000049A8 ; COMDAT (pick any)
.rdata$r:000049A8                 public ??_R1M@?0A@EA@CMyUnknownImp@@8
.rdata$r:000049A8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:000049A8 ??_R1M@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000049A8                                         ; DATA XREF: .rdata$r:000047ACo
.rdata$r:000049A8                                         ; .rdata$r:000071FCo ...
.rdata$r:000049A8                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000049AC                 align 10h
.rdata$r:000049B0                 db  0Ch
.rdata$r:000049B1                 db    0
.rdata$r:000049B2                 db    0
.rdata$r:000049B3                 db    0
.rdata$r:000049B4                 db 0FFh
.rdata$r:000049B5                 db 0FFh
.rdata$r:000049B6                 db 0FFh
.rdata$r:000049B7                 db 0FFh
.rdata$r:000049B8                 db    0
.rdata$r:000049B9                 db    0
.rdata$r:000049BA                 db    0
.rdata$r:000049BB                 db    0
.rdata$r:000049BC                 db  40h ; @
.rdata$r:000049BD                 db    0
.rdata$r:000049BE                 db    0
.rdata$r:000049BF                 db    0
.rdata$r:000049C0                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000049C0 _rdata$r        ends
.rdata$r:000049C0
.data:000049C4 ; ===========================================================================
.data:000049C4
.data:000049C4 ; Segment type: Pure data
.data:000049C4 ; Segment permissions: Read/Write
.data:000049C4 _data           segment dword public 'DATA' use32
.data:000049C4                 assume cs:_data
.data:000049C4                 ;org 49C4h
.data:000049C4 ; COMDAT (pick any)
.data:000049C4                 public ??_R0?AVCMyUnknownImp@@@8
.data:000049C4 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:000049C4 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:000049C4                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:000049C4                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000049C4                                         ; const type_info::`vftable'
.data:000049C8                 db    0
.data:000049C9                 db    0
.data:000049CA                 db    0
.data:000049CB                 db    0
.data:000049CC                 db  2Eh ; .
.data:000049CD                 db  3Fh ; ?
.data:000049CE                 db  41h ; A
.data:000049CF                 db  56h ; V
.data:000049D0                 db  43h ; C
.data:000049D1                 db  4Dh ; M
.data:000049D2                 db  79h ; y
.data:000049D3                 db  55h ; U
.data:000049D4                 db  6Eh ; n
.data:000049D5                 db  6Bh ; k
.data:000049D6                 db  6Eh ; n
.data:000049D7                 db  6Fh ; o
.data:000049D8                 db  77h ; w
.data:000049D9                 db  6Eh ; n
.data:000049DA                 db  49h ; I
.data:000049DB                 db  6Dh ; m
.data:000049DC                 db  70h ; p
.data:000049DD                 db  40h ; @
.data:000049DE                 db  40h ; @
.data:000049DF                 db    0
.data:000049DF _data           ends
.data:000049DF
.rdata$r:000049E0 ; ===========================================================================
.rdata$r:000049E0
.rdata$r:000049E0 ; Segment type: Pure data
.rdata$r:000049E0 ; Segment permissions: Read
.rdata$r:000049E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000049E0                 assume cs:_rdata$r
.rdata$r:000049E0                 ;org 49E0h
.rdata$r:000049E0 ; COMDAT (pick any)
.rdata$r:000049E0                 public ??_R3CMyUnknownImp@@8
.rdata$r:000049E0 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000049E0 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:000049C0o
.rdata$r:000049E0                                         ; .rdata$r:00004A10o ...
.rdata$r:000049E1                 db    0
.rdata$r:000049E2                 db    0
.rdata$r:000049E3                 db    0
.rdata$r:000049E4                 db    0
.rdata$r:000049E5                 db    0
.rdata$r:000049E6                 db    0
.rdata$r:000049E7                 db    0
.rdata$r:000049E8                 db    1
.rdata$r:000049E9                 db    0
.rdata$r:000049EA                 db    0
.rdata$r:000049EB                 db    0
.rdata$r:000049EC                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000049EC _rdata$r        ends
.rdata$r:000049EC
.rdata$r:000049F0 ; ===========================================================================
.rdata$r:000049F0
.rdata$r:000049F0 ; Segment type: Pure data
.rdata$r:000049F0 ; Segment permissions: Read
.rdata$r:000049F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000049F0                 assume cs:_rdata$r
.rdata$r:000049F0                 ;org 49F0h
.rdata$r:000049F0 ; COMDAT (pick any)
.rdata$r:000049F0                 public ??_R2CMyUnknownImp@@8
.rdata$r:000049F0 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000049F0 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000049F0                                         ; DATA XREF: .rdata$r:000049ECo
.rdata$r:000049F0                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000049F4                 db    0
.rdata$r:000049F5                 align 4
.rdata$r:000049F5 _rdata$r        ends
.rdata$r:000049F5
.rdata$r:000049F8 ; ===========================================================================
.rdata$r:000049F8
.rdata$r:000049F8 ; Segment type: Pure data
.rdata$r:000049F8 ; Segment permissions: Read
.rdata$r:000049F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000049F8                 assume cs:_rdata$r
.rdata$r:000049F8                 ;org 49F8h
.rdata$r:000049F8 ; COMDAT (pick any)
.rdata$r:000049F8                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000049F8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000049F8 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000049F8                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:000049F8                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000049FC                 db    0
.rdata$r:000049FD                 db    0
.rdata$r:000049FE                 db    0
.rdata$r:000049FF                 db    0
.rdata$r:00004A00                 db    0
.rdata$r:00004A01                 db    0
.rdata$r:00004A02                 db    0
.rdata$r:00004A03                 db    0
.rdata$r:00004A04                 db 0FFh
.rdata$r:00004A05                 db 0FFh
.rdata$r:00004A06                 db 0FFh
.rdata$r:00004A07                 db 0FFh
.rdata$r:00004A08                 db    0
.rdata$r:00004A09                 db    0
.rdata$r:00004A0A                 db    0
.rdata$r:00004A0B                 db    0
.rdata$r:00004A0C                 db  40h ; @
.rdata$r:00004A0D                 db    0
.rdata$r:00004A0E                 db    0
.rdata$r:00004A0F                 db    0
.rdata$r:00004A10                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004A10 _rdata$r        ends
.rdata$r:00004A10
.rdata$r:00004A14 ; ===========================================================================
.rdata$r:00004A14
.rdata$r:00004A14 ; Segment type: Pure data
.rdata$r:00004A14 ; Segment permissions: Read
.rdata$r:00004A14 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004A14                 assume cs:_rdata$r
.rdata$r:00004A14                 ;org 4A14h
.rdata$r:00004A14 ; COMDAT (pick any)
.rdata$r:00004A14                 public ??_R4CHandler@NZip@NArchive@@6BIOutArchive@@@
.rdata$r:00004A14 ; const NArchive::NZip::CHandler::`RTTI Complete Object Locator'{for `IOutArchive'}
.rdata$r:00004A14 ??_R4CHandler@NZip@NArchive@@6BIOutArchive@@@ db    0
.rdata$r:00004A14                                         ; DATA XREF: .rdata:00004358o
.rdata$r:00004A15                 db    0
.rdata$r:00004A16                 db    0
.rdata$r:00004A17                 db    0
.rdata$r:00004A18                 db    4
.rdata$r:00004A19                 db    0
.rdata$r:00004A1A                 db    0
.rdata$r:00004A1B                 db    0
.rdata$r:00004A1C                 db    0
.rdata$r:00004A1D                 db    0
.rdata$r:00004A1E                 db    0
.rdata$r:00004A1F                 db    0
.rdata$r:00004A20                 dd offset ??_R0?AVCHandler@NZip@NArchive@@@8 ; NArchive::NZip::CHandler `RTTI Type Descriptor'
.rdata$r:00004A24                 dd offset ??_R3CHandler@NZip@NArchive@@8 ; NArchive::NZip::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004A24 _rdata$r        ends
.rdata$r:00004A24
.rdata$r:00004A28 ; ===========================================================================
.rdata$r:00004A28
.rdata$r:00004A28 ; Segment type: Pure data
.rdata$r:00004A28 ; Segment permissions: Read
.rdata$r:00004A28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004A28                 assume cs:_rdata$r
.rdata$r:00004A28                 ;org 4A28h
.rdata$r:00004A28 ; COMDAT (pick any)
.rdata$r:00004A28                 public ??_R4CHandler@NZip@NArchive@@6BISetProperties@@@
.rdata$r:00004A28 ; const NArchive::NZip::CHandler::`RTTI Complete Object Locator'{for `ISetProperties'}
.rdata$r:00004A28 ??_R4CHandler@NZip@NArchive@@6BISetProperties@@@ db    0
.rdata$r:00004A28                                         ; DATA XREF: .rdata:00004344o
.rdata$r:00004A29                 db    0
.rdata$r:00004A2A                 db    0
.rdata$r:00004A2B                 db    0
.rdata$r:00004A2C                 db    8
.rdata$r:00004A2D                 db    0
.rdata$r:00004A2E                 db    0
.rdata$r:00004A2F                 db    0
.rdata$r:00004A30                 db    0
.rdata$r:00004A31                 db    0
.rdata$r:00004A32                 db    0
.rdata$r:00004A33                 db    0
.rdata$r:00004A34                 dd offset ??_R0?AVCHandler@NZip@NArchive@@@8 ; NArchive::NZip::CHandler `RTTI Type Descriptor'
.rdata$r:00004A38                 dd offset ??_R3CHandler@NZip@NArchive@@8 ; NArchive::NZip::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004A38 _rdata$r        ends
.rdata$r:00004A38
.text:00004A3C ; ===========================================================================
.text:00004A3C
.text:00004A3C ; Segment type: Pure code
.text:00004A3C ; Segment permissions: Read/Execute
.text:00004A3C _text           segment para public 'CODE' use32
.text:00004A3C                 assume cs:_text
.text:00004A3C                 ;org 4A3Ch
.text:00004A3C ; COMDAT (pick any)
.text:00004A3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A3C
.text:00004A3C ; =============== S U B R O U T I N E =======================================
.text:00004A3C
.text:00004A3C ; Attributes: bp-based frame
.text:00004A3C
.text:00004A3C ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00004A3C                 public ??0CMyUnknownImp@@QAE@XZ
.text:00004A3C ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NArchive::NZip::CHandler::CHandler(void)+51p
.text:00004A3C                                         ; NArchive::NZip::CLzmaDecoder::CLzmaDecoder(void)+47p ...
.text:00004A3C
.text:00004A3C var_4           = dword ptr -4
.text:00004A3C
.text:00004A3C                 push    ebp
.text:00004A3D                 mov     ebp, esp
.text:00004A3F                 push    ecx
.text:00004A40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A47                 mov     [ebp+var_4], ecx
.text:00004A4A                 mov     eax, [ebp+var_4]
.text:00004A4D                 mov     dword ptr [eax], 0
.text:00004A53                 mov     eax, [ebp+var_4]
.text:00004A56                 mov     esp, ebp
.text:00004A58                 pop     ebp
.text:00004A59                 retn
.text:00004A59 ??0CMyUnknownImp@@QAE@XZ endp
.text:00004A59
.text:00004A59 ; ---------------------------------------------------------------------------
.text:00004A5A                 align 4
.text:00004A5A _text           ends
.text:00004A5A
.text:00004A5C ; ===========================================================================
.text:00004A5C
.text:00004A5C ; Segment type: Pure code
.text:00004A5C ; Segment permissions: Read/Execute
.text:00004A5C _text           segment para public 'CODE' use32
.text:00004A5C                 assume cs:_text
.text:00004A5C                 ;org 4A5Ch
.text:00004A5C ; COMDAT (pick any)
.text:00004A5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A5C
.text:00004A5C ; =============== S U B R O U T I N E =======================================
.text:00004A5C
.text:00004A5C ; Attributes: bp-based frame
.text:00004A5C
.text:00004A5C ; _DWORD __thiscall NArchive::NZip::CBaseProps::CBaseProps(NArchive::NZip::CBaseProps *__hidden this)
.text:00004A5C                 public ??0CBaseProps@NZip@NArchive@@QAE@XZ
.text:00004A5C ??0CBaseProps@NZip@NArchive@@QAE@XZ proc near
.text:00004A5C                                         ; CODE XREF: NArchive::NZip::CHandler::CHandler(void)+9Dp
.text:00004A5C
.text:00004A5C var_4           = dword ptr -4
.text:00004A5C
.text:00004A5C                 push    ebp
.text:00004A5D                 mov     ebp, esp
.text:00004A5F                 push    ecx
.text:00004A60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A67                 mov     [ebp+var_4], ecx
.text:00004A6A                 mov     ecx, [ebp+var_4] ; this
.text:00004A6D                 call    ??0CMethodProps@@QAE@XZ ; CMethodProps::CMethodProps(void)
.text:00004A72                 mov     eax, [ebp+var_4]
.text:00004A75                 add     esp, 4
.text:00004A78                 cmp     ebp, esp
.text:00004A7A                 call    __RTC_CheckEsp
.text:00004A7F                 mov     esp, ebp
.text:00004A81                 pop     ebp
.text:00004A82                 retn
.text:00004A82 ??0CBaseProps@NZip@NArchive@@QAE@XZ endp
.text:00004A82
.text:00004A82 ; ---------------------------------------------------------------------------
.text:00004A83                 align 4
.text:00004A83 _text           ends
.text:00004A83
.text:00004A84 ; ===========================================================================
.text:00004A84
.text:00004A84 ; Segment type: Pure code
.text:00004A84 ; Segment permissions: Read/Execute
.text:00004A84 _text           segment para public 'CODE' use32
.text:00004A84                 assume cs:_text
.text:00004A84                 ;org 4A84h
.text:00004A84 ; COMDAT (pick any)
.text:00004A84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A84
.text:00004A84 ; =============== S U B R O U T I N E =======================================
.text:00004A84
.text:00004A84 ; Attributes: bp-based frame
.text:00004A84
.text:00004A84 ; _DWORD __thiscall CMethodProps::CMethodProps(CMethodProps *__hidden this)
.text:00004A84                 public ??0CMethodProps@@QAE@XZ
.text:00004A84 ??0CMethodProps@@QAE@XZ proc near       ; CODE XREF: NArchive::NZip::CBaseProps::CBaseProps(void)+11p
.text:00004A84
.text:00004A84 var_4           = dword ptr -4
.text:00004A84
.text:00004A84                 push    ebp
.text:00004A85                 mov     ebp, esp
.text:00004A87                 push    ecx
.text:00004A88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A8F                 mov     [ebp+var_4], ecx
.text:00004A92                 mov     ecx, [ebp+var_4] ; this
.text:00004A95                 call    ??0CProps@@QAE@XZ ; CProps::CProps(void)
.text:00004A9A                 mov     eax, [ebp+var_4]
.text:00004A9D                 add     esp, 4
.text:00004AA0                 cmp     ebp, esp
.text:00004AA2                 call    __RTC_CheckEsp
.text:00004AA7                 mov     esp, ebp
.text:00004AA9                 pop     ebp
.text:00004AAA                 retn
.text:00004AAA ??0CMethodProps@@QAE@XZ endp
.text:00004AAA
.text:00004AAA ; ---------------------------------------------------------------------------
.text:00004AAB                 align 4
.text:00004AAB _text           ends
.text:00004AAB
.text:00004AAC ; ===========================================================================
.text:00004AAC
.text:00004AAC ; Segment type: Pure code
.text:00004AAC ; Segment permissions: Read/Execute
.text:00004AAC _text           segment para public 'CODE' use32
.text:00004AAC                 assume cs:_text
.text:00004AAC                 ;org 4AACh
.text:00004AAC ; COMDAT (pick any)
.text:00004AAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004AAC
.text:00004AAC ; =============== S U B R O U T I N E =======================================
.text:00004AAC
.text:00004AAC ; Attributes: bp-based frame
.text:00004AAC
.text:00004AAC ; _DWORD __thiscall CProps::CProps(CProps *__hidden this)
.text:00004AAC                 public ??0CProps@@QAE@XZ
.text:00004AAC ??0CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::CMethodProps(void)+11p
.text:00004AAC
.text:00004AAC var_4           = dword ptr -4
.text:00004AAC
.text:00004AAC                 push    ebp
.text:00004AAD                 mov     ebp, esp
.text:00004AAF                 push    ecx
.text:00004AB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004AB7                 mov     [ebp+var_4], ecx
.text:00004ABA                 mov     ecx, [ebp+var_4]
.text:00004ABD                 call    ??0?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::CObjectVector<CProp>(void)
.text:00004AC2                 mov     eax, [ebp+var_4]
.text:00004AC5                 add     esp, 4
.text:00004AC8                 cmp     ebp, esp
.text:00004ACA                 call    __RTC_CheckEsp
.text:00004ACF                 mov     esp, ebp
.text:00004AD1                 pop     ebp
.text:00004AD2                 retn
.text:00004AD2 ??0CProps@@QAE@XZ endp
.text:00004AD2
.text:00004AD2 ; ---------------------------------------------------------------------------
.text:00004AD3                 align 4
.text:00004AD3 _text           ends
.text:00004AD3
.text:00004AD4 ; ===========================================================================
.text:00004AD4
.text:00004AD4 ; Segment type: Pure code
.text:00004AD4 ; Segment permissions: Read/Execute
.text:00004AD4 _text           segment para public 'CODE' use32
.text:00004AD4                 assume cs:_text
.text:00004AD4                 ;org 4AD4h
.text:00004AD4 ; COMDAT (pick any)
.text:00004AD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004AD4
.text:00004AD4 ; =============== S U B R O U T I N E =======================================
.text:00004AD4
.text:00004AD4 ; Attributes: bp-based frame
.text:00004AD4
.text:00004AD4 ; _DWORD __thiscall NArchive::NZip::CBaseProps::~CBaseProps(NArchive::NZip::CBaseProps *__hidden this)
.text:00004AD4                 public ??1CBaseProps@NZip@NArchive@@QAE@XZ
.text:00004AD4 ??1CBaseProps@NZip@NArchive@@QAE@XZ proc near
.text:00004AD4                                         ; CODE XREF: __unwindfunclet$??0CHandler@NZip@NArchive@@QAE@XZ$2+9j
.text:00004AD4                                         ; NArchive::NZip::CHandler::~CHandler(void)+3Dp
.text:00004AD4
.text:00004AD4 var_4           = dword ptr -4
.text:00004AD4
.text:00004AD4                 push    ebp
.text:00004AD5                 mov     ebp, esp
.text:00004AD7                 push    ecx
.text:00004AD8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004ADF                 mov     [ebp+var_4], ecx
.text:00004AE2                 mov     ecx, [ebp+var_4] ; this
.text:00004AE5                 call    ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text:00004AEA                 add     esp, 4
.text:00004AED                 cmp     ebp, esp
.text:00004AEF                 call    __RTC_CheckEsp
.text:00004AF4                 mov     esp, ebp
.text:00004AF6                 pop     ebp
.text:00004AF7                 retn
.text:00004AF7 ??1CBaseProps@NZip@NArchive@@QAE@XZ endp
.text:00004AF7
.text:00004AF7 _text           ends
.text:00004AF7
.text:00004AF8 ; ===========================================================================
.text:00004AF8
.text:00004AF8 ; Segment type: Pure code
.text:00004AF8 ; Segment permissions: Read/Execute
.text:00004AF8 _text           segment para public 'CODE' use32
.text:00004AF8                 assume cs:_text
.text:00004AF8                 ;org 4AF8h
.text:00004AF8 ; COMDAT (pick any)
.text:00004AF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004AF8
.text:00004AF8 ; =============== S U B R O U T I N E =======================================
.text:00004AF8
.text:00004AF8 ; Attributes: bp-based frame
.text:00004AF8
.text:00004AF8 ; _DWORD __thiscall CMethodProps::~CMethodProps(CMethodProps *__hidden this)
.text:00004AF8                 public ??1CMethodProps@@QAE@XZ
.text:00004AF8 ??1CMethodProps@@QAE@XZ proc near       ; CODE XREF: NArchive::NZip::CBaseProps::~CBaseProps(void)+11p
.text:00004AF8
.text:00004AF8 var_4           = dword ptr -4
.text:00004AF8
.text:00004AF8                 push    ebp
.text:00004AF9                 mov     ebp, esp
.text:00004AFB                 push    ecx
.text:00004AFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B03                 mov     [ebp+var_4], ecx
.text:00004B06                 mov     ecx, [ebp+var_4] ; this
.text:00004B09                 call    ??1CProps@@QAE@XZ ; CProps::~CProps(void)
.text:00004B0E                 add     esp, 4
.text:00004B11                 cmp     ebp, esp
.text:00004B13                 call    __RTC_CheckEsp
.text:00004B18                 mov     esp, ebp
.text:00004B1A                 pop     ebp
.text:00004B1B                 retn
.text:00004B1B ??1CMethodProps@@QAE@XZ endp
.text:00004B1B
.text:00004B1B _text           ends
.text:00004B1B
.text:00004B1C ; ===========================================================================
.text:00004B1C
.text:00004B1C ; Segment type: Pure code
.text:00004B1C ; Segment permissions: Read/Execute
.text:00004B1C _text           segment para public 'CODE' use32
.text:00004B1C                 assume cs:_text
.text:00004B1C                 ;org 4B1Ch
.text:00004B1C ; COMDAT (pick any)
.text:00004B1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004B1C
.text:00004B1C ; =============== S U B R O U T I N E =======================================
.text:00004B1C
.text:00004B1C ; Attributes: bp-based frame
.text:00004B1C
.text:00004B1C ; _DWORD __thiscall CProps::~CProps(CProps *__hidden this)
.text:00004B1C                 public ??1CProps@@QAE@XZ
.text:00004B1C ??1CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::~CMethodProps(void)+11p
.text:00004B1C
.text:00004B1C var_4           = dword ptr -4
.text:00004B1C
.text:00004B1C                 push    ebp
.text:00004B1D                 mov     ebp, esp
.text:00004B1F                 push    ecx
.text:00004B20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B27                 mov     [ebp+var_4], ecx
.text:00004B2A                 mov     ecx, [ebp+var_4]
.text:00004B2D                 call    ??1?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::~CObjectVector<CProp>(void)
.text:00004B32                 add     esp, 4
.text:00004B35                 cmp     ebp, esp
.text:00004B37                 call    __RTC_CheckEsp
.text:00004B3C                 mov     esp, ebp
.text:00004B3E                 pop     ebp
.text:00004B3F                 retn
.text:00004B3F ??1CProps@@QAE@XZ endp
.text:00004B3F
.text:00004B3F _text           ends
.text:00004B3F
.text:00004B40 ; ===========================================================================
.text:00004B40
.text:00004B40 ; Segment type: Pure code
.text:00004B40 ; Segment permissions: Read/Execute
.text:00004B40 _text           segment para public 'CODE' use32
.text:00004B40                 assume cs:_text
.text:00004B40                 ;org 4B40h
.text:00004B40 ; COMDAT (pick any)
.text:00004B40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004B40
.text:00004B40 ; =============== S U B R O U T I N E =======================================
.text:00004B40
.text:00004B40 ; Attributes: bp-based frame
.text:00004B40
.text:00004B40 ; __int32 __stdcall NArchive::NZip::CHandler::QueryInterface(NArchive::NZip::CHandler *this, const struct _GUID *Buf1, void **)
.text:00004B40                 public ?QueryInterface@CHandler@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00004B40 ?QueryInterface@CHandler@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00004B40                                         ; CODE XREF: [thunk]:NArchive::NZip::CHandler::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00004B40                                         ; [thunk]:NArchive::NZip::CHandler::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j
.text:00004B40                                         ; DATA XREF: ...
.text:00004B40
.text:00004B40 var_8           = dword ptr -8
.text:00004B40 var_4           = dword ptr -4
.text:00004B40 this            = dword ptr  8
.text:00004B40 Buf1            = dword ptr  0Ch
.text:00004B40 arg_8           = dword ptr  10h
.text:00004B40
.text:00004B40                 push    ebp
.text:00004B41                 mov     ebp, esp
.text:00004B43                 sub     esp, 8
.text:00004B46                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004B4D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B54                 mov     eax, [ebp+arg_8]
.text:00004B57                 mov     dword ptr [eax], 0
.text:00004B5D                 push    offset _IID_IUnknown ; Buf2
.text:00004B62                 mov     ecx, [ebp+Buf1]
.text:00004B65                 push    ecx             ; Buf1
.text:00004B66                 call    ___@8           ; __(x,x)
.text:00004B6B                 test    eax, eax
.text:00004B6D                 jz      short loc_4B7C
.text:00004B6F                 mov     edx, [ebp+arg_8]
.text:00004B72                 mov     eax, [ebp+this]
.text:00004B75                 mov     [edx], eax
.text:00004B77                 jmp     loc_4C07
.text:00004B7C ; ---------------------------------------------------------------------------
.text:00004B7C
.text:00004B7C loc_4B7C:                               ; CODE XREF: NArchive::NZip::CHandler::QueryInterface(_GUID const &,void * *)+2Dj
.text:00004B7C                 push    offset _IID_IInArchive ; Buf2
.text:00004B81                 mov     ecx, [ebp+Buf1]
.text:00004B84                 push    ecx             ; Buf1
.text:00004B85                 call    ___@8           ; __(x,x)
.text:00004B8A                 test    eax, eax
.text:00004B8C                 jz      short loc_4B98
.text:00004B8E                 mov     edx, [ebp+arg_8]
.text:00004B91                 mov     eax, [ebp+this]
.text:00004B94                 mov     [edx], eax
.text:00004B96                 jmp     short loc_4C07
.text:00004B98 ; ---------------------------------------------------------------------------
.text:00004B98
.text:00004B98 loc_4B98:                               ; CODE XREF: NArchive::NZip::CHandler::QueryInterface(_GUID const &,void * *)+4Cj
.text:00004B98                 push    offset _IID_IOutArchive ; Buf2
.text:00004B9D                 mov     ecx, [ebp+Buf1]
.text:00004BA0                 push    ecx             ; Buf1
.text:00004BA1                 call    ___@8           ; __(x,x)
.text:00004BA6                 test    eax, eax
.text:00004BA8                 jz      short loc_4BCC
.text:00004BAA                 cmp     [ebp+this], 0
.text:00004BAE                 jz      short loc_4BBB
.text:00004BB0                 mov     edx, [ebp+this]
.text:00004BB3                 add     edx, 4
.text:00004BB6                 mov     [ebp+var_4], edx
.text:00004BB9                 jmp     short loc_4BC2
.text:00004BBB ; ---------------------------------------------------------------------------
.text:00004BBB
.text:00004BBB loc_4BBB:                               ; CODE XREF: NArchive::NZip::CHandler::QueryInterface(_GUID const &,void * *)+6Ej
.text:00004BBB                 mov     [ebp+var_4], 0
.text:00004BC2
.text:00004BC2 loc_4BC2:                               ; CODE XREF: NArchive::NZip::CHandler::QueryInterface(_GUID const &,void * *)+79j
.text:00004BC2                 mov     eax, [ebp+arg_8]
.text:00004BC5                 mov     ecx, [ebp+var_4]
.text:00004BC8                 mov     [eax], ecx
.text:00004BCA                 jmp     short loc_4C07
.text:00004BCC ; ---------------------------------------------------------------------------
.text:00004BCC
.text:00004BCC loc_4BCC:                               ; CODE XREF: NArchive::NZip::CHandler::QueryInterface(_GUID const &,void * *)+68j
.text:00004BCC                 push    offset _IID_ISetProperties ; Buf2
.text:00004BD1                 mov     edx, [ebp+Buf1]
.text:00004BD4                 push    edx             ; Buf1
.text:00004BD5                 call    ___@8           ; __(x,x)
.text:00004BDA                 test    eax, eax
.text:00004BDC                 jz      short loc_4C00
.text:00004BDE                 cmp     [ebp+this], 0
.text:00004BE2                 jz      short loc_4BEF
.text:00004BE4                 mov     eax, [ebp+this]
.text:00004BE7                 add     eax, 8
.text:00004BEA                 mov     [ebp+var_8], eax
.text:00004BED                 jmp     short loc_4BF6
.text:00004BEF ; ---------------------------------------------------------------------------
.text:00004BEF
.text:00004BEF loc_4BEF:                               ; CODE XREF: NArchive::NZip::CHandler::QueryInterface(_GUID const &,void * *)+A2j
.text:00004BEF                 mov     [ebp+var_8], 0
.text:00004BF6
.text:00004BF6 loc_4BF6:                               ; CODE XREF: NArchive::NZip::CHandler::QueryInterface(_GUID const &,void * *)+ADj
.text:00004BF6                 mov     ecx, [ebp+arg_8]
.text:00004BF9                 mov     edx, [ebp+var_8]
.text:00004BFC                 mov     [ecx], edx
.text:00004BFE                 jmp     short loc_4C07
.text:00004C00 ; ---------------------------------------------------------------------------
.text:00004C00
.text:00004C00 loc_4C00:                               ; CODE XREF: NArchive::NZip::CHandler::QueryInterface(_GUID const &,void * *)+9Cj
.text:00004C00                 mov     eax, 80004002h
.text:00004C05                 jmp     short loc_4C18
.text:00004C07 ; ---------------------------------------------------------------------------
.text:00004C07
.text:00004C07 loc_4C07:                               ; CODE XREF: NArchive::NZip::CHandler::QueryInterface(_GUID const &,void * *)+37j
.text:00004C07                                         ; NArchive::NZip::CHandler::QueryInterface(_GUID const &,void * *)+56j ...
.text:00004C07                 mov     eax, [ebp+this]
.text:00004C0A                 mov     ecx, [eax+0Ch]
.text:00004C0D                 add     ecx, 1
.text:00004C10                 mov     edx, [ebp+this]
.text:00004C13                 mov     [edx+0Ch], ecx
.text:00004C16                 xor     eax, eax
.text:00004C18
.text:00004C18 loc_4C18:                               ; CODE XREF: NArchive::NZip::CHandler::QueryInterface(_GUID const &,void * *)+C5j
.text:00004C18                 add     esp, 8
.text:00004C1B                 cmp     ebp, esp
.text:00004C1D                 call    __RTC_CheckEsp
.text:00004C22                 mov     esp, ebp
.text:00004C24                 pop     ebp
.text:00004C25                 retn    0Ch
.text:00004C25 ?QueryInterface@CHandler@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:00004C25
.text:00004C25 _text           ends
.text:00004C25
.text:00004C28 ; ===========================================================================
.text:00004C28
.text:00004C28 ; Segment type: Pure code
.text:00004C28 ; Segment permissions: Read/Execute
.text:00004C28 _text           segment para public 'CODE' use32
.text:00004C28                 assume cs:_text
.text:00004C28                 ;org 4C28h
.text:00004C28 ; COMDAT (pick any)
.text:00004C28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004C28
.text:00004C28 ; =============== S U B R O U T I N E =======================================
.text:00004C28
.text:00004C28 ; Attributes: bp-based frame
.text:00004C28
.text:00004C28 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00004C28                 public ___@8
.text:00004C28 ___@8           proc near               ; CODE XREF: NArchive::NZip::CHandler::QueryInterface(_GUID const &,void * *)+26p
.text:00004C28                                         ; NArchive::NZip::CHandler::QueryInterface(_GUID const &,void * *)+45p ...
.text:00004C28
.text:00004C28 Buf1            = dword ptr  8
.text:00004C28 Buf2            = dword ptr  0Ch
.text:00004C28
.text:00004C28                 push    ebp
.text:00004C29                 mov     ebp, esp
.text:00004C2B                 mov     eax, [ebp+Buf2]
.text:00004C2E                 push    eax             ; Buf2
.text:00004C2F                 mov     ecx, [ebp+Buf1]
.text:00004C32                 push    ecx             ; Buf1
.text:00004C33                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00004C38                 cmp     ebp, esp
.text:00004C3A                 call    __RTC_CheckEsp
.text:00004C3F                 pop     ebp
.text:00004C40                 retn    8
.text:00004C40 ___@8           endp
.text:00004C40
.text:00004C40 ; ---------------------------------------------------------------------------
.text:00004C43                 align 4
.text:00004C43 _text           ends
.text:00004C43
.text:00004C44 ; ===========================================================================
.text:00004C44
.text:00004C44 ; Segment type: Pure code
.text:00004C44 ; Segment permissions: Read/Execute
.text:00004C44 _text           segment para public 'CODE' use32
.text:00004C44                 assume cs:_text
.text:00004C44                 ;org 4C44h
.text:00004C44 ; COMDAT (pick any)
.text:00004C44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004C44
.text:00004C44 ; =============== S U B R O U T I N E =======================================
.text:00004C44
.text:00004C44 ; Attributes: bp-based frame
.text:00004C44
.text:00004C44 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00004C44                 public _IsEqualGUID@8
.text:00004C44 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00004C44
.text:00004C44 Buf1            = dword ptr  8
.text:00004C44 Buf2            = dword ptr  0Ch
.text:00004C44
.text:00004C44                 push    ebp
.text:00004C45                 mov     ebp, esp
.text:00004C47                 push    10h             ; Size
.text:00004C49                 mov     eax, [ebp+Buf2]
.text:00004C4C                 push    eax             ; Buf2
.text:00004C4D                 mov     ecx, [ebp+Buf1]
.text:00004C50                 push    ecx             ; Buf1
.text:00004C51                 call    _memcmp
.text:00004C56                 add     esp, 0Ch
.text:00004C59                 neg     eax
.text:00004C5B                 sbb     eax, eax
.text:00004C5D                 add     eax, 1
.text:00004C60                 cmp     ebp, esp
.text:00004C62                 call    __RTC_CheckEsp
.text:00004C67                 pop     ebp
.text:00004C68                 retn    8
.text:00004C68 _IsEqualGUID@8  endp
.text:00004C68
.text:00004C68 ; ---------------------------------------------------------------------------
.text:00004C6B                 align 4
.text:00004C6B _text           ends
.text:00004C6B
.text:00004C6C ; ===========================================================================
.text:00004C6C
.text:00004C6C ; Segment type: Pure code
.text:00004C6C ; Segment permissions: Read/Execute
.text:00004C6C _text           segment para public 'CODE' use32
.text:00004C6C                 assume cs:_text
.text:00004C6C                 ;org 4C6Ch
.text:00004C6C ; COMDAT (pick any)
.text:00004C6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004C6C
.text:00004C6C ; =============== S U B R O U T I N E =======================================
.text:00004C6C
.text:00004C6C ; Attributes: bp-based frame
.text:00004C6C
.text:00004C6C ; unsigned __int32 __stdcall NArchive::NZip::CHandler::AddRef(NArchive::NZip::CHandler *this)
.text:00004C6C                 public ?AddRef@CHandler@NZip@NArchive@@UAGKXZ
.text:00004C6C ?AddRef@CHandler@NZip@NArchive@@UAGKXZ proc near
.text:00004C6C                                         ; CODE XREF: [thunk]:NArchive::NZip::CHandler::AddRef`adjustor{4}' (void)+5j
.text:00004C6C                                         ; [thunk]:NArchive::NZip::CHandler::AddRef`adjustor{8}' (void)+5j
.text:00004C6C                                         ; DATA XREF: ...
.text:00004C6C
.text:00004C6C var_4           = dword ptr -4
.text:00004C6C this            = dword ptr  8
.text:00004C6C
.text:00004C6C                 push    ebp
.text:00004C6D                 mov     ebp, esp
.text:00004C6F                 push    ecx
.text:00004C70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C77                 mov     eax, [ebp+this]
.text:00004C7A                 mov     ecx, [eax+0Ch]
.text:00004C7D                 add     ecx, 1
.text:00004C80                 mov     [ebp+var_4], ecx
.text:00004C83                 mov     edx, [ebp+this]
.text:00004C86                 mov     eax, [ebp+var_4]
.text:00004C89                 mov     [edx+0Ch], eax
.text:00004C8C                 mov     eax, [ebp+var_4]
.text:00004C8F                 mov     esp, ebp
.text:00004C91                 pop     ebp
.text:00004C92                 retn    4
.text:00004C92 ?AddRef@CHandler@NZip@NArchive@@UAGKXZ endp
.text:00004C92
.text:00004C92 ; ---------------------------------------------------------------------------
.text:00004C95                 align 4
.text:00004C95 _text           ends
.text:00004C95
.text:00004C98 ; ===========================================================================
.text:00004C98
.text:00004C98 ; Segment type: Pure code
.text:00004C98 ; Segment permissions: Read/Execute
.text:00004C98 _text           segment para public 'CODE' use32
.text:00004C98                 assume cs:_text
.text:00004C98                 ;org 4C98h
.text:00004C98 ; COMDAT (pick any)
.text:00004C98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004C98
.text:00004C98 ; =============== S U B R O U T I N E =======================================
.text:00004C98
.text:00004C98 ; Attributes: bp-based frame
.text:00004C98
.text:00004C98 ; unsigned __int32 __stdcall NArchive::NZip::CHandler::Release(NArchive::NZip::CHandler *this)
.text:00004C98                 public ?Release@CHandler@NZip@NArchive@@UAGKXZ
.text:00004C98 ?Release@CHandler@NZip@NArchive@@UAGKXZ proc near
.text:00004C98                                         ; CODE XREF: [thunk]:NArchive::NZip::CHandler::Release`adjustor{8}' (void)+5j
.text:00004C98                                         ; [thunk]:NArchive::NZip::CHandler::Release`adjustor{4}' (void)+5j
.text:00004C98                                         ; DATA XREF: ...
.text:00004C98
.text:00004C98 var_10          = dword ptr -10h
.text:00004C98 var_C           = dword ptr -0Ch
.text:00004C98 var_8           = dword ptr -8
.text:00004C98 var_4           = dword ptr -4
.text:00004C98 this            = dword ptr  8
.text:00004C98
.text:00004C98                 push    ebp
.text:00004C99                 mov     ebp, esp
.text:00004C9B                 sub     esp, 10h
.text:00004C9E                 mov     eax, 0CCCCCCCCh
.text:00004CA3                 mov     [ebp+var_10], eax
.text:00004CA6                 mov     [ebp+var_C], eax
.text:00004CA9                 mov     [ebp+var_8], eax
.text:00004CAC                 mov     [ebp+var_4], eax
.text:00004CAF                 mov     eax, [ebp+this]
.text:00004CB2                 mov     ecx, [eax+0Ch]
.text:00004CB5                 sub     ecx, 1
.text:00004CB8                 mov     [ebp+var_C], ecx
.text:00004CBB                 mov     edx, [ebp+this]
.text:00004CBE                 mov     eax, [ebp+var_C]
.text:00004CC1                 mov     [edx+0Ch], eax
.text:00004CC4                 cmp     [ebp+var_C], 0
.text:00004CC8                 jz      short loc_4CD2
.text:00004CCA                 mov     ecx, [ebp+this]
.text:00004CCD                 mov     eax, [ecx+0Ch]
.text:00004CD0                 jmp     short loc_4CFC
.text:00004CD2 ; ---------------------------------------------------------------------------
.text:00004CD2
.text:00004CD2 loc_4CD2:                               ; CODE XREF: NArchive::NZip::CHandler::Release(void)+30j
.text:00004CD2                 mov     edx, [ebp+this]
.text:00004CD5                 mov     [ebp+var_8], edx
.text:00004CD8                 mov     eax, [ebp+var_8]
.text:00004CDB                 mov     [ebp+var_4], eax
.text:00004CDE                 cmp     [ebp+var_4], 0
.text:00004CE2                 jz      short loc_4CF3
.text:00004CE4                 push    1
.text:00004CE6                 mov     ecx, [ebp+var_4]
.text:00004CE9                 call    ??_GCHandler@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CHandler::`scalar deleting destructor'(uint)
.text:00004CEE                 mov     [ebp+var_10], eax
.text:00004CF1                 jmp     short loc_4CFA
.text:00004CF3 ; ---------------------------------------------------------------------------
.text:00004CF3
.text:00004CF3 loc_4CF3:                               ; CODE XREF: NArchive::NZip::CHandler::Release(void)+4Aj
.text:00004CF3                 mov     [ebp+var_10], 0
.text:00004CFA
.text:00004CFA loc_4CFA:                               ; CODE XREF: NArchive::NZip::CHandler::Release(void)+59j
.text:00004CFA                 xor     eax, eax
.text:00004CFC
.text:00004CFC loc_4CFC:                               ; CODE XREF: NArchive::NZip::CHandler::Release(void)+38j
.text:00004CFC                 add     esp, 10h
.text:00004CFF                 cmp     ebp, esp
.text:00004D01                 call    __RTC_CheckEsp
.text:00004D06                 mov     esp, ebp
.text:00004D08                 pop     ebp
.text:00004D09                 retn    4
.text:00004D09 ?Release@CHandler@NZip@NArchive@@UAGKXZ endp
.text:00004D09
.text:00004D09 _text           ends
.text:00004D09
.text:00004D0C ; ===========================================================================
.text:00004D0C
.text:00004D0C ; Segment type: Pure code
.text:00004D0C ; Segment permissions: Read/Execute
.text:00004D0C _text           segment para public 'CODE' use32
.text:00004D0C                 assume cs:_text
.text:00004D0C                 ;org 4D0Ch
.text:00004D0C ; COMDAT (pick any)
.text:00004D0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004D0C
.text:00004D0C ; =============== S U B R O U T I N E =======================================
.text:00004D0C
.text:00004D0C ; Attributes: bp-based frame
.text:00004D0C
.text:00004D0C ; void __thiscall NArchive::NZip::CHandler::InitMethodProps(NArchive::NZip::CHandler *__hidden this)
.text:00004D0C                 public ?InitMethodProps@CHandler@NZip@NArchive@@AAEXXZ
.text:00004D0C ?InitMethodProps@CHandler@NZip@NArchive@@AAEXXZ proc near
.text:00004D0C                                         ; CODE XREF: NArchive::NZip::CHandler::CHandler(void)+A9p
.text:00004D0C
.text:00004D0C var_4           = dword ptr -4
.text:00004D0C
.text:00004D0C                 push    ebp
.text:00004D0D                 mov     ebp, esp
.text:00004D0F                 push    ecx
.text:00004D10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D17                 mov     [ebp+var_4], ecx
.text:00004D1A                 mov     ecx, [ebp+var_4]
.text:00004D1D                 add     ecx, 0A8h ; '¿' ; this
.text:00004D23                 call    ?Init@CBaseProps@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CBaseProps::Init(void)
.text:00004D28                 mov     eax, [ebp+var_4]
.text:00004D2B                 mov     dword ptr [eax+0C0h], 0FFFFFFFFh
.text:00004D35                 mov     ecx, [ebp+var_4]
.text:00004D38                 mov     byte ptr [ecx+0C4h], 0
.text:00004D3F                 mov     edx, [ebp+var_4]
.text:00004D42                 mov     byte ptr [edx+0C5h], 1
.text:00004D49                 mov     eax, [ebp+var_4]
.text:00004D4C                 mov     byte ptr [eax+0C6h], 0
.text:00004D53                 mov     ecx, [ebp+var_4]
.text:00004D56                 mov     byte ptr [ecx+0C7h], 0
.text:00004D5D                 mov     edx, [ebp+var_4]
.text:00004D60                 mov     byte ptr [edx+0C8h], 0
.text:00004D67                 mov     eax, [ebp+var_4]
.text:00004D6A                 mov     byte ptr [eax+0C9h], 0
.text:00004D71                 mov     ecx, [ebp+var_4]
.text:00004D74                 mov     dword ptr [ecx+0CCh], 1
.text:00004D7E                 add     esp, 4
.text:00004D81                 cmp     ebp, esp
.text:00004D83                 call    __RTC_CheckEsp
.text:00004D88                 mov     esp, ebp
.text:00004D8A                 pop     ebp
.text:00004D8B                 retn
.text:00004D8B ?InitMethodProps@CHandler@NZip@NArchive@@AAEXXZ endp
.text:00004D8B
.text:00004D8B _text           ends
.text:00004D8B
.text:00004D8C ; ===========================================================================
.text:00004D8C
.text:00004D8C ; Segment type: Pure code
.text:00004D8C ; Segment permissions: Read/Execute
.text:00004D8C _text           segment para public 'CODE' use32
.text:00004D8C                 assume cs:_text
.text:00004D8C                 ;org 4D8Ch
.text:00004D8C ; COMDAT (pick any)
.text:00004D8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004D8C
.text:00004D8C ; =============== S U B R O U T I N E =======================================
.text:00004D8C
.text:00004D8C ; Attributes: bp-based frame
.text:00004D8C
.text:00004D8C ; void __thiscall NArchive::NZip::CBaseProps::Init(NArchive::NZip::CBaseProps *this)
.text:00004D8C                 public ?Init@CBaseProps@NZip@NArchive@@QAEXXZ
.text:00004D8C ?Init@CBaseProps@NZip@NArchive@@QAEXXZ proc near
.text:00004D8C                                         ; CODE XREF: NArchive::NZip::CHandler::InitMethodProps(void)+17p
.text:00004D8C
.text:00004D8C var_4           = dword ptr -4
.text:00004D8C
.text:00004D8C                 push    ebp
.text:00004D8D                 mov     ebp, esp
.text:00004D8F                 push    ecx             ; this
.text:00004D90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D97                 mov     [ebp+var_4], ecx
.text:00004D9A                 mov     ecx, [ebp+var_4] ; this
.text:00004D9D                 call    ?Clear@CProps@@QAEXXZ ; CProps::Clear(void)
.text:00004DA2                 mov     eax, [ebp+var_4]
.text:00004DA5                 mov     dword ptr [eax+0Ch], 0FFFFFFFFh
.text:00004DAC                 call    ?GetNumberOfProcessors@NSystem@NWindows@@YGIXZ ; NWindows::NSystem::GetNumberOfProcessors(void)
.text:00004DB1                 mov     ecx, [ebp+var_4]
.text:00004DB4                 mov     [ecx+10h], eax
.text:00004DB7                 mov     edx, [ebp+var_4]
.text:00004DBA                 mov     byte ptr [edx+14h], 0
.text:00004DBE                 mov     eax, [ebp+var_4]
.text:00004DC1                 mov     byte ptr [eax+15h], 0
.text:00004DC5                 mov     ecx, [ebp+var_4]
.text:00004DC8                 mov     byte ptr [ecx+16h], 3
.text:00004DCC                 add     esp, 4
.text:00004DCF                 cmp     ebp, esp
.text:00004DD1                 call    __RTC_CheckEsp
.text:00004DD6                 mov     esp, ebp
.text:00004DD8                 pop     ebp
.text:00004DD9                 retn
.text:00004DD9 ?Init@CBaseProps@NZip@NArchive@@QAEXXZ endp
.text:00004DD9
.text:00004DD9 ; ---------------------------------------------------------------------------
.text:00004DDA                 align 4
.text:00004DDA _text           ends
.text:00004DDA
.text:00004DDC ; ===========================================================================
.text:00004DDC
.text:00004DDC ; Segment type: Pure code
.text:00004DDC ; Segment permissions: Read/Execute
.text:00004DDC _text           segment para public 'CODE' use32
.text:00004DDC                 assume cs:_text
.text:00004DDC                 ;org 4DDCh
.text:00004DDC ; COMDAT (pick any)
.text:00004DDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004DDC
.text:00004DDC ; =============== S U B R O U T I N E =======================================
.text:00004DDC
.text:00004DDC ; Attributes: bp-based frame
.text:00004DDC
.text:00004DDC ; void __thiscall CProps::Clear(CProps *__hidden this)
.text:00004DDC                 public ?Clear@CProps@@QAEXXZ
.text:00004DDC ?Clear@CProps@@QAEXXZ proc near         ; CODE XREF: NArchive::NZip::CBaseProps::Init(void)+11p
.text:00004DDC
.text:00004DDC var_4           = dword ptr -4
.text:00004DDC
.text:00004DDC                 push    ebp
.text:00004DDD                 mov     ebp, esp
.text:00004DDF                 push    ecx
.text:00004DE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004DE7                 mov     [ebp+var_4], ecx
.text:00004DEA                 mov     ecx, [ebp+var_4]
.text:00004DED                 call    ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ ; CObjectVector<CProp>::Clear(void)
.text:00004DF2                 add     esp, 4
.text:00004DF5                 cmp     ebp, esp
.text:00004DF7                 call    __RTC_CheckEsp
.text:00004DFC                 mov     esp, ebp
.text:00004DFE                 pop     ebp
.text:00004DFF                 retn
.text:00004DFF ?Clear@CProps@@QAEXXZ endp
.text:00004DFF
.text:00004DFF _text           ends
.text:00004DFF
.text:00004E00 ; ===========================================================================
.text:00004E00
.text:00004E00 ; Segment type: Pure code
.text:00004E00 ; Segment permissions: Read/Execute
.text:00004E00 _text           segment para public 'CODE' use32
.text:00004E00                 assume cs:_text
.text:00004E00                 ;org 4E00h
.text:00004E00 ; COMDAT (pick any)
.text:00004E00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E00
.text:00004E00 ; =============== S U B R O U T I N E =======================================
.text:00004E00
.text:00004E00 ; Attributes: bp-based frame
.text:00004E00
.text:00004E00 ; public: void * __thiscall NArchive::NZip::CHandler::`scalar deleting destructor'(unsigned int)
.text:00004E00                 public ??_GCHandler@NZip@NArchive@@QAEPAXI@Z
.text:00004E00 ??_GCHandler@NZip@NArchive@@QAEPAXI@Z proc near
.text:00004E00                                         ; CODE XREF: NArchive::NZip::CHandler::Release(void)+51p
.text:00004E00
.text:00004E00 var_4           = dword ptr -4
.text:00004E00 arg_0           = dword ptr  8
.text:00004E00
.text:00004E00                 push    ebp
.text:00004E01                 mov     ebp, esp
.text:00004E03                 push    ecx
.text:00004E04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E0B                 mov     [ebp+var_4], ecx
.text:00004E0E                 mov     ecx, [ebp+var_4] ; this
.text:00004E11                 call    ??1CHandler@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CHandler::~CHandler(void)
.text:00004E16                 mov     eax, [ebp+arg_0]
.text:00004E19                 and     eax, 1
.text:00004E1C                 jz      short loc_4E2A
.text:00004E1E                 mov     ecx, [ebp+var_4]
.text:00004E21                 push    ecx             ; void *
.text:00004E22                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004E27                 add     esp, 4
.text:00004E2A
.text:00004E2A loc_4E2A:                               ; CODE XREF: NArchive::NZip::CHandler::`scalar deleting destructor'(uint)+1Cj
.text:00004E2A                 mov     eax, [ebp+var_4]
.text:00004E2D                 add     esp, 4
.text:00004E30                 cmp     ebp, esp
.text:00004E32                 call    __RTC_CheckEsp
.text:00004E37                 mov     esp, ebp
.text:00004E39                 pop     ebp
.text:00004E3A                 retn    4
.text:00004E3A ??_GCHandler@NZip@NArchive@@QAEPAXI@Z endp
.text:00004E3A
.text:00004E3A ; ---------------------------------------------------------------------------
.text:00004E3D                 align 10h
.text:00004E3D _text           ends
.text:00004E3D
.text:00004E40 ; ===========================================================================
.text:00004E40
.text:00004E40 ; Segment type: Pure code
.text:00004E40 ; Segment permissions: Read/Execute
.text:00004E40 _text           segment para public 'CODE' use32
.text:00004E40                 assume cs:_text
.text:00004E40                 ;org 4E40h
.text:00004E40 ; COMDAT (pick any)
.text:00004E40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E40
.text:00004E40 ; =============== S U B R O U T I N E =======================================
.text:00004E40
.text:00004E40 ; Attributes: bp-based frame
.text:00004E40
.text:00004E40 ; _DWORD __thiscall NArchive::NZip::CHandler::~CHandler(NArchive::NZip::CHandler *__hidden this)
.text:00004E40                 public ??1CHandler@NZip@NArchive@@QAE@XZ
.text:00004E40 ??1CHandler@NZip@NArchive@@QAE@XZ proc near
.text:00004E40                                         ; CODE XREF: NArchive::NZip::CHandler::`scalar deleting destructor'(uint)+11p
.text:00004E40
.text:00004E40 var_10          = dword ptr -10h
.text:00004E40 var_C           = dword ptr -0Ch
.text:00004E40 var_4           = dword ptr -4
.text:00004E40
.text:00004E40                 push    ebp
.text:00004E41                 mov     ebp, esp
.text:00004E43                 push    0FFFFFFFFh
.text:00004E45                 push    offset __ehhandler$??1CHandler@NZip@NArchive@@QAE@XZ
.text:00004E4A                 mov     eax, large fs:0
.text:00004E50                 push    eax
.text:00004E51                 push    ecx
.text:00004E52                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004E59                 mov     eax, dword ptr ds:___security_cookie
.text:00004E5E                 xor     eax, ebp
.text:00004E60                 push    eax
.text:00004E61                 lea     eax, [ebp+var_C]
.text:00004E64                 mov     large fs:0, eax
.text:00004E6A                 mov     [ebp+var_10], ecx
.text:00004E6D                 mov     [ebp+var_4], 1
.text:00004E74                 mov     ecx, [ebp+var_10]
.text:00004E77                 add     ecx, 0A8h ; '¿' ; this
.text:00004E7D                 call    ??1CBaseProps@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CBaseProps::~CBaseProps(void)
.text:00004E82                 mov     byte ptr [ebp+var_4], 0
.text:00004E86                 mov     ecx, [ebp+var_10]
.text:00004E89                 add     ecx, 20h ; ' '  ; this
.text:00004E8C                 call    ??1CInArchive@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CInArchive::~CInArchive(void)
.text:00004E91                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004E98                 mov     ecx, [ebp+var_10]
.text:00004E9B                 add     ecx, 10h
.text:00004E9E                 call    ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)
.text:00004EA3                 mov     ecx, [ebp+var_C]
.text:00004EA6                 mov     large fs:0, ecx
.text:00004EAD                 pop     ecx
.text:00004EAE                 add     esp, 10h
.text:00004EB1                 cmp     ebp, esp
.text:00004EB3                 call    __RTC_CheckEsp
.text:00004EB8                 mov     esp, ebp
.text:00004EBA                 pop     ebp
.text:00004EBB                 retn
.text:00004EBB ??1CHandler@NZip@NArchive@@QAE@XZ endp
.text:00004EBB
.text:00004EBB _text           ends
.text:00004EBB
.text$x:00004EBC ; ===========================================================================
.text$x:00004EBC
.text$x:00004EBC ; Segment type: Pure code
.text$x:00004EBC ; Segment permissions: Read/Execute
.text$x:00004EBC _text$x         segment para public 'CODE' use32
.text$x:00004EBC                 assume cs:_text$x
.text$x:00004EBC                 ;org 4EBCh
.text$x:00004EBC ; COMDAT (pick associative to section at 4E40)
.text$x:00004EBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004EBC
.text$x:00004EBC ; =============== S U B R O U T I N E =======================================
.text$x:00004EBC
.text$x:00004EBC
.text$x:00004EBC __unwindfunclet$??1CHandler@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00004EBC                                         ; DATA XREF: .xdata$x:00004EF4o
.text$x:00004EBC                 mov     ecx, [ebp-10h]
.text$x:00004EBF                 add     ecx, 10h
.text$x:00004EC2                 jmp     ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)
.text$x:00004EC2 __unwindfunclet$??1CHandler@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00004EC2
.text$x:00004EC7
.text$x:00004EC7 ; =============== S U B R O U T I N E =======================================
.text$x:00004EC7
.text$x:00004EC7
.text$x:00004EC7 __unwindfunclet$??1CHandler@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:00004EC7                                         ; DATA XREF: .xdata$x:00004EFCo
.text$x:00004EC7                 mov     ecx, [ebp-10h]
.text$x:00004ECA                 add     ecx, 20h ; ' '  ; this
.text$x:00004ECD                 jmp     ??1CInArchive@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CInArchive::~CInArchive(void)
.text$x:00004ECD __unwindfunclet$??1CHandler@NZip@NArchive@@QAE@XZ$1 endp
.text$x:00004ECD
.text$x:00004ED2
.text$x:00004ED2 ; =============== S U B R O U T I N E =======================================
.text$x:00004ED2
.text$x:00004ED2
.text$x:00004ED2 __ehhandler$??1CHandler@NZip@NArchive@@QAE@XZ proc near
.text$x:00004ED2                                         ; DATA XREF: NArchive::NZip::CHandler::~CHandler(void)+5o
.text$x:00004ED2
.text$x:00004ED2 arg_4           = dword ptr  8
.text$x:00004ED2
.text$x:00004ED2                 mov     edx, [esp+arg_4]
.text$x:00004ED6                 lea     eax, [edx+0Ch]
.text$x:00004ED9                 mov     ecx, [edx-8]
.text$x:00004EDC                 xor     ecx, eax
.text$x:00004EDE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004EE3                 mov     eax, offset __ehfuncinfo$??1CHandler@NZip@NArchive@@QAE@XZ
.text$x:00004EE8                 jmp     ___CxxFrameHandler3
.text$x:00004EE8 __ehhandler$??1CHandler@NZip@NArchive@@QAE@XZ endp
.text$x:00004EE8
.text$x:00004EE8 ; ---------------------------------------------------------------------------
.text$x:00004EED                 align 10h
.text$x:00004EED _text$x         ends
.text$x:00004EED
.xdata$x:00004EF0 ; ===========================================================================
.xdata$x:00004EF0
.xdata$x:00004EF0 ; Segment type: Pure data
.xdata$x:00004EF0 ; Segment permissions: Read
.xdata$x:00004EF0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004EF0                 assume cs:_xdata$x
.xdata$x:00004EF0                 ;org 4EF0h
.xdata$x:00004EF0 ; COMDAT (pick associative to section at 4E40)
.xdata$x:00004EF0 __unwindtable$??1CHandler@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00004EF0                                         ; DATA XREF: .xdata$x:00004F08o
.xdata$x:00004EF1                 db 0FFh
.xdata$x:00004EF2                 db 0FFh
.xdata$x:00004EF3                 db 0FFh
.xdata$x:00004EF4                 dd offset __unwindfunclet$??1CHandler@NZip@NArchive@@QAE@XZ$0
.xdata$x:00004EF8                 db    0
.xdata$x:00004EF9                 db    0
.xdata$x:00004EFA                 db    0
.xdata$x:00004EFB                 db    0
.xdata$x:00004EFC                 dd offset __unwindfunclet$??1CHandler@NZip@NArchive@@QAE@XZ$1
.xdata$x:00004F00 __ehfuncinfo$??1CHandler@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00004F00                                         ; DATA XREF: __ehhandler$??1CHandler@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00004F01                 db    5
.xdata$x:00004F02                 db  93h ; ô
.xdata$x:00004F03                 db  19h
.xdata$x:00004F04                 db    2
.xdata$x:00004F05                 db    0
.xdata$x:00004F06                 db    0
.xdata$x:00004F07                 db    0
.xdata$x:00004F08                 dd offset __unwindtable$??1CHandler@NZip@NArchive@@QAE@XZ
.xdata$x:00004F0C                 align 20h
.xdata$x:00004F20                 db    1
.xdata$x:00004F21                 db    0
.xdata$x:00004F22                 db    0
.xdata$x:00004F23                 db    0
.xdata$x:00004F23 _xdata$x        ends
.xdata$x:00004F23
.text:00004F24 ; ===========================================================================
.text:00004F24
.text:00004F24 ; Segment type: Pure code
.text:00004F24 ; Segment permissions: Read/Execute
.text:00004F24 _text           segment para public 'CODE' use32
.text:00004F24                 assume cs:_text
.text:00004F24                 ;org 4F24h
.text:00004F24 ; COMDAT (pick any)
.text:00004F24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004F24
.text:00004F24 ; =============== S U B R O U T I N E =======================================
.text:00004F24
.text:00004F24 ; Attributes: bp-based frame
.text:00004F24
.text:00004F24 ; _DWORD __thiscall NArchive::NZip::CInArchive::~CInArchive(NArchive::NZip::CInArchive *__hidden this)
.text:00004F24                 public ??1CInArchive@NZip@NArchive@@QAE@XZ
.text:00004F24 ??1CInArchive@NZip@NArchive@@QAE@XZ proc near
.text:00004F24                                         ; CODE XREF: __unwindfunclet$??0CHandler@NZip@NArchive@@QAE@XZ$1+6j
.text:00004F24                                         ; NArchive::NZip::CHandler::~CHandler(void)+4Cp ...
.text:00004F24
.text:00004F24 var_10          = dword ptr -10h
.text:00004F24 var_C           = dword ptr -0Ch
.text:00004F24 var_4           = dword ptr -4
.text:00004F24
.text:00004F24                 push    ebp
.text:00004F25                 mov     ebp, esp
.text:00004F27                 push    0FFFFFFFFh
.text:00004F29                 push    offset __ehhandler$??1CInArchive@NZip@NArchive@@QAE@XZ
.text:00004F2E                 mov     eax, large fs:0
.text:00004F34                 push    eax
.text:00004F35                 push    ecx
.text:00004F36                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004F3D                 mov     eax, dword ptr ds:___security_cookie
.text:00004F42                 xor     eax, ebp
.text:00004F44                 push    eax
.text:00004F45                 lea     eax, [ebp+var_C]
.text:00004F48                 mov     large fs:0, eax
.text:00004F4E                 mov     [ebp+var_10], ecx
.text:00004F51                 mov     [ebp+var_4], 1
.text:00004F58                 mov     ecx, [ebp+var_10]
.text:00004F5B                 add     ecx, 80h ; 'Ç'
.text:00004F61                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00004F66                 mov     byte ptr [ebp+var_4], 0
.text:00004F6A                 mov     ecx, [ebp+var_10]
.text:00004F6D                 add     ecx, 38h ; '8'  ; this
.text:00004F70                 call    ??1CInArchiveInfo@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CInArchiveInfo::~CInArchiveInfo(void)
.text:00004F75                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004F7C                 mov     ecx, [ebp+var_10] ; this
.text:00004F7F                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:00004F84                 mov     ecx, [ebp+var_C]
.text:00004F87                 mov     large fs:0, ecx
.text:00004F8E                 pop     ecx
.text:00004F8F                 add     esp, 10h
.text:00004F92                 cmp     ebp, esp
.text:00004F94                 call    __RTC_CheckEsp
.text:00004F99                 mov     esp, ebp
.text:00004F9B                 pop     ebp
.text:00004F9C                 retn
.text:00004F9C ??1CInArchive@NZip@NArchive@@QAE@XZ endp
.text:00004F9C
.text:00004F9C ; ---------------------------------------------------------------------------
.text:00004F9D                 align 10h
.text:00004F9D _text           ends
.text:00004F9D
.text$x:00004FA0 ; ===========================================================================
.text$x:00004FA0
.text$x:00004FA0 ; Segment type: Pure code
.text$x:00004FA0 ; Segment permissions: Read/Execute
.text$x:00004FA0 _text$x         segment para public 'CODE' use32
.text$x:00004FA0                 assume cs:_text$x
.text$x:00004FA0                 ;org 4FA0h
.text$x:00004FA0 ; COMDAT (pick associative to section at 4F24)
.text$x:00004FA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004FA0
.text$x:00004FA0 ; =============== S U B R O U T I N E =======================================
.text$x:00004FA0
.text$x:00004FA0
.text$x:00004FA0 __unwindfunclet$??1CInArchive@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00004FA0                                         ; DATA XREF: .xdata$x:00004FD4o
.text$x:00004FA0                 mov     ecx, [ebp-10h]  ; this
.text$x:00004FA3                 jmp     ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text$x:00004FA3 __unwindfunclet$??1CInArchive@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00004FA3
.text$x:00004FA8
.text$x:00004FA8 ; =============== S U B R O U T I N E =======================================
.text$x:00004FA8
.text$x:00004FA8
.text$x:00004FA8 __unwindfunclet$??1CInArchive@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:00004FA8                                         ; DATA XREF: .xdata$x:00004FDCo
.text$x:00004FA8                 mov     ecx, [ebp-10h]
.text$x:00004FAB                 add     ecx, 38h ; '8'  ; this
.text$x:00004FAE                 jmp     ??1CInArchiveInfo@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CInArchiveInfo::~CInArchiveInfo(void)
.text$x:00004FAE __unwindfunclet$??1CInArchive@NZip@NArchive@@QAE@XZ$1 endp
.text$x:00004FAE
.text$x:00004FB3
.text$x:00004FB3 ; =============== S U B R O U T I N E =======================================
.text$x:00004FB3
.text$x:00004FB3
.text$x:00004FB3 __ehhandler$??1CInArchive@NZip@NArchive@@QAE@XZ proc near
.text$x:00004FB3                                         ; DATA XREF: NArchive::NZip::CInArchive::~CInArchive(void)+5o
.text$x:00004FB3
.text$x:00004FB3 arg_4           = dword ptr  8
.text$x:00004FB3
.text$x:00004FB3                 mov     edx, [esp+arg_4]
.text$x:00004FB7                 lea     eax, [edx+0Ch]
.text$x:00004FBA                 mov     ecx, [edx-8]
.text$x:00004FBD                 xor     ecx, eax
.text$x:00004FBF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004FC4                 mov     eax, offset __ehfuncinfo$??1CInArchive@NZip@NArchive@@QAE@XZ
.text$x:00004FC9                 jmp     ___CxxFrameHandler3
.text$x:00004FC9 __ehhandler$??1CInArchive@NZip@NArchive@@QAE@XZ endp
.text$x:00004FC9
.text$x:00004FC9 ; ---------------------------------------------------------------------------
.text$x:00004FCE                 align 10h
.text$x:00004FCE _text$x         ends
.text$x:00004FCE
.xdata$x:00004FD0 ; ===========================================================================
.xdata$x:00004FD0
.xdata$x:00004FD0 ; Segment type: Pure data
.xdata$x:00004FD0 ; Segment permissions: Read
.xdata$x:00004FD0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004FD0                 assume cs:_xdata$x
.xdata$x:00004FD0                 ;org 4FD0h
.xdata$x:00004FD0 ; COMDAT (pick associative to section at 4F24)
.xdata$x:00004FD0 __unwindtable$??1CInArchive@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00004FD0                                         ; DATA XREF: .xdata$x:00004FE8o
.xdata$x:00004FD1                 db 0FFh
.xdata$x:00004FD2                 db 0FFh
.xdata$x:00004FD3                 db 0FFh
.xdata$x:00004FD4                 dd offset __unwindfunclet$??1CInArchive@NZip@NArchive@@QAE@XZ$0
.xdata$x:00004FD8                 db    0
.xdata$x:00004FD9                 db    0
.xdata$x:00004FDA                 db    0
.xdata$x:00004FDB                 db    0
.xdata$x:00004FDC                 dd offset __unwindfunclet$??1CInArchive@NZip@NArchive@@QAE@XZ$1
.xdata$x:00004FE0 __ehfuncinfo$??1CInArchive@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00004FE0                                         ; DATA XREF: __ehhandler$??1CInArchive@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00004FE1                 db    5
.xdata$x:00004FE2                 db  93h ; ô
.xdata$x:00004FE3                 db  19h
.xdata$x:00004FE4                 db    2
.xdata$x:00004FE5                 db    0
.xdata$x:00004FE6                 db    0
.xdata$x:00004FE7                 db    0
.xdata$x:00004FE8                 dd offset __unwindtable$??1CInArchive@NZip@NArchive@@QAE@XZ
.xdata$x:00004FEC                 align 20h
.xdata$x:00005000                 db    1
.xdata$x:00005001                 db    0
.xdata$x:00005002                 db    0
.xdata$x:00005003                 db    0
.xdata$x:00005003 _xdata$x        ends
.xdata$x:00005003
.text:00005004 ; ===========================================================================
.text:00005004
.text:00005004 ; Segment type: Pure code
.text:00005004 ; Segment permissions: Read/Execute
.text:00005004 _text           segment para public 'CODE' use32
.text:00005004                 assume cs:_text
.text:00005004                 ;org 5004h
.text:00005004 ; COMDAT (pick any)
.text:00005004                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005004
.text:00005004 ; =============== S U B R O U T I N E =======================================
.text:00005004
.text:00005004 ; Attributes: bp-based frame
.text:00005004
.text:00005004 ; _DWORD __thiscall CInBuffer::~CInBuffer(CInBuffer *__hidden this)
.text:00005004                 public ??1CInBuffer@@QAE@XZ
.text:00005004 ??1CInBuffer@@QAE@XZ proc near          ; CODE XREF: NArchive::NZip::CInArchive::~CInArchive(void)+5Bp
.text:00005004                                         ; __unwindfunclet$??1CInArchive@NZip@NArchive@@QAE@XZ$0+3j ...
.text:00005004
.text:00005004 var_4           = dword ptr -4
.text:00005004
.text:00005004                 push    ebp
.text:00005005                 mov     ebp, esp
.text:00005007                 push    ecx
.text:00005008                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000500F                 mov     [ebp+var_4], ecx
.text:00005012                 mov     ecx, [ebp+var_4] ; this
.text:00005015                 call    ?Free@CInBuffer@@QAEXXZ ; CInBuffer::Free(void)
.text:0000501A                 add     esp, 4
.text:0000501D                 cmp     ebp, esp
.text:0000501F                 call    __RTC_CheckEsp
.text:00005024                 mov     esp, ebp
.text:00005026                 pop     ebp
.text:00005027                 retn
.text:00005027 ??1CInBuffer@@QAE@XZ endp
.text:00005027
.text:00005027 _text           ends
.text:00005027
.text:00005028 ; ===========================================================================
.text:00005028
.text:00005028 ; Segment type: Pure code
.text:00005028 ; Segment permissions: Read/Execute
.text:00005028 _text           segment para public 'CODE' use32
.text:00005028                 assume cs:_text
.text:00005028                 ;org 5028h
.text:00005028 ; COMDAT (pick any)
.text:00005028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005028
.text:00005028 ; =============== S U B R O U T I N E =======================================
.text:00005028
.text:00005028 ; Attributes: bp-based frame
.text:00005028
.text:00005028 ; _DWORD __thiscall NArchive::NZip::CInArchiveInfo::~CInArchiveInfo(NArchive::NZip::CInArchiveInfo *__hidden this)
.text:00005028                 public ??1CInArchiveInfo@NZip@NArchive@@QAE@XZ
.text:00005028 ??1CInArchiveInfo@NZip@NArchive@@QAE@XZ proc near
.text:00005028                                         ; CODE XREF: NArchive::NZip::CInArchive::~CInArchive(void)+4Cp
.text:00005028                                         ; __unwindfunclet$??1CInArchive@NZip@NArchive@@QAE@XZ$1+6j ...
.text:00005028
.text:00005028 var_4           = dword ptr -4
.text:00005028
.text:00005028                 push    ebp
.text:00005029                 mov     ebp, esp
.text:0000502B                 push    ecx
.text:0000502C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005033                 mov     [ebp+var_4], ecx
.text:00005036                 mov     ecx, [ebp+var_4]
.text:00005039                 add     ecx, 34h ; '4'
.text:0000503C                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00005041                 add     esp, 4
.text:00005044                 cmp     ebp, esp
.text:00005046                 call    __RTC_CheckEsp
.text:0000504B                 mov     esp, ebp
.text:0000504D                 pop     ebp
.text:0000504E                 retn
.text:0000504E ??1CInArchiveInfo@NZip@NArchive@@QAE@XZ endp
.text:0000504E
.text:0000504E ; ---------------------------------------------------------------------------
.text:0000504F                 align 10h
.text:0000504F _text           ends
.text:0000504F
.text:00005050 ; ===========================================================================
.text:00005050
.text:00005050 ; Segment type: Pure code
.text:00005050 ; Segment permissions: Read/Execute
.text:00005050 _text           segment para public 'CODE' use32
.text:00005050                 assume cs:_text
.text:00005050                 ;org 5050h
.text:00005050 ; COMDAT (pick any)
.text:00005050                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005050
.text:00005050 ; =============== S U B R O U T I N E =======================================
.text:00005050
.text:00005050 ; Attributes: bp-based frame
.text:00005050
.text:00005050 ; _DWORD __thiscall IInArchive::IInArchive(IInArchive *__hidden this)
.text:00005050                 public ??0IInArchive@@QAE@XZ
.text:00005050 ??0IInArchive@@QAE@XZ proc near         ; CODE XREF: NArchive::NZip::CHandler::CHandler(void)+30p
.text:00005050
.text:00005050 var_4           = dword ptr -4
.text:00005050
.text:00005050                 push    ebp
.text:00005051                 mov     ebp, esp
.text:00005053                 push    ecx
.text:00005054                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000505B                 mov     [ebp+var_4], ecx
.text:0000505E                 mov     ecx, [ebp+var_4]
.text:00005061                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00005066                 mov     eax, [ebp+var_4]
.text:00005069                 mov     dword ptr [eax], offset ??_7IInArchive@@6B@ ; const IInArchive::`vftable'
.text:0000506F                 mov     eax, [ebp+var_4]
.text:00005072                 add     esp, 4
.text:00005075                 cmp     ebp, esp
.text:00005077                 call    __RTC_CheckEsp
.text:0000507C                 mov     esp, ebp
.text:0000507E                 pop     ebp
.text:0000507F                 retn
.text:0000507F ??0IInArchive@@QAE@XZ endp
.text:0000507F
.text:0000507F _text           ends
.text:0000507F
.rdata:00005080 ; ===========================================================================
.rdata:00005080
.rdata:00005080 ; Segment type: Pure data
.rdata:00005080 ; Segment permissions: Read
.rdata:00005080 _rdata          segment dword public 'DATA' use32
.rdata:00005080                 assume cs:_rdata
.rdata:00005080                 ;org 5080h
.rdata:00005080 ; COMDAT (pick largest)
.rdata:00005080                 dd offset ??_R4IInArchive@@6B@ ; const IInArchive::`RTTI Complete Object Locator'
.rdata:00005084                 public ??_7IInArchive@@6B@
.rdata:00005084 ; const IInArchive::`vftable'
.rdata:00005084 ??_7IInArchive@@6B@ dd offset __purecall
.rdata:00005084                                         ; DATA XREF: IInArchive::IInArchive(void)+19o
.rdata:00005088                 dd offset __purecall
.rdata:0000508C                 dd offset __purecall
.rdata:00005090                 dd offset __purecall
.rdata:00005094                 dd offset __purecall
.rdata:00005098                 dd offset __purecall
.rdata:0000509C                 dd offset __purecall
.rdata:000050A0                 dd offset __purecall
.rdata:000050A4                 dd offset __purecall
.rdata:000050A8                 dd offset __purecall
.rdata:000050AC                 dd offset __purecall
.rdata:000050B0                 dd offset __purecall
.rdata:000050B4                 dd offset __purecall
.rdata:000050B4 _rdata          ends
.rdata:000050B4
.rdata$r:000050B8 ; ===========================================================================
.rdata$r:000050B8
.rdata$r:000050B8 ; Segment type: Pure data
.rdata$r:000050B8 ; Segment permissions: Read
.rdata$r:000050B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000050B8                 assume cs:_rdata$r
.rdata$r:000050B8                 ;org 50B8h
.rdata$r:000050B8 ; COMDAT (pick any)
.rdata$r:000050B8                 public ??_R4IInArchive@@6B@
.rdata$r:000050B8 ; const IInArchive::`RTTI Complete Object Locator'
.rdata$r:000050B8 ??_R4IInArchive@@6B@ db    0            ; DATA XREF: .rdata:00005080o
.rdata$r:000050B9                 db    0
.rdata$r:000050BA                 db    0
.rdata$r:000050BB                 db    0
.rdata$r:000050BC                 db    0
.rdata$r:000050BD                 db    0
.rdata$r:000050BE                 db    0
.rdata$r:000050BF                 db    0
.rdata$r:000050C0                 db    0
.rdata$r:000050C1                 db    0
.rdata$r:000050C2                 db    0
.rdata$r:000050C3                 db    0
.rdata$r:000050C4                 dd offset ??_R0?AUIInArchive@@@8 ; IInArchive `RTTI Type Descriptor'
.rdata$r:000050C8                 dd offset ??_R3IInArchive@@8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000050C8 _rdata$r        ends
.rdata$r:000050C8
.text:000050CC ; ===========================================================================
.text:000050CC
.text:000050CC ; Segment type: Pure code
.text:000050CC ; Segment permissions: Read/Execute
.text:000050CC _text           segment para public 'CODE' use32
.text:000050CC                 assume cs:_text
.text:000050CC                 ;org 50CCh
.text:000050CC ; COMDAT (pick any)
.text:000050CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000050CC
.text:000050CC ; =============== S U B R O U T I N E =======================================
.text:000050CC
.text:000050CC ; Attributes: bp-based frame
.text:000050CC
.text:000050CC ; public: __thiscall IUnknown::IUnknown(void)
.text:000050CC                 public ??0IUnknown@@QAE@XZ
.text:000050CC ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: IInArchive::IInArchive(void)+11p
.text:000050CC                                         ; IOutArchive::IOutArchive(void)+11p ...
.text:000050CC
.text:000050CC var_4           = dword ptr -4
.text:000050CC
.text:000050CC                 push    ebp
.text:000050CD                 mov     ebp, esp
.text:000050CF                 push    ecx
.text:000050D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050D7                 mov     [ebp+var_4], ecx
.text:000050DA                 mov     eax, [ebp+var_4]
.text:000050DD                 mov     esp, ebp
.text:000050DF                 pop     ebp
.text:000050E0                 retn
.text:000050E0 ??0IUnknown@@QAE@XZ endp
.text:000050E0
.text:000050E0 ; ---------------------------------------------------------------------------
.text:000050E1                 align 4
.text:000050E1 _text           ends
.text:000050E1
.text:000050E4 ; ===========================================================================
.text:000050E4
.text:000050E4 ; Segment type: Pure code
.text:000050E4 ; Segment permissions: Read/Execute
.text:000050E4 _text           segment para public 'CODE' use32
.text:000050E4                 assume cs:_text
.text:000050E4                 ;org 50E4h
.text:000050E4 ; COMDAT (pick any)
.text:000050E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000050E4
.text:000050E4 ; =============== S U B R O U T I N E =======================================
.text:000050E4
.text:000050E4 ; Attributes: bp-based frame
.text:000050E4
.text:000050E4 ; _DWORD __thiscall IOutArchive::IOutArchive(IOutArchive *__hidden this)
.text:000050E4                 public ??0IOutArchive@@QAE@XZ
.text:000050E4 ??0IOutArchive@@QAE@XZ proc near        ; CODE XREF: NArchive::NZip::CHandler::CHandler(void)+3Bp
.text:000050E4
.text:000050E4 var_4           = dword ptr -4
.text:000050E4
.text:000050E4                 push    ebp
.text:000050E5                 mov     ebp, esp
.text:000050E7                 push    ecx
.text:000050E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050EF                 mov     [ebp+var_4], ecx
.text:000050F2                 mov     ecx, [ebp+var_4]
.text:000050F5                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000050FA                 mov     eax, [ebp+var_4]
.text:000050FD                 mov     dword ptr [eax], offset ??_7IOutArchive@@6B@ ; const IOutArchive::`vftable'
.text:00005103                 mov     eax, [ebp+var_4]
.text:00005106                 add     esp, 4
.text:00005109                 cmp     ebp, esp
.text:0000510B                 call    __RTC_CheckEsp
.text:00005110                 mov     esp, ebp
.text:00005112                 pop     ebp
.text:00005113                 retn
.text:00005113 ??0IOutArchive@@QAE@XZ endp
.text:00005113
.text:00005113 _text           ends
.text:00005113
.rdata:00005114 ; ===========================================================================
.rdata:00005114
.rdata:00005114 ; Segment type: Pure data
.rdata:00005114 ; Segment permissions: Read
.rdata:00005114 _rdata          segment dword public 'DATA' use32
.rdata:00005114                 assume cs:_rdata
.rdata:00005114                 ;org 5114h
.rdata:00005114 ; COMDAT (pick largest)
.rdata:00005114                 dd offset ??_R4IOutArchive@@6B@ ; const IOutArchive::`RTTI Complete Object Locator'
.rdata:00005118                 public ??_7IOutArchive@@6B@
.rdata:00005118 ; const IOutArchive::`vftable'
.rdata:00005118 ??_7IOutArchive@@6B@ dd offset __purecall
.rdata:00005118                                         ; DATA XREF: IOutArchive::IOutArchive(void)+19o
.rdata:0000511C                 dd offset __purecall
.rdata:00005120                 dd offset __purecall
.rdata:00005124                 dd offset __purecall
.rdata:00005128                 dd offset __purecall
.rdata:00005128 _rdata          ends
.rdata:00005128
.rdata$r:0000512C ; ===========================================================================
.rdata$r:0000512C
.rdata$r:0000512C ; Segment type: Pure data
.rdata$r:0000512C ; Segment permissions: Read
.rdata$r:0000512C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000512C                 assume cs:_rdata$r
.rdata$r:0000512C                 ;org 512Ch
.rdata$r:0000512C ; COMDAT (pick any)
.rdata$r:0000512C                 public ??_R4IOutArchive@@6B@
.rdata$r:0000512C ; const IOutArchive::`RTTI Complete Object Locator'
.rdata$r:0000512C ??_R4IOutArchive@@6B@ db    0           ; DATA XREF: .rdata:00005114o
.rdata$r:0000512D                 db    0
.rdata$r:0000512E                 db    0
.rdata$r:0000512F                 db    0
.rdata$r:00005130                 db    0
.rdata$r:00005131                 db    0
.rdata$r:00005132                 db    0
.rdata$r:00005133                 db    0
.rdata$r:00005134                 db    0
.rdata$r:00005135                 db    0
.rdata$r:00005136                 db    0
.rdata$r:00005137                 db    0
.rdata$r:00005138                 dd offset ??_R0?AUIOutArchive@@@8 ; IOutArchive `RTTI Type Descriptor'
.rdata$r:0000513C                 dd offset ??_R3IOutArchive@@8 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000513C _rdata$r        ends
.rdata$r:0000513C
.text:00005140 ; ===========================================================================
.text:00005140
.text:00005140 ; Segment type: Pure code
.text:00005140 ; Segment permissions: Read/Execute
.text:00005140 _text           segment para public 'CODE' use32
.text:00005140                 assume cs:_text
.text:00005140                 ;org 5140h
.text:00005140 ; COMDAT (pick any)
.text:00005140                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005140
.text:00005140 ; =============== S U B R O U T I N E =======================================
.text:00005140
.text:00005140 ; Attributes: bp-based frame
.text:00005140
.text:00005140 ; _DWORD __thiscall ISetProperties::ISetProperties(ISetProperties *__hidden this)
.text:00005140                 public ??0ISetProperties@@QAE@XZ
.text:00005140 ??0ISetProperties@@QAE@XZ proc near     ; CODE XREF: NArchive::NZip::CHandler::CHandler(void)+46p
.text:00005140
.text:00005140 var_4           = dword ptr -4
.text:00005140
.text:00005140                 push    ebp
.text:00005141                 mov     ebp, esp
.text:00005143                 push    ecx
.text:00005144                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000514B                 mov     [ebp+var_4], ecx
.text:0000514E                 mov     ecx, [ebp+var_4]
.text:00005151                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00005156                 mov     eax, [ebp+var_4]
.text:00005159                 mov     dword ptr [eax], offset ??_7ISetProperties@@6B@ ; const ISetProperties::`vftable'
.text:0000515F                 mov     eax, [ebp+var_4]
.text:00005162                 add     esp, 4
.text:00005165                 cmp     ebp, esp
.text:00005167                 call    __RTC_CheckEsp
.text:0000516C                 mov     esp, ebp
.text:0000516E                 pop     ebp
.text:0000516F                 retn
.text:0000516F ??0ISetProperties@@QAE@XZ endp
.text:0000516F
.text:0000516F _text           ends
.text:0000516F
.rdata:00005170 ; ===========================================================================
.rdata:00005170
.rdata:00005170 ; Segment type: Pure data
.rdata:00005170 ; Segment permissions: Read
.rdata:00005170 _rdata          segment dword public 'DATA' use32
.rdata:00005170                 assume cs:_rdata
.rdata:00005170                 ;org 5170h
.rdata:00005170 ; COMDAT (pick largest)
.rdata:00005170                 dd offset ??_R4ISetProperties@@6B@ ; const ISetProperties::`RTTI Complete Object Locator'
.rdata:00005174                 public ??_7ISetProperties@@6B@
.rdata:00005174 ; const ISetProperties::`vftable'
.rdata:00005174 ??_7ISetProperties@@6B@ dd offset __purecall
.rdata:00005174                                         ; DATA XREF: ISetProperties::ISetProperties(void)+19o
.rdata:00005178                 dd offset __purecall
.rdata:0000517C                 dd offset __purecall
.rdata:00005180                 dd offset __purecall
.rdata:00005180 _rdata          ends
.rdata:00005180
.rdata$r:00005184 ; ===========================================================================
.rdata$r:00005184
.rdata$r:00005184 ; Segment type: Pure data
.rdata$r:00005184 ; Segment permissions: Read
.rdata$r:00005184 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005184                 assume cs:_rdata$r
.rdata$r:00005184                 ;org 5184h
.rdata$r:00005184 ; COMDAT (pick any)
.rdata$r:00005184                 public ??_R4ISetProperties@@6B@
.rdata$r:00005184 ; const ISetProperties::`RTTI Complete Object Locator'
.rdata$r:00005184 ??_R4ISetProperties@@6B@ db    0        ; DATA XREF: .rdata:00005170o
.rdata$r:00005185                 db    0
.rdata$r:00005186                 db    0
.rdata$r:00005187                 db    0
.rdata$r:00005188                 db    0
.rdata$r:00005189                 db    0
.rdata$r:0000518A                 db    0
.rdata$r:0000518B                 db    0
.rdata$r:0000518C                 db    0
.rdata$r:0000518D                 db    0
.rdata$r:0000518E                 db    0
.rdata$r:0000518F                 db    0
.rdata$r:00005190                 dd offset ??_R0?AUISetProperties@@@8 ; ISetProperties `RTTI Type Descriptor'
.rdata$r:00005194                 dd offset ??_R3ISetProperties@@8 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005194 _rdata$r        ends
.rdata$r:00005194
.text:00005198 ; ===========================================================================
.text:00005198
.text:00005198 ; Segment type: Pure code
.text:00005198 ; Segment permissions: Read/Execute
.text:00005198 _text           segment para public 'CODE' use32
.text:00005198                 assume cs:_text
.text:00005198                 ;org 5198h
.text:00005198 ; COMDAT (pick any)
.text:00005198                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005198
.text:00005198 ; =============== S U B R O U T I N E =======================================
.text:00005198
.text:00005198 ; Attributes: bp-based frame
.text:00005198
.text:00005198 ; _DWORD __thiscall NArchive::NZip::CInArchive::CInArchive(NArchive::NZip::CInArchive *__hidden this)
.text:00005198                 public ??0CInArchive@NZip@NArchive@@QAE@XZ
.text:00005198 ??0CInArchive@NZip@NArchive@@QAE@XZ proc near
.text:00005198                                         ; CODE XREF: NArchive::NZip::CHandler::CHandler(void)+8Bp
.text:00005198
.text:00005198 var_10          = dword ptr -10h
.text:00005198 var_C           = dword ptr -0Ch
.text:00005198 var_4           = dword ptr -4
.text:00005198
.text:00005198                 push    ebp
.text:00005199                 mov     ebp, esp
.text:0000519B                 push    0FFFFFFFFh
.text:0000519D                 push    offset __ehhandler$??0CInArchive@NZip@NArchive@@QAE@XZ
.text:000051A2                 mov     eax, large fs:0
.text:000051A8                 push    eax
.text:000051A9                 push    ecx
.text:000051AA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000051B1                 mov     eax, dword ptr ds:___security_cookie
.text:000051B6                 xor     eax, ebp
.text:000051B8                 push    eax
.text:000051B9                 lea     eax, [ebp+var_C]
.text:000051BC                 mov     large fs:0, eax
.text:000051C2                 mov     [ebp+var_10], ecx
.text:000051C5                 mov     ecx, [ebp+var_10]
.text:000051C8                 call    ??0CInBuffer@@QAE@XZ ; CInBuffer::CInBuffer(void)
.text:000051CD                 mov     [ebp+var_4], 0
.text:000051D4                 mov     ecx, [ebp+var_10]
.text:000051D7                 add     ecx, 38h ; '8'  ; this
.text:000051DA                 call    ??0CInArchiveInfo@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CInArchiveInfo::CInArchiveInfo(void)
.text:000051DF                 mov     byte ptr [ebp+var_4], 1
.text:000051E3                 mov     ecx, [ebp+var_10]
.text:000051E6                 add     ecx, 80h ; 'Ç'
.text:000051EC                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:000051F1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000051F8                 mov     eax, [ebp+var_10]
.text:000051FB                 mov     ecx, [ebp+var_C]
.text:000051FE                 mov     large fs:0, ecx
.text:00005205                 pop     ecx
.text:00005206                 add     esp, 10h
.text:00005209                 cmp     ebp, esp
.text:0000520B                 call    __RTC_CheckEsp
.text:00005210                 mov     esp, ebp
.text:00005212                 pop     ebp
.text:00005213                 retn
.text:00005213 ??0CInArchive@NZip@NArchive@@QAE@XZ endp
.text:00005213
.text:00005213 _text           ends
.text:00005213
.text$x:00005214 ; ===========================================================================
.text$x:00005214
.text$x:00005214 ; Segment type: Pure code
.text$x:00005214 ; Segment permissions: Read/Execute
.text$x:00005214 _text$x         segment para public 'CODE' use32
.text$x:00005214                 assume cs:_text$x
.text$x:00005214                 ;org 5214h
.text$x:00005214 ; COMDAT (pick associative to section at 5198)
.text$x:00005214                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005214
.text$x:00005214 ; =============== S U B R O U T I N E =======================================
.text$x:00005214
.text$x:00005214
.text$x:00005214 __unwindfunclet$??0CInArchive@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00005214                                         ; DATA XREF: .xdata$x:00005248o
.text$x:00005214                 mov     ecx, [ebp-10h]  ; this
.text$x:00005217                 jmp     ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text$x:00005217 __unwindfunclet$??0CInArchive@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00005217
.text$x:0000521C
.text$x:0000521C ; =============== S U B R O U T I N E =======================================
.text$x:0000521C
.text$x:0000521C
.text$x:0000521C __unwindfunclet$??0CInArchive@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:0000521C                                         ; DATA XREF: .xdata$x:00005250o
.text$x:0000521C                 mov     ecx, [ebp-10h]
.text$x:0000521F                 add     ecx, 38h ; '8'  ; this
.text$x:00005222                 jmp     ??1CInArchiveInfo@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CInArchiveInfo::~CInArchiveInfo(void)
.text$x:00005222 __unwindfunclet$??0CInArchive@NZip@NArchive@@QAE@XZ$1 endp
.text$x:00005222
.text$x:00005227
.text$x:00005227 ; =============== S U B R O U T I N E =======================================
.text$x:00005227
.text$x:00005227
.text$x:00005227 __ehhandler$??0CInArchive@NZip@NArchive@@QAE@XZ proc near
.text$x:00005227                                         ; DATA XREF: NArchive::NZip::CInArchive::CInArchive(void)+5o
.text$x:00005227
.text$x:00005227 arg_4           = dword ptr  8
.text$x:00005227
.text$x:00005227                 mov     edx, [esp+arg_4]
.text$x:0000522B                 lea     eax, [edx+0Ch]
.text$x:0000522E                 mov     ecx, [edx-8]
.text$x:00005231                 xor     ecx, eax
.text$x:00005233                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005238                 mov     eax, offset __ehfuncinfo$??0CInArchive@NZip@NArchive@@QAE@XZ
.text$x:0000523D                 jmp     ___CxxFrameHandler3
.text$x:0000523D __ehhandler$??0CInArchive@NZip@NArchive@@QAE@XZ endp
.text$x:0000523D
.text$x:0000523D ; ---------------------------------------------------------------------------
.text$x:00005242                 align 4
.text$x:00005242 _text$x         ends
.text$x:00005242
.xdata$x:00005244 ; ===========================================================================
.xdata$x:00005244
.xdata$x:00005244 ; Segment type: Pure data
.xdata$x:00005244 ; Segment permissions: Read
.xdata$x:00005244 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005244                 assume cs:_xdata$x
.xdata$x:00005244                 ;org 5244h
.xdata$x:00005244 ; COMDAT (pick associative to section at 5198)
.xdata$x:00005244 __unwindtable$??0CInArchive@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00005244                                         ; DATA XREF: .xdata$x:0000525Co
.xdata$x:00005245                 db 0FFh
.xdata$x:00005246                 db 0FFh
.xdata$x:00005247                 db 0FFh
.xdata$x:00005248                 dd offset __unwindfunclet$??0CInArchive@NZip@NArchive@@QAE@XZ$0
.xdata$x:0000524C                 align 10h
.xdata$x:00005250                 dd offset __unwindfunclet$??0CInArchive@NZip@NArchive@@QAE@XZ$1
.xdata$x:00005254 __ehfuncinfo$??0CInArchive@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00005254                                         ; DATA XREF: __ehhandler$??0CInArchive@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00005255                 db    5
.xdata$x:00005256                 db  93h ; ô
.xdata$x:00005257                 db  19h
.xdata$x:00005258                 db    2
.xdata$x:00005259                 db    0
.xdata$x:0000525A                 db    0
.xdata$x:0000525B                 db    0
.xdata$x:0000525C                 dd offset __unwindtable$??0CInArchive@NZip@NArchive@@QAE@XZ
.xdata$x:00005260                 db    0
.xdata$x:00005261                 db    0
.xdata$x:00005262                 db    0
.xdata$x:00005263                 db    0
.xdata$x:00005264                 db    0
.xdata$x:00005265                 db    0
.xdata$x:00005266                 db    0
.xdata$x:00005267                 db    0
.xdata$x:00005268                 db    0
.xdata$x:00005269                 db    0
.xdata$x:0000526A                 db    0
.xdata$x:0000526B                 db    0
.xdata$x:0000526C                 db    0
.xdata$x:0000526D                 db    0
.xdata$x:0000526E                 db    0
.xdata$x:0000526F                 db    0
.xdata$x:00005270                 db    0
.xdata$x:00005271                 db    0
.xdata$x:00005272                 db    0
.xdata$x:00005273                 db    0
.xdata$x:00005274                 db    1
.xdata$x:00005275                 db    0
.xdata$x:00005276                 db    0
.xdata$x:00005277                 db    0
.xdata$x:00005277 _xdata$x        ends
.xdata$x:00005277
.text:00005278 ; ===========================================================================
.text:00005278
.text:00005278 ; Segment type: Pure code
.text:00005278 ; Segment permissions: Read/Execute
.text:00005278 _text           segment para public 'CODE' use32
.text:00005278                 assume cs:_text
.text:00005278                 ;org 5278h
.text:00005278 ; COMDAT (pick any)
.text:00005278                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005278
.text:00005278 ; =============== S U B R O U T I N E =======================================
.text:00005278
.text:00005278 ; Attributes: bp-based frame
.text:00005278
.text:00005278 ; _DWORD __thiscall NArchive::NZip::CInArchiveInfo::CInArchiveInfo(NArchive::NZip::CInArchiveInfo *__hidden this)
.text:00005278                 public ??0CInArchiveInfo@NZip@NArchive@@QAE@XZ
.text:00005278 ??0CInArchiveInfo@NZip@NArchive@@QAE@XZ proc near
.text:00005278                                         ; CODE XREF: NArchive::NZip::CInArchive::CInArchive(void)+42p
.text:00005278
.text:00005278 var_4           = dword ptr -4
.text:00005278
.text:00005278                 push    ebp
.text:00005279                 mov     ebp, esp
.text:0000527B                 push    ecx
.text:0000527C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005283                 mov     [ebp+var_4], ecx
.text:00005286                 mov     eax, [ebp+var_4]
.text:00005289                 mov     dword ptr [eax], 0
.text:0000528F                 mov     dword ptr [eax+4], 0
.text:00005296                 mov     ecx, [ebp+var_4]
.text:00005299                 mov     dword ptr [ecx+8], 0
.text:000052A0                 mov     dword ptr [ecx+0Ch], 0
.text:000052A7                 mov     edx, [ebp+var_4]
.text:000052AA                 mov     dword ptr [edx+10h], 0
.text:000052B1                 mov     dword ptr [edx+14h], 0
.text:000052B8                 mov     eax, [ebp+var_4]
.text:000052BB                 mov     dword ptr [eax+18h], 0
.text:000052C2                 mov     dword ptr [eax+1Ch], 0
.text:000052C9                 mov     ecx, [ebp+var_4]
.text:000052CC                 mov     dword ptr [ecx+20h], 0
.text:000052D3                 mov     dword ptr [ecx+24h], 0
.text:000052DA                 mov     edx, [ebp+var_4]
.text:000052DD                 mov     dword ptr [edx+28h], 0
.text:000052E4                 mov     dword ptr [edx+2Ch], 0
.text:000052EB                 mov     eax, [ebp+var_4]
.text:000052EE                 mov     byte ptr [eax+30h], 0
.text:000052F2                 mov     ecx, [ebp+var_4]
.text:000052F5                 add     ecx, 34h ; '4'
.text:000052F8                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:000052FD                 mov     eax, [ebp+var_4]
.text:00005300                 add     esp, 4
.text:00005303                 cmp     ebp, esp
.text:00005305                 call    __RTC_CheckEsp
.text:0000530A                 mov     esp, ebp
.text:0000530C                 pop     ebp
.text:0000530D                 retn
.text:0000530D ??0CInArchiveInfo@NZip@NArchive@@QAE@XZ endp
.text:0000530D
.text:0000530D ; ---------------------------------------------------------------------------
.text:0000530E                 align 10h
.text:0000530E _text           ends
.text:0000530E
.text:00005310 ; ===========================================================================
.text:00005310
.text:00005310 ; Segment type: Pure code
.text:00005310 ; Segment permissions: Read/Execute
.text:00005310 _text           segment para public 'CODE' use32
.text:00005310                 assume cs:_text
.text:00005310                 ;org 5310h
.text:00005310 ; COMDAT (pick any)
.text:00005310                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005310
.text:00005310 ; =============== S U B R O U T I N E =======================================
.text:00005310
.text:00005310 ; Attributes: bp-based frame
.text:00005310
.text:00005310 ; public: __thiscall CInBuffer::CInBuffer(void)
.text:00005310                 public ??0CInBuffer@@QAE@XZ
.text:00005310 ??0CInBuffer@@QAE@XZ proc near          ; CODE XREF: NArchive::NZip::CInArchive::CInArchive(void)+30p
.text:00005310
.text:00005310 var_4           = dword ptr -4
.text:00005310
.text:00005310                 push    ebp
.text:00005311                 mov     ebp, esp
.text:00005313                 push    ecx
.text:00005314                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000531B                 mov     [ebp+var_4], ecx
.text:0000531E                 mov     ecx, [ebp+var_4] ; this
.text:00005321                 call    ??0CInBufferBase@@QAE@XZ ; CInBufferBase::CInBufferBase(void)
.text:00005326                 mov     eax, [ebp+var_4]
.text:00005329                 add     esp, 4
.text:0000532C                 cmp     ebp, esp
.text:0000532E                 call    __RTC_CheckEsp
.text:00005333                 mov     esp, ebp
.text:00005335                 pop     ebp
.text:00005336                 retn
.text:00005336 ??0CInBuffer@@QAE@XZ endp
.text:00005336
.text:00005336 ; ---------------------------------------------------------------------------
.text:00005337                 align 4
.text:00005337 _text           ends
.text:00005337
.text:00005338 ; ===========================================================================
.text:00005338
.text:00005338 ; Segment type: Pure code
.text:00005338 ; Segment permissions: Read/Execute
.text:00005338 _text           segment para public 'CODE' use32
.text:00005338                 assume cs:_text
.text:00005338                 ;org 5338h
.text:00005338 ; COMDAT (pick any)
.text:00005338                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005338
.text:00005338 ; =============== S U B R O U T I N E =======================================
.text:00005338
.text:00005338 ; Attributes: bp-based frame
.text:00005338
.text:00005338 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00005338                 public ??1AString@@QAE@XZ
.text:00005338 ??1AString@@QAE@XZ proc near            ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+119p
.text:00005338                                         ; NArchive::NZip::BytesToString(CBuffer<uchar> const &)+88p ...
.text:00005338
.text:00005338 var_8           = dword ptr -8
.text:00005338 var_4           = dword ptr -4
.text:00005338
.text:00005338                 push    ebp
.text:00005339                 mov     ebp, esp
.text:0000533B                 sub     esp, 8
.text:0000533E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005345                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000534C                 mov     [ebp+var_4], ecx
.text:0000534F                 mov     eax, [ebp+var_4]
.text:00005352                 mov     ecx, [eax]
.text:00005354                 mov     [ebp+var_8], ecx
.text:00005357                 mov     edx, [ebp+var_8]
.text:0000535A                 push    edx             ; void *
.text:0000535B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005360                 add     esp, 4
.text:00005363                 add     esp, 8
.text:00005366                 cmp     ebp, esp
.text:00005368                 call    __RTC_CheckEsp
.text:0000536D                 mov     esp, ebp
.text:0000536F                 pop     ebp
.text:00005370                 retn
.text:00005370 ??1AString@@QAE@XZ endp
.text:00005370
.text:00005370 ; ---------------------------------------------------------------------------
.text:00005371                 align 4
.text:00005371 _text           ends
.text:00005371
.text:00005374 ; ===========================================================================
.text:00005374
.text:00005374 ; Segment type: Pure code
.text:00005374 ; Segment permissions: Read/Execute
.text:00005374 _text           segment para public 'CODE' use32
.text:00005374                 assume cs:_text
.text:00005374                 ;org 5374h
.text:00005374 ; COMDAT (pick any)
.text:00005374                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005374
.text:00005374 ; =============== S U B R O U T I N E =======================================
.text:00005374
.text:00005374 ; Attributes: bp-based frame
.text:00005374
.text:00005374 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00005374                 public ??1UString@@QAE@XZ
.text:00005374 ??1UString@@QAE@XZ proc near            ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+10Dp
.text:00005374                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+10Ap ...
.text:00005374
.text:00005374 var_8           = dword ptr -8
.text:00005374 var_4           = dword ptr -4
.text:00005374
.text:00005374                 push    ebp
.text:00005375                 mov     ebp, esp
.text:00005377                 sub     esp, 8
.text:0000537A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005381                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005388                 mov     [ebp+var_4], ecx
.text:0000538B                 mov     eax, [ebp+var_4]
.text:0000538E                 mov     ecx, [eax]
.text:00005390                 mov     [ebp+var_8], ecx
.text:00005393                 mov     edx, [ebp+var_8]
.text:00005396                 push    edx             ; void *
.text:00005397                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000539C                 add     esp, 4
.text:0000539F                 add     esp, 8
.text:000053A2                 cmp     ebp, esp
.text:000053A4                 call    __RTC_CheckEsp
.text:000053A9                 mov     esp, ebp
.text:000053AB                 pop     ebp
.text:000053AC                 retn
.text:000053AC ??1UString@@QAE@XZ endp
.text:000053AC
.text:000053AC ; ---------------------------------------------------------------------------
.text:000053AD                 align 10h
.text:000053AD _text           ends
.text:000053AD
.text:000053B0 ; ===========================================================================
.text:000053B0
.text:000053B0 ; Segment type: Pure code
.text:000053B0 ; Segment permissions: Read/Execute
.text:000053B0 _text           segment para public 'CODE' use32
.text:000053B0                 assume cs:_text
.text:000053B0                 ;org 53B0h
.text:000053B0 ; COMDAT (pick any)
.text:000053B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000053B0
.text:000053B0 ; =============== S U B R O U T I N E =======================================
.text:000053B0
.text:000053B0 ; Attributes: bp-based frame
.text:000053B0
.text:000053B0 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:000053B0                 public ??0CPropVariant@NCOM@NWindows@@QAE@XZ
.text:000053B0 ??0CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:000053B0                                         ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+4Bp
.text:000053B0                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+4Ep
.text:000053B0
.text:000053B0 var_4           = dword ptr -4
.text:000053B0
.text:000053B0                 push    ebp
.text:000053B1                 mov     ebp, esp
.text:000053B3                 push    ecx
.text:000053B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000053BB                 mov     [ebp+var_4], ecx
.text:000053BE                 xor     eax, eax
.text:000053C0                 mov     ecx, [ebp+var_4]
.text:000053C3                 mov     [ecx], ax
.text:000053C6                 xor     edx, edx
.text:000053C8                 mov     eax, [ebp+var_4]
.text:000053CB                 mov     [eax+2], dx
.text:000053CF                 mov     ecx, [ebp+var_4]
.text:000053D2                 mov     dword ptr [ecx+8], 0
.text:000053D9                 mov     eax, [ebp+var_4]
.text:000053DC                 mov     esp, ebp
.text:000053DE                 pop     ebp
.text:000053DF                 retn
.text:000053DF ??0CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:000053DF
.text:000053DF _text           ends
.text:000053DF
.text:000053E0 ; ===========================================================================
.text:000053E0
.text:000053E0 ; Segment type: Pure code
.text:000053E0 ; Segment permissions: Read/Execute
.text:000053E0 _text           segment para public 'CODE' use32
.text:000053E0                 assume cs:_text
.text:000053E0                 ;org 53E0h
.text:000053E0 ; COMDAT (pick any)
.text:000053E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000053E0
.text:000053E0 ; =============== S U B R O U T I N E =======================================
.text:000053E0
.text:000053E0 ; Attributes: bp-based frame
.text:000053E0
.text:000053E0 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:000053E0                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:000053E0 ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:000053E0                                         ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+32Bp
.text:000053E0                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+7F8p ...
.text:000053E0
.text:000053E0 var_4           = dword ptr -4
.text:000053E0
.text:000053E0                 push    ebp
.text:000053E1                 mov     ebp, esp
.text:000053E3                 push    ecx
.text:000053E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000053EB                 mov     [ebp+var_4], ecx
.text:000053EE                 mov     ecx, [ebp+var_4] ; this
.text:000053F1                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:000053F6                 add     esp, 4
.text:000053F9                 cmp     ebp, esp
.text:000053FB                 call    __RTC_CheckEsp
.text:00005400                 mov     esp, ebp
.text:00005402                 pop     ebp
.text:00005403                 retn
.text:00005403 ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00005403
.text:00005403 _text           ends
.text:00005403
.text:00005404 ; ===========================================================================
.text:00005404
.text:00005404 ; Segment type: Pure code
.text:00005404 ; Segment permissions: Read/Execute
.text:00005404 _text           segment para public 'CODE' use32
.text:00005404                 assume cs:_text
.text:00005404                 ;org 5404h
.text:00005404 ; COMDAT (pick any)
.text:00005404                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005404
.text:00005404 ; =============== S U B R O U T I N E =======================================
.text:00005404
.text:00005404 ; Attributes: bp-based frame
.text:00005404
.text:00005404 ; unsigned __int64 __thiscall NArchive::NZip::CInArchiveInfo::GetPhySize(NArchive::NZip::CInArchiveInfo *__hidden this)
.text:00005404                 public ?GetPhySize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ
.text:00005404 ?GetPhySize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ proc near
.text:00005404                                         ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+129p
.text:00005404
.text:00005404 var_4           = dword ptr -4
.text:00005404
.text:00005404                 push    ebp
.text:00005405                 mov     ebp, esp
.text:00005407                 push    ecx
.text:00005408                 push    esi
.text:00005409                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005410                 mov     [ebp+var_4], ecx
.text:00005413                 mov     eax, [ebp+var_4]
.text:00005416                 mov     ecx, [ebp+var_4]
.text:00005419                 mov     edx, [eax+18h]
.text:0000541C                 sub     edx, [ecx]
.text:0000541E                 mov     esi, [eax+1Ch]
.text:00005421                 sbb     esi, [ecx+4]
.text:00005424                 mov     eax, edx
.text:00005426                 mov     edx, esi
.text:00005428                 pop     esi
.text:00005429                 mov     esp, ebp
.text:0000542B                 pop     ebp
.text:0000542C                 retn
.text:0000542C ?GetPhySize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ endp
.text:0000542C
.text:0000542C ; ---------------------------------------------------------------------------
.text:0000542D                 align 10h
.text:0000542D _text           ends
.text:0000542D
.text:00005430 ; ===========================================================================
.text:00005430
.text:00005430 ; Segment type: Pure code
.text:00005430 ; Segment permissions: Read/Execute
.text:00005430 _text           segment para public 'CODE' use32
.text:00005430                 assume cs:_text
.text:00005430                 ;org 5430h
.text:00005430 ; COMDAT (pick any)
.text:00005430                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005430
.text:00005430 ; =============== S U B R O U T I N E =======================================
.text:00005430
.text:00005430 ; Attributes: bp-based frame
.text:00005430
.text:00005430 ; unsigned __int64 __thiscall NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize(NArchive::NZip::CInArchiveInfo *__hidden this)
.text:00005430                 public ?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ
.text:00005430 ?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ proc near
.text:00005430                                         ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+167p
.text:00005430                                         ; NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+251p ...
.text:00005430
.text:00005430 var_4           = dword ptr -4
.text:00005430
.text:00005430                 push    ebp
.text:00005431                 mov     ebp, esp
.text:00005433                 push    ecx
.text:00005434                 push    esi
.text:00005435                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000543C                 mov     [ebp+var_4], ecx
.text:0000543F                 mov     eax, [ebp+var_4]
.text:00005442                 movzx   ecx, byte ptr [eax+30h]
.text:00005446                 test    ecx, ecx
.text:00005448                 jz      short loc_5455
.text:0000544A                 mov     edx, [ebp+var_4]
.text:0000544D                 mov     eax, [edx+28h]
.text:00005450                 mov     edx, [edx+2Ch]
.text:00005453                 jmp     short loc_546A
.text:00005455 ; ---------------------------------------------------------------------------
.text:00005455
.text:00005455 loc_5455:                               ; CODE XREF: NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize(void)+18j
.text:00005455                 mov     eax, [ebp+var_4]
.text:00005458                 mov     ecx, [ebp+var_4]
.text:0000545B                 mov     edx, [eax+10h]
.text:0000545E                 sub     edx, [ecx]
.text:00005460                 mov     esi, [eax+14h]
.text:00005463                 sbb     esi, [ecx+4]
.text:00005466                 mov     eax, edx
.text:00005468                 mov     edx, esi
.text:0000546A
.text:0000546A loc_546A:                               ; CODE XREF: NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize(void)+23j
.text:0000546A                 pop     esi
.text:0000546B                 mov     esp, ebp
.text:0000546D                 pop     ebp
.text:0000546E                 retn
.text:0000546E ?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ endp
.text:0000546E
.text:0000546E ; ---------------------------------------------------------------------------
.text:0000546F                 align 10h
.text:0000546F _text           ends
.text:0000546F
.text:00005470 ; ===========================================================================
.text:00005470
.text:00005470 ; Segment type: Pure code
.text:00005470 ; Segment permissions: Read/Execute
.text:00005470 _text           segment para public 'CODE' use32
.text:00005470                 assume cs:_text
.text:00005470                 ;org 5470h
.text:00005470 ; COMDAT (pick any)
.text:00005470                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005470
.text:00005470 ; =============== S U B R O U T I N E =======================================
.text:00005470
.text:00005470 ; Attributes: bp-based frame
.text:00005470
.text:00005470 ; bool __thiscall NArchive::NZip::CInArchive::IsOpen(NArchive::NZip::CInArchive *__hidden this)
.text:00005470                 public ?IsOpen@CInArchive@NZip@NArchive@@QBE_NXZ
.text:00005470 ?IsOpen@CInArchive@NZip@NArchive@@QBE_NXZ proc near
.text:00005470                                         ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+2DCp
.text:00005470
.text:00005470 var_4           = dword ptr -4
.text:00005470
.text:00005470                 push    ebp
.text:00005471                 mov     ebp, esp
.text:00005473                 push    ecx
.text:00005474                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000547B                 mov     [ebp+var_4], ecx
.text:0000547E                 mov     ecx, [ebp+var_4]
.text:00005481                 add     ecx, 80h ; 'Ç'
.text:00005487                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:0000548C                 neg     eax
.text:0000548E                 sbb     eax, eax
.text:00005490                 neg     eax
.text:00005492                 add     esp, 4
.text:00005495                 cmp     ebp, esp
.text:00005497                 call    __RTC_CheckEsp
.text:0000549C                 mov     esp, ebp
.text:0000549E                 pop     ebp
.text:0000549F                 retn
.text:0000549F ?IsOpen@CInArchive@NZip@NArchive@@QBE_NXZ endp
.text:0000549F
.text:0000549F _text           ends
.text:0000549F
.text:000054A0 ; ===========================================================================
.text:000054A0
.text:000054A0 ; Segment type: Pure code
.text:000054A0 ; Segment permissions: Read/Execute
.text:000054A0 _text           segment para public 'CODE' use32
.text:000054A0                 assume cs:_text
.text:000054A0                 ;org 54A0h
.text:000054A0 ; COMDAT (pick any)
.text:000054A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000054A0
.text:000054A0 ; =============== S U B R O U T I N E =======================================
.text:000054A0
.text:000054A0 ; Attributes: bp-based frame
.text:000054A0
.text:000054A0 ; bool __thiscall NArchive::NZip::CInArchive::CanUpdate(NArchive::NZip::CInArchive *__hidden this)
.text:000054A0                 public ?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ
.text:000054A0 ?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ proc near
.text:000054A0                                         ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+2F8p
.text:000054A0
.text:000054A0 var_18          = dword ptr -18h
.text:000054A0 var_14          = dword ptr -14h
.text:000054A0 var_10          = dword ptr -10h
.text:000054A0 var_C           = dword ptr -0Ch
.text:000054A0 var_8           = dword ptr -8
.text:000054A0 var_4           = dword ptr -4
.text:000054A0
.text:000054A0                 push    ebp
.text:000054A1                 mov     ebp, esp
.text:000054A3                 sub     esp, 18h
.text:000054A6                 mov     eax, 0CCCCCCCCh
.text:000054AB                 mov     [ebp+var_18], eax
.text:000054AE                 mov     [ebp+var_14], eax
.text:000054B1                 mov     [ebp+var_10], eax
.text:000054B4                 mov     [ebp+var_C], eax
.text:000054B7                 mov     [ebp+var_8], eax
.text:000054BA                 mov     [ebp+var_4], eax
.text:000054BD                 mov     [ebp+var_4], ecx
.text:000054C0                 mov     ecx, [ebp+var_4] ; this
.text:000054C3                 call    ?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::AreThereErrors(void)
.text:000054C8                 movzx   eax, al
.text:000054CB                 test    eax, eax
.text:000054CD                 jz      short loc_54D6
.text:000054CF                 xor     al, al
.text:000054D1                 jmp     loc_5557
.text:000054D6 ; ---------------------------------------------------------------------------
.text:000054D6
.text:000054D6 loc_54D6:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+2Dj
.text:000054D6                 mov     ecx, [ebp+var_4]
.text:000054D9                 mov     [ebp+var_8], ecx
.text:000054DC                 mov     edx, [ebp+var_8]
.text:000054DF                 cmp     dword ptr [edx+3Ch], 0
.text:000054E3                 jg      short loc_54F4
.text:000054E5                 jl      short loc_54F0
.text:000054E7                 mov     eax, [ebp+var_8]
.text:000054EA                 cmp     dword ptr [eax+38h], 0
.text:000054EE                 jnb     short loc_54F4
.text:000054F0
.text:000054F0 loc_54F0:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+45j
.text:000054F0                 xor     al, al
.text:000054F2                 jmp     short loc_5557
.text:000054F4 ; ---------------------------------------------------------------------------
.text:000054F4
.text:000054F4 loc_54F4:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+43j
.text:000054F4                                         ; NArchive::NZip::CInArchive::CanUpdate(void)+4Ej
.text:000054F4                 mov     ecx, [ebp+var_4]
.text:000054F7                 mov     edx, [ebp+var_4]
.text:000054FA                 mov     [ebp+var_C], ecx
.text:000054FD                 mov     [ebp+var_10], edx
.text:00005500                 mov     eax, [ebp+var_C]
.text:00005503                 mov     ecx, [ebp+var_10]
.text:00005506                 mov     edx, [eax+4Ch]
.text:00005509                 cmp     edx, [ecx+3Ch]
.text:0000550C                 jg      short loc_5522
.text:0000550E                 jl      short loc_551E
.text:00005510                 mov     eax, [ebp+var_C]
.text:00005513                 mov     ecx, [ebp+var_10]
.text:00005516                 mov     edx, [eax+48h]
.text:00005519                 cmp     edx, [ecx+38h]
.text:0000551C                 jnb     short loc_5522
.text:0000551E
.text:0000551E loc_551E:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+6Ej
.text:0000551E                 xor     al, al
.text:00005520                 jmp     short loc_5557
.text:00005522 ; ---------------------------------------------------------------------------
.text:00005522
.text:00005522 loc_5522:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+6Cj
.text:00005522                                         ; NArchive::NZip::CInArchive::CanUpdate(void)+7Cj
.text:00005522                 mov     ecx, [ebp+var_4]
.text:00005525                 add     ecx, 38h ; '8'  ; this
.text:00005528                 call    ?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize(void)
.text:0000552D                 mov     [ebp+var_18], eax
.text:00005530                 mov     [ebp+var_14], edx
.text:00005533                 mov     eax, [ebp+var_18]
.text:00005536                 or      eax, [ebp+var_14]
.text:00005539                 jz      short loc_553F
.text:0000553B                 xor     al, al
.text:0000553D                 jmp     short loc_5557
.text:0000553F ; ---------------------------------------------------------------------------
.text:0000553F
.text:0000553F loc_553F:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+99j
.text:0000553F                 mov     ecx, [ebp+var_4]
.text:00005542                 add     ecx, 38h ; '8'  ; this
.text:00005545                 call    ?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchiveInfo::ThereIsTail(void)
.text:0000554A                 movzx   ecx, al
.text:0000554D                 test    ecx, ecx
.text:0000554F                 jz      short loc_5555
.text:00005551                 xor     al, al
.text:00005553                 jmp     short loc_5557
.text:00005555 ; ---------------------------------------------------------------------------
.text:00005555
.text:00005555 loc_5555:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+AFj
.text:00005555                 mov     al, 1
.text:00005557
.text:00005557 loc_5557:                               ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+31j
.text:00005557                                         ; NArchive::NZip::CInArchive::CanUpdate(void)+52j ...
.text:00005557                 add     esp, 18h
.text:0000555A                 cmp     ebp, esp
.text:0000555C                 call    __RTC_CheckEsp
.text:00005561                 mov     esp, ebp
.text:00005563                 pop     ebp
.text:00005564                 retn
.text:00005564 ?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ endp
.text:00005564
.text:00005564 ; ---------------------------------------------------------------------------
.text:00005565                 align 4
.text:00005565 _text           ends
.text:00005565
.text:00005568 ; ===========================================================================
.text:00005568
.text:00005568 ; Segment type: Pure code
.text:00005568 ; Segment permissions: Read/Execute
.text:00005568 _text           segment para public 'CODE' use32
.text:00005568                 assume cs:_text
.text:00005568                 ;org 5568h
.text:00005568 ; COMDAT (pick any)
.text:00005568                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005568
.text:00005568 ; =============== S U B R O U T I N E =======================================
.text:00005568
.text:00005568 ; Attributes: bp-based frame
.text:00005568
.text:00005568 ; bool __thiscall NArchive::NZip::CInArchiveInfo::ThereIsTail(NArchive::NZip::CInArchiveInfo *__hidden this)
.text:00005568                 public ?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ
.text:00005568 ?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ proc near
.text:00005568                                         ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+A5p
.text:00005568
.text:00005568 var_10          = dword ptr -10h
.text:00005568 var_C           = dword ptr -0Ch
.text:00005568 var_8           = dword ptr -8
.text:00005568 var_4           = dword ptr -4
.text:00005568
.text:00005568                 push    ebp
.text:00005569                 mov     ebp, esp
.text:0000556B                 sub     esp, 10h
.text:0000556E                 mov     eax, 0CCCCCCCCh
.text:00005573                 mov     [ebp+var_10], eax
.text:00005576                 mov     [ebp+var_C], eax
.text:00005579                 mov     [ebp+var_8], eax
.text:0000557C                 mov     [ebp+var_4], eax
.text:0000557F                 mov     [ebp+var_4], ecx
.text:00005582                 mov     eax, [ebp+var_4]
.text:00005585                 mov     ecx, [ebp+var_4]
.text:00005588                 mov     [ebp+var_8], eax
.text:0000558B                 mov     [ebp+var_C], ecx
.text:0000558E                 mov     edx, [ebp+var_8]
.text:00005591                 mov     eax, [ebp+var_C]
.text:00005594                 mov     ecx, [edx+24h]
.text:00005597                 cmp     ecx, [eax+1Ch]
.text:0000559A                 jb      short loc_55B5
.text:0000559C                 ja      short loc_55AC
.text:0000559E                 mov     edx, [ebp+var_8]
.text:000055A1                 mov     eax, [ebp+var_C]
.text:000055A4                 mov     ecx, [edx+20h]
.text:000055A7                 cmp     ecx, [eax+18h]
.text:000055AA                 jbe     short loc_55B5
.text:000055AC
.text:000055AC loc_55AC:                               ; CODE XREF: NArchive::NZip::CInArchiveInfo::ThereIsTail(void)+34j
.text:000055AC                 mov     [ebp+var_10], 1
.text:000055B3                 jmp     short loc_55BC
.text:000055B5 ; ---------------------------------------------------------------------------
.text:000055B5
.text:000055B5 loc_55B5:                               ; CODE XREF: NArchive::NZip::CInArchiveInfo::ThereIsTail(void)+32j
.text:000055B5                                         ; NArchive::NZip::CInArchiveInfo::ThereIsTail(void)+42j
.text:000055B5                 mov     [ebp+var_10], 0
.text:000055BC
.text:000055BC loc_55BC:                               ; CODE XREF: NArchive::NZip::CInArchiveInfo::ThereIsTail(void)+4Bj
.text:000055BC                 mov     al, byte ptr [ebp+var_10]
.text:000055BF                 mov     esp, ebp
.text:000055C1                 pop     ebp
.text:000055C2                 retn
.text:000055C2 ?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ endp
.text:000055C2
.text:000055C2 ; ---------------------------------------------------------------------------
.text:000055C3                 align 4
.text:000055C3 _text           ends
.text:000055C3
.text:000055C4 ; ===========================================================================
.text:000055C4
.text:000055C4 ; Segment type: Pure code
.text:000055C4 ; Segment permissions: Read/Execute
.text:000055C4 _text           segment para public 'CODE' use32
.text:000055C4                 assume cs:_text
.text:000055C4                 ;org 55C4h
.text:000055C4 ; COMDAT (pick any)
.text:000055C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000055C4
.text:000055C4 ; =============== S U B R O U T I N E =======================================
.text:000055C4
.text:000055C4 ; Attributes: bp-based frame
.text:000055C4
.text:000055C4 ; bool __thiscall NArchive::NZip::CInArchive::AreThereErrors(NArchive::NZip::CInArchive *__hidden this)
.text:000055C4                 public ?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ
.text:000055C4 ?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ proc near
.text:000055C4                                         ; CODE XREF: NArchive::NZip::CInArchive::CanUpdate(void)+23p
.text:000055C4
.text:000055C4 var_8           = dword ptr -8
.text:000055C4 var_4           = dword ptr -4
.text:000055C4
.text:000055C4                 push    ebp
.text:000055C5                 mov     ebp, esp
.text:000055C7                 sub     esp, 8
.text:000055CA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000055D1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000055D8                 mov     [ebp+var_4], ecx
.text:000055DB                 mov     eax, [ebp+var_4]
.text:000055DE                 movzx   ecx, byte ptr [eax+7Ah]
.text:000055E2                 test    ecx, ecx
.text:000055E4                 jnz     short loc_55FA
.text:000055E6                 mov     edx, [ebp+var_4]
.text:000055E9                 movzx   eax, byte ptr [edx+7Dh]
.text:000055ED                 test    eax, eax
.text:000055EF                 jnz     short loc_55FA
.text:000055F1                 mov     [ebp+var_8], 0
.text:000055F8                 jmp     short loc_5601
.text:000055FA ; ---------------------------------------------------------------------------
.text:000055FA
.text:000055FA loc_55FA:                               ; CODE XREF: NArchive::NZip::CInArchive::AreThereErrors(void)+20j
.text:000055FA                                         ; NArchive::NZip::CInArchive::AreThereErrors(void)+2Bj
.text:000055FA                 mov     [ebp+var_8], 1
.text:00005601
.text:00005601 loc_5601:                               ; CODE XREF: NArchive::NZip::CInArchive::AreThereErrors(void)+34j
.text:00005601                 mov     al, byte ptr [ebp+var_8]
.text:00005604                 mov     esp, ebp
.text:00005606                 pop     ebp
.text:00005607                 retn
.text:00005607 ?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ endp
.text:00005607
.text:00005607 _text           ends
.text:00005607
.text:00005608 ; ===========================================================================
.text:00005608
.text:00005608 ; Segment type: Pure code
.text:00005608 ; Segment permissions: Read/Execute
.text:00005608 _text           segment para public 'CODE' use32
.text:00005608                 assume cs:_text
.text:00005608                 ;org 5608h
.text:00005608 ; COMDAT (pick any)
.text:00005608                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005608
.text:00005608 ; =============== S U B R O U T I N E =======================================
.text:00005608
.text:00005608 ; Attributes: bp-based frame
.text:00005608
.text:00005608 ; public: __thiscall AString::operator char const *(void)const
.text:00005608                 public ??BAString@@QBEPBDXZ
.text:00005608 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+726p
.text:00005608                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+7F9p
.text:00005608
.text:00005608 var_4           = dword ptr -4
.text:00005608
.text:00005608                 push    ebp
.text:00005609                 mov     ebp, esp
.text:0000560B                 push    ecx
.text:0000560C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005613                 mov     [ebp+var_4], ecx
.text:00005616                 mov     eax, [ebp+var_4]
.text:00005619                 mov     eax, [eax]
.text:0000561B                 mov     esp, ebp
.text:0000561D                 pop     ebp
.text:0000561E                 retn
.text:0000561E ??BAString@@QBEPBDXZ endp
.text:0000561E
.text:0000561E ; ---------------------------------------------------------------------------
.text:0000561F                 align 10h
.text:0000561F _text           ends
.text:0000561F
.text:00005620 ; ===========================================================================
.text:00005620
.text:00005620 ; Segment type: Pure code
.text:00005620 ; Segment permissions: Read/Execute
.text:00005620 _text           segment para public 'CODE' use32
.text:00005620                 assume cs:_text
.text:00005620                 ;org 5620h
.text:00005620 ; COMDAT (pick any)
.text:00005620                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005620
.text:00005620 ; =============== S U B R O U T I N E =======================================
.text:00005620
.text:00005620 ; Attributes: bp-based frame
.text:00005620
.text:00005620 ; public: class AString & __thiscall AString::operator+=(char)
.text:00005620                 public ??YAString@@QAEAAV0@D@Z
.text:00005620 ??YAString@@QAEAAV0@D@Z proc near       ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+662p
.text:00005620
.text:00005620 var_C           = dword ptr -0Ch
.text:00005620 var_8           = dword ptr -8
.text:00005620 var_4           = dword ptr -4
.text:00005620 arg_0           = byte ptr  8
.text:00005620
.text:00005620                 push    ebp
.text:00005621                 mov     ebp, esp
.text:00005623                 sub     esp, 0Ch
.text:00005626                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000562D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005634                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000563B                 mov     [ebp+var_4], ecx
.text:0000563E                 mov     eax, [ebp+var_4]
.text:00005641                 mov     ecx, [ebp+var_4]
.text:00005644                 mov     edx, [eax+8]
.text:00005647                 cmp     edx, [ecx+4]
.text:0000564A                 jnz     short loc_5654
.text:0000564C                 mov     ecx, [ebp+var_4] ; this
.text:0000564F                 call    ?Grow_1@AString@@AAEXXZ ; AString::Grow_1(void)
.text:00005654
.text:00005654 loc_5654:                               ; CODE XREF: AString::operator+=(char)+2Aj
.text:00005654                 mov     eax, [ebp+var_4]
.text:00005657                 mov     ecx, [eax+4]
.text:0000565A                 mov     [ebp+var_8], ecx
.text:0000565D                 mov     edx, [ebp+var_4]
.text:00005660                 mov     eax, [edx]
.text:00005662                 mov     [ebp+var_C], eax
.text:00005665                 mov     ecx, [ebp+var_C]
.text:00005668                 add     ecx, [ebp+var_8]
.text:0000566B                 mov     dl, [ebp+arg_0]
.text:0000566E                 mov     [ecx], dl
.text:00005670                 mov     eax, [ebp+var_8]
.text:00005673                 add     eax, 1
.text:00005676                 mov     [ebp+var_8], eax
.text:00005679                 mov     ecx, [ebp+var_C]
.text:0000567C                 add     ecx, [ebp+var_8]
.text:0000567F                 mov     byte ptr [ecx], 0
.text:00005682                 mov     edx, [ebp+var_4]
.text:00005685                 mov     eax, [ebp+var_8]
.text:00005688                 mov     [edx+4], eax
.text:0000568B                 mov     eax, [ebp+var_4]
.text:0000568E                 add     esp, 0Ch
.text:00005691                 cmp     ebp, esp
.text:00005693                 call    __RTC_CheckEsp
.text:00005698                 mov     esp, ebp
.text:0000569A                 pop     ebp
.text:0000569B                 retn    4
.text:0000569B ??YAString@@QAEAAV0@D@Z endp
.text:0000569B
.text:0000569B ; ---------------------------------------------------------------------------
.text:0000569E                 align 10h
.text:0000569E _text           ends
.text:0000569E
.text:000056A0 ; ===========================================================================
.text:000056A0
.text:000056A0 ; Segment type: Pure code
.text:000056A0 ; Segment permissions: Read/Execute
.text:000056A0 _text           segment para public 'CODE' use32
.text:000056A0                 assume cs:_text
.text:000056A0                 ;org 56A0h
.text:000056A0 ; COMDAT (pick any)
.text:000056A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000056A0
.text:000056A0 ; =============== S U B R O U T I N E =======================================
.text:000056A0
.text:000056A0 ; Attributes: bp-based frame
.text:000056A0
.text:000056A0 ; _DWORD __thiscall NArchive::NZip::CWzAesExtra::CWzAesExtra(NArchive::NZip::CWzAesExtra *__hidden this)
.text:000056A0                 public ??0CWzAesExtra@NZip@NArchive@@QAE@XZ
.text:000056A0 ??0CWzAesExtra@NZip@NArchive@@QAE@XZ proc near
.text:000056A0                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+4F7p
.text:000056A0                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+F1p ...
.text:000056A0
.text:000056A0 var_4           = dword ptr -4
.text:000056A0
.text:000056A0                 push    ebp
.text:000056A1                 mov     ebp, esp
.text:000056A3                 push    ecx
.text:000056A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000056AB                 mov     [ebp+var_4], ecx
.text:000056AE                 mov     eax, 2
.text:000056B3                 mov     ecx, [ebp+var_4]
.text:000056B6                 mov     [ecx], ax
.text:000056B9                 mov     edx, [ebp+var_4]
.text:000056BC                 mov     byte ptr [edx+2], 3
.text:000056C0                 xor     eax, eax
.text:000056C2                 mov     ecx, [ebp+var_4]
.text:000056C5                 mov     [ecx+4], ax
.text:000056C9                 mov     eax, [ebp+var_4]
.text:000056CC                 mov     esp, ebp
.text:000056CE                 pop     ebp
.text:000056CF                 retn
.text:000056CF ??0CWzAesExtra@NZip@NArchive@@QAE@XZ endp
.text:000056CF
.text:000056CF _text           ends
.text:000056CF
.text:000056D0 ; ===========================================================================
.text:000056D0
.text:000056D0 ; Segment type: Pure code
.text:000056D0 ; Segment permissions: Read/Execute
.text:000056D0 _text           segment para public 'CODE' use32
.text:000056D0                 assume cs:_text
.text:000056D0                 ;org 56D0h
.text:000056D0 ; COMDAT (pick any)
.text:000056D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000056D0
.text:000056D0 ; =============== S U B R O U T I N E =======================================
.text:000056D0
.text:000056D0 ; Attributes: bp-based frame
.text:000056D0
.text:000056D0 ; bool __thiscall NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CExtraBlock *this, struct NArchive::NZip::CWzAesExtra *)
.text:000056D0                 public ?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z
.text:000056D0 ?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z proc near
.text:000056D0                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+509p
.text:000056D0                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+100p ...
.text:000056D0
.text:000056D0 var_8           = dword ptr -8
.text:000056D0 var_4           = dword ptr -4
.text:000056D0 arg_0           = dword ptr  8
.text:000056D0
.text:000056D0                 push    ebp
.text:000056D1                 mov     ebp, esp
.text:000056D3                 sub     esp, 8
.text:000056D6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000056DD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000056E4                 mov     [ebp+var_4], ecx
.text:000056E7                 mov     [ebp+var_8], 0
.text:000056EE                 jmp     short loc_56F9
.text:000056F0 ; ---------------------------------------------------------------------------
.text:000056F0
.text:000056F0 loc_56F0:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &):loc_5726j
.text:000056F0                 mov     eax, [ebp+var_8]
.text:000056F3                 add     eax, 1
.text:000056F6                 mov     [ebp+var_8], eax
.text:000056F9
.text:000056F9 loc_56F9:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &)+1Ej
.text:000056F9                 mov     ecx, [ebp+var_4]
.text:000056FC                 call    ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size(void)
.text:00005701                 cmp     [ebp+var_8], eax
.text:00005704                 jnb     short loc_5728
.text:00005706                 mov     ecx, [ebp+var_8]
.text:00005709                 push    ecx
.text:0000570A                 mov     ecx, [ebp+var_4]
.text:0000570D                 call    ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[](uint)
.text:00005712                 push    eax             ; struct NArchive::NZip::CExtraSubBlock *
.text:00005713                 mov     ecx, [ebp+arg_0] ; this
.text:00005716                 call    ?ParseFromSubBlock@CWzAesExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z ; NArchive::NZip::CWzAesExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)
.text:0000571B                 movzx   edx, al
.text:0000571E                 test    edx, edx
.text:00005720                 jz      short loc_5726
.text:00005722                 mov     al, 1
.text:00005724                 jmp     short loc_572A
.text:00005726 ; ---------------------------------------------------------------------------
.text:00005726
.text:00005726 loc_5726:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &)+50j
.text:00005726                 jmp     short loc_56F0
.text:00005728 ; ---------------------------------------------------------------------------
.text:00005728
.text:00005728 loc_5728:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &)+34j
.text:00005728                 xor     al, al
.text:0000572A
.text:0000572A loc_572A:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &)+54j
.text:0000572A                 add     esp, 8
.text:0000572D                 cmp     ebp, esp
.text:0000572F                 call    __RTC_CheckEsp
.text:00005734                 mov     esp, ebp
.text:00005736                 pop     ebp
.text:00005737                 retn    4
.text:00005737 ?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z endp
.text:00005737
.text:00005737 ; ---------------------------------------------------------------------------
.text:0000573A                 align 4
.text:0000573A _text           ends
.text:0000573A
.text:0000573C ; ===========================================================================
.text:0000573C
.text:0000573C ; Segment type: Pure code
.text:0000573C ; Segment permissions: Read/Execute
.text:0000573C _text           segment para public 'CODE' use32
.text:0000573C                 assume cs:_text
.text:0000573C                 ;org 573Ch
.text:0000573C ; COMDAT (pick any)
.text:0000573C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000573C
.text:0000573C ; =============== S U B R O U T I N E =======================================
.text:0000573C
.text:0000573C ; Attributes: bp-based frame
.text:0000573C
.text:0000573C ; bool __thiscall NArchive::NZip::CWzAesExtra::ParseFromSubBlock(NArchive::NZip::CWzAesExtra *this, const struct NArchive::NZip::CExtraSubBlock *)
.text:0000573C                 public ?ParseFromSubBlock@CWzAesExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z
.text:0000573C ?ParseFromSubBlock@CWzAesExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z proc near
.text:0000573C                                         ; CODE XREF: NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &)+46p
.text:0000573C
.text:0000573C var_8           = dword ptr -8
.text:0000573C var_4           = dword ptr -4
.text:0000573C arg_0           = dword ptr  8
.text:0000573C
.text:0000573C                 push    ebp
.text:0000573D                 mov     ebp, esp
.text:0000573F                 sub     esp, 8
.text:00005742                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005749                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005750                 mov     [ebp+var_4], ecx
.text:00005753                 mov     eax, [ebp+arg_0]
.text:00005756                 movzx   ecx, word ptr [eax]
.text:00005759                 cmp     ecx, 9901h
.text:0000575F                 jz      short loc_5765
.text:00005761                 xor     al, al
.text:00005763                 jmp     short loc_57CB
.text:00005765 ; ---------------------------------------------------------------------------
.text:00005765
.text:00005765 loc_5765:                               ; CODE XREF: NArchive::NZip::CWzAesExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)+23j
.text:00005765                 mov     ecx, [ebp+arg_0]
.text:00005768                 add     ecx, 4
.text:0000576B                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00005770                 cmp     eax, 7
.text:00005773                 jnb     short loc_5779
.text:00005775                 xor     al, al
.text:00005777                 jmp     short loc_57CB
.text:00005779 ; ---------------------------------------------------------------------------
.text:00005779
.text:00005779 loc_5779:                               ; CODE XREF: NArchive::NZip::CWzAesExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)+37j
.text:00005779                 mov     ecx, [ebp+arg_0]
.text:0000577C                 add     ecx, 4
.text:0000577F                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00005784                 mov     [ebp+var_8], eax
.text:00005787                 mov     edx, [ebp+var_4]
.text:0000578A                 mov     eax, [ebp+var_8]
.text:0000578D                 mov     cx, [eax]
.text:00005790                 mov     [edx], cx
.text:00005793                 mov     edx, [ebp+var_8]
.text:00005796                 movzx   eax, byte ptr [edx+2]
.text:0000579A                 cmp     eax, 41h ; 'A'
.text:0000579D                 jnz     short loc_57AB
.text:0000579F                 mov     ecx, [ebp+var_8]
.text:000057A2                 movzx   edx, byte ptr [ecx+3]
.text:000057A6                 cmp     edx, 45h ; 'E'
.text:000057A9                 jz      short loc_57AF
.text:000057AB
.text:000057AB loc_57AB:                               ; CODE XREF: NArchive::NZip::CWzAesExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)+61j
.text:000057AB                 xor     al, al
.text:000057AD                 jmp     short loc_57CB
.text:000057AF ; ---------------------------------------------------------------------------
.text:000057AF
.text:000057AF loc_57AF:                               ; CODE XREF: NArchive::NZip::CWzAesExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)+6Dj
.text:000057AF                 mov     eax, [ebp+var_4]
.text:000057B2                 mov     ecx, [ebp+var_8]
.text:000057B5                 mov     dl, [ecx+4]
.text:000057B8                 mov     [eax+2], dl
.text:000057BB                 mov     eax, [ebp+var_4]
.text:000057BE                 mov     ecx, [ebp+var_8]
.text:000057C1                 mov     dx, [ecx+5]
.text:000057C5                 mov     [eax+4], dx
.text:000057C9                 mov     al, 1
.text:000057CB
.text:000057CB loc_57CB:                               ; CODE XREF: NArchive::NZip::CWzAesExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)+27j
.text:000057CB                                         ; NArchive::NZip::CWzAesExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)+3Bj ...
.text:000057CB                 add     esp, 8
.text:000057CE                 cmp     ebp, esp
.text:000057D0                 call    __RTC_CheckEsp
.text:000057D5                 mov     esp, ebp
.text:000057D7                 pop     ebp
.text:000057D8                 retn    4
.text:000057D8 ?ParseFromSubBlock@CWzAesExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z endp
.text:000057D8
.text:000057D8 ; ---------------------------------------------------------------------------
.text:000057DB                 align 4
.text:000057DB _text           ends
.text:000057DB
.text:000057DC ; ===========================================================================
.text:000057DC
.text:000057DC ; Segment type: Pure code
.text:000057DC ; Segment permissions: Read/Execute
.text:000057DC _text           segment para public 'CODE' use32
.text:000057DC                 assume cs:_text
.text:000057DC                 ;org 57DCh
.text:000057DC ; COMDAT (pick any)
.text:000057DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000057DC
.text:000057DC ; =============== S U B R O U T I N E =======================================
.text:000057DC
.text:000057DC ; Attributes: bp-based frame
.text:000057DC
.text:000057DC ; bool __thiscall NArchive::NZip::CExtraBlock::GetStrongCrypto(NArchive::NZip::CExtraBlock *this, struct NArchive::NZip::CStrongCryptoExtra *)
.text:000057DC                 public ?GetStrongCrypto@CExtraBlock@NZip@NArchive@@QBE_NAAUCStrongCryptoExtra@23@@Z
.text:000057DC ?GetStrongCrypto@CExtraBlock@NZip@NArchive@@QBE_NAAUCStrongCryptoExtra@23@@Z proc near
.text:000057DC                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+597p
.text:000057DC                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+9Bp
.text:000057DC
.text:000057DC var_8           = dword ptr -8
.text:000057DC var_4           = dword ptr -4
.text:000057DC arg_0           = dword ptr  8
.text:000057DC
.text:000057DC                 push    ebp
.text:000057DD                 mov     ebp, esp
.text:000057DF                 sub     esp, 8
.text:000057E2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000057E9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000057F0                 mov     [ebp+var_4], ecx
.text:000057F3                 mov     [ebp+var_8], 0
.text:000057FA                 jmp     short loc_5805
.text:000057FC ; ---------------------------------------------------------------------------
.text:000057FC
.text:000057FC loc_57FC:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetStrongCrypto(NArchive::NZip::CStrongCryptoExtra &):loc_5832j
.text:000057FC                 mov     eax, [ebp+var_8]
.text:000057FF                 add     eax, 1
.text:00005802                 mov     [ebp+var_8], eax
.text:00005805
.text:00005805 loc_5805:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetStrongCrypto(NArchive::NZip::CStrongCryptoExtra &)+1Ej
.text:00005805                 mov     ecx, [ebp+var_4]
.text:00005808                 call    ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size(void)
.text:0000580D                 cmp     [ebp+var_8], eax
.text:00005810                 jnb     short loc_5834
.text:00005812                 mov     ecx, [ebp+var_8]
.text:00005815                 push    ecx
.text:00005816                 mov     ecx, [ebp+var_4]
.text:00005819                 call    ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[](uint)
.text:0000581E                 push    eax             ; struct NArchive::NZip::CExtraSubBlock *
.text:0000581F                 mov     ecx, [ebp+arg_0] ; this
.text:00005822                 call    ?ParseFromSubBlock@CStrongCryptoExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z ; NArchive::NZip::CStrongCryptoExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)
.text:00005827                 movzx   edx, al
.text:0000582A                 test    edx, edx
.text:0000582C                 jz      short loc_5832
.text:0000582E                 mov     al, 1
.text:00005830                 jmp     short loc_5836
.text:00005832 ; ---------------------------------------------------------------------------
.text:00005832
.text:00005832 loc_5832:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetStrongCrypto(NArchive::NZip::CStrongCryptoExtra &)+50j
.text:00005832                 jmp     short loc_57FC
.text:00005834 ; ---------------------------------------------------------------------------
.text:00005834
.text:00005834 loc_5834:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetStrongCrypto(NArchive::NZip::CStrongCryptoExtra &)+34j
.text:00005834                 xor     al, al
.text:00005836
.text:00005836 loc_5836:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetStrongCrypto(NArchive::NZip::CStrongCryptoExtra &)+54j
.text:00005836                 add     esp, 8
.text:00005839                 cmp     ebp, esp
.text:0000583B                 call    __RTC_CheckEsp
.text:00005840                 mov     esp, ebp
.text:00005842                 pop     ebp
.text:00005843                 retn    4
.text:00005843 ?GetStrongCrypto@CExtraBlock@NZip@NArchive@@QBE_NAAUCStrongCryptoExtra@23@@Z endp
.text:00005843
.text:00005843 ; ---------------------------------------------------------------------------
.text:00005846                 align 4
.text:00005846 _text           ends
.text:00005846
.text:00005848 ; ===========================================================================
.text:00005848
.text:00005848 ; Segment type: Pure code
.text:00005848 ; Segment permissions: Read/Execute
.text:00005848 _text           segment para public 'CODE' use32
.text:00005848                 assume cs:_text
.text:00005848                 ;org 5848h
.text:00005848 ; COMDAT (pick any)
.text:00005848                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005848
.text:00005848 ; =============== S U B R O U T I N E =======================================
.text:00005848
.text:00005848 ; Attributes: bp-based frame
.text:00005848
.text:00005848 ; bool __thiscall NArchive::NZip::CStrongCryptoExtra::ParseFromSubBlock(NArchive::NZip::CStrongCryptoExtra *this, const struct NArchive::NZip::CExtraSubBlock *)
.text:00005848                 public ?ParseFromSubBlock@CStrongCryptoExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z
.text:00005848 ?ParseFromSubBlock@CStrongCryptoExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z proc near
.text:00005848                                         ; CODE XREF: NArchive::NZip::CExtraBlock::GetStrongCrypto(NArchive::NZip::CStrongCryptoExtra &)+46p
.text:00005848
.text:00005848 var_8           = dword ptr -8
.text:00005848 var_4           = dword ptr -4
.text:00005848 arg_0           = dword ptr  8
.text:00005848
.text:00005848                 push    ebp
.text:00005849                 mov     ebp, esp
.text:0000584B                 sub     esp, 8
.text:0000584E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005855                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000585C                 mov     [ebp+var_4], ecx
.text:0000585F                 mov     eax, [ebp+arg_0]
.text:00005862                 movzx   ecx, word ptr [eax]
.text:00005865                 cmp     ecx, 17h
.text:00005868                 jz      short loc_586E
.text:0000586A                 xor     al, al
.text:0000586C                 jmp     short loc_58D6
.text:0000586E ; ---------------------------------------------------------------------------
.text:0000586E
.text:0000586E loc_586E:                               ; CODE XREF: NArchive::NZip::CStrongCryptoExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)+20j
.text:0000586E                 mov     ecx, [ebp+arg_0]
.text:00005871                 add     ecx, 4
.text:00005874                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00005879                 mov     [ebp+var_8], eax
.text:0000587C                 mov     ecx, [ebp+arg_0]
.text:0000587F                 add     ecx, 4
.text:00005882                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00005887                 cmp     eax, 8
.text:0000588A                 jnb     short loc_5890
.text:0000588C                 xor     al, al
.text:0000588E                 jmp     short loc_58D6
.text:00005890 ; ---------------------------------------------------------------------------
.text:00005890
.text:00005890 loc_5890:                               ; CODE XREF: NArchive::NZip::CStrongCryptoExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)+42j
.text:00005890                 mov     edx, [ebp+var_4]
.text:00005893                 mov     eax, [ebp+var_8]
.text:00005896                 mov     cx, [eax]
.text:00005899                 mov     [edx], cx
.text:0000589C                 mov     edx, [ebp+var_4]
.text:0000589F                 mov     eax, [ebp+var_8]
.text:000058A2                 mov     cx, [eax+2]
.text:000058A6                 mov     [edx+2], cx
.text:000058AA                 mov     edx, [ebp+var_4]
.text:000058AD                 mov     eax, [ebp+var_8]
.text:000058B0                 mov     cx, [eax+4]
.text:000058B4                 mov     [edx+4], cx
.text:000058B8                 mov     edx, [ebp+var_4]
.text:000058BB                 mov     eax, [ebp+var_8]
.text:000058BE                 mov     cx, [eax+6]
.text:000058C2                 mov     [edx+6], cx
.text:000058C6                 mov     edx, [ebp+var_4]
.text:000058C9                 movzx   eax, word ptr [edx]
.text:000058CC                 xor     ecx, ecx
.text:000058CE                 cmp     eax, 2
.text:000058D1                 setz    cl
.text:000058D4                 mov     al, cl
.text:000058D6
.text:000058D6 loc_58D6:                               ; CODE XREF: NArchive::NZip::CStrongCryptoExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)+24j
.text:000058D6                                         ; NArchive::NZip::CStrongCryptoExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)+46j
.text:000058D6                 add     esp, 8
.text:000058D9                 cmp     ebp, esp
.text:000058DB                 call    __RTC_CheckEsp
.text:000058E0                 mov     esp, ebp
.text:000058E2                 pop     ebp
.text:000058E3                 retn    4
.text:000058E3 ?ParseFromSubBlock@CStrongCryptoExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z endp
.text:000058E3
.text:000058E3 ; ---------------------------------------------------------------------------
.text:000058E6                 align 4
.text:000058E6 _text           ends
.text:000058E6
.text:000058E8 ; ===========================================================================
.text:000058E8
.text:000058E8 ; Segment type: Pure code
.text:000058E8 ; Segment permissions: Read/Execute
.text:000058E8 _text           segment para public 'CODE' use32
.text:000058E8                 assume cs:_text
.text:000058E8                 ;org 58E8h
.text:000058E8 ; COMDAT (pick any)
.text:000058E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000058E8
.text:000058E8 ; =============== S U B R O U T I N E =======================================
.text:000058E8
.text:000058E8 ; Attributes: bp-based frame
.text:000058E8
.text:000058E8 ; bool __thiscall NArchive::NZip::CExtraBlock::GetNtfsTime(NArchive::NZip::CExtraBlock *this, unsigned int, struct _FILETIME *)
.text:000058E8                 public ?GetNtfsTime@CExtraBlock@NZip@NArchive@@QBE_NIAAU_FILETIME@@@Z
.text:000058E8 ?GetNtfsTime@CExtraBlock@NZip@NArchive@@QBE_NIAAU_FILETIME@@@Z proc near
.text:000058E8                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+173p
.text:000058E8                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1E3p ...
.text:000058E8
.text:000058E8 var_C           = dword ptr -0Ch
.text:000058E8 var_8           = dword ptr -8
.text:000058E8 var_4           = dword ptr -4
.text:000058E8 arg_0           = dword ptr  8
.text:000058E8 arg_4           = dword ptr  0Ch
.text:000058E8
.text:000058E8                 push    ebp
.text:000058E9                 mov     ebp, esp
.text:000058EB                 sub     esp, 0Ch
.text:000058EE                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000058F5                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000058FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005903                 mov     [ebp+var_4], ecx
.text:00005906                 mov     [ebp+var_8], 0
.text:0000590D                 jmp     short loc_5918
.text:0000590F ; ---------------------------------------------------------------------------
.text:0000590F
.text:0000590F loc_590F:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetNtfsTime(uint,_FILETIME &):loc_5951j
.text:0000590F                 mov     eax, [ebp+var_8]
.text:00005912                 add     eax, 1
.text:00005915                 mov     [ebp+var_8], eax
.text:00005918
.text:00005918 loc_5918:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetNtfsTime(uint,_FILETIME &)+25j
.text:00005918                 mov     ecx, [ebp+var_4]
.text:0000591B                 call    ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size(void)
.text:00005920                 cmp     [ebp+var_8], eax
.text:00005923                 jnb     short loc_5953
.text:00005925                 mov     ecx, [ebp+var_8]
.text:00005928                 push    ecx
.text:00005929                 mov     ecx, [ebp+var_4]
.text:0000592C                 call    ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[](uint)
.text:00005931                 mov     [ebp+var_C], eax
.text:00005934                 mov     edx, [ebp+var_C]
.text:00005937                 movzx   eax, word ptr [edx]
.text:0000593A                 cmp     eax, 0Ah
.text:0000593D                 jnz     short loc_5951
.text:0000593F                 mov     ecx, [ebp+arg_4]
.text:00005942                 push    ecx             ; struct _FILETIME *
.text:00005943                 mov     edx, [ebp+arg_0]
.text:00005946                 push    edx             ; unsigned int
.text:00005947                 mov     ecx, [ebp+var_C] ; this
.text:0000594A                 call    ?ExtractNtfsTime@CExtraSubBlock@NZip@NArchive@@QBE_NIAAU_FILETIME@@@Z ; NArchive::NZip::CExtraSubBlock::ExtractNtfsTime(uint,_FILETIME &)
.text:0000594F                 jmp     short loc_5955
.text:00005951 ; ---------------------------------------------------------------------------
.text:00005951
.text:00005951 loc_5951:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetNtfsTime(uint,_FILETIME &)+55j
.text:00005951                 jmp     short loc_590F
.text:00005953 ; ---------------------------------------------------------------------------
.text:00005953
.text:00005953 loc_5953:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetNtfsTime(uint,_FILETIME &)+3Bj
.text:00005953                 xor     al, al
.text:00005955
.text:00005955 loc_5955:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetNtfsTime(uint,_FILETIME &)+67j
.text:00005955                 add     esp, 0Ch
.text:00005958                 cmp     ebp, esp
.text:0000595A                 call    __RTC_CheckEsp
.text:0000595F                 mov     esp, ebp
.text:00005961                 pop     ebp
.text:00005962                 retn    8
.text:00005962 ?GetNtfsTime@CExtraBlock@NZip@NArchive@@QBE_NIAAU_FILETIME@@@Z endp
.text:00005962
.text:00005962 ; ---------------------------------------------------------------------------
.text:00005965                 align 4
.text:00005965 _text           ends
.text:00005965
.text:00005968 ; ===========================================================================
.text:00005968
.text:00005968 ; Segment type: Pure code
.text:00005968 ; Segment permissions: Read/Execute
.text:00005968 _text           segment para public 'CODE' use32
.text:00005968                 assume cs:_text
.text:00005968                 ;org 5968h
.text:00005968 ; COMDAT (pick any)
.text:00005968                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005968
.text:00005968 ; =============== S U B R O U T I N E =======================================
.text:00005968
.text:00005968 ; Attributes: bp-based frame
.text:00005968
.text:00005968 ; bool __thiscall NArchive::NZip::CExtraBlock::GetUnixTime(NArchive::NZip::CExtraBlock *this, bool, unsigned int, unsigned int *)
.text:00005968                 public ?GetUnixTime@CExtraBlock@NZip@NArchive@@QBE_N_NIAAI@Z
.text:00005968 ?GetUnixTime@CExtraBlock@NZip@NArchive@@QBE_N_NIAAI@Z proc near
.text:00005968                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1A0p
.text:00005968                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+288p
.text:00005968
.text:00005968 var_C           = dword ptr -0Ch
.text:00005968 var_8           = dword ptr -8
.text:00005968 var_4           = dword ptr -4
.text:00005968 arg_0           = byte ptr  8
.text:00005968 arg_4           = dword ptr  0Ch
.text:00005968 arg_8           = dword ptr  10h
.text:00005968
.text:00005968                 push    ebp
.text:00005969                 mov     ebp, esp
.text:0000596B                 sub     esp, 0Ch
.text:0000596E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00005975                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000597C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005983                 mov     [ebp+var_4], ecx
.text:00005986                 mov     [ebp+var_8], 0
.text:0000598D                 jmp     short loc_5998
.text:0000598F ; ---------------------------------------------------------------------------
.text:0000598F
.text:0000598F loc_598F:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetUnixTime(bool,uint,uint &):loc_59D8j
.text:0000598F                 mov     eax, [ebp+var_8]
.text:00005992                 add     eax, 1
.text:00005995                 mov     [ebp+var_8], eax
.text:00005998
.text:00005998 loc_5998:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetUnixTime(bool,uint,uint &)+25j
.text:00005998                 mov     ecx, [ebp+var_4]
.text:0000599B                 call    ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size(void)
.text:000059A0                 cmp     [ebp+var_8], eax
.text:000059A3                 jnb     short loc_59DA
.text:000059A5                 mov     ecx, [ebp+var_8]
.text:000059A8                 push    ecx
.text:000059A9                 mov     ecx, [ebp+var_4]
.text:000059AC                 call    ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[](uint)
.text:000059B1                 mov     [ebp+var_C], eax
.text:000059B4                 mov     edx, [ebp+var_C]
.text:000059B7                 movzx   eax, word ptr [edx]
.text:000059BA                 cmp     eax, 5455h
.text:000059BF                 jnz     short loc_59D8
.text:000059C1                 mov     ecx, [ebp+arg_8]
.text:000059C4                 push    ecx             ; unsigned int *
.text:000059C5                 mov     edx, [ebp+arg_4]
.text:000059C8                 push    edx             ; unsigned int
.text:000059C9                 movzx   eax, [ebp+arg_0]
.text:000059CD                 push    eax             ; bool
.text:000059CE                 mov     ecx, [ebp+var_C] ; this
.text:000059D1                 call    ?ExtractUnixTime@CExtraSubBlock@NZip@NArchive@@QBE_N_NIAAI@Z ; NArchive::NZip::CExtraSubBlock::ExtractUnixTime(bool,uint,uint &)
.text:000059D6                 jmp     short loc_59DC
.text:000059D8 ; ---------------------------------------------------------------------------
.text:000059D8
.text:000059D8 loc_59D8:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetUnixTime(bool,uint,uint &)+57j
.text:000059D8                 jmp     short loc_598F
.text:000059DA ; ---------------------------------------------------------------------------
.text:000059DA
.text:000059DA loc_59DA:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetUnixTime(bool,uint,uint &)+3Bj
.text:000059DA                 xor     al, al
.text:000059DC
.text:000059DC loc_59DC:                               ; CODE XREF: NArchive::NZip::CExtraBlock::GetUnixTime(bool,uint,uint &)+6Ej
.text:000059DC                 add     esp, 0Ch
.text:000059DF                 cmp     ebp, esp
.text:000059E1                 call    __RTC_CheckEsp
.text:000059E6                 mov     esp, ebp
.text:000059E8                 pop     ebp
.text:000059E9                 retn    0Ch
.text:000059E9 ?GetUnixTime@CExtraBlock@NZip@NArchive@@QBE_N_NIAAI@Z endp
.text:000059E9
.text:000059E9 _text           ends
.text:000059E9
.text:000059EC ; ===========================================================================
.text:000059EC
.text:000059EC ; Segment type: Pure code
.text:000059EC ; Segment permissions: Read/Execute
.text:000059EC _text           segment para public 'CODE' use32
.text:000059EC                 assume cs:_text
.text:000059EC                 ;org 59ECh
.text:000059EC ; COMDAT (pick any)
.text:000059EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000059EC
.text:000059EC ; =============== S U B R O U T I N E =======================================
.text:000059EC
.text:000059EC ; Attributes: bp-based frame
.text:000059EC
.text:000059EC ; bool __thiscall NArchive::NZip::CLocalItem::IsEncrypted(NArchive::NZip::CLocalItem *__hidden this)
.text:000059EC                 public ?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ
.text:000059EC ?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ proc near
.text:000059EC                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+38Ep
.text:000059EC                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+4B9p ...
.text:000059EC
.text:000059EC var_4           = dword ptr -4
.text:000059EC
.text:000059EC                 push    ebp
.text:000059ED                 mov     ebp, esp
.text:000059EF                 push    ecx
.text:000059F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000059F7                 mov     [ebp+var_4], ecx
.text:000059FA                 mov     eax, [ebp+var_4]
.text:000059FD                 movzx   eax, word ptr [eax]
.text:00005A00                 and     eax, 1
.text:00005A03                 neg     eax
.text:00005A05                 sbb     eax, eax
.text:00005A07                 neg     eax
.text:00005A09                 mov     esp, ebp
.text:00005A0B                 pop     ebp
.text:00005A0C                 retn
.text:00005A0C ?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ endp
.text:00005A0C
.text:00005A0C ; ---------------------------------------------------------------------------
.text:00005A0D                 align 10h
.text:00005A0D _text           ends
.text:00005A0D
.text:00005A10 ; ===========================================================================
.text:00005A10
.text:00005A10 ; Segment type: Pure code
.text:00005A10 ; Segment permissions: Read/Execute
.text:00005A10 _text           segment para public 'CODE' use32
.text:00005A10                 assume cs:_text
.text:00005A10                 ;org 5A10h
.text:00005A10 ; COMDAT (pick any)
.text:00005A10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005A10
.text:00005A10 ; =============== S U B R O U T I N E =======================================
.text:00005A10
.text:00005A10 ; Attributes: bp-based frame
.text:00005A10
.text:00005A10 ; bool __thiscall NArchive::NZip::CLocalItem::IsStrongEncrypted(NArchive::NZip::CLocalItem *__hidden this)
.text:00005A10                 public ?IsStrongEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ
.text:00005A10 ?IsStrongEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ proc near
.text:00005A10                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+567p
.text:00005A10                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+85p
.text:00005A10
.text:00005A10 var_8           = dword ptr -8
.text:00005A10 var_4           = dword ptr -4
.text:00005A10
.text:00005A10                 push    ebp
.text:00005A11                 mov     ebp, esp
.text:00005A13                 sub     esp, 8
.text:00005A16                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005A1D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005A24                 mov     [ebp+var_4], ecx
.text:00005A27                 mov     ecx, [ebp+var_4] ; this
.text:00005A2A                 call    ?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsEncrypted(void)
.text:00005A2F                 movzx   eax, al
.text:00005A32                 test    eax, eax
.text:00005A34                 jz      short loc_5A4A
.text:00005A36                 mov     ecx, [ebp+var_4]
.text:00005A39                 movzx   edx, word ptr [ecx]
.text:00005A3C                 and     edx, 40h
.text:00005A3F                 jz      short loc_5A4A
.text:00005A41                 mov     [ebp+var_8], 1
.text:00005A48                 jmp     short loc_5A51
.text:00005A4A ; ---------------------------------------------------------------------------
.text:00005A4A
.text:00005A4A loc_5A4A:                               ; CODE XREF: NArchive::NZip::CLocalItem::IsStrongEncrypted(void)+24j
.text:00005A4A                                         ; NArchive::NZip::CLocalItem::IsStrongEncrypted(void)+2Fj
.text:00005A4A                 mov     [ebp+var_8], 0
.text:00005A51
.text:00005A51 loc_5A51:                               ; CODE XREF: NArchive::NZip::CLocalItem::IsStrongEncrypted(void)+38j
.text:00005A51                 mov     al, byte ptr [ebp+var_8]
.text:00005A54                 add     esp, 8
.text:00005A57                 cmp     ebp, esp
.text:00005A59                 call    __RTC_CheckEsp
.text:00005A5E                 mov     esp, ebp
.text:00005A60                 pop     ebp
.text:00005A61                 retn
.text:00005A61 ?IsStrongEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ endp
.text:00005A61
.text:00005A61 ; ---------------------------------------------------------------------------
.text:00005A62                 align 4
.text:00005A62 _text           ends
.text:00005A62
.text:00005A64 ; ===========================================================================
.text:00005A64
.text:00005A64 ; Segment type: Pure code
.text:00005A64 ; Segment permissions: Read/Execute
.text:00005A64 _text           segment para public 'CODE' use32
.text:00005A64                 assume cs:_text
.text:00005A64                 ;org 5A64h
.text:00005A64 ; COMDAT (pick any)
.text:00005A64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005A64
.text:00005A64 ; =============== S U B R O U T I N E =======================================
.text:00005A64
.text:00005A64 ; Attributes: bp-based frame
.text:00005A64
.text:00005A64 ; bool __thiscall NArchive::NZip::CLocalItem::IsLzmaEOS(NArchive::NZip::CLocalItem *__hidden this)
.text:00005A64                 public ?IsLzmaEOS@CLocalItem@NZip@NArchive@@QBE_NXZ
.text:00005A64 ?IsLzmaEOS@CLocalItem@NZip@NArchive@@QBE_NXZ proc near
.text:00005A64                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6FAp
.text:00005A64
.text:00005A64 var_4           = dword ptr -4
.text:00005A64
.text:00005A64                 push    ebp
.text:00005A65                 mov     ebp, esp
.text:00005A67                 push    ecx
.text:00005A68                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005A6F                 mov     [ebp+var_4], ecx
.text:00005A72                 mov     eax, [ebp+var_4]
.text:00005A75                 movzx   eax, word ptr [eax]
.text:00005A78                 and     eax, 2
.text:00005A7B                 neg     eax
.text:00005A7D                 sbb     eax, eax
.text:00005A7F                 neg     eax
.text:00005A81                 mov     esp, ebp
.text:00005A83                 pop     ebp
.text:00005A84                 retn
.text:00005A84 ?IsLzmaEOS@CLocalItem@NZip@NArchive@@QBE_NXZ endp
.text:00005A84
.text:00005A84 ; ---------------------------------------------------------------------------
.text:00005A85                 align 4
.text:00005A85 _text           ends
.text:00005A85
.text:00005A88 ; ===========================================================================
.text:00005A88
.text:00005A88 ; Segment type: Pure code
.text:00005A88 ; Segment permissions: Read/Execute
.text:00005A88 _text           segment para public 'CODE' use32
.text:00005A88                 assume cs:_text
.text:00005A88                 ;org 5A88h
.text:00005A88 ; COMDAT (pick any)
.text:00005A88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005A88
.text:00005A88 ; =============== S U B R O U T I N E =======================================
.text:00005A88
.text:00005A88 ; Attributes: bp-based frame
.text:00005A88
.text:00005A88 ; unsigned __int8 __thiscall NArchive::NZip::CItem::GetHostOS(NArchive::NZip::CItem *__hidden this)
.text:00005A88                 public ?GetHostOS@CItem@NZip@NArchive@@QBEEXZ
.text:00005A88 ?GetHostOS@CItem@NZip@NArchive@@QBEEXZ proc near
.text:00005A88                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+757p
.text:00005A88                                         ; NArchive::NZip::CItem::GetUnicodeString(AString const &,UString &,bool,uint)+51p ...
.text:00005A88
.text:00005A88 var_8           = dword ptr -8
.text:00005A88 var_4           = dword ptr -4
.text:00005A88
.text:00005A88                 push    ebp
.text:00005A89                 mov     ebp, esp
.text:00005A8B                 sub     esp, 8
.text:00005A8E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005A95                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005A9C                 mov     [ebp+var_4], ecx
.text:00005A9F                 mov     eax, [ebp+var_4]
.text:00005AA2                 movzx   ecx, byte ptr [eax+5Dh]
.text:00005AA6                 test    ecx, ecx
.text:00005AA8                 jz      short loc_5AB5
.text:00005AAA                 mov     edx, [ebp+var_4]
.text:00005AAD                 mov     al, [edx+39h]
.text:00005AB0                 mov     byte ptr [ebp+var_8+3], al
.text:00005AB3                 jmp     short loc_5ABE
.text:00005AB5 ; ---------------------------------------------------------------------------
.text:00005AB5
.text:00005AB5 loc_5AB5:                               ; CODE XREF: NArchive::NZip::CItem::GetHostOS(void)+20j
.text:00005AB5                 mov     ecx, [ebp+var_4]
.text:00005AB8                 mov     dl, [ecx+5]
.text:00005ABB                 mov     byte ptr [ebp+var_8+3], dl
.text:00005ABE
.text:00005ABE loc_5ABE:                               ; CODE XREF: NArchive::NZip::CItem::GetHostOS(void)+2Bj
.text:00005ABE                 mov     al, byte ptr [ebp+var_8+3]
.text:00005AC1                 mov     esp, ebp
.text:00005AC3                 pop     ebp
.text:00005AC4                 retn
.text:00005AC4 ?GetHostOS@CItem@NZip@NArchive@@QBEEXZ endp
.text:00005AC4
.text:00005AC4 ; ---------------------------------------------------------------------------
.text:00005AC5                 align 4
.text:00005AC5 _text           ends
.text:00005AC5
.text:00005AC8 ; ===========================================================================
.text:00005AC8
.text:00005AC8 ; Segment type: Pure code
.text:00005AC8 ; Segment permissions: Read/Execute
.text:00005AC8 _text           segment para public 'CODE' use32
.text:00005AC8                 assume cs:_text
.text:00005AC8                 ;org 5AC8h
.text:00005AC8 ; COMDAT (pick any)
.text:00005AC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005AC8
.text:00005AC8 ; =============== S U B R O U T I N E =======================================
.text:00005AC8
.text:00005AC8 ; Attributes: bp-based frame
.text:00005AC8
.text:00005AC8 ; void __thiscall NArchive::NZip::CItem::GetUnicodeString(NArchive::NZip::CItem *this, const struct AString *, struct UString *, bool, unsigned int)
.text:00005AC8                 public ?GetUnicodeString@CItem@NZip@NArchive@@QBEXABVAString@@AAVUString@@_NI@Z
.text:00005AC8 ?GetUnicodeString@CItem@NZip@NArchive@@QBEXABVAString@@AAVUString@@_NI@Z proc near
.text:00005AC8                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+E9p
.text:00005AC8                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+430p
.text:00005AC8
.text:00005AC8 var_C           = dword ptr -0Ch
.text:00005AC8 var_8           = dword ptr -8
.text:00005AC8 var_4           = dword ptr -4
.text:00005AC8 arg_0           = dword ptr  8
.text:00005AC8 arg_4           = dword ptr  0Ch
.text:00005AC8 arg_8           = byte ptr  10h
.text:00005AC8 arg_C           = dword ptr  14h
.text:00005AC8
.text:00005AC8                 push    ebp
.text:00005AC9                 mov     ebp, esp
.text:00005ACB                 sub     esp, 0Ch
.text:00005ACE                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00005AD5                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005ADC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005AE3                 mov     [ebp+var_4], ecx
.text:00005AE6                 mov     ecx, [ebp+var_4] ; this
.text:00005AE9                 call    ?IsUtf8@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsUtf8(void)
.text:00005AEE                 mov     byte ptr [ebp+var_8+3], al
.text:00005AF1                 mov     byte ptr [ebp+var_8+2], 1
.text:00005AF5                 movzx   eax, byte ptr [ebp+var_8+3]
.text:00005AF9                 test    eax, eax
.text:00005AFB                 jnz     short loc_5B2E
.text:00005AFD                 movzx   ecx, [ebp+arg_8]
.text:00005B01                 test    ecx, ecx
.text:00005B03                 jz      short loc_5B16
.text:00005B05                 xor     edx, edx
.text:00005B07                 cmp     [ebp+arg_C], 0FDE9h
.text:00005B0E                 setz    dl
.text:00005B11                 mov     byte ptr [ebp+var_8+3], dl
.text:00005B14                 jmp     short loc_5B2E
.text:00005B16 ; ---------------------------------------------------------------------------
.text:00005B16
.text:00005B16 loc_5B16:                               ; CODE XREF: NArchive::NZip::CItem::GetUnicodeString(AString const &,UString &,bool,uint)+3Bj
.text:00005B16                 mov     ecx, [ebp+var_4] ; this
.text:00005B19                 call    ?GetHostOS@CItem@NZip@NArchive@@QBEEXZ ; NArchive::NZip::CItem::GetHostOS(void)
.text:00005B1E                 movzx   eax, al
.text:00005B21                 cmp     eax, 3
.text:00005B24                 jnz     short loc_5B2E
.text:00005B26                 mov     byte ptr [ebp+var_8+3], 1
.text:00005B2A                 mov     byte ptr [ebp+var_8+2], 0
.text:00005B2E
.text:00005B2E loc_5B2E:                               ; CODE XREF: NArchive::NZip::CItem::GetUnicodeString(AString const &,UString &,bool,uint)+33j
.text:00005B2E                                         ; NArchive::NZip::CItem::GetUnicodeString(AString const &,UString &,bool,uint)+4Cj ...
.text:00005B2E                 movzx   ecx, byte ptr [ebp+var_8+3]
.text:00005B32                 test    ecx, ecx
.text:00005B34                 jz      short loc_5B54
.text:00005B36                 mov     edx, [ebp+arg_4]
.text:00005B39                 push    edx             ; struct UString *
.text:00005B3A                 mov     eax, [ebp+arg_0]
.text:00005B3D                 push    eax             ; struct AString *
.text:00005B3E                 call    ?ConvertUTF8ToUnicode@@YG_NABVAString@@AAVUString@@@Z ; ConvertUTF8ToUnicode(AString const &,UString &)
.text:00005B43                 movzx   ecx, al
.text:00005B46                 test    ecx, ecx
.text:00005B48                 jnz     short loc_5B52
.text:00005B4A                 movzx   edx, byte ptr [ebp+var_8+2]
.text:00005B4E                 test    edx, edx
.text:00005B50                 jz      short loc_5B54
.text:00005B52
.text:00005B52 loc_5B52:                               ; CODE XREF: NArchive::NZip::CItem::GetUnicodeString(AString const &,UString &,bool,uint)+80j
.text:00005B52                 jmp     short loc_5B80
.text:00005B54 ; ---------------------------------------------------------------------------
.text:00005B54
.text:00005B54 loc_5B54:                               ; CODE XREF: NArchive::NZip::CItem::GetUnicodeString(AString const &,UString &,bool,uint)+6Cj
.text:00005B54                                         ; NArchive::NZip::CItem::GetUnicodeString(AString const &,UString &,bool,uint)+88j
.text:00005B54                 movzx   eax, [ebp+arg_8]
.text:00005B58                 test    eax, eax
.text:00005B5A                 jz      short loc_5B64
.text:00005B5C                 mov     ecx, [ebp+arg_C]
.text:00005B5F                 mov     [ebp+var_C], ecx
.text:00005B62                 jmp     short loc_5B6F
.text:00005B64 ; ---------------------------------------------------------------------------
.text:00005B64
.text:00005B64 loc_5B64:                               ; CODE XREF: NArchive::NZip::CItem::GetUnicodeString(AString const &,UString &,bool,uint)+92j
.text:00005B64                 mov     ecx, [ebp+var_4] ; this
.text:00005B67                 call    ?GetCodePage@CItem@NZip@NArchive@@QBEIXZ ; NArchive::NZip::CItem::GetCodePage(void)
.text:00005B6C                 mov     [ebp+var_C], eax
.text:00005B6F
.text:00005B6F loc_5B6F:                               ; CODE XREF: NArchive::NZip::CItem::GetUnicodeString(AString const &,UString &,bool,uint)+9Aj
.text:00005B6F                 mov     edx, [ebp+var_C]
.text:00005B72                 push    edx             ; unsigned int
.text:00005B73                 mov     eax, [ebp+arg_0]
.text:00005B76                 push    eax             ; struct AString *
.text:00005B77                 mov     ecx, [ebp+arg_4]
.text:00005B7A                 push    ecx             ; struct UString *
.text:00005B7B                 call    ?MultiByteToUnicodeString2@@YGXAAVUString@@ABVAString@@I@Z ; MultiByteToUnicodeString2(UString &,AString const &,uint)
.text:00005B80
.text:00005B80 loc_5B80:                               ; CODE XREF: NArchive::NZip::CItem::GetUnicodeString(AString const &,UString &,bool,uint):loc_5B52j
.text:00005B80                 add     esp, 0Ch
.text:00005B83                 cmp     ebp, esp
.text:00005B85                 call    __RTC_CheckEsp
.text:00005B8A                 mov     esp, ebp
.text:00005B8C                 pop     ebp
.text:00005B8D                 retn    10h
.text:00005B8D ?GetUnicodeString@CItem@NZip@NArchive@@QBEXABVAString@@AAVUString@@_NI@Z endp
.text:00005B8D
.text:00005B8D _text           ends
.text:00005B8D
.text:00005B90 ; ===========================================================================
.text:00005B90
.text:00005B90 ; Segment type: Pure code
.text:00005B90 ; Segment permissions: Read/Execute
.text:00005B90 _text           segment para public 'CODE' use32
.text:00005B90                 assume cs:_text
.text:00005B90                 ;org 5B90h
.text:00005B90 ; COMDAT (pick any)
.text:00005B90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005B90
.text:00005B90 ; =============== S U B R O U T I N E =======================================
.text:00005B90
.text:00005B90 ; Attributes: bp-based frame
.text:00005B90
.text:00005B90 ; bool __thiscall NArchive::NZip::CLocalItem::IsUtf8(NArchive::NZip::CLocalItem *__hidden this)
.text:00005B90                 public ?IsUtf8@CLocalItem@NZip@NArchive@@QBE_NXZ
.text:00005B90 ?IsUtf8@CLocalItem@NZip@NArchive@@QBE_NXZ proc near
.text:00005B90                                         ; CODE XREF: NArchive::NZip::CItem::GetUnicodeString(AString const &,UString &,bool,uint)+21p
.text:00005B90
.text:00005B90 var_4           = dword ptr -4
.text:00005B90
.text:00005B90                 push    ebp
.text:00005B91                 mov     ebp, esp
.text:00005B93                 push    ecx
.text:00005B94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B9B                 mov     [ebp+var_4], ecx
.text:00005B9E                 mov     eax, [ebp+var_4]
.text:00005BA1                 movzx   eax, word ptr [eax]
.text:00005BA4                 and     eax, 800h
.text:00005BA9                 neg     eax
.text:00005BAB                 sbb     eax, eax
.text:00005BAD                 neg     eax
.text:00005BAF                 mov     esp, ebp
.text:00005BB1                 pop     ebp
.text:00005BB2                 retn
.text:00005BB2 ?IsUtf8@CLocalItem@NZip@NArchive@@QBE_NXZ endp
.text:00005BB2
.text:00005BB2 ; ---------------------------------------------------------------------------
.text:00005BB3                 align 4
.text:00005BB3 _text           ends
.text:00005BB3
.text:00005BB4 ; ===========================================================================
.text:00005BB4
.text:00005BB4 ; Segment type: Pure code
.text:00005BB4 ; Segment permissions: Read/Execute
.text:00005BB4 _text           segment para public 'CODE' use32
.text:00005BB4                 assume cs:_text
.text:00005BB4                 ;org 5BB4h
.text:00005BB4 ; COMDAT (pick any)
.text:00005BB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005BB4
.text:00005BB4 ; =============== S U B R O U T I N E =======================================
.text:00005BB4
.text:00005BB4 ; Attributes: bp-based frame
.text:00005BB4
.text:00005BB4 ; bool __thiscall NArchive::NZip::CItem::IsThereCrc(NArchive::NZip::CItem *__hidden this)
.text:00005BB4                 public ?IsThereCrc@CItem@NZip@NArchive@@QBE_NXZ
.text:00005BB4 ?IsThereCrc@CItem@NZip@NArchive@@QBE_NXZ proc near
.text:00005BB4                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+46Ap
.text:00005BB4
.text:00005BB4 var_18          = dword ptr -18h
.text:00005BB4 var_14          = dword ptr -14h
.text:00005BB4 var_10          = dword ptr -10h
.text:00005BB4 var_C           = dword ptr -0Ch
.text:00005BB4 var_8           = dword ptr -8
.text:00005BB4 var_4           = dword ptr -4
.text:00005BB4
.text:00005BB4                 push    ebp
.text:00005BB5                 mov     ebp, esp
.text:00005BB7                 sub     esp, 18h
.text:00005BBA                 mov     eax, 0CCCCCCCCh
.text:00005BBF                 mov     [ebp+var_18], eax
.text:00005BC2                 mov     [ebp+var_14], eax
.text:00005BC5                 mov     [ebp+var_10], eax
.text:00005BC8                 mov     [ebp+var_C], eax
.text:00005BCB                 mov     [ebp+var_8], eax
.text:00005BCE                 mov     [ebp+var_4], eax
.text:00005BD1                 mov     [ebp+var_4], ecx
.text:00005BD4                 mov     eax, [ebp+var_4]
.text:00005BD7                 movzx   ecx, word ptr [eax+2]
.text:00005BDB                 cmp     ecx, 63h ; 'c'
.text:00005BDE                 jnz     short loc_5C08
.text:00005BE0                 lea     ecx, [ebp+var_10] ; this
.text:00005BE3                 call    ??0CWzAesExtra@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CWzAesExtra::CWzAesExtra(void)
.text:00005BE8                 lea     edx, [ebp+var_10]
.text:00005BEB                 push    edx             ; struct NArchive::NZip::CWzAesExtra *
.text:00005BEC                 mov     ecx, [ebp+var_4]
.text:00005BEF                 add     ecx, 48h ; 'H'  ; this
.text:00005BF2                 call    ?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z ; NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &)
.text:00005BF7                 movzx   eax, al
.text:00005BFA                 test    eax, eax
.text:00005BFC                 jz      short loc_5C08
.text:00005BFE                 lea     ecx, [ebp+var_10] ; this
.text:00005C01                 call    ?NeedCrc@CWzAesExtra@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CWzAesExtra::NeedCrc(void)
.text:00005C06                 jmp     short loc_5C33
.text:00005C08 ; ---------------------------------------------------------------------------
.text:00005C08
.text:00005C08 loc_5C08:                               ; CODE XREF: NArchive::NZip::CItem::IsThereCrc(void)+2Aj
.text:00005C08                                         ; NArchive::NZip::CItem::IsThereCrc(void)+48j
.text:00005C08                 mov     ecx, [ebp+var_4]
.text:00005C0B                 cmp     dword ptr [ecx+1Ch], 0
.text:00005C0F                 jnz     short loc_5C29
.text:00005C11                 mov     ecx, [ebp+var_4] ; this
.text:00005C14                 call    ?IsDir@CItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CItem::IsDir(void)
.text:00005C19                 movzx   edx, al
.text:00005C1C                 test    edx, edx
.text:00005C1E                 jz      short loc_5C29
.text:00005C20                 mov     [ebp+var_18], 0
.text:00005C27                 jmp     short loc_5C30
.text:00005C29 ; ---------------------------------------------------------------------------
.text:00005C29
.text:00005C29 loc_5C29:                               ; CODE XREF: NArchive::NZip::CItem::IsThereCrc(void)+5Bj
.text:00005C29                                         ; NArchive::NZip::CItem::IsThereCrc(void)+6Aj
.text:00005C29                 mov     [ebp+var_18], 1
.text:00005C30
.text:00005C30 loc_5C30:                               ; CODE XREF: NArchive::NZip::CItem::IsThereCrc(void)+73j
.text:00005C30                 mov     al, byte ptr [ebp+var_18]
.text:00005C33
.text:00005C33 loc_5C33:                               ; CODE XREF: NArchive::NZip::CItem::IsThereCrc(void)+52j
.text:00005C33                 push    edx
.text:00005C34                 mov     ecx, ebp
.text:00005C36                 push    eax
.text:00005C37                 lea     edx, $LN9_0
.text:00005C3D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00005C42                 pop     eax
.text:00005C43                 pop     edx
.text:00005C44                 add     esp, 18h
.text:00005C47                 cmp     ebp, esp
.text:00005C49                 call    __RTC_CheckEsp
.text:00005C4E                 mov     esp, ebp
.text:00005C50                 pop     ebp
.text:00005C51                 retn
.text:00005C51 ?IsThereCrc@CItem@NZip@NArchive@@QBE_NXZ endp
.text:00005C51
.text:00005C51 ; ---------------------------------------------------------------------------
.text:00005C52                 align 4
.text:00005C54 $LN9_0          dd 1                    ; DATA XREF: NArchive::NZip::CItem::IsThereCrc(void)+83o
.text:00005C58                 dd offset $LN8_0
.text:00005C5C $LN8_0          dd 0FFFFFFF0h, 6        ; DATA XREF: .text:00005C58o
.text:00005C64                 dd offset $LN7          ; "aesField"
.text:00005C68 $LN7            db 'aesField',0         ; DATA XREF: .text:00005C64o
.text:00005C71                 align 4
.text:00005C71 _text           ends
.text:00005C71
.text:00005C74 ; ===========================================================================
.text:00005C74
.text:00005C74 ; Segment type: Pure code
.text:00005C74 ; Segment permissions: Read/Execute
.text:00005C74 _text           segment para public 'CODE' use32
.text:00005C74                 assume cs:_text
.text:00005C74                 ;org 5C74h
.text:00005C74 ; COMDAT (pick any)
.text:00005C74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005C74
.text:00005C74 ; =============== S U B R O U T I N E =======================================
.text:00005C74
.text:00005C74 ; Attributes: bp-based frame
.text:00005C74
.text:00005C74 ; bool __thiscall NArchive::NZip::CWzAesExtra::NeedCrc(NArchive::NZip::CWzAesExtra *__hidden this)
.text:00005C74                 public ?NeedCrc@CWzAesExtra@NZip@NArchive@@QBE_NXZ
.text:00005C74 ?NeedCrc@CWzAesExtra@NZip@NArchive@@QBE_NXZ proc near
.text:00005C74                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+113p
.text:00005C74                                         ; NArchive::NZip::CItem::IsThereCrc(void)+4Dp
.text:00005C74
.text:00005C74 var_4           = dword ptr -4
.text:00005C74
.text:00005C74                 push    ebp
.text:00005C75                 mov     ebp, esp
.text:00005C77                 push    ecx
.text:00005C78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C7F                 mov     [ebp+var_4], ecx
.text:00005C82                 mov     eax, [ebp+var_4]
.text:00005C85                 movzx   eax, word ptr [eax]
.text:00005C88                 sub     eax, 1
.text:00005C8B                 neg     eax
.text:00005C8D                 sbb     eax, eax
.text:00005C8F                 add     eax, 1
.text:00005C92                 mov     esp, ebp
.text:00005C94                 pop     ebp
.text:00005C95                 retn
.text:00005C95 ?NeedCrc@CWzAesExtra@NZip@NArchive@@QBE_NXZ endp
.text:00005C95
.text:00005C95 ; ---------------------------------------------------------------------------
.text:00005C96                 align 4
.text:00005C96 _text           ends
.text:00005C96
.text:00005C98 ; ===========================================================================
.text:00005C98
.text:00005C98 ; Segment type: Pure code
.text:00005C98 ; Segment permissions: Read/Execute
.text:00005C98 _text           segment para public 'CODE' use32
.text:00005C98                 assume cs:_text
.text:00005C98                 ;org 5C98h
.text:00005C98 ; COMDAT (pick any)
.text:00005C98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005C98
.text:00005C98 ; =============== S U B R O U T I N E =======================================
.text:00005C98
.text:00005C98 ; Attributes: bp-based frame
.text:00005C98
.text:00005C98 ; unsigned int __thiscall NArchive::NZip::CItem::GetCodePage(NArchive::NZip::CItem *__hidden this)
.text:00005C98                 public ?GetCodePage@CItem@NZip@NArchive@@QBEIXZ
.text:00005C98 ?GetCodePage@CItem@NZip@NArchive@@QBEIXZ proc near
.text:00005C98                                         ; CODE XREF: NArchive::NZip::CItem::GetUnicodeString(AString const &,UString &,bool,uint)+9Fp
.text:00005C98
.text:00005C98 var_C           = dword ptr -0Ch
.text:00005C98 var_8           = dword ptr -8
.text:00005C98 var_4           = dword ptr -4
.text:00005C98
.text:00005C98                 push    ebp
.text:00005C99                 mov     ebp, esp
.text:00005C9B                 sub     esp, 0Ch
.text:00005C9E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00005CA5                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005CAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005CB3                 mov     [ebp+var_4], ecx
.text:00005CB6                 mov     ecx, [ebp+var_4] ; this
.text:00005CB9                 call    ?GetHostOS@CItem@NZip@NArchive@@QBEEXZ ; NArchive::NZip::CItem::GetHostOS(void)
.text:00005CBE                 mov     byte ptr [ebp+var_8+3], al
.text:00005CC1                 movzx   eax, byte ptr [ebp+var_8+3]
.text:00005CC5                 test    eax, eax
.text:00005CC7                 jz      short loc_5CDB
.text:00005CC9                 movzx   ecx, byte ptr [ebp+var_8+3]
.text:00005CCD                 cmp     ecx, 0Bh
.text:00005CD0                 jz      short loc_5CDB
.text:00005CD2                 mov     [ebp+var_C], 0
.text:00005CD9                 jmp     short loc_5CE2
.text:00005CDB ; ---------------------------------------------------------------------------
.text:00005CDB
.text:00005CDB loc_5CDB:                               ; CODE XREF: NArchive::NZip::CItem::GetCodePage(void)+2Fj
.text:00005CDB                                         ; NArchive::NZip::CItem::GetCodePage(void)+38j
.text:00005CDB                 mov     [ebp+var_C], 1
.text:00005CE2
.text:00005CE2 loc_5CE2:                               ; CODE XREF: NArchive::NZip::CItem::GetCodePage(void)+41j
.text:00005CE2                 mov     eax, [ebp+var_C]
.text:00005CE5                 add     esp, 0Ch
.text:00005CE8                 cmp     ebp, esp
.text:00005CEA                 call    __RTC_CheckEsp
.text:00005CEF                 mov     esp, ebp
.text:00005CF1                 pop     ebp
.text:00005CF2                 retn
.text:00005CF2 ?GetCodePage@CItem@NZip@NArchive@@QBEIXZ endp
.text:00005CF2
.text:00005CF2 ; ---------------------------------------------------------------------------
.text:00005CF3                 align 4
.text:00005CF3 _text           ends
.text:00005CF3
.text:00005CF4 ; ===========================================================================
.text:00005CF4
.text:00005CF4 ; Segment type: Pure code
.text:00005CF4 ; Segment permissions: Read/Execute
.text:00005CF4 _text           segment para public 'CODE' use32
.text:00005CF4                 assume cs:_text
.text:00005CF4                 ;org 5CF4h
.text:00005CF4 ; COMDAT (pick any)
.text:00005CF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005CF4
.text:00005CF4 ; =============== S U B R O U T I N E =======================================
.text:00005CF4
.text:00005CF4 ; Attributes: bp-based frame
.text:00005CF4
.text:00005CF4 ; _DWORD __thiscall NArchive::NZip::CProgressImp::CProgressImp(NArchive::NZip::CProgressImp *this, struct IArchiveOpenCallback *)
.text:00005CF4                 public ??0CProgressImp@NZip@NArchive@@QAE@PAUIArchiveOpenCallback@@@Z
.text:00005CF4 ??0CProgressImp@NZip@NArchive@@QAE@PAUIArchiveOpenCallback@@@Z proc near
.text:00005CF4                                         ; CODE XREF: NArchive::NZip::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+8Ep
.text:00005CF4
.text:00005CF4 var_4           = dword ptr -4
.text:00005CF4 arg_0           = dword ptr  8
.text:00005CF4
.text:00005CF4                 push    ebp
.text:00005CF5                 mov     ebp, esp
.text:00005CF7                 push    ecx
.text:00005CF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005CFF                 mov     [ebp+var_4], ecx
.text:00005D02                 mov     ecx, [ebp+var_4] ; this
.text:00005D05                 call    ??0CProgressVirt@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CProgressVirt::CProgressVirt(void)
.text:00005D0A                 mov     eax, [ebp+var_4]
.text:00005D0D                 mov     dword ptr [eax], offset ??_7CProgressImp@NZip@NArchive@@6B@ ; const NArchive::NZip::CProgressImp::`vftable'
.text:00005D13                 mov     ecx, [ebp+arg_0]
.text:00005D16                 push    ecx
.text:00005D17                 mov     ecx, [ebp+var_4]
.text:00005D1A                 add     ecx, 4
.text:00005D1D                 call    ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>(IArchiveOpenCallback *)
.text:00005D22                 mov     eax, [ebp+var_4]
.text:00005D25                 add     esp, 4
.text:00005D28                 cmp     ebp, esp
.text:00005D2A                 call    __RTC_CheckEsp
.text:00005D2F                 mov     esp, ebp
.text:00005D31                 pop     ebp
.text:00005D32                 retn    4
.text:00005D32 ??0CProgressImp@NZip@NArchive@@QAE@PAUIArchiveOpenCallback@@@Z endp
.text:00005D32
.text:00005D32 ; ---------------------------------------------------------------------------
.text:00005D35                 align 4
.text:00005D35 _text           ends
.text:00005D35
.rdata:00005D38 ; ===========================================================================
.rdata:00005D38
.rdata:00005D38 ; Segment type: Pure data
.rdata:00005D38 ; Segment permissions: Read
.rdata:00005D38 _rdata          segment dword public 'DATA' use32
.rdata:00005D38                 assume cs:_rdata
.rdata:00005D38                 ;org 5D38h
.rdata:00005D38 ; COMDAT (pick largest)
.rdata:00005D38                 dd offset ??_R4CProgressImp@NZip@NArchive@@6B@ ; const NArchive::NZip::CProgressImp::`RTTI Complete Object Locator'
.rdata:00005D3C                 public ??_7CProgressImp@NZip@NArchive@@6B@
.rdata:00005D3C ; const NArchive::NZip::CProgressImp::`vftable'
.rdata:00005D3C ??_7CProgressImp@NZip@NArchive@@6B@ dd offset ?SetCompletedLocal@CProgressImp@NZip@NArchive@@UAEJ_K0@Z
.rdata:00005D3C                                         ; DATA XREF: NArchive::NZip::CProgressImp::CProgressImp(IArchiveOpenCallback *)+19o
.rdata:00005D3C                                         ; NArchive::NZip::CProgressImp::SetCompletedLocal(unsigned __int64,unsigned __int64)
.rdata:00005D40                 dd offset ?SetTotalCD@CProgressImp@NZip@NArchive@@UAEJ_K@Z ; NArchive::NZip::CProgressImp::SetTotalCD(unsigned __int64)
.rdata:00005D44                 dd offset ?SetCompletedCD@CProgressImp@NZip@NArchive@@UAEJ_K@Z ; NArchive::NZip::CProgressImp::SetCompletedCD(unsigned __int64)
.rdata:00005D44 _rdata          ends
.rdata:00005D44
.rdata$r:00005D48 ; ===========================================================================
.rdata$r:00005D48
.rdata$r:00005D48 ; Segment type: Pure data
.rdata$r:00005D48 ; Segment permissions: Read
.rdata$r:00005D48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005D48                 assume cs:_rdata$r
.rdata$r:00005D48                 ;org 5D48h
.rdata$r:00005D48 ; COMDAT (pick any)
.rdata$r:00005D48                 public ??_R4CProgressImp@NZip@NArchive@@6B@
.rdata$r:00005D48 ; const NArchive::NZip::CProgressImp::`RTTI Complete Object Locator'
.rdata$r:00005D48 ??_R4CProgressImp@NZip@NArchive@@6B@ db    0 ; DATA XREF: .rdata:00005D38o
.rdata$r:00005D49                 db    0
.rdata$r:00005D4A                 db    0
.rdata$r:00005D4B                 db    0
.rdata$r:00005D4C                 db    0
.rdata$r:00005D4D                 db    0
.rdata$r:00005D4E                 db    0
.rdata$r:00005D4F                 db    0
.rdata$r:00005D50                 db    0
.rdata$r:00005D51                 db    0
.rdata$r:00005D52                 db    0
.rdata$r:00005D53                 db    0
.rdata$r:00005D54                 dd offset ??_R0?AVCProgressImp@NZip@NArchive@@@8 ; NArchive::NZip::CProgressImp `RTTI Type Descriptor'
.rdata$r:00005D58                 dd offset ??_R3CProgressImp@NZip@NArchive@@8 ; NArchive::NZip::CProgressImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005D58 _rdata$r        ends
.rdata$r:00005D58
.data:00005D5C ; ===========================================================================
.data:00005D5C
.data:00005D5C ; Segment type: Pure data
.data:00005D5C ; Segment permissions: Read/Write
.data:00005D5C _data           segment dword public 'DATA' use32
.data:00005D5C                 assume cs:_data
.data:00005D5C                 ;org 5D5Ch
.data:00005D5C ; COMDAT (pick any)
.data:00005D5C                 public ??_R0?AVCProgressImp@NZip@NArchive@@@8
.data:00005D5C ; class NArchive::NZip::CProgressImp `RTTI Type Descriptor'
.data:00005D5C ??_R0?AVCProgressImp@NZip@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00005D5C                                         ; DATA XREF: .rdata$r:00005D54o
.data:00005D5C                                         ; .rdata$r:NArchive::NZip::CProgressImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005D5C                                         ; const type_info::`vftable'
.data:00005D60                 db    0
.data:00005D61                 db    0
.data:00005D62                 db    0
.data:00005D63                 db    0
.data:00005D64                 db  2Eh ; .
.data:00005D65                 db  3Fh ; ?
.data:00005D66                 db  41h ; A
.data:00005D67                 db  56h ; V
.data:00005D68                 db  43h ; C
.data:00005D69                 db  50h ; P
.data:00005D6A                 db  72h ; r
.data:00005D6B                 db  6Fh ; o
.data:00005D6C                 db  67h ; g
.data:00005D6D                 db  72h ; r
.data:00005D6E                 db  65h ; e
.data:00005D6F                 db  73h ; s
.data:00005D70                 db  73h ; s
.data:00005D71                 db  49h ; I
.data:00005D72                 db  6Dh ; m
.data:00005D73                 db  70h ; p
.data:00005D74                 db  40h ; @
.data:00005D75                 db  4Eh ; N
.data:00005D76                 db  5Ah ; Z
.data:00005D77                 db  69h ; i
.data:00005D78                 db  70h ; p
.data:00005D79                 db  40h ; @
.data:00005D7A                 db  4Eh ; N
.data:00005D7B                 db  41h ; A
.data:00005D7C                 db  72h ; r
.data:00005D7D                 db  63h ; c
.data:00005D7E                 db  68h ; h
.data:00005D7F                 db  69h ; i
.data:00005D80                 db  76h ; v
.data:00005D81                 db  65h ; e
.data:00005D82                 db  40h ; @
.data:00005D83                 db  40h ; @
.data:00005D84                 db    0
.data:00005D85                 align 4
.data:00005D85 _data           ends
.data:00005D85
.rdata$r:00005D88 ; ===========================================================================
.rdata$r:00005D88
.rdata$r:00005D88 ; Segment type: Pure data
.rdata$r:00005D88 ; Segment permissions: Read
.rdata$r:00005D88 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005D88                 assume cs:_rdata$r
.rdata$r:00005D88                 ;org 5D88h
.rdata$r:00005D88 ; COMDAT (pick any)
.rdata$r:00005D88                 public ??_R3CProgressImp@NZip@NArchive@@8
.rdata$r:00005D88 ; NArchive::NZip::CProgressImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005D88 ??_R3CProgressImp@NZip@NArchive@@8 db    0 ; DATA XREF: .rdata$r:00005D58o
.rdata$r:00005D88                                         ; .rdata$r:00005DBCo
.rdata$r:00005D89                 db    0
.rdata$r:00005D8A                 db    0
.rdata$r:00005D8B                 db    0
.rdata$r:00005D8C                 db    0
.rdata$r:00005D8D                 db    0
.rdata$r:00005D8E                 db    0
.rdata$r:00005D8F                 db    0
.rdata$r:00005D90                 db    2
.rdata$r:00005D91                 db    0
.rdata$r:00005D92                 db    0
.rdata$r:00005D93                 db    0
.rdata$r:00005D94                 dd offset ??_R2CProgressImp@NZip@NArchive@@8 ; NArchive::NZip::CProgressImp::`RTTI Base Class Array'
.rdata$r:00005D94 _rdata$r        ends
.rdata$r:00005D94
.rdata$r:00005D98 ; ===========================================================================
.rdata$r:00005D98
.rdata$r:00005D98 ; Segment type: Pure data
.rdata$r:00005D98 ; Segment permissions: Read
.rdata$r:00005D98 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005D98                 assume cs:_rdata$r
.rdata$r:00005D98                 ;org 5D98h
.rdata$r:00005D98 ; COMDAT (pick any)
.rdata$r:00005D98                 public ??_R2CProgressImp@NZip@NArchive@@8
.rdata$r:00005D98 ; NArchive::NZip::CProgressImp::`RTTI Base Class Array'
.rdata$r:00005D98 ??_R2CProgressImp@NZip@NArchive@@8 dd offset ??_R1A@?0A@EA@CProgressImp@NZip@NArchive@@8
.rdata$r:00005D98                                         ; DATA XREF: .rdata$r:00005D94o
.rdata$r:00005D98                                         ; NArchive::NZip::CProgressImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005D9C                 dd offset ??_R1A@?0A@EA@CProgressVirt@NZip@NArchive@@8 ; NArchive::NZip::CProgressVirt::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005DA0                 db    0
.rdata$r:00005DA1                 align 4
.rdata$r:00005DA1 _rdata$r        ends
.rdata$r:00005DA1
.rdata$r:00005DA4 ; ===========================================================================
.rdata$r:00005DA4
.rdata$r:00005DA4 ; Segment type: Pure data
.rdata$r:00005DA4 ; Segment permissions: Read
.rdata$r:00005DA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005DA4                 assume cs:_rdata$r
.rdata$r:00005DA4                 ;org 5DA4h
.rdata$r:00005DA4 ; COMDAT (pick any)
.rdata$r:00005DA4                 public ??_R1A@?0A@EA@CProgressImp@NZip@NArchive@@8
.rdata$r:00005DA4 ; NArchive::NZip::CProgressImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005DA4 ??_R1A@?0A@EA@CProgressImp@NZip@NArchive@@8 dd offset ??_R0?AVCProgressImp@NZip@NArchive@@@8
.rdata$r:00005DA4                                         ; DATA XREF: .rdata$r:NArchive::NZip::CProgressImp::`RTTI Base Class Array'o
.rdata$r:00005DA4                                         ; NArchive::NZip::CProgressImp `RTTI Type Descriptor'
.rdata$r:00005DA8                 db    1
.rdata$r:00005DA9                 db    0
.rdata$r:00005DAA                 db    0
.rdata$r:00005DAB                 db    0
.rdata$r:00005DAC                 db    0
.rdata$r:00005DAD                 db    0
.rdata$r:00005DAE                 db    0
.rdata$r:00005DAF                 db    0
.rdata$r:00005DB0                 db 0FFh
.rdata$r:00005DB1                 db 0FFh
.rdata$r:00005DB2                 db 0FFh
.rdata$r:00005DB3                 db 0FFh
.rdata$r:00005DB4                 db    0
.rdata$r:00005DB5                 db    0
.rdata$r:00005DB6                 db    0
.rdata$r:00005DB7                 db    0
.rdata$r:00005DB8                 db  40h ; @
.rdata$r:00005DB9                 db    0
.rdata$r:00005DBA                 db    0
.rdata$r:00005DBB                 db    0
.rdata$r:00005DBC                 dd offset ??_R3CProgressImp@NZip@NArchive@@8 ; NArchive::NZip::CProgressImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005DBC _rdata$r        ends
.rdata$r:00005DBC
.rdata$r:00005DC0 ; ===========================================================================
.rdata$r:00005DC0
.rdata$r:00005DC0 ; Segment type: Pure data
.rdata$r:00005DC0 ; Segment permissions: Read
.rdata$r:00005DC0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005DC0                 assume cs:_rdata$r
.rdata$r:00005DC0                 ;org 5DC0h
.rdata$r:00005DC0 ; COMDAT (pick any)
.rdata$r:00005DC0                 public ??_R1A@?0A@EA@CProgressVirt@NZip@NArchive@@8
.rdata$r:00005DC0 ; NArchive::NZip::CProgressVirt::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005DC0 ??_R1A@?0A@EA@CProgressVirt@NZip@NArchive@@8 dd offset ??_R0?AUCProgressVirt@NZip@NArchive@@@8
.rdata$r:00005DC0                                         ; DATA XREF: .rdata$r:00005D9Co
.rdata$r:00005DC0                                         ; .rdata$r:NArchive::NZip::CProgressVirt::`RTTI Base Class Array'o
.rdata$r:00005DC0                                         ; NArchive::NZip::CProgressVirt `RTTI Type Descriptor'
.rdata$r:00005DC4                 db    0
.rdata$r:00005DC5                 db    0
.rdata$r:00005DC6                 db    0
.rdata$r:00005DC7                 db    0
.rdata$r:00005DC8                 db    0
.rdata$r:00005DC9                 db    0
.rdata$r:00005DCA                 db    0
.rdata$r:00005DCB                 db    0
.rdata$r:00005DCC                 db 0FFh
.rdata$r:00005DCD                 db 0FFh
.rdata$r:00005DCE                 db 0FFh
.rdata$r:00005DCF                 db 0FFh
.rdata$r:00005DD0                 db    0
.rdata$r:00005DD1                 db    0
.rdata$r:00005DD2                 db    0
.rdata$r:00005DD3                 db    0
.rdata$r:00005DD4                 db  40h ; @
.rdata$r:00005DD5                 db    0
.rdata$r:00005DD6                 db    0
.rdata$r:00005DD7                 db    0
.rdata$r:00005DD8                 dd offset ??_R3CProgressVirt@NZip@NArchive@@8 ; NArchive::NZip::CProgressVirt::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005DD8 _rdata$r        ends
.rdata$r:00005DD8
.data:00005DDC ; ===========================================================================
.data:00005DDC
.data:00005DDC ; Segment type: Pure data
.data:00005DDC ; Segment permissions: Read/Write
.data:00005DDC _data           segment dword public 'DATA' use32
.data:00005DDC                 assume cs:_data
.data:00005DDC                 ;org 5DDCh
.data:00005DDC ; COMDAT (pick any)
.data:00005DDC                 public ??_R0?AUCProgressVirt@NZip@NArchive@@@8
.data:00005DDC ; struct NArchive::NZip::CProgressVirt `RTTI Type Descriptor'
.data:00005DDC ??_R0?AUCProgressVirt@NZip@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00005DDC                                         ; DATA XREF: .rdata$r:NArchive::NZip::CProgressVirt::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005DDC                                         ; .rdata$r:00005E5Co
.data:00005DDC                                         ; const type_info::`vftable'
.data:00005DE0                 db    0
.data:00005DE1                 db    0
.data:00005DE2                 db    0
.data:00005DE3                 db    0
.data:00005DE4                 db  2Eh ; .
.data:00005DE5                 db  3Fh ; ?
.data:00005DE6                 db  41h ; A
.data:00005DE7                 db  55h ; U
.data:00005DE8                 db  43h ; C
.data:00005DE9                 db  50h ; P
.data:00005DEA                 db  72h ; r
.data:00005DEB                 db  6Fh ; o
.data:00005DEC                 db  67h ; g
.data:00005DED                 db  72h ; r
.data:00005DEE                 db  65h ; e
.data:00005DEF                 db  73h ; s
.data:00005DF0                 db  73h ; s
.data:00005DF1                 db  56h ; V
.data:00005DF2                 db  69h ; i
.data:00005DF3                 db  72h ; r
.data:00005DF4                 db  74h ; t
.data:00005DF5                 db  40h ; @
.data:00005DF6                 db  4Eh ; N
.data:00005DF7                 db  5Ah ; Z
.data:00005DF8                 db  69h ; i
.data:00005DF9                 db  70h ; p
.data:00005DFA                 db  40h ; @
.data:00005DFB                 db  4Eh ; N
.data:00005DFC                 db  41h ; A
.data:00005DFD                 db  72h ; r
.data:00005DFE                 db  63h ; c
.data:00005DFF                 db  68h ; h
.data:00005E00                 db  69h ; i
.data:00005E01                 db  76h ; v
.data:00005E02                 db  65h ; e
.data:00005E03                 db  40h ; @
.data:00005E04                 db  40h ; @
.data:00005E05                 db    0
.data:00005E06                 align 4
.data:00005E06 _data           ends
.data:00005E06
.rdata$r:00005E08 ; ===========================================================================
.rdata$r:00005E08
.rdata$r:00005E08 ; Segment type: Pure data
.rdata$r:00005E08 ; Segment permissions: Read
.rdata$r:00005E08 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005E08                 assume cs:_rdata$r
.rdata$r:00005E08                 ;org 5E08h
.rdata$r:00005E08 ; COMDAT (pick any)
.rdata$r:00005E08                 public ??_R3CProgressVirt@NZip@NArchive@@8
.rdata$r:00005E08 ; NArchive::NZip::CProgressVirt::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005E08 ??_R3CProgressVirt@NZip@NArchive@@8 db    0
.rdata$r:00005E08                                         ; DATA XREF: .rdata$r:00005DD8o
.rdata$r:00005E08                                         ; .rdata$r:00005E60o
.rdata$r:00005E09                 db    0
.rdata$r:00005E0A                 db    0
.rdata$r:00005E0B                 db    0
.rdata$r:00005E0C                 db    0
.rdata$r:00005E0D                 db    0
.rdata$r:00005E0E                 db    0
.rdata$r:00005E0F                 db    0
.rdata$r:00005E10                 db    1
.rdata$r:00005E11                 db    0
.rdata$r:00005E12                 db    0
.rdata$r:00005E13                 db    0
.rdata$r:00005E14                 dd offset ??_R2CProgressVirt@NZip@NArchive@@8 ; NArchive::NZip::CProgressVirt::`RTTI Base Class Array'
.rdata$r:00005E14 _rdata$r        ends
.rdata$r:00005E14
.rdata$r:00005E18 ; ===========================================================================
.rdata$r:00005E18
.rdata$r:00005E18 ; Segment type: Pure data
.rdata$r:00005E18 ; Segment permissions: Read
.rdata$r:00005E18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005E18                 assume cs:_rdata$r
.rdata$r:00005E18                 ;org 5E18h
.rdata$r:00005E18 ; COMDAT (pick any)
.rdata$r:00005E18                 public ??_R2CProgressVirt@NZip@NArchive@@8
.rdata$r:00005E18 ; NArchive::NZip::CProgressVirt::`RTTI Base Class Array'
.rdata$r:00005E18 ??_R2CProgressVirt@NZip@NArchive@@8 dd offset ??_R1A@?0A@EA@CProgressVirt@NZip@NArchive@@8
.rdata$r:00005E18                                         ; DATA XREF: .rdata$r:00005E14o
.rdata$r:00005E18                                         ; NArchive::NZip::CProgressVirt::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005E1C                 db    0
.rdata$r:00005E1D                 align 10h
.rdata$r:00005E1D _rdata$r        ends
.rdata$r:00005E1D
.text:00005E20 ; ===========================================================================
.text:00005E20
.text:00005E20 ; Segment type: Pure code
.text:00005E20 ; Segment permissions: Read/Execute
.text:00005E20 _text           segment para public 'CODE' use32
.text:00005E20                 assume cs:_text
.text:00005E20                 ;org 5E20h
.text:00005E20 ; COMDAT (pick any)
.text:00005E20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005E20
.text:00005E20 ; =============== S U B R O U T I N E =======================================
.text:00005E20
.text:00005E20 ; Attributes: bp-based frame
.text:00005E20
.text:00005E20 ; _DWORD __thiscall NArchive::NZip::CProgressVirt::CProgressVirt(NArchive::NZip::CProgressVirt *__hidden this)
.text:00005E20                 public ??0CProgressVirt@NZip@NArchive@@QAE@XZ
.text:00005E20 ??0CProgressVirt@NZip@NArchive@@QAE@XZ proc near
.text:00005E20                                         ; CODE XREF: NArchive::NZip::CProgressImp::CProgressImp(IArchiveOpenCallback *)+11p
.text:00005E20
.text:00005E20 var_4           = dword ptr -4
.text:00005E20
.text:00005E20                 push    ebp
.text:00005E21                 mov     ebp, esp
.text:00005E23                 push    ecx
.text:00005E24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005E2B                 mov     [ebp+var_4], ecx
.text:00005E2E                 mov     eax, [ebp+var_4]
.text:00005E31                 mov     dword ptr [eax], offset ??_7CProgressVirt@NZip@NArchive@@6B@ ; const NArchive::NZip::CProgressVirt::`vftable'
.text:00005E37                 mov     eax, [ebp+var_4]
.text:00005E3A                 mov     esp, ebp
.text:00005E3C                 pop     ebp
.text:00005E3D                 retn
.text:00005E3D ??0CProgressVirt@NZip@NArchive@@QAE@XZ endp
.text:00005E3D
.text:00005E3D ; ---------------------------------------------------------------------------
.text:00005E3E                 align 10h
.text:00005E3E _text           ends
.text:00005E3E
.rdata:00005E40 ; ===========================================================================
.rdata:00005E40
.rdata:00005E40 ; Segment type: Pure data
.rdata:00005E40 ; Segment permissions: Read
.rdata:00005E40 _rdata          segment dword public 'DATA' use32
.rdata:00005E40                 assume cs:_rdata
.rdata:00005E40                 ;org 5E40h
.rdata:00005E40 ; COMDAT (pick largest)
.rdata:00005E40                 dd offset ??_R4CProgressVirt@NZip@NArchive@@6B@ ; const NArchive::NZip::CProgressVirt::`RTTI Complete Object Locator'
.rdata:00005E44                 public ??_7CProgressVirt@NZip@NArchive@@6B@
.rdata:00005E44 ; const NArchive::NZip::CProgressVirt::`vftable'
.rdata:00005E44 ??_7CProgressVirt@NZip@NArchive@@6B@ dd offset __purecall
.rdata:00005E44                                         ; DATA XREF: NArchive::NZip::CProgressVirt::CProgressVirt(void)+11o
.rdata:00005E48                 dd offset __purecall
.rdata:00005E4C                 dd offset __purecall
.rdata:00005E4C _rdata          ends
.rdata:00005E4C
.rdata$r:00005E50 ; ===========================================================================
.rdata$r:00005E50
.rdata$r:00005E50 ; Segment type: Pure data
.rdata$r:00005E50 ; Segment permissions: Read
.rdata$r:00005E50 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005E50                 assume cs:_rdata$r
.rdata$r:00005E50                 ;org 5E50h
.rdata$r:00005E50 ; COMDAT (pick any)
.rdata$r:00005E50                 public ??_R4CProgressVirt@NZip@NArchive@@6B@
.rdata$r:00005E50 ; const NArchive::NZip::CProgressVirt::`RTTI Complete Object Locator'
.rdata$r:00005E50 ??_R4CProgressVirt@NZip@NArchive@@6B@ db    0
.rdata$r:00005E50                                         ; DATA XREF: .rdata:00005E40o
.rdata$r:00005E51                 db    0
.rdata$r:00005E52                 db    0
.rdata$r:00005E53                 db    0
.rdata$r:00005E54                 db    0
.rdata$r:00005E55                 db    0
.rdata$r:00005E56                 db    0
.rdata$r:00005E57                 db    0
.rdata$r:00005E58                 db    0
.rdata$r:00005E59                 db    0
.rdata$r:00005E5A                 db    0
.rdata$r:00005E5B                 db    0
.rdata$r:00005E5C                 dd offset ??_R0?AUCProgressVirt@NZip@NArchive@@@8 ; NArchive::NZip::CProgressVirt `RTTI Type Descriptor'
.rdata$r:00005E60                 dd offset ??_R3CProgressVirt@NZip@NArchive@@8 ; NArchive::NZip::CProgressVirt::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005E60 _rdata$r        ends
.rdata$r:00005E60
.text:00005E64 ; ===========================================================================
.text:00005E64
.text:00005E64 ; Segment type: Pure code
.text:00005E64 ; Segment permissions: Read/Execute
.text:00005E64 _text           segment para public 'CODE' use32
.text:00005E64                 assume cs:_text
.text:00005E64                 ;org 5E64h
.text:00005E64 ; COMDAT (pick any)
.text:00005E64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005E64
.text:00005E64 ; =============== S U B R O U T I N E =======================================
.text:00005E64
.text:00005E64 ; Attributes: bp-based frame
.text:00005E64
.text:00005E64 ; _DWORD __thiscall NArchive::NZip::CProgressImp::~CProgressImp(NArchive::NZip::CProgressImp *__hidden this)
.text:00005E64                 public ??1CProgressImp@NZip@NArchive@@QAE@XZ
.text:00005E64 ??1CProgressImp@NZip@NArchive@@QAE@XZ proc near
.text:00005E64                                         ; CODE XREF: NArchive::NZip::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+C9p
.text:00005E64                                         ; __unwindfunclet$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$4+3j
.text:00005E64
.text:00005E64 var_4           = dword ptr -4
.text:00005E64
.text:00005E64                 push    ebp
.text:00005E65                 mov     ebp, esp
.text:00005E67                 push    ecx
.text:00005E68                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005E6F                 mov     [ebp+var_4], ecx
.text:00005E72                 mov     ecx, [ebp+var_4]
.text:00005E75                 add     ecx, 4
.text:00005E78                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:00005E7D                 add     esp, 4
.text:00005E80                 cmp     ebp, esp
.text:00005E82                 call    __RTC_CheckEsp
.text:00005E87                 mov     esp, ebp
.text:00005E89                 pop     ebp
.text:00005E8A                 retn
.text:00005E8A ??1CProgressImp@NZip@NArchive@@QAE@XZ endp
.text:00005E8A
.text:00005E8A ; ---------------------------------------------------------------------------
.text:00005E8B                 align 4
.text:00005E8B _text           ends
.text:00005E8B
.rdata:00005E8C ; ===========================================================================
.rdata:00005E8C
.rdata:00005E8C ; Segment type: Pure data
.rdata:00005E8C ; Segment permissions: Read
.rdata:00005E8C _rdata          segment dword public 'DATA' use32
.rdata:00005E8C                 assume cs:_rdata
.rdata:00005E8C                 ;org 5E8Ch
.rdata:00005E8C ; COMDAT (pick largest)
.rdata:00005E8C                 dd offset ??_R4CLzmaDecoder@NZip@NArchive@@6B@ ; const NArchive::NZip::CLzmaDecoder::`RTTI Complete Object Locator'
.rdata:00005E90                 public ??_7CLzmaDecoder@NZip@NArchive@@6B@
.rdata:00005E90 ; const NArchive::NZip::CLzmaDecoder::`vftable'
.rdata:00005E90 ??_7CLzmaDecoder@NZip@NArchive@@6B@ dd offset ?QueryInterface@CLzmaDecoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:00005E90                                         ; DATA XREF: NArchive::NZip::CLzmaDecoder::CLzmaDecoder(void)+4Fo
.rdata:00005E90                                         ; NArchive::NZip::CLzmaDecoder::QueryInterface(_GUID const &,void * *)
.rdata:00005E94                 dd offset ?AddRef@CLzmaDecoder@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CLzmaDecoder::AddRef(void)
.rdata:00005E98                 dd offset ?Release@CLzmaDecoder@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CLzmaDecoder::Release(void)
.rdata:00005E9C                 dd offset ?Code@CLzmaDecoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NArchive::NZip::CLzmaDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00005E9C _rdata          ends
.rdata:00005E9C
.rdata$r:00005EA0 ; ===========================================================================
.rdata$r:00005EA0
.rdata$r:00005EA0 ; Segment type: Pure data
.rdata$r:00005EA0 ; Segment permissions: Read
.rdata$r:00005EA0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005EA0                 assume cs:_rdata$r
.rdata$r:00005EA0                 ;org 5EA0h
.rdata$r:00005EA0 ; COMDAT (pick any)
.rdata$r:00005EA0                 public ??_R4CLzmaDecoder@NZip@NArchive@@6B@
.rdata$r:00005EA0 ; const NArchive::NZip::CLzmaDecoder::`RTTI Complete Object Locator'
.rdata$r:00005EA0 ??_R4CLzmaDecoder@NZip@NArchive@@6B@ db    0 ; DATA XREF: .rdata:00005E8Co
.rdata$r:00005EA1                 db    0
.rdata$r:00005EA2                 db    0
.rdata$r:00005EA3                 db    0
.rdata$r:00005EA4                 db    0
.rdata$r:00005EA5                 db    0
.rdata$r:00005EA6                 db    0
.rdata$r:00005EA7                 db    0
.rdata$r:00005EA8                 db    0
.rdata$r:00005EA9                 db    0
.rdata$r:00005EAA                 db    0
.rdata$r:00005EAB                 db    0
.rdata$r:00005EAC                 dd offset ??_R0?AVCLzmaDecoder@NZip@NArchive@@@8 ; NArchive::NZip::CLzmaDecoder `RTTI Type Descriptor'
.rdata$r:00005EB0                 dd offset ??_R3CLzmaDecoder@NZip@NArchive@@8 ; NArchive::NZip::CLzmaDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005EB0 _rdata$r        ends
.rdata$r:00005EB0
.data:00005EB4 ; ===========================================================================
.data:00005EB4
.data:00005EB4 ; Segment type: Pure data
.data:00005EB4 ; Segment permissions: Read/Write
.data:00005EB4 _data           segment dword public 'DATA' use32
.data:00005EB4                 assume cs:_data
.data:00005EB4                 ;org 5EB4h
.data:00005EB4 ; COMDAT (pick any)
.data:00005EB4                 public ??_R0?AVCLzmaDecoder@NZip@NArchive@@@8
.data:00005EB4 ; class NArchive::NZip::CLzmaDecoder `RTTI Type Descriptor'
.data:00005EB4 ??_R0?AVCLzmaDecoder@NZip@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00005EB4                                         ; DATA XREF: .rdata$r:00005EACo
.data:00005EB4                                         ; .rdata$r:NArchive::NZip::CLzmaDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005EB4                                         ; const type_info::`vftable'
.data:00005EB8                 db    0
.data:00005EB9                 db    0
.data:00005EBA                 db    0
.data:00005EBB                 db    0
.data:00005EBC                 db  2Eh ; .
.data:00005EBD                 db  3Fh ; ?
.data:00005EBE                 db  41h ; A
.data:00005EBF                 db  56h ; V
.data:00005EC0                 db  43h ; C
.data:00005EC1                 db  4Ch ; L
.data:00005EC2                 db  7Ah ; z
.data:00005EC3                 db  6Dh ; m
.data:00005EC4                 db  61h ; a
.data:00005EC5                 db  44h ; D
.data:00005EC6                 db  65h ; e
.data:00005EC7                 db  63h ; c
.data:00005EC8                 db  6Fh ; o
.data:00005EC9                 db  64h ; d
.data:00005ECA                 db  65h ; e
.data:00005ECB                 db  72h ; r
.data:00005ECC                 db  40h ; @
.data:00005ECD                 db  4Eh ; N
.data:00005ECE                 db  5Ah ; Z
.data:00005ECF                 db  69h ; i
.data:00005ED0                 db  70h ; p
.data:00005ED1                 db  40h ; @
.data:00005ED2                 db  4Eh ; N
.data:00005ED3                 db  41h ; A
.data:00005ED4                 db  72h ; r
.data:00005ED5                 db  63h ; c
.data:00005ED6                 db  68h ; h
.data:00005ED7                 db  69h ; i
.data:00005ED8                 db  76h ; v
.data:00005ED9                 db  65h ; e
.data:00005EDA                 db  40h ; @
.data:00005EDB                 db  40h ; @
.data:00005EDC                 db    0
.data:00005EDD                 align 10h
.data:00005EDD _data           ends
.data:00005EDD
.rdata$r:00005EE0 ; ===========================================================================
.rdata$r:00005EE0
.rdata$r:00005EE0 ; Segment type: Pure data
.rdata$r:00005EE0 ; Segment permissions: Read
.rdata$r:00005EE0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005EE0                 assume cs:_rdata$r
.rdata$r:00005EE0                 ;org 5EE0h
.rdata$r:00005EE0 ; COMDAT (pick any)
.rdata$r:00005EE0                 public ??_R3CLzmaDecoder@NZip@NArchive@@8
.rdata$r:00005EE0 ; NArchive::NZip::CLzmaDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005EE0 ??_R3CLzmaDecoder@NZip@NArchive@@8 db    0 ; DATA XREF: .rdata$r:00005EB0o
.rdata$r:00005EE0                                         ; .rdata$r:00005F1Co
.rdata$r:00005EE1                 db    0
.rdata$r:00005EE2                 db    0
.rdata$r:00005EE3                 db    0
.rdata$r:00005EE4                 db    1
.rdata$r:00005EE5                 db    0
.rdata$r:00005EE6                 db    0
.rdata$r:00005EE7                 db    0
.rdata$r:00005EE8                 db    4
.rdata$r:00005EE9                 db    0
.rdata$r:00005EEA                 db    0
.rdata$r:00005EEB                 db    0
.rdata$r:00005EEC                 dd offset ??_R2CLzmaDecoder@NZip@NArchive@@8 ; NArchive::NZip::CLzmaDecoder::`RTTI Base Class Array'
.rdata$r:00005EEC _rdata$r        ends
.rdata$r:00005EEC
.rdata$r:00005EF0 ; ===========================================================================
.rdata$r:00005EF0
.rdata$r:00005EF0 ; Segment type: Pure data
.rdata$r:00005EF0 ; Segment permissions: Read
.rdata$r:00005EF0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005EF0                 assume cs:_rdata$r
.rdata$r:00005EF0                 ;org 5EF0h
.rdata$r:00005EF0 ; COMDAT (pick any)
.rdata$r:00005EF0                 public ??_R2CLzmaDecoder@NZip@NArchive@@8
.rdata$r:00005EF0 ; NArchive::NZip::CLzmaDecoder::`RTTI Base Class Array'
.rdata$r:00005EF0 ??_R2CLzmaDecoder@NZip@NArchive@@8 dd offset ??_R1A@?0A@EA@CLzmaDecoder@NZip@NArchive@@8
.rdata$r:00005EF0                                         ; DATA XREF: .rdata$r:00005EECo
.rdata$r:00005EF0                                         ; NArchive::NZip::CLzmaDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005EF4                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005EF8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005EFC                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00005F00                 db    0
.rdata$r:00005F01                 align 4
.rdata$r:00005F01 _rdata$r        ends
.rdata$r:00005F01
.rdata$r:00005F04 ; ===========================================================================
.rdata$r:00005F04
.rdata$r:00005F04 ; Segment type: Pure data
.rdata$r:00005F04 ; Segment permissions: Read
.rdata$r:00005F04 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005F04                 assume cs:_rdata$r
.rdata$r:00005F04                 ;org 5F04h
.rdata$r:00005F04 ; COMDAT (pick any)
.rdata$r:00005F04                 public ??_R1A@?0A@EA@CLzmaDecoder@NZip@NArchive@@8
.rdata$r:00005F04 ; NArchive::NZip::CLzmaDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005F04 ??_R1A@?0A@EA@CLzmaDecoder@NZip@NArchive@@8 dd offset ??_R0?AVCLzmaDecoder@NZip@NArchive@@@8
.rdata$r:00005F04                                         ; DATA XREF: .rdata$r:NArchive::NZip::CLzmaDecoder::`RTTI Base Class Array'o
.rdata$r:00005F04                                         ; NArchive::NZip::CLzmaDecoder `RTTI Type Descriptor'
.rdata$r:00005F08                 db    3
.rdata$r:00005F09                 db    0
.rdata$r:00005F0A                 db    0
.rdata$r:00005F0B                 db    0
.rdata$r:00005F0C                 db    0
.rdata$r:00005F0D                 db    0
.rdata$r:00005F0E                 db    0
.rdata$r:00005F0F                 db    0
.rdata$r:00005F10                 db 0FFh
.rdata$r:00005F11                 db 0FFh
.rdata$r:00005F12                 db 0FFh
.rdata$r:00005F13                 db 0FFh
.rdata$r:00005F14                 db    0
.rdata$r:00005F15                 db    0
.rdata$r:00005F16                 db    0
.rdata$r:00005F17                 db    0
.rdata$r:00005F18                 db  40h ; @
.rdata$r:00005F19                 db    0
.rdata$r:00005F1A                 db    0
.rdata$r:00005F1B                 db    0
.rdata$r:00005F1C                 dd offset ??_R3CLzmaDecoder@NZip@NArchive@@8 ; NArchive::NZip::CLzmaDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005F1C _rdata$r        ends
.rdata$r:00005F1C
.rdata$r:00005F20 ; ===========================================================================
.rdata$r:00005F20
.rdata$r:00005F20 ; Segment type: Pure data
.rdata$r:00005F20 ; Segment permissions: Read
.rdata$r:00005F20 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005F20                 assume cs:_rdata$r
.rdata$r:00005F20                 ;org 5F20h
.rdata$r:00005F20 ; COMDAT (pick any)
.rdata$r:00005F20                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00005F20 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005F20 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:00005F20                                         ; DATA XREF: .rdata$r:00005EF4o
.rdata$r:00005F20                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o ...
.rdata$r:00005F20                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00005F24                 db    1
.rdata$r:00005F25                 db    0
.rdata$r:00005F26                 db    0
.rdata$r:00005F27                 db    0
.rdata$r:00005F28                 db    0
.rdata$r:00005F29                 db    0
.rdata$r:00005F2A                 db    0
.rdata$r:00005F2B                 db    0
.rdata$r:00005F2C                 db 0FFh
.rdata$r:00005F2D                 db 0FFh
.rdata$r:00005F2E                 db 0FFh
.rdata$r:00005F2F                 db 0FFh
.rdata$r:00005F30                 db    0
.rdata$r:00005F31                 db    0
.rdata$r:00005F32                 db    0
.rdata$r:00005F33                 db    0
.rdata$r:00005F34                 db  40h ; @
.rdata$r:00005F35                 db    0
.rdata$r:00005F36                 db    0
.rdata$r:00005F37                 db    0
.rdata$r:00005F38                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005F38 _rdata$r        ends
.rdata$r:00005F38
.data:00005F3C ; ===========================================================================
.data:00005F3C
.data:00005F3C ; Segment type: Pure data
.data:00005F3C ; Segment permissions: Read/Write
.data:00005F3C _data           segment dword public 'DATA' use32
.data:00005F3C                 assume cs:_data
.data:00005F3C                 ;org 5F3Ch
.data:00005F3C ; COMDAT (pick any)
.data:00005F3C                 public ??_R0?AUICompressCoder@@@8
.data:00005F3C ; struct ICompressCoder `RTTI Type Descriptor'
.data:00005F3C ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:00005F3C                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005F3C                                         ; .rdata$r:00005FE4o
.data:00005F3C                                         ; const type_info::`vftable'
.data:00005F40                 db    0
.data:00005F41                 db    0
.data:00005F42                 db    0
.data:00005F43                 db    0
.data:00005F44                 db  2Eh ; .
.data:00005F45                 db  3Fh ; ?
.data:00005F46                 db  41h ; A
.data:00005F47                 db  55h ; U
.data:00005F48                 db  49h ; I
.data:00005F49                 db  43h ; C
.data:00005F4A                 db  6Fh ; o
.data:00005F4B                 db  6Dh ; m
.data:00005F4C                 db  70h ; p
.data:00005F4D                 db  72h ; r
.data:00005F4E                 db  65h ; e
.data:00005F4F                 db  73h ; s
.data:00005F50                 db  73h ; s
.data:00005F51                 db  43h ; C
.data:00005F52                 db  6Fh ; o
.data:00005F53                 db  64h ; d
.data:00005F54                 db  65h ; e
.data:00005F55                 db  72h ; r
.data:00005F56                 db  40h ; @
.data:00005F57                 db  40h ; @
.data:00005F58                 db    0
.data:00005F59                 align 4
.data:00005F59 _data           ends
.data:00005F59
.rdata$r:00005F5C ; ===========================================================================
.rdata$r:00005F5C
.rdata$r:00005F5C ; Segment type: Pure data
.rdata$r:00005F5C ; Segment permissions: Read
.rdata$r:00005F5C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005F5C                 assume cs:_rdata$r
.rdata$r:00005F5C                 ;org 5F5Ch
.rdata$r:00005F5C ; COMDAT (pick any)
.rdata$r:00005F5C                 public ??_R3ICompressCoder@@8
.rdata$r:00005F5C ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005F5C ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:00005F38o
.rdata$r:00005F5C                                         ; .rdata$r:00005FE8o
.rdata$r:00005F5D                 db    0
.rdata$r:00005F5E                 db    0
.rdata$r:00005F5F                 db    0
.rdata$r:00005F60                 db    0
.rdata$r:00005F61                 db    0
.rdata$r:00005F62                 db    0
.rdata$r:00005F63                 db    0
.rdata$r:00005F64                 db    2
.rdata$r:00005F65                 db    0
.rdata$r:00005F66                 db    0
.rdata$r:00005F67                 db    0
.rdata$r:00005F68                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00005F68 _rdata$r        ends
.rdata$r:00005F68
.rdata$r:00005F6C ; ===========================================================================
.rdata$r:00005F6C
.rdata$r:00005F6C ; Segment type: Pure data
.rdata$r:00005F6C ; Segment permissions: Read
.rdata$r:00005F6C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005F6C                 assume cs:_rdata$r
.rdata$r:00005F6C                 ;org 5F6Ch
.rdata$r:00005F6C ; COMDAT (pick any)
.rdata$r:00005F6C                 public ??_R2ICompressCoder@@8
.rdata$r:00005F6C ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00005F6C ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00005F6C                                         ; DATA XREF: .rdata$r:00005F68o
.rdata$r:00005F6C                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005F70                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005F74                 db    0
.rdata$r:00005F75                 align 4
.rdata$r:00005F75 _rdata$r        ends
.rdata$r:00005F75
.rdata$r:00005F78 ; ===========================================================================
.rdata$r:00005F78
.rdata$r:00005F78 ; Segment type: Pure data
.rdata$r:00005F78 ; Segment permissions: Read
.rdata$r:00005F78 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005F78                 assume cs:_rdata$r
.rdata$r:00005F78                 ;org 5F78h
.rdata$r:00005F78 ; COMDAT (pick any)
.rdata$r:00005F78                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00005F78 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00005F78 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00005F78                                         ; DATA XREF: .rdata$r:00005EFCo
.rdata$r:00005F78                                         ; .rdata$r:00006A6Co ...
.rdata$r:00005F78                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00005F7C                 align 10h
.rdata$r:00005F80                 db    4
.rdata$r:00005F81                 db    0
.rdata$r:00005F82                 db    0
.rdata$r:00005F83                 db    0
.rdata$r:00005F84                 db 0FFh
.rdata$r:00005F85                 db 0FFh
.rdata$r:00005F86                 db 0FFh
.rdata$r:00005F87                 db 0FFh
.rdata$r:00005F88                 db    0
.rdata$r:00005F89                 db    0
.rdata$r:00005F8A                 db    0
.rdata$r:00005F8B                 db    0
.rdata$r:00005F8C                 db  40h ; @
.rdata$r:00005F8D                 db    0
.rdata$r:00005F8E                 db    0
.rdata$r:00005F8F                 db    0
.rdata$r:00005F90                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005F90 _rdata$r        ends
.rdata$r:00005F90
.text:00005F94 ; ===========================================================================
.text:00005F94
.text:00005F94 ; Segment type: Pure code
.text:00005F94 ; Segment permissions: Read/Execute
.text:00005F94 _text           segment para public 'CODE' use32
.text:00005F94                 assume cs:_text
.text:00005F94                 ;org 5F94h
.text:00005F94 ; COMDAT (pick any)
.text:00005F94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005F94
.text:00005F94 ; =============== S U B R O U T I N E =======================================
.text:00005F94
.text:00005F94 ; Attributes: bp-based frame
.text:00005F94
.text:00005F94 ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:00005F94                 public ??0ICompressCoder@@QAE@XZ
.text:00005F94 ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NArchive::NZip::CLzmaDecoder::CLzmaDecoder(void)+3Cp
.text:00005F94                                         ; NCompress::CCopyCoder::CCopyCoder(void)+11p ...
.text:00005F94
.text:00005F94 var_4           = dword ptr -4
.text:00005F94
.text:00005F94                 push    ebp
.text:00005F95                 mov     ebp, esp
.text:00005F97                 push    ecx
.text:00005F98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F9F                 mov     [ebp+var_4], ecx
.text:00005FA2                 mov     ecx, [ebp+var_4]
.text:00005FA5                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00005FAA                 mov     eax, [ebp+var_4]
.text:00005FAD                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:00005FB3                 mov     eax, [ebp+var_4]
.text:00005FB6                 add     esp, 4
.text:00005FB9                 cmp     ebp, esp
.text:00005FBB                 call    __RTC_CheckEsp
.text:00005FC0                 mov     esp, ebp
.text:00005FC2                 pop     ebp
.text:00005FC3                 retn
.text:00005FC3 ??0ICompressCoder@@QAE@XZ endp
.text:00005FC3
.text:00005FC3 _text           ends
.text:00005FC3
.rdata:00005FC4 ; ===========================================================================
.rdata:00005FC4
.rdata:00005FC4 ; Segment type: Pure data
.rdata:00005FC4 ; Segment permissions: Read
.rdata:00005FC4 _rdata          segment dword public 'DATA' use32
.rdata:00005FC4                 assume cs:_rdata
.rdata:00005FC4                 ;org 5FC4h
.rdata:00005FC4 ; COMDAT (pick largest)
.rdata:00005FC4                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:00005FC8                 public ??_7ICompressCoder@@6B@
.rdata:00005FC8 ; const ICompressCoder::`vftable'
.rdata:00005FC8 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:00005FC8                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:00005FCC                 dd offset __purecall
.rdata:00005FD0                 dd offset __purecall
.rdata:00005FD4                 dd offset __purecall
.rdata:00005FD4 _rdata          ends
.rdata:00005FD4
.rdata$r:00005FD8 ; ===========================================================================
.rdata$r:00005FD8
.rdata$r:00005FD8 ; Segment type: Pure data
.rdata$r:00005FD8 ; Segment permissions: Read
.rdata$r:00005FD8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005FD8                 assume cs:_rdata$r
.rdata$r:00005FD8                 ;org 5FD8h
.rdata$r:00005FD8 ; COMDAT (pick any)
.rdata$r:00005FD8                 public ??_R4ICompressCoder@@6B@
.rdata$r:00005FD8 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:00005FD8 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:00005FC4o
.rdata$r:00005FD9                 db    0
.rdata$r:00005FDA                 db    0
.rdata$r:00005FDB                 db    0
.rdata$r:00005FDC                 db    0
.rdata$r:00005FDD                 db    0
.rdata$r:00005FDE                 db    0
.rdata$r:00005FDF                 db    0
.rdata$r:00005FE0                 db    0
.rdata$r:00005FE1                 db    0
.rdata$r:00005FE2                 db    0
.rdata$r:00005FE3                 db    0
.rdata$r:00005FE4                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00005FE8                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005FE8 _rdata$r        ends
.rdata$r:00005FE8
.text:00005FEC ; ===========================================================================
.text:00005FEC
.text:00005FEC ; Segment type: Pure code
.text:00005FEC ; Segment permissions: Read/Execute
.text:00005FEC _text           segment para public 'CODE' use32
.text:00005FEC                 assume cs:_text
.text:00005FEC                 ;org 5FECh
.text:00005FEC ; COMDAT (pick any)
.text:00005FEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005FEC
.text:00005FEC ; =============== S U B R O U T I N E =======================================
.text:00005FEC
.text:00005FEC ; Attributes: bp-based frame
.text:00005FEC
.text:00005FEC ; __int32 __stdcall NArchive::NZip::CLzmaDecoder::QueryInterface(NArchive::NZip::CLzmaDecoder *this, const struct _GUID *Buf1, void **)
.text:00005FEC                 public ?QueryInterface@CLzmaDecoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00005FEC ?QueryInterface@CLzmaDecoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00005FEC                                         ; DATA XREF: .rdata:const NArchive::NZip::CLzmaDecoder::`vftable'o
.text:00005FEC
.text:00005FEC this            = dword ptr  8
.text:00005FEC Buf1            = dword ptr  0Ch
.text:00005FEC arg_8           = dword ptr  10h
.text:00005FEC
.text:00005FEC                 push    ebp
.text:00005FED                 mov     ebp, esp
.text:00005FEF                 mov     eax, [ebp+arg_8]
.text:00005FF2                 mov     dword ptr [eax], 0
.text:00005FF8                 push    offset _IID_IUnknown ; Buf2
.text:00005FFD                 mov     ecx, [ebp+Buf1]
.text:00006000                 push    ecx             ; Buf1
.text:00006001                 call    ___@8           ; __(x,x)
.text:00006006                 test    eax, eax
.text:00006008                 jz      short loc_6014
.text:0000600A                 mov     edx, [ebp+arg_8]
.text:0000600D                 mov     eax, [ebp+this]
.text:00006010                 mov     [edx], eax
.text:00006012                 jmp     short loc_601B
.text:00006014 ; ---------------------------------------------------------------------------
.text:00006014
.text:00006014 loc_6014:                               ; CODE XREF: NArchive::NZip::CLzmaDecoder::QueryInterface(_GUID const &,void * *)+1Cj
.text:00006014                 mov     eax, 80004002h
.text:00006019                 jmp     short loc_602C
.text:0000601B ; ---------------------------------------------------------------------------
.text:0000601B
.text:0000601B loc_601B:                               ; CODE XREF: NArchive::NZip::CLzmaDecoder::QueryInterface(_GUID const &,void * *)+26j
.text:0000601B                 mov     ecx, [ebp+this]
.text:0000601E                 mov     edx, [ecx+4]
.text:00006021                 add     edx, 1
.text:00006024                 mov     eax, [ebp+this]
.text:00006027                 mov     [eax+4], edx
.text:0000602A                 xor     eax, eax
.text:0000602C
.text:0000602C loc_602C:                               ; CODE XREF: NArchive::NZip::CLzmaDecoder::QueryInterface(_GUID const &,void * *)+2Dj
.text:0000602C                 cmp     ebp, esp
.text:0000602E                 call    __RTC_CheckEsp
.text:00006033                 pop     ebp
.text:00006034                 retn    0Ch
.text:00006034 ?QueryInterface@CLzmaDecoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:00006034
.text:00006034 ; ---------------------------------------------------------------------------
.text:00006037                 align 4
.text:00006037 _text           ends
.text:00006037
.text:00006038 ; ===========================================================================
.text:00006038
.text:00006038 ; Segment type: Pure code
.text:00006038 ; Segment permissions: Read/Execute
.text:00006038 _text           segment para public 'CODE' use32
.text:00006038                 assume cs:_text
.text:00006038                 ;org 6038h
.text:00006038 ; COMDAT (pick any)
.text:00006038                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006038
.text:00006038 ; =============== S U B R O U T I N E =======================================
.text:00006038
.text:00006038 ; Attributes: bp-based frame
.text:00006038
.text:00006038 ; unsigned __int32 __stdcall NArchive::NZip::CLzmaDecoder::AddRef(NArchive::NZip::CLzmaDecoder *this)
.text:00006038                 public ?AddRef@CLzmaDecoder@NZip@NArchive@@UAGKXZ
.text:00006038 ?AddRef@CLzmaDecoder@NZip@NArchive@@UAGKXZ proc near
.text:00006038                                         ; DATA XREF: .rdata:00005E94o
.text:00006038
.text:00006038 var_4           = dword ptr -4
.text:00006038 this            = dword ptr  8
.text:00006038
.text:00006038                 push    ebp
.text:00006039                 mov     ebp, esp
.text:0000603B                 push    ecx
.text:0000603C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006043                 mov     eax, [ebp+this]
.text:00006046                 mov     ecx, [eax+4]
.text:00006049                 add     ecx, 1
.text:0000604C                 mov     [ebp+var_4], ecx
.text:0000604F                 mov     edx, [ebp+this]
.text:00006052                 mov     eax, [ebp+var_4]
.text:00006055                 mov     [edx+4], eax
.text:00006058                 mov     eax, [ebp+var_4]
.text:0000605B                 mov     esp, ebp
.text:0000605D                 pop     ebp
.text:0000605E                 retn    4
.text:0000605E ?AddRef@CLzmaDecoder@NZip@NArchive@@UAGKXZ endp
.text:0000605E
.text:0000605E ; ---------------------------------------------------------------------------
.text:00006061                 align 4
.text:00006061 _text           ends
.text:00006061
.text:00006064 ; ===========================================================================
.text:00006064
.text:00006064 ; Segment type: Pure code
.text:00006064 ; Segment permissions: Read/Execute
.text:00006064 _text           segment para public 'CODE' use32
.text:00006064                 assume cs:_text
.text:00006064                 ;org 6064h
.text:00006064 ; COMDAT (pick any)
.text:00006064                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006064
.text:00006064 ; =============== S U B R O U T I N E =======================================
.text:00006064
.text:00006064 ; Attributes: bp-based frame
.text:00006064
.text:00006064 ; unsigned __int32 __stdcall NArchive::NZip::CLzmaDecoder::Release(NArchive::NZip::CLzmaDecoder *this)
.text:00006064                 public ?Release@CLzmaDecoder@NZip@NArchive@@UAGKXZ
.text:00006064 ?Release@CLzmaDecoder@NZip@NArchive@@UAGKXZ proc near
.text:00006064                                         ; DATA XREF: .rdata:00005E98o
.text:00006064
.text:00006064 var_10          = dword ptr -10h
.text:00006064 var_C           = dword ptr -0Ch
.text:00006064 var_8           = dword ptr -8
.text:00006064 var_4           = dword ptr -4
.text:00006064 this            = dword ptr  8
.text:00006064
.text:00006064                 push    ebp
.text:00006065                 mov     ebp, esp
.text:00006067                 sub     esp, 10h
.text:0000606A                 mov     eax, 0CCCCCCCCh
.text:0000606F                 mov     [ebp+var_10], eax
.text:00006072                 mov     [ebp+var_C], eax
.text:00006075                 mov     [ebp+var_8], eax
.text:00006078                 mov     [ebp+var_4], eax
.text:0000607B                 mov     eax, [ebp+this]
.text:0000607E                 mov     ecx, [eax+4]
.text:00006081                 sub     ecx, 1
.text:00006084                 mov     [ebp+var_C], ecx
.text:00006087                 mov     edx, [ebp+this]
.text:0000608A                 mov     eax, [ebp+var_C]
.text:0000608D                 mov     [edx+4], eax
.text:00006090                 cmp     [ebp+var_C], 0
.text:00006094                 jz      short loc_609E
.text:00006096                 mov     ecx, [ebp+this]
.text:00006099                 mov     eax, [ecx+4]
.text:0000609C                 jmp     short loc_60C8
.text:0000609E ; ---------------------------------------------------------------------------
.text:0000609E
.text:0000609E loc_609E:                               ; CODE XREF: NArchive::NZip::CLzmaDecoder::Release(void)+30j
.text:0000609E                 mov     edx, [ebp+this]
.text:000060A1                 mov     [ebp+var_8], edx
.text:000060A4                 mov     eax, [ebp+var_8]
.text:000060A7                 mov     [ebp+var_4], eax
.text:000060AA                 cmp     [ebp+var_4], 0
.text:000060AE                 jz      short loc_60BF
.text:000060B0                 push    1
.text:000060B2                 mov     ecx, [ebp+var_4]
.text:000060B5                 call    ??_GCLzmaDecoder@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CLzmaDecoder::`scalar deleting destructor'(uint)
.text:000060BA                 mov     [ebp+var_10], eax
.text:000060BD                 jmp     short loc_60C6
.text:000060BF ; ---------------------------------------------------------------------------
.text:000060BF
.text:000060BF loc_60BF:                               ; CODE XREF: NArchive::NZip::CLzmaDecoder::Release(void)+4Aj
.text:000060BF                 mov     [ebp+var_10], 0
.text:000060C6
.text:000060C6 loc_60C6:                               ; CODE XREF: NArchive::NZip::CLzmaDecoder::Release(void)+59j
.text:000060C6                 xor     eax, eax
.text:000060C8
.text:000060C8 loc_60C8:                               ; CODE XREF: NArchive::NZip::CLzmaDecoder::Release(void)+38j
.text:000060C8                 add     esp, 10h
.text:000060CB                 cmp     ebp, esp
.text:000060CD                 call    __RTC_CheckEsp
.text:000060D2                 mov     esp, ebp
.text:000060D4                 pop     ebp
.text:000060D5                 retn    4
.text:000060D5 ?Release@CLzmaDecoder@NZip@NArchive@@UAGKXZ endp
.text:000060D5
.text:000060D5 _text           ends
.text:000060D5
.text:000060D8 ; ===========================================================================
.text:000060D8
.text:000060D8 ; Segment type: Pure code
.text:000060D8 ; Segment permissions: Read/Execute
.text:000060D8 _text           segment para public 'CODE' use32
.text:000060D8                 assume cs:_text
.text:000060D8                 ;org 60D8h
.text:000060D8 ; COMDAT (pick any)
.text:000060D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000060D8
.text:000060D8 ; =============== S U B R O U T I N E =======================================
.text:000060D8
.text:000060D8 ; Attributes: bp-based frame
.text:000060D8
.text:000060D8 ; public: void * __thiscall NArchive::NZip::CLzmaDecoder::`scalar deleting destructor'(unsigned int)
.text:000060D8                 public ??_GCLzmaDecoder@NZip@NArchive@@QAEPAXI@Z
.text:000060D8 ??_GCLzmaDecoder@NZip@NArchive@@QAEPAXI@Z proc near
.text:000060D8                                         ; CODE XREF: NArchive::NZip::CLzmaDecoder::Release(void)+51p
.text:000060D8
.text:000060D8 var_4           = dword ptr -4
.text:000060D8 arg_0           = dword ptr  8
.text:000060D8
.text:000060D8                 push    ebp
.text:000060D9                 mov     ebp, esp
.text:000060DB                 push    ecx
.text:000060DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000060E3                 mov     [ebp+var_4], ecx
.text:000060E6                 mov     ecx, [ebp+var_4] ; this
.text:000060E9                 call    ??1CLzmaDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CLzmaDecoder::~CLzmaDecoder(void)
.text:000060EE                 mov     eax, [ebp+arg_0]
.text:000060F1                 and     eax, 1
.text:000060F4                 jz      short loc_6102
.text:000060F6                 mov     ecx, [ebp+var_4]
.text:000060F9                 push    ecx             ; void *
.text:000060FA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000060FF                 add     esp, 4
.text:00006102
.text:00006102 loc_6102:                               ; CODE XREF: NArchive::NZip::CLzmaDecoder::`scalar deleting destructor'(uint)+1Cj
.text:00006102                 mov     eax, [ebp+var_4]
.text:00006105                 add     esp, 4
.text:00006108                 cmp     ebp, esp
.text:0000610A                 call    __RTC_CheckEsp
.text:0000610F                 mov     esp, ebp
.text:00006111                 pop     ebp
.text:00006112                 retn    4
.text:00006112 ??_GCLzmaDecoder@NZip@NArchive@@QAEPAXI@Z endp
.text:00006112
.text:00006112 ; ---------------------------------------------------------------------------
.text:00006115                 align 4
.text:00006115 _text           ends
.text:00006115
.text:00006118 ; ===========================================================================
.text:00006118
.text:00006118 ; Segment type: Pure code
.text:00006118 ; Segment permissions: Read/Execute
.text:00006118 _text           segment para public 'CODE' use32
.text:00006118                 assume cs:_text
.text:00006118                 ;org 6118h
.text:00006118 ; COMDAT (pick any)
.text:00006118                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006118
.text:00006118 ; =============== S U B R O U T I N E =======================================
.text:00006118
.text:00006118 ; Attributes: bp-based frame
.text:00006118
.text:00006118 ; _DWORD __thiscall NArchive::NZip::CLzmaDecoder::~CLzmaDecoder(NArchive::NZip::CLzmaDecoder *__hidden this)
.text:00006118                 public ??1CLzmaDecoder@NZip@NArchive@@QAE@XZ
.text:00006118 ??1CLzmaDecoder@NZip@NArchive@@QAE@XZ proc near
.text:00006118                                         ; CODE XREF: NArchive::NZip::CLzmaDecoder::`scalar deleting destructor'(uint)+11p
.text:00006118
.text:00006118 var_4           = dword ptr -4
.text:00006118
.text:00006118                 push    ebp
.text:00006119                 mov     ebp, esp
.text:0000611B                 push    ecx
.text:0000611C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006123                 mov     [ebp+var_4], ecx
.text:00006126                 mov     ecx, [ebp+var_4]
.text:00006129                 add     ecx, 0Ch
.text:0000612C                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00006131                 add     esp, 4
.text:00006134                 cmp     ebp, esp
.text:00006136                 call    __RTC_CheckEsp
.text:0000613B                 mov     esp, ebp
.text:0000613D                 pop     ebp
.text:0000613E                 retn
.text:0000613E ??1CLzmaDecoder@NZip@NArchive@@QAE@XZ endp
.text:0000613E
.text:0000613E ; ---------------------------------------------------------------------------
.text:0000613F                 align 10h
.text:0000613F _text           ends
.text:0000613F
.text:00006140 ; ===========================================================================
.text:00006140
.text:00006140 ; Segment type: Pure code
.text:00006140 ; Segment permissions: Read/Execute
.text:00006140 _text           segment para public 'CODE' use32
.text:00006140                 assume cs:_text
.text:00006140                 ;org 6140h
.text:00006140 ; COMDAT (pick any)
.text:00006140                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006140
.text:00006140 ; =============== S U B R O U T I N E =======================================
.text:00006140
.text:00006140 ; Attributes: bp-based frame
.text:00006140
.text:00006140 ; unsigned int __thiscall AString::Len(AString *__hidden this)
.text:00006140                 public ?Len@AString@@QBEIXZ
.text:00006140 ?Len@AString@@QBEIXZ proc near          ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+7EBp
.text:00006140
.text:00006140 var_4           = dword ptr -4
.text:00006140
.text:00006140                 push    ebp
.text:00006141                 mov     ebp, esp
.text:00006143                 push    ecx
.text:00006144                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000614B                 mov     [ebp+var_4], ecx
.text:0000614E                 mov     eax, [ebp+var_4]
.text:00006151                 mov     eax, [eax+4]
.text:00006154                 mov     esp, ebp
.text:00006156                 pop     ebp
.text:00006157                 retn
.text:00006157 ?Len@AString@@QBEIXZ endp
.text:00006157
.text:00006157 _text           ends
.text:00006157
.text:00006158 ; ===========================================================================
.text:00006158
.text:00006158 ; Segment type: Pure code
.text:00006158 ; Segment permissions: Read/Execute
.text:00006158 _text           segment para public 'CODE' use32
.text:00006158                 assume cs:_text
.text:00006158                 ;org 6158h
.text:00006158 ; COMDAT (pick any)
.text:00006158                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006158
.text:00006158 ; =============== S U B R O U T I N E =======================================
.text:00006158
.text:00006158 ; Attributes: bp-based frame
.text:00006158
.text:00006158 ; _DWORD __thiscall CMyComBSTR::CMyComBSTR(CMyComBSTR *__hidden this)
.text:00006158                 public ??0CMyComBSTR@@QAE@XZ
.text:00006158 ??0CMyComBSTR@@QAE@XZ proc near         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+5FAp
.text:00006158
.text:00006158 var_4           = dword ptr -4
.text:00006158
.text:00006158                 push    ebp
.text:00006159                 mov     ebp, esp
.text:0000615B                 push    ecx
.text:0000615C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006163                 mov     [ebp+var_4], ecx
.text:00006166                 mov     eax, [ebp+var_4]
.text:00006169                 mov     dword ptr [eax], 0
.text:0000616F                 mov     eax, [ebp+var_4]
.text:00006172                 mov     esp, ebp
.text:00006174                 pop     ebp
.text:00006175                 retn
.text:00006175 ??0CMyComBSTR@@QAE@XZ endp
.text:00006175
.text:00006175 ; ---------------------------------------------------------------------------
.text:00006176                 align 4
.text:00006176 _text           ends
.text:00006176
.text:00006178 ; ===========================================================================
.text:00006178
.text:00006178 ; Segment type: Pure code
.text:00006178 ; Segment permissions: Read/Execute
.text:00006178 _text           segment para public 'CODE' use32
.text:00006178                 assume cs:_text
.text:00006178                 ;org 6178h
.text:00006178 ; COMDAT (pick any)
.text:00006178                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006178
.text:00006178 ; =============== S U B R O U T I N E =======================================
.text:00006178
.text:00006178 ; Attributes: bp-based frame
.text:00006178
.text:00006178 ; _DWORD __thiscall CMyComBSTR::~CMyComBSTR(CMyComBSTR *__hidden this)
.text:00006178                 public ??1CMyComBSTR@@QAE@XZ
.text:00006178 ??1CMyComBSTR@@QAE@XZ proc near         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+662p
.text:00006178                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+84Cp ...
.text:00006178
.text:00006178 var_4           = dword ptr -4
.text:00006178
.text:00006178                 push    ebp
.text:00006179                 mov     ebp, esp
.text:0000617B                 push    ecx
.text:0000617C                 push    esi
.text:0000617D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006184                 mov     [ebp+var_4], ecx
.text:00006187                 mov     esi, esp
.text:00006189                 mov     eax, [ebp+var_4]
.text:0000618C                 mov     ecx, [eax]
.text:0000618E                 push    ecx             ; bstrString
.text:0000618F                 call    dword ptr ds:__imp__SysFreeString@4 ; SysFreeString(x)
.text:00006195                 cmp     esi, esp
.text:00006197                 call    __RTC_CheckEsp
.text:0000619C                 pop     esi
.text:0000619D                 add     esp, 4
.text:000061A0                 cmp     ebp, esp
.text:000061A2                 call    __RTC_CheckEsp
.text:000061A7                 mov     esp, ebp
.text:000061A9                 pop     ebp
.text:000061AA                 retn
.text:000061AA ??1CMyComBSTR@@QAE@XZ endp
.text:000061AA
.text:000061AA ; ---------------------------------------------------------------------------
.text:000061AB                 align 4
.text:000061AB _text           ends
.text:000061AB
.text:000061AC ; ===========================================================================
.text:000061AC
.text:000061AC ; Segment type: Pure code
.text:000061AC ; Segment permissions: Read/Execute
.text:000061AC _text           segment para public 'CODE' use32
.text:000061AC                 assume cs:_text
.text:000061AC                 ;org 61ACh
.text:000061AC ; COMDAT (pick any)
.text:000061AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000061AC
.text:000061AC ; =============== S U B R O U T I N E =======================================
.text:000061AC
.text:000061AC ; Attributes: bp-based frame
.text:000061AC
.text:000061AC ; public: wchar_t * * __thiscall CMyComBSTR::operator&(void)
.text:000061AC                 public ??ICMyComBSTR@@QAEPAPA_WXZ
.text:000061AC ??ICMyComBSTR@@QAEPAPA_WXZ proc near    ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+61Ap
.text:000061AC
.text:000061AC var_4           = dword ptr -4
.text:000061AC
.text:000061AC                 push    ebp
.text:000061AD                 mov     ebp, esp
.text:000061AF                 push    ecx
.text:000061B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000061B7                 mov     [ebp+var_4], ecx
.text:000061BA                 mov     eax, [ebp+var_4]
.text:000061BD                 mov     esp, ebp
.text:000061BF                 pop     ebp
.text:000061C0                 retn
.text:000061C0 ??ICMyComBSTR@@QAEPAPA_WXZ endp
.text:000061C0
.text:000061C0 ; ---------------------------------------------------------------------------
.text:000061C1                 align 4
.text:000061C1 _text           ends
.text:000061C1
.text:000061C4 ; ===========================================================================
.text:000061C4
.text:000061C4 ; Segment type: Pure code
.text:000061C4 ; Segment permissions: Read/Execute
.text:000061C4 _text           segment para public 'CODE' use32
.text:000061C4                 assume cs:_text
.text:000061C4                 ;org 61C4h
.text:000061C4 ; COMDAT (pick any)
.text:000061C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000061C4
.text:000061C4 ; =============== S U B R O U T I N E =======================================
.text:000061C4
.text:000061C4 ; Attributes: bp-based frame
.text:000061C4
.text:000061C4 ; public: __thiscall CMyComBSTR::operator wchar_t const *(void)const
.text:000061C4                 public ??BCMyComBSTR@@QBEPB_WXZ
.text:000061C4 ??BCMyComBSTR@@QBEPB_WXZ proc near      ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+6C9p
.text:000061C4                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+6ECp ...
.text:000061C4
.text:000061C4 var_4           = dword ptr -4
.text:000061C4
.text:000061C4                 push    ebp
.text:000061C5                 mov     ebp, esp
.text:000061C7                 push    ecx
.text:000061C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000061CF                 mov     [ebp+var_4], ecx
.text:000061D2                 mov     eax, [ebp+var_4]
.text:000061D5                 mov     eax, [eax]
.text:000061D7                 mov     esp, ebp
.text:000061D9                 pop     ebp
.text:000061DA                 retn
.text:000061DA ??BCMyComBSTR@@QBEPB_WXZ endp
.text:000061DA
.text:000061DA ; ---------------------------------------------------------------------------
.text:000061DB                 align 4
.text:000061DB _text           ends
.text:000061DB
.text:000061DC ; ===========================================================================
.text:000061DC
.text:000061DC ; Segment type: Pure code
.text:000061DC ; Segment permissions: Read/Execute
.text:000061DC _text           segment para public 'CODE' use32
.text:000061DC                 assume cs:_text
.text:000061DC                 ;org 61DCh
.text:000061DC ; COMDAT (pick any)
.text:000061DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000061DC
.text:000061DC ; =============== S U B R O U T I N E =======================================
.text:000061DC
.text:000061DC ; Attributes: bp-based frame
.text:000061DC
.text:000061DC ; _DWORD __thiscall CFilterCoder::C_InStream_Releaser::C_InStream_Releaser(CFilterCoder::C_InStream_Releaser *__hidden this)
.text:000061DC                 public ??0C_InStream_Releaser@CFilterCoder@@QAE@XZ
.text:000061DC ??0C_InStream_Releaser@CFilterCoder@@QAE@XZ proc near
.text:000061DC                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+4Dp
.text:000061DC
.text:000061DC var_4           = dword ptr -4
.text:000061DC
.text:000061DC                 push    ebp
.text:000061DD                 mov     ebp, esp
.text:000061DF                 push    ecx
.text:000061E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000061E7                 mov     [ebp+var_4], ecx
.text:000061EA                 mov     eax, [ebp+var_4]
.text:000061ED                 mov     dword ptr [eax], 0
.text:000061F3                 mov     eax, [ebp+var_4]
.text:000061F6                 mov     esp, ebp
.text:000061F8                 pop     ebp
.text:000061F9                 retn
.text:000061F9 ??0C_InStream_Releaser@CFilterCoder@@QAE@XZ endp
.text:000061F9
.text:000061F9 ; ---------------------------------------------------------------------------
.text:000061FA                 align 4
.text:000061FA _text           ends
.text:000061FA
.text:000061FC ; ===========================================================================
.text:000061FC
.text:000061FC ; Segment type: Pure code
.text:000061FC ; Segment permissions: Read/Execute
.text:000061FC _text           segment para public 'CODE' use32
.text:000061FC                 assume cs:_text
.text:000061FC                 ;org 61FCh
.text:000061FC ; COMDAT (pick any)
.text:000061FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000061FC
.text:000061FC ; =============== S U B R O U T I N E =======================================
.text:000061FC
.text:000061FC ; Attributes: bp-based frame
.text:000061FC
.text:000061FC ; _DWORD __thiscall CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(CFilterCoder::C_InStream_Releaser *__hidden this)
.text:000061FC                 public ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ
.text:000061FC ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ proc near
.text:000061FC                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+D0p
.text:000061FC                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1F4p ...
.text:000061FC
.text:000061FC var_4           = dword ptr -4
.text:000061FC
.text:000061FC                 push    ebp
.text:000061FD                 mov     ebp, esp
.text:000061FF                 push    ecx
.text:00006200                 push    esi
.text:00006201                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006208                 mov     [ebp+var_4], ecx
.text:0000620B                 mov     eax, [ebp+var_4]
.text:0000620E                 cmp     dword ptr [eax], 0
.text:00006211                 jz      short loc_6232
.text:00006213                 mov     ecx, [ebp+var_4]
.text:00006216                 mov     edx, [ecx]
.text:00006218                 mov     eax, [ebp+var_4]
.text:0000621B                 mov     ecx, [eax]
.text:0000621D                 add     ecx, 0Ch
.text:00006220                 mov     edx, [edx+0Ch]
.text:00006223                 mov     esi, esp
.text:00006225                 push    ecx
.text:00006226                 mov     eax, [edx+10h]
.text:00006229                 call    eax
.text:0000622B                 cmp     esi, esp
.text:0000622D                 call    __RTC_CheckEsp
.text:00006232
.text:00006232 loc_6232:                               ; CODE XREF: CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser(void)+15j
.text:00006232                 pop     esi
.text:00006233                 add     esp, 4
.text:00006236                 cmp     ebp, esp
.text:00006238                 call    __RTC_CheckEsp
.text:0000623D                 mov     esp, ebp
.text:0000623F                 pop     ebp
.text:00006240                 retn
.text:00006240 ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ endp
.text:00006240
.text:00006240 ; ---------------------------------------------------------------------------
.text:00006241                 align 4
.text:00006241 _text           ends
.text:00006241
.text:00006244 ; ===========================================================================
.text:00006244
.text:00006244 ; Segment type: Pure code
.text:00006244 ; Segment permissions: Read/Execute
.text:00006244 _text           segment para public 'CODE' use32
.text:00006244                 assume cs:_text
.text:00006244                 ;org 6244h
.text:00006244 ; COMDAT (pick any)
.text:00006244                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006244
.text:00006244 ; =============== S U B R O U T I N E =======================================
.text:00006244
.text:00006244 ; Attributes: bp-based frame
.text:00006244
.text:00006244 ; _DWORD __thiscall NCompress::CCopyCoder::CCopyCoder(NCompress::CCopyCoder *__hidden this)
.text:00006244                 public ??0CCopyCoder@NCompress@@QAE@XZ
.text:00006244 ??0CCopyCoder@NCompress@@QAE@XZ proc near
.text:00006244                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+A0Dp
.text:00006244
.text:00006244 var_4           = dword ptr -4
.text:00006244
.text:00006244                 push    ebp
.text:00006245                 mov     ebp, esp
.text:00006247                 push    ecx
.text:00006248                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000624F                 mov     [ebp+var_4], ecx
.text:00006252                 mov     ecx, [ebp+var_4] ; this
.text:00006255                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:0000625A                 mov     ecx, [ebp+var_4]
.text:0000625D                 add     ecx, 4          ; this
.text:00006260                 call    ??0ICompressSetInStream@@QAE@XZ ; ICompressSetInStream::ICompressSetInStream(void)
.text:00006265                 mov     ecx, [ebp+var_4]
.text:00006268                 add     ecx, 8          ; this
.text:0000626B                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00006270                 mov     ecx, [ebp+var_4]
.text:00006273                 add     ecx, 0Ch        ; this
.text:00006276                 call    ??0ICompressGetInStreamProcessedSize@@QAE@XZ ; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)
.text:0000627B                 mov     ecx, [ebp+var_4]
.text:0000627E                 add     ecx, 10h        ; this
.text:00006281                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00006286                 mov     eax, [ebp+var_4]
.text:00006289                 mov     dword ptr [eax], offset ??_7CCopyCoder@NCompress@@6BICompressCoder@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressCoder'}
.text:0000628F                 mov     ecx, [ebp+var_4]
.text:00006292                 mov     dword ptr [ecx+4], offset ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}
.text:00006299                 mov     edx, [ebp+var_4]
.text:0000629C                 mov     dword ptr [edx+8], offset ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ ; const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}
.text:000062A3                 mov     eax, [ebp+var_4]
.text:000062A6                 mov     dword ptr [eax+0Ch], offset ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:000062AD                 mov     ecx, [ebp+var_4]
.text:000062B0                 mov     dword ptr [ecx+14h], 0
.text:000062B7                 mov     ecx, [ebp+var_4]
.text:000062BA                 add     ecx, 18h
.text:000062BD                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:000062C2                 mov     edx, [ebp+var_4]
.text:000062C5                 mov     dword ptr [edx+20h], 0
.text:000062CC                 mov     dword ptr [edx+24h], 0
.text:000062D3                 mov     eax, [ebp+var_4]
.text:000062D6                 add     esp, 4
.text:000062D9                 cmp     ebp, esp
.text:000062DB                 call    __RTC_CheckEsp
.text:000062E0                 mov     esp, ebp
.text:000062E2                 pop     ebp
.text:000062E3                 retn
.text:000062E3 ??0CCopyCoder@NCompress@@QAE@XZ endp
.text:000062E3
.text:000062E3 _text           ends
.text:000062E3
.rdata:000062E4 ; ===========================================================================
.rdata:000062E4
.rdata:000062E4 ; Segment type: Pure data
.rdata:000062E4 ; Segment permissions: Read
.rdata:000062E4 _rdata          segment dword public 'DATA' use32
.rdata:000062E4                 assume cs:_rdata
.rdata:000062E4                 ;org 62E4h
.rdata:000062E4 ; COMDAT (pick largest)
.rdata:000062E4                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata:000062E8                 public ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata:000062E8 ; const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.rdata:000062E8 ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:000062E8                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+62o
.rdata:000062E8                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:000062EC                 dd offset ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}' (void)
.rdata:000062F0                 dd offset ?Release@CCopyCoder@NCompress@@WM@AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}' (void)
.rdata:000062F4                 dd offset ?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z ; NCompress::CCopyCoder::GetInStreamProcessedSize(unsigned __int64 *)
.rdata:000062F4 _rdata          ends
.rdata:000062F4
.rdata:000062F8 ; ===========================================================================
.rdata:000062F8
.rdata:000062F8 ; Segment type: Pure data
.rdata:000062F8 ; Segment permissions: Read
.rdata:000062F8 _rdata          segment dword public 'DATA' use32
.rdata:000062F8                 assume cs:_rdata
.rdata:000062F8                 ;org 62F8h
.rdata:000062F8 ; COMDAT (pick largest)
.rdata:000062F8                 dd offset ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:000062FC                 public ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
.rdata:000062FC ; const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}
.rdata:000062FC ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:000062FC                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+58o
.rdata:000062FC                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00006300                 dd offset ?AddRef@CCopyCoder@NCompress@@W7AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}' (void)
.rdata:00006304                 dd offset ?Release@CCopyCoder@NCompress@@W7AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}' (void)
.rdata:00006308                 dd offset ?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z ; NCompress::CCopyCoder::Read(void *,uint,uint *)
.rdata:00006308 _rdata          ends
.rdata:00006308
.rdata:0000630C ; ===========================================================================
.rdata:0000630C
.rdata:0000630C ; Segment type: Pure data
.rdata:0000630C ; Segment permissions: Read
.rdata:0000630C _rdata          segment dword public 'DATA' use32
.rdata:0000630C                 assume cs:_rdata
.rdata:0000630C                 ;org 630Ch
.rdata:0000630C ; COMDAT (pick largest)
.rdata:0000630C                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:00006310                 public ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
.rdata:00006310 ; const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}
.rdata:00006310 ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00006310                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+4Eo
.rdata:00006310                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00006314                 dd offset ?AddRef@CCopyCoder@NCompress@@W3AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}' (void)
.rdata:00006318                 dd offset ?Release@CCopyCoder@NCompress@@W3AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}' (void)
.rdata:0000631C                 dd offset ?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::CCopyCoder::SetInStream(ISequentialInStream *)
.rdata:00006320                 dd offset ?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ ; NCompress::CCopyCoder::ReleaseInStream(void)
.rdata:00006320 _rdata          ends
.rdata:00006320
.rdata:00006324 ; ===========================================================================
.rdata:00006324
.rdata:00006324 ; Segment type: Pure data
.rdata:00006324 ; Segment permissions: Read
.rdata:00006324 _rdata          segment dword public 'DATA' use32
.rdata:00006324                 assume cs:_rdata
.rdata:00006324                 ;org 6324h
.rdata:00006324 ; COMDAT (pick largest)
.rdata:00006324                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:00006328                 public ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
.rdata:00006328 ; const NCompress::CCopyCoder::`vftable'{for `ICompressCoder'}
.rdata:00006328 ??_7CCopyCoder@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00006328                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+45o
.rdata:00006328                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.rdata:0000632C                 dd offset ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.rdata:00006330                 dd offset ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.rdata:00006334                 dd offset ?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00006334 _rdata          ends
.rdata:00006334
.rdata$r:00006338 ; ===========================================================================
.rdata$r:00006338
.rdata$r:00006338 ; Segment type: Pure data
.rdata$r:00006338 ; Segment permissions: Read
.rdata$r:00006338 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006338                 assume cs:_rdata$r
.rdata$r:00006338                 ;org 6338h
.rdata$r:00006338 ; COMDAT (pick any)
.rdata$r:00006338                 public ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@
.rdata$r:00006338 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:00006338 ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:00006338                                         ; DATA XREF: .rdata:00006324o
.rdata$r:00006339                 db    0
.rdata$r:0000633A                 db    0
.rdata$r:0000633B                 db    0
.rdata$r:0000633C                 db    0
.rdata$r:0000633D                 db    0
.rdata$r:0000633E                 db    0
.rdata$r:0000633F                 db    0
.rdata$r:00006340                 db    0
.rdata$r:00006341                 db    0
.rdata$r:00006342                 db    0
.rdata$r:00006343                 db    0
.rdata$r:00006344                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00006348                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006348 _rdata$r        ends
.rdata$r:00006348
.data:0000634C ; ===========================================================================
.data:0000634C
.data:0000634C ; Segment type: Pure data
.data:0000634C ; Segment permissions: Read/Write
.data:0000634C _data           segment dword public 'DATA' use32
.data:0000634C                 assume cs:_data
.data:0000634C                 ;org 634Ch
.data:0000634C ; COMDAT (pick any)
.data:0000634C                 public ??_R0?AVCCopyCoder@NCompress@@@8
.data:0000634C ; class NCompress::CCopyCoder `RTTI Type Descriptor'
.data:0000634C ??_R0?AVCCopyCoder@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:0000634C                                         ; DATA XREF: .rdata$r:00006344o
.data:0000634C                                         ; .rdata$r:NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000634C                                         ; const type_info::`vftable'
.data:00006350                 db    0
.data:00006351                 db    0
.data:00006352                 db    0
.data:00006353                 db    0
.data:00006354                 db  2Eh ; .
.data:00006355                 db  3Fh ; ?
.data:00006356                 db  41h ; A
.data:00006357                 db  56h ; V
.data:00006358                 db  43h ; C
.data:00006359                 db  43h ; C
.data:0000635A                 db  6Fh ; o
.data:0000635B                 db  70h ; p
.data:0000635C                 db  79h ; y
.data:0000635D                 db  43h ; C
.data:0000635E                 db  6Fh ; o
.data:0000635F                 db  64h ; d
.data:00006360                 db  65h ; e
.data:00006361                 db  72h ; r
.data:00006362                 db  40h ; @
.data:00006363                 db  4Eh ; N
.data:00006364                 db  43h ; C
.data:00006365                 db  6Fh ; o
.data:00006366                 db  6Dh ; m
.data:00006367                 db  70h ; p
.data:00006368                 db  72h ; r
.data:00006369                 db  65h ; e
.data:0000636A                 db  73h ; s
.data:0000636B                 db  73h ; s
.data:0000636C                 db  40h ; @
.data:0000636D                 db  40h ; @
.data:0000636E                 db    0
.data:0000636F                 align 10h
.data:0000636F _data           ends
.data:0000636F
.rdata$r:00006370 ; ===========================================================================
.rdata$r:00006370
.rdata$r:00006370 ; Segment type: Pure data
.rdata$r:00006370 ; Segment permissions: Read
.rdata$r:00006370 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006370                 assume cs:_rdata$r
.rdata$r:00006370                 ;org 6370h
.rdata$r:00006370 ; COMDAT (pick any)
.rdata$r:00006370                 public ??_R3CCopyCoder@NCompress@@8
.rdata$r:00006370 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006370 ??_R3CCopyCoder@NCompress@@8 db    0    ; DATA XREF: .rdata$r:00006348o
.rdata$r:00006370                                         ; .rdata$r:000063C4o ...
.rdata$r:00006371                 db    0
.rdata$r:00006372                 db    0
.rdata$r:00006373                 db    0
.rdata$r:00006374                 db    5
.rdata$r:00006375                 db    0
.rdata$r:00006376                 db    0
.rdata$r:00006377                 db    0
.rdata$r:00006378                 db  0Ah
.rdata$r:00006379                 db    0
.rdata$r:0000637A                 db    0
.rdata$r:0000637B                 db    0
.rdata$r:0000637C                 dd offset ??_R2CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Base Class Array'
.rdata$r:0000637C _rdata$r        ends
.rdata$r:0000637C
.rdata$r:00006380 ; ===========================================================================
.rdata$r:00006380
.rdata$r:00006380 ; Segment type: Pure data
.rdata$r:00006380 ; Segment permissions: Read
.rdata$r:00006380 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006380                 assume cs:_rdata$r
.rdata$r:00006380                 ;org 6380h
.rdata$r:00006380 ; COMDAT (pick any)
.rdata$r:00006380                 public ??_R2CCopyCoder@NCompress@@8
.rdata$r:00006380 ; NCompress::CCopyCoder::`RTTI Base Class Array'
.rdata$r:00006380 ??_R2CCopyCoder@NCompress@@8 dd offset ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
.rdata$r:00006380                                         ; DATA XREF: .rdata$r:0000637Co
.rdata$r:00006380                                         ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006384                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006388                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:0000638C                 dd offset ??_R13?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00006390                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00006394                 dd offset ??_R17?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00006398                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:0000639C                 dd offset ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:000063A0                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:000063A4                 dd offset ??_R1BA@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:000063A8                 db    0
.rdata$r:000063A9                 align 4
.rdata$r:000063A9 _rdata$r        ends
.rdata$r:000063A9
.rdata$r:000063AC ; ===========================================================================
.rdata$r:000063AC
.rdata$r:000063AC ; Segment type: Pure data
.rdata$r:000063AC ; Segment permissions: Read
.rdata$r:000063AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000063AC                 assume cs:_rdata$r
.rdata$r:000063AC                 ;org 63ACh
.rdata$r:000063AC ; COMDAT (pick any)
.rdata$r:000063AC                 public ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
.rdata$r:000063AC ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000063AC ??_R1A@?0A@EA@CCopyCoder@NCompress@@8 dd offset ??_R0?AVCCopyCoder@NCompress@@@8
.rdata$r:000063AC                                         ; DATA XREF: .rdata$r:NCompress::CCopyCoder::`RTTI Base Class Array'o
.rdata$r:000063AC                                         ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:000063B0                 db    9
.rdata$r:000063B1                 db    0
.rdata$r:000063B2                 db    0
.rdata$r:000063B3                 db    0
.rdata$r:000063B4                 db    0
.rdata$r:000063B5                 db    0
.rdata$r:000063B6                 db    0
.rdata$r:000063B7                 db    0
.rdata$r:000063B8                 db 0FFh
.rdata$r:000063B9                 db 0FFh
.rdata$r:000063BA                 db 0FFh
.rdata$r:000063BB                 db 0FFh
.rdata$r:000063BC                 db    0
.rdata$r:000063BD                 db    0
.rdata$r:000063BE                 db    0
.rdata$r:000063BF                 db    0
.rdata$r:000063C0                 db  40h ; @
.rdata$r:000063C1                 db    0
.rdata$r:000063C2                 db    0
.rdata$r:000063C3                 db    0
.rdata$r:000063C4                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000063C4 _rdata$r        ends
.rdata$r:000063C4
.rdata$r:000063C8 ; ===========================================================================
.rdata$r:000063C8
.rdata$r:000063C8 ; Segment type: Pure data
.rdata$r:000063C8 ; Segment permissions: Read
.rdata$r:000063C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000063C8                 assume cs:_rdata$r
.rdata$r:000063C8                 ;org 63C8h
.rdata$r:000063C8 ; COMDAT (pick any)
.rdata$r:000063C8                 public ??_R13?0A@EA@ICompressSetInStream@@8
.rdata$r:000063C8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:000063C8 ??_R13?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:000063C8                                         ; DATA XREF: .rdata$r:0000638Co
.rdata$r:000063C8                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:000063CC                 db    1
.rdata$r:000063CD                 db    0
.rdata$r:000063CE                 db    0
.rdata$r:000063CF                 db    0
.rdata$r:000063D0                 db    4
.rdata$r:000063D1                 db    0
.rdata$r:000063D2                 db    0
.rdata$r:000063D3                 db    0
.rdata$r:000063D4                 db 0FFh
.rdata$r:000063D5                 db 0FFh
.rdata$r:000063D6                 db 0FFh
.rdata$r:000063D7                 db 0FFh
.rdata$r:000063D8                 db    0
.rdata$r:000063D9                 db    0
.rdata$r:000063DA                 db    0
.rdata$r:000063DB                 db    0
.rdata$r:000063DC                 db  40h ; @
.rdata$r:000063DD                 db    0
.rdata$r:000063DE                 db    0
.rdata$r:000063DF                 db    0
.rdata$r:000063E0                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000063E0 _rdata$r        ends
.rdata$r:000063E0
.data:000063E4 ; ===========================================================================
.data:000063E4
.data:000063E4 ; Segment type: Pure data
.data:000063E4 ; Segment permissions: Read/Write
.data:000063E4 _data           segment dword public 'DATA' use32
.data:000063E4                 assume cs:_data
.data:000063E4                 ;org 63E4h
.data:000063E4 ; COMDAT (pick any)
.data:000063E4                 public ??_R0?AUICompressSetInStream@@@8
.data:000063E4 ; struct ICompressSetInStream `RTTI Type Descriptor'
.data:000063E4 ??_R0?AUICompressSetInStream@@@8 dd offset ??_7type_info@@6B@
.data:000063E4                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000063E4                                         ; .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000063E4                                         ; const type_info::`vftable'
.data:000063E8                 db    0
.data:000063E9                 db    0
.data:000063EA                 db    0
.data:000063EB                 db    0
.data:000063EC                 db  2Eh ; .
.data:000063ED                 db  3Fh ; ?
.data:000063EE                 db  41h ; A
.data:000063EF                 db  55h ; U
.data:000063F0                 db  49h ; I
.data:000063F1                 db  43h ; C
.data:000063F2                 db  6Fh ; o
.data:000063F3                 db  6Dh ; m
.data:000063F4                 db  70h ; p
.data:000063F5                 db  72h ; r
.data:000063F6                 db  65h ; e
.data:000063F7                 db  73h ; s
.data:000063F8                 db  73h ; s
.data:000063F9                 db  53h ; S
.data:000063FA                 db  65h ; e
.data:000063FB                 db  74h ; t
.data:000063FC                 db  49h ; I
.data:000063FD                 db  6Eh ; n
.data:000063FE                 db  53h ; S
.data:000063FF                 db  74h ; t
.data:00006400                 db  72h ; r
.data:00006401                 db  65h ; e
.data:00006402                 db  61h ; a
.data:00006403                 db  6Dh ; m
.data:00006404                 db  40h ; @
.data:00006405                 db  40h ; @
.data:00006406                 db    0
.data:00006407                 align 4
.data:00006407 _data           ends
.data:00006407
.rdata$r:00006408 ; ===========================================================================
.rdata$r:00006408
.rdata$r:00006408 ; Segment type: Pure data
.rdata$r:00006408 ; Segment permissions: Read
.rdata$r:00006408 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006408                 assume cs:_rdata$r
.rdata$r:00006408                 ;org 6408h
.rdata$r:00006408 ; COMDAT (pick any)
.rdata$r:00006408                 public ??_R3ICompressSetInStream@@8
.rdata$r:00006408 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006408 ??_R3ICompressSetInStream@@8 db    0    ; DATA XREF: .rdata$r:000063E0o
.rdata$r:00006408                                         ; .rdata$r:0000643Co ...
.rdata$r:00006409                 db    0
.rdata$r:0000640A                 db    0
.rdata$r:0000640B                 db    0
.rdata$r:0000640C                 db    0
.rdata$r:0000640D                 db    0
.rdata$r:0000640E                 db    0
.rdata$r:0000640F                 db    0
.rdata$r:00006410                 db    2
.rdata$r:00006411                 db    0
.rdata$r:00006412                 db    0
.rdata$r:00006413                 db    0
.rdata$r:00006414                 dd offset ??_R2ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:00006414 _rdata$r        ends
.rdata$r:00006414
.rdata$r:00006418 ; ===========================================================================
.rdata$r:00006418
.rdata$r:00006418 ; Segment type: Pure data
.rdata$r:00006418 ; Segment permissions: Read
.rdata$r:00006418 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006418                 assume cs:_rdata$r
.rdata$r:00006418                 ;org 6418h
.rdata$r:00006418 ; COMDAT (pick any)
.rdata$r:00006418                 public ??_R2ICompressSetInStream@@8
.rdata$r:00006418 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:00006418 ??_R2ICompressSetInStream@@8 dd offset ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:00006418                                         ; DATA XREF: .rdata$r:00006414o
.rdata$r:00006418                                         ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000641C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006420                 db    0
.rdata$r:00006421                 align 4
.rdata$r:00006421 _rdata$r        ends
.rdata$r:00006421
.rdata$r:00006424 ; ===========================================================================
.rdata$r:00006424
.rdata$r:00006424 ; Segment type: Pure data
.rdata$r:00006424 ; Segment permissions: Read
.rdata$r:00006424 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006424                 assume cs:_rdata$r
.rdata$r:00006424                 ;org 6424h
.rdata$r:00006424 ; COMDAT (pick any)
.rdata$r:00006424                 public ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:00006424 ; ICompressSetInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006424 ??_R1A@?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:00006424                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Array'o
.rdata$r:00006424                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00006428                 db    1
.rdata$r:00006429                 db    0
.rdata$r:0000642A                 db    0
.rdata$r:0000642B                 db    0
.rdata$r:0000642C                 db    0
.rdata$r:0000642D                 db    0
.rdata$r:0000642E                 db    0
.rdata$r:0000642F                 db    0
.rdata$r:00006430                 db 0FFh
.rdata$r:00006431                 db 0FFh
.rdata$r:00006432                 db 0FFh
.rdata$r:00006433                 db 0FFh
.rdata$r:00006434                 db    0
.rdata$r:00006435                 db    0
.rdata$r:00006436                 db    0
.rdata$r:00006437                 db    0
.rdata$r:00006438                 db  40h ; @
.rdata$r:00006439                 db    0
.rdata$r:0000643A                 db    0
.rdata$r:0000643B                 db    0
.rdata$r:0000643C                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000643C _rdata$r        ends
.rdata$r:0000643C
.rdata$r:00006440 ; ===========================================================================
.rdata$r:00006440
.rdata$r:00006440 ; Segment type: Pure data
.rdata$r:00006440 ; Segment permissions: Read
.rdata$r:00006440 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006440                 assume cs:_rdata$r
.rdata$r:00006440                 ;org 6440h
.rdata$r:00006440 ; COMDAT (pick any)
.rdata$r:00006440                 public ??_R17?0A@EA@ISequentialInStream@@8
.rdata$r:00006440 ; ISequentialInStream::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00006440 ??_R17?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00006440                                         ; DATA XREF: .rdata$r:00006394o
.rdata$r:00006440                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00006444                 db    1
.rdata$r:00006445                 db    0
.rdata$r:00006446                 db    0
.rdata$r:00006447                 db    0
.rdata$r:00006448                 db    8
.rdata$r:00006449                 db    0
.rdata$r:0000644A                 db    0
.rdata$r:0000644B                 db    0
.rdata$r:0000644C                 db 0FFh
.rdata$r:0000644D                 db 0FFh
.rdata$r:0000644E                 db 0FFh
.rdata$r:0000644F                 db 0FFh
.rdata$r:00006450                 db    0
.rdata$r:00006451                 db    0
.rdata$r:00006452                 db    0
.rdata$r:00006453                 db    0
.rdata$r:00006454                 db  40h ; @
.rdata$r:00006455                 db    0
.rdata$r:00006456                 db    0
.rdata$r:00006457                 db    0
.rdata$r:00006458                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006458 _rdata$r        ends
.rdata$r:00006458
.data:0000645C ; ===========================================================================
.data:0000645C
.data:0000645C ; Segment type: Pure data
.data:0000645C ; Segment permissions: Read/Write
.data:0000645C _data           segment dword public 'DATA' use32
.data:0000645C                 assume cs:_data
.data:0000645C                 ;org 645Ch
.data:0000645C ; COMDAT (pick any)
.data:0000645C                 public ??_R0?AUISequentialInStream@@@8
.data:0000645C ; struct ISequentialInStream `RTTI Type Descriptor'
.data:0000645C ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:0000645C                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:0000645C                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000645C                                         ; const type_info::`vftable'
.data:00006460                 db    0
.data:00006461                 db    0
.data:00006462                 db    0
.data:00006463                 db    0
.data:00006464                 db  2Eh ; .
.data:00006465                 db  3Fh ; ?
.data:00006466                 db  41h ; A
.data:00006467                 db  55h ; U
.data:00006468                 db  49h ; I
.data:00006469                 db  53h ; S
.data:0000646A                 db  65h ; e
.data:0000646B                 db  71h ; q
.data:0000646C                 db  75h ; u
.data:0000646D                 db  65h ; e
.data:0000646E                 db  6Eh ; n
.data:0000646F                 db  74h ; t
.data:00006470                 db  69h ; i
.data:00006471                 db  61h ; a
.data:00006472                 db  6Ch ; l
.data:00006473                 db  49h ; I
.data:00006474                 db  6Eh ; n
.data:00006475                 db  53h ; S
.data:00006476                 db  74h ; t
.data:00006477                 db  72h ; r
.data:00006478                 db  65h ; e
.data:00006479                 db  61h ; a
.data:0000647A                 db  6Dh ; m
.data:0000647B                 db  40h ; @
.data:0000647C                 db  40h ; @
.data:0000647D                 db    0
.data:0000647E                 align 10h
.data:0000647E _data           ends
.data:0000647E
.rdata$r:00006480 ; ===========================================================================
.rdata$r:00006480
.rdata$r:00006480 ; Segment type: Pure data
.rdata$r:00006480 ; Segment permissions: Read
.rdata$r:00006480 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006480                 assume cs:_rdata$r
.rdata$r:00006480                 ;org 6480h
.rdata$r:00006480 ; COMDAT (pick any)
.rdata$r:00006480                 public ??_R3ISequentialInStream@@8
.rdata$r:00006480 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006480 ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00006458o
.rdata$r:00006480                                         ; .rdata$r:000064B4o ...
.rdata$r:00006481                 db    0
.rdata$r:00006482                 db    0
.rdata$r:00006483                 db    0
.rdata$r:00006484                 db    0
.rdata$r:00006485                 db    0
.rdata$r:00006486                 db    0
.rdata$r:00006487                 db    0
.rdata$r:00006488                 db    2
.rdata$r:00006489                 db    0
.rdata$r:0000648A                 db    0
.rdata$r:0000648B                 db    0
.rdata$r:0000648C                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:0000648C _rdata$r        ends
.rdata$r:0000648C
.rdata$r:00006490 ; ===========================================================================
.rdata$r:00006490
.rdata$r:00006490 ; Segment type: Pure data
.rdata$r:00006490 ; Segment permissions: Read
.rdata$r:00006490 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006490                 assume cs:_rdata$r
.rdata$r:00006490                 ;org 6490h
.rdata$r:00006490 ; COMDAT (pick any)
.rdata$r:00006490                 public ??_R2ISequentialInStream@@8
.rdata$r:00006490 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00006490 ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00006490                                         ; DATA XREF: .rdata$r:0000648Co
.rdata$r:00006490                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006494                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006498                 db    0
.rdata$r:00006499                 align 4
.rdata$r:00006499 _rdata$r        ends
.rdata$r:00006499
.rdata$r:0000649C ; ===========================================================================
.rdata$r:0000649C
.rdata$r:0000649C ; Segment type: Pure data
.rdata$r:0000649C ; Segment permissions: Read
.rdata$r:0000649C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000649C                 assume cs:_rdata$r
.rdata$r:0000649C                 ;org 649Ch
.rdata$r:0000649C ; COMDAT (pick any)
.rdata$r:0000649C                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:0000649C ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000649C ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:0000649C                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:0000649C                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:000064A0                 db    1
.rdata$r:000064A1                 db    0
.rdata$r:000064A2                 db    0
.rdata$r:000064A3                 db    0
.rdata$r:000064A4                 db    0
.rdata$r:000064A5                 db    0
.rdata$r:000064A6                 db    0
.rdata$r:000064A7                 db    0
.rdata$r:000064A8                 db 0FFh
.rdata$r:000064A9                 db 0FFh
.rdata$r:000064AA                 db 0FFh
.rdata$r:000064AB                 db 0FFh
.rdata$r:000064AC                 db    0
.rdata$r:000064AD                 db    0
.rdata$r:000064AE                 db    0
.rdata$r:000064AF                 db    0
.rdata$r:000064B0                 db  40h ; @
.rdata$r:000064B1                 db    0
.rdata$r:000064B2                 db    0
.rdata$r:000064B3                 db    0
.rdata$r:000064B4                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000064B4 _rdata$r        ends
.rdata$r:000064B4
.rdata$r:000064B8 ; ===========================================================================
.rdata$r:000064B8
.rdata$r:000064B8 ; Segment type: Pure data
.rdata$r:000064B8 ; Segment permissions: Read
.rdata$r:000064B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000064B8                 assume cs:_rdata$r
.rdata$r:000064B8                 ;org 64B8h
.rdata$r:000064B8 ; COMDAT (pick any)
.rdata$r:000064B8                 public ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:000064B8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:000064B8 ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:000064B8                                         ; DATA XREF: .rdata$r:0000639Co
.rdata$r:000064B8                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:000064BC                 db    1
.rdata$r:000064BD                 db    0
.rdata$r:000064BE                 db    0
.rdata$r:000064BF                 db    0
.rdata$r:000064C0                 db  0Ch
.rdata$r:000064C1                 db    0
.rdata$r:000064C2                 db    0
.rdata$r:000064C3                 db    0
.rdata$r:000064C4                 db 0FFh
.rdata$r:000064C5                 db 0FFh
.rdata$r:000064C6                 db 0FFh
.rdata$r:000064C7                 db 0FFh
.rdata$r:000064C8                 db    0
.rdata$r:000064C9                 db    0
.rdata$r:000064CA                 db    0
.rdata$r:000064CB                 db    0
.rdata$r:000064CC                 db  40h ; @
.rdata$r:000064CD                 db    0
.rdata$r:000064CE                 db    0
.rdata$r:000064CF                 db    0
.rdata$r:000064D0                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000064D0 _rdata$r        ends
.rdata$r:000064D0
.data:000064D4 ; ===========================================================================
.data:000064D4
.data:000064D4 ; Segment type: Pure data
.data:000064D4 ; Segment permissions: Read/Write
.data:000064D4 _data           segment dword public 'DATA' use32
.data:000064D4                 assume cs:_data
.data:000064D4                 ;org 64D4h
.data:000064D4 ; COMDAT (pick any)
.data:000064D4                 public ??_R0?AUICompressGetInStreamProcessedSize@@@8
.data:000064D4 ; struct ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.data:000064D4 ??_R0?AUICompressGetInStreamProcessedSize@@@8 dd offset ??_7type_info@@6B@
.data:000064D4                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:000064D4                                         ; .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000064D4                                         ; const type_info::`vftable'
.data:000064D8                 db    0
.data:000064D9                 db    0
.data:000064DA                 db    0
.data:000064DB                 db    0
.data:000064DC                 db  2Eh ; .
.data:000064DD                 db  3Fh ; ?
.data:000064DE                 db  41h ; A
.data:000064DF                 db  55h ; U
.data:000064E0                 db  49h ; I
.data:000064E1                 db  43h ; C
.data:000064E2                 db  6Fh ; o
.data:000064E3                 db  6Dh ; m
.data:000064E4                 db  70h ; p
.data:000064E5                 db  72h ; r
.data:000064E6                 db  65h ; e
.data:000064E7                 db  73h ; s
.data:000064E8                 db  73h ; s
.data:000064E9                 db  47h ; G
.data:000064EA                 db  65h ; e
.data:000064EB                 db  74h ; t
.data:000064EC                 db  49h ; I
.data:000064ED                 db  6Eh ; n
.data:000064EE                 db  53h ; S
.data:000064EF                 db  74h ; t
.data:000064F0                 db  72h ; r
.data:000064F1                 db  65h ; e
.data:000064F2                 db  61h ; a
.data:000064F3                 db  6Dh ; m
.data:000064F4                 db  50h ; P
.data:000064F5                 db  72h ; r
.data:000064F6                 db  6Fh ; o
.data:000064F7                 db  63h ; c
.data:000064F8                 db  65h ; e
.data:000064F9                 db  73h ; s
.data:000064FA                 db  73h ; s
.data:000064FB                 db  65h ; e
.data:000064FC                 db  64h ; d
.data:000064FD                 db  53h ; S
.data:000064FE                 db  69h ; i
.data:000064FF                 db  7Ah ; z
.data:00006500                 db  65h ; e
.data:00006501                 db  40h ; @
.data:00006502                 db  40h ; @
.data:00006503                 db    0
.data:00006503 _data           ends
.data:00006503
.rdata$r:00006504 ; ===========================================================================
.rdata$r:00006504
.rdata$r:00006504 ; Segment type: Pure data
.rdata$r:00006504 ; Segment permissions: Read
.rdata$r:00006504 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006504                 assume cs:_rdata$r
.rdata$r:00006504                 ;org 6504h
.rdata$r:00006504 ; COMDAT (pick any)
.rdata$r:00006504                 public ??_R3ICompressGetInStreamProcessedSize@@8
.rdata$r:00006504 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006504 ??_R3ICompressGetInStreamProcessedSize@@8 db    0
.rdata$r:00006504                                         ; DATA XREF: .rdata$r:000064D0o
.rdata$r:00006504                                         ; .rdata$r:00006538o ...
.rdata$r:00006505                 db    0
.rdata$r:00006506                 db    0
.rdata$r:00006507                 db    0
.rdata$r:00006508                 db    0
.rdata$r:00006509                 db    0
.rdata$r:0000650A                 db    0
.rdata$r:0000650B                 db    0
.rdata$r:0000650C                 db    2
.rdata$r:0000650D                 db    0
.rdata$r:0000650E                 db    0
.rdata$r:0000650F                 db    0
.rdata$r:00006510                 dd offset ??_R2ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:00006510 _rdata$r        ends
.rdata$r:00006510
.rdata$r:00006514 ; ===========================================================================
.rdata$r:00006514
.rdata$r:00006514 ; Segment type: Pure data
.rdata$r:00006514 ; Segment permissions: Read
.rdata$r:00006514 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006514                 assume cs:_rdata$r
.rdata$r:00006514                 ;org 6514h
.rdata$r:00006514 ; COMDAT (pick any)
.rdata$r:00006514                 public ??_R2ICompressGetInStreamProcessedSize@@8
.rdata$r:00006514 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:00006514 ??_R2ICompressGetInStreamProcessedSize@@8 dd offset ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00006514                                         ; DATA XREF: .rdata$r:00006510o
.rdata$r:00006514                                         ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006518                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000651C                 db    0
.rdata$r:0000651D                 align 10h
.rdata$r:0000651D _rdata$r        ends
.rdata$r:0000651D
.rdata$r:00006520 ; ===========================================================================
.rdata$r:00006520
.rdata$r:00006520 ; Segment type: Pure data
.rdata$r:00006520 ; Segment permissions: Read
.rdata$r:00006520 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006520                 assume cs:_rdata$r
.rdata$r:00006520                 ;org 6520h
.rdata$r:00006520 ; COMDAT (pick any)
.rdata$r:00006520                 public ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00006520 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006520 ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:00006520                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Array'o
.rdata$r:00006520                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:00006524                 db    1
.rdata$r:00006525                 db    0
.rdata$r:00006526                 db    0
.rdata$r:00006527                 db    0
.rdata$r:00006528                 db    0
.rdata$r:00006529                 db    0
.rdata$r:0000652A                 db    0
.rdata$r:0000652B                 db    0
.rdata$r:0000652C                 db 0FFh
.rdata$r:0000652D                 db 0FFh
.rdata$r:0000652E                 db 0FFh
.rdata$r:0000652F                 db 0FFh
.rdata$r:00006530                 db    0
.rdata$r:00006531                 db    0
.rdata$r:00006532                 db    0
.rdata$r:00006533                 db    0
.rdata$r:00006534                 db  40h ; @
.rdata$r:00006535                 db    0
.rdata$r:00006536                 db    0
.rdata$r:00006537                 db    0
.rdata$r:00006538                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006538 _rdata$r        ends
.rdata$r:00006538
.rdata$r:0000653C ; ===========================================================================
.rdata$r:0000653C
.rdata$r:0000653C ; Segment type: Pure data
.rdata$r:0000653C ; Segment permissions: Read
.rdata$r:0000653C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000653C                 assume cs:_rdata$r
.rdata$r:0000653C                 ;org 653Ch
.rdata$r:0000653C ; COMDAT (pick any)
.rdata$r:0000653C                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:0000653C ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:0000653C ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000653C                                         ; DATA XREF: .rdata$r:000063A0o
.rdata$r:0000653C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00006540                 db    0
.rdata$r:00006541                 db    0
.rdata$r:00006542                 db    0
.rdata$r:00006543                 db    0
.rdata$r:00006544                 db  0Ch
.rdata$r:00006545                 db    0
.rdata$r:00006546                 db    0
.rdata$r:00006547                 db    0
.rdata$r:00006548                 db 0FFh
.rdata$r:00006549                 db 0FFh
.rdata$r:0000654A                 db 0FFh
.rdata$r:0000654B                 db 0FFh
.rdata$r:0000654C                 db    0
.rdata$r:0000654D                 db    0
.rdata$r:0000654E                 db    0
.rdata$r:0000654F                 db    0
.rdata$r:00006550                 db  42h ; B
.rdata$r:00006551                 db    0
.rdata$r:00006552                 db    0
.rdata$r:00006553                 db    0
.rdata$r:00006554                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006554 _rdata$r        ends
.rdata$r:00006554
.rdata$r:00006558 ; ===========================================================================
.rdata$r:00006558
.rdata$r:00006558 ; Segment type: Pure data
.rdata$r:00006558 ; Segment permissions: Read
.rdata$r:00006558 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006558                 assume cs:_rdata$r
.rdata$r:00006558                 ;org 6558h
.rdata$r:00006558 ; COMDAT (pick any)
.rdata$r:00006558                 public ??_R1BA@?0A@EA@CMyUnknownImp@@8
.rdata$r:00006558 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:00006558 ??_R1BA@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00006558                                         ; DATA XREF: .rdata$r:000063A4o
.rdata$r:00006558                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:0000655C                 align 10h
.rdata$r:00006560                 db  10h
.rdata$r:00006561                 db    0
.rdata$r:00006562                 db    0
.rdata$r:00006563                 db    0
.rdata$r:00006564                 db 0FFh
.rdata$r:00006565                 db 0FFh
.rdata$r:00006566                 db 0FFh
.rdata$r:00006567                 db 0FFh
.rdata$r:00006568                 db    0
.rdata$r:00006569                 db    0
.rdata$r:0000656A                 db    0
.rdata$r:0000656B                 db    0
.rdata$r:0000656C                 db  40h ; @
.rdata$r:0000656D                 db    0
.rdata$r:0000656E                 db    0
.rdata$r:0000656F                 db    0
.rdata$r:00006570                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006570 _rdata$r        ends
.rdata$r:00006570
.rdata$r:00006574 ; ===========================================================================
.rdata$r:00006574
.rdata$r:00006574 ; Segment type: Pure data
.rdata$r:00006574 ; Segment permissions: Read
.rdata$r:00006574 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006574                 assume cs:_rdata$r
.rdata$r:00006574                 ;org 6574h
.rdata$r:00006574 ; COMDAT (pick any)
.rdata$r:00006574                 public ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@
.rdata$r:00006574 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:00006574 ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:00006574                                         ; DATA XREF: .rdata:0000630Co
.rdata$r:00006575                 db    0
.rdata$r:00006576                 db    0
.rdata$r:00006577                 db    0
.rdata$r:00006578                 db    4
.rdata$r:00006579                 db    0
.rdata$r:0000657A                 db    0
.rdata$r:0000657B                 db    0
.rdata$r:0000657C                 db    0
.rdata$r:0000657D                 db    0
.rdata$r:0000657E                 db    0
.rdata$r:0000657F                 db    0
.rdata$r:00006580                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00006584                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006584 _rdata$r        ends
.rdata$r:00006584
.rdata$r:00006588 ; ===========================================================================
.rdata$r:00006588
.rdata$r:00006588 ; Segment type: Pure data
.rdata$r:00006588 ; Segment permissions: Read
.rdata$r:00006588 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006588                 assume cs:_rdata$r
.rdata$r:00006588                 ;org 6588h
.rdata$r:00006588 ; COMDAT (pick any)
.rdata$r:00006588                 public ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@
.rdata$r:00006588 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:00006588 ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:00006588                                         ; DATA XREF: .rdata:000062F8o
.rdata$r:00006589                 db    0
.rdata$r:0000658A                 db    0
.rdata$r:0000658B                 db    0
.rdata$r:0000658C                 db    8
.rdata$r:0000658D                 db    0
.rdata$r:0000658E                 db    0
.rdata$r:0000658F                 db    0
.rdata$r:00006590                 db    0
.rdata$r:00006591                 db    0
.rdata$r:00006592                 db    0
.rdata$r:00006593                 db    0
.rdata$r:00006594                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00006598                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006598 _rdata$r        ends
.rdata$r:00006598
.rdata$r:0000659C ; ===========================================================================
.rdata$r:0000659C
.rdata$r:0000659C ; Segment type: Pure data
.rdata$r:0000659C ; Segment permissions: Read
.rdata$r:0000659C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000659C                 assume cs:_rdata$r
.rdata$r:0000659C                 ;org 659Ch
.rdata$r:0000659C ; COMDAT (pick any)
.rdata$r:0000659C                 public ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata$r:0000659C ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata$r:0000659C ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ db    0
.rdata$r:0000659C                                         ; DATA XREF: .rdata:000062E4o
.rdata$r:0000659D                 db    0
.rdata$r:0000659E                 db    0
.rdata$r:0000659F                 db    0
.rdata$r:000065A0                 db  0Ch
.rdata$r:000065A1                 db    0
.rdata$r:000065A2                 db    0
.rdata$r:000065A3                 db    0
.rdata$r:000065A4                 db    0
.rdata$r:000065A5                 db    0
.rdata$r:000065A6                 db    0
.rdata$r:000065A7                 db    0
.rdata$r:000065A8                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:000065AC                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000065AC _rdata$r        ends
.rdata$r:000065AC
.text:000065B0 ; ===========================================================================
.text:000065B0
.text:000065B0 ; Segment type: Pure code
.text:000065B0 ; Segment permissions: Read/Execute
.text:000065B0 _text           segment para public 'CODE' use32
.text:000065B0                 assume cs:_text
.text:000065B0                 ;org 65B0h
.text:000065B0 ; COMDAT (pick any)
.text:000065B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000065B0
.text:000065B0 ; =============== S U B R O U T I N E =======================================
.text:000065B0
.text:000065B0 ; Attributes: bp-based frame
.text:000065B0
.text:000065B0 ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:000065B0                 public ??0ISequentialInStream@@QAE@XZ
.text:000065B0 ??0ISequentialInStream@@QAE@XZ proc near
.text:000065B0                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+27p
.text:000065B0
.text:000065B0 var_4           = dword ptr -4
.text:000065B0
.text:000065B0                 push    ebp
.text:000065B1                 mov     ebp, esp
.text:000065B3                 push    ecx
.text:000065B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000065BB                 mov     [ebp+var_4], ecx
.text:000065BE                 mov     ecx, [ebp+var_4]
.text:000065C1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000065C6                 mov     eax, [ebp+var_4]
.text:000065C9                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:000065CF                 mov     eax, [ebp+var_4]
.text:000065D2                 add     esp, 4
.text:000065D5                 cmp     ebp, esp
.text:000065D7                 call    __RTC_CheckEsp
.text:000065DC                 mov     esp, ebp
.text:000065DE                 pop     ebp
.text:000065DF                 retn
.text:000065DF ??0ISequentialInStream@@QAE@XZ endp
.text:000065DF
.text:000065DF _text           ends
.text:000065DF
.rdata:000065E0 ; ===========================================================================
.rdata:000065E0
.rdata:000065E0 ; Segment type: Pure data
.rdata:000065E0 ; Segment permissions: Read
.rdata:000065E0 _rdata          segment dword public 'DATA' use32
.rdata:000065E0                 assume cs:_rdata
.rdata:000065E0                 ;org 65E0h
.rdata:000065E0 ; COMDAT (pick largest)
.rdata:000065E0                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:000065E4                 public ??_7ISequentialInStream@@6B@
.rdata:000065E4 ; const ISequentialInStream::`vftable'
.rdata:000065E4 ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:000065E4                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:000065E8                 dd offset __purecall
.rdata:000065EC                 dd offset __purecall
.rdata:000065F0                 dd offset __purecall
.rdata:000065F0 _rdata          ends
.rdata:000065F0
.rdata$r:000065F4 ; ===========================================================================
.rdata$r:000065F4
.rdata$r:000065F4 ; Segment type: Pure data
.rdata$r:000065F4 ; Segment permissions: Read
.rdata$r:000065F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000065F4                 assume cs:_rdata$r
.rdata$r:000065F4                 ;org 65F4h
.rdata$r:000065F4 ; COMDAT (pick any)
.rdata$r:000065F4                 public ??_R4ISequentialInStream@@6B@
.rdata$r:000065F4 ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:000065F4 ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:000065E0o
.rdata$r:000065F5                 db    0
.rdata$r:000065F6                 db    0
.rdata$r:000065F7                 db    0
.rdata$r:000065F8                 db    0
.rdata$r:000065F9                 db    0
.rdata$r:000065FA                 db    0
.rdata$r:000065FB                 db    0
.rdata$r:000065FC                 db    0
.rdata$r:000065FD                 db    0
.rdata$r:000065FE                 db    0
.rdata$r:000065FF                 db    0
.rdata$r:00006600 off_6600        dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00006600                                         ; DATA XREF: .rdata:_k_StrongCryptoPairso
.rdata$r:00006600                                         ; .rdata:00000278o ...
.rdata$r:00006600                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00006604                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006604 _rdata$r        ends
.rdata$r:00006604
.text:00006608 ; ===========================================================================
.text:00006608
.text:00006608 ; Segment type: Pure code
.text:00006608 ; Segment permissions: Read/Execute
.text:00006608 _text           segment para public 'CODE' use32
.text:00006608                 assume cs:_text
.text:00006608                 ;org 6608h
.text:00006608 ; COMDAT (pick any)
.text:00006608                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006608
.text:00006608 ; =============== S U B R O U T I N E =======================================
.text:00006608
.text:00006608 ; Attributes: bp-based frame
.text:00006608
.text:00006608 ; __int32 __stdcall NCompress::CCopyCoder::QueryInterface(NCompress::CCopyCoder *this, const struct _GUID *Buf1, void **)
.text:00006608                 public ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00006608 ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00006608                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00006608                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:00006608
.text:00006608 var_C           = dword ptr -0Ch
.text:00006608 var_8           = dword ptr -8
.text:00006608 var_4           = dword ptr -4
.text:00006608 this            = dword ptr  8
.text:00006608 Buf1            = dword ptr  0Ch
.text:00006608 arg_8           = dword ptr  10h
.text:00006608
.text:00006608                 push    ebp
.text:00006609
.text:00006609 loc_6609:                               ; DATA XREF: .rdata:00000288o
.text:00006609                 mov     ebp, esp
.text:0000660B                 sub     esp, 0Ch
.text:0000660E
.text:0000660E loc_660E:                               ; DATA XREF: .rdata:00000290o
.text:0000660E                                         ; .rdata:00000298o ...
.text:0000660E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00006615                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000661C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006623                 mov     eax, [ebp+arg_8]
.text:00006626                 mov     dword ptr [eax], 0
.text:0000662C                 push    offset _IID_IUnknown ; Buf2
.text:00006631                 mov     ecx, [ebp+Buf1]
.text:00006634                 push    ecx             ; Buf1
.text:00006635                 call    ___@8           ; __(x,x)
.text:0000663A                 test    eax, eax
.text:0000663C                 jz      short loc_664B
.text:0000663E                 mov     edx, [ebp+arg_8]
.text:00006641                 mov     eax, [ebp+this]
.text:00006644                 mov     [edx], eax
.text:00006646                 jmp     loc_670D
.text:0000664B ; ---------------------------------------------------------------------------
.text:0000664B
.text:0000664B loc_664B:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+34j
.text:0000664B                 push    offset _IID_ICompressCoder ; Buf2
.text:00006650                 mov     ecx, [ebp+Buf1]
.text:00006653                 push    ecx             ; Buf1
.text:00006654                 call    ___@8           ; __(x,x)
.text:00006659                 test    eax, eax
.text:0000665B                 jz      short loc_666A
.text:0000665D                 mov     edx, [ebp+arg_8]
.text:00006660                 mov     eax, [ebp+this]
.text:00006663                 mov     [edx], eax
.text:00006665                 jmp     loc_670D
.text:0000666A ; ---------------------------------------------------------------------------
.text:0000666A
.text:0000666A loc_666A:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+53j
.text:0000666A                 push    offset _IID_ICompressSetInStream ; Buf2
.text:0000666F                 mov     ecx, [ebp+Buf1]
.text:00006672                 push    ecx             ; Buf1
.text:00006673                 call    ___@8           ; __(x,x)
.text:00006678                 test    eax, eax
.text:0000667A                 jz      short loc_669E
.text:0000667C                 cmp     [ebp+this], 0
.text:00006680                 jz      short loc_668D
.text:00006682                 mov     edx, [ebp+this]
.text:00006685                 add     edx, 4
.text:00006688                 mov     [ebp+var_4], edx
.text:0000668B                 jmp     short loc_6694
.text:0000668D ; ---------------------------------------------------------------------------
.text:0000668D
.text:0000668D loc_668D:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+78j
.text:0000668D                 mov     [ebp+var_4], 0
.text:00006694
.text:00006694 loc_6694:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+83j
.text:00006694                 mov     eax, [ebp+arg_8]
.text:00006697                 mov     ecx, [ebp+var_4]
.text:0000669A                 mov     [eax], ecx
.text:0000669C                 jmp     short loc_670D
.text:0000669E ; ---------------------------------------------------------------------------
.text:0000669E
.text:0000669E loc_669E:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+72j
.text:0000669E                 push    offset _IID_ISequentialInStream ; Buf2
.text:000066A3                 mov     edx, [ebp+Buf1]
.text:000066A6                 push    edx             ; Buf1
.text:000066A7                 call    ___@8           ; __(x,x)
.text:000066AC                 test    eax, eax
.text:000066AE                 jz      short loc_66D2
.text:000066B0                 cmp     [ebp+this], 0
.text:000066B4                 jz      short loc_66C1
.text:000066B6                 mov     eax, [ebp+this]
.text:000066B9                 add     eax, 8
.text:000066BC                 mov     [ebp+var_8], eax
.text:000066BF                 jmp     short loc_66C8
.text:000066C1 ; ---------------------------------------------------------------------------
.text:000066C1
.text:000066C1 loc_66C1:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+ACj
.text:000066C1                 mov     [ebp+var_8], 0
.text:000066C8
.text:000066C8 loc_66C8:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+B7j
.text:000066C8                 mov     ecx, [ebp+arg_8]
.text:000066CB                 mov     edx, [ebp+var_8]
.text:000066CE                 mov     [ecx], edx
.text:000066D0                 jmp     short loc_670D
.text:000066D2 ; ---------------------------------------------------------------------------
.text:000066D2
.text:000066D2 loc_66D2:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+A6j
.text:000066D2                 push    offset _IID_ICompressGetInStreamProcessedSize ; Buf2
.text:000066D7                 mov     eax, [ebp+Buf1]
.text:000066DA                 push    eax             ; Buf1
.text:000066DB                 call    ___@8           ; __(x,x)
.text:000066E0                 test    eax, eax
.text:000066E2                 jz      short loc_6706
.text:000066E4                 cmp     [ebp+this], 0
.text:000066E8                 jz      short loc_66F5
.text:000066EA                 mov     ecx, [ebp+this]
.text:000066ED                 add     ecx, 0Ch
.text:000066F0                 mov     [ebp+var_C], ecx
.text:000066F3                 jmp     short loc_66FC
.text:000066F5 ; ---------------------------------------------------------------------------
.text:000066F5
.text:000066F5 loc_66F5:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+E0j
.text:000066F5                 mov     [ebp+var_C], 0
.text:000066FC
.text:000066FC loc_66FC:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+EBj
.text:000066FC                 mov     edx, [ebp+arg_8]
.text:000066FF                 mov     eax, [ebp+var_C]
.text:00006702
.text:00006702 loc_6702:                               ; DATA XREF: .rdata:000002A8o
.text:00006702                 mov     [edx], eax
.text:00006704                 jmp     short loc_670D
.text:00006706 ; ---------------------------------------------------------------------------
.text:00006706
.text:00006706 loc_6706:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+DAj
.text:00006706                 mov     eax, 80004002h
.text:0000670B                 jmp     short loc_671E
.text:0000670D ; ---------------------------------------------------------------------------
.text:0000670D
.text:0000670D loc_670D:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+3Ej
.text:0000670D                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+5Dj ...
.text:0000670D                 mov     ecx, [ebp+this]
.text:00006710                 mov     edx, [ecx+10h]
.text:00006713                 add     edx, 1
.text:00006716                 mov     eax, [ebp+this]
.text:00006719                 mov     [eax+10h], edx
.text:0000671C                 xor     eax, eax
.text:0000671E
.text:0000671E loc_671E:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+103j
.text:0000671E                                         ; DATA XREF: .rdata:000002B0o
.text:0000671E                 add     esp, 0Ch
.text:00006721
.text:00006721 loc_6721:                               ; DATA XREF: .rdata:000002B8o
.text:00006721                 cmp     ebp, esp
.text:00006723                 call    __RTC_CheckEsp
.text:00006728                 mov     esp, ebp
.text:0000672A                 pop     ebp
.text:0000672B                 retn    0Ch
.text:0000672B ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000672B
.text:0000672B ; ---------------------------------------------------------------------------
.text:0000672E                 align 10h
.text:0000672E _text           ends
.text:0000672E
.text:00006730 ; ===========================================================================
.text:00006730
.text:00006730 ; Segment type: Pure code
.text:00006730 ; Segment permissions: Read/Execute
.text:00006730 _text           segment para public 'CODE' use32
.text:00006730                 assume cs:_text
.text:00006730                 ;org 6730h
.text:00006730 ; COMDAT (pick any)
.text:00006730                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006730
.text:00006730 ; =============== S U B R O U T I N E =======================================
.text:00006730
.text:00006730 ; Attributes: bp-based frame
.text:00006730
.text:00006730 ; unsigned __int32 __stdcall NCompress::CCopyCoder::AddRef(NCompress::CCopyCoder *this)
.text:00006730                 public ?AddRef@CCopyCoder@NCompress@@UAGKXZ
.text:00006730 ?AddRef@CCopyCoder@NCompress@@UAGKXZ proc near
.text:00006730                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}' (void)+5j
.text:00006730                                         ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}' (void)+5j ...
.text:00006730
.text:00006730 var_4           = dword ptr -4
.text:00006730 this            = dword ptr  8
.text:00006730
.text:00006730                 push    ebp
.text:00006731                 mov     ebp, esp
.text:00006733                 push    ecx
.text:00006734                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000673B                 mov     eax, [ebp+this]
.text:0000673E                 mov     ecx, [eax+10h]
.text:00006741                 add     ecx, 1
.text:00006744                 mov     [ebp+var_4], ecx
.text:00006747                 mov     edx, [ebp+this]
.text:0000674A                 mov     eax, [ebp+var_4]
.text:0000674D                 mov     [edx+10h], eax
.text:00006750                 mov     eax, [ebp+var_4]
.text:00006753                 mov     esp, ebp
.text:00006755                 pop     ebp
.text:00006756                 retn    4
.text:00006756 ?AddRef@CCopyCoder@NCompress@@UAGKXZ endp
.text:00006756
.text:00006756 ; ---------------------------------------------------------------------------
.text:00006759                 align 4
.text:00006759 _text           ends
.text:00006759
.text:0000675C ; ===========================================================================
.text:0000675C
.text:0000675C ; Segment type: Pure code
.text:0000675C ; Segment permissions: Read/Execute
.text:0000675C _text           segment para public 'CODE' use32
.text:0000675C                 assume cs:_text
.text:0000675C                 ;org 675Ch
.text:0000675C ; COMDAT (pick any)
.text:0000675C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000675C
.text:0000675C ; =============== S U B R O U T I N E =======================================
.text:0000675C
.text:0000675C ; Attributes: bp-based frame
.text:0000675C
.text:0000675C ; unsigned __int32 __stdcall NCompress::CCopyCoder::Release(NCompress::CCopyCoder *this)
.text:0000675C                 public ?Release@CCopyCoder@NCompress@@UAGKXZ
.text:0000675C ?Release@CCopyCoder@NCompress@@UAGKXZ proc near
.text:0000675C                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::Release`adjustor{4}' (void)+5j
.text:0000675C                                         ; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}' (void)+5j ...
.text:0000675C
.text:0000675C var_10          = dword ptr -10h
.text:0000675C var_C           = dword ptr -0Ch
.text:0000675C var_8           = dword ptr -8
.text:0000675C var_4           = dword ptr -4
.text:0000675C this            = dword ptr  8
.text:0000675C
.text:0000675C                 push    ebp
.text:0000675D                 mov     ebp, esp
.text:0000675F                 sub     esp, 10h
.text:00006762                 mov     eax, 0CCCCCCCCh
.text:00006767                 mov     [ebp+var_10], eax
.text:0000676A                 mov     [ebp+var_C], eax
.text:0000676D                 mov     [ebp+var_8], eax
.text:00006770                 mov     [ebp+var_4], eax
.text:00006773                 mov     eax, [ebp+this]
.text:00006776                 mov     ecx, [eax+10h]
.text:00006779                 sub     ecx, 1
.text:0000677C                 mov     [ebp+var_C], ecx
.text:0000677F                 mov     edx, [ebp+this]
.text:00006782                 mov     eax, [ebp+var_C]
.text:00006785                 mov     [edx+10h], eax
.text:00006788                 cmp     [ebp+var_C], 0
.text:0000678C                 jz      short loc_6796
.text:0000678E                 mov     ecx, [ebp+this]
.text:00006791                 mov     eax, [ecx+10h]
.text:00006794                 jmp     short loc_67C0
.text:00006796 ; ---------------------------------------------------------------------------
.text:00006796
.text:00006796 loc_6796:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+30j
.text:00006796                 mov     edx, [ebp+this]
.text:00006799                 mov     [ebp+var_8], edx
.text:0000679C                 mov     eax, [ebp+var_8]
.text:0000679F                 mov     [ebp+var_4], eax
.text:000067A2                 cmp     [ebp+var_4], 0
.text:000067A6                 jz      short loc_67B7
.text:000067A8                 push    1
.text:000067AA                 mov     ecx, [ebp+var_4]
.text:000067AD                 call    ??_GCCopyCoder@NCompress@@QAEPAXI@Z ; NCompress::CCopyCoder::`scalar deleting destructor'(uint)
.text:000067B2                 mov     [ebp+var_10], eax
.text:000067B5                 jmp     short loc_67BE
.text:000067B7 ; ---------------------------------------------------------------------------
.text:000067B7
.text:000067B7 loc_67B7:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+4Aj
.text:000067B7                 mov     [ebp+var_10], 0
.text:000067BE
.text:000067BE loc_67BE:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+59j
.text:000067BE                 xor     eax, eax
.text:000067C0
.text:000067C0 loc_67C0:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+38j
.text:000067C0                 add     esp, 10h
.text:000067C3                 cmp     ebp, esp
.text:000067C5                 call    __RTC_CheckEsp
.text:000067CA                 mov     esp, ebp
.text:000067CC                 pop     ebp
.text:000067CD                 retn    4
.text:000067CD ?Release@CCopyCoder@NCompress@@UAGKXZ endp
.text:000067CD
.text:000067CD _text           ends
.text:000067CD
.text:000067D0 ; ===========================================================================
.text:000067D0
.text:000067D0 ; Segment type: Pure code
.text:000067D0 ; Segment permissions: Read/Execute
.text:000067D0 _text           segment para public 'CODE' use32
.text:000067D0                 assume cs:_text
.text:000067D0                 ;org 67D0h
.text:000067D0 ; COMDAT (pick any)
.text:000067D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000067D0
.text:000067D0 ; =============== S U B R O U T I N E =======================================
.text:000067D0
.text:000067D0 ; Attributes: bp-based frame
.text:000067D0
.text:000067D0 ; _DWORD __thiscall ICompressSetInStream::ICompressSetInStream(ICompressSetInStream *__hidden this)
.text:000067D0                 public ??0ICompressSetInStream@@QAE@XZ
.text:000067D0 ??0ICompressSetInStream@@QAE@XZ proc near
.text:000067D0                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+1Cp
.text:000067D0
.text:000067D0 var_4           = dword ptr -4
.text:000067D0
.text:000067D0                 push    ebp
.text:000067D1                 mov     ebp, esp
.text:000067D3                 push    ecx
.text:000067D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000067DB                 mov     [ebp+var_4], ecx
.text:000067DE                 mov     ecx, [ebp+var_4]
.text:000067E1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000067E6                 mov     eax, [ebp+var_4]
.text:000067E9                 mov     dword ptr [eax], offset ??_7ICompressSetInStream@@6B@ ; const ICompressSetInStream::`vftable'
.text:000067EF                 mov     eax, [ebp+var_4]
.text:000067F2                 add     esp, 4
.text:000067F5                 cmp     ebp, esp
.text:000067F7                 call    __RTC_CheckEsp
.text:000067FC                 mov     esp, ebp
.text:000067FE                 pop     ebp
.text:000067FF                 retn
.text:000067FF ??0ICompressSetInStream@@QAE@XZ endp
.text:000067FF
.text:000067FF _text           ends
.text:000067FF
.rdata:00006800 ; ===========================================================================
.rdata:00006800
.rdata:00006800 ; Segment type: Pure data
.rdata:00006800 ; Segment permissions: Read
.rdata:00006800 _rdata          segment dword public 'DATA' use32
.rdata:00006800                 assume cs:_rdata
.rdata:00006800                 ;org 6800h
.rdata:00006800 ; COMDAT (pick largest)
.rdata:00006800 off_6800        dd offset ??_R4ICompressSetInStream@@6B@
.rdata:00006800                                         ; DATA XREF: .rdata:000002C0o
.rdata:00006800                                         ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata:00006804                 public ??_7ICompressSetInStream@@6B@
.rdata:00006804 ; const ICompressSetInStream::`vftable'
.rdata:00006804 ??_7ICompressSetInStream@@6B@ dd offset __purecall
.rdata:00006804                                         ; DATA XREF: ICompressSetInStream::ICompressSetInStream(void)+19o
.rdata:00006808                 dd offset __purecall
.rdata:0000680C                 dd offset __purecall
.rdata:00006810                 dd offset __purecall
.rdata:00006814                 dd offset __purecall
.rdata:00006814 _rdata          ends
.rdata:00006814
.rdata$r:00006818 ; ===========================================================================
.rdata$r:00006818
.rdata$r:00006818 ; Segment type: Pure data
.rdata$r:00006818 ; Segment permissions: Read
.rdata$r:00006818 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006818                 assume cs:_rdata$r
.rdata$r:00006818                 ;org 6818h
.rdata$r:00006818 ; COMDAT (pick any)
.rdata$r:00006818                 public ??_R4ICompressSetInStream@@6B@
.rdata$r:00006818 ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata$r:00006818 ??_R4ICompressSetInStream@@6B@ db    0  ; DATA XREF: .rdata:off_6800o
.rdata$r:00006819                 db    0
.rdata$r:0000681A                 db    0
.rdata$r:0000681B                 db    0
.rdata$r:0000681C                 db    0
.rdata$r:0000681D                 db    0
.rdata$r:0000681E                 db    0
.rdata$r:0000681F                 db    0
.rdata$r:00006820                 db    0
.rdata$r:00006821                 db    0
.rdata$r:00006822                 db    0
.rdata$r:00006823                 db    0
.rdata$r:00006824                 dd offset ??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00006828                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006828 _rdata$r        ends
.rdata$r:00006828
.text:0000682C ; ===========================================================================
.text:0000682C
.text:0000682C ; Segment type: Pure code
.text:0000682C ; Segment permissions: Read/Execute
.text:0000682C _text           segment para public 'CODE' use32
.text:0000682C                 assume cs:_text
.text:0000682C                 ;org 682Ch
.text:0000682C ; COMDAT (pick any)
.text:0000682C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000682C
.text:0000682C ; =============== S U B R O U T I N E =======================================
.text:0000682C
.text:0000682C ; Attributes: bp-based frame
.text:0000682C
.text:0000682C ; _DWORD __thiscall ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(ICompressGetInStreamProcessedSize *__hidden this)
.text:0000682C                 public ??0ICompressGetInStreamProcessedSize@@QAE@XZ
.text:0000682C ??0ICompressGetInStreamProcessedSize@@QAE@XZ proc near
.text:0000682C                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+32p
.text:0000682C
.text:0000682C var_4           = dword ptr -4
.text:0000682C
.text:0000682C                 push    ebp
.text:0000682D                 mov     ebp, esp
.text:0000682F                 push    ecx
.text:00006830                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006837                 mov     [ebp+var_4], ecx
.text:0000683A                 mov     ecx, [ebp+var_4]
.text:0000683D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00006842                 mov     eax, [ebp+var_4]
.text:00006845                 mov     dword ptr [eax], offset ??_7ICompressGetInStreamProcessedSize@@6B@ ; const ICompressGetInStreamProcessedSize::`vftable'
.text:0000684B                 mov     eax, [ebp+var_4]
.text:0000684E                 add     esp, 4
.text:00006851                 cmp     ebp, esp
.text:00006853                 call    __RTC_CheckEsp
.text:00006858                 mov     esp, ebp
.text:0000685A                 pop     ebp
.text:0000685B                 retn
.text:0000685B ??0ICompressGetInStreamProcessedSize@@QAE@XZ endp
.text:0000685B
.text:0000685B _text           ends
.text:0000685B
.rdata:0000685C ; ===========================================================================
.rdata:0000685C
.rdata:0000685C ; Segment type: Pure data
.rdata:0000685C ; Segment permissions: Read
.rdata:0000685C _rdata          segment dword public 'DATA' use32
.rdata:0000685C                 assume cs:_rdata
.rdata:0000685C                 ;org 685Ch
.rdata:0000685C ; COMDAT (pick largest)
.rdata:0000685C                 dd offset ??_R4ICompressGetInStreamProcessedSize@@6B@ ; const ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
.rdata:00006860                 public ??_7ICompressGetInStreamProcessedSize@@6B@
.rdata:00006860 ; const ICompressGetInStreamProcessedSize::`vftable'
.rdata:00006860 ??_7ICompressGetInStreamProcessedSize@@6B@ dd offset __purecall
.rdata:00006860                                         ; DATA XREF: ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)+19o
.rdata:00006864                 dd offset __purecall
.rdata:00006868                 dd offset __purecall
.rdata:0000686C                 dd offset __purecall
.rdata:0000686C _rdata          ends
.rdata:0000686C
.rdata$r:00006870 ; ===========================================================================
.rdata$r:00006870
.rdata$r:00006870 ; Segment type: Pure data
.rdata$r:00006870 ; Segment permissions: Read
.rdata$r:00006870 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006870                 assume cs:_rdata$r
.rdata$r:00006870                 ;org 6870h
.rdata$r:00006870 ; COMDAT (pick any)
.rdata$r:00006870                 public ??_R4ICompressGetInStreamProcessedSize@@6B@
.rdata$r:00006870 ; const ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
.rdata$r:00006870 ??_R4ICompressGetInStreamProcessedSize@@6B@ db    0
.rdata$r:00006870                                         ; DATA XREF: .rdata:0000685Co
.rdata$r:00006871                 db    0
.rdata$r:00006872                 db    0
.rdata$r:00006873                 db    0
.rdata$r:00006874                 db    0
.rdata$r:00006875                 db    0
.rdata$r:00006876                 db    0
.rdata$r:00006877                 db    0
.rdata$r:00006878                 db    0
.rdata$r:00006879                 db    0
.rdata$r:0000687A                 db    0
.rdata$r:0000687B                 db    0
.rdata$r:0000687C                 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:00006880                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006880 _rdata$r        ends
.rdata$r:00006880
.text:00006884 ; ===========================================================================
.text:00006884
.text:00006884 ; Segment type: Pure code
.text:00006884 ; Segment permissions: Read/Execute
.text:00006884 _text           segment para public 'CODE' use32
.text:00006884                 assume cs:_text
.text:00006884                 ;org 6884h
.text:00006884 ; COMDAT (pick any)
.text:00006884                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006884
.text:00006884 ; =============== S U B R O U T I N E =======================================
.text:00006884
.text:00006884 ; Attributes: bp-based frame
.text:00006884
.text:00006884 ; public: void * __thiscall NCompress::CCopyCoder::`scalar deleting destructor'(unsigned int)
.text:00006884                 public ??_GCCopyCoder@NCompress@@QAEPAXI@Z
.text:00006884 ??_GCCopyCoder@NCompress@@QAEPAXI@Z proc near
.text:00006884                                         ; CODE XREF: NCompress::CCopyCoder::Release(void)+51p
.text:00006884
.text:00006884 var_4           = dword ptr -4
.text:00006884 arg_0           = dword ptr  8
.text:00006884
.text:00006884                 push    ebp
.text:00006885                 mov     ebp, esp
.text:00006887                 push    ecx
.text:00006888                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000688F                 mov     [ebp+var_4], ecx
.text:00006892                 mov     ecx, [ebp+var_4] ; this
.text:00006895                 call    ??1CCopyCoder@NCompress@@QAE@XZ ; NCompress::CCopyCoder::~CCopyCoder(void)
.text:0000689A                 mov     eax, [ebp+arg_0]
.text:0000689D                 and     eax, 1
.text:000068A0                 jz      short loc_68AE
.text:000068A2                 mov     ecx, [ebp+var_4]
.text:000068A5                 push    ecx             ; void *
.text:000068A6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000068AB                 add     esp, 4
.text:000068AE
.text:000068AE loc_68AE:                               ; CODE XREF: NCompress::CCopyCoder::`scalar deleting destructor'(uint)+1Cj
.text:000068AE                 mov     eax, [ebp+var_4]
.text:000068B1                 add     esp, 4
.text:000068B4                 cmp     ebp, esp
.text:000068B6                 call    __RTC_CheckEsp
.text:000068BB                 mov     esp, ebp
.text:000068BD                 pop     ebp
.text:000068BE                 retn    4
.text:000068BE ??_GCCopyCoder@NCompress@@QAEPAXI@Z endp
.text:000068BE
.text:000068BE ; ---------------------------------------------------------------------------
.text:000068C1                 align 4
.text:000068C1 _text           ends
.text:000068C1
.text:000068C4 ; ===========================================================================
.text:000068C4
.text:000068C4 ; Segment type: Pure code
.text:000068C4 ; Segment permissions: Read/Execute
.text:000068C4 _text           segment para public 'CODE' use32
.text:000068C4                 assume cs:_text
.text:000068C4                 ;org 68C4h
.text:000068C4 ; COMDAT (pick any)
.text:000068C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000068C4
.text:000068C4 ; =============== S U B R O U T I N E =======================================
.text:000068C4
.text:000068C4 ; Attributes: bp-based frame
.text:000068C4
.text:000068C4 ; bool __thiscall NCrypto::NWzAes::CBaseCoder::SetKeyMode(NCrypto::NWzAes::CBaseCoder *this, unsigned int)
.text:000068C4                 public ?SetKeyMode@CBaseCoder@NWzAes@NCrypto@@QAE_NI@Z
.text:000068C4 ?SetKeyMode@CBaseCoder@NWzAes@NCrypto@@QAE_NI@Z proc near
.text:000068C4                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+392p
.text:000068C4
.text:000068C4 var_4           = dword ptr -4
.text:000068C4 arg_0           = dword ptr  8
.text:000068C4
.text:000068C4                 push    ebp
.text:000068C5                 mov     ebp, esp
.text:000068C7                 push    ecx
.text:000068C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000068CF                 mov     [ebp+var_4], ecx
.text:000068D2                 cmp     [ebp+arg_0], 1
.text:000068D6                 jb      short loc_68DE
.text:000068D8                 cmp     [ebp+arg_0], 3
.text:000068DC                 jbe     short loc_68E2
.text:000068DE
.text:000068DE loc_68DE:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::SetKeyMode(uint)+12j
.text:000068DE                 xor     al, al
.text:000068E0                 jmp     short loc_68ED
.text:000068E2 ; ---------------------------------------------------------------------------
.text:000068E2
.text:000068E2 loc_68E2:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::SetKeyMode(uint)+18j
.text:000068E2                 mov     eax, [ebp+var_4]
.text:000068E5                 mov     ecx, [ebp+arg_0]
.text:000068E8                 mov     [eax+0Ch], ecx
.text:000068EB                 mov     al, 1
.text:000068ED
.text:000068ED loc_68ED:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::SetKeyMode(uint)+1Cj
.text:000068ED                 mov     esp, ebp
.text:000068EF                 pop     ebp
.text:000068F0                 retn    4
.text:000068F0 ?SetKeyMode@CBaseCoder@NWzAes@NCrypto@@QAE_NI@Z endp
.text:000068F0
.text:000068F0 ; ---------------------------------------------------------------------------
.text:000068F3                 align 4
.text:000068F3 _text           ends
.text:000068F3
.text:000068F4 ; ===========================================================================
.text:000068F4
.text:000068F4 ; Segment type: Pure code
.text:000068F4 ; Segment permissions: Read/Execute
.text:000068F4 _text           segment para public 'CODE' use32
.text:000068F4                 assume cs:_text
.text:000068F4                 ;org 68F4h
.text:000068F4 ; COMDAT (pick any)
.text:000068F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000068F4
.text:000068F4 ; =============== S U B R O U T I N E =======================================
.text:000068F4
.text:000068F4 ; Attributes: bp-based frame
.text:000068F4
.text:000068F4 ; void __thiscall COutStreamWithCRC::SetStream(COutStreamWithCRC *this, struct ISequentialOutStream *)
.text:000068F4                 public ?SetStream@COutStreamWithCRC@@QAEXPAUISequentialOutStream@@@Z
.text:000068F4 ?SetStream@COutStreamWithCRC@@QAEXPAUISequentialOutStream@@@Z proc near
.text:000068F4                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+185p
.text:000068F4
.text:000068F4 var_4           = dword ptr -4
.text:000068F4 arg_0           = dword ptr  8
.text:000068F4
.text:000068F4                 push    ebp
.text:000068F5                 mov     ebp, esp
.text:000068F7                 push    ecx
.text:000068F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000068FF                 mov     [ebp+var_4], ecx
.text:00006902                 mov     eax, [ebp+arg_0]
.text:00006905                 push    eax
.text:00006906                 mov     ecx, [ebp+var_4]
.text:00006909                 add     ecx, 8
.text:0000690C                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:00006911                 add     esp, 4
.text:00006914                 cmp     ebp, esp
.text:00006916                 call    __RTC_CheckEsp
.text:0000691B                 mov     esp, ebp
.text:0000691D                 pop     ebp
.text:0000691E                 retn    4
.text:0000691E ?SetStream@COutStreamWithCRC@@QAEXPAUISequentialOutStream@@@Z endp
.text:0000691E
.text:0000691E ; ---------------------------------------------------------------------------
.text:00006921                 align 4
.text:00006921 _text           ends
.text:00006921
.text:00006924 ; ===========================================================================
.text:00006924
.text:00006924 ; Segment type: Pure code
.text:00006924 ; Segment permissions: Read/Execute
.text:00006924 _text           segment para public 'CODE' use32
.text:00006924                 assume cs:_text
.text:00006924                 ;org 6924h
.text:00006924 ; COMDAT (pick any)
.text:00006924                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006924
.text:00006924 ; =============== S U B R O U T I N E =======================================
.text:00006924
.text:00006924 ; Attributes: bp-based frame
.text:00006924
.text:00006924 ; void __thiscall COutStreamWithCRC::Init(COutStreamWithCRC *this, bool)
.text:00006924                 public ?Init@COutStreamWithCRC@@QAEX_N@Z
.text:00006924 ?Init@COutStreamWithCRC@@QAEX_N@Z proc near
.text:00006924                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+192p
.text:00006924
.text:00006924 var_4           = dword ptr -4
.text:00006924 arg_0           = byte ptr  8
.text:00006924
.text:00006924                 push    ebp
.text:00006925                 mov     ebp, esp
.text:00006927                 push    ecx
.text:00006928                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000692F                 mov     [ebp+var_4], ecx
.text:00006932                 mov     eax, [ebp+var_4]
.text:00006935                 mov     dword ptr [eax+10h], 0
.text:0000693C                 mov     dword ptr [eax+14h], 0
.text:00006943                 mov     ecx, [ebp+var_4]
.text:00006946                 mov     dl, [ebp+arg_0]
.text:00006949                 mov     [ecx+1Ch], dl
.text:0000694C                 mov     eax, [ebp+var_4]
.text:0000694F                 mov     dword ptr [eax+18h], 0FFFFFFFFh
.text:00006956                 mov     esp, ebp
.text:00006958                 pop     ebp
.text:00006959                 retn    4
.text:00006959 ?Init@COutStreamWithCRC@@QAEX_N@Z endp
.text:00006959
.text:00006959 _text           ends
.text:00006959
.text:0000695C ; ===========================================================================
.text:0000695C
.text:0000695C ; Segment type: Pure code
.text:0000695C ; Segment permissions: Read/Execute
.text:0000695C _text           segment para public 'CODE' use32
.text:0000695C                 assume cs:_text
.text:0000695C                 ;org 695Ch
.text:0000695C ; COMDAT (pick any)
.text:0000695C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000695C
.text:0000695C ; =============== S U B R O U T I N E =======================================
.text:0000695C
.text:0000695C ; Attributes: bp-based frame
.text:0000695C
.text:0000695C ; unsigned int __thiscall COutStreamWithCRC::GetCRC(COutStreamWithCRC *__hidden this)
.text:0000695C                 public ?GetCRC@COutStreamWithCRC@@QBEIXZ
.text:0000695C ?GetCRC@COutStreamWithCRC@@QBEIXZ proc near
.text:0000695C                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1682p
.text:0000695C
.text:0000695C var_4           = dword ptr -4
.text:0000695C
.text:0000695C                 push    ebp
.text:0000695D                 mov     ebp, esp
.text:0000695F                 push    ecx
.text:00006960                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006967                 mov     [ebp+var_4], ecx
.text:0000696A                 mov     eax, [ebp+var_4]
.text:0000696D                 mov     eax, [eax+18h]
.text:00006970                 xor     eax, 0FFFFFFFFh
.text:00006973                 mov     esp, ebp
.text:00006975                 pop     ebp
.text:00006976                 retn
.text:00006976 ?GetCRC@COutStreamWithCRC@@QBEIXZ endp
.text:00006976
.text:00006976 ; ---------------------------------------------------------------------------
.text:00006977                 align 4
.text:00006977 _text           ends
.text:00006977
.text:00006978 ; ===========================================================================
.text:00006978
.text:00006978 ; Segment type: Pure code
.text:00006978 ; Segment permissions: Read/Execute
.text:00006978 _text           segment para public 'CODE' use32
.text:00006978                 assume cs:_text
.text:00006978                 ;org 6978h
.text:00006978 ; COMDAT (pick any)
.text:00006978                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006978
.text:00006978 ; =============== S U B R O U T I N E =======================================
.text:00006978
.text:00006978 ; Attributes: bp-based frame
.text:00006978
.text:00006978 ; bool __thiscall NArchive::NZip::CLocalItem::HasDescriptor(NArchive::NZip::CLocalItem *__hidden this)
.text:00006978                 public ?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ
.text:00006978 ?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ proc near
.text:00006978                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+12EAp
.text:00006978
.text:00006978 var_4           = dword ptr -4
.text:00006978
.text:00006978                 push    ebp
.text:00006979                 mov     ebp, esp
.text:0000697B                 push    ecx
.text:0000697C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006983                 mov     [ebp+var_4], ecx
.text:00006986                 mov     eax, [ebp+var_4]
.text:00006989                 movzx   eax, word ptr [eax]
.text:0000698C                 and     eax, 8
.text:0000698F                 neg     eax
.text:00006991                 sbb     eax, eax
.text:00006993                 neg     eax
.text:00006995                 mov     esp, ebp
.text:00006997                 pop     ebp
.text:00006998                 retn
.text:00006998 ?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ endp
.text:00006998
.text:00006998 ; ---------------------------------------------------------------------------
.text:00006999                 align 4
.text:00006999 _text           ends
.text:00006999
.text:0000699C ; ===========================================================================
.text:0000699C
.text:0000699C ; Segment type: Pure code
.text:0000699C ; Segment permissions: Read/Execute
.text:0000699C _text           segment para public 'CODE' use32
.text:0000699C                 assume cs:_text
.text:0000699C                 ;org 699Ch
.text:0000699C ; COMDAT (pick any)
.text:0000699C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000699C
.text:0000699C ; =============== S U B R O U T I N E =======================================
.text:0000699C
.text:0000699C ; Attributes: bp-based frame
.text:0000699C
.text:0000699C ; unsigned __int64 __thiscall NArchive::NZip::CItemEx::GetDataPosition(NArchive::NZip::CItemEx *__hidden this)
.text:0000699C                 public ?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ
.text:0000699C ?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ proc near
.text:0000699C                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+219p
.text:0000699C
.text:0000699C var_4           = dword ptr -4
.text:0000699C
.text:0000699C                 push    ebp
.text:0000699D                 mov     ebp, esp
.text:0000699F                 push    ecx
.text:000069A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000069A7                 mov     [ebp+var_4], ecx
.text:000069AA                 mov     eax, [ebp+var_4]
.text:000069AD                 mov     eax, [eax+60h]
.text:000069B0                 xor     edx, edx
.text:000069B2                 mov     ecx, [ebp+var_4]
.text:000069B5                 add     eax, [ecx+40h]
.text:000069B8                 adc     edx, [ecx+44h]
.text:000069BB                 mov     esp, ebp
.text:000069BD                 pop     ebp
.text:000069BE                 retn
.text:000069BE ?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ endp
.text:000069BE
.text:000069BE ; ---------------------------------------------------------------------------
.text:000069BF                 align 10h
.text:000069BF _text           ends
.text:000069BF
.text:000069C0 ; ===========================================================================
.text:000069C0
.text:000069C0 ; Segment type: Pure code
.text:000069C0 ; Segment permissions: Read/Execute
.text:000069C0 _text           segment para public 'CODE' use32
.text:000069C0                 assume cs:_text
.text:000069C0                 ;org 69C0h
.text:000069C0 ; COMDAT (pick any)
.text:000069C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000069C0
.text:000069C0 ; =============== S U B R O U T I N E =======================================
.text:000069C0
.text:000069C0 ; Attributes: bp-based frame
.text:000069C0
.text:000069C0 ; public: __thiscall COutStreamWithCRC::COutStreamWithCRC(void)
.text:000069C0                 public ??0COutStreamWithCRC@@QAE@XZ
.text:000069C0 ??0COutStreamWithCRC@@QAE@XZ proc near  ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+13Ep
.text:000069C0
.text:000069C0 var_4           = dword ptr -4
.text:000069C0
.text:000069C0                 push    ebp
.text:000069C1                 mov     ebp, esp
.text:000069C3                 push    ecx
.text:000069C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000069CB                 mov     [ebp+var_4], ecx
.text:000069CE                 mov     ecx, [ebp+var_4] ; this
.text:000069D1                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:000069D6                 mov     ecx, [ebp+var_4]
.text:000069D9                 add     ecx, 4          ; this
.text:000069DC                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000069E1                 mov     eax, [ebp+var_4]
.text:000069E4                 mov     dword ptr [eax], offset ??_7COutStreamWithCRC@@6B@ ; const COutStreamWithCRC::`vftable'
.text:000069EA                 mov     ecx, [ebp+var_4]
.text:000069ED                 add     ecx, 8
.text:000069F0                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:000069F5                 mov     eax, [ebp+var_4]
.text:000069F8                 add     esp, 4
.text:000069FB                 cmp     ebp, esp
.text:000069FD                 call    __RTC_CheckEsp
.text:00006A02                 mov     esp, ebp
.text:00006A04                 pop     ebp
.text:00006A05                 retn
.text:00006A05 ??0COutStreamWithCRC@@QAE@XZ endp
.text:00006A05
.text:00006A05 ; ---------------------------------------------------------------------------
.text:00006A06                 align 4
.text:00006A06 _text           ends
.text:00006A06
.rdata:00006A08 ; ===========================================================================
.rdata:00006A08
.rdata:00006A08 ; Segment type: Pure data
.rdata:00006A08 ; Segment permissions: Read
.rdata:00006A08 _rdata          segment dword public 'DATA' use32
.rdata:00006A08                 assume cs:_rdata
.rdata:00006A08                 ;org 6A08h
.rdata:00006A08 ; COMDAT (pick largest)
.rdata:00006A08                 dd offset ??_R4COutStreamWithCRC@@6B@ ; const COutStreamWithCRC::`RTTI Complete Object Locator'
.rdata:00006A0C                 public ??_7COutStreamWithCRC@@6B@
.rdata:00006A0C ; const COutStreamWithCRC::`vftable'
.rdata:00006A0C ??_7COutStreamWithCRC@@6B@ dd offset ?QueryInterface@COutStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z
.rdata:00006A0C                                         ; DATA XREF: COutStreamWithCRC::COutStreamWithCRC(void)+24o
.rdata:00006A0C                                         ; COutStreamWithCRC::QueryInterface(_GUID const &,void * *)
.rdata:00006A10                 dd offset ?AddRef@COutStreamWithCRC@@UAGKXZ ; COutStreamWithCRC::AddRef(void)
.rdata:00006A14                 dd offset ?Release@COutStreamWithCRC@@UAGKXZ ; COutStreamWithCRC::Release(void)
.rdata:00006A18                 dd offset ?Write@COutStreamWithCRC@@UAGJPBXIPAI@Z ; COutStreamWithCRC::Write(void const *,uint,uint *)
.rdata:00006A18 _rdata          ends
.rdata:00006A18
.rdata$r:00006A1C ; ===========================================================================
.rdata$r:00006A1C
.rdata$r:00006A1C ; Segment type: Pure data
.rdata$r:00006A1C ; Segment permissions: Read
.rdata$r:00006A1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006A1C                 assume cs:_rdata$r
.rdata$r:00006A1C                 ;org 6A1Ch
.rdata$r:00006A1C ; COMDAT (pick any)
.rdata$r:00006A1C                 public ??_R4COutStreamWithCRC@@6B@
.rdata$r:00006A1C ; const COutStreamWithCRC::`RTTI Complete Object Locator'
.rdata$r:00006A1C ??_R4COutStreamWithCRC@@6B@ db    0     ; DATA XREF: .rdata:00006A08o
.rdata$r:00006A1D                 db    0
.rdata$r:00006A1E                 db    0
.rdata$r:00006A1F                 db    0
.rdata$r:00006A20                 db    0
.rdata$r:00006A21                 db    0
.rdata$r:00006A22                 db    0
.rdata$r:00006A23                 db    0
.rdata$r:00006A24                 db    0
.rdata$r:00006A25                 db    0
.rdata$r:00006A26                 db    0
.rdata$r:00006A27                 db    0
.rdata$r:00006A28                 dd offset ??_R0?AVCOutStreamWithCRC@@@8 ; COutStreamWithCRC `RTTI Type Descriptor'
.rdata$r:00006A2C                 dd offset ??_R3COutStreamWithCRC@@8 ; COutStreamWithCRC::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006A2C _rdata$r        ends
.rdata$r:00006A2C
.data:00006A30 ; ===========================================================================
.data:00006A30
.data:00006A30 ; Segment type: Pure data
.data:00006A30 ; Segment permissions: Read/Write
.data:00006A30 _data           segment dword public 'DATA' use32
.data:00006A30                 assume cs:_data
.data:00006A30                 ;org 6A30h
.data:00006A30 ; COMDAT (pick any)
.data:00006A30                 public ??_R0?AVCOutStreamWithCRC@@@8
.data:00006A30 ; class COutStreamWithCRC `RTTI Type Descriptor'
.data:00006A30 ??_R0?AVCOutStreamWithCRC@@@8 dd offset ??_7type_info@@6B@
.data:00006A30                                         ; DATA XREF: .rdata$r:00006A28o
.data:00006A30                                         ; .rdata$r:COutStreamWithCRC::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00006A30                                         ; const type_info::`vftable'
.data:00006A34                 align 8
.data:00006A38 a_?avcoutstream db '.?AVCOutStreamWithCRC@@',0
.data:00006A38 _data           ends
.data:00006A38
.rdata$r:00006A50 ; ===========================================================================
.rdata$r:00006A50
.rdata$r:00006A50 ; Segment type: Pure data
.rdata$r:00006A50 ; Segment permissions: Read
.rdata$r:00006A50 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006A50                 assume cs:_rdata$r
.rdata$r:00006A50                 ;org 6A50h
.rdata$r:00006A50 ; COMDAT (pick any)
.rdata$r:00006A50                 public ??_R3COutStreamWithCRC@@8
.rdata$r:00006A50 ; COutStreamWithCRC::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006A50 ??_R3COutStreamWithCRC@@8 db    0       ; DATA XREF: .rdata$r:00006A2Co
.rdata$r:00006A50                                         ; .rdata$r:00006A8Co
.rdata$r:00006A51                 db    0
.rdata$r:00006A52                 db    0
.rdata$r:00006A53                 db    0
.rdata$r:00006A54                 db    1
.rdata$r:00006A55                 db    0
.rdata$r:00006A56                 db    0
.rdata$r:00006A57                 db    0
.rdata$r:00006A58                 db    4
.rdata$r:00006A59                 db    0
.rdata$r:00006A5A                 db    0
.rdata$r:00006A5B                 db    0
.rdata$r:00006A5C                 dd offset ??_R2COutStreamWithCRC@@8 ; COutStreamWithCRC::`RTTI Base Class Array'
.rdata$r:00006A5C _rdata$r        ends
.rdata$r:00006A5C
.rdata$r:00006A60 ; ===========================================================================
.rdata$r:00006A60
.rdata$r:00006A60 ; Segment type: Pure data
.rdata$r:00006A60 ; Segment permissions: Read
.rdata$r:00006A60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006A60                 assume cs:_rdata$r
.rdata$r:00006A60                 ;org 6A60h
.rdata$r:00006A60 ; COMDAT (pick any)
.rdata$r:00006A60                 public ??_R2COutStreamWithCRC@@8
.rdata$r:00006A60 ; COutStreamWithCRC::`RTTI Base Class Array'
.rdata$r:00006A60 ??_R2COutStreamWithCRC@@8 dd offset ??_R1A@?0A@EA@COutStreamWithCRC@@8
.rdata$r:00006A60                                         ; DATA XREF: .rdata$r:00006A5Co
.rdata$r:00006A60                                         ; COutStreamWithCRC::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006A64                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006A68                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006A6C                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00006A70                 db    0
.rdata$r:00006A71                 align 4
.rdata$r:00006A71 _rdata$r        ends
.rdata$r:00006A71
.rdata$r:00006A74 ; ===========================================================================
.rdata$r:00006A74
.rdata$r:00006A74 ; Segment type: Pure data
.rdata$r:00006A74 ; Segment permissions: Read
.rdata$r:00006A74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006A74                 assume cs:_rdata$r
.rdata$r:00006A74                 ;org 6A74h
.rdata$r:00006A74 ; COMDAT (pick any)
.rdata$r:00006A74                 public ??_R1A@?0A@EA@COutStreamWithCRC@@8
.rdata$r:00006A74 ; COutStreamWithCRC::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006A74 ??_R1A@?0A@EA@COutStreamWithCRC@@8 dd offset ??_R0?AVCOutStreamWithCRC@@@8
.rdata$r:00006A74                                         ; DATA XREF: .rdata$r:COutStreamWithCRC::`RTTI Base Class Array'o
.rdata$r:00006A74                                         ; COutStreamWithCRC `RTTI Type Descriptor'
.rdata$r:00006A78                 db    3
.rdata$r:00006A79                 db    0
.rdata$r:00006A7A                 db    0
.rdata$r:00006A7B                 db    0
.rdata$r:00006A7C                 db    0
.rdata$r:00006A7D                 db    0
.rdata$r:00006A7E                 db    0
.rdata$r:00006A7F                 db    0
.rdata$r:00006A80                 db 0FFh
.rdata$r:00006A81                 db 0FFh
.rdata$r:00006A82                 db 0FFh
.rdata$r:00006A83                 db 0FFh
.rdata$r:00006A84                 db    0
.rdata$r:00006A85                 db    0
.rdata$r:00006A86                 db    0
.rdata$r:00006A87                 db    0
.rdata$r:00006A88                 db  40h ; @
.rdata$r:00006A89                 db    0
.rdata$r:00006A8A                 db    0
.rdata$r:00006A8B                 db    0
.rdata$r:00006A8C                 dd offset ??_R3COutStreamWithCRC@@8 ; COutStreamWithCRC::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006A8C _rdata$r        ends
.rdata$r:00006A8C
.rdata$r:00006A90 ; ===========================================================================
.rdata$r:00006A90
.rdata$r:00006A90 ; Segment type: Pure data
.rdata$r:00006A90 ; Segment permissions: Read
.rdata$r:00006A90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006A90                 assume cs:_rdata$r
.rdata$r:00006A90                 ;org 6A90h
.rdata$r:00006A90 ; COMDAT (pick any)
.rdata$r:00006A90                 public ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00006A90 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006A90 ??_R1A@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:00006A90                                         ; DATA XREF: .rdata$r:00006A64o
.rdata$r:00006A90                                         ; .rdata$r:ISequentialOutStream::`RTTI Base Class Array'o
.rdata$r:00006A90                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00006A94                 db    1
.rdata$r:00006A95                 db    0
.rdata$r:00006A96                 db    0
.rdata$r:00006A97                 db    0
.rdata$r:00006A98                 db    0
.rdata$r:00006A99                 db    0
.rdata$r:00006A9A                 db    0
.rdata$r:00006A9B                 db    0
.rdata$r:00006A9C                 db 0FFh
.rdata$r:00006A9D                 db 0FFh
.rdata$r:00006A9E                 db 0FFh
.rdata$r:00006A9F                 db 0FFh
.rdata$r:00006AA0                 db    0
.rdata$r:00006AA1                 db    0
.rdata$r:00006AA2                 db    0
.rdata$r:00006AA3                 db    0
.rdata$r:00006AA4                 db  40h ; @
.rdata$r:00006AA5                 db    0
.rdata$r:00006AA6                 db    0
.rdata$r:00006AA7                 db    0
.rdata$r:00006AA8                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006AA8 _rdata$r        ends
.rdata$r:00006AA8
.data:00006AAC ; ===========================================================================
.data:00006AAC
.data:00006AAC ; Segment type: Pure data
.data:00006AAC ; Segment permissions: Read/Write
.data:00006AAC _data           segment dword public 'DATA' use32
.data:00006AAC                 assume cs:_data
.data:00006AAC                 ;org 6AACh
.data:00006AAC ; COMDAT (pick any)
.data:00006AAC                 public ??_R0?AUISequentialOutStream@@@8
.data:00006AAC ; struct ISequentialOutStream `RTTI Type Descriptor'
.data:00006AAC ??_R0?AUISequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:00006AAC                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00006AAC                                         ; .rdata$r:00006B3Co
.data:00006AAC                                         ; const type_info::`vftable'
.data:00006AB0                 db    0
.data:00006AB1                 db    0
.data:00006AB2                 db    0
.data:00006AB3                 db    0
.data:00006AB4                 db  2Eh ; .
.data:00006AB5                 db  3Fh ; ?
.data:00006AB6                 db  41h ; A
.data:00006AB7                 db  55h ; U
.data:00006AB8                 db  49h ; I
.data:00006AB9                 db  53h ; S
.data:00006ABA                 db  65h ; e
.data:00006ABB                 db  71h ; q
.data:00006ABC                 db  75h ; u
.data:00006ABD                 db  65h ; e
.data:00006ABE                 db  6Eh ; n
.data:00006ABF                 db  74h ; t
.data:00006AC0                 db  69h ; i
.data:00006AC1                 db  61h ; a
.data:00006AC2                 db  6Ch ; l
.data:00006AC3                 db  4Fh ; O
.data:00006AC4                 db  75h ; u
.data:00006AC5                 db  74h ; t
.data:00006AC6                 db  53h ; S
.data:00006AC7                 db  74h ; t
.data:00006AC8                 db  72h ; r
.data:00006AC9                 db  65h ; e
.data:00006ACA                 db  61h ; a
.data:00006ACB                 db  6Dh ; m
.data:00006ACC                 db  40h ; @
.data:00006ACD                 db  40h ; @
.data:00006ACE                 db    0
.data:00006ACF                 align 10h
.data:00006ACF _data           ends
.data:00006ACF
.rdata$r:00006AD0 ; ===========================================================================
.rdata$r:00006AD0
.rdata$r:00006AD0 ; Segment type: Pure data
.rdata$r:00006AD0 ; Segment permissions: Read
.rdata$r:00006AD0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006AD0                 assume cs:_rdata$r
.rdata$r:00006AD0                 ;org 6AD0h
.rdata$r:00006AD0 ; COMDAT (pick any)
.rdata$r:00006AD0                 public ??_R3ISequentialOutStream@@8
.rdata$r:00006AD0 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006AD0 ??_R3ISequentialOutStream@@8 db    0    ; DATA XREF: .rdata$r:00006AA8o
.rdata$r:00006AD0                                         ; .rdata$r:00006B40o
.rdata$r:00006AD1                 db    0
.rdata$r:00006AD2                 db    0
.rdata$r:00006AD3                 db    0
.rdata$r:00006AD4                 db    0
.rdata$r:00006AD5                 db    0
.rdata$r:00006AD6                 db    0
.rdata$r:00006AD7                 db    0
.rdata$r:00006AD8                 db    2
.rdata$r:00006AD9                 db    0
.rdata$r:00006ADA                 db    0
.rdata$r:00006ADB                 db    0
.rdata$r:00006ADC                 dd offset ??_R2ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00006ADC _rdata$r        ends
.rdata$r:00006ADC
.rdata$r:00006AE0 ; ===========================================================================
.rdata$r:00006AE0
.rdata$r:00006AE0 ; Segment type: Pure data
.rdata$r:00006AE0 ; Segment permissions: Read
.rdata$r:00006AE0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006AE0                 assume cs:_rdata$r
.rdata$r:00006AE0                 ;org 6AE0h
.rdata$r:00006AE0 ; COMDAT (pick any)
.rdata$r:00006AE0                 public ??_R2ISequentialOutStream@@8
.rdata$r:00006AE0 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00006AE0 ??_R2ISequentialOutStream@@8 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00006AE0                                         ; DATA XREF: .rdata$r:00006ADCo
.rdata$r:00006AE0                                         ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006AE4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006AE8                 db    0
.rdata$r:00006AE9                 align 4
.rdata$r:00006AE9 _rdata$r        ends
.rdata$r:00006AE9
.text:00006AEC ; ===========================================================================
.text:00006AEC
.text:00006AEC ; Segment type: Pure code
.text:00006AEC ; Segment permissions: Read/Execute
.text:00006AEC _text           segment para public 'CODE' use32
.text:00006AEC                 assume cs:_text
.text:00006AEC                 ;org 6AECh
.text:00006AEC ; COMDAT (pick any)
.text:00006AEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006AEC
.text:00006AEC ; =============== S U B R O U T I N E =======================================
.text:00006AEC
.text:00006AEC ; Attributes: bp-based frame
.text:00006AEC
.text:00006AEC ; _DWORD __thiscall ISequentialOutStream::ISequentialOutStream(ISequentialOutStream *__hidden this)
.text:00006AEC                 public ??0ISequentialOutStream@@QAE@XZ
.text:00006AEC ??0ISequentialOutStream@@QAE@XZ proc near
.text:00006AEC                                         ; CODE XREF: COutStreamWithCRC::COutStreamWithCRC(void)+11p
.text:00006AEC
.text:00006AEC var_4           = dword ptr -4
.text:00006AEC
.text:00006AEC                 push    ebp
.text:00006AED                 mov     ebp, esp
.text:00006AEF                 push    ecx
.text:00006AF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006AF7                 mov     [ebp+var_4], ecx
.text:00006AFA                 mov     ecx, [ebp+var_4]
.text:00006AFD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00006B02                 mov     eax, [ebp+var_4]
.text:00006B05                 mov     dword ptr [eax], offset ??_7ISequentialOutStream@@6B@ ; const ISequentialOutStream::`vftable'
.text:00006B0B                 mov     eax, [ebp+var_4]
.text:00006B0E                 add     esp, 4
.text:00006B11                 cmp     ebp, esp
.text:00006B13                 call    __RTC_CheckEsp
.text:00006B18                 mov     esp, ebp
.text:00006B1A                 pop     ebp
.text:00006B1B                 retn
.text:00006B1B ??0ISequentialOutStream@@QAE@XZ endp
.text:00006B1B
.text:00006B1B _text           ends
.text:00006B1B
.rdata:00006B1C ; ===========================================================================
.rdata:00006B1C
.rdata:00006B1C ; Segment type: Pure data
.rdata:00006B1C ; Segment permissions: Read
.rdata:00006B1C _rdata          segment dword public 'DATA' use32
.rdata:00006B1C                 assume cs:_rdata
.rdata:00006B1C                 ;org 6B1Ch
.rdata:00006B1C ; COMDAT (pick largest)
.rdata:00006B1C                 dd offset ??_R4ISequentialOutStream@@6B@ ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata:00006B20                 public ??_7ISequentialOutStream@@6B@
.rdata:00006B20 ; const ISequentialOutStream::`vftable'
.rdata:00006B20 ??_7ISequentialOutStream@@6B@ dd offset __purecall
.rdata:00006B20                                         ; DATA XREF: ISequentialOutStream::ISequentialOutStream(void)+19o
.rdata:00006B24                 dd offset __purecall
.rdata:00006B28                 dd offset __purecall
.rdata:00006B2C                 dd offset __purecall
.rdata:00006B2C _rdata          ends
.rdata:00006B2C
.rdata$r:00006B30 ; ===========================================================================
.rdata$r:00006B30
.rdata$r:00006B30 ; Segment type: Pure data
.rdata$r:00006B30 ; Segment permissions: Read
.rdata$r:00006B30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006B30                 assume cs:_rdata$r
.rdata$r:00006B30                 ;org 6B30h
.rdata$r:00006B30 ; COMDAT (pick any)
.rdata$r:00006B30                 public ??_R4ISequentialOutStream@@6B@
.rdata$r:00006B30 ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:00006B30 ??_R4ISequentialOutStream@@6B@ db    0  ; DATA XREF: .rdata:00006B1Co
.rdata$r:00006B31                 db    0
.rdata$r:00006B32                 db    0
.rdata$r:00006B33                 db    0
.rdata$r:00006B34                 db    0
.rdata$r:00006B35                 db    0
.rdata$r:00006B36                 db    0
.rdata$r:00006B37                 db    0
.rdata$r:00006B38                 db    0
.rdata$r:00006B39                 db    0
.rdata$r:00006B3A                 db    0
.rdata$r:00006B3B                 db    0
.rdata$r:00006B3C                 dd offset ??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00006B40                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006B40 _rdata$r        ends
.rdata$r:00006B40
.text:00006B44 ; ===========================================================================
.text:00006B44
.text:00006B44 ; Segment type: Pure code
.text:00006B44 ; Segment permissions: Read/Execute
.text:00006B44 _text           segment para public 'CODE' use32
.text:00006B44                 assume cs:_text
.text:00006B44                 ;org 6B44h
.text:00006B44 ; COMDAT (pick any)
.text:00006B44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006B44
.text:00006B44 ; =============== S U B R O U T I N E =======================================
.text:00006B44
.text:00006B44 ; Attributes: bp-based frame
.text:00006B44
.text:00006B44 ; __int32 __stdcall COutStreamWithCRC::QueryInterface(COutStreamWithCRC *this, const struct _GUID *Buf1, void **)
.text:00006B44                 public ?QueryInterface@COutStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z
.text:00006B44 ?QueryInterface@COutStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00006B44                                         ; DATA XREF: .rdata:const COutStreamWithCRC::`vftable'o
.text:00006B44
.text:00006B44 this            = dword ptr  8
.text:00006B44 Buf1            = dword ptr  0Ch
.text:00006B44 arg_8           = dword ptr  10h
.text:00006B44
.text:00006B44                 push    ebp
.text:00006B45                 mov     ebp, esp
.text:00006B47                 mov     eax, [ebp+arg_8]
.text:00006B4A                 mov     dword ptr [eax], 0
.text:00006B50                 push    offset _IID_IUnknown ; Buf2
.text:00006B55                 mov     ecx, [ebp+Buf1]
.text:00006B58                 push    ecx             ; Buf1
.text:00006B59                 call    ___@8           ; __(x,x)
.text:00006B5E                 test    eax, eax
.text:00006B60                 jz      short loc_6B6C
.text:00006B62                 mov     edx, [ebp+arg_8]
.text:00006B65                 mov     eax, [ebp+this]
.text:00006B68                 mov     [edx], eax
.text:00006B6A                 jmp     short loc_6B73
.text:00006B6C ; ---------------------------------------------------------------------------
.text:00006B6C
.text:00006B6C loc_6B6C:                               ; CODE XREF: COutStreamWithCRC::QueryInterface(_GUID const &,void * *)+1Cj
.text:00006B6C                 mov     eax, 80004002h
.text:00006B71                 jmp     short loc_6B84
.text:00006B73 ; ---------------------------------------------------------------------------
.text:00006B73
.text:00006B73 loc_6B73:                               ; CODE XREF: COutStreamWithCRC::QueryInterface(_GUID const &,void * *)+26j
.text:00006B73                 mov     ecx, [ebp+this]
.text:00006B76                 mov     edx, [ecx+4]
.text:00006B79                 add     edx, 1
.text:00006B7C                 mov     eax, [ebp+this]
.text:00006B7F                 mov     [eax+4], edx
.text:00006B82                 xor     eax, eax
.text:00006B84
.text:00006B84 loc_6B84:                               ; CODE XREF: COutStreamWithCRC::QueryInterface(_GUID const &,void * *)+2Dj
.text:00006B84                 cmp     ebp, esp
.text:00006B86                 call    __RTC_CheckEsp
.text:00006B8B                 pop     ebp
.text:00006B8C                 retn    0Ch
.text:00006B8C ?QueryInterface@COutStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z endp
.text:00006B8C
.text:00006B8C ; ---------------------------------------------------------------------------
.text:00006B8F                 align 10h
.text:00006B8F _text           ends
.text:00006B8F
.text:00006B90 ; ===========================================================================
.text:00006B90
.text:00006B90 ; Segment type: Pure code
.text:00006B90 ; Segment permissions: Read/Execute
.text:00006B90 _text           segment para public 'CODE' use32
.text:00006B90                 assume cs:_text
.text:00006B90                 ;org 6B90h
.text:00006B90 ; COMDAT (pick any)
.text:00006B90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006B90
.text:00006B90 ; =============== S U B R O U T I N E =======================================
.text:00006B90
.text:00006B90 ; Attributes: bp-based frame
.text:00006B90
.text:00006B90 ; unsigned __int32 __stdcall COutStreamWithCRC::AddRef(COutStreamWithCRC *this)
.text:00006B90                 public ?AddRef@COutStreamWithCRC@@UAGKXZ
.text:00006B90 ?AddRef@COutStreamWithCRC@@UAGKXZ proc near ; DATA XREF: .rdata:00006A10o
.text:00006B90
.text:00006B90 var_4           = dword ptr -4
.text:00006B90 this            = dword ptr  8
.text:00006B90
.text:00006B90                 push    ebp
.text:00006B91                 mov     ebp, esp
.text:00006B93                 push    ecx
.text:00006B94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006B9B                 mov     eax, [ebp+this]
.text:00006B9E                 mov     ecx, [eax+4]
.text:00006BA1                 add     ecx, 1
.text:00006BA4                 mov     [ebp+var_4], ecx
.text:00006BA7                 mov     edx, [ebp+this]
.text:00006BAA                 mov     eax, [ebp+var_4]
.text:00006BAD                 mov     [edx+4], eax
.text:00006BB0                 mov     eax, [ebp+var_4]
.text:00006BB3                 mov     esp, ebp
.text:00006BB5                 pop     ebp
.text:00006BB6                 retn    4
.text:00006BB6 ?AddRef@COutStreamWithCRC@@UAGKXZ endp
.text:00006BB6
.text:00006BB6 ; ---------------------------------------------------------------------------
.text:00006BB9                 align 4
.text:00006BB9 _text           ends
.text:00006BB9
.text:00006BBC ; ===========================================================================
.text:00006BBC
.text:00006BBC ; Segment type: Pure code
.text:00006BBC ; Segment permissions: Read/Execute
.text:00006BBC _text           segment para public 'CODE' use32
.text:00006BBC                 assume cs:_text
.text:00006BBC                 ;org 6BBCh
.text:00006BBC ; COMDAT (pick any)
.text:00006BBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006BBC
.text:00006BBC ; =============== S U B R O U T I N E =======================================
.text:00006BBC
.text:00006BBC ; Attributes: bp-based frame
.text:00006BBC
.text:00006BBC ; unsigned __int32 __stdcall COutStreamWithCRC::Release(COutStreamWithCRC *this)
.text:00006BBC                 public ?Release@COutStreamWithCRC@@UAGKXZ
.text:00006BBC ?Release@COutStreamWithCRC@@UAGKXZ proc near ; DATA XREF: .rdata:00006A14o
.text:00006BBC
.text:00006BBC var_10          = dword ptr -10h
.text:00006BBC var_C           = dword ptr -0Ch
.text:00006BBC var_8           = dword ptr -8
.text:00006BBC var_4           = dword ptr -4
.text:00006BBC this            = dword ptr  8
.text:00006BBC
.text:00006BBC                 push    ebp
.text:00006BBD                 mov     ebp, esp
.text:00006BBF                 sub     esp, 10h
.text:00006BC2                 mov     eax, 0CCCCCCCCh
.text:00006BC7                 mov     [ebp+var_10], eax
.text:00006BCA                 mov     [ebp+var_C], eax
.text:00006BCD                 mov     [ebp+var_8], eax
.text:00006BD0                 mov     [ebp+var_4], eax
.text:00006BD3                 mov     eax, [ebp+this]
.text:00006BD6                 mov     ecx, [eax+4]
.text:00006BD9                 sub     ecx, 1
.text:00006BDC                 mov     [ebp+var_C], ecx
.text:00006BDF                 mov     edx, [ebp+this]
.text:00006BE2                 mov     eax, [ebp+var_C]
.text:00006BE5                 mov     [edx+4], eax
.text:00006BE8                 cmp     [ebp+var_C], 0
.text:00006BEC                 jz      short loc_6BF6
.text:00006BEE                 mov     ecx, [ebp+this]
.text:00006BF1                 mov     eax, [ecx+4]
.text:00006BF4                 jmp     short loc_6C20
.text:00006BF6 ; ---------------------------------------------------------------------------
.text:00006BF6
.text:00006BF6 loc_6BF6:                               ; CODE XREF: COutStreamWithCRC::Release(void)+30j
.text:00006BF6                 mov     edx, [ebp+this]
.text:00006BF9                 mov     [ebp+var_8], edx
.text:00006BFC                 mov     eax, [ebp+var_8]
.text:00006BFF                 mov     [ebp+var_4], eax
.text:00006C02                 cmp     [ebp+var_4], 0
.text:00006C06                 jz      short loc_6C17
.text:00006C08                 push    1
.text:00006C0A                 mov     ecx, [ebp+var_4]
.text:00006C0D                 call    ??_GCOutStreamWithCRC@@QAEPAXI@Z ; COutStreamWithCRC::`scalar deleting destructor'(uint)
.text:00006C12                 mov     [ebp+var_10], eax
.text:00006C15                 jmp     short loc_6C1E
.text:00006C17 ; ---------------------------------------------------------------------------
.text:00006C17
.text:00006C17 loc_6C17:                               ; CODE XREF: COutStreamWithCRC::Release(void)+4Aj
.text:00006C17                 mov     [ebp+var_10], 0
.text:00006C1E
.text:00006C1E loc_6C1E:                               ; CODE XREF: COutStreamWithCRC::Release(void)+59j
.text:00006C1E                 xor     eax, eax
.text:00006C20
.text:00006C20 loc_6C20:                               ; CODE XREF: COutStreamWithCRC::Release(void)+38j
.text:00006C20                 add     esp, 10h
.text:00006C23                 cmp     ebp, esp
.text:00006C25                 call    __RTC_CheckEsp
.text:00006C2A                 mov     esp, ebp
.text:00006C2C                 pop     ebp
.text:00006C2D                 retn    4
.text:00006C2D ?Release@COutStreamWithCRC@@UAGKXZ endp
.text:00006C2D
.text:00006C2D _text           ends
.text:00006C2D
.text:00006C30 ; ===========================================================================
.text:00006C30
.text:00006C30 ; Segment type: Pure code
.text:00006C30 ; Segment permissions: Read/Execute
.text:00006C30 _text           segment para public 'CODE' use32
.text:00006C30                 assume cs:_text
.text:00006C30                 ;org 6C30h
.text:00006C30 ; COMDAT (pick any)
.text:00006C30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006C30
.text:00006C30 ; =============== S U B R O U T I N E =======================================
.text:00006C30
.text:00006C30 ; Attributes: bp-based frame
.text:00006C30
.text:00006C30 ; public: void * __thiscall COutStreamWithCRC::`scalar deleting destructor'(unsigned int)
.text:00006C30                 public ??_GCOutStreamWithCRC@@QAEPAXI@Z
.text:00006C30 ??_GCOutStreamWithCRC@@QAEPAXI@Z proc near
.text:00006C30                                         ; CODE XREF: COutStreamWithCRC::Release(void)+51p
.text:00006C30
.text:00006C30 var_4           = dword ptr -4
.text:00006C30 arg_0           = dword ptr  8
.text:00006C30
.text:00006C30                 push    ebp
.text:00006C31                 mov     ebp, esp
.text:00006C33                 push    ecx
.text:00006C34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C3B                 mov     [ebp+var_4], ecx
.text:00006C3E                 mov     ecx, [ebp+var_4] ; this
.text:00006C41                 call    ??1COutStreamWithCRC@@QAE@XZ ; COutStreamWithCRC::~COutStreamWithCRC(void)
.text:00006C46                 mov     eax, [ebp+arg_0]
.text:00006C49                 and     eax, 1
.text:00006C4C                 jz      short loc_6C5A
.text:00006C4E                 mov     ecx, [ebp+var_4]
.text:00006C51                 push    ecx             ; void *
.text:00006C52                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006C57                 add     esp, 4
.text:00006C5A
.text:00006C5A loc_6C5A:                               ; CODE XREF: COutStreamWithCRC::`scalar deleting destructor'(uint)+1Cj
.text:00006C5A                 mov     eax, [ebp+var_4]
.text:00006C5D                 add     esp, 4
.text:00006C60                 cmp     ebp, esp
.text:00006C62                 call    __RTC_CheckEsp
.text:00006C67                 mov     esp, ebp
.text:00006C69                 pop     ebp
.text:00006C6A                 retn    4
.text:00006C6A ??_GCOutStreamWithCRC@@QAEPAXI@Z endp
.text:00006C6A
.text:00006C6A ; ---------------------------------------------------------------------------
.text:00006C6D                 align 10h
.text:00006C6D _text           ends
.text:00006C6D
.text:00006C70 ; ===========================================================================
.text:00006C70
.text:00006C70 ; Segment type: Pure code
.text:00006C70 ; Segment permissions: Read/Execute
.text:00006C70 _text           segment para public 'CODE' use32
.text:00006C70                 assume cs:_text
.text:00006C70                 ;org 6C70h
.text:00006C70 ; COMDAT (pick any)
.text:00006C70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006C70
.text:00006C70 ; =============== S U B R O U T I N E =======================================
.text:00006C70
.text:00006C70 ; Attributes: bp-based frame
.text:00006C70
.text:00006C70 ; _DWORD __thiscall COutStreamWithCRC::~COutStreamWithCRC(COutStreamWithCRC *__hidden this)
.text:00006C70                 public ??1COutStreamWithCRC@@QAE@XZ
.text:00006C70 ??1COutStreamWithCRC@@QAE@XZ proc near  ; CODE XREF: COutStreamWithCRC::`scalar deleting destructor'(uint)+11p
.text:00006C70
.text:00006C70 var_4           = dword ptr -4
.text:00006C70
.text:00006C70                 push    ebp
.text:00006C71                 mov     ebp, esp
.text:00006C73                 push    ecx
.text:00006C74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C7B                 mov     [ebp+var_4], ecx
.text:00006C7E                 mov     ecx, [ebp+var_4]
.text:00006C81                 add     ecx, 8
.text:00006C84                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00006C89                 add     esp, 4
.text:00006C8C                 cmp     ebp, esp
.text:00006C8E                 call    __RTC_CheckEsp
.text:00006C93                 mov     esp, ebp
.text:00006C95                 pop     ebp
.text:00006C96                 retn
.text:00006C96 ??1COutStreamWithCRC@@QAE@XZ endp
.text:00006C96
.text:00006C96 ; ---------------------------------------------------------------------------
.text:00006C97                 align 4
.text:00006C97 _text           ends
.text:00006C97
.text:00006C98 ; ===========================================================================
.text:00006C98
.text:00006C98 ; Segment type: Pure code
.text:00006C98 ; Segment permissions: Read/Execute
.text:00006C98 _text           segment para public 'CODE' use32
.text:00006C98                 assume cs:_text
.text:00006C98                 ;org 6C98h
.text:00006C98 ; COMDAT (pick any)
.text:00006C98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006C98
.text:00006C98 ; =============== S U B R O U T I N E =======================================
.text:00006C98
.text:00006C98 ; Attributes: bp-based frame
.text:00006C98
.text:00006C98 ; _DWORD __thiscall NCrypto::NWzAes::CDecoder::CDecoder(NCrypto::NWzAes::CDecoder *__hidden this)
.text:00006C98                 public ??0CDecoder@NWzAes@NCrypto@@QAE@XZ
.text:00006C98 ??0CDecoder@NWzAes@NCrypto@@QAE@XZ proc near
.text:00006C98                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+330p
.text:00006C98
.text:00006C98 var_4           = dword ptr -4
.text:00006C98
.text:00006C98                 push    ebp
.text:00006C99                 mov     ebp, esp
.text:00006C9B                 push    ecx
.text:00006C9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006CA3                 mov     [ebp+var_4], ecx
.text:00006CA6                 mov     ecx, [ebp+var_4] ; this
.text:00006CA9                 call    ??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ ; NCrypto::NWzAes::CBaseCoder::CBaseCoder(void)
.text:00006CAE                 mov     eax, [ebp+var_4]
.text:00006CB1                 mov     dword ptr [eax], offset ??_7CDecoder@NWzAes@NCrypto@@6BICompressFilter@@@ ; const NCrypto::NWzAes::CDecoder::`vftable'{for `ICompressFilter'}
.text:00006CB7                 mov     ecx, [ebp+var_4]
.text:00006CBA                 mov     dword ptr [ecx+4], offset ??_7CDecoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::NWzAes::CDecoder::`vftable'{for `ICryptoSetPassword'}
.text:00006CC1                 mov     eax, [ebp+var_4]
.text:00006CC4                 add     esp, 4
.text:00006CC7                 cmp     ebp, esp
.text:00006CC9                 call    __RTC_CheckEsp
.text:00006CCE                 mov     esp, ebp
.text:00006CD0                 pop     ebp
.text:00006CD1                 retn
.text:00006CD1 ??0CDecoder@NWzAes@NCrypto@@QAE@XZ endp
.text:00006CD1
.text:00006CD1 ; ---------------------------------------------------------------------------
.text:00006CD2                 align 4
.text:00006CD2 _text           ends
.text:00006CD2
.rdata:00006CD4 ; ===========================================================================
.rdata:00006CD4
.rdata:00006CD4 ; Segment type: Pure data
.rdata:00006CD4 ; Segment permissions: Read
.rdata:00006CD4 _rdata          segment dword public 'DATA' use32
.rdata:00006CD4                 assume cs:_rdata
.rdata:00006CD4                 ;org 6CD4h
.rdata:00006CD4 ; COMDAT (pick largest)
.rdata:00006CD4                 dd offset ??_R4CDecoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::NWzAes::CDecoder::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata:00006CD8                 public ??_7CDecoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@
.rdata:00006CD8 ; const NCrypto::NWzAes::CDecoder::`vftable'{for `ICryptoSetPassword'}
.rdata:00006CD8 ??_7CDecoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ dd offset ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00006CD8                                         ; DATA XREF: NCrypto::NWzAes::CDecoder::CDecoder(void)+22o
.rdata:00006CD8                                         ; [thunk]:NCrypto::NWzAes::CBaseCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00006CDC                 dd offset ?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::NWzAes::CBaseCoder::AddRef`adjustor{4}' (void)
.rdata:00006CE0                 dd offset ?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::NWzAes::CBaseCoder::Release`adjustor{4}' (void)
.rdata:00006CE4                 dd offset ?CryptoSetPassword@CBaseCoder@NWzAes@NCrypto@@UAGJPBEI@Z ; NCrypto::NWzAes::CBaseCoder::CryptoSetPassword(uchar const *,uint)
.rdata:00006CE4 _rdata          ends
.rdata:00006CE4
.rdata:00006CE8 ; ===========================================================================
.rdata:00006CE8
.rdata:00006CE8 ; Segment type: Pure data
.rdata:00006CE8 ; Segment permissions: Read
.rdata:00006CE8 _rdata          segment dword public 'DATA' use32
.rdata:00006CE8                 assume cs:_rdata
.rdata:00006CE8                 ;org 6CE8h
.rdata:00006CE8 ; COMDAT (pick largest)
.rdata:00006CE8                 dd offset ??_R4CDecoder@NWzAes@NCrypto@@6BICompressFilter@@@ ; const NCrypto::NWzAes::CDecoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:00006CEC                 public ??_7CDecoder@NWzAes@NCrypto@@6BICompressFilter@@@
.rdata:00006CEC ; const NCrypto::NWzAes::CDecoder::`vftable'{for `ICompressFilter'}
.rdata:00006CEC ??_7CDecoder@NWzAes@NCrypto@@6BICompressFilter@@@ dd offset ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.rdata:00006CEC                                         ; DATA XREF: NCrypto::NWzAes::CDecoder::CDecoder(void)+19o
.rdata:00006CEC                                         ; NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)
.rdata:00006CF0                 dd offset ?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ ; NCrypto::NWzAes::CBaseCoder::AddRef(void)
.rdata:00006CF4                 dd offset ?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ ; NCrypto::NWzAes::CBaseCoder::Release(void)
.rdata:00006CF8                 dd offset ?Init@CBaseCoder@NWzAes@NCrypto@@UAGJXZ ; NCrypto::NWzAes::CBaseCoder::Init(void)
.rdata:00006CFC                 dd offset ?Filter@CDecoder@NWzAes@NCrypto@@UAGIPAEI@Z ; NCrypto::NWzAes::CDecoder::Filter(uchar *,uint)
.rdata:00006CFC _rdata          ends
.rdata:00006CFC
.rdata$r:00006D00 ; ===========================================================================
.rdata$r:00006D00
.rdata$r:00006D00 ; Segment type: Pure data
.rdata$r:00006D00 ; Segment permissions: Read
.rdata$r:00006D00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006D00                 assume cs:_rdata$r
.rdata$r:00006D00                 ;org 6D00h
.rdata$r:00006D00 ; COMDAT (pick any)
.rdata$r:00006D00                 public ??_R4CDecoder@NWzAes@NCrypto@@6BICompressFilter@@@
.rdata$r:00006D00 ; const NCrypto::NWzAes::CDecoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:00006D00 ??_R4CDecoder@NWzAes@NCrypto@@6BICompressFilter@@@ db    0
.rdata$r:00006D00                                         ; DATA XREF: .rdata:00006CE8o
.rdata$r:00006D01                 db    0
.rdata$r:00006D02                 db    0
.rdata$r:00006D03                 db    0
.rdata$r:00006D04                 db    0
.rdata$r:00006D05                 db    0
.rdata$r:00006D06                 db    0
.rdata$r:00006D07                 db    0
.rdata$r:00006D08                 db    0
.rdata$r:00006D09                 db    0
.rdata$r:00006D0A                 db    0
.rdata$r:00006D0B                 db    0
.rdata$r:00006D0C                 dd offset ??_R0?AVCDecoder@NWzAes@NCrypto@@@8 ; NCrypto::NWzAes::CDecoder `RTTI Type Descriptor'
.rdata$r:00006D10                 dd offset ??_R3CDecoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006D10 _rdata$r        ends
.rdata$r:00006D10
.data:00006D14 ; ===========================================================================
.data:00006D14
.data:00006D14 ; Segment type: Pure data
.data:00006D14 ; Segment permissions: Read/Write
.data:00006D14 _data           segment dword public 'DATA' use32
.data:00006D14                 assume cs:_data
.data:00006D14                 ;org 6D14h
.data:00006D14 ; COMDAT (pick any)
.data:00006D14                 public ??_R0?AVCDecoder@NWzAes@NCrypto@@@8
.data:00006D14 ; class NCrypto::NWzAes::CDecoder `RTTI Type Descriptor'
.data:00006D14 ??_R0?AVCDecoder@NWzAes@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:00006D14                                         ; DATA XREF: .rdata$r:00006D0Co
.data:00006D14                                         ; .rdata$r:NCrypto::NWzAes::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00006D14                                         ; const type_info::`vftable'
.data:00006D18                 db    0
.data:00006D19                 db    0
.data:00006D1A                 db    0
.data:00006D1B                 db    0
.data:00006D1C                 db  2Eh ; .
.data:00006D1D                 db  3Fh ; ?
.data:00006D1E                 db  41h ; A
.data:00006D1F                 db  56h ; V
.data:00006D20                 db  43h ; C
.data:00006D21                 db  44h ; D
.data:00006D22                 db  65h ; e
.data:00006D23                 db  63h ; c
.data:00006D24                 db  6Fh ; o
.data:00006D25                 db  64h ; d
.data:00006D26                 db  65h ; e
.data:00006D27                 db  72h ; r
.data:00006D28                 db  40h ; @
.data:00006D29                 db  4Eh ; N
.data:00006D2A                 db  57h ; W
.data:00006D2B                 db  7Ah ; z
.data:00006D2C                 db  41h ; A
.data:00006D2D                 db  65h ; e
.data:00006D2E                 db  73h ; s
.data:00006D2F                 db  40h ; @
.data:00006D30                 db  4Eh ; N
.data:00006D31                 db  43h ; C
.data:00006D32                 db  72h ; r
.data:00006D33                 db  79h ; y
.data:00006D34                 db  70h ; p
.data:00006D35                 db  74h ; t
.data:00006D36                 db  6Fh ; o
.data:00006D37                 db  40h ; @
.data:00006D38                 db  40h ; @
.data:00006D39                 db    0
.data:00006D3A                 align 4
.data:00006D3A _data           ends
.data:00006D3A
.rdata$r:00006D3C ; ===========================================================================
.rdata$r:00006D3C
.rdata$r:00006D3C ; Segment type: Pure data
.rdata$r:00006D3C ; Segment permissions: Read
.rdata$r:00006D3C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006D3C                 assume cs:_rdata$r
.rdata$r:00006D3C                 ;org 6D3Ch
.rdata$r:00006D3C ; COMDAT (pick any)
.rdata$r:00006D3C                 public ??_R3CDecoder@NWzAes@NCrypto@@8
.rdata$r:00006D3C ; NCrypto::NWzAes::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006D3C ??_R3CDecoder@NWzAes@NCrypto@@8 db    0 ; DATA XREF: .rdata$r:00006D10o
.rdata$r:00006D3C                                         ; .rdata$r:00006D84o ...
.rdata$r:00006D3D                 db    0
.rdata$r:00006D3E                 db    0
.rdata$r:00006D3F                 db    0
.rdata$r:00006D40                 db    1
.rdata$r:00006D41                 db    0
.rdata$r:00006D42                 db    0
.rdata$r:00006D43                 db    0
.rdata$r:00006D44                 db    7
.rdata$r:00006D45                 db    0
.rdata$r:00006D46                 db    0
.rdata$r:00006D47                 db    0
.rdata$r:00006D48                 dd offset ??_R2CDecoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CDecoder::`RTTI Base Class Array'
.rdata$r:00006D48 _rdata$r        ends
.rdata$r:00006D48
.rdata$r:00006D4C ; ===========================================================================
.rdata$r:00006D4C
.rdata$r:00006D4C ; Segment type: Pure data
.rdata$r:00006D4C ; Segment permissions: Read
.rdata$r:00006D4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006D4C                 assume cs:_rdata$r
.rdata$r:00006D4C                 ;org 6D4Ch
.rdata$r:00006D4C ; COMDAT (pick any)
.rdata$r:00006D4C                 public ??_R2CDecoder@NWzAes@NCrypto@@8
.rdata$r:00006D4C ; NCrypto::NWzAes::CDecoder::`RTTI Base Class Array'
.rdata$r:00006D4C ??_R2CDecoder@NWzAes@NCrypto@@8 dd offset ??_R1A@?0A@EA@CDecoder@NWzAes@NCrypto@@8
.rdata$r:00006D4C                                         ; DATA XREF: .rdata$r:00006D48o
.rdata$r:00006D4C                                         ; NCrypto::NWzAes::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006D50                 dd offset ??_R1A@?0A@EA@CBaseCoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006D54                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006D58                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00006D5C                 dd offset ??_R13?0A@EA@ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00006D60                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00006D64                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00006D68                 db    0
.rdata$r:00006D69                 align 4
.rdata$r:00006D69 _rdata$r        ends
.rdata$r:00006D69
.rdata$r:00006D6C ; ===========================================================================
.rdata$r:00006D6C
.rdata$r:00006D6C ; Segment type: Pure data
.rdata$r:00006D6C ; Segment permissions: Read
.rdata$r:00006D6C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006D6C                 assume cs:_rdata$r
.rdata$r:00006D6C                 ;org 6D6Ch
.rdata$r:00006D6C ; COMDAT (pick any)
.rdata$r:00006D6C                 public ??_R1A@?0A@EA@CDecoder@NWzAes@NCrypto@@8
.rdata$r:00006D6C ; NCrypto::NWzAes::CDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006D6C ??_R1A@?0A@EA@CDecoder@NWzAes@NCrypto@@8 dd offset ??_R0?AVCDecoder@NWzAes@NCrypto@@@8
.rdata$r:00006D6C                                         ; DATA XREF: .rdata$r:NCrypto::NWzAes::CDecoder::`RTTI Base Class Array'o
.rdata$r:00006D6C                                         ; NCrypto::NWzAes::CDecoder `RTTI Type Descriptor'
.rdata$r:00006D70                 db    6
.rdata$r:00006D71                 db    0
.rdata$r:00006D72                 db    0
.rdata$r:00006D73                 db    0
.rdata$r:00006D74                 db    0
.rdata$r:00006D75                 db    0
.rdata$r:00006D76                 db    0
.rdata$r:00006D77                 db    0
.rdata$r:00006D78                 db 0FFh
.rdata$r:00006D79                 db 0FFh
.rdata$r:00006D7A                 db 0FFh
.rdata$r:00006D7B                 db 0FFh
.rdata$r:00006D7C                 db    0
.rdata$r:00006D7D                 db    0
.rdata$r:00006D7E                 db    0
.rdata$r:00006D7F                 db    0
.rdata$r:00006D80                 db  40h ; @
.rdata$r:00006D81                 db    0
.rdata$r:00006D82                 db    0
.rdata$r:00006D83                 db    0
.rdata$r:00006D84                 dd offset ??_R3CDecoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006D84 _rdata$r        ends
.rdata$r:00006D84
.rdata$r:00006D88 ; ===========================================================================
.rdata$r:00006D88
.rdata$r:00006D88 ; Segment type: Pure data
.rdata$r:00006D88 ; Segment permissions: Read
.rdata$r:00006D88 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006D88                 assume cs:_rdata$r
.rdata$r:00006D88                 ;org 6D88h
.rdata$r:00006D88 ; COMDAT (pick any)
.rdata$r:00006D88                 public ??_R1A@?0A@EA@CBaseCoder@NWzAes@NCrypto@@8
.rdata$r:00006D88 ; NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006D88 ??_R1A@?0A@EA@CBaseCoder@NWzAes@NCrypto@@8 dd offset ??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8
.rdata$r:00006D88                                         ; DATA XREF: .rdata$r:00006D50o
.rdata$r:00006D88                                         ; .rdata$r:NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Array'o
.rdata$r:00006D88                                         ; NCrypto::NWzAes::CBaseCoder `RTTI Type Descriptor'
.rdata$r:00006D8C                 db    5
.rdata$r:00006D8D                 db    0
.rdata$r:00006D8E                 db    0
.rdata$r:00006D8F                 db    0
.rdata$r:00006D90                 db    0
.rdata$r:00006D91                 db    0
.rdata$r:00006D92                 db    0
.rdata$r:00006D93                 db    0
.rdata$r:00006D94                 db 0FFh
.rdata$r:00006D95                 db 0FFh
.rdata$r:00006D96                 db 0FFh
.rdata$r:00006D97                 db 0FFh
.rdata$r:00006D98                 db    0
.rdata$r:00006D99                 db    0
.rdata$r:00006D9A                 db    0
.rdata$r:00006D9B                 db    0
.rdata$r:00006D9C                 db  40h ; @
.rdata$r:00006D9D                 db    0
.rdata$r:00006D9E                 db    0
.rdata$r:00006D9F                 db    0
.rdata$r:00006DA0                 dd offset ??_R3CBaseCoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006DA0 _rdata$r        ends
.rdata$r:00006DA0
.data:00006DA4 ; ===========================================================================
.data:00006DA4
.data:00006DA4 ; Segment type: Pure data
.data:00006DA4 ; Segment permissions: Read/Write
.data:00006DA4 _data           segment dword public 'DATA' use32
.data:00006DA4                 assume cs:_data
.data:00006DA4                 ;org 6DA4h
.data:00006DA4 ; COMDAT (pick any)
.data:00006DA4                 public ??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8
.data:00006DA4 ; class NCrypto::NWzAes::CBaseCoder `RTTI Type Descriptor'
.data:00006DA4 ??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:00006DA4                                         ; DATA XREF: .rdata$r:NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00006DA4                                         ; .rdata$r:00007F78o ...
.data:00006DA4                                         ; const type_info::`vftable'
.data:00006DA8                 db    0
.data:00006DA9                 db    0
.data:00006DAA                 db    0
.data:00006DAB                 db    0
.data:00006DAC                 db  2Eh ; .
.data:00006DAD                 db  3Fh ; ?
.data:00006DAE                 db  41h ; A
.data:00006DAF                 db  56h ; V
.data:00006DB0                 db  43h ; C
.data:00006DB1                 db  42h ; B
.data:00006DB2                 db  61h ; a
.data:00006DB3                 db  73h ; s
.data:00006DB4                 db  65h ; e
.data:00006DB5                 db  43h ; C
.data:00006DB6                 db  6Fh ; o
.data:00006DB7                 db  64h ; d
.data:00006DB8                 db  65h ; e
.data:00006DB9                 db  72h ; r
.data:00006DBA                 db  40h ; @
.data:00006DBB                 db  4Eh ; N
.data:00006DBC                 db  57h ; W
.data:00006DBD                 db  7Ah ; z
.data:00006DBE                 db  41h ; A
.data:00006DBF                 db  65h ; e
.data:00006DC0                 db  73h ; s
.data:00006DC1                 db  40h ; @
.data:00006DC2                 db  4Eh ; N
.data:00006DC3                 db  43h ; C
.data:00006DC4                 db  72h ; r
.data:00006DC5                 db  79h ; y
.data:00006DC6                 db  70h ; p
.data:00006DC7                 db  74h ; t
.data:00006DC8                 db  6Fh ; o
.data:00006DC9                 db  40h ; @
.data:00006DCA                 db  40h ; @
.data:00006DCB                 db    0
.data:00006DCB _data           ends
.data:00006DCB
.rdata$r:00006DCC ; ===========================================================================
.rdata$r:00006DCC
.rdata$r:00006DCC ; Segment type: Pure data
.rdata$r:00006DCC ; Segment permissions: Read
.rdata$r:00006DCC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006DCC                 assume cs:_rdata$r
.rdata$r:00006DCC                 ;org 6DCCh
.rdata$r:00006DCC ; COMDAT (pick any)
.rdata$r:00006DCC                 public ??_R3CBaseCoder@NWzAes@NCrypto@@8
.rdata$r:00006DCC ; NCrypto::NWzAes::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006DCC ??_R3CBaseCoder@NWzAes@NCrypto@@8 db    0 ; DATA XREF: .rdata$r:00006DA0o
.rdata$r:00006DCC                                         ; .rdata$r:00007F7Co ...
.rdata$r:00006DCD                 db    0
.rdata$r:00006DCE                 db    0
.rdata$r:00006DCF                 db    0
.rdata$r:00006DD0                 db    1
.rdata$r:00006DD1                 db    0
.rdata$r:00006DD2                 db    0
.rdata$r:00006DD3                 db    0
.rdata$r:00006DD4                 db    6
.rdata$r:00006DD5                 db    0
.rdata$r:00006DD6                 db    0
.rdata$r:00006DD7                 db    0
.rdata$r:00006DD8                 dd offset ??_R2CBaseCoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Array'
.rdata$r:00006DD8 _rdata$r        ends
.rdata$r:00006DD8
.rdata$r:00006DDC ; ===========================================================================
.rdata$r:00006DDC
.rdata$r:00006DDC ; Segment type: Pure data
.rdata$r:00006DDC ; Segment permissions: Read
.rdata$r:00006DDC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006DDC                 assume cs:_rdata$r
.rdata$r:00006DDC                 ;org 6DDCh
.rdata$r:00006DDC ; COMDAT (pick any)
.rdata$r:00006DDC                 public ??_R2CBaseCoder@NWzAes@NCrypto@@8
.rdata$r:00006DDC ; NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Array'
.rdata$r:00006DDC ??_R2CBaseCoder@NWzAes@NCrypto@@8 dd offset ??_R1A@?0A@EA@CBaseCoder@NWzAes@NCrypto@@8
.rdata$r:00006DDC                                         ; DATA XREF: .rdata$r:00006DD8o
.rdata$r:00006DDC                                         ; NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006DE0                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006DE4                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00006DE8                 dd offset ??_R13?0A@EA@ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00006DEC                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00006DF0                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00006DF4                 db    0
.rdata$r:00006DF5                 align 4
.rdata$r:00006DF5 _rdata$r        ends
.rdata$r:00006DF5
.rdata$r:00006DF8 ; ===========================================================================
.rdata$r:00006DF8
.rdata$r:00006DF8 ; Segment type: Pure data
.rdata$r:00006DF8 ; Segment permissions: Read
.rdata$r:00006DF8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006DF8                 assume cs:_rdata$r
.rdata$r:00006DF8                 ;org 6DF8h
.rdata$r:00006DF8 ; COMDAT (pick any)
.rdata$r:00006DF8                 public ??_R1A@?0A@EA@ICompressFilter@@8
.rdata$r:00006DF8 ; ICompressFilter::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006DF8 ??_R1A@?0A@EA@ICompressFilter@@8 dd offset ??_R0?AUICompressFilter@@@8
.rdata$r:00006DF8                                         ; DATA XREF: .rdata$r:00006D54o
.rdata$r:00006DF8                                         ; .rdata$r:00006DE0o ...
.rdata$r:00006DF8                                         ; ICompressFilter `RTTI Type Descriptor'
.rdata$r:00006DFC                 db    1
.rdata$r:00006DFD                 db    0
.rdata$r:00006DFE                 db    0
.rdata$r:00006DFF                 db    0
.rdata$r:00006E00                 db    0
.rdata$r:00006E01                 db    0
.rdata$r:00006E02                 db    0
.rdata$r:00006E03                 db    0
.rdata$r:00006E04                 db 0FFh
.rdata$r:00006E05                 db 0FFh
.rdata$r:00006E06                 db 0FFh
.rdata$r:00006E07                 db 0FFh
.rdata$r:00006E08                 db    0
.rdata$r:00006E09                 db    0
.rdata$r:00006E0A                 db    0
.rdata$r:00006E0B                 db    0
.rdata$r:00006E0C                 db  40h ; @
.rdata$r:00006E0D                 db    0
.rdata$r:00006E0E                 db    0
.rdata$r:00006E0F                 db    0
.rdata$r:00006E10                 dd offset ??_R3ICompressFilter@@8 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006E10 _rdata$r        ends
.rdata$r:00006E10
.data:00006E14 ; ===========================================================================
.data:00006E14
.data:00006E14 ; Segment type: Pure data
.data:00006E14 ; Segment permissions: Read/Write
.data:00006E14 _data           segment dword public 'DATA' use32
.data:00006E14                 assume cs:_data
.data:00006E14                 ;org 6E14h
.data:00006E14 ; COMDAT (pick any)
.data:00006E14                 public ??_R0?AUICompressFilter@@@8
.data:00006E14 ; struct ICompressFilter `RTTI Type Descriptor'
.data:00006E14 ??_R0?AUICompressFilter@@@8 dd offset ??_7type_info@@6B@
.data:00006E14                                         ; DATA XREF: .rdata$r:ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00006E14                                         ; .rdata$r:00008414o
.data:00006E14                                         ; const type_info::`vftable'
.data:00006E18                 db    0
.data:00006E19                 db    0
.data:00006E1A                 db    0
.data:00006E1B                 db    0
.data:00006E1C                 db  2Eh ; .
.data:00006E1D                 db  3Fh ; ?
.data:00006E1E                 db  41h ; A
.data:00006E1F                 db  55h ; U
.data:00006E20                 db  49h ; I
.data:00006E21                 db  43h ; C
.data:00006E22                 db  6Fh ; o
.data:00006E23                 db  6Dh ; m
.data:00006E24                 db  70h ; p
.data:00006E25                 db  72h ; r
.data:00006E26                 db  65h ; e
.data:00006E27                 db  73h ; s
.data:00006E28                 db  73h ; s
.data:00006E29                 db  46h ; F
.data:00006E2A                 db  69h ; i
.data:00006E2B                 db  6Ch ; l
.data:00006E2C                 db  74h ; t
.data:00006E2D                 db  65h ; e
.data:00006E2E                 db  72h ; r
.data:00006E2F                 db  40h ; @
.data:00006E30                 db  40h ; @
.data:00006E31                 db    0
.data:00006E32                 align 4
.data:00006E32 _data           ends
.data:00006E32
.rdata$r:00006E34 ; ===========================================================================
.rdata$r:00006E34
.rdata$r:00006E34 ; Segment type: Pure data
.rdata$r:00006E34 ; Segment permissions: Read
.rdata$r:00006E34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006E34                 assume cs:_rdata$r
.rdata$r:00006E34                 ;org 6E34h
.rdata$r:00006E34 ; COMDAT (pick any)
.rdata$r:00006E34                 public ??_R3ICompressFilter@@8
.rdata$r:00006E34 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006E34 ??_R3ICompressFilter@@8 db    0         ; DATA XREF: .rdata$r:00006E10o
.rdata$r:00006E34                                         ; .rdata$r:00008418o
.rdata$r:00006E35                 db    0
.rdata$r:00006E36                 db    0
.rdata$r:00006E37                 db    0
.rdata$r:00006E38                 db    0
.rdata$r:00006E39                 db    0
.rdata$r:00006E3A                 db    0
.rdata$r:00006E3B                 db    0
.rdata$r:00006E3C                 db    2
.rdata$r:00006E3D                 db    0
.rdata$r:00006E3E                 db    0
.rdata$r:00006E3F                 db    0
.rdata$r:00006E40                 dd offset ??_R2ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Array'
.rdata$r:00006E40 _rdata$r        ends
.rdata$r:00006E40
.rdata$r:00006E44 ; ===========================================================================
.rdata$r:00006E44
.rdata$r:00006E44 ; Segment type: Pure data
.rdata$r:00006E44 ; Segment permissions: Read
.rdata$r:00006E44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006E44                 assume cs:_rdata$r
.rdata$r:00006E44                 ;org 6E44h
.rdata$r:00006E44 ; COMDAT (pick any)
.rdata$r:00006E44                 public ??_R2ICompressFilter@@8
.rdata$r:00006E44 ; ICompressFilter::`RTTI Base Class Array'
.rdata$r:00006E44 ??_R2ICompressFilter@@8 dd offset ??_R1A@?0A@EA@ICompressFilter@@8
.rdata$r:00006E44                                         ; DATA XREF: .rdata$r:00006E40o
.rdata$r:00006E44                                         ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006E48                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006E4C                 db    0
.rdata$r:00006E4D                 align 10h
.rdata$r:00006E4D _rdata$r        ends
.rdata$r:00006E4D
.rdata$r:00006E50 ; ===========================================================================
.rdata$r:00006E50
.rdata$r:00006E50 ; Segment type: Pure data
.rdata$r:00006E50 ; Segment permissions: Read
.rdata$r:00006E50 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006E50                 assume cs:_rdata$r
.rdata$r:00006E50                 ;org 6E50h
.rdata$r:00006E50 ; COMDAT (pick any)
.rdata$r:00006E50                 public ??_R13?0A@EA@ICryptoSetPassword@@8
.rdata$r:00006E50 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00006E50 ??_R13?0A@EA@ICryptoSetPassword@@8 dd offset ??_R0?AUICryptoSetPassword@@@8
.rdata$r:00006E50                                         ; DATA XREF: .rdata$r:00006D5Co
.rdata$r:00006E50                                         ; .rdata$r:00006DE8o ...
.rdata$r:00006E50                                         ; ICryptoSetPassword `RTTI Type Descriptor'
.rdata$r:00006E54                 db    1
.rdata$r:00006E55                 db    0
.rdata$r:00006E56                 db    0
.rdata$r:00006E57                 db    0
.rdata$r:00006E58                 db    4
.rdata$r:00006E59                 db    0
.rdata$r:00006E5A                 db    0
.rdata$r:00006E5B                 db    0
.rdata$r:00006E5C                 db 0FFh
.rdata$r:00006E5D                 db 0FFh
.rdata$r:00006E5E                 db 0FFh
.rdata$r:00006E5F                 db 0FFh
.rdata$r:00006E60                 db    0
.rdata$r:00006E61                 db    0
.rdata$r:00006E62                 db    0
.rdata$r:00006E63                 db    0
.rdata$r:00006E64                 db  40h ; @
.rdata$r:00006E65                 db    0
.rdata$r:00006E66                 db    0
.rdata$r:00006E67                 db    0
.rdata$r:00006E68                 dd offset ??_R3ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006E68 _rdata$r        ends
.rdata$r:00006E68
.data:00006E6C ; ===========================================================================
.data:00006E6C
.data:00006E6C ; Segment type: Pure data
.data:00006E6C ; Segment permissions: Read/Write
.data:00006E6C _data           segment dword public 'DATA' use32
.data:00006E6C                 assume cs:_data
.data:00006E6C                 ;org 6E6Ch
.data:00006E6C ; COMDAT (pick any)
.data:00006E6C                 public ??_R0?AUICryptoSetPassword@@@8
.data:00006E6C ; struct ICryptoSetPassword `RTTI Type Descriptor'
.data:00006E6C ??_R0?AUICryptoSetPassword@@@8 dd offset ??_7type_info@@6B@
.data:00006E6C                                         ; DATA XREF: .rdata$r:ICryptoSetPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00006E6C                                         ; .rdata$r:ICryptoSetPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00006E6C                                         ; const type_info::`vftable'
.data:00006E70                 db    0
.data:00006E71                 db    0
.data:00006E72                 db    0
.data:00006E73                 db    0
.data:00006E74                 db  2Eh ; .
.data:00006E75                 db  3Fh ; ?
.data:00006E76                 db  41h ; A
.data:00006E77                 db  55h ; U
.data:00006E78                 db  49h ; I
.data:00006E79                 db  43h ; C
.data:00006E7A                 db  72h ; r
.data:00006E7B                 db  79h ; y
.data:00006E7C                 db  70h ; p
.data:00006E7D                 db  74h ; t
.data:00006E7E                 db  6Fh ; o
.data:00006E7F                 db  53h ; S
.data:00006E80                 db  65h ; e
.data:00006E81                 db  74h ; t
.data:00006E82                 db  50h ; P
.data:00006E83                 db  61h ; a
.data:00006E84                 db  73h ; s
.data:00006E85                 db  73h ; s
.data:00006E86                 db  77h ; w
.data:00006E87                 db  6Fh ; o
.data:00006E88                 db  72h ; r
.data:00006E89                 db  64h ; d
.data:00006E8A                 db  40h ; @
.data:00006E8B                 db  40h ; @
.data:00006E8C                 db    0
.data:00006E8D                 align 10h
.data:00006E8D _data           ends
.data:00006E8D
.rdata$r:00006E90 ; ===========================================================================
.rdata$r:00006E90
.rdata$r:00006E90 ; Segment type: Pure data
.rdata$r:00006E90 ; Segment permissions: Read
.rdata$r:00006E90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006E90                 assume cs:_rdata$r
.rdata$r:00006E90                 ;org 6E90h
.rdata$r:00006E90 ; COMDAT (pick any)
.rdata$r:00006E90                 public ??_R3ICryptoSetPassword@@8
.rdata$r:00006E90 ; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006E90 ??_R3ICryptoSetPassword@@8 db    0      ; DATA XREF: .rdata$r:00006E68o
.rdata$r:00006E90                                         ; .rdata$r:00006EC4o ...
.rdata$r:00006E91                 db    0
.rdata$r:00006E92                 db    0
.rdata$r:00006E93                 db    0
.rdata$r:00006E94                 db    0
.rdata$r:00006E95                 db    0
.rdata$r:00006E96                 db    0
.rdata$r:00006E97                 db    0
.rdata$r:00006E98                 db    2
.rdata$r:00006E99                 db    0
.rdata$r:00006E9A                 db    0
.rdata$r:00006E9B                 db    0
.rdata$r:00006E9C                 dd offset ??_R2ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Base Class Array'
.rdata$r:00006E9C _rdata$r        ends
.rdata$r:00006E9C
.rdata$r:00006EA0 ; ===========================================================================
.rdata$r:00006EA0
.rdata$r:00006EA0 ; Segment type: Pure data
.rdata$r:00006EA0 ; Segment permissions: Read
.rdata$r:00006EA0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006EA0                 assume cs:_rdata$r
.rdata$r:00006EA0                 ;org 6EA0h
.rdata$r:00006EA0 ; COMDAT (pick any)
.rdata$r:00006EA0                 public ??_R2ICryptoSetPassword@@8
.rdata$r:00006EA0 ; ICryptoSetPassword::`RTTI Base Class Array'
.rdata$r:00006EA0 ??_R2ICryptoSetPassword@@8 dd offset ??_R1A@?0A@EA@ICryptoSetPassword@@8
.rdata$r:00006EA0                                         ; DATA XREF: .rdata$r:00006E9Co
.rdata$r:00006EA0                                         ; ICryptoSetPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006EA4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006EA8                 db    0
.rdata$r:00006EA9                 align 4
.rdata$r:00006EA9 _rdata$r        ends
.rdata$r:00006EA9
.rdata$r:00006EAC ; ===========================================================================
.rdata$r:00006EAC
.rdata$r:00006EAC ; Segment type: Pure data
.rdata$r:00006EAC ; Segment permissions: Read
.rdata$r:00006EAC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006EAC                 assume cs:_rdata$r
.rdata$r:00006EAC                 ;org 6EACh
.rdata$r:00006EAC ; COMDAT (pick any)
.rdata$r:00006EAC                 public ??_R1A@?0A@EA@ICryptoSetPassword@@8
.rdata$r:00006EAC ; ICryptoSetPassword::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006EAC ??_R1A@?0A@EA@ICryptoSetPassword@@8 dd offset ??_R0?AUICryptoSetPassword@@@8
.rdata$r:00006EAC                                         ; DATA XREF: .rdata$r:ICryptoSetPassword::`RTTI Base Class Array'o
.rdata$r:00006EAC                                         ; ICryptoSetPassword `RTTI Type Descriptor'
.rdata$r:00006EB0                 db    1
.rdata$r:00006EB1                 db    0
.rdata$r:00006EB2                 db    0
.rdata$r:00006EB3                 db    0
.rdata$r:00006EB4                 db    0
.rdata$r:00006EB5                 db    0
.rdata$r:00006EB6                 db    0
.rdata$r:00006EB7                 db    0
.rdata$r:00006EB8                 db 0FFh
.rdata$r:00006EB9                 db 0FFh
.rdata$r:00006EBA                 db 0FFh
.rdata$r:00006EBB                 db 0FFh
.rdata$r:00006EBC                 db    0
.rdata$r:00006EBD                 db    0
.rdata$r:00006EBE                 db    0
.rdata$r:00006EBF                 db    0
.rdata$r:00006EC0                 db  40h ; @
.rdata$r:00006EC1                 db    0
.rdata$r:00006EC2                 db    0
.rdata$r:00006EC3                 db    0
.rdata$r:00006EC4                 dd offset ??_R3ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006EC4 _rdata$r        ends
.rdata$r:00006EC4
.rdata$r:00006EC8 ; ===========================================================================
.rdata$r:00006EC8
.rdata$r:00006EC8 ; Segment type: Pure data
.rdata$r:00006EC8 ; Segment permissions: Read
.rdata$r:00006EC8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006EC8                 assume cs:_rdata$r
.rdata$r:00006EC8                 ;org 6EC8h
.rdata$r:00006EC8 ; COMDAT (pick any)
.rdata$r:00006EC8                 public ??_R17?0A@EA@CMyUnknownImp@@8
.rdata$r:00006EC8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00006EC8 ??_R17?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00006EC8                                         ; DATA XREF: .rdata$r:00006D64o
.rdata$r:00006EC8                                         ; .rdata$r:00006DF0o ...
.rdata$r:00006EC8                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00006ECC                 align 10h
.rdata$r:00006ED0                 db    8
.rdata$r:00006ED1                 db    0
.rdata$r:00006ED2                 db    0
.rdata$r:00006ED3                 db    0
.rdata$r:00006ED4                 db 0FFh
.rdata$r:00006ED5                 db 0FFh
.rdata$r:00006ED6                 db 0FFh
.rdata$r:00006ED7                 db 0FFh
.rdata$r:00006ED8                 db    0
.rdata$r:00006ED9                 db    0
.rdata$r:00006EDA                 db    0
.rdata$r:00006EDB                 db    0
.rdata$r:00006EDC                 db  40h ; @
.rdata$r:00006EDD                 db    0
.rdata$r:00006EDE                 db    0
.rdata$r:00006EDF                 db    0
.rdata$r:00006EE0                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006EE0 _rdata$r        ends
.rdata$r:00006EE0
.rdata$r:00006EE4 ; ===========================================================================
.rdata$r:00006EE4
.rdata$r:00006EE4 ; Segment type: Pure data
.rdata$r:00006EE4 ; Segment permissions: Read
.rdata$r:00006EE4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006EE4                 assume cs:_rdata$r
.rdata$r:00006EE4                 ;org 6EE4h
.rdata$r:00006EE4 ; COMDAT (pick any)
.rdata$r:00006EE4                 public ??_R4CDecoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@
.rdata$r:00006EE4 ; const NCrypto::NWzAes::CDecoder::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata$r:00006EE4 ??_R4CDecoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ db    0
.rdata$r:00006EE4                                         ; DATA XREF: .rdata:00006CD4o
.rdata$r:00006EE5                 db    0
.rdata$r:00006EE6                 db    0
.rdata$r:00006EE7                 db    0
.rdata$r:00006EE8                 db    4
.rdata$r:00006EE9                 db    0
.rdata$r:00006EEA                 db    0
.rdata$r:00006EEB                 db    0
.rdata$r:00006EEC                 db    0
.rdata$r:00006EED                 db    0
.rdata$r:00006EEE                 db    0
.rdata$r:00006EEF                 db    0
.rdata$r:00006EF0                 dd offset ??_R0?AVCDecoder@NWzAes@NCrypto@@@8 ; NCrypto::NWzAes::CDecoder `RTTI Type Descriptor'
.rdata$r:00006EF4                 dd offset ??_R3CDecoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006EF4 _rdata$r        ends
.rdata$r:00006EF4
.text:00006EF8 ; ===========================================================================
.text:00006EF8
.text:00006EF8 ; Segment type: Pure code
.text:00006EF8 ; Segment permissions: Read/Execute
.text:00006EF8 _text           segment para public 'CODE' use32
.text:00006EF8                 assume cs:_text
.text:00006EF8                 ;org 6EF8h
.text:00006EF8 ; COMDAT (pick any)
.text:00006EF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006EF8
.text:00006EF8 ; =============== S U B R O U T I N E =======================================
.text:00006EF8
.text:00006EF8 ; Attributes: bp-based frame
.text:00006EF8
.text:00006EF8 ; __int32 __stdcall NCrypto::NWzAes::CBaseCoder::QueryInterface(NCrypto::NWzAes::CBaseCoder *this, const struct _GUID *Buf1, void **)
.text:00006EF8                 public ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.text:00006EF8 ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00006EF8                                         ; CODE XREF: [thunk]:NCrypto::NWzAes::CBaseCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00006EF8                                         ; DATA XREF: .rdata:const NCrypto::NWzAes::CDecoder::`vftable'{for `ICompressFilter'}o ...
.text:00006EF8
.text:00006EF8 var_8           = dword ptr -8
.text:00006EF8 var_4           = dword ptr -4
.text:00006EF8 this            = dword ptr  8
.text:00006EF8 Buf1            = dword ptr  0Ch
.text:00006EF8 arg_8           = dword ptr  10h
.text:00006EF8
.text:00006EF8                 push    ebp
.text:00006EF9                 mov     ebp, esp
.text:00006EFB                 sub     esp, 8
.text:00006EFE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006F05                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006F0C                 mov     eax, [ebp+arg_8]
.text:00006F0F                 mov     dword ptr [eax], 0
.text:00006F15                 push    offset _IID_IUnknown ; Buf2
.text:00006F1A                 mov     ecx, [ebp+Buf1]
.text:00006F1D                 push    ecx             ; Buf1
.text:00006F1E                 call    ___@8           ; __(x,x)
.text:00006F23                 test    eax, eax
.text:00006F25                 jz      short loc_6F49
.text:00006F27                 cmp     [ebp+this], 0
.text:00006F2B                 jz      short loc_6F38
.text:00006F2D                 mov     edx, [ebp+this]
.text:00006F30                 add     edx, 4
.text:00006F33                 mov     [ebp+var_4], edx
.text:00006F36                 jmp     short loc_6F3F
.text:00006F38 ; ---------------------------------------------------------------------------
.text:00006F38
.text:00006F38 loc_6F38:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)+33j
.text:00006F38                 mov     [ebp+var_4], 0
.text:00006F3F
.text:00006F3F loc_6F3F:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)+3Ej
.text:00006F3F                 mov     eax, [ebp+arg_8]
.text:00006F42                 mov     ecx, [ebp+var_4]
.text:00006F45                 mov     [eax], ecx
.text:00006F47                 jmp     short loc_6F84
.text:00006F49 ; ---------------------------------------------------------------------------
.text:00006F49
.text:00006F49 loc_6F49:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)+2Dj
.text:00006F49                 push    offset _IID_ICryptoSetPassword ; Buf2
.text:00006F4E                 mov     edx, [ebp+Buf1]
.text:00006F51                 push    edx             ; Buf1
.text:00006F52                 call    ___@8           ; __(x,x)
.text:00006F57                 test    eax, eax
.text:00006F59                 jz      short loc_6F7D
.text:00006F5B                 cmp     [ebp+this], 0
.text:00006F5F                 jz      short loc_6F6C
.text:00006F61                 mov     eax, [ebp+this]
.text:00006F64                 add     eax, 4
.text:00006F67                 mov     [ebp+var_8], eax
.text:00006F6A                 jmp     short loc_6F73
.text:00006F6C ; ---------------------------------------------------------------------------
.text:00006F6C
.text:00006F6C loc_6F6C:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)+67j
.text:00006F6C                 mov     [ebp+var_8], 0
.text:00006F73
.text:00006F73 loc_6F73:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)+72j
.text:00006F73                 mov     ecx, [ebp+arg_8]
.text:00006F76                 mov     edx, [ebp+var_8]
.text:00006F79                 mov     [ecx], edx
.text:00006F7B                 jmp     short loc_6F84
.text:00006F7D ; ---------------------------------------------------------------------------
.text:00006F7D
.text:00006F7D loc_6F7D:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)+61j
.text:00006F7D                 mov     eax, 80004002h
.text:00006F82                 jmp     short loc_6F95
.text:00006F84 ; ---------------------------------------------------------------------------
.text:00006F84
.text:00006F84 loc_6F84:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)+4Fj
.text:00006F84                                         ; NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)+83j
.text:00006F84                 mov     eax, [ebp+this]
.text:00006F87                 mov     ecx, [eax+8]
.text:00006F8A                 add     ecx, 1
.text:00006F8D                 mov     edx, [ebp+this]
.text:00006F90                 mov     [edx+8], ecx
.text:00006F93                 xor     eax, eax
.text:00006F95
.text:00006F95 loc_6F95:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)+8Aj
.text:00006F95                 add     esp, 8
.text:00006F98                 cmp     ebp, esp
.text:00006F9A                 call    __RTC_CheckEsp
.text:00006F9F                 mov     esp, ebp
.text:00006FA1                 pop     ebp
.text:00006FA2                 retn    0Ch
.text:00006FA2 ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z endp
.text:00006FA2
.text:00006FA2 ; ---------------------------------------------------------------------------
.text:00006FA5                 align 4
.text:00006FA5 _text           ends
.text:00006FA5
.text:00006FA8 ; ===========================================================================
.text:00006FA8
.text:00006FA8 ; Segment type: Pure code
.text:00006FA8 ; Segment permissions: Read/Execute
.text:00006FA8 _text           segment para public 'CODE' use32
.text:00006FA8                 assume cs:_text
.text:00006FA8                 ;org 6FA8h
.text:00006FA8 ; COMDAT (pick any)
.text:00006FA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006FA8
.text:00006FA8 ; =============== S U B R O U T I N E =======================================
.text:00006FA8
.text:00006FA8 ; Attributes: bp-based frame
.text:00006FA8
.text:00006FA8 ; unsigned __int32 __stdcall NCrypto::NWzAes::CBaseCoder::AddRef(NCrypto::NWzAes::CBaseCoder *this)
.text:00006FA8                 public ?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ
.text:00006FA8 ?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ proc near
.text:00006FA8                                         ; CODE XREF: [thunk]:NCrypto::NWzAes::CBaseCoder::AddRef`adjustor{4}' (void)+5j
.text:00006FA8                                         ; DATA XREF: .rdata:00006CF0o ...
.text:00006FA8
.text:00006FA8 var_4           = dword ptr -4
.text:00006FA8 this            = dword ptr  8
.text:00006FA8
.text:00006FA8                 push    ebp
.text:00006FA9                 mov     ebp, esp
.text:00006FAB                 push    ecx
.text:00006FAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006FB3                 mov     eax, [ebp+this]
.text:00006FB6                 mov     ecx, [eax+8]
.text:00006FB9                 add     ecx, 1
.text:00006FBC                 mov     [ebp+var_4], ecx
.text:00006FBF                 mov     edx, [ebp+this]
.text:00006FC2                 mov     eax, [ebp+var_4]
.text:00006FC5                 mov     [edx+8], eax
.text:00006FC8                 mov     eax, [ebp+var_4]
.text:00006FCB                 mov     esp, ebp
.text:00006FCD                 pop     ebp
.text:00006FCE                 retn    4
.text:00006FCE ?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ endp
.text:00006FCE
.text:00006FCE ; ---------------------------------------------------------------------------
.text:00006FD1                 align 4
.text:00006FD1 _text           ends
.text:00006FD1
.text:00006FD4 ; ===========================================================================
.text:00006FD4
.text:00006FD4 ; Segment type: Pure code
.text:00006FD4 ; Segment permissions: Read/Execute
.text:00006FD4 _text           segment para public 'CODE' use32
.text:00006FD4                 assume cs:_text
.text:00006FD4                 ;org 6FD4h
.text:00006FD4 ; COMDAT (pick any)
.text:00006FD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006FD4
.text:00006FD4 ; =============== S U B R O U T I N E =======================================
.text:00006FD4
.text:00006FD4 ; Attributes: bp-based frame
.text:00006FD4
.text:00006FD4 ; unsigned __int32 __stdcall NCrypto::NWzAes::CBaseCoder::Release(NCrypto::NWzAes::CBaseCoder *this)
.text:00006FD4                 public ?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ
.text:00006FD4 ?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ proc near
.text:00006FD4                                         ; CODE XREF: [thunk]:NCrypto::NWzAes::CBaseCoder::Release`adjustor{4}' (void)+5j
.text:00006FD4                                         ; DATA XREF: .rdata:00006CF4o ...
.text:00006FD4
.text:00006FD4 var_10          = dword ptr -10h
.text:00006FD4 var_C           = dword ptr -0Ch
.text:00006FD4 var_8           = dword ptr -8
.text:00006FD4 var_4           = dword ptr -4
.text:00006FD4 this            = dword ptr  8
.text:00006FD4
.text:00006FD4                 push    ebp
.text:00006FD5                 mov     ebp, esp
.text:00006FD7                 sub     esp, 10h
.text:00006FDA                 mov     eax, 0CCCCCCCCh
.text:00006FDF                 mov     [ebp+var_10], eax
.text:00006FE2                 mov     [ebp+var_C], eax
.text:00006FE5                 mov     [ebp+var_8], eax
.text:00006FE8                 mov     [ebp+var_4], eax
.text:00006FEB                 mov     eax, [ebp+this]
.text:00006FEE                 mov     ecx, [eax+8]
.text:00006FF1                 sub     ecx, 1
.text:00006FF4                 mov     [ebp+var_C], ecx
.text:00006FF7                 mov     edx, [ebp+this]
.text:00006FFA                 mov     eax, [ebp+var_C]
.text:00006FFD                 mov     [edx+8], eax
.text:00007000                 cmp     [ebp+var_C], 0
.text:00007004                 jz      short loc_700E
.text:00007006                 mov     ecx, [ebp+this]
.text:00007009                 mov     eax, [ecx+8]
.text:0000700C                 jmp     short loc_7038
.text:0000700E ; ---------------------------------------------------------------------------
.text:0000700E
.text:0000700E loc_700E:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Release(void)+30j
.text:0000700E                 mov     edx, [ebp+this]
.text:00007011                 mov     [ebp+var_8], edx
.text:00007014                 mov     eax, [ebp+var_8]
.text:00007017                 mov     [ebp+var_4], eax
.text:0000701A                 cmp     [ebp+var_4], 0
.text:0000701E                 jz      short loc_702F
.text:00007020                 push    1
.text:00007022                 mov     ecx, [ebp+var_4]
.text:00007025                 call    ??_GCBaseCoder@NWzAes@NCrypto@@QAEPAXI@Z ; NCrypto::NWzAes::CBaseCoder::`scalar deleting destructor'(uint)
.text:0000702A                 mov     [ebp+var_10], eax
.text:0000702D                 jmp     short loc_7036
.text:0000702F ; ---------------------------------------------------------------------------
.text:0000702F
.text:0000702F loc_702F:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Release(void)+4Aj
.text:0000702F                 mov     [ebp+var_10], 0
.text:00007036
.text:00007036 loc_7036:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Release(void)+59j
.text:00007036                 xor     eax, eax
.text:00007038
.text:00007038 loc_7038:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Release(void)+38j
.text:00007038                 add     esp, 10h
.text:0000703B                 cmp     ebp, esp
.text:0000703D                 call    __RTC_CheckEsp
.text:00007042                 mov     esp, ebp
.text:00007044                 pop     ebp
.text:00007045                 retn    4
.text:00007045 ?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ endp
.text:00007045
.text:00007045 _text           ends
.text:00007045
.text:00007048 ; ===========================================================================
.text:00007048
.text:00007048 ; Segment type: Pure code
.text:00007048 ; Segment permissions: Read/Execute
.text:00007048 _text           segment para public 'CODE' use32
.text:00007048                 assume cs:_text
.text:00007048                 ;org 7048h
.text:00007048 ; COMDAT (pick any)
.text:00007048                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007048
.text:00007048 ; =============== S U B R O U T I N E =======================================
.text:00007048
.text:00007048 ; Attributes: bp-based frame
.text:00007048
.text:00007048 ; public: void * __thiscall NCrypto::NWzAes::CBaseCoder::`scalar deleting destructor'(unsigned int)
.text:00007048                 public ??_GCBaseCoder@NWzAes@NCrypto@@QAEPAXI@Z
.text:00007048 ??_GCBaseCoder@NWzAes@NCrypto@@QAEPAXI@Z proc near
.text:00007048                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::Release(void)+51p
.text:00007048
.text:00007048 var_4           = dword ptr -4
.text:00007048 arg_0           = dword ptr  8
.text:00007048
.text:00007048                 push    ebp
.text:00007049                 mov     ebp, esp
.text:0000704B                 push    ecx
.text:0000704C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007053                 mov     [ebp+var_4], ecx
.text:00007056                 mov     ecx, [ebp+var_4] ; this
.text:00007059                 call    ??1CBaseCoder@NWzAes@NCrypto@@QAE@XZ ; NCrypto::NWzAes::CBaseCoder::~CBaseCoder(void)
.text:0000705E                 mov     eax, [ebp+arg_0]
.text:00007061                 and     eax, 1
.text:00007064                 jz      short loc_7072
.text:00007066                 mov     ecx, [ebp+var_4]
.text:00007069                 push    ecx             ; void *
.text:0000706A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000706F                 add     esp, 4
.text:00007072
.text:00007072 loc_7072:                               ; CODE XREF: NCrypto::NWzAes::CBaseCoder::`scalar deleting destructor'(uint)+1Cj
.text:00007072                 mov     eax, [ebp+var_4]
.text:00007075                 add     esp, 4
.text:00007078                 cmp     ebp, esp
.text:0000707A                 call    __RTC_CheckEsp
.text:0000707F                 mov     esp, ebp
.text:00007081                 pop     ebp
.text:00007082                 retn    4
.text:00007082 ??_GCBaseCoder@NWzAes@NCrypto@@QAEPAXI@Z endp
.text:00007082
.text:00007082 ; ---------------------------------------------------------------------------
.text:00007085                 align 4
.text:00007085 _text           ends
.text:00007085
.text:00007088 ; ===========================================================================
.text:00007088
.text:00007088 ; Segment type: Pure code
.text:00007088 ; Segment permissions: Read/Execute
.text:00007088 _text           segment para public 'CODE' use32
.text:00007088                 assume cs:_text
.text:00007088                 ;org 7088h
.text:00007088 ; COMDAT (pick any)
.text:00007088                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007088
.text:00007088 ; =============== S U B R O U T I N E =======================================
.text:00007088
.text:00007088 ; Attributes: bp-based frame
.text:00007088
.text:00007088 ; _DWORD __thiscall NCrypto::NWzAes::CBaseCoder::~CBaseCoder(NCrypto::NWzAes::CBaseCoder *__hidden this)
.text:00007088                 public ??1CBaseCoder@NWzAes@NCrypto@@QAE@XZ
.text:00007088 ??1CBaseCoder@NWzAes@NCrypto@@QAE@XZ proc near
.text:00007088                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::`scalar deleting destructor'(uint)+11p
.text:00007088
.text:00007088 var_4           = dword ptr -4
.text:00007088
.text:00007088                 push    ebp
.text:00007089                 mov     ebp, esp
.text:0000708B                 push    ecx
.text:0000708C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007093                 mov     [ebp+var_4], ecx
.text:00007096                 mov     ecx, [ebp+var_4]
.text:00007099                 add     ecx, 0Ch        ; this
.text:0000709C                 call    ??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ ; NCrypto::NWzAes::CKeyInfo::~CKeyInfo(void)
.text:000070A1                 add     esp, 4
.text:000070A4                 cmp     ebp, esp
.text:000070A6                 call    __RTC_CheckEsp
.text:000070AB                 mov     esp, ebp
.text:000070AD                 pop     ebp
.text:000070AE                 retn
.text:000070AE ??1CBaseCoder@NWzAes@NCrypto@@QAE@XZ endp
.text:000070AE
.text:000070AE ; ---------------------------------------------------------------------------
.text:000070AF                 align 10h
.text:000070AF _text           ends
.text:000070AF
.text:000070B0 ; ===========================================================================
.text:000070B0
.text:000070B0 ; Segment type: Pure code
.text:000070B0 ; Segment permissions: Read/Execute
.text:000070B0 _text           segment para public 'CODE' use32
.text:000070B0                 assume cs:_text
.text:000070B0                 ;org 70B0h
.text:000070B0 ; COMDAT (pick any)
.text:000070B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000070B0
.text:000070B0 ; =============== S U B R O U T I N E =======================================
.text:000070B0
.text:000070B0 ; Attributes: bp-based frame
.text:000070B0
.text:000070B0 ; _DWORD __thiscall NCrypto::NWzAes::CKeyInfo::~CKeyInfo(NCrypto::NWzAes::CKeyInfo *__hidden this)
.text:000070B0                 public ??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ
.text:000070B0 ??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ proc near
.text:000070B0                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::~CBaseCoder(void)+14p
.text:000070B0                                         ; __unwindfunclet$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ$0+6j
.text:000070B0
.text:000070B0 var_4           = dword ptr -4
.text:000070B0
.text:000070B0                 push    ebp
.text:000070B1                 mov     ebp, esp
.text:000070B3                 push    ecx
.text:000070B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000070BB                 mov     [ebp+var_4], ecx
.text:000070BE                 mov     ecx, [ebp+var_4]
.text:000070C1                 add     ecx, 18h
.text:000070C4                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:000070C9                 add     esp, 4
.text:000070CC                 cmp     ebp, esp
.text:000070CE                 call    __RTC_CheckEsp
.text:000070D3                 mov     esp, ebp
.text:000070D5                 pop     ebp
.text:000070D6                 retn
.text:000070D6 ??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ endp
.text:000070D6
.text:000070D6 ; ---------------------------------------------------------------------------
.text:000070D7                 align 4
.text:000070D7 _text           ends
.text:000070D7
.text:000070D8 ; ===========================================================================
.text:000070D8
.text:000070D8 ; Segment type: Pure code
.text:000070D8 ; Segment permissions: Read/Execute
.text:000070D8 _text           segment para public 'CODE' use32
.text:000070D8                 assume cs:_text
.text:000070D8                 ;org 70D8h
.text:000070D8 ; COMDAT (pick any)
.text:000070D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000070D8
.text:000070D8 ; =============== S U B R O U T I N E =======================================
.text:000070D8
.text:000070D8 ; Attributes: bp-based frame
.text:000070D8
.text:000070D8 ; _DWORD __thiscall NCrypto::NZipStrong::CDecoder::CDecoder(NCrypto::NZipStrong::CDecoder *__hidden this)
.text:000070D8                 public ??0CDecoder@NZipStrong@NCrypto@@QAE@XZ
.text:000070D8 ??0CDecoder@NZipStrong@NCrypto@@QAE@XZ proc near
.text:000070D8                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+438p
.text:000070D8
.text:000070D8 var_4           = dword ptr -4
.text:000070D8
.text:000070D8                 push    ebp
.text:000070D9                 mov     ebp, esp
.text:000070DB                 push    ecx
.text:000070DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000070E3                 mov     [ebp+var_4], ecx
.text:000070E6                 mov     ecx, [ebp+var_4] ; this
.text:000070E9                 call    ??0CBaseCoder@NZipStrong@NCrypto@@QAE@XZ ; NCrypto::NZipStrong::CBaseCoder::CBaseCoder(void)
.text:000070EE                 mov     eax, [ebp+var_4]
.text:000070F1                 mov     dword ptr [eax], offset ??_7CDecoder@NZipStrong@NCrypto@@6BICompressFilter@@@ ; const NCrypto::NZipStrong::CDecoder::`vftable'{for `ICompressFilter'}
.text:000070F7                 mov     ecx, [ebp+var_4]
.text:000070FA                 mov     dword ptr [ecx+4], offset ??_7CDecoder@NZipStrong@NCrypto@@6BICryptoProperties@@@ ; const NCrypto::NZipStrong::CDecoder::`vftable'{for `ICryptoProperties'}
.text:00007101                 mov     edx, [ebp+var_4]
.text:00007104                 mov     dword ptr [edx+8], offset ??_7CDecoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@ ; const NCrypto::NZipStrong::CDecoder::`vftable'{for `ICompressSetCoderProperties'}
.text:0000710B                 mov     eax, [ebp+var_4]
.text:0000710E                 mov     dword ptr [eax+14Ch], offset ??_7CDecoder@NZipStrong@NCrypto@@6B@ ; const NCrypto::NZipStrong::CDecoder::`vftable'
.text:00007118                 mov     eax, [ebp+var_4]
.text:0000711B                 add     esp, 4
.text:0000711E                 cmp     ebp, esp
.text:00007120                 call    __RTC_CheckEsp
.text:00007125                 mov     esp, ebp
.text:00007127                 pop     ebp
.text:00007128                 retn
.text:00007128 ??0CDecoder@NZipStrong@NCrypto@@QAE@XZ endp
.text:00007128
.text:00007128 ; ---------------------------------------------------------------------------
.text:00007129                 align 4
.text:00007129 _text           ends
.text:00007129
.rdata:0000712C ; ===========================================================================
.rdata:0000712C
.rdata:0000712C ; Segment type: Pure data
.rdata:0000712C ; Segment permissions: Read
.rdata:0000712C _rdata          segment dword public 'DATA' use32
.rdata:0000712C                 assume cs:_rdata
.rdata:0000712C                 ;org 712Ch
.rdata:0000712C ; COMDAT (pick largest)
.rdata:0000712C                 dd offset ??_R4CDecoder@NZipStrong@NCrypto@@6B@ ; const NCrypto::NZipStrong::CDecoder::`RTTI Complete Object Locator'
.rdata:00007130                 public ??_7CDecoder@NZipStrong@NCrypto@@6B@
.rdata:00007130 ; const NCrypto::NZipStrong::CDecoder::`vftable'
.rdata:00007130 ??_7CDecoder@NZipStrong@NCrypto@@6B@ dd offset ?QueryInterface@CDecoder@NZipStrong@NCrypto@@WBEM@AGJABU_GUID@@PAPAX@Z
.rdata:00007130                                         ; DATA XREF: NCrypto::NZipStrong::CDecoder::CDecoder(void)+36o
.rdata:00007130                                         ; [thunk]:NCrypto::NZipStrong::CDecoder::QueryInterface`adjustor{332}' (_GUID const &,void * *)
.rdata:00007134                 dd offset ?AddRef@CDecoder@NZipStrong@NCrypto@@WBEM@AGKXZ ; [thunk]:NCrypto::NZipStrong::CDecoder::AddRef`adjustor{332}' (void)
.rdata:00007138                 dd offset ?Release@CDecoder@NZipStrong@NCrypto@@WBEM@AGKXZ ; [thunk]:NCrypto::NZipStrong::CDecoder::Release`adjustor{332}' (void)
.rdata:0000713C                 dd offset ?CryptoSetPassword@CBaseCoder@NZipStrong@NCrypto@@UAGJPBEI@Z ; NCrypto::NZipStrong::CBaseCoder::CryptoSetPassword(uchar const *,uint)
.rdata:0000713C _rdata          ends
.rdata:0000713C
.rdata:00007140 ; ===========================================================================
.rdata:00007140
.rdata:00007140 ; Segment type: Pure data
.rdata:00007140 ; Segment permissions: Read
.rdata:00007140 _rdata          segment dword public 'DATA' use32
.rdata:00007140                 assume cs:_rdata
.rdata:00007140                 ;org 7140h
.rdata:00007140 ; COMDAT (pick largest)
.rdata:00007140                 dd offset ??_R4CDecoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@ ; const NCrypto::NZipStrong::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:00007144                 public ??_7CDecoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@
.rdata:00007144 ; const NCrypto::NZipStrong::CDecoder::`vftable'{for `ICompressSetCoderProperties'}
.rdata:00007144 ??_7CDecoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CDecoder@NZipStrong@NCrypto@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00007144                                         ; DATA XREF: NCrypto::NZipStrong::CDecoder::CDecoder(void)+2Co
.rdata:00007144                                         ; [thunk]:NCrypto::NZipStrong::CDecoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00007148                 dd offset ?AddRef@CDecoder@NZipStrong@NCrypto@@W7AGKXZ ; [thunk]:NCrypto::NZipStrong::CDecoder::AddRef`adjustor{8}' (void)
.rdata:0000714C                 dd offset ?Release@CDecoder@NZipStrong@NCrypto@@W7AGKXZ ; [thunk]:NCrypto::NZipStrong::CDecoder::Release`adjustor{8}' (void)
.rdata:00007150                 dd offset ?SetCoderProperties@CAesCbcCoder@NCrypto@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; NCrypto::CAesCbcCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:00007150 _rdata          ends
.rdata:00007150
.rdata:00007154 ; ===========================================================================
.rdata:00007154
.rdata:00007154 ; Segment type: Pure data
.rdata:00007154 ; Segment permissions: Read
.rdata:00007154 _rdata          segment dword public 'DATA' use32
.rdata:00007154                 assume cs:_rdata
.rdata:00007154                 ;org 7154h
.rdata:00007154 ; COMDAT (pick largest)
.rdata:00007154                 dd offset ??_R4CDecoder@NZipStrong@NCrypto@@6BICryptoProperties@@@ ; const NCrypto::NZipStrong::CDecoder::`RTTI Complete Object Locator'{for `ICryptoProperties'}
.rdata:00007158                 public ??_7CDecoder@NZipStrong@NCrypto@@6BICryptoProperties@@@
.rdata:00007158 ; const NCrypto::NZipStrong::CDecoder::`vftable'{for `ICryptoProperties'}
.rdata:00007158 ??_7CDecoder@NZipStrong@NCrypto@@6BICryptoProperties@@@ dd offset ?QueryInterface@CDecoder@NZipStrong@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00007158                                         ; DATA XREF: NCrypto::NZipStrong::CDecoder::CDecoder(void)+22o
.rdata:00007158                                         ; [thunk]:NCrypto::NZipStrong::CDecoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:0000715C                 dd offset ?AddRef@CDecoder@NZipStrong@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::NZipStrong::CDecoder::AddRef`adjustor{4}' (void)
.rdata:00007160                 dd offset ?Release@CDecoder@NZipStrong@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::NZipStrong::CDecoder::Release`adjustor{4}' (void)
.rdata:00007164                 dd offset ?SetKey@CAesCbcCoder@NCrypto@@UAGJPBEI@Z ; NCrypto::CAesCbcCoder::SetKey(uchar const *,uint)
.rdata:00007168                 dd offset ?SetInitVector@CAesCbcCoder@NCrypto@@UAGJPBEI@Z ; NCrypto::CAesCbcCoder::SetInitVector(uchar const *,uint)
.rdata:00007168 _rdata          ends
.rdata:00007168
.rdata:0000716C ; ===========================================================================
.rdata:0000716C
.rdata:0000716C ; Segment type: Pure data
.rdata:0000716C ; Segment permissions: Read
.rdata:0000716C _rdata          segment dword public 'DATA' use32
.rdata:0000716C                 assume cs:_rdata
.rdata:0000716C                 ;org 716Ch
.rdata:0000716C ; COMDAT (pick largest)
.rdata:0000716C                 dd offset ??_R4CDecoder@NZipStrong@NCrypto@@6BICompressFilter@@@ ; const NCrypto::NZipStrong::CDecoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:00007170                 public ??_7CDecoder@NZipStrong@NCrypto@@6BICompressFilter@@@
.rdata:00007170 ; const NCrypto::NZipStrong::CDecoder::`vftable'{for `ICompressFilter'}
.rdata:00007170 ??_7CDecoder@NZipStrong@NCrypto@@6BICompressFilter@@@ dd offset ?QueryInterface@CDecoder@NZipStrong@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.rdata:00007170                                         ; DATA XREF: NCrypto::NZipStrong::CDecoder::CDecoder(void)+19o
.rdata:00007170                                         ; NCrypto::NZipStrong::CDecoder::QueryInterface(_GUID const &,void * *)
.rdata:00007174                 dd offset ?AddRef@CDecoder@NZipStrong@NCrypto@@UAGKXZ ; NCrypto::NZipStrong::CDecoder::AddRef(void)
.rdata:00007178                 dd offset ?Release@CDecoder@NZipStrong@NCrypto@@UAGKXZ ; NCrypto::NZipStrong::CDecoder::Release(void)
.rdata:0000717C                 dd offset ?Init@CBaseCoder@NZipStrong@NCrypto@@UAGJXZ ; NCrypto::NZipStrong::CBaseCoder::Init(void)
.rdata:00007180                 dd offset ?Filter@CAesCbcCoder@NCrypto@@UAGIPAEI@Z ; NCrypto::CAesCbcCoder::Filter(uchar *,uint)
.rdata:00007180 _rdata          ends
.rdata:00007180
.rdata$r:00007184 ; ===========================================================================
.rdata$r:00007184
.rdata$r:00007184 ; Segment type: Pure data
.rdata$r:00007184 ; Segment permissions: Read
.rdata$r:00007184 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007184                 assume cs:_rdata$r
.rdata$r:00007184                 ;org 7184h
.rdata$r:00007184 ; COMDAT (pick any)
.rdata$r:00007184                 public ??_R4CDecoder@NZipStrong@NCrypto@@6BICompressFilter@@@
.rdata$r:00007184 ; const NCrypto::NZipStrong::CDecoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:00007184 ??_R4CDecoder@NZipStrong@NCrypto@@6BICompressFilter@@@ db    0
.rdata$r:00007184                                         ; DATA XREF: .rdata:0000716Co
.rdata$r:00007185                 db    0
.rdata$r:00007186                 db    0
.rdata$r:00007187                 db    0
.rdata$r:00007188                 db    0
.rdata$r:00007189                 db    0
.rdata$r:0000718A                 db    0
.rdata$r:0000718B                 db    0
.rdata$r:0000718C                 db    0
.rdata$r:0000718D                 db    0
.rdata$r:0000718E                 db    0
.rdata$r:0000718F                 db    0
.rdata$r:00007190                 dd offset ??_R0?AVCDecoder@NZipStrong@NCrypto@@@8 ; NCrypto::NZipStrong::CDecoder `RTTI Type Descriptor'
.rdata$r:00007194                 dd offset ??_R3CDecoder@NZipStrong@NCrypto@@8 ; NCrypto::NZipStrong::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007194 _rdata$r        ends
.rdata$r:00007194
.data:00007198 ; ===========================================================================
.data:00007198
.data:00007198 ; Segment type: Pure data
.data:00007198 ; Segment permissions: Read/Write
.data:00007198 _data           segment dword public 'DATA' use32
.data:00007198                 assume cs:_data
.data:00007198                 ;org 7198h
.data:00007198 ; COMDAT (pick any)
.data:00007198                 public ??_R0?AVCDecoder@NZipStrong@NCrypto@@@8
.data:00007198 ; class NCrypto::NZipStrong::CDecoder `RTTI Type Descriptor'
.data:00007198 ??_R0?AVCDecoder@NZipStrong@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:00007198                                         ; DATA XREF: .rdata$r:00007190o
.data:00007198                                         ; .rdata$r:NCrypto::NZipStrong::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00007198                                         ; const type_info::`vftable'
.data:0000719C                 align 10h
.data:000071A0 a_?avcdecoder@n db '.?AVCDecoder@NZipStrong@NCrypto@@',0
.data:000071C2                 align 4
.data:000071C2 _data           ends
.data:000071C2
.rdata$r:000071C4 ; ===========================================================================
.rdata$r:000071C4
.rdata$r:000071C4 ; Segment type: Pure data
.rdata$r:000071C4 ; Segment permissions: Read
.rdata$r:000071C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000071C4                 assume cs:_rdata$r
.rdata$r:000071C4                 ;org 71C4h
.rdata$r:000071C4 ; COMDAT (pick any)
.rdata$r:000071C4                 public ??_R3CDecoder@NZipStrong@NCrypto@@8
.rdata$r:000071C4 ; NCrypto::NZipStrong::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000071C4 ??_R3CDecoder@NZipStrong@NCrypto@@8 db    0
.rdata$r:000071C4                                         ; DATA XREF: .rdata$r:00007194o
.rdata$r:000071C4                                         ; .rdata$r:00007224o ...
.rdata$r:000071C5                 db    0
.rdata$r:000071C6                 db    0
.rdata$r:000071C7                 db    0
.rdata$r:000071C8                 db    1
.rdata$r:000071C9                 db    0
.rdata$r:000071CA                 db    0
.rdata$r:000071CB                 db    0
.rdata$r:000071CC                 db  0Dh
.rdata$r:000071CD                 db    0
.rdata$r:000071CE                 db    0
.rdata$r:000071CF                 db    0
.rdata$r:000071D0                 dd offset ??_R2CDecoder@NZipStrong@NCrypto@@8 ; NCrypto::NZipStrong::CDecoder::`RTTI Base Class Array'
.rdata$r:000071D0 _rdata$r        ends
.rdata$r:000071D0
.rdata$r:000071D4 ; ===========================================================================
.rdata$r:000071D4
.rdata$r:000071D4 ; Segment type: Pure data
.rdata$r:000071D4 ; Segment permissions: Read
.rdata$r:000071D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000071D4                 assume cs:_rdata$r
.rdata$r:000071D4                 ;org 71D4h
.rdata$r:000071D4 ; COMDAT (pick any)
.rdata$r:000071D4                 public ??_R2CDecoder@NZipStrong@NCrypto@@8
.rdata$r:000071D4 ; NCrypto::NZipStrong::CDecoder::`RTTI Base Class Array'
.rdata$r:000071D4 ??_R2CDecoder@NZipStrong@NCrypto@@8 dd offset ??_R1A@?0A@EA@CDecoder@NZipStrong@NCrypto@@8
.rdata$r:000071D4                                         ; DATA XREF: .rdata$r:000071D0o
.rdata$r:000071D4                                         ; NCrypto::NZipStrong::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000071D8                 dd offset ??_R1A@?0A@EA@CBaseCoder@NZipStrong@NCrypto@@8 ; NCrypto::NZipStrong::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000071DC                 dd offset ??_R1A@?0A@EA@CAesCbcDecoder@NCrypto@@8 ; NCrypto::CAesCbcDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000071E0                 dd offset ??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8 ; NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000071E4                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000071E8                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:000071EC                 dd offset ??_R13?0A@EA@ICryptoProperties@@8 ; ICryptoProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000071F0                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:000071F4                 dd offset ??_R17?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:000071F8                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:000071FC                 dd offset ??_R1M@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00007200                 dd offset ??_R1BEM@?0A@EA@ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (332,-1,0,64)'
.rdata$r:00007204                 dd offset ??_R1BEM@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (332,-1,0,66)'
.rdata$r:00007208                 db    0
.rdata$r:00007209                 align 4
.rdata$r:00007209 _rdata$r        ends
.rdata$r:00007209
.rdata$r:0000720C ; ===========================================================================
.rdata$r:0000720C
.rdata$r:0000720C ; Segment type: Pure data
.rdata$r:0000720C ; Segment permissions: Read
.rdata$r:0000720C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000720C                 assume cs:_rdata$r
.rdata$r:0000720C                 ;org 720Ch
.rdata$r:0000720C ; COMDAT (pick any)
.rdata$r:0000720C                 public ??_R1A@?0A@EA@CDecoder@NZipStrong@NCrypto@@8
.rdata$r:0000720C ; NCrypto::NZipStrong::CDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000720C ??_R1A@?0A@EA@CDecoder@NZipStrong@NCrypto@@8 dd offset ??_R0?AVCDecoder@NZipStrong@NCrypto@@@8
.rdata$r:0000720C                                         ; DATA XREF: .rdata$r:NCrypto::NZipStrong::CDecoder::`RTTI Base Class Array'o
.rdata$r:0000720C                                         ; NCrypto::NZipStrong::CDecoder `RTTI Type Descriptor'
.rdata$r:00007210                 db  0Ch
.rdata$r:00007211                 db    0
.rdata$r:00007212                 db    0
.rdata$r:00007213                 db    0
.rdata$r:00007214                 db    0
.rdata$r:00007215                 db    0
.rdata$r:00007216                 db    0
.rdata$r:00007217                 db    0
.rdata$r:00007218                 db 0FFh
.rdata$r:00007219                 db 0FFh
.rdata$r:0000721A                 db 0FFh
.rdata$r:0000721B                 db 0FFh
.rdata$r:0000721C                 db    0
.rdata$r:0000721D                 db    0
.rdata$r:0000721E                 db    0
.rdata$r:0000721F                 db    0
.rdata$r:00007220                 db  40h ; @
.rdata$r:00007221                 db    0
.rdata$r:00007222                 db    0
.rdata$r:00007223                 db    0
.rdata$r:00007224                 dd offset ??_R3CDecoder@NZipStrong@NCrypto@@8 ; NCrypto::NZipStrong::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007224 _rdata$r        ends
.rdata$r:00007224
.rdata$r:00007228 ; ===========================================================================
.rdata$r:00007228
.rdata$r:00007228 ; Segment type: Pure data
.rdata$r:00007228 ; Segment permissions: Read
.rdata$r:00007228 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007228                 assume cs:_rdata$r
.rdata$r:00007228                 ;org 7228h
.rdata$r:00007228 ; COMDAT (pick any)
.rdata$r:00007228                 public ??_R1A@?0A@EA@CBaseCoder@NZipStrong@NCrypto@@8
.rdata$r:00007228 ; NCrypto::NZipStrong::CBaseCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007228 ??_R1A@?0A@EA@CBaseCoder@NZipStrong@NCrypto@@8 dd offset ??_R0?AVCBaseCoder@NZipStrong@NCrypto@@@8
.rdata$r:00007228                                         ; DATA XREF: .rdata$r:000071D8o
.rdata$r:00007228                                         ; .rdata$r:NCrypto::NZipStrong::CBaseCoder::`RTTI Base Class Array'o
.rdata$r:00007228                                         ; NCrypto::NZipStrong::CBaseCoder `RTTI Type Descriptor'
.rdata$r:0000722C                 db  0Bh
.rdata$r:0000722D                 db    0
.rdata$r:0000722E                 db    0
.rdata$r:0000722F                 db    0
.rdata$r:00007230                 db    0
.rdata$r:00007231                 db    0
.rdata$r:00007232                 db    0
.rdata$r:00007233                 db    0
.rdata$r:00007234                 db 0FFh
.rdata$r:00007235                 db 0FFh
.rdata$r:00007236                 db 0FFh
.rdata$r:00007237                 db 0FFh
.rdata$r:00007238                 db    0
.rdata$r:00007239                 db    0
.rdata$r:0000723A                 db    0
.rdata$r:0000723B                 db    0
.rdata$r:0000723C                 db  40h ; @
.rdata$r:0000723D                 db    0
.rdata$r:0000723E                 db    0
.rdata$r:0000723F                 db    0
.rdata$r:00007240                 dd offset ??_R3CBaseCoder@NZipStrong@NCrypto@@8 ; NCrypto::NZipStrong::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007240 _rdata$r        ends
.rdata$r:00007240
.data:00007244 ; ===========================================================================
.data:00007244
.data:00007244 ; Segment type: Pure data
.data:00007244 ; Segment permissions: Read/Write
.data:00007244 _data           segment dword public 'DATA' use32
.data:00007244                 assume cs:_data
.data:00007244                 ;org 7244h
.data:00007244 ; COMDAT (pick any)
.data:00007244                 public ??_R0?AVCBaseCoder@NZipStrong@NCrypto@@@8
.data:00007244 ; class NCrypto::NZipStrong::CBaseCoder `RTTI Type Descriptor'
.data:00007244 ??_R0?AVCBaseCoder@NZipStrong@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:00007244                                         ; DATA XREF: .rdata$r:NCrypto::NZipStrong::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00007244                                         ; .rdata$r:0000809Co ...
.data:00007244                                         ; const type_info::`vftable'
.data:00007248                 db    0
.data:00007249                 db    0
.data:0000724A                 db    0
.data:0000724B                 db    0
.data:0000724C                 db  2Eh ; .
.data:0000724D                 db  3Fh ; ?
.data:0000724E                 db  41h ; A
.data:0000724F                 db  56h ; V
.data:00007250                 db  43h ; C
.data:00007251                 db  42h ; B
.data:00007252                 db  61h ; a
.data:00007253                 db  73h ; s
.data:00007254                 db  65h ; e
.data:00007255                 db  43h ; C
.data:00007256                 db  6Fh ; o
.data:00007257                 db  64h ; d
.data:00007258                 db  65h ; e
.data:00007259                 db  72h ; r
.data:0000725A                 db  40h ; @
.data:0000725B                 db  4Eh ; N
.data:0000725C                 db  5Ah ; Z
.data:0000725D                 db  69h ; i
.data:0000725E                 db  70h ; p
.data:0000725F                 db  53h ; S
.data:00007260                 db  74h ; t
.data:00007261                 db  72h ; r
.data:00007262                 db  6Fh ; o
.data:00007263                 db  6Eh ; n
.data:00007264                 db  67h ; g
.data:00007265                 db  40h ; @
.data:00007266                 db  4Eh ; N
.data:00007267                 db  43h ; C
.data:00007268                 db  72h ; r
.data:00007269                 db  79h ; y
.data:0000726A                 db  70h ; p
.data:0000726B                 db  74h ; t
.data:0000726C                 db  6Fh ; o
.data:0000726D                 db  40h ; @
.data:0000726E                 db  40h ; @
.data:0000726F                 db    0
.data:0000726F _data           ends
.data:0000726F
.rdata$r:00007270 ; ===========================================================================
.rdata$r:00007270
.rdata$r:00007270 ; Segment type: Pure data
.rdata$r:00007270 ; Segment permissions: Read
.rdata$r:00007270 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007270                 assume cs:_rdata$r
.rdata$r:00007270                 ;org 7270h
.rdata$r:00007270 ; COMDAT (pick any)
.rdata$r:00007270                 public ??_R3CBaseCoder@NZipStrong@NCrypto@@8
.rdata$r:00007270 ; NCrypto::NZipStrong::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007270 ??_R3CBaseCoder@NZipStrong@NCrypto@@8 db    0
.rdata$r:00007270                                         ; DATA XREF: .rdata$r:00007240o
.rdata$r:00007270                                         ; .rdata$r:000080A0o ...
.rdata$r:00007271                 db    0
.rdata$r:00007272                 db    0
.rdata$r:00007273                 db    0
.rdata$r:00007274                 db    5
.rdata$r:00007275                 db    0
.rdata$r:00007276                 db    0
.rdata$r:00007277                 db    0
.rdata$r:00007278                 db  0Ch
.rdata$r:00007279                 db    0
.rdata$r:0000727A                 db    0
.rdata$r:0000727B                 db    0
.rdata$r:0000727C                 dd offset ??_R2CBaseCoder@NZipStrong@NCrypto@@8 ; NCrypto::NZipStrong::CBaseCoder::`RTTI Base Class Array'
.rdata$r:0000727C _rdata$r        ends
.rdata$r:0000727C
.rdata$r:00007280 ; ===========================================================================
.rdata$r:00007280
.rdata$r:00007280 ; Segment type: Pure data
.rdata$r:00007280 ; Segment permissions: Read
.rdata$r:00007280 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007280                 assume cs:_rdata$r
.rdata$r:00007280                 ;org 7280h
.rdata$r:00007280 ; COMDAT (pick any)
.rdata$r:00007280                 public ??_R2CBaseCoder@NZipStrong@NCrypto@@8
.rdata$r:00007280 ; NCrypto::NZipStrong::CBaseCoder::`RTTI Base Class Array'
.rdata$r:00007280 ??_R2CBaseCoder@NZipStrong@NCrypto@@8 dd offset ??_R1A@?0A@EA@CBaseCoder@NZipStrong@NCrypto@@8
.rdata$r:00007280                                         ; DATA XREF: .rdata$r:0000727Co
.rdata$r:00007280                                         ; NCrypto::NZipStrong::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007284                 dd offset ??_R1A@?0A@EA@CAesCbcDecoder@NCrypto@@8 ; NCrypto::CAesCbcDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007288                 dd offset ??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8 ; NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000728C                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007290                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00007294                 dd offset ??_R13?0A@EA@ICryptoProperties@@8 ; ICryptoProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00007298                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:0000729C                 dd offset ??_R17?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:000072A0                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:000072A4                 dd offset ??_R1M@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:000072A8                 dd offset ??_R1BEM@?0A@EA@ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (332,-1,0,64)'
.rdata$r:000072AC                 dd offset ??_R1BEM@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (332,-1,0,66)'
.rdata$r:000072B0                 db    0
.rdata$r:000072B1                 align 4
.rdata$r:000072B1 _rdata$r        ends
.rdata$r:000072B1
.rdata$r:000072B4 ; ===========================================================================
.rdata$r:000072B4
.rdata$r:000072B4 ; Segment type: Pure data
.rdata$r:000072B4 ; Segment permissions: Read
.rdata$r:000072B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000072B4                 assume cs:_rdata$r
.rdata$r:000072B4                 ;org 72B4h
.rdata$r:000072B4 ; COMDAT (pick any)
.rdata$r:000072B4                 public ??_R1A@?0A@EA@CAesCbcDecoder@NCrypto@@8
.rdata$r:000072B4 ; NCrypto::CAesCbcDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000072B4 ??_R1A@?0A@EA@CAesCbcDecoder@NCrypto@@8 dd offset ??_R0?AUCAesCbcDecoder@NCrypto@@@8
.rdata$r:000072B4                                         ; DATA XREF: .rdata$r:000071DCo
.rdata$r:000072B4                                         ; .rdata$r:00007284o ...
.rdata$r:000072B4                                         ; NCrypto::CAesCbcDecoder `RTTI Type Descriptor'
.rdata$r:000072B8                 db    8
.rdata$r:000072B9                 db    0
.rdata$r:000072BA                 db    0
.rdata$r:000072BB                 db    0
.rdata$r:000072BC                 db    0
.rdata$r:000072BD                 db    0
.rdata$r:000072BE                 db    0
.rdata$r:000072BF                 db    0
.rdata$r:000072C0                 db 0FFh
.rdata$r:000072C1                 db 0FFh
.rdata$r:000072C2                 db 0FFh
.rdata$r:000072C3                 db 0FFh
.rdata$r:000072C4                 db    0
.rdata$r:000072C5                 db    0
.rdata$r:000072C6                 db    0
.rdata$r:000072C7                 db    0
.rdata$r:000072C8                 db  40h ; @
.rdata$r:000072C9                 db    0
.rdata$r:000072CA                 db    0
.rdata$r:000072CB                 db    0
.rdata$r:000072CC                 dd offset ??_R3CAesCbcDecoder@NCrypto@@8 ; NCrypto::CAesCbcDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000072CC _rdata$r        ends
.rdata$r:000072CC
.data:000072D0 ; ===========================================================================
.data:000072D0
.data:000072D0 ; Segment type: Pure data
.data:000072D0 ; Segment permissions: Read/Write
.data:000072D0 _data           segment dword public 'DATA' use32
.data:000072D0                 assume cs:_data
.data:000072D0                 ;org 72D0h
.data:000072D0 ; COMDAT (pick any)
.data:000072D0                 public ??_R0?AUCAesCbcDecoder@NCrypto@@@8
.data:000072D0 ; struct NCrypto::CAesCbcDecoder `RTTI Type Descriptor'
.data:000072D0 ??_R0?AUCAesCbcDecoder@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:000072D0                                         ; DATA XREF: .rdata$r:NCrypto::CAesCbcDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000072D0                                         ; .rdata$r:000082ECo ...
.data:000072D0                                         ; const type_info::`vftable'
.data:000072D4                 align 8
.data:000072D8 a_?aucaescbcdec db '.?AUCAesCbcDecoder@NCrypto@@',0
.data:000072F5                 align 4
.data:000072F5 _data           ends
.data:000072F5
.rdata$r:000072F8 ; ===========================================================================
.rdata$r:000072F8
.rdata$r:000072F8 ; Segment type: Pure data
.rdata$r:000072F8 ; Segment permissions: Read
.rdata$r:000072F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000072F8                 assume cs:_rdata$r
.rdata$r:000072F8                 ;org 72F8h
.rdata$r:000072F8 ; COMDAT (pick any)
.rdata$r:000072F8                 public ??_R3CAesCbcDecoder@NCrypto@@8
.rdata$r:000072F8 ; NCrypto::CAesCbcDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000072F8 ??_R3CAesCbcDecoder@NCrypto@@8 db    0  ; DATA XREF: .rdata$r:000072CCo
.rdata$r:000072F8                                         ; .rdata$r:000082F0o ...
.rdata$r:000072F9                 db    0
.rdata$r:000072FA                 db    0
.rdata$r:000072FB                 db    0
.rdata$r:000072FC                 db    1
.rdata$r:000072FD                 db    0
.rdata$r:000072FE                 db    0
.rdata$r:000072FF                 db    0
.rdata$r:00007300                 db    9
.rdata$r:00007301                 db    0
.rdata$r:00007302                 db    0
.rdata$r:00007303                 db    0
.rdata$r:00007304                 dd offset ??_R2CAesCbcDecoder@NCrypto@@8 ; NCrypto::CAesCbcDecoder::`RTTI Base Class Array'
.rdata$r:00007304 _rdata$r        ends
.rdata$r:00007304
.rdata$r:00007308 ; ===========================================================================
.rdata$r:00007308
.rdata$r:00007308 ; Segment type: Pure data
.rdata$r:00007308 ; Segment permissions: Read
.rdata$r:00007308 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007308                 assume cs:_rdata$r
.rdata$r:00007308                 ;org 7308h
.rdata$r:00007308 ; COMDAT (pick any)
.rdata$r:00007308                 public ??_R2CAesCbcDecoder@NCrypto@@8
.rdata$r:00007308 ; NCrypto::CAesCbcDecoder::`RTTI Base Class Array'
.rdata$r:00007308 ??_R2CAesCbcDecoder@NCrypto@@8 dd offset ??_R1A@?0A@EA@CAesCbcDecoder@NCrypto@@8
.rdata$r:00007308                                         ; DATA XREF: .rdata$r:00007304o
.rdata$r:00007308                                         ; NCrypto::CAesCbcDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000730C                 dd offset ??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8 ; NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007310                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007314                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00007318                 dd offset ??_R13?0A@EA@ICryptoProperties@@8 ; ICryptoProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000731C                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00007320                 dd offset ??_R17?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00007324                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00007328                 dd offset ??_R1M@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:0000732C                 db    0
.rdata$r:0000732D                 align 10h
.rdata$r:0000732D _rdata$r        ends
.rdata$r:0000732D
.rdata$r:00007330 ; ===========================================================================
.rdata$r:00007330
.rdata$r:00007330 ; Segment type: Pure data
.rdata$r:00007330 ; Segment permissions: Read
.rdata$r:00007330 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007330                 assume cs:_rdata$r
.rdata$r:00007330                 ;org 7330h
.rdata$r:00007330 ; COMDAT (pick any)
.rdata$r:00007330                 public ??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8
.rdata$r:00007330 ; NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007330 ??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8 dd offset ??_R0?AVCAesCbcCoder@NCrypto@@@8
.rdata$r:00007330                                         ; DATA XREF: .rdata$r:000071E0o
.rdata$r:00007330                                         ; .rdata$r:00007288o ...
.rdata$r:00007330                                         ; NCrypto::CAesCbcCoder `RTTI Type Descriptor'
.rdata$r:00007334                 db    7
.rdata$r:00007335                 db    0
.rdata$r:00007336                 db    0
.rdata$r:00007337                 db    0
.rdata$r:00007338                 db    0
.rdata$r:00007339                 db    0
.rdata$r:0000733A                 db    0
.rdata$r:0000733B                 db    0
.rdata$r:0000733C                 db 0FFh
.rdata$r:0000733D                 db 0FFh
.rdata$r:0000733E                 db 0FFh
.rdata$r:0000733F                 db 0FFh
.rdata$r:00007340                 db    0
.rdata$r:00007341                 db    0
.rdata$r:00007342                 db    0
.rdata$r:00007343                 db    0
.rdata$r:00007344                 db  40h ; @
.rdata$r:00007345                 db    0
.rdata$r:00007346                 db    0
.rdata$r:00007347                 db    0
.rdata$r:00007348                 dd offset ??_R3CAesCbcCoder@NCrypto@@8 ; NCrypto::CAesCbcCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007348 _rdata$r        ends
.rdata$r:00007348
.data:0000734C ; ===========================================================================
.data:0000734C
.data:0000734C ; Segment type: Pure data
.data:0000734C ; Segment permissions: Read/Write
.data:0000734C _data           segment dword public 'DATA' use32
.data:0000734C                 assume cs:_data
.data:0000734C                 ;org 734Ch
.data:0000734C ; COMDAT (pick any)
.data:0000734C                 public ??_R0?AVCAesCbcCoder@NCrypto@@@8
.data:0000734C ; class NCrypto::CAesCbcCoder `RTTI Type Descriptor'
.data:0000734C ??_R0?AVCAesCbcCoder@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:0000734C                                         ; DATA XREF: .rdata$r:NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000734C                                         ; const type_info::`vftable'
.data:00007350                 db    0
.data:00007351                 db    0
.data:00007352                 db    0
.data:00007353                 db    0
.data:00007354                 db  2Eh ; .
.data:00007355                 db  3Fh ; ?
.data:00007356                 db  41h ; A
.data:00007357                 db  56h ; V
.data:00007358                 db  43h ; C
.data:00007359                 db  41h ; A
.data:0000735A                 db  65h ; e
.data:0000735B                 db  73h ; s
.data:0000735C                 db  43h ; C
.data:0000735D                 db  62h ; b
.data:0000735E                 db  63h ; c
.data:0000735F                 db  43h ; C
.data:00007360                 db  6Fh ; o
.data:00007361                 db  64h ; d
.data:00007362                 db  65h ; e
.data:00007363                 db  72h ; r
.data:00007364                 db  40h ; @
.data:00007365                 db  4Eh ; N
.data:00007366                 db  43h ; C
.data:00007367                 db  72h ; r
.data:00007368                 db  79h ; y
.data:00007369                 db  70h ; p
.data:0000736A                 db  74h ; t
.data:0000736B                 db  6Fh ; o
.data:0000736C                 db  40h ; @
.data:0000736D                 db  40h ; @
.data:0000736E                 db    0
.data:0000736F                 align 10h
.data:0000736F _data           ends
.data:0000736F
.rdata$r:00007370 ; ===========================================================================
.rdata$r:00007370
.rdata$r:00007370 ; Segment type: Pure data
.rdata$r:00007370 ; Segment permissions: Read
.rdata$r:00007370 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007370                 assume cs:_rdata$r
.rdata$r:00007370                 ;org 7370h
.rdata$r:00007370 ; COMDAT (pick any)
.rdata$r:00007370                 public ??_R3CAesCbcCoder@NCrypto@@8
.rdata$r:00007370 ; NCrypto::CAesCbcCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007370 ??_R3CAesCbcCoder@NCrypto@@8 db    0    ; DATA XREF: .rdata$r:00007348o
.rdata$r:00007371                 db    0
.rdata$r:00007372                 db    0
.rdata$r:00007373                 db    0
.rdata$r:00007374                 db    1
.rdata$r:00007375                 db    0
.rdata$r:00007376                 db    0
.rdata$r:00007377                 db    0
.rdata$r:00007378                 db    8
.rdata$r:00007379                 db    0
.rdata$r:0000737A                 db    0
.rdata$r:0000737B                 db    0
.rdata$r:0000737C                 dd offset ??_R2CAesCbcCoder@NCrypto@@8 ; NCrypto::CAesCbcCoder::`RTTI Base Class Array'
.rdata$r:0000737C _rdata$r        ends
.rdata$r:0000737C
.rdata$r:00007380 ; ===========================================================================
.rdata$r:00007380
.rdata$r:00007380 ; Segment type: Pure data
.rdata$r:00007380 ; Segment permissions: Read
.rdata$r:00007380 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007380                 assume cs:_rdata$r
.rdata$r:00007380                 ;org 7380h
.rdata$r:00007380 ; COMDAT (pick any)
.rdata$r:00007380                 public ??_R2CAesCbcCoder@NCrypto@@8
.rdata$r:00007380 ; NCrypto::CAesCbcCoder::`RTTI Base Class Array'
.rdata$r:00007380 ??_R2CAesCbcCoder@NCrypto@@8 dd offset ??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8
.rdata$r:00007380                                         ; DATA XREF: .rdata$r:0000737Co
.rdata$r:00007380                                         ; NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007384                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007388                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:0000738C                 dd offset ??_R13?0A@EA@ICryptoProperties@@8 ; ICryptoProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00007390                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00007394                 dd offset ??_R17?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00007398                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:0000739C                 dd offset ??_R1M@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:000073A0                 db    0
.rdata$r:000073A1                 align 4
.rdata$r:000073A1 _rdata$r        ends
.rdata$r:000073A1
.rdata$r:000073A4 ; ===========================================================================
.rdata$r:000073A4
.rdata$r:000073A4 ; Segment type: Pure data
.rdata$r:000073A4 ; Segment permissions: Read
.rdata$r:000073A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000073A4                 assume cs:_rdata$r
.rdata$r:000073A4                 ;org 73A4h
.rdata$r:000073A4 ; COMDAT (pick any)
.rdata$r:000073A4                 public ??_R13?0A@EA@ICryptoProperties@@8
.rdata$r:000073A4 ; ICryptoProperties::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:000073A4 ??_R13?0A@EA@ICryptoProperties@@8 dd offset ??_R0?AUICryptoProperties@@@8
.rdata$r:000073A4                                         ; DATA XREF: .rdata$r:000071ECo
.rdata$r:000073A4                                         ; .rdata$r:00007294o ...
.rdata$r:000073A4                                         ; ICryptoProperties `RTTI Type Descriptor'
.rdata$r:000073A8                 db    1
.rdata$r:000073A9                 db    0
.rdata$r:000073AA                 db    0
.rdata$r:000073AB                 db    0
.rdata$r:000073AC                 db    4
.rdata$r:000073AD                 db    0
.rdata$r:000073AE                 db    0
.rdata$r:000073AF                 db    0
.rdata$r:000073B0                 db 0FFh
.rdata$r:000073B1                 db 0FFh
.rdata$r:000073B2                 db 0FFh
.rdata$r:000073B3                 db 0FFh
.rdata$r:000073B4                 db    0
.rdata$r:000073B5                 db    0
.rdata$r:000073B6                 db    0
.rdata$r:000073B7                 db    0
.rdata$r:000073B8                 db  40h ; @
.rdata$r:000073B9                 db    0
.rdata$r:000073BA                 db    0
.rdata$r:000073BB                 db    0
.rdata$r:000073BC                 dd offset ??_R3ICryptoProperties@@8 ; ICryptoProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000073BC _rdata$r        ends
.rdata$r:000073BC
.data:000073C0 ; ===========================================================================
.data:000073C0
.data:000073C0 ; Segment type: Pure data
.data:000073C0 ; Segment permissions: Read/Write
.data:000073C0 _data           segment dword public 'DATA' use32
.data:000073C0                 assume cs:_data
.data:000073C0                 ;org 73C0h
.data:000073C0 ; COMDAT (pick any)
.data:000073C0                 public ??_R0?AUICryptoProperties@@@8
.data:000073C0 ; struct ICryptoProperties `RTTI Type Descriptor'
.data:000073C0 ??_R0?AUICryptoProperties@@@8 dd offset ??_7type_info@@6B@
.data:000073C0                                         ; DATA XREF: .rdata$r:ICryptoProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000073C0                                         ; .rdata$r:ICryptoProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000073C0                                         ; const type_info::`vftable'
.data:000073C4                 align 8
.data:000073C8 a_?auicryptopro db '.?AUICryptoProperties@@',0
.data:000073C8 _data           ends
.data:000073C8
.rdata$r:000073E0 ; ===========================================================================
.rdata$r:000073E0
.rdata$r:000073E0 ; Segment type: Pure data
.rdata$r:000073E0 ; Segment permissions: Read
.rdata$r:000073E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000073E0                 assume cs:_rdata$r
.rdata$r:000073E0                 ;org 73E0h
.rdata$r:000073E0 ; COMDAT (pick any)
.rdata$r:000073E0                 public ??_R3ICryptoProperties@@8
.rdata$r:000073E0 ; ICryptoProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000073E0 ??_R3ICryptoProperties@@8 db    0       ; DATA XREF: .rdata$r:000073BCo
.rdata$r:000073E0                                         ; .rdata$r:00007414o
.rdata$r:000073E1                 db    0
.rdata$r:000073E2                 db    0
.rdata$r:000073E3                 db    0
.rdata$r:000073E4                 db    0
.rdata$r:000073E5                 db    0
.rdata$r:000073E6                 db    0
.rdata$r:000073E7                 db    0
.rdata$r:000073E8                 db    2
.rdata$r:000073E9                 db    0
.rdata$r:000073EA                 db    0
.rdata$r:000073EB                 db    0
.rdata$r:000073EC                 dd offset ??_R2ICryptoProperties@@8 ; ICryptoProperties::`RTTI Base Class Array'
.rdata$r:000073EC _rdata$r        ends
.rdata$r:000073EC
.rdata$r:000073F0 ; ===========================================================================
.rdata$r:000073F0
.rdata$r:000073F0 ; Segment type: Pure data
.rdata$r:000073F0 ; Segment permissions: Read
.rdata$r:000073F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000073F0                 assume cs:_rdata$r
.rdata$r:000073F0                 ;org 73F0h
.rdata$r:000073F0 ; COMDAT (pick any)
.rdata$r:000073F0                 public ??_R2ICryptoProperties@@8
.rdata$r:000073F0 ; ICryptoProperties::`RTTI Base Class Array'
.rdata$r:000073F0 ??_R2ICryptoProperties@@8 dd offset ??_R1A@?0A@EA@ICryptoProperties@@8
.rdata$r:000073F0                                         ; DATA XREF: .rdata$r:000073ECo
.rdata$r:000073F0                                         ; ICryptoProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000073F4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000073F8                 db    0
.rdata$r:000073F9                 align 4
.rdata$r:000073F9 _rdata$r        ends
.rdata$r:000073F9
.rdata$r:000073FC ; ===========================================================================
.rdata$r:000073FC
.rdata$r:000073FC ; Segment type: Pure data
.rdata$r:000073FC ; Segment permissions: Read
.rdata$r:000073FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000073FC                 assume cs:_rdata$r
.rdata$r:000073FC                 ;org 73FCh
.rdata$r:000073FC ; COMDAT (pick any)
.rdata$r:000073FC                 public ??_R1A@?0A@EA@ICryptoProperties@@8
.rdata$r:000073FC ; ICryptoProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000073FC ??_R1A@?0A@EA@ICryptoProperties@@8 dd offset ??_R0?AUICryptoProperties@@@8
.rdata$r:000073FC                                         ; DATA XREF: .rdata$r:ICryptoProperties::`RTTI Base Class Array'o
.rdata$r:000073FC                                         ; ICryptoProperties `RTTI Type Descriptor'
.rdata$r:00007400                 db    1
.rdata$r:00007401                 db    0
.rdata$r:00007402                 db    0
.rdata$r:00007403                 db    0
.rdata$r:00007404                 db    0
.rdata$r:00007405                 db    0
.rdata$r:00007406                 db    0
.rdata$r:00007407                 db    0
.rdata$r:00007408                 db 0FFh
.rdata$r:00007409                 db 0FFh
.rdata$r:0000740A                 db 0FFh
.rdata$r:0000740B                 db 0FFh
.rdata$r:0000740C                 db    0
.rdata$r:0000740D                 db    0
.rdata$r:0000740E                 db    0
.rdata$r:0000740F                 db    0
.rdata$r:00007410                 db  40h ; @
.rdata$r:00007411                 db    0
.rdata$r:00007412                 db    0
.rdata$r:00007413                 db    0
.rdata$r:00007414                 dd offset ??_R3ICryptoProperties@@8 ; ICryptoProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007414 _rdata$r        ends
.rdata$r:00007414
.rdata$r:00007418 ; ===========================================================================
.rdata$r:00007418
.rdata$r:00007418 ; Segment type: Pure data
.rdata$r:00007418 ; Segment permissions: Read
.rdata$r:00007418 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007418                 assume cs:_rdata$r
.rdata$r:00007418                 ;org 7418h
.rdata$r:00007418 ; COMDAT (pick any)
.rdata$r:00007418                 public ??_R17?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00007418 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00007418 ??_R17?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:00007418                                         ; DATA XREF: .rdata$r:000071F4o
.rdata$r:00007418                                         ; .rdata$r:0000729Co ...
.rdata$r:00007418                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:0000741C                 db    1
.rdata$r:0000741D                 db    0
.rdata$r:0000741E                 db    0
.rdata$r:0000741F                 db    0
.rdata$r:00007420                 db    8
.rdata$r:00007421                 db    0
.rdata$r:00007422                 db    0
.rdata$r:00007423                 db    0
.rdata$r:00007424                 db 0FFh
.rdata$r:00007425                 db 0FFh
.rdata$r:00007426                 db 0FFh
.rdata$r:00007427                 db 0FFh
.rdata$r:00007428                 db    0
.rdata$r:00007429                 db    0
.rdata$r:0000742A                 db    0
.rdata$r:0000742B                 db    0
.rdata$r:0000742C                 db  40h ; @
.rdata$r:0000742D                 db    0
.rdata$r:0000742E                 db    0
.rdata$r:0000742F                 db    0
.rdata$r:00007430                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007430 _rdata$r        ends
.rdata$r:00007430
.data:00007434 ; ===========================================================================
.data:00007434
.data:00007434 ; Segment type: Pure data
.data:00007434 ; Segment permissions: Read/Write
.data:00007434 _data           segment dword public 'DATA' use32
.data:00007434                 assume cs:_data
.data:00007434                 ;org 7434h
.data:00007434 ; COMDAT (pick any)
.data:00007434                 public ??_R0?AUICompressSetCoderProperties@@@8
.data:00007434 ; struct ICompressSetCoderProperties `RTTI Type Descriptor'
.data:00007434 ??_R0?AUICompressSetCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:00007434                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00007434                                         ; .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00007434                                         ; const type_info::`vftable'
.data:00007438                 db    0
.data:00007439                 db    0
.data:0000743A                 db    0
.data:0000743B                 db    0
.data:0000743C                 db  2Eh ; .
.data:0000743D                 db  3Fh ; ?
.data:0000743E                 db  41h ; A
.data:0000743F                 db  55h ; U
.data:00007440                 db  49h ; I
.data:00007441                 db  43h ; C
.data:00007442                 db  6Fh ; o
.data:00007443                 db  6Dh ; m
.data:00007444                 db  70h ; p
.data:00007445                 db  72h ; r
.data:00007446                 db  65h ; e
.data:00007447                 db  73h ; s
.data:00007448                 db  73h ; s
.data:00007449                 db  53h ; S
.data:0000744A                 db  65h ; e
.data:0000744B                 db  74h ; t
.data:0000744C                 db  43h ; C
.data:0000744D                 db  6Fh ; o
.data:0000744E                 db  64h ; d
.data:0000744F                 db  65h ; e
.data:00007450                 db  72h ; r
.data:00007451                 db  50h ; P
.data:00007452                 db  72h ; r
.data:00007453                 db  6Fh ; o
.data:00007454                 db  70h ; p
.data:00007455                 db  65h ; e
.data:00007456                 db  72h ; r
.data:00007457                 db  74h ; t
.data:00007458                 db  69h ; i
.data:00007459                 db  65h ; e
.data:0000745A                 db  73h ; s
.data:0000745B                 db  40h ; @
.data:0000745C                 db  40h ; @
.data:0000745D                 db    0
.data:0000745E                 align 10h
.data:0000745E _data           ends
.data:0000745E
.rdata$r:00007460 ; ===========================================================================
.rdata$r:00007460
.rdata$r:00007460 ; Segment type: Pure data
.rdata$r:00007460 ; Segment permissions: Read
.rdata$r:00007460 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007460                 assume cs:_rdata$r
.rdata$r:00007460                 ;org 7460h
.rdata$r:00007460 ; COMDAT (pick any)
.rdata$r:00007460                 public ??_R3ICompressSetCoderProperties@@8
.rdata$r:00007460 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007460 ??_R3ICompressSetCoderProperties@@8 db    0
.rdata$r:00007460                                         ; DATA XREF: .rdata$r:00007430o
.rdata$r:00007460                                         ; .rdata$r:00007494o
.rdata$r:00007461                 db    0
.rdata$r:00007462                 db    0
.rdata$r:00007463                 db    0
.rdata$r:00007464                 db    0
.rdata$r:00007465                 db    0
.rdata$r:00007466                 db    0
.rdata$r:00007467                 db    0
.rdata$r:00007468                 db    2
.rdata$r:00007469                 db    0
.rdata$r:0000746A                 db    0
.rdata$r:0000746B                 db    0
.rdata$r:0000746C                 dd offset ??_R2ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:0000746C _rdata$r        ends
.rdata$r:0000746C
.rdata$r:00007470 ; ===========================================================================
.rdata$r:00007470
.rdata$r:00007470 ; Segment type: Pure data
.rdata$r:00007470 ; Segment permissions: Read
.rdata$r:00007470 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007470                 assume cs:_rdata$r
.rdata$r:00007470                 ;org 7470h
.rdata$r:00007470 ; COMDAT (pick any)
.rdata$r:00007470                 public ??_R2ICompressSetCoderProperties@@8
.rdata$r:00007470 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00007470 ??_R2ICompressSetCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00007470                                         ; DATA XREF: .rdata$r:0000746Co
.rdata$r:00007470                                         ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007474                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007478                 db    0
.rdata$r:00007479                 align 4
.rdata$r:00007479 _rdata$r        ends
.rdata$r:00007479
.rdata$r:0000747C ; ===========================================================================
.rdata$r:0000747C
.rdata$r:0000747C ; Segment type: Pure data
.rdata$r:0000747C ; Segment permissions: Read
.rdata$r:0000747C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000747C                 assume cs:_rdata$r
.rdata$r:0000747C                 ;org 747Ch
.rdata$r:0000747C ; COMDAT (pick any)
.rdata$r:0000747C                 public ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:0000747C ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000747C ??_R1A@?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:0000747C                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Array'o
.rdata$r:0000747C                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00007480                 db    1
.rdata$r:00007481                 db    0
.rdata$r:00007482                 db    0
.rdata$r:00007483                 db    0
.rdata$r:00007484                 db    0
.rdata$r:00007485                 db    0
.rdata$r:00007486                 db    0
.rdata$r:00007487                 db    0
.rdata$r:00007488                 db 0FFh
.rdata$r:00007489                 db 0FFh
.rdata$r:0000748A                 db 0FFh
.rdata$r:0000748B                 db 0FFh
.rdata$r:0000748C                 db    0
.rdata$r:0000748D                 db    0
.rdata$r:0000748E                 db    0
.rdata$r:0000748F                 db    0
.rdata$r:00007490                 db  40h ; @
.rdata$r:00007491                 db    0
.rdata$r:00007492                 db    0
.rdata$r:00007493                 db    0
.rdata$r:00007494                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007494 _rdata$r        ends
.rdata$r:00007494
.rdata$r:00007498 ; ===========================================================================
.rdata$r:00007498
.rdata$r:00007498 ; Segment type: Pure data
.rdata$r:00007498 ; Segment permissions: Read
.rdata$r:00007498 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007498                 assume cs:_rdata$r
.rdata$r:00007498                 ;org 7498h
.rdata$r:00007498 ; COMDAT (pick any)
.rdata$r:00007498                 public ??_R1BEM@?0A@EA@ICryptoSetPassword@@8
.rdata$r:00007498 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (332, -1, 0, 64)'
.rdata$r:00007498 ??_R1BEM@?0A@EA@ICryptoSetPassword@@8 dd offset ??_R0?AUICryptoSetPassword@@@8
.rdata$r:00007498                                         ; DATA XREF: .rdata$r:00007200o
.rdata$r:00007498                                         ; .rdata$r:000072A8o
.rdata$r:00007498                                         ; ICryptoSetPassword `RTTI Type Descriptor'
.rdata$r:0000749C                 db    1
.rdata$r:0000749D                 db    0
.rdata$r:0000749E                 db    0
.rdata$r:0000749F                 db    0
.rdata$r:000074A0                 db  4Ch ; L
.rdata$r:000074A1                 db    1
.rdata$r:000074A2                 db    0
.rdata$r:000074A3                 db    0
.rdata$r:000074A4                 db 0FFh
.rdata$r:000074A5                 db 0FFh
.rdata$r:000074A6                 db 0FFh
.rdata$r:000074A7                 db 0FFh
.rdata$r:000074A8                 db    0
.rdata$r:000074A9                 db    0
.rdata$r:000074AA                 db    0
.rdata$r:000074AB                 db    0
.rdata$r:000074AC                 db  40h ; @
.rdata$r:000074AD                 db    0
.rdata$r:000074AE                 db    0
.rdata$r:000074AF                 db    0
.rdata$r:000074B0                 dd offset ??_R3ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:000074B0 _rdata$r        ends
.rdata$r:000074B0
.rdata$r:000074B4 ; ===========================================================================
.rdata$r:000074B4
.rdata$r:000074B4 ; Segment type: Pure data
.rdata$r:000074B4 ; Segment permissions: Read
.rdata$r:000074B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000074B4                 assume cs:_rdata$r
.rdata$r:000074B4                 ;org 74B4h
.rdata$r:000074B4 ; COMDAT (pick any)
.rdata$r:000074B4                 public ??_R1BEM@?0A@EC@IUnknown@@8
.rdata$r:000074B4 ; IUnknown::`RTTI Base Class Descriptor at (332, -1, 0, 66)'
.rdata$r:000074B4 ??_R1BEM@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000074B4                                         ; DATA XREF: .rdata$r:00007204o
.rdata$r:000074B4                                         ; .rdata$r:000072ACo
.rdata$r:000074B4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000074B8                 db    0
.rdata$r:000074B9                 db    0
.rdata$r:000074BA                 db    0
.rdata$r:000074BB                 db    0
.rdata$r:000074BC                 db  4Ch ; L
.rdata$r:000074BD                 db    1
.rdata$r:000074BE                 db    0
.rdata$r:000074BF                 db    0
.rdata$r:000074C0                 db 0FFh
.rdata$r:000074C1                 db 0FFh
.rdata$r:000074C2                 db 0FFh
.rdata$r:000074C3                 db 0FFh
.rdata$r:000074C4                 db    0
.rdata$r:000074C5                 db    0
.rdata$r:000074C6                 db    0
.rdata$r:000074C7                 db    0
.rdata$r:000074C8                 db  42h ; B
.rdata$r:000074C9                 db    0
.rdata$r:000074CA                 db    0
.rdata$r:000074CB                 db    0
.rdata$r:000074CC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000074CC _rdata$r        ends
.rdata$r:000074CC
.rdata$r:000074D0 ; ===========================================================================
.rdata$r:000074D0
.rdata$r:000074D0 ; Segment type: Pure data
.rdata$r:000074D0 ; Segment permissions: Read
.rdata$r:000074D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000074D0                 assume cs:_rdata$r
.rdata$r:000074D0                 ;org 74D0h
.rdata$r:000074D0 ; COMDAT (pick any)
.rdata$r:000074D0                 public ??_R4CDecoder@NZipStrong@NCrypto@@6BICryptoProperties@@@
.rdata$r:000074D0 ; const NCrypto::NZipStrong::CDecoder::`RTTI Complete Object Locator'{for `ICryptoProperties'}
.rdata$r:000074D0 ??_R4CDecoder@NZipStrong@NCrypto@@6BICryptoProperties@@@ db    0
.rdata$r:000074D0                                         ; DATA XREF: .rdata:00007154o
.rdata$r:000074D1                 db    0
.rdata$r:000074D2                 db    0
.rdata$r:000074D3                 db    0
.rdata$r:000074D4                 db    4
.rdata$r:000074D5                 db    0
.rdata$r:000074D6                 db    0
.rdata$r:000074D7                 db    0
.rdata$r:000074D8                 db    0
.rdata$r:000074D9                 db    0
.rdata$r:000074DA                 db    0
.rdata$r:000074DB                 db    0
.rdata$r:000074DC                 dd offset ??_R0?AVCDecoder@NZipStrong@NCrypto@@@8 ; NCrypto::NZipStrong::CDecoder `RTTI Type Descriptor'
.rdata$r:000074E0                 dd offset ??_R3CDecoder@NZipStrong@NCrypto@@8 ; NCrypto::NZipStrong::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000074E0 _rdata$r        ends
.rdata$r:000074E0
.rdata$r:000074E4 ; ===========================================================================
.rdata$r:000074E4
.rdata$r:000074E4 ; Segment type: Pure data
.rdata$r:000074E4 ; Segment permissions: Read
.rdata$r:000074E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000074E4                 assume cs:_rdata$r
.rdata$r:000074E4                 ;org 74E4h
.rdata$r:000074E4 ; COMDAT (pick any)
.rdata$r:000074E4                 public ??_R4CDecoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@
.rdata$r:000074E4 ; const NCrypto::NZipStrong::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:000074E4 ??_R4CDecoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:000074E4                                         ; DATA XREF: .rdata:00007140o
.rdata$r:000074E5                 db    0
.rdata$r:000074E6                 db    0
.rdata$r:000074E7                 db    0
.rdata$r:000074E8                 db    8
.rdata$r:000074E9                 db    0
.rdata$r:000074EA                 db    0
.rdata$r:000074EB                 db    0
.rdata$r:000074EC                 db    0
.rdata$r:000074ED                 db    0
.rdata$r:000074EE                 db    0
.rdata$r:000074EF                 db    0
.rdata$r:000074F0                 dd offset ??_R0?AVCDecoder@NZipStrong@NCrypto@@@8 ; NCrypto::NZipStrong::CDecoder `RTTI Type Descriptor'
.rdata$r:000074F4                 dd offset ??_R3CDecoder@NZipStrong@NCrypto@@8 ; NCrypto::NZipStrong::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000074F4 _rdata$r        ends
.rdata$r:000074F4
.rdata$r:000074F8 ; ===========================================================================
.rdata$r:000074F8
.rdata$r:000074F8 ; Segment type: Pure data
.rdata$r:000074F8 ; Segment permissions: Read
.rdata$r:000074F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000074F8                 assume cs:_rdata$r
.rdata$r:000074F8                 ;org 74F8h
.rdata$r:000074F8 ; COMDAT (pick any)
.rdata$r:000074F8                 public ??_R4CDecoder@NZipStrong@NCrypto@@6B@
.rdata$r:000074F8 ; const NCrypto::NZipStrong::CDecoder::`RTTI Complete Object Locator'
.rdata$r:000074F8 ??_R4CDecoder@NZipStrong@NCrypto@@6B@ db    0
.rdata$r:000074F8                                         ; DATA XREF: .rdata:0000712Co
.rdata$r:000074F9                 db    0
.rdata$r:000074FA                 db    0
.rdata$r:000074FB                 db    0
.rdata$r:000074FC                 db  4Ch ; L
.rdata$r:000074FD                 db    1
.rdata$r:000074FE                 db    0
.rdata$r:000074FF                 db    0
.rdata$r:00007500                 db    0
.rdata$r:00007501                 db    0
.rdata$r:00007502                 db    0
.rdata$r:00007503                 db    0
.rdata$r:00007504                 dd offset ??_R0?AVCDecoder@NZipStrong@NCrypto@@@8 ; NCrypto::NZipStrong::CDecoder `RTTI Type Descriptor'
.rdata$r:00007508                 dd offset ??_R3CDecoder@NZipStrong@NCrypto@@8 ; NCrypto::NZipStrong::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007508 _rdata$r        ends
.rdata$r:00007508
.text:0000750C ; ===========================================================================
.text:0000750C
.text:0000750C ; Segment type: Pure code
.text:0000750C ; Segment permissions: Read/Execute
.text:0000750C _text           segment para public 'CODE' use32
.text:0000750C                 assume cs:_text
.text:0000750C                 ;org 750Ch
.text:0000750C ; COMDAT (pick any)
.text:0000750C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000750C
.text:0000750C ; =============== S U B R O U T I N E =======================================
.text:0000750C
.text:0000750C ; Attributes: bp-based frame
.text:0000750C
.text:0000750C ; __int32 __stdcall NCrypto::NZipStrong::CDecoder::QueryInterface(NCrypto::NZipStrong::CDecoder *this, const struct _GUID *Buf1, void **)
.text:0000750C                 public ?QueryInterface@CDecoder@NZipStrong@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.text:0000750C ?QueryInterface@CDecoder@NZipStrong@NCrypto@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000750C                                         ; CODE XREF: [thunk]:NCrypto::NZipStrong::CDecoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:0000750C                                         ; [thunk]:NCrypto::NZipStrong::CDecoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:0000750C
.text:0000750C var_8           = dword ptr -8
.text:0000750C var_4           = dword ptr -4
.text:0000750C this            = dword ptr  8
.text:0000750C Buf1            = dword ptr  0Ch
.text:0000750C arg_8           = dword ptr  10h
.text:0000750C
.text:0000750C                 push    ebp
.text:0000750D                 mov     ebp, esp
.text:0000750F                 sub     esp, 8
.text:00007512                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007519                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007520                 mov     eax, [ebp+arg_8]
.text:00007523                 mov     dword ptr [eax], 0
.text:00007529                 push    offset _IID_IUnknown ; Buf2
.text:0000752E                 mov     ecx, [ebp+Buf1]
.text:00007531                 push    ecx             ; Buf1
.text:00007532                 call    ___@8           ; __(x,x)
.text:00007537                 test    eax, eax
.text:00007539                 jz      short loc_7560
.text:0000753B                 cmp     [ebp+this], 0
.text:0000753F                 jz      short loc_754F
.text:00007541                 mov     edx, [ebp+this]
.text:00007544                 add     edx, 14Ch
.text:0000754A                 mov     [ebp+var_4], edx
.text:0000754D                 jmp     short loc_7556
.text:0000754F ; ---------------------------------------------------------------------------
.text:0000754F
.text:0000754F loc_754F:                               ; CODE XREF: NCrypto::NZipStrong::CDecoder::QueryInterface(_GUID const &,void * *)+33j
.text:0000754F                 mov     [ebp+var_4], 0
.text:00007556
.text:00007556 loc_7556:                               ; CODE XREF: NCrypto::NZipStrong::CDecoder::QueryInterface(_GUID const &,void * *)+41j
.text:00007556                 mov     eax, [ebp+arg_8]
.text:00007559                 mov     ecx, [ebp+var_4]
.text:0000755C                 mov     [eax], ecx
.text:0000755E                 jmp     short loc_759D
.text:00007560 ; ---------------------------------------------------------------------------
.text:00007560
.text:00007560 loc_7560:                               ; CODE XREF: NCrypto::NZipStrong::CDecoder::QueryInterface(_GUID const &,void * *)+2Dj
.text:00007560                 push    offset _IID_ICryptoSetPassword ; Buf2
.text:00007565                 mov     edx, [ebp+Buf1]
.text:00007568                 push    edx             ; Buf1
.text:00007569                 call    ___@8           ; __(x,x)
.text:0000756E                 test    eax, eax
.text:00007570                 jz      short loc_7596
.text:00007572                 cmp     [ebp+this], 0
.text:00007576                 jz      short loc_7585
.text:00007578                 mov     eax, [ebp+this]
.text:0000757B                 add     eax, 14Ch
.text:00007580                 mov     [ebp+var_8], eax
.text:00007583                 jmp     short loc_758C
.text:00007585 ; ---------------------------------------------------------------------------
.text:00007585
.text:00007585 loc_7585:                               ; CODE XREF: NCrypto::NZipStrong::CDecoder::QueryInterface(_GUID const &,void * *)+6Aj
.text:00007585                 mov     [ebp+var_8], 0
.text:0000758C
.text:0000758C loc_758C:                               ; CODE XREF: NCrypto::NZipStrong::CDecoder::QueryInterface(_GUID const &,void * *)+77j
.text:0000758C                 mov     ecx, [ebp+arg_8]
.text:0000758F                 mov     edx, [ebp+var_8]
.text:00007592                 mov     [ecx], edx
.text:00007594                 jmp     short loc_759D
.text:00007596 ; ---------------------------------------------------------------------------
.text:00007596
.text:00007596 loc_7596:                               ; CODE XREF: NCrypto::NZipStrong::CDecoder::QueryInterface(_GUID const &,void * *)+64j
.text:00007596                 mov     eax, 80004002h
.text:0000759B                 jmp     short loc_75AE
.text:0000759D ; ---------------------------------------------------------------------------
.text:0000759D
.text:0000759D loc_759D:                               ; CODE XREF: NCrypto::NZipStrong::CDecoder::QueryInterface(_GUID const &,void * *)+52j
.text:0000759D                                         ; NCrypto::NZipStrong::CDecoder::QueryInterface(_GUID const &,void * *)+88j
.text:0000759D                 mov     eax, [ebp+this]
.text:000075A0                 mov     ecx, [eax+0Ch]
.text:000075A3                 add     ecx, 1
.text:000075A6                 mov     edx, [ebp+this]
.text:000075A9                 mov     [edx+0Ch], ecx
.text:000075AC                 xor     eax, eax
.text:000075AE
.text:000075AE loc_75AE:                               ; CODE XREF: NCrypto::NZipStrong::CDecoder::QueryInterface(_GUID const &,void * *)+8Fj
.text:000075AE                 add     esp, 8
.text:000075B1                 cmp     ebp, esp
.text:000075B3                 call    __RTC_CheckEsp
.text:000075B8                 mov     esp, ebp
.text:000075BA                 pop     ebp
.text:000075BB                 retn    0Ch
.text:000075BB ?QueryInterface@CDecoder@NZipStrong@NCrypto@@UAGJABU_GUID@@PAPAX@Z endp
.text:000075BB
.text:000075BB ; ---------------------------------------------------------------------------
.text:000075BE                 align 10h
.text:000075BE _text           ends
.text:000075BE
.text:000075C0 ; ===========================================================================
.text:000075C0
.text:000075C0 ; Segment type: Pure code
.text:000075C0 ; Segment permissions: Read/Execute
.text:000075C0 _text           segment para public 'CODE' use32
.text:000075C0                 assume cs:_text
.text:000075C0                 ;org 75C0h
.text:000075C0 ; COMDAT (pick any)
.text:000075C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000075C0
.text:000075C0 ; =============== S U B R O U T I N E =======================================
.text:000075C0
.text:000075C0 ; Attributes: bp-based frame
.text:000075C0
.text:000075C0 ; unsigned __int32 __stdcall NCrypto::NZipStrong::CDecoder::AddRef(NCrypto::NZipStrong::CDecoder *this)
.text:000075C0                 public ?AddRef@CDecoder@NZipStrong@NCrypto@@UAGKXZ
.text:000075C0 ?AddRef@CDecoder@NZipStrong@NCrypto@@UAGKXZ proc near
.text:000075C0                                         ; CODE XREF: [thunk]:NCrypto::NZipStrong::CDecoder::AddRef`adjustor{8}' (void)+5j
.text:000075C0                                         ; [thunk]:NCrypto::NZipStrong::CDecoder::AddRef`adjustor{332}' (void)+8j ...
.text:000075C0
.text:000075C0 var_4           = dword ptr -4
.text:000075C0 this            = dword ptr  8
.text:000075C0
.text:000075C0                 push    ebp
.text:000075C1                 mov     ebp, esp
.text:000075C3                 push    ecx
.text:000075C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000075CB                 mov     eax, [ebp+this]
.text:000075CE                 mov     ecx, [eax+0Ch]
.text:000075D1                 add     ecx, 1
.text:000075D4                 mov     [ebp+var_4], ecx
.text:000075D7                 mov     edx, [ebp+this]
.text:000075DA                 mov     eax, [ebp+var_4]
.text:000075DD                 mov     [edx+0Ch], eax
.text:000075E0                 mov     eax, [ebp+var_4]
.text:000075E3                 mov     esp, ebp
.text:000075E5                 pop     ebp
.text:000075E6                 retn    4
.text:000075E6 ?AddRef@CDecoder@NZipStrong@NCrypto@@UAGKXZ endp
.text:000075E6
.text:000075E6 ; ---------------------------------------------------------------------------
.text:000075E9                 align 4
.text:000075E9 _text           ends
.text:000075E9
.text:000075EC ; ===========================================================================
.text:000075EC
.text:000075EC ; Segment type: Pure code
.text:000075EC ; Segment permissions: Read/Execute
.text:000075EC _text           segment para public 'CODE' use32
.text:000075EC                 assume cs:_text
.text:000075EC                 ;org 75ECh
.text:000075EC ; COMDAT (pick any)
.text:000075EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000075EC
.text:000075EC ; =============== S U B R O U T I N E =======================================
.text:000075EC
.text:000075EC ; Attributes: bp-based frame
.text:000075EC
.text:000075EC ; unsigned __int32 __stdcall NCrypto::NZipStrong::CDecoder::Release(NCrypto::NZipStrong::CDecoder *this)
.text:000075EC                 public ?Release@CDecoder@NZipStrong@NCrypto@@UAGKXZ
.text:000075EC ?Release@CDecoder@NZipStrong@NCrypto@@UAGKXZ proc near
.text:000075EC                                         ; CODE XREF: [thunk]:NCrypto::NZipStrong::CDecoder::Release`adjustor{332}' (void)+8j
.text:000075EC                                         ; [thunk]:NCrypto::NZipStrong::CDecoder::Release`adjustor{4}' (void)+5j ...
.text:000075EC
.text:000075EC var_10          = dword ptr -10h
.text:000075EC var_C           = dword ptr -0Ch
.text:000075EC var_8           = dword ptr -8
.text:000075EC var_4           = dword ptr -4
.text:000075EC this            = dword ptr  8
.text:000075EC
.text:000075EC                 push    ebp
.text:000075ED                 mov     ebp, esp
.text:000075EF                 sub     esp, 10h
.text:000075F2                 mov     eax, 0CCCCCCCCh
.text:000075F7                 mov     [ebp+var_10], eax
.text:000075FA                 mov     [ebp+var_C], eax
.text:000075FD                 mov     [ebp+var_8], eax
.text:00007600                 mov     [ebp+var_4], eax
.text:00007603                 mov     eax, [ebp+this]
.text:00007606                 mov     ecx, [eax+0Ch]
.text:00007609                 sub     ecx, 1
.text:0000760C                 mov     [ebp+var_C], ecx
.text:0000760F                 mov     edx, [ebp+this]
.text:00007612                 mov     eax, [ebp+var_C]
.text:00007615                 mov     [edx+0Ch], eax
.text:00007618                 cmp     [ebp+var_C], 0
.text:0000761C                 jz      short loc_7626
.text:0000761E                 mov     ecx, [ebp+this]
.text:00007621                 mov     eax, [ecx+0Ch]
.text:00007624                 jmp     short loc_7650
.text:00007626 ; ---------------------------------------------------------------------------
.text:00007626
.text:00007626 loc_7626:                               ; CODE XREF: NCrypto::NZipStrong::CDecoder::Release(void)+30j
.text:00007626                 mov     edx, [ebp+this]
.text:00007629                 mov     [ebp+var_8], edx
.text:0000762C                 mov     eax, [ebp+var_8]
.text:0000762F                 mov     [ebp+var_4], eax
.text:00007632                 cmp     [ebp+var_4], 0
.text:00007636                 jz      short loc_7647
.text:00007638                 push    1
.text:0000763A                 mov     ecx, [ebp+var_4]
.text:0000763D                 call    ??_GCDecoder@NZipStrong@NCrypto@@QAEPAXI@Z ; NCrypto::NZipStrong::CDecoder::`scalar deleting destructor'(uint)
.text:00007642                 mov     [ebp+var_10], eax
.text:00007645                 jmp     short loc_764E
.text:00007647 ; ---------------------------------------------------------------------------
.text:00007647
.text:00007647 loc_7647:                               ; CODE XREF: NCrypto::NZipStrong::CDecoder::Release(void)+4Aj
.text:00007647                 mov     [ebp+var_10], 0
.text:0000764E
.text:0000764E loc_764E:                               ; CODE XREF: NCrypto::NZipStrong::CDecoder::Release(void)+59j
.text:0000764E                 xor     eax, eax
.text:00007650
.text:00007650 loc_7650:                               ; CODE XREF: NCrypto::NZipStrong::CDecoder::Release(void)+38j
.text:00007650                 add     esp, 10h
.text:00007653                 cmp     ebp, esp
.text:00007655                 call    __RTC_CheckEsp
.text:0000765A                 mov     esp, ebp
.text:0000765C                 pop     ebp
.text:0000765D                 retn    4
.text:0000765D ?Release@CDecoder@NZipStrong@NCrypto@@UAGKXZ endp
.text:0000765D
.text:0000765D _text           ends
.text:0000765D
.text:00007660 ; ===========================================================================
.text:00007660
.text:00007660 ; Segment type: Pure code
.text:00007660 ; Segment permissions: Read/Execute
.text:00007660 _text           segment para public 'CODE' use32
.text:00007660                 assume cs:_text
.text:00007660                 ;org 7660h
.text:00007660 ; COMDAT (pick any)
.text:00007660                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007660
.text:00007660 ; =============== S U B R O U T I N E =======================================
.text:00007660
.text:00007660 ; Attributes: bp-based frame
.text:00007660
.text:00007660 ; public: void * __thiscall NCrypto::NZipStrong::CDecoder::`scalar deleting destructor'(unsigned int)
.text:00007660                 public ??_GCDecoder@NZipStrong@NCrypto@@QAEPAXI@Z
.text:00007660 ??_GCDecoder@NZipStrong@NCrypto@@QAEPAXI@Z proc near
.text:00007660                                         ; CODE XREF: NCrypto::NZipStrong::CDecoder::Release(void)+51p
.text:00007660
.text:00007660 var_4           = dword ptr -4
.text:00007660 arg_0           = dword ptr  8
.text:00007660
.text:00007660                 push    ebp
.text:00007661                 mov     ebp, esp
.text:00007663                 push    ecx
.text:00007664                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000766B                 mov     [ebp+var_4], ecx
.text:0000766E                 mov     ecx, [ebp+var_4] ; this
.text:00007671                 call    ??1CDecoder@NZipStrong@NCrypto@@QAE@XZ ; NCrypto::NZipStrong::CDecoder::~CDecoder(void)
.text:00007676                 mov     eax, [ebp+arg_0]
.text:00007679                 and     eax, 1
.text:0000767C                 jz      short loc_768A
.text:0000767E                 mov     ecx, [ebp+var_4]
.text:00007681                 push    ecx             ; void *
.text:00007682                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007687                 add     esp, 4
.text:0000768A
.text:0000768A loc_768A:                               ; CODE XREF: NCrypto::NZipStrong::CDecoder::`scalar deleting destructor'(uint)+1Cj
.text:0000768A                 mov     eax, [ebp+var_4]
.text:0000768D                 add     esp, 4
.text:00007690                 cmp     ebp, esp
.text:00007692                 call    __RTC_CheckEsp
.text:00007697                 mov     esp, ebp
.text:00007699                 pop     ebp
.text:0000769A                 retn    4
.text:0000769A ??_GCDecoder@NZipStrong@NCrypto@@QAEPAXI@Z endp
.text:0000769A
.text:0000769A ; ---------------------------------------------------------------------------
.text:0000769D                 align 10h
.text:0000769D _text           ends
.text:0000769D
.text:000076A0 ; ===========================================================================
.text:000076A0
.text:000076A0 ; Segment type: Pure code
.text:000076A0 ; Segment permissions: Read/Execute
.text:000076A0 _text           segment para public 'CODE' use32
.text:000076A0                 assume cs:_text
.text:000076A0                 ;org 76A0h
.text:000076A0 ; COMDAT (pick any)
.text:000076A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000076A0
.text:000076A0 ; =============== S U B R O U T I N E =======================================
.text:000076A0
.text:000076A0 ; Attributes: bp-based frame
.text:000076A0
.text:000076A0 ; _DWORD __thiscall NCrypto::NZipStrong::CDecoder::~CDecoder(NCrypto::NZipStrong::CDecoder *__hidden this)
.text:000076A0                 public ??1CDecoder@NZipStrong@NCrypto@@QAE@XZ
.text:000076A0 ??1CDecoder@NZipStrong@NCrypto@@QAE@XZ proc near
.text:000076A0                                         ; CODE XREF: NCrypto::NZipStrong::CDecoder::`scalar deleting destructor'(uint)+11p
.text:000076A0
.text:000076A0 var_4           = dword ptr -4
.text:000076A0
.text:000076A0                 push    ebp
.text:000076A1                 mov     ebp, esp
.text:000076A3                 push    ecx
.text:000076A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000076AB                 mov     [ebp+var_4], ecx
.text:000076AE                 mov     ecx, [ebp+var_4] ; this
.text:000076B1                 call    ??1CBaseCoder@NZipStrong@NCrypto@@QAE@XZ ; NCrypto::NZipStrong::CBaseCoder::~CBaseCoder(void)
.text:000076B6                 add     esp, 4
.text:000076B9                 cmp     ebp, esp
.text:000076BB                 call    __RTC_CheckEsp
.text:000076C0                 mov     esp, ebp
.text:000076C2                 pop     ebp
.text:000076C3                 retn
.text:000076C3 ??1CDecoder@NZipStrong@NCrypto@@QAE@XZ endp
.text:000076C3
.text:000076C3 _text           ends
.text:000076C3
.text:000076C4 ; ===========================================================================
.text:000076C4
.text:000076C4 ; Segment type: Pure code
.text:000076C4 ; Segment permissions: Read/Execute
.text:000076C4 _text           segment para public 'CODE' use32
.text:000076C4                 assume cs:_text
.text:000076C4                 ;org 76C4h
.text:000076C4 ; COMDAT (pick any)
.text:000076C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000076C4
.text:000076C4 ; =============== S U B R O U T I N E =======================================
.text:000076C4
.text:000076C4 ; Attributes: bp-based frame
.text:000076C4
.text:000076C4 ; _DWORD __thiscall NCrypto::NZipStrong::CBaseCoder::~CBaseCoder(NCrypto::NZipStrong::CBaseCoder *__hidden this)
.text:000076C4                 public ??1CBaseCoder@NZipStrong@NCrypto@@QAE@XZ
.text:000076C4 ??1CBaseCoder@NZipStrong@NCrypto@@QAE@XZ proc near
.text:000076C4                                         ; CODE XREF: NCrypto::NZipStrong::CDecoder::~CDecoder(void)+11p
.text:000076C4
.text:000076C4 var_4           = dword ptr -4
.text:000076C4
.text:000076C4                 push    ebp
.text:000076C5                 mov     ebp, esp
.text:000076C7                 push    ecx
.text:000076C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000076CF                 mov     [ebp+var_4], ecx
.text:000076D2                 mov     ecx, [ebp+var_4]
.text:000076D5                 add     ecx, 174h
.text:000076DB                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:000076E0                 add     esp, 4
.text:000076E3                 cmp     ebp, esp
.text:000076E5                 call    __RTC_CheckEsp
.text:000076EA                 mov     esp, ebp
.text:000076EC                 pop     ebp
.text:000076ED                 retn
.text:000076ED ??1CBaseCoder@NZipStrong@NCrypto@@QAE@XZ endp
.text:000076ED
.text:000076ED ; ---------------------------------------------------------------------------
.text:000076EE                 align 10h
.text:000076EE _text           ends
.text:000076EE
.text:000076F0 ; ===========================================================================
.text:000076F0
.text:000076F0 ; Segment type: Pure code
.text:000076F0 ; Segment permissions: Read/Execute
.text:000076F0 _text           segment para public 'CODE' use32
.text:000076F0                 assume cs:_text
.text:000076F0                 ;org 76F0h
.text:000076F0 ; COMDAT (pick any)
.text:000076F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000076F0
.text:000076F0 ; =============== S U B R O U T I N E =======================================
.text:000076F0
.text:000076F0 ; Attributes: bp-based frame
.text:000076F0
.text:000076F0 ; _DWORD __thiscall NCrypto::NZip::CDecoder::CDecoder(NCrypto::NZip::CDecoder *__hidden this)
.text:000076F0                 public ??0CDecoder@NZip@NCrypto@@QAE@XZ
.text:000076F0 ??0CDecoder@NZip@NCrypto@@QAE@XZ proc near
.text:000076F0                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+4C6p
.text:000076F0
.text:000076F0 var_4           = dword ptr -4
.text:000076F0
.text:000076F0                 push    ebp
.text:000076F1                 mov     ebp, esp
.text:000076F3                 push    ecx
.text:000076F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000076FB                 mov     [ebp+var_4], ecx
.text:000076FE                 mov     ecx, [ebp+var_4] ; this
.text:00007701                 call    ??0CCipher@NZip@NCrypto@@QAE@XZ ; NCrypto::NZip::CCipher::CCipher(void)
.text:00007706                 mov     eax, [ebp+var_4]
.text:00007709                 mov     dword ptr [eax], offset ??_7CDecoder@NZip@NCrypto@@6BICompressFilter@@@ ; const NCrypto::NZip::CDecoder::`vftable'{for `ICompressFilter'}
.text:0000770F                 mov     ecx, [ebp+var_4]
.text:00007712                 mov     dword ptr [ecx+4], offset ??_7CDecoder@NZip@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::NZip::CDecoder::`vftable'{for `ICryptoSetPassword'}
.text:00007719                 mov     eax, [ebp+var_4]
.text:0000771C                 add     esp, 4
.text:0000771F                 cmp     ebp, esp
.text:00007721                 call    __RTC_CheckEsp
.text:00007726                 mov     esp, ebp
.text:00007728                 pop     ebp
.text:00007729                 retn
.text:00007729 ??0CDecoder@NZip@NCrypto@@QAE@XZ endp
.text:00007729
.text:00007729 ; ---------------------------------------------------------------------------
.text:0000772A                 align 4
.text:0000772A _text           ends
.text:0000772A
.rdata:0000772C ; ===========================================================================
.rdata:0000772C
.rdata:0000772C ; Segment type: Pure data
.rdata:0000772C ; Segment permissions: Read
.rdata:0000772C _rdata          segment dword public 'DATA' use32
.rdata:0000772C                 assume cs:_rdata
.rdata:0000772C                 ;org 772Ch
.rdata:0000772C ; COMDAT (pick largest)
.rdata:0000772C                 dd offset ??_R4CDecoder@NZip@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::NZip::CDecoder::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata:00007730                 public ??_7CDecoder@NZip@NCrypto@@6BICryptoSetPassword@@@
.rdata:00007730 ; const NCrypto::NZip::CDecoder::`vftable'{for `ICryptoSetPassword'}
.rdata:00007730 ??_7CDecoder@NZip@NCrypto@@6BICryptoSetPassword@@@ dd offset ?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00007730                                         ; DATA XREF: NCrypto::NZip::CDecoder::CDecoder(void)+22o
.rdata:00007730                                         ; [thunk]:NCrypto::NZip::CCipher::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00007734                 dd offset ?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::NZip::CCipher::AddRef`adjustor{4}' (void)
.rdata:00007738                 dd offset ?Release@CCipher@NZip@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::NZip::CCipher::Release`adjustor{4}' (void)
.rdata:0000773C                 dd offset ?CryptoSetPassword@CCipher@NZip@NCrypto@@UAGJPBEI@Z ; NCrypto::NZip::CCipher::CryptoSetPassword(uchar const *,uint)
.rdata:0000773C _rdata          ends
.rdata:0000773C
.rdata:00007740 ; ===========================================================================
.rdata:00007740
.rdata:00007740 ; Segment type: Pure data
.rdata:00007740 ; Segment permissions: Read
.rdata:00007740 _rdata          segment dword public 'DATA' use32
.rdata:00007740                 assume cs:_rdata
.rdata:00007740                 ;org 7740h
.rdata:00007740 ; COMDAT (pick largest)
.rdata:00007740                 dd offset ??_R4CDecoder@NZip@NCrypto@@6BICompressFilter@@@ ; const NCrypto::NZip::CDecoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:00007744                 public ??_7CDecoder@NZip@NCrypto@@6BICompressFilter@@@
.rdata:00007744 ; const NCrypto::NZip::CDecoder::`vftable'{for `ICompressFilter'}
.rdata:00007744 ??_7CDecoder@NZip@NCrypto@@6BICompressFilter@@@ dd offset ?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.rdata:00007744                                         ; DATA XREF: NCrypto::NZip::CDecoder::CDecoder(void)+19o
.rdata:00007744                                         ; NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)
.rdata:00007748                 dd offset ?AddRef@CCipher@NZip@NCrypto@@UAGKXZ ; NCrypto::NZip::CCipher::AddRef(void)
.rdata:0000774C                 dd offset ?Release@CCipher@NZip@NCrypto@@UAGKXZ ; NCrypto::NZip::CCipher::Release(void)
.rdata:00007750                 dd offset ?Init@CCipher@NZip@NCrypto@@UAGJXZ ; NCrypto::NZip::CCipher::Init(void)
.rdata:00007754                 dd offset ?Filter@CDecoder@NZip@NCrypto@@UAGIPAEI@Z ; NCrypto::NZip::CDecoder::Filter(uchar *,uint)
.rdata:00007754 _rdata          ends
.rdata:00007754
.rdata$r:00007758 ; ===========================================================================
.rdata$r:00007758
.rdata$r:00007758 ; Segment type: Pure data
.rdata$r:00007758 ; Segment permissions: Read
.rdata$r:00007758 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007758                 assume cs:_rdata$r
.rdata$r:00007758                 ;org 7758h
.rdata$r:00007758 ; COMDAT (pick any)
.rdata$r:00007758                 public ??_R4CDecoder@NZip@NCrypto@@6BICompressFilter@@@
.rdata$r:00007758 ; const NCrypto::NZip::CDecoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:00007758 ??_R4CDecoder@NZip@NCrypto@@6BICompressFilter@@@ db    0
.rdata$r:00007758                                         ; DATA XREF: .rdata:00007740o
.rdata$r:00007759                 db    0
.rdata$r:0000775A                 db    0
.rdata$r:0000775B                 db    0
.rdata$r:0000775C                 db    0
.rdata$r:0000775D                 db    0
.rdata$r:0000775E                 db    0
.rdata$r:0000775F                 db    0
.rdata$r:00007760                 db    0
.rdata$r:00007761                 db    0
.rdata$r:00007762                 db    0
.rdata$r:00007763                 db    0
.rdata$r:00007764                 dd offset ??_R0?AVCDecoder@NZip@NCrypto@@@8 ; NCrypto::NZip::CDecoder `RTTI Type Descriptor'
.rdata$r:00007768                 dd offset ??_R3CDecoder@NZip@NCrypto@@8 ; NCrypto::NZip::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007768 _rdata$r        ends
.rdata$r:00007768
.data:0000776C ; ===========================================================================
.data:0000776C
.data:0000776C ; Segment type: Pure data
.data:0000776C ; Segment permissions: Read/Write
.data:0000776C _data           segment dword public 'DATA' use32
.data:0000776C                 assume cs:_data
.data:0000776C                 ;org 776Ch
.data:0000776C ; COMDAT (pick any)
.data:0000776C                 public ??_R0?AVCDecoder@NZip@NCrypto@@@8
.data:0000776C ; class NCrypto::NZip::CDecoder `RTTI Type Descriptor'
.data:0000776C ??_R0?AVCDecoder@NZip@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:0000776C                                         ; DATA XREF: .rdata$r:00007764o
.data:0000776C                                         ; .rdata$r:NCrypto::NZip::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000776C                                         ; const type_info::`vftable'
.data:00007770                 db    0
.data:00007771                 db    0
.data:00007772                 db    0
.data:00007773                 db    0
.data:00007774                 db  2Eh ; .
.data:00007775                 db  3Fh ; ?
.data:00007776                 db  41h ; A
.data:00007777                 db  56h ; V
.data:00007778                 db  43h ; C
.data:00007779                 db  44h ; D
.data:0000777A                 db  65h ; e
.data:0000777B                 db  63h ; c
.data:0000777C                 db  6Fh ; o
.data:0000777D                 db  64h ; d
.data:0000777E                 db  65h ; e
.data:0000777F                 db  72h ; r
.data:00007780                 db  40h ; @
.data:00007781                 db  4Eh ; N
.data:00007782                 db  5Ah ; Z
.data:00007783                 db  69h ; i
.data:00007784                 db  70h ; p
.data:00007785                 db  40h ; @
.data:00007786                 db  4Eh ; N
.data:00007787                 db  43h ; C
.data:00007788                 db  72h ; r
.data:00007789                 db  79h ; y
.data:0000778A                 db  70h ; p
.data:0000778B                 db  74h ; t
.data:0000778C                 db  6Fh ; o
.data:0000778D                 db  40h ; @
.data:0000778E                 db  40h ; @
.data:0000778F                 db    0
.data:0000778F _data           ends
.data:0000778F
.rdata$r:00007790 ; ===========================================================================
.rdata$r:00007790
.rdata$r:00007790 ; Segment type: Pure data
.rdata$r:00007790 ; Segment permissions: Read
.rdata$r:00007790 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007790                 assume cs:_rdata$r
.rdata$r:00007790                 ;org 7790h
.rdata$r:00007790 ; COMDAT (pick any)
.rdata$r:00007790                 public ??_R3CDecoder@NZip@NCrypto@@8
.rdata$r:00007790 ; NCrypto::NZip::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007790 ??_R3CDecoder@NZip@NCrypto@@8 db    0   ; DATA XREF: .rdata$r:00007768o
.rdata$r:00007790                                         ; .rdata$r:000077D8o ...
.rdata$r:00007791                 db    0
.rdata$r:00007792                 db    0
.rdata$r:00007793                 db    0
.rdata$r:00007794                 db    1
.rdata$r:00007795                 db    0
.rdata$r:00007796                 db    0
.rdata$r:00007797                 db    0
.rdata$r:00007798                 db    7
.rdata$r:00007799                 db    0
.rdata$r:0000779A                 db    0
.rdata$r:0000779B                 db    0
.rdata$r:0000779C                 dd offset ??_R2CDecoder@NZip@NCrypto@@8 ; NCrypto::NZip::CDecoder::`RTTI Base Class Array'
.rdata$r:0000779C _rdata$r        ends
.rdata$r:0000779C
.rdata$r:000077A0 ; ===========================================================================
.rdata$r:000077A0
.rdata$r:000077A0 ; Segment type: Pure data
.rdata$r:000077A0 ; Segment permissions: Read
.rdata$r:000077A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000077A0                 assume cs:_rdata$r
.rdata$r:000077A0                 ;org 77A0h
.rdata$r:000077A0 ; COMDAT (pick any)
.rdata$r:000077A0                 public ??_R2CDecoder@NZip@NCrypto@@8
.rdata$r:000077A0 ; NCrypto::NZip::CDecoder::`RTTI Base Class Array'
.rdata$r:000077A0 ??_R2CDecoder@NZip@NCrypto@@8 dd offset ??_R1A@?0A@EA@CDecoder@NZip@NCrypto@@8
.rdata$r:000077A0                                         ; DATA XREF: .rdata$r:0000779Co
.rdata$r:000077A0                                         ; NCrypto::NZip::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000077A4                 dd offset ??_R1A@?0A@EA@CCipher@NZip@NCrypto@@8 ; NCrypto::NZip::CCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000077A8                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000077AC                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:000077B0                 dd offset ??_R13?0A@EA@ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000077B4                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:000077B8                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:000077BC                 db    0
.rdata$r:000077BD                 align 10h
.rdata$r:000077BD _rdata$r        ends
.rdata$r:000077BD
.rdata$r:000077C0 ; ===========================================================================
.rdata$r:000077C0
.rdata$r:000077C0 ; Segment type: Pure data
.rdata$r:000077C0 ; Segment permissions: Read
.rdata$r:000077C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000077C0                 assume cs:_rdata$r
.rdata$r:000077C0                 ;org 77C0h
.rdata$r:000077C0 ; COMDAT (pick any)
.rdata$r:000077C0                 public ??_R1A@?0A@EA@CDecoder@NZip@NCrypto@@8
.rdata$r:000077C0 ; NCrypto::NZip::CDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000077C0 ??_R1A@?0A@EA@CDecoder@NZip@NCrypto@@8 dd offset ??_R0?AVCDecoder@NZip@NCrypto@@@8
.rdata$r:000077C0                                         ; DATA XREF: .rdata$r:NCrypto::NZip::CDecoder::`RTTI Base Class Array'o
.rdata$r:000077C0                                         ; NCrypto::NZip::CDecoder `RTTI Type Descriptor'
.rdata$r:000077C4                 db    6
.rdata$r:000077C5                 db    0
.rdata$r:000077C6                 db    0
.rdata$r:000077C7                 db    0
.rdata$r:000077C8                 db    0
.rdata$r:000077C9                 db    0
.rdata$r:000077CA                 db    0
.rdata$r:000077CB                 db    0
.rdata$r:000077CC                 db 0FFh
.rdata$r:000077CD                 db 0FFh
.rdata$r:000077CE                 db 0FFh
.rdata$r:000077CF                 db 0FFh
.rdata$r:000077D0                 db    0
.rdata$r:000077D1                 db    0
.rdata$r:000077D2                 db    0
.rdata$r:000077D3                 db    0
.rdata$r:000077D4                 db  40h ; @
.rdata$r:000077D5                 db    0
.rdata$r:000077D6                 db    0
.rdata$r:000077D7                 db    0
.rdata$r:000077D8                 dd offset ??_R3CDecoder@NZip@NCrypto@@8 ; NCrypto::NZip::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000077D8 _rdata$r        ends
.rdata$r:000077D8
.rdata$r:000077DC ; ===========================================================================
.rdata$r:000077DC
.rdata$r:000077DC ; Segment type: Pure data
.rdata$r:000077DC ; Segment permissions: Read
.rdata$r:000077DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000077DC                 assume cs:_rdata$r
.rdata$r:000077DC                 ;org 77DCh
.rdata$r:000077DC ; COMDAT (pick any)
.rdata$r:000077DC                 public ??_R1A@?0A@EA@CCipher@NZip@NCrypto@@8
.rdata$r:000077DC ; NCrypto::NZip::CCipher::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000077DC ??_R1A@?0A@EA@CCipher@NZip@NCrypto@@8 dd offset ??_R0?AVCCipher@NZip@NCrypto@@@8
.rdata$r:000077DC                                         ; DATA XREF: .rdata$r:000077A4o
.rdata$r:000077DC                                         ; .rdata$r:NCrypto::NZip::CCipher::`RTTI Base Class Array'o
.rdata$r:000077DC                                         ; NCrypto::NZip::CCipher `RTTI Type Descriptor'
.rdata$r:000077E0                 db    5
.rdata$r:000077E1                 db    0
.rdata$r:000077E2                 db    0
.rdata$r:000077E3                 db    0
.rdata$r:000077E4                 db    0
.rdata$r:000077E5                 db    0
.rdata$r:000077E6                 db    0
.rdata$r:000077E7                 db    0
.rdata$r:000077E8                 db 0FFh
.rdata$r:000077E9                 db 0FFh
.rdata$r:000077EA                 db 0FFh
.rdata$r:000077EB                 db 0FFh
.rdata$r:000077EC                 db    0
.rdata$r:000077ED                 db    0
.rdata$r:000077EE                 db    0
.rdata$r:000077EF                 db    0
.rdata$r:000077F0                 db  40h ; @
.rdata$r:000077F1                 db    0
.rdata$r:000077F2                 db    0
.rdata$r:000077F3                 db    0
.rdata$r:000077F4                 dd offset ??_R3CCipher@NZip@NCrypto@@8 ; NCrypto::NZip::CCipher::`RTTI Class Hierarchy Descriptor'
.rdata$r:000077F4 _rdata$r        ends
.rdata$r:000077F4
.data:000077F8 ; ===========================================================================
.data:000077F8
.data:000077F8 ; Segment type: Pure data
.data:000077F8 ; Segment permissions: Read/Write
.data:000077F8 _data           segment dword public 'DATA' use32
.data:000077F8                 assume cs:_data
.data:000077F8                 ;org 77F8h
.data:000077F8 ; COMDAT (pick any)
.data:000077F8                 public ??_R0?AVCCipher@NZip@NCrypto@@@8
.data:000077F8 ; class NCrypto::NZip::CCipher `RTTI Type Descriptor'
.data:000077F8 ??_R0?AVCCipher@NZip@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:000077F8                                         ; DATA XREF: .rdata$r:NCrypto::NZip::CCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000077F8                                         ; .rdata$r:000083A4o ...
.data:000077F8                                         ; const type_info::`vftable'
.data:000077FC                 align 10h
.data:00007800 a_?avccipher@nz db '.?AVCCipher@NZip@NCrypto@@',0
.data:0000781B                 align 4
.data:0000781B _data           ends
.data:0000781B
.rdata$r:0000781C ; ===========================================================================
.rdata$r:0000781C
.rdata$r:0000781C ; Segment type: Pure data
.rdata$r:0000781C ; Segment permissions: Read
.rdata$r:0000781C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000781C                 assume cs:_rdata$r
.rdata$r:0000781C                 ;org 781Ch
.rdata$r:0000781C ; COMDAT (pick any)
.rdata$r:0000781C                 public ??_R3CCipher@NZip@NCrypto@@8
.rdata$r:0000781C ; NCrypto::NZip::CCipher::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000781C ??_R3CCipher@NZip@NCrypto@@8 db    0    ; DATA XREF: .rdata$r:000077F4o
.rdata$r:0000781C                                         ; .rdata$r:000083A8o ...
.rdata$r:0000781D                 db    0
.rdata$r:0000781E                 db    0
.rdata$r:0000781F                 db    0
.rdata$r:00007820                 db    1
.rdata$r:00007821                 db    0
.rdata$r:00007822                 db    0
.rdata$r:00007823                 db    0
.rdata$r:00007824                 db    6
.rdata$r:00007825                 db    0
.rdata$r:00007826                 db    0
.rdata$r:00007827                 db    0
.rdata$r:00007828                 dd offset ??_R2CCipher@NZip@NCrypto@@8 ; NCrypto::NZip::CCipher::`RTTI Base Class Array'
.rdata$r:00007828 _rdata$r        ends
.rdata$r:00007828
.rdata$r:0000782C ; ===========================================================================
.rdata$r:0000782C
.rdata$r:0000782C ; Segment type: Pure data
.rdata$r:0000782C ; Segment permissions: Read
.rdata$r:0000782C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000782C                 assume cs:_rdata$r
.rdata$r:0000782C                 ;org 782Ch
.rdata$r:0000782C ; COMDAT (pick any)
.rdata$r:0000782C                 public ??_R2CCipher@NZip@NCrypto@@8
.rdata$r:0000782C ; NCrypto::NZip::CCipher::`RTTI Base Class Array'
.rdata$r:0000782C ??_R2CCipher@NZip@NCrypto@@8 dd offset ??_R1A@?0A@EA@CCipher@NZip@NCrypto@@8
.rdata$r:0000782C                                         ; DATA XREF: .rdata$r:00007828o
.rdata$r:0000782C                                         ; NCrypto::NZip::CCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007830                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007834                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00007838                 dd offset ??_R13?0A@EA@ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000783C                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00007840                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00007844                 db    0
.rdata$r:00007845                 align 4
.rdata$r:00007845 _rdata$r        ends
.rdata$r:00007845
.rdata$r:00007848 ; ===========================================================================
.rdata$r:00007848
.rdata$r:00007848 ; Segment type: Pure data
.rdata$r:00007848 ; Segment permissions: Read
.rdata$r:00007848 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007848                 assume cs:_rdata$r
.rdata$r:00007848                 ;org 7848h
.rdata$r:00007848 ; COMDAT (pick any)
.rdata$r:00007848                 public ??_R4CDecoder@NZip@NCrypto@@6BICryptoSetPassword@@@
.rdata$r:00007848 ; const NCrypto::NZip::CDecoder::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata$r:00007848 ??_R4CDecoder@NZip@NCrypto@@6BICryptoSetPassword@@@ db    0
.rdata$r:00007848                                         ; DATA XREF: .rdata:0000772Co
.rdata$r:00007849                 db    0
.rdata$r:0000784A                 db    0
.rdata$r:0000784B                 db    0
.rdata$r:0000784C                 db    4
.rdata$r:0000784D                 db    0
.rdata$r:0000784E                 db    0
.rdata$r:0000784F                 db    0
.rdata$r:00007850                 db    0
.rdata$r:00007851                 db    0
.rdata$r:00007852                 db    0
.rdata$r:00007853                 db    0
.rdata$r:00007854                 dd offset ??_R0?AVCDecoder@NZip@NCrypto@@@8 ; NCrypto::NZip::CDecoder `RTTI Type Descriptor'
.rdata$r:00007858                 dd offset ??_R3CDecoder@NZip@NCrypto@@8 ; NCrypto::NZip::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007858 _rdata$r        ends
.rdata$r:00007858
.text:0000785C ; ===========================================================================
.text:0000785C
.text:0000785C ; Segment type: Pure code
.text:0000785C ; Segment permissions: Read/Execute
.text:0000785C _text           segment para public 'CODE' use32
.text:0000785C                 assume cs:_text
.text:0000785C                 ;org 785Ch
.text:0000785C ; COMDAT (pick any)
.text:0000785C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000785C
.text:0000785C ; =============== S U B R O U T I N E =======================================
.text:0000785C
.text:0000785C ; Attributes: bp-based frame
.text:0000785C
.text:0000785C ; __int32 __stdcall NCrypto::NZip::CCipher::QueryInterface(NCrypto::NZip::CCipher *this, const struct _GUID *Buf1, void **)
.text:0000785C                 public ?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.text:0000785C ?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000785C                                         ; CODE XREF: [thunk]:NCrypto::NZip::CCipher::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:0000785C                                         ; DATA XREF: .rdata:const NCrypto::NZip::CDecoder::`vftable'{for `ICompressFilter'}o ...
.text:0000785C
.text:0000785C var_8           = dword ptr -8
.text:0000785C var_4           = dword ptr -4
.text:0000785C this            = dword ptr  8
.text:0000785C Buf1            = dword ptr  0Ch
.text:0000785C arg_8           = dword ptr  10h
.text:0000785C
.text:0000785C                 push    ebp
.text:0000785D                 mov     ebp, esp
.text:0000785F                 sub     esp, 8
.text:00007862                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007869                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007870                 mov     eax, [ebp+arg_8]
.text:00007873                 mov     dword ptr [eax], 0
.text:00007879                 push    offset _IID_IUnknown ; Buf2
.text:0000787E                 mov     ecx, [ebp+Buf1]
.text:00007881                 push    ecx             ; Buf1
.text:00007882                 call    ___@8           ; __(x,x)
.text:00007887                 test    eax, eax
.text:00007889                 jz      short loc_78AD
.text:0000788B                 cmp     [ebp+this], 0
.text:0000788F                 jz      short loc_789C
.text:00007891                 mov     edx, [ebp+this]
.text:00007894                 add     edx, 4
.text:00007897                 mov     [ebp+var_4], edx
.text:0000789A                 jmp     short loc_78A3
.text:0000789C ; ---------------------------------------------------------------------------
.text:0000789C
.text:0000789C loc_789C:                               ; CODE XREF: NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)+33j
.text:0000789C                 mov     [ebp+var_4], 0
.text:000078A3
.text:000078A3 loc_78A3:                               ; CODE XREF: NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)+3Ej
.text:000078A3                 mov     eax, [ebp+arg_8]
.text:000078A6                 mov     ecx, [ebp+var_4]
.text:000078A9                 mov     [eax], ecx
.text:000078AB                 jmp     short loc_78E8
.text:000078AD ; ---------------------------------------------------------------------------
.text:000078AD
.text:000078AD loc_78AD:                               ; CODE XREF: NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)+2Dj
.text:000078AD                 push    offset _IID_ICryptoSetPassword ; Buf2
.text:000078B2                 mov     edx, [ebp+Buf1]
.text:000078B5                 push    edx             ; Buf1
.text:000078B6                 call    ___@8           ; __(x,x)
.text:000078BB                 test    eax, eax
.text:000078BD                 jz      short loc_78E1
.text:000078BF                 cmp     [ebp+this], 0
.text:000078C3                 jz      short loc_78D0
.text:000078C5                 mov     eax, [ebp+this]
.text:000078C8                 add     eax, 4
.text:000078CB                 mov     [ebp+var_8], eax
.text:000078CE                 jmp     short loc_78D7
.text:000078D0 ; ---------------------------------------------------------------------------
.text:000078D0
.text:000078D0 loc_78D0:                               ; CODE XREF: NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)+67j
.text:000078D0                 mov     [ebp+var_8], 0
.text:000078D7
.text:000078D7 loc_78D7:                               ; CODE XREF: NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)+72j
.text:000078D7                 mov     ecx, [ebp+arg_8]
.text:000078DA                 mov     edx, [ebp+var_8]
.text:000078DD                 mov     [ecx], edx
.text:000078DF                 jmp     short loc_78E8
.text:000078E1 ; ---------------------------------------------------------------------------
.text:000078E1
.text:000078E1 loc_78E1:                               ; CODE XREF: NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)+61j
.text:000078E1                 mov     eax, 80004002h
.text:000078E6                 jmp     short loc_78F9
.text:000078E8 ; ---------------------------------------------------------------------------
.text:000078E8
.text:000078E8 loc_78E8:                               ; CODE XREF: NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)+4Fj
.text:000078E8                                         ; NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)+83j
.text:000078E8                 mov     eax, [ebp+this]
.text:000078EB                 mov     ecx, [eax+8]
.text:000078EE                 add     ecx, 1
.text:000078F1                 mov     edx, [ebp+this]
.text:000078F4                 mov     [edx+8], ecx
.text:000078F7                 xor     eax, eax
.text:000078F9
.text:000078F9 loc_78F9:                               ; CODE XREF: NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)+8Aj
.text:000078F9                 add     esp, 8
.text:000078FC                 cmp     ebp, esp
.text:000078FE                 call    __RTC_CheckEsp
.text:00007903                 mov     esp, ebp
.text:00007905                 pop     ebp
.text:00007906                 retn    0Ch
.text:00007906 ?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z endp
.text:00007906
.text:00007906 ; ---------------------------------------------------------------------------
.text:00007909                 align 4
.text:00007909 _text           ends
.text:00007909
.text:0000790C ; ===========================================================================
.text:0000790C
.text:0000790C ; Segment type: Pure code
.text:0000790C ; Segment permissions: Read/Execute
.text:0000790C _text           segment para public 'CODE' use32
.text:0000790C                 assume cs:_text
.text:0000790C                 ;org 790Ch
.text:0000790C ; COMDAT (pick any)
.text:0000790C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000790C
.text:0000790C ; =============== S U B R O U T I N E =======================================
.text:0000790C
.text:0000790C ; Attributes: bp-based frame
.text:0000790C
.text:0000790C ; unsigned __int32 __stdcall NCrypto::NZip::CCipher::AddRef(NCrypto::NZip::CCipher *this)
.text:0000790C                 public ?AddRef@CCipher@NZip@NCrypto@@UAGKXZ
.text:0000790C ?AddRef@CCipher@NZip@NCrypto@@UAGKXZ proc near
.text:0000790C                                         ; CODE XREF: [thunk]:NCrypto::NZip::CCipher::AddRef`adjustor{4}' (void)+5j
.text:0000790C                                         ; DATA XREF: .rdata:00007748o ...
.text:0000790C
.text:0000790C var_4           = dword ptr -4
.text:0000790C this            = dword ptr  8
.text:0000790C
.text:0000790C                 push    ebp
.text:0000790D                 mov     ebp, esp
.text:0000790F                 push    ecx
.text:00007910                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007917                 mov     eax, [ebp+this]
.text:0000791A                 mov     ecx, [eax+8]
.text:0000791D                 add     ecx, 1
.text:00007920                 mov     [ebp+var_4], ecx
.text:00007923                 mov     edx, [ebp+this]
.text:00007926                 mov     eax, [ebp+var_4]
.text:00007929                 mov     [edx+8], eax
.text:0000792C                 mov     eax, [ebp+var_4]
.text:0000792F                 mov     esp, ebp
.text:00007931                 pop     ebp
.text:00007932                 retn    4
.text:00007932 ?AddRef@CCipher@NZip@NCrypto@@UAGKXZ endp
.text:00007932
.text:00007932 ; ---------------------------------------------------------------------------
.text:00007935                 align 4
.text:00007935 _text           ends
.text:00007935
.text:00007938 ; ===========================================================================
.text:00007938
.text:00007938 ; Segment type: Pure code
.text:00007938 ; Segment permissions: Read/Execute
.text:00007938 _text           segment para public 'CODE' use32
.text:00007938                 assume cs:_text
.text:00007938                 ;org 7938h
.text:00007938 ; COMDAT (pick any)
.text:00007938                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007938
.text:00007938 ; =============== S U B R O U T I N E =======================================
.text:00007938
.text:00007938 ; Attributes: bp-based frame
.text:00007938
.text:00007938 ; unsigned __int32 __stdcall NCrypto::NZip::CCipher::Release(NCrypto::NZip::CCipher *this)
.text:00007938                 public ?Release@CCipher@NZip@NCrypto@@UAGKXZ
.text:00007938 ?Release@CCipher@NZip@NCrypto@@UAGKXZ proc near
.text:00007938                                         ; CODE XREF: [thunk]:NCrypto::NZip::CCipher::Release`adjustor{4}' (void)+5j
.text:00007938                                         ; DATA XREF: .rdata:0000774Co ...
.text:00007938
.text:00007938 var_8           = dword ptr -8
.text:00007938 var_4           = dword ptr -4
.text:00007938 this            = dword ptr  8
.text:00007938
.text:00007938                 push    ebp
.text:00007939                 mov     ebp, esp
.text:0000793B                 sub     esp, 8
.text:0000793E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007945                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000794C                 mov     eax, [ebp+this]
.text:0000794F                 mov     ecx, [eax+8]
.text:00007952                 sub     ecx, 1
.text:00007955                 mov     [ebp+var_8], ecx
.text:00007958                 mov     edx, [ebp+this]
.text:0000795B                 mov     eax, [ebp+var_8]
.text:0000795E                 mov     [edx+8], eax
.text:00007961                 cmp     [ebp+var_8], 0
.text:00007965                 jz      short loc_796F
.text:00007967                 mov     ecx, [ebp+this]
.text:0000796A                 mov     eax, [ecx+8]
.text:0000796D                 jmp     short loc_7983
.text:0000796F ; ---------------------------------------------------------------------------
.text:0000796F
.text:0000796F loc_796F:                               ; CODE XREF: NCrypto::NZip::CCipher::Release(void)+2Dj
.text:0000796F                 mov     edx, [ebp+this]
.text:00007972                 mov     [ebp+var_4], edx
.text:00007975                 mov     eax, [ebp+var_4]
.text:00007978                 push    eax             ; void *
.text:00007979                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000797E                 add     esp, 4
.text:00007981                 xor     eax, eax
.text:00007983
.text:00007983 loc_7983:                               ; CODE XREF: NCrypto::NZip::CCipher::Release(void)+35j
.text:00007983                 add     esp, 8
.text:00007986                 cmp     ebp, esp
.text:00007988                 call    __RTC_CheckEsp
.text:0000798D                 mov     esp, ebp
.text:0000798F                 pop     ebp
.text:00007990                 retn    4
.text:00007990 ?Release@CCipher@NZip@NCrypto@@UAGKXZ endp
.text:00007990
.text:00007990 ; ---------------------------------------------------------------------------
.text:00007993                 align 4
.text:00007993 _text           ends
.text:00007993
.text:00007994 ; ===========================================================================
.text:00007994
.text:00007994 ; Segment type: Pure code
.text:00007994 ; Segment permissions: Read/Execute
.text:00007994 _text           segment para public 'CODE' use32
.text:00007994                 assume cs:_text
.text:00007994                 ;org 7994h
.text:00007994 ; COMDAT (pick any)
.text:00007994                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007994
.text:00007994 ; =============== S U B R O U T I N E =======================================
.text:00007994
.text:00007994 ; Attributes: bp-based frame
.text:00007994
.text:00007994 ; _DWORD __thiscall NArchive::NZip::CMethodItem::CMethodItem(NArchive::NZip::CMethodItem *__hidden this)
.text:00007994                 public ??0CMethodItem@NZip@NArchive@@QAE@XZ
.text:00007994 ??0CMethodItem@NZip@NArchive@@QAE@XZ proc near
.text:00007994                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+9D2p
.text:00007994
.text:00007994 var_4           = dword ptr -4
.text:00007994
.text:00007994                 push    ebp
.text:00007995                 mov     ebp, esp
.text:00007997                 push    ecx
.text:00007998                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000799F                 mov     [ebp+var_4], ecx
.text:000079A2                 mov     ecx, [ebp+var_4]
.text:000079A5                 add     ecx, 4
.text:000079A8                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(void)
.text:000079AD                 mov     eax, [ebp+var_4]
.text:000079B0                 add     esp, 4
.text:000079B3                 cmp     ebp, esp
.text:000079B5                 call    __RTC_CheckEsp
.text:000079BA                 mov     esp, ebp
.text:000079BC                 pop     ebp
.text:000079BD                 retn
.text:000079BD ??0CMethodItem@NZip@NArchive@@QAE@XZ endp
.text:000079BD
.text:000079BD ; ---------------------------------------------------------------------------
.text:000079BE                 align 10h
.text:000079BE _text           ends
.text:000079BE
.text:000079C0 ; ===========================================================================
.text:000079C0
.text:000079C0 ; Segment type: Pure code
.text:000079C0 ; Segment permissions: Read/Execute
.text:000079C0 _text           segment para public 'CODE' use32
.text:000079C0                 assume cs:_text
.text:000079C0                 ;org 79C0h
.text:000079C0 ; COMDAT (pick any)
.text:000079C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000079C0
.text:000079C0 ; =============== S U B R O U T I N E =======================================
.text:000079C0
.text:000079C0 ; Attributes: bp-based frame
.text:000079C0
.text:000079C0 ; _DWORD __thiscall NArchive::NZip::CMethodItem::~CMethodItem(NArchive::NZip::CMethodItem *__hidden this)
.text:000079C0                 public ??1CMethodItem@NZip@NArchive@@QAE@XZ
.text:000079C0 ??1CMethodItem@NZip@NArchive@@QAE@XZ proc near
.text:000079C0                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+CA1p
.text:000079C0                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+D3Ep ...
.text:000079C0
.text:000079C0 var_4           = dword ptr -4
.text:000079C0
.text:000079C0                 push    ebp
.text:000079C1                 mov     ebp, esp
.text:000079C3                 push    ecx
.text:000079C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000079CB                 mov     [ebp+var_4], ecx
.text:000079CE                 mov     ecx, [ebp+var_4]
.text:000079D1                 add     ecx, 4
.text:000079D4                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000079D9                 add     esp, 4
.text:000079DC                 cmp     ebp, esp
.text:000079DE                 call    __RTC_CheckEsp
.text:000079E3                 mov     esp, ebp
.text:000079E5                 pop     ebp
.text:000079E6                 retn
.text:000079E6 ??1CMethodItem@NZip@NArchive@@QAE@XZ endp
.text:000079E6
.text:000079E6 ; ---------------------------------------------------------------------------
.text:000079E7                 align 4
.text:000079E7 _text           ends
.text:000079E7
.text:000079E8 ; ===========================================================================
.text:000079E8
.text:000079E8 ; Segment type: Pure code
.text:000079E8 ; Segment permissions: Read/Execute
.text:000079E8 _text           segment para public 'CODE' use32
.text:000079E8                 assume cs:_text
.text:000079E8                 ;org 79E8h
.text:000079E8 ; COMDAT (pick any)
.text:000079E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000079E8
.text:000079E8 ; =============== S U B R O U T I N E =======================================
.text:000079E8
.text:000079E8 ; Attributes: bp-based frame
.text:000079E8
.text:000079E8 ; _DWORD __thiscall NCompress::NShrink::CDecoder::CDecoder(NCompress::NShrink::CDecoder *__hidden this)
.text:000079E8                 public ??0CDecoder@NShrink@NCompress@@QAE@XZ
.text:000079E8 ??0CDecoder@NShrink@NCompress@@QAE@XZ proc near
.text:000079E8                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+A77p
.text:000079E8
.text:000079E8 var_4           = dword ptr -4
.text:000079E8
.text:000079E8                 push    ebp
.text:000079E9                 mov     ebp, esp
.text:000079EB                 push    ecx
.text:000079EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000079F3                 mov     [ebp+var_4], ecx
.text:000079F6                 mov     ecx, [ebp+var_4] ; this
.text:000079F9                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:000079FE                 mov     ecx, [ebp+var_4]
.text:00007A01                 add     ecx, 4          ; this
.text:00007A04                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00007A09                 mov     eax, [ebp+var_4]
.text:00007A0C                 mov     dword ptr [eax], offset ??_7CDecoder@NShrink@NCompress@@6B@ ; const NCompress::NShrink::CDecoder::`vftable'
.text:00007A12                 mov     eax, [ebp+var_4]
.text:00007A15                 add     esp, 4
.text:00007A18                 cmp     ebp, esp
.text:00007A1A                 call    __RTC_CheckEsp
.text:00007A1F                 mov     esp, ebp
.text:00007A21                 pop     ebp
.text:00007A22                 retn
.text:00007A22 ??0CDecoder@NShrink@NCompress@@QAE@XZ endp
.text:00007A22
.text:00007A22 ; ---------------------------------------------------------------------------
.text:00007A23                 align 4
.text:00007A23 _text           ends
.text:00007A23
.rdata:00007A24 ; ===========================================================================
.rdata:00007A24
.rdata:00007A24 ; Segment type: Pure data
.rdata:00007A24 ; Segment permissions: Read
.rdata:00007A24 _rdata          segment dword public 'DATA' use32
.rdata:00007A24                 assume cs:_rdata
.rdata:00007A24                 ;org 7A24h
.rdata:00007A24 ; COMDAT (pick largest)
.rdata:00007A24                 dd offset ??_R4CDecoder@NShrink@NCompress@@6B@ ; const NCompress::NShrink::CDecoder::`RTTI Complete Object Locator'
.rdata:00007A28                 public ??_7CDecoder@NShrink@NCompress@@6B@
.rdata:00007A28 ; const NCompress::NShrink::CDecoder::`vftable'
.rdata:00007A28 ??_7CDecoder@NShrink@NCompress@@6B@ dd offset ?QueryInterface@CDecoder@NShrink@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00007A28                                         ; DATA XREF: NCompress::NShrink::CDecoder::CDecoder(void)+24o
.rdata:00007A28                                         ; NCompress::NShrink::CDecoder::QueryInterface(_GUID const &,void * *)
.rdata:00007A2C                 dd offset ?AddRef@CDecoder@NShrink@NCompress@@UAGKXZ ; NCompress::NShrink::CDecoder::AddRef(void)
.rdata:00007A30                 dd offset ?Release@CDecoder@NShrink@NCompress@@UAGKXZ ; NCompress::NShrink::CDecoder::Release(void)
.rdata:00007A34                 dd offset ?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NShrink::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00007A34 _rdata          ends
.rdata:00007A34
.rdata$r:00007A38 ; ===========================================================================
.rdata$r:00007A38
.rdata$r:00007A38 ; Segment type: Pure data
.rdata$r:00007A38 ; Segment permissions: Read
.rdata$r:00007A38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007A38                 assume cs:_rdata$r
.rdata$r:00007A38                 ;org 7A38h
.rdata$r:00007A38 ; COMDAT (pick any)
.rdata$r:00007A38                 public ??_R4CDecoder@NShrink@NCompress@@6B@
.rdata$r:00007A38 ; const NCompress::NShrink::CDecoder::`RTTI Complete Object Locator'
.rdata$r:00007A38 ??_R4CDecoder@NShrink@NCompress@@6B@ db    0 ; DATA XREF: .rdata:00007A24o
.rdata$r:00007A39                 db    0
.rdata$r:00007A3A                 db    0
.rdata$r:00007A3B                 db    0
.rdata$r:00007A3C                 db    0
.rdata$r:00007A3D                 db    0
.rdata$r:00007A3E                 db    0
.rdata$r:00007A3F                 db    0
.rdata$r:00007A40                 db    0
.rdata$r:00007A41                 db    0
.rdata$r:00007A42                 db    0
.rdata$r:00007A43                 db    0
.rdata$r:00007A44                 dd offset ??_R0?AVCDecoder@NShrink@NCompress@@@8 ; NCompress::NShrink::CDecoder `RTTI Type Descriptor'
.rdata$r:00007A48                 dd offset ??_R3CDecoder@NShrink@NCompress@@8 ; NCompress::NShrink::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007A48 _rdata$r        ends
.rdata$r:00007A48
.data:00007A4C ; ===========================================================================
.data:00007A4C
.data:00007A4C ; Segment type: Pure data
.data:00007A4C ; Segment permissions: Read/Write
.data:00007A4C _data           segment dword public 'DATA' use32
.data:00007A4C                 assume cs:_data
.data:00007A4C                 ;org 7A4Ch
.data:00007A4C ; COMDAT (pick any)
.data:00007A4C                 public ??_R0?AVCDecoder@NShrink@NCompress@@@8
.data:00007A4C ; class NCompress::NShrink::CDecoder `RTTI Type Descriptor'
.data:00007A4C ??_R0?AVCDecoder@NShrink@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00007A4C                                         ; DATA XREF: .rdata$r:00007A44o
.data:00007A4C                                         ; .rdata$r:NCompress::NShrink::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00007A4C                                         ; const type_info::`vftable'
.data:00007A50                 db    0
.data:00007A51                 db    0
.data:00007A52                 db    0
.data:00007A53                 db    0
.data:00007A54                 db  2Eh ; .
.data:00007A55                 db  3Fh ; ?
.data:00007A56                 db  41h ; A
.data:00007A57                 db  56h ; V
.data:00007A58                 db  43h ; C
.data:00007A59                 db  44h ; D
.data:00007A5A                 db  65h ; e
.data:00007A5B                 db  63h ; c
.data:00007A5C                 db  6Fh ; o
.data:00007A5D                 db  64h ; d
.data:00007A5E                 db  65h ; e
.data:00007A5F                 db  72h ; r
.data:00007A60                 db  40h ; @
.data:00007A61                 db  4Eh ; N
.data:00007A62                 db  53h ; S
.data:00007A63                 db  68h ; h
.data:00007A64                 db  72h ; r
.data:00007A65                 db  69h ; i
.data:00007A66                 db  6Eh ; n
.data:00007A67                 db  6Bh ; k
.data:00007A68                 db  40h ; @
.data:00007A69                 db  4Eh ; N
.data:00007A6A                 db  43h ; C
.data:00007A6B                 db  6Fh ; o
.data:00007A6C                 db  6Dh ; m
.data:00007A6D                 db  70h ; p
.data:00007A6E                 db  72h ; r
.data:00007A6F                 db  65h ; e
.data:00007A70                 db  73h ; s
.data:00007A71                 db  73h ; s
.data:00007A72                 db  40h ; @
.data:00007A73                 db  40h ; @
.data:00007A74                 db    0
.data:00007A75                 align 4
.data:00007A75 _data           ends
.data:00007A75
.rdata$r:00007A78 ; ===========================================================================
.rdata$r:00007A78
.rdata$r:00007A78 ; Segment type: Pure data
.rdata$r:00007A78 ; Segment permissions: Read
.rdata$r:00007A78 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007A78                 assume cs:_rdata$r
.rdata$r:00007A78                 ;org 7A78h
.rdata$r:00007A78 ; COMDAT (pick any)
.rdata$r:00007A78                 public ??_R3CDecoder@NShrink@NCompress@@8
.rdata$r:00007A78 ; NCompress::NShrink::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007A78 ??_R3CDecoder@NShrink@NCompress@@8 db    0 ; DATA XREF: .rdata:$SG73996o
.rdata$r:00007A78                                         ; .rdata$r:00007A48o ...
.rdata$r:00007A79                 db    0
.rdata$r:00007A7A                 db    0
.rdata$r:00007A7B                 db    0
.rdata$r:00007A7C                 db    1
.rdata$r:00007A7D                 db    0
.rdata$r:00007A7E                 db    0
.rdata$r:00007A7F                 db    0
.rdata$r:00007A80                 db    4
.rdata$r:00007A81                 db    0
.rdata$r:00007A82                 db    0
.rdata$r:00007A83                 db    0
.rdata$r:00007A84                 dd offset ??_R2CDecoder@NShrink@NCompress@@8 ; NCompress::NShrink::CDecoder::`RTTI Base Class Array'
.rdata$r:00007A84 _rdata$r        ends
.rdata$r:00007A84
.rdata$r:00007A88 ; ===========================================================================
.rdata$r:00007A88
.rdata$r:00007A88 ; Segment type: Pure data
.rdata$r:00007A88 ; Segment permissions: Read
.rdata$r:00007A88 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007A88                 assume cs:_rdata$r
.rdata$r:00007A88                 ;org 7A88h
.rdata$r:00007A88 ; COMDAT (pick any)
.rdata$r:00007A88                 public ??_R2CDecoder@NShrink@NCompress@@8
.rdata$r:00007A88 ; NCompress::NShrink::CDecoder::`RTTI Base Class Array'
.rdata$r:00007A88 ??_R2CDecoder@NShrink@NCompress@@8 dd offset ??_R1A@?0A@EA@CDecoder@NShrink@NCompress@@8
.rdata$r:00007A88                                         ; DATA XREF: .rdata$r:00007A84o
.rdata$r:00007A88                                         ; NCompress::NShrink::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007A8C                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007A90                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007A94                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00007A98                 db    0
.rdata$r:00007A99                 align 4
.rdata$r:00007A99 _rdata$r        ends
.rdata$r:00007A99
.rdata$r:00007A9C ; ===========================================================================
.rdata$r:00007A9C
.rdata$r:00007A9C ; Segment type: Pure data
.rdata$r:00007A9C ; Segment permissions: Read
.rdata$r:00007A9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007A9C                 assume cs:_rdata$r
.rdata$r:00007A9C                 ;org 7A9Ch
.rdata$r:00007A9C ; COMDAT (pick any)
.rdata$r:00007A9C                 public ??_R1A@?0A@EA@CDecoder@NShrink@NCompress@@8
.rdata$r:00007A9C ; NCompress::NShrink::CDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007A9C ??_R1A@?0A@EA@CDecoder@NShrink@NCompress@@8 dd offset ??_R0?AVCDecoder@NShrink@NCompress@@@8
.rdata$r:00007A9C                                         ; DATA XREF: .rdata$r:NCompress::NShrink::CDecoder::`RTTI Base Class Array'o
.rdata$r:00007A9C                                         ; NCompress::NShrink::CDecoder `RTTI Type Descriptor'
.rdata$r:00007AA0                 db    3
.rdata$r:00007AA1                 db    0
.rdata$r:00007AA2                 db    0
.rdata$r:00007AA3                 db    0
.rdata$r:00007AA4                 db    0
.rdata$r:00007AA5                 db    0
.rdata$r:00007AA6                 db    0
.rdata$r:00007AA7                 db    0
.rdata$r:00007AA8                 db 0FFh
.rdata$r:00007AA9                 db 0FFh
.rdata$r:00007AAA                 db 0FFh
.rdata$r:00007AAB                 db 0FFh
.rdata$r:00007AAC                 db    0
.rdata$r:00007AAD                 db    0
.rdata$r:00007AAE                 db    0
.rdata$r:00007AAF                 db    0
.rdata$r:00007AB0                 db  40h ; @
.rdata$r:00007AB1                 db    0
.rdata$r:00007AB2                 db    0
.rdata$r:00007AB3                 db    0
.rdata$r:00007AB4                 dd offset ??_R3CDecoder@NShrink@NCompress@@8 ; NCompress::NShrink::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007AB4 _rdata$r        ends
.rdata$r:00007AB4
.text:00007AB8 ; ===========================================================================
.text:00007AB8
.text:00007AB8 ; Segment type: Pure code
.text:00007AB8 ; Segment permissions: Read/Execute
.text:00007AB8 _text           segment para public 'CODE' use32
.text:00007AB8                 assume cs:_text
.text:00007AB8                 ;org 7AB8h
.text:00007AB8 ; COMDAT (pick any)
.text:00007AB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007AB8
.text:00007AB8 ; =============== S U B R O U T I N E =======================================
.text:00007AB8
.text:00007AB8 ; Attributes: bp-based frame
.text:00007AB8
.text:00007AB8 ; __int32 __stdcall NCompress::NShrink::CDecoder::QueryInterface(NCompress::NShrink::CDecoder *this, const struct _GUID *Buf1, void **)
.text:00007AB8                 public ?QueryInterface@CDecoder@NShrink@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00007AB8 ?QueryInterface@CDecoder@NShrink@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00007AB8                                         ; DATA XREF: .rdata:const NCompress::NShrink::CDecoder::`vftable'o
.text:00007AB8
.text:00007AB8 this            = dword ptr  8
.text:00007AB8 Buf1            = dword ptr  0Ch
.text:00007AB8 arg_8           = dword ptr  10h
.text:00007AB8
.text:00007AB8                 push    ebp
.text:00007AB9                 mov     ebp, esp
.text:00007ABB                 mov     eax, [ebp+arg_8]
.text:00007ABE                 mov     dword ptr [eax], 0
.text:00007AC4                 push    offset _IID_IUnknown ; Buf2
.text:00007AC9                 mov     ecx, [ebp+Buf1]
.text:00007ACC                 push    ecx             ; Buf1
.text:00007ACD                 call    ___@8           ; __(x,x)
.text:00007AD2                 test    eax, eax
.text:00007AD4                 jz      short loc_7AE0
.text:00007AD6                 mov     edx, [ebp+arg_8]
.text:00007AD9                 mov     eax, [ebp+this]
.text:00007ADC                 mov     [edx], eax
.text:00007ADE                 jmp     short loc_7AE7
.text:00007AE0 ; ---------------------------------------------------------------------------
.text:00007AE0
.text:00007AE0 loc_7AE0:                               ; CODE XREF: NCompress::NShrink::CDecoder::QueryInterface(_GUID const &,void * *)+1Cj
.text:00007AE0                 mov     eax, 80004002h
.text:00007AE5                 jmp     short loc_7AF8
.text:00007AE7 ; ---------------------------------------------------------------------------
.text:00007AE7
.text:00007AE7 loc_7AE7:                               ; CODE XREF: NCompress::NShrink::CDecoder::QueryInterface(_GUID const &,void * *)+26j
.text:00007AE7                 mov     ecx, [ebp+this]
.text:00007AEA                 mov     edx, [ecx+4]
.text:00007AED                 add     edx, 1
.text:00007AF0                 mov     eax, [ebp+this]
.text:00007AF3                 mov     [eax+4], edx
.text:00007AF6                 xor     eax, eax
.text:00007AF8
.text:00007AF8 loc_7AF8:                               ; CODE XREF: NCompress::NShrink::CDecoder::QueryInterface(_GUID const &,void * *)+2Dj
.text:00007AF8                 cmp     ebp, esp
.text:00007AFA                 call    __RTC_CheckEsp
.text:00007AFF                 pop     ebp
.text:00007B00                 retn    0Ch
.text:00007B00 ?QueryInterface@CDecoder@NShrink@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00007B00
.text:00007B00 ; ---------------------------------------------------------------------------
.text:00007B03                 align 4
.text:00007B03 _text           ends
.text:00007B03
.text:00007B04 ; ===========================================================================
.text:00007B04
.text:00007B04 ; Segment type: Pure code
.text:00007B04 ; Segment permissions: Read/Execute
.text:00007B04 _text           segment para public 'CODE' use32
.text:00007B04                 assume cs:_text
.text:00007B04                 ;org 7B04h
.text:00007B04 ; COMDAT (pick any)
.text:00007B04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007B04
.text:00007B04 ; =============== S U B R O U T I N E =======================================
.text:00007B04
.text:00007B04 ; Attributes: bp-based frame
.text:00007B04
.text:00007B04 ; unsigned __int32 __stdcall NCompress::NShrink::CDecoder::AddRef(NCompress::NShrink::CDecoder *this)
.text:00007B04                 public ?AddRef@CDecoder@NShrink@NCompress@@UAGKXZ
.text:00007B04 ?AddRef@CDecoder@NShrink@NCompress@@UAGKXZ proc near
.text:00007B04                                         ; DATA XREF: .rdata:00007A2Co
.text:00007B04
.text:00007B04 var_4           = dword ptr -4
.text:00007B04 this            = dword ptr  8
.text:00007B04
.text:00007B04                 push    ebp
.text:00007B05                 mov     ebp, esp
.text:00007B07                 push    ecx
.text:00007B08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007B0F                 mov     eax, [ebp+this]
.text:00007B12                 mov     ecx, [eax+4]
.text:00007B15                 add     ecx, 1
.text:00007B18                 mov     [ebp+var_4], ecx
.text:00007B1B                 mov     edx, [ebp+this]
.text:00007B1E                 mov     eax, [ebp+var_4]
.text:00007B21                 mov     [edx+4], eax
.text:00007B24                 mov     eax, [ebp+var_4]
.text:00007B27                 mov     esp, ebp
.text:00007B29                 pop     ebp
.text:00007B2A                 retn    4
.text:00007B2A ?AddRef@CDecoder@NShrink@NCompress@@UAGKXZ endp
.text:00007B2A
.text:00007B2A ; ---------------------------------------------------------------------------
.text:00007B2D                 align 10h
.text:00007B2D _text           ends
.text:00007B2D
.text:00007B30 ; ===========================================================================
.text:00007B30
.text:00007B30 ; Segment type: Pure code
.text:00007B30 ; Segment permissions: Read/Execute
.text:00007B30 _text           segment para public 'CODE' use32
.text:00007B30                 assume cs:_text
.text:00007B30                 ;org 7B30h
.text:00007B30 ; COMDAT (pick any)
.text:00007B30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007B30
.text:00007B30 ; =============== S U B R O U T I N E =======================================
.text:00007B30
.text:00007B30 ; Attributes: bp-based frame
.text:00007B30
.text:00007B30 ; unsigned __int32 __stdcall NCompress::NShrink::CDecoder::Release(NCompress::NShrink::CDecoder *this)
.text:00007B30                 public ?Release@CDecoder@NShrink@NCompress@@UAGKXZ
.text:00007B30 ?Release@CDecoder@NShrink@NCompress@@UAGKXZ proc near
.text:00007B30                                         ; DATA XREF: .rdata:00007A30o
.text:00007B30
.text:00007B30 var_8           = dword ptr -8
.text:00007B30 var_4           = dword ptr -4
.text:00007B30 this            = dword ptr  8
.text:00007B30
.text:00007B30                 push    ebp
.text:00007B31                 mov     ebp, esp
.text:00007B33                 sub     esp, 8
.text:00007B36                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00007B3D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007B44                 mov     eax, [ebp+this]
.text:00007B47                 mov     ecx, [eax+4]
.text:00007B4A                 sub     ecx, 1
.text:00007B4D                 mov     [ebp+var_8], ecx
.text:00007B50                 mov     edx, [ebp+this]
.text:00007B53                 mov     eax, [ebp+var_8]
.text:00007B56                 mov     [edx+4], eax
.text:00007B59                 cmp     [ebp+var_8], 0
.text:00007B5D                 jz      short loc_7B67
.text:00007B5F                 mov     ecx, [ebp+this]
.text:00007B62                 mov     eax, [ecx+4]
.text:00007B65                 jmp     short loc_7B7B
.text:00007B67 ; ---------------------------------------------------------------------------
.text:00007B67
.text:00007B67 loc_7B67:                               ; CODE XREF: NCompress::NShrink::CDecoder::Release(void)+2Dj
.text:00007B67                 mov     edx, [ebp+this]
.text:00007B6A                 mov     [ebp+var_4], edx
.text:00007B6D                 mov     eax, [ebp+var_4]
.text:00007B70                 push    eax             ; void *
.text:00007B71                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007B76                 add     esp, 4
.text:00007B79                 xor     eax, eax
.text:00007B7B
.text:00007B7B loc_7B7B:                               ; CODE XREF: NCompress::NShrink::CDecoder::Release(void)+35j
.text:00007B7B                 add     esp, 8
.text:00007B7E                 cmp     ebp, esp
.text:00007B80                 call    __RTC_CheckEsp
.text:00007B85                 mov     esp, ebp
.text:00007B87                 pop     ebp
.text:00007B88                 retn    4
.text:00007B88 ?Release@CDecoder@NShrink@NCompress@@UAGKXZ endp
.text:00007B88
.text:00007B88 ; ---------------------------------------------------------------------------
.text:00007B8B                 align 4
.text:00007B8B _text           ends
.text:00007B8B
.text:00007B8C ; ===========================================================================
.text:00007B8C
.text:00007B8C ; Segment type: Pure code
.text:00007B8C ; Segment permissions: Read/Execute
.text:00007B8C _text           segment para public 'CODE' use32
.text:00007B8C                 assume cs:_text
.text:00007B8C                 ;org 7B8Ch
.text:00007B8C ; COMDAT (pick any)
.text:00007B8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007B8C
.text:00007B8C ; =============== S U B R O U T I N E =======================================
.text:00007B8C
.text:00007B8C ; Attributes: bp-based frame
.text:00007B8C
.text:00007B8C ; _DWORD __thiscall NArchive::NZip::CXzDecoder::CXzDecoder(NArchive::NZip::CXzDecoder *__hidden this)
.text:00007B8C                 public ??0CXzDecoder@NZip@NArchive@@QAE@XZ
.text:00007B8C ??0CXzDecoder@NZip@NArchive@@QAE@XZ proc near
.text:00007B8C                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+BB2p
.text:00007B8C
.text:00007B8C var_4           = dword ptr -4
.text:00007B8C
.text:00007B8C                 push    ebp
.text:00007B8D                 mov     ebp, esp
.text:00007B8F                 push    ecx
.text:00007B90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007B97                 mov     [ebp+var_4], ecx
.text:00007B9A                 mov     ecx, [ebp+var_4] ; this
.text:00007B9D                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:00007BA2                 mov     ecx, [ebp+var_4]
.text:00007BA5                 add     ecx, 4          ; this
.text:00007BA8                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00007BAD                 mov     eax, [ebp+var_4]
.text:00007BB0                 mov     dword ptr [eax], offset ??_7CXzDecoder@NZip@NArchive@@6B@ ; const NArchive::NZip::CXzDecoder::`vftable'
.text:00007BB6                 mov     ecx, [ebp+var_4]
.text:00007BB9                 add     ecx, 8          ; this
.text:00007BBC                 call    ??0CDecoder@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CDecoder::CDecoder(void)
.text:00007BC1                 mov     eax, [ebp+var_4]
.text:00007BC4                 add     esp, 4
.text:00007BC7                 cmp     ebp, esp
.text:00007BC9                 call    __RTC_CheckEsp
.text:00007BCE                 mov     esp, ebp
.text:00007BD0                 pop     ebp
.text:00007BD1                 retn
.text:00007BD1 ??0CXzDecoder@NZip@NArchive@@QAE@XZ endp
.text:00007BD1
.text:00007BD1 ; ---------------------------------------------------------------------------
.text:00007BD2                 align 4
.text:00007BD2 _text           ends
.text:00007BD2
.rdata:00007BD4 ; ===========================================================================
.rdata:00007BD4
.rdata:00007BD4 ; Segment type: Pure data
.rdata:00007BD4 ; Segment permissions: Read
.rdata:00007BD4 _rdata          segment dword public 'DATA' use32
.rdata:00007BD4                 assume cs:_rdata
.rdata:00007BD4                 ;org 7BD4h
.rdata:00007BD4 ; COMDAT (pick largest)
.rdata:00007BD4                 dd offset ??_R4CXzDecoder@NZip@NArchive@@6B@ ; const NArchive::NZip::CXzDecoder::`RTTI Complete Object Locator'
.rdata:00007BD8                 public ??_7CXzDecoder@NZip@NArchive@@6B@
.rdata:00007BD8 ; const NArchive::NZip::CXzDecoder::`vftable'
.rdata:00007BD8 ??_7CXzDecoder@NZip@NArchive@@6B@ dd offset ?QueryInterface@CXzDecoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:00007BD8                                         ; DATA XREF: NArchive::NZip::CXzDecoder::CXzDecoder(void)+24o
.rdata:00007BD8                                         ; NArchive::NZip::CXzDecoder::QueryInterface(_GUID const &,void * *)
.rdata:00007BDC                 dd offset ?AddRef@CXzDecoder@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CXzDecoder::AddRef(void)
.rdata:00007BE0                 dd offset ?Release@CXzDecoder@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CXzDecoder::Release(void)
.rdata:00007BE4                 dd offset ?Code@CXzDecoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NArchive::NZip::CXzDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00007BE4 _rdata          ends
.rdata:00007BE4
.rdata$r:00007BE8 ; ===========================================================================
.rdata$r:00007BE8
.rdata$r:00007BE8 ; Segment type: Pure data
.rdata$r:00007BE8 ; Segment permissions: Read
.rdata$r:00007BE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007BE8                 assume cs:_rdata$r
.rdata$r:00007BE8                 ;org 7BE8h
.rdata$r:00007BE8 ; COMDAT (pick any)
.rdata$r:00007BE8                 public ??_R4CXzDecoder@NZip@NArchive@@6B@
.rdata$r:00007BE8 ; const NArchive::NZip::CXzDecoder::`RTTI Complete Object Locator'
.rdata$r:00007BE8 ??_R4CXzDecoder@NZip@NArchive@@6B@ db    0 ; DATA XREF: .rdata:00007BD4o
.rdata$r:00007BE9                 db    0
.rdata$r:00007BEA                 db    0
.rdata$r:00007BEB                 db    0
.rdata$r:00007BEC                 db    0
.rdata$r:00007BED                 db    0
.rdata$r:00007BEE                 db    0
.rdata$r:00007BEF                 db    0
.rdata$r:00007BF0                 db    0
.rdata$r:00007BF1                 db    0
.rdata$r:00007BF2                 db    0
.rdata$r:00007BF3                 db    0
.rdata$r:00007BF4                 dd offset ??_R0?AVCXzDecoder@NZip@NArchive@@@8 ; NArchive::NZip::CXzDecoder `RTTI Type Descriptor'
.rdata$r:00007BF8                 dd offset ??_R3CXzDecoder@NZip@NArchive@@8 ; NArchive::NZip::CXzDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007BF8 _rdata$r        ends
.rdata$r:00007BF8
.data:00007BFC ; ===========================================================================
.data:00007BFC
.data:00007BFC ; Segment type: Pure data
.data:00007BFC ; Segment permissions: Read/Write
.data:00007BFC _data           segment dword public 'DATA' use32
.data:00007BFC                 assume cs:_data
.data:00007BFC                 ;org 7BFCh
.data:00007BFC ; COMDAT (pick any)
.data:00007BFC                 public ??_R0?AVCXzDecoder@NZip@NArchive@@@8
.data:00007BFC ; class NArchive::NZip::CXzDecoder `RTTI Type Descriptor'
.data:00007BFC ??_R0?AVCXzDecoder@NZip@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00007BFC                                         ; DATA XREF: .rdata$r:00007BF4o
.data:00007BFC                                         ; .rdata$r:NArchive::NZip::CXzDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00007BFC                                         ; const type_info::`vftable'
.data:00007C00                 db    0
.data:00007C01                 db    0
.data:00007C02                 db    0
.data:00007C03                 db    0
.data:00007C04                 db  2Eh ; .
.data:00007C05                 db  3Fh ; ?
.data:00007C06                 db  41h ; A
.data:00007C07                 db  56h ; V
.data:00007C08                 db  43h ; C
.data:00007C09                 db  58h ; X
.data:00007C0A                 db  7Ah ; z
.data:00007C0B                 db  44h ; D
.data:00007C0C                 db  65h ; e
.data:00007C0D                 db  63h ; c
.data:00007C0E                 db  6Fh ; o
.data:00007C0F                 db  64h ; d
.data:00007C10                 db  65h ; e
.data:00007C11                 db  72h ; r
.data:00007C12                 db  40h ; @
.data:00007C13                 db  4Eh ; N
.data:00007C14                 db  5Ah ; Z
.data:00007C15                 db  69h ; i
.data:00007C16                 db  70h ; p
.data:00007C17                 db  40h ; @
.data:00007C18                 db  4Eh ; N
.data:00007C19                 db  41h ; A
.data:00007C1A                 db  72h ; r
.data:00007C1B                 db  63h ; c
.data:00007C1C                 db  68h ; h
.data:00007C1D                 db  69h ; i
.data:00007C1E                 db  76h ; v
.data:00007C1F                 db  65h ; e
.data:00007C20                 db  40h ; @
.data:00007C21                 db  40h ; @
.data:00007C22                 db    0
.data:00007C23                 align 4
.data:00007C23 _data           ends
.data:00007C23
.rdata$r:00007C24 ; ===========================================================================
.rdata$r:00007C24
.rdata$r:00007C24 ; Segment type: Pure data
.rdata$r:00007C24 ; Segment permissions: Read
.rdata$r:00007C24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007C24                 assume cs:_rdata$r
.rdata$r:00007C24                 ;org 7C24h
.rdata$r:00007C24 ; COMDAT (pick any)
.rdata$r:00007C24                 public ??_R3CXzDecoder@NZip@NArchive@@8
.rdata$r:00007C24 ; NArchive::NZip::CXzDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007C24 ??_R3CXzDecoder@NZip@NArchive@@8 db    0 ; DATA XREF: .rdata$r:00007BF8o
.rdata$r:00007C24                                         ; .rdata$r:00007C60o
.rdata$r:00007C25                 db    0
.rdata$r:00007C26                 db    0
.rdata$r:00007C27                 db    0
.rdata$r:00007C28                 db    1
.rdata$r:00007C29                 db    0
.rdata$r:00007C2A                 db    0
.rdata$r:00007C2B                 db    0
.rdata$r:00007C2C                 db    4
.rdata$r:00007C2D                 db    0
.rdata$r:00007C2E                 db    0
.rdata$r:00007C2F                 db    0
.rdata$r:00007C30                 dd offset ??_R2CXzDecoder@NZip@NArchive@@8 ; NArchive::NZip::CXzDecoder::`RTTI Base Class Array'
.rdata$r:00007C30 _rdata$r        ends
.rdata$r:00007C30
.rdata$r:00007C34 ; ===========================================================================
.rdata$r:00007C34
.rdata$r:00007C34 ; Segment type: Pure data
.rdata$r:00007C34 ; Segment permissions: Read
.rdata$r:00007C34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007C34                 assume cs:_rdata$r
.rdata$r:00007C34                 ;org 7C34h
.rdata$r:00007C34 ; COMDAT (pick any)
.rdata$r:00007C34                 public ??_R2CXzDecoder@NZip@NArchive@@8
.rdata$r:00007C34 ; NArchive::NZip::CXzDecoder::`RTTI Base Class Array'
.rdata$r:00007C34 ??_R2CXzDecoder@NZip@NArchive@@8 dd offset ??_R1A@?0A@EA@CXzDecoder@NZip@NArchive@@8
.rdata$r:00007C34                                         ; DATA XREF: .rdata$r:00007C30o
.rdata$r:00007C34                                         ; NArchive::NZip::CXzDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007C38                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007C3C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007C40                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00007C44                 db    0
.rdata$r:00007C45                 align 4
.rdata$r:00007C45 _rdata$r        ends
.rdata$r:00007C45
.rdata$r:00007C48 ; ===========================================================================
.rdata$r:00007C48
.rdata$r:00007C48 ; Segment type: Pure data
.rdata$r:00007C48 ; Segment permissions: Read
.rdata$r:00007C48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007C48                 assume cs:_rdata$r
.rdata$r:00007C48                 ;org 7C48h
.rdata$r:00007C48 ; COMDAT (pick any)
.rdata$r:00007C48                 public ??_R1A@?0A@EA@CXzDecoder@NZip@NArchive@@8
.rdata$r:00007C48 ; NArchive::NZip::CXzDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007C48 ??_R1A@?0A@EA@CXzDecoder@NZip@NArchive@@8 dd offset ??_R0?AVCXzDecoder@NZip@NArchive@@@8
.rdata$r:00007C48                                         ; DATA XREF: .rdata$r:NArchive::NZip::CXzDecoder::`RTTI Base Class Array'o
.rdata$r:00007C48                                         ; NArchive::NZip::CXzDecoder `RTTI Type Descriptor'
.rdata$r:00007C4C                 db    3
.rdata$r:00007C4D                 db    0
.rdata$r:00007C4E                 db    0
.rdata$r:00007C4F                 db    0
.rdata$r:00007C50                 db    0
.rdata$r:00007C51                 db    0
.rdata$r:00007C52                 db    0
.rdata$r:00007C53                 db    0
.rdata$r:00007C54                 db 0FFh
.rdata$r:00007C55                 db 0FFh
.rdata$r:00007C56                 db 0FFh
.rdata$r:00007C57                 db 0FFh
.rdata$r:00007C58                 db    0
.rdata$r:00007C59                 db    0
.rdata$r:00007C5A                 db    0
.rdata$r:00007C5B                 db    0
.rdata$r:00007C5C                 db  40h ; @
.rdata$r:00007C5D                 db    0
.rdata$r:00007C5E                 db    0
.rdata$r:00007C5F                 db    0
.rdata$r:00007C60                 dd offset ??_R3CXzDecoder@NZip@NArchive@@8 ; NArchive::NZip::CXzDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007C60 _rdata$r        ends
.rdata$r:00007C60
.text:00007C64 ; ===========================================================================
.text:00007C64
.text:00007C64 ; Segment type: Pure code
.text:00007C64 ; Segment permissions: Read/Execute
.text:00007C64 _text           segment para public 'CODE' use32
.text:00007C64                 assume cs:_text
.text:00007C64                 ;org 7C64h
.text:00007C64 ; COMDAT (pick any)
.text:00007C64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007C64
.text:00007C64 ; =============== S U B R O U T I N E =======================================
.text:00007C64
.text:00007C64 ; Attributes: bp-based frame
.text:00007C64
.text:00007C64 ; _DWORD __thiscall NArchive::NXz::CDecoder::CDecoder(NArchive::NXz::CDecoder *__hidden this)
.text:00007C64                 public ??0CDecoder@NXz@NArchive@@QAE@XZ
.text:00007C64 ??0CDecoder@NXz@NArchive@@QAE@XZ proc near
.text:00007C64                                         ; CODE XREF: NArchive::NZip::CXzDecoder::CXzDecoder(void)+30p
.text:00007C64
.text:00007C64 var_4           = dword ptr -4
.text:00007C64
.text:00007C64                 push    ebp
.text:00007C65                 mov     ebp, esp
.text:00007C67                 push    ecx
.text:00007C68                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007C6F                 mov     [ebp+var_4], ecx
.text:00007C72                 mov     ecx, [ebp+var_4] ; this
.text:00007C75                 call    ??0CStatInfo@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CStatInfo::CStatInfo(void)
.text:00007C7A                 mov     ecx, [ebp+var_4]
.text:00007C7D                 add     ecx, 38h ; '8'  ; this
.text:00007C80                 call    ??0CXzUnpackerCPP@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CXzUnpackerCPP::CXzUnpackerCPP(void)
.text:00007C85                 mov     eax, [ebp+var_4]
.text:00007C88                 mov     dword ptr [eax+6E0h], 0
.text:00007C92                 mov     eax, [ebp+var_4]
.text:00007C95                 add     esp, 4
.text:00007C98                 cmp     ebp, esp
.text:00007C9A                 call    __RTC_CheckEsp
.text:00007C9F                 mov     esp, ebp
.text:00007CA1                 pop     ebp
.text:00007CA2                 retn
.text:00007CA2 ??0CDecoder@NXz@NArchive@@QAE@XZ endp
.text:00007CA2
.text:00007CA2 ; ---------------------------------------------------------------------------
.text:00007CA3                 align 4
.text:00007CA3 _text           ends
.text:00007CA3
.text:00007CA4 ; ===========================================================================
.text:00007CA4
.text:00007CA4 ; Segment type: Pure code
.text:00007CA4 ; Segment permissions: Read/Execute
.text:00007CA4 _text           segment para public 'CODE' use32
.text:00007CA4                 assume cs:_text
.text:00007CA4                 ;org 7CA4h
.text:00007CA4 ; COMDAT (pick any)
.text:00007CA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007CA4
.text:00007CA4 ; =============== S U B R O U T I N E =======================================
.text:00007CA4
.text:00007CA4 ; Attributes: bp-based frame
.text:00007CA4
.text:00007CA4 ; _DWORD __thiscall NArchive::NXz::CStatInfo::CStatInfo(NArchive::NXz::CStatInfo *__hidden this)
.text:00007CA4                 public ??0CStatInfo@NXz@NArchive@@QAE@XZ
.text:00007CA4 ??0CStatInfo@NXz@NArchive@@QAE@XZ proc near
.text:00007CA4                                         ; CODE XREF: NArchive::NXz::CDecoder::CDecoder(void)+11p
.text:00007CA4
.text:00007CA4 var_4           = dword ptr -4
.text:00007CA4
.text:00007CA4                 push    ebp
.text:00007CA5                 mov     ebp, esp
.text:00007CA7                 push    ecx
.text:00007CA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007CAF                 mov     [ebp+var_4], ecx
.text:00007CB2                 mov     ecx, [ebp+var_4] ; this
.text:00007CB5                 call    ?Clear@CStatInfo@NXz@NArchive@@QAEXXZ ; NArchive::NXz::CStatInfo::Clear(void)
.text:00007CBA                 mov     eax, [ebp+var_4]
.text:00007CBD                 add     esp, 4
.text:00007CC0                 cmp     ebp, esp
.text:00007CC2                 call    __RTC_CheckEsp
.text:00007CC7                 mov     esp, ebp
.text:00007CC9                 pop     ebp
.text:00007CCA                 retn
.text:00007CCA ??0CStatInfo@NXz@NArchive@@QAE@XZ endp
.text:00007CCA
.text:00007CCA ; ---------------------------------------------------------------------------
.text:00007CCB                 align 4
.text:00007CCB _text           ends
.text:00007CCB
.text:00007CCC ; ===========================================================================
.text:00007CCC
.text:00007CCC ; Segment type: Pure code
.text:00007CCC ; Segment permissions: Read/Execute
.text:00007CCC _text           segment para public 'CODE' use32
.text:00007CCC                 assume cs:_text
.text:00007CCC                 ;org 7CCCh
.text:00007CCC ; COMDAT (pick any)
.text:00007CCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007CCC
.text:00007CCC ; =============== S U B R O U T I N E =======================================
.text:00007CCC
.text:00007CCC ; Attributes: bp-based frame
.text:00007CCC
.text:00007CCC ; __int32 __stdcall NArchive::NZip::CXzDecoder::QueryInterface(NArchive::NZip::CXzDecoder *this, const struct _GUID *Buf1, void **)
.text:00007CCC                 public ?QueryInterface@CXzDecoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00007CCC ?QueryInterface@CXzDecoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00007CCC                                         ; DATA XREF: .rdata:const NArchive::NZip::CXzDecoder::`vftable'o
.text:00007CCC
.text:00007CCC this            = dword ptr  8
.text:00007CCC Buf1            = dword ptr  0Ch
.text:00007CCC arg_8           = dword ptr  10h
.text:00007CCC
.text:00007CCC                 push    ebp
.text:00007CCD                 mov     ebp, esp
.text:00007CCF                 mov     eax, [ebp+arg_8]
.text:00007CD2                 mov     dword ptr [eax], 0
.text:00007CD8                 push    offset _IID_IUnknown ; Buf2
.text:00007CDD                 mov     ecx, [ebp+Buf1]
.text:00007CE0                 push    ecx             ; Buf1
.text:00007CE1                 call    ___@8           ; __(x,x)
.text:00007CE6                 test    eax, eax
.text:00007CE8                 jz      short loc_7CF4
.text:00007CEA                 mov     edx, [ebp+arg_8]
.text:00007CED                 mov     eax, [ebp+this]
.text:00007CF0                 mov     [edx], eax
.text:00007CF2                 jmp     short loc_7CFB
.text:00007CF4 ; ---------------------------------------------------------------------------
.text:00007CF4
.text:00007CF4 loc_7CF4:                               ; CODE XREF: NArchive::NZip::CXzDecoder::QueryInterface(_GUID const &,void * *)+1Cj
.text:00007CF4                 mov     eax, 80004002h
.text:00007CF9                 jmp     short loc_7D0C
.text:00007CFB ; ---------------------------------------------------------------------------
.text:00007CFB
.text:00007CFB loc_7CFB:                               ; CODE XREF: NArchive::NZip::CXzDecoder::QueryInterface(_GUID const &,void * *)+26j
.text:00007CFB                 mov     ecx, [ebp+this]
.text:00007CFE                 mov     edx, [ecx+4]
.text:00007D01                 add     edx, 1
.text:00007D04                 mov     eax, [ebp+this]
.text:00007D07                 mov     [eax+4], edx
.text:00007D0A                 xor     eax, eax
.text:00007D0C
.text:00007D0C loc_7D0C:                               ; CODE XREF: NArchive::NZip::CXzDecoder::QueryInterface(_GUID const &,void * *)+2Dj
.text:00007D0C                 cmp     ebp, esp
.text:00007D0E                 call    __RTC_CheckEsp
.text:00007D13                 pop     ebp
.text:00007D14                 retn    0Ch
.text:00007D14 ?QueryInterface@CXzDecoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:00007D14
.text:00007D14 ; ---------------------------------------------------------------------------
.text:00007D17                 align 4
.text:00007D17 _text           ends
.text:00007D17
.text:00007D18 ; ===========================================================================
.text:00007D18
.text:00007D18 ; Segment type: Pure code
.text:00007D18 ; Segment permissions: Read/Execute
.text:00007D18 _text           segment para public 'CODE' use32
.text:00007D18                 assume cs:_text
.text:00007D18                 ;org 7D18h
.text:00007D18 ; COMDAT (pick any)
.text:00007D18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007D18
.text:00007D18 ; =============== S U B R O U T I N E =======================================
.text:00007D18
.text:00007D18 ; Attributes: bp-based frame
.text:00007D18
.text:00007D18 ; unsigned __int32 __stdcall NArchive::NZip::CXzDecoder::AddRef(NArchive::NZip::CXzDecoder *this)
.text:00007D18                 public ?AddRef@CXzDecoder@NZip@NArchive@@UAGKXZ
.text:00007D18 ?AddRef@CXzDecoder@NZip@NArchive@@UAGKXZ proc near
.text:00007D18                                         ; DATA XREF: .rdata:00007BDCo
.text:00007D18
.text:00007D18 var_4           = dword ptr -4
.text:00007D18 this            = dword ptr  8
.text:00007D18
.text:00007D18                 push    ebp
.text:00007D19                 mov     ebp, esp
.text:00007D1B                 push    ecx
.text:00007D1C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007D23                 mov     eax, [ebp+this]
.text:00007D26                 mov     ecx, [eax+4]
.text:00007D29                 add     ecx, 1
.text:00007D2C                 mov     [ebp+var_4], ecx
.text:00007D2F                 mov     edx, [ebp+this]
.text:00007D32                 mov     eax, [ebp+var_4]
.text:00007D35                 mov     [edx+4], eax
.text:00007D38                 mov     eax, [ebp+var_4]
.text:00007D3B                 mov     esp, ebp
.text:00007D3D                 pop     ebp
.text:00007D3E                 retn    4
.text:00007D3E ?AddRef@CXzDecoder@NZip@NArchive@@UAGKXZ endp
.text:00007D3E
.text:00007D3E ; ---------------------------------------------------------------------------
.text:00007D41                 align 4
.text:00007D41 _text           ends
.text:00007D41
.text:00007D44 ; ===========================================================================
.text:00007D44
.text:00007D44 ; Segment type: Pure code
.text:00007D44 ; Segment permissions: Read/Execute
.text:00007D44 _text           segment para public 'CODE' use32
.text:00007D44                 assume cs:_text
.text:00007D44                 ;org 7D44h
.text:00007D44 ; COMDAT (pick any)
.text:00007D44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007D44
.text:00007D44 ; =============== S U B R O U T I N E =======================================
.text:00007D44
.text:00007D44 ; Attributes: bp-based frame
.text:00007D44
.text:00007D44 ; unsigned __int32 __stdcall NArchive::NZip::CXzDecoder::Release(NArchive::NZip::CXzDecoder *this)
.text:00007D44                 public ?Release@CXzDecoder@NZip@NArchive@@UAGKXZ
.text:00007D44 ?Release@CXzDecoder@NZip@NArchive@@UAGKXZ proc near
.text:00007D44                                         ; DATA XREF: .rdata:00007BE0o
.text:00007D44
.text:00007D44 var_10          = dword ptr -10h
.text:00007D44 var_C           = dword ptr -0Ch
.text:00007D44 var_8           = dword ptr -8
.text:00007D44 var_4           = dword ptr -4
.text:00007D44 this            = dword ptr  8
.text:00007D44
.text:00007D44                 push    ebp
.text:00007D45                 mov     ebp, esp
.text:00007D47                 sub     esp, 10h
.text:00007D4A                 mov     eax, 0CCCCCCCCh
.text:00007D4F                 mov     [ebp+var_10], eax
.text:00007D52                 mov     [ebp+var_C], eax
.text:00007D55                 mov     [ebp+var_8], eax
.text:00007D58                 mov     [ebp+var_4], eax
.text:00007D5B                 mov     eax, [ebp+this]
.text:00007D5E                 mov     ecx, [eax+4]
.text:00007D61                 sub     ecx, 1
.text:00007D64                 mov     [ebp+var_C], ecx
.text:00007D67                 mov     edx, [ebp+this]
.text:00007D6A                 mov     eax, [ebp+var_C]
.text:00007D6D                 mov     [edx+4], eax
.text:00007D70                 cmp     [ebp+var_C], 0
.text:00007D74                 jz      short loc_7D7E
.text:00007D76                 mov     ecx, [ebp+this]
.text:00007D79                 mov     eax, [ecx+4]
.text:00007D7C                 jmp     short loc_7DA8
.text:00007D7E ; ---------------------------------------------------------------------------
.text:00007D7E
.text:00007D7E loc_7D7E:                               ; CODE XREF: NArchive::NZip::CXzDecoder::Release(void)+30j
.text:00007D7E                 mov     edx, [ebp+this]
.text:00007D81                 mov     [ebp+var_8], edx
.text:00007D84                 mov     eax, [ebp+var_8]
.text:00007D87                 mov     [ebp+var_4], eax
.text:00007D8A                 cmp     [ebp+var_4], 0
.text:00007D8E                 jz      short loc_7D9F
.text:00007D90                 push    1
.text:00007D92                 mov     ecx, [ebp+var_4]
.text:00007D95                 call    ??_GCXzDecoder@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CXzDecoder::`scalar deleting destructor'(uint)
.text:00007D9A                 mov     [ebp+var_10], eax
.text:00007D9D                 jmp     short loc_7DA6
.text:00007D9F ; ---------------------------------------------------------------------------
.text:00007D9F
.text:00007D9F loc_7D9F:                               ; CODE XREF: NArchive::NZip::CXzDecoder::Release(void)+4Aj
.text:00007D9F                 mov     [ebp+var_10], 0
.text:00007DA6
.text:00007DA6 loc_7DA6:                               ; CODE XREF: NArchive::NZip::CXzDecoder::Release(void)+59j
.text:00007DA6                 xor     eax, eax
.text:00007DA8
.text:00007DA8 loc_7DA8:                               ; CODE XREF: NArchive::NZip::CXzDecoder::Release(void)+38j
.text:00007DA8                 add     esp, 10h
.text:00007DAB                 cmp     ebp, esp
.text:00007DAD                 call    __RTC_CheckEsp
.text:00007DB2                 mov     esp, ebp
.text:00007DB4                 pop     ebp
.text:00007DB5                 retn    4
.text:00007DB5 ?Release@CXzDecoder@NZip@NArchive@@UAGKXZ endp
.text:00007DB5
.text:00007DB5 _text           ends
.text:00007DB5
.text:00007DB8 ; ===========================================================================
.text:00007DB8
.text:00007DB8 ; Segment type: Pure code
.text:00007DB8 ; Segment permissions: Read/Execute
.text:00007DB8 _text           segment para public 'CODE' use32
.text:00007DB8                 assume cs:_text
.text:00007DB8                 ;org 7DB8h
.text:00007DB8 ; COMDAT (pick any)
.text:00007DB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007DB8
.text:00007DB8 ; =============== S U B R O U T I N E =======================================
.text:00007DB8
.text:00007DB8 ; Attributes: bp-based frame
.text:00007DB8
.text:00007DB8 ; public: void * __thiscall NArchive::NZip::CXzDecoder::`scalar deleting destructor'(unsigned int)
.text:00007DB8                 public ??_GCXzDecoder@NZip@NArchive@@QAEPAXI@Z
.text:00007DB8 ??_GCXzDecoder@NZip@NArchive@@QAEPAXI@Z proc near
.text:00007DB8                                         ; CODE XREF: NArchive::NZip::CXzDecoder::Release(void)+51p
.text:00007DB8
.text:00007DB8 var_4           = dword ptr -4
.text:00007DB8 arg_0           = dword ptr  8
.text:00007DB8
.text:00007DB8                 push    ebp
.text:00007DB9                 mov     ebp, esp
.text:00007DBB                 push    ecx
.text:00007DBC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007DC3                 mov     [ebp+var_4], ecx
.text:00007DC6                 mov     ecx, [ebp+var_4] ; this
.text:00007DC9                 call    ??1CXzDecoder@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CXzDecoder::~CXzDecoder(void)
.text:00007DCE                 mov     eax, [ebp+arg_0]
.text:00007DD1                 and     eax, 1
.text:00007DD4                 jz      short loc_7DE2
.text:00007DD6                 mov     ecx, [ebp+var_4]
.text:00007DD9                 push    ecx             ; void *
.text:00007DDA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007DDF                 add     esp, 4
.text:00007DE2
.text:00007DE2 loc_7DE2:                               ; CODE XREF: NArchive::NZip::CXzDecoder::`scalar deleting destructor'(uint)+1Cj
.text:00007DE2                 mov     eax, [ebp+var_4]
.text:00007DE5                 add     esp, 4
.text:00007DE8                 cmp     ebp, esp
.text:00007DEA                 call    __RTC_CheckEsp
.text:00007DEF                 mov     esp, ebp
.text:00007DF1                 pop     ebp
.text:00007DF2                 retn    4
.text:00007DF2 ??_GCXzDecoder@NZip@NArchive@@QAEPAXI@Z endp
.text:00007DF2
.text:00007DF2 ; ---------------------------------------------------------------------------
.text:00007DF5                 align 4
.text:00007DF5 _text           ends
.text:00007DF5
.text:00007DF8 ; ===========================================================================
.text:00007DF8
.text:00007DF8 ; Segment type: Pure code
.text:00007DF8 ; Segment permissions: Read/Execute
.text:00007DF8 _text           segment para public 'CODE' use32
.text:00007DF8                 assume cs:_text
.text:00007DF8                 ;org 7DF8h
.text:00007DF8 ; COMDAT (pick any)
.text:00007DF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007DF8
.text:00007DF8 ; =============== S U B R O U T I N E =======================================
.text:00007DF8
.text:00007DF8 ; Attributes: bp-based frame
.text:00007DF8
.text:00007DF8 ; _DWORD __thiscall NArchive::NZip::CXzDecoder::~CXzDecoder(NArchive::NZip::CXzDecoder *__hidden this)
.text:00007DF8                 public ??1CXzDecoder@NZip@NArchive@@QAE@XZ
.text:00007DF8 ??1CXzDecoder@NZip@NArchive@@QAE@XZ proc near
.text:00007DF8                                         ; CODE XREF: NArchive::NZip::CXzDecoder::`scalar deleting destructor'(uint)+11p
.text:00007DF8
.text:00007DF8 var_4           = dword ptr -4
.text:00007DF8
.text:00007DF8                 push    ebp
.text:00007DF9                 mov     ebp, esp
.text:00007DFB                 push    ecx
.text:00007DFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007E03                 mov     [ebp+var_4], ecx
.text:00007E06                 mov     ecx, [ebp+var_4]
.text:00007E09                 add     ecx, 8          ; this
.text:00007E0C                 call    ??1CDecoder@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CDecoder::~CDecoder(void)
.text:00007E11                 add     esp, 4
.text:00007E14                 cmp     ebp, esp
.text:00007E16                 call    __RTC_CheckEsp
.text:00007E1B                 mov     esp, ebp
.text:00007E1D                 pop     ebp
.text:00007E1E                 retn
.text:00007E1E ??1CXzDecoder@NZip@NArchive@@QAE@XZ endp
.text:00007E1E
.text:00007E1E ; ---------------------------------------------------------------------------
.text:00007E1F                 align 10h
.text:00007E1F _text           ends
.text:00007E1F
.text:00007E20 ; ===========================================================================
.text:00007E20
.text:00007E20 ; Segment type: Pure code
.text:00007E20 ; Segment permissions: Read/Execute
.text:00007E20 _text           segment para public 'CODE' use32
.text:00007E20                 assume cs:_text
.text:00007E20                 ;org 7E20h
.text:00007E20 ; COMDAT (pick any)
.text:00007E20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007E20
.text:00007E20 ; =============== S U B R O U T I N E =======================================
.text:00007E20
.text:00007E20 ; Attributes: bp-based frame
.text:00007E20
.text:00007E20 ; _DWORD __thiscall NArchive::NXz::CDecoder::~CDecoder(NArchive::NXz::CDecoder *__hidden this)
.text:00007E20                 public ??1CDecoder@NXz@NArchive@@QAE@XZ
.text:00007E20 ??1CDecoder@NXz@NArchive@@QAE@XZ proc near
.text:00007E20                                         ; CODE XREF: NArchive::NZip::CXzDecoder::~CXzDecoder(void)+14p
.text:00007E20
.text:00007E20 var_4           = dword ptr -4
.text:00007E20
.text:00007E20                 push    ebp
.text:00007E21                 mov     ebp, esp
.text:00007E23                 push    ecx
.text:00007E24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007E2B                 mov     [ebp+var_4], ecx
.text:00007E2E                 mov     ecx, [ebp+var_4]
.text:00007E31                 add     ecx, 38h ; '8'  ; this
.text:00007E34                 call    ??1CXzUnpackerCPP@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CXzUnpackerCPP::~CXzUnpackerCPP(void)
.text:00007E39                 add     esp, 4
.text:00007E3C                 cmp     ebp, esp
.text:00007E3E                 call    __RTC_CheckEsp
.text:00007E43                 mov     esp, ebp
.text:00007E45                 pop     ebp
.text:00007E46                 retn
.text:00007E46 ??1CDecoder@NXz@NArchive@@QAE@XZ endp
.text:00007E46
.text:00007E46 ; ---------------------------------------------------------------------------
.text:00007E47                 align 4
.text:00007E47 _text           ends
.text:00007E47
.text:00007E48 ; ===========================================================================
.text:00007E48
.text:00007E48 ; Segment type: Pure code
.text:00007E48 ; Segment permissions: Read/Execute
.text:00007E48 _text           segment para public 'CODE' use32
.text:00007E48                 assume cs:_text
.text:00007E48                 ;org 7E48h
.text:00007E48 ; COMDAT (pick any)
.text:00007E48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007E48
.text:00007E48 ; =============== S U B R O U T I N E =======================================
.text:00007E48
.text:00007E48 ; Attributes: bp-based frame
.text:00007E48
.text:00007E48 ; _DWORD __thiscall NCrypto::NWzAes::CBaseCoder::CBaseCoder(NCrypto::NWzAes::CBaseCoder *__hidden this)
.text:00007E48                 public ??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ
.text:00007E48 ??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ proc near
.text:00007E48                                         ; CODE XREF: NCrypto::NWzAes::CDecoder::CDecoder(void)+11p
.text:00007E48
.text:00007E48 var_10          = dword ptr -10h
.text:00007E48 var_C           = dword ptr -0Ch
.text:00007E48 var_4           = dword ptr -4
.text:00007E48
.text:00007E48                 push    ebp
.text:00007E49                 mov     ebp, esp
.text:00007E4B                 push    0FFFFFFFFh
.text:00007E4D                 push    offset __ehhandler$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ
.text:00007E52                 mov     eax, large fs:0
.text:00007E58                 push    eax
.text:00007E59                 push    ecx
.text:00007E5A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00007E61                 mov     eax, dword ptr ds:___security_cookie
.text:00007E66                 xor     eax, ebp
.text:00007E68                 push    eax
.text:00007E69                 lea     eax, [ebp+var_C]
.text:00007E6C                 mov     large fs:0, eax
.text:00007E72                 mov     [ebp+var_10], ecx
.text:00007E75                 mov     ecx, [ebp+var_10] ; this
.text:00007E78                 call    ??0ICompressFilter@@QAE@XZ ; ICompressFilter::ICompressFilter(void)
.text:00007E7D                 mov     ecx, [ebp+var_10]
.text:00007E80                 add     ecx, 4          ; this
.text:00007E83                 call    ??0ICryptoSetPassword@@QAE@XZ ; ICryptoSetPassword::ICryptoSetPassword(void)
.text:00007E88                 mov     ecx, [ebp+var_10]
.text:00007E8B                 add     ecx, 8          ; this
.text:00007E8E                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00007E93                 mov     eax, [ebp+var_10]
.text:00007E96                 mov     dword ptr [eax], offset ??_7CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@ ; const NCrypto::NWzAes::CBaseCoder::`vftable'{for `ICompressFilter'}
.text:00007E9C                 mov     ecx, [ebp+var_10]
.text:00007E9F                 mov     dword ptr [ecx+4], offset ??_7CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::NWzAes::CBaseCoder::`vftable'{for `ICryptoSetPassword'}
.text:00007EA6                 mov     ecx, [ebp+var_10]
.text:00007EA9                 add     ecx, 0Ch        ; this
.text:00007EAC                 call    ??0CKeyInfo@NWzAes@NCrypto@@QAE@XZ ; NCrypto::NWzAes::CKeyInfo::CKeyInfo(void)
.text:00007EB1                 mov     [ebp+var_4], 0
.text:00007EB8                 mov     ecx, [ebp+var_10]
.text:00007EBB                 add     ecx, 0F0h ; '=' ; this
.text:00007EC1                 call    ??0CAesCtr2@NWzAes@NCrypto@@QAE@XZ ; NCrypto::NWzAes::CAesCtr2::CAesCtr2(void)
.text:00007EC6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007ECD                 mov     eax, [ebp+var_10]
.text:00007ED0                 mov     ecx, [ebp+var_C]
.text:00007ED3                 mov     large fs:0, ecx
.text:00007EDA                 pop     ecx
.text:00007EDB                 add     esp, 10h
.text:00007EDE                 cmp     ebp, esp
.text:00007EE0                 call    __RTC_CheckEsp
.text:00007EE5                 mov     esp, ebp
.text:00007EE7                 pop     ebp
.text:00007EE8                 retn
.text:00007EE8 ??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ endp
.text:00007EE8
.text:00007EE8 ; ---------------------------------------------------------------------------
.text:00007EE9                 align 4
.text:00007EE9 _text           ends
.text:00007EE9
.text$x:00007EEC ; ===========================================================================
.text$x:00007EEC
.text$x:00007EEC ; Segment type: Pure code
.text$x:00007EEC ; Segment permissions: Read/Execute
.text$x:00007EEC _text$x         segment para public 'CODE' use32
.text$x:00007EEC                 assume cs:_text$x
.text$x:00007EEC                 ;org 7EECh
.text$x:00007EEC ; COMDAT (pick associative to section at 7E48)
.text$x:00007EEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007EEC
.text$x:00007EEC ; =============== S U B R O U T I N E =======================================
.text$x:00007EEC
.text$x:00007EEC
.text$x:00007EEC __unwindfunclet$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ$0 proc near
.text$x:00007EEC                                         ; DATA XREF: .xdata$x:00007F44o
.text$x:00007EEC                 mov     ecx, [ebp-10h]
.text$x:00007EEF                 add     ecx, 0Ch        ; this
.text$x:00007EF2                 jmp     ??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ ; NCrypto::NWzAes::CKeyInfo::~CKeyInfo(void)
.text$x:00007EF2 __unwindfunclet$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ$0 endp
.text$x:00007EF2
.text$x:00007EF7
.text$x:00007EF7 ; =============== S U B R O U T I N E =======================================
.text$x:00007EF7
.text$x:00007EF7
.text$x:00007EF7 __ehhandler$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ proc near
.text$x:00007EF7                                         ; DATA XREF: NCrypto::NWzAes::CBaseCoder::CBaseCoder(void)+5o
.text$x:00007EF7
.text$x:00007EF7 arg_4           = dword ptr  8
.text$x:00007EF7
.text$x:00007EF7                 mov     edx, [esp+arg_4]
.text$x:00007EFB                 lea     eax, [edx+0Ch]
.text$x:00007EFE                 mov     ecx, [edx-8]
.text$x:00007F01                 xor     ecx, eax
.text$x:00007F03                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007F08                 mov     eax, offset __ehfuncinfo$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ
.text$x:00007F0D                 jmp     ___CxxFrameHandler3
.text$x:00007F0D __ehhandler$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ endp
.text$x:00007F0D
.text$x:00007F0D ; ---------------------------------------------------------------------------
.text$x:00007F12                 align 4
.text$x:00007F12 _text$x         ends
.text$x:00007F12
.rdata:00007F14 ; ===========================================================================
.rdata:00007F14
.rdata:00007F14 ; Segment type: Pure data
.rdata:00007F14 ; Segment permissions: Read
.rdata:00007F14 _rdata          segment dword public 'DATA' use32
.rdata:00007F14                 assume cs:_rdata
.rdata:00007F14                 ;org 7F14h
.rdata:00007F14 ; COMDAT (pick largest)
.rdata:00007F14                 dd offset ??_R4CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::NWzAes::CBaseCoder::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata:00007F18                 public ??_7CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@
.rdata:00007F18 ; const NCrypto::NWzAes::CBaseCoder::`vftable'{for `ICryptoSetPassword'}
.rdata:00007F18 ??_7CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ dd offset ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00007F18                                         ; DATA XREF: NCrypto::NWzAes::CBaseCoder::CBaseCoder(void)+57o
.rdata:00007F18                                         ; [thunk]:NCrypto::NWzAes::CBaseCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00007F1C                 dd offset ?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::NWzAes::CBaseCoder::AddRef`adjustor{4}' (void)
.rdata:00007F20                 dd offset ?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::NWzAes::CBaseCoder::Release`adjustor{4}' (void)
.rdata:00007F24                 dd offset ?CryptoSetPassword@CBaseCoder@NWzAes@NCrypto@@UAGJPBEI@Z ; NCrypto::NWzAes::CBaseCoder::CryptoSetPassword(uchar const *,uint)
.rdata:00007F24 _rdata          ends
.rdata:00007F24
.rdata:00007F28 ; ===========================================================================
.rdata:00007F28
.rdata:00007F28 ; Segment type: Pure data
.rdata:00007F28 ; Segment permissions: Read
.rdata:00007F28 _rdata          segment dword public 'DATA' use32
.rdata:00007F28                 assume cs:_rdata
.rdata:00007F28                 ;org 7F28h
.rdata:00007F28 ; COMDAT (pick largest)
.rdata:00007F28                 dd offset ??_R4CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@ ; const NCrypto::NWzAes::CBaseCoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:00007F2C                 public ??_7CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@
.rdata:00007F2C ; const NCrypto::NWzAes::CBaseCoder::`vftable'{for `ICompressFilter'}
.rdata:00007F2C ??_7CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@ dd offset ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.rdata:00007F2C                                         ; DATA XREF: NCrypto::NWzAes::CBaseCoder::CBaseCoder(void)+4Eo
.rdata:00007F2C                                         ; NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)
.rdata:00007F30                 dd offset ?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ ; NCrypto::NWzAes::CBaseCoder::AddRef(void)
.rdata:00007F34                 dd offset ?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ ; NCrypto::NWzAes::CBaseCoder::Release(void)
.rdata:00007F38                 dd offset ?Init@CBaseCoder@NWzAes@NCrypto@@UAGJXZ ; NCrypto::NWzAes::CBaseCoder::Init(void)
.rdata:00007F3C                 dd offset __purecall
.rdata:00007F3C _rdata          ends
.rdata:00007F3C
.xdata$x:00007F40 ; ===========================================================================
.xdata$x:00007F40
.xdata$x:00007F40 ; Segment type: Pure data
.xdata$x:00007F40 ; Segment permissions: Read
.xdata$x:00007F40 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007F40                 assume cs:_xdata$x
.xdata$x:00007F40                 ;org 7F40h
.xdata$x:00007F40 ; COMDAT (pick associative to section at 7E48)
.xdata$x:00007F40 __unwindtable$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ db 0FFh
.xdata$x:00007F40                                         ; DATA XREF: .xdata$x:00007F50o
.xdata$x:00007F41                 db 0FFh
.xdata$x:00007F42                 db 0FFh
.xdata$x:00007F43                 db 0FFh
.xdata$x:00007F44                 dd offset __unwindfunclet$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ$0
.xdata$x:00007F48 __ehfuncinfo$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ db  22h ; "
.xdata$x:00007F48                                         ; DATA XREF: __ehhandler$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ+11o
.xdata$x:00007F49                 db    5
.xdata$x:00007F4A                 db  93h ; ô
.xdata$x:00007F4B                 db  19h
.xdata$x:00007F4C                 db    1
.xdata$x:00007F4D                 db    0
.xdata$x:00007F4E                 db    0
.xdata$x:00007F4F                 db    0
.xdata$x:00007F50                 dd offset __unwindtable$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ
.xdata$x:00007F54                 db    0
.xdata$x:00007F55                 db    0
.xdata$x:00007F56                 db    0
.xdata$x:00007F57                 db    0
.xdata$x:00007F58                 db    0
.xdata$x:00007F59                 db    0
.xdata$x:00007F5A                 db    0
.xdata$x:00007F5B                 db    0
.xdata$x:00007F5C                 db    0
.xdata$x:00007F5D                 db    0
.xdata$x:00007F5E                 db    0
.xdata$x:00007F5F                 db    0
.xdata$x:00007F60                 db    0
.xdata$x:00007F61                 db    0
.xdata$x:00007F62                 db    0
.xdata$x:00007F63                 db    0
.xdata$x:00007F64                 db    0
.xdata$x:00007F65                 db    0
.xdata$x:00007F66                 db    0
.xdata$x:00007F67                 db    0
.xdata$x:00007F68                 db    1
.xdata$x:00007F69                 db    0
.xdata$x:00007F6A                 db    0
.xdata$x:00007F6B                 db    0
.xdata$x:00007F6B _xdata$x        ends
.xdata$x:00007F6B
.rdata$r:00007F6C ; ===========================================================================
.rdata$r:00007F6C
.rdata$r:00007F6C ; Segment type: Pure data
.rdata$r:00007F6C ; Segment permissions: Read
.rdata$r:00007F6C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007F6C                 assume cs:_rdata$r
.rdata$r:00007F6C                 ;org 7F6Ch
.rdata$r:00007F6C ; COMDAT (pick any)
.rdata$r:00007F6C                 public ??_R4CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@
.rdata$r:00007F6C ; const NCrypto::NWzAes::CBaseCoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:00007F6C ??_R4CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@ db    0
.rdata$r:00007F6C                                         ; DATA XREF: .rdata:00007F28o
.rdata$r:00007F6D                 db    0
.rdata$r:00007F6E                 db    0
.rdata$r:00007F6F                 db    0
.rdata$r:00007F70                 db    0
.rdata$r:00007F71                 db    0
.rdata$r:00007F72                 db    0
.rdata$r:00007F73                 db    0
.rdata$r:00007F74                 db    0
.rdata$r:00007F75                 db    0
.rdata$r:00007F76                 db    0
.rdata$r:00007F77                 db    0
.rdata$r:00007F78                 dd offset ??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8 ; NCrypto::NWzAes::CBaseCoder `RTTI Type Descriptor'
.rdata$r:00007F7C                 dd offset ??_R3CBaseCoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007F7C _rdata$r        ends
.rdata$r:00007F7C
.rdata$r:00007F80 ; ===========================================================================
.rdata$r:00007F80
.rdata$r:00007F80 ; Segment type: Pure data
.rdata$r:00007F80 ; Segment permissions: Read
.rdata$r:00007F80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007F80                 assume cs:_rdata$r
.rdata$r:00007F80                 ;org 7F80h
.rdata$r:00007F80 ; COMDAT (pick any)
.rdata$r:00007F80                 public ??_R4CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@
.rdata$r:00007F80 ; const NCrypto::NWzAes::CBaseCoder::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata$r:00007F80 ??_R4CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ db    0
.rdata$r:00007F80                                         ; DATA XREF: .rdata:00007F14o
.rdata$r:00007F81                 db    0
.rdata$r:00007F82                 db    0
.rdata$r:00007F83                 db    0
.rdata$r:00007F84                 db    4
.rdata$r:00007F85                 db    0
.rdata$r:00007F86                 db    0
.rdata$r:00007F87                 db    0
.rdata$r:00007F88                 db    0
.rdata$r:00007F89                 db    0
.rdata$r:00007F8A                 db    0
.rdata$r:00007F8B                 db    0
.rdata$r:00007F8C                 dd offset ??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8 ; NCrypto::NWzAes::CBaseCoder `RTTI Type Descriptor'
.rdata$r:00007F90                 dd offset ??_R3CBaseCoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007F90 _rdata$r        ends
.rdata$r:00007F90
.text:00007F94 ; ===========================================================================
.text:00007F94
.text:00007F94 ; Segment type: Pure code
.text:00007F94 ; Segment permissions: Read/Execute
.text:00007F94 _text           segment para public 'CODE' use32
.text:00007F94                 assume cs:_text
.text:00007F94                 ;org 7F94h
.text:00007F94 ; COMDAT (pick any)
.text:00007F94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007F94
.text:00007F94 ; =============== S U B R O U T I N E =======================================
.text:00007F94
.text:00007F94 ; Attributes: bp-based frame
.text:00007F94
.text:00007F94 ; _DWORD __thiscall NCrypto::NWzAes::CKeyInfo::CKeyInfo(NCrypto::NWzAes::CKeyInfo *__hidden this)
.text:00007F94                 public ??0CKeyInfo@NWzAes@NCrypto@@QAE@XZ
.text:00007F94 ??0CKeyInfo@NWzAes@NCrypto@@QAE@XZ proc near
.text:00007F94                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::CBaseCoder(void)+64p
.text:00007F94
.text:00007F94 var_4           = dword ptr -4
.text:00007F94
.text:00007F94                 push    ebp
.text:00007F95                 mov     ebp, esp
.text:00007F97                 push    ecx
.text:00007F98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007F9F                 mov     [ebp+var_4], ecx
.text:00007FA2                 mov     eax, [ebp+var_4]
.text:00007FA5                 mov     dword ptr [eax], 3
.text:00007FAB                 mov     ecx, [ebp+var_4]
.text:00007FAE                 add     ecx, 18h
.text:00007FB1                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:00007FB6                 mov     eax, [ebp+var_4]
.text:00007FB9                 add     esp, 4
.text:00007FBC                 cmp     ebp, esp
.text:00007FBE                 call    __RTC_CheckEsp
.text:00007FC3                 mov     esp, ebp
.text:00007FC5                 pop     ebp
.text:00007FC6                 retn
.text:00007FC6 ??0CKeyInfo@NWzAes@NCrypto@@QAE@XZ endp
.text:00007FC6
.text:00007FC6 ; ---------------------------------------------------------------------------
.text:00007FC7                 align 4
.text:00007FC7 _text           ends
.text:00007FC7
.text:00007FC8 ; ===========================================================================
.text:00007FC8
.text:00007FC8 ; Segment type: Pure code
.text:00007FC8 ; Segment permissions: Read/Execute
.text:00007FC8 _text           segment para public 'CODE' use32
.text:00007FC8                 assume cs:_text
.text:00007FC8                 ;org 7FC8h
.text:00007FC8 ; COMDAT (pick any)
.text:00007FC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007FC8
.text:00007FC8 ; =============== S U B R O U T I N E =======================================
.text:00007FC8
.text:00007FC8 ; Attributes: bp-based frame
.text:00007FC8
.text:00007FC8 ; _DWORD __thiscall NCrypto::NZipStrong::CBaseCoder::CBaseCoder(NCrypto::NZipStrong::CBaseCoder *__hidden this)
.text:00007FC8                 public ??0CBaseCoder@NZipStrong@NCrypto@@QAE@XZ
.text:00007FC8 ??0CBaseCoder@NZipStrong@NCrypto@@QAE@XZ proc near
.text:00007FC8                                         ; CODE XREF: NCrypto::NZipStrong::CDecoder::CDecoder(void)+11p
.text:00007FC8
.text:00007FC8 var_4           = dword ptr -4
.text:00007FC8
.text:00007FC8                 push    ebp
.text:00007FC9                 mov     ebp, esp
.text:00007FCB                 push    ecx
.text:00007FCC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007FD3                 mov     [ebp+var_4], ecx
.text:00007FD6                 push    0               ; unsigned int
.text:00007FD8                 mov     ecx, [ebp+var_4] ; this
.text:00007FDB                 call    ??0CAesCbcDecoder@NCrypto@@QAE@I@Z ; NCrypto::CAesCbcDecoder::CAesCbcDecoder(uint)
.text:00007FE0                 mov     ecx, [ebp+var_4]
.text:00007FE3                 add     ecx, 14Ch       ; this
.text:00007FE9                 call    ??0ICryptoSetPassword@@QAE@XZ ; ICryptoSetPassword::ICryptoSetPassword(void)
.text:00007FEE                 mov     eax, [ebp+var_4]
.text:00007FF1                 mov     dword ptr [eax], offset ??_7CBaseCoder@NZipStrong@NCrypto@@6BICompressFilter@@@ ; const NCrypto::NZipStrong::CBaseCoder::`vftable'{for `ICompressFilter'}
.text:00007FF7                 mov     ecx, [ebp+var_4]
.text:00007FFA                 mov     dword ptr [ecx+4], offset ??_7CBaseCoder@NZipStrong@NCrypto@@6BICryptoProperties@@@ ; const NCrypto::NZipStrong::CBaseCoder::`vftable'{for `ICryptoProperties'}
.text:00008001                 mov     edx, [ebp+var_4]
.text:00008004                 mov     dword ptr [edx+8], offset ??_7CBaseCoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@ ; const NCrypto::NZipStrong::CBaseCoder::`vftable'{for `ICompressSetCoderProperties'}
.text:0000800B                 mov     eax, [ebp+var_4]
.text:0000800E                 mov     dword ptr [eax+14Ch], offset ??_7CBaseCoder@NZipStrong@NCrypto@@6B@ ; const NCrypto::NZipStrong::CBaseCoder::`vftable'
.text:00008018                 mov     ecx, [ebp+var_4]
.text:0000801B                 add     ecx, 174h
.text:00008021                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:00008026                 mov     eax, [ebp+var_4]
.text:00008029                 add     esp, 4
.text:0000802C                 cmp     ebp, esp
.text:0000802E                 call    __RTC_CheckEsp
.text:00008033                 mov     esp, ebp
.text:00008035                 pop     ebp
.text:00008036                 retn
.text:00008036 ??0CBaseCoder@NZipStrong@NCrypto@@QAE@XZ endp
.text:00008036
.text:00008036 ; ---------------------------------------------------------------------------
.text:00008037                 align 4
.text:00008037 _text           ends
.text:00008037
.rdata:00008038 ; ===========================================================================
.rdata:00008038
.rdata:00008038 ; Segment type: Pure data
.rdata:00008038 ; Segment permissions: Read
.rdata:00008038 _rdata          segment dword public 'DATA' use32
.rdata:00008038                 assume cs:_rdata
.rdata:00008038                 ;org 8038h
.rdata:00008038 ; COMDAT (pick largest)
.rdata:00008038                 dd offset ??_R4CBaseCoder@NZipStrong@NCrypto@@6B@ ; const NCrypto::NZipStrong::CBaseCoder::`RTTI Complete Object Locator'
.rdata:0000803C                 public ??_7CBaseCoder@NZipStrong@NCrypto@@6B@
.rdata:0000803C ; const NCrypto::NZipStrong::CBaseCoder::`vftable'
.rdata:0000803C ??_7CBaseCoder@NZipStrong@NCrypto@@6B@ dd offset __purecall
.rdata:0000803C                                         ; DATA XREF: NCrypto::NZipStrong::CBaseCoder::CBaseCoder(void)+46o
.rdata:00008040                 dd offset __purecall
.rdata:00008044                 dd offset __purecall
.rdata:00008048                 dd offset ?CryptoSetPassword@CBaseCoder@NZipStrong@NCrypto@@UAGJPBEI@Z ; NCrypto::NZipStrong::CBaseCoder::CryptoSetPassword(uchar const *,uint)
.rdata:00008048 _rdata          ends
.rdata:00008048
.rdata:0000804C ; ===========================================================================
.rdata:0000804C
.rdata:0000804C ; Segment type: Pure data
.rdata:0000804C ; Segment permissions: Read
.rdata:0000804C _rdata          segment dword public 'DATA' use32
.rdata:0000804C                 assume cs:_rdata
.rdata:0000804C                 ;org 804Ch
.rdata:0000804C ; COMDAT (pick largest)
.rdata:0000804C                 dd offset ??_R4CBaseCoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@ ; const NCrypto::NZipStrong::CBaseCoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:00008050                 public ??_7CBaseCoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@
.rdata:00008050 ; const NCrypto::NZipStrong::CBaseCoder::`vftable'{for `ICompressSetCoderProperties'}
.rdata:00008050 ??_7CBaseCoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00008050                                         ; DATA XREF: NCrypto::NZipStrong::CBaseCoder::CBaseCoder(void)+3Co
.rdata:00008050                                         ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00008054                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{8}' (void)
.rdata:00008058                 dd offset ?Release@CAesCbcCoder@NCrypto@@W7AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{8}' (void)
.rdata:0000805C                 dd offset ?SetCoderProperties@CAesCbcCoder@NCrypto@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; NCrypto::CAesCbcCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:0000805C _rdata          ends
.rdata:0000805C
.rdata:00008060 ; ===========================================================================
.rdata:00008060
.rdata:00008060 ; Segment type: Pure data
.rdata:00008060 ; Segment permissions: Read
.rdata:00008060 _rdata          segment dword public 'DATA' use32
.rdata:00008060                 assume cs:_rdata
.rdata:00008060                 ;org 8060h
.rdata:00008060 ; COMDAT (pick largest)
.rdata:00008060                 dd offset ??_R4CBaseCoder@NZipStrong@NCrypto@@6BICryptoProperties@@@ ; const NCrypto::NZipStrong::CBaseCoder::`RTTI Complete Object Locator'{for `ICryptoProperties'}
.rdata:00008064                 public ??_7CBaseCoder@NZipStrong@NCrypto@@6BICryptoProperties@@@
.rdata:00008064 ; const NCrypto::NZipStrong::CBaseCoder::`vftable'{for `ICryptoProperties'}
.rdata:00008064 ??_7CBaseCoder@NZipStrong@NCrypto@@6BICryptoProperties@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00008064                                         ; DATA XREF: NCrypto::NZipStrong::CBaseCoder::CBaseCoder(void)+32o
.rdata:00008064                                         ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00008068                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{4}' (void)
.rdata:0000806C                 dd offset ?Release@CAesCbcCoder@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{4}' (void)
.rdata:00008070                 dd offset ?SetKey@CAesCbcCoder@NCrypto@@UAGJPBEI@Z ; NCrypto::CAesCbcCoder::SetKey(uchar const *,uint)
.rdata:00008074                 dd offset ?SetInitVector@CAesCbcCoder@NCrypto@@UAGJPBEI@Z ; NCrypto::CAesCbcCoder::SetInitVector(uchar const *,uint)
.rdata:00008074 _rdata          ends
.rdata:00008074
.rdata:00008078 ; ===========================================================================
.rdata:00008078
.rdata:00008078 ; Segment type: Pure data
.rdata:00008078 ; Segment permissions: Read
.rdata:00008078 _rdata          segment dword public 'DATA' use32
.rdata:00008078                 assume cs:_rdata
.rdata:00008078                 ;org 8078h
.rdata:00008078 ; COMDAT (pick largest)
.rdata:00008078                 dd offset ??_R4CBaseCoder@NZipStrong@NCrypto@@6BICompressFilter@@@ ; const NCrypto::NZipStrong::CBaseCoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:0000807C                 public ??_7CBaseCoder@NZipStrong@NCrypto@@6BICompressFilter@@@
.rdata:0000807C ; const NCrypto::NZipStrong::CBaseCoder::`vftable'{for `ICompressFilter'}
.rdata:0000807C ??_7CBaseCoder@NZipStrong@NCrypto@@6BICompressFilter@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.rdata:0000807C                                         ; DATA XREF: NCrypto::NZipStrong::CBaseCoder::CBaseCoder(void)+29o
.rdata:0000807C                                         ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)
.rdata:00008080                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::AddRef(void)
.rdata:00008084                 dd offset ?Release@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::Release(void)
.rdata:00008088                 dd offset ?Init@CBaseCoder@NZipStrong@NCrypto@@UAGJXZ ; NCrypto::NZipStrong::CBaseCoder::Init(void)
.rdata:0000808C                 dd offset ?Filter@CAesCbcCoder@NCrypto@@UAGIPAEI@Z ; NCrypto::CAesCbcCoder::Filter(uchar *,uint)
.rdata:0000808C _rdata          ends
.rdata:0000808C
.rdata$r:00008090 ; ===========================================================================
.rdata$r:00008090
.rdata$r:00008090 ; Segment type: Pure data
.rdata$r:00008090 ; Segment permissions: Read
.rdata$r:00008090 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008090                 assume cs:_rdata$r
.rdata$r:00008090                 ;org 8090h
.rdata$r:00008090 ; COMDAT (pick any)
.rdata$r:00008090                 public ??_R4CBaseCoder@NZipStrong@NCrypto@@6BICompressFilter@@@
.rdata$r:00008090 ; const NCrypto::NZipStrong::CBaseCoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:00008090 ??_R4CBaseCoder@NZipStrong@NCrypto@@6BICompressFilter@@@ db    0
.rdata$r:00008090                                         ; DATA XREF: .rdata:00008078o
.rdata$r:00008091                 db    0
.rdata$r:00008092                 db    0
.rdata$r:00008093                 db    0
.rdata$r:00008094                 db    0
.rdata$r:00008095                 db    0
.rdata$r:00008096                 db    0
.rdata$r:00008097                 db    0
.rdata$r:00008098                 db    0
.rdata$r:00008099                 db    0
.rdata$r:0000809A                 db    0
.rdata$r:0000809B                 db    0
.rdata$r:0000809C                 dd offset ??_R0?AVCBaseCoder@NZipStrong@NCrypto@@@8 ; NCrypto::NZipStrong::CBaseCoder `RTTI Type Descriptor'
.rdata$r:000080A0                 dd offset ??_R3CBaseCoder@NZipStrong@NCrypto@@8 ; NCrypto::NZipStrong::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000080A0 _rdata$r        ends
.rdata$r:000080A0
.rdata$r:000080A4 ; ===========================================================================
.rdata$r:000080A4
.rdata$r:000080A4 ; Segment type: Pure data
.rdata$r:000080A4 ; Segment permissions: Read
.rdata$r:000080A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000080A4                 assume cs:_rdata$r
.rdata$r:000080A4                 ;org 80A4h
.rdata$r:000080A4 ; COMDAT (pick any)
.rdata$r:000080A4                 public ??_R4CBaseCoder@NZipStrong@NCrypto@@6BICryptoProperties@@@
.rdata$r:000080A4 ; const NCrypto::NZipStrong::CBaseCoder::`RTTI Complete Object Locator'{for `ICryptoProperties'}
.rdata$r:000080A4 ??_R4CBaseCoder@NZipStrong@NCrypto@@6BICryptoProperties@@@ db    0
.rdata$r:000080A4                                         ; DATA XREF: .rdata:00008060o
.rdata$r:000080A5                 db    0
.rdata$r:000080A6                 db    0
.rdata$r:000080A7                 db    0
.rdata$r:000080A8                 db    4
.rdata$r:000080A9                 db    0
.rdata$r:000080AA                 db    0
.rdata$r:000080AB                 db    0
.rdata$r:000080AC                 db    0
.rdata$r:000080AD                 db    0
.rdata$r:000080AE                 db    0
.rdata$r:000080AF                 db    0
.rdata$r:000080B0                 dd offset ??_R0?AVCBaseCoder@NZipStrong@NCrypto@@@8 ; NCrypto::NZipStrong::CBaseCoder `RTTI Type Descriptor'
.rdata$r:000080B4                 dd offset ??_R3CBaseCoder@NZipStrong@NCrypto@@8 ; NCrypto::NZipStrong::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000080B4 _rdata$r        ends
.rdata$r:000080B4
.rdata$r:000080B8 ; ===========================================================================
.rdata$r:000080B8
.rdata$r:000080B8 ; Segment type: Pure data
.rdata$r:000080B8 ; Segment permissions: Read
.rdata$r:000080B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000080B8                 assume cs:_rdata$r
.rdata$r:000080B8                 ;org 80B8h
.rdata$r:000080B8 ; COMDAT (pick any)
.rdata$r:000080B8                 public ??_R4CBaseCoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@
.rdata$r:000080B8 ; const NCrypto::NZipStrong::CBaseCoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:000080B8 ??_R4CBaseCoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:000080B8                                         ; DATA XREF: .rdata:0000804Co
.rdata$r:000080B9                 db    0
.rdata$r:000080BA                 db    0
.rdata$r:000080BB                 db    0
.rdata$r:000080BC                 db    8
.rdata$r:000080BD                 db    0
.rdata$r:000080BE                 db    0
.rdata$r:000080BF                 db    0
.rdata$r:000080C0                 db    0
.rdata$r:000080C1                 db    0
.rdata$r:000080C2                 db    0
.rdata$r:000080C3                 db    0
.rdata$r:000080C4                 dd offset ??_R0?AVCBaseCoder@NZipStrong@NCrypto@@@8 ; NCrypto::NZipStrong::CBaseCoder `RTTI Type Descriptor'
.rdata$r:000080C8                 dd offset ??_R3CBaseCoder@NZipStrong@NCrypto@@8 ; NCrypto::NZipStrong::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000080C8 _rdata$r        ends
.rdata$r:000080C8
.rdata$r:000080CC ; ===========================================================================
.rdata$r:000080CC
.rdata$r:000080CC ; Segment type: Pure data
.rdata$r:000080CC ; Segment permissions: Read
.rdata$r:000080CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000080CC                 assume cs:_rdata$r
.rdata$r:000080CC                 ;org 80CCh
.rdata$r:000080CC ; COMDAT (pick any)
.rdata$r:000080CC                 public ??_R4CBaseCoder@NZipStrong@NCrypto@@6B@
.rdata$r:000080CC ; const NCrypto::NZipStrong::CBaseCoder::`RTTI Complete Object Locator'
.rdata$r:000080CC ??_R4CBaseCoder@NZipStrong@NCrypto@@6B@ db    0
.rdata$r:000080CC                                         ; DATA XREF: .rdata:00008038o
.rdata$r:000080CD                 db    0
.rdata$r:000080CE                 db    0
.rdata$r:000080CF                 db    0
.rdata$r:000080D0                 db  4Ch ; L
.rdata$r:000080D1                 db    1
.rdata$r:000080D2                 db    0
.rdata$r:000080D3                 db    0
.rdata$r:000080D4                 db    0
.rdata$r:000080D5                 db    0
.rdata$r:000080D6                 db    0
.rdata$r:000080D7                 db    0
.rdata$r:000080D8                 dd offset ??_R0?AVCBaseCoder@NZipStrong@NCrypto@@@8 ; NCrypto::NZipStrong::CBaseCoder `RTTI Type Descriptor'
.rdata$r:000080DC                 dd offset ??_R3CBaseCoder@NZipStrong@NCrypto@@8 ; NCrypto::NZipStrong::CBaseCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000080DC _rdata$r        ends
.rdata$r:000080DC
.text:000080E0 ; ===========================================================================
.text:000080E0
.text:000080E0 ; Segment type: Pure code
.text:000080E0 ; Segment permissions: Read/Execute
.text:000080E0 _text           segment para public 'CODE' use32
.text:000080E0                 assume cs:_text
.text:000080E0                 ;org 80E0h
.text:000080E0 ; COMDAT (pick any)
.text:000080E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000080E0
.text:000080E0 ; =============== S U B R O U T I N E =======================================
.text:000080E0
.text:000080E0 ; Attributes: bp-based frame
.text:000080E0
.text:000080E0 ; __int32 __stdcall NCrypto::CAesCbcCoder::QueryInterface(NCrypto::CAesCbcCoder *this, const struct _GUID *Buf1, void **)
.text:000080E0                 public ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.text:000080E0 ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000080E0                                         ; CODE XREF: [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:000080E0                                         ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j
.text:000080E0                                         ; DATA XREF: ...
.text:000080E0
.text:000080E0 var_C           = dword ptr -0Ch
.text:000080E0 var_8           = dword ptr -8
.text:000080E0 var_4           = dword ptr -4
.text:000080E0 this            = dword ptr  8
.text:000080E0 Buf1            = dword ptr  0Ch
.text:000080E0 arg_8           = dword ptr  10h
.text:000080E0
.text:000080E0                 push    ebp
.text:000080E1                 mov     ebp, esp
.text:000080E3                 sub     esp, 0Ch
.text:000080E6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000080ED                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000080F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000080FB                 mov     eax, [ebp+arg_8]
.text:000080FE                 mov     dword ptr [eax], 0
.text:00008104                 push    offset _IID_IUnknown ; Buf2
.text:00008109                 mov     ecx, [ebp+Buf1]
.text:0000810C                 push    ecx             ; Buf1
.text:0000810D                 call    ___@8           ; __(x,x)
.text:00008112                 test    eax, eax
.text:00008114                 jz      short loc_8138
.text:00008116                 cmp     [ebp+this], 0
.text:0000811A                 jz      short loc_8127
.text:0000811C                 mov     edx, [ebp+this]
.text:0000811F                 add     edx, 4
.text:00008122                 mov     [ebp+var_4], edx
.text:00008125                 jmp     short loc_812E
.text:00008127 ; ---------------------------------------------------------------------------
.text:00008127
.text:00008127 loc_8127:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+3Aj
.text:00008127                 mov     [ebp+var_4], 0
.text:0000812E
.text:0000812E loc_812E:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+45j
.text:0000812E                 mov     eax, [ebp+arg_8]
.text:00008131                 mov     ecx, [ebp+var_4]
.text:00008134                 mov     [eax], ecx
.text:00008136                 jmp     short loc_81A7
.text:00008138 ; ---------------------------------------------------------------------------
.text:00008138
.text:00008138 loc_8138:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+34j
.text:00008138                 push    offset _IID_ICryptoProperties ; Buf2
.text:0000813D                 mov     edx, [ebp+Buf1]
.text:00008140                 push    edx             ; Buf1
.text:00008141                 call    ___@8           ; __(x,x)
.text:00008146                 test    eax, eax
.text:00008148                 jz      short loc_816C
.text:0000814A                 cmp     [ebp+this], 0
.text:0000814E                 jz      short loc_815B
.text:00008150                 mov     eax, [ebp+this]
.text:00008153                 add     eax, 4
.text:00008156                 mov     [ebp+var_8], eax
.text:00008159                 jmp     short loc_8162
.text:0000815B ; ---------------------------------------------------------------------------
.text:0000815B
.text:0000815B loc_815B:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+6Ej
.text:0000815B                 mov     [ebp+var_8], 0
.text:00008162
.text:00008162 loc_8162:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+79j
.text:00008162                 mov     ecx, [ebp+arg_8]
.text:00008165                 mov     edx, [ebp+var_8]
.text:00008168                 mov     [ecx], edx
.text:0000816A                 jmp     short loc_81A7
.text:0000816C ; ---------------------------------------------------------------------------
.text:0000816C
.text:0000816C loc_816C:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+68j
.text:0000816C                 push    offset _IID_ICompressSetCoderProperties ; Buf2
.text:00008171                 mov     eax, [ebp+Buf1]
.text:00008174                 push    eax             ; Buf1
.text:00008175                 call    ___@8           ; __(x,x)
.text:0000817A                 test    eax, eax
.text:0000817C                 jz      short loc_81A0
.text:0000817E                 cmp     [ebp+this], 0
.text:00008182                 jz      short loc_818F
.text:00008184                 mov     ecx, [ebp+this]
.text:00008187                 add     ecx, 8
.text:0000818A                 mov     [ebp+var_C], ecx
.text:0000818D                 jmp     short loc_8196
.text:0000818F ; ---------------------------------------------------------------------------
.text:0000818F
.text:0000818F loc_818F:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+A2j
.text:0000818F                 mov     [ebp+var_C], 0
.text:00008196
.text:00008196 loc_8196:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+ADj
.text:00008196                 mov     edx, [ebp+arg_8]
.text:00008199                 mov     eax, [ebp+var_C]
.text:0000819C                 mov     [edx], eax
.text:0000819E                 jmp     short loc_81A7
.text:000081A0 ; ---------------------------------------------------------------------------
.text:000081A0
.text:000081A0 loc_81A0:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+9Cj
.text:000081A0                 mov     eax, 80004002h
.text:000081A5                 jmp     short loc_81B8
.text:000081A7 ; ---------------------------------------------------------------------------
.text:000081A7
.text:000081A7 loc_81A7:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+56j
.text:000081A7                                         ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+8Aj ...
.text:000081A7                 mov     ecx, [ebp+this]
.text:000081AA                 mov     edx, [ecx+0Ch]
.text:000081AD                 add     edx, 1
.text:000081B0                 mov     eax, [ebp+this]
.text:000081B3                 mov     [eax+0Ch], edx
.text:000081B6                 xor     eax, eax
.text:000081B8
.text:000081B8 loc_81B8:                               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+C5j
.text:000081B8                 add     esp, 0Ch
.text:000081BB                 cmp     ebp, esp
.text:000081BD                 call    __RTC_CheckEsp
.text:000081C2                 mov     esp, ebp
.text:000081C4                 pop     ebp
.text:000081C5                 retn    0Ch
.text:000081C5 ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z endp
.text:000081C5
.text:000081C5 _text           ends
.text:000081C5
.text:000081C8 ; ===========================================================================
.text:000081C8
.text:000081C8 ; Segment type: Pure code
.text:000081C8 ; Segment permissions: Read/Execute
.text:000081C8 _text           segment para public 'CODE' use32
.text:000081C8                 assume cs:_text
.text:000081C8                 ;org 81C8h
.text:000081C8 ; COMDAT (pick any)
.text:000081C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000081C8
.text:000081C8 ; =============== S U B R O U T I N E =======================================
.text:000081C8
.text:000081C8 ; Attributes: bp-based frame
.text:000081C8
.text:000081C8 ; unsigned __int32 __stdcall NCrypto::CAesCbcCoder::AddRef(NCrypto::CAesCbcCoder *this)
.text:000081C8                 public ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ
.text:000081C8 ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ proc near
.text:000081C8                                         ; CODE XREF: [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{4}' (void)+5j
.text:000081C8                                         ; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{8}' (void)+5j
.text:000081C8                                         ; DATA XREF: ...
.text:000081C8
.text:000081C8 var_4           = dword ptr -4
.text:000081C8 this            = dword ptr  8
.text:000081C8
.text:000081C8                 push    ebp
.text:000081C9                 mov     ebp, esp
.text:000081CB                 push    ecx
.text:000081CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000081D3                 mov     eax, [ebp+this]
.text:000081D6                 mov     ecx, [eax+0Ch]
.text:000081D9                 add     ecx, 1
.text:000081DC                 mov     [ebp+var_4], ecx
.text:000081DF                 mov     edx, [ebp+this]
.text:000081E2                 mov     eax, [ebp+var_4]
.text:000081E5                 mov     [edx+0Ch], eax
.text:000081E8                 mov     eax, [ebp+var_4]
.text:000081EB                 mov     esp, ebp
.text:000081ED                 pop     ebp
.text:000081EE                 retn    4
.text:000081EE ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ endp
.text:000081EE
.text:000081EE ; ---------------------------------------------------------------------------
.text:000081F1                 align 4
.text:000081F1 _text           ends
.text:000081F1
.text:000081F4 ; ===========================================================================
.text:000081F4
.text:000081F4 ; Segment type: Pure code
.text:000081F4 ; Segment permissions: Read/Execute
.text:000081F4 _text           segment para public 'CODE' use32
.text:000081F4                 assume cs:_text
.text:000081F4                 ;org 81F4h
.text:000081F4 ; COMDAT (pick any)
.text:000081F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000081F4
.text:000081F4 ; =============== S U B R O U T I N E =======================================
.text:000081F4
.text:000081F4 ; Attributes: bp-based frame
.text:000081F4
.text:000081F4 ; unsigned __int32 __stdcall NCrypto::CAesCbcCoder::Release(NCrypto::CAesCbcCoder *this)
.text:000081F4                 public ?Release@CAesCbcCoder@NCrypto@@UAGKXZ
.text:000081F4 ?Release@CAesCbcCoder@NCrypto@@UAGKXZ proc near
.text:000081F4                                         ; CODE XREF: [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{4}' (void)+5j
.text:000081F4                                         ; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{8}' (void)+5j
.text:000081F4                                         ; DATA XREF: ...
.text:000081F4
.text:000081F4 var_8           = dword ptr -8
.text:000081F4 var_4           = dword ptr -4
.text:000081F4 this            = dword ptr  8
.text:000081F4
.text:000081F4                 push    ebp
.text:000081F5                 mov     ebp, esp
.text:000081F7                 sub     esp, 8
.text:000081FA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008201                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008208                 mov     eax, [ebp+this]
.text:0000820B                 mov     ecx, [eax+0Ch]
.text:0000820E                 sub     ecx, 1
.text:00008211                 mov     [ebp+var_8], ecx
.text:00008214                 mov     edx, [ebp+this]
.text:00008217                 mov     eax, [ebp+var_8]
.text:0000821A                 mov     [edx+0Ch], eax
.text:0000821D                 cmp     [ebp+var_8], 0
.text:00008221                 jz      short loc_822B
.text:00008223                 mov     ecx, [ebp+this]
.text:00008226                 mov     eax, [ecx+0Ch]
.text:00008229                 jmp     short loc_823F
.text:0000822B ; ---------------------------------------------------------------------------
.text:0000822B
.text:0000822B loc_822B:                               ; CODE XREF: NCrypto::CAesCbcCoder::Release(void)+2Dj
.text:0000822B                 mov     edx, [ebp+this]
.text:0000822E                 mov     [ebp+var_4], edx
.text:00008231                 mov     eax, [ebp+var_4]
.text:00008234                 push    eax             ; void *
.text:00008235                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000823A                 add     esp, 4
.text:0000823D                 xor     eax, eax
.text:0000823F
.text:0000823F loc_823F:                               ; CODE XREF: NCrypto::CAesCbcCoder::Release(void)+35j
.text:0000823F                 add     esp, 8
.text:00008242                 cmp     ebp, esp
.text:00008244                 call    __RTC_CheckEsp
.text:00008249                 mov     esp, ebp
.text:0000824B                 pop     ebp
.text:0000824C                 retn    4
.text:0000824C ?Release@CAesCbcCoder@NCrypto@@UAGKXZ endp
.text:0000824C
.text:0000824C ; ---------------------------------------------------------------------------
.text:0000824F                 align 10h
.text:0000824F _text           ends
.text:0000824F
.text:00008250 ; ===========================================================================
.text:00008250
.text:00008250 ; Segment type: Pure code
.text:00008250 ; Segment permissions: Read/Execute
.text:00008250 _text           segment para public 'CODE' use32
.text:00008250                 assume cs:_text
.text:00008250                 ;org 8250h
.text:00008250 ; COMDAT (pick any)
.text:00008250                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008250
.text:00008250 ; =============== S U B R O U T I N E =======================================
.text:00008250
.text:00008250 ; Attributes: bp-based frame
.text:00008250
.text:00008250 ; _DWORD __thiscall NCrypto::CAesCbcDecoder::CAesCbcDecoder(NCrypto::CAesCbcDecoder *this, unsigned int)
.text:00008250                 public ??0CAesCbcDecoder@NCrypto@@QAE@I@Z
.text:00008250 ??0CAesCbcDecoder@NCrypto@@QAE@I@Z proc near
.text:00008250                                         ; CODE XREF: NCrypto::NZipStrong::CBaseCoder::CBaseCoder(void)+13p
.text:00008250
.text:00008250 var_4           = dword ptr -4
.text:00008250 arg_0           = dword ptr  8
.text:00008250
.text:00008250                 push    ebp
.text:00008251                 mov     ebp, esp
.text:00008253                 push    ecx
.text:00008254                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000825B                 mov     [ebp+var_4], ecx
.text:0000825E                 mov     eax, [ebp+arg_0]
.text:00008261                 push    eax             ; unsigned int
.text:00008262                 push    0               ; bool
.text:00008264                 mov     ecx, [ebp+var_4] ; this
.text:00008267                 call    ??0CAesCbcCoder@NCrypto@@QAE@_NI@Z ; NCrypto::CAesCbcCoder::CAesCbcCoder(bool,uint)
.text:0000826C                 mov     ecx, [ebp+var_4]
.text:0000826F                 mov     dword ptr [ecx], offset ??_7CAesCbcDecoder@NCrypto@@6BICompressFilter@@@ ; const NCrypto::CAesCbcDecoder::`vftable'{for `ICompressFilter'}
.text:00008275                 mov     edx, [ebp+var_4]
.text:00008278                 mov     dword ptr [edx+4], offset ??_7CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@ ; const NCrypto::CAesCbcDecoder::`vftable'{for `ICryptoProperties'}
.text:0000827F                 mov     eax, [ebp+var_4]
.text:00008282                 mov     dword ptr [eax+8], offset ??_7CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@ ; const NCrypto::CAesCbcDecoder::`vftable'{for `ICompressSetCoderProperties'}
.text:00008289                 mov     eax, [ebp+var_4]
.text:0000828C                 add     esp, 4
.text:0000828F                 cmp     ebp, esp
.text:00008291                 call    __RTC_CheckEsp
.text:00008296                 mov     esp, ebp
.text:00008298                 pop     ebp
.text:00008299                 retn    4
.text:00008299 ??0CAesCbcDecoder@NCrypto@@QAE@I@Z endp
.text:00008299
.text:00008299 _text           ends
.text:00008299
.rdata:0000829C ; ===========================================================================
.rdata:0000829C
.rdata:0000829C ; Segment type: Pure data
.rdata:0000829C ; Segment permissions: Read
.rdata:0000829C _rdata          segment dword public 'DATA' use32
.rdata:0000829C                 assume cs:_rdata
.rdata:0000829C                 ;org 829Ch
.rdata:0000829C ; COMDAT (pick largest)
.rdata:0000829C                 dd offset ??_R4CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@ ; const NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:000082A0                 public ??_7CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@
.rdata:000082A0 ; const NCrypto::CAesCbcDecoder::`vftable'{for `ICompressSetCoderProperties'}
.rdata:000082A0 ??_7CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z
.rdata:000082A0                                         ; DATA XREF: NCrypto::CAesCbcDecoder::CAesCbcDecoder(uint)+32o
.rdata:000082A0                                         ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:000082A4                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{8}' (void)
.rdata:000082A8                 dd offset ?Release@CAesCbcCoder@NCrypto@@W7AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{8}' (void)
.rdata:000082AC                 dd offset ?SetCoderProperties@CAesCbcCoder@NCrypto@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; NCrypto::CAesCbcCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:000082AC _rdata          ends
.rdata:000082AC
.rdata:000082B0 ; ===========================================================================
.rdata:000082B0
.rdata:000082B0 ; Segment type: Pure data
.rdata:000082B0 ; Segment permissions: Read
.rdata:000082B0 _rdata          segment dword public 'DATA' use32
.rdata:000082B0                 assume cs:_rdata
.rdata:000082B0                 ;org 82B0h
.rdata:000082B0 ; COMDAT (pick largest)
.rdata:000082B0                 dd offset ??_R4CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@ ; const NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'{for `ICryptoProperties'}
.rdata:000082B4                 public ??_7CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@
.rdata:000082B4 ; const NCrypto::CAesCbcDecoder::`vftable'{for `ICryptoProperties'}
.rdata:000082B4 ??_7CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.rdata:000082B4                                         ; DATA XREF: NCrypto::CAesCbcDecoder::CAesCbcDecoder(uint)+28o
.rdata:000082B4                                         ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:000082B8                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{4}' (void)
.rdata:000082BC                 dd offset ?Release@CAesCbcCoder@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{4}' (void)
.rdata:000082C0                 dd offset ?SetKey@CAesCbcCoder@NCrypto@@UAGJPBEI@Z ; NCrypto::CAesCbcCoder::SetKey(uchar const *,uint)
.rdata:000082C4                 dd offset ?SetInitVector@CAesCbcCoder@NCrypto@@UAGJPBEI@Z ; NCrypto::CAesCbcCoder::SetInitVector(uchar const *,uint)
.rdata:000082C4 _rdata          ends
.rdata:000082C4
.rdata:000082C8 ; ===========================================================================
.rdata:000082C8
.rdata:000082C8 ; Segment type: Pure data
.rdata:000082C8 ; Segment permissions: Read
.rdata:000082C8 _rdata          segment dword public 'DATA' use32
.rdata:000082C8                 assume cs:_rdata
.rdata:000082C8                 ;org 82C8h
.rdata:000082C8 ; COMDAT (pick largest)
.rdata:000082C8                 dd offset ??_R4CAesCbcDecoder@NCrypto@@6BICompressFilter@@@ ; const NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:000082CC                 public ??_7CAesCbcDecoder@NCrypto@@6BICompressFilter@@@
.rdata:000082CC ; const NCrypto::CAesCbcDecoder::`vftable'{for `ICompressFilter'}
.rdata:000082CC ??_7CAesCbcDecoder@NCrypto@@6BICompressFilter@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.rdata:000082CC                                         ; DATA XREF: NCrypto::CAesCbcDecoder::CAesCbcDecoder(uint)+1Fo
.rdata:000082CC                                         ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)
.rdata:000082D0                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::AddRef(void)
.rdata:000082D4                 dd offset ?Release@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::Release(void)
.rdata:000082D8                 dd offset ?Init@CAesCbcCoder@NCrypto@@UAGJXZ ; NCrypto::CAesCbcCoder::Init(void)
.rdata:000082DC                 dd offset ?Filter@CAesCbcCoder@NCrypto@@UAGIPAEI@Z ; NCrypto::CAesCbcCoder::Filter(uchar *,uint)
.rdata:000082DC _rdata          ends
.rdata:000082DC
.rdata$r:000082E0 ; ===========================================================================
.rdata$r:000082E0
.rdata$r:000082E0 ; Segment type: Pure data
.rdata$r:000082E0 ; Segment permissions: Read
.rdata$r:000082E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000082E0                 assume cs:_rdata$r
.rdata$r:000082E0                 ;org 82E0h
.rdata$r:000082E0 ; COMDAT (pick any)
.rdata$r:000082E0                 public ??_R4CAesCbcDecoder@NCrypto@@6BICompressFilter@@@
.rdata$r:000082E0 ; const NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:000082E0 ??_R4CAesCbcDecoder@NCrypto@@6BICompressFilter@@@ db    0
.rdata$r:000082E0                                         ; DATA XREF: .rdata:000082C8o
.rdata$r:000082E1                 db    0
.rdata$r:000082E2                 db    0
.rdata$r:000082E3                 db    0
.rdata$r:000082E4                 db    0
.rdata$r:000082E5                 db    0
.rdata$r:000082E6                 db    0
.rdata$r:000082E7                 db    0
.rdata$r:000082E8                 db    0
.rdata$r:000082E9                 db    0
.rdata$r:000082EA                 db    0
.rdata$r:000082EB                 db    0
.rdata$r:000082EC                 dd offset ??_R0?AUCAesCbcDecoder@NCrypto@@@8 ; NCrypto::CAesCbcDecoder `RTTI Type Descriptor'
.rdata$r:000082F0                 dd offset ??_R3CAesCbcDecoder@NCrypto@@8 ; NCrypto::CAesCbcDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000082F0 _rdata$r        ends
.rdata$r:000082F0
.rdata$r:000082F4 ; ===========================================================================
.rdata$r:000082F4
.rdata$r:000082F4 ; Segment type: Pure data
.rdata$r:000082F4 ; Segment permissions: Read
.rdata$r:000082F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000082F4                 assume cs:_rdata$r
.rdata$r:000082F4                 ;org 82F4h
.rdata$r:000082F4 ; COMDAT (pick any)
.rdata$r:000082F4                 public ??_R4CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@
.rdata$r:000082F4 ; const NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'{for `ICryptoProperties'}
.rdata$r:000082F4 ??_R4CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@ db    0
.rdata$r:000082F4                                         ; DATA XREF: .rdata:000082B0o
.rdata$r:000082F5                 db    0
.rdata$r:000082F6                 db    0
.rdata$r:000082F7                 db    0
.rdata$r:000082F8                 db    4
.rdata$r:000082F9                 db    0
.rdata$r:000082FA                 db    0
.rdata$r:000082FB                 db    0
.rdata$r:000082FC                 db    0
.rdata$r:000082FD                 db    0
.rdata$r:000082FE                 db    0
.rdata$r:000082FF                 db    0
.rdata$r:00008300                 dd offset ??_R0?AUCAesCbcDecoder@NCrypto@@@8 ; NCrypto::CAesCbcDecoder `RTTI Type Descriptor'
.rdata$r:00008304                 dd offset ??_R3CAesCbcDecoder@NCrypto@@8 ; NCrypto::CAesCbcDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008304 _rdata$r        ends
.rdata$r:00008304
.rdata$r:00008308 ; ===========================================================================
.rdata$r:00008308
.rdata$r:00008308 ; Segment type: Pure data
.rdata$r:00008308 ; Segment permissions: Read
.rdata$r:00008308 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008308                 assume cs:_rdata$r
.rdata$r:00008308                 ;org 8308h
.rdata$r:00008308 ; COMDAT (pick any)
.rdata$r:00008308                 public ??_R4CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@
.rdata$r:00008308 ; const NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:00008308 ??_R4CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:00008308                                         ; DATA XREF: .rdata:0000829Co
.rdata$r:00008309                 db    0
.rdata$r:0000830A                 db    0
.rdata$r:0000830B                 db    0
.rdata$r:0000830C                 db    8
.rdata$r:0000830D                 db    0
.rdata$r:0000830E                 db    0
.rdata$r:0000830F                 db    0
.rdata$r:00008310                 db    0
.rdata$r:00008311                 db    0
.rdata$r:00008312                 db    0
.rdata$r:00008313                 db    0
.rdata$r:00008314                 dd offset ??_R0?AUCAesCbcDecoder@NCrypto@@@8 ; NCrypto::CAesCbcDecoder `RTTI Type Descriptor'
.rdata$r:00008318                 dd offset ??_R3CAesCbcDecoder@NCrypto@@8 ; NCrypto::CAesCbcDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008318 _rdata$r        ends
.rdata$r:00008318
.text:0000831C ; ===========================================================================
.text:0000831C
.text:0000831C ; Segment type: Pure code
.text:0000831C ; Segment permissions: Read/Execute
.text:0000831C _text           segment para public 'CODE' use32
.text:0000831C                 assume cs:_text
.text:0000831C                 ;org 831Ch
.text:0000831C ; COMDAT (pick any)
.text:0000831C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000831C
.text:0000831C ; =============== S U B R O U T I N E =======================================
.text:0000831C
.text:0000831C ; Attributes: bp-based frame
.text:0000831C
.text:0000831C ; _DWORD __thiscall NCrypto::NZip::CCipher::CCipher(NCrypto::NZip::CCipher *__hidden this)
.text:0000831C                 public ??0CCipher@NZip@NCrypto@@QAE@XZ
.text:0000831C ??0CCipher@NZip@NCrypto@@QAE@XZ proc near
.text:0000831C                                         ; CODE XREF: NCrypto::NZip::CDecoder::CDecoder(void)+11p
.text:0000831C
.text:0000831C var_4           = dword ptr -4
.text:0000831C
.text:0000831C                 push    ebp
.text:0000831D                 mov     ebp, esp
.text:0000831F                 push    ecx
.text:00008320                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008327                 mov     [ebp+var_4], ecx
.text:0000832A                 mov     ecx, [ebp+var_4] ; this
.text:0000832D                 call    ??0ICompressFilter@@QAE@XZ ; ICompressFilter::ICompressFilter(void)
.text:00008332                 mov     ecx, [ebp+var_4]
.text:00008335                 add     ecx, 4          ; this
.text:00008338                 call    ??0ICryptoSetPassword@@QAE@XZ ; ICryptoSetPassword::ICryptoSetPassword(void)
.text:0000833D                 mov     ecx, [ebp+var_4]
.text:00008340                 add     ecx, 8          ; this
.text:00008343                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00008348                 mov     eax, [ebp+var_4]
.text:0000834B                 mov     dword ptr [eax], offset ??_7CCipher@NZip@NCrypto@@6BICompressFilter@@@ ; const NCrypto::NZip::CCipher::`vftable'{for `ICompressFilter'}
.text:00008351                 mov     ecx, [ebp+var_4]
.text:00008354                 mov     dword ptr [ecx+4], offset ??_7CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::NZip::CCipher::`vftable'{for `ICryptoSetPassword'}
.text:0000835B                 mov     eax, [ebp+var_4]
.text:0000835E                 add     esp, 4
.text:00008361                 cmp     ebp, esp
.text:00008363                 call    __RTC_CheckEsp
.text:00008368                 mov     esp, ebp
.text:0000836A                 pop     ebp
.text:0000836B                 retn
.text:0000836B ??0CCipher@NZip@NCrypto@@QAE@XZ endp
.text:0000836B
.text:0000836B _text           ends
.text:0000836B
.rdata:0000836C ; ===========================================================================
.rdata:0000836C
.rdata:0000836C ; Segment type: Pure data
.rdata:0000836C ; Segment permissions: Read
.rdata:0000836C _rdata          segment dword public 'DATA' use32
.rdata:0000836C                 assume cs:_rdata
.rdata:0000836C                 ;org 836Ch
.rdata:0000836C ; COMDAT (pick largest)
.rdata:0000836C                 dd offset ??_R4CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@ ; const NCrypto::NZip::CCipher::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata:00008370                 public ??_7CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@
.rdata:00008370 ; const NCrypto::NZip::CCipher::`vftable'{for `ICryptoSetPassword'}
.rdata:00008370 ??_7CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@ dd offset ?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00008370                                         ; DATA XREF: NCrypto::NZip::CCipher::CCipher(void)+38o
.rdata:00008370                                         ; [thunk]:NCrypto::NZip::CCipher::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00008374                 dd offset ?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::NZip::CCipher::AddRef`adjustor{4}' (void)
.rdata:00008378                 dd offset ?Release@CCipher@NZip@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::NZip::CCipher::Release`adjustor{4}' (void)
.rdata:0000837C                 dd offset ?CryptoSetPassword@CCipher@NZip@NCrypto@@UAGJPBEI@Z ; NCrypto::NZip::CCipher::CryptoSetPassword(uchar const *,uint)
.rdata:0000837C _rdata          ends
.rdata:0000837C
.rdata:00008380 ; ===========================================================================
.rdata:00008380
.rdata:00008380 ; Segment type: Pure data
.rdata:00008380 ; Segment permissions: Read
.rdata:00008380 _rdata          segment dword public 'DATA' use32
.rdata:00008380                 assume cs:_rdata
.rdata:00008380                 ;org 8380h
.rdata:00008380 ; COMDAT (pick largest)
.rdata:00008380                 dd offset ??_R4CCipher@NZip@NCrypto@@6BICompressFilter@@@ ; const NCrypto::NZip::CCipher::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:00008384                 public ??_7CCipher@NZip@NCrypto@@6BICompressFilter@@@
.rdata:00008384 ; const NCrypto::NZip::CCipher::`vftable'{for `ICompressFilter'}
.rdata:00008384 ??_7CCipher@NZip@NCrypto@@6BICompressFilter@@@ dd offset ?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.rdata:00008384                                         ; DATA XREF: NCrypto::NZip::CCipher::CCipher(void)+2Fo
.rdata:00008384                                         ; NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)
.rdata:00008388                 dd offset ?AddRef@CCipher@NZip@NCrypto@@UAGKXZ ; NCrypto::NZip::CCipher::AddRef(void)
.rdata:0000838C                 dd offset ?Release@CCipher@NZip@NCrypto@@UAGKXZ ; NCrypto::NZip::CCipher::Release(void)
.rdata:00008390                 dd offset ?Init@CCipher@NZip@NCrypto@@UAGJXZ ; NCrypto::NZip::CCipher::Init(void)
.rdata:00008394                 dd offset __purecall
.rdata:00008394 _rdata          ends
.rdata:00008394
.rdata$r:00008398 ; ===========================================================================
.rdata$r:00008398
.rdata$r:00008398 ; Segment type: Pure data
.rdata$r:00008398 ; Segment permissions: Read
.rdata$r:00008398 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008398                 assume cs:_rdata$r
.rdata$r:00008398                 ;org 8398h
.rdata$r:00008398 ; COMDAT (pick any)
.rdata$r:00008398                 public ??_R4CCipher@NZip@NCrypto@@6BICompressFilter@@@
.rdata$r:00008398 ; const NCrypto::NZip::CCipher::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:00008398 ??_R4CCipher@NZip@NCrypto@@6BICompressFilter@@@ db    0
.rdata$r:00008398                                         ; DATA XREF: .rdata:00008380o
.rdata$r:00008399                 db    0
.rdata$r:0000839A                 db    0
.rdata$r:0000839B                 db    0
.rdata$r:0000839C                 db    0
.rdata$r:0000839D                 db    0
.rdata$r:0000839E                 db    0
.rdata$r:0000839F                 db    0
.rdata$r:000083A0                 db    0
.rdata$r:000083A1                 db    0
.rdata$r:000083A2                 db    0
.rdata$r:000083A3                 db    0
.rdata$r:000083A4                 dd offset ??_R0?AVCCipher@NZip@NCrypto@@@8 ; NCrypto::NZip::CCipher `RTTI Type Descriptor'
.rdata$r:000083A8                 dd offset ??_R3CCipher@NZip@NCrypto@@8 ; NCrypto::NZip::CCipher::`RTTI Class Hierarchy Descriptor'
.rdata$r:000083A8 _rdata$r        ends
.rdata$r:000083A8
.rdata$r:000083AC ; ===========================================================================
.rdata$r:000083AC
.rdata$r:000083AC ; Segment type: Pure data
.rdata$r:000083AC ; Segment permissions: Read
.rdata$r:000083AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000083AC                 assume cs:_rdata$r
.rdata$r:000083AC                 ;org 83ACh
.rdata$r:000083AC ; COMDAT (pick any)
.rdata$r:000083AC                 public ??_R4CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@
.rdata$r:000083AC ; const NCrypto::NZip::CCipher::`RTTI Complete Object Locator'{for `ICryptoSetPassword'}
.rdata$r:000083AC ??_R4CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@ db    0
.rdata$r:000083AC                                         ; DATA XREF: .rdata:0000836Co
.rdata$r:000083AD                 db    0
.rdata$r:000083AE                 db    0
.rdata$r:000083AF                 db    0
.rdata$r:000083B0                 db    4
.rdata$r:000083B1                 db    0
.rdata$r:000083B2                 db    0
.rdata$r:000083B3                 db    0
.rdata$r:000083B4                 db    0
.rdata$r:000083B5                 db    0
.rdata$r:000083B6                 db    0
.rdata$r:000083B7                 db    0
.rdata$r:000083B8                 dd offset ??_R0?AVCCipher@NZip@NCrypto@@@8 ; NCrypto::NZip::CCipher `RTTI Type Descriptor'
.rdata$r:000083BC                 dd offset ??_R3CCipher@NZip@NCrypto@@8 ; NCrypto::NZip::CCipher::`RTTI Class Hierarchy Descriptor'
.rdata$r:000083BC _rdata$r        ends
.rdata$r:000083BC
.text:000083C0 ; ===========================================================================
.text:000083C0
.text:000083C0 ; Segment type: Pure code
.text:000083C0 ; Segment permissions: Read/Execute
.text:000083C0 _text           segment para public 'CODE' use32
.text:000083C0                 assume cs:_text
.text:000083C0                 ;org 83C0h
.text:000083C0 ; COMDAT (pick any)
.text:000083C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000083C0
.text:000083C0 ; =============== S U B R O U T I N E =======================================
.text:000083C0
.text:000083C0 ; Attributes: bp-based frame
.text:000083C0
.text:000083C0 ; _DWORD __thiscall ICompressFilter::ICompressFilter(ICompressFilter *__hidden this)
.text:000083C0                 public ??0ICompressFilter@@QAE@XZ
.text:000083C0 ??0ICompressFilter@@QAE@XZ proc near    ; CODE XREF: NCrypto::NWzAes::CBaseCoder::CBaseCoder(void)+30p
.text:000083C0                                         ; NCrypto::NZip::CCipher::CCipher(void)+11p
.text:000083C0
.text:000083C0 var_4           = dword ptr -4
.text:000083C0
.text:000083C0                 push    ebp
.text:000083C1                 mov     ebp, esp
.text:000083C3                 push    ecx
.text:000083C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000083CB                 mov     [ebp+var_4], ecx
.text:000083CE                 mov     ecx, [ebp+var_4]
.text:000083D1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000083D6                 mov     eax, [ebp+var_4]
.text:000083D9                 mov     dword ptr [eax], offset ??_7ICompressFilter@@6B@ ; const ICompressFilter::`vftable'
.text:000083DF                 mov     eax, [ebp+var_4]
.text:000083E2                 add     esp, 4
.text:000083E5                 cmp     ebp, esp
.text:000083E7                 call    __RTC_CheckEsp
.text:000083EC                 mov     esp, ebp
.text:000083EE                 pop     ebp
.text:000083EF                 retn
.text:000083EF ??0ICompressFilter@@QAE@XZ endp
.text:000083EF
.text:000083EF _text           ends
.text:000083EF
.rdata:000083F0 ; ===========================================================================
.rdata:000083F0
.rdata:000083F0 ; Segment type: Pure data
.rdata:000083F0 ; Segment permissions: Read
.rdata:000083F0 _rdata          segment dword public 'DATA' use32
.rdata:000083F0                 assume cs:_rdata
.rdata:000083F0                 ;org 83F0h
.rdata:000083F0 ; COMDAT (pick largest)
.rdata:000083F0                 dd offset ??_R4ICompressFilter@@6B@ ; const ICompressFilter::`RTTI Complete Object Locator'
.rdata:000083F4                 public ??_7ICompressFilter@@6B@
.rdata:000083F4 ; const ICompressFilter::`vftable'
.rdata:000083F4 ??_7ICompressFilter@@6B@ dd offset __purecall
.rdata:000083F4                                         ; DATA XREF: ICompressFilter::ICompressFilter(void)+19o
.rdata:000083F8                 dd offset __purecall
.rdata:000083FC                 dd offset __purecall
.rdata:00008400                 dd offset __purecall
.rdata:00008404                 dd offset __purecall
.rdata:00008404 _rdata          ends
.rdata:00008404
.rdata$r:00008408 ; ===========================================================================
.rdata$r:00008408
.rdata$r:00008408 ; Segment type: Pure data
.rdata$r:00008408 ; Segment permissions: Read
.rdata$r:00008408 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008408                 assume cs:_rdata$r
.rdata$r:00008408                 ;org 8408h
.rdata$r:00008408 ; COMDAT (pick any)
.rdata$r:00008408                 public ??_R4ICompressFilter@@6B@
.rdata$r:00008408 ; const ICompressFilter::`RTTI Complete Object Locator'
.rdata$r:00008408 ??_R4ICompressFilter@@6B@ db    0       ; DATA XREF: .rdata:000083F0o
.rdata$r:00008409                 db    0
.rdata$r:0000840A                 db    0
.rdata$r:0000840B                 db    0
.rdata$r:0000840C                 db    0
.rdata$r:0000840D                 db    0
.rdata$r:0000840E                 db    0
.rdata$r:0000840F                 db    0
.rdata$r:00008410                 db    0
.rdata$r:00008411                 db    0
.rdata$r:00008412                 db    0
.rdata$r:00008413                 db    0
.rdata$r:00008414                 dd offset ??_R0?AUICompressFilter@@@8 ; ICompressFilter `RTTI Type Descriptor'
.rdata$r:00008418                 dd offset ??_R3ICompressFilter@@8 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008418 _rdata$r        ends
.rdata$r:00008418
.text:0000841C ; ===========================================================================
.text:0000841C
.text:0000841C ; Segment type: Pure code
.text:0000841C ; Segment permissions: Read/Execute
.text:0000841C _text           segment para public 'CODE' use32
.text:0000841C                 assume cs:_text
.text:0000841C                 ;org 841Ch
.text:0000841C ; COMDAT (pick any)
.text:0000841C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000841C
.text:0000841C ; =============== S U B R O U T I N E =======================================
.text:0000841C
.text:0000841C ; Attributes: bp-based frame
.text:0000841C
.text:0000841C ; _DWORD __thiscall ICryptoSetPassword::ICryptoSetPassword(ICryptoSetPassword *__hidden this)
.text:0000841C                 public ??0ICryptoSetPassword@@QAE@XZ
.text:0000841C ??0ICryptoSetPassword@@QAE@XZ proc near ; CODE XREF: NCrypto::NWzAes::CBaseCoder::CBaseCoder(void)+3Bp
.text:0000841C                                         ; NCrypto::NZipStrong::CBaseCoder::CBaseCoder(void)+21p ...
.text:0000841C
.text:0000841C var_4           = dword ptr -4
.text:0000841C
.text:0000841C                 push    ebp
.text:0000841D                 mov     ebp, esp
.text:0000841F                 push    ecx
.text:00008420                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008427                 mov     [ebp+var_4], ecx
.text:0000842A                 mov     ecx, [ebp+var_4]
.text:0000842D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00008432                 mov     eax, [ebp+var_4]
.text:00008435                 mov     dword ptr [eax], offset ??_7ICryptoSetPassword@@6B@ ; const ICryptoSetPassword::`vftable'
.text:0000843B                 mov     eax, [ebp+var_4]
.text:0000843E                 add     esp, 4
.text:00008441                 cmp     ebp, esp
.text:00008443                 call    __RTC_CheckEsp
.text:00008448                 mov     esp, ebp
.text:0000844A                 pop     ebp
.text:0000844B                 retn
.text:0000844B ??0ICryptoSetPassword@@QAE@XZ endp
.text:0000844B
.text:0000844B _text           ends
.text:0000844B
.rdata:0000844C ; ===========================================================================
.rdata:0000844C
.rdata:0000844C ; Segment type: Pure data
.rdata:0000844C ; Segment permissions: Read
.rdata:0000844C _rdata          segment dword public 'DATA' use32
.rdata:0000844C                 assume cs:_rdata
.rdata:0000844C                 ;org 844Ch
.rdata:0000844C ; COMDAT (pick largest)
.rdata:0000844C                 dd offset ??_R4ICryptoSetPassword@@6B@ ; const ICryptoSetPassword::`RTTI Complete Object Locator'
.rdata:00008450                 public ??_7ICryptoSetPassword@@6B@
.rdata:00008450 ; const ICryptoSetPassword::`vftable'
.rdata:00008450 ??_7ICryptoSetPassword@@6B@ dd offset __purecall
.rdata:00008450                                         ; DATA XREF: ICryptoSetPassword::ICryptoSetPassword(void)+19o
.rdata:00008454                 dd offset __purecall
.rdata:00008458                 dd offset __purecall
.rdata:0000845C                 dd offset __purecall
.rdata:0000845C _rdata          ends
.rdata:0000845C
.rdata$r:00008460 ; ===========================================================================
.rdata$r:00008460
.rdata$r:00008460 ; Segment type: Pure data
.rdata$r:00008460 ; Segment permissions: Read
.rdata$r:00008460 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008460                 assume cs:_rdata$r
.rdata$r:00008460                 ;org 8460h
.rdata$r:00008460 ; COMDAT (pick any)
.rdata$r:00008460                 public ??_R4ICryptoSetPassword@@6B@
.rdata$r:00008460 ; const ICryptoSetPassword::`RTTI Complete Object Locator'
.rdata$r:00008460 ??_R4ICryptoSetPassword@@6B@ db    0    ; DATA XREF: .rdata:0000844Co
.rdata$r:00008461                 db    0
.rdata$r:00008462                 db    0
.rdata$r:00008463                 db    0
.rdata$r:00008464                 db    0
.rdata$r:00008465                 db    0
.rdata$r:00008466                 db    0
.rdata$r:00008467                 db    0
.rdata$r:00008468                 db    0
.rdata$r:00008469                 db    0
.rdata$r:0000846A                 db    0
.rdata$r:0000846B                 db    0
.rdata$r:0000846C                 dd offset ??_R0?AUICryptoSetPassword@@@8 ; ICryptoSetPassword `RTTI Type Descriptor'
.rdata$r:00008470                 dd offset ??_R3ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008470 _rdata$r        ends
.rdata$r:00008470
.text:00008474 ; ===========================================================================
.text:00008474
.text:00008474 ; Segment type: Pure code
.text:00008474 ; Segment permissions: Read/Execute
.text:00008474 _text           segment para public 'CODE' use32
.text:00008474                 assume cs:_text
.text:00008474                 ;org 8474h
.text:00008474 ; COMDAT (pick any)
.text:00008474                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008474
.text:00008474 ; =============== S U B R O U T I N E =======================================
.text:00008474
.text:00008474 ; Attributes: bp-based frame
.text:00008474
.text:00008474 ; bool __thiscall NArchive::NZip::CInArchive::IsLocalOffsetOK(NArchive::NZip::CInArchive *this, const struct NArchive::NZip::CItemEx *)
.text:00008474                 public ?IsLocalOffsetOK@CInArchive@NZip@NArchive@@QBE_NABVCItemEx@23@@Z
.text:00008474 ?IsLocalOffsetOK@CInArchive@NZip@NArchive@@QBE_NABVCItemEx@23@@Z proc near
.text:00008474                                         ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3D2p
.text:00008474
.text:00008474 var_10          = dword ptr -10h
.text:00008474 var_C           = dword ptr -0Ch
.text:00008474 var_8           = dword ptr -8
.text:00008474 var_4           = dword ptr -4
.text:00008474 arg_0           = dword ptr  8
.text:00008474
.text:00008474                 push    ebp
.text:00008475                 mov     ebp, esp
.text:00008477                 sub     esp, 10h
.text:0000847A                 mov     eax, 0CCCCCCCCh
.text:0000847F                 mov     [ebp+var_10], eax
.text:00008482                 mov     [ebp+var_C], eax
.text:00008485                 mov     [ebp+var_8], eax
.text:00008488                 mov     [ebp+var_4], eax
.text:0000848B                 mov     [ebp+var_4], ecx
.text:0000848E                 mov     eax, [ebp+arg_0]
.text:00008491                 movzx   ecx, byte ptr [eax+5Ch]
.text:00008495                 test    ecx, ecx
.text:00008497                 jz      short loc_849D
.text:00008499                 mov     al, 1
.text:0000849B                 jmp     short loc_84D6
.text:0000849D ; ---------------------------------------------------------------------------
.text:0000849D
.text:0000849D loc_849D:                               ; CODE XREF: NArchive::NZip::CInArchive::IsLocalOffsetOK(NArchive::NZip::CItemEx const &)+23j
.text:0000849D                 mov     edx, [ebp+var_4]
.text:000084A0                 mov     eax, [ebp+arg_0]
.text:000084A3                 mov     ecx, [edx+38h]
.text:000084A6                 add     ecx, [eax+40h]
.text:000084A9                 mov     edx, [edx+3Ch]
.text:000084AC                 adc     edx, [eax+44h]
.text:000084AF                 mov     [ebp+var_C], ecx
.text:000084B2                 mov     [ebp+var_8], edx
.text:000084B5                 cmp     [ebp+var_8], 0
.text:000084B9                 jl      short loc_84CC
.text:000084BB                 jg      short loc_84C3
.text:000084BD                 cmp     [ebp+var_C], 0
.text:000084C1                 jb      short loc_84CC
.text:000084C3
.text:000084C3 loc_84C3:                               ; CODE XREF: NArchive::NZip::CInArchive::IsLocalOffsetOK(NArchive::NZip::CItemEx const &)+47j
.text:000084C3                 mov     [ebp+var_10], 1
.text:000084CA                 jmp     short loc_84D3
.text:000084CC ; ---------------------------------------------------------------------------
.text:000084CC
.text:000084CC loc_84CC:                               ; CODE XREF: NArchive::NZip::CInArchive::IsLocalOffsetOK(NArchive::NZip::CItemEx const &)+45j
.text:000084CC                                         ; NArchive::NZip::CInArchive::IsLocalOffsetOK(NArchive::NZip::CItemEx const &)+4Dj
.text:000084CC                 mov     [ebp+var_10], 0
.text:000084D3
.text:000084D3 loc_84D3:                               ; CODE XREF: NArchive::NZip::CInArchive::IsLocalOffsetOK(NArchive::NZip::CItemEx const &)+56j
.text:000084D3                 mov     al, byte ptr [ebp+var_10]
.text:000084D6
.text:000084D6 loc_84D6:                               ; CODE XREF: NArchive::NZip::CInArchive::IsLocalOffsetOK(NArchive::NZip::CItemEx const &)+27j
.text:000084D6                 mov     esp, ebp
.text:000084D8                 pop     ebp
.text:000084D9                 retn    4
.text:000084D9 ?IsLocalOffsetOK@CInArchive@NZip@NArchive@@QBE_NABVCItemEx@23@@Z endp
.text:000084D9
.text:000084D9 _text           ends
.text:000084D9
.text:000084DC ; ===========================================================================
.text:000084DC
.text:000084DC ; Segment type: Pure code
.text:000084DC ; Segment permissions: Read/Execute
.text:000084DC _text           segment para public 'CODE' use32
.text:000084DC                 assume cs:_text
.text:000084DC                 ;org 84DCh
.text:000084DC ; COMDAT (pick any)
.text:000084DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000084DC
.text:000084DC ; =============== S U B R O U T I N E =======================================
.text:000084DC
.text:000084DC ; Attributes: bp-based frame
.text:000084DC
.text:000084DC ; _DWORD __thiscall NArchive::NZip::CZipDecoder::CZipDecoder(NArchive::NZip::CZipDecoder *__hidden this)
.text:000084DC                 public ??0CZipDecoder@NZip@NArchive@@QAE@XZ
.text:000084DC ??0CZipDecoder@NZip@NArchive@@QAE@XZ proc near
.text:000084DC                                         ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4Bp
.text:000084DC
.text:000084DC var_10          = dword ptr -10h
.text:000084DC var_C           = dword ptr -0Ch
.text:000084DC var_4           = dword ptr -4
.text:000084DC
.text:000084DC                 push    ebp
.text:000084DD                 mov     ebp, esp
.text:000084DF                 push    0FFFFFFFFh
.text:000084E1                 push    offset __ehhandler$??0CZipDecoder@NZip@NArchive@@QAE@XZ
.text:000084E6                 mov     eax, large fs:0
.text:000084EC                 push    eax
.text:000084ED                 push    ecx
.text:000084EE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000084F5                 mov     eax, dword ptr ds:___security_cookie
.text:000084FA                 xor     eax, ebp
.text:000084FC                 push    eax
.text:000084FD                 lea     eax, [ebp+var_C]
.text:00008500                 mov     large fs:0, eax
.text:00008506                 mov     [ebp+var_10], ecx
.text:00008509                 mov     eax, [ebp+var_10]
.text:0000850C                 mov     dword ptr [eax], 0
.text:00008512                 mov     ecx, [ebp+var_10]
.text:00008515                 mov     dword ptr [ecx+4], 0
.text:0000851C                 mov     edx, [ebp+var_10]
.text:0000851F                 mov     dword ptr [edx+8], 0
.text:00008526                 mov     ecx, [ebp+var_10]
.text:00008529                 add     ecx, 0Ch
.text:0000852C                 call    ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>(void)
.text:00008531                 mov     [ebp+var_4], 0
.text:00008538                 mov     ecx, [ebp+var_10]
.text:0000853B                 add     ecx, 10h
.text:0000853E                 call    ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>(void)
.text:00008543                 mov     byte ptr [ebp+var_4], 1
.text:00008547                 mov     ecx, [ebp+var_10]
.text:0000854A                 add     ecx, 14h
.text:0000854D                 call    ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>(void)
.text:00008552                 mov     byte ptr [ebp+var_4], 2
.text:00008556                 mov     eax, [ebp+var_10]
.text:00008559                 mov     dword ptr [eax+18h], 0
.text:00008560                 mov     ecx, [ebp+var_10]
.text:00008563                 add     ecx, 1Ch
.text:00008566                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:0000856B                 mov     byte ptr [ebp+var_4], 3
.text:0000856F                 mov     ecx, [ebp+var_10]
.text:00008572                 add     ecx, 20h ; ' '
.text:00008575                 call    ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>(void)
.text:0000857A                 mov     byte ptr [ebp+var_4], 4
.text:0000857E                 mov     ecx, [ebp+var_10]
.text:00008581                 add     ecx, 24h ; '$'
.text:00008584                 call    ??0?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CMethodItem>::CObjectVector<NArchive::NZip::CMethodItem>(void)
.text:00008589                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008590                 mov     eax, [ebp+var_10]
.text:00008593                 mov     ecx, [ebp+var_C]
.text:00008596                 mov     large fs:0, ecx
.text:0000859D                 pop     ecx
.text:0000859E                 add     esp, 10h
.text:000085A1                 cmp     ebp, esp
.text:000085A3                 call    __RTC_CheckEsp
.text:000085A8                 mov     esp, ebp
.text:000085AA                 pop     ebp
.text:000085AB                 retn
.text:000085AB ??0CZipDecoder@NZip@NArchive@@QAE@XZ endp
.text:000085AB
.text:000085AB _text           ends
.text:000085AB
.text$x:000085AC ; ===========================================================================
.text$x:000085AC
.text$x:000085AC ; Segment type: Pure code
.text$x:000085AC ; Segment permissions: Read/Execute
.text$x:000085AC _text$x         segment para public 'CODE' use32
.text$x:000085AC                 assume cs:_text$x
.text$x:000085AC                 ;org 85ACh
.text$x:000085AC ; COMDAT (pick associative to section at 84DC)
.text$x:000085AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000085AC
.text$x:000085AC ; =============== S U B R O U T I N E =======================================
.text$x:000085AC
.text$x:000085AC
.text$x:000085AC __unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:000085AC                                         ; DATA XREF: .xdata$x:00008628o
.text$x:000085AC                 mov     ecx, [ebp-10h]
.text$x:000085AF                 add     ecx, 0Ch
.text$x:000085B2                 jmp     ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text$x:000085B2 __unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$0 endp
.text$x:000085B2
.text$x:000085B7
.text$x:000085B7 ; =============== S U B R O U T I N E =======================================
.text$x:000085B7
.text$x:000085B7
.text$x:000085B7 __unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:000085B7                                         ; DATA XREF: .xdata$x:00008630o
.text$x:000085B7                 mov     ecx, [ebp-10h]
.text$x:000085BA                 add     ecx, 10h
.text$x:000085BD                 jmp     ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text$x:000085BD __unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$1 endp
.text$x:000085BD
.text$x:000085C2
.text$x:000085C2 ; =============== S U B R O U T I N E =======================================
.text$x:000085C2
.text$x:000085C2
.text$x:000085C2 __unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$2 proc near
.text$x:000085C2                                         ; DATA XREF: .xdata$x:00008638o
.text$x:000085C2                 mov     ecx, [ebp-10h]
.text$x:000085C5                 add     ecx, 14h
.text$x:000085C8                 jmp     ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text$x:000085C8 __unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$2 endp
.text$x:000085C8
.text$x:000085CD
.text$x:000085CD ; =============== S U B R O U T I N E =======================================
.text$x:000085CD
.text$x:000085CD
.text$x:000085CD __unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$3 proc near
.text$x:000085CD                                         ; DATA XREF: .xdata$x:00008640o
.text$x:000085CD                 mov     ecx, [ebp-10h]
.text$x:000085D0                 add     ecx, 1Ch
.text$x:000085D3                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:000085D3 __unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$3 endp
.text$x:000085D3
.text$x:000085D8
.text$x:000085D8 ; =============== S U B R O U T I N E =======================================
.text$x:000085D8
.text$x:000085D8
.text$x:000085D8 __unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$4 proc near
.text$x:000085D8                                         ; DATA XREF: .xdata$x:00008648o
.text$x:000085D8                 mov     ecx, [ebp-10h]
.text$x:000085DB                 add     ecx, 20h ; ' '
.text$x:000085DE                 jmp     ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text$x:000085DE __unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$4 endp
.text$x:000085DE
.text$x:000085E3
.text$x:000085E3 ; =============== S U B R O U T I N E =======================================
.text$x:000085E3
.text$x:000085E3
.text$x:000085E3 __ehhandler$??0CZipDecoder@NZip@NArchive@@QAE@XZ proc near
.text$x:000085E3                                         ; DATA XREF: NArchive::NZip::CZipDecoder::CZipDecoder(void)+5o
.text$x:000085E3
.text$x:000085E3 arg_4           = dword ptr  8
.text$x:000085E3
.text$x:000085E3                 mov     edx, [esp+arg_4]
.text$x:000085E7                 lea     eax, [edx+0Ch]
.text$x:000085EA                 mov     ecx, [edx-8]
.text$x:000085ED                 xor     ecx, eax
.text$x:000085EF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000085F4                 mov     eax, offset __ehfuncinfo$??0CZipDecoder@NZip@NArchive@@QAE@XZ
.text$x:000085F9                 jmp     ___CxxFrameHandler3
.text$x:000085F9 __ehhandler$??0CZipDecoder@NZip@NArchive@@QAE@XZ endp
.text$x:000085F9
.text$x:000085F9 ; ---------------------------------------------------------------------------
.text$x:000085FE                 align 10h
.text$x:000085FE _text$x         ends
.text$x:000085FE
.xdata$x:00008600 ; ===========================================================================
.xdata$x:00008600
.xdata$x:00008600 ; Segment type: Pure data
.xdata$x:00008600 ; Segment permissions: Read
.xdata$x:00008600 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008600                 assume cs:_xdata$x
.xdata$x:00008600                 ;org 8600h
.xdata$x:00008600 ; COMDAT (pick associative to section at 84DC)
.xdata$x:00008600 __ehfuncinfo$??0CZipDecoder@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00008600                                         ; DATA XREF: __ehhandler$??0CZipDecoder@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00008601                 db    5
.xdata$x:00008602                 db  93h ; ô
.xdata$x:00008603                 db  19h
.xdata$x:00008604                 db    5
.xdata$x:00008605                 db    0
.xdata$x:00008606                 db    0
.xdata$x:00008607                 db    0
.xdata$x:00008608                 dd offset __unwindtable$??0CZipDecoder@NZip@NArchive@@QAE@XZ
.xdata$x:0000860C                 align 20h
.xdata$x:00008620                 db    1
.xdata$x:00008621                 db    0
.xdata$x:00008622                 db    0
.xdata$x:00008623                 db    0
.xdata$x:00008624 __unwindtable$??0CZipDecoder@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00008624                                         ; DATA XREF: .xdata$x:00008608o
.xdata$x:00008625                 db 0FFh
.xdata$x:00008626                 db 0FFh
.xdata$x:00008627                 db 0FFh
.xdata$x:00008628                 dd offset __unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$0
.xdata$x:0000862C                 align 10h
.xdata$x:00008630                 dd offset __unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$1
.xdata$x:00008634                 db    1
.xdata$x:00008635                 db    0
.xdata$x:00008636                 db    0
.xdata$x:00008637                 db    0
.xdata$x:00008638                 dd offset __unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$2
.xdata$x:0000863C                 db    2
.xdata$x:0000863D                 db    0
.xdata$x:0000863E                 db    0
.xdata$x:0000863F                 db    0
.xdata$x:00008640                 dd offset __unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$3
.xdata$x:00008644                 db    3
.xdata$x:00008645                 db    0
.xdata$x:00008646                 db    0
.xdata$x:00008647                 db    0
.xdata$x:00008648                 dd offset __unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$4
.xdata$x:00008648 _xdata$x        ends
.xdata$x:00008648
.text:0000864C ; ===========================================================================
.text:0000864C
.text:0000864C ; Segment type: Pure code
.text:0000864C ; Segment permissions: Read/Execute
.text:0000864C _text           segment para public 'CODE' use32
.text:0000864C                 assume cs:_text
.text:0000864C                 ;org 864Ch
.text:0000864C ; COMDAT (pick any)
.text:0000864C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000864C
.text:0000864C ; =============== S U B R O U T I N E =======================================
.text:0000864C
.text:0000864C ; Attributes: bp-based frame
.text:0000864C
.text:0000864C ; _DWORD __thiscall NArchive::NZip::CZipDecoder::~CZipDecoder(NArchive::NZip::CZipDecoder *__hidden this)
.text:0000864C                 public ??1CZipDecoder@NZip@NArchive@@QAE@XZ
.text:0000864C ??1CZipDecoder@NZip@NArchive@@QAE@XZ proc near
.text:0000864C                                         ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+BBp
.text:0000864C                                         ; NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+198p ...
.text:0000864C
.text:0000864C var_10          = dword ptr -10h
.text:0000864C var_C           = dword ptr -0Ch
.text:0000864C var_4           = dword ptr -4
.text:0000864C
.text:0000864C                 push    ebp
.text:0000864D                 mov     ebp, esp
.text:0000864F                 push    0FFFFFFFFh
.text:00008651                 push    offset __ehhandler$??1CZipDecoder@NZip@NArchive@@QAE@XZ
.text:00008656                 mov     eax, large fs:0
.text:0000865C                 push    eax
.text:0000865D                 push    ecx
.text:0000865E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00008665                 mov     eax, dword ptr ds:___security_cookie
.text:0000866A                 xor     eax, ebp
.text:0000866C                 push    eax
.text:0000866D                 lea     eax, [ebp+var_C]
.text:00008670                 mov     large fs:0, eax
.text:00008676                 mov     [ebp+var_10], ecx
.text:00008679                 mov     [ebp+var_4], 4
.text:00008680                 mov     ecx, [ebp+var_10]
.text:00008683                 add     ecx, 24h ; '$'
.text:00008686                 call    ??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CMethodItem>::~CObjectVector<NArchive::NZip::CMethodItem>(void)
.text:0000868B                 mov     byte ptr [ebp+var_4], 3
.text:0000868F                 mov     ecx, [ebp+var_10]
.text:00008692                 add     ecx, 20h ; ' '
.text:00008695                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:0000869A                 mov     byte ptr [ebp+var_4], 2
.text:0000869E                 mov     ecx, [ebp+var_10]
.text:000086A1                 add     ecx, 1Ch
.text:000086A4                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000086A9                 mov     byte ptr [ebp+var_4], 1
.text:000086AD                 mov     ecx, [ebp+var_10]
.text:000086B0                 add     ecx, 14h
.text:000086B3                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:000086B8                 mov     byte ptr [ebp+var_4], 0
.text:000086BC                 mov     ecx, [ebp+var_10]
.text:000086BF                 add     ecx, 10h
.text:000086C2                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:000086C7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000086CE                 mov     ecx, [ebp+var_10]
.text:000086D1                 add     ecx, 0Ch
.text:000086D4                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:000086D9                 mov     ecx, [ebp+var_C]
.text:000086DC                 mov     large fs:0, ecx
.text:000086E3                 pop     ecx
.text:000086E4                 add     esp, 10h
.text:000086E7                 cmp     ebp, esp
.text:000086E9                 call    __RTC_CheckEsp
.text:000086EE                 mov     esp, ebp
.text:000086F0                 pop     ebp
.text:000086F1                 retn
.text:000086F1 ??1CZipDecoder@NZip@NArchive@@QAE@XZ endp
.text:000086F1
.text:000086F1 ; ---------------------------------------------------------------------------
.text:000086F2                 align 4
.text:000086F2 _text           ends
.text:000086F2
.text$x:000086F4 ; ===========================================================================
.text$x:000086F4
.text$x:000086F4 ; Segment type: Pure code
.text$x:000086F4 ; Segment permissions: Read/Execute
.text$x:000086F4 _text$x         segment para public 'CODE' use32
.text$x:000086F4                 assume cs:_text$x
.text$x:000086F4                 ;org 86F4h
.text$x:000086F4 ; COMDAT (pick associative to section at 864C)
.text$x:000086F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000086F4
.text$x:000086F4 ; =============== S U B R O U T I N E =======================================
.text$x:000086F4
.text$x:000086F4
.text$x:000086F4 __unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:000086F4                                         ; DATA XREF: .xdata$x:00008770o
.text$x:000086F4                 mov     ecx, [ebp-10h]
.text$x:000086F7                 add     ecx, 0Ch
.text$x:000086FA                 jmp     ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text$x:000086FA __unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$0 endp
.text$x:000086FA
.text$x:000086FF
.text$x:000086FF ; =============== S U B R O U T I N E =======================================
.text$x:000086FF
.text$x:000086FF
.text$x:000086FF __unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:000086FF                                         ; DATA XREF: .xdata$x:00008778o
.text$x:000086FF                 mov     ecx, [ebp-10h]
.text$x:00008702                 add     ecx, 10h
.text$x:00008705                 jmp     ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text$x:00008705 __unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$1 endp
.text$x:00008705
.text$x:0000870A
.text$x:0000870A ; =============== S U B R O U T I N E =======================================
.text$x:0000870A
.text$x:0000870A
.text$x:0000870A __unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$2 proc near
.text$x:0000870A                                         ; DATA XREF: .xdata$x:00008780o
.text$x:0000870A                 mov     ecx, [ebp-10h]
.text$x:0000870D                 add     ecx, 14h
.text$x:00008710                 jmp     ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text$x:00008710 __unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$2 endp
.text$x:00008710
.text$x:00008715
.text$x:00008715 ; =============== S U B R O U T I N E =======================================
.text$x:00008715
.text$x:00008715
.text$x:00008715 __unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$3 proc near
.text$x:00008715                                         ; DATA XREF: .xdata$x:00008788o
.text$x:00008715                 mov     ecx, [ebp-10h]
.text$x:00008718                 add     ecx, 1Ch
.text$x:0000871B                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:0000871B __unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$3 endp
.text$x:0000871B
.text$x:00008720
.text$x:00008720 ; =============== S U B R O U T I N E =======================================
.text$x:00008720
.text$x:00008720
.text$x:00008720 __unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$4 proc near
.text$x:00008720                                         ; DATA XREF: .xdata$x:00008790o
.text$x:00008720                 mov     ecx, [ebp-10h]
.text$x:00008723                 add     ecx, 20h ; ' '
.text$x:00008726                 jmp     ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text$x:00008726 __unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$4 endp
.text$x:00008726
.text$x:0000872B
.text$x:0000872B ; =============== S U B R O U T I N E =======================================
.text$x:0000872B
.text$x:0000872B
.text$x:0000872B __ehhandler$??1CZipDecoder@NZip@NArchive@@QAE@XZ proc near
.text$x:0000872B                                         ; DATA XREF: NArchive::NZip::CZipDecoder::~CZipDecoder(void)+5o
.text$x:0000872B
.text$x:0000872B arg_4           = dword ptr  8
.text$x:0000872B
.text$x:0000872B                 mov     edx, [esp+arg_4]
.text$x:0000872F                 lea     eax, [edx+0Ch]
.text$x:00008732                 mov     ecx, [edx-8]
.text$x:00008735                 xor     ecx, eax
.text$x:00008737                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000873C                 mov     eax, offset __ehfuncinfo$??1CZipDecoder@NZip@NArchive@@QAE@XZ
.text$x:00008741                 jmp     ___CxxFrameHandler3
.text$x:00008741 __ehhandler$??1CZipDecoder@NZip@NArchive@@QAE@XZ endp
.text$x:00008741
.text$x:00008741 ; ---------------------------------------------------------------------------
.text$x:00008746                 align 4
.text$x:00008746 _text$x         ends
.text$x:00008746
.xdata$x:00008748 ; ===========================================================================
.xdata$x:00008748
.xdata$x:00008748 ; Segment type: Pure data
.xdata$x:00008748 ; Segment permissions: Read
.xdata$x:00008748 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008748                 assume cs:_xdata$x
.xdata$x:00008748                 ;org 8748h
.xdata$x:00008748 ; COMDAT (pick associative to section at 864C)
.xdata$x:00008748 __ehfuncinfo$??1CZipDecoder@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00008748                                         ; DATA XREF: __ehhandler$??1CZipDecoder@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00008749                 db    5
.xdata$x:0000874A                 db  93h ; ô
.xdata$x:0000874B                 db  19h
.xdata$x:0000874C                 db    5
.xdata$x:0000874D                 db    0
.xdata$x:0000874E                 db    0
.xdata$x:0000874F                 db    0
.xdata$x:00008750                 dd offset __unwindtable$??1CZipDecoder@NZip@NArchive@@QAE@XZ
.xdata$x:00008754                 db    0
.xdata$x:00008755                 db    0
.xdata$x:00008756                 db    0
.xdata$x:00008757                 db    0
.xdata$x:00008758                 db    0
.xdata$x:00008759                 db    0
.xdata$x:0000875A                 db    0
.xdata$x:0000875B                 db    0
.xdata$x:0000875C                 db    0
.xdata$x:0000875D                 db    0
.xdata$x:0000875E                 db    0
.xdata$x:0000875F                 db    0
.xdata$x:00008760                 db    0
.xdata$x:00008761                 db    0
.xdata$x:00008762                 db    0
.xdata$x:00008763                 db    0
.xdata$x:00008764                 db    0
.xdata$x:00008765                 db    0
.xdata$x:00008766                 db    0
.xdata$x:00008767                 db    0
.xdata$x:00008768                 db    1
.xdata$x:00008769                 db    0
.xdata$x:0000876A                 db    0
.xdata$x:0000876B                 db    0
.xdata$x:0000876C __unwindtable$??1CZipDecoder@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000876C                                         ; DATA XREF: .xdata$x:00008750o
.xdata$x:0000876D                 db 0FFh
.xdata$x:0000876E                 db 0FFh
.xdata$x:0000876F                 db 0FFh
.xdata$x:00008770                 dd offset __unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$0
.xdata$x:00008774                 align 8
.xdata$x:00008778                 dd offset __unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$1
.xdata$x:0000877C                 db    1
.xdata$x:0000877D                 db    0
.xdata$x:0000877E                 db    0
.xdata$x:0000877F                 db    0
.xdata$x:00008780                 dd offset __unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$2
.xdata$x:00008784                 db    2
.xdata$x:00008785                 db    0
.xdata$x:00008786                 db    0
.xdata$x:00008787                 db    0
.xdata$x:00008788                 dd offset __unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$3
.xdata$x:0000878C                 db    3
.xdata$x:0000878D                 db    0
.xdata$x:0000878E                 db    0
.xdata$x:0000878F                 db    0
.xdata$x:00008790                 dd offset __unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$4
.xdata$x:00008790 _xdata$x        ends
.xdata$x:00008790
.text:00008794 ; ===========================================================================
.text:00008794
.text:00008794 ; Segment type: Pure code
.text:00008794 ; Segment permissions: Read/Execute
.text:00008794 _text           segment para public 'CODE' use32
.text:00008794                 assume cs:_text
.text:00008794                 ;org 8794h
.text:00008794 ; COMDAT (pick any)
.text:00008794                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008794
.text:00008794 ; =============== S U B R O U T I N E =======================================
.text:00008794
.text:00008794 ; Attributes: bp-based frame
.text:00008794
.text:00008794 ; _DWORD __thiscall NArchive::NZip::CItemEx::CItemEx(NArchive::NZip::CItemEx *this, const struct NArchive::NZip::CItemEx *)
.text:00008794                 public ??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z
.text:00008794 ??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z proc near
.text:00008794                                         ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3B6p
.text:00008794
.text:00008794 var_4           = dword ptr -4
.text:00008794 arg_0           = dword ptr  8
.text:00008794
.text:00008794                 push    ebp
.text:00008795                 mov     ebp, esp
.text:00008797                 push    ecx
.text:00008798                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000879F                 mov     [ebp+var_4], ecx
.text:000087A2                 mov     eax, [ebp+arg_0]
.text:000087A5                 push    eax             ; struct NArchive::NZip::CItem *
.text:000087A6                 mov     ecx, [ebp+var_4] ; this
.text:000087A9                 call    ??0CItem@NZip@NArchive@@QAE@ABV012@@Z ; NArchive::NZip::CItem::CItem(NArchive::NZip::CItem const &)
.text:000087AE                 mov     ecx, [ebp+var_4]
.text:000087B1                 mov     edx, [ebp+arg_0]
.text:000087B4                 mov     eax, [edx+60h]
.text:000087B7                 mov     [ecx+60h], eax
.text:000087BA                 mov     eax, [ebp+var_4]
.text:000087BD                 add     esp, 4
.text:000087C0                 cmp     ebp, esp
.text:000087C2                 call    __RTC_CheckEsp
.text:000087C7                 mov     esp, ebp
.text:000087C9                 pop     ebp
.text:000087CA                 retn    4
.text:000087CA ??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z endp
.text:000087CA
.text:000087CA ; ---------------------------------------------------------------------------
.text:000087CD                 align 10h
.text:000087CD _text           ends
.text:000087CD
.text:000087D0 ; ===========================================================================
.text:000087D0
.text:000087D0 ; Segment type: Pure code
.text:000087D0 ; Segment permissions: Read/Execute
.text:000087D0 _text           segment para public 'CODE' use32
.text:000087D0                 assume cs:_text
.text:000087D0                 ;org 87D0h
.text:000087D0 ; COMDAT (pick any)
.text:000087D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000087D0
.text:000087D0 ; =============== S U B R O U T I N E =======================================
.text:000087D0
.text:000087D0 ; Attributes: bp-based frame
.text:000087D0
.text:000087D0 ; _DWORD __thiscall NArchive::NZip::CItemEx::~CItemEx(NArchive::NZip::CItemEx *__hidden this)
.text:000087D0                 public ??1CItemEx@NZip@NArchive@@QAE@XZ
.text:000087D0 ??1CItemEx@NZip@NArchive@@QAE@XZ proc near
.text:000087D0                                         ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4DFp
.text:000087D0                                         ; NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+577p ...
.text:000087D0
.text:000087D0 var_4           = dword ptr -4
.text:000087D0
.text:000087D0                 push    ebp
.text:000087D1                 mov     ebp, esp
.text:000087D3                 push    ecx
.text:000087D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000087DB                 mov     [ebp+var_4], ecx
.text:000087DE                 mov     ecx, [ebp+var_4] ; this
.text:000087E1                 call    ??1CItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItem::~CItem(void)
.text:000087E6                 add     esp, 4
.text:000087E9                 cmp     ebp, esp
.text:000087EB                 call    __RTC_CheckEsp
.text:000087F0                 mov     esp, ebp
.text:000087F2                 pop     ebp
.text:000087F3                 retn
.text:000087F3 ??1CItemEx@NZip@NArchive@@QAE@XZ endp
.text:000087F3
.text:000087F3 _text           ends
.text:000087F3
.text:000087F4 ; ===========================================================================
.text:000087F4
.text:000087F4 ; Segment type: Pure code
.text:000087F4 ; Segment permissions: Read/Execute
.text:000087F4 _text           segment para public 'CODE' use32
.text:000087F4                 assume cs:_text
.text:000087F4                 ;org 87F4h
.text:000087F4 ; COMDAT (pick any)
.text:000087F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000087F4
.text:000087F4 ; =============== S U B R O U T I N E =======================================
.text:000087F4
.text:000087F4 ; Attributes: bp-based frame
.text:000087F4
.text:000087F4 ; _DWORD __thiscall NArchive::NZip::CItem::CItem(NArchive::NZip::CItem *this, const struct NArchive::NZip::CItem *)
.text:000087F4                 public ??0CItem@NZip@NArchive@@QAE@ABV012@@Z
.text:000087F4 ??0CItem@NZip@NArchive@@QAE@ABV012@@Z proc near
.text:000087F4                                         ; CODE XREF: NArchive::NZip::CItemEx::CItemEx(NArchive::NZip::CItemEx const &)+15p
.text:000087F4
.text:000087F4 var_10          = dword ptr -10h
.text:000087F4 var_C           = dword ptr -0Ch
.text:000087F4 var_4           = dword ptr -4
.text:000087F4 arg_0           = dword ptr  8
.text:000087F4
.text:000087F4                 push    ebp
.text:000087F5                 mov     ebp, esp
.text:000087F7                 push    0FFFFFFFFh
.text:000087F9                 push    offset __ehhandler$??0CItem@NZip@NArchive@@QAE@ABV012@@Z
.text:000087FE                 mov     eax, large fs:0
.text:00008804                 push    eax
.text:00008805                 push    ecx
.text:00008806                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000880D                 mov     eax, dword ptr ds:___security_cookie
.text:00008812                 xor     eax, ebp
.text:00008814                 push    eax
.text:00008815                 lea     eax, [ebp+var_C]
.text:00008818                 mov     large fs:0, eax
.text:0000881E                 mov     [ebp+var_10], ecx
.text:00008821                 mov     eax, [ebp+arg_0]
.text:00008824                 push    eax             ; struct NArchive::NZip::CLocalItem *
.text:00008825                 mov     ecx, [ebp+var_10] ; this
.text:00008828                 call    ??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z ; NArchive::NZip::CLocalItem::CLocalItem(NArchive::NZip::CLocalItem const &)
.text:0000882D                 mov     [ebp+var_4], 0
.text:00008834                 mov     ecx, [ebp+arg_0]
.text:00008837                 mov     dx, [ecx+38h]
.text:0000883B                 mov     eax, [ebp+var_10]
.text:0000883E                 mov     [eax+38h], dx
.text:00008842                 mov     ecx, [ebp+var_10]
.text:00008845                 mov     edx, [ebp+arg_0]
.text:00008848                 mov     ax, [edx+3Ah]
.text:0000884C                 mov     [ecx+3Ah], ax
.text:00008850                 mov     ecx, [ebp+var_10]
.text:00008853                 mov     edx, [ebp+arg_0]
.text:00008856                 mov     eax, [edx+3Ch]
.text:00008859                 mov     [ecx+3Ch], eax
.text:0000885C                 mov     ecx, [ebp+var_10]
.text:0000885F                 mov     edx, [ebp+arg_0]
.text:00008862                 mov     eax, [edx+40h]
.text:00008865                 mov     [ecx+40h], eax
.text:00008868                 mov     edx, [edx+44h]
.text:0000886B                 mov     [ecx+44h], edx
.text:0000886E                 mov     eax, [ebp+arg_0]
.text:00008871                 add     eax, 48h ; 'H'
.text:00008874                 push    eax             ; struct NArchive::NZip::CExtraBlock *
.text:00008875                 mov     ecx, [ebp+var_10]
.text:00008878                 add     ecx, 48h ; 'H'  ; this
.text:0000887B                 call    ??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CExtraBlock::CExtraBlock(NArchive::NZip::CExtraBlock const &)
.text:00008880                 mov     byte ptr [ebp+var_4], 1
.text:00008884                 mov     ecx, [ebp+arg_0]
.text:00008887                 add     ecx, 54h ; 'T'
.text:0000888A                 push    ecx
.text:0000888B                 mov     ecx, [ebp+var_10]
.text:0000888E                 add     ecx, 54h ; 'T'
.text:00008891                 call    ??0?$CBuffer@E@@QAE@ABV0@@Z ; CBuffer<uchar>::CBuffer<uchar>(CBuffer<uchar> const &)
.text:00008896                 mov     edx, [ebp+var_10]
.text:00008899                 mov     eax, [ebp+arg_0]
.text:0000889C                 mov     cl, [eax+5Ch]
.text:0000889F                 mov     [edx+5Ch], cl
.text:000088A2                 mov     edx, [ebp+var_10]
.text:000088A5                 mov     eax, [ebp+arg_0]
.text:000088A8                 mov     cl, [eax+5Dh]
.text:000088AB                 mov     [edx+5Dh], cl
.text:000088AE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000088B5                 mov     eax, [ebp+var_10]
.text:000088B8                 mov     ecx, [ebp+var_C]
.text:000088BB                 mov     large fs:0, ecx
.text:000088C2                 pop     ecx
.text:000088C3                 add     esp, 10h
.text:000088C6                 cmp     ebp, esp
.text:000088C8                 call    __RTC_CheckEsp
.text:000088CD                 mov     esp, ebp
.text:000088CF                 pop     ebp
.text:000088D0                 retn    4
.text:000088D0 ??0CItem@NZip@NArchive@@QAE@ABV012@@Z endp
.text:000088D0
.text:000088D0 ; ---------------------------------------------------------------------------
.text:000088D3                 align 4
.text:000088D3 _text           ends
.text:000088D3
.text$x:000088D4 ; ===========================================================================
.text$x:000088D4
.text$x:000088D4 ; Segment type: Pure code
.text$x:000088D4 ; Segment permissions: Read/Execute
.text$x:000088D4 _text$x         segment para public 'CODE' use32
.text$x:000088D4                 assume cs:_text$x
.text$x:000088D4                 ;org 88D4h
.text$x:000088D4 ; COMDAT (pick associative to section at 87F4)
.text$x:000088D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000088D4
.text$x:000088D4 ; =============== S U B R O U T I N E =======================================
.text$x:000088D4
.text$x:000088D4
.text$x:000088D4 __unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$0 proc near
.text$x:000088D4                                         ; DATA XREF: .xdata$x:00008908o
.text$x:000088D4                 mov     ecx, [ebp-10h]  ; this
.text$x:000088D7                 jmp     ??1CLocalItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CLocalItem::~CLocalItem(void)
.text$x:000088D7 __unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$0 endp
.text$x:000088D7
.text$x:000088DC
.text$x:000088DC ; =============== S U B R O U T I N E =======================================
.text$x:000088DC
.text$x:000088DC
.text$x:000088DC __unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$1 proc near
.text$x:000088DC                                         ; DATA XREF: .xdata$x:00008910o
.text$x:000088DC                 mov     ecx, [ebp-10h]
.text$x:000088DF                 add     ecx, 48h ; 'H'  ; this
.text$x:000088E2                 jmp     ??1CExtraBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraBlock::~CExtraBlock(void)
.text$x:000088E2 __unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$1 endp
.text$x:000088E2
.text$x:000088E7
.text$x:000088E7 ; =============== S U B R O U T I N E =======================================
.text$x:000088E7
.text$x:000088E7
.text$x:000088E7 __ehhandler$??0CItem@NZip@NArchive@@QAE@ABV012@@Z proc near
.text$x:000088E7                                         ; DATA XREF: NArchive::NZip::CItem::CItem(NArchive::NZip::CItem const &)+5o
.text$x:000088E7
.text$x:000088E7 arg_4           = dword ptr  8
.text$x:000088E7
.text$x:000088E7                 mov     edx, [esp+arg_4]
.text$x:000088EB                 lea     eax, [edx+0Ch]
.text$x:000088EE                 mov     ecx, [edx-8]
.text$x:000088F1                 xor     ecx, eax
.text$x:000088F3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000088F8                 mov     eax, offset __ehfuncinfo$??0CItem@NZip@NArchive@@QAE@ABV012@@Z
.text$x:000088FD                 jmp     ___CxxFrameHandler3
.text$x:000088FD __ehhandler$??0CItem@NZip@NArchive@@QAE@ABV012@@Z endp
.text$x:000088FD
.text$x:000088FD ; ---------------------------------------------------------------------------
.text$x:00008902                 align 4
.text$x:00008902 _text$x         ends
.text$x:00008902
.xdata$x:00008904 ; ===========================================================================
.xdata$x:00008904
.xdata$x:00008904 ; Segment type: Pure data
.xdata$x:00008904 ; Segment permissions: Read
.xdata$x:00008904 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008904                 assume cs:_xdata$x
.xdata$x:00008904                 ;org 8904h
.xdata$x:00008904 ; COMDAT (pick associative to section at 87F4)
.xdata$x:00008904 __unwindtable$??0CItem@NZip@NArchive@@QAE@ABV012@@Z db 0FFh
.xdata$x:00008904                                         ; DATA XREF: .xdata$x:0000891Co
.xdata$x:00008905                 db 0FFh
.xdata$x:00008906                 db 0FFh
.xdata$x:00008907                 db 0FFh
.xdata$x:00008908                 dd offset __unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$0
.xdata$x:0000890C                 align 10h
.xdata$x:00008910                 dd offset __unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$1
.xdata$x:00008914 __ehfuncinfo$??0CItem@NZip@NArchive@@QAE@ABV012@@Z db  22h ; "
.xdata$x:00008914                                         ; DATA XREF: __ehhandler$??0CItem@NZip@NArchive@@QAE@ABV012@@Z+11o
.xdata$x:00008915                 db    5
.xdata$x:00008916                 db  93h ; ô
.xdata$x:00008917                 db  19h
.xdata$x:00008918                 db    2
.xdata$x:00008919                 db    0
.xdata$x:0000891A                 db    0
.xdata$x:0000891B                 db    0
.xdata$x:0000891C                 dd offset __unwindtable$??0CItem@NZip@NArchive@@QAE@ABV012@@Z
.xdata$x:00008920                 db    0
.xdata$x:00008921                 db    0
.xdata$x:00008922                 db    0
.xdata$x:00008923                 db    0
.xdata$x:00008924                 db    0
.xdata$x:00008925                 db    0
.xdata$x:00008926                 db    0
.xdata$x:00008927                 db    0
.xdata$x:00008928                 db    0
.xdata$x:00008929                 db    0
.xdata$x:0000892A                 db    0
.xdata$x:0000892B                 db    0
.xdata$x:0000892C                 db    0
.xdata$x:0000892D                 db    0
.xdata$x:0000892E                 db    0
.xdata$x:0000892F                 db    0
.xdata$x:00008930                 db    0
.xdata$x:00008931                 db    0
.xdata$x:00008932                 db    0
.xdata$x:00008933                 db    0
.xdata$x:00008934                 db    1
.xdata$x:00008935                 db    0
.xdata$x:00008936                 db    0
.xdata$x:00008937                 db    0
.xdata$x:00008937 _xdata$x        ends
.xdata$x:00008937
.text:00008938 ; ===========================================================================
.text:00008938
.text:00008938 ; Segment type: Pure code
.text:00008938 ; Segment permissions: Read/Execute
.text:00008938 _text           segment para public 'CODE' use32
.text:00008938                 assume cs:_text
.text:00008938                 ;org 8938h
.text:00008938 ; COMDAT (pick any)
.text:00008938                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008938
.text:00008938 ; =============== S U B R O U T I N E =======================================
.text:00008938
.text:00008938 ; Attributes: bp-based frame
.text:00008938
.text:00008938 ; _DWORD __thiscall NArchive::NZip::CLocalItem::~CLocalItem(NArchive::NZip::CLocalItem *__hidden this)
.text:00008938                 public ??1CLocalItem@NZip@NArchive@@QAE@XZ
.text:00008938 ??1CLocalItem@NZip@NArchive@@QAE@XZ proc near
.text:00008938                                         ; CODE XREF: __unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$0+3j
.text:00008938                                         ; NArchive::NZip::CItem::~CItem(void)+58p ...
.text:00008938
.text:00008938 var_10          = dword ptr -10h
.text:00008938 var_C           = dword ptr -0Ch
.text:00008938 var_4           = dword ptr -4
.text:00008938
.text:00008938                 push    ebp
.text:00008939                 mov     ebp, esp
.text:0000893B                 push    0FFFFFFFFh
.text:0000893D                 push    offset __ehhandler$??1CLocalItem@NZip@NArchive@@QAE@XZ
.text:00008942                 mov     eax, large fs:0
.text:00008948                 push    eax
.text:00008949                 push    ecx
.text:0000894A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00008951                 mov     eax, dword ptr ds:___security_cookie
.text:00008956                 xor     eax, ebp
.text:00008958                 push    eax
.text:00008959                 lea     eax, [ebp+var_C]
.text:0000895C                 mov     large fs:0, eax
.text:00008962                 mov     [ebp+var_10], ecx
.text:00008965                 mov     [ebp+var_4], 0
.text:0000896C                 mov     ecx, [ebp+var_10]
.text:0000896F                 add     ecx, 2Ch ; ','  ; this
.text:00008972                 call    ??1CExtraBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraBlock::~CExtraBlock(void)
.text:00008977                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000897E                 mov     ecx, [ebp+var_10]
.text:00008981                 add     ecx, 20h ; ' '  ; this
.text:00008984                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00008989                 mov     ecx, [ebp+var_C]
.text:0000898C                 mov     large fs:0, ecx
.text:00008993                 pop     ecx
.text:00008994                 add     esp, 10h
.text:00008997                 cmp     ebp, esp
.text:00008999                 call    __RTC_CheckEsp
.text:0000899E                 mov     esp, ebp
.text:000089A0                 pop     ebp
.text:000089A1                 retn
.text:000089A1 ??1CLocalItem@NZip@NArchive@@QAE@XZ endp
.text:000089A1
.text:000089A1 ; ---------------------------------------------------------------------------
.text:000089A2                 align 4
.text:000089A2 _text           ends
.text:000089A2
.text$x:000089A4 ; ===========================================================================
.text$x:000089A4
.text$x:000089A4 ; Segment type: Pure code
.text$x:000089A4 ; Segment permissions: Read/Execute
.text$x:000089A4 _text$x         segment para public 'CODE' use32
.text$x:000089A4                 assume cs:_text$x
.text$x:000089A4                 ;org 89A4h
.text$x:000089A4 ; COMDAT (pick associative to section at 8938)
.text$x:000089A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000089A4
.text$x:000089A4 ; =============== S U B R O U T I N E =======================================
.text$x:000089A4
.text$x:000089A4
.text$x:000089A4 __unwindfunclet$??1CLocalItem@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:000089A4                                         ; DATA XREF: .xdata$x:000089D0o
.text$x:000089A4                 mov     ecx, [ebp-10h]
.text$x:000089A7                 add     ecx, 20h ; ' '  ; this
.text$x:000089AA                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000089AA __unwindfunclet$??1CLocalItem@NZip@NArchive@@QAE@XZ$0 endp
.text$x:000089AA
.text$x:000089AF
.text$x:000089AF ; =============== S U B R O U T I N E =======================================
.text$x:000089AF
.text$x:000089AF
.text$x:000089AF __ehhandler$??1CLocalItem@NZip@NArchive@@QAE@XZ proc near
.text$x:000089AF                                         ; DATA XREF: NArchive::NZip::CLocalItem::~CLocalItem(void)+5o
.text$x:000089AF
.text$x:000089AF arg_4           = dword ptr  8
.text$x:000089AF
.text$x:000089AF                 mov     edx, [esp+arg_4]
.text$x:000089B3                 lea     eax, [edx+0Ch]
.text$x:000089B6                 mov     ecx, [edx-8]
.text$x:000089B9                 xor     ecx, eax
.text$x:000089BB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000089C0                 mov     eax, offset __ehfuncinfo$??1CLocalItem@NZip@NArchive@@QAE@XZ
.text$x:000089C5                 jmp     ___CxxFrameHandler3
.text$x:000089C5 __ehhandler$??1CLocalItem@NZip@NArchive@@QAE@XZ endp
.text$x:000089C5
.text$x:000089C5 ; ---------------------------------------------------------------------------
.text$x:000089CA                 align 4
.text$x:000089CA _text$x         ends
.text$x:000089CA
.xdata$x:000089CC ; ===========================================================================
.xdata$x:000089CC
.xdata$x:000089CC ; Segment type: Pure data
.xdata$x:000089CC ; Segment permissions: Read
.xdata$x:000089CC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000089CC                 assume cs:_xdata$x
.xdata$x:000089CC                 ;org 89CCh
.xdata$x:000089CC ; COMDAT (pick associative to section at 8938)
.xdata$x:000089CC __unwindtable$??1CLocalItem@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:000089CC                                         ; DATA XREF: .xdata$x:000089DCo
.xdata$x:000089CD                 db 0FFh
.xdata$x:000089CE                 db 0FFh
.xdata$x:000089CF                 db 0FFh
.xdata$x:000089D0                 dd offset __unwindfunclet$??1CLocalItem@NZip@NArchive@@QAE@XZ$0
.xdata$x:000089D4 __ehfuncinfo$??1CLocalItem@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000089D4                                         ; DATA XREF: __ehhandler$??1CLocalItem@NZip@NArchive@@QAE@XZ+11o
.xdata$x:000089D5                 db    5
.xdata$x:000089D6                 db  93h ; ô
.xdata$x:000089D7                 db  19h
.xdata$x:000089D8                 db    1
.xdata$x:000089D9                 db    0
.xdata$x:000089DA                 db    0
.xdata$x:000089DB                 db    0
.xdata$x:000089DC                 dd offset __unwindtable$??1CLocalItem@NZip@NArchive@@QAE@XZ
.xdata$x:000089E0                 db    0
.xdata$x:000089E1                 db    0
.xdata$x:000089E2                 db    0
.xdata$x:000089E3                 db    0
.xdata$x:000089E4                 db    0
.xdata$x:000089E5                 db    0
.xdata$x:000089E6                 db    0
.xdata$x:000089E7                 db    0
.xdata$x:000089E8                 db    0
.xdata$x:000089E9                 db    0
.xdata$x:000089EA                 db    0
.xdata$x:000089EB                 db    0
.xdata$x:000089EC                 db    0
.xdata$x:000089ED                 db    0
.xdata$x:000089EE                 db    0
.xdata$x:000089EF                 db    0
.xdata$x:000089F0                 db    0
.xdata$x:000089F1                 db    0
.xdata$x:000089F2                 db    0
.xdata$x:000089F3                 db    0
.xdata$x:000089F4                 db    1
.xdata$x:000089F5                 db    0
.xdata$x:000089F6                 db    0
.xdata$x:000089F7                 db    0
.xdata$x:000089F7 _xdata$x        ends
.xdata$x:000089F7
.text:000089F8 ; ===========================================================================
.text:000089F8
.text:000089F8 ; Segment type: Pure code
.text:000089F8 ; Segment permissions: Read/Execute
.text:000089F8 _text           segment para public 'CODE' use32
.text:000089F8                 assume cs:_text
.text:000089F8                 ;org 89F8h
.text:000089F8 ; COMDAT (pick any)
.text:000089F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000089F8
.text:000089F8 ; =============== S U B R O U T I N E =======================================
.text:000089F8
.text:000089F8 ; Attributes: bp-based frame
.text:000089F8
.text:000089F8 ; _DWORD __thiscall NArchive::NZip::CExtraBlock::~CExtraBlock(NArchive::NZip::CExtraBlock *__hidden this)
.text:000089F8                 public ??1CExtraBlock@NZip@NArchive@@QAE@XZ
.text:000089F8 ??1CExtraBlock@NZip@NArchive@@QAE@XZ proc near
.text:000089F8                                         ; CODE XREF: __unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$1+6j
.text:000089F8                                         ; NArchive::NZip::CLocalItem::~CLocalItem(void)+3Ap ...
.text:000089F8
.text:000089F8 var_4           = dword ptr -4
.text:000089F8
.text:000089F8                 push    ebp
.text:000089F9                 mov     ebp, esp
.text:000089FB                 push    ecx
.text:000089FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008A03                 mov     [ebp+var_4], ecx
.text:00008A06                 mov     ecx, [ebp+var_4]
.text:00008A09                 call    ??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)
.text:00008A0E                 add     esp, 4
.text:00008A11                 cmp     ebp, esp
.text:00008A13                 call    __RTC_CheckEsp
.text:00008A18                 mov     esp, ebp
.text:00008A1A                 pop     ebp
.text:00008A1B                 retn
.text:00008A1B ??1CExtraBlock@NZip@NArchive@@QAE@XZ endp
.text:00008A1B
.text:00008A1B _text           ends
.text:00008A1B
.text:00008A1C ; ===========================================================================
.text:00008A1C
.text:00008A1C ; Segment type: Pure code
.text:00008A1C ; Segment permissions: Read/Execute
.text:00008A1C _text           segment para public 'CODE' use32
.text:00008A1C                 assume cs:_text
.text:00008A1C                 ;org 8A1Ch
.text:00008A1C ; COMDAT (pick any)
.text:00008A1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008A1C
.text:00008A1C ; =============== S U B R O U T I N E =======================================
.text:00008A1C
.text:00008A1C ; Attributes: bp-based frame
.text:00008A1C
.text:00008A1C ; _DWORD __thiscall NArchive::NZip::CItem::~CItem(NArchive::NZip::CItem *__hidden this)
.text:00008A1C                 public ??1CItem@NZip@NArchive@@QAE@XZ
.text:00008A1C ??1CItem@NZip@NArchive@@QAE@XZ proc near
.text:00008A1C                                         ; CODE XREF: NArchive::NZip::CItemEx::~CItemEx(void)+11p
.text:00008A1C
.text:00008A1C var_10          = dword ptr -10h
.text:00008A1C var_C           = dword ptr -0Ch
.text:00008A1C var_4           = dword ptr -4
.text:00008A1C
.text:00008A1C                 push    ebp
.text:00008A1D                 mov     ebp, esp
.text:00008A1F                 push    0FFFFFFFFh
.text:00008A21                 push    offset __ehhandler$??1CItem@NZip@NArchive@@QAE@XZ
.text:00008A26                 mov     eax, large fs:0
.text:00008A2C                 push    eax
.text:00008A2D                 push    ecx
.text:00008A2E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00008A35                 mov     eax, dword ptr ds:___security_cookie
.text:00008A3A                 xor     eax, ebp
.text:00008A3C                 push    eax
.text:00008A3D                 lea     eax, [ebp+var_C]
.text:00008A40                 mov     large fs:0, eax
.text:00008A46                 mov     [ebp+var_10], ecx
.text:00008A49                 mov     [ebp+var_4], 1
.text:00008A50                 mov     ecx, [ebp+var_10]
.text:00008A53                 add     ecx, 54h ; 'T'
.text:00008A56                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00008A5B                 mov     byte ptr [ebp+var_4], 0
.text:00008A5F                 mov     ecx, [ebp+var_10]
.text:00008A62                 add     ecx, 48h ; 'H'  ; this
.text:00008A65                 call    ??1CExtraBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraBlock::~CExtraBlock(void)
.text:00008A6A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008A71                 mov     ecx, [ebp+var_10] ; this
.text:00008A74                 call    ??1CLocalItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CLocalItem::~CLocalItem(void)
.text:00008A79                 mov     ecx, [ebp+var_C]
.text:00008A7C                 mov     large fs:0, ecx
.text:00008A83                 pop     ecx
.text:00008A84                 add     esp, 10h
.text:00008A87                 cmp     ebp, esp
.text:00008A89                 call    __RTC_CheckEsp
.text:00008A8E                 mov     esp, ebp
.text:00008A90                 pop     ebp
.text:00008A91                 retn
.text:00008A91 ??1CItem@NZip@NArchive@@QAE@XZ endp
.text:00008A91
.text:00008A91 ; ---------------------------------------------------------------------------
.text:00008A92                 align 4
.text:00008A92 _text           ends
.text:00008A92
.text$x:00008A94 ; ===========================================================================
.text$x:00008A94
.text$x:00008A94 ; Segment type: Pure code
.text$x:00008A94 ; Segment permissions: Read/Execute
.text$x:00008A94 _text$x         segment para public 'CODE' use32
.text$x:00008A94                 assume cs:_text$x
.text$x:00008A94                 ;org 8A94h
.text$x:00008A94 ; COMDAT (pick associative to section at 8A1C)
.text$x:00008A94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008A94
.text$x:00008A94 ; =============== S U B R O U T I N E =======================================
.text$x:00008A94
.text$x:00008A94
.text$x:00008A94 __unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$0 proc near
.text$x:00008A94                                         ; DATA XREF: .xdata$x:00008AC8o
.text$x:00008A94                 mov     ecx, [ebp-10h]  ; this
.text$x:00008A97                 jmp     ??1CLocalItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CLocalItem::~CLocalItem(void)
.text$x:00008A97 __unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$0 endp
.text$x:00008A97
.text$x:00008A9C
.text$x:00008A9C ; =============== S U B R O U T I N E =======================================
.text$x:00008A9C
.text$x:00008A9C
.text$x:00008A9C __unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$1 proc near
.text$x:00008A9C                                         ; DATA XREF: .xdata$x:00008AD0o
.text$x:00008A9C                 mov     ecx, [ebp-10h]
.text$x:00008A9F                 add     ecx, 48h ; 'H'  ; this
.text$x:00008AA2                 jmp     ??1CExtraBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraBlock::~CExtraBlock(void)
.text$x:00008AA2 __unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$1 endp
.text$x:00008AA2
.text$x:00008AA7
.text$x:00008AA7 ; =============== S U B R O U T I N E =======================================
.text$x:00008AA7
.text$x:00008AA7
.text$x:00008AA7 __ehhandler$??1CItem@NZip@NArchive@@QAE@XZ proc near
.text$x:00008AA7                                         ; DATA XREF: NArchive::NZip::CItem::~CItem(void)+5o
.text$x:00008AA7
.text$x:00008AA7 arg_4           = dword ptr  8
.text$x:00008AA7
.text$x:00008AA7                 mov     edx, [esp+arg_4]
.text$x:00008AAB                 lea     eax, [edx+0Ch]
.text$x:00008AAE                 mov     ecx, [edx-8]
.text$x:00008AB1                 xor     ecx, eax
.text$x:00008AB3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008AB8                 mov     eax, offset __ehfuncinfo$??1CItem@NZip@NArchive@@QAE@XZ
.text$x:00008ABD                 jmp     ___CxxFrameHandler3
.text$x:00008ABD __ehhandler$??1CItem@NZip@NArchive@@QAE@XZ endp
.text$x:00008ABD
.text$x:00008ABD ; ---------------------------------------------------------------------------
.text$x:00008AC2                 align 4
.text$x:00008AC2 _text$x         ends
.text$x:00008AC2
.xdata$x:00008AC4 ; ===========================================================================
.xdata$x:00008AC4
.xdata$x:00008AC4 ; Segment type: Pure data
.xdata$x:00008AC4 ; Segment permissions: Read
.xdata$x:00008AC4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008AC4                 assume cs:_xdata$x
.xdata$x:00008AC4                 ;org 8AC4h
.xdata$x:00008AC4 ; COMDAT (pick associative to section at 8A1C)
.xdata$x:00008AC4 __unwindtable$??1CItem@NZip@NArchive@@QAE@XZ db 0FFh
.xdata$x:00008AC4                                         ; DATA XREF: .xdata$x:00008ADCo
.xdata$x:00008AC5                 db 0FFh
.xdata$x:00008AC6                 db 0FFh
.xdata$x:00008AC7                 db 0FFh
.xdata$x:00008AC8                 dd offset __unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$0
.xdata$x:00008ACC                 align 10h
.xdata$x:00008AD0                 dd offset __unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$1
.xdata$x:00008AD4 __ehfuncinfo$??1CItem@NZip@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00008AD4                                         ; DATA XREF: __ehhandler$??1CItem@NZip@NArchive@@QAE@XZ+11o
.xdata$x:00008AD5                 db    5
.xdata$x:00008AD6                 db  93h ; ô
.xdata$x:00008AD7                 db  19h
.xdata$x:00008AD8                 db    2
.xdata$x:00008AD9                 db    0
.xdata$x:00008ADA                 db    0
.xdata$x:00008ADB                 db    0
.xdata$x:00008ADC                 dd offset __unwindtable$??1CItem@NZip@NArchive@@QAE@XZ
.xdata$x:00008AE0                 db    0
.xdata$x:00008AE1                 db    0
.xdata$x:00008AE2                 db    0
.xdata$x:00008AE3                 db    0
.xdata$x:00008AE4                 db    0
.xdata$x:00008AE5                 db    0
.xdata$x:00008AE6                 db    0
.xdata$x:00008AE7                 db    0
.xdata$x:00008AE8                 db    0
.xdata$x:00008AE9                 db    0
.xdata$x:00008AEA                 db    0
.xdata$x:00008AEB                 db    0
.xdata$x:00008AEC                 db    0
.xdata$x:00008AED                 db    0
.xdata$x:00008AEE                 db    0
.xdata$x:00008AEF                 db    0
.xdata$x:00008AF0                 db    0
.xdata$x:00008AF1                 db    0
.xdata$x:00008AF2                 db    0
.xdata$x:00008AF3                 db    0
.xdata$x:00008AF4                 db    1
.xdata$x:00008AF5                 db    0
.xdata$x:00008AF6                 db    0
.xdata$x:00008AF7                 db    0
.xdata$x:00008AF7 _xdata$x        ends
.xdata$x:00008AF7
.text:00008AF8 ; ===========================================================================
.text:00008AF8
.text:00008AF8 ; Segment type: Pure code
.text:00008AF8 ; Segment permissions: Read/Execute
.text:00008AF8 _text           segment para public 'CODE' use32
.text:00008AF8                 assume cs:_text
.text:00008AF8                 ;org 8AF8h
.text:00008AF8 ; COMDAT (pick any)
.text:00008AF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008AF8
.text:00008AF8 ; =============== S U B R O U T I N E =======================================
.text:00008AF8
.text:00008AF8 ; Attributes: bp-based frame
.text:00008AF8
.text:00008AF8 ; _DWORD __thiscall NArchive::NZip::CLocalItem::CLocalItem(NArchive::NZip::CLocalItem *this, const struct NArchive::NZip::CLocalItem *)
.text:00008AF8                 public ??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
.text:00008AF8 ??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z proc near
.text:00008AF8                                         ; CODE XREF: NArchive::NZip::CItem::CItem(NArchive::NZip::CItem const &)+34p
.text:00008AF8
.text:00008AF8 var_10          = dword ptr -10h
.text:00008AF8 var_C           = dword ptr -0Ch
.text:00008AF8 var_4           = dword ptr -4
.text:00008AF8 arg_0           = dword ptr  8
.text:00008AF8
.text:00008AF8                 push    ebp
.text:00008AF9                 mov     ebp, esp
.text:00008AFB                 push    0FFFFFFFFh
.text:00008AFD                 push    offset __ehhandler$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
.text:00008B02                 mov     eax, large fs:0
.text:00008B08                 push    eax
.text:00008B09                 push    ecx
.text:00008B0A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00008B11                 mov     eax, dword ptr ds:___security_cookie
.text:00008B16                 xor     eax, ebp
.text:00008B18                 push    eax
.text:00008B19                 lea     eax, [ebp+var_C]
.text:00008B1C                 mov     large fs:0, eax
.text:00008B22                 mov     [ebp+var_10], ecx
.text:00008B25                 mov     eax, [ebp+var_10]
.text:00008B28                 mov     ecx, [ebp+arg_0]
.text:00008B2B                 mov     dx, [ecx]
.text:00008B2E                 mov     [eax], dx
.text:00008B31                 mov     eax, [ebp+var_10]
.text:00008B34                 mov     ecx, [ebp+arg_0]
.text:00008B37                 mov     dx, [ecx+2]
.text:00008B3B                 mov     [eax+2], dx
.text:00008B3F                 mov     eax, [ebp+arg_0]
.text:00008B42                 mov     cx, [eax+4]
.text:00008B46                 mov     edx, [ebp+var_10]
.text:00008B49                 mov     [edx+4], cx
.text:00008B4D                 mov     eax, [ebp+var_10]
.text:00008B50                 mov     ecx, [ebp+arg_0]
.text:00008B53                 mov     edx, [ecx+8]
.text:00008B56                 mov     [eax+8], edx
.text:00008B59                 mov     ecx, [ecx+0Ch]
.text:00008B5C                 mov     [eax+0Ch], ecx
.text:00008B5F                 mov     edx, [ebp+var_10]
.text:00008B62                 mov     eax, [ebp+arg_0]
.text:00008B65                 mov     ecx, [eax+10h]
.text:00008B68                 mov     [edx+10h], ecx
.text:00008B6B                 mov     eax, [eax+14h]
.text:00008B6E                 mov     [edx+14h], eax
.text:00008B71                 mov     ecx, [ebp+var_10]
.text:00008B74                 mov     edx, [ebp+arg_0]
.text:00008B77                 mov     eax, [edx+18h]
.text:00008B7A                 mov     [ecx+18h], eax
.text:00008B7D                 mov     ecx, [ebp+var_10]
.text:00008B80                 mov     edx, [ebp+arg_0]
.text:00008B83                 mov     eax, [edx+1Ch]
.text:00008B86                 mov     [ecx+1Ch], eax
.text:00008B89                 mov     ecx, [ebp+arg_0]
.text:00008B8C                 add     ecx, 20h ; ' '
.text:00008B8F                 push    ecx
.text:00008B90                 mov     ecx, [ebp+var_10]
.text:00008B93                 add     ecx, 20h ; ' '
.text:00008B96                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:00008B9B                 mov     [ebp+var_4], 0
.text:00008BA2                 mov     edx, [ebp+arg_0]
.text:00008BA5                 add     edx, 2Ch ; ','
.text:00008BA8                 push    edx             ; struct NArchive::NZip::CExtraBlock *
.text:00008BA9                 mov     ecx, [ebp+var_10]
.text:00008BAC                 add     ecx, 2Ch ; ','  ; this
.text:00008BAF                 call    ??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CExtraBlock::CExtraBlock(NArchive::NZip::CExtraBlock const &)
.text:00008BB4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008BBB                 mov     eax, [ebp+var_10]
.text:00008BBE                 mov     ecx, [ebp+var_C]
.text:00008BC1                 mov     large fs:0, ecx
.text:00008BC8                 pop     ecx
.text:00008BC9                 add     esp, 10h
.text:00008BCC                 cmp     ebp, esp
.text:00008BCE                 call    __RTC_CheckEsp
.text:00008BD3                 mov     esp, ebp
.text:00008BD5                 pop     ebp
.text:00008BD6                 retn    4
.text:00008BD6 ??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z endp
.text:00008BD6
.text:00008BD6 ; ---------------------------------------------------------------------------
.text:00008BD9                 align 4
.text:00008BD9 _text           ends
.text:00008BD9
.text$x:00008BDC ; ===========================================================================
.text$x:00008BDC
.text$x:00008BDC ; Segment type: Pure code
.text$x:00008BDC ; Segment permissions: Read/Execute
.text$x:00008BDC _text$x         segment para public 'CODE' use32
.text$x:00008BDC                 assume cs:_text$x
.text$x:00008BDC                 ;org 8BDCh
.text$x:00008BDC ; COMDAT (pick associative to section at 8AF8)
.text$x:00008BDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008BDC
.text$x:00008BDC ; =============== S U B R O U T I N E =======================================
.text$x:00008BDC
.text$x:00008BDC
.text$x:00008BDC __unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z$0 proc near
.text$x:00008BDC                                         ; DATA XREF: .xdata$x:00008C08o
.text$x:00008BDC                 mov     ecx, [ebp-10h]
.text$x:00008BDF                 add     ecx, 20h ; ' '  ; this
.text$x:00008BE2                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00008BE2 __unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z$0 endp
.text$x:00008BE2
.text$x:00008BE7
.text$x:00008BE7 ; =============== S U B R O U T I N E =======================================
.text$x:00008BE7
.text$x:00008BE7
.text$x:00008BE7 __ehhandler$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z proc near
.text$x:00008BE7                                         ; DATA XREF: NArchive::NZip::CLocalItem::CLocalItem(NArchive::NZip::CLocalItem const &)+5o
.text$x:00008BE7
.text$x:00008BE7 arg_4           = dword ptr  8
.text$x:00008BE7
.text$x:00008BE7                 mov     edx, [esp+arg_4]
.text$x:00008BEB                 lea     eax, [edx+0Ch]
.text$x:00008BEE                 mov     ecx, [edx-8]
.text$x:00008BF1                 xor     ecx, eax
.text$x:00008BF3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008BF8                 mov     eax, offset __ehfuncinfo$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
.text$x:00008BFD                 jmp     ___CxxFrameHandler3
.text$x:00008BFD __ehhandler$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z endp
.text$x:00008BFD
.text$x:00008BFD ; ---------------------------------------------------------------------------
.text$x:00008C02                 align 4
.text$x:00008C02 _text$x         ends
.text$x:00008C02
.xdata$x:00008C04 ; ===========================================================================
.xdata$x:00008C04
.xdata$x:00008C04 ; Segment type: Pure data
.xdata$x:00008C04 ; Segment permissions: Read
.xdata$x:00008C04 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008C04                 assume cs:_xdata$x
.xdata$x:00008C04                 ;org 8C04h
.xdata$x:00008C04 ; COMDAT (pick associative to section at 8AF8)
.xdata$x:00008C04 __unwindtable$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z db 0FFh
.xdata$x:00008C04                                         ; DATA XREF: .xdata$x:00008C14o
.xdata$x:00008C05                 db 0FFh
.xdata$x:00008C06                 db 0FFh
.xdata$x:00008C07                 db 0FFh
.xdata$x:00008C08                 dd offset __unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z$0
.xdata$x:00008C0C __ehfuncinfo$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z db  22h ; "
.xdata$x:00008C0C                                         ; DATA XREF: __ehhandler$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z+11o
.xdata$x:00008C0D                 db    5
.xdata$x:00008C0E                 db  93h ; ô
.xdata$x:00008C0F                 db  19h
.xdata$x:00008C10                 db    1
.xdata$x:00008C11                 db    0
.xdata$x:00008C12                 db    0
.xdata$x:00008C13                 db    0
.xdata$x:00008C14                 dd offset __unwindtable$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
.xdata$x:00008C18                 db    0
.xdata$x:00008C19                 db    0
.xdata$x:00008C1A                 db    0
.xdata$x:00008C1B                 db    0
.xdata$x:00008C1C                 db    0
.xdata$x:00008C1D                 db    0
.xdata$x:00008C1E                 db    0
.xdata$x:00008C1F                 db    0
.xdata$x:00008C20                 db    0
.xdata$x:00008C21                 db    0
.xdata$x:00008C22                 db    0
.xdata$x:00008C23                 db    0
.xdata$x:00008C24                 db    0
.xdata$x:00008C25                 db    0
.xdata$x:00008C26                 db    0
.xdata$x:00008C27                 db    0
.xdata$x:00008C28                 db    0
.xdata$x:00008C29                 db    0
.xdata$x:00008C2A                 db    0
.xdata$x:00008C2B                 db    0
.xdata$x:00008C2C                 db    1
.xdata$x:00008C2D                 db    0
.xdata$x:00008C2E                 db    0
.xdata$x:00008C2F                 db    0
.xdata$x:00008C2F _xdata$x        ends
.xdata$x:00008C2F
.text:00008C30 ; ===========================================================================
.text:00008C30
.text:00008C30 ; Segment type: Pure code
.text:00008C30 ; Segment permissions: Read/Execute
.text:00008C30 _text           segment para public 'CODE' use32
.text:00008C30                 assume cs:_text
.text:00008C30                 ;org 8C30h
.text:00008C30 ; COMDAT (pick any)
.text:00008C30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008C30
.text:00008C30 ; =============== S U B R O U T I N E =======================================
.text:00008C30
.text:00008C30 ; Attributes: bp-based frame
.text:00008C30
.text:00008C30 ; _DWORD __thiscall NArchive::NZip::CExtraBlock::CExtraBlock(NArchive::NZip::CExtraBlock *this, const struct NArchive::NZip::CExtraBlock *)
.text:00008C30                 public ??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z
.text:00008C30 ??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z proc near
.text:00008C30                                         ; CODE XREF: NArchive::NZip::CItem::CItem(NArchive::NZip::CItem const &)+87p
.text:00008C30                                         ; NArchive::NZip::CLocalItem::CLocalItem(NArchive::NZip::CLocalItem const &)+B7p
.text:00008C30
.text:00008C30 var_4           = dword ptr -4
.text:00008C30 arg_0           = dword ptr  8
.text:00008C30
.text:00008C30                 push    ebp
.text:00008C31                 mov     ebp, esp
.text:00008C33                 push    ecx
.text:00008C34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008C3B                 mov     [ebp+var_4], ecx
.text:00008C3E                 mov     eax, [ebp+arg_0]
.text:00008C41                 push    eax
.text:00008C42                 mov     ecx, [ebp+var_4]
.text:00008C45                 call    ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)
.text:00008C4A                 mov     eax, [ebp+var_4]
.text:00008C4D                 add     esp, 4
.text:00008C50                 cmp     ebp, esp
.text:00008C52                 call    __RTC_CheckEsp
.text:00008C57                 mov     esp, ebp
.text:00008C59                 pop     ebp
.text:00008C5A                 retn    4
.text:00008C5A ??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z endp
.text:00008C5A
.text:00008C5A ; ---------------------------------------------------------------------------
.text:00008C5D                 align 10h
.text:00008C5D _text           ends
.text:00008C5D
.text:00008C60 ; ===========================================================================
.text:00008C60
.text:00008C60 ; Segment type: Pure code
.text:00008C60 ; Segment permissions: Read/Execute
.text:00008C60 _text           segment para public 'CODE' use32
.text:00008C60                 assume cs:_text
.text:00008C60                 ;org 8C60h
.text:00008C60 ; COMDAT (pick any)
.text:00008C60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008C60
.text:00008C60 ; =============== S U B R O U T I N E =======================================
.text:00008C60
.text:00008C60 ; Attributes: bp-based frame
.text:00008C60
.text:00008C60 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:00008C60                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00008C60 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00008C60                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+19Ap
.text:00008C60                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1049p ...
.text:00008C60
.text:00008C60 var_4           = dword ptr -4
.text:00008C60
.text:00008C60                 push    ebp
.text:00008C61                 mov     ebp, esp
.text:00008C63                 push    ecx
.text:00008C64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008C6B                 mov     [ebp+var_4], ecx
.text:00008C6E                 mov     eax, [ebp+var_4]
.text:00008C71                 mov     dword ptr [eax], 0
.text:00008C77                 mov     eax, [ebp+var_4]
.text:00008C7A                 mov     esp, ebp
.text:00008C7C                 pop     ebp
.text:00008C7D                 retn
.text:00008C7D ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00008C7D
.text:00008C7D ; ---------------------------------------------------------------------------
.text:00008C7E                 align 10h
.text:00008C7E _text           ends
.text:00008C7E
.text:00008C80 ; ===========================================================================
.text:00008C80
.text:00008C80 ; Segment type: Pure code
.text:00008C80 ; Segment permissions: Read/Execute
.text:00008C80 _text           segment para public 'CODE' use32
.text:00008C80                 assume cs:_text
.text:00008C80                 ;org 8C80h
.text:00008C80 ; COMDAT (pick any)
.text:00008C80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008C80
.text:00008C80 ; =============== S U B R O U T I N E =======================================
.text:00008C80
.text:00008C80 ; Attributes: bp-based frame
.text:00008C80
.text:00008C80 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00008C80                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00008C80 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00008C80                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1D9p
.text:00008C80                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+2C3p ...
.text:00008C80
.text:00008C80 var_4           = dword ptr -4
.text:00008C80
.text:00008C80                 push    ebp
.text:00008C81                 mov     ebp, esp
.text:00008C83                 push    ecx
.text:00008C84                 push    esi
.text:00008C85                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008C8C                 mov     [ebp+var_4], ecx
.text:00008C8F                 mov     eax, [ebp+var_4]
.text:00008C92                 cmp     dword ptr [eax], 0
.text:00008C95                 jz      short loc_8CB2
.text:00008C97                 mov     ecx, [ebp+var_4]
.text:00008C9A                 mov     edx, [ecx]
.text:00008C9C                 mov     eax, [ebp+var_4]
.text:00008C9F                 mov     ecx, [eax]
.text:00008CA1                 mov     edx, [edx]
.text:00008CA3                 mov     esi, esp
.text:00008CA5                 push    ecx
.text:00008CA6                 mov     eax, [edx+8]
.text:00008CA9                 call    eax
.text:00008CAB                 cmp     esi, esp
.text:00008CAD                 call    __RTC_CheckEsp
.text:00008CB2
.text:00008CB2 loc_8CB2:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:00008CB2                 pop     esi
.text:00008CB3                 add     esp, 4
.text:00008CB6                 cmp     ebp, esp
.text:00008CB8                 call    __RTC_CheckEsp
.text:00008CBD                 mov     esp, ebp
.text:00008CBF                 pop     ebp
.text:00008CC0                 retn
.text:00008CC0 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00008CC0
.text:00008CC0 ; ---------------------------------------------------------------------------
.text:00008CC1                 align 4
.text:00008CC1 _text           ends
.text:00008CC1
.text:00008CC4 ; ===========================================================================
.text:00008CC4
.text:00008CC4 ; Segment type: Pure code
.text:00008CC4 ; Segment permissions: Read/Execute
.text:00008CC4 _text           segment para public 'CODE' use32
.text:00008CC4                 assume cs:_text
.text:00008CC4                 ;org 8CC4h
.text:00008CC4 ; COMDAT (pick any)
.text:00008CC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008CC4
.text:00008CC4 ; =============== S U B R O U T I N E =======================================
.text:00008CC4
.text:00008CC4 ; Attributes: bp-based frame
.text:00008CC4
.text:00008CC4 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::operator struct ISequentialInStream *(void)const
.text:00008CC4                 public ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:00008CC4 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:00008CC4                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+113Cp
.text:00008CC4                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+11F4p ...
.text:00008CC4
.text:00008CC4 var_4           = dword ptr -4
.text:00008CC4
.text:00008CC4                 push    ebp
.text:00008CC5                 mov     ebp, esp
.text:00008CC7                 push    ecx
.text:00008CC8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008CCF                 mov     [ebp+var_4], ecx
.text:00008CD2                 mov     eax, [ebp+var_4]
.text:00008CD5                 mov     eax, [eax]
.text:00008CD7                 mov     esp, ebp
.text:00008CD9                 pop     ebp
.text:00008CDA                 retn
.text:00008CDA ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:00008CDA
.text:00008CDA ; ---------------------------------------------------------------------------
.text:00008CDB                 align 4
.text:00008CDB _text           ends
.text:00008CDB
.text:00008CDC ; ===========================================================================
.text:00008CDC
.text:00008CDC ; Segment type: Pure code
.text:00008CDC ; Segment permissions: Read/Execute
.text:00008CDC _text           segment para public 'CODE' use32
.text:00008CDC                 assume cs:_text
.text:00008CDC                 ;org 8CDCh
.text:00008CDC ; COMDAT (pick any)
.text:00008CDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008CDC
.text:00008CDC ; =============== S U B R O U T I N E =======================================
.text:00008CDC
.text:00008CDC ; Attributes: bp-based frame
.text:00008CDC
.text:00008CDC ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:00008CDC                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:00008CDC ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:00008CDC                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1113p
.text:00008CDC                                         ; CMyComPtr<ISequentialInStream>::operator=(CMyComPtr<ISequentialInStream> const &)+17p
.text:00008CDC
.text:00008CDC var_4           = dword ptr -4
.text:00008CDC arg_0           = dword ptr  8
.text:00008CDC
.text:00008CDC                 push    ebp
.text:00008CDD                 mov     ebp, esp
.text:00008CDF                 push    ecx
.text:00008CE0                 push    esi
.text:00008CE1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008CE8                 mov     [ebp+var_4], ecx
.text:00008CEB                 cmp     [ebp+arg_0], 0
.text:00008CEF                 jz      short loc_8D08
.text:00008CF1                 mov     eax, [ebp+arg_0]
.text:00008CF4                 mov     ecx, [eax]
.text:00008CF6                 mov     esi, esp
.text:00008CF8                 mov     edx, [ebp+arg_0]
.text:00008CFB                 push    edx
.text:00008CFC                 mov     eax, [ecx+4]
.text:00008CFF                 call    eax
.text:00008D01                 cmp     esi, esp
.text:00008D03                 call    __RTC_CheckEsp
.text:00008D08
.text:00008D08 loc_8D08:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:00008D08                 mov     ecx, [ebp+var_4]
.text:00008D0B                 cmp     dword ptr [ecx], 0
.text:00008D0E                 jz      short loc_8D2B
.text:00008D10                 mov     edx, [ebp+var_4]
.text:00008D13                 mov     eax, [edx]
.text:00008D15                 mov     ecx, [ebp+var_4]
.text:00008D18                 mov     edx, [ecx]
.text:00008D1A                 mov     eax, [eax]
.text:00008D1C                 mov     esi, esp
.text:00008D1E                 push    edx
.text:00008D1F                 mov     ecx, [eax+8]
.text:00008D22                 call    ecx
.text:00008D24                 cmp     esi, esp
.text:00008D26                 call    __RTC_CheckEsp
.text:00008D2B
.text:00008D2B loc_8D2B:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:00008D2B                 mov     edx, [ebp+var_4]
.text:00008D2E                 mov     eax, [ebp+arg_0]
.text:00008D31                 mov     [edx], eax
.text:00008D33                 mov     eax, [ebp+arg_0]
.text:00008D36                 pop     esi
.text:00008D37                 add     esp, 4
.text:00008D3A                 cmp     ebp, esp
.text:00008D3C                 call    __RTC_CheckEsp
.text:00008D41                 mov     esp, ebp
.text:00008D43                 pop     ebp
.text:00008D44                 retn    4
.text:00008D44 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:00008D44
.text:00008D44 ; ---------------------------------------------------------------------------
.text:00008D47                 align 4
.text:00008D47 _text           ends
.text:00008D47
.text:00008D48 ; ===========================================================================
.text:00008D48
.text:00008D48 ; Segment type: Pure code
.text:00008D48 ; Segment permissions: Read/Execute
.text:00008D48 _text           segment para public 'CODE' use32
.text:00008D48                 assume cs:_text
.text:00008D48                 ;org 8D48h
.text:00008D48 ; COMDAT (pick any)
.text:00008D48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008D48
.text:00008D48 ; =============== S U B R O U T I N E =======================================
.text:00008D48
.text:00008D48 ; Attributes: bp-based frame
.text:00008D48
.text:00008D48 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(class CMyComPtr<struct ISequentialInStream> const &)
.text:00008D48                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z
.text:00008D48 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z proc near
.text:00008D48                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+14BCp
.text:00008D48                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+14CDp
.text:00008D48
.text:00008D48 var_4           = dword ptr -4
.text:00008D48 arg_0           = dword ptr  8
.text:00008D48
.text:00008D48                 push    ebp
.text:00008D49                 mov     ebp, esp
.text:00008D4B                 push    ecx
.text:00008D4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008D53                 mov     [ebp+var_4], ecx
.text:00008D56                 mov     eax, [ebp+arg_0]
.text:00008D59                 mov     ecx, [eax]
.text:00008D5B                 push    ecx
.text:00008D5C                 mov     ecx, [ebp+var_4]
.text:00008D5F                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00008D64                 add     esp, 4
.text:00008D67                 cmp     ebp, esp
.text:00008D69                 call    __RTC_CheckEsp
.text:00008D6E                 mov     esp, ebp
.text:00008D70                 pop     ebp
.text:00008D71                 retn    4
.text:00008D71 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z endp
.text:00008D71
.text:00008D71 _text           ends
.text:00008D71
.text:00008D74 ; ===========================================================================
.text:00008D74
.text:00008D74 ; Segment type: Pure code
.text:00008D74 ; Segment permissions: Read/Execute
.text:00008D74 _text           segment para public 'CODE' use32
.text:00008D74                 assume cs:_text
.text:00008D74                 ;org 8D74h
.text:00008D74 ; COMDAT (pick any)
.text:00008D74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008D74
.text:00008D74 ; =============== S U B R O U T I N E =======================================
.text:00008D74
.text:00008D74 ; Attributes: bp-based frame
.text:00008D74
.text:00008D74 ; public: bool __thiscall CMyComPtr<struct ISequentialInStream>::operator!(void)const
.text:00008D74                 public ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ
.text:00008D74 ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ proc near
.text:00008D74                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+106Bp
.text:00008D74
.text:00008D74 var_4           = dword ptr -4
.text:00008D74
.text:00008D74                 push    ebp
.text:00008D75                 mov     ebp, esp
.text:00008D77                 push    ecx
.text:00008D78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008D7F                 mov     [ebp+var_4], ecx
.text:00008D82                 mov     eax, [ebp+var_4]
.text:00008D85                 xor     ecx, ecx
.text:00008D87                 cmp     dword ptr [eax], 0
.text:00008D8A                 setz    cl
.text:00008D8D                 mov     al, cl
.text:00008D8F                 mov     esp, ebp
.text:00008D91                 pop     ebp
.text:00008D92                 retn
.text:00008D92 ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ endp
.text:00008D92
.text:00008D92 ; ---------------------------------------------------------------------------
.text:00008D93                 align 4
.text:00008D93 _text           ends
.text:00008D93
.text:00008D94 ; ===========================================================================
.text:00008D94
.text:00008D94 ; Segment type: Pure code
.text:00008D94 ; Segment permissions: Read/Execute
.text:00008D94 _text           segment para public 'CODE' use32
.text:00008D94                 assume cs:_text
.text:00008D94                 ;org 8D94h
.text:00008D94 ; COMDAT (pick any)
.text:00008D94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008D94
.text:00008D94 ; =============== S U B R O U T I N E =======================================
.text:00008D94
.text:00008D94 ; Attributes: bp-based frame
.text:00008D94
.text:00008D94 ; public: void __thiscall CMyComPtr<struct ISequentialInStream>::Attach(struct ISequentialInStream *)
.text:00008D94                 public ?Attach@?$CMyComPtr@UISequentialInStream@@@@QAEXPAUISequentialInStream@@@Z
.text:00008D94 ?Attach@?$CMyComPtr@UISequentialInStream@@@@QAEXPAUISequentialInStream@@@Z proc near
.text:00008D94                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+240p
.text:00008D94                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+16B8p
.text:00008D94
.text:00008D94 var_4           = dword ptr -4
.text:00008D94 arg_0           = dword ptr  8
.text:00008D94
.text:00008D94                 push    ebp
.text:00008D95                 mov     ebp, esp
.text:00008D97                 push    ecx
.text:00008D98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008D9F                 mov     [ebp+var_4], ecx
.text:00008DA2                 mov     ecx, [ebp+var_4]
.text:00008DA5                 call    ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release(void)
.text:00008DAA                 mov     eax, [ebp+var_4]
.text:00008DAD                 mov     ecx, [ebp+arg_0]
.text:00008DB0                 mov     [eax], ecx
.text:00008DB2                 add     esp, 4
.text:00008DB5                 cmp     ebp, esp
.text:00008DB7                 call    __RTC_CheckEsp
.text:00008DBC                 mov     esp, ebp
.text:00008DBE                 pop     ebp
.text:00008DBF                 retn    4
.text:00008DBF ?Attach@?$CMyComPtr@UISequentialInStream@@@@QAEXPAUISequentialInStream@@@Z endp
.text:00008DBF
.text:00008DBF ; ---------------------------------------------------------------------------
.text:00008DC2                 align 4
.text:00008DC2 _text           ends
.text:00008DC2
.text:00008DC4 ; ===========================================================================
.text:00008DC4
.text:00008DC4 ; Segment type: Pure code
.text:00008DC4 ; Segment permissions: Read/Execute
.text:00008DC4 _text           segment para public 'CODE' use32
.text:00008DC4                 assume cs:_text
.text:00008DC4                 ;org 8DC4h
.text:00008DC4 ; COMDAT (pick any)
.text:00008DC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008DC4
.text:00008DC4 ; =============== S U B R O U T I N E =======================================
.text:00008DC4
.text:00008DC4 ; Attributes: bp-based frame
.text:00008DC4
.text:00008DC4 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(void)
.text:00008DC4                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:00008DC4 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:00008DC4                                         ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+345p
.text:00008DC4                                         ; COutStreamWithCRC::COutStreamWithCRC(void)+30p
.text:00008DC4
.text:00008DC4 var_4           = dword ptr -4
.text:00008DC4
.text:00008DC4                 push    ebp
.text:00008DC5                 mov     ebp, esp
.text:00008DC7                 push    ecx
.text:00008DC8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008DCF                 mov     [ebp+var_4], ecx
.text:00008DD2                 mov     eax, [ebp+var_4]
.text:00008DD5                 mov     dword ptr [eax], 0
.text:00008DDB                 mov     eax, [ebp+var_4]
.text:00008DDE                 mov     esp, ebp
.text:00008DE0                 pop     ebp
.text:00008DE1                 retn
.text:00008DE1 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00008DE1
.text:00008DE1 ; ---------------------------------------------------------------------------
.text:00008DE2                 align 4
.text:00008DE2 _text           ends
.text:00008DE2
.text:00008DE4 ; ===========================================================================
.text:00008DE4
.text:00008DE4 ; Segment type: Pure code
.text:00008DE4 ; Segment permissions: Read/Execute
.text:00008DE4 _text           segment para public 'CODE' use32
.text:00008DE4                 assume cs:_text
.text:00008DE4                 ;org 8DE4h
.text:00008DE4 ; COMDAT (pick any)
.text:00008DE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008DE4
.text:00008DE4 ; =============== S U B R O U T I N E =======================================
.text:00008DE4
.text:00008DE4 ; Attributes: bp-based frame
.text:00008DE4
.text:00008DE4 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(struct ISequentialOutStream *)
.text:00008DE4                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
.text:00008DE4 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z proc near
.text:00008DE4                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+175p
.text:00008DE4
.text:00008DE4 var_4           = dword ptr -4
.text:00008DE4 arg_0           = dword ptr  8
.text:00008DE4
.text:00008DE4                 push    ebp
.text:00008DE5                 mov     ebp, esp
.text:00008DE7                 push    ecx
.text:00008DE8                 push    esi
.text:00008DE9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008DF0                 mov     [ebp+var_4], ecx
.text:00008DF3                 mov     eax, [ebp+var_4]
.text:00008DF6                 mov     ecx, [ebp+arg_0]
.text:00008DF9                 mov     [eax], ecx
.text:00008DFB                 cmp     [ebp+arg_0], 0
.text:00008DFF                 jz      short loc_8E18
.text:00008E01                 mov     edx, [ebp+arg_0]
.text:00008E04                 mov     eax, [edx]
.text:00008E06                 mov     esi, esp
.text:00008E08                 mov     ecx, [ebp+arg_0]
.text:00008E0B                 push    ecx
.text:00008E0C                 mov     edx, [eax+4]
.text:00008E0F                 call    edx
.text:00008E11                 cmp     esi, esp
.text:00008E13                 call    __RTC_CheckEsp
.text:00008E18
.text:00008E18 loc_8E18:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)+1Bj
.text:00008E18                 mov     eax, [ebp+var_4]
.text:00008E1B                 pop     esi
.text:00008E1C                 add     esp, 4
.text:00008E1F                 cmp     ebp, esp
.text:00008E21                 call    __RTC_CheckEsp
.text:00008E26                 mov     esp, ebp
.text:00008E28                 pop     ebp
.text:00008E29                 retn    4
.text:00008E29 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z endp
.text:00008E29
.text:00008E29 _text           ends
.text:00008E29
.text:00008E2C ; ===========================================================================
.text:00008E2C
.text:00008E2C ; Segment type: Pure code
.text:00008E2C ; Segment permissions: Read/Execute
.text:00008E2C _text           segment para public 'CODE' use32
.text:00008E2C                 assume cs:_text
.text:00008E2C                 ;org 8E2Ch
.text:00008E2C ; COMDAT (pick any)
.text:00008E2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008E2C
.text:00008E2C ; =============== S U B R O U T I N E =======================================
.text:00008E2C
.text:00008E2C ; Attributes: bp-based frame
.text:00008E2C
.text:00008E2C ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:00008E2C                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:00008E2C ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:00008E2C                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1E5p
.text:00008E2C                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+2CFp ...
.text:00008E2C
.text:00008E2C var_4           = dword ptr -4
.text:00008E2C
.text:00008E2C                 push    ebp
.text:00008E2D                 mov     ebp, esp
.text:00008E2F                 push    ecx
.text:00008E30                 push    esi
.text:00008E31                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008E38                 mov     [ebp+var_4], ecx
.text:00008E3B                 mov     eax, [ebp+var_4]
.text:00008E3E                 cmp     dword ptr [eax], 0
.text:00008E41                 jz      short loc_8E5E
.text:00008E43                 mov     ecx, [ebp+var_4]
.text:00008E46                 mov     edx, [ecx]
.text:00008E48                 mov     eax, [ebp+var_4]
.text:00008E4B                 mov     ecx, [eax]
.text:00008E4D                 mov     edx, [edx]
.text:00008E4F                 mov     esi, esp
.text:00008E51                 push    ecx
.text:00008E52                 mov     eax, [edx+8]
.text:00008E55                 call    eax
.text:00008E57                 cmp     esi, esp
.text:00008E59                 call    __RTC_CheckEsp
.text:00008E5E
.text:00008E5E loc_8E5E:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:00008E5E                 pop     esi
.text:00008E5F                 add     esp, 4
.text:00008E62                 cmp     ebp, esp
.text:00008E64                 call    __RTC_CheckEsp
.text:00008E69                 mov     esp, ebp
.text:00008E6B                 pop     ebp
.text:00008E6C                 retn
.text:00008E6C ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00008E6C
.text:00008E6C ; ---------------------------------------------------------------------------
.text:00008E6D                 align 10h
.text:00008E6D _text           ends
.text:00008E6D
.text:00008E70 ; ===========================================================================
.text:00008E70
.text:00008E70 ; Segment type: Pure code
.text:00008E70 ; Segment permissions: Read/Execute
.text:00008E70 _text           segment para public 'CODE' use32
.text:00008E70                 assume cs:_text
.text:00008E70                 ;org 8E70h
.text:00008E70 ; COMDAT (pick any)
.text:00008E70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008E70
.text:00008E70 ; =============== S U B R O U T I N E =======================================
.text:00008E70
.text:00008E70 ; Attributes: bp-based frame
.text:00008E70
.text:00008E70 ; public: void __thiscall CMyComPtr<struct ISequentialOutStream>::Release(void)
.text:00008E70                 public ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
.text:00008E70 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ proc near
.text:00008E70                                         ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5B7p
.text:00008E70                                         ; NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+772p ...
.text:00008E70
.text:00008E70 var_4           = dword ptr -4
.text:00008E70
.text:00008E70                 push    ebp
.text:00008E71                 mov     ebp, esp
.text:00008E73                 push    ecx
.text:00008E74                 push    esi
.text:00008E75                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008E7C                 mov     [ebp+var_4], ecx
.text:00008E7F                 mov     eax, [ebp+var_4]
.text:00008E82                 cmp     dword ptr [eax], 0
.text:00008E85                 jz      short loc_8EAB
.text:00008E87                 mov     ecx, [ebp+var_4]
.text:00008E8A                 mov     edx, [ecx]
.text:00008E8C                 mov     eax, [ebp+var_4]
.text:00008E8F                 mov     ecx, [eax]
.text:00008E91                 mov     edx, [edx]
.text:00008E93                 mov     esi, esp
.text:00008E95                 push    ecx
.text:00008E96                 mov     eax, [edx+8]
.text:00008E99                 call    eax
.text:00008E9B                 cmp     esi, esp
.text:00008E9D                 call    __RTC_CheckEsp
.text:00008EA2                 mov     ecx, [ebp+var_4]
.text:00008EA5                 mov     dword ptr [ecx], 0
.text:00008EAB
.text:00008EAB loc_8EAB:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::Release(void)+15j
.text:00008EAB                 pop     esi
.text:00008EAC                 add     esp, 4
.text:00008EAF                 cmp     ebp, esp
.text:00008EB1                 call    __RTC_CheckEsp
.text:00008EB6                 mov     esp, ebp
.text:00008EB8                 pop     ebp
.text:00008EB9                 retn
.text:00008EB9 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ endp
.text:00008EB9
.text:00008EB9 ; ---------------------------------------------------------------------------
.text:00008EBA                 align 4
.text:00008EBA _text           ends
.text:00008EBA
.text:00008EBC ; ===========================================================================
.text:00008EBC
.text:00008EBC ; Segment type: Pure code
.text:00008EBC ; Segment permissions: Read/Execute
.text:00008EBC _text           segment para public 'CODE' use32
.text:00008EBC                 assume cs:_text
.text:00008EBC                 ;org 8EBCh
.text:00008EBC ; COMDAT (pick any)
.text:00008EBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008EBC
.text:00008EBC ; =============== S U B R O U T I N E =======================================
.text:00008EBC
.text:00008EBC ; Attributes: bp-based frame
.text:00008EBC
.text:00008EBC ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:00008EBC                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:00008EBC ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:00008EBC                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+14EDp
.text:00008EBC                                         ; NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6C5p ...
.text:00008EBC
.text:00008EBC var_4           = dword ptr -4
.text:00008EBC
.text:00008EBC                 push    ebp
.text:00008EBD                 mov     ebp, esp
.text:00008EBF                 push    ecx
.text:00008EC0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008EC7                 mov     [ebp+var_4], ecx
.text:00008ECA                 mov     eax, [ebp+var_4]
.text:00008ECD                 mov     eax, [eax]
.text:00008ECF                 mov     esp, ebp
.text:00008ED1                 pop     ebp
.text:00008ED2                 retn
.text:00008ED2 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:00008ED2
.text:00008ED2 ; ---------------------------------------------------------------------------
.text:00008ED3                 align 4
.text:00008ED3 _text           ends
.text:00008ED3
.text:00008ED4 ; ===========================================================================
.text:00008ED4
.text:00008ED4 ; Segment type: Pure code
.text:00008ED4 ; Segment permissions: Read/Execute
.text:00008ED4 _text           segment para public 'CODE' use32
.text:00008ED4                 assume cs:_text
.text:00008ED4                 ;org 8ED4h
.text:00008ED4 ; COMDAT (pick any)
.text:00008ED4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008ED4
.text:00008ED4 ; =============== S U B R O U T I N E =======================================
.text:00008ED4
.text:00008ED4 ; Attributes: bp-based frame
.text:00008ED4
.text:00008ED4 ; public: struct ISequentialOutStream * * __thiscall CMyComPtr<struct ISequentialOutStream>::operator&(void)
.text:00008ED4                 public ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
.text:00008ED4 ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ proc near
.text:00008ED4                                         ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+477p
.text:00008ED4
.text:00008ED4 var_4           = dword ptr -4
.text:00008ED4
.text:00008ED4                 push    ebp
.text:00008ED5                 mov     ebp, esp
.text:00008ED7                 push    ecx
.text:00008ED8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008EDF                 mov     [ebp+var_4], ecx
.text:00008EE2                 mov     eax, [ebp+var_4]
.text:00008EE5                 mov     esp, ebp
.text:00008EE7                 pop     ebp
.text:00008EE8                 retn
.text:00008EE8 ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ endp
.text:00008EE8
.text:00008EE8 ; ---------------------------------------------------------------------------
.text:00008EE9                 align 4
.text:00008EE9 _text           ends
.text:00008EE9
.text:00008EEC ; ===========================================================================
.text:00008EEC
.text:00008EEC ; Segment type: Pure code
.text:00008EEC ; Segment permissions: Read/Execute
.text:00008EEC _text           segment para public 'CODE' use32
.text:00008EEC                 assume cs:_text
.text:00008EEC                 ;org 8EECh
.text:00008EEC ; COMDAT (pick any)
.text:00008EEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008EEC
.text:00008EEC ; =============== S U B R O U T I N E =======================================
.text:00008EEC
.text:00008EEC ; Attributes: bp-based frame
.text:00008EEC
.text:00008EEC ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator=(struct ISequentialOutStream *)
.text:00008EEC                 public ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
.text:00008EEC ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z proc near
.text:00008EEC                                         ; CODE XREF: COutStreamWithCRC::SetStream(ISequentialOutStream *)+18p
.text:00008EEC
.text:00008EEC var_4           = dword ptr -4
.text:00008EEC arg_0           = dword ptr  8
.text:00008EEC
.text:00008EEC                 push    ebp
.text:00008EED                 mov     ebp, esp
.text:00008EEF                 push    ecx
.text:00008EF0                 push    esi
.text:00008EF1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008EF8                 mov     [ebp+var_4], ecx
.text:00008EFB                 cmp     [ebp+arg_0], 0
.text:00008EFF                 jz      short loc_8F18
.text:00008F01                 mov     eax, [ebp+arg_0]
.text:00008F04                 mov     ecx, [eax]
.text:00008F06                 mov     esi, esp
.text:00008F08                 mov     edx, [ebp+arg_0]
.text:00008F0B                 push    edx
.text:00008F0C                 mov     eax, [ecx+4]
.text:00008F0F                 call    eax
.text:00008F11                 cmp     esi, esp
.text:00008F13                 call    __RTC_CheckEsp
.text:00008F18
.text:00008F18 loc_8F18:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+13j
.text:00008F18                 mov     ecx, [ebp+var_4]
.text:00008F1B                 cmp     dword ptr [ecx], 0
.text:00008F1E                 jz      short loc_8F3B
.text:00008F20                 mov     edx, [ebp+var_4]
.text:00008F23                 mov     eax, [edx]
.text:00008F25                 mov     ecx, [ebp+var_4]
.text:00008F28                 mov     edx, [ecx]
.text:00008F2A                 mov     eax, [eax]
.text:00008F2C                 mov     esi, esp
.text:00008F2E                 push    edx
.text:00008F2F                 mov     ecx, [eax+8]
.text:00008F32                 call    ecx
.text:00008F34                 cmp     esi, esp
.text:00008F36                 call    __RTC_CheckEsp
.text:00008F3B
.text:00008F3B loc_8F3B:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+32j
.text:00008F3B                 mov     edx, [ebp+var_4]
.text:00008F3E                 mov     eax, [ebp+arg_0]
.text:00008F41                 mov     [edx], eax
.text:00008F43                 mov     eax, [ebp+arg_0]
.text:00008F46                 pop     esi
.text:00008F47                 add     esp, 4
.text:00008F4A                 cmp     ebp, esp
.text:00008F4C                 call    __RTC_CheckEsp
.text:00008F51                 mov     esp, ebp
.text:00008F53                 pop     ebp
.text:00008F54                 retn    4
.text:00008F54 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z endp
.text:00008F54
.text:00008F54 ; ---------------------------------------------------------------------------
.text:00008F57                 align 4
.text:00008F57 _text           ends
.text:00008F57
.text:00008F58 ; ===========================================================================
.text:00008F58
.text:00008F58 ; Segment type: Pure code
.text:00008F58 ; Segment permissions: Read/Execute
.text:00008F58 _text           segment para public 'CODE' use32
.text:00008F58                 assume cs:_text
.text:00008F58                 ;org 8F58h
.text:00008F58 ; COMDAT (pick any)
.text:00008F58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008F58
.text:00008F58 ; =============== S U B R O U T I N E =======================================
.text:00008F58
.text:00008F58 ; Attributes: bp-based frame
.text:00008F58
.text:00008F58 ; public: bool __thiscall CMyComPtr<struct ISequentialOutStream>::operator!(void)const
.text:00008F58                 public ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
.text:00008F58 ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ proc near
.text:00008F58                                         ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+9EAp
.text:00008F58
.text:00008F58 var_4           = dword ptr -4
.text:00008F58
.text:00008F58                 push    ebp
.text:00008F59                 mov     ebp, esp
.text:00008F5B                 push    ecx
.text:00008F5C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008F63                 mov     [ebp+var_4], ecx
.text:00008F66                 mov     eax, [ebp+var_4]
.text:00008F69                 xor     ecx, ecx
.text:00008F6B                 cmp     dword ptr [eax], 0
.text:00008F6E                 setz    cl
.text:00008F71                 mov     al, cl
.text:00008F73                 mov     esp, ebp
.text:00008F75                 pop     ebp
.text:00008F76                 retn
.text:00008F76 ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ endp
.text:00008F76
.text:00008F76 ; ---------------------------------------------------------------------------
.text:00008F77                 align 4
.text:00008F77 _text           ends
.text:00008F77
.text:00008F78 ; ===========================================================================
.text:00008F78
.text:00008F78 ; Segment type: Pure code
.text:00008F78 ; Segment permissions: Read/Execute
.text:00008F78 _text           segment para public 'CODE' use32
.text:00008F78                 assume cs:_text
.text:00008F78                 ;org 8F78h
.text:00008F78 ; COMDAT (pick any)
.text:00008F78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008F78
.text:00008F78 ; =============== S U B R O U T I N E =======================================
.text:00008F78
.text:00008F78 ; Attributes: bp-based frame
.text:00008F78
.text:00008F78 ; public: __thiscall CMyComPtr<struct ICryptoSetPassword>::CMyComPtr<struct ICryptoSetPassword>(void)
.text:00008F78                 public ??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ
.text:00008F78 ??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ proc near
.text:00008F78                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+51Ep
.text:00008F78
.text:00008F78 var_4           = dword ptr -4
.text:00008F78
.text:00008F78                 push    ebp
.text:00008F79                 mov     ebp, esp
.text:00008F7B                 push    ecx
.text:00008F7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008F83                 mov     [ebp+var_4], ecx
.text:00008F86                 mov     eax, [ebp+var_4]
.text:00008F89                 mov     dword ptr [eax], 0
.text:00008F8F                 mov     eax, [ebp+var_4]
.text:00008F92                 mov     esp, ebp
.text:00008F94                 pop     ebp
.text:00008F95                 retn
.text:00008F95 ??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ endp
.text:00008F95
.text:00008F95 ; ---------------------------------------------------------------------------
.text:00008F96                 align 4
.text:00008F96 _text           ends
.text:00008F96
.text:00008F98 ; ===========================================================================
.text:00008F98
.text:00008F98 ; Segment type: Pure code
.text:00008F98 ; Segment permissions: Read/Execute
.text:00008F98 _text           segment para public 'CODE' use32
.text:00008F98                 assume cs:_text
.text:00008F98                 ;org 8F98h
.text:00008F98 ; COMDAT (pick any)
.text:00008F98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008F98
.text:00008F98 ; =============== S U B R O U T I N E =======================================
.text:00008F98
.text:00008F98 ; Attributes: bp-based frame
.text:00008F98
.text:00008F98 ; public: __thiscall CMyComPtr<struct ICryptoSetPassword>::~CMyComPtr<struct ICryptoSetPassword>(void)
.text:00008F98                 public ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ
.text:00008F98 ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ proc near
.text:00008F98                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+565p
.text:00008F98                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+671p ...
.text:00008F98
.text:00008F98 var_4           = dword ptr -4
.text:00008F98
.text:00008F98                 push    ebp
.text:00008F99                 mov     ebp, esp
.text:00008F9B                 push    ecx
.text:00008F9C                 push    esi
.text:00008F9D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008FA4                 mov     [ebp+var_4], ecx
.text:00008FA7                 mov     eax, [ebp+var_4]
.text:00008FAA                 cmp     dword ptr [eax], 0
.text:00008FAD                 jz      short loc_8FCA
.text:00008FAF                 mov     ecx, [ebp+var_4]
.text:00008FB2                 mov     edx, [ecx]
.text:00008FB4                 mov     eax, [ebp+var_4]
.text:00008FB7                 mov     ecx, [eax]
.text:00008FB9                 mov     edx, [edx]
.text:00008FBB                 mov     esi, esp
.text:00008FBD                 push    ecx
.text:00008FBE                 mov     eax, [edx+8]
.text:00008FC1                 call    eax
.text:00008FC3                 cmp     esi, esp
.text:00008FC5                 call    __RTC_CheckEsp
.text:00008FCA
.text:00008FCA loc_8FCA:                               ; CODE XREF: CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)+15j
.text:00008FCA                 pop     esi
.text:00008FCB                 add     esp, 4
.text:00008FCE                 cmp     ebp, esp
.text:00008FD0                 call    __RTC_CheckEsp
.text:00008FD5                 mov     esp, ebp
.text:00008FD7                 pop     ebp
.text:00008FD8                 retn
.text:00008FD8 ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ endp
.text:00008FD8
.text:00008FD8 ; ---------------------------------------------------------------------------
.text:00008FD9                 align 4
.text:00008FD9 _text           ends
.text:00008FD9
.text:00008FDC ; ===========================================================================
.text:00008FDC
.text:00008FDC ; Segment type: Pure code
.text:00008FDC ; Segment permissions: Read/Execute
.text:00008FDC _text           segment para public 'CODE' use32
.text:00008FDC                 assume cs:_text
.text:00008FDC                 ;org 8FDCh
.text:00008FDC ; COMDAT (pick any)
.text:00008FDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008FDC
.text:00008FDC ; =============== S U B R O U T I N E =======================================
.text:00008FDC
.text:00008FDC ; Attributes: bp-based frame
.text:00008FDC
.text:00008FDC ; public: struct ICryptoSetPassword * * __thiscall CMyComPtr<struct ICryptoSetPassword>::operator&(void)
.text:00008FDC                 public ??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ
.text:00008FDC ??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ proc near
.text:00008FDC                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+52Dp
.text:00008FDC
.text:00008FDC var_4           = dword ptr -4
.text:00008FDC
.text:00008FDC                 push    ebp
.text:00008FDD                 mov     ebp, esp
.text:00008FDF                 push    ecx
.text:00008FE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008FE7                 mov     [ebp+var_4], ecx
.text:00008FEA                 mov     eax, [ebp+var_4]
.text:00008FED                 mov     esp, ebp
.text:00008FEF                 pop     ebp
.text:00008FF0                 retn
.text:00008FF0 ??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ endp
.text:00008FF0
.text:00008FF0 ; ---------------------------------------------------------------------------
.text:00008FF1                 align 4
.text:00008FF1 _text           ends
.text:00008FF1
.text:00008FF4 ; ===========================================================================
.text:00008FF4
.text:00008FF4 ; Segment type: Pure code
.text:00008FF4 ; Segment permissions: Read/Execute
.text:00008FF4 _text           segment para public 'CODE' use32
.text:00008FF4                 assume cs:_text
.text:00008FF4                 ;org 8FF4h
.text:00008FF4 ; COMDAT (pick any)
.text:00008FF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008FF4
.text:00008FF4 ; =============== S U B R O U T I N E =======================================
.text:00008FF4
.text:00008FF4 ; Attributes: bp-based frame
.text:00008FF4
.text:00008FF4 ; public: struct ICryptoSetPassword * __thiscall CMyComPtr<struct ICryptoSetPassword>::operator->(void)const
.text:00008FF4                 public ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ
.text:00008FF4 ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ proc near
.text:00008FF4                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+7DAp
.text:00008FF4                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+8C7p
.text:00008FF4
.text:00008FF4 var_4           = dword ptr -4
.text:00008FF4
.text:00008FF4                 push    ebp
.text:00008FF5                 mov     ebp, esp
.text:00008FF7                 push    ecx
.text:00008FF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008FFF                 mov     [ebp+var_4], ecx
.text:00009002                 mov     eax, [ebp+var_4]
.text:00009005                 mov     eax, [eax]
.text:00009007                 mov     esp, ebp
.text:00009009                 pop     ebp
.text:0000900A                 retn
.text:0000900A ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ endp
.text:0000900A
.text:0000900A ; ---------------------------------------------------------------------------
.text:0000900B                 align 4
.text:0000900B _text           ends
.text:0000900B
.text:0000900C ; ===========================================================================
.text:0000900C
.text:0000900C ; Segment type: Pure code
.text:0000900C ; Segment permissions: Read/Execute
.text:0000900C _text           segment para public 'CODE' use32
.text:0000900C                 assume cs:_text
.text:0000900C                 ;org 900Ch
.text:0000900C ; COMDAT (pick any)
.text:0000900C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000900C
.text:0000900C ; =============== S U B R O U T I N E =======================================
.text:0000900C
.text:0000900C ; Attributes: bp-based frame
.text:0000900C
.text:0000900C ; public: __thiscall CMyComPtr<struct ICompressSetDecoderProperties2>::CMyComPtr<struct ICompressSetDecoderProperties2>(void)
.text:0000900C                 public ??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ
.text:0000900C ??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ proc near
.text:0000900C                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+E3Fp
.text:0000900C
.text:0000900C var_4           = dword ptr -4
.text:0000900C
.text:0000900C                 push    ebp
.text:0000900D                 mov     ebp, esp
.text:0000900F                 push    ecx
.text:00009010                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009017                 mov     [ebp+var_4], ecx
.text:0000901A                 mov     eax, [ebp+var_4]
.text:0000901D                 mov     dword ptr [eax], 0
.text:00009023                 mov     eax, [ebp+var_4]
.text:00009026                 mov     esp, ebp
.text:00009028                 pop     ebp
.text:00009029                 retn
.text:00009029 ??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ endp
.text:00009029
.text:00009029 ; ---------------------------------------------------------------------------
.text:0000902A                 align 4
.text:0000902A _text           ends
.text:0000902A
.text:0000902C ; ===========================================================================
.text:0000902C
.text:0000902C ; Segment type: Pure code
.text:0000902C ; Segment permissions: Read/Execute
.text:0000902C _text           segment para public 'CODE' use32
.text:0000902C                 assume cs:_text
.text:0000902C                 ;org 902Ch
.text:0000902C ; COMDAT (pick any)
.text:0000902C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000902C
.text:0000902C ; =============== S U B R O U T I N E =======================================
.text:0000902C
.text:0000902C ; Attributes: bp-based frame
.text:0000902C
.text:0000902C ; public: __thiscall CMyComPtr<struct ICompressSetDecoderProperties2>::~CMyComPtr<struct ICompressSetDecoderProperties2>(void)
.text:0000902C                 public ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ
.text:0000902C ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ proc near
.text:0000902C                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+EEFp
.text:0000902C                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+F3Cp ...
.text:0000902C
.text:0000902C var_4           = dword ptr -4
.text:0000902C
.text:0000902C                 push    ebp
.text:0000902D                 mov     ebp, esp
.text:0000902F                 push    ecx
.text:00009030                 push    esi
.text:00009031                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009038                 mov     [ebp+var_4], ecx
.text:0000903B                 mov     eax, [ebp+var_4]
.text:0000903E                 cmp     dword ptr [eax], 0
.text:00009041                 jz      short loc_905E
.text:00009043                 mov     ecx, [ebp+var_4]
.text:00009046                 mov     edx, [ecx]
.text:00009048                 mov     eax, [ebp+var_4]
.text:0000904B                 mov     ecx, [eax]
.text:0000904D                 mov     edx, [edx]
.text:0000904F                 mov     esi, esp
.text:00009051                 push    ecx
.text:00009052                 mov     eax, [edx+8]
.text:00009055                 call    eax
.text:00009057                 cmp     esi, esp
.text:00009059                 call    __RTC_CheckEsp
.text:0000905E
.text:0000905E loc_905E:                               ; CODE XREF: CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>(void)+15j
.text:0000905E                 pop     esi
.text:0000905F                 add     esp, 4
.text:00009062                 cmp     ebp, esp
.text:00009064                 call    __RTC_CheckEsp
.text:00009069                 mov     esp, ebp
.text:0000906B                 pop     ebp
.text:0000906C                 retn
.text:0000906C ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ endp
.text:0000906C
.text:0000906C ; ---------------------------------------------------------------------------
.text:0000906D                 align 10h
.text:0000906D _text           ends
.text:0000906D
.text:00009070 ; ===========================================================================
.text:00009070
.text:00009070 ; Segment type: Pure code
.text:00009070 ; Segment permissions: Read/Execute
.text:00009070 _text           segment para public 'CODE' use32
.text:00009070                 assume cs:_text
.text:00009070                 ;org 9070h
.text:00009070 ; COMDAT (pick any)
.text:00009070                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009070
.text:00009070 ; =============== S U B R O U T I N E =======================================
.text:00009070
.text:00009070 ; Attributes: bp-based frame
.text:00009070
.text:00009070 ; public: __thiscall CMyComPtr<struct ICompressSetDecoderProperties2>::operator struct ICompressSetDecoderProperties2 *(void)const
.text:00009070                 public ??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ
.text:00009070 ??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ proc near
.text:00009070                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+E7Bp
.text:00009070
.text:00009070 var_4           = dword ptr -4
.text:00009070
.text:00009070                 push    ebp
.text:00009071                 mov     ebp, esp
.text:00009073                 push    ecx
.text:00009074                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000907B                 mov     [ebp+var_4], ecx
.text:0000907E                 mov     eax, [ebp+var_4]
.text:00009081                 mov     eax, [eax]
.text:00009083                 mov     esp, ebp
.text:00009085                 pop     ebp
.text:00009086                 retn
.text:00009086 ??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ endp
.text:00009086
.text:00009086 ; ---------------------------------------------------------------------------
.text:00009087                 align 4
.text:00009087 _text           ends
.text:00009087
.text:00009088 ; ===========================================================================
.text:00009088
.text:00009088 ; Segment type: Pure code
.text:00009088 ; Segment permissions: Read/Execute
.text:00009088 _text           segment para public 'CODE' use32
.text:00009088                 assume cs:_text
.text:00009088                 ;org 9088h
.text:00009088 ; COMDAT (pick any)
.text:00009088                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009088
.text:00009088 ; =============== S U B R O U T I N E =======================================
.text:00009088
.text:00009088 ; Attributes: bp-based frame
.text:00009088
.text:00009088 ; public: struct ICompressSetDecoderProperties2 * * __thiscall CMyComPtr<struct ICompressSetDecoderProperties2>::operator&(void)
.text:00009088                 public ??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ
.text:00009088 ??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ proc near
.text:00009088                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+E4Ep
.text:00009088
.text:00009088 var_4           = dword ptr -4
.text:00009088
.text:00009088                 push    ebp
.text:00009089                 mov     ebp, esp
.text:0000908B                 push    ecx
.text:0000908C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009093                 mov     [ebp+var_4], ecx
.text:00009096                 mov     eax, [ebp+var_4]
.text:00009099                 mov     esp, ebp
.text:0000909B                 pop     ebp
.text:0000909C                 retn
.text:0000909C ??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ endp
.text:0000909C
.text:0000909C ; ---------------------------------------------------------------------------
.text:0000909D                 align 10h
.text:0000909D _text           ends
.text:0000909D
.text:000090A0 ; ===========================================================================
.text:000090A0
.text:000090A0 ; Segment type: Pure code
.text:000090A0 ; Segment permissions: Read/Execute
.text:000090A0 _text           segment para public 'CODE' use32
.text:000090A0                 assume cs:_text
.text:000090A0                 ;org 90A0h
.text:000090A0 ; COMDAT (pick any)
.text:000090A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000090A0
.text:000090A0 ; =============== S U B R O U T I N E =======================================
.text:000090A0
.text:000090A0 ; Attributes: bp-based frame
.text:000090A0
.text:000090A0 ; public: struct ICompressSetDecoderProperties2 * __thiscall CMyComPtr<struct ICompressSetDecoderProperties2>::operator->(void)const
.text:000090A0                 public ??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ
.text:000090A0 ??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ proc near
.text:000090A0                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+E99p
.text:000090A0
.text:000090A0 var_4           = dword ptr -4
.text:000090A0
.text:000090A0                 push    ebp
.text:000090A1                 mov     ebp, esp
.text:000090A3                 push    ecx
.text:000090A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000090AB                 mov     [ebp+var_4], ecx
.text:000090AE                 mov     eax, [ebp+var_4]
.text:000090B1                 mov     eax, [eax]
.text:000090B3                 mov     esp, ebp
.text:000090B5                 pop     ebp
.text:000090B6                 retn
.text:000090B6 ??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ endp
.text:000090B6
.text:000090B6 ; ---------------------------------------------------------------------------
.text:000090B7                 align 4
.text:000090B7 _text           ends
.text:000090B7
.text:000090B8 ; ===========================================================================
.text:000090B8
.text:000090B8 ; Segment type: Pure code
.text:000090B8 ; Segment permissions: Read/Execute
.text:000090B8 _text           segment para public 'CODE' use32
.text:000090B8                 assume cs:_text
.text:000090B8                 ;org 90B8h
.text:000090B8 ; COMDAT (pick any)
.text:000090B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000090B8
.text:000090B8 ; =============== S U B R O U T I N E =======================================
.text:000090B8
.text:000090B8 ; Attributes: bp-based frame
.text:000090B8
.text:000090B8 ; public: __thiscall CMyComPtr<struct ICompressFilter>::CMyComPtr<struct ICompressFilter>(void)
.text:000090B8                 public ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ
.text:000090B8 ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ proc near
.text:000090B8                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+25Ap
.text:000090B8                                         ; NArchive::NZip::CZipDecoder::CZipDecoder(void)+50p ...
.text:000090B8
.text:000090B8 var_4           = dword ptr -4
.text:000090B8
.text:000090B8                 push    ebp
.text:000090B9                 mov     ebp, esp
.text:000090BB                 push    ecx
.text:000090BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000090C3                 mov     [ebp+var_4], ecx
.text:000090C6                 mov     eax, [ebp+var_4]
.text:000090C9                 mov     dword ptr [eax], 0
.text:000090CF                 mov     eax, [ebp+var_4]
.text:000090D2                 mov     esp, ebp
.text:000090D4                 pop     ebp
.text:000090D5                 retn
.text:000090D5 ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ endp
.text:000090D5
.text:000090D5 ; ---------------------------------------------------------------------------
.text:000090D6                 align 4
.text:000090D6 _text           ends
.text:000090D6
.text:000090D8 ; ===========================================================================
.text:000090D8
.text:000090D8 ; Segment type: Pure code
.text:000090D8 ; Segment permissions: Read/Execute
.text:000090D8 _text           segment para public 'CODE' use32
.text:000090D8                 assume cs:_text
.text:000090D8                 ;org 90D8h
.text:000090D8 ; COMDAT (pick any)
.text:000090D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000090D8
.text:000090D8 ; =============== S U B R O U T I N E =======================================
.text:000090D8
.text:000090D8 ; Attributes: bp-based frame
.text:000090D8
.text:000090D8 ; public: __thiscall CMyComPtr<struct ICompressFilter>::~CMyComPtr<struct ICompressFilter>(void)
.text:000090D8                 public ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ
.text:000090D8 ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ proc near
.text:000090D8                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+2B7p
.text:000090D8                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+3B8p ...
.text:000090D8
.text:000090D8 var_4           = dword ptr -4
.text:000090D8
.text:000090D8                 push    ebp
.text:000090D9                 mov     ebp, esp
.text:000090DB                 push    ecx
.text:000090DC                 push    esi
.text:000090DD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000090E4                 mov     [ebp+var_4], ecx
.text:000090E7                 mov     eax, [ebp+var_4]
.text:000090EA                 cmp     dword ptr [eax], 0
.text:000090ED                 jz      short loc_910A
.text:000090EF                 mov     ecx, [ebp+var_4]
.text:000090F2                 mov     edx, [ecx]
.text:000090F4                 mov     eax, [ebp+var_4]
.text:000090F7                 mov     ecx, [eax]
.text:000090F9                 mov     edx, [edx]
.text:000090FB                 mov     esi, esp
.text:000090FD                 push    ecx
.text:000090FE                 mov     eax, [edx+8]
.text:00009101                 call    eax
.text:00009103                 cmp     esi, esp
.text:00009105                 call    __RTC_CheckEsp
.text:0000910A
.text:0000910A loc_910A:                               ; CODE XREF: CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)+15j
.text:0000910A                 pop     esi
.text:0000910B                 add     esp, 4
.text:0000910E                 cmp     ebp, esp
.text:00009110                 call    __RTC_CheckEsp
.text:00009115                 mov     esp, ebp
.text:00009117                 pop     ebp
.text:00009118                 retn
.text:00009118 ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ endp
.text:00009118
.text:00009118 ; ---------------------------------------------------------------------------
.text:00009119                 align 4
.text:00009119 _text           ends
.text:00009119
.text:0000911C ; ===========================================================================
.text:0000911C
.text:0000911C ; Segment type: Pure code
.text:0000911C ; Segment permissions: Read/Execute
.text:0000911C _text           segment para public 'CODE' use32
.text:0000911C                 assume cs:_text
.text:0000911C                 ;org 911Ch
.text:0000911C ; COMDAT (pick any)
.text:0000911C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000911C
.text:0000911C ; =============== S U B R O U T I N E =======================================
.text:0000911C
.text:0000911C ; Attributes: bp-based frame
.text:0000911C
.text:0000911C ; public: struct ICompressFilter * __thiscall CMyComPtr<struct ICompressFilter>::operator=(struct ICompressFilter *)
.text:0000911C                 public ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z
.text:0000911C ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z proc near
.text:0000911C                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+370p
.text:0000911C                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+478p ...
.text:0000911C
.text:0000911C var_4           = dword ptr -4
.text:0000911C arg_0           = dword ptr  8
.text:0000911C
.text:0000911C                 push    ebp
.text:0000911D                 mov     ebp, esp
.text:0000911F                 push    ecx
.text:00009120                 push    esi
.text:00009121                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009128                 mov     [ebp+var_4], ecx
.text:0000912B                 cmp     [ebp+arg_0], 0
.text:0000912F                 jz      short loc_9148
.text:00009131                 mov     eax, [ebp+arg_0]
.text:00009134                 mov     ecx, [eax]
.text:00009136                 mov     esi, esp
.text:00009138                 mov     edx, [ebp+arg_0]
.text:0000913B                 push    edx
.text:0000913C                 mov     eax, [ecx+4]
.text:0000913F                 call    eax
.text:00009141                 cmp     esi, esp
.text:00009143                 call    __RTC_CheckEsp
.text:00009148
.text:00009148 loc_9148:                               ; CODE XREF: CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)+13j
.text:00009148                 mov     ecx, [ebp+var_4]
.text:0000914B                 cmp     dword ptr [ecx], 0
.text:0000914E                 jz      short loc_916B
.text:00009150                 mov     edx, [ebp+var_4]
.text:00009153                 mov     eax, [edx]
.text:00009155                 mov     ecx, [ebp+var_4]
.text:00009158                 mov     edx, [ecx]
.text:0000915A                 mov     eax, [eax]
.text:0000915C                 mov     esi, esp
.text:0000915E                 push    edx
.text:0000915F                 mov     ecx, [eax+8]
.text:00009162                 call    ecx
.text:00009164                 cmp     esi, esp
.text:00009166                 call    __RTC_CheckEsp
.text:0000916B
.text:0000916B loc_916B:                               ; CODE XREF: CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)+32j
.text:0000916B                 mov     edx, [ebp+var_4]
.text:0000916E                 mov     eax, [ebp+arg_0]
.text:00009171                 mov     [edx], eax
.text:00009173                 mov     eax, [ebp+arg_0]
.text:00009176                 pop     esi
.text:00009177                 add     esp, 4
.text:0000917A                 cmp     ebp, esp
.text:0000917C                 call    __RTC_CheckEsp
.text:00009181                 mov     esp, ebp
.text:00009183                 pop     ebp
.text:00009184                 retn    4
.text:00009184 ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z endp
.text:00009184
.text:00009184 ; ---------------------------------------------------------------------------
.text:00009187                 align 4
.text:00009187 _text           ends
.text:00009187
.text:00009188 ; ===========================================================================
.text:00009188
.text:00009188 ; Segment type: Pure code
.text:00009188 ; Segment permissions: Read/Execute
.text:00009188 _text           segment para public 'CODE' use32
.text:00009188                 assume cs:_text
.text:00009188                 ;org 9188h
.text:00009188 ; COMDAT (pick any)
.text:00009188                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009188
.text:00009188 ; =============== S U B R O U T I N E =======================================
.text:00009188
.text:00009188 ; Attributes: bp-based frame
.text:00009188
.text:00009188 ; public: struct ICompressFilter * __thiscall CMyComPtr<struct ICompressFilter>::operator=(class CMyComPtr<struct ICompressFilter> const &)
.text:00009188                 public ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z
.text:00009188 ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z proc near
.text:00009188                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+37Fp
.text:00009188                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+487p ...
.text:00009188
.text:00009188 var_4           = dword ptr -4
.text:00009188 arg_0           = dword ptr  8
.text:00009188
.text:00009188                 push    ebp
.text:00009189                 mov     ebp, esp
.text:0000918B                 push    ecx
.text:0000918C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009193                 mov     [ebp+var_4], ecx
.text:00009196                 mov     eax, [ebp+arg_0]
.text:00009199                 mov     ecx, [eax]
.text:0000919B                 push    ecx
.text:0000919C                 mov     ecx, [ebp+var_4]
.text:0000919F                 call    ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)
.text:000091A4                 add     esp, 4
.text:000091A7                 cmp     ebp, esp
.text:000091A9                 call    __RTC_CheckEsp
.text:000091AE                 mov     esp, ebp
.text:000091B0                 pop     ebp
.text:000091B1                 retn    4
.text:000091B1 ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z endp
.text:000091B1
.text:000091B1 _text           ends
.text:000091B1
.text:000091B4 ; ===========================================================================
.text:000091B4
.text:000091B4 ; Segment type: Pure code
.text:000091B4 ; Segment permissions: Read/Execute
.text:000091B4 _text           segment para public 'CODE' use32
.text:000091B4                 assume cs:_text
.text:000091B4                 ;org 91B4h
.text:000091B4 ; COMDAT (pick any)
.text:000091B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000091B4
.text:000091B4 ; =============== S U B R O U T I N E =======================================
.text:000091B4
.text:000091B4 ; Attributes: bp-based frame
.text:000091B4
.text:000091B4 ; public: bool __thiscall CMyComPtr<struct ICompressFilter>::operator!(void)const
.text:000091B4                 public ??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ
.text:000091B4 ??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ proc near
.text:000091B4                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+2FEp
.text:000091B4                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+406p ...
.text:000091B4
.text:000091B4 var_4           = dword ptr -4
.text:000091B4
.text:000091B4                 push    ebp
.text:000091B5                 mov     ebp, esp
.text:000091B7                 push    ecx
.text:000091B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000091BF                 mov     [ebp+var_4], ecx
.text:000091C2                 mov     eax, [ebp+var_4]
.text:000091C5                 xor     ecx, ecx
.text:000091C7                 cmp     dword ptr [eax], 0
.text:000091CA                 setz    cl
.text:000091CD                 mov     al, cl
.text:000091CF                 mov     esp, ebp
.text:000091D1                 pop     ebp
.text:000091D2                 retn
.text:000091D2 ??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ endp
.text:000091D2
.text:000091D2 ; ---------------------------------------------------------------------------
.text:000091D3                 align 4
.text:000091D3 _text           ends
.text:000091D3
.text:000091D4 ; ===========================================================================
.text:000091D4
.text:000091D4 ; Segment type: Pure code
.text:000091D4 ; Segment permissions: Read/Execute
.text:000091D4 _text           segment para public 'CODE' use32
.text:000091D4                 assume cs:_text
.text:000091D4                 ;org 91D4h
.text:000091D4 ; COMDAT (pick any)
.text:000091D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000091D4
.text:000091D4 ; =============== S U B R O U T I N E =======================================
.text:000091D4
.text:000091D4 ; Attributes: bp-based frame
.text:000091D4
.text:000091D4 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::CMyComPtr<struct ICompressProgressInfo>(struct ICompressProgressInfo *)
.text:000091D4                 public ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
.text:000091D4 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z proc near
.text:000091D4                                         ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+23Fp
.text:000091D4
.text:000091D4 var_4           = dword ptr -4
.text:000091D4 arg_0           = dword ptr  8
.text:000091D4
.text:000091D4                 push    ebp
.text:000091D5                 mov     ebp, esp
.text:000091D7                 push    ecx
.text:000091D8                 push    esi
.text:000091D9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000091E0                 mov     [ebp+var_4], ecx
.text:000091E3                 mov     eax, [ebp+var_4]
.text:000091E6                 mov     ecx, [ebp+arg_0]
.text:000091E9                 mov     [eax], ecx
.text:000091EB                 cmp     [ebp+arg_0], 0
.text:000091EF                 jz      short loc_9208
.text:000091F1                 mov     edx, [ebp+arg_0]
.text:000091F4                 mov     eax, [edx]
.text:000091F6                 mov     esi, esp
.text:000091F8                 mov     ecx, [ebp+arg_0]
.text:000091FB                 push    ecx
.text:000091FC                 mov     edx, [eax+4]
.text:000091FF                 call    edx
.text:00009201                 cmp     esi, esp
.text:00009203                 call    __RTC_CheckEsp
.text:00009208
.text:00009208 loc_9208:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)+1Bj
.text:00009208                 mov     eax, [ebp+var_4]
.text:0000920B                 pop     esi
.text:0000920C                 add     esp, 4
.text:0000920F                 cmp     ebp, esp
.text:00009211                 call    __RTC_CheckEsp
.text:00009216                 mov     esp, ebp
.text:00009218                 pop     ebp
.text:00009219                 retn    4
.text:00009219 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z endp
.text:00009219
.text:00009219 _text           ends
.text:00009219
.text:0000921C ; ===========================================================================
.text:0000921C
.text:0000921C ; Segment type: Pure code
.text:0000921C ; Segment permissions: Read/Execute
.text:0000921C _text           segment para public 'CODE' use32
.text:0000921C                 assume cs:_text
.text:0000921C                 ;org 921Ch
.text:0000921C ; COMDAT (pick any)
.text:0000921C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000921C
.text:0000921C ; =============== S U B R O U T I N E =======================================
.text:0000921C
.text:0000921C ; Attributes: bp-based frame
.text:0000921C
.text:0000921C ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::~CMyComPtr<struct ICompressProgressInfo>(void)
.text:0000921C                 public ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
.text:0000921C ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
.text:0000921C                                         ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+323p
.text:0000921C                                         ; NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4FDp ...
.text:0000921C
.text:0000921C var_4           = dword ptr -4
.text:0000921C
.text:0000921C                 push    ebp
.text:0000921D                 mov     ebp, esp
.text:0000921F                 push    ecx
.text:00009220                 push    esi
.text:00009221                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009228                 mov     [ebp+var_4], ecx
.text:0000922B                 mov     eax, [ebp+var_4]
.text:0000922E                 cmp     dword ptr [eax], 0
.text:00009231                 jz      short loc_924E
.text:00009233                 mov     ecx, [ebp+var_4]
.text:00009236                 mov     edx, [ecx]
.text:00009238                 mov     eax, [ebp+var_4]
.text:0000923B                 mov     ecx, [eax]
.text:0000923D                 mov     edx, [edx]
.text:0000923F                 mov     esi, esp
.text:00009241                 push    ecx
.text:00009242                 mov     eax, [edx+8]
.text:00009245                 call    eax
.text:00009247                 cmp     esi, esp
.text:00009249                 call    __RTC_CheckEsp
.text:0000924E
.text:0000924E loc_924E:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)+15j
.text:0000924E                 pop     esi
.text:0000924F                 add     esp, 4
.text:00009252                 cmp     ebp, esp
.text:00009254                 call    __RTC_CheckEsp
.text:00009259                 mov     esp, ebp
.text:0000925B                 pop     ebp
.text:0000925C                 retn
.text:0000925C ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ endp
.text:0000925C
.text:0000925C ; ---------------------------------------------------------------------------
.text:0000925D                 align 10h
.text:0000925D _text           ends
.text:0000925D
.text:00009260 ; ===========================================================================
.text:00009260
.text:00009260 ; Segment type: Pure code
.text:00009260 ; Segment permissions: Read/Execute
.text:00009260 _text           segment para public 'CODE' use32
.text:00009260                 assume cs:_text
.text:00009260                 ;org 9260h
.text:00009260 ; COMDAT (pick any)
.text:00009260                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009260
.text:00009260 ; =============== S U B R O U T I N E =======================================
.text:00009260
.text:00009260 ; Attributes: bp-based frame
.text:00009260
.text:00009260 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::operator struct ICompressProgressInfo *(void)const
.text:00009260                 public ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
.text:00009260 ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
.text:00009260                                         ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+AB2p
.text:00009260
.text:00009260 var_4           = dword ptr -4
.text:00009260
.text:00009260                 push    ebp
.text:00009261                 mov     ebp, esp
.text:00009263                 push    ecx
.text:00009264                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000926B                 mov     [ebp+var_4], ecx
.text:0000926E                 mov     eax, [ebp+var_4]
.text:00009271                 mov     eax, [eax]
.text:00009273                 mov     esp, ebp
.text:00009275                 pop     ebp
.text:00009276                 retn
.text:00009276 ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ endp
.text:00009276
.text:00009276 ; ---------------------------------------------------------------------------
.text:00009277                 align 4
.text:00009277 _text           ends
.text:00009277
.text:00009278 ; ===========================================================================
.text:00009278
.text:00009278 ; Segment type: Pure code
.text:00009278 ; Segment permissions: Read/Execute
.text:00009278 _text           segment para public 'CODE' use32
.text:00009278                 assume cs:_text
.text:00009278                 ;org 9278h
.text:00009278 ; COMDAT (pick any)
.text:00009278                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009278
.text:00009278 ; =============== S U B R O U T I N E =======================================
.text:00009278
.text:00009278 ; Attributes: bp-based frame
.text:00009278
.text:00009278 ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(void)
.text:00009278                 public ??0?$CBuffer@E@@QAE@XZ
.text:00009278 ??0?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::NZip::CInArchiveInfo::CInArchiveInfo(void)+80p
.text:00009278                                         ; NCrypto::NWzAes::CKeyInfo::CKeyInfo(void)+1Dp ...
.text:00009278
.text:00009278 var_4           = dword ptr -4
.text:00009278
.text:00009278                 push    ebp
.text:00009279                 mov     ebp, esp
.text:0000927B                 push    ecx
.text:0000927C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009283                 mov     [ebp+var_4], ecx
.text:00009286                 mov     eax, [ebp+var_4]
.text:00009289                 mov     dword ptr [eax], 0
.text:0000928F                 mov     ecx, [ebp+var_4]
.text:00009292                 mov     dword ptr [ecx+4], 0
.text:00009299                 mov     eax, [ebp+var_4]
.text:0000929C                 mov     esp, ebp
.text:0000929E                 pop     ebp
.text:0000929F                 retn
.text:0000929F ??0?$CBuffer@E@@QAE@XZ endp
.text:0000929F
.text:0000929F _text           ends
.text:0000929F
.text:000092A0 ; ===========================================================================
.text:000092A0
.text:000092A0 ; Segment type: Pure code
.text:000092A0 ; Segment permissions: Read/Execute
.text:000092A0 _text           segment para public 'CODE' use32
.text:000092A0                 assume cs:_text
.text:000092A0                 ;org 92A0h
.text:000092A0 ; COMDAT (pick any)
.text:000092A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000092A0
.text:000092A0 ; =============== S U B R O U T I N E =======================================
.text:000092A0
.text:000092A0 ; Attributes: bp-based frame
.text:000092A0
.text:000092A0 ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(class CBuffer<unsigned char> const &)
.text:000092A0                 public ??0?$CBuffer@E@@QAE@ABV0@@Z
.text:000092A0 ??0?$CBuffer@E@@QAE@ABV0@@Z proc near   ; CODE XREF: NArchive::NZip::CItem::CItem(NArchive::NZip::CItem const &)+9Dp
.text:000092A0                                         ; NArchive::NZip::CExtraSubBlock::CExtraSubBlock(NArchive::NZip::CExtraSubBlock const &)+27p
.text:000092A0
.text:000092A0 var_C           = dword ptr -0Ch
.text:000092A0 Size            = dword ptr -8
.text:000092A0 var_4           = dword ptr -4
.text:000092A0 arg_0           = dword ptr  8
.text:000092A0
.text:000092A0                 push    ebp
.text:000092A1                 mov     ebp, esp
.text:000092A3                 sub     esp, 0Ch
.text:000092A6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000092AD                 mov     [ebp+Size], 0CCCCCCCCh
.text:000092B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000092BB                 mov     [ebp+var_4], ecx
.text:000092BE                 mov     eax, [ebp+var_4]
.text:000092C1                 mov     dword ptr [eax], 0
.text:000092C7                 mov     ecx, [ebp+var_4]
.text:000092CA                 mov     dword ptr [ecx+4], 0
.text:000092D1                 mov     edx, [ebp+arg_0]
.text:000092D4                 mov     eax, [edx+4]
.text:000092D7                 mov     [ebp+Size], eax
.text:000092DA                 cmp     [ebp+Size], 0
.text:000092DE                 jz      short loc_9318
.text:000092E0                 mov     ecx, [ebp+Size]
.text:000092E3                 push    ecx             ; unsigned int
.text:000092E4                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000092E9                 add     esp, 4
.text:000092EC                 mov     [ebp+var_C], eax
.text:000092EF                 mov     edx, [ebp+var_4]
.text:000092F2                 mov     eax, [ebp+var_C]
.text:000092F5                 mov     [edx], eax
.text:000092F7                 mov     ecx, [ebp+Size]
.text:000092FA                 push    ecx             ; Size
.text:000092FB                 mov     edx, [ebp+arg_0]
.text:000092FE                 mov     eax, [edx]
.text:00009300                 push    eax             ; Src
.text:00009301                 mov     ecx, [ebp+var_4]
.text:00009304                 mov     edx, [ecx]
.text:00009306                 push    edx             ; Dst
.text:00009307                 call    _memcpy
.text:0000930C                 add     esp, 0Ch
.text:0000930F                 mov     eax, [ebp+var_4]
.text:00009312                 mov     ecx, [ebp+Size]
.text:00009315                 mov     [eax+4], ecx
.text:00009318
.text:00009318 loc_9318:                               ; CODE XREF: CBuffer<uchar>::CBuffer<uchar>(CBuffer<uchar> const &)+3Ej
.text:00009318                 mov     eax, [ebp+var_4]
.text:0000931B                 add     esp, 0Ch
.text:0000931E                 cmp     ebp, esp
.text:00009320                 call    __RTC_CheckEsp
.text:00009325                 mov     esp, ebp
.text:00009327                 pop     ebp
.text:00009328                 retn    4
.text:00009328 ??0?$CBuffer@E@@QAE@ABV0@@Z endp
.text:00009328
.text:00009328 ; ---------------------------------------------------------------------------
.text:0000932B                 align 4
.text:0000932B _text           ends
.text:0000932B
.text:0000932C ; ===========================================================================
.text:0000932C
.text:0000932C ; Segment type: Pure code
.text:0000932C ; Segment permissions: Read/Execute
.text:0000932C _text           segment para public 'CODE' use32
.text:0000932C                 assume cs:_text
.text:0000932C                 ;org 932Ch
.text:0000932C ; COMDAT (pick any)
.text:0000932C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000932C
.text:0000932C ; =============== S U B R O U T I N E =======================================
.text:0000932C
.text:0000932C ; Attributes: bp-based frame
.text:0000932C
.text:0000932C ; public: __thiscall CBuffer<unsigned char>::~CBuffer<unsigned char>(void)
.text:0000932C                 public ??1?$CBuffer@E@@QAE@XZ
.text:0000932C ??1?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::NZip::CInArchiveInfo::~CInArchiveInfo(void)+14p
.text:0000932C                                         ; NCrypto::NWzAes::CKeyInfo::~CKeyInfo(void)+14p ...
.text:0000932C
.text:0000932C var_8           = dword ptr -8
.text:0000932C var_4           = dword ptr -4
.text:0000932C
.text:0000932C                 push    ebp
.text:0000932D                 mov     ebp, esp
.text:0000932F                 sub     esp, 8
.text:00009332                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00009339                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009340                 mov     [ebp+var_4], ecx
.text:00009343                 mov     eax, [ebp+var_4]
.text:00009346                 mov     ecx, [eax]
.text:00009348                 mov     [ebp+var_8], ecx
.text:0000934B                 mov     edx, [ebp+var_8]
.text:0000934E                 push    edx             ; void *
.text:0000934F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00009354                 add     esp, 4
.text:00009357                 add     esp, 8
.text:0000935A                 cmp     ebp, esp
.text:0000935C                 call    __RTC_CheckEsp
.text:00009361                 mov     esp, ebp
.text:00009363                 pop     ebp
.text:00009364                 retn
.text:00009364 ??1?$CBuffer@E@@QAE@XZ endp
.text:00009364
.text:00009364 ; ---------------------------------------------------------------------------
.text:00009365                 align 4
.text:00009365 _text           ends
.text:00009365
.text:00009368 ; ===========================================================================
.text:00009368
.text:00009368 ; Segment type: Pure code
.text:00009368 ; Segment permissions: Read/Execute
.text:00009368 _text           segment para public 'CODE' use32
.text:00009368                 assume cs:_text
.text:00009368                 ;org 9368h
.text:00009368 ; COMDAT (pick any)
.text:00009368                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009368
.text:00009368 ; =============== S U B R O U T I N E =======================================
.text:00009368
.text:00009368 ; Attributes: bp-based frame
.text:00009368
.text:00009368 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char const *(void)const
.text:00009368                 public ??B?$CBuffer@E@@QBEPBEXZ
.text:00009368 ??B?$CBuffer@E@@QBEPBEXZ proc near      ; CODE XREF: NArchive::NZip::BytesToString(CBuffer<uchar> const &)+5Ep
.text:00009368                                         ; NArchive::NZip::CWzAesExtra::ParseFromSubBlock(NArchive::NZip::CExtraSubBlock const &)+43p ...
.text:00009368
.text:00009368 var_4           = dword ptr -4
.text:00009368
.text:00009368                 push    ebp
.text:00009369                 mov     ebp, esp
.text:0000936B                 push    ecx
.text:0000936C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009373                 mov     [ebp+var_4], ecx
.text:00009376                 mov     eax, [ebp+var_4]
.text:00009379                 mov     eax, [eax]
.text:0000937B                 mov     esp, ebp
.text:0000937D                 pop     ebp
.text:0000937E                 retn
.text:0000937E ??B?$CBuffer@E@@QBEPBEXZ endp
.text:0000937E
.text:0000937E ; ---------------------------------------------------------------------------
.text:0000937F                 align 10h
.text:0000937F _text           ends
.text:0000937F
.text:00009380 ; ===========================================================================
.text:00009380
.text:00009380 ; Segment type: Pure code
.text:00009380 ; Segment permissions: Read/Execute
.text:00009380 _text           segment para public 'CODE' use32
.text:00009380                 assume cs:_text
.text:00009380                 ;org 9380h
.text:00009380 ; COMDAT (pick any)
.text:00009380                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009380
.text:00009380 ; =============== S U B R O U T I N E =======================================
.text:00009380
.text:00009380 ; Attributes: bp-based frame
.text:00009380
.text:00009380 ; public: unsigned int __thiscall CBuffer<unsigned char>::Size(void)const
.text:00009380                 public ?Size@?$CBuffer@E@@QBEIXZ
.text:00009380 ?Size@?$CBuffer@E@@QBEIXZ proc near     ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+B0p
.text:00009380                                         ; NArchive::NZip::BytesToString(CBuffer<uchar> const &)+55p ...
.text:00009380
.text:00009380 var_4           = dword ptr -4
.text:00009380
.text:00009380                 push    ebp
.text:00009381                 mov     ebp, esp
.text:00009383                 push    ecx
.text:00009384                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000938B                 mov     [ebp+var_4], ecx
.text:0000938E                 mov     eax, [ebp+var_4]
.text:00009391                 mov     eax, [eax+4]
.text:00009394                 mov     esp, ebp
.text:00009396                 pop     ebp
.text:00009397                 retn
.text:00009397 ?Size@?$CBuffer@E@@QBEIXZ endp
.text:00009397
.text:00009397 _text           ends
.text:00009397
.text:00009398 ; ===========================================================================
.text:00009398
.text:00009398 ; Segment type: Pure code
.text:00009398 ; Segment permissions: Read/Execute
.text:00009398 _text           segment para public 'CODE' use32
.text:00009398                 assume cs:_text
.text:00009398                 ;org 9398h
.text:00009398 ; COMDAT (pick any)
.text:00009398                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009398
.text:00009398 ; =============== S U B R O U T I N E =======================================
.text:00009398
.text:00009398 ; Attributes: bp-based frame
.text:00009398
.text:00009398 ; public: __thiscall CMyComPtr<struct ICompressCoder>::CMyComPtr<struct ICompressCoder>(void)
.text:00009398                 public ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:00009398 ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:00009398                                         ; CODE XREF: NArchive::NZip::CLzmaDecoder::CLzmaDecoder(void)+5Bp
.text:00009398                                         ; NArchive::NZip::CMethodItem::CMethodItem(void)+14p
.text:00009398
.text:00009398 var_4           = dword ptr -4
.text:00009398
.text:00009398                 push    ebp
.text:00009399                 mov     ebp, esp
.text:0000939B                 push    ecx
.text:0000939C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000093A3                 mov     [ebp+var_4], ecx
.text:000093A6                 mov     eax, [ebp+var_4]
.text:000093A9                 mov     dword ptr [eax], 0
.text:000093AF                 mov     eax, [ebp+var_4]
.text:000093B2                 mov     esp, ebp
.text:000093B4                 pop     ebp
.text:000093B5                 retn
.text:000093B5 ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:000093B5
.text:000093B5 ; ---------------------------------------------------------------------------
.text:000093B6                 align 4
.text:000093B6 _text           ends
.text:000093B6
.text:000093B8 ; ===========================================================================
.text:000093B8
.text:000093B8 ; Segment type: Pure code
.text:000093B8 ; Segment permissions: Read/Execute
.text:000093B8 _text           segment para public 'CODE' use32
.text:000093B8                 assume cs:_text
.text:000093B8                 ;org 93B8h
.text:000093B8 ; COMDAT (pick any)
.text:000093B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000093B8
.text:000093B8 ; =============== S U B R O U T I N E =======================================
.text:000093B8
.text:000093B8 ; Attributes: bp-based frame
.text:000093B8
.text:000093B8 ; public: __thiscall CMyComPtr<struct ICompressCoder>::~CMyComPtr<struct ICompressCoder>(void)
.text:000093B8                 public ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:000093B8 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:000093B8                                         ; CODE XREF: __unwindfunclet$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ$0+6j
.text:000093B8                                         ; NArchive::NZip::CLzmaDecoder::~CLzmaDecoder(void)+14p ...
.text:000093B8
.text:000093B8 var_4           = dword ptr -4
.text:000093B8
.text:000093B8                 push    ebp
.text:000093B9                 mov     ebp, esp
.text:000093BB                 push    ecx
.text:000093BC                 push    esi
.text:000093BD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000093C4                 mov     [ebp+var_4], ecx
.text:000093C7                 mov     eax, [ebp+var_4]
.text:000093CA                 cmp     dword ptr [eax], 0
.text:000093CD                 jz      short loc_93EA
.text:000093CF                 mov     ecx, [ebp+var_4]
.text:000093D2                 mov     edx, [ecx]
.text:000093D4                 mov     eax, [ebp+var_4]
.text:000093D7                 mov     ecx, [eax]
.text:000093D9                 mov     edx, [edx]
.text:000093DB                 mov     esi, esp
.text:000093DD                 push    ecx
.text:000093DE                 mov     eax, [edx+8]
.text:000093E1                 call    eax
.text:000093E3                 cmp     esi, esp
.text:000093E5                 call    __RTC_CheckEsp
.text:000093EA
.text:000093EA loc_93EA:                               ; CODE XREF: CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)+15j
.text:000093EA                 pop     esi
.text:000093EB                 add     esp, 4
.text:000093EE                 cmp     ebp, esp
.text:000093F0                 call    __RTC_CheckEsp
.text:000093F5                 mov     esp, ebp
.text:000093F7                 pop     ebp
.text:000093F8                 retn
.text:000093F8 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:000093F8
.text:000093F8 ; ---------------------------------------------------------------------------
.text:000093F9                 align 4
.text:000093F9 _text           ends
.text:000093F9
.text:000093FC ; ===========================================================================
.text:000093FC
.text:000093FC ; Segment type: Pure code
.text:000093FC ; Segment permissions: Read/Execute
.text:000093FC _text           segment para public 'CODE' use32
.text:000093FC                 assume cs:_text
.text:000093FC                 ;org 93FCh
.text:000093FC ; COMDAT (pick any)
.text:000093FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000093FC
.text:000093FC ; =============== S U B R O U T I N E =======================================
.text:000093FC
.text:000093FC ; Attributes: bp-based frame
.text:000093FC
.text:000093FC ; public: __thiscall CMyComPtr<struct ICompressCoder>::operator struct ICompressCoder *(void)const
.text:000093FC                 public ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
.text:000093FC ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ proc near
.text:000093FC                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+D87p
.text:000093FC                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+E2Ep
.text:000093FC
.text:000093FC var_4           = dword ptr -4
.text:000093FC
.text:000093FC                 push    ebp
.text:000093FD                 mov     ebp, esp
.text:000093FF                 push    ecx
.text:00009400                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009407                 mov     [ebp+var_4], ecx
.text:0000940A                 mov     eax, [ebp+var_4]
.text:0000940D                 mov     eax, [eax]
.text:0000940F                 mov     esp, ebp
.text:00009411                 pop     ebp
.text:00009412                 retn
.text:00009412 ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ endp
.text:00009412
.text:00009412 ; ---------------------------------------------------------------------------
.text:00009413                 align 4
.text:00009413 _text           ends
.text:00009413
.text:00009414 ; ===========================================================================
.text:00009414
.text:00009414 ; Segment type: Pure code
.text:00009414 ; Segment permissions: Read/Execute
.text:00009414 _text           segment para public 'CODE' use32
.text:00009414                 assume cs:_text
.text:00009414                 ;org 9414h
.text:00009414 ; COMDAT (pick any)
.text:00009414                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009414
.text:00009414 ; =============== S U B R O U T I N E =======================================
.text:00009414
.text:00009414 ; Attributes: bp-based frame
.text:00009414
.text:00009414 ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator->(void)const
.text:00009414                 public ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
.text:00009414 ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ proc near
.text:00009414                                         ; CODE XREF: NArchive::NZip::CLzmaDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+A4p
.text:00009414
.text:00009414 var_4           = dword ptr -4
.text:00009414
.text:00009414                 push    ebp
.text:00009415                 mov     ebp, esp
.text:00009417                 push    ecx
.text:00009418                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000941F                 mov     [ebp+var_4], ecx
.text:00009422                 mov     eax, [ebp+var_4]
.text:00009425                 mov     eax, [eax]
.text:00009427                 mov     esp, ebp
.text:00009429                 pop     ebp
.text:0000942A                 retn
.text:0000942A ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ endp
.text:0000942A
.text:0000942A ; ---------------------------------------------------------------------------
.text:0000942B                 align 4
.text:0000942B _text           ends
.text:0000942B
.text:0000942C ; ===========================================================================
.text:0000942C
.text:0000942C ; Segment type: Pure code
.text:0000942C ; Segment permissions: Read/Execute
.text:0000942C _text           segment para public 'CODE' use32
.text:0000942C                 assume cs:_text
.text:0000942C                 ;org 942Ch
.text:0000942C ; COMDAT (pick any)
.text:0000942C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000942C
.text:0000942C ; =============== S U B R O U T I N E =======================================
.text:0000942C
.text:0000942C ; Attributes: bp-based frame
.text:0000942C
.text:0000942C ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator=(struct ICompressCoder *)
.text:0000942C                 public ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z
.text:0000942C ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z proc near
.text:0000942C                                         ; CODE XREF: NArchive::NZip::CLzmaDecoder::CLzmaDecoder(void)+B5p
.text:0000942C                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+A41p ...
.text:0000942C
.text:0000942C var_4           = dword ptr -4
.text:0000942C arg_0           = dword ptr  8
.text:0000942C
.text:0000942C                 push    ebp
.text:0000942D                 mov     ebp, esp
.text:0000942F                 push    ecx
.text:00009430                 push    esi
.text:00009431                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009438                 mov     [ebp+var_4], ecx
.text:0000943B                 cmp     [ebp+arg_0], 0
.text:0000943F                 jz      short loc_9458
.text:00009441                 mov     eax, [ebp+arg_0]
.text:00009444                 mov     ecx, [eax]
.text:00009446                 mov     esi, esp
.text:00009448                 mov     edx, [ebp+arg_0]
.text:0000944B                 push    edx
.text:0000944C                 mov     eax, [ecx+4]
.text:0000944F                 call    eax
.text:00009451                 cmp     esi, esp
.text:00009453                 call    __RTC_CheckEsp
.text:00009458
.text:00009458 loc_9458:                               ; CODE XREF: CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)+13j
.text:00009458                 mov     ecx, [ebp+var_4]
.text:0000945B                 cmp     dword ptr [ecx], 0
.text:0000945E                 jz      short loc_947B
.text:00009460                 mov     edx, [ebp+var_4]
.text:00009463                 mov     eax, [edx]
.text:00009465                 mov     ecx, [ebp+var_4]
.text:00009468                 mov     edx, [ecx]
.text:0000946A                 mov     eax, [eax]
.text:0000946C                 mov     esi, esp
.text:0000946E                 push    edx
.text:0000946F                 mov     ecx, [eax+8]
.text:00009472                 call    ecx
.text:00009474                 cmp     esi, esp
.text:00009476                 call    __RTC_CheckEsp
.text:0000947B
.text:0000947B loc_947B:                               ; CODE XREF: CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)+32j
.text:0000947B                 mov     edx, [ebp+var_4]
.text:0000947E                 mov     eax, [ebp+arg_0]
.text:00009481                 mov     [edx], eax
.text:00009483                 mov     eax, [ebp+arg_0]
.text:00009486                 pop     esi
.text:00009487                 add     esp, 4
.text:0000948A                 cmp     ebp, esp
.text:0000948C                 call    __RTC_CheckEsp
.text:00009491                 mov     esp, ebp
.text:00009493                 pop     ebp
.text:00009494                 retn    4
.text:00009494 ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z endp
.text:00009494
.text:00009494 ; ---------------------------------------------------------------------------
.text:00009497                 align 4
.text:00009497 _text           ends
.text:00009497
.text:00009498 ; ===========================================================================
.text:00009498
.text:00009498 ; Segment type: Pure code
.text:00009498 ; Segment permissions: Read/Execute
.text:00009498 _text           segment para public 'CODE' use32
.text:00009498                 assume cs:_text
.text:00009498                 ;org 9498h
.text:00009498 ; COMDAT (pick any)
.text:00009498                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009498
.text:00009498 ; =============== S U B R O U T I N E =======================================
.text:00009498
.text:00009498 ; Attributes: bp-based frame
.text:00009498
.text:00009498 ; public: unsigned int __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::Size(void)const
.text:00009498                 public ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ
.text:00009498 ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ proc near
.text:00009498                                         ; CODE XREF: NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &)+2Cp
.text:00009498                                         ; NArchive::NZip::CExtraBlock::GetStrongCrypto(NArchive::NZip::CStrongCryptoExtra &)+2Cp ...
.text:00009498
.text:00009498 var_4           = dword ptr -4
.text:00009498
.text:00009498                 push    ebp
.text:00009499                 mov     ebp, esp
.text:0000949B                 push    ecx
.text:0000949C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000094A3                 mov     [ebp+var_4], ecx
.text:000094A6                 mov     ecx, [ebp+var_4]
.text:000094A9                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000094AE                 add     esp, 4
.text:000094B1                 cmp     ebp, esp
.text:000094B3                 call    __RTC_CheckEsp
.text:000094B8                 mov     esp, ebp
.text:000094BA                 pop     ebp
.text:000094BB                 retn
.text:000094BB ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ endp
.text:000094BB
.text:000094BB _text           ends
.text:000094BB
.text:000094BC ; ===========================================================================
.text:000094BC
.text:000094BC ; Segment type: Pure code
.text:000094BC ; Segment permissions: Read/Execute
.text:000094BC _text           segment para public 'CODE' use32
.text:000094BC                 assume cs:_text
.text:000094BC                 ;org 94BCh
.text:000094BC ; COMDAT (pick any)
.text:000094BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000094BC
.text:000094BC ; =============== S U B R O U T I N E =======================================
.text:000094BC
.text:000094BC ; Attributes: bp-based frame
.text:000094BC
.text:000094BC ; public: __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::CObjectVector<struct NArchive::NZip::CExtraSubBlock>(class CObjectVector<struct NArchive::NZip::CExtraSubBlock> const &)
.text:000094BC                 public ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
.text:000094BC ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z proc near
.text:000094BC                                         ; CODE XREF: NArchive::NZip::CExtraBlock::CExtraBlock(NArchive::NZip::CExtraBlock const &)+15p
.text:000094BC
.text:000094BC var_24          = dword ptr -24h
.text:000094BC var_20          = dword ptr -20h
.text:000094BC var_1C          = dword ptr -1Ch
.text:000094BC var_18          = dword ptr -18h
.text:000094BC var_14          = dword ptr -14h
.text:000094BC var_10          = dword ptr -10h
.text:000094BC var_C           = dword ptr -0Ch
.text:000094BC var_4           = dword ptr -4
.text:000094BC arg_0           = dword ptr  8
.text:000094BC
.text:000094BC                 push    ebp
.text:000094BD                 mov     ebp, esp
.text:000094BF                 push    0FFFFFFFFh
.text:000094C1                 push    offset __ehhandler$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
.text:000094C6                 mov     eax, large fs:0
.text:000094CC                 push    eax
.text:000094CD                 sub     esp, 18h
.text:000094D0                 mov     eax, 0CCCCCCCCh
.text:000094D5                 mov     [ebp+var_24], eax
.text:000094D8                 mov     [ebp+var_20], eax
.text:000094DB                 mov     [ebp+var_1C], eax
.text:000094DE                 mov     [ebp+var_18], eax
.text:000094E1                 mov     [ebp+var_14], eax
.text:000094E4                 mov     [ebp+var_10], eax
.text:000094E7                 mov     eax, dword ptr ds:___security_cookie
.text:000094EC                 xor     eax, ebp
.text:000094EE                 push    eax
.text:000094EF                 lea     eax, [ebp+var_C]
.text:000094F2                 mov     large fs:0, eax
.text:000094F8                 mov     [ebp+var_10], ecx
.text:000094FB                 mov     ecx, [ebp+var_10]
.text:000094FE                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00009503                 mov     [ebp+var_4], 0
.text:0000950A                 mov     ecx, [ebp+arg_0]
.text:0000950D                 call    ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size(void)
.text:00009512                 mov     [ebp+var_14], eax
.text:00009515                 mov     eax, [ebp+var_14]
.text:00009518                 push    eax
.text:00009519                 mov     ecx, [ebp+var_10]
.text:0000951C                 call    ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve(uint)
.text:00009521                 mov     [ebp+var_18], 0
.text:00009528                 jmp     short loc_9533
.text:0000952A ; ---------------------------------------------------------------------------
.text:0000952A
.text:0000952A loc_952A:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+CDj
.text:0000952A                 mov     ecx, [ebp+var_18]
.text:0000952D                 add     ecx, 1
.text:00009530                 mov     [ebp+var_18], ecx
.text:00009533
.text:00009533 loc_9533:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+6Cj
.text:00009533                 mov     edx, [ebp+var_18]
.text:00009536                 cmp     edx, [ebp+var_14]
.text:00009539                 jnb     short loc_958B
.text:0000953B                 push    0Ch             ; unsigned int
.text:0000953D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00009542                 add     esp, 4
.text:00009545                 mov     [ebp+var_20], eax
.text:00009548                 mov     byte ptr [ebp+var_4], 1
.text:0000954C                 cmp     [ebp+var_20], 0
.text:00009550                 jz      short loc_956C
.text:00009552                 mov     eax, [ebp+var_18]
.text:00009555                 push    eax
.text:00009556                 mov     ecx, [ebp+arg_0]
.text:00009559                 call    ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[](uint)
.text:0000955E                 push    eax             ; struct NArchive::NZip::CExtraSubBlock *
.text:0000955F                 mov     ecx, [ebp+var_20] ; this
.text:00009562                 call    ??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CExtraSubBlock::CExtraSubBlock(NArchive::NZip::CExtraSubBlock const &)
.text:00009567                 mov     [ebp+var_24], eax
.text:0000956A                 jmp     short loc_9573
.text:0000956C ; ---------------------------------------------------------------------------
.text:0000956C
.text:0000956C loc_956C:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+94j
.text:0000956C                 mov     [ebp+var_24], 0
.text:00009573
.text:00009573 loc_9573:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+AEj
.text:00009573                 mov     ecx, [ebp+var_24]
.text:00009576                 mov     [ebp+var_1C], ecx
.text:00009579                 mov     byte ptr [ebp+var_4], 0
.text:0000957D                 mov     edx, [ebp+var_1C]
.text:00009580                 push    edx
.text:00009581                 mov     ecx, [ebp+var_10]
.text:00009584                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:00009589                 jmp     short loc_952A
.text:0000958B ; ---------------------------------------------------------------------------
.text:0000958B
.text:0000958B loc_958B:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+7Dj
.text:0000958B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009592                 mov     eax, [ebp+var_10]
.text:00009595                 mov     ecx, [ebp+var_C]
.text:00009598                 mov     large fs:0, ecx
.text:0000959F                 pop     ecx
.text:000095A0                 add     esp, 24h
.text:000095A3                 cmp     ebp, esp
.text:000095A5                 call    __RTC_CheckEsp
.text:000095AA                 mov     esp, ebp
.text:000095AC                 pop     ebp
.text:000095AD                 retn    4
.text:000095AD ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z endp
.text:000095AD
.text:000095AD _text           ends
.text:000095AD
.text$x:000095B0 ; ===========================================================================
.text$x:000095B0
.text$x:000095B0 ; Segment type: Pure code
.text$x:000095B0 ; Segment permissions: Read/Execute
.text$x:000095B0 _text$x         segment para public 'CODE' use32
.text$x:000095B0                 assume cs:_text$x
.text$x:000095B0                 ;org 95B0h
.text$x:000095B0 ; COMDAT (pick associative to section at 94BC)
.text$x:000095B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000095B0
.text$x:000095B0 ; =============== S U B R O U T I N E =======================================
.text$x:000095B0
.text$x:000095B0
.text$x:000095B0 __unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$0 proc near
.text$x:000095B0                                         ; DATA XREF: .xdata$x:000095E4o
.text$x:000095B0                 mov     ecx, [ebp-10h]
.text$x:000095B3                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:000095B3 __unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$0 endp
.text$x:000095B3
.text$x:000095B8
.text$x:000095B8 ; =============== S U B R O U T I N E =======================================
.text$x:000095B8
.text$x:000095B8
.text$x:000095B8 __unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$1 proc near
.text$x:000095B8                                         ; DATA XREF: .xdata$x:000095ECo
.text$x:000095B8                 mov     eax, [ebp-20h]
.text$x:000095BB                 push    eax             ; void *
.text$x:000095BC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000095C1                 pop     ecx
.text$x:000095C2                 retn
.text$x:000095C2 __unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$1 endp
.text$x:000095C2
.text$x:000095C3
.text$x:000095C3 ; =============== S U B R O U T I N E =======================================
.text$x:000095C3
.text$x:000095C3
.text$x:000095C3 __ehhandler$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z proc near
.text$x:000095C3                                         ; DATA XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+5o
.text$x:000095C3
.text$x:000095C3 arg_4           = dword ptr  8
.text$x:000095C3
.text$x:000095C3                 mov     edx, [esp+arg_4]
.text$x:000095C7                 lea     eax, [edx+0Ch]
.text$x:000095CA                 mov     ecx, [edx-1Ch]
.text$x:000095CD                 xor     ecx, eax
.text$x:000095CF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000095D4                 mov     eax, offset __ehfuncinfo$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
.text$x:000095D9                 jmp     ___CxxFrameHandler3
.text$x:000095D9 __ehhandler$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z endp
.text$x:000095D9
.text$x:000095D9 ; ---------------------------------------------------------------------------
.text$x:000095DE                 align 10h
.text$x:000095DE _text$x         ends
.text$x:000095DE
.xdata$x:000095E0 ; ===========================================================================
.xdata$x:000095E0
.xdata$x:000095E0 ; Segment type: Pure data
.xdata$x:000095E0 ; Segment permissions: Read
.xdata$x:000095E0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000095E0                 assume cs:_xdata$x
.xdata$x:000095E0                 ;org 95E0h
.xdata$x:000095E0 ; COMDAT (pick associative to section at 94BC)
.xdata$x:000095E0 __unwindtable$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z db 0FFh
.xdata$x:000095E0                                         ; DATA XREF: .xdata$x:000095F8o
.xdata$x:000095E1                 db 0FFh
.xdata$x:000095E2                 db 0FFh
.xdata$x:000095E3                 db 0FFh
.xdata$x:000095E4                 dd offset __unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$0
.xdata$x:000095E8                 db    0
.xdata$x:000095E9                 db    0
.xdata$x:000095EA                 db    0
.xdata$x:000095EB                 db    0
.xdata$x:000095EC                 dd offset __unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$1
.xdata$x:000095F0 __ehfuncinfo$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z db  22h ; "
.xdata$x:000095F0                                         ; DATA XREF: __ehhandler$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z+11o
.xdata$x:000095F1                 db    5
.xdata$x:000095F2                 db  93h ; ô
.xdata$x:000095F3                 db  19h
.xdata$x:000095F4                 db    2
.xdata$x:000095F5                 db    0
.xdata$x:000095F6                 db    0
.xdata$x:000095F7                 db    0
.xdata$x:000095F8                 dd offset __unwindtable$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
.xdata$x:000095FC                 db    0
.xdata$x:000095FD                 db    0
.xdata$x:000095FE                 db    0
.xdata$x:000095FF                 db    0
.xdata$x:00009600                 db    0
.xdata$x:00009601                 db    0
.xdata$x:00009602                 db    0
.xdata$x:00009603                 db    0
.xdata$x:00009604                 db    0
.xdata$x:00009605                 db    0
.xdata$x:00009606                 db    0
.xdata$x:00009607                 db    0
.xdata$x:00009608                 db    0
.xdata$x:00009609                 db    0
.xdata$x:0000960A                 db    0
.xdata$x:0000960B                 db    0
.xdata$x:0000960C                 db    0
.xdata$x:0000960D                 db    0
.xdata$x:0000960E                 db    0
.xdata$x:0000960F                 db    0
.xdata$x:00009610                 db    1
.xdata$x:00009611                 db    0
.xdata$x:00009612                 db    0
.xdata$x:00009613                 db    0
.xdata$x:00009613 _xdata$x        ends
.xdata$x:00009613
.text:00009614 ; ===========================================================================
.text:00009614
.text:00009614 ; Segment type: Pure code
.text:00009614 ; Segment permissions: Read/Execute
.text:00009614 _text           segment para public 'CODE' use32
.text:00009614                 assume cs:_text
.text:00009614                 ;org 9614h
.text:00009614 ; COMDAT (pick any)
.text:00009614                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009614
.text:00009614 ; =============== S U B R O U T I N E =======================================
.text:00009614
.text:00009614 ; Attributes: bp-based frame
.text:00009614
.text:00009614 ; public: struct NArchive::NZip::CExtraSubBlock const & __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::operator[](unsigned int)const
.text:00009614                 public ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z
.text:00009614 ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z proc near
.text:00009614                                         ; CODE XREF: NArchive::NZip::CExtraBlock::GetWzAes(NArchive::NZip::CWzAesExtra &)+3Dp
.text:00009614                                         ; NArchive::NZip::CExtraBlock::GetStrongCrypto(NArchive::NZip::CStrongCryptoExtra &)+3Dp ...
.text:00009614
.text:00009614 var_4           = dword ptr -4
.text:00009614 arg_0           = dword ptr  8
.text:00009614
.text:00009614                 push    ebp
.text:00009615                 mov     ebp, esp
.text:00009617                 push    ecx
.text:00009618                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000961F                 mov     [ebp+var_4], ecx
.text:00009622                 mov     eax, [ebp+arg_0]
.text:00009625                 push    eax
.text:00009626                 mov     ecx, [ebp+var_4]
.text:00009629                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000962E                 mov     eax, [eax]
.text:00009630                 add     esp, 4
.text:00009633                 cmp     ebp, esp
.text:00009635                 call    __RTC_CheckEsp
.text:0000963A                 mov     esp, ebp
.text:0000963C                 pop     ebp
.text:0000963D                 retn    4
.text:0000963D ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z endp
.text:0000963D
.text:0000963D _text           ends
.text:0000963D
.text:00009640 ; ===========================================================================
.text:00009640
.text:00009640 ; Segment type: Pure code
.text:00009640 ; Segment permissions: Read/Execute
.text:00009640 _text           segment para public 'CODE' use32
.text:00009640                 assume cs:_text
.text:00009640                 ;org 9640h
.text:00009640 ; COMDAT (pick any)
.text:00009640                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009640
.text:00009640 ; =============== S U B R O U T I N E =======================================
.text:00009640
.text:00009640 ; Attributes: bp-based frame
.text:00009640
.text:00009640 ; public: __thiscall CObjectVector<struct NArchive::NZip::CExtraSubBlock>::~CObjectVector<struct NArchive::NZip::CExtraSubBlock>(void)
.text:00009640                 public ??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
.text:00009640 ??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ proc near
.text:00009640                                         ; CODE XREF: NArchive::NZip::CExtraBlock::~CExtraBlock(void)+11p
.text:00009640
.text:00009640 var_20          = dword ptr -20h
.text:00009640 var_1C          = dword ptr -1Ch
.text:00009640 var_18          = dword ptr -18h
.text:00009640 var_14          = dword ptr -14h
.text:00009640 var_10          = dword ptr -10h
.text:00009640 var_C           = dword ptr -0Ch
.text:00009640 var_4           = dword ptr -4
.text:00009640
.text:00009640                 push    ebp
.text:00009641                 mov     ebp, esp
.text:00009643                 push    0FFFFFFFFh
.text:00009645                 push    offset __ehhandler$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
.text:0000964A                 mov     eax, large fs:0
.text:00009650                 push    eax
.text:00009651                 sub     esp, 14h
.text:00009654                 mov     eax, 0CCCCCCCCh
.text:00009659                 mov     [ebp+var_20], eax
.text:0000965C                 mov     [ebp+var_1C], eax
.text:0000965F                 mov     [ebp+var_18], eax
.text:00009662                 mov     [ebp+var_14], eax
.text:00009665                 mov     [ebp+var_10], eax
.text:00009668                 mov     eax, dword ptr ds:___security_cookie
.text:0000966D                 xor     eax, ebp
.text:0000966F                 push    eax
.text:00009670                 lea     eax, [ebp+var_C]
.text:00009673                 mov     large fs:0, eax
.text:00009679                 mov     [ebp+var_10], ecx
.text:0000967C                 mov     [ebp+var_4], 0
.text:00009683                 mov     ecx, [ebp+var_10]
.text:00009686                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000968B                 mov     [ebp+var_14], eax
.text:0000968E
.text:0000968E loc_968E:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void):loc_96D0j
.text:0000968E                 cmp     [ebp+var_14], 0
.text:00009692                 jz      short loc_96D2
.text:00009694                 mov     eax, [ebp+var_14]
.text:00009697                 sub     eax, 1
.text:0000969A                 mov     [ebp+var_14], eax
.text:0000969D                 mov     ecx, [ebp+var_14]
.text:000096A0                 push    ecx
.text:000096A1                 mov     ecx, [ebp+var_10]
.text:000096A4                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000096A9                 mov     edx, [eax]
.text:000096AB                 mov     [ebp+var_1C], edx
.text:000096AE                 mov     eax, [ebp+var_1C]
.text:000096B1                 mov     [ebp+var_18], eax
.text:000096B4                 cmp     [ebp+var_18], 0
.text:000096B8                 jz      short loc_96C9
.text:000096BA                 push    1
.text:000096BC                 mov     ecx, [ebp+var_18]
.text:000096BF                 call    ??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CExtraSubBlock::`scalar deleting destructor'(uint)
.text:000096C4                 mov     [ebp+var_20], eax
.text:000096C7                 jmp     short loc_96D0
.text:000096C9 ; ---------------------------------------------------------------------------
.text:000096C9
.text:000096C9 loc_96C9:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+78j
.text:000096C9                 mov     [ebp+var_20], 0
.text:000096D0
.text:000096D0 loc_96D0:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+87j
.text:000096D0                 jmp     short loc_968E
.text:000096D2 ; ---------------------------------------------------------------------------
.text:000096D2
.text:000096D2 loc_96D2:                               ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+52j
.text:000096D2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000096D9                 mov     ecx, [ebp+var_10]
.text:000096DC                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000096E1                 mov     ecx, [ebp+var_C]
.text:000096E4                 mov     large fs:0, ecx
.text:000096EB                 pop     ecx
.text:000096EC                 add     esp, 20h
.text:000096EF                 cmp     ebp, esp
.text:000096F1                 call    __RTC_CheckEsp
.text:000096F6                 mov     esp, ebp
.text:000096F8                 pop     ebp
.text:000096F9                 retn
.text:000096F9 ??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ endp
.text:000096F9
.text:000096F9 ; ---------------------------------------------------------------------------
.text:000096FA                 align 4
.text:000096FA _text           ends
.text:000096FA
.text$x:000096FC ; ===========================================================================
.text$x:000096FC
.text$x:000096FC ; Segment type: Pure code
.text$x:000096FC ; Segment permissions: Read/Execute
.text$x:000096FC _text$x         segment para public 'CODE' use32
.text$x:000096FC                 assume cs:_text$x
.text$x:000096FC                 ;org 96FCh
.text$x:000096FC ; COMDAT (pick associative to section at 9640)
.text$x:000096FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000096FC
.text$x:000096FC ; =============== S U B R O U T I N E =======================================
.text$x:000096FC
.text$x:000096FC
.text$x:000096FC __unwindfunclet$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ$0 proc near
.text$x:000096FC                                         ; DATA XREF: .xdata$x:00009724o
.text$x:000096FC                 mov     ecx, [ebp-10h]
.text$x:000096FF                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:000096FF __unwindfunclet$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ$0 endp
.text$x:000096FF
.text$x:00009704
.text$x:00009704 ; =============== S U B R O U T I N E =======================================
.text$x:00009704
.text$x:00009704
.text$x:00009704 __ehhandler$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ proc near
.text$x:00009704                                         ; DATA XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+5o
.text$x:00009704
.text$x:00009704 arg_4           = dword ptr  8
.text$x:00009704
.text$x:00009704                 mov     edx, [esp+arg_4]
.text$x:00009708                 lea     eax, [edx+0Ch]
.text$x:0000970B                 mov     ecx, [edx-18h]
.text$x:0000970E                 xor     ecx, eax
.text$x:00009710                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009715                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
.text$x:0000971A                 jmp     ___CxxFrameHandler3
.text$x:0000971A __ehhandler$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ endp
.text$x:0000971A
.text$x:0000971A ; ---------------------------------------------------------------------------
.text$x:0000971F                 align 10h
.text$x:0000971F _text$x         ends
.text$x:0000971F
.xdata$x:00009720 ; ===========================================================================
.xdata$x:00009720
.xdata$x:00009720 ; Segment type: Pure data
.xdata$x:00009720 ; Segment permissions: Read
.xdata$x:00009720 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009720                 assume cs:_xdata$x
.xdata$x:00009720                 ;org 9720h
.xdata$x:00009720 ; COMDAT (pick associative to section at 9640)
.xdata$x:00009720 __unwindtable$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:00009720                                         ; DATA XREF: .xdata$x:00009730o
.xdata$x:00009721                 db 0FFh
.xdata$x:00009722                 db 0FFh
.xdata$x:00009723                 db 0FFh
.xdata$x:00009724                 dd offset __unwindfunclet$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ$0
.xdata$x:00009728 __ehfuncinfo$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:00009728                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ+11o
.xdata$x:00009729                 db    5
.xdata$x:0000972A                 db  93h ; ô
.xdata$x:0000972B                 db  19h
.xdata$x:0000972C                 db    1
.xdata$x:0000972D                 db    0
.xdata$x:0000972E                 db    0
.xdata$x:0000972F                 db    0
.xdata$x:00009730                 dd offset __unwindtable$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
.xdata$x:00009734                 db    0
.xdata$x:00009735                 db    0
.xdata$x:00009736                 db    0
.xdata$x:00009737                 db    0
.xdata$x:00009738                 db    0
.xdata$x:00009739                 db    0
.xdata$x:0000973A                 db    0
.xdata$x:0000973B                 db    0
.xdata$x:0000973C                 db    0
.xdata$x:0000973D                 db    0
.xdata$x:0000973E                 db    0
.xdata$x:0000973F                 db    0
.xdata$x:00009740                 db    0
.xdata$x:00009741                 db    0
.xdata$x:00009742                 db    0
.xdata$x:00009743                 db    0
.xdata$x:00009744                 db    0
.xdata$x:00009745                 db    0
.xdata$x:00009746                 db    0
.xdata$x:00009747                 db    0
.xdata$x:00009748                 db    1
.xdata$x:00009749                 db    0
.xdata$x:0000974A                 db    0
.xdata$x:0000974B                 db    0
.xdata$x:0000974B _xdata$x        ends
.xdata$x:0000974B
.text:0000974C ; ===========================================================================
.text:0000974C
.text:0000974C ; Segment type: Pure code
.text:0000974C ; Segment permissions: Read/Execute
.text:0000974C _text           segment para public 'CODE' use32
.text:0000974C                 assume cs:_text
.text:0000974C                 ;org 974Ch
.text:0000974C ; COMDAT (pick any)
.text:0000974C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000974C
.text:0000974C ; =============== S U B R O U T I N E =======================================
.text:0000974C
.text:0000974C ; Attributes: bp-based frame
.text:0000974C
.text:0000974C ; public: __thiscall CMyComPtr<struct IInStream>::CMyComPtr<struct IInStream>(void)
.text:0000974C                 public ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:0000974C ??0?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:0000974C                                         ; CODE XREF: NArchive::NZip::CInArchive::CInArchive(void)+54p
.text:0000974C
.text:0000974C var_4           = dword ptr -4
.text:0000974C
.text:0000974C                 push    ebp
.text:0000974D                 mov     ebp, esp
.text:0000974F                 push    ecx
.text:00009750                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009757                 mov     [ebp+var_4], ecx
.text:0000975A                 mov     eax, [ebp+var_4]
.text:0000975D                 mov     dword ptr [eax], 0
.text:00009763                 mov     eax, [ebp+var_4]
.text:00009766                 mov     esp, ebp
.text:00009768                 pop     ebp
.text:00009769                 retn
.text:00009769 ??0?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:00009769
.text:00009769 ; ---------------------------------------------------------------------------
.text:0000976A                 align 4
.text:0000976A _text           ends
.text:0000976A
.text:0000976C ; ===========================================================================
.text:0000976C
.text:0000976C ; Segment type: Pure code
.text:0000976C ; Segment permissions: Read/Execute
.text:0000976C _text           segment para public 'CODE' use32
.text:0000976C                 assume cs:_text
.text:0000976C                 ;org 976Ch
.text:0000976C ; COMDAT (pick any)
.text:0000976C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000976C
.text:0000976C ; =============== S U B R O U T I N E =======================================
.text:0000976C
.text:0000976C ; Attributes: bp-based frame
.text:0000976C
.text:0000976C ; public: __thiscall CMyComPtr<struct IInStream>::~CMyComPtr<struct IInStream>(void)
.text:0000976C                 public ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:0000976C ??1?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:0000976C                                         ; CODE XREF: NArchive::NZip::CInArchive::~CInArchive(void)+3Dp
.text:0000976C
.text:0000976C var_4           = dword ptr -4
.text:0000976C
.text:0000976C                 push    ebp
.text:0000976D                 mov     ebp, esp
.text:0000976F                 push    ecx
.text:00009770                 push    esi
.text:00009771                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009778                 mov     [ebp+var_4], ecx
.text:0000977B                 mov     eax, [ebp+var_4]
.text:0000977E                 cmp     dword ptr [eax], 0
.text:00009781                 jz      short loc_979E
.text:00009783                 mov     ecx, [ebp+var_4]
.text:00009786                 mov     edx, [ecx]
.text:00009788                 mov     eax, [ebp+var_4]
.text:0000978B                 mov     ecx, [eax]
.text:0000978D                 mov     edx, [edx]
.text:0000978F                 mov     esi, esp
.text:00009791                 push    ecx
.text:00009792                 mov     eax, [edx+8]
.text:00009795                 call    eax
.text:00009797                 cmp     esi, esp
.text:00009799                 call    __RTC_CheckEsp
.text:0000979E
.text:0000979E loc_979E:                               ; CODE XREF: CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)+15j
.text:0000979E                 pop     esi
.text:0000979F                 add     esp, 4
.text:000097A2                 cmp     ebp, esp
.text:000097A4                 call    __RTC_CheckEsp
.text:000097A9                 mov     esp, ebp
.text:000097AB                 pop     ebp
.text:000097AC                 retn
.text:000097AC ??1?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:000097AC
.text:000097AC ; ---------------------------------------------------------------------------
.text:000097AD                 align 10h
.text:000097AD _text           ends
.text:000097AD
.text:000097B0 ; ===========================================================================
.text:000097B0
.text:000097B0 ; Segment type: Pure code
.text:000097B0 ; Segment permissions: Read/Execute
.text:000097B0 _text           segment para public 'CODE' use32
.text:000097B0                 assume cs:_text
.text:000097B0                 ;org 97B0h
.text:000097B0 ; COMDAT (pick any)
.text:000097B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000097B0
.text:000097B0 ; =============== S U B R O U T I N E =======================================
.text:000097B0
.text:000097B0 ; Attributes: bp-based frame
.text:000097B0
.text:000097B0 ; public: __thiscall CMyComPtr<struct IInStream>::operator struct IInStream *(void)const
.text:000097B0                 public ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:000097B0 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:000097B0                                         ; CODE XREF: NArchive::NZip::CInArchive::IsOpen(void)+17p
.text:000097B0
.text:000097B0 var_4           = dword ptr -4
.text:000097B0
.text:000097B0                 push    ebp
.text:000097B1                 mov     ebp, esp
.text:000097B3                 push    ecx
.text:000097B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000097BB                 mov     [ebp+var_4], ecx
.text:000097BE                 mov     eax, [ebp+var_4]
.text:000097C1                 mov     eax, [eax]
.text:000097C3                 mov     esp, ebp
.text:000097C5                 pop     ebp
.text:000097C6                 retn
.text:000097C6 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:000097C6
.text:000097C6 ; ---------------------------------------------------------------------------
.text:000097C7                 align 4
.text:000097C7 _text           ends
.text:000097C7
.text:000097C8 ; ===========================================================================
.text:000097C8
.text:000097C8 ; Segment type: Pure code
.text:000097C8 ; Segment permissions: Read/Execute
.text:000097C8 _text           segment para public 'CODE' use32
.text:000097C8                 assume cs:_text
.text:000097C8                 ;org 97C8h
.text:000097C8 ; COMDAT (pick any)
.text:000097C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000097C8
.text:000097C8 ; =============== S U B R O U T I N E =======================================
.text:000097C8
.text:000097C8 ; Attributes: bp-based frame
.text:000097C8
.text:000097C8 ; public: __thiscall CObjectVector<struct CProp>::CObjectVector<struct CProp>(void)
.text:000097C8                 public ??0?$CObjectVector@UCProp@@@@QAE@XZ
.text:000097C8 ??0?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:000097C8                                         ; CODE XREF: CProps::CProps(void)+11p
.text:000097C8
.text:000097C8 var_4           = dword ptr -4
.text:000097C8
.text:000097C8                 push    ebp
.text:000097C9                 mov     ebp, esp
.text:000097CB                 push    ecx
.text:000097CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000097D3                 mov     [ebp+var_4], ecx
.text:000097D6                 mov     ecx, [ebp+var_4]
.text:000097D9                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:000097DE                 mov     eax, [ebp+var_4]
.text:000097E1                 add     esp, 4
.text:000097E4                 cmp     ebp, esp
.text:000097E6                 call    __RTC_CheckEsp
.text:000097EB                 mov     esp, ebp
.text:000097ED                 pop     ebp
.text:000097EE                 retn
.text:000097EE ??0?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:000097EE
.text:000097EE ; ---------------------------------------------------------------------------
.text:000097EF                 align 10h
.text:000097EF _text           ends
.text:000097EF
.text:000097F0 ; ===========================================================================
.text:000097F0
.text:000097F0 ; Segment type: Pure code
.text:000097F0 ; Segment permissions: Read/Execute
.text:000097F0 _text           segment para public 'CODE' use32
.text:000097F0                 assume cs:_text
.text:000097F0                 ;org 97F0h
.text:000097F0 ; COMDAT (pick any)
.text:000097F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000097F0
.text:000097F0 ; =============== S U B R O U T I N E =======================================
.text:000097F0
.text:000097F0 ; Attributes: bp-based frame
.text:000097F0
.text:000097F0 ; public: __thiscall CObjectVector<struct CProp>::~CObjectVector<struct CProp>(void)
.text:000097F0                 public ??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:000097F0 ??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:000097F0                                         ; CODE XREF: CProps::~CProps(void)+11p
.text:000097F0
.text:000097F0 var_20          = dword ptr -20h
.text:000097F0 var_1C          = dword ptr -1Ch
.text:000097F0 var_18          = dword ptr -18h
.text:000097F0 var_14          = dword ptr -14h
.text:000097F0 var_10          = dword ptr -10h
.text:000097F0 var_C           = dword ptr -0Ch
.text:000097F0 var_4           = dword ptr -4
.text:000097F0
.text:000097F0                 push    ebp
.text:000097F1                 mov     ebp, esp
.text:000097F3                 push    0FFFFFFFFh
.text:000097F5                 push    offset __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:000097FA                 mov     eax, large fs:0
.text:00009800                 push    eax
.text:00009801                 sub     esp, 14h
.text:00009804                 mov     eax, 0CCCCCCCCh
.text:00009809                 mov     [ebp+var_20], eax
.text:0000980C                 mov     [ebp+var_1C], eax
.text:0000980F                 mov     [ebp+var_18], eax
.text:00009812                 mov     [ebp+var_14], eax
.text:00009815                 mov     [ebp+var_10], eax
.text:00009818                 mov     eax, dword ptr ds:___security_cookie
.text:0000981D                 xor     eax, ebp
.text:0000981F                 push    eax
.text:00009820                 lea     eax, [ebp+var_C]
.text:00009823                 mov     large fs:0, eax
.text:00009829                 mov     [ebp+var_10], ecx
.text:0000982C                 mov     [ebp+var_4], 0
.text:00009833                 mov     ecx, [ebp+var_10]
.text:00009836                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000983B                 mov     [ebp+var_14], eax
.text:0000983E
.text:0000983E loc_983E:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void):loc_9880j
.text:0000983E                 cmp     [ebp+var_14], 0
.text:00009842                 jz      short loc_9882
.text:00009844                 mov     eax, [ebp+var_14]
.text:00009847                 sub     eax, 1
.text:0000984A                 mov     [ebp+var_14], eax
.text:0000984D                 mov     ecx, [ebp+var_14]
.text:00009850                 push    ecx
.text:00009851                 mov     ecx, [ebp+var_10]
.text:00009854                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00009859                 mov     edx, [eax]
.text:0000985B                 mov     [ebp+var_1C], edx
.text:0000985E                 mov     eax, [ebp+var_1C]
.text:00009861                 mov     [ebp+var_18], eax
.text:00009864                 cmp     [ebp+var_18], 0
.text:00009868                 jz      short loc_9879
.text:0000986A                 push    1
.text:0000986C                 mov     ecx, [ebp+var_18]
.text:0000986F                 call    ??_GCProp@@QAEPAXI@Z ; CProp::`scalar deleting destructor'(uint)
.text:00009874                 mov     [ebp+var_20], eax
.text:00009877                 jmp     short loc_9880
.text:00009879 ; ---------------------------------------------------------------------------
.text:00009879
.text:00009879 loc_9879:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+78j
.text:00009879                 mov     [ebp+var_20], 0
.text:00009880
.text:00009880 loc_9880:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+87j
.text:00009880                 jmp     short loc_983E
.text:00009882 ; ---------------------------------------------------------------------------
.text:00009882
.text:00009882 loc_9882:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+52j
.text:00009882                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009889                 mov     ecx, [ebp+var_10]
.text:0000988C                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00009891                 mov     ecx, [ebp+var_C]
.text:00009894                 mov     large fs:0, ecx
.text:0000989B                 pop     ecx
.text:0000989C                 add     esp, 20h
.text:0000989F                 cmp     ebp, esp
.text:000098A1                 call    __RTC_CheckEsp
.text:000098A6                 mov     esp, ebp
.text:000098A8                 pop     ebp
.text:000098A9                 retn
.text:000098A9 ??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:000098A9
.text:000098A9 ; ---------------------------------------------------------------------------
.text:000098AA                 align 4
.text:000098AA _text           ends
.text:000098AA
.text$x:000098AC ; ===========================================================================
.text$x:000098AC
.text$x:000098AC ; Segment type: Pure code
.text$x:000098AC ; Segment permissions: Read/Execute
.text$x:000098AC _text$x         segment para public 'CODE' use32
.text$x:000098AC                 assume cs:_text$x
.text$x:000098AC                 ;org 98ACh
.text$x:000098AC ; COMDAT (pick associative to section at 97F0)
.text$x:000098AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000098AC
.text$x:000098AC ; =============== S U B R O U T I N E =======================================
.text$x:000098AC
.text$x:000098AC
.text$x:000098AC __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 proc near
.text$x:000098AC                                         ; DATA XREF: .xdata$x:000098D4o
.text$x:000098AC                 mov     ecx, [ebp-10h]
.text$x:000098AF                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:000098AF __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 endp
.text$x:000098AF
.text$x:000098B4
.text$x:000098B4 ; =============== S U B R O U T I N E =======================================
.text$x:000098B4
.text$x:000098B4
.text$x:000098B4 __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text$x:000098B4                                         ; DATA XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+5o
.text$x:000098B4
.text$x:000098B4 arg_4           = dword ptr  8
.text$x:000098B4
.text$x:000098B4                 mov     edx, [esp+arg_4]
.text$x:000098B8                 lea     eax, [edx+0Ch]
.text$x:000098BB                 mov     ecx, [edx-18h]
.text$x:000098BE                 xor     ecx, eax
.text$x:000098C0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000098C5                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text$x:000098CA                 jmp     ___CxxFrameHandler3
.text$x:000098CA __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text$x:000098CA
.text$x:000098CA ; ---------------------------------------------------------------------------
.text$x:000098CF                 align 10h
.text$x:000098CF _text$x         ends
.text$x:000098CF
.xdata$x:000098D0 ; ===========================================================================
.xdata$x:000098D0
.xdata$x:000098D0 ; Segment type: Pure data
.xdata$x:000098D0 ; Segment permissions: Read
.xdata$x:000098D0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000098D0                 assume cs:_xdata$x
.xdata$x:000098D0                 ;org 98D0h
.xdata$x:000098D0 ; COMDAT (pick associative to section at 97F0)
.xdata$x:000098D0 __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ db 0FFh
.xdata$x:000098D0                                         ; DATA XREF: .xdata$x:000098E0o
.xdata$x:000098D1                 db 0FFh
.xdata$x:000098D2                 db 0FFh
.xdata$x:000098D3                 db 0FFh
.xdata$x:000098D4                 dd offset __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
.xdata$x:000098D8 __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ db  22h ; "
.xdata$x:000098D8                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ+11o
.xdata$x:000098D9                 db    5
.xdata$x:000098DA                 db  93h ; ô
.xdata$x:000098DB                 db  19h
.xdata$x:000098DC                 db    1
.xdata$x:000098DD                 db    0
.xdata$x:000098DE                 db    0
.xdata$x:000098DF                 db    0
.xdata$x:000098E0                 dd offset __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
.xdata$x:000098E4                 db    0
.xdata$x:000098E5                 db    0
.xdata$x:000098E6                 db    0
.xdata$x:000098E7                 db    0
.xdata$x:000098E8                 db    0
.xdata$x:000098E9                 db    0
.xdata$x:000098EA                 db    0
.xdata$x:000098EB                 db    0
.xdata$x:000098EC                 db    0
.xdata$x:000098ED                 db    0
.xdata$x:000098EE                 db    0
.xdata$x:000098EF                 db    0
.xdata$x:000098F0                 db    0
.xdata$x:000098F1                 db    0
.xdata$x:000098F2                 db    0
.xdata$x:000098F3                 db    0
.xdata$x:000098F4                 db    0
.xdata$x:000098F5                 db    0
.xdata$x:000098F6                 db    0
.xdata$x:000098F7                 db    0
.xdata$x:000098F8                 db    1
.xdata$x:000098F9                 db    0
.xdata$x:000098FA                 db    0
.xdata$x:000098FB                 db    0
.xdata$x:000098FB _xdata$x        ends
.xdata$x:000098FB
.text:000098FC ; ===========================================================================
.text:000098FC
.text:000098FC ; Segment type: Pure code
.text:000098FC ; Segment permissions: Read/Execute
.text:000098FC _text           segment para public 'CODE' use32
.text:000098FC                 assume cs:_text
.text:000098FC                 ;org 98FCh
.text:000098FC ; COMDAT (pick any)
.text:000098FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000098FC
.text:000098FC ; =============== S U B R O U T I N E =======================================
.text:000098FC
.text:000098FC ; Attributes: bp-based frame
.text:000098FC
.text:000098FC ; public: void __thiscall CObjectVector<struct CProp>::Clear(void)
.text:000098FC                 public ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ
.text:000098FC ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ proc near
.text:000098FC                                         ; CODE XREF: CProps::Clear(void)+11p
.text:000098FC
.text:000098FC var_14          = dword ptr -14h
.text:000098FC var_10          = dword ptr -10h
.text:000098FC var_C           = dword ptr -0Ch
.text:000098FC var_8           = dword ptr -8
.text:000098FC var_4           = dword ptr -4
.text:000098FC
.text:000098FC                 push    ebp
.text:000098FD                 mov     ebp, esp
.text:000098FF                 sub     esp, 14h
.text:00009902                 mov     eax, 0CCCCCCCCh
.text:00009907                 mov     [ebp+var_14], eax
.text:0000990A                 mov     [ebp+var_10], eax
.text:0000990D                 mov     [ebp+var_C], eax
.text:00009910                 mov     [ebp+var_8], eax
.text:00009913                 mov     [ebp+var_4], eax
.text:00009916                 mov     [ebp+var_4], ecx
.text:00009919                 mov     ecx, [ebp+var_4]
.text:0000991C                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00009921                 mov     [ebp+var_8], eax
.text:00009924
.text:00009924 loc_9924:                               ; CODE XREF: CObjectVector<CProp>::Clear(void):loc_9966j
.text:00009924                 cmp     [ebp+var_8], 0
.text:00009928                 jz      short loc_9968
.text:0000992A                 mov     eax, [ebp+var_8]
.text:0000992D                 sub     eax, 1
.text:00009930                 mov     [ebp+var_8], eax
.text:00009933                 mov     ecx, [ebp+var_8]
.text:00009936                 push    ecx
.text:00009937                 mov     ecx, [ebp+var_4]
.text:0000993A                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000993F                 mov     edx, [eax]
.text:00009941                 mov     [ebp+var_10], edx
.text:00009944                 mov     eax, [ebp+var_10]
.text:00009947                 mov     [ebp+var_C], eax
.text:0000994A                 cmp     [ebp+var_C], 0
.text:0000994E                 jz      short loc_995F
.text:00009950                 push    1
.text:00009952                 mov     ecx, [ebp+var_C]
.text:00009955                 call    ??_GCProp@@QAEPAXI@Z ; CProp::`scalar deleting destructor'(uint)
.text:0000995A                 mov     [ebp+var_14], eax
.text:0000995D                 jmp     short loc_9966
.text:0000995F ; ---------------------------------------------------------------------------
.text:0000995F
.text:0000995F loc_995F:                               ; CODE XREF: CObjectVector<CProp>::Clear(void)+52j
.text:0000995F                 mov     [ebp+var_14], 0
.text:00009966
.text:00009966 loc_9966:                               ; CODE XREF: CObjectVector<CProp>::Clear(void)+61j
.text:00009966                 jmp     short loc_9924
.text:00009968 ; ---------------------------------------------------------------------------
.text:00009968
.text:00009968 loc_9968:                               ; CODE XREF: CObjectVector<CProp>::Clear(void)+2Cj
.text:00009968                 mov     ecx, [ebp+var_4]
.text:0000996B                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:00009970                 add     esp, 14h
.text:00009973                 cmp     ebp, esp
.text:00009975                 call    __RTC_CheckEsp
.text:0000997A                 mov     esp, ebp
.text:0000997C                 pop     ebp
.text:0000997D                 retn
.text:0000997D ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ endp
.text:0000997D
.text:0000997D ; ---------------------------------------------------------------------------
.text:0000997E                 align 10h
.text:0000997E _text           ends
.text:0000997E
.text:00009980 ; ===========================================================================
.text:00009980
.text:00009980 ; Segment type: Pure code
.text:00009980 ; Segment permissions: Read/Execute
.text:00009980 _text           segment para public 'CODE' use32
.text:00009980                 assume cs:_text
.text:00009980                 ;org 9980h
.text:00009980 ; COMDAT (pick any)
.text:00009980                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009980
.text:00009980 ; =============== S U B R O U T I N E =======================================
.text:00009980
.text:00009980 ; Attributes: bp-based frame
.text:00009980
.text:00009980 ; public: unsigned int __thiscall CObjectVector<class NArchive::NZip::CItemEx>::Size(void)const
.text:00009980                 public ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ
.text:00009980 ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ proc near
.text:00009980                                         ; CODE XREF: NArchive::NZip::CHandler::GetNumberOfItems(uint *)+9p
.text:00009980                                         ; NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+90p
.text:00009980
.text:00009980 var_4           = dword ptr -4
.text:00009980
.text:00009980                 push    ebp
.text:00009981                 mov     ebp, esp
.text:00009983                 push    ecx
.text:00009984                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000998B                 mov     [ebp+var_4], ecx
.text:0000998E                 mov     ecx, [ebp+var_4]
.text:00009991                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00009996                 add     esp, 4
.text:00009999                 cmp     ebp, esp
.text:0000999B                 call    __RTC_CheckEsp
.text:000099A0                 mov     esp, ebp
.text:000099A2                 pop     ebp
.text:000099A3                 retn
.text:000099A3 ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ endp
.text:000099A3
.text:000099A3 _text           ends
.text:000099A3
.text:000099A4 ; ===========================================================================
.text:000099A4
.text:000099A4 ; Segment type: Pure code
.text:000099A4 ; Segment permissions: Read/Execute
.text:000099A4 _text           segment para public 'CODE' use32
.text:000099A4                 assume cs:_text
.text:000099A4                 ;org 99A4h
.text:000099A4 ; COMDAT (pick any)
.text:000099A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000099A4
.text:000099A4 ; =============== S U B R O U T I N E =======================================
.text:000099A4
.text:000099A4 ; Attributes: bp-based frame
.text:000099A4
.text:000099A4 ; public: __thiscall CObjectVector<class NArchive::NZip::CItemEx>::CObjectVector<class NArchive::NZip::CItemEx>(void)
.text:000099A4                 public ??0?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ
.text:000099A4 ??0?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ proc near
.text:000099A4                                         ; CODE XREF: NArchive::NZip::CHandler::CHandler(void)+79p
.text:000099A4
.text:000099A4 var_4           = dword ptr -4
.text:000099A4
.text:000099A4                 push    ebp
.text:000099A5                 mov     ebp, esp
.text:000099A7                 push    ecx
.text:000099A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000099AF                 mov     [ebp+var_4], ecx
.text:000099B2                 mov     ecx, [ebp+var_4]
.text:000099B5                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:000099BA                 mov     eax, [ebp+var_4]
.text:000099BD                 add     esp, 4
.text:000099C0                 cmp     ebp, esp
.text:000099C2                 call    __RTC_CheckEsp
.text:000099C7                 mov     esp, ebp
.text:000099C9                 pop     ebp
.text:000099CA                 retn
.text:000099CA ??0?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ endp
.text:000099CA
.text:000099CA ; ---------------------------------------------------------------------------
.text:000099CB                 align 4
.text:000099CB _text           ends
.text:000099CB
.text:000099CC ; ===========================================================================
.text:000099CC
.text:000099CC ; Segment type: Pure code
.text:000099CC ; Segment permissions: Read/Execute
.text:000099CC _text           segment para public 'CODE' use32
.text:000099CC                 assume cs:_text
.text:000099CC                 ;org 99CCh
.text:000099CC ; COMDAT (pick any)
.text:000099CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000099CC
.text:000099CC ; =============== S U B R O U T I N E =======================================
.text:000099CC
.text:000099CC ; Attributes: bp-based frame
.text:000099CC
.text:000099CC ; public: class NArchive::NZip::CItemEx & __thiscall CObjectVector<class NArchive::NZip::CItemEx>::operator[](unsigned int)
.text:000099CC                 public ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z
.text:000099CC ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z proc near
.text:000099CC                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+67p
.text:000099CC                                         ; NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+114p ...
.text:000099CC
.text:000099CC var_4           = dword ptr -4
.text:000099CC arg_0           = dword ptr  8
.text:000099CC
.text:000099CC                 push    ebp
.text:000099CD                 mov     ebp, esp
.text:000099CF                 push    ecx
.text:000099D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000099D7                 mov     [ebp+var_4], ecx
.text:000099DA                 mov     eax, [ebp+arg_0]
.text:000099DD                 push    eax
.text:000099DE                 mov     ecx, [ebp+var_4]
.text:000099E1                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000099E6                 mov     eax, [eax]
.text:000099E8                 add     esp, 4
.text:000099EB                 cmp     ebp, esp
.text:000099ED                 call    __RTC_CheckEsp
.text:000099F2                 mov     esp, ebp
.text:000099F4                 pop     ebp
.text:000099F5                 retn    4
.text:000099F5 ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z endp
.text:000099F5
.text:000099F5 _text           ends
.text:000099F5
.text:000099F8 ; ===========================================================================
.text:000099F8
.text:000099F8 ; Segment type: Pure code
.text:000099F8 ; Segment permissions: Read/Execute
.text:000099F8 _text           segment para public 'CODE' use32
.text:000099F8                 assume cs:_text
.text:000099F8                 ;org 99F8h
.text:000099F8 ; COMDAT (pick any)
.text:000099F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000099F8
.text:000099F8 ; =============== S U B R O U T I N E =======================================
.text:000099F8
.text:000099F8 ; Attributes: bp-based frame
.text:000099F8
.text:000099F8 ; public: __thiscall CObjectVector<class NArchive::NZip::CItemEx>::~CObjectVector<class NArchive::NZip::CItemEx>(void)
.text:000099F8                 public ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ
.text:000099F8 ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ proc near
.text:000099F8                                         ; CODE XREF: __unwindfunclet$??0CHandler@NZip@NArchive@@QAE@XZ$0+6j
.text:000099F8                                         ; NArchive::NZip::CHandler::~CHandler(void)+5Ep ...
.text:000099F8
.text:000099F8 var_20          = dword ptr -20h
.text:000099F8 var_1C          = dword ptr -1Ch
.text:000099F8 var_18          = dword ptr -18h
.text:000099F8 var_14          = dword ptr -14h
.text:000099F8 var_10          = dword ptr -10h
.text:000099F8 var_C           = dword ptr -0Ch
.text:000099F8 var_4           = dword ptr -4
.text:000099F8
.text:000099F8                 push    ebp
.text:000099F9                 mov     ebp, esp
.text:000099FB                 push    0FFFFFFFFh
.text:000099FD                 push    offset __ehhandler$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ
.text:00009A02                 mov     eax, large fs:0
.text:00009A08                 push    eax
.text:00009A09                 sub     esp, 14h
.text:00009A0C                 mov     eax, 0CCCCCCCCh
.text:00009A11                 mov     [ebp+var_20], eax
.text:00009A14                 mov     [ebp+var_1C], eax
.text:00009A17                 mov     [ebp+var_18], eax
.text:00009A1A                 mov     [ebp+var_14], eax
.text:00009A1D                 mov     [ebp+var_10], eax
.text:00009A20                 mov     eax, dword ptr ds:___security_cookie
.text:00009A25                 xor     eax, ebp
.text:00009A27                 push    eax
.text:00009A28                 lea     eax, [ebp+var_C]
.text:00009A2B                 mov     large fs:0, eax
.text:00009A31                 mov     [ebp+var_10], ecx
.text:00009A34                 mov     [ebp+var_4], 0
.text:00009A3B                 mov     ecx, [ebp+var_10]
.text:00009A3E                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00009A43                 mov     [ebp+var_14], eax
.text:00009A46
.text:00009A46 loc_9A46:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void):loc_9A88j
.text:00009A46                 cmp     [ebp+var_14], 0
.text:00009A4A                 jz      short loc_9A8A
.text:00009A4C                 mov     eax, [ebp+var_14]
.text:00009A4F                 sub     eax, 1
.text:00009A52                 mov     [ebp+var_14], eax
.text:00009A55                 mov     ecx, [ebp+var_14]
.text:00009A58                 push    ecx
.text:00009A59                 mov     ecx, [ebp+var_10]
.text:00009A5C                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00009A61                 mov     edx, [eax]
.text:00009A63                 mov     [ebp+var_1C], edx
.text:00009A66                 mov     eax, [ebp+var_1C]
.text:00009A69                 mov     [ebp+var_18], eax
.text:00009A6C                 cmp     [ebp+var_18], 0
.text:00009A70                 jz      short loc_9A81
.text:00009A72                 push    1
.text:00009A74                 mov     ecx, [ebp+var_18]
.text:00009A77                 call    ??_GCItemEx@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CItemEx::`scalar deleting destructor'(uint)
.text:00009A7C                 mov     [ebp+var_20], eax
.text:00009A7F                 jmp     short loc_9A88
.text:00009A81 ; ---------------------------------------------------------------------------
.text:00009A81
.text:00009A81 loc_9A81:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)+78j
.text:00009A81                 mov     [ebp+var_20], 0
.text:00009A88
.text:00009A88 loc_9A88:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)+87j
.text:00009A88                 jmp     short loc_9A46
.text:00009A8A ; ---------------------------------------------------------------------------
.text:00009A8A
.text:00009A8A loc_9A8A:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)+52j
.text:00009A8A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009A91                 mov     ecx, [ebp+var_10]
.text:00009A94                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00009A99                 mov     ecx, [ebp+var_C]
.text:00009A9C                 mov     large fs:0, ecx
.text:00009AA3                 pop     ecx
.text:00009AA4                 add     esp, 20h
.text:00009AA7                 cmp     ebp, esp
.text:00009AA9                 call    __RTC_CheckEsp
.text:00009AAE                 mov     esp, ebp
.text:00009AB0                 pop     ebp
.text:00009AB1                 retn
.text:00009AB1 ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ endp
.text:00009AB1
.text:00009AB1 ; ---------------------------------------------------------------------------
.text:00009AB2                 align 4
.text:00009AB2 _text           ends
.text:00009AB2
.text$x:00009AB4 ; ===========================================================================
.text$x:00009AB4
.text$x:00009AB4 ; Segment type: Pure code
.text$x:00009AB4 ; Segment permissions: Read/Execute
.text$x:00009AB4 _text$x         segment para public 'CODE' use32
.text$x:00009AB4                 assume cs:_text$x
.text$x:00009AB4                 ;org 9AB4h
.text$x:00009AB4 ; COMDAT (pick associative to section at 99F8)
.text$x:00009AB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009AB4
.text$x:00009AB4 ; =============== S U B R O U T I N E =======================================
.text$x:00009AB4
.text$x:00009AB4
.text$x:00009AB4 __unwindfunclet$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ$0 proc near
.text$x:00009AB4                                         ; DATA XREF: .xdata$x:00009ADCo
.text$x:00009AB4                 mov     ecx, [ebp-10h]
.text$x:00009AB7                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00009AB7 __unwindfunclet$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ$0 endp
.text$x:00009AB7
.text$x:00009ABC
.text$x:00009ABC ; =============== S U B R O U T I N E =======================================
.text$x:00009ABC
.text$x:00009ABC
.text$x:00009ABC __ehhandler$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ proc near
.text$x:00009ABC                                         ; DATA XREF: CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)+5o
.text$x:00009ABC
.text$x:00009ABC arg_4           = dword ptr  8
.text$x:00009ABC
.text$x:00009ABC                 mov     edx, [esp+arg_4]
.text$x:00009AC0                 lea     eax, [edx+0Ch]
.text$x:00009AC3                 mov     ecx, [edx-18h]
.text$x:00009AC6                 xor     ecx, eax
.text$x:00009AC8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009ACD                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ
.text$x:00009AD2                 jmp     ___CxxFrameHandler3
.text$x:00009AD2 __ehhandler$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ endp
.text$x:00009AD2
.text$x:00009AD2 ; ---------------------------------------------------------------------------
.text$x:00009AD7                 align 4
.text$x:00009AD7 _text$x         ends
.text$x:00009AD7
.xdata$x:00009AD8 ; ===========================================================================
.xdata$x:00009AD8
.xdata$x:00009AD8 ; Segment type: Pure data
.xdata$x:00009AD8 ; Segment permissions: Read
.xdata$x:00009AD8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009AD8                 assume cs:_xdata$x
.xdata$x:00009AD8                 ;org 9AD8h
.xdata$x:00009AD8 ; COMDAT (pick associative to section at 99F8)
.xdata$x:00009AD8 __unwindtable$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:00009AD8                                         ; DATA XREF: .xdata$x:00009AE8o
.xdata$x:00009AD9                 db 0FFh
.xdata$x:00009ADA                 db 0FFh
.xdata$x:00009ADB                 db 0FFh
.xdata$x:00009ADC                 dd offset __unwindfunclet$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ$0
.xdata$x:00009AE0 __ehfuncinfo$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:00009AE0                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ+11o
.xdata$x:00009AE1                 db    5
.xdata$x:00009AE2                 db  93h ; ô
.xdata$x:00009AE3                 db  19h
.xdata$x:00009AE4                 db    1
.xdata$x:00009AE5                 db    0
.xdata$x:00009AE6                 db    0
.xdata$x:00009AE7                 db    0
.xdata$x:00009AE8                 dd offset __unwindtable$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ
.xdata$x:00009AEC                 align 20h
.xdata$x:00009B00                 db    1
.xdata$x:00009B01                 db    0
.xdata$x:00009B02                 db    0
.xdata$x:00009B03                 db    0
.xdata$x:00009B03 _xdata$x        ends
.xdata$x:00009B03
.text:00009B04 ; ===========================================================================
.text:00009B04
.text:00009B04 ; Segment type: Pure code
.text:00009B04 ; Segment permissions: Read/Execute
.text:00009B04 _text           segment para public 'CODE' use32
.text:00009B04                 assume cs:_text
.text:00009B04                 ;org 9B04h
.text:00009B04 ; COMDAT (pick any)
.text:00009B04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009B04
.text:00009B04 ; =============== S U B R O U T I N E =======================================
.text:00009B04
.text:00009B04 ; Attributes: bp-based frame
.text:00009B04
.text:00009B04 ; public: void __thiscall CObjectVector<class NArchive::NZip::CItemEx>::Clear(void)
.text:00009B04                 public ?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ
.text:00009B04 ?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ proc near
.text:00009B04                                         ; CODE XREF: NArchive::NZip::CHandler::Close(void)+9p
.text:00009B04
.text:00009B04 var_14          = dword ptr -14h
.text:00009B04 var_10          = dword ptr -10h
.text:00009B04 var_C           = dword ptr -0Ch
.text:00009B04 var_8           = dword ptr -8
.text:00009B04 var_4           = dword ptr -4
.text:00009B04
.text:00009B04                 push    ebp
.text:00009B05                 mov     ebp, esp
.text:00009B07                 sub     esp, 14h
.text:00009B0A                 mov     eax, 0CCCCCCCCh
.text:00009B0F                 mov     [ebp+var_14], eax
.text:00009B12                 mov     [ebp+var_10], eax
.text:00009B15                 mov     [ebp+var_C], eax
.text:00009B18                 mov     [ebp+var_8], eax
.text:00009B1B                 mov     [ebp+var_4], eax
.text:00009B1E                 mov     [ebp+var_4], ecx
.text:00009B21                 mov     ecx, [ebp+var_4]
.text:00009B24                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00009B29                 mov     [ebp+var_8], eax
.text:00009B2C
.text:00009B2C loc_9B2C:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::Clear(void):loc_9B6Ej
.text:00009B2C                 cmp     [ebp+var_8], 0
.text:00009B30                 jz      short loc_9B70
.text:00009B32                 mov     eax, [ebp+var_8]
.text:00009B35                 sub     eax, 1
.text:00009B38                 mov     [ebp+var_8], eax
.text:00009B3B                 mov     ecx, [ebp+var_8]
.text:00009B3E                 push    ecx
.text:00009B3F                 mov     ecx, [ebp+var_4]
.text:00009B42                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00009B47                 mov     edx, [eax]
.text:00009B49                 mov     [ebp+var_10], edx
.text:00009B4C                 mov     eax, [ebp+var_10]
.text:00009B4F                 mov     [ebp+var_C], eax
.text:00009B52                 cmp     [ebp+var_C], 0
.text:00009B56                 jz      short loc_9B67
.text:00009B58                 push    1
.text:00009B5A                 mov     ecx, [ebp+var_C]
.text:00009B5D                 call    ??_GCItemEx@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CItemEx::`scalar deleting destructor'(uint)
.text:00009B62                 mov     [ebp+var_14], eax
.text:00009B65                 jmp     short loc_9B6E
.text:00009B67 ; ---------------------------------------------------------------------------
.text:00009B67
.text:00009B67 loc_9B67:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::Clear(void)+52j
.text:00009B67                 mov     [ebp+var_14], 0
.text:00009B6E
.text:00009B6E loc_9B6E:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::Clear(void)+61j
.text:00009B6E                 jmp     short loc_9B2C
.text:00009B70 ; ---------------------------------------------------------------------------
.text:00009B70
.text:00009B70 loc_9B70:                               ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::Clear(void)+2Cj
.text:00009B70                 mov     ecx, [ebp+var_4]
.text:00009B73                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:00009B78                 add     esp, 14h
.text:00009B7B                 cmp     ebp, esp
.text:00009B7D                 call    __RTC_CheckEsp
.text:00009B82                 mov     esp, ebp
.text:00009B84                 pop     ebp
.text:00009B85                 retn
.text:00009B85 ?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ endp
.text:00009B85
.text:00009B85 ; ---------------------------------------------------------------------------
.text:00009B86                 align 4
.text:00009B86 _text           ends
.text:00009B86
.text:00009B88 ; ===========================================================================
.text:00009B88
.text:00009B88 ; Segment type: Pure code
.text:00009B88 ; Segment permissions: Read/Execute
.text:00009B88 _text           segment para public 'CODE' use32
.text:00009B88                 assume cs:_text
.text:00009B88                 ;org 9B88h
.text:00009B88 ; COMDAT (pick any)
.text:00009B88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009B88
.text:00009B88 ; =============== S U B R O U T I N E =======================================
.text:00009B88
.text:00009B88 ; Attributes: bp-based frame
.text:00009B88
.text:00009B88 ; public: __thiscall CMyComPtr<struct IArchiveOpenCallback>::CMyComPtr<struct IArchiveOpenCallback>(struct IArchiveOpenCallback *)
.text:00009B88                 public ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z
.text:00009B88 ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z proc near
.text:00009B88                                         ; CODE XREF: NArchive::NZip::CProgressImp::CProgressImp(IArchiveOpenCallback *)+29p
.text:00009B88
.text:00009B88 var_4           = dword ptr -4
.text:00009B88 arg_0           = dword ptr  8
.text:00009B88
.text:00009B88                 push    ebp
.text:00009B89                 mov     ebp, esp
.text:00009B8B                 push    ecx
.text:00009B8C                 push    esi
.text:00009B8D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009B94                 mov     [ebp+var_4], ecx
.text:00009B97                 mov     eax, [ebp+var_4]
.text:00009B9A                 mov     ecx, [ebp+arg_0]
.text:00009B9D                 mov     [eax], ecx
.text:00009B9F                 cmp     [ebp+arg_0], 0
.text:00009BA3                 jz      short loc_9BBC
.text:00009BA5                 mov     edx, [ebp+arg_0]
.text:00009BA8                 mov     eax, [edx]
.text:00009BAA                 mov     esi, esp
.text:00009BAC                 mov     ecx, [ebp+arg_0]
.text:00009BAF                 push    ecx
.text:00009BB0                 mov     edx, [eax+4]
.text:00009BB3                 call    edx
.text:00009BB5                 cmp     esi, esp
.text:00009BB7                 call    __RTC_CheckEsp
.text:00009BBC
.text:00009BBC loc_9BBC:                               ; CODE XREF: CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>(IArchiveOpenCallback *)+1Bj
.text:00009BBC                 mov     eax, [ebp+var_4]
.text:00009BBF                 pop     esi
.text:00009BC0                 add     esp, 4
.text:00009BC3                 cmp     ebp, esp
.text:00009BC5                 call    __RTC_CheckEsp
.text:00009BCA                 mov     esp, ebp
.text:00009BCC                 pop     ebp
.text:00009BCD                 retn    4
.text:00009BCD ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z endp
.text:00009BCD
.text:00009BCD _text           ends
.text:00009BCD
.text:00009BD0 ; ===========================================================================
.text:00009BD0
.text:00009BD0 ; Segment type: Pure code
.text:00009BD0 ; Segment permissions: Read/Execute
.text:00009BD0 _text           segment para public 'CODE' use32
.text:00009BD0                 assume cs:_text
.text:00009BD0                 ;org 9BD0h
.text:00009BD0 ; COMDAT (pick any)
.text:00009BD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009BD0
.text:00009BD0 ; =============== S U B R O U T I N E =======================================
.text:00009BD0
.text:00009BD0 ; Attributes: bp-based frame
.text:00009BD0
.text:00009BD0 ; public: __thiscall CMyComPtr<struct IArchiveOpenCallback>::~CMyComPtr<struct IArchiveOpenCallback>(void)
.text:00009BD0                 public ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ
.text:00009BD0 ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ proc near
.text:00009BD0                                         ; CODE XREF: NArchive::NZip::CProgressImp::~CProgressImp(void)+14p
.text:00009BD0
.text:00009BD0 var_4           = dword ptr -4
.text:00009BD0
.text:00009BD0                 push    ebp
.text:00009BD1                 mov     ebp, esp
.text:00009BD3                 push    ecx
.text:00009BD4                 push    esi
.text:00009BD5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009BDC                 mov     [ebp+var_4], ecx
.text:00009BDF                 mov     eax, [ebp+var_4]
.text:00009BE2                 cmp     dword ptr [eax], 0
.text:00009BE5                 jz      short loc_9C02
.text:00009BE7                 mov     ecx, [ebp+var_4]
.text:00009BEA                 mov     edx, [ecx]
.text:00009BEC                 mov     eax, [ebp+var_4]
.text:00009BEF                 mov     ecx, [eax]
.text:00009BF1                 mov     edx, [edx]
.text:00009BF3                 mov     esi, esp
.text:00009BF5                 push    ecx
.text:00009BF6                 mov     eax, [edx+8]
.text:00009BF9                 call    eax
.text:00009BFB                 cmp     esi, esp
.text:00009BFD                 call    __RTC_CheckEsp
.text:00009C02
.text:00009C02 loc_9C02:                               ; CODE XREF: CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)+15j
.text:00009C02                 pop     esi
.text:00009C03                 add     esp, 4
.text:00009C06                 cmp     ebp, esp
.text:00009C08                 call    __RTC_CheckEsp
.text:00009C0D                 mov     esp, ebp
.text:00009C0F                 pop     ebp
.text:00009C10                 retn
.text:00009C10 ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ endp
.text:00009C10
.text:00009C10 ; ---------------------------------------------------------------------------
.text:00009C11                 align 4
.text:00009C11 _text           ends
.text:00009C11
.text:00009C14 ; ===========================================================================
.text:00009C14
.text:00009C14 ; Segment type: Pure code
.text:00009C14 ; Segment permissions: Read/Execute
.text:00009C14 _text           segment para public 'CODE' use32
.text:00009C14                 assume cs:_text
.text:00009C14                 ;org 9C14h
.text:00009C14 ; COMDAT (pick any)
.text:00009C14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009C14
.text:00009C14 ; =============== S U B R O U T I N E =======================================
.text:00009C14
.text:00009C14 ; Attributes: bp-based frame
.text:00009C14
.text:00009C14 ; public: struct IArchiveOpenCallback * __thiscall CMyComPtr<struct IArchiveOpenCallback>::operator->(void)const
.text:00009C14                 public ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ
.text:00009C14 ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ proc near
.text:00009C14                                         ; CODE XREF: NArchive::NZip::CProgressImp::SetCompletedLocal(unsigned __int64,unsigned __int64)+1Ep
.text:00009C14                                         ; NArchive::NZip::CProgressImp::SetTotalCD(unsigned __int64)+1Ep ...
.text:00009C14
.text:00009C14 var_4           = dword ptr -4
.text:00009C14
.text:00009C14                 push    ebp
.text:00009C15                 mov     ebp, esp
.text:00009C17                 push    ecx
.text:00009C18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009C1F                 mov     [ebp+var_4], ecx
.text:00009C22                 mov     eax, [ebp+var_4]
.text:00009C25                 mov     eax, [eax]
.text:00009C27                 mov     esp, ebp
.text:00009C29                 pop     ebp
.text:00009C2A                 retn
.text:00009C2A ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ endp
.text:00009C2A
.text:00009C2A ; ---------------------------------------------------------------------------
.text:00009C2B                 align 4
.text:00009C2B _text           ends
.text:00009C2B
.text:00009C2C ; ===========================================================================
.text:00009C2C
.text:00009C2C ; Segment type: Pure code
.text:00009C2C ; Segment permissions: Read/Execute
.text:00009C2C _text           segment para public 'CODE' use32
.text:00009C2C                 assume cs:_text
.text:00009C2C                 ;org 9C2Ch
.text:00009C2C ; COMDAT (pick any)
.text:00009C2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009C2C
.text:00009C2C ; =============== S U B R O U T I N E =======================================
.text:00009C2C
.text:00009C2C ; Attributes: bp-based frame
.text:00009C2C
.text:00009C2C ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::CMyComPtr<struct ICryptoGetTextPassword>(void)
.text:00009C2C                 public ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
.text:00009C2C ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ proc near
.text:00009C2C                                         ; CODE XREF: NArchive::NZip::CZipDecoder::CZipDecoder(void)+99p
.text:00009C2C
.text:00009C2C var_4           = dword ptr -4
.text:00009C2C
.text:00009C2C                 push    ebp
.text:00009C2D                 mov     ebp, esp
.text:00009C2F                 push    ecx
.text:00009C30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009C37                 mov     [ebp+var_4], ecx
.text:00009C3A                 mov     eax, [ebp+var_4]
.text:00009C3D                 mov     dword ptr [eax], 0
.text:00009C43                 mov     eax, [ebp+var_4]
.text:00009C46                 mov     esp, ebp
.text:00009C48                 pop     ebp
.text:00009C49                 retn
.text:00009C49 ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ endp
.text:00009C49
.text:00009C49 ; ---------------------------------------------------------------------------
.text:00009C4A                 align 4
.text:00009C4A _text           ends
.text:00009C4A
.text:00009C4C ; ===========================================================================
.text:00009C4C
.text:00009C4C ; Segment type: Pure code
.text:00009C4C ; Segment permissions: Read/Execute
.text:00009C4C _text           segment para public 'CODE' use32
.text:00009C4C                 assume cs:_text
.text:00009C4C                 ;org 9C4Ch
.text:00009C4C ; COMDAT (pick any)
.text:00009C4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009C4C
.text:00009C4C ; =============== S U B R O U T I N E =======================================
.text:00009C4C
.text:00009C4C ; Attributes: bp-based frame
.text:00009C4C
.text:00009C4C ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::~CMyComPtr<struct ICryptoGetTextPassword>(void)
.text:00009C4C                 public ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
.text:00009C4C ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ proc near
.text:00009C4C                                         ; CODE XREF: __unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$4+6j
.text:00009C4C                                         ; NArchive::NZip::CZipDecoder::~CZipDecoder(void)+49p ...
.text:00009C4C
.text:00009C4C var_4           = dword ptr -4
.text:00009C4C
.text:00009C4C                 push    ebp
.text:00009C4D                 mov     ebp, esp
.text:00009C4F                 push    ecx
.text:00009C50                 push    esi
.text:00009C51                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009C58                 mov     [ebp+var_4], ecx
.text:00009C5B                 mov     eax, [ebp+var_4]
.text:00009C5E                 cmp     dword ptr [eax], 0
.text:00009C61                 jz      short loc_9C7E
.text:00009C63                 mov     ecx, [ebp+var_4]
.text:00009C66                 mov     edx, [ecx]
.text:00009C68                 mov     eax, [ebp+var_4]
.text:00009C6B                 mov     ecx, [eax]
.text:00009C6D                 mov     edx, [edx]
.text:00009C6F                 mov     esi, esp
.text:00009C71                 push    ecx
.text:00009C72                 mov     eax, [edx+8]
.text:00009C75                 call    eax
.text:00009C77                 cmp     esi, esp
.text:00009C79                 call    __RTC_CheckEsp
.text:00009C7E
.text:00009C7E loc_9C7E:                               ; CODE XREF: CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)+15j
.text:00009C7E                 pop     esi
.text:00009C7F                 add     esp, 4
.text:00009C82                 cmp     ebp, esp
.text:00009C84                 call    __RTC_CheckEsp
.text:00009C89                 mov     esp, ebp
.text:00009C8B                 pop     ebp
.text:00009C8C                 retn
.text:00009C8C ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ endp
.text:00009C8C
.text:00009C8C ; ---------------------------------------------------------------------------
.text:00009C8D                 align 10h
.text:00009C8D _text           ends
.text:00009C8D
.text:00009C90 ; ===========================================================================
.text:00009C90
.text:00009C90 ; Segment type: Pure code
.text:00009C90 ; Segment permissions: Read/Execute
.text:00009C90 _text           segment para public 'CODE' use32
.text:00009C90                 assume cs:_text
.text:00009C90                 ;org 9C90h
.text:00009C90 ; COMDAT (pick any)
.text:00009C90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009C90
.text:00009C90 ; =============== S U B R O U T I N E =======================================
.text:00009C90
.text:00009C90 ; Attributes: bp-based frame
.text:00009C90
.text:00009C90 ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::operator struct ICryptoGetTextPassword *(void)const
.text:00009C90                 public ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ
.text:00009C90 ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ proc near
.text:00009C90                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+5E7p
.text:00009C90
.text:00009C90 var_4           = dword ptr -4
.text:00009C90
.text:00009C90                 push    ebp
.text:00009C91                 mov     ebp, esp
.text:00009C93                 push    ecx
.text:00009C94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009C9B                 mov     [ebp+var_4], ecx
.text:00009C9E                 mov     eax, [ebp+var_4]
.text:00009CA1                 mov     eax, [eax]
.text:00009CA3                 mov     esp, ebp
.text:00009CA5                 pop     ebp
.text:00009CA6                 retn
.text:00009CA6 ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ endp
.text:00009CA6
.text:00009CA6 ; ---------------------------------------------------------------------------
.text:00009CA7                 align 4
.text:00009CA7 _text           ends
.text:00009CA7
.text:00009CA8 ; ===========================================================================
.text:00009CA8
.text:00009CA8 ; Segment type: Pure code
.text:00009CA8 ; Segment permissions: Read/Execute
.text:00009CA8 _text           segment para public 'CODE' use32
.text:00009CA8                 assume cs:_text
.text:00009CA8                 ;org 9CA8h
.text:00009CA8 ; COMDAT (pick any)
.text:00009CA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009CA8
.text:00009CA8 ; =============== S U B R O U T I N E =======================================
.text:00009CA8
.text:00009CA8 ; Attributes: bp-based frame
.text:00009CA8
.text:00009CA8 ; public: struct ICryptoGetTextPassword * * __thiscall CMyComPtr<struct ICryptoGetTextPassword>::operator&(void)
.text:00009CA8                 public ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ
.text:00009CA8 ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ proc near
.text:00009CA8                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+5C0p
.text:00009CA8
.text:00009CA8 var_4           = dword ptr -4
.text:00009CA8
.text:00009CA8                 push    ebp
.text:00009CA9                 mov     ebp, esp
.text:00009CAB                 push    ecx
.text:00009CAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009CB3                 mov     [ebp+var_4], ecx
.text:00009CB6                 mov     eax, [ebp+var_4]
.text:00009CB9                 mov     esp, ebp
.text:00009CBB                 pop     ebp
.text:00009CBC                 retn
.text:00009CBC ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ endp
.text:00009CBC
.text:00009CBC ; ---------------------------------------------------------------------------
.text:00009CBD                 align 10h
.text:00009CBD _text           ends
.text:00009CBD
.text:00009CC0 ; ===========================================================================
.text:00009CC0
.text:00009CC0 ; Segment type: Pure code
.text:00009CC0 ; Segment permissions: Read/Execute
.text:00009CC0 _text           segment para public 'CODE' use32
.text:00009CC0                 assume cs:_text
.text:00009CC0                 ;org 9CC0h
.text:00009CC0 ; COMDAT (pick any)
.text:00009CC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009CC0
.text:00009CC0 ; =============== S U B R O U T I N E =======================================
.text:00009CC0
.text:00009CC0 ; Attributes: bp-based frame
.text:00009CC0
.text:00009CC0 ; public: struct ICryptoGetTextPassword * __thiscall CMyComPtr<struct ICryptoGetTextPassword>::operator->(void)const
.text:00009CC0                 public ??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ
.text:00009CC0 ??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ proc near
.text:00009CC0                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+609p
.text:00009CC0
.text:00009CC0 var_4           = dword ptr -4
.text:00009CC0
.text:00009CC0                 push    ebp
.text:00009CC1                 mov     ebp, esp
.text:00009CC3                 push    ecx
.text:00009CC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009CCB                 mov     [ebp+var_4], ecx
.text:00009CCE                 mov     eax, [ebp+var_4]
.text:00009CD1                 mov     eax, [eax]
.text:00009CD3                 mov     esp, ebp
.text:00009CD5                 pop     ebp
.text:00009CD6                 retn
.text:00009CD6 ??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ endp
.text:00009CD6
.text:00009CD6 ; ---------------------------------------------------------------------------
.text:00009CD7                 align 4
.text:00009CD7 _text           ends
.text:00009CD7
.text:00009CD8 ; ===========================================================================
.text:00009CD8
.text:00009CD8 ; Segment type: Pure code
.text:00009CD8 ; Segment permissions: Read/Execute
.text:00009CD8 _text           segment para public 'CODE' use32
.text:00009CD8                 assume cs:_text
.text:00009CD8                 ;org 9CD8h
.text:00009CD8 ; COMDAT (pick any)
.text:00009CD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009CD8
.text:00009CD8 ; =============== S U B R O U T I N E =======================================
.text:00009CD8
.text:00009CD8 ; Attributes: bp-based frame
.text:00009CD8
.text:00009CD8 ; public: bool __thiscall CMyComPtr<struct ICryptoGetTextPassword>::operator!(void)const
.text:00009CD8                 public ??7?$CMyComPtr@UICryptoGetTextPassword@@@@QBE_NXZ
.text:00009CD8 ??7?$CMyComPtr@UICryptoGetTextPassword@@@@QBE_NXZ proc near
.text:00009CD8                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+5AEp
.text:00009CD8
.text:00009CD8 var_4           = dword ptr -4
.text:00009CD8
.text:00009CD8                 push    ebp
.text:00009CD9                 mov     ebp, esp
.text:00009CDB                 push    ecx
.text:00009CDC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009CE3                 mov     [ebp+var_4], ecx
.text:00009CE6                 mov     eax, [ebp+var_4]
.text:00009CE9                 xor     ecx, ecx
.text:00009CEB                 cmp     dword ptr [eax], 0
.text:00009CEE                 setz    cl
.text:00009CF1                 mov     al, cl
.text:00009CF3                 mov     esp, ebp
.text:00009CF5                 pop     ebp
.text:00009CF6                 retn
.text:00009CF6 ??7?$CMyComPtr@UICryptoGetTextPassword@@@@QBE_NXZ endp
.text:00009CF6
.text:00009CF6 ; ---------------------------------------------------------------------------
.text:00009CF7                 align 4
.text:00009CF7 _text           ends
.text:00009CF7
.text:00009CF8 ; ===========================================================================
.text:00009CF8
.text:00009CF8 ; Segment type: Pure code
.text:00009CF8 ; Segment permissions: Read/Execute
.text:00009CF8 _text           segment para public 'CODE' use32
.text:00009CF8                 assume cs:_text
.text:00009CF8                 ;org 9CF8h
.text:00009CF8 ; COMDAT (pick any)
.text:00009CF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009CF8
.text:00009CF8 ; =============== S U B R O U T I N E =======================================
.text:00009CF8
.text:00009CF8 ; Attributes: bp-based frame
.text:00009CF8
.text:00009CF8 ; public: unsigned int __thiscall CObjectVector<struct NArchive::NZip::CMethodItem>::Size(void)const
.text:00009CF8                 public ?Size@?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QBEIXZ
.text:00009CF8 ?Size@?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QBEIXZ proc near
.text:00009CF8                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+98Bp
.text:00009CF8                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+9BBp
.text:00009CF8
.text:00009CF8 var_4           = dword ptr -4
.text:00009CF8
.text:00009CF8                 push    ebp
.text:00009CF9                 mov     ebp, esp
.text:00009CFB                 push    ecx
.text:00009CFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009D03                 mov     [ebp+var_4], ecx
.text:00009D06                 mov     ecx, [ebp+var_4]
.text:00009D09                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00009D0E                 add     esp, 4
.text:00009D11                 cmp     ebp, esp
.text:00009D13                 call    __RTC_CheckEsp
.text:00009D18                 mov     esp, ebp
.text:00009D1A                 pop     ebp
.text:00009D1B                 retn
.text:00009D1B ?Size@?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QBEIXZ endp
.text:00009D1B
.text:00009D1B _text           ends
.text:00009D1B
.text:00009D1C ; ===========================================================================
.text:00009D1C
.text:00009D1C ; Segment type: Pure code
.text:00009D1C ; Segment permissions: Read/Execute
.text:00009D1C _text           segment para public 'CODE' use32
.text:00009D1C                 assume cs:_text
.text:00009D1C                 ;org 9D1Ch
.text:00009D1C ; COMDAT (pick any)
.text:00009D1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009D1C
.text:00009D1C ; =============== S U B R O U T I N E =======================================
.text:00009D1C
.text:00009D1C ; Attributes: bp-based frame
.text:00009D1C
.text:00009D1C ; public: __thiscall CObjectVector<struct NArchive::NZip::CMethodItem>::CObjectVector<struct NArchive::NZip::CMethodItem>(void)
.text:00009D1C                 public ??0?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ
.text:00009D1C ??0?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ proc near
.text:00009D1C                                         ; CODE XREF: NArchive::NZip::CZipDecoder::CZipDecoder(void)+A8p
.text:00009D1C
.text:00009D1C var_4           = dword ptr -4
.text:00009D1C
.text:00009D1C                 push    ebp
.text:00009D1D                 mov     ebp, esp
.text:00009D1F                 push    ecx
.text:00009D20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009D27                 mov     [ebp+var_4], ecx
.text:00009D2A                 mov     ecx, [ebp+var_4]
.text:00009D2D                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00009D32                 mov     eax, [ebp+var_4]
.text:00009D35                 add     esp, 4
.text:00009D38                 cmp     ebp, esp
.text:00009D3A                 call    __RTC_CheckEsp
.text:00009D3F                 mov     esp, ebp
.text:00009D41                 pop     ebp
.text:00009D42                 retn
.text:00009D42 ??0?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ endp
.text:00009D42
.text:00009D42 ; ---------------------------------------------------------------------------
.text:00009D43                 align 4
.text:00009D43 _text           ends
.text:00009D43
.text:00009D44 ; ===========================================================================
.text:00009D44
.text:00009D44 ; Segment type: Pure code
.text:00009D44 ; Segment permissions: Read/Execute
.text:00009D44 _text           segment para public 'CODE' use32
.text:00009D44                 assume cs:_text
.text:00009D44                 ;org 9D44h
.text:00009D44 ; COMDAT (pick any)
.text:00009D44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009D44
.text:00009D44 ; =============== S U B R O U T I N E =======================================
.text:00009D44
.text:00009D44 ; Attributes: bp-based frame
.text:00009D44
.text:00009D44 ; public: struct NArchive::NZip::CMethodItem & __thiscall CObjectVector<struct NArchive::NZip::CMethodItem>::operator[](unsigned int)
.text:00009D44                 public ??A?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAEAAUCMethodItem@NZip@NArchive@@I@Z
.text:00009D44 ??A?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAEAAUCMethodItem@NZip@NArchive@@I@Z proc near
.text:00009D44                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+9A5p
.text:00009D44                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+E24p
.text:00009D44
.text:00009D44 var_4           = dword ptr -4
.text:00009D44 arg_0           = dword ptr  8
.text:00009D44
.text:00009D44                 push    ebp
.text:00009D45                 mov     ebp, esp
.text:00009D47                 push    ecx
.text:00009D48                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009D4F                 mov     [ebp+var_4], ecx
.text:00009D52                 mov     eax, [ebp+arg_0]
.text:00009D55                 push    eax
.text:00009D56                 mov     ecx, [ebp+var_4]
.text:00009D59                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00009D5E                 mov     eax, [eax]
.text:00009D60                 add     esp, 4
.text:00009D63                 cmp     ebp, esp
.text:00009D65                 call    __RTC_CheckEsp
.text:00009D6A                 mov     esp, ebp
.text:00009D6C                 pop     ebp
.text:00009D6D                 retn    4
.text:00009D6D ??A?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAEAAUCMethodItem@NZip@NArchive@@I@Z endp
.text:00009D6D
.text:00009D6D _text           ends
.text:00009D6D
.text:00009D70 ; ===========================================================================
.text:00009D70
.text:00009D70 ; Segment type: Pure code
.text:00009D70 ; Segment permissions: Read/Execute
.text:00009D70 _text           segment para public 'CODE' use32
.text:00009D70                 assume cs:_text
.text:00009D70                 ;org 9D70h
.text:00009D70 ; COMDAT (pick any)
.text:00009D70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009D70
.text:00009D70 ; =============== S U B R O U T I N E =======================================
.text:00009D70
.text:00009D70 ; Attributes: bp-based frame
.text:00009D70
.text:00009D70 ; int __stdcall CObjectVector<NArchive::NZip::CMethodItem>::Add(struct NArchive::NZip::CMethodItem *)
.text:00009D70                 public ?Add@?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAEIABUCMethodItem@NZip@NArchive@@@Z
.text:00009D70 ?Add@?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAEIABUCMethodItem@NZip@NArchive@@@Z proc near
.text:00009D70                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+DFDp
.text:00009D70
.text:00009D70 var_C           = dword ptr -0Ch
.text:00009D70 var_8           = dword ptr -8
.text:00009D70 var_4           = dword ptr -4
.text:00009D70 arg_0           = dword ptr  8
.text:00009D70
.text:00009D70                 push    ebp
.text:00009D71                 mov     ebp, esp
.text:00009D73                 sub     esp, 0Ch
.text:00009D76                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00009D7D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00009D84                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009D8B                 mov     [ebp+var_4], ecx
.text:00009D8E                 push    8               ; unsigned int
.text:00009D90                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00009D95                 add     esp, 4
.text:00009D98                 mov     [ebp+var_8], eax
.text:00009D9B                 cmp     [ebp+var_8], 0
.text:00009D9F                 jz      short loc_9DB2
.text:00009DA1                 mov     eax, [ebp+arg_0]
.text:00009DA4                 push    eax             ; struct NArchive::NZip::CMethodItem *
.text:00009DA5                 mov     ecx, [ebp+var_8] ; this
.text:00009DA8                 call    ??0CMethodItem@NZip@NArchive@@QAE@ABU012@@Z ; NArchive::NZip::CMethodItem::CMethodItem(NArchive::NZip::CMethodItem const &)
.text:00009DAD                 mov     [ebp+var_C], eax
.text:00009DB0                 jmp     short loc_9DB9
.text:00009DB2 ; ---------------------------------------------------------------------------
.text:00009DB2
.text:00009DB2 loc_9DB2:                               ; CODE XREF: CObjectVector<NArchive::NZip::CMethodItem>::Add(NArchive::NZip::CMethodItem const &)+2Fj
.text:00009DB2                 mov     [ebp+var_C], 0
.text:00009DB9
.text:00009DB9 loc_9DB9:                               ; CODE XREF: CObjectVector<NArchive::NZip::CMethodItem>::Add(NArchive::NZip::CMethodItem const &)+40j
.text:00009DB9                 mov     ecx, [ebp+var_C]
.text:00009DBC                 push    ecx
.text:00009DBD                 mov     ecx, [ebp+var_4]
.text:00009DC0                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00009DC5                 add     esp, 0Ch
.text:00009DC8                 cmp     ebp, esp
.text:00009DCA                 call    __RTC_CheckEsp
.text:00009DCF                 mov     esp, ebp
.text:00009DD1                 pop     ebp
.text:00009DD2                 retn    4
.text:00009DD2 ?Add@?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAEIABUCMethodItem@NZip@NArchive@@@Z endp
.text:00009DD2
.text:00009DD2 ; ---------------------------------------------------------------------------
.text:00009DD5                 align 4
.text:00009DD5 _text           ends
.text:00009DD5
.text:00009DD8 ; ===========================================================================
.text:00009DD8
.text:00009DD8 ; Segment type: Pure code
.text:00009DD8 ; Segment permissions: Read/Execute
.text:00009DD8 _text           segment para public 'CODE' use32
.text:00009DD8                 assume cs:_text
.text:00009DD8                 ;org 9DD8h
.text:00009DD8 ; COMDAT (pick any)
.text:00009DD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009DD8
.text:00009DD8 ; =============== S U B R O U T I N E =======================================
.text:00009DD8
.text:00009DD8 ; Attributes: bp-based frame
.text:00009DD8
.text:00009DD8 ; public: __thiscall CObjectVector<struct NArchive::NZip::CMethodItem>::~CObjectVector<struct NArchive::NZip::CMethodItem>(void)
.text:00009DD8                 public ??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ
.text:00009DD8 ??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ proc near
.text:00009DD8                                         ; CODE XREF: NArchive::NZip::CZipDecoder::~CZipDecoder(void)+3Ap
.text:00009DD8
.text:00009DD8 var_20          = dword ptr -20h
.text:00009DD8 var_1C          = dword ptr -1Ch
.text:00009DD8 var_18          = dword ptr -18h
.text:00009DD8 var_14          = dword ptr -14h
.text:00009DD8 var_10          = dword ptr -10h
.text:00009DD8 var_C           = dword ptr -0Ch
.text:00009DD8 var_4           = dword ptr -4
.text:00009DD8
.text:00009DD8                 push    ebp
.text:00009DD9                 mov     ebp, esp
.text:00009DDB                 push    0FFFFFFFFh
.text:00009DDD                 push    offset __ehhandler$??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ
.text:00009DE2                 mov     eax, large fs:0
.text:00009DE8                 push    eax
.text:00009DE9                 sub     esp, 14h
.text:00009DEC                 mov     eax, 0CCCCCCCCh
.text:00009DF1                 mov     [ebp+var_20], eax
.text:00009DF4                 mov     [ebp+var_1C], eax
.text:00009DF7                 mov     [ebp+var_18], eax
.text:00009DFA                 mov     [ebp+var_14], eax
.text:00009DFD                 mov     [ebp+var_10], eax
.text:00009E00                 mov     eax, dword ptr ds:___security_cookie
.text:00009E05                 xor     eax, ebp
.text:00009E07                 push    eax
.text:00009E08                 lea     eax, [ebp+var_C]
.text:00009E0B                 mov     large fs:0, eax
.text:00009E11                 mov     [ebp+var_10], ecx
.text:00009E14                 mov     [ebp+var_4], 0
.text:00009E1B                 mov     ecx, [ebp+var_10]
.text:00009E1E                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00009E23                 mov     [ebp+var_14], eax
.text:00009E26
.text:00009E26 loc_9E26:                               ; CODE XREF: CObjectVector<NArchive::NZip::CMethodItem>::~CObjectVector<NArchive::NZip::CMethodItem>(void):loc_9E68j
.text:00009E26                 cmp     [ebp+var_14], 0
.text:00009E2A                 jz      short loc_9E6A
.text:00009E2C                 mov     eax, [ebp+var_14]
.text:00009E2F                 sub     eax, 1
.text:00009E32                 mov     [ebp+var_14], eax
.text:00009E35                 mov     ecx, [ebp+var_14]
.text:00009E38                 push    ecx
.text:00009E39                 mov     ecx, [ebp+var_10]
.text:00009E3C                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00009E41                 mov     edx, [eax]
.text:00009E43                 mov     [ebp+var_1C], edx
.text:00009E46                 mov     eax, [ebp+var_1C]
.text:00009E49                 mov     [ebp+var_18], eax
.text:00009E4C                 cmp     [ebp+var_18], 0
.text:00009E50                 jz      short loc_9E61
.text:00009E52                 push    1
.text:00009E54                 mov     ecx, [ebp+var_18]
.text:00009E57                 call    ??_GCMethodItem@NZip@NArchive@@QAEPAXI@Z ; NArchive::NZip::CMethodItem::`scalar deleting destructor'(uint)
.text:00009E5C                 mov     [ebp+var_20], eax
.text:00009E5F                 jmp     short loc_9E68
.text:00009E61 ; ---------------------------------------------------------------------------
.text:00009E61
.text:00009E61 loc_9E61:                               ; CODE XREF: CObjectVector<NArchive::NZip::CMethodItem>::~CObjectVector<NArchive::NZip::CMethodItem>(void)+78j
.text:00009E61                 mov     [ebp+var_20], 0
.text:00009E68
.text:00009E68 loc_9E68:                               ; CODE XREF: CObjectVector<NArchive::NZip::CMethodItem>::~CObjectVector<NArchive::NZip::CMethodItem>(void)+87j
.text:00009E68                 jmp     short loc_9E26
.text:00009E6A ; ---------------------------------------------------------------------------
.text:00009E6A
.text:00009E6A loc_9E6A:                               ; CODE XREF: CObjectVector<NArchive::NZip::CMethodItem>::~CObjectVector<NArchive::NZip::CMethodItem>(void)+52j
.text:00009E6A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00009E71                 mov     ecx, [ebp+var_10]
.text:00009E74                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00009E79                 mov     ecx, [ebp+var_C]
.text:00009E7C                 mov     large fs:0, ecx
.text:00009E83                 pop     ecx
.text:00009E84                 add     esp, 20h
.text:00009E87                 cmp     ebp, esp
.text:00009E89                 call    __RTC_CheckEsp
.text:00009E8E                 mov     esp, ebp
.text:00009E90                 pop     ebp
.text:00009E91                 retn
.text:00009E91 ??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ endp
.text:00009E91
.text:00009E91 ; ---------------------------------------------------------------------------
.text:00009E92                 align 4
.text:00009E92 _text           ends
.text:00009E92
.text$x:00009E94 ; ===========================================================================
.text$x:00009E94
.text$x:00009E94 ; Segment type: Pure code
.text$x:00009E94 ; Segment permissions: Read/Execute
.text$x:00009E94 _text$x         segment para public 'CODE' use32
.text$x:00009E94                 assume cs:_text$x
.text$x:00009E94                 ;org 9E94h
.text$x:00009E94 ; COMDAT (pick associative to section at 9DD8)
.text$x:00009E94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009E94
.text$x:00009E94 ; =============== S U B R O U T I N E =======================================
.text$x:00009E94
.text$x:00009E94
.text$x:00009E94 __unwindfunclet$??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ$0 proc near
.text$x:00009E94                                         ; DATA XREF: .xdata$x:00009EBCo
.text$x:00009E94                 mov     ecx, [ebp-10h]
.text$x:00009E97                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00009E97 __unwindfunclet$??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ$0 endp
.text$x:00009E97
.text$x:00009E9C
.text$x:00009E9C ; =============== S U B R O U T I N E =======================================
.text$x:00009E9C
.text$x:00009E9C
.text$x:00009E9C __ehhandler$??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ proc near
.text$x:00009E9C                                         ; DATA XREF: CObjectVector<NArchive::NZip::CMethodItem>::~CObjectVector<NArchive::NZip::CMethodItem>(void)+5o
.text$x:00009E9C
.text$x:00009E9C arg_4           = dword ptr  8
.text$x:00009E9C
.text$x:00009E9C                 mov     edx, [esp+arg_4]
.text$x:00009EA0                 lea     eax, [edx+0Ch]
.text$x:00009EA3                 mov     ecx, [edx-18h]
.text$x:00009EA6                 xor     ecx, eax
.text$x:00009EA8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009EAD                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ
.text$x:00009EB2                 jmp     ___CxxFrameHandler3
.text$x:00009EB2 __ehhandler$??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ endp
.text$x:00009EB2
.text$x:00009EB2 ; ---------------------------------------------------------------------------
.text$x:00009EB7                 align 4
.text$x:00009EB7 _text$x         ends
.text$x:00009EB7
.xdata$x:00009EB8 ; ===========================================================================
.xdata$x:00009EB8
.xdata$x:00009EB8 ; Segment type: Pure data
.xdata$x:00009EB8 ; Segment permissions: Read
.xdata$x:00009EB8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009EB8                 assume cs:_xdata$x
.xdata$x:00009EB8                 ;org 9EB8h
.xdata$x:00009EB8 ; COMDAT (pick associative to section at 9DD8)
.xdata$x:00009EB8 __unwindtable$??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:00009EB8                                         ; DATA XREF: .xdata$x:00009EC8o
.xdata$x:00009EB9                 db 0FFh
.xdata$x:00009EBA                 db 0FFh
.xdata$x:00009EBB                 db 0FFh
.xdata$x:00009EBC                 dd offset __unwindfunclet$??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ$0
.xdata$x:00009EC0 __ehfuncinfo$??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:00009EC0                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ+11o
.xdata$x:00009EC1                 db    5
.xdata$x:00009EC2                 db  93h ; ô
.xdata$x:00009EC3                 db  19h
.xdata$x:00009EC4                 db    1
.xdata$x:00009EC5                 db    0
.xdata$x:00009EC6                 db    0
.xdata$x:00009EC7                 db    0
.xdata$x:00009EC8                 dd offset __unwindtable$??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ
.xdata$x:00009ECC                 align 20h
.xdata$x:00009EE0                 db    1
.xdata$x:00009EE1                 db    0
.xdata$x:00009EE2                 db    0
.xdata$x:00009EE3                 db    0
.xdata$x:00009EE3 _xdata$x        ends
.xdata$x:00009EE3
.text:00009EE4 ; ===========================================================================
.text:00009EE4
.text:00009EE4 ; Segment type: Pure code
.text:00009EE4 ; Segment permissions: Read/Execute
.text:00009EE4 _text           segment para public 'CODE' use32
.text:00009EE4                 assume cs:_text
.text:00009EE4                 ;org 9EE4h
.text:00009EE4 ; COMDAT (pick any)
.text:00009EE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009EE4
.text:00009EE4 ; =============== S U B R O U T I N E =======================================
.text:00009EE4
.text:00009EE4 ; Attributes: bp-based frame
.text:00009EE4
.text:00009EE4 ; public: __thiscall CMyComPtr<struct ICompressSetCoderMt>::CMyComPtr<struct ICompressSetCoderMt>(void)
.text:00009EE4                 public ??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ
.text:00009EE4 ??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ proc near
.text:00009EE4                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+F47p
.text:00009EE4
.text:00009EE4 var_4           = dword ptr -4
.text:00009EE4
.text:00009EE4                 push    ebp
.text:00009EE5                 mov     ebp, esp
.text:00009EE7                 push    ecx
.text:00009EE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009EEF                 mov     [ebp+var_4], ecx
.text:00009EF2                 mov     eax, [ebp+var_4]
.text:00009EF5                 mov     dword ptr [eax], 0
.text:00009EFB                 mov     eax, [ebp+var_4]
.text:00009EFE                 mov     esp, ebp
.text:00009F00                 pop     ebp
.text:00009F01                 retn
.text:00009F01 ??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ endp
.text:00009F01
.text:00009F01 ; ---------------------------------------------------------------------------
.text:00009F02                 align 4
.text:00009F02 _text           ends
.text:00009F02
.text:00009F04 ; ===========================================================================
.text:00009F04
.text:00009F04 ; Segment type: Pure code
.text:00009F04 ; Segment permissions: Read/Execute
.text:00009F04 _text           segment para public 'CODE' use32
.text:00009F04                 assume cs:_text
.text:00009F04                 ;org 9F04h
.text:00009F04 ; COMDAT (pick any)
.text:00009F04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009F04
.text:00009F04 ; =============== S U B R O U T I N E =======================================
.text:00009F04
.text:00009F04 ; Attributes: bp-based frame
.text:00009F04
.text:00009F04 ; public: __thiscall CMyComPtr<struct ICompressSetCoderMt>::~CMyComPtr<struct ICompressSetCoderMt>(void)
.text:00009F04                 public ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ
.text:00009F04 ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ proc near
.text:00009F04                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+FE7p
.text:00009F04                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1034p ...
.text:00009F04
.text:00009F04 var_4           = dword ptr -4
.text:00009F04
.text:00009F04                 push    ebp
.text:00009F05                 mov     ebp, esp
.text:00009F07                 push    ecx
.text:00009F08                 push    esi
.text:00009F09                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009F10                 mov     [ebp+var_4], ecx
.text:00009F13                 mov     eax, [ebp+var_4]
.text:00009F16                 cmp     dword ptr [eax], 0
.text:00009F19                 jz      short loc_9F36
.text:00009F1B                 mov     ecx, [ebp+var_4]
.text:00009F1E                 mov     edx, [ecx]
.text:00009F20                 mov     eax, [ebp+var_4]
.text:00009F23                 mov     ecx, [eax]
.text:00009F25                 mov     edx, [edx]
.text:00009F27                 mov     esi, esp
.text:00009F29                 push    ecx
.text:00009F2A                 mov     eax, [edx+8]
.text:00009F2D                 call    eax
.text:00009F2F                 cmp     esi, esp
.text:00009F31                 call    __RTC_CheckEsp
.text:00009F36
.text:00009F36 loc_9F36:                               ; CODE XREF: CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>(void)+15j
.text:00009F36                 pop     esi
.text:00009F37                 add     esp, 4
.text:00009F3A                 cmp     ebp, esp
.text:00009F3C                 call    __RTC_CheckEsp
.text:00009F41                 mov     esp, ebp
.text:00009F43                 pop     ebp
.text:00009F44                 retn
.text:00009F44 ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ endp
.text:00009F44
.text:00009F44 ; ---------------------------------------------------------------------------
.text:00009F45                 align 4
.text:00009F45 _text           ends
.text:00009F45
.text:00009F48 ; ===========================================================================
.text:00009F48
.text:00009F48 ; Segment type: Pure code
.text:00009F48 ; Segment permissions: Read/Execute
.text:00009F48 _text           segment para public 'CODE' use32
.text:00009F48                 assume cs:_text
.text:00009F48                 ;org 9F48h
.text:00009F48 ; COMDAT (pick any)
.text:00009F48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009F48
.text:00009F48 ; =============== S U B R O U T I N E =======================================
.text:00009F48
.text:00009F48 ; Attributes: bp-based frame
.text:00009F48
.text:00009F48 ; public: __thiscall CMyComPtr<struct ICompressSetCoderMt>::operator struct ICompressSetCoderMt *(void)const
.text:00009F48                 public ??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ
.text:00009F48 ??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ proc near
.text:00009F48                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+F83p
.text:00009F48
.text:00009F48 var_4           = dword ptr -4
.text:00009F48
.text:00009F48                 push    ebp
.text:00009F49                 mov     ebp, esp
.text:00009F4B                 push    ecx
.text:00009F4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009F53                 mov     [ebp+var_4], ecx
.text:00009F56                 mov     eax, [ebp+var_4]
.text:00009F59                 mov     eax, [eax]
.text:00009F5B                 mov     esp, ebp
.text:00009F5D                 pop     ebp
.text:00009F5E                 retn
.text:00009F5E ??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ endp
.text:00009F5E
.text:00009F5E ; ---------------------------------------------------------------------------
.text:00009F5F                 align 10h
.text:00009F5F _text           ends
.text:00009F5F
.text:00009F60 ; ===========================================================================
.text:00009F60
.text:00009F60 ; Segment type: Pure code
.text:00009F60 ; Segment permissions: Read/Execute
.text:00009F60 _text           segment para public 'CODE' use32
.text:00009F60                 assume cs:_text
.text:00009F60                 ;org 9F60h
.text:00009F60 ; COMDAT (pick any)
.text:00009F60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009F60
.text:00009F60 ; =============== S U B R O U T I N E =======================================
.text:00009F60
.text:00009F60 ; Attributes: bp-based frame
.text:00009F60
.text:00009F60 ; public: struct ICompressSetCoderMt * * __thiscall CMyComPtr<struct ICompressSetCoderMt>::operator&(void)
.text:00009F60                 public ??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ
.text:00009F60 ??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ proc near
.text:00009F60                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+F56p
.text:00009F60
.text:00009F60 var_4           = dword ptr -4
.text:00009F60
.text:00009F60                 push    ebp
.text:00009F61                 mov     ebp, esp
.text:00009F63                 push    ecx
.text:00009F64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009F6B                 mov     [ebp+var_4], ecx
.text:00009F6E                 mov     eax, [ebp+var_4]
.text:00009F71                 mov     esp, ebp
.text:00009F73                 pop     ebp
.text:00009F74                 retn
.text:00009F74 ??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ endp
.text:00009F74
.text:00009F74 ; ---------------------------------------------------------------------------
.text:00009F75                 align 4
.text:00009F75 _text           ends
.text:00009F75
.text:00009F78 ; ===========================================================================
.text:00009F78
.text:00009F78 ; Segment type: Pure code
.text:00009F78 ; Segment permissions: Read/Execute
.text:00009F78 _text           segment para public 'CODE' use32
.text:00009F78                 assume cs:_text
.text:00009F78                 ;org 9F78h
.text:00009F78 ; COMDAT (pick any)
.text:00009F78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009F78
.text:00009F78 ; =============== S U B R O U T I N E =======================================
.text:00009F78
.text:00009F78 ; Attributes: bp-based frame
.text:00009F78
.text:00009F78 ; public: struct ICompressSetCoderMt * __thiscall CMyComPtr<struct ICompressSetCoderMt>::operator->(void)const
.text:00009F78                 public ??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ
.text:00009F78 ??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ proc near
.text:00009F78                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+F96p
.text:00009F78
.text:00009F78 var_4           = dword ptr -4
.text:00009F78
.text:00009F78                 push    ebp
.text:00009F79                 mov     ebp, esp
.text:00009F7B                 push    ecx
.text:00009F7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009F83                 mov     [ebp+var_4], ecx
.text:00009F86                 mov     eax, [ebp+var_4]
.text:00009F89                 mov     eax, [eax]
.text:00009F8B                 mov     esp, ebp
.text:00009F8D                 pop     ebp
.text:00009F8E                 retn
.text:00009F8E ??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ endp
.text:00009F8E
.text:00009F8E ; ---------------------------------------------------------------------------
.text:00009F8F                 align 10h
.text:00009F8F _text           ends
.text:00009F8F
.text:00009F90 ; ===========================================================================
.text:00009F90
.text:00009F90 ; Segment type: Pure code
.text:00009F90 ; Segment permissions: Read/Execute
.text:00009F90 _text           segment para public 'CODE' use32
.text:00009F90                 assume cs:_text
.text:00009F90                 ;org 9F90h
.text:00009F90 ; COMDAT (pick any)
.text:00009F90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009F90
.text:00009F90 ; =============== S U B R O U T I N E =======================================
.text:00009F90
.text:00009F90 ; Attributes: bp-based frame
.text:00009F90
.text:00009F90 ; _DWORD __thiscall NArchive::NZip::CExtraSubBlock::CExtraSubBlock(NArchive::NZip::CExtraSubBlock *this, const struct NArchive::NZip::CExtraSubBlock *)
.text:00009F90                 public ??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z
.text:00009F90 ??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z proc near
.text:00009F90                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+A6p
.text:00009F90
.text:00009F90 var_4           = dword ptr -4
.text:00009F90 arg_0           = dword ptr  8
.text:00009F90
.text:00009F90                 push    ebp
.text:00009F91                 mov     ebp, esp
.text:00009F93                 push    ecx
.text:00009F94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009F9B                 mov     [ebp+var_4], ecx
.text:00009F9E                 mov     eax, [ebp+var_4]
.text:00009FA1                 mov     ecx, [ebp+arg_0]
.text:00009FA4                 mov     dx, [ecx]
.text:00009FA7                 mov     [eax], dx
.text:00009FAA                 mov     eax, [ebp+arg_0]
.text:00009FAD                 add     eax, 4
.text:00009FB0                 push    eax
.text:00009FB1                 mov     ecx, [ebp+var_4]
.text:00009FB4                 add     ecx, 4
.text:00009FB7                 call    ??0?$CBuffer@E@@QAE@ABV0@@Z ; CBuffer<uchar>::CBuffer<uchar>(CBuffer<uchar> const &)
.text:00009FBC                 mov     eax, [ebp+var_4]
.text:00009FBF                 add     esp, 4
.text:00009FC2                 cmp     ebp, esp
.text:00009FC4                 call    __RTC_CheckEsp
.text:00009FC9                 mov     esp, ebp
.text:00009FCB                 pop     ebp
.text:00009FCC                 retn    4
.text:00009FCC ??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z endp
.text:00009FCC
.text:00009FCC ; ---------------------------------------------------------------------------
.text:00009FCF                 align 10h
.text:00009FCF _text           ends
.text:00009FCF
.text:00009FD0 ; ===========================================================================
.text:00009FD0
.text:00009FD0 ; Segment type: Pure code
.text:00009FD0 ; Segment permissions: Read/Execute
.text:00009FD0 _text           segment para public 'CODE' use32
.text:00009FD0                 assume cs:_text
.text:00009FD0                 ;org 9FD0h
.text:00009FD0 ; COMDAT (pick any)
.text:00009FD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009FD0
.text:00009FD0 ; =============== S U B R O U T I N E =======================================
.text:00009FD0
.text:00009FD0 ; Attributes: bp-based frame
.text:00009FD0
.text:00009FD0 ; public: void * __thiscall NArchive::NZip::CExtraSubBlock::`scalar deleting destructor'(unsigned int)
.text:00009FD0                 public ??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z
.text:00009FD0 ??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z proc near
.text:00009FD0                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+7Fp
.text:00009FD0
.text:00009FD0 var_4           = dword ptr -4
.text:00009FD0 arg_0           = dword ptr  8
.text:00009FD0
.text:00009FD0                 push    ebp
.text:00009FD1                 mov     ebp, esp
.text:00009FD3                 push    ecx
.text:00009FD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009FDB                 mov     [ebp+var_4], ecx
.text:00009FDE                 mov     ecx, [ebp+var_4] ; this
.text:00009FE1                 call    ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock(void)
.text:00009FE6                 mov     eax, [ebp+arg_0]
.text:00009FE9                 and     eax, 1
.text:00009FEC                 jz      short loc_9FFA
.text:00009FEE                 mov     ecx, [ebp+var_4]
.text:00009FF1                 push    ecx             ; void *
.text:00009FF2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00009FF7                 add     esp, 4
.text:00009FFA
.text:00009FFA loc_9FFA:                               ; CODE XREF: NArchive::NZip::CExtraSubBlock::`scalar deleting destructor'(uint)+1Cj
.text:00009FFA                 mov     eax, [ebp+var_4]
.text:00009FFD                 add     esp, 4
.text:0000A000                 cmp     ebp, esp
.text:0000A002                 call    __RTC_CheckEsp
.text:0000A007                 mov     esp, ebp
.text:0000A009                 pop     ebp
.text:0000A00A                 retn    4
.text:0000A00A ??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z endp
.text:0000A00A
.text:0000A00A ; ---------------------------------------------------------------------------
.text:0000A00D                 align 10h
.text:0000A00D _text           ends
.text:0000A00D
.text:0000A010 ; ===========================================================================
.text:0000A010
.text:0000A010 ; Segment type: Pure code
.text:0000A010 ; Segment permissions: Read/Execute
.text:0000A010 _text           segment para public 'CODE' use32
.text:0000A010                 assume cs:_text
.text:0000A010                 ;org 0A010h
.text:0000A010 ; COMDAT (pick any)
.text:0000A010                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A010
.text:0000A010 ; =============== S U B R O U T I N E =======================================
.text:0000A010
.text:0000A010 ; Attributes: bp-based frame
.text:0000A010
.text:0000A010 ; public: void * __thiscall CProp::`scalar deleting destructor'(unsigned int)
.text:0000A010                 public ??_GCProp@@QAEPAXI@Z
.text:0000A010 ??_GCProp@@QAEPAXI@Z proc near          ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+7Fp
.text:0000A010                                         ; CObjectVector<CProp>::Clear(void)+59p
.text:0000A010
.text:0000A010 var_4           = dword ptr -4
.text:0000A010 arg_0           = dword ptr  8
.text:0000A010
.text:0000A010                 push    ebp
.text:0000A011                 mov     ebp, esp
.text:0000A013                 push    ecx
.text:0000A014                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A01B                 mov     [ebp+var_4], ecx
.text:0000A01E                 mov     ecx, [ebp+var_4] ; this
.text:0000A021                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:0000A026                 mov     eax, [ebp+arg_0]
.text:0000A029                 and     eax, 1
.text:0000A02C                 jz      short loc_A03A
.text:0000A02E                 mov     ecx, [ebp+var_4]
.text:0000A031                 push    ecx             ; void *
.text:0000A032                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000A037                 add     esp, 4
.text:0000A03A
.text:0000A03A loc_A03A:                               ; CODE XREF: CProp::`scalar deleting destructor'(uint)+1Cj
.text:0000A03A                 mov     eax, [ebp+var_4]
.text:0000A03D                 add     esp, 4
.text:0000A040                 cmp     ebp, esp
.text:0000A042                 call    __RTC_CheckEsp
.text:0000A047                 mov     esp, ebp
.text:0000A049                 pop     ebp
.text:0000A04A                 retn    4
.text:0000A04A ??_GCProp@@QAEPAXI@Z endp
.text:0000A04A
.text:0000A04A ; ---------------------------------------------------------------------------
.text:0000A04D                 align 10h
.text:0000A04D _text           ends
.text:0000A04D
.text:0000A050 ; ===========================================================================
.text:0000A050
.text:0000A050 ; Segment type: Pure code
.text:0000A050 ; Segment permissions: Read/Execute
.text:0000A050 _text           segment para public 'CODE' use32
.text:0000A050                 assume cs:_text
.text:0000A050                 ;org 0A050h
.text:0000A050 ; COMDAT (pick any)
.text:0000A050                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A050
.text:0000A050 ; =============== S U B R O U T I N E =======================================
.text:0000A050
.text:0000A050 ; Attributes: bp-based frame
.text:0000A050
.text:0000A050 ; public: void * __thiscall NArchive::NZip::CItemEx::`scalar deleting destructor'(unsigned int)
.text:0000A050                 public ??_GCItemEx@NZip@NArchive@@QAEPAXI@Z
.text:0000A050 ??_GCItemEx@NZip@NArchive@@QAEPAXI@Z proc near
.text:0000A050                                         ; CODE XREF: CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>(void)+7Fp
.text:0000A050                                         ; CObjectVector<NArchive::NZip::CItemEx>::Clear(void)+59p
.text:0000A050
.text:0000A050 var_4           = dword ptr -4
.text:0000A050 arg_0           = dword ptr  8
.text:0000A050
.text:0000A050                 push    ebp
.text:0000A051                 mov     ebp, esp
.text:0000A053                 push    ecx
.text:0000A054                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A05B                 mov     [ebp+var_4], ecx
.text:0000A05E                 mov     ecx, [ebp+var_4] ; this
.text:0000A061                 call    ??1CItemEx@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CItemEx::~CItemEx(void)
.text:0000A066                 mov     eax, [ebp+arg_0]
.text:0000A069                 and     eax, 1
.text:0000A06C                 jz      short loc_A07A
.text:0000A06E                 mov     ecx, [ebp+var_4]
.text:0000A071                 push    ecx             ; void *
.text:0000A072                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000A077                 add     esp, 4
.text:0000A07A
.text:0000A07A loc_A07A:                               ; CODE XREF: NArchive::NZip::CItemEx::`scalar deleting destructor'(uint)+1Cj
.text:0000A07A                 mov     eax, [ebp+var_4]
.text:0000A07D                 add     esp, 4
.text:0000A080                 cmp     ebp, esp
.text:0000A082                 call    __RTC_CheckEsp
.text:0000A087                 mov     esp, ebp
.text:0000A089                 pop     ebp
.text:0000A08A                 retn    4
.text:0000A08A ??_GCItemEx@NZip@NArchive@@QAEPAXI@Z endp
.text:0000A08A
.text:0000A08A ; ---------------------------------------------------------------------------
.text:0000A08D                 align 10h
.text:0000A08D _text           ends
.text:0000A08D
.text:0000A090 ; ===========================================================================
.text:0000A090
.text:0000A090 ; Segment type: Pure code
.text:0000A090 ; Segment permissions: Read/Execute
.text:0000A090 _text           segment para public 'CODE' use32
.text:0000A090                 assume cs:_text
.text:0000A090                 ;org 0A090h
.text:0000A090 ; COMDAT (pick any)
.text:0000A090                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A090
.text:0000A090 ; =============== S U B R O U T I N E =======================================
.text:0000A090
.text:0000A090 ; Attributes: bp-based frame
.text:0000A090
.text:0000A090 ; _DWORD __thiscall NArchive::NZip::CMethodItem::CMethodItem(NArchive::NZip::CMethodItem *this, const struct NArchive::NZip::CMethodItem *)
.text:0000A090                 public ??0CMethodItem@NZip@NArchive@@QAE@ABU012@@Z
.text:0000A090 ??0CMethodItem@NZip@NArchive@@QAE@ABU012@@Z proc near
.text:0000A090                                         ; CODE XREF: CObjectVector<NArchive::NZip::CMethodItem>::Add(NArchive::NZip::CMethodItem const &)+38p
.text:0000A090
.text:0000A090 var_4           = dword ptr -4
.text:0000A090 arg_0           = dword ptr  8
.text:0000A090
.text:0000A090                 push    ebp
.text:0000A091                 mov     ebp, esp
.text:0000A093                 push    ecx
.text:0000A094                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A09B                 mov     [ebp+var_4], ecx
.text:0000A09E                 mov     eax, [ebp+var_4]
.text:0000A0A1                 mov     ecx, [ebp+arg_0]
.text:0000A0A4                 mov     edx, [ecx]
.text:0000A0A6                 mov     [eax], edx
.text:0000A0A8                 mov     eax, [ebp+arg_0]
.text:0000A0AB                 add     eax, 4
.text:0000A0AE                 push    eax
.text:0000A0AF                 mov     ecx, [ebp+var_4]
.text:0000A0B2                 add     ecx, 4
.text:0000A0B5                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@ABV0@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(CMyComPtr<ICompressCoder> const &)
.text:0000A0BA                 mov     eax, [ebp+var_4]
.text:0000A0BD                 add     esp, 4
.text:0000A0C0                 cmp     ebp, esp
.text:0000A0C2                 call    __RTC_CheckEsp
.text:0000A0C7                 mov     esp, ebp
.text:0000A0C9                 pop     ebp
.text:0000A0CA                 retn    4
.text:0000A0CA ??0CMethodItem@NZip@NArchive@@QAE@ABU012@@Z endp
.text:0000A0CA
.text:0000A0CA ; ---------------------------------------------------------------------------
.text:0000A0CD                 align 10h
.text:0000A0CD _text           ends
.text:0000A0CD
.text:0000A0D0 ; ===========================================================================
.text:0000A0D0
.text:0000A0D0 ; Segment type: Pure code
.text:0000A0D0 ; Segment permissions: Read/Execute
.text:0000A0D0 _text           segment para public 'CODE' use32
.text:0000A0D0                 assume cs:_text
.text:0000A0D0                 ;org 0A0D0h
.text:0000A0D0 ; COMDAT (pick any)
.text:0000A0D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A0D0
.text:0000A0D0 ; =============== S U B R O U T I N E =======================================
.text:0000A0D0
.text:0000A0D0 ; Attributes: bp-based frame
.text:0000A0D0
.text:0000A0D0 ; public: void * __thiscall NArchive::NZip::CMethodItem::`scalar deleting destructor'(unsigned int)
.text:0000A0D0                 public ??_GCMethodItem@NZip@NArchive@@QAEPAXI@Z
.text:0000A0D0 ??_GCMethodItem@NZip@NArchive@@QAEPAXI@Z proc near
.text:0000A0D0                                         ; CODE XREF: CObjectVector<NArchive::NZip::CMethodItem>::~CObjectVector<NArchive::NZip::CMethodItem>(void)+7Fp
.text:0000A0D0
.text:0000A0D0 var_4           = dword ptr -4
.text:0000A0D0 arg_0           = dword ptr  8
.text:0000A0D0
.text:0000A0D0                 push    ebp
.text:0000A0D1                 mov     ebp, esp
.text:0000A0D3                 push    ecx
.text:0000A0D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A0DB                 mov     [ebp+var_4], ecx
.text:0000A0DE                 mov     ecx, [ebp+var_4] ; this
.text:0000A0E1                 call    ??1CMethodItem@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CMethodItem::~CMethodItem(void)
.text:0000A0E6                 mov     eax, [ebp+arg_0]
.text:0000A0E9                 and     eax, 1
.text:0000A0EC                 jz      short loc_A0FA
.text:0000A0EE                 mov     ecx, [ebp+var_4]
.text:0000A0F1                 push    ecx             ; void *
.text:0000A0F2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000A0F7                 add     esp, 4
.text:0000A0FA
.text:0000A0FA loc_A0FA:                               ; CODE XREF: NArchive::NZip::CMethodItem::`scalar deleting destructor'(uint)+1Cj
.text:0000A0FA                 mov     eax, [ebp+var_4]
.text:0000A0FD                 add     esp, 4
.text:0000A100                 cmp     ebp, esp
.text:0000A102                 call    __RTC_CheckEsp
.text:0000A107                 mov     esp, ebp
.text:0000A109                 pop     ebp
.text:0000A10A                 retn    4
.text:0000A10A ??_GCMethodItem@NZip@NArchive@@QAEPAXI@Z endp
.text:0000A10A
.text:0000A10A ; ---------------------------------------------------------------------------
.text:0000A10D                 align 10h
.text:0000A10D _text           ends
.text:0000A10D
.text:0000A110 ; ===========================================================================
.text:0000A110
.text:0000A110 ; Segment type: Pure code
.text:0000A110 ; Segment permissions: Read/Execute
.text:0000A110 _text           segment para public 'CODE' use32
.text:0000A110                 assume cs:_text
.text:0000A110                 ;org 0A110h
.text:0000A110 ; COMDAT (pick any)
.text:0000A110                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A110
.text:0000A110 ; =============== S U B R O U T I N E =======================================
.text:0000A110
.text:0000A110 ; Attributes: bp-based frame
.text:0000A110
.text:0000A110 ; _DWORD __thiscall NArchive::NZip::CExtraSubBlock::~CExtraSubBlock(NArchive::NZip::CExtraSubBlock *__hidden this)
.text:0000A110                 public ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ
.text:0000A110 ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ proc near
.text:0000A110                                         ; CODE XREF: NArchive::NZip::CExtraSubBlock::`scalar deleting destructor'(uint)+11p
.text:0000A110
.text:0000A110 var_4           = dword ptr -4
.text:0000A110
.text:0000A110                 push    ebp
.text:0000A111                 mov     ebp, esp
.text:0000A113                 push    ecx
.text:0000A114                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A11B                 mov     [ebp+var_4], ecx
.text:0000A11E                 mov     ecx, [ebp+var_4]
.text:0000A121                 add     ecx, 4
.text:0000A124                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:0000A129                 add     esp, 4
.text:0000A12C                 cmp     ebp, esp
.text:0000A12E                 call    __RTC_CheckEsp
.text:0000A133                 mov     esp, ebp
.text:0000A135                 pop     ebp
.text:0000A136                 retn
.text:0000A136 ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ endp
.text:0000A136
.text:0000A136 ; ---------------------------------------------------------------------------
.text:0000A137                 align 4
.text:0000A137 _text           ends
.text:0000A137
.text:0000A138 ; ===========================================================================
.text:0000A138
.text:0000A138 ; Segment type: Pure code
.text:0000A138 ; Segment permissions: Read/Execute
.text:0000A138 _text           segment para public 'CODE' use32
.text:0000A138                 assume cs:_text
.text:0000A138                 ;org 0A138h
.text:0000A138 ; COMDAT (pick any)
.text:0000A138                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A138
.text:0000A138 ; =============== S U B R O U T I N E =======================================
.text:0000A138
.text:0000A138 ; Attributes: bp-based frame
.text:0000A138
.text:0000A138 ; _DWORD __thiscall CProp::~CProp(CProp *__hidden this)
.text:0000A138                 public ??1CProp@@QAE@XZ
.text:0000A138 ??1CProp@@QAE@XZ proc near              ; CODE XREF: CProp::`scalar deleting destructor'(uint)+11p
.text:0000A138
.text:0000A138 var_4           = dword ptr -4
.text:0000A138
.text:0000A138                 push    ebp
.text:0000A139                 mov     ebp, esp
.text:0000A13B                 push    ecx
.text:0000A13C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A143                 mov     [ebp+var_4], ecx
.text:0000A146                 mov     ecx, [ebp+var_4]
.text:0000A149                 add     ecx, 8          ; this
.text:0000A14C                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000A151                 add     esp, 4
.text:0000A154                 cmp     ebp, esp
.text:0000A156                 call    __RTC_CheckEsp
.text:0000A15B                 mov     esp, ebp
.text:0000A15D                 pop     ebp
.text:0000A15E                 retn
.text:0000A15E ??1CProp@@QAE@XZ endp
.text:0000A15E
.text:0000A15E ; ---------------------------------------------------------------------------
.text:0000A15F                 align 10h
.text:0000A15F _text           ends
.text:0000A15F
.text:0000A160 ; ===========================================================================
.text:0000A160
.text:0000A160 ; Segment type: Pure code
.text:0000A160 ; Segment permissions: Read/Execute
.text:0000A160 _text           segment para public 'CODE' use32
.text:0000A160                 assume cs:_text
.text:0000A160                 ;org 0A160h
.text:0000A160 ; COMDAT (pick any)
.text:0000A160                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A160
.text:0000A160 ; =============== S U B R O U T I N E =======================================
.text:0000A160
.text:0000A160 ; Attributes: bp-based frame
.text:0000A160
.text:0000A160 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000A160                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:0000A160 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:0000A160                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+42p
.text:0000A160                                         ; CObjectVector<CProp>::CObjectVector<CProp>(void)+11p ...
.text:0000A160
.text:0000A160 var_4           = dword ptr -4
.text:0000A160
.text:0000A160                 push    ebp
.text:0000A161                 mov     ebp, esp
.text:0000A163                 push    ecx
.text:0000A164                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A16B                 mov     [ebp+var_4], ecx
.text:0000A16E                 mov     eax, [ebp+var_4]
.text:0000A171                 mov     dword ptr [eax], 0
.text:0000A177                 mov     ecx, [ebp+var_4]
.text:0000A17A                 mov     dword ptr [ecx+4], 0
.text:0000A181                 mov     edx, [ebp+var_4]
.text:0000A184                 mov     dword ptr [edx+8], 0
.text:0000A18B                 mov     eax, [ebp+var_4]
.text:0000A18E                 mov     esp, ebp
.text:0000A190                 pop     ebp
.text:0000A191                 retn
.text:0000A191 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:0000A191
.text:0000A191 ; ---------------------------------------------------------------------------
.text:0000A192                 align 4
.text:0000A192 _text           ends
.text:0000A192
.text:0000A194 ; ===========================================================================
.text:0000A194
.text:0000A194 ; Segment type: Pure code
.text:0000A194 ; Segment permissions: Read/Execute
.text:0000A194 _text           segment para public 'CODE' use32
.text:0000A194                 assume cs:_text
.text:0000A194                 ;org 0A194h
.text:0000A194 ; COMDAT (pick any)
.text:0000A194                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A194
.text:0000A194 ; =============== S U B R O U T I N E =======================================
.text:0000A194
.text:0000A194 ; Attributes: bp-based frame
.text:0000A194
.text:0000A194 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:0000A194                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:0000A194 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:0000A194                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::Size(void)+11p
.text:0000A194                                         ; CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+46p ...
.text:0000A194
.text:0000A194 var_4           = dword ptr -4
.text:0000A194
.text:0000A194                 push    ebp
.text:0000A195                 mov     ebp, esp
.text:0000A197                 push    ecx
.text:0000A198                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A19F                 mov     [ebp+var_4], ecx
.text:0000A1A2                 mov     eax, [ebp+var_4]
.text:0000A1A5                 mov     eax, [eax+4]
.text:0000A1A8                 mov     esp, ebp
.text:0000A1AA                 pop     ebp
.text:0000A1AB                 retn
.text:0000A1AB ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:0000A1AB
.text:0000A1AB _text           ends
.text:0000A1AB
.text:0000A1AC ; ===========================================================================
.text:0000A1AC
.text:0000A1AC ; Segment type: Pure code
.text:0000A1AC ; Segment permissions: Read/Execute
.text:0000A1AC _text           segment para public 'CODE' use32
.text:0000A1AC                 assume cs:_text
.text:0000A1AC                 ;org 0A1ACh
.text:0000A1AC ; COMDAT (pick any)
.text:0000A1AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A1AC
.text:0000A1AC ; =============== S U B R O U T I N E =======================================
.text:0000A1AC
.text:0000A1AC ; Attributes: bp-based frame
.text:0000A1AC
.text:0000A1AC ; public: void __thiscall CRecordVector<void *>::ConstructReserve(unsigned int)
.text:0000A1AC                 public ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
.text:0000A1AC ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:0000A1AC                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+60p
.text:0000A1AC
.text:0000A1AC var_8           = dword ptr -8
.text:0000A1AC var_4           = dword ptr -4
.text:0000A1AC arg_0           = dword ptr  8
.text:0000A1AC
.text:0000A1AC                 push    ebp
.text:0000A1AD                 mov     ebp, esp
.text:0000A1AF                 sub     esp, 8
.text:0000A1B2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000A1B9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A1C0                 mov     [ebp+var_4], ecx
.text:0000A1C3                 cmp     [ebp+arg_0], 0
.text:0000A1C7                 jz      short loc_A1F9
.text:0000A1C9                 xor     ecx, ecx
.text:0000A1CB                 mov     eax, [ebp+arg_0]
.text:0000A1CE                 mov     edx, 4
.text:0000A1D3                 mul     edx
.text:0000A1D5                 seto    cl
.text:0000A1D8                 neg     ecx
.text:0000A1DA                 or      ecx, eax
.text:0000A1DC                 push    ecx             ; unsigned int
.text:0000A1DD                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000A1E2                 add     esp, 4
.text:0000A1E5                 mov     [ebp+var_8], eax
.text:0000A1E8                 mov     eax, [ebp+var_4]
.text:0000A1EB                 mov     ecx, [ebp+var_8]
.text:0000A1EE                 mov     [eax], ecx
.text:0000A1F0                 mov     edx, [ebp+var_4]
.text:0000A1F3                 mov     eax, [ebp+arg_0]
.text:0000A1F6                 mov     [edx+8], eax
.text:0000A1F9
.text:0000A1F9 loc_A1F9:                               ; CODE XREF: CRecordVector<void *>::ConstructReserve(uint)+1Bj
.text:0000A1F9                 add     esp, 8
.text:0000A1FC                 cmp     ebp, esp
.text:0000A1FE                 call    __RTC_CheckEsp
.text:0000A203                 mov     esp, ebp
.text:0000A205                 pop     ebp
.text:0000A206                 retn    4
.text:0000A206 ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z endp
.text:0000A206
.text:0000A206 ; ---------------------------------------------------------------------------
.text:0000A209                 align 4
.text:0000A209 _text           ends
.text:0000A209
.text:0000A20C ; ===========================================================================
.text:0000A20C
.text:0000A20C ; Segment type: Pure code
.text:0000A20C ; Segment permissions: Read/Execute
.text:0000A20C _text           segment para public 'CODE' use32
.text:0000A20C                 assume cs:_text
.text:0000A20C                 ;org 0A20Ch
.text:0000A20C ; COMDAT (pick any)
.text:0000A20C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A20C
.text:0000A20C ; =============== S U B R O U T I N E =======================================
.text:0000A20C
.text:0000A20C ; Attributes: bp-based frame
.text:0000A20C
.text:0000A20C ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000A20C                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:0000A20C ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:0000A20C                                         ; CODE XREF: __unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$0+3j
.text:0000A20C                                         ; CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+9Cp ...
.text:0000A20C
.text:0000A20C var_8           = dword ptr -8
.text:0000A20C var_4           = dword ptr -4
.text:0000A20C
.text:0000A20C                 push    ebp
.text:0000A20D                 mov     ebp, esp
.text:0000A20F                 sub     esp, 8
.text:0000A212                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000A219                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A220                 mov     [ebp+var_4], ecx
.text:0000A223                 mov     eax, [ebp+var_4]
.text:0000A226                 mov     ecx, [eax]
.text:0000A228                 mov     [ebp+var_8], ecx
.text:0000A22B                 mov     edx, [ebp+var_8]
.text:0000A22E                 push    edx             ; void *
.text:0000A22F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000A234                 add     esp, 4
.text:0000A237                 add     esp, 8
.text:0000A23A                 cmp     ebp, esp
.text:0000A23C                 call    __RTC_CheckEsp
.text:0000A241                 mov     esp, ebp
.text:0000A243                 pop     ebp
.text:0000A244                 retn
.text:0000A244 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:0000A244
.text:0000A244 ; ---------------------------------------------------------------------------
.text:0000A245                 align 4
.text:0000A245 _text           ends
.text:0000A245
.text:0000A248 ; ===========================================================================
.text:0000A248
.text:0000A248 ; Segment type: Pure code
.text:0000A248 ; Segment permissions: Read/Execute
.text:0000A248 _text           segment para public 'CODE' use32
.text:0000A248                 assume cs:_text
.text:0000A248                 ;org 0A248h
.text:0000A248 ; COMDAT (pick any)
.text:0000A248                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A248
.text:0000A248 ; =============== S U B R O U T I N E =======================================
.text:0000A248
.text:0000A248 ; Attributes: bp-based frame
.text:0000A248
.text:0000A248 ; public: void __thiscall CRecordVector<void *>::Clear(void)
.text:0000A248                 public ?Clear@?$CRecordVector@PAX@@QAEXXZ
.text:0000A248 ?Clear@?$CRecordVector@PAX@@QAEXXZ proc near
.text:0000A248                                         ; CODE XREF: CObjectVector<CProp>::Clear(void)+6Fp
.text:0000A248                                         ; CObjectVector<NArchive::NZip::CItemEx>::Clear(void)+6Fp
.text:0000A248
.text:0000A248 var_4           = dword ptr -4
.text:0000A248
.text:0000A248                 push    ebp
.text:0000A249                 mov     ebp, esp
.text:0000A24B                 push    ecx
.text:0000A24C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A253                 mov     [ebp+var_4], ecx
.text:0000A256                 mov     eax, [ebp+var_4]
.text:0000A259                 mov     dword ptr [eax+4], 0
.text:0000A260                 mov     esp, ebp
.text:0000A262                 pop     ebp
.text:0000A263                 retn
.text:0000A263 ?Clear@?$CRecordVector@PAX@@QAEXXZ endp
.text:0000A263
.text:0000A263 _text           ends
.text:0000A263
.text:0000A264 ; ===========================================================================
.text:0000A264
.text:0000A264 ; Segment type: Pure code
.text:0000A264 ; Segment permissions: Read/Execute
.text:0000A264 _text           segment para public 'CODE' use32
.text:0000A264                 assume cs:_text
.text:0000A264                 ;org 0A264h
.text:0000A264 ; COMDAT (pick any)
.text:0000A264                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A264
.text:0000A264 ; =============== S U B R O U T I N E =======================================
.text:0000A264
.text:0000A264 ; Attributes: bp-based frame
.text:0000A264
.text:0000A264 ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:0000A264                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:0000A264 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:0000A264                                         ; CODE XREF: CObjectVector<NArchive::NZip::CMethodItem>::Add(NArchive::NZip::CMethodItem const &)+50p
.text:0000A264
.text:0000A264 var_8           = dword ptr -8
.text:0000A264 var_4           = dword ptr -4
.text:0000A264 arg_0           = dword ptr  8
.text:0000A264
.text:0000A264                 push    ebp
.text:0000A265                 mov     ebp, esp
.text:0000A267                 sub     esp, 8
.text:0000A26A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000A271                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A278                 mov     [ebp+var_4], ecx
.text:0000A27B                 mov     ecx, [ebp+var_4]
.text:0000A27E                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:0000A283                 mov     eax, [ebp+var_4]
.text:0000A286                 mov     ecx, [eax+4]
.text:0000A289                 mov     edx, [ebp+var_4]
.text:0000A28C                 mov     eax, [edx]
.text:0000A28E                 mov     edx, [ebp+arg_0]
.text:0000A291                 mov     [eax+ecx*4], edx
.text:0000A294                 mov     eax, [ebp+var_4]
.text:0000A297                 mov     ecx, [eax+4]
.text:0000A29A                 mov     [ebp+var_8], ecx
.text:0000A29D                 mov     edx, [ebp+var_4]
.text:0000A2A0                 mov     eax, [edx+4]
.text:0000A2A3                 add     eax, 1
.text:0000A2A6                 mov     ecx, [ebp+var_4]
.text:0000A2A9                 mov     [ecx+4], eax
.text:0000A2AC                 mov     eax, [ebp+var_8]
.text:0000A2AF                 add     esp, 8
.text:0000A2B2                 cmp     ebp, esp
.text:0000A2B4                 call    __RTC_CheckEsp
.text:0000A2B9                 mov     esp, ebp
.text:0000A2BB                 pop     ebp
.text:0000A2BC                 retn    4
.text:0000A2BC ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:0000A2BC
.text:0000A2BC ; ---------------------------------------------------------------------------
.text:0000A2BF                 align 10h
.text:0000A2BF _text           ends
.text:0000A2BF
.text:0000A2C0 ; ===========================================================================
.text:0000A2C0
.text:0000A2C0 ; Segment type: Pure code
.text:0000A2C0 ; Segment permissions: Read/Execute
.text:0000A2C0 _text           segment para public 'CODE' use32
.text:0000A2C0                 assume cs:_text
.text:0000A2C0                 ;org 0A2C0h
.text:0000A2C0 ; COMDAT (pick any)
.text:0000A2C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A2C0
.text:0000A2C0 ; =============== S U B R O U T I N E =======================================
.text:0000A2C0
.text:0000A2C0 ; Attributes: bp-based frame
.text:0000A2C0
.text:0000A2C0 ; public: void __thiscall CRecordVector<void *>::AddInReserved(void * const)
.text:0000A2C0                 public ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
.text:0000A2C0 ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z proc near
.text:0000A2C0                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>(CObjectVector<NArchive::NZip::CExtraSubBlock> const &)+C8p
.text:0000A2C0
.text:0000A2C0 var_4           = dword ptr -4
.text:0000A2C0 arg_0           = dword ptr  8
.text:0000A2C0
.text:0000A2C0                 push    ebp
.text:0000A2C1                 mov     ebp, esp
.text:0000A2C3                 push    ecx
.text:0000A2C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A2CB                 mov     [ebp+var_4], ecx
.text:0000A2CE                 mov     eax, [ebp+var_4]
.text:0000A2D1                 mov     ecx, [eax+4]
.text:0000A2D4                 mov     edx, [ebp+var_4]
.text:0000A2D7                 mov     eax, [edx]
.text:0000A2D9                 mov     edx, [ebp+arg_0]
.text:0000A2DC                 mov     [eax+ecx*4], edx
.text:0000A2DF                 mov     eax, [ebp+var_4]
.text:0000A2E2                 mov     ecx, [eax+4]
.text:0000A2E5                 add     ecx, 1
.text:0000A2E8                 mov     edx, [ebp+var_4]
.text:0000A2EB                 mov     [edx+4], ecx
.text:0000A2EE                 mov     esp, ebp
.text:0000A2F0                 pop     ebp
.text:0000A2F1                 retn    4
.text:0000A2F1 ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z endp
.text:0000A2F1
.text:0000A2F1 _text           ends
.text:0000A2F1
.text:0000A2F4 ; ===========================================================================
.text:0000A2F4
.text:0000A2F4 ; Segment type: Pure code
.text:0000A2F4 ; Segment permissions: Read/Execute
.text:0000A2F4 _text           segment para public 'CODE' use32
.text:0000A2F4                 assume cs:_text
.text:0000A2F4                 ;org 0A2F4h
.text:0000A2F4 ; COMDAT (pick any)
.text:0000A2F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A2F4
.text:0000A2F4 ; =============== S U B R O U T I N E =======================================
.text:0000A2F4
.text:0000A2F4 ; Attributes: bp-based frame
.text:0000A2F4
.text:0000A2F4 ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:0000A2F4                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:0000A2F4 ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:0000A2F4                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[](uint)+15p
.text:0000A2F4
.text:0000A2F4 var_4           = dword ptr -4
.text:0000A2F4 arg_0           = dword ptr  8
.text:0000A2F4
.text:0000A2F4                 push    ebp
.text:0000A2F5                 mov     ebp, esp
.text:0000A2F7                 push    ecx
.text:0000A2F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A2FF                 mov     [ebp+var_4], ecx
.text:0000A302                 mov     eax, [ebp+var_4]
.text:0000A305                 mov     ecx, [eax]
.text:0000A307                 mov     edx, [ebp+arg_0]
.text:0000A30A                 lea     eax, [ecx+edx*4]
.text:0000A30D                 mov     esp, ebp
.text:0000A30F                 pop     ebp
.text:0000A310                 retn    4
.text:0000A310 ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:0000A310
.text:0000A310 ; ---------------------------------------------------------------------------
.text:0000A313                 align 4
.text:0000A313 _text           ends
.text:0000A313
.text:0000A314 ; ===========================================================================
.text:0000A314
.text:0000A314 ; Segment type: Pure code
.text:0000A314 ; Segment permissions: Read/Execute
.text:0000A314 _text           segment para public 'CODE' use32
.text:0000A314                 assume cs:_text
.text:0000A314                 ;org 0A314h
.text:0000A314 ; COMDAT (pick any)
.text:0000A314                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A314
.text:0000A314 ; =============== S U B R O U T I N E =======================================
.text:0000A314
.text:0000A314 ; Attributes: bp-based frame
.text:0000A314
.text:0000A314 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:0000A314                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:0000A314 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:0000A314                                         ; CODE XREF: CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>(void)+64p
.text:0000A314                                         ; CObjectVector<CProp>::~CObjectVector<CProp>(void)+64p ...
.text:0000A314
.text:0000A314 var_4           = dword ptr -4
.text:0000A314 arg_0           = dword ptr  8
.text:0000A314
.text:0000A314                 push    ebp
.text:0000A315                 mov     ebp, esp
.text:0000A317                 push    ecx
.text:0000A318                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A31F                 mov     [ebp+var_4], ecx
.text:0000A322                 mov     eax, [ebp+var_4]
.text:0000A325                 mov     ecx, [eax]
.text:0000A327                 mov     edx, [ebp+arg_0]
.text:0000A32A                 lea     eax, [ecx+edx*4]
.text:0000A32D                 mov     esp, ebp
.text:0000A32F                 pop     ebp
.text:0000A330                 retn    4
.text:0000A330 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:0000A330
.text:0000A330 ; ---------------------------------------------------------------------------
.text:0000A333                 align 4
.text:0000A333 _text           ends
.text:0000A333
.text:0000A334 ; ===========================================================================
.text:0000A334
.text:0000A334 ; Segment type: Pure code
.text:0000A334 ; Segment permissions: Read/Execute
.text:0000A334 _text           segment para public 'CODE' use32
.text:0000A334                 assume cs:_text
.text:0000A334                 ;org 0A334h
.text:0000A334 ; COMDAT (pick any)
.text:0000A334                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A334
.text:0000A334 ; =============== S U B R O U T I N E =======================================
.text:0000A334
.text:0000A334 ; Attributes: bp-based frame
.text:0000A334
.text:0000A334 ; public: void __thiscall CMyComPtr<struct ISequentialInStream>::Release(void)
.text:0000A334                 public ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
.text:0000A334 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ proc near
.text:0000A334                                         ; CODE XREF: CMyComPtr<ISequentialInStream>::Attach(ISequentialInStream *)+11p
.text:0000A334
.text:0000A334 var_4           = dword ptr -4
.text:0000A334
.text:0000A334                 push    ebp
.text:0000A335                 mov     ebp, esp
.text:0000A337                 push    ecx
.text:0000A338                 push    esi
.text:0000A339                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A340                 mov     [ebp+var_4], ecx
.text:0000A343                 mov     eax, [ebp+var_4]
.text:0000A346                 cmp     dword ptr [eax], 0
.text:0000A349                 jz      short loc_A36F
.text:0000A34B                 mov     ecx, [ebp+var_4]
.text:0000A34E                 mov     edx, [ecx]
.text:0000A350                 mov     eax, [ebp+var_4]
.text:0000A353                 mov     ecx, [eax]
.text:0000A355                 mov     edx, [edx]
.text:0000A357                 mov     esi, esp
.text:0000A359                 push    ecx
.text:0000A35A                 mov     eax, [edx+8]
.text:0000A35D                 call    eax
.text:0000A35F                 cmp     esi, esp
.text:0000A361                 call    __RTC_CheckEsp
.text:0000A366                 mov     ecx, [ebp+var_4]
.text:0000A369                 mov     dword ptr [ecx], 0
.text:0000A36F
.text:0000A36F loc_A36F:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::Release(void)+15j
.text:0000A36F                 pop     esi
.text:0000A370                 add     esp, 4
.text:0000A373                 cmp     ebp, esp
.text:0000A375                 call    __RTC_CheckEsp
.text:0000A37A                 mov     esp, ebp
.text:0000A37C                 pop     ebp
.text:0000A37D                 retn
.text:0000A37D ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ endp
.text:0000A37D
.text:0000A37D ; ---------------------------------------------------------------------------
.text:0000A37E                 align 10h
.text:0000A37E _text           ends
.text:0000A37E
.text:0000A380 ; ===========================================================================
.text:0000A380
.text:0000A380 ; Segment type: Pure code
.text:0000A380 ; Segment permissions: Read/Execute
.text:0000A380 _text           segment para public 'CODE' use32
.text:0000A380                 assume cs:_text
.text:0000A380                 ;org 0A380h
.text:0000A380 ; COMDAT (pick any)
.text:0000A380                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A380
.text:0000A380 ; =============== S U B R O U T I N E =======================================
.text:0000A380
.text:0000A380 ; Attributes: bp-based frame
.text:0000A380
.text:0000A380 ; public: __thiscall CMyComPtr<struct ICompressCoder>::CMyComPtr<struct ICompressCoder>(class CMyComPtr<struct ICompressCoder> const &)
.text:0000A380                 public ??0?$CMyComPtr@UICompressCoder@@@@QAE@ABV0@@Z
.text:0000A380 ??0?$CMyComPtr@UICompressCoder@@@@QAE@ABV0@@Z proc near
.text:0000A380                                         ; CODE XREF: NArchive::NZip::CMethodItem::CMethodItem(NArchive::NZip::CMethodItem const &)+25p
.text:0000A380
.text:0000A380 var_4           = dword ptr -4
.text:0000A380 arg_0           = dword ptr  8
.text:0000A380
.text:0000A380                 push    ebp
.text:0000A381                 mov     ebp, esp
.text:0000A383                 push    ecx
.text:0000A384                 push    esi
.text:0000A385                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A38C                 mov     [ebp+var_4], ecx
.text:0000A38F                 mov     eax, [ebp+var_4]
.text:0000A392                 mov     ecx, [ebp+arg_0]
.text:0000A395                 mov     edx, [ecx]
.text:0000A397                 mov     [eax], edx
.text:0000A399                 mov     eax, [ebp+var_4]
.text:0000A39C                 cmp     dword ptr [eax], 0
.text:0000A39F                 jz      short loc_A3BC
.text:0000A3A1                 mov     ecx, [ebp+var_4]
.text:0000A3A4                 mov     edx, [ecx]
.text:0000A3A6                 mov     eax, [ebp+var_4]
.text:0000A3A9                 mov     ecx, [eax]
.text:0000A3AB                 mov     edx, [edx]
.text:0000A3AD                 mov     esi, esp
.text:0000A3AF                 push    ecx
.text:0000A3B0                 mov     eax, [edx+4]
.text:0000A3B3                 call    eax
.text:0000A3B5                 cmp     esi, esp
.text:0000A3B7                 call    __RTC_CheckEsp
.text:0000A3BC
.text:0000A3BC loc_A3BC:                               ; CODE XREF: CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(CMyComPtr<ICompressCoder> const &)+1Fj
.text:0000A3BC                 mov     eax, [ebp+var_4]
.text:0000A3BF                 pop     esi
.text:0000A3C0                 add     esp, 4
.text:0000A3C3                 cmp     ebp, esp
.text:0000A3C5                 call    __RTC_CheckEsp
.text:0000A3CA                 mov     esp, ebp
.text:0000A3CC                 pop     ebp
.text:0000A3CD                 retn    4
.text:0000A3CD ??0?$CMyComPtr@UICompressCoder@@@@QAE@ABV0@@Z endp
.text:0000A3CD
.text:0000A3CD _text           ends
.text:0000A3CD
.text:0000A3D0 ; ===========================================================================
.text:0000A3D0
.text:0000A3D0 ; Segment type: Pure code
.text:0000A3D0 ; Segment permissions: Read/Execute
.text:0000A3D0 _text           segment para public 'CODE' use32
.text:0000A3D0                 assume cs:_text
.text:0000A3D0                 ;org 0A3D0h
.text:0000A3D0 ; COMDAT (pick any)
.text:0000A3D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A3D0
.text:0000A3D0 ; =============== S U B R O U T I N E =======================================
.text:0000A3D0
.text:0000A3D0 ; Attributes: bp-based frame
.text:0000A3D0
.text:0000A3D0 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:0000A3D0                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:0000A3D0 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:0000A3D0                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:0000A3D0
.text:0000A3D0 var_14          = dword ptr -14h
.text:0000A3D0 var_10          = dword ptr -10h
.text:0000A3D0 Dst             = dword ptr -0Ch
.text:0000A3D0 var_8           = dword ptr -8
.text:0000A3D0 var_4           = dword ptr -4
.text:0000A3D0
.text:0000A3D0                 push    ebp
.text:0000A3D1                 mov     ebp, esp
.text:0000A3D3                 sub     esp, 14h
.text:0000A3D6                 mov     eax, 0CCCCCCCCh
.text:0000A3DB                 mov     [ebp+var_14], eax
.text:0000A3DE                 mov     [ebp+var_10], eax
.text:0000A3E1                 mov     [ebp+Dst], eax
.text:0000A3E4                 mov     [ebp+var_8], eax
.text:0000A3E7                 mov     [ebp+var_4], eax
.text:0000A3EA                 mov     [ebp+var_4], ecx
.text:0000A3ED                 mov     eax, [ebp+var_4]
.text:0000A3F0                 mov     ecx, [ebp+var_4]
.text:0000A3F3                 mov     edx, [eax+4]
.text:0000A3F6                 cmp     edx, [ecx+8]
.text:0000A3F9                 jnz     loc_A484
.text:0000A3FF                 mov     eax, [ebp+var_4]
.text:0000A402                 mov     ecx, [eax+8]
.text:0000A405                 shr     ecx, 2
.text:0000A408                 mov     edx, [ebp+var_4]
.text:0000A40B                 mov     eax, [edx+8]
.text:0000A40E                 lea     ecx, [eax+ecx+1]
.text:0000A412                 mov     [ebp+var_8], ecx
.text:0000A415                 xor     ecx, ecx
.text:0000A417                 mov     eax, [ebp+var_8]
.text:0000A41A                 mov     edx, 4
.text:0000A41F                 mul     edx
.text:0000A421                 seto    cl
.text:0000A424                 neg     ecx
.text:0000A426                 or      ecx, eax
.text:0000A428                 push    ecx             ; unsigned int
.text:0000A429                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000A42E                 add     esp, 4
.text:0000A431                 mov     [ebp+var_10], eax
.text:0000A434                 mov     eax, [ebp+var_10]
.text:0000A437                 mov     [ebp+Dst], eax
.text:0000A43A                 mov     ecx, [ebp+var_4]
.text:0000A43D                 cmp     dword ptr [ecx+4], 0
.text:0000A441                 jz      short loc_A45F
.text:0000A443                 mov     edx, [ebp+var_4]
.text:0000A446                 mov     eax, [edx+4]
.text:0000A449                 shl     eax, 2
.text:0000A44C                 push    eax             ; Size
.text:0000A44D                 mov     ecx, [ebp+var_4]
.text:0000A450                 mov     edx, [ecx]
.text:0000A452                 push    edx             ; Src
.text:0000A453                 mov     eax, [ebp+Dst]
.text:0000A456                 push    eax             ; Dst
.text:0000A457                 call    _memcpy
.text:0000A45C                 add     esp, 0Ch
.text:0000A45F
.text:0000A45F loc_A45F:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:0000A45F                 mov     ecx, [ebp+var_4]
.text:0000A462                 mov     edx, [ecx]
.text:0000A464                 mov     [ebp+var_14], edx
.text:0000A467                 mov     eax, [ebp+var_14]
.text:0000A46A                 push    eax             ; void *
.text:0000A46B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000A470                 add     esp, 4
.text:0000A473                 mov     ecx, [ebp+var_4]
.text:0000A476                 mov     edx, [ebp+Dst]
.text:0000A479                 mov     [ecx], edx
.text:0000A47B                 mov     eax, [ebp+var_4]
.text:0000A47E                 mov     ecx, [ebp+var_8]
.text:0000A481                 mov     [eax+8], ecx
.text:0000A484
.text:0000A484 loc_A484:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:0000A484                 add     esp, 14h
.text:0000A487                 cmp     ebp, esp
.text:0000A489                 call    __RTC_CheckEsp
.text:0000A48E                 mov     esp, ebp
.text:0000A490                 pop     ebp
.text:0000A491                 retn
.text:0000A491 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:0000A491
.text:0000A491 ; ---------------------------------------------------------------------------
.text:0000A492                 align 4
.text:0000A492 _text           ends
.text:0000A492
.text:0000A494 ; ===========================================================================
.text:0000A494
.text:0000A494 ; Segment type: Pure code
.text:0000A494 ; Segment permissions: Read/Execute
.text:0000A494 _text           segment para public 'CODE' use32
.text:0000A494                 assume cs:_text
.text:0000A494                 ;org 0A494h
.text:0000A494 ; COMDAT (pick any)
.text:0000A494                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A494
.text:0000A494 ; =============== S U B R O U T I N E =======================================
.text:0000A494
.text:0000A494 ; Attributes: bp-based frame
.text:0000A494
.text:0000A494 ; public: long __thiscall CMyComPtr<struct ICompressFilter>::QueryInterface<struct ICryptoSetPassword>(struct _GUID const &, struct ICryptoSetPassword * *)const
.text:0000A494                 public ??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UICompressFilter@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z
.text:0000A494 ??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UICompressFilter@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z proc near
.text:0000A494                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+53Bp
.text:0000A494
.text:0000A494 var_4           = dword ptr -4
.text:0000A494 arg_0           = dword ptr  8
.text:0000A494 arg_4           = dword ptr  0Ch
.text:0000A494
.text:0000A494                 push    ebp
.text:0000A495                 mov     ebp, esp
.text:0000A497                 push    ecx
.text:0000A498                 push    esi
.text:0000A499                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000A4A0                 mov     [ebp+var_4], ecx
.text:0000A4A3                 mov     esi, esp
.text:0000A4A5                 mov     eax, [ebp+arg_4]
.text:0000A4A8                 push    eax
.text:0000A4A9                 mov     ecx, [ebp+arg_0]
.text:0000A4AC                 push    ecx
.text:0000A4AD                 mov     edx, [ebp+var_4]
.text:0000A4B0                 mov     eax, [edx]
.text:0000A4B2                 mov     ecx, [ebp+var_4]
.text:0000A4B5                 mov     edx, [ecx]
.text:0000A4B7                 mov     eax, [eax]
.text:0000A4B9                 push    edx
.text:0000A4BA                 mov     ecx, [eax]
.text:0000A4BC                 call    ecx
.text:0000A4BE                 cmp     esi, esp
.text:0000A4C0                 call    __RTC_CheckEsp
.text:0000A4C5                 pop     esi
.text:0000A4C6                 add     esp, 4
.text:0000A4C9                 cmp     ebp, esp
.text:0000A4CB                 call    __RTC_CheckEsp
.text:0000A4D0                 mov     esp, ebp
.text:0000A4D2                 pop     ebp
.text:0000A4D3                 retn    8
.text:0000A4D3 ??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UICompressFilter@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z endp
.text:0000A4D3
.text:0000A4D3 ; ---------------------------------------------------------------------------
.text:0000A4D6                 align 4
.text:0000A4D6 _text           ends
.text:0000A4D6
.text:0000A4D8 ; ===========================================================================
.text:0000A4D8
.text:0000A4D8 ; Segment type: Pure code
.text:0000A4D8 ; Segment permissions: Read/Execute
.text:0000A4D8 _text           segment para public 'CODE' use32
.text:0000A4D8                 assume cs:_text
.text:0000A4D8                 ;org 0A4D8h
.text:0000A4D8 ; COMDAT (pick any)
.text:0000A4D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A4D8
.text:0000A4D8 ; =============== S U B R O U T I N E =======================================
.text:0000A4D8
.text:0000A4D8
.text:0000A4D8 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::NZipStrong::CDecoder::AddRef`adjustor{8}' (void)
.text:0000A4D8                 public ?AddRef@CDecoder@NZipStrong@NCrypto@@W7AGKXZ
.text:0000A4D8 ?AddRef@CDecoder@NZipStrong@NCrypto@@W7AGKXZ proc near
.text:0000A4D8                                         ; DATA XREF: .rdata:00007148o
.text:0000A4D8
.text:0000A4D8 arg_0           = dword ptr  4
.text:0000A4D8
.text:0000A4D8                 sub     [esp+arg_0], 8
.text:0000A4DD                 jmp     ?AddRef@CDecoder@NZipStrong@NCrypto@@UAGKXZ ; NCrypto::NZipStrong::CDecoder::AddRef(void)
.text:0000A4DD ?AddRef@CDecoder@NZipStrong@NCrypto@@W7AGKXZ endp
.text:0000A4DD
.text:0000A4DD ; ---------------------------------------------------------------------------
.text:0000A4E2                 align 4
.text:0000A4E2 _text           ends
.text:0000A4E2
.text:0000A4E4 ; ===========================================================================
.text:0000A4E4
.text:0000A4E4 ; Segment type: Pure code
.text:0000A4E4 ; Segment permissions: Read/Execute
.text:0000A4E4 _text           segment para public 'CODE' use32
.text:0000A4E4                 assume cs:_text
.text:0000A4E4                 ;org 0A4E4h
.text:0000A4E4 ; COMDAT (pick any)
.text:0000A4E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A4E4
.text:0000A4E4 ; =============== S U B R O U T I N E =======================================
.text:0000A4E4
.text:0000A4E4
.text:0000A4E4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{4}' (void)
.text:0000A4E4                 public ?Release@CCopyCoder@NCompress@@W3AGKXZ
.text:0000A4E4 ?Release@CCopyCoder@NCompress@@W3AGKXZ proc near
.text:0000A4E4                                         ; DATA XREF: .rdata:00006318o
.text:0000A4E4
.text:0000A4E4 arg_0           = dword ptr  4
.text:0000A4E4
.text:0000A4E4                 sub     [esp+arg_0], 4
.text:0000A4E9                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:0000A4E9 ?Release@CCopyCoder@NCompress@@W3AGKXZ endp
.text:0000A4E9
.text:0000A4E9 ; ---------------------------------------------------------------------------
.text:0000A4EE                 align 10h
.text:0000A4EE _text           ends
.text:0000A4EE
.text:0000A4F0 ; ===========================================================================
.text:0000A4F0
.text:0000A4F0 ; Segment type: Pure code
.text:0000A4F0 ; Segment permissions: Read/Execute
.text:0000A4F0 _text           segment para public 'CODE' use32
.text:0000A4F0                 assume cs:_text
.text:0000A4F0                 ;org 0A4F0h
.text:0000A4F0 ; COMDAT (pick any)
.text:0000A4F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A4F0
.text:0000A4F0 ; =============== S U B R O U T I N E =======================================
.text:0000A4F0
.text:0000A4F0
.text:0000A4F0 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NZip::CHandler::Release`adjustor{8}' (void)
.text:0000A4F0                 public ?Release@CHandler@NZip@NArchive@@W7AGKXZ
.text:0000A4F0 ?Release@CHandler@NZip@NArchive@@W7AGKXZ proc near
.text:0000A4F0                                         ; DATA XREF: .rdata:00004350o
.text:0000A4F0
.text:0000A4F0 arg_0           = dword ptr  4
.text:0000A4F0
.text:0000A4F0                 sub     [esp+arg_0], 8
.text:0000A4F5                 jmp     ?Release@CHandler@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CHandler::Release(void)
.text:0000A4F5 ?Release@CHandler@NZip@NArchive@@W7AGKXZ endp
.text:0000A4F5
.text:0000A4F5 ; ---------------------------------------------------------------------------
.text:0000A4FA                 align 4
.text:0000A4FA _text           ends
.text:0000A4FA
.text:0000A4FC ; ===========================================================================
.text:0000A4FC
.text:0000A4FC ; Segment type: Pure code
.text:0000A4FC ; Segment permissions: Read/Execute
.text:0000A4FC _text           segment para public 'CODE' use32
.text:0000A4FC                 assume cs:_text
.text:0000A4FC                 ;org 0A4FCh
.text:0000A4FC ; COMDAT (pick any)
.text:0000A4FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A4FC
.text:0000A4FC ; =============== S U B R O U T I N E =======================================
.text:0000A4FC
.text:0000A4FC
.text:0000A4FC ; [thunk]:public: virtual unsigned long __stdcall NCrypto::CAesCbcCoder::Release`adjustor{4}' (void)
.text:0000A4FC                 public ?Release@CAesCbcCoder@NCrypto@@W3AGKXZ
.text:0000A4FC ?Release@CAesCbcCoder@NCrypto@@W3AGKXZ proc near
.text:0000A4FC                                         ; DATA XREF: .rdata:0000806Co
.text:0000A4FC                                         ; .rdata:000082BCo
.text:0000A4FC
.text:0000A4FC arg_0           = dword ptr  4
.text:0000A4FC
.text:0000A4FC                 sub     [esp+arg_0], 4
.text:0000A501                 jmp     ?Release@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::Release(void)
.text:0000A501 ?Release@CAesCbcCoder@NCrypto@@W3AGKXZ endp
.text:0000A501
.text:0000A501 ; ---------------------------------------------------------------------------
.text:0000A506                 align 4
.text:0000A506 _text           ends
.text:0000A506
.text:0000A508 ; ===========================================================================
.text:0000A508
.text:0000A508 ; Segment type: Pure code
.text:0000A508 ; Segment permissions: Read/Execute
.text:0000A508 _text           segment para public 'CODE' use32
.text:0000A508                 assume cs:_text
.text:0000A508                 ;org 0A508h
.text:0000A508 ; COMDAT (pick any)
.text:0000A508                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A508
.text:0000A508 ; =============== S U B R O U T I N E =======================================
.text:0000A508
.text:0000A508
.text:0000A508 ; [thunk]:public: virtual long __stdcall NCrypto::NWzAes::CBaseCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:0000A508                 public ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.text:0000A508 ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:0000A508                                         ; DATA XREF: .rdata:const NCrypto::NWzAes::CDecoder::`vftable'{for `ICryptoSetPassword'}o
.text:0000A508                                         ; .rdata:const NCrypto::NWzAes::CBaseCoder::`vftable'{for `ICryptoSetPassword'}o
.text:0000A508
.text:0000A508 arg_0           = dword ptr  4
.text:0000A508
.text:0000A508                 sub     [esp+arg_0], 4
.text:0000A50D                 jmp     ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *)
.text:0000A50D ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z endp
.text:0000A50D
.text:0000A50D ; ---------------------------------------------------------------------------
.text:0000A512                 align 4
.text:0000A512 _text           ends
.text:0000A512
.text:0000A514 ; ===========================================================================
.text:0000A514
.text:0000A514 ; Segment type: Pure code
.text:0000A514 ; Segment permissions: Read/Execute
.text:0000A514 _text           segment para public 'CODE' use32
.text:0000A514                 assume cs:_text
.text:0000A514                 ;org 0A514h
.text:0000A514 ; COMDAT (pick any)
.text:0000A514                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A514
.text:0000A514 ; =============== S U B R O U T I N E =======================================
.text:0000A514
.text:0000A514
.text:0000A514 ; [thunk]:public: virtual long __stdcall NCrypto::NZipStrong::CDecoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:0000A514                 public ?QueryInterface@CDecoder@NZipStrong@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.text:0000A514 ?QueryInterface@CDecoder@NZipStrong@NCrypto@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:0000A514                                         ; DATA XREF: .rdata:const NCrypto::NZipStrong::CDecoder::`vftable'{for `ICryptoProperties'}o
.text:0000A514
.text:0000A514 arg_0           = dword ptr  4
.text:0000A514
.text:0000A514                 sub     [esp+arg_0], 4
.text:0000A519                 jmp     ?QueryInterface@CDecoder@NZipStrong@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::NZipStrong::CDecoder::QueryInterface(_GUID const &,void * *)
.text:0000A519 ?QueryInterface@CDecoder@NZipStrong@NCrypto@@W3AGJABU_GUID@@PAPAX@Z endp
.text:0000A519
.text:0000A519 ; ---------------------------------------------------------------------------
.text:0000A51E                 align 10h
.text:0000A51E _text           ends
.text:0000A51E
.text:0000A520 ; ===========================================================================
.text:0000A520
.text:0000A520 ; Segment type: Pure code
.text:0000A520 ; Segment permissions: Read/Execute
.text:0000A520 _text           segment para public 'CODE' use32
.text:0000A520                 assume cs:_text
.text:0000A520                 ;org 0A520h
.text:0000A520 ; COMDAT (pick any)
.text:0000A520                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A520
.text:0000A520 ; =============== S U B R O U T I N E =======================================
.text:0000A520
.text:0000A520
.text:0000A520 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::NZip::CCipher::AddRef`adjustor{4}' (void)
.text:0000A520                 public ?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ
.text:0000A520 ?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ proc near ; DATA XREF: .rdata:00007734o
.text:0000A520                                         ; .rdata:00008374o
.text:0000A520
.text:0000A520 arg_0           = dword ptr  4
.text:0000A520
.text:0000A520                 sub     [esp+arg_0], 4
.text:0000A525                 jmp     ?AddRef@CCipher@NZip@NCrypto@@UAGKXZ ; NCrypto::NZip::CCipher::AddRef(void)
.text:0000A525 ?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ endp
.text:0000A525
.text:0000A525 ; ---------------------------------------------------------------------------
.text:0000A52A                 align 4
.text:0000A52A _text           ends
.text:0000A52A
.text:0000A52C ; ===========================================================================
.text:0000A52C
.text:0000A52C ; Segment type: Pure code
.text:0000A52C ; Segment permissions: Read/Execute
.text:0000A52C _text           segment para public 'CODE' use32
.text:0000A52C                 assume cs:_text
.text:0000A52C                 ;org 0A52Ch
.text:0000A52C ; COMDAT (pick any)
.text:0000A52C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A52C
.text:0000A52C ; =============== S U B R O U T I N E =======================================
.text:0000A52C
.text:0000A52C
.text:0000A52C ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{8}' (void)
.text:0000A52C                 public ?Release@CCopyCoder@NCompress@@W7AGKXZ
.text:0000A52C ?Release@CCopyCoder@NCompress@@W7AGKXZ proc near
.text:0000A52C                                         ; DATA XREF: .rdata:00006304o
.text:0000A52C
.text:0000A52C arg_0           = dword ptr  4
.text:0000A52C
.text:0000A52C                 sub     [esp+arg_0], 8
.text:0000A531                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:0000A531 ?Release@CCopyCoder@NCompress@@W7AGKXZ endp
.text:0000A531
.text:0000A531 ; ---------------------------------------------------------------------------
.text:0000A536                 align 4
.text:0000A536 _text           ends
.text:0000A536
.text:0000A538 ; ===========================================================================
.text:0000A538
.text:0000A538 ; Segment type: Pure code
.text:0000A538 ; Segment permissions: Read/Execute
.text:0000A538 _text           segment para public 'CODE' use32
.text:0000A538                 assume cs:_text
.text:0000A538                 ;org 0A538h
.text:0000A538 ; COMDAT (pick any)
.text:0000A538                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A538
.text:0000A538 ; =============== S U B R O U T I N E =======================================
.text:0000A538
.text:0000A538
.text:0000A538 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NZip::CHandler::AddRef`adjustor{4}' (void)
.text:0000A538                 public ?AddRef@CHandler@NZip@NArchive@@W3AGKXZ
.text:0000A538 ?AddRef@CHandler@NZip@NArchive@@W3AGKXZ proc near
.text:0000A538                                         ; DATA XREF: .rdata:00004360o
.text:0000A538
.text:0000A538 arg_0           = dword ptr  4
.text:0000A538
.text:0000A538                 sub     [esp+arg_0], 4
.text:0000A53D                 jmp     ?AddRef@CHandler@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CHandler::AddRef(void)
.text:0000A53D ?AddRef@CHandler@NZip@NArchive@@W3AGKXZ endp
.text:0000A53D
.text:0000A53D ; ---------------------------------------------------------------------------
.text:0000A542                 align 4
.text:0000A542 _text           ends
.text:0000A542
.text:0000A544 ; ===========================================================================
.text:0000A544
.text:0000A544 ; Segment type: Pure code
.text:0000A544 ; Segment permissions: Read/Execute
.text:0000A544 _text           segment para public 'CODE' use32
.text:0000A544                 assume cs:_text
.text:0000A544                 ;org 0A544h
.text:0000A544 ; COMDAT (pick any)
.text:0000A544                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A544
.text:0000A544 ; =============== S U B R O U T I N E =======================================
.text:0000A544
.text:0000A544
.text:0000A544 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::CAesCbcCoder::Release`adjustor{8}' (void)
.text:0000A544                 public ?Release@CAesCbcCoder@NCrypto@@W7AGKXZ
.text:0000A544 ?Release@CAesCbcCoder@NCrypto@@W7AGKXZ proc near
.text:0000A544                                         ; DATA XREF: .rdata:00008058o
.text:0000A544                                         ; .rdata:000082A8o
.text:0000A544
.text:0000A544 arg_0           = dword ptr  4
.text:0000A544
.text:0000A544                 sub     [esp+arg_0], 8
.text:0000A549                 jmp     ?Release@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::Release(void)
.text:0000A549 ?Release@CAesCbcCoder@NCrypto@@W7AGKXZ endp
.text:0000A549
.text:0000A549 ; ---------------------------------------------------------------------------
.text:0000A54E                 align 10h
.text:0000A54E _text           ends
.text:0000A54E
.text:0000A550 ; ===========================================================================
.text:0000A550
.text:0000A550 ; Segment type: Pure code
.text:0000A550 ; Segment permissions: Read/Execute
.text:0000A550 _text           segment para public 'CODE' use32
.text:0000A550                 assume cs:_text
.text:0000A550                 ;org 0A550h
.text:0000A550 ; COMDAT (pick any)
.text:0000A550                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A550
.text:0000A550 ; =============== S U B R O U T I N E =======================================
.text:0000A550
.text:0000A550
.text:0000A550 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::NZipStrong::CDecoder::Release`adjustor{332}' (void)
.text:0000A550                 public ?Release@CDecoder@NZipStrong@NCrypto@@WBEM@AGKXZ
.text:0000A550 ?Release@CDecoder@NZipStrong@NCrypto@@WBEM@AGKXZ proc near
.text:0000A550                                         ; DATA XREF: .rdata:00007138o
.text:0000A550
.text:0000A550 arg_0           = dword ptr  4
.text:0000A550
.text:0000A550                 sub     [esp+arg_0], 14Ch
.text:0000A558                 jmp     ?Release@CDecoder@NZipStrong@NCrypto@@UAGKXZ ; NCrypto::NZipStrong::CDecoder::Release(void)
.text:0000A558 ?Release@CDecoder@NZipStrong@NCrypto@@WBEM@AGKXZ endp
.text:0000A558
.text:0000A558 ; ---------------------------------------------------------------------------
.text:0000A55D                 align 10h
.text:0000A55D _text           ends
.text:0000A55D
.text:0000A560 ; ===========================================================================
.text:0000A560
.text:0000A560 ; Segment type: Pure code
.text:0000A560 ; Segment permissions: Read/Execute
.text:0000A560 _text           segment para public 'CODE' use32
.text:0000A560                 assume cs:_text
.text:0000A560                 ;org 0A560h
.text:0000A560 ; COMDAT (pick any)
.text:0000A560                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A560
.text:0000A560 ; =============== S U B R O U T I N E =======================================
.text:0000A560
.text:0000A560
.text:0000A560 ; [thunk]:public: virtual long __stdcall NCrypto::NZipStrong::CDecoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:0000A560                 public ?QueryInterface@CDecoder@NZipStrong@NCrypto@@W7AGJABU_GUID@@PAPAX@Z
.text:0000A560 ?QueryInterface@CDecoder@NZipStrong@NCrypto@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:0000A560                                         ; DATA XREF: .rdata:const NCrypto::NZipStrong::CDecoder::`vftable'{for `ICompressSetCoderProperties'}o
.text:0000A560
.text:0000A560 arg_0           = dword ptr  4
.text:0000A560
.text:0000A560                 sub     [esp+arg_0], 8
.text:0000A565                 jmp     ?QueryInterface@CDecoder@NZipStrong@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::NZipStrong::CDecoder::QueryInterface(_GUID const &,void * *)
.text:0000A565 ?QueryInterface@CDecoder@NZipStrong@NCrypto@@W7AGJABU_GUID@@PAPAX@Z endp
.text:0000A565
.text:0000A565 ; ---------------------------------------------------------------------------
.text:0000A56A                 align 4
.text:0000A56A _text           ends
.text:0000A56A
.text:0000A56C ; ===========================================================================
.text:0000A56C
.text:0000A56C ; Segment type: Pure code
.text:0000A56C ; Segment permissions: Read/Execute
.text:0000A56C _text           segment para public 'CODE' use32
.text:0000A56C                 assume cs:_text
.text:0000A56C                 ;org 0A56Ch
.text:0000A56C ; COMDAT (pick any)
.text:0000A56C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A56C
.text:0000A56C ; =============== S U B R O U T I N E =======================================
.text:0000A56C
.text:0000A56C
.text:0000A56C ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{12}' (void)
.text:0000A56C                 public ?Release@CCopyCoder@NCompress@@WM@AGKXZ
.text:0000A56C ?Release@CCopyCoder@NCompress@@WM@AGKXZ proc near
.text:0000A56C                                         ; DATA XREF: .rdata:000062F0o
.text:0000A56C
.text:0000A56C arg_0           = dword ptr  4
.text:0000A56C
.text:0000A56C                 sub     [esp+arg_0], 0Ch
.text:0000A571                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:0000A571 ?Release@CCopyCoder@NCompress@@WM@AGKXZ endp
.text:0000A571
.text:0000A571 ; ---------------------------------------------------------------------------
.text:0000A576                 align 4
.text:0000A576 _text           ends
.text:0000A576
.text:0000A578 ; ===========================================================================
.text:0000A578
.text:0000A578 ; Segment type: Pure code
.text:0000A578 ; Segment permissions: Read/Execute
.text:0000A578 _text           segment para public 'CODE' use32
.text:0000A578                 assume cs:_text
.text:0000A578                 ;org 0A578h
.text:0000A578 ; COMDAT (pick any)
.text:0000A578                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A578
.text:0000A578 ; =============== S U B R O U T I N E =======================================
.text:0000A578
.text:0000A578
.text:0000A578 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{4}' (void)
.text:0000A578                 public ?AddRef@CCopyCoder@NCompress@@W3AGKXZ
.text:0000A578 ?AddRef@CCopyCoder@NCompress@@W3AGKXZ proc near ; DATA XREF: .rdata:00006314o
.text:0000A578
.text:0000A578 arg_0           = dword ptr  4
.text:0000A578
.text:0000A578                 sub     [esp+arg_0], 4
.text:0000A57D                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:0000A57D ?AddRef@CCopyCoder@NCompress@@W3AGKXZ endp
.text:0000A57D
.text:0000A57D ; ---------------------------------------------------------------------------
.text:0000A582                 align 4
.text:0000A582 _text           ends
.text:0000A582
.text:0000A584 ; ===========================================================================
.text:0000A584
.text:0000A584 ; Segment type: Pure code
.text:0000A584 ; Segment permissions: Read/Execute
.text:0000A584 _text           segment para public 'CODE' use32
.text:0000A584                 assume cs:_text
.text:0000A584                 ;org 0A584h
.text:0000A584 ; COMDAT (pick any)
.text:0000A584                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A584
.text:0000A584 ; =============== S U B R O U T I N E =======================================
.text:0000A584
.text:0000A584
.text:0000A584 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NZip::CHandler::AddRef`adjustor{8}' (void)
.text:0000A584                 public ?AddRef@CHandler@NZip@NArchive@@W7AGKXZ
.text:0000A584 ?AddRef@CHandler@NZip@NArchive@@W7AGKXZ proc near
.text:0000A584                                         ; DATA XREF: .rdata:0000434Co
.text:0000A584
.text:0000A584 arg_0           = dword ptr  4
.text:0000A584
.text:0000A584                 sub     [esp+arg_0], 8
.text:0000A589                 jmp     ?AddRef@CHandler@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CHandler::AddRef(void)
.text:0000A589 ?AddRef@CHandler@NZip@NArchive@@W7AGKXZ endp
.text:0000A589
.text:0000A589 ; ---------------------------------------------------------------------------
.text:0000A58E                 align 10h
.text:0000A58E _text           ends
.text:0000A58E
.text:0000A590 ; ===========================================================================
.text:0000A590
.text:0000A590 ; Segment type: Pure code
.text:0000A590 ; Segment permissions: Read/Execute
.text:0000A590 _text           segment para public 'CODE' use32
.text:0000A590                 assume cs:_text
.text:0000A590                 ;org 0A590h
.text:0000A590 ; COMDAT (pick any)
.text:0000A590                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A590
.text:0000A590 ; =============== S U B R O U T I N E =======================================
.text:0000A590
.text:0000A590
.text:0000A590 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::CAesCbcCoder::AddRef`adjustor{4}' (void)
.text:0000A590                 public ?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ
.text:0000A590 ?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ proc near ; DATA XREF: .rdata:00008068o
.text:0000A590                                         ; .rdata:000082B8o
.text:0000A590
.text:0000A590 arg_0           = dword ptr  4
.text:0000A590
.text:0000A590                 sub     [esp+arg_0], 4
.text:0000A595                 jmp     ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::AddRef(void)
.text:0000A595 ?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ endp
.text:0000A595
.text:0000A595 ; ---------------------------------------------------------------------------
.text:0000A59A                 align 4
.text:0000A59A _text           ends
.text:0000A59A
.text:0000A59C ; ===========================================================================
.text:0000A59C
.text:0000A59C ; Segment type: Pure code
.text:0000A59C ; Segment permissions: Read/Execute
.text:0000A59C _text           segment para public 'CODE' use32
.text:0000A59C                 assume cs:_text
.text:0000A59C                 ;org 0A59Ch
.text:0000A59C ; COMDAT (pick any)
.text:0000A59C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A59C
.text:0000A59C ; =============== S U B R O U T I N E =======================================
.text:0000A59C
.text:0000A59C
.text:0000A59C ; [thunk]:public: virtual long __stdcall NCrypto::NZip::CCipher::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:0000A59C                 public ?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.text:0000A59C ?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:0000A59C                                         ; DATA XREF: .rdata:const NCrypto::NZip::CDecoder::`vftable'{for `ICryptoSetPassword'}o
.text:0000A59C                                         ; .rdata:const NCrypto::NZip::CCipher::`vftable'{for `ICryptoSetPassword'}o
.text:0000A59C
.text:0000A59C arg_0           = dword ptr  4
.text:0000A59C
.text:0000A59C                 sub     [esp+arg_0], 4
.text:0000A5A1                 jmp     ?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::NZip::CCipher::QueryInterface(_GUID const &,void * *)
.text:0000A5A1 ?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z endp
.text:0000A5A1
.text:0000A5A1 ; ---------------------------------------------------------------------------
.text:0000A5A6                 align 4
.text:0000A5A6 _text           ends
.text:0000A5A6
.text:0000A5A8 ; ===========================================================================
.text:0000A5A8
.text:0000A5A8 ; Segment type: Pure code
.text:0000A5A8 ; Segment permissions: Read/Execute
.text:0000A5A8 _text           segment para public 'CODE' use32
.text:0000A5A8                 assume cs:_text
.text:0000A5A8                 ;org 0A5A8h
.text:0000A5A8 ; COMDAT (pick any)
.text:0000A5A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A5A8
.text:0000A5A8 ; =============== S U B R O U T I N E =======================================
.text:0000A5A8
.text:0000A5A8
.text:0000A5A8 ; [thunk]:public: virtual long __stdcall NArchive::NZip::CHandler::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:0000A5A8                 public ?QueryInterface@CHandler@NZip@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.text:0000A5A8 ?QueryInterface@CHandler@NZip@NArchive@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:0000A5A8                                         ; DATA XREF: .rdata:const NArchive::NZip::CHandler::`vftable'{for `IOutArchive'}o
.text:0000A5A8
.text:0000A5A8 arg_0           = dword ptr  4
.text:0000A5A8
.text:0000A5A8                 sub     [esp+arg_0], 4
.text:0000A5AD                 jmp     ?QueryInterface@CHandler@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NZip::CHandler::QueryInterface(_GUID const &,void * *)
.text:0000A5AD ?QueryInterface@CHandler@NZip@NArchive@@W3AGJABU_GUID@@PAPAX@Z endp
.text:0000A5AD
.text:0000A5AD ; ---------------------------------------------------------------------------
.text:0000A5B2                 align 4
.text:0000A5B2 _text           ends
.text:0000A5B2
.text:0000A5B4 ; ===========================================================================
.text:0000A5B4
.text:0000A5B4 ; Segment type: Pure code
.text:0000A5B4 ; Segment permissions: Read/Execute
.text:0000A5B4 _text           segment para public 'CODE' use32
.text:0000A5B4                 assume cs:_text
.text:0000A5B4                 ;org 0A5B4h
.text:0000A5B4 ; COMDAT (pick any)
.text:0000A5B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A5B4
.text:0000A5B4 ; =============== S U B R O U T I N E =======================================
.text:0000A5B4
.text:0000A5B4
.text:0000A5B4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{8}' (void)
.text:0000A5B4                 public ?AddRef@CCopyCoder@NCompress@@W7AGKXZ
.text:0000A5B4 ?AddRef@CCopyCoder@NCompress@@W7AGKXZ proc near ; DATA XREF: .rdata:00006300o
.text:0000A5B4
.text:0000A5B4 arg_0           = dword ptr  4
.text:0000A5B4
.text:0000A5B4                 sub     [esp+arg_0], 8
.text:0000A5B9                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:0000A5B9 ?AddRef@CCopyCoder@NCompress@@W7AGKXZ endp
.text:0000A5B9
.text:0000A5B9 ; ---------------------------------------------------------------------------
.text:0000A5BE                 align 10h
.text:0000A5BE _text           ends
.text:0000A5BE
.text:0000A5C0 ; ===========================================================================
.text:0000A5C0
.text:0000A5C0 ; Segment type: Pure code
.text:0000A5C0 ; Segment permissions: Read/Execute
.text:0000A5C0 _text           segment para public 'CODE' use32
.text:0000A5C0                 assume cs:_text
.text:0000A5C0                 ;org 0A5C0h
.text:0000A5C0 ; COMDAT (pick any)
.text:0000A5C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A5C0
.text:0000A5C0 ; =============== S U B R O U T I N E =======================================
.text:0000A5C0
.text:0000A5C0
.text:0000A5C0 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::CAesCbcCoder::AddRef`adjustor{8}' (void)
.text:0000A5C0                 public ?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ
.text:0000A5C0 ?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ proc near ; DATA XREF: .rdata:00008054o
.text:0000A5C0                                         ; .rdata:000082A4o
.text:0000A5C0
.text:0000A5C0 arg_0           = dword ptr  4
.text:0000A5C0
.text:0000A5C0                 sub     [esp+arg_0], 8
.text:0000A5C5                 jmp     ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::AddRef(void)
.text:0000A5C5 ?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ endp
.text:0000A5C5
.text:0000A5C5 ; ---------------------------------------------------------------------------
.text:0000A5CA                 align 4
.text:0000A5CA _text           ends
.text:0000A5CA
.text:0000A5CC ; ===========================================================================
.text:0000A5CC
.text:0000A5CC ; Segment type: Pure code
.text:0000A5CC ; Segment permissions: Read/Execute
.text:0000A5CC _text           segment para public 'CODE' use32
.text:0000A5CC                 assume cs:_text
.text:0000A5CC                 ;org 0A5CCh
.text:0000A5CC ; COMDAT (pick any)
.text:0000A5CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A5CC
.text:0000A5CC ; =============== S U B R O U T I N E =======================================
.text:0000A5CC
.text:0000A5CC
.text:0000A5CC ; [thunk]:public: virtual unsigned long __stdcall NCrypto::NZipStrong::CDecoder::AddRef`adjustor{332}' (void)
.text:0000A5CC                 public ?AddRef@CDecoder@NZipStrong@NCrypto@@WBEM@AGKXZ
.text:0000A5CC ?AddRef@CDecoder@NZipStrong@NCrypto@@WBEM@AGKXZ proc near
.text:0000A5CC                                         ; DATA XREF: .rdata:00007134o
.text:0000A5CC
.text:0000A5CC arg_0           = dword ptr  4
.text:0000A5CC
.text:0000A5CC                 sub     [esp+arg_0], 14Ch
.text:0000A5D4                 jmp     ?AddRef@CDecoder@NZipStrong@NCrypto@@UAGKXZ ; NCrypto::NZipStrong::CDecoder::AddRef(void)
.text:0000A5D4 ?AddRef@CDecoder@NZipStrong@NCrypto@@WBEM@AGKXZ endp
.text:0000A5D4
.text:0000A5D4 ; ---------------------------------------------------------------------------
.text:0000A5D9                 align 4
.text:0000A5D9 _text           ends
.text:0000A5D9
.text:0000A5DC ; ===========================================================================
.text:0000A5DC
.text:0000A5DC ; Segment type: Pure code
.text:0000A5DC ; Segment permissions: Read/Execute
.text:0000A5DC _text           segment para public 'CODE' use32
.text:0000A5DC                 assume cs:_text
.text:0000A5DC                 ;org 0A5DCh
.text:0000A5DC ; COMDAT (pick any)
.text:0000A5DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A5DC
.text:0000A5DC ; =============== S U B R O U T I N E =======================================
.text:0000A5DC
.text:0000A5DC
.text:0000A5DC ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:0000A5DC                 public ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:0000A5DC ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:0000A5DC                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}o
.text:0000A5DC
.text:0000A5DC arg_0           = dword ptr  4
.text:0000A5DC
.text:0000A5DC                 sub     [esp+arg_0], 4
.text:0000A5E1                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:0000A5E1 ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:0000A5E1
.text:0000A5E1 ; ---------------------------------------------------------------------------
.text:0000A5E6                 align 4
.text:0000A5E6 _text           ends
.text:0000A5E6
.text:0000A5E8 ; ===========================================================================
.text:0000A5E8
.text:0000A5E8 ; Segment type: Pure code
.text:0000A5E8 ; Segment permissions: Read/Execute
.text:0000A5E8 _text           segment para public 'CODE' use32
.text:0000A5E8                 assume cs:_text
.text:0000A5E8                 ;org 0A5E8h
.text:0000A5E8 ; COMDAT (pick any)
.text:0000A5E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A5E8
.text:0000A5E8 ; =============== S U B R O U T I N E =======================================
.text:0000A5E8
.text:0000A5E8
.text:0000A5E8 ; [thunk]:public: virtual long __stdcall NArchive::NZip::CHandler::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:0000A5E8                 public ?QueryInterface@CHandler@NZip@NArchive@@W7AGJABU_GUID@@PAPAX@Z
.text:0000A5E8 ?QueryInterface@CHandler@NZip@NArchive@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:0000A5E8                                         ; DATA XREF: .rdata:const NArchive::NZip::CHandler::`vftable'{for `ISetProperties'}o
.text:0000A5E8
.text:0000A5E8 arg_0           = dword ptr  4
.text:0000A5E8
.text:0000A5E8                 sub     [esp+arg_0], 8
.text:0000A5ED                 jmp     ?QueryInterface@CHandler@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NZip::CHandler::QueryInterface(_GUID const &,void * *)
.text:0000A5ED ?QueryInterface@CHandler@NZip@NArchive@@W7AGJABU_GUID@@PAPAX@Z endp
.text:0000A5ED
.text:0000A5ED ; ---------------------------------------------------------------------------
.text:0000A5F2                 align 4
.text:0000A5F2 _text           ends
.text:0000A5F2
.text:0000A5F4 ; ===========================================================================
.text:0000A5F4
.text:0000A5F4 ; Segment type: Pure code
.text:0000A5F4 ; Segment permissions: Read/Execute
.text:0000A5F4 _text           segment para public 'CODE' use32
.text:0000A5F4                 assume cs:_text
.text:0000A5F4                 ;org 0A5F4h
.text:0000A5F4 ; COMDAT (pick any)
.text:0000A5F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A5F4
.text:0000A5F4 ; =============== S U B R O U T I N E =======================================
.text:0000A5F4
.text:0000A5F4
.text:0000A5F4 ; [thunk]:public: virtual long __stdcall NCrypto::CAesCbcCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:0000A5F4                 public ?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.text:0000A5F4 ?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:0000A5F4                                         ; DATA XREF: .rdata:const NCrypto::NZipStrong::CBaseCoder::`vftable'{for `ICryptoProperties'}o
.text:0000A5F4                                         ; .rdata:const NCrypto::CAesCbcDecoder::`vftable'{for `ICryptoProperties'}o
.text:0000A5F4
.text:0000A5F4 arg_0           = dword ptr  4
.text:0000A5F4
.text:0000A5F4                 sub     [esp+arg_0], 4
.text:0000A5F9                 jmp     ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)
.text:0000A5F9 ?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z endp
.text:0000A5F9
.text:0000A5F9 ; ---------------------------------------------------------------------------
.text:0000A5FE                 align 10h
.text:0000A5FE _text           ends
.text:0000A5FE
.text:0000A600 ; ===========================================================================
.text:0000A600
.text:0000A600 ; Segment type: Pure code
.text:0000A600 ; Segment permissions: Read/Execute
.text:0000A600 _text           segment para public 'CODE' use32
.text:0000A600                 assume cs:_text
.text:0000A600                 ;org 0A600h
.text:0000A600 ; COMDAT (pick any)
.text:0000A600                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A600
.text:0000A600 ; =============== S U B R O U T I N E =======================================
.text:0000A600
.text:0000A600
.text:0000A600 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{12}' (void)
.text:0000A600                 public ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
.text:0000A600 ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ proc near
.text:0000A600                                         ; DATA XREF: .rdata:000062ECo
.text:0000A600
.text:0000A600 arg_0           = dword ptr  4
.text:0000A600
.text:0000A600                 sub     [esp+arg_0], 0Ch
.text:0000A605                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:0000A605 ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ endp
.text:0000A605
.text:0000A605 ; ---------------------------------------------------------------------------
.text:0000A60A                 align 4
.text:0000A60A _text           ends
.text:0000A60A
.text:0000A60C ; ===========================================================================
.text:0000A60C
.text:0000A60C ; Segment type: Pure code
.text:0000A60C ; Segment permissions: Read/Execute
.text:0000A60C _text           segment para public 'CODE' use32
.text:0000A60C                 assume cs:_text
.text:0000A60C                 ;org 0A60Ch
.text:0000A60C ; COMDAT (pick any)
.text:0000A60C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A60C
.text:0000A60C ; =============== S U B R O U T I N E =======================================
.text:0000A60C
.text:0000A60C
.text:0000A60C ; [thunk]:public: virtual unsigned long __stdcall NCrypto::NWzAes::CBaseCoder::Release`adjustor{4}' (void)
.text:0000A60C                 public ?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ
.text:0000A60C ?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ proc near
.text:0000A60C                                         ; DATA XREF: .rdata:00006CE0o
.text:0000A60C                                         ; .rdata:00007F20o
.text:0000A60C
.text:0000A60C arg_0           = dword ptr  4
.text:0000A60C
.text:0000A60C                 sub     [esp+arg_0], 4
.text:0000A611                 jmp     ?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ ; NCrypto::NWzAes::CBaseCoder::Release(void)
.text:0000A611 ?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ endp
.text:0000A611
.text:0000A611 ; ---------------------------------------------------------------------------
.text:0000A616                 align 4
.text:0000A616 _text           ends
.text:0000A616
.text:0000A618 ; ===========================================================================
.text:0000A618
.text:0000A618 ; Segment type: Pure code
.text:0000A618 ; Segment permissions: Read/Execute
.text:0000A618 _text           segment para public 'CODE' use32
.text:0000A618                 assume cs:_text
.text:0000A618                 ;org 0A618h
.text:0000A618 ; COMDAT (pick any)
.text:0000A618                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A618
.text:0000A618 ; =============== S U B R O U T I N E =======================================
.text:0000A618
.text:0000A618
.text:0000A618 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::NZipStrong::CDecoder::Release`adjustor{4}' (void)
.text:0000A618                 public ?Release@CDecoder@NZipStrong@NCrypto@@W3AGKXZ
.text:0000A618 ?Release@CDecoder@NZipStrong@NCrypto@@W3AGKXZ proc near
.text:0000A618                                         ; DATA XREF: .rdata:00007160o
.text:0000A618
.text:0000A618 arg_0           = dword ptr  4
.text:0000A618
.text:0000A618                 sub     [esp+arg_0], 4
.text:0000A61D                 jmp     ?Release@CDecoder@NZipStrong@NCrypto@@UAGKXZ ; NCrypto::NZipStrong::CDecoder::Release(void)
.text:0000A61D ?Release@CDecoder@NZipStrong@NCrypto@@W3AGKXZ endp
.text:0000A61D
.text:0000A61D ; ---------------------------------------------------------------------------
.text:0000A622                 align 4
.text:0000A622 _text           ends
.text:0000A622
.text:0000A624 ; ===========================================================================
.text:0000A624
.text:0000A624 ; Segment type: Pure code
.text:0000A624 ; Segment permissions: Read/Execute
.text:0000A624 _text           segment para public 'CODE' use32
.text:0000A624                 assume cs:_text
.text:0000A624                 ;org 0A624h
.text:0000A624 ; COMDAT (pick any)
.text:0000A624                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A624
.text:0000A624 ; =============== S U B R O U T I N E =======================================
.text:0000A624
.text:0000A624
.text:0000A624 ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:0000A624                 public ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:0000A624 ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:0000A624                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}o
.text:0000A624
.text:0000A624 arg_0           = dword ptr  4
.text:0000A624
.text:0000A624                 sub     [esp+arg_0], 8
.text:0000A629                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:0000A629 ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:0000A629
.text:0000A629 ; ---------------------------------------------------------------------------
.text:0000A62E                 align 10h
.text:0000A62E _text           ends
.text:0000A62E
.text:0000A630 ; ===========================================================================
.text:0000A630
.text:0000A630 ; Segment type: Pure code
.text:0000A630 ; Segment permissions: Read/Execute
.text:0000A630 _text           segment para public 'CODE' use32
.text:0000A630                 assume cs:_text
.text:0000A630                 ;org 0A630h
.text:0000A630 ; COMDAT (pick any)
.text:0000A630                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A630
.text:0000A630 ; =============== S U B R O U T I N E =======================================
.text:0000A630
.text:0000A630
.text:0000A630 ; [thunk]:public: virtual long __stdcall NCrypto::CAesCbcCoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:0000A630                 public ?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z
.text:0000A630 ?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:0000A630                                         ; DATA XREF: .rdata:const NCrypto::NZipStrong::CBaseCoder::`vftable'{for `ICompressSetCoderProperties'}o
.text:0000A630                                         ; .rdata:const NCrypto::CAesCbcDecoder::`vftable'{for `ICompressSetCoderProperties'}o
.text:0000A630
.text:0000A630 arg_0           = dword ptr  4
.text:0000A630
.text:0000A630                 sub     [esp+arg_0], 8
.text:0000A635                 jmp     ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)
.text:0000A635 ?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z endp
.text:0000A635
.text:0000A635 ; ---------------------------------------------------------------------------
.text:0000A63A                 align 4
.text:0000A63A _text           ends
.text:0000A63A
.text:0000A63C ; ===========================================================================
.text:0000A63C
.text:0000A63C ; Segment type: Pure code
.text:0000A63C ; Segment permissions: Read/Execute
.text:0000A63C _text           segment para public 'CODE' use32
.text:0000A63C                 assume cs:_text
.text:0000A63C                 ;org 0A63Ch
.text:0000A63C ; COMDAT (pick any)
.text:0000A63C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A63C
.text:0000A63C ; =============== S U B R O U T I N E =======================================
.text:0000A63C
.text:0000A63C
.text:0000A63C ; [thunk]:public: virtual long __stdcall NCrypto::NZipStrong::CDecoder::QueryInterface`adjustor{332}' (struct _GUID const &, void * *)
.text:0000A63C                 public ?QueryInterface@CDecoder@NZipStrong@NCrypto@@WBEM@AGJABU_GUID@@PAPAX@Z
.text:0000A63C ?QueryInterface@CDecoder@NZipStrong@NCrypto@@WBEM@AGJABU_GUID@@PAPAX@Z proc near
.text:0000A63C                                         ; DATA XREF: .rdata:const NCrypto::NZipStrong::CDecoder::`vftable'o
.text:0000A63C
.text:0000A63C arg_0           = dword ptr  4
.text:0000A63C
.text:0000A63C                 sub     [esp+arg_0], 14Ch
.text:0000A644                 jmp     ?QueryInterface@CDecoder@NZipStrong@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::NZipStrong::CDecoder::QueryInterface(_GUID const &,void * *)
.text:0000A644 ?QueryInterface@CDecoder@NZipStrong@NCrypto@@WBEM@AGJABU_GUID@@PAPAX@Z endp
.text:0000A644
.text:0000A644 ; ---------------------------------------------------------------------------
.text:0000A649                 align 4
.text:0000A649 _text           ends
.text:0000A649
.text:0000A64C ; ===========================================================================
.text:0000A64C
.text:0000A64C ; Segment type: Pure code
.text:0000A64C ; Segment permissions: Read/Execute
.text:0000A64C _text           segment para public 'CODE' use32
.text:0000A64C                 assume cs:_text
.text:0000A64C                 ;org 0A64Ch
.text:0000A64C ; COMDAT (pick any)
.text:0000A64C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A64C
.text:0000A64C ; =============== S U B R O U T I N E =======================================
.text:0000A64C
.text:0000A64C
.text:0000A64C ; [thunk]:public: virtual unsigned long __stdcall NCrypto::NZipStrong::CDecoder::Release`adjustor{8}' (void)
.text:0000A64C                 public ?Release@CDecoder@NZipStrong@NCrypto@@W7AGKXZ
.text:0000A64C ?Release@CDecoder@NZipStrong@NCrypto@@W7AGKXZ proc near
.text:0000A64C                                         ; DATA XREF: .rdata:0000714Co
.text:0000A64C
.text:0000A64C arg_0           = dword ptr  4
.text:0000A64C
.text:0000A64C                 sub     [esp+arg_0], 8
.text:0000A651                 jmp     ?Release@CDecoder@NZipStrong@NCrypto@@UAGKXZ ; NCrypto::NZipStrong::CDecoder::Release(void)
.text:0000A651 ?Release@CDecoder@NZipStrong@NCrypto@@W7AGKXZ endp
.text:0000A651
.text:0000A651 ; ---------------------------------------------------------------------------
.text:0000A656                 align 4
.text:0000A656 _text           ends
.text:0000A656
.text:0000A658 ; ===========================================================================
.text:0000A658
.text:0000A658 ; Segment type: Pure code
.text:0000A658 ; Segment permissions: Read/Execute
.text:0000A658 _text           segment para public 'CODE' use32
.text:0000A658                 assume cs:_text
.text:0000A658                 ;org 0A658h
.text:0000A658 ; COMDAT (pick any)
.text:0000A658                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A658
.text:0000A658 ; =============== S U B R O U T I N E =======================================
.text:0000A658
.text:0000A658
.text:0000A658 ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:0000A658                 public ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.text:0000A658 ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:0000A658                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}o
.text:0000A658
.text:0000A658 arg_0           = dword ptr  4
.text:0000A658
.text:0000A658                 sub     [esp+arg_0], 0Ch
.text:0000A65D                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:0000A65D ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:0000A65D
.text:0000A65D ; ---------------------------------------------------------------------------
.text:0000A662                 align 4
.text:0000A662 _text           ends
.text:0000A662
.text:0000A664 ; ===========================================================================
.text:0000A664
.text:0000A664 ; Segment type: Pure code
.text:0000A664 ; Segment permissions: Read/Execute
.text:0000A664 _text           segment para public 'CODE' use32
.text:0000A664                 assume cs:_text
.text:0000A664                 ;org 0A664h
.text:0000A664 ; COMDAT (pick any)
.text:0000A664                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A664
.text:0000A664 ; =============== S U B R O U T I N E =======================================
.text:0000A664
.text:0000A664
.text:0000A664 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::NWzAes::CBaseCoder::AddRef`adjustor{4}' (void)
.text:0000A664                 public ?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ
.text:0000A664 ?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ proc near
.text:0000A664                                         ; DATA XREF: .rdata:00006CDCo
.text:0000A664                                         ; .rdata:00007F1Co
.text:0000A664
.text:0000A664 arg_0           = dword ptr  4
.text:0000A664
.text:0000A664                 sub     [esp+arg_0], 4
.text:0000A669                 jmp     ?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ ; NCrypto::NWzAes::CBaseCoder::AddRef(void)
.text:0000A669 ?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ endp
.text:0000A669
.text:0000A669 ; ---------------------------------------------------------------------------
.text:0000A66E                 align 10h
.text:0000A66E _text           ends
.text:0000A66E
.text:0000A670 ; ===========================================================================
.text:0000A670
.text:0000A670 ; Segment type: Pure code
.text:0000A670 ; Segment permissions: Read/Execute
.text:0000A670 _text           segment para public 'CODE' use32
.text:0000A670                 assume cs:_text
.text:0000A670                 ;org 0A670h
.text:0000A670 ; COMDAT (pick any)
.text:0000A670                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A670
.text:0000A670 ; =============== S U B R O U T I N E =======================================
.text:0000A670
.text:0000A670
.text:0000A670 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::NZipStrong::CDecoder::AddRef`adjustor{4}' (void)
.text:0000A670                 public ?AddRef@CDecoder@NZipStrong@NCrypto@@W3AGKXZ
.text:0000A670 ?AddRef@CDecoder@NZipStrong@NCrypto@@W3AGKXZ proc near
.text:0000A670                                         ; DATA XREF: .rdata:0000715Co
.text:0000A670
.text:0000A670 arg_0           = dword ptr  4
.text:0000A670
.text:0000A670                 sub     [esp+arg_0], 4
.text:0000A675                 jmp     ?AddRef@CDecoder@NZipStrong@NCrypto@@UAGKXZ ; NCrypto::NZipStrong::CDecoder::AddRef(void)
.text:0000A675 ?AddRef@CDecoder@NZipStrong@NCrypto@@W3AGKXZ endp
.text:0000A675
.text:0000A675 ; ---------------------------------------------------------------------------
.text:0000A67A                 align 4
.text:0000A67A _text           ends
.text:0000A67A
.text:0000A67C ; ===========================================================================
.text:0000A67C
.text:0000A67C ; Segment type: Pure code
.text:0000A67C ; Segment permissions: Read/Execute
.text:0000A67C _text           segment para public 'CODE' use32
.text:0000A67C                 assume cs:_text
.text:0000A67C                 ;org 0A67Ch
.text:0000A67C ; COMDAT (pick any)
.text:0000A67C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A67C
.text:0000A67C ; =============== S U B R O U T I N E =======================================
.text:0000A67C
.text:0000A67C
.text:0000A67C ; [thunk]:public: virtual unsigned long __stdcall NCrypto::NZip::CCipher::Release`adjustor{4}' (void)
.text:0000A67C                 public ?Release@CCipher@NZip@NCrypto@@W3AGKXZ
.text:0000A67C ?Release@CCipher@NZip@NCrypto@@W3AGKXZ proc near
.text:0000A67C                                         ; DATA XREF: .rdata:00007738o
.text:0000A67C                                         ; .rdata:00008378o
.text:0000A67C
.text:0000A67C arg_0           = dword ptr  4
.text:0000A67C
.text:0000A67C                 sub     [esp+arg_0], 4
.text:0000A681                 jmp     ?Release@CCipher@NZip@NCrypto@@UAGKXZ ; NCrypto::NZip::CCipher::Release(void)
.text:0000A681 ?Release@CCipher@NZip@NCrypto@@W3AGKXZ endp
.text:0000A681
.text:0000A681 ; ---------------------------------------------------------------------------
.text:0000A686                 align 4
.text:0000A686 _text           ends
.text:0000A686
.text:0000A688 ; ===========================================================================
.text:0000A688
.text:0000A688 ; Segment type: Pure code
.text:0000A688 ; Segment permissions: Read/Execute
.text:0000A688 _text           segment para public 'CODE' use32
.text:0000A688                 assume cs:_text
.text:0000A688                 ;org 0A688h
.text:0000A688 ; COMDAT (pick any)
.text:0000A688                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000A688
.text:0000A688 ; =============== S U B R O U T I N E =======================================
.text:0000A688
.text:0000A688
.text:0000A688 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NZip::CHandler::Release`adjustor{4}' (void)
.text:0000A688                 public ?Release@CHandler@NZip@NArchive@@W3AGKXZ
.text:0000A688 ?Release@CHandler@NZip@NArchive@@W3AGKXZ proc near
.text:0000A688                                         ; DATA XREF: .rdata:00004364o
.text:0000A688
.text:0000A688 arg_0           = dword ptr  4
.text:0000A688
.text:0000A688                 sub     [esp+arg_0], 4
.text:0000A68D                 jmp     ?Release@CHandler@NZip@NArchive@@UAGKXZ ; NArchive::NZip::CHandler::Release(void)
.text:0000A68D ?Release@CHandler@NZip@NArchive@@W3AGKXZ endp
.text:0000A68D
.text:0000A68D _text           ends
.text:0000A68D
UNDEF:0000A6A0 ; ===========================================================================
UNDEF:0000A6A0
UNDEF:0000A6A0 ; Segment type: Externs
UNDEF:0000A6A0 ; UNDEF
UNDEF:0000A6A0                 extrn __RTC_Shutdown:near
UNDEF:0000A6A0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000A6A4                 extrn __RTC_InitBase:near
UNDEF:0000A6A4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000A6A8                 extrn ___security_cookie:near
UNDEF:0000A6A8                                         ; DATA XREF: NArchive::NZip::CHandler::CHandler(void)+19r
UNDEF:0000A6A8                                         ; NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+2Dr ...
UNDEF:0000A6AC                 extrn ___CxxFrameHandler3:near
UNDEF:0000A6AC                                         ; CODE XREF: __ehhandler$??0CHandler@NZip@NArchive@@QAE@XZ+16j
UNDEF:0000A6AC                                         ; __ehhandler$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z+19j ...
UNDEF:0000A6B0 ; __fastcall __security_check_cookie(x)
UNDEF:0000A6B0                 extrn @__security_check_cookie@4:near
UNDEF:0000A6B0                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+855p
UNDEF:0000A6B0                                         ; NArchive::NZip::CLzmaDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+ECp ...
UNDEF:0000A6B4                 extrn __RTC_CheckEsp:near
UNDEF:0000A6B4                                         ; CODE XREF: NArchive::NZip::CHandler::CHandler(void)+C8p
UNDEF:0000A6B4                                         ; $LN33+2Ep ...
UNDEF:0000A6B8 ; const type_info::`vftable'
UNDEF:0000A6B8                 extrn ??_7type_info@@6B@:near
UNDEF:0000A6B8                                         ; DATA XREF: .data:NArchive::NZip::CHandler `RTTI Type Descriptor'o
UNDEF:0000A6B8                                         ; .data:IInArchive `RTTI Type Descriptor'o ...
UNDEF:0000A6BC ; public: virtual long __stdcall NArchive::NZip::CHandler::UpdateItems(struct ISequentialOutStream *, unsigned int, struct IArchiveUpdateCallback *)
UNDEF:0000A6BC                 extrn ?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z:near
UNDEF:0000A6BC                                         ; DATA XREF: .rdata:00004368o
UNDEF:0000A6C0 ; public: virtual long __stdcall NArchive::NZip::CHandler::GetFileTimeType(unsigned int *)
UNDEF:0000A6C0                 extrn ?GetFileTimeType@CHandler@NZip@NArchive@@UAGJPAI@Z:near
UNDEF:0000A6C0                                         ; DATA XREF: .rdata:0000436Co
UNDEF:0000A6C4 ; public: virtual long __stdcall NArchive::NZip::CHandler::SetProperties(wchar_t const * const *, struct tagPROPVARIANT const *, unsigned int)
UNDEF:0000A6C4                 extrn ?SetProperties@CHandler@NZip@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z:near
UNDEF:0000A6C4                                         ; DATA XREF: .rdata:00004354o
UNDEF:0000A6C8                 extrn _IID_ISetProperties:near
UNDEF:0000A6C8                                         ; DATA XREF: NArchive::NZip::CHandler::QueryInterface(_GUID const &,void * *):loc_4BCCo
UNDEF:0000A6CC                 extrn _IID_IOutArchive:near
UNDEF:0000A6CC                                         ; DATA XREF: NArchive::NZip::CHandler::QueryInterface(_GUID const &,void * *):loc_4B98o
UNDEF:0000A6D0                 extrn _IID_IInArchive:near
UNDEF:0000A6D0                                         ; DATA XREF: NArchive::NZip::CHandler::QueryInterface(_GUID const &,void * *):loc_4B7Co
UNDEF:0000A6D4 ; const IID IID_IUnknown
UNDEF:0000A6D4                 extrn _IID_IUnknown:near
UNDEF:0000A6D4                                         ; DATA XREF: NArchive::NZip::CHandler::QueryInterface(_GUID const &,void * *)+1Do
UNDEF:0000A6D4                                         ; NArchive::NZip::CLzmaDecoder::QueryInterface(_GUID const &,void * *)+Co ...
UNDEF:0000A6D8 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:0000A6D8                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:0000A6DC ; unsigned int NWindows::NSystem::GetNumberOfProcessors(NWindows::NSystem *__hidden this)
UNDEF:0000A6DC                 extrn ?GetNumberOfProcessors@NSystem@NWindows@@YGIXZ:near
UNDEF:0000A6DC                                         ; CODE XREF: NArchive::NZip::CBaseProps::Init(void)+20p
UNDEF:0000A6E0 ; void __cdecl operator delete(void *)
UNDEF:0000A6E0                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ$1+4p
UNDEF:0000A6E0                                         ; __unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$1+7p ...
UNDEF:0000A6E4 ; void __thiscall CInBuffer::Free(CInBuffer *__hidden this)
UNDEF:0000A6E4                 extrn ?Free@CInBuffer@@QAEXXZ:near
UNDEF:0000A6E4                                         ; CODE XREF: CInBuffer::~CInBuffer(void)+11p
UNDEF:0000A6E8                 extrn __purecall:near   ; DATA XREF: .rdata:const IInArchive::`vftable'o
UNDEF:0000A6E8                                         ; .rdata:00005088o ...
UNDEF:0000A6EC ; _DWORD __thiscall CInBufferBase::CInBufferBase(CInBufferBase *__hidden this)
UNDEF:0000A6EC                 extrn ??0CInBufferBase@@QAE@XZ:near
UNDEF:0000A6EC                                         ; CODE XREF: CInBuffer::CInBuffer(void)+11p
UNDEF:0000A6F0 ; unsigned char const * const k7z_PROPID_To_VARTYPE
UNDEF:0000A6F0                 extrn ?k7z_PROPID_To_VARTYPE@@3QBEB:near
UNDEF:0000A6F0                                         ; DATA XREF: NArchive::NZip::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+24r
UNDEF:0000A6F0                                         ; NArchive::NZip::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+24r
UNDEF:0000A6F4 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Detach(NWindows::NCOM::CPropVariant *__hidden this, struct tagPROPVARIANT *)
UNDEF:0000A6F4                 extrn ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z:near
UNDEF:0000A6F4                                         ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+31Fp
UNDEF:0000A6F4                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+7E2p
UNDEF:0000A6F8 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned int)
UNDEF:0000A6F8                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z:near
UNDEF:0000A6F8                                         ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1D2p
UNDEF:0000A6F8                                         ; NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+2CFp ...
UNDEF:0000A6FC ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(__int64)
UNDEF:0000A6FC                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_J@Z:near
UNDEF:0000A6FC                                         ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+157p
UNDEF:0000A700 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
UNDEF:0000A700                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:near
UNDEF:0000A700                                         ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+13Fp
UNDEF:0000A700                                         ; NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+19Dp ...
UNDEF:0000A704 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(class UString const &)
UNDEF:0000A704                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z:near
UNDEF:0000A704                                         ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+101p
UNDEF:0000A704                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+FEp ...
UNDEF:0000A708 ; struct UString __stdcall __high MultiByteToUnicodeString(const struct AString *, unsigned int)
UNDEF:0000A708                 extrn ?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z:near
UNDEF:0000A708                                         ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+E8p
UNDEF:0000A70C ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(bool)
UNDEF:0000A70C                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z:near
UNDEF:0000A70C                                         ; CODE XREF: NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+9Dp
UNDEF:0000A70C                                         ; NArchive::NZip::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+313p ...
UNDEF:0000A710 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000A710                 extrn @_RTC_CheckStackVars@8:near ; CODE XREF: $LN33+11p
UNDEF:0000A710                                         ; NArchive::NZip::BytesToString(CBuffer<uchar> const &)+9Ap ...
UNDEF:0000A714 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:0000A714                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:0000A714                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:0000A718 ; public: __thiscall AString::AString(class AString const &)
UNDEF:0000A718                 extrn ??0AString@@QAE@ABV0@@Z:near
UNDEF:0000A718                                         ; CODE XREF: NArchive::NZip::BytesToString(CBuffer<uchar> const &)+73p
UNDEF:0000A718                                         ; NArchive::NZip::CLocalItem::CLocalItem(NArchive::NZip::CLocalItem const &)+9Ep
UNDEF:0000A71C ; void __thiscall AString::SetFrom_CalcLen(AString *__hidden this, const char *, unsigned int)
UNDEF:0000A71C                 extrn ?SetFrom_CalcLen@AString@@QAEXPBDI@Z:near
UNDEF:0000A71C                                         ; CODE XREF: NArchive::NZip::BytesToString(CBuffer<uchar> const &)+67p
UNDEF:0000A720 ; public: __thiscall AString::AString(void)
UNDEF:0000A720                 extrn ??0AString@@QAE@XZ:near
UNDEF:0000A720                                         ; CODE XREF: NArchive::NZip::BytesToString(CBuffer<uchar> const &)+46p
UNDEF:0000A720                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+4A7p ...
UNDEF:0000A724 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(char const *)
UNDEF:0000A724                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z:near
UNDEF:0000A724                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+73Bp
UNDEF:0000A724                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+7C4p
UNDEF:0000A728 ; void __stdcall ConvertUInt32ToString(unsigned int, char *)
UNDEF:0000A728                 extrn ?ConvertUInt32ToString@@YGXIPAD@Z:near
UNDEF:0000A728                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+53Bp
UNDEF:0000A728                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+61Cp ...
UNDEF:0000A72C ; public: class AString & __thiscall AString::operator+=(char const *)
UNDEF:0000A72C                 extrn ??YAString@@QAEAAV0@PBD@Z:near
UNDEF:0000A72C                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+4ECp
UNDEF:0000A72C                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+54Dp ...
UNDEF:0000A730 ; bool __thiscall NArchive::NZip::CItem::GetPosixAttrib(NArchive::NZip::CItem *__hidden this, unsigned int *)
UNDEF:0000A730                 extrn ?GetPosixAttrib@CItem@NZip@NArchive@@QBE_NAAI@Z:near
UNDEF:0000A730                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+361p
UNDEF:0000A734 ; unsigned int __thiscall NArchive::NZip::CItem::GetWinAttrib(NArchive::NZip::CItem *__hidden this)
UNDEF:0000A734                 extrn ?GetWinAttrib@CItem@NZip@NArchive@@QBEIXZ:near
UNDEF:0000A734                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+338p
UNDEF:0000A738 ; BOOL __stdcall LocalFileTimeToFileTime(const FILETIME *lpLocalFileTime, LPFILETIME lpFileTime)
UNDEF:0000A738                 extrn __imp__LocalFileTimeToFileTime@8:near
UNDEF:0000A738                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+2EFp
UNDEF:0000A738                                         ; DATA XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+2EFr
UNDEF:0000A73C ; bool NWindows::NTime::DosTimeToFileTime(NWindows::NTime *__hidden this, unsigned int, struct _FILETIME *)
UNDEF:0000A73C                 extrn ?DosTimeToFileTime@NTime@NWindows@@YG_NIAAU_FILETIME@@@Z:near
UNDEF:0000A73C                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+2D3p
UNDEF:0000A740 ; void NWindows::NTime::UnixTimeToFileTime(NWindows::NTime *__hidden this, unsigned int, struct _FILETIME *)
UNDEF:0000A740                 extrn ?UnixTimeToFileTime@NTime@NWindows@@YGXIAAU_FILETIME@@@Z:near
UNDEF:0000A740                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+2ACp
UNDEF:0000A744 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(struct _FILETIME const &)
UNDEF:0000A744                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z:near
UNDEF:0000A744                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+200p
UNDEF:0000A744                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+233p ...
UNDEF:0000A748 ; bool __thiscall NArchive::NZip::CItem::IsDir(NArchive::NZip::CItem *__hidden this)
UNDEF:0000A748                 extrn ?IsDir@CItem@NZip@NArchive@@QBE_NXZ:near
UNDEF:0000A748                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+117p
UNDEF:0000A748                                         ; NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3FAp ...
UNDEF:0000A74C ; void NArchive::NItemName::ConvertToOSName2(NArchive::NItemName *__hidden this, struct UString *)
UNDEF:0000A74C                 extrn ?ConvertToOSName2@NItemName@NArchive@@YGXAAVUString@@@Z:near
UNDEF:0000A74C                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+F2p
UNDEF:0000A750 ; _DWORD __thiscall UString::UString(UString *__hidden this)
UNDEF:0000A750                 extrn ??0UString@@QAE@XZ:near
UNDEF:0000A750                                         ; CODE XREF: NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+B7p
UNDEF:0000A750                                         ; NArchive::NZip::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+3D2p
UNDEF:0000A754 ; void __thiscall AString::Grow_1(AString *__hidden this)
UNDEF:0000A754                 extrn ?Grow_1@AString@@AAEXXZ:near
UNDEF:0000A754                                         ; CODE XREF: AString::operator+=(char)+2Fp
UNDEF:0000A758 ; bool __thiscall NArchive::NZip::CExtraSubBlock::ExtractNtfsTime(NArchive::NZip::CExtraSubBlock *__hidden this, unsigned int, struct _FILETIME *)
UNDEF:0000A758                 extrn ?ExtractNtfsTime@CExtraSubBlock@NZip@NArchive@@QBE_NIAAU_FILETIME@@@Z:near
UNDEF:0000A758                                         ; CODE XREF: NArchive::NZip::CExtraBlock::GetNtfsTime(uint,_FILETIME &)+62p
UNDEF:0000A75C ; bool __thiscall NArchive::NZip::CExtraSubBlock::ExtractUnixTime(NArchive::NZip::CExtraSubBlock *__hidden this, bool, unsigned int, unsigned int *)
UNDEF:0000A75C                 extrn ?ExtractUnixTime@CExtraSubBlock@NZip@NArchive@@QBE_N_NIAAI@Z:near
UNDEF:0000A75C                                         ; CODE XREF: NArchive::NZip::CExtraBlock::GetUnixTime(bool,uint,uint &)+69p
UNDEF:0000A760 ; void __stdcall MultiByteToUnicodeString2(struct UString *, const struct AString *, unsigned int)
UNDEF:0000A760                 extrn ?MultiByteToUnicodeString2@@YGXAAVUString@@ABVAString@@I@Z:near
UNDEF:0000A760                                         ; CODE XREF: NArchive::NZip::CItem::GetUnicodeString(AString const &,UString &,bool,uint)+B3p
UNDEF:0000A764 ; bool __stdcall ConvertUTF8ToUnicode(const struct AString *, struct UString *)
UNDEF:0000A764                 extrn ?ConvertUTF8ToUnicode@@YG_NABVAString@@AAVUString@@@Z:near
UNDEF:0000A764                                         ; CODE XREF: NArchive::NZip::CItem::GetUnicodeString(AString const &,UString &,bool,uint)+76p
UNDEF:0000A768 ; public: long __thiscall NArchive::NZip::CInArchive::ReadHeaders(class CObjectVector<class NArchive::NZip::CItemEx> &, struct NArchive::NZip::CProgressVirt *)
UNDEF:0000A768                 extrn ?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z:near
UNDEF:0000A768                                         ; CODE XREF: NArchive::NZip::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+B4p
UNDEF:0000A76C ; __int32 __thiscall NArchive::NZip::CInArchive::Open(NArchive::NZip::CInArchive *__hidden this, struct IInStream *, const unsigned __int64 *)
UNDEF:0000A76C                 extrn ?Open@CInArchive@NZip@NArchive@@QAEJPAUIInStream@@PB_K@Z:near
UNDEF:0000A76C                                         ; CODE XREF: NArchive::NZip::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+6Bp
UNDEF:0000A770 ; __stdcall _CxxThrowException(x, x)
UNDEF:0000A770                 extrn __CxxThrowException@8:near
UNDEF:0000A770                                         ; CODE XREF: __catch$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0+1Bp
UNDEF:0000A774 ; void __thiscall NArchive::NZip::CInArchive::Close(NArchive::NZip::CInArchive *__hidden this)
UNDEF:0000A774                 extrn ?Close@CInArchive@NZip@NArchive@@QAEXXZ:near
UNDEF:0000A774                                         ; CODE XREF: NArchive::NZip::CHandler::Close(void)+14p
UNDEF:0000A778 ; _DWORD __thiscall NCompress::NLzma::CDecoder::CDecoder(NCompress::NLzma::CDecoder *__hidden this)
UNDEF:0000A778                 extrn ??0CDecoder@NLzma@NCompress@@QAE@XZ:near
UNDEF:0000A778                                         ; CODE XREF: NArchive::NZip::CLzmaDecoder::CLzmaDecoder(void)+84p
UNDEF:0000A77C ; void *__cdecl operator new(unsigned int)
UNDEF:0000A77C                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::NZip::CLzmaDecoder::CLzmaDecoder(void)+6Cp
UNDEF:0000A77C                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+11Dp ...
UNDEF:0000A780 ; __int32 __stdcall ReadStream_FALSE(struct ISequentialInStream *, void *, unsigned int)
UNDEF:0000A780                 extrn ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z:near
UNDEF:0000A780                                         ; CODE XREF: NArchive::NZip::CLzmaDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3Bp
UNDEF:0000A784 ; int __thiscall NArchive::NXz::CDecoder::Get_Extract_OperationResult(NArchive::NXz::CDecoder *__hidden this)
UNDEF:0000A784                 extrn ?Get_Extract_OperationResult@CDecoder@NXz@NArchive@@QBEHXZ:near
UNDEF:0000A784                                         ; CODE XREF: NArchive::NZip::CXzDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3Fp
UNDEF:0000A788 ; __int32 __thiscall NArchive::NXz::CDecoder::Decode(NArchive::NXz::CDecoder *__hidden this, struct ISequentialInStream *, struct ISequentialOutStream *, struct ICompressProgressInfo *)
UNDEF:0000A788                 extrn ?Decode@CDecoder@NXz@NArchive@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z:near
UNDEF:0000A788                                         ; CODE XREF: NArchive::NZip::CXzDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+26p
UNDEF:0000A78C ; __int32 __thiscall NCrypto::NWzAes::CDecoder::CheckMac(NCrypto::NWzAes::CDecoder *__hidden this, struct ISequentialInStream *, bool *)
UNDEF:0000A78C                 extrn ?CheckMac@CDecoder@NWzAes@NCrypto@@QAEJPAUISequentialInStream@@AA_N@Z:near
UNDEF:0000A78C                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+16D3p
UNDEF:0000A790 ; __int32 __thiscall CFilterCoder::Init_NoSubFilterInit(CFilterCoder *__hidden this)
UNDEF:0000A790                 extrn ?Init_NoSubFilterInit@CFilterCoder@@QAEJXZ:near
UNDEF:0000A790                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1442p
UNDEF:0000A794 ; void __thiscall NCrypto::NZip::CDecoder::Init_BeforeDecode(NCrypto::NZip::CDecoder *__hidden this)
UNDEF:0000A794                 extrn ?Init_BeforeDecode@CDecoder@NZip@NCrypto@@QAEXXZ:near
UNDEF:0000A794                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+12D4p
UNDEF:0000A798 ; __int32 __thiscall NCrypto::NZip::CDecoder::ReadHeader(NCrypto::NZip::CDecoder *__hidden this, struct ISequentialInStream *)
UNDEF:0000A798                 extrn ?ReadHeader@CDecoder@NZip@NCrypto@@QAEJPAUISequentialInStream@@@Z:near
UNDEF:0000A798                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+12B7p
UNDEF:0000A79C ; __int32 __thiscall NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(NCrypto::NZipStrong::CDecoder *__hidden this, bool *)
UNDEF:0000A79C                 extrn ?Init_and_CheckPassword@CDecoder@NZipStrong@NCrypto@@QAEJAA_N@Z:near
UNDEF:0000A79C                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1225p
UNDEF:0000A7A0 ; __int32 __thiscall NCrypto::NZipStrong::CDecoder::ReadHeader(NCrypto::NZipStrong::CDecoder *__hidden this, struct ISequentialInStream *, unsigned int, unsigned __int64)
UNDEF:0000A7A0                 extrn ?ReadHeader@CDecoder@NZipStrong@NCrypto@@QAEJPAUISequentialInStream@@I_K@Z:near
UNDEF:0000A7A0                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1200p
UNDEF:0000A7A4 ; bool __thiscall NCrypto::NWzAes::CDecoder::Init_and_CheckPassword(NCrypto::NWzAes::CDecoder *__hidden this)
UNDEF:0000A7A4                 extrn ?Init_and_CheckPassword@CDecoder@NWzAes@NCrypto@@QAE_NXZ:near
UNDEF:0000A7A4                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1162p
UNDEF:0000A7A8 ; __int32 __thiscall NCrypto::NWzAes::CDecoder::ReadHeader(NCrypto::NWzAes::CDecoder *__hidden this, struct ISequentialInStream *)
UNDEF:0000A7A8                 extrn ?ReadHeader@CDecoder@NWzAes@NCrypto@@QAEJPAUISequentialInStream@@@Z:near
UNDEF:0000A7A8                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+1148p
UNDEF:0000A7AC ; public: __thiscall CFilterCoder::CFilterCoder(bool)
UNDEF:0000A7AC                 extrn ??0CFilterCoder@@QAE@_N@Z:near
UNDEF:0000A7AC                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+10A3p
UNDEF:0000A7B0                 extrn _IID_ICompressSetCoderMt:near
UNDEF:0000A7B0                                         ; DATA XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+F5Eo
UNDEF:0000A7B4                 extrn _IID_ICompressSetDecoderProperties2:near
UNDEF:0000A7B4                                         ; DATA XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+E56o
UNDEF:0000A7B8 ; long __stdcall CreateCoder(unsigned __int64, bool, class CMyComPtr<struct ICompressCoder> &)
UNDEF:0000A7B8                 extrn ?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z:near
UNDEF:0000A7B8                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+D14p
UNDEF:0000A7BC ; _DWORD __thiscall NCompress::NPpmdZip::CDecoder::CDecoder(NCompress::NPpmdZip::CDecoder *__hidden this, bool)
UNDEF:0000A7BC                 extrn ??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z:near
UNDEF:0000A7BC                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+C1Ep
UNDEF:0000A7C0 ; _DWORD __thiscall NCompress::NImplode::NDecoder::CCoder::CCoder(NCompress::NImplode::NDecoder::CCoder *__hidden this)
UNDEF:0000A7C0                 extrn ??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ:near
UNDEF:0000A7C0                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+AE1p
UNDEF:0000A7C4 ; public: class AString & __thiscall AString::operator=(class AString const &)
UNDEF:0000A7C4                 extrn ??4AString@@QAEAAV0@ABV0@@Z:near
UNDEF:0000A7C4                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+739p
UNDEF:0000A7C4                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+7B1p
UNDEF:0000A7C8 ; struct AString __stdcall __high UnicodeStringToMultiByte(const struct UString *, unsigned int)
UNDEF:0000A7C8                 extrn ?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z:near
UNDEF:0000A7C8                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+711p
UNDEF:0000A7C8                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+789p
UNDEF:0000A7CC ; public: __thiscall UString::UString(wchar_t const *)
UNDEF:0000A7CC                 extrn ??0UString@@QAE@PB_W@Z:near
UNDEF:0000A7CC                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+6F8p
UNDEF:0000A7CC                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+770p
UNDEF:0000A7D0                 extrn _IID_ICryptoGetTextPassword:near
UNDEF:0000A7D0                                         ; DATA XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+5C8o
UNDEF:0000A7D4                 extrn _IID_ICryptoSetPassword:near
UNDEF:0000A7D4                                         ; DATA XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+533o
UNDEF:0000A7D4                                         ; NCrypto::NWzAes::CBaseCoder::QueryInterface(_GUID const &,void * *):loc_6F49o ...
UNDEF:0000A7D8 ; struct ISequentialInStream *__thiscall NArchive::NZip::CInArchive::CreateLimitedStream(NArchive::NZip::CInArchive *__hidden this, unsigned __int64, unsigned __int64)
UNDEF:0000A7D8                 extrn ?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z:near
UNDEF:0000A7D8                                         ; CODE XREF: NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+237p
UNDEF:0000A7D8                                         ; NArchive::NZip::CZipDecoder::Decode(NArchive::NZip::CInArchive &,NArchive::NZip::CItemEx const &,ISequentialOutStream *,IArchiveExtractCallback *,ICompressProgressInfo *,uint,int &)+16AFp
UNDEF:0000A7DC ; void __stdcall SysFreeString(BSTR bstrString)
UNDEF:0000A7DC                 extrn __imp__SysFreeString@4:near
UNDEF:0000A7DC                                         ; CODE XREF: CMyComBSTR::~CMyComBSTR(void)+17p
UNDEF:0000A7DC                                         ; DATA XREF: CMyComBSTR::~CMyComBSTR(void)+17r
UNDEF:0000A7E0 ; public: virtual long __stdcall NCompress::CCopyCoder::Code(struct ISequentialInStream *, struct ISequentialOutStream *, unsigned __int64 const *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:0000A7E0                 extrn ?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:near
UNDEF:0000A7E0                                         ; DATA XREF: .rdata:00006334o
UNDEF:0000A7E4 ; public: virtual long __stdcall NCompress::CCopyCoder::SetInStream(struct ISequentialInStream *)
UNDEF:0000A7E4                 extrn ?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z:near
UNDEF:0000A7E4                                         ; DATA XREF: .rdata:0000631Co
UNDEF:0000A7E8 ; public: virtual long __stdcall NCompress::CCopyCoder::ReleaseInStream(void)
UNDEF:0000A7E8                 extrn ?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ:near
UNDEF:0000A7E8                                         ; DATA XREF: .rdata:00006320o
UNDEF:0000A7EC ; public: virtual long __stdcall NCompress::CCopyCoder::Read(void *, unsigned int, unsigned int *)
UNDEF:0000A7EC                 extrn ?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z:near
UNDEF:0000A7EC                                         ; DATA XREF: .rdata:00006308o
UNDEF:0000A7F0 ; public: virtual long __stdcall NCompress::CCopyCoder::GetInStreamProcessedSize(unsigned __int64 *)
UNDEF:0000A7F0                 extrn ?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z:near
UNDEF:0000A7F0                                         ; DATA XREF: .rdata:000062F4o
UNDEF:0000A7F4                 extrn _IID_ICompressGetInStreamProcessedSize:near
UNDEF:0000A7F4                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_66D2o
UNDEF:0000A7F8                 extrn _IID_ISequentialInStream:near
UNDEF:0000A7F8                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_669Eo
UNDEF:0000A7FC                 extrn _IID_ICompressSetInStream:near
UNDEF:0000A7FC                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_666Ao
UNDEF:0000A800                 extrn _IID_ICompressCoder:near
UNDEF:0000A800                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_664Bo
UNDEF:0000A804 ; _DWORD __thiscall NCompress::CCopyCoder::~CCopyCoder(NCompress::CCopyCoder *__hidden this)
UNDEF:0000A804                 extrn ??1CCopyCoder@NCompress@@QAE@XZ:near
UNDEF:0000A804                                         ; CODE XREF: NCompress::CCopyCoder::`scalar deleting destructor'(uint)+11p
UNDEF:0000A808 ; public: virtual long __stdcall COutStreamWithCRC::Write(void const *, unsigned int, unsigned int *)
UNDEF:0000A808                 extrn ?Write@COutStreamWithCRC@@UAGJPBXIPAI@Z:near
UNDEF:0000A808                                         ; DATA XREF: .rdata:00006A18o
UNDEF:0000A80C ; public: virtual long __stdcall NCrypto::NWzAes::CBaseCoder::Init(void)
UNDEF:0000A80C                 extrn ?Init@CBaseCoder@NWzAes@NCrypto@@UAGJXZ:near
UNDEF:0000A80C                                         ; DATA XREF: .rdata:00006CF8o
UNDEF:0000A80C                                         ; .rdata:00007F38o
UNDEF:0000A810 ; public: virtual unsigned int __stdcall NCrypto::NWzAes::CDecoder::Filter(unsigned char *, unsigned int)
UNDEF:0000A810                 extrn ?Filter@CDecoder@NWzAes@NCrypto@@UAGIPAEI@Z:near
UNDEF:0000A810                                         ; DATA XREF: .rdata:00006CFCo
UNDEF:0000A814 ; public: virtual long __stdcall NCrypto::NWzAes::CBaseCoder::CryptoSetPassword(unsigned char const *, unsigned int)
UNDEF:0000A814                 extrn ?CryptoSetPassword@CBaseCoder@NWzAes@NCrypto@@UAGJPBEI@Z:near
UNDEF:0000A814                                         ; DATA XREF: .rdata:00006CE4o
UNDEF:0000A814                                         ; .rdata:00007F24o
UNDEF:0000A818 ; public: virtual long __stdcall NCrypto::NZipStrong::CBaseCoder::Init(void)
UNDEF:0000A818                 extrn ?Init@CBaseCoder@NZipStrong@NCrypto@@UAGJXZ:near
UNDEF:0000A818                                         ; DATA XREF: .rdata:0000717Co
UNDEF:0000A818                                         ; .rdata:00008088o
UNDEF:0000A81C ; public: virtual unsigned int __stdcall NCrypto::CAesCbcCoder::Filter(unsigned char *, unsigned int)
UNDEF:0000A81C                 extrn ?Filter@CAesCbcCoder@NCrypto@@UAGIPAEI@Z:near
UNDEF:0000A81C                                         ; DATA XREF: .rdata:00007180o
UNDEF:0000A81C                                         ; .rdata:0000808Co ...
UNDEF:0000A820 ; public: virtual long __stdcall NCrypto::CAesCbcCoder::SetKey(unsigned char const *, unsigned int)
UNDEF:0000A820                 extrn ?SetKey@CAesCbcCoder@NCrypto@@UAGJPBEI@Z:near
UNDEF:0000A820                                         ; DATA XREF: .rdata:00007164o
UNDEF:0000A820                                         ; .rdata:00008070o ...
UNDEF:0000A824 ; public: virtual long __stdcall NCrypto::CAesCbcCoder::SetInitVector(unsigned char const *, unsigned int)
UNDEF:0000A824                 extrn ?SetInitVector@CAesCbcCoder@NCrypto@@UAGJPBEI@Z:near
UNDEF:0000A824                                         ; DATA XREF: .rdata:00007168o
UNDEF:0000A824                                         ; .rdata:00008074o ...
UNDEF:0000A828 ; public: virtual long __stdcall NCrypto::CAesCbcCoder::SetCoderProperties(unsigned long const *, struct tagPROPVARIANT const *, unsigned int)
UNDEF:0000A828                 extrn ?SetCoderProperties@CAesCbcCoder@NCrypto@@UAGJPBKPBUtagPROPVARIANT@@I@Z:near
UNDEF:0000A828                                         ; DATA XREF: .rdata:00007150o
UNDEF:0000A828                                         ; .rdata:0000805Co ...
UNDEF:0000A82C ; public: virtual long __stdcall NCrypto::NZipStrong::CBaseCoder::CryptoSetPassword(unsigned char const *, unsigned int)
UNDEF:0000A82C                 extrn ?CryptoSetPassword@CBaseCoder@NZipStrong@NCrypto@@UAGJPBEI@Z:near
UNDEF:0000A82C                                         ; DATA XREF: .rdata:0000713Co
UNDEF:0000A82C                                         ; .rdata:00008048o
UNDEF:0000A830 ; public: virtual long __stdcall NCrypto::NZip::CCipher::Init(void)
UNDEF:0000A830                 extrn ?Init@CCipher@NZip@NCrypto@@UAGJXZ:near
UNDEF:0000A830                                         ; DATA XREF: .rdata:00007750o
UNDEF:0000A830                                         ; .rdata:00008390o
UNDEF:0000A834 ; public: virtual unsigned int __stdcall NCrypto::NZip::CDecoder::Filter(unsigned char *, unsigned int)
UNDEF:0000A834                 extrn ?Filter@CDecoder@NZip@NCrypto@@UAGIPAEI@Z:near
UNDEF:0000A834                                         ; DATA XREF: .rdata:00007754o
UNDEF:0000A838 ; public: virtual long __stdcall NCrypto::NZip::CCipher::CryptoSetPassword(unsigned char const *, unsigned int)
UNDEF:0000A838                 extrn ?CryptoSetPassword@CCipher@NZip@NCrypto@@UAGJPBEI@Z:near
UNDEF:0000A838                                         ; DATA XREF: .rdata:0000773Co
UNDEF:0000A838                                         ; .rdata:0000837Co
UNDEF:0000A83C ; public: virtual long __stdcall NCompress::NShrink::CDecoder::Code(struct ISequentialInStream *, struct ISequentialOutStream *, unsigned __int64 const *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:0000A83C                 extrn ?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:near
UNDEF:0000A83C                                         ; DATA XREF: .rdata:00007A34o
UNDEF:0000A840 ; _DWORD __thiscall NArchive::NXz::CXzUnpackerCPP::CXzUnpackerCPP(NArchive::NXz::CXzUnpackerCPP *__hidden this)
UNDEF:0000A840                 extrn ??0CXzUnpackerCPP@NXz@NArchive@@QAE@XZ:near
UNDEF:0000A840                                         ; CODE XREF: NArchive::NXz::CDecoder::CDecoder(void)+1Cp
UNDEF:0000A844 ; void __thiscall NArchive::NXz::CStatInfo::Clear(NArchive::NXz::CStatInfo *__hidden this)
UNDEF:0000A844                 extrn ?Clear@CStatInfo@NXz@NArchive@@QAEXXZ:near
UNDEF:0000A844                                         ; CODE XREF: NArchive::NXz::CStatInfo::CStatInfo(void)+11p
UNDEF:0000A848 ; _DWORD __thiscall NArchive::NXz::CXzUnpackerCPP::~CXzUnpackerCPP(NArchive::NXz::CXzUnpackerCPP *__hidden this)
UNDEF:0000A848                 extrn ??1CXzUnpackerCPP@NXz@NArchive@@QAE@XZ:near
UNDEF:0000A848                                         ; CODE XREF: NArchive::NXz::CDecoder::~CDecoder(void)+14p
UNDEF:0000A84C ; _DWORD __thiscall NCrypto::NWzAes::CAesCtr2::CAesCtr2(NCrypto::NWzAes::CAesCtr2 *__hidden this)
UNDEF:0000A84C                 extrn ??0CAesCtr2@NWzAes@NCrypto@@QAE@XZ:near
UNDEF:0000A84C                                         ; CODE XREF: NCrypto::NWzAes::CBaseCoder::CBaseCoder(void)+79p
UNDEF:0000A850                 extrn _IID_ICompressSetCoderProperties:near
UNDEF:0000A850                                         ; DATA XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *):loc_816Co
UNDEF:0000A854                 extrn _IID_ICryptoProperties:near
UNDEF:0000A854                                         ; DATA XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *):loc_8138o
UNDEF:0000A858 ; _DWORD __thiscall NCrypto::CAesCbcCoder::CAesCbcCoder(NCrypto::CAesCbcCoder *__hidden this, bool, unsigned int)
UNDEF:0000A858                 extrn ??0CAesCbcCoder@NCrypto@@QAE@_NI@Z:near
UNDEF:0000A858                                         ; CODE XREF: NCrypto::CAesCbcDecoder::CAesCbcDecoder(uint)+17p
UNDEF:0000A85C ; public: virtual long __stdcall NCrypto::CAesCbcCoder::Init(void)
UNDEF:0000A85C                 extrn ?Init@CAesCbcCoder@NCrypto@@UAGJXZ:near
UNDEF:0000A85C                                         ; DATA XREF: .rdata:000082D8o
UNDEF:0000A860 ; __int32 __thiscall NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem(NArchive::NZip::CInArchive *__hidden this, struct NArchive::NZip::CItemEx *)
UNDEF:0000A860                 extrn ?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z:near
UNDEF:0000A860                                         ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+67Fp
UNDEF:0000A864 ; __int32 __thiscall CLocalProgress::SetCur(CLocalProgress *__hidden this)
UNDEF:0000A864                 extrn ?SetCur@CLocalProgress@@QAEJXZ:near
UNDEF:0000A864                                         ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2EDp
UNDEF:0000A864                                         ; NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+C5Fp
UNDEF:0000A868 ; void __thiscall CLocalProgress::Init(CLocalProgress *__hidden this, struct IProgress *, bool)
UNDEF:0000A868                 extrn ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:near
UNDEF:0000A868                                         ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+254p
UNDEF:0000A86C ; public: __thiscall CLocalProgress::CLocalProgress(void)
UNDEF:0000A86C                 extrn ??0CLocalProgress@@QAE@XZ:near
UNDEF:0000A86C                                         ; CODE XREF: NArchive::NZip::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1F3p
UNDEF:0000A870 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:0000A870                 extrn _memcpy:near      ; CODE XREF: CBuffer<uchar>::CBuffer<uchar>(CBuffer<uchar> const &)+67p
UNDEF:0000A870                                         ; CRecordVector<void *>::ReserveOnePosition(void)+87p
UNDEF:0000A870
UNDEF:0000A870
UNDEF:0000A870                 end