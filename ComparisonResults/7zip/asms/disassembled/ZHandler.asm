.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : A32BEA3215D45835F4884275E3CF0D87
.rdata:00000000 ; Input CRC32 : AB69E6D4
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ZHandler.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 _kProps         db 8                    ; DATA XREF: NArchive::NZ::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+13r
.rdata:00000001                 align 4
.rdata:00000004 _k_Signature    db  1Fh                 ; DATA XREF: .rdata:00000024o
.rdata:00000005                 db  9Dh ; Â¥
.rdata:00000006                 db    0
.rdata:00000007                 db    0
.rdata:00000008 $SG69011        dd offset byte_5A       ; DATA XREF: .rdata:00000028o
.rdata:0000000C $SG69012        db 'z taz',0            ; DATA XREF: .rdata:0000002Co
.rdata:00000012                 align 4
.rdata:00000014 $SG69013        db '* .tar',0           ; DATA XREF: .rdata:00000030o
.rdata:0000001B                 align 4
.rdata:0000001C ; struct CArcInfo g_ArcInfo
.rdata:0000001C _g_ArcInfo      db    0                 ; DATA XREF: NArchive::NZ::CRegisterArc::CRegisterArc(void)+Eo
.rdata:0000001D                 db    0
.rdata:0000001E                 db    5
.rdata:0000001F                 db    2
.rdata:00000020                 db    0
.rdata:00000021                 db    0
.rdata:00000022                 db    0
.rdata:00000023                 db    0
.rdata:00000024                 dd offset _k_Signature
.rdata:00000028                 dd offset $SG69011
.rdata:0000002C                 dd offset $SG69012      ; "z taz"
.rdata:00000030                 dd offset $SG69013      ; "* .tar"
.rdata:00000034                 dd offset ?CreateArc@NZ@NArchive@@YGPAUIInArchive@@XZ ; NArchive::NZ::CreateArc(void)
.rdata:00000038                 db    0
.rdata:00000039                 db    0
.rdata:0000003A                 db    0
.rdata:0000003B                 db    0
.rdata:0000003C                 dd offset _IsArc_Z@8    ; IsArc_Z(x,x)
.rdata:0000003C _rdata          ends
.rdata:0000003C
.text:00000040 ; ===========================================================================
.text:00000040
.text:00000040 ; Segment type: Pure code
.text:00000040 ; Segment permissions: Read/Execute
.text:00000040 _text           segment para public 'CODE' use32
.text:00000040                 assume cs:_text
.text:00000040                 ;org 40h
.text:00000040                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000040
.text:00000040 ; =============== S U B R O U T I N E =======================================
.text:00000040
.text:00000040 ; Attributes: bp-based frame
.text:00000040
.text:00000040 ; __int32 __stdcall NArchive::NZ::CHandler::GetNumberOfProperties(NArchive::NZ::CHandler *this, unsigned int *)
.text:00000040                 public ?GetNumberOfProperties@CHandler@NZ@NArchive@@UAGJPAI@Z
.text:00000040 ?GetNumberOfProperties@CHandler@NZ@NArchive@@UAGJPAI@Z proc near
.text:00000040                                         ; DATA XREF: .xdata$x:__catchsym$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2o
.text:00000040                                         ; .xdata$x:__catchsym$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9o ...
.text:00000040
.text:00000040 this            = dword ptr  8
.text:00000040 arg_4           = dword ptr  0Ch
.text:00000040
.text:00000040                 push    ebp
.text:00000041                 mov     ebp, esp
.text:00000043                 mov     eax, [ebp+arg_4]
.text:00000046                 mov     dword ptr [eax], 1
.text:0000004C                 xor     eax, eax
.text:0000004E                 pop     ebp
.text:0000004F                 retn    8
.text:0000004F ?GetNumberOfProperties@CHandler@NZ@NArchive@@UAGJPAI@Z endp
.text:0000004F
.text:0000004F ; ---------------------------------------------------------------------------
.text:00000052                 db 8 dup(0CCh)
.text:0000005A byte_5A         db 6 dup(0CCh)          ; DATA XREF: .rdata:$SG69011o
.text:00000060
.text:00000060 ; =============== S U B R O U T I N E =======================================
.text:00000060
.text:00000060 ; Attributes: bp-based frame
.text:00000060
.text:00000060 ; __int32 __stdcall NArchive::NZ::CHandler::GetPropertyInfo(NArchive::NZ::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *, unsigned __int16 *)
.text:00000060                 public ?GetPropertyInfo@CHandler@NZ@NArchive@@UAGJIPAPA_WPAKPAG@Z
.text:00000060 ?GetPropertyInfo@CHandler@NZ@NArchive@@UAGJIPAPA_WPAKPAG@Z proc near
.text:00000060                                         ; DATA XREF: .rdata:00001518o
.text:00000060
.text:00000060 this            = dword ptr  8
.text:00000060 arg_4           = dword ptr  0Ch
.text:00000060 arg_8           = dword ptr  10h
.text:00000060 arg_C           = dword ptr  14h
.text:00000060 arg_10          = dword ptr  18h
.text:00000060
.text:00000060                 push    ebp
.text:00000061                 mov     ebp, esp
.text:00000063                 cmp     [ebp+arg_4], 1
.text:00000067                 jb      short loc_70
.text:00000069                 mov     eax, 80070057h
.text:0000006E                 jmp     short loc_9D
.text:00000070 ; ---------------------------------------------------------------------------
.text:00000070
.text:00000070 loc_70:                                 ; CODE XREF: NArchive::NZ::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+7j
.text:00000070                 mov     eax, [ebp+arg_4]
.text:00000073                 movzx   ecx, _kProps[eax]
.text:0000007A                 mov     edx, [ebp+arg_C]
.text:0000007D                 mov     [edx], ecx
.text:0000007F                 mov     eax, [ebp+arg_C]
.text:00000082                 mov     ecx, [eax]
.text:00000084                 movzx   dx, byte ptr ds:?k7z_PROPID_To_VARTYPE@@3QBEB[ecx] ; uchar const * const k7z_PROPID_To_VARTYPE
.text:0000008C                 mov     eax, [ebp+arg_10]
.text:0000008F                 mov     [eax], dx
.text:00000092                 mov     ecx, [ebp+arg_8]
.text:00000095                 mov     dword ptr [ecx], 0
.text:0000009B                 xor     eax, eax
.text:0000009D
.text:0000009D loc_9D:                                 ; CODE XREF: NArchive::NZ::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+Ej
.text:0000009D                 pop     ebp
.text:0000009E                 retn    14h
.text:0000009E ?GetPropertyInfo@CHandler@NZ@NArchive@@UAGJIPAPA_WPAKPAG@Z endp
.text:0000009E
.text:0000009E ; ---------------------------------------------------------------------------
.text:000000A1                 align 10h
.text:000000B0
.text:000000B0 ; =============== S U B R O U T I N E =======================================
.text:000000B0
.text:000000B0 ; Attributes: bp-based frame
.text:000000B0
.text:000000B0 ; __int32 __stdcall NArchive::NZ::CHandler::GetNumberOfArchiveProperties(NArchive::NZ::CHandler *this, unsigned int *)
.text:000000B0                 public ?GetNumberOfArchiveProperties@CHandler@NZ@NArchive@@UAGJPAI@Z
.text:000000B0 ?GetNumberOfArchiveProperties@CHandler@NZ@NArchive@@UAGJPAI@Z proc near
.text:000000B0                                         ; DATA XREF: .rdata:0000151Co
.text:000000B0
.text:000000B0 this            = dword ptr  8
.text:000000B0 arg_4           = dword ptr  0Ch
.text:000000B0
.text:000000B0                 push    ebp
.text:000000B1                 mov     ebp, esp
.text:000000B3                 mov     eax, [ebp+arg_4]
.text:000000B6                 mov     dword ptr [eax], 0
.text:000000BC                 xor     eax, eax
.text:000000BE                 pop     ebp
.text:000000BF                 retn    8
.text:000000BF ?GetNumberOfArchiveProperties@CHandler@NZ@NArchive@@UAGJPAI@Z endp
.text:000000BF
.text:000000BF ; ---------------------------------------------------------------------------
.text:000000C2                 align 10h
.text:000000D0
.text:000000D0 ; =============== S U B R O U T I N E =======================================
.text:000000D0
.text:000000D0 ; Attributes: bp-based frame
.text:000000D0
.text:000000D0 ; __int32 __stdcall NArchive::NZ::CHandler::GetArchivePropertyInfo(NArchive::NZ::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *, unsigned __int16 *)
.text:000000D0                 public ?GetArchivePropertyInfo@CHandler@NZ@NArchive@@UAGJIPAPA_WPAKPAG@Z
.text:000000D0 ?GetArchivePropertyInfo@CHandler@NZ@NArchive@@UAGJIPAPA_WPAKPAG@Z proc near
.text:000000D0                                         ; DATA XREF: .rdata:00001520o
.text:000000D0
.text:000000D0 this            = dword ptr  8
.text:000000D0
.text:000000D0                 push    ebp
.text:000000D1                 mov     ebp, esp
.text:000000D3                 mov     eax, 80004001h
.text:000000D8                 pop     ebp
.text:000000D9                 retn    14h
.text:000000D9 ?GetArchivePropertyInfo@CHandler@NZ@NArchive@@UAGJIPAPA_WPAKPAG@Z endp
.text:000000D9
.text:000000D9 ; ---------------------------------------------------------------------------
.text:000000DC                 align 10h
.text:000000E0
.text:000000E0 ; =============== S U B R O U T I N E =======================================
.text:000000E0
.text:000000E0 ; Attributes: bp-based frame
.text:000000E0
.text:000000E0 ; __int32 __stdcall NArchive::NZ::CHandler::GetNumberOfItems(NArchive::NZ::CHandler *this, unsigned int *)
.text:000000E0                 public ?GetNumberOfItems@CHandler@NZ@NArchive@@UAGJPAI@Z
.text:000000E0 ?GetNumberOfItems@CHandler@NZ@NArchive@@UAGJPAI@Z proc near
.text:000000E0                                         ; DATA XREF: .rdata:00001504o
.text:000000E0
.text:000000E0 this            = dword ptr  8
.text:000000E0 arg_4           = dword ptr  0Ch
.text:000000E0
.text:000000E0                 push    ebp
.text:000000E1                 mov     ebp, esp
.text:000000E3                 mov     eax, [ebp+arg_4]
.text:000000E6                 mov     dword ptr [eax], 1
.text:000000EC                 xor     eax, eax
.text:000000EE                 pop     ebp
.text:000000EF                 retn    8
.text:000000EF ?GetNumberOfItems@CHandler@NZ@NArchive@@UAGJPAI@Z endp
.text:000000EF
.text:000000EF ; ---------------------------------------------------------------------------
.text:000000F2                 align 10h
.text:00000100
.text:00000100 ; =============== S U B R O U T I N E =======================================
.text:00000100
.text:00000100 ; Attributes: bp-based frame
.text:00000100
.text:00000100 ; __int32 __stdcall NArchive::NZ::CHandler::GetArchiveProperty(NArchive::NZ::CHandler *this, unsigned __int32, struct tagPROPVARIANT *)
.text:00000100                 public ?GetArchiveProperty@CHandler@NZ@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:00000100 ?GetArchiveProperty@CHandler@NZ@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z proc near
.text:00000100                                         ; DATA XREF: .rdata:00001510o
.text:00000100
.text:00000100 var_20          = dword ptr -20h
.text:00000100 var_1C          = dword ptr -1Ch
.text:00000100 var_18          = dword ptr -18h
.text:00000100 var_14          = dword ptr -14h
.text:00000100 var_10          = dword ptr -10h
.text:00000100 var_C           = dword ptr -0Ch
.text:00000100 var_8           = dword ptr -8
.text:00000100 var_4           = dword ptr -4
.text:00000100 this            = dword ptr  8
.text:00000100 arg_4           = dword ptr  0Ch
.text:00000100 arg_8           = dword ptr  10h
.text:00000100
.text:00000100                 push    ebp
.text:00000101                 mov     ebp, esp
.text:00000103                 sub     esp, 20h
.text:00000106                 mov     eax, 0CCCCCCCCh
.text:0000010B                 mov     [ebp+var_20], eax
.text:0000010E                 mov     [ebp+var_1C], eax
.text:00000111                 mov     [ebp+var_18], eax
.text:00000114                 mov     [ebp+var_14], eax
.text:00000117                 mov     [ebp+var_10], eax
.text:0000011A                 mov     [ebp+var_C], eax
.text:0000011D                 mov     [ebp+var_8], eax
.text:00000120                 mov     [ebp+var_4], eax
.text:00000123                 lea     ecx, [ebp+var_14] ; this
.text:00000126                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:0000012B                 mov     eax, [ebp+arg_4]
.text:0000012E                 mov     [ebp+var_20], eax
.text:00000131                 cmp     [ebp+var_20], 55h ; 'U'
.text:00000135                 jz      short loc_139
.text:00000137                 jmp     short loc_143
.text:00000139 ; ---------------------------------------------------------------------------
.text:00000139
.text:00000139 loc_139:                                ; CODE XREF: NArchive::NZ::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+35j
.text:00000139                 push    1
.text:0000013B                 lea     ecx, [ebp+var_14]
.text:0000013E                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=(bool)
.text:00000143
.text:00000143 loc_143:                                ; CODE XREF: NArchive::NZ::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+37j
.text:00000143                 mov     ecx, [ebp+arg_8]
.text:00000146                 push    ecx             ; struct tagPROPVARIANT *
.text:00000147                 lea     ecx, [ebp+var_14] ; this
.text:0000014A                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:0000014F                 mov     [ebp+var_1C], 0
.text:00000156                 lea     ecx, [ebp+var_14] ; this
.text:00000159                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000015E                 mov     eax, [ebp+var_1C]
.text:00000161                 push    edx
.text:00000162                 mov     ecx, ebp
.text:00000164                 push    eax
.text:00000165                 lea     edx, $LN8
.text:0000016B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000170                 pop     eax
.text:00000171                 pop     edx
.text:00000172                 add     esp, 20h
.text:00000175                 cmp     ebp, esp
.text:00000177                 call    __RTC_CheckEsp
.text:0000017C                 mov     esp, ebp
.text:0000017E                 pop     ebp
.text:0000017F                 retn    0Ch
.text:0000017F ?GetArchiveProperty@CHandler@NZ@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z endp
.text:0000017F
.text:0000017F ; ---------------------------------------------------------------------------
.text:00000182                 align 4
.text:00000184 $LN8            dd 1                    ; DATA XREF: NArchive::NZ::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+65o
.text:00000188                 dd offset $LN7
.text:0000018C $LN7            dd 0FFFFFFECh, 10h      ; DATA XREF: .text:00000188o
.text:00000194                 dd offset $LN6          ; "prop"
.text:00000198 $LN6            db 'prop',0             ; DATA XREF: .text:00000194o
.text:0000019D                 align 10h
.text:000001A0
.text:000001A0 ; =============== S U B R O U T I N E =======================================
.text:000001A0
.text:000001A0 ; Attributes: bp-based frame
.text:000001A0
.text:000001A0 ; __int32 __stdcall NArchive::NZ::CHandler::GetProperty(NArchive::NZ::CHandler *this, unsigned int, unsigned __int32, struct tagPROPVARIANT *)
.text:000001A0                 public ?GetProperty@CHandler@NZ@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:000001A0 ?GetProperty@CHandler@NZ@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z proc near
.text:000001A0                                         ; DATA XREF: .rdata:00001508o
.text:000001A0
.text:000001A0 var_20          = dword ptr -20h
.text:000001A0 var_1C          = dword ptr -1Ch
.text:000001A0 var_18          = dword ptr -18h
.text:000001A0 var_14          = dword ptr -14h
.text:000001A0 var_10          = dword ptr -10h
.text:000001A0 var_C           = dword ptr -0Ch
.text:000001A0 var_8           = dword ptr -8
.text:000001A0 var_4           = dword ptr -4
.text:000001A0 this            = dword ptr  8
.text:000001A0 arg_8           = dword ptr  10h
.text:000001A0 arg_C           = dword ptr  14h
.text:000001A0
.text:000001A0                 push    ebp
.text:000001A1                 mov     ebp, esp
.text:000001A3                 sub     esp, 20h
.text:000001A6                 mov     eax, 0CCCCCCCCh
.text:000001AB                 mov     [ebp+var_20], eax
.text:000001AE                 mov     [ebp+var_1C], eax
.text:000001B1                 mov     [ebp+var_18], eax
.text:000001B4                 mov     [ebp+var_14], eax
.text:000001B7                 mov     [ebp+var_10], eax
.text:000001BA                 mov     [ebp+var_C], eax
.text:000001BD                 mov     [ebp+var_8], eax
.text:000001C0                 mov     [ebp+var_4], eax
.text:000001C3                 lea     ecx, [ebp+var_14] ; this
.text:000001C6                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:000001CB                 mov     eax, [ebp+arg_8]
.text:000001CE                 mov     [ebp+var_20], eax
.text:000001D1                 cmp     [ebp+var_20], 8
.text:000001D5                 jz      short loc_1D9
.text:000001D7                 jmp     short loc_1EC
.text:000001D9 ; ---------------------------------------------------------------------------
.text:000001D9
.text:000001D9 loc_1D9:                                ; CODE XREF: NArchive::NZ::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+35j
.text:000001D9                 mov     ecx, [ebp+this]
.text:000001DC                 mov     edx, [ecx+14h]
.text:000001DF                 push    edx
.text:000001E0                 mov     eax, [ecx+10h]
.text:000001E3                 push    eax
.text:000001E4                 lea     ecx, [ebp+var_14]
.text:000001E7                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000001EC
.text:000001EC loc_1EC:                                ; CODE XREF: NArchive::NZ::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+37j
.text:000001EC                 mov     ecx, [ebp+arg_C]
.text:000001EF                 push    ecx             ; struct tagPROPVARIANT *
.text:000001F0                 lea     ecx, [ebp+var_14] ; this
.text:000001F3                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:000001F8                 mov     [ebp+var_1C], 0
.text:000001FF                 lea     ecx, [ebp+var_14] ; this
.text:00000202                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000207                 mov     eax, [ebp+var_1C]
.text:0000020A                 push    edx
.text:0000020B                 mov     ecx, ebp
.text:0000020D                 push    eax
.text:0000020E                 lea     edx, $LN8_0
.text:00000214                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000219                 pop     eax
.text:0000021A                 pop     edx
.text:0000021B                 add     esp, 20h
.text:0000021E                 cmp     ebp, esp
.text:00000220                 call    __RTC_CheckEsp
.text:00000225                 mov     esp, ebp
.text:00000227                 pop     ebp
.text:00000228                 retn    10h
.text:00000228 ?GetProperty@CHandler@NZ@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z endp
.text:00000228
.text:00000228 ; ---------------------------------------------------------------------------
.text:0000022B                 align 4
.text:0000022C $LN8_0          dd 1                    ; DATA XREF: NArchive::NZ::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6Eo
.text:00000230                 dd offset $LN7_0
.text:00000234 $LN7_0          dd 0FFFFFFECh, 10h      ; DATA XREF: .text:00000230o
.text:0000023C                 dd offset $LN6_0        ; "prop"
.text:00000240 $LN6_0          db 'prop',0             ; DATA XREF: .text:0000023Co
.text:00000245                 align 10h
.text:00000250
.text:00000250 ; =============== S U B R O U T I N E =======================================
.text:00000250
.text:00000250 ; Attributes: bp-based frame
.text:00000250
.text:00000250 ; __stdcall IsArc_Z(x, x)
.text:00000250 _IsArc_Z@8      proc near               ; DATA XREF: .rdata:0000003Co
.text:00000250
.text:00000250 arg_0           = dword ptr  8
.text:00000250 arg_4           = dword ptr  0Ch
.text:00000250
.text:00000250                 push    ebp             ; unsigned int
.text:00000251                 mov     ebp, esp
.text:00000253                 cmp     [ebp+arg_4], 3
.text:00000257                 jnb     short loc_260
.text:00000259                 mov     eax, 2
.text:0000025E                 jmp     short loc_28A
.text:00000260 ; ---------------------------------------------------------------------------
.text:00000260
.text:00000260 loc_260:                                ; CODE XREF: IsArc_Z(x,x)+7j
.text:00000260                 cmp     [ebp+arg_4], 40h ; '@'
.text:00000264                 jbe     short loc_26D
.text:00000266                 mov     [ebp+arg_4], 40h ; '@'
.text:0000026D
.text:0000026D loc_26D:                                ; CODE XREF: IsArc_Z(x,x)+14j
.text:0000026D                 mov     eax, [ebp+arg_4]
.text:00000270                 push    eax             ; unsigned __int8 *
.text:00000271                 mov     ecx, [ebp+arg_0]
.text:00000274                 push    ecx             ; this
.text:00000275                 call    ?CheckStream@NZ@NCompress@@YG_NPBEI@Z ; NCompress::NZ::CheckStream(uchar const *,uint)
.text:0000027A                 movzx   edx, al
.text:0000027D                 test    edx, edx
.text:0000027F                 jnz     short loc_285
.text:00000281                 xor     eax, eax
.text:00000283                 jmp     short loc_28A
.text:00000285 ; ---------------------------------------------------------------------------
.text:00000285
.text:00000285 loc_285:                                ; CODE XREF: IsArc_Z(x,x)+2Fj
.text:00000285                 mov     eax, 1
.text:0000028A
.text:0000028A loc_28A:                                ; CODE XREF: IsArc_Z(x,x)+Ej
.text:0000028A                                         ; IsArc_Z(x,x)+33j
.text:0000028A                 cmp     ebp, esp
.text:0000028C                 call    __RTC_CheckEsp
.text:00000291                 pop     ebp
.text:00000292                 retn    8
.text:00000292 _IsArc_Z@8      endp ; sp-analysis failed
.text:00000292
.text:00000292 ; ---------------------------------------------------------------------------
.text:00000295                 align 10h
.text:000002A0
.text:000002A0 ; =============== S U B R O U T I N E =======================================
.text:000002A0
.text:000002A0 ; Attributes: bp-based frame
.text:000002A0
.text:000002A0 ; __int32 __cdecl NArchive::NZ::CHandler::Open(NArchive::NZ::CHandler *this, struct IInStream *, const unsigned __int64 *, struct IArchiveOpenCallback *)
.text:000002A0                 public ?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:000002A0 ?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z proc near
.text:000002A0                                         ; DATA XREF: .rdata:000014FCo
.text:000002A0
.text:000002A0 var_8C          = dword ptr -8Ch
.text:000002A0 var_85          = byte ptr -85h
.text:000002A0 var_80          = dword ptr -80h
.text:000002A0 var_78          = dword ptr -78h
.text:000002A0 var_74          = dword ptr -74h
.text:000002A0 var_6C          = dword ptr -6Ch
.text:000002A0 var_64          = dword ptr -64h
.text:000002A0 var_58          = byte ptr -58h
.text:000002A0 var_14          = dword ptr -14h
.text:000002A0 var_10          = dword ptr -10h
.text:000002A0 var_C           = dword ptr -0Ch
.text:000002A0 var_4           = dword ptr -4
.text:000002A0 this            = dword ptr  8
.text:000002A0 arg_4           = dword ptr  0Ch
.text:000002A0
.text:000002A0 ; FUNCTION CHUNK AT .text:000003C2 SIZE 0000003C BYTES
.text:000002A0
.text:000002A0                 push    ebp
.text:000002A1                 mov     ebp, esp
.text:000002A3                 push    0FFFFFFFFh
.text:000002A5                 push    offset __ehhandler$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:000002AA                 mov     eax, large fs:0
.text:000002B0                 push    eax
.text:000002B1                 push    ecx
.text:000002B2                 sub     esp, 7Ch
.text:000002B5                 push    ebx
.text:000002B6                 push    esi
.text:000002B7                 push    edi
.text:000002B8                 lea     edi, [ebp+var_8C]
.text:000002BE                 mov     ecx, 1Fh
.text:000002C3                 mov     eax, 0CCCCCCCCh
.text:000002C8                 rep stosd
.text:000002CA                 mov     eax, dword ptr ds:___security_cookie
.text:000002CF                 xor     eax, ebp
.text:000002D1                 mov     [ebp+var_14], eax
.text:000002D4                 push    eax             ; unsigned int
.text:000002D5                 lea     eax, [ebp+var_C]
.text:000002D8                 mov     large fs:0, eax
.text:000002DE                 mov     [ebp+var_10], esp
.text:000002E1                 mov     [ebp+var_4], 0
.text:000002E8                 mov     [ebp+var_64], 40h ; '@'
.text:000002EF                 lea     eax, [ebp+var_64]
.text:000002F2                 push    eax             ; unsigned int *
.text:000002F3                 lea     ecx, [ebp+var_58]
.text:000002F6                 push    ecx             ; void *
.text:000002F7                 mov     edx, [ebp+arg_4]
.text:000002FA                 push    edx             ; struct ISequentialInStream *
.text:000002FB                 call    ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream(ISequentialInStream *,void *,uint *)
.text:00000300                 mov     [ebp+var_6C], eax
.text:00000303                 cmp     [ebp+var_6C], 0
.text:00000307                 jz      short loc_311
.text:00000309                 mov     eax, [ebp+var_6C]
.text:0000030C                 jmp     loc_3C2
.text:00000311 ; ---------------------------------------------------------------------------
.text:00000311
.text:00000311 loc_311:                                ; CODE XREF: NArchive::NZ::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+67j
.text:00000311                 mov     eax, [ebp+var_64]
.text:00000314                 push    eax             ; unsigned __int8 *
.text:00000315                 lea     ecx, [ebp+var_58]
.text:00000318                 push    ecx             ; this
.text:00000319                 call    ?CheckStream@NZ@NCompress@@YG_NPBEI@Z ; NCompress::NZ::CheckStream(uchar const *,uint)
.text:0000031E                 mov     [ebp+var_85], al
.text:00000324                 movzx   edx, [ebp+var_85]
.text:0000032B                 test    edx, edx
.text:0000032D                 jnz     short loc_339
.text:0000032F                 mov     eax, 1
.text:00000334                 jmp     loc_3C2
.text:00000339 ; ---------------------------------------------------------------------------
.text:00000339
.text:00000339 loc_339:                                ; CODE XREF: NArchive::NZ::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+8Dj
.text:00000339                 mov     esi, esp
.text:0000033B                 lea     eax, [ebp+var_78]
.text:0000033E                 push    eax
.text:0000033F                 push    2
.text:00000341                 push    0
.text:00000343                 push    0
.text:00000345                 mov     ecx, [ebp+arg_4]
.text:00000348                 push    ecx
.text:00000349                 mov     edx, [ebp+arg_4]
.text:0000034C                 mov     eax, [edx]
.text:0000034E                 mov     ecx, [eax+10h]
.text:00000351                 call    ecx
.text:00000353                 cmp     esi, esp
.text:00000355                 call    __RTC_CheckEsp
.text:0000035A                 mov     [ebp+var_8C], eax
.text:00000360                 mov     edx, [ebp+var_8C]
.text:00000366                 mov     [ebp+var_80], edx
.text:00000369                 cmp     [ebp+var_80], 0
.text:0000036D                 jz      short loc_374
.text:0000036F                 mov     eax, [ebp+var_80]
.text:00000372                 jmp     short loc_3C2
.text:00000374 ; ---------------------------------------------------------------------------
.text:00000374
.text:00000374 loc_374:                                ; CODE XREF: NArchive::NZ::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+CDj
.text:00000374                 mov     eax, [ebp+this]
.text:00000377                 mov     ecx, [ebp+var_78]
.text:0000037A                 mov     [eax+10h], ecx
.text:0000037D                 mov     edx, [ebp+var_74]
.text:00000380                 mov     [eax+14h], edx
.text:00000383                 mov     eax, [ebp+arg_4]
.text:00000386                 push    eax
.text:00000387                 mov     ecx, [ebp+this]
.text:0000038A                 add     ecx, 8
.text:0000038D                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:00000392                 xor     eax, eax
.text:00000394                 jmp     short loc_3C2
.text:00000394 ?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z endp ; sp-analysis failed
.text:00000394
.text:00000396
.text:00000396 ; =============== S U B R O U T I N E =======================================
.text:00000396
.text:00000396
.text:00000396 __catch$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0 proc near
.text:00000396                                         ; DATA XREF: .xdata$x:00000C54o
.text:00000396                 mov     dword ptr [ebp-84h], 8007000Eh
.text:000003A0                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000003A7                 mov     eax, offset $LN10
.text:000003AC                 retn
.text:000003AC __catch$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0 endp
.text:000003AC
.text:000003AD ; ---------------------------------------------------------------------------
.text:000003AD                 mov     eax, offset __tryend$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1
.text:000003B2                 retn
.text:000003B3 ; ---------------------------------------------------------------------------
.text:000003B3
.text:000003B3 __tryend$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1:
.text:000003B3                                         ; DATA XREF: .text:000003ADo
.text:000003B3                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000003BA                 jmp     short loc_3C2
.text:000003BC ; ---------------------------------------------------------------------------
.text:000003BC
.text:000003BC $LN10:                                  ; DATA XREF: __catch$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0+11o
.text:000003BC                 mov     eax, [ebp-84h]
.text:000003C2 ; START OF FUNCTION CHUNK FOR ?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:000003C2
.text:000003C2 loc_3C2:                                ; CODE XREF: NArchive::NZ::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+6Cj
.text:000003C2                                         ; NArchive::NZ::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+94j ...
.text:000003C2                 push    edx
.text:000003C3                 mov     ecx, ebp
.text:000003C5                 push    eax
.text:000003C6                 lea     edx, $LN17
.text:000003CC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000003D1                 pop     eax
.text:000003D2                 pop     edx
.text:000003D3                 mov     ecx, [ebp+var_C]
.text:000003D6                 mov     large fs:0, ecx
.text:000003DD                 pop     ecx
.text:000003DE                 pop     edi
.text:000003DF                 pop     esi
.text:000003E0                 pop     ebx
.text:000003E1                 mov     ecx, [ebp+var_14]
.text:000003E4                 xor     ecx, ebp
.text:000003E6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000003EB                 add     esp, 8Ch
.text:000003F1                 cmp     ebp, esp
.text:000003F3                 call    __RTC_CheckEsp
.text:000003F8                 mov     esp, ebp
.text:000003FA                 pop     ebp
.text:000003FB                 retn    10h
.text:000003FB ; END OF FUNCTION CHUNK FOR ?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:000003FB ; ---------------------------------------------------------------------------
.text:000003FE                 align 10h
.text:00000400 $LN17           dd 3                    ; DATA XREF: NArchive::NZ::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+126o
.text:00000404                 dd offset $LN16
.text:00000408 $LN16           dd 0FFFFFFA8h, 40h      ; DATA XREF: .text:00000404o
.text:00000410                 dd offset $LN12         ; "buffer"
.text:00000414                 dd 0FFFFFF9Ch, 4
.text:0000041C                 dd offset $LN13         ; "size"
.text:00000420                 db 88h, 0FFh
.text:00000422                 dw 0FFFFh
.text:00000424                 dd 8
.text:00000428                 dd offset $LN14         ; "endPos"
.text:0000042C $LN14           db 'endPos',0           ; DATA XREF: .text:00000428o
.text:00000433 $LN13           db 'size',0             ; DATA XREF: .text:0000041Co
.text:00000438 $LN12           db 'buffer',0           ; DATA XREF: .text:00000410o
.text:0000043F                 align 10h
.text:00000440
.text:00000440 ; =============== S U B R O U T I N E =======================================
.text:00000440
.text:00000440 ; Attributes: bp-based frame
.text:00000440
.text:00000440 ; __int32 __stdcall NArchive::NZ::CHandler::Close(NArchive::NZ::CHandler *this)
.text:00000440                 public ?Close@CHandler@NZ@NArchive@@UAGJXZ
.text:00000440 ?Close@CHandler@NZ@NArchive@@UAGJXZ proc near ; DATA XREF: .rdata:00001500o
.text:00000440
.text:00000440 this            = dword ptr  8
.text:00000440
.text:00000440                 push    ebp
.text:00000441                 mov     ebp, esp
.text:00000443                 mov     eax, [ebp+this]
.text:00000446                 mov     dword ptr [eax+10h], 0
.text:0000044D                 mov     dword ptr [eax+14h], 0
.text:00000454                 mov     ecx, [ebp+this]
.text:00000457                 add     ecx, 8
.text:0000045A                 call    ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ; CMyComPtr<IInStream>::Release(void)
.text:0000045F                 xor     eax, eax
.text:00000461                 cmp     ebp, esp
.text:00000463                 call    __RTC_CheckEsp
.text:00000468                 pop     ebp
.text:00000469                 retn    4
.text:00000469 ?Close@CHandler@NZ@NArchive@@UAGJXZ endp
.text:00000469
.text:00000469 ; ---------------------------------------------------------------------------
.text:0000046C                 align 10h
.text:00000470
.text:00000470 ; =============== S U B R O U T I N E =======================================
.text:00000470
.text:00000470 ; Attributes: bp-based frame
.text:00000470
.text:00000470 ; __int32 __cdecl NArchive::NZ::CHandler::Extract(NArchive::NZ::CHandler *this, const unsigned int *, unsigned int, int, struct IArchiveExtractCallback *)
.text:00000470                 public ?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00000470 ?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z proc near
.text:00000470                                         ; DATA XREF: .rdata:0000150Co
.text:00000470
.text:00000470 var_10C         = dword ptr -10Ch
.text:00000470 var_108         = dword ptr -108h
.text:00000470 var_104         = dword ptr -104h
.text:00000470 var_100         = dword ptr -100h
.text:00000470 var_FC          = dword ptr -0FCh
.text:00000470 var_F8          = dword ptr -0F8h
.text:00000470 var_F4          = dword ptr -0F4h
.text:00000470 var_F0          = dword ptr -0F0h
.text:00000470 var_EC          = dword ptr -0ECh
.text:00000470 var_E8          = dword ptr -0E8h
.text:00000470 var_E4          = dword ptr -0E4h
.text:00000470 var_E0          = dword ptr -0E0h
.text:00000470 var_DC          = dword ptr -0DCh
.text:00000470 var_D8          = dword ptr -0D8h
.text:00000470 var_D4          = dword ptr -0D4h
.text:00000470 var_D0          = dword ptr -0D0h
.text:00000470 var_CC          = dword ptr -0CCh
.text:00000470 var_C8          = dword ptr -0C8h
.text:00000470 var_C4          = dword ptr -0C4h
.text:00000470 var_C0          = dword ptr -0C0h
.text:00000470 var_B9          = byte ptr -0B9h
.text:00000470 var_B8          = dword ptr -0B8h
.text:00000470 var_B4          = dword ptr -0B4h
.text:00000470 var_B0          = dword ptr -0B0h
.text:00000470 var_AC          = dword ptr -0ACh
.text:00000470 var_A4          = dword ptr -0A4h
.text:00000470 var_A0          = dword ptr -0A0h
.text:00000470 var_9C          = dword ptr -9Ch
.text:00000470 var_98          = dword ptr -98h
.text:00000470 var_94          = dword ptr -94h
.text:00000470 var_90          = dword ptr -90h
.text:00000470 var_8C          = dword ptr -8Ch
.text:00000470 var_88          = dword ptr -88h
.text:00000470 var_84          = dword ptr -84h
.text:00000470 var_80          = dword ptr -80h
.text:00000470 var_7C          = dword ptr -7Ch
.text:00000470 var_78          = dword ptr -78h
.text:00000470 var_74          = dword ptr -74h
.text:00000470 var_70          = dword ptr -70h
.text:00000470 var_68          = byte ptr -68h
.text:00000470 var_60          = dword ptr -60h
.text:00000470 var_5C          = dword ptr -5Ch
.text:00000470 var_54          = byte ptr -54h
.text:00000470 var_4C          = dword ptr -4Ch
.text:00000470 var_44          = byte ptr -44h
.text:00000470 var_3C          = dword ptr -3Ch
.text:00000470 var_38          = dword ptr -38h
.text:00000470 var_34          = dword ptr -34h
.text:00000470 var_2C          = byte ptr -2Ch
.text:00000470 var_24          = dword ptr -24h
.text:00000470 var_1C          = dword ptr -1Ch
.text:00000470 var_18          = dword ptr -18h
.text:00000470 var_10          = dword ptr -10h
.text:00000470 var_C           = dword ptr -0Ch
.text:00000470 var_4           = dword ptr -4
.text:00000470 this            = dword ptr  8
.text:00000470 arg_4           = dword ptr  0Ch
.text:00000470 arg_8           = dword ptr  10h
.text:00000470 arg_C           = dword ptr  14h
.text:00000470 arg_10          = dword ptr  18h
.text:00000470
.text:00000470 ; FUNCTION CHUNK AT .text:000009E5 SIZE 00000032 BYTES
.text:00000470
.text:00000470                 push    ebp
.text:00000471                 mov     ebp, esp
.text:00000473                 push    0FFFFFFFFh
.text:00000475                 push    offset __ehhandler$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:0000047A                 mov     eax, large fs:0
.text:00000480                 push    eax
.text:00000481                 push    ecx
.text:00000482                 sub     esp, 0FCh
.text:00000488                 push    ebx
.text:00000489                 push    esi
.text:0000048A                 push    edi
.text:0000048B                 lea     edi, [ebp+var_10C]
.text:00000491                 mov     ecx, 3Fh ; '?'
.text:00000496                 mov     eax, 0CCCCCCCCh
.text:0000049B                 rep stosd
.text:0000049D                 mov     eax, dword ptr ds:___security_cookie
.text:000004A2                 xor     eax, ebp
.text:000004A4                 push    eax
.text:000004A5                 lea     eax, [ebp+var_C]
.text:000004A8                 mov     large fs:0, eax
.text:000004AE                 mov     [ebp+var_10], esp
.text:000004B1                 mov     [ebp+var_4], 0
.text:000004B8                 cmp     [ebp+arg_8], 0
.text:000004BC                 jnz     short loc_4C5
.text:000004BE                 xor     eax, eax
.text:000004C0                 jmp     loc_9E5
.text:000004C5 ; ---------------------------------------------------------------------------
.text:000004C5
.text:000004C5 loc_4C5:                                ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4Cj
.text:000004C5                 cmp     [ebp+arg_8], 0FFFFFFFFh
.text:000004C9                 jz      short loc_4E3
.text:000004CB                 cmp     [ebp+arg_8], 1
.text:000004CF                 jnz     short loc_4D9
.text:000004D1                 mov     eax, [ebp+arg_4]
.text:000004D4                 cmp     dword ptr [eax], 0
.text:000004D7                 jz      short loc_4E3
.text:000004D9
.text:000004D9 loc_4D9:                                ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5Fj
.text:000004D9                 mov     eax, 80070057h
.text:000004DE                 jmp     loc_9E5
.text:000004E3 ; ---------------------------------------------------------------------------
.text:000004E3
.text:000004E3 loc_4E3:                                ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+59j
.text:000004E3                                         ; NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+67j
.text:000004E3                 mov     esi, esp
.text:000004E5                 mov     ecx, [ebp+this]
.text:000004E8                 mov     edx, [ecx+14h]
.text:000004EB                 push    edx
.text:000004EC                 mov     eax, [ecx+10h]
.text:000004EF                 push    eax
.text:000004F0                 mov     ecx, [ebp+arg_10]
.text:000004F3                 push    ecx
.text:000004F4                 mov     edx, [ebp+arg_10]
.text:000004F7                 mov     eax, [edx]
.text:000004F9                 mov     ecx, [eax+0Ch]
.text:000004FC                 call    ecx
.text:000004FE                 cmp     esi, esp
.text:00000500                 call    __RTC_CheckEsp
.text:00000505                 mov     [ebp+var_1C], 0
.text:0000050C                 mov     [ebp+var_18], 0
.text:00000513                 mov     esi, esp
.text:00000515                 lea     edx, [ebp+var_1C]
.text:00000518                 push    edx
.text:00000519                 mov     eax, [ebp+arg_10]
.text:0000051C                 push    eax
.text:0000051D                 mov     ecx, [ebp+arg_10]
.text:00000520                 mov     edx, [ecx]
.text:00000522                 mov     eax, [edx+10h]
.text:00000525                 call    eax
.text:00000527                 cmp     esi, esp
.text:00000529                 call    __RTC_CheckEsp
.text:0000052E                 mov     [ebp+var_AC], eax
.text:00000534                 mov     ecx, [ebp+var_AC]
.text:0000053A                 mov     [ebp+var_24], ecx
.text:0000053D                 cmp     [ebp+var_24], 0
.text:00000541                 jz      short loc_54B
.text:00000543                 mov     eax, [ebp+var_24]
.text:00000546                 jmp     loc_9E5
.text:0000054B ; ---------------------------------------------------------------------------
.text:0000054B
.text:0000054B loc_54B:                                ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+D1j
.text:0000054B                 lea     ecx, [ebp+var_2C]
.text:0000054E                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00000553                 mov     [ebp+var_B0], eax
.text:00000559                 mov     byte ptr [ebp+var_4], 1
.text:0000055D                 xor     edx, edx
.text:0000055F                 cmp     [ebp+arg_C], 0
.text:00000563                 setnz   dl
.text:00000566                 mov     [ebp+var_34], edx
.text:00000569                 lea     ecx, [ebp+var_2C]
.text:0000056C                 call    ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&(void)
.text:00000571                 mov     [ebp+var_B4], eax
.text:00000577                 mov     esi, esp
.text:00000579                 mov     eax, [ebp+var_34]
.text:0000057C                 push    eax
.text:0000057D                 mov     ecx, [ebp+var_B4]
.text:00000583                 push    ecx
.text:00000584                 push    0
.text:00000586                 mov     edx, [ebp+arg_10]
.text:00000589                 push    edx
.text:0000058A                 mov     eax, [ebp+arg_10]
.text:0000058D                 mov     ecx, [eax]
.text:0000058F                 mov     edx, [ecx+14h]
.text:00000592                 call    edx
.text:00000594                 cmp     esi, esp
.text:00000596                 call    __RTC_CheckEsp
.text:0000059B                 mov     [ebp+var_B8], eax
.text:000005A1                 mov     eax, [ebp+var_B8]
.text:000005A7                 mov     [ebp+var_38], eax
.text:000005AA                 cmp     [ebp+var_38], 0
.text:000005AE                 jz      short loc_5CA
.text:000005B0                 mov     ecx, [ebp+var_38]
.text:000005B3                 mov     [ebp+var_7C], ecx
.text:000005B6                 mov     byte ptr [ebp+var_4], 0
.text:000005BA                 lea     ecx, [ebp+var_2C]
.text:000005BD                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000005C2                 mov     eax, [ebp+var_7C]
.text:000005C5                 jmp     loc_9E5
.text:000005CA ; ---------------------------------------------------------------------------
.text:000005CA
.text:000005CA loc_5CA:                                ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+13Ej
.text:000005CA                 cmp     [ebp+arg_C], 0
.text:000005CE                 jnz     short loc_604
.text:000005D0                 lea     ecx, [ebp+var_2C]
.text:000005D3                 call    ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!(void)
.text:000005D8                 mov     [ebp+var_B9], al
.text:000005DE                 movzx   edx, [ebp+var_B9]
.text:000005E5                 test    edx, edx
.text:000005E7                 jz      short loc_604
.text:000005E9                 mov     [ebp+var_80], 0
.text:000005F0                 mov     byte ptr [ebp+var_4], 0
.text:000005F4                 lea     ecx, [ebp+var_2C]
.text:000005F7                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000005FC                 mov     eax, [ebp+var_80]
.text:000005FF                 jmp     loc_9E5
.text:00000604 ; ---------------------------------------------------------------------------
.text:00000604
.text:00000604 loc_604:                                ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+15Ej
.text:00000604                                         ; NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+177j
.text:00000604                 mov     esi, esp
.text:00000606                 mov     eax, [ebp+var_34]
.text:00000609                 push    eax
.text:0000060A                 mov     ecx, [ebp+arg_10]
.text:0000060D                 push    ecx
.text:0000060E                 mov     edx, [ebp+arg_10]
.text:00000611                 mov     eax, [edx]
.text:00000613                 mov     ecx, [eax+18h]
.text:00000616                 call    ecx
.text:00000618                 cmp     esi, esp
.text:0000061A                 call    __RTC_CheckEsp
.text:0000061F                 push    18h             ; unsigned int
.text:00000621                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000626                 add     esp, 4
.text:00000629                 mov     [ebp+var_C0], eax
.text:0000062F                 mov     edx, [ebp+var_C0]
.text:00000635                 mov     [ebp+var_88], edx
.text:0000063B                 mov     byte ptr [ebp+var_4], 2
.text:0000063F                 cmp     [ebp+var_88], 0
.text:00000646                 jz      short loc_667
.text:00000648                 mov     ecx, [ebp+var_88]
.text:0000064E                 call    ??0CDummyOutStream@@QAE@XZ ; CDummyOutStream::CDummyOutStream(void)
.text:00000653                 mov     [ebp+var_C4], eax
.text:00000659                 mov     eax, [ebp+var_C4]
.text:0000065F                 mov     [ebp+var_C8], eax
.text:00000665                 jmp     short loc_671
.text:00000667 ; ---------------------------------------------------------------------------
.text:00000667
.text:00000667 loc_667:                                ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1D6j
.text:00000667                 mov     [ebp+var_C8], 0
.text:00000671
.text:00000671 loc_671:                                ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1F5j
.text:00000671                 mov     ecx, [ebp+var_C8]
.text:00000677                 mov     [ebp+var_84], ecx
.text:0000067D                 mov     byte ptr [ebp+var_4], 1
.text:00000681                 mov     edx, [ebp+var_84]
.text:00000687                 mov     [ebp+var_3C], edx
.text:0000068A                 mov     eax, [ebp+var_3C]
.text:0000068D                 push    eax
.text:0000068E                 lea     ecx, [ebp+var_44]
.text:00000691                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)
.text:00000696                 mov     byte ptr [ebp+var_4], 3
.text:0000069A                 lea     ecx, [ebp+var_2C]
.text:0000069D                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:000006A2                 mov     [ebp+var_CC], eax
.text:000006A8                 mov     ecx, [ebp+var_CC]
.text:000006AE                 push    ecx             ; struct ISequentialOutStream *
.text:000006AF                 mov     ecx, [ebp+var_3C] ; this
.text:000006B2                 call    ?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z ; CDummyOutStream::SetStream(ISequentialOutStream *)
.text:000006B7                 mov     ecx, [ebp+var_3C] ; this
.text:000006BA                 call    ?Init@CDummyOutStream@@QAEXXZ ; CDummyOutStream::Init(void)
.text:000006BF                 lea     ecx, [ebp+var_2C]
.text:000006C2                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:000006C7                 push    38h ; '8'       ; unsigned int
.text:000006C9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000006CE                 add     esp, 4
.text:000006D1                 mov     [ebp+var_D0], eax
.text:000006D7                 mov     edx, [ebp+var_D0]
.text:000006DD                 mov     [ebp+var_90], edx
.text:000006E3                 mov     byte ptr [ebp+var_4], 4
.text:000006E7                 cmp     [ebp+var_90], 0
.text:000006EE                 jz      short loc_70F
.text:000006F0                 mov     ecx, [ebp+var_90]
.text:000006F6                 call    ??0CLocalProgress@@QAE@XZ ; CLocalProgress::CLocalProgress(void)
.text:000006FB                 mov     [ebp+var_D4], eax
.text:00000701                 mov     eax, [ebp+var_D4]
.text:00000707                 mov     [ebp+var_D8], eax
.text:0000070D                 jmp     short loc_719
.text:0000070F ; ---------------------------------------------------------------------------
.text:0000070F
.text:0000070F loc_70F:                                ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+27Ej
.text:0000070F                 mov     [ebp+var_D8], 0
.text:00000719
.text:00000719 loc_719:                                ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+29Dj
.text:00000719                 mov     ecx, [ebp+var_D8]
.text:0000071F                 mov     [ebp+var_8C], ecx
.text:00000725                 mov     byte ptr [ebp+var_4], 3
.text:00000729                 mov     edx, [ebp+var_8C]
.text:0000072F                 mov     [ebp+var_4C], edx
.text:00000732                 mov     eax, [ebp+var_4C]
.text:00000735                 push    eax
.text:00000736                 lea     ecx, [ebp+var_54]
.text:00000739                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)
.text:0000073E                 mov     byte ptr [ebp+var_4], 5
.text:00000742                 push    1               ; bool
.text:00000744                 mov     ecx, [ebp+arg_10]
.text:00000747                 push    ecx             ; struct IProgress *
.text:00000748                 mov     ecx, [ebp+var_4C] ; this
.text:0000074B                 call    ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init(IProgress *,bool)
.text:00000750                 mov     ecx, [ebp+this]
.text:00000753                 add     ecx, 8
.text:00000756                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:0000075B                 mov     [ebp+var_DC], eax
.text:00000761                 mov     edx, [ebp+var_DC]
.text:00000767                 mov     [ebp+var_E0], edx
.text:0000076D                 mov     esi, esp
.text:0000076F                 push    0
.text:00000771                 push    0
.text:00000773                 push    0
.text:00000775                 push    0
.text:00000777                 mov     eax, [ebp+var_E0]
.text:0000077D                 push    eax
.text:0000077E                 mov     ecx, [ebp+var_E0]
.text:00000784                 mov     edx, [ecx]
.text:00000786                 mov     eax, [edx+10h]
.text:00000789                 call    eax
.text:0000078B                 cmp     esi, esp
.text:0000078D                 call    __RTC_CheckEsp
.text:00000792                 mov     [ebp+var_E4], eax
.text:00000798                 mov     ecx, [ebp+var_E4]
.text:0000079E                 mov     [ebp+var_5C], ecx
.text:000007A1                 cmp     [ebp+var_5C], 0
.text:000007A5                 jz      short loc_7DF
.text:000007A7                 mov     edx, [ebp+var_5C]
.text:000007AA                 mov     [ebp+var_94], edx
.text:000007B0                 mov     byte ptr [ebp+var_4], 3
.text:000007B4                 lea     ecx, [ebp+var_54]
.text:000007B7                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000007BC                 mov     byte ptr [ebp+var_4], 1
.text:000007C0                 lea     ecx, [ebp+var_44]
.text:000007C3                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000007C8                 mov     byte ptr [ebp+var_4], 0
.text:000007CC                 lea     ecx, [ebp+var_2C]
.text:000007CF                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000007D4                 mov     eax, [ebp+var_94]
.text:000007DA                 jmp     loc_9E5
.text:000007DF ; ---------------------------------------------------------------------------
.text:000007DF
.text:000007DF loc_7DF:                                ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+335j
.text:000007DF                 push    20h ; ' '       ; unsigned int
.text:000007E1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000007E6                 add     esp, 4
.text:000007E9                 mov     [ebp+var_E8], eax
.text:000007EF                 mov     eax, [ebp+var_E8]
.text:000007F5                 mov     [ebp+var_9C], eax
.text:000007FB                 mov     byte ptr [ebp+var_4], 6
.text:000007FF                 cmp     [ebp+var_9C], 0
.text:00000806                 jz      short loc_827
.text:00000808                 mov     ecx, [ebp+var_9C] ; this
.text:0000080E                 call    ??0CDecoder@NZ@NCompress@@QAE@XZ ; NCompress::NZ::CDecoder::CDecoder(void)
.text:00000813                 mov     [ebp+var_EC], eax
.text:00000819                 mov     ecx, [ebp+var_EC]
.text:0000081F                 mov     [ebp+var_F0], ecx
.text:00000825                 jmp     short loc_831
.text:00000827 ; ---------------------------------------------------------------------------
.text:00000827
.text:00000827 loc_827:                                ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+396j
.text:00000827                 mov     [ebp+var_F0], 0
.text:00000831
.text:00000831 loc_831:                                ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3B5j
.text:00000831                 mov     edx, [ebp+var_F0]
.text:00000837                 mov     [ebp+var_98], edx
.text:0000083D                 mov     byte ptr [ebp+var_4], 5
.text:00000841                 mov     eax, [ebp+var_98]
.text:00000847                 mov     [ebp+var_60], eax
.text:0000084A                 mov     ecx, [ebp+var_60]
.text:0000084D                 push    ecx
.text:0000084E                 lea     ecx, [ebp+var_68]
.text:00000851                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(ICompressCoder *)
.text:00000856                 mov     byte ptr [ebp+var_4], 7
.text:0000085A                 lea     ecx, [ebp+var_68]
.text:0000085D                 call    ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->(void)
.text:00000862                 mov     [ebp+var_F4], eax
.text:00000868                 mov     edx, [ebp+var_F4]
.text:0000086E                 mov     [ebp+var_F8], edx
.text:00000874                 lea     ecx, [ebp+var_54]
.text:00000877                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:0000087C                 mov     [ebp+var_FC], eax
.text:00000882                 lea     ecx, [ebp+var_44]
.text:00000885                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:0000088A                 mov     [ebp+var_100], eax
.text:00000890                 mov     ecx, [ebp+this]
.text:00000893                 add     ecx, 8
.text:00000896                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:0000089B                 mov     [ebp+var_104], eax
.text:000008A1                 mov     esi, esp
.text:000008A3                 mov     eax, [ebp+var_FC]
.text:000008A9                 push    eax
.text:000008AA                 push    0
.text:000008AC                 push    0
.text:000008AE                 mov     ecx, [ebp+var_100]
.text:000008B4                 push    ecx
.text:000008B5                 mov     edx, [ebp+var_104]
.text:000008BB                 push    edx
.text:000008BC                 mov     eax, [ebp+var_F8]
.text:000008C2                 push    eax
.text:000008C3                 mov     ecx, [ebp+var_F8]
.text:000008C9                 mov     edx, [ecx]
.text:000008CB                 mov     eax, [edx+0Ch]
.text:000008CE                 call    eax
.text:000008D0                 cmp     esi, esp
.text:000008D2                 call    __RTC_CheckEsp
.text:000008D7                 mov     [ebp+var_108], eax
.text:000008DD                 mov     ecx, [ebp+var_108]
.text:000008E3                 mov     [ebp+var_74], ecx
.text:000008E6                 cmp     [ebp+var_74], 1
.text:000008EA                 jnz     short loc_8F5
.text:000008EC                 mov     [ebp+var_70], 2
.text:000008F3                 jmp     short loc_94C
.text:000008F5 ; ---------------------------------------------------------------------------
.text:000008F5
.text:000008F5 loc_8F5:                                ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+47Aj
.text:000008F5                 mov     edx, [ebp+var_74]
.text:000008F8                 mov     [ebp+var_78], edx
.text:000008FB                 cmp     [ebp+var_78], 0
.text:000008FF                 jz      short loc_945
.text:00000901                 mov     eax, [ebp+var_78]
.text:00000904                 mov     [ebp+var_A0], eax
.text:0000090A                 mov     byte ptr [ebp+var_4], 5
.text:0000090E                 lea     ecx, [ebp+var_68]
.text:00000911                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00000916                 mov     byte ptr [ebp+var_4], 3
.text:0000091A                 lea     ecx, [ebp+var_54]
.text:0000091D                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00000922                 mov     byte ptr [ebp+var_4], 1
.text:00000926                 lea     ecx, [ebp+var_44]
.text:00000929                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000092E                 mov     byte ptr [ebp+var_4], 0
.text:00000932                 lea     ecx, [ebp+var_2C]
.text:00000935                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000093A                 mov     eax, [ebp+var_A0]
.text:00000940                 jmp     loc_9E5
.text:00000945 ; ---------------------------------------------------------------------------
.text:00000945
.text:00000945 loc_945:                                ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+48Fj
.text:00000945                 mov     [ebp+var_70], 0
.text:0000094C
.text:0000094C loc_94C:                                ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+483j
.text:0000094C                 lea     ecx, [ebp+var_44]
.text:0000094F                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:00000954                 mov     esi, esp
.text:00000956                 mov     ecx, [ebp+var_70]
.text:00000959                 push    ecx
.text:0000095A                 mov     edx, [ebp+arg_10]
.text:0000095D                 push    edx
.text:0000095E                 mov     eax, [ebp+arg_10]
.text:00000961                 mov     ecx, [eax]
.text:00000963                 mov     edx, [ecx+1Ch]
.text:00000966                 call    edx
.text:00000968                 cmp     esi, esp
.text:0000096A                 call    __RTC_CheckEsp
.text:0000096F                 mov     [ebp+var_10C], eax
.text:00000975                 mov     eax, [ebp+var_10C]
.text:0000097B                 mov     [ebp+var_A4], eax
.text:00000981                 mov     byte ptr [ebp+var_4], 5
.text:00000985                 lea     ecx, [ebp+var_68]
.text:00000988                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:0000098D                 mov     byte ptr [ebp+var_4], 3
.text:00000991                 lea     ecx, [ebp+var_54]
.text:00000994                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00000999                 mov     byte ptr [ebp+var_4], 1
.text:0000099D                 lea     ecx, [ebp+var_44]
.text:000009A0                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000009A5                 mov     byte ptr [ebp+var_4], 0
.text:000009A9                 lea     ecx, [ebp+var_2C]
.text:000009AC                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000009B1                 mov     eax, [ebp+var_A4]
.text:000009B7                 jmp     short loc_9E5
.text:000009B7 ?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z endp
.text:000009B7
.text:000009B9
.text:000009B9 ; =============== S U B R O U T I N E =======================================
.text:000009B9
.text:000009B9
.text:000009B9 __catch$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0 proc near
.text:000009B9                                         ; DATA XREF: .xdata$x:00000CACo
.text:000009B9                 mov     dword ptr [ebp-0A8h], 8007000Eh
.text:000009C3                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000009CA                 mov     eax, offset $LN30
.text:000009CF                 retn
.text:000009CF __catch$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0 endp
.text:000009CF
.text:000009D0 ; ---------------------------------------------------------------------------
.text:000009D0                 mov     eax, offset __tryend$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1
.text:000009D5                 retn
.text:000009D6 ; ---------------------------------------------------------------------------
.text:000009D6
.text:000009D6 __tryend$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1:
.text:000009D6                                         ; DATA XREF: .text:000009D0o
.text:000009D6                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000009DD                 jmp     short loc_9E5
.text:000009DF ; ---------------------------------------------------------------------------
.text:000009DF
.text:000009DF $LN30:                                  ; DATA XREF: __catch$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0+11o
.text:000009DF                 mov     eax, [ebp-0A8h]
.text:000009E5 ; START OF FUNCTION CHUNK FOR ?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:000009E5
.text:000009E5 loc_9E5:                                ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+50j
.text:000009E5                                         ; NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6Ej ...
.text:000009E5                 push    edx
.text:000009E6                 mov     ecx, ebp
.text:000009E8                 push    eax
.text:000009E9                 lea     edx, $LN39
.text:000009EF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000009F4                 pop     eax
.text:000009F5                 pop     edx
.text:000009F6                 mov     ecx, [ebp+var_C]
.text:000009F9                 mov     large fs:0, ecx
.text:00000A00                 pop     ecx
.text:00000A01                 pop     edi
.text:00000A02                 pop     esi
.text:00000A03                 pop     ebx
.text:00000A04                 add     esp, 10Ch
.text:00000A0A                 cmp     ebp, esp
.text:00000A0C                 call    __RTC_CheckEsp
.text:00000A11                 mov     esp, ebp
.text:00000A13                 pop     ebp
.text:00000A14                 retn    14h
.text:00000A14 ; END OF FUNCTION CHUNK FOR ?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00000A14 ; ---------------------------------------------------------------------------
.text:00000A17                 align 4
.text:00000A18 $LN39           dd 5                    ; DATA XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+579o
.text:00000A1C                 dd offset $LN38
.text:00000A20 $LN38           dd 0FFFFFFE4h, 8        ; DATA XREF: .text:00000A1Co
.text:00000A28                 dd offset $LN32         ; "currentTotalPacked"
.text:00000A2C                 dd 0FFFFFFD4h, 4
.text:00000A34                 dd offset $LN33         ; "realOutStream"
.text:00000A38                 dd 0FFFFFFBCh, 4
.text:00000A40                 dd offset $LN34         ; "outStream"
.text:00000A44                 dd 0FFFFFFACh, 4
.text:00000A4C                 dd offset $LN35         ; "progress"
.text:00000A50                 dd 0FFFFFF98h, 4
.text:00000A58                 dd offset $LN36         ; "decoder"
.text:00000A5C $LN36           db 'decoder',0          ; DATA XREF: .text:00000A58o
.text:00000A64 $LN35           db 'progress',0         ; DATA XREF: .text:00000A4Co
.text:00000A6D $LN34           db 'outStream',0        ; DATA XREF: .text:00000A40o
.text:00000A77 $LN33           db 'realOutStream',0    ; DATA XREF: .text:00000A34o
.text:00000A85 $LN32           db 'currentTotalPacked',0 ; DATA XREF: .text:00000A28o
.text:00000A98                 align 10h
.text:00000AA0
.text:00000AA0 ; =============== S U B R O U T I N E =======================================
.text:00000AA0
.text:00000AA0 ; Attributes: bp-based frame
.text:00000AA0
.text:00000AA0 ; struct IInArchive * __stdcall NArchive::NZ::CreateArc(void)
.text:00000AA0 ?CreateArc@NZ@NArchive@@YGPAUIInArchive@@XZ proc near
.text:00000AA0                                         ; DATA XREF: .rdata:00000034o
.text:00000AA0
.text:00000AA0 var_18          = dword ptr -18h
.text:00000AA0 var_14          = dword ptr -14h
.text:00000AA0 var_10          = dword ptr -10h
.text:00000AA0 var_C           = dword ptr -0Ch
.text:00000AA0 var_4           = dword ptr -4
.text:00000AA0
.text:00000AA0                 push    ebp
.text:00000AA1                 mov     ebp, esp
.text:00000AA3                 push    0FFFFFFFFh
.text:00000AA5                 push    offset __ehhandler$?CreateArc@NZ@NArchive@@YGPAUIInArchive@@XZ
.text:00000AAA                 mov     eax, large fs:0
.text:00000AB0                 push    eax
.text:00000AB1                 sub     esp, 0Ch
.text:00000AB4                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00000ABB                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00000AC2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000AC9                 mov     eax, dword ptr ds:___security_cookie
.text:00000ACE                 xor     eax, ebp
.text:00000AD0                 push    eax
.text:00000AD1                 lea     eax, [ebp+var_C]
.text:00000AD4                 mov     large fs:0, eax
.text:00000ADA                 push    18h             ; unsigned int
.text:00000ADC                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000AE1                 add     esp, 4
.text:00000AE4                 mov     [ebp+var_14], eax
.text:00000AE7                 mov     [ebp+var_4], 0
.text:00000AEE                 cmp     [ebp+var_14], 0
.text:00000AF2                 jz      short loc_B01
.text:00000AF4                 mov     ecx, [ebp+var_14] ; this
.text:00000AF7                 call    ??0CHandler@NZ@NArchive@@QAE@XZ ; NArchive::NZ::CHandler::CHandler(void)
.text:00000AFC                 mov     [ebp+var_18], eax
.text:00000AFF                 jmp     short loc_B08
.text:00000B01 ; ---------------------------------------------------------------------------
.text:00000B01
.text:00000B01 loc_B01:                                ; CODE XREF: NArchive::NZ::CreateArc(void)+52j
.text:00000B01                 mov     [ebp+var_18], 0
.text:00000B08
.text:00000B08 loc_B08:                                ; CODE XREF: NArchive::NZ::CreateArc(void)+5Fj
.text:00000B08                 mov     eax, [ebp+var_18]
.text:00000B0B                 mov     [ebp+var_10], eax
.text:00000B0E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000B15                 mov     eax, [ebp+var_10]
.text:00000B18                 mov     ecx, [ebp+var_C]
.text:00000B1B                 mov     large fs:0, ecx
.text:00000B22                 pop     ecx
.text:00000B23                 add     esp, 18h
.text:00000B26                 cmp     ebp, esp
.text:00000B28                 call    __RTC_CheckEsp
.text:00000B2D                 mov     esp, ebp
.text:00000B2F                 pop     ebp
.text:00000B30                 retn
.text:00000B30 ?CreateArc@NZ@NArchive@@YGPAUIInArchive@@XZ endp
.text:00000B30
.text:00000B30 ; ---------------------------------------------------------------------------
.text:00000B31                 align 4
.text:00000B31 _text           ends
.text:00000B31
.rtc$TMZ:00000B34 ; ===========================================================================
.rtc$TMZ:00000B34
.rtc$TMZ:00000B34 ; Segment type: Pure data
.rtc$TMZ:00000B34 ; Segment permissions: Read
.rtc$TMZ:00000B34 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000B34                 assume cs:_rtc$TMZ
.rtc$TMZ:00000B34                 ;org 0B34h
.rtc$TMZ:00000B34 ; COMDAT (pick any)
.rtc$TMZ:00000B34 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000B34 _rtc$TMZ        ends
.rtc$TMZ:00000B34
.rtc$IMZ:00000B38 ; ===========================================================================
.rtc$IMZ:00000B38
.rtc$IMZ:00000B38 ; Segment type: Pure data
.rtc$IMZ:00000B38 ; Segment permissions: Read
.rtc$IMZ:00000B38 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000B38                 assume cs:_rtc$IMZ
.rtc$IMZ:00000B38                 ;org 0B38h
.rtc$IMZ:00000B38 ; COMDAT (pick any)
.rtc$IMZ:00000B38 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000B38 _rtc$IMZ        ends
.rtc$IMZ:00000B38
.text:00000B3C ; ===========================================================================
.text:00000B3C
.text:00000B3C ; Segment type: Pure code
.text:00000B3C ; Segment permissions: Read/Execute
.text:00000B3C _text           segment para public 'CODE' use32
.text:00000B3C                 assume cs:_text
.text:00000B3C                 ;org 0B3Ch
.text:00000B3C ; COMDAT (pick any)
.text:00000B3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000B3C
.text:00000B3C ; =============== S U B R O U T I N E =======================================
.text:00000B3C
.text:00000B3C ; Attributes: bp-based frame
.text:00000B3C
.text:00000B3C ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00000B3C                 public ??0CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00000B3C ??0CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00000B3C                                         ; CODE XREF: NArchive::NZ::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+26p
.text:00000B3C                                         ; NArchive::NZ::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+26p
.text:00000B3C
.text:00000B3C var_4           = dword ptr -4
.text:00000B3C
.text:00000B3C                 push    ebp
.text:00000B3D                 mov     ebp, esp
.text:00000B3F                 push    ecx
.text:00000B40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B47                 mov     [ebp+var_4], ecx
.text:00000B4A                 xor     eax, eax
.text:00000B4C                 mov     ecx, [ebp+var_4]
.text:00000B4F                 mov     [ecx], ax
.text:00000B52                 xor     edx, edx
.text:00000B54                 mov     eax, [ebp+var_4]
.text:00000B57                 mov     [eax+2], dx
.text:00000B5B                 mov     ecx, [ebp+var_4]
.text:00000B5E                 mov     dword ptr [ecx+8], 0
.text:00000B65                 mov     eax, [ebp+var_4]
.text:00000B68                 mov     esp, ebp
.text:00000B6A                 pop     ebp
.text:00000B6B                 retn
.text:00000B6B ??0CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00000B6B
.text:00000B6B _text           ends
.text:00000B6B
.text:00000B6C ; ===========================================================================
.text:00000B6C
.text:00000B6C ; Segment type: Pure code
.text:00000B6C ; Segment permissions: Read/Execute
.text:00000B6C _text           segment para public 'CODE' use32
.text:00000B6C                 assume cs:_text
.text:00000B6C                 ;org 0B6Ch
.text:00000B6C ; COMDAT (pick any)
.text:00000B6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000B6C
.text:00000B6C ; =============== S U B R O U T I N E =======================================
.text:00000B6C
.text:00000B6C ; Attributes: bp-based frame
.text:00000B6C
.text:00000B6C ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00000B6C                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00000B6C ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00000B6C                                         ; CODE XREF: NArchive::NZ::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+59p
.text:00000B6C                                         ; NArchive::NZ::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+62p
.text:00000B6C
.text:00000B6C var_4           = dword ptr -4
.text:00000B6C
.text:00000B6C                 push    ebp
.text:00000B6D                 mov     ebp, esp
.text:00000B6F                 push    ecx
.text:00000B70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B77                 mov     [ebp+var_4], ecx
.text:00000B7A                 mov     ecx, [ebp+var_4] ; this
.text:00000B7D                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:00000B82                 add     esp, 4
.text:00000B85                 cmp     ebp, esp
.text:00000B87                 call    __RTC_CheckEsp
.text:00000B8C                 mov     esp, ebp
.text:00000B8E                 pop     ebp
.text:00000B8F                 retn
.text:00000B8F ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00000B8F
.text:00000B8F _text           ends
.text:00000B8F
.text$x:00000B90 ; ===========================================================================
.text$x:00000B90
.text$x:00000B90 ; Segment type: Pure code
.text$x:00000B90 ; Segment permissions: Read/Execute
.text$x:00000B90 _text$x         segment para public 'CODE' use32
.text$x:00000B90                 assume cs:_text$x
.text$x:00000B90                 ;org 0B90h
.text$x:00000B90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000B90
.text$x:00000B90 ; =============== S U B R O U T I N E =======================================
.text$x:00000B90
.text$x:00000B90
.text$x:00000B90 __ehhandler$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z proc near
.text$x:00000B90                                         ; DATA XREF: NArchive::NZ::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+5o
.text$x:00000B90
.text$x:00000B90 arg_4           = dword ptr  8
.text$x:00000B90
.text$x:00000B90                 mov     edx, [esp+arg_4]
.text$x:00000B94                 lea     eax, [edx+0Ch]
.text$x:00000B97                 mov     ecx, [edx-90h]
.text$x:00000B9D                 xor     ecx, eax
.text$x:00000B9F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000BA4                 mov     ecx, [edx-8]
.text$x:00000BA7                 xor     ecx, eax
.text$x:00000BA9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000BAE                 mov     eax, offset __ehfuncinfo$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text$x:00000BB3                 jmp     ___CxxFrameHandler3
.text$x:00000BB3 __ehhandler$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z endp
.text$x:00000BB3
.text$x:00000BB8
.text$x:00000BB8 ; =============== S U B R O U T I N E =======================================
.text$x:00000BB8
.text$x:00000BB8
.text$x:00000BB8 __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2 proc near
.text$x:00000BB8                                         ; DATA XREF: .xdata$x:00000CF4o
.text$x:00000BB8                 lea     ecx, [ebp-2Ch]
.text$x:00000BBB                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00000BBB __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2 endp
.text$x:00000BBB
.text$x:00000BC0
.text$x:00000BC0 ; =============== S U B R O U T I N E =======================================
.text$x:00000BC0
.text$x:00000BC0
.text$x:00000BC0 __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3 proc near
.text$x:00000BC0                                         ; DATA XREF: .xdata$x:00000CFCo
.text$x:00000BC0                 mov     eax, [ebp-88h]
.text$x:00000BC6                 push    eax             ; void *
.text$x:00000BC7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000BCC                 pop     ecx
.text$x:00000BCD                 retn
.text$x:00000BCD __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3 endp
.text$x:00000BCD
.text$x:00000BCE
.text$x:00000BCE ; =============== S U B R O U T I N E =======================================
.text$x:00000BCE
.text$x:00000BCE
.text$x:00000BCE __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4 proc near
.text$x:00000BCE                                         ; DATA XREF: .xdata$x:00000D04o
.text$x:00000BCE                 lea     ecx, [ebp-44h]
.text$x:00000BD1                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00000BD1 __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4 endp
.text$x:00000BD1
.text$x:00000BD6
.text$x:00000BD6 ; =============== S U B R O U T I N E =======================================
.text$x:00000BD6
.text$x:00000BD6
.text$x:00000BD6 __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5 proc near
.text$x:00000BD6                                         ; DATA XREF: .xdata$x:00000D0Co
.text$x:00000BD6                 mov     eax, [ebp-90h]
.text$x:00000BDC                 push    eax             ; void *
.text$x:00000BDD                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000BE2                 pop     ecx
.text$x:00000BE3                 retn
.text$x:00000BE3 __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5 endp
.text$x:00000BE3
.text$x:00000BE4
.text$x:00000BE4 ; =============== S U B R O U T I N E =======================================
.text$x:00000BE4
.text$x:00000BE4
.text$x:00000BE4 __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6 proc near
.text$x:00000BE4                                         ; DATA XREF: .xdata$x:00000D14o
.text$x:00000BE4                 lea     ecx, [ebp-54h]
.text$x:00000BE7                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:00000BE7 __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6 endp
.text$x:00000BE7
.text$x:00000BEC
.text$x:00000BEC ; =============== S U B R O U T I N E =======================================
.text$x:00000BEC
.text$x:00000BEC
.text$x:00000BEC __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7 proc near
.text$x:00000BEC                                         ; DATA XREF: .xdata$x:00000D1Co
.text$x:00000BEC                 mov     eax, [ebp-9Ch]
.text$x:00000BF2                 push    eax             ; void *
.text$x:00000BF3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000BF8                 pop     ecx
.text$x:00000BF9                 retn
.text$x:00000BF9 __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7 endp
.text$x:00000BF9
.text$x:00000BFA
.text$x:00000BFA ; =============== S U B R O U T I N E =======================================
.text$x:00000BFA
.text$x:00000BFA
.text$x:00000BFA __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8 proc near
.text$x:00000BFA                                         ; DATA XREF: .xdata$x:00000D24o
.text$x:00000BFA                 lea     ecx, [ebp-68h]
.text$x:00000BFD                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00000BFD __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8 endp
.text$x:00000BFD
.text$x:00000C02
.text$x:00000C02 ; =============== S U B R O U T I N E =======================================
.text$x:00000C02
.text$x:00000C02
.text$x:00000C02 __ehhandler$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z proc near
.text$x:00000C02                                         ; DATA XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5o
.text$x:00000C02
.text$x:00000C02 arg_4           = dword ptr  8
.text$x:00000C02
.text$x:00000C02                 mov     edx, [esp+arg_4]
.text$x:00000C06                 lea     eax, [edx+0Ch]
.text$x:00000C09                 mov     ecx, [edx-110h]
.text$x:00000C0F                 xor     ecx, eax
.text$x:00000C11                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000C16                 mov     eax, offset __ehfuncinfo$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text$x:00000C1B                 jmp     ___CxxFrameHandler3
.text$x:00000C1B __ehhandler$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z endp
.text$x:00000C1B
.text$x:00000C20
.text$x:00000C20 ; =============== S U B R O U T I N E =======================================
.text$x:00000C20
.text$x:00000C20
.text$x:00000C20 __unwindfunclet$?CreateArc@NZ@NArchive@@YGPAUIInArchive@@XZ$0 proc near
.text$x:00000C20                                         ; DATA XREF: .xdata$x:00000D34o
.text$x:00000C20                 mov     eax, [ebp-14h]
.text$x:00000C23                 push    eax             ; void *
.text$x:00000C24                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000C29                 pop     ecx
.text$x:00000C2A                 retn
.text$x:00000C2A __unwindfunclet$?CreateArc@NZ@NArchive@@YGPAUIInArchive@@XZ$0 endp
.text$x:00000C2A
.text$x:00000C2B
.text$x:00000C2B ; =============== S U B R O U T I N E =======================================
.text$x:00000C2B
.text$x:00000C2B
.text$x:00000C2B __ehhandler$?CreateArc@NZ@NArchive@@YGPAUIInArchive@@XZ proc near
.text$x:00000C2B                                         ; DATA XREF: NArchive::NZ::CreateArc(void)+5o
.text$x:00000C2B
.text$x:00000C2B arg_4           = dword ptr  8
.text$x:00000C2B
.text$x:00000C2B                 mov     edx, [esp+arg_4]
.text$x:00000C2F                 lea     eax, [edx+0Ch]
.text$x:00000C32                 mov     ecx, [edx-10h]
.text$x:00000C35                 xor     ecx, eax
.text$x:00000C37                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000C3C                 mov     eax, offset __ehfuncinfo$?CreateArc@NZ@NArchive@@YGPAUIInArchive@@XZ
.text$x:00000C41                 jmp     ___CxxFrameHandler3
.text$x:00000C41 __ehhandler$?CreateArc@NZ@NArchive@@YGPAUIInArchive@@XZ endp
.text$x:00000C41
.text$x:00000C41 ; ---------------------------------------------------------------------------
.text$x:00000C46                 align 4
.text$x:00000C46 _text$x         ends
.text$x:00000C46
.xdata$x:00000C48 ; ===========================================================================
.xdata$x:00000C48
.xdata$x:00000C48 ; Segment type: Pure data
.xdata$x:00000C48 ; Segment permissions: Read
.xdata$x:00000C48 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000C48                 assume cs:_xdata$x
.xdata$x:00000C48                 ;org 0C48h
.xdata$x:00000C48 __catchsym$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2 dd offset ?GetNumberOfProperties@CHandler@NZ@NArchive@@UAGJPAI@Z
.xdata$x:00000C48                                         ; DATA XREF: .xdata$x:00000C78o
.xdata$x:00000C48                                         ; NArchive::NZ::CHandler::GetNumberOfProperties(uint *)
.xdata$x:00000C4C                 db    0
.xdata$x:00000C4D                 db    0
.xdata$x:00000C4E                 db    0
.xdata$x:00000C4F                 db    0
.xdata$x:00000C50                 db    0
.xdata$x:00000C51                 db    0
.xdata$x:00000C52                 db    0
.xdata$x:00000C53                 db    0
.xdata$x:00000C54                 dd offset __catch$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0
.xdata$x:00000C58 __unwindtable$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db 0FFh
.xdata$x:00000C58                                         ; DATA XREF: .xdata$x:00000C84o
.xdata$x:00000C59                 db 0FFh
.xdata$x:00000C5A                 db 0FFh
.xdata$x:00000C5B                 db 0FFh
.xdata$x:00000C5C                 db    0
.xdata$x:00000C5D                 db    0
.xdata$x:00000C5E                 db    0
.xdata$x:00000C5F                 db    0
.xdata$x:00000C60                 db 0FFh
.xdata$x:00000C61                 db 0FFh
.xdata$x:00000C62                 db 0FFh
.xdata$x:00000C63                 db 0FFh
.xdata$x:00000C64                 db    0
.xdata$x:00000C65                 db    0
.xdata$x:00000C66                 db    0
.xdata$x:00000C67                 db    0
.xdata$x:00000C68 __tryblocktable$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db    0
.xdata$x:00000C68                                         ; DATA XREF: .xdata$x:00000C8Co
.xdata$x:00000C69                 db    0
.xdata$x:00000C6A                 db    0
.xdata$x:00000C6B                 db    0
.xdata$x:00000C6C                 db    0
.xdata$x:00000C6D                 db    0
.xdata$x:00000C6E                 db    0
.xdata$x:00000C6F                 db    0
.xdata$x:00000C70                 db    1
.xdata$x:00000C71                 db    0
.xdata$x:00000C72                 db    0
.xdata$x:00000C73                 db    0
.xdata$x:00000C74                 db    1
.xdata$x:00000C75                 db    0
.xdata$x:00000C76                 db    0
.xdata$x:00000C77                 db    0
.xdata$x:00000C78                 dd offset __catchsym$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2
.xdata$x:00000C7C __ehfuncinfo$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db  22h ; "
.xdata$x:00000C7C                                         ; DATA XREF: __ehhandler$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z+1Eo
.xdata$x:00000C7D                 db    5
.xdata$x:00000C7E                 db  93h ; Ã´
.xdata$x:00000C7F                 db  19h
.xdata$x:00000C80                 db    2
.xdata$x:00000C81                 db    0
.xdata$x:00000C82                 db    0
.xdata$x:00000C83                 db    0
.xdata$x:00000C84                 dd offset __unwindtable$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.xdata$x:00000C88                 db    1
.xdata$x:00000C89                 db    0
.xdata$x:00000C8A                 db    0
.xdata$x:00000C8B                 db    0
.xdata$x:00000C8C                 dd offset __tryblocktable$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.xdata$x:00000C90                 db    0
.xdata$x:00000C91                 db    0
.xdata$x:00000C92                 db    0
.xdata$x:00000C93                 db    0
.xdata$x:00000C94                 db    0
.xdata$x:00000C95                 db    0
.xdata$x:00000C96                 db    0
.xdata$x:00000C97                 db    0
.xdata$x:00000C98                 db    0
.xdata$x:00000C99                 db    0
.xdata$x:00000C9A                 db    0
.xdata$x:00000C9B                 db    0
.xdata$x:00000C9C                 db    1
.xdata$x:00000C9D                 db    0
.xdata$x:00000C9E                 db    0
.xdata$x:00000C9F                 db    0
.xdata$x:00000CA0 __catchsym$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9 dd offset ?GetNumberOfProperties@CHandler@NZ@NArchive@@UAGJPAI@Z
.xdata$x:00000CA0                                         ; DATA XREF: .xdata$x:00000CC0o
.xdata$x:00000CA0                                         ; NArchive::NZ::CHandler::GetNumberOfProperties(uint *)
.xdata$x:00000CA4                 db    0
.xdata$x:00000CA5                 db    0
.xdata$x:00000CA6                 db    0
.xdata$x:00000CA7                 db    0
.xdata$x:00000CA8                 db    0
.xdata$x:00000CA9                 db    0
.xdata$x:00000CAA                 db    0
.xdata$x:00000CAB                 db    0
.xdata$x:00000CAC                 dd offset __catch$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0
.xdata$x:00000CB0 __tryblocktable$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db    0
.xdata$x:00000CB0                                         ; DATA XREF: .xdata$x:00000CD4o
.xdata$x:00000CB1                 db    0
.xdata$x:00000CB2                 db    0
.xdata$x:00000CB3                 db    0
.xdata$x:00000CB4                 db    7
.xdata$x:00000CB5                 db    0
.xdata$x:00000CB6                 db    0
.xdata$x:00000CB7                 db    0
.xdata$x:00000CB8                 db    8
.xdata$x:00000CB9                 db    0
.xdata$x:00000CBA                 db    0
.xdata$x:00000CBB                 db    0
.xdata$x:00000CBC                 db    1
.xdata$x:00000CBD                 db    0
.xdata$x:00000CBE                 db    0
.xdata$x:00000CBF                 db    0
.xdata$x:00000CC0                 dd offset __catchsym$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9
.xdata$x:00000CC4 __ehfuncinfo$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db  22h ; "
.xdata$x:00000CC4                                         ; DATA XREF: __ehhandler$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z+14o
.xdata$x:00000CC5                 db    5
.xdata$x:00000CC6                 db  93h ; Ã´
.xdata$x:00000CC7                 db  19h
.xdata$x:00000CC8                 db    9
.xdata$x:00000CC9                 db    0
.xdata$x:00000CCA                 db    0
.xdata$x:00000CCB                 db    0
.xdata$x:00000CCC                 dd offset __unwindtable$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.xdata$x:00000CD0                 db    1
.xdata$x:00000CD1                 db    0
.xdata$x:00000CD2                 db    0
.xdata$x:00000CD3                 db    0
.xdata$x:00000CD4                 dd offset __tryblocktable$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.xdata$x:00000CD8                 db    0
.xdata$x:00000CD9                 db    0
.xdata$x:00000CDA                 db    0
.xdata$x:00000CDB                 db    0
.xdata$x:00000CDC                 db    0
.xdata$x:00000CDD                 db    0
.xdata$x:00000CDE                 db    0
.xdata$x:00000CDF                 db    0
.xdata$x:00000CE0                 db    0
.xdata$x:00000CE1                 db    0
.xdata$x:00000CE2                 db    0
.xdata$x:00000CE3                 db    0
.xdata$x:00000CE4                 db    1
.xdata$x:00000CE5                 db    0
.xdata$x:00000CE6                 db    0
.xdata$x:00000CE7                 db    0
.xdata$x:00000CE8 __unwindtable$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db 0FFh
.xdata$x:00000CE8                                         ; DATA XREF: .xdata$x:00000CCCo
.xdata$x:00000CE9                 db 0FFh
.xdata$x:00000CEA                 db 0FFh
.xdata$x:00000CEB                 db 0FFh
.xdata$x:00000CEC                 db    0
.xdata$x:00000CED                 db    0
.xdata$x:00000CEE                 db    0
.xdata$x:00000CEF                 db    0
.xdata$x:00000CF0                 db    0
.xdata$x:00000CF1                 db    0
.xdata$x:00000CF2                 db    0
.xdata$x:00000CF3                 db    0
.xdata$x:00000CF4                 dd offset __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2
.xdata$x:00000CF8                 db    1
.xdata$x:00000CF9                 db    0
.xdata$x:00000CFA                 db    0
.xdata$x:00000CFB                 db    0
.xdata$x:00000CFC                 dd offset __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3
.xdata$x:00000D00                 db    1
.xdata$x:00000D01                 db    0
.xdata$x:00000D02                 db    0
.xdata$x:00000D03                 db    0
.xdata$x:00000D04                 dd offset __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4
.xdata$x:00000D08                 db    3
.xdata$x:00000D09                 db    0
.xdata$x:00000D0A                 db    0
.xdata$x:00000D0B                 db    0
.xdata$x:00000D0C                 dd offset __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5
.xdata$x:00000D10                 db    3
.xdata$x:00000D11                 db    0
.xdata$x:00000D12                 db    0
.xdata$x:00000D13                 db    0
.xdata$x:00000D14                 dd offset __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6
.xdata$x:00000D18                 db    5
.xdata$x:00000D19                 db    0
.xdata$x:00000D1A                 db    0
.xdata$x:00000D1B                 db    0
.xdata$x:00000D1C                 dd offset __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7
.xdata$x:00000D20                 db    5
.xdata$x:00000D21                 db    0
.xdata$x:00000D22                 db    0
.xdata$x:00000D23                 db    0
.xdata$x:00000D24                 dd offset __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8
.xdata$x:00000D28                 db 0FFh
.xdata$x:00000D29                 db 0FFh
.xdata$x:00000D2A                 db 0FFh
.xdata$x:00000D2B                 db 0FFh
.xdata$x:00000D2C                 db    0
.xdata$x:00000D2D                 db    0
.xdata$x:00000D2E                 db    0
.xdata$x:00000D2F                 db    0
.xdata$x:00000D30 __unwindtable$?CreateArc@NZ@NArchive@@YGPAUIInArchive@@XZ db 0FFh
.xdata$x:00000D30                                         ; DATA XREF: .xdata$x:00000D40o
.xdata$x:00000D31                 db 0FFh
.xdata$x:00000D32                 db 0FFh
.xdata$x:00000D33                 db 0FFh
.xdata$x:00000D34                 dd offset __unwindfunclet$?CreateArc@NZ@NArchive@@YGPAUIInArchive@@XZ$0
.xdata$x:00000D38 __ehfuncinfo$?CreateArc@NZ@NArchive@@YGPAUIInArchive@@XZ db  22h ; "
.xdata$x:00000D38                                         ; DATA XREF: __ehhandler$?CreateArc@NZ@NArchive@@YGPAUIInArchive@@XZ+11o
.xdata$x:00000D39                 db    5
.xdata$x:00000D3A                 db  93h ; Ã´
.xdata$x:00000D3B                 db  19h
.xdata$x:00000D3C                 db    1
.xdata$x:00000D3D                 db    0
.xdata$x:00000D3E                 db    0
.xdata$x:00000D3F                 db    0
.xdata$x:00000D40                 dd offset __unwindtable$?CreateArc@NZ@NArchive@@YGPAUIInArchive@@XZ
.xdata$x:00000D44                 db    0
.xdata$x:00000D45                 db    0
.xdata$x:00000D46                 db    0
.xdata$x:00000D47                 db    0
.xdata$x:00000D48                 db    0
.xdata$x:00000D49                 db    0
.xdata$x:00000D4A                 db    0
.xdata$x:00000D4B                 db    0
.xdata$x:00000D4C                 db    0
.xdata$x:00000D4D                 db    0
.xdata$x:00000D4E                 db    0
.xdata$x:00000D4F                 db    0
.xdata$x:00000D50                 db    0
.xdata$x:00000D51                 db    0
.xdata$x:00000D52                 db    0
.xdata$x:00000D53                 db    0
.xdata$x:00000D54                 db    0
.xdata$x:00000D55                 db    0
.xdata$x:00000D56                 db    0
.xdata$x:00000D57                 db    0
.xdata$x:00000D58                 db    1
.xdata$x:00000D59                 db    0
.xdata$x:00000D5A                 db    0
.xdata$x:00000D5B                 db    0
.xdata$x:00000D5B _xdata$x        ends
.xdata$x:00000D5B
.text:00000D5C ; ===========================================================================
.text:00000D5C
.text:00000D5C ; Segment type: Pure code
.text:00000D5C ; Segment permissions: Read/Execute
.text:00000D5C _text           segment para public 'CODE' use32
.text:00000D5C                 assume cs:_text
.text:00000D5C                 ;org 0D5Ch
.text:00000D5C ; COMDAT (pick any)
.text:00000D5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D5C
.text:00000D5C ; =============== S U B R O U T I N E =======================================
.text:00000D5C
.text:00000D5C ; Attributes: bp-based frame
.text:00000D5C
.text:00000D5C ; _DWORD __thiscall NCompress::NZ::CDecoder::CDecoder(NCompress::NZ::CDecoder *__hidden this)
.text:00000D5C                 public ??0CDecoder@NZ@NCompress@@QAE@XZ
.text:00000D5C ??0CDecoder@NZ@NCompress@@QAE@XZ proc near
.text:00000D5C                                         ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+39Ep
.text:00000D5C
.text:00000D5C var_4           = dword ptr -4
.text:00000D5C
.text:00000D5C                 push    ebp
.text:00000D5D                 mov     ebp, esp
.text:00000D5F                 push    ecx
.text:00000D60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D67                 mov     [ebp+var_4], ecx
.text:00000D6A                 mov     ecx, [ebp+var_4] ; this
.text:00000D6D                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:00000D72                 mov     ecx, [ebp+var_4]
.text:00000D75                 add     ecx, 4          ; this
.text:00000D78                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000D7D                 mov     eax, [ebp+var_4]
.text:00000D80                 mov     dword ptr [eax], offset ??_7CDecoder@NZ@NCompress@@6B@ ; const NCompress::NZ::CDecoder::`vftable'
.text:00000D86                 mov     ecx, [ebp+var_4]
.text:00000D89                 mov     dword ptr [ecx+8], 0
.text:00000D90                 mov     edx, [ebp+var_4]
.text:00000D93                 mov     dword ptr [edx+0Ch], 0
.text:00000D9A                 mov     eax, [ebp+var_4]
.text:00000D9D                 mov     dword ptr [eax+10h], 0
.text:00000DA4                 mov     ecx, [ebp+var_4]
.text:00000DA7                 mov     dword ptr [ecx+14h], 0
.text:00000DAE                 mov     eax, [ebp+var_4]
.text:00000DB1                 add     esp, 4
.text:00000DB4                 cmp     ebp, esp
.text:00000DB6                 call    __RTC_CheckEsp
.text:00000DBB                 mov     esp, ebp
.text:00000DBD                 pop     ebp
.text:00000DBE                 retn
.text:00000DBE ??0CDecoder@NZ@NCompress@@QAE@XZ endp
.text:00000DBE
.text:00000DBE ; ---------------------------------------------------------------------------
.text:00000DBF                 align 10h
.text:00000DBF _text           ends
.text:00000DBF
.rdata:00000DC0 ; ===========================================================================
.rdata:00000DC0
.rdata:00000DC0 ; Segment type: Pure data
.rdata:00000DC0 ; Segment permissions: Read
.rdata:00000DC0 _rdata          segment dword public 'DATA' use32
.rdata:00000DC0                 assume cs:_rdata
.rdata:00000DC0                 ;org 0DC0h
.rdata:00000DC0 ; COMDAT (pick largest)
.rdata:00000DC0                 dd offset ??_R4CDecoder@NZ@NCompress@@6B@ ; const NCompress::NZ::CDecoder::`RTTI Complete Object Locator'
.rdata:00000DC4                 public ??_7CDecoder@NZ@NCompress@@6B@
.rdata:00000DC4 ; const NCompress::NZ::CDecoder::`vftable'
.rdata:00000DC4 ??_7CDecoder@NZ@NCompress@@6B@ dd offset ?QueryInterface@CDecoder@NZ@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000DC4                                         ; DATA XREF: NCompress::NZ::CDecoder::CDecoder(void)+24o
.rdata:00000DC4                                         ; NCompress::NZ::CDecoder::QueryInterface(_GUID const &,void * *)
.rdata:00000DC8                 dd offset ?AddRef@CDecoder@NZ@NCompress@@UAGKXZ ; NCompress::NZ::CDecoder::AddRef(void)
.rdata:00000DCC                 dd offset ?Release@CDecoder@NZ@NCompress@@UAGKXZ ; NCompress::NZ::CDecoder::Release(void)
.rdata:00000DD0                 dd offset ?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NZ::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00000DD0 _rdata          ends
.rdata:00000DD0
.rdata$r:00000DD4 ; ===========================================================================
.rdata$r:00000DD4
.rdata$r:00000DD4 ; Segment type: Pure data
.rdata$r:00000DD4 ; Segment permissions: Read
.rdata$r:00000DD4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000DD4                 assume cs:_rdata$r
.rdata$r:00000DD4                 ;org 0DD4h
.rdata$r:00000DD4 ; COMDAT (pick any)
.rdata$r:00000DD4                 public ??_R4CDecoder@NZ@NCompress@@6B@
.rdata$r:00000DD4 ; const NCompress::NZ::CDecoder::`RTTI Complete Object Locator'
.rdata$r:00000DD4 ??_R4CDecoder@NZ@NCompress@@6B@ db    0 ; DATA XREF: .rdata:00000DC0o
.rdata$r:00000DD5                 db    0
.rdata$r:00000DD6                 db    0
.rdata$r:00000DD7                 db    0
.rdata$r:00000DD8                 db    0
.rdata$r:00000DD9                 db    0
.rdata$r:00000DDA                 db    0
.rdata$r:00000DDB                 db    0
.rdata$r:00000DDC                 db    0
.rdata$r:00000DDD                 db    0
.rdata$r:00000DDE                 db    0
.rdata$r:00000DDF                 db    0
.rdata$r:00000DE0                 dd offset ??_R0?AVCDecoder@NZ@NCompress@@@8 ; NCompress::NZ::CDecoder `RTTI Type Descriptor'
.rdata$r:00000DE4                 dd offset ??_R3CDecoder@NZ@NCompress@@8 ; NCompress::NZ::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000DE4 _rdata$r        ends
.rdata$r:00000DE4
.data:00000DE8 ; ===========================================================================
.data:00000DE8
.data:00000DE8 ; Segment type: Pure data
.data:00000DE8 ; Segment permissions: Read/Write
.data:00000DE8 _data           segment dword public 'DATA' use32
.data:00000DE8                 assume cs:_data
.data:00000DE8                 ;org 0DE8h
.data:00000DE8 ; COMDAT (pick any)
.data:00000DE8                 public ??_R0?AVCDecoder@NZ@NCompress@@@8
.data:00000DE8 ; class NCompress::NZ::CDecoder `RTTI Type Descriptor'
.data:00000DE8 ??_R0?AVCDecoder@NZ@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00000DE8                                         ; DATA XREF: .rdata$r:00000DE0o
.data:00000DE8                                         ; .rdata$r:NCompress::NZ::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000DE8                                         ; const type_info::`vftable'
.data:00000DEC                 align 10h
.data:00000DF0 a_?avcdecoder@n db '.?AVCDecoder@NZ@NCompress@@',0
.data:00000DF0 _data           ends
.data:00000DF0
.rdata$r:00000E0C ; ===========================================================================
.rdata$r:00000E0C
.rdata$r:00000E0C ; Segment type: Pure data
.rdata$r:00000E0C ; Segment permissions: Read
.rdata$r:00000E0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E0C                 assume cs:_rdata$r
.rdata$r:00000E0C                 ;org 0E0Ch
.rdata$r:00000E0C ; COMDAT (pick any)
.rdata$r:00000E0C                 public ??_R3CDecoder@NZ@NCompress@@8
.rdata$r:00000E0C ; NCompress::NZ::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E0C ??_R3CDecoder@NZ@NCompress@@8 db    0   ; DATA XREF: .rdata$r:00000DE4o
.rdata$r:00000E0C                                         ; .rdata$r:00000E48o
.rdata$r:00000E0D                 db    0
.rdata$r:00000E0E                 db    0
.rdata$r:00000E0F                 db    0
.rdata$r:00000E10                 db    1
.rdata$r:00000E11                 db    0
.rdata$r:00000E12                 db    0
.rdata$r:00000E13                 db    0
.rdata$r:00000E14                 db    4
.rdata$r:00000E15                 db    0
.rdata$r:00000E16                 db    0
.rdata$r:00000E17                 db    0
.rdata$r:00000E18                 dd offset ??_R2CDecoder@NZ@NCompress@@8 ; NCompress::NZ::CDecoder::`RTTI Base Class Array'
.rdata$r:00000E18 _rdata$r        ends
.rdata$r:00000E18
.rdata$r:00000E1C ; ===========================================================================
.rdata$r:00000E1C
.rdata$r:00000E1C ; Segment type: Pure data
.rdata$r:00000E1C ; Segment permissions: Read
.rdata$r:00000E1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E1C                 assume cs:_rdata$r
.rdata$r:00000E1C                 ;org 0E1Ch
.rdata$r:00000E1C ; COMDAT (pick any)
.rdata$r:00000E1C                 public ??_R2CDecoder@NZ@NCompress@@8
.rdata$r:00000E1C ; NCompress::NZ::CDecoder::`RTTI Base Class Array'
.rdata$r:00000E1C ??_R2CDecoder@NZ@NCompress@@8 dd offset ??_R1A@?0A@EA@CDecoder@NZ@NCompress@@8
.rdata$r:00000E1C                                         ; DATA XREF: .rdata$r:00000E18o
.rdata$r:00000E1C                                         ; NCompress::NZ::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000E20                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000E24                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000E28                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000E2C                 db    0
.rdata$r:00000E2D                 align 10h
.rdata$r:00000E2D _rdata$r        ends
.rdata$r:00000E2D
.rdata$r:00000E30 ; ===========================================================================
.rdata$r:00000E30
.rdata$r:00000E30 ; Segment type: Pure data
.rdata$r:00000E30 ; Segment permissions: Read
.rdata$r:00000E30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E30                 assume cs:_rdata$r
.rdata$r:00000E30                 ;org 0E30h
.rdata$r:00000E30 ; COMDAT (pick any)
.rdata$r:00000E30                 public ??_R1A@?0A@EA@CDecoder@NZ@NCompress@@8
.rdata$r:00000E30 ; NCompress::NZ::CDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000E30 ??_R1A@?0A@EA@CDecoder@NZ@NCompress@@8 dd offset ??_R0?AVCDecoder@NZ@NCompress@@@8
.rdata$r:00000E30                                         ; DATA XREF: .rdata$r:NCompress::NZ::CDecoder::`RTTI Base Class Array'o
.rdata$r:00000E30                                         ; NCompress::NZ::CDecoder `RTTI Type Descriptor'
.rdata$r:00000E34                 db    3
.rdata$r:00000E35                 db    0
.rdata$r:00000E36                 db    0
.rdata$r:00000E37                 db    0
.rdata$r:00000E38                 db    0
.rdata$r:00000E39                 db    0
.rdata$r:00000E3A                 db    0
.rdata$r:00000E3B                 db    0
.rdata$r:00000E3C                 db 0FFh
.rdata$r:00000E3D                 db 0FFh
.rdata$r:00000E3E                 db 0FFh
.rdata$r:00000E3F                 db 0FFh
.rdata$r:00000E40                 db    0
.rdata$r:00000E41                 db    0
.rdata$r:00000E42                 db    0
.rdata$r:00000E43                 db    0
.rdata$r:00000E44                 db  40h ; @
.rdata$r:00000E45                 db    0
.rdata$r:00000E46                 db    0
.rdata$r:00000E47                 db    0
.rdata$r:00000E48                 dd offset ??_R3CDecoder@NZ@NCompress@@8 ; NCompress::NZ::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E48 _rdata$r        ends
.rdata$r:00000E48
.rdata$r:00000E4C ; ===========================================================================
.rdata$r:00000E4C
.rdata$r:00000E4C ; Segment type: Pure data
.rdata$r:00000E4C ; Segment permissions: Read
.rdata$r:00000E4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E4C                 assume cs:_rdata$r
.rdata$r:00000E4C                 ;org 0E4Ch
.rdata$r:00000E4C ; COMDAT (pick any)
.rdata$r:00000E4C                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000E4C ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000E4C ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:00000E4C                                         ; DATA XREF: .rdata$r:00000E20o
.rdata$r:00000E4C                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o
.rdata$r:00000E4C                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00000E50                 db    1
.rdata$r:00000E51                 db    0
.rdata$r:00000E52                 db    0
.rdata$r:00000E53                 db    0
.rdata$r:00000E54                 db    0
.rdata$r:00000E55                 db    0
.rdata$r:00000E56                 db    0
.rdata$r:00000E57                 db    0
.rdata$r:00000E58                 db 0FFh
.rdata$r:00000E59                 db 0FFh
.rdata$r:00000E5A                 db 0FFh
.rdata$r:00000E5B                 db 0FFh
.rdata$r:00000E5C                 db    0
.rdata$r:00000E5D                 db    0
.rdata$r:00000E5E                 db    0
.rdata$r:00000E5F                 db    0
.rdata$r:00000E60                 db  40h ; @
.rdata$r:00000E61                 db    0
.rdata$r:00000E62                 db    0
.rdata$r:00000E63                 db    0
.rdata$r:00000E64                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E64 _rdata$r        ends
.rdata$r:00000E64
.data:00000E68 ; ===========================================================================
.data:00000E68
.data:00000E68 ; Segment type: Pure data
.data:00000E68 ; Segment permissions: Read/Write
.data:00000E68 _data           segment dword public 'DATA' use32
.data:00000E68                 assume cs:_data
.data:00000E68                 ;org 0E68h
.data:00000E68 ; COMDAT (pick any)
.data:00000E68                 public ??_R0?AUICompressCoder@@@8
.data:00000E68 ; struct ICompressCoder `RTTI Type Descriptor'
.data:00000E68 ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:00000E68                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000E68                                         ; .rdata$r:00001118o
.data:00000E68                                         ; const type_info::`vftable'
.data:00000E6C                 align 10h
.data:00000E70 a_?auicompressc db '.?AUICompressCoder@@',0
.data:00000E85                 align 4
.data:00000E85 _data           ends
.data:00000E85
.rdata$r:00000E88 ; ===========================================================================
.rdata$r:00000E88
.rdata$r:00000E88 ; Segment type: Pure data
.rdata$r:00000E88 ; Segment permissions: Read
.rdata$r:00000E88 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E88                 assume cs:_rdata$r
.rdata$r:00000E88                 ;org 0E88h
.rdata$r:00000E88 ; COMDAT (pick any)
.rdata$r:00000E88                 public ??_R3ICompressCoder@@8
.rdata$r:00000E88 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E88 ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:00000E64o
.rdata$r:00000E88                                         ; .rdata$r:0000111Co
.rdata$r:00000E89                 db    0
.rdata$r:00000E8A                 db    0
.rdata$r:00000E8B                 db    0
.rdata$r:00000E8C                 db    0
.rdata$r:00000E8D                 db    0
.rdata$r:00000E8E                 db    0
.rdata$r:00000E8F                 db    0
.rdata$r:00000E90                 db    2
.rdata$r:00000E91                 db    0
.rdata$r:00000E92                 db    0
.rdata$r:00000E93                 db    0
.rdata$r:00000E94                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00000E94 _rdata$r        ends
.rdata$r:00000E94
.rdata$r:00000E98 ; ===========================================================================
.rdata$r:00000E98
.rdata$r:00000E98 ; Segment type: Pure data
.rdata$r:00000E98 ; Segment permissions: Read
.rdata$r:00000E98 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E98                 assume cs:_rdata$r
.rdata$r:00000E98                 ;org 0E98h
.rdata$r:00000E98 ; COMDAT (pick any)
.rdata$r:00000E98                 public ??_R2ICompressCoder@@8
.rdata$r:00000E98 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00000E98 ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000E98                                         ; DATA XREF: .rdata$r:00000E94o
.rdata$r:00000E98                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000E9C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000EA0                 db    0
.rdata$r:00000EA1                 align 4
.rdata$r:00000EA1 _rdata$r        ends
.rdata$r:00000EA1
.rdata$r:00000EA4 ; ===========================================================================
.rdata$r:00000EA4
.rdata$r:00000EA4 ; Segment type: Pure data
.rdata$r:00000EA4 ; Segment permissions: Read
.rdata$r:00000EA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000EA4                 assume cs:_rdata$r
.rdata$r:00000EA4                 ;org 0EA4h
.rdata$r:00000EA4 ; COMDAT (pick any)
.rdata$r:00000EA4                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000EA4 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000EA4 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000EA4                                         ; DATA XREF: .rdata$r:00000E24o
.rdata$r:00000EA4                                         ; .rdata$r:00000E9Co ...
.rdata$r:00000EA4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000EA8                 align 10h
.rdata$r:00000EB0                 db 0FFh
.rdata$r:00000EB1                 db 0FFh
.rdata$r:00000EB2                 db 0FFh
.rdata$r:00000EB3                 db 0FFh
.rdata$r:00000EB4                 db    0
.rdata$r:00000EB5                 db    0
.rdata$r:00000EB6                 db    0
.rdata$r:00000EB7                 db    0
.rdata$r:00000EB8                 db  40h ; @
.rdata$r:00000EB9                 db    0
.rdata$r:00000EBA                 db    0
.rdata$r:00000EBB                 db    0
.rdata$r:00000EBC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000EBC _rdata$r        ends
.rdata$r:00000EBC
.data:00000EC0 ; ===========================================================================
.data:00000EC0
.data:00000EC0 ; Segment type: Pure data
.data:00000EC0 ; Segment permissions: Read/Write
.data:00000EC0 _data           segment dword public 'DATA' use32
.data:00000EC0                 assume cs:_data
.data:00000EC0                 ;org 0EC0h
.data:00000EC0 ; COMDAT (pick any)
.data:00000EC0                 public ??_R0?AUIUnknown@@@8
.data:00000EC0 ; struct IUnknown `RTTI Type Descriptor'
.data:00000EC0 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00000EC0                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000EC0                                         ; const type_info::`vftable'
.data:00000EC4                 align 8
.data:00000EC8 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:00000ED7                 align 4
.data:00000ED7 _data           ends
.data:00000ED7
.rdata$r:00000ED8 ; ===========================================================================
.rdata$r:00000ED8
.rdata$r:00000ED8 ; Segment type: Pure data
.rdata$r:00000ED8 ; Segment permissions: Read
.rdata$r:00000ED8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000ED8                 assume cs:_rdata$r
.rdata$r:00000ED8                 ;org 0ED8h
.rdata$r:00000ED8 ; COMDAT (pick any)
.rdata$r:00000ED8                 public ??_R3IUnknown@@8
.rdata$r:00000ED8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000ED8 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00000EBCo
.rdata$r:00000ED9                 db    0
.rdata$r:00000EDA                 db    0
.rdata$r:00000EDB                 db    0
.rdata$r:00000EDC                 db    0
.rdata$r:00000EDD                 db    0
.rdata$r:00000EDE                 db    0
.rdata$r:00000EDF                 db    0
.rdata$r:00000EE0                 db    1
.rdata$r:00000EE1                 db    0
.rdata$r:00000EE2                 db    0
.rdata$r:00000EE3                 db    0
.rdata$r:00000EE4                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000EE4 _rdata$r        ends
.rdata$r:00000EE4
.rdata$r:00000EE8 ; ===========================================================================
.rdata$r:00000EE8
.rdata$r:00000EE8 ; Segment type: Pure data
.rdata$r:00000EE8 ; Segment permissions: Read
.rdata$r:00000EE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000EE8                 assume cs:_rdata$r
.rdata$r:00000EE8                 ;org 0EE8h
.rdata$r:00000EE8 ; COMDAT (pick any)
.rdata$r:00000EE8                 public ??_R2IUnknown@@8
.rdata$r:00000EE8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000EE8 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000EE8                                         ; DATA XREF: .rdata$r:00000EE4o
.rdata$r:00000EE8                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000EEC                 db    0
.rdata$r:00000EED                 align 10h
.rdata$r:00000EED _rdata$r        ends
.rdata$r:00000EED
.rdata$r:00000EF0 ; ===========================================================================
.rdata$r:00000EF0
.rdata$r:00000EF0 ; Segment type: Pure data
.rdata$r:00000EF0 ; Segment permissions: Read
.rdata$r:00000EF0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000EF0                 assume cs:_rdata$r
.rdata$r:00000EF0                 ;org 0EF0h
.rdata$r:00000EF0 ; COMDAT (pick any)
.rdata$r:00000EF0                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00000EF0 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00000EF0 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000EF0                                         ; DATA XREF: .rdata$r:00000E28o
.rdata$r:00000EF0                                         ; .rdata$r:00001278o ...
.rdata$r:00000EF0                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000EF4                 align 8
.rdata$r:00000EF8                 db    4
.rdata$r:00000EF9                 db    0
.rdata$r:00000EFA                 db    0
.rdata$r:00000EFB                 db    0
.rdata$r:00000EFC                 db 0FFh
.rdata$r:00000EFD                 db 0FFh
.rdata$r:00000EFE                 db 0FFh
.rdata$r:00000EFF                 db 0FFh
.rdata$r:00000F00                 db    0
.rdata$r:00000F01                 db    0
.rdata$r:00000F02                 db    0
.rdata$r:00000F03                 db    0
.rdata$r:00000F04                 db  40h ; @
.rdata$r:00000F05                 db    0
.rdata$r:00000F06                 db    0
.rdata$r:00000F07                 db    0
.rdata$r:00000F08                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F08 _rdata$r        ends
.rdata$r:00000F08
.data:00000F0C ; ===========================================================================
.data:00000F0C
.data:00000F0C ; Segment type: Pure data
.data:00000F0C ; Segment permissions: Read/Write
.data:00000F0C _data           segment dword public 'DATA' use32
.data:00000F0C                 assume cs:_data
.data:00000F0C                 ;org 0F0Ch
.data:00000F0C ; COMDAT (pick any)
.data:00000F0C                 public ??_R0?AVCMyUnknownImp@@@8
.data:00000F0C ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00000F0C ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00000F0C                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00000F0C                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000F0C                                         ; const type_info::`vftable'
.data:00000F10                 db    0
.data:00000F11                 db    0
.data:00000F12                 db    0
.data:00000F13                 db    0
.data:00000F14                 db  2Eh ; .
.data:00000F15                 db  3Fh ; ?
.data:00000F16                 db  41h ; A
.data:00000F17                 db  56h ; V
.data:00000F18                 db  43h ; C
.data:00000F19                 db  4Dh ; M
.data:00000F1A                 db  79h ; y
.data:00000F1B                 db  55h ; U
.data:00000F1C                 db  6Eh ; n
.data:00000F1D                 db  6Bh ; k
.data:00000F1E                 db  6Eh ; n
.data:00000F1F                 db  6Fh ; o
.data:00000F20                 db  77h ; w
.data:00000F21                 db  6Eh ; n
.data:00000F22                 db  49h ; I
.data:00000F23                 db  6Dh ; m
.data:00000F24                 db  70h ; p
.data:00000F25                 db  40h ; @
.data:00000F26                 db  40h ; @
.data:00000F27                 db    0
.data:00000F27 _data           ends
.data:00000F27
.rdata$r:00000F28 ; ===========================================================================
.rdata$r:00000F28
.rdata$r:00000F28 ; Segment type: Pure data
.rdata$r:00000F28 ; Segment permissions: Read
.rdata$r:00000F28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F28                 assume cs:_rdata$r
.rdata$r:00000F28                 ;org 0F28h
.rdata$r:00000F28 ; COMDAT (pick any)
.rdata$r:00000F28                 public ??_R3CMyUnknownImp@@8
.rdata$r:00000F28 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F28 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00000F08o
.rdata$r:00000F28                                         ; .rdata$r:00000F58o
.rdata$r:00000F29                 db    0
.rdata$r:00000F2A                 db    0
.rdata$r:00000F2B                 db    0
.rdata$r:00000F2C                 db    0
.rdata$r:00000F2D                 db    0
.rdata$r:00000F2E                 db    0
.rdata$r:00000F2F                 db    0
.rdata$r:00000F30                 db    1
.rdata$r:00000F31                 db    0
.rdata$r:00000F32                 db    0
.rdata$r:00000F33                 db    0
.rdata$r:00000F34                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000F34 _rdata$r        ends
.rdata$r:00000F34
.rdata$r:00000F38 ; ===========================================================================
.rdata$r:00000F38
.rdata$r:00000F38 ; Segment type: Pure data
.rdata$r:00000F38 ; Segment permissions: Read
.rdata$r:00000F38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F38                 assume cs:_rdata$r
.rdata$r:00000F38                 ;org 0F38h
.rdata$r:00000F38 ; COMDAT (pick any)
.rdata$r:00000F38                 public ??_R2CMyUnknownImp@@8
.rdata$r:00000F38 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000F38 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000F38                                         ; DATA XREF: .rdata$r:00000F34o
.rdata$r:00000F38                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000F3C                 db    0
.rdata$r:00000F3D                 align 10h
.rdata$r:00000F3D _rdata$r        ends
.rdata$r:00000F3D
.rdata$r:00000F40 ; ===========================================================================
.rdata$r:00000F40
.rdata$r:00000F40 ; Segment type: Pure data
.rdata$r:00000F40 ; Segment permissions: Read
.rdata$r:00000F40 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F40                 assume cs:_rdata$r
.rdata$r:00000F40                 ;org 0F40h
.rdata$r:00000F40 ; COMDAT (pick any)
.rdata$r:00000F40                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000F40 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000F40 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000F40                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00000F40                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000F44                 db    0
.rdata$r:00000F45                 db    0
.rdata$r:00000F46                 db    0
.rdata$r:00000F47                 db    0
.rdata$r:00000F48                 db    0
.rdata$r:00000F49                 db    0
.rdata$r:00000F4A                 db    0
.rdata$r:00000F4B                 db    0
.rdata$r:00000F4C                 db 0FFh
.rdata$r:00000F4D                 db 0FFh
.rdata$r:00000F4E                 db 0FFh
.rdata$r:00000F4F                 db 0FFh
.rdata$r:00000F50                 db    0
.rdata$r:00000F51                 db    0
.rdata$r:00000F52                 db    0
.rdata$r:00000F53                 db    0
.rdata$r:00000F54                 db  40h ; @
.rdata$r:00000F55                 db    0
.rdata$r:00000F56                 db    0
.rdata$r:00000F57                 db    0
.rdata$r:00000F58                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F58 _rdata$r        ends
.rdata$r:00000F58
.text:00000F5C ; ===========================================================================
.text:00000F5C
.text:00000F5C ; Segment type: Pure code
.text:00000F5C ; Segment permissions: Read/Execute
.text:00000F5C _text           segment para public 'CODE' use32
.text:00000F5C                 assume cs:_text
.text:00000F5C                 ;org 0F5Ch
.text:00000F5C ; COMDAT (pick any)
.text:00000F5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F5C
.text:00000F5C ; =============== S U B R O U T I N E =======================================
.text:00000F5C
.text:00000F5C ; Attributes: bp-based frame
.text:00000F5C
.text:00000F5C ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00000F5C                 public ??0CMyUnknownImp@@QAE@XZ
.text:00000F5C ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::NZ::CDecoder::CDecoder(void)+1Cp
.text:00000F5C                                         ; CDummyOutStream::CDummyOutStream(void)+1Cp ...
.text:00000F5C
.text:00000F5C var_4           = dword ptr -4
.text:00000F5C
.text:00000F5C                 push    ebp
.text:00000F5D                 mov     ebp, esp
.text:00000F5F                 push    ecx
.text:00000F60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F67                 mov     [ebp+var_4], ecx
.text:00000F6A                 mov     eax, [ebp+var_4]
.text:00000F6D                 mov     dword ptr [eax], 0
.text:00000F73                 mov     eax, [ebp+var_4]
.text:00000F76                 mov     esp, ebp
.text:00000F78                 pop     ebp
.text:00000F79                 retn
.text:00000F79 ??0CMyUnknownImp@@QAE@XZ endp
.text:00000F79
.text:00000F79 ; ---------------------------------------------------------------------------
.text:00000F7A                 align 4
.text:00000F7A _text           ends
.text:00000F7A
.text:00000F7C ; ===========================================================================
.text:00000F7C
.text:00000F7C ; Segment type: Pure code
.text:00000F7C ; Segment permissions: Read/Execute
.text:00000F7C _text           segment para public 'CODE' use32
.text:00000F7C                 assume cs:_text
.text:00000F7C                 ;org 0F7Ch
.text:00000F7C ; COMDAT (pick any)
.text:00000F7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F7C
.text:00000F7C ; =============== S U B R O U T I N E =======================================
.text:00000F7C
.text:00000F7C ; Attributes: bp-based frame
.text:00000F7C
.text:00000F7C ; __int32 __stdcall NCompress::NZ::CDecoder::QueryInterface(NCompress::NZ::CDecoder *this, const struct _GUID *Buf1, void **)
.text:00000F7C                 public ?QueryInterface@CDecoder@NZ@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00000F7C ?QueryInterface@CDecoder@NZ@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000F7C                                         ; DATA XREF: .rdata:const NCompress::NZ::CDecoder::`vftable'o
.text:00000F7C
.text:00000F7C this            = dword ptr  8
.text:00000F7C Buf1            = dword ptr  0Ch
.text:00000F7C arg_8           = dword ptr  10h
.text:00000F7C
.text:00000F7C                 push    ebp
.text:00000F7D                 mov     ebp, esp
.text:00000F7F                 mov     eax, [ebp+arg_8]
.text:00000F82                 mov     dword ptr [eax], 0
.text:00000F88                 push    offset _IID_IUnknown ; Buf2
.text:00000F8D                 mov     ecx, [ebp+Buf1]
.text:00000F90                 push    ecx             ; Buf1
.text:00000F91                 call    ___@8           ; __(x,x)
.text:00000F96                 test    eax, eax
.text:00000F98                 jz      short loc_FA4
.text:00000F9A                 mov     edx, [ebp+arg_8]
.text:00000F9D                 mov     eax, [ebp+this]
.text:00000FA0                 mov     [edx], eax
.text:00000FA2                 jmp     short loc_FC7
.text:00000FA4 ; ---------------------------------------------------------------------------
.text:00000FA4
.text:00000FA4 loc_FA4:                                ; CODE XREF: NCompress::NZ::CDecoder::QueryInterface(_GUID const &,void * *)+1Cj
.text:00000FA4                 push    offset _IID_ICompressCoder ; Buf2
.text:00000FA9                 mov     ecx, [ebp+Buf1]
.text:00000FAC                 push    ecx             ; Buf1
.text:00000FAD                 call    ___@8           ; __(x,x)
.text:00000FB2                 test    eax, eax
.text:00000FB4                 jz      short loc_FC0
.text:00000FB6                 mov     edx, [ebp+arg_8]
.text:00000FB9                 mov     eax, [ebp+this]
.text:00000FBC                 mov     [edx], eax
.text:00000FBE                 jmp     short loc_FC7
.text:00000FC0 ; ---------------------------------------------------------------------------
.text:00000FC0
.text:00000FC0 loc_FC0:                                ; CODE XREF: NCompress::NZ::CDecoder::QueryInterface(_GUID const &,void * *)+38j
.text:00000FC0                 mov     eax, 80004002h
.text:00000FC5                 jmp     short loc_FD8
.text:00000FC7 ; ---------------------------------------------------------------------------
.text:00000FC7
.text:00000FC7 loc_FC7:                                ; CODE XREF: NCompress::NZ::CDecoder::QueryInterface(_GUID const &,void * *)+26j
.text:00000FC7                                         ; NCompress::NZ::CDecoder::QueryInterface(_GUID const &,void * *)+42j
.text:00000FC7                 mov     ecx, [ebp+this]
.text:00000FCA                 mov     edx, [ecx+4]
.text:00000FCD                 add     edx, 1
.text:00000FD0                 mov     eax, [ebp+this]
.text:00000FD3                 mov     [eax+4], edx
.text:00000FD6                 xor     eax, eax
.text:00000FD8
.text:00000FD8 loc_FD8:                                ; CODE XREF: NCompress::NZ::CDecoder::QueryInterface(_GUID const &,void * *)+49j
.text:00000FD8                 cmp     ebp, esp
.text:00000FDA                 call    __RTC_CheckEsp
.text:00000FDF                 pop     ebp
.text:00000FE0                 retn    0Ch
.text:00000FE0 ?QueryInterface@CDecoder@NZ@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00000FE0
.text:00000FE0 ; ---------------------------------------------------------------------------
.text:00000FE3                 align 4
.text:00000FE3 _text           ends
.text:00000FE3
.text:00000FE4 ; ===========================================================================
.text:00000FE4
.text:00000FE4 ; Segment type: Pure code
.text:00000FE4 ; Segment permissions: Read/Execute
.text:00000FE4 _text           segment para public 'CODE' use32
.text:00000FE4                 assume cs:_text
.text:00000FE4                 ;org 0FE4h
.text:00000FE4 ; COMDAT (pick any)
.text:00000FE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000FE4
.text:00000FE4 ; =============== S U B R O U T I N E =======================================
.text:00000FE4
.text:00000FE4 ; Attributes: bp-based frame
.text:00000FE4
.text:00000FE4 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00000FE4                 public ___@8
.text:00000FE4 ___@8           proc near               ; CODE XREF: NCompress::NZ::CDecoder::QueryInterface(_GUID const &,void * *)+15p
.text:00000FE4                                         ; NCompress::NZ::CDecoder::QueryInterface(_GUID const &,void * *)+31p ...
.text:00000FE4
.text:00000FE4 Buf1            = dword ptr  8
.text:00000FE4 Buf2            = dword ptr  0Ch
.text:00000FE4
.text:00000FE4                 push    ebp
.text:00000FE5                 mov     ebp, esp
.text:00000FE7                 mov     eax, [ebp+Buf2]
.text:00000FEA                 push    eax             ; Buf2
.text:00000FEB                 mov     ecx, [ebp+Buf1]
.text:00000FEE                 push    ecx             ; Buf1
.text:00000FEF                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00000FF4                 cmp     ebp, esp
.text:00000FF6                 call    __RTC_CheckEsp
.text:00000FFB                 pop     ebp
.text:00000FFC                 retn    8
.text:00000FFC ___@8           endp
.text:00000FFC
.text:00000FFC ; ---------------------------------------------------------------------------
.text:00000FFF                 align 10h
.text:00000FFF _text           ends
.text:00000FFF
.text:00001000 ; ===========================================================================
.text:00001000
.text:00001000 ; Segment type: Pure code
.text:00001000 ; Segment permissions: Read/Execute
.text:00001000 _text           segment para public 'CODE' use32
.text:00001000                 assume cs:_text
.text:00001000                 ;org 1000h
.text:00001000 ; COMDAT (pick any)
.text:00001000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001000
.text:00001000 ; =============== S U B R O U T I N E =======================================
.text:00001000
.text:00001000 ; Attributes: bp-based frame
.text:00001000
.text:00001000 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00001000                 public _IsEqualGUID@8
.text:00001000 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00001000
.text:00001000 Buf1            = dword ptr  8
.text:00001000 Buf2            = dword ptr  0Ch
.text:00001000
.text:00001000                 push    ebp
.text:00001001                 mov     ebp, esp
.text:00001003                 push    10h             ; Size
.text:00001005                 mov     eax, [ebp+Buf2]
.text:00001008                 push    eax             ; Buf2
.text:00001009                 mov     ecx, [ebp+Buf1]
.text:0000100C                 push    ecx             ; Buf1
.text:0000100D                 call    _memcmp
.text:00001012                 add     esp, 0Ch
.text:00001015                 neg     eax
.text:00001017                 sbb     eax, eax
.text:00001019                 add     eax, 1
.text:0000101C                 cmp     ebp, esp
.text:0000101E                 call    __RTC_CheckEsp
.text:00001023                 pop     ebp
.text:00001024                 retn    8
.text:00001024 _IsEqualGUID@8  endp
.text:00001024
.text:00001024 ; ---------------------------------------------------------------------------
.text:00001027                 align 4
.text:00001027 _text           ends
.text:00001027
.text:00001028 ; ===========================================================================
.text:00001028
.text:00001028 ; Segment type: Pure code
.text:00001028 ; Segment permissions: Read/Execute
.text:00001028 _text           segment para public 'CODE' use32
.text:00001028                 assume cs:_text
.text:00001028                 ;org 1028h
.text:00001028 ; COMDAT (pick any)
.text:00001028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001028
.text:00001028 ; =============== S U B R O U T I N E =======================================
.text:00001028
.text:00001028 ; Attributes: bp-based frame
.text:00001028
.text:00001028 ; unsigned __int32 __stdcall NCompress::NZ::CDecoder::AddRef(NCompress::NZ::CDecoder *this)
.text:00001028                 public ?AddRef@CDecoder@NZ@NCompress@@UAGKXZ
.text:00001028 ?AddRef@CDecoder@NZ@NCompress@@UAGKXZ proc near ; DATA XREF: .rdata:00000DC8o
.text:00001028
.text:00001028 var_4           = dword ptr -4
.text:00001028 this            = dword ptr  8
.text:00001028
.text:00001028                 push    ebp
.text:00001029                 mov     ebp, esp
.text:0000102B                 push    ecx
.text:0000102C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001033                 mov     eax, [ebp+this]
.text:00001036                 mov     ecx, [eax+4]
.text:00001039                 add     ecx, 1
.text:0000103C                 mov     [ebp+var_4], ecx
.text:0000103F                 mov     edx, [ebp+this]
.text:00001042                 mov     eax, [ebp+var_4]
.text:00001045                 mov     [edx+4], eax
.text:00001048                 mov     eax, [ebp+var_4]
.text:0000104B                 mov     esp, ebp
.text:0000104D                 pop     ebp
.text:0000104E                 retn    4
.text:0000104E ?AddRef@CDecoder@NZ@NCompress@@UAGKXZ endp
.text:0000104E
.text:0000104E ; ---------------------------------------------------------------------------
.text:00001051                 align 4
.text:00001051 _text           ends
.text:00001051
.text:00001054 ; ===========================================================================
.text:00001054
.text:00001054 ; Segment type: Pure code
.text:00001054 ; Segment permissions: Read/Execute
.text:00001054 _text           segment para public 'CODE' use32
.text:00001054                 assume cs:_text
.text:00001054                 ;org 1054h
.text:00001054 ; COMDAT (pick any)
.text:00001054                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001054
.text:00001054 ; =============== S U B R O U T I N E =======================================
.text:00001054
.text:00001054 ; Attributes: bp-based frame
.text:00001054
.text:00001054 ; unsigned __int32 __stdcall NCompress::NZ::CDecoder::Release(NCompress::NZ::CDecoder *this)
.text:00001054                 public ?Release@CDecoder@NZ@NCompress@@UAGKXZ
.text:00001054 ?Release@CDecoder@NZ@NCompress@@UAGKXZ proc near
.text:00001054                                         ; DATA XREF: .rdata:00000DCCo
.text:00001054
.text:00001054 var_10          = dword ptr -10h
.text:00001054 var_C           = dword ptr -0Ch
.text:00001054 var_8           = dword ptr -8
.text:00001054 var_4           = dword ptr -4
.text:00001054 this            = dword ptr  8
.text:00001054
.text:00001054                 push    ebp
.text:00001055                 mov     ebp, esp
.text:00001057                 sub     esp, 10h
.text:0000105A                 mov     eax, 0CCCCCCCCh
.text:0000105F                 mov     [ebp+var_10], eax
.text:00001062                 mov     [ebp+var_C], eax
.text:00001065                 mov     [ebp+var_8], eax
.text:00001068                 mov     [ebp+var_4], eax
.text:0000106B                 mov     eax, [ebp+this]
.text:0000106E                 mov     ecx, [eax+4]
.text:00001071                 sub     ecx, 1
.text:00001074                 mov     [ebp+var_C], ecx
.text:00001077                 mov     edx, [ebp+this]
.text:0000107A                 mov     eax, [ebp+var_C]
.text:0000107D                 mov     [edx+4], eax
.text:00001080                 cmp     [ebp+var_C], 0
.text:00001084                 jz      short loc_108E
.text:00001086                 mov     ecx, [ebp+this]
.text:00001089                 mov     eax, [ecx+4]
.text:0000108C                 jmp     short loc_10B8
.text:0000108E ; ---------------------------------------------------------------------------
.text:0000108E
.text:0000108E loc_108E:                               ; CODE XREF: NCompress::NZ::CDecoder::Release(void)+30j
.text:0000108E                 mov     edx, [ebp+this]
.text:00001091                 mov     [ebp+var_8], edx
.text:00001094                 mov     eax, [ebp+var_8]
.text:00001097                 mov     [ebp+var_4], eax
.text:0000109A                 cmp     [ebp+var_4], 0
.text:0000109E                 jz      short loc_10AF
.text:000010A0                 push    1
.text:000010A2                 mov     ecx, [ebp+var_4]
.text:000010A5                 call    ??_GCDecoder@NZ@NCompress@@QAEPAXI@Z ; NCompress::NZ::CDecoder::`scalar deleting destructor'(uint)
.text:000010AA                 mov     [ebp+var_10], eax
.text:000010AD                 jmp     short loc_10B6
.text:000010AF ; ---------------------------------------------------------------------------
.text:000010AF
.text:000010AF loc_10AF:                               ; CODE XREF: NCompress::NZ::CDecoder::Release(void)+4Aj
.text:000010AF                 mov     [ebp+var_10], 0
.text:000010B6
.text:000010B6 loc_10B6:                               ; CODE XREF: NCompress::NZ::CDecoder::Release(void)+59j
.text:000010B6                 xor     eax, eax
.text:000010B8
.text:000010B8 loc_10B8:                               ; CODE XREF: NCompress::NZ::CDecoder::Release(void)+38j
.text:000010B8                 add     esp, 10h
.text:000010BB                 cmp     ebp, esp
.text:000010BD                 call    __RTC_CheckEsp
.text:000010C2                 mov     esp, ebp
.text:000010C4                 pop     ebp
.text:000010C5                 retn    4
.text:000010C5 ?Release@CDecoder@NZ@NCompress@@UAGKXZ endp
.text:000010C5
.text:000010C5 _text           ends
.text:000010C5
.text:000010C8 ; ===========================================================================
.text:000010C8
.text:000010C8 ; Segment type: Pure code
.text:000010C8 ; Segment permissions: Read/Execute
.text:000010C8 _text           segment para public 'CODE' use32
.text:000010C8                 assume cs:_text
.text:000010C8                 ;org 10C8h
.text:000010C8 ; COMDAT (pick any)
.text:000010C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000010C8
.text:000010C8 ; =============== S U B R O U T I N E =======================================
.text:000010C8
.text:000010C8 ; Attributes: bp-based frame
.text:000010C8
.text:000010C8 ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:000010C8                 public ??0ICompressCoder@@QAE@XZ
.text:000010C8 ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::NZ::CDecoder::CDecoder(void)+11p
.text:000010C8
.text:000010C8 var_4           = dword ptr -4
.text:000010C8
.text:000010C8                 push    ebp
.text:000010C9                 mov     ebp, esp
.text:000010CB                 push    ecx
.text:000010CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000010D3                 mov     [ebp+var_4], ecx
.text:000010D6                 mov     ecx, [ebp+var_4]
.text:000010D9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000010DE                 mov     eax, [ebp+var_4]
.text:000010E1                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:000010E7                 mov     eax, [ebp+var_4]
.text:000010EA                 add     esp, 4
.text:000010ED                 cmp     ebp, esp
.text:000010EF                 call    __RTC_CheckEsp
.text:000010F4                 mov     esp, ebp
.text:000010F6                 pop     ebp
.text:000010F7                 retn
.text:000010F7 ??0ICompressCoder@@QAE@XZ endp
.text:000010F7
.text:000010F7 _text           ends
.text:000010F7
.rdata:000010F8 ; ===========================================================================
.rdata:000010F8
.rdata:000010F8 ; Segment type: Pure data
.rdata:000010F8 ; Segment permissions: Read
.rdata:000010F8 _rdata          segment dword public 'DATA' use32
.rdata:000010F8                 assume cs:_rdata
.rdata:000010F8                 ;org 10F8h
.rdata:000010F8 ; COMDAT (pick largest)
.rdata:000010F8                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:000010FC                 public ??_7ICompressCoder@@6B@
.rdata:000010FC ; const ICompressCoder::`vftable'
.rdata:000010FC ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:000010FC                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:00001100                 dd offset __purecall
.rdata:00001104                 dd offset __purecall
.rdata:00001108                 dd offset __purecall
.rdata:00001108 _rdata          ends
.rdata:00001108
.rdata$r:0000110C ; ===========================================================================
.rdata$r:0000110C
.rdata$r:0000110C ; Segment type: Pure data
.rdata$r:0000110C ; Segment permissions: Read
.rdata$r:0000110C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000110C                 assume cs:_rdata$r
.rdata$r:0000110C                 ;org 110Ch
.rdata$r:0000110C ; COMDAT (pick any)
.rdata$r:0000110C                 public ??_R4ICompressCoder@@6B@
.rdata$r:0000110C ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:0000110C ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:000010F8o
.rdata$r:0000110D                 db    0
.rdata$r:0000110E                 db    0
.rdata$r:0000110F                 db    0
.rdata$r:00001110                 db    0
.rdata$r:00001111                 db    0
.rdata$r:00001112                 db    0
.rdata$r:00001113                 db    0
.rdata$r:00001114                 db    0
.rdata$r:00001115                 db    0
.rdata$r:00001116                 db    0
.rdata$r:00001117                 db    0
.rdata$r:00001118                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:0000111C                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000111C _rdata$r        ends
.rdata$r:0000111C
.text:00001120 ; ===========================================================================
.text:00001120
.text:00001120 ; Segment type: Pure code
.text:00001120 ; Segment permissions: Read/Execute
.text:00001120 _text           segment para public 'CODE' use32
.text:00001120                 assume cs:_text
.text:00001120                 ;org 1120h
.text:00001120 ; COMDAT (pick any)
.text:00001120                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001120
.text:00001120 ; =============== S U B R O U T I N E =======================================
.text:00001120
.text:00001120 ; Attributes: bp-based frame
.text:00001120
.text:00001120 ; public: void * __thiscall NCompress::NZ::CDecoder::`scalar deleting destructor'(unsigned int)
.text:00001120                 public ??_GCDecoder@NZ@NCompress@@QAEPAXI@Z
.text:00001120 ??_GCDecoder@NZ@NCompress@@QAEPAXI@Z proc near
.text:00001120                                         ; CODE XREF: NCompress::NZ::CDecoder::Release(void)+51p
.text:00001120
.text:00001120 var_4           = dword ptr -4
.text:00001120 arg_0           = dword ptr  8
.text:00001120
.text:00001120                 push    ebp
.text:00001121                 mov     ebp, esp
.text:00001123                 push    ecx
.text:00001124                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000112B                 mov     [ebp+var_4], ecx
.text:0000112E                 mov     ecx, [ebp+var_4] ; this
.text:00001131                 call    ??1CDecoder@NZ@NCompress@@QAE@XZ ; NCompress::NZ::CDecoder::~CDecoder(void)
.text:00001136                 mov     eax, [ebp+arg_0]
.text:00001139                 and     eax, 1
.text:0000113C                 jz      short loc_114A
.text:0000113E                 mov     ecx, [ebp+var_4]
.text:00001141                 push    ecx             ; void *
.text:00001142                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001147                 add     esp, 4
.text:0000114A
.text:0000114A loc_114A:                               ; CODE XREF: NCompress::NZ::CDecoder::`scalar deleting destructor'(uint)+1Cj
.text:0000114A                 mov     eax, [ebp+var_4]
.text:0000114D                 add     esp, 4
.text:00001150                 cmp     ebp, esp
.text:00001152                 call    __RTC_CheckEsp
.text:00001157                 mov     esp, ebp
.text:00001159                 pop     ebp
.text:0000115A                 retn    4
.text:0000115A ??_GCDecoder@NZ@NCompress@@QAEPAXI@Z endp
.text:0000115A
.text:0000115A ; ---------------------------------------------------------------------------
.text:0000115D                 align 10h
.text:0000115D _text           ends
.text:0000115D
.text:00001160 ; ===========================================================================
.text:00001160
.text:00001160 ; Segment type: Pure code
.text:00001160 ; Segment permissions: Read/Execute
.text:00001160 _text           segment para public 'CODE' use32
.text:00001160                 assume cs:_text
.text:00001160                 ;org 1160h
.text:00001160 ; COMDAT (pick any)
.text:00001160                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001160
.text:00001160 ; =============== S U B R O U T I N E =======================================
.text:00001160
.text:00001160 ; Attributes: bp-based frame
.text:00001160
.text:00001160 ; public: __thiscall IUnknown::IUnknown(void)
.text:00001160                 public ??0IUnknown@@QAE@XZ
.text:00001160 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:00001160                                         ; ISequentialOutStream::ISequentialOutStream(void)+11p ...
.text:00001160
.text:00001160 var_4           = dword ptr -4
.text:00001160
.text:00001160                 push    ebp
.text:00001161                 mov     ebp, esp
.text:00001163                 push    ecx
.text:00001164                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000116B                 mov     [ebp+var_4], ecx
.text:0000116E                 mov     eax, [ebp+var_4]
.text:00001171                 mov     esp, ebp
.text:00001173                 pop     ebp
.text:00001174                 retn
.text:00001174 ??0IUnknown@@QAE@XZ endp
.text:00001174
.text:00001174 ; ---------------------------------------------------------------------------
.text:00001175                 align 4
.text:00001175 _text           ends
.text:00001175
.text:00001178 ; ===========================================================================
.text:00001178
.text:00001178 ; Segment type: Pure code
.text:00001178 ; Segment permissions: Read/Execute
.text:00001178 _text           segment para public 'CODE' use32
.text:00001178                 assume cs:_text
.text:00001178                 ;org 1178h
.text:00001178 ; COMDAT (pick any)
.text:00001178                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001178
.text:00001178 ; =============== S U B R O U T I N E =======================================
.text:00001178
.text:00001178 ; Attributes: bp-based frame
.text:00001178
.text:00001178 ; void __thiscall CDummyOutStream::SetStream(CDummyOutStream *this, struct ISequentialOutStream *)
.text:00001178                 public ?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z
.text:00001178 ?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z proc near
.text:00001178                                         ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+242p
.text:00001178
.text:00001178 var_4           = dword ptr -4
.text:00001178 arg_0           = dword ptr  8
.text:00001178
.text:00001178                 push    ebp
.text:00001179                 mov     ebp, esp
.text:0000117B                 push    ecx
.text:0000117C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001183                 mov     [ebp+var_4], ecx
.text:00001186                 mov     eax, [ebp+arg_0]
.text:00001189                 push    eax
.text:0000118A                 mov     ecx, [ebp+var_4]
.text:0000118D                 add     ecx, 8
.text:00001190                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:00001195                 add     esp, 4
.text:00001198                 cmp     ebp, esp
.text:0000119A                 call    __RTC_CheckEsp
.text:0000119F                 mov     esp, ebp
.text:000011A1                 pop     ebp
.text:000011A2                 retn    4
.text:000011A2 ?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z endp
.text:000011A2
.text:000011A2 ; ---------------------------------------------------------------------------
.text:000011A5                 align 4
.text:000011A5 _text           ends
.text:000011A5
.text:000011A8 ; ===========================================================================
.text:000011A8
.text:000011A8 ; Segment type: Pure code
.text:000011A8 ; Segment permissions: Read/Execute
.text:000011A8 _text           segment para public 'CODE' use32
.text:000011A8                 assume cs:_text
.text:000011A8                 ;org 11A8h
.text:000011A8 ; COMDAT (pick any)
.text:000011A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000011A8
.text:000011A8 ; =============== S U B R O U T I N E =======================================
.text:000011A8
.text:000011A8 ; Attributes: bp-based frame
.text:000011A8
.text:000011A8 ; void __thiscall CDummyOutStream::Init(CDummyOutStream *__hidden this)
.text:000011A8                 public ?Init@CDummyOutStream@@QAEXXZ
.text:000011A8 ?Init@CDummyOutStream@@QAEXXZ proc near ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+24Ap
.text:000011A8
.text:000011A8 var_4           = dword ptr -4
.text:000011A8
.text:000011A8                 push    ebp
.text:000011A9                 mov     ebp, esp
.text:000011AB                 push    ecx
.text:000011AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011B3                 mov     [ebp+var_4], ecx
.text:000011B6                 mov     eax, [ebp+var_4]
.text:000011B9                 mov     dword ptr [eax+10h], 0
.text:000011C0                 mov     dword ptr [eax+14h], 0
.text:000011C7                 mov     esp, ebp
.text:000011C9                 pop     ebp
.text:000011CA                 retn
.text:000011CA ?Init@CDummyOutStream@@QAEXXZ endp
.text:000011CA
.text:000011CA ; ---------------------------------------------------------------------------
.text:000011CB                 align 4
.text:000011CB _text           ends
.text:000011CB
.text:000011CC ; ===========================================================================
.text:000011CC
.text:000011CC ; Segment type: Pure code
.text:000011CC ; Segment permissions: Read/Execute
.text:000011CC _text           segment para public 'CODE' use32
.text:000011CC                 assume cs:_text
.text:000011CC                 ;org 11CCh
.text:000011CC ; COMDAT (pick any)
.text:000011CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000011CC
.text:000011CC ; =============== S U B R O U T I N E =======================================
.text:000011CC
.text:000011CC ; Attributes: bp-based frame
.text:000011CC
.text:000011CC ; public: __thiscall CDummyOutStream::CDummyOutStream(void)
.text:000011CC                 public ??0CDummyOutStream@@QAE@XZ
.text:000011CC ??0CDummyOutStream@@QAE@XZ proc near    ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1DEp
.text:000011CC
.text:000011CC var_4           = dword ptr -4
.text:000011CC
.text:000011CC                 push    ebp
.text:000011CD                 mov     ebp, esp
.text:000011CF                 push    ecx
.text:000011D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011D7                 mov     [ebp+var_4], ecx
.text:000011DA                 mov     ecx, [ebp+var_4] ; this
.text:000011DD                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:000011E2                 mov     ecx, [ebp+var_4]
.text:000011E5                 add     ecx, 4          ; this
.text:000011E8                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000011ED                 mov     eax, [ebp+var_4]
.text:000011F0                 mov     dword ptr [eax], offset ??_7CDummyOutStream@@6B@ ; const CDummyOutStream::`vftable'
.text:000011F6                 mov     ecx, [ebp+var_4]
.text:000011F9                 add     ecx, 8
.text:000011FC                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00001201                 mov     eax, [ebp+var_4]
.text:00001204                 add     esp, 4
.text:00001207                 cmp     ebp, esp
.text:00001209                 call    __RTC_CheckEsp
.text:0000120E                 mov     esp, ebp
.text:00001210                 pop     ebp
.text:00001211                 retn
.text:00001211 ??0CDummyOutStream@@QAE@XZ endp
.text:00001211
.text:00001211 ; ---------------------------------------------------------------------------
.text:00001212                 align 4
.text:00001212 _text           ends
.text:00001212
.rdata:00001214 ; ===========================================================================
.rdata:00001214
.rdata:00001214 ; Segment type: Pure data
.rdata:00001214 ; Segment permissions: Read
.rdata:00001214 _rdata          segment dword public 'DATA' use32
.rdata:00001214                 assume cs:_rdata
.rdata:00001214                 ;org 1214h
.rdata:00001214 ; COMDAT (pick largest)
.rdata:00001214                 dd offset ??_R4CDummyOutStream@@6B@ ; const CDummyOutStream::`RTTI Complete Object Locator'
.rdata:00001218                 public ??_7CDummyOutStream@@6B@
.rdata:00001218 ; const CDummyOutStream::`vftable'
.rdata:00001218 ??_7CDummyOutStream@@6B@ dd offset ?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:00001218                                         ; DATA XREF: CDummyOutStream::CDummyOutStream(void)+24o
.rdata:00001218                                         ; CDummyOutStream::QueryInterface(_GUID const &,void * *)
.rdata:0000121C                 dd offset ?AddRef@CDummyOutStream@@UAGKXZ ; CDummyOutStream::AddRef(void)
.rdata:00001220                 dd offset ?Release@CDummyOutStream@@UAGKXZ ; CDummyOutStream::Release(void)
.rdata:00001224                 dd offset ?Write@CDummyOutStream@@UAGJPBXIPAI@Z ; CDummyOutStream::Write(void const *,uint,uint *)
.rdata:00001224 _rdata          ends
.rdata:00001224
.rdata$r:00001228 ; ===========================================================================
.rdata$r:00001228
.rdata$r:00001228 ; Segment type: Pure data
.rdata$r:00001228 ; Segment permissions: Read
.rdata$r:00001228 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001228                 assume cs:_rdata$r
.rdata$r:00001228                 ;org 1228h
.rdata$r:00001228 ; COMDAT (pick any)
.rdata$r:00001228                 public ??_R4CDummyOutStream@@6B@
.rdata$r:00001228 ; const CDummyOutStream::`RTTI Complete Object Locator'
.rdata$r:00001228 ??_R4CDummyOutStream@@6B@ db    0       ; DATA XREF: .rdata:00001214o
.rdata$r:00001229                 db    0
.rdata$r:0000122A                 db    0
.rdata$r:0000122B                 db    0
.rdata$r:0000122C                 db    0
.rdata$r:0000122D                 db    0
.rdata$r:0000122E                 db    0
.rdata$r:0000122F                 db    0
.rdata$r:00001230                 db    0
.rdata$r:00001231                 db    0
.rdata$r:00001232                 db    0
.rdata$r:00001233                 db    0
.rdata$r:00001234                 dd offset ??_R0?AVCDummyOutStream@@@8 ; CDummyOutStream `RTTI Type Descriptor'
.rdata$r:00001238                 dd offset ??_R3CDummyOutStream@@8 ; CDummyOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001238 _rdata$r        ends
.rdata$r:00001238
.data:0000123C ; ===========================================================================
.data:0000123C
.data:0000123C ; Segment type: Pure data
.data:0000123C ; Segment permissions: Read/Write
.data:0000123C _data           segment dword public 'DATA' use32
.data:0000123C                 assume cs:_data
.data:0000123C                 ;org 123Ch
.data:0000123C ; COMDAT (pick any)
.data:0000123C                 public ??_R0?AVCDummyOutStream@@@8
.data:0000123C ; class CDummyOutStream `RTTI Type Descriptor'
.data:0000123C ??_R0?AVCDummyOutStream@@@8 dd offset ??_7type_info@@6B@
.data:0000123C                                         ; DATA XREF: .rdata$r:00001234o
.data:0000123C                                         ; .rdata$r:CDummyOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000123C                                         ; const type_info::`vftable'
.data:00001240                 db    0
.data:00001241                 db    0
.data:00001242                 db    0
.data:00001243                 db    0
.data:00001244                 db  2Eh ; .
.data:00001245                 db  3Fh ; ?
.data:00001246                 db  41h ; A
.data:00001247                 db  56h ; V
.data:00001248                 db  43h ; C
.data:00001249                 db  44h ; D
.data:0000124A                 db  75h ; u
.data:0000124B                 db  6Dh ; m
.data:0000124C                 db  6Dh ; m
.data:0000124D                 db  79h ; y
.data:0000124E                 db  4Fh ; O
.data:0000124F                 db  75h ; u
.data:00001250                 db  74h ; t
.data:00001251                 db  53h ; S
.data:00001252                 db  74h ; t
.data:00001253                 db  72h ; r
.data:00001254                 db  65h ; e
.data:00001255                 db  61h ; a
.data:00001256                 db  6Dh ; m
.data:00001257                 db  40h ; @
.data:00001258                 db  40h ; @
.data:00001259                 db    0
.data:0000125A                 align 4
.data:0000125A _data           ends
.data:0000125A
.rdata$r:0000125C ; ===========================================================================
.rdata$r:0000125C
.rdata$r:0000125C ; Segment type: Pure data
.rdata$r:0000125C ; Segment permissions: Read
.rdata$r:0000125C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000125C                 assume cs:_rdata$r
.rdata$r:0000125C                 ;org 125Ch
.rdata$r:0000125C ; COMDAT (pick any)
.rdata$r:0000125C                 public ??_R3CDummyOutStream@@8
.rdata$r:0000125C ; CDummyOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000125C ??_R3CDummyOutStream@@8 db    0         ; DATA XREF: .rdata$r:00001238o
.rdata$r:0000125C                                         ; .rdata$r:00001298o
.rdata$r:0000125D                 db    0
.rdata$r:0000125E                 db    0
.rdata$r:0000125F                 db    0
.rdata$r:00001260                 db    1
.rdata$r:00001261                 db    0
.rdata$r:00001262                 db    0
.rdata$r:00001263                 db    0
.rdata$r:00001264                 db    4
.rdata$r:00001265                 db    0
.rdata$r:00001266                 db    0
.rdata$r:00001267                 db    0
.rdata$r:00001268                 dd offset ??_R2CDummyOutStream@@8 ; CDummyOutStream::`RTTI Base Class Array'
.rdata$r:00001268 _rdata$r        ends
.rdata$r:00001268
.rdata$r:0000126C ; ===========================================================================
.rdata$r:0000126C
.rdata$r:0000126C ; Segment type: Pure data
.rdata$r:0000126C ; Segment permissions: Read
.rdata$r:0000126C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000126C                 assume cs:_rdata$r
.rdata$r:0000126C                 ;org 126Ch
.rdata$r:0000126C ; COMDAT (pick any)
.rdata$r:0000126C                 public ??_R2CDummyOutStream@@8
.rdata$r:0000126C ; CDummyOutStream::`RTTI Base Class Array'
.rdata$r:0000126C ??_R2CDummyOutStream@@8 dd offset ??_R1A@?0A@EA@CDummyOutStream@@8
.rdata$r:0000126C                                         ; DATA XREF: .rdata$r:00001268o
.rdata$r:0000126C                                         ; CDummyOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001270                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001274                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001278                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000127C                 db    0
.rdata$r:0000127D                 align 10h
.rdata$r:0000127D _rdata$r        ends
.rdata$r:0000127D
.rdata$r:00001280 ; ===========================================================================
.rdata$r:00001280
.rdata$r:00001280 ; Segment type: Pure data
.rdata$r:00001280 ; Segment permissions: Read
.rdata$r:00001280 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001280                 assume cs:_rdata$r
.rdata$r:00001280                 ;org 1280h
.rdata$r:00001280 ; COMDAT (pick any)
.rdata$r:00001280                 public ??_R1A@?0A@EA@CDummyOutStream@@8
.rdata$r:00001280 ; CDummyOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001280 ??_R1A@?0A@EA@CDummyOutStream@@8 dd offset ??_R0?AVCDummyOutStream@@@8
.rdata$r:00001280                                         ; DATA XREF: .rdata$r:CDummyOutStream::`RTTI Base Class Array'o
.rdata$r:00001280                                         ; CDummyOutStream `RTTI Type Descriptor'
.rdata$r:00001284                 db    3
.rdata$r:00001285                 db    0
.rdata$r:00001286                 db    0
.rdata$r:00001287                 db    0
.rdata$r:00001288                 db    0
.rdata$r:00001289                 db    0
.rdata$r:0000128A                 db    0
.rdata$r:0000128B                 db    0
.rdata$r:0000128C                 db 0FFh
.rdata$r:0000128D                 db 0FFh
.rdata$r:0000128E                 db 0FFh
.rdata$r:0000128F                 db 0FFh
.rdata$r:00001290                 db    0
.rdata$r:00001291                 db    0
.rdata$r:00001292                 db    0
.rdata$r:00001293                 db    0
.rdata$r:00001294                 db  40h ; @
.rdata$r:00001295                 db    0
.rdata$r:00001296                 db    0
.rdata$r:00001297                 db    0
.rdata$r:00001298                 dd offset ??_R3CDummyOutStream@@8 ; CDummyOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001298 _rdata$r        ends
.rdata$r:00001298
.rdata$r:0000129C ; ===========================================================================
.rdata$r:0000129C
.rdata$r:0000129C ; Segment type: Pure data
.rdata$r:0000129C ; Segment permissions: Read
.rdata$r:0000129C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000129C                 assume cs:_rdata$r
.rdata$r:0000129C                 ;org 129Ch
.rdata$r:0000129C ; COMDAT (pick any)
.rdata$r:0000129C                 public ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:0000129C ; ISequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000129C ??_R1A@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:0000129C                                         ; DATA XREF: .rdata$r:00001270o
.rdata$r:0000129C                                         ; .rdata$r:ISequentialOutStream::`RTTI Base Class Array'o
.rdata$r:0000129C                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:000012A0                 db    1
.rdata$r:000012A1                 db    0
.rdata$r:000012A2                 db    0
.rdata$r:000012A3                 db    0
.rdata$r:000012A4                 db    0
.rdata$r:000012A5                 db    0
.rdata$r:000012A6                 db    0
.rdata$r:000012A7                 db    0
.rdata$r:000012A8                 db 0FFh
.rdata$r:000012A9                 db 0FFh
.rdata$r:000012AA                 db 0FFh
.rdata$r:000012AB                 db 0FFh
.rdata$r:000012AC                 db    0
.rdata$r:000012AD                 db    0
.rdata$r:000012AE                 db    0
.rdata$r:000012AF                 db    0
.rdata$r:000012B0                 db  40h ; @
.rdata$r:000012B1                 db    0
.rdata$r:000012B2                 db    0
.rdata$r:000012B3                 db    0
.rdata$r:000012B4                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000012B4 _rdata$r        ends
.rdata$r:000012B4
.data:000012B8 ; ===========================================================================
.data:000012B8
.data:000012B8 ; Segment type: Pure data
.data:000012B8 ; Segment permissions: Read/Write
.data:000012B8 _data           segment dword public 'DATA' use32
.data:000012B8                 assume cs:_data
.data:000012B8                 ;org 12B8h
.data:000012B8 ; COMDAT (pick any)
.data:000012B8                 public ??_R0?AUISequentialOutStream@@@8
.data:000012B8 ; struct ISequentialOutStream `RTTI Type Descriptor'
.data:000012B8 ??_R0?AUISequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:000012B8                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000012B8                                         ; .rdata$r:0000149Co
.data:000012B8                                         ; const type_info::`vftable'
.data:000012BC                 align 10h
.data:000012C0 a_?auisequentia db '.?AUISequentialOutStream@@',0
.data:000012DB                 align 4
.data:000012DB _data           ends
.data:000012DB
.rdata$r:000012DC ; ===========================================================================
.rdata$r:000012DC
.rdata$r:000012DC ; Segment type: Pure data
.rdata$r:000012DC ; Segment permissions: Read
.rdata$r:000012DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012DC                 assume cs:_rdata$r
.rdata$r:000012DC                 ;org 12DCh
.rdata$r:000012DC ; COMDAT (pick any)
.rdata$r:000012DC                 public ??_R3ISequentialOutStream@@8
.rdata$r:000012DC ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000012DC ??_R3ISequentialOutStream@@8 db    0    ; DATA XREF: .rdata$r:000012B4o
.rdata$r:000012DC                                         ; .rdata$r:000014A0o
.rdata$r:000012DD                 db    0
.rdata$r:000012DE                 db    0
.rdata$r:000012DF                 db    0
.rdata$r:000012E0                 db    0
.rdata$r:000012E1                 db    0
.rdata$r:000012E2                 db    0
.rdata$r:000012E3                 db    0
.rdata$r:000012E4                 db    2
.rdata$r:000012E5                 db    0
.rdata$r:000012E6                 db    0
.rdata$r:000012E7                 db    0
.rdata$r:000012E8                 dd offset ??_R2ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:000012E8 _rdata$r        ends
.rdata$r:000012E8
.rdata$r:000012EC ; ===========================================================================
.rdata$r:000012EC
.rdata$r:000012EC ; Segment type: Pure data
.rdata$r:000012EC ; Segment permissions: Read
.rdata$r:000012EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012EC                 assume cs:_rdata$r
.rdata$r:000012EC                 ;org 12ECh
.rdata$r:000012EC ; COMDAT (pick any)
.rdata$r:000012EC                 public ??_R2ISequentialOutStream@@8
.rdata$r:000012EC ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:000012EC ??_R2ISequentialOutStream@@8 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:000012EC                                         ; DATA XREF: .rdata$r:000012E8o
.rdata$r:000012EC                                         ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000012F0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000012F4                 db    0
.rdata$r:000012F5                 align 4
.rdata$r:000012F5 _rdata$r        ends
.rdata$r:000012F5
.text:000012F8 ; ===========================================================================
.text:000012F8
.text:000012F8 ; Segment type: Pure code
.text:000012F8 ; Segment permissions: Read/Execute
.text:000012F8 _text           segment para public 'CODE' use32
.text:000012F8                 assume cs:_text
.text:000012F8                 ;org 12F8h
.text:000012F8 ; COMDAT (pick any)
.text:000012F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000012F8
.text:000012F8 ; =============== S U B R O U T I N E =======================================
.text:000012F8
.text:000012F8 ; Attributes: bp-based frame
.text:000012F8
.text:000012F8 ; __int32 __stdcall CDummyOutStream::QueryInterface(CDummyOutStream *this, const struct _GUID *Buf1, void **)
.text:000012F8                 public ?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z
.text:000012F8 ?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000012F8                                         ; DATA XREF: .rdata:const CDummyOutStream::`vftable'o
.text:000012F8
.text:000012F8 this            = dword ptr  8
.text:000012F8 Buf1            = dword ptr  0Ch
.text:000012F8 arg_8           = dword ptr  10h
.text:000012F8
.text:000012F8                 push    ebp
.text:000012F9                 mov     ebp, esp
.text:000012FB                 mov     eax, [ebp+arg_8]
.text:000012FE                 mov     dword ptr [eax], 0
.text:00001304                 push    offset _IID_IUnknown ; Buf2
.text:00001309                 mov     ecx, [ebp+Buf1]
.text:0000130C                 push    ecx             ; Buf1
.text:0000130D                 call    ___@8           ; __(x,x)
.text:00001312                 test    eax, eax
.text:00001314                 jz      short loc_1320
.text:00001316                 mov     edx, [ebp+arg_8]
.text:00001319                 mov     eax, [ebp+this]
.text:0000131C                 mov     [edx], eax
.text:0000131E                 jmp     short loc_1327
.text:00001320 ; ---------------------------------------------------------------------------
.text:00001320
.text:00001320 loc_1320:                               ; CODE XREF: CDummyOutStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00001320                 mov     eax, 80004002h
.text:00001325                 jmp     short loc_1338
.text:00001327 ; ---------------------------------------------------------------------------
.text:00001327
.text:00001327 loc_1327:                               ; CODE XREF: CDummyOutStream::QueryInterface(_GUID const &,void * *)+26j
.text:00001327                 mov     ecx, [ebp+this]
.text:0000132A                 mov     edx, [ecx+4]
.text:0000132D                 add     edx, 1
.text:00001330                 mov     eax, [ebp+this]
.text:00001333                 mov     [eax+4], edx
.text:00001336                 xor     eax, eax
.text:00001338
.text:00001338 loc_1338:                               ; CODE XREF: CDummyOutStream::QueryInterface(_GUID const &,void * *)+2Dj
.text:00001338                 cmp     ebp, esp
.text:0000133A                 call    __RTC_CheckEsp
.text:0000133F                 pop     ebp
.text:00001340                 retn    0Ch
.text:00001340 ?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:00001340
.text:00001340 ; ---------------------------------------------------------------------------
.text:00001343                 align 4
.text:00001343 _text           ends
.text:00001343
.text:00001344 ; ===========================================================================
.text:00001344
.text:00001344 ; Segment type: Pure code
.text:00001344 ; Segment permissions: Read/Execute
.text:00001344 _text           segment para public 'CODE' use32
.text:00001344                 assume cs:_text
.text:00001344                 ;org 1344h
.text:00001344 ; COMDAT (pick any)
.text:00001344                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001344
.text:00001344 ; =============== S U B R O U T I N E =======================================
.text:00001344
.text:00001344 ; Attributes: bp-based frame
.text:00001344
.text:00001344 ; unsigned __int32 __stdcall CDummyOutStream::AddRef(CDummyOutStream *this)
.text:00001344                 public ?AddRef@CDummyOutStream@@UAGKXZ
.text:00001344 ?AddRef@CDummyOutStream@@UAGKXZ proc near ; DATA XREF: .rdata:0000121Co
.text:00001344
.text:00001344 var_4           = dword ptr -4
.text:00001344 this            = dword ptr  8
.text:00001344
.text:00001344                 push    ebp
.text:00001345                 mov     ebp, esp
.text:00001347                 push    ecx
.text:00001348                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000134F                 mov     eax, [ebp+this]
.text:00001352                 mov     ecx, [eax+4]
.text:00001355                 add     ecx, 1
.text:00001358                 mov     [ebp+var_4], ecx
.text:0000135B                 mov     edx, [ebp+this]
.text:0000135E                 mov     eax, [ebp+var_4]
.text:00001361                 mov     [edx+4], eax
.text:00001364                 mov     eax, [ebp+var_4]
.text:00001367                 mov     esp, ebp
.text:00001369                 pop     ebp
.text:0000136A                 retn    4
.text:0000136A ?AddRef@CDummyOutStream@@UAGKXZ endp
.text:0000136A
.text:0000136A ; ---------------------------------------------------------------------------
.text:0000136D                 align 10h
.text:0000136D _text           ends
.text:0000136D
.text:00001370 ; ===========================================================================
.text:00001370
.text:00001370 ; Segment type: Pure code
.text:00001370 ; Segment permissions: Read/Execute
.text:00001370 _text           segment para public 'CODE' use32
.text:00001370                 assume cs:_text
.text:00001370                 ;org 1370h
.text:00001370 ; COMDAT (pick any)
.text:00001370                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001370
.text:00001370 ; =============== S U B R O U T I N E =======================================
.text:00001370
.text:00001370 ; Attributes: bp-based frame
.text:00001370
.text:00001370 ; unsigned __int32 __stdcall CDummyOutStream::Release(CDummyOutStream *this)
.text:00001370                 public ?Release@CDummyOutStream@@UAGKXZ
.text:00001370 ?Release@CDummyOutStream@@UAGKXZ proc near ; DATA XREF: .rdata:00001220o
.text:00001370
.text:00001370 var_10          = dword ptr -10h
.text:00001370 var_C           = dword ptr -0Ch
.text:00001370 var_8           = dword ptr -8
.text:00001370 var_4           = dword ptr -4
.text:00001370 this            = dword ptr  8
.text:00001370
.text:00001370                 push    ebp
.text:00001371                 mov     ebp, esp
.text:00001373                 sub     esp, 10h
.text:00001376                 mov     eax, 0CCCCCCCCh
.text:0000137B                 mov     [ebp+var_10], eax
.text:0000137E                 mov     [ebp+var_C], eax
.text:00001381                 mov     [ebp+var_8], eax
.text:00001384                 mov     [ebp+var_4], eax
.text:00001387                 mov     eax, [ebp+this]
.text:0000138A                 mov     ecx, [eax+4]
.text:0000138D                 sub     ecx, 1
.text:00001390                 mov     [ebp+var_C], ecx
.text:00001393                 mov     edx, [ebp+this]
.text:00001396                 mov     eax, [ebp+var_C]
.text:00001399                 mov     [edx+4], eax
.text:0000139C                 cmp     [ebp+var_C], 0
.text:000013A0                 jz      short loc_13AA
.text:000013A2                 mov     ecx, [ebp+this]
.text:000013A5                 mov     eax, [ecx+4]
.text:000013A8                 jmp     short loc_13D4
.text:000013AA ; ---------------------------------------------------------------------------
.text:000013AA
.text:000013AA loc_13AA:                               ; CODE XREF: CDummyOutStream::Release(void)+30j
.text:000013AA                 mov     edx, [ebp+this]
.text:000013AD                 mov     [ebp+var_8], edx
.text:000013B0                 mov     eax, [ebp+var_8]
.text:000013B3                 mov     [ebp+var_4], eax
.text:000013B6                 cmp     [ebp+var_4], 0
.text:000013BA                 jz      short loc_13CB
.text:000013BC                 push    1
.text:000013BE                 mov     ecx, [ebp+var_4]
.text:000013C1                 call    ??_GCDummyOutStream@@QAEPAXI@Z ; CDummyOutStream::`scalar deleting destructor'(uint)
.text:000013C6                 mov     [ebp+var_10], eax
.text:000013C9                 jmp     short loc_13D2
.text:000013CB ; ---------------------------------------------------------------------------
.text:000013CB
.text:000013CB loc_13CB:                               ; CODE XREF: CDummyOutStream::Release(void)+4Aj
.text:000013CB                 mov     [ebp+var_10], 0
.text:000013D2
.text:000013D2 loc_13D2:                               ; CODE XREF: CDummyOutStream::Release(void)+59j
.text:000013D2                 xor     eax, eax
.text:000013D4
.text:000013D4 loc_13D4:                               ; CODE XREF: CDummyOutStream::Release(void)+38j
.text:000013D4                 add     esp, 10h
.text:000013D7                 cmp     ebp, esp
.text:000013D9                 call    __RTC_CheckEsp
.text:000013DE                 mov     esp, ebp
.text:000013E0                 pop     ebp
.text:000013E1                 retn    4
.text:000013E1 ?Release@CDummyOutStream@@UAGKXZ endp
.text:000013E1
.text:000013E1 _text           ends
.text:000013E1
.text:000013E4 ; ===========================================================================
.text:000013E4
.text:000013E4 ; Segment type: Pure code
.text:000013E4 ; Segment permissions: Read/Execute
.text:000013E4 _text           segment para public 'CODE' use32
.text:000013E4                 assume cs:_text
.text:000013E4                 ;org 13E4h
.text:000013E4 ; COMDAT (pick any)
.text:000013E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000013E4
.text:000013E4 ; =============== S U B R O U T I N E =======================================
.text:000013E4
.text:000013E4 ; Attributes: bp-based frame
.text:000013E4
.text:000013E4 ; public: void * __thiscall CDummyOutStream::`scalar deleting destructor'(unsigned int)
.text:000013E4                 public ??_GCDummyOutStream@@QAEPAXI@Z
.text:000013E4 ??_GCDummyOutStream@@QAEPAXI@Z proc near
.text:000013E4                                         ; CODE XREF: CDummyOutStream::Release(void)+51p
.text:000013E4
.text:000013E4 var_4           = dword ptr -4
.text:000013E4 arg_0           = dword ptr  8
.text:000013E4
.text:000013E4                 push    ebp
.text:000013E5                 mov     ebp, esp
.text:000013E7                 push    ecx
.text:000013E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000013EF                 mov     [ebp+var_4], ecx
.text:000013F2                 mov     ecx, [ebp+var_4] ; this
.text:000013F5                 call    ??1CDummyOutStream@@QAE@XZ ; CDummyOutStream::~CDummyOutStream(void)
.text:000013FA                 mov     eax, [ebp+arg_0]
.text:000013FD                 and     eax, 1
.text:00001400                 jz      short loc_140E
.text:00001402                 mov     ecx, [ebp+var_4]
.text:00001405                 push    ecx             ; void *
.text:00001406                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000140B                 add     esp, 4
.text:0000140E
.text:0000140E loc_140E:                               ; CODE XREF: CDummyOutStream::`scalar deleting destructor'(uint)+1Cj
.text:0000140E                 mov     eax, [ebp+var_4]
.text:00001411                 add     esp, 4
.text:00001414                 cmp     ebp, esp
.text:00001416                 call    __RTC_CheckEsp
.text:0000141B                 mov     esp, ebp
.text:0000141D                 pop     ebp
.text:0000141E                 retn    4
.text:0000141E ??_GCDummyOutStream@@QAEPAXI@Z endp
.text:0000141E
.text:0000141E ; ---------------------------------------------------------------------------
.text:00001421                 align 4
.text:00001421 _text           ends
.text:00001421
.text:00001424 ; ===========================================================================
.text:00001424
.text:00001424 ; Segment type: Pure code
.text:00001424 ; Segment permissions: Read/Execute
.text:00001424 _text           segment para public 'CODE' use32
.text:00001424                 assume cs:_text
.text:00001424                 ;org 1424h
.text:00001424 ; COMDAT (pick any)
.text:00001424                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001424
.text:00001424 ; =============== S U B R O U T I N E =======================================
.text:00001424
.text:00001424 ; Attributes: bp-based frame
.text:00001424
.text:00001424 ; _DWORD __thiscall CDummyOutStream::~CDummyOutStream(CDummyOutStream *__hidden this)
.text:00001424                 public ??1CDummyOutStream@@QAE@XZ
.text:00001424 ??1CDummyOutStream@@QAE@XZ proc near    ; CODE XREF: CDummyOutStream::`scalar deleting destructor'(uint)+11p
.text:00001424
.text:00001424 var_4           = dword ptr -4
.text:00001424
.text:00001424                 push    ebp
.text:00001425                 mov     ebp, esp
.text:00001427                 push    ecx
.text:00001428                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000142F                 mov     [ebp+var_4], ecx
.text:00001432                 mov     ecx, [ebp+var_4]
.text:00001435                 add     ecx, 8
.text:00001438                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000143D                 add     esp, 4
.text:00001440                 cmp     ebp, esp
.text:00001442                 call    __RTC_CheckEsp
.text:00001447                 mov     esp, ebp
.text:00001449                 pop     ebp
.text:0000144A                 retn
.text:0000144A ??1CDummyOutStream@@QAE@XZ endp
.text:0000144A
.text:0000144A ; ---------------------------------------------------------------------------
.text:0000144B                 align 4
.text:0000144B _text           ends
.text:0000144B
.text:0000144C ; ===========================================================================
.text:0000144C
.text:0000144C ; Segment type: Pure code
.text:0000144C ; Segment permissions: Read/Execute
.text:0000144C _text           segment para public 'CODE' use32
.text:0000144C                 assume cs:_text
.text:0000144C                 ;org 144Ch
.text:0000144C ; COMDAT (pick any)
.text:0000144C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000144C
.text:0000144C ; =============== S U B R O U T I N E =======================================
.text:0000144C
.text:0000144C ; Attributes: bp-based frame
.text:0000144C
.text:0000144C ; _DWORD __thiscall ISequentialOutStream::ISequentialOutStream(ISequentialOutStream *__hidden this)
.text:0000144C                 public ??0ISequentialOutStream@@QAE@XZ
.text:0000144C ??0ISequentialOutStream@@QAE@XZ proc near
.text:0000144C                                         ; CODE XREF: CDummyOutStream::CDummyOutStream(void)+11p
.text:0000144C
.text:0000144C var_4           = dword ptr -4
.text:0000144C
.text:0000144C                 push    ebp
.text:0000144D                 mov     ebp, esp
.text:0000144F                 push    ecx
.text:00001450                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001457                 mov     [ebp+var_4], ecx
.text:0000145A                 mov     ecx, [ebp+var_4]
.text:0000145D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00001462                 mov     eax, [ebp+var_4]
.text:00001465                 mov     dword ptr [eax], offset ??_7ISequentialOutStream@@6B@ ; const ISequentialOutStream::`vftable'
.text:0000146B                 mov     eax, [ebp+var_4]
.text:0000146E                 add     esp, 4
.text:00001471                 cmp     ebp, esp
.text:00001473                 call    __RTC_CheckEsp
.text:00001478                 mov     esp, ebp
.text:0000147A                 pop     ebp
.text:0000147B                 retn
.text:0000147B ??0ISequentialOutStream@@QAE@XZ endp
.text:0000147B
.text:0000147B _text           ends
.text:0000147B
.rdata:0000147C ; ===========================================================================
.rdata:0000147C
.rdata:0000147C ; Segment type: Pure data
.rdata:0000147C ; Segment permissions: Read
.rdata:0000147C _rdata          segment dword public 'DATA' use32
.rdata:0000147C                 assume cs:_rdata
.rdata:0000147C                 ;org 147Ch
.rdata:0000147C ; COMDAT (pick largest)
.rdata:0000147C                 dd offset ??_R4ISequentialOutStream@@6B@ ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata:00001480                 public ??_7ISequentialOutStream@@6B@
.rdata:00001480 ; const ISequentialOutStream::`vftable'
.rdata:00001480 ??_7ISequentialOutStream@@6B@ dd offset __purecall
.rdata:00001480                                         ; DATA XREF: ISequentialOutStream::ISequentialOutStream(void)+19o
.rdata:00001484                 dd offset __purecall
.rdata:00001488                 dd offset __purecall
.rdata:0000148C                 dd offset __purecall
.rdata:0000148C _rdata          ends
.rdata:0000148C
.rdata$r:00001490 ; ===========================================================================
.rdata$r:00001490
.rdata$r:00001490 ; Segment type: Pure data
.rdata$r:00001490 ; Segment permissions: Read
.rdata$r:00001490 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001490                 assume cs:_rdata$r
.rdata$r:00001490                 ;org 1490h
.rdata$r:00001490 ; COMDAT (pick any)
.rdata$r:00001490                 public ??_R4ISequentialOutStream@@6B@
.rdata$r:00001490 ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:00001490 ??_R4ISequentialOutStream@@6B@ db    0  ; DATA XREF: .rdata:0000147Co
.rdata$r:00001491                 db    0
.rdata$r:00001492                 db    0
.rdata$r:00001493                 db    0
.rdata$r:00001494                 db    0
.rdata$r:00001495                 db    0
.rdata$r:00001496                 db    0
.rdata$r:00001497                 db    0
.rdata$r:00001498                 db    0
.rdata$r:00001499                 db    0
.rdata$r:0000149A                 db    0
.rdata$r:0000149B                 db    0
.rdata$r:0000149C                 dd offset ??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:000014A0                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000014A0 _rdata$r        ends
.rdata$r:000014A0
.text:000014A4 ; ===========================================================================
.text:000014A4
.text:000014A4 ; Segment type: Pure code
.text:000014A4 ; Segment permissions: Read/Execute
.text:000014A4 _text           segment para public 'CODE' use32
.text:000014A4                 assume cs:_text
.text:000014A4                 ;org 14A4h
.text:000014A4 ; COMDAT (pick any)
.text:000014A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000014A4
.text:000014A4 ; =============== S U B R O U T I N E =======================================
.text:000014A4
.text:000014A4 ; Attributes: bp-based frame
.text:000014A4
.text:000014A4 ; _DWORD __thiscall NArchive::NZ::CHandler::CHandler(NArchive::NZ::CHandler *__hidden this)
.text:000014A4                 public ??0CHandler@NZ@NArchive@@QAE@XZ
.text:000014A4 ??0CHandler@NZ@NArchive@@QAE@XZ proc near
.text:000014A4                                         ; CODE XREF: NArchive::NZ::CreateArc(void)+57p
.text:000014A4
.text:000014A4 var_4           = dword ptr -4
.text:000014A4
.text:000014A4                 push    ebp
.text:000014A5                 mov     ebp, esp
.text:000014A7                 push    ecx
.text:000014A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014AF                 mov     [ebp+var_4], ecx
.text:000014B2                 mov     ecx, [ebp+var_4] ; this
.text:000014B5                 call    ??0IInArchive@@QAE@XZ ; IInArchive::IInArchive(void)
.text:000014BA                 mov     ecx, [ebp+var_4]
.text:000014BD                 add     ecx, 4          ; this
.text:000014C0                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000014C5                 mov     eax, [ebp+var_4]
.text:000014C8                 mov     dword ptr [eax], offset ??_7CHandler@NZ@NArchive@@6B@ ; const NArchive::NZ::CHandler::`vftable'
.text:000014CE                 mov     ecx, [ebp+var_4]
.text:000014D1                 add     ecx, 8
.text:000014D4                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:000014D9                 mov     eax, [ebp+var_4]
.text:000014DC                 add     esp, 4
.text:000014DF                 cmp     ebp, esp
.text:000014E1                 call    __RTC_CheckEsp
.text:000014E6                 mov     esp, ebp
.text:000014E8                 pop     ebp
.text:000014E9                 retn
.text:000014E9 ??0CHandler@NZ@NArchive@@QAE@XZ endp
.text:000014E9
.text:000014E9 ; ---------------------------------------------------------------------------
.text:000014EA                 align 4
.text:000014EA _text           ends
.text:000014EA
.rdata:000014EC ; ===========================================================================
.rdata:000014EC
.rdata:000014EC ; Segment type: Pure data
.rdata:000014EC ; Segment permissions: Read
.rdata:000014EC _rdata          segment dword public 'DATA' use32
.rdata:000014EC                 assume cs:_rdata
.rdata:000014EC                 ;org 14ECh
.rdata:000014EC ; COMDAT (pick largest)
.rdata:000014EC                 dd offset ??_R4CHandler@NZ@NArchive@@6B@ ; const NArchive::NZ::CHandler::`RTTI Complete Object Locator'
.rdata:000014F0                 public ??_7CHandler@NZ@NArchive@@6B@
.rdata:000014F0 ; const NArchive::NZ::CHandler::`vftable'
.rdata:000014F0 ??_7CHandler@NZ@NArchive@@6B@ dd offset ?QueryInterface@CHandler@NZ@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:000014F0                                         ; DATA XREF: NArchive::NZ::CHandler::CHandler(void)+24o
.rdata:000014F0                                         ; NArchive::NZ::CHandler::QueryInterface(_GUID const &,void * *)
.rdata:000014F4                 dd offset ?AddRef@CHandler@NZ@NArchive@@UAGKXZ ; NArchive::NZ::CHandler::AddRef(void)
.rdata:000014F8                 dd offset ?Release@CHandler@NZ@NArchive@@UAGKXZ ; NArchive::NZ::CHandler::Release(void)
.rdata:000014FC                 dd offset ?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ; NArchive::NZ::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)
.rdata:00001500                 dd offset ?Close@CHandler@NZ@NArchive@@UAGJXZ ; NArchive::NZ::CHandler::Close(void)
.rdata:00001504                 dd offset ?GetNumberOfItems@CHandler@NZ@NArchive@@UAGJPAI@Z ; NArchive::NZ::CHandler::GetNumberOfItems(uint *)
.rdata:00001508                 dd offset ?GetProperty@CHandler@NZ@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ; NArchive::NZ::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)
.rdata:0000150C                 dd offset ?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ; NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)
.rdata:00001510                 dd offset ?GetArchiveProperty@CHandler@NZ@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ; NArchive::NZ::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)
.rdata:00001514                 dd offset ?GetNumberOfProperties@CHandler@NZ@NArchive@@UAGJPAI@Z ; NArchive::NZ::CHandler::GetNumberOfProperties(uint *)
.rdata:00001518                 dd offset ?GetPropertyInfo@CHandler@NZ@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NZ::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)
.rdata:0000151C                 dd offset ?GetNumberOfArchiveProperties@CHandler@NZ@NArchive@@UAGJPAI@Z ; NArchive::NZ::CHandler::GetNumberOfArchiveProperties(uint *)
.rdata:00001520                 dd offset ?GetArchivePropertyInfo@CHandler@NZ@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NZ::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)
.rdata:00001520 _rdata          ends
.rdata:00001520
.rdata$r:00001524 ; ===========================================================================
.rdata$r:00001524
.rdata$r:00001524 ; Segment type: Pure data
.rdata$r:00001524 ; Segment permissions: Read
.rdata$r:00001524 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001524                 assume cs:_rdata$r
.rdata$r:00001524                 ;org 1524h
.rdata$r:00001524 ; COMDAT (pick any)
.rdata$r:00001524                 public ??_R4CHandler@NZ@NArchive@@6B@
.rdata$r:00001524 ; const NArchive::NZ::CHandler::`RTTI Complete Object Locator'
.rdata$r:00001524 ??_R4CHandler@NZ@NArchive@@6B@ db    0  ; DATA XREF: .rdata:000014ECo
.rdata$r:00001525                 db    0
.rdata$r:00001526                 db    0
.rdata$r:00001527                 db    0
.rdata$r:00001528                 db    0
.rdata$r:00001529                 db    0
.rdata$r:0000152A                 db    0
.rdata$r:0000152B                 db    0
.rdata$r:0000152C                 db    0
.rdata$r:0000152D                 db    0
.rdata$r:0000152E                 db    0
.rdata$r:0000152F                 db    0
.rdata$r:00001530                 dd offset ??_R0?AVCHandler@NZ@NArchive@@@8 ; NArchive::NZ::CHandler `RTTI Type Descriptor'
.rdata$r:00001534                 dd offset ??_R3CHandler@NZ@NArchive@@8 ; NArchive::NZ::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001534 _rdata$r        ends
.rdata$r:00001534
.data:00001538 ; ===========================================================================
.data:00001538
.data:00001538 ; Segment type: Pure data
.data:00001538 ; Segment permissions: Read/Write
.data:00001538 _data           segment dword public 'DATA' use32
.data:00001538                 assume cs:_data
.data:00001538                 ;org 1538h
.data:00001538 ; COMDAT (pick any)
.data:00001538                 public ??_R0?AVCHandler@NZ@NArchive@@@8
.data:00001538 ; class NArchive::NZ::CHandler `RTTI Type Descriptor'
.data:00001538 ??_R0?AVCHandler@NZ@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00001538                                         ; DATA XREF: .rdata$r:00001530o
.data:00001538                                         ; .rdata$r:NArchive::NZ::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001538                                         ; const type_info::`vftable'
.data:0000153C                 align 10h
.data:00001540 a_?avchandler@n db '.?AVCHandler@NZ@NArchive@@',0
.data:0000155B                 align 4
.data:0000155B _data           ends
.data:0000155B
.rdata$r:0000155C ; ===========================================================================
.rdata$r:0000155C
.rdata$r:0000155C ; Segment type: Pure data
.rdata$r:0000155C ; Segment permissions: Read
.rdata$r:0000155C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000155C                 assume cs:_rdata$r
.rdata$r:0000155C                 ;org 155Ch
.rdata$r:0000155C ; COMDAT (pick any)
.rdata$r:0000155C                 public ??_R3CHandler@NZ@NArchive@@8
.rdata$r:0000155C ; NArchive::NZ::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000155C ??_R3CHandler@NZ@NArchive@@8 db    0    ; DATA XREF: .rdata$r:00001534o
.rdata$r:0000155C                                         ; .rdata$r:00001598o
.rdata$r:0000155D                 db    0
.rdata$r:0000155E                 db    0
.rdata$r:0000155F                 db    0
.rdata$r:00001560                 db    1
.rdata$r:00001561                 db    0
.rdata$r:00001562                 db    0
.rdata$r:00001563                 db    0
.rdata$r:00001564                 db    4
.rdata$r:00001565                 db    0
.rdata$r:00001566                 db    0
.rdata$r:00001567                 db    0
.rdata$r:00001568                 dd offset ??_R2CHandler@NZ@NArchive@@8 ; NArchive::NZ::CHandler::`RTTI Base Class Array'
.rdata$r:00001568 _rdata$r        ends
.rdata$r:00001568
.rdata$r:0000156C ; ===========================================================================
.rdata$r:0000156C
.rdata$r:0000156C ; Segment type: Pure data
.rdata$r:0000156C ; Segment permissions: Read
.rdata$r:0000156C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000156C                 assume cs:_rdata$r
.rdata$r:0000156C                 ;org 156Ch
.rdata$r:0000156C ; COMDAT (pick any)
.rdata$r:0000156C                 public ??_R2CHandler@NZ@NArchive@@8
.rdata$r:0000156C ; NArchive::NZ::CHandler::`RTTI Base Class Array'
.rdata$r:0000156C ??_R2CHandler@NZ@NArchive@@8 dd offset ??_R1A@?0A@EA@CHandler@NZ@NArchive@@8
.rdata$r:0000156C                                         ; DATA XREF: .rdata$r:00001568o
.rdata$r:0000156C                                         ; NArchive::NZ::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001570                 dd offset ??_R1A@?0A@EA@IInArchive@@8 ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001574                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001578                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000157C                 db    0
.rdata$r:0000157D                 align 10h
.rdata$r:0000157D _rdata$r        ends
.rdata$r:0000157D
.rdata$r:00001580 ; ===========================================================================
.rdata$r:00001580
.rdata$r:00001580 ; Segment type: Pure data
.rdata$r:00001580 ; Segment permissions: Read
.rdata$r:00001580 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001580                 assume cs:_rdata$r
.rdata$r:00001580                 ;org 1580h
.rdata$r:00001580 ; COMDAT (pick any)
.rdata$r:00001580                 public ??_R1A@?0A@EA@CHandler@NZ@NArchive@@8
.rdata$r:00001580 ; NArchive::NZ::CHandler::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001580 ??_R1A@?0A@EA@CHandler@NZ@NArchive@@8 dd offset ??_R0?AVCHandler@NZ@NArchive@@@8
.rdata$r:00001580                                         ; DATA XREF: .rdata$r:NArchive::NZ::CHandler::`RTTI Base Class Array'o
.rdata$r:00001580                                         ; NArchive::NZ::CHandler `RTTI Type Descriptor'
.rdata$r:00001584                 db    3
.rdata$r:00001585                 db    0
.rdata$r:00001586                 db    0
.rdata$r:00001587                 db    0
.rdata$r:00001588                 db    0
.rdata$r:00001589                 db    0
.rdata$r:0000158A                 db    0
.rdata$r:0000158B                 db    0
.rdata$r:0000158C                 db 0FFh
.rdata$r:0000158D                 db 0FFh
.rdata$r:0000158E                 db 0FFh
.rdata$r:0000158F                 db 0FFh
.rdata$r:00001590                 db    0
.rdata$r:00001591                 db    0
.rdata$r:00001592                 db    0
.rdata$r:00001593                 db    0
.rdata$r:00001594                 db  40h ; @
.rdata$r:00001595                 db    0
.rdata$r:00001596                 db    0
.rdata$r:00001597                 db    0
.rdata$r:00001598                 dd offset ??_R3CHandler@NZ@NArchive@@8 ; NArchive::NZ::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001598 _rdata$r        ends
.rdata$r:00001598
.rdata$r:0000159C ; ===========================================================================
.rdata$r:0000159C
.rdata$r:0000159C ; Segment type: Pure data
.rdata$r:0000159C ; Segment permissions: Read
.rdata$r:0000159C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000159C                 assume cs:_rdata$r
.rdata$r:0000159C                 ;org 159Ch
.rdata$r:0000159C ; COMDAT (pick any)
.rdata$r:0000159C                 public ??_R1A@?0A@EA@IInArchive@@8
.rdata$r:0000159C ; IInArchive::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000159C ??_R1A@?0A@EA@IInArchive@@8 dd offset ??_R0?AUIInArchive@@@8
.rdata$r:0000159C                                         ; DATA XREF: .rdata$r:00001570o
.rdata$r:0000159C                                         ; .rdata$r:IInArchive::`RTTI Base Class Array'o
.rdata$r:0000159C                                         ; IInArchive `RTTI Type Descriptor'
.rdata$r:000015A0                 db    1
.rdata$r:000015A1                 db    0
.rdata$r:000015A2                 db    0
.rdata$r:000015A3                 db    0
.rdata$r:000015A4                 db    0
.rdata$r:000015A5                 db    0
.rdata$r:000015A6                 db    0
.rdata$r:000015A7                 db    0
.rdata$r:000015A8                 db 0FFh
.rdata$r:000015A9                 db 0FFh
.rdata$r:000015AA                 db 0FFh
.rdata$r:000015AB                 db 0FFh
.rdata$r:000015AC                 db    0
.rdata$r:000015AD                 db    0
.rdata$r:000015AE                 db    0
.rdata$r:000015AF                 db    0
.rdata$r:000015B0                 db  40h ; @
.rdata$r:000015B1                 db    0
.rdata$r:000015B2                 db    0
.rdata$r:000015B3                 db    0
.rdata$r:000015B4                 dd offset ??_R3IInArchive@@8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000015B4 _rdata$r        ends
.rdata$r:000015B4
.data:000015B8 ; ===========================================================================
.data:000015B8
.data:000015B8 ; Segment type: Pure data
.data:000015B8 ; Segment permissions: Read/Write
.data:000015B8 _data           segment dword public 'DATA' use32
.data:000015B8                 assume cs:_data
.data:000015B8                 ;org 15B8h
.data:000015B8 ; COMDAT (pick any)
.data:000015B8                 public ??_R0?AUIInArchive@@@8
.data:000015B8 ; struct IInArchive `RTTI Type Descriptor'
.data:000015B8 ??_R0?AUIInArchive@@@8 dd offset ??_7type_info@@6B@
.data:000015B8                                         ; DATA XREF: .rdata$r:IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000015B8                                         ; .rdata$r:000017D4o
.data:000015B8                                         ; const type_info::`vftable'
.data:000015BC                 align 10h
.data:000015C0 a_?auiinarchive db '.?AUIInArchive@@',0
.data:000015D1                 align 4
.data:000015D1 _data           ends
.data:000015D1
.rdata$r:000015D4 ; ===========================================================================
.rdata$r:000015D4
.rdata$r:000015D4 ; Segment type: Pure data
.rdata$r:000015D4 ; Segment permissions: Read
.rdata$r:000015D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000015D4                 assume cs:_rdata$r
.rdata$r:000015D4                 ;org 15D4h
.rdata$r:000015D4 ; COMDAT (pick any)
.rdata$r:000015D4                 public ??_R3IInArchive@@8
.rdata$r:000015D4 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000015D4 ??_R3IInArchive@@8 db    0              ; DATA XREF: .rdata$r:000015B4o
.rdata$r:000015D4                                         ; .rdata$r:000017D8o
.rdata$r:000015D5                 db    0
.rdata$r:000015D6                 db    0
.rdata$r:000015D7                 db    0
.rdata$r:000015D8                 db    0
.rdata$r:000015D9                 db    0
.rdata$r:000015DA                 db    0
.rdata$r:000015DB                 db    0
.rdata$r:000015DC                 db    2
.rdata$r:000015DD                 db    0
.rdata$r:000015DE                 db    0
.rdata$r:000015DF                 db    0
.rdata$r:000015E0                 dd offset ??_R2IInArchive@@8 ; IInArchive::`RTTI Base Class Array'
.rdata$r:000015E0 _rdata$r        ends
.rdata$r:000015E0
.rdata$r:000015E4 ; ===========================================================================
.rdata$r:000015E4
.rdata$r:000015E4 ; Segment type: Pure data
.rdata$r:000015E4 ; Segment permissions: Read
.rdata$r:000015E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000015E4                 assume cs:_rdata$r
.rdata$r:000015E4                 ;org 15E4h
.rdata$r:000015E4 ; COMDAT (pick any)
.rdata$r:000015E4                 public ??_R2IInArchive@@8
.rdata$r:000015E4 ; IInArchive::`RTTI Base Class Array'
.rdata$r:000015E4 ??_R2IInArchive@@8 dd offset ??_R1A@?0A@EA@IInArchive@@8
.rdata$r:000015E4                                         ; DATA XREF: .rdata$r:000015E0o
.rdata$r:000015E4                                         ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000015E8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000015EC                 db    0
.rdata$r:000015ED                 align 10h
.rdata$r:000015ED _rdata$r        ends
.rdata$r:000015ED
.text:000015F0 ; ===========================================================================
.text:000015F0
.text:000015F0 ; Segment type: Pure code
.text:000015F0 ; Segment permissions: Read/Execute
.text:000015F0 _text           segment para public 'CODE' use32
.text:000015F0                 assume cs:_text
.text:000015F0                 ;org 15F0h
.text:000015F0 ; COMDAT (pick any)
.text:000015F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000015F0
.text:000015F0 ; =============== S U B R O U T I N E =======================================
.text:000015F0
.text:000015F0 ; Attributes: bp-based frame
.text:000015F0
.text:000015F0 ; __int32 __stdcall NArchive::NZ::CHandler::QueryInterface(NArchive::NZ::CHandler *this, const struct _GUID *Buf1, void **)
.text:000015F0                 public ?QueryInterface@CHandler@NZ@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:000015F0 ?QueryInterface@CHandler@NZ@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000015F0                                         ; DATA XREF: .rdata:const NArchive::NZ::CHandler::`vftable'o
.text:000015F0
.text:000015F0 this            = dword ptr  8
.text:000015F0 Buf1            = dword ptr  0Ch
.text:000015F0 arg_8           = dword ptr  10h
.text:000015F0
.text:000015F0                 push    ebp
.text:000015F1                 mov     ebp, esp
.text:000015F3                 mov     eax, [ebp+arg_8]
.text:000015F6                 mov     dword ptr [eax], 0
.text:000015FC                 push    offset _IID_IUnknown ; Buf2
.text:00001601                 mov     ecx, [ebp+Buf1]
.text:00001604                 push    ecx             ; Buf1
.text:00001605                 call    ___@8           ; __(x,x)
.text:0000160A                 test    eax, eax
.text:0000160C                 jz      short loc_1618
.text:0000160E                 mov     edx, [ebp+arg_8]
.text:00001611                 mov     eax, [ebp+this]
.text:00001614                 mov     [edx], eax
.text:00001616                 jmp     short loc_163B
.text:00001618 ; ---------------------------------------------------------------------------
.text:00001618
.text:00001618 loc_1618:                               ; CODE XREF: NArchive::NZ::CHandler::QueryInterface(_GUID const &,void * *)+1Cj
.text:00001618                 push    offset _IID_IInArchive ; Buf2
.text:0000161D                 mov     ecx, [ebp+Buf1]
.text:00001620                 push    ecx             ; Buf1
.text:00001621                 call    ___@8           ; __(x,x)
.text:00001626                 test    eax, eax
.text:00001628                 jz      short loc_1634
.text:0000162A                 mov     edx, [ebp+arg_8]
.text:0000162D                 mov     eax, [ebp+this]
.text:00001630                 mov     [edx], eax
.text:00001632                 jmp     short loc_163B
.text:00001634 ; ---------------------------------------------------------------------------
.text:00001634
.text:00001634 loc_1634:                               ; CODE XREF: NArchive::NZ::CHandler::QueryInterface(_GUID const &,void * *)+38j
.text:00001634                 mov     eax, 80004002h
.text:00001639                 jmp     short loc_164C
.text:0000163B ; ---------------------------------------------------------------------------
.text:0000163B
.text:0000163B loc_163B:                               ; CODE XREF: NArchive::NZ::CHandler::QueryInterface(_GUID const &,void * *)+26j
.text:0000163B                                         ; NArchive::NZ::CHandler::QueryInterface(_GUID const &,void * *)+42j
.text:0000163B                 mov     ecx, [ebp+this]
.text:0000163E                 mov     edx, [ecx+4]
.text:00001641                 add     edx, 1
.text:00001644                 mov     eax, [ebp+this]
.text:00001647                 mov     [eax+4], edx
.text:0000164A                 xor     eax, eax
.text:0000164C
.text:0000164C loc_164C:                               ; CODE XREF: NArchive::NZ::CHandler::QueryInterface(_GUID const &,void * *)+49j
.text:0000164C                 cmp     ebp, esp
.text:0000164E                 call    __RTC_CheckEsp
.text:00001653                 pop     ebp
.text:00001654                 retn    0Ch
.text:00001654 ?QueryInterface@CHandler@NZ@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:00001654
.text:00001654 ; ---------------------------------------------------------------------------
.text:00001657                 align 4
.text:00001657 _text           ends
.text:00001657
.text:00001658 ; ===========================================================================
.text:00001658
.text:00001658 ; Segment type: Pure code
.text:00001658 ; Segment permissions: Read/Execute
.text:00001658 _text           segment para public 'CODE' use32
.text:00001658                 assume cs:_text
.text:00001658                 ;org 1658h
.text:00001658 ; COMDAT (pick any)
.text:00001658                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001658
.text:00001658 ; =============== S U B R O U T I N E =======================================
.text:00001658
.text:00001658 ; Attributes: bp-based frame
.text:00001658
.text:00001658 ; unsigned __int32 __stdcall NArchive::NZ::CHandler::AddRef(NArchive::NZ::CHandler *this)
.text:00001658                 public ?AddRef@CHandler@NZ@NArchive@@UAGKXZ
.text:00001658 ?AddRef@CHandler@NZ@NArchive@@UAGKXZ proc near ; DATA XREF: .rdata:000014F4o
.text:00001658
.text:00001658 var_4           = dword ptr -4
.text:00001658 this            = dword ptr  8
.text:00001658
.text:00001658                 push    ebp
.text:00001659                 mov     ebp, esp
.text:0000165B                 push    ecx
.text:0000165C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001663                 mov     eax, [ebp+this]
.text:00001666                 mov     ecx, [eax+4]
.text:00001669                 add     ecx, 1
.text:0000166C                 mov     [ebp+var_4], ecx
.text:0000166F                 mov     edx, [ebp+this]
.text:00001672                 mov     eax, [ebp+var_4]
.text:00001675                 mov     [edx+4], eax
.text:00001678                 mov     eax, [ebp+var_4]
.text:0000167B                 mov     esp, ebp
.text:0000167D                 pop     ebp
.text:0000167E                 retn    4
.text:0000167E ?AddRef@CHandler@NZ@NArchive@@UAGKXZ endp
.text:0000167E
.text:0000167E ; ---------------------------------------------------------------------------
.text:00001681                 align 4
.text:00001681 _text           ends
.text:00001681
.text:00001684 ; ===========================================================================
.text:00001684
.text:00001684 ; Segment type: Pure code
.text:00001684 ; Segment permissions: Read/Execute
.text:00001684 _text           segment para public 'CODE' use32
.text:00001684                 assume cs:_text
.text:00001684                 ;org 1684h
.text:00001684 ; COMDAT (pick any)
.text:00001684                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001684
.text:00001684 ; =============== S U B R O U T I N E =======================================
.text:00001684
.text:00001684 ; Attributes: bp-based frame
.text:00001684
.text:00001684 ; unsigned __int32 __stdcall NArchive::NZ::CHandler::Release(NArchive::NZ::CHandler *this)
.text:00001684                 public ?Release@CHandler@NZ@NArchive@@UAGKXZ
.text:00001684 ?Release@CHandler@NZ@NArchive@@UAGKXZ proc near ; DATA XREF: .rdata:000014F8o
.text:00001684
.text:00001684 var_10          = dword ptr -10h
.text:00001684 var_C           = dword ptr -0Ch
.text:00001684 var_8           = dword ptr -8
.text:00001684 var_4           = dword ptr -4
.text:00001684 this            = dword ptr  8
.text:00001684
.text:00001684                 push    ebp
.text:00001685                 mov     ebp, esp
.text:00001687                 sub     esp, 10h
.text:0000168A                 mov     eax, 0CCCCCCCCh
.text:0000168F                 mov     [ebp+var_10], eax
.text:00001692                 mov     [ebp+var_C], eax
.text:00001695                 mov     [ebp+var_8], eax
.text:00001698                 mov     [ebp+var_4], eax
.text:0000169B                 mov     eax, [ebp+this]
.text:0000169E                 mov     ecx, [eax+4]
.text:000016A1                 sub     ecx, 1
.text:000016A4                 mov     [ebp+var_C], ecx
.text:000016A7                 mov     edx, [ebp+this]
.text:000016AA                 mov     eax, [ebp+var_C]
.text:000016AD                 mov     [edx+4], eax
.text:000016B0                 cmp     [ebp+var_C], 0
.text:000016B4                 jz      short loc_16BE
.text:000016B6                 mov     ecx, [ebp+this]
.text:000016B9                 mov     eax, [ecx+4]
.text:000016BC                 jmp     short loc_16E8
.text:000016BE ; ---------------------------------------------------------------------------
.text:000016BE
.text:000016BE loc_16BE:                               ; CODE XREF: NArchive::NZ::CHandler::Release(void)+30j
.text:000016BE                 mov     edx, [ebp+this]
.text:000016C1                 mov     [ebp+var_8], edx
.text:000016C4                 mov     eax, [ebp+var_8]
.text:000016C7                 mov     [ebp+var_4], eax
.text:000016CA                 cmp     [ebp+var_4], 0
.text:000016CE                 jz      short loc_16DF
.text:000016D0                 push    1
.text:000016D2                 mov     ecx, [ebp+var_4]
.text:000016D5                 call    ??_GCHandler@NZ@NArchive@@QAEPAXI@Z ; NArchive::NZ::CHandler::`scalar deleting destructor'(uint)
.text:000016DA                 mov     [ebp+var_10], eax
.text:000016DD                 jmp     short loc_16E6
.text:000016DF ; ---------------------------------------------------------------------------
.text:000016DF
.text:000016DF loc_16DF:                               ; CODE XREF: NArchive::NZ::CHandler::Release(void)+4Aj
.text:000016DF                 mov     [ebp+var_10], 0
.text:000016E6
.text:000016E6 loc_16E6:                               ; CODE XREF: NArchive::NZ::CHandler::Release(void)+59j
.text:000016E6                 xor     eax, eax
.text:000016E8
.text:000016E8 loc_16E8:                               ; CODE XREF: NArchive::NZ::CHandler::Release(void)+38j
.text:000016E8                 add     esp, 10h
.text:000016EB                 cmp     ebp, esp
.text:000016ED                 call    __RTC_CheckEsp
.text:000016F2                 mov     esp, ebp
.text:000016F4                 pop     ebp
.text:000016F5                 retn    4
.text:000016F5 ?Release@CHandler@NZ@NArchive@@UAGKXZ endp
.text:000016F5
.text:000016F5 _text           ends
.text:000016F5
.text:000016F8 ; ===========================================================================
.text:000016F8
.text:000016F8 ; Segment type: Pure code
.text:000016F8 ; Segment permissions: Read/Execute
.text:000016F8 _text           segment para public 'CODE' use32
.text:000016F8                 assume cs:_text
.text:000016F8                 ;org 16F8h
.text:000016F8 ; COMDAT (pick any)
.text:000016F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000016F8
.text:000016F8 ; =============== S U B R O U T I N E =======================================
.text:000016F8
.text:000016F8 ; Attributes: bp-based frame
.text:000016F8
.text:000016F8 ; public: void * __thiscall NArchive::NZ::CHandler::`scalar deleting destructor'(unsigned int)
.text:000016F8                 public ??_GCHandler@NZ@NArchive@@QAEPAXI@Z
.text:000016F8 ??_GCHandler@NZ@NArchive@@QAEPAXI@Z proc near
.text:000016F8                                         ; CODE XREF: NArchive::NZ::CHandler::Release(void)+51p
.text:000016F8
.text:000016F8 var_4           = dword ptr -4
.text:000016F8 arg_0           = dword ptr  8
.text:000016F8
.text:000016F8                 push    ebp
.text:000016F9                 mov     ebp, esp
.text:000016FB                 push    ecx
.text:000016FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001703                 mov     [ebp+var_4], ecx
.text:00001706                 mov     ecx, [ebp+var_4] ; this
.text:00001709                 call    ??1CHandler@NZ@NArchive@@QAE@XZ ; NArchive::NZ::CHandler::~CHandler(void)
.text:0000170E                 mov     eax, [ebp+arg_0]
.text:00001711                 and     eax, 1
.text:00001714                 jz      short loc_1722
.text:00001716                 mov     ecx, [ebp+var_4]
.text:00001719                 push    ecx             ; void *
.text:0000171A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000171F                 add     esp, 4
.text:00001722
.text:00001722 loc_1722:                               ; CODE XREF: NArchive::NZ::CHandler::`scalar deleting destructor'(uint)+1Cj
.text:00001722                 mov     eax, [ebp+var_4]
.text:00001725                 add     esp, 4
.text:00001728                 cmp     ebp, esp
.text:0000172A                 call    __RTC_CheckEsp
.text:0000172F                 mov     esp, ebp
.text:00001731                 pop     ebp
.text:00001732                 retn    4
.text:00001732 ??_GCHandler@NZ@NArchive@@QAEPAXI@Z endp
.text:00001732
.text:00001732 ; ---------------------------------------------------------------------------
.text:00001735                 align 4
.text:00001735 _text           ends
.text:00001735
.text:00001738 ; ===========================================================================
.text:00001738
.text:00001738 ; Segment type: Pure code
.text:00001738 ; Segment permissions: Read/Execute
.text:00001738 _text           segment para public 'CODE' use32
.text:00001738                 assume cs:_text
.text:00001738                 ;org 1738h
.text:00001738 ; COMDAT (pick any)
.text:00001738                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001738
.text:00001738 ; =============== S U B R O U T I N E =======================================
.text:00001738
.text:00001738 ; Attributes: bp-based frame
.text:00001738
.text:00001738 ; _DWORD __thiscall NArchive::NZ::CHandler::~CHandler(NArchive::NZ::CHandler *__hidden this)
.text:00001738                 public ??1CHandler@NZ@NArchive@@QAE@XZ
.text:00001738 ??1CHandler@NZ@NArchive@@QAE@XZ proc near
.text:00001738                                         ; CODE XREF: NArchive::NZ::CHandler::`scalar deleting destructor'(uint)+11p
.text:00001738
.text:00001738 var_4           = dword ptr -4
.text:00001738
.text:00001738                 push    ebp
.text:00001739                 mov     ebp, esp
.text:0000173B                 push    ecx
.text:0000173C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001743                 mov     [ebp+var_4], ecx
.text:00001746                 mov     ecx, [ebp+var_4]
.text:00001749                 add     ecx, 8
.text:0000174C                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00001751                 add     esp, 4
.text:00001754                 cmp     ebp, esp
.text:00001756                 call    __RTC_CheckEsp
.text:0000175B                 mov     esp, ebp
.text:0000175D                 pop     ebp
.text:0000175E                 retn
.text:0000175E ??1CHandler@NZ@NArchive@@QAE@XZ endp
.text:0000175E
.text:0000175E ; ---------------------------------------------------------------------------
.text:0000175F                 align 10h
.text:0000175F _text           ends
.text:0000175F
.text:00001760 ; ===========================================================================
.text:00001760
.text:00001760 ; Segment type: Pure code
.text:00001760 ; Segment permissions: Read/Execute
.text:00001760 _text           segment para public 'CODE' use32
.text:00001760                 assume cs:_text
.text:00001760                 ;org 1760h
.text:00001760 ; COMDAT (pick any)
.text:00001760                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001760
.text:00001760 ; =============== S U B R O U T I N E =======================================
.text:00001760
.text:00001760 ; Attributes: bp-based frame
.text:00001760
.text:00001760 ; _DWORD __thiscall IInArchive::IInArchive(IInArchive *__hidden this)
.text:00001760                 public ??0IInArchive@@QAE@XZ
.text:00001760 ??0IInArchive@@QAE@XZ proc near         ; CODE XREF: NArchive::NZ::CHandler::CHandler(void)+11p
.text:00001760
.text:00001760 var_4           = dword ptr -4
.text:00001760
.text:00001760                 push    ebp
.text:00001761                 mov     ebp, esp
.text:00001763                 push    ecx
.text:00001764                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000176B                 mov     [ebp+var_4], ecx
.text:0000176E                 mov     ecx, [ebp+var_4]
.text:00001771                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00001776                 mov     eax, [ebp+var_4]
.text:00001779                 mov     dword ptr [eax], offset ??_7IInArchive@@6B@ ; const IInArchive::`vftable'
.text:0000177F                 mov     eax, [ebp+var_4]
.text:00001782                 add     esp, 4
.text:00001785                 cmp     ebp, esp
.text:00001787                 call    __RTC_CheckEsp
.text:0000178C                 mov     esp, ebp
.text:0000178E                 pop     ebp
.text:0000178F                 retn
.text:0000178F ??0IInArchive@@QAE@XZ endp
.text:0000178F
.text:0000178F _text           ends
.text:0000178F
.rdata:00001790 ; ===========================================================================
.rdata:00001790
.rdata:00001790 ; Segment type: Pure data
.rdata:00001790 ; Segment permissions: Read
.rdata:00001790 _rdata          segment dword public 'DATA' use32
.rdata:00001790                 assume cs:_rdata
.rdata:00001790                 ;org 1790h
.rdata:00001790 ; COMDAT (pick largest)
.rdata:00001790                 dd offset ??_R4IInArchive@@6B@ ; const IInArchive::`RTTI Complete Object Locator'
.rdata:00001794                 public ??_7IInArchive@@6B@
.rdata:00001794 ; const IInArchive::`vftable'
.rdata:00001794 ??_7IInArchive@@6B@ dd offset __purecall
.rdata:00001794                                         ; DATA XREF: IInArchive::IInArchive(void)+19o
.rdata:00001798                 dd offset __purecall
.rdata:0000179C                 dd offset __purecall
.rdata:000017A0                 dd offset __purecall
.rdata:000017A4                 dd offset __purecall
.rdata:000017A8                 dd offset __purecall
.rdata:000017AC                 dd offset __purecall
.rdata:000017B0                 dd offset __purecall
.rdata:000017B4                 dd offset __purecall
.rdata:000017B8                 dd offset __purecall
.rdata:000017BC                 dd offset __purecall
.rdata:000017C0                 dd offset __purecall
.rdata:000017C4                 dd offset __purecall
.rdata:000017C4 _rdata          ends
.rdata:000017C4
.rdata$r:000017C8 ; ===========================================================================
.rdata$r:000017C8
.rdata$r:000017C8 ; Segment type: Pure data
.rdata$r:000017C8 ; Segment permissions: Read
.rdata$r:000017C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000017C8                 assume cs:_rdata$r
.rdata$r:000017C8                 ;org 17C8h
.rdata$r:000017C8 ; COMDAT (pick any)
.rdata$r:000017C8                 public ??_R4IInArchive@@6B@
.rdata$r:000017C8 ; const IInArchive::`RTTI Complete Object Locator'
.rdata$r:000017C8 ??_R4IInArchive@@6B@ db    0            ; DATA XREF: .rdata:00001790o
.rdata$r:000017C9                 db    0
.rdata$r:000017CA                 db    0
.rdata$r:000017CB                 db    0
.rdata$r:000017CC                 db    0
.rdata$r:000017CD                 db    0
.rdata$r:000017CE                 db    0
.rdata$r:000017CF                 db    0
.rdata$r:000017D0                 db    0
.rdata$r:000017D1                 db    0
.rdata$r:000017D2                 db    0
.rdata$r:000017D3                 db    0
.rdata$r:000017D4                 dd offset ??_R0?AUIInArchive@@@8 ; IInArchive `RTTI Type Descriptor'
.rdata$r:000017D8                 dd offset ??_R3IInArchive@@8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000017D8 _rdata$r        ends
.rdata$r:000017D8
.text:000017DC ; ===========================================================================
.text:000017DC
.text:000017DC ; Segment type: Pure code
.text:000017DC ; Segment permissions: Read/Execute
.text:000017DC _text           segment para public 'CODE' use32
.text:000017DC                 assume cs:_text
.text:000017DC                 ;org 17DCh
.text:000017DC ; COMDAT (pick any)
.text:000017DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000017DC
.text:000017DC ; =============== S U B R O U T I N E =======================================
.text:000017DC
.text:000017DC ; Attributes: bp-based frame
.text:000017DC
.text:000017DC ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::CMyComPtr<struct ICompressProgressInfo>(struct ICompressProgressInfo *)
.text:000017DC                 public ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
.text:000017DC ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z proc near
.text:000017DC                                         ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2C9p
.text:000017DC
.text:000017DC var_4           = dword ptr -4
.text:000017DC arg_0           = dword ptr  8
.text:000017DC
.text:000017DC                 push    ebp
.text:000017DD                 mov     ebp, esp
.text:000017DF                 push    ecx
.text:000017E0                 push    esi
.text:000017E1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000017E8                 mov     [ebp+var_4], ecx
.text:000017EB                 mov     eax, [ebp+var_4]
.text:000017EE                 mov     ecx, [ebp+arg_0]
.text:000017F1                 mov     [eax], ecx
.text:000017F3                 cmp     [ebp+arg_0], 0
.text:000017F7                 jz      short loc_1810
.text:000017F9                 mov     edx, [ebp+arg_0]
.text:000017FC                 mov     eax, [edx]
.text:000017FE                 mov     esi, esp
.text:00001800                 mov     ecx, [ebp+arg_0]
.text:00001803                 push    ecx
.text:00001804                 mov     edx, [eax+4]
.text:00001807                 call    edx
.text:00001809                 cmp     esi, esp
.text:0000180B                 call    __RTC_CheckEsp
.text:00001810
.text:00001810 loc_1810:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)+1Bj
.text:00001810                 mov     eax, [ebp+var_4]
.text:00001813                 pop     esi
.text:00001814                 add     esp, 4
.text:00001817                 cmp     ebp, esp
.text:00001819                 call    __RTC_CheckEsp
.text:0000181E                 mov     esp, ebp
.text:00001820                 pop     ebp
.text:00001821                 retn    4
.text:00001821 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z endp
.text:00001821
.text:00001821 _text           ends
.text:00001821
.text:00001824 ; ===========================================================================
.text:00001824
.text:00001824 ; Segment type: Pure code
.text:00001824 ; Segment permissions: Read/Execute
.text:00001824 _text           segment para public 'CODE' use32
.text:00001824                 assume cs:_text
.text:00001824                 ;org 1824h
.text:00001824 ; COMDAT (pick any)
.text:00001824                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001824
.text:00001824 ; =============== S U B R O U T I N E =======================================
.text:00001824
.text:00001824 ; Attributes: bp-based frame
.text:00001824
.text:00001824 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::~CMyComPtr<struct ICompressProgressInfo>(void)
.text:00001824                 public ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
.text:00001824 ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
.text:00001824                                         ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+347p
.text:00001824                                         ; NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4ADp ...
.text:00001824
.text:00001824 var_4           = dword ptr -4
.text:00001824
.text:00001824                 push    ebp
.text:00001825                 mov     ebp, esp
.text:00001827                 push    ecx
.text:00001828                 push    esi
.text:00001829                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001830                 mov     [ebp+var_4], ecx
.text:00001833                 mov     eax, [ebp+var_4]
.text:00001836                 cmp     dword ptr [eax], 0
.text:00001839                 jz      short loc_1856
.text:0000183B                 mov     ecx, [ebp+var_4]
.text:0000183E                 mov     edx, [ecx]
.text:00001840                 mov     eax, [ebp+var_4]
.text:00001843                 mov     ecx, [eax]
.text:00001845                 mov     edx, [edx]
.text:00001847                 mov     esi, esp
.text:00001849                 push    ecx
.text:0000184A                 mov     eax, [edx+8]
.text:0000184D                 call    eax
.text:0000184F                 cmp     esi, esp
.text:00001851                 call    __RTC_CheckEsp
.text:00001856
.text:00001856 loc_1856:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)+15j
.text:00001856                 pop     esi
.text:00001857                 add     esp, 4
.text:0000185A                 cmp     ebp, esp
.text:0000185C                 call    __RTC_CheckEsp
.text:00001861                 mov     esp, ebp
.text:00001863                 pop     ebp
.text:00001864                 retn
.text:00001864 ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ endp
.text:00001864
.text:00001864 ; ---------------------------------------------------------------------------
.text:00001865                 align 4
.text:00001865 _text           ends
.text:00001865
.text:00001868 ; ===========================================================================
.text:00001868
.text:00001868 ; Segment type: Pure code
.text:00001868 ; Segment permissions: Read/Execute
.text:00001868 _text           segment para public 'CODE' use32
.text:00001868                 assume cs:_text
.text:00001868                 ;org 1868h
.text:00001868 ; COMDAT (pick any)
.text:00001868                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001868
.text:00001868 ; =============== S U B R O U T I N E =======================================
.text:00001868
.text:00001868 ; Attributes: bp-based frame
.text:00001868
.text:00001868 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::operator struct ICompressProgressInfo *(void)const
.text:00001868                 public ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
.text:00001868 ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
.text:00001868                                         ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+407p
.text:00001868
.text:00001868 var_4           = dword ptr -4
.text:00001868
.text:00001868                 push    ebp
.text:00001869                 mov     ebp, esp
.text:0000186B                 push    ecx
.text:0000186C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001873                 mov     [ebp+var_4], ecx
.text:00001876                 mov     eax, [ebp+var_4]
.text:00001879                 mov     eax, [eax]
.text:0000187B                 mov     esp, ebp
.text:0000187D                 pop     ebp
.text:0000187E                 retn
.text:0000187E ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ endp
.text:0000187E
.text:0000187E ; ---------------------------------------------------------------------------
.text:0000187F                 align 10h
.text:0000187F _text           ends
.text:0000187F
.text:00001880 ; ===========================================================================
.text:00001880
.text:00001880 ; Segment type: Pure code
.text:00001880 ; Segment permissions: Read/Execute
.text:00001880 _text           segment para public 'CODE' use32
.text:00001880                 assume cs:_text
.text:00001880                 ;org 1880h
.text:00001880 ; COMDAT (pick any)
.text:00001880                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001880
.text:00001880 ; =============== S U B R O U T I N E =======================================
.text:00001880
.text:00001880 ; Attributes: bp-based frame
.text:00001880
.text:00001880 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(void)
.text:00001880                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:00001880 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:00001880                                         ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+DEp
.text:00001880                                         ; CDummyOutStream::CDummyOutStream(void)+30p
.text:00001880
.text:00001880 var_4           = dword ptr -4
.text:00001880
.text:00001880                 push    ebp
.text:00001881                 mov     ebp, esp
.text:00001883                 push    ecx
.text:00001884                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000188B                 mov     [ebp+var_4], ecx
.text:0000188E                 mov     eax, [ebp+var_4]
.text:00001891                 mov     dword ptr [eax], 0
.text:00001897                 mov     eax, [ebp+var_4]
.text:0000189A                 mov     esp, ebp
.text:0000189C                 pop     ebp
.text:0000189D                 retn
.text:0000189D ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:0000189D
.text:0000189D ; ---------------------------------------------------------------------------
.text:0000189E                 align 10h
.text:0000189E _text           ends
.text:0000189E
.text:000018A0 ; ===========================================================================
.text:000018A0
.text:000018A0 ; Segment type: Pure code
.text:000018A0 ; Segment permissions: Read/Execute
.text:000018A0 _text           segment para public 'CODE' use32
.text:000018A0                 assume cs:_text
.text:000018A0                 ;org 18A0h
.text:000018A0 ; COMDAT (pick any)
.text:000018A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000018A0
.text:000018A0 ; =============== S U B R O U T I N E =======================================
.text:000018A0
.text:000018A0 ; Attributes: bp-based frame
.text:000018A0
.text:000018A0 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(struct ISequentialOutStream *)
.text:000018A0                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
.text:000018A0 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z proc near
.text:000018A0                                         ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+221p
.text:000018A0
.text:000018A0 var_4           = dword ptr -4
.text:000018A0 arg_0           = dword ptr  8
.text:000018A0
.text:000018A0                 push    ebp
.text:000018A1                 mov     ebp, esp
.text:000018A3                 push    ecx
.text:000018A4                 push    esi
.text:000018A5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000018AC                 mov     [ebp+var_4], ecx
.text:000018AF                 mov     eax, [ebp+var_4]
.text:000018B2                 mov     ecx, [ebp+arg_0]
.text:000018B5                 mov     [eax], ecx
.text:000018B7                 cmp     [ebp+arg_0], 0
.text:000018BB                 jz      short loc_18D4
.text:000018BD                 mov     edx, [ebp+arg_0]
.text:000018C0                 mov     eax, [edx]
.text:000018C2                 mov     esi, esp
.text:000018C4                 mov     ecx, [ebp+arg_0]
.text:000018C7                 push    ecx
.text:000018C8                 mov     edx, [eax+4]
.text:000018CB                 call    edx
.text:000018CD                 cmp     esi, esp
.text:000018CF                 call    __RTC_CheckEsp
.text:000018D4
.text:000018D4 loc_18D4:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)+1Bj
.text:000018D4                 mov     eax, [ebp+var_4]
.text:000018D7                 pop     esi
.text:000018D8                 add     esp, 4
.text:000018DB                 cmp     ebp, esp
.text:000018DD                 call    __RTC_CheckEsp
.text:000018E2                 mov     esp, ebp
.text:000018E4                 pop     ebp
.text:000018E5                 retn    4
.text:000018E5 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z endp
.text:000018E5
.text:000018E5 _text           ends
.text:000018E5
.text:000018E8 ; ===========================================================================
.text:000018E8
.text:000018E8 ; Segment type: Pure code
.text:000018E8 ; Segment permissions: Read/Execute
.text:000018E8 _text           segment para public 'CODE' use32
.text:000018E8                 assume cs:_text
.text:000018E8                 ;org 18E8h
.text:000018E8 ; COMDAT (pick any)
.text:000018E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000018E8
.text:000018E8 ; =============== S U B R O U T I N E =======================================
.text:000018E8
.text:000018E8 ; Attributes: bp-based frame
.text:000018E8
.text:000018E8 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:000018E8                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:000018E8 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:000018E8                                         ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+14Dp
.text:000018E8                                         ; NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+187p ...
.text:000018E8
.text:000018E8 var_4           = dword ptr -4
.text:000018E8
.text:000018E8                 push    ebp
.text:000018E9                 mov     ebp, esp
.text:000018EB                 push    ecx
.text:000018EC                 push    esi
.text:000018ED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000018F4                 mov     [ebp+var_4], ecx
.text:000018F7                 mov     eax, [ebp+var_4]
.text:000018FA                 cmp     dword ptr [eax], 0
.text:000018FD                 jz      short loc_191A
.text:000018FF                 mov     ecx, [ebp+var_4]
.text:00001902                 mov     edx, [ecx]
.text:00001904                 mov     eax, [ebp+var_4]
.text:00001907                 mov     ecx, [eax]
.text:00001909                 mov     edx, [edx]
.text:0000190B                 mov     esi, esp
.text:0000190D                 push    ecx
.text:0000190E                 mov     eax, [edx+8]
.text:00001911                 call    eax
.text:00001913                 cmp     esi, esp
.text:00001915                 call    __RTC_CheckEsp
.text:0000191A
.text:0000191A loc_191A:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:0000191A                 pop     esi
.text:0000191B                 add     esp, 4
.text:0000191E                 cmp     ebp, esp
.text:00001920                 call    __RTC_CheckEsp
.text:00001925                 mov     esp, ebp
.text:00001927                 pop     ebp
.text:00001928                 retn
.text:00001928 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00001928
.text:00001928 ; ---------------------------------------------------------------------------
.text:00001929                 align 4
.text:00001929 _text           ends
.text:00001929
.text:0000192C ; ===========================================================================
.text:0000192C
.text:0000192C ; Segment type: Pure code
.text:0000192C ; Segment permissions: Read/Execute
.text:0000192C _text           segment para public 'CODE' use32
.text:0000192C                 assume cs:_text
.text:0000192C                 ;org 192Ch
.text:0000192C ; COMDAT (pick any)
.text:0000192C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000192C
.text:0000192C ; =============== S U B R O U T I N E =======================================
.text:0000192C
.text:0000192C ; Attributes: bp-based frame
.text:0000192C
.text:0000192C ; public: void __thiscall CMyComPtr<struct ISequentialOutStream>::Release(void)
.text:0000192C                 public ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
.text:0000192C ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ proc near
.text:0000192C                                         ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+252p
.text:0000192C                                         ; NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4DFp
.text:0000192C
.text:0000192C var_4           = dword ptr -4
.text:0000192C
.text:0000192C                 push    ebp
.text:0000192D                 mov     ebp, esp
.text:0000192F                 push    ecx
.text:00001930                 push    esi
.text:00001931                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001938                 mov     [ebp+var_4], ecx
.text:0000193B                 mov     eax, [ebp+var_4]
.text:0000193E                 cmp     dword ptr [eax], 0
.text:00001941                 jz      short loc_1967
.text:00001943                 mov     ecx, [ebp+var_4]
.text:00001946                 mov     edx, [ecx]
.text:00001948                 mov     eax, [ebp+var_4]
.text:0000194B                 mov     ecx, [eax]
.text:0000194D                 mov     edx, [edx]
.text:0000194F                 mov     esi, esp
.text:00001951                 push    ecx
.text:00001952                 mov     eax, [edx+8]
.text:00001955                 call    eax
.text:00001957                 cmp     esi, esp
.text:00001959                 call    __RTC_CheckEsp
.text:0000195E                 mov     ecx, [ebp+var_4]
.text:00001961                 mov     dword ptr [ecx], 0
.text:00001967
.text:00001967 loc_1967:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::Release(void)+15j
.text:00001967                 pop     esi
.text:00001968                 add     esp, 4
.text:0000196B                 cmp     ebp, esp
.text:0000196D                 call    __RTC_CheckEsp
.text:00001972                 mov     esp, ebp
.text:00001974                 pop     ebp
.text:00001975                 retn
.text:00001975 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ endp
.text:00001975
.text:00001975 ; ---------------------------------------------------------------------------
.text:00001976                 align 4
.text:00001976 _text           ends
.text:00001976
.text:00001978 ; ===========================================================================
.text:00001978
.text:00001978 ; Segment type: Pure code
.text:00001978 ; Segment permissions: Read/Execute
.text:00001978 _text           segment para public 'CODE' use32
.text:00001978                 assume cs:_text
.text:00001978                 ;org 1978h
.text:00001978 ; COMDAT (pick any)
.text:00001978                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001978
.text:00001978 ; =============== S U B R O U T I N E =======================================
.text:00001978
.text:00001978 ; Attributes: bp-based frame
.text:00001978
.text:00001978 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:00001978                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:00001978 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:00001978                                         ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+22Dp
.text:00001978                                         ; NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+415p
.text:00001978
.text:00001978 var_4           = dword ptr -4
.text:00001978
.text:00001978                 push    ebp
.text:00001979                 mov     ebp, esp
.text:0000197B                 push    ecx
.text:0000197C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001983                 mov     [ebp+var_4], ecx
.text:00001986                 mov     eax, [ebp+var_4]
.text:00001989                 mov     eax, [eax]
.text:0000198B                 mov     esp, ebp
.text:0000198D                 pop     ebp
.text:0000198E                 retn
.text:0000198E ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:0000198E
.text:0000198E ; ---------------------------------------------------------------------------
.text:0000198F                 align 10h
.text:0000198F _text           ends
.text:0000198F
.text:00001990 ; ===========================================================================
.text:00001990
.text:00001990 ; Segment type: Pure code
.text:00001990 ; Segment permissions: Read/Execute
.text:00001990 _text           segment para public 'CODE' use32
.text:00001990                 assume cs:_text
.text:00001990                 ;org 1990h
.text:00001990 ; COMDAT (pick any)
.text:00001990                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001990
.text:00001990 ; =============== S U B R O U T I N E =======================================
.text:00001990
.text:00001990 ; Attributes: bp-based frame
.text:00001990
.text:00001990 ; public: struct ISequentialOutStream * * __thiscall CMyComPtr<struct ISequentialOutStream>::operator&(void)
.text:00001990                 public ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
.text:00001990 ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ proc near
.text:00001990                                         ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+FCp
.text:00001990
.text:00001990 var_4           = dword ptr -4
.text:00001990
.text:00001990                 push    ebp
.text:00001991                 mov     ebp, esp
.text:00001993                 push    ecx
.text:00001994                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000199B                 mov     [ebp+var_4], ecx
.text:0000199E                 mov     eax, [ebp+var_4]
.text:000019A1                 mov     esp, ebp
.text:000019A3                 pop     ebp
.text:000019A4                 retn
.text:000019A4 ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ endp
.text:000019A4
.text:000019A4 ; ---------------------------------------------------------------------------
.text:000019A5                 align 4
.text:000019A5 _text           ends
.text:000019A5
.text:000019A8 ; ===========================================================================
.text:000019A8
.text:000019A8 ; Segment type: Pure code
.text:000019A8 ; Segment permissions: Read/Execute
.text:000019A8 _text           segment para public 'CODE' use32
.text:000019A8                 assume cs:_text
.text:000019A8                 ;org 19A8h
.text:000019A8 ; COMDAT (pick any)
.text:000019A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000019A8
.text:000019A8 ; =============== S U B R O U T I N E =======================================
.text:000019A8
.text:000019A8 ; Attributes: bp-based frame
.text:000019A8
.text:000019A8 ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator=(struct ISequentialOutStream *)
.text:000019A8                 public ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
.text:000019A8 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z proc near
.text:000019A8                                         ; CODE XREF: CDummyOutStream::SetStream(ISequentialOutStream *)+18p
.text:000019A8
.text:000019A8 var_4           = dword ptr -4
.text:000019A8 arg_0           = dword ptr  8
.text:000019A8
.text:000019A8                 push    ebp
.text:000019A9                 mov     ebp, esp
.text:000019AB                 push    ecx
.text:000019AC                 push    esi
.text:000019AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000019B4                 mov     [ebp+var_4], ecx
.text:000019B7                 cmp     [ebp+arg_0], 0
.text:000019BB                 jz      short loc_19D4
.text:000019BD                 mov     eax, [ebp+arg_0]
.text:000019C0                 mov     ecx, [eax]
.text:000019C2                 mov     esi, esp
.text:000019C4                 mov     edx, [ebp+arg_0]
.text:000019C7                 push    edx
.text:000019C8                 mov     eax, [ecx+4]
.text:000019CB                 call    eax
.text:000019CD                 cmp     esi, esp
.text:000019CF                 call    __RTC_CheckEsp
.text:000019D4
.text:000019D4 loc_19D4:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+13j
.text:000019D4                 mov     ecx, [ebp+var_4]
.text:000019D7                 cmp     dword ptr [ecx], 0
.text:000019DA                 jz      short loc_19F7
.text:000019DC                 mov     edx, [ebp+var_4]
.text:000019DF                 mov     eax, [edx]
.text:000019E1                 mov     ecx, [ebp+var_4]
.text:000019E4                 mov     edx, [ecx]
.text:000019E6                 mov     eax, [eax]
.text:000019E8                 mov     esi, esp
.text:000019EA                 push    edx
.text:000019EB                 mov     ecx, [eax+8]
.text:000019EE                 call    ecx
.text:000019F0                 cmp     esi, esp
.text:000019F2                 call    __RTC_CheckEsp
.text:000019F7
.text:000019F7 loc_19F7:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+32j
.text:000019F7                 mov     edx, [ebp+var_4]
.text:000019FA                 mov     eax, [ebp+arg_0]
.text:000019FD                 mov     [edx], eax
.text:000019FF                 mov     eax, [ebp+arg_0]
.text:00001A02                 pop     esi
.text:00001A03                 add     esp, 4
.text:00001A06                 cmp     ebp, esp
.text:00001A08                 call    __RTC_CheckEsp
.text:00001A0D                 mov     esp, ebp
.text:00001A0F                 pop     ebp
.text:00001A10                 retn    4
.text:00001A10 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z endp
.text:00001A10
.text:00001A10 ; ---------------------------------------------------------------------------
.text:00001A13                 align 4
.text:00001A13 _text           ends
.text:00001A13
.text:00001A14 ; ===========================================================================
.text:00001A14
.text:00001A14 ; Segment type: Pure code
.text:00001A14 ; Segment permissions: Read/Execute
.text:00001A14 _text           segment para public 'CODE' use32
.text:00001A14                 assume cs:_text
.text:00001A14                 ;org 1A14h
.text:00001A14 ; COMDAT (pick any)
.text:00001A14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A14
.text:00001A14 ; =============== S U B R O U T I N E =======================================
.text:00001A14
.text:00001A14 ; Attributes: bp-based frame
.text:00001A14
.text:00001A14 ; public: bool __thiscall CMyComPtr<struct ISequentialOutStream>::operator!(void)const
.text:00001A14                 public ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
.text:00001A14 ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ proc near
.text:00001A14                                         ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+163p
.text:00001A14
.text:00001A14 var_4           = dword ptr -4
.text:00001A14
.text:00001A14                 push    ebp
.text:00001A15                 mov     ebp, esp
.text:00001A17                 push    ecx
.text:00001A18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A1F                 mov     [ebp+var_4], ecx
.text:00001A22                 mov     eax, [ebp+var_4]
.text:00001A25                 xor     ecx, ecx
.text:00001A27                 cmp     dword ptr [eax], 0
.text:00001A2A                 setz    cl
.text:00001A2D                 mov     al, cl
.text:00001A2F                 mov     esp, ebp
.text:00001A31                 pop     ebp
.text:00001A32                 retn
.text:00001A32 ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ endp
.text:00001A32
.text:00001A32 ; ---------------------------------------------------------------------------
.text:00001A33                 align 4
.text:00001A33 _text           ends
.text:00001A33
.text:00001A34 ; ===========================================================================
.text:00001A34
.text:00001A34 ; Segment type: Pure code
.text:00001A34 ; Segment permissions: Read/Execute
.text:00001A34 _text           segment para public 'CODE' use32
.text:00001A34                 assume cs:_text
.text:00001A34                 ;org 1A34h
.text:00001A34 ; COMDAT (pick any)
.text:00001A34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A34
.text:00001A34 ; =============== S U B R O U T I N E =======================================
.text:00001A34
.text:00001A34 ; Attributes: bp-based frame
.text:00001A34
.text:00001A34 ; public: __thiscall CMyComPtr<struct IInStream>::CMyComPtr<struct IInStream>(void)
.text:00001A34                 public ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:00001A34 ??0?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:00001A34                                         ; CODE XREF: NArchive::NZ::CHandler::CHandler(void)+30p
.text:00001A34
.text:00001A34 var_4           = dword ptr -4
.text:00001A34
.text:00001A34                 push    ebp
.text:00001A35                 mov     ebp, esp
.text:00001A37                 push    ecx
.text:00001A38                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A3F                 mov     [ebp+var_4], ecx
.text:00001A42                 mov     eax, [ebp+var_4]
.text:00001A45                 mov     dword ptr [eax], 0
.text:00001A4B                 mov     eax, [ebp+var_4]
.text:00001A4E                 mov     esp, ebp
.text:00001A50                 pop     ebp
.text:00001A51                 retn
.text:00001A51 ??0?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:00001A51
.text:00001A51 ; ---------------------------------------------------------------------------
.text:00001A52                 align 4
.text:00001A52 _text           ends
.text:00001A52
.text:00001A54 ; ===========================================================================
.text:00001A54
.text:00001A54 ; Segment type: Pure code
.text:00001A54 ; Segment permissions: Read/Execute
.text:00001A54 _text           segment para public 'CODE' use32
.text:00001A54                 assume cs:_text
.text:00001A54                 ;org 1A54h
.text:00001A54 ; COMDAT (pick any)
.text:00001A54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A54
.text:00001A54 ; =============== S U B R O U T I N E =======================================
.text:00001A54
.text:00001A54 ; Attributes: bp-based frame
.text:00001A54
.text:00001A54 ; public: __thiscall CMyComPtr<struct IInStream>::~CMyComPtr<struct IInStream>(void)
.text:00001A54                 public ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:00001A54 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:00001A54                                         ; CODE XREF: NArchive::NZ::CHandler::~CHandler(void)+14p
.text:00001A54
.text:00001A54 var_4           = dword ptr -4
.text:00001A54
.text:00001A54                 push    ebp
.text:00001A55                 mov     ebp, esp
.text:00001A57                 push    ecx
.text:00001A58                 push    esi
.text:00001A59                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A60                 mov     [ebp+var_4], ecx
.text:00001A63                 mov     eax, [ebp+var_4]
.text:00001A66                 cmp     dword ptr [eax], 0
.text:00001A69                 jz      short loc_1A86
.text:00001A6B                 mov     ecx, [ebp+var_4]
.text:00001A6E                 mov     edx, [ecx]
.text:00001A70                 mov     eax, [ebp+var_4]
.text:00001A73                 mov     ecx, [eax]
.text:00001A75                 mov     edx, [edx]
.text:00001A77                 mov     esi, esp
.text:00001A79                 push    ecx
.text:00001A7A                 mov     eax, [edx+8]
.text:00001A7D                 call    eax
.text:00001A7F                 cmp     esi, esp
.text:00001A81                 call    __RTC_CheckEsp
.text:00001A86
.text:00001A86 loc_1A86:                               ; CODE XREF: CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)+15j
.text:00001A86                 pop     esi
.text:00001A87                 add     esp, 4
.text:00001A8A                 cmp     ebp, esp
.text:00001A8C                 call    __RTC_CheckEsp
.text:00001A91                 mov     esp, ebp
.text:00001A93                 pop     ebp
.text:00001A94                 retn
.text:00001A94 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:00001A94
.text:00001A94 ; ---------------------------------------------------------------------------
.text:00001A95                 align 4
.text:00001A95 _text           ends
.text:00001A95
.text:00001A98 ; ===========================================================================
.text:00001A98
.text:00001A98 ; Segment type: Pure code
.text:00001A98 ; Segment permissions: Read/Execute
.text:00001A98 _text           segment para public 'CODE' use32
.text:00001A98                 assume cs:_text
.text:00001A98                 ;org 1A98h
.text:00001A98 ; COMDAT (pick any)
.text:00001A98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A98
.text:00001A98 ; =============== S U B R O U T I N E =======================================
.text:00001A98
.text:00001A98 ; Attributes: bp-based frame
.text:00001A98
.text:00001A98 ; public: void __thiscall CMyComPtr<struct IInStream>::Release(void)
.text:00001A98                 public ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ
.text:00001A98 ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ proc near
.text:00001A98                                         ; CODE XREF: NArchive::NZ::CHandler::Close(void)+1Ap
.text:00001A98
.text:00001A98 var_4           = dword ptr -4
.text:00001A98
.text:00001A98                 push    ebp
.text:00001A99                 mov     ebp, esp
.text:00001A9B                 push    ecx
.text:00001A9C                 push    esi
.text:00001A9D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001AA4                 mov     [ebp+var_4], ecx
.text:00001AA7                 mov     eax, [ebp+var_4]
.text:00001AAA                 cmp     dword ptr [eax], 0
.text:00001AAD                 jz      short loc_1AD3
.text:00001AAF                 mov     ecx, [ebp+var_4]
.text:00001AB2                 mov     edx, [ecx]
.text:00001AB4                 mov     eax, [ebp+var_4]
.text:00001AB7                 mov     ecx, [eax]
.text:00001AB9                 mov     edx, [edx]
.text:00001ABB                 mov     esi, esp
.text:00001ABD                 push    ecx
.text:00001ABE                 mov     eax, [edx+8]
.text:00001AC1                 call    eax
.text:00001AC3                 cmp     esi, esp
.text:00001AC5                 call    __RTC_CheckEsp
.text:00001ACA                 mov     ecx, [ebp+var_4]
.text:00001ACD                 mov     dword ptr [ecx], 0
.text:00001AD3
.text:00001AD3 loc_1AD3:                               ; CODE XREF: CMyComPtr<IInStream>::Release(void)+15j
.text:00001AD3                 pop     esi
.text:00001AD4                 add     esp, 4
.text:00001AD7                 cmp     ebp, esp
.text:00001AD9                 call    __RTC_CheckEsp
.text:00001ADE                 mov     esp, ebp
.text:00001AE0                 pop     ebp
.text:00001AE1                 retn
.text:00001AE1 ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ endp
.text:00001AE1
.text:00001AE1 ; ---------------------------------------------------------------------------
.text:00001AE2                 align 4
.text:00001AE2 _text           ends
.text:00001AE2
.text:00001AE4 ; ===========================================================================
.text:00001AE4
.text:00001AE4 ; Segment type: Pure code
.text:00001AE4 ; Segment permissions: Read/Execute
.text:00001AE4 _text           segment para public 'CODE' use32
.text:00001AE4                 assume cs:_text
.text:00001AE4                 ;org 1AE4h
.text:00001AE4 ; COMDAT (pick any)
.text:00001AE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001AE4
.text:00001AE4 ; =============== S U B R O U T I N E =======================================
.text:00001AE4
.text:00001AE4 ; Attributes: bp-based frame
.text:00001AE4
.text:00001AE4 ; public: __thiscall CMyComPtr<struct IInStream>::operator struct IInStream *(void)const
.text:00001AE4                 public ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:00001AE4 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:00001AE4                                         ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+426p
.text:00001AE4
.text:00001AE4 var_4           = dword ptr -4
.text:00001AE4
.text:00001AE4                 push    ebp
.text:00001AE5                 mov     ebp, esp
.text:00001AE7                 push    ecx
.text:00001AE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001AEF                 mov     [ebp+var_4], ecx
.text:00001AF2                 mov     eax, [ebp+var_4]
.text:00001AF5                 mov     eax, [eax]
.text:00001AF7                 mov     esp, ebp
.text:00001AF9                 pop     ebp
.text:00001AFA                 retn
.text:00001AFA ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:00001AFA
.text:00001AFA ; ---------------------------------------------------------------------------
.text:00001AFB                 align 4
.text:00001AFB _text           ends
.text:00001AFB
.text:00001AFC ; ===========================================================================
.text:00001AFC
.text:00001AFC ; Segment type: Pure code
.text:00001AFC ; Segment permissions: Read/Execute
.text:00001AFC _text           segment para public 'CODE' use32
.text:00001AFC                 assume cs:_text
.text:00001AFC                 ;org 1AFCh
.text:00001AFC ; COMDAT (pick any)
.text:00001AFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001AFC
.text:00001AFC ; =============== S U B R O U T I N E =======================================
.text:00001AFC
.text:00001AFC ; Attributes: bp-based frame
.text:00001AFC
.text:00001AFC ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator->(void)const
.text:00001AFC                 public ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:00001AFC ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:00001AFC                                         ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2E6p
.text:00001AFC
.text:00001AFC var_4           = dword ptr -4
.text:00001AFC
.text:00001AFC                 push    ebp
.text:00001AFD                 mov     ebp, esp
.text:00001AFF                 push    ecx
.text:00001B00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001B07                 mov     [ebp+var_4], ecx
.text:00001B0A                 mov     eax, [ebp+var_4]
.text:00001B0D                 mov     eax, [eax]
.text:00001B0F                 mov     esp, ebp
.text:00001B11                 pop     ebp
.text:00001B12                 retn
.text:00001B12 ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:00001B12
.text:00001B12 ; ---------------------------------------------------------------------------
.text:00001B13                 align 4
.text:00001B13 _text           ends
.text:00001B13
.text:00001B14 ; ===========================================================================
.text:00001B14
.text:00001B14 ; Segment type: Pure code
.text:00001B14 ; Segment permissions: Read/Execute
.text:00001B14 _text           segment para public 'CODE' use32
.text:00001B14                 assume cs:_text
.text:00001B14                 ;org 1B14h
.text:00001B14 ; COMDAT (pick any)
.text:00001B14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B14
.text:00001B14 ; =============== S U B R O U T I N E =======================================
.text:00001B14
.text:00001B14 ; Attributes: bp-based frame
.text:00001B14
.text:00001B14 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator=(struct IInStream *)
.text:00001B14                 public ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
.text:00001B14 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z proc near
.text:00001B14                                         ; CODE XREF: NArchive::NZ::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+EDp
.text:00001B14
.text:00001B14 var_4           = dword ptr -4
.text:00001B14 arg_0           = dword ptr  8
.text:00001B14
.text:00001B14                 push    ebp
.text:00001B15                 mov     ebp, esp
.text:00001B17                 push    ecx
.text:00001B18                 push    esi
.text:00001B19                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001B20                 mov     [ebp+var_4], ecx
.text:00001B23                 cmp     [ebp+arg_0], 0
.text:00001B27                 jz      short loc_1B40
.text:00001B29                 mov     eax, [ebp+arg_0]
.text:00001B2C                 mov     ecx, [eax]
.text:00001B2E                 mov     esi, esp
.text:00001B30                 mov     edx, [ebp+arg_0]
.text:00001B33                 push    edx
.text:00001B34                 mov     eax, [ecx+4]
.text:00001B37                 call    eax
.text:00001B39                 cmp     esi, esp
.text:00001B3B                 call    __RTC_CheckEsp
.text:00001B40
.text:00001B40 loc_1B40:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+13j
.text:00001B40                 mov     ecx, [ebp+var_4]
.text:00001B43                 cmp     dword ptr [ecx], 0
.text:00001B46                 jz      short loc_1B63
.text:00001B48                 mov     edx, [ebp+var_4]
.text:00001B4B                 mov     eax, [edx]
.text:00001B4D                 mov     ecx, [ebp+var_4]
.text:00001B50                 mov     edx, [ecx]
.text:00001B52                 mov     eax, [eax]
.text:00001B54                 mov     esi, esp
.text:00001B56                 push    edx
.text:00001B57                 mov     ecx, [eax+8]
.text:00001B5A                 call    ecx
.text:00001B5C                 cmp     esi, esp
.text:00001B5E                 call    __RTC_CheckEsp
.text:00001B63
.text:00001B63 loc_1B63:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+32j
.text:00001B63                 mov     edx, [ebp+var_4]
.text:00001B66                 mov     eax, [ebp+arg_0]
.text:00001B69                 mov     [edx], eax
.text:00001B6B                 mov     eax, [ebp+arg_0]
.text:00001B6E                 pop     esi
.text:00001B6F                 add     esp, 4
.text:00001B72                 cmp     ebp, esp
.text:00001B74                 call    __RTC_CheckEsp
.text:00001B79                 mov     esp, ebp
.text:00001B7B                 pop     ebp
.text:00001B7C                 retn    4
.text:00001B7C ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z endp
.text:00001B7C
.text:00001B7C ; ---------------------------------------------------------------------------
.text:00001B7F                 align 10h
.text:00001B7F _text           ends
.text:00001B7F
.text:00001B80 ; ===========================================================================
.text:00001B80
.text:00001B80 ; Segment type: Pure code
.text:00001B80 ; Segment permissions: Read/Execute
.text:00001B80 _text           segment para public 'CODE' use32
.text:00001B80                 assume cs:_text
.text:00001B80                 ;org 1B80h
.text:00001B80 ; COMDAT (pick any)
.text:00001B80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B80
.text:00001B80 ; =============== S U B R O U T I N E =======================================
.text:00001B80
.text:00001B80 ; Attributes: bp-based frame
.text:00001B80
.text:00001B80 ; public: __thiscall CMyComPtr<struct ICompressCoder>::CMyComPtr<struct ICompressCoder>(struct ICompressCoder *)
.text:00001B80                 public ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z
.text:00001B80 ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z proc near
.text:00001B80                                         ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3E1p
.text:00001B80
.text:00001B80 var_4           = dword ptr -4
.text:00001B80 arg_0           = dword ptr  8
.text:00001B80
.text:00001B80                 push    ebp
.text:00001B81                 mov     ebp, esp
.text:00001B83                 push    ecx
.text:00001B84                 push    esi
.text:00001B85                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001B8C                 mov     [ebp+var_4], ecx
.text:00001B8F                 mov     eax, [ebp+var_4]
.text:00001B92                 mov     ecx, [ebp+arg_0]
.text:00001B95                 mov     [eax], ecx
.text:00001B97                 cmp     [ebp+arg_0], 0
.text:00001B9B                 jz      short loc_1BB4
.text:00001B9D                 mov     edx, [ebp+arg_0]
.text:00001BA0                 mov     eax, [edx]
.text:00001BA2                 mov     esi, esp
.text:00001BA4                 mov     ecx, [ebp+arg_0]
.text:00001BA7                 push    ecx
.text:00001BA8                 mov     edx, [eax+4]
.text:00001BAB                 call    edx
.text:00001BAD                 cmp     esi, esp
.text:00001BAF                 call    __RTC_CheckEsp
.text:00001BB4
.text:00001BB4 loc_1BB4:                               ; CODE XREF: CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(ICompressCoder *)+1Bj
.text:00001BB4                 mov     eax, [ebp+var_4]
.text:00001BB7                 pop     esi
.text:00001BB8                 add     esp, 4
.text:00001BBB                 cmp     ebp, esp
.text:00001BBD                 call    __RTC_CheckEsp
.text:00001BC2                 mov     esp, ebp
.text:00001BC4                 pop     ebp
.text:00001BC5                 retn    4
.text:00001BC5 ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z endp
.text:00001BC5
.text:00001BC5 _text           ends
.text:00001BC5
.text:00001BC8 ; ===========================================================================
.text:00001BC8
.text:00001BC8 ; Segment type: Pure code
.text:00001BC8 ; Segment permissions: Read/Execute
.text:00001BC8 _text           segment para public 'CODE' use32
.text:00001BC8                 assume cs:_text
.text:00001BC8                 ;org 1BC8h
.text:00001BC8 ; COMDAT (pick any)
.text:00001BC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BC8
.text:00001BC8 ; =============== S U B R O U T I N E =======================================
.text:00001BC8
.text:00001BC8 ; Attributes: bp-based frame
.text:00001BC8
.text:00001BC8 ; public: __thiscall CMyComPtr<struct ICompressCoder>::~CMyComPtr<struct ICompressCoder>(void)
.text:00001BC8                 public ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:00001BC8 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:00001BC8                                         ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4A1p
.text:00001BC8                                         ; NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+518p ...
.text:00001BC8
.text:00001BC8 var_4           = dword ptr -4
.text:00001BC8
.text:00001BC8                 push    ebp
.text:00001BC9                 mov     ebp, esp
.text:00001BCB                 push    ecx
.text:00001BCC                 push    esi
.text:00001BCD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001BD4                 mov     [ebp+var_4], ecx
.text:00001BD7                 mov     eax, [ebp+var_4]
.text:00001BDA                 cmp     dword ptr [eax], 0
.text:00001BDD                 jz      short loc_1BFA
.text:00001BDF                 mov     ecx, [ebp+var_4]
.text:00001BE2                 mov     edx, [ecx]
.text:00001BE4                 mov     eax, [ebp+var_4]
.text:00001BE7                 mov     ecx, [eax]
.text:00001BE9                 mov     edx, [edx]
.text:00001BEB                 mov     esi, esp
.text:00001BED                 push    ecx
.text:00001BEE                 mov     eax, [edx+8]
.text:00001BF1                 call    eax
.text:00001BF3                 cmp     esi, esp
.text:00001BF5                 call    __RTC_CheckEsp
.text:00001BFA
.text:00001BFA loc_1BFA:                               ; CODE XREF: CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)+15j
.text:00001BFA                 pop     esi
.text:00001BFB                 add     esp, 4
.text:00001BFE                 cmp     ebp, esp
.text:00001C00                 call    __RTC_CheckEsp
.text:00001C05                 mov     esp, ebp
.text:00001C07                 pop     ebp
.text:00001C08                 retn
.text:00001C08 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:00001C08
.text:00001C08 ; ---------------------------------------------------------------------------
.text:00001C09                 align 4
.text:00001C09 _text           ends
.text:00001C09
.text:00001C0C ; ===========================================================================
.text:00001C0C
.text:00001C0C ; Segment type: Pure code
.text:00001C0C ; Segment permissions: Read/Execute
.text:00001C0C _text           segment para public 'CODE' use32
.text:00001C0C                 assume cs:_text
.text:00001C0C                 ;org 1C0Ch
.text:00001C0C ; COMDAT (pick any)
.text:00001C0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001C0C
.text:00001C0C ; =============== S U B R O U T I N E =======================================
.text:00001C0C
.text:00001C0C ; Attributes: bp-based frame
.text:00001C0C
.text:00001C0C ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator->(void)const
.text:00001C0C                 public ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
.text:00001C0C ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ proc near
.text:00001C0C                                         ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3EDp
.text:00001C0C
.text:00001C0C var_4           = dword ptr -4
.text:00001C0C
.text:00001C0C                 push    ebp
.text:00001C0D                 mov     ebp, esp
.text:00001C0F                 push    ecx
.text:00001C10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001C17                 mov     [ebp+var_4], ecx
.text:00001C1A                 mov     eax, [ebp+var_4]
.text:00001C1D                 mov     eax, [eax]
.text:00001C1F                 mov     esp, ebp
.text:00001C21                 pop     ebp
.text:00001C22                 retn
.text:00001C22 ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ endp
.text:00001C22
.text:00001C22 ; ---------------------------------------------------------------------------
.text:00001C23                 align 4
.text:00001C23 _text           ends
.text:00001C23
.text$yc:00001C24 ; ===========================================================================
.text$yc:00001C24
.text$yc:00001C24 ; Segment type: Pure code
.text$yc:00001C24 ; Segment permissions: Read/Execute
.text$yc:00001C24 _text$yc        segment para public 'CODE' use32
.text$yc:00001C24                 assume cs:_text$yc
.text$yc:00001C24                 ;org 1C24h
.text$yc:00001C24 ; COMDAT (pick any)
.text$yc:00001C24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:00001C24
.text$yc:00001C24 ; =============== S U B R O U T I N E =======================================
.text$yc:00001C24
.text$yc:00001C24 ; Attributes: bp-based frame
.text$yc:00001C24
.text$yc:00001C24 ; void __cdecl NArchive::NZ::`dynamic initializer for 'g_RegisterArc''(void)
.text$yc:00001C24 ??__Eg_RegisterArc@NZ@NArchive@@YAXXZ proc near
.text$yc:00001C24                                         ; DATA XREF: .CRT$XCU:_g_RegisterArc$initializer$o
.text$yc:00001C24                 push    ebp
.text$yc:00001C25                 mov     ebp, esp
.text$yc:00001C27                 mov     ecx, offset _g_RegisterArc ; this
.text$yc:00001C2C                 call    ??0CRegisterArc@NZ@NArchive@@QAE@XZ ; NArchive::NZ::CRegisterArc::CRegisterArc(void)
.text$yc:00001C31                 cmp     ebp, esp
.text$yc:00001C33                 call    __RTC_CheckEsp
.text$yc:00001C38                 pop     ebp
.text$yc:00001C39                 retn
.text$yc:00001C39 ??__Eg_RegisterArc@NZ@NArchive@@YAXXZ endp
.text$yc:00001C39
.text$yc:00001C39 ; ---------------------------------------------------------------------------
.text$yc:00001C3A                 align 4
.text$yc:00001C3A _text$yc        ends
.text$yc:00001C3A
.text:00001C3C ; ===========================================================================
.text:00001C3C
.text:00001C3C ; Segment type: Pure code
.text:00001C3C ; Segment permissions: Read/Execute
.text:00001C3C _text           segment para public 'CODE' use32
.text:00001C3C                 assume cs:_text
.text:00001C3C                 ;org 1C3Ch
.text:00001C3C ; COMDAT (pick any)
.text:00001C3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001C3C
.text:00001C3C ; =============== S U B R O U T I N E =======================================
.text:00001C3C
.text:00001C3C ; Attributes: bp-based frame
.text:00001C3C
.text:00001C3C ; _DWORD __thiscall NArchive::NZ::CRegisterArc::CRegisterArc(NArchive::NZ::CRegisterArc *__hidden this)
.text:00001C3C                 public ??0CRegisterArc@NZ@NArchive@@QAE@XZ
.text:00001C3C ??0CRegisterArc@NZ@NArchive@@QAE@XZ proc near
.text:00001C3C                                         ; CODE XREF: NArchive::NZ::`dynamic initializer for 'g_RegisterArc''(void)+8p
.text:00001C3C
.text:00001C3C var_4           = dword ptr -4
.text:00001C3C
.text:00001C3C                 push    ebp
.text:00001C3D                 mov     ebp, esp
.text:00001C3F                 push    ecx
.text:00001C40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001C47                 mov     [ebp+var_4], ecx
.text:00001C4A                 push    offset _g_ArcInfo ; struct CArcInfo *
.text:00001C4F                 call    ?RegisterArc@@YGXPBUCArcInfo@@@Z ; RegisterArc(CArcInfo const *)
.text:00001C54                 mov     eax, [ebp+var_4]
.text:00001C57                 add     esp, 4
.text:00001C5A                 cmp     ebp, esp
.text:00001C5C                 call    __RTC_CheckEsp
.text:00001C61                 mov     esp, ebp
.text:00001C63                 pop     ebp
.text:00001C64                 retn
.text:00001C64 ??0CRegisterArc@NZ@NArchive@@QAE@XZ endp
.text:00001C64
.text:00001C64 ; ---------------------------------------------------------------------------
.text:00001C65                 align 4
.text:00001C65 _text           ends
.text:00001C65
.bss:00001C68 ; ===========================================================================
.bss:00001C68
.bss:00001C68 ; Segment type: Uninitialized
.bss:00001C68 ; Segment permissions: Read/Write
.bss:00001C68 _bss            segment byte public 'BSS' use32
.bss:00001C68                 assume cs:_bss
.bss:00001C68                 ;org 1C68h
.bss:00001C68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00001C68 ; NArchive::NZ::CRegisterArc g_RegisterArc
.bss:00001C68 _g_RegisterArc  db    ? ;               ; DATA XREF: NArchive::NZ::`dynamic initializer for 'g_RegisterArc''(void)+3o
.bss:00001C69                 align 4
.bss:00001C69 _bss            ends
.bss:00001C69
.CRT$XCU:00001C6C ; ===========================================================================
.CRT$XCU:00001C6C
.CRT$XCU:00001C6C ; Segment type: Pure data
.CRT$XCU:00001C6C ; Segment permissions: Read
.CRT$XCU:00001C6C _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00001C6C                 assume cs:_CRT$XCU
.CRT$XCU:00001C6C                 ;org 1C6Ch
.CRT$XCU:00001C6C _g_RegisterArc$initializer$ dd offset ??__Eg_RegisterArc@NZ@NArchive@@YAXXZ ; NArchive::NZ::`dynamic initializer for 'g_RegisterArc''(void)
.CRT$XCU:00001C6C _CRT$XCU        ends
.CRT$XCU:00001C6C
UNDEF:00001C70 ; ===========================================================================
UNDEF:00001C70
UNDEF:00001C70 ; Segment type: Externs
UNDEF:00001C70 ; UNDEF
UNDEF:00001C70                 extrn __RTC_Shutdown:near
UNDEF:00001C70                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001C74                 extrn __RTC_InitBase:near
UNDEF:00001C74                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001C78 ; unsigned char const * const k7z_PROPID_To_VARTYPE
UNDEF:00001C78                 extrn ?k7z_PROPID_To_VARTYPE@@3QBEB:near
UNDEF:00001C78                                         ; DATA XREF: NArchive::NZ::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+24r
UNDEF:00001C7C ; __int32 __thiscall NWindows::NCOM::CPropVariant::Detach(NWindows::NCOM::CPropVariant *__hidden this, struct tagPROPVARIANT *)
UNDEF:00001C7C                 extrn ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z:near
UNDEF:00001C7C                                         ; CODE XREF: NArchive::NZ::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+4Ap
UNDEF:00001C7C                                         ; NArchive::NZ::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+53p
UNDEF:00001C80 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(bool)
UNDEF:00001C80                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z:near
UNDEF:00001C80                                         ; CODE XREF: NArchive::NZ::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+3Ep
UNDEF:00001C84                 extrn __RTC_CheckEsp:near
UNDEF:00001C84                                         ; CODE XREF: NArchive::NZ::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+77p
UNDEF:00001C84                                         ; NArchive::NZ::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+80p ...
UNDEF:00001C88 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001C88                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001C88                                         ; CODE XREF: NArchive::NZ::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+6Bp
UNDEF:00001C88                                         ; NArchive::NZ::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+74p ...
UNDEF:00001C8C ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:00001C8C                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:00001C8C                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:00001C90 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
UNDEF:00001C90                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:near
UNDEF:00001C90                                         ; CODE XREF: NArchive::NZ::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+47p
UNDEF:00001C94 ; bool NCompress::NZ::CheckStream(NCompress::NZ *__hidden this, const unsigned __int8 *, unsigned int)
UNDEF:00001C94                 extrn ?CheckStream@NZ@NCompress@@YG_NPBEI@Z:near
UNDEF:00001C94                                         ; CODE XREF: IsArc_Z(x,x)+25p
UNDEF:00001C94                                         ; NArchive::NZ::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+79p
UNDEF:00001C98 ; __int32 __stdcall ReadStream(struct ISequentialInStream *, void *, unsigned int *)
UNDEF:00001C98                 extrn ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z:near
UNDEF:00001C98                                         ; CODE XREF: NArchive::NZ::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+5Bp
UNDEF:00001C9C                 extrn ___security_cookie:near
UNDEF:00001C9C                                         ; DATA XREF: NArchive::NZ::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+2Ar
UNDEF:00001C9C                                         ; NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2Dr ...
UNDEF:00001CA0                 extrn ___CxxFrameHandler3:near
UNDEF:00001CA0                                         ; CODE XREF: __ehhandler$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z+23j
UNDEF:00001CA0                                         ; __ehhandler$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z+19j ...
UNDEF:00001CA4 ; __fastcall __security_check_cookie(x)
UNDEF:00001CA4                 extrn @__security_check_cookie@4:near
UNDEF:00001CA4                                         ; CODE XREF: NArchive::NZ::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+146p
UNDEF:00001CA4                                         ; __ehhandler$?Open@CHandler@NZ@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z+Fp ...
UNDEF:00001CA8 ; void __cdecl operator delete(void *)
UNDEF:00001CA8                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3+7p
UNDEF:00001CA8                                         ; __unwindfunclet$?Extract@CHandler@NZ@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5+7p ...
UNDEF:00001CAC ; void __thiscall CLocalProgress::Init(CLocalProgress *__hidden this, struct IProgress *, bool)
UNDEF:00001CAC                 extrn ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:near
UNDEF:00001CAC                                         ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2DBp
UNDEF:00001CB0 ; public: __thiscall CLocalProgress::CLocalProgress(void)
UNDEF:00001CB0                 extrn ??0CLocalProgress@@QAE@XZ:near
UNDEF:00001CB0                                         ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+286p
UNDEF:00001CB4 ; void *__cdecl operator new(unsigned int)
UNDEF:00001CB4                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1B1p
UNDEF:00001CB4                                         ; NArchive::NZ::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+259p ...
UNDEF:00001CB8 ; const type_info::`vftable'
UNDEF:00001CB8                 extrn ??_7type_info@@6B@:near
UNDEF:00001CB8                                         ; DATA XREF: .data:NCompress::NZ::CDecoder `RTTI Type Descriptor'o
UNDEF:00001CB8                                         ; .data:ICompressCoder `RTTI Type Descriptor'o ...
UNDEF:00001CBC ; public: virtual long __stdcall NCompress::NZ::CDecoder::Code(struct ISequentialInStream *, struct ISequentialOutStream *, unsigned __int64 const *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:00001CBC                 extrn ?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:near
UNDEF:00001CBC                                         ; DATA XREF: .rdata:00000DD0o
UNDEF:00001CC0                 extrn _IID_ICompressCoder:near
UNDEF:00001CC0                                         ; DATA XREF: NCompress::NZ::CDecoder::QueryInterface(_GUID const &,void * *):loc_FA4o
UNDEF:00001CC4 ; const IID IID_IUnknown
UNDEF:00001CC4                 extrn _IID_IUnknown:near
UNDEF:00001CC4                                         ; DATA XREF: NCompress::NZ::CDecoder::QueryInterface(_GUID const &,void * *)+Co
UNDEF:00001CC4                                         ; CDummyOutStream::QueryInterface(_GUID const &,void * *)+Co ...
UNDEF:00001CC8 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00001CC8                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00001CCC                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:00001CCC                                         ; .rdata:00001100o ...
UNDEF:00001CD0 ; _DWORD __thiscall NCompress::NZ::CDecoder::~CDecoder(NCompress::NZ::CDecoder *__hidden this)
UNDEF:00001CD0                 extrn ??1CDecoder@NZ@NCompress@@QAE@XZ:near
UNDEF:00001CD0                                         ; CODE XREF: NCompress::NZ::CDecoder::`scalar deleting destructor'(uint)+11p
UNDEF:00001CD4 ; public: virtual long __stdcall CDummyOutStream::Write(void const *, unsigned int, unsigned int *)
UNDEF:00001CD4                 extrn ?Write@CDummyOutStream@@UAGJPBXIPAI@Z:near
UNDEF:00001CD4                                         ; DATA XREF: .rdata:00001224o
UNDEF:00001CD8                 extrn _IID_IInArchive:near
UNDEF:00001CD8                                         ; DATA XREF: NArchive::NZ::CHandler::QueryInterface(_GUID const &,void * *):loc_1618o
UNDEF:00001CDC ; void __stdcall RegisterArc(const struct CArcInfo *)
UNDEF:00001CDC                 extrn ?RegisterArc@@YGXPBUCArcInfo@@@Z:near
UNDEF:00001CDC                                         ; CODE XREF: NArchive::NZ::CRegisterArc::CRegisterArc(void)+13p
UNDEF:00001CDC
UNDEF:00001CDC
UNDEF:00001CDC                 end