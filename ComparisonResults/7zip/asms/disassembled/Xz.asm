.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 0CD470D1648B7E608126A87219A7126E
.rdata:00000000 ; Input CRC32 : 9D726D90
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Xz.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000                 public _XZ_SIG
.rdata:00000000 _XZ_SIG         db 0FDh ; Â²
.rdata:00000001                 db  37h ; 7
.rdata:00000002                 db  7Ah ; z
.rdata:00000003                 db  58h ; X
.rdata:00000004                 db  5Ah ; Z
.rdata:00000005                 db    0
.rdata:00000006                 db    0
.rdata:00000007                 db    0
.rdata:00000008                 public _XZ_FOOTER_SIG
.rdata:00000008 _XZ_FOOTER_SIG  db  59h ; Y
.rdata:00000009                 db  5Ah ; Z
.rdata:0000000A                 align 4
.rdata:0000000A _rdata          ends
.rdata:0000000A
.text:0000000C ; ===========================================================================
.text:0000000C
.text:0000000C ; Segment type: Pure code
.text:0000000C ; Segment permissions: Read/Execute
.text:0000000C _text           segment para public 'CODE' use32
.text:0000000C                 assume cs:_text
.text:0000000C                 ;org 0Ch
.text:0000000C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000000C
.text:0000000C ; =============== S U B R O U T I N E =======================================
.text:0000000C
.text:0000000C ; Attributes: bp-based frame
.text:0000000C
.text:0000000C ; __stdcall Xz_WriteVarInt(x, x, x)
.text:0000000C                 public _Xz_WriteVarInt@12
.text:0000000C _Xz_WriteVarInt@12 proc near
.text:0000000C
.text:0000000C var_4           = dword ptr -4
.text:0000000C arg_0           = dword ptr  8
.text:0000000C arg_4           = dword ptr  0Ch
.text:0000000C arg_8           = dword ptr  10h
.text:0000000C
.text:0000000C                 push    ebp
.text:0000000D                 mov     ebp, esp
.text:0000000F                 push    ecx
.text:00000010                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000017                 mov     [ebp+var_4], 0
.text:0000001E
.text:0000001E loc_1E:                                 ; CODE XREF: Xz_WriteVarInt(x,x,x)+4Dj
.text:0000001E                 mov     eax, [ebp+arg_4]
.text:00000021                 and     eax, 7Fh
.text:00000024                 mov     ecx, [ebp+arg_8]
.text:00000027                 and     ecx, 0
.text:0000002A                 or      eax, 80h
.text:0000002F                 mov     edx, [ebp+arg_0]
.text:00000032                 add     edx, [ebp+var_4]
.text:00000035                 mov     [edx], al
.text:00000037                 mov     eax, [ebp+var_4]
.text:0000003A                 add     eax, 1
.text:0000003D                 mov     [ebp+var_4], eax
.text:00000040                 mov     eax, [ebp+arg_4]
.text:00000043                 mov     edx, [ebp+arg_8]
.text:00000046                 mov     cl, 7
.text:00000048                 call    __aullshr
.text:0000004D                 mov     [ebp+arg_4], eax
.text:00000050                 mov     [ebp+arg_8], edx
.text:00000053                 mov     ecx, [ebp+arg_4]
.text:00000056                 or      ecx, [ebp+arg_8]
.text:00000059                 jnz     short loc_1E
.text:0000005B                 mov     edx, [ebp+arg_0]
.text:0000005E                 add     edx, [ebp+var_4]
.text:00000061                 movzx   eax, byte ptr [edx-1]
.text:00000065                 and     eax, 7Fh
.text:00000068                 mov     ecx, [ebp+arg_0]
.text:0000006B                 add     ecx, [ebp+var_4]
.text:0000006E                 mov     [ecx-1], al
.text:00000071                 mov     eax, [ebp+var_4]
.text:00000074                 add     esp, 4
.text:00000077                 cmp     ebp, esp
.text:00000079                 call    __RTC_CheckEsp
.text:0000007E                 mov     esp, ebp
.text:00000080                 pop     ebp
.text:00000081                 retn    0Ch
.text:00000081 _Xz_WriteVarInt@12 endp
.text:00000081
.text:00000081 ; ---------------------------------------------------------------------------
.text:00000084                 db 8 dup(0CCh)
.text:0000008C
.text:0000008C ; =============== S U B R O U T I N E =======================================
.text:0000008C
.text:0000008C ; Attributes: bp-based frame
.text:0000008C
.text:0000008C ; __stdcall Xz_Construct(x)
.text:0000008C                 public _Xz_Construct@4
.text:0000008C _Xz_Construct@4 proc near
.text:0000008C
.text:0000008C arg_0           = dword ptr  8
.text:0000008C
.text:0000008C                 push    ebp
.text:0000008D                 mov     ebp, esp
.text:0000008F                 mov     eax, [ebp+arg_0]
.text:00000092                 mov     dword ptr [eax+8], 0
.text:00000099                 mov     ecx, [ebp+arg_0]
.text:0000009C                 mov     dword ptr [ecx+4], 0
.text:000000A3                 mov     edx, [ebp+arg_0]
.text:000000A6                 mov     dword ptr [edx+0Ch], 0
.text:000000AD                 xor     eax, eax
.text:000000AF                 mov     ecx, [ebp+arg_0]
.text:000000B2                 mov     [ecx], ax
.text:000000B5                 pop     ebp
.text:000000B6                 retn    4
.text:000000B6 _Xz_Construct@4 endp
.text:000000B6
.text:000000B6 ; ---------------------------------------------------------------------------
.text:000000B9                 align 4
.text:000000BC
.text:000000BC ; =============== S U B R O U T I N E =======================================
.text:000000BC
.text:000000BC ; Attributes: bp-based frame
.text:000000BC
.text:000000BC ; __stdcall Xz_Free(x, x)
.text:000000BC                 public _Xz_Free@8
.text:000000BC _Xz_Free@8      proc near
.text:000000BC
.text:000000BC arg_0           = dword ptr  8
.text:000000BC arg_4           = dword ptr  0Ch
.text:000000BC
.text:000000BC                 push    ebp
.text:000000BD                 mov     ebp, esp
.text:000000BF                 push    esi
.text:000000C0                 mov     esi, esp
.text:000000C2                 mov     eax, [ebp+arg_0]
.text:000000C5                 mov     ecx, [eax+0Ch]
.text:000000C8                 push    ecx
.text:000000C9                 mov     edx, [ebp+arg_4]
.text:000000CC                 push    edx
.text:000000CD                 mov     eax, [ebp+arg_4]
.text:000000D0                 mov     ecx, [eax+4]
.text:000000D3                 call    ecx
.text:000000D5                 cmp     esi, esp
.text:000000D7                 call    __RTC_CheckEsp
.text:000000DC                 mov     edx, [ebp+arg_0]
.text:000000DF                 mov     dword ptr [edx+8], 0
.text:000000E6                 mov     eax, [ebp+arg_0]
.text:000000E9                 mov     dword ptr [eax+4], 0
.text:000000F0                 mov     ecx, [ebp+arg_0]
.text:000000F3                 mov     dword ptr [ecx+0Ch], 0
.text:000000FA                 pop     esi
.text:000000FB                 cmp     ebp, esp
.text:000000FD                 call    __RTC_CheckEsp
.text:00000102                 pop     ebp
.text:00000103                 retn    8
.text:00000103 _Xz_Free@8      endp
.text:00000103
.text:00000103 ; ---------------------------------------------------------------------------
.text:00000106                 db 6 dup(0CCh)
.text:0000010C
.text:0000010C ; =============== S U B R O U T I N E =======================================
.text:0000010C
.text:0000010C ; Attributes: bp-based frame
.text:0000010C
.text:0000010C ; __stdcall XzFlags_GetCheckSize(x)
.text:0000010C                 public _XzFlags_GetCheckSize@4
.text:0000010C _XzFlags_GetCheckSize@4 proc near
.text:0000010C
.text:0000010C var_8           = dword ptr -8
.text:0000010C var_4           = dword ptr -4
.text:0000010C arg_0           = word ptr  8
.text:0000010C
.text:0000010C                 push    ebp
.text:0000010D                 mov     ebp, esp
.text:0000010F                 sub     esp, 8
.text:00000112                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000119                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000120                 movzx   eax, [ebp+arg_0]
.text:00000124                 and     eax, 0Fh
.text:00000127                 mov     [ebp+var_4], eax
.text:0000012A                 jnz     short loc_135
.text:0000012C                 mov     [ebp+var_8], 0
.text:00000133                 jmp     short loc_150
.text:00000135 ; ---------------------------------------------------------------------------
.text:00000135
.text:00000135 loc_135:                                ; CODE XREF: XzFlags_GetCheckSize(x)+1Ej
.text:00000135                 mov     eax, [ebp+var_4]
.text:00000138                 sub     eax, 1
.text:0000013B                 xor     edx, edx
.text:0000013D                 mov     ecx, 3
.text:00000142                 div     ecx
.text:00000144                 mov     edx, 4
.text:00000149                 mov     ecx, eax
.text:0000014B                 shl     edx, cl
.text:0000014D                 mov     [ebp+var_8], edx
.text:00000150
.text:00000150 loc_150:                                ; CODE XREF: XzFlags_GetCheckSize(x)+27j
.text:00000150                 mov     eax, [ebp+var_8]
.text:00000153                 mov     esp, ebp
.text:00000155                 pop     ebp
.text:00000156                 retn    4
.text:00000156 _XzFlags_GetCheckSize@4 endp
.text:00000156
.text:00000156 ; ---------------------------------------------------------------------------
.text:00000159                 align 4
.text:0000015C
.text:0000015C ; =============== S U B R O U T I N E =======================================
.text:0000015C
.text:0000015C ; Attributes: bp-based frame
.text:0000015C
.text:0000015C ; __stdcall XzCheck_Init(x, x)
.text:0000015C                 public _XzCheck_Init@8
.text:0000015C _XzCheck_Init@8 proc near
.text:0000015C
.text:0000015C var_4           = dword ptr -4
.text:0000015C arg_0           = dword ptr  8
.text:0000015C arg_4           = dword ptr  0Ch
.text:0000015C
.text:0000015C                 push    ebp
.text:0000015D                 mov     ebp, esp
.text:0000015F                 push    ecx
.text:00000160                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000167                 mov     eax, [ebp+arg_0]
.text:0000016A                 mov     ecx, [ebp+arg_4]
.text:0000016D                 mov     [eax], ecx
.text:0000016F                 mov     edx, [ebp+arg_4]
.text:00000172                 mov     [ebp+var_4], edx
.text:00000175                 cmp     [ebp+var_4], 1
.text:00000179                 jz      short loc_189
.text:0000017B                 cmp     [ebp+var_4], 4
.text:0000017F                 jz      short loc_195
.text:00000181                 cmp     [ebp+var_4], 0Ah
.text:00000185                 jz      short loc_1A8
.text:00000187                 jmp     short loc_1B4
.text:00000189 ; ---------------------------------------------------------------------------
.text:00000189
.text:00000189 loc_189:                                ; CODE XREF: XzCheck_Init(x,x)+1Dj
.text:00000189                 mov     eax, [ebp+arg_0]
.text:0000018C                 mov     dword ptr [eax+4], 0FFFFFFFFh
.text:00000193                 jmp     short loc_1B4
.text:00000195 ; ---------------------------------------------------------------------------
.text:00000195
.text:00000195 loc_195:                                ; CODE XREF: XzCheck_Init(x,x)+23j
.text:00000195                 mov     ecx, [ebp+arg_0]
.text:00000198                 mov     dword ptr [ecx+8], 0FFFFFFFFh
.text:0000019F                 mov     dword ptr [ecx+0Ch], 0FFFFFFFFh
.text:000001A6                 jmp     short loc_1B4
.text:000001A8 ; ---------------------------------------------------------------------------
.text:000001A8
.text:000001A8 loc_1A8:                                ; CODE XREF: XzCheck_Init(x,x)+29j
.text:000001A8                 mov     edx, [ebp+arg_0]
.text:000001AB                 add     edx, 10h
.text:000001AE                 push    edx
.text:000001AF                 call    _Sha256_Init@4  ; Sha256_Init(x)
.text:000001B4
.text:000001B4 loc_1B4:                                ; CODE XREF: XzCheck_Init(x,x)+2Bj
.text:000001B4                                         ; XzCheck_Init(x,x)+37j ...
.text:000001B4                 add     esp, 4
.text:000001B7                 cmp     ebp, esp
.text:000001B9                 call    __RTC_CheckEsp
.text:000001BE                 mov     esp, ebp
.text:000001C0                 pop     ebp
.text:000001C1                 retn    8
.text:000001C1 _XzCheck_Init@8 endp
.text:000001C1
.text:000001C1 ; ---------------------------------------------------------------------------
.text:000001C4                 db 8 dup(0CCh)
.text:000001CC
.text:000001CC ; =============== S U B R O U T I N E =======================================
.text:000001CC
.text:000001CC ; Attributes: bp-based frame
.text:000001CC
.text:000001CC ; __stdcall XzCheck_Update(x, x, x)
.text:000001CC                 public _XzCheck_Update@12
.text:000001CC _XzCheck_Update@12 proc near
.text:000001CC
.text:000001CC var_4           = dword ptr -4
.text:000001CC arg_0           = dword ptr  8
.text:000001CC arg_4           = dword ptr  0Ch
.text:000001CC arg_8           = dword ptr  10h
.text:000001CC
.text:000001CC                 push    ebp
.text:000001CD                 mov     ebp, esp
.text:000001CF                 push    ecx
.text:000001D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001D7                 mov     eax, [ebp+arg_0]
.text:000001DA                 mov     ecx, [eax]
.text:000001DC                 mov     [ebp+var_4], ecx
.text:000001DF                 cmp     [ebp+var_4], 1
.text:000001E3                 jz      short loc_1F3
.text:000001E5                 cmp     [ebp+var_4], 4
.text:000001E9                 jz      short loc_20D
.text:000001EB                 cmp     [ebp+var_4], 0Ah
.text:000001EF                 jz      short loc_22E
.text:000001F1                 jmp     short loc_242
.text:000001F3 ; ---------------------------------------------------------------------------
.text:000001F3
.text:000001F3 loc_1F3:                                ; CODE XREF: XzCheck_Update(x,x,x)+17j
.text:000001F3                 mov     edx, [ebp+arg_8]
.text:000001F6                 push    edx
.text:000001F7                 mov     edx, [ebp+arg_4]
.text:000001FA                 mov     eax, [ebp+arg_0]
.text:000001FD                 mov     ecx, [eax+4]
.text:00000200                 call    @CrcUpdate@12   ; CrcUpdate(x,x,x)
.text:00000205                 mov     ecx, [ebp+arg_0]
.text:00000208                 mov     [ecx+4], eax
.text:0000020B                 jmp     short loc_242
.text:0000020D ; ---------------------------------------------------------------------------
.text:0000020D
.text:0000020D loc_20D:                                ; CODE XREF: XzCheck_Update(x,x,x)+1Dj
.text:0000020D                 mov     edx, [ebp+arg_0]
.text:00000210                 mov     eax, [edx+0Ch]
.text:00000213                 push    eax
.text:00000214                 mov     ecx, [edx+8]
.text:00000217                 push    ecx
.text:00000218                 mov     edx, [ebp+arg_8]
.text:0000021B                 mov     ecx, [ebp+arg_4]
.text:0000021E                 call    @Crc64Update@16 ; Crc64Update(x,x,x,x)
.text:00000223                 mov     ecx, [ebp+arg_0]
.text:00000226                 mov     [ecx+8], eax
.text:00000229                 mov     [ecx+0Ch], edx
.text:0000022C                 jmp     short loc_242
.text:0000022E ; ---------------------------------------------------------------------------
.text:0000022E
.text:0000022E loc_22E:                                ; CODE XREF: XzCheck_Update(x,x,x)+23j
.text:0000022E                 mov     edx, [ebp+arg_8]
.text:00000231                 push    edx
.text:00000232                 mov     eax, [ebp+arg_4]
.text:00000235                 push    eax
.text:00000236                 mov     ecx, [ebp+arg_0]
.text:00000239                 add     ecx, 10h
.text:0000023C                 push    ecx
.text:0000023D                 call    _Sha256_Update@12 ; Sha256_Update(x,x,x)
.text:00000242
.text:00000242 loc_242:                                ; CODE XREF: XzCheck_Update(x,x,x)+25j
.text:00000242                                         ; XzCheck_Update(x,x,x)+3Fj ...
.text:00000242                 add     esp, 4
.text:00000245                 cmp     ebp, esp
.text:00000247                 call    __RTC_CheckEsp
.text:0000024C                 mov     esp, ebp
.text:0000024E                 pop     ebp
.text:0000024F                 retn    0Ch
.text:0000024F _XzCheck_Update@12 endp
.text:0000024F
.text:0000024F ; ---------------------------------------------------------------------------
.text:00000252                 db 0Ah dup(0CCh)
.text:0000025C
.text:0000025C ; =============== S U B R O U T I N E =======================================
.text:0000025C
.text:0000025C ; Attributes: bp-based frame
.text:0000025C
.text:0000025C ; __stdcall XzCheck_Final(x, x)
.text:0000025C                 public _XzCheck_Final@8
.text:0000025C _XzCheck_Final@8 proc near
.text:0000025C
.text:0000025C var_10          = dword ptr -10h
.text:0000025C var_C           = dword ptr -0Ch
.text:0000025C var_8           = dword ptr -8
.text:0000025C var_4           = dword ptr -4
.text:0000025C arg_0           = dword ptr  8
.text:0000025C arg_4           = dword ptr  0Ch
.text:0000025C
.text:0000025C                 push    ebp
.text:0000025D                 mov     ebp, esp
.text:0000025F                 sub     esp, 10h
.text:00000262                 mov     eax, 0CCCCCCCCh
.text:00000267                 mov     [ebp+var_10], eax
.text:0000026A                 mov     [ebp+var_C], eax
.text:0000026D                 mov     [ebp+var_8], eax
.text:00000270                 mov     [ebp+var_4], eax
.text:00000273                 mov     eax, [ebp+arg_0]
.text:00000276                 mov     ecx, [eax]
.text:00000278                 mov     [ebp+var_10], ecx
.text:0000027B                 cmp     [ebp+var_10], 1
.text:0000027F                 jz      short loc_28F
.text:00000281                 cmp     [ebp+var_10], 4
.text:00000285                 jz      short loc_29F
.text:00000287                 cmp     [ebp+var_10], 0Ah
.text:0000028B                 jz      short loc_2F9
.text:0000028D                 jmp     short loc_30B
.text:0000028F ; ---------------------------------------------------------------------------
.text:0000028F
.text:0000028F loc_28F:                                ; CODE XREF: XzCheck_Final(x,x)+23j
.text:0000028F                 mov     edx, [ebp+arg_0]
.text:00000292                 mov     eax, [edx+4]
.text:00000295                 xor     eax, 0FFFFFFFFh
.text:00000298                 mov     ecx, [ebp+arg_4]
.text:0000029B                 mov     [ecx], eax
.text:0000029D                 jmp     short loc_30F
.text:0000029F ; ---------------------------------------------------------------------------
.text:0000029F
.text:0000029F loc_29F:                                ; CODE XREF: XzCheck_Final(x,x)+29j
.text:0000029F                 mov     edx, [ebp+arg_0]
.text:000002A2                 mov     eax, [edx+8]
.text:000002A5                 xor     eax, 0FFFFFFFFh
.text:000002A8                 mov     ecx, [edx+0Ch]
.text:000002AB                 xor     ecx, 0FFFFFFFFh
.text:000002AE                 mov     [ebp+var_C], eax
.text:000002B1                 mov     [ebp+var_8], ecx
.text:000002B4                 mov     [ebp+var_4], 0
.text:000002BB                 jmp     short loc_2D9
.text:000002BD ; ---------------------------------------------------------------------------
.text:000002BD
.text:000002BD loc_2BD:                                ; CODE XREF: XzCheck_Final(x,x)+99j
.text:000002BD                 mov     edx, [ebp+var_4]
.text:000002C0                 add     edx, 1
.text:000002C3                 mov     [ebp+var_4], edx
.text:000002C6                 mov     eax, [ebp+var_C]
.text:000002C9                 mov     edx, [ebp+var_8]
.text:000002CC                 mov     cl, 8
.text:000002CE                 call    __aullshr
.text:000002D3                 mov     [ebp+var_C], eax
.text:000002D6                 mov     [ebp+var_8], edx
.text:000002D9
.text:000002D9 loc_2D9:                                ; CODE XREF: XzCheck_Final(x,x)+5Fj
.text:000002D9                 cmp     [ebp+var_4], 8
.text:000002DD                 jge     short loc_2F7
.text:000002DF                 mov     eax, [ebp+var_C]
.text:000002E2                 and     eax, 0FFh
.text:000002E7                 mov     ecx, [ebp+var_8]
.text:000002EA                 and     ecx, 0
.text:000002ED                 mov     edx, [ebp+arg_4]
.text:000002F0                 add     edx, [ebp+var_4]
.text:000002F3                 mov     [edx], al
.text:000002F5                 jmp     short loc_2BD
.text:000002F7 ; ---------------------------------------------------------------------------
.text:000002F7
.text:000002F7 loc_2F7:                                ; CODE XREF: XzCheck_Final(x,x)+81j
.text:000002F7                 jmp     short loc_30F
.text:000002F9 ; ---------------------------------------------------------------------------
.text:000002F9
.text:000002F9 loc_2F9:                                ; CODE XREF: XzCheck_Final(x,x)+2Fj
.text:000002F9                 mov     eax, [ebp+arg_4]
.text:000002FC                 push    eax
.text:000002FD                 mov     ecx, [ebp+arg_0]
.text:00000300                 add     ecx, 10h
.text:00000303                 push    ecx
.text:00000304                 call    _Sha256_Final@8 ; Sha256_Final(x,x)
.text:00000309                 jmp     short loc_30F
.text:0000030B ; ---------------------------------------------------------------------------
.text:0000030B
.text:0000030B loc_30B:                                ; CODE XREF: XzCheck_Final(x,x)+31j
.text:0000030B                 xor     eax, eax
.text:0000030D                 jmp     short loc_314
.text:0000030F ; ---------------------------------------------------------------------------
.text:0000030F
.text:0000030F loc_30F:                                ; CODE XREF: XzCheck_Final(x,x)+41j
.text:0000030F                                         ; XzCheck_Final(x,x):loc_2F7j ...
.text:0000030F                 mov     eax, 1
.text:00000314
.text:00000314 loc_314:                                ; CODE XREF: XzCheck_Final(x,x)+B1j
.text:00000314                 add     esp, 10h
.text:00000317                 cmp     ebp, esp
.text:00000319                 call    __RTC_CheckEsp
.text:0000031E                 mov     esp, ebp
.text:00000320                 pop     ebp
.text:00000321                 retn    8
.text:00000321 _XzCheck_Final@8 endp
.text:00000321
.text:00000321 _text           ends
.text:00000321
.rtc$TMZ:00000324 ; ===========================================================================
.rtc$TMZ:00000324
.rtc$TMZ:00000324 ; Segment type: Pure data
.rtc$TMZ:00000324 ; Segment permissions: Read
.rtc$TMZ:00000324 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000324                 assume cs:_rtc$TMZ
.rtc$TMZ:00000324                 ;org 324h
.rtc$TMZ:00000324 ; COMDAT (pick any)
.rtc$TMZ:00000324 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000324 _rtc$TMZ        ends
.rtc$TMZ:00000324
.rtc$IMZ:00000328 ; ===========================================================================
.rtc$IMZ:00000328
.rtc$IMZ:00000328 ; Segment type: Pure data
.rtc$IMZ:00000328 ; Segment permissions: Read
.rtc$IMZ:00000328 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000328                 assume cs:_rtc$IMZ
.rtc$IMZ:00000328                 ;org 328h
.rtc$IMZ:00000328 ; COMDAT (pick any)
.rtc$IMZ:00000328 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000328 _rtc$IMZ        ends
.rtc$IMZ:00000328
UNDEF:00000330 ; ===========================================================================
UNDEF:00000330
UNDEF:00000330 ; Segment type: Externs
UNDEF:00000330 ; UNDEF
UNDEF:00000330                 extrn __RTC_CheckEsp:near
UNDEF:00000330                                         ; CODE XREF: Xz_WriteVarInt(x,x,x)+6Dp
UNDEF:00000330                                         ; Xz_Free(x,x)+1Bp ...
UNDEF:00000334                 extrn __aullshr:near    ; CODE XREF: Xz_WriteVarInt(x,x,x)+3Cp
UNDEF:00000334                                         ; XzCheck_Final(x,x)+72p
UNDEF:00000338                 extrn __RTC_Shutdown:near
UNDEF:00000338                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000033C                 extrn __RTC_InitBase:near
UNDEF:0000033C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000340 ; __stdcall Sha256_Init(x)
UNDEF:00000340                 extrn _Sha256_Init@4:near ; CODE XREF: XzCheck_Init(x,x)+53p
UNDEF:00000344 ; __stdcall Sha256_Update(x, x, x)
UNDEF:00000344                 extrn _Sha256_Update@12:near
UNDEF:00000344                                         ; CODE XREF: XzCheck_Update(x,x,x)+71p
UNDEF:00000348 ; __fastcall Crc64Update(x, x, x, x)
UNDEF:00000348                 extrn @Crc64Update@16:near
UNDEF:00000348                                         ; CODE XREF: XzCheck_Update(x,x,x)+52p
UNDEF:0000034C ; __fastcall CrcUpdate(x, x, x)
UNDEF:0000034C                 extrn @CrcUpdate@12:near
UNDEF:0000034C                                         ; CODE XREF: XzCheck_Update(x,x,x)+34p
UNDEF:00000350 ; __stdcall Sha256_Final(x, x)
UNDEF:00000350                 extrn _Sha256_Final@8:near
UNDEF:00000350                                         ; CODE XREF: XzCheck_Final(x,x)+A8p
UNDEF:00000350
UNDEF:00000350
UNDEF:00000350                 end