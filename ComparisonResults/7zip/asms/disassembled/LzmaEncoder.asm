.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 6B2C93D191F53059A48D68DFD1197ACF
.text:00000000 ; Input CRC32 : CB3CB70B
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\LzmaEncoder.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; _DWORD __thiscall NCompress::NLzma::CEncoder::CEncoder(NCompress::NLzma::CEncoder *__hidden this)
.text:00000000                 public ??0CEncoder@NLzma@NCompress@@QAE@XZ
.text:00000000 ??0CEncoder@NLzma@NCompress@@QAE@XZ proc near
.text:00000000
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 8
.text:00000006                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000000D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000014                 mov     [ebp+var_4], ecx
.text:00000017                 mov     ecx, [ebp+var_4] ; this
.text:0000001A                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:0000001F                 mov     ecx, [ebp+var_4]
.text:00000022                 add     ecx, 4          ; this
.text:00000025                 call    ??0ICompressSetCoderProperties@@QAE@XZ ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)
.text:0000002A                 mov     ecx, [ebp+var_4]
.text:0000002D                 add     ecx, 8          ; this
.text:00000030                 call    ??0ICompressWriteCoderProperties@@QAE@XZ ; ICompressWriteCoderProperties::ICompressWriteCoderProperties(void)
.text:00000035                 mov     ecx, [ebp+var_4]
.text:00000038                 add     ecx, 0Ch        ; this
.text:0000003B                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000040                 mov     eax, [ebp+var_4]
.text:00000043                 mov     dword ptr [eax], offset ??_7CEncoder@NLzma@NCompress@@6BICompressCoder@@@ ; const NCompress::NLzma::CEncoder::`vftable'{for `ICompressCoder'}
.text:00000049                 mov     ecx, [ebp+var_4]
.text:0000004C                 mov     dword ptr [ecx+4], offset ??_7CEncoder@NLzma@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NLzma::CEncoder::`vftable'{for `ICompressSetCoderProperties'}
.text:00000053                 mov     edx, [ebp+var_4]
.text:00000056                 mov     dword ptr [edx+8], offset ??_7CEncoder@NLzma@NCompress@@6BICompressWriteCoderProperties@@@ ; const NCompress::NLzma::CEncoder::`vftable'{for `ICompressWriteCoderProperties'}
.text:0000005D                 mov     eax, [ebp+var_4]
.text:00000060                 mov     dword ptr [eax+10h], 0
.text:00000067                 push    offset _g_Alloc
.text:0000006C                 call    _LzmaEnc_Create@4 ; LzmaEnc_Create(x)
.text:00000071                 mov     ecx, [ebp+var_4]
.text:00000074                 mov     [ecx+10h], eax
.text:00000077                 mov     edx, [ebp+var_4]
.text:0000007A                 cmp     dword ptr [edx+10h], 0
.text:0000007E                 jnz     short loc_95
.text:00000080                 mov     [ebp+var_8], 1
.text:00000087                 push    offset __TI1H
.text:0000008C                 lea     eax, [ebp+var_8]
.text:0000008F                 push    eax
.text:00000090                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00000095 ; ---------------------------------------------------------------------------
.text:00000095
.text:00000095 loc_95:                                 ; CODE XREF: NCompress::NLzma::CEncoder::CEncoder(void)+7Ej
.text:00000095                 mov     eax, [ebp+var_4]
.text:00000098                 add     esp, 8
.text:0000009B                 cmp     ebp, esp
.text:0000009D                 call    __RTC_CheckEsp
.text:000000A2                 mov     esp, ebp
.text:000000A4                 pop     ebp
.text:000000A5                 retn
.text:000000A5 ??0CEncoder@NLzma@NCompress@@QAE@XZ endp
.text:000000A5
.text:000000A5 ; ---------------------------------------------------------------------------
.text:000000A6                 align 10h
.text:000000B0
.text:000000B0 ; =============== S U B R O U T I N E =======================================
.text:000000B0
.text:000000B0 ; Attributes: bp-based frame
.text:000000B0
.text:000000B0 ; _DWORD __thiscall NCompress::NLzma::CEncoder::~CEncoder(NCompress::NLzma::CEncoder *__hidden this)
.text:000000B0                 public ??1CEncoder@NLzma@NCompress@@UAE@XZ
.text:000000B0 ??1CEncoder@NLzma@NCompress@@UAE@XZ proc near
.text:000000B0                                         ; CODE XREF: NCompress::NLzma::CEncoder::`scalar deleting destructor'(uint)+11p
.text:000000B0
.text:000000B0 var_4           = dword ptr -4
.text:000000B0
.text:000000B0                 push    ebp
.text:000000B1                 mov     ebp, esp
.text:000000B3                 push    ecx
.text:000000B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000BB                 mov     [ebp+var_4], ecx
.text:000000BE                 mov     eax, [ebp+var_4]
.text:000000C1                 mov     dword ptr [eax], offset ??_7CEncoder@NLzma@NCompress@@6BICompressCoder@@@ ; const NCompress::NLzma::CEncoder::`vftable'{for `ICompressCoder'}
.text:000000C7                 mov     ecx, [ebp+var_4]
.text:000000CA                 mov     dword ptr [ecx+4], offset ??_7CEncoder@NLzma@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NLzma::CEncoder::`vftable'{for `ICompressSetCoderProperties'}
.text:000000D1                 mov     edx, [ebp+var_4]
.text:000000D4                 mov     dword ptr [edx+8], offset ??_7CEncoder@NLzma@NCompress@@6BICompressWriteCoderProperties@@@ ; const NCompress::NLzma::CEncoder::`vftable'{for `ICompressWriteCoderProperties'}
.text:000000DB                 mov     eax, [ebp+var_4]
.text:000000DE                 cmp     dword ptr [eax+10h], 0
.text:000000E2                 jz      short loc_FA
.text:000000E4                 push    offset _g_BigAlloc
.text:000000E9                 push    offset _g_Alloc
.text:000000EE                 mov     ecx, [ebp+var_4]
.text:000000F1                 mov     edx, [ecx+10h]
.text:000000F4                 push    edx
.text:000000F5                 call    _LzmaEnc_Destroy@12 ; LzmaEnc_Destroy(x,x,x)
.text:000000FA
.text:000000FA loc_FA:                                 ; CODE XREF: NCompress::NLzma::CEncoder::~CEncoder(void)+32j
.text:000000FA                 add     esp, 4
.text:000000FD                 cmp     ebp, esp
.text:000000FF                 call    __RTC_CheckEsp
.text:00000104                 mov     esp, ebp
.text:00000106                 pop     ebp
.text:00000107                 retn
.text:00000107 ??1CEncoder@NLzma@NCompress@@UAE@XZ endp
.text:00000107
.text:00000107 ; ---------------------------------------------------------------------------
.text:00000108                 align 10h
.text:00000110
.text:00000110 ; =============== S U B R O U T I N E =======================================
.text:00000110
.text:00000110 ; Attributes: bp-based frame
.text:00000110
.text:00000110 ; __int32 __stdcall NCompress::NLzma::SetLzmaProp(NCompress::NLzma *this, unsigned __int32, const struct tagPROPVARIANT *, struct _CLzmaEncProps *)
.text:00000110                 public ?SetLzmaProp@NLzma@NCompress@@YGJKABUtagPROPVARIANT@@AAU_CLzmaEncProps@@@Z
.text:00000110 ?SetLzmaProp@NLzma@NCompress@@YGJKABUtagPROPVARIANT@@AAU_CLzmaEncProps@@@Z proc near
.text:00000110                                         ; CODE XREF: NCompress::NLzma::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+99p
.text:00000110
.text:00000110 var_8           = dword ptr -8
.text:00000110 var_4           = dword ptr -4
.text:00000110 this            = dword ptr  8
.text:00000110 arg_4           = dword ptr  0Ch
.text:00000110 arg_8           = dword ptr  10h
.text:00000110
.text:00000110                 push    ebp
.text:00000111                 mov     ebp, esp
.text:00000113                 sub     esp, 8
.text:00000116                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000011D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000124                 cmp     [ebp+this], 9
.text:00000128                 jnz     short loc_16C
.text:0000012A                 mov     eax, [ebp+arg_4]
.text:0000012D                 movzx   ecx, word ptr [eax]
.text:00000130                 cmp     ecx, 8
.text:00000133                 jz      short loc_13F
.text:00000135                 mov     eax, 80070057h
.text:0000013A                 jmp     loc_265
.text:0000013F ; ---------------------------------------------------------------------------
.text:0000013F
.text:0000013F loc_13F:                                ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+23j
.text:0000013F                 mov     edx, [ebp+arg_8]
.text:00000142                 add     edx, 28h ; '('
.text:00000145                 push    edx
.text:00000146                 mov     eax, [ebp+arg_8]
.text:00000149                 add     eax, 24h ; '$'
.text:0000014C                 push    eax
.text:0000014D                 mov     ecx, [ebp+arg_4]
.text:00000150                 mov     edx, [ecx+8]
.text:00000153                 push    edx
.text:00000154                 call    ?ParseMatchFinder@NLzma@NCompress@@YGHPB_WPAH1@Z ; NCompress::NLzma::ParseMatchFinder(wchar_t const *,int *,int *)
.text:00000159                 neg     eax
.text:0000015B                 sbb     eax, eax
.text:0000015D                 and     eax, 7FF8FFA9h
.text:00000162                 add     eax, 80070057h
.text:00000167                 jmp     loc_265
.text:0000016C ; ---------------------------------------------------------------------------
.text:0000016C
.text:0000016C loc_16C:                                ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+18j
.text:0000016C                 cmp     [ebp+this], 10h
.text:00000170                 jbe     short loc_179
.text:00000172                 xor     eax, eax
.text:00000174                 jmp     loc_265
.text:00000179 ; ---------------------------------------------------------------------------
.text:00000179
.text:00000179 loc_179:                                ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+60j
.text:00000179                 cmp     [ebp+this], 10h
.text:0000017D                 jnz     short loc_1A3
.text:0000017F                 mov     eax, [ebp+arg_4]
.text:00000182                 movzx   ecx, word ptr [eax]
.text:00000185                 cmp     ecx, 15h
.text:00000188                 jnz     short loc_19C
.text:0000018A                 mov     edx, [ebp+arg_8]
.text:0000018D                 mov     eax, [ebp+arg_4]
.text:00000190                 mov     ecx, [eax+8]
.text:00000193                 mov     [edx+8], ecx
.text:00000196                 mov     eax, [eax+0Ch]
.text:00000199                 mov     [edx+0Ch], eax
.text:0000019C
.text:0000019C loc_19C:                                ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+78j
.text:0000019C                 xor     eax, eax
.text:0000019E                 jmp     loc_265
.text:000001A3 ; ---------------------------------------------------------------------------
.text:000001A3
.text:000001A3 loc_1A3:                                ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+6Dj
.text:000001A3                 mov     ecx, [ebp+arg_4]
.text:000001A6                 movzx   edx, word ptr [ecx]
.text:000001A9                 cmp     edx, 13h
.text:000001AC                 jz      short loc_1B8
.text:000001AE                 mov     eax, 80070057h
.text:000001B3                 jmp     loc_265
.text:000001B8 ; ---------------------------------------------------------------------------
.text:000001B8
.text:000001B8 loc_1B8:                                ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+9Cj
.text:000001B8                 mov     eax, [ebp+arg_4]
.text:000001BB                 mov     ecx, [eax+8]
.text:000001BE                 mov     [ebp+var_4], ecx
.text:000001C1                 mov     edx, [ebp+this]
.text:000001C4                 mov     [ebp+var_8], edx
.text:000001C7                 cmp     [ebp+var_8], 0Fh ; switch 16 cases
.text:000001CB                 ja      $LN1            ; jumptable 000001D4 default case
.text:000001D1                 mov     eax, [ebp+var_8]
.text:000001D4                 jmp     ds:$LN23[eax*4] ; switch jump
.text:000001DB ; ---------------------------------------------------------------------------
.text:000001DB
.text:000001DB $LN12:                                  ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+C4j
.text:000001DB                                         ; DATA XREF: .text:$LN23o
.text:000001DB                 cmp     [ebp+var_4], 1Fh ; jumptable 000001D4 case 0
.text:000001DF                 jbe     short loc_1E8
.text:000001E1                 mov     eax, 80070057h
.text:000001E6                 jmp     short loc_265
.text:000001E8 ; ---------------------------------------------------------------------------
.text:000001E8
.text:000001E8 loc_1E8:                                ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+CFj
.text:000001E8                 mov     edx, 1
.text:000001ED                 mov     ecx, [ebp+var_4]
.text:000001F0                 shl     edx, cl
.text:000001F2                 mov     eax, [ebp+arg_8]
.text:000001F5                 mov     [eax+4], edx
.text:000001F8                 jmp     short loc_263
.text:000001FA ; ---------------------------------------------------------------------------
.text:000001FA
.text:000001FA $LN10:                                  ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+C4j
.text:000001FA                                         ; DATA XREF: .text:$LN23o
.text:000001FA                 mov     ecx, [ebp+arg_8] ; jumptable 000001D4 case 15
.text:000001FD                 mov     edx, [ebp+var_4]
.text:00000200                 mov     [ecx], edx
.text:00000202                 jmp     short loc_263
.text:00000204 ; ---------------------------------------------------------------------------
.text:00000204
.text:00000204 $LN9:                                   ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+C4j
.text:00000204                                         ; DATA XREF: .text:$LN23o
.text:00000204                 mov     eax, [ebp+arg_8] ; jumptable 000001D4 case 8
.text:00000207                 mov     ecx, [ebp+var_4]
.text:0000020A                 mov     [eax+20h], ecx
.text:0000020D                 jmp     short loc_263
.text:0000020F ; ---------------------------------------------------------------------------
.text:0000020F
.text:0000020F $LN8:                                   ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+C4j
.text:0000020F                                         ; DATA XREF: .text:$LN23o
.text:0000020F                 mov     edx, [ebp+arg_8] ; jumptable 000001D4 case 10
.text:00000212                 mov     eax, [ebp+var_4]
.text:00000215                 mov     [edx+2Ch], eax
.text:00000218                 jmp     short loc_263
.text:0000021A ; ---------------------------------------------------------------------------
.text:0000021A
.text:0000021A $LN7:                                   ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+C4j
.text:0000021A                                         ; DATA XREF: .text:$LN23o
.text:0000021A                 mov     ecx, [ebp+arg_8] ; jumptable 000001D4 case 12
.text:0000021D                 mov     edx, [ebp+var_4]
.text:00000220                 mov     [ecx+1Ch], edx
.text:00000223                 jmp     short loc_263
.text:00000225 ; ---------------------------------------------------------------------------
.text:00000225
.text:00000225 $LN6:                                   ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+C4j
.text:00000225                                         ; DATA XREF: .text:$LN23o
.text:00000225                 mov     eax, [ebp+arg_8] ; jumptable 000001D4 case 1
.text:00000228                 mov     ecx, [ebp+var_4]
.text:0000022B                 mov     [eax+4], ecx
.text:0000022E                 jmp     short loc_263
.text:00000230 ; ---------------------------------------------------------------------------
.text:00000230
.text:00000230 $LN5:                                   ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+C4j
.text:00000230                                         ; DATA XREF: .text:$LN23o
.text:00000230                 mov     edx, [ebp+arg_8] ; jumptable 000001D4 case 5
.text:00000233                 mov     eax, [ebp+var_4]
.text:00000236                 mov     [edx+18h], eax
.text:00000239                 jmp     short loc_263
.text:0000023B ; ---------------------------------------------------------------------------
.text:0000023B
.text:0000023B $LN4:                                   ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+C4j
.text:0000023B                                         ; DATA XREF: .text:$LN23o
.text:0000023B                 mov     ecx, [ebp+arg_8] ; jumptable 000001D4 case 7
.text:0000023E                 mov     edx, [ebp+var_4]
.text:00000241                 mov     [ecx+14h], edx
.text:00000244                 jmp     short loc_263
.text:00000246 ; ---------------------------------------------------------------------------
.text:00000246
.text:00000246 $LN3:                                   ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+C4j
.text:00000246                                         ; DATA XREF: .text:$LN23o
.text:00000246                 mov     eax, [ebp+arg_8] ; jumptable 000001D4 case 6
.text:00000249                 mov     ecx, [ebp+var_4]
.text:0000024C                 mov     [eax+10h], ecx
.text:0000024F                 jmp     short loc_263
.text:00000251 ; ---------------------------------------------------------------------------
.text:00000251
.text:00000251 $LN2:                                   ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+C4j
.text:00000251                                         ; DATA XREF: .text:$LN23o
.text:00000251                 mov     edx, [ebp+arg_8] ; jumptable 000001D4 case 13
.text:00000254                 mov     eax, [ebp+var_4]
.text:00000257                 mov     [edx+34h], eax
.text:0000025A                 jmp     short loc_263
.text:0000025C ; ---------------------------------------------------------------------------
.text:0000025C
.text:0000025C $LN1:                                   ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+BBj
.text:0000025C                                         ; NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+C4j
.text:0000025C                                         ; DATA XREF: ...
.text:0000025C                 mov     eax, 80070057h  ; jumptable 000001D4 default case
.text:00000261                 jmp     short loc_265
.text:00000263 ; ---------------------------------------------------------------------------
.text:00000263
.text:00000263 loc_263:                                ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+E8j
.text:00000263                                         ; NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+F2j ...
.text:00000263                 xor     eax, eax
.text:00000265
.text:00000265 loc_265:                                ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+2Aj
.text:00000265                                         ; NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+57j ...
.text:00000265                 add     esp, 8
.text:00000268                 cmp     ebp, esp
.text:0000026A                 call    __RTC_CheckEsp
.text:0000026F                 mov     esp, ebp
.text:00000271                 pop     ebp
.text:00000272                 retn    0Ch
.text:00000272 ?SetLzmaProp@NLzma@NCompress@@YGJKABUtagPROPVARIANT@@AAU_CLzmaEncProps@@@Z endp
.text:00000272
.text:00000272 ; ---------------------------------------------------------------------------
.text:00000275                 align 4
.text:00000278 $LN23           dd offset $LN12         ; DATA XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+C4r
.text:00000278                 dd offset $LN6          ; jump table for switch statement
.text:00000278                 dd offset $LN1
.text:00000278                 dd offset $LN1
.text:00000278                 dd offset $LN1
.text:00000278                 dd offset $LN5
.text:00000278                 dd offset $LN3
.text:00000278                 dd offset $LN4
.text:00000278                 dd offset $LN9
.text:00000278                 dd offset $LN1
.text:00000278                 dd offset $LN8
.text:00000278                 dd offset $LN1
.text:00000278                 dd offset $LN7
.text:00000278                 dd offset $LN2
.text:00000278                 dd offset $LN1
.text:00000278                 dd offset $LN10
.text:000002B8                 align 10h
.text:000002C0
.text:000002C0 ; =============== S U B R O U T I N E =======================================
.text:000002C0
.text:000002C0 ; Attributes: bp-based frame
.text:000002C0
.text:000002C0 ; int __stdcall NCompress::NLzma::ParseMatchFinder(wchar_t const *, int *, int *)
.text:000002C0 ?ParseMatchFinder@NLzma@NCompress@@YGHPB_WPAH1@Z proc near
.text:000002C0                                         ; CODE XREF: NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)+44p
.text:000002C0
.text:000002C0 var_14          = dword ptr -14h
.text:000002C0 var_10          = dword ptr -10h
.text:000002C0 var_C           = dword ptr -0Ch
.text:000002C0 var_8           = dword ptr -8
.text:000002C0 var_4           = dword ptr -4
.text:000002C0 arg_0           = dword ptr  8
.text:000002C0 arg_4           = dword ptr  0Ch
.text:000002C0 arg_8           = dword ptr  10h
.text:000002C0
.text:000002C0                 push    ebp
.text:000002C1                 mov     ebp, esp
.text:000002C3                 sub     esp, 14h
.text:000002C6                 mov     eax, 0CCCCCCCCh
.text:000002CB                 mov     [ebp+var_14], eax
.text:000002CE                 mov     [ebp+var_10], eax
.text:000002D1                 mov     [ebp+var_C], eax
.text:000002D4                 mov     [ebp+var_8], eax
.text:000002D7                 mov     [ebp+var_4], eax
.text:000002DA                 mov     eax, [ebp+arg_0]
.text:000002DD                 mov     cx, [eax]
.text:000002E0                 mov     word ptr [ebp+var_10+2], cx
.text:000002E4                 mov     edx, [ebp+arg_0]
.text:000002E7                 add     edx, 2
.text:000002EA                 mov     [ebp+arg_0], edx
.text:000002ED                 movzx   eax, word ptr [ebp+var_10+2]
.text:000002F1                 push    eax
.text:000002F2                 call    ?GetUpperChar@NLzma@NCompress@@YG_W_W@Z ; NCompress::NLzma::GetUpperChar(wchar_t)
.text:000002F7                 mov     word ptr [ebp+var_4], ax
.text:000002FB                 movzx   ecx, word ptr [ebp+var_4]
.text:000002FF                 cmp     ecx, 48h ; 'H'
.text:00000302                 jnz     short loc_381
.text:00000304                 mov     edx, [ebp+arg_0]
.text:00000307                 mov     ax, [edx]
.text:0000030A                 mov     word ptr [ebp+var_10], ax
.text:0000030E                 mov     ecx, [ebp+arg_0]
.text:00000311                 add     ecx, 2
.text:00000314                 mov     [ebp+arg_0], ecx
.text:00000317                 movzx   edx, word ptr [ebp+var_10]
.text:0000031B                 push    edx
.text:0000031C                 call    ?GetUpperChar@NLzma@NCompress@@YG_W_W@Z ; NCompress::NLzma::GetUpperChar(wchar_t)
.text:00000321                 movzx   eax, ax
.text:00000324                 cmp     eax, 43h ; 'C'
.text:00000327                 jz      short loc_330
.text:00000329                 xor     eax, eax
.text:0000032B                 jmp     loc_400
.text:00000330 ; ---------------------------------------------------------------------------
.text:00000330
.text:00000330 loc_330:                                ; CODE XREF: NCompress::NLzma::ParseMatchFinder(wchar_t const *,int *,int *)+67j
.text:00000330                 mov     ecx, [ebp+arg_0]
.text:00000333                 movzx   edx, word ptr [ecx]
.text:00000336                 sub     edx, 30h ; '0'
.text:00000339                 mov     [ebp+var_8], edx
.text:0000033C                 mov     eax, [ebp+arg_0]
.text:0000033F                 add     eax, 2
.text:00000342                 mov     [ebp+arg_0], eax
.text:00000345                 cmp     [ebp+var_8], 4
.text:00000349                 jl      short loc_351
.text:0000034B                 cmp     [ebp+var_8], 4
.text:0000034F                 jle     short loc_358
.text:00000351
.text:00000351 loc_351:                                ; CODE XREF: NCompress::NLzma::ParseMatchFinder(wchar_t const *,int *,int *)+89j
.text:00000351                 xor     eax, eax
.text:00000353                 jmp     loc_400
.text:00000358 ; ---------------------------------------------------------------------------
.text:00000358
.text:00000358 loc_358:                                ; CODE XREF: NCompress::NLzma::ParseMatchFinder(wchar_t const *,int *,int *)+8Fj
.text:00000358                 mov     ecx, [ebp+arg_0]
.text:0000035B                 movzx   edx, word ptr [ecx]
.text:0000035E                 test    edx, edx
.text:00000360                 jz      short loc_369
.text:00000362                 xor     eax, eax
.text:00000364                 jmp     loc_400
.text:00000369 ; ---------------------------------------------------------------------------
.text:00000369
.text:00000369 loc_369:                                ; CODE XREF: NCompress::NLzma::ParseMatchFinder(wchar_t const *,int *,int *)+A0j
.text:00000369                 mov     eax, [ebp+arg_4]
.text:0000036C                 mov     dword ptr [eax], 0
.text:00000372                 mov     ecx, [ebp+arg_8]
.text:00000375                 mov     edx, [ebp+var_8]
.text:00000378                 mov     [ecx], edx
.text:0000037A                 mov     eax, 1
.text:0000037F                 jmp     short loc_400
.text:00000381 ; ---------------------------------------------------------------------------
.text:00000381
.text:00000381 loc_381:                                ; CODE XREF: NCompress::NLzma::ParseMatchFinder(wchar_t const *,int *,int *)+42j
.text:00000381                 movzx   eax, word ptr [ebp+var_4]
.text:00000385                 cmp     eax, 42h ; 'B'
.text:00000388                 jz      short loc_38E
.text:0000038A                 xor     eax, eax
.text:0000038C                 jmp     short loc_400
.text:0000038E ; ---------------------------------------------------------------------------
.text:0000038E
.text:0000038E loc_38E:                                ; CODE XREF: NCompress::NLzma::ParseMatchFinder(wchar_t const *,int *,int *)+C8j
.text:0000038E                 mov     ecx, [ebp+arg_0]
.text:00000391                 mov     dx, [ecx]
.text:00000394                 mov     word ptr [ebp+var_14+2], dx
.text:00000398                 mov     eax, [ebp+arg_0]
.text:0000039B                 add     eax, 2
.text:0000039E                 mov     [ebp+arg_0], eax
.text:000003A1                 movzx   ecx, word ptr [ebp+var_14+2]
.text:000003A5                 push    ecx
.text:000003A6                 call    ?GetUpperChar@NLzma@NCompress@@YG_W_W@Z ; NCompress::NLzma::GetUpperChar(wchar_t)
.text:000003AB                 movzx   edx, ax
.text:000003AE                 cmp     edx, 54h ; 'T'
.text:000003B1                 jz      short loc_3B7
.text:000003B3                 xor     eax, eax
.text:000003B5                 jmp     short loc_400
.text:000003B7 ; ---------------------------------------------------------------------------
.text:000003B7
.text:000003B7 loc_3B7:                                ; CODE XREF: NCompress::NLzma::ParseMatchFinder(wchar_t const *,int *,int *)+F1j
.text:000003B7                 mov     eax, [ebp+arg_0]
.text:000003BA                 movzx   ecx, word ptr [eax]
.text:000003BD                 sub     ecx, 30h ; '0'
.text:000003C0                 mov     [ebp+var_C], ecx
.text:000003C3                 mov     edx, [ebp+arg_0]
.text:000003C6                 add     edx, 2
.text:000003C9                 mov     [ebp+arg_0], edx
.text:000003CC                 cmp     [ebp+var_C], 2
.text:000003D0                 jl      short loc_3D8
.text:000003D2                 cmp     [ebp+var_C], 4
.text:000003D6                 jle     short loc_3DC
.text:000003D8
.text:000003D8 loc_3D8:                                ; CODE XREF: NCompress::NLzma::ParseMatchFinder(wchar_t const *,int *,int *)+110j
.text:000003D8                 xor     eax, eax
.text:000003DA                 jmp     short loc_400
.text:000003DC ; ---------------------------------------------------------------------------
.text:000003DC
.text:000003DC loc_3DC:                                ; CODE XREF: NCompress::NLzma::ParseMatchFinder(wchar_t const *,int *,int *)+116j
.text:000003DC                 mov     eax, [ebp+arg_0]
.text:000003DF                 movzx   ecx, word ptr [eax]
.text:000003E2                 test    ecx, ecx
.text:000003E4                 jz      short loc_3EA
.text:000003E6                 xor     eax, eax
.text:000003E8                 jmp     short loc_400
.text:000003EA ; ---------------------------------------------------------------------------
.text:000003EA
.text:000003EA loc_3EA:                                ; CODE XREF: NCompress::NLzma::ParseMatchFinder(wchar_t const *,int *,int *)+124j
.text:000003EA                 mov     edx, [ebp+arg_4]
.text:000003ED                 mov     dword ptr [edx], 1
.text:000003F3                 mov     eax, [ebp+arg_8]
.text:000003F6                 mov     ecx, [ebp+var_C]
.text:000003F9                 mov     [eax], ecx
.text:000003FB                 mov     eax, 1
.text:00000400
.text:00000400 loc_400:                                ; CODE XREF: NCompress::NLzma::ParseMatchFinder(wchar_t const *,int *,int *)+6Bj
.text:00000400                                         ; NCompress::NLzma::ParseMatchFinder(wchar_t const *,int *,int *)+93j ...
.text:00000400                 add     esp, 14h
.text:00000403                 cmp     ebp, esp
.text:00000405                 call    __RTC_CheckEsp
.text:0000040A                 mov     esp, ebp
.text:0000040C                 pop     ebp
.text:0000040D                 retn    0Ch
.text:0000040D ?ParseMatchFinder@NLzma@NCompress@@YGHPB_WPAH1@Z endp
.text:0000040D
.text:00000410
.text:00000410 ; =============== S U B R O U T I N E =======================================
.text:00000410
.text:00000410 ; Attributes: bp-based frame
.text:00000410
.text:00000410 ; wchar_t __stdcall NCompress::NLzma::GetUpperChar(wchar_t)
.text:00000410 ?GetUpperChar@NLzma@NCompress@@YG_W_W@Z proc near
.text:00000410                                         ; CODE XREF: NCompress::NLzma::ParseMatchFinder(wchar_t const *,int *,int *)+32p
.text:00000410                                         ; NCompress::NLzma::ParseMatchFinder(wchar_t const *,int *,int *)+5Cp ...
.text:00000410
.text:00000410 arg_0           = word ptr  8
.text:00000410
.text:00000410                 push    ebp
.text:00000411                 mov     ebp, esp
.text:00000413                 movzx   eax, [ebp+arg_0]
.text:00000417                 cmp     eax, 61h ; 'a'
.text:0000041A                 jl      short loc_430
.text:0000041C                 movzx   ecx, [ebp+arg_0]
.text:00000420                 cmp     ecx, 7Ah ; 'z'
.text:00000423                 jg      short loc_430
.text:00000425                 movzx   edx, [ebp+arg_0]
.text:00000429                 sub     edx, 20h ; ' '
.text:0000042C                 mov     [ebp+arg_0], dx
.text:00000430
.text:00000430 loc_430:                                ; CODE XREF: NCompress::NLzma::GetUpperChar(wchar_t)+Aj
.text:00000430                                         ; NCompress::NLzma::GetUpperChar(wchar_t)+13j
.text:00000430                 mov     ax, [ebp+arg_0]
.text:00000434                 pop     ebp
.text:00000435                 retn    4
.text:00000435 ?GetUpperChar@NLzma@NCompress@@YG_W_W@Z endp
.text:00000435
.text:00000435 ; ---------------------------------------------------------------------------
.text:00000438                 align 10h
.text:00000440
.text:00000440 ; =============== S U B R O U T I N E =======================================
.text:00000440
.text:00000440 ; Attributes: bp-based frame
.text:00000440
.text:00000440 ; __int32 __stdcall NCompress::NLzma::CEncoder::SetCoderProperties(NCompress::NLzma::CEncoder *this, const unsigned __int32 *, const struct tagPROPVARIANT *, unsigned int)
.text:00000440                 public ?SetCoderProperties@CEncoder@NLzma@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z
.text:00000440 ?SetCoderProperties@CEncoder@NLzma@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z proc near
.text:00000440                                         ; DATA XREF: .rdata:00000774o
.text:00000440
.text:00000440 var_58          = dword ptr -58h
.text:00000440 var_54          = dword ptr -54h
.text:00000440 var_50          = dword ptr -50h
.text:00000440 var_4C          = dword ptr -4Ch
.text:00000440 var_48          = dword ptr -48h
.text:00000440 var_40          = tagPROPVARIANT ptr -40h
.text:00000440 var_10          = dword ptr -10h
.text:00000440 var_4           = dword ptr -4
.text:00000440 this            = dword ptr  8
.text:00000440 arg_4           = dword ptr  0Ch
.text:00000440 arg_8           = dword ptr  10h
.text:00000440 arg_C           = dword ptr  14h
.text:00000440
.text:00000440                 push    ebp
.text:00000441                 mov     ebp, esp
.text:00000443                 sub     esp, 58h
.text:00000446                 push    edi
.text:00000447                 lea     edi, [ebp+var_58]
.text:0000044A                 mov     ecx, 16h
.text:0000044F                 mov     eax, 0CCCCCCCCh
.text:00000454                 rep stosd
.text:00000456                 mov     eax, dword ptr ds:___security_cookie
.text:0000045B                 xor     eax, ebp
.text:0000045D                 mov     [ebp+var_4], eax
.text:00000460                 lea     eax, [ebp+var_40]
.text:00000463                 push    eax
.text:00000464                 call    _LzmaEncProps_Init@4 ; LzmaEncProps_Init(x)
.text:00000469                 mov     [ebp+var_48], 0
.text:00000470                 jmp     short loc_47B
.text:00000472 ; ---------------------------------------------------------------------------
.text:00000472
.text:00000472 loc_472:                                ; CODE XREF: NCompress::NLzma::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint):loc_4ECj
.text:00000472                 mov     ecx, [ebp+var_48]
.text:00000475                 add     ecx, 1
.text:00000478                 mov     [ebp+var_48], ecx
.text:0000047B
.text:0000047B loc_47B:                                ; CODE XREF: NCompress::NLzma::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+30j
.text:0000047B                 mov     edx, [ebp+var_48]
.text:0000047E                 cmp     edx, [ebp+arg_C]
.text:00000481                 jnb     short loc_4EE
.text:00000483                 mov     eax, [ebp+var_48]
.text:00000486                 shl     eax, 4
.text:00000489                 add     eax, [ebp+arg_8]
.text:0000048C                 mov     [ebp+var_4C], eax
.text:0000048F                 mov     ecx, [ebp+var_48]
.text:00000492                 mov     edx, [ebp+arg_4]
.text:00000495                 mov     eax, [edx+ecx*4]
.text:00000498                 mov     [ebp+var_50], eax
.text:0000049B                 mov     ecx, [ebp+var_50]
.text:0000049E                 mov     [ebp+var_58], ecx
.text:000004A1                 cmp     [ebp+var_58], 0Eh
.text:000004A5                 jz      short loc_4A9
.text:000004A7                 jmp     short loc_4CD
.text:000004A9 ; ---------------------------------------------------------------------------
.text:000004A9
.text:000004A9 loc_4A9:                                ; CODE XREF: NCompress::NLzma::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+65j
.text:000004A9                 mov     edx, [ebp+var_4C]
.text:000004AC                 movzx   eax, word ptr [edx]
.text:000004AF                 cmp     eax, 0Bh
.text:000004B2                 jz      short loc_4BB
.text:000004B4                 mov     eax, 80070057h
.text:000004B9                 jmp     short loc_504
.text:000004BB ; ---------------------------------------------------------------------------
.text:000004BB
.text:000004BB loc_4BB:                                ; CODE XREF: NCompress::NLzma::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+72j
.text:000004BB                 mov     ecx, [ebp+var_4C]
.text:000004BE                 movsx   edx, word ptr [ecx+8]
.text:000004C2                 neg     edx
.text:000004C4                 sbb     edx, edx
.text:000004C6                 neg     edx
.text:000004C8                 mov     [ebp+var_10], edx
.text:000004CB                 jmp     short loc_4EC
.text:000004CD ; ---------------------------------------------------------------------------
.text:000004CD
.text:000004CD loc_4CD:                                ; CODE XREF: NCompress::NLzma::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+67j
.text:000004CD                 lea     eax, [ebp+var_40]
.text:000004D0                 push    eax             ; struct tagPROPVARIANT *
.text:000004D1                 mov     ecx, [ebp+var_4C]
.text:000004D4                 push    ecx             ; unsigned __int32
.text:000004D5                 mov     edx, [ebp+var_50]
.text:000004D8                 push    edx             ; this
.text:000004D9                 call    ?SetLzmaProp@NLzma@NCompress@@YGJKABUtagPROPVARIANT@@AAU_CLzmaEncProps@@@Z ; NCompress::NLzma::SetLzmaProp(ulong,tagPROPVARIANT const &,_CLzmaEncProps &)
.text:000004DE                 mov     [ebp+var_54], eax
.text:000004E1                 cmp     [ebp+var_54], 0
.text:000004E5                 jz      short loc_4EC
.text:000004E7                 mov     eax, [ebp+var_54]
.text:000004EA                 jmp     short loc_504
.text:000004EC ; ---------------------------------------------------------------------------
.text:000004EC
.text:000004EC loc_4EC:                                ; CODE XREF: NCompress::NLzma::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+8Bj
.text:000004EC                                         ; NCompress::NLzma::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+A5j
.text:000004EC                 jmp     short loc_472
.text:000004EE ; ---------------------------------------------------------------------------
.text:000004EE
.text:000004EE loc_4EE:                                ; CODE XREF: NCompress::NLzma::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+41j
.text:000004EE                 lea     eax, [ebp+var_40]
.text:000004F1                 push    eax
.text:000004F2                 mov     ecx, [ebp+this]
.text:000004F5                 mov     edx, [ecx+0Ch]
.text:000004F8                 push    edx
.text:000004F9                 call    _LzmaEnc_SetProps@8 ; LzmaEnc_SetProps(x,x)
.text:000004FE                 push    eax             ; int
.text:000004FF                 call    ?SResToHRESULT@@YGJH@Z ; SResToHRESULT(int)
.text:00000504
.text:00000504 loc_504:                                ; CODE XREF: NCompress::NLzma::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+79j
.text:00000504                                         ; NCompress::NLzma::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+AAj
.text:00000504                 push    edx
.text:00000505                 mov     ecx, ebp
.text:00000507                 push    eax
.text:00000508                 lea     edx, $LN14
.text:0000050E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000513                 pop     eax
.text:00000514                 pop     edx
.text:00000515                 pop     edi
.text:00000516                 mov     ecx, [ebp+var_4]
.text:00000519                 xor     ecx, ebp
.text:0000051B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000520                 add     esp, 58h
.text:00000523                 cmp     ebp, esp
.text:00000525                 call    __RTC_CheckEsp
.text:0000052A                 mov     esp, ebp
.text:0000052C                 pop     ebp
.text:0000052D                 retn    10h
.text:0000052D ?SetCoderProperties@CEncoder@NLzma@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z endp
.text:0000052D
.text:0000052D ; ---------------------------------------------------------------------------
.text:00000530 $LN14           dd 1                    ; DATA XREF: NCompress::NLzma::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+C8o
.text:00000534                 dd offset $LN13
.text:00000538 $LN13           dd 0FFFFFFC0h, 38h      ; DATA XREF: .text:00000534o
.text:00000540                 dd offset $LN12_0       ; "props"
.text:00000544 $LN12_0         db 'props',0            ; DATA XREF: .text:00000540o
.text:0000054A                 align 10h
.text:00000550
.text:00000550 ; =============== S U B R O U T I N E =======================================
.text:00000550
.text:00000550 ; Attributes: bp-based frame
.text:00000550
.text:00000550 ; __int32 __stdcall NCompress::NLzma::CEncoder::WriteCoderProperties(NCompress::NLzma::CEncoder *this, struct ISequentialOutStream *)
.text:00000550                 public ?WriteCoderProperties@CEncoder@NLzma@NCompress@@UAGJPAUISequentialOutStream@@@Z
.text:00000550 ?WriteCoderProperties@CEncoder@NLzma@NCompress@@UAGJPAUISequentialOutStream@@@Z proc near
.text:00000550                                         ; DATA XREF: .rdata:00000760o
.text:00000550
.text:00000550 var_24          = dword ptr -24h
.text:00000550 var_20          = dword ptr -20h
.text:00000550 var_1C          = dword ptr -1Ch
.text:00000550 var_18          = dword ptr -18h
.text:00000550 var_14          = dword ptr -14h
.text:00000550 var_10          = dword ptr -10h
.text:00000550 var_C           = dword ptr -0Ch
.text:00000550 var_8           = dword ptr -8
.text:00000550 var_4           = dword ptr -4
.text:00000550 this            = dword ptr  8
.text:00000550 arg_4           = dword ptr  0Ch
.text:00000550
.text:00000550                 push    ebp
.text:00000551                 mov     ebp, esp
.text:00000553                 sub     esp, 24h
.text:00000556                 mov     eax, 0CCCCCCCCh
.text:0000055B                 mov     [ebp+var_24], eax
.text:0000055E                 mov     [ebp+var_20], eax
.text:00000561                 mov     [ebp+var_1C], eax
.text:00000564                 mov     [ebp+var_18], eax
.text:00000567                 mov     [ebp+var_14], eax
.text:0000056A                 mov     [ebp+var_10], eax
.text:0000056D                 mov     [ebp+var_C], eax
.text:00000570                 mov     [ebp+var_8], eax
.text:00000573                 mov     [ebp+var_4], eax
.text:00000576                 mov     eax, dword ptr ds:___security_cookie
.text:0000057B                 xor     eax, ebp
.text:0000057D                 mov     [ebp+var_4], eax
.text:00000580                 mov     [ebp+var_1C], 5
.text:00000587                 lea     eax, [ebp+var_1C]
.text:0000058A                 push    eax
.text:0000058B                 lea     ecx, [ebp+var_10]
.text:0000058E                 push    ecx
.text:0000058F                 mov     edx, [ebp+this]
.text:00000592                 mov     eax, [edx+8]
.text:00000595                 push    eax
.text:00000596                 call    _LzmaEnc_WriteProperties@12 ; LzmaEnc_WriteProperties(x,x,x)
.text:0000059B                 mov     [ebp+var_24], eax
.text:0000059E                 cmp     [ebp+var_24], 0
.text:000005A2                 jz      short loc_5A9
.text:000005A4                 mov     eax, [ebp+var_24]
.text:000005A7                 jmp     short loc_5BA
.text:000005A9 ; ---------------------------------------------------------------------------
.text:000005A9
.text:000005A9 loc_5A9:                                ; CODE XREF: NCompress::NLzma::CEncoder::WriteCoderProperties(ISequentialOutStream *)+52j
.text:000005A9                 mov     ecx, [ebp+var_1C]
.text:000005AC                 push    ecx             ; unsigned int
.text:000005AD                 lea     edx, [ebp+var_10]
.text:000005B0                 push    edx             ; void *
.text:000005B1                 mov     eax, [ebp+arg_4]
.text:000005B4                 push    eax             ; struct ISequentialOutStream *
.text:000005B5                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:000005BA
.text:000005BA loc_5BA:                                ; CODE XREF: NCompress::NLzma::CEncoder::WriteCoderProperties(ISequentialOutStream *)+57j
.text:000005BA                 push    edx
.text:000005BB                 mov     ecx, ebp
.text:000005BD                 push    eax
.text:000005BE                 lea     edx, $LN7_0
.text:000005C4                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000005C9                 pop     eax
.text:000005CA                 pop     edx
.text:000005CB                 mov     ecx, [ebp+var_4]
.text:000005CE                 xor     ecx, ebp
.text:000005D0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000005D5                 add     esp, 24h
.text:000005D8                 cmp     ebp, esp
.text:000005DA                 call    __RTC_CheckEsp
.text:000005DF                 mov     esp, ebp
.text:000005E1                 pop     ebp
.text:000005E2                 retn    8
.text:000005E2 ?WriteCoderProperties@CEncoder@NLzma@NCompress@@UAGJPAUISequentialOutStream@@@Z endp
.text:000005E2
.text:000005E2 ; ---------------------------------------------------------------------------
.text:000005E5                 align 4
.text:000005E8 $LN7_0          dd 2                    ; DATA XREF: NCompress::NLzma::CEncoder::WriteCoderProperties(ISequentialOutStream *)+6Eo
.text:000005EC                 dd offset $LN6_0
.text:000005F0 $LN6_0          dd 0FFFFFFF0h, 5        ; DATA XREF: .text:000005ECo
.text:000005F8                 dd offset $LN4_0        ; "props"
.text:000005FC                 dd 0FFFFFFE4h, 4
.text:00000604                 dd offset $LN5_0        ; "size"
.text:00000608 $LN5_0          db 'size',0             ; DATA XREF: .text:00000604o
.text:0000060D $LN4_0          db 'props',0            ; DATA XREF: .text:000005F8o
.text:00000613                 align 10h
.text:00000620
.text:00000620 ; =============== S U B R O U T I N E =======================================
.text:00000620
.text:00000620 ; Attributes: bp-based frame
.text:00000620
.text:00000620 ; __int32 __stdcall NCompress::NLzma::CEncoder::Code(NCompress::NLzma::CEncoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00000620                 public ?Code@CEncoder@NLzma@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000620 ?Code@CEncoder@NLzma@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00000620                                         ; DATA XREF: .rdata:00000788o
.text:00000620
.text:00000620 var_58          = dword ptr -58h
.text:00000620 var_50          = byte ptr -50h
.text:00000620 var_48          = dword ptr -48h
.text:00000620 var_3C          = byte ptr -3Ch
.text:00000620 var_34          = dword ptr -34h
.text:00000620 var_1C          = byte ptr -1Ch
.text:00000620 var_14          = dword ptr -14h
.text:00000620 var_C           = dword ptr -0Ch
.text:00000620 var_8           = dword ptr -8
.text:00000620 this            = dword ptr  8
.text:00000620 arg_4           = dword ptr  0Ch
.text:00000620 arg_8           = dword ptr  10h
.text:00000620 arg_14          = dword ptr  1Ch
.text:00000620
.text:00000620                 push    ebp
.text:00000621                 mov     ebp, esp
.text:00000623                 sub     esp, 58h
.text:00000626                 push    edi
.text:00000627                 lea     edi, [ebp+var_58]
.text:0000062A                 mov     ecx, 16h
.text:0000062F                 mov     eax, 0CCCCCCCCh
.text:00000634                 rep stosd
.text:00000636                 mov     eax, [ebp+arg_4]
.text:00000639                 push    eax             ; struct ISequentialInStream *
.text:0000063A                 lea     ecx, [ebp+var_1C] ; this
.text:0000063D                 call    ??0CSeqInStreamWrap@@QAE@PAUISequentialInStream@@@Z ; CSeqInStreamWrap::CSeqInStreamWrap(ISequentialInStream *)
.text:00000642                 mov     ecx, [ebp+arg_8]
.text:00000645                 push    ecx             ; struct ISequentialOutStream *
.text:00000646                 lea     ecx, [ebp+var_3C] ; this
.text:00000649                 call    ??0CSeqOutStreamWrap@@QAE@PAUISequentialOutStream@@@Z ; CSeqOutStreamWrap::CSeqOutStreamWrap(ISequentialOutStream *)
.text:0000064E                 mov     edx, [ebp+arg_14]
.text:00000651                 push    edx             ; struct ICompressProgressInfo *
.text:00000652                 lea     ecx, [ebp+var_50] ; this
.text:00000655                 call    ??0CCompressProgressWrap@@QAE@PAUICompressProgressInfo@@@Z ; CCompressProgressWrap::CCompressProgressWrap(ICompressProgressInfo *)
.text:0000065A                 push    offset _g_BigAlloc
.text:0000065F                 push    offset _g_Alloc
.text:00000664                 mov     eax, [ebp+arg_14]
.text:00000667                 neg     eax
.text:00000669                 sbb     eax, eax
.text:0000066B                 lea     ecx, [ebp+var_50]
.text:0000066E                 and     eax, ecx
.text:00000670                 push    eax
.text:00000671                 lea     edx, [ebp+var_1C]
.text:00000674                 push    edx
.text:00000675                 lea     eax, [ebp+var_3C]
.text:00000678                 push    eax
.text:00000679                 mov     ecx, [ebp+this]
.text:0000067C                 mov     edx, [ecx+10h]
.text:0000067F                 push    edx
.text:00000680                 call    _LzmaEnc_Encode@24 ; LzmaEnc_Encode(x,x,x,x,x,x)
.text:00000685                 mov     [ebp+var_58], eax
.text:00000688                 mov     eax, [ebp+this]
.text:0000068B                 mov     ecx, [ebp+var_C]
.text:0000068E                 mov     [eax+18h], ecx
.text:00000691                 mov     edx, [ebp+var_8]
.text:00000694                 mov     [eax+1Ch], edx
.text:00000697                 cmp     [ebp+var_58], 8
.text:0000069B                 jnz     short loc_6A8
.text:0000069D                 cmp     [ebp+var_14], 0
.text:000006A1                 jz      short loc_6A8
.text:000006A3                 mov     eax, [ebp+var_14]
.text:000006A6                 jmp     short loc_6D3
.text:000006A8 ; ---------------------------------------------------------------------------
.text:000006A8
.text:000006A8 loc_6A8:                                ; CODE XREF: NCompress::NLzma::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+7Bj
.text:000006A8                                         ; NCompress::NLzma::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+81j
.text:000006A8                 cmp     [ebp+var_58], 9
.text:000006AC                 jnz     short loc_6B9
.text:000006AE                 cmp     [ebp+var_34], 0
.text:000006B2                 jz      short loc_6B9
.text:000006B4                 mov     eax, [ebp+var_34]
.text:000006B7                 jmp     short loc_6D3
.text:000006B9 ; ---------------------------------------------------------------------------
.text:000006B9
.text:000006B9 loc_6B9:                                ; CODE XREF: NCompress::NLzma::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+8Cj
.text:000006B9                                         ; NCompress::NLzma::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+92j
.text:000006B9                 cmp     [ebp+var_58], 0Ah
.text:000006BD                 jnz     short loc_6CA
.text:000006BF                 cmp     [ebp+var_48], 0
.text:000006C3                 jz      short loc_6CA
.text:000006C5                 mov     eax, [ebp+var_48]
.text:000006C8                 jmp     short loc_6D3
.text:000006CA ; ---------------------------------------------------------------------------
.text:000006CA
.text:000006CA loc_6CA:                                ; CODE XREF: NCompress::NLzma::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+9Dj
.text:000006CA                                         ; NCompress::NLzma::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+A3j
.text:000006CA                 mov     eax, [ebp+var_58]
.text:000006CD                 push    eax             ; int
.text:000006CE                 call    ?SResToHRESULT@@YGJH@Z ; SResToHRESULT(int)
.text:000006D3
.text:000006D3 loc_6D3:                                ; CODE XREF: NCompress::NLzma::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+86j
.text:000006D3                                         ; NCompress::NLzma::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+97j ...
.text:000006D3                 push    edx
.text:000006D4                 mov     ecx, ebp
.text:000006D6                 push    eax
.text:000006D7                 lea     edx, $LN10_0
.text:000006DD                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000006E2                 pop     eax
.text:000006E3                 pop     edx
.text:000006E4                 pop     edi
.text:000006E5                 add     esp, 58h
.text:000006E8                 cmp     ebp, esp
.text:000006EA                 call    __RTC_CheckEsp
.text:000006EF                 mov     esp, ebp
.text:000006F1                 pop     ebp
.text:000006F2                 retn    18h
.text:000006F2 ?Code@CEncoder@NLzma@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:000006F2
.text:000006F2 ; ---------------------------------------------------------------------------
.text:000006F5                 align 4
.text:000006F8 $LN10_0         dd 3                    ; DATA XREF: NCompress::NLzma::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+B7o
.text:000006FC                 dd offset $LN9_0
.text:00000700 $LN9_0          dd 0FFFFFFE4h, 18h      ; DATA XREF: .text:000006FCo
.text:00000708                 dd offset $LN6_1        ; "inWrap"
.text:0000070C                 dd 0FFFFFFC4h, 18h
.text:00000714                 dd offset $LN7_1        ; "outWrap"
.text:00000718                 dd 0FFFFFFB0h, 0Ch
.text:00000720                 dd offset $LN8_0        ; "progressWrap"
.text:00000724 $LN8_0          db 'progressWrap',0     ; DATA XREF: .text:00000720o
.text:00000731 $LN7_1          db 'outWrap',0          ; DATA XREF: .text:00000714o
.text:00000739 $LN6_1          db 'inWrap',0           ; DATA XREF: .text:00000708o
.text:00000739 _text           ends
.text:00000739
.xdata$x:00000740 ; ===========================================================================
.xdata$x:00000740
.xdata$x:00000740 ; Segment type: Pure data
.xdata$x:00000740 ; Segment permissions: Read
.xdata$x:00000740 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000740                 assume cs:_xdata$x
.xdata$x:00000740                 ;org 740h
.xdata$x:00000740 ; COMDAT (pick any)
.xdata$x:00000740                 public __TI1H
.xdata$x:00000740 __TI1H          db    0                 ; DATA XREF: NCompress::NLzma::CEncoder::CEncoder(void)+87o
.xdata$x:00000741                 db    0
.xdata$x:00000742                 db    0
.xdata$x:00000743                 db    0
.xdata$x:00000744                 db    0
.xdata$x:00000745                 db    0
.xdata$x:00000746                 db    0
.xdata$x:00000747                 db    0
.xdata$x:00000748                 db    0
.xdata$x:00000749                 db    0
.xdata$x:0000074A                 db    0
.xdata$x:0000074B                 db    0
.xdata$x:0000074C                 dd offset __CTA1H
.xdata$x:0000074C _xdata$x        ends
.xdata$x:0000074C
.rdata:00000750 ; ===========================================================================
.rdata:00000750
.rdata:00000750 ; Segment type: Pure data
.rdata:00000750 ; Segment permissions: Read
.rdata:00000750 _rdata          segment dword public 'DATA' use32
.rdata:00000750                 assume cs:_rdata
.rdata:00000750                 ;org 750h
.rdata:00000750 ; COMDAT (pick largest)
.rdata:00000750                 dd offset ??_R4CEncoder@NLzma@NCompress@@6BICompressWriteCoderProperties@@@ ; const NCompress::NLzma::CEncoder::`RTTI Complete Object Locator'{for `ICompressWriteCoderProperties'}
.rdata:00000754                 public ??_7CEncoder@NLzma@NCompress@@6BICompressWriteCoderProperties@@@
.rdata:00000754 ; const NCompress::NLzma::CEncoder::`vftable'{for `ICompressWriteCoderProperties'}
.rdata:00000754 ??_7CEncoder@NLzma@NCompress@@6BICompressWriteCoderProperties@@@ dd offset ?QueryInterface@CEncoder@NLzma@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00000754                                         ; DATA XREF: NCompress::NLzma::CEncoder::CEncoder(void)+56o
.rdata:00000754                                         ; NCompress::NLzma::CEncoder::~CEncoder(void)+24o
.rdata:00000754                                         ; [thunk]:NCompress::NLzma::CEncoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00000758                 dd offset ?AddRef@CEncoder@NLzma@NCompress@@W7AGKXZ ; [thunk]:NCompress::NLzma::CEncoder::AddRef`adjustor{8}' (void)
.rdata:0000075C                 dd offset ?Release@CEncoder@NLzma@NCompress@@W7AGKXZ ; [thunk]:NCompress::NLzma::CEncoder::Release`adjustor{8}' (void)
.rdata:00000760                 dd offset ?WriteCoderProperties@CEncoder@NLzma@NCompress@@UAGJPAUISequentialOutStream@@@Z ; NCompress::NLzma::CEncoder::WriteCoderProperties(ISequentialOutStream *)
.rdata:00000760 _rdata          ends
.rdata:00000760
.rdata:00000764 ; ===========================================================================
.rdata:00000764
.rdata:00000764 ; Segment type: Pure data
.rdata:00000764 ; Segment permissions: Read
.rdata:00000764 _rdata          segment dword public 'DATA' use32
.rdata:00000764                 assume cs:_rdata
.rdata:00000764                 ;org 764h
.rdata:00000764 ; COMDAT (pick largest)
.rdata:00000764                 dd offset ??_R4CEncoder@NLzma@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NLzma::CEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:00000768                 public ??_7CEncoder@NLzma@NCompress@@6BICompressSetCoderProperties@@@
.rdata:00000768 ; const NCompress::NLzma::CEncoder::`vftable'{for `ICompressSetCoderProperties'}
.rdata:00000768 ??_7CEncoder@NLzma@NCompress@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CEncoder@NLzma@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00000768                                         ; DATA XREF: NCompress::NLzma::CEncoder::CEncoder(void)+4Co
.rdata:00000768                                         ; NCompress::NLzma::CEncoder::~CEncoder(void)+1Ao
.rdata:00000768                                         ; [thunk]:NCompress::NLzma::CEncoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:0000076C                 dd offset ?AddRef@CEncoder@NLzma@NCompress@@W3AGKXZ ; [thunk]:NCompress::NLzma::CEncoder::AddRef`adjustor{4}' (void)
.rdata:00000770                 dd offset ?Release@CEncoder@NLzma@NCompress@@W3AGKXZ ; [thunk]:NCompress::NLzma::CEncoder::Release`adjustor{4}' (void)
.rdata:00000774                 dd offset ?SetCoderProperties@CEncoder@NLzma@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; NCompress::NLzma::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:00000774 _rdata          ends
.rdata:00000774
.rdata:00000778 ; ===========================================================================
.rdata:00000778
.rdata:00000778 ; Segment type: Pure data
.rdata:00000778 ; Segment permissions: Read
.rdata:00000778 _rdata          segment dword public 'DATA' use32
.rdata:00000778                 assume cs:_rdata
.rdata:00000778                 ;org 778h
.rdata:00000778 ; COMDAT (pick largest)
.rdata:00000778                 dd offset ??_R4CEncoder@NLzma@NCompress@@6BICompressCoder@@@ ; const NCompress::NLzma::CEncoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:0000077C                 public ??_7CEncoder@NLzma@NCompress@@6BICompressCoder@@@
.rdata:0000077C ; const NCompress::NLzma::CEncoder::`vftable'{for `ICompressCoder'}
.rdata:0000077C ??_7CEncoder@NLzma@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CEncoder@NLzma@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:0000077C                                         ; DATA XREF: NCompress::NLzma::CEncoder::CEncoder(void)+43o
.rdata:0000077C                                         ; NCompress::NLzma::CEncoder::~CEncoder(void)+11o
.rdata:0000077C                                         ; NCompress::NLzma::CEncoder::QueryInterface(_GUID const &,void * *)
.rdata:00000780                 dd offset ?AddRef@CEncoder@NLzma@NCompress@@UAGKXZ ; NCompress::NLzma::CEncoder::AddRef(void)
.rdata:00000784                 dd offset ?Release@CEncoder@NLzma@NCompress@@UAGKXZ ; NCompress::NLzma::CEncoder::Release(void)
.rdata:00000788                 dd offset ?Code@CEncoder@NLzma@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NLzma::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:0000078C                 dd offset ??_ECEncoder@NLzma@NCompress@@UAEPAXI@Z ; NCompress::NLzma::CEncoder::`vector deleting destructor'(uint)
.rdata:0000078C _rdata          ends
.rdata:0000078C
.rtc$TMZ:00000790 ; ===========================================================================
.rtc$TMZ:00000790
.rtc$TMZ:00000790 ; Segment type: Pure data
.rtc$TMZ:00000790 ; Segment permissions: Read
.rtc$TMZ:00000790 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000790                 assume cs:_rtc$TMZ
.rtc$TMZ:00000790                 ;org 790h
.rtc$TMZ:00000790 ; COMDAT (pick any)
.rtc$TMZ:00000790 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000790 _rtc$TMZ        ends
.rtc$TMZ:00000790
.rtc$IMZ:00000794 ; ===========================================================================
.rtc$IMZ:00000794
.rtc$IMZ:00000794 ; Segment type: Pure data
.rtc$IMZ:00000794 ; Segment permissions: Read
.rtc$IMZ:00000794 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000794                 assume cs:_rtc$IMZ
.rtc$IMZ:00000794                 ;org 794h
.rtc$IMZ:00000794 ; COMDAT (pick any)
.rtc$IMZ:00000794 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000794 _rtc$IMZ        ends
.rtc$IMZ:00000794
.rdata$r:00000798 ; ===========================================================================
.rdata$r:00000798
.rdata$r:00000798 ; Segment type: Pure data
.rdata$r:00000798 ; Segment permissions: Read
.rdata$r:00000798 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000798                 assume cs:_rdata$r
.rdata$r:00000798                 ;org 798h
.rdata$r:00000798 ; COMDAT (pick any)
.rdata$r:00000798                 public ??_R4CEncoder@NLzma@NCompress@@6BICompressCoder@@@
.rdata$r:00000798 ; const NCompress::NLzma::CEncoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:00000798 ??_R4CEncoder@NLzma@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:00000798                                         ; DATA XREF: .rdata:00000778o
.rdata$r:00000799                 db    0
.rdata$r:0000079A                 db    0
.rdata$r:0000079B                 db    0
.rdata$r:0000079C                 db    0
.rdata$r:0000079D                 db    0
.rdata$r:0000079E                 db    0
.rdata$r:0000079F                 db    0
.rdata$r:000007A0                 db    0
.rdata$r:000007A1                 db    0
.rdata$r:000007A2                 db    0
.rdata$r:000007A3                 db    0
.rdata$r:000007A4                 dd offset ??_R0?AVCEncoder@NLzma@NCompress@@@8 ; NCompress::NLzma::CEncoder `RTTI Type Descriptor'
.rdata$r:000007A8                 dd offset ??_R3CEncoder@NLzma@NCompress@@8 ; NCompress::NLzma::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007A8 _rdata$r        ends
.rdata$r:000007A8
.data:000007AC ; ===========================================================================
.data:000007AC
.data:000007AC ; Segment type: Pure data
.data:000007AC ; Segment permissions: Read/Write
.data:000007AC _data           segment dword public 'DATA' use32
.data:000007AC                 assume cs:_data
.data:000007AC                 ;org 7ACh
.data:000007AC ; COMDAT (pick any)
.data:000007AC                 public ??_R0?AVCEncoder@NLzma@NCompress@@@8
.data:000007AC ; class NCompress::NLzma::CEncoder `RTTI Type Descriptor'
.data:000007AC ??_R0?AVCEncoder@NLzma@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:000007AC                                         ; DATA XREF: .rdata$r:000007A4o
.data:000007AC                                         ; .rdata$r:NCompress::NLzma::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000007AC                                         ; const type_info::`vftable'
.data:000007B0                 db    0
.data:000007B1                 db    0
.data:000007B2                 db    0
.data:000007B3                 db    0
.data:000007B4                 db  2Eh ; .
.data:000007B5                 db  3Fh ; ?
.data:000007B6                 db  41h ; A
.data:000007B7                 db  56h ; V
.data:000007B8                 db  43h ; C
.data:000007B9                 db  45h ; E
.data:000007BA                 db  6Eh ; n
.data:000007BB                 db  63h ; c
.data:000007BC                 db  6Fh ; o
.data:000007BD                 db  64h ; d
.data:000007BE                 db  65h ; e
.data:000007BF                 db  72h ; r
.data:000007C0                 db  40h ; @
.data:000007C1                 db  4Eh ; N
.data:000007C2                 db  4Ch ; L
.data:000007C3                 db  7Ah ; z
.data:000007C4                 db  6Dh ; m
.data:000007C5                 db  61h ; a
.data:000007C6                 db  40h ; @
.data:000007C7                 db  4Eh ; N
.data:000007C8                 db  43h ; C
.data:000007C9                 db  6Fh ; o
.data:000007CA                 db  6Dh ; m
.data:000007CB                 db  70h ; p
.data:000007CC                 db  72h ; r
.data:000007CD                 db  65h ; e
.data:000007CE                 db  73h ; s
.data:000007CF                 db  73h ; s
.data:000007D0                 db  40h ; @
.data:000007D1                 db  40h ; @
.data:000007D2                 db    0
.data:000007D3                 align 4
.data:000007D3 _data           ends
.data:000007D3
.rdata$r:000007D4 ; ===========================================================================
.rdata$r:000007D4
.rdata$r:000007D4 ; Segment type: Pure data
.rdata$r:000007D4 ; Segment permissions: Read
.rdata$r:000007D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007D4                 assume cs:_rdata$r
.rdata$r:000007D4                 ;org 7D4h
.rdata$r:000007D4 ; COMDAT (pick any)
.rdata$r:000007D4                 public ??_R3CEncoder@NLzma@NCompress@@8
.rdata$r:000007D4 ; NCompress::NLzma::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007D4 ??_R3CEncoder@NLzma@NCompress@@8 db    0 ; DATA XREF: .rdata$r:000007A8o
.rdata$r:000007D4                                         ; .rdata$r:00000820o ...
.rdata$r:000007D5                 db    0
.rdata$r:000007D6                 db    0
.rdata$r:000007D7                 db    0
.rdata$r:000007D8                 db    5
.rdata$r:000007D9                 db    0
.rdata$r:000007DA                 db    0
.rdata$r:000007DB                 db    0
.rdata$r:000007DC                 db    8
.rdata$r:000007DD                 db    0
.rdata$r:000007DE                 db    0
.rdata$r:000007DF                 db    0
.rdata$r:000007E0                 dd offset ??_R2CEncoder@NLzma@NCompress@@8 ; NCompress::NLzma::CEncoder::`RTTI Base Class Array'
.rdata$r:000007E0 _rdata$r        ends
.rdata$r:000007E0
.rdata$r:000007E4 ; ===========================================================================
.rdata$r:000007E4
.rdata$r:000007E4 ; Segment type: Pure data
.rdata$r:000007E4 ; Segment permissions: Read
.rdata$r:000007E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007E4                 assume cs:_rdata$r
.rdata$r:000007E4                 ;org 7E4h
.rdata$r:000007E4 ; COMDAT (pick any)
.rdata$r:000007E4                 public ??_R2CEncoder@NLzma@NCompress@@8
.rdata$r:000007E4 ; NCompress::NLzma::CEncoder::`RTTI Base Class Array'
.rdata$r:000007E4 ??_R2CEncoder@NLzma@NCompress@@8 dd offset ??_R1A@?0A@EA@CEncoder@NLzma@NCompress@@8
.rdata$r:000007E4                                         ; DATA XREF: .rdata$r:000007E0o
.rdata$r:000007E4                                         ; NCompress::NLzma::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000007E8                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000007EC                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:000007F0                 dd offset ??_R13?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000007F4                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:000007F8                 dd offset ??_R17?0A@EA@ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:000007FC                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00000800                 dd offset ??_R1M@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00000804                 db    0
.rdata$r:00000805                 align 4
.rdata$r:00000805 _rdata$r        ends
.rdata$r:00000805
.rdata$r:00000808 ; ===========================================================================
.rdata$r:00000808
.rdata$r:00000808 ; Segment type: Pure data
.rdata$r:00000808 ; Segment permissions: Read
.rdata$r:00000808 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000808                 assume cs:_rdata$r
.rdata$r:00000808                 ;org 808h
.rdata$r:00000808 ; COMDAT (pick any)
.rdata$r:00000808                 public ??_R1A@?0A@EA@CEncoder@NLzma@NCompress@@8
.rdata$r:00000808 ; NCompress::NLzma::CEncoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000808 ??_R1A@?0A@EA@CEncoder@NLzma@NCompress@@8 dd offset ??_R0?AVCEncoder@NLzma@NCompress@@@8
.rdata$r:00000808                                         ; DATA XREF: .rdata$r:NCompress::NLzma::CEncoder::`RTTI Base Class Array'o
.rdata$r:00000808                                         ; NCompress::NLzma::CEncoder `RTTI Type Descriptor'
.rdata$r:0000080C                 db    7
.rdata$r:0000080D                 db    0
.rdata$r:0000080E                 db    0
.rdata$r:0000080F                 db    0
.rdata$r:00000810                 db    0
.rdata$r:00000811                 db    0
.rdata$r:00000812                 db    0
.rdata$r:00000813                 db    0
.rdata$r:00000814                 db 0FFh
.rdata$r:00000815                 db 0FFh
.rdata$r:00000816                 db 0FFh
.rdata$r:00000817                 db 0FFh
.rdata$r:00000818                 db    0
.rdata$r:00000819                 db    0
.rdata$r:0000081A                 db    0
.rdata$r:0000081B                 db    0
.rdata$r:0000081C                 db  40h ; @
.rdata$r:0000081D                 db    0
.rdata$r:0000081E                 db    0
.rdata$r:0000081F                 db    0
.rdata$r:00000820                 dd offset ??_R3CEncoder@NLzma@NCompress@@8 ; NCompress::NLzma::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000820 _rdata$r        ends
.rdata$r:00000820
.rdata$r:00000824 ; ===========================================================================
.rdata$r:00000824
.rdata$r:00000824 ; Segment type: Pure data
.rdata$r:00000824 ; Segment permissions: Read
.rdata$r:00000824 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000824                 assume cs:_rdata$r
.rdata$r:00000824                 ;org 824h
.rdata$r:00000824 ; COMDAT (pick any)
.rdata$r:00000824                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000824 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000824 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:00000824                                         ; DATA XREF: .rdata$r:000007E8o
.rdata$r:00000824                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o
.rdata$r:00000824                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00000828                 db    1
.rdata$r:00000829                 db    0
.rdata$r:0000082A                 db    0
.rdata$r:0000082B                 db    0
.rdata$r:0000082C                 db    0
.rdata$r:0000082D                 db    0
.rdata$r:0000082E                 db    0
.rdata$r:0000082F                 db    0
.rdata$r:00000830                 db 0FFh
.rdata$r:00000831                 db 0FFh
.rdata$r:00000832                 db 0FFh
.rdata$r:00000833                 db 0FFh
.rdata$r:00000834                 db    0
.rdata$r:00000835                 db    0
.rdata$r:00000836                 db    0
.rdata$r:00000837                 db    0
.rdata$r:00000838                 db  40h ; @
.rdata$r:00000839                 db    0
.rdata$r:0000083A                 db    0
.rdata$r:0000083B                 db    0
.rdata$r:0000083C                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000083C _rdata$r        ends
.rdata$r:0000083C
.data:00000840 ; ===========================================================================
.data:00000840
.data:00000840 ; Segment type: Pure data
.data:00000840 ; Segment permissions: Read/Write
.data:00000840 _data           segment dword public 'DATA' use32
.data:00000840                 assume cs:_data
.data:00000840                 ;org 840h
.data:00000840 ; COMDAT (pick any)
.data:00000840                 public ??_R0?AUICompressCoder@@@8
.data:00000840 ; struct ICompressCoder `RTTI Type Descriptor'
.data:00000840 ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:00000840                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000840                                         ; .rdata$r:00000D6Co
.data:00000840                                         ; const type_info::`vftable'
.data:00000844                 align 8
.data:00000848 a_?auicompressc db '.?AUICompressCoder@@',0
.data:0000085D                 align 10h
.data:0000085D _data           ends
.data:0000085D
.rdata$r:00000860 ; ===========================================================================
.rdata$r:00000860
.rdata$r:00000860 ; Segment type: Pure data
.rdata$r:00000860 ; Segment permissions: Read
.rdata$r:00000860 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000860                 assume cs:_rdata$r
.rdata$r:00000860                 ;org 860h
.rdata$r:00000860 ; COMDAT (pick any)
.rdata$r:00000860                 public ??_R3ICompressCoder@@8
.rdata$r:00000860 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000860 ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:0000083Co
.rdata$r:00000860                                         ; .rdata$r:00000D70o
.rdata$r:00000861                 db    0
.rdata$r:00000862                 db    0
.rdata$r:00000863                 db    0
.rdata$r:00000864                 db    0
.rdata$r:00000865                 db    0
.rdata$r:00000866                 db    0
.rdata$r:00000867                 db    0
.rdata$r:00000868                 db    2
.rdata$r:00000869                 db    0
.rdata$r:0000086A                 db    0
.rdata$r:0000086B                 db    0
.rdata$r:0000086C                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:0000086C _rdata$r        ends
.rdata$r:0000086C
.rdata$r:00000870 ; ===========================================================================
.rdata$r:00000870
.rdata$r:00000870 ; Segment type: Pure data
.rdata$r:00000870 ; Segment permissions: Read
.rdata$r:00000870 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000870                 assume cs:_rdata$r
.rdata$r:00000870                 ;org 870h
.rdata$r:00000870 ; COMDAT (pick any)
.rdata$r:00000870                 public ??_R2ICompressCoder@@8
.rdata$r:00000870 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00000870 ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000870                                         ; DATA XREF: .rdata$r:0000086Co
.rdata$r:00000870                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000874                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000878                 db    0
.rdata$r:00000879                 align 4
.rdata$r:00000879 _rdata$r        ends
.rdata$r:00000879
.rdata$r:0000087C ; ===========================================================================
.rdata$r:0000087C
.rdata$r:0000087C ; Segment type: Pure data
.rdata$r:0000087C ; Segment permissions: Read
.rdata$r:0000087C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000087C                 assume cs:_rdata$r
.rdata$r:0000087C                 ;org 87Ch
.rdata$r:0000087C ; COMDAT (pick any)
.rdata$r:0000087C                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:0000087C ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000087C ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000087C                                         ; DATA XREF: .rdata$r:00000874o
.rdata$r:0000087C                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:0000087C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000880                 db    0
.rdata$r:00000881                 db    0
.rdata$r:00000882                 db    0
.rdata$r:00000883                 db    0
.rdata$r:00000884                 db    0
.rdata$r:00000885                 db    0
.rdata$r:00000886                 db    0
.rdata$r:00000887                 db    0
.rdata$r:00000888                 db 0FFh
.rdata$r:00000889                 db 0FFh
.rdata$r:0000088A                 db 0FFh
.rdata$r:0000088B                 db 0FFh
.rdata$r:0000088C                 db    0
.rdata$r:0000088D                 db    0
.rdata$r:0000088E                 db    0
.rdata$r:0000088F                 db    0
.rdata$r:00000890                 db  40h ; @
.rdata$r:00000891                 db    0
.rdata$r:00000892                 db    0
.rdata$r:00000893                 db    0
.rdata$r:00000894                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000894 _rdata$r        ends
.rdata$r:00000894
.data:00000898 ; ===========================================================================
.data:00000898
.data:00000898 ; Segment type: Pure data
.data:00000898 ; Segment permissions: Read/Write
.data:00000898 _data           segment dword public 'DATA' use32
.data:00000898                 assume cs:_data
.data:00000898                 ;org 898h
.data:00000898 ; COMDAT (pick any)
.data:00000898                 public ??_R0?AUIUnknown@@@8
.data:00000898 ; struct IUnknown `RTTI Type Descriptor'
.data:00000898 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00000898                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000898                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00000898                                         ; const type_info::`vftable'
.data:0000089C                 align 10h
.data:000008A0 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:000008AF                 align 10h
.data:000008AF _data           ends
.data:000008AF
.rdata$r:000008B0 ; ===========================================================================
.rdata$r:000008B0
.rdata$r:000008B0 ; Segment type: Pure data
.rdata$r:000008B0 ; Segment permissions: Read
.rdata$r:000008B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000008B0                 assume cs:_rdata$r
.rdata$r:000008B0                 ;org 8B0h
.rdata$r:000008B0 ; COMDAT (pick any)
.rdata$r:000008B0                 public ??_R3IUnknown@@8
.rdata$r:000008B0 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000008B0 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00000894o
.rdata$r:000008B0                                         ; .rdata$r:000008E0o ...
.rdata$r:000008B1                 db    0
.rdata$r:000008B2                 db    0
.rdata$r:000008B3                 db    0
.rdata$r:000008B4                 db    0
.rdata$r:000008B5                 db    0
.rdata$r:000008B6                 db    0
.rdata$r:000008B7                 db    0
.rdata$r:000008B8                 db    1
.rdata$r:000008B9                 db    0
.rdata$r:000008BA                 db    0
.rdata$r:000008BB                 db    0
.rdata$r:000008BC                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000008BC _rdata$r        ends
.rdata$r:000008BC
.rdata$r:000008C0 ; ===========================================================================
.rdata$r:000008C0
.rdata$r:000008C0 ; Segment type: Pure data
.rdata$r:000008C0 ; Segment permissions: Read
.rdata$r:000008C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000008C0                 assume cs:_rdata$r
.rdata$r:000008C0                 ;org 8C0h
.rdata$r:000008C0 ; COMDAT (pick any)
.rdata$r:000008C0                 public ??_R2IUnknown@@8
.rdata$r:000008C0 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000008C0 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000008C0                                         ; DATA XREF: .rdata$r:000008BCo
.rdata$r:000008C0                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000008C4                 db    0
.rdata$r:000008C5                 align 4
.rdata$r:000008C5 _rdata$r        ends
.rdata$r:000008C5
.rdata$r:000008C8 ; ===========================================================================
.rdata$r:000008C8
.rdata$r:000008C8 ; Segment type: Pure data
.rdata$r:000008C8 ; Segment permissions: Read
.rdata$r:000008C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000008C8                 assume cs:_rdata$r
.rdata$r:000008C8                 ;org 8C8h
.rdata$r:000008C8 ; COMDAT (pick any)
.rdata$r:000008C8                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:000008C8 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:000008C8 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000008C8                                         ; DATA XREF: .rdata$r:000007ECo
.rdata$r:000008C8                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000008CC                 db    0
.rdata$r:000008CD                 db    0
.rdata$r:000008CE                 db    0
.rdata$r:000008CF                 db    0
.rdata$r:000008D0                 db    0
.rdata$r:000008D1                 db    0
.rdata$r:000008D2                 db    0
.rdata$r:000008D3                 db    0
.rdata$r:000008D4                 db 0FFh
.rdata$r:000008D5                 db 0FFh
.rdata$r:000008D6                 db 0FFh
.rdata$r:000008D7                 db 0FFh
.rdata$r:000008D8                 db    0
.rdata$r:000008D9                 db    0
.rdata$r:000008DA                 db    0
.rdata$r:000008DB                 db    0
.rdata$r:000008DC                 db  42h ; B
.rdata$r:000008DD                 db    0
.rdata$r:000008DE                 db    0
.rdata$r:000008DF                 db    0
.rdata$r:000008E0                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000008E0 _rdata$r        ends
.rdata$r:000008E0
.rdata$r:000008E4 ; ===========================================================================
.rdata$r:000008E4
.rdata$r:000008E4 ; Segment type: Pure data
.rdata$r:000008E4 ; Segment permissions: Read
.rdata$r:000008E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000008E4                 assume cs:_rdata$r
.rdata$r:000008E4                 ;org 8E4h
.rdata$r:000008E4 ; COMDAT (pick any)
.rdata$r:000008E4                 public ??_R13?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:000008E4 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:000008E4 ??_R13?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:000008E4                                         ; DATA XREF: .rdata$r:000007F0o
.rdata$r:000008E4                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:000008E8                 db    1
.rdata$r:000008E9                 db    0
.rdata$r:000008EA                 db    0
.rdata$r:000008EB                 db    0
.rdata$r:000008EC                 db    4
.rdata$r:000008ED                 db    0
.rdata$r:000008EE                 db    0
.rdata$r:000008EF                 db    0
.rdata$r:000008F0                 db 0FFh
.rdata$r:000008F1                 db 0FFh
.rdata$r:000008F2                 db 0FFh
.rdata$r:000008F3                 db 0FFh
.rdata$r:000008F4                 db    0
.rdata$r:000008F5                 db    0
.rdata$r:000008F6                 db    0
.rdata$r:000008F7                 db    0
.rdata$r:000008F8                 db  40h ; @
.rdata$r:000008F9                 db    0
.rdata$r:000008FA                 db    0
.rdata$r:000008FB                 db    0
.rdata$r:000008FC                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000008FC _rdata$r        ends
.rdata$r:000008FC
.data:00000900 ; ===========================================================================
.data:00000900
.data:00000900 ; Segment type: Pure data
.data:00000900 ; Segment permissions: Read/Write
.data:00000900 _data           segment dword public 'DATA' use32
.data:00000900                 assume cs:_data
.data:00000900                 ;org 900h
.data:00000900 ; COMDAT (pick any)
.data:00000900                 public ??_R0?AUICompressSetCoderProperties@@@8
.data:00000900 ; struct ICompressSetCoderProperties `RTTI Type Descriptor'
.data:00000900 ??_R0?AUICompressSetCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:00000900                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00000900                                         ; .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000900                                         ; const type_info::`vftable'
.data:00000904                 align 8
.data:00000908 a_?auicompresss db '.?AUICompressSetCoderProperties@@',0
.data:0000092A                 align 4
.data:0000092A _data           ends
.data:0000092A
.rdata$r:0000092C ; ===========================================================================
.rdata$r:0000092C
.rdata$r:0000092C ; Segment type: Pure data
.rdata$r:0000092C ; Segment permissions: Read
.rdata$r:0000092C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000092C                 assume cs:_rdata$r
.rdata$r:0000092C                 ;org 92Ch
.rdata$r:0000092C ; COMDAT (pick any)
.rdata$r:0000092C                 public ??_R3ICompressSetCoderProperties@@8
.rdata$r:0000092C ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000092C ??_R3ICompressSetCoderProperties@@8 db    0
.rdata$r:0000092C                                         ; DATA XREF: .rdata$r:000008FCo
.rdata$r:0000092C                                         ; .rdata$r:00000960o ...
.rdata$r:0000092D                 db    0
.rdata$r:0000092E                 db    0
.rdata$r:0000092F                 db    0
.rdata$r:00000930                 db    0
.rdata$r:00000931                 db    0
.rdata$r:00000932                 db    0
.rdata$r:00000933                 db    0
.rdata$r:00000934                 db    2
.rdata$r:00000935                 db    0
.rdata$r:00000936                 db    0
.rdata$r:00000937                 db    0
.rdata$r:00000938                 dd offset ??_R2ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00000938 _rdata$r        ends
.rdata$r:00000938
.rdata$r:0000093C ; ===========================================================================
.rdata$r:0000093C
.rdata$r:0000093C ; Segment type: Pure data
.rdata$r:0000093C ; Segment permissions: Read
.rdata$r:0000093C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000093C                 assume cs:_rdata$r
.rdata$r:0000093C                 ;org 93Ch
.rdata$r:0000093C ; COMDAT (pick any)
.rdata$r:0000093C                 public ??_R2ICompressSetCoderProperties@@8
.rdata$r:0000093C ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:0000093C ??_R2ICompressSetCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:0000093C                                         ; DATA XREF: .rdata$r:00000938o
.rdata$r:0000093C                                         ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000940                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000944                 db    0
.rdata$r:00000945                 align 4
.rdata$r:00000945 _rdata$r        ends
.rdata$r:00000945
.rdata$r:00000948 ; ===========================================================================
.rdata$r:00000948
.rdata$r:00000948 ; Segment type: Pure data
.rdata$r:00000948 ; Segment permissions: Read
.rdata$r:00000948 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000948                 assume cs:_rdata$r
.rdata$r:00000948                 ;org 948h
.rdata$r:00000948 ; COMDAT (pick any)
.rdata$r:00000948                 public ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00000948 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000948 ??_R1A@?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:00000948                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Array'o
.rdata$r:00000948                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:0000094C                 db    1
.rdata$r:0000094D                 db    0
.rdata$r:0000094E                 db    0
.rdata$r:0000094F                 db    0
.rdata$r:00000950                 db    0
.rdata$r:00000951                 db    0
.rdata$r:00000952                 db    0
.rdata$r:00000953                 db    0
.rdata$r:00000954                 db 0FFh
.rdata$r:00000955                 db 0FFh
.rdata$r:00000956                 db 0FFh
.rdata$r:00000957                 db 0FFh
.rdata$r:00000958                 db    0
.rdata$r:00000959                 db    0
.rdata$r:0000095A                 db    0
.rdata$r:0000095B                 db    0
.rdata$r:0000095C                 db  40h ; @
.rdata$r:0000095D                 db    0
.rdata$r:0000095E                 db    0
.rdata$r:0000095F                 db    0
.rdata$r:00000960                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000960 _rdata$r        ends
.rdata$r:00000960
.rdata$r:00000964 ; ===========================================================================
.rdata$r:00000964
.rdata$r:00000964 ; Segment type: Pure data
.rdata$r:00000964 ; Segment permissions: Read
.rdata$r:00000964 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000964                 assume cs:_rdata$r
.rdata$r:00000964                 ;org 964h
.rdata$r:00000964 ; COMDAT (pick any)
.rdata$r:00000964                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00000964 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00000964 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000964                                         ; DATA XREF: .rdata$r:000007F4o
.rdata$r:00000964                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000968                 db    0
.rdata$r:00000969                 db    0
.rdata$r:0000096A                 db    0
.rdata$r:0000096B                 db    0
.rdata$r:0000096C                 db    4
.rdata$r:0000096D                 db    0
.rdata$r:0000096E                 db    0
.rdata$r:0000096F                 db    0
.rdata$r:00000970                 db 0FFh
.rdata$r:00000971                 db 0FFh
.rdata$r:00000972                 db 0FFh
.rdata$r:00000973                 db 0FFh
.rdata$r:00000974                 db    0
.rdata$r:00000975                 db    0
.rdata$r:00000976                 db    0
.rdata$r:00000977                 db    0
.rdata$r:00000978                 db  42h ; B
.rdata$r:00000979                 db    0
.rdata$r:0000097A                 db    0
.rdata$r:0000097B                 db    0
.rdata$r:0000097C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000097C _rdata$r        ends
.rdata$r:0000097C
.rdata$r:00000980 ; ===========================================================================
.rdata$r:00000980
.rdata$r:00000980 ; Segment type: Pure data
.rdata$r:00000980 ; Segment permissions: Read
.rdata$r:00000980 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000980                 assume cs:_rdata$r
.rdata$r:00000980                 ;org 980h
.rdata$r:00000980 ; COMDAT (pick any)
.rdata$r:00000980                 public ??_R17?0A@EA@ICompressWriteCoderProperties@@8
.rdata$r:00000980 ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00000980 ??_R17?0A@EA@ICompressWriteCoderProperties@@8 dd offset ??_R0?AUICompressWriteCoderProperties@@@8
.rdata$r:00000980                                         ; DATA XREF: .rdata$r:000007F8o
.rdata$r:00000980                                         ; ICompressWriteCoderProperties `RTTI Type Descriptor'
.rdata$r:00000984                 db    1
.rdata$r:00000985                 db    0
.rdata$r:00000986                 db    0
.rdata$r:00000987                 db    0
.rdata$r:00000988                 db    8
.rdata$r:00000989                 db    0
.rdata$r:0000098A                 db    0
.rdata$r:0000098B                 db    0
.rdata$r:0000098C                 db 0FFh
.rdata$r:0000098D                 db 0FFh
.rdata$r:0000098E                 db 0FFh
.rdata$r:0000098F                 db 0FFh
.rdata$r:00000990                 db    0
.rdata$r:00000991                 db    0
.rdata$r:00000992                 db    0
.rdata$r:00000993                 db    0
.rdata$r:00000994                 db  40h ; @
.rdata$r:00000995                 db    0
.rdata$r:00000996                 db    0
.rdata$r:00000997                 db    0
.rdata$r:00000998                 dd offset ??_R3ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000998 _rdata$r        ends
.rdata$r:00000998
.data:0000099C ; ===========================================================================
.data:0000099C
.data:0000099C ; Segment type: Pure data
.data:0000099C ; Segment permissions: Read/Write
.data:0000099C _data           segment dword public 'DATA' use32
.data:0000099C                 assume cs:_data
.data:0000099C                 ;org 99Ch
.data:0000099C ; COMDAT (pick any)
.data:0000099C                 public ??_R0?AUICompressWriteCoderProperties@@@8
.data:0000099C ; struct ICompressWriteCoderProperties `RTTI Type Descriptor'
.data:0000099C ??_R0?AUICompressWriteCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:0000099C                                         ; DATA XREF: .rdata$r:ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:0000099C                                         ; .rdata$r:ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000099C                                         ; const type_info::`vftable'
.data:000009A0                 db    0
.data:000009A1                 db    0
.data:000009A2                 db    0
.data:000009A3                 db    0
.data:000009A4                 db  2Eh ; .
.data:000009A5                 db  3Fh ; ?
.data:000009A6                 db  41h ; A
.data:000009A7                 db  55h ; U
.data:000009A8                 db  49h ; I
.data:000009A9                 db  43h ; C
.data:000009AA                 db  6Fh ; o
.data:000009AB                 db  6Dh ; m
.data:000009AC                 db  70h ; p
.data:000009AD                 db  72h ; r
.data:000009AE                 db  65h ; e
.data:000009AF                 db  73h ; s
.data:000009B0                 db  73h ; s
.data:000009B1                 db  57h ; W
.data:000009B2                 db  72h ; r
.data:000009B3                 db  69h ; i
.data:000009B4                 db  74h ; t
.data:000009B5                 db  65h ; e
.data:000009B6                 db  43h ; C
.data:000009B7                 db  6Fh ; o
.data:000009B8                 db  64h ; d
.data:000009B9                 db  65h ; e
.data:000009BA                 db  72h ; r
.data:000009BB                 db  50h ; P
.data:000009BC                 db  72h ; r
.data:000009BD                 db  6Fh ; o
.data:000009BE                 db  70h ; p
.data:000009BF                 db  65h ; e
.data:000009C0                 db  72h ; r
.data:000009C1                 db  74h ; t
.data:000009C2                 db  69h ; i
.data:000009C3                 db  65h ; e
.data:000009C4                 db  73h ; s
.data:000009C5                 db  40h ; @
.data:000009C6                 db  40h ; @
.data:000009C7                 db    0
.data:000009C7 _data           ends
.data:000009C7
.rdata$r:000009C8 ; ===========================================================================
.rdata$r:000009C8
.rdata$r:000009C8 ; Segment type: Pure data
.rdata$r:000009C8 ; Segment permissions: Read
.rdata$r:000009C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000009C8                 assume cs:_rdata$r
.rdata$r:000009C8                 ;org 9C8h
.rdata$r:000009C8 ; COMDAT (pick any)
.rdata$r:000009C8                 public ??_R3ICompressWriteCoderProperties@@8
.rdata$r:000009C8 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000009C8 ??_R3ICompressWriteCoderProperties@@8 db    0
.rdata$r:000009C8                                         ; DATA XREF: .rdata$r:00000998o
.rdata$r:000009C8                                         ; .rdata$r:000009FCo ...
.rdata$r:000009C9                 db    0
.rdata$r:000009CA                 db    0
.rdata$r:000009CB                 db    0
.rdata$r:000009CC                 db    0
.rdata$r:000009CD                 db    0
.rdata$r:000009CE                 db    0
.rdata$r:000009CF                 db    0
.rdata$r:000009D0                 db    2
.rdata$r:000009D1                 db    0
.rdata$r:000009D2                 db    0
.rdata$r:000009D3                 db    0
.rdata$r:000009D4                 dd offset ??_R2ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Base Class Array'
.rdata$r:000009D4 _rdata$r        ends
.rdata$r:000009D4
.rdata$r:000009D8 ; ===========================================================================
.rdata$r:000009D8
.rdata$r:000009D8 ; Segment type: Pure data
.rdata$r:000009D8 ; Segment permissions: Read
.rdata$r:000009D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000009D8                 assume cs:_rdata$r
.rdata$r:000009D8                 ;org 9D8h
.rdata$r:000009D8 ; COMDAT (pick any)
.rdata$r:000009D8                 public ??_R2ICompressWriteCoderProperties@@8
.rdata$r:000009D8 ; ICompressWriteCoderProperties::`RTTI Base Class Array'
.rdata$r:000009D8 ??_R2ICompressWriteCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressWriteCoderProperties@@8
.rdata$r:000009D8                                         ; DATA XREF: .rdata$r:000009D4o
.rdata$r:000009D8                                         ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000009DC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000009E0                 db    0
.rdata$r:000009E1                 align 4
.rdata$r:000009E1 _rdata$r        ends
.rdata$r:000009E1
.rdata$r:000009E4 ; ===========================================================================
.rdata$r:000009E4
.rdata$r:000009E4 ; Segment type: Pure data
.rdata$r:000009E4 ; Segment permissions: Read
.rdata$r:000009E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000009E4                 assume cs:_rdata$r
.rdata$r:000009E4                 ;org 9E4h
.rdata$r:000009E4 ; COMDAT (pick any)
.rdata$r:000009E4                 public ??_R1A@?0A@EA@ICompressWriteCoderProperties@@8
.rdata$r:000009E4 ; ICompressWriteCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000009E4 ??_R1A@?0A@EA@ICompressWriteCoderProperties@@8 dd offset ??_R0?AUICompressWriteCoderProperties@@@8
.rdata$r:000009E4                                         ; DATA XREF: .rdata$r:ICompressWriteCoderProperties::`RTTI Base Class Array'o
.rdata$r:000009E4                                         ; ICompressWriteCoderProperties `RTTI Type Descriptor'
.rdata$r:000009E8                 db    1
.rdata$r:000009E9                 db    0
.rdata$r:000009EA                 db    0
.rdata$r:000009EB                 db    0
.rdata$r:000009EC                 db    0
.rdata$r:000009ED                 db    0
.rdata$r:000009EE                 db    0
.rdata$r:000009EF                 db    0
.rdata$r:000009F0                 db 0FFh
.rdata$r:000009F1                 db 0FFh
.rdata$r:000009F2                 db 0FFh
.rdata$r:000009F3                 db 0FFh
.rdata$r:000009F4                 db    0
.rdata$r:000009F5                 db    0
.rdata$r:000009F6                 db    0
.rdata$r:000009F7                 db    0
.rdata$r:000009F8                 db  40h ; @
.rdata$r:000009F9                 db    0
.rdata$r:000009FA                 db    0
.rdata$r:000009FB                 db    0
.rdata$r:000009FC                 dd offset ??_R3ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000009FC _rdata$r        ends
.rdata$r:000009FC
.rdata$r:00000A00 ; ===========================================================================
.rdata$r:00000A00
.rdata$r:00000A00 ; Segment type: Pure data
.rdata$r:00000A00 ; Segment permissions: Read
.rdata$r:00000A00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A00                 assume cs:_rdata$r
.rdata$r:00000A00                 ;org 0A00h
.rdata$r:00000A00 ; COMDAT (pick any)
.rdata$r:00000A00                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:00000A00 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:00000A00 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000A00                                         ; DATA XREF: .rdata$r:000007FCo
.rdata$r:00000A00                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000A04                 align 8
.rdata$r:00000A08                 db    8
.rdata$r:00000A09                 db    0
.rdata$r:00000A0A                 db    0
.rdata$r:00000A0B                 db    0
.rdata$r:00000A0C                 db 0FFh
.rdata$r:00000A0D                 db 0FFh
.rdata$r:00000A0E                 db 0FFh
.rdata$r:00000A0F                 db 0FFh
.rdata$r:00000A10                 db    0
.rdata$r:00000A11                 db    0
.rdata$r:00000A12                 db    0
.rdata$r:00000A13                 db    0
.rdata$r:00000A14                 db  42h ; B
.rdata$r:00000A15                 db    0
.rdata$r:00000A16                 db    0
.rdata$r:00000A17                 db    0
.rdata$r:00000A18                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A18 _rdata$r        ends
.rdata$r:00000A18
.rdata$r:00000A1C ; ===========================================================================
.rdata$r:00000A1C
.rdata$r:00000A1C ; Segment type: Pure data
.rdata$r:00000A1C ; Segment permissions: Read
.rdata$r:00000A1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A1C                 assume cs:_rdata$r
.rdata$r:00000A1C                 ;org 0A1Ch
.rdata$r:00000A1C ; COMDAT (pick any)
.rdata$r:00000A1C                 public ??_R1M@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000A1C ; CMyUnknownImp::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00000A1C ??_R1M@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000A1C                                         ; DATA XREF: .rdata$r:00000800o
.rdata$r:00000A1C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000A20                 db    0
.rdata$r:00000A21                 db    0
.rdata$r:00000A22                 db    0
.rdata$r:00000A23                 db    0
.rdata$r:00000A24                 db  0Ch
.rdata$r:00000A25                 db    0
.rdata$r:00000A26                 db    0
.rdata$r:00000A27                 db    0
.rdata$r:00000A28                 db 0FFh
.rdata$r:00000A29                 db 0FFh
.rdata$r:00000A2A                 db 0FFh
.rdata$r:00000A2B                 db 0FFh
.rdata$r:00000A2C                 db    0
.rdata$r:00000A2D                 db    0
.rdata$r:00000A2E                 db    0
.rdata$r:00000A2F                 db    0
.rdata$r:00000A30                 db  40h ; @
.rdata$r:00000A31                 db    0
.rdata$r:00000A32                 db    0
.rdata$r:00000A33                 db    0
.rdata$r:00000A34                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A34 _rdata$r        ends
.rdata$r:00000A34
.data:00000A38 ; ===========================================================================
.data:00000A38
.data:00000A38 ; Segment type: Pure data
.data:00000A38 ; Segment permissions: Read/Write
.data:00000A38 _data           segment dword public 'DATA' use32
.data:00000A38                 assume cs:_data
.data:00000A38                 ;org 0A38h
.data:00000A38 ; COMDAT (pick any)
.data:00000A38                 public ??_R0?AVCMyUnknownImp@@@8
.data:00000A38 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00000A38 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00000A38                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:00000A38                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000A38                                         ; const type_info::`vftable'
.data:00000A3C                 align 10h
.data:00000A40 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00000A40 _data           ends
.data:00000A40
.rdata$r:00000A54 ; ===========================================================================
.rdata$r:00000A54
.rdata$r:00000A54 ; Segment type: Pure data
.rdata$r:00000A54 ; Segment permissions: Read
.rdata$r:00000A54 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A54                 assume cs:_rdata$r
.rdata$r:00000A54                 ;org 0A54h
.rdata$r:00000A54 ; COMDAT (pick any)
.rdata$r:00000A54                 public ??_R3CMyUnknownImp@@8
.rdata$r:00000A54 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A54 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00000A34o
.rdata$r:00000A54                                         ; .rdata$r:00000A84o
.rdata$r:00000A55                 db    0
.rdata$r:00000A56                 db    0
.rdata$r:00000A57                 db    0
.rdata$r:00000A58                 db    0
.rdata$r:00000A59                 db    0
.rdata$r:00000A5A                 db    0
.rdata$r:00000A5B                 db    0
.rdata$r:00000A5C                 db    1
.rdata$r:00000A5D                 db    0
.rdata$r:00000A5E                 db    0
.rdata$r:00000A5F                 db    0
.rdata$r:00000A60                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000A60 _rdata$r        ends
.rdata$r:00000A60
.rdata$r:00000A64 ; ===========================================================================
.rdata$r:00000A64
.rdata$r:00000A64 ; Segment type: Pure data
.rdata$r:00000A64 ; Segment permissions: Read
.rdata$r:00000A64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A64                 assume cs:_rdata$r
.rdata$r:00000A64                 ;org 0A64h
.rdata$r:00000A64 ; COMDAT (pick any)
.rdata$r:00000A64                 public ??_R2CMyUnknownImp@@8
.rdata$r:00000A64 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000A64 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000A64                                         ; DATA XREF: .rdata$r:00000A60o
.rdata$r:00000A64                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000A68                 db    0
.rdata$r:00000A69                 align 4
.rdata$r:00000A69 _rdata$r        ends
.rdata$r:00000A69
.rdata$r:00000A6C ; ===========================================================================
.rdata$r:00000A6C
.rdata$r:00000A6C ; Segment type: Pure data
.rdata$r:00000A6C ; Segment permissions: Read
.rdata$r:00000A6C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A6C                 assume cs:_rdata$r
.rdata$r:00000A6C                 ;org 0A6Ch
.rdata$r:00000A6C ; COMDAT (pick any)
.rdata$r:00000A6C                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000A6C ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000A6C ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000A6C                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00000A6C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000A70                 db    0
.rdata$r:00000A71                 db    0
.rdata$r:00000A72                 db    0
.rdata$r:00000A73                 db    0
.rdata$r:00000A74                 db    0
.rdata$r:00000A75                 db    0
.rdata$r:00000A76                 db    0
.rdata$r:00000A77                 db    0
.rdata$r:00000A78                 db 0FFh
.rdata$r:00000A79                 db 0FFh
.rdata$r:00000A7A                 db 0FFh
.rdata$r:00000A7B                 db 0FFh
.rdata$r:00000A7C                 db    0
.rdata$r:00000A7D                 db    0
.rdata$r:00000A7E                 db    0
.rdata$r:00000A7F                 db    0
.rdata$r:00000A80                 db  40h ; @
.rdata$r:00000A81                 db    0
.rdata$r:00000A82                 db    0
.rdata$r:00000A83                 db    0
.rdata$r:00000A84                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A84 _rdata$r        ends
.rdata$r:00000A84
.rdata$r:00000A88 ; ===========================================================================
.rdata$r:00000A88
.rdata$r:00000A88 ; Segment type: Pure data
.rdata$r:00000A88 ; Segment permissions: Read
.rdata$r:00000A88 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A88                 assume cs:_rdata$r
.rdata$r:00000A88                 ;org 0A88h
.rdata$r:00000A88 ; COMDAT (pick any)
.rdata$r:00000A88                 public ??_R4CEncoder@NLzma@NCompress@@6BICompressSetCoderProperties@@@
.rdata$r:00000A88 ; const NCompress::NLzma::CEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:00000A88 ??_R4CEncoder@NLzma@NCompress@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:00000A88                                         ; DATA XREF: .rdata:00000764o
.rdata$r:00000A89                 db    0
.rdata$r:00000A8A                 db    0
.rdata$r:00000A8B                 db    0
.rdata$r:00000A8C                 db    4
.rdata$r:00000A8D                 db    0
.rdata$r:00000A8E                 db    0
.rdata$r:00000A8F                 db    0
.rdata$r:00000A90                 db    0
.rdata$r:00000A91                 db    0
.rdata$r:00000A92                 db    0
.rdata$r:00000A93                 db    0
.rdata$r:00000A94                 dd offset ??_R0?AVCEncoder@NLzma@NCompress@@@8 ; NCompress::NLzma::CEncoder `RTTI Type Descriptor'
.rdata$r:00000A98                 dd offset ??_R3CEncoder@NLzma@NCompress@@8 ; NCompress::NLzma::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A98 _rdata$r        ends
.rdata$r:00000A98
.rdata$r:00000A9C ; ===========================================================================
.rdata$r:00000A9C
.rdata$r:00000A9C ; Segment type: Pure data
.rdata$r:00000A9C ; Segment permissions: Read
.rdata$r:00000A9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A9C                 assume cs:_rdata$r
.rdata$r:00000A9C                 ;org 0A9Ch
.rdata$r:00000A9C ; COMDAT (pick any)
.rdata$r:00000A9C                 public ??_R4CEncoder@NLzma@NCompress@@6BICompressWriteCoderProperties@@@
.rdata$r:00000A9C ; const NCompress::NLzma::CEncoder::`RTTI Complete Object Locator'{for `ICompressWriteCoderProperties'}
.rdata$r:00000A9C ??_R4CEncoder@NLzma@NCompress@@6BICompressWriteCoderProperties@@@ db    0
.rdata$r:00000A9C                                         ; DATA XREF: .rdata:00000750o
.rdata$r:00000A9D                 db    0
.rdata$r:00000A9E                 db    0
.rdata$r:00000A9F                 db    0
.rdata$r:00000AA0                 db    8
.rdata$r:00000AA1                 db    0
.rdata$r:00000AA2                 db    0
.rdata$r:00000AA3                 db    0
.rdata$r:00000AA4                 db    0
.rdata$r:00000AA5                 db    0
.rdata$r:00000AA6                 db    0
.rdata$r:00000AA7                 db    0
.rdata$r:00000AA8                 dd offset ??_R0?AVCEncoder@NLzma@NCompress@@@8 ; NCompress::NLzma::CEncoder `RTTI Type Descriptor'
.rdata$r:00000AAC                 dd offset ??_R3CEncoder@NLzma@NCompress@@8 ; NCompress::NLzma::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000AAC _rdata$r        ends
.rdata$r:00000AAC
.xdata$x:00000AB0 ; ===========================================================================
.xdata$x:00000AB0
.xdata$x:00000AB0 ; Segment type: Pure data
.xdata$x:00000AB0 ; Segment permissions: Read
.xdata$x:00000AB0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000AB0                 assume cs:_xdata$x
.xdata$x:00000AB0                 ;org 0AB0h
.xdata$x:00000AB0 ; COMDAT (pick any)
.xdata$x:00000AB0                 public __CTA1H
.xdata$x:00000AB0 __CTA1H         db    1                 ; DATA XREF: .xdata$x:0000074Co
.xdata$x:00000AB1                 db    0
.xdata$x:00000AB2                 db    0
.xdata$x:00000AB3                 db    0
.xdata$x:00000AB4                 dd offset __CT??_R0H@84
.xdata$x:00000AB4 _xdata$x        ends
.xdata$x:00000AB4
.xdata$x:00000AB8 ; ===========================================================================
.xdata$x:00000AB8
.xdata$x:00000AB8 ; Segment type: Pure data
.xdata$x:00000AB8 ; Segment permissions: Read
.xdata$x:00000AB8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000AB8                 assume cs:_xdata$x
.xdata$x:00000AB8                 ;org 0AB8h
.xdata$x:00000AB8 ; COMDAT (pick any)
.xdata$x:00000AB8                 public __CT??_R0H@84
.xdata$x:00000AB8 __CT??_R0H@84   db    1                 ; DATA XREF: .xdata$x:00000AB4o
.xdata$x:00000AB9                 db    0
.xdata$x:00000ABA                 db    0
.xdata$x:00000ABB                 db    0
.xdata$x:00000ABC                 dd offset ??_R0H@8      ; int `RTTI Type Descriptor'
.xdata$x:00000AC0                 db    0
.xdata$x:00000AC1                 db    0
.xdata$x:00000AC2                 db    0
.xdata$x:00000AC3                 db    0
.xdata$x:00000AC4                 db 0FFh
.xdata$x:00000AC5                 db 0FFh
.xdata$x:00000AC6                 db 0FFh
.xdata$x:00000AC7                 db 0FFh
.xdata$x:00000AC8                 db    0
.xdata$x:00000AC9                 db    0
.xdata$x:00000ACA                 db    0
.xdata$x:00000ACB                 db    0
.xdata$x:00000ACC                 db    4
.xdata$x:00000ACD                 db    0
.xdata$x:00000ACE                 db    0
.xdata$x:00000ACF                 db    0
.xdata$x:00000AD0                 db    0
.xdata$x:00000AD1                 db    0
.xdata$x:00000AD2                 db    0
.xdata$x:00000AD3                 db    0
.xdata$x:00000AD3 _xdata$x        ends
.xdata$x:00000AD3
.data:00000AD4 ; ===========================================================================
.data:00000AD4
.data:00000AD4 ; Segment type: Pure data
.data:00000AD4 ; Segment permissions: Read/Write
.data:00000AD4 _data           segment dword public 'DATA' use32
.data:00000AD4                 assume cs:_data
.data:00000AD4                 ;org 0AD4h
.data:00000AD4 ; COMDAT (pick any)
.data:00000AD4                 public ??_R0H@8
.data:00000AD4 ; int `RTTI Type Descriptor'
.data:00000AD4 ??_R0H@8        dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:00000ABCo
.data:00000AD4                                         ; const type_info::`vftable'
.data:00000AD8                 db    0
.data:00000AD9                 db    0
.data:00000ADA                 db    0
.data:00000ADB                 db    0
.data:00000ADC                 db  2Eh ; .
.data:00000ADD                 db  48h ; H
.data:00000ADE                 db    0
.data:00000ADF                 align 10h
.data:00000ADF _data           ends
.data:00000ADF
.text:00000AE0 ; ===========================================================================
.text:00000AE0
.text:00000AE0 ; Segment type: Pure code
.text:00000AE0 ; Segment permissions: Read/Execute
.text:00000AE0 _text           segment para public 'CODE' use32
.text:00000AE0                 assume cs:_text
.text:00000AE0                 ;org 0AE0h
.text:00000AE0 ; COMDAT (pick any)
.text:00000AE0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000AE0
.text:00000AE0 ; =============== S U B R O U T I N E =======================================
.text:00000AE0
.text:00000AE0 ; Attributes: bp-based frame
.text:00000AE0
.text:00000AE0 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00000AE0                 public ??0CMyUnknownImp@@QAE@XZ
.text:00000AE0 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::NLzma::CEncoder::CEncoder(void)+3Bp
.text:00000AE0
.text:00000AE0 var_4           = dword ptr -4
.text:00000AE0
.text:00000AE0                 push    ebp
.text:00000AE1                 mov     ebp, esp
.text:00000AE3                 push    ecx
.text:00000AE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AEB                 mov     [ebp+var_4], ecx
.text:00000AEE                 mov     eax, [ebp+var_4]
.text:00000AF1                 mov     dword ptr [eax], 0
.text:00000AF7                 mov     eax, [ebp+var_4]
.text:00000AFA                 mov     esp, ebp
.text:00000AFC                 pop     ebp
.text:00000AFD                 retn
.text:00000AFD ??0CMyUnknownImp@@QAE@XZ endp
.text:00000AFD
.text:00000AFD ; ---------------------------------------------------------------------------
.text:00000AFE                 align 10h
.text:00000AFE _text           ends
.text:00000AFE
.text:00000B00 ; ===========================================================================
.text:00000B00
.text:00000B00 ; Segment type: Pure code
.text:00000B00 ; Segment permissions: Read/Execute
.text:00000B00 _text           segment para public 'CODE' use32
.text:00000B00                 assume cs:_text
.text:00000B00                 ;org 0B00h
.text:00000B00 ; COMDAT (pick any)
.text:00000B00                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000B00
.text:00000B00 ; =============== S U B R O U T I N E =======================================
.text:00000B00
.text:00000B00 ; Attributes: bp-based frame
.text:00000B00
.text:00000B00 ; __int32 __stdcall NCompress::NLzma::CEncoder::QueryInterface(NCompress::NLzma::CEncoder *this, const struct _GUID *Buf1, void **)
.text:00000B00                 public ?QueryInterface@CEncoder@NLzma@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00000B00 ?QueryInterface@CEncoder@NLzma@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000B00                                         ; CODE XREF: [thunk]:NCompress::NLzma::CEncoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00000B00                                         ; [thunk]:NCompress::NLzma::CEncoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j
.text:00000B00                                         ; DATA XREF: ...
.text:00000B00
.text:00000B00 var_C           = dword ptr -0Ch
.text:00000B00 var_8           = dword ptr -8
.text:00000B00 var_4           = dword ptr -4
.text:00000B00 this            = dword ptr  8
.text:00000B00 Buf1            = dword ptr  0Ch
.text:00000B00 arg_8           = dword ptr  10h
.text:00000B00
.text:00000B00                 push    ebp
.text:00000B01                 mov     ebp, esp
.text:00000B03                 sub     esp, 0Ch
.text:00000B06                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000B0D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000B14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B1B                 mov     eax, [ebp+arg_8]
.text:00000B1E                 mov     dword ptr [eax], 0
.text:00000B24                 push    offset _IID_IUnknown ; Buf2
.text:00000B29                 mov     ecx, [ebp+Buf1]
.text:00000B2C                 push    ecx             ; Buf1
.text:00000B2D                 call    ___@8           ; __(x,x)
.text:00000B32                 test    eax, eax
.text:00000B34                 jz      short loc_B58
.text:00000B36                 cmp     [ebp+this], 0
.text:00000B3A                 jz      short loc_B47
.text:00000B3C                 mov     edx, [ebp+this]
.text:00000B3F                 add     edx, 4
.text:00000B42                 mov     [ebp+var_4], edx
.text:00000B45                 jmp     short loc_B4E
.text:00000B47 ; ---------------------------------------------------------------------------
.text:00000B47
.text:00000B47 loc_B47:                                ; CODE XREF: NCompress::NLzma::CEncoder::QueryInterface(_GUID const &,void * *)+3Aj
.text:00000B47                 mov     [ebp+var_4], 0
.text:00000B4E
.text:00000B4E loc_B4E:                                ; CODE XREF: NCompress::NLzma::CEncoder::QueryInterface(_GUID const &,void * *)+45j
.text:00000B4E                 mov     eax, [ebp+arg_8]
.text:00000B51                 mov     ecx, [ebp+var_4]
.text:00000B54                 mov     [eax], ecx
.text:00000B56                 jmp     short loc_BC7
.text:00000B58 ; ---------------------------------------------------------------------------
.text:00000B58
.text:00000B58 loc_B58:                                ; CODE XREF: NCompress::NLzma::CEncoder::QueryInterface(_GUID const &,void * *)+34j
.text:00000B58                 push    offset _IID_ICompressSetCoderProperties ; Buf2
.text:00000B5D                 mov     edx, [ebp+Buf1]
.text:00000B60                 push    edx             ; Buf1
.text:00000B61                 call    ___@8           ; __(x,x)
.text:00000B66                 test    eax, eax
.text:00000B68                 jz      short loc_B8C
.text:00000B6A                 cmp     [ebp+this], 0
.text:00000B6E                 jz      short loc_B7B
.text:00000B70                 mov     eax, [ebp+this]
.text:00000B73                 add     eax, 4
.text:00000B76                 mov     [ebp+var_8], eax
.text:00000B79                 jmp     short loc_B82
.text:00000B7B ; ---------------------------------------------------------------------------
.text:00000B7B
.text:00000B7B loc_B7B:                                ; CODE XREF: NCompress::NLzma::CEncoder::QueryInterface(_GUID const &,void * *)+6Ej
.text:00000B7B                 mov     [ebp+var_8], 0
.text:00000B82
.text:00000B82 loc_B82:                                ; CODE XREF: NCompress::NLzma::CEncoder::QueryInterface(_GUID const &,void * *)+79j
.text:00000B82                 mov     ecx, [ebp+arg_8]
.text:00000B85                 mov     edx, [ebp+var_8]
.text:00000B88                 mov     [ecx], edx
.text:00000B8A                 jmp     short loc_BC7
.text:00000B8C ; ---------------------------------------------------------------------------
.text:00000B8C
.text:00000B8C loc_B8C:                                ; CODE XREF: NCompress::NLzma::CEncoder::QueryInterface(_GUID const &,void * *)+68j
.text:00000B8C                 push    offset _IID_ICompressWriteCoderProperties ; Buf2
.text:00000B91                 mov     eax, [ebp+Buf1]
.text:00000B94                 push    eax             ; Buf1
.text:00000B95                 call    ___@8           ; __(x,x)
.text:00000B9A                 test    eax, eax
.text:00000B9C                 jz      short loc_BC0
.text:00000B9E                 cmp     [ebp+this], 0
.text:00000BA2                 jz      short loc_BAF
.text:00000BA4                 mov     ecx, [ebp+this]
.text:00000BA7                 add     ecx, 8
.text:00000BAA                 mov     [ebp+var_C], ecx
.text:00000BAD                 jmp     short loc_BB6
.text:00000BAF ; ---------------------------------------------------------------------------
.text:00000BAF
.text:00000BAF loc_BAF:                                ; CODE XREF: NCompress::NLzma::CEncoder::QueryInterface(_GUID const &,void * *)+A2j
.text:00000BAF                 mov     [ebp+var_C], 0
.text:00000BB6
.text:00000BB6 loc_BB6:                                ; CODE XREF: NCompress::NLzma::CEncoder::QueryInterface(_GUID const &,void * *)+ADj
.text:00000BB6                 mov     edx, [ebp+arg_8]
.text:00000BB9                 mov     eax, [ebp+var_C]
.text:00000BBC                 mov     [edx], eax
.text:00000BBE                 jmp     short loc_BC7
.text:00000BC0 ; ---------------------------------------------------------------------------
.text:00000BC0
.text:00000BC0 loc_BC0:                                ; CODE XREF: NCompress::NLzma::CEncoder::QueryInterface(_GUID const &,void * *)+9Cj
.text:00000BC0                 mov     eax, 80004002h
.text:00000BC5                 jmp     short loc_BD8
.text:00000BC7 ; ---------------------------------------------------------------------------
.text:00000BC7
.text:00000BC7 loc_BC7:                                ; CODE XREF: NCompress::NLzma::CEncoder::QueryInterface(_GUID const &,void * *)+56j
.text:00000BC7                                         ; NCompress::NLzma::CEncoder::QueryInterface(_GUID const &,void * *)+8Aj ...
.text:00000BC7                 mov     ecx, [ebp+this]
.text:00000BCA                 mov     edx, [ecx+0Ch]
.text:00000BCD                 add     edx, 1
.text:00000BD0                 mov     eax, [ebp+this]
.text:00000BD3                 mov     [eax+0Ch], edx
.text:00000BD6                 xor     eax, eax
.text:00000BD8
.text:00000BD8 loc_BD8:                                ; CODE XREF: NCompress::NLzma::CEncoder::QueryInterface(_GUID const &,void * *)+C5j
.text:00000BD8                 add     esp, 0Ch
.text:00000BDB                 cmp     ebp, esp
.text:00000BDD                 call    __RTC_CheckEsp
.text:00000BE2                 mov     esp, ebp
.text:00000BE4                 pop     ebp
.text:00000BE5                 retn    0Ch
.text:00000BE5 ?QueryInterface@CEncoder@NLzma@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00000BE5
.text:00000BE5 _text           ends
.text:00000BE5
.text:00000BE8 ; ===========================================================================
.text:00000BE8
.text:00000BE8 ; Segment type: Pure code
.text:00000BE8 ; Segment permissions: Read/Execute
.text:00000BE8 _text           segment para public 'CODE' use32
.text:00000BE8                 assume cs:_text
.text:00000BE8                 ;org 0BE8h
.text:00000BE8 ; COMDAT (pick any)
.text:00000BE8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000BE8
.text:00000BE8 ; =============== S U B R O U T I N E =======================================
.text:00000BE8
.text:00000BE8 ; Attributes: bp-based frame
.text:00000BE8
.text:00000BE8 ; unsigned __int32 __stdcall NCompress::NLzma::CEncoder::AddRef(NCompress::NLzma::CEncoder *this)
.text:00000BE8                 public ?AddRef@CEncoder@NLzma@NCompress@@UAGKXZ
.text:00000BE8 ?AddRef@CEncoder@NLzma@NCompress@@UAGKXZ proc near
.text:00000BE8                                         ; CODE XREF: [thunk]:NCompress::NLzma::CEncoder::AddRef`adjustor{4}' (void)+5j
.text:00000BE8                                         ; [thunk]:NCompress::NLzma::CEncoder::AddRef`adjustor{8}' (void)+5j
.text:00000BE8                                         ; DATA XREF: ...
.text:00000BE8
.text:00000BE8 var_4           = dword ptr -4
.text:00000BE8 this            = dword ptr  8
.text:00000BE8
.text:00000BE8                 push    ebp
.text:00000BE9                 mov     ebp, esp
.text:00000BEB                 push    ecx
.text:00000BEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BF3                 mov     eax, [ebp+this]
.text:00000BF6                 mov     ecx, [eax+0Ch]
.text:00000BF9                 add     ecx, 1
.text:00000BFC                 mov     [ebp+var_4], ecx
.text:00000BFF                 mov     edx, [ebp+this]
.text:00000C02                 mov     eax, [ebp+var_4]
.text:00000C05                 mov     [edx+0Ch], eax
.text:00000C08                 mov     eax, [ebp+var_4]
.text:00000C0B                 mov     esp, ebp
.text:00000C0D                 pop     ebp
.text:00000C0E                 retn    4
.text:00000C0E ?AddRef@CEncoder@NLzma@NCompress@@UAGKXZ endp
.text:00000C0E
.text:00000C0E ; ---------------------------------------------------------------------------
.text:00000C11                 align 4
.text:00000C11 _text           ends
.text:00000C11
.text:00000C14 ; ===========================================================================
.text:00000C14
.text:00000C14 ; Segment type: Pure code
.text:00000C14 ; Segment permissions: Read/Execute
.text:00000C14 _text           segment para public 'CODE' use32
.text:00000C14                 assume cs:_text
.text:00000C14                 ;org 0C14h
.text:00000C14 ; COMDAT (pick any)
.text:00000C14                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000C14
.text:00000C14 ; =============== S U B R O U T I N E =======================================
.text:00000C14
.text:00000C14 ; Attributes: bp-based frame
.text:00000C14
.text:00000C14 ; unsigned __int32 __stdcall NCompress::NLzma::CEncoder::Release(NCompress::NLzma::CEncoder *this)
.text:00000C14                 public ?Release@CEncoder@NLzma@NCompress@@UAGKXZ
.text:00000C14 ?Release@CEncoder@NLzma@NCompress@@UAGKXZ proc near
.text:00000C14                                         ; CODE XREF: [thunk]:NCompress::NLzma::CEncoder::Release`adjustor{4}' (void)+5j
.text:00000C14                                         ; [thunk]:NCompress::NLzma::CEncoder::Release`adjustor{8}' (void)+5j
.text:00000C14                                         ; DATA XREF: ...
.text:00000C14
.text:00000C14 var_10          = dword ptr -10h
.text:00000C14 var_C           = dword ptr -0Ch
.text:00000C14 var_8           = dword ptr -8
.text:00000C14 var_4           = dword ptr -4
.text:00000C14 this            = dword ptr  8
.text:00000C14
.text:00000C14                 push    ebp
.text:00000C15                 mov     ebp, esp
.text:00000C17                 sub     esp, 10h
.text:00000C1A                 push    esi
.text:00000C1B                 mov     eax, 0CCCCCCCCh
.text:00000C20                 mov     [ebp+var_10], eax
.text:00000C23                 mov     [ebp+var_C], eax
.text:00000C26                 mov     [ebp+var_8], eax
.text:00000C29                 mov     [ebp+var_4], eax
.text:00000C2C                 mov     eax, [ebp+this]
.text:00000C2F                 mov     ecx, [eax+0Ch]
.text:00000C32                 sub     ecx, 1
.text:00000C35                 mov     [ebp+var_C], ecx
.text:00000C38                 mov     edx, [ebp+this]
.text:00000C3B                 mov     eax, [ebp+var_C]
.text:00000C3E                 mov     [edx+0Ch], eax
.text:00000C41                 cmp     [ebp+var_C], 0
.text:00000C45                 jz      short loc_C4F
.text:00000C47                 mov     ecx, [ebp+this]
.text:00000C4A                 mov     eax, [ecx+0Ch]
.text:00000C4D                 jmp     short loc_C87
.text:00000C4F ; ---------------------------------------------------------------------------
.text:00000C4F
.text:00000C4F loc_C4F:                                ; CODE XREF: NCompress::NLzma::CEncoder::Release(void)+31j
.text:00000C4F                 mov     edx, [ebp+this]
.text:00000C52                 mov     [ebp+var_8], edx
.text:00000C55                 mov     eax, [ebp+var_8]
.text:00000C58                 mov     [ebp+var_4], eax
.text:00000C5B                 cmp     [ebp+var_4], 0
.text:00000C5F                 jz      short loc_C7E
.text:00000C61                 mov     esi, esp
.text:00000C63                 push    1
.text:00000C65                 mov     ecx, [ebp+var_4]
.text:00000C68                 mov     edx, [ecx]
.text:00000C6A                 mov     ecx, [ebp+var_4]
.text:00000C6D                 mov     eax, [edx+10h]
.text:00000C70                 call    eax
.text:00000C72                 cmp     esi, esp
.text:00000C74                 call    __RTC_CheckEsp
.text:00000C79                 mov     [ebp+var_10], eax
.text:00000C7C                 jmp     short loc_C85
.text:00000C7E ; ---------------------------------------------------------------------------
.text:00000C7E
.text:00000C7E loc_C7E:                                ; CODE XREF: NCompress::NLzma::CEncoder::Release(void)+4Bj
.text:00000C7E                 mov     [ebp+var_10], 0
.text:00000C85
.text:00000C85 loc_C85:                                ; CODE XREF: NCompress::NLzma::CEncoder::Release(void)+68j
.text:00000C85                 xor     eax, eax
.text:00000C87
.text:00000C87 loc_C87:                                ; CODE XREF: NCompress::NLzma::CEncoder::Release(void)+39j
.text:00000C87                 pop     esi
.text:00000C88                 add     esp, 10h
.text:00000C8B                 cmp     ebp, esp
.text:00000C8D                 call    __RTC_CheckEsp
.text:00000C92                 mov     esp, ebp
.text:00000C94                 pop     ebp
.text:00000C95                 retn    4
.text:00000C95 ?Release@CEncoder@NLzma@NCompress@@UAGKXZ endp
.text:00000C95
.text:00000C95 _text           ends
.text:00000C95
.text:00000C98 ; ===========================================================================
.text:00000C98
.text:00000C98 ; Segment type: Pure code
.text:00000C98 ; Segment permissions: Read/Execute
.text:00000C98 _text           segment para public 'CODE' use32
.text:00000C98                 assume cs:_text
.text:00000C98                 ;org 0C98h
.text:00000C98 ; COMDAT (pick any)
.text:00000C98                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000C98
.text:00000C98 ; =============== S U B R O U T I N E =======================================
.text:00000C98
.text:00000C98 ; Attributes: bp-based frame
.text:00000C98
.text:00000C98 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00000C98                 public ___@8
.text:00000C98 ___@8           proc near               ; CODE XREF: NCompress::NLzma::CEncoder::QueryInterface(_GUID const &,void * *)+2Dp
.text:00000C98                                         ; NCompress::NLzma::CEncoder::QueryInterface(_GUID const &,void * *)+61p ...
.text:00000C98
.text:00000C98 Buf1            = dword ptr  8
.text:00000C98 Buf2            = dword ptr  0Ch
.text:00000C98
.text:00000C98                 push    ebp
.text:00000C99                 mov     ebp, esp
.text:00000C9B                 mov     eax, [ebp+Buf2]
.text:00000C9E                 push    eax             ; Buf2
.text:00000C9F                 mov     ecx, [ebp+Buf1]
.text:00000CA2                 push    ecx             ; Buf1
.text:00000CA3                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00000CA8                 cmp     ebp, esp
.text:00000CAA                 call    __RTC_CheckEsp
.text:00000CAF                 pop     ebp
.text:00000CB0                 retn    8
.text:00000CB0 ___@8           endp
.text:00000CB0
.text:00000CB0 ; ---------------------------------------------------------------------------
.text:00000CB3                 align 4
.text:00000CB3 _text           ends
.text:00000CB3
.text:00000CB4 ; ===========================================================================
.text:00000CB4
.text:00000CB4 ; Segment type: Pure code
.text:00000CB4 ; Segment permissions: Read/Execute
.text:00000CB4 _text           segment para public 'CODE' use32
.text:00000CB4                 assume cs:_text
.text:00000CB4                 ;org 0CB4h
.text:00000CB4 ; COMDAT (pick any)
.text:00000CB4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000CB4
.text:00000CB4 ; =============== S U B R O U T I N E =======================================
.text:00000CB4
.text:00000CB4 ; Attributes: bp-based frame
.text:00000CB4
.text:00000CB4 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00000CB4                 public _IsEqualGUID@8
.text:00000CB4 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00000CB4
.text:00000CB4 Buf1            = dword ptr  8
.text:00000CB4 Buf2            = dword ptr  0Ch
.text:00000CB4
.text:00000CB4                 push    ebp
.text:00000CB5                 mov     ebp, esp
.text:00000CB7                 push    10h             ; Size
.text:00000CB9                 mov     eax, [ebp+Buf2]
.text:00000CBC                 push    eax             ; Buf2
.text:00000CBD                 mov     ecx, [ebp+Buf1]
.text:00000CC0                 push    ecx             ; Buf1
.text:00000CC1                 call    _memcmp
.text:00000CC6                 add     esp, 0Ch
.text:00000CC9                 neg     eax
.text:00000CCB                 sbb     eax, eax
.text:00000CCD                 add     eax, 1
.text:00000CD0                 cmp     ebp, esp
.text:00000CD2                 call    __RTC_CheckEsp
.text:00000CD7                 pop     ebp
.text:00000CD8                 retn    8
.text:00000CD8 _IsEqualGUID@8  endp
.text:00000CD8
.text:00000CD8 ; ---------------------------------------------------------------------------
.text:00000CDB                 align 4
.text:00000CDB _text           ends
.text:00000CDB
.text:00000CDC ; ===========================================================================
.text:00000CDC
.text:00000CDC ; Segment type: Pure code
.text:00000CDC ; Segment permissions: Read/Execute
.text:00000CDC _text           segment para public 'CODE' use32
.text:00000CDC                 assume cs:_text
.text:00000CDC                 ;org 0CDCh
.text:00000CDC ; COMDAT (pick any)
.text:00000CDC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000CDC
.text:00000CDC ; =============== S U B R O U T I N E =======================================
.text:00000CDC
.text:00000CDC ; Attributes: bp-based frame
.text:00000CDC
.text:00000CDC ; public: virtual void * __thiscall NCompress::NLzma::CEncoder::`scalar deleting destructor'(unsigned int)
.text:00000CDC                 public ??_GCEncoder@NLzma@NCompress@@UAEPAXI@Z
.text:00000CDC ??_GCEncoder@NLzma@NCompress@@UAEPAXI@Z proc near
.text:00000CDC
.text:00000CDC var_4           = dword ptr -4
.text:00000CDC arg_0           = dword ptr  8
.text:00000CDC
.text:00000CDC                 push    ebp
.text:00000CDD                 mov     ebp, esp
.text:00000CDF                 push    ecx
.text:00000CE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CE7                 mov     [ebp+var_4], ecx
.text:00000CEA                 mov     ecx, [ebp+var_4] ; this
.text:00000CED                 call    ??1CEncoder@NLzma@NCompress@@UAE@XZ ; NCompress::NLzma::CEncoder::~CEncoder(void)
.text:00000CF2                 mov     eax, [ebp+arg_0]
.text:00000CF5                 and     eax, 1
.text:00000CF8                 jz      short loc_D06
.text:00000CFA                 mov     ecx, [ebp+var_4]
.text:00000CFD                 push    ecx             ; void *
.text:00000CFE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000D03                 add     esp, 4
.text:00000D06
.text:00000D06 loc_D06:                                ; CODE XREF: NCompress::NLzma::CEncoder::`scalar deleting destructor'(uint)+1Cj
.text:00000D06                 mov     eax, [ebp+var_4]
.text:00000D09                 add     esp, 4
.text:00000D0C                 cmp     ebp, esp
.text:00000D0E                 call    __RTC_CheckEsp
.text:00000D13                 mov     esp, ebp
.text:00000D15                 pop     ebp
.text:00000D16                 retn    4
.text:00000D16 ??_GCEncoder@NLzma@NCompress@@UAEPAXI@Z endp
.text:00000D16
.text:00000D16 ; ---------------------------------------------------------------------------
.text:00000D19                 align 4
.text:00000D19 _text           ends
.text:00000D19
.text:00000D1C ; ===========================================================================
.text:00000D1C
.text:00000D1C ; Segment type: Pure code
.text:00000D1C ; Segment permissions: Read/Execute
.text:00000D1C _text           segment para public 'CODE' use32
.text:00000D1C                 assume cs:_text
.text:00000D1C                 ;org 0D1Ch
.text:00000D1C ; COMDAT (pick any)
.text:00000D1C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000D1C
.text:00000D1C ; =============== S U B R O U T I N E =======================================
.text:00000D1C
.text:00000D1C ; Attributes: bp-based frame
.text:00000D1C
.text:00000D1C ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:00000D1C                 public ??0ICompressCoder@@QAE@XZ
.text:00000D1C ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::NLzma::CEncoder::CEncoder(void)+1Ap
.text:00000D1C
.text:00000D1C var_4           = dword ptr -4
.text:00000D1C
.text:00000D1C                 push    ebp
.text:00000D1D                 mov     ebp, esp
.text:00000D1F                 push    ecx
.text:00000D20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D27                 mov     [ebp+var_4], ecx
.text:00000D2A                 mov     ecx, [ebp+var_4]
.text:00000D2D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000D32                 mov     eax, [ebp+var_4]
.text:00000D35                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:00000D3B                 mov     eax, [ebp+var_4]
.text:00000D3E                 add     esp, 4
.text:00000D41                 cmp     ebp, esp
.text:00000D43                 call    __RTC_CheckEsp
.text:00000D48                 mov     esp, ebp
.text:00000D4A                 pop     ebp
.text:00000D4B                 retn
.text:00000D4B ??0ICompressCoder@@QAE@XZ endp
.text:00000D4B
.text:00000D4B _text           ends
.text:00000D4B
.rdata:00000D4C ; ===========================================================================
.rdata:00000D4C
.rdata:00000D4C ; Segment type: Pure data
.rdata:00000D4C ; Segment permissions: Read
.rdata:00000D4C _rdata          segment dword public 'DATA' use32
.rdata:00000D4C                 assume cs:_rdata
.rdata:00000D4C                 ;org 0D4Ch
.rdata:00000D4C ; COMDAT (pick largest)
.rdata:00000D4C                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:00000D50                 public ??_7ICompressCoder@@6B@
.rdata:00000D50 ; const ICompressCoder::`vftable'
.rdata:00000D50 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:00000D50                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:00000D54                 dd offset __purecall
.rdata:00000D58                 dd offset __purecall
.rdata:00000D5C                 dd offset __purecall
.rdata:00000D5C _rdata          ends
.rdata:00000D5C
.rdata$r:00000D60 ; ===========================================================================
.rdata$r:00000D60
.rdata$r:00000D60 ; Segment type: Pure data
.rdata$r:00000D60 ; Segment permissions: Read
.rdata$r:00000D60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000D60                 assume cs:_rdata$r
.rdata$r:00000D60                 ;org 0D60h
.rdata$r:00000D60 ; COMDAT (pick any)
.rdata$r:00000D60                 public ??_R4ICompressCoder@@6B@
.rdata$r:00000D60 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:00000D60 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:00000D4Co
.rdata$r:00000D61                 db    0
.rdata$r:00000D62                 db    0
.rdata$r:00000D63                 db    0
.rdata$r:00000D64                 db    0
.rdata$r:00000D65                 db    0
.rdata$r:00000D66                 db    0
.rdata$r:00000D67                 db    0
.rdata$r:00000D68                 db    0
.rdata$r:00000D69                 db    0
.rdata$r:00000D6A                 db    0
.rdata$r:00000D6B                 db    0
.rdata$r:00000D6C                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00000D70                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000D70 _rdata$r        ends
.rdata$r:00000D70
.text:00000D74 ; ===========================================================================
.text:00000D74
.text:00000D74 ; Segment type: Pure code
.text:00000D74 ; Segment permissions: Read/Execute
.text:00000D74 _text           segment para public 'CODE' use32
.text:00000D74                 assume cs:_text
.text:00000D74                 ;org 0D74h
.text:00000D74 ; COMDAT (pick any)
.text:00000D74                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000D74
.text:00000D74 ; =============== S U B R O U T I N E =======================================
.text:00000D74
.text:00000D74 ; Attributes: bp-based frame
.text:00000D74
.text:00000D74 ; _DWORD __thiscall ICompressSetCoderProperties::ICompressSetCoderProperties(ICompressSetCoderProperties *__hidden this)
.text:00000D74                 public ??0ICompressSetCoderProperties@@QAE@XZ
.text:00000D74 ??0ICompressSetCoderProperties@@QAE@XZ proc near
.text:00000D74                                         ; CODE XREF: NCompress::NLzma::CEncoder::CEncoder(void)+25p
.text:00000D74
.text:00000D74 var_4           = dword ptr -4
.text:00000D74
.text:00000D74                 push    ebp
.text:00000D75                 mov     ebp, esp
.text:00000D77                 push    ecx
.text:00000D78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D7F                 mov     [ebp+var_4], ecx
.text:00000D82                 mov     ecx, [ebp+var_4]
.text:00000D85                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000D8A                 mov     eax, [ebp+var_4]
.text:00000D8D                 mov     dword ptr [eax], offset ??_7ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`vftable'
.text:00000D93                 mov     eax, [ebp+var_4]
.text:00000D96                 add     esp, 4
.text:00000D99                 cmp     ebp, esp
.text:00000D9B                 call    __RTC_CheckEsp
.text:00000DA0                 mov     esp, ebp
.text:00000DA2                 pop     ebp
.text:00000DA3                 retn
.text:00000DA3 ??0ICompressSetCoderProperties@@QAE@XZ endp
.text:00000DA3
.text:00000DA3 _text           ends
.text:00000DA3
.rdata:00000DA4 ; ===========================================================================
.rdata:00000DA4
.rdata:00000DA4 ; Segment type: Pure data
.rdata:00000DA4 ; Segment permissions: Read
.rdata:00000DA4 _rdata          segment dword public 'DATA' use32
.rdata:00000DA4                 assume cs:_rdata
.rdata:00000DA4                 ;org 0DA4h
.rdata:00000DA4 ; COMDAT (pick largest)
.rdata:00000DA4                 dd offset ??_R4ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata:00000DA8                 public ??_7ICompressSetCoderProperties@@6B@
.rdata:00000DA8 ; const ICompressSetCoderProperties::`vftable'
.rdata:00000DA8 ??_7ICompressSetCoderProperties@@6B@ dd offset __purecall
.rdata:00000DA8                                         ; DATA XREF: ICompressSetCoderProperties::ICompressSetCoderProperties(void)+19o
.rdata:00000DAC                 dd offset __purecall
.rdata:00000DB0                 dd offset __purecall
.rdata:00000DB4                 dd offset __purecall
.rdata:00000DB4 _rdata          ends
.rdata:00000DB4
.rdata$r:00000DB8 ; ===========================================================================
.rdata$r:00000DB8
.rdata$r:00000DB8 ; Segment type: Pure data
.rdata$r:00000DB8 ; Segment permissions: Read
.rdata$r:00000DB8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000DB8                 assume cs:_rdata$r
.rdata$r:00000DB8                 ;org 0DB8h
.rdata$r:00000DB8 ; COMDAT (pick any)
.rdata$r:00000DB8                 public ??_R4ICompressSetCoderProperties@@6B@
.rdata$r:00000DB8 ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata$r:00000DB8 ??_R4ICompressSetCoderProperties@@6B@ db    0
.rdata$r:00000DB8                                         ; DATA XREF: .rdata:00000DA4o
.rdata$r:00000DB9                 db    0
.rdata$r:00000DBA                 db    0
.rdata$r:00000DBB                 db    0
.rdata$r:00000DBC                 db    0
.rdata$r:00000DBD                 db    0
.rdata$r:00000DBE                 db    0
.rdata$r:00000DBF                 db    0
.rdata$r:00000DC0                 db    0
.rdata$r:00000DC1                 db    0
.rdata$r:00000DC2                 db    0
.rdata$r:00000DC3                 db    0
.rdata$r:00000DC4                 dd offset ??_R0?AUICompressSetCoderProperties@@@8 ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00000DC8                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000DC8 _rdata$r        ends
.rdata$r:00000DC8
.text:00000DCC ; ===========================================================================
.text:00000DCC
.text:00000DCC ; Segment type: Pure code
.text:00000DCC ; Segment permissions: Read/Execute
.text:00000DCC _text           segment para public 'CODE' use32
.text:00000DCC                 assume cs:_text
.text:00000DCC                 ;org 0DCCh
.text:00000DCC ; COMDAT (pick any)
.text:00000DCC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000DCC
.text:00000DCC ; =============== S U B R O U T I N E =======================================
.text:00000DCC
.text:00000DCC ; Attributes: bp-based frame
.text:00000DCC
.text:00000DCC ; _DWORD __thiscall ICompressWriteCoderProperties::ICompressWriteCoderProperties(ICompressWriteCoderProperties *__hidden this)
.text:00000DCC                 public ??0ICompressWriteCoderProperties@@QAE@XZ
.text:00000DCC ??0ICompressWriteCoderProperties@@QAE@XZ proc near
.text:00000DCC                                         ; CODE XREF: NCompress::NLzma::CEncoder::CEncoder(void)+30p
.text:00000DCC
.text:00000DCC var_4           = dword ptr -4
.text:00000DCC
.text:00000DCC                 push    ebp
.text:00000DCD                 mov     ebp, esp
.text:00000DCF                 push    ecx
.text:00000DD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DD7                 mov     [ebp+var_4], ecx
.text:00000DDA                 mov     ecx, [ebp+var_4]
.text:00000DDD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000DE2                 mov     eax, [ebp+var_4]
.text:00000DE5                 mov     dword ptr [eax], offset ??_7ICompressWriteCoderProperties@@6B@ ; const ICompressWriteCoderProperties::`vftable'
.text:00000DEB                 mov     eax, [ebp+var_4]
.text:00000DEE                 add     esp, 4
.text:00000DF1                 cmp     ebp, esp
.text:00000DF3                 call    __RTC_CheckEsp
.text:00000DF8                 mov     esp, ebp
.text:00000DFA                 pop     ebp
.text:00000DFB                 retn
.text:00000DFB ??0ICompressWriteCoderProperties@@QAE@XZ endp
.text:00000DFB
.text:00000DFB _text           ends
.text:00000DFB
.rdata:00000DFC ; ===========================================================================
.rdata:00000DFC
.rdata:00000DFC ; Segment type: Pure data
.rdata:00000DFC ; Segment permissions: Read
.rdata:00000DFC _rdata          segment dword public 'DATA' use32
.rdata:00000DFC                 assume cs:_rdata
.rdata:00000DFC                 ;org 0DFCh
.rdata:00000DFC ; COMDAT (pick largest)
.rdata:00000DFC                 dd offset ??_R4ICompressWriteCoderProperties@@6B@ ; const ICompressWriteCoderProperties::`RTTI Complete Object Locator'
.rdata:00000E00                 public ??_7ICompressWriteCoderProperties@@6B@
.rdata:00000E00 ; const ICompressWriteCoderProperties::`vftable'
.rdata:00000E00 ??_7ICompressWriteCoderProperties@@6B@ dd offset __purecall
.rdata:00000E00                                         ; DATA XREF: ICompressWriteCoderProperties::ICompressWriteCoderProperties(void)+19o
.rdata:00000E04                 dd offset __purecall
.rdata:00000E08                 dd offset __purecall
.rdata:00000E0C                 dd offset __purecall
.rdata:00000E0C _rdata          ends
.rdata:00000E0C
.rdata$r:00000E10 ; ===========================================================================
.rdata$r:00000E10
.rdata$r:00000E10 ; Segment type: Pure data
.rdata$r:00000E10 ; Segment permissions: Read
.rdata$r:00000E10 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E10                 assume cs:_rdata$r
.rdata$r:00000E10                 ;org 0E10h
.rdata$r:00000E10 ; COMDAT (pick any)
.rdata$r:00000E10                 public ??_R4ICompressWriteCoderProperties@@6B@
.rdata$r:00000E10 ; const ICompressWriteCoderProperties::`RTTI Complete Object Locator'
.rdata$r:00000E10 ??_R4ICompressWriteCoderProperties@@6B@ db    0
.rdata$r:00000E10                                         ; DATA XREF: .rdata:00000DFCo
.rdata$r:00000E11                 db    0
.rdata$r:00000E12                 db    0
.rdata$r:00000E13                 db    0
.rdata$r:00000E14                 db    0
.rdata$r:00000E15                 db    0
.rdata$r:00000E16                 db    0
.rdata$r:00000E17                 db    0
.rdata$r:00000E18                 db    0
.rdata$r:00000E19                 db    0
.rdata$r:00000E1A                 db    0
.rdata$r:00000E1B                 db    0
.rdata$r:00000E1C                 dd offset ??_R0?AUICompressWriteCoderProperties@@@8 ; ICompressWriteCoderProperties `RTTI Type Descriptor'
.rdata$r:00000E20                 dd offset ??_R3ICompressWriteCoderProperties@@8 ; ICompressWriteCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000E20 _rdata$r        ends
.rdata$r:00000E20
.text:00000E24 ; ===========================================================================
.text:00000E24
.text:00000E24 ; Segment type: Pure code
.text:00000E24 ; Segment permissions: Read/Execute
.text:00000E24 _text           segment para public 'CODE' use32
.text:00000E24                 assume cs:_text
.text:00000E24                 ;org 0E24h
.text:00000E24 ; COMDAT (pick any)
.text:00000E24                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000E24
.text:00000E24 ; =============== S U B R O U T I N E =======================================
.text:00000E24
.text:00000E24 ; Attributes: bp-based frame
.text:00000E24
.text:00000E24 ; public: __thiscall IUnknown::IUnknown(void)
.text:00000E24                 public ??0IUnknown@@QAE@XZ
.text:00000E24 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:00000E24                                         ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)+11p ...
.text:00000E24
.text:00000E24 var_4           = dword ptr -4
.text:00000E24
.text:00000E24                 push    ebp
.text:00000E25                 mov     ebp, esp
.text:00000E27                 push    ecx
.text:00000E28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E2F                 mov     [ebp+var_4], ecx
.text:00000E32                 mov     eax, [ebp+var_4]
.text:00000E35                 mov     esp, ebp
.text:00000E37                 pop     ebp
.text:00000E38                 retn
.text:00000E38 ??0IUnknown@@QAE@XZ endp
.text:00000E38
.text:00000E38 ; ---------------------------------------------------------------------------
.text:00000E39                 align 4
.text:00000E39 _text           ends
.text:00000E39
.text:00000E3C ; ===========================================================================
.text:00000E3C
.text:00000E3C ; Segment type: Pure code
.text:00000E3C ; Segment permissions: Read/Execute
.text:00000E3C _text           segment para public 'CODE' use32
.text:00000E3C                 assume cs:_text
.text:00000E3C                 ;org 0E3Ch
.text:00000E3C ; COMDAT (pick any)
.text:00000E3C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000E3C
.text:00000E3C ; =============== S U B R O U T I N E =======================================
.text:00000E3C
.text:00000E3C
.text:00000E3C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma::CEncoder::Release`adjustor{4}' (void)
.text:00000E3C                 public ?Release@CEncoder@NLzma@NCompress@@W3AGKXZ
.text:00000E3C ?Release@CEncoder@NLzma@NCompress@@W3AGKXZ proc near
.text:00000E3C                                         ; DATA XREF: .rdata:00000770o
.text:00000E3C
.text:00000E3C arg_0           = dword ptr  4
.text:00000E3C
.text:00000E3C                 sub     [esp+arg_0], 4
.text:00000E41                 jmp     ?Release@CEncoder@NLzma@NCompress@@UAGKXZ ; NCompress::NLzma::CEncoder::Release(void)
.text:00000E41 ?Release@CEncoder@NLzma@NCompress@@W3AGKXZ endp
.text:00000E41
.text:00000E41 ; ---------------------------------------------------------------------------
.text:00000E46                 align 4
.text:00000E46 _text           ends
.text:00000E46
.text:00000E48 ; ===========================================================================
.text:00000E48
.text:00000E48 ; Segment type: Pure code
.text:00000E48 ; Segment permissions: Read/Execute
.text:00000E48 _text           segment para public 'CODE' use32
.text:00000E48                 assume cs:_text
.text:00000E48                 ;org 0E48h
.text:00000E48 ; COMDAT (pick any)
.text:00000E48                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000E48
.text:00000E48 ; =============== S U B R O U T I N E =======================================
.text:00000E48
.text:00000E48
.text:00000E48 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma::CEncoder::Release`adjustor{8}' (void)
.text:00000E48                 public ?Release@CEncoder@NLzma@NCompress@@W7AGKXZ
.text:00000E48 ?Release@CEncoder@NLzma@NCompress@@W7AGKXZ proc near
.text:00000E48                                         ; DATA XREF: .rdata:0000075Co
.text:00000E48
.text:00000E48 arg_0           = dword ptr  4
.text:00000E48
.text:00000E48                 sub     [esp+arg_0], 8
.text:00000E4D                 jmp     ?Release@CEncoder@NLzma@NCompress@@UAGKXZ ; NCompress::NLzma::CEncoder::Release(void)
.text:00000E4D ?Release@CEncoder@NLzma@NCompress@@W7AGKXZ endp
.text:00000E4D
.text:00000E4D ; ---------------------------------------------------------------------------
.text:00000E52                 align 4
.text:00000E52 _text           ends
.text:00000E52
.text:00000E54 ; ===========================================================================
.text:00000E54
.text:00000E54 ; Segment type: Pure code
.text:00000E54 ; Segment permissions: Read/Execute
.text:00000E54 _text           segment para public 'CODE' use32
.text:00000E54                 assume cs:_text
.text:00000E54                 ;org 0E54h
.text:00000E54 ; COMDAT (pick any)
.text:00000E54                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000E54
.text:00000E54 ; =============== S U B R O U T I N E =======================================
.text:00000E54
.text:00000E54
.text:00000E54 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma::CEncoder::AddRef`adjustor{4}' (void)
.text:00000E54                 public ?AddRef@CEncoder@NLzma@NCompress@@W3AGKXZ
.text:00000E54 ?AddRef@CEncoder@NLzma@NCompress@@W3AGKXZ proc near
.text:00000E54                                         ; DATA XREF: .rdata:0000076Co
.text:00000E54
.text:00000E54 arg_0           = dword ptr  4
.text:00000E54
.text:00000E54                 sub     [esp+arg_0], 4
.text:00000E59                 jmp     ?AddRef@CEncoder@NLzma@NCompress@@UAGKXZ ; NCompress::NLzma::CEncoder::AddRef(void)
.text:00000E59 ?AddRef@CEncoder@NLzma@NCompress@@W3AGKXZ endp
.text:00000E59
.text:00000E59 ; ---------------------------------------------------------------------------
.text:00000E5E                 align 10h
.text:00000E5E _text           ends
.text:00000E5E
.text:00000E60 ; ===========================================================================
.text:00000E60
.text:00000E60 ; Segment type: Pure code
.text:00000E60 ; Segment permissions: Read/Execute
.text:00000E60 _text           segment para public 'CODE' use32
.text:00000E60                 assume cs:_text
.text:00000E60                 ;org 0E60h
.text:00000E60 ; COMDAT (pick any)
.text:00000E60                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000E60
.text:00000E60 ; =============== S U B R O U T I N E =======================================
.text:00000E60
.text:00000E60
.text:00000E60 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NLzma::CEncoder::AddRef`adjustor{8}' (void)
.text:00000E60                 public ?AddRef@CEncoder@NLzma@NCompress@@W7AGKXZ
.text:00000E60 ?AddRef@CEncoder@NLzma@NCompress@@W7AGKXZ proc near
.text:00000E60                                         ; DATA XREF: .rdata:00000758o
.text:00000E60
.text:00000E60 arg_0           = dword ptr  4
.text:00000E60
.text:00000E60                 sub     [esp+arg_0], 8
.text:00000E65                 jmp     ?AddRef@CEncoder@NLzma@NCompress@@UAGKXZ ; NCompress::NLzma::CEncoder::AddRef(void)
.text:00000E65 ?AddRef@CEncoder@NLzma@NCompress@@W7AGKXZ endp
.text:00000E65
.text:00000E65 ; ---------------------------------------------------------------------------
.text:00000E6A                 align 4
.text:00000E6A _text           ends
.text:00000E6A
.text:00000E6C ; ===========================================================================
.text:00000E6C
.text:00000E6C ; Segment type: Pure code
.text:00000E6C ; Segment permissions: Read/Execute
.text:00000E6C _text           segment para public 'CODE' use32
.text:00000E6C                 assume cs:_text
.text:00000E6C                 ;org 0E6Ch
.text:00000E6C ; COMDAT (pick any)
.text:00000E6C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000E6C
.text:00000E6C ; =============== S U B R O U T I N E =======================================
.text:00000E6C
.text:00000E6C
.text:00000E6C ; [thunk]:public: virtual long __stdcall NCompress::NLzma::CEncoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00000E6C                 public ?QueryInterface@CEncoder@NLzma@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:00000E6C ?QueryInterface@CEncoder@NLzma@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00000E6C                                         ; DATA XREF: .rdata:const NCompress::NLzma::CEncoder::`vftable'{for `ICompressSetCoderProperties'}o
.text:00000E6C
.text:00000E6C arg_0           = dword ptr  4
.text:00000E6C
.text:00000E6C                 sub     [esp+arg_0], 4
.text:00000E71                 jmp     ?QueryInterface@CEncoder@NLzma@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NLzma::CEncoder::QueryInterface(_GUID const &,void * *)
.text:00000E71 ?QueryInterface@CEncoder@NLzma@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00000E71
.text:00000E71 ; ---------------------------------------------------------------------------
.text:00000E76                 align 4
.text:00000E76 _text           ends
.text:00000E76
.text:00000E78 ; ===========================================================================
.text:00000E78
.text:00000E78 ; Segment type: Pure code
.text:00000E78 ; Segment permissions: Read/Execute
.text:00000E78 _text           segment para public 'CODE' use32
.text:00000E78                 assume cs:_text
.text:00000E78                 ;org 0E78h
.text:00000E78 ; COMDAT (pick any)
.text:00000E78                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000E78
.text:00000E78 ; =============== S U B R O U T I N E =======================================
.text:00000E78
.text:00000E78
.text:00000E78 ; [thunk]:public: virtual long __stdcall NCompress::NLzma::CEncoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00000E78                 public ?QueryInterface@CEncoder@NLzma@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:00000E78 ?QueryInterface@CEncoder@NLzma@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00000E78                                         ; DATA XREF: .rdata:const NCompress::NLzma::CEncoder::`vftable'{for `ICompressWriteCoderProperties'}o
.text:00000E78
.text:00000E78 arg_0           = dword ptr  4
.text:00000E78
.text:00000E78                 sub     [esp+arg_0], 8
.text:00000E7D                 jmp     ?QueryInterface@CEncoder@NLzma@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NLzma::CEncoder::QueryInterface(_GUID const &,void * *)
.text:00000E7D ?QueryInterface@CEncoder@NLzma@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00000E7D
.text:00000E7D _text           ends
.text:00000E7D
UNDEF:00000E90 ; ===========================================================================
UNDEF:00000E90
UNDEF:00000E90 ; Segment type: Externs
UNDEF:00000E90 ; UNDEF
UNDEF:00000E90 ; __stdcall LzmaEnc_Create(x)
UNDEF:00000E90                 extrn _LzmaEnc_Create@4:near
UNDEF:00000E90                                         ; CODE XREF: NCompress::NLzma::CEncoder::CEncoder(void)+6Cp
UNDEF:00000E94                 extrn _g_Alloc:near     ; DATA XREF: NCompress::NLzma::CEncoder::CEncoder(void)+67o
UNDEF:00000E94                                         ; NCompress::NLzma::CEncoder::~CEncoder(void)+39o ...
UNDEF:00000E98                 extrn __RTC_CheckEsp:near
UNDEF:00000E98                                         ; CODE XREF: NCompress::NLzma::CEncoder::CEncoder(void)+9Dp
UNDEF:00000E98                                         ; NCompress::NLzma::CEncoder::~CEncoder(void)+4Fp ...
UNDEF:00000E9C                 extrn __RTC_Shutdown:near
UNDEF:00000E9C                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000EA0                 extrn __RTC_InitBase:near
UNDEF:00000EA0                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000EA4 ; __stdcall _CxxThrowException(x, x)
UNDEF:00000EA4                 extrn __CxxThrowException@8:near
UNDEF:00000EA4                                         ; CODE XREF: NCompress::NLzma::CEncoder::CEncoder(void)+90p
UNDEF:00000EA8 ; const type_info::`vftable'
UNDEF:00000EA8                 extrn ??_7type_info@@6B@:near
UNDEF:00000EA8                                         ; DATA XREF: .data:NCompress::NLzma::CEncoder `RTTI Type Descriptor'o
UNDEF:00000EA8                                         ; .data:ICompressCoder `RTTI Type Descriptor'o ...
UNDEF:00000EAC ; public: virtual void * __thiscall NCompress::NLzma::CEncoder::`scalar deleting destructor'(unsigned int)
UNDEF:00000EAC                 extrn ??_GCEncoder@NLzma@NCompress@@UAEPAXI@Z_0:near
UNDEF:00000EB0 ; public: virtual void * __thiscall NCompress::NLzma::CEncoder::`vector deleting destructor'(unsigned int)
UNDEF:00000EB0                 extrn ??_ECEncoder@NLzma@NCompress@@UAEPAXI@Z:near ; weak
UNDEF:00000EB0                                         ; DATA XREF: .rdata:0000078Co
UNDEF:00000EB4                 extrn _IID_ICompressWriteCoderProperties:near
UNDEF:00000EB4                                         ; DATA XREF: NCompress::NLzma::CEncoder::QueryInterface(_GUID const &,void * *):loc_B8Co
UNDEF:00000EB8                 extrn _IID_ICompressSetCoderProperties:near
UNDEF:00000EB8                                         ; DATA XREF: NCompress::NLzma::CEncoder::QueryInterface(_GUID const &,void * *):loc_B58o
UNDEF:00000EBC ; const IID IID_IUnknown
UNDEF:00000EBC                 extrn _IID_IUnknown:near
UNDEF:00000EBC                                         ; DATA XREF: NCompress::NLzma::CEncoder::QueryInterface(_GUID const &,void * *)+24o
UNDEF:00000EC0 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00000EC0                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00000EC4 ; void __cdecl operator delete(void *)
UNDEF:00000EC4                 extrn ??3@YAXPAX@Z:near ; CODE XREF: NCompress::NLzma::CEncoder::`scalar deleting destructor'(uint)+22p
UNDEF:00000EC8                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:00000EC8                                         ; .rdata:00000D54o ...
UNDEF:00000ECC ; __stdcall LzmaEnc_Destroy(x, x, x)
UNDEF:00000ECC                 extrn _LzmaEnc_Destroy@12:near
UNDEF:00000ECC                                         ; CODE XREF: NCompress::NLzma::CEncoder::~CEncoder(void)+45p
UNDEF:00000ED0                 extrn _g_BigAlloc:near  ; DATA XREF: NCompress::NLzma::CEncoder::~CEncoder(void)+34o
UNDEF:00000ED0                                         ; NCompress::NLzma::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3Ao
UNDEF:00000ED4 ; __int32 __stdcall SResToHRESULT(int)
UNDEF:00000ED4                 extrn ?SResToHRESULT@@YGJH@Z:near
UNDEF:00000ED4                                         ; CODE XREF: NCompress::NLzma::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+BFp
UNDEF:00000ED4                                         ; NCompress::NLzma::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+AEp
UNDEF:00000ED8 ; __stdcall LzmaEnc_SetProps(x, x)
UNDEF:00000ED8                 extrn _LzmaEnc_SetProps@8:near
UNDEF:00000ED8                                         ; CODE XREF: NCompress::NLzma::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+B9p
UNDEF:00000EDC ; __stdcall LzmaEncProps_Init(x)
UNDEF:00000EDC                 extrn _LzmaEncProps_Init@4:near
UNDEF:00000EDC                                         ; CODE XREF: NCompress::NLzma::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+24p
UNDEF:00000EE0                 extrn ___security_cookie:near
UNDEF:00000EE0                                         ; DATA XREF: NCompress::NLzma::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+16r
UNDEF:00000EE0                                         ; NCompress::NLzma::CEncoder::WriteCoderProperties(ISequentialOutStream *)+26r
UNDEF:00000EE4 ; __fastcall __security_check_cookie(x)
UNDEF:00000EE4                 extrn @__security_check_cookie@4:near
UNDEF:00000EE4                                         ; CODE XREF: NCompress::NLzma::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+DBp
UNDEF:00000EE4                                         ; NCompress::NLzma::CEncoder::WriteCoderProperties(ISequentialOutStream *)+80p
UNDEF:00000EE8 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000EE8                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000EE8                                         ; CODE XREF: NCompress::NLzma::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+CEp
UNDEF:00000EE8                                         ; NCompress::NLzma::CEncoder::WriteCoderProperties(ISequentialOutStream *)+74p ...
UNDEF:00000EEC ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:00000EEC                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:00000EEC                                         ; CODE XREF: NCompress::NLzma::CEncoder::WriteCoderProperties(ISequentialOutStream *)+65p
UNDEF:00000EF0 ; __stdcall LzmaEnc_WriteProperties(x, x, x)
UNDEF:00000EF0                 extrn _LzmaEnc_WriteProperties@12:near
UNDEF:00000EF0                                         ; CODE XREF: NCompress::NLzma::CEncoder::WriteCoderProperties(ISequentialOutStream *)+46p
UNDEF:00000EF4 ; __stdcall LzmaEnc_Encode(x, x, x, x, x, x)
UNDEF:00000EF4                 extrn _LzmaEnc_Encode@24:near
UNDEF:00000EF4                                         ; CODE XREF: NCompress::NLzma::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+60p
UNDEF:00000EF8 ; _DWORD __thiscall CCompressProgressWrap::CCompressProgressWrap(CCompressProgressWrap *__hidden this, struct ICompressProgressInfo *)
UNDEF:00000EF8                 extrn ??0CCompressProgressWrap@@QAE@PAUICompressProgressInfo@@@Z:near
UNDEF:00000EF8                                         ; CODE XREF: NCompress::NLzma::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+35p
UNDEF:00000EFC ; _DWORD __thiscall CSeqOutStreamWrap::CSeqOutStreamWrap(CSeqOutStreamWrap *__hidden this, struct ISequentialOutStream *)
UNDEF:00000EFC                 extrn ??0CSeqOutStreamWrap@@QAE@PAUISequentialOutStream@@@Z:near
UNDEF:00000EFC                                         ; CODE XREF: NCompress::NLzma::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+29p
UNDEF:00000F00 ; _DWORD __thiscall CSeqInStreamWrap::CSeqInStreamWrap(CSeqInStreamWrap *__hidden this, struct ISequentialInStream *)
UNDEF:00000F00                 extrn ??0CSeqInStreamWrap@@QAE@PAUISequentialInStream@@@Z:near
UNDEF:00000F00                                         ; CODE XREF: NCompress::NLzma::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1Dp
UNDEF:00000F00
UNDEF:00000F00