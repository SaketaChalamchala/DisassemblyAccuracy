.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : E89C3A1D3474F9182EE84ED6E6196475
.rdata:00000000 ; Input CRC32 : 4C182E2F
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\DeflateEncoder.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 _kLenStart32    db 0                    ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::CCoder(bool):loc_494o
.rdata:00000000                                         ; NCompress::NDeflate::NEncoder::CFastPosInit::CFastPosInit(void)+36r
.rdata:00000001                 db    1
.rdata:00000002                 db    2
.rdata:00000003                 db    3
.rdata:00000004                 db    4
.rdata:00000005                 db    5
.rdata:00000006                 db    6
.rdata:00000007                 db    7
.rdata:00000008                 db    8
.rdata:00000009                 db  0Ah
.rdata:0000000A                 db  0Ch
.rdata:0000000B                 db  0Eh
.rdata:0000000C                 db  10h
.rdata:0000000D                 db  14h
.rdata:0000000E                 db  18h
.rdata:0000000F                 db  1Ch
.rdata:00000010 ; unsigned __int8 byte_10
.rdata:00000010 byte_10         db 20h                  ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+2A0o
.rdata:00000011                 db  28h ; (
.rdata:00000012                 db  30h ; 0
.rdata:00000013 ; unsigned __int8 byte_13
.rdata:00000013 byte_13         db 38h                  ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+2A7o
.rdata:00000013                                         ; NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool):loc_2A3Ao
.rdata:00000014                 db  40h ; @
.rdata:00000015                 db  50h ; P
.rdata:00000016                 db  60h ; `
.rdata:00000017                 db  70h ; p
.rdata:00000018                 db  80h ; Ç
.rdata:00000019                 db 0A0h ; á
.rdata:0000001A                 db 0C0h ; +
.rdata:0000001B                 db 0E0h ; a
.rdata:0000001C                 db 0FFh
.rdata:0000001D                 db    0
.rdata:0000001E                 db    0
.rdata:0000001F                 db    0
.rdata:00000020 ; unsigned __int8 kLenStart64
.rdata:00000020 _kLenStart64    db 0                    ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::CCoder(bool)+E3o
.rdata:00000020                                         ; NCompress::NDeflate::NEncoder::CCoder::GetLzBlockPrice(void)+44o ...
.rdata:00000021                 db    1
.rdata:00000022                 db    2
.rdata:00000023                 db    3
.rdata:00000024                 db    4
.rdata:00000025                 db    5
.rdata:00000026                 db    6
.rdata:00000027                 db    7
.rdata:00000028                 db    8
.rdata:00000029                 db  0Ah
.rdata:0000002A                 db  0Ch
.rdata:0000002B                 db  0Eh
.rdata:0000002C                 db  10h
.rdata:0000002D                 db  14h
.rdata:0000002E                 db  18h
.rdata:0000002F                 db  1Ch
.rdata:00000030                 db  20h
.rdata:00000031                 db  28h ; (
.rdata:00000032                 db  30h ; 0
.rdata:00000033                 db  38h ; 8
.rdata:00000034                 db  40h ; @
.rdata:00000035                 db  50h ; P
.rdata:00000036                 db  60h ; `
.rdata:00000037                 db  70h ; p
.rdata:00000038                 db  80h ; Ç
.rdata:00000039                 db 0A0h ; á
.rdata:0000003A                 db 0C0h ; +
.rdata:0000003B                 db 0E0h ; a
.rdata:0000003C                 db    0
.rdata:0000003D                 db    0
.rdata:0000003E                 db    0
.rdata:0000003F                 db    0
.rdata:00000040 _kLenDirectBits32 db 0                  ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::CCoder(bool):loc_4B8o
.rdata:00000040                                         ; .xdata$x:00003124o ...
.rdata:00000041                 align 8
.rdata:00000048                 db    1
.rdata:00000049                 db    1
.rdata:0000004A                 db    1
.rdata:0000004B                 db    1
.rdata:0000004C                 db    2
.rdata:0000004D                 db    2
.rdata:0000004E                 db    2
.rdata:0000004F                 db    2
.rdata:00000050                 db    3
.rdata:00000051                 db    3
.rdata:00000052                 db    3
.rdata:00000053                 db    3
.rdata:00000054                 db    4
.rdata:00000055                 db    4
.rdata:00000056                 db    4
.rdata:00000057                 db    4
.rdata:00000058                 db    5
.rdata:00000059                 db    5
.rdata:0000005A                 db    5
.rdata:0000005B                 db    5
.rdata:0000005C                 db    0
.rdata:0000005D                 db    0
.rdata:0000005E                 db    0
.rdata:0000005F                 db    0
.rdata:00000060 _kLenDirectBits64 db    0               ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::CCoder(bool)+107o
.rdata:00000061                 db    0
.rdata:00000062                 db    0
.rdata:00000063                 db    0
.rdata:00000064                 db    0
.rdata:00000065                 db    0
.rdata:00000066                 db    0
.rdata:00000067                 db    0
.rdata:00000068                 db    1
.rdata:00000069                 db    1
.rdata:0000006A                 db    1
.rdata:0000006B                 db    1
.rdata:0000006C                 db    2
.rdata:0000006D                 db    2
.rdata:0000006E                 db    2
.rdata:0000006F                 db    2
.rdata:00000070                 db    3
.rdata:00000071                 db    3
.rdata:00000072                 db    3
.rdata:00000073                 db    3
.rdata:00000074                 db    4
.rdata:00000075                 db    4
.rdata:00000076                 db    4
.rdata:00000077                 db    4
.rdata:00000078                 db    5
.rdata:00000079                 db    5
.rdata:0000007A                 db    5
.rdata:0000007B                 db    5
.rdata:0000007C                 db  10h
.rdata:0000007D                 db    0
.rdata:0000007E                 db    0
.rdata:0000007F                 db    0
.rdata:00000080 _kDistStart     dd 0                    ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::WriteBlock(void)+19Dr
.rdata:00000084                 db    1
.rdata:00000085                 db    0
.rdata:00000086                 db    0
.rdata:00000087                 db    0
.rdata:00000088                 db    2
.rdata:00000089                 db    0
.rdata:0000008A                 db    0
.rdata:0000008B                 db    0
.rdata:0000008C                 db    3
.rdata:0000008D                 db    0
.rdata:0000008E                 db    0
.rdata:0000008F                 db    0
.rdata:00000090                 db    4
.rdata:00000091                 db    0
.rdata:00000092                 db    0
.rdata:00000093                 db    0
.rdata:00000094                 db    6
.rdata:00000095                 db    0
.rdata:00000096                 db    0
.rdata:00000097                 db    0
.rdata:00000098                 db    8
.rdata:00000099                 db    0
.rdata:0000009A                 db    0
.rdata:0000009B                 db    0
.rdata:0000009C                 db  0Ch
.rdata:0000009D                 db    0
.rdata:0000009E                 db    0
.rdata:0000009F                 db    0
.rdata:000000A0                 db  10h
.rdata:000000A1                 db    0
.rdata:000000A2                 db    0
.rdata:000000A3                 db    0
.rdata:000000A4                 db  18h
.rdata:000000A5                 db    0
.rdata:000000A6                 db    0
.rdata:000000A7                 db    0
.rdata:000000A8                 db  20h
.rdata:000000A9                 db    0
.rdata:000000AA                 db    0
.rdata:000000AB                 db    0
.rdata:000000AC                 db  30h ; 0
.rdata:000000AD                 db    0
.rdata:000000AE                 db    0
.rdata:000000AF                 db    0
.rdata:000000B0                 db  40h ; @
.rdata:000000B1                 db    0
.rdata:000000B2                 db    0
.rdata:000000B3                 db    0
.rdata:000000B4                 db  60h ; `
.rdata:000000B5                 db    0
.rdata:000000B6                 db    0
.rdata:000000B7                 db    0
.rdata:000000B8                 db  80h ; Ç
.rdata:000000B9                 db    0
.rdata:000000BA                 db    0
.rdata:000000BB                 db    0
.rdata:000000BC                 db 0C0h ; +
.rdata:000000BD                 db    0
.rdata:000000BE                 db    0
.rdata:000000BF                 db    0
.rdata:000000C0                 db    0
.rdata:000000C1                 db    1
.rdata:000000C2                 db    0
.rdata:000000C3                 db    0
.rdata:000000C4                 db  80h ; Ç
.rdata:000000C5                 db    1
.rdata:000000C6                 db    0
.rdata:000000C7                 db    0
.rdata:000000C8                 db    0
.rdata:000000C9                 db    2
.rdata:000000CA                 db    0
.rdata:000000CB                 db    0
.rdata:000000CC                 db    0
.rdata:000000CD                 db    3
.rdata:000000CE                 db    0
.rdata:000000CF                 db    0
.rdata:000000D0                 db    0
.rdata:000000D1                 db    4
.rdata:000000D2                 db    0
.rdata:000000D3                 db    0
.rdata:000000D4                 db    0
.rdata:000000D5                 db    6
.rdata:000000D6                 db    0
.rdata:000000D7                 db    0
.rdata:000000D8                 db    0
.rdata:000000D9                 db    8
.rdata:000000DA                 db    0
.rdata:000000DB                 db    0
.rdata:000000DC                 db    0
.rdata:000000DD                 db  0Ch
.rdata:000000DE                 db    0
.rdata:000000DF                 db    0
.rdata:000000E0                 db    0
.rdata:000000E1                 db  10h
.rdata:000000E2                 db    0
.rdata:000000E3                 db    0
.rdata:000000E4                 db    0
.rdata:000000E5                 db  18h
.rdata:000000E6                 db    0
.rdata:000000E7                 db    0
.rdata:000000E8                 db    0
.rdata:000000E9                 db  20h
.rdata:000000EA                 db    0
.rdata:000000EB                 db    0
.rdata:000000EC                 db    0
.rdata:000000ED                 db  30h ; 0
.rdata:000000EE                 db    0
.rdata:000000EF                 db    0
.rdata:000000F0                 db    0
.rdata:000000F1                 db  40h ; @
.rdata:000000F2                 db    0
.rdata:000000F3                 db    0
.rdata:000000F4                 db    0
.rdata:000000F5                 db  60h ; `
.rdata:000000F6                 db    0
.rdata:000000F7                 db    0
.rdata:000000F8                 db    0
.rdata:000000F9                 db  80h ; Ç
.rdata:000000FA                 db    0
.rdata:000000FB                 db    0
.rdata:000000FC                 db    0
.rdata:000000FD                 db 0C0h ; +
.rdata:000000FE                 db    0
.rdata:000000FF                 db    0
.rdata:00000100 _kDistDirectBits db 0                   ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::GetLzBlockPrice(void)+3Fo
.rdata:00000100                                         ; NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)+134r ...
.rdata:00000101 ; unsigned __int8 unk_101
.rdata:00000101 unk_101         db    0                 ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::GetLzBlockPrice(void)+Fo
.rdata:00000102                 db    0
.rdata:00000103                 db    0
.rdata:00000104                 db    1
.rdata:00000105                 db    1
.rdata:00000106                 db    2
.rdata:00000107                 db    2
.rdata:00000108                 db    3
.rdata:00000109                 db    3
.rdata:0000010A                 db    4
.rdata:0000010B                 db    4
.rdata:0000010C                 db    5
.rdata:0000010D                 db    5
.rdata:0000010E                 db    6
.rdata:0000010F                 db    6
.rdata:00000110                 db    7
.rdata:00000111                 db    7
.rdata:00000112                 db    8
.rdata:00000113                 db    8
.rdata:00000114                 db    9
.rdata:00000115                 db    9
.rdata:00000116                 db  0Ah
.rdata:00000117                 db  0Ah
.rdata:00000118                 db  0Bh
.rdata:00000119                 db  0Bh
.rdata:0000011A                 db  0Ch
.rdata:0000011B                 db  0Ch
.rdata:0000011C                 db  0Dh
.rdata:0000011D                 db  0Dh
.rdata:0000011E                 db  0Eh
.rdata:0000011F                 db  0Eh
.rdata:00000120 ; unsigned __int8 kLevelDirectBits
.rdata:00000120 _kLevelDirectBits db 2                  ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::GetLzBlockPrice(void)+1Eo
.rdata:00000120                                         ; NCompress::NDeflate::NEncoder::CCoder::WriteBlock(void)+23o ...
.rdata:00000121                 db    3
.rdata:00000122                 db    7
.rdata:00000123                 db    0
.rdata:00000124 _kCodeLengthAlphabetOrder db 10h        ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+24Cr
.rdata:00000125                 db  11h
.rdata:00000126                 db  12h
.rdata:00000127                 db    0
.rdata:00000128                 db    8
.rdata:00000129                 db    7
.rdata:0000012A                 db    9
.rdata:0000012B                 db    6
.rdata:0000012C                 db  0Ah
.rdata:0000012D                 db    5
.rdata:0000012E                 db  0Bh
.rdata:0000012F                 db    4
.rdata:00000130                 db  0Ch
.rdata:00000131                 db    3
.rdata:00000132                 db  0Dh
.rdata:00000133                 db    2
.rdata:00000134                 db  0Eh
.rdata:00000135                 db    1
.rdata:00000136                 db  0Fh
.rdata:00000137                 align 4
.rdata:00000137 _rdata          ends
.rdata:00000137
.text:00000138 ; ===========================================================================
.text:00000138
.text:00000138 ; Segment type: Pure code
.text:00000138 ; Segment permissions: Read/Execute
.text:00000138 _text           segment para public 'CODE' use32
.text:00000138                 assume cs:_text
.text:00000138                 ;org 138h
.text:00000138                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000138
.text:00000138 ; =============== S U B R O U T I N E =======================================
.text:00000138
.text:00000138 ; Attributes: bp-based frame
.text:00000138
.text:00000138 ; void __thiscall NCompress::NDeflate::NEncoder::CEncProps::Normalize(NCompress::NDeflate::NEncoder::CEncProps *__hidden this)
.text:00000138                 public ?Normalize@CEncProps@NEncoder@NDeflate@NCompress@@QAEXXZ
.text:00000138 ?Normalize@CEncProps@NEncoder@NDeflate@NCompress@@QAEXXZ proc near
.text:00000138                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetProps(NCompress::NDeflate::NEncoder::CEncProps const *)+44p
.text:00000138
.text:00000138 var_10          = dword ptr -10h
.text:00000138 var_C           = dword ptr -0Ch
.text:00000138 var_8           = dword ptr -8
.text:00000138 var_4           = dword ptr -4
.text:00000138
.text:00000138                 push    ebp
.text:00000139                 mov     ebp, esp
.text:0000013B                 sub     esp, 10h
.text:0000013E                 mov     eax, 0CCCCCCCCh
.text:00000143                 mov     [ebp+var_10], eax
.text:00000146                 mov     [ebp+var_C], eax
.text:00000149                 mov     [ebp+var_8], eax
.text:0000014C                 mov     [ebp+var_4], eax
.text:0000014F                 mov     [ebp+var_4], ecx
.text:00000152                 mov     eax, [ebp+var_4]
.text:00000155                 mov     ecx, [eax]
.text:00000157                 mov     [ebp+var_8], ecx
.text:0000015A                 cmp     [ebp+var_8], 0
.text:0000015E                 jge     short loc_167
.text:00000160                 mov     [ebp+var_8], 5
.text:00000167
.text:00000167 loc_167:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CEncProps::Normalize(void)+26j
.text:00000167                 mov     edx, [ebp+var_4]
.text:0000016A                 mov     eax, [ebp+var_8]
.text:0000016D                 mov     [edx], eax
.text:0000016F                 mov     ecx, [ebp+var_4]
.text:00000172                 cmp     dword ptr [ecx+4], 0
.text:00000176                 jge     short loc_187
.text:00000178                 xor     edx, edx
.text:0000017A                 cmp     [ebp+var_8], 5
.text:0000017E                 setnl   dl
.text:00000181                 mov     eax, [ebp+var_4]
.text:00000184                 mov     [eax+4], edx
.text:00000187
.text:00000187 loc_187:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CEncProps::Normalize(void)+3Ej
.text:00000187                 mov     ecx, [ebp+var_4]
.text:0000018A                 cmp     dword ptr [ecx+8], 0
.text:0000018E                 jge     short loc_1C0
.text:00000190                 cmp     [ebp+var_8], 7
.text:00000194                 jge     short loc_19F
.text:00000196                 mov     [ebp+var_C], 20h ; ' '
.text:0000019D                 jmp     short loc_1B7
.text:0000019F ; ---------------------------------------------------------------------------
.text:0000019F
.text:0000019F loc_19F:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CEncProps::Normalize(void)+5Cj
.text:0000019F                 xor     edx, edx
.text:000001A1                 cmp     [ebp+var_8], 9
.text:000001A5                 setnl   dl
.text:000001A8                 sub     edx, 1
.text:000001AB                 and     edx, 0FFFFFFC0h
.text:000001AE                 add     edx, 80h ; 'Ç'
.text:000001B4                 mov     [ebp+var_C], edx
.text:000001B7
.text:000001B7 loc_1B7:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CEncProps::Normalize(void)+65j
.text:000001B7                 mov     eax, [ebp+var_4]
.text:000001BA                 mov     ecx, [ebp+var_C]
.text:000001BD                 mov     [eax+8], ecx
.text:000001C0
.text:000001C0 loc_1C0:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CEncProps::Normalize(void)+56j
.text:000001C0                 mov     edx, [ebp+var_4]
.text:000001C3                 cmp     dword ptr [edx+0Ch], 0
.text:000001C7                 jge     short loc_1DB
.text:000001C9                 mov     eax, [ebp+var_4]
.text:000001CC                 xor     ecx, ecx
.text:000001CE                 cmp     dword ptr [eax+4], 0
.text:000001D2                 setnz   cl
.text:000001D5                 mov     edx, [ebp+var_4]
.text:000001D8                 mov     [edx+0Ch], ecx
.text:000001DB
.text:000001DB loc_1DB:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CEncProps::Normalize(void)+8Fj
.text:000001DB                 mov     eax, [ebp+var_4]
.text:000001DE                 cmp     dword ptr [eax+10h], 0
.text:000001E2                 jnz     short loc_1F5
.text:000001E4                 mov     ecx, [ebp+var_4]
.text:000001E7                 mov     edx, [ecx+8]
.text:000001EA                 sar     edx, 1
.text:000001EC                 add     edx, 10h
.text:000001EF                 mov     eax, [ebp+var_4]
.text:000001F2                 mov     [eax+10h], edx
.text:000001F5
.text:000001F5 loc_1F5:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CEncProps::Normalize(void)+AAj
.text:000001F5                 mov     ecx, [ebp+var_4]
.text:000001F8                 cmp     dword ptr [ecx+14h], 0FFFFFFFFh
.text:000001FC                 jnz     short loc_22B
.text:000001FE                 cmp     [ebp+var_8], 7
.text:00000202                 jge     short loc_20D
.text:00000204                 mov     [ebp+var_10], 1
.text:0000020B                 jmp     short loc_222
.text:0000020D ; ---------------------------------------------------------------------------
.text:0000020D
.text:0000020D loc_20D:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CEncProps::Normalize(void)+CAj
.text:0000020D                 xor     edx, edx
.text:0000020F                 cmp     [ebp+var_8], 9
.text:00000213                 setnl   dl
.text:00000216                 sub     edx, 1
.text:00000219                 and     edx, 0FFFFFFF9h
.text:0000021C                 add     edx, 0Ah
.text:0000021F                 mov     [ebp+var_10], edx
.text:00000222
.text:00000222 loc_222:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CEncProps::Normalize(void)+D3j
.text:00000222                 mov     eax, [ebp+var_4]
.text:00000225                 mov     ecx, [ebp+var_10]
.text:00000228                 mov     [eax+14h], ecx
.text:0000022B
.text:0000022B loc_22B:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CEncProps::Normalize(void)+C4j
.text:0000022B                 mov     esp, ebp
.text:0000022D                 pop     ebp
.text:0000022E                 retn
.text:0000022E ?Normalize@CEncProps@NEncoder@NDeflate@NCompress@@QAEXXZ endp
.text:0000022E
.text:0000022E ; ---------------------------------------------------------------------------
.text:0000022F                 db 9 dup(0CCh)
.text:00000238
.text:00000238 ; =============== S U B R O U T I N E =======================================
.text:00000238
.text:00000238 ; Attributes: bp-based frame
.text:00000238
.text:00000238 ; void __thiscall NCompress::NDeflate::NEncoder::CCoder::SetProps(NCompress::NDeflate::NEncoder::CCoder *this, const struct NCompress::NDeflate::NEncoder::CEncProps *)
.text:00000238                 public ?SetProps@CCoder@NEncoder@NDeflate@NCompress@@QAEXPBUCEncProps@234@@Z
.text:00000238 ?SetProps@CCoder@NEncoder@NDeflate@NCompress@@QAEXPBUCEncProps@234@@Z proc near
.text:00000238                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CCoder(bool)+A8p
.text:00000238                                         ; NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+D8p
.text:00000238
.text:00000238 var_28          = dword ptr -28h
.text:00000238 var_20          = dword ptr -20h
.text:00000238 var_1C          = dword ptr -1Ch
.text:00000238 var_18          = dword ptr -18h
.text:00000238 var_14          = dword ptr -14h
.text:00000238 var_10          = dword ptr -10h
.text:00000238 var_C           = dword ptr -0Ch
.text:00000238 var_4           = dword ptr -4
.text:00000238 arg_0           = dword ptr  8
.text:00000238
.text:00000238                 push    ebp
.text:00000239                 mov     ebp, esp
.text:0000023B                 sub     esp, 28h
.text:0000023E                 push    edi
.text:0000023F                 push    ecx
.text:00000240                 lea     edi, [ebp+var_28]
.text:00000243                 mov     ecx, 0Ah
.text:00000248                 mov     eax, 0CCCCCCCCh
.text:0000024D                 rep stosd
.text:0000024F                 pop     ecx
.text:00000250                 mov     [ebp+var_4], ecx
.text:00000253                 mov     eax, [ebp+arg_0]
.text:00000256                 mov     ecx, [eax]
.text:00000258                 mov     [ebp+var_20], ecx
.text:0000025B                 mov     edx, [eax+4]
.text:0000025E                 mov     [ebp+var_1C], edx
.text:00000261                 mov     ecx, [eax+8]
.text:00000264                 mov     [ebp+var_18], ecx
.text:00000267                 mov     edx, [eax+0Ch]
.text:0000026A                 mov     [ebp+var_14], edx
.text:0000026D                 mov     ecx, [eax+10h]
.text:00000270                 mov     [ebp+var_10], ecx
.text:00000273                 mov     edx, [eax+14h]
.text:00000276                 mov     [ebp+var_C], edx
.text:00000279                 lea     ecx, [ebp+var_20] ; this
.text:0000027C                 call    ?Normalize@CEncProps@NEncoder@NDeflate@NCompress@@QAEXXZ ; NCompress::NDeflate::NEncoder::CEncProps::Normalize(void)
.text:00000281                 mov     eax, [ebp+var_4]
.text:00000284                 mov     ecx, [ebp+var_10]
.text:00000287                 mov     [eax+9AECh], ecx
.text:0000028D                 mov     edx, [ebp+var_18]
.text:00000290                 mov     [ebp+var_28], edx
.text:00000293                 cmp     [ebp+var_28], 3
.text:00000297                 jnb     short loc_2A0
.text:00000299                 mov     [ebp+var_28], 3
.text:000002A0
.text:000002A0 loc_2A0:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetProps(NCompress::NDeflate::NEncoder::CEncProps const *)+5Fj
.text:000002A0                 mov     eax, [ebp+var_4]
.text:000002A3                 mov     ecx, [ebp+var_28]
.text:000002A6                 cmp     ecx, [eax+4D0h]
.text:000002AC                 jbe     short loc_2BA
.text:000002AE                 mov     edx, [ebp+var_4]
.text:000002B1                 mov     eax, [edx+4D0h]
.text:000002B7                 mov     [ebp+var_28], eax
.text:000002BA
.text:000002BA loc_2BA:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetProps(NCompress::NDeflate::NEncoder::CEncProps const *)+74j
.text:000002BA                 mov     ecx, [ebp+var_4]
.text:000002BD                 mov     edx, [ebp+var_28]
.text:000002C0                 mov     [ecx+4A8h], edx
.text:000002C6                 xor     eax, eax
.text:000002C8                 cmp     [ebp+var_1C], 0
.text:000002CC                 setz    al
.text:000002CF                 mov     ecx, [ebp+var_4]
.text:000002D2                 mov     [ecx+4ACh], al
.text:000002D8                 xor     edx, edx
.text:000002DA                 cmp     [ebp+var_14], 0
.text:000002DE                 setnz   dl
.text:000002E1                 mov     eax, [ebp+var_4]
.text:000002E4                 mov     [eax+4ADh], dl
.text:000002EA                 mov     ecx, [ebp+var_4]
.text:000002ED                 mov     edx, [ebp+var_C]
.text:000002F0                 mov     [ecx+4C0h], edx
.text:000002F6                 mov     eax, [ebp+var_4]
.text:000002F9                 cmp     dword ptr [eax+4C0h], 0
.text:00000300                 jnz     short loc_30F
.text:00000302                 mov     ecx, [ebp+var_4]
.text:00000305                 mov     dword ptr [ecx+4C0h], 1
.text:0000030F
.text:0000030F loc_30F:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetProps(NCompress::NDeflate::NEncoder::CEncProps const *)+C8j
.text:0000030F                 mov     edx, [ebp+var_4]
.text:00000312                 cmp     dword ptr [edx+4C0h], 1
.text:00000319                 jnz     short loc_32A
.text:0000031B                 mov     eax, [ebp+var_4]
.text:0000031E                 mov     dword ptr [eax+4BCh], 1
.text:00000328                 jmp     short loc_367
.text:0000032A ; ---------------------------------------------------------------------------
.text:0000032A
.text:0000032A loc_32A:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetProps(NCompress::NDeflate::NEncoder::CEncProps const *)+E1j
.text:0000032A                 mov     ecx, [ebp+var_4]
.text:0000032D                 cmp     dword ptr [ecx+4C0h], 0Ah
.text:00000334                 ja      short loc_345
.text:00000336                 mov     edx, [ebp+var_4]
.text:00000339                 mov     dword ptr [edx+4BCh], 2
.text:00000343                 jmp     short loc_367
.text:00000345 ; ---------------------------------------------------------------------------
.text:00000345
.text:00000345 loc_345:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetProps(NCompress::NDeflate::NEncoder::CEncProps const *)+FCj
.text:00000345                 mov     eax, [ebp+var_4]
.text:00000348                 mov     ecx, [eax+4C0h]
.text:0000034E                 sub     ecx, 8
.text:00000351                 mov     edx, [ebp+var_4]
.text:00000354                 mov     [edx+4BCh], ecx
.text:0000035A                 mov     eax, [ebp+var_4]
.text:0000035D                 mov     dword ptr [eax+4C0h], 0Ah
.text:00000367
.text:00000367 loc_367:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetProps(NCompress::NDeflate::NEncoder::CEncProps const *)+F0j
.text:00000367                                         ; NCompress::NDeflate::NEncoder::CCoder::SetProps(NCompress::NDeflate::NEncoder::CEncProps const *)+10Bj
.text:00000367                 push    edx
.text:00000368                 mov     ecx, ebp
.text:0000036A                 push    eax
.text:0000036B                 lea     edx, $LN12
.text:00000371                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000376                 pop     eax
.text:00000377                 pop     edx
.text:00000378                 pop     edi
.text:00000379                 add     esp, 28h
.text:0000037C                 cmp     ebp, esp
.text:0000037E                 call    __RTC_CheckEsp
.text:00000383                 mov     esp, ebp
.text:00000385                 pop     ebp
.text:00000386                 retn    4
.text:00000386 ?SetProps@CCoder@NEncoder@NDeflate@NCompress@@QAEXPBUCEncProps@234@@Z endp
.text:00000386
.text:00000386 ; ---------------------------------------------------------------------------
.text:00000389                 align 4
.text:0000038C $LN12           dd 1                    ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::SetProps(NCompress::NDeflate::NEncoder::CEncProps const *)+133o
.text:00000390                 dd offset $LN11
.text:00000394 $LN11           dd 0FFFFFFE0h, 18h      ; DATA XREF: .text:00000390o
.text:0000039C                 dd offset $LN10         ; "props"
.text:000003A0 $LN10           db 'props',0            ; DATA XREF: .text:0000039Co
.text:000003A6                 align 4
.text:000003A8
.text:000003A8 ; =============== S U B R O U T I N E =======================================
.text:000003A8
.text:000003A8 ; Attributes: bp-based frame
.text:000003A8
.text:000003A8 ; _DWORD __thiscall NCompress::NDeflate::NEncoder::CCoder::CCoder(NCompress::NDeflate::NEncoder::CCoder *this, bool)
.text:000003A8                 public ??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z
.text:000003A8 ??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z proc near
.text:000003A8
.text:000003A8 var_38          = dword ptr -38h
.text:000003A8 var_34          = dword ptr -34h
.text:000003A8 var_2C          = byte ptr -2Ch
.text:000003A8 var_10          = dword ptr -10h
.text:000003A8 var_C           = dword ptr -0Ch
.text:000003A8 var_4           = dword ptr -4
.text:000003A8 arg_0           = byte ptr  8
.text:000003A8
.text:000003A8                 push    ebp
.text:000003A9                 mov     ebp, esp
.text:000003AB                 push    0FFFFFFFFh
.text:000003AD                 push    offset __ehhandler$??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z
.text:000003B2                 mov     eax, large fs:0
.text:000003B8                 push    eax
.text:000003B9                 sub     esp, 2Ch
.text:000003BC                 push    edi
.text:000003BD                 push    ecx
.text:000003BE                 lea     edi, [ebp+var_38]
.text:000003C1                 mov     ecx, 0Bh
.text:000003C6                 mov     eax, 0CCCCCCCCh
.text:000003CB                 rep stosd
.text:000003CD                 pop     ecx
.text:000003CE                 mov     eax, dword ptr ds:___security_cookie
.text:000003D3                 xor     eax, ebp
.text:000003D5                 push    eax
.text:000003D6                 lea     eax, [ebp+var_C]
.text:000003D9                 mov     large fs:0, eax
.text:000003DF                 mov     [ebp+var_10], ecx
.text:000003E2                 mov     ecx, [ebp+var_10]
.text:000003E5                 add     ecx, 468h       ; this
.text:000003EB                 call    ??0CBitlEncoder@@QAE@XZ ; CBitlEncoder::CBitlEncoder(void)
.text:000003F0                 mov     [ebp+var_4], 0
.text:000003F7                 mov     eax, [ebp+var_10]
.text:000003FA                 mov     dword ptr [eax+4A0h], 0
.text:00000404                 mov     ecx, [ebp+var_10]
.text:00000407                 mov     dword ptr [ecx+4B0h], 0
.text:00000411                 mov     edx, [ebp+var_10]
.text:00000414                 mov     dword ptr [edx+4B4h], 0
.text:0000041E                 mov     eax, [ebp+var_10]
.text:00000421                 mov     byte ptr [eax+4DCh], 0
.text:00000428                 mov     ecx, [ebp+var_10]
.text:0000042B                 mov     dl, [ebp+arg_0]
.text:0000042E                 mov     [ecx+4DDh], dl
.text:00000434                 mov     eax, [ebp+var_10]
.text:00000437                 mov     dword ptr [eax+12D8h], 0
.text:00000441                 lea     ecx, [ebp+var_2C] ; this
.text:00000444                 call    ??0CEncProps@NEncoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NEncoder::CEncProps::CEncProps(void)
.text:00000449                 lea     ecx, [ebp+var_2C]
.text:0000044C                 push    ecx             ; struct NCompress::NDeflate::NEncoder::CEncProps *
.text:0000044D                 mov     ecx, [ebp+var_10] ; this
.text:00000450                 call    ?SetProps@CCoder@NEncoder@NDeflate@NCompress@@QAEXPBUCEncProps@234@@Z ; NCompress::NDeflate::NEncoder::CCoder::SetProps(NCompress::NDeflate::NEncoder::CEncProps const *)
.text:00000455                 movzx   edx, [ebp+arg_0]
.text:00000459                 neg     edx
.text:0000045B                 sbb     edx, edx
.text:0000045D                 add     edx, 102h
.text:00000463                 mov     eax, [ebp+var_10]
.text:00000466                 mov     [eax+4D0h], edx
.text:0000046C                 movzx   ecx, [ebp+arg_0]
.text:00000470                 neg     ecx
.text:00000472                 sbb     ecx, ecx
.text:00000474                 add     ecx, 100h
.text:0000047A                 mov     edx, [ebp+var_10]
.text:0000047D                 mov     [edx+4CCh], ecx
.text:00000483                 movzx   eax, [ebp+arg_0]
.text:00000487                 test    eax, eax
.text:00000489                 jz      short loc_494
.text:0000048B                 mov     [ebp+var_34], offset _kLenStart64
.text:00000492                 jmp     short loc_49B
.text:00000494 ; ---------------------------------------------------------------------------
.text:00000494
.text:00000494 loc_494:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CCoder(bool)+E1j
.text:00000494                 mov     [ebp+var_34], offset _kLenStart32
.text:0000049B
.text:0000049B loc_49B:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CCoder(bool)+EAj
.text:0000049B                 mov     ecx, [ebp+var_10]
.text:0000049E                 mov     edx, [ebp+var_34]
.text:000004A1                 mov     [ecx+4D4h], edx
.text:000004A7                 movzx   eax, [ebp+arg_0]
.text:000004AB                 test    eax, eax
.text:000004AD                 jz      short loc_4B8
.text:000004AF                 mov     [ebp+var_38], offset _kLenDirectBits64
.text:000004B6                 jmp     short loc_4BF
.text:000004B8 ; ---------------------------------------------------------------------------
.text:000004B8
.text:000004B8 loc_4B8:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CCoder(bool)+105j
.text:000004B8                 mov     [ebp+var_38], offset _kLenDirectBits32
.text:000004BF
.text:000004BF loc_4BF:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CCoder(bool)+10Ej
.text:000004BF                 mov     ecx, [ebp+var_10]
.text:000004C2                 mov     edx, [ebp+var_38]
.text:000004C5                 mov     [ecx+4D8h], edx
.text:000004CB                 mov     eax, [ebp+var_10]
.text:000004CE                 push    eax
.text:000004CF                 call    _MatchFinder_Construct@4 ; MatchFinder_Construct(x)
.text:000004D4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000004DB                 mov     eax, [ebp+var_10]
.text:000004DE                 push    edx
.text:000004DF                 mov     ecx, ebp
.text:000004E1                 push    eax
.text:000004E2                 lea     edx, $LN11_0
.text:000004E8                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000004ED                 pop     eax
.text:000004EE                 pop     edx
.text:000004EF                 mov     ecx, [ebp+var_C]
.text:000004F2                 mov     large fs:0, ecx
.text:000004F9                 pop     ecx
.text:000004FA                 pop     edi
.text:000004FB                 add     esp, 38h
.text:000004FE                 cmp     ebp, esp
.text:00000500                 call    __RTC_CheckEsp
.text:00000505                 mov     esp, ebp
.text:00000507                 pop     ebp
.text:00000508                 retn    4
.text:00000508 ??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z endp
.text:00000508
.text:00000508 ; ---------------------------------------------------------------------------
.text:0000050B                 align 4
.text:0000050C $LN11_0         dd 1                    ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::CCoder(bool)+13Ao
.text:00000510                 dd offset $LN10_0
.text:00000514 $LN10_0         dd 0FFFFFFD4h, 18h      ; DATA XREF: .text:00000510o
.text:0000051C                 dd offset $LN8          ; "props"
.text:00000520 $LN8            db 'props',0            ; DATA XREF: .text:0000051Co
.text:00000526                 align 4
.text:00000528
.text:00000528 ; =============== S U B R O U T I N E =======================================
.text:00000528
.text:00000528 ; Attributes: bp-based frame
.text:00000528
.text:00000528 ; __int32 __thiscall NCompress::NDeflate::NEncoder::CCoder::Create(NCompress::NDeflate::NEncoder::CCoder *__hidden this)
.text:00000528                 public ?Create@CCoder@NEncoder@NDeflate@NCompress@@QAEJXZ
.text:00000528 ?Create@CCoder@NEncoder@NDeflate@NCompress@@QAEJXZ proc near
.text:00000528                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+95p
.text:00000528
.text:00000528 var_4           = dword ptr -4
.text:00000528
.text:00000528                 push    ebp
.text:00000529                 mov     ebp, esp
.text:0000052B                 push    ecx
.text:0000052C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000533                 mov     [ebp+var_4], ecx
.text:00000536                 mov     eax, [ebp+var_4]
.text:00000539                 cmp     dword ptr [eax+4A0h], 0
.text:00000540                 jnz     short loc_56B
.text:00000542                 push    3FFFCh
.text:00000547                 call    _MyAlloc@4      ; MyAlloc(x)
.text:0000054C                 mov     ecx, [ebp+var_4]
.text:0000054F                 mov     [ecx+4A0h], eax
.text:00000555                 mov     edx, [ebp+var_4]
.text:00000558                 cmp     dword ptr [edx+4A0h], 0
.text:0000055F                 jnz     short loc_56B
.text:00000561                 mov     eax, 8007000Eh
.text:00000566                 jmp     loc_6FA
.text:0000056B ; ---------------------------------------------------------------------------
.text:0000056B
.text:0000056B loc_56B:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::Create(void)+18j
.text:0000056B                                         ; NCompress::NDeflate::NEncoder::CCoder::Create(void)+37j
.text:0000056B                 mov     eax, [ebp+var_4]
.text:0000056E                 cmp     dword ptr [eax+12D8h], 0
.text:00000575                 jnz     short loc_5A0
.text:00000577                 push    53000h
.text:0000057C                 call    _MyAlloc@4      ; MyAlloc(x)
.text:00000581                 mov     ecx, [ebp+var_4]
.text:00000584                 mov     [ecx+12D8h], eax
.text:0000058A                 mov     edx, [ebp+var_4]
.text:0000058D                 cmp     dword ptr [edx+12D8h], 0
.text:00000594                 jnz     short loc_5A0
.text:00000596                 mov     eax, 8007000Eh
.text:0000059B                 jmp     loc_6FA
.text:000005A0 ; ---------------------------------------------------------------------------
.text:000005A0
.text:000005A0 loc_5A0:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::Create(void)+4Dj
.text:000005A0                                         ; NCompress::NDeflate::NEncoder::CCoder::Create(void)+6Cj
.text:000005A0                 mov     eax, [ebp+var_4]
.text:000005A3                 movzx   ecx, byte ptr [eax+4C5h]
.text:000005AA                 test    ecx, ecx
.text:000005AC                 jz      short loc_5E5
.text:000005AE                 mov     edx, [ebp+var_4]
.text:000005B1                 cmp     dword ptr [edx+4B0h], 0
.text:000005B8                 jnz     short loc_5E3
.text:000005BA                 push    13FFECh
.text:000005BF                 call    _MidAlloc@4     ; MidAlloc(x)
.text:000005C4                 mov     ecx, [ebp+var_4]
.text:000005C7                 mov     [ecx+4B0h], eax
.text:000005CD                 mov     edx, [ebp+var_4]
.text:000005D0                 cmp     dword ptr [edx+4B0h], 0
.text:000005D7                 jnz     short loc_5E3
.text:000005D9                 mov     eax, 8007000Eh
.text:000005DE                 jmp     loc_6FA
.text:000005E3 ; ---------------------------------------------------------------------------
.text:000005E3
.text:000005E3 loc_5E3:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::Create(void)+90j
.text:000005E3                                         ; NCompress::NDeflate::NEncoder::CCoder::Create(void)+AFj
.text:000005E3                 jmp     short loc_62C
.text:000005E5 ; ---------------------------------------------------------------------------
.text:000005E5
.text:000005E5 loc_5E5:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::Create(void)+84j
.text:000005E5                 mov     eax, [ebp+var_4]
.text:000005E8                 cmp     dword ptr [eax+4B4h], 0
.text:000005EF                 jnz     short loc_62C
.text:000005F1                 push    410h
.text:000005F6                 call    _MyAlloc@4      ; MyAlloc(x)
.text:000005FB                 mov     ecx, [ebp+var_4]
.text:000005FE                 mov     [ecx+4B4h], eax
.text:00000604                 mov     edx, [ebp+var_4]
.text:00000607                 cmp     dword ptr [edx+4B4h], 0
.text:0000060E                 jnz     short loc_61A
.text:00000610                 mov     eax, 8007000Eh
.text:00000615                 jmp     loc_6FA
.text:0000061A ; ---------------------------------------------------------------------------
.text:0000061A
.text:0000061A loc_61A:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::Create(void)+E6j
.text:0000061A                 mov     eax, [ebp+var_4]
.text:0000061D                 mov     ecx, [ebp+var_4]
.text:00000620                 mov     edx, [ecx+4B4h]
.text:00000626                 mov     [eax+4A4h], edx
.text:0000062C
.text:0000062C loc_62C:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::Create(void):loc_5E3j
.text:0000062C                                         ; NCompress::NDeflate::NEncoder::CCoder::Create(void)+C7j
.text:0000062C                 mov     eax, [ebp+var_4]
.text:0000062F                 movzx   ecx, byte ptr [eax+4DCh]
.text:00000636                 test    ecx, ecx
.text:00000638                 jnz     loc_6D3
.text:0000063E                 mov     edx, [ebp+var_4]
.text:00000641                 movzx   eax, byte ptr [edx+4ADh]
.text:00000648                 neg     eax
.text:0000064A                 sbb     eax, eax
.text:0000064C                 neg     eax
.text:0000064E                 mov     ecx, [ebp+var_4]
.text:00000651                 mov     [ecx+1Dh], al
.text:00000654                 mov     edx, [ebp+var_4]
.text:00000657                 mov     dword ptr [edx+48h], 3
.text:0000065E                 push    offset _g_Alloc
.text:00000663                 mov     eax, [ebp+var_4]
.text:00000666                 mov     ecx, [ebp+var_4]
.text:00000669                 mov     edx, [eax+4D0h]
.text:0000066F                 sub     edx, [ecx+4A8h]
.text:00000675                 push    edx
.text:00000676                 mov     eax, [ebp+var_4]
.text:00000679                 mov     ecx, [eax+4A8h]
.text:0000067F                 push    ecx
.text:00000680                 push    11101h
.text:00000685                 mov     edx, [ebp+var_4]
.text:00000688                 movzx   eax, byte ptr [edx+4DDh]
.text:0000068F                 neg     eax
.text:00000691                 sbb     eax, eax
.text:00000693                 and     eax, 8000h
.text:00000698                 add     eax, 8000h
.text:0000069D                 push    eax
.text:0000069E                 mov     ecx, [ebp+var_4]
.text:000006A1                 push    ecx
.text:000006A2                 call    _MatchFinder_Create@24 ; MatchFinder_Create(x,x,x,x,x,x)
.text:000006A7                 test    eax, eax
.text:000006A9                 jnz     short loc_6B2
.text:000006AB                 mov     eax, 8007000Eh
.text:000006B0                 jmp     short loc_6FA
.text:000006B2 ; ---------------------------------------------------------------------------
.text:000006B2
.text:000006B2 loc_6B2:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::Create(void)+181j
.text:000006B2                 push    100000h         ; unsigned int
.text:000006B7                 mov     ecx, [ebp+var_4]
.text:000006BA                 add     ecx, 468h       ; this
.text:000006C0                 call    ?Create@CBitlEncoder@@QAE_NI@Z ; CBitlEncoder::Create(uint)
.text:000006C5                 movzx   edx, al
.text:000006C8                 test    edx, edx
.text:000006CA                 jnz     short loc_6D3
.text:000006CC                 mov     eax, 8007000Eh
.text:000006D1                 jmp     short loc_6FA
.text:000006D3 ; ---------------------------------------------------------------------------
.text:000006D3
.text:000006D3 loc_6D3:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::Create(void)+110j
.text:000006D3                                         ; NCompress::NDeflate::NEncoder::CCoder::Create(void)+1A2j
.text:000006D3                 mov     eax, [ebp+var_4]
.text:000006D6                 cmp     dword ptr [eax+9AECh], 0
.text:000006DD                 jz      short loc_6EE
.text:000006DF                 mov     ecx, [ebp+var_4]
.text:000006E2                 mov     edx, [ebp+var_4]
.text:000006E5                 mov     eax, [edx+9AECh]
.text:000006EB                 mov     [ecx+30h], eax
.text:000006EE
.text:000006EE loc_6EE:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::Create(void)+1B5j
.text:000006EE                 mov     ecx, [ebp+var_4]
.text:000006F1                 mov     byte ptr [ecx+4DCh], 1
.text:000006F8                 xor     eax, eax
.text:000006FA
.text:000006FA loc_6FA:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::Create(void)+3Ej
.text:000006FA                                         ; NCompress::NDeflate::NEncoder::CCoder::Create(void)+73j ...
.text:000006FA                 add     esp, 4
.text:000006FD                 cmp     ebp, esp
.text:000006FF                 call    __RTC_CheckEsp
.text:00000704                 mov     esp, ebp
.text:00000706                 pop     ebp
.text:00000707                 retn
.text:00000707 ?Create@CCoder@NEncoder@NDeflate@NCompress@@QAEJXZ endp
.text:00000707
.text:00000708
.text:00000708 ; =============== S U B R O U T I N E =======================================
.text:00000708
.text:00000708 ; Attributes: bp-based frame
.text:00000708
.text:00000708 ; __int32 __thiscall NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(NCompress::NDeflate::NEncoder::CCoder *this, const unsigned __int32 *, const struct tagPROPVARIANT *, unsigned int)
.text:00000708                 public ?BaseSetEncoderProperties2@CCoder@NEncoder@NDeflate@NCompress@@QAEJPBKPBUtagPROPVARIANT@@I@Z
.text:00000708 ?BaseSetEncoderProperties2@CCoder@NEncoder@NDeflate@NCompress@@QAEJPBKPBUtagPROPVARIANT@@I@Z proc near
.text:00000708                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+15p
.text:00000708                                         ; NCompress::NDeflate::NEncoder::CCOMCoder64::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+15p
.text:00000708
.text:00000708 var_38          = dword ptr -38h
.text:00000708 var_34          = dword ptr -34h
.text:00000708 var_30          = dword ptr -30h
.text:00000708 var_2C          = dword ptr -2Ch
.text:00000708 var_28          = dword ptr -28h
.text:00000708 var_20          = dword ptr -20h
.text:00000708 var_1C          = dword ptr -1Ch
.text:00000708 var_18          = dword ptr -18h
.text:00000708 var_10          = dword ptr -10h
.text:00000708 var_C           = dword ptr -0Ch
.text:00000708 var_4           = dword ptr -4
.text:00000708 arg_0           = dword ptr  8
.text:00000708 arg_4           = dword ptr  0Ch
.text:00000708 arg_8           = dword ptr  10h
.text:00000708
.text:00000708                 push    ebp
.text:00000709                 mov     ebp, esp
.text:0000070B                 sub     esp, 38h
.text:0000070E                 push    edi
.text:0000070F                 push    ecx
.text:00000710                 lea     edi, [ebp+var_38]
.text:00000713                 mov     ecx, 0Eh
.text:00000718                 mov     eax, 0CCCCCCCCh
.text:0000071D                 rep stosd
.text:0000071F                 pop     ecx
.text:00000720                 mov     [ebp+var_4], ecx
.text:00000723                 lea     ecx, [ebp+var_20] ; this
.text:00000726                 call    ??0CEncProps@NEncoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NEncoder::CEncProps::CEncProps(void)
.text:0000072B                 mov     [ebp+var_28], 0
.text:00000732                 jmp     short loc_73D
.text:00000734 ; ---------------------------------------------------------------------------
.text:00000734
.text:00000734 loc_734:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+5Fj
.text:00000734                                         ; NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint):loc_7D4j
.text:00000734                 mov     eax, [ebp+var_28]
.text:00000737                 add     eax, 1
.text:0000073A                 mov     [ebp+var_28], eax
.text:0000073D
.text:0000073D loc_73D:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+2Aj
.text:0000073D                 mov     ecx, [ebp+var_28]
.text:00000740                 cmp     ecx, [ebp+arg_8]
.text:00000743                 jnb     loc_7D9
.text:00000749                 mov     edx, [ebp+var_28]
.text:0000074C                 shl     edx, 4
.text:0000074F                 add     edx, [ebp+arg_4]
.text:00000752                 mov     [ebp+var_2C], edx
.text:00000755                 mov     eax, [ebp+var_28]
.text:00000758                 mov     ecx, [ebp+arg_0]
.text:0000075B                 mov     edx, [ecx+eax*4]
.text:0000075E                 mov     [ebp+var_30], edx
.text:00000761                 cmp     [ebp+var_30], 10h
.text:00000765                 jb      short loc_769
.text:00000767                 jmp     short loc_734
.text:00000769 ; ---------------------------------------------------------------------------
.text:00000769
.text:00000769 loc_769:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+5Dj
.text:00000769                 mov     eax, [ebp+var_2C]
.text:0000076C                 movzx   ecx, word ptr [eax]
.text:0000076F                 cmp     ecx, 13h
.text:00000772                 jz      short loc_77B
.text:00000774                 mov     eax, 80070057h
.text:00000779                 jmp     short loc_7E7
.text:0000077B ; ---------------------------------------------------------------------------
.text:0000077B
.text:0000077B loc_77B:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+6Aj
.text:0000077B                 mov     edx, [ebp+var_2C]
.text:0000077E                 mov     eax, [edx+8]
.text:00000781                 mov     [ebp+var_34], eax
.text:00000784                 mov     ecx, [ebp+var_30]
.text:00000787                 mov     [ebp+var_38], ecx
.text:0000078A                 mov     edx, [ebp+var_38]
.text:0000078D                 sub     edx, 8
.text:00000790                 mov     [ebp+var_38], edx
.text:00000793                 cmp     [ebp+var_38], 7 ; switch 8 cases
.text:00000797                 ja      short $LN1      ; jumptable 0000079C default case
.text:00000799                 mov     eax, [ebp+var_38]
.text:0000079C                 jmp     ds:$LN20[eax*4] ; switch jump
.text:000007A3 ; ---------------------------------------------------------------------------
.text:000007A3
.text:000007A3 $LN7:                                   ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+94j
.text:000007A3                                         ; DATA XREF: .text:$LN20o
.text:000007A3                 mov     ecx, [ebp+var_34] ; jumptable 0000079C case 3
.text:000007A6                 mov     [ebp+var_C], ecx
.text:000007A9                 jmp     short loc_7D4
.text:000007AB ; ---------------------------------------------------------------------------
.text:000007AB
.text:000007AB $LN6:                                   ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+94j
.text:000007AB                                         ; DATA XREF: .text:$LN20o
.text:000007AB                 mov     edx, [ebp+var_34] ; jumptable 0000079C case 0
.text:000007AE                 mov     [ebp+var_18], edx
.text:000007B1                 jmp     short loc_7D4
.text:000007B3 ; ---------------------------------------------------------------------------
.text:000007B3
.text:000007B3 $LN5:                                   ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+94j
.text:000007B3                                         ; DATA XREF: .text:$LN20o
.text:000007B3                 mov     eax, [ebp+var_34] ; jumptable 0000079C case 2
.text:000007B6                 mov     [ebp+var_10], eax
.text:000007B9                 jmp     short loc_7D4
.text:000007BB ; ---------------------------------------------------------------------------
.text:000007BB
.text:000007BB $LN4:                                   ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+94j
.text:000007BB                                         ; DATA XREF: .text:$LN20o
.text:000007BB                 mov     ecx, [ebp+var_34] ; jumptable 0000079C case 4
.text:000007BE                 mov     [ebp+var_1C], ecx
.text:000007C1                 jmp     short loc_7D4
.text:000007C3 ; ---------------------------------------------------------------------------
.text:000007C3
.text:000007C3 $LN3:                                   ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+94j
.text:000007C3                                         ; DATA XREF: .text:$LN20o
.text:000007C3                 mov     edx, [ebp+var_34] ; jumptable 0000079C case 7
.text:000007C6                 mov     [ebp+var_20], edx
.text:000007C9                 jmp     short loc_7D4
.text:000007CB ; ---------------------------------------------------------------------------
.text:000007CB
.text:000007CB $LN2:                                   ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+94j
.text:000007CB                                         ; DATA XREF: .text:$LN20o
.text:000007CB                 jmp     short loc_7D4   ; jumptable 0000079C case 5
.text:000007CD ; ---------------------------------------------------------------------------
.text:000007CD
.text:000007CD $LN1:                                   ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+8Fj
.text:000007CD                                         ; NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+94j
.text:000007CD                                         ; DATA XREF: ...
.text:000007CD                 mov     eax, 80070057h  ; jumptable 0000079C default case
.text:000007D2                 jmp     short loc_7E7
.text:000007D4 ; ---------------------------------------------------------------------------
.text:000007D4
.text:000007D4 loc_7D4:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+A1j
.text:000007D4                                         ; NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+A9j ...
.text:000007D4                 jmp     loc_734
.text:000007D9 ; ---------------------------------------------------------------------------
.text:000007D9
.text:000007D9 loc_7D9:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+3Bj
.text:000007D9                 lea     eax, [ebp+var_20]
.text:000007DC                 push    eax             ; struct NCompress::NDeflate::NEncoder::CEncProps *
.text:000007DD                 mov     ecx, [ebp+var_4] ; this
.text:000007E0                 call    ?SetProps@CCoder@NEncoder@NDeflate@NCompress@@QAEXPBUCEncProps@234@@Z ; NCompress::NDeflate::NEncoder::CCoder::SetProps(NCompress::NDeflate::NEncoder::CEncProps const *)
.text:000007E5                 xor     eax, eax
.text:000007E7
.text:000007E7 loc_7E7:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+71j
.text:000007E7                                         ; NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+CAj
.text:000007E7                 push    edx
.text:000007E8                 mov     ecx, ebp
.text:000007EA                 push    eax
.text:000007EB                 lea     edx, $LN19
.text:000007F1                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000007F6                 pop     eax
.text:000007F7                 pop     edx
.text:000007F8                 pop     edi
.text:000007F9                 add     esp, 38h
.text:000007FC                 cmp     ebp, esp
.text:000007FE                 call    __RTC_CheckEsp
.text:00000803                 mov     esp, ebp
.text:00000805                 pop     ebp
.text:00000806                 retn    0Ch
.text:00000806 ?BaseSetEncoderProperties2@CCoder@NEncoder@NDeflate@NCompress@@QAEJPBKPBUtagPROPVARIANT@@I@Z endp
.text:00000806
.text:00000806 ; ---------------------------------------------------------------------------
.text:00000809                 align 4
.text:0000080C $LN19           dd 1                    ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+E3o
.text:00000810                 dd offset $LN18
.text:00000814 $LN18           dd 0FFFFFFE0h, 18h      ; DATA XREF: .text:00000810o
.text:0000081C                 dd offset $LN17         ; "props"
.text:00000820 $LN17           db 'props',0            ; DATA XREF: .text:0000081Co
.text:00000826                 align 4
.text:00000828 $LN20           dd offset $LN6          ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+94r
.text:00000828                 dd offset $LN1          ; jump table for switch statement
.text:00000828                 dd offset $LN5
.text:00000828                 dd offset $LN7
.text:00000828                 dd offset $LN4
.text:00000828                 dd offset $LN2
.text:00000828                 dd offset $LN1
.text:00000828                 dd offset $LN3
.text:00000848
.text:00000848 ; =============== S U B R O U T I N E =======================================
.text:00000848
.text:00000848 ; Attributes: bp-based frame
.text:00000848
.text:00000848 ; void __thiscall NCompress::NDeflate::NEncoder::CCoder::Free(NCompress::NDeflate::NEncoder::CCoder *__hidden this)
.text:00000848                 public ?Free@CCoder@NEncoder@NDeflate@NCompress@@QAEXXZ
.text:00000848 ?Free@CCoder@NEncoder@NDeflate@NCompress@@QAEXXZ proc near
.text:00000848                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::~CCoder(void)+37p
.text:00000848
.text:00000848 var_4           = dword ptr -4
.text:00000848
.text:00000848                 push    ebp
.text:00000849                 mov     ebp, esp
.text:0000084B                 push    ecx
.text:0000084C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000853                 mov     [ebp+var_4], ecx
.text:00000856                 mov     eax, [ebp+var_4]
.text:00000859                 mov     ecx, [eax+4B0h]
.text:0000085F                 push    ecx
.text:00000860                 call    _MidFree@4      ; MidFree(x)
.text:00000865                 mov     edx, [ebp+var_4]
.text:00000868                 mov     dword ptr [edx+4B0h], 0
.text:00000872                 mov     eax, [ebp+var_4]
.text:00000875                 mov     ecx, [eax+4B4h]
.text:0000087B                 push    ecx
.text:0000087C                 call    _MyFree@4       ; MyFree(x)
.text:00000881                 mov     edx, [ebp+var_4]
.text:00000884                 mov     dword ptr [edx+4B4h], 0
.text:0000088E                 mov     eax, [ebp+var_4]
.text:00000891                 mov     ecx, [eax+4A0h]
.text:00000897                 push    ecx
.text:00000898                 call    _MyFree@4       ; MyFree(x)
.text:0000089D                 mov     edx, [ebp+var_4]
.text:000008A0                 mov     dword ptr [edx+4A0h], 0
.text:000008AA                 mov     eax, [ebp+var_4]
.text:000008AD                 mov     ecx, [eax+12D8h]
.text:000008B3                 push    ecx
.text:000008B4                 call    _MyFree@4       ; MyFree(x)
.text:000008B9                 mov     edx, [ebp+var_4]
.text:000008BC                 mov     dword ptr [edx+12D8h], 0
.text:000008C6                 add     esp, 4
.text:000008C9                 cmp     ebp, esp
.text:000008CB                 call    __RTC_CheckEsp
.text:000008D0                 mov     esp, ebp
.text:000008D2                 pop     ebp
.text:000008D3                 retn
.text:000008D3 ?Free@CCoder@NEncoder@NDeflate@NCompress@@QAEXXZ endp
.text:000008D3
.text:000008D3 ; ---------------------------------------------------------------------------
.text:000008D4                 align 8
.text:000008D8
.text:000008D8 ; =============== S U B R O U T I N E =======================================
.text:000008D8
.text:000008D8 ; Attributes: bp-based frame
.text:000008D8
.text:000008D8 ; _DWORD __thiscall NCompress::NDeflate::NEncoder::CCoder::~CCoder(NCompress::NDeflate::NEncoder::CCoder *__hidden this)
.text:000008D8                 public ??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ
.text:000008D8 ??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ proc near
.text:000008D8
.text:000008D8 var_10          = dword ptr -10h
.text:000008D8 var_C           = dword ptr -0Ch
.text:000008D8 var_4           = dword ptr -4
.text:000008D8
.text:000008D8                 push    ebp
.text:000008D9                 mov     ebp, esp
.text:000008DB                 push    0FFFFFFFFh
.text:000008DD                 push    offset __ehhandler$??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ
.text:000008E2                 mov     eax, large fs:0
.text:000008E8                 push    eax
.text:000008E9                 push    ecx
.text:000008EA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000008F1                 mov     eax, dword ptr ds:___security_cookie
.text:000008F6                 xor     eax, ebp
.text:000008F8                 push    eax
.text:000008F9                 lea     eax, [ebp+var_C]
.text:000008FC                 mov     large fs:0, eax
.text:00000902                 mov     [ebp+var_10], ecx
.text:00000905                 mov     [ebp+var_4], 0
.text:0000090C                 mov     ecx, [ebp+var_10] ; this
.text:0000090F                 call    ?Free@CCoder@NEncoder@NDeflate@NCompress@@QAEXXZ ; NCompress::NDeflate::NEncoder::CCoder::Free(void)
.text:00000914                 push    offset _g_Alloc
.text:00000919                 mov     eax, [ebp+var_10]
.text:0000091C                 push    eax
.text:0000091D                 call    _MatchFinder_Free@8 ; MatchFinder_Free(x,x)
.text:00000922                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000929                 mov     ecx, [ebp+var_10]
.text:0000092C                 add     ecx, 468h       ; this
.text:00000932                 call    ??1CBitlEncoder@@QAE@XZ ; CBitlEncoder::~CBitlEncoder(void)
.text:00000937                 mov     ecx, [ebp+var_C]
.text:0000093A                 mov     large fs:0, ecx
.text:00000941                 pop     ecx
.text:00000942                 add     esp, 10h
.text:00000945                 cmp     ebp, esp
.text:00000947                 call    __RTC_CheckEsp
.text:0000094C                 mov     esp, ebp
.text:0000094E                 pop     ebp
.text:0000094F                 retn
.text:0000094F ??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ endp
.text:0000094F
.text:0000094F ; ---------------------------------------------------------------------------
.text:00000950                 db 8 dup(0CCh)
.text:00000958
.text:00000958 ; =============== S U B R O U T I N E =======================================
.text:00000958
.text:00000958 ; Attributes: bp-based frame
.text:00000958
.text:00000958 ; void __thiscall NCompress::NDeflate::NEncoder::CCoder::GetMatches(NCompress::NDeflate::NEncoder::CCoder *__hidden this)
.text:00000958                 public ?GetMatches@CCoder@NEncoder@NDeflate@NCompress@@QAEXXZ
.text:00000958 ?GetMatches@CCoder@NEncoder@NDeflate@NCompress@@QAEXXZ proc near
.text:00000958                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+ABp
.text:00000958                                         ; NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+25Ap ...
.text:00000958
.text:00000958 var_848         = dword ptr -848h
.text:00000958 var_844         = dword ptr -844h
.text:00000958 var_840         = dword ptr -840h
.text:00000958 var_83C         = dword ptr -83Ch
.text:00000958 var_838         = dword ptr -838h
.text:00000958 var_834         = dword ptr -834h
.text:00000958 var_830         = dword ptr -830h
.text:00000958 var_82C         = dword ptr -82Ch
.text:00000958 var_828         = word ptr -828h
.text:00000958 var_824         = word ptr -824h
.text:00000958 var_8           = dword ptr -8
.text:00000958 var_4           = dword ptr -4
.text:00000958
.text:00000958                 push    ebp
.text:00000959                 mov     ebp, esp
.text:0000095B                 sub     esp, 848h
.text:00000961                 push    edi
.text:00000962                 push    ecx
.text:00000963                 lea     edi, [ebp+var_848]
.text:00000969                 mov     ecx, 212h
.text:0000096E                 mov     eax, 0CCCCCCCCh
.text:00000973                 rep stosd
.text:00000975                 pop     ecx
.text:00000976                 mov     eax, dword ptr ds:___security_cookie
.text:0000097B                 xor     eax, ebp
.text:0000097D                 mov     [ebp+var_4], eax
.text:00000980                 mov     [ebp+var_8], ecx
.text:00000983                 mov     eax, [ebp+var_8]
.text:00000986                 movzx   ecx, byte ptr [eax+4C5h]
.text:0000098D                 test    ecx, ecx
.text:0000098F                 jz      short loc_9E4
.text:00000991                 mov     edx, [ebp+var_8]
.text:00000994                 mov     eax, [edx+4B8h]
.text:0000099A                 mov     ecx, [ebp+var_8]
.text:0000099D                 mov     edx, [ecx+4B0h]
.text:000009A3                 lea     eax, [edx+eax*2]
.text:000009A6                 mov     ecx, [ebp+var_8]
.text:000009A9                 mov     [ecx+4A4h], eax
.text:000009AF                 mov     edx, [ebp+var_8]
.text:000009B2                 movzx   eax, byte ptr [edx+504h]
.text:000009B9                 test    eax, eax
.text:000009BB                 jz      short loc_9E4
.text:000009BD                 mov     ecx, [ebp+var_8]
.text:000009C0                 mov     edx, [ecx+4A4h]
.text:000009C6                 movzx   eax, word ptr [edx]
.text:000009C9                 mov     ecx, [ebp+var_8]
.text:000009CC                 mov     edx, [ecx+4B8h]
.text:000009D2                 lea     eax, [eax+edx+1]
.text:000009D6                 mov     ecx, [ebp+var_8]
.text:000009D9                 mov     [ecx+4B8h], eax
.text:000009DF                 jmp     loc_C07
.text:000009E4 ; ---------------------------------------------------------------------------
.text:000009E4
.text:000009E4 loc_9E4:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)+37j
.text:000009E4                                         ; NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)+63j
.text:000009E4                 mov     edx, [ebp+var_8]
.text:000009E7                 movzx   eax, byte ptr [edx+4ADh]
.text:000009EE                 test    eax, eax
.text:000009F0                 jz      short loc_A0A
.text:000009F2                 lea     ecx, [ebp+var_828]
.text:000009F8                 push    ecx
.text:000009F9                 mov     edx, [ebp+var_8]
.text:000009FC                 push    edx
.text:000009FD                 call    _Bt3Zip_MatchFinder_GetMatches@8 ; Bt3Zip_MatchFinder_GetMatches(x,x)
.text:00000A02                 mov     [ebp+var_848], eax
.text:00000A08                 jmp     short loc_A20
.text:00000A0A ; ---------------------------------------------------------------------------
.text:00000A0A
.text:00000A0A loc_A0A:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)+98j
.text:00000A0A                 lea     eax, [ebp+var_828]
.text:00000A10                 push    eax
.text:00000A11                 mov     ecx, [ebp+var_8]
.text:00000A14                 push    ecx
.text:00000A15                 call    _Hc3Zip_MatchFinder_GetMatches@8 ; Hc3Zip_MatchFinder_GetMatches(x,x)
.text:00000A1A                 mov     [ebp+var_848], eax
.text:00000A20
.text:00000A20 loc_A20:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)+B0j
.text:00000A20                 mov     edx, [ebp+var_848]
.text:00000A26                 mov     [ebp+var_830], edx
.text:00000A2C                 mov     eax, [ebp+var_8]
.text:00000A2F                 mov     ecx, [eax+4A4h]
.text:00000A35                 mov     dx, word ptr [ebp+var_830]
.text:00000A3C                 mov     [ecx], dx
.text:00000A3F                 cmp     [ebp+var_830], 0
.text:00000A46                 jbe     loc_BBA
.text:00000A4C                 mov     [ebp+var_834], 0
.text:00000A56                 jmp     short loc_A67
.text:00000A58 ; ---------------------------------------------------------------------------
.text:00000A58
.text:00000A58 loc_A58:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)+161j
.text:00000A58                 mov     eax, [ebp+var_834]
.text:00000A5E                 add     eax, 2
.text:00000A61                 mov     [ebp+var_834], eax
.text:00000A67
.text:00000A67 loc_A67:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)+FEj
.text:00000A67                 mov     ecx, [ebp+var_834]
.text:00000A6D                 cmp     ecx, [ebp+var_830]
.text:00000A73                 jnb     short loc_ABB
.text:00000A75                 mov     edx, [ebp+var_8]
.text:00000A78                 mov     eax, [edx+4A4h]
.text:00000A7E                 mov     ecx, [ebp+var_834]
.text:00000A84                 mov     edx, [ebp+var_834]
.text:00000A8A                 mov     dx, [ebp+edx*4+var_828]
.text:00000A92                 mov     [eax+ecx*2+2], dx
.text:00000A97                 mov     eax, [ebp+var_8]
.text:00000A9A                 mov     ecx, [eax+4A4h]
.text:00000AA0                 mov     edx, [ebp+var_834]
.text:00000AA6                 mov     eax, [ebp+var_834]
.text:00000AAC                 mov     ax, [ebp+eax*4+var_824]
.text:00000AB4                 mov     [ecx+edx*2+4], ax
.text:00000AB9                 jmp     short loc_A58
.text:00000ABB ; ---------------------------------------------------------------------------
.text:00000ABB
.text:00000ABB loc_ABB:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)+11Bj
.text:00000ABB                 mov     ecx, [ebp+var_830]
.text:00000AC1                 mov     edx, [ebp+ecx*4+var_830]
.text:00000AC8                 mov     [ebp+var_838], edx
.text:00000ACE                 mov     eax, [ebp+var_8]
.text:00000AD1                 mov     ecx, [ebp+var_838]
.text:00000AD7                 cmp     ecx, [eax+4A8h]
.text:00000ADD                 jnz     loc_BBA
.text:00000AE3                 mov     edx, [ebp+var_8]
.text:00000AE6                 mov     eax, [ebp+var_8]
.text:00000AE9                 mov     ecx, [edx+4A8h]
.text:00000AEF                 cmp     ecx, [eax+4D0h]
.text:00000AF5                 jz      loc_BBA
.text:00000AFB                 mov     edx, [ebp+var_8]
.text:00000AFE                 mov     eax, [ebp+var_8]
.text:00000B01                 mov     ecx, [edx+0Ch]
.text:00000B04                 sub     ecx, [eax+4]
.text:00000B07                 add     ecx, 1
.text:00000B0A                 mov     [ebp+var_83C], ecx
.text:00000B10                 mov     edx, [ebp+var_8]
.text:00000B13                 mov     eax, [edx]
.text:00000B15                 sub     eax, 1
.text:00000B18                 mov     [ebp+var_840], eax
.text:00000B1E                 mov     ecx, [ebp+var_830]
.text:00000B24                 mov     edx, [ebp+ecx*4+var_82C]
.text:00000B2B                 add     edx, 1
.text:00000B2E                 mov     eax, [ebp+var_840]
.text:00000B34                 sub     eax, edx
.text:00000B36                 mov     [ebp+var_844], eax
.text:00000B3C                 mov     ecx, [ebp+var_8]
.text:00000B3F                 mov     edx, [ebp+var_83C]
.text:00000B45                 cmp     edx, [ecx+4D0h]
.text:00000B4B                 jbe     short loc_B5C
.text:00000B4D                 mov     eax, [ebp+var_8]
.text:00000B50                 mov     ecx, [eax+4D0h]
.text:00000B56                 mov     [ebp+var_83C], ecx
.text:00000B5C
.text:00000B5C loc_B5C:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)+1F3j
.text:00000B5C                 jmp     short loc_B6D
.text:00000B5E ; ---------------------------------------------------------------------------
.text:00000B5E
.text:00000B5E loc_B5E:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)+245j
.text:00000B5E                 mov     edx, [ebp+var_838]
.text:00000B64                 add     edx, 1
.text:00000B67                 mov     [ebp+var_838], edx
.text:00000B6D
.text:00000B6D loc_B6D:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetMatches(void):loc_B5Cj
.text:00000B6D                 mov     eax, [ebp+var_838]
.text:00000B73                 cmp     eax, [ebp+var_83C]
.text:00000B79                 jnb     short loc_B9F
.text:00000B7B                 mov     ecx, [ebp+var_840]
.text:00000B81                 add     ecx, [ebp+var_838]
.text:00000B87                 movzx   edx, byte ptr [ecx]
.text:00000B8A                 mov     eax, [ebp+var_844]
.text:00000B90                 add     eax, [ebp+var_838]
.text:00000B96                 movzx   ecx, byte ptr [eax]
.text:00000B99                 cmp     edx, ecx
.text:00000B9B                 jnz     short loc_B9F
.text:00000B9D                 jmp     short loc_B5E
.text:00000B9F ; ---------------------------------------------------------------------------
.text:00000B9F
.text:00000B9F loc_B9F:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)+221j
.text:00000B9F                                         ; NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)+243j
.text:00000B9F                 mov     edx, [ebp+var_8]
.text:00000BA2                 mov     eax, [edx+4A4h]
.text:00000BA8                 mov     ecx, [ebp+var_834]
.text:00000BAE                 mov     dx, word ptr [ebp+var_838]
.text:00000BB5                 mov     [eax+ecx*2-2], dx
.text:00000BBA
.text:00000BBA loc_BBA:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)+EEj
.text:00000BBA                                         ; NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)+185j ...
.text:00000BBA                 mov     eax, [ebp+var_8]
.text:00000BBD                 movzx   ecx, byte ptr [eax+4C5h]
.text:00000BC4                 test    ecx, ecx
.text:00000BC6                 jz      short loc_BE4
.text:00000BC8                 mov     edx, [ebp+var_8]
.text:00000BCB                 mov     eax, [edx+4B8h]
.text:00000BD1                 mov     ecx, [ebp+var_830]
.text:00000BD7                 lea     edx, [ecx+eax+1]
.text:00000BDB                 mov     eax, [ebp+var_8]
.text:00000BDE                 mov     [eax+4B8h], edx
.text:00000BE4
.text:00000BE4 loc_BE4:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)+26Ej
.text:00000BE4                 mov     ecx, [ebp+var_8]
.text:00000BE7                 movzx   edx, byte ptr [ecx+504h]
.text:00000BEE                 test    edx, edx
.text:00000BF0                 jnz     short loc_C07
.text:00000BF2                 mov     eax, [ebp+var_8]
.text:00000BF5                 mov     ecx, [eax+508h]
.text:00000BFB                 add     ecx, 1
.text:00000BFE                 mov     edx, [ebp+var_8]
.text:00000C01                 mov     [edx+508h], ecx
.text:00000C07
.text:00000C07 loc_C07:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)+87j
.text:00000C07                                         ; NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)+298j
.text:00000C07                 push    edx
.text:00000C08                 mov     ecx, ebp
.text:00000C0A                 push    eax
.text:00000C0B                 lea     edx, $LN20_0
.text:00000C11                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000C16                 pop     eax
.text:00000C17                 pop     edx
.text:00000C18                 pop     edi
.text:00000C19                 mov     ecx, [ebp+var_4]
.text:00000C1C                 xor     ecx, ebp
.text:00000C1E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000C23                 add     esp, 848h
.text:00000C29                 cmp     ebp, esp
.text:00000C2B                 call    __RTC_CheckEsp
.text:00000C30                 mov     esp, ebp
.text:00000C32                 pop     ebp
.text:00000C33                 retn
.text:00000C33 ?GetMatches@CCoder@NEncoder@NDeflate@NCompress@@QAEXXZ endp
.text:00000C33
.text:00000C33 ; ---------------------------------------------------------------------------
.text:00000C34 $LN20_0         dd 1                    ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)+2B3o
.text:00000C38                 dd offset $LN19_0
.text:00000C3C $LN19_0         dd 0FFFFF7D8h, 81Ch     ; DATA XREF: .text:00000C38o
.text:00000C44                 dd offset $LN18_0       ; "distanceTmp"
.text:00000C48 $LN18_0         db 'distanceTmp',0      ; DATA XREF: .text:00000C44o
.text:00000C54                 align 8
.text:00000C58
.text:00000C58 ; =============== S U B R O U T I N E =======================================
.text:00000C58
.text:00000C58 ; Attributes: bp-based frame
.text:00000C58
.text:00000C58 ; void __thiscall NCompress::NDeflate::NEncoder::CCoder::MovePos(NCompress::NDeflate::NEncoder::CCoder *this, unsigned int)
.text:00000C58                 public ?MovePos@CCoder@NEncoder@NDeflate@NCompress@@QAEXI@Z
.text:00000C58 ?MovePos@CCoder@NEncoder@NDeflate@NCompress@@QAEXI@Z proc near
.text:00000C58                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+114p
.text:00000C58                                         ; NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+307p ...
.text:00000C58
.text:00000C58 var_4           = dword ptr -4
.text:00000C58 arg_0           = dword ptr  8
.text:00000C58
.text:00000C58                 push    ebp
.text:00000C59                 mov     ebp, esp
.text:00000C5B                 push    ecx
.text:00000C5C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C63                 mov     [ebp+var_4], ecx
.text:00000C66                 mov     eax, [ebp+var_4]
.text:00000C69                 movzx   ecx, byte ptr [eax+504h]
.text:00000C70                 test    ecx, ecx
.text:00000C72                 jnz     short loc_CB9
.text:00000C74                 cmp     [ebp+arg_0], 0
.text:00000C78                 jbe     short loc_CB9
.text:00000C7A                 mov     edx, [ebp+var_4]
.text:00000C7D                 movzx   eax, byte ptr [edx+4ADh]
.text:00000C84                 test    eax, eax
.text:00000C86                 jz      short loc_C97
.text:00000C88                 mov     ecx, [ebp+arg_0]
.text:00000C8B                 push    ecx
.text:00000C8C                 mov     edx, [ebp+var_4]
.text:00000C8F                 push    edx
.text:00000C90                 call    _Bt3Zip_MatchFinder_Skip@8 ; Bt3Zip_MatchFinder_Skip(x,x)
.text:00000C95                 jmp     short loc_CA4
.text:00000C97 ; ---------------------------------------------------------------------------
.text:00000C97
.text:00000C97 loc_C97:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::MovePos(uint)+2Ej
.text:00000C97                 mov     eax, [ebp+arg_0]
.text:00000C9A                 push    eax
.text:00000C9B                 mov     ecx, [ebp+var_4]
.text:00000C9E                 push    ecx
.text:00000C9F                 call    _Hc3Zip_MatchFinder_Skip@8 ; Hc3Zip_MatchFinder_Skip(x,x)
.text:00000CA4
.text:00000CA4 loc_CA4:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::MovePos(uint)+3Dj
.text:00000CA4                 mov     edx, [ebp+var_4]
.text:00000CA7                 mov     eax, [edx+508h]
.text:00000CAD                 add     eax, [ebp+arg_0]
.text:00000CB0                 mov     ecx, [ebp+var_4]
.text:00000CB3                 mov     [ecx+508h], eax
.text:00000CB9
.text:00000CB9 loc_CB9:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::MovePos(uint)+1Aj
.text:00000CB9                                         ; NCompress::NDeflate::NEncoder::CCoder::MovePos(uint)+20j
.text:00000CB9                 add     esp, 4
.text:00000CBC                 cmp     ebp, esp
.text:00000CBE                 call    __RTC_CheckEsp
.text:00000CC3                 mov     esp, ebp
.text:00000CC5                 pop     ebp
.text:00000CC6                 retn    4
.text:00000CC6 ?MovePos@CCoder@NEncoder@NDeflate@NCompress@@QAEXI@Z endp
.text:00000CC6
.text:00000CC6 ; ---------------------------------------------------------------------------
.text:00000CC9                 db 0Fh dup(0CCh)
.text:00000CD8
.text:00000CD8 ; =============== S U B R O U T I N E =======================================
.text:00000CD8
.text:00000CD8 ; Attributes: bp-based frame
.text:00000CD8
.text:00000CD8 ; unsigned int __thiscall NCompress::NDeflate::NEncoder::CCoder::Backward(NCompress::NDeflate::NEncoder::CCoder *this, unsigned int *, unsigned int)
.text:00000CD8                 public ?Backward@CCoder@NEncoder@NDeflate@NCompress@@QAEIAAII@Z
.text:00000CD8 ?Backward@CCoder@NEncoder@NDeflate@NCompress@@QAEIAAII@Z proc near
.text:00000CD8                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+24Dp
.text:00000CD8                                         ; NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+2B5p
.text:00000CD8
.text:00000CD8 var_14          = dword ptr -14h
.text:00000CD8 var_10          = dword ptr -10h
.text:00000CD8 var_C           = dword ptr -0Ch
.text:00000CD8 var_8           = dword ptr -8
.text:00000CD8 var_4           = dword ptr -4
.text:00000CD8 arg_0           = dword ptr  8
.text:00000CD8 arg_4           = dword ptr  0Ch
.text:00000CD8
.text:00000CD8                 push    ebp
.text:00000CD9                 mov     ebp, esp
.text:00000CDB                 sub     esp, 14h
.text:00000CDE                 mov     eax, 0CCCCCCCCh
.text:00000CE3                 mov     [ebp+var_14], eax
.text:00000CE6                 mov     [ebp+var_10], eax
.text:00000CE9                 mov     [ebp+var_C], eax
.text:00000CEC                 mov     [ebp+var_8], eax
.text:00000CEF                 mov     [ebp+var_4], eax
.text:00000CF2                 mov     [ebp+var_4], ecx
.text:00000CF5                 mov     eax, [ebp+var_4]
.text:00000CF8                 mov     ecx, [ebp+arg_4]
.text:00000CFB                 mov     [eax+50Ch], ecx
.text:00000D01                 mov     edx, [ebp+arg_4]
.text:00000D04                 mov     eax, [ebp+var_4]
.text:00000D07                 movzx   ecx, word ptr [eax+edx*8+12E0h]
.text:00000D0F                 mov     [ebp+var_8], ecx
.text:00000D12                 mov     edx, [ebp+arg_4]
.text:00000D15                 mov     eax, [ebp+var_4]
.text:00000D18                 mov     cx, [eax+edx*8+12E2h]
.text:00000D20                 mov     word ptr [ebp+var_C], cx
.text:00000D24
.text:00000D24 loc_D24:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::Backward(uint &,uint)+ABj
.text:00000D24                 mov     edx, [ebp+var_8]
.text:00000D27                 mov     [ebp+var_10], edx
.text:00000D2A                 mov     ax, word ptr [ebp+var_C]
.text:00000D2E                 mov     word ptr [ebp+var_14], ax
.text:00000D32                 mov     ecx, [ebp+var_10]
.text:00000D35                 mov     edx, [ebp+var_4]
.text:00000D38                 mov     ax, [edx+ecx*8+12E2h]
.text:00000D40                 mov     word ptr [ebp+var_C], ax
.text:00000D44                 mov     ecx, [ebp+var_10]
.text:00000D47                 mov     edx, [ebp+var_4]
.text:00000D4A                 movzx   eax, word ptr [edx+ecx*8+12E0h]
.text:00000D52                 mov     [ebp+var_8], eax
.text:00000D55                 mov     ecx, [ebp+var_10]
.text:00000D58                 mov     edx, [ebp+var_4]
.text:00000D5B                 mov     ax, word ptr [ebp+var_14]
.text:00000D5F                 mov     [edx+ecx*8+12E2h], ax
.text:00000D67                 mov     ecx, [ebp+var_10]
.text:00000D6A                 mov     edx, [ebp+var_4]
.text:00000D6D                 mov     ax, word ptr [ebp+arg_4]
.text:00000D71                 mov     [edx+ecx*8+12E0h], ax
.text:00000D79                 mov     ecx, [ebp+var_10]
.text:00000D7C                 mov     [ebp+arg_4], ecx
.text:00000D7F                 cmp     [ebp+arg_4], 0
.text:00000D83                 ja      short loc_D24
.text:00000D85                 mov     edx, [ebp+var_4]
.text:00000D88                 movzx   eax, word ptr [edx+12E2h]
.text:00000D8F                 mov     ecx, [ebp+arg_0]
.text:00000D92                 mov     [ecx], eax
.text:00000D94                 mov     edx, [ebp+var_4]
.text:00000D97                 movzx   eax, word ptr [edx+12E0h]
.text:00000D9E                 mov     ecx, [ebp+var_4]
.text:00000DA1                 mov     [ecx+510h], eax
.text:00000DA7                 mov     edx, [ebp+var_4]
.text:00000DAA                 mov     eax, [edx+510h]
.text:00000DB0                 mov     esp, ebp
.text:00000DB2                 pop     ebp
.text:00000DB3                 retn    8
.text:00000DB3 ?Backward@CCoder@NEncoder@NDeflate@NCompress@@QAEIAAII@Z endp
.text:00000DB3
.text:00000DB3 ; ---------------------------------------------------------------------------
.text:00000DB6                 align 4
.text:00000DB8
.text:00000DB8 ; =============== S U B R O U T I N E =======================================
.text:00000DB8
.text:00000DB8 ; Attributes: bp-based frame
.text:00000DB8
.text:00000DB8 ; unsigned int __thiscall NCompress::NDeflate::NEncoder::CCoder::GetOptimal(NCompress::NDeflate::NEncoder::CCoder *this, unsigned int *)
.text:00000DB8                 public ?GetOptimal@CCoder@NEncoder@NDeflate@NCompress@@QAEIAAI@Z
.text:00000DB8 ?GetOptimal@CCoder@NEncoder@NDeflate@NCompress@@QAEIAAI@Z proc near
.text:00000DB8                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryBlock(void)+FEp
.text:00000DB8
.text:00000DB8 var_50          = dword ptr -50h
.text:00000DB8 var_4C          = dword ptr -4Ch
.text:00000DB8 var_48          = dword ptr -48h
.text:00000DB8 var_44          = dword ptr -44h
.text:00000DB8 var_40          = dword ptr -40h
.text:00000DB8 var_3C          = dword ptr -3Ch
.text:00000DB8 var_38          = dword ptr -38h
.text:00000DB8 var_34          = dword ptr -34h
.text:00000DB8 var_30          = dword ptr -30h
.text:00000DB8 var_2C          = dword ptr -2Ch
.text:00000DB8 var_28          = dword ptr -28h
.text:00000DB8 var_24          = dword ptr -24h
.text:00000DB8 var_20          = dword ptr -20h
.text:00000DB8 var_1C          = dword ptr -1Ch
.text:00000DB8 var_18          = dword ptr -18h
.text:00000DB8 var_14          = dword ptr -14h
.text:00000DB8 var_10          = dword ptr -10h
.text:00000DB8 var_C           = dword ptr -0Ch
.text:00000DB8 var_8           = dword ptr -8
.text:00000DB8 var_4           = dword ptr -4
.text:00000DB8 arg_0           = dword ptr  8
.text:00000DB8
.text:00000DB8                 push    ebp
.text:00000DB9                 mov     ebp, esp
.text:00000DBB                 sub     esp, 50h
.text:00000DBE                 push    esi
.text:00000DBF                 push    edi
.text:00000DC0                 push    ecx
.text:00000DC1                 lea     edi, [ebp+var_50]
.text:00000DC4                 mov     ecx, 14h
.text:00000DC9                 mov     eax, 0CCCCCCCCh
.text:00000DCE                 rep stosd
.text:00000DD0                 pop     ecx
.text:00000DD1                 mov     [ebp+var_4], ecx
.text:00000DD4                 mov     eax, [ebp+var_4]
.text:00000DD7                 mov     ecx, [ebp+var_4]
.text:00000DDA                 mov     edx, [eax+50Ch]
.text:00000DE0                 cmp     edx, [ecx+510h]
.text:00000DE6                 jz      short loc_E46
.text:00000DE8                 mov     eax, [ebp+var_4]
.text:00000DEB                 mov     ecx, [eax+510h]
.text:00000DF1                 mov     edx, [ebp+var_4]
.text:00000DF4                 movzx   eax, word ptr [edx+ecx*8+12E0h]
.text:00000DFC                 mov     ecx, [ebp+var_4]
.text:00000DFF                 sub     eax, [ecx+510h]
.text:00000E05                 mov     [ebp+var_8], eax
.text:00000E08                 mov     edx, [ebp+var_4]
.text:00000E0B                 mov     eax, [edx+510h]
.text:00000E11                 mov     ecx, [ebp+var_4]
.text:00000E14                 movzx   edx, word ptr [ecx+eax*8+12E2h]
.text:00000E1C                 mov     eax, [ebp+arg_0]
.text:00000E1F                 mov     [eax], edx
.text:00000E21                 mov     ecx, [ebp+var_4]
.text:00000E24                 mov     edx, [ecx+510h]
.text:00000E2A                 mov     eax, [ebp+var_4]
.text:00000E2D                 movzx   ecx, word ptr [eax+edx*8+12E0h]
.text:00000E35                 mov     edx, [ebp+var_4]
.text:00000E38                 mov     [edx+510h], ecx
.text:00000E3E                 mov     eax, [ebp+var_8]
.text:00000E41                 jmp     loc_125F
.text:00000E46 ; ---------------------------------------------------------------------------
.text:00000E46
.text:00000E46 loc_E46:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+2Ej
.text:00000E46                 mov     eax, [ebp+var_4]
.text:00000E49                 mov     dword ptr [eax+50Ch], 0
.text:00000E53                 mov     ecx, [ebp+var_4]
.text:00000E56                 mov     dword ptr [ecx+510h], 0
.text:00000E60                 mov     ecx, [ebp+var_4] ; this
.text:00000E63                 call    ?GetMatches@CCoder@NEncoder@NDeflate@NCompress@@QAEXXZ ; NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)
.text:00000E68                 mov     edx, [ebp+var_4]
.text:00000E6B                 mov     eax, [edx+4A4h]
.text:00000E71                 movzx   ecx, word ptr [eax]
.text:00000E74                 mov     [ebp+var_C], ecx
.text:00000E77                 cmp     [ebp+var_C], 0
.text:00000E7B                 jnz     short loc_E87
.text:00000E7D                 mov     eax, 1
.text:00000E82                 jmp     loc_125F
.text:00000E87 ; ---------------------------------------------------------------------------
.text:00000E87
.text:00000E87 loc_E87:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+C3j
.text:00000E87                 mov     edx, [ebp+var_4]
.text:00000E8A                 mov     eax, [edx+4A4h]
.text:00000E90                 add     eax, 2
.text:00000E93                 mov     [ebp+var_10], eax
.text:00000E96                 mov     ecx, [ebp+var_C]
.text:00000E99                 mov     edx, [ebp+var_10]
.text:00000E9C                 movzx   eax, word ptr [edx+ecx*2-4]
.text:00000EA1                 mov     [ebp+var_14], eax
.text:00000EA4                 mov     ecx, [ebp+var_4]
.text:00000EA7                 mov     edx, [ebp+var_14]
.text:00000EAA                 cmp     edx, [ecx+4A8h]
.text:00000EB0                 jbe     short loc_ED9
.text:00000EB2                 mov     eax, [ebp+var_C]
.text:00000EB5                 mov     ecx, [ebp+var_10]
.text:00000EB8                 movzx   edx, word ptr [ecx+eax*2-2]
.text:00000EBD                 mov     eax, [ebp+arg_0]
.text:00000EC0                 mov     [eax], edx
.text:00000EC2                 mov     ecx, [ebp+var_14]
.text:00000EC5                 sub     ecx, 1
.text:00000EC8                 push    ecx             ; unsigned int
.text:00000EC9                 mov     ecx, [ebp+var_4] ; this
.text:00000ECC                 call    ?MovePos@CCoder@NEncoder@NDeflate@NCompress@@QAEXI@Z ; NCompress::NDeflate::NEncoder::CCoder::MovePos(uint)
.text:00000ED1                 mov     eax, [ebp+var_14]
.text:00000ED4                 jmp     loc_125F
.text:00000ED9 ; ---------------------------------------------------------------------------
.text:00000ED9
.text:00000ED9 loc_ED9:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+F8j
.text:00000ED9                 mov     edx, [ebp+var_4]
.text:00000EDC                 mov     eax, [ebp+var_4]
.text:00000EDF                 mov     ecx, [edx]
.text:00000EE1                 sub     ecx, [eax+508h]
.text:00000EE7                 movzx   edx, byte ptr [ecx]
.text:00000EEA                 mov     eax, [ebp+var_4]
.text:00000EED                 movzx   ecx, byte ptr [eax+edx+514h]
.text:00000EF5                 mov     edx, [ebp+var_4]
.text:00000EF8                 mov     [edx+12E4h], ecx
.text:00000EFE                 xor     eax, eax
.text:00000F00                 mov     ecx, [ebp+var_4]
.text:00000F03                 mov     [ecx+12E8h], ax
.text:00000F0A                 mov     edx, [ebp+var_4]
.text:00000F0D                 mov     dword ptr [edx+12ECh], 0FFFFFFFh
.text:00000F17                 mov     eax, 1
.text:00000F1C                 mov     ecx, [ebp+var_4]
.text:00000F1F                 mov     [ecx+12F0h], ax
.text:00000F26                 mov     [ebp+var_18], 0
.text:00000F2D                 mov     [ebp+var_1C], 3
.text:00000F34                 jmp     short loc_F3F
.text:00000F36 ; ---------------------------------------------------------------------------
.text:00000F36
.text:00000F36 loc_F36:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &):loc_FBFj
.text:00000F36                 mov     edx, [ebp+var_1C]
.text:00000F39                 add     edx, 1
.text:00000F3C                 mov     [ebp+var_1C], edx
.text:00000F3F
.text:00000F3F loc_F3F:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+17Cj
.text:00000F3F                 mov     eax, [ebp+var_1C]
.text:00000F42                 cmp     eax, [ebp+var_14]
.text:00000F45                 ja      short loc_FC4
.text:00000F47                 mov     ecx, [ebp+var_18]
.text:00000F4A                 mov     edx, [ebp+var_10]
.text:00000F4D                 movzx   eax, word ptr [edx+ecx*2+2]
.text:00000F52                 mov     [ebp+var_20], eax
.text:00000F55                 xor     ecx, ecx
.text:00000F57                 mov     edx, [ebp+var_1C]
.text:00000F5A                 mov     eax, [ebp+var_4]
.text:00000F5D                 mov     [eax+edx*8+12E0h], cx
.text:00000F65                 mov     ecx, [ebp+var_1C]
.text:00000F68                 mov     edx, [ebp+var_4]
.text:00000F6B                 mov     ax, word ptr [ebp+var_20]
.text:00000F6F                 mov     [edx+ecx*8+12E2h], ax
.text:00000F77                 mov     ecx, [ebp+var_4]
.text:00000F7A                 add     ecx, [ebp+var_1C]
.text:00000F7D                 movzx   esi, byte ptr [ecx+611h]
.text:00000F84                 mov     edx, [ebp+var_20]
.text:00000F87                 push    edx             ; this
.text:00000F88                 call    ?GetPosSlot@NEncoder@NDeflate@NCompress@@YGII@Z ; NCompress::NDeflate::NEncoder::GetPosSlot(uint)
.text:00000F8D                 mov     ecx, [ebp+var_4]
.text:00000F90                 movzx   edx, byte ptr [ecx+eax+714h]
.text:00000F98                 add     esi, edx
.text:00000F9A                 mov     eax, [ebp+var_1C]
.text:00000F9D                 mov     ecx, [ebp+var_4]
.text:00000FA0                 mov     [ecx+eax*8+12DCh], esi
.text:00000FA7                 mov     edx, [ebp+var_18]
.text:00000FAA                 mov     eax, [ebp+var_10]
.text:00000FAD                 movzx   ecx, word ptr [eax+edx*2]
.text:00000FB1                 cmp     [ebp+var_1C], ecx
.text:00000FB4                 jnz     short loc_FBF
.text:00000FB6                 mov     edx, [ebp+var_18]
.text:00000FB9                 add     edx, 2
.text:00000FBC                 mov     [ebp+var_18], edx
.text:00000FBF
.text:00000FBF loc_FBF:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+1FCj
.text:00000FBF                 jmp     loc_F36
.text:00000FC4 ; ---------------------------------------------------------------------------
.text:00000FC4
.text:00000FC4 loc_FC4:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+18Dj
.text:00000FC4                 mov     [ebp+var_24], 0
.text:00000FCB                 mov     eax, [ebp+var_14]
.text:00000FCE                 mov     [ebp+var_28], eax
.text:00000FD1
.text:00000FD1 loc_FD1:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+37Cj
.text:00000FD1                                         ; NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &):loc_125Aj
.text:00000FD1                 mov     ecx, [ebp+var_24]
.text:00000FD4                 add     ecx, 1
.text:00000FD7                 mov     [ebp+var_24], ecx
.text:00000FDA                 mov     edx, [ebp+var_24]
.text:00000FDD                 cmp     edx, [ebp+var_28]
.text:00000FE0                 jz      short loc_FFA
.text:00000FE2                 cmp     [ebp+var_24], 1000h
.text:00000FE9                 jz      short loc_FFA
.text:00000FEB                 mov     eax, [ebp+var_4]
.text:00000FEE                 cmp     dword ptr [eax+4B8h], 9F7E6h
.text:00000FF8                 jb      short loc_100F
.text:00000FFA
.text:00000FFA loc_FFA:                                ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+228j
.text:00000FFA                                         ; NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+231j
.text:00000FFA                 mov     ecx, [ebp+var_24]
.text:00000FFD                 push    ecx             ; unsigned int
.text:00000FFE                 mov     edx, [ebp+arg_0]
.text:00001001                 push    edx             ; unsigned int *
.text:00001002                 mov     ecx, [ebp+var_4] ; this
.text:00001005                 call    ?Backward@CCoder@NEncoder@NDeflate@NCompress@@QAEIAAII@Z ; NCompress::NDeflate::NEncoder::CCoder::Backward(uint &,uint)
.text:0000100A                 jmp     loc_125F
.text:0000100F ; ---------------------------------------------------------------------------
.text:0000100F
.text:0000100F loc_100F:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+240j
.text:0000100F                 mov     ecx, [ebp+var_4] ; this
.text:00001012                 call    ?GetMatches@CCoder@NEncoder@NDeflate@NCompress@@QAEXXZ ; NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)
.text:00001017                 mov     eax, [ebp+var_4]
.text:0000101A                 mov     ecx, [eax+4A4h]
.text:00001020                 add     ecx, 2
.text:00001023                 mov     [ebp+var_10], ecx
.text:00001026                 mov     edx, [ebp+var_4]
.text:00001029                 mov     eax, [edx+4A4h]
.text:0000102F                 movzx   ecx, word ptr [eax]
.text:00001032                 mov     [ebp+var_2C], ecx
.text:00001035                 mov     [ebp+var_30], 0
.text:0000103C                 cmp     [ebp+var_2C], 0
.text:00001040                 jz      loc_10CC
.text:00001046                 mov     edx, [ebp+var_2C]
.text:00001049                 mov     eax, [ebp+var_10]
.text:0000104C                 movzx   ecx, word ptr [eax+edx*2-4]
.text:00001051                 mov     [ebp+var_30], ecx
.text:00001054                 mov     edx, [ebp+var_4]
.text:00001057                 mov     eax, [ebp+var_30]
.text:0000105A                 cmp     eax, [edx+4A8h]
.text:00001060                 jbe     short loc_10CC
.text:00001062                 mov     ecx, [ebp+var_24]
.text:00001065                 push    ecx             ; unsigned int
.text:00001066                 mov     edx, [ebp+arg_0]
.text:00001069                 push    edx             ; unsigned int *
.text:0000106A                 mov     ecx, [ebp+var_4] ; this
.text:0000106D                 call    ?Backward@CCoder@NEncoder@NDeflate@NCompress@@QAEIAAII@Z ; NCompress::NDeflate::NEncoder::CCoder::Backward(uint &,uint)
.text:00001072                 mov     [ebp+var_34], eax
.text:00001075                 mov     eax, [ebp+var_24]
.text:00001078                 mov     ecx, [ebp+var_4]
.text:0000107B                 mov     edx, [ebp+var_2C]
.text:0000107E                 mov     esi, [ebp+var_10]
.text:00001081                 mov     dx, [esi+edx*2-2]
.text:00001086                 mov     [ecx+eax*8+12E2h], dx
.text:0000108E                 mov     eax, [ebp+var_24]
.text:00001091                 add     eax, [ebp+var_30]
.text:00001094                 mov     ecx, [ebp+var_4]
.text:00001097                 mov     [ecx+50Ch], eax
.text:0000109D                 mov     edx, [ebp+var_24]
.text:000010A0                 mov     eax, [ebp+var_4]
.text:000010A3                 mov     ecx, [ebp+var_4]
.text:000010A6                 mov     cx, [ecx+50Ch]
.text:000010AD                 mov     [eax+edx*8+12E0h], cx
.text:000010B5                 mov     edx, [ebp+var_30]
.text:000010B8                 sub     edx, 1
.text:000010BB                 push    edx             ; unsigned int
.text:000010BC                 mov     ecx, [ebp+var_4] ; this
.text:000010BF                 call    ?MovePos@CCoder@NEncoder@NDeflate@NCompress@@QAEXI@Z ; NCompress::NDeflate::NEncoder::CCoder::MovePos(uint)
.text:000010C4                 mov     eax, [ebp+var_34]
.text:000010C7                 jmp     loc_125F
.text:000010CC ; ---------------------------------------------------------------------------
.text:000010CC
.text:000010CC loc_10CC:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+288j
.text:000010CC                                         ; NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+2A8j
.text:000010CC                 mov     eax, [ebp+var_24]
.text:000010CF                 mov     ecx, [ebp+var_4]
.text:000010D2                 mov     edx, [ecx+eax*8+12DCh]
.text:000010D9                 mov     [ebp+var_38], edx
.text:000010DC                 mov     eax, [ebp+var_4]
.text:000010DF                 mov     ecx, [eax]
.text:000010E1                 add     ecx, [ebp+var_24]
.text:000010E4                 mov     edx, [ebp+var_4]
.text:000010E7                 sub     ecx, [edx+508h]
.text:000010ED                 movzx   eax, byte ptr [ecx]
.text:000010F0                 mov     ecx, [ebp+var_4]
.text:000010F3                 movzx   edx, byte ptr [ecx+eax+514h]
.text:000010FB                 add     edx, [ebp+var_38]
.text:000010FE                 mov     [ebp+var_3C], edx
.text:00001101                 mov     eax, [ebp+var_24]
.text:00001104                 mov     ecx, [ebp+var_4]
.text:00001107                 lea     edx, [ecx+eax*8+12E4h]
.text:0000110E                 mov     [ebp+var_40], edx
.text:00001111                 mov     eax, [ebp+var_40]
.text:00001114                 mov     ecx, [ebp+var_3C]
.text:00001117                 cmp     ecx, [eax]
.text:00001119                 jnb     short loc_112E
.text:0000111B                 mov     edx, [ebp+var_40]
.text:0000111E                 mov     eax, [ebp+var_3C]
.text:00001121                 mov     [edx], eax
.text:00001123                 mov     ecx, [ebp+var_40]
.text:00001126                 mov     dx, word ptr [ebp+var_24]
.text:0000112A                 mov     [ecx+4], dx
.text:0000112E
.text:0000112E loc_112E:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+361j
.text:0000112E                 cmp     [ebp+var_2C], 0
.text:00001132                 jnz     short loc_1139
.text:00001134                 jmp     loc_FD1
.text:00001139 ; ---------------------------------------------------------------------------
.text:00001139
.text:00001139 loc_1139:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+37Aj
.text:00001139                                         ; NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+3A6j
.text:00001139                 mov     eax, [ebp+var_24]
.text:0000113C                 add     eax, [ebp+var_30]
.text:0000113F                 cmp     [ebp+var_28], eax
.text:00001142                 jnb     short loc_1160
.text:00001144                 mov     ecx, [ebp+var_28]
.text:00001147                 add     ecx, 1
.text:0000114A                 mov     [ebp+var_28], ecx
.text:0000114D                 mov     edx, [ebp+var_28]
.text:00001150                 mov     eax, [ebp+var_4]
.text:00001153                 mov     dword ptr [eax+edx*8+12DCh], 0FFFFFFFh
.text:0000115E                 jmp     short loc_1139
.text:00001160 ; ---------------------------------------------------------------------------
.text:00001160
.text:00001160 loc_1160:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+38Aj
.text:00001160                 mov     [ebp+var_18], 0
.text:00001167                 mov     ecx, [ebp+var_18]
.text:0000116A                 mov     edx, [ebp+var_10]
.text:0000116D                 movzx   eax, word ptr [edx+ecx*2+2]
.text:00001172                 mov     [ebp+var_44], eax
.text:00001175                 mov     ecx, [ebp+var_44]
.text:00001178                 push    ecx             ; this
.text:00001179                 call    ?GetPosSlot@NEncoder@NDeflate@NCompress@@YGII@Z ; NCompress::NDeflate::NEncoder::GetPosSlot(uint)
.text:0000117E                 mov     edx, [ebp+var_4]
.text:00001181                 movzx   eax, byte ptr [edx+eax+714h]
.text:00001189                 add     eax, [ebp+var_38]
.text:0000118C                 mov     [ebp+var_38], eax
.text:0000118F                 mov     [ebp+var_48], 3
.text:00001196                 jmp     short loc_11A1
.text:00001198 ; ---------------------------------------------------------------------------
.text:00001198
.text:00001198 loc_1198:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &):loc_1255j
.text:00001198                 mov     ecx, [ebp+var_48]
.text:0000119B                 add     ecx, 1
.text:0000119E                 mov     [ebp+var_48], ecx
.text:000011A1
.text:000011A1 loc_11A1:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+3DEj
.text:000011A1                 mov     edx, [ebp+var_4]
.text:000011A4                 add     edx, [ebp+var_48]
.text:000011A7                 movzx   eax, byte ptr [edx+611h]
.text:000011AE                 add     eax, [ebp+var_38]
.text:000011B1                 mov     [ebp+var_4C], eax
.text:000011B4                 mov     ecx, [ebp+var_24]
.text:000011B7                 add     ecx, [ebp+var_48]
.text:000011BA                 mov     edx, [ebp+var_4]
.text:000011BD                 lea     eax, [edx+ecx*8+12DCh]
.text:000011C4                 mov     [ebp+var_50], eax
.text:000011C7                 mov     ecx, [ebp+var_50]
.text:000011CA                 mov     edx, [ebp+var_4C]
.text:000011CD                 cmp     edx, [ecx]
.text:000011CF                 jnb     short loc_11EF
.text:000011D1                 mov     eax, [ebp+var_50]
.text:000011D4                 mov     ecx, [ebp+var_4C]
.text:000011D7                 mov     [eax], ecx
.text:000011D9                 mov     edx, [ebp+var_50]
.text:000011DC                 mov     ax, word ptr [ebp+var_24]
.text:000011E0                 mov     [edx+4], ax
.text:000011E4                 mov     ecx, [ebp+var_50]
.text:000011E7                 mov     dx, word ptr [ebp+var_44]
.text:000011EB                 mov     [ecx+6], dx
.text:000011EF
.text:000011EF loc_11EF:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+417j
.text:000011EF                 mov     eax, [ebp+var_18]
.text:000011F2                 mov     ecx, [ebp+var_10]
.text:000011F5                 movzx   edx, word ptr [ecx+eax*2]
.text:000011F9                 cmp     [ebp+var_48], edx
.text:000011FC                 jnz     short loc_1255
.text:000011FE                 mov     eax, [ebp+var_18]
.text:00001201                 add     eax, 2
.text:00001204                 mov     [ebp+var_18], eax
.text:00001207                 mov     ecx, [ebp+var_18]
.text:0000120A                 cmp     ecx, [ebp+var_2C]
.text:0000120D                 jnz     short loc_1211
.text:0000120F                 jmp     short loc_125A
.text:00001211 ; ---------------------------------------------------------------------------
.text:00001211
.text:00001211 loc_1211:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+455j
.text:00001211                 mov     edx, [ebp+var_44]
.text:00001214                 push    edx             ; this
.text:00001215                 call    ?GetPosSlot@NEncoder@NDeflate@NCompress@@YGII@Z ; NCompress::NDeflate::NEncoder::GetPosSlot(uint)
.text:0000121A                 mov     ecx, [ebp+var_4]
.text:0000121D                 movzx   edx, byte ptr [ecx+eax+714h]
.text:00001225                 mov     eax, [ebp+var_38]
.text:00001228                 sub     eax, edx
.text:0000122A                 mov     [ebp+var_38], eax
.text:0000122D                 mov     ecx, [ebp+var_18]
.text:00001230                 mov     edx, [ebp+var_10]
.text:00001233                 movzx   eax, word ptr [edx+ecx*2+2]
.text:00001238                 mov     [ebp+var_44], eax
.text:0000123B                 mov     ecx, [ebp+var_44]
.text:0000123E                 push    ecx             ; this
.text:0000123F                 call    ?GetPosSlot@NEncoder@NDeflate@NCompress@@YGII@Z ; NCompress::NDeflate::NEncoder::GetPosSlot(uint)
.text:00001244                 mov     edx, [ebp+var_4]
.text:00001247                 movzx   eax, byte ptr [edx+eax+714h]
.text:0000124F                 add     eax, [ebp+var_38]
.text:00001252                 mov     [ebp+var_38], eax
.text:00001255
.text:00001255 loc_1255:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+444j
.text:00001255                 jmp     loc_1198
.text:0000125A ; ---------------------------------------------------------------------------
.text:0000125A
.text:0000125A loc_125A:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+457j
.text:0000125A                 jmp     loc_FD1
.text:0000125F ; ---------------------------------------------------------------------------
.text:0000125F
.text:0000125F loc_125F:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+89j
.text:0000125F                                         ; NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+CAj ...
.text:0000125F                 pop     edi
.text:00001260                 pop     esi
.text:00001261                 add     esp, 50h
.text:00001264                 cmp     ebp, esp
.text:00001266                 call    __RTC_CheckEsp
.text:0000126B                 mov     esp, ebp
.text:0000126D                 pop     ebp
.text:0000126E                 retn    4
.text:0000126E ?GetOptimal@CCoder@NEncoder@NDeflate@NCompress@@QAEIAAI@Z endp
.text:0000126E
.text:0000126E ; ---------------------------------------------------------------------------
.text:00001271                 align 8
.text:00001278
.text:00001278 ; =============== S U B R O U T I N E =======================================
.text:00001278
.text:00001278 ; Attributes: bp-based frame
.text:00001278
.text:00001278 ; unsigned int __thiscall NCompress::NDeflate::NEncoder::CCoder::GetOptimalFast(NCompress::NDeflate::NEncoder::CCoder *this, unsigned int *)
.text:00001278                 public ?GetOptimalFast@CCoder@NEncoder@NDeflate@NCompress@@QAEIAAI@Z
.text:00001278 ?GetOptimalFast@CCoder@NEncoder@NDeflate@NCompress@@QAEIAAI@Z proc near
.text:00001278                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryBlock(void)+EDp
.text:00001278
.text:00001278 var_C           = dword ptr -0Ch
.text:00001278 var_8           = dword ptr -8
.text:00001278 var_4           = dword ptr -4
.text:00001278 arg_0           = dword ptr  8
.text:00001278
.text:00001278                 push    ebp
.text:00001279                 mov     ebp, esp
.text:0000127B                 sub     esp, 0Ch
.text:0000127E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001285                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000128C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001293                 mov     [ebp+var_4], ecx
.text:00001296                 mov     ecx, [ebp+var_4] ; this
.text:00001299                 call    ?GetMatches@CCoder@NEncoder@NDeflate@NCompress@@QAEXXZ ; NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)
.text:0000129E                 mov     eax, [ebp+var_4]
.text:000012A1                 mov     ecx, [eax+4A4h]
.text:000012A7                 movzx   edx, word ptr [ecx]
.text:000012AA                 mov     [ebp+var_8], edx
.text:000012AD                 cmp     [ebp+var_8], 0
.text:000012B1                 jnz     short loc_12BA
.text:000012B3                 mov     eax, 1
.text:000012B8                 jmp     short loc_12F5
.text:000012BA ; ---------------------------------------------------------------------------
.text:000012BA
.text:000012BA loc_12BA:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimalFast(uint &)+39j
.text:000012BA                 mov     eax, [ebp+var_4]
.text:000012BD                 mov     ecx, [eax+4A4h]
.text:000012C3                 mov     edx, [ebp+var_8]
.text:000012C6                 movzx   eax, word ptr [ecx+edx*2-2]
.text:000012CB                 mov     [ebp+var_C], eax
.text:000012CE                 mov     ecx, [ebp+var_4]
.text:000012D1                 mov     edx, [ecx+4A4h]
.text:000012D7                 mov     eax, [ebp+var_8]
.text:000012DA                 movzx   ecx, word ptr [edx+eax*2]
.text:000012DE                 mov     edx, [ebp+arg_0]
.text:000012E1                 mov     [edx], ecx
.text:000012E3                 mov     eax, [ebp+var_C]
.text:000012E6                 sub     eax, 1
.text:000012E9                 push    eax             ; unsigned int
.text:000012EA                 mov     ecx, [ebp+var_4] ; this
.text:000012ED                 call    ?MovePos@CCoder@NEncoder@NDeflate@NCompress@@QAEXI@Z ; NCompress::NDeflate::NEncoder::CCoder::MovePos(uint)
.text:000012F2                 mov     eax, [ebp+var_C]
.text:000012F5
.text:000012F5 loc_12F5:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimalFast(uint &)+40j
.text:000012F5                 add     esp, 0Ch
.text:000012F8                 cmp     ebp, esp
.text:000012FA                 call    __RTC_CheckEsp
.text:000012FF                 mov     esp, ebp
.text:00001301                 pop     ebp
.text:00001302                 retn    4
.text:00001302 ?GetOptimalFast@CCoder@NEncoder@NDeflate@NCompress@@QAEIAAI@Z endp
.text:00001302
.text:00001302 ; ---------------------------------------------------------------------------
.text:00001305                 align 4
.text:00001308
.text:00001308 ; =============== S U B R O U T I N E =======================================
.text:00001308
.text:00001308 ; Attributes: bp-based frame
.text:00001308
.text:00001308 ; void __thiscall NCompress::NDeflate::NEncoder::CTables::InitStructures(NCompress::NDeflate::NEncoder::CTables *__hidden this)
.text:00001308                 public ?InitStructures@CTables@NEncoder@NDeflate@NCompress@@QAEXXZ
.text:00001308 ?InitStructures@CTables@NEncoder@NDeflate@NCompress@@QAEXXZ proc near
.text:00001308                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+161p
.text:00001308
.text:00001308 var_8           = dword ptr -8
.text:00001308 var_4           = dword ptr -4
.text:00001308
.text:00001308                 push    ebp
.text:00001309                 mov     ebp, esp
.text:0000130B                 sub     esp, 8
.text:0000130E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001315                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000131C                 mov     [ebp+var_4], ecx
.text:0000131F                 mov     [ebp+var_8], 0
.text:00001326                 jmp     short loc_1331
.text:00001328 ; ---------------------------------------------------------------------------
.text:00001328
.text:00001328 loc_1328:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CTables::InitStructures(void)+3Bj
.text:00001328                 mov     eax, [ebp+var_8]
.text:0000132B                 add     eax, 1
.text:0000132E                 mov     [ebp+var_8], eax
.text:00001331
.text:00001331 loc_1331:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CTables::InitStructures(void)+1Ej
.text:00001331                 cmp     [ebp+var_8], 100h
.text:00001338                 jnb     short loc_1345
.text:0000133A                 mov     ecx, [ebp+var_4]
.text:0000133D                 add     ecx, [ebp+var_8]
.text:00001340                 mov     byte ptr [ecx], 8
.text:00001343                 jmp     short loc_1328
.text:00001345 ; ---------------------------------------------------------------------------
.text:00001345
.text:00001345 loc_1345:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CTables::InitStructures(void)+30j
.text:00001345                 mov     edx, [ebp+var_4]
.text:00001348                 add     edx, [ebp+var_8]
.text:0000134B                 mov     byte ptr [edx], 0Dh
.text:0000134E                 mov     eax, [ebp+var_8]
.text:00001351                 add     eax, 1
.text:00001354                 mov     [ebp+var_8], eax
.text:00001357                 jmp     short loc_1362
.text:00001359 ; ---------------------------------------------------------------------------
.text:00001359
.text:00001359 loc_1359:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CTables::InitStructures(void)+6Cj
.text:00001359                 mov     ecx, [ebp+var_8]
.text:0000135C                 add     ecx, 1
.text:0000135F                 mov     [ebp+var_8], ecx
.text:00001362
.text:00001362 loc_1362:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CTables::InitStructures(void)+4Fj
.text:00001362                 cmp     [ebp+var_8], 120h
.text:00001369                 jnb     short loc_1376
.text:0000136B                 mov     edx, [ebp+var_4]
.text:0000136E                 add     edx, [ebp+var_8]
.text:00001371                 mov     byte ptr [edx], 5
.text:00001374                 jmp     short loc_1359
.text:00001376 ; ---------------------------------------------------------------------------
.text:00001376
.text:00001376 loc_1376:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CTables::InitStructures(void)+61j
.text:00001376                 mov     [ebp+var_8], 0
.text:0000137D                 jmp     short loc_1388
.text:0000137F ; ---------------------------------------------------------------------------
.text:0000137F
.text:0000137F loc_137F:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CTables::InitStructures(void)+93j
.text:0000137F                 mov     eax, [ebp+var_8]
.text:00001382                 add     eax, 1
.text:00001385                 mov     [ebp+var_8], eax
.text:00001388
.text:00001388 loc_1388:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CTables::InitStructures(void)+75j
.text:00001388                 cmp     [ebp+var_8], 20h ; ' '
.text:0000138C                 jnb     short loc_139D
.text:0000138E                 mov     ecx, [ebp+var_4]
.text:00001391                 add     ecx, [ebp+var_8]
.text:00001394                 mov     byte ptr [ecx+120h], 5
.text:0000139B                 jmp     short loc_137F
.text:0000139D ; ---------------------------------------------------------------------------
.text:0000139D
.text:0000139D loc_139D:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CTables::InitStructures(void)+84j
.text:0000139D                 mov     esp, ebp
.text:0000139F                 pop     ebp
.text:000013A0                 retn
.text:000013A0 ?InitStructures@CTables@NEncoder@NDeflate@NCompress@@QAEXXZ endp
.text:000013A0
.text:000013A0 ; ---------------------------------------------------------------------------
.text:000013A1                 align 8
.text:000013A8
.text:000013A8 ; =============== S U B R O U T I N E =======================================
.text:000013A8
.text:000013A8 ; Attributes: bp-based frame
.text:000013A8
.text:000013A8 ; void __thiscall NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(NCompress::NDeflate::NEncoder::CCoder *this, const unsigned __int8 *, unsigned int, unsigned int *)
.text:000013A8                 public ?LevelTableDummy@CCoder@NEncoder@NDeflate@NCompress@@QAEXPBEIPAI@Z
.text:000013A8 ?LevelTableDummy@CCoder@NEncoder@NDeflate@NCompress@@QAEXPBEIPAI@Z proc near
.text:000013A8                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+1DFp
.text:000013A8                                         ; NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+1FFp
.text:000013A8
.text:000013A8 var_24          = dword ptr -24h
.text:000013A8 var_20          = dword ptr -20h
.text:000013A8 var_1C          = dword ptr -1Ch
.text:000013A8 var_18          = dword ptr -18h
.text:000013A8 var_14          = dword ptr -14h
.text:000013A8 var_10          = dword ptr -10h
.text:000013A8 var_C           = dword ptr -0Ch
.text:000013A8 var_8           = dword ptr -8
.text:000013A8 var_4           = dword ptr -4
.text:000013A8 arg_0           = dword ptr  8
.text:000013A8 arg_4           = dword ptr  0Ch
.text:000013A8 arg_8           = dword ptr  10h
.text:000013A8
.text:000013A8                 push    ebp
.text:000013A9                 mov     ebp, esp
.text:000013AB                 sub     esp, 24h
.text:000013AE                 mov     eax, 0CCCCCCCCh
.text:000013B3                 mov     [ebp+var_24], eax
.text:000013B6                 mov     [ebp+var_20], eax
.text:000013B9                 mov     [ebp+var_1C], eax
.text:000013BC                 mov     [ebp+var_18], eax
.text:000013BF                 mov     [ebp+var_14], eax
.text:000013C2                 mov     [ebp+var_10], eax
.text:000013C5                 mov     [ebp+var_C], eax
.text:000013C8                 mov     [ebp+var_8], eax
.text:000013CB                 mov     [ebp+var_4], eax
.text:000013CE                 mov     [ebp+var_4], ecx
.text:000013D1                 mov     [ebp+var_8], 0FFh
.text:000013D8                 mov     eax, [ebp+arg_0]
.text:000013DB                 movzx   ecx, byte ptr [eax]
.text:000013DE                 mov     [ebp+var_C], ecx
.text:000013E1                 mov     [ebp+var_10], 0
.text:000013E8                 mov     [ebp+var_14], 7
.text:000013EF                 mov     [ebp+var_18], 4
.text:000013F6                 cmp     [ebp+var_C], 0
.text:000013FA                 jnz     short loc_140A
.text:000013FC                 mov     [ebp+var_14], 8Ah ; 'è'
.text:00001403                 mov     [ebp+var_18], 3
.text:0000140A
.text:0000140A loc_140A:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *)+52j
.text:0000140A                 mov     [ebp+var_1C], 0
.text:00001411                 jmp     short loc_141C
.text:00001413 ; ---------------------------------------------------------------------------
.text:00001413
.text:00001413 loc_1413:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *)+C6j
.text:00001413                                         ; NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *):loc_153Bj
.text:00001413                 mov     edx, [ebp+var_1C]
.text:00001416                 add     edx, 1
.text:00001419                 mov     [ebp+var_1C], edx
.text:0000141C
.text:0000141C loc_141C:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *)+69j
.text:0000141C                 mov     eax, [ebp+var_1C]
.text:0000141F                 cmp     eax, [ebp+arg_4]
.text:00001422                 jnb     loc_1540
.text:00001428                 mov     ecx, [ebp+var_C]
.text:0000142B                 mov     [ebp+var_20], ecx
.text:0000142E                 mov     edx, [ebp+arg_4]
.text:00001431                 sub     edx, 1
.text:00001434                 cmp     [ebp+var_1C], edx
.text:00001437                 jnb     short loc_1448
.text:00001439                 mov     eax, [ebp+arg_0]
.text:0000143C                 add     eax, [ebp+var_1C]
.text:0000143F                 movzx   ecx, byte ptr [eax+1]
.text:00001443                 mov     [ebp+var_24], ecx
.text:00001446                 jmp     short loc_144F
.text:00001448 ; ---------------------------------------------------------------------------
.text:00001448
.text:00001448 loc_1448:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *)+8Fj
.text:00001448                 mov     [ebp+var_24], 0FFh
.text:0000144F
.text:0000144F loc_144F:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *)+9Ej
.text:0000144F                 mov     edx, [ebp+var_24]
.text:00001452                 mov     [ebp+var_C], edx
.text:00001455                 mov     eax, [ebp+var_10]
.text:00001458                 add     eax, 1
.text:0000145B                 mov     [ebp+var_10], eax
.text:0000145E                 mov     ecx, [ebp+var_10]
.text:00001461                 cmp     ecx, [ebp+var_14]
.text:00001464                 jnb     short loc_1470
.text:00001466                 mov     edx, [ebp+var_20]
.text:00001469                 cmp     edx, [ebp+var_C]
.text:0000146C                 jnz     short loc_1470
.text:0000146E                 jmp     short loc_1413
.text:00001470 ; ---------------------------------------------------------------------------
.text:00001470
.text:00001470 loc_1470:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *)+BCj
.text:00001470                                         ; NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *)+C4j
.text:00001470                 mov     eax, [ebp+var_10]
.text:00001473                 cmp     eax, [ebp+var_18]
.text:00001476                 jnb     short loc_148F
.text:00001478                 mov     ecx, [ebp+var_20]
.text:0000147B                 mov     edx, [ebp+arg_8]
.text:0000147E                 mov     eax, [edx+ecx*4]
.text:00001481                 add     eax, [ebp+var_10]
.text:00001484                 mov     ecx, [ebp+var_20]
.text:00001487                 mov     edx, [ebp+arg_8]
.text:0000148A                 mov     [edx+ecx*4], eax
.text:0000148D                 jmp     short loc_14F2
.text:0000148F ; ---------------------------------------------------------------------------
.text:0000148F
.text:0000148F loc_148F:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *)+CEj
.text:0000148F                 cmp     [ebp+var_20], 0
.text:00001493                 jz      short loc_14CC
.text:00001495                 mov     eax, [ebp+var_20]
.text:00001498                 cmp     eax, [ebp+var_8]
.text:0000149B                 jz      short loc_14BB
.text:0000149D                 mov     ecx, [ebp+var_20]
.text:000014A0                 mov     edx, [ebp+arg_8]
.text:000014A3                 mov     eax, [edx+ecx*4]
.text:000014A6                 add     eax, 1
.text:000014A9                 mov     ecx, [ebp+var_20]
.text:000014AC                 mov     edx, [ebp+arg_8]
.text:000014AF                 mov     [edx+ecx*4], eax
.text:000014B2                 mov     eax, [ebp+var_10]
.text:000014B5                 sub     eax, 1
.text:000014B8                 mov     [ebp+var_10], eax
.text:000014BB
.text:000014BB loc_14BB:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *)+F3j
.text:000014BB                 mov     ecx, [ebp+arg_8]
.text:000014BE                 mov     edx, [ecx+40h]
.text:000014C1                 add     edx, 1
.text:000014C4                 mov     eax, [ebp+arg_8]
.text:000014C7                 mov     [eax+40h], edx
.text:000014CA                 jmp     short loc_14F2
.text:000014CC ; ---------------------------------------------------------------------------
.text:000014CC
.text:000014CC loc_14CC:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *)+EBj
.text:000014CC                 cmp     [ebp+var_10], 0Ah
.text:000014D0                 ja      short loc_14E3
.text:000014D2                 mov     ecx, [ebp+arg_8]
.text:000014D5                 mov     edx, [ecx+44h]
.text:000014D8                 add     edx, 1
.text:000014DB                 mov     eax, [ebp+arg_8]
.text:000014DE                 mov     [eax+44h], edx
.text:000014E1                 jmp     short loc_14F2
.text:000014E3 ; ---------------------------------------------------------------------------
.text:000014E3
.text:000014E3 loc_14E3:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *)+128j
.text:000014E3                 mov     ecx, [ebp+arg_8]
.text:000014E6                 mov     edx, [ecx+48h]
.text:000014E9                 add     edx, 1
.text:000014EC                 mov     eax, [ebp+arg_8]
.text:000014EF                 mov     [eax+48h], edx
.text:000014F2
.text:000014F2 loc_14F2:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *)+E5j
.text:000014F2                                         ; NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *)+122j ...
.text:000014F2                 mov     [ebp+var_10], 0
.text:000014F9                 mov     ecx, [ebp+var_20]
.text:000014FC                 mov     [ebp+var_8], ecx
.text:000014FF                 cmp     [ebp+var_C], 0
.text:00001503                 jnz     short loc_1515
.text:00001505                 mov     [ebp+var_14], 8Ah ; 'è'
.text:0000150C                 mov     [ebp+var_18], 3
.text:00001513                 jmp     short loc_153B
.text:00001515 ; ---------------------------------------------------------------------------
.text:00001515
.text:00001515 loc_1515:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *)+15Bj
.text:00001515                 mov     edx, [ebp+var_20]
.text:00001518                 cmp     edx, [ebp+var_C]
.text:0000151B                 jnz     short loc_152D
.text:0000151D                 mov     [ebp+var_14], 6
.text:00001524                 mov     [ebp+var_18], 3
.text:0000152B                 jmp     short loc_153B
.text:0000152D ; ---------------------------------------------------------------------------
.text:0000152D
.text:0000152D loc_152D:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *)+173j
.text:0000152D                 mov     [ebp+var_14], 7
.text:00001534                 mov     [ebp+var_18], 4
.text:0000153B
.text:0000153B loc_153B:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *)+16Bj
.text:0000153B                                         ; NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *)+183j
.text:0000153B                 jmp     loc_1413
.text:00001540 ; ---------------------------------------------------------------------------
.text:00001540
.text:00001540 loc_1540:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *)+7Aj
.text:00001540                 mov     esp, ebp
.text:00001542                 pop     ebp
.text:00001543                 retn    0Ch
.text:00001543 ?LevelTableDummy@CCoder@NEncoder@NDeflate@NCompress@@QAEXPBEIPAI@Z endp
.text:00001543
.text:00001543 ; ---------------------------------------------------------------------------
.text:00001546                 align 4
.text:00001548
.text:00001548 ; =============== S U B R O U T I N E =======================================
.text:00001548
.text:00001548 ; Attributes: bp-based frame
.text:00001548
.text:00001548 ; void __thiscall NCompress::NDeflate::NEncoder::CCoder::WriteBits(NCompress::NDeflate::NEncoder::CCoder *this, unsigned int, unsigned int)
.text:00001548                 public ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z
.text:00001548 ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z proc near
.text:00001548                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+F3p
.text:00001548                                         ; NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+124p ...
.text:00001548
.text:00001548 var_4           = dword ptr -4
.text:00001548 arg_0           = dword ptr  8
.text:00001548 arg_4           = dword ptr  0Ch
.text:00001548
.text:00001548                 push    ebp
.text:00001549                 mov     ebp, esp
.text:0000154B                 push    ecx
.text:0000154C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001553                 mov     [ebp+var_4], ecx
.text:00001556                 mov     eax, [ebp+arg_4]
.text:00001559                 push    eax             ; unsigned int
.text:0000155A                 mov     ecx, [ebp+arg_0]
.text:0000155D                 push    ecx             ; unsigned int
.text:0000155E                 mov     ecx, [ebp+var_4]
.text:00001561                 add     ecx, 468h       ; this
.text:00001567                 call    ?WriteBits@CBitlEncoder@@QAEXII@Z ; CBitlEncoder::WriteBits(uint,uint)
.text:0000156C                 add     esp, 4
.text:0000156F                 cmp     ebp, esp
.text:00001571                 call    __RTC_CheckEsp
.text:00001576                 mov     esp, ebp
.text:00001578                 pop     ebp
.text:00001579                 retn    8
.text:00001579 ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z endp
.text:00001579
.text:00001579 ; ---------------------------------------------------------------------------
.text:0000157C                 db 0Ch dup(0CCh)
.text:00001588
.text:00001588 ; =============== S U B R O U T I N E =======================================
.text:00001588
.text:00001588 ; Attributes: bp-based frame
.text:00001588
.text:00001588 ; void __thiscall NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(NCompress::NDeflate::NEncoder::CCoder *this, const unsigned __int8 *, unsigned int, const unsigned __int8 *, const unsigned int *)
.text:00001588                 public ?LevelTableCode@CCoder@NEncoder@NDeflate@NCompress@@QAEXPBEI0PBI@Z
.text:00001588 ?LevelTableCode@CCoder@NEncoder@NDeflate@NCompress@@QAEXPBEI0PBI@Z proc near
.text:00001588                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+275p
.text:00001588                                         ; NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+2A5p
.text:00001588
.text:00001588 var_28          = dword ptr -28h
.text:00001588 var_24          = dword ptr -24h
.text:00001588 var_20          = dword ptr -20h
.text:00001588 var_1C          = dword ptr -1Ch
.text:00001588 var_18          = dword ptr -18h
.text:00001588 var_14          = dword ptr -14h
.text:00001588 var_10          = dword ptr -10h
.text:00001588 var_C           = dword ptr -0Ch
.text:00001588 var_8           = dword ptr -8
.text:00001588 var_4           = dword ptr -4
.text:00001588 arg_0           = dword ptr  8
.text:00001588 arg_4           = dword ptr  0Ch
.text:00001588 arg_8           = dword ptr  10h
.text:00001588 arg_C           = dword ptr  14h
.text:00001588
.text:00001588                 push    ebp
.text:00001589                 mov     ebp, esp
.text:0000158B                 sub     esp, 28h
.text:0000158E                 push    edi
.text:0000158F                 push    ecx
.text:00001590                 lea     edi, [ebp+var_28]
.text:00001593                 mov     ecx, 0Ah
.text:00001598                 mov     eax, 0CCCCCCCCh
.text:0000159D                 rep stosd
.text:0000159F                 pop     ecx
.text:000015A0                 mov     [ebp+var_4], ecx
.text:000015A3                 mov     [ebp+var_8], 0FFh
.text:000015AA                 mov     eax, [ebp+arg_0]
.text:000015AD                 movzx   ecx, byte ptr [eax]
.text:000015B0                 mov     [ebp+var_C], ecx
.text:000015B3                 mov     [ebp+var_10], 0
.text:000015BA                 mov     [ebp+var_14], 7
.text:000015C1                 mov     [ebp+var_18], 4
.text:000015C8                 cmp     [ebp+var_C], 0
.text:000015CC                 jnz     short loc_15DC
.text:000015CE                 mov     [ebp+var_14], 8Ah ; 'è'
.text:000015D5                 mov     [ebp+var_18], 3
.text:000015DC
.text:000015DC loc_15DC:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+44j
.text:000015DC                 mov     [ebp+var_1C], 0
.text:000015E3                 jmp     short loc_15EE
.text:000015E5 ; ---------------------------------------------------------------------------
.text:000015E5
.text:000015E5 loc_15E5:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+B8j
.text:000015E5                                         ; NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *):loc_1785j
.text:000015E5                 mov     edx, [ebp+var_1C]
.text:000015E8                 add     edx, 1
.text:000015EB                 mov     [ebp+var_1C], edx
.text:000015EE
.text:000015EE loc_15EE:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+5Bj
.text:000015EE                 mov     eax, [ebp+var_1C]
.text:000015F1                 cmp     eax, [ebp+arg_4]
.text:000015F4                 jnb     loc_178A
.text:000015FA                 mov     ecx, [ebp+var_C]
.text:000015FD                 mov     [ebp+var_20], ecx
.text:00001600                 mov     edx, [ebp+arg_4]
.text:00001603                 sub     edx, 1
.text:00001606                 cmp     [ebp+var_1C], edx
.text:00001609                 jnb     short loc_161A
.text:0000160B                 mov     eax, [ebp+arg_0]
.text:0000160E                 add     eax, [ebp+var_1C]
.text:00001611                 movzx   ecx, byte ptr [eax+1]
.text:00001615                 mov     [ebp+var_28], ecx
.text:00001618                 jmp     short loc_1621
.text:0000161A ; ---------------------------------------------------------------------------
.text:0000161A
.text:0000161A loc_161A:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+81j
.text:0000161A                 mov     [ebp+var_28], 0FFh
.text:00001621
.text:00001621 loc_1621:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+90j
.text:00001621                 mov     edx, [ebp+var_28]
.text:00001624                 mov     [ebp+var_C], edx
.text:00001627                 mov     eax, [ebp+var_10]
.text:0000162A                 add     eax, 1
.text:0000162D                 mov     [ebp+var_10], eax
.text:00001630                 mov     ecx, [ebp+var_10]
.text:00001633                 cmp     ecx, [ebp+var_14]
.text:00001636                 jnb     short loc_1642
.text:00001638                 mov     edx, [ebp+var_20]
.text:0000163B                 cmp     edx, [ebp+var_C]
.text:0000163E                 jnz     short loc_1642
.text:00001640                 jmp     short loc_15E5
.text:00001642 ; ---------------------------------------------------------------------------
.text:00001642
.text:00001642 loc_1642:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+AEj
.text:00001642                                         ; NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+B6j
.text:00001642                 mov     eax, [ebp+var_10]
.text:00001645                 cmp     eax, [ebp+var_18]
.text:00001648                 jnb     short loc_1687
.text:0000164A                 mov     [ebp+var_24], 0
.text:00001651                 jmp     short loc_165C
.text:00001653 ; ---------------------------------------------------------------------------
.text:00001653
.text:00001653 loc_1653:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+F8j
.text:00001653                 mov     ecx, [ebp+var_24]
.text:00001656                 add     ecx, 1
.text:00001659                 mov     [ebp+var_24], ecx
.text:0000165C
.text:0000165C loc_165C:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+C9j
.text:0000165C                 mov     edx, [ebp+var_24]
.text:0000165F                 cmp     edx, [ebp+var_10]
.text:00001662                 jnb     short loc_1682
.text:00001664                 mov     eax, [ebp+arg_8]
.text:00001667                 add     eax, [ebp+var_20]
.text:0000166A                 movzx   ecx, byte ptr [eax]
.text:0000166D                 push    ecx             ; unsigned int
.text:0000166E                 mov     edx, [ebp+var_20]
.text:00001671                 mov     eax, [ebp+arg_C]
.text:00001674                 mov     ecx, [eax+edx*4]
.text:00001677                 push    ecx             ; unsigned int
.text:00001678                 mov     ecx, [ebp+var_4] ; this
.text:0000167B                 call    ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z ; NCompress::NDeflate::NEncoder::CCoder::WriteBits(uint,uint)
.text:00001680                 jmp     short loc_1653
.text:00001682 ; ---------------------------------------------------------------------------
.text:00001682
.text:00001682 loc_1682:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+DAj
.text:00001682                 jmp     loc_173C
.text:00001687 ; ---------------------------------------------------------------------------
.text:00001687
.text:00001687 loc_1687:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+C0j
.text:00001687                 cmp     [ebp+var_20], 0
.text:0000168B                 jz      short loc_16E4
.text:0000168D                 mov     edx, [ebp+var_20]
.text:00001690                 cmp     edx, [ebp+var_8]
.text:00001693                 jz      short loc_16BA
.text:00001695                 mov     eax, [ebp+arg_8]
.text:00001698                 add     eax, [ebp+var_20]
.text:0000169B                 movzx   ecx, byte ptr [eax]
.text:0000169E                 push    ecx             ; unsigned int
.text:0000169F                 mov     edx, [ebp+var_20]
.text:000016A2                 mov     eax, [ebp+arg_C]
.text:000016A5                 mov     ecx, [eax+edx*4]
.text:000016A8                 push    ecx             ; unsigned int
.text:000016A9                 mov     ecx, [ebp+var_4] ; this
.text:000016AC                 call    ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z ; NCompress::NDeflate::NEncoder::CCoder::WriteBits(uint,uint)
.text:000016B1                 mov     edx, [ebp+var_10]
.text:000016B4                 sub     edx, 1
.text:000016B7                 mov     [ebp+var_10], edx
.text:000016BA
.text:000016BA loc_16BA:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+10Bj
.text:000016BA                 mov     eax, [ebp+arg_8]
.text:000016BD                 movzx   ecx, byte ptr [eax+10h]
.text:000016C1                 push    ecx             ; unsigned int
.text:000016C2                 mov     edx, [ebp+arg_C]
.text:000016C5                 mov     eax, [edx+40h]
.text:000016C8                 push    eax             ; unsigned int
.text:000016C9                 mov     ecx, [ebp+var_4] ; this
.text:000016CC                 call    ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z ; NCompress::NDeflate::NEncoder::CCoder::WriteBits(uint,uint)
.text:000016D1                 push    2               ; unsigned int
.text:000016D3                 mov     ecx, [ebp+var_10]
.text:000016D6                 sub     ecx, 3
.text:000016D9                 push    ecx             ; unsigned int
.text:000016DA                 mov     ecx, [ebp+var_4] ; this
.text:000016DD                 call    ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z ; NCompress::NDeflate::NEncoder::CCoder::WriteBits(uint,uint)
.text:000016E2                 jmp     short loc_173C
.text:000016E4 ; ---------------------------------------------------------------------------
.text:000016E4
.text:000016E4 loc_16E4:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+103j
.text:000016E4                 cmp     [ebp+var_10], 0Ah
.text:000016E8                 ja      short loc_1714
.text:000016EA                 mov     edx, [ebp+arg_8]
.text:000016ED                 movzx   eax, byte ptr [edx+11h]
.text:000016F1                 push    eax             ; unsigned int
.text:000016F2                 mov     ecx, [ebp+arg_C]
.text:000016F5                 mov     edx, [ecx+44h]
.text:000016F8                 push    edx             ; unsigned int
.text:000016F9                 mov     ecx, [ebp+var_4] ; this
.text:000016FC                 call    ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z ; NCompress::NDeflate::NEncoder::CCoder::WriteBits(uint,uint)
.text:00001701                 push    3               ; unsigned int
.text:00001703                 mov     eax, [ebp+var_10]
.text:00001706                 sub     eax, 3
.text:00001709                 push    eax             ; unsigned int
.text:0000170A                 mov     ecx, [ebp+var_4] ; this
.text:0000170D                 call    ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z ; NCompress::NDeflate::NEncoder::CCoder::WriteBits(uint,uint)
.text:00001712                 jmp     short loc_173C
.text:00001714 ; ---------------------------------------------------------------------------
.text:00001714
.text:00001714 loc_1714:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+160j
.text:00001714                 mov     ecx, [ebp+arg_8]
.text:00001717                 movzx   edx, byte ptr [ecx+12h]
.text:0000171B                 push    edx             ; unsigned int
.text:0000171C                 mov     eax, [ebp+arg_C]
.text:0000171F                 mov     ecx, [eax+48h]
.text:00001722                 push    ecx             ; unsigned int
.text:00001723                 mov     ecx, [ebp+var_4] ; this
.text:00001726                 call    ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z ; NCompress::NDeflate::NEncoder::CCoder::WriteBits(uint,uint)
.text:0000172B                 push    7               ; unsigned int
.text:0000172D                 mov     edx, [ebp+var_10]
.text:00001730                 sub     edx, 0Bh
.text:00001733                 push    edx             ; unsigned int
.text:00001734                 mov     ecx, [ebp+var_4] ; this
.text:00001737                 call    ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z ; NCompress::NDeflate::NEncoder::CCoder::WriteBits(uint,uint)
.text:0000173C
.text:0000173C loc_173C:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *):loc_1682j
.text:0000173C                                         ; NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+15Aj ...
.text:0000173C                 mov     [ebp+var_10], 0
.text:00001743                 mov     eax, [ebp+var_20]
.text:00001746                 mov     [ebp+var_8], eax
.text:00001749                 cmp     [ebp+var_C], 0
.text:0000174D                 jnz     short loc_175F
.text:0000174F                 mov     [ebp+var_14], 8Ah ; 'è'
.text:00001756                 mov     [ebp+var_18], 3
.text:0000175D                 jmp     short loc_1785
.text:0000175F ; ---------------------------------------------------------------------------
.text:0000175F
.text:0000175F loc_175F:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+1C5j
.text:0000175F                 mov     ecx, [ebp+var_20]
.text:00001762                 cmp     ecx, [ebp+var_C]
.text:00001765                 jnz     short loc_1777
.text:00001767                 mov     [ebp+var_14], 6
.text:0000176E                 mov     [ebp+var_18], 3
.text:00001775                 jmp     short loc_1785
.text:00001777 ; ---------------------------------------------------------------------------
.text:00001777
.text:00001777 loc_1777:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+1DDj
.text:00001777                 mov     [ebp+var_14], 7
.text:0000177E                 mov     [ebp+var_18], 4
.text:00001785
.text:00001785 loc_1785:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+1D5j
.text:00001785                                         ; NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+1EDj
.text:00001785                 jmp     loc_15E5
.text:0000178A ; ---------------------------------------------------------------------------
.text:0000178A
.text:0000178A loc_178A:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)+6Cj
.text:0000178A                 pop     edi
.text:0000178B                 add     esp, 28h
.text:0000178E                 cmp     ebp, esp
.text:00001790                 call    __RTC_CheckEsp
.text:00001795                 mov     esp, ebp
.text:00001797                 pop     ebp
.text:00001798                 retn    10h
.text:00001798 ?LevelTableCode@CCoder@NEncoder@NDeflate@NCompress@@QAEXPBEI0PBI@Z endp
.text:00001798
.text:00001798 ; ---------------------------------------------------------------------------
.text:0000179B                 db 0Dh dup(0CCh)
.text:000017A8
.text:000017A8 ; =============== S U B R O U T I N E =======================================
.text:000017A8
.text:000017A8 ; Attributes: bp-based frame
.text:000017A8
.text:000017A8 ; void __thiscall NCompress::NDeflate::NEncoder::CCoder::MakeTables(NCompress::NDeflate::NEncoder::CCoder *this, unsigned int)
.text:000017A8                 public ?MakeTables@CCoder@NEncoder@NDeflate@NCompress@@QAEXI@Z
.text:000017A8 ?MakeTables@CCoder@NEncoder@NDeflate@NCompress@@QAEXI@Z proc near
.text:000017A8                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+F2p
.text:000017A8                                         ; NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+172p
.text:000017A8
.text:000017A8 var_4           = dword ptr -4
.text:000017A8 arg_0           = dword ptr  8
.text:000017A8
.text:000017A8                 push    ebp
.text:000017A9                 mov     ebp, esp
.text:000017AB                 push    ecx
.text:000017AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000017B3                 mov     [ebp+var_4], ecx
.text:000017B6                 mov     eax, [ebp+arg_0]
.text:000017B9                 push    eax
.text:000017BA                 push    120h
.text:000017BF                 mov     ecx, [ebp+var_4]
.text:000017C2                 add     ecx, 734h
.text:000017C8                 push    ecx
.text:000017C9                 mov     edx, [ebp+var_4]
.text:000017CC                 add     edx, 0D74h
.text:000017D2                 push    edx
.text:000017D3                 mov     eax, [ebp+var_4]
.text:000017D6                 add     eax, 874h
.text:000017DB                 push    eax
.text:000017DC                 call    _Huffman_Generate@20 ; Huffman_Generate(x,x,x,x,x)
.text:000017E1                 mov     ecx, [ebp+arg_0]
.text:000017E4                 push    ecx
.text:000017E5                 push    20h ; ' '
.text:000017E7                 mov     edx, [ebp+var_4]
.text:000017EA                 add     edx, 854h
.text:000017F0                 push    edx
.text:000017F1                 mov     eax, [ebp+var_4]
.text:000017F4                 add     eax, 11F4h
.text:000017F9                 push    eax
.text:000017FA                 mov     ecx, [ebp+var_4]
.text:000017FD                 add     ecx, 0CF4h
.text:00001803                 push    ecx
.text:00001804                 call    _Huffman_Generate@20 ; Huffman_Generate(x,x,x,x,x)
.text:00001809                 add     esp, 4
.text:0000180C                 cmp     ebp, esp
.text:0000180E                 call    __RTC_CheckEsp
.text:00001813                 mov     esp, ebp
.text:00001815                 pop     ebp
.text:00001816                 retn    4
.text:00001816 ?MakeTables@CCoder@NEncoder@NDeflate@NCompress@@QAEXI@Z endp
.text:00001816
.text:00001816 ; ---------------------------------------------------------------------------
.text:00001819                 db 0Fh dup(0CCh)
.text:00001828
.text:00001828 ; =============== S U B R O U T I N E =======================================
.text:00001828
.text:00001828 ; Attributes: bp-based frame
.text:00001828
.text:00001828 ; unsigned int __stdcall NCompress::NDeflate::NEncoder::Huffman_GetPrice(NCompress::NDeflate::NEncoder *this, const unsigned int *, const unsigned __int8 *, unsigned int)
.text:00001828                 public ?Huffman_GetPrice@NEncoder@NDeflate@NCompress@@YGIPBIPBEI@Z
.text:00001828 ?Huffman_GetPrice@NEncoder@NDeflate@NCompress@@YGIPBIPBEI@Z proc near
.text:00001828                                         ; CODE XREF: NCompress::NDeflate::NEncoder::Huffman_GetPrice_Spec(uint const *,uchar const *,uint,uchar const *,uint)+10p
.text:00001828                                         ; NCompress::NDeflate::NEncoder::Huffman_GetPrice_Spec(uint const *,uchar const *,uint,uchar const *,uint)+2Cp
.text:00001828
.text:00001828 var_8           = dword ptr -8
.text:00001828 var_4           = dword ptr -4
.text:00001828 this            = dword ptr  8
.text:00001828 arg_4           = dword ptr  0Ch
.text:00001828 arg_8           = dword ptr  10h
.text:00001828
.text:00001828                 push    ebp
.text:00001829                 mov     ebp, esp
.text:0000182B                 sub     esp, 8
.text:0000182E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001835                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000183C                 mov     [ebp+var_4], 0
.text:00001843                 mov     [ebp+var_8], 0
.text:0000184A                 jmp     short loc_1855
.text:0000184C ; ---------------------------------------------------------------------------
.text:0000184C
.text:0000184C loc_184C:                               ; CODE XREF: NCompress::NDeflate::NEncoder::Huffman_GetPrice(uint const *,uchar const *,uint)+4Ej
.text:0000184C                 mov     eax, [ebp+var_8]
.text:0000184F                 add     eax, 1
.text:00001852                 mov     [ebp+var_8], eax
.text:00001855
.text:00001855 loc_1855:                               ; CODE XREF: NCompress::NDeflate::NEncoder::Huffman_GetPrice(uint const *,uchar const *,uint)+22j
.text:00001855                 mov     ecx, [ebp+var_8]
.text:00001858                 cmp     ecx, [ebp+arg_8]
.text:0000185B                 jnb     short loc_1878
.text:0000185D                 mov     edx, [ebp+arg_4]
.text:00001860                 add     edx, [ebp+var_8]
.text:00001863                 movzx   eax, byte ptr [edx]
.text:00001866                 mov     ecx, [ebp+var_8]
.text:00001869                 mov     edx, [ebp+this]
.text:0000186C                 imul    eax, [edx+ecx*4]
.text:00001870                 add     eax, [ebp+var_4]
.text:00001873                 mov     [ebp+var_4], eax
.text:00001876                 jmp     short loc_184C
.text:00001878 ; ---------------------------------------------------------------------------
.text:00001878
.text:00001878 loc_1878:                               ; CODE XREF: NCompress::NDeflate::NEncoder::Huffman_GetPrice(uint const *,uchar const *,uint)+33j
.text:00001878                 mov     eax, [ebp+var_4]
.text:0000187B                 mov     esp, ebp
.text:0000187D                 pop     ebp
.text:0000187E                 retn    0Ch
.text:0000187E ?Huffman_GetPrice@NEncoder@NDeflate@NCompress@@YGIPBIPBEI@Z endp
.text:0000187E
.text:0000187E ; ---------------------------------------------------------------------------
.text:00001881                 align 8
.text:00001888
.text:00001888 ; =============== S U B R O U T I N E =======================================
.text:00001888
.text:00001888 ; Attributes: bp-based frame
.text:00001888
.text:00001888 ; unsigned int NCompress::NDeflate::NEncoder::Huffman_GetPrice_Spec(NCompress::NDeflate::NEncoder *__hidden this, const unsigned int *, const unsigned __int8 *, unsigned int, const unsigned __int8 *, unsigned int)
.text:00001888                 public ?Huffman_GetPrice_Spec@NEncoder@NDeflate@NCompress@@YGIPBIPBEI1I@Z
.text:00001888 ?Huffman_GetPrice_Spec@NEncoder@NDeflate@NCompress@@YGIPBIPBEI1I@Z proc near
.text:00001888                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetLzBlockPrice(void)+36p
.text:00001888                                         ; NCompress::NDeflate::NEncoder::CCoder::GetLzBlockPrice(void)+5Ap ...
.text:00001888
.text:00001888 this            = dword ptr  8
.text:00001888 arg_4           = dword ptr  0Ch
.text:00001888 arg_8           = dword ptr  10h
.text:00001888 arg_C           = dword ptr  14h
.text:00001888 arg_10          = dword ptr  18h
.text:00001888
.text:00001888                 push    ebp
.text:00001889                 mov     ebp, esp
.text:0000188B                 push    esi             ; unsigned int
.text:0000188C                 mov     eax, [ebp+arg_8]
.text:0000188F                 push    eax             ; unsigned __int8 *
.text:00001890                 mov     ecx, [ebp+arg_4]
.text:00001893                 push    ecx             ; unsigned int *
.text:00001894                 mov     edx, [ebp+this]
.text:00001897                 push    edx             ; this
.text:00001898                 call    ?Huffman_GetPrice@NEncoder@NDeflate@NCompress@@YGIPBIPBEI@Z ; NCompress::NDeflate::NEncoder::Huffman_GetPrice(uint const *,uchar const *,uint)
.text:0000189D                 mov     esi, eax
.text:0000189F                 mov     eax, [ebp+arg_8]
.text:000018A2                 sub     eax, [ebp+arg_10]
.text:000018A5                 push    eax             ; unsigned __int8 *
.text:000018A6                 mov     ecx, [ebp+arg_C]
.text:000018A9                 push    ecx             ; unsigned int *
.text:000018AA                 mov     edx, [ebp+arg_10]
.text:000018AD                 mov     eax, [ebp+this]
.text:000018B0                 lea     ecx, [eax+edx*4]
.text:000018B3                 push    ecx             ; this
.text:000018B4                 call    ?Huffman_GetPrice@NEncoder@NDeflate@NCompress@@YGIPBIPBEI@Z ; NCompress::NDeflate::NEncoder::Huffman_GetPrice(uint const *,uchar const *,uint)
.text:000018B9                 add     eax, esi
.text:000018BB                 pop     esi
.text:000018BC                 cmp     ebp, esp
.text:000018BE                 call    __RTC_CheckEsp
.text:000018C3                 pop     ebp
.text:000018C4                 retn    14h
.text:000018C4 ?Huffman_GetPrice_Spec@NEncoder@NDeflate@NCompress@@YGIPBIPBEI1I@Z endp
.text:000018C4
.text:000018C4 ; ---------------------------------------------------------------------------
.text:000018C7                 align 4
.text:000018C8
.text:000018C8 ; =============== S U B R O U T I N E =======================================
.text:000018C8
.text:000018C8 ; Attributes: bp-based frame
.text:000018C8
.text:000018C8 ; unsigned int __thiscall NCompress::NDeflate::NEncoder::CCoder::GetLzBlockPrice(NCompress::NDeflate::NEncoder::CCoder *__hidden this)
.text:000018C8                 public ?GetLzBlockPrice@CCoder@NEncoder@NDeflate@NCompress@@QBEIXZ
.text:000018C8 ?GetLzBlockPrice@CCoder@NEncoder@NDeflate@NCompress@@QBEIXZ proc near
.text:000018C8                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+299p
.text:000018C8                                         ; NCompress::NDeflate::NEncoder::CCoder::TryFixedBlock(uint)+7Bp
.text:000018C8
.text:000018C8 var_4           = dword ptr -4
.text:000018C8
.text:000018C8                 push    ebp
.text:000018C9                 mov     ebp, esp
.text:000018CB                 push    ecx
.text:000018CC                 push    esi             ; unsigned int
.text:000018CD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000018D4                 mov     [ebp+var_4], ecx
.text:000018D7                 push    offset unk_101  ; unsigned __int8 *
.text:000018DC                 mov     eax, [ebp+var_4]
.text:000018DF                 mov     ecx, [eax+4D8h]
.text:000018E5                 push    ecx             ; unsigned int
.text:000018E6                 push    offset _kLevelDirectBits ; unsigned __int8 *
.text:000018EB                 mov     edx, [ebp+var_4]
.text:000018EE                 add     edx, 734h
.text:000018F4                 push    edx             ; unsigned int *
.text:000018F5                 mov     eax, [ebp+var_4]
.text:000018F8                 add     eax, 874h
.text:000018FD                 push    eax             ; this
.text:000018FE                 call    ?Huffman_GetPrice_Spec@NEncoder@NDeflate@NCompress@@YGIPBIPBEI1I@Z ; NCompress::NDeflate::NEncoder::Huffman_GetPrice_Spec(uint const *,uchar const *,uint,uchar const *,uint)
.text:00001903                 mov     esi, eax
.text:00001905                 push    0               ; unsigned __int8 *
.text:00001907                 push    offset _kDistDirectBits ; unsigned int
.text:0000190C                 push    offset _kLenStart64 ; unsigned __int8 *
.text:0000190E                 mov     ecx, [ebp+var_4]
.text:00001911                 add     ecx, 854h
.text:00001917                 push    ecx             ; unsigned int *
.text:00001918                 mov     edx, [ebp+var_4]
.text:0000191B                 add     edx, 0CF4h
.text:00001921                 push    edx             ; this
.text:00001922                 call    ?Huffman_GetPrice_Spec@NEncoder@NDeflate@NCompress@@YGIPBIPBEI1I@Z ; NCompress::NDeflate::NEncoder::Huffman_GetPrice_Spec(uint const *,uchar const *,uint,uchar const *,uint)
.text:00001927                 add     eax, esi
.text:00001929                 pop     esi
.text:0000192A                 add     esp, 4
.text:0000192D                 cmp     ebp, esp
.text:0000192F                 call    __RTC_CheckEsp
.text:00001934                 mov     esp, ebp
.text:00001936                 pop     ebp
.text:00001937                 retn
.text:00001937 ?GetLzBlockPrice@CCoder@NEncoder@NDeflate@NCompress@@QBEIXZ endp
.text:00001937
.text:00001938
.text:00001938 ; =============== S U B R O U T I N E =======================================
.text:00001938
.text:00001938 ; Attributes: bp-based frame
.text:00001938
.text:00001938 ; void __thiscall NCompress::NDeflate::NEncoder::CCoder::TryBlock(NCompress::NDeflate::NEncoder::CCoder *__hidden this)
.text:00001938                 public ?TryBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEXXZ
.text:00001938 ?TryBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEXXZ proc near
.text:00001938                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+92p
.text:00001938                                         ; NCompress::NDeflate::NEncoder::CCoder::TryFixedBlock(uint)+73p
.text:00001938
.text:00001938 var_28          = dword ptr -28h
.text:00001938 var_21          = byte ptr -21h
.text:00001938 var_20          = dword ptr -20h
.text:00001938 var_1C          = dword ptr -1Ch
.text:00001938 var_18          = dword ptr -18h
.text:00001938 var_10          = dword ptr -10h
.text:00001938 var_8           = dword ptr -8
.text:00001938 var_4           = dword ptr -4
.text:00001938
.text:00001938                 push    ebp
.text:00001939                 mov     ebp, esp
.text:0000193B                 sub     esp, 28h
.text:0000193E                 push    edi             ; unsigned int
.text:0000193F                 push    ecx
.text:00001940                 lea     edi, [ebp+var_28]
.text:00001943                 mov     ecx, 0Ah
.text:00001948                 mov     eax, 0CCCCCCCCh
.text:0000194D                 rep stosd
.text:0000194F                 pop     ecx
.text:00001950                 mov     [ebp+var_4], ecx
.text:00001953                 push    480h            ; Size
.text:00001958                 push    0               ; Val
.text:0000195A                 mov     eax, [ebp+var_4]
.text:0000195D                 add     eax, 874h
.text:00001962                 push    eax             ; Dst
.text:00001963                 call    _memset
.text:00001968                 add     esp, 0Ch
.text:0000196B                 push    80h ; 'Ç'       ; Size
.text:00001970                 push    0               ; Val
.text:00001972                 mov     ecx, [ebp+var_4]
.text:00001975                 add     ecx, 0CF4h
.text:0000197B                 push    ecx             ; Dst
.text:0000197C                 call    _memset
.text:00001981                 add     esp, 0Ch
.text:00001984                 mov     edx, [ebp+var_4]
.text:00001987                 mov     dword ptr [edx+500h], 0
.text:00001991                 mov     eax, [ebp+var_4]
.text:00001994                 mov     ecx, [eax+12D4h]
.text:0000199A                 mov     [ebp+var_8], ecx
.text:0000199D                 mov     edx, [ebp+var_4]
.text:000019A0                 mov     dword ptr [edx+12D4h], 0
.text:000019AA
.text:000019AA loc_19AA:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryBlock(void)+217j
.text:000019AA                 mov     eax, [ebp+var_4]
.text:000019AD                 mov     ecx, [ebp+var_4]
.text:000019B0                 mov     edx, [eax+510h]
.text:000019B6                 cmp     edx, [ecx+50Ch]
.text:000019BC                 jnz     short loc_1A10
.text:000019BE                 mov     eax, [ebp+var_4]
.text:000019C1                 cmp     dword ptr [eax+4B8h], 9F7E6h
.text:000019CB                 jnb     short loc_1A0B
.text:000019CD                 mov     ecx, [ebp+var_4]
.text:000019D0                 mov     edx, [ecx+12D4h]
.text:000019D6                 cmp     edx, [ebp+var_8]
.text:000019D9                 jnb     short loc_1A0B
.text:000019DB                 mov     eax, [ebp+var_4]
.text:000019DE                 movzx   ecx, byte ptr [eax+504h]
.text:000019E5                 test    ecx, ecx
.text:000019E7                 jnz     short loc_1A10
.text:000019E9                 mov     edx, [ebp+var_4]
.text:000019EC                 mov     eax, [ebp+var_4]
.text:000019EF                 mov     ecx, [edx+0Ch]
.text:000019F2                 sub     ecx, [eax+4]
.text:000019F5                 jz      short loc_1A0B
.text:000019F7                 mov     edx, [ebp+var_4]
.text:000019FA                 mov     eax, [ebp+var_4]
.text:000019FD                 mov     ecx, [edx+500h]
.text:00001A03                 cmp     ecx, [eax+4C8h]
.text:00001A09                 jb      short loc_1A10
.text:00001A0B
.text:00001A0B loc_1A0B:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryBlock(void)+93j
.text:00001A0B                                         ; NCompress::NDeflate::NEncoder::CCoder::TryBlock(void)+A1j ...
.text:00001A0B                 jmp     loc_1B54
.text:00001A10 ; ---------------------------------------------------------------------------
.text:00001A10
.text:00001A10 loc_1A10:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryBlock(void)+84j
.text:00001A10                                         ; NCompress::NDeflate::NEncoder::CCoder::TryBlock(void)+AFj ...
.text:00001A10                 mov     edx, [ebp+var_4]
.text:00001A13                 movzx   eax, byte ptr [edx+4ACh]
.text:00001A1A                 test    eax, eax
.text:00001A1C                 jz      short loc_1A2F
.text:00001A1E                 lea     ecx, [ebp+var_10]
.text:00001A21                 push    ecx             ; unsigned int *
.text:00001A22                 mov     ecx, [ebp+var_4] ; this
.text:00001A25                 call    ?GetOptimalFast@CCoder@NEncoder@NDeflate@NCompress@@QAEIAAI@Z ; NCompress::NDeflate::NEncoder::CCoder::GetOptimalFast(uint &)
.text:00001A2A                 mov     [ebp+var_18], eax
.text:00001A2D                 jmp     short loc_1A3E
.text:00001A2F ; ---------------------------------------------------------------------------
.text:00001A2F
.text:00001A2F loc_1A2F:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryBlock(void)+E4j
.text:00001A2F                 lea     edx, [ebp+var_10]
.text:00001A32                 push    edx             ; unsigned int *
.text:00001A33                 mov     ecx, [ebp+var_4] ; this
.text:00001A36                 call    ?GetOptimal@CCoder@NEncoder@NDeflate@NCompress@@QAEIAAI@Z ; NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)
.text:00001A3B                 mov     [ebp+var_18], eax
.text:00001A3E
.text:00001A3E loc_1A3E:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryBlock(void)+F5j
.text:00001A3E                 mov     eax, [ebp+var_4]
.text:00001A41                 mov     ecx, [eax+500h]
.text:00001A47                 mov     edx, [ebp+var_4]
.text:00001A4A                 mov     eax, [edx+4A0h]
.text:00001A50                 lea     ecx, [eax+ecx*4]
.text:00001A53                 mov     [ebp+var_1C], ecx
.text:00001A56                 mov     edx, [ebp+var_4]
.text:00001A59                 mov     eax, [edx+500h]
.text:00001A5F                 add     eax, 1
.text:00001A62                 mov     ecx, [ebp+var_4]
.text:00001A65                 mov     [ecx+500h], eax
.text:00001A6B                 cmp     [ebp+var_18], 3
.text:00001A6F                 jb      short loc_1ADF
.text:00001A71                 mov     edx, [ebp+var_18]
.text:00001A74                 sub     edx, 3
.text:00001A77                 mov     [ebp+var_20], edx
.text:00001A7A                 mov     eax, [ebp+var_1C]
.text:00001A7D                 mov     cx, word ptr [ebp+var_20]
.text:00001A81                 mov     [eax], cx
.text:00001A84                 mov     edx, [ebp+var_20]
.text:00001A87                 movzx   eax, ds:_g_LenSlots[edx]
.text:00001A8E                 mov     ecx, [ebp+var_4]
.text:00001A91                 mov     edx, [ecx+eax*4+0C78h]
.text:00001A98                 add     edx, 1
.text:00001A9B                 mov     eax, [ebp+var_20]
.text:00001A9E                 movzx   ecx, ds:_g_LenSlots[eax]
.text:00001AA5                 mov     eax, [ebp+var_4]
.text:00001AA8                 mov     [eax+ecx*4+0C78h], edx
.text:00001AAF                 mov     ecx, [ebp+var_1C]
.text:00001AB2                 mov     dx, word ptr [ebp+var_10]
.text:00001AB6                 mov     [ecx+2], dx
.text:00001ABA                 mov     eax, [ebp+var_10]
.text:00001ABD                 push    eax             ; this
.text:00001ABE                 call    ?GetPosSlot@NEncoder@NDeflate@NCompress@@YGII@Z ; NCompress::NDeflate::NEncoder::GetPosSlot(uint)
.text:00001AC3                 mov     ecx, [ebp+var_4]
.text:00001AC6                 lea     edx, [ecx+eax*4+0CF4h]
.text:00001ACD                 mov     [ebp+var_28], edx
.text:00001AD0                 mov     eax, [ebp+var_28]
.text:00001AD3                 mov     ecx, [eax]
.text:00001AD5                 add     ecx, 1
.text:00001AD8                 mov     edx, [ebp+var_28]
.text:00001ADB                 mov     [edx], ecx
.text:00001ADD                 jmp     short loc_1B25
.text:00001ADF ; ---------------------------------------------------------------------------
.text:00001ADF
.text:00001ADF loc_1ADF:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryBlock(void)+137j
.text:00001ADF                 mov     eax, [ebp+var_4]
.text:00001AE2                 mov     ecx, [ebp+var_4]
.text:00001AE5                 mov     edx, [eax]
.text:00001AE7                 sub     edx, [ecx+508h]
.text:00001AED                 mov     al, [edx]
.text:00001AEF                 mov     [ebp+var_21], al
.text:00001AF2                 movzx   ecx, [ebp+var_21]
.text:00001AF6                 mov     edx, [ebp+var_4]
.text:00001AF9                 mov     eax, [edx+ecx*4+874h]
.text:00001B00                 add     eax, 1
.text:00001B03                 movzx   ecx, [ebp+var_21]
.text:00001B07                 mov     edx, [ebp+var_4]
.text:00001B0A                 mov     [edx+ecx*4+874h], eax
.text:00001B11                 mov     ecx, [ebp+var_1C] ; this
.text:00001B14                 call    ?SetAsLiteral@CCodeValue@NEncoder@NDeflate@NCompress@@QAEXXZ ; NCompress::NDeflate::NEncoder::CCodeValue::SetAsLiteral(void)
.text:00001B19                 movzx   ax, [ebp+var_21]
.text:00001B1E                 mov     ecx, [ebp+var_1C]
.text:00001B21                 mov     [ecx+2], ax
.text:00001B25
.text:00001B25 loc_1B25:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryBlock(void)+1A5j
.text:00001B25                 mov     edx, [ebp+var_4]
.text:00001B28                 mov     eax, [edx+508h]
.text:00001B2E                 sub     eax, [ebp+var_18]
.text:00001B31                 mov     ecx, [ebp+var_4]
.text:00001B34                 mov     [ecx+508h], eax
.text:00001B3A                 mov     edx, [ebp+var_4]
.text:00001B3D                 mov     eax, [edx+12D4h]
.text:00001B43                 add     eax, [ebp+var_18]
.text:00001B46                 mov     ecx, [ebp+var_4]
.text:00001B49                 mov     [ecx+12D4h], eax
.text:00001B4F                 jmp     loc_19AA
.text:00001B54 ; ---------------------------------------------------------------------------
.text:00001B54
.text:00001B54 loc_1B54:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryBlock(void):loc_1A0Bj
.text:00001B54                 mov     edx, [ebp+var_4]
.text:00001B57                 mov     eax, [edx+0C74h]
.text:00001B5D                 add     eax, 1
.text:00001B60                 mov     ecx, [ebp+var_4]
.text:00001B63                 mov     [ecx+0C74h], eax
.text:00001B69                 mov     edx, [ebp+var_4]
.text:00001B6C                 mov     eax, [edx+508h]
.text:00001B72                 mov     ecx, [ebp+var_4]
.text:00001B75                 add     eax, [ecx+12D4h]
.text:00001B7B                 mov     edx, [ebp+var_4]
.text:00001B7E                 mov     [edx+508h], eax
.text:00001B84                 mov     eax, [ebp+var_4]
.text:00001B87                 mov     byte ptr [eax+504h], 1
.text:00001B8E                 push    edx
.text:00001B8F                 mov     ecx, ebp
.text:00001B91                 push    eax
.text:00001B92                 lea     edx, $LN15
.text:00001B98                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001B9D                 pop     eax
.text:00001B9E                 pop     edx
.text:00001B9F                 pop     edi
.text:00001BA0                 add     esp, 28h
.text:00001BA3                 cmp     ebp, esp
.text:00001BA5                 call    __RTC_CheckEsp
.text:00001BAA                 mov     esp, ebp
.text:00001BAC                 pop     ebp
.text:00001BAD                 retn
.text:00001BAD ?TryBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEXXZ endp
.text:00001BAD
.text:00001BAD ; ---------------------------------------------------------------------------
.text:00001BAE                 align 10h
.text:00001BB0 $LN15           dd 1                    ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::TryBlock(void)+25Ao
.text:00001BB4                 dd offset $LN14
.text:00001BB8 $LN14           dd 0FFFFFFF0h, 4        ; DATA XREF: .text:00001BB4o
.text:00001BC0                 dd offset $LN13
.text:00001BC4 ; ---------------------------------------------------------------------------
.text:00001BC4
.text:00001BC4 $LN13:                                  ; DATA XREF: .text:00001BC0o
.text:00001BC4                 jo      short loc_1C35
.text:00001BC6                 jnb     short $+2       ; NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)
.text:00001BC8
.text:00001BC8 ; =============== S U B R O U T I N E =======================================
.text:00001BC8
.text:00001BC8 ; Attributes: bp-based frame
.text:00001BC8
.text:00001BC8 ; void __thiscall NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::NEncoder::CCoder *this, const struct NCompress::NDeflate::CLevels *)
.text:00001BC8                 public ?SetPrices@CCoder@NEncoder@NDeflate@NCompress@@QAEXABUCLevels@34@@Z
.text:00001BC8 ?SetPrices@CCoder@NEncoder@NDeflate@NCompress@@QAEXABUCLevels@34@@Z proc near
.text:00001BC8                                         ; CODE XREF: .text:00001BC6j
.text:00001BC8                                         ; NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+60p ...
.text:00001BC8
.text:00001BC8 var_18          = dword ptr -18h
.text:00001BC8 var_14          = dword ptr -14h
.text:00001BC8 var_10          = dword ptr -10h
.text:00001BC8 var_C           = dword ptr -0Ch
.text:00001BC8 var_8           = dword ptr -8
.text:00001BC8 var_4           = dword ptr -4
.text:00001BC8 arg_0           = dword ptr  8
.text:00001BC8
.text:00001BC8                 push    ebp
.text:00001BC9                 mov     ebp, esp
.text:00001BCB                 sub     esp, 18h
.text:00001BCE                 mov     eax, 0CCCCCCCCh
.text:00001BD3                 mov     [ebp+var_18], eax
.text:00001BD6                 mov     [ebp+var_14], eax
.text:00001BD9                 mov     [ebp+var_10], eax
.text:00001BDC                 mov     [ebp+var_C], eax
.text:00001BDF                 mov     [ebp+var_8], eax
.text:00001BE2                 mov     [ebp+var_4], eax
.text:00001BE5                 mov     [ebp+var_4], ecx
.text:00001BE8                 mov     eax, [ebp+var_4]
.text:00001BEB                 movzx   ecx, byte ptr [eax+4ACh]
.text:00001BF2                 test    ecx, ecx
.text:00001BF4                 jz      short loc_1BFB
.text:00001BF6                 jmp     loc_1D13
.text:00001BFB ; ---------------------------------------------------------------------------
.text:00001BFB
.text:00001BFB loc_1BFB:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)+2Cj
.text:00001BFB                 mov     [ebp+var_8], 0
.text:00001C02                 jmp     short loc_1C0D
.text:00001C04 ; ---------------------------------------------------------------------------
.text:00001C04
.text:00001C04 loc_1C04:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)+7Cj
.text:00001C04                 mov     edx, [ebp+var_8]
.text:00001C07                 add     edx, 1
.text:00001C0A                 mov     [ebp+var_8], edx
.text:00001C0D
.text:00001C0D loc_1C0D:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)+3Aj
.text:00001C0D                 cmp     [ebp+var_8], 100h
.text:00001C14                 jnb     short loc_1C46
.text:00001C16                 mov     eax, [ebp+arg_0]
.text:00001C19                 add     eax, [ebp+var_8]
.text:00001C1C                 mov     cl, [eax]
.text:00001C1E                 mov     byte ptr [ebp+var_C+3], cl
.text:00001C21                 movzx   edx, byte ptr [ebp+var_C+3]
.text:00001C25                 test    edx, edx
.text:00001C27                 jz      short loc_1C31
.text:00001C29                 mov     al, byte ptr [ebp+var_C+3]
.text:00001C2C                 mov     byte ptr [ebp+var_14+1], al
.text:00001C2F                 jmp     short loc_1C35
.text:00001C31 ; ---------------------------------------------------------------------------
.text:00001C31
.text:00001C31 loc_1C31:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)+5Fj
.text:00001C31                 mov     byte ptr [ebp+var_14+1], 0Bh
.text:00001C35
.text:00001C35 loc_1C35:                               ; CODE XREF: .text:$LN13j
.text:00001C35                                         ; NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)+67j
.text:00001C35                 mov     ecx, [ebp+var_4]
.text:00001C38                 add     ecx, [ebp+var_8]
.text:00001C3B                 mov     dl, byte ptr [ebp+var_14+1]
.text:00001C3E                 mov     [ecx+514h], dl
.text:00001C44                 jmp     short loc_1C04
.text:00001C46 ; ---------------------------------------------------------------------------
.text:00001C46
.text:00001C46 loc_1C46:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)+4Cj
.text:00001C46                 mov     [ebp+var_8], 0
.text:00001C4D                 jmp     short loc_1C58
.text:00001C4F ; ---------------------------------------------------------------------------
.text:00001C4F
.text:00001C4F loc_1C4F:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)+F0j
.text:00001C4F                 mov     eax, [ebp+var_8]
.text:00001C52                 add     eax, 1
.text:00001C55                 mov     [ebp+var_8], eax
.text:00001C58
.text:00001C58 loc_1C58:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)+85j
.text:00001C58                 mov     ecx, [ebp+var_4]
.text:00001C5B                 mov     edx, [ebp+var_8]
.text:00001C5E                 cmp     edx, [ecx+4CCh]
.text:00001C64                 jnb     short loc_1CBA
.text:00001C66                 mov     eax, [ebp+var_8]
.text:00001C69                 movzx   ecx, ds:_g_LenSlots[eax]
.text:00001C70                 mov     [ebp+var_10], ecx
.text:00001C73                 mov     edx, [ebp+arg_0]
.text:00001C76                 add     edx, [ebp+var_10]
.text:00001C79                 mov     al, [edx+101h]
.text:00001C7F                 mov     byte ptr [ebp+var_14+3], al
.text:00001C82                 movzx   ecx, byte ptr [ebp+var_14+3]
.text:00001C86                 test    ecx, ecx
.text:00001C88                 jz      short loc_1C92
.text:00001C8A                 mov     dl, byte ptr [ebp+var_14+3]
.text:00001C8D                 mov     byte ptr [ebp+var_14], dl
.text:00001C90                 jmp     short loc_1C96
.text:00001C92 ; ---------------------------------------------------------------------------
.text:00001C92
.text:00001C92 loc_1C92:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)+C0j
.text:00001C92                 mov     byte ptr [ebp+var_14], 0Bh
.text:00001C96
.text:00001C96 loc_1C96:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)+C8j
.text:00001C96                 movzx   eax, byte ptr [ebp+var_14]
.text:00001C9A                 mov     ecx, [ebp+var_4]
.text:00001C9D                 mov     edx, [ecx+4D8h]
.text:00001CA3                 mov     ecx, [ebp+var_10]
.text:00001CA6                 movzx   edx, byte ptr [edx+ecx]
.text:00001CAA                 add     eax, edx
.text:00001CAC                 mov     ecx, [ebp+var_4]
.text:00001CAF                 add     ecx, [ebp+var_8]
.text:00001CB2                 mov     [ecx+614h], al
.text:00001CB8                 jmp     short loc_1C4F
.text:00001CBA ; ---------------------------------------------------------------------------
.text:00001CBA
.text:00001CBA loc_1CBA:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)+9Cj
.text:00001CBA                 mov     [ebp+var_8], 0
.text:00001CC1                 jmp     short loc_1CCC
.text:00001CC3 ; ---------------------------------------------------------------------------
.text:00001CC3
.text:00001CC3 loc_1CC3:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)+149j
.text:00001CC3                 mov     edx, [ebp+var_8]
.text:00001CC6                 add     edx, 1
.text:00001CC9                 mov     [ebp+var_8], edx
.text:00001CCC
.text:00001CCC loc_1CCC:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)+F9j
.text:00001CCC                 cmp     [ebp+var_8], 20h ; ' '
.text:00001CD0                 jnb     short loc_1D13
.text:00001CD2                 mov     eax, [ebp+arg_0]
.text:00001CD5                 add     eax, [ebp+var_8]
.text:00001CD8                 mov     cl, [eax+120h]
.text:00001CDE                 mov     byte ptr [ebp+var_14+2], cl
.text:00001CE1                 movzx   edx, byte ptr [ebp+var_14+2]
.text:00001CE5                 test    edx, edx
.text:00001CE7                 jz      short loc_1CF1
.text:00001CE9                 mov     al, byte ptr [ebp+var_14+2]
.text:00001CEC                 mov     byte ptr [ebp+var_18+3], al
.text:00001CEF                 jmp     short loc_1CF5
.text:00001CF1 ; ---------------------------------------------------------------------------
.text:00001CF1
.text:00001CF1 loc_1CF1:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)+11Fj
.text:00001CF1                 mov     byte ptr [ebp+var_18+3], 6
.text:00001CF5
.text:00001CF5 loc_1CF5:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)+127j
.text:00001CF5                 movzx   ecx, byte ptr [ebp+var_18+3]
.text:00001CF9                 mov     edx, [ebp+var_8]
.text:00001CFC                 movzx   eax, _kDistDirectBits[edx]
.text:00001D03                 add     ecx, eax
.text:00001D05                 mov     edx, [ebp+var_4]
.text:00001D08                 add     edx, [ebp+var_8]
.text:00001D0B                 mov     [edx+714h], cl
.text:00001D11                 jmp     short loc_1CC3
.text:00001D13 ; ---------------------------------------------------------------------------
.text:00001D13
.text:00001D13 loc_1D13:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)+2Ej
.text:00001D13                                         ; NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)+108j
.text:00001D13                 mov     esp, ebp
.text:00001D15                 pop     ebp
.text:00001D16                 retn    4
.text:00001D16 ?SetPrices@CCoder@NEncoder@NDeflate@NCompress@@QAEXABUCLevels@34@@Z endp
.text:00001D16
.text:00001D16 ; ---------------------------------------------------------------------------
.text:00001D19                 db 0Fh dup(0CCh)
.text:00001D28
.text:00001D28 ; =============== S U B R O U T I N E =======================================
.text:00001D28
.text:00001D28 ; Attributes: bp-based frame
.text:00001D28
.text:00001D28 ; void __stdcall NCompress::NDeflate::NEncoder::Huffman_ReverseBits(NCompress::NDeflate::NEncoder *this, unsigned int *, const unsigned __int8 *, unsigned int)
.text:00001D28                 public ?Huffman_ReverseBits@NEncoder@NDeflate@NCompress@@YGXPAIPBEI@Z
.text:00001D28 ?Huffman_ReverseBits@NEncoder@NDeflate@NCompress@@YGXPAIPBEI@Z proc near
.text:00001D28                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::WriteBlock(void)+3Bp
.text:00001D28                                         ; NCompress::NDeflate::NEncoder::CCoder::WriteBlock(void)+55p ...
.text:00001D28
.text:00001D28 var_8           = dword ptr -8
.text:00001D28 var_4           = dword ptr -4
.text:00001D28 this            = dword ptr  8
.text:00001D28 arg_4           = dword ptr  0Ch
.text:00001D28 arg_8           = dword ptr  10h
.text:00001D28
.text:00001D28                 push    ebp
.text:00001D29                 mov     ebp, esp
.text:00001D2B                 sub     esp, 8
.text:00001D2E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001D35                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001D3C                 mov     [ebp+var_4], 0
.text:00001D43                 jmp     short loc_1D4E
.text:00001D45 ; ---------------------------------------------------------------------------
.text:00001D45
.text:00001D45 loc_1D45:                               ; CODE XREF: NCompress::NDeflate::NEncoder::Huffman_ReverseBits(uint *,uchar const *,uint)+C5j
.text:00001D45                 mov     eax, [ebp+var_4]
.text:00001D48                 add     eax, 1
.text:00001D4B                 mov     [ebp+var_4], eax
.text:00001D4E
.text:00001D4E loc_1D4E:                               ; CODE XREF: NCompress::NDeflate::NEncoder::Huffman_ReverseBits(uint *,uchar const *,uint)+1Bj
.text:00001D4E                 mov     ecx, [ebp+var_4]
.text:00001D51                 cmp     ecx, [ebp+arg_8]
.text:00001D54                 jnb     loc_1DF2
.text:00001D5A                 mov     edx, [ebp+var_4]
.text:00001D5D                 mov     eax, [ebp+this]
.text:00001D60                 mov     ecx, [eax+edx*4]
.text:00001D63                 mov     [ebp+var_8], ecx
.text:00001D66                 mov     edx, [ebp+var_8]
.text:00001D69                 and     edx, 5555h
.text:00001D6F                 shl     edx, 1
.text:00001D71                 mov     eax, [ebp+var_8]
.text:00001D74                 and     eax, 0AAAAh
.text:00001D79                 shr     eax, 1
.text:00001D7B                 or      edx, eax
.text:00001D7D                 mov     [ebp+var_8], edx
.text:00001D80                 mov     ecx, [ebp+var_8]
.text:00001D83                 and     ecx, 3333h
.text:00001D89                 shl     ecx, 2
.text:00001D8C                 mov     edx, [ebp+var_8]
.text:00001D8F                 and     edx, 0CCCCh
.text:00001D95                 shr     edx, 2
.text:00001D98                 or      ecx, edx
.text:00001D9A                 mov     [ebp+var_8], ecx
.text:00001D9D                 mov     eax, [ebp+var_8]
.text:00001DA0                 and     eax, 0F0Fh
.text:00001DA5                 shl     eax, 4
.text:00001DA8                 mov     ecx, [ebp+var_8]
.text:00001DAB                 and     ecx, 0F0F0h
.text:00001DB1                 shr     ecx, 4
.text:00001DB4                 or      eax, ecx
.text:00001DB6                 mov     [ebp+var_8], eax
.text:00001DB9                 mov     edx, [ebp+var_8]
.text:00001DBC                 and     edx, 0FFh
.text:00001DC2                 shl     edx, 8
.text:00001DC5                 mov     eax, [ebp+var_8]
.text:00001DC8                 and     eax, 0FF00h
.text:00001DCD                 shr     eax, 8
.text:00001DD0                 or      edx, eax
.text:00001DD2                 mov     ecx, [ebp+arg_4]
.text:00001DD5                 add     ecx, [ebp+var_4]
.text:00001DD8                 movzx   eax, byte ptr [ecx]
.text:00001DDB                 mov     ecx, 10h
.text:00001DE0                 sub     ecx, eax
.text:00001DE2                 shr     edx, cl
.text:00001DE4                 mov     ecx, [ebp+var_4]
.text:00001DE7                 mov     eax, [ebp+this]
.text:00001DEA                 mov     [eax+ecx*4], edx
.text:00001DED                 jmp     loc_1D45
.text:00001DF2 ; ---------------------------------------------------------------------------
.text:00001DF2
.text:00001DF2 loc_1DF2:                               ; CODE XREF: NCompress::NDeflate::NEncoder::Huffman_ReverseBits(uint *,uchar const *,uint)+2Cj
.text:00001DF2                 mov     esp, ebp
.text:00001DF4                 pop     ebp
.text:00001DF5                 retn    0Ch
.text:00001DF5 ?Huffman_ReverseBits@NEncoder@NDeflate@NCompress@@YGXPAIPBEI@Z endp
.text:00001DF5
.text:00001DF8
.text:00001DF8 ; =============== S U B R O U T I N E =======================================
.text:00001DF8
.text:00001DF8 ; Attributes: bp-based frame
.text:00001DF8
.text:00001DF8 ; void __thiscall NCompress::NDeflate::NEncoder::CCoder::WriteBlock(NCompress::NDeflate::NEncoder::CCoder *__hidden this)
.text:00001DF8                 public ?WriteBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEXXZ
.text:00001DF8 ?WriteBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEXXZ proc near
.text:00001DF8                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+2ADp
.text:00001DF8
.text:00001DF8 var_1C          = dword ptr -1Ch
.text:00001DF8 var_18          = dword ptr -18h
.text:00001DF8 var_14          = dword ptr -14h
.text:00001DF8 var_10          = dword ptr -10h
.text:00001DF8 var_C           = dword ptr -0Ch
.text:00001DF8 var_8           = dword ptr -8
.text:00001DF8 var_4           = dword ptr -4
.text:00001DF8
.text:00001DF8                 push    ebp
.text:00001DF9                 mov     ebp, esp
.text:00001DFB                 sub     esp, 1Ch
.text:00001DFE                 mov     eax, 0CCCCCCCCh
.text:00001E03                 mov     [ebp+var_1C], eax
.text:00001E06                 mov     [ebp+var_18], eax
.text:00001E09                 mov     [ebp+var_14], eax
.text:00001E0C                 mov     [ebp+var_10], eax
.text:00001E0F                 mov     [ebp+var_C], eax
.text:00001E12                 mov     [ebp+var_8], eax
.text:00001E15                 mov     [ebp+var_4], eax
.text:00001E18                 mov     [ebp+var_4], ecx
.text:00001E1B                 push    offset _kLevelDirectBits ; unsigned __int8 *
.text:00001E20                 mov     eax, [ebp+var_4]
.text:00001E23                 add     eax, 734h
.text:00001E28                 push    eax             ; unsigned int *
.text:00001E29                 mov     ecx, [ebp+var_4]
.text:00001E2C                 add     ecx, 0D74h
.text:00001E32                 push    ecx             ; this
.text:00001E33                 call    ?Huffman_ReverseBits@NEncoder@NDeflate@NCompress@@YGXPAIPBEI@Z ; NCompress::NDeflate::NEncoder::Huffman_ReverseBits(uint *,uchar const *,uint)
.text:00001E38                 push    offset _kLenStart64 ; unsigned __int8 *
.text:00001E3A                 mov     edx, [ebp+var_4]
.text:00001E3D                 add     edx, 854h
.text:00001E43                 push    edx             ; unsigned int *
.text:00001E44                 mov     eax, [ebp+var_4]
.text:00001E47                 add     eax, 11F4h
.text:00001E4C                 push    eax             ; this
.text:00001E4D                 call    ?Huffman_ReverseBits@NEncoder@NDeflate@NCompress@@YGXPAIPBEI@Z ; NCompress::NDeflate::NEncoder::Huffman_ReverseBits(uint *,uchar const *,uint)
.text:00001E52                 mov     [ebp+var_8], 0
.text:00001E59                 jmp     short loc_1E64
.text:00001E5B ; ---------------------------------------------------------------------------
.text:00001E5B
.text:00001E5B loc_1E5B:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::WriteBlock(void):loc_1FABj
.text:00001E5B                 mov     ecx, [ebp+var_8]
.text:00001E5E                 add     ecx, 1
.text:00001E61                 mov     [ebp+var_8], ecx
.text:00001E64
.text:00001E64 loc_1E64:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::WriteBlock(void)+61j
.text:00001E64                 mov     edx, [ebp+var_4]
.text:00001E67                 mov     eax, [ebp+var_8]
.text:00001E6A                 cmp     eax, [edx+500h]
.text:00001E70                 jnb     loc_1FB0
.text:00001E76                 mov     ecx, [ebp+var_4]
.text:00001E79                 mov     edx, [ecx+4A0h]
.text:00001E7F                 mov     eax, [ebp+var_8]
.text:00001E82                 lea     ecx, [edx+eax*4]
.text:00001E85                 mov     [ebp+var_C], ecx
.text:00001E88                 mov     ecx, [ebp+var_C] ; this
.text:00001E8B                 call    ?IsLiteral@CCodeValue@NEncoder@NDeflate@NCompress@@QBE_NXZ ; NCompress::NDeflate::NEncoder::CCodeValue::IsLiteral(void)
.text:00001E90                 movzx   edx, al
.text:00001E93                 test    edx, edx
.text:00001E95                 jz      short loc_1ECF
.text:00001E97                 mov     eax, [ebp+var_C]
.text:00001E9A                 movzx   ecx, word ptr [eax+2]
.text:00001E9E                 mov     edx, [ebp+var_4]
.text:00001EA1                 movzx   eax, byte ptr [edx+ecx+734h]
.text:00001EA9                 push    eax             ; unsigned int
.text:00001EAA                 mov     ecx, [ebp+var_C]
.text:00001EAD                 movzx   edx, word ptr [ecx+2]
.text:00001EB1                 mov     eax, [ebp+var_4]
.text:00001EB4                 mov     ecx, [eax+edx*4+0D74h]
.text:00001EBB                 push    ecx             ; unsigned int
.text:00001EBC                 mov     ecx, [ebp+var_4]
.text:00001EBF                 add     ecx, 468h       ; this
.text:00001EC5                 call    ?WriteBits@CBitlEncoder@@QAEXII@Z ; CBitlEncoder::WriteBits(uint,uint)
.text:00001ECA                 jmp     loc_1FAB
.text:00001ECF ; ---------------------------------------------------------------------------
.text:00001ECF
.text:00001ECF loc_1ECF:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::WriteBlock(void)+9Dj
.text:00001ECF                 mov     edx, [ebp+var_C]
.text:00001ED2                 movzx   eax, word ptr [edx]
.text:00001ED5                 mov     [ebp+var_10], eax
.text:00001ED8                 mov     ecx, [ebp+var_10]
.text:00001EDB                 movzx   edx, ds:_g_LenSlots[ecx]
.text:00001EE2                 mov     [ebp+var_14], edx
.text:00001EE5                 mov     eax, [ebp+var_4]
.text:00001EE8                 add     eax, [ebp+var_14]
.text:00001EEB                 movzx   ecx, byte ptr [eax+835h]
.text:00001EF2                 push    ecx             ; unsigned int
.text:00001EF3                 mov     edx, [ebp+var_14]
.text:00001EF6                 mov     eax, [ebp+var_4]
.text:00001EF9                 mov     ecx, [eax+edx*4+1178h]
.text:00001F00                 push    ecx             ; unsigned int
.text:00001F01                 mov     ecx, [ebp+var_4]
.text:00001F04                 add     ecx, 468h       ; this
.text:00001F0A                 call    ?WriteBits@CBitlEncoder@@QAEXII@Z ; CBitlEncoder::WriteBits(uint,uint)
.text:00001F0F                 mov     edx, [ebp+var_4]
.text:00001F12                 mov     eax, [edx+4D8h]
.text:00001F18                 mov     ecx, [ebp+var_14]
.text:00001F1B                 movzx   edx, byte ptr [eax+ecx]
.text:00001F1F                 push    edx             ; unsigned int
.text:00001F20                 mov     eax, [ebp+var_4]
.text:00001F23                 mov     ecx, [eax+4D4h]
.text:00001F29                 mov     edx, [ebp+var_14]
.text:00001F2C                 movzx   eax, byte ptr [ecx+edx]
.text:00001F30                 mov     ecx, [ebp+var_10]
.text:00001F33                 sub     ecx, eax
.text:00001F35                 push    ecx             ; unsigned int
.text:00001F36                 mov     ecx, [ebp+var_4]
.text:00001F39                 add     ecx, 468h       ; this
.text:00001F3F                 call    ?WriteBits@CBitlEncoder@@QAEXII@Z ; CBitlEncoder::WriteBits(uint,uint)
.text:00001F44                 mov     edx, [ebp+var_C]
.text:00001F47                 movzx   eax, word ptr [edx+2]
.text:00001F4B                 mov     [ebp+var_18], eax
.text:00001F4E                 mov     ecx, [ebp+var_18]
.text:00001F51                 push    ecx             ; this
.text:00001F52                 call    ?GetPosSlot@NEncoder@NDeflate@NCompress@@YGII@Z ; NCompress::NDeflate::NEncoder::GetPosSlot(uint)
.text:00001F57                 mov     [ebp+var_1C], eax
.text:00001F5A                 mov     edx, [ebp+var_4]
.text:00001F5D                 add     edx, [ebp+var_1C]
.text:00001F60                 movzx   eax, byte ptr [edx+854h]
.text:00001F67                 push    eax             ; unsigned int
.text:00001F68                 mov     ecx, [ebp+var_1C]
.text:00001F6B                 mov     edx, [ebp+var_4]
.text:00001F6E                 mov     eax, [edx+ecx*4+11F4h]
.text:00001F75                 push    eax             ; unsigned int
.text:00001F76                 mov     ecx, [ebp+var_4]
.text:00001F79                 add     ecx, 468h       ; this
.text:00001F7F                 call    ?WriteBits@CBitlEncoder@@QAEXII@Z ; CBitlEncoder::WriteBits(uint,uint)
.text:00001F84                 mov     ecx, [ebp+var_1C]
.text:00001F87                 movzx   edx, _kDistDirectBits[ecx]
.text:00001F8E                 push    edx             ; unsigned int
.text:00001F8F                 mov     eax, [ebp+var_1C]
.text:00001F92                 mov     ecx, [ebp+var_18]
.text:00001F95                 sub     ecx, _kDistStart[eax*4]
.text:00001F9C                 push    ecx             ; unsigned int
.text:00001F9D                 mov     ecx, [ebp+var_4]
.text:00001FA0                 add     ecx, 468h       ; this
.text:00001FA6                 call    ?WriteBits@CBitlEncoder@@QAEXII@Z ; CBitlEncoder::WriteBits(uint,uint)
.text:00001FAB
.text:00001FAB loc_1FAB:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::WriteBlock(void)+D2j
.text:00001FAB                 jmp     loc_1E5B
.text:00001FB0 ; ---------------------------------------------------------------------------
.text:00001FB0
.text:00001FB0 loc_1FB0:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::WriteBlock(void)+78j
.text:00001FB0                 mov     edx, [ebp+var_4]
.text:00001FB3                 movzx   eax, byte ptr [edx+834h]
.text:00001FBA                 push    eax             ; unsigned int
.text:00001FBB                 mov     ecx, [ebp+var_4]
.text:00001FBE                 mov     edx, [ecx+1174h]
.text:00001FC4                 push    edx             ; unsigned int
.text:00001FC5                 mov     ecx, [ebp+var_4]
.text:00001FC8                 add     ecx, 468h       ; this
.text:00001FCE                 call    ?WriteBits@CBitlEncoder@@QAEXII@Z ; CBitlEncoder::WriteBits(uint,uint)
.text:00001FD3                 add     esp, 1Ch
.text:00001FD6                 cmp     ebp, esp
.text:00001FD8                 call    __RTC_CheckEsp
.text:00001FDD                 mov     esp, ebp
.text:00001FDF                 pop     ebp
.text:00001FE0                 retn
.text:00001FE0 ?WriteBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEXXZ endp
.text:00001FE0
.text:00001FE0 ; ---------------------------------------------------------------------------
.text:00001FE1                 align 8
.text:00001FE8
.text:00001FE8 ; =============== S U B R O U T I N E =======================================
.text:00001FE8
.text:00001FE8 ; Attributes: bp-based frame
.text:00001FE8
.text:00001FE8 ; void __thiscall NCompress::NDeflate::NEncoder::CCoder::WriteStoreBlock(NCompress::NDeflate::NEncoder::CCoder *this, unsigned int, unsigned int, bool)
.text:00001FE8                 public ?WriteStoreBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEXII_N@Z
.text:00001FE8 ?WriteStoreBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEXII_N@Z proc near
.text:00001FE8                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+94p
.text:00001FE8
.text:00001FE8 var_18          = dword ptr -18h
.text:00001FE8 var_14          = dword ptr -14h
.text:00001FE8 var_10          = dword ptr -10h
.text:00001FE8 var_C           = dword ptr -0Ch
.text:00001FE8 var_8           = dword ptr -8
.text:00001FE8 var_4           = dword ptr -4
.text:00001FE8 arg_0           = dword ptr  8
.text:00001FE8 arg_4           = dword ptr  0Ch
.text:00001FE8 arg_8           = byte ptr  10h
.text:00001FE8
.text:00001FE8                 push    ebp
.text:00001FE9                 mov     ebp, esp
.text:00001FEB                 sub     esp, 18h
.text:00001FEE                 mov     eax, 0CCCCCCCCh
.text:00001FF3                 mov     [ebp+var_18], eax
.text:00001FF6                 mov     [ebp+var_14], eax
.text:00001FF9                 mov     [ebp+var_10], eax
.text:00001FFC                 mov     [ebp+var_C], eax
.text:00001FFF                 mov     [ebp+var_8], eax
.text:00002002                 mov     [ebp+var_4], eax
.text:00002005                 mov     [ebp+var_4], ecx
.text:00002008
.text:00002008 loc_2008:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::WriteStoreBlock(uint,uint,bool)+FBj
.text:00002008                 cmp     [ebp+arg_0], 10000h
.text:0000200F                 jnb     short loc_2019
.text:00002011                 mov     eax, [ebp+arg_0]
.text:00002014                 mov     [ebp+var_14], eax
.text:00002017                 jmp     short loc_2020
.text:00002019 ; ---------------------------------------------------------------------------
.text:00002019
.text:00002019 loc_2019:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::WriteStoreBlock(uint,uint,bool)+27j
.text:00002019                 mov     [ebp+var_14], 0FFFFh
.text:00002020
.text:00002020 loc_2020:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::WriteStoreBlock(uint,uint,bool)+2Fj
.text:00002020                 mov     ecx, [ebp+var_14]
.text:00002023                 mov     [ebp+var_8], ecx
.text:00002026                 mov     edx, [ebp+arg_0]
.text:00002029                 sub     edx, [ebp+var_8]
.text:0000202C                 mov     [ebp+arg_0], edx
.text:0000202F                 movzx   eax, [ebp+arg_8]
.text:00002033                 test    eax, eax
.text:00002035                 jz      short loc_2046
.text:00002037                 cmp     [ebp+arg_0], 0
.text:0000203B                 jnz     short loc_2046
.text:0000203D                 mov     [ebp+var_18], 1
.text:00002044                 jmp     short loc_204D
.text:00002046 ; ---------------------------------------------------------------------------
.text:00002046
.text:00002046 loc_2046:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::WriteStoreBlock(uint,uint,bool)+4Dj
.text:00002046                                         ; NCompress::NDeflate::NEncoder::CCoder::WriteStoreBlock(uint,uint,bool)+53j
.text:00002046                 mov     [ebp+var_18], 0
.text:0000204D
.text:0000204D loc_204D:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::WriteStoreBlock(uint,uint,bool)+5Cj
.text:0000204D                 push    1               ; unsigned int
.text:0000204F                 mov     ecx, [ebp+var_18]
.text:00002052                 push    ecx             ; unsigned int
.text:00002053                 mov     ecx, [ebp+var_4] ; this
.text:00002056                 call    ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z ; NCompress::NDeflate::NEncoder::CCoder::WriteBits(uint,uint)
.text:0000205B                 push    2               ; unsigned int
.text:0000205D                 push    0               ; unsigned int
.text:0000205F                 mov     ecx, [ebp+var_4] ; this
.text:00002062                 call    ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z ; NCompress::NDeflate::NEncoder::CCoder::WriteBits(uint,uint)
.text:00002067                 mov     ecx, [ebp+var_4]
.text:0000206A                 add     ecx, 468h       ; this
.text:00002070                 call    ?FlushByte@CBitlEncoder@@QAEXXZ ; CBitlEncoder::FlushByte(void)
.text:00002075                 push    10h             ; unsigned int
.text:00002077                 movzx   edx, word ptr [ebp+var_8]
.text:0000207B                 push    edx             ; unsigned int
.text:0000207C                 mov     ecx, [ebp+var_4] ; this
.text:0000207F                 call    ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z ; NCompress::NDeflate::NEncoder::CCoder::WriteBits(uint,uint)
.text:00002084                 push    10h             ; unsigned int
.text:00002086                 mov     eax, [ebp+var_8]
.text:00002089                 not     eax
.text:0000208B                 movzx   ecx, ax
.text:0000208E                 push    ecx             ; unsigned int
.text:0000208F                 mov     ecx, [ebp+var_4] ; this
.text:00002092                 call    ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z ; NCompress::NDeflate::NEncoder::CCoder::WriteBits(uint,uint)
.text:00002097                 mov     edx, [ebp+var_4]
.text:0000209A                 mov     eax, [edx]
.text:0000209C                 sub     eax, [ebp+arg_4]
.text:0000209F                 mov     [ebp+var_C], eax
.text:000020A2                 mov     [ebp+var_10], 0
.text:000020A9                 jmp     short loc_20B4
.text:000020AB ; ---------------------------------------------------------------------------
.text:000020AB
.text:000020AB loc_20AB:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::WriteStoreBlock(uint,uint,bool)+ECj
.text:000020AB                 mov     ecx, [ebp+var_10]
.text:000020AE                 add     ecx, 1
.text:000020B1                 mov     [ebp+var_10], ecx
.text:000020B4
.text:000020B4 loc_20B4:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::WriteStoreBlock(uint,uint,bool)+C1j
.text:000020B4                 mov     edx, [ebp+var_10]
.text:000020B7                 cmp     edx, [ebp+var_8]
.text:000020BA                 jnb     short loc_20D6
.text:000020BC                 mov     eax, [ebp+var_C]
.text:000020BF                 add     eax, [ebp+var_10]
.text:000020C2                 movzx   ecx, byte ptr [eax]
.text:000020C5                 push    ecx             ; unsigned __int8
.text:000020C6                 mov     ecx, [ebp+var_4]
.text:000020C9                 add     ecx, 468h       ; this
.text:000020CF                 call    ?WriteByte@CBitlEncoder@@QAEXE@Z ; CBitlEncoder::WriteByte(uchar)
.text:000020D4                 jmp     short loc_20AB
.text:000020D6 ; ---------------------------------------------------------------------------
.text:000020D6
.text:000020D6 loc_20D6:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::WriteStoreBlock(uint,uint,bool)+D2j
.text:000020D6                 mov     edx, [ebp+arg_4]
.text:000020D9                 sub     edx, [ebp+var_8]
.text:000020DC                 mov     [ebp+arg_4], edx
.text:000020DF                 cmp     [ebp+arg_0], 0
.text:000020E3                 jnz     loc_2008
.text:000020E9                 add     esp, 18h
.text:000020EC                 cmp     ebp, esp
.text:000020EE                 call    __RTC_CheckEsp
.text:000020F3                 mov     esp, ebp
.text:000020F5                 pop     ebp
.text:000020F6                 retn    0Ch
.text:000020F6 ?WriteStoreBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEXII_N@Z endp
.text:000020F6
.text:000020F6 ; ---------------------------------------------------------------------------
.text:000020F9                 db 0Fh dup(0CCh)
.text:00002108
.text:00002108 ; =============== S U B R O U T I N E =======================================
.text:00002108
.text:00002108 ; Attributes: bp-based frame
.text:00002108
.text:00002108 ; unsigned int __thiscall NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(NCompress::NDeflate::NEncoder::CCoder *this, unsigned int, unsigned int)
.text:00002108                 public ?TryDynBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEIII@Z
.text:00002108 ?TryDynBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEIII@Z proc near
.text:00002108                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetBlockPrice(uint,uint)+4Cp
.text:00002108                                         ; NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+19Fp
.text:00002108
.text:00002108 var_7C          = dword ptr -7Ch
.text:00002108 var_78          = dword ptr -78h
.text:00002108 var_71          = byte ptr -71h
.text:00002108 var_70          = dword ptr -70h
.text:00002108 Dst             = byte ptr -68h
.text:00002108 var_18          = dword ptr -18h
.text:00002108 var_14          = dword ptr -14h
.text:00002108 var_10          = dword ptr -10h
.text:00002108 var_C           = dword ptr -0Ch
.text:00002108 var_8           = dword ptr -8
.text:00002108 var_4           = dword ptr -4
.text:00002108 arg_0           = dword ptr  8
.text:00002108 arg_4           = dword ptr  0Ch
.text:00002108
.text:00002108                 push    ebp
.text:00002109                 mov     ebp, esp
.text:0000210B                 sub     esp, 7Ch
.text:0000210E                 push    esi
.text:0000210F                 push    edi
.text:00002110                 push    ecx
.text:00002111                 lea     edi, [ebp+var_7C]
.text:00002114                 mov     ecx, 1Fh
.text:00002119                 mov     eax, 0CCCCCCCCh
.text:0000211E                 rep stosd
.text:00002120                 pop     ecx
.text:00002121                 mov     eax, dword ptr ds:___security_cookie
.text:00002126                 xor     eax, ebp
.text:00002128                 mov     [ebp+var_4], eax
.text:0000212B                 mov     [ebp+var_8], ecx
.text:0000212E                 mov     eax, [ebp+arg_0]
.text:00002131                 imul    eax, 14Ch
.text:00002137                 mov     ecx, [ebp+var_8]
.text:0000213A                 add     eax, [ecx+12D8h]
.text:00002140                 mov     [ebp+var_C], eax
.text:00002143                 mov     edx, [ebp+var_8]
.text:00002146                 mov     eax, [ebp+var_C]
.text:00002149                 mov     ecx, [eax+144h]
.text:0000214F                 mov     [edx+12D4h], ecx
.text:00002155                 mov     edx, [ebp+var_C]
.text:00002158                 mov     eax, [edx+148h]
.text:0000215E                 mov     [ebp+var_10], eax
.text:00002161                 mov     ecx, [ebp+var_C]
.text:00002164                 push    ecx             ; struct NCompress::NDeflate::CLevels *
.text:00002165                 mov     ecx, [ebp+var_8] ; this
.text:00002168                 call    ?SetPrices@CCoder@NEncoder@NDeflate@NCompress@@QAEXABUCLevels@34@@Z ; NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)
.text:0000216D                 mov     [ebp+var_14], 0
.text:00002174                 jmp     short loc_217F
.text:00002176 ; ---------------------------------------------------------------------------
.text:00002176
.text:00002176 loc_2176:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+109j
.text:00002176                 mov     edx, [ebp+var_14]
.text:00002179                 add     edx, 1
.text:0000217C                 mov     [ebp+var_14], edx
.text:0000217F
.text:0000217F loc_217F:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+6Cj
.text:0000217F                 mov     eax, [ebp+var_14]
.text:00002182                 cmp     eax, [ebp+arg_4]
.text:00002185                 jnb     loc_2216
.text:0000218B                 mov     ecx, [ebp+var_8]
.text:0000218E                 mov     edx, [ebp+var_10]
.text:00002191                 mov     [ecx+4B8h], edx
.text:00002197                 mov     ecx, [ebp+var_8] ; this
.text:0000219A                 call    ?TryBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEXXZ ; NCompress::NDeflate::NEncoder::CCoder::TryBlock(void)
.text:0000219F                 mov     eax, [ebp+var_8]
.text:000021A2                 cmp     dword ptr [eax+500h], 4650h
.text:000021AC                 jbe     short loc_21B7
.text:000021AE                 mov     [ebp+var_78], 0Ch
.text:000021B5                 jmp     short loc_21ED
.text:000021B7 ; ---------------------------------------------------------------------------
.text:000021B7
.text:000021B7 loc_21B7:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+A4j
.text:000021B7                 mov     ecx, [ebp+var_8]
.text:000021BA                 cmp     dword ptr [ecx+500h], 1B58h
.text:000021C4                 jbe     short loc_21CF
.text:000021C6                 mov     [ebp+var_7C], 0Bh
.text:000021CD                 jmp     short loc_21E7
.text:000021CF ; ---------------------------------------------------------------------------
.text:000021CF
.text:000021CF loc_21CF:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+BCj
.text:000021CF                 mov     edx, [ebp+var_8]
.text:000021D2                 mov     eax, 7D0h
.text:000021D7                 cmp     eax, [edx+500h]
.text:000021DD                 sbb     ecx, ecx
.text:000021DF                 neg     ecx
.text:000021E1                 add     ecx, 9
.text:000021E4                 mov     [ebp+var_7C], ecx
.text:000021E7
.text:000021E7 loc_21E7:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+C5j
.text:000021E7                 mov     edx, [ebp+var_7C]
.text:000021EA                 mov     [ebp+var_78], edx
.text:000021ED
.text:000021ED loc_21ED:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+ADj
.text:000021ED                 mov     eax, [ebp+var_78]
.text:000021F0                 mov     [ebp+var_18], eax
.text:000021F3                 mov     ecx, [ebp+var_18]
.text:000021F6                 push    ecx             ; unsigned int
.text:000021F7                 mov     ecx, [ebp+var_8] ; this
.text:000021FA                 call    ?MakeTables@CCoder@NEncoder@NDeflate@NCompress@@QAEXI@Z ; NCompress::NDeflate::NEncoder::CCoder::MakeTables(uint)
.text:000021FF                 mov     edx, [ebp+var_8]
.text:00002202                 add     edx, 734h
.text:00002208                 push    edx             ; struct NCompress::NDeflate::CLevels *
.text:00002209                 mov     ecx, [ebp+var_8] ; this
.text:0000220C                 call    ?SetPrices@CCoder@NEncoder@NDeflate@NCompress@@QAEXABUCLevels@34@@Z ; NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)
.text:00002211                 jmp     loc_2176
.text:00002216 ; ---------------------------------------------------------------------------
.text:00002216
.text:00002216 loc_2216:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+7Dj
.text:00002216                 mov     esi, [ebp+var_8]
.text:00002219                 add     esi, 734h
.text:0000221F                 mov     ecx, 50h ; 'P'
.text:00002224                 mov     edi, [ebp+var_C]
.text:00002227                 rep movsd
.text:00002229                 mov     eax, [ebp+var_8]
.text:0000222C                 mov     dword ptr [eax+4F4h], 11Eh
.text:00002236
.text:00002236 loc_2236:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+16Aj
.text:00002236                 mov     ecx, [ebp+var_8]
.text:00002239                 cmp     dword ptr [ecx+4F4h], 101h
.text:00002243                 jbe     short loc_2274
.text:00002245                 mov     edx, [ebp+var_8]
.text:00002248                 mov     eax, [edx+4F4h]
.text:0000224E                 mov     ecx, [ebp+var_8]
.text:00002251                 movzx   edx, byte ptr [ecx+eax+733h]
.text:00002259                 test    edx, edx
.text:0000225B                 jnz     short loc_2274
.text:0000225D                 mov     eax, [ebp+var_8]
.text:00002260                 mov     ecx, [eax+4F4h]
.text:00002266                 sub     ecx, 1
.text:00002269                 mov     edx, [ebp+var_8]
.text:0000226C                 mov     [edx+4F4h], ecx
.text:00002272                 jmp     short loc_2236
.text:00002274 ; ---------------------------------------------------------------------------
.text:00002274
.text:00002274 loc_2274:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+13Bj
.text:00002274                                         ; NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+153j
.text:00002274                 mov     eax, [ebp+var_8]
.text:00002277                 mov     dword ptr [eax+4F8h], 20h ; ' '
.text:00002281
.text:00002281 loc_2281:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+1B2j
.text:00002281                 mov     ecx, [ebp+var_8]
.text:00002284                 cmp     dword ptr [ecx+4F8h], 1
.text:0000228B                 jbe     short loc_22BC
.text:0000228D                 mov     edx, [ebp+var_8]
.text:00002290                 mov     eax, [edx+4F8h]
.text:00002296                 mov     ecx, [ebp+var_8]
.text:00002299                 movzx   edx, byte ptr [ecx+eax+853h]
.text:000022A1                 test    edx, edx
.text:000022A3                 jnz     short loc_22BC
.text:000022A5                 mov     eax, [ebp+var_8]
.text:000022A8                 mov     ecx, [eax+4F8h]
.text:000022AE                 sub     ecx, 1
.text:000022B1                 mov     edx, [ebp+var_8]
.text:000022B4                 mov     [edx+4F8h], ecx
.text:000022BA                 jmp     short loc_2281
.text:000022BC ; ---------------------------------------------------------------------------
.text:000022BC
.text:000022BC loc_22BC:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+183j
.text:000022BC                                         ; NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+19Bj
.text:000022BC                 push    4Ch ; 'L'       ; Size
.text:000022BE                 push    0               ; Val
.text:000022C0                 lea     eax, [ebp+Dst]
.text:000022C3                 push    eax             ; Dst
.text:000022C4                 call    _memset
.text:000022C9                 add     esp, 0Ch
.text:000022CC                 lea     ecx, [ebp+Dst]
.text:000022CF                 push    ecx             ; unsigned int *
.text:000022D0                 mov     edx, [ebp+var_8]
.text:000022D3                 mov     eax, [edx+4F4h]
.text:000022D9                 push    eax             ; unsigned int
.text:000022DA                 mov     ecx, [ebp+var_8]
.text:000022DD                 add     ecx, 734h
.text:000022E3                 push    ecx             ; unsigned __int8 *
.text:000022E4                 mov     ecx, [ebp+var_8] ; this
.text:000022E7                 call    ?LevelTableDummy@CCoder@NEncoder@NDeflate@NCompress@@QAEXPBEIPAI@Z ; NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *)
.text:000022EC                 lea     edx, [ebp+Dst]
.text:000022EF                 push    edx             ; unsigned int *
.text:000022F0                 mov     eax, [ebp+var_8]
.text:000022F3                 mov     ecx, [eax+4F8h]
.text:000022F9                 push    ecx             ; unsigned int
.text:000022FA                 mov     edx, [ebp+var_8]
.text:000022FD                 add     edx, 854h
.text:00002303                 push    edx             ; unsigned __int8 *
.text:00002304                 mov     ecx, [ebp+var_8] ; this
.text:00002307                 call    ?LevelTableDummy@CCoder@NEncoder@NDeflate@NCompress@@QAEXPBEIPAI@Z ; NCompress::NDeflate::NEncoder::CCoder::LevelTableDummy(uchar const *,uint,uint *)
.text:0000230C                 push    7
.text:0000230E                 push    13h
.text:00002310                 mov     eax, [ebp+var_8]
.text:00002313                 add     eax, 12C0h
.text:00002318                 push    eax
.text:00002319                 mov     ecx, [ebp+var_8]
.text:0000231C                 add     ecx, 1274h
.text:00002322                 push    ecx
.text:00002323                 lea     edx, [ebp+Dst]
.text:00002326                 push    edx
.text:00002327                 call    _Huffman_Generate@20 ; Huffman_Generate(x,x,x,x,x)
.text:0000232C                 mov     eax, [ebp+var_8]
.text:0000232F                 mov     dword ptr [eax+4FCh], 4
.text:00002339                 mov     [ebp+var_70], 0
.text:00002340                 jmp     short loc_234B
.text:00002342 ; ---------------------------------------------------------------------------
.text:00002342
.text:00002342 loc_2342:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+294j
.text:00002342                 mov     ecx, [ebp+var_70]
.text:00002345                 add     ecx, 1
.text:00002348                 mov     [ebp+var_70], ecx
.text:0000234B
.text:0000234B loc_234B:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+238j
.text:0000234B                 cmp     [ebp+var_70], 13h
.text:0000234F                 jnb     short loc_239E
.text:00002351                 mov     edx, [ebp+var_70]
.text:00002354                 movzx   eax, _kCodeLengthAlphabetOrder[edx]
.text:0000235B                 mov     ecx, [ebp+var_8]
.text:0000235E                 mov     dl, [ecx+eax+12C0h]
.text:00002365                 mov     [ebp+var_71], dl
.text:00002368                 movzx   eax, [ebp+var_71]
.text:0000236C                 test    eax, eax
.text:0000236E                 jle     short loc_238D
.text:00002370                 mov     ecx, [ebp+var_8]
.text:00002373                 mov     edx, [ebp+var_70]
.text:00002376                 cmp     edx, [ecx+4FCh]
.text:0000237C                 jb      short loc_238D
.text:0000237E                 mov     eax, [ebp+var_70]
.text:00002381                 add     eax, 1
.text:00002384                 mov     ecx, [ebp+var_8]
.text:00002387                 mov     [ecx+4FCh], eax
.text:0000238D
.text:0000238D loc_238D:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+266j
.text:0000238D                                         ; NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+274j
.text:0000238D                 mov     edx, [ebp+var_8]
.text:00002390                 add     edx, [ebp+var_70]
.text:00002393                 mov     al, [ebp+var_71]
.text:00002396                 mov     [edx+4DEh], al
.text:0000239C                 jmp     short loc_2342
.text:0000239E ; ---------------------------------------------------------------------------
.text:0000239E
.text:0000239E loc_239E:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+247j
.text:0000239E                 mov     ecx, [ebp+var_8] ; this
.text:000023A1                 call    ?GetLzBlockPrice@CCoder@NEncoder@NDeflate@NCompress@@QBEIXZ ; NCompress::NDeflate::NEncoder::CCoder::GetLzBlockPrice(void)
.text:000023A6                 mov     esi, eax
.text:000023A8                 push    offset byte_10  ; unsigned __int8 *
.text:000023AA                 push    offset _kLevelDirectBits ; unsigned int
.text:000023AF                 push    offset byte_13  ; unsigned __int8 *
.text:000023B1                 mov     ecx, [ebp+var_8]
.text:000023B4                 add     ecx, 12C0h
.text:000023BA                 push    ecx             ; unsigned int *
.text:000023BB                 lea     edx, [ebp+Dst]
.text:000023BE                 push    edx             ; this
.text:000023BF                 call    ?Huffman_GetPrice_Spec@NEncoder@NDeflate@NCompress@@YGIPBIPBEI1I@Z ; NCompress::NDeflate::NEncoder::Huffman_GetPrice_Spec(uint const *,uchar const *,uint,uchar const *,uint)
.text:000023C4                 add     esi, eax
.text:000023C6                 mov     eax, [ebp+var_8]
.text:000023C9                 mov     ecx, [eax+4FCh]
.text:000023CF                 imul    ecx, 3
.text:000023D2                 lea     eax, [esi+ecx+11h]
.text:000023D6                 push    edx
.text:000023D7                 mov     ecx, ebp
.text:000023D9                 push    eax
.text:000023DA                 lea     edx, $LN20_1
.text:000023E0                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000023E5                 pop     eax
.text:000023E6                 pop     edx
.text:000023E7                 pop     edi
.text:000023E8                 pop     esi
.text:000023E9                 mov     ecx, [ebp+var_4]
.text:000023EC                 xor     ecx, ebp
.text:000023EE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000023F3                 add     esp, 7Ch
.text:000023F6                 cmp     ebp, esp
.text:000023F8                 call    __RTC_CheckEsp
.text:000023FD                 mov     esp, ebp
.text:000023FF                 pop     ebp
.text:00002400                 retn    8
.text:00002400 ?TryDynBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEIII@Z endp
.text:00002400
.text:00002400 ; ---------------------------------------------------------------------------
.text:00002403                 align 4
.text:00002404 $LN20_1         dd 1                    ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+2D2o
.text:00002408                 dd offset $LN19_1
.text:0000240C $LN19_1         dd 0FFFFFF98h, 4Ch      ; DATA XREF: .text:00002408o
.text:00002414                 dd offset $LN18_1       ; "levelFreqs"
.text:00002418 $LN18_1         db 'levelFreqs',0       ; DATA XREF: .text:00002414o
.text:00002423                 align 8
.text:00002428
.text:00002428 ; =============== S U B R O U T I N E =======================================
.text:00002428
.text:00002428 ; Attributes: bp-based frame
.text:00002428
.text:00002428 ; unsigned int __thiscall NCompress::NDeflate::NEncoder::CCoder::TryFixedBlock(NCompress::NDeflate::NEncoder::CCoder *this, unsigned int)
.text:00002428                 public ?TryFixedBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEII@Z
.text:00002428 ?TryFixedBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEII@Z proc near
.text:00002428                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetBlockPrice(uint,uint)+AEp
.text:00002428                                         ; NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+D8p
.text:00002428
.text:00002428 var_8           = dword ptr -8
.text:00002428 var_4           = dword ptr -4
.text:00002428 arg_0           = dword ptr  8
.text:00002428
.text:00002428                 push    ebp
.text:00002429                 mov     ebp, esp
.text:0000242B                 sub     esp, 8
.text:0000242E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002435                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000243C                 mov     [ebp+var_4], ecx
.text:0000243F                 mov     eax, [ebp+arg_0]
.text:00002442                 imul    eax, 14Ch
.text:00002448                 mov     ecx, [ebp+var_4]
.text:0000244B                 add     eax, [ecx+12D8h]
.text:00002451                 mov     [ebp+var_8], eax
.text:00002454                 mov     edx, [ebp+var_4]
.text:00002457                 mov     eax, [ebp+var_8]
.text:0000245A                 mov     ecx, [eax+144h]
.text:00002460                 mov     [edx+12D4h], ecx
.text:00002466                 mov     edx, [ebp+var_4]
.text:00002469                 mov     eax, [ebp+var_8]
.text:0000246C                 mov     ecx, [eax+148h]
.text:00002472                 mov     [edx+4B8h], ecx
.text:00002478                 mov     ecx, [ebp+var_4]
.text:0000247B                 add     ecx, 734h       ; this
.text:00002481                 call    ?SetFixedLevels@CLevels@NDeflate@NCompress@@QAEXXZ ; NCompress::NDeflate::CLevels::SetFixedLevels(void)
.text:00002486                 mov     edx, [ebp+var_4]
.text:00002489                 add     edx, 734h
.text:0000248F                 push    edx             ; struct NCompress::NDeflate::CLevels *
.text:00002490                 mov     ecx, [ebp+var_4] ; this
.text:00002493                 call    ?SetPrices@CCoder@NEncoder@NDeflate@NCompress@@QAEXABUCLevels@34@@Z ; NCompress::NDeflate::NEncoder::CCoder::SetPrices(NCompress::NDeflate::CLevels const &)
.text:00002498                 mov     ecx, [ebp+var_4] ; this
.text:0000249B                 call    ?TryBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEXXZ ; NCompress::NDeflate::NEncoder::CCoder::TryBlock(void)
.text:000024A0                 mov     ecx, [ebp+var_4] ; this
.text:000024A3                 call    ?GetLzBlockPrice@CCoder@NEncoder@NDeflate@NCompress@@QBEIXZ ; NCompress::NDeflate::NEncoder::CCoder::GetLzBlockPrice(void)
.text:000024A8                 add     eax, 3
.text:000024AB                 add     esp, 8
.text:000024AE                 cmp     ebp, esp
.text:000024B0                 call    __RTC_CheckEsp
.text:000024B5                 mov     esp, ebp
.text:000024B7                 pop     ebp
.text:000024B8                 retn    4
.text:000024B8 ?TryFixedBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEII@Z endp
.text:000024B8
.text:000024B8 ; ---------------------------------------------------------------------------
.text:000024BB                 db 0Dh dup(0CCh)
.text:000024C8
.text:000024C8 ; =============== S U B R O U T I N E =======================================
.text:000024C8
.text:000024C8 ; Attributes: bp-based frame
.text:000024C8
.text:000024C8 ; unsigned int __thiscall NCompress::NDeflate::NEncoder::CCoder::GetBlockPrice(NCompress::NDeflate::NEncoder::CCoder *this, unsigned int, unsigned int)
.text:000024C8                 public ?GetBlockPrice@CCoder@NEncoder@NDeflate@NCompress@@QAEIII@Z
.text:000024C8 ?GetBlockPrice@CCoder@NEncoder@NDeflate@NCompress@@QAEIII@Z proc near
.text:000024C8                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetBlockPrice(uint,uint)+194p
.text:000024C8                                         ; NCompress::NDeflate::NEncoder::CCoder::GetBlockPrice(uint,uint)+23Cp ...
.text:000024C8
.text:000024C8 var_30          = dword ptr -30h
.text:000024C8 var_2C          = dword ptr -2Ch
.text:000024C8 var_28          = dword ptr -28h
.text:000024C8 var_24          = dword ptr -24h
.text:000024C8 var_20          = dword ptr -20h
.text:000024C8 var_1C          = dword ptr -1Ch
.text:000024C8 var_18          = dword ptr -18h
.text:000024C8 var_14          = dword ptr -14h
.text:000024C8 var_10          = dword ptr -10h
.text:000024C8 var_C           = dword ptr -0Ch
.text:000024C8 var_8           = dword ptr -8
.text:000024C8 var_4           = dword ptr -4
.text:000024C8 arg_0           = dword ptr  8
.text:000024C8 arg_4           = dword ptr  0Ch
.text:000024C8
.text:000024C8                 push    ebp
.text:000024C9                 mov     ebp, esp
.text:000024CB                 sub     esp, 30h
.text:000024CE                 push    esi
.text:000024CF                 push    edi
.text:000024D0                 push    ecx
.text:000024D1                 lea     edi, [ebp+var_30]
.text:000024D4                 mov     ecx, 0Ch
.text:000024D9                 mov     eax, 0CCCCCCCCh
.text:000024DE                 rep stosd
.text:000024E0                 pop     ecx
.text:000024E1                 mov     [ebp+var_4], ecx
.text:000024E4                 mov     eax, [ebp+arg_0]
.text:000024E7                 imul    eax, 14Ch
.text:000024ED                 mov     ecx, [ebp+var_4]
.text:000024F0                 add     eax, [ecx+12D8h]
.text:000024F6                 mov     [ebp+var_8], eax
.text:000024F9                 mov     edx, [ebp+var_8]
.text:000024FC                 mov     byte ptr [edx+142h], 0
.text:00002503                 mov     eax, [ebp+var_4]
.text:00002506                 mov     ecx, [eax+4BCh]
.text:0000250C                 push    ecx             ; unsigned int
.text:0000250D                 mov     edx, [ebp+arg_0]
.text:00002510                 push    edx             ; unsigned int
.text:00002511                 mov     ecx, [ebp+var_4] ; this
.text:00002514                 call    ?TryDynBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEIII@Z ; NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)
.text:00002519                 mov     [ebp+var_C], eax
.text:0000251C                 mov     eax, [ebp+var_8]
.text:0000251F                 mov     ecx, [ebp+var_4]
.text:00002522                 mov     edx, [ecx+12D4h]
.text:00002528                 mov     [eax+144h], edx
.text:0000252E                 mov     eax, [ebp+var_4]
.text:00002531                 mov     ecx, [eax+500h]
.text:00002537                 mov     [ebp+var_10], ecx
.text:0000253A                 mov     edx, [ebp+var_4]
.text:0000253D                 mov     eax, [edx+4B8h]
.text:00002543                 mov     [ebp+var_14], eax
.text:00002546                 mov     ecx, [ebp+var_4]
.text:00002549                 mov     edx, [ecx+508h]
.text:0000254F                 mov     [ebp+var_18], edx
.text:00002552                 mov     eax, [ebp+var_4]
.text:00002555                 movzx   ecx, byte ptr [eax+4C4h]
.text:0000255C                 test    ecx, ecx
.text:0000255E                 jz      short loc_25A5
.text:00002560                 mov     edx, [ebp+var_4]
.text:00002563                 cmp     dword ptr [edx+500h], 100h
.text:0000256D                 ja      short loc_25A5
.text:0000256F                 mov     eax, [ebp+arg_0]
.text:00002572                 push    eax             ; unsigned int
.text:00002573                 mov     ecx, [ebp+var_4] ; this
.text:00002576                 call    ?TryFixedBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEII@Z ; NCompress::NDeflate::NEncoder::CCoder::TryFixedBlock(uint)
.text:0000257B                 mov     [ebp+var_1C], eax
.text:0000257E                 mov     ecx, [ebp+var_1C]
.text:00002581                 cmp     ecx, [ebp+var_C]
.text:00002584                 sbb     edx, edx
.text:00002586                 neg     edx
.text:00002588                 mov     eax, [ebp+var_8]
.text:0000258B                 mov     [eax+142h], dl
.text:00002591                 mov     ecx, [ebp+var_8]
.text:00002594                 movzx   edx, byte ptr [ecx+142h]
.text:0000259B                 test    edx, edx
.text:0000259D                 jz      short loc_25A5
.text:0000259F                 mov     eax, [ebp+var_1C]
.text:000025A2                 mov     [ebp+var_C], eax
.text:000025A5
.text:000025A5 loc_25A5:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetBlockPrice(uint,uint)+96j
.text:000025A5                                         ; NCompress::NDeflate::NEncoder::CCoder::GetBlockPrice(uint,uint)+A5j ...
.text:000025A5                 push    0
.text:000025A7                 mov     ecx, [ebp+var_4]
.text:000025AA                 mov     edx, [ecx+12D4h]
.text:000025B0                 push    edx
.text:000025B1                 call    ?GetStorePrice@NEncoder@NDeflate@NCompress@@YGIII@Z ; NCompress::NDeflate::NEncoder::GetStorePrice(uint,uint)
.text:000025B6                 mov     [ebp+var_20], eax
.text:000025B9                 mov     eax, [ebp+var_20]
.text:000025BC                 cmp     [ebp+var_C], eax
.text:000025BF                 sbb     ecx, ecx
.text:000025C1                 add     ecx, 1
.text:000025C4                 mov     edx, [ebp+var_8]
.text:000025C7                 mov     [edx+141h], cl
.text:000025CD                 mov     eax, [ebp+var_8]
.text:000025D0                 movzx   ecx, byte ptr [eax+141h]
.text:000025D7                 test    ecx, ecx
.text:000025D9                 jz      short loc_25E1
.text:000025DB                 mov     edx, [ebp+var_20]
.text:000025DE                 mov     [ebp+var_C], edx
.text:000025E1
.text:000025E1 loc_25E1:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetBlockPrice(uint,uint)+111j
.text:000025E1                 mov     eax, [ebp+var_8]
.text:000025E4                 mov     byte ptr [eax+140h], 0
.text:000025EB                 cmp     [ebp+arg_4], 1
.text:000025EF                 jbe     loc_2736
.text:000025F5                 cmp     [ebp+var_10], 80h ; 'Ç'
.text:000025FC                 jb      loc_2736
.text:00002602                 mov     ecx, [ebp+arg_0]
.text:00002605                 shl     ecx, 1
.text:00002607                 imul    ecx, 14Ch
.text:0000260D                 mov     edx, [ebp+var_4]
.text:00002610                 add     ecx, [edx+12D8h]
.text:00002616                 mov     [ebp+var_24], ecx
.text:00002619                 mov     esi, [ebp+var_8]
.text:0000261C                 mov     ecx, 50h ; 'P'
.text:00002621                 mov     edi, [ebp+var_24]
.text:00002624                 rep movsd
.text:00002626                 mov     eax, [ebp+var_8]
.text:00002629                 mov     ecx, [eax+144h]
.text:0000262F                 shr     ecx, 1
.text:00002631                 mov     edx, [ebp+var_24]
.text:00002634                 mov     [edx+144h], ecx
.text:0000263A                 mov     eax, [ebp+var_24]
.text:0000263D                 mov     ecx, [ebp+var_8]
.text:00002640                 mov     edx, [ecx+148h]
.text:00002646                 mov     [eax+148h], edx
.text:0000264C                 mov     eax, [ebp+arg_4]
.text:0000264F                 sub     eax, 1
.text:00002652                 push    eax             ; unsigned int
.text:00002653                 mov     ecx, [ebp+arg_0]
.text:00002656                 shl     ecx, 1
.text:00002658                 push    ecx             ; unsigned int
.text:00002659                 mov     ecx, [ebp+var_4] ; this
.text:0000265C                 call    ?GetBlockPrice@CCoder@NEncoder@NDeflate@NCompress@@QAEIII@Z ; NCompress::NDeflate::NEncoder::CCoder::GetBlockPrice(uint,uint)
.text:00002661                 mov     [ebp+var_28], eax
.text:00002664                 mov     edx, [ebp+var_8]
.text:00002667                 mov     eax, [ebp+var_24]
.text:0000266A                 mov     ecx, [edx+144h]
.text:00002670                 sub     ecx, [eax+144h]
.text:00002676                 mov     [ebp+var_2C], ecx
.text:00002679                 mov     edx, [ebp+var_24]
.text:0000267C                 cmp     dword ptr [edx+144h], 40h ; '@'
.text:00002683                 jb      loc_2736
.text:00002689                 cmp     [ebp+var_2C], 40h ; '@'
.text:0000268D                 jb      loc_2736
.text:00002693                 mov     eax, [ebp+arg_0]
.text:00002696                 lea     ecx, [eax+eax+1]
.text:0000269A                 imul    ecx, 14Ch
.text:000026A0                 mov     edx, [ebp+var_4]
.text:000026A3                 add     ecx, [edx+12D8h]
.text:000026A9                 mov     [ebp+var_30], ecx
.text:000026AC                 mov     esi, [ebp+var_8]
.text:000026AF                 mov     ecx, 50h ; 'P'
.text:000026B4                 mov     edi, [ebp+var_30]
.text:000026B7                 rep movsd
.text:000026B9                 mov     eax, [ebp+var_30]
.text:000026BC                 mov     ecx, [ebp+var_2C]
.text:000026BF                 mov     [eax+144h], ecx
.text:000026C5                 mov     edx, [ebp+var_30]
.text:000026C8                 mov     eax, [ebp+var_4]
.text:000026CB                 mov     ecx, [eax+4B8h]
.text:000026D1                 mov     [edx+148h], ecx
.text:000026D7                 mov     edx, [ebp+var_4]
.text:000026DA                 mov     eax, [ebp+var_24]
.text:000026DD                 mov     ecx, [edx+508h]
.text:000026E3                 sub     ecx, [eax+144h]
.text:000026E9                 mov     edx, [ebp+var_4]
.text:000026EC                 mov     [edx+508h], ecx
.text:000026F2                 mov     eax, [ebp+arg_4]
.text:000026F5                 sub     eax, 1
.text:000026F8                 push    eax             ; unsigned int
.text:000026F9                 mov     ecx, [ebp+arg_0]
.text:000026FC                 lea     edx, [ecx+ecx+1]
.text:00002700                 push    edx             ; unsigned int
.text:00002701                 mov     ecx, [ebp+var_4] ; this
.text:00002704                 call    ?GetBlockPrice@CCoder@NEncoder@NDeflate@NCompress@@QAEIII@Z ; NCompress::NDeflate::NEncoder::CCoder::GetBlockPrice(uint,uint)
.text:00002709                 add     eax, [ebp+var_28]
.text:0000270C                 mov     [ebp+var_28], eax
.text:0000270F                 mov     eax, [ebp+var_28]
.text:00002712                 cmp     eax, [ebp+var_C]
.text:00002715                 sbb     ecx, ecx
.text:00002717                 neg     ecx
.text:00002719                 mov     edx, [ebp+var_8]
.text:0000271C                 mov     [edx+140h], cl
.text:00002722                 mov     eax, [ebp+var_8]
.text:00002725                 movzx   ecx, byte ptr [eax+140h]
.text:0000272C                 test    ecx, ecx
.text:0000272E                 jz      short loc_2736
.text:00002730                 mov     edx, [ebp+var_28]
.text:00002733                 mov     [ebp+var_C], edx
.text:00002736
.text:00002736 loc_2736:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetBlockPrice(uint,uint)+127j
.text:00002736                                         ; NCompress::NDeflate::NEncoder::CCoder::GetBlockPrice(uint,uint)+134j ...
.text:00002736                 mov     eax, [ebp+var_4]
.text:00002739                 mov     ecx, [ebp+var_18]
.text:0000273C                 mov     [eax+508h], ecx
.text:00002742                 mov     edx, [ebp+var_4]
.text:00002745                 mov     eax, [ebp+var_14]
.text:00002748                 mov     [edx+4B8h], eax
.text:0000274E                 mov     eax, [ebp+var_C]
.text:00002751                 pop     edi
.text:00002752                 pop     esi
.text:00002753                 add     esp, 30h
.text:00002756                 cmp     ebp, esp
.text:00002758                 call    __RTC_CheckEsp
.text:0000275D                 mov     esp, ebp
.text:0000275F                 pop     ebp
.text:00002760                 retn    8
.text:00002760 ?GetBlockPrice@CCoder@NEncoder@NDeflate@NCompress@@QAEIII@Z endp
.text:00002760
.text:00002760 ; ---------------------------------------------------------------------------
.text:00002763                 align 8
.text:00002768
.text:00002768 ; =============== S U B R O U T I N E =======================================
.text:00002768
.text:00002768 ; Attributes: bp-based frame
.text:00002768
.text:00002768 ; unsigned int __stdcall NCompress::NDeflate::NEncoder::GetStorePrice(unsigned int, unsigned int)
.text:00002768 ?GetStorePrice@NEncoder@NDeflate@NCompress@@YGIII@Z proc near
.text:00002768                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetBlockPrice(uint,uint)+E9p
.text:00002768
.text:00002768 var_18          = dword ptr -18h
.text:00002768 var_14          = dword ptr -14h
.text:00002768 var_10          = dword ptr -10h
.text:00002768 var_C           = dword ptr -0Ch
.text:00002768 var_8           = dword ptr -8
.text:00002768 var_4           = dword ptr -4
.text:00002768 arg_0           = dword ptr  8
.text:00002768 arg_4           = dword ptr  0Ch
.text:00002768
.text:00002768                 push    ebp
.text:00002769                 mov     ebp, esp
.text:0000276B                 sub     esp, 18h
.text:0000276E                 mov     eax, 0CCCCCCCCh
.text:00002773                 mov     [ebp+var_18], eax
.text:00002776                 mov     [ebp+var_14], eax
.text:00002779                 mov     [ebp+var_10], eax
.text:0000277C                 mov     [ebp+var_C], eax
.text:0000277F                 mov     [ebp+var_8], eax
.text:00002782                 mov     [ebp+var_4], eax
.text:00002785                 mov     [ebp+var_4], 0
.text:0000278C
.text:0000278C loc_278C:                               ; CODE XREF: NCompress::NDeflate::NEncoder::GetStorePrice(uint,uint)+8Dj
.text:0000278C                 mov     eax, [ebp+arg_4]
.text:0000278F                 add     eax, 3
.text:00002792                 and     eax, 7
.text:00002795                 mov     [ebp+var_8], eax
.text:00002798                 jbe     short loc_27A7
.text:0000279A                 mov     ecx, 8
.text:0000279F                 sub     ecx, [ebp+var_8]
.text:000027A2                 mov     [ebp+var_14], ecx
.text:000027A5                 jmp     short loc_27AE
.text:000027A7 ; ---------------------------------------------------------------------------
.text:000027A7
.text:000027A7 loc_27A7:                               ; CODE XREF: NCompress::NDeflate::NEncoder::GetStorePrice(uint,uint)+30j
.text:000027A7                 mov     [ebp+var_14], 0
.text:000027AE
.text:000027AE loc_27AE:                               ; CODE XREF: NCompress::NDeflate::NEncoder::GetStorePrice(uint,uint)+3Dj
.text:000027AE                 mov     edx, [ebp+var_14]
.text:000027B1                 mov     [ebp+var_C], edx
.text:000027B4                 cmp     [ebp+arg_0], 10000h
.text:000027BB                 jnb     short loc_27C5
.text:000027BD                 mov     eax, [ebp+arg_0]
.text:000027C0                 mov     [ebp+var_18], eax
.text:000027C3                 jmp     short loc_27CC
.text:000027C5 ; ---------------------------------------------------------------------------
.text:000027C5
.text:000027C5 loc_27C5:                               ; CODE XREF: NCompress::NDeflate::NEncoder::GetStorePrice(uint,uint)+53j
.text:000027C5                 mov     [ebp+var_18], 0FFFFh
.text:000027CC
.text:000027CC loc_27CC:                               ; CODE XREF: NCompress::NDeflate::NEncoder::GetStorePrice(uint,uint)+5Bj
.text:000027CC                 mov     ecx, [ebp+var_18]
.text:000027CF                 mov     [ebp+var_10], ecx
.text:000027D2                 mov     edx, [ebp+var_4]
.text:000027D5                 mov     eax, [ebp+var_C]
.text:000027D8                 lea     ecx, [eax+edx+23h]
.text:000027DC                 mov     edx, [ebp+var_10]
.text:000027DF                 lea     eax, [ecx+edx*8]
.text:000027E2                 mov     [ebp+var_4], eax
.text:000027E5                 mov     [ebp+arg_4], 0
.text:000027EC                 mov     ecx, [ebp+arg_0]
.text:000027EF                 sub     ecx, [ebp+var_10]
.text:000027F2                 mov     [ebp+arg_0], ecx
.text:000027F5                 jnz     short loc_278C
.text:000027F7                 mov     eax, [ebp+var_4]
.text:000027FA                 mov     esp, ebp
.text:000027FC                 pop     ebp
.text:000027FD                 retn    8
.text:000027FD ?GetStorePrice@NEncoder@NDeflate@NCompress@@YGIII@Z endp
.text:000027FD
.text:000027FD ; ---------------------------------------------------------------------------
.text:00002800                 db 8 dup(0CCh)
.text:00002808
.text:00002808 ; =============== S U B R O U T I N E =======================================
.text:00002808
.text:00002808 ; Attributes: bp-based frame
.text:00002808
.text:00002808 ; void __thiscall NCompress::NDeflate::NEncoder::CCoder::CodeBlock(NCompress::NDeflate::NEncoder::CCoder *this, unsigned int, bool)
.text:00002808                 public ?CodeBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEXI_N@Z
.text:00002808 ?CodeBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEXI_N@Z proc near
.text:00002808                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+4Bp
.text:00002808                                         ; NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+60p ...
.text:00002808
.text:00002808 var_14          = dword ptr -14h
.text:00002808 var_10          = dword ptr -10h
.text:00002808 var_C           = dword ptr -0Ch
.text:00002808 var_8           = dword ptr -8
.text:00002808 var_4           = dword ptr -4
.text:00002808 arg_0           = dword ptr  8
.text:00002808 arg_4           = byte ptr  0Ch
.text:00002808
.text:00002808                 push    ebp
.text:00002809                 mov     ebp, esp
.text:0000280B                 sub     esp, 14h
.text:0000280E                 mov     eax, 0CCCCCCCCh
.text:00002813                 mov     [ebp+var_14], eax
.text:00002816                 mov     [ebp+var_10], eax
.text:00002819                 mov     [ebp+var_C], eax
.text:0000281C                 mov     [ebp+var_8], eax
.text:0000281F                 mov     [ebp+var_4], eax
.text:00002822                 mov     [ebp+var_4], ecx
.text:00002825                 mov     eax, [ebp+arg_0]
.text:00002828                 imul    eax, 14Ch
.text:0000282E                 mov     ecx, [ebp+var_4]
.text:00002831                 add     eax, [ecx+12D8h]
.text:00002837                 mov     [ebp+var_8], eax
.text:0000283A                 mov     edx, [ebp+var_8]
.text:0000283D                 movzx   eax, byte ptr [edx+140h]
.text:00002844                 test    eax, eax
.text:00002846                 jz      short loc_2872
.text:00002848                 push    0               ; bool
.text:0000284A                 mov     ecx, [ebp+arg_0]
.text:0000284D                 shl     ecx, 1
.text:0000284F                 push    ecx             ; unsigned int
.text:00002850                 mov     ecx, [ebp+var_4] ; this
.text:00002853                 call    ?CodeBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEXI_N@Z ; NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)
.text:00002858                 movzx   edx, [ebp+arg_4]
.text:0000285C                 push    edx             ; bool
.text:0000285D                 mov     eax, [ebp+arg_0]
.text:00002860                 lea     ecx, [eax+eax+1]
.text:00002864                 push    ecx             ; unsigned int
.text:00002865                 mov     ecx, [ebp+var_4] ; this
.text:00002868                 call    ?CodeBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEXI_N@Z ; NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)
.text:0000286D                 jmp     loc_2AD5
.text:00002872 ; ---------------------------------------------------------------------------
.text:00002872
.text:00002872 loc_2872:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+3Ej
.text:00002872                 mov     edx, [ebp+var_8]
.text:00002875                 movzx   eax, byte ptr [edx+141h]
.text:0000287C                 test    eax, eax
.text:0000287E                 jz      short loc_28A6
.text:00002880                 movzx   ecx, [ebp+arg_4]
.text:00002884                 push    ecx             ; bool
.text:00002885                 mov     edx, [ebp+var_4]
.text:00002888                 mov     eax, [edx+508h]
.text:0000288E                 push    eax             ; unsigned int
.text:0000288F                 mov     ecx, [ebp+var_8]
.text:00002892                 mov     edx, [ecx+144h]
.text:00002898                 push    edx             ; unsigned int
.text:00002899                 mov     ecx, [ebp+var_4] ; this
.text:0000289C                 call    ?WriteStoreBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEXII_N@Z ; NCompress::NDeflate::NEncoder::CCoder::WriteStoreBlock(uint,uint,bool)
.text:000028A1                 jmp     loc_2ABA
.text:000028A6 ; ---------------------------------------------------------------------------
.text:000028A6
.text:000028A6 loc_28A6:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+76j
.text:000028A6                 push    1               ; unsigned int
.text:000028A8                 movzx   eax, [ebp+arg_4]
.text:000028AC                 neg     eax
.text:000028AE                 sbb     eax, eax
.text:000028B0                 neg     eax
.text:000028B2                 push    eax             ; unsigned int
.text:000028B3                 mov     ecx, [ebp+var_4] ; this
.text:000028B6                 call    ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z ; NCompress::NDeflate::NEncoder::CCoder::WriteBits(uint,uint)
.text:000028BB                 mov     ecx, [ebp+var_8]
.text:000028BE                 movzx   edx, byte ptr [ecx+142h]
.text:000028C5                 test    edx, edx
.text:000028C7                 jz      loc_2984
.text:000028CD                 push    2               ; unsigned int
.text:000028CF                 push    1               ; unsigned int
.text:000028D1                 mov     ecx, [ebp+var_4] ; this
.text:000028D4                 call    ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z ; NCompress::NDeflate::NEncoder::CCoder::WriteBits(uint,uint)
.text:000028D9                 mov     eax, [ebp+arg_0]
.text:000028DC                 push    eax             ; unsigned int
.text:000028DD                 mov     ecx, [ebp+var_4] ; this
.text:000028E0                 call    ?TryFixedBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEII@Z ; NCompress::NDeflate::NEncoder::CCoder::TryFixedBlock(uint)
.text:000028E5                 mov     [ebp+var_10], 9
.text:000028EC                 mov     [ebp+var_C], 0
.text:000028F3                 jmp     short loc_28FE
.text:000028F5 ; ---------------------------------------------------------------------------
.text:000028F5
.text:000028F5 loc_28F5:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+127j
.text:000028F5                 mov     ecx, [ebp+var_C]
.text:000028F8                 add     ecx, 1
.text:000028FB                 mov     [ebp+var_C], ecx
.text:000028FE
.text:000028FE loc_28FE:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+EBj
.text:000028FE                 cmp     [ebp+var_C], 120h
.text:00002905                 jnb     short loc_2931
.text:00002907                 mov     edx, [ebp+var_4]
.text:0000290A                 add     edx, [ebp+var_C]
.text:0000290D                 movzx   eax, byte ptr [edx+734h]
.text:00002914                 mov     ecx, 9
.text:00002919                 sub     ecx, eax
.text:0000291B                 mov     edx, 1
.text:00002920                 shl     edx, cl
.text:00002922                 mov     eax, [ebp+var_C]
.text:00002925                 mov     ecx, [ebp+var_4]
.text:00002928                 mov     [ecx+eax*4+874h], edx
.text:0000292F                 jmp     short loc_28F5
.text:00002931 ; ---------------------------------------------------------------------------
.text:00002931
.text:00002931 loc_2931:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+FDj
.text:00002931                 mov     [ebp+var_C], 0
.text:00002938                 jmp     short loc_2943
.text:0000293A ; ---------------------------------------------------------------------------
.text:0000293A
.text:0000293A loc_293A:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+16Bj
.text:0000293A                 mov     edx, [ebp+var_C]
.text:0000293D                 add     edx, 1
.text:00002940                 mov     [ebp+var_C], edx
.text:00002943
.text:00002943 loc_2943:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+130j
.text:00002943                 cmp     [ebp+var_C], 20h ; ' '
.text:00002947                 jnb     short loc_2975
.text:00002949                 mov     eax, [ebp+var_4]
.text:0000294C                 add     eax, [ebp+var_C]
.text:0000294F                 movzx   ecx, byte ptr [eax+854h]
.text:00002956                 mov     edx, 9
.text:0000295B                 sub     edx, ecx
.text:0000295D                 mov     eax, 1
.text:00002962                 mov     ecx, edx
.text:00002964                 shl     eax, cl
.text:00002966                 mov     ecx, [ebp+var_C]
.text:00002969                 mov     edx, [ebp+var_4]
.text:0000296C                 mov     [edx+ecx*4+0CF4h], eax
.text:00002973                 jmp     short loc_293A
.text:00002975 ; ---------------------------------------------------------------------------
.text:00002975
.text:00002975 loc_2975:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+13Fj
.text:00002975                 push    9               ; unsigned int
.text:00002977                 mov     ecx, [ebp+var_4] ; this
.text:0000297A                 call    ?MakeTables@CCoder@NEncoder@NDeflate@NCompress@@QAEXI@Z ; NCompress::NDeflate::NEncoder::CCoder::MakeTables(uint)
.text:0000297F                 jmp     loc_2AB2
.text:00002984 ; ---------------------------------------------------------------------------
.text:00002984
.text:00002984 loc_2984:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+BFj
.text:00002984                 mov     eax, [ebp+var_4]
.text:00002987                 cmp     dword ptr [eax+4C0h], 1
.text:0000298E                 ja      short loc_299E
.text:00002990                 mov     ecx, [ebp+var_4]
.text:00002993                 movzx   edx, byte ptr [ecx+4C4h]
.text:0000299A                 test    edx, edx
.text:0000299C                 jz      short loc_29AC
.text:0000299E
.text:0000299E loc_299E:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+186j
.text:0000299E                 push    1               ; unsigned int
.text:000029A0                 mov     eax, [ebp+arg_0]
.text:000029A3                 push    eax             ; unsigned int
.text:000029A4                 mov     ecx, [ebp+var_4] ; this
.text:000029A7                 call    ?TryDynBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEIII@Z ; NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)
.text:000029AC
.text:000029AC loc_29AC:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+194j
.text:000029AC                 push    2               ; unsigned int
.text:000029AE                 push    2               ; unsigned int
.text:000029B0                 mov     ecx, [ebp+var_4] ; this
.text:000029B3                 call    ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z ; NCompress::NDeflate::NEncoder::CCoder::WriteBits(uint,uint)
.text:000029B8                 push    5               ; unsigned int
.text:000029BA                 mov     ecx, [ebp+var_4]
.text:000029BD                 mov     edx, [ecx+4F4h]
.text:000029C3                 sub     edx, 101h
.text:000029C9                 push    edx             ; unsigned int
.text:000029CA                 mov     ecx, [ebp+var_4] ; this
.text:000029CD                 call    ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z ; NCompress::NDeflate::NEncoder::CCoder::WriteBits(uint,uint)
.text:000029D2                 push    5               ; unsigned int
.text:000029D4                 mov     eax, [ebp+var_4]
.text:000029D7                 mov     ecx, [eax+4F8h]
.text:000029DD                 sub     ecx, 1
.text:000029E0                 push    ecx             ; unsigned int
.text:000029E1                 mov     ecx, [ebp+var_4] ; this
.text:000029E4                 call    ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z ; NCompress::NDeflate::NEncoder::CCoder::WriteBits(uint,uint)
.text:000029E9                 push    4               ; unsigned int
.text:000029EB                 mov     edx, [ebp+var_4]
.text:000029EE                 mov     eax, [edx+4FCh]
.text:000029F4                 sub     eax, 4
.text:000029F7                 push    eax             ; unsigned int
.text:000029F8                 mov     ecx, [ebp+var_4] ; this
.text:000029FB                 call    ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z ; NCompress::NDeflate::NEncoder::CCoder::WriteBits(uint,uint)
.text:00002A00                 mov     [ebp+var_14], 0
.text:00002A07                 jmp     short loc_2A12
.text:00002A09 ; ---------------------------------------------------------------------------
.text:00002A09
.text:00002A09 loc_2A09:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+230j
.text:00002A09                 mov     ecx, [ebp+var_14]
.text:00002A0C                 add     ecx, 1
.text:00002A0F                 mov     [ebp+var_14], ecx
.text:00002A12
.text:00002A12 loc_2A12:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+1FFj
.text:00002A12                 mov     edx, [ebp+var_4]
.text:00002A15                 mov     eax, [ebp+var_14]
.text:00002A18                 cmp     eax, [edx+4FCh]
.text:00002A1E                 jnb     short loc_2A3A
.text:00002A20                 push    3               ; unsigned int
.text:00002A22                 mov     ecx, [ebp+var_4]
.text:00002A25                 add     ecx, [ebp+var_14]
.text:00002A28                 movzx   edx, byte ptr [ecx+4DEh]
.text:00002A2F                 push    edx             ; unsigned int
.text:00002A30                 mov     ecx, [ebp+var_4] ; this
.text:00002A33                 call    ?WriteBits@CCoder@NEncoder@NDeflate@NCompress@@QAEXII@Z ; NCompress::NDeflate::NEncoder::CCoder::WriteBits(uint,uint)
.text:00002A38                 jmp     short loc_2A09
.text:00002A3A ; ---------------------------------------------------------------------------
.text:00002A3A
.text:00002A3A loc_2A3A:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+216j
.text:00002A3A                 push    offset byte_13  ; unsigned __int8 *
.text:00002A3C                 mov     eax, [ebp+var_4]
.text:00002A3F                 add     eax, 12C0h
.text:00002A44                 push    eax             ; unsigned int *
.text:00002A45                 mov     ecx, [ebp+var_4]
.text:00002A48                 add     ecx, 1274h
.text:00002A4E                 push    ecx             ; this
.text:00002A4F                 call    ?Huffman_ReverseBits@NEncoder@NDeflate@NCompress@@YGXPAIPBEI@Z ; NCompress::NDeflate::NEncoder::Huffman_ReverseBits(uint *,uchar const *,uint)
.text:00002A54                 mov     edx, [ebp+var_4]
.text:00002A57                 add     edx, 1274h
.text:00002A5D                 push    edx             ; unsigned int *
.text:00002A5E                 mov     eax, [ebp+var_4]
.text:00002A61                 add     eax, 12C0h
.text:00002A66                 push    eax             ; unsigned __int8 *
.text:00002A67                 mov     ecx, [ebp+var_4]
.text:00002A6A                 mov     edx, [ecx+4F4h]
.text:00002A70                 push    edx             ; unsigned int
.text:00002A71                 mov     eax, [ebp+var_4]
.text:00002A74                 add     eax, 734h
.text:00002A79                 push    eax             ; unsigned __int8 *
.text:00002A7A                 mov     ecx, [ebp+var_4] ; this
.text:00002A7D                 call    ?LevelTableCode@CCoder@NEncoder@NDeflate@NCompress@@QAEXPBEI0PBI@Z ; NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)
.text:00002A82                 mov     ecx, [ebp+var_4]
.text:00002A85                 add     ecx, 1274h
.text:00002A8B                 push    ecx             ; unsigned int *
.text:00002A8C                 mov     edx, [ebp+var_4]
.text:00002A8F                 add     edx, 12C0h
.text:00002A95                 push    edx             ; unsigned __int8 *
.text:00002A96                 mov     eax, [ebp+var_4]
.text:00002A99                 mov     ecx, [eax+4F8h]
.text:00002A9F                 push    ecx             ; unsigned int
.text:00002AA0                 mov     edx, [ebp+var_4]
.text:00002AA3                 add     edx, 854h
.text:00002AA9                 push    edx             ; unsigned __int8 *
.text:00002AAA                 mov     ecx, [ebp+var_4] ; this
.text:00002AAD                 call    ?LevelTableCode@CCoder@NEncoder@NDeflate@NCompress@@QAEXPBEI0PBI@Z ; NCompress::NDeflate::NEncoder::CCoder::LevelTableCode(uchar const *,uint,uchar const *,uint const *)
.text:00002AB2
.text:00002AB2 loc_2AB2:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+177j
.text:00002AB2                 mov     ecx, [ebp+var_4] ; this
.text:00002AB5                 call    ?WriteBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEXXZ ; NCompress::NDeflate::NEncoder::CCoder::WriteBlock(void)
.text:00002ABA
.text:00002ABA loc_2ABA:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+99j
.text:00002ABA                 mov     eax, [ebp+var_4]
.text:00002ABD                 mov     ecx, [ebp+var_8]
.text:00002AC0                 mov     edx, [eax+508h]
.text:00002AC6                 sub     edx, [ecx+144h]
.text:00002ACC                 mov     eax, [ebp+var_4]
.text:00002ACF                 mov     [eax+508h], edx
.text:00002AD5
.text:00002AD5 loc_2AD5:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)+65j
.text:00002AD5                 add     esp, 14h
.text:00002AD8                 cmp     ebp, esp
.text:00002ADA                 call    __RTC_CheckEsp
.text:00002ADF                 mov     esp, ebp
.text:00002AE1                 pop     ebp
.text:00002AE2                 retn    8
.text:00002AE2 ?CodeBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEXI_N@Z endp
.text:00002AE2
.text:00002AE2 ; ---------------------------------------------------------------------------
.text:00002AE5                 align 4
.text:00002AE8
.text:00002AE8 ; =============== S U B R O U T I N E =======================================
.text:00002AE8
.text:00002AE8 ; Attributes: bp-based frame
.text:00002AE8
.text:00002AE8 ; int __stdcall NCompress::NDeflate::NEncoder::Read(NCompress::NDeflate::NEncoder *this, void *, void *, unsigned int *)
.text:00002AE8                 public ?Read@NEncoder@NDeflate@NCompress@@YGHPAX0PAI@Z
.text:00002AE8 ?Read@NEncoder@NDeflate@NCompress@@YGHPAX0PAI@Z proc near
.text:00002AE8                                         ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+E3o
.text:00002AE8
.text:00002AE8 var_18          = dword ptr -18h
.text:00002AE8 var_14          = dword ptr -14h
.text:00002AE8 var_10          = dword ptr -10h
.text:00002AE8 var_C           = dword ptr -0Ch
.text:00002AE8 var_8           = dword ptr -8
.text:00002AE8 var_4           = dword ptr -4
.text:00002AE8 this            = dword ptr  8
.text:00002AE8 arg_4           = dword ptr  0Ch
.text:00002AE8 arg_8           = dword ptr  10h
.text:00002AE8
.text:00002AE8                 push    ebp
.text:00002AE9                 mov     ebp, esp
.text:00002AEB                 sub     esp, 18h
.text:00002AEE                 push    esi
.text:00002AEF                 mov     eax, 0CCCCCCCCh
.text:00002AF4                 mov     [ebp+var_18], eax
.text:00002AF7                 mov     [ebp+var_14], eax
.text:00002AFA                 mov     [ebp+var_10], eax
.text:00002AFD                 mov     [ebp+var_C], eax
.text:00002B00                 mov     [ebp+var_8], eax
.text:00002B03                 mov     [ebp+var_4], eax
.text:00002B06                 mov     [ebp+var_4], 80000000h
.text:00002B0D                 mov     eax, [ebp+arg_8]
.text:00002B10                 cmp     dword ptr [eax], 80000000h
.text:00002B16                 jnb     short loc_2B22
.text:00002B18                 mov     ecx, [ebp+arg_8]
.text:00002B1B                 mov     edx, [ecx]
.text:00002B1D                 mov     [ebp+var_18], edx
.text:00002B20                 jmp     short loc_2B29
.text:00002B22 ; ---------------------------------------------------------------------------
.text:00002B22
.text:00002B22 loc_2B22:                               ; CODE XREF: NCompress::NDeflate::NEncoder::Read(void *,void *,uint *)+2Ej
.text:00002B22                 mov     [ebp+var_18], 80000000h
.text:00002B29
.text:00002B29 loc_2B29:                               ; CODE XREF: NCompress::NDeflate::NEncoder::Read(void *,void *,uint *)+38j
.text:00002B29                 mov     eax, [ebp+var_18]
.text:00002B2C                 mov     [ebp+var_C], eax
.text:00002B2F                 mov     esi, esp
.text:00002B31                 lea     ecx, [ebp+var_C]
.text:00002B34                 push    ecx
.text:00002B35                 mov     edx, [ebp+var_C]
.text:00002B38                 push    edx
.text:00002B39                 mov     eax, [ebp+arg_4]
.text:00002B3C                 push    eax
.text:00002B3D                 mov     ecx, [ebp+this]
.text:00002B40                 mov     edx, [ecx+4]
.text:00002B43                 mov     eax, [ebp+this]
.text:00002B46                 mov     ecx, [eax+4]
.text:00002B49                 mov     edx, [edx]
.text:00002B4B                 push    ecx
.text:00002B4C                 mov     eax, [edx+0Ch]
.text:00002B4F                 call    eax
.text:00002B51                 cmp     esi, esp
.text:00002B53                 call    __RTC_CheckEsp
.text:00002B58                 mov     [ebp+var_14], eax
.text:00002B5B                 mov     ecx, [ebp+arg_8]
.text:00002B5E                 mov     edx, [ebp+var_C]
.text:00002B61                 mov     [ecx], edx
.text:00002B63                 mov     eax, [ebp+var_14]
.text:00002B66                 push    edx
.text:00002B67                 mov     ecx, ebp
.text:00002B69                 push    eax
.text:00002B6A                 lea     edx, $LN7_0
.text:00002B70                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002B75                 pop     eax
.text:00002B76                 pop     edx
.text:00002B77                 pop     esi
.text:00002B78                 add     esp, 18h
.text:00002B7B                 cmp     ebp, esp
.text:00002B7D                 call    __RTC_CheckEsp
.text:00002B82                 mov     esp, ebp
.text:00002B84                 pop     ebp
.text:00002B85                 retn    0Ch
.text:00002B85 ?Read@NEncoder@NDeflate@NCompress@@YGHPAX0PAI@Z endp
.text:00002B85
.text:00002B85 ; ---------------------------------------------------------------------------
.text:00002B88 $LN7_0          dd 1                    ; DATA XREF: NCompress::NDeflate::NEncoder::Read(void *,void *,uint *)+82o
.text:00002B8C                 dd offset $LN6_0
.text:00002B90 $LN6_0          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00002B8Co
.text:00002B98                 dd offset $LN5_0        ; "curSize"
.text:00002B9C $LN5_0          db 'curSize',0          ; DATA XREF: .text:00002B98o
.text:00002BA4                 align 8
.text:00002BA8
.text:00002BA8 ; =============== S U B R O U T I N E =======================================
.text:00002BA8
.text:00002BA8 ; Attributes: bp-based frame
.text:00002BA8
.text:00002BA8 ; __int32 __thiscall NCompress::NDeflate::NEncoder::CCoder::CodeReal(NCompress::NDeflate::NEncoder::CCoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00002BA8                 public ?CodeReal@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00002BA8 ?CodeReal@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00002BA8                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::BaseCode(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+67p
.text:00002BA8
.text:00002BA8 var_38          = dword ptr -38h
.text:00002BA8 var_34          = dword ptr -34h
.text:00002BA8 var_30          = dword ptr -30h
.text:00002BA8 var_28          = dword ptr -28h
.text:00002BA8 var_24          = dword ptr -24h
.text:00002BA8 var_1C          = dword ptr -1Ch
.text:00002BA8 var_14          = dword ptr -14h
.text:00002BA8 var_10          = dword ptr -10h
.text:00002BA8 var_8           = dword ptr -8
.text:00002BA8 var_4           = dword ptr -4
.text:00002BA8 arg_0           = dword ptr  8
.text:00002BA8 arg_4           = dword ptr  0Ch
.text:00002BA8 arg_10          = dword ptr  18h
.text:00002BA8
.text:00002BA8                 push    ebp
.text:00002BA9                 mov     ebp, esp
.text:00002BAB                 sub     esp, 38h
.text:00002BAE                 push    esi
.text:00002BAF                 push    edi
.text:00002BB0                 push    ecx
.text:00002BB1                 lea     edi, [ebp+var_38]
.text:00002BB4                 mov     ecx, 0Eh
.text:00002BB9                 mov     eax, 0CCCCCCCCh
.text:00002BBE                 rep stosd
.text:00002BC0                 pop     ecx
.text:00002BC1                 mov     [ebp+var_4], ecx
.text:00002BC4                 mov     eax, [ebp+var_4]
.text:00002BC7                 cmp     dword ptr [eax+4BCh], 1
.text:00002BCE                 jnz     short loc_2BE5
.text:00002BD0                 mov     ecx, [ebp+var_4]
.text:00002BD3                 cmp     dword ptr [ecx+4C0h], 1
.text:00002BDA                 jnz     short loc_2BE5
.text:00002BDC                 mov     [ebp+var_34], 0
.text:00002BE3                 jmp     short loc_2BEC
.text:00002BE5 ; ---------------------------------------------------------------------------
.text:00002BE5
.text:00002BE5 loc_2BE5:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+26j
.text:00002BE5                                         ; NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+32j
.text:00002BE5                 mov     [ebp+var_34], 1
.text:00002BEC
.text:00002BEC loc_2BEC:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3Bj
.text:00002BEC                 mov     edx, [ebp+var_4]
.text:00002BEF                 mov     al, byte ptr [ebp+var_34]
.text:00002BF2                 mov     [edx+4C4h], al
.text:00002BF8                 mov     ecx, [ebp+var_4]
.text:00002BFB                 movzx   edx, byte ptr [ecx+4C4h]
.text:00002C02                 test    edx, edx
.text:00002C04                 jnz     short loc_2C27
.text:00002C06                 mov     eax, [ebp+var_4]
.text:00002C09                 cmp     dword ptr [eax+4BCh], 1
.text:00002C10                 jnz     short loc_2C27
.text:00002C12                 mov     ecx, [ebp+var_4]
.text:00002C15                 cmp     dword ptr [ecx+4C0h], 1
.text:00002C1C                 jnz     short loc_2C27
.text:00002C1E                 mov     [ebp+var_38], 0
.text:00002C25                 jmp     short loc_2C2E
.text:00002C27 ; ---------------------------------------------------------------------------
.text:00002C27
.text:00002C27 loc_2C27:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5Cj
.text:00002C27                                         ; NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+68j ...
.text:00002C27                 mov     [ebp+var_38], 1
.text:00002C2E
.text:00002C2E loc_2C2E:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+7Dj
.text:00002C2E                 mov     edx, [ebp+var_4]
.text:00002C31                 mov     al, byte ptr [ebp+var_38]
.text:00002C34                 mov     [edx+4C5h], al
.text:00002C3A                 mov     ecx, [ebp+var_4] ; this
.text:00002C3D                 call    ?Create@CCoder@NEncoder@NDeflate@NCompress@@QAEJXZ ; NCompress::NDeflate::NEncoder::CCoder::Create(void)
.text:00002C42                 mov     [ebp+var_8], eax
.text:00002C45                 cmp     [ebp+var_8], 0
.text:00002C49                 jz      short loc_2C53
.text:00002C4B                 mov     eax, [ebp+var_8]
.text:00002C4E                 jmp     loc_2DF8
.text:00002C53 ; ---------------------------------------------------------------------------
.text:00002C53
.text:00002C53 loc_2C53:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+A1j
.text:00002C53                 mov     ecx, [ebp+var_4]
.text:00002C56                 mov     edx, [ecx+4C0h]
.text:00002C5C                 shl     edx, 0Ch
.text:00002C5F                 add     edx, 1C00h
.text:00002C65                 mov     eax, [ebp+var_4]
.text:00002C68                 mov     [eax+4C8h], edx
.text:00002C6E                 mov     [ebp+var_14], 0
.text:00002C75                 mov     [ebp+var_10], 0
.text:00002C7C                 mov     ecx, [ebp+var_4]
.text:00002C7F                 mov     edx, [ebp+arg_0]
.text:00002C82                 mov     [ecx+49Ch], edx
.text:00002C88                 mov     eax, [ebp+var_4]
.text:00002C8B                 mov     dword ptr [eax+498h], offset ?Read@NEncoder@NDeflate@NCompress@@YGHPAX0PAI@Z ; NCompress::NDeflate::NEncoder::Read(void *,void *,uint *)
.text:00002C95                 mov     ecx, [ebp+var_4]
.text:00002C98                 add     ecx, 498h
.text:00002C9E                 mov     edx, [ebp+var_4]
.text:00002CA1                 mov     [edx+38h], ecx
.text:00002CA4                 mov     eax, [ebp+var_4]
.text:00002CA7                 push    eax
.text:00002CA8                 call    _MatchFinder_Init@4 ; MatchFinder_Init(x)
.text:00002CAD                 mov     ecx, [ebp+arg_4]
.text:00002CB0                 push    ecx             ; struct ISequentialOutStream *
.text:00002CB1                 mov     ecx, [ebp+var_4]
.text:00002CB4                 add     ecx, 468h       ; this
.text:00002CBA                 call    ?SetStream@CBitlEncoder@@QAEXPAUISequentialOutStream@@@Z ; CBitlEncoder::SetStream(ISequentialOutStream *)
.text:00002CBF                 mov     ecx, [ebp+var_4]
.text:00002CC2                 add     ecx, 468h       ; this
.text:00002CC8                 call    ?Init@CBitlEncoder@@QAEXXZ ; CBitlEncoder::Init(void)
.text:00002CCD                 mov     edx, [ebp+var_4]
.text:00002CD0                 mov     dword ptr [edx+510h], 0
.text:00002CDA                 mov     eax, [ebp+var_4]
.text:00002CDD                 mov     dword ptr [eax+50Ch], 0
.text:00002CE7                 mov     ecx, [ebp+var_4]
.text:00002CEA                 mov     edx, [ecx+12D8h]
.text:00002CF0                 add     edx, 14Ch
.text:00002CF6                 mov     [ebp+var_1C], edx
.text:00002CF9                 mov     eax, [ebp+var_1C]
.text:00002CFC                 mov     dword ptr [eax+148h], 0
.text:00002D06                 mov     ecx, [ebp+var_1C] ; this
.text:00002D09                 call    ?InitStructures@CTables@NEncoder@NDeflate@NCompress@@QAEXXZ ; NCompress::NDeflate::NEncoder::CTables::InitStructures(void)
.text:00002D0E                 mov     ecx, [ebp+var_4]
.text:00002D11                 mov     dword ptr [ecx+508h], 0
.text:00002D1B
.text:00002D1B loc_2D1B:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+22Bj
.text:00002D1B                 mov     edx, [ebp+var_1C]
.text:00002D1E                 mov     dword ptr [edx+144h], 0EDFBh
.text:00002D28                 mov     eax, [ebp+var_4]
.text:00002D2B                 mov     byte ptr [eax+504h], 0
.text:00002D32                 mov     ecx, [ebp+var_4]
.text:00002D35                 mov     edx, [ecx+4C0h]
.text:00002D3B                 push    edx             ; unsigned int
.text:00002D3C                 push    1               ; unsigned int
.text:00002D3E                 mov     ecx, [ebp+var_4] ; this
.text:00002D41                 call    ?GetBlockPrice@CCoder@NEncoder@NDeflate@NCompress@@QAEIII@Z ; NCompress::NDeflate::NEncoder::CCoder::GetBlockPrice(uint,uint)
.text:00002D46                 mov     eax, [ebp+var_4]
.text:00002D49                 mov     ecx, [ebp+var_4]
.text:00002D4C                 mov     edx, [eax+0Ch]
.text:00002D4F                 sub     edx, [ecx+4]
.text:00002D52                 setz    al
.text:00002D55                 movzx   ecx, al
.text:00002D58                 push    ecx             ; bool
.text:00002D59                 push    1               ; unsigned int
.text:00002D5B                 mov     ecx, [ebp+var_4] ; this
.text:00002D5E                 call    ?CodeBlock@CCoder@NEncoder@NDeflate@NCompress@@QAEXI_N@Z ; NCompress::NDeflate::NEncoder::CCoder::CodeBlock(uint,bool)
.text:00002D63                 mov     edx, [ebp+var_4]
.text:00002D66                 mov     eax, [edx+12D8h]
.text:00002D6C                 mov     ecx, [eax+290h]
.text:00002D72                 xor     edx, edx
.text:00002D74                 add     ecx, [ebp+var_14]
.text:00002D77                 adc     edx, [ebp+var_10]
.text:00002D7A                 mov     [ebp+var_14], ecx
.text:00002D7D                 mov     [ebp+var_10], edx
.text:00002D80                 cmp     [ebp+arg_10], 0
.text:00002D84                 jz      short loc_2DC7
.text:00002D86                 mov     ecx, [ebp+var_4]
.text:00002D89                 add     ecx, 468h       ; this
.text:00002D8F                 call    ?GetProcessedSize@CBitlEncoder@@QBE_KXZ ; CBitlEncoder::GetProcessedSize(void)
.text:00002D94                 mov     [ebp+var_28], eax
.text:00002D97                 mov     [ebp+var_24], edx
.text:00002D9A                 mov     esi, esp
.text:00002D9C                 lea     eax, [ebp+var_28]
.text:00002D9F                 push    eax
.text:00002DA0                 lea     ecx, [ebp+var_14]
.text:00002DA3                 push    ecx
.text:00002DA4                 mov     edx, [ebp+arg_10]
.text:00002DA7                 mov     eax, [edx]
.text:00002DA9                 mov     ecx, [ebp+arg_10]
.text:00002DAC                 push    ecx
.text:00002DAD                 mov     edx, [eax+0Ch]
.text:00002DB0                 call    edx
.text:00002DB2                 cmp     esi, esp
.text:00002DB4                 call    __RTC_CheckEsp
.text:00002DB9                 mov     [ebp+var_30], eax
.text:00002DBC                 cmp     [ebp+var_30], 0
.text:00002DC0                 jz      short loc_2DC7
.text:00002DC2                 mov     eax, [ebp+var_30]
.text:00002DC5                 jmp     short loc_2DF8
.text:00002DC7 ; ---------------------------------------------------------------------------
.text:00002DC7
.text:00002DC7 loc_2DC7:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1DCj
.text:00002DC7                                         ; NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+218j
.text:00002DC7                 mov     eax, [ebp+var_4]
.text:00002DCA                 mov     ecx, [ebp+var_4]
.text:00002DCD                 mov     edx, [eax+0Ch]
.text:00002DD0                 sub     edx, [ecx+4]
.text:00002DD3                 jnz     loc_2D1B
.text:00002DD9                 mov     eax, [ebp+var_4]
.text:00002DDC                 cmp     dword ptr [eax+5Ch], 0
.text:00002DE0                 jz      short loc_2DEA
.text:00002DE2                 mov     ecx, [ebp+var_4]
.text:00002DE5                 mov     eax, [ecx+5Ch]
.text:00002DE8                 jmp     short loc_2DF8
.text:00002DEA ; ---------------------------------------------------------------------------
.text:00002DEA
.text:00002DEA loc_2DEA:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+238j
.text:00002DEA                 mov     ecx, [ebp+var_4]
.text:00002DED                 add     ecx, 468h       ; this
.text:00002DF3                 call    ?Flush@CBitlEncoder@@QAEJXZ ; CBitlEncoder::Flush(void)
.text:00002DF8
.text:00002DF8 loc_2DF8:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+A6j
.text:00002DF8                                         ; NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+21Dj ...
.text:00002DF8                 push    edx
.text:00002DF9                 mov     ecx, ebp
.text:00002DFB                 push    eax
.text:00002DFC                 lea     edx, $LN17_0
.text:00002E02                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002E07                 pop     eax
.text:00002E08                 pop     edx
.text:00002E09                 pop     edi
.text:00002E0A                 pop     esi
.text:00002E0B                 add     esp, 38h
.text:00002E0E                 cmp     ebp, esp
.text:00002E10                 call    __RTC_CheckEsp
.text:00002E15                 mov     esp, ebp
.text:00002E17                 pop     ebp
.text:00002E18                 retn    14h
.text:00002E18 ?CodeReal@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:00002E18
.text:00002E18 ; ---------------------------------------------------------------------------
.text:00002E1B                 align 4
.text:00002E1C $LN17_0         dd 2                    ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+254o
.text:00002E20                 dd offset $LN16
.text:00002E24 $LN16           dd 0FFFFFFECh, 8        ; DATA XREF: .text:00002E20o
.text:00002E2C                 dd offset $LN14_0       ; "nowPos"
.text:00002E30                 dd 0FFFFFFD8h, 8
.text:00002E38                 dd offset $LN15_0       ; "packSize"
.text:00002E3C $LN15_0         db 'packSize',0         ; DATA XREF: .text:00002E38o
.text:00002E45 $LN14_0         db 'nowPos',0           ; DATA XREF: .text:00002E2Co
.text:00002E4C                 db 0Ch dup(0CCh)
.text:00002E58
.text:00002E58 ; =============== S U B R O U T I N E =======================================
.text:00002E58
.text:00002E58 ; Attributes: bp-based frame
.text:00002E58
.text:00002E58 ; __int32 __thiscall NCompress::NDeflate::NEncoder::CCoder::BaseCode(NCompress::NDeflate::NEncoder::CCoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00002E58                 public ?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00002E58 ?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00002E58                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1Dp
.text:00002E58                                         ; NCompress::NDeflate::NEncoder::CCOMCoder64::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1Dp
.text:00002E58
.text:00002E58 var_2C          = dword ptr -2Ch
.text:00002E58 var_28          = dword ptr -28h
.text:00002E58 var_24          = dword ptr -24h
.text:00002E58 var_20          = dword ptr -20h
.text:00002E58 var_1C          = dword ptr -1Ch
.text:00002E58 var_18          = dword ptr -18h
.text:00002E58 var_14          = dword ptr -14h
.text:00002E58 var_10          = dword ptr -10h
.text:00002E58 var_C           = dword ptr -0Ch
.text:00002E58 var_4           = dword ptr -4
.text:00002E58 arg_0           = dword ptr  8
.text:00002E58 arg_4           = dword ptr  0Ch
.text:00002E58 arg_8           = dword ptr  10h
.text:00002E58 arg_C           = dword ptr  14h
.text:00002E58 arg_10          = dword ptr  18h
.text:00002E58
.text:00002E58 ; FUNCTION CHUNK AT .text:00002F14 SIZE 0000002F BYTES
.text:00002E58
.text:00002E58                 push    ebp
.text:00002E59                 mov     ebp, esp
.text:00002E5B                 push    0FFFFFFFFh
.text:00002E5D                 push    offset __ehhandler$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00002E62                 mov     eax, large fs:0
.text:00002E68                 push    eax
.text:00002E69                 push    ecx
.text:00002E6A                 sub     esp, 1Ch
.text:00002E6D                 push    ebx
.text:00002E6E                 push    esi
.text:00002E6F                 push    edi
.text:00002E70                 mov     eax, 0CCCCCCCCh
.text:00002E75                 mov     [ebp+var_2C], eax
.text:00002E78                 mov     [ebp+var_28], eax
.text:00002E7B                 mov     [ebp+var_24], eax
.text:00002E7E                 mov     [ebp+var_20], eax
.text:00002E81                 mov     [ebp+var_1C], eax
.text:00002E84                 mov     [ebp+var_18], eax
.text:00002E87                 mov     [ebp+var_14], eax
.text:00002E8A                 mov     eax, dword ptr ds:___security_cookie
.text:00002E8F                 xor     eax, ebp
.text:00002E91                 push    eax
.text:00002E92                 lea     eax, [ebp+var_C]
.text:00002E95                 mov     large fs:0, eax
.text:00002E9B                 mov     [ebp+var_10], esp
.text:00002E9E                 mov     [ebp+var_14], ecx
.text:00002EA1                 mov     [ebp+var_4], 0
.text:00002EA8                 mov     eax, [ebp+arg_10]
.text:00002EAB                 push    eax             ; struct ICompressProgressInfo *
.text:00002EAC                 mov     ecx, [ebp+arg_C]
.text:00002EAF                 push    ecx             ; unsigned __int64 *
.text:00002EB0                 mov     edx, [ebp+arg_8]
.text:00002EB3                 push    edx             ; unsigned __int64 *
.text:00002EB4                 mov     eax, [ebp+arg_4]
.text:00002EB7                 push    eax             ; struct ISequentialOutStream *
.text:00002EB8                 mov     ecx, [ebp+arg_0]
.text:00002EBB                 push    ecx             ; struct ISequentialInStream *
.text:00002EBC                 mov     ecx, [ebp+var_14] ; this
.text:00002EBF                 call    ?CodeReal@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.text:00002EC4                 mov     [ebp+var_2C], eax
.text:00002EC7                 mov     eax, [ebp+var_2C]
.text:00002ECA                 jmp     short loc_2F14
.text:00002ECA ?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:00002ECA
.text:00002ECC
.text:00002ECC ; =============== S U B R O U T I N E =======================================
.text:00002ECC
.text:00002ECC
.text:00002ECC __catch$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 proc near
.text:00002ECC                                         ; DATA XREF: .xdata$x:00003120o
.text:00002ECC                 mov     edx, [ebp-1Ch]
.text:00002ECF                 mov     eax, [edx]
.text:00002ED1                 mov     [ebp-24h], eax
.text:00002ED4                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002EDB                 mov     eax, offset $LN8_0
.text:00002EE0                 retn
.text:00002EE0 __catch$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 endp
.text:00002EE0
.text:00002EE1 ; ---------------------------------------------------------------------------
.text:00002EE1                 mov     eax, offset __tryend$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2
.text:00002EE6                 retn
.text:00002EE7
.text:00002EE7 ; =============== S U B R O U T I N E =======================================
.text:00002EE7
.text:00002EE7
.text:00002EE7 __catch$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1 proc near
.text:00002EE7                                         ; DATA XREF: .xdata$x:00003130o
.text:00002EE7                 mov     dword ptr [ebp-28h], 80004005h
.text:00002EEE                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002EF5                 mov     eax, offset $LN10_1
.text:00002EFA                 retn
.text:00002EFA __catch$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1 endp
.text:00002EFA
.text:00002EFB ; ---------------------------------------------------------------------------
.text:00002EFB                 mov     eax, offset __tryend$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2
.text:00002F00                 retn
.text:00002F01 ; ---------------------------------------------------------------------------
.text:00002F01
.text:00002F01 __tryend$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2:
.text:00002F01                                         ; DATA XREF: .text:00002EE1o
.text:00002F01                                         ; .text:00002EFBo
.text:00002F01                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002F08                 jmp     short loc_2F0F
.text:00002F0A ; ---------------------------------------------------------------------------
.text:00002F0A
.text:00002F0A $LN10_1:                                ; DATA XREF: __catch$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1+Eo
.text:00002F0A                 mov     eax, [ebp-28h]
.text:00002F0D                 jmp     short loc_2F14
.text:00002F0F ; ---------------------------------------------------------------------------
.text:00002F0F
.text:00002F0F loc_2F0F:                               ; CODE XREF: .text:00002F08j
.text:00002F0F                 jmp     short loc_2F14
.text:00002F11 ; ---------------------------------------------------------------------------
.text:00002F11
.text:00002F11 $LN8_0:                                 ; DATA XREF: __catch$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0+Fo
.text:00002F11                 mov     eax, [ebp-24h]
.text:00002F14 ; START OF FUNCTION CHUNK FOR ?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00002F14
.text:00002F14 loc_2F14:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::BaseCode(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+72j
.text:00002F14                                         ; .text:00002F0Dj ...
.text:00002F14                 push    edx
.text:00002F15                 mov     ecx, ebp
.text:00002F17                 push    eax
.text:00002F18                 lea     edx, $LN16_0
.text:00002F1E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002F23                 pop     eax
.text:00002F24                 pop     edx
.text:00002F25                 mov     ecx, [ebp+var_C]
.text:00002F28                 mov     large fs:0, ecx
.text:00002F2F                 pop     ecx
.text:00002F30                 pop     edi
.text:00002F31                 pop     esi
.text:00002F32                 pop     ebx
.text:00002F33                 add     esp, 2Ch
.text:00002F36                 cmp     ebp, esp
.text:00002F38                 call    __RTC_CheckEsp
.text:00002F3D                 mov     esp, ebp
.text:00002F3F                 pop     ebp
.text:00002F40                 retn    14h
.text:00002F40 ; END OF FUNCTION CHUNK FOR ?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00002F40 ; ---------------------------------------------------------------------------
.text:00002F43                 align 4
.text:00002F44 $LN16_0         dd 1                    ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::BaseCode(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+C0o
.text:00002F48                 dd offset $LN15_1
.text:00002F4C $LN15_1         dd 0FFFFFFE4h, 4        ; DATA XREF: .text:00002F48o
.text:00002F54                 dd offset $LN13_0
.text:00002F58 $LN13_0         dd 0CCCC0065h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00002F54o
.text:00002F68
.text:00002F68 ; =============== S U B R O U T I N E =======================================
.text:00002F68
.text:00002F68 ; Attributes: bp-based frame
.text:00002F68
.text:00002F68 ; __int32 __stdcall NCompress::NDeflate::NEncoder::CCOMCoder::Code(NCompress::NDeflate::NEncoder::CCOMCoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00002F68                 public ?Code@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00002F68 ?Code@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00002F68
.text:00002F68 this            = dword ptr  8
.text:00002F68 arg_4           = dword ptr  0Ch
.text:00002F68 arg_8           = dword ptr  10h
.text:00002F68 arg_C           = dword ptr  14h
.text:00002F68 arg_10          = dword ptr  18h
.text:00002F68 arg_14          = dword ptr  1Ch
.text:00002F68
.text:00002F68                 push    ebp
.text:00002F69                 mov     ebp, esp
.text:00002F6B                 mov     eax, [ebp+arg_14]
.text:00002F6E                 push    eax             ; struct ICompressProgressInfo *
.text:00002F6F                 mov     ecx, [ebp+arg_10]
.text:00002F72                 push    ecx             ; unsigned __int64 *
.text:00002F73                 mov     edx, [ebp+arg_C]
.text:00002F76                 push    edx             ; unsigned __int64 *
.text:00002F77                 mov     eax, [ebp+arg_8]
.text:00002F7A                 push    eax             ; struct ISequentialOutStream *
.text:00002F7B                 mov     ecx, [ebp+arg_4]
.text:00002F7E                 push    ecx             ; struct ISequentialInStream *
.text:00002F7F                 mov     ecx, [ebp+this]
.text:00002F82                 add     ecx, 10h        ; this
.text:00002F85                 call    ?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NEncoder::CCoder::BaseCode(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.text:00002F8A                 cmp     ebp, esp
.text:00002F8C                 call    __RTC_CheckEsp
.text:00002F91                 pop     ebp
.text:00002F92                 retn    18h
.text:00002F92 ?Code@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:00002F92
.text:00002F92 ; ---------------------------------------------------------------------------
.text:00002F95                 align 4
.text:00002F98
.text:00002F98 ; =============== S U B R O U T I N E =======================================
.text:00002F98
.text:00002F98 ; Attributes: bp-based frame
.text:00002F98
.text:00002F98 ; __int32 __stdcall NCompress::NDeflate::NEncoder::CCOMCoder::SetCoderProperties(NCompress::NDeflate::NEncoder::CCOMCoder *this, const unsigned __int32 *, const struct tagPROPVARIANT *, unsigned int)
.text:00002F98                 public ?SetCoderProperties@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z
.text:00002F98 ?SetCoderProperties@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z proc near
.text:00002F98
.text:00002F98 this            = dword ptr  8
.text:00002F98 arg_4           = dword ptr  0Ch
.text:00002F98 arg_8           = dword ptr  10h
.text:00002F98 arg_C           = dword ptr  14h
.text:00002F98
.text:00002F98                 push    ebp
.text:00002F99                 mov     ebp, esp
.text:00002F9B                 mov     eax, [ebp+arg_C]
.text:00002F9E                 push    eax             ; unsigned int
.text:00002F9F                 mov     ecx, [ebp+arg_8]
.text:00002FA2                 push    ecx             ; struct tagPROPVARIANT *
.text:00002FA3                 mov     edx, [ebp+arg_4]
.text:00002FA6                 push    edx             ; unsigned __int32 *
.text:00002FA7                 mov     ecx, [ebp+this]
.text:00002FAA                 add     ecx, 0Ch        ; this
.text:00002FAD                 call    ?BaseSetEncoderProperties2@CCoder@NEncoder@NDeflate@NCompress@@QAEJPBKPBUtagPROPVARIANT@@I@Z ; NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)
.text:00002FB2                 cmp     ebp, esp
.text:00002FB4                 call    __RTC_CheckEsp
.text:00002FB9                 pop     ebp
.text:00002FBA                 retn    10h
.text:00002FBA ?SetCoderProperties@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z endp
.text:00002FBA
.text:00002FBA ; ---------------------------------------------------------------------------
.text:00002FBD                 db 0Bh dup(0CCh)
.text:00002FC8
.text:00002FC8 ; =============== S U B R O U T I N E =======================================
.text:00002FC8
.text:00002FC8 ; Attributes: bp-based frame
.text:00002FC8
.text:00002FC8 ; __int32 __stdcall NCompress::NDeflate::NEncoder::CCOMCoder64::Code(NCompress::NDeflate::NEncoder::CCOMCoder64 *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00002FC8                 public ?Code@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00002FC8 ?Code@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00002FC8
.text:00002FC8 this            = dword ptr  8
.text:00002FC8 arg_4           = dword ptr  0Ch
.text:00002FC8 arg_8           = dword ptr  10h
.text:00002FC8 arg_C           = dword ptr  14h
.text:00002FC8 arg_10          = dword ptr  18h
.text:00002FC8 arg_14          = dword ptr  1Ch
.text:00002FC8
.text:00002FC8                 push    ebp
.text:00002FC9                 mov     ebp, esp
.text:00002FCB                 mov     eax, [ebp+arg_14]
.text:00002FCE                 push    eax             ; struct ICompressProgressInfo *
.text:00002FCF                 mov     ecx, [ebp+arg_10]
.text:00002FD2                 push    ecx             ; unsigned __int64 *
.text:00002FD3                 mov     edx, [ebp+arg_C]
.text:00002FD6                 push    edx             ; unsigned __int64 *
.text:00002FD7                 mov     eax, [ebp+arg_8]
.text:00002FDA                 push    eax             ; struct ISequentialOutStream *
.text:00002FDB                 mov     ecx, [ebp+arg_4]
.text:00002FDE                 push    ecx             ; struct ISequentialInStream *
.text:00002FDF                 mov     ecx, [ebp+this]
.text:00002FE2                 add     ecx, 10h        ; this
.text:00002FE5                 call    ?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NEncoder::CCoder::BaseCode(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.text:00002FEA                 cmp     ebp, esp
.text:00002FEC                 call    __RTC_CheckEsp
.text:00002FF1                 pop     ebp
.text:00002FF2                 retn    18h
.text:00002FF2 ?Code@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:00002FF2
.text:00002FF2 ; ---------------------------------------------------------------------------
.text:00002FF5                 align 4
.text:00002FF8
.text:00002FF8 ; =============== S U B R O U T I N E =======================================
.text:00002FF8
.text:00002FF8 ; Attributes: bp-based frame
.text:00002FF8
.text:00002FF8 ; __int32 __stdcall NCompress::NDeflate::NEncoder::CCOMCoder64::SetCoderProperties(NCompress::NDeflate::NEncoder::CCOMCoder64 *this, const unsigned __int32 *, const struct tagPROPVARIANT *, unsigned int)
.text:00002FF8                 public ?SetCoderProperties@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z
.text:00002FF8 ?SetCoderProperties@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z proc near
.text:00002FF8
.text:00002FF8 this            = dword ptr  8
.text:00002FF8 arg_4           = dword ptr  0Ch
.text:00002FF8 arg_8           = dword ptr  10h
.text:00002FF8 arg_C           = dword ptr  14h
.text:00002FF8
.text:00002FF8                 push    ebp
.text:00002FF9                 mov     ebp, esp
.text:00002FFB                 mov     eax, [ebp+arg_C]
.text:00002FFE                 push    eax             ; unsigned int
.text:00002FFF                 mov     ecx, [ebp+arg_8]
.text:00003002                 push    ecx             ; struct tagPROPVARIANT *
.text:00003003                 mov     edx, [ebp+arg_4]
.text:00003006                 push    edx             ; unsigned __int32 *
.text:00003007                 mov     ecx, [ebp+this]
.text:0000300A                 add     ecx, 0Ch        ; this
.text:0000300D                 call    ?BaseSetEncoderProperties2@CCoder@NEncoder@NDeflate@NCompress@@QAEJPBKPBUtagPROPVARIANT@@I@Z ; NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)
.text:00003012                 cmp     ebp, esp
.text:00003014                 call    __RTC_CheckEsp
.text:00003019                 pop     ebp
.text:0000301A                 retn    10h
.text:0000301A ?SetCoderProperties@CCOMCoder64@NEncoder@NDeflate@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z endp
.text:0000301A
.text:0000301A ; ---------------------------------------------------------------------------
.text:0000301D                 align 10h
.text:0000301D _text           ends
.text:0000301D
.rtc$TMZ:00003020 ; ===========================================================================
.rtc$TMZ:00003020
.rtc$TMZ:00003020 ; Segment type: Pure data
.rtc$TMZ:00003020 ; Segment permissions: Read
.rtc$TMZ:00003020 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00003020                 assume cs:_rtc$TMZ
.rtc$TMZ:00003020                 ;org 3020h
.rtc$TMZ:00003020 ; COMDAT (pick any)
.rtc$TMZ:00003020 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00003020 _rtc$TMZ        ends
.rtc$TMZ:00003020
.rtc$IMZ:00003024 ; ===========================================================================
.rtc$IMZ:00003024
.rtc$IMZ:00003024 ; Segment type: Pure data
.rtc$IMZ:00003024 ; Segment permissions: Read
.rtc$IMZ:00003024 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00003024                 assume cs:_rtc$IMZ
.rtc$IMZ:00003024                 ;org 3024h
.rtc$IMZ:00003024 ; COMDAT (pick any)
.rtc$IMZ:00003024 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00003024 _rtc$IMZ        ends
.rtc$IMZ:00003024
.text$x:00003028 ; ===========================================================================
.text$x:00003028
.text$x:00003028 ; Segment type: Pure code
.text$x:00003028 ; Segment permissions: Read/Execute
.text$x:00003028 _text$x         segment para public 'CODE' use32
.text$x:00003028                 assume cs:_text$x
.text$x:00003028                 ;org 3028h
.text$x:00003028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003028
.text$x:00003028 ; =============== S U B R O U T I N E =======================================
.text$x:00003028
.text$x:00003028
.text$x:00003028 __unwindfunclet$??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z$0 proc near
.text$x:00003028                                         ; DATA XREF: .xdata$x:0000309Co
.text$x:00003028                 mov     ecx, [ebp-10h]
.text$x:0000302B                 add     ecx, 468h       ; this
.text$x:00003031                 jmp     ??1CBitlEncoder@@QAE@XZ ; CBitlEncoder::~CBitlEncoder(void)
.text$x:00003031 __unwindfunclet$??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z$0 endp
.text$x:00003031
.text$x:00003036
.text$x:00003036 ; =============== S U B R O U T I N E =======================================
.text$x:00003036
.text$x:00003036
.text$x:00003036 __ehhandler$??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z proc near
.text$x:00003036                                         ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::CCoder(bool)+5o
.text$x:00003036
.text$x:00003036 arg_4           = dword ptr  8
.text$x:00003036
.text$x:00003036                 mov     edx, [esp+arg_4]
.text$x:0000303A                 lea     eax, [edx+0Ch]
.text$x:0000303D                 mov     ecx, [edx-34h]
.text$x:00003040                 xor     ecx, eax
.text$x:00003042                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003047                 mov     eax, offset __ehfuncinfo$??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z
.text$x:0000304C                 jmp     ___CxxFrameHandler3
.text$x:0000304C __ehhandler$??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z endp
.text$x:0000304C
.text$x:00003051
.text$x:00003051 ; =============== S U B R O U T I N E =======================================
.text$x:00003051
.text$x:00003051
.text$x:00003051 __unwindfunclet$??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ$0 proc near
.text$x:00003051                                         ; DATA XREF: .xdata$x:000030C8o
.text$x:00003051                 mov     ecx, [ebp-10h]
.text$x:00003054                 add     ecx, 468h       ; this
.text$x:0000305A                 jmp     ??1CBitlEncoder@@QAE@XZ ; CBitlEncoder::~CBitlEncoder(void)
.text$x:0000305A __unwindfunclet$??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ$0 endp
.text$x:0000305A
.text$x:0000305F
.text$x:0000305F ; =============== S U B R O U T I N E =======================================
.text$x:0000305F
.text$x:0000305F
.text$x:0000305F __ehhandler$??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ proc near
.text$x:0000305F                                         ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::~CCoder(void)+5o
.text$x:0000305F
.text$x:0000305F arg_4           = dword ptr  8
.text$x:0000305F
.text$x:0000305F                 mov     edx, [esp+arg_4]
.text$x:00003063                 lea     eax, [edx+0Ch]
.text$x:00003066                 mov     ecx, [edx-8]
.text$x:00003069                 xor     ecx, eax
.text$x:0000306B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003070                 mov     eax, offset __ehfuncinfo$??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ
.text$x:00003075                 jmp     ___CxxFrameHandler3
.text$x:00003075 __ehhandler$??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ endp
.text$x:00003075
.text$x:0000307A
.text$x:0000307A ; =============== S U B R O U T I N E =======================================
.text$x:0000307A
.text$x:0000307A
.text$x:0000307A __ehhandler$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text$x:0000307A                                         ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::BaseCode(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5o
.text$x:0000307A
.text$x:0000307A arg_4           = dword ptr  8
.text$x:0000307A
.text$x:0000307A                 mov     edx, [esp+arg_4]
.text$x:0000307E                 lea     eax, [edx+0Ch]
.text$x:00003081                 mov     ecx, [edx-30h]
.text$x:00003084                 xor     ecx, eax
.text$x:00003086                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000308B                 mov     eax, offset __ehfuncinfo$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text$x:00003090                 jmp     ___CxxFrameHandler3
.text$x:00003090 __ehhandler$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text$x:00003090
.text$x:00003090 ; ---------------------------------------------------------------------------
.text$x:00003095                 align 4
.text$x:00003095 _text$x         ends
.text$x:00003095
.xdata$x:00003098 ; ===========================================================================
.xdata$x:00003098
.xdata$x:00003098 ; Segment type: Pure data
.xdata$x:00003098 ; Segment permissions: Read
.xdata$x:00003098 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003098                 assume cs:_xdata$x
.xdata$x:00003098                 ;org 3098h
.xdata$x:00003098 __unwindtable$??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z db 0FFh
.xdata$x:00003098                                         ; DATA XREF: .xdata$x:000030A8o
.xdata$x:00003099                 db 0FFh
.xdata$x:0000309A                 db 0FFh
.xdata$x:0000309B                 db 0FFh
.xdata$x:0000309C                 dd offset __unwindfunclet$??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z$0
.xdata$x:000030A0 __ehfuncinfo$??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z db  22h ; "
.xdata$x:000030A0                                         ; DATA XREF: __ehhandler$??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z+11o
.xdata$x:000030A1                 db    5
.xdata$x:000030A2                 db  93h ; ô
.xdata$x:000030A3                 db  19h
.xdata$x:000030A4                 db    1
.xdata$x:000030A5                 db    0
.xdata$x:000030A6                 db    0
.xdata$x:000030A7                 db    0
.xdata$x:000030A8                 dd offset __unwindtable$??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z
.xdata$x:000030AC                 align 20h
.xdata$x:000030C0                 db    1
.xdata$x:000030C1                 db    0
.xdata$x:000030C2                 db    0
.xdata$x:000030C3                 db    0
.xdata$x:000030C4 __unwindtable$??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ db 0FFh
.xdata$x:000030C4                                         ; DATA XREF: .xdata$x:000030D4o
.xdata$x:000030C5                 db 0FFh
.xdata$x:000030C6                 db 0FFh
.xdata$x:000030C7                 db 0FFh
.xdata$x:000030C8                 dd offset __unwindfunclet$??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ$0
.xdata$x:000030CC __ehfuncinfo$??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ db  22h ; "
.xdata$x:000030CC                                         ; DATA XREF: __ehhandler$??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ+11o
.xdata$x:000030CD                 db    5
.xdata$x:000030CE                 db  93h ; ô
.xdata$x:000030CF                 db  19h
.xdata$x:000030D0                 db    1
.xdata$x:000030D1                 db    0
.xdata$x:000030D2                 db    0
.xdata$x:000030D3                 db    0
.xdata$x:000030D4                 dd offset __unwindtable$??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ
.xdata$x:000030D8                 db    0
.xdata$x:000030D9                 db    0
.xdata$x:000030DA                 db    0
.xdata$x:000030DB                 db    0
.xdata$x:000030DC                 db    0
.xdata$x:000030DD                 db    0
.xdata$x:000030DE                 db    0
.xdata$x:000030DF                 db    0
.xdata$x:000030E0                 db    0
.xdata$x:000030E1                 db    0
.xdata$x:000030E2                 db    0
.xdata$x:000030E3                 db    0
.xdata$x:000030E4                 db    0
.xdata$x:000030E5                 db    0
.xdata$x:000030E6                 db    0
.xdata$x:000030E7                 db    0
.xdata$x:000030E8                 db    0
.xdata$x:000030E9                 db    0
.xdata$x:000030EA                 db    0
.xdata$x:000030EB                 db    0
.xdata$x:000030EC                 db    1
.xdata$x:000030ED                 db    0
.xdata$x:000030EE                 db    0
.xdata$x:000030EF                 db    0
.xdata$x:000030F0 __unwindtable$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:000030F0                                         ; DATA XREF: .xdata$x:0000313Co
.xdata$x:000030F1                 db 0FFh
.xdata$x:000030F2                 db 0FFh
.xdata$x:000030F3                 db 0FFh
.xdata$x:000030F4                 db    0
.xdata$x:000030F5                 db    0
.xdata$x:000030F6                 db    0
.xdata$x:000030F7                 db    0
.xdata$x:000030F8                 db 0FFh
.xdata$x:000030F9                 db 0FFh
.xdata$x:000030FA                 db 0FFh
.xdata$x:000030FB                 db 0FFh
.xdata$x:000030FC                 db    0
.xdata$x:000030FD                 db    0
.xdata$x:000030FE                 db    0
.xdata$x:000030FF                 db    0
.xdata$x:00003100 __tryblocktable$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db    0
.xdata$x:00003100                                         ; DATA XREF: .xdata$x:00003144o
.xdata$x:00003101                 db    0
.xdata$x:00003102                 db    0
.xdata$x:00003103                 db    0
.xdata$x:00003104                 db    0
.xdata$x:00003105                 db    0
.xdata$x:00003106                 db    0
.xdata$x:00003107                 db    0
.xdata$x:00003108                 db    1
.xdata$x:00003109                 db    0
.xdata$x:0000310A                 db    0
.xdata$x:0000310B                 db    0
.xdata$x:0000310C                 db    2
.xdata$x:0000310D                 db    0
.xdata$x:0000310E                 db    0
.xdata$x:0000310F                 db    0
.xdata$x:00003110                 dd offset __catchsym$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
.xdata$x:00003114 __catchsym$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3 db    9
.xdata$x:00003114                                         ; DATA XREF: .xdata$x:00003110o
.xdata$x:00003115                 db    0
.xdata$x:00003116                 db    0
.xdata$x:00003117                 db    0
.xdata$x:00003118                 dd offset ??_R0?AUCOutBufferException@@@8 ; COutBufferException `RTTI Type Descriptor'
.xdata$x:0000311C                 db 0E4h ; S
.xdata$x:0000311D                 db 0FFh
.xdata$x:0000311E                 db 0FFh
.xdata$x:0000311F                 db 0FFh
.xdata$x:00003120                 dd offset __catch$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0
.xdata$x:00003124                 dd offset _kLenDirectBits32
.xdata$x:00003128                 align 10h
.xdata$x:00003130                 dd offset __catch$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1
.xdata$x:00003134 __ehfuncinfo$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:00003134                                         ; DATA XREF: __ehhandler$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+11o
.xdata$x:00003135                 db    5
.xdata$x:00003136                 db  93h ; ô
.xdata$x:00003137                 db  19h
.xdata$x:00003138                 db    2
.xdata$x:00003139                 db    0
.xdata$x:0000313A                 db    0
.xdata$x:0000313B                 db    0
.xdata$x:0000313C                 dd offset __unwindtable$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.xdata$x:00003140                 db    1
.xdata$x:00003141                 db    0
.xdata$x:00003142                 db    0
.xdata$x:00003143                 db    0
.xdata$x:00003144                 dd offset __tryblocktable$?BaseCode@CCoder@NEncoder@NDeflate@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.xdata$x:00003148                 db    0
.xdata$x:00003149                 db    0
.xdata$x:0000314A                 db    0
.xdata$x:0000314B                 db    0
.xdata$x:0000314C                 db    0
.xdata$x:0000314D                 db    0
.xdata$x:0000314E                 db    0
.xdata$x:0000314F                 db    0
.xdata$x:00003150                 db    0
.xdata$x:00003151                 db    0
.xdata$x:00003152                 db    0
.xdata$x:00003153                 db    0
.xdata$x:00003154                 db    1
.xdata$x:00003155                 db    0
.xdata$x:00003156                 db    0
.xdata$x:00003157                 db    0
.xdata$x:00003157 _xdata$x        ends
.xdata$x:00003157
.text:00003158 ; ===========================================================================
.text:00003158
.text:00003158 ; Segment type: Pure code
.text:00003158 ; Segment permissions: Read/Execute
.text:00003158 _text           segment para public 'CODE' use32
.text:00003158                 assume cs:_text
.text:00003158                 ;org 3158h
.text:00003158 ; COMDAT (pick any)
.text:00003158                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003158
.text:00003158 ; =============== S U B R O U T I N E =======================================
.text:00003158
.text:00003158 ; Attributes: bp-based frame
.text:00003158
.text:00003158 ; _DWORD __thiscall NCompress::NDeflate::NEncoder::CEncProps::CEncProps(NCompress::NDeflate::NEncoder::CEncProps *__hidden this)
.text:00003158                 public ??0CEncProps@NEncoder@NDeflate@NCompress@@QAE@XZ
.text:00003158 ??0CEncProps@NEncoder@NDeflate@NCompress@@QAE@XZ proc near
.text:00003158                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CCoder(bool)+9Cp
.text:00003158                                         ; NCompress::NDeflate::NEncoder::CCoder::BaseSetEncoderProperties2(ulong const *,tagPROPVARIANT const *,uint)+1Ep
.text:00003158
.text:00003158 var_4           = dword ptr -4
.text:00003158
.text:00003158                 push    ebp
.text:00003159                 mov     ebp, esp
.text:0000315B                 push    ecx
.text:0000315C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003163                 mov     [ebp+var_4], ecx
.text:00003166                 mov     eax, [ebp+var_4]
.text:00003169                 mov     dword ptr [eax], 0FFFFFFFFh
.text:0000316F                 mov     ecx, [ebp+var_4]
.text:00003172                 mov     dword ptr [ecx+10h], 0
.text:00003179                 mov     edx, [ebp+var_4]
.text:0000317C                 mov     dword ptr [edx+0Ch], 0FFFFFFFFh
.text:00003183                 mov     eax, [ebp+var_4]
.text:00003186                 mov     dword ptr [eax+8], 0FFFFFFFFh
.text:0000318D                 mov     ecx, [ebp+var_4]
.text:00003190                 mov     dword ptr [ecx+4], 0FFFFFFFFh
.text:00003197                 mov     edx, [ebp+var_4]
.text:0000319A                 mov     dword ptr [edx+14h], 0FFFFFFFFh
.text:000031A1                 mov     eax, [ebp+var_4]
.text:000031A4                 mov     esp, ebp
.text:000031A6                 pop     ebp
.text:000031A7                 retn
.text:000031A7 ??0CEncProps@NEncoder@NDeflate@NCompress@@QAE@XZ endp
.text:000031A7
.text:000031A7 _text           ends
.text:000031A7
.text:000031A8 ; ===========================================================================
.text:000031A8
.text:000031A8 ; Segment type: Pure code
.text:000031A8 ; Segment permissions: Read/Execute
.text:000031A8 _text           segment para public 'CODE' use32
.text:000031A8                 assume cs:_text
.text:000031A8                 ;org 31A8h
.text:000031A8 ; COMDAT (pick any)
.text:000031A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000031A8
.text:000031A8 ; =============== S U B R O U T I N E =======================================
.text:000031A8
.text:000031A8 ; Attributes: bp-based frame
.text:000031A8
.text:000031A8 ; _DWORD __thiscall CBitlEncoder::CBitlEncoder(CBitlEncoder *__hidden this)
.text:000031A8                 public ??0CBitlEncoder@@QAE@XZ
.text:000031A8 ??0CBitlEncoder@@QAE@XZ proc near       ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CCoder(bool)+43p
.text:000031A8
.text:000031A8 var_4           = dword ptr -4
.text:000031A8
.text:000031A8                 push    ebp
.text:000031A9                 mov     ebp, esp
.text:000031AB                 push    ecx
.text:000031AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000031B3                 mov     [ebp+var_4], ecx
.text:000031B6                 mov     ecx, [ebp+var_4] ; this
.text:000031B9                 call    ??0COutBuffer@@QAE@XZ ; COutBuffer::COutBuffer(void)
.text:000031BE                 mov     eax, [ebp+var_4]
.text:000031C1                 add     esp, 4
.text:000031C4                 cmp     ebp, esp
.text:000031C6                 call    __RTC_CheckEsp
.text:000031CB                 mov     esp, ebp
.text:000031CD                 pop     ebp
.text:000031CE                 retn
.text:000031CE ??0CBitlEncoder@@QAE@XZ endp
.text:000031CE
.text:000031CE ; ---------------------------------------------------------------------------
.text:000031CF                 align 10h
.text:000031CF _text           ends
.text:000031CF
.text:000031D0 ; ===========================================================================
.text:000031D0
.text:000031D0 ; Segment type: Pure code
.text:000031D0 ; Segment permissions: Read/Execute
.text:000031D0 _text           segment para public 'CODE' use32
.text:000031D0                 assume cs:_text
.text:000031D0                 ;org 31D0h
.text:000031D0 ; COMDAT (pick any)
.text:000031D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000031D0
.text:000031D0 ; =============== S U B R O U T I N E =======================================
.text:000031D0
.text:000031D0 ; Attributes: bp-based frame
.text:000031D0
.text:000031D0 ; _DWORD __thiscall COutBuffer::COutBuffer(COutBuffer *__hidden this)
.text:000031D0                 public ??0COutBuffer@@QAE@XZ
.text:000031D0 ??0COutBuffer@@QAE@XZ proc near         ; CODE XREF: CBitlEncoder::CBitlEncoder(void)+11p
.text:000031D0
.text:000031D0 var_4           = dword ptr -4
.text:000031D0
.text:000031D0                 push    ebp
.text:000031D1                 mov     ebp, esp
.text:000031D3                 push    ecx
.text:000031D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000031DB                 mov     [ebp+var_4], ecx
.text:000031DE                 mov     eax, [ebp+var_4]
.text:000031E1                 mov     dword ptr [eax], 0
.text:000031E7                 mov     ecx, [ebp+var_4]
.text:000031EA                 mov     dword ptr [ecx+4], 0
.text:000031F1                 mov     edx, [ebp+var_4]
.text:000031F4                 mov     dword ptr [edx+14h], 0
.text:000031FB                 mov     eax, [ebp+var_4]
.text:000031FE                 mov     dword ptr [eax+20h], 0
.text:00003205                 mov     eax, [ebp+var_4]
.text:00003208                 mov     esp, ebp
.text:0000320A                 pop     ebp
.text:0000320B                 retn
.text:0000320B ??0COutBuffer@@QAE@XZ endp
.text:0000320B
.text:0000320B _text           ends
.text:0000320B
.text:0000320C ; ===========================================================================
.text:0000320C
.text:0000320C ; Segment type: Pure code
.text:0000320C ; Segment permissions: Read/Execute
.text:0000320C _text           segment para public 'CODE' use32
.text:0000320C                 assume cs:_text
.text:0000320C                 ;org 320Ch
.text:0000320C ; COMDAT (pick any)
.text:0000320C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000320C
.text:0000320C ; =============== S U B R O U T I N E =======================================
.text:0000320C
.text:0000320C ; Attributes: bp-based frame
.text:0000320C
.text:0000320C ; _DWORD __thiscall CBitlEncoder::~CBitlEncoder(CBitlEncoder *__hidden this)
.text:0000320C                 public ??1CBitlEncoder@@QAE@XZ
.text:0000320C ??1CBitlEncoder@@QAE@XZ proc near       ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::~CCoder(void)+5Ap
.text:0000320C                                         ; __unwindfunclet$??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z$0+9j ...
.text:0000320C
.text:0000320C var_4           = dword ptr -4
.text:0000320C
.text:0000320C                 push    ebp
.text:0000320D                 mov     ebp, esp
.text:0000320F                 push    ecx
.text:00003210                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003217                 mov     [ebp+var_4], ecx
.text:0000321A                 mov     ecx, [ebp+var_4] ; this
.text:0000321D                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:00003222                 add     esp, 4
.text:00003225                 cmp     ebp, esp
.text:00003227                 call    __RTC_CheckEsp
.text:0000322C                 mov     esp, ebp
.text:0000322E                 pop     ebp
.text:0000322F                 retn
.text:0000322F ??1CBitlEncoder@@QAE@XZ endp
.text:0000322F
.text:0000322F _text           ends
.text:0000322F
.text:00003230 ; ===========================================================================
.text:00003230
.text:00003230 ; Segment type: Pure code
.text:00003230 ; Segment permissions: Read/Execute
.text:00003230 _text           segment para public 'CODE' use32
.text:00003230                 assume cs:_text
.text:00003230                 ;org 3230h
.text:00003230 ; COMDAT (pick any)
.text:00003230                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003230
.text:00003230 ; =============== S U B R O U T I N E =======================================
.text:00003230
.text:00003230 ; Attributes: bp-based frame
.text:00003230
.text:00003230 ; _DWORD __thiscall COutBuffer::~COutBuffer(COutBuffer *__hidden this)
.text:00003230                 public ??1COutBuffer@@QAE@XZ
.text:00003230 ??1COutBuffer@@QAE@XZ proc near         ; CODE XREF: CBitlEncoder::~CBitlEncoder(void)+11p
.text:00003230
.text:00003230 var_4           = dword ptr -4
.text:00003230
.text:00003230                 push    ebp
.text:00003231                 mov     ebp, esp
.text:00003233                 push    ecx
.text:00003234                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000323B                 mov     [ebp+var_4], ecx
.text:0000323E                 mov     ecx, [ebp+var_4] ; this
.text:00003241                 call    ?Free@COutBuffer@@QAEXXZ ; COutBuffer::Free(void)
.text:00003246                 add     esp, 4
.text:00003249                 cmp     ebp, esp
.text:0000324B                 call    __RTC_CheckEsp
.text:00003250                 mov     esp, ebp
.text:00003252                 pop     ebp
.text:00003253                 retn
.text:00003253 ??1COutBuffer@@QAE@XZ endp
.text:00003253
.text:00003253 _text           ends
.text:00003253
.text:00003254 ; ===========================================================================
.text:00003254
.text:00003254 ; Segment type: Pure code
.text:00003254 ; Segment permissions: Read/Execute
.text:00003254 _text           segment para public 'CODE' use32
.text:00003254                 assume cs:_text
.text:00003254                 ;org 3254h
.text:00003254 ; COMDAT (pick any)
.text:00003254                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003254
.text:00003254 ; =============== S U B R O U T I N E =======================================
.text:00003254
.text:00003254 ; Attributes: bp-based frame
.text:00003254
.text:00003254 ; bool __thiscall CBitlEncoder::Create(CBitlEncoder *this, unsigned int)
.text:00003254                 public ?Create@CBitlEncoder@@QAE_NI@Z
.text:00003254 ?Create@CBitlEncoder@@QAE_NI@Z proc near
.text:00003254                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::Create(void)+198p
.text:00003254
.text:00003254 var_4           = dword ptr -4
.text:00003254 arg_0           = dword ptr  8
.text:00003254
.text:00003254                 push    ebp
.text:00003255                 mov     ebp, esp
.text:00003257                 push    ecx
.text:00003258                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000325F                 mov     [ebp+var_4], ecx
.text:00003262                 mov     eax, [ebp+arg_0]
.text:00003265                 push    eax             ; unsigned int
.text:00003266                 mov     ecx, [ebp+var_4] ; this
.text:00003269                 call    ?Create@COutBuffer@@QAE_NI@Z ; COutBuffer::Create(uint)
.text:0000326E                 add     esp, 4
.text:00003271                 cmp     ebp, esp
.text:00003273                 call    __RTC_CheckEsp
.text:00003278                 mov     esp, ebp
.text:0000327A                 pop     ebp
.text:0000327B                 retn    4
.text:0000327B ?Create@CBitlEncoder@@QAE_NI@Z endp
.text:0000327B
.text:0000327B ; ---------------------------------------------------------------------------
.text:0000327E                 align 10h
.text:0000327E _text           ends
.text:0000327E
.text:00003280 ; ===========================================================================
.text:00003280
.text:00003280 ; Segment type: Pure code
.text:00003280 ; Segment permissions: Read/Execute
.text:00003280 _text           segment para public 'CODE' use32
.text:00003280                 assume cs:_text
.text:00003280                 ;org 3280h
.text:00003280 ; COMDAT (pick any)
.text:00003280                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003280
.text:00003280 ; =============== S U B R O U T I N E =======================================
.text:00003280
.text:00003280 ; Attributes: bp-based frame
.text:00003280
.text:00003280 ; unsigned int __stdcall NCompress::NDeflate::NEncoder::GetPosSlot(NCompress::NDeflate::NEncoder *this, unsigned int)
.text:00003280                 public ?GetPosSlot@NEncoder@NDeflate@NCompress@@YGII@Z
.text:00003280 ?GetPosSlot@NEncoder@NDeflate@NCompress@@YGII@Z proc near
.text:00003280                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+1D0p
.text:00003280                                         ; NCompress::NDeflate::NEncoder::CCoder::GetOptimal(uint &)+3C1p ...
.text:00003280
.text:00003280 this            = dword ptr  8
.text:00003280
.text:00003280                 push    ebp
.text:00003281                 mov     ebp, esp
.text:00003283                 cmp     [ebp+this], 200h
.text:0000328A                 jnb     short loc_3298
.text:0000328C                 mov     eax, [ebp+this]
.text:0000328F                 movzx   eax, ds:_g_FastPos[eax]
.text:00003296                 jmp     short loc_32A8
.text:00003298 ; ---------------------------------------------------------------------------
.text:00003298
.text:00003298 loc_3298:                               ; CODE XREF: NCompress::NDeflate::NEncoder::GetPosSlot(uint)+Aj
.text:00003298                 mov     ecx, [ebp+this]
.text:0000329B                 shr     ecx, 8
.text:0000329E                 movzx   eax, ds:_g_FastPos[ecx]
.text:000032A5                 add     eax, 10h
.text:000032A8
.text:000032A8 loc_32A8:                               ; CODE XREF: NCompress::NDeflate::NEncoder::GetPosSlot(uint)+16j
.text:000032A8                 pop     ebp
.text:000032A9                 retn    4
.text:000032A9 ?GetPosSlot@NEncoder@NDeflate@NCompress@@YGII@Z endp
.text:000032A9
.text:000032A9 _text           ends
.text:000032A9
.bss:000032AC ; ===========================================================================
.bss:000032AC
.bss:000032AC ; Segment type: Uninitialized
.bss:000032AC ; Segment permissions: Read/Write
.bss:000032AC ; Segment alignment 'qword' can not be represented in assembly
.bss:000032AC _bss            segment para public 'BSS' use32
.bss:000032AC                 assume cs:_bss
.bss:000032AC                 ;org 32ACh
.bss:000032AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000032AC _g_FastPos      db ?                    ; DATA XREF: NCompress::NDeflate::NEncoder::GetPosSlot(uint)+Fr
.bss:000032AC                                         ; NCompress::NDeflate::NEncoder::GetPosSlot(uint)+1Er ...
.bss:000032AD                 db    ? ;
.bss:000032AE                 db    ? ;
.bss:000032AF                 db    ? ;
.bss:000032B0                 db    ? ;
.bss:000032B1                 db    ? ;
.bss:000032B2                 db    ? ;
.bss:000032B3                 db    ? ;
.bss:000032B4                 db    ? ;
.bss:000032B5                 db    ? ;
.bss:000032B6                 db    ? ;
.bss:000032B7                 db    ? ;
.bss:000032B8                 db    ? ;
.bss:000032B9                 db    ? ;
.bss:000032BA                 db    ? ;
.bss:000032BB                 db    ? ;
.bss:000032BC                 db    ? ;
.bss:000032BD                 db    ? ;
.bss:000032BE                 db    ? ;
.bss:000032BF                 db    ? ;
.bss:000032C0                 db    ? ;
.bss:000032C1                 db    ? ;
.bss:000032C2                 db    ? ;
.bss:000032C3                 db    ? ;
.bss:000032C4                 db    ? ;
.bss:000032C5                 db    ? ;
.bss:000032C6                 db    ? ;
.bss:000032C7                 db    ? ;
.bss:000032C8                 db    ? ;
.bss:000032C9                 db    ? ;
.bss:000032CA                 db    ? ;
.bss:000032CB                 db    ? ;
.bss:000032CC                 db    ? ;
.bss:000032CD                 db    ? ;
.bss:000032CE                 db    ? ;
.bss:000032CF                 db    ? ;
.bss:000032D0                 db    ? ;
.bss:000032D1                 db    ? ;
.bss:000032D2                 db    ? ;
.bss:000032D3                 db    ? ;
.bss:000032D4                 db    ? ;
.bss:000032D5                 db    ? ;
.bss:000032D6                 db    ? ;
.bss:000032D7                 db    ? ;
.bss:000032D8                 db    ? ;
.bss:000032D9                 db    ? ;
.bss:000032DA                 db    ? ;
.bss:000032DB                 db    ? ;
.bss:000032DC                 db    ? ;
.bss:000032DD                 db    ? ;
.bss:000032DE                 db    ? ;
.bss:000032DF                 db    ? ;
.bss:000032E0                 db    ? ;
.bss:000032E1                 db    ? ;
.bss:000032E2                 db    ? ;
.bss:000032E3                 db    ? ;
.bss:000032E4                 db    ? ;
.bss:000032E5                 db    ? ;
.bss:000032E6                 db    ? ;
.bss:000032E7                 db    ? ;
.bss:000032E8                 db    ? ;
.bss:000032E9                 db    ? ;
.bss:000032EA                 db    ? ;
.bss:000032EB                 db    ? ;
.bss:000032EC                 db    ? ;
.bss:000032ED                 db    ? ;
.bss:000032EE                 db    ? ;
.bss:000032EF                 db    ? ;
.bss:000032F0                 db    ? ;
.bss:000032F1                 db    ? ;
.bss:000032F2                 db    ? ;
.bss:000032F3                 db    ? ;
.bss:000032F4                 db    ? ;
.bss:000032F5                 db    ? ;
.bss:000032F6                 db    ? ;
.bss:000032F7                 db    ? ;
.bss:000032F8                 db    ? ;
.bss:000032F9                 db    ? ;
.bss:000032FA                 db    ? ;
.bss:000032FB                 db    ? ;
.bss:000032FC                 db    ? ;
.bss:000032FD                 db    ? ;
.bss:000032FE                 db    ? ;
.bss:000032FF                 db    ? ;
.bss:00003300                 db    ? ;
.bss:00003301                 db    ? ;
.bss:00003302                 db    ? ;
.bss:00003303                 db    ? ;
.bss:00003304                 db    ? ;
.bss:00003305                 db    ? ;
.bss:00003306                 db    ? ;
.bss:00003307                 db    ? ;
.bss:00003308                 db    ? ;
.bss:00003309                 db    ? ;
.bss:0000330A                 db    ? ;
.bss:0000330B                 db    ? ;
.bss:0000330C                 db    ? ;
.bss:0000330D                 db    ? ;
.bss:0000330E                 db    ? ;
.bss:0000330F                 db    ? ;
.bss:00003310                 db    ? ;
.bss:00003311                 db    ? ;
.bss:00003312                 db    ? ;
.bss:00003313                 db    ? ;
.bss:00003314                 db    ? ;
.bss:00003315                 db    ? ;
.bss:00003316                 db    ? ;
.bss:00003317                 db    ? ;
.bss:00003318                 db    ? ;
.bss:00003319                 db    ? ;
.bss:0000331A                 db    ? ;
.bss:0000331B                 db    ? ;
.bss:0000331C                 db    ? ;
.bss:0000331D                 db    ? ;
.bss:0000331E                 db    ? ;
.bss:0000331F                 db    ? ;
.bss:00003320                 db    ? ;
.bss:00003321                 db    ? ;
.bss:00003322                 db    ? ;
.bss:00003323                 db    ? ;
.bss:00003324                 db    ? ;
.bss:00003325                 db    ? ;
.bss:00003326                 db    ? ;
.bss:00003327                 db    ? ;
.bss:00003328                 db    ? ;
.bss:00003329                 db    ? ;
.bss:0000332A                 db    ? ;
.bss:0000332B                 db    ? ;
.bss:0000332C                 db    ? ;
.bss:0000332D                 db    ? ;
.bss:0000332E                 db    ? ;
.bss:0000332F                 db    ? ;
.bss:00003330                 db    ? ;
.bss:00003331                 db    ? ;
.bss:00003332                 db    ? ;
.bss:00003333                 db    ? ;
.bss:00003334                 db    ? ;
.bss:00003335                 db    ? ;
.bss:00003336                 db    ? ;
.bss:00003337                 db    ? ;
.bss:00003338                 db    ? ;
.bss:00003339                 db    ? ;
.bss:0000333A                 db    ? ;
.bss:0000333B                 db    ? ;
.bss:0000333C                 db    ? ;
.bss:0000333D                 db    ? ;
.bss:0000333E                 db    ? ;
.bss:0000333F                 db    ? ;
.bss:00003340                 db    ? ;
.bss:00003341                 db    ? ;
.bss:00003342                 db    ? ;
.bss:00003343                 db    ? ;
.bss:00003344                 db    ? ;
.bss:00003345                 db    ? ;
.bss:00003346                 db    ? ;
.bss:00003347                 db    ? ;
.bss:00003348                 db    ? ;
.bss:00003349                 db    ? ;
.bss:0000334A                 db    ? ;
.bss:0000334B                 db    ? ;
.bss:0000334C                 db    ? ;
.bss:0000334D                 db    ? ;
.bss:0000334E                 db    ? ;
.bss:0000334F                 db    ? ;
.bss:00003350                 db    ? ;
.bss:00003351                 db    ? ;
.bss:00003352                 db    ? ;
.bss:00003353                 db    ? ;
.bss:00003354                 db    ? ;
.bss:00003355                 db    ? ;
.bss:00003356                 db    ? ;
.bss:00003357                 db    ? ;
.bss:00003358                 db    ? ;
.bss:00003359                 db    ? ;
.bss:0000335A                 db    ? ;
.bss:0000335B                 db    ? ;
.bss:0000335C                 db    ? ;
.bss:0000335D                 db    ? ;
.bss:0000335E                 db    ? ;
.bss:0000335F                 db    ? ;
.bss:00003360                 db    ? ;
.bss:00003361                 db    ? ;
.bss:00003362                 db    ? ;
.bss:00003363                 db    ? ;
.bss:00003364                 db    ? ;
.bss:00003365                 db    ? ;
.bss:00003366                 db    ? ;
.bss:00003367                 db    ? ;
.bss:00003368                 db    ? ;
.bss:00003369                 db    ? ;
.bss:0000336A                 db    ? ;
.bss:0000336B                 db    ? ;
.bss:0000336C                 db    ? ;
.bss:0000336D                 db    ? ;
.bss:0000336E                 db    ? ;
.bss:0000336F                 db    ? ;
.bss:00003370                 db    ? ;
.bss:00003371                 db    ? ;
.bss:00003372                 db    ? ;
.bss:00003373                 db    ? ;
.bss:00003374                 db    ? ;
.bss:00003375                 db    ? ;
.bss:00003376                 db    ? ;
.bss:00003377                 db    ? ;
.bss:00003378                 db    ? ;
.bss:00003379                 db    ? ;
.bss:0000337A                 db    ? ;
.bss:0000337B                 db    ? ;
.bss:0000337C                 db    ? ;
.bss:0000337D                 db    ? ;
.bss:0000337E                 db    ? ;
.bss:0000337F                 db    ? ;
.bss:00003380                 db    ? ;
.bss:00003381                 db    ? ;
.bss:00003382                 db    ? ;
.bss:00003383                 db    ? ;
.bss:00003384                 db    ? ;
.bss:00003385                 db    ? ;
.bss:00003386                 db    ? ;
.bss:00003387                 db    ? ;
.bss:00003388                 db    ? ;
.bss:00003389                 db    ? ;
.bss:0000338A                 db    ? ;
.bss:0000338B                 db    ? ;
.bss:0000338C                 db    ? ;
.bss:0000338D                 db    ? ;
.bss:0000338E                 db    ? ;
.bss:0000338F                 db    ? ;
.bss:00003390                 db    ? ;
.bss:00003391                 db    ? ;
.bss:00003392                 db    ? ;
.bss:00003393                 db    ? ;
.bss:00003394                 db    ? ;
.bss:00003395                 db    ? ;
.bss:00003396                 db    ? ;
.bss:00003397                 db    ? ;
.bss:00003398                 db    ? ;
.bss:00003399                 db    ? ;
.bss:0000339A                 db    ? ;
.bss:0000339B                 db    ? ;
.bss:0000339C                 db    ? ;
.bss:0000339D                 db    ? ;
.bss:0000339E                 db    ? ;
.bss:0000339F                 db    ? ;
.bss:000033A0                 db    ? ;
.bss:000033A1                 db    ? ;
.bss:000033A2                 db    ? ;
.bss:000033A3                 db    ? ;
.bss:000033A4                 db    ? ;
.bss:000033A5                 db    ? ;
.bss:000033A6                 db    ? ;
.bss:000033A7                 db    ? ;
.bss:000033A8                 db    ? ;
.bss:000033A9                 db    ? ;
.bss:000033AA                 db    ? ;
.bss:000033AB                 db    ? ;
.bss:000033AC                 db    ? ;
.bss:000033AD                 db    ? ;
.bss:000033AE                 db    ? ;
.bss:000033AF                 db    ? ;
.bss:000033B0                 db    ? ;
.bss:000033B1                 db    ? ;
.bss:000033B2                 db    ? ;
.bss:000033B3                 db    ? ;
.bss:000033B4                 db    ? ;
.bss:000033B5                 db    ? ;
.bss:000033B6                 db    ? ;
.bss:000033B7                 db    ? ;
.bss:000033B8                 db    ? ;
.bss:000033B9                 db    ? ;
.bss:000033BA                 db    ? ;
.bss:000033BB                 db    ? ;
.bss:000033BC                 db    ? ;
.bss:000033BD                 db    ? ;
.bss:000033BE                 db    ? ;
.bss:000033BF                 db    ? ;
.bss:000033C0                 db    ? ;
.bss:000033C1                 db    ? ;
.bss:000033C2                 db    ? ;
.bss:000033C3                 db    ? ;
.bss:000033C4                 db    ? ;
.bss:000033C5                 db    ? ;
.bss:000033C6                 db    ? ;
.bss:000033C7                 db    ? ;
.bss:000033C8                 db    ? ;
.bss:000033C9                 db    ? ;
.bss:000033CA                 db    ? ;
.bss:000033CB                 db    ? ;
.bss:000033CC                 db    ? ;
.bss:000033CD                 db    ? ;
.bss:000033CE                 db    ? ;
.bss:000033CF                 db    ? ;
.bss:000033D0                 db    ? ;
.bss:000033D1                 db    ? ;
.bss:000033D2                 db    ? ;
.bss:000033D3                 db    ? ;
.bss:000033D4                 db    ? ;
.bss:000033D5                 db    ? ;
.bss:000033D6                 db    ? ;
.bss:000033D7                 db    ? ;
.bss:000033D8                 db    ? ;
.bss:000033D9                 db    ? ;
.bss:000033DA                 db    ? ;
.bss:000033DB                 db    ? ;
.bss:000033DC                 db    ? ;
.bss:000033DD                 db    ? ;
.bss:000033DE                 db    ? ;
.bss:000033DF                 db    ? ;
.bss:000033E0                 db    ? ;
.bss:000033E1                 db    ? ;
.bss:000033E2                 db    ? ;
.bss:000033E3                 db    ? ;
.bss:000033E4                 db    ? ;
.bss:000033E5                 db    ? ;
.bss:000033E6                 db    ? ;
.bss:000033E7                 db    ? ;
.bss:000033E8                 db    ? ;
.bss:000033E9                 db    ? ;
.bss:000033EA                 db    ? ;
.bss:000033EB                 db    ? ;
.bss:000033EC                 db    ? ;
.bss:000033ED                 db    ? ;
.bss:000033EE                 db    ? ;
.bss:000033EF                 db    ? ;
.bss:000033F0                 db    ? ;
.bss:000033F1                 db    ? ;
.bss:000033F2                 db    ? ;
.bss:000033F3                 db    ? ;
.bss:000033F4                 db    ? ;
.bss:000033F5                 db    ? ;
.bss:000033F6                 db    ? ;
.bss:000033F7                 db    ? ;
.bss:000033F8                 db    ? ;
.bss:000033F9                 db    ? ;
.bss:000033FA                 db    ? ;
.bss:000033FB                 db    ? ;
.bss:000033FC                 db    ? ;
.bss:000033FD                 db    ? ;
.bss:000033FE                 db    ? ;
.bss:000033FF                 db    ? ;
.bss:00003400                 db    ? ;
.bss:00003401                 db    ? ;
.bss:00003402                 db    ? ;
.bss:00003403                 db    ? ;
.bss:00003404                 db    ? ;
.bss:00003405                 db    ? ;
.bss:00003406                 db    ? ;
.bss:00003407                 db    ? ;
.bss:00003408                 db    ? ;
.bss:00003409                 db    ? ;
.bss:0000340A                 db    ? ;
.bss:0000340B                 db    ? ;
.bss:0000340C                 db    ? ;
.bss:0000340D                 db    ? ;
.bss:0000340E                 db    ? ;
.bss:0000340F                 db    ? ;
.bss:00003410                 db    ? ;
.bss:00003411                 db    ? ;
.bss:00003412                 db    ? ;
.bss:00003413                 db    ? ;
.bss:00003414                 db    ? ;
.bss:00003415                 db    ? ;
.bss:00003416                 db    ? ;
.bss:00003417                 db    ? ;
.bss:00003418                 db    ? ;
.bss:00003419                 db    ? ;
.bss:0000341A                 db    ? ;
.bss:0000341B                 db    ? ;
.bss:0000341C                 db    ? ;
.bss:0000341D                 db    ? ;
.bss:0000341E                 db    ? ;
.bss:0000341F                 db    ? ;
.bss:00003420                 db    ? ;
.bss:00003421                 db    ? ;
.bss:00003422                 db    ? ;
.bss:00003423                 db    ? ;
.bss:00003424                 db    ? ;
.bss:00003425                 db    ? ;
.bss:00003426                 db    ? ;
.bss:00003427                 db    ? ;
.bss:00003428                 db    ? ;
.bss:00003429                 db    ? ;
.bss:0000342A                 db    ? ;
.bss:0000342B                 db    ? ;
.bss:0000342C                 db    ? ;
.bss:0000342D                 db    ? ;
.bss:0000342E                 db    ? ;
.bss:0000342F                 db    ? ;
.bss:00003430                 db    ? ;
.bss:00003431                 db    ? ;
.bss:00003432                 db    ? ;
.bss:00003433                 db    ? ;
.bss:00003434                 db    ? ;
.bss:00003435                 db    ? ;
.bss:00003436                 db    ? ;
.bss:00003437                 db    ? ;
.bss:00003438                 db    ? ;
.bss:00003439                 db    ? ;
.bss:0000343A                 db    ? ;
.bss:0000343B                 db    ? ;
.bss:0000343C                 db    ? ;
.bss:0000343D                 db    ? ;
.bss:0000343E                 db    ? ;
.bss:0000343F                 db    ? ;
.bss:00003440                 db    ? ;
.bss:00003441                 db    ? ;
.bss:00003442                 db    ? ;
.bss:00003443                 db    ? ;
.bss:00003444                 db    ? ;
.bss:00003445                 db    ? ;
.bss:00003446                 db    ? ;
.bss:00003447                 db    ? ;
.bss:00003448                 db    ? ;
.bss:00003449                 db    ? ;
.bss:0000344A                 db    ? ;
.bss:0000344B                 db    ? ;
.bss:0000344C                 db    ? ;
.bss:0000344D                 db    ? ;
.bss:0000344E                 db    ? ;
.bss:0000344F                 db    ? ;
.bss:00003450                 db    ? ;
.bss:00003451                 db    ? ;
.bss:00003452                 db    ? ;
.bss:00003453                 db    ? ;
.bss:00003454                 db    ? ;
.bss:00003455                 db    ? ;
.bss:00003456                 db    ? ;
.bss:00003457                 db    ? ;
.bss:00003458                 db    ? ;
.bss:00003459                 db    ? ;
.bss:0000345A                 db    ? ;
.bss:0000345B                 db    ? ;
.bss:0000345C                 db    ? ;
.bss:0000345D                 db    ? ;
.bss:0000345E                 db    ? ;
.bss:0000345F                 db    ? ;
.bss:00003460                 db    ? ;
.bss:00003461                 db    ? ;
.bss:00003462                 db    ? ;
.bss:00003463                 db    ? ;
.bss:00003464                 db    ? ;
.bss:00003465                 db    ? ;
.bss:00003466                 db    ? ;
.bss:00003467                 db    ? ;
.bss:00003468                 db    ? ;
.bss:00003469                 db    ? ;
.bss:0000346A                 db    ? ;
.bss:0000346B                 db    ? ;
.bss:0000346C                 db    ? ;
.bss:0000346D                 db    ? ;
.bss:0000346E                 db    ? ;
.bss:0000346F                 db    ? ;
.bss:00003470                 db    ? ;
.bss:00003471                 db    ? ;
.bss:00003472                 db    ? ;
.bss:00003473                 db    ? ;
.bss:00003474                 db    ? ;
.bss:00003475                 db    ? ;
.bss:00003476                 db    ? ;
.bss:00003477                 db    ? ;
.bss:00003478                 db    ? ;
.bss:00003479                 db    ? ;
.bss:0000347A                 db    ? ;
.bss:0000347B                 db    ? ;
.bss:0000347C                 db    ? ;
.bss:0000347D                 db    ? ;
.bss:0000347E                 db    ? ;
.bss:0000347F                 db    ? ;
.bss:00003480                 db    ? ;
.bss:00003481                 db    ? ;
.bss:00003482                 db    ? ;
.bss:00003483                 db    ? ;
.bss:00003484                 db    ? ;
.bss:00003485                 db    ? ;
.bss:00003486                 db    ? ;
.bss:00003487                 db    ? ;
.bss:00003488                 db    ? ;
.bss:00003489                 db    ? ;
.bss:0000348A                 db    ? ;
.bss:0000348B                 db    ? ;
.bss:0000348C                 db    ? ;
.bss:0000348D                 db    ? ;
.bss:0000348E                 db    ? ;
.bss:0000348F                 db    ? ;
.bss:00003490                 db    ? ;
.bss:00003491                 db    ? ;
.bss:00003492                 db    ? ;
.bss:00003493                 db    ? ;
.bss:00003494                 db    ? ;
.bss:00003495                 db    ? ;
.bss:00003496                 db    ? ;
.bss:00003497                 db    ? ;
.bss:00003498                 db    ? ;
.bss:00003499                 db    ? ;
.bss:0000349A                 db    ? ;
.bss:0000349B                 db    ? ;
.bss:0000349C                 db    ? ;
.bss:0000349D                 db    ? ;
.bss:0000349E                 db    ? ;
.bss:0000349F                 db    ? ;
.bss:000034A0                 db    ? ;
.bss:000034A1                 db    ? ;
.bss:000034A2                 db    ? ;
.bss:000034A3                 db    ? ;
.bss:000034A4                 db    ? ;
.bss:000034A5                 db    ? ;
.bss:000034A6                 db    ? ;
.bss:000034A7                 db    ? ;
.bss:000034A8                 db    ? ;
.bss:000034A9                 db    ? ;
.bss:000034AA                 db    ? ;
.bss:000034AB                 db    ? ;
.bss:000034AC _g_LenSlots     db ?                    ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::TryBlock(void)+14Fr
.bss:000034AC                                         ; NCompress::NDeflate::NEncoder::CCoder::TryBlock(void)+166r ...
.bss:000034AD                 db    ? ;
.bss:000034AE                 db    ? ;
.bss:000034AF                 db    ? ;
.bss:000034B0                 db    ? ;
.bss:000034B1                 db    ? ;
.bss:000034B2                 db    ? ;
.bss:000034B3                 db    ? ;
.bss:000034B4                 db    ? ;
.bss:000034B5                 db    ? ;
.bss:000034B6                 db    ? ;
.bss:000034B7                 db    ? ;
.bss:000034B8                 db    ? ;
.bss:000034B9                 db    ? ;
.bss:000034BA                 db    ? ;
.bss:000034BB                 db    ? ;
.bss:000034BC                 db    ? ;
.bss:000034BD                 db    ? ;
.bss:000034BE                 db    ? ;
.bss:000034BF                 db    ? ;
.bss:000034C0                 db    ? ;
.bss:000034C1                 db    ? ;
.bss:000034C2                 db    ? ;
.bss:000034C3                 db    ? ;
.bss:000034C4                 db    ? ;
.bss:000034C5                 db    ? ;
.bss:000034C6                 db    ? ;
.bss:000034C7                 db    ? ;
.bss:000034C8                 db    ? ;
.bss:000034C9                 db    ? ;
.bss:000034CA                 db    ? ;
.bss:000034CB                 db    ? ;
.bss:000034CC                 db    ? ;
.bss:000034CD                 db    ? ;
.bss:000034CE                 db    ? ;
.bss:000034CF                 db    ? ;
.bss:000034D0                 db    ? ;
.bss:000034D1                 db    ? ;
.bss:000034D2                 db    ? ;
.bss:000034D3                 db    ? ;
.bss:000034D4                 db    ? ;
.bss:000034D5                 db    ? ;
.bss:000034D6                 db    ? ;
.bss:000034D7                 db    ? ;
.bss:000034D8                 db    ? ;
.bss:000034D9                 db    ? ;
.bss:000034DA                 db    ? ;
.bss:000034DB                 db    ? ;
.bss:000034DC                 db    ? ;
.bss:000034DD                 db    ? ;
.bss:000034DE                 db    ? ;
.bss:000034DF                 db    ? ;
.bss:000034E0                 db    ? ;
.bss:000034E1                 db    ? ;
.bss:000034E2                 db    ? ;
.bss:000034E3                 db    ? ;
.bss:000034E4                 db    ? ;
.bss:000034E5                 db    ? ;
.bss:000034E6                 db    ? ;
.bss:000034E7                 db    ? ;
.bss:000034E8                 db    ? ;
.bss:000034E9                 db    ? ;
.bss:000034EA                 db    ? ;
.bss:000034EB                 db    ? ;
.bss:000034EC                 db    ? ;
.bss:000034ED                 db    ? ;
.bss:000034EE                 db    ? ;
.bss:000034EF                 db    ? ;
.bss:000034F0                 db    ? ;
.bss:000034F1                 db    ? ;
.bss:000034F2                 db    ? ;
.bss:000034F3                 db    ? ;
.bss:000034F4                 db    ? ;
.bss:000034F5                 db    ? ;
.bss:000034F6                 db    ? ;
.bss:000034F7                 db    ? ;
.bss:000034F8                 db    ? ;
.bss:000034F9                 db    ? ;
.bss:000034FA                 db    ? ;
.bss:000034FB                 db    ? ;
.bss:000034FC                 db    ? ;
.bss:000034FD                 db    ? ;
.bss:000034FE                 db    ? ;
.bss:000034FF                 db    ? ;
.bss:00003500                 db    ? ;
.bss:00003501                 db    ? ;
.bss:00003502                 db    ? ;
.bss:00003503                 db    ? ;
.bss:00003504                 db    ? ;
.bss:00003505                 db    ? ;
.bss:00003506                 db    ? ;
.bss:00003507                 db    ? ;
.bss:00003508                 db    ? ;
.bss:00003509                 db    ? ;
.bss:0000350A                 db    ? ;
.bss:0000350B                 db    ? ;
.bss:0000350C                 db    ? ;
.bss:0000350D                 db    ? ;
.bss:0000350E                 db    ? ;
.bss:0000350F                 db    ? ;
.bss:00003510                 db    ? ;
.bss:00003511                 db    ? ;
.bss:00003512                 db    ? ;
.bss:00003513                 db    ? ;
.bss:00003514                 db    ? ;
.bss:00003515                 db    ? ;
.bss:00003516                 db    ? ;
.bss:00003517                 db    ? ;
.bss:00003518                 db    ? ;
.bss:00003519                 db    ? ;
.bss:0000351A                 db    ? ;
.bss:0000351B                 db    ? ;
.bss:0000351C                 db    ? ;
.bss:0000351D                 db    ? ;
.bss:0000351E                 db    ? ;
.bss:0000351F                 db    ? ;
.bss:00003520                 db    ? ;
.bss:00003521                 db    ? ;
.bss:00003522                 db    ? ;
.bss:00003523                 db    ? ;
.bss:00003524                 db    ? ;
.bss:00003525                 db    ? ;
.bss:00003526                 db    ? ;
.bss:00003527                 db    ? ;
.bss:00003528                 db    ? ;
.bss:00003529                 db    ? ;
.bss:0000352A                 db    ? ;
.bss:0000352B                 db    ? ;
.bss:0000352C                 db    ? ;
.bss:0000352D                 db    ? ;
.bss:0000352E                 db    ? ;
.bss:0000352F                 db    ? ;
.bss:00003530                 db    ? ;
.bss:00003531                 db    ? ;
.bss:00003532                 db    ? ;
.bss:00003533                 db    ? ;
.bss:00003534                 db    ? ;
.bss:00003535                 db    ? ;
.bss:00003536                 db    ? ;
.bss:00003537                 db    ? ;
.bss:00003538                 db    ? ;
.bss:00003539                 db    ? ;
.bss:0000353A                 db    ? ;
.bss:0000353B                 db    ? ;
.bss:0000353C                 db    ? ;
.bss:0000353D                 db    ? ;
.bss:0000353E                 db    ? ;
.bss:0000353F                 db    ? ;
.bss:00003540                 db    ? ;
.bss:00003541                 db    ? ;
.bss:00003542                 db    ? ;
.bss:00003543                 db    ? ;
.bss:00003544                 db    ? ;
.bss:00003545                 db    ? ;
.bss:00003546                 db    ? ;
.bss:00003547                 db    ? ;
.bss:00003548                 db    ? ;
.bss:00003549                 db    ? ;
.bss:0000354A                 db    ? ;
.bss:0000354B                 db    ? ;
.bss:0000354C                 db    ? ;
.bss:0000354D                 db    ? ;
.bss:0000354E                 db    ? ;
.bss:0000354F                 db    ? ;
.bss:00003550                 db    ? ;
.bss:00003551                 db    ? ;
.bss:00003552                 db    ? ;
.bss:00003553                 db    ? ;
.bss:00003554                 db    ? ;
.bss:00003555                 db    ? ;
.bss:00003556                 db    ? ;
.bss:00003557                 db    ? ;
.bss:00003558                 db    ? ;
.bss:00003559                 db    ? ;
.bss:0000355A                 db    ? ;
.bss:0000355B                 db    ? ;
.bss:0000355C                 db    ? ;
.bss:0000355D                 db    ? ;
.bss:0000355E                 db    ? ;
.bss:0000355F                 db    ? ;
.bss:00003560                 db    ? ;
.bss:00003561                 db    ? ;
.bss:00003562                 db    ? ;
.bss:00003563                 db    ? ;
.bss:00003564                 db    ? ;
.bss:00003565                 db    ? ;
.bss:00003566                 db    ? ;
.bss:00003567                 db    ? ;
.bss:00003568                 db    ? ;
.bss:00003569                 db    ? ;
.bss:0000356A                 db    ? ;
.bss:0000356B                 db    ? ;
.bss:0000356C                 db    ? ;
.bss:0000356D                 db    ? ;
.bss:0000356E                 db    ? ;
.bss:0000356F                 db    ? ;
.bss:00003570                 db    ? ;
.bss:00003571                 db    ? ;
.bss:00003572                 db    ? ;
.bss:00003573                 db    ? ;
.bss:00003574                 db    ? ;
.bss:00003575                 db    ? ;
.bss:00003576                 db    ? ;
.bss:00003577                 db    ? ;
.bss:00003578                 db    ? ;
.bss:00003579                 db    ? ;
.bss:0000357A                 db    ? ;
.bss:0000357B                 db    ? ;
.bss:0000357C                 db    ? ;
.bss:0000357D                 db    ? ;
.bss:0000357E                 db    ? ;
.bss:0000357F                 db    ? ;
.bss:00003580                 db    ? ;
.bss:00003581                 db    ? ;
.bss:00003582                 db    ? ;
.bss:00003583                 db    ? ;
.bss:00003584                 db    ? ;
.bss:00003585                 db    ? ;
.bss:00003586                 db    ? ;
.bss:00003587                 db    ? ;
.bss:00003588                 db    ? ;
.bss:00003589                 db    ? ;
.bss:0000358A                 db    ? ;
.bss:0000358B                 db    ? ;
.bss:0000358C                 db    ? ;
.bss:0000358D                 db    ? ;
.bss:0000358E                 db    ? ;
.bss:0000358F                 db    ? ;
.bss:00003590                 db    ? ;
.bss:00003591                 db    ? ;
.bss:00003592                 db    ? ;
.bss:00003593                 db    ? ;
.bss:00003594                 db    ? ;
.bss:00003595                 db    ? ;
.bss:00003596                 db    ? ;
.bss:00003597                 db    ? ;
.bss:00003598                 db    ? ;
.bss:00003599                 db    ? ;
.bss:0000359A                 db    ? ;
.bss:0000359B                 db    ? ;
.bss:0000359C                 db    ? ;
.bss:0000359D                 db    ? ;
.bss:0000359E                 db    ? ;
.bss:0000359F                 db    ? ;
.bss:000035A0                 db    ? ;
.bss:000035A1                 db    ? ;
.bss:000035A2                 db    ? ;
.bss:000035A3                 db    ? ;
.bss:000035A4                 db    ? ;
.bss:000035A5                 db    ? ;
.bss:000035A6                 db    ? ;
.bss:000035A7                 db    ? ;
.bss:000035A8                 db    ? ;
.bss:000035A9                 db    ? ;
.bss:000035AA                 db    ? ;
.bss:000035AB                 db    ? ;
.bss:000035AC ; NCompress::NDeflate::NEncoder::CFastPosInit g_FastPosInit
.bss:000035AC _g_FastPosInit  db    ? ;               ; DATA XREF: NCompress::NDeflate::NEncoder::`dynamic initializer for 'g_FastPosInit''(void)+3o
.bss:000035AD                 align 10h
.bss:000035AD _bss            ends
.bss:000035AD
.text:000035B0 ; ===========================================================================
.text:000035B0
.text:000035B0 ; Segment type: Pure code
.text:000035B0 ; Segment permissions: Read/Execute
.text:000035B0 _text           segment para public 'CODE' use32
.text:000035B0                 assume cs:_text
.text:000035B0                 ;org 35B0h
.text:000035B0 ; COMDAT (pick any)
.text:000035B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000035B0
.text:000035B0 ; =============== S U B R O U T I N E =======================================
.text:000035B0
.text:000035B0 ; Attributes: bp-based frame
.text:000035B0
.text:000035B0 ; void __thiscall CBitlEncoder::WriteBits(CBitlEncoder *this, unsigned int, unsigned int)
.text:000035B0                 public ?WriteBits@CBitlEncoder@@QAEXII@Z
.text:000035B0 ?WriteBits@CBitlEncoder@@QAEXII@Z proc near
.text:000035B0                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::WriteBits(uint,uint)+1Fp
.text:000035B0                                         ; NCompress::NDeflate::NEncoder::CCoder::WriteBlock(void)+CDp ...
.text:000035B0
.text:000035B0 var_4           = dword ptr -4
.text:000035B0 arg_0           = dword ptr  8
.text:000035B0 arg_4           = dword ptr  0Ch
.text:000035B0
.text:000035B0                 push    ebp
.text:000035B1                 mov     ebp, esp
.text:000035B3                 push    ecx
.text:000035B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000035BB                 mov     [ebp+var_4], ecx
.text:000035BE
.text:000035BE loc_35BE:                               ; CODE XREF: CBitlEncoder::WriteBits(uint,uint)+ADj
.text:000035BE                 cmp     [ebp+arg_4], 0
.text:000035C2                 jbe     loc_3662
.text:000035C8                 mov     eax, [ebp+var_4]
.text:000035CB                 mov     ecx, [ebp+arg_4]
.text:000035CE                 cmp     ecx, [eax+28h]
.text:000035D1                 jnb     short loc_3610
.text:000035D3                 mov     edx, 1
.text:000035D8                 mov     ecx, [ebp+arg_4]
.text:000035DB                 shl     edx, cl
.text:000035DD                 sub     edx, 1
.text:000035E0                 and     edx, [ebp+arg_0]
.text:000035E3                 mov     eax, [ebp+var_4]
.text:000035E6                 mov     ecx, 8
.text:000035EB                 sub     ecx, [eax+28h]
.text:000035EE                 shl     edx, cl
.text:000035F0                 mov     ecx, [ebp+var_4]
.text:000035F3                 movzx   eax, byte ptr [ecx+2Ch]
.text:000035F7                 or      eax, edx
.text:000035F9                 mov     ecx, [ebp+var_4]
.text:000035FC                 mov     [ecx+2Ch], al
.text:000035FF                 mov     edx, [ebp+var_4]
.text:00003602                 mov     eax, [edx+28h]
.text:00003605                 sub     eax, [ebp+arg_4]
.text:00003608                 mov     ecx, [ebp+var_4]
.text:0000360B                 mov     [ecx+28h], eax
.text:0000360E                 jmp     short loc_3662
.text:00003610 ; ---------------------------------------------------------------------------
.text:00003610
.text:00003610 loc_3610:                               ; CODE XREF: CBitlEncoder::WriteBits(uint,uint)+21j
.text:00003610                 mov     edx, [ebp+var_4]
.text:00003613                 mov     eax, [ebp+arg_4]
.text:00003616                 sub     eax, [edx+28h]
.text:00003619                 mov     [ebp+arg_4], eax
.text:0000361C                 mov     ecx, [ebp+var_4]
.text:0000361F                 movzx   edx, byte ptr [ecx+2Ch]
.text:00003623                 mov     eax, [ebp+var_4]
.text:00003626                 mov     ecx, 8
.text:0000362B                 sub     ecx, [eax+28h]
.text:0000362E                 mov     eax, [ebp+arg_0]
.text:00003631                 shl     eax, cl
.text:00003633                 or      edx, eax
.text:00003635                 push    edx             ; unsigned __int8
.text:00003636                 mov     ecx, [ebp+var_4] ; this
.text:00003639                 call    ?WriteByte@COutBuffer@@QAEXE@Z ; COutBuffer::WriteByte(uchar)
.text:0000363E                 mov     ecx, [ebp+var_4]
.text:00003641                 mov     edx, [ebp+arg_0]
.text:00003644                 mov     ecx, [ecx+28h]
.text:00003647                 shr     edx, cl
.text:00003649                 mov     [ebp+arg_0], edx
.text:0000364C                 mov     eax, [ebp+var_4]
.text:0000364F                 mov     dword ptr [eax+28h], 8
.text:00003656                 mov     ecx, [ebp+var_4]
.text:00003659                 mov     byte ptr [ecx+2Ch], 0
.text:0000365D                 jmp     loc_35BE
.text:00003662 ; ---------------------------------------------------------------------------
.text:00003662
.text:00003662 loc_3662:                               ; CODE XREF: CBitlEncoder::WriteBits(uint,uint)+12j
.text:00003662                                         ; CBitlEncoder::WriteBits(uint,uint)+5Ej
.text:00003662                 add     esp, 4
.text:00003665                 cmp     ebp, esp
.text:00003667                 call    __RTC_CheckEsp
.text:0000366C                 mov     esp, ebp
.text:0000366E                 pop     ebp
.text:0000366F                 retn    8
.text:0000366F ?WriteBits@CBitlEncoder@@QAEXII@Z endp
.text:0000366F
.text:0000366F ; ---------------------------------------------------------------------------
.text:00003672                 align 4
.text:00003672 _text           ends
.text:00003672
.text:00003674 ; ===========================================================================
.text:00003674
.text:00003674 ; Segment type: Pure code
.text:00003674 ; Segment permissions: Read/Execute
.text:00003674 _text           segment para public 'CODE' use32
.text:00003674                 assume cs:_text
.text:00003674                 ;org 3674h
.text:00003674 ; COMDAT (pick any)
.text:00003674                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003674
.text:00003674 ; =============== S U B R O U T I N E =======================================
.text:00003674
.text:00003674 ; Attributes: bp-based frame
.text:00003674
.text:00003674 ; void __thiscall COutBuffer::WriteByte(COutBuffer *this, unsigned __int8)
.text:00003674                 public ?WriteByte@COutBuffer@@QAEXE@Z
.text:00003674 ?WriteByte@COutBuffer@@QAEXE@Z proc near
.text:00003674                                         ; CODE XREF: CBitlEncoder::WriteBits(uint,uint)+89p
.text:00003674                                         ; CBitlEncoder::FlushByte(void)+22p ...
.text:00003674
.text:00003674 var_4           = dword ptr -4
.text:00003674 arg_0           = byte ptr  8
.text:00003674
.text:00003674                 push    ebp
.text:00003675                 mov     ebp, esp
.text:00003677                 push    ecx
.text:00003678                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000367F                 mov     [ebp+var_4], ecx
.text:00003682                 mov     eax, [ebp+var_4]
.text:00003685                 mov     ecx, [eax]
.text:00003687                 mov     edx, [ebp+var_4]
.text:0000368A                 mov     eax, [edx+4]
.text:0000368D                 mov     dl, [ebp+arg_0]
.text:00003690                 mov     [ecx+eax], dl
.text:00003693                 mov     eax, [ebp+var_4]
.text:00003696                 mov     ecx, [eax+4]
.text:00003699                 add     ecx, 1
.text:0000369C                 mov     edx, [ebp+var_4]
.text:0000369F                 mov     [edx+4], ecx
.text:000036A2                 mov     eax, [ebp+var_4]
.text:000036A5                 mov     ecx, [ebp+var_4]
.text:000036A8                 mov     edx, [eax+4]
.text:000036AB                 cmp     edx, [ecx+8]
.text:000036AE                 jnz     short loc_36B8
.text:000036B0                 mov     ecx, [ebp+var_4] ; this
.text:000036B3                 call    ?FlushWithCheck@COutBuffer@@QAEXXZ ; COutBuffer::FlushWithCheck(void)
.text:000036B8
.text:000036B8 loc_36B8:                               ; CODE XREF: COutBuffer::WriteByte(uchar)+3Aj
.text:000036B8                 add     esp, 4
.text:000036BB                 cmp     ebp, esp
.text:000036BD                 call    __RTC_CheckEsp
.text:000036C2                 mov     esp, ebp
.text:000036C4                 pop     ebp
.text:000036C5                 retn    4
.text:000036C5 ?WriteByte@COutBuffer@@QAEXE@Z endp
.text:000036C5
.text:000036C5 _text           ends
.text:000036C5
.text:000036C8 ; ===========================================================================
.text:000036C8
.text:000036C8 ; Segment type: Pure code
.text:000036C8 ; Segment permissions: Read/Execute
.text:000036C8 _text           segment para public 'CODE' use32
.text:000036C8                 assume cs:_text
.text:000036C8                 ;org 36C8h
.text:000036C8 ; COMDAT (pick any)
.text:000036C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000036C8
.text:000036C8 ; =============== S U B R O U T I N E =======================================
.text:000036C8
.text:000036C8 ; Attributes: bp-based frame
.text:000036C8
.text:000036C8 ; void __thiscall NCompress::NDeflate::NEncoder::CCodeValue::SetAsLiteral(NCompress::NDeflate::NEncoder::CCodeValue *__hidden this)
.text:000036C8                 public ?SetAsLiteral@CCodeValue@NEncoder@NDeflate@NCompress@@QAEXXZ
.text:000036C8 ?SetAsLiteral@CCodeValue@NEncoder@NDeflate@NCompress@@QAEXXZ proc near
.text:000036C8                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryBlock(void)+1DCp
.text:000036C8
.text:000036C8 var_4           = dword ptr -4
.text:000036C8
.text:000036C8                 push    ebp
.text:000036C9                 mov     ebp, esp
.text:000036CB                 push    ecx
.text:000036CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000036D3                 mov     [ebp+var_4], ecx
.text:000036D6                 mov     eax, 8000h
.text:000036DB                 mov     ecx, [ebp+var_4]
.text:000036DE                 mov     [ecx], ax
.text:000036E1                 mov     esp, ebp
.text:000036E3                 pop     ebp
.text:000036E4                 retn
.text:000036E4 ?SetAsLiteral@CCodeValue@NEncoder@NDeflate@NCompress@@QAEXXZ endp
.text:000036E4
.text:000036E4 ; ---------------------------------------------------------------------------
.text:000036E5                 align 4
.text:000036E5 _text           ends
.text:000036E5
.text:000036E8 ; ===========================================================================
.text:000036E8
.text:000036E8 ; Segment type: Pure code
.text:000036E8 ; Segment permissions: Read/Execute
.text:000036E8 _text           segment para public 'CODE' use32
.text:000036E8                 assume cs:_text
.text:000036E8                 ;org 36E8h
.text:000036E8 ; COMDAT (pick any)
.text:000036E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000036E8
.text:000036E8 ; =============== S U B R O U T I N E =======================================
.text:000036E8
.text:000036E8 ; Attributes: bp-based frame
.text:000036E8
.text:000036E8 ; bool __thiscall NCompress::NDeflate::NEncoder::CCodeValue::IsLiteral(NCompress::NDeflate::NEncoder::CCodeValue *__hidden this)
.text:000036E8                 public ?IsLiteral@CCodeValue@NEncoder@NDeflate@NCompress@@QBE_NXZ
.text:000036E8 ?IsLiteral@CCodeValue@NEncoder@NDeflate@NCompress@@QBE_NXZ proc near
.text:000036E8                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::WriteBlock(void)+93p
.text:000036E8
.text:000036E8 var_4           = dword ptr -4
.text:000036E8
.text:000036E8                 push    ebp
.text:000036E9                 mov     ebp, esp
.text:000036EB                 push    ecx
.text:000036EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000036F3                 mov     [ebp+var_4], ecx
.text:000036F6                 mov     eax, [ebp+var_4]
.text:000036F9                 movzx   ecx, word ptr [eax]
.text:000036FC                 xor     eax, eax
.text:000036FE                 cmp     ecx, 8000h
.text:00003704                 setnl   al
.text:00003707                 mov     esp, ebp
.text:00003709                 pop     ebp
.text:0000370A                 retn
.text:0000370A ?IsLiteral@CCodeValue@NEncoder@NDeflate@NCompress@@QBE_NXZ endp
.text:0000370A
.text:0000370A ; ---------------------------------------------------------------------------
.text:0000370B                 align 4
.text:0000370B _text           ends
.text:0000370B
.text:0000370C ; ===========================================================================
.text:0000370C
.text:0000370C ; Segment type: Pure code
.text:0000370C ; Segment permissions: Read/Execute
.text:0000370C _text           segment para public 'CODE' use32
.text:0000370C                 assume cs:_text
.text:0000370C                 ;org 370Ch
.text:0000370C ; COMDAT (pick any)
.text:0000370C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000370C
.text:0000370C ; =============== S U B R O U T I N E =======================================
.text:0000370C
.text:0000370C ; Attributes: bp-based frame
.text:0000370C
.text:0000370C ; void __thiscall CBitlEncoder::FlushByte(CBitlEncoder *__hidden this)
.text:0000370C                 public ?FlushByte@CBitlEncoder@@QAEXXZ
.text:0000370C ?FlushByte@CBitlEncoder@@QAEXXZ proc near
.text:0000370C                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::WriteStoreBlock(uint,uint,bool)+88p
.text:0000370C                                         ; CBitlEncoder::Flush(void)+11p
.text:0000370C
.text:0000370C var_4           = dword ptr -4
.text:0000370C
.text:0000370C                 push    ebp
.text:0000370D                 mov     ebp, esp
.text:0000370F                 push    ecx
.text:00003710                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003717                 mov     [ebp+var_4], ecx
.text:0000371A                 mov     eax, [ebp+var_4]
.text:0000371D                 cmp     dword ptr [eax+28h], 8
.text:00003721                 jnb     short loc_3733
.text:00003723                 mov     ecx, [ebp+var_4]
.text:00003726                 movzx   edx, byte ptr [ecx+2Ch]
.text:0000372A                 push    edx             ; unsigned __int8
.text:0000372B                 mov     ecx, [ebp+var_4] ; this
.text:0000372E                 call    ?WriteByte@COutBuffer@@QAEXE@Z ; COutBuffer::WriteByte(uchar)
.text:00003733
.text:00003733 loc_3733:                               ; CODE XREF: CBitlEncoder::FlushByte(void)+15j
.text:00003733                 mov     eax, [ebp+var_4]
.text:00003736                 mov     dword ptr [eax+28h], 8
.text:0000373D                 mov     ecx, [ebp+var_4]
.text:00003740                 mov     byte ptr [ecx+2Ch], 0
.text:00003744                 add     esp, 4
.text:00003747                 cmp     ebp, esp
.text:00003749                 call    __RTC_CheckEsp
.text:0000374E                 mov     esp, ebp
.text:00003750                 pop     ebp
.text:00003751                 retn
.text:00003751 ?FlushByte@CBitlEncoder@@QAEXXZ endp
.text:00003751
.text:00003751 ; ---------------------------------------------------------------------------
.text:00003752                 align 4
.text:00003752 _text           ends
.text:00003752
.text:00003754 ; ===========================================================================
.text:00003754
.text:00003754 ; Segment type: Pure code
.text:00003754 ; Segment permissions: Read/Execute
.text:00003754 _text           segment para public 'CODE' use32
.text:00003754                 assume cs:_text
.text:00003754                 ;org 3754h
.text:00003754 ; COMDAT (pick any)
.text:00003754                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003754
.text:00003754 ; =============== S U B R O U T I N E =======================================
.text:00003754
.text:00003754 ; Attributes: bp-based frame
.text:00003754
.text:00003754 ; void __thiscall CBitlEncoder::WriteByte(CBitlEncoder *this, unsigned __int8)
.text:00003754                 public ?WriteByte@CBitlEncoder@@QAEXE@Z
.text:00003754 ?WriteByte@CBitlEncoder@@QAEXE@Z proc near
.text:00003754                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::WriteStoreBlock(uint,uint,bool)+E7p
.text:00003754
.text:00003754 var_4           = dword ptr -4
.text:00003754 arg_0           = byte ptr  8
.text:00003754
.text:00003754                 push    ebp
.text:00003755                 mov     ebp, esp
.text:00003757                 push    ecx
.text:00003758                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000375F                 mov     [ebp+var_4], ecx
.text:00003762                 movzx   eax, [ebp+arg_0]
.text:00003766                 push    eax             ; unsigned __int8
.text:00003767                 mov     ecx, [ebp+var_4] ; this
.text:0000376A                 call    ?WriteByte@COutBuffer@@QAEXE@Z ; COutBuffer::WriteByte(uchar)
.text:0000376F                 add     esp, 4
.text:00003772                 cmp     ebp, esp
.text:00003774                 call    __RTC_CheckEsp
.text:00003779                 mov     esp, ebp
.text:0000377B                 pop     ebp
.text:0000377C                 retn    4
.text:0000377C ?WriteByte@CBitlEncoder@@QAEXE@Z endp
.text:0000377C
.text:0000377C ; ---------------------------------------------------------------------------
.text:0000377F                 align 10h
.text:0000377F _text           ends
.text:0000377F
.text:00003780 ; ===========================================================================
.text:00003780
.text:00003780 ; Segment type: Pure code
.text:00003780 ; Segment permissions: Read/Execute
.text:00003780 _text           segment para public 'CODE' use32
.text:00003780                 assume cs:_text
.text:00003780                 ;org 3780h
.text:00003780 ; COMDAT (pick any)
.text:00003780                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003780
.text:00003780 ; =============== S U B R O U T I N E =======================================
.text:00003780
.text:00003780 ; Attributes: bp-based frame
.text:00003780
.text:00003780 ; void __thiscall NCompress::NDeflate::CLevels::SetFixedLevels(NCompress::NDeflate::CLevels *__hidden this)
.text:00003780                 public ?SetFixedLevels@CLevels@NDeflate@NCompress@@QAEXXZ
.text:00003780 ?SetFixedLevels@CLevels@NDeflate@NCompress@@QAEXXZ proc near
.text:00003780                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryFixedBlock(uint)+59p
.text:00003780
.text:00003780 var_8           = dword ptr -8
.text:00003780 var_4           = dword ptr -4
.text:00003780
.text:00003780                 push    ebp
.text:00003781                 mov     ebp, esp
.text:00003783                 sub     esp, 8
.text:00003786                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000378D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003794                 mov     [ebp+var_4], ecx
.text:00003797                 mov     [ebp+var_8], 0
.text:0000379E                 jmp     short loc_37A9
.text:000037A0 ; ---------------------------------------------------------------------------
.text:000037A0
.text:000037A0 loc_37A0:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+3Bj
.text:000037A0                 mov     eax, [ebp+var_8]
.text:000037A3                 add     eax, 1
.text:000037A6                 mov     [ebp+var_8], eax
.text:000037A9
.text:000037A9 loc_37A9:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+1Ej
.text:000037A9                 cmp     [ebp+var_8], 90h ; 'É'
.text:000037B0                 jnb     short loc_37BD
.text:000037B2                 mov     ecx, [ebp+var_4]
.text:000037B5                 add     ecx, [ebp+var_8]
.text:000037B8                 mov     byte ptr [ecx], 8
.text:000037BB                 jmp     short loc_37A0
.text:000037BD ; ---------------------------------------------------------------------------
.text:000037BD
.text:000037BD loc_37BD:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+30j
.text:000037BD                 jmp     short loc_37C8
.text:000037BF ; ---------------------------------------------------------------------------
.text:000037BF
.text:000037BF loc_37BF:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+5Aj
.text:000037BF                 mov     edx, [ebp+var_8]
.text:000037C2                 add     edx, 1
.text:000037C5                 mov     [ebp+var_8], edx
.text:000037C8
.text:000037C8 loc_37C8:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void):loc_37BDj
.text:000037C8                 cmp     [ebp+var_8], 100h
.text:000037CF                 jnb     short loc_37DC
.text:000037D1                 mov     eax, [ebp+var_4]
.text:000037D4                 add     eax, [ebp+var_8]
.text:000037D7                 mov     byte ptr [eax], 9
.text:000037DA                 jmp     short loc_37BF
.text:000037DC ; ---------------------------------------------------------------------------
.text:000037DC
.text:000037DC loc_37DC:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+4Fj
.text:000037DC                 jmp     short loc_37E7
.text:000037DE ; ---------------------------------------------------------------------------
.text:000037DE
.text:000037DE loc_37DE:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+79j
.text:000037DE                 mov     ecx, [ebp+var_8]
.text:000037E1                 add     ecx, 1
.text:000037E4                 mov     [ebp+var_8], ecx
.text:000037E7
.text:000037E7 loc_37E7:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void):loc_37DCj
.text:000037E7                 cmp     [ebp+var_8], 118h
.text:000037EE                 jnb     short loc_37FB
.text:000037F0                 mov     edx, [ebp+var_4]
.text:000037F3                 add     edx, [ebp+var_8]
.text:000037F6                 mov     byte ptr [edx], 7
.text:000037F9                 jmp     short loc_37DE
.text:000037FB ; ---------------------------------------------------------------------------
.text:000037FB
.text:000037FB loc_37FB:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+6Ej
.text:000037FB                 jmp     short loc_3806
.text:000037FD ; ---------------------------------------------------------------------------
.text:000037FD
.text:000037FD loc_37FD:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+98j
.text:000037FD                 mov     eax, [ebp+var_8]
.text:00003800                 add     eax, 1
.text:00003803                 mov     [ebp+var_8], eax
.text:00003806
.text:00003806 loc_3806:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void):loc_37FBj
.text:00003806                 cmp     [ebp+var_8], 120h
.text:0000380D                 jnb     short loc_381A
.text:0000380F                 mov     ecx, [ebp+var_4]
.text:00003812                 add     ecx, [ebp+var_8]
.text:00003815                 mov     byte ptr [ecx], 8
.text:00003818                 jmp     short loc_37FD
.text:0000381A ; ---------------------------------------------------------------------------
.text:0000381A
.text:0000381A loc_381A:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+8Dj
.text:0000381A                 mov     [ebp+var_8], 0
.text:00003821                 jmp     short loc_382C
.text:00003823 ; ---------------------------------------------------------------------------
.text:00003823
.text:00003823 loc_3823:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+BFj
.text:00003823                 mov     edx, [ebp+var_8]
.text:00003826                 add     edx, 1
.text:00003829                 mov     [ebp+var_8], edx
.text:0000382C
.text:0000382C loc_382C:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+A1j
.text:0000382C                 cmp     [ebp+var_8], 20h ; ' '
.text:00003830                 jnb     short loc_3841
.text:00003832                 mov     eax, [ebp+var_4]
.text:00003835                 add     eax, [ebp+var_8]
.text:00003838                 mov     byte ptr [eax+120h], 5
.text:0000383F                 jmp     short loc_3823
.text:00003841 ; ---------------------------------------------------------------------------
.text:00003841
.text:00003841 loc_3841:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+B0j
.text:00003841                 mov     esp, ebp
.text:00003843                 pop     ebp
.text:00003844                 retn
.text:00003844 ?SetFixedLevels@CLevels@NDeflate@NCompress@@QAEXXZ endp
.text:00003844
.text:00003844 ; ---------------------------------------------------------------------------
.text:00003845                 align 4
.text:00003845 _text           ends
.text:00003845
.text:00003848 ; ===========================================================================
.text:00003848
.text:00003848 ; Segment type: Pure code
.text:00003848 ; Segment permissions: Read/Execute
.text:00003848 _text           segment para public 'CODE' use32
.text:00003848                 assume cs:_text
.text:00003848                 ;org 3848h
.text:00003848 ; COMDAT (pick any)
.text:00003848                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003848
.text:00003848 ; =============== S U B R O U T I N E =======================================
.text:00003848
.text:00003848 ; Attributes: bp-based frame
.text:00003848
.text:00003848 ; void __thiscall CBitlEncoder::SetStream(CBitlEncoder *this, struct ISequentialOutStream *)
.text:00003848                 public ?SetStream@CBitlEncoder@@QAEXPAUISequentialOutStream@@@Z
.text:00003848 ?SetStream@CBitlEncoder@@QAEXPAUISequentialOutStream@@@Z proc near
.text:00003848                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+112p
.text:00003848
.text:00003848 var_4           = dword ptr -4
.text:00003848 arg_0           = dword ptr  8
.text:00003848
.text:00003848                 push    ebp
.text:00003849                 mov     ebp, esp
.text:0000384B                 push    ecx
.text:0000384C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003853                 mov     [ebp+var_4], ecx
.text:00003856                 mov     eax, [ebp+arg_0]
.text:00003859                 push    eax             ; struct ISequentialOutStream *
.text:0000385A                 mov     ecx, [ebp+var_4] ; this
.text:0000385D                 call    ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z ; COutBuffer::SetStream(ISequentialOutStream *)
.text:00003862                 add     esp, 4
.text:00003865                 cmp     ebp, esp
.text:00003867                 call    __RTC_CheckEsp
.text:0000386C                 mov     esp, ebp
.text:0000386E                 pop     ebp
.text:0000386F                 retn    4
.text:0000386F ?SetStream@CBitlEncoder@@QAEXPAUISequentialOutStream@@@Z endp
.text:0000386F
.text:0000386F ; ---------------------------------------------------------------------------
.text:00003872                 align 4
.text:00003872 _text           ends
.text:00003872
.text:00003874 ; ===========================================================================
.text:00003874
.text:00003874 ; Segment type: Pure code
.text:00003874 ; Segment permissions: Read/Execute
.text:00003874 _text           segment para public 'CODE' use32
.text:00003874                 assume cs:_text
.text:00003874                 ;org 3874h
.text:00003874 ; COMDAT (pick any)
.text:00003874                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003874
.text:00003874 ; =============== S U B R O U T I N E =======================================
.text:00003874
.text:00003874 ; Attributes: bp-based frame
.text:00003874
.text:00003874 ; void __thiscall COutBuffer::SetStream(COutBuffer *this, struct ISequentialOutStream *)
.text:00003874                 public ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z
.text:00003874 ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z proc near
.text:00003874                                         ; CODE XREF: CBitlEncoder::SetStream(ISequentialOutStream *)+15p
.text:00003874
.text:00003874 var_4           = dword ptr -4
.text:00003874 arg_0           = dword ptr  8
.text:00003874
.text:00003874                 push    ebp
.text:00003875                 mov     ebp, esp
.text:00003877                 push    ecx
.text:00003878                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000387F                 mov     [ebp+var_4], ecx
.text:00003882                 mov     eax, [ebp+var_4]
.text:00003885                 mov     ecx, [ebp+arg_0]
.text:00003888                 mov     [eax+14h], ecx
.text:0000388B                 mov     esp, ebp
.text:0000388D                 pop     ebp
.text:0000388E                 retn    4
.text:0000388E ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z endp
.text:0000388E
.text:0000388E ; ---------------------------------------------------------------------------
.text:00003891                 align 4
.text:00003891 _text           ends
.text:00003891
.text:00003894 ; ===========================================================================
.text:00003894
.text:00003894 ; Segment type: Pure code
.text:00003894 ; Segment permissions: Read/Execute
.text:00003894 _text           segment para public 'CODE' use32
.text:00003894                 assume cs:_text
.text:00003894                 ;org 3894h
.text:00003894 ; COMDAT (pick any)
.text:00003894                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003894
.text:00003894 ; =============== S U B R O U T I N E =======================================
.text:00003894
.text:00003894 ; Attributes: bp-based frame
.text:00003894
.text:00003894 ; unsigned __int64 __thiscall CBitlEncoder::GetProcessedSize(CBitlEncoder *__hidden this)
.text:00003894                 public ?GetProcessedSize@CBitlEncoder@@QBE_KXZ
.text:00003894 ?GetProcessedSize@CBitlEncoder@@QBE_KXZ proc near
.text:00003894                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1E7p
.text:00003894
.text:00003894 var_4           = dword ptr -4
.text:00003894
.text:00003894                 push    ebp
.text:00003895                 mov     ebp, esp
.text:00003897                 push    ecx
.text:00003898                 push    esi
.text:00003899                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000038A0                 mov     [ebp+var_4], ecx
.text:000038A3                 mov     ecx, [ebp+var_4] ; this
.text:000038A6                 call    ?GetProcessedSize@COutBuffer@@QBE_KXZ ; COutBuffer::GetProcessedSize(void)
.text:000038AB                 mov     ecx, [ebp+var_4]
.text:000038AE                 mov     esi, 8
.text:000038B3                 sub     esi, [ecx+28h]
.text:000038B6                 add     esi, 7
.text:000038B9                 shr     esi, 3
.text:000038BC                 xor     ecx, ecx
.text:000038BE                 add     eax, esi
.text:000038C0                 adc     edx, ecx
.text:000038C2                 pop     esi
.text:000038C3                 add     esp, 4
.text:000038C6                 cmp     ebp, esp
.text:000038C8                 call    __RTC_CheckEsp
.text:000038CD                 mov     esp, ebp
.text:000038CF                 pop     ebp
.text:000038D0                 retn
.text:000038D0 ?GetProcessedSize@CBitlEncoder@@QBE_KXZ endp
.text:000038D0
.text:000038D0 ; ---------------------------------------------------------------------------
.text:000038D1                 align 4
.text:000038D1 _text           ends
.text:000038D1
.text:000038D4 ; ===========================================================================
.text:000038D4
.text:000038D4 ; Segment type: Pure code
.text:000038D4 ; Segment permissions: Read/Execute
.text:000038D4 _text           segment para public 'CODE' use32
.text:000038D4                 assume cs:_text
.text:000038D4                 ;org 38D4h
.text:000038D4 ; COMDAT (pick any)
.text:000038D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000038D4
.text:000038D4 ; =============== S U B R O U T I N E =======================================
.text:000038D4
.text:000038D4 ; Attributes: bp-based frame
.text:000038D4
.text:000038D4 ; void __thiscall CBitlEncoder::Init(CBitlEncoder *__hidden this)
.text:000038D4                 public ?Init@CBitlEncoder@@QAEXXZ
.text:000038D4 ?Init@CBitlEncoder@@QAEXXZ proc near    ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+120p
.text:000038D4
.text:000038D4 var_4           = dword ptr -4
.text:000038D4
.text:000038D4                 push    ebp
.text:000038D5                 mov     ebp, esp
.text:000038D7                 push    ecx
.text:000038D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000038DF                 mov     [ebp+var_4], ecx
.text:000038E2                 mov     ecx, [ebp+var_4] ; this
.text:000038E5                 call    ?Init@COutBuffer@@QAEXXZ ; COutBuffer::Init(void)
.text:000038EA                 mov     eax, [ebp+var_4]
.text:000038ED                 mov     dword ptr [eax+28h], 8
.text:000038F4                 mov     ecx, [ebp+var_4]
.text:000038F7                 mov     byte ptr [ecx+2Ch], 0
.text:000038FB                 add     esp, 4
.text:000038FE                 cmp     ebp, esp
.text:00003900                 call    __RTC_CheckEsp
.text:00003905                 mov     esp, ebp
.text:00003907                 pop     ebp
.text:00003908                 retn
.text:00003908 ?Init@CBitlEncoder@@QAEXXZ endp
.text:00003908
.text:00003908 ; ---------------------------------------------------------------------------
.text:00003909                 align 4
.text:00003909 _text           ends
.text:00003909
.text:0000390C ; ===========================================================================
.text:0000390C
.text:0000390C ; Segment type: Pure code
.text:0000390C ; Segment permissions: Read/Execute
.text:0000390C _text           segment para public 'CODE' use32
.text:0000390C                 assume cs:_text
.text:0000390C                 ;org 390Ch
.text:0000390C ; COMDAT (pick any)
.text:0000390C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000390C
.text:0000390C ; =============== S U B R O U T I N E =======================================
.text:0000390C
.text:0000390C ; Attributes: bp-based frame
.text:0000390C
.text:0000390C ; __int32 __thiscall CBitlEncoder::Flush(CBitlEncoder *__hidden this)
.text:0000390C                 public ?Flush@CBitlEncoder@@QAEJXZ
.text:0000390C ?Flush@CBitlEncoder@@QAEJXZ proc near   ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+24Bp
.text:0000390C
.text:0000390C var_4           = dword ptr -4
.text:0000390C
.text:0000390C                 push    ebp
.text:0000390D                 mov     ebp, esp
.text:0000390F                 push    ecx
.text:00003910                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003917                 mov     [ebp+var_4], ecx
.text:0000391A                 mov     ecx, [ebp+var_4] ; this
.text:0000391D                 call    ?FlushByte@CBitlEncoder@@QAEXXZ ; CBitlEncoder::FlushByte(void)
.text:00003922                 mov     ecx, [ebp+var_4] ; this
.text:00003925                 call    ?Flush@COutBuffer@@QAEJXZ ; COutBuffer::Flush(void)
.text:0000392A                 add     esp, 4
.text:0000392D                 cmp     ebp, esp
.text:0000392F                 call    __RTC_CheckEsp
.text:00003934                 mov     esp, ebp
.text:00003936                 pop     ebp
.text:00003937                 retn
.text:00003937 ?Flush@CBitlEncoder@@QAEJXZ endp
.text:00003937
.text:00003937 _text           ends
.text:00003937
.data:00003938 ; ===========================================================================
.data:00003938
.data:00003938 ; Segment type: Pure data
.data:00003938 ; Segment permissions: Read/Write
.data:00003938 _data           segment dword public 'DATA' use32
.data:00003938                 assume cs:_data
.data:00003938                 ;org 3938h
.data:00003938 ; COMDAT (pick any)
.data:00003938                 public ??_R0?AUCOutBufferException@@@8
.data:00003938 ; struct COutBufferException `RTTI Type Descriptor'
.data:00003938 ??_R0?AUCOutBufferException@@@8 dd offset ??_7type_info@@6B@
.data:00003938                                         ; DATA XREF: .xdata$x:00003118o
.data:00003938                                         ; const type_info::`vftable'
.data:0000393C                 align 10h
.data:00003940 a_?aucoutbuffer db '.?AUCOutBufferException@@',0
.data:0000395A                 align 4
.data:0000395A _data           ends
.data:0000395A
.text$yc:0000395C ; ===========================================================================
.text$yc:0000395C
.text$yc:0000395C ; Segment type: Pure code
.text$yc:0000395C ; Segment permissions: Read/Execute
.text$yc:0000395C _text$yc        segment para public 'CODE' use32
.text$yc:0000395C                 assume cs:_text$yc
.text$yc:0000395C                 ;org 395Ch
.text$yc:0000395C ; COMDAT (pick any)
.text$yc:0000395C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:0000395C
.text$yc:0000395C ; =============== S U B R O U T I N E =======================================
.text$yc:0000395C
.text$yc:0000395C ; Attributes: bp-based frame
.text$yc:0000395C
.text$yc:0000395C ; void __cdecl NCompress::NDeflate::NEncoder::`dynamic initializer for 'g_FastPosInit''(void)
.text$yc:0000395C ??__Eg_FastPosInit@NEncoder@NDeflate@NCompress@@YAXXZ proc near
.text$yc:0000395C                                         ; DATA XREF: .CRT$XCU:_g_FastPosInit$initializer$o
.text$yc:0000395C                 push    ebp
.text$yc:0000395D                 mov     ebp, esp
.text$yc:0000395F                 mov     ecx, offset _g_FastPosInit ; this
.text$yc:00003964                 call    ??0CFastPosInit@NEncoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NEncoder::CFastPosInit::CFastPosInit(void)
.text$yc:00003969                 cmp     ebp, esp
.text$yc:0000396B                 call    __RTC_CheckEsp
.text$yc:00003970                 pop     ebp
.text$yc:00003971                 retn
.text$yc:00003971 ??__Eg_FastPosInit@NEncoder@NDeflate@NCompress@@YAXXZ endp
.text$yc:00003971
.text$yc:00003971 ; ---------------------------------------------------------------------------
.text$yc:00003972                 align 4
.text$yc:00003972 _text$yc        ends
.text$yc:00003972
.text:00003974 ; ===========================================================================
.text:00003974
.text:00003974 ; Segment type: Pure code
.text:00003974 ; Segment permissions: Read/Execute
.text:00003974 _text           segment para public 'CODE' use32
.text:00003974                 assume cs:_text
.text:00003974                 ;org 3974h
.text:00003974 ; COMDAT (pick any)
.text:00003974                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003974
.text:00003974 ; =============== S U B R O U T I N E =======================================
.text:00003974
.text:00003974 ; Attributes: bp-based frame
.text:00003974
.text:00003974 ; _DWORD __thiscall NCompress::NDeflate::NEncoder::CFastPosInit::CFastPosInit(NCompress::NDeflate::NEncoder::CFastPosInit *__hidden this)
.text:00003974                 public ??0CFastPosInit@NEncoder@NDeflate@NCompress@@QAE@XZ
.text:00003974 ??0CFastPosInit@NEncoder@NDeflate@NCompress@@QAE@XZ proc near
.text:00003974                                         ; CODE XREF: NCompress::NDeflate::NEncoder::`dynamic initializer for 'g_FastPosInit''(void)+8p
.text:00003974
.text:00003974 var_28          = dword ptr -28h
.text:00003974 var_24          = dword ptr -24h
.text:00003974 var_1D          = byte ptr -1Dh
.text:00003974 var_1C          = dword ptr -1Ch
.text:00003974 var_18          = dword ptr -18h
.text:00003974 var_14          = dword ptr -14h
.text:00003974 var_10          = dword ptr -10h
.text:00003974 var_C           = dword ptr -0Ch
.text:00003974 var_8           = dword ptr -8
.text:00003974 var_4           = dword ptr -4
.text:00003974
.text:00003974                 push    ebp
.text:00003975                 mov     ebp, esp
.text:00003977                 sub     esp, 28h
.text:0000397A                 push    edi
.text:0000397B                 push    ecx
.text:0000397C                 lea     edi, [ebp+var_28]
.text:0000397F                 mov     ecx, 0Ah
.text:00003984                 mov     eax, 0CCCCCCCCh
.text:00003989                 rep stosd
.text:0000398B                 pop     ecx
.text:0000398C                 mov     [ebp+var_4], ecx
.text:0000398F                 mov     [ebp+var_8], 0
.text:00003996                 jmp     short loc_39A1
.text:00003998 ; ---------------------------------------------------------------------------
.text:00003998
.text:00003998 loc_3998:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CFastPosInit::CFastPosInit(void):loc_39F9j
.text:00003998                 mov     eax, [ebp+var_8]
.text:0000399B                 add     eax, 1
.text:0000399E                 mov     [ebp+var_8], eax
.text:000039A1
.text:000039A1 loc_39A1:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CFastPosInit::CFastPosInit(void)+22j
.text:000039A1                 cmp     [ebp+var_8], 1Dh
.text:000039A5                 jnb     short loc_39FB
.text:000039A7                 mov     ecx, [ebp+var_8]
.text:000039AA                 movzx   edx, _kLenStart32[ecx]
.text:000039B1                 mov     [ebp+var_C], edx
.text:000039B4                 mov     eax, [ebp+var_8]
.text:000039B7                 movzx   ecx, _kLenDirectBits32[eax]
.text:000039BE                 mov     edx, 1
.text:000039C3                 shl     edx, cl
.text:000039C5                 mov     [ebp+var_10], edx
.text:000039C8                 mov     [ebp+var_14], 0
.text:000039CF                 jmp     short loc_39E3
.text:000039D1 ; ---------------------------------------------------------------------------
.text:000039D1
.text:000039D1 loc_39D1:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CFastPosInit::CFastPosInit(void)+83j
.text:000039D1                 mov     eax, [ebp+var_14]
.text:000039D4                 add     eax, 1
.text:000039D7                 mov     [ebp+var_14], eax
.text:000039DA                 mov     ecx, [ebp+var_C]
.text:000039DD                 add     ecx, 1
.text:000039E0                 mov     [ebp+var_C], ecx
.text:000039E3
.text:000039E3 loc_39E3:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CFastPosInit::CFastPosInit(void)+5Bj
.text:000039E3                 mov     edx, [ebp+var_14]
.text:000039E6                 cmp     edx, [ebp+var_10]
.text:000039E9                 jnb     short loc_39F9
.text:000039EB                 mov     eax, [ebp+var_C]
.text:000039EE                 mov     cl, byte ptr [ebp+var_8]
.text:000039F1                 mov     ds:_g_LenSlots[eax], cl
.text:000039F7                 jmp     short loc_39D1
.text:000039F9 ; ---------------------------------------------------------------------------
.text:000039F9
.text:000039F9 loc_39F9:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CFastPosInit::CFastPosInit(void)+75j
.text:000039F9                 jmp     short loc_3998
.text:000039FB ; ---------------------------------------------------------------------------
.text:000039FB
.text:000039FB loc_39FB:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CFastPosInit::CFastPosInit(void)+31j
.text:000039FB                 mov     [ebp+var_18], 12h
.text:00003A02                 mov     [ebp+var_1C], 0
.text:00003A09                 mov     [ebp+var_1D], 0
.text:00003A0D                 jmp     short loc_3A18
.text:00003A0F ; ---------------------------------------------------------------------------
.text:00003A0F
.text:00003A0F loc_3A0F:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CFastPosInit::CFastPosInit(void):loc_3A67j
.text:00003A0F                 mov     dl, [ebp+var_1D]
.text:00003A12                 add     dl, 1
.text:00003A15                 mov     [ebp+var_1D], dl
.text:00003A18
.text:00003A18 loc_3A18:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CFastPosInit::CFastPosInit(void)+99j
.text:00003A18                 movzx   eax, [ebp+var_1D]
.text:00003A1C                 cmp     eax, 12h
.text:00003A1F                 jnb     short loc_3A69
.text:00003A21                 movzx   ecx, [ebp+var_1D]
.text:00003A25                 movzx   ecx, _kDistDirectBits[ecx]
.text:00003A2C                 mov     edx, 1
.text:00003A31                 shl     edx, cl
.text:00003A33                 mov     [ebp+var_24], edx
.text:00003A36                 mov     [ebp+var_28], 0
.text:00003A3D                 jmp     short loc_3A51
.text:00003A3F ; ---------------------------------------------------------------------------
.text:00003A3F
.text:00003A3F loc_3A3F:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CFastPosInit::CFastPosInit(void)+F1j
.text:00003A3F                 mov     eax, [ebp+var_28]
.text:00003A42                 add     eax, 1
.text:00003A45                 mov     [ebp+var_28], eax
.text:00003A48                 mov     ecx, [ebp+var_1C]
.text:00003A4B                 add     ecx, 1
.text:00003A4E                 mov     [ebp+var_1C], ecx
.text:00003A51
.text:00003A51 loc_3A51:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CFastPosInit::CFastPosInit(void)+C9j
.text:00003A51                 mov     edx, [ebp+var_28]
.text:00003A54                 cmp     edx, [ebp+var_24]
.text:00003A57                 jnb     short loc_3A67
.text:00003A59                 mov     eax, [ebp+var_1C]
.text:00003A5C                 mov     cl, [ebp+var_1D]
.text:00003A5F                 mov     ds:_g_FastPos[eax], cl
.text:00003A65                 jmp     short loc_3A3F
.text:00003A67 ; ---------------------------------------------------------------------------
.text:00003A67
.text:00003A67 loc_3A67:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CFastPosInit::CFastPosInit(void)+E3j
.text:00003A67                 jmp     short loc_3A0F
.text:00003A69 ; ---------------------------------------------------------------------------
.text:00003A69
.text:00003A69 loc_3A69:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CFastPosInit::CFastPosInit(void)+ABj
.text:00003A69                 mov     eax, [ebp+var_4]
.text:00003A6C                 pop     edi
.text:00003A6D                 mov     esp, ebp
.text:00003A6F                 pop     ebp
.text:00003A70                 retn
.text:00003A70 ??0CFastPosInit@NEncoder@NDeflate@NCompress@@QAE@XZ endp
.text:00003A70
.text:00003A70 ; ---------------------------------------------------------------------------
.text:00003A71                 align 4
.text:00003A71 _text           ends
.text:00003A71
.CRT$XCU:00003A74 ; ===========================================================================
.CRT$XCU:00003A74
.CRT$XCU:00003A74 ; Segment type: Pure data
.CRT$XCU:00003A74 ; Segment permissions: Read
.CRT$XCU:00003A74 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00003A74                 assume cs:_CRT$XCU
.CRT$XCU:00003A74                 ;org 3A74h
.CRT$XCU:00003A74 _g_FastPosInit$initializer$ dd offset ??__Eg_FastPosInit@NEncoder@NDeflate@NCompress@@YAXXZ ; NCompress::NDeflate::NEncoder::`dynamic initializer for 'g_FastPosInit''(void)
.CRT$XCU:00003A74 _CRT$XCU        ends
.CRT$XCU:00003A74
UNDEF:00003A80 ; ===========================================================================
UNDEF:00003A80
UNDEF:00003A80 ; Segment type: Externs
UNDEF:00003A80 ; UNDEF
UNDEF:00003A80                 extrn __RTC_Shutdown:near
UNDEF:00003A80                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00003A84                 extrn __RTC_InitBase:near
UNDEF:00003A84                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00003A88                 extrn __RTC_CheckEsp:near
UNDEF:00003A88                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetProps(NCompress::NDeflate::NEncoder::CEncProps const *)+146p
UNDEF:00003A88                                         ; NCompress::NDeflate::NEncoder::CCoder::CCoder(bool)+158p ...
UNDEF:00003A8C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00003A8C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00003A8C                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::SetProps(NCompress::NDeflate::NEncoder::CEncProps const *)+139p
UNDEF:00003A8C                                         ; NCompress::NDeflate::NEncoder::CCoder::CCoder(bool)+140p ...
UNDEF:00003A90 ; __stdcall MatchFinder_Construct(x)
UNDEF:00003A90                 extrn _MatchFinder_Construct@4:near
UNDEF:00003A90                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CCoder(bool)+127p
UNDEF:00003A94                 extrn ___security_cookie:near
UNDEF:00003A94                                         ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::CCoder(bool)+26r
UNDEF:00003A94                                         ; NCompress::NDeflate::NEncoder::CCoder::~CCoder(void)+19r ...
UNDEF:00003A98                 extrn ___CxxFrameHandler3:near
UNDEF:00003A98                                         ; CODE XREF: __ehhandler$??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z+16j
UNDEF:00003A98                                         ; __ehhandler$??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ+16j ...
UNDEF:00003A9C ; __fastcall __security_check_cookie(x)
UNDEF:00003A9C                 extrn @__security_check_cookie@4:near
UNDEF:00003A9C                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)+2C6p
UNDEF:00003A9C                                         ; NCompress::NDeflate::NEncoder::CCoder::TryDynBlock(uint,uint)+2E6p ...
UNDEF:00003AA0 ; void __thiscall COutBuffer::Free(COutBuffer *__hidden this)
UNDEF:00003AA0                 extrn ?Free@COutBuffer@@QAEXXZ:near
UNDEF:00003AA0                                         ; CODE XREF: COutBuffer::~COutBuffer(void)+11p
UNDEF:00003AA4 ; __stdcall MatchFinder_Create(x, x, x, x, x, x)
UNDEF:00003AA4                 extrn _MatchFinder_Create@24:near
UNDEF:00003AA4                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::Create(void)+17Ap
UNDEF:00003AA8                 extrn _g_Alloc:near     ; DATA XREF: NCompress::NDeflate::NEncoder::CCoder::Create(void)+136o
UNDEF:00003AA8                                         ; NCompress::NDeflate::NEncoder::CCoder::~CCoder(void)+3Co
UNDEF:00003AAC ; __stdcall MidAlloc(x)
UNDEF:00003AAC                 extrn _MidAlloc@4:near  ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::Create(void)+97p
UNDEF:00003AB0 ; __stdcall MyAlloc(x)
UNDEF:00003AB0                 extrn _MyAlloc@4:near   ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::Create(void)+1Fp
UNDEF:00003AB0                                         ; NCompress::NDeflate::NEncoder::CCoder::Create(void)+54p ...
UNDEF:00003AB4 ; bool __thiscall COutBuffer::Create(COutBuffer *__hidden this, unsigned int)
UNDEF:00003AB4                 extrn ?Create@COutBuffer@@QAE_NI@Z:near
UNDEF:00003AB4                                         ; CODE XREF: CBitlEncoder::Create(uint)+15p
UNDEF:00003AB8 ; __stdcall MyFree(x)
UNDEF:00003AB8                 extrn _MyFree@4:near    ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::Free(void)+34p
UNDEF:00003AB8                                         ; NCompress::NDeflate::NEncoder::CCoder::Free(void)+50p ...
UNDEF:00003ABC ; __stdcall MidFree(x)
UNDEF:00003ABC                 extrn _MidFree@4:near   ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::Free(void)+18p
UNDEF:00003AC0 ; __stdcall MatchFinder_Free(x, x)
UNDEF:00003AC0                 extrn _MatchFinder_Free@8:near
UNDEF:00003AC0                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::~CCoder(void)+45p
UNDEF:00003AC4 ; __stdcall Hc3Zip_MatchFinder_GetMatches(x, x)
UNDEF:00003AC4                 extrn _Hc3Zip_MatchFinder_GetMatches@8:near
UNDEF:00003AC4                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)+BDp
UNDEF:00003AC8 ; __stdcall Bt3Zip_MatchFinder_GetMatches(x, x)
UNDEF:00003AC8                 extrn _Bt3Zip_MatchFinder_GetMatches@8:near
UNDEF:00003AC8                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::GetMatches(void)+A5p
UNDEF:00003ACC ; __stdcall Hc3Zip_MatchFinder_Skip(x, x)
UNDEF:00003ACC                 extrn _Hc3Zip_MatchFinder_Skip@8:near
UNDEF:00003ACC                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::MovePos(uint)+47p
UNDEF:00003AD0 ; __stdcall Bt3Zip_MatchFinder_Skip(x, x)
UNDEF:00003AD0                 extrn _Bt3Zip_MatchFinder_Skip@8:near
UNDEF:00003AD0                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::MovePos(uint)+38p
UNDEF:00003AD4 ; void __thiscall COutBuffer::FlushWithCheck(COutBuffer *__hidden this)
UNDEF:00003AD4                 extrn ?FlushWithCheck@COutBuffer@@QAEXXZ:near
UNDEF:00003AD4                                         ; CODE XREF: COutBuffer::WriteByte(uchar)+3Fp
UNDEF:00003AD8 ; __stdcall Huffman_Generate(x, x, x, x, x)
UNDEF:00003AD8                 extrn _Huffman_Generate@20:near
UNDEF:00003AD8                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::MakeTables(uint)+34p
UNDEF:00003AD8                                         ; NCompress::NDeflate::NEncoder::CCoder::MakeTables(uint)+5Cp ...
UNDEF:00003ADC ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:00003ADC                 extrn _memset:near      ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::TryBlock(void)+2Bp
UNDEF:00003ADC                                         ; NCompress::NDeflate::NEncoder::CCoder::TryBlock(void)+44p ...
UNDEF:00003AE0 ; __stdcall MatchFinder_Init(x)
UNDEF:00003AE0                 extrn _MatchFinder_Init@4:near
UNDEF:00003AE0                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+100p
UNDEF:00003AE4 ; unsigned __int64 __thiscall COutBuffer::GetProcessedSize(COutBuffer *__hidden this)
UNDEF:00003AE4                 extrn ?GetProcessedSize@COutBuffer@@QBE_KXZ:near
UNDEF:00003AE4                                         ; CODE XREF: CBitlEncoder::GetProcessedSize(void)+12p
UNDEF:00003AE8 ; void __thiscall COutBuffer::Init(COutBuffer *__hidden this)
UNDEF:00003AE8                 extrn ?Init@COutBuffer@@QAEXXZ:near
UNDEF:00003AE8                                         ; CODE XREF: CBitlEncoder::Init(void)+11p
UNDEF:00003AEC ; __int32 __thiscall COutBuffer::Flush(COutBuffer *__hidden this)
UNDEF:00003AEC                 extrn ?Flush@COutBuffer@@QAEJXZ:near
UNDEF:00003AEC                                         ; CODE XREF: CBitlEncoder::Flush(void)+19p
UNDEF:00003AF0 ; const type_info::`vftable'
UNDEF:00003AF0                 extrn ??_7type_info@@6B@:near
UNDEF:00003AF0                                         ; DATA XREF: .data:COutBufferException `RTTI Type Descriptor'o
UNDEF:00003AF0
UNDEF:00003AF0