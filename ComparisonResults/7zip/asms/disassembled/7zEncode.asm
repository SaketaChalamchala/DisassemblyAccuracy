.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : AD76AC1811336701387379BDCCFCC8CC
.text:00000000 ; Input CRC32 : A7E5AB33
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\7zEncode.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; void __thiscall NArchive::N7z::CEncoder::InitBindConv(NArchive::N7z::CEncoder *__hidden this)
.text:00000000                 public ?InitBindConv@CEncoder@N7z@NArchive@@AAEXXZ
.text:00000000 ?InitBindConv@CEncoder@N7z@NArchive@@AAEXXZ proc near
.text:00000000                                         ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+646p
.text:00000000
.text:00000000 var_24          = dword ptr -24h
.text:00000000 var_20          = dword ptr -20h
.text:00000000 var_1C          = dword ptr -1Ch
.text:00000000 var_18          = dword ptr -18h
.text:00000000 var_14          = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 24h
.text:00000006                 mov     eax, 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_24], eax
.text:0000000E                 mov     [ebp+var_20], eax
.text:00000011                 mov     [ebp+var_1C], eax
.text:00000014                 mov     [ebp+var_18], eax
.text:00000017                 mov     [ebp+var_14], eax
.text:0000001A                 mov     [ebp+var_10], eax
.text:0000001D                 mov     [ebp+var_C], eax
.text:00000020
.text:00000020 loc_20:                                 ; DATA XREF: .text:00002234o
.text:00000020                 mov     [ebp+var_8], eax
.text:00000023                 mov     [ebp+var_4], eax
.text:00000026                 mov     [ebp+var_4], ecx
.text:00000029                 mov     ecx, [ebp+var_4]
.text:0000002C                 add     ecx, 40h ; '@'
.text:0000002F                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:00000034                 mov     [ebp+var_8], eax
.text:00000037                 mov     eax, [ebp+var_8]
.text:0000003A                 push    eax
.text:0000003B                 mov     ecx, [ebp+var_4]
.text:0000003E                 add     ecx, 8Ch ; 'î'
.text:00000044                 call    ?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<uint>::ClearAndSetSize(uint)
.text:00000049                 mov     ecx, [ebp+var_8]
.text:0000004C                 push    ecx
.text:0000004D                 mov     ecx, [ebp+var_4]
.text:00000050                 add     ecx, 0A4h ; 'ñ'
.text:00000056                 call    ?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<uint>::ClearAndSetSize(uint)
.text:0000005B                 mov     ecx, [ebp+var_4]
.text:0000005E                 add     ecx, 40h ; '@'  ; this
.text:00000061                 call    ?GetNum_Bonds_and_PackStreams@CBindInfo@NCoderMixer2@@QBEIXZ ; NCoderMixer2::CBindInfo::GetNum_Bonds_and_PackStreams(void)
.text:00000066                 mov     [ebp+var_C], eax
.text:00000069                 mov     edx, [ebp+var_C]
.text:0000006C                 push    edx
.text:0000006D                 mov     ecx, [ebp+var_4]
.text:00000070                 add     ecx, 98h ; 'ÿ'
.text:00000076                 call    ?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<uint>::ClearAndSetSize(uint)
.text:0000007B                 mov     [ebp+var_10], 0
.text:00000082                 mov     [ebp+var_14], 0
.text:00000089                 mov     ecx, [ebp+var_4]
.text:0000008C                 add     ecx, 40h ; '@'
.text:0000008F                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:00000094                 mov     [ebp+var_18], eax
.text:00000097
.text:00000097 loc_97:                                 ; CODE XREF: NArchive::N7z::CEncoder::InitBindConv(void):loc_14Ej
.text:00000097                 cmp     [ebp+var_18], 0
.text:0000009B                 jz      loc_153
.text:000000A1                 mov     eax, [ebp+var_18]
.text:000000A4                 sub     eax, 1
.text:000000A7                 mov     [ebp+var_18], eax
.text:000000AA                 mov     ecx, [ebp+var_18]
.text:000000AD                 push    ecx
.text:000000AE                 mov     ecx, [ebp+var_4]
.text:000000B1                 add     ecx, 40h ; '@'
.text:000000B4                 call    ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[](uint)
.text:000000B9                 mov     [ebp+var_1C], eax
.text:000000BC                 mov     edx, [ebp+var_8]
.text:000000BF                 sub     edx, 1
.text:000000C2                 mov     [ebp+var_8], edx
.text:000000C5                 mov     eax, [ebp+var_1C]
.text:000000C8                 mov     ecx, [ebp+var_C]
.text:000000CB                 sub     ecx, [eax]
.text:000000CD                 mov     [ebp+var_C], ecx
.text:000000D0                 mov     edx, [ebp+var_8]
.text:000000D3                 push    edx
.text:000000D4                 mov     ecx, [ebp+var_4]
.text:000000D7                 add     ecx, 8Ch ; 'î'
.text:000000DD                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:000000E2                 mov     ecx, [ebp+var_14]
.text:000000E5                 mov     [eax], ecx
.text:000000E7                 mov     edx, [ebp+var_14]
.text:000000EA                 push    edx
.text:000000EB                 mov     ecx, [ebp+var_4]
.text:000000EE                 add     ecx, 0A4h ; 'ñ'
.text:000000F4                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:000000F9                 mov     ecx, [ebp+var_8]
.text:000000FC                 mov     [eax], ecx
.text:000000FE                 mov     edx, [ebp+var_14]
.text:00000101                 add     edx, 1
.text:00000104                 mov     [ebp+var_14], edx
.text:00000107                 mov     [ebp+var_20], 0
.text:0000010E                 jmp     short loc_122
.text:00000110 ; ---------------------------------------------------------------------------
.text:00000110
.text:00000110 loc_110:                                ; CODE XREF: NArchive::N7z::CEncoder::InitBindConv(void)+14Cj
.text:00000110                 mov     eax, [ebp+var_20]
.text:00000113                 add     eax, 1
.text:00000116                 mov     [ebp+var_20], eax
.text:00000119                 mov     ecx, [ebp+var_10]
.text:0000011C                 add     ecx, 1
.text:0000011F                 mov     [ebp+var_10], ecx
.text:00000122
.text:00000122 loc_122:                                ; CODE XREF: NArchive::N7z::CEncoder::InitBindConv(void)+10Ej
.text:00000122                 mov     edx, [ebp+var_1C]
.text:00000125                 mov     eax, [ebp+var_20]
.text:00000128                 cmp     eax, [edx]
.text:0000012A                 jnb     short loc_14E
.text:0000012C                 mov     ecx, [ebp+var_C]
.text:0000012F                 add     ecx, [ebp+var_20]
.text:00000132                 mov     [ebp+var_24], ecx
.text:00000135                 mov     edx, [ebp+var_24]
.text:00000138                 push    edx
.text:00000139                 mov     ecx, [ebp+var_4]
.text:0000013C                 add     ecx, 98h ; 'ÿ'
.text:00000142                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00000147                 mov     ecx, [ebp+var_10]
.text:0000014A                 mov     [eax], ecx
.text:0000014C                 jmp     short loc_110
.text:0000014E ; ---------------------------------------------------------------------------
.text:0000014E
.text:0000014E loc_14E:                                ; CODE XREF: NArchive::N7z::CEncoder::InitBindConv(void)+12Aj
.text:0000014E                 jmp     loc_97
.text:00000153 ; ---------------------------------------------------------------------------
.text:00000153
.text:00000153 loc_153:                                ; CODE XREF: NArchive::N7z::CEncoder::InitBindConv(void)+9Bj
.text:00000153                 add     esp, 24h
.text:00000156                 cmp     ebp, esp
.text:00000158                 call    __RTC_CheckEsp
.text:0000015D                 mov     esp, ebp
.text:0000015F                 pop     ebp
.text:00000160                 retn
.text:00000160 ?InitBindConv@CEncoder@N7z@NArchive@@AAEXXZ endp
.text:00000160
.text:00000160 ; ---------------------------------------------------------------------------
.text:00000161                 align 10h
.text:00000170
.text:00000170 ; =============== S U B R O U T I N E =======================================
.text:00000170
.text:00000170 ; Attributes: bp-based frame
.text:00000170
.text:00000170 ; void __thiscall NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CEncoder *this, struct NArchive::N7z::CFolder *)
.text:00000170                 public ?SetFolder@CEncoder@N7z@NArchive@@AAEXAAUCFolder@23@@Z
.text:00000170 ?SetFolder@CEncoder@N7z@NArchive@@AAEXAAUCFolder@23@@Z proc near
.text:00000170                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+31Bp
.text:00000170
.text:00000170 var_18          = dword ptr -18h
.text:00000170 var_14          = dword ptr -14h
.text:00000170 var_10          = dword ptr -10h
.text:00000170 var_C           = dword ptr -0Ch
.text:00000170 var_8           = dword ptr -8
.text:00000170 var_4           = dword ptr -4
.text:00000170 arg_0           = dword ptr  8
.text:00000170
.text:00000170                 push    ebp
.text:00000171                 mov     ebp, esp
.text:00000173                 sub     esp, 18h
.text:00000176                 push    esi
.text:00000177                 mov     eax, 0CCCCCCCCh
.text:0000017C                 mov     [ebp+var_18], eax
.text:0000017F                 mov     [ebp+var_14], eax
.text:00000182                 mov     [ebp+var_10], eax
.text:00000185                 mov     [ebp+var_C], eax
.text:00000188                 mov     [ebp+var_8], eax
.text:0000018B                 mov     [ebp+var_4], eax
.text:0000018E                 mov     [ebp+var_4], ecx
.text:00000191                 mov     ecx, [ebp+var_4]
.text:00000194                 add     ecx, 4Ch ; 'L'
.text:00000197                 call    ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size(void)
.text:0000019C                 push    eax
.text:0000019D                 mov     ecx, [ebp+arg_0]
.text:000001A0                 add     ecx, 8
.text:000001A3                 call    ?SetSize@?$CObjArray2@UCBond@N7z@NArchive@@@@QAEXI@Z ; CObjArray2<NArchive::N7z::CBond>::SetSize(uint)
.text:000001A8                 mov     [ebp+var_8], 0
.text:000001AF                 jmp     short loc_1BA
.text:000001B1 ; ---------------------------------------------------------------------------
.text:000001B1
.text:000001B1 loc_1B1:                                ; CODE XREF: NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+C6j
.text:000001B1                 mov     eax, [ebp+var_8]
.text:000001B4                 add     eax, 1
.text:000001B7                 mov     [ebp+var_8], eax
.text:000001BA
.text:000001BA loc_1BA:                                ; CODE XREF: NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+3Fj
.text:000001BA                 mov     ecx, [ebp+var_4]
.text:000001BD                 add     ecx, 4Ch ; 'L'
.text:000001C0                 call    ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size(void)
.text:000001C5                 cmp     [ebp+var_8], eax
.text:000001C8                 jnb     short loc_23B
.text:000001CA                 mov     ecx, [ebp+arg_0]
.text:000001CD                 add     ecx, 8
.text:000001D0                 call    ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond *(void)
.text:000001D5                 mov     ecx, [ebp+var_8]
.text:000001D8                 lea     edx, [eax+ecx*8]
.text:000001DB                 mov     [ebp+var_C], edx
.text:000001DE                 mov     ecx, [ebp+var_4]
.text:000001E1                 add     ecx, 4Ch ; 'L'
.text:000001E4                 call    ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size(void)
.text:000001E9                 sub     eax, 1
.text:000001EC                 sub     eax, [ebp+var_8]
.text:000001EF                 push    eax
.text:000001F0                 mov     ecx, [ebp+var_4]
.text:000001F3                 add     ecx, 4Ch ; 'L'
.text:000001F6                 call    ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[](uint)
.text:000001FB                 mov     [ebp+var_10], eax
.text:000001FE                 mov     eax, [ebp+var_10]
.text:00000201                 mov     ecx, [eax]
.text:00000203                 push    ecx
.text:00000204                 mov     ecx, [ebp+var_4]
.text:00000207                 add     ecx, 98h ; 'ÿ'
.text:0000020D                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00000212                 mov     edx, [ebp+var_C]
.text:00000215                 mov     eax, [eax]
.text:00000217                 mov     [edx], eax
.text:00000219                 mov     ecx, [ebp+var_10]
.text:0000021C                 mov     edx, [ecx+4]
.text:0000021F                 push    edx
.text:00000220                 mov     ecx, [ebp+var_4]
.text:00000223                 add     ecx, 8Ch ; 'î'
.text:00000229                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:0000022E                 mov     ecx, [ebp+var_C]
.text:00000231                 mov     edx, [eax]
.text:00000233                 mov     [ecx+4], edx
.text:00000236                 jmp     loc_1B1
.text:0000023B ; ---------------------------------------------------------------------------
.text:0000023B
.text:0000023B loc_23B:                                ; CODE XREF: NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+58j
.text:0000023B                 mov     ecx, [ebp+var_4]
.text:0000023E                 add     ecx, 40h ; '@'
.text:00000241                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:00000246                 push    eax
.text:00000247                 mov     ecx, [ebp+arg_0]
.text:0000024A                 call    ?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z ; CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)
.text:0000024F                 mov     [ebp+var_8], 0
.text:00000256                 jmp     short loc_261
.text:00000258 ; ---------------------------------------------------------------------------
.text:00000258
.text:00000258 loc_258:                                ; CODE XREF: NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+15Ej
.text:00000258                 mov     eax, [ebp+var_8]
.text:0000025B                 add     eax, 1
.text:0000025E                 mov     [ebp+var_8], eax
.text:00000261
.text:00000261 loc_261:                                ; CODE XREF: NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+E6j
.text:00000261                 mov     ecx, [ebp+var_4]
.text:00000264                 add     ecx, 40h ; '@'
.text:00000267                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:0000026C                 cmp     [ebp+var_8], eax
.text:0000026F                 jnb     short loc_2D0
.text:00000271                 mov     ecx, [ebp+arg_0]
.text:00000274                 call    ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo *(void)
.text:00000279                 mov     ecx, [ebp+var_8]
.text:0000027C                 imul    ecx, 18h
.text:0000027F                 add     eax, ecx
.text:00000281                 mov     [ebp+var_14], eax
.text:00000284                 mov     ecx, [ebp+var_4]
.text:00000287                 add     ecx, 40h ; '@'
.text:0000028A                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:0000028F                 sub     eax, 1
.text:00000292                 sub     eax, [ebp+var_8]
.text:00000295                 push    eax
.text:00000296                 mov     ecx, [ebp+var_4]
.text:00000299                 add     ecx, 40h ; '@'
.text:0000029C                 call    ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[](uint)
.text:000002A1                 mov     [ebp+var_18], eax
.text:000002A4                 mov     edx, [ebp+var_14]
.text:000002A7                 mov     eax, [ebp+var_18]
.text:000002AA                 mov     ecx, [eax]
.text:000002AC                 mov     [edx+10h], ecx
.text:000002AF                 mov     edx, [ebp+var_8]
.text:000002B2                 push    edx
.text:000002B3                 mov     ecx, [ebp+var_4]
.text:000002B6                 add     ecx, 80h ; 'Ç'
.text:000002BC                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:000002C1                 mov     ecx, [ebp+var_14]
.text:000002C4                 mov     edx, [eax]
.text:000002C6                 mov     [ecx], edx
.text:000002C8                 mov     eax, [eax+4]
.text:000002CB                 mov     [ecx+4], eax
.text:000002CE                 jmp     short loc_258
.text:000002D0 ; ---------------------------------------------------------------------------
.text:000002D0
.text:000002D0 loc_2D0:                                ; CODE XREF: NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+FFj
.text:000002D0                 mov     ecx, [ebp+var_4]
.text:000002D3                 add     ecx, 58h ; 'X'
.text:000002D6                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:000002DB                 push    eax
.text:000002DC                 mov     ecx, [ebp+arg_0]
.text:000002DF                 add     ecx, 10h
.text:000002E2                 call    ?SetSize@?$CObjArray2@I@@QAEXI@Z ; CObjArray2<uint>::SetSize(uint)
.text:000002E7                 mov     [ebp+var_8], 0
.text:000002EE                 jmp     short loc_2F9
.text:000002F0 ; ---------------------------------------------------------------------------
.text:000002F0
.text:000002F0 loc_2F0:                                ; CODE XREF: NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+1CEj
.text:000002F0                 mov     ecx, [ebp+var_8]
.text:000002F3                 add     ecx, 1
.text:000002F6                 mov     [ebp+var_8], ecx
.text:000002F9
.text:000002F9 loc_2F9:                                ; CODE XREF: NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+17Ej
.text:000002F9                 mov     ecx, [ebp+var_4]
.text:000002FC                 add     ecx, 58h ; 'X'
.text:000002FF                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00000304                 cmp     [ebp+var_8], eax
.text:00000307                 jnb     short loc_340
.text:00000309                 mov     edx, [ebp+var_8]
.text:0000030C                 push    edx
.text:0000030D                 mov     ecx, [ebp+var_4]
.text:00000310                 add     ecx, 58h ; 'X'
.text:00000313                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00000318                 mov     eax, [eax]
.text:0000031A                 push    eax
.text:0000031B                 mov     ecx, [ebp+var_4]
.text:0000031E                 add     ecx, 98h ; 'ÿ'
.text:00000324                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00000329                 mov     esi, eax
.text:0000032B                 mov     ecx, [ebp+arg_0]
.text:0000032E                 add     ecx, 10h
.text:00000331                 call    ??B?$CObjArray2@I@@QAEPAIXZ ; CObjArray2<uint>::operator uint *(void)
.text:00000336                 mov     ecx, [ebp+var_8]
.text:00000339                 mov     edx, [esi]
.text:0000033B                 mov     [eax+ecx*4], edx
.text:0000033E                 jmp     short loc_2F0
.text:00000340 ; ---------------------------------------------------------------------------
.text:00000340
.text:00000340 loc_340:                                ; CODE XREF: NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+197j
.text:00000340                 pop     esi
.text:00000341                 add     esp, 18h
.text:00000344                 cmp     ebp, esp
.text:00000346                 call    __RTC_CheckEsp
.text:0000034B                 mov     esp, ebp
.text:0000034D                 pop     ebp
.text:0000034E                 retn    4
.text:0000034E ?SetFolder@CEncoder@N7z@NArchive@@AAEXAAUCFolder@23@@Z endp
.text:0000034E
.text:0000034E ; ---------------------------------------------------------------------------
.text:00000351                 align 10h
.text:00000360
.text:00000360 ; =============== S U B R O U T I N E =======================================
.text:00000360
.text:00000360 ; Attributes: bp-based frame
.text:00000360
.text:00000360 ; void __thiscall NArchive::N7z::CMtEncMultiProgress::Init(NArchive::N7z::CMtEncMultiProgress *this, struct ICompressProgressInfo *)
.text:00000360                 public ?Init@CMtEncMultiProgress@N7z@NArchive@@QAEXPAUICompressProgressInfo@@@Z
.text:00000360 ?Init@CMtEncMultiProgress@N7z@NArchive@@QAEXPAUICompressProgressInfo@@@Z proc near
.text:00000360                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+61Ep
.text:00000360
.text:00000360 var_4           = dword ptr -4
.text:00000360 arg_0           = dword ptr  8
.text:00000360
.text:00000360                 push    ebp
.text:00000361                 mov     ebp, esp
.text:00000363                 push    ecx
.text:00000364                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000036B                 mov     [ebp+var_4], ecx
.text:0000036E                 mov     eax, [ebp+arg_0]
.text:00000371                 push    eax
.text:00000372                 mov     ecx, [ebp+var_4]
.text:00000375                 add     ecx, 8
.text:00000378                 call    ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ; CMyComPtr<ICompressProgressInfo>::operator=(ICompressProgressInfo *)
.text:0000037D                 mov     ecx, [ebp+var_4]
.text:00000380                 mov     dword ptr [ecx+28h], 0
.text:00000387                 mov     dword ptr [ecx+2Ch], 0
.text:0000038E                 add     esp, 4
.text:00000391                 cmp     ebp, esp
.text:00000393                 call    __RTC_CheckEsp
.text:00000398                 mov     esp, ebp
.text:0000039A                 pop     ebp
.text:0000039B                 retn    4
.text:0000039B ?Init@CMtEncMultiProgress@N7z@NArchive@@QAEXPAUICompressProgressInfo@@@Z endp
.text:0000039B
.text:0000039B ; ---------------------------------------------------------------------------
.text:0000039E                 align 10h
.text:000003A0
.text:000003A0 ; =============== S U B R O U T I N E =======================================
.text:000003A0
.text:000003A0 ; Attributes: bp-based frame
.text:000003A0
.text:000003A0 ; __int32 __stdcall NArchive::N7z::CMtEncMultiProgress::SetRatioInfo(NArchive::N7z::CMtEncMultiProgress *this, const unsigned __int64 *, const unsigned __int64 *)
.text:000003A0                 public ?SetRatioInfo@CMtEncMultiProgress@N7z@NArchive@@UAGJPB_K0@Z
.text:000003A0 ?SetRatioInfo@CMtEncMultiProgress@N7z@NArchive@@UAGJPB_K0@Z proc near
.text:000003A0                                         ; DATA XREF: .rdata:00003C70o
.text:000003A0
.text:000003A0 var_20          = dword ptr -20h
.text:000003A0 var_1C          = dword ptr -1Ch
.text:000003A0 var_18          = dword ptr -18h
.text:000003A0 var_14          = dword ptr -14h
.text:000003A0 var_10          = dword ptr -10h
.text:000003A0 var_C           = dword ptr -0Ch
.text:000003A0 var_8           = dword ptr -8
.text:000003A0 var_4           = dword ptr -4
.text:000003A0 this            = dword ptr  8
.text:000003A0 arg_4           = dword ptr  0Ch
.text:000003A0
.text:000003A0                 push    ebp
.text:000003A1                 mov     ebp, esp
.text:000003A3                 sub     esp, 20h
.text:000003A6                 push    esi
.text:000003A7                 mov     eax, 0CCCCCCCCh
.text:000003AC                 mov     [ebp+var_20], eax
.text:000003AF                 mov     [ebp+var_1C], eax
.text:000003B2                 mov     [ebp+var_18], eax
.text:000003B5                 mov     [ebp+var_14], eax
.text:000003B8                 mov     [ebp+var_10], eax
.text:000003BB                 mov     [ebp+var_C], eax
.text:000003BE                 mov     [ebp+var_8], eax
.text:000003C1                 mov     [ebp+var_4], eax
.text:000003C4                 mov     eax, [ebp+this]
.text:000003C7                 add     eax, 0Ch
.text:000003CA                 push    eax             ; struct NWindows::NSynchronization::CCriticalSection *
.text:000003CB                 lea     ecx, [ebp+var_18] ; this
.text:000003CE                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:000003D3                 mov     ecx, [ebp+this]
.text:000003D6                 mov     edx, [ecx+28h]
.text:000003D9                 mov     [ebp+var_C], edx
.text:000003DC                 mov     eax, [ecx+2Ch]
.text:000003DF                 mov     [ebp+var_8], eax
.text:000003E2                 lea     ecx, [ebp+var_18] ; this
.text:000003E5                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:000003EA                 mov     ecx, [ebp+this]
.text:000003ED                 add     ecx, 8
.text:000003F0                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:000003F5                 test    eax, eax
.text:000003F7                 jz      short loc_428
.text:000003F9                 mov     ecx, [ebp+this]
.text:000003FC                 add     ecx, 8
.text:000003FF                 call    ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator->(void)
.text:00000404                 mov     [ebp+var_20], eax
.text:00000407                 mov     esi, esp
.text:00000409                 lea     ecx, [ebp+var_C]
.text:0000040C                 push    ecx
.text:0000040D                 mov     edx, [ebp+arg_4]
.text:00000410                 push    edx
.text:00000411                 mov     eax, [ebp+var_20]
.text:00000414                 push    eax
.text:00000415                 mov     ecx, [ebp+var_20]
.text:00000418                 mov     edx, [ecx]
.text:0000041A                 mov     eax, [edx+0Ch]
.text:0000041D                 call    eax
.text:0000041F                 cmp     esi, esp
.text:00000421                 call    __RTC_CheckEsp
.text:00000426                 jmp     short loc_42A
.text:00000428 ; ---------------------------------------------------------------------------
.text:00000428
.text:00000428 loc_428:                                ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+57j
.text:00000428                 xor     eax, eax
.text:0000042A
.text:0000042A loc_42A:                                ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+86j
.text:0000042A                 push    edx
.text:0000042B                 mov     ecx, ebp
.text:0000042D                 push    eax
.text:0000042E                 lea     edx, $LN7
.text:00000434                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000439                 pop     eax
.text:0000043A                 pop     edx
.text:0000043B                 pop     esi
.text:0000043C                 add     esp, 20h
.text:0000043F                 cmp     ebp, esp
.text:00000441                 call    __RTC_CheckEsp
.text:00000446                 mov     esp, ebp
.text:00000448                 pop     ebp
.text:00000449                 retn    0Ch
.text:00000449 ?SetRatioInfo@CMtEncMultiProgress@N7z@NArchive@@UAGJPB_K0@Z endp
.text:00000449
.text:00000449 ; ---------------------------------------------------------------------------
.text:0000044C $LN7            dd 2                    ; DATA XREF: NArchive::N7z::CMtEncMultiProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+8Eo
.text:00000450                 dd offset $LN6
.text:00000454 $LN6            dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00000450o
.text:0000045C                 dd offset $LN4          ; "outSize2"
.text:00000460                 dd 0FFFFFFE8h, 4
.text:00000468                 dd offset $LN5          ; "lock"
.text:0000046C $LN5            db 'lock',0             ; DATA XREF: .text:00000468o
.text:00000471 $LN4            db 'outSize2',0         ; DATA XREF: .text:0000045Co
.text:0000047A                 align 10h
.text:00000480
.text:00000480 ; =============== S U B R O U T I N E =======================================
.text:00000480
.text:00000480 ; Attributes: bp-based frame
.text:00000480
.text:00000480 ; __int32 __thiscall NArchive::N7z::CEncoder::CreateMixerCoder(NArchive::N7z::CEncoder *this, const unsigned __int64 *)
.text:00000480                 public ?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z
.text:00000480 ?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z proc near
.text:00000480                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+73p
.text:00000480
.text:00000480 var_CC          = dword ptr -0CCh
.text:00000480 var_C8          = dword ptr -0C8h
.text:00000480 var_C4          = dword ptr -0C4h
.text:00000480 var_C0          = dword ptr -0C0h
.text:00000480 var_BC          = dword ptr -0BCh
.text:00000480 var_B8          = dword ptr -0B8h
.text:00000480 var_B4          = dword ptr -0B4h
.text:00000480 var_B0          = dword ptr -0B0h
.text:00000480 var_AC          = dword ptr -0ACh
.text:00000480 var_A8          = dword ptr -0A8h
.text:00000480 var_A4          = dword ptr -0A4h
.text:00000480 var_A0          = dword ptr -0A0h
.text:00000480 var_9C          = dword ptr -9Ch
.text:00000480 var_98          = dword ptr -98h
.text:00000480 var_94          = dword ptr -94h
.text:00000480 var_90          = dword ptr -90h
.text:00000480 var_8C          = dword ptr -8Ch
.text:00000480 var_88          = dword ptr -88h
.text:00000480 var_84          = dword ptr -84h
.text:00000480 var_80          = word ptr -80h
.text:00000480 var_7C          = dword ptr -7Ch
.text:00000480 var_74          = byte ptr -74h
.text:00000480 var_68          = dword ptr -68h
.text:00000480 var_60          = byte ptr -60h
.text:00000480 var_58          = dword ptr -58h
.text:00000480 var_54          = dword ptr -54h
.text:00000480 var_4C          = byte ptr -4Ch
.text:00000480 var_40          = byte ptr -40h
.text:00000480 var_38          = dword ptr -38h
.text:00000480 var_30          = byte ptr -30h
.text:00000480 var_2C          = byte ptr -2Ch
.text:00000480 var_24          = dword ptr -24h
.text:00000480 var_1C          = dword ptr -1Ch
.text:00000480 var_18          = dword ptr -18h
.text:00000480 var_14          = dword ptr -14h
.text:00000480 var_10          = dword ptr -10h
.text:00000480 var_C           = dword ptr -0Ch
.text:00000480 var_4           = dword ptr -4
.text:00000480 arg_0           = dword ptr  8
.text:00000480
.text:00000480                 push    ebp
.text:00000481                 mov     ebp, esp
.text:00000483                 push    0FFFFFFFFh
.text:00000485                 push    offset __ehhandler$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z
.text:0000048A                 mov     eax, large fs:0
.text:00000490                 push    eax
.text:00000491                 sub     esp, 0C0h
.text:00000497                 push    ebx
.text:00000498                 push    esi
.text:00000499                 push    edi
.text:0000049A                 push    ecx
.text:0000049B                 lea     edi, [ebp+var_CC]
.text:000004A1                 mov     ecx, 30h ; '0'
.text:000004A6                 mov     eax, 0CCCCCCCCh
.text:000004AB                 rep stosd
.text:000004AD                 pop     ecx
.text:000004AE                 mov     eax, dword ptr ds:___security_cookie
.text:000004B3                 xor     eax, ebp
.text:000004B5                 push    eax
.text:000004B6                 lea     eax, [ebp+var_C]
.text:000004B9                 mov     large fs:0, eax
.text:000004BF                 mov     [ebp+var_10], ecx
.text:000004C2                 mov     eax, [ebp+var_10]
.text:000004C5                 movzx   ecx, byte ptr [eax+30h]
.text:000004C9                 test    ecx, ecx
.text:000004CB                 jz      loc_585
.text:000004D1                 push    84h ; 'ä'       ; unsigned int
.text:000004D6                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000004DB                 add     esp, 4
.text:000004DE                 mov     [ebp+var_8C], eax
.text:000004E4                 mov     [ebp+var_4], 0
.text:000004EB                 cmp     [ebp+var_8C], 0
.text:000004F2                 jz      short loc_509
.text:000004F4                 push    1               ; bool
.text:000004F6                 mov     ecx, [ebp+var_8C] ; this
.text:000004FC                 call    ??0CMixerMT@NCoderMixer2@@QAE@_N@Z ; NCoderMixer2::CMixerMT::CMixerMT(bool)
.text:00000501                 mov     [ebp+var_B0], eax
.text:00000507                 jmp     short loc_513
.text:00000509 ; ---------------------------------------------------------------------------
.text:00000509
.text:00000509 loc_509:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+72j
.text:00000509                 mov     [ebp+var_B0], 0
.text:00000513
.text:00000513 loc_513:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+87j
.text:00000513                 mov     edx, [ebp+var_B0]
.text:00000519                 mov     [ebp+var_88], edx
.text:0000051F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000526                 mov     eax, [ebp+var_10]
.text:00000529                 mov     ecx, [ebp+var_88]
.text:0000052F                 mov     [eax+4], ecx
.text:00000532                 mov     edx, [ebp+var_10]
.text:00000535                 mov     eax, [edx+4]
.text:00000538                 push    eax
.text:00000539                 mov     ecx, [ebp+var_10]
.text:0000053C                 add     ecx, 0Ch
.text:0000053F                 call    ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=(IUnknown *)
.text:00000544                 mov     ecx, [ebp+var_10]
.text:00000547                 mov     edx, [ecx+4]
.text:0000054A                 mov     [ebp+var_B4], edx
.text:00000550                 cmp     [ebp+var_B4], 0
.text:00000557                 jz      short loc_56A
.text:00000559                 mov     eax, [ebp+var_B4]
.text:0000055F                 add     eax, 4
.text:00000562                 mov     [ebp+var_B8], eax
.text:00000568                 jmp     short loc_574
.text:0000056A ; ---------------------------------------------------------------------------
.text:0000056A
.text:0000056A loc_56A:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+D7j
.text:0000056A                 mov     [ebp+var_B8], 0
.text:00000574
.text:00000574 loc_574:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+E8j
.text:00000574                 mov     ecx, [ebp+var_10]
.text:00000577                 mov     edx, [ebp+var_B8]
.text:0000057D                 mov     [ecx+8], edx
.text:00000580                 jmp     loc_624
.text:00000585 ; ---------------------------------------------------------------------------
.text:00000585
.text:00000585 loc_585:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+4Bj
.text:00000585                 push    84h ; 'ä'       ; unsigned int
.text:0000058A                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000058F                 add     esp, 4
.text:00000592                 mov     [ebp+var_94], eax
.text:00000598                 mov     [ebp+var_4], 1
.text:0000059F                 cmp     [ebp+var_94], 0
.text:000005A6                 jz      short loc_5BD
.text:000005A8                 push    1               ; bool
.text:000005AA                 mov     ecx, [ebp+var_94] ; this
.text:000005B0                 call    ??0CMixerST@NCoderMixer2@@QAE@_N@Z ; NCoderMixer2::CMixerST::CMixerST(bool)
.text:000005B5                 mov     [ebp+var_BC], eax
.text:000005BB                 jmp     short loc_5C7
.text:000005BD ; ---------------------------------------------------------------------------
.text:000005BD
.text:000005BD loc_5BD:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+126j
.text:000005BD                 mov     [ebp+var_BC], 0
.text:000005C7
.text:000005C7 loc_5C7:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+13Bj
.text:000005C7                 mov     eax, [ebp+var_BC]
.text:000005CD                 mov     [ebp+var_90], eax
.text:000005D3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000005DA                 mov     ecx, [ebp+var_10]
.text:000005DD                 mov     edx, [ebp+var_90]
.text:000005E3                 mov     [ecx], edx
.text:000005E5                 mov     eax, [ebp+var_10]
.text:000005E8                 mov     ecx, [eax]
.text:000005EA                 push    ecx
.text:000005EB                 mov     ecx, [ebp+var_10]
.text:000005EE                 add     ecx, 0Ch
.text:000005F1                 call    ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=(IUnknown *)
.text:000005F6                 mov     edx, [ebp+var_10]
.text:000005F9                 cmp     dword ptr [edx], 0
.text:000005FC                 jz      short loc_60E
.text:000005FE                 mov     eax, [ebp+var_10]
.text:00000601                 mov     ecx, [eax]
.text:00000603                 add     ecx, 4
.text:00000606                 mov     [ebp+var_C0], ecx
.text:0000060C                 jmp     short loc_618
.text:0000060E ; ---------------------------------------------------------------------------
.text:0000060E
.text:0000060E loc_60E:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+17Cj
.text:0000060E                 mov     [ebp+var_C0], 0
.text:00000618
.text:00000618 loc_618:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+18Cj
.text:00000618                 mov     edx, [ebp+var_10]
.text:0000061B                 mov     eax, [ebp+var_C0]
.text:00000621                 mov     [edx+8], eax
.text:00000624
.text:00000624 loc_624:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+100j
.text:00000624                 mov     ecx, [ebp+var_10]
.text:00000627                 add     ecx, 40h ; '@'
.text:0000062A                 mov     esi, esp
.text:0000062C                 push    ecx
.text:0000062D                 mov     edx, [ebp+var_10]
.text:00000630                 mov     eax, [edx+8]
.text:00000633                 mov     ecx, [ebp+var_10]
.text:00000636                 mov     ecx, [ecx+8]
.text:00000639                 mov     edx, [eax]
.text:0000063B                 mov     eax, [edx]
.text:0000063D                 call    eax
.text:0000063F                 cmp     esi, esp
.text:00000641                 call    __RTC_CheckEsp
.text:00000646                 mov     [ebp+var_14], eax
.text:00000649                 cmp     [ebp+var_14], 0
.text:0000064D                 jz      short loc_657
.text:0000064F                 mov     eax, [ebp+var_14]
.text:00000652                 jmp     loc_A29
.text:00000657 ; ---------------------------------------------------------------------------
.text:00000657
.text:00000657 loc_657:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+1CDj
.text:00000657                 mov     [ebp+var_18], 0
.text:0000065E                 jmp     short loc_669
.text:00000660 ; ---------------------------------------------------------------------------
.text:00000660
.text:00000660 loc_660:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+5A2j
.text:00000660                 mov     ecx, [ebp+var_18]
.text:00000663                 add     ecx, 1
.text:00000666                 mov     [ebp+var_18], ecx
.text:00000669
.text:00000669 loc_669:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+1DEj
.text:00000669                 mov     ecx, [ebp+var_10]
.text:0000066C                 add     ecx, 10h
.text:0000066F                 call    ?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size(void)
.text:00000674                 cmp     [ebp+var_18], eax
.text:00000677                 jnb     loc_A27
.text:0000067D                 mov     edx, [ebp+var_18]
.text:00000680                 push    edx
.text:00000681                 mov     ecx, [ebp+var_10]
.text:00000684                 add     ecx, 10h
.text:00000687                 call    ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator[](uint)
.text:0000068C                 mov     [ebp+var_1C], eax
.text:0000068F                 lea     ecx, [ebp+var_30] ; this
.text:00000692                 call    ??0CCreatedCoder@@QAE@XZ ; CCreatedCoder::CCreatedCoder(void)
.text:00000697                 mov     [ebp+var_4], 2
.text:0000069E                 lea     eax, [ebp+var_30]
.text:000006A1                 push    eax             ; struct CCreatedCoder *
.text:000006A2                 push    1               ; bool
.text:000006A4                 mov     ecx, [ebp+var_1C]
.text:000006A7                 mov     edx, [ecx+14h]
.text:000006AA                 push    edx
.text:000006AB                 mov     eax, [ecx+10h]
.text:000006AE                 push    eax             ; unsigned __int64
.text:000006AF                 call    ?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z ; CreateCoder(unsigned __int64,bool,CCreatedCoder &)
.text:000006B4                 mov     [ebp+var_38], eax
.text:000006B7                 cmp     [ebp+var_38], 0
.text:000006BB                 jz      short loc_6E0
.text:000006BD                 mov     ecx, [ebp+var_38]
.text:000006C0                 mov     [ebp+var_98], ecx
.text:000006C6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000006CD                 lea     ecx, [ebp+var_30] ; this
.text:000006D0                 call    ??1CCreatedCoder@@QAE@XZ ; CCreatedCoder::~CCreatedCoder(void)
.text:000006D5                 mov     eax, [ebp+var_98]
.text:000006DB                 jmp     loc_A29
.text:000006E0 ; ---------------------------------------------------------------------------
.text:000006E0
.text:000006E0 loc_6E0:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+23Bj
.text:000006E0                 mov     edx, [ebp+var_1C]
.text:000006E3                 mov     eax, [ebp+var_24]
.text:000006E6                 cmp     eax, [edx+18h]
.text:000006E9                 jz      short loc_70F
.text:000006EB                 mov     [ebp+var_9C], 80004005h
.text:000006F5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000006FC                 lea     ecx, [ebp+var_30] ; this
.text:000006FF                 call    ??1CCreatedCoder@@QAE@XZ ; CCreatedCoder::~CCreatedCoder(void)
.text:00000704                 mov     eax, [ebp+var_9C]
.text:0000070A                 jmp     loc_A29
.text:0000070F ; ---------------------------------------------------------------------------
.text:0000070F
.text:0000070F loc_70F:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+269j
.text:0000070F                 lea     ecx, [ebp+var_30]
.text:00000712                 call    ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ; CMyComPtr<ICompressCoder>::operator!(void)
.text:00000717                 movzx   ecx, al
.text:0000071A                 test    ecx, ecx
.text:0000071C                 jz      short loc_751
.text:0000071E                 lea     ecx, [ebp+var_2C]
.text:00000721                 call    ??7?$CMyComPtr@UICompressCoder2@@@@QBE_NXZ ; CMyComPtr<ICompressCoder2>::operator!(void)
.text:00000726                 movzx   edx, al
.text:00000729                 test    edx, edx
.text:0000072B                 jz      short loc_751
.text:0000072D                 mov     [ebp+var_A0], 80004005h
.text:00000737                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000073E                 lea     ecx, [ebp+var_30] ; this
.text:00000741                 call    ??1CCreatedCoder@@QAE@XZ ; CCreatedCoder::~CCreatedCoder(void)
.text:00000746                 mov     eax, [ebp+var_A0]
.text:0000074C                 jmp     loc_A29
.text:00000751 ; ---------------------------------------------------------------------------
.text:00000751
.text:00000751 loc_751:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+29Cj
.text:00000751                                         ; NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+2ABj
.text:00000751                 lea     ecx, [ebp+var_30]
.text:00000754                 call    ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *(void)
.text:00000759                 test    eax, eax
.text:0000075B                 jz      short loc_76D
.text:0000075D                 lea     ecx, [ebp+var_30]
.text:00000760                 call    ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *(void)
.text:00000765                 mov     [ebp+var_C4], eax
.text:0000076B                 jmp     short loc_77B
.text:0000076D ; ---------------------------------------------------------------------------
.text:0000076D
.text:0000076D loc_76D:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+2DBj
.text:0000076D                 lea     ecx, [ebp+var_2C]
.text:00000770                 call    ??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ; CMyComPtr<ICompressCoder2>::operator ICompressCoder2 *(void)
.text:00000775                 mov     [ebp+var_C4], eax
.text:0000077B
.text:0000077B loc_77B:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+2EBj
.text:0000077B                 mov     eax, [ebp+var_C4]
.text:00000781                 push    eax
.text:00000782                 lea     ecx, [ebp+var_40]
.text:00000785                 call    ??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z ; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>(IUnknown *)
.text:0000078A                 mov     byte ptr [ebp+var_4], 3
.text:0000078E                 lea     ecx, [ebp+var_4C]
.text:00000791                 call    ??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::CMyComPtr<ICompressSetCoderMt>(void)
.text:00000796                 mov     byte ptr [ebp+var_4], 4
.text:0000079A                 lea     ecx, [ebp+var_4C]
.text:0000079D                 call    ??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator&(void)
.text:000007A2                 push    eax
.text:000007A3                 push    offset _IID_ICompressSetCoderMt
.text:000007A8                 lea     ecx, [ebp+var_40]
.text:000007AB                 call    ??$QueryInterface@UICompressSetCoderMt@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderMt@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICompressSetCoderMt>(_GUID const &,ICompressSetCoderMt * *)
.text:000007B0                 lea     ecx, [ebp+var_4C]
.text:000007B3                 call    ??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator ICompressSetCoderMt *(void)
.text:000007B8                 test    eax, eax
.text:000007BA                 jz      short loc_832
.text:000007BC                 lea     ecx, [ebp+var_4C]
.text:000007BF                 call    ??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator->(void)
.text:000007C4                 mov     [ebp+var_C8], eax
.text:000007CA                 mov     esi, esp
.text:000007CC                 mov     ecx, [ebp+var_10]
.text:000007CF                 mov     edx, [ecx+2Ch]
.text:000007D2                 push    edx
.text:000007D3                 mov     eax, [ebp+var_C8]
.text:000007D9                 push    eax
.text:000007DA                 mov     ecx, [ebp+var_C8]
.text:000007E0                 mov     edx, [ecx]
.text:000007E2                 mov     eax, [edx+0Ch]
.text:000007E5                 call    eax
.text:000007E7                 cmp     esi, esp
.text:000007E9                 call    __RTC_CheckEsp
.text:000007EE                 mov     [ebp+var_54], eax
.text:000007F1                 cmp     [ebp+var_54], 0
.text:000007F5                 jz      short loc_832
.text:000007F7                 mov     ecx, [ebp+var_54]
.text:000007FA                 mov     [ebp+var_A4], ecx
.text:00000800                 mov     byte ptr [ebp+var_4], 3
.text:00000804                 lea     ecx, [ebp+var_4C]
.text:00000807                 call    ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>(void)
.text:0000080C                 mov     byte ptr [ebp+var_4], 2
.text:00000810                 lea     ecx, [ebp+var_40]
.text:00000813                 call    ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text:00000818                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000081F                 lea     ecx, [ebp+var_30] ; this
.text:00000822                 call    ??1CCreatedCoder@@QAE@XZ ; CCreatedCoder::~CCreatedCoder(void)
.text:00000827                 mov     eax, [ebp+var_A4]
.text:0000082D                 jmp     loc_A29
.text:00000832 ; ---------------------------------------------------------------------------
.text:00000832
.text:00000832 loc_832:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+33Aj
.text:00000832                                         ; NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+375j
.text:00000832                 mov     byte ptr [ebp+var_4], 3
.text:00000836                 lea     ecx, [ebp+var_4C]
.text:00000839                 call    ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>(void)
.text:0000083E                 lea     ecx, [ebp+var_40]
.text:00000841                 call    ??B?$CMyComPtr@UIUnknown@@@@QBEPAUIUnknown@@XZ ; CMyComPtr<IUnknown>::operator IUnknown *(void)
.text:00000846                 push    eax             ; int
.text:00000847                 mov     edx, [ebp+arg_0]
.text:0000084A                 push    edx             ; unsigned __int64 *
.text:0000084B                 mov     eax, [ebp+var_1C]
.text:0000084E                 push    eax             ; CProps *
.text:0000084F                 call    ?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z ; NArchive::N7z::SetCoderProps2(CProps const &,unsigned __int64 const *,IUnknown *)
.text:00000854                 mov     [ebp+var_58], eax
.text:00000857                 cmp     [ebp+var_58], 0
.text:0000085B                 jz      short loc_88C
.text:0000085D                 mov     ecx, [ebp+var_58]
.text:00000860                 mov     [ebp+var_A8], ecx
.text:00000866                 mov     byte ptr [ebp+var_4], 2
.text:0000086A                 lea     ecx, [ebp+var_40]
.text:0000086D                 call    ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text:00000872                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000879                 lea     ecx, [ebp+var_30] ; this
.text:0000087C                 call    ??1CCreatedCoder@@QAE@XZ ; CCreatedCoder::~CCreatedCoder(void)
.text:00000881                 mov     eax, [ebp+var_A8]
.text:00000887                 jmp     loc_A29
.text:0000088C ; ---------------------------------------------------------------------------
.text:0000088C
.text:0000088C loc_88C:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+3DBj
.text:0000088C                 lea     ecx, [ebp+var_60]
.text:0000088F                 call    ??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>(void)
.text:00000894                 mov     byte ptr [ebp+var_4], 5
.text:00000898                 lea     ecx, [ebp+var_60]
.text:0000089B                 call    ??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator&(void)
.text:000008A0                 push    eax
.text:000008A1                 push    offset _IID_ICryptoSetPassword
.text:000008A6                 lea     ecx, [ebp+var_40]
.text:000008A9                 call    ??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICryptoSetPassword>(_GUID const &,ICryptoSetPassword * *)
.text:000008AE                 lea     ecx, [ebp+var_60]
.text:000008B1                 call    ??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator ICryptoSetPassword *(void)
.text:000008B6                 test    eax, eax
.text:000008B8                 jz      loc_9D9
.text:000008BE                 mov     ecx, [ebp+var_10]
.text:000008C1                 add     ecx, 34h ; '4'  ; this
.text:000008C4                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000008C9                 shl     eax, 1
.text:000008CB                 mov     [ebp+var_68], eax
.text:000008CE                 mov     edx, [ebp+var_68]
.text:000008D1                 push    edx
.text:000008D2                 lea     ecx, [ebp+var_74]
.text:000008D5                 call    ??0?$CBuffer@E@@QAE@I@Z ; CBuffer<uchar>::CBuffer<uchar>(uint)
.text:000008DA                 mov     byte ptr [ebp+var_4], 6
.text:000008DE                 mov     [ebp+var_7C], 0
.text:000008E5                 jmp     short loc_8F0
.text:000008E7 ; ---------------------------------------------------------------------------
.text:000008E7
.text:000008E7 loc_8E7:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+4BDj
.text:000008E7                 mov     eax, [ebp+var_7C]
.text:000008EA                 add     eax, 1
.text:000008ED                 mov     [ebp+var_7C], eax
.text:000008F0
.text:000008F0 loc_8F0:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+465j
.text:000008F0                 mov     ecx, [ebp+var_10]
.text:000008F3                 add     ecx, 34h ; '4'  ; this
.text:000008F6                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000008FB                 cmp     [ebp+var_7C], eax
.text:000008FE                 jnb     short loc_93F
.text:00000900                 mov     ecx, [ebp+var_10]
.text:00000903                 add     ecx, 34h ; '4'
.text:00000906                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000090B                 mov     ecx, [ebp+var_7C]
.text:0000090E                 mov     dx, [eax+ecx*2]
.text:00000912                 mov     [ebp+var_80], dx
.text:00000916                 lea     ecx, [ebp+var_74]
.text:00000919                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:0000091E                 mov     ecx, [ebp+var_7C]
.text:00000921                 mov     dl, byte ptr [ebp+var_80]
.text:00000924                 mov     [eax+ecx*2], dl
.text:00000927                 movzx   ebx, [ebp+var_80]
.text:0000092B                 sar     ebx, 8
.text:0000092E                 lea     ecx, [ebp+var_74]
.text:00000931                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00000936                 mov     ecx, [ebp+var_7C]
.text:00000939                 mov     [eax+ecx*2+1], bl
.text:0000093D                 jmp     short loc_8E7
.text:0000093F ; ---------------------------------------------------------------------------
.text:0000093F
.text:0000093F loc_93F:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+47Ej
.text:0000093F                 lea     ecx, [ebp+var_60]
.text:00000942                 call    ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator->(void)
.text:00000947                 mov     [ebp+var_CC], eax
.text:0000094D                 mov     esi, esp
.text:0000094F                 mov     edx, [ebp+var_68]
.text:00000952                 push    edx
.text:00000953                 lea     ecx, [ebp+var_74]
.text:00000956                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:0000095B                 push    eax
.text:0000095C                 mov     eax, [ebp+var_CC]
.text:00000962                 push    eax
.text:00000963                 mov     ecx, [ebp+var_CC]
.text:00000969                 mov     edx, [ecx]
.text:0000096B                 mov     eax, [edx+0Ch]
.text:0000096E                 call    eax
.text:00000970                 cmp     esi, esp
.text:00000972                 call    __RTC_CheckEsp
.text:00000977                 mov     [ebp+var_84], eax
.text:0000097D                 cmp     [ebp+var_84], 0
.text:00000984                 jz      short loc_9CD
.text:00000986                 mov     ecx, [ebp+var_84]
.text:0000098C                 mov     [ebp+var_AC], ecx
.text:00000992                 mov     byte ptr [ebp+var_4], 5
.text:00000996                 lea     ecx, [ebp+var_74]
.text:00000999                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:0000099E                 mov     byte ptr [ebp+var_4], 3
.text:000009A2                 lea     ecx, [ebp+var_60]
.text:000009A5                 call    ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)
.text:000009AA                 mov     byte ptr [ebp+var_4], 2
.text:000009AE                 lea     ecx, [ebp+var_40]
.text:000009B1                 call    ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text:000009B6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000009BD                 lea     ecx, [ebp+var_30] ; this
.text:000009C0                 call    ??1CCreatedCoder@@QAE@XZ ; CCreatedCoder::~CCreatedCoder(void)
.text:000009C5                 mov     eax, [ebp+var_AC]
.text:000009CB                 jmp     short loc_A29
.text:000009CD ; ---------------------------------------------------------------------------
.text:000009CD
.text:000009CD loc_9CD:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+504j
.text:000009CD                 mov     byte ptr [ebp+var_4], 5
.text:000009D1                 lea     ecx, [ebp+var_74]
.text:000009D4                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:000009D9
.text:000009D9 loc_9D9:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+438j
.text:000009D9                 mov     esi, esp
.text:000009DB                 lea     edx, [ebp+var_30]
.text:000009DE                 push    edx
.text:000009DF                 mov     eax, [ebp+var_10]
.text:000009E2                 mov     ecx, [eax+8]
.text:000009E5                 mov     edx, [ebp+var_10]
.text:000009E8                 mov     eax, [edx+8]
.text:000009EB                 mov     edx, [ecx]
.text:000009ED                 mov     ecx, eax
.text:000009EF                 mov     eax, [edx+4]
.text:000009F2                 call    eax
.text:000009F4                 cmp     esi, esp
.text:000009F6                 call    __RTC_CheckEsp
.text:000009FB                 mov     byte ptr [ebp+var_4], 3
.text:000009FF                 lea     ecx, [ebp+var_60]
.text:00000A02                 call    ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)
.text:00000A07                 mov     byte ptr [ebp+var_4], 2
.text:00000A0B                 lea     ecx, [ebp+var_40]
.text:00000A0E                 call    ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text:00000A13                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000A1A                 lea     ecx, [ebp+var_30] ; this
.text:00000A1D                 call    ??1CCreatedCoder@@QAE@XZ ; CCreatedCoder::~CCreatedCoder(void)
.text:00000A22                 jmp     loc_660
.text:00000A27 ; ---------------------------------------------------------------------------
.text:00000A27
.text:00000A27 loc_A27:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+1F7j
.text:00000A27                 xor     eax, eax
.text:00000A29
.text:00000A29 loc_A29:                                ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+1D2j
.text:00000A29                                         ; NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+25Bj ...
.text:00000A29                 push    edx
.text:00000A2A                 mov     ecx, ebp
.text:00000A2C                 push    eax
.text:00000A2D                 lea     edx, $LN44
.text:00000A33                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000A38                 pop     eax
.text:00000A39                 pop     edx
.text:00000A3A                 mov     ecx, [ebp+var_C]
.text:00000A3D                 mov     large fs:0, ecx
.text:00000A44                 pop     ecx
.text:00000A45                 pop     edi
.text:00000A46                 pop     esi
.text:00000A47                 pop     ebx
.text:00000A48                 add     esp, 0CCh
.text:00000A4E                 cmp     ebp, esp
.text:00000A50                 call    __RTC_CheckEsp
.text:00000A55                 mov     esp, ebp
.text:00000A57                 pop     ebp
.text:00000A58                 retn    4
.text:00000A58 ?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z endp
.text:00000A58
.text:00000A58 ; ---------------------------------------------------------------------------
.text:00000A5B                 align 4
.text:00000A5C $LN44           dd 5                    ; DATA XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+5ADo
.text:00000A60                 dd offset $LN43
.text:00000A64 $LN43           dd 0FFFFFFD0h, 10h      ; DATA XREF: .text:00000A60o
.text:00000A6C                 dd offset $LN37         ; "cod"
.text:00000A70                 dd 0FFFFFFC0h, 4
.text:00000A78                 dd offset $LN38         ; "encoderCommon"
.text:00000A7C                 dd 0FFFFFFB4h, 4
.text:00000A84                 dd offset $LN39         ; "setCoderMt"
.text:00000A88                 dd 0FFFFFFA0h, 4
.text:00000A90                 dd offset $LN40         ; "cryptoSetPassword"
.text:00000A94                 dd 0FFFFFF8Ch, 8
.text:00000A9C                 dd offset $LN41         ; "buffer"
.text:00000AA0 $LN41           db 'buffer',0           ; DATA XREF: .text:00000A9Co
.text:00000AA7 $LN40           db 'cryptoSetPassword',0 ; DATA XREF: .text:00000A90o
.text:00000AB9 $LN39           db 'setCoderMt',0       ; DATA XREF: .text:00000A84o
.text:00000AC4 $LN38           db 'encoderCommon',0    ; DATA XREF: .text:00000A78o
.text:00000AD2 $LN37           db 'cod',0              ; DATA XREF: .text:00000A6Co
.text:00000AD6                 align 10h
.text:00000AE0
.text:00000AE0 ; =============== S U B R O U T I N E =======================================
.text:00000AE0
.text:00000AE0 ; Attributes: bp-based frame
.text:00000AE0
.text:00000AE0 ; int __stdcall NArchive::N7z::SetCoderProps2(CProps *, unsigned __int64 *, int)
.text:00000AE0 ?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z proc near
.text:00000AE0                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+3CFp
.text:00000AE0
.text:00000AE0 var_20          = dword ptr -20h
.text:00000AE0 var_1C          = dword ptr -1Ch
.text:00000AE0 var_18          = dword ptr -18h
.text:00000AE0 var_14          = dword ptr -14h
.text:00000AE0 var_10          = dword ptr -10h
.text:00000AE0 var_C           = dword ptr -0Ch
.text:00000AE0 var_4           = dword ptr -4
.text:00000AE0 arg_0           = dword ptr  8
.text:00000AE0 arg_4           = dword ptr  0Ch
.text:00000AE0 arg_8           = dword ptr  10h
.text:00000AE0
.text:00000AE0                 push    ebp
.text:00000AE1                 mov     ebp, esp
.text:00000AE3                 push    0FFFFFFFFh
.text:00000AE5                 push    offset __ehhandler$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z
.text:00000AEA                 mov     eax, large fs:0
.text:00000AF0                 push    eax
.text:00000AF1                 sub     esp, 14h
.text:00000AF4                 push    esi
.text:00000AF5                 mov     eax, 0CCCCCCCCh
.text:00000AFA                 mov     [ebp+var_20], eax
.text:00000AFD                 mov     [ebp+var_1C], eax
.text:00000B00                 mov     [ebp+var_18], eax
.text:00000B03                 mov     [ebp+var_14], eax
.text:00000B06                 mov     [ebp+var_10], eax
.text:00000B09                 mov     eax, dword ptr ds:___security_cookie
.text:00000B0E                 xor     eax, ebp
.text:00000B10                 push    eax
.text:00000B11                 lea     eax, [ebp+var_C]
.text:00000B14                 mov     large fs:0, eax
.text:00000B1A                 lea     ecx, [ebp+var_14]
.text:00000B1D                 call    ??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>(void)
.text:00000B22                 mov     [ebp+var_4], 0
.text:00000B29                 lea     ecx, [ebp+var_14]
.text:00000B2C                 call    ??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator&(void)
.text:00000B31                 mov     esi, esp
.text:00000B33                 push    eax
.text:00000B34                 push    offset _IID_ICompressSetCoderProperties
.text:00000B39                 mov     eax, [ebp+arg_8]
.text:00000B3C                 mov     ecx, [eax]
.text:00000B3E                 mov     edx, [ebp+arg_8]
.text:00000B41                 push    edx
.text:00000B42                 mov     eax, [ecx]
.text:00000B44                 call    eax
.text:00000B46                 cmp     esi, esp
.text:00000B48                 call    __RTC_CheckEsp
.text:00000B4D                 lea     ecx, [ebp+var_14]
.text:00000B50                 call    ??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *(void)
.text:00000B55                 test    eax, eax
.text:00000B57                 jz      short loc_B85
.text:00000B59                 mov     ecx, [ebp+arg_4]
.text:00000B5C                 push    ecx             ; unsigned __int64 *
.text:00000B5D                 lea     ecx, [ebp+var_14]
.text:00000B60                 call    ??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *(void)
.text:00000B65                 push    eax             ; struct ICompressSetCoderProperties *
.text:00000B66                 mov     ecx, [ebp+arg_0] ; this
.text:00000B69                 call    ?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z ; CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)
.text:00000B6E                 mov     [ebp+var_1C], eax
.text:00000B71                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000B78                 lea     ecx, [ebp+var_14]
.text:00000B7B                 call    ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>(void)
.text:00000B80                 mov     eax, [ebp+var_1C]
.text:00000B83                 jmp     short loc_BAF
.text:00000B85 ; ---------------------------------------------------------------------------
.text:00000B85
.text:00000B85 loc_B85:                                ; CODE XREF: NArchive::N7z::SetCoderProps2(CProps const &,unsigned __int64 const *,IUnknown *)+77j
.text:00000B85                 mov     ecx, [ebp+arg_0] ; this
.text:00000B88                 call    ?AreThereNonOptionalProps@CProps@@QBE_NXZ ; CProps::AreThereNonOptionalProps(void)
.text:00000B8D                 movzx   edx, al
.text:00000B90                 neg     edx
.text:00000B92                 sbb     edx, edx
.text:00000B94                 and     edx, 80070057h
.text:00000B9A                 mov     [ebp+var_20], edx
.text:00000B9D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000BA4                 lea     ecx, [ebp+var_14]
.text:00000BA7                 call    ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>(void)
.text:00000BAC                 mov     eax, [ebp+var_20]
.text:00000BAF
.text:00000BAF loc_BAF:                                ; CODE XREF: NArchive::N7z::SetCoderProps2(CProps const &,unsigned __int64 const *,IUnknown *)+A3j
.text:00000BAF                 push    edx
.text:00000BB0                 mov     ecx, ebp
.text:00000BB2                 push    eax
.text:00000BB3                 lea     edx, $LN8
.text:00000BB9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000BBE                 pop     eax
.text:00000BBF                 pop     edx
.text:00000BC0                 mov     ecx, [ebp+var_C]
.text:00000BC3                 mov     large fs:0, ecx
.text:00000BCA                 pop     ecx
.text:00000BCB                 pop     esi
.text:00000BCC                 add     esp, 20h
.text:00000BCF                 cmp     ebp, esp
.text:00000BD1                 call    __RTC_CheckEsp
.text:00000BD6                 mov     esp, ebp
.text:00000BD8                 pop     ebp
.text:00000BD9                 retn    0Ch
.text:00000BD9 ?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z endp
.text:00000BD9
.text:00000BD9 ; ---------------------------------------------------------------------------
.text:00000BDC $LN8            dd 1                    ; DATA XREF: NArchive::N7z::SetCoderProps2(CProps const &,unsigned __int64 const *,IUnknown *)+D3o
.text:00000BE0                 dd offset $LN7_0
.text:00000BE4 $LN7_0          dd 0FFFFFFECh, 4        ; DATA XREF: .text:00000BE0o
.text:00000BEC                 dd offset $LN5_0        ; "setCoderProperties"
.text:00000BF0 $LN5_0          db 'setCoderProperties',0 ; DATA XREF: .text:00000BECo
.text:00000C03                 align 10h
.text:00000C10
.text:00000C10 ; =============== S U B R O U T I N E =======================================
.text:00000C10
.text:00000C10 ; Attributes: bp-based frame
.text:00000C10
.text:00000C10 ; __int32 __stdcall NArchive::N7z::CSequentialOutTempBufferImp2::Write(NArchive::N7z::CSequentialOutTempBufferImp2 *this, const void *, unsigned __int64, unsigned int *)
.text:00000C10                 public ?Write@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGJPBXIPAI@Z
.text:00000C10 ?Write@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGJPBXIPAI@Z proc near
.text:00000C10                                         ; DATA XREF: .rdata:00004120o
.text:00000C10
.text:00000C10 this            = dword ptr  8
.text:00000C10 arg_4           = dword ptr  0Ch
.text:00000C10 arg_8           = qword ptr  10h
.text:00000C10
.text:00000C10                 push    ebp
.text:00000C11                 mov     ebp, esp
.text:00000C13                 mov     eax, dword ptr [ebp+arg_8]
.text:00000C16                 push    eax             ; unsigned int
.text:00000C17                 mov     ecx, [ebp+arg_4]
.text:00000C1A                 push    ecx             ; void *
.text:00000C1B                 mov     edx, [ebp+this]
.text:00000C1E                 mov     ecx, [edx+8]    ; this
.text:00000C21                 call    ?Write@CInOutTempBuffer@@QAE_NPBXI@Z ; CInOutTempBuffer::Write(void const *,uint)
.text:00000C26                 movzx   eax, al
.text:00000C29                 test    eax, eax
.text:00000C2B                 jnz     short loc_C43
.text:00000C2D                 cmp     dword ptr [ebp+arg_8+4], 0
.text:00000C31                 jz      short loc_C3C
.text:00000C33                 mov     ecx, dword ptr [ebp+arg_8+4]
.text:00000C36                 mov     dword ptr [ecx], 0
.text:00000C3C
.text:00000C3C loc_C3C:                                ; CODE XREF: NArchive::N7z::CSequentialOutTempBufferImp2::Write(void const *,uint,uint *)+21j
.text:00000C3C                 mov     eax, 80004005h
.text:00000C41                 jmp     short loc_C6E
.text:00000C43 ; ---------------------------------------------------------------------------
.text:00000C43
.text:00000C43 loc_C43:                                ; CODE XREF: NArchive::N7z::CSequentialOutTempBufferImp2::Write(void const *,uint,uint *)+1Bj
.text:00000C43                 cmp     dword ptr [ebp+arg_8+4], 0
.text:00000C47                 jz      short loc_C51
.text:00000C49                 mov     edx, dword ptr [ebp+arg_8+4]
.text:00000C4C                 mov     eax, dword ptr [ebp+arg_8]
.text:00000C4F                 mov     [edx], eax
.text:00000C51
.text:00000C51 loc_C51:                                ; CODE XREF: NArchive::N7z::CSequentialOutTempBufferImp2::Write(void const *,uint,uint *)+37j
.text:00000C51                 mov     ecx, [ebp+this]
.text:00000C54                 cmp     dword ptr [ecx+0Ch], 0
.text:00000C58                 jz      short loc_C6C
.text:00000C5A                 mov     edx, dword ptr [ebp+arg_8]
.text:00000C5D                 xor     eax, eax
.text:00000C5F                 push    eax
.text:00000C60                 push    edx             ; unsigned __int64
.text:00000C61                 mov     ecx, [ebp+this]
.text:00000C64                 mov     ecx, [ecx+0Ch]  ; this
.text:00000C67                 call    ?AddOutSize@CMtEncMultiProgress@N7z@NArchive@@QAEX_K@Z ; NArchive::N7z::CMtEncMultiProgress::AddOutSize(unsigned __int64)
.text:00000C6C
.text:00000C6C loc_C6C:                                ; CODE XREF: NArchive::N7z::CSequentialOutTempBufferImp2::Write(void const *,uint,uint *)+48j
.text:00000C6C                 xor     eax, eax
.text:00000C6E
.text:00000C6E loc_C6E:                                ; CODE XREF: NArchive::N7z::CSequentialOutTempBufferImp2::Write(void const *,uint,uint *)+31j
.text:00000C6E                 cmp     ebp, esp
.text:00000C70                 call    __RTC_CheckEsp
.text:00000C75                 pop     ebp
.text:00000C76                 retn    10h
.text:00000C76 ?Write@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGJPBXIPAI@Z endp
.text:00000C76
.text:00000C76 ; ---------------------------------------------------------------------------
.text:00000C79                 align 10h
.text:00000C80
.text:00000C80 ; =============== S U B R O U T I N E =======================================
.text:00000C80
.text:00000C80 ; Attributes: bp-based frame
.text:00000C80
.text:00000C80 ; __int32 __stdcall NArchive::N7z::CSequentialOutMtNotify::Write(NArchive::N7z::CSequentialOutMtNotify *this, const void *, unsigned __int64, unsigned int *)
.text:00000C80                 public ?Write@CSequentialOutMtNotify@N7z@NArchive@@UAGJPBXIPAI@Z
.text:00000C80 ?Write@CSequentialOutMtNotify@N7z@NArchive@@UAGJPBXIPAI@Z proc near
.text:00000C80                                         ; DATA XREF: .rdata:00004320o
.text:00000C80
.text:00000C80 var_14          = dword ptr -14h
.text:00000C80 var_10          = dword ptr -10h
.text:00000C80 var_C           = dword ptr -0Ch
.text:00000C80 var_8           = dword ptr -8
.text:00000C80 var_4           = dword ptr -4
.text:00000C80 this            = dword ptr  8
.text:00000C80 arg_4           = dword ptr  0Ch
.text:00000C80 arg_8           = qword ptr  10h
.text:00000C80
.text:00000C80                 push    ebp
.text:00000C81                 mov     ebp, esp
.text:00000C83                 sub     esp, 14h
.text:00000C86                 push    esi
.text:00000C87                 mov     eax, 0CCCCCCCCh
.text:00000C8C                 mov     [ebp+var_14], eax
.text:00000C8F                 mov     [ebp+var_10], eax
.text:00000C92                 mov     [ebp+var_C], eax
.text:00000C95                 mov     [ebp+var_8], eax
.text:00000C98                 mov     [ebp+var_4], eax
.text:00000C9B                 mov     [ebp+var_8], 0
.text:00000CA2                 mov     ecx, [ebp+this]
.text:00000CA5                 add     ecx, 8
.text:00000CA8                 call    ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->(void)
.text:00000CAD                 mov     [ebp+var_14], eax
.text:00000CB0                 mov     esi, esp
.text:00000CB2                 lea     eax, [ebp+var_8]
.text:00000CB5                 push    eax
.text:00000CB6                 mov     ecx, dword ptr [ebp+arg_8]
.text:00000CB9                 push    ecx
.text:00000CBA                 mov     edx, [ebp+arg_4]
.text:00000CBD                 push    edx
.text:00000CBE                 mov     eax, [ebp+var_14]
.text:00000CC1                 push    eax
.text:00000CC2                 mov     ecx, [ebp+var_14]
.text:00000CC5                 mov     edx, [ecx]
.text:00000CC7                 mov     eax, [edx+0Ch]
.text:00000CCA                 call    eax
.text:00000CCC                 cmp     esi, esp
.text:00000CCE                 call    __RTC_CheckEsp
.text:00000CD3                 mov     [ebp+var_10], eax
.text:00000CD6                 cmp     dword ptr [ebp+arg_8+4], 0
.text:00000CDA                 jz      short loc_CE4
.text:00000CDC                 mov     ecx, dword ptr [ebp+arg_8+4]
.text:00000CDF                 mov     edx, [ebp+var_8]
.text:00000CE2                 mov     [ecx], edx
.text:00000CE4
.text:00000CE4 loc_CE4:                                ; CODE XREF: NArchive::N7z::CSequentialOutMtNotify::Write(void const *,uint,uint *)+5Aj
.text:00000CE4                 mov     eax, [ebp+this]
.text:00000CE7                 cmp     dword ptr [eax+0Ch], 0
.text:00000CEB                 jz      short loc_CFF
.text:00000CED                 mov     ecx, dword ptr [ebp+arg_8]
.text:00000CF0                 xor     edx, edx
.text:00000CF2                 push    edx
.text:00000CF3                 push    ecx             ; unsigned __int64
.text:00000CF4                 mov     eax, [ebp+this]
.text:00000CF7                 mov     ecx, [eax+0Ch]  ; this
.text:00000CFA                 call    ?AddOutSize@CMtEncMultiProgress@N7z@NArchive@@QAEX_K@Z ; NArchive::N7z::CMtEncMultiProgress::AddOutSize(unsigned __int64)
.text:00000CFF
.text:00000CFF loc_CFF:                                ; CODE XREF: NArchive::N7z::CSequentialOutMtNotify::Write(void const *,uint,uint *)+6Bj
.text:00000CFF                 mov     eax, [ebp+var_10]
.text:00000D02                 push    edx
.text:00000D03                 mov     ecx, ebp
.text:00000D05                 push    eax
.text:00000D06                 lea     edx, $LN7_1
.text:00000D0C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000D11                 pop     eax
.text:00000D12                 pop     edx
.text:00000D13                 pop     esi
.text:00000D14                 add     esp, 14h
.text:00000D17                 cmp     ebp, esp
.text:00000D19                 call    __RTC_CheckEsp
.text:00000D1E                 mov     esp, ebp
.text:00000D20                 pop     ebp
.text:00000D21                 retn    10h
.text:00000D21 ?Write@CSequentialOutMtNotify@N7z@NArchive@@UAGJPBXIPAI@Z endp
.text:00000D21
.text:00000D21 ; ---------------------------------------------------------------------------
.text:00000D24 $LN7_1          dd 1                    ; DATA XREF: NArchive::N7z::CSequentialOutMtNotify::Write(void const *,uint,uint *)+86o
.text:00000D28                 dd offset $LN6_1
.text:00000D2C $LN6_1          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000D28o
.text:00000D34                 dd offset $LN5_2        ; "realProcessed"
.text:00000D38 $LN5_2          db 'realProcessed',0    ; DATA XREF: .text:00000D34o
.text:00000D46                 align 10h
.text:00000D50
.text:00000D50 ; =============== S U B R O U T I N E =======================================
.text:00000D50
.text:00000D50 ; Attributes: bp-based frame
.text:00000D50
.text:00000D50 ; int __stdcall NArchive::N7z::CEncoder::Encode(struct ISequentialInStream *, unsigned __int64 *, struct NArchive::N7z::CFolder *, int, int, struct ISequentialOutStream *, int, struct ICompressProgressInfo *)
.text:00000D50                 public ?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z
.text:00000D50 ?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z proc near
.text:00000D50
.text:00000D50 var_190         = dword ptr -190h
.text:00000D50 var_18C         = dword ptr -18Ch
.text:00000D50 var_188         = dword ptr -188h
.text:00000D50 var_184         = dword ptr -184h
.text:00000D50 var_180         = dword ptr -180h
.text:00000D50 var_17C         = dword ptr -17Ch
.text:00000D50 var_178         = dword ptr -178h
.text:00000D50 var_174         = dword ptr -174h
.text:00000D50 var_170         = dword ptr -170h
.text:00000D50 var_16C         = dword ptr -16Ch
.text:00000D50 var_168         = dword ptr -168h
.text:00000D50 var_164         = dword ptr -164h
.text:00000D50 var_160         = dword ptr -160h
.text:00000D50 var_15C         = dword ptr -15Ch
.text:00000D50 var_158         = dword ptr -158h
.text:00000D50 var_154         = dword ptr -154h
.text:00000D50 var_150         = dword ptr -150h
.text:00000D50 var_14C         = dword ptr -14Ch
.text:00000D50 var_148         = dword ptr -148h
.text:00000D50 var_144         = dword ptr -144h
.text:00000D50 var_140         = dword ptr -140h
.text:00000D50 var_13C         = dword ptr -13Ch
.text:00000D50 var_138         = dword ptr -138h
.text:00000D50 var_134         = dword ptr -134h
.text:00000D50 var_130         = dword ptr -130h
.text:00000D50 var_12C         = dword ptr -12Ch
.text:00000D50 var_128         = dword ptr -128h
.text:00000D50 var_124         = dword ptr -124h
.text:00000D50 var_120         = dword ptr -120h
.text:00000D50 var_11C         = dword ptr -11Ch
.text:00000D50 var_118         = dword ptr -118h
.text:00000D50 var_114         = dword ptr -114h
.text:00000D50 var_10D         = byte ptr -10Dh
.text:00000D50 var_10C         = dword ptr -10Ch
.text:00000D50 var_104         = byte ptr -104h
.text:00000D50 var_FC          = dword ptr -0FCh
.text:00000D50 var_F8          = dword ptr -0F8h
.text:00000D50 var_F0          = byte ptr -0F0h
.text:00000D50 var_E4          = byte ptr -0E4h
.text:00000D50 var_DC          = dword ptr -0DCh
.text:00000D50 var_D4          = byte ptr -0D4h
.text:00000D50 var_C0          = dword ptr -0C0h
.text:00000D50 var_B4          = byte ptr -0B4h
.text:00000D50 var_AC          = dword ptr -0ACh
.text:00000D50 var_A4          = byte ptr -0A4h
.text:00000D50 var_9C          = dword ptr -9Ch
.text:00000D50 var_94          = byte ptr -94h
.text:00000D50 var_88          = dword ptr -88h
.text:00000D50 var_80          = dword ptr -80h
.text:00000D50 var_7C          = dword ptr -7Ch
.text:00000D50 var_78          = dword ptr -78h
.text:00000D50 var_70          = byte ptr -70h
.text:00000D50 var_5C          = byte ptr -5Ch
.text:00000D50 var_48          = byte ptr -48h
.text:00000D50 var_34          = byte ptr -34h
.text:00000D50 var_2C          = dword ptr -2Ch
.text:00000D50 var_24          = byte ptr -24h
.text:00000D50 var_1C          = dword ptr -1Ch
.text:00000D50 var_18          = dword ptr -18h
.text:00000D50 var_14          = dword ptr -14h
.text:00000D50 var_10          = dword ptr -10h
.text:00000D50 var_C           = dword ptr -0Ch
.text:00000D50 var_4           = dword ptr -4
.text:00000D50 arg_0           = dword ptr  8
.text:00000D50 arg_4           = dword ptr  0Ch
.text:00000D50 arg_8           = dword ptr  10h
.text:00000D50 arg_C           = dword ptr  14h
.text:00000D50 arg_10          = dword ptr  18h
.text:00000D50 arg_14          = dword ptr  1Ch
.text:00000D50 arg_18          = dword ptr  20h
.text:00000D50 arg_1C          = dword ptr  24h
.text:00000D50
.text:00000D50                 push    ebp
.text:00000D51                 mov     ebp, esp
.text:00000D53                 push    0FFFFFFFFh
.text:00000D55                 push    offset __ehhandler$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z
.text:00000D5A                 mov     eax, large fs:0
.text:00000D60                 push    eax
.text:00000D61                 sub     esp, 184h
.text:00000D67                 push    esi
.text:00000D68                 push    edi
.text:00000D69                 push    ecx
.text:00000D6A                 lea     edi, [ebp+var_190]
.text:00000D70                 mov     ecx, 61h ; 'a'
.text:00000D75                 mov     eax, 0CCCCCCCCh
.text:00000D7A                 rep stosd
.text:00000D7C                 pop     ecx
.text:00000D7D                 mov     eax, dword ptr ds:___security_cookie
.text:00000D82                 xor     eax, ebp
.text:00000D84                 push    eax
.text:00000D85                 lea     eax, [ebp+var_C]
.text:00000D88                 mov     large fs:0, eax
.text:00000D8E                 mov     [ebp+var_10], ecx
.text:00000D91                 mov     ecx, [ebp+var_10] ; this
.text:00000D94                 call    ?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ ; NArchive::N7z::CEncoder::EncoderConstr(void)
.text:00000D99                 mov     [ebp+var_14], eax
.text:00000D9C                 cmp     [ebp+var_14], 0
.text:00000DA0                 jz      short loc_DAA
.text:00000DA2                 mov     eax, [ebp+var_14]
.text:00000DA5                 jmp     loc_18AF
.text:00000DAA ; ---------------------------------------------------------------------------
.text:00000DAA
.text:00000DAA loc_DAA:                                ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+50j
.text:00000DAA                 mov     ecx, [ebp+var_10]
.text:00000DAD                 add     ecx, 0Ch
.text:00000DB0                 call    ??7?$CMyComPtr@UIUnknown@@@@QBE_NXZ ; CMyComPtr<IUnknown>::operator!(void)
.text:00000DB5                 movzx   eax, al
.text:00000DB8                 test    eax, eax
.text:00000DBA                 jz      short loc_DD9
.text:00000DBC                 mov     ecx, [ebp+arg_4]
.text:00000DBF                 push    ecx             ; unsigned __int64 *
.text:00000DC0                 mov     ecx, [ebp+var_10] ; this
.text:00000DC3                 call    ?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z ; NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)
.text:00000DC8                 mov     [ebp+var_18], eax
.text:00000DCB                 cmp     [ebp+var_18], 0
.text:00000DCF                 jz      short loc_DD9
.text:00000DD1                 mov     eax, [ebp+var_18]
.text:00000DD4                 jmp     loc_18AF
.text:00000DD9 ; ---------------------------------------------------------------------------
.text:00000DD9
.text:00000DD9 loc_DD9:                                ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+6Aj
.text:00000DD9                                         ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+7Fj
.text:00000DD9                 mov     edx, [ebp+var_10]
.text:00000DDC                 mov     eax, [edx+8]
.text:00000DDF                 mov     ecx, [ebp+var_10]
.text:00000DE2                 mov     ecx, [ecx+8]
.text:00000DE5                 mov     edx, [eax]
.text:00000DE7                 mov     esi, esp
.text:00000DE9                 mov     eax, [edx+10h]
.text:00000DEC                 call    eax
.text:00000DEE                 cmp     esi, esp
.text:00000DF0                 call    __RTC_CheckEsp
.text:00000DF5                 mov     [ebp+var_1C], 0
.text:00000DFC                 lea     ecx, [ebp+var_24]
.text:00000DFF                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(void)
.text:00000E04                 mov     [ebp+var_4], 0
.text:00000E0B                 mov     [ebp+var_2C], 0
.text:00000E12                 lea     ecx, [ebp+var_34]
.text:00000E15                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00000E1A                 mov     byte ptr [ebp+var_4], 1
.text:00000E1E                 lea     ecx, [ebp+var_48]
.text:00000E21                 call    ??0?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ ; CObjectVector<CInOutTempBuffer>::CObjectVector<CInOutTempBuffer>(void)
.text:00000E26                 mov     byte ptr [ebp+var_4], 2
.text:00000E2A                 lea     ecx, [ebp+var_5C]
.text:00000E2D                 call    ??0?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>(void)
.text:00000E32                 mov     byte ptr [ebp+var_4], 3
.text:00000E36                 lea     ecx, [ebp+var_70]
.text:00000E39                 call    ??0?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream>>::CObjectVector<CMyComPtr<ISequentialOutStream>>(void)
.text:00000E3E                 mov     byte ptr [ebp+var_4], 4
.text:00000E42                 mov     ecx, [ebp+var_10]
.text:00000E45                 add     ecx, 40h ; '@'
.text:00000E48                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:00000E4D                 mov     [ebp+var_78], eax
.text:00000E50                 mov     [ebp+var_7C], 1
.text:00000E57                 jmp     short loc_E62
.text:00000E59 ; ---------------------------------------------------------------------------
.text:00000E59
.text:00000E59 loc_E59:                                ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+13Dj
.text:00000E59                 mov     ecx, [ebp+var_7C]
.text:00000E5C                 add     ecx, 1
.text:00000E5F                 mov     [ebp+var_7C], ecx
.text:00000E62
.text:00000E62 loc_E62:                                ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+107j
.text:00000E62                 mov     ecx, [ebp+var_10]
.text:00000E65                 add     ecx, 58h ; 'X'
.text:00000E68                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00000E6D                 cmp     [ebp+var_7C], eax
.text:00000E70                 jnb     short loc_E8F
.text:00000E72                 lea     ecx, [ebp+var_48]
.text:00000E75                 call    ?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ ; CObjectVector<CInOutTempBuffer>::AddNew(void)
.text:00000E7A                 mov     [ebp+var_80], eax
.text:00000E7D                 mov     ecx, [ebp+var_80] ; this
.text:00000E80                 call    ?Create@CInOutTempBuffer@@QAEXXZ ; CInOutTempBuffer::Create(void)
.text:00000E85                 mov     ecx, [ebp+var_80] ; this
.text:00000E88                 call    ?InitWriting@CInOutTempBuffer@@QAEXXZ ; CInOutTempBuffer::InitWriting(void)
.text:00000E8D                 jmp     short loc_E59
.text:00000E8F ; ---------------------------------------------------------------------------
.text:00000E8F
.text:00000E8F loc_E8F:                                ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+120j
.text:00000E8F                 mov     [ebp+var_7C], 1
.text:00000E96                 jmp     short loc_EA1
.text:00000E98 ; ---------------------------------------------------------------------------
.text:00000E98
.text:00000E98 loc_E98:                                ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+219j
.text:00000E98                 mov     edx, [ebp+var_7C]
.text:00000E9B                 add     edx, 1
.text:00000E9E                 mov     [ebp+var_7C], edx
.text:00000EA1
.text:00000EA1 loc_EA1:                                ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+146j
.text:00000EA1                 mov     ecx, [ebp+var_10]
.text:00000EA4                 add     ecx, 58h ; 'X'
.text:00000EA7                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00000EAC                 cmp     [ebp+var_7C], eax
.text:00000EAF                 jnb     loc_F6E
.text:00000EB5                 push    10h             ; unsigned int
.text:00000EB7                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000EBC                 add     esp, 4
.text:00000EBF                 mov     [ebp+var_134], eax
.text:00000EC5                 mov     byte ptr [ebp+var_4], 5
.text:00000EC9                 cmp     [ebp+var_134], 0
.text:00000ED0                 jz      short loc_EE5
.text:00000ED2                 mov     ecx, [ebp+var_134] ; this
.text:00000ED8                 call    ??0CSequentialOutTempBufferImp2@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CSequentialOutTempBufferImp2::CSequentialOutTempBufferImp2(void)
.text:00000EDD                 mov     [ebp+var_16C], eax
.text:00000EE3                 jmp     short loc_EEF
.text:00000EE5 ; ---------------------------------------------------------------------------
.text:00000EE5
.text:00000EE5 loc_EE5:                                ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+180j
.text:00000EE5                 mov     [ebp+var_16C], 0
.text:00000EEF
.text:00000EEF loc_EEF:                                ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+193j
.text:00000EEF                 mov     eax, [ebp+var_16C]
.text:00000EF5                 mov     [ebp+var_130], eax
.text:00000EFB                 mov     byte ptr [ebp+var_4], 4
.text:00000EFF                 mov     ecx, [ebp+var_130]
.text:00000F05                 mov     [ebp+var_88], ecx
.text:00000F0B                 mov     edx, [ebp+var_88]
.text:00000F11                 push    edx
.text:00000F12                 lea     ecx, [ebp+var_94]
.text:00000F18                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)
.text:00000F1D                 mov     byte ptr [ebp+var_4], 6
.text:00000F21                 mov     eax, [ebp+var_7C]
.text:00000F24                 sub     eax, 1
.text:00000F27                 push    eax
.text:00000F28                 lea     ecx, [ebp+var_48]
.text:00000F2B                 call    ??A?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@I@Z ; CObjectVector<CInOutTempBuffer>::operator[](uint)
.text:00000F30                 push    eax             ; struct CInOutTempBuffer *
.text:00000F31                 mov     ecx, [ebp+var_88] ; this
.text:00000F37                 call    ?Init@CSequentialOutTempBufferImp2@N7z@NArchive@@QAEXPAVCInOutTempBuffer@@@Z ; NArchive::N7z::CSequentialOutTempBufferImp2::Init(CInOutTempBuffer *)
.text:00000F3C                 lea     ecx, [ebp+var_94]
.text:00000F42                 push    ecx
.text:00000F43                 lea     ecx, [ebp+var_70]
.text:00000F46                 call    ?Add@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEIABV?$CMyComPtr@UISequentialOutStream@@@@@Z ; CObjectVector<CMyComPtr<ISequentialOutStream>>::Add(CMyComPtr<ISequentialOutStream> const &)
.text:00000F4B                 lea     edx, [ebp+var_88]
.text:00000F51                 push    edx
.text:00000F52                 lea     ecx, [ebp+var_5C]
.text:00000F55                 call    ?Add@?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAEIABQAVCSequentialOutTempBufferImp2@N7z@NArchive@@@Z ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::Add(NArchive::N7z::CSequentialOutTempBufferImp2 * const &)
.text:00000F5A                 mov     byte ptr [ebp+var_4], 4
.text:00000F5E                 lea     ecx, [ebp+var_94]
.text:00000F64                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00000F69                 jmp     loc_E98
.text:00000F6E ; ---------------------------------------------------------------------------
.text:00000F6E
.text:00000F6E loc_F6E:                                ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+15Fj
.text:00000F6E                 mov     [ebp+var_7C], 0
.text:00000F75                 jmp     short loc_F80
.text:00000F77 ; ---------------------------------------------------------------------------
.text:00000F77
.text:00000F77 loc_F77:                                ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+25Ej
.text:00000F77                 mov     eax, [ebp+var_7C]
.text:00000F7A                 add     eax, 1
.text:00000F7D                 mov     [ebp+var_7C], eax
.text:00000F80
.text:00000F80 loc_F80:                                ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+225j
.text:00000F80                 mov     ecx, [ebp+var_7C]
.text:00000F83                 cmp     ecx, [ebp+var_78]
.text:00000F86                 jnb     short loc_FB0
.text:00000F88                 mov     esi, esp
.text:00000F8A                 push    0
.text:00000F8C                 push    0
.text:00000F8E                 mov     edx, [ebp+var_7C]
.text:00000F91                 push    edx
.text:00000F92                 mov     eax, [ebp+var_10]
.text:00000F95                 mov     ecx, [eax+8]
.text:00000F98                 mov     edx, [ebp+var_10]
.text:00000F9B                 mov     eax, [edx+8]
.text:00000F9E                 mov     edx, [ecx]
.text:00000FA0                 mov     ecx, eax
.text:00000FA2                 mov     eax, [edx+14h]
.text:00000FA5                 call    eax
.text:00000FA7                 cmp     esi, esp
.text:00000FA9                 call    __RTC_CheckEsp
.text:00000FAE                 jmp     short loc_F77
.text:00000FB0 ; ---------------------------------------------------------------------------
.text:00000FB0
.text:00000FB0 loc_FB0:                                ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+236j
.text:00000FB0                 push    20h ; ' '       ; unsigned int
.text:00000FB2                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000FB7                 add     esp, 4
.text:00000FBA                 mov     [ebp+var_13C], eax
.text:00000FC0                 mov     byte ptr [ebp+var_4], 7
.text:00000FC4                 cmp     [ebp+var_13C], 0
.text:00000FCB                 jz      short loc_FE0
.text:00000FCD                 mov     ecx, [ebp+var_13C]
.text:00000FD3                 call    ??0CSequentialInStreamSizeCount2@@QAE@XZ ; CSequentialInStreamSizeCount2::CSequentialInStreamSizeCount2(void)
.text:00000FD8                 mov     [ebp+var_170], eax
.text:00000FDE                 jmp     short loc_FEA
.text:00000FE0 ; ---------------------------------------------------------------------------
.text:00000FE0
.text:00000FE0 loc_FE0:                                ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+27Bj
.text:00000FE0                 mov     [ebp+var_170], 0
.text:00000FEA
.text:00000FEA loc_FEA:                                ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+28Ej
.text:00000FEA                 mov     ecx, [ebp+var_170]
.text:00000FF0                 mov     [ebp+var_138], ecx
.text:00000FF6                 mov     byte ptr [ebp+var_4], 4
.text:00000FFA                 mov     edx, [ebp+var_138]
.text:00001000                 mov     [ebp+var_9C], edx
.text:00001006                 mov     eax, [ebp+var_9C]
.text:0000100C                 push    eax
.text:0000100D                 lea     ecx, [ebp+var_A4]
.text:00001013                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)
.text:00001018                 mov     byte ptr [ebp+var_4], 8
.text:0000101C                 mov     [ebp+var_AC], 0
.text:00001026                 lea     ecx, [ebp+var_B4]
.text:0000102C                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00001031                 mov     byte ptr [ebp+var_4], 9
.text:00001035                 mov     ecx, [ebp+arg_0]
.text:00001038                 push    ecx             ; struct ISequentialInStream *
.text:00001039                 mov     ecx, [ebp+var_9C] ; this
.text:0000103F                 call    ?Init@CSequentialInStreamSizeCount2@@QAEXPAUISequentialInStream@@@Z ; CSequentialInStreamSizeCount2::Init(ISequentialInStream *)
.text:00001044                 lea     ecx, [ebp+var_A4]
.text:0000104A                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:0000104F                 mov     [ebp+var_C0], eax
.text:00001055                 lea     ecx, [ebp+var_D4]
.text:0000105B                 call    ??0?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::CRecordVector<ISequentialOutStream *>(void)
.text:00001060                 mov     byte ptr [ebp+var_4], 0Ah
.text:00001064                 mov     edx, [ebp+arg_8]
.text:00001067                 push    edx             ; struct NArchive::N7z::CFolder *
.text:00001068                 mov     ecx, [ebp+var_10] ; this
.text:0000106B                 call    ?SetFolder@CEncoder@N7z@NArchive@@AAEXAAUCFolder@23@@Z ; NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)
.text:00001070                 mov     [ebp+var_7C], 0
.text:00001077                 jmp     short loc_1082
.text:00001079 ; ---------------------------------------------------------------------------
.text:00001079
.text:00001079 loc_1079:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+550j
.text:00001079                 mov     eax, [ebp+var_7C]
.text:0000107C                 add     eax, 1
.text:0000107F                 mov     [ebp+var_7C], eax
.text:00001082
.text:00001082 loc_1082:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+327j
.text:00001082                 mov     ecx, [ebp+var_7C]
.text:00001085                 cmp     ecx, [ebp+var_78]
.text:00001088                 jnb     loc_12A5
.text:0000108E                 mov     esi, esp
.text:00001090                 mov     edx, [ebp+var_7C]
.text:00001093                 push    edx
.text:00001094                 mov     eax, [ebp+var_10]
.text:00001097                 mov     ecx, [eax+8]
.text:0000109A                 mov     edx, [ebp+var_10]
.text:0000109D                 mov     eax, [edx+8]
.text:000010A0                 mov     edx, [ecx]
.text:000010A2                 mov     ecx, eax
.text:000010A4                 mov     eax, [edx+8]
.text:000010A7                 call    eax
.text:000010A9                 cmp     esi, esp
.text:000010AB                 call    __RTC_CheckEsp
.text:000010B0                 mov     ecx, eax        ; this
.text:000010B2                 call    ?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ ; NCoderMixer2::CCoder::GetUnknown(void)
.text:000010B7                 mov     [ebp+var_DC], eax
.text:000010BD                 lea     ecx, [ebp+var_E4]
.text:000010C3                 call    ??0?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ ; CMyComPtr<ICryptoResetInitVector>::CMyComPtr<ICryptoResetInitVector>(void)
.text:000010C8                 mov     byte ptr [ebp+var_4], 0Bh
.text:000010CC                 lea     ecx, [ebp+var_E4]
.text:000010D2                 call    ??I?$CMyComPtr@UICryptoResetInitVector@@@@QAEPAPAUICryptoResetInitVector@@XZ ; CMyComPtr<ICryptoResetInitVector>::operator&(void)
.text:000010D7                 mov     esi, esp
.text:000010D9                 push    eax
.text:000010DA                 push    offset _IID_ICryptoResetInitVector
.text:000010DF                 mov     ecx, [ebp+var_DC]
.text:000010E5                 mov     edx, [ecx]
.text:000010E7                 mov     eax, [ebp+var_DC]
.text:000010ED                 push    eax
.text:000010EE                 mov     ecx, [edx]
.text:000010F0                 call    ecx
.text:000010F2                 cmp     esi, esp
.text:000010F4                 call    __RTC_CheckEsp
.text:000010F9                 lea     ecx, [ebp+var_E4]
.text:000010FF                 call    ??B?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ ; CMyComPtr<ICryptoResetInitVector>::operator ICryptoResetInitVector *(void)
.text:00001104                 test    eax, eax
.text:00001106                 jz      short loc_1136
.text:00001108                 lea     ecx, [ebp+var_E4]
.text:0000110E                 call    ??C?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ ; CMyComPtr<ICryptoResetInitVector>::operator->(void)
.text:00001113                 mov     [ebp+var_174], eax
.text:00001119                 mov     edx, [ebp+var_174]
.text:0000111F                 mov     eax, [edx]
.text:00001121                 mov     esi, esp
.text:00001123                 mov     ecx, [ebp+var_174]
.text:00001129                 push    ecx
.text:0000112A                 mov     edx, [eax+0Ch]
.text:0000112D                 call    edx
.text:0000112F                 cmp     esi, esp
.text:00001131                 call    __RTC_CheckEsp
.text:00001136
.text:00001136 loc_1136:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+3B6j
.text:00001136                 lea     ecx, [ebp+var_F0]
.text:0000113C                 call    ??0?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressWriteCoderProperties>::CMyComPtr<ICompressWriteCoderProperties>(void)
.text:00001141                 mov     byte ptr [ebp+var_4], 0Ch
.text:00001145                 lea     ecx, [ebp+var_F0]
.text:0000114B                 call    ??I?$CMyComPtr@UICompressWriteCoderProperties@@@@QAEPAPAUICompressWriteCoderProperties@@XZ ; CMyComPtr<ICompressWriteCoderProperties>::operator&(void)
.text:00001150                 mov     esi, esp
.text:00001152                 push    eax
.text:00001153                 push    offset _IID_ICompressWriteCoderProperties
.text:00001158                 mov     eax, [ebp+var_DC]
.text:0000115E                 mov     ecx, [eax]
.text:00001160                 mov     edx, [ebp+var_DC]
.text:00001166                 push    edx
.text:00001167                 mov     eax, [ecx]
.text:00001169                 call    eax
.text:0000116B                 cmp     esi, esp
.text:0000116D                 call    __RTC_CheckEsp
.text:00001172                 mov     ecx, [ebp+arg_8]
.text:00001175                 call    ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo *(void)
.text:0000117A                 mov     ecx, [ebp+var_78]
.text:0000117D                 sub     ecx, 1
.text:00001180                 sub     ecx, [ebp+var_7C]
.text:00001183                 imul    ecx, 18h
.text:00001186                 lea     edx, [eax+ecx+8]
.text:0000118A                 mov     [ebp+var_F8], edx
.text:00001190                 lea     ecx, [ebp+var_F0]
.text:00001196                 call    ??B?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ ; CMyComPtr<ICompressWriteCoderProperties>::operator ICompressWriteCoderProperties *(void)
.text:0000119B                 test    eax, eax
.text:0000119D                 jz      loc_1277
.text:000011A3                 push    14h             ; unsigned int
.text:000011A5                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000011AA                 add     esp, 4
.text:000011AD                 mov     [ebp+var_144], eax
.text:000011B3                 mov     byte ptr [ebp+var_4], 0Dh
.text:000011B7                 cmp     [ebp+var_144], 0
.text:000011BE                 jz      short loc_11D3
.text:000011C0                 mov     ecx, [ebp+var_144]
.text:000011C6                 call    ??0CDynBufSeqOutStream@@QAE@XZ ; CDynBufSeqOutStream::CDynBufSeqOutStream(void)
.text:000011CB                 mov     [ebp+var_178], eax
.text:000011D1                 jmp     short loc_11DD
.text:000011D3 ; ---------------------------------------------------------------------------
.text:000011D3
.text:000011D3 loc_11D3:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+46Ej
.text:000011D3                 mov     [ebp+var_178], 0
.text:000011DD
.text:000011DD loc_11DD:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+481j
.text:000011DD                 mov     eax, [ebp+var_178]
.text:000011E3                 mov     [ebp+var_140], eax
.text:000011E9                 mov     byte ptr [ebp+var_4], 0Ch
.text:000011ED                 mov     ecx, [ebp+var_140]
.text:000011F3                 mov     [ebp+var_FC], ecx
.text:000011F9                 mov     edx, [ebp+var_FC]
.text:000011FF                 push    edx
.text:00001200                 lea     ecx, [ebp+var_104]
.text:00001206                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)
.text:0000120B                 mov     byte ptr [ebp+var_4], 0Eh
.text:0000120F                 mov     ecx, [ebp+var_FC] ; this
.text:00001215                 call    ?Init@CDynBufSeqOutStream@@QAEXXZ ; CDynBufSeqOutStream::Init(void)
.text:0000121A                 lea     ecx, [ebp+var_F0]
.text:00001220                 call    ??C?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ ; CMyComPtr<ICompressWriteCoderProperties>::operator->(void)
.text:00001225                 mov     [ebp+var_17C], eax
.text:0000122B                 lea     ecx, [ebp+var_104]
.text:00001231                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00001236                 mov     esi, esp
.text:00001238                 push    eax
.text:00001239                 mov     eax, [ebp+var_17C]
.text:0000123F                 push    eax
.text:00001240                 mov     ecx, [ebp+var_17C]
.text:00001246                 mov     edx, [ecx]
.text:00001248                 mov     eax, [edx+0Ch]
.text:0000124B                 call    eax
.text:0000124D                 cmp     esi, esp
.text:0000124F                 call    __RTC_CheckEsp
.text:00001254                 mov     ecx, [ebp+var_F8]
.text:0000125A                 push    ecx
.text:0000125B                 mov     ecx, [ebp+var_FC]
.text:00001261                 call    ?CopyToBuffer@CDynBufSeqOutStream@@QBEXAAV?$CBuffer@E@@@Z ; CDynBufSeqOutStream::CopyToBuffer(CBuffer<uchar> &)
.text:00001266                 mov     byte ptr [ebp+var_4], 0Ch
.text:0000126A                 lea     ecx, [ebp+var_104]
.text:00001270                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001275                 jmp     short loc_1282
.text:00001277 ; ---------------------------------------------------------------------------
.text:00001277
.text:00001277 loc_1277:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+44Dj
.text:00001277                 mov     ecx, [ebp+var_F8]
.text:0000127D                 call    ?Free@?$CBuffer@E@@QAEXXZ ; CBuffer<uchar>::Free(void)
.text:00001282
.text:00001282 loc_1282:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+525j
.text:00001282                 mov     byte ptr [ebp+var_4], 0Bh
.text:00001286                 lea     ecx, [ebp+var_F0]
.text:0000128C                 call    ??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressWriteCoderProperties>::~CMyComPtr<ICompressWriteCoderProperties>(void)
.text:00001291                 mov     byte ptr [ebp+var_4], 0Ah
.text:00001295                 lea     ecx, [ebp+var_E4]
.text:0000129B                 call    ??1?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ ; CMyComPtr<ICryptoResetInitVector>::~CMyComPtr<ICryptoResetInitVector>(void)
.text:000012A0                 jmp     loc_1079
.text:000012A5 ; ---------------------------------------------------------------------------
.text:000012A5
.text:000012A5 loc_12A5:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+338j
.text:000012A5                 mov     esi, esp
.text:000012A7                 push    0
.text:000012A9                 mov     edx, [ebp+var_10]
.text:000012AC                 mov     eax, [edx+8]
.text:000012AF                 mov     ecx, [ebp+var_10]
.text:000012B2                 mov     ecx, [ecx+8]
.text:000012B5                 mov     edx, [eax]
.text:000012B7                 mov     eax, [edx+0Ch]
.text:000012BA                 call    eax
.text:000012BC                 cmp     esi, esp
.text:000012BE                 call    __RTC_CheckEsp
.text:000012C3                 mov     ecx, [ebp+var_10]
.text:000012C6                 mov     edx, [ecx+8]
.text:000012C9                 mov     eax, [edx+60h]
.text:000012CC                 mov     [ebp+var_10C], eax
.text:000012D2                 mov     [ebp+var_10D], 0
.text:000012D9                 mov     ecx, [ebp+var_10C]
.text:000012DF                 push    ecx             ; unsigned int
.text:000012E0                 mov     edx, [ebp+var_10]
.text:000012E3                 mov     ecx, [edx+8]    ; this
.text:000012E6                 call    ?Is_PackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder(uint)
.text:000012EB                 movzx   eax, al
.text:000012EE                 test    eax, eax
.text:000012F0                 jnz     short loc_12F9
.text:000012F2                 mov     [ebp+var_10D], 1
.text:000012F9
.text:000012F9 loc_12F9:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+5A0j
.text:000012F9                 movzx   ecx, [ebp+var_10D]
.text:00001300                 test    ecx, ecx
.text:00001302                 jz      loc_142E
.text:00001308                 push    30h ; '0'       ; unsigned int
.text:0000130A                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000130F                 add     esp, 4
.text:00001312                 mov     [ebp+var_14C], eax
.text:00001318                 mov     byte ptr [ebp+var_4], 0Fh
.text:0000131C                 cmp     [ebp+var_14C], 0
.text:00001323                 jz      short loc_1338
.text:00001325                 mov     ecx, [ebp+var_14C] ; this
.text:0000132B                 call    ??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CMtEncMultiProgress::CMtEncMultiProgress(void)
.text:00001330                 mov     [ebp+var_180], eax
.text:00001336                 jmp     short loc_1342
.text:00001338 ; ---------------------------------------------------------------------------
.text:00001338
.text:00001338 loc_1338:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+5D3j
.text:00001338                 mov     [ebp+var_180], 0
.text:00001342
.text:00001342 loc_1342:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+5E6j
.text:00001342                 mov     edx, [ebp+var_180]
.text:00001348                 mov     [ebp+var_148], edx
.text:0000134E                 mov     byte ptr [ebp+var_4], 0Ah
.text:00001352                 mov     eax, [ebp+var_148]
.text:00001358                 mov     [ebp+var_1C], eax
.text:0000135B                 mov     ecx, [ebp+var_1C]
.text:0000135E                 push    ecx
.text:0000135F                 lea     ecx, [ebp+var_24]
.text:00001362                 call    ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ; CMyComPtr<ICompressProgressInfo>::operator=(ICompressProgressInfo *)
.text:00001367                 mov     edx, [ebp+arg_1C]
.text:0000136A                 push    edx             ; struct ICompressProgressInfo *
.text:0000136B                 mov     ecx, [ebp+var_1C] ; this
.text:0000136E                 call    ?Init@CMtEncMultiProgress@N7z@NArchive@@QAEXPAUICompressProgressInfo@@@Z ; NArchive::N7z::CMtEncMultiProgress::Init(ICompressProgressInfo *)
.text:00001373                 push    10h             ; unsigned int
.text:00001375                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000137A                 add     esp, 4
.text:0000137D                 mov     [ebp+var_154], eax
.text:00001383                 mov     byte ptr [ebp+var_4], 10h
.text:00001387                 cmp     [ebp+var_154], 0
.text:0000138E                 jz      short loc_13A3
.text:00001390                 mov     ecx, [ebp+var_154] ; this
.text:00001396                 call    ??0CSequentialOutMtNotify@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CSequentialOutMtNotify::CSequentialOutMtNotify(void)
.text:0000139B                 mov     [ebp+var_184], eax
.text:000013A1                 jmp     short loc_13AD
.text:000013A3 ; ---------------------------------------------------------------------------
.text:000013A3
.text:000013A3 loc_13A3:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+63Ej
.text:000013A3                 mov     [ebp+var_184], 0
.text:000013AD
.text:000013AD loc_13AD:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+651j
.text:000013AD                 mov     eax, [ebp+var_184]
.text:000013B3                 mov     [ebp+var_150], eax
.text:000013B9                 mov     byte ptr [ebp+var_4], 0Ah
.text:000013BD                 mov     ecx, [ebp+var_150]
.text:000013C3                 mov     [ebp+var_2C], ecx
.text:000013C6                 mov     edx, [ebp+var_2C]
.text:000013C9                 push    edx
.text:000013CA                 lea     ecx, [ebp+var_34]
.text:000013CD                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:000013D2                 mov     eax, [ebp+arg_14]
.text:000013D5                 push    eax
.text:000013D6                 mov     ecx, [ebp+var_2C]
.text:000013D9                 add     ecx, 8
.text:000013DC                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:000013E1                 mov     ecx, [ebp+var_2C]
.text:000013E4                 mov     edx, [ebp+var_1C]
.text:000013E7                 mov     [ecx+0Ch], edx
.text:000013EA                 mov     [ebp+var_114], 0
.text:000013F4                 jmp     short loc_1405
.text:000013F6 ; ---------------------------------------------------------------------------
.text:000013F6
.text:000013F6 loc_13F6:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+6DCj
.text:000013F6                 mov     eax, [ebp+var_114]
.text:000013FC                 add     eax, 1
.text:000013FF                 mov     [ebp+var_114], eax
.text:00001405
.text:00001405 loc_1405:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+6A4j
.text:00001405                 lea     ecx, [ebp+var_5C]
.text:00001408                 call    ?Size@?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::Size(void)
.text:0000140D                 cmp     [ebp+var_114], eax
.text:00001413                 jnb     short loc_142E
.text:00001415                 mov     ecx, [ebp+var_114]
.text:0000141B                 push    ecx
.text:0000141C                 lea     ecx, [ebp+var_5C]
.text:0000141F                 call    ??A?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAEAAPAVCSequentialOutTempBufferImp2@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::operator[](uint)
.text:00001424                 mov     edx, [eax]
.text:00001426                 mov     eax, [ebp+var_1C]
.text:00001429                 mov     [edx+0Ch], eax
.text:0000142C                 jmp     short loc_13F6
.text:0000142E ; ---------------------------------------------------------------------------
.text:0000142E
.text:0000142E loc_142E:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+5B2j
.text:0000142E                                         ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+6C3j
.text:0000142E                 mov     ecx, [ebp+var_10]
.text:00001431                 add     ecx, 58h ; 'X'
.text:00001434                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00001439                 test    eax, eax
.text:0000143B                 jz      loc_1502
.text:00001441                 push    18h             ; unsigned int
.text:00001443                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001448                 add     esp, 4
.text:0000144B                 mov     [ebp+var_15C], eax
.text:00001451                 mov     byte ptr [ebp+var_4], 11h
.text:00001455                 cmp     [ebp+var_15C], 0
.text:0000145C                 jz      short loc_1471
.text:0000145E                 mov     ecx, [ebp+var_15C]
.text:00001464                 call    ??0CSequentialOutStreamSizeCount@@QAE@XZ ; CSequentialOutStreamSizeCount::CSequentialOutStreamSizeCount(void)
.text:00001469                 mov     [ebp+var_188], eax
.text:0000146F                 jmp     short loc_147B
.text:00001471 ; ---------------------------------------------------------------------------
.text:00001471
.text:00001471 loc_1471:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+70Cj
.text:00001471                 mov     [ebp+var_188], 0
.text:0000147B
.text:0000147B loc_147B:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+71Fj
.text:0000147B                 mov     ecx, [ebp+var_188]
.text:00001481                 mov     [ebp+var_158], ecx
.text:00001487                 mov     byte ptr [ebp+var_4], 0Ah
.text:0000148B                 mov     edx, [ebp+var_158]
.text:00001491                 mov     [ebp+var_AC], edx
.text:00001497                 mov     eax, [ebp+var_AC]
.text:0000149D                 push    eax
.text:0000149E                 lea     ecx, [ebp+var_B4]
.text:000014A4                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:000014A9                 lea     ecx, [ebp+var_34]
.text:000014AC                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:000014B1                 test    eax, eax
.text:000014B3                 jz      short loc_14C5
.text:000014B5                 lea     ecx, [ebp+var_34]
.text:000014B8                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:000014BD                 mov     [ebp+var_18C], eax
.text:000014C3                 jmp     short loc_14CE
.text:000014C5 ; ---------------------------------------------------------------------------
.text:000014C5
.text:000014C5 loc_14C5:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+763j
.text:000014C5                 mov     ecx, [ebp+arg_14]
.text:000014C8                 mov     [ebp+var_18C], ecx
.text:000014CE
.text:000014CE loc_14CE:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+773j
.text:000014CE                 mov     edx, [ebp+var_18C]
.text:000014D4                 push    edx             ; struct ISequentialOutStream *
.text:000014D5                 mov     ecx, [ebp+var_AC] ; this
.text:000014DB                 call    ?SetStream@CSequentialOutStreamSizeCount@@QAEXPAUISequentialOutStream@@@Z ; CSequentialOutStreamSizeCount::SetStream(ISequentialOutStream *)
.text:000014E0                 mov     ecx, [ebp+var_AC] ; this
.text:000014E6                 call    ?Init@CSequentialOutStreamSizeCount@@QAEXXZ ; CSequentialOutStreamSizeCount::Init(void)
.text:000014EB                 lea     ecx, [ebp+var_B4]
.text:000014F1                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:000014F6                 push    eax
.text:000014F7                 lea     ecx, [ebp+var_D4]
.text:000014FD                 call    ?Add@?$CRecordVector@PAUISequentialOutStream@@@@QAEIQAUISequentialOutStream@@@Z ; CRecordVector<ISequentialOutStream *>::Add(ISequentialOutStream * const)
.text:00001502
.text:00001502 loc_1502:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+6EBj
.text:00001502                 mov     [ebp+var_7C], 1
.text:00001509                 jmp     short loc_1514
.text:0000150B ; ---------------------------------------------------------------------------
.text:0000150B
.text:0000150B loc_150B:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+7F6j
.text:0000150B                 mov     eax, [ebp+var_7C]
.text:0000150E                 add     eax, 1
.text:00001511                 mov     [ebp+var_7C], eax
.text:00001514
.text:00001514 loc_1514:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+7B9j
.text:00001514                 mov     ecx, [ebp+var_10]
.text:00001517                 add     ecx, 58h ; 'X'
.text:0000151A                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:0000151F                 cmp     [ebp+var_7C], eax
.text:00001522                 jnb     short loc_1548
.text:00001524                 mov     ecx, [ebp+var_7C]
.text:00001527                 sub     ecx, 1
.text:0000152A                 push    ecx
.text:0000152B                 lea     ecx, [ebp+var_70]
.text:0000152E                 call    ??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialOutStream>>::operator[](uint)
.text:00001533                 mov     ecx, eax
.text:00001535                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:0000153A                 push    eax
.text:0000153B                 lea     ecx, [ebp+var_D4]
.text:00001541                 call    ?Add@?$CRecordVector@PAUISequentialOutStream@@@@QAEIQAUISequentialOutStream@@@Z ; CRecordVector<ISequentialOutStream *>::Add(ISequentialOutStream * const)
.text:00001546                 jmp     short loc_150B
.text:00001548 ; ---------------------------------------------------------------------------
.text:00001548
.text:00001548 loc_1548:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+7D2j
.text:00001548                 lea     ecx, [ebp+var_24]
.text:0000154B                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:00001550                 test    eax, eax
.text:00001552                 jz      short loc_1564
.text:00001554                 lea     ecx, [ebp+var_24]
.text:00001557                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:0000155C                 mov     [ebp+var_190], eax
.text:00001562                 jmp     short loc_156D
.text:00001564 ; ---------------------------------------------------------------------------
.text:00001564
.text:00001564 loc_1564:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+802j
.text:00001564                 mov     edx, [ebp+arg_1C]
.text:00001567                 mov     [ebp+var_190], edx
.text:0000156D
.text:0000156D loc_156D:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+812j
.text:0000156D                 mov     esi, esp
.text:0000156F                 mov     eax, [ebp+var_190]
.text:00001575                 push    eax
.text:00001576                 lea     ecx, [ebp+var_D4]
.text:0000157C                 call    ?Front@?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@XZ ; CRecordVector<ISequentialOutStream *>::Front(void)
.text:00001581                 push    eax
.text:00001582                 lea     ecx, [ebp+var_C0]
.text:00001588                 push    ecx
.text:00001589                 mov     edx, [ebp+var_10]
.text:0000158C                 mov     eax, [edx+8]
.text:0000158F                 mov     ecx, [ebp+var_10]
.text:00001592                 mov     ecx, [ecx+8]
.text:00001595                 mov     edx, [eax]
.text:00001597                 mov     eax, [edx+18h]
.text:0000159A                 call    eax
.text:0000159C                 cmp     esi, esp
.text:0000159E                 call    __RTC_CheckEsp
.text:000015A3                 mov     [ebp+var_118], eax
.text:000015A9                 cmp     [ebp+var_118], 0
.text:000015B0                 jz      loc_1639
.text:000015B6                 mov     ecx, [ebp+var_118]
.text:000015BC                 mov     [ebp+var_160], ecx
.text:000015C2                 mov     byte ptr [ebp+var_4], 9
.text:000015C6                 lea     ecx, [ebp+var_D4]
.text:000015CC                 call    ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>(void)
.text:000015D1                 mov     byte ptr [ebp+var_4], 8
.text:000015D5                 lea     ecx, [ebp+var_B4]
.text:000015DB                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000015E0                 mov     byte ptr [ebp+var_4], 4
.text:000015E4                 lea     ecx, [ebp+var_A4]
.text:000015EA                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000015EF                 mov     byte ptr [ebp+var_4], 3
.text:000015F3                 lea     ecx, [ebp+var_70]
.text:000015F6                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)
.text:000015FB                 mov     byte ptr [ebp+var_4], 2
.text:000015FF                 lea     ecx, [ebp+var_5C]
.text:00001602                 call    ??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::~CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>(void)
.text:00001607                 mov     byte ptr [ebp+var_4], 1
.text:0000160B                 lea     ecx, [ebp+var_48]
.text:0000160E                 call    ??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ ; CObjectVector<CInOutTempBuffer>::~CObjectVector<CInOutTempBuffer>(void)
.text:00001613                 mov     byte ptr [ebp+var_4], 0
.text:00001617                 lea     ecx, [ebp+var_34]
.text:0000161A                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000161F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001626                 lea     ecx, [ebp+var_24]
.text:00001629                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000162E                 mov     eax, [ebp+var_160]
.text:00001634                 jmp     loc_18AF
.text:00001639 ; ---------------------------------------------------------------------------
.text:00001639
.text:00001639 loc_1639:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+860j
.text:00001639                 mov     ecx, [ebp+var_10]
.text:0000163C                 add     ecx, 58h ; 'X'
.text:0000163F                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00001644                 test    eax, eax
.text:00001646                 jz      short loc_165D
.text:00001648                 mov     ecx, [ebp+var_AC] ; this
.text:0000164E                 call    ?GetSize@CSequentialOutStreamSizeCount@@QBE_KXZ ; CSequentialOutStreamSizeCount::GetSize(void)
.text:00001653                 push    edx
.text:00001654                 push    eax
.text:00001655                 mov     ecx, [ebp+arg_18]
.text:00001658                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:0000165D
.text:0000165D loc_165D:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+8F6j
.text:0000165D                 mov     [ebp+var_7C], 1
.text:00001664                 jmp     short loc_166F
.text:00001666 ; ---------------------------------------------------------------------------
.text:00001666
.text:00001666 loc_1666:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+A02j
.text:00001666                 mov     edx, [ebp+var_7C]
.text:00001669                 add     edx, 1
.text:0000166C                 mov     [ebp+var_7C], edx
.text:0000166F
.text:0000166F loc_166F:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+914j
.text:0000166F                 mov     ecx, [ebp+var_10]
.text:00001672                 add     ecx, 58h ; 'X'
.text:00001675                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:0000167A                 cmp     [ebp+var_7C], eax
.text:0000167D                 jnb     loc_1757
.text:00001683                 mov     eax, [ebp+var_7C]
.text:00001686                 sub     eax, 1
.text:00001689                 push    eax
.text:0000168A                 lea     ecx, [ebp+var_48]
.text:0000168D                 call    ??A?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@I@Z ; CObjectVector<CInOutTempBuffer>::operator[](uint)
.text:00001692                 mov     [ebp+var_11C], eax
.text:00001698                 mov     ecx, [ebp+arg_14]
.text:0000169B                 push    ecx             ; struct ISequentialOutStream *
.text:0000169C                 mov     ecx, [ebp+var_11C] ; this
.text:000016A2                 call    ?WriteToStream@CInOutTempBuffer@@QAEJPAUISequentialOutStream@@@Z ; CInOutTempBuffer::WriteToStream(ISequentialOutStream *)
.text:000016A7                 mov     [ebp+var_120], eax
.text:000016AD                 cmp     [ebp+var_120], 0
.text:000016B4                 jz      loc_173D
.text:000016BA                 mov     edx, [ebp+var_120]
.text:000016C0                 mov     [ebp+var_164], edx
.text:000016C6                 mov     byte ptr [ebp+var_4], 9
.text:000016CA                 lea     ecx, [ebp+var_D4]
.text:000016D0                 call    ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>(void)
.text:000016D5                 mov     byte ptr [ebp+var_4], 8
.text:000016D9                 lea     ecx, [ebp+var_B4]
.text:000016DF                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000016E4                 mov     byte ptr [ebp+var_4], 4
.text:000016E8                 lea     ecx, [ebp+var_A4]
.text:000016EE                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000016F3                 mov     byte ptr [ebp+var_4], 3
.text:000016F7                 lea     ecx, [ebp+var_70]
.text:000016FA                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)
.text:000016FF                 mov     byte ptr [ebp+var_4], 2
.text:00001703                 lea     ecx, [ebp+var_5C]
.text:00001706                 call    ??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::~CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>(void)
.text:0000170B                 mov     byte ptr [ebp+var_4], 1
.text:0000170F                 lea     ecx, [ebp+var_48]
.text:00001712                 call    ??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ ; CObjectVector<CInOutTempBuffer>::~CObjectVector<CInOutTempBuffer>(void)
.text:00001717                 mov     byte ptr [ebp+var_4], 0
.text:0000171B                 lea     ecx, [ebp+var_34]
.text:0000171E                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001723                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000172A                 lea     ecx, [ebp+var_24]
.text:0000172D                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001732                 mov     eax, [ebp+var_164]
.text:00001738                 jmp     loc_18AF
.text:0000173D ; ---------------------------------------------------------------------------
.text:0000173D
.text:0000173D loc_173D:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+964j
.text:0000173D                 mov     ecx, [ebp+var_11C] ; this
.text:00001743                 call    ?GetDataSize@CInOutTempBuffer@@QBE_KXZ ; CInOutTempBuffer::GetDataSize(void)
.text:00001748                 push    edx
.text:00001749                 push    eax
.text:0000174A                 mov     ecx, [ebp+arg_18]
.text:0000174D                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:00001752                 jmp     loc_1666
.text:00001757 ; ---------------------------------------------------------------------------
.text:00001757
.text:00001757 loc_1757:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+92Dj
.text:00001757                 mov     eax, [ebp+arg_10]
.text:0000175A                 mov     dword ptr [eax], 0
.text:00001760                 mov     dword ptr [eax+4], 0
.text:00001767                 mov     [ebp+var_7C], 0
.text:0000176E                 jmp     short loc_1779
.text:00001770 ; ---------------------------------------------------------------------------
.text:00001770
.text:00001770 loc_1770:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+ADEj
.text:00001770                 mov     ecx, [ebp+var_7C]
.text:00001773                 add     ecx, 1
.text:00001776                 mov     [ebp+var_7C], ecx
.text:00001779
.text:00001779 loc_1779:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+A1Ej
.text:00001779                 mov     ecx, [ebp+var_10]
.text:0000177C                 add     ecx, 40h ; '@'
.text:0000177F                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:00001784                 cmp     [ebp+var_7C], eax
.text:00001787                 jnb     loc_1833
.text:0000178D                 mov     edx, [ebp+var_7C]
.text:00001790                 push    edx
.text:00001791                 mov     ecx, [ebp+var_10]
.text:00001794                 add     ecx, 0A4h ; 'ñ'
.text:0000179A                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:0000179F                 mov     eax, [eax]
.text:000017A1                 push    eax             ; unsigned int
.text:000017A2                 mov     ecx, [ebp+var_10]
.text:000017A5                 add     ecx, 40h ; '@'  ; this
.text:000017A8                 call    ?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_UnpackStream(uint)
.text:000017AD                 mov     [ebp+var_124], eax
.text:000017B3                 cmp     [ebp+var_124], 0
.text:000017BA                 jge     short loc_17E9
.text:000017BC                 mov     ecx, [ebp+var_9C] ; this
.text:000017C2                 call    ?GetSize@CSequentialInStreamSizeCount2@@QBE_KXZ ; CSequentialInStreamSizeCount2::GetSize(void)
.text:000017C7                 mov     [ebp+var_12C], eax
.text:000017CD                 mov     [ebp+var_128], edx
.text:000017D3                 mov     ecx, [ebp+arg_10]
.text:000017D6                 mov     edx, [ebp+var_12C]
.text:000017DC                 mov     [ecx], edx
.text:000017DE                 mov     eax, [ebp+var_128]
.text:000017E4                 mov     [ecx+4], eax
.text:000017E7                 jmp     short loc_1818
.text:000017E9 ; ---------------------------------------------------------------------------
.text:000017E9
.text:000017E9 loc_17E9:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+A6Aj
.text:000017E9                 mov     esi, esp
.text:000017EB                 mov     ecx, [ebp+var_124]
.text:000017F1                 push    ecx
.text:000017F2                 mov     edx, [ebp+var_10]
.text:000017F5                 mov     eax, [edx+8]
.text:000017F8                 mov     ecx, [ebp+var_10]
.text:000017FB                 mov     ecx, [ecx+8]
.text:000017FE                 mov     edx, [eax]
.text:00001800                 mov     eax, [edx+1Ch]
.text:00001803                 call    eax
.text:00001805                 cmp     esi, esp
.text:00001807                 call    __RTC_CheckEsp
.text:0000180C                 mov     [ebp+var_12C], eax
.text:00001812                 mov     [ebp+var_128], edx
.text:00001818
.text:00001818 loc_1818:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+A97j
.text:00001818                 mov     ecx, [ebp+var_128]
.text:0000181E                 push    ecx
.text:0000181F                 mov     edx, [ebp+var_12C]
.text:00001825                 push    edx
.text:00001826                 mov     ecx, [ebp+arg_C]
.text:00001829                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:0000182E                 jmp     loc_1770
.text:00001833 ; ---------------------------------------------------------------------------
.text:00001833
.text:00001833 loc_1833:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+A37j
.text:00001833                 mov     [ebp+var_168], 0
.text:0000183D                 mov     byte ptr [ebp+var_4], 9
.text:00001841                 lea     ecx, [ebp+var_D4]
.text:00001847                 call    ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>(void)
.text:0000184C                 mov     byte ptr [ebp+var_4], 8
.text:00001850                 lea     ecx, [ebp+var_B4]
.text:00001856                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000185B                 mov     byte ptr [ebp+var_4], 4
.text:0000185F                 lea     ecx, [ebp+var_A4]
.text:00001865                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000186A                 mov     byte ptr [ebp+var_4], 3
.text:0000186E                 lea     ecx, [ebp+var_70]
.text:00001871                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)
.text:00001876                 mov     byte ptr [ebp+var_4], 2
.text:0000187A                 lea     ecx, [ebp+var_5C]
.text:0000187D                 call    ??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::~CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>(void)
.text:00001882                 mov     byte ptr [ebp+var_4], 1
.text:00001886                 lea     ecx, [ebp+var_48]
.text:00001889                 call    ??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ ; CObjectVector<CInOutTempBuffer>::~CObjectVector<CInOutTempBuffer>(void)
.text:0000188E                 mov     byte ptr [ebp+var_4], 0
.text:00001892                 lea     ecx, [ebp+var_34]
.text:00001895                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000189A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000018A1                 lea     ecx, [ebp+var_24]
.text:000018A4                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000018A9                 mov     eax, [ebp+var_168]
.text:000018AF
.text:000018AF loc_18AF:                               ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+55j
.text:000018AF                                         ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+84j ...
.text:000018AF                 push    edx
.text:000018B0                 mov     ecx, ebp
.text:000018B2                 push    eax
.text:000018B3                 lea     edx, $LN91
.text:000018B9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000018BE                 pop     eax
.text:000018BF                 pop     edx
.text:000018C0                 mov     ecx, [ebp+var_C]
.text:000018C3                 mov     large fs:0, ecx
.text:000018CA                 pop     ecx
.text:000018CB                 pop     edi
.text:000018CC                 pop     esi
.text:000018CD                 add     esp, 190h
.text:000018D3                 cmp     ebp, esp
.text:000018D5                 call    __RTC_CheckEsp
.text:000018DA                 mov     esp, ebp
.text:000018DC                 pop     ebp
.text:000018DD                 retn    20h
.text:000018DD ?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z endp
.text:000018DD
.text:000018DD ; ---------------------------------------------------------------------------
.text:000018E0 $LN91           dd 0Eh                  ; DATA XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+B63o
.text:000018E4                 dd offset $LN90
.text:000018E8 $LN90           dd 0FFFFFFDCh, 4        ; DATA XREF: .text:000018E4o
.text:000018F0                 dd offset $LN75         ; "mtProgress"
.text:000018F4                 db 0CCh
.text:000018F5                 db 3 dup(0FFh)
.text:000018F8                 dd 4
.text:000018FC                 dd offset $LN76         ; "mtOutStreamNotify"
.text:00001900                 dd 0FFFFFFB8h, 0Ch
.text:00001908                 dd offset $LN77         ; "inOutTempBuffers"
.text:0000190C                 dd 0FFFFFFA4h, 0Ch
.text:00001914                 dd offset $LN78         ; "tempBufferSpecs"
.text:00001918                 db 90h
.text:00001919                 db 3 dup(0FFh)
.text:0000191C                 dd 0Ch
.text:00001920                 dd offset $LN79         ; "tempBuffers"
.text:00001924                 dd 0FFFFFF78h, 4
.text:0000192C                 dd offset $LN80         ; "tempBufferSpec"
.text:00001930                 dd 0FFFFFF6Ch, 4
.text:00001938                 dd offset $LN81         ; "tempBuffer"
.text:0000193C                 dd 0FFFFFF5Ch, 4
.text:00001944                 dd offset $LN82         ; "inStreamSizeCount"
.text:00001948                 dd 0FFFFFF4Ch, 4
.text:00001950                 dd offset $LN83         ; "outStreamSizeCount"
.text:00001954                 dd 0FFFFFF40h, 4
.text:0000195C                 dd offset $LN84         ; "inStreamPointer"
.text:00001960                 dd 0FFFFFF2Ch, 0Ch
.text:00001968                 dd offset $LN85         ; "outStreamPointers"
.text:0000196C                 dd 0FFFFFF1Ch, 4
.text:00001974                 dd offset $LN86         ; "resetInitVector"
.text:00001978                 dd 0FFFFFF10h, 4
.text:00001980                 dd offset $LN87         ; "writeCoderProperties"
.text:00001984                 dd 0FFFFFEFCh, 4
.text:0000198C                 dd offset $LN88         ; "dynOutStream"
.text:00001990 $LN88           db 'dynOutStream',0     ; DATA XREF: .text:0000198Co
.text:0000199D $LN87           db 'writeCoderProperties',0 ; DATA XREF: .text:00001980o
.text:000019B2 $LN86           db 'resetInitVector',0  ; DATA XREF: .text:00001974o
.text:000019C2 $LN85           db 'outStreamPointers',0 ; DATA XREF: .text:00001968o
.text:000019D4 $LN84           db 'inStreamPointer',0  ; DATA XREF: .text:0000195Co
.text:000019E4 $LN83           db 'outStreamSizeCount',0 ; DATA XREF: .text:00001950o
.text:000019F7 $LN82           db 'inStreamSizeCount',0 ; DATA XREF: .text:00001944o
.text:00001A09 $LN81           db 'tempBuffer',0       ; DATA XREF: .text:00001938o
.text:00001A14 $LN80           db 'tempBufferSpec',0   ; DATA XREF: .text:0000192Co
.text:00001A23 $LN79           db 'tempBuffers',0      ; DATA XREF: .text:00001920o
.text:00001A2F $LN78           db 'tempBufferSpecs',0  ; DATA XREF: .text:00001914o
.text:00001A3F $LN77           db 'inOutTempBuffers',0 ; DATA XREF: .text:00001908o
.text:00001A50 $LN76           db 'mtOutStreamNotify',0 ; DATA XREF: .text:000018FCo
.text:00001A62 $LN75           db 'mtProgress',0       ; DATA XREF: .text:000018F0o
.text:00001A6D                 align 10h
.text:00001A70
.text:00001A70 ; =============== S U B R O U T I N E =======================================
.text:00001A70
.text:00001A70 ; Attributes: bp-based frame
.text:00001A70
.text:00001A70 ; _DWORD __thiscall NArchive::N7z::CEncoder::CEncoder(NArchive::N7z::CEncoder *this, const struct NArchive::N7z::CCompressionMethodMode *)
.text:00001A70                 public ??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
.text:00001A70 ??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z proc near
.text:00001A70
.text:00001A70 var_14          = dword ptr -14h
.text:00001A70 var_10          = dword ptr -10h
.text:00001A70 var_C           = dword ptr -0Ch
.text:00001A70 var_4           = dword ptr -4
.text:00001A70 arg_0           = dword ptr  8
.text:00001A70
.text:00001A70                 push    ebp
.text:00001A71                 mov     ebp, esp
.text:00001A73                 push    0FFFFFFFFh
.text:00001A75                 push    offset __ehhandler$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
.text:00001A7A                 mov     eax, large fs:0
.text:00001A80                 push    eax
.text:00001A81                 sub     esp, 8
.text:00001A84                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00001A8B                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00001A92                 mov     eax, dword ptr ds:___security_cookie
.text:00001A97                 xor     eax, ebp
.text:00001A99                 push    eax
.text:00001A9A                 lea     eax, [ebp+var_C]
.text:00001A9D                 mov     large fs:0, eax
.text:00001AA3                 mov     [ebp+var_10], ecx
.text:00001AA6                 mov     ecx, [ebp+var_10]
.text:00001AA9                 add     ecx, 0Ch
.text:00001AAC                 call    ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>(void)
.text:00001AB1                 mov     [ebp+var_4], 0
.text:00001AB8                 mov     ecx, [ebp+var_10]
.text:00001ABB                 add     ecx, 10h        ; this
.text:00001ABE                 call    ??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(void)
.text:00001AC3                 mov     byte ptr [ebp+var_4], 1
.text:00001AC7                 mov     ecx, [ebp+var_10]
.text:00001ACA                 add     ecx, 40h ; '@'  ; this
.text:00001ACD                 call    ??0CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::CBindInfo(void)
.text:00001AD2                 mov     byte ptr [ebp+var_4], 2
.text:00001AD6                 mov     ecx, [ebp+var_10]
.text:00001AD9                 add     ecx, 80h ; 'Ç'
.text:00001ADF                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:00001AE4                 mov     byte ptr [ebp+var_4], 3
.text:00001AE8                 mov     ecx, [ebp+var_10]
.text:00001AEB                 add     ecx, 8Ch ; 'î'
.text:00001AF1                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00001AF6                 mov     byte ptr [ebp+var_4], 4
.text:00001AFA                 mov     ecx, [ebp+var_10]
.text:00001AFD                 add     ecx, 98h ; 'ÿ'
.text:00001B03                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00001B08                 mov     byte ptr [ebp+var_4], 5
.text:00001B0C                 mov     ecx, [ebp+var_10]
.text:00001B0F                 add     ecx, 0A4h ; 'ñ'
.text:00001B15                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00001B1A                 mov     byte ptr [ebp+var_4], 6
.text:00001B1E                 mov     eax, [ebp+var_10]
.text:00001B21                 mov     byte ptr [eax+0B0h], 0
.text:00001B28                 mov     ecx, [ebp+arg_0] ; this
.text:00001B2B                 call    ?IsEmpty@CCompressionMethodMode@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CCompressionMethodMode::IsEmpty(void)
.text:00001B30                 movzx   ecx, al
.text:00001B33                 test    ecx, ecx
.text:00001B35                 jz      short loc_1B4C
.text:00001B37                 mov     [ebp+var_14], 1
.text:00001B3E                 push    offset __TI1H
.text:00001B43                 lea     edx, [ebp+var_14]
.text:00001B46                 push    edx
.text:00001B47                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00001B4C ; ---------------------------------------------------------------------------
.text:00001B4C
.text:00001B4C loc_1B4C:                               ; CODE XREF: NArchive::N7z::CEncoder::CEncoder(NArchive::N7z::CCompressionMethodMode const &)+C5j
.text:00001B4C                 mov     eax, [ebp+arg_0]
.text:00001B4F                 push    eax
.text:00001B50                 mov     ecx, [ebp+var_10]
.text:00001B53                 add     ecx, 10h
.text:00001B56                 call    ??4CCompressionMethodMode@N7z@NArchive@@QAEAAU012@ABU012@@Z ; NArchive::N7z::CCompressionMethodMode::operator=(NArchive::N7z::CCompressionMethodMode const &)
.text:00001B5B                 mov     ecx, [ebp+var_10]
.text:00001B5E                 mov     dword ptr [ecx], 0
.text:00001B64                 mov     edx, [ebp+var_10]
.text:00001B67                 mov     dword ptr [edx+4], 0
.text:00001B6E                 mov     eax, [ebp+var_10]
.text:00001B71                 mov     dword ptr [eax+8], 0
.text:00001B78                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001B7F                 mov     eax, [ebp+var_10]
.text:00001B82                 mov     ecx, [ebp+var_C]
.text:00001B85                 mov     large fs:0, ecx
.text:00001B8C                 pop     ecx
.text:00001B8D                 add     esp, 14h
.text:00001B90                 cmp     ebp, esp
.text:00001B92                 call    __RTC_CheckEsp
.text:00001B97                 mov     esp, ebp
.text:00001B99                 pop     ebp
.text:00001B9A                 retn    4
.text:00001B9A ??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z endp
.text:00001B9A
.text:00001B9A ; ---------------------------------------------------------------------------
.text:00001B9D                 align 10h
.text:00001BA0
.text:00001BA0 ; =============== S U B R O U T I N E =======================================
.text:00001BA0
.text:00001BA0 ; Attributes: bp-based frame
.text:00001BA0
.text:00001BA0 ; __int32 __thiscall NArchive::N7z::CEncoder::EncoderConstr(NArchive::N7z::CEncoder *__hidden this)
.text:00001BA0                 public ?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ
.text:00001BA0 ?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ proc near
.text:00001BA0                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+44p
.text:00001BA0
.text:00001BA0 var_F0          = dword ptr -0F0h
.text:00001BA0 var_EC          = dword ptr -0ECh
.text:00001BA0 var_E8          = dword ptr -0E8h
.text:00001BA0 var_E4          = dword ptr -0E4h
.text:00001BA0 var_DC          = dword ptr -0DCh
.text:00001BA0 var_D0          = byte ptr -0D0h
.text:00001BA0 var_C0          = dword ptr -0C0h
.text:00001BA0 var_BC          = dword ptr -0BCh
.text:00001BA0 var_B8          = dword ptr -0B8h
.text:00001BA0 var_A8          = dword ptr -0A8h
.text:00001BA0 var_A4          = dword ptr -0A4h
.text:00001BA0 var_9C          = dword ptr -9Ch
.text:00001BA0 var_98          = dword ptr -98h
.text:00001BA0 var_94          = dword ptr -94h
.text:00001BA0 var_90          = dword ptr -90h
.text:00001BA0 var_8C          = dword ptr -8Ch
.text:00001BA0 var_88          = dword ptr -88h
.text:00001BA0 var_84          = dword ptr -84h
.text:00001BA0 var_7C          = dword ptr -7Ch
.text:00001BA0 var_78          = dword ptr -78h
.text:00001BA0 var_70          = dword ptr -70h
.text:00001BA0 var_68          = dword ptr -68h
.text:00001BA0 var_64          = dword ptr -64h
.text:00001BA0 var_58          = dword ptr -58h
.text:00001BA0 var_50          = dword ptr -50h
.text:00001BA0 var_4C          = dword ptr -4Ch
.text:00001BA0 var_48          = dword ptr -48h
.text:00001BA0 var_40          = dword ptr -40h
.text:00001BA0 var_34          = byte ptr -34h
.text:00001BA0 var_24          = dword ptr -24h
.text:00001BA0 var_20          = dword ptr -20h
.text:00001BA0 var_1C          = dword ptr -1Ch
.text:00001BA0 var_10          = dword ptr -10h
.text:00001BA0 var_C           = dword ptr -0Ch
.text:00001BA0 var_4           = dword ptr -4
.text:00001BA0
.text:00001BA0                 push    ebp
.text:00001BA1                 mov     ebp, esp
.text:00001BA3                 push    0FFFFFFFFh
.text:00001BA5                 push    offset __ehhandler$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ
.text:00001BAA                 mov     eax, large fs:0
.text:00001BB0                 push    eax
.text:00001BB1                 sub     esp, 0E4h
.text:00001BB7                 push    edi
.text:00001BB8                 push    ecx
.text:00001BB9                 lea     edi, [ebp+var_F0]
.text:00001BBF                 mov     ecx, 39h ; '9'
.text:00001BC4                 mov     eax, 0CCCCCCCCh
.text:00001BC9                 rep stosd
.text:00001BCB                 pop     ecx
.text:00001BCC                 mov     eax, dword ptr ds:___security_cookie
.text:00001BD1                 xor     eax, ebp
.text:00001BD3                 push    eax
.text:00001BD4                 lea     eax, [ebp+var_C]
.text:00001BD7                 mov     large fs:0, eax
.text:00001BDD                 mov     [ebp+var_10], ecx
.text:00001BE0                 mov     eax, [ebp+var_10]
.text:00001BE3                 movzx   ecx, byte ptr [eax+0B0h]
.text:00001BEA                 test    ecx, ecx
.text:00001BEC                 jz      short loc_1BF5
.text:00001BEE                 xor     eax, eax
.text:00001BF0                 jmp     loc_21F7
.text:00001BF5 ; ---------------------------------------------------------------------------
.text:00001BF5
.text:00001BF5 loc_1BF5:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+4Cj
.text:00001BF5                 mov     ecx, [ebp+var_10]
.text:00001BF8                 add     ecx, 10h
.text:00001BFB                 call    ?IsEmpty@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::N7z::CMethodFull>::IsEmpty(void)
.text:00001C00                 movzx   edx, al
.text:00001C03                 test    edx, edx
.text:00001C05                 jz      loc_1CD2
.text:00001C0B                 mov     eax, [ebp+var_10]
.text:00001C0E                 movzx   ecx, byte ptr [eax+31h]
.text:00001C12                 test    ecx, ecx
.text:00001C14                 jnz     short loc_1C31
.text:00001C16                 mov     [ebp+var_E8], 1
.text:00001C20                 push    offset __TI1H
.text:00001C25                 lea     edx, [ebp+var_E8]
.text:00001C2B                 push    edx
.text:00001C2C                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00001C31 ; ---------------------------------------------------------------------------
.text:00001C31
.text:00001C31 loc_1C31:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+74j
.text:00001C31                 mov     ecx, [ebp+var_10]
.text:00001C34                 add     ecx, 1Ch
.text:00001C37                 call    ?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::N7z::CBond2>::IsEmpty(void)
.text:00001C3C                 movzx   eax, al
.text:00001C3F                 test    eax, eax
.text:00001C41                 jnz     short loc_1C5E
.text:00001C43                 mov     [ebp+var_EC], 1
.text:00001C4D                 push    offset __TI1H
.text:00001C52                 lea     ecx, [ebp+var_EC]
.text:00001C58                 push    ecx
.text:00001C59                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00001C5E ; ---------------------------------------------------------------------------
.text:00001C5E
.text:00001C5E loc_1C5E:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+A1j
.text:00001C5E                 lea     ecx, [ebp+var_34] ; this
.text:00001C61                 call    ??0CMethodFull@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CMethodFull::CMethodFull(void)
.text:00001C66                 mov     [ebp+var_4], 0
.text:00001C6D                 mov     [ebp+var_24], 6F10701h
.text:00001C74                 mov     [ebp+var_20], 0
.text:00001C7B                 mov     [ebp+var_1C], 1
.text:00001C82                 lea     edx, [ebp+var_34]
.text:00001C85                 push    edx             ; struct NArchive::N7z::CMethodFull *
.text:00001C86                 mov     ecx, [ebp+var_10]
.text:00001C89                 add     ecx, 10h
.text:00001C8C                 call    ?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z ; CObjectVector<NArchive::N7z::CMethodFull>::Add(NArchive::N7z::CMethodFull const &)
.text:00001C91                 mov     [ebp+var_40], 1
.text:00001C98                 mov     eax, [ebp+var_40]
.text:00001C9B                 push    eax
.text:00001C9C                 mov     ecx, [ebp+var_10]
.text:00001C9F                 add     ecx, 40h ; '@'
.text:00001CA2                 call    ?Add@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEIUCCoderStreamsInfo@NCoderMixer2@@@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Add(NCoderMixer2::CCoderStreamsInfo)
.text:00001CA7                 push    0
.text:00001CA9                 mov     ecx, [ebp+var_10]
.text:00001CAC                 add     ecx, 58h ; 'X'
.text:00001CAF                 call    ?Add@?$CRecordVector@I@@QAEII@Z ; CRecordVector<uint>::Add(uint)
.text:00001CB4                 mov     ecx, [ebp+var_10]
.text:00001CB7                 mov     dword ptr [ecx+64h], 0
.text:00001CBE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001CC5                 lea     ecx, [ebp+var_34] ; this
.text:00001CC8                 call    ??1CMethodFull@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CMethodFull::~CMethodFull(void)
.text:00001CCD                 jmp     loc_2149
.text:00001CD2 ; ---------------------------------------------------------------------------
.text:00001CD2
.text:00001CD2 loc_1CD2:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+65j
.text:00001CD2                 mov     [ebp+var_48], 0
.text:00001CD9                 mov     [ebp+var_4C], 0
.text:00001CE0                 jmp     short loc_1CEB
.text:00001CE2 ; ---------------------------------------------------------------------------
.text:00001CE2
.text:00001CE2 loc_1CE2:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+220j
.text:00001CE2                 mov     edx, [ebp+var_4C]
.text:00001CE5                 add     edx, 1
.text:00001CE8                 mov     [ebp+var_4C], edx
.text:00001CEB
.text:00001CEB loc_1CEB:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+140j
.text:00001CEB                 mov     ecx, [ebp+var_10]
.text:00001CEE                 add     ecx, 10h
.text:00001CF1                 call    ?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size(void)
.text:00001CF6                 cmp     [ebp+var_4C], eax
.text:00001CF9                 jnb     loc_1DC5
.text:00001CFF                 mov     eax, [ebp+var_4C]
.text:00001D02                 push    eax
.text:00001D03                 mov     ecx, [ebp+var_10]
.text:00001D06                 add     ecx, 10h
.text:00001D09                 call    ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator[](uint)
.text:00001D0E                 mov     [ebp+var_50], eax
.text:00001D11                 mov     ecx, [ebp+var_50]
.text:00001D14                 mov     edx, [ecx+18h]
.text:00001D17                 mov     [ebp+var_58], edx
.text:00001D1A                 mov     ecx, [ebp+var_10]
.text:00001D1D                 add     ecx, 1Ch
.text:00001D20                 call    ?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::N7z::CBond2>::IsEmpty(void)
.text:00001D25                 movzx   eax, al
.text:00001D28                 test    eax, eax
.text:00001D2A                 jz      short loc_1DA8
.text:00001D2C                 mov     ecx, [ebp+var_10]
.text:00001D2F                 add     ecx, 10h
.text:00001D32                 call    ?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size(void)
.text:00001D37                 sub     eax, 1
.text:00001D3A                 cmp     [ebp+var_4C], eax
.text:00001D3D                 jz      short loc_1D63
.text:00001D3F                 mov     ecx, [ebp+var_48]
.text:00001D42                 mov     [ebp+var_68], ecx
.text:00001D45                 mov     edx, [ebp+var_4C]
.text:00001D48                 add     edx, 1
.text:00001D4B                 mov     [ebp+var_64], edx
.text:00001D4E                 mov     eax, [ebp+var_64]
.text:00001D51                 push    eax
.text:00001D52                 mov     ecx, [ebp+var_68]
.text:00001D55                 push    ecx
.text:00001D56                 mov     ecx, [ebp+var_10]
.text:00001D59                 add     ecx, 4Ch ; 'L'
.text:00001D5C                 call    ?Add@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEIUCBond@NCoderMixer2@@@Z ; CRecordVector<NCoderMixer2::CBond>::Add(NCoderMixer2::CBond)
.text:00001D61                 jmp     short loc_1D7A
.text:00001D63 ; ---------------------------------------------------------------------------
.text:00001D63
.text:00001D63 loc_1D63:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+19Dj
.text:00001D63                 cmp     [ebp+var_58], 0
.text:00001D67                 jz      short loc_1D7A
.text:00001D69                 mov     edx, [ebp+var_48]
.text:00001D6C                 push    edx
.text:00001D6D                 push    0
.text:00001D6F                 mov     ecx, [ebp+var_10]
.text:00001D72                 add     ecx, 58h ; 'X'
.text:00001D75                 call    ?Insert@?$CRecordVector@I@@QAEXII@Z ; CRecordVector<uint>::Insert(uint,uint)
.text:00001D7A
.text:00001D7A loc_1D7A:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+1C1j
.text:00001D7A                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+1C7j
.text:00001D7A                 mov     [ebp+var_70], 1
.text:00001D81                 jmp     short loc_1D8C
.text:00001D83 ; ---------------------------------------------------------------------------
.text:00001D83
.text:00001D83 loc_1D83:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+206j
.text:00001D83                 mov     eax, [ebp+var_70]
.text:00001D86                 add     eax, 1
.text:00001D89                 mov     [ebp+var_70], eax
.text:00001D8C
.text:00001D8C loc_1D8C:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+1E1j
.text:00001D8C                 mov     ecx, [ebp+var_70]
.text:00001D8F                 cmp     ecx, [ebp+var_58]
.text:00001D92                 jnb     short loc_1DA8
.text:00001D94                 mov     edx, [ebp+var_48]
.text:00001D97                 add     edx, [ebp+var_70]
.text:00001D9A                 push    edx
.text:00001D9B                 mov     ecx, [ebp+var_10]
.text:00001D9E                 add     ecx, 58h ; 'X'
.text:00001DA1                 call    ?Add@?$CRecordVector@I@@QAEII@Z ; CRecordVector<uint>::Add(uint)
.text:00001DA6                 jmp     short loc_1D83
.text:00001DA8 ; ---------------------------------------------------------------------------
.text:00001DA8
.text:00001DA8 loc_1DA8:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+18Aj
.text:00001DA8                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+1F2j
.text:00001DA8                 mov     eax, [ebp+var_48]
.text:00001DAB                 add     eax, [ebp+var_58]
.text:00001DAE                 mov     [ebp+var_48], eax
.text:00001DB1                 mov     ecx, [ebp+var_58]
.text:00001DB4                 push    ecx
.text:00001DB5                 mov     ecx, [ebp+var_10]
.text:00001DB8                 add     ecx, 40h ; '@'
.text:00001DBB                 call    ?Add@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEIUCCoderStreamsInfo@NCoderMixer2@@@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Add(NCoderMixer2::CCoderStreamsInfo)
.text:00001DC0                 jmp     loc_1CE2
.text:00001DC5 ; ---------------------------------------------------------------------------
.text:00001DC5
.text:00001DC5 loc_1DC5:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+159j
.text:00001DC5                 mov     ecx, [ebp+var_10]
.text:00001DC8                 add     ecx, 1Ch
.text:00001DCB                 call    ?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::N7z::CBond2>::IsEmpty(void)
.text:00001DD0                 movzx   edx, al
.text:00001DD3                 test    edx, edx
.text:00001DD5                 jnz     loc_1EEF
.text:00001DDB                 mov     [ebp+var_4C], 0
.text:00001DE2                 jmp     short loc_1DED
.text:00001DE4 ; ---------------------------------------------------------------------------
.text:00001DE4
.text:00001DE4 loc_1DE4:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+30Bj
.text:00001DE4                 mov     eax, [ebp+var_4C]
.text:00001DE7                 add     eax, 1
.text:00001DEA                 mov     [ebp+var_4C], eax
.text:00001DED
.text:00001DED loc_1DED:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+242j
.text:00001DED                 mov     ecx, [ebp+var_10]
.text:00001DF0                 add     ecx, 1Ch
.text:00001DF3                 call    ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size(void)
.text:00001DF8                 cmp     [ebp+var_4C], eax
.text:00001DFB                 jnb     loc_1EB0
.text:00001E01                 mov     ecx, [ebp+var_4C]
.text:00001E04                 push    ecx
.text:00001E05                 mov     ecx, [ebp+var_10]
.text:00001E08                 add     ecx, 1Ch
.text:00001E0B                 call    ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CBond2>::operator[](uint)
.text:00001E10                 mov     [ebp+var_84], eax
.text:00001E16                 mov     ecx, [ebp+var_10]
.text:00001E19                 add     ecx, 40h ; '@'
.text:00001E1C                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:00001E21                 mov     edx, [ebp+var_84]
.text:00001E27                 cmp     [edx+8], eax
.text:00001E2A                 jnb     short loc_1E62
.text:00001E2C                 mov     ecx, [ebp+var_10]
.text:00001E2F                 add     ecx, 40h ; '@'
.text:00001E32                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:00001E37                 mov     ecx, [ebp+var_84]
.text:00001E3D                 cmp     [ecx], eax
.text:00001E3F                 jnb     short loc_1E62
.text:00001E41                 mov     edx, [ebp+var_84]
.text:00001E47                 mov     eax, [edx]
.text:00001E49                 push    eax
.text:00001E4A                 mov     ecx, [ebp+var_10]
.text:00001E4D                 add     ecx, 40h ; '@'
.text:00001E50                 call    ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[](uint)
.text:00001E55                 mov     ecx, [ebp+var_84]
.text:00001E5B                 mov     edx, [ecx+4]
.text:00001E5E                 cmp     edx, [eax]
.text:00001E60                 jb      short loc_1E6C
.text:00001E62
.text:00001E62 loc_1E62:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+28Aj
.text:00001E62                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+29Fj
.text:00001E62                 mov     eax, 80070057h
.text:00001E67                 jmp     loc_21F7
.text:00001E6C ; ---------------------------------------------------------------------------
.text:00001E6C
.text:00001E6C loc_1E6C:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+2C0j
.text:00001E6C                 mov     eax, [ebp+var_84]
.text:00001E72                 mov     ecx, [eax]
.text:00001E74                 push    ecx             ; unsigned int
.text:00001E75                 mov     ecx, [ebp+var_10]
.text:00001E78                 add     ecx, 40h ; '@'  ; this
.text:00001E7B                 call    ?GetStream_for_Coder@CBindInfo@NCoderMixer2@@QBEII@Z ; NCoderMixer2::CBindInfo::GetStream_for_Coder(uint)
.text:00001E80                 mov     edx, [ebp+var_84]
.text:00001E86                 add     eax, [edx+4]
.text:00001E89                 mov     [ebp+var_7C], eax
.text:00001E8C                 mov     eax, [ebp+var_84]
.text:00001E92                 mov     ecx, [eax+8]
.text:00001E95                 mov     [ebp+var_78], ecx
.text:00001E98                 mov     edx, [ebp+var_78]
.text:00001E9B                 push    edx
.text:00001E9C                 mov     eax, [ebp+var_7C]
.text:00001E9F                 push    eax
.text:00001EA0                 mov     ecx, [ebp+var_10]
.text:00001EA3                 add     ecx, 4Ch ; 'L'
.text:00001EA6                 call    ?Add@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEIUCBond@NCoderMixer2@@@Z ; CRecordVector<NCoderMixer2::CBond>::Add(NCoderMixer2::CBond)
.text:00001EAB                 jmp     loc_1DE4
.text:00001EB0 ; ---------------------------------------------------------------------------
.text:00001EB0
.text:00001EB0 loc_1EB0:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+25Bj
.text:00001EB0                 mov     [ebp+var_4C], 0
.text:00001EB7                 jmp     short loc_1EC2
.text:00001EB9 ; ---------------------------------------------------------------------------
.text:00001EB9
.text:00001EB9 loc_1EB9:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void):loc_1EEDj
.text:00001EB9                 mov     ecx, [ebp+var_4C]
.text:00001EBC                 add     ecx, 1
.text:00001EBF                 mov     [ebp+var_4C], ecx
.text:00001EC2
.text:00001EC2 loc_1EC2:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+317j
.text:00001EC2                 mov     edx, [ebp+var_4C]
.text:00001EC5                 cmp     edx, [ebp+var_48]
.text:00001EC8                 jnb     short loc_1EEF
.text:00001ECA                 mov     eax, [ebp+var_4C]
.text:00001ECD                 push    eax             ; unsigned int
.text:00001ECE                 mov     ecx, [ebp+var_10]
.text:00001ED1                 add     ecx, 40h ; '@'  ; this
.text:00001ED4                 call    ?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_PackStream(uint)
.text:00001ED9                 cmp     eax, 0FFFFFFFFh
.text:00001EDC                 jnz     short loc_1EED
.text:00001EDE                 mov     ecx, [ebp+var_4C]
.text:00001EE1                 push    ecx
.text:00001EE2                 mov     ecx, [ebp+var_10]
.text:00001EE5                 add     ecx, 58h ; 'X'
.text:00001EE8                 call    ?Add@?$CRecordVector@I@@QAEII@Z ; CRecordVector<uint>::Add(uint)
.text:00001EED
.text:00001EED loc_1EED:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+33Cj
.text:00001EED                 jmp     short loc_1EB9
.text:00001EEF ; ---------------------------------------------------------------------------
.text:00001EEF
.text:00001EEF loc_1EEF:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+235j
.text:00001EEF                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+328j
.text:00001EEF                 mov     ecx, [ebp+var_10]
.text:00001EF2                 add     ecx, 40h ; '@'  ; this
.text:00001EF5                 call    ?SetUnpackCoder@CBindInfo@NCoderMixer2@@QAE_NXZ ; NCoderMixer2::CBindInfo::SetUnpackCoder(void)
.text:00001EFA                 movzx   edx, al
.text:00001EFD                 test    edx, edx
.text:00001EFF                 jnz     short loc_1F0B
.text:00001F01                 mov     eax, 80070057h
.text:00001F06                 jmp     loc_21F7
.text:00001F0B ; ---------------------------------------------------------------------------
.text:00001F0B
.text:00001F0B loc_1F0B:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+35Fj
.text:00001F0B                 mov     ecx, [ebp+var_10]
.text:00001F0E                 add     ecx, 40h ; '@'  ; this
.text:00001F11                 call    ?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ ; NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)
.text:00001F16                 movzx   eax, al
.text:00001F19                 test    eax, eax
.text:00001F1B                 jnz     short loc_1F27
.text:00001F1D                 mov     eax, 80070057h
.text:00001F22                 jmp     loc_21F7
.text:00001F27 ; ---------------------------------------------------------------------------
.text:00001F27
.text:00001F27 loc_1F27:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+37Bj
.text:00001F27                 mov     ecx, [ebp+var_10]
.text:00001F2A                 add     ecx, 58h ; 'X'
.text:00001F2D                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00001F32                 cmp     eax, 1
.text:00001F35                 jz      loc_1FF5
.text:00001F3B                 mov     ecx, [ebp+var_10]
.text:00001F3E                 mov     edx, [ecx+64h]
.text:00001F41                 mov     [ebp+var_88], edx
.text:00001F47
.text:00001F47 loc_1F47:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+419j
.text:00001F47                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+450j
.text:00001F47                 mov     eax, [ebp+var_88]
.text:00001F4D                 push    eax
.text:00001F4E                 mov     ecx, [ebp+var_10]
.text:00001F51                 add     ecx, 40h ; '@'
.text:00001F54                 call    ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[](uint)
.text:00001F59                 cmp     dword ptr [eax], 0
.text:00001F5C                 jnz     short loc_1F63
.text:00001F5E                 jmp     loc_1FF5
.text:00001F63 ; ---------------------------------------------------------------------------
.text:00001F63
.text:00001F63 loc_1F63:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+3BCj
.text:00001F63                 mov     ecx, [ebp+var_88]
.text:00001F69                 push    ecx
.text:00001F6A                 mov     ecx, [ebp+var_10]
.text:00001F6D                 add     ecx, 68h ; 'h'
.text:00001F70                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00001F75                 mov     edx, [eax]
.text:00001F77                 mov     [ebp+var_8C], edx
.text:00001F7D                 mov     eax, [ebp+var_8C]
.text:00001F83                 push    eax             ; unsigned int
.text:00001F84                 mov     ecx, [ebp+var_10]
.text:00001F87                 add     ecx, 40h ; '@'  ; this
.text:00001F8A                 call    ?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_PackStream(uint)
.text:00001F8F                 mov     [ebp+var_90], eax
.text:00001F95                 cmp     [ebp+var_90], 0
.text:00001F9C                 jl      short loc_1FBB
.text:00001F9E                 mov     ecx, [ebp+var_90]
.text:00001FA4                 push    ecx
.text:00001FA5                 mov     ecx, [ebp+var_10]
.text:00001FA8                 add     ecx, 4Ch ; 'L'
.text:00001FAB                 call    ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[](uint)
.text:00001FB0                 mov     edx, [eax+4]
.text:00001FB3                 mov     [ebp+var_88], edx
.text:00001FB9                 jmp     short loc_1F47
.text:00001FBB ; ---------------------------------------------------------------------------
.text:00001FBB
.text:00001FBB loc_1FBB:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+3FCj
.text:00001FBB                 mov     eax, [ebp+var_8C]
.text:00001FC1                 push    eax             ; unsigned int
.text:00001FC2                 mov     ecx, [ebp+var_10]
.text:00001FC5                 add     ecx, 40h ; '@'  ; this
.text:00001FC8                 call    ?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindStream_in_PackStreams(uint)
.text:00001FCD                 mov     [ebp+var_94], eax
.text:00001FD3                 cmp     [ebp+var_94], 0
.text:00001FDA                 jl      short loc_1FEE
.text:00001FDC                 mov     ecx, [ebp+var_94]
.text:00001FE2                 push    ecx
.text:00001FE3                 mov     ecx, [ebp+var_10]
.text:00001FE6                 add     ecx, 58h ; 'X'
.text:00001FE9                 call    ?MoveToFront@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<uint>::MoveToFront(uint)
.text:00001FEE
.text:00001FEE loc_1FEE:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+43Aj
.text:00001FEE                 jmp     short loc_1FF5
.text:00001FF0 ; ---------------------------------------------------------------------------
.text:00001FF0                 jmp     loc_1F47
.text:00001FF5 ; ---------------------------------------------------------------------------
.text:00001FF5
.text:00001FF5 loc_1FF5:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+395j
.text:00001FF5                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+3BEj ...
.text:00001FF5                 mov     edx, [ebp+var_10]
.text:00001FF8                 movzx   eax, byte ptr [edx+31h]
.text:00001FFC                 test    eax, eax
.text:00001FFE                 jz      loc_2149
.text:00002004                 mov     ecx, [ebp+var_10]
.text:00002007                 add     ecx, 58h ; 'X'
.text:0000200A                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:0000200F                 mov     [ebp+var_98], eax
.text:00002015                 mov     ecx, [ebp+var_10]
.text:00002018                 add     ecx, 40h ; '@'
.text:0000201B                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:00002020                 mov     [ebp+var_9C], eax
.text:00002026                 mov     [ebp+var_4C], 0
.text:0000202D                 jmp     short loc_2038
.text:0000202F ; ---------------------------------------------------------------------------
.text:0000202F
.text:0000202F loc_202F:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+4E2j
.text:0000202F                 mov     ecx, [ebp+var_4C]
.text:00002032                 add     ecx, 1
.text:00002035                 mov     [ebp+var_4C], ecx
.text:00002038
.text:00002038 loc_2038:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+48Dj
.text:00002038                 mov     edx, [ebp+var_4C]
.text:0000203B                 cmp     edx, [ebp+var_98]
.text:00002041                 jnb     short loc_2084
.text:00002043                 mov     eax, [ebp+var_9C]
.text:00002049                 add     eax, [ebp+var_4C]
.text:0000204C                 mov     [ebp+var_A4], eax
.text:00002052                 mov     ecx, [ebp+var_4C]
.text:00002055                 push    ecx
.text:00002056                 mov     ecx, [ebp+var_10]
.text:00002059                 add     ecx, 58h ; 'X'
.text:0000205C                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00002061                 mov     edx, [eax]
.text:00002063                 mov     [ebp+var_A8], edx
.text:00002069                 mov     eax, [ebp+var_A4]
.text:0000206F                 push    eax
.text:00002070                 mov     ecx, [ebp+var_A8]
.text:00002076                 push    ecx
.text:00002077                 mov     ecx, [ebp+var_10]
.text:0000207A                 add     ecx, 4Ch ; 'L'
.text:0000207D                 call    ?Add@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEIUCBond@NCoderMixer2@@@Z ; CRecordVector<NCoderMixer2::CBond>::Add(NCoderMixer2::CBond)
.text:00002082                 jmp     short loc_202F
.text:00002084 ; ---------------------------------------------------------------------------
.text:00002084
.text:00002084 loc_2084:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+4A1j
.text:00002084                 mov     ecx, [ebp+var_10]
.text:00002087                 add     ecx, 58h ; 'X'
.text:0000208A                 call    ?Clear@?$CRecordVector@I@@QAEXXZ ; CRecordVector<uint>::Clear(void)
.text:0000208F                 mov     [ebp+var_4C], 0
.text:00002096                 jmp     short loc_20A1
.text:00002098 ; ---------------------------------------------------------------------------
.text:00002098
.text:00002098 loc_2098:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+5A4j
.text:00002098                 mov     edx, [ebp+var_4C]
.text:0000209B                 add     edx, 1
.text:0000209E                 mov     [ebp+var_4C], edx
.text:000020A1
.text:000020A1 loc_20A1:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+4F6j
.text:000020A1                 mov     eax, [ebp+var_4C]
.text:000020A4                 cmp     eax, [ebp+var_98]
.text:000020AA                 jnb     loc_2149
.text:000020B0                 lea     ecx, [ebp+var_D0] ; this
.text:000020B6                 call    ??0CMethodFull@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CMethodFull::CMethodFull(void)
.text:000020BB                 mov     [ebp+var_4], 1
.text:000020C2                 mov     [ebp+var_B8], 1
.text:000020CC                 mov     [ebp+var_C0], 6F10701h
.text:000020D6                 mov     [ebp+var_BC], 0
.text:000020E0                 lea     ecx, [ebp+var_D0]
.text:000020E6                 push    ecx             ; struct NArchive::N7z::CMethodFull *
.text:000020E7                 mov     ecx, [ebp+var_10]
.text:000020EA                 add     ecx, 10h
.text:000020ED                 call    ?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z ; CObjectVector<NArchive::N7z::CMethodFull>::Add(NArchive::N7z::CMethodFull const &)
.text:000020F2                 mov     [ebp+var_DC], 1
.text:000020FC                 mov     edx, [ebp+var_DC]
.text:00002102                 push    edx
.text:00002103                 mov     ecx, [ebp+var_10]
.text:00002106                 add     ecx, 40h ; '@'
.text:00002109                 call    ?Add@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEIUCCoderStreamsInfo@NCoderMixer2@@@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Add(NCoderMixer2::CCoderStreamsInfo)
.text:0000210E                 mov     eax, [ebp+var_48]
.text:00002111                 mov     [ebp+var_F0], eax
.text:00002117                 mov     ecx, [ebp+var_48]
.text:0000211A                 add     ecx, 1
.text:0000211D                 mov     [ebp+var_48], ecx
.text:00002120                 mov     edx, [ebp+var_F0]
.text:00002126                 push    edx
.text:00002127                 mov     ecx, [ebp+var_10]
.text:0000212A                 add     ecx, 58h ; 'X'
.text:0000212D                 call    ?Add@?$CRecordVector@I@@QAEII@Z ; CRecordVector<uint>::Add(uint)
.text:00002132                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002139                 lea     ecx, [ebp+var_D0] ; this
.text:0000213F                 call    ??1CMethodFull@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CMethodFull::~CMethodFull(void)
.text:00002144                 jmp     loc_2098
.text:00002149 ; ---------------------------------------------------------------------------
.text:00002149
.text:00002149 loc_2149:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+12Dj
.text:00002149                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+45Ej ...
.text:00002149                 mov     ecx, [ebp+var_10]
.text:0000214C                 add     ecx, 10h
.text:0000214F                 call    ?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size(void)
.text:00002154                 mov     [ebp+var_E4], eax
.text:0000215A
.text:0000215A loc_215A:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+5FAj
.text:0000215A                 cmp     [ebp+var_E4], 0
.text:00002161                 jz      short loc_219C
.text:00002163                 mov     eax, [ebp+var_E4]
.text:00002169                 sub     eax, 1
.text:0000216C                 mov     [ebp+var_E4], eax
.text:00002172                 mov     ecx, [ebp+var_E4]
.text:00002178                 push    ecx
.text:00002179                 mov     ecx, [ebp+var_10]
.text:0000217C                 add     ecx, 10h
.text:0000217F                 call    ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator[](uint)
.text:00002184                 mov     edx, [eax+14h]
.text:00002187                 push    edx
.text:00002188                 mov     eax, [eax+10h]
.text:0000218B                 push    eax
.text:0000218C                 mov     ecx, [ebp+var_10]
.text:0000218F                 add     ecx, 80h ; 'Ç'
.text:00002195                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:0000219A                 jmp     short loc_215A
.text:0000219C ; ---------------------------------------------------------------------------
.text:0000219C
.text:0000219C loc_219C:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+5C1j
.text:0000219C                 mov     ecx, [ebp+var_10]
.text:0000219F                 add     ecx, 40h ; '@'
.text:000021A2                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:000021A7                 cmp     eax, 10h
.text:000021AA                 jbe     short loc_21B3
.text:000021AC                 mov     eax, 80070057h
.text:000021B1                 jmp     short loc_21F7
.text:000021B3 ; ---------------------------------------------------------------------------
.text:000021B3
.text:000021B3 loc_21B3:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+60Aj
.text:000021B3                 mov     ecx, [ebp+var_10]
.text:000021B6                 add     ecx, 40h ; '@'  ; this
.text:000021B9                 call    ?GetNum_Bonds_and_PackStreams@CBindInfo@NCoderMixer2@@QBEIXZ ; NCoderMixer2::CBindInfo::GetNum_Bonds_and_PackStreams(void)
.text:000021BE                 cmp     eax, 10h
.text:000021C1                 jbe     short loc_21CA
.text:000021C3                 mov     eax, 80070057h
.text:000021C8                 jmp     short loc_21F7
.text:000021CA ; ---------------------------------------------------------------------------
.text:000021CA
.text:000021CA loc_21CA:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+621j
.text:000021CA                 mov     ecx, [ebp+var_10]
.text:000021CD                 add     ecx, 40h ; '@'  ; this
.text:000021D0                 call    ?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ ; NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)
.text:000021D5                 movzx   ecx, al
.text:000021D8                 test    ecx, ecx
.text:000021DA                 jnz     short loc_21E3
.text:000021DC                 mov     eax, 80070057h
.text:000021E1                 jmp     short loc_21F7
.text:000021E3 ; ---------------------------------------------------------------------------
.text:000021E3
.text:000021E3 loc_21E3:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+63Aj
.text:000021E3                 mov     ecx, [ebp+var_10] ; this
.text:000021E6                 call    ?InitBindConv@CEncoder@N7z@NArchive@@AAEXXZ ; NArchive::N7z::CEncoder::InitBindConv(void)
.text:000021EB                 mov     edx, [ebp+var_10]
.text:000021EE                 mov     byte ptr [edx+0B0h], 1
.text:000021F5                 xor     eax, eax
.text:000021F7
.text:000021F7 loc_21F7:                               ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+50j
.text:000021F7                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+2C7j ...
.text:000021F7                 push    edx
.text:000021F8                 mov     ecx, ebp
.text:000021FA                 push    eax
.text:000021FB                 lea     edx, $LN60
.text:00002201                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002206                 pop     eax
.text:00002207                 pop     edx
.text:00002208                 mov     ecx, [ebp+var_C]
.text:0000220B                 mov     large fs:0, ecx
.text:00002212                 pop     ecx
.text:00002213                 pop     edi
.text:00002214                 add     esp, 0F0h
.text:0000221A                 cmp     ebp, esp
.text:0000221C                 call    __RTC_CheckEsp
.text:00002221                 mov     esp, ebp
.text:00002223                 pop     ebp
.text:00002224                 retn
.text:00002224 ?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ endp
.text:00002224
.text:00002224 ; ---------------------------------------------------------------------------
.text:00002225                 align 4
.text:00002228 $LN60           dd 8                    ; DATA XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+65Bo
.text:0000222C                 dd offset $LN59
.text:00002230 $LN59           db 0CCh                 ; DATA XREF: .text:0000222Co
.text:00002231                 db 3 dup(0FFh)
.text:00002234                 dd offset loc_20
.text:00002238                 dd offset $LN50         ; "method"
.text:0000223C                 dd 0FFFFFFC0h, 4
.text:00002244                 dd offset $LN51         ; "coderStreamsInfo"
.text:00002248                 dd 0FFFFFFA8h, 4
.text:00002250                 dd offset $LN52         ; "cod"
.text:00002254                 dd 0FFFFFF98h, 8
.text:0000225C                 dd offset $LN53         ; "bond"
.text:00002260                 dd 0FFFFFF84h, 8
.text:00002268                 dd offset $LN54         ; "mixerBond"
.text:0000226C                 dd 0FFFFFF58h, 8
.text:00002274                 dd offset $LN55         ; "bond"
.text:00002278                 dd 0FFFFFF30h, 20h
.text:00002280                 dd offset $LN56         ; "method"
.text:00002284                 dd 0FFFFFF24h, 4
.text:0000228C                 dd offset $LN57
.text:00002290 $LN57           dd 646F63h              ; DATA XREF: .text:0000228Co
.text:00002294 $LN56           db 'method',0           ; DATA XREF: .text:00002280o
.text:0000229B $LN55           db 'bond',0             ; DATA XREF: .text:00002274o
.text:000022A0 $LN54           db 'mixerBond',0        ; DATA XREF: .text:00002268o
.text:000022AA $LN53           db 'bond',0             ; DATA XREF: .text:0000225Co
.text:000022AF $LN52           db 'cod',0              ; DATA XREF: .text:00002250o
.text:000022B3 $LN51           db 'coderStreamsInfo',0 ; DATA XREF: .text:00002244o
.text:000022C4 $LN50           db 'method',0           ; DATA XREF: .text:00002238o
.text:000022CB                 align 10h
.text:000022D0
.text:000022D0 ; =============== S U B R O U T I N E =======================================
.text:000022D0
.text:000022D0 ; Attributes: bp-based frame
.text:000022D0
.text:000022D0 ; _DWORD __thiscall NArchive::N7z::CEncoder::~CEncoder(NArchive::N7z::CEncoder *__hidden this)
.text:000022D0                 public ??1CEncoder@N7z@NArchive@@QAE@XZ
.text:000022D0 ??1CEncoder@N7z@NArchive@@QAE@XZ proc near
.text:000022D0
.text:000022D0 var_10          = dword ptr -10h
.text:000022D0 var_C           = dword ptr -0Ch
.text:000022D0 var_4           = dword ptr -4
.text:000022D0
.text:000022D0                 push    ebp
.text:000022D1                 mov     ebp, esp
.text:000022D3                 push    0FFFFFFFFh
.text:000022D5                 push    offset __ehhandler$??1CEncoder@N7z@NArchive@@QAE@XZ
.text:000022DA                 mov     eax, large fs:0
.text:000022E0                 push    eax
.text:000022E1                 push    ecx
.text:000022E2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000022E9                 mov     eax, dword ptr ds:___security_cookie
.text:000022EE                 xor     eax, ebp
.text:000022F0                 push    eax
.text:000022F1                 lea     eax, [ebp+var_C]
.text:000022F4                 mov     large fs:0, eax
.text:000022FA                 mov     [ebp+var_10], ecx
.text:000022FD                 mov     [ebp+var_4], 5
.text:00002304                 mov     ecx, [ebp+var_10]
.text:00002307                 add     ecx, 0A4h ; 'ñ'
.text:0000230D                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00002312                 mov     byte ptr [ebp+var_4], 4
.text:00002316                 mov     ecx, [ebp+var_10]
.text:00002319                 add     ecx, 98h ; 'ÿ'
.text:0000231F                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00002324                 mov     byte ptr [ebp+var_4], 3
.text:00002328                 mov     ecx, [ebp+var_10]
.text:0000232B                 add     ecx, 8Ch ; 'î'
.text:00002331                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00002336                 mov     byte ptr [ebp+var_4], 2
.text:0000233A                 mov     ecx, [ebp+var_10]
.text:0000233D                 add     ecx, 80h ; 'Ç'
.text:00002343                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00002348                 mov     byte ptr [ebp+var_4], 1
.text:0000234C                 mov     ecx, [ebp+var_10]
.text:0000234F                 add     ecx, 40h ; '@'  ; this
.text:00002352                 call    ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text:00002357                 mov     byte ptr [ebp+var_4], 0
.text:0000235B                 mov     ecx, [ebp+var_10]
.text:0000235E                 add     ecx, 10h        ; this
.text:00002361                 call    ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text:00002366                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000236D                 mov     ecx, [ebp+var_10]
.text:00002370                 add     ecx, 0Ch
.text:00002373                 call    ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text:00002378                 mov     ecx, [ebp+var_C]
.text:0000237B                 mov     large fs:0, ecx
.text:00002382                 pop     ecx
.text:00002383                 add     esp, 10h
.text:00002386                 cmp     ebp, esp
.text:00002388                 call    __RTC_CheckEsp
.text:0000238D                 mov     esp, ebp
.text:0000238F                 pop     ebp
.text:00002390                 retn
.text:00002390 ??1CEncoder@N7z@NArchive@@QAE@XZ endp
.text:00002390
.text:00002390 ; ---------------------------------------------------------------------------
.text:00002391                 align 4
.text:00002391 _text           ends
.text:00002391
.rtc$TMZ:00002394 ; ===========================================================================
.rtc$TMZ:00002394
.rtc$TMZ:00002394 ; Segment type: Pure data
.rtc$TMZ:00002394 ; Segment permissions: Read
.rtc$TMZ:00002394 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00002394                 assume cs:_rtc$TMZ
.rtc$TMZ:00002394                 ;org 2394h
.rtc$TMZ:00002394 ; COMDAT (pick any)
.rtc$TMZ:00002394 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00002394 _rtc$TMZ        ends
.rtc$TMZ:00002394
.rtc$IMZ:00002398 ; ===========================================================================
.rtc$IMZ:00002398
.rtc$IMZ:00002398 ; Segment type: Pure data
.rtc$IMZ:00002398 ; Segment permissions: Read
.rtc$IMZ:00002398 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00002398                 assume cs:_rtc$IMZ
.rtc$IMZ:00002398                 ;org 2398h
.rtc$IMZ:00002398 ; COMDAT (pick any)
.rtc$IMZ:00002398 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00002398 _rtc$IMZ        ends
.rtc$IMZ:00002398
.text:0000239C ; ===========================================================================
.text:0000239C
.text:0000239C ; Segment type: Pure code
.text:0000239C ; Segment permissions: Read/Execute
.text:0000239C _text           segment para public 'CODE' use32
.text:0000239C                 assume cs:_text
.text:0000239C                 ;org 239Ch
.text:0000239C ; COMDAT (pick any)
.text:0000239C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000239C
.text:0000239C ; =============== S U B R O U T I N E =======================================
.text:0000239C
.text:0000239C ; Attributes: bp-based frame
.text:0000239C
.text:0000239C ; unsigned int __thiscall NCoderMixer2::CBindInfo::GetNum_Bonds_and_PackStreams(NCoderMixer2::CBindInfo *__hidden this)
.text:0000239C                 public ?GetNum_Bonds_and_PackStreams@CBindInfo@NCoderMixer2@@QBEIXZ
.text:0000239C ?GetNum_Bonds_and_PackStreams@CBindInfo@NCoderMixer2@@QBEIXZ proc near
.text:0000239C                                         ; CODE XREF: NArchive::N7z::CEncoder::InitBindConv(void)+61p
.text:0000239C                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+619p
.text:0000239C
.text:0000239C var_4           = dword ptr -4
.text:0000239C
.text:0000239C                 push    ebp
.text:0000239D                 mov     ebp, esp
.text:0000239F                 push    ecx
.text:000023A0                 push    esi
.text:000023A1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000023A8                 mov     [ebp+var_4], ecx
.text:000023AB                 mov     ecx, [ebp+var_4]
.text:000023AE                 add     ecx, 0Ch
.text:000023B1                 call    ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size(void)
.text:000023B6                 mov     esi, eax
.text:000023B8                 mov     ecx, [ebp+var_4]
.text:000023BB                 add     ecx, 18h
.text:000023BE                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:000023C3                 add     eax, esi
.text:000023C5                 pop     esi
.text:000023C6                 add     esp, 4
.text:000023C9                 cmp     ebp, esp
.text:000023CB                 call    __RTC_CheckEsp
.text:000023D0                 mov     esp, ebp
.text:000023D2                 pop     ebp
.text:000023D3                 retn
.text:000023D3 ?GetNum_Bonds_and_PackStreams@CBindInfo@NCoderMixer2@@QBEIXZ endp
.text:000023D3
.text:000023D3 _text           ends
.text:000023D3
.text:000023D4 ; ===========================================================================
.text:000023D4
.text:000023D4 ; Segment type: Pure code
.text:000023D4 ; Segment permissions: Read/Execute
.text:000023D4 _text           segment para public 'CODE' use32
.text:000023D4                 assume cs:_text
.text:000023D4                 ;org 23D4h
.text:000023D4 ; COMDAT (pick any)
.text:000023D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000023D4
.text:000023D4 ; =============== S U B R O U T I N E =======================================
.text:000023D4
.text:000023D4 ; Attributes: bp-based frame
.text:000023D4
.text:000023D4 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSectionLock *this, struct NWindows::NSynchronization::CCriticalSection *)
.text:000023D4                 public ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z
.text:000023D4 ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z proc near
.text:000023D4                                         ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+2Ep
.text:000023D4                                         ; NArchive::N7z::CMtEncMultiProgress::AddOutSize(unsigned __int64)+24p
.text:000023D4
.text:000023D4 var_4           = dword ptr -4
.text:000023D4 arg_0           = dword ptr  8
.text:000023D4
.text:000023D4                 push    ebp
.text:000023D5                 mov     ebp, esp
.text:000023D7                 push    ecx
.text:000023D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000023DF                 mov     [ebp+var_4], ecx
.text:000023E2                 mov     eax, [ebp+var_4]
.text:000023E5                 mov     ecx, [ebp+arg_0]
.text:000023E8                 mov     [eax], ecx
.text:000023EA                 mov     edx, [ebp+var_4]
.text:000023ED                 mov     ecx, [edx]      ; this
.text:000023EF                 call    ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter(void)
.text:000023F4                 mov     eax, [ebp+var_4]
.text:000023F7                 add     esp, 4
.text:000023FA                 cmp     ebp, esp
.text:000023FC                 call    __RTC_CheckEsp
.text:00002401                 mov     esp, ebp
.text:00002403                 pop     ebp
.text:00002404                 retn    4
.text:00002404 ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z endp
.text:00002404
.text:00002404 ; ---------------------------------------------------------------------------
.text:00002407                 align 4
.text:00002407 _text           ends
.text:00002407
.text:00002408 ; ===========================================================================
.text:00002408
.text:00002408 ; Segment type: Pure code
.text:00002408 ; Segment permissions: Read/Execute
.text:00002408 _text           segment para public 'CODE' use32
.text:00002408                 assume cs:_text
.text:00002408                 ;org 2408h
.text:00002408 ; COMDAT (pick any)
.text:00002408                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002408
.text:00002408 ; =============== S U B R O U T I N E =======================================
.text:00002408
.text:00002408 ; Attributes: bp-based frame
.text:00002408
.text:00002408 ; void __thiscall NWindows::NSynchronization::CCriticalSection::Enter(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00002408                 public ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:00002408 ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:00002408                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)+1Bp
.text:00002408
.text:00002408 lpCriticalSection= dword ptr -4
.text:00002408
.text:00002408                 push    ebp
.text:00002409                 mov     ebp, esp
.text:0000240B                 push    ecx
.text:0000240C                 push    esi
.text:0000240D                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00002414                 mov     [ebp+lpCriticalSection], ecx
.text:00002417                 mov     esi, esp
.text:00002419                 mov     eax, [ebp+lpCriticalSection]
.text:0000241C                 push    eax             ; lpCriticalSection
.text:0000241D                 call    dword ptr ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:00002423                 cmp     esi, esp
.text:00002425                 call    __RTC_CheckEsp
.text:0000242A                 pop     esi
.text:0000242B                 add     esp, 4
.text:0000242E                 cmp     ebp, esp
.text:00002430                 call    __RTC_CheckEsp
.text:00002435                 mov     esp, ebp
.text:00002437                 pop     ebp
.text:00002438                 retn
.text:00002438 ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:00002438
.text:00002438 ; ---------------------------------------------------------------------------
.text:00002439                 align 4
.text:00002439 _text           ends
.text:00002439
.text:0000243C ; ===========================================================================
.text:0000243C
.text:0000243C ; Segment type: Pure code
.text:0000243C ; Segment permissions: Read/Execute
.text:0000243C _text           segment para public 'CODE' use32
.text:0000243C                 assume cs:_text
.text:0000243C                 ;org 243Ch
.text:0000243C ; COMDAT (pick any)
.text:0000243C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000243C
.text:0000243C ; =============== S U B R O U T I N E =======================================
.text:0000243C
.text:0000243C ; Attributes: bp-based frame
.text:0000243C
.text:0000243C ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(NWindows::NSynchronization::CCriticalSectionLock *__hidden this)
.text:0000243C                 public ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ
.text:0000243C ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ proc near
.text:0000243C                                         ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+45p
.text:0000243C                                         ; NArchive::N7z::CMtEncMultiProgress::AddOutSize(unsigned __int64)+44p
.text:0000243C
.text:0000243C var_4           = dword ptr -4
.text:0000243C
.text:0000243C                 push    ebp
.text:0000243D                 mov     ebp, esp
.text:0000243F                 push    ecx
.text:00002440                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002447                 mov     [ebp+var_4], ecx
.text:0000244A                 mov     ecx, [ebp+var_4] ; this
.text:0000244D                 call    ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock(void)
.text:00002452                 add     esp, 4
.text:00002455                 cmp     ebp, esp
.text:00002457                 call    __RTC_CheckEsp
.text:0000245C                 mov     esp, ebp
.text:0000245E                 pop     ebp
.text:0000245F                 retn
.text:0000245F ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ endp
.text:0000245F
.text:0000245F _text           ends
.text:0000245F
.text:00002460 ; ===========================================================================
.text:00002460
.text:00002460 ; Segment type: Pure code
.text:00002460 ; Segment permissions: Read/Execute
.text:00002460 _text           segment para public 'CODE' use32
.text:00002460                 assume cs:_text
.text:00002460                 ;org 2460h
.text:00002460 ; COMDAT (pick any)
.text:00002460                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002460
.text:00002460 ; =============== S U B R O U T I N E =======================================
.text:00002460
.text:00002460 ; Attributes: bp-based frame
.text:00002460
.text:00002460 ; void __thiscall NWindows::NSynchronization::CCriticalSectionLock::Unlock(NWindows::NSynchronization::CCriticalSectionLock *__hidden this)
.text:00002460                 public ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ
.text:00002460 ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ proc near
.text:00002460                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)+11p
.text:00002460
.text:00002460 var_4           = dword ptr -4
.text:00002460
.text:00002460                 push    ebp
.text:00002461                 mov     ebp, esp
.text:00002463                 push    ecx
.text:00002464                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000246B                 mov     [ebp+var_4], ecx
.text:0000246E                 mov     eax, [ebp+var_4]
.text:00002471                 mov     ecx, [eax]      ; this
.text:00002473                 call    ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave(void)
.text:00002478                 add     esp, 4
.text:0000247B                 cmp     ebp, esp
.text:0000247D                 call    __RTC_CheckEsp
.text:00002482                 mov     esp, ebp
.text:00002484                 pop     ebp
.text:00002485                 retn
.text:00002485 ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ endp
.text:00002485
.text:00002485 ; ---------------------------------------------------------------------------
.text:00002486                 align 4
.text:00002486 _text           ends
.text:00002486
.text:00002488 ; ===========================================================================
.text:00002488
.text:00002488 ; Segment type: Pure code
.text:00002488 ; Segment permissions: Read/Execute
.text:00002488 _text           segment para public 'CODE' use32
.text:00002488                 assume cs:_text
.text:00002488                 ;org 2488h
.text:00002488 ; COMDAT (pick any)
.text:00002488                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002488
.text:00002488 ; =============== S U B R O U T I N E =======================================
.text:00002488
.text:00002488 ; Attributes: bp-based frame
.text:00002488
.text:00002488 ; void __thiscall NWindows::NSynchronization::CCriticalSection::Leave(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00002488                 public ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:00002488 ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:00002488                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::Unlock(void)+13p
.text:00002488
.text:00002488 lpCriticalSection= dword ptr -4
.text:00002488
.text:00002488                 push    ebp
.text:00002489                 mov     ebp, esp
.text:0000248B                 push    ecx
.text:0000248C                 push    esi
.text:0000248D                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00002494                 mov     [ebp+lpCriticalSection], ecx
.text:00002497                 mov     esi, esp
.text:00002499                 mov     eax, [ebp+lpCriticalSection]
.text:0000249C                 push    eax             ; lpCriticalSection
.text:0000249D                 call    dword ptr ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:000024A3                 cmp     esi, esp
.text:000024A5                 call    __RTC_CheckEsp
.text:000024AA                 pop     esi
.text:000024AB                 add     esp, 4
.text:000024AE                 cmp     ebp, esp
.text:000024B0                 call    __RTC_CheckEsp
.text:000024B5                 mov     esp, ebp
.text:000024B7                 pop     ebp
.text:000024B8                 retn
.text:000024B8 ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:000024B8
.text:000024B8 ; ---------------------------------------------------------------------------
.text:000024B9                 align 4
.text:000024B9 _text           ends
.text:000024B9
.text$x:000024BC ; ===========================================================================
.text$x:000024BC
.text$x:000024BC ; Segment type: Pure code
.text$x:000024BC ; Segment permissions: Read/Execute
.text$x:000024BC _text$x         segment para public 'CODE' use32
.text$x:000024BC                 assume cs:_text$x
.text$x:000024BC                 ;org 24BCh
.text$x:000024BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000024BC
.text$x:000024BC ; =============== S U B R O U T I N E =======================================
.text$x:000024BC
.text$x:000024BC
.text$x:000024BC __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$0 proc near
.text$x:000024BC                                         ; DATA XREF: .xdata$x:0000275Co
.text$x:000024BC                 mov     eax, [ebp-8Ch]
.text$x:000024C2                 push    eax             ; void *
.text$x:000024C3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000024C8                 pop     ecx
.text$x:000024C9                 retn
.text$x:000024C9 __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$0 endp
.text$x:000024C9
.text$x:000024CA
.text$x:000024CA ; =============== S U B R O U T I N E =======================================
.text$x:000024CA
.text$x:000024CA
.text$x:000024CA __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$1 proc near
.text$x:000024CA                                         ; DATA XREF: .xdata$x:00002764o
.text$x:000024CA                 mov     eax, [ebp-94h]
.text$x:000024D0                 push    eax             ; void *
.text$x:000024D1                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000024D6                 pop     ecx
.text$x:000024D7                 retn
.text$x:000024D7 __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$1 endp
.text$x:000024D7
.text$x:000024D8
.text$x:000024D8 ; =============== S U B R O U T I N E =======================================
.text$x:000024D8
.text$x:000024D8
.text$x:000024D8 __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$2 proc near
.text$x:000024D8                                         ; DATA XREF: .xdata$x:0000276Co
.text$x:000024D8                 lea     ecx, [ebp-30h]  ; this
.text$x:000024DB                 jmp     ??1CCreatedCoder@@QAE@XZ ; CCreatedCoder::~CCreatedCoder(void)
.text$x:000024DB __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$2 endp
.text$x:000024DB
.text$x:000024E0
.text$x:000024E0 ; =============== S U B R O U T I N E =======================================
.text$x:000024E0
.text$x:000024E0
.text$x:000024E0 __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$3 proc near
.text$x:000024E0                                         ; DATA XREF: .xdata$x:00002774o
.text$x:000024E0                 lea     ecx, [ebp-40h]
.text$x:000024E3                 jmp     ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text$x:000024E3 __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$3 endp
.text$x:000024E3
.text$x:000024E8
.text$x:000024E8 ; =============== S U B R O U T I N E =======================================
.text$x:000024E8
.text$x:000024E8
.text$x:000024E8 __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$4 proc near
.text$x:000024E8                                         ; DATA XREF: .xdata$x:0000277Co
.text$x:000024E8                 lea     ecx, [ebp-4Ch]
.text$x:000024EB                 jmp     ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>(void)
.text$x:000024EB __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$4 endp
.text$x:000024EB
.text$x:000024F0
.text$x:000024F0 ; =============== S U B R O U T I N E =======================================
.text$x:000024F0
.text$x:000024F0
.text$x:000024F0 __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$5 proc near
.text$x:000024F0                                         ; DATA XREF: .xdata$x:00002784o
.text$x:000024F0                 lea     ecx, [ebp-60h]
.text$x:000024F3                 jmp     ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)
.text$x:000024F3 __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$5 endp
.text$x:000024F3
.text$x:000024F8
.text$x:000024F8 ; =============== S U B R O U T I N E =======================================
.text$x:000024F8
.text$x:000024F8
.text$x:000024F8 __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$6 proc near
.text$x:000024F8                                         ; DATA XREF: .xdata$x:0000278Co
.text$x:000024F8                 lea     ecx, [ebp-74h]
.text$x:000024FB                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:000024FB __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$6 endp
.text$x:000024FB
.text$x:00002500
.text$x:00002500 ; =============== S U B R O U T I N E =======================================
.text$x:00002500
.text$x:00002500
.text$x:00002500 __ehhandler$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z proc near
.text$x:00002500                                         ; DATA XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+5o
.text$x:00002500
.text$x:00002500 arg_4           = dword ptr  8
.text$x:00002500
.text$x:00002500                 mov     edx, [esp+arg_4]
.text$x:00002504                 lea     eax, [edx+0Ch]
.text$x:00002507                 mov     ecx, [edx-0D0h]
.text$x:0000250D                 xor     ecx, eax
.text$x:0000250F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002514                 mov     eax, offset __ehfuncinfo$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z
.text$x:00002519                 jmp     ___CxxFrameHandler3
.text$x:00002519 __ehhandler$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z endp
.text$x:00002519
.text$x:0000251E
.text$x:0000251E ; =============== S U B R O U T I N E =======================================
.text$x:0000251E
.text$x:0000251E
.text$x:0000251E __unwindfunclet$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z$0 proc near
.text$x:0000251E                                         ; DATA XREF: .xdata$x:00002794o
.text$x:0000251E                 lea     ecx, [ebp-14h]
.text$x:00002521                 jmp     ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>(void)
.text$x:00002521 __unwindfunclet$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z$0 endp
.text$x:00002521
.text$x:00002526
.text$x:00002526 ; =============== S U B R O U T I N E =======================================
.text$x:00002526
.text$x:00002526
.text$x:00002526 __ehhandler$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z proc near
.text$x:00002526                                         ; DATA XREF: NArchive::N7z::SetCoderProps2(CProps const &,unsigned __int64 const *,IUnknown *)+5o
.text$x:00002526
.text$x:00002526 arg_4           = dword ptr  8
.text$x:00002526
.text$x:00002526                 mov     edx, [esp+arg_4]
.text$x:0000252A                 lea     eax, [edx+0Ch]
.text$x:0000252D                 mov     ecx, [edx-1Ch]
.text$x:00002530                 xor     ecx, eax
.text$x:00002532                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002537                 mov     eax, offset __ehfuncinfo$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z
.text$x:0000253C                 jmp     ___CxxFrameHandler3
.text$x:0000253C __ehhandler$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z endp
.text$x:0000253C
.text$x:00002541
.text$x:00002541 ; =============== S U B R O U T I N E =======================================
.text$x:00002541
.text$x:00002541
.text$x:00002541 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$0 proc near
.text$x:00002541                                         ; DATA XREF: .xdata$x:000027E4o
.text$x:00002541                 lea     ecx, [ebp-24h]
.text$x:00002544                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:00002544 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$0 endp
.text$x:00002544
.text$x:00002549
.text$x:00002549 ; =============== S U B R O U T I N E =======================================
.text$x:00002549
.text$x:00002549
.text$x:00002549 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$1 proc near
.text$x:00002549                                         ; DATA XREF: .xdata$x:000027ECo
.text$x:00002549                 lea     ecx, [ebp-34h]
.text$x:0000254C                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:0000254C __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$1 endp
.text$x:0000254C
.text$x:00002551
.text$x:00002551 ; =============== S U B R O U T I N E =======================================
.text$x:00002551
.text$x:00002551
.text$x:00002551 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$2 proc near
.text$x:00002551                                         ; DATA XREF: .xdata$x:000027F4o
.text$x:00002551                 lea     ecx, [ebp-48h]
.text$x:00002554                 jmp     ??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ ; CObjectVector<CInOutTempBuffer>::~CObjectVector<CInOutTempBuffer>(void)
.text$x:00002554 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$2 endp
.text$x:00002554
.text$x:00002559
.text$x:00002559 ; =============== S U B R O U T I N E =======================================
.text$x:00002559
.text$x:00002559
.text$x:00002559 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$3 proc near
.text$x:00002559                                         ; DATA XREF: .xdata$x:000027FCo
.text$x:00002559                 lea     ecx, [ebp-5Ch]
.text$x:0000255C                 jmp     ??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::~CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>(void)
.text$x:0000255C __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$3 endp
.text$x:0000255C
.text$x:00002561
.text$x:00002561 ; =============== S U B R O U T I N E =======================================
.text$x:00002561
.text$x:00002561
.text$x:00002561 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$4 proc near
.text$x:00002561                                         ; DATA XREF: .xdata$x:00002804o
.text$x:00002561                 lea     ecx, [ebp-70h]
.text$x:00002564                 jmp     ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)
.text$x:00002564 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$4 endp
.text$x:00002564
.text$x:00002569
.text$x:00002569 ; =============== S U B R O U T I N E =======================================
.text$x:00002569
.text$x:00002569
.text$x:00002569 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$5 proc near
.text$x:00002569                                         ; DATA XREF: .xdata$x:0000280Co
.text$x:00002569                 mov     eax, [ebp-134h]
.text$x:0000256F                 push    eax             ; void *
.text$x:00002570                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00002575                 pop     ecx
.text$x:00002576                 retn
.text$x:00002576 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$5 endp
.text$x:00002576
.text$x:00002577
.text$x:00002577 ; =============== S U B R O U T I N E =======================================
.text$x:00002577
.text$x:00002577
.text$x:00002577 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$6 proc near
.text$x:00002577                                         ; DATA XREF: .xdata$x:00002814o
.text$x:00002577                 lea     ecx, [ebp-94h]
.text$x:0000257D                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:0000257D __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$6 endp
.text$x:0000257D
.text$x:00002582
.text$x:00002582 ; =============== S U B R O U T I N E =======================================
.text$x:00002582
.text$x:00002582
.text$x:00002582 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$7 proc near
.text$x:00002582                                         ; DATA XREF: .xdata$x:0000281Co
.text$x:00002582                 mov     eax, [ebp-13Ch]
.text$x:00002588                 push    eax             ; void *
.text$x:00002589                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000258E                 pop     ecx
.text$x:0000258F                 retn
.text$x:0000258F __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$7 endp
.text$x:0000258F
.text$x:00002590
.text$x:00002590 ; =============== S U B R O U T I N E =======================================
.text$x:00002590
.text$x:00002590
.text$x:00002590 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$8 proc near
.text$x:00002590                                         ; DATA XREF: .xdata$x:00002824o
.text$x:00002590                 lea     ecx, [ebp-0A4h]
.text$x:00002596                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00002596 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$8 endp
.text$x:00002596
.text$x:0000259B
.text$x:0000259B ; =============== S U B R O U T I N E =======================================
.text$x:0000259B
.text$x:0000259B
.text$x:0000259B __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$9 proc near
.text$x:0000259B                                         ; DATA XREF: .xdata$x:0000282Co
.text$x:0000259B                 lea     ecx, [ebp-0B4h]
.text$x:000025A1                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:000025A1 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$9 endp
.text$x:000025A1
.text$x:000025A6
.text$x:000025A6 ; =============== S U B R O U T I N E =======================================
.text$x:000025A6
.text$x:000025A6
.text$x:000025A6 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$10 proc near
.text$x:000025A6                                         ; DATA XREF: .xdata$x:00002834o
.text$x:000025A6                 lea     ecx, [ebp-0D4h]
.text$x:000025AC                 jmp     ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>(void)
.text$x:000025AC __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$10 endp
.text$x:000025AC
.text$x:000025B1
.text$x:000025B1 ; =============== S U B R O U T I N E =======================================
.text$x:000025B1
.text$x:000025B1
.text$x:000025B1 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$11 proc near
.text$x:000025B1                                         ; DATA XREF: .xdata$x:0000283Co
.text$x:000025B1                 lea     ecx, [ebp-0E4h]
.text$x:000025B7                 jmp     ??1?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ ; CMyComPtr<ICryptoResetInitVector>::~CMyComPtr<ICryptoResetInitVector>(void)
.text$x:000025B7 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$11 endp
.text$x:000025B7
.text$x:000025BC
.text$x:000025BC ; =============== S U B R O U T I N E =======================================
.text$x:000025BC
.text$x:000025BC
.text$x:000025BC __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$12 proc near
.text$x:000025BC                                         ; DATA XREF: .xdata$x:00002844o
.text$x:000025BC                 lea     ecx, [ebp-0F0h]
.text$x:000025C2                 jmp     ??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressWriteCoderProperties>::~CMyComPtr<ICompressWriteCoderProperties>(void)
.text$x:000025C2 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$12 endp
.text$x:000025C2
.text$x:000025C7
.text$x:000025C7 ; =============== S U B R O U T I N E =======================================
.text$x:000025C7
.text$x:000025C7
.text$x:000025C7 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$13 proc near
.text$x:000025C7                                         ; DATA XREF: .xdata$x:0000284Co
.text$x:000025C7                 mov     eax, [ebp-144h]
.text$x:000025CD                 push    eax             ; void *
.text$x:000025CE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000025D3                 pop     ecx
.text$x:000025D4                 retn
.text$x:000025D4 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$13 endp
.text$x:000025D4
.text$x:000025D5
.text$x:000025D5 ; =============== S U B R O U T I N E =======================================
.text$x:000025D5
.text$x:000025D5
.text$x:000025D5 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$14 proc near
.text$x:000025D5                                         ; DATA XREF: .xdata$x:00002854o
.text$x:000025D5                 lea     ecx, [ebp-104h]
.text$x:000025DB                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:000025DB __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$14 endp
.text$x:000025DB
.text$x:000025E0
.text$x:000025E0 ; =============== S U B R O U T I N E =======================================
.text$x:000025E0
.text$x:000025E0
.text$x:000025E0 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$15 proc near
.text$x:000025E0                                         ; DATA XREF: .xdata$x:0000285Co
.text$x:000025E0                 mov     eax, [ebp-14Ch]
.text$x:000025E6                 push    eax             ; void *
.text$x:000025E7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000025EC                 pop     ecx
.text$x:000025ED                 retn
.text$x:000025ED __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$15 endp
.text$x:000025ED
.text$x:000025EE
.text$x:000025EE ; =============== S U B R O U T I N E =======================================
.text$x:000025EE
.text$x:000025EE
.text$x:000025EE __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$16 proc near
.text$x:000025EE                                         ; DATA XREF: .xdata$x:00002864o
.text$x:000025EE                 mov     eax, [ebp-154h]
.text$x:000025F4                 push    eax             ; void *
.text$x:000025F5                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000025FA                 pop     ecx
.text$x:000025FB                 retn
.text$x:000025FB __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$16 endp
.text$x:000025FB
.text$x:000025FC
.text$x:000025FC ; =============== S U B R O U T I N E =======================================
.text$x:000025FC
.text$x:000025FC
.text$x:000025FC __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$17 proc near
.text$x:000025FC                                         ; DATA XREF: .xdata$x:0000286Co
.text$x:000025FC                 mov     eax, [ebp-15Ch]
.text$x:00002602                 push    eax             ; void *
.text$x:00002603                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00002608                 pop     ecx
.text$x:00002609                 retn
.text$x:00002609 __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$17 endp
.text$x:00002609
.text$x:0000260A
.text$x:0000260A ; =============== S U B R O U T I N E =======================================
.text$x:0000260A
.text$x:0000260A
.text$x:0000260A __ehhandler$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z proc near
.text$x:0000260A                                         ; DATA XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+5o
.text$x:0000260A
.text$x:0000260A arg_4           = dword ptr  8
.text$x:0000260A
.text$x:0000260A                 mov     edx, [esp+arg_4]
.text$x:0000260E                 lea     eax, [edx+0Ch]
.text$x:00002611                 mov     ecx, [edx-190h]
.text$x:00002617                 xor     ecx, eax
.text$x:00002619                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000261E                 mov     eax, offset __ehfuncinfo$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z
.text$x:00002623                 jmp     ___CxxFrameHandler3
.text$x:00002623 __ehhandler$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z endp
.text$x:00002623
.text$x:00002628
.text$x:00002628 ; =============== S U B R O U T I N E =======================================
.text$x:00002628
.text$x:00002628
.text$x:00002628 __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$0 proc near
.text$x:00002628                                         ; DATA XREF: .xdata$x:00002898o
.text$x:00002628                 mov     ecx, [ebp-10h]
.text$x:0000262B                 add     ecx, 0Ch
.text$x:0000262E                 jmp     ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text$x:0000262E __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$0 endp
.text$x:0000262E
.text$x:00002633
.text$x:00002633 ; =============== S U B R O U T I N E =======================================
.text$x:00002633
.text$x:00002633
.text$x:00002633 __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$1 proc near
.text$x:00002633                                         ; DATA XREF: .xdata$x:000028A0o
.text$x:00002633                 mov     ecx, [ebp-10h]
.text$x:00002636                 add     ecx, 10h        ; this
.text$x:00002639                 jmp     ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text$x:00002639 __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$1 endp
.text$x:00002639
.text$x:0000263E
.text$x:0000263E ; =============== S U B R O U T I N E =======================================
.text$x:0000263E
.text$x:0000263E
.text$x:0000263E __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$2 proc near
.text$x:0000263E                                         ; DATA XREF: .xdata$x:000028A8o
.text$x:0000263E                 mov     ecx, [ebp-10h]
.text$x:00002641                 add     ecx, 40h ; '@'  ; this
.text$x:00002644                 jmp     ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text$x:00002644 __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$2 endp
.text$x:00002644
.text$x:00002649
.text$x:00002649 ; =============== S U B R O U T I N E =======================================
.text$x:00002649
.text$x:00002649
.text$x:00002649 __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$3 proc near
.text$x:00002649                                         ; DATA XREF: .xdata$x:000028B0o
.text$x:00002649                 mov     ecx, [ebp-10h]
.text$x:0000264C                 add     ecx, 80h ; 'Ç'
.text$x:00002652                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:00002652 __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$3 endp
.text$x:00002652
.text$x:00002657
.text$x:00002657 ; =============== S U B R O U T I N E =======================================
.text$x:00002657
.text$x:00002657
.text$x:00002657 __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$4 proc near
.text$x:00002657                                         ; DATA XREF: .xdata$x:000028B8o
.text$x:00002657                 mov     ecx, [ebp-10h]
.text$x:0000265A                 add     ecx, 8Ch ; 'î'
.text$x:00002660                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:00002660 __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$4 endp
.text$x:00002660
.text$x:00002665
.text$x:00002665 ; =============== S U B R O U T I N E =======================================
.text$x:00002665
.text$x:00002665
.text$x:00002665 __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$5 proc near
.text$x:00002665                                         ; DATA XREF: .xdata$x:000028C0o
.text$x:00002665                 mov     ecx, [ebp-10h]
.text$x:00002668                 add     ecx, 98h ; 'ÿ'
.text$x:0000266E                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:0000266E __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$5 endp
.text$x:0000266E
.text$x:00002673
.text$x:00002673 ; =============== S U B R O U T I N E =======================================
.text$x:00002673
.text$x:00002673
.text$x:00002673 __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$6 proc near
.text$x:00002673                                         ; DATA XREF: .xdata$x:000028C8o
.text$x:00002673                 mov     ecx, [ebp-10h]
.text$x:00002676                 add     ecx, 0A4h ; 'ñ'
.text$x:0000267C                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:0000267C __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$6 endp
.text$x:0000267C
.text$x:00002681
.text$x:00002681 ; =============== S U B R O U T I N E =======================================
.text$x:00002681
.text$x:00002681
.text$x:00002681 __ehhandler$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z proc near
.text$x:00002681                                         ; DATA XREF: NArchive::N7z::CEncoder::CEncoder(NArchive::N7z::CCompressionMethodMode const &)+5o
.text$x:00002681
.text$x:00002681 arg_4           = dword ptr  8
.text$x:00002681
.text$x:00002681                 mov     edx, [esp+arg_4]
.text$x:00002685                 lea     eax, [edx+0Ch]
.text$x:00002688                 mov     ecx, [edx-0Ch]
.text$x:0000268B                 xor     ecx, eax
.text$x:0000268D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002692                 mov     eax, offset __ehfuncinfo$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
.text$x:00002697                 jmp     ___CxxFrameHandler3
.text$x:00002697 __ehhandler$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z endp
.text$x:00002697
.text$x:0000269C
.text$x:0000269C ; =============== S U B R O U T I N E =======================================
.text$x:0000269C
.text$x:0000269C
.text$x:0000269C __unwindfunclet$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ$0 proc near
.text$x:0000269C                                         ; DATA XREF: .xdata$x:000028D0o
.text$x:0000269C                 lea     ecx, [ebp-34h]  ; this
.text$x:0000269F                 jmp     ??1CMethodFull@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CMethodFull::~CMethodFull(void)
.text$x:0000269F __unwindfunclet$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ$0 endp
.text$x:0000269F
.text$x:000026A4
.text$x:000026A4 ; =============== S U B R O U T I N E =======================================
.text$x:000026A4
.text$x:000026A4
.text$x:000026A4 __unwindfunclet$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ$1 proc near
.text$x:000026A4                                         ; DATA XREF: .xdata$x:000028D8o
.text$x:000026A4                 lea     ecx, [ebp-0D0h] ; this
.text$x:000026AA                 jmp     ??1CMethodFull@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CMethodFull::~CMethodFull(void)
.text$x:000026AA __unwindfunclet$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ$1 endp
.text$x:000026AA
.text$x:000026AF
.text$x:000026AF ; =============== S U B R O U T I N E =======================================
.text$x:000026AF
.text$x:000026AF
.text$x:000026AF __ehhandler$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ proc near
.text$x:000026AF                                         ; DATA XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+5o
.text$x:000026AF
.text$x:000026AF arg_4           = dword ptr  8
.text$x:000026AF
.text$x:000026AF                 mov     edx, [esp+arg_4]
.text$x:000026B3                 lea     eax, [edx+0Ch]
.text$x:000026B6                 mov     ecx, [edx-0ECh]
.text$x:000026BC                 xor     ecx, eax
.text$x:000026BE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000026C3                 mov     eax, offset __ehfuncinfo$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ
.text$x:000026C8                 jmp     ___CxxFrameHandler3
.text$x:000026C8 __ehhandler$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ endp
.text$x:000026C8
.text$x:000026CD
.text$x:000026CD ; =============== S U B R O U T I N E =======================================
.text$x:000026CD
.text$x:000026CD
.text$x:000026CD __unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:000026CD                                         ; DATA XREF: .xdata$x:00002928o
.text$x:000026CD                 mov     ecx, [ebp-10h]
.text$x:000026D0                 add     ecx, 0Ch
.text$x:000026D3                 jmp     ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text$x:000026D3 __unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$0 endp
.text$x:000026D3
.text$x:000026D8
.text$x:000026D8 ; =============== S U B R O U T I N E =======================================
.text$x:000026D8
.text$x:000026D8
.text$x:000026D8 __unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:000026D8                                         ; DATA XREF: .xdata$x:00002930o
.text$x:000026D8                 mov     ecx, [ebp-10h]
.text$x:000026DB                 add     ecx, 10h        ; this
.text$x:000026DE                 jmp     ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)
.text$x:000026DE __unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$1 endp
.text$x:000026DE
.text$x:000026E3
.text$x:000026E3 ; =============== S U B R O U T I N E =======================================
.text$x:000026E3
.text$x:000026E3
.text$x:000026E3 __unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$2 proc near
.text$x:000026E3                                         ; DATA XREF: .xdata$x:00002938o
.text$x:000026E3                 mov     ecx, [ebp-10h]
.text$x:000026E6                 add     ecx, 40h ; '@'  ; this
.text$x:000026E9                 jmp     ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text$x:000026E9 __unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$2 endp
.text$x:000026E9
.text$x:000026EE
.text$x:000026EE ; =============== S U B R O U T I N E =======================================
.text$x:000026EE
.text$x:000026EE
.text$x:000026EE __unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$3 proc near
.text$x:000026EE                                         ; DATA XREF: .xdata$x:00002940o
.text$x:000026EE                 mov     ecx, [ebp-10h]
.text$x:000026F1                 add     ecx, 80h ; 'Ç'
.text$x:000026F7                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:000026F7 __unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$3 endp
.text$x:000026F7
.text$x:000026FC
.text$x:000026FC ; =============== S U B R O U T I N E =======================================
.text$x:000026FC
.text$x:000026FC
.text$x:000026FC __unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$4 proc near
.text$x:000026FC                                         ; DATA XREF: .xdata$x:00002948o
.text$x:000026FC                 mov     ecx, [ebp-10h]
.text$x:000026FF                 add     ecx, 8Ch ; 'î'
.text$x:00002705                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:00002705 __unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$4 endp
.text$x:00002705
.text$x:0000270A
.text$x:0000270A ; =============== S U B R O U T I N E =======================================
.text$x:0000270A
.text$x:0000270A
.text$x:0000270A __unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$5 proc near
.text$x:0000270A                                         ; DATA XREF: .xdata$x:00002950o
.text$x:0000270A                 mov     ecx, [ebp-10h]
.text$x:0000270D                 add     ecx, 98h ; 'ÿ'
.text$x:00002713                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:00002713 __unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$5 endp
.text$x:00002713
.text$x:00002718
.text$x:00002718 ; =============== S U B R O U T I N E =======================================
.text$x:00002718
.text$x:00002718
.text$x:00002718 __ehhandler$??1CEncoder@N7z@NArchive@@QAE@XZ proc near
.text$x:00002718                                         ; DATA XREF: NArchive::N7z::CEncoder::~CEncoder(void)+5o
.text$x:00002718
.text$x:00002718 arg_4           = dword ptr  8
.text$x:00002718
.text$x:00002718                 mov     edx, [esp+arg_4]
.text$x:0000271C                 lea     eax, [edx+0Ch]
.text$x:0000271F                 mov     ecx, [edx-8]
.text$x:00002722                 xor     ecx, eax
.text$x:00002724                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002729                 mov     eax, offset __ehfuncinfo$??1CEncoder@N7z@NArchive@@QAE@XZ
.text$x:0000272E                 jmp     ___CxxFrameHandler3
.text$x:0000272E __ehhandler$??1CEncoder@N7z@NArchive@@QAE@XZ endp
.text$x:0000272E
.text$x:0000272E ; ---------------------------------------------------------------------------
.text$x:00002733                 align 4
.text$x:00002733 _text$x         ends
.text$x:00002733
.xdata$x:00002734 ; ===========================================================================
.xdata$x:00002734
.xdata$x:00002734 ; Segment type: Pure data
.xdata$x:00002734 ; Segment permissions: Read
.xdata$x:00002734 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002734                 assume cs:_xdata$x
.xdata$x:00002734                 ;org 2734h
.xdata$x:00002734 __ehfuncinfo$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z db  22h ; "
.xdata$x:00002734                                         ; DATA XREF: __ehhandler$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z+14o
.xdata$x:00002735                 db    5
.xdata$x:00002736                 db  93h ; ô
.xdata$x:00002737                 db  19h
.xdata$x:00002738                 db    7
.xdata$x:00002739                 db    0
.xdata$x:0000273A                 db    0
.xdata$x:0000273B                 db    0
.xdata$x:0000273C                 dd offset __unwindtable$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z
.xdata$x:00002740                 db    0
.xdata$x:00002741                 db    0
.xdata$x:00002742                 db    0
.xdata$x:00002743                 db    0
.xdata$x:00002744                 db    0
.xdata$x:00002745                 db    0
.xdata$x:00002746                 db    0
.xdata$x:00002747                 db    0
.xdata$x:00002748                 db    0
.xdata$x:00002749                 db    0
.xdata$x:0000274A                 db    0
.xdata$x:0000274B                 db    0
.xdata$x:0000274C                 db    0
.xdata$x:0000274D                 db    0
.xdata$x:0000274E                 db    0
.xdata$x:0000274F                 db    0
.xdata$x:00002750                 db    0
.xdata$x:00002751                 db    0
.xdata$x:00002752                 db    0
.xdata$x:00002753                 db    0
.xdata$x:00002754                 db    1
.xdata$x:00002755                 db    0
.xdata$x:00002756                 db    0
.xdata$x:00002757                 db    0
.xdata$x:00002758 __unwindtable$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z db 0FFh
.xdata$x:00002758                                         ; DATA XREF: .xdata$x:0000273Co
.xdata$x:00002759                 db 0FFh
.xdata$x:0000275A                 db 0FFh
.xdata$x:0000275B                 db 0FFh
.xdata$x:0000275C                 dd offset __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$0
.xdata$x:00002760                 db 0FFh
.xdata$x:00002761                 db 0FFh
.xdata$x:00002762                 db 0FFh
.xdata$x:00002763                 db 0FFh
.xdata$x:00002764                 dd offset __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$1
.xdata$x:00002768                 db 0FFh
.xdata$x:00002769                 db 0FFh
.xdata$x:0000276A                 db 0FFh
.xdata$x:0000276B                 db 0FFh
.xdata$x:0000276C                 dd offset __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$2
.xdata$x:00002770                 db    2
.xdata$x:00002771                 db    0
.xdata$x:00002772                 db    0
.xdata$x:00002773                 db    0
.xdata$x:00002774                 dd offset __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$3
.xdata$x:00002778                 db    3
.xdata$x:00002779                 db    0
.xdata$x:0000277A                 db    0
.xdata$x:0000277B                 db    0
.xdata$x:0000277C                 dd offset __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$4
.xdata$x:00002780                 db    3
.xdata$x:00002781                 db    0
.xdata$x:00002782                 db    0
.xdata$x:00002783                 db    0
.xdata$x:00002784                 dd offset __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$5
.xdata$x:00002788                 db    5
.xdata$x:00002789                 db    0
.xdata$x:0000278A                 db    0
.xdata$x:0000278B                 db    0
.xdata$x:0000278C                 dd offset __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$6
.xdata$x:00002790 __unwindtable$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z db 0FFh
.xdata$x:00002790                                         ; DATA XREF: .xdata$x:000027A0o
.xdata$x:00002791                 db 0FFh
.xdata$x:00002792                 db 0FFh
.xdata$x:00002793                 db 0FFh
.xdata$x:00002794                 dd offset __unwindfunclet$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z$0
.xdata$x:00002798 __ehfuncinfo$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z db  22h ; "
.xdata$x:00002798                                         ; DATA XREF: __ehhandler$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z+11o
.xdata$x:00002799                 db    5
.xdata$x:0000279A                 db  93h ; ô
.xdata$x:0000279B                 db  19h
.xdata$x:0000279C                 db    1
.xdata$x:0000279D                 db    0
.xdata$x:0000279E                 db    0
.xdata$x:0000279F                 db    0
.xdata$x:000027A0                 dd offset __unwindtable$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z
.xdata$x:000027A4                 db    0
.xdata$x:000027A5                 db    0
.xdata$x:000027A6                 db    0
.xdata$x:000027A7                 db    0
.xdata$x:000027A8                 db    0
.xdata$x:000027A9                 db    0
.xdata$x:000027AA                 db    0
.xdata$x:000027AB                 db    0
.xdata$x:000027AC                 db    0
.xdata$x:000027AD                 db    0
.xdata$x:000027AE                 db    0
.xdata$x:000027AF                 db    0
.xdata$x:000027B0                 db    0
.xdata$x:000027B1                 db    0
.xdata$x:000027B2                 db    0
.xdata$x:000027B3                 db    0
.xdata$x:000027B4                 db    0
.xdata$x:000027B5                 db    0
.xdata$x:000027B6                 db    0
.xdata$x:000027B7                 db    0
.xdata$x:000027B8                 db    1
.xdata$x:000027B9                 db    0
.xdata$x:000027BA                 db    0
.xdata$x:000027BB                 db    0
.xdata$x:000027BC __ehfuncinfo$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:000027BC                                         ; DATA XREF: __ehhandler$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z+14o
.xdata$x:000027BD                 db    5
.xdata$x:000027BE                 db  93h ; ô
.xdata$x:000027BF                 db  19h
.xdata$x:000027C0                 db  12h
.xdata$x:000027C1                 db    0
.xdata$x:000027C2                 db    0
.xdata$x:000027C3                 db    0
.xdata$x:000027C4                 dd offset __unwindtable$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z
.xdata$x:000027C8                 db    0
.xdata$x:000027C9                 db    0
.xdata$x:000027CA                 db    0
.xdata$x:000027CB                 db    0
.xdata$x:000027CC                 db    0
.xdata$x:000027CD                 db    0
.xdata$x:000027CE                 db    0
.xdata$x:000027CF                 db    0
.xdata$x:000027D0                 db    0
.xdata$x:000027D1                 db    0
.xdata$x:000027D2                 db    0
.xdata$x:000027D3                 db    0
.xdata$x:000027D4                 db    0
.xdata$x:000027D5                 db    0
.xdata$x:000027D6                 db    0
.xdata$x:000027D7                 db    0
.xdata$x:000027D8                 db    0
.xdata$x:000027D9                 db    0
.xdata$x:000027DA                 db    0
.xdata$x:000027DB                 db    0
.xdata$x:000027DC                 db    1
.xdata$x:000027DD                 db    0
.xdata$x:000027DE                 db    0
.xdata$x:000027DF                 db    0
.xdata$x:000027E0 __unwindtable$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:000027E0                                         ; DATA XREF: .xdata$x:000027C4o
.xdata$x:000027E1                 db 0FFh
.xdata$x:000027E2                 db 0FFh
.xdata$x:000027E3                 db 0FFh
.xdata$x:000027E4                 dd offset __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$0
.xdata$x:000027E8                 db    0
.xdata$x:000027E9                 db    0
.xdata$x:000027EA                 db    0
.xdata$x:000027EB                 db    0
.xdata$x:000027EC                 dd offset __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$1
.xdata$x:000027F0                 db    1
.xdata$x:000027F1                 db    0
.xdata$x:000027F2                 db    0
.xdata$x:000027F3                 db    0
.xdata$x:000027F4                 dd offset __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$2
.xdata$x:000027F8                 db    2
.xdata$x:000027F9                 db    0
.xdata$x:000027FA                 db    0
.xdata$x:000027FB                 db    0
.xdata$x:000027FC                 dd offset __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$3
.xdata$x:00002800                 db    3
.xdata$x:00002801                 db    0
.xdata$x:00002802                 db    0
.xdata$x:00002803                 db    0
.xdata$x:00002804                 dd offset __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$4
.xdata$x:00002808                 db    4
.xdata$x:00002809                 db    0
.xdata$x:0000280A                 db    0
.xdata$x:0000280B                 db    0
.xdata$x:0000280C                 dd offset __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$5
.xdata$x:00002810                 db    4
.xdata$x:00002811                 db    0
.xdata$x:00002812                 db    0
.xdata$x:00002813                 db    0
.xdata$x:00002814                 dd offset __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$6
.xdata$x:00002818                 db    4
.xdata$x:00002819                 db    0
.xdata$x:0000281A                 db    0
.xdata$x:0000281B                 db    0
.xdata$x:0000281C                 dd offset __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$7
.xdata$x:00002820                 db    4
.xdata$x:00002821                 db    0
.xdata$x:00002822                 db    0
.xdata$x:00002823                 db    0
.xdata$x:00002824                 dd offset __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$8
.xdata$x:00002828                 db    8
.xdata$x:00002829                 db    0
.xdata$x:0000282A                 db    0
.xdata$x:0000282B                 db    0
.xdata$x:0000282C                 dd offset __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$9
.xdata$x:00002830                 db    9
.xdata$x:00002831                 db    0
.xdata$x:00002832                 db    0
.xdata$x:00002833                 db    0
.xdata$x:00002834                 dd offset __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$10
.xdata$x:00002838                 db  0Ah
.xdata$x:00002839                 db    0
.xdata$x:0000283A                 db    0
.xdata$x:0000283B                 db    0
.xdata$x:0000283C                 dd offset __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$11
.xdata$x:00002840                 db  0Bh
.xdata$x:00002841                 db    0
.xdata$x:00002842                 db    0
.xdata$x:00002843                 db    0
.xdata$x:00002844                 dd offset __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$12
.xdata$x:00002848                 db  0Ch
.xdata$x:00002849                 db    0
.xdata$x:0000284A                 db    0
.xdata$x:0000284B                 db    0
.xdata$x:0000284C                 dd offset __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$13
.xdata$x:00002850                 db  0Ch
.xdata$x:00002851                 db    0
.xdata$x:00002852                 db    0
.xdata$x:00002853                 db    0
.xdata$x:00002854                 dd offset __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$14
.xdata$x:00002858                 db  0Ah
.xdata$x:00002859                 db    0
.xdata$x:0000285A                 db    0
.xdata$x:0000285B                 db    0
.xdata$x:0000285C                 dd offset __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$15
.xdata$x:00002860                 db  0Ah
.xdata$x:00002861                 db    0
.xdata$x:00002862                 db    0
.xdata$x:00002863                 db    0
.xdata$x:00002864                 dd offset __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$16
.xdata$x:00002868                 db  0Ah
.xdata$x:00002869                 db    0
.xdata$x:0000286A                 db    0
.xdata$x:0000286B                 db    0
.xdata$x:0000286C                 dd offset __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$17
.xdata$x:00002870 __ehfuncinfo$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z db  22h ; "
.xdata$x:00002870                                         ; DATA XREF: __ehhandler$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z+11o
.xdata$x:00002871                 db    5
.xdata$x:00002872                 db  93h ; ô
.xdata$x:00002873                 db  19h
.xdata$x:00002874                 db    7
.xdata$x:00002875                 db    0
.xdata$x:00002876                 db    0
.xdata$x:00002877                 db    0
.xdata$x:00002878                 dd offset __unwindtable$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z
.xdata$x:0000287C                 db    0
.xdata$x:0000287D                 db    0
.xdata$x:0000287E                 db    0
.xdata$x:0000287F                 db    0
.xdata$x:00002880                 db    0
.xdata$x:00002881                 db    0
.xdata$x:00002882                 db    0
.xdata$x:00002883                 db    0
.xdata$x:00002884                 db    0
.xdata$x:00002885                 db    0
.xdata$x:00002886                 db    0
.xdata$x:00002887                 db    0
.xdata$x:00002888                 db    0
.xdata$x:00002889                 db    0
.xdata$x:0000288A                 db    0
.xdata$x:0000288B                 db    0
.xdata$x:0000288C                 db    0
.xdata$x:0000288D                 db    0
.xdata$x:0000288E                 db    0
.xdata$x:0000288F                 db    0
.xdata$x:00002890                 db    1
.xdata$x:00002891                 db    0
.xdata$x:00002892                 db    0
.xdata$x:00002893                 db    0
.xdata$x:00002894 __unwindtable$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z db 0FFh
.xdata$x:00002894                                         ; DATA XREF: .xdata$x:00002878o
.xdata$x:00002895                 db 0FFh
.xdata$x:00002896                 db 0FFh
.xdata$x:00002897                 db 0FFh
.xdata$x:00002898                 dd offset __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$0
.xdata$x:0000289C                 align 10h
.xdata$x:000028A0                 dd offset __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$1
.xdata$x:000028A4                 db    1
.xdata$x:000028A5                 db    0
.xdata$x:000028A6                 db    0
.xdata$x:000028A7                 db    0
.xdata$x:000028A8                 dd offset __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$2
.xdata$x:000028AC                 db    2
.xdata$x:000028AD                 db    0
.xdata$x:000028AE                 db    0
.xdata$x:000028AF                 db    0
.xdata$x:000028B0                 dd offset __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$3
.xdata$x:000028B4                 db    3
.xdata$x:000028B5                 db    0
.xdata$x:000028B6                 db    0
.xdata$x:000028B7                 db    0
.xdata$x:000028B8                 dd offset __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$4
.xdata$x:000028BC                 db    4
.xdata$x:000028BD                 db    0
.xdata$x:000028BE                 db    0
.xdata$x:000028BF                 db    0
.xdata$x:000028C0                 dd offset __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$5
.xdata$x:000028C4                 db    5
.xdata$x:000028C5                 db    0
.xdata$x:000028C6                 db    0
.xdata$x:000028C7                 db    0
.xdata$x:000028C8                 dd offset __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$6
.xdata$x:000028CC __unwindtable$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ db 0FFh
.xdata$x:000028CC                                         ; DATA XREF: .xdata$x:000028E4o
.xdata$x:000028CD                 db 0FFh
.xdata$x:000028CE                 db 0FFh
.xdata$x:000028CF                 db 0FFh
.xdata$x:000028D0                 dd offset __unwindfunclet$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ$0
.xdata$x:000028D4                 db 0FFh
.xdata$x:000028D5                 db 0FFh
.xdata$x:000028D6                 db 0FFh
.xdata$x:000028D7                 db 0FFh
.xdata$x:000028D8                 dd offset __unwindfunclet$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ$1
.xdata$x:000028DC __ehfuncinfo$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ db  22h ; "
.xdata$x:000028DC                                         ; DATA XREF: __ehhandler$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ+14o
.xdata$x:000028DD                 db    5
.xdata$x:000028DE                 db  93h ; ô
.xdata$x:000028DF                 db  19h
.xdata$x:000028E0                 db    2
.xdata$x:000028E1                 db    0
.xdata$x:000028E2                 db    0
.xdata$x:000028E3                 db    0
.xdata$x:000028E4                 dd offset __unwindtable$?EncoderConstr@CEncoder@N7z@NArchive@@QAEJXZ
.xdata$x:000028E8                 db    0
.xdata$x:000028E9                 db    0
.xdata$x:000028EA                 db    0
.xdata$x:000028EB                 db    0
.xdata$x:000028EC                 db    0
.xdata$x:000028ED                 db    0
.xdata$x:000028EE                 db    0
.xdata$x:000028EF                 db    0
.xdata$x:000028F0                 db    0
.xdata$x:000028F1                 db    0
.xdata$x:000028F2                 db    0
.xdata$x:000028F3                 db    0
.xdata$x:000028F4                 db    0
.xdata$x:000028F5                 db    0
.xdata$x:000028F6                 db    0
.xdata$x:000028F7                 db    0
.xdata$x:000028F8                 db    0
.xdata$x:000028F9                 db    0
.xdata$x:000028FA                 db    0
.xdata$x:000028FB                 db    0
.xdata$x:000028FC                 db    1
.xdata$x:000028FD                 db    0
.xdata$x:000028FE                 db    0
.xdata$x:000028FF                 db    0
.xdata$x:00002900 __ehfuncinfo$??1CEncoder@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00002900                                         ; DATA XREF: __ehhandler$??1CEncoder@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00002901                 db    5
.xdata$x:00002902                 db  93h ; ô
.xdata$x:00002903                 db  19h
.xdata$x:00002904                 db    6
.xdata$x:00002905                 db    0
.xdata$x:00002906                 db    0
.xdata$x:00002907                 db    0
.xdata$x:00002908                 dd offset __unwindtable$??1CEncoder@N7z@NArchive@@QAE@XZ
.xdata$x:0000290C                 align 20h
.xdata$x:00002920                 db    1
.xdata$x:00002921                 db    0
.xdata$x:00002922                 db    0
.xdata$x:00002923                 db    0
.xdata$x:00002924 __unwindtable$??1CEncoder@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00002924                                         ; DATA XREF: .xdata$x:00002908o
.xdata$x:00002925                 db 0FFh
.xdata$x:00002926                 db 0FFh
.xdata$x:00002927                 db 0FFh
.xdata$x:00002928                 dd offset __unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$0
.xdata$x:0000292C                 align 10h
.xdata$x:00002930                 dd offset __unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$1
.xdata$x:00002934                 db    1
.xdata$x:00002935                 db    0
.xdata$x:00002936                 db    0
.xdata$x:00002937                 db    0
.xdata$x:00002938                 dd offset __unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$2
.xdata$x:0000293C                 db    2
.xdata$x:0000293D                 db    0
.xdata$x:0000293E                 db    0
.xdata$x:0000293F                 db    0
.xdata$x:00002940                 dd offset __unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$3
.xdata$x:00002944                 db    3
.xdata$x:00002945                 db    0
.xdata$x:00002946                 db    0
.xdata$x:00002947                 db    0
.xdata$x:00002948                 dd offset __unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$4
.xdata$x:0000294C                 db    4
.xdata$x:0000294D                 db    0
.xdata$x:0000294E                 db    0
.xdata$x:0000294F                 db    0
.xdata$x:00002950                 dd offset __unwindfunclet$??1CEncoder@N7z@NArchive@@QAE@XZ$5
.xdata$x:00002950 _xdata$x        ends
.xdata$x:00002950
.text:00002954 ; ===========================================================================
.text:00002954
.text:00002954 ; Segment type: Pure code
.text:00002954 ; Segment permissions: Read/Execute
.text:00002954 _text           segment para public 'CODE' use32
.text:00002954                 assume cs:_text
.text:00002954                 ;org 2954h
.text:00002954 ; COMDAT (pick any)
.text:00002954                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002954
.text:00002954 ; =============== S U B R O U T I N E =======================================
.text:00002954
.text:00002954 ; Attributes: bp-based frame
.text:00002954
.text:00002954 ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:00002954                 public ?Len@UString@@QBEIXZ
.text:00002954 ?Len@UString@@QBEIXZ proc near          ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+444p
.text:00002954                                         ; NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+476p
.text:00002954
.text:00002954 var_4           = dword ptr -4
.text:00002954
.text:00002954                 push    ebp
.text:00002955                 mov     ebp, esp
.text:00002957                 push    ecx
.text:00002958                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000295F                 mov     [ebp+var_4], ecx
.text:00002962                 mov     eax, [ebp+var_4]
.text:00002965                 mov     eax, [eax+4]
.text:00002968                 mov     esp, ebp
.text:0000296A                 pop     ebp
.text:0000296B                 retn
.text:0000296B ?Len@UString@@QBEIXZ endp
.text:0000296B
.text:0000296B _text           ends
.text:0000296B
.text:0000296C ; ===========================================================================
.text:0000296C
.text:0000296C ; Segment type: Pure code
.text:0000296C ; Segment permissions: Read/Execute
.text:0000296C _text           segment para public 'CODE' use32
.text:0000296C                 assume cs:_text
.text:0000296C                 ;org 296Ch
.text:0000296C ; COMDAT (pick any)
.text:0000296C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000296C
.text:0000296C ; =============== S U B R O U T I N E =======================================
.text:0000296C
.text:0000296C ; Attributes: bp-based frame
.text:0000296C
.text:0000296C ; public: __thiscall UString::operator wchar_t const *(void)const
.text:0000296C                 public ??BUString@@QBEPB_WXZ
.text:0000296C ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+486p
.text:0000296C
.text:0000296C var_4           = dword ptr -4
.text:0000296C
.text:0000296C                 push    ebp
.text:0000296D                 mov     ebp, esp
.text:0000296F                 push    ecx
.text:00002970                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002977                 mov     [ebp+var_4], ecx
.text:0000297A                 mov     eax, [ebp+var_4]
.text:0000297D                 mov     eax, [eax]
.text:0000297F                 mov     esp, ebp
.text:00002981                 pop     ebp
.text:00002982                 retn
.text:00002982 ??BUString@@QBEPB_WXZ endp
.text:00002982
.text:00002982 ; ---------------------------------------------------------------------------
.text:00002983                 align 4
.text:00002983 _text           ends
.text:00002983
.text:00002984 ; ===========================================================================
.text:00002984
.text:00002984 ; Segment type: Pure code
.text:00002984 ; Segment permissions: Read/Execute
.text:00002984 _text           segment para public 'CODE' use32
.text:00002984                 assume cs:_text
.text:00002984                 ;org 2984h
.text:00002984 ; COMDAT (pick any)
.text:00002984                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002984
.text:00002984 ; =============== S U B R O U T I N E =======================================
.text:00002984
.text:00002984 ; Attributes: bp-based frame
.text:00002984
.text:00002984 ; _DWORD __thiscall NCoderMixer2::CMixerMT::CMixerMT(NCoderMixer2::CMixerMT *this, bool)
.text:00002984                 public ??0CMixerMT@NCoderMixer2@@QAE@_N@Z
.text:00002984 ??0CMixerMT@NCoderMixer2@@QAE@_N@Z proc near
.text:00002984                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+7Cp
.text:00002984
.text:00002984 var_10          = dword ptr -10h
.text:00002984 var_C           = dword ptr -0Ch
.text:00002984 var_4           = dword ptr -4
.text:00002984 arg_0           = byte ptr  8
.text:00002984
.text:00002984                 push    ebp
.text:00002985                 mov     ebp, esp
.text:00002987                 push    0FFFFFFFFh
.text:00002989                 push    offset __ehhandler$??0CMixerMT@NCoderMixer2@@QAE@_N@Z
.text:0000298E                 mov     eax, large fs:0
.text:00002994                 push    eax
.text:00002995                 push    ecx
.text:00002996                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000299D                 mov     eax, dword ptr ds:___security_cookie
.text:000029A2                 xor     eax, ebp
.text:000029A4                 push    eax
.text:000029A5                 lea     eax, [ebp+var_C]
.text:000029A8                 mov     large fs:0, eax
.text:000029AE                 mov     [ebp+var_10], ecx
.text:000029B1                 mov     ecx, [ebp+var_10]
.text:000029B4                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000029B9                 movzx   eax, [ebp+arg_0]
.text:000029BD                 push    eax             ; bool
.text:000029BE                 mov     ecx, [ebp+var_10]
.text:000029C1                 add     ecx, 4          ; this
.text:000029C4                 call    ??0CMixer@NCoderMixer2@@QAE@_N@Z ; NCoderMixer2::CMixer::CMixer(bool)
.text:000029C9                 mov     [ebp+var_4], 0
.text:000029D0                 mov     ecx, [ebp+var_10]
.text:000029D3                 add     ecx, 68h ; 'h'  ; this
.text:000029D6                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000029DB                 mov     ecx, [ebp+var_10]
.text:000029DE                 mov     dword ptr [ecx], offset ??_7CMixerMT@NCoderMixer2@@6BIUnknown@@@ ; const NCoderMixer2::CMixerMT::`vftable'{for `IUnknown'}
.text:000029E4                 mov     edx, [ebp+var_10]
.text:000029E7                 mov     dword ptr [edx+4], offset ??_7CMixerMT@NCoderMixer2@@6BCMixer@1@@ ; const NCoderMixer2::CMixerMT::`vftable'{for `NCoderMixer2::CMixer'}
.text:000029EE                 mov     ecx, [ebp+var_10]
.text:000029F1                 add     ecx, 6Ch ; 'l'
.text:000029F4                 call    ??0?$CObjectVector@VCStreamBinder@@@@QAE@XZ ; CObjectVector<CStreamBinder>::CObjectVector<CStreamBinder>(void)
.text:000029F9                 mov     byte ptr [ebp+var_4], 1
.text:000029FD                 mov     ecx, [ebp+var_10]
.text:00002A00                 add     ecx, 78h ; 'x'
.text:00002A03                 call    ??0?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderMT>::CObjectVector<NCoderMixer2::CCoderMT>(void)
.text:00002A08                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002A0F                 mov     eax, [ebp+var_10]
.text:00002A12                 mov     ecx, [ebp+var_C]
.text:00002A15                 mov     large fs:0, ecx
.text:00002A1C                 pop     ecx
.text:00002A1D                 add     esp, 10h
.text:00002A20                 cmp     ebp, esp
.text:00002A22                 call    __RTC_CheckEsp
.text:00002A27                 mov     esp, ebp
.text:00002A29                 pop     ebp
.text:00002A2A                 retn    4
.text:00002A2A ??0CMixerMT@NCoderMixer2@@QAE@_N@Z endp
.text:00002A2A
.text:00002A2A ; ---------------------------------------------------------------------------
.text:00002A2D                 align 10h
.text:00002A2D _text           ends
.text:00002A2D
.text$x:00002A30 ; ===========================================================================
.text$x:00002A30
.text$x:00002A30 ; Segment type: Pure code
.text$x:00002A30 ; Segment permissions: Read/Execute
.text$x:00002A30 _text$x         segment para public 'CODE' use32
.text$x:00002A30                 assume cs:_text$x
.text$x:00002A30                 ;org 2A30h
.text$x:00002A30 ; COMDAT (pick associative to section at 2984)
.text$x:00002A30                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00002A30
.text$x:00002A30 ; =============== S U B R O U T I N E =======================================
.text$x:00002A30
.text$x:00002A30
.text$x:00002A30 __unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$0 proc near
.text$x:00002A30                                         ; DATA XREF: .xdata$x:00002A9Co
.text$x:00002A30                 mov     ecx, [ebp-10h]
.text$x:00002A33                 add     ecx, 4          ; this
.text$x:00002A36                 jmp     ??1CMixer@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CMixer::~CMixer(void)
.text$x:00002A36 __unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$0 endp
.text$x:00002A36
.text$x:00002A3B
.text$x:00002A3B ; =============== S U B R O U T I N E =======================================
.text$x:00002A3B
.text$x:00002A3B
.text$x:00002A3B __unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$1 proc near
.text$x:00002A3B                                         ; DATA XREF: .xdata$x:00002AA4o
.text$x:00002A3B                 mov     ecx, [ebp-10h]
.text$x:00002A3E                 add     ecx, 6Ch ; 'l'
.text$x:00002A41                 jmp     ??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ ; CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>(void)
.text$x:00002A41 __unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$1 endp
.text$x:00002A41
.text$x:00002A46
.text$x:00002A46 ; =============== S U B R O U T I N E =======================================
.text$x:00002A46
.text$x:00002A46
.text$x:00002A46 __ehhandler$??0CMixerMT@NCoderMixer2@@QAE@_N@Z proc near
.text$x:00002A46                                         ; DATA XREF: NCoderMixer2::CMixerMT::CMixerMT(bool)+5o
.text$x:00002A46
.text$x:00002A46 arg_4           = dword ptr  8
.text$x:00002A46
.text$x:00002A46                 mov     edx, [esp+arg_4]
.text$x:00002A4A                 lea     eax, [edx+0Ch]
.text$x:00002A4D                 mov     ecx, [edx-8]
.text$x:00002A50                 xor     ecx, eax
.text$x:00002A52                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002A57                 mov     eax, offset __ehfuncinfo$??0CMixerMT@NCoderMixer2@@QAE@_N@Z
.text$x:00002A5C                 jmp     ___CxxFrameHandler3
.text$x:00002A5C __ehhandler$??0CMixerMT@NCoderMixer2@@QAE@_N@Z endp
.text$x:00002A5C
.text$x:00002A5C ; ---------------------------------------------------------------------------
.text$x:00002A61                 align 4
.text$x:00002A61 _text$x         ends
.text$x:00002A61
.rdata:00002A64 ; ===========================================================================
.rdata:00002A64
.rdata:00002A64 ; Segment type: Pure data
.rdata:00002A64 ; Segment permissions: Read
.rdata:00002A64 _rdata          segment dword public 'DATA' use32
.rdata:00002A64                 assume cs:_rdata
.rdata:00002A64                 ;org 2A64h
.rdata:00002A64 ; COMDAT (pick largest)
.rdata:00002A64                 dd offset ??_R4CMixerMT@NCoderMixer2@@6BCMixer@1@@ ; const NCoderMixer2::CMixerMT::`RTTI Complete Object Locator'{for `NCoderMixer2::CMixer'}
.rdata:00002A68                 public ??_7CMixerMT@NCoderMixer2@@6BCMixer@1@@
.rdata:00002A68 ; const NCoderMixer2::CMixerMT::`vftable'{for `NCoderMixer2::CMixer'}
.rdata:00002A68 ??_7CMixerMT@NCoderMixer2@@6BCMixer@1@@ dd offset ?SetBindInfo@CMixerMT@NCoderMixer2@@UAEJABUCBindInfo@2@@Z
.rdata:00002A68                                         ; DATA XREF: NCoderMixer2::CMixerMT::CMixerMT(bool)+63o
.rdata:00002A68                                         ; NCoderMixer2::CMixerMT::SetBindInfo(NCoderMixer2::CBindInfo const &)
.rdata:00002A6C                 dd offset ?AddCoder@CMixerMT@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z ; NCoderMixer2::CMixerMT::AddCoder(CCreatedCoder const &)
.rdata:00002A70                 dd offset ?GetCoder@CMixerMT@NCoderMixer2@@UAEAAVCCoder@2@I@Z ; NCoderMixer2::CMixerMT::GetCoder(uint)
.rdata:00002A74                 dd offset ?SelectMainCoder@CMixerMT@NCoderMixer2@@UAEX_N@Z ; NCoderMixer2::CMixerMT::SelectMainCoder(bool)
.rdata:00002A78                 dd offset ?ReInit@CMixerMT@NCoderMixer2@@UAEXXZ ; NCoderMixer2::CMixerMT::ReInit(void)
.rdata:00002A7C                 dd offset ?SetCoderInfo@CMixerMT@NCoderMixer2@@UAEXIPB_KPBQB_K@Z ; NCoderMixer2::CMixerMT::SetCoderInfo(uint,unsigned __int64 const *,unsigned __int64 const * const *)
.rdata:00002A80                 dd offset ?Code@CMixerMT@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)
.rdata:00002A84                 dd offset ?GetBondStreamSize@CMixerMT@NCoderMixer2@@UBE_KI@Z ; NCoderMixer2::CMixerMT::GetBondStreamSize(uint)
.rdata:00002A84 _rdata          ends
.rdata:00002A84
.rdata:00002A88 ; ===========================================================================
.rdata:00002A88
.rdata:00002A88 ; Segment type: Pure data
.rdata:00002A88 ; Segment permissions: Read
.rdata:00002A88 _rdata          segment dword public 'DATA' use32
.rdata:00002A88                 assume cs:_rdata
.rdata:00002A88                 ;org 2A88h
.rdata:00002A88 ; COMDAT (pick largest)
.rdata:00002A88                 dd offset ??_R4CMixerMT@NCoderMixer2@@6BIUnknown@@@ ; const NCoderMixer2::CMixerMT::`RTTI Complete Object Locator'{for `IUnknown'}
.rdata:00002A8C                 public ??_7CMixerMT@NCoderMixer2@@6BIUnknown@@@
.rdata:00002A8C ; const NCoderMixer2::CMixerMT::`vftable'{for `IUnknown'}
.rdata:00002A8C ??_7CMixerMT@NCoderMixer2@@6BIUnknown@@@ dd offset ?QueryInterface@CMixerMT@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z
.rdata:00002A8C                                         ; DATA XREF: NCoderMixer2::CMixerMT::CMixerMT(bool)+5Ao
.rdata:00002A8C                                         ; NCoderMixer2::CMixerMT::QueryInterface(_GUID const &,void * *)
.rdata:00002A90                 dd offset ?AddRef@CMixerMT@NCoderMixer2@@UAGKXZ ; NCoderMixer2::CMixerMT::AddRef(void)
.rdata:00002A94                 dd offset ?Release@CMixerMT@NCoderMixer2@@UAGKXZ ; NCoderMixer2::CMixerMT::Release(void)
.rdata:00002A94 _rdata          ends
.rdata:00002A94
.xdata$x:00002A98 ; ===========================================================================
.xdata$x:00002A98
.xdata$x:00002A98 ; Segment type: Pure data
.xdata$x:00002A98 ; Segment permissions: Read
.xdata$x:00002A98 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002A98                 assume cs:_xdata$x
.xdata$x:00002A98                 ;org 2A98h
.xdata$x:00002A98 ; COMDAT (pick associative to section at 2984)
.xdata$x:00002A98 __unwindtable$??0CMixerMT@NCoderMixer2@@QAE@_N@Z db 0FFh
.xdata$x:00002A98                                         ; DATA XREF: .xdata$x:00002AB0o
.xdata$x:00002A99                 db 0FFh
.xdata$x:00002A9A                 db 0FFh
.xdata$x:00002A9B                 db 0FFh
.xdata$x:00002A9C                 dd offset __unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$0
.xdata$x:00002AA0                 db    0
.xdata$x:00002AA1                 db    0
.xdata$x:00002AA2                 db    0
.xdata$x:00002AA3                 db    0
.xdata$x:00002AA4                 dd offset __unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$1
.xdata$x:00002AA8 __ehfuncinfo$??0CMixerMT@NCoderMixer2@@QAE@_N@Z db  22h ; "
.xdata$x:00002AA8                                         ; DATA XREF: __ehhandler$??0CMixerMT@NCoderMixer2@@QAE@_N@Z+11o
.xdata$x:00002AA9                 db    5
.xdata$x:00002AAA                 db  93h ; ô
.xdata$x:00002AAB                 db  19h
.xdata$x:00002AAC                 db    2
.xdata$x:00002AAD                 db    0
.xdata$x:00002AAE                 db    0
.xdata$x:00002AAF                 db    0
.xdata$x:00002AB0                 dd offset __unwindtable$??0CMixerMT@NCoderMixer2@@QAE@_N@Z
.xdata$x:00002AB4                 db    0
.xdata$x:00002AB5                 db    0
.xdata$x:00002AB6                 db    0
.xdata$x:00002AB7                 db    0
.xdata$x:00002AB8                 db    0
.xdata$x:00002AB9                 db    0
.xdata$x:00002ABA                 db    0
.xdata$x:00002ABB                 db    0
.xdata$x:00002ABC                 db    0
.xdata$x:00002ABD                 db    0
.xdata$x:00002ABE                 db    0
.xdata$x:00002ABF                 db    0
.xdata$x:00002AC0                 db    0
.xdata$x:00002AC1                 db    0
.xdata$x:00002AC2                 db    0
.xdata$x:00002AC3                 db    0
.xdata$x:00002AC4                 db    0
.xdata$x:00002AC5                 db    0
.xdata$x:00002AC6                 db    0
.xdata$x:00002AC7                 db    0
.xdata$x:00002AC8                 db    1
.xdata$x:00002AC9                 db    0
.xdata$x:00002ACA                 db    0
.xdata$x:00002ACB                 db    0
.xdata$x:00002ACB _xdata$x        ends
.xdata$x:00002ACB
.rdata$r:00002ACC ; ===========================================================================
.rdata$r:00002ACC
.rdata$r:00002ACC ; Segment type: Pure data
.rdata$r:00002ACC ; Segment permissions: Read
.rdata$r:00002ACC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002ACC                 assume cs:_rdata$r
.rdata$r:00002ACC                 ;org 2ACCh
.rdata$r:00002ACC ; COMDAT (pick any)
.rdata$r:00002ACC                 public ??_R4CMixerMT@NCoderMixer2@@6BIUnknown@@@
.rdata$r:00002ACC ; const NCoderMixer2::CMixerMT::`RTTI Complete Object Locator'{for `IUnknown'}
.rdata$r:00002ACC ??_R4CMixerMT@NCoderMixer2@@6BIUnknown@@@ db    0
.rdata$r:00002ACC                                         ; DATA XREF: .rdata:00002A88o
.rdata$r:00002ACD                 db    0
.rdata$r:00002ACE                 db    0
.rdata$r:00002ACF                 db    0
.rdata$r:00002AD0                 db    0
.rdata$r:00002AD1                 db    0
.rdata$r:00002AD2                 db    0
.rdata$r:00002AD3                 db    0
.rdata$r:00002AD4                 db    0
.rdata$r:00002AD5                 db    0
.rdata$r:00002AD6                 db    0
.rdata$r:00002AD7                 db    0
.rdata$r:00002AD8                 dd offset ??_R0?AVCMixerMT@NCoderMixer2@@@8 ; NCoderMixer2::CMixerMT `RTTI Type Descriptor'
.rdata$r:00002ADC                 dd offset ??_R3CMixerMT@NCoderMixer2@@8 ; NCoderMixer2::CMixerMT::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002ADC _rdata$r        ends
.rdata$r:00002ADC
.data:00002AE0 ; ===========================================================================
.data:00002AE0
.data:00002AE0 ; Segment type: Pure data
.data:00002AE0 ; Segment permissions: Read/Write
.data:00002AE0 _data           segment dword public 'DATA' use32
.data:00002AE0                 assume cs:_data
.data:00002AE0                 ;org 2AE0h
.data:00002AE0 ; COMDAT (pick any)
.data:00002AE0                 public ??_R0?AVCMixerMT@NCoderMixer2@@@8
.data:00002AE0 ; class NCoderMixer2::CMixerMT `RTTI Type Descriptor'
.data:00002AE0 ??_R0?AVCMixerMT@NCoderMixer2@@@8 dd offset ??_7type_info@@6B@
.data:00002AE0                                         ; DATA XREF: .rdata$r:00002AD8o
.data:00002AE0                                         ; .rdata$r:NCoderMixer2::CMixerMT::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002AE0                                         ; const type_info::`vftable'
.data:00002AE4                 align 8
.data:00002AE8 a_?avcmixermt@n db '.?AVCMixerMT@NCoderMixer2@@',0
.data:00002AE8 _data           ends
.data:00002AE8
.rdata$r:00002B04 ; ===========================================================================
.rdata$r:00002B04
.rdata$r:00002B04 ; Segment type: Pure data
.rdata$r:00002B04 ; Segment permissions: Read
.rdata$r:00002B04 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002B04                 assume cs:_rdata$r
.rdata$r:00002B04                 ;org 2B04h
.rdata$r:00002B04 ; COMDAT (pick any)
.rdata$r:00002B04                 public ??_R3CMixerMT@NCoderMixer2@@8
.rdata$r:00002B04 ; NCoderMixer2::CMixerMT::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002B04 ??_R3CMixerMT@NCoderMixer2@@8 db    0   ; DATA XREF: .rdata$r:00002ADCo
.rdata$r:00002B04                                         ; .rdata$r:00002B40o ...
.rdata$r:00002B05                 db    0
.rdata$r:00002B06                 db    0
.rdata$r:00002B07                 db    0
.rdata$r:00002B08                 db    1
.rdata$r:00002B09                 db    0
.rdata$r:00002B0A                 db    0
.rdata$r:00002B0B                 db    0
.rdata$r:00002B0C                 db    4
.rdata$r:00002B0D                 db    0
.rdata$r:00002B0E                 db    0
.rdata$r:00002B0F                 db    0
.rdata$r:00002B10                 dd offset ??_R2CMixerMT@NCoderMixer2@@8 ; NCoderMixer2::CMixerMT::`RTTI Base Class Array'
.rdata$r:00002B10 _rdata$r        ends
.rdata$r:00002B10
.rdata$r:00002B14 ; ===========================================================================
.rdata$r:00002B14
.rdata$r:00002B14 ; Segment type: Pure data
.rdata$r:00002B14 ; Segment permissions: Read
.rdata$r:00002B14 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002B14                 assume cs:_rdata$r
.rdata$r:00002B14                 ;org 2B14h
.rdata$r:00002B14 ; COMDAT (pick any)
.rdata$r:00002B14                 public ??_R2CMixerMT@NCoderMixer2@@8
.rdata$r:00002B14 ; NCoderMixer2::CMixerMT::`RTTI Base Class Array'
.rdata$r:00002B14 ??_R2CMixerMT@NCoderMixer2@@8 dd offset ??_R1A@?0A@EA@CMixerMT@NCoderMixer2@@8
.rdata$r:00002B14                                         ; DATA XREF: .rdata$r:00002B10o
.rdata$r:00002B14                                         ; NCoderMixer2::CMixerMT::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002B18                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002B1C                 dd offset ??_R13?0A@EA@CMixer@NCoderMixer2@@8 ; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00002B20                 dd offset ??_R1GI@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (104,-1,0,64)'
.rdata$r:00002B24                 db    0
.rdata$r:00002B25                 align 4
.rdata$r:00002B25 _rdata$r        ends
.rdata$r:00002B25
.rdata$r:00002B28 ; ===========================================================================
.rdata$r:00002B28
.rdata$r:00002B28 ; Segment type: Pure data
.rdata$r:00002B28 ; Segment permissions: Read
.rdata$r:00002B28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002B28                 assume cs:_rdata$r
.rdata$r:00002B28                 ;org 2B28h
.rdata$r:00002B28 ; COMDAT (pick any)
.rdata$r:00002B28                 public ??_R1A@?0A@EA@CMixerMT@NCoderMixer2@@8
.rdata$r:00002B28 ; NCoderMixer2::CMixerMT::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002B28 ??_R1A@?0A@EA@CMixerMT@NCoderMixer2@@8 dd offset ??_R0?AVCMixerMT@NCoderMixer2@@@8
.rdata$r:00002B28                                         ; DATA XREF: .rdata$r:NCoderMixer2::CMixerMT::`RTTI Base Class Array'o
.rdata$r:00002B28                                         ; NCoderMixer2::CMixerMT `RTTI Type Descriptor'
.rdata$r:00002B2C                 db    3
.rdata$r:00002B2D                 db    0
.rdata$r:00002B2E                 db    0
.rdata$r:00002B2F                 db    0
.rdata$r:00002B30                 db    0
.rdata$r:00002B31                 db    0
.rdata$r:00002B32                 db    0
.rdata$r:00002B33                 db    0
.rdata$r:00002B34                 db 0FFh
.rdata$r:00002B35                 db 0FFh
.rdata$r:00002B36                 db 0FFh
.rdata$r:00002B37                 db 0FFh
.rdata$r:00002B38                 db    0
.rdata$r:00002B39                 db    0
.rdata$r:00002B3A                 db    0
.rdata$r:00002B3B                 db    0
.rdata$r:00002B3C                 db  40h ; @
.rdata$r:00002B3D                 db    0
.rdata$r:00002B3E                 db    0
.rdata$r:00002B3F                 db    0
.rdata$r:00002B40                 dd offset ??_R3CMixerMT@NCoderMixer2@@8 ; NCoderMixer2::CMixerMT::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002B40 _rdata$r        ends
.rdata$r:00002B40
.rdata$r:00002B44 ; ===========================================================================
.rdata$r:00002B44
.rdata$r:00002B44 ; Segment type: Pure data
.rdata$r:00002B44 ; Segment permissions: Read
.rdata$r:00002B44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002B44                 assume cs:_rdata$r
.rdata$r:00002B44                 ;org 2B44h
.rdata$r:00002B44 ; COMDAT (pick any)
.rdata$r:00002B44                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00002B44 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002B44 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002B44                                         ; DATA XREF: .rdata$r:00002B18o
.rdata$r:00002B44                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:00002B44                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00002B48                 align 10h
.rdata$r:00002B50                 db 0FFh
.rdata$r:00002B51                 db 0FFh
.rdata$r:00002B52                 db 0FFh
.rdata$r:00002B53                 db 0FFh
.rdata$r:00002B54                 db    0
.rdata$r:00002B55                 db    0
.rdata$r:00002B56                 db    0
.rdata$r:00002B57                 db    0
.rdata$r:00002B58                 db  40h ; @
.rdata$r:00002B59                 db    0
.rdata$r:00002B5A                 db    0
.rdata$r:00002B5B                 db    0
.rdata$r:00002B5C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002B5C _rdata$r        ends
.rdata$r:00002B5C
.data:00002B60 ; ===========================================================================
.data:00002B60
.data:00002B60 ; Segment type: Pure data
.data:00002B60 ; Segment permissions: Read/Write
.data:00002B60 _data           segment dword public 'DATA' use32
.data:00002B60                 assume cs:_data
.data:00002B60                 ;org 2B60h
.data:00002B60 ; COMDAT (pick any)
.data:00002B60                 public ??_R0?AUIUnknown@@@8
.data:00002B60 ; struct IUnknown `RTTI Type Descriptor'
.data:00002B60 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00002B60                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00002B60                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00002B60                                         ; const type_info::`vftable'
.data:00002B64                 align 8
.data:00002B68 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:00002B77                 align 4
.data:00002B77 _data           ends
.data:00002B77
.rdata$r:00002B78 ; ===========================================================================
.rdata$r:00002B78
.rdata$r:00002B78 ; Segment type: Pure data
.rdata$r:00002B78 ; Segment permissions: Read
.rdata$r:00002B78 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002B78                 assume cs:_rdata$r
.rdata$r:00002B78                 ;org 2B78h
.rdata$r:00002B78 ; COMDAT (pick any)
.rdata$r:00002B78                 public ??_R3IUnknown@@8
.rdata$r:00002B78 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002B78 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00002B5Co
.rdata$r:00002B78                                         ; .rdata$r:00004734o ...
.rdata$r:00002B79                 db    0
.rdata$r:00002B7A                 db    0
.rdata$r:00002B7B                 db    0
.rdata$r:00002B7C                 db    0
.rdata$r:00002B7D                 db    0
.rdata$r:00002B7E                 db    0
.rdata$r:00002B7F                 db    0
.rdata$r:00002B80                 db    1
.rdata$r:00002B81                 db    0
.rdata$r:00002B82                 db    0
.rdata$r:00002B83                 db    0
.rdata$r:00002B84                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00002B84 _rdata$r        ends
.rdata$r:00002B84
.rdata$r:00002B88 ; ===========================================================================
.rdata$r:00002B88
.rdata$r:00002B88 ; Segment type: Pure data
.rdata$r:00002B88 ; Segment permissions: Read
.rdata$r:00002B88 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002B88                 assume cs:_rdata$r
.rdata$r:00002B88                 ;org 2B88h
.rdata$r:00002B88 ; COMDAT (pick any)
.rdata$r:00002B88                 public ??_R2IUnknown@@8
.rdata$r:00002B88 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00002B88 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00002B88                                         ; DATA XREF: .rdata$r:00002B84o
.rdata$r:00002B88                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002B8C                 db    0
.rdata$r:00002B8D                 align 10h
.rdata$r:00002B8D _rdata$r        ends
.rdata$r:00002B8D
.rdata$r:00002B90 ; ===========================================================================
.rdata$r:00002B90
.rdata$r:00002B90 ; Segment type: Pure data
.rdata$r:00002B90 ; Segment permissions: Read
.rdata$r:00002B90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002B90                 assume cs:_rdata$r
.rdata$r:00002B90                 ;org 2B90h
.rdata$r:00002B90 ; COMDAT (pick any)
.rdata$r:00002B90                 public ??_R13?0A@EA@CMixer@NCoderMixer2@@8
.rdata$r:00002B90 ; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00002B90 ??_R13?0A@EA@CMixer@NCoderMixer2@@8 dd offset ??_R0?AVCMixer@NCoderMixer2@@@8
.rdata$r:00002B90                                         ; DATA XREF: .rdata$r:00002B1Co
.rdata$r:00002B90                                         ; NCoderMixer2::CMixer `RTTI Type Descriptor'
.rdata$r:00002B94                 align 8
.rdata$r:00002B98                 db    4
.rdata$r:00002B99                 db    0
.rdata$r:00002B9A                 db    0
.rdata$r:00002B9B                 db    0
.rdata$r:00002B9C                 db 0FFh
.rdata$r:00002B9D                 db 0FFh
.rdata$r:00002B9E                 db 0FFh
.rdata$r:00002B9F                 db 0FFh
.rdata$r:00002BA0                 db    0
.rdata$r:00002BA1                 db    0
.rdata$r:00002BA2                 db    0
.rdata$r:00002BA3                 db    0
.rdata$r:00002BA4                 db  40h ; @
.rdata$r:00002BA5                 db    0
.rdata$r:00002BA6                 db    0
.rdata$r:00002BA7                 db    0
.rdata$r:00002BA8                 dd offset ??_R3CMixer@NCoderMixer2@@8 ; NCoderMixer2::CMixer::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002BA8 _rdata$r        ends
.rdata$r:00002BA8
.data:00002BAC ; ===========================================================================
.data:00002BAC
.data:00002BAC ; Segment type: Pure data
.data:00002BAC ; Segment permissions: Read/Write
.data:00002BAC _data           segment dword public 'DATA' use32
.data:00002BAC                 assume cs:_data
.data:00002BAC                 ;org 2BACh
.data:00002BAC ; COMDAT (pick any)
.data:00002BAC                 public ??_R0?AVCMixer@NCoderMixer2@@@8
.data:00002BAC ; class NCoderMixer2::CMixer `RTTI Type Descriptor'
.data:00002BAC ??_R0?AVCMixer@NCoderMixer2@@@8 dd offset ??_7type_info@@6B@
.data:00002BAC                                         ; DATA XREF: .rdata$r:NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00002BAC                                         ; .rdata$r:NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002BAC                                         ; const type_info::`vftable'
.data:00002BB0                 db    0
.data:00002BB1                 db    0
.data:00002BB2                 db    0
.data:00002BB3                 db    0
.data:00002BB4                 db  2Eh ; .
.data:00002BB5                 db  3Fh ; ?
.data:00002BB6                 db  41h ; A
.data:00002BB7                 db  56h ; V
.data:00002BB8                 db  43h ; C
.data:00002BB9                 db  4Dh ; M
.data:00002BBA                 db  69h ; i
.data:00002BBB                 db  78h ; x
.data:00002BBC                 db  65h ; e
.data:00002BBD                 db  72h ; r
.data:00002BBE                 db  40h ; @
.data:00002BBF                 db  4Eh ; N
.data:00002BC0                 db  43h ; C
.data:00002BC1                 db  6Fh ; o
.data:00002BC2                 db  64h ; d
.data:00002BC3                 db  65h ; e
.data:00002BC4                 db  72h ; r
.data:00002BC5                 db  4Dh ; M
.data:00002BC6                 db  69h ; i
.data:00002BC7                 db  78h ; x
.data:00002BC8                 db  65h ; e
.data:00002BC9                 db  72h ; r
.data:00002BCA                 db  32h ; 2
.data:00002BCB                 db  40h ; @
.data:00002BCC                 db  40h ; @
.data:00002BCD                 db    0
.data:00002BCE                 align 10h
.data:00002BCE _data           ends
.data:00002BCE
.rdata$r:00002BD0 ; ===========================================================================
.rdata$r:00002BD0
.rdata$r:00002BD0 ; Segment type: Pure data
.rdata$r:00002BD0 ; Segment permissions: Read
.rdata$r:00002BD0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002BD0                 assume cs:_rdata$r
.rdata$r:00002BD0                 ;org 2BD0h
.rdata$r:00002BD0 ; COMDAT (pick any)
.rdata$r:00002BD0                 public ??_R3CMixer@NCoderMixer2@@8
.rdata$r:00002BD0 ; NCoderMixer2::CMixer::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002BD0 ??_R3CMixer@NCoderMixer2@@8 db    0     ; DATA XREF: .rdata$r:00002BA8o
.rdata$r:00002BD0                                         ; .rdata$r:00002C00o ...
.rdata$r:00002BD1                 db    0
.rdata$r:00002BD2                 db    0
.rdata$r:00002BD3                 db    0
.rdata$r:00002BD4                 db    0
.rdata$r:00002BD5                 db    0
.rdata$r:00002BD6                 db    0
.rdata$r:00002BD7                 db    0
.rdata$r:00002BD8                 db    1
.rdata$r:00002BD9                 db    0
.rdata$r:00002BDA                 db    0
.rdata$r:00002BDB                 db    0
.rdata$r:00002BDC                 dd offset ??_R2CMixer@NCoderMixer2@@8 ; NCoderMixer2::CMixer::`RTTI Base Class Array'
.rdata$r:00002BDC _rdata$r        ends
.rdata$r:00002BDC
.rdata$r:00002BE0 ; ===========================================================================
.rdata$r:00002BE0
.rdata$r:00002BE0 ; Segment type: Pure data
.rdata$r:00002BE0 ; Segment permissions: Read
.rdata$r:00002BE0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002BE0                 assume cs:_rdata$r
.rdata$r:00002BE0                 ;org 2BE0h
.rdata$r:00002BE0 ; COMDAT (pick any)
.rdata$r:00002BE0                 public ??_R2CMixer@NCoderMixer2@@8
.rdata$r:00002BE0 ; NCoderMixer2::CMixer::`RTTI Base Class Array'
.rdata$r:00002BE0 ??_R2CMixer@NCoderMixer2@@8 dd offset ??_R1A@?0A@EA@CMixer@NCoderMixer2@@8
.rdata$r:00002BE0                                         ; DATA XREF: .rdata$r:00002BDCo
.rdata$r:00002BE0                                         ; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002BE4                 db    0
.rdata$r:00002BE5                 align 4
.rdata$r:00002BE5 _rdata$r        ends
.rdata$r:00002BE5
.rdata$r:00002BE8 ; ===========================================================================
.rdata$r:00002BE8
.rdata$r:00002BE8 ; Segment type: Pure data
.rdata$r:00002BE8 ; Segment permissions: Read
.rdata$r:00002BE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002BE8                 assume cs:_rdata$r
.rdata$r:00002BE8                 ;org 2BE8h
.rdata$r:00002BE8 ; COMDAT (pick any)
.rdata$r:00002BE8                 public ??_R1A@?0A@EA@CMixer@NCoderMixer2@@8
.rdata$r:00002BE8 ; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002BE8 ??_R1A@?0A@EA@CMixer@NCoderMixer2@@8 dd offset ??_R0?AVCMixer@NCoderMixer2@@@8
.rdata$r:00002BE8                                         ; DATA XREF: .rdata$r:NCoderMixer2::CMixer::`RTTI Base Class Array'o
.rdata$r:00002BE8                                         ; NCoderMixer2::CMixer `RTTI Type Descriptor'
.rdata$r:00002BEC                 db    0
.rdata$r:00002BED                 db    0
.rdata$r:00002BEE                 db    0
.rdata$r:00002BEF                 db    0
.rdata$r:00002BF0                 db    0
.rdata$r:00002BF1                 db    0
.rdata$r:00002BF2                 db    0
.rdata$r:00002BF3                 db    0
.rdata$r:00002BF4                 db 0FFh
.rdata$r:00002BF5                 db 0FFh
.rdata$r:00002BF6                 db 0FFh
.rdata$r:00002BF7                 db 0FFh
.rdata$r:00002BF8                 db    0
.rdata$r:00002BF9                 db    0
.rdata$r:00002BFA                 db    0
.rdata$r:00002BFB                 db    0
.rdata$r:00002BFC                 db  40h ; @
.rdata$r:00002BFD                 db    0
.rdata$r:00002BFE                 db    0
.rdata$r:00002BFF                 db    0
.rdata$r:00002C00                 dd offset ??_R3CMixer@NCoderMixer2@@8 ; NCoderMixer2::CMixer::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002C00 _rdata$r        ends
.rdata$r:00002C00
.rdata$r:00002C04 ; ===========================================================================
.rdata$r:00002C04
.rdata$r:00002C04 ; Segment type: Pure data
.rdata$r:00002C04 ; Segment permissions: Read
.rdata$r:00002C04 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002C04                 assume cs:_rdata$r
.rdata$r:00002C04                 ;org 2C04h
.rdata$r:00002C04 ; COMDAT (pick any)
.rdata$r:00002C04                 public ??_R1GI@?0A@EA@CMyUnknownImp@@8
.rdata$r:00002C04 ; CMyUnknownImp::`RTTI Base Class Descriptor at (104, -1, 0, 64)'
.rdata$r:00002C04 ??_R1GI@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00002C04                                         ; DATA XREF: .rdata$r:00002B20o
.rdata$r:00002C04                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00002C08                 db    0
.rdata$r:00002C09                 db    0
.rdata$r:00002C0A                 db    0
.rdata$r:00002C0B                 db    0
.rdata$r:00002C0C                 db  68h ; h
.rdata$r:00002C0D                 db    0
.rdata$r:00002C0E                 db    0
.rdata$r:00002C0F                 db    0
.rdata$r:00002C10                 db 0FFh
.rdata$r:00002C11                 db 0FFh
.rdata$r:00002C12                 db 0FFh
.rdata$r:00002C13                 db 0FFh
.rdata$r:00002C14                 db    0
.rdata$r:00002C15                 db    0
.rdata$r:00002C16                 db    0
.rdata$r:00002C17                 db    0
.rdata$r:00002C18                 db  40h ; @
.rdata$r:00002C19                 db    0
.rdata$r:00002C1A                 db    0
.rdata$r:00002C1B                 db    0
.rdata$r:00002C1C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002C1C _rdata$r        ends
.rdata$r:00002C1C
.data:00002C20 ; ===========================================================================
.data:00002C20
.data:00002C20 ; Segment type: Pure data
.data:00002C20 ; Segment permissions: Read/Write
.data:00002C20 _data           segment dword public 'DATA' use32
.data:00002C20                 assume cs:_data
.data:00002C20                 ;org 2C20h
.data:00002C20 ; COMDAT (pick any)
.data:00002C20                 public ??_R0?AVCMyUnknownImp@@@8
.data:00002C20 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00002C20 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00002C20                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (104,-1,0,64)'o
.data:00002C20                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002C20                                         ; const type_info::`vftable'
.data:00002C24                 align 8
.data:00002C28 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00002C28 _data           ends
.data:00002C28
.rdata$r:00002C3C ; ===========================================================================
.rdata$r:00002C3C
.rdata$r:00002C3C ; Segment type: Pure data
.rdata$r:00002C3C ; Segment permissions: Read
.rdata$r:00002C3C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002C3C                 assume cs:_rdata$r
.rdata$r:00002C3C                 ;org 2C3Ch
.rdata$r:00002C3C ; COMDAT (pick any)
.rdata$r:00002C3C                 public ??_R3CMyUnknownImp@@8
.rdata$r:00002C3C ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002C3C ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00002C1Co
.rdata$r:00002C3C                                         ; .rdata$r:00002C6Co ...
.rdata$r:00002C3D                 db    0
.rdata$r:00002C3E                 db    0
.rdata$r:00002C3F                 db    0
.rdata$r:00002C40                 db    0
.rdata$r:00002C41                 db    0
.rdata$r:00002C42                 db    0
.rdata$r:00002C43                 db    0
.rdata$r:00002C44                 db    1
.rdata$r:00002C45                 db    0
.rdata$r:00002C46                 db    0
.rdata$r:00002C47                 db    0
.rdata$r:00002C48                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00002C48 _rdata$r        ends
.rdata$r:00002C48
.rdata$r:00002C4C ; ===========================================================================
.rdata$r:00002C4C
.rdata$r:00002C4C ; Segment type: Pure data
.rdata$r:00002C4C ; Segment permissions: Read
.rdata$r:00002C4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002C4C                 assume cs:_rdata$r
.rdata$r:00002C4C                 ;org 2C4Ch
.rdata$r:00002C4C ; COMDAT (pick any)
.rdata$r:00002C4C                 public ??_R2CMyUnknownImp@@8
.rdata$r:00002C4C ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00002C4C ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00002C4C                                         ; DATA XREF: .rdata$r:00002C48o
.rdata$r:00002C4C                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002C50                 db    0
.rdata$r:00002C51                 align 4
.rdata$r:00002C51 _rdata$r        ends
.rdata$r:00002C51
.rdata$r:00002C54 ; ===========================================================================
.rdata$r:00002C54
.rdata$r:00002C54 ; Segment type: Pure data
.rdata$r:00002C54 ; Segment permissions: Read
.rdata$r:00002C54 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002C54                 assume cs:_rdata$r
.rdata$r:00002C54                 ;org 2C54h
.rdata$r:00002C54 ; COMDAT (pick any)
.rdata$r:00002C54                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00002C54 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002C54 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00002C54                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00002C54                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00002C58                 align 10h
.rdata$r:00002C60                 db 0FFh
.rdata$r:00002C61                 db 0FFh
.rdata$r:00002C62                 db 0FFh
.rdata$r:00002C63                 db 0FFh
.rdata$r:00002C64                 db    0
.rdata$r:00002C65                 db    0
.rdata$r:00002C66                 db    0
.rdata$r:00002C67                 db    0
.rdata$r:00002C68                 db  40h ; @
.rdata$r:00002C69                 db    0
.rdata$r:00002C6A                 db    0
.rdata$r:00002C6B                 db    0
.rdata$r:00002C6C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002C6C _rdata$r        ends
.rdata$r:00002C6C
.rdata$r:00002C70 ; ===========================================================================
.rdata$r:00002C70
.rdata$r:00002C70 ; Segment type: Pure data
.rdata$r:00002C70 ; Segment permissions: Read
.rdata$r:00002C70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002C70                 assume cs:_rdata$r
.rdata$r:00002C70                 ;org 2C70h
.rdata$r:00002C70 ; COMDAT (pick any)
.rdata$r:00002C70                 public ??_R4CMixerMT@NCoderMixer2@@6BCMixer@1@@
.rdata$r:00002C70 ; const NCoderMixer2::CMixerMT::`RTTI Complete Object Locator'{for `NCoderMixer2::CMixer'}
.rdata$r:00002C70 ??_R4CMixerMT@NCoderMixer2@@6BCMixer@1@@ db    0
.rdata$r:00002C70                                         ; DATA XREF: .rdata:00002A64o
.rdata$r:00002C71                 db    0
.rdata$r:00002C72                 db    0
.rdata$r:00002C73                 db    0
.rdata$r:00002C74                 db    4
.rdata$r:00002C75                 db    0
.rdata$r:00002C76                 db    0
.rdata$r:00002C77                 db    0
.rdata$r:00002C78                 db    0
.rdata$r:00002C79                 db    0
.rdata$r:00002C7A                 db    0
.rdata$r:00002C7B                 db    0
.rdata$r:00002C7C                 dd offset ??_R0?AVCMixerMT@NCoderMixer2@@@8 ; NCoderMixer2::CMixerMT `RTTI Type Descriptor'
.rdata$r:00002C80                 dd offset ??_R3CMixerMT@NCoderMixer2@@8 ; NCoderMixer2::CMixerMT::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002C80 _rdata$r        ends
.rdata$r:00002C80
.text:00002C84 ; ===========================================================================
.text:00002C84
.text:00002C84 ; Segment type: Pure code
.text:00002C84 ; Segment permissions: Read/Execute
.text:00002C84 _text           segment para public 'CODE' use32
.text:00002C84                 assume cs:_text
.text:00002C84                 ;org 2C84h
.text:00002C84 ; COMDAT (pick any)
.text:00002C84                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002C84
.text:00002C84 ; =============== S U B R O U T I N E =======================================
.text:00002C84
.text:00002C84 ; Attributes: bp-based frame
.text:00002C84
.text:00002C84 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00002C84                 public ??0CMyUnknownImp@@QAE@XZ
.text:00002C84 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCoderMixer2::CMixerMT::CMixerMT(bool)+52p
.text:00002C84                                         ; CDynBufSeqOutStream::CDynBufSeqOutStream(void)+1Cp ...
.text:00002C84
.text:00002C84 var_4           = dword ptr -4
.text:00002C84
.text:00002C84                 push    ebp
.text:00002C85                 mov     ebp, esp
.text:00002C87                 push    ecx
.text:00002C88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C8F                 mov     [ebp+var_4], ecx
.text:00002C92                 mov     eax, [ebp+var_4]
.text:00002C95                 mov     dword ptr [eax], 0
.text:00002C9B                 mov     eax, [ebp+var_4]
.text:00002C9E                 mov     esp, ebp
.text:00002CA0                 pop     ebp
.text:00002CA1                 retn
.text:00002CA1 ??0CMyUnknownImp@@QAE@XZ endp
.text:00002CA1
.text:00002CA1 ; ---------------------------------------------------------------------------
.text:00002CA2                 align 4
.text:00002CA2 _text           ends
.text:00002CA2
.text:00002CA4 ; ===========================================================================
.text:00002CA4
.text:00002CA4 ; Segment type: Pure code
.text:00002CA4 ; Segment permissions: Read/Execute
.text:00002CA4 _text           segment para public 'CODE' use32
.text:00002CA4                 assume cs:_text
.text:00002CA4                 ;org 2CA4h
.text:00002CA4 ; COMDAT (pick any)
.text:00002CA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002CA4
.text:00002CA4 ; =============== S U B R O U T I N E =======================================
.text:00002CA4
.text:00002CA4 ; Attributes: bp-based frame
.text:00002CA4
.text:00002CA4 ; public: __thiscall IUnknown::IUnknown(void)
.text:00002CA4                 public ??0IUnknown@@QAE@XZ
.text:00002CA4 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: NCoderMixer2::CMixerMT::CMixerMT(bool)+30p
.text:00002CA4                                         ; ISequentialOutStream::ISequentialOutStream(void)+11p ...
.text:00002CA4
.text:00002CA4 var_4           = dword ptr -4
.text:00002CA4
.text:00002CA4                 push    ebp
.text:00002CA5                 mov     ebp, esp
.text:00002CA7                 push    ecx
.text:00002CA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002CAF                 mov     [ebp+var_4], ecx
.text:00002CB2                 mov     eax, [ebp+var_4]
.text:00002CB5                 mov     esp, ebp
.text:00002CB7                 pop     ebp
.text:00002CB8                 retn
.text:00002CB8 ??0IUnknown@@QAE@XZ endp
.text:00002CB8
.text:00002CB8 ; ---------------------------------------------------------------------------
.text:00002CB9                 align 4
.text:00002CB9 _text           ends
.text:00002CB9
.text:00002CBC ; ===========================================================================
.text:00002CBC
.text:00002CBC ; Segment type: Pure code
.text:00002CBC ; Segment permissions: Read/Execute
.text:00002CBC _text           segment para public 'CODE' use32
.text:00002CBC                 assume cs:_text
.text:00002CBC                 ;org 2CBCh
.text:00002CBC ; COMDAT (pick any)
.text:00002CBC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002CBC
.text:00002CBC ; =============== S U B R O U T I N E =======================================
.text:00002CBC
.text:00002CBC ; Attributes: bp-based frame
.text:00002CBC
.text:00002CBC ; _DWORD __thiscall NCoderMixer2::CMixer::CMixer(NCoderMixer2::CMixer *this, bool)
.text:00002CBC                 public ??0CMixer@NCoderMixer2@@QAE@_N@Z
.text:00002CBC ??0CMixer@NCoderMixer2@@QAE@_N@Z proc near
.text:00002CBC                                         ; CODE XREF: NCoderMixer2::CMixerMT::CMixerMT(bool)+40p
.text:00002CBC
.text:00002CBC var_10          = dword ptr -10h
.text:00002CBC var_C           = dword ptr -0Ch
.text:00002CBC var_4           = dword ptr -4
.text:00002CBC arg_0           = byte ptr  8
.text:00002CBC
.text:00002CBC                 push    ebp
.text:00002CBD                 mov     ebp, esp
.text:00002CBF                 push    0FFFFFFFFh
.text:00002CC1                 push    offset __ehhandler$??0CMixer@NCoderMixer2@@QAE@_N@Z
.text:00002CC6                 mov     eax, large fs:0
.text:00002CCC                 push    eax
.text:00002CCD                 push    ecx
.text:00002CCE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002CD5                 mov     eax, dword ptr ds:___security_cookie
.text:00002CDA                 xor     eax, ebp
.text:00002CDC                 push    eax
.text:00002CDD                 lea     eax, [ebp+var_C]
.text:00002CE0                 mov     large fs:0, eax
.text:00002CE6                 mov     [ebp+var_10], ecx
.text:00002CE9                 mov     eax, [ebp+var_10]
.text:00002CEC                 mov     dword ptr [eax], offset ??_7CMixer@NCoderMixer2@@6B@ ; const NCoderMixer2::CMixer::`vftable'
.text:00002CF2                 mov     ecx, [ebp+var_10]
.text:00002CF5                 add     ecx, 4          ; this
.text:00002CF8                 call    ??0CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::CBindInfo(void)
.text:00002CFD                 mov     [ebp+var_4], 0
.text:00002D04                 mov     ecx, [ebp+var_10]
.text:00002D07                 add     ecx, 44h ; 'D'
.text:00002D0A                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:00002D0F                 mov     byte ptr [ebp+var_4], 1
.text:00002D13                 mov     ecx, [ebp+var_10]
.text:00002D16                 add     ecx, 50h ; 'P'
.text:00002D19                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:00002D1E                 mov     ecx, [ebp+var_10]
.text:00002D21                 mov     dl, [ebp+arg_0]
.text:00002D24                 mov     [ecx+5Ch], dl
.text:00002D27                 mov     eax, [ebp+var_10]
.text:00002D2A                 mov     dword ptr [eax+60h], 0
.text:00002D31                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002D38                 mov     eax, [ebp+var_10]
.text:00002D3B                 mov     ecx, [ebp+var_C]
.text:00002D3E                 mov     large fs:0, ecx
.text:00002D45                 pop     ecx
.text:00002D46                 add     esp, 10h
.text:00002D49                 cmp     ebp, esp
.text:00002D4B                 call    __RTC_CheckEsp
.text:00002D50                 mov     esp, ebp
.text:00002D52                 pop     ebp
.text:00002D53                 retn    4
.text:00002D53 ??0CMixer@NCoderMixer2@@QAE@_N@Z endp
.text:00002D53
.text:00002D53 ; ---------------------------------------------------------------------------
.text:00002D56                 align 4
.text:00002D56 _text           ends
.text:00002D56
.text$x:00002D58 ; ===========================================================================
.text$x:00002D58
.text$x:00002D58 ; Segment type: Pure code
.text$x:00002D58 ; Segment permissions: Read/Execute
.text$x:00002D58 _text$x         segment para public 'CODE' use32
.text$x:00002D58                 assume cs:_text$x
.text$x:00002D58                 ;org 2D58h
.text$x:00002D58 ; COMDAT (pick associative to section at 2CBC)
.text$x:00002D58                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00002D58
.text$x:00002D58 ; =============== S U B R O U T I N E =======================================
.text$x:00002D58
.text$x:00002D58
.text$x:00002D58 __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$0 proc near
.text$x:00002D58                                         ; DATA XREF: .xdata$x:00002DB4o
.text$x:00002D58                 mov     ecx, [ebp-10h]
.text$x:00002D5B                 add     ecx, 4          ; this
.text$x:00002D5E                 jmp     ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text$x:00002D5E __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$0 endp
.text$x:00002D5E
.text$x:00002D63
.text$x:00002D63 ; =============== S U B R O U T I N E =======================================
.text$x:00002D63
.text$x:00002D63
.text$x:00002D63 __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$1 proc near
.text$x:00002D63                                         ; DATA XREF: .xdata$x:00002DBCo
.text$x:00002D63                 mov     ecx, [ebp-10h]
.text$x:00002D66                 add     ecx, 44h ; 'D'
.text$x:00002D69                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:00002D69 __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$1 endp
.text$x:00002D69
.text$x:00002D6E
.text$x:00002D6E ; =============== S U B R O U T I N E =======================================
.text$x:00002D6E
.text$x:00002D6E
.text$x:00002D6E __ehhandler$??0CMixer@NCoderMixer2@@QAE@_N@Z proc near
.text$x:00002D6E                                         ; DATA XREF: NCoderMixer2::CMixer::CMixer(bool)+5o
.text$x:00002D6E
.text$x:00002D6E arg_4           = dword ptr  8
.text$x:00002D6E
.text$x:00002D6E                 mov     edx, [esp+arg_4]
.text$x:00002D72                 lea     eax, [edx+0Ch]
.text$x:00002D75                 mov     ecx, [edx-8]
.text$x:00002D78                 xor     ecx, eax
.text$x:00002D7A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002D7F                 mov     eax, offset __ehfuncinfo$??0CMixer@NCoderMixer2@@QAE@_N@Z
.text$x:00002D84                 jmp     ___CxxFrameHandler3
.text$x:00002D84 __ehhandler$??0CMixer@NCoderMixer2@@QAE@_N@Z endp
.text$x:00002D84
.text$x:00002D84 ; ---------------------------------------------------------------------------
.text$x:00002D89                 align 4
.text$x:00002D89 _text$x         ends
.text$x:00002D89
.rdata:00002D8C ; ===========================================================================
.rdata:00002D8C
.rdata:00002D8C ; Segment type: Pure data
.rdata:00002D8C ; Segment permissions: Read
.rdata:00002D8C _rdata          segment dword public 'DATA' use32
.rdata:00002D8C                 assume cs:_rdata
.rdata:00002D8C                 ;org 2D8Ch
.rdata:00002D8C ; COMDAT (pick largest)
.rdata:00002D8C                 dd offset ??_R4CMixer@NCoderMixer2@@6B@ ; const NCoderMixer2::CMixer::`RTTI Complete Object Locator'
.rdata:00002D90                 public ??_7CMixer@NCoderMixer2@@6B@
.rdata:00002D90 ; const NCoderMixer2::CMixer::`vftable'
.rdata:00002D90 ??_7CMixer@NCoderMixer2@@6B@ dd offset ?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z
.rdata:00002D90                                         ; DATA XREF: NCoderMixer2::CMixer::CMixer(bool)+30o
.rdata:00002D90                                         ; NCoderMixer2::CMixer::SetBindInfo(NCoderMixer2::CBindInfo const &)
.rdata:00002D94                 dd offset __purecall
.rdata:00002D98                 dd offset __purecall
.rdata:00002D9C                 dd offset __purecall
.rdata:00002DA0                 dd offset __purecall
.rdata:00002DA4                 dd offset __purecall
.rdata:00002DA8                 dd offset __purecall
.rdata:00002DAC                 dd offset __purecall
.rdata:00002DAC _rdata          ends
.rdata:00002DAC
.xdata$x:00002DB0 ; ===========================================================================
.xdata$x:00002DB0
.xdata$x:00002DB0 ; Segment type: Pure data
.xdata$x:00002DB0 ; Segment permissions: Read
.xdata$x:00002DB0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002DB0                 assume cs:_xdata$x
.xdata$x:00002DB0                 ;org 2DB0h
.xdata$x:00002DB0 ; COMDAT (pick associative to section at 2CBC)
.xdata$x:00002DB0 __unwindtable$??0CMixer@NCoderMixer2@@QAE@_N@Z db 0FFh
.xdata$x:00002DB0                                         ; DATA XREF: .xdata$x:00002DC8o
.xdata$x:00002DB1                 db 0FFh
.xdata$x:00002DB2                 db 0FFh
.xdata$x:00002DB3                 db 0FFh
.xdata$x:00002DB4                 dd offset __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$0
.xdata$x:00002DB8                 db    0
.xdata$x:00002DB9                 db    0
.xdata$x:00002DBA                 db    0
.xdata$x:00002DBB                 db    0
.xdata$x:00002DBC                 dd offset __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$1
.xdata$x:00002DC0 __ehfuncinfo$??0CMixer@NCoderMixer2@@QAE@_N@Z db  22h ; "
.xdata$x:00002DC0                                         ; DATA XREF: __ehhandler$??0CMixer@NCoderMixer2@@QAE@_N@Z+11o
.xdata$x:00002DC1                 db    5
.xdata$x:00002DC2                 db  93h ; ô
.xdata$x:00002DC3                 db  19h
.xdata$x:00002DC4                 db    2
.xdata$x:00002DC5                 db    0
.xdata$x:00002DC6                 db    0
.xdata$x:00002DC7                 db    0
.xdata$x:00002DC8                 dd offset __unwindtable$??0CMixer@NCoderMixer2@@QAE@_N@Z
.xdata$x:00002DCC                 align 20h
.xdata$x:00002DE0                 db    1
.xdata$x:00002DE1                 db    0
.xdata$x:00002DE2                 db    0
.xdata$x:00002DE3                 db    0
.xdata$x:00002DE3 _xdata$x        ends
.xdata$x:00002DE3
.rdata$r:00002DE4 ; ===========================================================================
.rdata$r:00002DE4
.rdata$r:00002DE4 ; Segment type: Pure data
.rdata$r:00002DE4 ; Segment permissions: Read
.rdata$r:00002DE4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002DE4                 assume cs:_rdata$r
.rdata$r:00002DE4                 ;org 2DE4h
.rdata$r:00002DE4 ; COMDAT (pick any)
.rdata$r:00002DE4                 public ??_R4CMixer@NCoderMixer2@@6B@
.rdata$r:00002DE4 ; const NCoderMixer2::CMixer::`RTTI Complete Object Locator'
.rdata$r:00002DE4 ??_R4CMixer@NCoderMixer2@@6B@ db    0   ; DATA XREF: .rdata:00002D8Co
.rdata$r:00002DE5                 db    0
.rdata$r:00002DE6                 db    0
.rdata$r:00002DE7                 db    0
.rdata$r:00002DE8                 db    0
.rdata$r:00002DE9                 db    0
.rdata$r:00002DEA                 db    0
.rdata$r:00002DEB                 db    0
.rdata$r:00002DEC                 db    0
.rdata$r:00002DED                 db    0
.rdata$r:00002DEE                 db    0
.rdata$r:00002DEF                 db    0
.rdata$r:00002DF0                 dd offset ??_R0?AVCMixer@NCoderMixer2@@@8 ; NCoderMixer2::CMixer `RTTI Type Descriptor'
.rdata$r:00002DF4                 dd offset ??_R3CMixer@NCoderMixer2@@8 ; NCoderMixer2::CMixer::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002DF4 _rdata$r        ends
.rdata$r:00002DF4
.text:00002DF8 ; ===========================================================================
.text:00002DF8
.text:00002DF8 ; Segment type: Pure code
.text:00002DF8 ; Segment permissions: Read/Execute
.text:00002DF8 _text           segment para public 'CODE' use32
.text:00002DF8                 assume cs:_text
.text:00002DF8                 ;org 2DF8h
.text:00002DF8 ; COMDAT (pick any)
.text:00002DF8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002DF8
.text:00002DF8 ; =============== S U B R O U T I N E =======================================
.text:00002DF8
.text:00002DF8 ; Attributes: bp-based frame
.text:00002DF8
.text:00002DF8 ; __int32 __thiscall NCoderMixer2::CMixer::SetBindInfo(NCoderMixer2::CMixer *this, const struct NCoderMixer2::CBindInfo *)
.text:00002DF8                 public ?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z
.text:00002DF8 ?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z proc near
.text:00002DF8                                         ; DATA XREF: .rdata:const NCoderMixer2::CMixer::`vftable'o
.text:00002DF8
.text:00002DF8 var_4           = dword ptr -4
.text:00002DF8 arg_0           = dword ptr  8
.text:00002DF8
.text:00002DF8                 push    ebp
.text:00002DF9                 mov     ebp, esp
.text:00002DFB                 push    ecx
.text:00002DFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E03                 mov     [ebp+var_4], ecx
.text:00002E06                 mov     eax, [ebp+arg_0]
.text:00002E09                 push    eax
.text:00002E0A                 mov     ecx, [ebp+var_4]
.text:00002E0D                 add     ecx, 4
.text:00002E10                 call    ??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z ; NCoderMixer2::CBindInfo::operator=(NCoderMixer2::CBindInfo const &)
.text:00002E15                 mov     ecx, [ebp+var_4]
.text:00002E18                 add     ecx, 44h ; 'D'
.text:00002E1B                 call    ?Clear@?$CRecordVector@_N@@QAEXXZ ; CRecordVector<bool>::Clear(void)
.text:00002E20                 mov     ecx, [ebp+var_4]
.text:00002E23                 mov     dword ptr [ecx+60h], 0
.text:00002E2A                 xor     eax, eax
.text:00002E2C                 add     esp, 4
.text:00002E2F                 cmp     ebp, esp
.text:00002E31                 call    __RTC_CheckEsp
.text:00002E36                 mov     esp, ebp
.text:00002E38                 pop     ebp
.text:00002E39                 retn    4
.text:00002E39 ?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z endp
.text:00002E39
.text:00002E39 _text           ends
.text:00002E39
.text:00002E3C ; ===========================================================================
.text:00002E3C
.text:00002E3C ; Segment type: Pure code
.text:00002E3C ; Segment permissions: Read/Execute
.text:00002E3C _text           segment para public 'CODE' use32
.text:00002E3C                 assume cs:_text
.text:00002E3C                 ;org 2E3Ch
.text:00002E3C ; COMDAT (pick any)
.text:00002E3C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002E3C
.text:00002E3C ; =============== S U B R O U T I N E =======================================
.text:00002E3C
.text:00002E3C ; Attributes: bp-based frame
.text:00002E3C
.text:00002E3C ; _DWORD __thiscall NCoderMixer2::CBindInfo::CBindInfo(NCoderMixer2::CBindInfo *__hidden this)
.text:00002E3C                 public ??0CBindInfo@NCoderMixer2@@QAE@XZ
.text:00002E3C ??0CBindInfo@NCoderMixer2@@QAE@XZ proc near
.text:00002E3C                                         ; CODE XREF: NArchive::N7z::CEncoder::CEncoder(NArchive::N7z::CCompressionMethodMode const &)+5Dp
.text:00002E3C                                         ; NCoderMixer2::CMixer::CMixer(bool)+3Cp
.text:00002E3C
.text:00002E3C var_10          = dword ptr -10h
.text:00002E3C var_C           = dword ptr -0Ch
.text:00002E3C var_4           = dword ptr -4
.text:00002E3C
.text:00002E3C                 push    ebp
.text:00002E3D                 mov     ebp, esp
.text:00002E3F                 push    0FFFFFFFFh
.text:00002E41                 push    offset __ehhandler$??0CBindInfo@NCoderMixer2@@QAE@XZ
.text:00002E46                 mov     eax, large fs:0
.text:00002E4C                 push    eax
.text:00002E4D                 push    ecx
.text:00002E4E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002E55                 mov     eax, dword ptr ds:___security_cookie
.text:00002E5A                 xor     eax, ebp
.text:00002E5C                 push    eax
.text:00002E5D                 lea     eax, [ebp+var_C]
.text:00002E60                 mov     large fs:0, eax
.text:00002E66                 mov     [ebp+var_10], ecx
.text:00002E69                 mov     ecx, [ebp+var_10]
.text:00002E6C                 call    ??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::CRecordVector<NCoderMixer2::CCoderStreamsInfo>(void)
.text:00002E71                 mov     [ebp+var_4], 0
.text:00002E78                 mov     ecx, [ebp+var_10]
.text:00002E7B                 add     ecx, 0Ch
.text:00002E7E                 call    ??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::CRecordVector<NCoderMixer2::CBond>(void)
.text:00002E83                 mov     byte ptr [ebp+var_4], 1
.text:00002E87                 mov     ecx, [ebp+var_10]
.text:00002E8A                 add     ecx, 18h
.text:00002E8D                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00002E92                 mov     byte ptr [ebp+var_4], 2
.text:00002E96                 mov     ecx, [ebp+var_10]
.text:00002E99                 add     ecx, 28h ; '('
.text:00002E9C                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00002EA1                 mov     byte ptr [ebp+var_4], 3
.text:00002EA5                 mov     ecx, [ebp+var_10]
.text:00002EA8                 add     ecx, 34h ; '4'
.text:00002EAB                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00002EB0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002EB7                 mov     eax, [ebp+var_10]
.text:00002EBA                 mov     ecx, [ebp+var_C]
.text:00002EBD                 mov     large fs:0, ecx
.text:00002EC4                 pop     ecx
.text:00002EC5                 add     esp, 10h
.text:00002EC8                 cmp     ebp, esp
.text:00002ECA                 call    __RTC_CheckEsp
.text:00002ECF                 mov     esp, ebp
.text:00002ED1                 pop     ebp
.text:00002ED2                 retn
.text:00002ED2 ??0CBindInfo@NCoderMixer2@@QAE@XZ endp
.text:00002ED2
.text:00002ED2 ; ---------------------------------------------------------------------------
.text:00002ED3                 align 4
.text:00002ED3 _text           ends
.text:00002ED3
.text$x:00002ED4 ; ===========================================================================
.text$x:00002ED4
.text$x:00002ED4 ; Segment type: Pure code
.text$x:00002ED4 ; Segment permissions: Read/Execute
.text$x:00002ED4 _text$x         segment para public 'CODE' use32
.text$x:00002ED4                 assume cs:_text$x
.text$x:00002ED4                 ;org 2ED4h
.text$x:00002ED4 ; COMDAT (pick associative to section at 2E3C)
.text$x:00002ED4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00002ED4
.text$x:00002ED4 ; =============== S U B R O U T I N E =======================================
.text$x:00002ED4
.text$x:00002ED4
.text$x:00002ED4 __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:00002ED4                                         ; DATA XREF: .xdata$x:00002F1Co
.text$x:00002ED4                 mov     ecx, [ebp-10h]
.text$x:00002ED7                 jmp     ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>(void)
.text$x:00002ED7 __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$0 endp
.text$x:00002ED7
.text$x:00002EDC
.text$x:00002EDC ; =============== S U B R O U T I N E =======================================
.text$x:00002EDC
.text$x:00002EDC
.text$x:00002EDC __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:00002EDC                                         ; DATA XREF: .xdata$x:00002F24o
.text$x:00002EDC                 mov     ecx, [ebp-10h]
.text$x:00002EDF                 add     ecx, 0Ch
.text$x:00002EE2                 jmp     ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>(void)
.text$x:00002EE2 __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$1 endp
.text$x:00002EE2
.text$x:00002EE7
.text$x:00002EE7 ; =============== S U B R O U T I N E =======================================
.text$x:00002EE7
.text$x:00002EE7
.text$x:00002EE7 __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$2 proc near
.text$x:00002EE7                                         ; DATA XREF: .xdata$x:00002F2Co
.text$x:00002EE7                 mov     ecx, [ebp-10h]
.text$x:00002EEA                 add     ecx, 18h
.text$x:00002EED                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:00002EED __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$2 endp
.text$x:00002EED
.text$x:00002EF2
.text$x:00002EF2 ; =============== S U B R O U T I N E =======================================
.text$x:00002EF2
.text$x:00002EF2
.text$x:00002EF2 __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$3 proc near
.text$x:00002EF2                                         ; DATA XREF: .xdata$x:00002F34o
.text$x:00002EF2                 mov     ecx, [ebp-10h]
.text$x:00002EF5                 add     ecx, 28h ; '('
.text$x:00002EF8                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:00002EF8 __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$3 endp
.text$x:00002EF8
.text$x:00002EFD
.text$x:00002EFD ; =============== S U B R O U T I N E =======================================
.text$x:00002EFD
.text$x:00002EFD
.text$x:00002EFD __ehhandler$??0CBindInfo@NCoderMixer2@@QAE@XZ proc near
.text$x:00002EFD                                         ; DATA XREF: NCoderMixer2::CBindInfo::CBindInfo(void)+5o
.text$x:00002EFD
.text$x:00002EFD arg_4           = dword ptr  8
.text$x:00002EFD
.text$x:00002EFD                 mov     edx, [esp+arg_4]
.text$x:00002F01                 lea     eax, [edx+0Ch]
.text$x:00002F04                 mov     ecx, [edx-8]
.text$x:00002F07                 xor     ecx, eax
.text$x:00002F09                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002F0E                 mov     eax, offset __ehfuncinfo$??0CBindInfo@NCoderMixer2@@QAE@XZ
.text$x:00002F13                 jmp     ___CxxFrameHandler3
.text$x:00002F13 __ehhandler$??0CBindInfo@NCoderMixer2@@QAE@XZ endp
.text$x:00002F13
.text$x:00002F13 _text$x         ends
.text$x:00002F13
.xdata$x:00002F18 ; ===========================================================================
.xdata$x:00002F18
.xdata$x:00002F18 ; Segment type: Pure data
.xdata$x:00002F18 ; Segment permissions: Read
.xdata$x:00002F18 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002F18                 assume cs:_xdata$x
.xdata$x:00002F18                 ;org 2F18h
.xdata$x:00002F18 ; COMDAT (pick associative to section at 2E3C)
.xdata$x:00002F18 __unwindtable$??0CBindInfo@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:00002F18                                         ; DATA XREF: .xdata$x:00002F40o
.xdata$x:00002F19                 db 0FFh
.xdata$x:00002F1A                 db 0FFh
.xdata$x:00002F1B                 db 0FFh
.xdata$x:00002F1C                 dd offset __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$0
.xdata$x:00002F20                 db    0
.xdata$x:00002F21                 db    0
.xdata$x:00002F22                 db    0
.xdata$x:00002F23                 db    0
.xdata$x:00002F24                 dd offset __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$1
.xdata$x:00002F28                 db    1
.xdata$x:00002F29                 db    0
.xdata$x:00002F2A                 db    0
.xdata$x:00002F2B                 db    0
.xdata$x:00002F2C                 dd offset __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$2
.xdata$x:00002F30                 db    2
.xdata$x:00002F31                 db    0
.xdata$x:00002F32                 db    0
.xdata$x:00002F33                 db    0
.xdata$x:00002F34                 dd offset __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$3
.xdata$x:00002F38 __ehfuncinfo$??0CBindInfo@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:00002F38                                         ; DATA XREF: __ehhandler$??0CBindInfo@NCoderMixer2@@QAE@XZ+11o
.xdata$x:00002F39                 db    5
.xdata$x:00002F3A                 db  93h ; ô
.xdata$x:00002F3B                 db  19h
.xdata$x:00002F3C                 db    4
.xdata$x:00002F3D                 db    0
.xdata$x:00002F3E                 db    0
.xdata$x:00002F3F                 db    0
.xdata$x:00002F40                 dd offset __unwindtable$??0CBindInfo@NCoderMixer2@@QAE@XZ
.xdata$x:00002F44                 db    0
.xdata$x:00002F45                 db    0
.xdata$x:00002F46                 db    0
.xdata$x:00002F47                 db    0
.xdata$x:00002F48                 db    0
.xdata$x:00002F49                 db    0
.xdata$x:00002F4A                 db    0
.xdata$x:00002F4B                 db    0
.xdata$x:00002F4C                 db    0
.xdata$x:00002F4D                 db    0
.xdata$x:00002F4E                 db    0
.xdata$x:00002F4F                 db    0
.xdata$x:00002F50                 db    0
.xdata$x:00002F51                 db    0
.xdata$x:00002F52                 db    0
.xdata$x:00002F53                 db    0
.xdata$x:00002F54                 db    0
.xdata$x:00002F55                 db    0
.xdata$x:00002F56                 db    0
.xdata$x:00002F57                 db    0
.xdata$x:00002F58                 db    1
.xdata$x:00002F59                 db    0
.xdata$x:00002F5A                 db    0
.xdata$x:00002F5B                 db    0
.xdata$x:00002F5B _xdata$x        ends
.xdata$x:00002F5B
.text:00002F5C ; ===========================================================================
.text:00002F5C
.text:00002F5C ; Segment type: Pure code
.text:00002F5C ; Segment permissions: Read/Execute
.text:00002F5C _text           segment para public 'CODE' use32
.text:00002F5C                 assume cs:_text
.text:00002F5C                 ;org 2F5Ch
.text:00002F5C ; COMDAT (pick any)
.text:00002F5C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002F5C
.text:00002F5C ; =============== S U B R O U T I N E =======================================
.text:00002F5C
.text:00002F5C ; Attributes: bp-based frame
.text:00002F5C
.text:00002F5C ; _DWORD __thiscall NCoderMixer2::CBindInfo::~CBindInfo(NCoderMixer2::CBindInfo *__hidden this)
.text:00002F5C                 public ??1CBindInfo@NCoderMixer2@@QAE@XZ
.text:00002F5C ??1CBindInfo@NCoderMixer2@@QAE@XZ proc near
.text:00002F5C                                         ; CODE XREF: NArchive::N7z::CEncoder::~CEncoder(void)+82p
.text:00002F5C                                         ; __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$2+6j ...
.text:00002F5C
.text:00002F5C var_10          = dword ptr -10h
.text:00002F5C var_C           = dword ptr -0Ch
.text:00002F5C var_4           = dword ptr -4
.text:00002F5C
.text:00002F5C                 push    ebp
.text:00002F5D                 mov     ebp, esp
.text:00002F5F                 push    0FFFFFFFFh
.text:00002F61                 push    offset __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ
.text:00002F66                 mov     eax, large fs:0
.text:00002F6C                 push    eax
.text:00002F6D                 push    ecx
.text:00002F6E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002F75                 mov     eax, dword ptr ds:___security_cookie
.text:00002F7A                 xor     eax, ebp
.text:00002F7C                 push    eax
.text:00002F7D                 lea     eax, [ebp+var_C]
.text:00002F80                 mov     large fs:0, eax
.text:00002F86                 mov     [ebp+var_10], ecx
.text:00002F89                 mov     [ebp+var_4], 3
.text:00002F90                 mov     ecx, [ebp+var_10]
.text:00002F93                 add     ecx, 34h ; '4'
.text:00002F96                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00002F9B                 mov     byte ptr [ebp+var_4], 2
.text:00002F9F                 mov     ecx, [ebp+var_10]
.text:00002FA2                 add     ecx, 28h ; '('
.text:00002FA5                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00002FAA                 mov     byte ptr [ebp+var_4], 1
.text:00002FAE                 mov     ecx, [ebp+var_10]
.text:00002FB1                 add     ecx, 18h
.text:00002FB4                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:00002FB9                 mov     byte ptr [ebp+var_4], 0
.text:00002FBD                 mov     ecx, [ebp+var_10]
.text:00002FC0                 add     ecx, 0Ch
.text:00002FC3                 call    ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>(void)
.text:00002FC8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002FCF                 mov     ecx, [ebp+var_10]
.text:00002FD2                 call    ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>(void)
.text:00002FD7                 mov     ecx, [ebp+var_C]
.text:00002FDA                 mov     large fs:0, ecx
.text:00002FE1                 pop     ecx
.text:00002FE2                 add     esp, 10h
.text:00002FE5                 cmp     ebp, esp
.text:00002FE7                 call    __RTC_CheckEsp
.text:00002FEC                 mov     esp, ebp
.text:00002FEE                 pop     ebp
.text:00002FEF                 retn
.text:00002FEF ??1CBindInfo@NCoderMixer2@@QAE@XZ endp
.text:00002FEF
.text:00002FEF _text           ends
.text:00002FEF
.text$x:00002FF0 ; ===========================================================================
.text$x:00002FF0
.text$x:00002FF0 ; Segment type: Pure code
.text$x:00002FF0 ; Segment permissions: Read/Execute
.text$x:00002FF0 _text$x         segment para public 'CODE' use32
.text$x:00002FF0                 assume cs:_text$x
.text$x:00002FF0                 ;org 2FF0h
.text$x:00002FF0 ; COMDAT (pick associative to section at 2F5C)
.text$x:00002FF0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00002FF0
.text$x:00002FF0 ; =============== S U B R O U T I N E =======================================
.text$x:00002FF0
.text$x:00002FF0
.text$x:00002FF0 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:00002FF0                                         ; DATA XREF: .xdata$x:00003038o
.text$x:00002FF0                 mov     ecx, [ebp-10h]
.text$x:00002FF3                 jmp     ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>(void)
.text$x:00002FF3 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0 endp
.text$x:00002FF3
.text$x:00002FF8
.text$x:00002FF8 ; =============== S U B R O U T I N E =======================================
.text$x:00002FF8
.text$x:00002FF8
.text$x:00002FF8 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:00002FF8                                         ; DATA XREF: .xdata$x:00003040o
.text$x:00002FF8                 mov     ecx, [ebp-10h]
.text$x:00002FFB                 add     ecx, 0Ch
.text$x:00002FFE                 jmp     ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>(void)
.text$x:00002FFE __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1 endp
.text$x:00002FFE
.text$x:00003003
.text$x:00003003 ; =============== S U B R O U T I N E =======================================
.text$x:00003003
.text$x:00003003
.text$x:00003003 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2 proc near
.text$x:00003003                                         ; DATA XREF: .xdata$x:00003048o
.text$x:00003003                 mov     ecx, [ebp-10h]
.text$x:00003006                 add     ecx, 18h
.text$x:00003009                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:00003009 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2 endp
.text$x:00003009
.text$x:0000300E
.text$x:0000300E ; =============== S U B R O U T I N E =======================================
.text$x:0000300E
.text$x:0000300E
.text$x:0000300E __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3 proc near
.text$x:0000300E                                         ; DATA XREF: .xdata$x:00003050o
.text$x:0000300E                 mov     ecx, [ebp-10h]
.text$x:00003011                 add     ecx, 28h ; '('
.text$x:00003014                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:00003014 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3 endp
.text$x:00003014
.text$x:00003019
.text$x:00003019 ; =============== S U B R O U T I N E =======================================
.text$x:00003019
.text$x:00003019
.text$x:00003019 __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ proc near
.text$x:00003019                                         ; DATA XREF: NCoderMixer2::CBindInfo::~CBindInfo(void)+5o
.text$x:00003019
.text$x:00003019 arg_4           = dword ptr  8
.text$x:00003019
.text$x:00003019                 mov     edx, [esp+arg_4]
.text$x:0000301D                 lea     eax, [edx+0Ch]
.text$x:00003020                 mov     ecx, [edx-8]
.text$x:00003023                 xor     ecx, eax
.text$x:00003025                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000302A                 mov     eax, offset __ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ
.text$x:0000302F                 jmp     ___CxxFrameHandler3
.text$x:0000302F __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ endp
.text$x:0000302F
.text$x:0000302F _text$x         ends
.text$x:0000302F
.xdata$x:00003034 ; ===========================================================================
.xdata$x:00003034
.xdata$x:00003034 ; Segment type: Pure data
.xdata$x:00003034 ; Segment permissions: Read
.xdata$x:00003034 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003034                 assume cs:_xdata$x
.xdata$x:00003034                 ;org 3034h
.xdata$x:00003034 ; COMDAT (pick associative to section at 2F5C)
.xdata$x:00003034 __unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:00003034                                         ; DATA XREF: .xdata$x:0000305Co
.xdata$x:00003035                 db 0FFh
.xdata$x:00003036                 db 0FFh
.xdata$x:00003037                 db 0FFh
.xdata$x:00003038                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0
.xdata$x:0000303C                 align 10h
.xdata$x:00003040                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1
.xdata$x:00003044                 db    1
.xdata$x:00003045                 db    0
.xdata$x:00003046                 db    0
.xdata$x:00003047                 db    0
.xdata$x:00003048                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2
.xdata$x:0000304C                 db    2
.xdata$x:0000304D                 db    0
.xdata$x:0000304E                 db    0
.xdata$x:0000304F                 db    0
.xdata$x:00003050                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3
.xdata$x:00003054 __ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:00003054                                         ; DATA XREF: __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ+11o
.xdata$x:00003055                 db    5
.xdata$x:00003056                 db  93h ; ô
.xdata$x:00003057                 db  19h
.xdata$x:00003058                 db    4
.xdata$x:00003059                 db    0
.xdata$x:0000305A                 db    0
.xdata$x:0000305B                 db    0
.xdata$x:0000305C                 dd offset __unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ
.xdata$x:00003060                 db    0
.xdata$x:00003061                 db    0
.xdata$x:00003062                 db    0
.xdata$x:00003063                 db    0
.xdata$x:00003064                 db    0
.xdata$x:00003065                 db    0
.xdata$x:00003066                 db    0
.xdata$x:00003067                 db    0
.xdata$x:00003068                 db    0
.xdata$x:00003069                 db    0
.xdata$x:0000306A                 db    0
.xdata$x:0000306B                 db    0
.xdata$x:0000306C                 db    0
.xdata$x:0000306D                 db    0
.xdata$x:0000306E                 db    0
.xdata$x:0000306F                 db    0
.xdata$x:00003070                 db    0
.xdata$x:00003071                 db    0
.xdata$x:00003072                 db    0
.xdata$x:00003073                 db    0
.xdata$x:00003074                 db    1
.xdata$x:00003075                 db    0
.xdata$x:00003076                 db    0
.xdata$x:00003077                 db    0
.xdata$x:00003077 _xdata$x        ends
.xdata$x:00003077
.text:00003078 ; ===========================================================================
.text:00003078
.text:00003078 ; Segment type: Pure code
.text:00003078 ; Segment permissions: Read/Execute
.text:00003078 _text           segment para public 'CODE' use32
.text:00003078                 assume cs:_text
.text:00003078                 ;org 3078h
.text:00003078 ; COMDAT (pick any)
.text:00003078                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003078
.text:00003078 ; =============== S U B R O U T I N E =======================================
.text:00003078
.text:00003078 ; Attributes: bp-based frame
.text:00003078
.text:00003078 ; public: struct NCoderMixer2::CBindInfo & __thiscall NCoderMixer2::CBindInfo::operator=(struct NCoderMixer2::CBindInfo const &)
.text:00003078                 public ??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z
.text:00003078 ??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z proc near
.text:00003078                                         ; CODE XREF: NCoderMixer2::CMixer::SetBindInfo(NCoderMixer2::CBindInfo const &)+18p
.text:00003078
.text:00003078 var_4           = dword ptr -4
.text:00003078 arg_0           = dword ptr  8
.text:00003078
.text:00003078                 push    ebp
.text:00003079                 mov     ebp, esp
.text:0000307B                 push    ecx
.text:0000307C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003083                 mov     [ebp+var_4], ecx
.text:00003086                 mov     eax, [ebp+arg_0]
.text:00003089                 push    eax
.text:0000308A                 mov     ecx, [ebp+var_4]
.text:0000308D                 call    ??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=(CRecordVector<NCoderMixer2::CCoderStreamsInfo> const &)
.text:00003092                 mov     ecx, [ebp+arg_0]
.text:00003095                 add     ecx, 0Ch
.text:00003098                 push    ecx
.text:00003099                 mov     ecx, [ebp+var_4]
.text:0000309C                 add     ecx, 0Ch
.text:0000309F                 call    ??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NCoderMixer2::CBond>::operator=(CRecordVector<NCoderMixer2::CBond> const &)
.text:000030A4                 mov     edx, [ebp+arg_0]
.text:000030A7                 add     edx, 18h
.text:000030AA                 push    edx
.text:000030AB                 mov     ecx, [ebp+var_4]
.text:000030AE                 add     ecx, 18h
.text:000030B1                 call    ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z ; CRecordVector<uint>::operator=(CRecordVector<uint> const &)
.text:000030B6                 mov     eax, [ebp+var_4]
.text:000030B9                 mov     ecx, [ebp+arg_0]
.text:000030BC                 mov     edx, [ecx+24h]
.text:000030BF                 mov     [eax+24h], edx
.text:000030C2                 mov     eax, [ebp+arg_0]
.text:000030C5                 add     eax, 28h ; '('
.text:000030C8                 push    eax
.text:000030C9                 mov     ecx, [ebp+var_4]
.text:000030CC                 add     ecx, 28h ; '('
.text:000030CF                 call    ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z ; CRecordVector<uint>::operator=(CRecordVector<uint> const &)
.text:000030D4                 mov     ecx, [ebp+arg_0]
.text:000030D7                 add     ecx, 34h ; '4'
.text:000030DA                 push    ecx
.text:000030DB                 mov     ecx, [ebp+var_4]
.text:000030DE                 add     ecx, 34h ; '4'
.text:000030E1                 call    ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z ; CRecordVector<uint>::operator=(CRecordVector<uint> const &)
.text:000030E6                 mov     eax, [ebp+var_4]
.text:000030E9                 add     esp, 4
.text:000030EC                 cmp     ebp, esp
.text:000030EE                 call    __RTC_CheckEsp
.text:000030F3                 mov     esp, ebp
.text:000030F5                 pop     ebp
.text:000030F6                 retn    4
.text:000030F6 ??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z endp
.text:000030F6
.text:000030F6 ; ---------------------------------------------------------------------------
.text:000030F9                 align 4
.text:000030F9 _text           ends
.text:000030F9
.text:000030FC ; ===========================================================================
.text:000030FC
.text:000030FC ; Segment type: Pure code
.text:000030FC ; Segment permissions: Read/Execute
.text:000030FC _text           segment para public 'CODE' use32
.text:000030FC                 assume cs:_text
.text:000030FC                 ;org 30FCh
.text:000030FC ; COMDAT (pick any)
.text:000030FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000030FC
.text:000030FC ; =============== S U B R O U T I N E =======================================
.text:000030FC
.text:000030FC ; Attributes: bp-based frame
.text:000030FC
.text:000030FC ; __int32 __stdcall NCoderMixer2::CMixerMT::QueryInterface(NCoderMixer2::CMixerMT *this, const struct _GUID *Buf1, void **)
.text:000030FC                 public ?QueryInterface@CMixerMT@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z
.text:000030FC ?QueryInterface@CMixerMT@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000030FC                                         ; DATA XREF: .rdata:const NCoderMixer2::CMixerMT::`vftable'{for `IUnknown'}o
.text:000030FC
.text:000030FC this            = dword ptr  8
.text:000030FC Buf1            = dword ptr  0Ch
.text:000030FC arg_8           = dword ptr  10h
.text:000030FC
.text:000030FC                 push    ebp
.text:000030FD                 mov     ebp, esp
.text:000030FF                 mov     eax, [ebp+arg_8]
.text:00003102                 mov     dword ptr [eax], 0
.text:00003108                 push    offset _IID_IUnknown ; Buf2
.text:0000310D                 mov     ecx, [ebp+Buf1]
.text:00003110                 push    ecx             ; Buf1
.text:00003111                 call    ___@8           ; __(x,x)
.text:00003116                 test    eax, eax
.text:00003118                 jz      short loc_3124
.text:0000311A                 mov     edx, [ebp+arg_8]
.text:0000311D                 mov     eax, [ebp+this]
.text:00003120                 mov     [edx], eax
.text:00003122                 jmp     short loc_312B
.text:00003124 ; ---------------------------------------------------------------------------
.text:00003124
.text:00003124 loc_3124:                               ; CODE XREF: NCoderMixer2::CMixerMT::QueryInterface(_GUID const &,void * *)+1Cj
.text:00003124                 mov     eax, 80004002h
.text:00003129                 jmp     short loc_313C
.text:0000312B ; ---------------------------------------------------------------------------
.text:0000312B
.text:0000312B loc_312B:                               ; CODE XREF: NCoderMixer2::CMixerMT::QueryInterface(_GUID const &,void * *)+26j
.text:0000312B                 mov     ecx, [ebp+this]
.text:0000312E                 mov     edx, [ecx+68h]
.text:00003131                 add     edx, 1
.text:00003134                 mov     eax, [ebp+this]
.text:00003137                 mov     [eax+68h], edx
.text:0000313A                 xor     eax, eax
.text:0000313C
.text:0000313C loc_313C:                               ; CODE XREF: NCoderMixer2::CMixerMT::QueryInterface(_GUID const &,void * *)+2Dj
.text:0000313C                 cmp     ebp, esp
.text:0000313E                 call    __RTC_CheckEsp
.text:00003143                 pop     ebp
.text:00003144                 retn    0Ch
.text:00003144 ?QueryInterface@CMixerMT@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z endp
.text:00003144
.text:00003144 ; ---------------------------------------------------------------------------
.text:00003147                 align 4
.text:00003147 _text           ends
.text:00003147
.text:00003148 ; ===========================================================================
.text:00003148
.text:00003148 ; Segment type: Pure code
.text:00003148 ; Segment permissions: Read/Execute
.text:00003148 _text           segment para public 'CODE' use32
.text:00003148                 assume cs:_text
.text:00003148                 ;org 3148h
.text:00003148 ; COMDAT (pick any)
.text:00003148                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003148
.text:00003148 ; =============== S U B R O U T I N E =======================================
.text:00003148
.text:00003148 ; Attributes: bp-based frame
.text:00003148
.text:00003148 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00003148                 public ___@8
.text:00003148 ___@8           proc near               ; CODE XREF: NCoderMixer2::CMixerMT::QueryInterface(_GUID const &,void * *)+15p
.text:00003148                                         ; CDynBufSeqOutStream::QueryInterface(_GUID const &,void * *)+15p ...
.text:00003148
.text:00003148 Buf1            = dword ptr  8
.text:00003148 Buf2            = dword ptr  0Ch
.text:00003148
.text:00003148                 push    ebp
.text:00003149                 mov     ebp, esp
.text:0000314B                 mov     eax, [ebp+Buf2]
.text:0000314E                 push    eax             ; Buf2
.text:0000314F                 mov     ecx, [ebp+Buf1]
.text:00003152                 push    ecx             ; Buf1
.text:00003153                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00003158                 cmp     ebp, esp
.text:0000315A                 call    __RTC_CheckEsp
.text:0000315F                 pop     ebp
.text:00003160                 retn    8
.text:00003160 ___@8           endp
.text:00003160
.text:00003160 ; ---------------------------------------------------------------------------
.text:00003163                 align 4
.text:00003163 _text           ends
.text:00003163
.text:00003164 ; ===========================================================================
.text:00003164
.text:00003164 ; Segment type: Pure code
.text:00003164 ; Segment permissions: Read/Execute
.text:00003164 _text           segment para public 'CODE' use32
.text:00003164                 assume cs:_text
.text:00003164                 ;org 3164h
.text:00003164 ; COMDAT (pick any)
.text:00003164                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003164
.text:00003164 ; =============== S U B R O U T I N E =======================================
.text:00003164
.text:00003164 ; Attributes: bp-based frame
.text:00003164
.text:00003164 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00003164                 public _IsEqualGUID@8
.text:00003164 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00003164
.text:00003164 Buf1            = dword ptr  8
.text:00003164 Buf2            = dword ptr  0Ch
.text:00003164
.text:00003164                 push    ebp
.text:00003165                 mov     ebp, esp
.text:00003167                 push    10h             ; Size
.text:00003169                 mov     eax, [ebp+Buf2]
.text:0000316C                 push    eax             ; Buf2
.text:0000316D                 mov     ecx, [ebp+Buf1]
.text:00003170                 push    ecx             ; Buf1
.text:00003171                 call    _memcmp
.text:00003176                 add     esp, 0Ch
.text:00003179                 neg     eax
.text:0000317B                 sbb     eax, eax
.text:0000317D                 add     eax, 1
.text:00003180                 cmp     ebp, esp
.text:00003182                 call    __RTC_CheckEsp
.text:00003187                 pop     ebp
.text:00003188                 retn    8
.text:00003188 _IsEqualGUID@8  endp
.text:00003188
.text:00003188 ; ---------------------------------------------------------------------------
.text:0000318B                 align 4
.text:0000318B _text           ends
.text:0000318B
.text:0000318C ; ===========================================================================
.text:0000318C
.text:0000318C ; Segment type: Pure code
.text:0000318C ; Segment permissions: Read/Execute
.text:0000318C _text           segment para public 'CODE' use32
.text:0000318C                 assume cs:_text
.text:0000318C                 ;org 318Ch
.text:0000318C ; COMDAT (pick any)
.text:0000318C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000318C
.text:0000318C ; =============== S U B R O U T I N E =======================================
.text:0000318C
.text:0000318C ; Attributes: bp-based frame
.text:0000318C
.text:0000318C ; unsigned __int32 __stdcall NCoderMixer2::CMixerMT::AddRef(NCoderMixer2::CMixerMT *this)
.text:0000318C                 public ?AddRef@CMixerMT@NCoderMixer2@@UAGKXZ
.text:0000318C ?AddRef@CMixerMT@NCoderMixer2@@UAGKXZ proc near ; DATA XREF: .rdata:00002A90o
.text:0000318C
.text:0000318C var_4           = dword ptr -4
.text:0000318C this            = dword ptr  8
.text:0000318C
.text:0000318C                 push    ebp
.text:0000318D                 mov     ebp, esp
.text:0000318F                 push    ecx
.text:00003190                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003197                 mov     eax, [ebp+this]
.text:0000319A                 mov     ecx, [eax+68h]
.text:0000319D                 add     ecx, 1
.text:000031A0                 mov     [ebp+var_4], ecx
.text:000031A3                 mov     edx, [ebp+this]
.text:000031A6                 mov     eax, [ebp+var_4]
.text:000031A9                 mov     [edx+68h], eax
.text:000031AC                 mov     eax, [ebp+var_4]
.text:000031AF                 mov     esp, ebp
.text:000031B1                 pop     ebp
.text:000031B2                 retn    4
.text:000031B2 ?AddRef@CMixerMT@NCoderMixer2@@UAGKXZ endp
.text:000031B2
.text:000031B2 ; ---------------------------------------------------------------------------
.text:000031B5                 align 4
.text:000031B5 _text           ends
.text:000031B5
.text:000031B8 ; ===========================================================================
.text:000031B8
.text:000031B8 ; Segment type: Pure code
.text:000031B8 ; Segment permissions: Read/Execute
.text:000031B8 _text           segment para public 'CODE' use32
.text:000031B8                 assume cs:_text
.text:000031B8                 ;org 31B8h
.text:000031B8 ; COMDAT (pick any)
.text:000031B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000031B8
.text:000031B8 ; =============== S U B R O U T I N E =======================================
.text:000031B8
.text:000031B8 ; Attributes: bp-based frame
.text:000031B8
.text:000031B8 ; unsigned __int32 __stdcall NCoderMixer2::CMixerMT::Release(NCoderMixer2::CMixerMT *this)
.text:000031B8                 public ?Release@CMixerMT@NCoderMixer2@@UAGKXZ
.text:000031B8 ?Release@CMixerMT@NCoderMixer2@@UAGKXZ proc near
.text:000031B8                                         ; DATA XREF: .rdata:00002A94o
.text:000031B8
.text:000031B8 var_10          = dword ptr -10h
.text:000031B8 var_C           = dword ptr -0Ch
.text:000031B8 var_8           = dword ptr -8
.text:000031B8 var_4           = dword ptr -4
.text:000031B8 this            = dword ptr  8
.text:000031B8
.text:000031B8                 push    ebp
.text:000031B9                 mov     ebp, esp
.text:000031BB                 sub     esp, 10h
.text:000031BE                 mov     eax, 0CCCCCCCCh
.text:000031C3                 mov     [ebp+var_10], eax
.text:000031C6                 mov     [ebp+var_C], eax
.text:000031C9                 mov     [ebp+var_8], eax
.text:000031CC                 mov     [ebp+var_4], eax
.text:000031CF                 mov     eax, [ebp+this]
.text:000031D2                 mov     ecx, [eax+68h]
.text:000031D5                 sub     ecx, 1
.text:000031D8                 mov     [ebp+var_C], ecx
.text:000031DB                 mov     edx, [ebp+this]
.text:000031DE                 mov     eax, [ebp+var_C]
.text:000031E1                 mov     [edx+68h], eax
.text:000031E4                 cmp     [ebp+var_C], 0
.text:000031E8                 jz      short loc_31F2
.text:000031EA                 mov     ecx, [ebp+this]
.text:000031ED                 mov     eax, [ecx+68h]
.text:000031F0                 jmp     short loc_321C
.text:000031F2 ; ---------------------------------------------------------------------------
.text:000031F2
.text:000031F2 loc_31F2:                               ; CODE XREF: NCoderMixer2::CMixerMT::Release(void)+30j
.text:000031F2                 mov     edx, [ebp+this]
.text:000031F5                 mov     [ebp+var_8], edx
.text:000031F8                 mov     eax, [ebp+var_8]
.text:000031FB                 mov     [ebp+var_4], eax
.text:000031FE                 cmp     [ebp+var_4], 0
.text:00003202                 jz      short loc_3213
.text:00003204                 push    1
.text:00003206                 mov     ecx, [ebp+var_4]
.text:00003209                 call    ??_GCMixerMT@NCoderMixer2@@QAEPAXI@Z ; NCoderMixer2::CMixerMT::`scalar deleting destructor'(uint)
.text:0000320E                 mov     [ebp+var_10], eax
.text:00003211                 jmp     short loc_321A
.text:00003213 ; ---------------------------------------------------------------------------
.text:00003213
.text:00003213 loc_3213:                               ; CODE XREF: NCoderMixer2::CMixerMT::Release(void)+4Aj
.text:00003213                 mov     [ebp+var_10], 0
.text:0000321A
.text:0000321A loc_321A:                               ; CODE XREF: NCoderMixer2::CMixerMT::Release(void)+59j
.text:0000321A                 xor     eax, eax
.text:0000321C
.text:0000321C loc_321C:                               ; CODE XREF: NCoderMixer2::CMixerMT::Release(void)+38j
.text:0000321C                 add     esp, 10h
.text:0000321F                 cmp     ebp, esp
.text:00003221                 call    __RTC_CheckEsp
.text:00003226                 mov     esp, ebp
.text:00003228                 pop     ebp
.text:00003229                 retn    4
.text:00003229 ?Release@CMixerMT@NCoderMixer2@@UAGKXZ endp
.text:00003229
.text:00003229 _text           ends
.text:00003229
.text:0000322C ; ===========================================================================
.text:0000322C
.text:0000322C ; Segment type: Pure code
.text:0000322C ; Segment permissions: Read/Execute
.text:0000322C _text           segment para public 'CODE' use32
.text:0000322C                 assume cs:_text
.text:0000322C                 ;org 322Ch
.text:0000322C ; COMDAT (pick any)
.text:0000322C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000322C
.text:0000322C ; =============== S U B R O U T I N E =======================================
.text:0000322C
.text:0000322C ; Attributes: bp-based frame
.text:0000322C
.text:0000322C ; void __thiscall NCoderMixer2::CMixerMT::SetCoderInfo(NCoderMixer2::CMixerMT *this, unsigned int, const unsigned __int64 *, const unsigned __int64 *const *)
.text:0000322C                 public ?SetCoderInfo@CMixerMT@NCoderMixer2@@UAEXIPB_KPBQB_K@Z
.text:0000322C ?SetCoderInfo@CMixerMT@NCoderMixer2@@UAEXIPB_KPBQB_K@Z proc near
.text:0000322C                                         ; DATA XREF: .rdata:00002A7Co
.text:0000322C
.text:0000322C var_4           = dword ptr -4
.text:0000322C arg_0           = dword ptr  8
.text:0000322C arg_4           = dword ptr  0Ch
.text:0000322C arg_8           = dword ptr  10h
.text:0000322C
.text:0000322C                 push    ebp
.text:0000322D                 mov     ebp, esp
.text:0000322F                 push    ecx
.text:00003230                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003237                 mov     [ebp+var_4], ecx
.text:0000323A                 mov     eax, [ebp+arg_8]
.text:0000323D                 push    eax             ; unsigned __int64 **
.text:0000323E                 mov     ecx, [ebp+arg_4]
.text:00003241                 push    ecx             ; unsigned __int64 *
.text:00003242                 mov     edx, [ebp+arg_0]
.text:00003245                 push    edx
.text:00003246                 mov     ecx, [ebp+var_4]
.text:00003249                 add     ecx, 74h ; 't'
.text:0000324C                 call    ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[](uint)
.text:00003251                 add     eax, 18h
.text:00003254                 mov     ecx, eax        ; this
.text:00003256                 call    ?SetCoderInfo@CCoder@NCoderMixer2@@QAEXPB_KPBQB_K@Z ; NCoderMixer2::CCoder::SetCoderInfo(unsigned __int64 const *,unsigned __int64 const * const *)
.text:0000325B                 add     esp, 4
.text:0000325E                 cmp     ebp, esp
.text:00003260                 call    __RTC_CheckEsp
.text:00003265                 mov     esp, ebp
.text:00003267                 pop     ebp
.text:00003268                 retn    0Ch
.text:00003268 ?SetCoderInfo@CMixerMT@NCoderMixer2@@UAEXIPB_KPBQB_K@Z endp
.text:00003268
.text:00003268 ; ---------------------------------------------------------------------------
.text:0000326B                 align 4
.text:0000326B _text           ends
.text:0000326B
.text:0000326C ; ===========================================================================
.text:0000326C
.text:0000326C ; Segment type: Pure code
.text:0000326C ; Segment permissions: Read/Execute
.text:0000326C _text           segment para public 'CODE' use32
.text:0000326C                 assume cs:_text
.text:0000326C                 ;org 326Ch
.text:0000326C ; COMDAT (pick any)
.text:0000326C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000326C
.text:0000326C ; =============== S U B R O U T I N E =======================================
.text:0000326C
.text:0000326C ; Attributes: bp-based frame
.text:0000326C
.text:0000326C ; public: void * __thiscall NCoderMixer2::CMixerMT::`scalar deleting destructor'(unsigned int)
.text:0000326C                 public ??_GCMixerMT@NCoderMixer2@@QAEPAXI@Z
.text:0000326C ??_GCMixerMT@NCoderMixer2@@QAEPAXI@Z proc near
.text:0000326C                                         ; CODE XREF: NCoderMixer2::CMixerMT::Release(void)+51p
.text:0000326C
.text:0000326C var_4           = dword ptr -4
.text:0000326C arg_0           = dword ptr  8
.text:0000326C
.text:0000326C                 push    ebp
.text:0000326D                 mov     ebp, esp
.text:0000326F                 push    ecx
.text:00003270                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003277                 mov     [ebp+var_4], ecx
.text:0000327A                 mov     ecx, [ebp+var_4] ; this
.text:0000327D                 call    ??1CMixerMT@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CMixerMT::~CMixerMT(void)
.text:00003282                 mov     eax, [ebp+arg_0]
.text:00003285                 and     eax, 1
.text:00003288                 jz      short loc_3296
.text:0000328A                 mov     ecx, [ebp+var_4]
.text:0000328D                 push    ecx             ; void *
.text:0000328E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003293                 add     esp, 4
.text:00003296
.text:00003296 loc_3296:                               ; CODE XREF: NCoderMixer2::CMixerMT::`scalar deleting destructor'(uint)+1Cj
.text:00003296                 mov     eax, [ebp+var_4]
.text:00003299                 add     esp, 4
.text:0000329C                 cmp     ebp, esp
.text:0000329E                 call    __RTC_CheckEsp
.text:000032A3                 mov     esp, ebp
.text:000032A5                 pop     ebp
.text:000032A6                 retn    4
.text:000032A6 ??_GCMixerMT@NCoderMixer2@@QAEPAXI@Z endp
.text:000032A6
.text:000032A6 ; ---------------------------------------------------------------------------
.text:000032A9                 align 4
.text:000032A9 _text           ends
.text:000032A9
.text:000032AC ; ===========================================================================
.text:000032AC
.text:000032AC ; Segment type: Pure code
.text:000032AC ; Segment permissions: Read/Execute
.text:000032AC _text           segment para public 'CODE' use32
.text:000032AC                 assume cs:_text
.text:000032AC                 ;org 32ACh
.text:000032AC ; COMDAT (pick any)
.text:000032AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000032AC
.text:000032AC ; =============== S U B R O U T I N E =======================================
.text:000032AC
.text:000032AC ; Attributes: bp-based frame
.text:000032AC
.text:000032AC ; _DWORD __thiscall NCoderMixer2::CMixer::~CMixer(NCoderMixer2::CMixer *__hidden this)
.text:000032AC                 public ??1CMixer@NCoderMixer2@@QAE@XZ
.text:000032AC ??1CMixer@NCoderMixer2@@QAE@XZ proc near
.text:000032AC                                         ; CODE XREF: __unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$0+6j
.text:000032AC                                         ; NCoderMixer2::CMixerMT::~CMixerMT(void)+5Bp ...
.text:000032AC
.text:000032AC var_10          = dword ptr -10h
.text:000032AC var_C           = dword ptr -0Ch
.text:000032AC var_4           = dword ptr -4
.text:000032AC
.text:000032AC                 push    ebp
.text:000032AD                 mov     ebp, esp
.text:000032AF                 push    0FFFFFFFFh
.text:000032B1                 push    offset __ehhandler$??1CMixer@NCoderMixer2@@QAE@XZ
.text:000032B6                 mov     eax, large fs:0
.text:000032BC                 push    eax
.text:000032BD                 push    ecx
.text:000032BE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000032C5                 mov     eax, dword ptr ds:___security_cookie
.text:000032CA                 xor     eax, ebp
.text:000032CC                 push    eax
.text:000032CD                 lea     eax, [ebp+var_C]
.text:000032D0                 mov     large fs:0, eax
.text:000032D6                 mov     [ebp+var_10], ecx
.text:000032D9                 mov     [ebp+var_4], 1
.text:000032E0                 mov     ecx, [ebp+var_10]
.text:000032E3                 add     ecx, 50h ; 'P'
.text:000032E6                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000032EB                 mov     byte ptr [ebp+var_4], 0
.text:000032EF                 mov     ecx, [ebp+var_10]
.text:000032F2                 add     ecx, 44h ; 'D'
.text:000032F5                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000032FA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003301                 mov     ecx, [ebp+var_10]
.text:00003304                 add     ecx, 4          ; this
.text:00003307                 call    ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text:0000330C                 mov     ecx, [ebp+var_C]
.text:0000330F                 mov     large fs:0, ecx
.text:00003316                 pop     ecx
.text:00003317                 add     esp, 10h
.text:0000331A                 cmp     ebp, esp
.text:0000331C                 call    __RTC_CheckEsp
.text:00003321                 mov     esp, ebp
.text:00003323                 pop     ebp
.text:00003324                 retn
.text:00003324 ??1CMixer@NCoderMixer2@@QAE@XZ endp
.text:00003324
.text:00003324 ; ---------------------------------------------------------------------------
.text:00003325                 align 4
.text:00003325 _text           ends
.text:00003325
.text$x:00003328 ; ===========================================================================
.text$x:00003328
.text$x:00003328 ; Segment type: Pure code
.text$x:00003328 ; Segment permissions: Read/Execute
.text$x:00003328 _text$x         segment para public 'CODE' use32
.text$x:00003328                 assume cs:_text$x
.text$x:00003328                 ;org 3328h
.text$x:00003328 ; COMDAT (pick associative to section at 32AC)
.text$x:00003328                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00003328
.text$x:00003328 ; =============== S U B R O U T I N E =======================================
.text$x:00003328
.text$x:00003328
.text$x:00003328 __unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:00003328                                         ; DATA XREF: .xdata$x:00003360o
.text$x:00003328                 mov     ecx, [ebp-10h]
.text$x:0000332B                 add     ecx, 4          ; this
.text$x:0000332E                 jmp     ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text$x:0000332E __unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$0 endp
.text$x:0000332E
.text$x:00003333
.text$x:00003333 ; =============== S U B R O U T I N E =======================================
.text$x:00003333
.text$x:00003333
.text$x:00003333 __unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:00003333                                         ; DATA XREF: .xdata$x:00003368o
.text$x:00003333                 mov     ecx, [ebp-10h]
.text$x:00003336                 add     ecx, 44h ; 'D'
.text$x:00003339                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:00003339 __unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$1 endp
.text$x:00003339
.text$x:0000333E
.text$x:0000333E ; =============== S U B R O U T I N E =======================================
.text$x:0000333E
.text$x:0000333E
.text$x:0000333E __ehhandler$??1CMixer@NCoderMixer2@@QAE@XZ proc near
.text$x:0000333E                                         ; DATA XREF: NCoderMixer2::CMixer::~CMixer(void)+5o
.text$x:0000333E
.text$x:0000333E arg_4           = dword ptr  8
.text$x:0000333E
.text$x:0000333E                 mov     edx, [esp+arg_4]
.text$x:00003342                 lea     eax, [edx+0Ch]
.text$x:00003345                 mov     ecx, [edx-8]
.text$x:00003348                 xor     ecx, eax
.text$x:0000334A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000334F                 mov     eax, offset __ehfuncinfo$??1CMixer@NCoderMixer2@@QAE@XZ
.text$x:00003354                 jmp     ___CxxFrameHandler3
.text$x:00003354 __ehhandler$??1CMixer@NCoderMixer2@@QAE@XZ endp
.text$x:00003354
.text$x:00003354 ; ---------------------------------------------------------------------------
.text$x:00003359                 align 4
.text$x:00003359 _text$x         ends
.text$x:00003359
.xdata$x:0000335C ; ===========================================================================
.xdata$x:0000335C
.xdata$x:0000335C ; Segment type: Pure data
.xdata$x:0000335C ; Segment permissions: Read
.xdata$x:0000335C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000335C                 assume cs:_xdata$x
.xdata$x:0000335C                 ;org 335Ch
.xdata$x:0000335C ; COMDAT (pick associative to section at 32AC)
.xdata$x:0000335C __unwindtable$??1CMixer@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:0000335C                                         ; DATA XREF: .xdata$x:00003374o
.xdata$x:0000335D                 db 0FFh
.xdata$x:0000335E                 db 0FFh
.xdata$x:0000335F                 db 0FFh
.xdata$x:00003360                 dd offset __unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$0
.xdata$x:00003364                 align 8
.xdata$x:00003368                 dd offset __unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$1
.xdata$x:0000336C __ehfuncinfo$??1CMixer@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:0000336C                                         ; DATA XREF: __ehhandler$??1CMixer@NCoderMixer2@@QAE@XZ+11o
.xdata$x:0000336D                 db    5
.xdata$x:0000336E                 db  93h ; ô
.xdata$x:0000336F                 db  19h
.xdata$x:00003370                 db    2
.xdata$x:00003371                 db    0
.xdata$x:00003372                 db    0
.xdata$x:00003373                 db    0
.xdata$x:00003374                 dd offset __unwindtable$??1CMixer@NCoderMixer2@@QAE@XZ
.xdata$x:00003378                 db    0
.xdata$x:00003379                 db    0
.xdata$x:0000337A                 db    0
.xdata$x:0000337B                 db    0
.xdata$x:0000337C                 db    0
.xdata$x:0000337D                 db    0
.xdata$x:0000337E                 db    0
.xdata$x:0000337F                 db    0
.xdata$x:00003380                 db    0
.xdata$x:00003381                 db    0
.xdata$x:00003382                 db    0
.xdata$x:00003383                 db    0
.xdata$x:00003384                 db    0
.xdata$x:00003385                 db    0
.xdata$x:00003386                 db    0
.xdata$x:00003387                 db    0
.xdata$x:00003388                 db    0
.xdata$x:00003389                 db    0
.xdata$x:0000338A                 db    0
.xdata$x:0000338B                 db    0
.xdata$x:0000338C                 db    1
.xdata$x:0000338D                 db    0
.xdata$x:0000338E                 db    0
.xdata$x:0000338F                 db    0
.xdata$x:0000338F _xdata$x        ends
.xdata$x:0000338F
.text:00003390 ; ===========================================================================
.text:00003390
.text:00003390 ; Segment type: Pure code
.text:00003390 ; Segment permissions: Read/Execute
.text:00003390 _text           segment para public 'CODE' use32
.text:00003390                 assume cs:_text
.text:00003390                 ;org 3390h
.text:00003390 ; COMDAT (pick any)
.text:00003390                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003390
.text:00003390 ; =============== S U B R O U T I N E =======================================
.text:00003390
.text:00003390 ; Attributes: bp-based frame
.text:00003390
.text:00003390 ; _DWORD __thiscall NCoderMixer2::CMixerMT::~CMixerMT(NCoderMixer2::CMixerMT *__hidden this)
.text:00003390                 public ??1CMixerMT@NCoderMixer2@@QAE@XZ
.text:00003390 ??1CMixerMT@NCoderMixer2@@QAE@XZ proc near
.text:00003390                                         ; CODE XREF: NCoderMixer2::CMixerMT::`scalar deleting destructor'(uint)+11p
.text:00003390
.text:00003390 var_10          = dword ptr -10h
.text:00003390 var_C           = dword ptr -0Ch
.text:00003390 var_4           = dword ptr -4
.text:00003390
.text:00003390                 push    ebp
.text:00003391                 mov     ebp, esp
.text:00003393                 push    0FFFFFFFFh
.text:00003395                 push    offset __ehhandler$??1CMixerMT@NCoderMixer2@@QAE@XZ
.text:0000339A                 mov     eax, large fs:0
.text:000033A0                 push    eax
.text:000033A1                 push    ecx
.text:000033A2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000033A9                 mov     eax, dword ptr ds:___security_cookie
.text:000033AE                 xor     eax, ebp
.text:000033B0                 push    eax
.text:000033B1                 lea     eax, [ebp+var_C]
.text:000033B4                 mov     large fs:0, eax
.text:000033BA                 mov     [ebp+var_10], ecx
.text:000033BD                 mov     [ebp+var_4], 1
.text:000033C4                 mov     ecx, [ebp+var_10]
.text:000033C7                 add     ecx, 78h ; 'x'
.text:000033CA                 call    ??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>(void)
.text:000033CF                 mov     byte ptr [ebp+var_4], 0
.text:000033D3                 mov     ecx, [ebp+var_10]
.text:000033D6                 add     ecx, 6Ch ; 'l'
.text:000033D9                 call    ??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ ; CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>(void)
.text:000033DE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000033E5                 mov     ecx, [ebp+var_10]
.text:000033E8                 add     ecx, 4          ; this
.text:000033EB                 call    ??1CMixer@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CMixer::~CMixer(void)
.text:000033F0                 mov     ecx, [ebp+var_C]
.text:000033F3                 mov     large fs:0, ecx
.text:000033FA                 pop     ecx
.text:000033FB                 add     esp, 10h
.text:000033FE                 cmp     ebp, esp
.text:00003400                 call    __RTC_CheckEsp
.text:00003405                 mov     esp, ebp
.text:00003407                 pop     ebp
.text:00003408                 retn
.text:00003408 ??1CMixerMT@NCoderMixer2@@QAE@XZ endp
.text:00003408
.text:00003408 ; ---------------------------------------------------------------------------
.text:00003409                 align 4
.text:00003409 _text           ends
.text:00003409
.text$x:0000340C ; ===========================================================================
.text$x:0000340C
.text$x:0000340C ; Segment type: Pure code
.text$x:0000340C ; Segment permissions: Read/Execute
.text$x:0000340C _text$x         segment para public 'CODE' use32
.text$x:0000340C                 assume cs:_text$x
.text$x:0000340C                 ;org 340Ch
.text$x:0000340C ; COMDAT (pick associative to section at 3390)
.text$x:0000340C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000340C
.text$x:0000340C ; =============== S U B R O U T I N E =======================================
.text$x:0000340C
.text$x:0000340C
.text$x:0000340C __unwindfunclet$??1CMixerMT@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:0000340C                                         ; DATA XREF: .xdata$x:00003444o
.text$x:0000340C                 mov     ecx, [ebp-10h]
.text$x:0000340F                 add     ecx, 4          ; this
.text$x:00003412                 jmp     ??1CMixer@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CMixer::~CMixer(void)
.text$x:00003412 __unwindfunclet$??1CMixerMT@NCoderMixer2@@QAE@XZ$0 endp
.text$x:00003412
.text$x:00003417
.text$x:00003417 ; =============== S U B R O U T I N E =======================================
.text$x:00003417
.text$x:00003417
.text$x:00003417 __unwindfunclet$??1CMixerMT@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:00003417                                         ; DATA XREF: .xdata$x:0000344Co
.text$x:00003417                 mov     ecx, [ebp-10h]
.text$x:0000341A                 add     ecx, 6Ch ; 'l'
.text$x:0000341D                 jmp     ??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ ; CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>(void)
.text$x:0000341D __unwindfunclet$??1CMixerMT@NCoderMixer2@@QAE@XZ$1 endp
.text$x:0000341D
.text$x:00003422
.text$x:00003422 ; =============== S U B R O U T I N E =======================================
.text$x:00003422
.text$x:00003422
.text$x:00003422 __ehhandler$??1CMixerMT@NCoderMixer2@@QAE@XZ proc near
.text$x:00003422                                         ; DATA XREF: NCoderMixer2::CMixerMT::~CMixerMT(void)+5o
.text$x:00003422
.text$x:00003422 arg_4           = dword ptr  8
.text$x:00003422
.text$x:00003422                 mov     edx, [esp+arg_4]
.text$x:00003426                 lea     eax, [edx+0Ch]
.text$x:00003429                 mov     ecx, [edx-8]
.text$x:0000342C                 xor     ecx, eax
.text$x:0000342E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003433                 mov     eax, offset __ehfuncinfo$??1CMixerMT@NCoderMixer2@@QAE@XZ
.text$x:00003438                 jmp     ___CxxFrameHandler3
.text$x:00003438 __ehhandler$??1CMixerMT@NCoderMixer2@@QAE@XZ endp
.text$x:00003438
.text$x:00003438 ; ---------------------------------------------------------------------------
.text$x:0000343D                 align 10h
.text$x:0000343D _text$x         ends
.text$x:0000343D
.xdata$x:00003440 ; ===========================================================================
.xdata$x:00003440
.xdata$x:00003440 ; Segment type: Pure data
.xdata$x:00003440 ; Segment permissions: Read
.xdata$x:00003440 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003440                 assume cs:_xdata$x
.xdata$x:00003440                 ;org 3440h
.xdata$x:00003440 ; COMDAT (pick associative to section at 3390)
.xdata$x:00003440 __unwindtable$??1CMixerMT@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:00003440                                         ; DATA XREF: .xdata$x:00003458o
.xdata$x:00003441                 db 0FFh
.xdata$x:00003442                 db 0FFh
.xdata$x:00003443                 db 0FFh
.xdata$x:00003444                 dd offset __unwindfunclet$??1CMixerMT@NCoderMixer2@@QAE@XZ$0
.xdata$x:00003448                 db    0
.xdata$x:00003449                 db    0
.xdata$x:0000344A                 db    0
.xdata$x:0000344B                 db    0
.xdata$x:0000344C                 dd offset __unwindfunclet$??1CMixerMT@NCoderMixer2@@QAE@XZ$1
.xdata$x:00003450 __ehfuncinfo$??1CMixerMT@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:00003450                                         ; DATA XREF: __ehhandler$??1CMixerMT@NCoderMixer2@@QAE@XZ+11o
.xdata$x:00003451                 db    5
.xdata$x:00003452                 db  93h ; ô
.xdata$x:00003453                 db  19h
.xdata$x:00003454                 db    2
.xdata$x:00003455                 db    0
.xdata$x:00003456                 db    0
.xdata$x:00003457                 db    0
.xdata$x:00003458                 dd offset __unwindtable$??1CMixerMT@NCoderMixer2@@QAE@XZ
.xdata$x:0000345C                 db    0
.xdata$x:0000345D                 db    0
.xdata$x:0000345E                 db    0
.xdata$x:0000345F                 db    0
.xdata$x:00003460                 db    0
.xdata$x:00003461                 db    0
.xdata$x:00003462                 db    0
.xdata$x:00003463                 db    0
.xdata$x:00003464                 db    0
.xdata$x:00003465                 db    0
.xdata$x:00003466                 db    0
.xdata$x:00003467                 db    0
.xdata$x:00003468                 db    0
.xdata$x:00003469                 db    0
.xdata$x:0000346A                 db    0
.xdata$x:0000346B                 db    0
.xdata$x:0000346C                 db    0
.xdata$x:0000346D                 db    0
.xdata$x:0000346E                 db    0
.xdata$x:0000346F                 db    0
.xdata$x:00003470                 db    1
.xdata$x:00003471                 db    0
.xdata$x:00003472                 db    0
.xdata$x:00003473                 db    0
.xdata$x:00003473 _xdata$x        ends
.xdata$x:00003473
.text:00003474 ; ===========================================================================
.text:00003474
.text:00003474 ; Segment type: Pure code
.text:00003474 ; Segment permissions: Read/Execute
.text:00003474 _text           segment para public 'CODE' use32
.text:00003474                 assume cs:_text
.text:00003474                 ;org 3474h
.text:00003474 ; COMDAT (pick any)
.text:00003474                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003474
.text:00003474 ; =============== S U B R O U T I N E =======================================
.text:00003474
.text:00003474 ; Attributes: bp-based frame
.text:00003474
.text:00003474 ; bool __thiscall CProps::AreThereNonOptionalProps(CProps *__hidden this)
.text:00003474                 public ?AreThereNonOptionalProps@CProps@@QBE_NXZ
.text:00003474 ?AreThereNonOptionalProps@CProps@@QBE_NXZ proc near
.text:00003474                                         ; CODE XREF: NArchive::N7z::SetCoderProps2(CProps const &,unsigned __int64 const *,IUnknown *)+A8p
.text:00003474
.text:00003474 var_8           = dword ptr -8
.text:00003474 var_4           = dword ptr -4
.text:00003474
.text:00003474                 push    ebp
.text:00003475                 mov     ebp, esp
.text:00003477                 sub     esp, 8
.text:0000347A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003481                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003488                 mov     [ebp+var_4], ecx
.text:0000348B                 mov     [ebp+var_8], 0
.text:00003492                 jmp     short loc_349D
.text:00003494 ; ---------------------------------------------------------------------------
.text:00003494
.text:00003494 loc_3494:                               ; CODE XREF: CProps::AreThereNonOptionalProps(void):loc_34C2j
.text:00003494                 mov     eax, [ebp+var_8]
.text:00003497                 add     eax, 1
.text:0000349A                 mov     [ebp+var_8], eax
.text:0000349D
.text:0000349D loc_349D:                               ; CODE XREF: CProps::AreThereNonOptionalProps(void)+1Ej
.text:0000349D                 mov     ecx, [ebp+var_4]
.text:000034A0                 call    ?Size@?$CObjectVector@UCProp@@@@QBEIXZ ; CObjectVector<CProp>::Size(void)
.text:000034A5                 cmp     [ebp+var_8], eax
.text:000034A8                 jnb     short loc_34C4
.text:000034AA                 mov     ecx, [ebp+var_8]
.text:000034AD                 push    ecx
.text:000034AE                 mov     ecx, [ebp+var_4]
.text:000034B1                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:000034B6                 movzx   edx, byte ptr [eax+4]
.text:000034BA                 test    edx, edx
.text:000034BC                 jnz     short loc_34C2
.text:000034BE                 mov     al, 1
.text:000034C0                 jmp     short loc_34C6
.text:000034C2 ; ---------------------------------------------------------------------------
.text:000034C2
.text:000034C2 loc_34C2:                               ; CODE XREF: CProps::AreThereNonOptionalProps(void)+48j
.text:000034C2                 jmp     short loc_3494
.text:000034C4 ; ---------------------------------------------------------------------------
.text:000034C4
.text:000034C4 loc_34C4:                               ; CODE XREF: CProps::AreThereNonOptionalProps(void)+34j
.text:000034C4                 xor     al, al
.text:000034C6
.text:000034C6 loc_34C6:                               ; CODE XREF: CProps::AreThereNonOptionalProps(void)+4Cj
.text:000034C6                 add     esp, 8
.text:000034C9                 cmp     ebp, esp
.text:000034CB                 call    __RTC_CheckEsp
.text:000034D0                 mov     esp, ebp
.text:000034D2                 pop     ebp
.text:000034D3                 retn
.text:000034D3 ?AreThereNonOptionalProps@CProps@@QBE_NXZ endp
.text:000034D3
.text:000034D3 _text           ends
.text:000034D3
.text:000034D4 ; ===========================================================================
.text:000034D4
.text:000034D4 ; Segment type: Pure code
.text:000034D4 ; Segment permissions: Read/Execute
.text:000034D4 _text           segment para public 'CODE' use32
.text:000034D4                 assume cs:_text
.text:000034D4                 ;org 34D4h
.text:000034D4 ; COMDAT (pick any)
.text:000034D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000034D4
.text:000034D4 ; =============== S U B R O U T I N E =======================================
.text:000034D4
.text:000034D4 ; Attributes: bp-based frame
.text:000034D4
.text:000034D4 ; _DWORD __thiscall CCreatedCoder::CCreatedCoder(CCreatedCoder *__hidden this)
.text:000034D4                 public ??0CCreatedCoder@@QAE@XZ
.text:000034D4 ??0CCreatedCoder@@QAE@XZ proc near      ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+212p
.text:000034D4
.text:000034D4 var_10          = dword ptr -10h
.text:000034D4 var_C           = dword ptr -0Ch
.text:000034D4 var_4           = dword ptr -4
.text:000034D4
.text:000034D4                 push    ebp
.text:000034D5                 mov     ebp, esp
.text:000034D7                 push    0FFFFFFFFh
.text:000034D9                 push    offset __ehhandler$??0CCreatedCoder@@QAE@XZ
.text:000034DE                 mov     eax, large fs:0
.text:000034E4                 push    eax
.text:000034E5                 push    ecx
.text:000034E6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000034ED                 mov     eax, dword ptr ds:___security_cookie
.text:000034F2                 xor     eax, ebp
.text:000034F4                 push    eax
.text:000034F5                 lea     eax, [ebp+var_C]
.text:000034F8                 mov     large fs:0, eax
.text:000034FE                 mov     [ebp+var_10], ecx
.text:00003501                 mov     ecx, [ebp+var_10]
.text:00003504                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(void)
.text:00003509                 mov     [ebp+var_4], 0
.text:00003510                 mov     ecx, [ebp+var_10]
.text:00003513                 add     ecx, 4
.text:00003516                 call    ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>(void)
.text:0000351B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003522                 mov     eax, [ebp+var_10]
.text:00003525                 mov     ecx, [ebp+var_C]
.text:00003528                 mov     large fs:0, ecx
.text:0000352F                 pop     ecx
.text:00003530                 add     esp, 10h
.text:00003533                 cmp     ebp, esp
.text:00003535                 call    __RTC_CheckEsp
.text:0000353A                 mov     esp, ebp
.text:0000353C                 pop     ebp
.text:0000353D                 retn
.text:0000353D ??0CCreatedCoder@@QAE@XZ endp
.text:0000353D
.text:0000353D ; ---------------------------------------------------------------------------
.text:0000353E                 align 10h
.text:0000353E _text           ends
.text:0000353E
.text$x:00003540 ; ===========================================================================
.text$x:00003540
.text$x:00003540 ; Segment type: Pure code
.text$x:00003540 ; Segment permissions: Read/Execute
.text$x:00003540 _text$x         segment para public 'CODE' use32
.text$x:00003540                 assume cs:_text$x
.text$x:00003540                 ;org 3540h
.text$x:00003540 ; COMDAT (pick associative to section at 34D4)
.text$x:00003540                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00003540
.text$x:00003540 ; =============== S U B R O U T I N E =======================================
.text$x:00003540
.text$x:00003540
.text$x:00003540 __unwindfunclet$??0CCreatedCoder@@QAE@XZ$0 proc near
.text$x:00003540                                         ; DATA XREF: .xdata$x:00003568o
.text$x:00003540                 mov     ecx, [ebp-10h]
.text$x:00003543                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00003543 __unwindfunclet$??0CCreatedCoder@@QAE@XZ$0 endp
.text$x:00003543
.text$x:00003548
.text$x:00003548 ; =============== S U B R O U T I N E =======================================
.text$x:00003548
.text$x:00003548
.text$x:00003548 __ehhandler$??0CCreatedCoder@@QAE@XZ proc near
.text$x:00003548                                         ; DATA XREF: CCreatedCoder::CCreatedCoder(void)+5o
.text$x:00003548
.text$x:00003548 arg_4           = dword ptr  8
.text$x:00003548
.text$x:00003548                 mov     edx, [esp+arg_4]
.text$x:0000354C                 lea     eax, [edx+0Ch]
.text$x:0000354F                 mov     ecx, [edx-8]
.text$x:00003552                 xor     ecx, eax
.text$x:00003554                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003559                 mov     eax, offset __ehfuncinfo$??0CCreatedCoder@@QAE@XZ
.text$x:0000355E                 jmp     ___CxxFrameHandler3
.text$x:0000355E __ehhandler$??0CCreatedCoder@@QAE@XZ endp
.text$x:0000355E
.text$x:0000355E ; ---------------------------------------------------------------------------
.text$x:00003563                 align 4
.text$x:00003563 _text$x         ends
.text$x:00003563
.xdata$x:00003564 ; ===========================================================================
.xdata$x:00003564
.xdata$x:00003564 ; Segment type: Pure data
.xdata$x:00003564 ; Segment permissions: Read
.xdata$x:00003564 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003564                 assume cs:_xdata$x
.xdata$x:00003564                 ;org 3564h
.xdata$x:00003564 ; COMDAT (pick associative to section at 34D4)
.xdata$x:00003564 __unwindtable$??0CCreatedCoder@@QAE@XZ db 0FFh
.xdata$x:00003564                                         ; DATA XREF: .xdata$x:00003574o
.xdata$x:00003565                 db 0FFh
.xdata$x:00003566                 db 0FFh
.xdata$x:00003567                 db 0FFh
.xdata$x:00003568                 dd offset __unwindfunclet$??0CCreatedCoder@@QAE@XZ$0
.xdata$x:0000356C __ehfuncinfo$??0CCreatedCoder@@QAE@XZ db  22h ; "
.xdata$x:0000356C                                         ; DATA XREF: __ehhandler$??0CCreatedCoder@@QAE@XZ+11o
.xdata$x:0000356D                 db    5
.xdata$x:0000356E                 db  93h ; ô
.xdata$x:0000356F                 db  19h
.xdata$x:00003570                 db    1
.xdata$x:00003571                 db    0
.xdata$x:00003572                 db    0
.xdata$x:00003573                 db    0
.xdata$x:00003574                 dd offset __unwindtable$??0CCreatedCoder@@QAE@XZ
.xdata$x:00003578                 db    0
.xdata$x:00003579                 db    0
.xdata$x:0000357A                 db    0
.xdata$x:0000357B                 db    0
.xdata$x:0000357C                 db    0
.xdata$x:0000357D                 db    0
.xdata$x:0000357E                 db    0
.xdata$x:0000357F                 db    0
.xdata$x:00003580                 db    0
.xdata$x:00003581                 db    0
.xdata$x:00003582                 db    0
.xdata$x:00003583                 db    0
.xdata$x:00003584                 db    0
.xdata$x:00003585                 db    0
.xdata$x:00003586                 db    0
.xdata$x:00003587                 db    0
.xdata$x:00003588                 db    0
.xdata$x:00003589                 db    0
.xdata$x:0000358A                 db    0
.xdata$x:0000358B                 db    0
.xdata$x:0000358C                 db    1
.xdata$x:0000358D                 db    0
.xdata$x:0000358E                 db    0
.xdata$x:0000358F                 db    0
.xdata$x:0000358F _xdata$x        ends
.xdata$x:0000358F
.text:00003590 ; ===========================================================================
.text:00003590
.text:00003590 ; Segment type: Pure code
.text:00003590 ; Segment permissions: Read/Execute
.text:00003590 _text           segment para public 'CODE' use32
.text:00003590                 assume cs:_text
.text:00003590                 ;org 3590h
.text:00003590 ; COMDAT (pick any)
.text:00003590                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003590
.text:00003590 ; =============== S U B R O U T I N E =======================================
.text:00003590
.text:00003590 ; Attributes: bp-based frame
.text:00003590
.text:00003590 ; _DWORD __thiscall CCreatedCoder::~CCreatedCoder(CCreatedCoder *__hidden this)
.text:00003590                 public ??1CCreatedCoder@@QAE@XZ
.text:00003590 ??1CCreatedCoder@@QAE@XZ proc near      ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+250p
.text:00003590                                         ; NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+27Fp ...
.text:00003590
.text:00003590 var_10          = dword ptr -10h
.text:00003590 var_C           = dword ptr -0Ch
.text:00003590 var_4           = dword ptr -4
.text:00003590
.text:00003590                 push    ebp
.text:00003591                 mov     ebp, esp
.text:00003593                 push    0FFFFFFFFh
.text:00003595                 push    offset __ehhandler$??1CCreatedCoder@@QAE@XZ
.text:0000359A                 mov     eax, large fs:0
.text:000035A0                 push    eax
.text:000035A1                 push    ecx
.text:000035A2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000035A9                 mov     eax, dword ptr ds:___security_cookie
.text:000035AE                 xor     eax, ebp
.text:000035B0                 push    eax
.text:000035B1                 lea     eax, [ebp+var_C]
.text:000035B4                 mov     large fs:0, eax
.text:000035BA                 mov     [ebp+var_10], ecx
.text:000035BD                 mov     [ebp+var_4], 0
.text:000035C4                 mov     ecx, [ebp+var_10]
.text:000035C7                 add     ecx, 4
.text:000035CA                 call    ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>(void)
.text:000035CF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000035D6                 mov     ecx, [ebp+var_10]
.text:000035D9                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000035DE                 mov     ecx, [ebp+var_C]
.text:000035E1                 mov     large fs:0, ecx
.text:000035E8                 pop     ecx
.text:000035E9                 add     esp, 10h
.text:000035EC                 cmp     ebp, esp
.text:000035EE                 call    __RTC_CheckEsp
.text:000035F3                 mov     esp, ebp
.text:000035F5                 pop     ebp
.text:000035F6                 retn
.text:000035F6 ??1CCreatedCoder@@QAE@XZ endp
.text:000035F6
.text:000035F6 ; ---------------------------------------------------------------------------
.text:000035F7                 align 4
.text:000035F7 _text           ends
.text:000035F7
.text$x:000035F8 ; ===========================================================================
.text$x:000035F8
.text$x:000035F8 ; Segment type: Pure code
.text$x:000035F8 ; Segment permissions: Read/Execute
.text$x:000035F8 _text$x         segment para public 'CODE' use32
.text$x:000035F8                 assume cs:_text$x
.text$x:000035F8                 ;org 35F8h
.text$x:000035F8 ; COMDAT (pick associative to section at 3590)
.text$x:000035F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000035F8
.text$x:000035F8 ; =============== S U B R O U T I N E =======================================
.text$x:000035F8
.text$x:000035F8
.text$x:000035F8 __unwindfunclet$??1CCreatedCoder@@QAE@XZ$0 proc near
.text$x:000035F8                                         ; DATA XREF: .xdata$x:00003620o
.text$x:000035F8                 mov     ecx, [ebp-10h]
.text$x:000035FB                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:000035FB __unwindfunclet$??1CCreatedCoder@@QAE@XZ$0 endp
.text$x:000035FB
.text$x:00003600
.text$x:00003600 ; =============== S U B R O U T I N E =======================================
.text$x:00003600
.text$x:00003600
.text$x:00003600 __ehhandler$??1CCreatedCoder@@QAE@XZ proc near
.text$x:00003600                                         ; DATA XREF: CCreatedCoder::~CCreatedCoder(void)+5o
.text$x:00003600
.text$x:00003600 arg_4           = dword ptr  8
.text$x:00003600
.text$x:00003600                 mov     edx, [esp+arg_4]
.text$x:00003604                 lea     eax, [edx+0Ch]
.text$x:00003607                 mov     ecx, [edx-8]
.text$x:0000360A                 xor     ecx, eax
.text$x:0000360C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003611                 mov     eax, offset __ehfuncinfo$??1CCreatedCoder@@QAE@XZ
.text$x:00003616                 jmp     ___CxxFrameHandler3
.text$x:00003616 __ehhandler$??1CCreatedCoder@@QAE@XZ endp
.text$x:00003616
.text$x:00003616 ; ---------------------------------------------------------------------------
.text$x:0000361B                 align 4
.text$x:0000361B _text$x         ends
.text$x:0000361B
.xdata$x:0000361C ; ===========================================================================
.xdata$x:0000361C
.xdata$x:0000361C ; Segment type: Pure data
.xdata$x:0000361C ; Segment permissions: Read
.xdata$x:0000361C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000361C                 assume cs:_xdata$x
.xdata$x:0000361C                 ;org 361Ch
.xdata$x:0000361C ; COMDAT (pick associative to section at 3590)
.xdata$x:0000361C __unwindtable$??1CCreatedCoder@@QAE@XZ db 0FFh
.xdata$x:0000361C                                         ; DATA XREF: .xdata$x:0000362Co
.xdata$x:0000361D                 db 0FFh
.xdata$x:0000361E                 db 0FFh
.xdata$x:0000361F                 db 0FFh
.xdata$x:00003620                 dd offset __unwindfunclet$??1CCreatedCoder@@QAE@XZ$0
.xdata$x:00003624 __ehfuncinfo$??1CCreatedCoder@@QAE@XZ db  22h ; "
.xdata$x:00003624                                         ; DATA XREF: __ehhandler$??1CCreatedCoder@@QAE@XZ+11o
.xdata$x:00003625                 db    5
.xdata$x:00003626                 db  93h ; ô
.xdata$x:00003627                 db  19h
.xdata$x:00003628                 db    1
.xdata$x:00003629                 db    0
.xdata$x:0000362A                 db    0
.xdata$x:0000362B                 db    0
.xdata$x:0000362C                 dd offset __unwindtable$??1CCreatedCoder@@QAE@XZ
.xdata$x:00003630                 db    0
.xdata$x:00003631                 db    0
.xdata$x:00003632                 db    0
.xdata$x:00003633                 db    0
.xdata$x:00003634                 db    0
.xdata$x:00003635                 db    0
.xdata$x:00003636                 db    0
.xdata$x:00003637                 db    0
.xdata$x:00003638                 db    0
.xdata$x:00003639                 db    0
.xdata$x:0000363A                 db    0
.xdata$x:0000363B                 db    0
.xdata$x:0000363C                 db    0
.xdata$x:0000363D                 db    0
.xdata$x:0000363E                 db    0
.xdata$x:0000363F                 db    0
.xdata$x:00003640                 db    0
.xdata$x:00003641                 db    0
.xdata$x:00003642                 db    0
.xdata$x:00003643                 db    0
.xdata$x:00003644                 db    1
.xdata$x:00003645                 db    0
.xdata$x:00003646                 db    0
.xdata$x:00003647                 db    0
.xdata$x:00003647 _xdata$x        ends
.xdata$x:00003647
.text:00003648 ; ===========================================================================
.text:00003648
.text:00003648 ; Segment type: Pure code
.text:00003648 ; Segment permissions: Read/Execute
.text:00003648 _text           segment para public 'CODE' use32
.text:00003648                 assume cs:_text
.text:00003648                 ;org 3648h
.text:00003648 ; COMDAT (pick any)
.text:00003648                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003648
.text:00003648 ; =============== S U B R O U T I N E =======================================
.text:00003648
.text:00003648 ; Attributes: bp-based frame
.text:00003648
.text:00003648 ; void __thiscall NArchive::N7z::CMtEncMultiProgress::AddOutSize(NArchive::N7z::CMtEncMultiProgress *this, unsigned __int64)
.text:00003648                 public ?AddOutSize@CMtEncMultiProgress@N7z@NArchive@@QAEX_K@Z
.text:00003648 ?AddOutSize@CMtEncMultiProgress@N7z@NArchive@@QAEX_K@Z proc near
.text:00003648                                         ; CODE XREF: NArchive::N7z::CSequentialOutTempBufferImp2::Write(void const *,uint,uint *)+57p
.text:00003648                                         ; NArchive::N7z::CSequentialOutMtNotify::Write(void const *,uint,uint *)+7Ap
.text:00003648
.text:00003648 var_10          = dword ptr -10h
.text:00003648 var_C           = dword ptr -0Ch
.text:00003648 var_8           = dword ptr -8
.text:00003648 var_4           = dword ptr -4
.text:00003648 arg_0           = qword ptr  8
.text:00003648
.text:00003648                 push    ebp
.text:00003649                 mov     ebp, esp
.text:0000364B                 sub     esp, 10h
.text:0000364E                 mov     eax, 0CCCCCCCCh
.text:00003653                 mov     [ebp+var_10], eax
.text:00003656                 mov     [ebp+var_C], eax
.text:00003659                 mov     [ebp+var_8], eax
.text:0000365C                 mov     [ebp+var_4], eax
.text:0000365F                 mov     [ebp+var_4], ecx
.text:00003662                 mov     eax, [ebp+var_4]
.text:00003665                 add     eax, 0Ch
.text:00003668                 push    eax             ; struct NWindows::NSynchronization::CCriticalSection *
.text:00003669                 lea     ecx, [ebp+var_C] ; this
.text:0000366C                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:00003671                 mov     ecx, [ebp+var_4]
.text:00003674                 mov     edx, [ecx+28h]
.text:00003677                 add     edx, dword ptr [ebp+arg_0]
.text:0000367A                 mov     eax, [ecx+2Ch]
.text:0000367D                 adc     eax, dword ptr [ebp+arg_0+4]
.text:00003680                 mov     ecx, [ebp+var_4]
.text:00003683                 mov     [ecx+28h], edx
.text:00003686                 mov     [ecx+2Ch], eax
.text:00003689                 lea     ecx, [ebp+var_C] ; this
.text:0000368C                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00003691                 push    edx
.text:00003692                 mov     ecx, ebp
.text:00003694                 push    eax
.text:00003695                 lea     edx, $LN6_0
.text:0000369B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000036A0                 pop     eax
.text:000036A1                 pop     edx
.text:000036A2                 add     esp, 10h
.text:000036A5                 cmp     ebp, esp
.text:000036A7                 call    __RTC_CheckEsp
.text:000036AC                 mov     esp, ebp
.text:000036AE                 pop     ebp
.text:000036AF                 retn    8
.text:000036AF ?AddOutSize@CMtEncMultiProgress@N7z@NArchive@@QAEX_K@Z endp
.text:000036AF
.text:000036AF ; ---------------------------------------------------------------------------
.text:000036B2                 align 4
.text:000036B4 $LN6_0          dd 1                    ; DATA XREF: NArchive::N7z::CMtEncMultiProgress::AddOutSize(unsigned __int64)+4Do
.text:000036B8                 dd offset $LN5_1
.text:000036BC $LN5_1          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:000036B8o
.text:000036C4                 dd offset $LN4_0        ; "lock"
.text:000036C8 $LN4_0          db 'lock',0             ; DATA XREF: .text:000036C4o
.text:000036CD                 align 10h
.text:000036CD _text           ends
.text:000036CD
.text:000036D0 ; ===========================================================================
.text:000036D0
.text:000036D0 ; Segment type: Pure code
.text:000036D0 ; Segment permissions: Read/Execute
.text:000036D0 _text           segment para public 'CODE' use32
.text:000036D0                 assume cs:_text
.text:000036D0                 ;org 36D0h
.text:000036D0 ; COMDAT (pick any)
.text:000036D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000036D0
.text:000036D0 ; =============== S U B R O U T I N E =======================================
.text:000036D0
.text:000036D0 ; Attributes: bp-based frame
.text:000036D0
.text:000036D0 ; unsigned __int64 __thiscall CInOutTempBuffer::GetDataSize(CInOutTempBuffer *__hidden this)
.text:000036D0                 public ?GetDataSize@CInOutTempBuffer@@QBE_KXZ
.text:000036D0 ?GetDataSize@CInOutTempBuffer@@QBE_KXZ proc near
.text:000036D0                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+9F3p
.text:000036D0
.text:000036D0 var_4           = dword ptr -4
.text:000036D0
.text:000036D0                 push    ebp
.text:000036D1                 mov     ebp, esp
.text:000036D3                 push    ecx
.text:000036D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000036DB                 mov     [ebp+var_4], ecx
.text:000036DE                 mov     ecx, [ebp+var_4]
.text:000036E1                 mov     eax, [ecx+28h]
.text:000036E4                 mov     edx, [ecx+2Ch]
.text:000036E7                 mov     esp, ebp
.text:000036E9                 pop     ebp
.text:000036EA                 retn
.text:000036EA ?GetDataSize@CInOutTempBuffer@@QBE_KXZ endp
.text:000036EA
.text:000036EA ; ---------------------------------------------------------------------------
.text:000036EB                 align 4
.text:000036EB _text           ends
.text:000036EB
.text:000036EC ; ===========================================================================
.text:000036EC
.text:000036EC ; Segment type: Pure code
.text:000036EC ; Segment permissions: Read/Execute
.text:000036EC _text           segment para public 'CODE' use32
.text:000036EC                 assume cs:_text
.text:000036EC                 ;org 36ECh
.text:000036EC ; COMDAT (pick any)
.text:000036EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000036EC
.text:000036EC ; =============== S U B R O U T I N E =======================================
.text:000036EC
.text:000036EC ; Attributes: bp-based frame
.text:000036EC
.text:000036EC ; public: __thiscall CDynBufSeqOutStream::CDynBufSeqOutStream(void)
.text:000036EC                 public ??0CDynBufSeqOutStream@@QAE@XZ
.text:000036EC ??0CDynBufSeqOutStream@@QAE@XZ proc near
.text:000036EC                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+476p
.text:000036EC
.text:000036EC var_4           = dword ptr -4
.text:000036EC
.text:000036EC                 push    ebp
.text:000036ED                 mov     ebp, esp
.text:000036EF                 push    ecx
.text:000036F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000036F7                 mov     [ebp+var_4], ecx
.text:000036FA                 mov     ecx, [ebp+var_4] ; this
.text:000036FD                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:00003702                 mov     ecx, [ebp+var_4]
.text:00003705                 add     ecx, 4          ; this
.text:00003708                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000370D                 mov     eax, [ebp+var_4]
.text:00003710                 mov     dword ptr [eax], offset ??_7CDynBufSeqOutStream@@6B@ ; const CDynBufSeqOutStream::`vftable'
.text:00003716                 mov     ecx, [ebp+var_4]
.text:00003719                 add     ecx, 8          ; this
.text:0000371C                 call    ??0CByteDynBuffer@@QAE@XZ ; CByteDynBuffer::CByteDynBuffer(void)
.text:00003721                 mov     ecx, [ebp+var_4]
.text:00003724                 mov     dword ptr [ecx+10h], 0
.text:0000372B                 mov     eax, [ebp+var_4]
.text:0000372E                 add     esp, 4
.text:00003731                 cmp     ebp, esp
.text:00003733                 call    __RTC_CheckEsp
.text:00003738                 mov     esp, ebp
.text:0000373A                 pop     ebp
.text:0000373B                 retn
.text:0000373B ??0CDynBufSeqOutStream@@QAE@XZ endp
.text:0000373B
.text:0000373B _text           ends
.text:0000373B
.rdata:0000373C ; ===========================================================================
.rdata:0000373C
.rdata:0000373C ; Segment type: Pure data
.rdata:0000373C ; Segment permissions: Read
.rdata:0000373C _rdata          segment dword public 'DATA' use32
.rdata:0000373C                 assume cs:_rdata
.rdata:0000373C                 ;org 373Ch
.rdata:0000373C ; COMDAT (pick largest)
.rdata:0000373C                 dd offset ??_R4CDynBufSeqOutStream@@6B@ ; const CDynBufSeqOutStream::`RTTI Complete Object Locator'
.rdata:00003740                 public ??_7CDynBufSeqOutStream@@6B@
.rdata:00003740 ; const CDynBufSeqOutStream::`vftable'
.rdata:00003740 ??_7CDynBufSeqOutStream@@6B@ dd offset ?QueryInterface@CDynBufSeqOutStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:00003740                                         ; DATA XREF: CDynBufSeqOutStream::CDynBufSeqOutStream(void)+24o
.rdata:00003740                                         ; CDynBufSeqOutStream::QueryInterface(_GUID const &,void * *)
.rdata:00003744                 dd offset ?AddRef@CDynBufSeqOutStream@@UAGKXZ ; CDynBufSeqOutStream::AddRef(void)
.rdata:00003748                 dd offset ?Release@CDynBufSeqOutStream@@UAGKXZ ; CDynBufSeqOutStream::Release(void)
.rdata:0000374C                 dd offset ?Write@CDynBufSeqOutStream@@UAGJPBXIPAI@Z ; CDynBufSeqOutStream::Write(void const *,uint,uint *)
.rdata:0000374C _rdata          ends
.rdata:0000374C
.rdata$r:00003750 ; ===========================================================================
.rdata$r:00003750
.rdata$r:00003750 ; Segment type: Pure data
.rdata$r:00003750 ; Segment permissions: Read
.rdata$r:00003750 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003750                 assume cs:_rdata$r
.rdata$r:00003750                 ;org 3750h
.rdata$r:00003750 ; COMDAT (pick any)
.rdata$r:00003750                 public ??_R4CDynBufSeqOutStream@@6B@
.rdata$r:00003750 ; const CDynBufSeqOutStream::`RTTI Complete Object Locator'
.rdata$r:00003750 ??_R4CDynBufSeqOutStream@@6B@ db    0   ; DATA XREF: .rdata:0000373Co
.rdata$r:00003751                 db    0
.rdata$r:00003752                 db    0
.rdata$r:00003753                 db    0
.rdata$r:00003754                 db    0
.rdata$r:00003755                 db    0
.rdata$r:00003756                 db    0
.rdata$r:00003757                 db    0
.rdata$r:00003758                 db    0
.rdata$r:00003759                 db    0
.rdata$r:0000375A                 db    0
.rdata$r:0000375B                 db    0
.rdata$r:0000375C                 dd offset ??_R0?AVCDynBufSeqOutStream@@@8 ; CDynBufSeqOutStream `RTTI Type Descriptor'
.rdata$r:00003760                 dd offset ??_R3CDynBufSeqOutStream@@8 ; CDynBufSeqOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003760 _rdata$r        ends
.rdata$r:00003760
.data:00003764 ; ===========================================================================
.data:00003764
.data:00003764 ; Segment type: Pure data
.data:00003764 ; Segment permissions: Read/Write
.data:00003764 _data           segment dword public 'DATA' use32
.data:00003764                 assume cs:_data
.data:00003764                 ;org 3764h
.data:00003764 ; COMDAT (pick any)
.data:00003764                 public ??_R0?AVCDynBufSeqOutStream@@@8
.data:00003764 ; class CDynBufSeqOutStream `RTTI Type Descriptor'
.data:00003764 ??_R0?AVCDynBufSeqOutStream@@@8 dd offset ??_7type_info@@6B@
.data:00003764                                         ; DATA XREF: .rdata$r:0000375Co
.data:00003764                                         ; .rdata$r:CDynBufSeqOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003764                                         ; const type_info::`vftable'
.data:00003768                 db    0
.data:00003769                 db    0
.data:0000376A                 db    0
.data:0000376B                 db    0
.data:0000376C                 db  2Eh ; .
.data:0000376D                 db  3Fh ; ?
.data:0000376E                 db  41h ; A
.data:0000376F                 db  56h ; V
.data:00003770                 db  43h ; C
.data:00003771                 db  44h ; D
.data:00003772                 db  79h ; y
.data:00003773                 db  6Eh ; n
.data:00003774                 db  42h ; B
.data:00003775                 db  75h ; u
.data:00003776                 db  66h ; f
.data:00003777                 db  53h ; S
.data:00003778                 db  65h ; e
.data:00003779                 db  71h ; q
.data:0000377A                 db  4Fh ; O
.data:0000377B                 db  75h ; u
.data:0000377C                 db  74h ; t
.data:0000377D                 db  53h ; S
.data:0000377E                 db  74h ; t
.data:0000377F                 db  72h ; r
.data:00003780                 db  65h ; e
.data:00003781                 db  61h ; a
.data:00003782                 db  6Dh ; m
.data:00003783                 db  40h ; @
.data:00003784                 db  40h ; @
.data:00003785                 db    0
.data:00003786                 align 4
.data:00003786 _data           ends
.data:00003786
.rdata$r:00003788 ; ===========================================================================
.rdata$r:00003788
.rdata$r:00003788 ; Segment type: Pure data
.rdata$r:00003788 ; Segment permissions: Read
.rdata$r:00003788 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003788                 assume cs:_rdata$r
.rdata$r:00003788                 ;org 3788h
.rdata$r:00003788 ; COMDAT (pick any)
.rdata$r:00003788                 public ??_R3CDynBufSeqOutStream@@8
.rdata$r:00003788 ; CDynBufSeqOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003788 ??_R3CDynBufSeqOutStream@@8 db    0     ; DATA XREF: .rdata$r:00003760o
.rdata$r:00003788                                         ; .rdata$r:000037C4o
.rdata$r:00003789                 db    0
.rdata$r:0000378A                 db    0
.rdata$r:0000378B                 db    0
.rdata$r:0000378C                 db    1
.rdata$r:0000378D                 db    0
.rdata$r:0000378E                 db    0
.rdata$r:0000378F                 db    0
.rdata$r:00003790                 db    4
.rdata$r:00003791                 db    0
.rdata$r:00003792                 db    0
.rdata$r:00003793                 db    0
.rdata$r:00003794                 dd offset ??_R2CDynBufSeqOutStream@@8 ; CDynBufSeqOutStream::`RTTI Base Class Array'
.rdata$r:00003794 _rdata$r        ends
.rdata$r:00003794
.rdata$r:00003798 ; ===========================================================================
.rdata$r:00003798
.rdata$r:00003798 ; Segment type: Pure data
.rdata$r:00003798 ; Segment permissions: Read
.rdata$r:00003798 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003798                 assume cs:_rdata$r
.rdata$r:00003798                 ;org 3798h
.rdata$r:00003798 ; COMDAT (pick any)
.rdata$r:00003798                 public ??_R2CDynBufSeqOutStream@@8
.rdata$r:00003798 ; CDynBufSeqOutStream::`RTTI Base Class Array'
.rdata$r:00003798 ??_R2CDynBufSeqOutStream@@8 dd offset ??_R1A@?0A@EA@CDynBufSeqOutStream@@8
.rdata$r:00003798                                         ; DATA XREF: .rdata$r:00003794o
.rdata$r:00003798                                         ; CDynBufSeqOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000379C                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000037A0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000037A4                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000037A8                 db    0
.rdata$r:000037A9                 align 4
.rdata$r:000037A9 _rdata$r        ends
.rdata$r:000037A9
.rdata$r:000037AC ; ===========================================================================
.rdata$r:000037AC
.rdata$r:000037AC ; Segment type: Pure data
.rdata$r:000037AC ; Segment permissions: Read
.rdata$r:000037AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000037AC                 assume cs:_rdata$r
.rdata$r:000037AC                 ;org 37ACh
.rdata$r:000037AC ; COMDAT (pick any)
.rdata$r:000037AC                 public ??_R1A@?0A@EA@CDynBufSeqOutStream@@8
.rdata$r:000037AC ; CDynBufSeqOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000037AC ??_R1A@?0A@EA@CDynBufSeqOutStream@@8 dd offset ??_R0?AVCDynBufSeqOutStream@@@8
.rdata$r:000037AC                                         ; DATA XREF: .rdata$r:CDynBufSeqOutStream::`RTTI Base Class Array'o
.rdata$r:000037AC                                         ; CDynBufSeqOutStream `RTTI Type Descriptor'
.rdata$r:000037B0                 db    3
.rdata$r:000037B1                 db    0
.rdata$r:000037B2                 db    0
.rdata$r:000037B3                 db    0
.rdata$r:000037B4                 db    0
.rdata$r:000037B5                 db    0
.rdata$r:000037B6                 db    0
.rdata$r:000037B7                 db    0
.rdata$r:000037B8                 db 0FFh
.rdata$r:000037B9                 db 0FFh
.rdata$r:000037BA                 db 0FFh
.rdata$r:000037BB                 db 0FFh
.rdata$r:000037BC                 db    0
.rdata$r:000037BD                 db    0
.rdata$r:000037BE                 db    0
.rdata$r:000037BF                 db    0
.rdata$r:000037C0                 db  40h ; @
.rdata$r:000037C1                 db    0
.rdata$r:000037C2                 db    0
.rdata$r:000037C3                 db    0
.rdata$r:000037C4                 dd offset ??_R3CDynBufSeqOutStream@@8 ; CDynBufSeqOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000037C4 _rdata$r        ends
.rdata$r:000037C4
.rdata$r:000037C8 ; ===========================================================================
.rdata$r:000037C8
.rdata$r:000037C8 ; Segment type: Pure data
.rdata$r:000037C8 ; Segment permissions: Read
.rdata$r:000037C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000037C8                 assume cs:_rdata$r
.rdata$r:000037C8                 ;org 37C8h
.rdata$r:000037C8 ; COMDAT (pick any)
.rdata$r:000037C8                 public ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:000037C8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000037C8 ??_R1A@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:000037C8                                         ; DATA XREF: .rdata$r:0000379Co
.rdata$r:000037C8                                         ; .rdata$r:ISequentialOutStream::`RTTI Base Class Array'o ...
.rdata$r:000037C8                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:000037CC                 db    1
.rdata$r:000037CD                 db    0
.rdata$r:000037CE                 db    0
.rdata$r:000037CF                 db    0
.rdata$r:000037D0                 db    0
.rdata$r:000037D1                 db    0
.rdata$r:000037D2                 db    0
.rdata$r:000037D3                 db    0
.rdata$r:000037D4                 db 0FFh
.rdata$r:000037D5                 db 0FFh
.rdata$r:000037D6                 db 0FFh
.rdata$r:000037D7                 db 0FFh
.rdata$r:000037D8                 db    0
.rdata$r:000037D9                 db    0
.rdata$r:000037DA                 db    0
.rdata$r:000037DB                 db    0
.rdata$r:000037DC                 db  40h ; @
.rdata$r:000037DD                 db    0
.rdata$r:000037DE                 db    0
.rdata$r:000037DF                 db    0
.rdata$r:000037E0                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000037E0 _rdata$r        ends
.rdata$r:000037E0
.data:000037E4 ; ===========================================================================
.data:000037E4
.data:000037E4 ; Segment type: Pure data
.data:000037E4 ; Segment permissions: Read/Write
.data:000037E4 _data           segment dword public 'DATA' use32
.data:000037E4                 assume cs:_data
.data:000037E4                 ;org 37E4h
.data:000037E4 ; COMDAT (pick any)
.data:000037E4                 public ??_R0?AUISequentialOutStream@@@8
.data:000037E4 ; struct ISequentialOutStream `RTTI Type Descriptor'
.data:000037E4 ??_R0?AUISequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:000037E4                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000037E4                                         ; .rdata$r:000039DCo
.data:000037E4                                         ; const type_info::`vftable'
.data:000037E8                 db    0
.data:000037E9                 db    0
.data:000037EA                 db    0
.data:000037EB                 db    0
.data:000037EC                 db  2Eh ; .
.data:000037ED                 db  3Fh ; ?
.data:000037EE                 db  41h ; A
.data:000037EF                 db  55h ; U
.data:000037F0                 db  49h ; I
.data:000037F1                 db  53h ; S
.data:000037F2                 db  65h ; e
.data:000037F3                 db  71h ; q
.data:000037F4                 db  75h ; u
.data:000037F5                 db  65h ; e
.data:000037F6                 db  6Eh ; n
.data:000037F7                 db  74h ; t
.data:000037F8                 db  69h ; i
.data:000037F9                 db  61h ; a
.data:000037FA                 db  6Ch ; l
.data:000037FB                 db  4Fh ; O
.data:000037FC                 db  75h ; u
.data:000037FD                 db  74h ; t
.data:000037FE                 db  53h ; S
.data:000037FF                 db  74h ; t
.data:00003800                 db  72h ; r
.data:00003801                 db  65h ; e
.data:00003802                 db  61h ; a
.data:00003803                 db  6Dh ; m
.data:00003804                 db  40h ; @
.data:00003805                 db  40h ; @
.data:00003806                 db    0
.data:00003807                 align 4
.data:00003807 _data           ends
.data:00003807
.rdata$r:00003808 ; ===========================================================================
.rdata$r:00003808
.rdata$r:00003808 ; Segment type: Pure data
.rdata$r:00003808 ; Segment permissions: Read
.rdata$r:00003808 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003808                 assume cs:_rdata$r
.rdata$r:00003808                 ;org 3808h
.rdata$r:00003808 ; COMDAT (pick any)
.rdata$r:00003808                 public ??_R3ISequentialOutStream@@8
.rdata$r:00003808 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003808 ??_R3ISequentialOutStream@@8 db    0    ; DATA XREF: .rdata$r:000037E0o
.rdata$r:00003808                                         ; .rdata$r:000039E0o
.rdata$r:00003809                 db    0
.rdata$r:0000380A                 db    0
.rdata$r:0000380B                 db    0
.rdata$r:0000380C                 db    0
.rdata$r:0000380D                 db    0
.rdata$r:0000380E                 db    0
.rdata$r:0000380F                 db    0
.rdata$r:00003810                 db    2
.rdata$r:00003811                 db    0
.rdata$r:00003812                 db    0
.rdata$r:00003813                 db    0
.rdata$r:00003814                 dd offset ??_R2ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00003814 _rdata$r        ends
.rdata$r:00003814
.rdata$r:00003818 ; ===========================================================================
.rdata$r:00003818
.rdata$r:00003818 ; Segment type: Pure data
.rdata$r:00003818 ; Segment permissions: Read
.rdata$r:00003818 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003818                 assume cs:_rdata$r
.rdata$r:00003818                 ;org 3818h
.rdata$r:00003818 ; COMDAT (pick any)
.rdata$r:00003818                 public ??_R2ISequentialOutStream@@8
.rdata$r:00003818 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00003818 ??_R2ISequentialOutStream@@8 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00003818                                         ; DATA XREF: .rdata$r:00003814o
.rdata$r:00003818                                         ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000381C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003820                 db    0
.rdata$r:00003821                 align 4
.rdata$r:00003821 _rdata$r        ends
.rdata$r:00003821
.rdata$r:00003824 ; ===========================================================================
.rdata$r:00003824
.rdata$r:00003824 ; Segment type: Pure data
.rdata$r:00003824 ; Segment permissions: Read
.rdata$r:00003824 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003824                 assume cs:_rdata$r
.rdata$r:00003824                 ;org 3824h
.rdata$r:00003824 ; COMDAT (pick any)
.rdata$r:00003824                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00003824 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00003824 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00003824                                         ; DATA XREF: .rdata$r:000037A4o
.rdata$r:00003824                                         ; .rdata$r:00003D00o ...
.rdata$r:00003824                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00003828                 db    0
.rdata$r:00003829                 db    0
.rdata$r:0000382A                 db    0
.rdata$r:0000382B                 db    0
.rdata$r:0000382C                 db    4
.rdata$r:0000382D                 db    0
.rdata$r:0000382E                 db    0
.rdata$r:0000382F                 db    0
.rdata$r:00003830                 db 0FFh
.rdata$r:00003831                 db 0FFh
.rdata$r:00003832                 db 0FFh
.rdata$r:00003833                 db 0FFh
.rdata$r:00003834                 db    0
.rdata$r:00003835                 db    0
.rdata$r:00003836                 db    0
.rdata$r:00003837                 db    0
.rdata$r:00003838                 db  40h ; @
.rdata$r:00003839                 db    0
.rdata$r:0000383A                 db    0
.rdata$r:0000383B                 db    0
.rdata$r:0000383C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000383C _rdata$r        ends
.rdata$r:0000383C
.text:00003840 ; ===========================================================================
.text:00003840
.text:00003840 ; Segment type: Pure code
.text:00003840 ; Segment permissions: Read/Execute
.text:00003840 _text           segment para public 'CODE' use32
.text:00003840                 assume cs:_text
.text:00003840                 ;org 3840h
.text:00003840 ; COMDAT (pick any)
.text:00003840                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003840
.text:00003840 ; =============== S U B R O U T I N E =======================================
.text:00003840
.text:00003840 ; Attributes: bp-based frame
.text:00003840
.text:00003840 ; _DWORD __thiscall CByteDynBuffer::CByteDynBuffer(CByteDynBuffer *__hidden this)
.text:00003840                 public ??0CByteDynBuffer@@QAE@XZ
.text:00003840 ??0CByteDynBuffer@@QAE@XZ proc near     ; CODE XREF: CDynBufSeqOutStream::CDynBufSeqOutStream(void)+30p
.text:00003840
.text:00003840 var_4           = dword ptr -4
.text:00003840
.text:00003840                 push    ebp
.text:00003841                 mov     ebp, esp
.text:00003843                 push    ecx
.text:00003844                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000384B                 mov     [ebp+var_4], ecx
.text:0000384E                 mov     eax, [ebp+var_4]
.text:00003851                 mov     dword ptr [eax], 0
.text:00003857                 mov     ecx, [ebp+var_4]
.text:0000385A                 mov     dword ptr [ecx+4], 0
.text:00003861                 mov     eax, [ebp+var_4]
.text:00003864                 mov     esp, ebp
.text:00003866                 pop     ebp
.text:00003867                 retn
.text:00003867 ??0CByteDynBuffer@@QAE@XZ endp
.text:00003867
.text:00003867 _text           ends
.text:00003867
.text:00003868 ; ===========================================================================
.text:00003868
.text:00003868 ; Segment type: Pure code
.text:00003868 ; Segment permissions: Read/Execute
.text:00003868 _text           segment para public 'CODE' use32
.text:00003868                 assume cs:_text
.text:00003868                 ;org 3868h
.text:00003868 ; COMDAT (pick any)
.text:00003868                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003868
.text:00003868 ; =============== S U B R O U T I N E =======================================
.text:00003868
.text:00003868 ; Attributes: bp-based frame
.text:00003868
.text:00003868 ; void __thiscall CDynBufSeqOutStream::Init(CDynBufSeqOutStream *__hidden this)
.text:00003868                 public ?Init@CDynBufSeqOutStream@@QAEXXZ
.text:00003868 ?Init@CDynBufSeqOutStream@@QAEXXZ proc near
.text:00003868                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+4C5p
.text:00003868
.text:00003868 var_4           = dword ptr -4
.text:00003868
.text:00003868                 push    ebp
.text:00003869                 mov     ebp, esp
.text:0000386B                 push    ecx
.text:0000386C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003873                 mov     [ebp+var_4], ecx
.text:00003876                 mov     eax, [ebp+var_4]
.text:00003879                 mov     dword ptr [eax+10h], 0
.text:00003880                 mov     esp, ebp
.text:00003882                 pop     ebp
.text:00003883                 retn
.text:00003883 ?Init@CDynBufSeqOutStream@@QAEXXZ endp
.text:00003883
.text:00003883 _text           ends
.text:00003883
.text:00003884 ; ===========================================================================
.text:00003884
.text:00003884 ; Segment type: Pure code
.text:00003884 ; Segment permissions: Read/Execute
.text:00003884 _text           segment para public 'CODE' use32
.text:00003884                 assume cs:_text
.text:00003884                 ;org 3884h
.text:00003884 ; COMDAT (pick any)
.text:00003884                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003884
.text:00003884 ; =============== S U B R O U T I N E =======================================
.text:00003884
.text:00003884 ; Attributes: bp-based frame
.text:00003884
.text:00003884 ; __int32 __stdcall CDynBufSeqOutStream::QueryInterface(CDynBufSeqOutStream *this, const struct _GUID *Buf1, void **)
.text:00003884                 public ?QueryInterface@CDynBufSeqOutStream@@UAGJABU_GUID@@PAPAX@Z
.text:00003884 ?QueryInterface@CDynBufSeqOutStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00003884                                         ; DATA XREF: .rdata:const CDynBufSeqOutStream::`vftable'o
.text:00003884
.text:00003884 this            = dword ptr  8
.text:00003884 Buf1            = dword ptr  0Ch
.text:00003884 arg_8           = dword ptr  10h
.text:00003884
.text:00003884                 push    ebp
.text:00003885                 mov     ebp, esp
.text:00003887                 mov     eax, [ebp+arg_8]
.text:0000388A                 mov     dword ptr [eax], 0
.text:00003890                 push    offset _IID_IUnknown ; Buf2
.text:00003895                 mov     ecx, [ebp+Buf1]
.text:00003898                 push    ecx             ; Buf1
.text:00003899                 call    ___@8           ; __(x,x)
.text:0000389E                 test    eax, eax
.text:000038A0                 jz      short loc_38AC
.text:000038A2                 mov     edx, [ebp+arg_8]
.text:000038A5                 mov     eax, [ebp+this]
.text:000038A8                 mov     [edx], eax
.text:000038AA                 jmp     short loc_38CF
.text:000038AC ; ---------------------------------------------------------------------------
.text:000038AC
.text:000038AC loc_38AC:                               ; CODE XREF: CDynBufSeqOutStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:000038AC                 push    offset _IID_ISequentialOutStream ; Buf2
.text:000038B1                 mov     ecx, [ebp+Buf1]
.text:000038B4                 push    ecx             ; Buf1
.text:000038B5                 call    ___@8           ; __(x,x)
.text:000038BA                 test    eax, eax
.text:000038BC                 jz      short loc_38C8
.text:000038BE                 mov     edx, [ebp+arg_8]
.text:000038C1                 mov     eax, [ebp+this]
.text:000038C4                 mov     [edx], eax
.text:000038C6                 jmp     short loc_38CF
.text:000038C8 ; ---------------------------------------------------------------------------
.text:000038C8
.text:000038C8 loc_38C8:                               ; CODE XREF: CDynBufSeqOutStream::QueryInterface(_GUID const &,void * *)+38j
.text:000038C8                 mov     eax, 80004002h
.text:000038CD                 jmp     short loc_38E0
.text:000038CF ; ---------------------------------------------------------------------------
.text:000038CF
.text:000038CF loc_38CF:                               ; CODE XREF: CDynBufSeqOutStream::QueryInterface(_GUID const &,void * *)+26j
.text:000038CF                                         ; CDynBufSeqOutStream::QueryInterface(_GUID const &,void * *)+42j
.text:000038CF                 mov     ecx, [ebp+this]
.text:000038D2                 mov     edx, [ecx+4]
.text:000038D5                 add     edx, 1
.text:000038D8                 mov     eax, [ebp+this]
.text:000038DB                 mov     [eax+4], edx
.text:000038DE                 xor     eax, eax
.text:000038E0
.text:000038E0 loc_38E0:                               ; CODE XREF: CDynBufSeqOutStream::QueryInterface(_GUID const &,void * *)+49j
.text:000038E0                 cmp     ebp, esp
.text:000038E2                 call    __RTC_CheckEsp
.text:000038E7                 pop     ebp
.text:000038E8                 retn    0Ch
.text:000038E8 ?QueryInterface@CDynBufSeqOutStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:000038E8
.text:000038E8 ; ---------------------------------------------------------------------------
.text:000038EB                 align 4
.text:000038EB _text           ends
.text:000038EB
.text:000038EC ; ===========================================================================
.text:000038EC
.text:000038EC ; Segment type: Pure code
.text:000038EC ; Segment permissions: Read/Execute
.text:000038EC _text           segment para public 'CODE' use32
.text:000038EC                 assume cs:_text
.text:000038EC                 ;org 38ECh
.text:000038EC ; COMDAT (pick any)
.text:000038EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000038EC
.text:000038EC ; =============== S U B R O U T I N E =======================================
.text:000038EC
.text:000038EC ; Attributes: bp-based frame
.text:000038EC
.text:000038EC ; unsigned __int32 __stdcall CDynBufSeqOutStream::AddRef(CDynBufSeqOutStream *this)
.text:000038EC                 public ?AddRef@CDynBufSeqOutStream@@UAGKXZ
.text:000038EC ?AddRef@CDynBufSeqOutStream@@UAGKXZ proc near ; DATA XREF: .rdata:00003744o
.text:000038EC
.text:000038EC var_4           = dword ptr -4
.text:000038EC this            = dword ptr  8
.text:000038EC
.text:000038EC                 push    ebp
.text:000038ED                 mov     ebp, esp
.text:000038EF                 push    ecx
.text:000038F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000038F7                 mov     eax, [ebp+this]
.text:000038FA                 mov     ecx, [eax+4]
.text:000038FD                 add     ecx, 1
.text:00003900                 mov     [ebp+var_4], ecx
.text:00003903                 mov     edx, [ebp+this]
.text:00003906                 mov     eax, [ebp+var_4]
.text:00003909                 mov     [edx+4], eax
.text:0000390C                 mov     eax, [ebp+var_4]
.text:0000390F                 mov     esp, ebp
.text:00003911                 pop     ebp
.text:00003912                 retn    4
.text:00003912 ?AddRef@CDynBufSeqOutStream@@UAGKXZ endp
.text:00003912
.text:00003912 ; ---------------------------------------------------------------------------
.text:00003915                 align 4
.text:00003915 _text           ends
.text:00003915
.text:00003918 ; ===========================================================================
.text:00003918
.text:00003918 ; Segment type: Pure code
.text:00003918 ; Segment permissions: Read/Execute
.text:00003918 _text           segment para public 'CODE' use32
.text:00003918                 assume cs:_text
.text:00003918                 ;org 3918h
.text:00003918 ; COMDAT (pick any)
.text:00003918                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003918
.text:00003918 ; =============== S U B R O U T I N E =======================================
.text:00003918
.text:00003918 ; Attributes: bp-based frame
.text:00003918
.text:00003918 ; unsigned __int32 __stdcall CDynBufSeqOutStream::Release(CDynBufSeqOutStream *this)
.text:00003918                 public ?Release@CDynBufSeqOutStream@@UAGKXZ
.text:00003918 ?Release@CDynBufSeqOutStream@@UAGKXZ proc near ; DATA XREF: .rdata:00003748o
.text:00003918
.text:00003918 var_10          = dword ptr -10h
.text:00003918 var_C           = dword ptr -0Ch
.text:00003918 var_8           = dword ptr -8
.text:00003918 var_4           = dword ptr -4
.text:00003918 this            = dword ptr  8
.text:00003918
.text:00003918                 push    ebp
.text:00003919                 mov     ebp, esp
.text:0000391B                 sub     esp, 10h
.text:0000391E                 mov     eax, 0CCCCCCCCh
.text:00003923                 mov     [ebp+var_10], eax
.text:00003926                 mov     [ebp+var_C], eax
.text:00003929                 mov     [ebp+var_8], eax
.text:0000392C                 mov     [ebp+var_4], eax
.text:0000392F                 mov     eax, [ebp+this]
.text:00003932                 mov     ecx, [eax+4]
.text:00003935                 sub     ecx, 1
.text:00003938                 mov     [ebp+var_C], ecx
.text:0000393B                 mov     edx, [ebp+this]
.text:0000393E                 mov     eax, [ebp+var_C]
.text:00003941                 mov     [edx+4], eax
.text:00003944                 cmp     [ebp+var_C], 0
.text:00003948                 jz      short loc_3952
.text:0000394A                 mov     ecx, [ebp+this]
.text:0000394D                 mov     eax, [ecx+4]
.text:00003950                 jmp     short loc_397C
.text:00003952 ; ---------------------------------------------------------------------------
.text:00003952
.text:00003952 loc_3952:                               ; CODE XREF: CDynBufSeqOutStream::Release(void)+30j
.text:00003952                 mov     edx, [ebp+this]
.text:00003955                 mov     [ebp+var_8], edx
.text:00003958                 mov     eax, [ebp+var_8]
.text:0000395B                 mov     [ebp+var_4], eax
.text:0000395E                 cmp     [ebp+var_4], 0
.text:00003962                 jz      short loc_3973
.text:00003964                 push    1
.text:00003966                 mov     ecx, [ebp+var_4]
.text:00003969                 call    ??_GCDynBufSeqOutStream@@QAEPAXI@Z ; CDynBufSeqOutStream::`scalar deleting destructor'(uint)
.text:0000396E                 mov     [ebp+var_10], eax
.text:00003971                 jmp     short loc_397A
.text:00003973 ; ---------------------------------------------------------------------------
.text:00003973
.text:00003973 loc_3973:                               ; CODE XREF: CDynBufSeqOutStream::Release(void)+4Aj
.text:00003973                 mov     [ebp+var_10], 0
.text:0000397A
.text:0000397A loc_397A:                               ; CODE XREF: CDynBufSeqOutStream::Release(void)+59j
.text:0000397A                 xor     eax, eax
.text:0000397C
.text:0000397C loc_397C:                               ; CODE XREF: CDynBufSeqOutStream::Release(void)+38j
.text:0000397C                 add     esp, 10h
.text:0000397F                 cmp     ebp, esp
.text:00003981                 call    __RTC_CheckEsp
.text:00003986                 mov     esp, ebp
.text:00003988                 pop     ebp
.text:00003989                 retn    4
.text:00003989 ?Release@CDynBufSeqOutStream@@UAGKXZ endp
.text:00003989
.text:00003989 _text           ends
.text:00003989
.text:0000398C ; ===========================================================================
.text:0000398C
.text:0000398C ; Segment type: Pure code
.text:0000398C ; Segment permissions: Read/Execute
.text:0000398C _text           segment para public 'CODE' use32
.text:0000398C                 assume cs:_text
.text:0000398C                 ;org 398Ch
.text:0000398C ; COMDAT (pick any)
.text:0000398C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000398C
.text:0000398C ; =============== S U B R O U T I N E =======================================
.text:0000398C
.text:0000398C ; Attributes: bp-based frame
.text:0000398C
.text:0000398C ; _DWORD __thiscall ISequentialOutStream::ISequentialOutStream(ISequentialOutStream *__hidden this)
.text:0000398C                 public ??0ISequentialOutStream@@QAE@XZ
.text:0000398C ??0ISequentialOutStream@@QAE@XZ proc near
.text:0000398C                                         ; CODE XREF: CDynBufSeqOutStream::CDynBufSeqOutStream(void)+11p
.text:0000398C                                         ; NArchive::N7z::CSequentialOutTempBufferImp2::CSequentialOutTempBufferImp2(void)+11p ...
.text:0000398C
.text:0000398C var_4           = dword ptr -4
.text:0000398C
.text:0000398C                 push    ebp
.text:0000398D                 mov     ebp, esp
.text:0000398F                 push    ecx
.text:00003990                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003997                 mov     [ebp+var_4], ecx
.text:0000399A                 mov     ecx, [ebp+var_4]
.text:0000399D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000039A2                 mov     eax, [ebp+var_4]
.text:000039A5                 mov     dword ptr [eax], offset ??_7ISequentialOutStream@@6B@ ; const ISequentialOutStream::`vftable'
.text:000039AB                 mov     eax, [ebp+var_4]
.text:000039AE                 add     esp, 4
.text:000039B1                 cmp     ebp, esp
.text:000039B3                 call    __RTC_CheckEsp
.text:000039B8                 mov     esp, ebp
.text:000039BA                 pop     ebp
.text:000039BB                 retn
.text:000039BB ??0ISequentialOutStream@@QAE@XZ endp
.text:000039BB
.text:000039BB _text           ends
.text:000039BB
.rdata:000039BC ; ===========================================================================
.rdata:000039BC
.rdata:000039BC ; Segment type: Pure data
.rdata:000039BC ; Segment permissions: Read
.rdata:000039BC _rdata          segment dword public 'DATA' use32
.rdata:000039BC                 assume cs:_rdata
.rdata:000039BC                 ;org 39BCh
.rdata:000039BC ; COMDAT (pick largest)
.rdata:000039BC                 dd offset ??_R4ISequentialOutStream@@6B@ ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata:000039C0                 public ??_7ISequentialOutStream@@6B@
.rdata:000039C0 ; const ISequentialOutStream::`vftable'
.rdata:000039C0 ??_7ISequentialOutStream@@6B@ dd offset __purecall
.rdata:000039C0                                         ; DATA XREF: ISequentialOutStream::ISequentialOutStream(void)+19o
.rdata:000039C4                 dd offset __purecall
.rdata:000039C8                 dd offset __purecall
.rdata:000039CC                 dd offset __purecall
.rdata:000039CC _rdata          ends
.rdata:000039CC
.rdata$r:000039D0 ; ===========================================================================
.rdata$r:000039D0
.rdata$r:000039D0 ; Segment type: Pure data
.rdata$r:000039D0 ; Segment permissions: Read
.rdata$r:000039D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000039D0                 assume cs:_rdata$r
.rdata$r:000039D0                 ;org 39D0h
.rdata$r:000039D0 ; COMDAT (pick any)
.rdata$r:000039D0                 public ??_R4ISequentialOutStream@@6B@
.rdata$r:000039D0 ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:000039D0 ??_R4ISequentialOutStream@@6B@ db    0  ; DATA XREF: .rdata:000039BCo
.rdata$r:000039D1                 db    0
.rdata$r:000039D2                 db    0
.rdata$r:000039D3                 db    0
.rdata$r:000039D4                 db    0
.rdata$r:000039D5                 db    0
.rdata$r:000039D6                 db    0
.rdata$r:000039D7                 db    0
.rdata$r:000039D8                 db    0
.rdata$r:000039D9                 db    0
.rdata$r:000039DA                 db    0
.rdata$r:000039DB                 db    0
.rdata$r:000039DC                 dd offset ??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:000039E0                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000039E0 _rdata$r        ends
.rdata$r:000039E0
.text:000039E4 ; ===========================================================================
.text:000039E4
.text:000039E4 ; Segment type: Pure code
.text:000039E4 ; Segment permissions: Read/Execute
.text:000039E4 _text           segment para public 'CODE' use32
.text:000039E4                 assume cs:_text
.text:000039E4                 ;org 39E4h
.text:000039E4 ; COMDAT (pick any)
.text:000039E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000039E4
.text:000039E4 ; =============== S U B R O U T I N E =======================================
.text:000039E4
.text:000039E4 ; Attributes: bp-based frame
.text:000039E4
.text:000039E4 ; public: void * __thiscall CDynBufSeqOutStream::`scalar deleting destructor'(unsigned int)
.text:000039E4                 public ??_GCDynBufSeqOutStream@@QAEPAXI@Z
.text:000039E4 ??_GCDynBufSeqOutStream@@QAEPAXI@Z proc near
.text:000039E4                                         ; CODE XREF: CDynBufSeqOutStream::Release(void)+51p
.text:000039E4
.text:000039E4 var_4           = dword ptr -4
.text:000039E4 arg_0           = dword ptr  8
.text:000039E4
.text:000039E4                 push    ebp
.text:000039E5                 mov     ebp, esp
.text:000039E7                 push    ecx
.text:000039E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000039EF                 mov     [ebp+var_4], ecx
.text:000039F2                 mov     ecx, [ebp+var_4] ; this
.text:000039F5                 call    ??1CDynBufSeqOutStream@@QAE@XZ ; CDynBufSeqOutStream::~CDynBufSeqOutStream(void)
.text:000039FA                 mov     eax, [ebp+arg_0]
.text:000039FD                 and     eax, 1
.text:00003A00                 jz      short loc_3A0E
.text:00003A02                 mov     ecx, [ebp+var_4]
.text:00003A05                 push    ecx             ; void *
.text:00003A06                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003A0B                 add     esp, 4
.text:00003A0E
.text:00003A0E loc_3A0E:                               ; CODE XREF: CDynBufSeqOutStream::`scalar deleting destructor'(uint)+1Cj
.text:00003A0E                 mov     eax, [ebp+var_4]
.text:00003A11                 add     esp, 4
.text:00003A14                 cmp     ebp, esp
.text:00003A16                 call    __RTC_CheckEsp
.text:00003A1B                 mov     esp, ebp
.text:00003A1D                 pop     ebp
.text:00003A1E                 retn    4
.text:00003A1E ??_GCDynBufSeqOutStream@@QAEPAXI@Z endp
.text:00003A1E
.text:00003A1E ; ---------------------------------------------------------------------------
.text:00003A21                 align 4
.text:00003A21 _text           ends
.text:00003A21
.text:00003A24 ; ===========================================================================
.text:00003A24
.text:00003A24 ; Segment type: Pure code
.text:00003A24 ; Segment permissions: Read/Execute
.text:00003A24 _text           segment para public 'CODE' use32
.text:00003A24                 assume cs:_text
.text:00003A24                 ;org 3A24h
.text:00003A24 ; COMDAT (pick any)
.text:00003A24                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A24
.text:00003A24 ; =============== S U B R O U T I N E =======================================
.text:00003A24
.text:00003A24 ; Attributes: bp-based frame
.text:00003A24
.text:00003A24 ; _DWORD __thiscall CDynBufSeqOutStream::~CDynBufSeqOutStream(CDynBufSeqOutStream *__hidden this)
.text:00003A24                 public ??1CDynBufSeqOutStream@@QAE@XZ
.text:00003A24 ??1CDynBufSeqOutStream@@QAE@XZ proc near
.text:00003A24                                         ; CODE XREF: CDynBufSeqOutStream::`scalar deleting destructor'(uint)+11p
.text:00003A24
.text:00003A24 var_4           = dword ptr -4
.text:00003A24
.text:00003A24                 push    ebp
.text:00003A25                 mov     ebp, esp
.text:00003A27                 push    ecx
.text:00003A28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A2F                 mov     [ebp+var_4], ecx
.text:00003A32                 mov     ecx, [ebp+var_4]
.text:00003A35                 add     ecx, 8          ; this
.text:00003A38                 call    ??1CByteDynBuffer@@QAE@XZ ; CByteDynBuffer::~CByteDynBuffer(void)
.text:00003A3D                 add     esp, 4
.text:00003A40                 cmp     ebp, esp
.text:00003A42                 call    __RTC_CheckEsp
.text:00003A47                 mov     esp, ebp
.text:00003A49                 pop     ebp
.text:00003A4A                 retn
.text:00003A4A ??1CDynBufSeqOutStream@@QAE@XZ endp
.text:00003A4A
.text:00003A4A ; ---------------------------------------------------------------------------
.text:00003A4B                 align 4
.text:00003A4B _text           ends
.text:00003A4B
.text:00003A4C ; ===========================================================================
.text:00003A4C
.text:00003A4C ; Segment type: Pure code
.text:00003A4C ; Segment permissions: Read/Execute
.text:00003A4C _text           segment para public 'CODE' use32
.text:00003A4C                 assume cs:_text
.text:00003A4C                 ;org 3A4Ch
.text:00003A4C ; COMDAT (pick any)
.text:00003A4C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A4C
.text:00003A4C ; =============== S U B R O U T I N E =======================================
.text:00003A4C
.text:00003A4C ; Attributes: bp-based frame
.text:00003A4C
.text:00003A4C ; _DWORD __thiscall CByteDynBuffer::~CByteDynBuffer(CByteDynBuffer *__hidden this)
.text:00003A4C                 public ??1CByteDynBuffer@@QAE@XZ
.text:00003A4C ??1CByteDynBuffer@@QAE@XZ proc near     ; CODE XREF: CDynBufSeqOutStream::~CDynBufSeqOutStream(void)+14p
.text:00003A4C
.text:00003A4C var_4           = dword ptr -4
.text:00003A4C
.text:00003A4C                 push    ebp
.text:00003A4D                 mov     ebp, esp
.text:00003A4F                 push    ecx
.text:00003A50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A57                 mov     [ebp+var_4], ecx
.text:00003A5A                 mov     ecx, [ebp+var_4] ; this
.text:00003A5D                 call    ?Free@CByteDynBuffer@@QAEXXZ ; CByteDynBuffer::Free(void)
.text:00003A62                 add     esp, 4
.text:00003A65                 cmp     ebp, esp
.text:00003A67                 call    __RTC_CheckEsp
.text:00003A6C                 mov     esp, ebp
.text:00003A6E                 pop     ebp
.text:00003A6F                 retn
.text:00003A6F ??1CByteDynBuffer@@QAE@XZ endp
.text:00003A6F
.text:00003A6F _text           ends
.text:00003A6F
.text:00003A70 ; ===========================================================================
.text:00003A70
.text:00003A70 ; Segment type: Pure code
.text:00003A70 ; Segment permissions: Read/Execute
.text:00003A70 _text           segment para public 'CODE' use32
.text:00003A70                 assume cs:_text
.text:00003A70                 ;org 3A70h
.text:00003A70 ; COMDAT (pick any)
.text:00003A70                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A70
.text:00003A70 ; =============== S U B R O U T I N E =======================================
.text:00003A70
.text:00003A70 ; Attributes: bp-based frame
.text:00003A70
.text:00003A70 ; void __thiscall CSequentialOutStreamSizeCount::SetStream(CSequentialOutStreamSizeCount *this, struct ISequentialOutStream *)
.text:00003A70                 public ?SetStream@CSequentialOutStreamSizeCount@@QAEXPAUISequentialOutStream@@@Z
.text:00003A70 ?SetStream@CSequentialOutStreamSizeCount@@QAEXPAUISequentialOutStream@@@Z proc near
.text:00003A70                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+78Bp
.text:00003A70
.text:00003A70 var_4           = dword ptr -4
.text:00003A70 arg_0           = dword ptr  8
.text:00003A70
.text:00003A70                 push    ebp
.text:00003A71                 mov     ebp, esp
.text:00003A73                 push    ecx
.text:00003A74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A7B                 mov     [ebp+var_4], ecx
.text:00003A7E                 mov     eax, [ebp+arg_0]
.text:00003A81                 push    eax
.text:00003A82                 mov     ecx, [ebp+var_4]
.text:00003A85                 add     ecx, 8
.text:00003A88                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:00003A8D                 add     esp, 4
.text:00003A90                 cmp     ebp, esp
.text:00003A92                 call    __RTC_CheckEsp
.text:00003A97                 mov     esp, ebp
.text:00003A99                 pop     ebp
.text:00003A9A                 retn    4
.text:00003A9A ?SetStream@CSequentialOutStreamSizeCount@@QAEXPAUISequentialOutStream@@@Z endp
.text:00003A9A
.text:00003A9A ; ---------------------------------------------------------------------------
.text:00003A9D                 align 10h
.text:00003A9D _text           ends
.text:00003A9D
.text:00003AA0 ; ===========================================================================
.text:00003AA0
.text:00003AA0 ; Segment type: Pure code
.text:00003AA0 ; Segment permissions: Read/Execute
.text:00003AA0 _text           segment para public 'CODE' use32
.text:00003AA0                 assume cs:_text
.text:00003AA0                 ;org 3AA0h
.text:00003AA0 ; COMDAT (pick any)
.text:00003AA0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003AA0
.text:00003AA0 ; =============== S U B R O U T I N E =======================================
.text:00003AA0
.text:00003AA0 ; Attributes: bp-based frame
.text:00003AA0
.text:00003AA0 ; void __thiscall CSequentialOutStreamSizeCount::Init(CSequentialOutStreamSizeCount *__hidden this)
.text:00003AA0                 public ?Init@CSequentialOutStreamSizeCount@@QAEXXZ
.text:00003AA0 ?Init@CSequentialOutStreamSizeCount@@QAEXXZ proc near
.text:00003AA0                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+796p
.text:00003AA0
.text:00003AA0 var_4           = dword ptr -4
.text:00003AA0
.text:00003AA0                 push    ebp
.text:00003AA1                 mov     ebp, esp
.text:00003AA3                 push    ecx
.text:00003AA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003AAB                 mov     [ebp+var_4], ecx
.text:00003AAE                 mov     eax, [ebp+var_4]
.text:00003AB1                 mov     dword ptr [eax+10h], 0
.text:00003AB8                 mov     dword ptr [eax+14h], 0
.text:00003ABF                 mov     esp, ebp
.text:00003AC1                 pop     ebp
.text:00003AC2                 retn
.text:00003AC2 ?Init@CSequentialOutStreamSizeCount@@QAEXXZ endp
.text:00003AC2
.text:00003AC2 ; ---------------------------------------------------------------------------
.text:00003AC3                 align 4
.text:00003AC3 _text           ends
.text:00003AC3
.text:00003AC4 ; ===========================================================================
.text:00003AC4
.text:00003AC4 ; Segment type: Pure code
.text:00003AC4 ; Segment permissions: Read/Execute
.text:00003AC4 _text           segment para public 'CODE' use32
.text:00003AC4                 assume cs:_text
.text:00003AC4                 ;org 3AC4h
.text:00003AC4 ; COMDAT (pick any)
.text:00003AC4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003AC4
.text:00003AC4 ; =============== S U B R O U T I N E =======================================
.text:00003AC4
.text:00003AC4 ; Attributes: bp-based frame
.text:00003AC4
.text:00003AC4 ; unsigned __int64 __thiscall CSequentialOutStreamSizeCount::GetSize(CSequentialOutStreamSizeCount *__hidden this)
.text:00003AC4                 public ?GetSize@CSequentialOutStreamSizeCount@@QBE_KXZ
.text:00003AC4 ?GetSize@CSequentialOutStreamSizeCount@@QBE_KXZ proc near
.text:00003AC4                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+8FEp
.text:00003AC4
.text:00003AC4 var_4           = dword ptr -4
.text:00003AC4
.text:00003AC4                 push    ebp
.text:00003AC5                 mov     ebp, esp
.text:00003AC7                 push    ecx
.text:00003AC8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003ACF                 mov     [ebp+var_4], ecx
.text:00003AD2                 mov     ecx, [ebp+var_4]
.text:00003AD5                 mov     eax, [ecx+10h]
.text:00003AD8                 mov     edx, [ecx+14h]
.text:00003ADB                 mov     esp, ebp
.text:00003ADD                 pop     ebp
.text:00003ADE                 retn
.text:00003ADE ?GetSize@CSequentialOutStreamSizeCount@@QBE_KXZ endp
.text:00003ADE
.text:00003ADE ; ---------------------------------------------------------------------------
.text:00003ADF                 align 10h
.text:00003ADF _text           ends
.text:00003ADF
.text:00003AE0 ; ===========================================================================
.text:00003AE0
.text:00003AE0 ; Segment type: Pure code
.text:00003AE0 ; Segment permissions: Read/Execute
.text:00003AE0 _text           segment para public 'CODE' use32
.text:00003AE0                 assume cs:_text
.text:00003AE0                 ;org 3AE0h
.text:00003AE0 ; COMDAT (pick any)
.text:00003AE0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003AE0
.text:00003AE0 ; =============== S U B R O U T I N E =======================================
.text:00003AE0
.text:00003AE0 ; Attributes: bp-based frame
.text:00003AE0
.text:00003AE0 ; int __thiscall NCoderMixer2::CBindInfo::FindBond_for_UnpackStream(NCoderMixer2::CBindInfo *this, unsigned int)
.text:00003AE0                 public ?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z
.text:00003AE0 ?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z proc near
.text:00003AE0                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+A58p
.text:00003AE0                                         ; NCoderMixer2::CBindInfo::SetUnpackCoder(void)+48p
.text:00003AE0
.text:00003AE0 var_8           = dword ptr -8
.text:00003AE0 var_4           = dword ptr -4
.text:00003AE0 arg_0           = dword ptr  8
.text:00003AE0
.text:00003AE0                 push    ebp
.text:00003AE1                 mov     ebp, esp
.text:00003AE3                 sub     esp, 8
.text:00003AE6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003AED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003AF4                 mov     [ebp+var_4], ecx
.text:00003AF7                 mov     [ebp+var_8], 0
.text:00003AFE                 jmp     short loc_3B09
.text:00003B00 ; ---------------------------------------------------------------------------
.text:00003B00
.text:00003B00 loc_3B00:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_UnpackStream(uint):loc_3B35j
.text:00003B00                 mov     eax, [ebp+var_8]
.text:00003B03                 add     eax, 1
.text:00003B06                 mov     [ebp+var_8], eax
.text:00003B09
.text:00003B09 loc_3B09:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_UnpackStream(uint)+1Ej
.text:00003B09                 mov     ecx, [ebp+var_4]
.text:00003B0C                 add     ecx, 0Ch
.text:00003B0F                 call    ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size(void)
.text:00003B14                 cmp     [ebp+var_8], eax
.text:00003B17                 jnb     short loc_3B37
.text:00003B19                 mov     ecx, [ebp+var_8]
.text:00003B1C                 push    ecx
.text:00003B1D                 mov     ecx, [ebp+var_4]
.text:00003B20                 add     ecx, 0Ch
.text:00003B23                 call    ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[](uint)
.text:00003B28                 mov     edx, [eax+4]
.text:00003B2B                 cmp     edx, [ebp+arg_0]
.text:00003B2E                 jnz     short loc_3B35
.text:00003B30                 mov     eax, [ebp+var_8]
.text:00003B33                 jmp     short loc_3B3A
.text:00003B35 ; ---------------------------------------------------------------------------
.text:00003B35
.text:00003B35 loc_3B35:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_UnpackStream(uint)+4Ej
.text:00003B35                 jmp     short loc_3B00
.text:00003B37 ; ---------------------------------------------------------------------------
.text:00003B37
.text:00003B37 loc_3B37:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_UnpackStream(uint)+37j
.text:00003B37                 or      eax, 0FFFFFFFFh
.text:00003B3A
.text:00003B3A loc_3B3A:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_UnpackStream(uint)+53j
.text:00003B3A                 add     esp, 8
.text:00003B3D                 cmp     ebp, esp
.text:00003B3F                 call    __RTC_CheckEsp
.text:00003B44                 mov     esp, ebp
.text:00003B46                 pop     ebp
.text:00003B47                 retn    4
.text:00003B47 ?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z endp
.text:00003B47
.text:00003B47 ; ---------------------------------------------------------------------------
.text:00003B4A                 align 4
.text:00003B4A _text           ends
.text:00003B4A
.text:00003B4C ; ===========================================================================
.text:00003B4C
.text:00003B4C ; Segment type: Pure code
.text:00003B4C ; Segment permissions: Read/Execute
.text:00003B4C _text           segment para public 'CODE' use32
.text:00003B4C                 assume cs:_text
.text:00003B4C                 ;org 3B4Ch
.text:00003B4C ; COMDAT (pick any)
.text:00003B4C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B4C
.text:00003B4C ; =============== S U B R O U T I N E =======================================
.text:00003B4C
.text:00003B4C ; Attributes: bp-based frame
.text:00003B4C
.text:00003B4C ; struct IUnknown *__thiscall NCoderMixer2::CCoder::GetUnknown(NCoderMixer2::CCoder *__hidden this)
.text:00003B4C                 public ?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ
.text:00003B4C ?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ proc near
.text:00003B4C                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+362p
.text:00003B4C
.text:00003B4C var_8           = dword ptr -8
.text:00003B4C var_4           = dword ptr -4
.text:00003B4C
.text:00003B4C                 push    ebp
.text:00003B4D                 mov     ebp, esp
.text:00003B4F                 sub     esp, 8
.text:00003B52                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003B59                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B60                 mov     [ebp+var_4], ecx
.text:00003B63                 mov     ecx, [ebp+var_4]
.text:00003B66                 call    ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *(void)
.text:00003B6B                 test    eax, eax
.text:00003B6D                 jz      short loc_3B7C
.text:00003B6F                 mov     ecx, [ebp+var_4]
.text:00003B72                 call    ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *(void)
.text:00003B77                 mov     [ebp+var_8], eax
.text:00003B7A                 jmp     short loc_3B8A
.text:00003B7C ; ---------------------------------------------------------------------------
.text:00003B7C
.text:00003B7C loc_3B7C:                               ; CODE XREF: NCoderMixer2::CCoder::GetUnknown(void)+21j
.text:00003B7C                 mov     ecx, [ebp+var_4]
.text:00003B7F                 add     ecx, 4
.text:00003B82                 call    ??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ; CMyComPtr<ICompressCoder2>::operator ICompressCoder2 *(void)
.text:00003B87                 mov     [ebp+var_8], eax
.text:00003B8A
.text:00003B8A loc_3B8A:                               ; CODE XREF: NCoderMixer2::CCoder::GetUnknown(void)+2Ej
.text:00003B8A                 mov     eax, [ebp+var_8]
.text:00003B8D                 add     esp, 8
.text:00003B90                 cmp     ebp, esp
.text:00003B92                 call    __RTC_CheckEsp
.text:00003B97                 mov     esp, ebp
.text:00003B99                 pop     ebp
.text:00003B9A                 retn
.text:00003B9A ?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ endp
.text:00003B9A
.text:00003B9A ; ---------------------------------------------------------------------------
.text:00003B9B                 align 4
.text:00003B9B _text           ends
.text:00003B9B
.text:00003B9C ; ===========================================================================
.text:00003B9C
.text:00003B9C ; Segment type: Pure code
.text:00003B9C ; Segment permissions: Read/Execute
.text:00003B9C _text           segment para public 'CODE' use32
.text:00003B9C                 assume cs:_text
.text:00003B9C                 ;org 3B9Ch
.text:00003B9C ; COMDAT (pick any)
.text:00003B9C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B9C
.text:00003B9C ; =============== S U B R O U T I N E =======================================
.text:00003B9C
.text:00003B9C ; Attributes: bp-based frame
.text:00003B9C
.text:00003B9C ; _DWORD __thiscall NArchive::N7z::CMtEncMultiProgress::CMtEncMultiProgress(NArchive::N7z::CMtEncMultiProgress *__hidden this)
.text:00003B9C                 public ??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ
.text:00003B9C ??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ proc near
.text:00003B9C                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+5DBp
.text:00003B9C
.text:00003B9C var_10          = dword ptr -10h
.text:00003B9C var_C           = dword ptr -0Ch
.text:00003B9C var_4           = dword ptr -4
.text:00003B9C
.text:00003B9C                 push    ebp
.text:00003B9D                 mov     ebp, esp
.text:00003B9F                 push    0FFFFFFFFh
.text:00003BA1                 push    offset __ehhandler$??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ
.text:00003BA6                 mov     eax, large fs:0
.text:00003BAC                 push    eax
.text:00003BAD                 push    ecx
.text:00003BAE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003BB5                 mov     eax, dword ptr ds:___security_cookie
.text:00003BBA                 xor     eax, ebp
.text:00003BBC                 push    eax
.text:00003BBD                 lea     eax, [ebp+var_C]
.text:00003BC0                 mov     large fs:0, eax
.text:00003BC6                 mov     [ebp+var_10], ecx
.text:00003BC9                 mov     ecx, [ebp+var_10] ; this
.text:00003BCC                 call    ??0ICompressProgressInfo@@QAE@XZ ; ICompressProgressInfo::ICompressProgressInfo(void)
.text:00003BD1                 mov     ecx, [ebp+var_10]
.text:00003BD4                 add     ecx, 4          ; this
.text:00003BD7                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00003BDC                 mov     eax, [ebp+var_10]
.text:00003BDF                 mov     dword ptr [eax], offset ??_7CMtEncMultiProgress@N7z@NArchive@@6B@ ; const NArchive::N7z::CMtEncMultiProgress::`vftable'
.text:00003BE5                 mov     ecx, [ebp+var_10]
.text:00003BE8                 add     ecx, 8
.text:00003BEB                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(void)
.text:00003BF0                 mov     [ebp+var_4], 0
.text:00003BF7                 mov     ecx, [ebp+var_10]
.text:00003BFA                 add     ecx, 0Ch        ; this
.text:00003BFD                 call    ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)
.text:00003C02                 mov     ecx, [ebp+var_10]
.text:00003C05                 mov     dword ptr [ecx+28h], 0
.text:00003C0C                 mov     dword ptr [ecx+2Ch], 0
.text:00003C13                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003C1A                 mov     eax, [ebp+var_10]
.text:00003C1D                 mov     ecx, [ebp+var_C]
.text:00003C20                 mov     large fs:0, ecx
.text:00003C27                 pop     ecx
.text:00003C28                 add     esp, 10h
.text:00003C2B                 cmp     ebp, esp
.text:00003C2D                 call    __RTC_CheckEsp
.text:00003C32                 mov     esp, ebp
.text:00003C34                 pop     ebp
.text:00003C35                 retn
.text:00003C35 ??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ endp
.text:00003C35
.text:00003C35 ; ---------------------------------------------------------------------------
.text:00003C36                 align 4
.text:00003C36 _text           ends
.text:00003C36
.text$x:00003C38 ; ===========================================================================
.text$x:00003C38
.text$x:00003C38 ; Segment type: Pure code
.text$x:00003C38 ; Segment permissions: Read/Execute
.text$x:00003C38 _text$x         segment para public 'CODE' use32
.text$x:00003C38                 assume cs:_text$x
.text$x:00003C38                 ;org 3C38h
.text$x:00003C38 ; COMDAT (pick associative to section at 3B9C)
.text$x:00003C38                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00003C38
.text$x:00003C38 ; =============== S U B R O U T I N E =======================================
.text$x:00003C38
.text$x:00003C38
.text$x:00003C38 __unwindfunclet$??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00003C38                                         ; DATA XREF: .xdata$x:00003C78o
.text$x:00003C38                 mov     ecx, [ebp-10h]
.text$x:00003C3B                 add     ecx, 8
.text$x:00003C3E                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:00003C3E __unwindfunclet$??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00003C3E
.text$x:00003C43
.text$x:00003C43 ; =============== S U B R O U T I N E =======================================
.text$x:00003C43
.text$x:00003C43
.text$x:00003C43 __ehhandler$??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ proc near
.text$x:00003C43                                         ; DATA XREF: NArchive::N7z::CMtEncMultiProgress::CMtEncMultiProgress(void)+5o
.text$x:00003C43
.text$x:00003C43 arg_4           = dword ptr  8
.text$x:00003C43
.text$x:00003C43                 mov     edx, [esp+arg_4]
.text$x:00003C47                 lea     eax, [edx+0Ch]
.text$x:00003C4A                 mov     ecx, [edx-8]
.text$x:00003C4D                 xor     ecx, eax
.text$x:00003C4F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C54                 mov     eax, offset __ehfuncinfo$??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ
.text$x:00003C59                 jmp     ___CxxFrameHandler3
.text$x:00003C59 __ehhandler$??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ endp
.text$x:00003C59
.text$x:00003C59 ; ---------------------------------------------------------------------------
.text$x:00003C5E                 align 10h
.text$x:00003C5E _text$x         ends
.text$x:00003C5E
.rdata:00003C60 ; ===========================================================================
.rdata:00003C60
.rdata:00003C60 ; Segment type: Pure data
.rdata:00003C60 ; Segment permissions: Read
.rdata:00003C60 _rdata          segment dword public 'DATA' use32
.rdata:00003C60                 assume cs:_rdata
.rdata:00003C60                 ;org 3C60h
.rdata:00003C60 ; COMDAT (pick largest)
.rdata:00003C60                 dd offset ??_R4CMtEncMultiProgress@N7z@NArchive@@6B@ ; const NArchive::N7z::CMtEncMultiProgress::`RTTI Complete Object Locator'
.rdata:00003C64                 public ??_7CMtEncMultiProgress@N7z@NArchive@@6B@
.rdata:00003C64 ; const NArchive::N7z::CMtEncMultiProgress::`vftable'
.rdata:00003C64 ??_7CMtEncMultiProgress@N7z@NArchive@@6B@ dd offset ?QueryInterface@CMtEncMultiProgress@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:00003C64                                         ; DATA XREF: NArchive::N7z::CMtEncMultiProgress::CMtEncMultiProgress(void)+43o
.rdata:00003C64                                         ; NArchive::N7z::CMtEncMultiProgress::QueryInterface(_GUID const &,void * *)
.rdata:00003C68                 dd offset ?AddRef@CMtEncMultiProgress@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CMtEncMultiProgress::AddRef(void)
.rdata:00003C6C                 dd offset ?Release@CMtEncMultiProgress@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CMtEncMultiProgress::Release(void)
.rdata:00003C70                 dd offset ?SetRatioInfo@CMtEncMultiProgress@N7z@NArchive@@UAGJPB_K0@Z ; NArchive::N7z::CMtEncMultiProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)
.rdata:00003C70 _rdata          ends
.rdata:00003C70
.xdata$x:00003C74 ; ===========================================================================
.xdata$x:00003C74
.xdata$x:00003C74 ; Segment type: Pure data
.xdata$x:00003C74 ; Segment permissions: Read
.xdata$x:00003C74 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003C74                 assume cs:_xdata$x
.xdata$x:00003C74                 ;org 3C74h
.xdata$x:00003C74 ; COMDAT (pick associative to section at 3B9C)
.xdata$x:00003C74 __unwindtable$??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003C74                                         ; DATA XREF: .xdata$x:00003C84o
.xdata$x:00003C75                 db 0FFh
.xdata$x:00003C76                 db 0FFh
.xdata$x:00003C77                 db 0FFh
.xdata$x:00003C78                 dd offset __unwindfunclet$??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ$0
.xdata$x:00003C7C __ehfuncinfo$??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003C7C                                         ; DATA XREF: __ehhandler$??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00003C7D                 db    5
.xdata$x:00003C7E                 db  93h ; ô
.xdata$x:00003C7F                 db  19h
.xdata$x:00003C80                 db    1
.xdata$x:00003C81                 db    0
.xdata$x:00003C82                 db    0
.xdata$x:00003C83                 db    0
.xdata$x:00003C84                 dd offset __unwindtable$??0CMtEncMultiProgress@N7z@NArchive@@QAE@XZ
.xdata$x:00003C88                 db    0
.xdata$x:00003C89                 db    0
.xdata$x:00003C8A                 db    0
.xdata$x:00003C8B                 db    0
.xdata$x:00003C8C                 db    0
.xdata$x:00003C8D                 db    0
.xdata$x:00003C8E                 db    0
.xdata$x:00003C8F                 db    0
.xdata$x:00003C90                 db    0
.xdata$x:00003C91                 db    0
.xdata$x:00003C92                 db    0
.xdata$x:00003C93                 db    0
.xdata$x:00003C94                 db    0
.xdata$x:00003C95                 db    0
.xdata$x:00003C96                 db    0
.xdata$x:00003C97                 db    0
.xdata$x:00003C98                 db    0
.xdata$x:00003C99                 db    0
.xdata$x:00003C9A                 db    0
.xdata$x:00003C9B                 db    0
.xdata$x:00003C9C                 db    1
.xdata$x:00003C9D                 db    0
.xdata$x:00003C9E                 db    0
.xdata$x:00003C9F                 db    0
.xdata$x:00003C9F _xdata$x        ends
.xdata$x:00003C9F
.rdata$r:00003CA0 ; ===========================================================================
.rdata$r:00003CA0
.rdata$r:00003CA0 ; Segment type: Pure data
.rdata$r:00003CA0 ; Segment permissions: Read
.rdata$r:00003CA0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003CA0                 assume cs:_rdata$r
.rdata$r:00003CA0                 ;org 3CA0h
.rdata$r:00003CA0 ; COMDAT (pick any)
.rdata$r:00003CA0                 public ??_R4CMtEncMultiProgress@N7z@NArchive@@6B@
.rdata$r:00003CA0 ; const NArchive::N7z::CMtEncMultiProgress::`RTTI Complete Object Locator'
.rdata$r:00003CA0 ??_R4CMtEncMultiProgress@N7z@NArchive@@6B@ db    0
.rdata$r:00003CA0                                         ; DATA XREF: .rdata:00003C60o
.rdata$r:00003CA1                 db    0
.rdata$r:00003CA2                 db    0
.rdata$r:00003CA3                 db    0
.rdata$r:00003CA4                 db    0
.rdata$r:00003CA5                 db    0
.rdata$r:00003CA6                 db    0
.rdata$r:00003CA7                 db    0
.rdata$r:00003CA8                 db    0
.rdata$r:00003CA9                 db    0
.rdata$r:00003CAA                 db    0
.rdata$r:00003CAB                 db    0
.rdata$r:00003CAC                 dd offset ??_R0?AVCMtEncMultiProgress@N7z@NArchive@@@8 ; NArchive::N7z::CMtEncMultiProgress `RTTI Type Descriptor'
.rdata$r:00003CB0                 dd offset ??_R3CMtEncMultiProgress@N7z@NArchive@@8 ; NArchive::N7z::CMtEncMultiProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003CB0 _rdata$r        ends
.rdata$r:00003CB0
.data:00003CB4 ; ===========================================================================
.data:00003CB4
.data:00003CB4 ; Segment type: Pure data
.data:00003CB4 ; Segment permissions: Read/Write
.data:00003CB4 _data           segment dword public 'DATA' use32
.data:00003CB4                 assume cs:_data
.data:00003CB4                 ;org 3CB4h
.data:00003CB4 ; COMDAT (pick any)
.data:00003CB4                 public ??_R0?AVCMtEncMultiProgress@N7z@NArchive@@@8
.data:00003CB4 ; class NArchive::N7z::CMtEncMultiProgress `RTTI Type Descriptor'
.data:00003CB4 ??_R0?AVCMtEncMultiProgress@N7z@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00003CB4                                         ; DATA XREF: .rdata$r:00003CACo
.data:00003CB4                                         ; .rdata$r:NArchive::N7z::CMtEncMultiProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003CB4                                         ; const type_info::`vftable'
.data:00003CB8                 db    0
.data:00003CB9                 db    0
.data:00003CBA                 db    0
.data:00003CBB                 db    0
.data:00003CBC                 db  2Eh ; .
.data:00003CBD                 db  3Fh ; ?
.data:00003CBE                 db  41h ; A
.data:00003CBF                 db  56h ; V
.data:00003CC0                 db  43h ; C
.data:00003CC1                 db  4Dh ; M
.data:00003CC2                 db  74h ; t
.data:00003CC3                 db  45h ; E
.data:00003CC4                 db  6Eh ; n
.data:00003CC5                 db  63h ; c
.data:00003CC6                 db  4Dh ; M
.data:00003CC7                 db  75h ; u
.data:00003CC8                 db  6Ch ; l
.data:00003CC9                 db  74h ; t
.data:00003CCA                 db  69h ; i
.data:00003CCB                 db  50h ; P
.data:00003CCC                 db  72h ; r
.data:00003CCD                 db  6Fh ; o
.data:00003CCE                 db  67h ; g
.data:00003CCF                 db  72h ; r
.data:00003CD0                 db  65h ; e
.data:00003CD1                 db  73h ; s
.data:00003CD2                 db  73h ; s
.data:00003CD3                 db  40h ; @
.data:00003CD4                 db  4Eh ; N
.data:00003CD5                 db  37h ; 7
.data:00003CD6                 db  7Ah ; z
.data:00003CD7                 db  40h ; @
.data:00003CD8                 db  4Eh ; N
.data:00003CD9                 db  41h ; A
.data:00003CDA                 db  72h ; r
.data:00003CDB                 db  63h ; c
.data:00003CDC                 db  68h ; h
.data:00003CDD                 db  69h ; i
.data:00003CDE                 db  76h ; v
.data:00003CDF                 db  65h ; e
.data:00003CE0                 db  40h ; @
.data:00003CE1                 db  40h ; @
.data:00003CE2                 db    0
.data:00003CE3                 align 4
.data:00003CE3 _data           ends
.data:00003CE3
.rdata$r:00003CE4 ; ===========================================================================
.rdata$r:00003CE4
.rdata$r:00003CE4 ; Segment type: Pure data
.rdata$r:00003CE4 ; Segment permissions: Read
.rdata$r:00003CE4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003CE4                 assume cs:_rdata$r
.rdata$r:00003CE4                 ;org 3CE4h
.rdata$r:00003CE4 ; COMDAT (pick any)
.rdata$r:00003CE4                 public ??_R3CMtEncMultiProgress@N7z@NArchive@@8
.rdata$r:00003CE4 ; NArchive::N7z::CMtEncMultiProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003CE4 ??_R3CMtEncMultiProgress@N7z@NArchive@@8 db    0
.rdata$r:00003CE4                                         ; DATA XREF: .rdata$r:00003CB0o
.rdata$r:00003CE4                                         ; .rdata$r:00003D20o
.rdata$r:00003CE5                 db    0
.rdata$r:00003CE6                 db    0
.rdata$r:00003CE7                 db    0
.rdata$r:00003CE8                 db    1
.rdata$r:00003CE9                 db    0
.rdata$r:00003CEA                 db    0
.rdata$r:00003CEB                 db    0
.rdata$r:00003CEC                 db    4
.rdata$r:00003CED                 db    0
.rdata$r:00003CEE                 db    0
.rdata$r:00003CEF                 db    0
.rdata$r:00003CF0                 dd offset ??_R2CMtEncMultiProgress@N7z@NArchive@@8 ; NArchive::N7z::CMtEncMultiProgress::`RTTI Base Class Array'
.rdata$r:00003CF0 _rdata$r        ends
.rdata$r:00003CF0
.rdata$r:00003CF4 ; ===========================================================================
.rdata$r:00003CF4
.rdata$r:00003CF4 ; Segment type: Pure data
.rdata$r:00003CF4 ; Segment permissions: Read
.rdata$r:00003CF4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003CF4                 assume cs:_rdata$r
.rdata$r:00003CF4                 ;org 3CF4h
.rdata$r:00003CF4 ; COMDAT (pick any)
.rdata$r:00003CF4                 public ??_R2CMtEncMultiProgress@N7z@NArchive@@8
.rdata$r:00003CF4 ; NArchive::N7z::CMtEncMultiProgress::`RTTI Base Class Array'
.rdata$r:00003CF4 ??_R2CMtEncMultiProgress@N7z@NArchive@@8 dd offset ??_R1A@?0A@EA@CMtEncMultiProgress@N7z@NArchive@@8
.rdata$r:00003CF4                                         ; DATA XREF: .rdata$r:00003CF0o
.rdata$r:00003CF4                                         ; NArchive::N7z::CMtEncMultiProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003CF8                 dd offset ??_R1A@?0A@EA@ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003CFC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003D00                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00003D04                 db    0
.rdata$r:00003D05                 align 4
.rdata$r:00003D05 _rdata$r        ends
.rdata$r:00003D05
.rdata$r:00003D08 ; ===========================================================================
.rdata$r:00003D08
.rdata$r:00003D08 ; Segment type: Pure data
.rdata$r:00003D08 ; Segment permissions: Read
.rdata$r:00003D08 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D08                 assume cs:_rdata$r
.rdata$r:00003D08                 ;org 3D08h
.rdata$r:00003D08 ; COMDAT (pick any)
.rdata$r:00003D08                 public ??_R1A@?0A@EA@CMtEncMultiProgress@N7z@NArchive@@8
.rdata$r:00003D08 ; NArchive::N7z::CMtEncMultiProgress::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003D08 ??_R1A@?0A@EA@CMtEncMultiProgress@N7z@NArchive@@8 dd offset ??_R0?AVCMtEncMultiProgress@N7z@NArchive@@@8
.rdata$r:00003D08                                         ; DATA XREF: .rdata$r:NArchive::N7z::CMtEncMultiProgress::`RTTI Base Class Array'o
.rdata$r:00003D08                                         ; NArchive::N7z::CMtEncMultiProgress `RTTI Type Descriptor'
.rdata$r:00003D0C                 db    3
.rdata$r:00003D0D                 db    0
.rdata$r:00003D0E                 db    0
.rdata$r:00003D0F                 db    0
.rdata$r:00003D10                 db    0
.rdata$r:00003D11                 db    0
.rdata$r:00003D12                 db    0
.rdata$r:00003D13                 db    0
.rdata$r:00003D14                 db 0FFh
.rdata$r:00003D15                 db 0FFh
.rdata$r:00003D16                 db 0FFh
.rdata$r:00003D17                 db 0FFh
.rdata$r:00003D18                 db    0
.rdata$r:00003D19                 db    0
.rdata$r:00003D1A                 db    0
.rdata$r:00003D1B                 db    0
.rdata$r:00003D1C                 db  40h ; @
.rdata$r:00003D1D                 db    0
.rdata$r:00003D1E                 db    0
.rdata$r:00003D1F                 db    0
.rdata$r:00003D20                 dd offset ??_R3CMtEncMultiProgress@N7z@NArchive@@8 ; NArchive::N7z::CMtEncMultiProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003D20 _rdata$r        ends
.rdata$r:00003D20
.rdata$r:00003D24 ; ===========================================================================
.rdata$r:00003D24
.rdata$r:00003D24 ; Segment type: Pure data
.rdata$r:00003D24 ; Segment permissions: Read
.rdata$r:00003D24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D24                 assume cs:_rdata$r
.rdata$r:00003D24                 ;org 3D24h
.rdata$r:00003D24 ; COMDAT (pick any)
.rdata$r:00003D24                 public ??_R1A@?0A@EA@ICompressProgressInfo@@8
.rdata$r:00003D24 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003D24 ??_R1A@?0A@EA@ICompressProgressInfo@@8 dd offset ??_R0?AUICompressProgressInfo@@@8
.rdata$r:00003D24                                         ; DATA XREF: .rdata$r:00003CF8o
.rdata$r:00003D24                                         ; .rdata$r:ICompressProgressInfo::`RTTI Base Class Array'o
.rdata$r:00003D24                                         ; ICompressProgressInfo `RTTI Type Descriptor'
.rdata$r:00003D28                 db    1
.rdata$r:00003D29                 db    0
.rdata$r:00003D2A                 db    0
.rdata$r:00003D2B                 db    0
.rdata$r:00003D2C                 db    0
.rdata$r:00003D2D                 db    0
.rdata$r:00003D2E                 db    0
.rdata$r:00003D2F                 db    0
.rdata$r:00003D30                 db 0FFh
.rdata$r:00003D31                 db 0FFh
.rdata$r:00003D32                 db 0FFh
.rdata$r:00003D33                 db 0FFh
.rdata$r:00003D34                 db    0
.rdata$r:00003D35                 db    0
.rdata$r:00003D36                 db    0
.rdata$r:00003D37                 db    0
.rdata$r:00003D38                 db  40h ; @
.rdata$r:00003D39                 db    0
.rdata$r:00003D3A                 db    0
.rdata$r:00003D3B                 db    0
.rdata$r:00003D3C                 dd offset ??_R3ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003D3C _rdata$r        ends
.rdata$r:00003D3C
.data:00003D40 ; ===========================================================================
.data:00003D40
.data:00003D40 ; Segment type: Pure data
.data:00003D40 ; Segment permissions: Read/Write
.data:00003D40 _data           segment dword public 'DATA' use32
.data:00003D40                 assume cs:_data
.data:00003D40                 ;org 3D40h
.data:00003D40 ; COMDAT (pick any)
.data:00003D40                 public ??_R0?AUICompressProgressInfo@@@8
.data:00003D40 ; struct ICompressProgressInfo `RTTI Type Descriptor'
.data:00003D40 ??_R0?AUICompressProgressInfo@@@8 dd offset ??_7type_info@@6B@
.data:00003D40                                         ; DATA XREF: .rdata$r:ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003D40                                         ; .rdata$r:00003F00o
.data:00003D40                                         ; const type_info::`vftable'
.data:00003D44                 align 8
.data:00003D48 a_?auicompressp db '.?AUICompressProgressInfo@@',0
.data:00003D48 _data           ends
.data:00003D48
.rdata$r:00003D64 ; ===========================================================================
.rdata$r:00003D64
.rdata$r:00003D64 ; Segment type: Pure data
.rdata$r:00003D64 ; Segment permissions: Read
.rdata$r:00003D64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D64                 assume cs:_rdata$r
.rdata$r:00003D64                 ;org 3D64h
.rdata$r:00003D64 ; COMDAT (pick any)
.rdata$r:00003D64                 public ??_R3ICompressProgressInfo@@8
.rdata$r:00003D64 ; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003D64 ??_R3ICompressProgressInfo@@8 db    0   ; DATA XREF: .rdata$r:00003D3Co
.rdata$r:00003D64                                         ; .rdata$r:00003F04o
.rdata$r:00003D65                 db    0
.rdata$r:00003D66                 db    0
.rdata$r:00003D67                 db    0
.rdata$r:00003D68                 db    0
.rdata$r:00003D69                 db    0
.rdata$r:00003D6A                 db    0
.rdata$r:00003D6B                 db    0
.rdata$r:00003D6C                 db    2
.rdata$r:00003D6D                 db    0
.rdata$r:00003D6E                 db    0
.rdata$r:00003D6F                 db    0
.rdata$r:00003D70                 dd offset ??_R2ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Base Class Array'
.rdata$r:00003D70 _rdata$r        ends
.rdata$r:00003D70
.rdata$r:00003D74 ; ===========================================================================
.rdata$r:00003D74
.rdata$r:00003D74 ; Segment type: Pure data
.rdata$r:00003D74 ; Segment permissions: Read
.rdata$r:00003D74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D74                 assume cs:_rdata$r
.rdata$r:00003D74                 ;org 3D74h
.rdata$r:00003D74 ; COMDAT (pick any)
.rdata$r:00003D74                 public ??_R2ICompressProgressInfo@@8
.rdata$r:00003D74 ; ICompressProgressInfo::`RTTI Base Class Array'
.rdata$r:00003D74 ??_R2ICompressProgressInfo@@8 dd offset ??_R1A@?0A@EA@ICompressProgressInfo@@8
.rdata$r:00003D74                                         ; DATA XREF: .rdata$r:00003D70o
.rdata$r:00003D74                                         ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003D78                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003D7C                 db    0
.rdata$r:00003D7D                 align 10h
.rdata$r:00003D7D _rdata$r        ends
.rdata$r:00003D7D
.text:00003D80 ; ===========================================================================
.text:00003D80
.text:00003D80 ; Segment type: Pure code
.text:00003D80 ; Segment permissions: Read/Execute
.text:00003D80 _text           segment para public 'CODE' use32
.text:00003D80                 assume cs:_text
.text:00003D80                 ;org 3D80h
.text:00003D80 ; COMDAT (pick any)
.text:00003D80                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003D80
.text:00003D80 ; =============== S U B R O U T I N E =======================================
.text:00003D80
.text:00003D80 ; Attributes: bp-based frame
.text:00003D80
.text:00003D80 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSection::CCriticalSection(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00003D80                 public ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ
.text:00003D80 ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
.text:00003D80                                         ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::CMtEncMultiProgress(void)+61p
.text:00003D80
.text:00003D80 var_4           = dword ptr -4
.text:00003D80
.text:00003D80                 push    ebp
.text:00003D81                 mov     ebp, esp
.text:00003D83                 push    ecx
.text:00003D84                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D8B                 mov     [ebp+var_4], ecx
.text:00003D8E                 mov     eax, [ebp+var_4]
.text:00003D91                 push    eax
.text:00003D92                 call    _CriticalSection_Init@4 ; CriticalSection_Init(x)
.text:00003D97                 mov     eax, [ebp+var_4]
.text:00003D9A                 add     esp, 4
.text:00003D9D                 cmp     ebp, esp
.text:00003D9F                 call    __RTC_CheckEsp
.text:00003DA4                 mov     esp, ebp
.text:00003DA6                 pop     ebp
.text:00003DA7                 retn
.text:00003DA7 ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ endp
.text:00003DA7
.text:00003DA7 _text           ends
.text:00003DA7
.text:00003DA8 ; ===========================================================================
.text:00003DA8
.text:00003DA8 ; Segment type: Pure code
.text:00003DA8 ; Segment permissions: Read/Execute
.text:00003DA8 _text           segment para public 'CODE' use32
.text:00003DA8                 assume cs:_text
.text:00003DA8                 ;org 3DA8h
.text:00003DA8 ; COMDAT (pick any)
.text:00003DA8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003DA8
.text:00003DA8 ; =============== S U B R O U T I N E =======================================
.text:00003DA8
.text:00003DA8 ; Attributes: bp-based frame
.text:00003DA8
.text:00003DA8 ; __int32 __stdcall NArchive::N7z::CMtEncMultiProgress::QueryInterface(NArchive::N7z::CMtEncMultiProgress *this, const struct _GUID *Buf1, void **)
.text:00003DA8                 public ?QueryInterface@CMtEncMultiProgress@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00003DA8 ?QueryInterface@CMtEncMultiProgress@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00003DA8                                         ; DATA XREF: .rdata:const NArchive::N7z::CMtEncMultiProgress::`vftable'o
.text:00003DA8
.text:00003DA8 this            = dword ptr  8
.text:00003DA8 Buf1            = dword ptr  0Ch
.text:00003DA8 arg_8           = dword ptr  10h
.text:00003DA8
.text:00003DA8                 push    ebp
.text:00003DA9                 mov     ebp, esp
.text:00003DAB                 mov     eax, [ebp+arg_8]
.text:00003DAE                 mov     dword ptr [eax], 0
.text:00003DB4                 push    offset _IID_IUnknown ; Buf2
.text:00003DB9                 mov     ecx, [ebp+Buf1]
.text:00003DBC                 push    ecx             ; Buf1
.text:00003DBD                 call    ___@8           ; __(x,x)
.text:00003DC2                 test    eax, eax
.text:00003DC4                 jz      short loc_3DD0
.text:00003DC6                 mov     edx, [ebp+arg_8]
.text:00003DC9                 mov     eax, [ebp+this]
.text:00003DCC                 mov     [edx], eax
.text:00003DCE                 jmp     short loc_3DF3
.text:00003DD0 ; ---------------------------------------------------------------------------
.text:00003DD0
.text:00003DD0 loc_3DD0:                               ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::QueryInterface(_GUID const &,void * *)+1Cj
.text:00003DD0                 push    offset _IID_ICompressProgressInfo ; Buf2
.text:00003DD5                 mov     ecx, [ebp+Buf1]
.text:00003DD8                 push    ecx             ; Buf1
.text:00003DD9                 call    ___@8           ; __(x,x)
.text:00003DDE                 test    eax, eax
.text:00003DE0                 jz      short loc_3DEC
.text:00003DE2                 mov     edx, [ebp+arg_8]
.text:00003DE5                 mov     eax, [ebp+this]
.text:00003DE8                 mov     [edx], eax
.text:00003DEA                 jmp     short loc_3DF3
.text:00003DEC ; ---------------------------------------------------------------------------
.text:00003DEC
.text:00003DEC loc_3DEC:                               ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::QueryInterface(_GUID const &,void * *)+38j
.text:00003DEC                 mov     eax, 80004002h
.text:00003DF1                 jmp     short loc_3E04
.text:00003DF3 ; ---------------------------------------------------------------------------
.text:00003DF3
.text:00003DF3 loc_3DF3:                               ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::QueryInterface(_GUID const &,void * *)+26j
.text:00003DF3                                         ; NArchive::N7z::CMtEncMultiProgress::QueryInterface(_GUID const &,void * *)+42j
.text:00003DF3                 mov     ecx, [ebp+this]
.text:00003DF6                 mov     edx, [ecx+4]
.text:00003DF9                 add     edx, 1
.text:00003DFC                 mov     eax, [ebp+this]
.text:00003DFF                 mov     [eax+4], edx
.text:00003E02                 xor     eax, eax
.text:00003E04
.text:00003E04 loc_3E04:                               ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::QueryInterface(_GUID const &,void * *)+49j
.text:00003E04                 cmp     ebp, esp
.text:00003E06                 call    __RTC_CheckEsp
.text:00003E0B                 pop     ebp
.text:00003E0C                 retn    0Ch
.text:00003E0C ?QueryInterface@CMtEncMultiProgress@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:00003E0C
.text:00003E0C ; ---------------------------------------------------------------------------
.text:00003E0F                 align 10h
.text:00003E0F _text           ends
.text:00003E0F
.text:00003E10 ; ===========================================================================
.text:00003E10
.text:00003E10 ; Segment type: Pure code
.text:00003E10 ; Segment permissions: Read/Execute
.text:00003E10 _text           segment para public 'CODE' use32
.text:00003E10                 assume cs:_text
.text:00003E10                 ;org 3E10h
.text:00003E10 ; COMDAT (pick any)
.text:00003E10                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003E10
.text:00003E10 ; =============== S U B R O U T I N E =======================================
.text:00003E10
.text:00003E10 ; Attributes: bp-based frame
.text:00003E10
.text:00003E10 ; unsigned __int32 __stdcall NArchive::N7z::CMtEncMultiProgress::AddRef(NArchive::N7z::CMtEncMultiProgress *this)
.text:00003E10                 public ?AddRef@CMtEncMultiProgress@N7z@NArchive@@UAGKXZ
.text:00003E10 ?AddRef@CMtEncMultiProgress@N7z@NArchive@@UAGKXZ proc near
.text:00003E10                                         ; DATA XREF: .rdata:00003C68o
.text:00003E10
.text:00003E10 var_4           = dword ptr -4
.text:00003E10 this            = dword ptr  8
.text:00003E10
.text:00003E10                 push    ebp
.text:00003E11                 mov     ebp, esp
.text:00003E13                 push    ecx
.text:00003E14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E1B                 mov     eax, [ebp+this]
.text:00003E1E                 mov     ecx, [eax+4]
.text:00003E21                 add     ecx, 1
.text:00003E24                 mov     [ebp+var_4], ecx
.text:00003E27                 mov     edx, [ebp+this]
.text:00003E2A                 mov     eax, [ebp+var_4]
.text:00003E2D                 mov     [edx+4], eax
.text:00003E30                 mov     eax, [ebp+var_4]
.text:00003E33                 mov     esp, ebp
.text:00003E35                 pop     ebp
.text:00003E36                 retn    4
.text:00003E36 ?AddRef@CMtEncMultiProgress@N7z@NArchive@@UAGKXZ endp
.text:00003E36
.text:00003E36 ; ---------------------------------------------------------------------------
.text:00003E39                 align 4
.text:00003E39 _text           ends
.text:00003E39
.text:00003E3C ; ===========================================================================
.text:00003E3C
.text:00003E3C ; Segment type: Pure code
.text:00003E3C ; Segment permissions: Read/Execute
.text:00003E3C _text           segment para public 'CODE' use32
.text:00003E3C                 assume cs:_text
.text:00003E3C                 ;org 3E3Ch
.text:00003E3C ; COMDAT (pick any)
.text:00003E3C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003E3C
.text:00003E3C ; =============== S U B R O U T I N E =======================================
.text:00003E3C
.text:00003E3C ; Attributes: bp-based frame
.text:00003E3C
.text:00003E3C ; unsigned __int32 __stdcall NArchive::N7z::CMtEncMultiProgress::Release(NArchive::N7z::CMtEncMultiProgress *this)
.text:00003E3C                 public ?Release@CMtEncMultiProgress@N7z@NArchive@@UAGKXZ
.text:00003E3C ?Release@CMtEncMultiProgress@N7z@NArchive@@UAGKXZ proc near
.text:00003E3C                                         ; DATA XREF: .rdata:00003C6Co
.text:00003E3C
.text:00003E3C var_10          = dword ptr -10h
.text:00003E3C var_C           = dword ptr -0Ch
.text:00003E3C var_8           = dword ptr -8
.text:00003E3C var_4           = dword ptr -4
.text:00003E3C this            = dword ptr  8
.text:00003E3C
.text:00003E3C                 push    ebp
.text:00003E3D                 mov     ebp, esp
.text:00003E3F                 sub     esp, 10h
.text:00003E42                 mov     eax, 0CCCCCCCCh
.text:00003E47                 mov     [ebp+var_10], eax
.text:00003E4A                 mov     [ebp+var_C], eax
.text:00003E4D                 mov     [ebp+var_8], eax
.text:00003E50                 mov     [ebp+var_4], eax
.text:00003E53                 mov     eax, [ebp+this]
.text:00003E56                 mov     ecx, [eax+4]
.text:00003E59                 sub     ecx, 1
.text:00003E5C                 mov     [ebp+var_C], ecx
.text:00003E5F                 mov     edx, [ebp+this]
.text:00003E62                 mov     eax, [ebp+var_C]
.text:00003E65                 mov     [edx+4], eax
.text:00003E68                 cmp     [ebp+var_C], 0
.text:00003E6C                 jz      short loc_3E76
.text:00003E6E                 mov     ecx, [ebp+this]
.text:00003E71                 mov     eax, [ecx+4]
.text:00003E74                 jmp     short loc_3EA0
.text:00003E76 ; ---------------------------------------------------------------------------
.text:00003E76
.text:00003E76 loc_3E76:                               ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::Release(void)+30j
.text:00003E76                 mov     edx, [ebp+this]
.text:00003E79                 mov     [ebp+var_8], edx
.text:00003E7C                 mov     eax, [ebp+var_8]
.text:00003E7F                 mov     [ebp+var_4], eax
.text:00003E82                 cmp     [ebp+var_4], 0
.text:00003E86                 jz      short loc_3E97
.text:00003E88                 push    1
.text:00003E8A                 mov     ecx, [ebp+var_4]
.text:00003E8D                 call    ??_GCMtEncMultiProgress@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CMtEncMultiProgress::`scalar deleting destructor'(uint)
.text:00003E92                 mov     [ebp+var_10], eax
.text:00003E95                 jmp     short loc_3E9E
.text:00003E97 ; ---------------------------------------------------------------------------
.text:00003E97
.text:00003E97 loc_3E97:                               ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::Release(void)+4Aj
.text:00003E97                 mov     [ebp+var_10], 0
.text:00003E9E
.text:00003E9E loc_3E9E:                               ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::Release(void)+59j
.text:00003E9E                 xor     eax, eax
.text:00003EA0
.text:00003EA0 loc_3EA0:                               ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::Release(void)+38j
.text:00003EA0                 add     esp, 10h
.text:00003EA3                 cmp     ebp, esp
.text:00003EA5                 call    __RTC_CheckEsp
.text:00003EAA                 mov     esp, ebp
.text:00003EAC                 pop     ebp
.text:00003EAD                 retn    4
.text:00003EAD ?Release@CMtEncMultiProgress@N7z@NArchive@@UAGKXZ endp
.text:00003EAD
.text:00003EAD _text           ends
.text:00003EAD
.text:00003EB0 ; ===========================================================================
.text:00003EB0
.text:00003EB0 ; Segment type: Pure code
.text:00003EB0 ; Segment permissions: Read/Execute
.text:00003EB0 _text           segment para public 'CODE' use32
.text:00003EB0                 assume cs:_text
.text:00003EB0                 ;org 3EB0h
.text:00003EB0 ; COMDAT (pick any)
.text:00003EB0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003EB0
.text:00003EB0 ; =============== S U B R O U T I N E =======================================
.text:00003EB0
.text:00003EB0 ; Attributes: bp-based frame
.text:00003EB0
.text:00003EB0 ; _DWORD __thiscall ICompressProgressInfo::ICompressProgressInfo(ICompressProgressInfo *__hidden this)
.text:00003EB0                 public ??0ICompressProgressInfo@@QAE@XZ
.text:00003EB0 ??0ICompressProgressInfo@@QAE@XZ proc near
.text:00003EB0                                         ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::CMtEncMultiProgress(void)+30p
.text:00003EB0
.text:00003EB0 var_4           = dword ptr -4
.text:00003EB0
.text:00003EB0                 push    ebp
.text:00003EB1                 mov     ebp, esp
.text:00003EB3                 push    ecx
.text:00003EB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003EBB                 mov     [ebp+var_4], ecx
.text:00003EBE                 mov     ecx, [ebp+var_4]
.text:00003EC1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00003EC6                 mov     eax, [ebp+var_4]
.text:00003EC9                 mov     dword ptr [eax], offset ??_7ICompressProgressInfo@@6B@ ; const ICompressProgressInfo::`vftable'
.text:00003ECF                 mov     eax, [ebp+var_4]
.text:00003ED2                 add     esp, 4
.text:00003ED5                 cmp     ebp, esp
.text:00003ED7                 call    __RTC_CheckEsp
.text:00003EDC                 mov     esp, ebp
.text:00003EDE                 pop     ebp
.text:00003EDF                 retn
.text:00003EDF ??0ICompressProgressInfo@@QAE@XZ endp
.text:00003EDF
.text:00003EDF _text           ends
.text:00003EDF
.rdata:00003EE0 ; ===========================================================================
.rdata:00003EE0
.rdata:00003EE0 ; Segment type: Pure data
.rdata:00003EE0 ; Segment permissions: Read
.rdata:00003EE0 _rdata          segment dword public 'DATA' use32
.rdata:00003EE0                 assume cs:_rdata
.rdata:00003EE0                 ;org 3EE0h
.rdata:00003EE0 ; COMDAT (pick largest)
.rdata:00003EE0                 dd offset ??_R4ICompressProgressInfo@@6B@ ; const ICompressProgressInfo::`RTTI Complete Object Locator'
.rdata:00003EE4                 public ??_7ICompressProgressInfo@@6B@
.rdata:00003EE4 ; const ICompressProgressInfo::`vftable'
.rdata:00003EE4 ??_7ICompressProgressInfo@@6B@ dd offset __purecall
.rdata:00003EE4                                         ; DATA XREF: ICompressProgressInfo::ICompressProgressInfo(void)+19o
.rdata:00003EE8                 dd offset __purecall
.rdata:00003EEC                 dd offset __purecall
.rdata:00003EF0                 dd offset __purecall
.rdata:00003EF0 _rdata          ends
.rdata:00003EF0
.rdata$r:00003EF4 ; ===========================================================================
.rdata$r:00003EF4
.rdata$r:00003EF4 ; Segment type: Pure data
.rdata$r:00003EF4 ; Segment permissions: Read
.rdata$r:00003EF4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003EF4                 assume cs:_rdata$r
.rdata$r:00003EF4                 ;org 3EF4h
.rdata$r:00003EF4 ; COMDAT (pick any)
.rdata$r:00003EF4                 public ??_R4ICompressProgressInfo@@6B@
.rdata$r:00003EF4 ; const ICompressProgressInfo::`RTTI Complete Object Locator'
.rdata$r:00003EF4 ??_R4ICompressProgressInfo@@6B@ db    0 ; DATA XREF: .rdata:00003EE0o
.rdata$r:00003EF5                 db    0
.rdata$r:00003EF6                 db    0
.rdata$r:00003EF7                 db    0
.rdata$r:00003EF8                 db    0
.rdata$r:00003EF9                 db    0
.rdata$r:00003EFA                 db    0
.rdata$r:00003EFB                 db    0
.rdata$r:00003EFC                 db    0
.rdata$r:00003EFD                 db    0
.rdata$r:00003EFE                 db    0
.rdata$r:00003EFF                 db    0
.rdata$r:00003F00                 dd offset ??_R0?AUICompressProgressInfo@@@8 ; ICompressProgressInfo `RTTI Type Descriptor'
.rdata$r:00003F04                 dd offset ??_R3ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003F04 _rdata$r        ends
.rdata$r:00003F04
.text:00003F08 ; ===========================================================================
.text:00003F08
.text:00003F08 ; Segment type: Pure code
.text:00003F08 ; Segment permissions: Read/Execute
.text:00003F08 _text           segment para public 'CODE' use32
.text:00003F08                 assume cs:_text
.text:00003F08                 ;org 3F08h
.text:00003F08 ; COMDAT (pick any)
.text:00003F08                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003F08
.text:00003F08 ; =============== S U B R O U T I N E =======================================
.text:00003F08
.text:00003F08 ; Attributes: bp-based frame
.text:00003F08
.text:00003F08 ; public: void * __thiscall NArchive::N7z::CMtEncMultiProgress::`scalar deleting destructor'(unsigned int)
.text:00003F08                 public ??_GCMtEncMultiProgress@N7z@NArchive@@QAEPAXI@Z
.text:00003F08 ??_GCMtEncMultiProgress@N7z@NArchive@@QAEPAXI@Z proc near
.text:00003F08                                         ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::Release(void)+51p
.text:00003F08
.text:00003F08 var_4           = dword ptr -4
.text:00003F08 arg_0           = dword ptr  8
.text:00003F08
.text:00003F08                 push    ebp
.text:00003F09                 mov     ebp, esp
.text:00003F0B                 push    ecx
.text:00003F0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003F13                 mov     [ebp+var_4], ecx
.text:00003F16                 mov     ecx, [ebp+var_4] ; this
.text:00003F19                 call    ??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CMtEncMultiProgress::~CMtEncMultiProgress(void)
.text:00003F1E                 mov     eax, [ebp+arg_0]
.text:00003F21                 and     eax, 1
.text:00003F24                 jz      short loc_3F32
.text:00003F26                 mov     ecx, [ebp+var_4]
.text:00003F29                 push    ecx             ; void *
.text:00003F2A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003F2F                 add     esp, 4
.text:00003F32
.text:00003F32 loc_3F32:                               ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::`scalar deleting destructor'(uint)+1Cj
.text:00003F32                 mov     eax, [ebp+var_4]
.text:00003F35                 add     esp, 4
.text:00003F38                 cmp     ebp, esp
.text:00003F3A                 call    __RTC_CheckEsp
.text:00003F3F                 mov     esp, ebp
.text:00003F41                 pop     ebp
.text:00003F42                 retn    4
.text:00003F42 ??_GCMtEncMultiProgress@N7z@NArchive@@QAEPAXI@Z endp
.text:00003F42
.text:00003F42 ; ---------------------------------------------------------------------------
.text:00003F45                 align 4
.text:00003F45 _text           ends
.text:00003F45
.text:00003F48 ; ===========================================================================
.text:00003F48
.text:00003F48 ; Segment type: Pure code
.text:00003F48 ; Segment permissions: Read/Execute
.text:00003F48 _text           segment para public 'CODE' use32
.text:00003F48                 assume cs:_text
.text:00003F48                 ;org 3F48h
.text:00003F48 ; COMDAT (pick any)
.text:00003F48                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003F48
.text:00003F48 ; =============== S U B R O U T I N E =======================================
.text:00003F48
.text:00003F48 ; Attributes: bp-based frame
.text:00003F48
.text:00003F48 ; _DWORD __thiscall NArchive::N7z::CMtEncMultiProgress::~CMtEncMultiProgress(NArchive::N7z::CMtEncMultiProgress *__hidden this)
.text:00003F48                 public ??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ
.text:00003F48 ??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ proc near
.text:00003F48                                         ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::`scalar deleting destructor'(uint)+11p
.text:00003F48
.text:00003F48 var_10          = dword ptr -10h
.text:00003F48 var_C           = dword ptr -0Ch
.text:00003F48 var_4           = dword ptr -4
.text:00003F48
.text:00003F48                 push    ebp
.text:00003F49                 mov     ebp, esp
.text:00003F4B                 push    0FFFFFFFFh
.text:00003F4D                 push    offset __ehhandler$??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ
.text:00003F52                 mov     eax, large fs:0
.text:00003F58                 push    eax
.text:00003F59                 push    ecx
.text:00003F5A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003F61                 mov     eax, dword ptr ds:___security_cookie
.text:00003F66                 xor     eax, ebp
.text:00003F68                 push    eax
.text:00003F69                 lea     eax, [ebp+var_C]
.text:00003F6C                 mov     large fs:0, eax
.text:00003F72                 mov     [ebp+var_10], ecx
.text:00003F75                 mov     [ebp+var_4], 0
.text:00003F7C                 mov     ecx, [ebp+var_10]
.text:00003F7F                 add     ecx, 0Ch        ; this
.text:00003F82                 call    ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)
.text:00003F87                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003F8E                 mov     ecx, [ebp+var_10]
.text:00003F91                 add     ecx, 8
.text:00003F94                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003F99                 mov     ecx, [ebp+var_C]
.text:00003F9C                 mov     large fs:0, ecx
.text:00003FA3                 pop     ecx
.text:00003FA4                 add     esp, 10h
.text:00003FA7                 cmp     ebp, esp
.text:00003FA9                 call    __RTC_CheckEsp
.text:00003FAE                 mov     esp, ebp
.text:00003FB0                 pop     ebp
.text:00003FB1                 retn
.text:00003FB1 ??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ endp
.text:00003FB1
.text:00003FB1 ; ---------------------------------------------------------------------------
.text:00003FB2                 align 4
.text:00003FB2 _text           ends
.text:00003FB2
.text$x:00003FB4 ; ===========================================================================
.text$x:00003FB4
.text$x:00003FB4 ; Segment type: Pure code
.text$x:00003FB4 ; Segment permissions: Read/Execute
.text$x:00003FB4 _text$x         segment para public 'CODE' use32
.text$x:00003FB4                 assume cs:_text$x
.text$x:00003FB4                 ;org 3FB4h
.text$x:00003FB4 ; COMDAT (pick associative to section at 3F48)
.text$x:00003FB4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00003FB4
.text$x:00003FB4 ; =============== S U B R O U T I N E =======================================
.text$x:00003FB4
.text$x:00003FB4
.text$x:00003FB4 __unwindfunclet$??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00003FB4                                         ; DATA XREF: .xdata$x:00003FE0o
.text$x:00003FB4                 mov     ecx, [ebp-10h]
.text$x:00003FB7                 add     ecx, 8
.text$x:00003FBA                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:00003FBA __unwindfunclet$??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00003FBA
.text$x:00003FBF
.text$x:00003FBF ; =============== S U B R O U T I N E =======================================
.text$x:00003FBF
.text$x:00003FBF
.text$x:00003FBF __ehhandler$??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ proc near
.text$x:00003FBF                                         ; DATA XREF: NArchive::N7z::CMtEncMultiProgress::~CMtEncMultiProgress(void)+5o
.text$x:00003FBF
.text$x:00003FBF arg_4           = dword ptr  8
.text$x:00003FBF
.text$x:00003FBF                 mov     edx, [esp+arg_4]
.text$x:00003FC3                 lea     eax, [edx+0Ch]
.text$x:00003FC6                 mov     ecx, [edx-8]
.text$x:00003FC9                 xor     ecx, eax
.text$x:00003FCB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003FD0                 mov     eax, offset __ehfuncinfo$??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ
.text$x:00003FD5                 jmp     ___CxxFrameHandler3
.text$x:00003FD5 __ehhandler$??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ endp
.text$x:00003FD5
.text$x:00003FD5 ; ---------------------------------------------------------------------------
.text$x:00003FDA                 align 4
.text$x:00003FDA _text$x         ends
.text$x:00003FDA
.xdata$x:00003FDC ; ===========================================================================
.xdata$x:00003FDC
.xdata$x:00003FDC ; Segment type: Pure data
.xdata$x:00003FDC ; Segment permissions: Read
.xdata$x:00003FDC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003FDC                 assume cs:_xdata$x
.xdata$x:00003FDC                 ;org 3FDCh
.xdata$x:00003FDC ; COMDAT (pick associative to section at 3F48)
.xdata$x:00003FDC __unwindtable$??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003FDC                                         ; DATA XREF: .xdata$x:00003FECo
.xdata$x:00003FDD                 db 0FFh
.xdata$x:00003FDE                 db 0FFh
.xdata$x:00003FDF                 db 0FFh
.xdata$x:00003FE0                 dd offset __unwindfunclet$??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ$0
.xdata$x:00003FE4 __ehfuncinfo$??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003FE4                                         ; DATA XREF: __ehhandler$??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00003FE5                 db    5
.xdata$x:00003FE6                 db  93h ; ô
.xdata$x:00003FE7                 db  19h
.xdata$x:00003FE8                 db    1
.xdata$x:00003FE9                 db    0
.xdata$x:00003FEA                 db    0
.xdata$x:00003FEB                 db    0
.xdata$x:00003FEC                 dd offset __unwindtable$??1CMtEncMultiProgress@N7z@NArchive@@QAE@XZ
.xdata$x:00003FF0                 db    0
.xdata$x:00003FF1                 db    0
.xdata$x:00003FF2                 db    0
.xdata$x:00003FF3                 db    0
.xdata$x:00003FF4                 db    0
.xdata$x:00003FF5                 db    0
.xdata$x:00003FF6                 db    0
.xdata$x:00003FF7                 db    0
.xdata$x:00003FF8                 db    0
.xdata$x:00003FF9                 db    0
.xdata$x:00003FFA                 db    0
.xdata$x:00003FFB                 db    0
.xdata$x:00003FFC                 db    0
.xdata$x:00003FFD                 db    0
.xdata$x:00003FFE                 db    0
.xdata$x:00003FFF                 db    0
.xdata$x:00004000                 db    0
.xdata$x:00004001                 db    0
.xdata$x:00004002                 db    0
.xdata$x:00004003                 db    0
.xdata$x:00004004                 db    1
.xdata$x:00004005                 db    0
.xdata$x:00004006                 db    0
.xdata$x:00004007                 db    0
.xdata$x:00004007 _xdata$x        ends
.xdata$x:00004007
.text:00004008 ; ===========================================================================
.text:00004008
.text:00004008 ; Segment type: Pure code
.text:00004008 ; Segment permissions: Read/Execute
.text:00004008 _text           segment para public 'CODE' use32
.text:00004008                 assume cs:_text
.text:00004008                 ;org 4008h
.text:00004008 ; COMDAT (pick any)
.text:00004008                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004008
.text:00004008 ; =============== S U B R O U T I N E =======================================
.text:00004008
.text:00004008 ; Attributes: bp-based frame
.text:00004008
.text:00004008 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSection::~CCriticalSection(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00004008                 public ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ
.text:00004008 ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
.text:00004008                                         ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::~CMtEncMultiProgress(void)+3Ap
.text:00004008
.text:00004008 lpCriticalSection= dword ptr -4
.text:00004008
.text:00004008                 push    ebp
.text:00004009                 mov     ebp, esp
.text:0000400B                 push    ecx
.text:0000400C                 push    esi
.text:0000400D                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00004014                 mov     [ebp+lpCriticalSection], ecx
.text:00004017                 mov     esi, esp
.text:00004019                 mov     eax, [ebp+lpCriticalSection]
.text:0000401C                 push    eax             ; lpCriticalSection
.text:0000401D                 call    dword ptr ds:__imp__DeleteCriticalSection@4 ; DeleteCriticalSection(x)
.text:00004023                 cmp     esi, esp
.text:00004025                 call    __RTC_CheckEsp
.text:0000402A                 pop     esi
.text:0000402B                 add     esp, 4
.text:0000402E                 cmp     ebp, esp
.text:00004030                 call    __RTC_CheckEsp
.text:00004035                 mov     esp, ebp
.text:00004037                 pop     ebp
.text:00004038                 retn
.text:00004038 ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ endp
.text:00004038
.text:00004038 ; ---------------------------------------------------------------------------
.text:00004039                 align 4
.text:00004039 _text           ends
.text:00004039
.text:0000403C ; ===========================================================================
.text:0000403C
.text:0000403C ; Segment type: Pure code
.text:0000403C ; Segment permissions: Read/Execute
.text:0000403C _text           segment para public 'CODE' use32
.text:0000403C                 assume cs:_text
.text:0000403C                 ;org 403Ch
.text:0000403C ; COMDAT (pick any)
.text:0000403C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000403C
.text:0000403C ; =============== S U B R O U T I N E =======================================
.text:0000403C
.text:0000403C ; Attributes: bp-based frame
.text:0000403C
.text:0000403C ; void __thiscall CSequentialInStreamSizeCount2::Init(CSequentialInStreamSizeCount2 *this, struct ISequentialInStream *)
.text:0000403C                 public ?Init@CSequentialInStreamSizeCount2@@QAEXPAUISequentialInStream@@@Z
.text:0000403C ?Init@CSequentialInStreamSizeCount2@@QAEXPAUISequentialInStream@@@Z proc near
.text:0000403C                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+2EFp
.text:0000403C
.text:0000403C var_4           = dword ptr -4
.text:0000403C arg_0           = dword ptr  8
.text:0000403C
.text:0000403C                 push    ebp
.text:0000403D                 mov     ebp, esp
.text:0000403F                 push    ecx
.text:00004040                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004047                 mov     [ebp+var_4], ecx
.text:0000404A                 mov     eax, [ebp+var_4]
.text:0000404D                 mov     dword ptr [eax+18h], 0
.text:00004054                 mov     dword ptr [eax+1Ch], 0
.text:0000405B                 mov     ecx, [ebp+var_4]
.text:0000405E                 add     ecx, 10h
.text:00004061                 call    ?Release@?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEXXZ ; CMyComPtr<ICompressGetSubStreamSize>::Release(void)
.text:00004066                 mov     ecx, [ebp+arg_0]
.text:00004069                 push    ecx
.text:0000406A                 mov     ecx, [ebp+var_4]
.text:0000406D                 add     ecx, 0Ch
.text:00004070                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00004075                 mov     ecx, [ebp+var_4]
.text:00004078                 add     ecx, 10h
.text:0000407B                 call    ??I?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEPAPAUICompressGetSubStreamSize@@XZ ; CMyComPtr<ICompressGetSubStreamSize>::operator&(void)
.text:00004080                 push    eax
.text:00004081                 push    offset _IID_ICompressGetSubStreamSize
.text:00004086                 mov     ecx, [ebp+var_4]
.text:00004089                 add     ecx, 0Ch
.text:0000408C                 call    ??$QueryInterface@UICompressGetSubStreamSize@@@?$CMyComPtr@UISequentialInStream@@@@QBEJABU_GUID@@PAPAUICompressGetSubStreamSize@@@Z ; CMyComPtr<ISequentialInStream>::QueryInterface<ICompressGetSubStreamSize>(_GUID const &,ICompressGetSubStreamSize * *)
.text:00004091                 add     esp, 4
.text:00004094                 cmp     ebp, esp
.text:00004096                 call    __RTC_CheckEsp
.text:0000409B                 mov     esp, ebp
.text:0000409D                 pop     ebp
.text:0000409E                 retn    4
.text:0000409E ?Init@CSequentialInStreamSizeCount2@@QAEXPAUISequentialInStream@@@Z endp
.text:0000409E
.text:0000409E ; ---------------------------------------------------------------------------
.text:000040A1                 align 4
.text:000040A1 _text           ends
.text:000040A1
.text:000040A4 ; ===========================================================================
.text:000040A4
.text:000040A4 ; Segment type: Pure code
.text:000040A4 ; Segment permissions: Read/Execute
.text:000040A4 _text           segment para public 'CODE' use32
.text:000040A4                 assume cs:_text
.text:000040A4                 ;org 40A4h
.text:000040A4 ; COMDAT (pick any)
.text:000040A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000040A4
.text:000040A4 ; =============== S U B R O U T I N E =======================================
.text:000040A4
.text:000040A4 ; Attributes: bp-based frame
.text:000040A4
.text:000040A4 ; unsigned __int64 __thiscall CSequentialInStreamSizeCount2::GetSize(CSequentialInStreamSizeCount2 *__hidden this)
.text:000040A4                 public ?GetSize@CSequentialInStreamSizeCount2@@QBE_KXZ
.text:000040A4 ?GetSize@CSequentialInStreamSizeCount2@@QBE_KXZ proc near
.text:000040A4                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+A72p
.text:000040A4
.text:000040A4 var_4           = dword ptr -4
.text:000040A4
.text:000040A4                 push    ebp
.text:000040A5                 mov     ebp, esp
.text:000040A7                 push    ecx
.text:000040A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000040AF                 mov     [ebp+var_4], ecx
.text:000040B2                 mov     ecx, [ebp+var_4]
.text:000040B5                 mov     eax, [ecx+18h]
.text:000040B8                 mov     edx, [ecx+1Ch]
.text:000040BB                 mov     esp, ebp
.text:000040BD                 pop     ebp
.text:000040BE                 retn
.text:000040BE ?GetSize@CSequentialInStreamSizeCount2@@QBE_KXZ endp
.text:000040BE
.text:000040BE ; ---------------------------------------------------------------------------
.text:000040BF                 align 10h
.text:000040BF _text           ends
.text:000040BF
.text:000040C0 ; ===========================================================================
.text:000040C0
.text:000040C0 ; Segment type: Pure code
.text:000040C0 ; Segment permissions: Read/Execute
.text:000040C0 _text           segment para public 'CODE' use32
.text:000040C0                 assume cs:_text
.text:000040C0                 ;org 40C0h
.text:000040C0 ; COMDAT (pick any)
.text:000040C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000040C0
.text:000040C0 ; =============== S U B R O U T I N E =======================================
.text:000040C0
.text:000040C0 ; Attributes: bp-based frame
.text:000040C0
.text:000040C0 ; _DWORD __thiscall NArchive::N7z::CSequentialOutTempBufferImp2::CSequentialOutTempBufferImp2(NArchive::N7z::CSequentialOutTempBufferImp2 *__hidden this)
.text:000040C0                 public ??0CSequentialOutTempBufferImp2@N7z@NArchive@@QAE@XZ
.text:000040C0 ??0CSequentialOutTempBufferImp2@N7z@NArchive@@QAE@XZ proc near
.text:000040C0                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+188p
.text:000040C0
.text:000040C0 var_4           = dword ptr -4
.text:000040C0
.text:000040C0                 push    ebp
.text:000040C1                 mov     ebp, esp
.text:000040C3                 push    ecx
.text:000040C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000040CB                 mov     [ebp+var_4], ecx
.text:000040CE                 mov     ecx, [ebp+var_4] ; this
.text:000040D1                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:000040D6                 mov     ecx, [ebp+var_4]
.text:000040D9                 add     ecx, 4          ; this
.text:000040DC                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000040E1                 mov     eax, [ebp+var_4]
.text:000040E4                 mov     dword ptr [eax], offset ??_7CSequentialOutTempBufferImp2@N7z@NArchive@@6B@ ; const NArchive::N7z::CSequentialOutTempBufferImp2::`vftable'
.text:000040EA                 mov     ecx, [ebp+var_4]
.text:000040ED                 mov     dword ptr [ecx+8], 0
.text:000040F4                 mov     edx, [ebp+var_4]
.text:000040F7                 mov     dword ptr [edx+0Ch], 0
.text:000040FE                 mov     eax, [ebp+var_4]
.text:00004101                 add     esp, 4
.text:00004104                 cmp     ebp, esp
.text:00004106                 call    __RTC_CheckEsp
.text:0000410B                 mov     esp, ebp
.text:0000410D                 pop     ebp
.text:0000410E                 retn
.text:0000410E ??0CSequentialOutTempBufferImp2@N7z@NArchive@@QAE@XZ endp
.text:0000410E
.text:0000410E ; ---------------------------------------------------------------------------
.text:0000410F                 align 10h
.text:0000410F _text           ends
.text:0000410F
.rdata:00004110 ; ===========================================================================
.rdata:00004110
.rdata:00004110 ; Segment type: Pure data
.rdata:00004110 ; Segment permissions: Read
.rdata:00004110 _rdata          segment dword public 'DATA' use32
.rdata:00004110                 assume cs:_rdata
.rdata:00004110                 ;org 4110h
.rdata:00004110 ; COMDAT (pick largest)
.rdata:00004110                 dd offset ??_R4CSequentialOutTempBufferImp2@N7z@NArchive@@6B@ ; const NArchive::N7z::CSequentialOutTempBufferImp2::`RTTI Complete Object Locator'
.rdata:00004114                 public ??_7CSequentialOutTempBufferImp2@N7z@NArchive@@6B@
.rdata:00004114 ; const NArchive::N7z::CSequentialOutTempBufferImp2::`vftable'
.rdata:00004114 ??_7CSequentialOutTempBufferImp2@N7z@NArchive@@6B@ dd offset ?QueryInterface@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:00004114                                         ; DATA XREF: NArchive::N7z::CSequentialOutTempBufferImp2::CSequentialOutTempBufferImp2(void)+24o
.rdata:00004114                                         ; NArchive::N7z::CSequentialOutTempBufferImp2::QueryInterface(_GUID const &,void * *)
.rdata:00004118                 dd offset ?AddRef@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CSequentialOutTempBufferImp2::AddRef(void)
.rdata:0000411C                 dd offset ?Release@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CSequentialOutTempBufferImp2::Release(void)
.rdata:00004120                 dd offset ?Write@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGJPBXIPAI@Z ; NArchive::N7z::CSequentialOutTempBufferImp2::Write(void const *,uint,uint *)
.rdata:00004120 _rdata          ends
.rdata:00004120
.rdata$r:00004124 ; ===========================================================================
.rdata$r:00004124
.rdata$r:00004124 ; Segment type: Pure data
.rdata$r:00004124 ; Segment permissions: Read
.rdata$r:00004124 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004124                 assume cs:_rdata$r
.rdata$r:00004124                 ;org 4124h
.rdata$r:00004124 ; COMDAT (pick any)
.rdata$r:00004124                 public ??_R4CSequentialOutTempBufferImp2@N7z@NArchive@@6B@
.rdata$r:00004124 ; const NArchive::N7z::CSequentialOutTempBufferImp2::`RTTI Complete Object Locator'
.rdata$r:00004124 ??_R4CSequentialOutTempBufferImp2@N7z@NArchive@@6B@ db    0
.rdata$r:00004124                                         ; DATA XREF: .rdata:00004110o
.rdata$r:00004125                 db    0
.rdata$r:00004126                 db    0
.rdata$r:00004127                 db    0
.rdata$r:00004128                 db    0
.rdata$r:00004129                 db    0
.rdata$r:0000412A                 db    0
.rdata$r:0000412B                 db    0
.rdata$r:0000412C                 db    0
.rdata$r:0000412D                 db    0
.rdata$r:0000412E                 db    0
.rdata$r:0000412F                 db    0
.rdata$r:00004130                 dd offset ??_R0?AVCSequentialOutTempBufferImp2@N7z@NArchive@@@8 ; NArchive::N7z::CSequentialOutTempBufferImp2 `RTTI Type Descriptor'
.rdata$r:00004134                 dd offset ??_R3CSequentialOutTempBufferImp2@N7z@NArchive@@8 ; NArchive::N7z::CSequentialOutTempBufferImp2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004134 _rdata$r        ends
.rdata$r:00004134
.data:00004138 ; ===========================================================================
.data:00004138
.data:00004138 ; Segment type: Pure data
.data:00004138 ; Segment permissions: Read/Write
.data:00004138 _data           segment dword public 'DATA' use32
.data:00004138                 assume cs:_data
.data:00004138                 ;org 4138h
.data:00004138 ; COMDAT (pick any)
.data:00004138                 public ??_R0?AVCSequentialOutTempBufferImp2@N7z@NArchive@@@8
.data:00004138 ; class NArchive::N7z::CSequentialOutTempBufferImp2 `RTTI Type Descriptor'
.data:00004138 ??_R0?AVCSequentialOutTempBufferImp2@N7z@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00004138                                         ; DATA XREF: .rdata$r:00004130o
.data:00004138                                         ; .rdata$r:NArchive::N7z::CSequentialOutTempBufferImp2::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00004138                                         ; const type_info::`vftable'
.data:0000413C                 align 10h
.data:00004140 a_?avcsequentia db '.?AVCSequentialOutTempBufferImp2@N7z@NArchive@@',0
.data:00004140 _data           ends
.data:00004140
.rdata$r:00004170 ; ===========================================================================
.rdata$r:00004170
.rdata$r:00004170 ; Segment type: Pure data
.rdata$r:00004170 ; Segment permissions: Read
.rdata$r:00004170 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004170                 assume cs:_rdata$r
.rdata$r:00004170                 ;org 4170h
.rdata$r:00004170 ; COMDAT (pick any)
.rdata$r:00004170                 public ??_R3CSequentialOutTempBufferImp2@N7z@NArchive@@8
.rdata$r:00004170 ; NArchive::N7z::CSequentialOutTempBufferImp2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004170 ??_R3CSequentialOutTempBufferImp2@N7z@NArchive@@8 db    0
.rdata$r:00004170                                         ; DATA XREF: .rdata$r:00004134o
.rdata$r:00004170                                         ; .rdata$r:000041ACo
.rdata$r:00004171                 db    0
.rdata$r:00004172                 db    0
.rdata$r:00004173                 db    0
.rdata$r:00004174                 db    1
.rdata$r:00004175                 db    0
.rdata$r:00004176                 db    0
.rdata$r:00004177                 db    0
.rdata$r:00004178                 db    4
.rdata$r:00004179                 db    0
.rdata$r:0000417A                 db    0
.rdata$r:0000417B                 db    0
.rdata$r:0000417C                 dd offset ??_R2CSequentialOutTempBufferImp2@N7z@NArchive@@8 ; NArchive::N7z::CSequentialOutTempBufferImp2::`RTTI Base Class Array'
.rdata$r:0000417C _rdata$r        ends
.rdata$r:0000417C
.rdata$r:00004180 ; ===========================================================================
.rdata$r:00004180
.rdata$r:00004180 ; Segment type: Pure data
.rdata$r:00004180 ; Segment permissions: Read
.rdata$r:00004180 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004180                 assume cs:_rdata$r
.rdata$r:00004180                 ;org 4180h
.rdata$r:00004180 ; COMDAT (pick any)
.rdata$r:00004180                 public ??_R2CSequentialOutTempBufferImp2@N7z@NArchive@@8
.rdata$r:00004180 ; NArchive::N7z::CSequentialOutTempBufferImp2::`RTTI Base Class Array'
.rdata$r:00004180 ??_R2CSequentialOutTempBufferImp2@N7z@NArchive@@8 dd offset ??_R1A@?0A@EA@CSequentialOutTempBufferImp2@N7z@NArchive@@8
.rdata$r:00004180                                         ; DATA XREF: .rdata$r:0000417Co
.rdata$r:00004180                                         ; NArchive::N7z::CSequentialOutTempBufferImp2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004184                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004188                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000418C                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00004190                 db    0
.rdata$r:00004191                 align 4
.rdata$r:00004191 _rdata$r        ends
.rdata$r:00004191
.rdata$r:00004194 ; ===========================================================================
.rdata$r:00004194
.rdata$r:00004194 ; Segment type: Pure data
.rdata$r:00004194 ; Segment permissions: Read
.rdata$r:00004194 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004194                 assume cs:_rdata$r
.rdata$r:00004194                 ;org 4194h
.rdata$r:00004194 ; COMDAT (pick any)
.rdata$r:00004194                 public ??_R1A@?0A@EA@CSequentialOutTempBufferImp2@N7z@NArchive@@8
.rdata$r:00004194 ; NArchive::N7z::CSequentialOutTempBufferImp2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004194 ??_R1A@?0A@EA@CSequentialOutTempBufferImp2@N7z@NArchive@@8 dd offset ??_R0?AVCSequentialOutTempBufferImp2@N7z@NArchive@@@8
.rdata$r:00004194                                         ; DATA XREF: .rdata$r:NArchive::N7z::CSequentialOutTempBufferImp2::`RTTI Base Class Array'o
.rdata$r:00004194                                         ; NArchive::N7z::CSequentialOutTempBufferImp2 `RTTI Type Descriptor'
.rdata$r:00004198                 db    3
.rdata$r:00004199                 db    0
.rdata$r:0000419A                 db    0
.rdata$r:0000419B                 db    0
.rdata$r:0000419C                 db    0
.rdata$r:0000419D                 db    0
.rdata$r:0000419E                 db    0
.rdata$r:0000419F                 db    0
.rdata$r:000041A0                 db 0FFh
.rdata$r:000041A1                 db 0FFh
.rdata$r:000041A2                 db 0FFh
.rdata$r:000041A3                 db 0FFh
.rdata$r:000041A4                 db    0
.rdata$r:000041A5                 db    0
.rdata$r:000041A6                 db    0
.rdata$r:000041A7                 db    0
.rdata$r:000041A8                 db  40h ; @
.rdata$r:000041A9                 db    0
.rdata$r:000041AA                 db    0
.rdata$r:000041AB                 db    0
.rdata$r:000041AC                 dd offset ??_R3CSequentialOutTempBufferImp2@N7z@NArchive@@8 ; NArchive::N7z::CSequentialOutTempBufferImp2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000041AC _rdata$r        ends
.rdata$r:000041AC
.text:000041B0 ; ===========================================================================
.text:000041B0
.text:000041B0 ; Segment type: Pure code
.text:000041B0 ; Segment permissions: Read/Execute
.text:000041B0 _text           segment para public 'CODE' use32
.text:000041B0                 assume cs:_text
.text:000041B0                 ;org 41B0h
.text:000041B0 ; COMDAT (pick any)
.text:000041B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000041B0
.text:000041B0 ; =============== S U B R O U T I N E =======================================
.text:000041B0
.text:000041B0 ; Attributes: bp-based frame
.text:000041B0
.text:000041B0 ; void __thiscall NArchive::N7z::CSequentialOutTempBufferImp2::Init(NArchive::N7z::CSequentialOutTempBufferImp2 *this, struct CInOutTempBuffer *)
.text:000041B0                 public ?Init@CSequentialOutTempBufferImp2@N7z@NArchive@@QAEXPAVCInOutTempBuffer@@@Z
.text:000041B0 ?Init@CSequentialOutTempBufferImp2@N7z@NArchive@@QAEXPAVCInOutTempBuffer@@@Z proc near
.text:000041B0                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+1E7p
.text:000041B0
.text:000041B0 var_4           = dword ptr -4
.text:000041B0 arg_0           = dword ptr  8
.text:000041B0
.text:000041B0                 push    ebp
.text:000041B1                 mov     ebp, esp
.text:000041B3                 push    ecx
.text:000041B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000041BB                 mov     [ebp+var_4], ecx
.text:000041BE                 mov     eax, [ebp+var_4]
.text:000041C1                 mov     ecx, [ebp+arg_0]
.text:000041C4                 mov     [eax+8], ecx
.text:000041C7                 mov     esp, ebp
.text:000041C9                 pop     ebp
.text:000041CA                 retn    4
.text:000041CA ?Init@CSequentialOutTempBufferImp2@N7z@NArchive@@QAEXPAVCInOutTempBuffer@@@Z endp
.text:000041CA
.text:000041CA ; ---------------------------------------------------------------------------
.text:000041CD                 align 10h
.text:000041CD _text           ends
.text:000041CD
.text:000041D0 ; ===========================================================================
.text:000041D0
.text:000041D0 ; Segment type: Pure code
.text:000041D0 ; Segment permissions: Read/Execute
.text:000041D0 _text           segment para public 'CODE' use32
.text:000041D0                 assume cs:_text
.text:000041D0                 ;org 41D0h
.text:000041D0 ; COMDAT (pick any)
.text:000041D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000041D0
.text:000041D0 ; =============== S U B R O U T I N E =======================================
.text:000041D0
.text:000041D0 ; Attributes: bp-based frame
.text:000041D0
.text:000041D0 ; __int32 __stdcall NArchive::N7z::CSequentialOutTempBufferImp2::QueryInterface(NArchive::N7z::CSequentialOutTempBufferImp2 *this, const struct _GUID *Buf1, void **)
.text:000041D0                 public ?QueryInterface@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:000041D0 ?QueryInterface@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000041D0                                         ; DATA XREF: .rdata:const NArchive::N7z::CSequentialOutTempBufferImp2::`vftable'o
.text:000041D0
.text:000041D0 this            = dword ptr  8
.text:000041D0 Buf1            = dword ptr  0Ch
.text:000041D0 arg_8           = dword ptr  10h
.text:000041D0
.text:000041D0                 push    ebp
.text:000041D1                 mov     ebp, esp
.text:000041D3                 mov     eax, [ebp+arg_8]
.text:000041D6                 mov     dword ptr [eax], 0
.text:000041DC                 push    offset _IID_IUnknown ; Buf2
.text:000041E1                 mov     ecx, [ebp+Buf1]
.text:000041E4                 push    ecx             ; Buf1
.text:000041E5                 call    ___@8           ; __(x,x)
.text:000041EA                 test    eax, eax
.text:000041EC                 jz      short loc_41F8
.text:000041EE                 mov     edx, [ebp+arg_8]
.text:000041F1                 mov     eax, [ebp+this]
.text:000041F4                 mov     [edx], eax
.text:000041F6                 jmp     short loc_421B
.text:000041F8 ; ---------------------------------------------------------------------------
.text:000041F8
.text:000041F8 loc_41F8:                               ; CODE XREF: NArchive::N7z::CSequentialOutTempBufferImp2::QueryInterface(_GUID const &,void * *)+1Cj
.text:000041F8                 push    offset _IID_ISequentialOutStream ; Buf2
.text:000041FD                 mov     ecx, [ebp+Buf1]
.text:00004200                 push    ecx             ; Buf1
.text:00004201                 call    ___@8           ; __(x,x)
.text:00004206                 test    eax, eax
.text:00004208                 jz      short loc_4214
.text:0000420A                 mov     edx, [ebp+arg_8]
.text:0000420D                 mov     eax, [ebp+this]
.text:00004210                 mov     [edx], eax
.text:00004212                 jmp     short loc_421B
.text:00004214 ; ---------------------------------------------------------------------------
.text:00004214
.text:00004214 loc_4214:                               ; CODE XREF: NArchive::N7z::CSequentialOutTempBufferImp2::QueryInterface(_GUID const &,void * *)+38j
.text:00004214                 mov     eax, 80004002h
.text:00004219                 jmp     short loc_422C
.text:0000421B ; ---------------------------------------------------------------------------
.text:0000421B
.text:0000421B loc_421B:                               ; CODE XREF: NArchive::N7z::CSequentialOutTempBufferImp2::QueryInterface(_GUID const &,void * *)+26j
.text:0000421B                                         ; NArchive::N7z::CSequentialOutTempBufferImp2::QueryInterface(_GUID const &,void * *)+42j
.text:0000421B                 mov     ecx, [ebp+this]
.text:0000421E                 mov     edx, [ecx+4]
.text:00004221                 add     edx, 1
.text:00004224                 mov     eax, [ebp+this]
.text:00004227                 mov     [eax+4], edx
.text:0000422A                 xor     eax, eax
.text:0000422C
.text:0000422C loc_422C:                               ; CODE XREF: NArchive::N7z::CSequentialOutTempBufferImp2::QueryInterface(_GUID const &,void * *)+49j
.text:0000422C                 cmp     ebp, esp
.text:0000422E                 call    __RTC_CheckEsp
.text:00004233                 pop     ebp
.text:00004234                 retn    0Ch
.text:00004234 ?QueryInterface@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:00004234
.text:00004234 ; ---------------------------------------------------------------------------
.text:00004237                 align 4
.text:00004237 _text           ends
.text:00004237
.text:00004238 ; ===========================================================================
.text:00004238
.text:00004238 ; Segment type: Pure code
.text:00004238 ; Segment permissions: Read/Execute
.text:00004238 _text           segment para public 'CODE' use32
.text:00004238                 assume cs:_text
.text:00004238                 ;org 4238h
.text:00004238 ; COMDAT (pick any)
.text:00004238                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004238
.text:00004238 ; =============== S U B R O U T I N E =======================================
.text:00004238
.text:00004238 ; Attributes: bp-based frame
.text:00004238
.text:00004238 ; unsigned __int32 __stdcall NArchive::N7z::CSequentialOutTempBufferImp2::AddRef(NArchive::N7z::CSequentialOutTempBufferImp2 *this)
.text:00004238                 public ?AddRef@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGKXZ
.text:00004238 ?AddRef@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGKXZ proc near
.text:00004238                                         ; DATA XREF: .rdata:00004118o
.text:00004238
.text:00004238 var_4           = dword ptr -4
.text:00004238 this            = dword ptr  8
.text:00004238
.text:00004238                 push    ebp
.text:00004239                 mov     ebp, esp
.text:0000423B                 push    ecx
.text:0000423C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004243                 mov     eax, [ebp+this]
.text:00004246                 mov     ecx, [eax+4]
.text:00004249                 add     ecx, 1
.text:0000424C                 mov     [ebp+var_4], ecx
.text:0000424F                 mov     edx, [ebp+this]
.text:00004252                 mov     eax, [ebp+var_4]
.text:00004255                 mov     [edx+4], eax
.text:00004258                 mov     eax, [ebp+var_4]
.text:0000425B                 mov     esp, ebp
.text:0000425D                 pop     ebp
.text:0000425E                 retn    4
.text:0000425E ?AddRef@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGKXZ endp
.text:0000425E
.text:0000425E ; ---------------------------------------------------------------------------
.text:00004261                 align 4
.text:00004261 _text           ends
.text:00004261
.text:00004264 ; ===========================================================================
.text:00004264
.text:00004264 ; Segment type: Pure code
.text:00004264 ; Segment permissions: Read/Execute
.text:00004264 _text           segment para public 'CODE' use32
.text:00004264                 assume cs:_text
.text:00004264                 ;org 4264h
.text:00004264 ; COMDAT (pick any)
.text:00004264                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004264
.text:00004264 ; =============== S U B R O U T I N E =======================================
.text:00004264
.text:00004264 ; Attributes: bp-based frame
.text:00004264
.text:00004264 ; unsigned __int32 __stdcall NArchive::N7z::CSequentialOutTempBufferImp2::Release(NArchive::N7z::CSequentialOutTempBufferImp2 *this)
.text:00004264                 public ?Release@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGKXZ
.text:00004264 ?Release@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGKXZ proc near
.text:00004264                                         ; DATA XREF: .rdata:0000411Co
.text:00004264
.text:00004264 var_8           = dword ptr -8
.text:00004264 var_4           = dword ptr -4
.text:00004264 this            = dword ptr  8
.text:00004264
.text:00004264                 push    ebp
.text:00004265                 mov     ebp, esp
.text:00004267                 sub     esp, 8
.text:0000426A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004271                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004278                 mov     eax, [ebp+this]
.text:0000427B                 mov     ecx, [eax+4]
.text:0000427E                 sub     ecx, 1
.text:00004281                 mov     [ebp+var_8], ecx
.text:00004284                 mov     edx, [ebp+this]
.text:00004287                 mov     eax, [ebp+var_8]
.text:0000428A                 mov     [edx+4], eax
.text:0000428D                 cmp     [ebp+var_8], 0
.text:00004291                 jz      short loc_429B
.text:00004293                 mov     ecx, [ebp+this]
.text:00004296                 mov     eax, [ecx+4]
.text:00004299                 jmp     short loc_42AF
.text:0000429B ; ---------------------------------------------------------------------------
.text:0000429B
.text:0000429B loc_429B:                               ; CODE XREF: NArchive::N7z::CSequentialOutTempBufferImp2::Release(void)+2Dj
.text:0000429B                 mov     edx, [ebp+this]
.text:0000429E                 mov     [ebp+var_4], edx
.text:000042A1                 mov     eax, [ebp+var_4]
.text:000042A4                 push    eax             ; void *
.text:000042A5                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000042AA                 add     esp, 4
.text:000042AD                 xor     eax, eax
.text:000042AF
.text:000042AF loc_42AF:                               ; CODE XREF: NArchive::N7z::CSequentialOutTempBufferImp2::Release(void)+35j
.text:000042AF                 add     esp, 8
.text:000042B2                 cmp     ebp, esp
.text:000042B4                 call    __RTC_CheckEsp
.text:000042B9                 mov     esp, ebp
.text:000042BB                 pop     ebp
.text:000042BC                 retn    4
.text:000042BC ?Release@CSequentialOutTempBufferImp2@N7z@NArchive@@UAGKXZ endp
.text:000042BC
.text:000042BC ; ---------------------------------------------------------------------------
.text:000042BF                 align 10h
.text:000042BF _text           ends
.text:000042BF
.text:000042C0 ; ===========================================================================
.text:000042C0
.text:000042C0 ; Segment type: Pure code
.text:000042C0 ; Segment permissions: Read/Execute
.text:000042C0 _text           segment para public 'CODE' use32
.text:000042C0                 assume cs:_text
.text:000042C0                 ;org 42C0h
.text:000042C0 ; COMDAT (pick any)
.text:000042C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000042C0
.text:000042C0 ; =============== S U B R O U T I N E =======================================
.text:000042C0
.text:000042C0 ; Attributes: bp-based frame
.text:000042C0
.text:000042C0 ; _DWORD __thiscall NArchive::N7z::CSequentialOutMtNotify::CSequentialOutMtNotify(NArchive::N7z::CSequentialOutMtNotify *__hidden this)
.text:000042C0                 public ??0CSequentialOutMtNotify@N7z@NArchive@@QAE@XZ
.text:000042C0 ??0CSequentialOutMtNotify@N7z@NArchive@@QAE@XZ proc near
.text:000042C0                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+646p
.text:000042C0
.text:000042C0 var_4           = dword ptr -4
.text:000042C0
.text:000042C0                 push    ebp
.text:000042C1                 mov     ebp, esp
.text:000042C3                 push    ecx
.text:000042C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000042CB                 mov     [ebp+var_4], ecx
.text:000042CE                 mov     ecx, [ebp+var_4] ; this
.text:000042D1                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:000042D6                 mov     ecx, [ebp+var_4]
.text:000042D9                 add     ecx, 4          ; this
.text:000042DC                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000042E1                 mov     eax, [ebp+var_4]
.text:000042E4                 mov     dword ptr [eax], offset ??_7CSequentialOutMtNotify@N7z@NArchive@@6B@ ; const NArchive::N7z::CSequentialOutMtNotify::`vftable'
.text:000042EA                 mov     ecx, [ebp+var_4]
.text:000042ED                 add     ecx, 8
.text:000042F0                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:000042F5                 mov     ecx, [ebp+var_4]
.text:000042F8                 mov     dword ptr [ecx+0Ch], 0
.text:000042FF                 mov     eax, [ebp+var_4]
.text:00004302                 add     esp, 4
.text:00004305                 cmp     ebp, esp
.text:00004307                 call    __RTC_CheckEsp
.text:0000430C                 mov     esp, ebp
.text:0000430E                 pop     ebp
.text:0000430F                 retn
.text:0000430F ??0CSequentialOutMtNotify@N7z@NArchive@@QAE@XZ endp
.text:0000430F
.text:0000430F _text           ends
.text:0000430F
.rdata:00004310 ; ===========================================================================
.rdata:00004310
.rdata:00004310 ; Segment type: Pure data
.rdata:00004310 ; Segment permissions: Read
.rdata:00004310 _rdata          segment dword public 'DATA' use32
.rdata:00004310                 assume cs:_rdata
.rdata:00004310                 ;org 4310h
.rdata:00004310 ; COMDAT (pick largest)
.rdata:00004310                 dd offset ??_R4CSequentialOutMtNotify@N7z@NArchive@@6B@ ; const NArchive::N7z::CSequentialOutMtNotify::`RTTI Complete Object Locator'
.rdata:00004314                 public ??_7CSequentialOutMtNotify@N7z@NArchive@@6B@
.rdata:00004314 ; const NArchive::N7z::CSequentialOutMtNotify::`vftable'
.rdata:00004314 ??_7CSequentialOutMtNotify@N7z@NArchive@@6B@ dd offset ?QueryInterface@CSequentialOutMtNotify@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:00004314                                         ; DATA XREF: NArchive::N7z::CSequentialOutMtNotify::CSequentialOutMtNotify(void)+24o
.rdata:00004314                                         ; NArchive::N7z::CSequentialOutMtNotify::QueryInterface(_GUID const &,void * *)
.rdata:00004318                 dd offset ?AddRef@CSequentialOutMtNotify@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CSequentialOutMtNotify::AddRef(void)
.rdata:0000431C                 dd offset ?Release@CSequentialOutMtNotify@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CSequentialOutMtNotify::Release(void)
.rdata:00004320                 dd offset ?Write@CSequentialOutMtNotify@N7z@NArchive@@UAGJPBXIPAI@Z ; NArchive::N7z::CSequentialOutMtNotify::Write(void const *,uint,uint *)
.rdata:00004320 _rdata          ends
.rdata:00004320
.rdata$r:00004324 ; ===========================================================================
.rdata$r:00004324
.rdata$r:00004324 ; Segment type: Pure data
.rdata$r:00004324 ; Segment permissions: Read
.rdata$r:00004324 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004324                 assume cs:_rdata$r
.rdata$r:00004324                 ;org 4324h
.rdata$r:00004324 ; COMDAT (pick any)
.rdata$r:00004324                 public ??_R4CSequentialOutMtNotify@N7z@NArchive@@6B@
.rdata$r:00004324 ; const NArchive::N7z::CSequentialOutMtNotify::`RTTI Complete Object Locator'
.rdata$r:00004324 ??_R4CSequentialOutMtNotify@N7z@NArchive@@6B@ db    0
.rdata$r:00004324                                         ; DATA XREF: .rdata:00004310o
.rdata$r:00004325                 db    0
.rdata$r:00004326                 db    0
.rdata$r:00004327                 db    0
.rdata$r:00004328                 db    0
.rdata$r:00004329                 db    0
.rdata$r:0000432A                 db    0
.rdata$r:0000432B                 db    0
.rdata$r:0000432C                 db    0
.rdata$r:0000432D                 db    0
.rdata$r:0000432E                 db    0
.rdata$r:0000432F                 db    0
.rdata$r:00004330                 dd offset ??_R0?AVCSequentialOutMtNotify@N7z@NArchive@@@8 ; NArchive::N7z::CSequentialOutMtNotify `RTTI Type Descriptor'
.rdata$r:00004334                 dd offset ??_R3CSequentialOutMtNotify@N7z@NArchive@@8 ; NArchive::N7z::CSequentialOutMtNotify::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004334 _rdata$r        ends
.rdata$r:00004334
.data:00004338 ; ===========================================================================
.data:00004338
.data:00004338 ; Segment type: Pure data
.data:00004338 ; Segment permissions: Read/Write
.data:00004338 _data           segment dword public 'DATA' use32
.data:00004338                 assume cs:_data
.data:00004338                 ;org 4338h
.data:00004338 ; COMDAT (pick any)
.data:00004338                 public ??_R0?AVCSequentialOutMtNotify@N7z@NArchive@@@8
.data:00004338 ; class NArchive::N7z::CSequentialOutMtNotify `RTTI Type Descriptor'
.data:00004338 ??_R0?AVCSequentialOutMtNotify@N7z@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00004338                                         ; DATA XREF: .rdata$r:00004330o
.data:00004338                                         ; .rdata$r:NArchive::N7z::CSequentialOutMtNotify::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00004338                                         ; const type_info::`vftable'
.data:0000433C                 align 10h
.data:00004340 a_?avcsequent_0 db '.?AVCSequentialOutMtNotify@N7z@NArchive@@',0
.data:0000436A                 align 4
.data:0000436A _data           ends
.data:0000436A
.rdata$r:0000436C ; ===========================================================================
.rdata$r:0000436C
.rdata$r:0000436C ; Segment type: Pure data
.rdata$r:0000436C ; Segment permissions: Read
.rdata$r:0000436C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000436C                 assume cs:_rdata$r
.rdata$r:0000436C                 ;org 436Ch
.rdata$r:0000436C ; COMDAT (pick any)
.rdata$r:0000436C                 public ??_R3CSequentialOutMtNotify@N7z@NArchive@@8
.rdata$r:0000436C ; NArchive::N7z::CSequentialOutMtNotify::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000436C ??_R3CSequentialOutMtNotify@N7z@NArchive@@8 db    0
.rdata$r:0000436C                                         ; DATA XREF: .rdata$r:00004334o
.rdata$r:0000436C                                         ; .rdata$r:000043A8o
.rdata$r:0000436D                 db    0
.rdata$r:0000436E                 db    0
.rdata$r:0000436F                 db    0
.rdata$r:00004370                 db    1
.rdata$r:00004371                 db    0
.rdata$r:00004372                 db    0
.rdata$r:00004373                 db    0
.rdata$r:00004374                 db    4
.rdata$r:00004375                 db    0
.rdata$r:00004376                 db    0
.rdata$r:00004377                 db    0
.rdata$r:00004378                 dd offset ??_R2CSequentialOutMtNotify@N7z@NArchive@@8 ; NArchive::N7z::CSequentialOutMtNotify::`RTTI Base Class Array'
.rdata$r:00004378 _rdata$r        ends
.rdata$r:00004378
.rdata$r:0000437C ; ===========================================================================
.rdata$r:0000437C
.rdata$r:0000437C ; Segment type: Pure data
.rdata$r:0000437C ; Segment permissions: Read
.rdata$r:0000437C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000437C                 assume cs:_rdata$r
.rdata$r:0000437C                 ;org 437Ch
.rdata$r:0000437C ; COMDAT (pick any)
.rdata$r:0000437C                 public ??_R2CSequentialOutMtNotify@N7z@NArchive@@8
.rdata$r:0000437C ; NArchive::N7z::CSequentialOutMtNotify::`RTTI Base Class Array'
.rdata$r:0000437C ??_R2CSequentialOutMtNotify@N7z@NArchive@@8 dd offset ??_R1A@?0A@EA@CSequentialOutMtNotify@N7z@NArchive@@8
.rdata$r:0000437C                                         ; DATA XREF: .rdata$r:00004378o
.rdata$r:0000437C                                         ; NArchive::N7z::CSequentialOutMtNotify::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004380                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004384                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004388                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000438C                 db    0
.rdata$r:0000438D                 align 10h
.rdata$r:0000438D _rdata$r        ends
.rdata$r:0000438D
.rdata$r:00004390 ; ===========================================================================
.rdata$r:00004390
.rdata$r:00004390 ; Segment type: Pure data
.rdata$r:00004390 ; Segment permissions: Read
.rdata$r:00004390 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004390                 assume cs:_rdata$r
.rdata$r:00004390                 ;org 4390h
.rdata$r:00004390 ; COMDAT (pick any)
.rdata$r:00004390                 public ??_R1A@?0A@EA@CSequentialOutMtNotify@N7z@NArchive@@8
.rdata$r:00004390 ; NArchive::N7z::CSequentialOutMtNotify::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004390 ??_R1A@?0A@EA@CSequentialOutMtNotify@N7z@NArchive@@8 dd offset ??_R0?AVCSequentialOutMtNotify@N7z@NArchive@@@8
.rdata$r:00004390                                         ; DATA XREF: .rdata$r:NArchive::N7z::CSequentialOutMtNotify::`RTTI Base Class Array'o
.rdata$r:00004390                                         ; NArchive::N7z::CSequentialOutMtNotify `RTTI Type Descriptor'
.rdata$r:00004394                 db    3
.rdata$r:00004395                 db    0
.rdata$r:00004396                 db    0
.rdata$r:00004397                 db    0
.rdata$r:00004398                 db    0
.rdata$r:00004399                 db    0
.rdata$r:0000439A                 db    0
.rdata$r:0000439B                 db    0
.rdata$r:0000439C                 db 0FFh
.rdata$r:0000439D                 db 0FFh
.rdata$r:0000439E                 db 0FFh
.rdata$r:0000439F                 db 0FFh
.rdata$r:000043A0                 db    0
.rdata$r:000043A1                 db    0
.rdata$r:000043A2                 db    0
.rdata$r:000043A3                 db    0
.rdata$r:000043A4                 db  40h ; @
.rdata$r:000043A5                 db    0
.rdata$r:000043A6                 db    0
.rdata$r:000043A7                 db    0
.rdata$r:000043A8                 dd offset ??_R3CSequentialOutMtNotify@N7z@NArchive@@8 ; NArchive::N7z::CSequentialOutMtNotify::`RTTI Class Hierarchy Descriptor'
.rdata$r:000043A8 _rdata$r        ends
.rdata$r:000043A8
.text:000043AC ; ===========================================================================
.text:000043AC
.text:000043AC ; Segment type: Pure code
.text:000043AC ; Segment permissions: Read/Execute
.text:000043AC _text           segment para public 'CODE' use32
.text:000043AC                 assume cs:_text
.text:000043AC                 ;org 43ACh
.text:000043AC ; COMDAT (pick any)
.text:000043AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000043AC
.text:000043AC ; =============== S U B R O U T I N E =======================================
.text:000043AC
.text:000043AC ; Attributes: bp-based frame
.text:000043AC
.text:000043AC ; __int32 __stdcall NArchive::N7z::CSequentialOutMtNotify::QueryInterface(NArchive::N7z::CSequentialOutMtNotify *this, const struct _GUID *Buf1, void **)
.text:000043AC                 public ?QueryInterface@CSequentialOutMtNotify@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:000043AC ?QueryInterface@CSequentialOutMtNotify@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000043AC                                         ; DATA XREF: .rdata:const NArchive::N7z::CSequentialOutMtNotify::`vftable'o
.text:000043AC
.text:000043AC this            = dword ptr  8
.text:000043AC Buf1            = dword ptr  0Ch
.text:000043AC arg_8           = dword ptr  10h
.text:000043AC
.text:000043AC                 push    ebp
.text:000043AD                 mov     ebp, esp
.text:000043AF                 mov     eax, [ebp+arg_8]
.text:000043B2                 mov     dword ptr [eax], 0
.text:000043B8                 push    offset _IID_IUnknown ; Buf2
.text:000043BD                 mov     ecx, [ebp+Buf1]
.text:000043C0                 push    ecx             ; Buf1
.text:000043C1                 call    ___@8           ; __(x,x)
.text:000043C6                 test    eax, eax
.text:000043C8                 jz      short loc_43D4
.text:000043CA                 mov     edx, [ebp+arg_8]
.text:000043CD                 mov     eax, [ebp+this]
.text:000043D0                 mov     [edx], eax
.text:000043D2                 jmp     short loc_43F7
.text:000043D4 ; ---------------------------------------------------------------------------
.text:000043D4
.text:000043D4 loc_43D4:                               ; CODE XREF: NArchive::N7z::CSequentialOutMtNotify::QueryInterface(_GUID const &,void * *)+1Cj
.text:000043D4                 push    offset _IID_ISequentialOutStream ; Buf2
.text:000043D9                 mov     ecx, [ebp+Buf1]
.text:000043DC                 push    ecx             ; Buf1
.text:000043DD                 call    ___@8           ; __(x,x)
.text:000043E2                 test    eax, eax
.text:000043E4                 jz      short loc_43F0
.text:000043E6                 mov     edx, [ebp+arg_8]
.text:000043E9                 mov     eax, [ebp+this]
.text:000043EC                 mov     [edx], eax
.text:000043EE                 jmp     short loc_43F7
.text:000043F0 ; ---------------------------------------------------------------------------
.text:000043F0
.text:000043F0 loc_43F0:                               ; CODE XREF: NArchive::N7z::CSequentialOutMtNotify::QueryInterface(_GUID const &,void * *)+38j
.text:000043F0                 mov     eax, 80004002h
.text:000043F5                 jmp     short loc_4408
.text:000043F7 ; ---------------------------------------------------------------------------
.text:000043F7
.text:000043F7 loc_43F7:                               ; CODE XREF: NArchive::N7z::CSequentialOutMtNotify::QueryInterface(_GUID const &,void * *)+26j
.text:000043F7                                         ; NArchive::N7z::CSequentialOutMtNotify::QueryInterface(_GUID const &,void * *)+42j
.text:000043F7                 mov     ecx, [ebp+this]
.text:000043FA                 mov     edx, [ecx+4]
.text:000043FD                 add     edx, 1
.text:00004400                 mov     eax, [ebp+this]
.text:00004403                 mov     [eax+4], edx
.text:00004406                 xor     eax, eax
.text:00004408
.text:00004408 loc_4408:                               ; CODE XREF: NArchive::N7z::CSequentialOutMtNotify::QueryInterface(_GUID const &,void * *)+49j
.text:00004408                 cmp     ebp, esp
.text:0000440A                 call    __RTC_CheckEsp
.text:0000440F                 pop     ebp
.text:00004410                 retn    0Ch
.text:00004410 ?QueryInterface@CSequentialOutMtNotify@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:00004410
.text:00004410 ; ---------------------------------------------------------------------------
.text:00004413                 align 4
.text:00004413 _text           ends
.text:00004413
.text:00004414 ; ===========================================================================
.text:00004414
.text:00004414 ; Segment type: Pure code
.text:00004414 ; Segment permissions: Read/Execute
.text:00004414 _text           segment para public 'CODE' use32
.text:00004414                 assume cs:_text
.text:00004414                 ;org 4414h
.text:00004414 ; COMDAT (pick any)
.text:00004414                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004414
.text:00004414 ; =============== S U B R O U T I N E =======================================
.text:00004414
.text:00004414 ; Attributes: bp-based frame
.text:00004414
.text:00004414 ; unsigned __int32 __stdcall NArchive::N7z::CSequentialOutMtNotify::AddRef(NArchive::N7z::CSequentialOutMtNotify *this)
.text:00004414                 public ?AddRef@CSequentialOutMtNotify@N7z@NArchive@@UAGKXZ
.text:00004414 ?AddRef@CSequentialOutMtNotify@N7z@NArchive@@UAGKXZ proc near
.text:00004414                                         ; DATA XREF: .rdata:00004318o
.text:00004414
.text:00004414 var_4           = dword ptr -4
.text:00004414 this            = dword ptr  8
.text:00004414
.text:00004414                 push    ebp
.text:00004415                 mov     ebp, esp
.text:00004417                 push    ecx
.text:00004418                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000441F                 mov     eax, [ebp+this]
.text:00004422                 mov     ecx, [eax+4]
.text:00004425                 add     ecx, 1
.text:00004428                 mov     [ebp+var_4], ecx
.text:0000442B                 mov     edx, [ebp+this]
.text:0000442E                 mov     eax, [ebp+var_4]
.text:00004431                 mov     [edx+4], eax
.text:00004434                 mov     eax, [ebp+var_4]
.text:00004437                 mov     esp, ebp
.text:00004439                 pop     ebp
.text:0000443A                 retn    4
.text:0000443A ?AddRef@CSequentialOutMtNotify@N7z@NArchive@@UAGKXZ endp
.text:0000443A
.text:0000443A ; ---------------------------------------------------------------------------
.text:0000443D                 align 10h
.text:0000443D _text           ends
.text:0000443D
.text:00004440 ; ===========================================================================
.text:00004440
.text:00004440 ; Segment type: Pure code
.text:00004440 ; Segment permissions: Read/Execute
.text:00004440 _text           segment para public 'CODE' use32
.text:00004440                 assume cs:_text
.text:00004440                 ;org 4440h
.text:00004440 ; COMDAT (pick any)
.text:00004440                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004440
.text:00004440 ; =============== S U B R O U T I N E =======================================
.text:00004440
.text:00004440 ; Attributes: bp-based frame
.text:00004440
.text:00004440 ; unsigned __int32 __stdcall NArchive::N7z::CSequentialOutMtNotify::Release(NArchive::N7z::CSequentialOutMtNotify *this)
.text:00004440                 public ?Release@CSequentialOutMtNotify@N7z@NArchive@@UAGKXZ
.text:00004440 ?Release@CSequentialOutMtNotify@N7z@NArchive@@UAGKXZ proc near
.text:00004440                                         ; DATA XREF: .rdata:0000431Co
.text:00004440
.text:00004440 var_10          = dword ptr -10h
.text:00004440 var_C           = dword ptr -0Ch
.text:00004440 var_8           = dword ptr -8
.text:00004440 var_4           = dword ptr -4
.text:00004440 this            = dword ptr  8
.text:00004440
.text:00004440                 push    ebp
.text:00004441                 mov     ebp, esp
.text:00004443                 sub     esp, 10h
.text:00004446                 mov     eax, 0CCCCCCCCh
.text:0000444B                 mov     [ebp+var_10], eax
.text:0000444E                 mov     [ebp+var_C], eax
.text:00004451                 mov     [ebp+var_8], eax
.text:00004454                 mov     [ebp+var_4], eax
.text:00004457                 mov     eax, [ebp+this]
.text:0000445A                 mov     ecx, [eax+4]
.text:0000445D                 sub     ecx, 1
.text:00004460                 mov     [ebp+var_C], ecx
.text:00004463                 mov     edx, [ebp+this]
.text:00004466                 mov     eax, [ebp+var_C]
.text:00004469                 mov     [edx+4], eax
.text:0000446C                 cmp     [ebp+var_C], 0
.text:00004470                 jz      short loc_447A
.text:00004472                 mov     ecx, [ebp+this]
.text:00004475                 mov     eax, [ecx+4]
.text:00004478                 jmp     short loc_44A4
.text:0000447A ; ---------------------------------------------------------------------------
.text:0000447A
.text:0000447A loc_447A:                               ; CODE XREF: NArchive::N7z::CSequentialOutMtNotify::Release(void)+30j
.text:0000447A                 mov     edx, [ebp+this]
.text:0000447D                 mov     [ebp+var_8], edx
.text:00004480                 mov     eax, [ebp+var_8]
.text:00004483                 mov     [ebp+var_4], eax
.text:00004486                 cmp     [ebp+var_4], 0
.text:0000448A                 jz      short loc_449B
.text:0000448C                 push    1
.text:0000448E                 mov     ecx, [ebp+var_4]
.text:00004491                 call    ??_GCSequentialOutMtNotify@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CSequentialOutMtNotify::`scalar deleting destructor'(uint)
.text:00004496                 mov     [ebp+var_10], eax
.text:00004499                 jmp     short loc_44A2
.text:0000449B ; ---------------------------------------------------------------------------
.text:0000449B
.text:0000449B loc_449B:                               ; CODE XREF: NArchive::N7z::CSequentialOutMtNotify::Release(void)+4Aj
.text:0000449B                 mov     [ebp+var_10], 0
.text:000044A2
.text:000044A2 loc_44A2:                               ; CODE XREF: NArchive::N7z::CSequentialOutMtNotify::Release(void)+59j
.text:000044A2                 xor     eax, eax
.text:000044A4
.text:000044A4 loc_44A4:                               ; CODE XREF: NArchive::N7z::CSequentialOutMtNotify::Release(void)+38j
.text:000044A4                 add     esp, 10h
.text:000044A7                 cmp     ebp, esp
.text:000044A9                 call    __RTC_CheckEsp
.text:000044AE                 mov     esp, ebp
.text:000044B0                 pop     ebp
.text:000044B1                 retn    4
.text:000044B1 ?Release@CSequentialOutMtNotify@N7z@NArchive@@UAGKXZ endp
.text:000044B1
.text:000044B1 _text           ends
.text:000044B1
.text:000044B4 ; ===========================================================================
.text:000044B4
.text:000044B4 ; Segment type: Pure code
.text:000044B4 ; Segment permissions: Read/Execute
.text:000044B4 _text           segment para public 'CODE' use32
.text:000044B4                 assume cs:_text
.text:000044B4                 ;org 44B4h
.text:000044B4 ; COMDAT (pick any)
.text:000044B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000044B4
.text:000044B4 ; =============== S U B R O U T I N E =======================================
.text:000044B4
.text:000044B4 ; Attributes: bp-based frame
.text:000044B4
.text:000044B4 ; public: void * __thiscall NArchive::N7z::CSequentialOutMtNotify::`scalar deleting destructor'(unsigned int)
.text:000044B4                 public ??_GCSequentialOutMtNotify@N7z@NArchive@@QAEPAXI@Z
.text:000044B4 ??_GCSequentialOutMtNotify@N7z@NArchive@@QAEPAXI@Z proc near
.text:000044B4                                         ; CODE XREF: NArchive::N7z::CSequentialOutMtNotify::Release(void)+51p
.text:000044B4
.text:000044B4 var_4           = dword ptr -4
.text:000044B4 arg_0           = dword ptr  8
.text:000044B4
.text:000044B4                 push    ebp
.text:000044B5                 mov     ebp, esp
.text:000044B7                 push    ecx
.text:000044B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000044BF                 mov     [ebp+var_4], ecx
.text:000044C2                 mov     ecx, [ebp+var_4] ; this
.text:000044C5                 call    ??1CSequentialOutMtNotify@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CSequentialOutMtNotify::~CSequentialOutMtNotify(void)
.text:000044CA                 mov     eax, [ebp+arg_0]
.text:000044CD                 and     eax, 1
.text:000044D0                 jz      short loc_44DE
.text:000044D2                 mov     ecx, [ebp+var_4]
.text:000044D5                 push    ecx             ; void *
.text:000044D6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000044DB                 add     esp, 4
.text:000044DE
.text:000044DE loc_44DE:                               ; CODE XREF: NArchive::N7z::CSequentialOutMtNotify::`scalar deleting destructor'(uint)+1Cj
.text:000044DE                 mov     eax, [ebp+var_4]
.text:000044E1                 add     esp, 4
.text:000044E4                 cmp     ebp, esp
.text:000044E6                 call    __RTC_CheckEsp
.text:000044EB                 mov     esp, ebp
.text:000044ED                 pop     ebp
.text:000044EE                 retn    4
.text:000044EE ??_GCSequentialOutMtNotify@N7z@NArchive@@QAEPAXI@Z endp
.text:000044EE
.text:000044EE ; ---------------------------------------------------------------------------
.text:000044F1                 align 4
.text:000044F1 _text           ends
.text:000044F1
.text:000044F4 ; ===========================================================================
.text:000044F4
.text:000044F4 ; Segment type: Pure code
.text:000044F4 ; Segment permissions: Read/Execute
.text:000044F4 _text           segment para public 'CODE' use32
.text:000044F4                 assume cs:_text
.text:000044F4                 ;org 44F4h
.text:000044F4 ; COMDAT (pick any)
.text:000044F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000044F4
.text:000044F4 ; =============== S U B R O U T I N E =======================================
.text:000044F4
.text:000044F4 ; Attributes: bp-based frame
.text:000044F4
.text:000044F4 ; _DWORD __thiscall NArchive::N7z::CSequentialOutMtNotify::~CSequentialOutMtNotify(NArchive::N7z::CSequentialOutMtNotify *__hidden this)
.text:000044F4                 public ??1CSequentialOutMtNotify@N7z@NArchive@@QAE@XZ
.text:000044F4 ??1CSequentialOutMtNotify@N7z@NArchive@@QAE@XZ proc near
.text:000044F4                                         ; CODE XREF: NArchive::N7z::CSequentialOutMtNotify::`scalar deleting destructor'(uint)+11p
.text:000044F4
.text:000044F4 var_4           = dword ptr -4
.text:000044F4
.text:000044F4                 push    ebp
.text:000044F5                 mov     ebp, esp
.text:000044F7                 push    ecx
.text:000044F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000044FF                 mov     [ebp+var_4], ecx
.text:00004502                 mov     ecx, [ebp+var_4]
.text:00004505                 add     ecx, 8
.text:00004508                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000450D                 add     esp, 4
.text:00004510                 cmp     ebp, esp
.text:00004512                 call    __RTC_CheckEsp
.text:00004517                 mov     esp, ebp
.text:00004519                 pop     ebp
.text:0000451A                 retn
.text:0000451A ??1CSequentialOutMtNotify@N7z@NArchive@@QAE@XZ endp
.text:0000451A
.text:0000451A ; ---------------------------------------------------------------------------
.text:0000451B                 align 4
.text:0000451B _text           ends
.text:0000451B
.text:0000451C ; ===========================================================================
.text:0000451C
.text:0000451C ; Segment type: Pure code
.text:0000451C ; Segment permissions: Read/Execute
.text:0000451C _text           segment para public 'CODE' use32
.text:0000451C                 assume cs:_text
.text:0000451C                 ;org 451Ch
.text:0000451C ; COMDAT (pick any)
.text:0000451C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000451C
.text:0000451C ; =============== S U B R O U T I N E =======================================
.text:0000451C
.text:0000451C ; Attributes: bp-based frame
.text:0000451C
.text:0000451C ; public: __thiscall CSequentialInStreamSizeCount2::CSequentialInStreamSizeCount2(void)
.text:0000451C                 public ??0CSequentialInStreamSizeCount2@@QAE@XZ
.text:0000451C ??0CSequentialInStreamSizeCount2@@QAE@XZ proc near
.text:0000451C                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+283p
.text:0000451C
.text:0000451C var_10          = dword ptr -10h
.text:0000451C var_C           = dword ptr -0Ch
.text:0000451C var_4           = dword ptr -4
.text:0000451C
.text:0000451C                 push    ebp
.text:0000451D                 mov     ebp, esp
.text:0000451F                 push    0FFFFFFFFh
.text:00004521                 push    offset __ehhandler$??0CSequentialInStreamSizeCount2@@QAE@XZ
.text:00004526                 mov     eax, large fs:0
.text:0000452C                 push    eax
.text:0000452D                 push    ecx
.text:0000452E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004535                 mov     eax, dword ptr ds:___security_cookie
.text:0000453A                 xor     eax, ebp
.text:0000453C                 push    eax
.text:0000453D                 lea     eax, [ebp+var_C]
.text:00004540                 mov     large fs:0, eax
.text:00004546                 mov     [ebp+var_10], ecx
.text:00004549                 mov     ecx, [ebp+var_10] ; this
.text:0000454C                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00004551                 mov     ecx, [ebp+var_10]
.text:00004554                 add     ecx, 4          ; this
.text:00004557                 call    ??0ICompressGetSubStreamSize@@QAE@XZ ; ICompressGetSubStreamSize::ICompressGetSubStreamSize(void)
.text:0000455C                 mov     ecx, [ebp+var_10]
.text:0000455F                 add     ecx, 8          ; this
.text:00004562                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00004567                 mov     eax, [ebp+var_10]
.text:0000456A                 mov     dword ptr [eax], offset ??_7CSequentialInStreamSizeCount2@@6BISequentialInStream@@@ ; const CSequentialInStreamSizeCount2::`vftable'{for `ISequentialInStream'}
.text:00004570                 mov     ecx, [ebp+var_10]
.text:00004573                 mov     dword ptr [ecx+4], offset ??_7CSequentialInStreamSizeCount2@@6BICompressGetSubStreamSize@@@ ; const CSequentialInStreamSizeCount2::`vftable'{for `ICompressGetSubStreamSize'}
.text:0000457A                 mov     ecx, [ebp+var_10]
.text:0000457D                 add     ecx, 0Ch
.text:00004580                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00004585                 mov     [ebp+var_4], 0
.text:0000458C                 mov     ecx, [ebp+var_10]
.text:0000458F                 add     ecx, 10h
.text:00004592                 call    ??0?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressGetSubStreamSize>::CMyComPtr<ICompressGetSubStreamSize>(void)
.text:00004597                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000459E                 mov     eax, [ebp+var_10]
.text:000045A1                 mov     ecx, [ebp+var_C]
.text:000045A4                 mov     large fs:0, ecx
.text:000045AB                 pop     ecx
.text:000045AC                 add     esp, 10h
.text:000045AF                 cmp     ebp, esp
.text:000045B1                 call    __RTC_CheckEsp
.text:000045B6                 mov     esp, ebp
.text:000045B8                 pop     ebp
.text:000045B9                 retn
.text:000045B9 ??0CSequentialInStreamSizeCount2@@QAE@XZ endp
.text:000045B9
.text:000045B9 ; ---------------------------------------------------------------------------
.text:000045BA                 align 4
.text:000045BA _text           ends
.text:000045BA
.text$x:000045BC ; ===========================================================================
.text$x:000045BC
.text$x:000045BC ; Segment type: Pure code
.text$x:000045BC ; Segment permissions: Read/Execute
.text$x:000045BC _text$x         segment para public 'CODE' use32
.text$x:000045BC                 assume cs:_text$x
.text$x:000045BC                 ;org 45BCh
.text$x:000045BC ; COMDAT (pick associative to section at 451C)
.text$x:000045BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000045BC
.text$x:000045BC ; =============== S U B R O U T I N E =======================================
.text$x:000045BC
.text$x:000045BC
.text$x:000045BC __unwindfunclet$??0CSequentialInStreamSizeCount2@@QAE@XZ$0 proc near
.text$x:000045BC                                         ; DATA XREF: .xdata$x:00004610o
.text$x:000045BC                 mov     ecx, [ebp-10h]
.text$x:000045BF                 add     ecx, 0Ch
.text$x:000045C2                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:000045C2 __unwindfunclet$??0CSequentialInStreamSizeCount2@@QAE@XZ$0 endp
.text$x:000045C2
.text$x:000045C7
.text$x:000045C7 ; =============== S U B R O U T I N E =======================================
.text$x:000045C7
.text$x:000045C7
.text$x:000045C7 __ehhandler$??0CSequentialInStreamSizeCount2@@QAE@XZ proc near
.text$x:000045C7                                         ; DATA XREF: CSequentialInStreamSizeCount2::CSequentialInStreamSizeCount2(void)+5o
.text$x:000045C7
.text$x:000045C7 arg_4           = dword ptr  8
.text$x:000045C7
.text$x:000045C7                 mov     edx, [esp+arg_4]
.text$x:000045CB                 lea     eax, [edx+0Ch]
.text$x:000045CE                 mov     ecx, [edx-8]
.text$x:000045D1                 xor     ecx, eax
.text$x:000045D3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000045D8                 mov     eax, offset __ehfuncinfo$??0CSequentialInStreamSizeCount2@@QAE@XZ
.text$x:000045DD                 jmp     ___CxxFrameHandler3
.text$x:000045DD __ehhandler$??0CSequentialInStreamSizeCount2@@QAE@XZ endp
.text$x:000045DD
.text$x:000045DD ; ---------------------------------------------------------------------------
.text$x:000045E2                 align 4
.text$x:000045E2 _text$x         ends
.text$x:000045E2
.rdata:000045E4 ; ===========================================================================
.rdata:000045E4
.rdata:000045E4 ; Segment type: Pure data
.rdata:000045E4 ; Segment permissions: Read
.rdata:000045E4 _rdata          segment dword public 'DATA' use32
.rdata:000045E4                 assume cs:_rdata
.rdata:000045E4                 ;org 45E4h
.rdata:000045E4 ; COMDAT (pick largest)
.rdata:000045E4                 dd offset ??_R4CSequentialInStreamSizeCount2@@6BICompressGetSubStreamSize@@@ ; const CSequentialInStreamSizeCount2::`RTTI Complete Object Locator'{for `ICompressGetSubStreamSize'}
.rdata:000045E8                 public ??_7CSequentialInStreamSizeCount2@@6BICompressGetSubStreamSize@@@
.rdata:000045E8 ; const CSequentialInStreamSizeCount2::`vftable'{for `ICompressGetSubStreamSize'}
.rdata:000045E8 ??_7CSequentialInStreamSizeCount2@@6BICompressGetSubStreamSize@@@ dd offset ?QueryInterface@CSequentialInStreamSizeCount2@@W3AGJABU_GUID@@PAPAX@Z
.rdata:000045E8                                         ; DATA XREF: CSequentialInStreamSizeCount2::CSequentialInStreamSizeCount2(void)+57o
.rdata:000045E8                                         ; [thunk]:CSequentialInStreamSizeCount2::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:000045EC                 dd offset ?AddRef@CSequentialInStreamSizeCount2@@W3AGKXZ ; [thunk]:CSequentialInStreamSizeCount2::AddRef`adjustor{4}' (void)
.rdata:000045F0                 dd offset ?Release@CSequentialInStreamSizeCount2@@W3AGKXZ ; [thunk]:CSequentialInStreamSizeCount2::Release`adjustor{4}' (void)
.rdata:000045F4                 dd offset ?GetSubStreamSize@CSequentialInStreamSizeCount2@@UAGJ_KPA_K@Z ; CSequentialInStreamSizeCount2::GetSubStreamSize(unsigned __int64,unsigned __int64 *)
.rdata:000045F4 _rdata          ends
.rdata:000045F4
.rdata:000045F8 ; ===========================================================================
.rdata:000045F8
.rdata:000045F8 ; Segment type: Pure data
.rdata:000045F8 ; Segment permissions: Read
.rdata:000045F8 _rdata          segment dword public 'DATA' use32
.rdata:000045F8                 assume cs:_rdata
.rdata:000045F8                 ;org 45F8h
.rdata:000045F8 ; COMDAT (pick largest)
.rdata:000045F8                 dd offset ??_R4CSequentialInStreamSizeCount2@@6BISequentialInStream@@@ ; const CSequentialInStreamSizeCount2::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:000045FC                 public ??_7CSequentialInStreamSizeCount2@@6BISequentialInStream@@@
.rdata:000045FC ; const CSequentialInStreamSizeCount2::`vftable'{for `ISequentialInStream'}
.rdata:000045FC ??_7CSequentialInStreamSizeCount2@@6BISequentialInStream@@@ dd offset ?QueryInterface@CSequentialInStreamSizeCount2@@UAGJABU_GUID@@PAPAX@Z
.rdata:000045FC                                         ; DATA XREF: CSequentialInStreamSizeCount2::CSequentialInStreamSizeCount2(void)+4Eo
.rdata:000045FC                                         ; CSequentialInStreamSizeCount2::QueryInterface(_GUID const &,void * *)
.rdata:00004600                 dd offset ?AddRef@CSequentialInStreamSizeCount2@@UAGKXZ ; CSequentialInStreamSizeCount2::AddRef(void)
.rdata:00004604                 dd offset ?Release@CSequentialInStreamSizeCount2@@UAGKXZ ; CSequentialInStreamSizeCount2::Release(void)
.rdata:00004608                 dd offset ?Read@CSequentialInStreamSizeCount2@@UAGJPAXIPAI@Z ; CSequentialInStreamSizeCount2::Read(void *,uint,uint *)
.rdata:00004608 _rdata          ends
.rdata:00004608
.xdata$x:0000460C ; ===========================================================================
.xdata$x:0000460C
.xdata$x:0000460C ; Segment type: Pure data
.xdata$x:0000460C ; Segment permissions: Read
.xdata$x:0000460C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000460C                 assume cs:_xdata$x
.xdata$x:0000460C                 ;org 460Ch
.xdata$x:0000460C ; COMDAT (pick associative to section at 451C)
.xdata$x:0000460C __unwindtable$??0CSequentialInStreamSizeCount2@@QAE@XZ db 0FFh
.xdata$x:0000460C                                         ; DATA XREF: .xdata$x:0000461Co
.xdata$x:0000460D                 db 0FFh
.xdata$x:0000460E                 db 0FFh
.xdata$x:0000460F                 db 0FFh
.xdata$x:00004610                 dd offset __unwindfunclet$??0CSequentialInStreamSizeCount2@@QAE@XZ$0
.xdata$x:00004614 __ehfuncinfo$??0CSequentialInStreamSizeCount2@@QAE@XZ db  22h ; "
.xdata$x:00004614                                         ; DATA XREF: __ehhandler$??0CSequentialInStreamSizeCount2@@QAE@XZ+11o
.xdata$x:00004615                 db    5
.xdata$x:00004616                 db  93h ; ô
.xdata$x:00004617                 db  19h
.xdata$x:00004618                 db    1
.xdata$x:00004619                 db    0
.xdata$x:0000461A                 db    0
.xdata$x:0000461B                 db    0
.xdata$x:0000461C                 dd offset __unwindtable$??0CSequentialInStreamSizeCount2@@QAE@XZ
.xdata$x:00004620                 db    0
.xdata$x:00004621                 db    0
.xdata$x:00004622                 db    0
.xdata$x:00004623                 db    0
.xdata$x:00004624                 db    0
.xdata$x:00004625                 db    0
.xdata$x:00004626                 db    0
.xdata$x:00004627                 db    0
.xdata$x:00004628                 db    0
.xdata$x:00004629                 db    0
.xdata$x:0000462A                 db    0
.xdata$x:0000462B                 db    0
.xdata$x:0000462C                 db    0
.xdata$x:0000462D                 db    0
.xdata$x:0000462E                 db    0
.xdata$x:0000462F                 db    0
.xdata$x:00004630                 db    0
.xdata$x:00004631                 db    0
.xdata$x:00004632                 db    0
.xdata$x:00004633                 db    0
.xdata$x:00004634                 db    1
.xdata$x:00004635                 db    0
.xdata$x:00004636                 db    0
.xdata$x:00004637                 db    0
.xdata$x:00004637 _xdata$x        ends
.xdata$x:00004637
.rdata$r:00004638 ; ===========================================================================
.rdata$r:00004638
.rdata$r:00004638 ; Segment type: Pure data
.rdata$r:00004638 ; Segment permissions: Read
.rdata$r:00004638 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004638                 assume cs:_rdata$r
.rdata$r:00004638                 ;org 4638h
.rdata$r:00004638 ; COMDAT (pick any)
.rdata$r:00004638                 public ??_R4CSequentialInStreamSizeCount2@@6BISequentialInStream@@@
.rdata$r:00004638 ; const CSequentialInStreamSizeCount2::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:00004638 ??_R4CSequentialInStreamSizeCount2@@6BISequentialInStream@@@ db    0
.rdata$r:00004638                                         ; DATA XREF: .rdata:000045F8o
.rdata$r:00004639                 db    0
.rdata$r:0000463A                 db    0
.rdata$r:0000463B                 db    0
.rdata$r:0000463C                 db    0
.rdata$r:0000463D                 db    0
.rdata$r:0000463E                 db    0
.rdata$r:0000463F                 db    0
.rdata$r:00004640                 db    0
.rdata$r:00004641                 db    0
.rdata$r:00004642                 db    0
.rdata$r:00004643                 db    0
.rdata$r:00004644                 dd offset ??_R0?AVCSequentialInStreamSizeCount2@@@8 ; CSequentialInStreamSizeCount2 `RTTI Type Descriptor'
.rdata$r:00004648                 dd offset ??_R3CSequentialInStreamSizeCount2@@8 ; CSequentialInStreamSizeCount2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004648 _rdata$r        ends
.rdata$r:00004648
.data:0000464C ; ===========================================================================
.data:0000464C
.data:0000464C ; Segment type: Pure data
.data:0000464C ; Segment permissions: Read/Write
.data:0000464C _data           segment dword public 'DATA' use32
.data:0000464C                 assume cs:_data
.data:0000464C                 ;org 464Ch
.data:0000464C ; COMDAT (pick any)
.data:0000464C                 public ??_R0?AVCSequentialInStreamSizeCount2@@@8
.data:0000464C ; class CSequentialInStreamSizeCount2 `RTTI Type Descriptor'
.data:0000464C ??_R0?AVCSequentialInStreamSizeCount2@@@8 dd offset ??_7type_info@@6B@
.data:0000464C                                         ; DATA XREF: .rdata$r:00004644o
.data:0000464C                                         ; .rdata$r:CSequentialInStreamSizeCount2::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000464C                                         ; const type_info::`vftable'
.data:00004650                 db    0
.data:00004651                 db    0
.data:00004652                 db    0
.data:00004653                 db    0
.data:00004654                 db  2Eh ; .
.data:00004655                 db  3Fh ; ?
.data:00004656                 db  41h ; A
.data:00004657                 db  56h ; V
.data:00004658                 db  43h ; C
.data:00004659                 db  53h ; S
.data:0000465A                 db  65h ; e
.data:0000465B                 db  71h ; q
.data:0000465C                 db  75h ; u
.data:0000465D                 db  65h ; e
.data:0000465E                 db  6Eh ; n
.data:0000465F                 db  74h ; t
.data:00004660                 db  69h ; i
.data:00004661                 db  61h ; a
.data:00004662                 db  6Ch ; l
.data:00004663                 db  49h ; I
.data:00004664                 db  6Eh ; n
.data:00004665                 db  53h ; S
.data:00004666                 db  74h ; t
.data:00004667                 db  72h ; r
.data:00004668                 db  65h ; e
.data:00004669                 db  61h ; a
.data:0000466A                 db  6Dh ; m
.data:0000466B                 db  53h ; S
.data:0000466C                 db  69h ; i
.data:0000466D                 db  7Ah ; z
.data:0000466E                 db  65h ; e
.data:0000466F                 db  43h ; C
.data:00004670                 db  6Fh ; o
.data:00004671                 db  75h ; u
.data:00004672                 db  6Eh ; n
.data:00004673                 db  74h ; t
.data:00004674                 db  32h ; 2
.data:00004675                 db  40h ; @
.data:00004676                 db  40h ; @
.data:00004677                 db    0
.data:00004677 _data           ends
.data:00004677
.rdata$r:00004678 ; ===========================================================================
.rdata$r:00004678
.rdata$r:00004678 ; Segment type: Pure data
.rdata$r:00004678 ; Segment permissions: Read
.rdata$r:00004678 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004678                 assume cs:_rdata$r
.rdata$r:00004678                 ;org 4678h
.rdata$r:00004678 ; COMDAT (pick any)
.rdata$r:00004678                 public ??_R3CSequentialInStreamSizeCount2@@8
.rdata$r:00004678 ; CSequentialInStreamSizeCount2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004678 ??_R3CSequentialInStreamSizeCount2@@8 db    0
.rdata$r:00004678                                         ; DATA XREF: .rdata$r:00004648o
.rdata$r:00004678                                         ; .rdata$r:000046BCo ...
.rdata$r:00004679                 db    0
.rdata$r:0000467A                 db    0
.rdata$r:0000467B                 db    0
.rdata$r:0000467C                 db    5
.rdata$r:0000467D                 db    0
.rdata$r:0000467E                 db    0
.rdata$r:0000467F                 db    0
.rdata$r:00004680                 db    6
.rdata$r:00004681                 db    0
.rdata$r:00004682                 db    0
.rdata$r:00004683                 db    0
.rdata$r:00004684                 dd offset ??_R2CSequentialInStreamSizeCount2@@8 ; CSequentialInStreamSizeCount2::`RTTI Base Class Array'
.rdata$r:00004684 _rdata$r        ends
.rdata$r:00004684
.rdata$r:00004688 ; ===========================================================================
.rdata$r:00004688
.rdata$r:00004688 ; Segment type: Pure data
.rdata$r:00004688 ; Segment permissions: Read
.rdata$r:00004688 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004688                 assume cs:_rdata$r
.rdata$r:00004688                 ;org 4688h
.rdata$r:00004688 ; COMDAT (pick any)
.rdata$r:00004688                 public ??_R2CSequentialInStreamSizeCount2@@8
.rdata$r:00004688 ; CSequentialInStreamSizeCount2::`RTTI Base Class Array'
.rdata$r:00004688 ??_R2CSequentialInStreamSizeCount2@@8 dd offset ??_R1A@?0A@EA@CSequentialInStreamSizeCount2@@8
.rdata$r:00004688                                         ; DATA XREF: .rdata$r:00004684o
.rdata$r:00004688                                         ; CSequentialInStreamSizeCount2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000468C                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004690                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00004694                 dd offset ??_R13?0A@EA@ICompressGetSubStreamSize@@8 ; ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00004698                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:0000469C                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:000046A0                 db    0
.rdata$r:000046A1                 align 4
.rdata$r:000046A1 _rdata$r        ends
.rdata$r:000046A1
.rdata$r:000046A4 ; ===========================================================================
.rdata$r:000046A4
.rdata$r:000046A4 ; Segment type: Pure data
.rdata$r:000046A4 ; Segment permissions: Read
.rdata$r:000046A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000046A4                 assume cs:_rdata$r
.rdata$r:000046A4                 ;org 46A4h
.rdata$r:000046A4 ; COMDAT (pick any)
.rdata$r:000046A4                 public ??_R1A@?0A@EA@CSequentialInStreamSizeCount2@@8
.rdata$r:000046A4 ; CSequentialInStreamSizeCount2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000046A4 ??_R1A@?0A@EA@CSequentialInStreamSizeCount2@@8 dd offset ??_R0?AVCSequentialInStreamSizeCount2@@@8
.rdata$r:000046A4                                         ; DATA XREF: .rdata$r:CSequentialInStreamSizeCount2::`RTTI Base Class Array'o
.rdata$r:000046A4                                         ; CSequentialInStreamSizeCount2 `RTTI Type Descriptor'
.rdata$r:000046A8                 db    5
.rdata$r:000046A9                 db    0
.rdata$r:000046AA                 db    0
.rdata$r:000046AB                 db    0
.rdata$r:000046AC                 db    0
.rdata$r:000046AD                 db    0
.rdata$r:000046AE                 db    0
.rdata$r:000046AF                 db    0
.rdata$r:000046B0                 db 0FFh
.rdata$r:000046B1                 db 0FFh
.rdata$r:000046B2                 db 0FFh
.rdata$r:000046B3                 db 0FFh
.rdata$r:000046B4                 db    0
.rdata$r:000046B5                 db    0
.rdata$r:000046B6                 db    0
.rdata$r:000046B7                 db    0
.rdata$r:000046B8                 db  40h ; @
.rdata$r:000046B9                 db    0
.rdata$r:000046BA                 db    0
.rdata$r:000046BB                 db    0
.rdata$r:000046BC                 dd offset ??_R3CSequentialInStreamSizeCount2@@8 ; CSequentialInStreamSizeCount2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000046BC _rdata$r        ends
.rdata$r:000046BC
.rdata$r:000046C0 ; ===========================================================================
.rdata$r:000046C0
.rdata$r:000046C0 ; Segment type: Pure data
.rdata$r:000046C0 ; Segment permissions: Read
.rdata$r:000046C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000046C0                 assume cs:_rdata$r
.rdata$r:000046C0                 ;org 46C0h
.rdata$r:000046C0 ; COMDAT (pick any)
.rdata$r:000046C0                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:000046C0 ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000046C0 ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:000046C0                                         ; DATA XREF: .rdata$r:0000468Co
.rdata$r:000046C0                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:000046C0                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:000046C4                 db    1
.rdata$r:000046C5                 db    0
.rdata$r:000046C6                 db    0
.rdata$r:000046C7                 db    0
.rdata$r:000046C8                 db    0
.rdata$r:000046C9                 db    0
.rdata$r:000046CA                 db    0
.rdata$r:000046CB                 db    0
.rdata$r:000046CC                 db 0FFh
.rdata$r:000046CD                 db 0FFh
.rdata$r:000046CE                 db 0FFh
.rdata$r:000046CF                 db 0FFh
.rdata$r:000046D0                 db    0
.rdata$r:000046D1                 db    0
.rdata$r:000046D2                 db    0
.rdata$r:000046D3                 db    0
.rdata$r:000046D4                 db  40h ; @
.rdata$r:000046D5                 db    0
.rdata$r:000046D6                 db    0
.rdata$r:000046D7                 db    0
.rdata$r:000046D8                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000046D8 _rdata$r        ends
.rdata$r:000046D8
.data:000046DC ; ===========================================================================
.data:000046DC
.data:000046DC ; Segment type: Pure data
.data:000046DC ; Segment permissions: Read/Write
.data:000046DC _data           segment dword public 'DATA' use32
.data:000046DC                 assume cs:_data
.data:000046DC                 ;org 46DCh
.data:000046DC ; COMDAT (pick any)
.data:000046DC                 public ??_R0?AUISequentialInStream@@@8
.data:000046DC ; struct ISequentialInStream `RTTI Type Descriptor'
.data:000046DC ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:000046DC                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000046DC                                         ; .rdata$r:00004850o
.data:000046DC                                         ; const type_info::`vftable'
.data:000046E0                 db    0
.data:000046E1                 db    0
.data:000046E2                 db    0
.data:000046E3                 db    0
.data:000046E4                 db  2Eh ; .
.data:000046E5                 db  3Fh ; ?
.data:000046E6                 db  41h ; A
.data:000046E7                 db  55h ; U
.data:000046E8                 db  49h ; I
.data:000046E9                 db  53h ; S
.data:000046EA                 db  65h ; e
.data:000046EB                 db  71h ; q
.data:000046EC                 db  75h ; u
.data:000046ED                 db  65h ; e
.data:000046EE                 db  6Eh ; n
.data:000046EF                 db  74h ; t
.data:000046F0                 db  69h ; i
.data:000046F1                 db  61h ; a
.data:000046F2                 db  6Ch ; l
.data:000046F3                 db  49h ; I
.data:000046F4                 db  6Eh ; n
.data:000046F5                 db  53h ; S
.data:000046F6                 db  74h ; t
.data:000046F7                 db  72h ; r
.data:000046F8                 db  65h ; e
.data:000046F9                 db  61h ; a
.data:000046FA                 db  6Dh ; m
.data:000046FB                 db  40h ; @
.data:000046FC                 db  40h ; @
.data:000046FD                 db    0
.data:000046FE                 align 10h
.data:000046FE _data           ends
.data:000046FE
.rdata$r:00004700 ; ===========================================================================
.rdata$r:00004700
.rdata$r:00004700 ; Segment type: Pure data
.rdata$r:00004700 ; Segment permissions: Read
.rdata$r:00004700 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004700                 assume cs:_rdata$r
.rdata$r:00004700                 ;org 4700h
.rdata$r:00004700 ; COMDAT (pick any)
.rdata$r:00004700                 public ??_R3ISequentialInStream@@8
.rdata$r:00004700 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004700 ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:000046D8o
.rdata$r:00004700                                         ; .rdata$r:00004854o
.rdata$r:00004701                 db    0
.rdata$r:00004702                 db    0
.rdata$r:00004703                 db    0
.rdata$r:00004704                 db    0
.rdata$r:00004705                 db    0
.rdata$r:00004706                 db    0
.rdata$r:00004707                 db    0
.rdata$r:00004708                 db    2
.rdata$r:00004709                 db    0
.rdata$r:0000470A                 db    0
.rdata$r:0000470B                 db    0
.rdata$r:0000470C                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:0000470C _rdata$r        ends
.rdata$r:0000470C
.rdata$r:00004710 ; ===========================================================================
.rdata$r:00004710
.rdata$r:00004710 ; Segment type: Pure data
.rdata$r:00004710 ; Segment permissions: Read
.rdata$r:00004710 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004710                 assume cs:_rdata$r
.rdata$r:00004710                 ;org 4710h
.rdata$r:00004710 ; COMDAT (pick any)
.rdata$r:00004710                 public ??_R2ISequentialInStream@@8
.rdata$r:00004710 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00004710 ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00004710                                         ; DATA XREF: .rdata$r:0000470Co
.rdata$r:00004710                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004714                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004718                 db    0
.rdata$r:00004719                 align 4
.rdata$r:00004719 _rdata$r        ends
.rdata$r:00004719
.rdata$r:0000471C ; ===========================================================================
.rdata$r:0000471C
.rdata$r:0000471C ; Segment type: Pure data
.rdata$r:0000471C ; Segment permissions: Read
.rdata$r:0000471C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000471C                 assume cs:_rdata$r
.rdata$r:0000471C                 ;org 471Ch
.rdata$r:0000471C ; COMDAT (pick any)
.rdata$r:0000471C                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:0000471C ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:0000471C ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000471C                                         ; DATA XREF: .rdata$r:00004690o
.rdata$r:0000471C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00004720                 db    0
.rdata$r:00004721                 db    0
.rdata$r:00004722                 db    0
.rdata$r:00004723                 db    0
.rdata$r:00004724                 db    0
.rdata$r:00004725                 db    0
.rdata$r:00004726                 db    0
.rdata$r:00004727                 db    0
.rdata$r:00004728                 db 0FFh
.rdata$r:00004729                 db 0FFh
.rdata$r:0000472A                 db 0FFh
.rdata$r:0000472B                 db 0FFh
.rdata$r:0000472C                 db    0
.rdata$r:0000472D                 db    0
.rdata$r:0000472E                 db    0
.rdata$r:0000472F                 db    0
.rdata$r:00004730                 db  42h ; B
.rdata$r:00004731                 db    0
.rdata$r:00004732                 db    0
.rdata$r:00004733                 db    0
.rdata$r:00004734                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004734 _rdata$r        ends
.rdata$r:00004734
.rdata$r:00004738 ; ===========================================================================
.rdata$r:00004738
.rdata$r:00004738 ; Segment type: Pure data
.rdata$r:00004738 ; Segment permissions: Read
.rdata$r:00004738 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004738                 assume cs:_rdata$r
.rdata$r:00004738                 ;org 4738h
.rdata$r:00004738 ; COMDAT (pick any)
.rdata$r:00004738                 public ??_R13?0A@EA@ICompressGetSubStreamSize@@8
.rdata$r:00004738 ; ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00004738 ??_R13?0A@EA@ICompressGetSubStreamSize@@8 dd offset ??_R0?AUICompressGetSubStreamSize@@@8
.rdata$r:00004738                                         ; DATA XREF: .rdata$r:00004694o
.rdata$r:00004738                                         ; ICompressGetSubStreamSize `RTTI Type Descriptor'
.rdata$r:0000473C                 db    1
.rdata$r:0000473D                 db    0
.rdata$r:0000473E                 db    0
.rdata$r:0000473F                 db    0
.rdata$r:00004740                 db    4
.rdata$r:00004741                 db    0
.rdata$r:00004742                 db    0
.rdata$r:00004743                 db    0
.rdata$r:00004744                 db 0FFh
.rdata$r:00004745                 db 0FFh
.rdata$r:00004746                 db 0FFh
.rdata$r:00004747                 db 0FFh
.rdata$r:00004748                 db    0
.rdata$r:00004749                 db    0
.rdata$r:0000474A                 db    0
.rdata$r:0000474B                 db    0
.rdata$r:0000474C                 db  40h ; @
.rdata$r:0000474D                 db    0
.rdata$r:0000474E                 db    0
.rdata$r:0000474F                 db    0
.rdata$r:00004750                 dd offset ??_R3ICompressGetSubStreamSize@@8 ; ICompressGetSubStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004750 _rdata$r        ends
.rdata$r:00004750
.data:00004754 ; ===========================================================================
.data:00004754
.data:00004754 ; Segment type: Pure data
.data:00004754 ; Segment permissions: Read/Write
.data:00004754 _data           segment dword public 'DATA' use32
.data:00004754                 assume cs:_data
.data:00004754                 ;org 4754h
.data:00004754 ; COMDAT (pick any)
.data:00004754                 public ??_R0?AUICompressGetSubStreamSize@@@8
.data:00004754 ; struct ICompressGetSubStreamSize `RTTI Type Descriptor'
.data:00004754 ??_R0?AUICompressGetSubStreamSize@@@8 dd offset ??_7type_info@@6B@
.data:00004754                                         ; DATA XREF: .rdata$r:ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00004754                                         ; .rdata$r:ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00004754                                         ; const type_info::`vftable'
.data:00004758                 db    0
.data:00004759                 db    0
.data:0000475A                 db    0
.data:0000475B                 db    0
.data:0000475C                 db  2Eh ; .
.data:0000475D                 db  3Fh ; ?
.data:0000475E                 db  41h ; A
.data:0000475F                 db  55h ; U
.data:00004760                 db  49h ; I
.data:00004761                 db  43h ; C
.data:00004762                 db  6Fh ; o
.data:00004763                 db  6Dh ; m
.data:00004764                 db  70h ; p
.data:00004765                 db  72h ; r
.data:00004766                 db  65h ; e
.data:00004767                 db  73h ; s
.data:00004768                 db  73h ; s
.data:00004769                 db  47h ; G
.data:0000476A                 db  65h ; e
.data:0000476B                 db  74h ; t
.data:0000476C                 db  53h ; S
.data:0000476D                 db  75h ; u
.data:0000476E                 db  62h ; b
.data:0000476F                 db  53h ; S
.data:00004770                 db  74h ; t
.data:00004771                 db  72h ; r
.data:00004772                 db  65h ; e
.data:00004773                 db  61h ; a
.data:00004774                 db  6Dh ; m
.data:00004775                 db  53h ; S
.data:00004776                 db  69h ; i
.data:00004777                 db  7Ah ; z
.data:00004778                 db  65h ; e
.data:00004779                 db  40h ; @
.data:0000477A                 db  40h ; @
.data:0000477B                 db    0
.data:0000477B _data           ends
.data:0000477B
.rdata$r:0000477C ; ===========================================================================
.rdata$r:0000477C
.rdata$r:0000477C ; Segment type: Pure data
.rdata$r:0000477C ; Segment permissions: Read
.rdata$r:0000477C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000477C                 assume cs:_rdata$r
.rdata$r:0000477C                 ;org 477Ch
.rdata$r:0000477C ; COMDAT (pick any)
.rdata$r:0000477C                 public ??_R3ICompressGetSubStreamSize@@8
.rdata$r:0000477C ; ICompressGetSubStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000477C ??_R3ICompressGetSubStreamSize@@8 db    0 ; DATA XREF: .rdata$r:00004750o
.rdata$r:0000477C                                         ; .rdata$r:000047B0o ...
.rdata$r:0000477D                 db    0
.rdata$r:0000477E                 db    0
.rdata$r:0000477F                 db    0
.rdata$r:00004780                 db    0
.rdata$r:00004781                 db    0
.rdata$r:00004782                 db    0
.rdata$r:00004783                 db    0
.rdata$r:00004784                 db    2
.rdata$r:00004785                 db    0
.rdata$r:00004786                 db    0
.rdata$r:00004787                 db    0
.rdata$r:00004788                 dd offset ??_R2ICompressGetSubStreamSize@@8 ; ICompressGetSubStreamSize::`RTTI Base Class Array'
.rdata$r:00004788 _rdata$r        ends
.rdata$r:00004788
.rdata$r:0000478C ; ===========================================================================
.rdata$r:0000478C
.rdata$r:0000478C ; Segment type: Pure data
.rdata$r:0000478C ; Segment permissions: Read
.rdata$r:0000478C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000478C                 assume cs:_rdata$r
.rdata$r:0000478C                 ;org 478Ch
.rdata$r:0000478C ; COMDAT (pick any)
.rdata$r:0000478C                 public ??_R2ICompressGetSubStreamSize@@8
.rdata$r:0000478C ; ICompressGetSubStreamSize::`RTTI Base Class Array'
.rdata$r:0000478C ??_R2ICompressGetSubStreamSize@@8 dd offset ??_R1A@?0A@EA@ICompressGetSubStreamSize@@8
.rdata$r:0000478C                                         ; DATA XREF: .rdata$r:00004788o
.rdata$r:0000478C                                         ; ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004790                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004794                 db    0
.rdata$r:00004795                 align 4
.rdata$r:00004795 _rdata$r        ends
.rdata$r:00004795
.rdata$r:00004798 ; ===========================================================================
.rdata$r:00004798
.rdata$r:00004798 ; Segment type: Pure data
.rdata$r:00004798 ; Segment permissions: Read
.rdata$r:00004798 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004798                 assume cs:_rdata$r
.rdata$r:00004798                 ;org 4798h
.rdata$r:00004798 ; COMDAT (pick any)
.rdata$r:00004798                 public ??_R1A@?0A@EA@ICompressGetSubStreamSize@@8
.rdata$r:00004798 ; ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004798 ??_R1A@?0A@EA@ICompressGetSubStreamSize@@8 dd offset ??_R0?AUICompressGetSubStreamSize@@@8
.rdata$r:00004798                                         ; DATA XREF: .rdata$r:ICompressGetSubStreamSize::`RTTI Base Class Array'o
.rdata$r:00004798                                         ; ICompressGetSubStreamSize `RTTI Type Descriptor'
.rdata$r:0000479C                 db    1
.rdata$r:0000479D                 db    0
.rdata$r:0000479E                 db    0
.rdata$r:0000479F                 db    0
.rdata$r:000047A0                 db    0
.rdata$r:000047A1                 db    0
.rdata$r:000047A2                 db    0
.rdata$r:000047A3                 db    0
.rdata$r:000047A4                 db 0FFh
.rdata$r:000047A5                 db 0FFh
.rdata$r:000047A6                 db 0FFh
.rdata$r:000047A7                 db 0FFh
.rdata$r:000047A8                 db    0
.rdata$r:000047A9                 db    0
.rdata$r:000047AA                 db    0
.rdata$r:000047AB                 db    0
.rdata$r:000047AC                 db  40h ; @
.rdata$r:000047AD                 db    0
.rdata$r:000047AE                 db    0
.rdata$r:000047AF                 db    0
.rdata$r:000047B0                 dd offset ??_R3ICompressGetSubStreamSize@@8 ; ICompressGetSubStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000047B0 _rdata$r        ends
.rdata$r:000047B0
.rdata$r:000047B4 ; ===========================================================================
.rdata$r:000047B4
.rdata$r:000047B4 ; Segment type: Pure data
.rdata$r:000047B4 ; Segment permissions: Read
.rdata$r:000047B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000047B4                 assume cs:_rdata$r
.rdata$r:000047B4                 ;org 47B4h
.rdata$r:000047B4 ; COMDAT (pick any)
.rdata$r:000047B4                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:000047B4 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:000047B4 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000047B4                                         ; DATA XREF: .rdata$r:00004698o
.rdata$r:000047B4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000047B8                 db    0
.rdata$r:000047B9                 db    0
.rdata$r:000047BA                 db    0
.rdata$r:000047BB                 db    0
.rdata$r:000047BC                 db    4
.rdata$r:000047BD                 db    0
.rdata$r:000047BE                 db    0
.rdata$r:000047BF                 db    0
.rdata$r:000047C0                 db 0FFh
.rdata$r:000047C1                 db 0FFh
.rdata$r:000047C2                 db 0FFh
.rdata$r:000047C3                 db 0FFh
.rdata$r:000047C4                 db    0
.rdata$r:000047C5                 db    0
.rdata$r:000047C6                 db    0
.rdata$r:000047C7                 db    0
.rdata$r:000047C8                 db  42h ; B
.rdata$r:000047C9                 db    0
.rdata$r:000047CA                 db    0
.rdata$r:000047CB                 db    0
.rdata$r:000047CC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000047CC _rdata$r        ends
.rdata$r:000047CC
.rdata$r:000047D0 ; ===========================================================================
.rdata$r:000047D0
.rdata$r:000047D0 ; Segment type: Pure data
.rdata$r:000047D0 ; Segment permissions: Read
.rdata$r:000047D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000047D0                 assume cs:_rdata$r
.rdata$r:000047D0                 ;org 47D0h
.rdata$r:000047D0 ; COMDAT (pick any)
.rdata$r:000047D0                 public ??_R17?0A@EA@CMyUnknownImp@@8
.rdata$r:000047D0 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:000047D0 ??_R17?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000047D0                                         ; DATA XREF: .rdata$r:0000469Co
.rdata$r:000047D0                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000047D4                 align 8
.rdata$r:000047D8                 db    8
.rdata$r:000047D9                 db    0
.rdata$r:000047DA                 db    0
.rdata$r:000047DB                 db    0
.rdata$r:000047DC                 db 0FFh
.rdata$r:000047DD                 db 0FFh
.rdata$r:000047DE                 db 0FFh
.rdata$r:000047DF                 db 0FFh
.rdata$r:000047E0                 db    0
.rdata$r:000047E1                 db    0
.rdata$r:000047E2                 db    0
.rdata$r:000047E3                 db    0
.rdata$r:000047E4                 db  40h ; @
.rdata$r:000047E5                 db    0
.rdata$r:000047E6                 db    0
.rdata$r:000047E7                 db    0
.rdata$r:000047E8                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000047E8 _rdata$r        ends
.rdata$r:000047E8
.rdata$r:000047EC ; ===========================================================================
.rdata$r:000047EC
.rdata$r:000047EC ; Segment type: Pure data
.rdata$r:000047EC ; Segment permissions: Read
.rdata$r:000047EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000047EC                 assume cs:_rdata$r
.rdata$r:000047EC                 ;org 47ECh
.rdata$r:000047EC ; COMDAT (pick any)
.rdata$r:000047EC                 public ??_R4CSequentialInStreamSizeCount2@@6BICompressGetSubStreamSize@@@
.rdata$r:000047EC ; const CSequentialInStreamSizeCount2::`RTTI Complete Object Locator'{for `ICompressGetSubStreamSize'}
.rdata$r:000047EC ??_R4CSequentialInStreamSizeCount2@@6BICompressGetSubStreamSize@@@ db    0
.rdata$r:000047EC                                         ; DATA XREF: .rdata:000045E4o
.rdata$r:000047ED                 db    0
.rdata$r:000047EE                 db    0
.rdata$r:000047EF                 db    0
.rdata$r:000047F0                 db    4
.rdata$r:000047F1                 db    0
.rdata$r:000047F2                 db    0
.rdata$r:000047F3                 db    0
.rdata$r:000047F4                 db    0
.rdata$r:000047F5                 db    0
.rdata$r:000047F6                 db    0
.rdata$r:000047F7                 db    0
.rdata$r:000047F8                 dd offset ??_R0?AVCSequentialInStreamSizeCount2@@@8 ; CSequentialInStreamSizeCount2 `RTTI Type Descriptor'
.rdata$r:000047FC                 dd offset ??_R3CSequentialInStreamSizeCount2@@8 ; CSequentialInStreamSizeCount2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000047FC _rdata$r        ends
.rdata$r:000047FC
.text:00004800 ; ===========================================================================
.text:00004800
.text:00004800 ; Segment type: Pure code
.text:00004800 ; Segment permissions: Read/Execute
.text:00004800 _text           segment para public 'CODE' use32
.text:00004800                 assume cs:_text
.text:00004800                 ;org 4800h
.text:00004800 ; COMDAT (pick any)
.text:00004800                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004800
.text:00004800 ; =============== S U B R O U T I N E =======================================
.text:00004800
.text:00004800 ; Attributes: bp-based frame
.text:00004800
.text:00004800 ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:00004800                 public ??0ISequentialInStream@@QAE@XZ
.text:00004800 ??0ISequentialInStream@@QAE@XZ proc near
.text:00004800                                         ; CODE XREF: CSequentialInStreamSizeCount2::CSequentialInStreamSizeCount2(void)+30p
.text:00004800
.text:00004800 var_4           = dword ptr -4
.text:00004800
.text:00004800                 push    ebp
.text:00004801                 mov     ebp, esp
.text:00004803                 push    ecx
.text:00004804                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000480B                 mov     [ebp+var_4], ecx
.text:0000480E                 mov     ecx, [ebp+var_4]
.text:00004811                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00004816                 mov     eax, [ebp+var_4]
.text:00004819                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:0000481F                 mov     eax, [ebp+var_4]
.text:00004822                 add     esp, 4
.text:00004825                 cmp     ebp, esp
.text:00004827                 call    __RTC_CheckEsp
.text:0000482C                 mov     esp, ebp
.text:0000482E                 pop     ebp
.text:0000482F                 retn
.text:0000482F ??0ISequentialInStream@@QAE@XZ endp
.text:0000482F
.text:0000482F _text           ends
.text:0000482F
.rdata:00004830 ; ===========================================================================
.rdata:00004830
.rdata:00004830 ; Segment type: Pure data
.rdata:00004830 ; Segment permissions: Read
.rdata:00004830 _rdata          segment dword public 'DATA' use32
.rdata:00004830                 assume cs:_rdata
.rdata:00004830                 ;org 4830h
.rdata:00004830 ; COMDAT (pick largest)
.rdata:00004830                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:00004834                 public ??_7ISequentialInStream@@6B@
.rdata:00004834 ; const ISequentialInStream::`vftable'
.rdata:00004834 ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:00004834                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:00004838                 dd offset __purecall
.rdata:0000483C                 dd offset __purecall
.rdata:00004840                 dd offset __purecall
.rdata:00004840 _rdata          ends
.rdata:00004840
.rdata$r:00004844 ; ===========================================================================
.rdata$r:00004844
.rdata$r:00004844 ; Segment type: Pure data
.rdata$r:00004844 ; Segment permissions: Read
.rdata$r:00004844 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004844                 assume cs:_rdata$r
.rdata$r:00004844                 ;org 4844h
.rdata$r:00004844 ; COMDAT (pick any)
.rdata$r:00004844                 public ??_R4ISequentialInStream@@6B@
.rdata$r:00004844 ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:00004844 ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:00004830o
.rdata$r:00004845                 db    0
.rdata$r:00004846                 db    0
.rdata$r:00004847                 db    0
.rdata$r:00004848                 db    0
.rdata$r:00004849                 db    0
.rdata$r:0000484A                 db    0
.rdata$r:0000484B                 db    0
.rdata$r:0000484C                 db    0
.rdata$r:0000484D                 db    0
.rdata$r:0000484E                 db    0
.rdata$r:0000484F                 db    0
.rdata$r:00004850                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00004854                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004854 _rdata$r        ends
.rdata$r:00004854
.text:00004858 ; ===========================================================================
.text:00004858
.text:00004858 ; Segment type: Pure code
.text:00004858 ; Segment permissions: Read/Execute
.text:00004858 _text           segment para public 'CODE' use32
.text:00004858                 assume cs:_text
.text:00004858                 ;org 4858h
.text:00004858 ; COMDAT (pick any)
.text:00004858                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004858
.text:00004858 ; =============== S U B R O U T I N E =======================================
.text:00004858
.text:00004858 ; Attributes: bp-based frame
.text:00004858
.text:00004858 ; __int32 __stdcall CSequentialInStreamSizeCount2::QueryInterface(CSequentialInStreamSizeCount2 *this, const struct _GUID *Buf1, void **)
.text:00004858                 public ?QueryInterface@CSequentialInStreamSizeCount2@@UAGJABU_GUID@@PAPAX@Z
.text:00004858 ?QueryInterface@CSequentialInStreamSizeCount2@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00004858                                         ; CODE XREF: [thunk]:CSequentialInStreamSizeCount2::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00004858                                         ; DATA XREF: .rdata:const CSequentialInStreamSizeCount2::`vftable'{for `ISequentialInStream'}o
.text:00004858
.text:00004858 var_4           = dword ptr -4
.text:00004858 this            = dword ptr  8
.text:00004858 Buf1            = dword ptr  0Ch
.text:00004858 arg_8           = dword ptr  10h
.text:00004858
.text:00004858                 push    ebp
.text:00004859                 mov     ebp, esp
.text:0000485B                 push    ecx
.text:0000485C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004863                 mov     eax, [ebp+arg_8]
.text:00004866                 mov     dword ptr [eax], 0
.text:0000486C                 push    offset _IID_IUnknown ; Buf2
.text:00004871                 mov     ecx, [ebp+Buf1]
.text:00004874                 push    ecx             ; Buf1
.text:00004875                 call    ___@8           ; __(x,x)
.text:0000487A                 test    eax, eax
.text:0000487C                 jz      short loc_4888
.text:0000487E                 mov     edx, [ebp+arg_8]
.text:00004881                 mov     eax, [ebp+this]
.text:00004884                 mov     [edx], eax
.text:00004886                 jmp     short loc_48DF
.text:00004888 ; ---------------------------------------------------------------------------
.text:00004888
.text:00004888 loc_4888:                               ; CODE XREF: CSequentialInStreamSizeCount2::QueryInterface(_GUID const &,void * *)+24j
.text:00004888                 push    offset _IID_ISequentialInStream ; Buf2
.text:0000488D                 mov     ecx, [ebp+Buf1]
.text:00004890                 push    ecx             ; Buf1
.text:00004891                 call    ___@8           ; __(x,x)
.text:00004896                 test    eax, eax
.text:00004898                 jz      short loc_48A4
.text:0000489A                 mov     edx, [ebp+arg_8]
.text:0000489D                 mov     eax, [ebp+this]
.text:000048A0                 mov     [edx], eax
.text:000048A2                 jmp     short loc_48DF
.text:000048A4 ; ---------------------------------------------------------------------------
.text:000048A4
.text:000048A4 loc_48A4:                               ; CODE XREF: CSequentialInStreamSizeCount2::QueryInterface(_GUID const &,void * *)+40j
.text:000048A4                 push    offset _IID_ICompressGetSubStreamSize ; Buf2
.text:000048A9                 mov     ecx, [ebp+Buf1]
.text:000048AC                 push    ecx             ; Buf1
.text:000048AD                 call    ___@8           ; __(x,x)
.text:000048B2                 test    eax, eax
.text:000048B4                 jz      short loc_48D8
.text:000048B6                 cmp     [ebp+this], 0
.text:000048BA                 jz      short loc_48C7
.text:000048BC                 mov     edx, [ebp+this]
.text:000048BF                 add     edx, 4
.text:000048C2                 mov     [ebp+var_4], edx
.text:000048C5                 jmp     short loc_48CE
.text:000048C7 ; ---------------------------------------------------------------------------
.text:000048C7
.text:000048C7 loc_48C7:                               ; CODE XREF: CSequentialInStreamSizeCount2::QueryInterface(_GUID const &,void * *)+62j
.text:000048C7                 mov     [ebp+var_4], 0
.text:000048CE
.text:000048CE loc_48CE:                               ; CODE XREF: CSequentialInStreamSizeCount2::QueryInterface(_GUID const &,void * *)+6Dj
.text:000048CE                 mov     eax, [ebp+arg_8]
.text:000048D1                 mov     ecx, [ebp+var_4]
.text:000048D4                 mov     [eax], ecx
.text:000048D6                 jmp     short loc_48DF
.text:000048D8 ; ---------------------------------------------------------------------------
.text:000048D8
.text:000048D8 loc_48D8:                               ; CODE XREF: CSequentialInStreamSizeCount2::QueryInterface(_GUID const &,void * *)+5Cj
.text:000048D8                 mov     eax, 80004002h
.text:000048DD                 jmp     short loc_48F0
.text:000048DF ; ---------------------------------------------------------------------------
.text:000048DF
.text:000048DF loc_48DF:                               ; CODE XREF: CSequentialInStreamSizeCount2::QueryInterface(_GUID const &,void * *)+2Ej
.text:000048DF                                         ; CSequentialInStreamSizeCount2::QueryInterface(_GUID const &,void * *)+4Aj ...
.text:000048DF                 mov     edx, [ebp+this]
.text:000048E2                 mov     eax, [edx+8]
.text:000048E5                 add     eax, 1
.text:000048E8                 mov     ecx, [ebp+this]
.text:000048EB                 mov     [ecx+8], eax
.text:000048EE                 xor     eax, eax
.text:000048F0
.text:000048F0 loc_48F0:                               ; CODE XREF: CSequentialInStreamSizeCount2::QueryInterface(_GUID const &,void * *)+85j
.text:000048F0                 add     esp, 4
.text:000048F3                 cmp     ebp, esp
.text:000048F5                 call    __RTC_CheckEsp
.text:000048FA                 mov     esp, ebp
.text:000048FC                 pop     ebp
.text:000048FD                 retn    0Ch
.text:000048FD ?QueryInterface@CSequentialInStreamSizeCount2@@UAGJABU_GUID@@PAPAX@Z endp
.text:000048FD
.text:000048FD _text           ends
.text:000048FD
.text:00004900 ; ===========================================================================
.text:00004900
.text:00004900 ; Segment type: Pure code
.text:00004900 ; Segment permissions: Read/Execute
.text:00004900 _text           segment para public 'CODE' use32
.text:00004900                 assume cs:_text
.text:00004900                 ;org 4900h
.text:00004900 ; COMDAT (pick any)
.text:00004900                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004900
.text:00004900 ; =============== S U B R O U T I N E =======================================
.text:00004900
.text:00004900 ; Attributes: bp-based frame
.text:00004900
.text:00004900 ; unsigned __int32 __stdcall CSequentialInStreamSizeCount2::AddRef(CSequentialInStreamSizeCount2 *this)
.text:00004900                 public ?AddRef@CSequentialInStreamSizeCount2@@UAGKXZ
.text:00004900 ?AddRef@CSequentialInStreamSizeCount2@@UAGKXZ proc near
.text:00004900                                         ; CODE XREF: [thunk]:CSequentialInStreamSizeCount2::AddRef`adjustor{4}' (void)+5j
.text:00004900                                         ; DATA XREF: .rdata:00004600o
.text:00004900
.text:00004900 var_4           = dword ptr -4
.text:00004900 this            = dword ptr  8
.text:00004900
.text:00004900                 push    ebp
.text:00004901                 mov     ebp, esp
.text:00004903                 push    ecx
.text:00004904                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000490B                 mov     eax, [ebp+this]
.text:0000490E                 mov     ecx, [eax+8]
.text:00004911                 add     ecx, 1
.text:00004914                 mov     [ebp+var_4], ecx
.text:00004917                 mov     edx, [ebp+this]
.text:0000491A                 mov     eax, [ebp+var_4]
.text:0000491D                 mov     [edx+8], eax
.text:00004920                 mov     eax, [ebp+var_4]
.text:00004923                 mov     esp, ebp
.text:00004925                 pop     ebp
.text:00004926                 retn    4
.text:00004926 ?AddRef@CSequentialInStreamSizeCount2@@UAGKXZ endp
.text:00004926
.text:00004926 ; ---------------------------------------------------------------------------
.text:00004929                 align 4
.text:00004929 _text           ends
.text:00004929
.text:0000492C ; ===========================================================================
.text:0000492C
.text:0000492C ; Segment type: Pure code
.text:0000492C ; Segment permissions: Read/Execute
.text:0000492C _text           segment para public 'CODE' use32
.text:0000492C                 assume cs:_text
.text:0000492C                 ;org 492Ch
.text:0000492C ; COMDAT (pick any)
.text:0000492C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000492C
.text:0000492C ; =============== S U B R O U T I N E =======================================
.text:0000492C
.text:0000492C ; Attributes: bp-based frame
.text:0000492C
.text:0000492C ; unsigned __int32 __stdcall CSequentialInStreamSizeCount2::Release(CSequentialInStreamSizeCount2 *this)
.text:0000492C                 public ?Release@CSequentialInStreamSizeCount2@@UAGKXZ
.text:0000492C ?Release@CSequentialInStreamSizeCount2@@UAGKXZ proc near
.text:0000492C                                         ; CODE XREF: [thunk]:CSequentialInStreamSizeCount2::Release`adjustor{4}' (void)+5j
.text:0000492C                                         ; DATA XREF: .rdata:00004604o
.text:0000492C
.text:0000492C var_10          = dword ptr -10h
.text:0000492C var_C           = dword ptr -0Ch
.text:0000492C var_8           = dword ptr -8
.text:0000492C var_4           = dword ptr -4
.text:0000492C this            = dword ptr  8
.text:0000492C
.text:0000492C                 push    ebp
.text:0000492D                 mov     ebp, esp
.text:0000492F                 sub     esp, 10h
.text:00004932                 mov     eax, 0CCCCCCCCh
.text:00004937                 mov     [ebp+var_10], eax
.text:0000493A                 mov     [ebp+var_C], eax
.text:0000493D                 mov     [ebp+var_8], eax
.text:00004940                 mov     [ebp+var_4], eax
.text:00004943                 mov     eax, [ebp+this]
.text:00004946                 mov     ecx, [eax+8]
.text:00004949                 sub     ecx, 1
.text:0000494C                 mov     [ebp+var_C], ecx
.text:0000494F                 mov     edx, [ebp+this]
.text:00004952                 mov     eax, [ebp+var_C]
.text:00004955                 mov     [edx+8], eax
.text:00004958                 cmp     [ebp+var_C], 0
.text:0000495C                 jz      short loc_4966
.text:0000495E                 mov     ecx, [ebp+this]
.text:00004961                 mov     eax, [ecx+8]
.text:00004964                 jmp     short loc_4990
.text:00004966 ; ---------------------------------------------------------------------------
.text:00004966
.text:00004966 loc_4966:                               ; CODE XREF: CSequentialInStreamSizeCount2::Release(void)+30j
.text:00004966                 mov     edx, [ebp+this]
.text:00004969                 mov     [ebp+var_8], edx
.text:0000496C                 mov     eax, [ebp+var_8]
.text:0000496F                 mov     [ebp+var_4], eax
.text:00004972                 cmp     [ebp+var_4], 0
.text:00004976                 jz      short loc_4987
.text:00004978                 push    1
.text:0000497A                 mov     ecx, [ebp+var_4]
.text:0000497D                 call    ??_GCSequentialInStreamSizeCount2@@QAEPAXI@Z ; CSequentialInStreamSizeCount2::`scalar deleting destructor'(uint)
.text:00004982                 mov     [ebp+var_10], eax
.text:00004985                 jmp     short loc_498E
.text:00004987 ; ---------------------------------------------------------------------------
.text:00004987
.text:00004987 loc_4987:                               ; CODE XREF: CSequentialInStreamSizeCount2::Release(void)+4Aj
.text:00004987                 mov     [ebp+var_10], 0
.text:0000498E
.text:0000498E loc_498E:                               ; CODE XREF: CSequentialInStreamSizeCount2::Release(void)+59j
.text:0000498E                 xor     eax, eax
.text:00004990
.text:00004990 loc_4990:                               ; CODE XREF: CSequentialInStreamSizeCount2::Release(void)+38j
.text:00004990                 add     esp, 10h
.text:00004993                 cmp     ebp, esp
.text:00004995                 call    __RTC_CheckEsp
.text:0000499A                 mov     esp, ebp
.text:0000499C                 pop     ebp
.text:0000499D                 retn    4
.text:0000499D ?Release@CSequentialInStreamSizeCount2@@UAGKXZ endp
.text:0000499D
.text:0000499D _text           ends
.text:0000499D
.text:000049A0 ; ===========================================================================
.text:000049A0
.text:000049A0 ; Segment type: Pure code
.text:000049A0 ; Segment permissions: Read/Execute
.text:000049A0 _text           segment para public 'CODE' use32
.text:000049A0                 assume cs:_text
.text:000049A0                 ;org 49A0h
.text:000049A0 ; COMDAT (pick any)
.text:000049A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000049A0
.text:000049A0 ; =============== S U B R O U T I N E =======================================
.text:000049A0
.text:000049A0 ; Attributes: bp-based frame
.text:000049A0
.text:000049A0 ; public: void * __thiscall CSequentialInStreamSizeCount2::`scalar deleting destructor'(unsigned int)
.text:000049A0                 public ??_GCSequentialInStreamSizeCount2@@QAEPAXI@Z
.text:000049A0 ??_GCSequentialInStreamSizeCount2@@QAEPAXI@Z proc near
.text:000049A0                                         ; CODE XREF: CSequentialInStreamSizeCount2::Release(void)+51p
.text:000049A0
.text:000049A0 var_4           = dword ptr -4
.text:000049A0 arg_0           = dword ptr  8
.text:000049A0
.text:000049A0                 push    ebp
.text:000049A1                 mov     ebp, esp
.text:000049A3                 push    ecx
.text:000049A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000049AB                 mov     [ebp+var_4], ecx
.text:000049AE                 mov     ecx, [ebp+var_4] ; this
.text:000049B1                 call    ??1CSequentialInStreamSizeCount2@@QAE@XZ ; CSequentialInStreamSizeCount2::~CSequentialInStreamSizeCount2(void)
.text:000049B6                 mov     eax, [ebp+arg_0]
.text:000049B9                 and     eax, 1
.text:000049BC                 jz      short loc_49CA
.text:000049BE                 mov     ecx, [ebp+var_4]
.text:000049C1                 push    ecx             ; void *
.text:000049C2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000049C7                 add     esp, 4
.text:000049CA
.text:000049CA loc_49CA:                               ; CODE XREF: CSequentialInStreamSizeCount2::`scalar deleting destructor'(uint)+1Cj
.text:000049CA                 mov     eax, [ebp+var_4]
.text:000049CD                 add     esp, 4
.text:000049D0                 cmp     ebp, esp
.text:000049D2                 call    __RTC_CheckEsp
.text:000049D7                 mov     esp, ebp
.text:000049D9                 pop     ebp
.text:000049DA                 retn    4
.text:000049DA ??_GCSequentialInStreamSizeCount2@@QAEPAXI@Z endp
.text:000049DA
.text:000049DA ; ---------------------------------------------------------------------------
.text:000049DD                 align 10h
.text:000049DD _text           ends
.text:000049DD
.text:000049E0 ; ===========================================================================
.text:000049E0
.text:000049E0 ; Segment type: Pure code
.text:000049E0 ; Segment permissions: Read/Execute
.text:000049E0 _text           segment para public 'CODE' use32
.text:000049E0                 assume cs:_text
.text:000049E0                 ;org 49E0h
.text:000049E0 ; COMDAT (pick any)
.text:000049E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000049E0
.text:000049E0 ; =============== S U B R O U T I N E =======================================
.text:000049E0
.text:000049E0 ; Attributes: bp-based frame
.text:000049E0
.text:000049E0 ; _DWORD __thiscall CSequentialInStreamSizeCount2::~CSequentialInStreamSizeCount2(CSequentialInStreamSizeCount2 *__hidden this)
.text:000049E0                 public ??1CSequentialInStreamSizeCount2@@QAE@XZ
.text:000049E0 ??1CSequentialInStreamSizeCount2@@QAE@XZ proc near
.text:000049E0                                         ; CODE XREF: CSequentialInStreamSizeCount2::`scalar deleting destructor'(uint)+11p
.text:000049E0
.text:000049E0 var_10          = dword ptr -10h
.text:000049E0 var_C           = dword ptr -0Ch
.text:000049E0 var_4           = dword ptr -4
.text:000049E0
.text:000049E0                 push    ebp
.text:000049E1                 mov     ebp, esp
.text:000049E3                 push    0FFFFFFFFh
.text:000049E5                 push    offset __ehhandler$??1CSequentialInStreamSizeCount2@@QAE@XZ
.text:000049EA                 mov     eax, large fs:0
.text:000049F0                 push    eax
.text:000049F1                 push    ecx
.text:000049F2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000049F9                 mov     eax, dword ptr ds:___security_cookie
.text:000049FE                 xor     eax, ebp
.text:00004A00                 push    eax
.text:00004A01                 lea     eax, [ebp+var_C]
.text:00004A04                 mov     large fs:0, eax
.text:00004A0A                 mov     [ebp+var_10], ecx
.text:00004A0D                 mov     [ebp+var_4], 0
.text:00004A14                 mov     ecx, [ebp+var_10]
.text:00004A17                 add     ecx, 10h
.text:00004A1A                 call    ??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ ; CMyComPtr<ICompressGetSubStreamSize>::~CMyComPtr<ICompressGetSubStreamSize>(void)
.text:00004A1F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004A26                 mov     ecx, [ebp+var_10]
.text:00004A29                 add     ecx, 0Ch
.text:00004A2C                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00004A31                 mov     ecx, [ebp+var_C]
.text:00004A34                 mov     large fs:0, ecx
.text:00004A3B                 pop     ecx
.text:00004A3C                 add     esp, 10h
.text:00004A3F                 cmp     ebp, esp
.text:00004A41                 call    __RTC_CheckEsp
.text:00004A46                 mov     esp, ebp
.text:00004A48                 pop     ebp
.text:00004A49                 retn
.text:00004A49 ??1CSequentialInStreamSizeCount2@@QAE@XZ endp
.text:00004A49
.text:00004A49 ; ---------------------------------------------------------------------------
.text:00004A4A                 align 4
.text:00004A4A _text           ends
.text:00004A4A
.text$x:00004A4C ; ===========================================================================
.text$x:00004A4C
.text$x:00004A4C ; Segment type: Pure code
.text$x:00004A4C ; Segment permissions: Read/Execute
.text$x:00004A4C _text$x         segment para public 'CODE' use32
.text$x:00004A4C                 assume cs:_text$x
.text$x:00004A4C                 ;org 4A4Ch
.text$x:00004A4C ; COMDAT (pick associative to section at 49E0)
.text$x:00004A4C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00004A4C
.text$x:00004A4C ; =============== S U B R O U T I N E =======================================
.text$x:00004A4C
.text$x:00004A4C
.text$x:00004A4C __unwindfunclet$??1CSequentialInStreamSizeCount2@@QAE@XZ$0 proc near
.text$x:00004A4C                                         ; DATA XREF: .xdata$x:00004A78o
.text$x:00004A4C                 mov     ecx, [ebp-10h]
.text$x:00004A4F                 add     ecx, 0Ch
.text$x:00004A52                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00004A52 __unwindfunclet$??1CSequentialInStreamSizeCount2@@QAE@XZ$0 endp
.text$x:00004A52
.text$x:00004A57
.text$x:00004A57 ; =============== S U B R O U T I N E =======================================
.text$x:00004A57
.text$x:00004A57
.text$x:00004A57 __ehhandler$??1CSequentialInStreamSizeCount2@@QAE@XZ proc near
.text$x:00004A57                                         ; DATA XREF: CSequentialInStreamSizeCount2::~CSequentialInStreamSizeCount2(void)+5o
.text$x:00004A57
.text$x:00004A57 arg_4           = dword ptr  8
.text$x:00004A57
.text$x:00004A57                 mov     edx, [esp+arg_4]
.text$x:00004A5B                 lea     eax, [edx+0Ch]
.text$x:00004A5E                 mov     ecx, [edx-8]
.text$x:00004A61                 xor     ecx, eax
.text$x:00004A63                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004A68                 mov     eax, offset __ehfuncinfo$??1CSequentialInStreamSizeCount2@@QAE@XZ
.text$x:00004A6D                 jmp     ___CxxFrameHandler3
.text$x:00004A6D __ehhandler$??1CSequentialInStreamSizeCount2@@QAE@XZ endp
.text$x:00004A6D
.text$x:00004A6D ; ---------------------------------------------------------------------------
.text$x:00004A72                 align 4
.text$x:00004A72 _text$x         ends
.text$x:00004A72
.xdata$x:00004A74 ; ===========================================================================
.xdata$x:00004A74
.xdata$x:00004A74 ; Segment type: Pure data
.xdata$x:00004A74 ; Segment permissions: Read
.xdata$x:00004A74 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004A74                 assume cs:_xdata$x
.xdata$x:00004A74                 ;org 4A74h
.xdata$x:00004A74 ; COMDAT (pick associative to section at 49E0)
.xdata$x:00004A74 __unwindtable$??1CSequentialInStreamSizeCount2@@QAE@XZ db 0FFh
.xdata$x:00004A74                                         ; DATA XREF: .xdata$x:00004A84o
.xdata$x:00004A75                 db 0FFh
.xdata$x:00004A76                 db 0FFh
.xdata$x:00004A77                 db 0FFh
.xdata$x:00004A78                 dd offset __unwindfunclet$??1CSequentialInStreamSizeCount2@@QAE@XZ$0
.xdata$x:00004A7C __ehfuncinfo$??1CSequentialInStreamSizeCount2@@QAE@XZ db  22h ; "
.xdata$x:00004A7C                                         ; DATA XREF: __ehhandler$??1CSequentialInStreamSizeCount2@@QAE@XZ+11o
.xdata$x:00004A7D                 db    5
.xdata$x:00004A7E                 db  93h ; ô
.xdata$x:00004A7F                 db  19h
.xdata$x:00004A80                 db    1
.xdata$x:00004A81                 db    0
.xdata$x:00004A82                 db    0
.xdata$x:00004A83                 db    0
.xdata$x:00004A84                 dd offset __unwindtable$??1CSequentialInStreamSizeCount2@@QAE@XZ
.xdata$x:00004A88                 db    0
.xdata$x:00004A89                 db    0
.xdata$x:00004A8A                 db    0
.xdata$x:00004A8B                 db    0
.xdata$x:00004A8C                 db    0
.xdata$x:00004A8D                 db    0
.xdata$x:00004A8E                 db    0
.xdata$x:00004A8F                 db    0
.xdata$x:00004A90                 db    0
.xdata$x:00004A91                 db    0
.xdata$x:00004A92                 db    0
.xdata$x:00004A93                 db    0
.xdata$x:00004A94                 db    0
.xdata$x:00004A95                 db    0
.xdata$x:00004A96                 db    0
.xdata$x:00004A97                 db    0
.xdata$x:00004A98                 db    0
.xdata$x:00004A99                 db    0
.xdata$x:00004A9A                 db    0
.xdata$x:00004A9B                 db    0
.xdata$x:00004A9C                 db    1
.xdata$x:00004A9D                 db    0
.xdata$x:00004A9E                 db    0
.xdata$x:00004A9F                 db    0
.xdata$x:00004A9F _xdata$x        ends
.xdata$x:00004A9F
.text:00004AA0 ; ===========================================================================
.text:00004AA0
.text:00004AA0 ; Segment type: Pure code
.text:00004AA0 ; Segment permissions: Read/Execute
.text:00004AA0 _text           segment para public 'CODE' use32
.text:00004AA0                 assume cs:_text
.text:00004AA0                 ;org 4AA0h
.text:00004AA0 ; COMDAT (pick any)
.text:00004AA0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004AA0
.text:00004AA0 ; =============== S U B R O U T I N E =======================================
.text:00004AA0
.text:00004AA0 ; Attributes: bp-based frame
.text:00004AA0
.text:00004AA0 ; public: __thiscall CSequentialOutStreamSizeCount::CSequentialOutStreamSizeCount(void)
.text:00004AA0                 public ??0CSequentialOutStreamSizeCount@@QAE@XZ
.text:00004AA0 ??0CSequentialOutStreamSizeCount@@QAE@XZ proc near
.text:00004AA0                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+714p
.text:00004AA0
.text:00004AA0 var_4           = dword ptr -4
.text:00004AA0
.text:00004AA0                 push    ebp
.text:00004AA1                 mov     ebp, esp
.text:00004AA3                 push    ecx
.text:00004AA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004AAB                 mov     [ebp+var_4], ecx
.text:00004AAE                 mov     ecx, [ebp+var_4] ; this
.text:00004AB1                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:00004AB6                 mov     ecx, [ebp+var_4]
.text:00004AB9                 add     ecx, 4          ; this
.text:00004ABC                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00004AC1                 mov     eax, [ebp+var_4]
.text:00004AC4                 mov     dword ptr [eax], offset ??_7CSequentialOutStreamSizeCount@@6B@ ; const CSequentialOutStreamSizeCount::`vftable'
.text:00004ACA                 mov     ecx, [ebp+var_4]
.text:00004ACD                 add     ecx, 8
.text:00004AD0                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00004AD5                 mov     eax, [ebp+var_4]
.text:00004AD8                 add     esp, 4
.text:00004ADB                 cmp     ebp, esp
.text:00004ADD                 call    __RTC_CheckEsp
.text:00004AE2                 mov     esp, ebp
.text:00004AE4                 pop     ebp
.text:00004AE5                 retn
.text:00004AE5 ??0CSequentialOutStreamSizeCount@@QAE@XZ endp
.text:00004AE5
.text:00004AE5 ; ---------------------------------------------------------------------------
.text:00004AE6                 align 4
.text:00004AE6 _text           ends
.text:00004AE6
.rdata:00004AE8 ; ===========================================================================
.rdata:00004AE8
.rdata:00004AE8 ; Segment type: Pure data
.rdata:00004AE8 ; Segment permissions: Read
.rdata:00004AE8 _rdata          segment dword public 'DATA' use32
.rdata:00004AE8                 assume cs:_rdata
.rdata:00004AE8                 ;org 4AE8h
.rdata:00004AE8 ; COMDAT (pick largest)
.rdata:00004AE8                 dd offset ??_R4CSequentialOutStreamSizeCount@@6B@ ; const CSequentialOutStreamSizeCount::`RTTI Complete Object Locator'
.rdata:00004AEC                 public ??_7CSequentialOutStreamSizeCount@@6B@
.rdata:00004AEC ; const CSequentialOutStreamSizeCount::`vftable'
.rdata:00004AEC ??_7CSequentialOutStreamSizeCount@@6B@ dd offset ?QueryInterface@CSequentialOutStreamSizeCount@@UAGJABU_GUID@@PAPAX@Z
.rdata:00004AEC                                         ; DATA XREF: CSequentialOutStreamSizeCount::CSequentialOutStreamSizeCount(void)+24o
.rdata:00004AEC                                         ; CSequentialOutStreamSizeCount::QueryInterface(_GUID const &,void * *)
.rdata:00004AF0                 dd offset ?AddRef@CSequentialOutStreamSizeCount@@UAGKXZ ; CSequentialOutStreamSizeCount::AddRef(void)
.rdata:00004AF4                 dd offset ?Release@CSequentialOutStreamSizeCount@@UAGKXZ ; CSequentialOutStreamSizeCount::Release(void)
.rdata:00004AF8                 dd offset ?Write@CSequentialOutStreamSizeCount@@UAGJPBXIPAI@Z ; CSequentialOutStreamSizeCount::Write(void const *,uint,uint *)
.rdata:00004AF8 _rdata          ends
.rdata:00004AF8
.rdata$r:00004AFC ; ===========================================================================
.rdata$r:00004AFC
.rdata$r:00004AFC ; Segment type: Pure data
.rdata$r:00004AFC ; Segment permissions: Read
.rdata$r:00004AFC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004AFC                 assume cs:_rdata$r
.rdata$r:00004AFC                 ;org 4AFCh
.rdata$r:00004AFC ; COMDAT (pick any)
.rdata$r:00004AFC                 public ??_R4CSequentialOutStreamSizeCount@@6B@
.rdata$r:00004AFC ; const CSequentialOutStreamSizeCount::`RTTI Complete Object Locator'
.rdata$r:00004AFC ??_R4CSequentialOutStreamSizeCount@@6B@ db    0
.rdata$r:00004AFC                                         ; DATA XREF: .rdata:00004AE8o
.rdata$r:00004AFD                 db    0
.rdata$r:00004AFE                 db    0
.rdata$r:00004AFF                 db    0
.rdata$r:00004B00                 db    0
.rdata$r:00004B01                 db    0
.rdata$r:00004B02                 db    0
.rdata$r:00004B03                 db    0
.rdata$r:00004B04                 db    0
.rdata$r:00004B05                 db    0
.rdata$r:00004B06                 db    0
.rdata$r:00004B07                 db    0
.rdata$r:00004B08                 dd offset ??_R0?AVCSequentialOutStreamSizeCount@@@8 ; CSequentialOutStreamSizeCount `RTTI Type Descriptor'
.rdata$r:00004B0C                 dd offset ??_R3CSequentialOutStreamSizeCount@@8 ; CSequentialOutStreamSizeCount::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004B0C _rdata$r        ends
.rdata$r:00004B0C
.data:00004B10 ; ===========================================================================
.data:00004B10
.data:00004B10 ; Segment type: Pure data
.data:00004B10 ; Segment permissions: Read/Write
.data:00004B10 _data           segment dword public 'DATA' use32
.data:00004B10                 assume cs:_data
.data:00004B10                 ;org 4B10h
.data:00004B10 ; COMDAT (pick any)
.data:00004B10                 public ??_R0?AVCSequentialOutStreamSizeCount@@@8
.data:00004B10 ; class CSequentialOutStreamSizeCount `RTTI Type Descriptor'
.data:00004B10 ??_R0?AVCSequentialOutStreamSizeCount@@@8 dd offset ??_7type_info@@6B@
.data:00004B10                                         ; DATA XREF: .rdata$r:00004B08o
.data:00004B10                                         ; .rdata$r:CSequentialOutStreamSizeCount::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00004B10                                         ; const type_info::`vftable'
.data:00004B14                 align 8
.data:00004B18 a_?avcsequent_1 db '.?AVCSequentialOutStreamSizeCount@@',0
.data:00004B18 _data           ends
.data:00004B18
.rdata$r:00004B3C ; ===========================================================================
.rdata$r:00004B3C
.rdata$r:00004B3C ; Segment type: Pure data
.rdata$r:00004B3C ; Segment permissions: Read
.rdata$r:00004B3C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004B3C                 assume cs:_rdata$r
.rdata$r:00004B3C                 ;org 4B3Ch
.rdata$r:00004B3C ; COMDAT (pick any)
.rdata$r:00004B3C                 public ??_R3CSequentialOutStreamSizeCount@@8
.rdata$r:00004B3C ; CSequentialOutStreamSizeCount::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004B3C ??_R3CSequentialOutStreamSizeCount@@8 db    0
.rdata$r:00004B3C                                         ; DATA XREF: .rdata$r:00004B0Co
.rdata$r:00004B3C                                         ; .rdata$r:00004B78o
.rdata$r:00004B3D                 db    0
.rdata$r:00004B3E                 db    0
.rdata$r:00004B3F                 db    0
.rdata$r:00004B40                 db    1
.rdata$r:00004B41                 db    0
.rdata$r:00004B42                 db    0
.rdata$r:00004B43                 db    0
.rdata$r:00004B44                 db    4
.rdata$r:00004B45                 db    0
.rdata$r:00004B46                 db    0
.rdata$r:00004B47                 db    0
.rdata$r:00004B48                 dd offset ??_R2CSequentialOutStreamSizeCount@@8 ; CSequentialOutStreamSizeCount::`RTTI Base Class Array'
.rdata$r:00004B48 _rdata$r        ends
.rdata$r:00004B48
.rdata$r:00004B4C ; ===========================================================================
.rdata$r:00004B4C
.rdata$r:00004B4C ; Segment type: Pure data
.rdata$r:00004B4C ; Segment permissions: Read
.rdata$r:00004B4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004B4C                 assume cs:_rdata$r
.rdata$r:00004B4C                 ;org 4B4Ch
.rdata$r:00004B4C ; COMDAT (pick any)
.rdata$r:00004B4C                 public ??_R2CSequentialOutStreamSizeCount@@8
.rdata$r:00004B4C ; CSequentialOutStreamSizeCount::`RTTI Base Class Array'
.rdata$r:00004B4C ??_R2CSequentialOutStreamSizeCount@@8 dd offset ??_R1A@?0A@EA@CSequentialOutStreamSizeCount@@8
.rdata$r:00004B4C                                         ; DATA XREF: .rdata$r:00004B48o
.rdata$r:00004B4C                                         ; CSequentialOutStreamSizeCount::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004B50                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004B54                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004B58                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00004B5C                 db    0
.rdata$r:00004B5D                 align 10h
.rdata$r:00004B5D _rdata$r        ends
.rdata$r:00004B5D
.rdata$r:00004B60 ; ===========================================================================
.rdata$r:00004B60
.rdata$r:00004B60 ; Segment type: Pure data
.rdata$r:00004B60 ; Segment permissions: Read
.rdata$r:00004B60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004B60                 assume cs:_rdata$r
.rdata$r:00004B60                 ;org 4B60h
.rdata$r:00004B60 ; COMDAT (pick any)
.rdata$r:00004B60                 public ??_R1A@?0A@EA@CSequentialOutStreamSizeCount@@8
.rdata$r:00004B60 ; CSequentialOutStreamSizeCount::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004B60 ??_R1A@?0A@EA@CSequentialOutStreamSizeCount@@8 dd offset ??_R0?AVCSequentialOutStreamSizeCount@@@8
.rdata$r:00004B60                                         ; DATA XREF: .rdata$r:CSequentialOutStreamSizeCount::`RTTI Base Class Array'o
.rdata$r:00004B60                                         ; CSequentialOutStreamSizeCount `RTTI Type Descriptor'
.rdata$r:00004B64                 db    3
.rdata$r:00004B65                 db    0
.rdata$r:00004B66                 db    0
.rdata$r:00004B67                 db    0
.rdata$r:00004B68                 db    0
.rdata$r:00004B69                 db    0
.rdata$r:00004B6A                 db    0
.rdata$r:00004B6B                 db    0
.rdata$r:00004B6C                 db 0FFh
.rdata$r:00004B6D                 db 0FFh
.rdata$r:00004B6E                 db 0FFh
.rdata$r:00004B6F                 db 0FFh
.rdata$r:00004B70                 db    0
.rdata$r:00004B71                 db    0
.rdata$r:00004B72                 db    0
.rdata$r:00004B73                 db    0
.rdata$r:00004B74                 db  40h ; @
.rdata$r:00004B75                 db    0
.rdata$r:00004B76                 db    0
.rdata$r:00004B77                 db    0
.rdata$r:00004B78                 dd offset ??_R3CSequentialOutStreamSizeCount@@8 ; CSequentialOutStreamSizeCount::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004B78 _rdata$r        ends
.rdata$r:00004B78
.text:00004B7C ; ===========================================================================
.text:00004B7C
.text:00004B7C ; Segment type: Pure code
.text:00004B7C ; Segment permissions: Read/Execute
.text:00004B7C _text           segment para public 'CODE' use32
.text:00004B7C                 assume cs:_text
.text:00004B7C                 ;org 4B7Ch
.text:00004B7C ; COMDAT (pick any)
.text:00004B7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004B7C
.text:00004B7C ; =============== S U B R O U T I N E =======================================
.text:00004B7C
.text:00004B7C ; Attributes: bp-based frame
.text:00004B7C
.text:00004B7C ; __int32 __stdcall CSequentialOutStreamSizeCount::QueryInterface(CSequentialOutStreamSizeCount *this, const struct _GUID *Buf1, void **)
.text:00004B7C                 public ?QueryInterface@CSequentialOutStreamSizeCount@@UAGJABU_GUID@@PAPAX@Z
.text:00004B7C ?QueryInterface@CSequentialOutStreamSizeCount@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00004B7C                                         ; DATA XREF: .rdata:const CSequentialOutStreamSizeCount::`vftable'o
.text:00004B7C
.text:00004B7C this            = dword ptr  8
.text:00004B7C Buf1            = dword ptr  0Ch
.text:00004B7C arg_8           = dword ptr  10h
.text:00004B7C
.text:00004B7C                 push    ebp
.text:00004B7D                 mov     ebp, esp
.text:00004B7F                 mov     eax, [ebp+arg_8]
.text:00004B82                 mov     dword ptr [eax], 0
.text:00004B88                 push    offset _IID_IUnknown ; Buf2
.text:00004B8D                 mov     ecx, [ebp+Buf1]
.text:00004B90                 push    ecx             ; Buf1
.text:00004B91                 call    ___@8           ; __(x,x)
.text:00004B96                 test    eax, eax
.text:00004B98                 jz      short loc_4BA4
.text:00004B9A                 mov     edx, [ebp+arg_8]
.text:00004B9D                 mov     eax, [ebp+this]
.text:00004BA0                 mov     [edx], eax
.text:00004BA2                 jmp     short loc_4BC7
.text:00004BA4 ; ---------------------------------------------------------------------------
.text:00004BA4
.text:00004BA4 loc_4BA4:                               ; CODE XREF: CSequentialOutStreamSizeCount::QueryInterface(_GUID const &,void * *)+1Cj
.text:00004BA4                 push    offset _IID_ISequentialOutStream ; Buf2
.text:00004BA9                 mov     ecx, [ebp+Buf1]
.text:00004BAC                 push    ecx             ; Buf1
.text:00004BAD                 call    ___@8           ; __(x,x)
.text:00004BB2                 test    eax, eax
.text:00004BB4                 jz      short loc_4BC0
.text:00004BB6                 mov     edx, [ebp+arg_8]
.text:00004BB9                 mov     eax, [ebp+this]
.text:00004BBC                 mov     [edx], eax
.text:00004BBE                 jmp     short loc_4BC7
.text:00004BC0 ; ---------------------------------------------------------------------------
.text:00004BC0
.text:00004BC0 loc_4BC0:                               ; CODE XREF: CSequentialOutStreamSizeCount::QueryInterface(_GUID const &,void * *)+38j
.text:00004BC0                 mov     eax, 80004002h
.text:00004BC5                 jmp     short loc_4BD8
.text:00004BC7 ; ---------------------------------------------------------------------------
.text:00004BC7
.text:00004BC7 loc_4BC7:                               ; CODE XREF: CSequentialOutStreamSizeCount::QueryInterface(_GUID const &,void * *)+26j
.text:00004BC7                                         ; CSequentialOutStreamSizeCount::QueryInterface(_GUID const &,void * *)+42j
.text:00004BC7                 mov     ecx, [ebp+this]
.text:00004BCA                 mov     edx, [ecx+4]
.text:00004BCD                 add     edx, 1
.text:00004BD0                 mov     eax, [ebp+this]
.text:00004BD3                 mov     [eax+4], edx
.text:00004BD6                 xor     eax, eax
.text:00004BD8
.text:00004BD8 loc_4BD8:                               ; CODE XREF: CSequentialOutStreamSizeCount::QueryInterface(_GUID const &,void * *)+49j
.text:00004BD8                 cmp     ebp, esp
.text:00004BDA                 call    __RTC_CheckEsp
.text:00004BDF                 pop     ebp
.text:00004BE0                 retn    0Ch
.text:00004BE0 ?QueryInterface@CSequentialOutStreamSizeCount@@UAGJABU_GUID@@PAPAX@Z endp
.text:00004BE0
.text:00004BE0 ; ---------------------------------------------------------------------------
.text:00004BE3                 align 4
.text:00004BE3 _text           ends
.text:00004BE3
.text:00004BE4 ; ===========================================================================
.text:00004BE4
.text:00004BE4 ; Segment type: Pure code
.text:00004BE4 ; Segment permissions: Read/Execute
.text:00004BE4 _text           segment para public 'CODE' use32
.text:00004BE4                 assume cs:_text
.text:00004BE4                 ;org 4BE4h
.text:00004BE4 ; COMDAT (pick any)
.text:00004BE4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004BE4
.text:00004BE4 ; =============== S U B R O U T I N E =======================================
.text:00004BE4
.text:00004BE4 ; Attributes: bp-based frame
.text:00004BE4
.text:00004BE4 ; unsigned __int32 __stdcall CSequentialOutStreamSizeCount::AddRef(CSequentialOutStreamSizeCount *this)
.text:00004BE4                 public ?AddRef@CSequentialOutStreamSizeCount@@UAGKXZ
.text:00004BE4 ?AddRef@CSequentialOutStreamSizeCount@@UAGKXZ proc near
.text:00004BE4                                         ; DATA XREF: .rdata:00004AF0o
.text:00004BE4
.text:00004BE4 var_4           = dword ptr -4
.text:00004BE4 this            = dword ptr  8
.text:00004BE4
.text:00004BE4                 push    ebp
.text:00004BE5                 mov     ebp, esp
.text:00004BE7                 push    ecx
.text:00004BE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004BEF                 mov     eax, [ebp+this]
.text:00004BF2                 mov     ecx, [eax+4]
.text:00004BF5                 add     ecx, 1
.text:00004BF8                 mov     [ebp+var_4], ecx
.text:00004BFB                 mov     edx, [ebp+this]
.text:00004BFE                 mov     eax, [ebp+var_4]
.text:00004C01                 mov     [edx+4], eax
.text:00004C04                 mov     eax, [ebp+var_4]
.text:00004C07                 mov     esp, ebp
.text:00004C09                 pop     ebp
.text:00004C0A                 retn    4
.text:00004C0A ?AddRef@CSequentialOutStreamSizeCount@@UAGKXZ endp
.text:00004C0A
.text:00004C0A ; ---------------------------------------------------------------------------
.text:00004C0D                 align 10h
.text:00004C0D _text           ends
.text:00004C0D
.text:00004C10 ; ===========================================================================
.text:00004C10
.text:00004C10 ; Segment type: Pure code
.text:00004C10 ; Segment permissions: Read/Execute
.text:00004C10 _text           segment para public 'CODE' use32
.text:00004C10                 assume cs:_text
.text:00004C10                 ;org 4C10h
.text:00004C10 ; COMDAT (pick any)
.text:00004C10                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004C10
.text:00004C10 ; =============== S U B R O U T I N E =======================================
.text:00004C10
.text:00004C10 ; Attributes: bp-based frame
.text:00004C10
.text:00004C10 ; unsigned __int32 __stdcall CSequentialOutStreamSizeCount::Release(CSequentialOutStreamSizeCount *this)
.text:00004C10                 public ?Release@CSequentialOutStreamSizeCount@@UAGKXZ
.text:00004C10 ?Release@CSequentialOutStreamSizeCount@@UAGKXZ proc near
.text:00004C10                                         ; DATA XREF: .rdata:00004AF4o
.text:00004C10
.text:00004C10 var_10          = dword ptr -10h
.text:00004C10 var_C           = dword ptr -0Ch
.text:00004C10 var_8           = dword ptr -8
.text:00004C10 var_4           = dword ptr -4
.text:00004C10 this            = dword ptr  8
.text:00004C10
.text:00004C10                 push    ebp
.text:00004C11                 mov     ebp, esp
.text:00004C13                 sub     esp, 10h
.text:00004C16                 mov     eax, 0CCCCCCCCh
.text:00004C1B                 mov     [ebp+var_10], eax
.text:00004C1E                 mov     [ebp+var_C], eax
.text:00004C21                 mov     [ebp+var_8], eax
.text:00004C24                 mov     [ebp+var_4], eax
.text:00004C27                 mov     eax, [ebp+this]
.text:00004C2A                 mov     ecx, [eax+4]
.text:00004C2D                 sub     ecx, 1
.text:00004C30                 mov     [ebp+var_C], ecx
.text:00004C33                 mov     edx, [ebp+this]
.text:00004C36                 mov     eax, [ebp+var_C]
.text:00004C39                 mov     [edx+4], eax
.text:00004C3C                 cmp     [ebp+var_C], 0
.text:00004C40                 jz      short loc_4C4A
.text:00004C42                 mov     ecx, [ebp+this]
.text:00004C45                 mov     eax, [ecx+4]
.text:00004C48                 jmp     short loc_4C74
.text:00004C4A ; ---------------------------------------------------------------------------
.text:00004C4A
.text:00004C4A loc_4C4A:                               ; CODE XREF: CSequentialOutStreamSizeCount::Release(void)+30j
.text:00004C4A                 mov     edx, [ebp+this]
.text:00004C4D                 mov     [ebp+var_8], edx
.text:00004C50                 mov     eax, [ebp+var_8]
.text:00004C53                 mov     [ebp+var_4], eax
.text:00004C56                 cmp     [ebp+var_4], 0
.text:00004C5A                 jz      short loc_4C6B
.text:00004C5C                 push    1
.text:00004C5E                 mov     ecx, [ebp+var_4]
.text:00004C61                 call    ??_GCSequentialOutStreamSizeCount@@QAEPAXI@Z ; CSequentialOutStreamSizeCount::`scalar deleting destructor'(uint)
.text:00004C66                 mov     [ebp+var_10], eax
.text:00004C69                 jmp     short loc_4C72
.text:00004C6B ; ---------------------------------------------------------------------------
.text:00004C6B
.text:00004C6B loc_4C6B:                               ; CODE XREF: CSequentialOutStreamSizeCount::Release(void)+4Aj
.text:00004C6B                 mov     [ebp+var_10], 0
.text:00004C72
.text:00004C72 loc_4C72:                               ; CODE XREF: CSequentialOutStreamSizeCount::Release(void)+59j
.text:00004C72                 xor     eax, eax
.text:00004C74
.text:00004C74 loc_4C74:                               ; CODE XREF: CSequentialOutStreamSizeCount::Release(void)+38j
.text:00004C74                 add     esp, 10h
.text:00004C77                 cmp     ebp, esp
.text:00004C79                 call    __RTC_CheckEsp
.text:00004C7E                 mov     esp, ebp
.text:00004C80                 pop     ebp
.text:00004C81                 retn    4
.text:00004C81 ?Release@CSequentialOutStreamSizeCount@@UAGKXZ endp
.text:00004C81
.text:00004C81 _text           ends
.text:00004C81
.text:00004C84 ; ===========================================================================
.text:00004C84
.text:00004C84 ; Segment type: Pure code
.text:00004C84 ; Segment permissions: Read/Execute
.text:00004C84 _text           segment para public 'CODE' use32
.text:00004C84                 assume cs:_text
.text:00004C84                 ;org 4C84h
.text:00004C84 ; COMDAT (pick any)
.text:00004C84                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004C84
.text:00004C84 ; =============== S U B R O U T I N E =======================================
.text:00004C84
.text:00004C84 ; Attributes: bp-based frame
.text:00004C84
.text:00004C84 ; public: void * __thiscall CSequentialOutStreamSizeCount::`scalar deleting destructor'(unsigned int)
.text:00004C84                 public ??_GCSequentialOutStreamSizeCount@@QAEPAXI@Z
.text:00004C84 ??_GCSequentialOutStreamSizeCount@@QAEPAXI@Z proc near
.text:00004C84                                         ; CODE XREF: CSequentialOutStreamSizeCount::Release(void)+51p
.text:00004C84
.text:00004C84 var_4           = dword ptr -4
.text:00004C84 arg_0           = dword ptr  8
.text:00004C84
.text:00004C84                 push    ebp
.text:00004C85                 mov     ebp, esp
.text:00004C87                 push    ecx
.text:00004C88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C8F                 mov     [ebp+var_4], ecx
.text:00004C92                 mov     ecx, [ebp+var_4] ; this
.text:00004C95                 call    ??1CSequentialOutStreamSizeCount@@QAE@XZ ; CSequentialOutStreamSizeCount::~CSequentialOutStreamSizeCount(void)
.text:00004C9A                 mov     eax, [ebp+arg_0]
.text:00004C9D                 and     eax, 1
.text:00004CA0                 jz      short loc_4CAE
.text:00004CA2                 mov     ecx, [ebp+var_4]
.text:00004CA5                 push    ecx             ; void *
.text:00004CA6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004CAB                 add     esp, 4
.text:00004CAE
.text:00004CAE loc_4CAE:                               ; CODE XREF: CSequentialOutStreamSizeCount::`scalar deleting destructor'(uint)+1Cj
.text:00004CAE                 mov     eax, [ebp+var_4]
.text:00004CB1                 add     esp, 4
.text:00004CB4                 cmp     ebp, esp
.text:00004CB6                 call    __RTC_CheckEsp
.text:00004CBB                 mov     esp, ebp
.text:00004CBD                 pop     ebp
.text:00004CBE                 retn    4
.text:00004CBE ??_GCSequentialOutStreamSizeCount@@QAEPAXI@Z endp
.text:00004CBE
.text:00004CBE ; ---------------------------------------------------------------------------
.text:00004CC1                 align 4
.text:00004CC1 _text           ends
.text:00004CC1
.text:00004CC4 ; ===========================================================================
.text:00004CC4
.text:00004CC4 ; Segment type: Pure code
.text:00004CC4 ; Segment permissions: Read/Execute
.text:00004CC4 _text           segment para public 'CODE' use32
.text:00004CC4                 assume cs:_text
.text:00004CC4                 ;org 4CC4h
.text:00004CC4 ; COMDAT (pick any)
.text:00004CC4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004CC4
.text:00004CC4 ; =============== S U B R O U T I N E =======================================
.text:00004CC4
.text:00004CC4 ; Attributes: bp-based frame
.text:00004CC4
.text:00004CC4 ; _DWORD __thiscall CSequentialOutStreamSizeCount::~CSequentialOutStreamSizeCount(CSequentialOutStreamSizeCount *__hidden this)
.text:00004CC4                 public ??1CSequentialOutStreamSizeCount@@QAE@XZ
.text:00004CC4 ??1CSequentialOutStreamSizeCount@@QAE@XZ proc near
.text:00004CC4                                         ; CODE XREF: CSequentialOutStreamSizeCount::`scalar deleting destructor'(uint)+11p
.text:00004CC4
.text:00004CC4 var_4           = dword ptr -4
.text:00004CC4
.text:00004CC4                 push    ebp
.text:00004CC5                 mov     ebp, esp
.text:00004CC7                 push    ecx
.text:00004CC8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CCF                 mov     [ebp+var_4], ecx
.text:00004CD2                 mov     ecx, [ebp+var_4]
.text:00004CD5                 add     ecx, 8
.text:00004CD8                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00004CDD                 add     esp, 4
.text:00004CE0                 cmp     ebp, esp
.text:00004CE2                 call    __RTC_CheckEsp
.text:00004CE7                 mov     esp, ebp
.text:00004CE9                 pop     ebp
.text:00004CEA                 retn
.text:00004CEA ??1CSequentialOutStreamSizeCount@@QAE@XZ endp
.text:00004CEA
.text:00004CEA ; ---------------------------------------------------------------------------
.text:00004CEB                 align 4
.text:00004CEB _text           ends
.text:00004CEB
.text:00004CEC ; ===========================================================================
.text:00004CEC
.text:00004CEC ; Segment type: Pure code
.text:00004CEC ; Segment permissions: Read/Execute
.text:00004CEC _text           segment para public 'CODE' use32
.text:00004CEC                 assume cs:_text
.text:00004CEC                 ;org 4CECh
.text:00004CEC ; COMDAT (pick any)
.text:00004CEC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004CEC
.text:00004CEC ; =============== S U B R O U T I N E =======================================
.text:00004CEC
.text:00004CEC ; Attributes: bp-based frame
.text:00004CEC
.text:00004CEC ; _DWORD __thiscall ICompressGetSubStreamSize::ICompressGetSubStreamSize(ICompressGetSubStreamSize *__hidden this)
.text:00004CEC                 public ??0ICompressGetSubStreamSize@@QAE@XZ
.text:00004CEC ??0ICompressGetSubStreamSize@@QAE@XZ proc near
.text:00004CEC                                         ; CODE XREF: CSequentialInStreamSizeCount2::CSequentialInStreamSizeCount2(void)+3Bp
.text:00004CEC
.text:00004CEC var_4           = dword ptr -4
.text:00004CEC
.text:00004CEC                 push    ebp
.text:00004CED                 mov     ebp, esp
.text:00004CEF                 push    ecx
.text:00004CF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CF7                 mov     [ebp+var_4], ecx
.text:00004CFA                 mov     ecx, [ebp+var_4]
.text:00004CFD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00004D02                 mov     eax, [ebp+var_4]
.text:00004D05                 mov     dword ptr [eax], offset ??_7ICompressGetSubStreamSize@@6B@ ; const ICompressGetSubStreamSize::`vftable'
.text:00004D0B                 mov     eax, [ebp+var_4]
.text:00004D0E                 add     esp, 4
.text:00004D11                 cmp     ebp, esp
.text:00004D13                 call    __RTC_CheckEsp
.text:00004D18                 mov     esp, ebp
.text:00004D1A                 pop     ebp
.text:00004D1B                 retn
.text:00004D1B ??0ICompressGetSubStreamSize@@QAE@XZ endp
.text:00004D1B
.text:00004D1B _text           ends
.text:00004D1B
.rdata:00004D1C ; ===========================================================================
.rdata:00004D1C
.rdata:00004D1C ; Segment type: Pure data
.rdata:00004D1C ; Segment permissions: Read
.rdata:00004D1C _rdata          segment dword public 'DATA' use32
.rdata:00004D1C                 assume cs:_rdata
.rdata:00004D1C                 ;org 4D1Ch
.rdata:00004D1C ; COMDAT (pick largest)
.rdata:00004D1C                 dd offset ??_R4ICompressGetSubStreamSize@@6B@ ; const ICompressGetSubStreamSize::`RTTI Complete Object Locator'
.rdata:00004D20                 public ??_7ICompressGetSubStreamSize@@6B@
.rdata:00004D20 ; const ICompressGetSubStreamSize::`vftable'
.rdata:00004D20 ??_7ICompressGetSubStreamSize@@6B@ dd offset __purecall
.rdata:00004D20                                         ; DATA XREF: ICompressGetSubStreamSize::ICompressGetSubStreamSize(void)+19o
.rdata:00004D24                 dd offset __purecall
.rdata:00004D28                 dd offset __purecall
.rdata:00004D2C                 dd offset __purecall
.rdata:00004D2C _rdata          ends
.rdata:00004D2C
.rdata$r:00004D30 ; ===========================================================================
.rdata$r:00004D30
.rdata$r:00004D30 ; Segment type: Pure data
.rdata$r:00004D30 ; Segment permissions: Read
.rdata$r:00004D30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004D30                 assume cs:_rdata$r
.rdata$r:00004D30                 ;org 4D30h
.rdata$r:00004D30 ; COMDAT (pick any)
.rdata$r:00004D30                 public ??_R4ICompressGetSubStreamSize@@6B@
.rdata$r:00004D30 ; const ICompressGetSubStreamSize::`RTTI Complete Object Locator'
.rdata$r:00004D30 ??_R4ICompressGetSubStreamSize@@6B@ db    0 ; DATA XREF: .rdata:00004D1Co
.rdata$r:00004D31                 db    0
.rdata$r:00004D32                 db    0
.rdata$r:00004D33                 db    0
.rdata$r:00004D34                 db    0
.rdata$r:00004D35                 db    0
.rdata$r:00004D36                 db    0
.rdata$r:00004D37                 db    0
.rdata$r:00004D38                 db    0
.rdata$r:00004D39                 db    0
.rdata$r:00004D3A                 db    0
.rdata$r:00004D3B                 db    0
.rdata$r:00004D3C                 dd offset ??_R0?AUICompressGetSubStreamSize@@@8 ; ICompressGetSubStreamSize `RTTI Type Descriptor'
.rdata$r:00004D40                 dd offset ??_R3ICompressGetSubStreamSize@@8 ; ICompressGetSubStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004D40 _rdata$r        ends
.rdata$r:00004D40
.xdata$x:00004D44 ; ===========================================================================
.xdata$x:00004D44
.xdata$x:00004D44 ; Segment type: Pure data
.xdata$x:00004D44 ; Segment permissions: Read
.xdata$x:00004D44 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004D44                 assume cs:_xdata$x
.xdata$x:00004D44                 ;org 4D44h
.xdata$x:00004D44 ; COMDAT (pick any)
.xdata$x:00004D44                 public __TI1H
.xdata$x:00004D44 __TI1H          db    0                 ; DATA XREF: NArchive::N7z::CEncoder::CEncoder(NArchive::N7z::CCompressionMethodMode const &)+CEo
.xdata$x:00004D44                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+80o ...
.xdata$x:00004D45                 db    0
.xdata$x:00004D46                 db    0
.xdata$x:00004D47                 db    0
.xdata$x:00004D48                 db    0
.xdata$x:00004D49                 db    0
.xdata$x:00004D4A                 db    0
.xdata$x:00004D4B                 db    0
.xdata$x:00004D4C                 db    0
.xdata$x:00004D4D                 db    0
.xdata$x:00004D4E                 db    0
.xdata$x:00004D4F                 db    0
.xdata$x:00004D50                 dd offset __CTA1H
.xdata$x:00004D50 _xdata$x        ends
.xdata$x:00004D50
.xdata$x:00004D54 ; ===========================================================================
.xdata$x:00004D54
.xdata$x:00004D54 ; Segment type: Pure data
.xdata$x:00004D54 ; Segment permissions: Read
.xdata$x:00004D54 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004D54                 assume cs:_xdata$x
.xdata$x:00004D54                 ;org 4D54h
.xdata$x:00004D54 ; COMDAT (pick any)
.xdata$x:00004D54                 public __CTA1H
.xdata$x:00004D54 __CTA1H         db    1                 ; DATA XREF: .xdata$x:00004D50o
.xdata$x:00004D55                 db    0
.xdata$x:00004D56                 db    0
.xdata$x:00004D57                 db    0
.xdata$x:00004D58                 dd offset __CT??_R0H@84
.xdata$x:00004D58 _xdata$x        ends
.xdata$x:00004D58
.xdata$x:00004D5C ; ===========================================================================
.xdata$x:00004D5C
.xdata$x:00004D5C ; Segment type: Pure data
.xdata$x:00004D5C ; Segment permissions: Read
.xdata$x:00004D5C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004D5C                 assume cs:_xdata$x
.xdata$x:00004D5C                 ;org 4D5Ch
.xdata$x:00004D5C ; COMDAT (pick any)
.xdata$x:00004D5C                 public __CT??_R0H@84
.xdata$x:00004D5C __CT??_R0H@84   db    1                 ; DATA XREF: .xdata$x:00004D58o
.xdata$x:00004D5D                 db    0
.xdata$x:00004D5E                 db    0
.xdata$x:00004D5F                 db    0
.xdata$x:00004D60                 dd offset ??_R0H@8      ; int `RTTI Type Descriptor'
.xdata$x:00004D64                 align 8
.xdata$x:00004D68                 db 0FFh
.xdata$x:00004D69                 db 0FFh
.xdata$x:00004D6A                 db 0FFh
.xdata$x:00004D6B                 db 0FFh
.xdata$x:00004D6C                 db    0
.xdata$x:00004D6D                 db    0
.xdata$x:00004D6E                 db    0
.xdata$x:00004D6F                 db    0
.xdata$x:00004D70                 db    4
.xdata$x:00004D71                 db    0
.xdata$x:00004D72                 db    0
.xdata$x:00004D73                 db    0
.xdata$x:00004D74                 db    0
.xdata$x:00004D75                 db    0
.xdata$x:00004D76                 db    0
.xdata$x:00004D77                 db    0
.xdata$x:00004D77 _xdata$x        ends
.xdata$x:00004D77
.data:00004D78 ; ===========================================================================
.data:00004D78
.data:00004D78 ; Segment type: Pure data
.data:00004D78 ; Segment permissions: Read/Write
.data:00004D78 _data           segment dword public 'DATA' use32
.data:00004D78                 assume cs:_data
.data:00004D78                 ;org 4D78h
.data:00004D78 ; COMDAT (pick any)
.data:00004D78                 public ??_R0H@8
.data:00004D78 ; int `RTTI Type Descriptor'
.data:00004D78 ??_R0H@8        dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:00004D60o
.data:00004D78                                         ; const type_info::`vftable'
.data:00004D7C                 align 10h
.data:00004D80                 db  2Eh ; .
.data:00004D81                 db  48h ; H
.data:00004D82                 db    0
.data:00004D83                 align 4
.data:00004D83 _data           ends
.data:00004D83
.text:00004D84 ; ===========================================================================
.text:00004D84
.text:00004D84 ; Segment type: Pure code
.text:00004D84 ; Segment permissions: Read/Execute
.text:00004D84 _text           segment para public 'CODE' use32
.text:00004D84                 assume cs:_text
.text:00004D84                 ;org 4D84h
.text:00004D84 ; COMDAT (pick any)
.text:00004D84                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004D84
.text:00004D84 ; =============== S U B R O U T I N E =======================================
.text:00004D84
.text:00004D84 ; Attributes: bp-based frame
.text:00004D84
.text:00004D84 ; bool __thiscall NArchive::N7z::CCompressionMethodMode::IsEmpty(NArchive::N7z::CCompressionMethodMode *__hidden this)
.text:00004D84                 public ?IsEmpty@CCompressionMethodMode@N7z@NArchive@@QBE_NXZ
.text:00004D84 ?IsEmpty@CCompressionMethodMode@N7z@NArchive@@QBE_NXZ proc near
.text:00004D84                                         ; CODE XREF: NArchive::N7z::CEncoder::CEncoder(NArchive::N7z::CCompressionMethodMode const &)+BBp
.text:00004D84
.text:00004D84 var_8           = dword ptr -8
.text:00004D84 var_4           = dword ptr -4
.text:00004D84
.text:00004D84                 push    ebp
.text:00004D85                 mov     ebp, esp
.text:00004D87                 sub     esp, 8
.text:00004D8A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004D91                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D98                 mov     [ebp+var_4], ecx
.text:00004D9B                 mov     ecx, [ebp+var_4]
.text:00004D9E                 call    ?IsEmpty@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::N7z::CMethodFull>::IsEmpty(void)
.text:00004DA3                 movzx   eax, al
.text:00004DA6                 test    eax, eax
.text:00004DA8                 jz      short loc_4DBE
.text:00004DAA                 mov     ecx, [ebp+var_4]
.text:00004DAD                 movzx   edx, byte ptr [ecx+21h]
.text:00004DB1                 test    edx, edx
.text:00004DB3                 jnz     short loc_4DBE
.text:00004DB5                 mov     [ebp+var_8], 1
.text:00004DBC                 jmp     short loc_4DC5
.text:00004DBE ; ---------------------------------------------------------------------------
.text:00004DBE
.text:00004DBE loc_4DBE:                               ; CODE XREF: NArchive::N7z::CCompressionMethodMode::IsEmpty(void)+24j
.text:00004DBE                                         ; NArchive::N7z::CCompressionMethodMode::IsEmpty(void)+2Fj
.text:00004DBE                 mov     [ebp+var_8], 0
.text:00004DC5
.text:00004DC5 loc_4DC5:                               ; CODE XREF: NArchive::N7z::CCompressionMethodMode::IsEmpty(void)+38j
.text:00004DC5                 mov     al, byte ptr [ebp+var_8]
.text:00004DC8                 add     esp, 8
.text:00004DCB                 cmp     ebp, esp
.text:00004DCD                 call    __RTC_CheckEsp
.text:00004DD2                 mov     esp, ebp
.text:00004DD4                 pop     ebp
.text:00004DD5                 retn
.text:00004DD5 ?IsEmpty@CCompressionMethodMode@N7z@NArchive@@QBE_NXZ endp
.text:00004DD5
.text:00004DD5 ; ---------------------------------------------------------------------------
.text:00004DD6                 align 4
.text:00004DD6 _text           ends
.text:00004DD6
.text:00004DD8 ; ===========================================================================
.text:00004DD8
.text:00004DD8 ; Segment type: Pure code
.text:00004DD8 ; Segment permissions: Read/Execute
.text:00004DD8 _text           segment para public 'CODE' use32
.text:00004DD8                 assume cs:_text
.text:00004DD8                 ;org 4DD8h
.text:00004DD8 ; COMDAT (pick any)
.text:00004DD8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004DD8
.text:00004DD8 ; =============== S U B R O U T I N E =======================================
.text:00004DD8
.text:00004DD8 ; Attributes: bp-based frame
.text:00004DD8
.text:00004DD8 ; _DWORD __thiscall NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(NArchive::N7z::CCompressionMethodMode *__hidden this)
.text:00004DD8                 public ??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text:00004DD8 ??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ proc near
.text:00004DD8                                         ; CODE XREF: NArchive::N7z::CEncoder::CEncoder(NArchive::N7z::CCompressionMethodMode const &)+4Ep
.text:00004DD8
.text:00004DD8 var_10          = dword ptr -10h
.text:00004DD8 var_C           = dword ptr -0Ch
.text:00004DD8 var_4           = dword ptr -4
.text:00004DD8
.text:00004DD8                 push    ebp
.text:00004DD9                 mov     ebp, esp
.text:00004DDB                 push    0FFFFFFFFh
.text:00004DDD                 push    offset __ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text:00004DE2                 mov     eax, large fs:0
.text:00004DE8                 push    eax
.text:00004DE9                 push    ecx
.text:00004DEA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004DF1                 mov     eax, dword ptr ds:___security_cookie
.text:00004DF6                 xor     eax, ebp
.text:00004DF8                 push    eax
.text:00004DF9                 lea     eax, [ebp+var_C]
.text:00004DFC                 mov     large fs:0, eax
.text:00004E02                 mov     [ebp+var_10], ecx
.text:00004E05                 mov     ecx, [ebp+var_10]
.text:00004E08                 call    ??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>(void)
.text:00004E0D                 mov     [ebp+var_4], 0
.text:00004E14                 mov     ecx, [ebp+var_10]
.text:00004E17                 add     ecx, 0Ch
.text:00004E1A                 call    ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>(void)
.text:00004E1F                 mov     byte ptr [ebp+var_4], 1
.text:00004E23                 mov     eax, [ebp+var_10]
.text:00004E26                 mov     byte ptr [eax+18h], 0
.text:00004E2A                 mov     ecx, [ebp+var_10]
.text:00004E2D                 mov     byte ptr [ecx+19h], 0
.text:00004E31                 mov     edx, [ebp+var_10]
.text:00004E34                 mov     dword ptr [edx+1Ch], 1
.text:00004E3B                 mov     eax, [ebp+var_10]
.text:00004E3E                 mov     byte ptr [eax+20h], 1
.text:00004E42                 mov     ecx, [ebp+var_10]
.text:00004E45                 mov     byte ptr [ecx+21h], 0
.text:00004E49                 mov     ecx, [ebp+var_10]
.text:00004E4C                 add     ecx, 24h ; '$'
.text:00004E4F                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00004E54                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004E5B                 mov     eax, [ebp+var_10]
.text:00004E5E                 mov     ecx, [ebp+var_C]
.text:00004E61                 mov     large fs:0, ecx
.text:00004E68                 pop     ecx
.text:00004E69                 add     esp, 10h
.text:00004E6C                 cmp     ebp, esp
.text:00004E6E                 call    __RTC_CheckEsp
.text:00004E73                 mov     esp, ebp
.text:00004E75                 pop     ebp
.text:00004E76                 retn
.text:00004E76 ??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ endp
.text:00004E76
.text:00004E76 ; ---------------------------------------------------------------------------
.text:00004E77                 align 4
.text:00004E77 _text           ends
.text:00004E77
.text$x:00004E78 ; ===========================================================================
.text$x:00004E78
.text$x:00004E78 ; Segment type: Pure code
.text$x:00004E78 ; Segment permissions: Read/Execute
.text$x:00004E78 _text$x         segment para public 'CODE' use32
.text$x:00004E78                 assume cs:_text$x
.text$x:00004E78                 ;org 4E78h
.text$x:00004E78 ; COMDAT (pick associative to section at 4DD8)
.text$x:00004E78                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00004E78
.text$x:00004E78 ; =============== S U B R O U T I N E =======================================
.text$x:00004E78
.text$x:00004E78
.text$x:00004E78 __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00004E78                                         ; DATA XREF: .xdata$x:00004EACo
.text$x:00004E78                 mov     ecx, [ebp-10h]
.text$x:00004E7B                 jmp     ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)
.text$x:00004E7B __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00004E7B
.text$x:00004E80
.text$x:00004E80 ; =============== S U B R O U T I N E =======================================
.text$x:00004E80
.text$x:00004E80
.text$x:00004E80 __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:00004E80                                         ; DATA XREF: .xdata$x:00004EB4o
.text$x:00004E80                 mov     ecx, [ebp-10h]
.text$x:00004E83                 add     ecx, 0Ch
.text$x:00004E86                 jmp     ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>(void)
.text$x:00004E86 __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00004E86
.text$x:00004E8B
.text$x:00004E8B ; =============== S U B R O U T I N E =======================================
.text$x:00004E8B
.text$x:00004E8B
.text$x:00004E8B __ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ proc near
.text$x:00004E8B                                         ; DATA XREF: NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(void)+5o
.text$x:00004E8B
.text$x:00004E8B arg_4           = dword ptr  8
.text$x:00004E8B
.text$x:00004E8B                 mov     edx, [esp+arg_4]
.text$x:00004E8F                 lea     eax, [edx+0Ch]
.text$x:00004E92                 mov     ecx, [edx-8]
.text$x:00004E95                 xor     ecx, eax
.text$x:00004E97                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E9C                 mov     eax, offset __ehfuncinfo$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text$x:00004EA1                 jmp     ___CxxFrameHandler3
.text$x:00004EA1 __ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ endp
.text$x:00004EA1
.text$x:00004EA1 ; ---------------------------------------------------------------------------
.text$x:00004EA6                 align 4
.text$x:00004EA6 _text$x         ends
.text$x:00004EA6
.xdata$x:00004EA8 ; ===========================================================================
.xdata$x:00004EA8
.xdata$x:00004EA8 ; Segment type: Pure data
.xdata$x:00004EA8 ; Segment permissions: Read
.xdata$x:00004EA8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004EA8                 assume cs:_xdata$x
.xdata$x:00004EA8                 ;org 4EA8h
.xdata$x:00004EA8 ; COMDAT (pick associative to section at 4DD8)
.xdata$x:00004EA8 __unwindtable$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00004EA8                                         ; DATA XREF: .xdata$x:00004EC0o
.xdata$x:00004EA9                 db 0FFh
.xdata$x:00004EAA                 db 0FFh
.xdata$x:00004EAB                 db 0FFh
.xdata$x:00004EAC                 dd offset __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0
.xdata$x:00004EB0                 db    0
.xdata$x:00004EB1                 db    0
.xdata$x:00004EB2                 db    0
.xdata$x:00004EB3                 db    0
.xdata$x:00004EB4                 dd offset __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1
.xdata$x:00004EB8 __ehfuncinfo$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00004EB8                                         ; DATA XREF: __ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00004EB9                 db    5
.xdata$x:00004EBA                 db  93h ; ô
.xdata$x:00004EBB                 db  19h
.xdata$x:00004EBC                 db    2
.xdata$x:00004EBD                 db    0
.xdata$x:00004EBE                 db    0
.xdata$x:00004EBF                 db    0
.xdata$x:00004EC0                 dd offset __unwindtable$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.xdata$x:00004EC4                 db    0
.xdata$x:00004EC5                 db    0
.xdata$x:00004EC6                 db    0
.xdata$x:00004EC7                 db    0
.xdata$x:00004EC8                 db    0
.xdata$x:00004EC9                 db    0
.xdata$x:00004ECA                 db    0
.xdata$x:00004ECB                 db    0
.xdata$x:00004ECC                 db    0
.xdata$x:00004ECD                 db    0
.xdata$x:00004ECE                 db    0
.xdata$x:00004ECF                 db    0
.xdata$x:00004ED0                 db    0
.xdata$x:00004ED1                 db    0
.xdata$x:00004ED2                 db    0
.xdata$x:00004ED3                 db    0
.xdata$x:00004ED4                 db    0
.xdata$x:00004ED5                 db    0
.xdata$x:00004ED6                 db    0
.xdata$x:00004ED7                 db    0
.xdata$x:00004ED8                 db    1
.xdata$x:00004ED9                 db    0
.xdata$x:00004EDA                 db    0
.xdata$x:00004EDB                 db    0
.xdata$x:00004EDB _xdata$x        ends
.xdata$x:00004EDB
.text:00004EDC ; ===========================================================================
.text:00004EDC
.text:00004EDC ; Segment type: Pure code
.text:00004EDC ; Segment permissions: Read/Execute
.text:00004EDC _text           segment para public 'CODE' use32
.text:00004EDC                 assume cs:_text
.text:00004EDC                 ;org 4EDCh
.text:00004EDC ; COMDAT (pick any)
.text:00004EDC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004EDC
.text:00004EDC ; =============== S U B R O U T I N E =======================================
.text:00004EDC
.text:00004EDC ; Attributes: bp-based frame
.text:00004EDC
.text:00004EDC ; _DWORD __thiscall NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(NArchive::N7z::CCompressionMethodMode *__hidden this)
.text:00004EDC                 public ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text:00004EDC ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ proc near
.text:00004EDC                                         ; CODE XREF: NArchive::N7z::CEncoder::~CEncoder(void)+91p
.text:00004EDC                                         ; __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$1+6j ...
.text:00004EDC
.text:00004EDC var_10          = dword ptr -10h
.text:00004EDC var_C           = dword ptr -0Ch
.text:00004EDC var_4           = dword ptr -4
.text:00004EDC
.text:00004EDC                 push    ebp
.text:00004EDD                 mov     ebp, esp
.text:00004EDF                 push    0FFFFFFFFh
.text:00004EE1                 push    offset __ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text:00004EE6                 mov     eax, large fs:0
.text:00004EEC                 push    eax
.text:00004EED                 push    ecx
.text:00004EEE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00004EF5                 mov     eax, dword ptr ds:___security_cookie
.text:00004EFA                 xor     eax, ebp
.text:00004EFC                 push    eax
.text:00004EFD                 lea     eax, [ebp+var_C]
.text:00004F00                 mov     large fs:0, eax
.text:00004F06                 mov     [ebp+var_10], ecx
.text:00004F09                 mov     [ebp+var_4], 1
.text:00004F10                 mov     ecx, [ebp+var_10]
.text:00004F13                 add     ecx, 24h ; '$'  ; this
.text:00004F16                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00004F1B                 mov     byte ptr [ebp+var_4], 0
.text:00004F1F                 mov     ecx, [ebp+var_10]
.text:00004F22                 add     ecx, 0Ch
.text:00004F25                 call    ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>(void)
.text:00004F2A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004F31                 mov     ecx, [ebp+var_10]
.text:00004F34                 call    ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)
.text:00004F39                 mov     ecx, [ebp+var_C]
.text:00004F3C                 mov     large fs:0, ecx
.text:00004F43                 pop     ecx
.text:00004F44                 add     esp, 10h
.text:00004F47                 cmp     ebp, esp
.text:00004F49                 call    __RTC_CheckEsp
.text:00004F4E                 mov     esp, ebp
.text:00004F50                 pop     ebp
.text:00004F51                 retn
.text:00004F51 ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ endp
.text:00004F51
.text:00004F51 ; ---------------------------------------------------------------------------
.text:00004F52                 align 4
.text:00004F52 _text           ends
.text:00004F52
.text$x:00004F54 ; ===========================================================================
.text$x:00004F54
.text$x:00004F54 ; Segment type: Pure code
.text$x:00004F54 ; Segment permissions: Read/Execute
.text$x:00004F54 _text$x         segment para public 'CODE' use32
.text$x:00004F54                 assume cs:_text$x
.text$x:00004F54                 ;org 4F54h
.text$x:00004F54 ; COMDAT (pick associative to section at 4EDC)
.text$x:00004F54                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00004F54
.text$x:00004F54 ; =============== S U B R O U T I N E =======================================
.text$x:00004F54
.text$x:00004F54
.text$x:00004F54 __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00004F54                                         ; DATA XREF: .xdata$x:00004F88o
.text$x:00004F54                 mov     ecx, [ebp-10h]
.text$x:00004F57                 jmp     ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)
.text$x:00004F57 __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00004F57
.text$x:00004F5C
.text$x:00004F5C ; =============== S U B R O U T I N E =======================================
.text$x:00004F5C
.text$x:00004F5C
.text$x:00004F5C __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:00004F5C                                         ; DATA XREF: .xdata$x:00004F90o
.text$x:00004F5C                 mov     ecx, [ebp-10h]
.text$x:00004F5F                 add     ecx, 0Ch
.text$x:00004F62                 jmp     ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>(void)
.text$x:00004F62 __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00004F62
.text$x:00004F67
.text$x:00004F67 ; =============== S U B R O U T I N E =======================================
.text$x:00004F67
.text$x:00004F67
.text$x:00004F67 __ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ proc near
.text$x:00004F67                                         ; DATA XREF: NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)+5o
.text$x:00004F67
.text$x:00004F67 arg_4           = dword ptr  8
.text$x:00004F67
.text$x:00004F67                 mov     edx, [esp+arg_4]
.text$x:00004F6B                 lea     eax, [edx+0Ch]
.text$x:00004F6E                 mov     ecx, [edx-8]
.text$x:00004F71                 xor     ecx, eax
.text$x:00004F73                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F78                 mov     eax, offset __ehfuncinfo$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.text$x:00004F7D                 jmp     ___CxxFrameHandler3
.text$x:00004F7D __ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ endp
.text$x:00004F7D
.text$x:00004F7D ; ---------------------------------------------------------------------------
.text$x:00004F82                 align 4
.text$x:00004F82 _text$x         ends
.text$x:00004F82
.xdata$x:00004F84 ; ===========================================================================
.xdata$x:00004F84
.xdata$x:00004F84 ; Segment type: Pure data
.xdata$x:00004F84 ; Segment permissions: Read
.xdata$x:00004F84 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004F84                 assume cs:_xdata$x
.xdata$x:00004F84                 ;org 4F84h
.xdata$x:00004F84 ; COMDAT (pick associative to section at 4EDC)
.xdata$x:00004F84 __unwindtable$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00004F84                                         ; DATA XREF: .xdata$x:00004F9Co
.xdata$x:00004F85                 db 0FFh
.xdata$x:00004F86                 db 0FFh
.xdata$x:00004F87                 db 0FFh
.xdata$x:00004F88                 dd offset __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0
.xdata$x:00004F8C                 align 10h
.xdata$x:00004F90                 dd offset __unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1
.xdata$x:00004F94 __ehfuncinfo$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00004F94                                         ; DATA XREF: __ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00004F95                 db    5
.xdata$x:00004F96                 db  93h ; ô
.xdata$x:00004F97                 db  19h
.xdata$x:00004F98                 db    2
.xdata$x:00004F99                 db    0
.xdata$x:00004F9A                 db    0
.xdata$x:00004F9B                 db    0
.xdata$x:00004F9C                 dd offset __unwindtable$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
.xdata$x:00004FA0                 db    0
.xdata$x:00004FA1                 db    0
.xdata$x:00004FA2                 db    0
.xdata$x:00004FA3                 db    0
.xdata$x:00004FA4                 db    0
.xdata$x:00004FA5                 db    0
.xdata$x:00004FA6                 db    0
.xdata$x:00004FA7                 db    0
.xdata$x:00004FA8                 db    0
.xdata$x:00004FA9                 db    0
.xdata$x:00004FAA                 db    0
.xdata$x:00004FAB                 db    0
.xdata$x:00004FAC                 db    0
.xdata$x:00004FAD                 db    0
.xdata$x:00004FAE                 db    0
.xdata$x:00004FAF                 db    0
.xdata$x:00004FB0                 db    0
.xdata$x:00004FB1                 db    0
.xdata$x:00004FB2                 db    0
.xdata$x:00004FB3                 db    0
.xdata$x:00004FB4                 db    1
.xdata$x:00004FB5                 db    0
.xdata$x:00004FB6                 db    0
.xdata$x:00004FB7                 db    0
.xdata$x:00004FB7 _xdata$x        ends
.xdata$x:00004FB7
.text:00004FB8 ; ===========================================================================
.text:00004FB8
.text:00004FB8 ; Segment type: Pure code
.text:00004FB8 ; Segment permissions: Read/Execute
.text:00004FB8 _text           segment para public 'CODE' use32
.text:00004FB8                 assume cs:_text
.text:00004FB8                 ;org 4FB8h
.text:00004FB8 ; COMDAT (pick any)
.text:00004FB8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004FB8
.text:00004FB8 ; =============== S U B R O U T I N E =======================================
.text:00004FB8
.text:00004FB8 ; Attributes: bp-based frame
.text:00004FB8
.text:00004FB8 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00004FB8                 public ??1UString@@QAE@XZ
.text:00004FB8 ??1UString@@QAE@XZ proc near            ; CODE XREF: NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)+3Ap
.text:00004FB8
.text:00004FB8 var_8           = dword ptr -8
.text:00004FB8 var_4           = dword ptr -4
.text:00004FB8
.text:00004FB8                 push    ebp
.text:00004FB9                 mov     ebp, esp
.text:00004FBB                 sub     esp, 8
.text:00004FBE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004FC5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004FCC                 mov     [ebp+var_4], ecx
.text:00004FCF                 mov     eax, [ebp+var_4]
.text:00004FD2                 mov     ecx, [eax]
.text:00004FD4                 mov     [ebp+var_8], ecx
.text:00004FD7                 mov     edx, [ebp+var_8]
.text:00004FDA                 push    edx             ; void *
.text:00004FDB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004FE0                 add     esp, 4
.text:00004FE3                 add     esp, 8
.text:00004FE6                 cmp     ebp, esp
.text:00004FE8                 call    __RTC_CheckEsp
.text:00004FED                 mov     esp, ebp
.text:00004FEF                 pop     ebp
.text:00004FF0                 retn
.text:00004FF0 ??1UString@@QAE@XZ endp
.text:00004FF0
.text:00004FF0 ; ---------------------------------------------------------------------------
.text:00004FF1                 align 4
.text:00004FF1 _text           ends
.text:00004FF1
.text:00004FF4 ; ===========================================================================
.text:00004FF4
.text:00004FF4 ; Segment type: Pure code
.text:00004FF4 ; Segment permissions: Read/Execute
.text:00004FF4 _text           segment para public 'CODE' use32
.text:00004FF4                 assume cs:_text
.text:00004FF4                 ;org 4FF4h
.text:00004FF4 ; COMDAT (pick any)
.text:00004FF4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004FF4
.text:00004FF4 ; =============== S U B R O U T I N E =======================================
.text:00004FF4
.text:00004FF4 ; Attributes: bp-based frame
.text:00004FF4
.text:00004FF4 ; public: struct NArchive::N7z::CCompressionMethodMode & __thiscall NArchive::N7z::CCompressionMethodMode::operator=(struct NArchive::N7z::CCompressionMethodMode const &)
.text:00004FF4                 public ??4CCompressionMethodMode@N7z@NArchive@@QAEAAU012@ABU012@@Z
.text:00004FF4 ??4CCompressionMethodMode@N7z@NArchive@@QAEAAU012@ABU012@@Z proc near
.text:00004FF4                                         ; CODE XREF: NArchive::N7z::CEncoder::CEncoder(NArchive::N7z::CCompressionMethodMode const &)+E6p
.text:00004FF4
.text:00004FF4 var_4           = dword ptr -4
.text:00004FF4 arg_0           = dword ptr  8
.text:00004FF4
.text:00004FF4                 push    ebp
.text:00004FF5                 mov     ebp, esp
.text:00004FF7                 push    ecx
.text:00004FF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004FFF                 mov     [ebp+var_4], ecx
.text:00005002                 mov     eax, [ebp+arg_0]
.text:00005005                 push    eax
.text:00005006                 mov     ecx, [ebp+var_4]
.text:00005009                 call    ??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator=(CObjectVector<NArchive::N7z::CMethodFull> const &)
.text:0000500E                 mov     ecx, [ebp+arg_0]
.text:00005011                 add     ecx, 0Ch
.text:00005014                 push    ecx
.text:00005015                 mov     ecx, [ebp+var_4]
.text:00005018                 add     ecx, 0Ch
.text:0000501B                 call    ??4?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NArchive::N7z::CBond2>::operator=(CRecordVector<NArchive::N7z::CBond2> const &)
.text:00005020                 mov     edx, [ebp+var_4]
.text:00005023                 mov     eax, [ebp+arg_0]
.text:00005026                 mov     cl, [eax+18h]
.text:00005029                 mov     [edx+18h], cl
.text:0000502C                 mov     edx, [ebp+var_4]
.text:0000502F                 mov     eax, [ebp+arg_0]
.text:00005032                 mov     cl, [eax+19h]
.text:00005035                 mov     [edx+19h], cl
.text:00005038                 mov     edx, [ebp+var_4]
.text:0000503B                 mov     eax, [ebp+arg_0]
.text:0000503E                 mov     ecx, [eax+1Ch]
.text:00005041                 mov     [edx+1Ch], ecx
.text:00005044                 mov     edx, [ebp+var_4]
.text:00005047                 mov     eax, [ebp+arg_0]
.text:0000504A                 mov     cl, [eax+20h]
.text:0000504D                 mov     [edx+20h], cl
.text:00005050                 mov     edx, [ebp+var_4]
.text:00005053                 mov     eax, [ebp+arg_0]
.text:00005056                 mov     cl, [eax+21h]
.text:00005059                 mov     [edx+21h], cl
.text:0000505C                 mov     edx, [ebp+arg_0]
.text:0000505F                 add     edx, 24h ; '$'
.text:00005062                 push    edx
.text:00005063                 mov     ecx, [ebp+var_4]
.text:00005066                 add     ecx, 24h ; '$'
.text:00005069                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:0000506E                 mov     eax, [ebp+var_4]
.text:00005071                 add     esp, 4
.text:00005074                 cmp     ebp, esp
.text:00005076                 call    __RTC_CheckEsp
.text:0000507B                 mov     esp, ebp
.text:0000507D                 pop     ebp
.text:0000507E                 retn    4
.text:0000507E ??4CCompressionMethodMode@N7z@NArchive@@QAEAAU012@ABU012@@Z endp
.text:0000507E
.text:0000507E ; ---------------------------------------------------------------------------
.text:00005081                 align 4
.text:00005081 _text           ends
.text:00005081
.text:00005084 ; ===========================================================================
.text:00005084
.text:00005084 ; Segment type: Pure code
.text:00005084 ; Segment permissions: Read/Execute
.text:00005084 _text           segment para public 'CODE' use32
.text:00005084                 assume cs:_text
.text:00005084                 ;org 5084h
.text:00005084 ; COMDAT (pick any)
.text:00005084                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005084
.text:00005084 ; =============== S U B R O U T I N E =======================================
.text:00005084
.text:00005084 ; Attributes: bp-based frame
.text:00005084
.text:00005084 ; int __thiscall NCoderMixer2::CBindInfo::FindBond_for_PackStream(NCoderMixer2::CBindInfo *this, unsigned int)
.text:00005084                 public ?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z
.text:00005084 ?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z proc near
.text:00005084                                         ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+334p
.text:00005084                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+3EAp
.text:00005084
.text:00005084 var_8           = dword ptr -8
.text:00005084 var_4           = dword ptr -4
.text:00005084 arg_0           = dword ptr  8
.text:00005084
.text:00005084                 push    ebp
.text:00005085                 mov     ebp, esp
.text:00005087                 sub     esp, 8
.text:0000508A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005091                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005098                 mov     [ebp+var_4], ecx
.text:0000509B                 mov     [ebp+var_8], 0
.text:000050A2                 jmp     short loc_50AD
.text:000050A4 ; ---------------------------------------------------------------------------
.text:000050A4
.text:000050A4 loc_50A4:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_PackStream(uint):loc_50D8j
.text:000050A4                 mov     eax, [ebp+var_8]
.text:000050A7                 add     eax, 1
.text:000050AA                 mov     [ebp+var_8], eax
.text:000050AD
.text:000050AD loc_50AD:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_PackStream(uint)+1Ej
.text:000050AD                 mov     ecx, [ebp+var_4]
.text:000050B0                 add     ecx, 0Ch
.text:000050B3                 call    ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size(void)
.text:000050B8                 cmp     [ebp+var_8], eax
.text:000050BB                 jnb     short loc_50DA
.text:000050BD                 mov     ecx, [ebp+var_8]
.text:000050C0                 push    ecx
.text:000050C1                 mov     ecx, [ebp+var_4]
.text:000050C4                 add     ecx, 0Ch
.text:000050C7                 call    ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[](uint)
.text:000050CC                 mov     edx, [eax]
.text:000050CE                 cmp     edx, [ebp+arg_0]
.text:000050D1                 jnz     short loc_50D8
.text:000050D3                 mov     eax, [ebp+var_8]
.text:000050D6                 jmp     short loc_50DD
.text:000050D8 ; ---------------------------------------------------------------------------
.text:000050D8
.text:000050D8 loc_50D8:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_PackStream(uint)+4Dj
.text:000050D8                 jmp     short loc_50A4
.text:000050DA ; ---------------------------------------------------------------------------
.text:000050DA
.text:000050DA loc_50DA:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_PackStream(uint)+37j
.text:000050DA                 or      eax, 0FFFFFFFFh
.text:000050DD
.text:000050DD loc_50DD:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_PackStream(uint)+52j
.text:000050DD                 add     esp, 8
.text:000050E0                 cmp     ebp, esp
.text:000050E2                 call    __RTC_CheckEsp
.text:000050E7                 mov     esp, ebp
.text:000050E9                 pop     ebp
.text:000050EA                 retn    4
.text:000050EA ?FindBond_for_PackStream@CBindInfo@NCoderMixer2@@QBEHI@Z endp
.text:000050EA
.text:000050EA ; ---------------------------------------------------------------------------
.text:000050ED                 align 10h
.text:000050ED _text           ends
.text:000050ED
.text:000050F0 ; ===========================================================================
.text:000050F0
.text:000050F0 ; Segment type: Pure code
.text:000050F0 ; Segment permissions: Read/Execute
.text:000050F0 _text           segment para public 'CODE' use32
.text:000050F0                 assume cs:_text
.text:000050F0                 ;org 50F0h
.text:000050F0 ; COMDAT (pick any)
.text:000050F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000050F0
.text:000050F0 ; =============== S U B R O U T I N E =======================================
.text:000050F0
.text:000050F0 ; Attributes: bp-based frame
.text:000050F0
.text:000050F0 ; bool __thiscall NCoderMixer2::CBindInfo::SetUnpackCoder(NCoderMixer2::CBindInfo *__hidden this)
.text:000050F0                 public ?SetUnpackCoder@CBindInfo@NCoderMixer2@@QAE_NXZ
.text:000050F0 ?SetUnpackCoder@CBindInfo@NCoderMixer2@@QAE_NXZ proc near
.text:000050F0                                         ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+355p
.text:000050F0
.text:000050F0 var_C           = dword ptr -0Ch
.text:000050F0 var_8           = dword ptr -8
.text:000050F0 var_4           = dword ptr -4
.text:000050F0
.text:000050F0                 push    ebp
.text:000050F1                 mov     ebp, esp
.text:000050F3                 sub     esp, 0Ch
.text:000050F6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000050FD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005104                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000510B                 mov     [ebp+var_4], ecx
.text:0000510E                 mov     byte ptr [ebp+var_8+3], 0
.text:00005112                 mov     [ebp+var_C], 0
.text:00005119                 jmp     short loc_5124
.text:0000511B ; ---------------------------------------------------------------------------
.text:0000511B
.text:0000511B loc_511B:                               ; CODE XREF: NCoderMixer2::CBindInfo::SetUnpackCoder(void):loc_515Aj
.text:0000511B                 mov     eax, [ebp+var_C]
.text:0000511E                 add     eax, 1
.text:00005121                 mov     [ebp+var_C], eax
.text:00005124
.text:00005124 loc_5124:                               ; CODE XREF: NCoderMixer2::CBindInfo::SetUnpackCoder(void)+29j
.text:00005124                 mov     ecx, [ebp+var_4]
.text:00005127                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:0000512C                 cmp     [ebp+var_C], eax
.text:0000512F                 jnb     short loc_515C
.text:00005131                 mov     ecx, [ebp+var_C]
.text:00005134                 push    ecx             ; unsigned int
.text:00005135                 mov     ecx, [ebp+var_4] ; this
.text:00005138                 call    ?FindBond_for_UnpackStream@CBindInfo@NCoderMixer2@@QBEHI@Z ; NCoderMixer2::CBindInfo::FindBond_for_UnpackStream(uint)
.text:0000513D                 test    eax, eax
.text:0000513F                 jge     short loc_515A
.text:00005141                 movzx   edx, byte ptr [ebp+var_8+3]
.text:00005145                 test    edx, edx
.text:00005147                 jz      short loc_514D
.text:00005149                 xor     al, al
.text:0000514B                 jmp     short loc_515F
.text:0000514D ; ---------------------------------------------------------------------------
.text:0000514D
.text:0000514D loc_514D:                               ; CODE XREF: NCoderMixer2::CBindInfo::SetUnpackCoder(void)+57j
.text:0000514D                 mov     eax, [ebp+var_4]
.text:00005150                 mov     ecx, [ebp+var_C]
.text:00005153                 mov     [eax+24h], ecx
.text:00005156                 mov     byte ptr [ebp+var_8+3], 1
.text:0000515A
.text:0000515A loc_515A:                               ; CODE XREF: NCoderMixer2::CBindInfo::SetUnpackCoder(void)+4Fj
.text:0000515A                 jmp     short loc_511B
.text:0000515C ; ---------------------------------------------------------------------------
.text:0000515C
.text:0000515C loc_515C:                               ; CODE XREF: NCoderMixer2::CBindInfo::SetUnpackCoder(void)+3Fj
.text:0000515C                 mov     al, byte ptr [ebp+var_8+3]
.text:0000515F
.text:0000515F loc_515F:                               ; CODE XREF: NCoderMixer2::CBindInfo::SetUnpackCoder(void)+5Bj
.text:0000515F                 add     esp, 0Ch
.text:00005162                 cmp     ebp, esp
.text:00005164                 call    __RTC_CheckEsp
.text:00005169                 mov     esp, ebp
.text:0000516B                 pop     ebp
.text:0000516C                 retn
.text:0000516C ?SetUnpackCoder@CBindInfo@NCoderMixer2@@QAE_NXZ endp
.text:0000516C
.text:0000516C ; ---------------------------------------------------------------------------
.text:0000516D                 align 10h
.text:0000516D _text           ends
.text:0000516D
.text:00005170 ; ===========================================================================
.text:00005170
.text:00005170 ; Segment type: Pure code
.text:00005170 ; Segment permissions: Read/Execute
.text:00005170 _text           segment para public 'CODE' use32
.text:00005170                 assume cs:_text
.text:00005170                 ;org 5170h
.text:00005170 ; COMDAT (pick any)
.text:00005170                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005170
.text:00005170 ; =============== S U B R O U T I N E =======================================
.text:00005170
.text:00005170 ; Attributes: bp-based frame
.text:00005170
.text:00005170 ; int __thiscall NCoderMixer2::CBindInfo::FindStream_in_PackStreams(NCoderMixer2::CBindInfo *this, unsigned int)
.text:00005170                 public ?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z
.text:00005170 ?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z proc near
.text:00005170                                         ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+428p
.text:00005170
.text:00005170 var_8           = dword ptr -8
.text:00005170 var_4           = dword ptr -4
.text:00005170 arg_0           = dword ptr  8
.text:00005170
.text:00005170                 push    ebp
.text:00005171                 mov     ebp, esp
.text:00005173                 sub     esp, 8
.text:00005176                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000517D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005184                 mov     [ebp+var_4], ecx
.text:00005187                 mov     [ebp+var_8], 0
.text:0000518E                 jmp     short loc_5199
.text:00005190 ; ---------------------------------------------------------------------------
.text:00005190
.text:00005190 loc_5190:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindStream_in_PackStreams(uint):loc_51C4j
.text:00005190                 mov     eax, [ebp+var_8]
.text:00005193                 add     eax, 1
.text:00005196                 mov     [ebp+var_8], eax
.text:00005199
.text:00005199 loc_5199:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindStream_in_PackStreams(uint)+1Ej
.text:00005199                 mov     ecx, [ebp+var_4]
.text:0000519C                 add     ecx, 18h
.text:0000519F                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:000051A4                 cmp     [ebp+var_8], eax
.text:000051A7                 jnb     short loc_51C6
.text:000051A9                 mov     ecx, [ebp+var_8]
.text:000051AC                 push    ecx
.text:000051AD                 mov     ecx, [ebp+var_4]
.text:000051B0                 add     ecx, 18h
.text:000051B3                 call    ??A?$CRecordVector@I@@QBEABII@Z ; CRecordVector<uint>::operator[](uint)
.text:000051B8                 mov     edx, [eax]
.text:000051BA                 cmp     edx, [ebp+arg_0]
.text:000051BD                 jnz     short loc_51C4
.text:000051BF                 mov     eax, [ebp+var_8]
.text:000051C2                 jmp     short loc_51C9
.text:000051C4 ; ---------------------------------------------------------------------------
.text:000051C4
.text:000051C4 loc_51C4:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindStream_in_PackStreams(uint)+4Dj
.text:000051C4                 jmp     short loc_5190
.text:000051C6 ; ---------------------------------------------------------------------------
.text:000051C6
.text:000051C6 loc_51C6:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindStream_in_PackStreams(uint)+37j
.text:000051C6                 or      eax, 0FFFFFFFFh
.text:000051C9
.text:000051C9 loc_51C9:                               ; CODE XREF: NCoderMixer2::CBindInfo::FindStream_in_PackStreams(uint)+52j
.text:000051C9                 add     esp, 8
.text:000051CC                 cmp     ebp, esp
.text:000051CE                 call    __RTC_CheckEsp
.text:000051D3                 mov     esp, ebp
.text:000051D5                 pop     ebp
.text:000051D6                 retn    4
.text:000051D6 ?FindStream_in_PackStreams@CBindInfo@NCoderMixer2@@QBEHI@Z endp
.text:000051D6
.text:000051D6 ; ---------------------------------------------------------------------------
.text:000051D9                 align 4
.text:000051D9 _text           ends
.text:000051D9
.text:000051DC ; ===========================================================================
.text:000051DC
.text:000051DC ; Segment type: Pure code
.text:000051DC ; Segment permissions: Read/Execute
.text:000051DC _text           segment para public 'CODE' use32
.text:000051DC                 assume cs:_text
.text:000051DC                 ;org 51DCh
.text:000051DC ; COMDAT (pick any)
.text:000051DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000051DC
.text:000051DC ; =============== S U B R O U T I N E =======================================
.text:000051DC
.text:000051DC ; Attributes: bp-based frame
.text:000051DC
.text:000051DC ; unsigned int __thiscall NCoderMixer2::CBindInfo::GetStream_for_Coder(NCoderMixer2::CBindInfo *this, unsigned int)
.text:000051DC                 public ?GetStream_for_Coder@CBindInfo@NCoderMixer2@@QBEII@Z
.text:000051DC ?GetStream_for_Coder@CBindInfo@NCoderMixer2@@QBEII@Z proc near
.text:000051DC                                         ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+2DBp
.text:000051DC
.text:000051DC var_C           = dword ptr -0Ch
.text:000051DC var_8           = dword ptr -8
.text:000051DC var_4           = dword ptr -4
.text:000051DC arg_0           = dword ptr  8
.text:000051DC
.text:000051DC                 push    ebp
.text:000051DD                 mov     ebp, esp
.text:000051DF                 sub     esp, 0Ch
.text:000051E2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000051E9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000051F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000051F7                 mov     [ebp+var_4], ecx
.text:000051FA                 mov     [ebp+var_8], 0
.text:00005201                 mov     [ebp+var_C], 0
.text:00005208                 jmp     short loc_5213
.text:0000520A ; ---------------------------------------------------------------------------
.text:0000520A
.text:0000520A loc_520A:                               ; CODE XREF: NCoderMixer2::CBindInfo::GetStream_for_Coder(uint)+53j
.text:0000520A                 mov     eax, [ebp+var_C]
.text:0000520D                 add     eax, 1
.text:00005210                 mov     [ebp+var_C], eax
.text:00005213
.text:00005213 loc_5213:                               ; CODE XREF: NCoderMixer2::CBindInfo::GetStream_for_Coder(uint)+2Cj
.text:00005213                 mov     ecx, [ebp+var_C]
.text:00005216                 cmp     ecx, [ebp+arg_0]
.text:00005219                 jnb     short loc_5231
.text:0000521B                 mov     edx, [ebp+var_C]
.text:0000521E                 push    edx
.text:0000521F                 mov     ecx, [ebp+var_4]
.text:00005222                 call    ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[](uint)
.text:00005227                 mov     ecx, [ebp+var_8]
.text:0000522A                 add     ecx, [eax]
.text:0000522C                 mov     [ebp+var_8], ecx
.text:0000522F                 jmp     short loc_520A
.text:00005231 ; ---------------------------------------------------------------------------
.text:00005231
.text:00005231 loc_5231:                               ; CODE XREF: NCoderMixer2::CBindInfo::GetStream_for_Coder(uint)+3Dj
.text:00005231                 mov     eax, [ebp+var_8]
.text:00005234                 add     esp, 0Ch
.text:00005237                 cmp     ebp, esp
.text:00005239                 call    __RTC_CheckEsp
.text:0000523E                 mov     esp, ebp
.text:00005240                 pop     ebp
.text:00005241                 retn    4
.text:00005241 ?GetStream_for_Coder@CBindInfo@NCoderMixer2@@QBEII@Z endp
.text:00005241
.text:00005241 _text           ends
.text:00005241
.text:00005244 ; ===========================================================================
.text:00005244
.text:00005244 ; Segment type: Pure code
.text:00005244 ; Segment permissions: Read/Execute
.text:00005244 _text           segment para public 'CODE' use32
.text:00005244                 assume cs:_text
.text:00005244                 ;org 5244h
.text:00005244 ; COMDAT (pick any)
.text:00005244                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005244
.text:00005244 ; =============== S U B R O U T I N E =======================================
.text:00005244
.text:00005244 ; Attributes: bp-based frame
.text:00005244
.text:00005244 ; _DWORD __thiscall NArchive::N7z::CMethodFull::CMethodFull(NArchive::N7z::CMethodFull *__hidden this)
.text:00005244                 public ??0CMethodFull@N7z@NArchive@@QAE@XZ
.text:00005244 ??0CMethodFull@N7z@NArchive@@QAE@XZ proc near
.text:00005244                                         ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+C1p
.text:00005244                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+516p
.text:00005244
.text:00005244 var_4           = dword ptr -4
.text:00005244
.text:00005244                 push    ebp
.text:00005245                 mov     ebp, esp
.text:00005247                 push    ecx
.text:00005248                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000524F                 mov     [ebp+var_4], ecx
.text:00005252                 mov     ecx, [ebp+var_4] ; this
.text:00005255                 call    ??0CMethodProps@@QAE@XZ ; CMethodProps::CMethodProps(void)
.text:0000525A                 mov     eax, [ebp+var_4]
.text:0000525D                 add     esp, 4
.text:00005260                 cmp     ebp, esp
.text:00005262                 call    __RTC_CheckEsp
.text:00005267                 mov     esp, ebp
.text:00005269                 pop     ebp
.text:0000526A                 retn
.text:0000526A ??0CMethodFull@N7z@NArchive@@QAE@XZ endp
.text:0000526A
.text:0000526A ; ---------------------------------------------------------------------------
.text:0000526B                 align 4
.text:0000526B _text           ends
.text:0000526B
.text:0000526C ; ===========================================================================
.text:0000526C
.text:0000526C ; Segment type: Pure code
.text:0000526C ; Segment permissions: Read/Execute
.text:0000526C _text           segment para public 'CODE' use32
.text:0000526C                 assume cs:_text
.text:0000526C                 ;org 526Ch
.text:0000526C ; COMDAT (pick any)
.text:0000526C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000526C
.text:0000526C ; =============== S U B R O U T I N E =======================================
.text:0000526C
.text:0000526C ; Attributes: bp-based frame
.text:0000526C
.text:0000526C ; _DWORD __thiscall NArchive::N7z::CMethodFull::~CMethodFull(NArchive::N7z::CMethodFull *__hidden this)
.text:0000526C                 public ??1CMethodFull@N7z@NArchive@@QAE@XZ
.text:0000526C ??1CMethodFull@N7z@NArchive@@QAE@XZ proc near
.text:0000526C                                         ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+128p
.text:0000526C                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+59Fp ...
.text:0000526C
.text:0000526C var_4           = dword ptr -4
.text:0000526C
.text:0000526C                 push    ebp
.text:0000526D                 mov     ebp, esp
.text:0000526F                 push    ecx
.text:00005270                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005277                 mov     [ebp+var_4], ecx
.text:0000527A                 mov     ecx, [ebp+var_4] ; this
.text:0000527D                 call    ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text:00005282                 add     esp, 4
.text:00005285                 cmp     ebp, esp
.text:00005287                 call    __RTC_CheckEsp
.text:0000528C                 mov     esp, ebp
.text:0000528E                 pop     ebp
.text:0000528F                 retn
.text:0000528F ??1CMethodFull@N7z@NArchive@@QAE@XZ endp
.text:0000528F
.text:0000528F _text           ends
.text:0000528F
.text:00005290 ; ===========================================================================
.text:00005290
.text:00005290 ; Segment type: Pure code
.text:00005290 ; Segment permissions: Read/Execute
.text:00005290 _text           segment para public 'CODE' use32
.text:00005290                 assume cs:_text
.text:00005290                 ;org 5290h
.text:00005290 ; COMDAT (pick any)
.text:00005290                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005290
.text:00005290 ; =============== S U B R O U T I N E =======================================
.text:00005290
.text:00005290 ; Attributes: bp-based frame
.text:00005290
.text:00005290 ; _DWORD __thiscall CMethodProps::CMethodProps(CMethodProps *__hidden this)
.text:00005290                 public ??0CMethodProps@@QAE@XZ
.text:00005290 ??0CMethodProps@@QAE@XZ proc near       ; CODE XREF: NArchive::N7z::CMethodFull::CMethodFull(void)+11p
.text:00005290
.text:00005290 var_4           = dword ptr -4
.text:00005290
.text:00005290                 push    ebp
.text:00005291                 mov     ebp, esp
.text:00005293                 push    ecx
.text:00005294                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000529B                 mov     [ebp+var_4], ecx
.text:0000529E                 mov     ecx, [ebp+var_4]
.text:000052A1                 call    ??0CProps@@QAE@XZ ; CProps::CProps(void)
.text:000052A6                 mov     eax, [ebp+var_4]
.text:000052A9                 add     esp, 4
.text:000052AC                 cmp     ebp, esp
.text:000052AE                 call    __RTC_CheckEsp
.text:000052B3                 mov     esp, ebp
.text:000052B5                 pop     ebp
.text:000052B6                 retn
.text:000052B6 ??0CMethodProps@@QAE@XZ endp
.text:000052B6
.text:000052B6 ; ---------------------------------------------------------------------------
.text:000052B7                 align 4
.text:000052B7 _text           ends
.text:000052B7
.text:000052B8 ; ===========================================================================
.text:000052B8
.text:000052B8 ; Segment type: Pure code
.text:000052B8 ; Segment permissions: Read/Execute
.text:000052B8 _text           segment para public 'CODE' use32
.text:000052B8                 assume cs:_text
.text:000052B8                 ;org 52B8h
.text:000052B8 ; COMDAT (pick any)
.text:000052B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000052B8
.text:000052B8 ; =============== S U B R O U T I N E =======================================
.text:000052B8
.text:000052B8 ; Attributes: bp-based frame
.text:000052B8
.text:000052B8 ; _DWORD __thiscall CMethodProps::~CMethodProps(CMethodProps *__hidden this)
.text:000052B8                 public ??1CMethodProps@@QAE@XZ
.text:000052B8 ??1CMethodProps@@QAE@XZ proc near       ; CODE XREF: NArchive::N7z::CMethodFull::~CMethodFull(void)+11p
.text:000052B8
.text:000052B8 var_4           = dword ptr -4
.text:000052B8
.text:000052B8                 push    ebp
.text:000052B9                 mov     ebp, esp
.text:000052BB                 push    ecx
.text:000052BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000052C3                 mov     [ebp+var_4], ecx
.text:000052C6                 mov     ecx, [ebp+var_4] ; this
.text:000052C9                 call    ??1CProps@@QAE@XZ ; CProps::~CProps(void)
.text:000052CE                 add     esp, 4
.text:000052D1                 cmp     ebp, esp
.text:000052D3                 call    __RTC_CheckEsp
.text:000052D8                 mov     esp, ebp
.text:000052DA                 pop     ebp
.text:000052DB                 retn
.text:000052DB ??1CMethodProps@@QAE@XZ endp
.text:000052DB
.text:000052DB _text           ends
.text:000052DB
.text:000052DC ; ===========================================================================
.text:000052DC
.text:000052DC ; Segment type: Pure code
.text:000052DC ; Segment permissions: Read/Execute
.text:000052DC _text           segment para public 'CODE' use32
.text:000052DC                 assume cs:_text
.text:000052DC                 ;org 52DCh
.text:000052DC ; COMDAT (pick any)
.text:000052DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000052DC
.text:000052DC ; =============== S U B R O U T I N E =======================================
.text:000052DC
.text:000052DC ; Attributes: bp-based frame
.text:000052DC
.text:000052DC ; public: __thiscall CProps::CProps(void)
.text:000052DC                 public ??0CProps@@QAE@XZ
.text:000052DC ??0CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::CMethodProps(void)+11p
.text:000052DC
.text:000052DC var_4           = dword ptr -4
.text:000052DC
.text:000052DC                 push    ebp
.text:000052DD                 mov     ebp, esp
.text:000052DF                 push    ecx
.text:000052E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000052E7                 mov     [ebp+var_4], ecx
.text:000052EA                 mov     ecx, [ebp+var_4]
.text:000052ED                 call    ??0?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::CObjectVector<CProp>(void)
.text:000052F2                 mov     eax, [ebp+var_4]
.text:000052F5                 add     esp, 4
.text:000052F8                 cmp     ebp, esp
.text:000052FA                 call    __RTC_CheckEsp
.text:000052FF                 mov     esp, ebp
.text:00005301                 pop     ebp
.text:00005302                 retn
.text:00005302 ??0CProps@@QAE@XZ endp
.text:00005302
.text:00005302 ; ---------------------------------------------------------------------------
.text:00005303                 align 4
.text:00005303 _text           ends
.text:00005303
.text:00005304 ; ===========================================================================
.text:00005304
.text:00005304 ; Segment type: Pure code
.text:00005304 ; Segment permissions: Read/Execute
.text:00005304 _text           segment para public 'CODE' use32
.text:00005304                 assume cs:_text
.text:00005304                 ;org 5304h
.text:00005304 ; COMDAT (pick any)
.text:00005304                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005304
.text:00005304 ; =============== S U B R O U T I N E =======================================
.text:00005304
.text:00005304 ; Attributes: bp-based frame
.text:00005304
.text:00005304 ; _DWORD __thiscall CProps::~CProps(CProps *__hidden this)
.text:00005304                 public ??1CProps@@QAE@XZ
.text:00005304 ??1CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::~CMethodProps(void)+11p
.text:00005304
.text:00005304 var_4           = dword ptr -4
.text:00005304
.text:00005304                 push    ebp
.text:00005305                 mov     ebp, esp
.text:00005307                 push    ecx
.text:00005308                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000530F                 mov     [ebp+var_4], ecx
.text:00005312                 mov     ecx, [ebp+var_4]
.text:00005315                 call    ??1?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::~CObjectVector<CProp>(void)
.text:0000531A                 add     esp, 4
.text:0000531D                 cmp     ebp, esp
.text:0000531F                 call    __RTC_CheckEsp
.text:00005324                 mov     esp, ebp
.text:00005326                 pop     ebp
.text:00005327                 retn
.text:00005327 ??1CProps@@QAE@XZ endp
.text:00005327
.text:00005327 _text           ends
.text:00005327
.text:00005328 ; ===========================================================================
.text:00005328
.text:00005328 ; Segment type: Pure code
.text:00005328 ; Segment permissions: Read/Execute
.text:00005328 _text           segment para public 'CODE' use32
.text:00005328                 assume cs:_text
.text:00005328                 ;org 5328h
.text:00005328 ; COMDAT (pick any)
.text:00005328                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005328
.text:00005328 ; =============== S U B R O U T I N E =======================================
.text:00005328
.text:00005328 ; Attributes: bp-based frame
.text:00005328
.text:00005328 ; public: __thiscall CMyComPtr<struct ICompressCoder>::CMyComPtr<struct ICompressCoder>(void)
.text:00005328                 public ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:00005328 ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:00005328                                         ; CODE XREF: CCreatedCoder::CCreatedCoder(void)+30p
.text:00005328
.text:00005328 var_4           = dword ptr -4
.text:00005328
.text:00005328                 push    ebp
.text:00005329                 mov     ebp, esp
.text:0000532B                 push    ecx
.text:0000532C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005333                 mov     [ebp+var_4], ecx
.text:00005336                 mov     eax, [ebp+var_4]
.text:00005339                 mov     dword ptr [eax], 0
.text:0000533F                 mov     eax, [ebp+var_4]
.text:00005342                 mov     esp, ebp
.text:00005344                 pop     ebp
.text:00005345                 retn
.text:00005345 ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:00005345
.text:00005345 ; ---------------------------------------------------------------------------
.text:00005346                 align 4
.text:00005346 _text           ends
.text:00005346
.text:00005348 ; ===========================================================================
.text:00005348
.text:00005348 ; Segment type: Pure code
.text:00005348 ; Segment permissions: Read/Execute
.text:00005348 _text           segment para public 'CODE' use32
.text:00005348                 assume cs:_text
.text:00005348                 ;org 5348h
.text:00005348 ; COMDAT (pick any)
.text:00005348                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005348
.text:00005348 ; =============== S U B R O U T I N E =======================================
.text:00005348
.text:00005348 ; Attributes: bp-based frame
.text:00005348
.text:00005348 ; public: __thiscall CMyComPtr<struct ICompressCoder>::~CMyComPtr<struct ICompressCoder>(void)
.text:00005348                 public ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:00005348 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:00005348                                         ; CODE XREF: __unwindfunclet$??0CCreatedCoder@@QAE@XZ$0+3j
.text:00005348                                         ; CCreatedCoder::~CCreatedCoder(void)+49p ...
.text:00005348
.text:00005348 var_4           = dword ptr -4
.text:00005348
.text:00005348                 push    ebp
.text:00005349                 mov     ebp, esp
.text:0000534B                 push    ecx
.text:0000534C                 push    esi
.text:0000534D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005354                 mov     [ebp+var_4], ecx
.text:00005357                 mov     eax, [ebp+var_4]
.text:0000535A                 cmp     dword ptr [eax], 0
.text:0000535D                 jz      short loc_537A
.text:0000535F                 mov     ecx, [ebp+var_4]
.text:00005362                 mov     edx, [ecx]
.text:00005364                 mov     eax, [ebp+var_4]
.text:00005367                 mov     ecx, [eax]
.text:00005369                 mov     edx, [edx]
.text:0000536B                 mov     esi, esp
.text:0000536D                 push    ecx
.text:0000536E                 mov     eax, [edx+8]
.text:00005371                 call    eax
.text:00005373                 cmp     esi, esp
.text:00005375                 call    __RTC_CheckEsp
.text:0000537A
.text:0000537A loc_537A:                               ; CODE XREF: CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)+15j
.text:0000537A                 pop     esi
.text:0000537B                 add     esp, 4
.text:0000537E                 cmp     ebp, esp
.text:00005380                 call    __RTC_CheckEsp
.text:00005385                 mov     esp, ebp
.text:00005387                 pop     ebp
.text:00005388                 retn
.text:00005388 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:00005388
.text:00005388 ; ---------------------------------------------------------------------------
.text:00005389                 align 4
.text:00005389 _text           ends
.text:00005389
.text:0000538C ; ===========================================================================
.text:0000538C
.text:0000538C ; Segment type: Pure code
.text:0000538C ; Segment permissions: Read/Execute
.text:0000538C _text           segment para public 'CODE' use32
.text:0000538C                 assume cs:_text
.text:0000538C                 ;org 538Ch
.text:0000538C ; COMDAT (pick any)
.text:0000538C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000538C
.text:0000538C ; =============== S U B R O U T I N E =======================================
.text:0000538C
.text:0000538C ; Attributes: bp-based frame
.text:0000538C
.text:0000538C ; public: __thiscall CMyComPtr<struct ICompressCoder>::operator struct ICompressCoder *(void)const
.text:0000538C                 public ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
.text:0000538C ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ proc near
.text:0000538C                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+2D4p
.text:0000538C                                         ; NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+2E0p ...
.text:0000538C
.text:0000538C var_4           = dword ptr -4
.text:0000538C
.text:0000538C                 push    ebp
.text:0000538D                 mov     ebp, esp
.text:0000538F                 push    ecx
.text:00005390                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005397                 mov     [ebp+var_4], ecx
.text:0000539A                 mov     eax, [ebp+var_4]
.text:0000539D                 mov     eax, [eax]
.text:0000539F                 mov     esp, ebp
.text:000053A1                 pop     ebp
.text:000053A2                 retn
.text:000053A2 ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ endp
.text:000053A2
.text:000053A2 ; ---------------------------------------------------------------------------
.text:000053A3                 align 4
.text:000053A3 _text           ends
.text:000053A3
.text:000053A4 ; ===========================================================================
.text:000053A4
.text:000053A4 ; Segment type: Pure code
.text:000053A4 ; Segment permissions: Read/Execute
.text:000053A4 _text           segment para public 'CODE' use32
.text:000053A4                 assume cs:_text
.text:000053A4                 ;org 53A4h
.text:000053A4 ; COMDAT (pick any)
.text:000053A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000053A4
.text:000053A4 ; =============== S U B R O U T I N E =======================================
.text:000053A4
.text:000053A4 ; Attributes: bp-based frame
.text:000053A4
.text:000053A4 ; public: bool __thiscall CMyComPtr<struct ICompressCoder>::operator!(void)const
.text:000053A4                 public ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ
.text:000053A4 ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ proc near
.text:000053A4                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+292p
.text:000053A4
.text:000053A4 var_4           = dword ptr -4
.text:000053A4
.text:000053A4                 push    ebp
.text:000053A5                 mov     ebp, esp
.text:000053A7                 push    ecx
.text:000053A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000053AF                 mov     [ebp+var_4], ecx
.text:000053B2                 mov     eax, [ebp+var_4]
.text:000053B5                 xor     ecx, ecx
.text:000053B7                 cmp     dword ptr [eax], 0
.text:000053BA                 setz    cl
.text:000053BD                 mov     al, cl
.text:000053BF                 mov     esp, ebp
.text:000053C1                 pop     ebp
.text:000053C2                 retn
.text:000053C2 ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ endp
.text:000053C2
.text:000053C2 ; ---------------------------------------------------------------------------
.text:000053C3                 align 4
.text:000053C3 _text           ends
.text:000053C3
.text:000053C4 ; ===========================================================================
.text:000053C4
.text:000053C4 ; Segment type: Pure code
.text:000053C4 ; Segment permissions: Read/Execute
.text:000053C4 _text           segment para public 'CODE' use32
.text:000053C4                 assume cs:_text
.text:000053C4                 ;org 53C4h
.text:000053C4 ; COMDAT (pick any)
.text:000053C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000053C4
.text:000053C4 ; =============== S U B R O U T I N E =======================================
.text:000053C4
.text:000053C4 ; Attributes: bp-based frame
.text:000053C4
.text:000053C4 ; public: __thiscall CMyComPtr<struct ICompressCoder2>::CMyComPtr<struct ICompressCoder2>(void)
.text:000053C4                 public ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ
.text:000053C4 ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ proc near
.text:000053C4                                         ; CODE XREF: CCreatedCoder::CCreatedCoder(void)+42p
.text:000053C4
.text:000053C4 var_4           = dword ptr -4
.text:000053C4
.text:000053C4                 push    ebp
.text:000053C5                 mov     ebp, esp
.text:000053C7                 push    ecx
.text:000053C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000053CF                 mov     [ebp+var_4], ecx
.text:000053D2                 mov     eax, [ebp+var_4]
.text:000053D5                 mov     dword ptr [eax], 0
.text:000053DB                 mov     eax, [ebp+var_4]
.text:000053DE                 mov     esp, ebp
.text:000053E0                 pop     ebp
.text:000053E1                 retn
.text:000053E1 ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ endp
.text:000053E1
.text:000053E1 ; ---------------------------------------------------------------------------
.text:000053E2                 align 4
.text:000053E2 _text           ends
.text:000053E2
.text:000053E4 ; ===========================================================================
.text:000053E4
.text:000053E4 ; Segment type: Pure code
.text:000053E4 ; Segment permissions: Read/Execute
.text:000053E4 _text           segment para public 'CODE' use32
.text:000053E4                 assume cs:_text
.text:000053E4                 ;org 53E4h
.text:000053E4 ; COMDAT (pick any)
.text:000053E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000053E4
.text:000053E4 ; =============== S U B R O U T I N E =======================================
.text:000053E4
.text:000053E4 ; Attributes: bp-based frame
.text:000053E4
.text:000053E4 ; public: __thiscall CMyComPtr<struct ICompressCoder2>::~CMyComPtr<struct ICompressCoder2>(void)
.text:000053E4                 public ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ
.text:000053E4 ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ proc near
.text:000053E4                                         ; CODE XREF: CCreatedCoder::~CCreatedCoder(void)+3Ap
.text:000053E4                                         ; NCoderMixer2::CCoder::~CCoder(void)+58p ...
.text:000053E4
.text:000053E4 var_4           = dword ptr -4
.text:000053E4
.text:000053E4                 push    ebp
.text:000053E5                 mov     ebp, esp
.text:000053E7                 push    ecx
.text:000053E8                 push    esi
.text:000053E9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000053F0                 mov     [ebp+var_4], ecx
.text:000053F3                 mov     eax, [ebp+var_4]
.text:000053F6                 cmp     dword ptr [eax], 0
.text:000053F9                 jz      short loc_5416
.text:000053FB                 mov     ecx, [ebp+var_4]
.text:000053FE                 mov     edx, [ecx]
.text:00005400                 mov     eax, [ebp+var_4]
.text:00005403                 mov     ecx, [eax]
.text:00005405                 mov     edx, [edx]
.text:00005407                 mov     esi, esp
.text:00005409                 push    ecx
.text:0000540A                 mov     eax, [edx+8]
.text:0000540D                 call    eax
.text:0000540F                 cmp     esi, esp
.text:00005411                 call    __RTC_CheckEsp
.text:00005416
.text:00005416 loc_5416:                               ; CODE XREF: CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>(void)+15j
.text:00005416                 pop     esi
.text:00005417                 add     esp, 4
.text:0000541A                 cmp     ebp, esp
.text:0000541C                 call    __RTC_CheckEsp
.text:00005421                 mov     esp, ebp
.text:00005423                 pop     ebp
.text:00005424                 retn
.text:00005424 ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ endp
.text:00005424
.text:00005424 ; ---------------------------------------------------------------------------
.text:00005425                 align 4
.text:00005425 _text           ends
.text:00005425
.text:00005428 ; ===========================================================================
.text:00005428
.text:00005428 ; Segment type: Pure code
.text:00005428 ; Segment permissions: Read/Execute
.text:00005428 _text           segment para public 'CODE' use32
.text:00005428                 assume cs:_text
.text:00005428                 ;org 5428h
.text:00005428 ; COMDAT (pick any)
.text:00005428                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005428
.text:00005428 ; =============== S U B R O U T I N E =======================================
.text:00005428
.text:00005428 ; Attributes: bp-based frame
.text:00005428
.text:00005428 ; public: __thiscall CMyComPtr<struct ICompressCoder2>::operator struct ICompressCoder2 *(void)const
.text:00005428                 public ??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ
.text:00005428 ??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ proc near
.text:00005428                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+2F0p
.text:00005428                                         ; NCoderMixer2::CCoder::GetUnknown(void)+36p
.text:00005428
.text:00005428 var_4           = dword ptr -4
.text:00005428
.text:00005428                 push    ebp
.text:00005429                 mov     ebp, esp
.text:0000542B                 push    ecx
.text:0000542C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005433                 mov     [ebp+var_4], ecx
.text:00005436                 mov     eax, [ebp+var_4]
.text:00005439                 mov     eax, [eax]
.text:0000543B                 mov     esp, ebp
.text:0000543D                 pop     ebp
.text:0000543E                 retn
.text:0000543E ??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ endp
.text:0000543E
.text:0000543E ; ---------------------------------------------------------------------------
.text:0000543F                 align 10h
.text:0000543F _text           ends
.text:0000543F
.text:00005440 ; ===========================================================================
.text:00005440
.text:00005440 ; Segment type: Pure code
.text:00005440 ; Segment permissions: Read/Execute
.text:00005440 _text           segment para public 'CODE' use32
.text:00005440                 assume cs:_text
.text:00005440                 ;org 5440h
.text:00005440 ; COMDAT (pick any)
.text:00005440                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005440
.text:00005440 ; =============== S U B R O U T I N E =======================================
.text:00005440
.text:00005440 ; Attributes: bp-based frame
.text:00005440
.text:00005440 ; public: bool __thiscall CMyComPtr<struct ICompressCoder2>::operator!(void)const
.text:00005440                 public ??7?$CMyComPtr@UICompressCoder2@@@@QBE_NXZ
.text:00005440 ??7?$CMyComPtr@UICompressCoder2@@@@QBE_NXZ proc near
.text:00005440                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+2A1p
.text:00005440
.text:00005440 var_4           = dword ptr -4
.text:00005440
.text:00005440                 push    ebp
.text:00005441                 mov     ebp, esp
.text:00005443                 push    ecx
.text:00005444                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000544B                 mov     [ebp+var_4], ecx
.text:0000544E                 mov     eax, [ebp+var_4]
.text:00005451                 xor     ecx, ecx
.text:00005453                 cmp     dword ptr [eax], 0
.text:00005456                 setz    cl
.text:00005459                 mov     al, cl
.text:0000545B                 mov     esp, ebp
.text:0000545D                 pop     ebp
.text:0000545E                 retn
.text:0000545E ??7?$CMyComPtr@UICompressCoder2@@@@QBE_NXZ endp
.text:0000545E
.text:0000545E ; ---------------------------------------------------------------------------
.text:0000545F                 align 10h
.text:0000545F _text           ends
.text:0000545F
.text:00005460 ; ===========================================================================
.text:00005460
.text:00005460 ; Segment type: Pure code
.text:00005460 ; Segment permissions: Read/Execute
.text:00005460 _text           segment para public 'CODE' use32
.text:00005460                 assume cs:_text
.text:00005460                 ;org 5460h
.text:00005460 ; COMDAT (pick any)
.text:00005460                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005460
.text:00005460 ; =============== S U B R O U T I N E =======================================
.text:00005460
.text:00005460 ; Attributes: bp-based frame
.text:00005460
.text:00005460 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:00005460                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00005460 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00005460                                         ; CODE XREF: CSequentialInStreamSizeCount2::CSequentialInStreamSizeCount2(void)+64p
.text:00005460
.text:00005460 var_4           = dword ptr -4
.text:00005460
.text:00005460                 push    ebp
.text:00005461                 mov     ebp, esp
.text:00005463                 push    ecx
.text:00005464                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000546B                 mov     [ebp+var_4], ecx
.text:0000546E                 mov     eax, [ebp+var_4]
.text:00005471                 mov     dword ptr [eax], 0
.text:00005477                 mov     eax, [ebp+var_4]
.text:0000547A                 mov     esp, ebp
.text:0000547C                 pop     ebp
.text:0000547D                 retn
.text:0000547D ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:0000547D
.text:0000547D ; ---------------------------------------------------------------------------
.text:0000547E                 align 10h
.text:0000547E _text           ends
.text:0000547E
.text:00005480 ; ===========================================================================
.text:00005480
.text:00005480 ; Segment type: Pure code
.text:00005480 ; Segment permissions: Read/Execute
.text:00005480 _text           segment para public 'CODE' use32
.text:00005480                 assume cs:_text
.text:00005480                 ;org 5480h
.text:00005480 ; COMDAT (pick any)
.text:00005480                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005480
.text:00005480 ; =============== S U B R O U T I N E =======================================
.text:00005480
.text:00005480 ; Attributes: bp-based frame
.text:00005480
.text:00005480 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(struct ISequentialInStream *)
.text:00005480                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z
.text:00005480 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z proc near
.text:00005480                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+2C3p
.text:00005480
.text:00005480 var_4           = dword ptr -4
.text:00005480 arg_0           = dword ptr  8
.text:00005480
.text:00005480                 push    ebp
.text:00005481                 mov     ebp, esp
.text:00005483                 push    ecx
.text:00005484                 push    esi
.text:00005485                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000548C                 mov     [ebp+var_4], ecx
.text:0000548F                 mov     eax, [ebp+var_4]
.text:00005492                 mov     ecx, [ebp+arg_0]
.text:00005495                 mov     [eax], ecx
.text:00005497                 cmp     [ebp+arg_0], 0
.text:0000549B                 jz      short loc_54B4
.text:0000549D                 mov     edx, [ebp+arg_0]
.text:000054A0                 mov     eax, [edx]
.text:000054A2                 mov     esi, esp
.text:000054A4                 mov     ecx, [ebp+arg_0]
.text:000054A7                 push    ecx
.text:000054A8                 mov     edx, [eax+4]
.text:000054AB                 call    edx
.text:000054AD                 cmp     esi, esp
.text:000054AF                 call    __RTC_CheckEsp
.text:000054B4
.text:000054B4 loc_54B4:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)+1Bj
.text:000054B4                 mov     eax, [ebp+var_4]
.text:000054B7                 pop     esi
.text:000054B8                 add     esp, 4
.text:000054BB                 cmp     ebp, esp
.text:000054BD                 call    __RTC_CheckEsp
.text:000054C2                 mov     esp, ebp
.text:000054C4                 pop     ebp
.text:000054C5                 retn    4
.text:000054C5 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z endp
.text:000054C5
.text:000054C5 _text           ends
.text:000054C5
.text:000054C8 ; ===========================================================================
.text:000054C8
.text:000054C8 ; Segment type: Pure code
.text:000054C8 ; Segment permissions: Read/Execute
.text:000054C8 _text           segment para public 'CODE' use32
.text:000054C8                 assume cs:_text
.text:000054C8                 ;org 54C8h
.text:000054C8 ; COMDAT (pick any)
.text:000054C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000054C8
.text:000054C8 ; =============== S U B R O U T I N E =======================================
.text:000054C8
.text:000054C8 ; Attributes: bp-based frame
.text:000054C8
.text:000054C8 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:000054C8                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:000054C8 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:000054C8                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+89Ap
.text:000054C8                                         ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+99Ep ...
.text:000054C8
.text:000054C8 var_4           = dword ptr -4
.text:000054C8
.text:000054C8                 push    ebp
.text:000054C9                 mov     ebp, esp
.text:000054CB                 push    ecx
.text:000054CC                 push    esi
.text:000054CD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000054D4                 mov     [ebp+var_4], ecx
.text:000054D7                 mov     eax, [ebp+var_4]
.text:000054DA                 cmp     dword ptr [eax], 0
.text:000054DD                 jz      short loc_54FA
.text:000054DF                 mov     ecx, [ebp+var_4]
.text:000054E2                 mov     edx, [ecx]
.text:000054E4                 mov     eax, [ebp+var_4]
.text:000054E7                 mov     ecx, [eax]
.text:000054E9                 mov     edx, [edx]
.text:000054EB                 mov     esi, esp
.text:000054ED                 push    ecx
.text:000054EE                 mov     eax, [edx+8]
.text:000054F1                 call    eax
.text:000054F3                 cmp     esi, esp
.text:000054F5                 call    __RTC_CheckEsp
.text:000054FA
.text:000054FA loc_54FA:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:000054FA                 pop     esi
.text:000054FB                 add     esp, 4
.text:000054FE                 cmp     ebp, esp
.text:00005500                 call    __RTC_CheckEsp
.text:00005505                 mov     esp, ebp
.text:00005507                 pop     ebp
.text:00005508                 retn
.text:00005508 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00005508
.text:00005508 ; ---------------------------------------------------------------------------
.text:00005509                 align 4
.text:00005509 _text           ends
.text:00005509
.text:0000550C ; ===========================================================================
.text:0000550C
.text:0000550C ; Segment type: Pure code
.text:0000550C ; Segment permissions: Read/Execute
.text:0000550C _text           segment para public 'CODE' use32
.text:0000550C                 assume cs:_text
.text:0000550C                 ;org 550Ch
.text:0000550C ; COMDAT (pick any)
.text:0000550C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000550C
.text:0000550C ; =============== S U B R O U T I N E =======================================
.text:0000550C
.text:0000550C ; Attributes: bp-based frame
.text:0000550C
.text:0000550C ; public: __thiscall CMyComPtr<struct ISequentialInStream>::operator struct ISequentialInStream *(void)const
.text:0000550C                 public ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:0000550C ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:0000550C                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+2FAp
.text:0000550C
.text:0000550C var_4           = dword ptr -4
.text:0000550C
.text:0000550C                 push    ebp
.text:0000550D                 mov     ebp, esp
.text:0000550F                 push    ecx
.text:00005510                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005517                 mov     [ebp+var_4], ecx
.text:0000551A                 mov     eax, [ebp+var_4]
.text:0000551D                 mov     eax, [eax]
.text:0000551F                 mov     esp, ebp
.text:00005521                 pop     ebp
.text:00005522                 retn
.text:00005522 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:00005522
.text:00005522 ; ---------------------------------------------------------------------------
.text:00005523                 align 4
.text:00005523 _text           ends
.text:00005523
.text:00005524 ; ===========================================================================
.text:00005524
.text:00005524 ; Segment type: Pure code
.text:00005524 ; Segment permissions: Read/Execute
.text:00005524 _text           segment para public 'CODE' use32
.text:00005524                 assume cs:_text
.text:00005524                 ;org 5524h
.text:00005524 ; COMDAT (pick any)
.text:00005524                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005524
.text:00005524 ; =============== S U B R O U T I N E =======================================
.text:00005524
.text:00005524 ; Attributes: bp-based frame
.text:00005524
.text:00005524 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:00005524                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:00005524 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:00005524                                         ; CODE XREF: CSequentialInStreamSizeCount2::Init(ISequentialInStream *)+34p
.text:00005524
.text:00005524 var_4           = dword ptr -4
.text:00005524 arg_0           = dword ptr  8
.text:00005524
.text:00005524                 push    ebp
.text:00005525                 mov     ebp, esp
.text:00005527                 push    ecx
.text:00005528                 push    esi
.text:00005529                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005530                 mov     [ebp+var_4], ecx
.text:00005533                 cmp     [ebp+arg_0], 0
.text:00005537                 jz      short loc_5550
.text:00005539                 mov     eax, [ebp+arg_0]
.text:0000553C                 mov     ecx, [eax]
.text:0000553E                 mov     esi, esp
.text:00005540                 mov     edx, [ebp+arg_0]
.text:00005543                 push    edx
.text:00005544                 mov     eax, [ecx+4]
.text:00005547                 call    eax
.text:00005549                 cmp     esi, esp
.text:0000554B                 call    __RTC_CheckEsp
.text:00005550
.text:00005550 loc_5550:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:00005550                 mov     ecx, [ebp+var_4]
.text:00005553                 cmp     dword ptr [ecx], 0
.text:00005556                 jz      short loc_5573
.text:00005558                 mov     edx, [ebp+var_4]
.text:0000555B                 mov     eax, [edx]
.text:0000555D                 mov     ecx, [ebp+var_4]
.text:00005560                 mov     edx, [ecx]
.text:00005562                 mov     eax, [eax]
.text:00005564                 mov     esi, esp
.text:00005566                 push    edx
.text:00005567                 mov     ecx, [eax+8]
.text:0000556A                 call    ecx
.text:0000556C                 cmp     esi, esp
.text:0000556E                 call    __RTC_CheckEsp
.text:00005573
.text:00005573 loc_5573:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:00005573                 mov     edx, [ebp+var_4]
.text:00005576                 mov     eax, [ebp+arg_0]
.text:00005579                 mov     [edx], eax
.text:0000557B                 mov     eax, [ebp+arg_0]
.text:0000557E                 pop     esi
.text:0000557F                 add     esp, 4
.text:00005582                 cmp     ebp, esp
.text:00005584                 call    __RTC_CheckEsp
.text:00005589                 mov     esp, ebp
.text:0000558B                 pop     ebp
.text:0000558C                 retn    4
.text:0000558C ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:0000558C
.text:0000558C ; ---------------------------------------------------------------------------
.text:0000558F                 align 10h
.text:0000558F _text           ends
.text:0000558F
.text:00005590 ; ===========================================================================
.text:00005590
.text:00005590 ; Segment type: Pure code
.text:00005590 ; Segment permissions: Read/Execute
.text:00005590 _text           segment para public 'CODE' use32
.text:00005590                 assume cs:_text
.text:00005590                 ;org 5590h
.text:00005590 ; COMDAT (pick any)
.text:00005590                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005590
.text:00005590 ; =============== S U B R O U T I N E =======================================
.text:00005590
.text:00005590 ; Attributes: bp-based frame
.text:00005590
.text:00005590 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(void)
.text:00005590                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:00005590 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:00005590                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+C5p
.text:00005590                                         ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+2DCp ...
.text:00005590
.text:00005590 var_4           = dword ptr -4
.text:00005590
.text:00005590                 push    ebp
.text:00005591                 mov     ebp, esp
.text:00005593                 push    ecx
.text:00005594                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000559B                 mov     [ebp+var_4], ecx
.text:0000559E                 mov     eax, [ebp+var_4]
.text:000055A1                 mov     dword ptr [eax], 0
.text:000055A7                 mov     eax, [ebp+var_4]
.text:000055AA                 mov     esp, ebp
.text:000055AC                 pop     ebp
.text:000055AD                 retn
.text:000055AD ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:000055AD
.text:000055AD ; ---------------------------------------------------------------------------
.text:000055AE                 align 10h
.text:000055AE _text           ends
.text:000055AE
.text:000055B0 ; ===========================================================================
.text:000055B0
.text:000055B0 ; Segment type: Pure code
.text:000055B0 ; Segment permissions: Read/Execute
.text:000055B0 _text           segment para public 'CODE' use32
.text:000055B0                 assume cs:_text
.text:000055B0                 ;org 55B0h
.text:000055B0 ; COMDAT (pick any)
.text:000055B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000055B0
.text:000055B0 ; =============== S U B R O U T I N E =======================================
.text:000055B0
.text:000055B0 ; Attributes: bp-based frame
.text:000055B0
.text:000055B0 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(struct ISequentialOutStream *)
.text:000055B0                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
.text:000055B0 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z proc near
.text:000055B0                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+1C8p
.text:000055B0                                         ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+4B6p
.text:000055B0
.text:000055B0 var_4           = dword ptr -4
.text:000055B0 arg_0           = dword ptr  8
.text:000055B0
.text:000055B0                 push    ebp
.text:000055B1                 mov     ebp, esp
.text:000055B3                 push    ecx
.text:000055B4                 push    esi
.text:000055B5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000055BC                 mov     [ebp+var_4], ecx
.text:000055BF                 mov     eax, [ebp+var_4]
.text:000055C2                 mov     ecx, [ebp+arg_0]
.text:000055C5                 mov     [eax], ecx
.text:000055C7                 cmp     [ebp+arg_0], 0
.text:000055CB                 jz      short loc_55E4
.text:000055CD                 mov     edx, [ebp+arg_0]
.text:000055D0                 mov     eax, [edx]
.text:000055D2                 mov     esi, esp
.text:000055D4                 mov     ecx, [ebp+arg_0]
.text:000055D7                 push    ecx
.text:000055D8                 mov     edx, [eax+4]
.text:000055DB                 call    edx
.text:000055DD                 cmp     esi, esp
.text:000055DF                 call    __RTC_CheckEsp
.text:000055E4
.text:000055E4 loc_55E4:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)+1Bj
.text:000055E4                 mov     eax, [ebp+var_4]
.text:000055E7                 pop     esi
.text:000055E8                 add     esp, 4
.text:000055EB                 cmp     ebp, esp
.text:000055ED                 call    __RTC_CheckEsp
.text:000055F2                 mov     esp, ebp
.text:000055F4                 pop     ebp
.text:000055F5                 retn    4
.text:000055F5 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z endp
.text:000055F5
.text:000055F5 _text           ends
.text:000055F5
.text:000055F8 ; ===========================================================================
.text:000055F8
.text:000055F8 ; Segment type: Pure code
.text:000055F8 ; Segment permissions: Read/Execute
.text:000055F8 _text           segment para public 'CODE' use32
.text:000055F8                 assume cs:_text
.text:000055F8                 ;org 55F8h
.text:000055F8 ; COMDAT (pick any)
.text:000055F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000055F8
.text:000055F8 ; =============== S U B R O U T I N E =======================================
.text:000055F8
.text:000055F8 ; Attributes: bp-based frame
.text:000055F8
.text:000055F8 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:000055F8                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:000055F8 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:000055F8                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+214p
.text:000055F8                                         ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+520p ...
.text:000055F8
.text:000055F8 var_4           = dword ptr -4
.text:000055F8
.text:000055F8                 push    ebp
.text:000055F9                 mov     ebp, esp
.text:000055FB                 push    ecx
.text:000055FC                 push    esi
.text:000055FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005604                 mov     [ebp+var_4], ecx
.text:00005607                 mov     eax, [ebp+var_4]
.text:0000560A                 cmp     dword ptr [eax], 0
.text:0000560D                 jz      short loc_562A
.text:0000560F                 mov     ecx, [ebp+var_4]
.text:00005612                 mov     edx, [ecx]
.text:00005614                 mov     eax, [ebp+var_4]
.text:00005617                 mov     ecx, [eax]
.text:00005619                 mov     edx, [edx]
.text:0000561B                 mov     esi, esp
.text:0000561D                 push    ecx
.text:0000561E                 mov     eax, [edx+8]
.text:00005621                 call    eax
.text:00005623                 cmp     esi, esp
.text:00005625                 call    __RTC_CheckEsp
.text:0000562A
.text:0000562A loc_562A:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:0000562A                 pop     esi
.text:0000562B                 add     esp, 4
.text:0000562E                 cmp     ebp, esp
.text:00005630                 call    __RTC_CheckEsp
.text:00005635                 mov     esp, ebp
.text:00005637                 pop     ebp
.text:00005638                 retn
.text:00005638 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00005638
.text:00005638 ; ---------------------------------------------------------------------------
.text:00005639                 align 4
.text:00005639 _text           ends
.text:00005639
.text:0000563C ; ===========================================================================
.text:0000563C
.text:0000563C ; Segment type: Pure code
.text:0000563C ; Segment permissions: Read/Execute
.text:0000563C _text           segment para public 'CODE' use32
.text:0000563C                 assume cs:_text
.text:0000563C                 ;org 563Ch
.text:0000563C ; COMDAT (pick any)
.text:0000563C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000563C
.text:0000563C ; =============== S U B R O U T I N E =======================================
.text:0000563C
.text:0000563C ; Attributes: bp-based frame
.text:0000563C
.text:0000563C ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:0000563C                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:0000563C ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:0000563C                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+4E1p
.text:0000563C                                         ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+75Cp ...
.text:0000563C
.text:0000563C var_4           = dword ptr -4
.text:0000563C
.text:0000563C                 push    ebp
.text:0000563D                 mov     ebp, esp
.text:0000563F                 push    ecx
.text:00005640                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005647                 mov     [ebp+var_4], ecx
.text:0000564A                 mov     eax, [ebp+var_4]
.text:0000564D                 mov     eax, [eax]
.text:0000564F                 mov     esp, ebp
.text:00005651                 pop     ebp
.text:00005652                 retn
.text:00005652 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:00005652
.text:00005652 ; ---------------------------------------------------------------------------
.text:00005653                 align 4
.text:00005653 _text           ends
.text:00005653
.text:00005654 ; ===========================================================================
.text:00005654
.text:00005654 ; Segment type: Pure code
.text:00005654 ; Segment permissions: Read/Execute
.text:00005654 _text           segment para public 'CODE' use32
.text:00005654                 assume cs:_text
.text:00005654                 ;org 5654h
.text:00005654 ; COMDAT (pick any)
.text:00005654                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005654
.text:00005654 ; =============== S U B R O U T I N E =======================================
.text:00005654
.text:00005654 ; Attributes: bp-based frame
.text:00005654
.text:00005654 ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator->(void)const
.text:00005654                 public ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:00005654 ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:00005654                                         ; CODE XREF: NArchive::N7z::CSequentialOutMtNotify::Write(void const *,uint,uint *)+28p
.text:00005654
.text:00005654 var_4           = dword ptr -4
.text:00005654
.text:00005654                 push    ebp
.text:00005655                 mov     ebp, esp
.text:00005657                 push    ecx
.text:00005658                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000565F                 mov     [ebp+var_4], ecx
.text:00005662                 mov     eax, [ebp+var_4]
.text:00005665                 mov     eax, [eax]
.text:00005667                 mov     esp, ebp
.text:00005669                 pop     ebp
.text:0000566A                 retn
.text:0000566A ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:0000566A
.text:0000566A ; ---------------------------------------------------------------------------
.text:0000566B                 align 4
.text:0000566B _text           ends
.text:0000566B
.text:0000566C ; ===========================================================================
.text:0000566C
.text:0000566C ; Segment type: Pure code
.text:0000566C ; Segment permissions: Read/Execute
.text:0000566C _text           segment para public 'CODE' use32
.text:0000566C                 assume cs:_text
.text:0000566C                 ;org 566Ch
.text:0000566C ; COMDAT (pick any)
.text:0000566C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000566C
.text:0000566C ; =============== S U B R O U T I N E =======================================
.text:0000566C
.text:0000566C ; Attributes: bp-based frame
.text:0000566C
.text:0000566C ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator=(struct ISequentialOutStream *)
.text:0000566C                 public ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
.text:0000566C ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z proc near
.text:0000566C                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+67Dp
.text:0000566C                                         ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+68Cp ...
.text:0000566C
.text:0000566C var_4           = dword ptr -4
.text:0000566C arg_0           = dword ptr  8
.text:0000566C
.text:0000566C                 push    ebp
.text:0000566D                 mov     ebp, esp
.text:0000566F                 push    ecx
.text:00005670                 push    esi
.text:00005671                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005678                 mov     [ebp+var_4], ecx
.text:0000567B                 cmp     [ebp+arg_0], 0
.text:0000567F                 jz      short loc_5698
.text:00005681                 mov     eax, [ebp+arg_0]
.text:00005684                 mov     ecx, [eax]
.text:00005686                 mov     esi, esp
.text:00005688                 mov     edx, [ebp+arg_0]
.text:0000568B                 push    edx
.text:0000568C                 mov     eax, [ecx+4]
.text:0000568F                 call    eax
.text:00005691                 cmp     esi, esp
.text:00005693                 call    __RTC_CheckEsp
.text:00005698
.text:00005698 loc_5698:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+13j
.text:00005698                 mov     ecx, [ebp+var_4]
.text:0000569B                 cmp     dword ptr [ecx], 0
.text:0000569E                 jz      short loc_56BB
.text:000056A0                 mov     edx, [ebp+var_4]
.text:000056A3                 mov     eax, [edx]
.text:000056A5                 mov     ecx, [ebp+var_4]
.text:000056A8                 mov     edx, [ecx]
.text:000056AA                 mov     eax, [eax]
.text:000056AC                 mov     esi, esp
.text:000056AE                 push    edx
.text:000056AF                 mov     ecx, [eax+8]
.text:000056B2                 call    ecx
.text:000056B4                 cmp     esi, esp
.text:000056B6                 call    __RTC_CheckEsp
.text:000056BB
.text:000056BB loc_56BB:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+32j
.text:000056BB                 mov     edx, [ebp+var_4]
.text:000056BE                 mov     eax, [ebp+arg_0]
.text:000056C1                 mov     [edx], eax
.text:000056C3                 mov     eax, [ebp+arg_0]
.text:000056C6                 pop     esi
.text:000056C7                 add     esp, 4
.text:000056CA                 cmp     ebp, esp
.text:000056CC                 call    __RTC_CheckEsp
.text:000056D1                 mov     esp, ebp
.text:000056D3                 pop     ebp
.text:000056D4                 retn    4
.text:000056D4 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z endp
.text:000056D4
.text:000056D4 ; ---------------------------------------------------------------------------
.text:000056D7                 align 4
.text:000056D7 _text           ends
.text:000056D7
.text:000056D8 ; ===========================================================================
.text:000056D8
.text:000056D8 ; Segment type: Pure code
.text:000056D8 ; Segment permissions: Read/Execute
.text:000056D8 _text           segment para public 'CODE' use32
.text:000056D8                 assume cs:_text
.text:000056D8                 ;org 56D8h
.text:000056D8 ; COMDAT (pick any)
.text:000056D8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000056D8
.text:000056D8 ; =============== S U B R O U T I N E =======================================
.text:000056D8
.text:000056D8 ; Attributes: bp-based frame
.text:000056D8
.text:000056D8 ; public: __thiscall CMyComPtr<struct ICryptoSetPassword>::CMyComPtr<struct ICryptoSetPassword>(void)
.text:000056D8                 public ??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ
.text:000056D8 ??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ proc near
.text:000056D8                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+40Fp
.text:000056D8
.text:000056D8 var_4           = dword ptr -4
.text:000056D8
.text:000056D8                 push    ebp
.text:000056D9                 mov     ebp, esp
.text:000056DB                 push    ecx
.text:000056DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000056E3                 mov     [ebp+var_4], ecx
.text:000056E6                 mov     eax, [ebp+var_4]
.text:000056E9                 mov     dword ptr [eax], 0
.text:000056EF                 mov     eax, [ebp+var_4]
.text:000056F2                 mov     esp, ebp
.text:000056F4                 pop     ebp
.text:000056F5                 retn
.text:000056F5 ??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ endp
.text:000056F5
.text:000056F5 ; ---------------------------------------------------------------------------
.text:000056F6                 align 4
.text:000056F6 _text           ends
.text:000056F6
.text:000056F8 ; ===========================================================================
.text:000056F8
.text:000056F8 ; Segment type: Pure code
.text:000056F8 ; Segment permissions: Read/Execute
.text:000056F8 _text           segment para public 'CODE' use32
.text:000056F8                 assume cs:_text
.text:000056F8                 ;org 56F8h
.text:000056F8 ; COMDAT (pick any)
.text:000056F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000056F8
.text:000056F8 ; =============== S U B R O U T I N E =======================================
.text:000056F8
.text:000056F8 ; Attributes: bp-based frame
.text:000056F8
.text:000056F8 ; public: __thiscall CMyComPtr<struct ICryptoSetPassword>::~CMyComPtr<struct ICryptoSetPassword>(void)
.text:000056F8                 public ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ
.text:000056F8 ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ proc near
.text:000056F8                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+525p
.text:000056F8                                         ; NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+582p ...
.text:000056F8
.text:000056F8 var_4           = dword ptr -4
.text:000056F8
.text:000056F8                 push    ebp
.text:000056F9                 mov     ebp, esp
.text:000056FB                 push    ecx
.text:000056FC                 push    esi
.text:000056FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005704                 mov     [ebp+var_4], ecx
.text:00005707                 mov     eax, [ebp+var_4]
.text:0000570A                 cmp     dword ptr [eax], 0
.text:0000570D                 jz      short loc_572A
.text:0000570F                 mov     ecx, [ebp+var_4]
.text:00005712                 mov     edx, [ecx]
.text:00005714                 mov     eax, [ebp+var_4]
.text:00005717                 mov     ecx, [eax]
.text:00005719                 mov     edx, [edx]
.text:0000571B                 mov     esi, esp
.text:0000571D                 push    ecx
.text:0000571E                 mov     eax, [edx+8]
.text:00005721                 call    eax
.text:00005723                 cmp     esi, esp
.text:00005725                 call    __RTC_CheckEsp
.text:0000572A
.text:0000572A loc_572A:                               ; CODE XREF: CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)+15j
.text:0000572A                 pop     esi
.text:0000572B                 add     esp, 4
.text:0000572E                 cmp     ebp, esp
.text:00005730                 call    __RTC_CheckEsp
.text:00005735                 mov     esp, ebp
.text:00005737                 pop     ebp
.text:00005738                 retn
.text:00005738 ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ endp
.text:00005738
.text:00005738 ; ---------------------------------------------------------------------------
.text:00005739                 align 4
.text:00005739 _text           ends
.text:00005739
.text:0000573C ; ===========================================================================
.text:0000573C
.text:0000573C ; Segment type: Pure code
.text:0000573C ; Segment permissions: Read/Execute
.text:0000573C _text           segment para public 'CODE' use32
.text:0000573C                 assume cs:_text
.text:0000573C                 ;org 573Ch
.text:0000573C ; COMDAT (pick any)
.text:0000573C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000573C
.text:0000573C ; =============== S U B R O U T I N E =======================================
.text:0000573C
.text:0000573C ; Attributes: bp-based frame
.text:0000573C
.text:0000573C ; public: __thiscall CMyComPtr<struct ICryptoSetPassword>::operator struct ICryptoSetPassword *(void)const
.text:0000573C                 public ??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ
.text:0000573C ??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ proc near
.text:0000573C                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+431p
.text:0000573C
.text:0000573C var_4           = dword ptr -4
.text:0000573C
.text:0000573C                 push    ebp
.text:0000573D                 mov     ebp, esp
.text:0000573F                 push    ecx
.text:00005740                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005747                 mov     [ebp+var_4], ecx
.text:0000574A                 mov     eax, [ebp+var_4]
.text:0000574D                 mov     eax, [eax]
.text:0000574F                 mov     esp, ebp
.text:00005751                 pop     ebp
.text:00005752                 retn
.text:00005752 ??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ endp
.text:00005752
.text:00005752 ; ---------------------------------------------------------------------------
.text:00005753                 align 4
.text:00005753 _text           ends
.text:00005753
.text:00005754 ; ===========================================================================
.text:00005754
.text:00005754 ; Segment type: Pure code
.text:00005754 ; Segment permissions: Read/Execute
.text:00005754 _text           segment para public 'CODE' use32
.text:00005754                 assume cs:_text
.text:00005754                 ;org 5754h
.text:00005754 ; COMDAT (pick any)
.text:00005754                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005754
.text:00005754 ; =============== S U B R O U T I N E =======================================
.text:00005754
.text:00005754 ; Attributes: bp-based frame
.text:00005754
.text:00005754 ; public: struct ICryptoSetPassword * * __thiscall CMyComPtr<struct ICryptoSetPassword>::operator&(void)
.text:00005754                 public ??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ
.text:00005754 ??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ proc near
.text:00005754                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+41Bp
.text:00005754
.text:00005754 var_4           = dword ptr -4
.text:00005754
.text:00005754                 push    ebp
.text:00005755                 mov     ebp, esp
.text:00005757                 push    ecx
.text:00005758                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000575F                 mov     [ebp+var_4], ecx
.text:00005762                 mov     eax, [ebp+var_4]
.text:00005765                 mov     esp, ebp
.text:00005767                 pop     ebp
.text:00005768                 retn
.text:00005768 ??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ endp
.text:00005768
.text:00005768 ; ---------------------------------------------------------------------------
.text:00005769                 align 4
.text:00005769 _text           ends
.text:00005769
.text:0000576C ; ===========================================================================
.text:0000576C
.text:0000576C ; Segment type: Pure code
.text:0000576C ; Segment permissions: Read/Execute
.text:0000576C _text           segment para public 'CODE' use32
.text:0000576C                 assume cs:_text
.text:0000576C                 ;org 576Ch
.text:0000576C ; COMDAT (pick any)
.text:0000576C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000576C
.text:0000576C ; =============== S U B R O U T I N E =======================================
.text:0000576C
.text:0000576C ; Attributes: bp-based frame
.text:0000576C
.text:0000576C ; public: struct ICryptoSetPassword * __thiscall CMyComPtr<struct ICryptoSetPassword>::operator->(void)const
.text:0000576C                 public ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ
.text:0000576C ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ proc near
.text:0000576C                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+4C2p
.text:0000576C
.text:0000576C var_4           = dword ptr -4
.text:0000576C
.text:0000576C                 push    ebp
.text:0000576D                 mov     ebp, esp
.text:0000576F                 push    ecx
.text:00005770                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005777                 mov     [ebp+var_4], ecx
.text:0000577A                 mov     eax, [ebp+var_4]
.text:0000577D                 mov     eax, [eax]
.text:0000577F                 mov     esp, ebp
.text:00005781                 pop     ebp
.text:00005782                 retn
.text:00005782 ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ endp
.text:00005782
.text:00005782 ; ---------------------------------------------------------------------------
.text:00005783                 align 4
.text:00005783 _text           ends
.text:00005783
.text:00005784 ; ===========================================================================
.text:00005784
.text:00005784 ; Segment type: Pure code
.text:00005784 ; Segment permissions: Read/Execute
.text:00005784 _text           segment para public 'CODE' use32
.text:00005784                 assume cs:_text
.text:00005784                 ;org 5784h
.text:00005784 ; COMDAT (pick any)
.text:00005784                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005784
.text:00005784 ; =============== S U B R O U T I N E =======================================
.text:00005784
.text:00005784 ; Attributes: bp-based frame
.text:00005784
.text:00005784 ; public: __thiscall CMyComPtr<struct ICompressSetCoderProperties>::CMyComPtr<struct ICompressSetCoderProperties>(void)
.text:00005784                 public ??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ
.text:00005784 ??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ proc near
.text:00005784                                         ; CODE XREF: NArchive::N7z::SetCoderProps2(CProps const &,unsigned __int64 const *,IUnknown *)+3Dp
.text:00005784
.text:00005784 var_4           = dword ptr -4
.text:00005784
.text:00005784                 push    ebp
.text:00005785                 mov     ebp, esp
.text:00005787                 push    ecx
.text:00005788                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000578F                 mov     [ebp+var_4], ecx
.text:00005792                 mov     eax, [ebp+var_4]
.text:00005795                 mov     dword ptr [eax], 0
.text:0000579B                 mov     eax, [ebp+var_4]
.text:0000579E                 mov     esp, ebp
.text:000057A0                 pop     ebp
.text:000057A1                 retn
.text:000057A1 ??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ endp
.text:000057A1
.text:000057A1 ; ---------------------------------------------------------------------------
.text:000057A2                 align 4
.text:000057A2 _text           ends
.text:000057A2
.text:000057A4 ; ===========================================================================
.text:000057A4
.text:000057A4 ; Segment type: Pure code
.text:000057A4 ; Segment permissions: Read/Execute
.text:000057A4 _text           segment para public 'CODE' use32
.text:000057A4                 assume cs:_text
.text:000057A4                 ;org 57A4h
.text:000057A4 ; COMDAT (pick any)
.text:000057A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000057A4
.text:000057A4 ; =============== S U B R O U T I N E =======================================
.text:000057A4
.text:000057A4 ; Attributes: bp-based frame
.text:000057A4
.text:000057A4 ; public: __thiscall CMyComPtr<struct ICompressSetCoderProperties>::~CMyComPtr<struct ICompressSetCoderProperties>(void)
.text:000057A4                 public ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ
.text:000057A4 ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ proc near
.text:000057A4                                         ; CODE XREF: NArchive::N7z::SetCoderProps2(CProps const &,unsigned __int64 const *,IUnknown *)+9Bp
.text:000057A4                                         ; NArchive::N7z::SetCoderProps2(CProps const &,unsigned __int64 const *,IUnknown *)+C7p ...
.text:000057A4
.text:000057A4 var_4           = dword ptr -4
.text:000057A4
.text:000057A4                 push    ebp
.text:000057A5                 mov     ebp, esp
.text:000057A7                 push    ecx
.text:000057A8                 push    esi
.text:000057A9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000057B0                 mov     [ebp+var_4], ecx
.text:000057B3                 mov     eax, [ebp+var_4]
.text:000057B6                 cmp     dword ptr [eax], 0
.text:000057B9                 jz      short loc_57D6
.text:000057BB                 mov     ecx, [ebp+var_4]
.text:000057BE                 mov     edx, [ecx]
.text:000057C0                 mov     eax, [ebp+var_4]
.text:000057C3                 mov     ecx, [eax]
.text:000057C5                 mov     edx, [edx]
.text:000057C7                 mov     esi, esp
.text:000057C9                 push    ecx
.text:000057CA                 mov     eax, [edx+8]
.text:000057CD                 call    eax
.text:000057CF                 cmp     esi, esp
.text:000057D1                 call    __RTC_CheckEsp
.text:000057D6
.text:000057D6 loc_57D6:                               ; CODE XREF: CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>(void)+15j
.text:000057D6                 pop     esi
.text:000057D7                 add     esp, 4
.text:000057DA                 cmp     ebp, esp
.text:000057DC                 call    __RTC_CheckEsp
.text:000057E1                 mov     esp, ebp
.text:000057E3                 pop     ebp
.text:000057E4                 retn
.text:000057E4 ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ endp
.text:000057E4
.text:000057E4 ; ---------------------------------------------------------------------------
.text:000057E5                 align 4
.text:000057E5 _text           ends
.text:000057E5
.text:000057E8 ; ===========================================================================
.text:000057E8
.text:000057E8 ; Segment type: Pure code
.text:000057E8 ; Segment permissions: Read/Execute
.text:000057E8 _text           segment para public 'CODE' use32
.text:000057E8                 assume cs:_text
.text:000057E8                 ;org 57E8h
.text:000057E8 ; COMDAT (pick any)
.text:000057E8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000057E8
.text:000057E8 ; =============== S U B R O U T I N E =======================================
.text:000057E8
.text:000057E8 ; Attributes: bp-based frame
.text:000057E8
.text:000057E8 ; public: __thiscall CMyComPtr<struct ICompressSetCoderProperties>::operator struct ICompressSetCoderProperties *(void)const
.text:000057E8                 public ??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ
.text:000057E8 ??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ proc near
.text:000057E8                                         ; CODE XREF: NArchive::N7z::SetCoderProps2(CProps const &,unsigned __int64 const *,IUnknown *)+70p
.text:000057E8                                         ; NArchive::N7z::SetCoderProps2(CProps const &,unsigned __int64 const *,IUnknown *)+80p
.text:000057E8
.text:000057E8 var_4           = dword ptr -4
.text:000057E8
.text:000057E8                 push    ebp
.text:000057E9                 mov     ebp, esp
.text:000057EB                 push    ecx
.text:000057EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000057F3                 mov     [ebp+var_4], ecx
.text:000057F6                 mov     eax, [ebp+var_4]
.text:000057F9                 mov     eax, [eax]
.text:000057FB                 mov     esp, ebp
.text:000057FD                 pop     ebp
.text:000057FE                 retn
.text:000057FE ??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ endp
.text:000057FE
.text:000057FE ; ---------------------------------------------------------------------------
.text:000057FF                 align 10h
.text:000057FF _text           ends
.text:000057FF
.text:00005800 ; ===========================================================================
.text:00005800
.text:00005800 ; Segment type: Pure code
.text:00005800 ; Segment permissions: Read/Execute
.text:00005800 _text           segment para public 'CODE' use32
.text:00005800                 assume cs:_text
.text:00005800                 ;org 5800h
.text:00005800 ; COMDAT (pick any)
.text:00005800                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005800
.text:00005800 ; =============== S U B R O U T I N E =======================================
.text:00005800
.text:00005800 ; Attributes: bp-based frame
.text:00005800
.text:00005800 ; public: struct ICompressSetCoderProperties * * __thiscall CMyComPtr<struct ICompressSetCoderProperties>::operator&(void)
.text:00005800                 public ??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ
.text:00005800 ??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ proc near
.text:00005800                                         ; CODE XREF: NArchive::N7z::SetCoderProps2(CProps const &,unsigned __int64 const *,IUnknown *)+4Cp
.text:00005800
.text:00005800 var_4           = dword ptr -4
.text:00005800
.text:00005800                 push    ebp
.text:00005801                 mov     ebp, esp
.text:00005803                 push    ecx
.text:00005804                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000580B                 mov     [ebp+var_4], ecx
.text:0000580E                 mov     eax, [ebp+var_4]
.text:00005811                 mov     esp, ebp
.text:00005813                 pop     ebp
.text:00005814                 retn
.text:00005814 ??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ endp
.text:00005814
.text:00005814 ; ---------------------------------------------------------------------------
.text:00005815                 align 4
.text:00005815 _text           ends
.text:00005815
.text:00005818 ; ===========================================================================
.text:00005818
.text:00005818 ; Segment type: Pure code
.text:00005818 ; Segment permissions: Read/Execute
.text:00005818 _text           segment para public 'CODE' use32
.text:00005818                 assume cs:_text
.text:00005818                 ;org 5818h
.text:00005818 ; COMDAT (pick any)
.text:00005818                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005818
.text:00005818 ; =============== S U B R O U T I N E =======================================
.text:00005818
.text:00005818 ; Attributes: bp-based frame
.text:00005818
.text:00005818 ; public: __thiscall CMyComPtr<struct ICompressWriteCoderProperties>::CMyComPtr<struct ICompressWriteCoderProperties>(void)
.text:00005818                 public ??0?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ
.text:00005818 ??0?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ proc near
.text:00005818                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+3ECp
.text:00005818
.text:00005818 var_4           = dword ptr -4
.text:00005818
.text:00005818                 push    ebp
.text:00005819                 mov     ebp, esp
.text:0000581B                 push    ecx
.text:0000581C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005823                 mov     [ebp+var_4], ecx
.text:00005826                 mov     eax, [ebp+var_4]
.text:00005829                 mov     dword ptr [eax], 0
.text:0000582F                 mov     eax, [ebp+var_4]
.text:00005832                 mov     esp, ebp
.text:00005834                 pop     ebp
.text:00005835                 retn
.text:00005835 ??0?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ endp
.text:00005835
.text:00005835 ; ---------------------------------------------------------------------------
.text:00005836                 align 4
.text:00005836 _text           ends
.text:00005836
.text:00005838 ; ===========================================================================
.text:00005838
.text:00005838 ; Segment type: Pure code
.text:00005838 ; Segment permissions: Read/Execute
.text:00005838 _text           segment para public 'CODE' use32
.text:00005838                 assume cs:_text
.text:00005838                 ;org 5838h
.text:00005838 ; COMDAT (pick any)
.text:00005838                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005838
.text:00005838 ; =============== S U B R O U T I N E =======================================
.text:00005838
.text:00005838 ; Attributes: bp-based frame
.text:00005838
.text:00005838 ; public: __thiscall CMyComPtr<struct ICompressWriteCoderProperties>::~CMyComPtr<struct ICompressWriteCoderProperties>(void)
.text:00005838                 public ??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ
.text:00005838 ??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ proc near
.text:00005838                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+53Cp
.text:00005838                                         ; __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$12+6j
.text:00005838
.text:00005838 var_4           = dword ptr -4
.text:00005838
.text:00005838                 push    ebp
.text:00005839                 mov     ebp, esp
.text:0000583B                 push    ecx
.text:0000583C                 push    esi
.text:0000583D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005844                 mov     [ebp+var_4], ecx
.text:00005847                 mov     eax, [ebp+var_4]
.text:0000584A                 cmp     dword ptr [eax], 0
.text:0000584D                 jz      short loc_586A
.text:0000584F                 mov     ecx, [ebp+var_4]
.text:00005852                 mov     edx, [ecx]
.text:00005854                 mov     eax, [ebp+var_4]
.text:00005857                 mov     ecx, [eax]
.text:00005859                 mov     edx, [edx]
.text:0000585B                 mov     esi, esp
.text:0000585D                 push    ecx
.text:0000585E                 mov     eax, [edx+8]
.text:00005861                 call    eax
.text:00005863                 cmp     esi, esp
.text:00005865                 call    __RTC_CheckEsp
.text:0000586A
.text:0000586A loc_586A:                               ; CODE XREF: CMyComPtr<ICompressWriteCoderProperties>::~CMyComPtr<ICompressWriteCoderProperties>(void)+15j
.text:0000586A                 pop     esi
.text:0000586B                 add     esp, 4
.text:0000586E                 cmp     ebp, esp
.text:00005870                 call    __RTC_CheckEsp
.text:00005875                 mov     esp, ebp
.text:00005877                 pop     ebp
.text:00005878                 retn
.text:00005878 ??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ endp
.text:00005878
.text:00005878 ; ---------------------------------------------------------------------------
.text:00005879                 align 4
.text:00005879 _text           ends
.text:00005879
.text:0000587C ; ===========================================================================
.text:0000587C
.text:0000587C ; Segment type: Pure code
.text:0000587C ; Segment permissions: Read/Execute
.text:0000587C _text           segment para public 'CODE' use32
.text:0000587C                 assume cs:_text
.text:0000587C                 ;org 587Ch
.text:0000587C ; COMDAT (pick any)
.text:0000587C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000587C
.text:0000587C ; =============== S U B R O U T I N E =======================================
.text:0000587C
.text:0000587C ; Attributes: bp-based frame
.text:0000587C
.text:0000587C ; public: __thiscall CMyComPtr<struct ICompressWriteCoderProperties>::operator struct ICompressWriteCoderProperties *(void)const
.text:0000587C                 public ??B?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ
.text:0000587C ??B?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ proc near
.text:0000587C                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+446p
.text:0000587C
.text:0000587C var_4           = dword ptr -4
.text:0000587C
.text:0000587C                 push    ebp
.text:0000587D                 mov     ebp, esp
.text:0000587F                 push    ecx
.text:00005880                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005887                 mov     [ebp+var_4], ecx
.text:0000588A                 mov     eax, [ebp+var_4]
.text:0000588D                 mov     eax, [eax]
.text:0000588F                 mov     esp, ebp
.text:00005891                 pop     ebp
.text:00005892                 retn
.text:00005892 ??B?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ endp
.text:00005892
.text:00005892 ; ---------------------------------------------------------------------------
.text:00005893                 align 4
.text:00005893 _text           ends
.text:00005893
.text:00005894 ; ===========================================================================
.text:00005894
.text:00005894 ; Segment type: Pure code
.text:00005894 ; Segment permissions: Read/Execute
.text:00005894 _text           segment para public 'CODE' use32
.text:00005894                 assume cs:_text
.text:00005894                 ;org 5894h
.text:00005894 ; COMDAT (pick any)
.text:00005894                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005894
.text:00005894 ; =============== S U B R O U T I N E =======================================
.text:00005894
.text:00005894 ; Attributes: bp-based frame
.text:00005894
.text:00005894 ; public: struct ICompressWriteCoderProperties * * __thiscall CMyComPtr<struct ICompressWriteCoderProperties>::operator&(void)
.text:00005894                 public ??I?$CMyComPtr@UICompressWriteCoderProperties@@@@QAEPAPAUICompressWriteCoderProperties@@XZ
.text:00005894 ??I?$CMyComPtr@UICompressWriteCoderProperties@@@@QAEPAPAUICompressWriteCoderProperties@@XZ proc near
.text:00005894                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+3FBp
.text:00005894
.text:00005894 var_4           = dword ptr -4
.text:00005894
.text:00005894                 push    ebp
.text:00005895                 mov     ebp, esp
.text:00005897                 push    ecx
.text:00005898                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000589F                 mov     [ebp+var_4], ecx
.text:000058A2                 mov     eax, [ebp+var_4]
.text:000058A5                 mov     esp, ebp
.text:000058A7                 pop     ebp
.text:000058A8                 retn
.text:000058A8 ??I?$CMyComPtr@UICompressWriteCoderProperties@@@@QAEPAPAUICompressWriteCoderProperties@@XZ endp
.text:000058A8
.text:000058A8 ; ---------------------------------------------------------------------------
.text:000058A9                 align 4
.text:000058A9 _text           ends
.text:000058A9
.text:000058AC ; ===========================================================================
.text:000058AC
.text:000058AC ; Segment type: Pure code
.text:000058AC ; Segment permissions: Read/Execute
.text:000058AC _text           segment para public 'CODE' use32
.text:000058AC                 assume cs:_text
.text:000058AC                 ;org 58ACh
.text:000058AC ; COMDAT (pick any)
.text:000058AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000058AC
.text:000058AC ; =============== S U B R O U T I N E =======================================
.text:000058AC
.text:000058AC ; Attributes: bp-based frame
.text:000058AC
.text:000058AC ; public: struct ICompressWriteCoderProperties * __thiscall CMyComPtr<struct ICompressWriteCoderProperties>::operator->(void)const
.text:000058AC                 public ??C?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ
.text:000058AC ??C?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ proc near
.text:000058AC                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+4D0p
.text:000058AC
.text:000058AC var_4           = dword ptr -4
.text:000058AC
.text:000058AC                 push    ebp
.text:000058AD                 mov     ebp, esp
.text:000058AF                 push    ecx
.text:000058B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000058B7                 mov     [ebp+var_4], ecx
.text:000058BA                 mov     eax, [ebp+var_4]
.text:000058BD                 mov     eax, [eax]
.text:000058BF                 mov     esp, ebp
.text:000058C1                 pop     ebp
.text:000058C2                 retn
.text:000058C2 ??C?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ endp
.text:000058C2
.text:000058C2 ; ---------------------------------------------------------------------------
.text:000058C3                 align 4
.text:000058C3 _text           ends
.text:000058C3
.text:000058C4 ; ===========================================================================
.text:000058C4
.text:000058C4 ; Segment type: Pure code
.text:000058C4 ; Segment permissions: Read/Execute
.text:000058C4 _text           segment para public 'CODE' use32
.text:000058C4                 assume cs:_text
.text:000058C4                 ;org 58C4h
.text:000058C4 ; COMDAT (pick any)
.text:000058C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000058C4
.text:000058C4 ; =============== S U B R O U T I N E =======================================
.text:000058C4
.text:000058C4 ; Attributes: bp-based frame
.text:000058C4
.text:000058C4 ; public: __thiscall CMyComPtr<struct ICryptoResetInitVector>::CMyComPtr<struct ICryptoResetInitVector>(void)
.text:000058C4                 public ??0?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ
.text:000058C4 ??0?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ proc near
.text:000058C4                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+373p
.text:000058C4
.text:000058C4 var_4           = dword ptr -4
.text:000058C4
.text:000058C4                 push    ebp
.text:000058C5                 mov     ebp, esp
.text:000058C7                 push    ecx
.text:000058C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000058CF                 mov     [ebp+var_4], ecx
.text:000058D2                 mov     eax, [ebp+var_4]
.text:000058D5                 mov     dword ptr [eax], 0
.text:000058DB                 mov     eax, [ebp+var_4]
.text:000058DE                 mov     esp, ebp
.text:000058E0                 pop     ebp
.text:000058E1                 retn
.text:000058E1 ??0?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ endp
.text:000058E1
.text:000058E1 ; ---------------------------------------------------------------------------
.text:000058E2                 align 4
.text:000058E2 _text           ends
.text:000058E2
.text:000058E4 ; ===========================================================================
.text:000058E4
.text:000058E4 ; Segment type: Pure code
.text:000058E4 ; Segment permissions: Read/Execute
.text:000058E4 _text           segment para public 'CODE' use32
.text:000058E4                 assume cs:_text
.text:000058E4                 ;org 58E4h
.text:000058E4 ; COMDAT (pick any)
.text:000058E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000058E4
.text:000058E4 ; =============== S U B R O U T I N E =======================================
.text:000058E4
.text:000058E4 ; Attributes: bp-based frame
.text:000058E4
.text:000058E4 ; public: __thiscall CMyComPtr<struct ICryptoResetInitVector>::~CMyComPtr<struct ICryptoResetInitVector>(void)
.text:000058E4                 public ??1?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ
.text:000058E4 ??1?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ proc near
.text:000058E4                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+54Bp
.text:000058E4                                         ; __unwindfunclet$?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z$11+6j
.text:000058E4
.text:000058E4 var_4           = dword ptr -4
.text:000058E4
.text:000058E4                 push    ebp
.text:000058E5                 mov     ebp, esp
.text:000058E7                 push    ecx
.text:000058E8                 push    esi
.text:000058E9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000058F0                 mov     [ebp+var_4], ecx
.text:000058F3                 mov     eax, [ebp+var_4]
.text:000058F6                 cmp     dword ptr [eax], 0
.text:000058F9                 jz      short loc_5916
.text:000058FB                 mov     ecx, [ebp+var_4]
.text:000058FE                 mov     edx, [ecx]
.text:00005900                 mov     eax, [ebp+var_4]
.text:00005903                 mov     ecx, [eax]
.text:00005905                 mov     edx, [edx]
.text:00005907                 mov     esi, esp
.text:00005909                 push    ecx
.text:0000590A                 mov     eax, [edx+8]
.text:0000590D                 call    eax
.text:0000590F                 cmp     esi, esp
.text:00005911                 call    __RTC_CheckEsp
.text:00005916
.text:00005916 loc_5916:                               ; CODE XREF: CMyComPtr<ICryptoResetInitVector>::~CMyComPtr<ICryptoResetInitVector>(void)+15j
.text:00005916                 pop     esi
.text:00005917                 add     esp, 4
.text:0000591A                 cmp     ebp, esp
.text:0000591C                 call    __RTC_CheckEsp
.text:00005921                 mov     esp, ebp
.text:00005923                 pop     ebp
.text:00005924                 retn
.text:00005924 ??1?$CMyComPtr@UICryptoResetInitVector@@@@QAE@XZ endp
.text:00005924
.text:00005924 ; ---------------------------------------------------------------------------
.text:00005925                 align 4
.text:00005925 _text           ends
.text:00005925
.text:00005928 ; ===========================================================================
.text:00005928
.text:00005928 ; Segment type: Pure code
.text:00005928 ; Segment permissions: Read/Execute
.text:00005928 _text           segment para public 'CODE' use32
.text:00005928                 assume cs:_text
.text:00005928                 ;org 5928h
.text:00005928 ; COMDAT (pick any)
.text:00005928                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005928
.text:00005928 ; =============== S U B R O U T I N E =======================================
.text:00005928
.text:00005928 ; Attributes: bp-based frame
.text:00005928
.text:00005928 ; public: __thiscall CMyComPtr<struct ICryptoResetInitVector>::operator struct ICryptoResetInitVector *(void)const
.text:00005928                 public ??B?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ
.text:00005928 ??B?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ proc near
.text:00005928                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+3AFp
.text:00005928
.text:00005928 var_4           = dword ptr -4
.text:00005928
.text:00005928                 push    ebp
.text:00005929                 mov     ebp, esp
.text:0000592B                 push    ecx
.text:0000592C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005933                 mov     [ebp+var_4], ecx
.text:00005936                 mov     eax, [ebp+var_4]
.text:00005939                 mov     eax, [eax]
.text:0000593B                 mov     esp, ebp
.text:0000593D                 pop     ebp
.text:0000593E                 retn
.text:0000593E ??B?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ endp
.text:0000593E
.text:0000593E ; ---------------------------------------------------------------------------
.text:0000593F                 align 10h
.text:0000593F _text           ends
.text:0000593F
.text:00005940 ; ===========================================================================
.text:00005940
.text:00005940 ; Segment type: Pure code
.text:00005940 ; Segment permissions: Read/Execute
.text:00005940 _text           segment para public 'CODE' use32
.text:00005940                 assume cs:_text
.text:00005940                 ;org 5940h
.text:00005940 ; COMDAT (pick any)
.text:00005940                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005940
.text:00005940 ; =============== S U B R O U T I N E =======================================
.text:00005940
.text:00005940 ; Attributes: bp-based frame
.text:00005940
.text:00005940 ; public: struct ICryptoResetInitVector * * __thiscall CMyComPtr<struct ICryptoResetInitVector>::operator&(void)
.text:00005940                 public ??I?$CMyComPtr@UICryptoResetInitVector@@@@QAEPAPAUICryptoResetInitVector@@XZ
.text:00005940 ??I?$CMyComPtr@UICryptoResetInitVector@@@@QAEPAPAUICryptoResetInitVector@@XZ proc near
.text:00005940                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+382p
.text:00005940
.text:00005940 var_4           = dword ptr -4
.text:00005940
.text:00005940                 push    ebp
.text:00005941                 mov     ebp, esp
.text:00005943                 push    ecx
.text:00005944                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000594B                 mov     [ebp+var_4], ecx
.text:0000594E                 mov     eax, [ebp+var_4]
.text:00005951                 mov     esp, ebp
.text:00005953                 pop     ebp
.text:00005954                 retn
.text:00005954 ??I?$CMyComPtr@UICryptoResetInitVector@@@@QAEPAPAUICryptoResetInitVector@@XZ endp
.text:00005954
.text:00005954 ; ---------------------------------------------------------------------------
.text:00005955                 align 4
.text:00005955 _text           ends
.text:00005955
.text:00005958 ; ===========================================================================
.text:00005958
.text:00005958 ; Segment type: Pure code
.text:00005958 ; Segment permissions: Read/Execute
.text:00005958 _text           segment para public 'CODE' use32
.text:00005958                 assume cs:_text
.text:00005958                 ;org 5958h
.text:00005958 ; COMDAT (pick any)
.text:00005958                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005958
.text:00005958 ; =============== S U B R O U T I N E =======================================
.text:00005958
.text:00005958 ; Attributes: bp-based frame
.text:00005958
.text:00005958 ; public: struct ICryptoResetInitVector * __thiscall CMyComPtr<struct ICryptoResetInitVector>::operator->(void)const
.text:00005958                 public ??C?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ
.text:00005958 ??C?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ proc near
.text:00005958                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+3BEp
.text:00005958
.text:00005958 var_4           = dword ptr -4
.text:00005958
.text:00005958                 push    ebp
.text:00005959                 mov     ebp, esp
.text:0000595B                 push    ecx
.text:0000595C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005963                 mov     [ebp+var_4], ecx
.text:00005966                 mov     eax, [ebp+var_4]
.text:00005969                 mov     eax, [eax]
.text:0000596B                 mov     esp, ebp
.text:0000596D                 pop     ebp
.text:0000596E                 retn
.text:0000596E ??C?$CMyComPtr@UICryptoResetInitVector@@@@QBEPAUICryptoResetInitVector@@XZ endp
.text:0000596E
.text:0000596E ; ---------------------------------------------------------------------------
.text:0000596F                 align 10h
.text:0000596F _text           ends
.text:0000596F
.text:00005970 ; ===========================================================================
.text:00005970
.text:00005970 ; Segment type: Pure code
.text:00005970 ; Segment permissions: Read/Execute
.text:00005970 _text           segment para public 'CODE' use32
.text:00005970                 assume cs:_text
.text:00005970                 ;org 5970h
.text:00005970 ; COMDAT (pick any)
.text:00005970                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005970
.text:00005970 ; =============== S U B R O U T I N E =======================================
.text:00005970
.text:00005970 ; Attributes: bp-based frame
.text:00005970
.text:00005970 ; public: __thiscall CRecordVector<unsigned int>::CRecordVector<unsigned int>(void)
.text:00005970                 public ??0?$CRecordVector@I@@QAE@XZ
.text:00005970 ??0?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: NArchive::N7z::CEncoder::CEncoder(NArchive::N7z::CCompressionMethodMode const &)+81p
.text:00005970                                         ; NArchive::N7z::CEncoder::CEncoder(NArchive::N7z::CCompressionMethodMode const &)+93p ...
.text:00005970
.text:00005970 var_4           = dword ptr -4
.text:00005970
.text:00005970                 push    ebp
.text:00005971                 mov     ebp, esp
.text:00005973                 push    ecx
.text:00005974                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000597B                 mov     [ebp+var_4], ecx
.text:0000597E                 mov     eax, [ebp+var_4]
.text:00005981                 mov     dword ptr [eax], 0
.text:00005987                 mov     ecx, [ebp+var_4]
.text:0000598A                 mov     dword ptr [ecx+4], 0
.text:00005991                 mov     edx, [ebp+var_4]
.text:00005994                 mov     dword ptr [edx+8], 0
.text:0000599B                 mov     eax, [ebp+var_4]
.text:0000599E                 mov     esp, ebp
.text:000059A0                 pop     ebp
.text:000059A1                 retn
.text:000059A1 ??0?$CRecordVector@I@@QAE@XZ endp
.text:000059A1
.text:000059A1 ; ---------------------------------------------------------------------------
.text:000059A2                 align 4
.text:000059A2 _text           ends
.text:000059A2
.text:000059A4 ; ===========================================================================
.text:000059A4
.text:000059A4 ; Segment type: Pure code
.text:000059A4 ; Segment permissions: Read/Execute
.text:000059A4 _text           segment para public 'CODE' use32
.text:000059A4                 assume cs:_text
.text:000059A4                 ;org 59A4h
.text:000059A4 ; COMDAT (pick any)
.text:000059A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000059A4
.text:000059A4 ; =============== S U B R O U T I N E =======================================
.text:000059A4
.text:000059A4 ; Attributes: bp-based frame
.text:000059A4
.text:000059A4 ; public: unsigned int __thiscall CRecordVector<unsigned int>::Size(void)const
.text:000059A4                 public ?Size@?$CRecordVector@I@@QBEIXZ
.text:000059A4 ?Size@?$CRecordVector@I@@QBEIXZ proc near
.text:000059A4                                         ; CODE XREF: NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+166p
.text:000059A4                                         ; NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+18Fp ...
.text:000059A4
.text:000059A4 var_4           = dword ptr -4
.text:000059A4
.text:000059A4                 push    ebp
.text:000059A5                 mov     ebp, esp
.text:000059A7                 push    ecx
.text:000059A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000059AF                 mov     [ebp+var_4], ecx
.text:000059B2                 mov     eax, [ebp+var_4]
.text:000059B5                 mov     eax, [eax+4]
.text:000059B8                 mov     esp, ebp
.text:000059BA                 pop     ebp
.text:000059BB                 retn
.text:000059BB ?Size@?$CRecordVector@I@@QBEIXZ endp
.text:000059BB
.text:000059BB _text           ends
.text:000059BB
.text:000059BC ; ===========================================================================
.text:000059BC
.text:000059BC ; Segment type: Pure code
.text:000059BC ; Segment permissions: Read/Execute
.text:000059BC _text           segment para public 'CODE' use32
.text:000059BC                 assume cs:_text
.text:000059BC                 ;org 59BCh
.text:000059BC ; COMDAT (pick any)
.text:000059BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000059BC
.text:000059BC ; =============== S U B R O U T I N E =======================================
.text:000059BC
.text:000059BC ; Attributes: bp-based frame
.text:000059BC
.text:000059BC ; public: void __thiscall CRecordVector<unsigned int>::ClearAndSetSize(unsigned int)
.text:000059BC                 public ?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z
.text:000059BC ?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z proc near
.text:000059BC                                         ; CODE XREF: NArchive::N7z::CEncoder::InitBindConv(void)+44p
.text:000059BC                                         ; NArchive::N7z::CEncoder::InitBindConv(void)+56p ...
.text:000059BC
.text:000059BC var_4           = dword ptr -4
.text:000059BC arg_0           = dword ptr  8
.text:000059BC
.text:000059BC                 push    ebp
.text:000059BD                 mov     ebp, esp
.text:000059BF                 push    ecx
.text:000059C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000059C7                 mov     [ebp+var_4], ecx
.text:000059CA                 mov     eax, [ebp+arg_0]
.text:000059CD                 push    eax
.text:000059CE                 mov     ecx, [ebp+var_4]
.text:000059D1                 call    ?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<uint>::ClearAndReserve(uint)
.text:000059D6                 mov     ecx, [ebp+var_4]
.text:000059D9                 mov     edx, [ebp+arg_0]
.text:000059DC                 mov     [ecx+4], edx
.text:000059DF                 add     esp, 4
.text:000059E2                 cmp     ebp, esp
.text:000059E4                 call    __RTC_CheckEsp
.text:000059E9                 mov     esp, ebp
.text:000059EB                 pop     ebp
.text:000059EC                 retn    4
.text:000059EC ?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z endp
.text:000059EC
.text:000059EC ; ---------------------------------------------------------------------------
.text:000059EF                 align 10h
.text:000059EF _text           ends
.text:000059EF
.text:000059F0 ; ===========================================================================
.text:000059F0
.text:000059F0 ; Segment type: Pure code
.text:000059F0 ; Segment permissions: Read/Execute
.text:000059F0 _text           segment para public 'CODE' use32
.text:000059F0                 assume cs:_text
.text:000059F0                 ;org 59F0h
.text:000059F0 ; COMDAT (pick any)
.text:000059F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000059F0
.text:000059F0 ; =============== S U B R O U T I N E =======================================
.text:000059F0
.text:000059F0 ; Attributes: bp-based frame
.text:000059F0
.text:000059F0 ; public: __thiscall CRecordVector<unsigned int>::~CRecordVector<unsigned int>(void)
.text:000059F0                 public ??1?$CRecordVector@I@@QAE@XZ
.text:000059F0 ??1?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: NArchive::N7z::CEncoder::~CEncoder(void)+3Dp
.text:000059F0                                         ; NArchive::N7z::CEncoder::~CEncoder(void)+4Fp ...
.text:000059F0
.text:000059F0 var_8           = dword ptr -8
.text:000059F0 var_4           = dword ptr -4
.text:000059F0
.text:000059F0                 push    ebp
.text:000059F1                 mov     ebp, esp
.text:000059F3                 sub     esp, 8
.text:000059F6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000059FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005A04                 mov     [ebp+var_4], ecx
.text:00005A07                 mov     eax, [ebp+var_4]
.text:00005A0A                 mov     ecx, [eax]
.text:00005A0C                 mov     [ebp+var_8], ecx
.text:00005A0F                 mov     edx, [ebp+var_8]
.text:00005A12                 push    edx             ; void *
.text:00005A13                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005A18                 add     esp, 4
.text:00005A1B                 add     esp, 8
.text:00005A1E                 cmp     ebp, esp
.text:00005A20                 call    __RTC_CheckEsp
.text:00005A25                 mov     esp, ebp
.text:00005A27                 pop     ebp
.text:00005A28                 retn
.text:00005A28 ??1?$CRecordVector@I@@QAE@XZ endp
.text:00005A28
.text:00005A28 ; ---------------------------------------------------------------------------
.text:00005A29                 align 4
.text:00005A29 _text           ends
.text:00005A29
.text:00005A2C ; ===========================================================================
.text:00005A2C
.text:00005A2C ; Segment type: Pure code
.text:00005A2C ; Segment permissions: Read/Execute
.text:00005A2C _text           segment para public 'CODE' use32
.text:00005A2C                 assume cs:_text
.text:00005A2C                 ;org 5A2Ch
.text:00005A2C ; COMDAT (pick any)
.text:00005A2C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005A2C
.text:00005A2C ; =============== S U B R O U T I N E =======================================
.text:00005A2C
.text:00005A2C ; Attributes: bp-based frame
.text:00005A2C
.text:00005A2C ; public: void __thiscall CRecordVector<unsigned int>::Clear(void)
.text:00005A2C                 public ?Clear@?$CRecordVector@I@@QAEXXZ
.text:00005A2C ?Clear@?$CRecordVector@I@@QAEXXZ proc near
.text:00005A2C                                         ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+4EAp
.text:00005A2C                                         ; CRecordVector<uint>::ClearAndReserve(uint)+21p
.text:00005A2C
.text:00005A2C var_4           = dword ptr -4
.text:00005A2C
.text:00005A2C                 push    ebp
.text:00005A2D                 mov     ebp, esp
.text:00005A2F                 push    ecx
.text:00005A30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005A37                 mov     [ebp+var_4], ecx
.text:00005A3A                 mov     eax, [ebp+var_4]
.text:00005A3D                 mov     dword ptr [eax+4], 0
.text:00005A44                 mov     esp, ebp
.text:00005A46                 pop     ebp
.text:00005A47                 retn
.text:00005A47 ?Clear@?$CRecordVector@I@@QAEXXZ endp
.text:00005A47
.text:00005A47 _text           ends
.text:00005A47
.text:00005A48 ; ===========================================================================
.text:00005A48
.text:00005A48 ; Segment type: Pure code
.text:00005A48 ; Segment permissions: Read/Execute
.text:00005A48 _text           segment para public 'CODE' use32
.text:00005A48                 assume cs:_text
.text:00005A48                 ;org 5A48h
.text:00005A48 ; COMDAT (pick any)
.text:00005A48                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005A48
.text:00005A48 ; =============== S U B R O U T I N E =======================================
.text:00005A48
.text:00005A48 ; Attributes: bp-based frame
.text:00005A48
.text:00005A48 ; public: class CRecordVector<unsigned int> & __thiscall CRecordVector<unsigned int>::operator=(class CRecordVector<unsigned int> const &)
.text:00005A48                 public ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z
.text:00005A48 ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z proc near
.text:00005A48                                         ; CODE XREF: NCoderMixer2::CBindInfo::operator=(NCoderMixer2::CBindInfo const &)+39p
.text:00005A48                                         ; NCoderMixer2::CBindInfo::operator=(NCoderMixer2::CBindInfo const &)+57p ...
.text:00005A48
.text:00005A48 var_10          = dword ptr -10h
.text:00005A48 var_C           = dword ptr -0Ch
.text:00005A48 var_8           = dword ptr -8
.text:00005A48 var_4           = dword ptr -4
.text:00005A48 arg_0           = dword ptr  8
.text:00005A48
.text:00005A48                 push    ebp
.text:00005A49                 mov     ebp, esp
.text:00005A4B                 sub     esp, 10h
.text:00005A4E                 mov     eax, 0CCCCCCCCh
.text:00005A53                 mov     [ebp+var_10], eax
.text:00005A56                 mov     [ebp+var_C], eax
.text:00005A59                 mov     [ebp+var_8], eax
.text:00005A5C                 mov     [ebp+var_4], eax
.text:00005A5F                 mov     [ebp+var_4], ecx
.text:00005A62                 mov     eax, [ebp+arg_0]
.text:00005A65                 cmp     eax, [ebp+var_4]
.text:00005A68                 jnz     short loc_5A72
.text:00005A6A                 mov     eax, [ebp+var_4]
.text:00005A6D                 jmp     loc_5B16
.text:00005A72 ; ---------------------------------------------------------------------------
.text:00005A72
.text:00005A72 loc_5A72:                               ; CODE XREF: CRecordVector<uint>::operator=(CRecordVector<uint> const &)+20j
.text:00005A72                 mov     ecx, [ebp+arg_0]
.text:00005A75                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00005A7A                 mov     [ebp+var_8], eax
.text:00005A7D                 mov     ecx, [ebp+var_4]
.text:00005A80                 mov     edx, [ebp+var_8]
.text:00005A83                 cmp     edx, [ecx+8]
.text:00005A86                 jbe     short loc_5AE9
.text:00005A88                 mov     eax, [ebp+var_4]
.text:00005A8B                 mov     ecx, [eax]
.text:00005A8D                 mov     [ebp+var_C], ecx
.text:00005A90                 mov     edx, [ebp+var_C]
.text:00005A93                 push    edx             ; void *
.text:00005A94                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005A99                 add     esp, 4
.text:00005A9C                 mov     eax, [ebp+var_4]
.text:00005A9F                 mov     dword ptr [eax+8], 0
.text:00005AA6                 mov     ecx, [ebp+var_4]
.text:00005AA9                 mov     dword ptr [ecx+4], 0
.text:00005AB0                 mov     edx, [ebp+var_4]
.text:00005AB3                 mov     dword ptr [edx], 0
.text:00005AB9                 xor     ecx, ecx
.text:00005ABB                 mov     eax, [ebp+var_8]
.text:00005ABE                 mov     edx, 4
.text:00005AC3                 mul     edx
.text:00005AC5                 seto    cl
.text:00005AC8                 neg     ecx
.text:00005ACA                 or      ecx, eax
.text:00005ACC                 push    ecx             ; unsigned int
.text:00005ACD                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005AD2                 add     esp, 4
.text:00005AD5                 mov     [ebp+var_10], eax
.text:00005AD8                 mov     eax, [ebp+var_4]
.text:00005ADB                 mov     ecx, [ebp+var_10]
.text:00005ADE                 mov     [eax], ecx
.text:00005AE0                 mov     edx, [ebp+var_4]
.text:00005AE3                 mov     eax, [ebp+var_8]
.text:00005AE6                 mov     [edx+8], eax
.text:00005AE9
.text:00005AE9 loc_5AE9:                               ; CODE XREF: CRecordVector<uint>::operator=(CRecordVector<uint> const &)+3Ej
.text:00005AE9                 mov     ecx, [ebp+var_4]
.text:00005AEC                 mov     edx, [ebp+var_8]
.text:00005AEF                 mov     [ecx+4], edx
.text:00005AF2                 cmp     [ebp+var_8], 0
.text:00005AF6                 jz      short loc_5B13
.text:00005AF8                 mov     eax, [ebp+var_8]
.text:00005AFB                 shl     eax, 2
.text:00005AFE                 push    eax             ; Size
.text:00005AFF                 mov     ecx, [ebp+arg_0]
.text:00005B02                 mov     edx, [ecx]
.text:00005B04                 push    edx             ; Src
.text:00005B05                 mov     eax, [ebp+var_4]
.text:00005B08                 mov     ecx, [eax]
.text:00005B0A                 push    ecx             ; Dst
.text:00005B0B                 call    _memcpy
.text:00005B10                 add     esp, 0Ch
.text:00005B13
.text:00005B13 loc_5B13:                               ; CODE XREF: CRecordVector<uint>::operator=(CRecordVector<uint> const &)+AEj
.text:00005B13                 mov     eax, [ebp+var_4]
.text:00005B16
.text:00005B16 loc_5B16:                               ; CODE XREF: CRecordVector<uint>::operator=(CRecordVector<uint> const &)+25j
.text:00005B16                 add     esp, 10h
.text:00005B19                 cmp     ebp, esp
.text:00005B1B                 call    __RTC_CheckEsp
.text:00005B20                 mov     esp, ebp
.text:00005B22                 pop     ebp
.text:00005B23                 retn    4
.text:00005B23 ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z endp
.text:00005B23
.text:00005B23 ; ---------------------------------------------------------------------------
.text:00005B26                 align 4
.text:00005B26 _text           ends
.text:00005B26
.text:00005B28 ; ===========================================================================
.text:00005B28
.text:00005B28 ; Segment type: Pure code
.text:00005B28 ; Segment permissions: Read/Execute
.text:00005B28 _text           segment para public 'CODE' use32
.text:00005B28                 assume cs:_text
.text:00005B28                 ;org 5B28h
.text:00005B28 ; COMDAT (pick any)
.text:00005B28                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005B28
.text:00005B28 ; =============== S U B R O U T I N E =======================================
.text:00005B28
.text:00005B28 ; Attributes: bp-based frame
.text:00005B28
.text:00005B28 ; public: unsigned int __thiscall CRecordVector<unsigned int>::Add(unsigned int)
.text:00005B28                 public ?Add@?$CRecordVector@I@@QAEII@Z
.text:00005B28 ?Add@?$CRecordVector@I@@QAEII@Z proc near
.text:00005B28                                         ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+10Fp
.text:00005B28                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+201p ...
.text:00005B28
.text:00005B28 var_8           = dword ptr -8
.text:00005B28 var_4           = dword ptr -4
.text:00005B28 arg_0           = dword ptr  8
.text:00005B28
.text:00005B28                 push    ebp
.text:00005B29                 mov     ebp, esp
.text:00005B2B                 sub     esp, 8
.text:00005B2E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005B35                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B3C                 mov     [ebp+var_4], ecx
.text:00005B3F                 mov     ecx, [ebp+var_4]
.text:00005B42                 call    ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ; CRecordVector<uint>::ReserveOnePosition(void)
.text:00005B47                 mov     eax, [ebp+var_4]
.text:00005B4A                 mov     ecx, [eax+4]
.text:00005B4D                 mov     edx, [ebp+var_4]
.text:00005B50                 mov     eax, [edx]
.text:00005B52                 mov     edx, [ebp+arg_0]
.text:00005B55                 mov     [eax+ecx*4], edx
.text:00005B58                 mov     eax, [ebp+var_4]
.text:00005B5B                 mov     ecx, [eax+4]
.text:00005B5E                 mov     [ebp+var_8], ecx
.text:00005B61                 mov     edx, [ebp+var_4]
.text:00005B64                 mov     eax, [edx+4]
.text:00005B67                 add     eax, 1
.text:00005B6A                 mov     ecx, [ebp+var_4]
.text:00005B6D                 mov     [ecx+4], eax
.text:00005B70                 mov     eax, [ebp+var_8]
.text:00005B73                 add     esp, 8
.text:00005B76                 cmp     ebp, esp
.text:00005B78                 call    __RTC_CheckEsp
.text:00005B7D                 mov     esp, ebp
.text:00005B7F                 pop     ebp
.text:00005B80                 retn    4
.text:00005B80 ?Add@?$CRecordVector@I@@QAEII@Z endp
.text:00005B80
.text:00005B80 ; ---------------------------------------------------------------------------
.text:00005B83                 align 4
.text:00005B83 _text           ends
.text:00005B83
.text:00005B84 ; ===========================================================================
.text:00005B84
.text:00005B84 ; Segment type: Pure code
.text:00005B84 ; Segment permissions: Read/Execute
.text:00005B84 _text           segment para public 'CODE' use32
.text:00005B84                 assume cs:_text
.text:00005B84                 ;org 5B84h
.text:00005B84 ; COMDAT (pick any)
.text:00005B84                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005B84
.text:00005B84 ; =============== S U B R O U T I N E =======================================
.text:00005B84
.text:00005B84 ; Attributes: bp-based frame
.text:00005B84
.text:00005B84 ; public: void __thiscall CRecordVector<unsigned int>::Insert(unsigned int, unsigned int)
.text:00005B84                 public ?Insert@?$CRecordVector@I@@QAEXII@Z
.text:00005B84 ?Insert@?$CRecordVector@I@@QAEXII@Z proc near
.text:00005B84                                         ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+1D5p
.text:00005B84
.text:00005B84 var_4           = dword ptr -4
.text:00005B84 arg_0           = dword ptr  8
.text:00005B84 arg_4           = dword ptr  0Ch
.text:00005B84
.text:00005B84                 push    ebp
.text:00005B85                 mov     ebp, esp
.text:00005B87                 push    ecx
.text:00005B88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B8F                 mov     [ebp+var_4], ecx
.text:00005B92                 mov     ecx, [ebp+var_4]
.text:00005B95                 call    ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ; CRecordVector<uint>::ReserveOnePosition(void)
.text:00005B9A                 mov     eax, [ebp+arg_0]
.text:00005B9D                 push    eax
.text:00005B9E                 mov     ecx, [ebp+arg_0]
.text:00005BA1                 add     ecx, 1
.text:00005BA4                 push    ecx
.text:00005BA5                 mov     ecx, [ebp+var_4]
.text:00005BA8                 call    ?MoveItems@?$CRecordVector@I@@AAEXII@Z ; CRecordVector<uint>::MoveItems(uint,uint)
.text:00005BAD                 mov     edx, [ebp+var_4]
.text:00005BB0                 mov     eax, [edx]
.text:00005BB2                 mov     ecx, [ebp+arg_0]
.text:00005BB5                 mov     edx, [ebp+arg_4]
.text:00005BB8                 mov     [eax+ecx*4], edx
.text:00005BBB                 mov     eax, [ebp+var_4]
.text:00005BBE                 mov     ecx, [eax+4]
.text:00005BC1                 add     ecx, 1
.text:00005BC4                 mov     edx, [ebp+var_4]
.text:00005BC7                 mov     [edx+4], ecx
.text:00005BCA                 add     esp, 4
.text:00005BCD                 cmp     ebp, esp
.text:00005BCF                 call    __RTC_CheckEsp
.text:00005BD4                 mov     esp, ebp
.text:00005BD6                 pop     ebp
.text:00005BD7                 retn    8
.text:00005BD7 ?Insert@?$CRecordVector@I@@QAEXII@Z endp
.text:00005BD7
.text:00005BD7 ; ---------------------------------------------------------------------------
.text:00005BDA                 align 4
.text:00005BDA _text           ends
.text:00005BDA
.text:00005BDC ; ===========================================================================
.text:00005BDC
.text:00005BDC ; Segment type: Pure code
.text:00005BDC ; Segment permissions: Read/Execute
.text:00005BDC _text           segment para public 'CODE' use32
.text:00005BDC                 assume cs:_text
.text:00005BDC                 ;org 5BDCh
.text:00005BDC ; COMDAT (pick any)
.text:00005BDC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005BDC
.text:00005BDC ; =============== S U B R O U T I N E =======================================
.text:00005BDC
.text:00005BDC ; Attributes: bp-based frame
.text:00005BDC
.text:00005BDC ; public: void __thiscall CRecordVector<unsigned int>::MoveToFront(unsigned int)
.text:00005BDC                 public ?MoveToFront@?$CRecordVector@I@@QAEXI@Z
.text:00005BDC ?MoveToFront@?$CRecordVector@I@@QAEXI@Z proc near
.text:00005BDC                                         ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+449p
.text:00005BDC
.text:00005BDC var_8           = dword ptr -8
.text:00005BDC var_4           = dword ptr -4
.text:00005BDC arg_0           = dword ptr  8
.text:00005BDC
.text:00005BDC                 push    ebp
.text:00005BDD                 mov     ebp, esp
.text:00005BDF                 sub     esp, 8
.text:00005BE2                 push    esi
.text:00005BE3                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005BEA                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005BF1                 mov     [ebp+var_4], ecx
.text:00005BF4                 cmp     [ebp+arg_0], 0
.text:00005BF8                 jz      short loc_5C3A
.text:00005BFA                 mov     eax, [ebp+var_4]
.text:00005BFD                 mov     ecx, [eax]
.text:00005BFF                 mov     edx, [ebp+arg_0]
.text:00005C02                 mov     eax, [ecx+edx*4]
.text:00005C05                 mov     [ebp+var_8], eax
.text:00005C08                 mov     ecx, [ebp+arg_0]
.text:00005C0B                 shl     ecx, 2
.text:00005C0E                 mov     esi, esp
.text:00005C10                 push    ecx             ; Size
.text:00005C11                 mov     edx, [ebp+var_4]
.text:00005C14                 mov     eax, [edx]
.text:00005C16                 push    eax             ; Src
.text:00005C17                 mov     ecx, [ebp+var_4]
.text:00005C1A                 mov     edx, [ecx]
.text:00005C1C                 add     edx, 4
.text:00005C1F                 push    edx             ; Dst
.text:00005C20                 call    dword ptr ds:__imp__memmove
.text:00005C26                 add     esp, 0Ch
.text:00005C29                 cmp     esi, esp
.text:00005C2B                 call    __RTC_CheckEsp
.text:00005C30                 mov     eax, [ebp+var_4]
.text:00005C33                 mov     ecx, [eax]
.text:00005C35                 mov     edx, [ebp+var_8]
.text:00005C38                 mov     [ecx], edx
.text:00005C3A
.text:00005C3A loc_5C3A:                               ; CODE XREF: CRecordVector<uint>::MoveToFront(uint)+1Cj
.text:00005C3A                 pop     esi
.text:00005C3B                 add     esp, 8
.text:00005C3E                 cmp     ebp, esp
.text:00005C40                 call    __RTC_CheckEsp
.text:00005C45                 mov     esp, ebp
.text:00005C47                 pop     ebp
.text:00005C48                 retn    4
.text:00005C48 ?MoveToFront@?$CRecordVector@I@@QAEXI@Z endp
.text:00005C48
.text:00005C48 ; ---------------------------------------------------------------------------
.text:00005C4B                 align 4
.text:00005C4B _text           ends
.text:00005C4B
.text:00005C4C ; ===========================================================================
.text:00005C4C
.text:00005C4C ; Segment type: Pure code
.text:00005C4C ; Segment permissions: Read/Execute
.text:00005C4C _text           segment para public 'CODE' use32
.text:00005C4C                 assume cs:_text
.text:00005C4C                 ;org 5C4Ch
.text:00005C4C ; COMDAT (pick any)
.text:00005C4C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005C4C
.text:00005C4C ; =============== S U B R O U T I N E =======================================
.text:00005C4C
.text:00005C4C ; Attributes: bp-based frame
.text:00005C4C
.text:00005C4C ; public: unsigned int const & __thiscall CRecordVector<unsigned int>::operator[](unsigned int)const
.text:00005C4C                 public ??A?$CRecordVector@I@@QBEABII@Z
.text:00005C4C ??A?$CRecordVector@I@@QBEABII@Z proc near
.text:00005C4C                                         ; CODE XREF: NCoderMixer2::CBindInfo::FindStream_in_PackStreams(uint)+43p
.text:00005C4C
.text:00005C4C var_4           = dword ptr -4
.text:00005C4C arg_0           = dword ptr  8
.text:00005C4C
.text:00005C4C                 push    ebp
.text:00005C4D                 mov     ebp, esp
.text:00005C4F                 push    ecx
.text:00005C50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C57                 mov     [ebp+var_4], ecx
.text:00005C5A                 mov     eax, [ebp+var_4]
.text:00005C5D                 mov     ecx, [eax]
.text:00005C5F                 mov     edx, [ebp+arg_0]
.text:00005C62                 lea     eax, [ecx+edx*4]
.text:00005C65                 mov     esp, ebp
.text:00005C67                 pop     ebp
.text:00005C68                 retn    4
.text:00005C68 ??A?$CRecordVector@I@@QBEABII@Z endp
.text:00005C68
.text:00005C68 ; ---------------------------------------------------------------------------
.text:00005C6B                 align 4
.text:00005C6B _text           ends
.text:00005C6B
.text:00005C6C ; ===========================================================================
.text:00005C6C
.text:00005C6C ; Segment type: Pure code
.text:00005C6C ; Segment permissions: Read/Execute
.text:00005C6C _text           segment para public 'CODE' use32
.text:00005C6C                 assume cs:_text
.text:00005C6C                 ;org 5C6Ch
.text:00005C6C ; COMDAT (pick any)
.text:00005C6C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005C6C
.text:00005C6C ; =============== S U B R O U T I N E =======================================
.text:00005C6C
.text:00005C6C ; Attributes: bp-based frame
.text:00005C6C
.text:00005C6C ; public: unsigned int & __thiscall CRecordVector<unsigned int>::operator[](unsigned int)
.text:00005C6C                 public ??A?$CRecordVector@I@@QAEAAII@Z
.text:00005C6C ??A?$CRecordVector@I@@QAEAAII@Z proc near
.text:00005C6C                                         ; CODE XREF: NArchive::N7z::CEncoder::InitBindConv(void)+DDp
.text:00005C6C                                         ; NArchive::N7z::CEncoder::InitBindConv(void)+F4p ...
.text:00005C6C
.text:00005C6C var_4           = dword ptr -4
.text:00005C6C arg_0           = dword ptr  8
.text:00005C6C
.text:00005C6C                 push    ebp
.text:00005C6D                 mov     ebp, esp
.text:00005C6F                 push    ecx
.text:00005C70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C77                 mov     [ebp+var_4], ecx
.text:00005C7A                 mov     eax, [ebp+var_4]
.text:00005C7D                 mov     ecx, [eax]
.text:00005C7F                 mov     edx, [ebp+arg_0]
.text:00005C82                 lea     eax, [ecx+edx*4]
.text:00005C85                 mov     esp, ebp
.text:00005C87                 pop     ebp
.text:00005C88                 retn    4
.text:00005C88 ??A?$CRecordVector@I@@QAEAAII@Z endp
.text:00005C88
.text:00005C88 ; ---------------------------------------------------------------------------
.text:00005C8B                 align 4
.text:00005C8B _text           ends
.text:00005C8B
.text:00005C8C ; ===========================================================================
.text:00005C8C
.text:00005C8C ; Segment type: Pure code
.text:00005C8C ; Segment permissions: Read/Execute
.text:00005C8C _text           segment para public 'CODE' use32
.text:00005C8C                 assume cs:_text
.text:00005C8C                 ;org 5C8Ch
.text:00005C8C ; COMDAT (pick any)
.text:00005C8C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005C8C
.text:00005C8C ; =============== S U B R O U T I N E =======================================
.text:00005C8C
.text:00005C8C ; Attributes: bp-based frame
.text:00005C8C
.text:00005C8C ; public: void __thiscall CBuffer<unsigned char>::Free(void)
.text:00005C8C                 public ?Free@?$CBuffer@E@@QAEXXZ
.text:00005C8C ?Free@?$CBuffer@E@@QAEXXZ proc near     ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+52Dp
.text:00005C8C
.text:00005C8C var_8           = dword ptr -8
.text:00005C8C var_4           = dword ptr -4
.text:00005C8C
.text:00005C8C                 push    ebp
.text:00005C8D                 mov     ebp, esp
.text:00005C8F                 sub     esp, 8
.text:00005C92                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005C99                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005CA0                 mov     [ebp+var_4], ecx
.text:00005CA3                 mov     eax, [ebp+var_4]
.text:00005CA6                 cmp     dword ptr [eax], 0
.text:00005CA9                 jz      short loc_5CC8
.text:00005CAB                 mov     ecx, [ebp+var_4]
.text:00005CAE                 mov     edx, [ecx]
.text:00005CB0                 mov     [ebp+var_8], edx
.text:00005CB3                 mov     eax, [ebp+var_8]
.text:00005CB6                 push    eax             ; void *
.text:00005CB7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005CBC                 add     esp, 4
.text:00005CBF                 mov     ecx, [ebp+var_4]
.text:00005CC2                 mov     dword ptr [ecx], 0
.text:00005CC8
.text:00005CC8 loc_5CC8:                               ; CODE XREF: CBuffer<uchar>::Free(void)+1Dj
.text:00005CC8                 mov     edx, [ebp+var_4]
.text:00005CCB                 mov     dword ptr [edx+4], 0
.text:00005CD2                 add     esp, 8
.text:00005CD5                 cmp     ebp, esp
.text:00005CD7                 call    __RTC_CheckEsp
.text:00005CDC                 mov     esp, ebp
.text:00005CDE                 pop     ebp
.text:00005CDF                 retn
.text:00005CDF ?Free@?$CBuffer@E@@QAEXXZ endp
.text:00005CDF
.text:00005CDF _text           ends
.text:00005CDF
.text:00005CE0 ; ===========================================================================
.text:00005CE0
.text:00005CE0 ; Segment type: Pure code
.text:00005CE0 ; Segment permissions: Read/Execute
.text:00005CE0 _text           segment para public 'CODE' use32
.text:00005CE0                 assume cs:_text
.text:00005CE0                 ;org 5CE0h
.text:00005CE0 ; COMDAT (pick any)
.text:00005CE0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005CE0
.text:00005CE0 ; =============== S U B R O U T I N E =======================================
.text:00005CE0
.text:00005CE0 ; Attributes: bp-based frame
.text:00005CE0
.text:00005CE0 ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(unsigned int)
.text:00005CE0                 public ??0?$CBuffer@E@@QAE@I@Z
.text:00005CE0 ??0?$CBuffer@E@@QAE@I@Z proc near       ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+455p
.text:00005CE0
.text:00005CE0 var_8           = dword ptr -8
.text:00005CE0 var_4           = dword ptr -4
.text:00005CE0 arg_0           = dword ptr  8
.text:00005CE0
.text:00005CE0                 push    ebp
.text:00005CE1                 mov     ebp, esp
.text:00005CE3                 sub     esp, 8
.text:00005CE6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005CED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005CF4                 mov     [ebp+var_4], ecx
.text:00005CF7                 mov     eax, [ebp+var_4]
.text:00005CFA                 mov     dword ptr [eax], 0
.text:00005D00                 mov     ecx, [ebp+var_4]
.text:00005D03                 mov     dword ptr [ecx+4], 0
.text:00005D0A                 mov     edx, [ebp+arg_0]
.text:00005D0D                 push    edx             ; unsigned int
.text:00005D0E                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005D13                 add     esp, 4
.text:00005D16                 mov     [ebp+var_8], eax
.text:00005D19                 mov     eax, [ebp+var_4]
.text:00005D1C                 mov     ecx, [ebp+var_8]
.text:00005D1F                 mov     [eax], ecx
.text:00005D21                 mov     edx, [ebp+var_4]
.text:00005D24                 mov     eax, [ebp+arg_0]
.text:00005D27                 mov     [edx+4], eax
.text:00005D2A                 mov     eax, [ebp+var_4]
.text:00005D2D                 add     esp, 8
.text:00005D30                 cmp     ebp, esp
.text:00005D32                 call    __RTC_CheckEsp
.text:00005D37                 mov     esp, ebp
.text:00005D39                 pop     ebp
.text:00005D3A                 retn    4
.text:00005D3A ??0?$CBuffer@E@@QAE@I@Z endp
.text:00005D3A
.text:00005D3A ; ---------------------------------------------------------------------------
.text:00005D3D                 align 10h
.text:00005D3D _text           ends
.text:00005D3D
.text:00005D40 ; ===========================================================================
.text:00005D40
.text:00005D40 ; Segment type: Pure code
.text:00005D40 ; Segment permissions: Read/Execute
.text:00005D40 _text           segment para public 'CODE' use32
.text:00005D40                 assume cs:_text
.text:00005D40                 ;org 5D40h
.text:00005D40 ; COMDAT (pick any)
.text:00005D40                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005D40
.text:00005D40 ; =============== S U B R O U T I N E =======================================
.text:00005D40
.text:00005D40 ; Attributes: bp-based frame
.text:00005D40
.text:00005D40 ; public: __thiscall CBuffer<unsigned char>::~CBuffer<unsigned char>(void)
.text:00005D40                 public ??1?$CBuffer@E@@QAE@XZ
.text:00005D40 ??1?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+519p
.text:00005D40                                         ; NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+554p ...
.text:00005D40
.text:00005D40 var_8           = dword ptr -8
.text:00005D40 var_4           = dword ptr -4
.text:00005D40
.text:00005D40                 push    ebp
.text:00005D41                 mov     ebp, esp
.text:00005D43                 sub     esp, 8
.text:00005D46                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005D4D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D54                 mov     [ebp+var_4], ecx
.text:00005D57                 mov     eax, [ebp+var_4]
.text:00005D5A                 mov     ecx, [eax]
.text:00005D5C                 mov     [ebp+var_8], ecx
.text:00005D5F                 mov     edx, [ebp+var_8]
.text:00005D62                 push    edx             ; void *
.text:00005D63                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005D68                 add     esp, 4
.text:00005D6B                 add     esp, 8
.text:00005D6E                 cmp     ebp, esp
.text:00005D70                 call    __RTC_CheckEsp
.text:00005D75                 mov     esp, ebp
.text:00005D77                 pop     ebp
.text:00005D78                 retn
.text:00005D78 ??1?$CBuffer@E@@QAE@XZ endp
.text:00005D78
.text:00005D78 ; ---------------------------------------------------------------------------
.text:00005D79                 align 4
.text:00005D79 _text           ends
.text:00005D79
.text:00005D7C ; ===========================================================================
.text:00005D7C
.text:00005D7C ; Segment type: Pure code
.text:00005D7C ; Segment permissions: Read/Execute
.text:00005D7C _text           segment para public 'CODE' use32
.text:00005D7C                 assume cs:_text
.text:00005D7C                 ;org 5D7Ch
.text:00005D7C ; COMDAT (pick any)
.text:00005D7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005D7C
.text:00005D7C ; =============== S U B R O U T I N E =======================================
.text:00005D7C
.text:00005D7C ; Attributes: bp-based frame
.text:00005D7C
.text:00005D7C ; public: __thiscall CBuffer<unsigned char>::operator unsigned char *(void)
.text:00005D7C                 public ??B?$CBuffer@E@@QAEPAEXZ
.text:00005D7C ??B?$CBuffer@E@@QAEPAEXZ proc near      ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+499p
.text:00005D7C                                         ; NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+4B1p ...
.text:00005D7C
.text:00005D7C var_4           = dword ptr -4
.text:00005D7C
.text:00005D7C                 push    ebp
.text:00005D7D                 mov     ebp, esp
.text:00005D7F                 push    ecx
.text:00005D80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D87                 mov     [ebp+var_4], ecx
.text:00005D8A                 mov     eax, [ebp+var_4]
.text:00005D8D                 mov     eax, [eax]
.text:00005D8F                 mov     esp, ebp
.text:00005D91                 pop     ebp
.text:00005D92                 retn
.text:00005D92 ??B?$CBuffer@E@@QAEPAEXZ endp
.text:00005D92
.text:00005D92 ; ---------------------------------------------------------------------------
.text:00005D93                 align 4
.text:00005D93 _text           ends
.text:00005D93
.text:00005D94 ; ===========================================================================
.text:00005D94
.text:00005D94 ; Segment type: Pure code
.text:00005D94 ; Segment permissions: Read/Execute
.text:00005D94 _text           segment para public 'CODE' use32
.text:00005D94                 assume cs:_text
.text:00005D94                 ;org 5D94h
.text:00005D94 ; COMDAT (pick any)
.text:00005D94                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005D94
.text:00005D94 ; =============== S U B R O U T I N E =======================================
.text:00005D94
.text:00005D94 ; Attributes: bp-based frame
.text:00005D94
.text:00005D94 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::CMyComPtr<struct ICompressProgressInfo>(void)
.text:00005D94                 public ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
.text:00005D94 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
.text:00005D94                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+AFp
.text:00005D94                                         ; NArchive::N7z::CMtEncMultiProgress::CMtEncMultiProgress(void)+4Fp
.text:00005D94
.text:00005D94 var_4           = dword ptr -4
.text:00005D94
.text:00005D94                 push    ebp
.text:00005D95                 mov     ebp, esp
.text:00005D97                 push    ecx
.text:00005D98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D9F                 mov     [ebp+var_4], ecx
.text:00005DA2                 mov     eax, [ebp+var_4]
.text:00005DA5                 mov     dword ptr [eax], 0
.text:00005DAB                 mov     eax, [ebp+var_4]
.text:00005DAE                 mov     esp, ebp
.text:00005DB0                 pop     ebp
.text:00005DB1                 retn
.text:00005DB1 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ endp
.text:00005DB1
.text:00005DB1 ; ---------------------------------------------------------------------------
.text:00005DB2                 align 4
.text:00005DB2 _text           ends
.text:00005DB2
.text:00005DB4 ; ===========================================================================
.text:00005DB4
.text:00005DB4 ; Segment type: Pure code
.text:00005DB4 ; Segment permissions: Read/Execute
.text:00005DB4 _text           segment para public 'CODE' use32
.text:00005DB4                 assume cs:_text
.text:00005DB4                 ;org 5DB4h
.text:00005DB4 ; COMDAT (pick any)
.text:00005DB4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005DB4
.text:00005DB4 ; =============== S U B R O U T I N E =======================================
.text:00005DB4
.text:00005DB4 ; Attributes: bp-based frame
.text:00005DB4
.text:00005DB4 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::~CMyComPtr<struct ICompressProgressInfo>(void)
.text:00005DB4                 public ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
.text:00005DB4 ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
.text:00005DB4                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+8D9p
.text:00005DB4                                         ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+9DDp ...
.text:00005DB4
.text:00005DB4 var_4           = dword ptr -4
.text:00005DB4
.text:00005DB4                 push    ebp
.text:00005DB5                 mov     ebp, esp
.text:00005DB7                 push    ecx
.text:00005DB8                 push    esi
.text:00005DB9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005DC0                 mov     [ebp+var_4], ecx
.text:00005DC3                 mov     eax, [ebp+var_4]
.text:00005DC6                 cmp     dword ptr [eax], 0
.text:00005DC9                 jz      short loc_5DE6
.text:00005DCB                 mov     ecx, [ebp+var_4]
.text:00005DCE                 mov     edx, [ecx]
.text:00005DD0                 mov     eax, [ebp+var_4]
.text:00005DD3                 mov     ecx, [eax]
.text:00005DD5                 mov     edx, [edx]
.text:00005DD7                 mov     esi, esp
.text:00005DD9                 push    ecx
.text:00005DDA                 mov     eax, [edx+8]
.text:00005DDD                 call    eax
.text:00005DDF                 cmp     esi, esp
.text:00005DE1                 call    __RTC_CheckEsp
.text:00005DE6
.text:00005DE6 loc_5DE6:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)+15j
.text:00005DE6                 pop     esi
.text:00005DE7                 add     esp, 4
.text:00005DEA                 cmp     ebp, esp
.text:00005DEC                 call    __RTC_CheckEsp
.text:00005DF1                 mov     esp, ebp
.text:00005DF3                 pop     ebp
.text:00005DF4                 retn
.text:00005DF4 ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ endp
.text:00005DF4
.text:00005DF4 ; ---------------------------------------------------------------------------
.text:00005DF5                 align 4
.text:00005DF5 _text           ends
.text:00005DF5
.text:00005DF8 ; ===========================================================================
.text:00005DF8
.text:00005DF8 ; Segment type: Pure code
.text:00005DF8 ; Segment permissions: Read/Execute
.text:00005DF8 _text           segment para public 'CODE' use32
.text:00005DF8                 assume cs:_text
.text:00005DF8                 ;org 5DF8h
.text:00005DF8 ; COMDAT (pick any)
.text:00005DF8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005DF8
.text:00005DF8 ; =============== S U B R O U T I N E =======================================
.text:00005DF8
.text:00005DF8 ; Attributes: bp-based frame
.text:00005DF8
.text:00005DF8 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::operator struct ICompressProgressInfo *(void)const
.text:00005DF8                 public ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
.text:00005DF8 ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
.text:00005DF8                                         ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+50p
.text:00005DF8                                         ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+7FBp ...
.text:00005DF8
.text:00005DF8 var_4           = dword ptr -4
.text:00005DF8
.text:00005DF8                 push    ebp
.text:00005DF9                 mov     ebp, esp
.text:00005DFB                 push    ecx
.text:00005DFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005E03                 mov     [ebp+var_4], ecx
.text:00005E06                 mov     eax, [ebp+var_4]
.text:00005E09                 mov     eax, [eax]
.text:00005E0B                 mov     esp, ebp
.text:00005E0D                 pop     ebp
.text:00005E0E                 retn
.text:00005E0E ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ endp
.text:00005E0E
.text:00005E0E ; ---------------------------------------------------------------------------
.text:00005E0F                 align 10h
.text:00005E0F _text           ends
.text:00005E0F
.text:00005E10 ; ===========================================================================
.text:00005E10
.text:00005E10 ; Segment type: Pure code
.text:00005E10 ; Segment permissions: Read/Execute
.text:00005E10 _text           segment para public 'CODE' use32
.text:00005E10                 assume cs:_text
.text:00005E10                 ;org 5E10h
.text:00005E10 ; COMDAT (pick any)
.text:00005E10                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005E10
.text:00005E10 ; =============== S U B R O U T I N E =======================================
.text:00005E10
.text:00005E10 ; Attributes: bp-based frame
.text:00005E10
.text:00005E10 ; public: struct ICompressProgressInfo * __thiscall CMyComPtr<struct ICompressProgressInfo>::operator->(void)const
.text:00005E10                 public ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
.text:00005E10 ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
.text:00005E10                                         ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+5Fp
.text:00005E10
.text:00005E10 var_4           = dword ptr -4
.text:00005E10
.text:00005E10                 push    ebp
.text:00005E11                 mov     ebp, esp
.text:00005E13                 push    ecx
.text:00005E14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005E1B                 mov     [ebp+var_4], ecx
.text:00005E1E                 mov     eax, [ebp+var_4]
.text:00005E21                 mov     eax, [eax]
.text:00005E23                 mov     esp, ebp
.text:00005E25                 pop     ebp
.text:00005E26                 retn
.text:00005E26 ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ endp
.text:00005E26
.text:00005E26 ; ---------------------------------------------------------------------------
.text:00005E27                 align 4
.text:00005E27 _text           ends
.text:00005E27
.text:00005E28 ; ===========================================================================
.text:00005E28
.text:00005E28 ; Segment type: Pure code
.text:00005E28 ; Segment permissions: Read/Execute
.text:00005E28 _text           segment para public 'CODE' use32
.text:00005E28                 assume cs:_text
.text:00005E28                 ;org 5E28h
.text:00005E28 ; COMDAT (pick any)
.text:00005E28                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005E28
.text:00005E28 ; =============== S U B R O U T I N E =======================================
.text:00005E28
.text:00005E28 ; Attributes: bp-based frame
.text:00005E28
.text:00005E28 ; public: struct ICompressProgressInfo * __thiscall CMyComPtr<struct ICompressProgressInfo>::operator=(struct ICompressProgressInfo *)
.text:00005E28                 public ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z
.text:00005E28 ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z proc near
.text:00005E28                                         ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::Init(ICompressProgressInfo *)+18p
.text:00005E28                                         ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+612p
.text:00005E28
.text:00005E28 var_4           = dword ptr -4
.text:00005E28 arg_0           = dword ptr  8
.text:00005E28
.text:00005E28                 push    ebp
.text:00005E29                 mov     ebp, esp
.text:00005E2B                 push    ecx
.text:00005E2C                 push    esi
.text:00005E2D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005E34                 mov     [ebp+var_4], ecx
.text:00005E37                 cmp     [ebp+arg_0], 0
.text:00005E3B                 jz      short loc_5E54
.text:00005E3D                 mov     eax, [ebp+arg_0]
.text:00005E40                 mov     ecx, [eax]
.text:00005E42                 mov     esi, esp
.text:00005E44                 mov     edx, [ebp+arg_0]
.text:00005E47                 push    edx
.text:00005E48                 mov     eax, [ecx+4]
.text:00005E4B                 call    eax
.text:00005E4D                 cmp     esi, esp
.text:00005E4F                 call    __RTC_CheckEsp
.text:00005E54
.text:00005E54 loc_5E54:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::operator=(ICompressProgressInfo *)+13j
.text:00005E54                 mov     ecx, [ebp+var_4]
.text:00005E57                 cmp     dword ptr [ecx], 0
.text:00005E5A                 jz      short loc_5E77
.text:00005E5C                 mov     edx, [ebp+var_4]
.text:00005E5F                 mov     eax, [edx]
.text:00005E61                 mov     ecx, [ebp+var_4]
.text:00005E64                 mov     edx, [ecx]
.text:00005E66                 mov     eax, [eax]
.text:00005E68                 mov     esi, esp
.text:00005E6A                 push    edx
.text:00005E6B                 mov     ecx, [eax+8]
.text:00005E6E                 call    ecx
.text:00005E70                 cmp     esi, esp
.text:00005E72                 call    __RTC_CheckEsp
.text:00005E77
.text:00005E77 loc_5E77:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::operator=(ICompressProgressInfo *)+32j
.text:00005E77                 mov     edx, [ebp+var_4]
.text:00005E7A                 mov     eax, [ebp+arg_0]
.text:00005E7D                 mov     [edx], eax
.text:00005E7F                 mov     eax, [ebp+arg_0]
.text:00005E82                 pop     esi
.text:00005E83                 add     esp, 4
.text:00005E86                 cmp     ebp, esp
.text:00005E88                 call    __RTC_CheckEsp
.text:00005E8D                 mov     esp, ebp
.text:00005E8F                 pop     ebp
.text:00005E90                 retn    4
.text:00005E90 ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z endp
.text:00005E90
.text:00005E90 ; ---------------------------------------------------------------------------
.text:00005E93                 align 4
.text:00005E93 _text           ends
.text:00005E93
.text:00005E94 ; ===========================================================================
.text:00005E94
.text:00005E94 ; Segment type: Pure code
.text:00005E94 ; Segment permissions: Read/Execute
.text:00005E94 _text           segment para public 'CODE' use32
.text:00005E94                 assume cs:_text
.text:00005E94                 ;org 5E94h
.text:00005E94 ; COMDAT (pick any)
.text:00005E94                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005E94
.text:00005E94 ; =============== S U B R O U T I N E =======================================
.text:00005E94
.text:00005E94 ; Attributes: bp-based frame
.text:00005E94
.text:00005E94 ; public: __thiscall CMyComPtr<struct IUnknown>::CMyComPtr<struct IUnknown>(void)
.text:00005E94                 public ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ
.text:00005E94 ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ proc near
.text:00005E94                                         ; CODE XREF: NArchive::N7z::CEncoder::CEncoder(NArchive::N7z::CCompressionMethodMode const &)+3Cp
.text:00005E94
.text:00005E94 var_4           = dword ptr -4
.text:00005E94
.text:00005E94                 push    ebp
.text:00005E95                 mov     ebp, esp
.text:00005E97                 push    ecx
.text:00005E98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005E9F                 mov     [ebp+var_4], ecx
.text:00005EA2                 mov     eax, [ebp+var_4]
.text:00005EA5                 mov     dword ptr [eax], 0
.text:00005EAB                 mov     eax, [ebp+var_4]
.text:00005EAE                 mov     esp, ebp
.text:00005EB0                 pop     ebp
.text:00005EB1                 retn
.text:00005EB1 ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ endp
.text:00005EB1
.text:00005EB1 ; ---------------------------------------------------------------------------
.text:00005EB2                 align 4
.text:00005EB2 _text           ends
.text:00005EB2
.text:00005EB4 ; ===========================================================================
.text:00005EB4
.text:00005EB4 ; Segment type: Pure code
.text:00005EB4 ; Segment permissions: Read/Execute
.text:00005EB4 _text           segment para public 'CODE' use32
.text:00005EB4                 assume cs:_text
.text:00005EB4                 ;org 5EB4h
.text:00005EB4 ; COMDAT (pick any)
.text:00005EB4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005EB4
.text:00005EB4 ; =============== S U B R O U T I N E =======================================
.text:00005EB4
.text:00005EB4 ; Attributes: bp-based frame
.text:00005EB4
.text:00005EB4 ; public: __thiscall CMyComPtr<struct IUnknown>::CMyComPtr<struct IUnknown>(struct IUnknown *)
.text:00005EB4                 public ??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z
.text:00005EB4 ??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z proc near
.text:00005EB4                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+305p
.text:00005EB4
.text:00005EB4 var_4           = dword ptr -4
.text:00005EB4 arg_0           = dword ptr  8
.text:00005EB4
.text:00005EB4                 push    ebp
.text:00005EB5                 mov     ebp, esp
.text:00005EB7                 push    ecx
.text:00005EB8                 push    esi
.text:00005EB9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005EC0                 mov     [ebp+var_4], ecx
.text:00005EC3                 mov     eax, [ebp+var_4]
.text:00005EC6                 mov     ecx, [ebp+arg_0]
.text:00005EC9                 mov     [eax], ecx
.text:00005ECB                 cmp     [ebp+arg_0], 0
.text:00005ECF                 jz      short loc_5EE8
.text:00005ED1                 mov     edx, [ebp+arg_0]
.text:00005ED4                 mov     eax, [edx]
.text:00005ED6                 mov     esi, esp
.text:00005ED8                 mov     ecx, [ebp+arg_0]
.text:00005EDB                 push    ecx
.text:00005EDC                 mov     edx, [eax+4]
.text:00005EDF                 call    edx
.text:00005EE1                 cmp     esi, esp
.text:00005EE3                 call    __RTC_CheckEsp
.text:00005EE8
.text:00005EE8 loc_5EE8:                               ; CODE XREF: CMyComPtr<IUnknown>::CMyComPtr<IUnknown>(IUnknown *)+1Bj
.text:00005EE8                 mov     eax, [ebp+var_4]
.text:00005EEB                 pop     esi
.text:00005EEC                 add     esp, 4
.text:00005EEF                 cmp     ebp, esp
.text:00005EF1                 call    __RTC_CheckEsp
.text:00005EF6                 mov     esp, ebp
.text:00005EF8                 pop     ebp
.text:00005EF9                 retn    4
.text:00005EF9 ??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z endp
.text:00005EF9
.text:00005EF9 _text           ends
.text:00005EF9
.text:00005EFC ; ===========================================================================
.text:00005EFC
.text:00005EFC ; Segment type: Pure code
.text:00005EFC ; Segment permissions: Read/Execute
.text:00005EFC _text           segment para public 'CODE' use32
.text:00005EFC                 assume cs:_text
.text:00005EFC                 ;org 5EFCh
.text:00005EFC ; COMDAT (pick any)
.text:00005EFC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005EFC
.text:00005EFC ; =============== S U B R O U T I N E =======================================
.text:00005EFC
.text:00005EFC ; Attributes: bp-based frame
.text:00005EFC
.text:00005EFC ; public: __thiscall CMyComPtr<struct IUnknown>::~CMyComPtr<struct IUnknown>(void)
.text:00005EFC                 public ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
.text:00005EFC ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ proc near
.text:00005EFC                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+393p
.text:00005EFC                                         ; NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+3EDp ...
.text:00005EFC
.text:00005EFC var_4           = dword ptr -4
.text:00005EFC
.text:00005EFC                 push    ebp
.text:00005EFD                 mov     ebp, esp
.text:00005EFF                 push    ecx
.text:00005F00                 push    esi
.text:00005F01                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F08                 mov     [ebp+var_4], ecx
.text:00005F0B                 mov     eax, [ebp+var_4]
.text:00005F0E                 cmp     dword ptr [eax], 0
.text:00005F11                 jz      short loc_5F2E
.text:00005F13                 mov     ecx, [ebp+var_4]
.text:00005F16                 mov     edx, [ecx]
.text:00005F18                 mov     eax, [ebp+var_4]
.text:00005F1B                 mov     ecx, [eax]
.text:00005F1D                 mov     edx, [edx]
.text:00005F1F                 mov     esi, esp
.text:00005F21                 push    ecx
.text:00005F22                 mov     eax, [edx+8]
.text:00005F25                 call    eax
.text:00005F27                 cmp     esi, esp
.text:00005F29                 call    __RTC_CheckEsp
.text:00005F2E
.text:00005F2E loc_5F2E:                               ; CODE XREF: CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)+15j
.text:00005F2E                 pop     esi
.text:00005F2F                 add     esp, 4
.text:00005F32                 cmp     ebp, esp
.text:00005F34                 call    __RTC_CheckEsp
.text:00005F39                 mov     esp, ebp
.text:00005F3B                 pop     ebp
.text:00005F3C                 retn
.text:00005F3C ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ endp
.text:00005F3C
.text:00005F3C ; ---------------------------------------------------------------------------
.text:00005F3D                 align 10h
.text:00005F3D _text           ends
.text:00005F3D
.text:00005F40 ; ===========================================================================
.text:00005F40
.text:00005F40 ; Segment type: Pure code
.text:00005F40 ; Segment permissions: Read/Execute
.text:00005F40 _text           segment para public 'CODE' use32
.text:00005F40                 assume cs:_text
.text:00005F40                 ;org 5F40h
.text:00005F40 ; COMDAT (pick any)
.text:00005F40                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005F40
.text:00005F40 ; =============== S U B R O U T I N E =======================================
.text:00005F40
.text:00005F40 ; Attributes: bp-based frame
.text:00005F40
.text:00005F40 ; public: __thiscall CMyComPtr<struct IUnknown>::operator struct IUnknown *(void)const
.text:00005F40                 public ??B?$CMyComPtr@UIUnknown@@@@QBEPAUIUnknown@@XZ
.text:00005F40 ??B?$CMyComPtr@UIUnknown@@@@QBEPAUIUnknown@@XZ proc near
.text:00005F40                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+3C1p
.text:00005F40
.text:00005F40 var_4           = dword ptr -4
.text:00005F40
.text:00005F40                 push    ebp
.text:00005F41                 mov     ebp, esp
.text:00005F43                 push    ecx
.text:00005F44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F4B                 mov     [ebp+var_4], ecx
.text:00005F4E                 mov     eax, [ebp+var_4]
.text:00005F51                 mov     eax, [eax]
.text:00005F53                 mov     esp, ebp
.text:00005F55                 pop     ebp
.text:00005F56                 retn
.text:00005F56 ??B?$CMyComPtr@UIUnknown@@@@QBEPAUIUnknown@@XZ endp
.text:00005F56
.text:00005F56 ; ---------------------------------------------------------------------------
.text:00005F57                 align 4
.text:00005F57 _text           ends
.text:00005F57
.text:00005F58 ; ===========================================================================
.text:00005F58
.text:00005F58 ; Segment type: Pure code
.text:00005F58 ; Segment permissions: Read/Execute
.text:00005F58 _text           segment para public 'CODE' use32
.text:00005F58                 assume cs:_text
.text:00005F58                 ;org 5F58h
.text:00005F58 ; COMDAT (pick any)
.text:00005F58                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005F58
.text:00005F58 ; =============== S U B R O U T I N E =======================================
.text:00005F58
.text:00005F58 ; Attributes: bp-based frame
.text:00005F58
.text:00005F58 ; public: struct IUnknown * __thiscall CMyComPtr<struct IUnknown>::operator=(struct IUnknown *)
.text:00005F58                 public ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z
.text:00005F58 ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z proc near
.text:00005F58                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+BFp
.text:00005F58                                         ; NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+171p
.text:00005F58
.text:00005F58 var_4           = dword ptr -4
.text:00005F58 arg_0           = dword ptr  8
.text:00005F58
.text:00005F58                 push    ebp
.text:00005F59                 mov     ebp, esp
.text:00005F5B                 push    ecx
.text:00005F5C                 push    esi
.text:00005F5D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F64                 mov     [ebp+var_4], ecx
.text:00005F67                 cmp     [ebp+arg_0], 0
.text:00005F6B                 jz      short loc_5F84
.text:00005F6D                 mov     eax, [ebp+arg_0]
.text:00005F70                 mov     ecx, [eax]
.text:00005F72                 mov     esi, esp
.text:00005F74                 mov     edx, [ebp+arg_0]
.text:00005F77                 push    edx
.text:00005F78                 mov     eax, [ecx+4]
.text:00005F7B                 call    eax
.text:00005F7D                 cmp     esi, esp
.text:00005F7F                 call    __RTC_CheckEsp
.text:00005F84
.text:00005F84 loc_5F84:                               ; CODE XREF: CMyComPtr<IUnknown>::operator=(IUnknown *)+13j
.text:00005F84                 mov     ecx, [ebp+var_4]
.text:00005F87                 cmp     dword ptr [ecx], 0
.text:00005F8A                 jz      short loc_5FA7
.text:00005F8C                 mov     edx, [ebp+var_4]
.text:00005F8F                 mov     eax, [edx]
.text:00005F91                 mov     ecx, [ebp+var_4]
.text:00005F94                 mov     edx, [ecx]
.text:00005F96                 mov     eax, [eax]
.text:00005F98                 mov     esi, esp
.text:00005F9A                 push    edx
.text:00005F9B                 mov     ecx, [eax+8]
.text:00005F9E                 call    ecx
.text:00005FA0                 cmp     esi, esp
.text:00005FA2                 call    __RTC_CheckEsp
.text:00005FA7
.text:00005FA7 loc_5FA7:                               ; CODE XREF: CMyComPtr<IUnknown>::operator=(IUnknown *)+32j
.text:00005FA7                 mov     edx, [ebp+var_4]
.text:00005FAA                 mov     eax, [ebp+arg_0]
.text:00005FAD                 mov     [edx], eax
.text:00005FAF                 mov     eax, [ebp+arg_0]
.text:00005FB2                 pop     esi
.text:00005FB3                 add     esp, 4
.text:00005FB6                 cmp     ebp, esp
.text:00005FB8                 call    __RTC_CheckEsp
.text:00005FBD                 mov     esp, ebp
.text:00005FBF                 pop     ebp
.text:00005FC0                 retn    4
.text:00005FC0 ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z endp
.text:00005FC0
.text:00005FC0 ; ---------------------------------------------------------------------------
.text:00005FC3                 align 4
.text:00005FC3 _text           ends
.text:00005FC3
.text:00005FC4 ; ===========================================================================
.text:00005FC4
.text:00005FC4 ; Segment type: Pure code
.text:00005FC4 ; Segment permissions: Read/Execute
.text:00005FC4 _text           segment para public 'CODE' use32
.text:00005FC4                 assume cs:_text
.text:00005FC4                 ;org 5FC4h
.text:00005FC4 ; COMDAT (pick any)
.text:00005FC4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005FC4
.text:00005FC4 ; =============== S U B R O U T I N E =======================================
.text:00005FC4
.text:00005FC4 ; Attributes: bp-based frame
.text:00005FC4
.text:00005FC4 ; public: bool __thiscall CMyComPtr<struct IUnknown>::operator!(void)const
.text:00005FC4                 public ??7?$CMyComPtr@UIUnknown@@@@QBE_NXZ
.text:00005FC4 ??7?$CMyComPtr@UIUnknown@@@@QBE_NXZ proc near
.text:00005FC4                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+60p
.text:00005FC4
.text:00005FC4 var_4           = dword ptr -4
.text:00005FC4
.text:00005FC4                 push    ebp
.text:00005FC5                 mov     ebp, esp
.text:00005FC7                 push    ecx
.text:00005FC8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005FCF                 mov     [ebp+var_4], ecx
.text:00005FD2                 mov     eax, [ebp+var_4]
.text:00005FD5                 xor     ecx, ecx
.text:00005FD7                 cmp     dword ptr [eax], 0
.text:00005FDA                 setz    cl
.text:00005FDD                 mov     al, cl
.text:00005FDF                 mov     esp, ebp
.text:00005FE1                 pop     ebp
.text:00005FE2                 retn
.text:00005FE2 ??7?$CMyComPtr@UIUnknown@@@@QBE_NXZ endp
.text:00005FE2
.text:00005FE2 ; ---------------------------------------------------------------------------
.text:00005FE3                 align 4
.text:00005FE3 _text           ends
.text:00005FE3
.text:00005FE4 ; ===========================================================================
.text:00005FE4
.text:00005FE4 ; Segment type: Pure code
.text:00005FE4 ; Segment permissions: Read/Execute
.text:00005FE4 _text           segment para public 'CODE' use32
.text:00005FE4                 assume cs:_text
.text:00005FE4                 ;org 5FE4h
.text:00005FE4 ; COMDAT (pick any)
.text:00005FE4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005FE4
.text:00005FE4 ; =============== S U B R O U T I N E =======================================
.text:00005FE4
.text:00005FE4 ; Attributes: bp-based frame
.text:00005FE4
.text:00005FE4 ; public: unsigned int __thiscall CObjectVector<struct CProp>::Size(void)const
.text:00005FE4                 public ?Size@?$CObjectVector@UCProp@@@@QBEIXZ
.text:00005FE4 ?Size@?$CObjectVector@UCProp@@@@QBEIXZ proc near
.text:00005FE4                                         ; CODE XREF: CProps::AreThereNonOptionalProps(void)+2Cp
.text:00005FE4                                         ; CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+51p
.text:00005FE4
.text:00005FE4 var_4           = dword ptr -4
.text:00005FE4
.text:00005FE4                 push    ebp
.text:00005FE5                 mov     ebp, esp
.text:00005FE7                 push    ecx
.text:00005FE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005FEF                 mov     [ebp+var_4], ecx
.text:00005FF2                 mov     ecx, [ebp+var_4]
.text:00005FF5                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005FFA                 add     esp, 4
.text:00005FFD                 cmp     ebp, esp
.text:00005FFF                 call    __RTC_CheckEsp
.text:00006004                 mov     esp, ebp
.text:00006006                 pop     ebp
.text:00006007                 retn
.text:00006007 ?Size@?$CObjectVector@UCProp@@@@QBEIXZ endp
.text:00006007
.text:00006007 _text           ends
.text:00006007
.text:00006008 ; ===========================================================================
.text:00006008
.text:00006008 ; Segment type: Pure code
.text:00006008 ; Segment permissions: Read/Execute
.text:00006008 _text           segment para public 'CODE' use32
.text:00006008                 assume cs:_text
.text:00006008                 ;org 6008h
.text:00006008 ; COMDAT (pick any)
.text:00006008                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006008
.text:00006008 ; =============== S U B R O U T I N E =======================================
.text:00006008
.text:00006008 ; Attributes: bp-based frame
.text:00006008
.text:00006008 ; public: __thiscall CObjectVector<struct CProp>::CObjectVector<struct CProp>(void)
.text:00006008                 public ??0?$CObjectVector@UCProp@@@@QAE@XZ
.text:00006008 ??0?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:00006008                                         ; CODE XREF: CProps::CProps(void)+11p
.text:00006008
.text:00006008 var_4           = dword ptr -4
.text:00006008
.text:00006008                 push    ebp
.text:00006009                 mov     ebp, esp
.text:0000600B                 push    ecx
.text:0000600C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006013                 mov     [ebp+var_4], ecx
.text:00006016                 mov     ecx, [ebp+var_4]
.text:00006019                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000601E                 mov     eax, [ebp+var_4]
.text:00006021                 add     esp, 4
.text:00006024                 cmp     ebp, esp
.text:00006026                 call    __RTC_CheckEsp
.text:0000602B                 mov     esp, ebp
.text:0000602D                 pop     ebp
.text:0000602E                 retn
.text:0000602E ??0?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:0000602E
.text:0000602E ; ---------------------------------------------------------------------------
.text:0000602F                 align 10h
.text:0000602F _text           ends
.text:0000602F
.text:00006030 ; ===========================================================================
.text:00006030
.text:00006030 ; Segment type: Pure code
.text:00006030 ; Segment permissions: Read/Execute
.text:00006030 _text           segment para public 'CODE' use32
.text:00006030                 assume cs:_text
.text:00006030                 ;org 6030h
.text:00006030 ; COMDAT (pick any)
.text:00006030                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006030
.text:00006030 ; =============== S U B R O U T I N E =======================================
.text:00006030
.text:00006030 ; Attributes: bp-based frame
.text:00006030
.text:00006030 ; public: struct CProp const & __thiscall CObjectVector<struct CProp>::operator[](unsigned int)const
.text:00006030                 public ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z
.text:00006030 ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z proc near
.text:00006030                                         ; CODE XREF: CProps::AreThereNonOptionalProps(void)+3Dp
.text:00006030                                         ; CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+9Dp
.text:00006030
.text:00006030 var_4           = dword ptr -4
.text:00006030 arg_0           = dword ptr  8
.text:00006030
.text:00006030                 push    ebp
.text:00006031                 mov     ebp, esp
.text:00006033                 push    ecx
.text:00006034                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000603B                 mov     [ebp+var_4], ecx
.text:0000603E                 mov     eax, [ebp+arg_0]
.text:00006041                 push    eax
.text:00006042                 mov     ecx, [ebp+var_4]
.text:00006045                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000604A                 mov     eax, [eax]
.text:0000604C                 add     esp, 4
.text:0000604F                 cmp     ebp, esp
.text:00006051                 call    __RTC_CheckEsp
.text:00006056                 mov     esp, ebp
.text:00006058                 pop     ebp
.text:00006059                 retn    4
.text:00006059 ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z endp
.text:00006059
.text:00006059 _text           ends
.text:00006059
.text:0000605C ; ===========================================================================
.text:0000605C
.text:0000605C ; Segment type: Pure code
.text:0000605C ; Segment permissions: Read/Execute
.text:0000605C _text           segment para public 'CODE' use32
.text:0000605C                 assume cs:_text
.text:0000605C                 ;org 605Ch
.text:0000605C ; COMDAT (pick any)
.text:0000605C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000605C
.text:0000605C ; =============== S U B R O U T I N E =======================================
.text:0000605C
.text:0000605C ; Attributes: bp-based frame
.text:0000605C
.text:0000605C ; public: __thiscall CObjectVector<struct CProp>::~CObjectVector<struct CProp>(void)
.text:0000605C                 public ??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:0000605C ??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:0000605C                                         ; CODE XREF: CProps::~CProps(void)+11p
.text:0000605C
.text:0000605C var_20          = dword ptr -20h
.text:0000605C var_1C          = dword ptr -1Ch
.text:0000605C var_18          = dword ptr -18h
.text:0000605C var_14          = dword ptr -14h
.text:0000605C var_10          = dword ptr -10h
.text:0000605C var_C           = dword ptr -0Ch
.text:0000605C var_4           = dword ptr -4
.text:0000605C
.text:0000605C                 push    ebp
.text:0000605D                 mov     ebp, esp
.text:0000605F                 push    0FFFFFFFFh
.text:00006061                 push    offset __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:00006066                 mov     eax, large fs:0
.text:0000606C                 push    eax
.text:0000606D                 sub     esp, 14h
.text:00006070                 mov     eax, 0CCCCCCCCh
.text:00006075                 mov     [ebp+var_20], eax
.text:00006078                 mov     [ebp+var_1C], eax
.text:0000607B                 mov     [ebp+var_18], eax
.text:0000607E                 mov     [ebp+var_14], eax
.text:00006081                 mov     [ebp+var_10], eax
.text:00006084                 mov     eax, dword ptr ds:___security_cookie
.text:00006089                 xor     eax, ebp
.text:0000608B                 push    eax
.text:0000608C                 lea     eax, [ebp+var_C]
.text:0000608F                 mov     large fs:0, eax
.text:00006095                 mov     [ebp+var_10], ecx
.text:00006098                 mov     [ebp+var_4], 0
.text:0000609F                 mov     ecx, [ebp+var_10]
.text:000060A2                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000060A7                 mov     [ebp+var_14], eax
.text:000060AA
.text:000060AA loc_60AA:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void):loc_60ECj
.text:000060AA                 cmp     [ebp+var_14], 0
.text:000060AE                 jz      short loc_60EE
.text:000060B0                 mov     eax, [ebp+var_14]
.text:000060B3                 sub     eax, 1
.text:000060B6                 mov     [ebp+var_14], eax
.text:000060B9                 mov     ecx, [ebp+var_14]
.text:000060BC                 push    ecx
.text:000060BD                 mov     ecx, [ebp+var_10]
.text:000060C0                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000060C5                 mov     edx, [eax]
.text:000060C7                 mov     [ebp+var_1C], edx
.text:000060CA                 mov     eax, [ebp+var_1C]
.text:000060CD                 mov     [ebp+var_18], eax
.text:000060D0                 cmp     [ebp+var_18], 0
.text:000060D4                 jz      short loc_60E5
.text:000060D6                 push    1
.text:000060D8                 mov     ecx, [ebp+var_18]
.text:000060DB                 call    ??_GCProp@@QAEPAXI@Z ; CProp::`scalar deleting destructor'(uint)
.text:000060E0                 mov     [ebp+var_20], eax
.text:000060E3                 jmp     short loc_60EC
.text:000060E5 ; ---------------------------------------------------------------------------
.text:000060E5
.text:000060E5 loc_60E5:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+78j
.text:000060E5                 mov     [ebp+var_20], 0
.text:000060EC
.text:000060EC loc_60EC:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+87j
.text:000060EC                 jmp     short loc_60AA
.text:000060EE ; ---------------------------------------------------------------------------
.text:000060EE
.text:000060EE loc_60EE:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+52j
.text:000060EE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000060F5                 mov     ecx, [ebp+var_10]
.text:000060F8                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000060FD                 mov     ecx, [ebp+var_C]
.text:00006100                 mov     large fs:0, ecx
.text:00006107                 pop     ecx
.text:00006108                 add     esp, 20h
.text:0000610B                 cmp     ebp, esp
.text:0000610D                 call    __RTC_CheckEsp
.text:00006112                 mov     esp, ebp
.text:00006114                 pop     ebp
.text:00006115                 retn
.text:00006115 ??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:00006115
.text:00006115 ; ---------------------------------------------------------------------------
.text:00006116                 align 4
.text:00006116 _text           ends
.text:00006116
.text$x:00006118 ; ===========================================================================
.text$x:00006118
.text$x:00006118 ; Segment type: Pure code
.text$x:00006118 ; Segment permissions: Read/Execute
.text$x:00006118 _text$x         segment para public 'CODE' use32
.text$x:00006118                 assume cs:_text$x
.text$x:00006118                 ;org 6118h
.text$x:00006118 ; COMDAT (pick associative to section at 605C)
.text$x:00006118                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00006118
.text$x:00006118 ; =============== S U B R O U T I N E =======================================
.text$x:00006118
.text$x:00006118
.text$x:00006118 __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 proc near
.text$x:00006118                                         ; DATA XREF: .xdata$x:00006140o
.text$x:00006118                 mov     ecx, [ebp-10h]
.text$x:0000611B                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000611B __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 endp
.text$x:0000611B
.text$x:00006120
.text$x:00006120 ; =============== S U B R O U T I N E =======================================
.text$x:00006120
.text$x:00006120
.text$x:00006120 __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text$x:00006120                                         ; DATA XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+5o
.text$x:00006120
.text$x:00006120 arg_4           = dword ptr  8
.text$x:00006120
.text$x:00006120                 mov     edx, [esp+arg_4]
.text$x:00006124                 lea     eax, [edx+0Ch]
.text$x:00006127                 mov     ecx, [edx-18h]
.text$x:0000612A                 xor     ecx, eax
.text$x:0000612C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006131                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text$x:00006136                 jmp     ___CxxFrameHandler3
.text$x:00006136 __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text$x:00006136
.text$x:00006136 ; ---------------------------------------------------------------------------
.text$x:0000613B                 align 4
.text$x:0000613B _text$x         ends
.text$x:0000613B
.xdata$x:0000613C ; ===========================================================================
.xdata$x:0000613C
.xdata$x:0000613C ; Segment type: Pure data
.xdata$x:0000613C ; Segment permissions: Read
.xdata$x:0000613C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000613C                 assume cs:_xdata$x
.xdata$x:0000613C                 ;org 613Ch
.xdata$x:0000613C ; COMDAT (pick associative to section at 605C)
.xdata$x:0000613C __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ db 0FFh
.xdata$x:0000613C                                         ; DATA XREF: .xdata$x:0000614Co
.xdata$x:0000613D                 db 0FFh
.xdata$x:0000613E                 db 0FFh
.xdata$x:0000613F                 db 0FFh
.xdata$x:00006140                 dd offset __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
.xdata$x:00006144 __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ db  22h ; "
.xdata$x:00006144                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ+11o
.xdata$x:00006145                 db    5
.xdata$x:00006146                 db  93h ; ô
.xdata$x:00006147                 db  19h
.xdata$x:00006148                 db    1
.xdata$x:00006149                 db    0
.xdata$x:0000614A                 db    0
.xdata$x:0000614B                 db    0
.xdata$x:0000614C                 dd offset __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
.xdata$x:00006150                 db    0
.xdata$x:00006151                 db    0
.xdata$x:00006152                 db    0
.xdata$x:00006153                 db    0
.xdata$x:00006154                 db    0
.xdata$x:00006155                 db    0
.xdata$x:00006156                 db    0
.xdata$x:00006157                 db    0
.xdata$x:00006158                 db    0
.xdata$x:00006159                 db    0
.xdata$x:0000615A                 db    0
.xdata$x:0000615B                 db    0
.xdata$x:0000615C                 db    0
.xdata$x:0000615D                 db    0
.xdata$x:0000615E                 db    0
.xdata$x:0000615F                 db    0
.xdata$x:00006160                 db    0
.xdata$x:00006161                 db    0
.xdata$x:00006162                 db    0
.xdata$x:00006163                 db    0
.xdata$x:00006164                 db    1
.xdata$x:00006165                 db    0
.xdata$x:00006166                 db    0
.xdata$x:00006167                 db    0
.xdata$x:00006167 _xdata$x        ends
.xdata$x:00006167
.text:00006168 ; ===========================================================================
.text:00006168
.text:00006168 ; Segment type: Pure code
.text:00006168 ; Segment permissions: Read/Execute
.text:00006168 _text           segment para public 'CODE' use32
.text:00006168                 assume cs:_text
.text:00006168                 ;org 6168h
.text:00006168 ; COMDAT (pick any)
.text:00006168                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006168
.text:00006168 ; =============== S U B R O U T I N E =======================================
.text:00006168
.text:00006168 ; Attributes: bp-based frame
.text:00006168
.text:00006168 ; public: unsigned int __thiscall CObjectVector<struct NArchive::N7z::CMethodFull>::Size(void)const
.text:00006168                 public ?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ
.text:00006168 ?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ proc near
.text:00006168                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+1EFp
.text:00006168                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+151p ...
.text:00006168
.text:00006168 var_4           = dword ptr -4
.text:00006168
.text:00006168                 push    ebp
.text:00006169                 mov     ebp, esp
.text:0000616B                 push    ecx
.text:0000616C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006173                 mov     [ebp+var_4], ecx
.text:00006176                 mov     ecx, [ebp+var_4]
.text:00006179                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000617E                 add     esp, 4
.text:00006181                 cmp     ebp, esp
.text:00006183                 call    __RTC_CheckEsp
.text:00006188                 mov     esp, ebp
.text:0000618A                 pop     ebp
.text:0000618B                 retn
.text:0000618B ?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ endp
.text:0000618B
.text:0000618B _text           ends
.text:0000618B
.text:0000618C ; ===========================================================================
.text:0000618C
.text:0000618C ; Segment type: Pure code
.text:0000618C ; Segment permissions: Read/Execute
.text:0000618C _text           segment para public 'CODE' use32
.text:0000618C                 assume cs:_text
.text:0000618C                 ;org 618Ch
.text:0000618C ; COMDAT (pick any)
.text:0000618C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000618C
.text:0000618C ; =============== S U B R O U T I N E =======================================
.text:0000618C
.text:0000618C ; Attributes: bp-based frame
.text:0000618C
.text:0000618C ; public: bool __thiscall CObjectVector<struct NArchive::N7z::CMethodFull>::IsEmpty(void)const
.text:0000618C                 public ?IsEmpty@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBE_NXZ
.text:0000618C ?IsEmpty@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBE_NXZ proc near
.text:0000618C                                         ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+5Bp
.text:0000618C                                         ; NArchive::N7z::CCompressionMethodMode::IsEmpty(void)+1Ap
.text:0000618C
.text:0000618C var_4           = dword ptr -4
.text:0000618C
.text:0000618C                 push    ebp
.text:0000618D                 mov     ebp, esp
.text:0000618F                 push    ecx
.text:00006190                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006197                 mov     [ebp+var_4], ecx
.text:0000619A                 mov     ecx, [ebp+var_4]
.text:0000619D                 call    ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ; CRecordVector<void *>::IsEmpty(void)
.text:000061A2                 add     esp, 4
.text:000061A5                 cmp     ebp, esp
.text:000061A7                 call    __RTC_CheckEsp
.text:000061AC                 mov     esp, ebp
.text:000061AE                 pop     ebp
.text:000061AF                 retn
.text:000061AF ?IsEmpty@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBE_NXZ endp
.text:000061AF
.text:000061AF _text           ends
.text:000061AF
.text:000061B0 ; ===========================================================================
.text:000061B0
.text:000061B0 ; Segment type: Pure code
.text:000061B0 ; Segment permissions: Read/Execute
.text:000061B0 _text           segment para public 'CODE' use32
.text:000061B0                 assume cs:_text
.text:000061B0                 ;org 61B0h
.text:000061B0 ; COMDAT (pick any)
.text:000061B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000061B0
.text:000061B0 ; =============== S U B R O U T I N E =======================================
.text:000061B0
.text:000061B0 ; Attributes: bp-based frame
.text:000061B0
.text:000061B0 ; public: __thiscall CObjectVector<struct NArchive::N7z::CMethodFull>::CObjectVector<struct NArchive::N7z::CMethodFull>(void)
.text:000061B0                 public ??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
.text:000061B0 ??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ proc near
.text:000061B0                                         ; CODE XREF: NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(void)+30p
.text:000061B0
.text:000061B0 var_4           = dword ptr -4
.text:000061B0
.text:000061B0                 push    ebp
.text:000061B1                 mov     ebp, esp
.text:000061B3                 push    ecx
.text:000061B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000061BB                 mov     [ebp+var_4], ecx
.text:000061BE                 mov     ecx, [ebp+var_4]
.text:000061C1                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:000061C6                 mov     eax, [ebp+var_4]
.text:000061C9                 add     esp, 4
.text:000061CC                 cmp     ebp, esp
.text:000061CE                 call    __RTC_CheckEsp
.text:000061D3                 mov     esp, ebp
.text:000061D5                 pop     ebp
.text:000061D6                 retn
.text:000061D6 ??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ endp
.text:000061D6
.text:000061D6 ; ---------------------------------------------------------------------------
.text:000061D7                 align 4
.text:000061D7 _text           ends
.text:000061D7
.text:000061D8 ; ===========================================================================
.text:000061D8
.text:000061D8 ; Segment type: Pure code
.text:000061D8 ; Segment permissions: Read/Execute
.text:000061D8 _text           segment para public 'CODE' use32
.text:000061D8                 assume cs:_text
.text:000061D8                 ;org 61D8h
.text:000061D8 ; COMDAT (pick any)
.text:000061D8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000061D8
.text:000061D8 ; =============== S U B R O U T I N E =======================================
.text:000061D8
.text:000061D8 ; Attributes: bp-based frame
.text:000061D8
.text:000061D8 ; public: class CObjectVector<struct NArchive::N7z::CMethodFull> & __thiscall CObjectVector<struct NArchive::N7z::CMethodFull>::operator=(class CObjectVector<struct NArchive::N7z::CMethodFull> const &)
.text:000061D8                 public ??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z
.text:000061D8 ??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z proc near
.text:000061D8                                         ; CODE XREF: NArchive::N7z::CCompressionMethodMode::operator=(NArchive::N7z::CCompressionMethodMode const &)+15p
.text:000061D8
.text:000061D8 var_24          = dword ptr -24h
.text:000061D8 var_20          = dword ptr -20h
.text:000061D8 var_1C          = dword ptr -1Ch
.text:000061D8 var_18          = dword ptr -18h
.text:000061D8 var_14          = dword ptr -14h
.text:000061D8 var_10          = dword ptr -10h
.text:000061D8 var_C           = dword ptr -0Ch
.text:000061D8 var_4           = dword ptr -4
.text:000061D8 arg_0           = dword ptr  8
.text:000061D8
.text:000061D8                 push    ebp
.text:000061D9                 mov     ebp, esp
.text:000061DB                 push    0FFFFFFFFh
.text:000061DD                 push    offset __ehhandler$??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z
.text:000061E2                 mov     eax, large fs:0
.text:000061E8                 push    eax
.text:000061E9                 sub     esp, 18h
.text:000061EC                 mov     eax, 0CCCCCCCCh
.text:000061F1                 mov     [ebp+var_24], eax
.text:000061F4                 mov     [ebp+var_20], eax
.text:000061F7                 mov     [ebp+var_1C], eax
.text:000061FA                 mov     [ebp+var_18], eax
.text:000061FD                 mov     [ebp+var_14], eax
.text:00006200                 mov     [ebp+var_10], eax
.text:00006203                 mov     eax, dword ptr ds:___security_cookie
.text:00006208                 xor     eax, ebp
.text:0000620A                 push    eax
.text:0000620B                 lea     eax, [ebp+var_C]
.text:0000620E                 mov     large fs:0, eax
.text:00006214                 mov     [ebp+var_10], ecx
.text:00006217                 mov     eax, [ebp+arg_0]
.text:0000621A                 cmp     eax, [ebp+var_10]
.text:0000621D                 jnz     short loc_6227
.text:0000621F                 mov     eax, [ebp+var_10]
.text:00006222                 jmp     loc_62B9
.text:00006227 ; ---------------------------------------------------------------------------
.text:00006227
.text:00006227 loc_6227:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::operator=(CObjectVector<NArchive::N7z::CMethodFull> const &)+45j
.text:00006227                 mov     ecx, [ebp+var_10]
.text:0000622A                 call    ?Clear@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Clear(void)
.text:0000622F                 mov     ecx, [ebp+arg_0]
.text:00006232                 call    ?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size(void)
.text:00006237                 mov     [ebp+var_14], eax
.text:0000623A                 mov     ecx, [ebp+var_14]
.text:0000623D                 push    ecx
.text:0000623E                 mov     ecx, [ebp+var_10]
.text:00006241                 call    ?Reserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::Reserve(uint)
.text:00006246                 mov     [ebp+var_18], 0
.text:0000624D                 jmp     short loc_6258
.text:0000624F ; ---------------------------------------------------------------------------
.text:0000624F
.text:0000624F loc_624F:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::operator=(CObjectVector<NArchive::N7z::CMethodFull> const &)+DCj
.text:0000624F                 mov     edx, [ebp+var_18]
.text:00006252                 add     edx, 1
.text:00006255                 mov     [ebp+var_18], edx
.text:00006258
.text:00006258 loc_6258:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::operator=(CObjectVector<NArchive::N7z::CMethodFull> const &)+75j
.text:00006258                 mov     eax, [ebp+var_18]
.text:0000625B                 cmp     eax, [ebp+var_14]
.text:0000625E                 jnb     short loc_62B6
.text:00006260                 push    20h ; ' '       ; unsigned int
.text:00006262                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006267                 add     esp, 4
.text:0000626A                 mov     [ebp+var_20], eax
.text:0000626D                 mov     [ebp+var_4], 0
.text:00006274                 cmp     [ebp+var_20], 0
.text:00006278                 jz      short loc_6294
.text:0000627A                 mov     ecx, [ebp+var_18]
.text:0000627D                 push    ecx
.text:0000627E                 mov     ecx, [ebp+arg_0]
.text:00006281                 call    ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEABUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator[](uint)
.text:00006286                 push    eax             ; struct NArchive::N7z::CMethodFull *
.text:00006287                 mov     ecx, [ebp+var_20] ; this
.text:0000628A                 call    ??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z ; NArchive::N7z::CMethodFull::CMethodFull(NArchive::N7z::CMethodFull const &)
.text:0000628F                 mov     [ebp+var_24], eax
.text:00006292                 jmp     short loc_629B
.text:00006294 ; ---------------------------------------------------------------------------
.text:00006294
.text:00006294 loc_6294:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::operator=(CObjectVector<NArchive::N7z::CMethodFull> const &)+A0j
.text:00006294                 mov     [ebp+var_24], 0
.text:0000629B
.text:0000629B loc_629B:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::operator=(CObjectVector<NArchive::N7z::CMethodFull> const &)+BAj
.text:0000629B                 mov     edx, [ebp+var_24]
.text:0000629E                 mov     [ebp+var_1C], edx
.text:000062A1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000062A8                 mov     eax, [ebp+var_1C]
.text:000062AB                 push    eax
.text:000062AC                 mov     ecx, [ebp+var_10]
.text:000062AF                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:000062B4                 jmp     short loc_624F
.text:000062B6 ; ---------------------------------------------------------------------------
.text:000062B6
.text:000062B6 loc_62B6:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::operator=(CObjectVector<NArchive::N7z::CMethodFull> const &)+86j
.text:000062B6                 mov     eax, [ebp+var_10]
.text:000062B9
.text:000062B9 loc_62B9:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::operator=(CObjectVector<NArchive::N7z::CMethodFull> const &)+4Aj
.text:000062B9                 mov     ecx, [ebp+var_C]
.text:000062BC                 mov     large fs:0, ecx
.text:000062C3                 pop     ecx
.text:000062C4                 add     esp, 24h
.text:000062C7                 cmp     ebp, esp
.text:000062C9                 call    __RTC_CheckEsp
.text:000062CE                 mov     esp, ebp
.text:000062D0                 pop     ebp
.text:000062D1                 retn    4
.text:000062D1 ??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z endp
.text:000062D1
.text:000062D1 _text           ends
.text:000062D1
.text$x:000062D4 ; ===========================================================================
.text$x:000062D4
.text$x:000062D4 ; Segment type: Pure code
.text$x:000062D4 ; Segment permissions: Read/Execute
.text$x:000062D4 _text$x         segment para public 'CODE' use32
.text$x:000062D4                 assume cs:_text$x
.text$x:000062D4                 ;org 62D4h
.text$x:000062D4 ; COMDAT (pick associative to section at 61D8)
.text$x:000062D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000062D4
.text$x:000062D4 ; =============== S U B R O U T I N E =======================================
.text$x:000062D4
.text$x:000062D4
.text$x:000062D4 __unwindfunclet$??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z$0 proc near
.text$x:000062D4                                         ; DATA XREF: .xdata$x:00006300o
.text$x:000062D4                 mov     eax, [ebp-20h]
.text$x:000062D7                 push    eax             ; void *
.text$x:000062D8                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000062DD                 pop     ecx
.text$x:000062DE                 retn
.text$x:000062DE __unwindfunclet$??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z$0 endp
.text$x:000062DE
.text$x:000062DF
.text$x:000062DF ; =============== S U B R O U T I N E =======================================
.text$x:000062DF
.text$x:000062DF
.text$x:000062DF __ehhandler$??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z proc near
.text$x:000062DF                                         ; DATA XREF: CObjectVector<NArchive::N7z::CMethodFull>::operator=(CObjectVector<NArchive::N7z::CMethodFull> const &)+5o
.text$x:000062DF
.text$x:000062DF arg_4           = dword ptr  8
.text$x:000062DF
.text$x:000062DF                 mov     edx, [esp+arg_4]
.text$x:000062E3                 lea     eax, [edx+0Ch]
.text$x:000062E6                 mov     ecx, [edx-1Ch]
.text$x:000062E9                 xor     ecx, eax
.text$x:000062EB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000062F0                 mov     eax, offset __ehfuncinfo$??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z
.text$x:000062F5                 jmp     ___CxxFrameHandler3
.text$x:000062F5 __ehhandler$??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z endp
.text$x:000062F5
.text$x:000062F5 ; ---------------------------------------------------------------------------
.text$x:000062FA                 align 4
.text$x:000062FA _text$x         ends
.text$x:000062FA
.xdata$x:000062FC ; ===========================================================================
.xdata$x:000062FC
.xdata$x:000062FC ; Segment type: Pure data
.xdata$x:000062FC ; Segment permissions: Read
.xdata$x:000062FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000062FC                 assume cs:_xdata$x
.xdata$x:000062FC                 ;org 62FCh
.xdata$x:000062FC ; COMDAT (pick associative to section at 61D8)
.xdata$x:000062FC __unwindtable$??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z db 0FFh
.xdata$x:000062FC                                         ; DATA XREF: .xdata$x:0000630Co
.xdata$x:000062FD                 db 0FFh
.xdata$x:000062FE                 db 0FFh
.xdata$x:000062FF                 db 0FFh
.xdata$x:00006300                 dd offset __unwindfunclet$??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z$0
.xdata$x:00006304 __ehfuncinfo$??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z db  22h ; "
.xdata$x:00006304                                         ; DATA XREF: __ehhandler$??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z+11o
.xdata$x:00006305                 db    5
.xdata$x:00006306                 db  93h ; ô
.xdata$x:00006307                 db  19h
.xdata$x:00006308                 db    1
.xdata$x:00006309                 db    0
.xdata$x:0000630A                 db    0
.xdata$x:0000630B                 db    0
.xdata$x:0000630C                 dd offset __unwindtable$??4?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAV0@ABV0@@Z
.xdata$x:00006310                 db    0
.xdata$x:00006311                 db    0
.xdata$x:00006312                 db    0
.xdata$x:00006313                 db    0
.xdata$x:00006314                 db    0
.xdata$x:00006315                 db    0
.xdata$x:00006316                 db    0
.xdata$x:00006317                 db    0
.xdata$x:00006318                 db    0
.xdata$x:00006319                 db    0
.xdata$x:0000631A                 db    0
.xdata$x:0000631B                 db    0
.xdata$x:0000631C                 db    0
.xdata$x:0000631D                 db    0
.xdata$x:0000631E                 db    0
.xdata$x:0000631F                 db    0
.xdata$x:00006320                 db    0
.xdata$x:00006321                 db    0
.xdata$x:00006322                 db    0
.xdata$x:00006323                 db    0
.xdata$x:00006324                 db    1
.xdata$x:00006325                 db    0
.xdata$x:00006326                 db    0
.xdata$x:00006327                 db    0
.xdata$x:00006327 _xdata$x        ends
.xdata$x:00006327
.text:00006328 ; ===========================================================================
.text:00006328
.text:00006328 ; Segment type: Pure code
.text:00006328 ; Segment permissions: Read/Execute
.text:00006328 _text           segment para public 'CODE' use32
.text:00006328                 assume cs:_text
.text:00006328                 ;org 6328h
.text:00006328 ; COMDAT (pick any)
.text:00006328                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006328
.text:00006328 ; =============== S U B R O U T I N E =======================================
.text:00006328
.text:00006328 ; Attributes: bp-based frame
.text:00006328
.text:00006328 ; public: struct NArchive::N7z::CMethodFull & __thiscall CObjectVector<struct NArchive::N7z::CMethodFull>::operator[](unsigned int)
.text:00006328                 public ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z
.text:00006328 ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z proc near
.text:00006328                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+207p
.text:00006328                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+169p ...
.text:00006328
.text:00006328 var_4           = dword ptr -4
.text:00006328 arg_0           = dword ptr  8
.text:00006328
.text:00006328                 push    ebp
.text:00006329                 mov     ebp, esp
.text:0000632B                 push    ecx
.text:0000632C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006333                 mov     [ebp+var_4], ecx
.text:00006336                 mov     eax, [ebp+arg_0]
.text:00006339                 push    eax
.text:0000633A                 mov     ecx, [ebp+var_4]
.text:0000633D                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00006342                 mov     eax, [eax]
.text:00006344                 add     esp, 4
.text:00006347                 cmp     ebp, esp
.text:00006349                 call    __RTC_CheckEsp
.text:0000634E                 mov     esp, ebp
.text:00006350                 pop     ebp
.text:00006351                 retn    4
.text:00006351 ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z endp
.text:00006351
.text:00006351 _text           ends
.text:00006351
.text:00006354 ; ===========================================================================
.text:00006354
.text:00006354 ; Segment type: Pure code
.text:00006354 ; Segment permissions: Read/Execute
.text:00006354 _text           segment para public 'CODE' use32
.text:00006354                 assume cs:_text
.text:00006354                 ;org 6354h
.text:00006354 ; COMDAT (pick any)
.text:00006354                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006354
.text:00006354 ; =============== S U B R O U T I N E =======================================
.text:00006354
.text:00006354 ; Attributes: bp-based frame
.text:00006354
.text:00006354 ; int __stdcall CObjectVector<NArchive::N7z::CMethodFull>::Add(struct NArchive::N7z::CMethodFull *)
.text:00006354                 public ?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z
.text:00006354 ?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z proc near
.text:00006354                                         ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+ECp
.text:00006354                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+54Dp
.text:00006354
.text:00006354 var_1C          = dword ptr -1Ch
.text:00006354 var_18          = dword ptr -18h
.text:00006354 var_14          = dword ptr -14h
.text:00006354 var_10          = dword ptr -10h
.text:00006354 var_C           = dword ptr -0Ch
.text:00006354 var_4           = dword ptr -4
.text:00006354 arg_0           = dword ptr  8
.text:00006354
.text:00006354                 push    ebp
.text:00006355                 mov     ebp, esp
.text:00006357                 push    0FFFFFFFFh
.text:00006359                 push    offset __ehhandler$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z
.text:0000635E                 mov     eax, large fs:0
.text:00006364                 push    eax
.text:00006365                 sub     esp, 10h
.text:00006368                 mov     eax, 0CCCCCCCCh
.text:0000636D                 mov     [ebp+var_1C], eax
.text:00006370                 mov     [ebp+var_18], eax
.text:00006373                 mov     [ebp+var_14], eax
.text:00006376                 mov     [ebp+var_10], eax
.text:00006379                 mov     eax, dword ptr ds:___security_cookie
.text:0000637E                 xor     eax, ebp
.text:00006380                 push    eax
.text:00006381                 lea     eax, [ebp+var_C]
.text:00006384                 mov     large fs:0, eax
.text:0000638A                 mov     [ebp+var_10], ecx
.text:0000638D                 push    20h ; ' '       ; unsigned int
.text:0000638F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006394                 add     esp, 4
.text:00006397                 mov     [ebp+var_18], eax
.text:0000639A                 mov     [ebp+var_4], 0
.text:000063A1                 cmp     [ebp+var_18], 0
.text:000063A5                 jz      short loc_63B8
.text:000063A7                 mov     eax, [ebp+arg_0]
.text:000063AA                 push    eax             ; struct NArchive::N7z::CMethodFull *
.text:000063AB                 mov     ecx, [ebp+var_18] ; this
.text:000063AE                 call    ??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z ; NArchive::N7z::CMethodFull::CMethodFull(NArchive::N7z::CMethodFull const &)
.text:000063B3                 mov     [ebp+var_1C], eax
.text:000063B6                 jmp     short loc_63BF
.text:000063B8 ; ---------------------------------------------------------------------------
.text:000063B8
.text:000063B8 loc_63B8:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::Add(NArchive::N7z::CMethodFull const &)+51j
.text:000063B8                 mov     [ebp+var_1C], 0
.text:000063BF
.text:000063BF loc_63BF:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::Add(NArchive::N7z::CMethodFull const &)+62j
.text:000063BF                 mov     ecx, [ebp+var_1C]
.text:000063C2                 mov     [ebp+var_14], ecx
.text:000063C5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000063CC                 mov     edx, [ebp+var_14]
.text:000063CF                 push    edx
.text:000063D0                 mov     ecx, [ebp+var_10]
.text:000063D3                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:000063D8                 mov     ecx, [ebp+var_C]
.text:000063DB                 mov     large fs:0, ecx
.text:000063E2                 pop     ecx
.text:000063E3                 add     esp, 1Ch
.text:000063E6                 cmp     ebp, esp
.text:000063E8                 call    __RTC_CheckEsp
.text:000063ED                 mov     esp, ebp
.text:000063EF                 pop     ebp
.text:000063F0                 retn    4
.text:000063F0 ?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z endp
.text:000063F0
.text:000063F0 ; ---------------------------------------------------------------------------
.text:000063F3                 align 4
.text:000063F3 _text           ends
.text:000063F3
.text$x:000063F4 ; ===========================================================================
.text$x:000063F4
.text$x:000063F4 ; Segment type: Pure code
.text$x:000063F4 ; Segment permissions: Read/Execute
.text$x:000063F4 _text$x         segment para public 'CODE' use32
.text$x:000063F4                 assume cs:_text$x
.text$x:000063F4                 ;org 63F4h
.text$x:000063F4 ; COMDAT (pick associative to section at 6354)
.text$x:000063F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000063F4
.text$x:000063F4 ; =============== S U B R O U T I N E =======================================
.text$x:000063F4
.text$x:000063F4
.text$x:000063F4 __unwindfunclet$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z$0 proc near
.text$x:000063F4                                         ; DATA XREF: .xdata$x:00006420o
.text$x:000063F4                 mov     eax, [ebp-18h]
.text$x:000063F7                 push    eax             ; void *
.text$x:000063F8                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000063FD                 pop     ecx
.text$x:000063FE                 retn
.text$x:000063FE __unwindfunclet$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z$0 endp
.text$x:000063FE
.text$x:000063FF
.text$x:000063FF ; =============== S U B R O U T I N E =======================================
.text$x:000063FF
.text$x:000063FF
.text$x:000063FF __ehhandler$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z proc near
.text$x:000063FF                                         ; DATA XREF: CObjectVector<NArchive::N7z::CMethodFull>::Add(NArchive::N7z::CMethodFull const &)+5o
.text$x:000063FF
.text$x:000063FF arg_4           = dword ptr  8
.text$x:000063FF
.text$x:000063FF                 mov     edx, [esp+arg_4]
.text$x:00006403                 lea     eax, [edx+0Ch]
.text$x:00006406                 mov     ecx, [edx-14h]
.text$x:00006409                 xor     ecx, eax
.text$x:0000640B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006410                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z
.text$x:00006415                 jmp     ___CxxFrameHandler3
.text$x:00006415 __ehhandler$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z endp
.text$x:00006415
.text$x:00006415 ; ---------------------------------------------------------------------------
.text$x:0000641A                 align 4
.text$x:0000641A _text$x         ends
.text$x:0000641A
.xdata$x:0000641C ; ===========================================================================
.xdata$x:0000641C
.xdata$x:0000641C ; Segment type: Pure data
.xdata$x:0000641C ; Segment permissions: Read
.xdata$x:0000641C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000641C                 assume cs:_xdata$x
.xdata$x:0000641C                 ;org 641Ch
.xdata$x:0000641C ; COMDAT (pick associative to section at 6354)
.xdata$x:0000641C __unwindtable$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z db 0FFh
.xdata$x:0000641C                                         ; DATA XREF: .xdata$x:0000642Co
.xdata$x:0000641D                 db 0FFh
.xdata$x:0000641E                 db 0FFh
.xdata$x:0000641F                 db 0FFh
.xdata$x:00006420                 dd offset __unwindfunclet$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z$0
.xdata$x:00006424 __ehfuncinfo$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z db  22h ; "
.xdata$x:00006424                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z+11o
.xdata$x:00006425                 db    5
.xdata$x:00006426                 db  93h ; ô
.xdata$x:00006427                 db  19h
.xdata$x:00006428                 db    1
.xdata$x:00006429                 db    0
.xdata$x:0000642A                 db    0
.xdata$x:0000642B                 db    0
.xdata$x:0000642C                 dd offset __unwindtable$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z
.xdata$x:00006430                 db    0
.xdata$x:00006431                 db    0
.xdata$x:00006432                 db    0
.xdata$x:00006433                 db    0
.xdata$x:00006434                 db    0
.xdata$x:00006435                 db    0
.xdata$x:00006436                 db    0
.xdata$x:00006437                 db    0
.xdata$x:00006438                 db    0
.xdata$x:00006439                 db    0
.xdata$x:0000643A                 db    0
.xdata$x:0000643B                 db    0
.xdata$x:0000643C                 db    0
.xdata$x:0000643D                 db    0
.xdata$x:0000643E                 db    0
.xdata$x:0000643F                 db    0
.xdata$x:00006440                 db    0
.xdata$x:00006441                 db    0
.xdata$x:00006442                 db    0
.xdata$x:00006443                 db    0
.xdata$x:00006444                 db    1
.xdata$x:00006445                 db    0
.xdata$x:00006446                 db    0
.xdata$x:00006447                 db    0
.xdata$x:00006447 _xdata$x        ends
.xdata$x:00006447
.text:00006448 ; ===========================================================================
.text:00006448
.text:00006448 ; Segment type: Pure code
.text:00006448 ; Segment permissions: Read/Execute
.text:00006448 _text           segment para public 'CODE' use32
.text:00006448                 assume cs:_text
.text:00006448                 ;org 6448h
.text:00006448 ; COMDAT (pick any)
.text:00006448                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006448
.text:00006448 ; =============== S U B R O U T I N E =======================================
.text:00006448
.text:00006448 ; Attributes: bp-based frame
.text:00006448
.text:00006448 ; public: __thiscall CObjectVector<struct NArchive::N7z::CMethodFull>::~CObjectVector<struct NArchive::N7z::CMethodFull>(void)
.text:00006448                 public ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
.text:00006448 ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ proc near
.text:00006448                                         ; CODE XREF: __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0+3j
.text:00006448                                         ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)+58p ...
.text:00006448
.text:00006448 var_20          = dword ptr -20h
.text:00006448 var_1C          = dword ptr -1Ch
.text:00006448 var_18          = dword ptr -18h
.text:00006448 var_14          = dword ptr -14h
.text:00006448 var_10          = dword ptr -10h
.text:00006448 var_C           = dword ptr -0Ch
.text:00006448 var_4           = dword ptr -4
.text:00006448
.text:00006448                 push    ebp
.text:00006449                 mov     ebp, esp
.text:0000644B                 push    0FFFFFFFFh
.text:0000644D                 push    offset __ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
.text:00006452                 mov     eax, large fs:0
.text:00006458                 push    eax
.text:00006459                 sub     esp, 14h
.text:0000645C                 mov     eax, 0CCCCCCCCh
.text:00006461                 mov     [ebp+var_20], eax
.text:00006464                 mov     [ebp+var_1C], eax
.text:00006467                 mov     [ebp+var_18], eax
.text:0000646A                 mov     [ebp+var_14], eax
.text:0000646D                 mov     [ebp+var_10], eax
.text:00006470                 mov     eax, dword ptr ds:___security_cookie
.text:00006475                 xor     eax, ebp
.text:00006477                 push    eax
.text:00006478                 lea     eax, [ebp+var_C]
.text:0000647B                 mov     large fs:0, eax
.text:00006481                 mov     [ebp+var_10], ecx
.text:00006484                 mov     [ebp+var_4], 0
.text:0000648B                 mov     ecx, [ebp+var_10]
.text:0000648E                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00006493                 mov     [ebp+var_14], eax
.text:00006496
.text:00006496 loc_6496:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void):loc_64D8j
.text:00006496                 cmp     [ebp+var_14], 0
.text:0000649A                 jz      short loc_64DA
.text:0000649C                 mov     eax, [ebp+var_14]
.text:0000649F                 sub     eax, 1
.text:000064A2                 mov     [ebp+var_14], eax
.text:000064A5                 mov     ecx, [ebp+var_14]
.text:000064A8                 push    ecx
.text:000064A9                 mov     ecx, [ebp+var_10]
.text:000064AC                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000064B1                 mov     edx, [eax]
.text:000064B3                 mov     [ebp+var_1C], edx
.text:000064B6                 mov     eax, [ebp+var_1C]
.text:000064B9                 mov     [ebp+var_18], eax
.text:000064BC                 cmp     [ebp+var_18], 0
.text:000064C0                 jz      short loc_64D1
.text:000064C2                 push    1
.text:000064C4                 mov     ecx, [ebp+var_18]
.text:000064C7                 call    ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CMethodFull::`scalar deleting destructor'(uint)
.text:000064CC                 mov     [ebp+var_20], eax
.text:000064CF                 jmp     short loc_64D8
.text:000064D1 ; ---------------------------------------------------------------------------
.text:000064D1
.text:000064D1 loc_64D1:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+78j
.text:000064D1                 mov     [ebp+var_20], 0
.text:000064D8
.text:000064D8 loc_64D8:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+87j
.text:000064D8                 jmp     short loc_6496
.text:000064DA ; ---------------------------------------------------------------------------
.text:000064DA
.text:000064DA loc_64DA:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+52j
.text:000064DA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000064E1                 mov     ecx, [ebp+var_10]
.text:000064E4                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000064E9                 mov     ecx, [ebp+var_C]
.text:000064EC                 mov     large fs:0, ecx
.text:000064F3                 pop     ecx
.text:000064F4                 add     esp, 20h
.text:000064F7                 cmp     ebp, esp
.text:000064F9                 call    __RTC_CheckEsp
.text:000064FE                 mov     esp, ebp
.text:00006500                 pop     ebp
.text:00006501                 retn
.text:00006501 ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ endp
.text:00006501
.text:00006501 ; ---------------------------------------------------------------------------
.text:00006502                 align 4
.text:00006502 _text           ends
.text:00006502
.text$x:00006504 ; ===========================================================================
.text$x:00006504
.text$x:00006504 ; Segment type: Pure code
.text$x:00006504 ; Segment permissions: Read/Execute
.text$x:00006504 _text$x         segment para public 'CODE' use32
.text$x:00006504                 assume cs:_text$x
.text$x:00006504                 ;org 6504h
.text$x:00006504 ; COMDAT (pick associative to section at 6448)
.text$x:00006504                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00006504
.text$x:00006504 ; =============== S U B R O U T I N E =======================================
.text$x:00006504
.text$x:00006504
.text$x:00006504 __unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0 proc near
.text$x:00006504                                         ; DATA XREF: .xdata$x:0000652Co
.text$x:00006504                 mov     ecx, [ebp-10h]
.text$x:00006507                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00006507 __unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0 endp
.text$x:00006507
.text$x:0000650C
.text$x:0000650C ; =============== S U B R O U T I N E =======================================
.text$x:0000650C
.text$x:0000650C
.text$x:0000650C __ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ proc near
.text$x:0000650C                                         ; DATA XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+5o
.text$x:0000650C
.text$x:0000650C arg_4           = dword ptr  8
.text$x:0000650C
.text$x:0000650C                 mov     edx, [esp+arg_4]
.text$x:00006510                 lea     eax, [edx+0Ch]
.text$x:00006513                 mov     ecx, [edx-18h]
.text$x:00006516                 xor     ecx, eax
.text$x:00006518                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000651D                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
.text$x:00006522                 jmp     ___CxxFrameHandler3
.text$x:00006522 __ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ endp
.text$x:00006522
.text$x:00006522 ; ---------------------------------------------------------------------------
.text$x:00006527                 align 4
.text$x:00006527 _text$x         ends
.text$x:00006527
.xdata$x:00006528 ; ===========================================================================
.xdata$x:00006528
.xdata$x:00006528 ; Segment type: Pure data
.xdata$x:00006528 ; Segment permissions: Read
.xdata$x:00006528 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006528                 assume cs:_xdata$x
.xdata$x:00006528                 ;org 6528h
.xdata$x:00006528 ; COMDAT (pick associative to section at 6448)
.xdata$x:00006528 __unwindtable$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:00006528                                         ; DATA XREF: .xdata$x:00006538o
.xdata$x:00006529                 db 0FFh
.xdata$x:0000652A                 db 0FFh
.xdata$x:0000652B                 db 0FFh
.xdata$x:0000652C                 dd offset __unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0
.xdata$x:00006530 __ehfuncinfo$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:00006530                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ+11o
.xdata$x:00006531                 db    5
.xdata$x:00006532                 db  93h ; ô
.xdata$x:00006533                 db  19h
.xdata$x:00006534                 db    1
.xdata$x:00006535                 db    0
.xdata$x:00006536                 db    0
.xdata$x:00006537                 db    0
.xdata$x:00006538                 dd offset __unwindtable$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
.xdata$x:0000653C                 db    0
.xdata$x:0000653D                 db    0
.xdata$x:0000653E                 db    0
.xdata$x:0000653F                 db    0
.xdata$x:00006540                 db    0
.xdata$x:00006541                 db    0
.xdata$x:00006542                 db    0
.xdata$x:00006543                 db    0
.xdata$x:00006544                 db    0
.xdata$x:00006545                 db    0
.xdata$x:00006546                 db    0
.xdata$x:00006547                 db    0
.xdata$x:00006548                 db    0
.xdata$x:00006549                 db    0
.xdata$x:0000654A                 db    0
.xdata$x:0000654B                 db    0
.xdata$x:0000654C                 db    0
.xdata$x:0000654D                 db    0
.xdata$x:0000654E                 db    0
.xdata$x:0000654F                 db    0
.xdata$x:00006550                 db    1
.xdata$x:00006551                 db    0
.xdata$x:00006552                 db    0
.xdata$x:00006553                 db    0
.xdata$x:00006553 _xdata$x        ends
.xdata$x:00006553
.text:00006554 ; ===========================================================================
.text:00006554
.text:00006554 ; Segment type: Pure code
.text:00006554 ; Segment permissions: Read/Execute
.text:00006554 _text           segment para public 'CODE' use32
.text:00006554                 assume cs:_text
.text:00006554                 ;org 6554h
.text:00006554 ; COMDAT (pick any)
.text:00006554                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006554
.text:00006554 ; =============== S U B R O U T I N E =======================================
.text:00006554
.text:00006554 ; Attributes: bp-based frame
.text:00006554
.text:00006554 ; public: __thiscall CRecordVector<struct NArchive::N7z::CBond2>::CRecordVector<struct NArchive::N7z::CBond2>(void)
.text:00006554                 public ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ
.text:00006554 ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ proc near
.text:00006554                                         ; CODE XREF: NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(void)+42p
.text:00006554
.text:00006554 var_4           = dword ptr -4
.text:00006554
.text:00006554                 push    ebp
.text:00006555                 mov     ebp, esp
.text:00006557                 push    ecx
.text:00006558                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000655F                 mov     [ebp+var_4], ecx
.text:00006562                 mov     eax, [ebp+var_4]
.text:00006565                 mov     dword ptr [eax], 0
.text:0000656B                 mov     ecx, [ebp+var_4]
.text:0000656E                 mov     dword ptr [ecx+4], 0
.text:00006575                 mov     edx, [ebp+var_4]
.text:00006578                 mov     dword ptr [edx+8], 0
.text:0000657F                 mov     eax, [ebp+var_4]
.text:00006582                 mov     esp, ebp
.text:00006584                 pop     ebp
.text:00006585                 retn
.text:00006585 ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ endp
.text:00006585
.text:00006585 ; ---------------------------------------------------------------------------
.text:00006586                 align 4
.text:00006586 _text           ends
.text:00006586
.text:00006588 ; ===========================================================================
.text:00006588
.text:00006588 ; Segment type: Pure code
.text:00006588 ; Segment permissions: Read/Execute
.text:00006588 _text           segment para public 'CODE' use32
.text:00006588                 assume cs:_text
.text:00006588                 ;org 6588h
.text:00006588 ; COMDAT (pick any)
.text:00006588                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006588
.text:00006588 ; =============== S U B R O U T I N E =======================================
.text:00006588
.text:00006588 ; Attributes: bp-based frame
.text:00006588
.text:00006588 ; public: unsigned int __thiscall CRecordVector<struct NArchive::N7z::CBond2>::Size(void)const
.text:00006588                 public ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ
.text:00006588 ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ proc near
.text:00006588                                         ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+253p
.text:00006588                                         ; CRecordVector<NArchive::N7z::CBond2>::operator=(CRecordVector<NArchive::N7z::CBond2> const &)+2Dp
.text:00006588
.text:00006588 var_4           = dword ptr -4
.text:00006588
.text:00006588                 push    ebp
.text:00006589                 mov     ebp, esp
.text:0000658B                 push    ecx
.text:0000658C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006593                 mov     [ebp+var_4], ecx
.text:00006596                 mov     eax, [ebp+var_4]
.text:00006599                 mov     eax, [eax+4]
.text:0000659C                 mov     esp, ebp
.text:0000659E                 pop     ebp
.text:0000659F                 retn
.text:0000659F ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ endp
.text:0000659F
.text:0000659F _text           ends
.text:0000659F
.text:000065A0 ; ===========================================================================
.text:000065A0
.text:000065A0 ; Segment type: Pure code
.text:000065A0 ; Segment permissions: Read/Execute
.text:000065A0 _text           segment para public 'CODE' use32
.text:000065A0                 assume cs:_text
.text:000065A0                 ;org 65A0h
.text:000065A0 ; COMDAT (pick any)
.text:000065A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000065A0
.text:000065A0 ; =============== S U B R O U T I N E =======================================
.text:000065A0
.text:000065A0 ; Attributes: bp-based frame
.text:000065A0
.text:000065A0 ; public: bool __thiscall CRecordVector<struct NArchive::N7z::CBond2>::IsEmpty(void)const
.text:000065A0                 public ?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ
.text:000065A0 ?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ proc near
.text:000065A0                                         ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+97p
.text:000065A0                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+180p ...
.text:000065A0
.text:000065A0 var_4           = dword ptr -4
.text:000065A0
.text:000065A0                 push    ebp
.text:000065A1                 mov     ebp, esp
.text:000065A3                 push    ecx
.text:000065A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000065AB                 mov     [ebp+var_4], ecx
.text:000065AE                 mov     eax, [ebp+var_4]
.text:000065B1                 xor     ecx, ecx
.text:000065B3                 cmp     dword ptr [eax+4], 0
.text:000065B7                 setz    cl
.text:000065BA                 mov     al, cl
.text:000065BC                 mov     esp, ebp
.text:000065BE                 pop     ebp
.text:000065BF                 retn
.text:000065BF ?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ endp
.text:000065BF
.text:000065BF _text           ends
.text:000065BF
.text:000065C0 ; ===========================================================================
.text:000065C0
.text:000065C0 ; Segment type: Pure code
.text:000065C0 ; Segment permissions: Read/Execute
.text:000065C0 _text           segment para public 'CODE' use32
.text:000065C0                 assume cs:_text
.text:000065C0                 ;org 65C0h
.text:000065C0 ; COMDAT (pick any)
.text:000065C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000065C0
.text:000065C0 ; =============== S U B R O U T I N E =======================================
.text:000065C0
.text:000065C0 ; Attributes: bp-based frame
.text:000065C0
.text:000065C0 ; public: __thiscall CRecordVector<struct NArchive::N7z::CBond2>::~CRecordVector<struct NArchive::N7z::CBond2>(void)
.text:000065C0                 public ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ
.text:000065C0 ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ proc near
.text:000065C0                                         ; CODE XREF: __unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1+6j
.text:000065C0                                         ; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode(void)+49p ...
.text:000065C0
.text:000065C0 var_8           = dword ptr -8
.text:000065C0 var_4           = dword ptr -4
.text:000065C0
.text:000065C0                 push    ebp
.text:000065C1                 mov     ebp, esp
.text:000065C3                 sub     esp, 8
.text:000065C6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000065CD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000065D4                 mov     [ebp+var_4], ecx
.text:000065D7                 mov     eax, [ebp+var_4]
.text:000065DA                 mov     ecx, [eax]
.text:000065DC                 mov     [ebp+var_8], ecx
.text:000065DF                 mov     edx, [ebp+var_8]
.text:000065E2                 push    edx             ; void *
.text:000065E3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000065E8                 add     esp, 4
.text:000065EB                 add     esp, 8
.text:000065EE                 cmp     ebp, esp
.text:000065F0                 call    __RTC_CheckEsp
.text:000065F5                 mov     esp, ebp
.text:000065F7                 pop     ebp
.text:000065F8                 retn
.text:000065F8 ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ endp
.text:000065F8
.text:000065F8 ; ---------------------------------------------------------------------------
.text:000065F9                 align 4
.text:000065F9 _text           ends
.text:000065F9
.text:000065FC ; ===========================================================================
.text:000065FC
.text:000065FC ; Segment type: Pure code
.text:000065FC ; Segment permissions: Read/Execute
.text:000065FC _text           segment para public 'CODE' use32
.text:000065FC                 assume cs:_text
.text:000065FC                 ;org 65FCh
.text:000065FC ; COMDAT (pick any)
.text:000065FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000065FC
.text:000065FC ; =============== S U B R O U T I N E =======================================
.text:000065FC
.text:000065FC ; Attributes: bp-based frame
.text:000065FC
.text:000065FC ; public: class CRecordVector<struct NArchive::N7z::CBond2> & __thiscall CRecordVector<struct NArchive::N7z::CBond2>::operator=(class CRecordVector<struct NArchive::N7z::CBond2> const &)
.text:000065FC                 public ??4?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAV0@ABV0@@Z
.text:000065FC ??4?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAV0@ABV0@@Z proc near
.text:000065FC                                         ; CODE XREF: NArchive::N7z::CCompressionMethodMode::operator=(NArchive::N7z::CCompressionMethodMode const &)+27p
.text:000065FC
.text:000065FC var_10          = dword ptr -10h
.text:000065FC var_C           = dword ptr -0Ch
.text:000065FC var_8           = dword ptr -8
.text:000065FC var_4           = dword ptr -4
.text:000065FC arg_0           = dword ptr  8
.text:000065FC
.text:000065FC                 push    ebp
.text:000065FD                 mov     ebp, esp
.text:000065FF                 sub     esp, 10h
.text:00006602                 mov     eax, 0CCCCCCCCh
.text:00006607                 mov     [ebp+var_10], eax
.text:0000660A                 mov     [ebp+var_C], eax
.text:0000660D                 mov     [ebp+var_8], eax
.text:00006610                 mov     [ebp+var_4], eax
.text:00006613                 mov     [ebp+var_4], ecx
.text:00006616                 mov     eax, [ebp+arg_0]
.text:00006619                 cmp     eax, [ebp+var_4]
.text:0000661C                 jnz     short loc_6626
.text:0000661E                 mov     eax, [ebp+var_4]
.text:00006621                 jmp     loc_66CA
.text:00006626 ; ---------------------------------------------------------------------------
.text:00006626
.text:00006626 loc_6626:                               ; CODE XREF: CRecordVector<NArchive::N7z::CBond2>::operator=(CRecordVector<NArchive::N7z::CBond2> const &)+20j
.text:00006626                 mov     ecx, [ebp+arg_0]
.text:00006629                 call    ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size(void)
.text:0000662E                 mov     [ebp+var_8], eax
.text:00006631                 mov     ecx, [ebp+var_4]
.text:00006634                 mov     edx, [ebp+var_8]
.text:00006637                 cmp     edx, [ecx+8]
.text:0000663A                 jbe     short loc_669D
.text:0000663C                 mov     eax, [ebp+var_4]
.text:0000663F                 mov     ecx, [eax]
.text:00006641                 mov     [ebp+var_C], ecx
.text:00006644                 mov     edx, [ebp+var_C]
.text:00006647                 push    edx             ; void *
.text:00006648                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000664D                 add     esp, 4
.text:00006650                 mov     eax, [ebp+var_4]
.text:00006653                 mov     dword ptr [eax+8], 0
.text:0000665A                 mov     ecx, [ebp+var_4]
.text:0000665D                 mov     dword ptr [ecx+4], 0
.text:00006664                 mov     edx, [ebp+var_4]
.text:00006667                 mov     dword ptr [edx], 0
.text:0000666D                 xor     ecx, ecx
.text:0000666F                 mov     eax, [ebp+var_8]
.text:00006672                 mov     edx, 0Ch
.text:00006677                 mul     edx
.text:00006679                 seto    cl
.text:0000667C                 neg     ecx
.text:0000667E                 or      ecx, eax
.text:00006680                 push    ecx             ; unsigned int
.text:00006681                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006686                 add     esp, 4
.text:00006689                 mov     [ebp+var_10], eax
.text:0000668C                 mov     eax, [ebp+var_4]
.text:0000668F                 mov     ecx, [ebp+var_10]
.text:00006692                 mov     [eax], ecx
.text:00006694                 mov     edx, [ebp+var_4]
.text:00006697                 mov     eax, [ebp+var_8]
.text:0000669A                 mov     [edx+8], eax
.text:0000669D
.text:0000669D loc_669D:                               ; CODE XREF: CRecordVector<NArchive::N7z::CBond2>::operator=(CRecordVector<NArchive::N7z::CBond2> const &)+3Ej
.text:0000669D                 mov     ecx, [ebp+var_4]
.text:000066A0                 mov     edx, [ebp+var_8]
.text:000066A3                 mov     [ecx+4], edx
.text:000066A6                 cmp     [ebp+var_8], 0
.text:000066AA                 jz      short loc_66C7
.text:000066AC                 mov     eax, [ebp+var_8]
.text:000066AF                 imul    eax, 0Ch
.text:000066B2                 push    eax             ; Size
.text:000066B3                 mov     ecx, [ebp+arg_0]
.text:000066B6                 mov     edx, [ecx]
.text:000066B8                 push    edx             ; Src
.text:000066B9                 mov     eax, [ebp+var_4]
.text:000066BC                 mov     ecx, [eax]
.text:000066BE                 push    ecx             ; Dst
.text:000066BF                 call    _memcpy
.text:000066C4                 add     esp, 0Ch
.text:000066C7
.text:000066C7 loc_66C7:                               ; CODE XREF: CRecordVector<NArchive::N7z::CBond2>::operator=(CRecordVector<NArchive::N7z::CBond2> const &)+AEj
.text:000066C7                 mov     eax, [ebp+var_4]
.text:000066CA
.text:000066CA loc_66CA:                               ; CODE XREF: CRecordVector<NArchive::N7z::CBond2>::operator=(CRecordVector<NArchive::N7z::CBond2> const &)+25j
.text:000066CA                 add     esp, 10h
.text:000066CD                 cmp     ebp, esp
.text:000066CF                 call    __RTC_CheckEsp
.text:000066D4                 mov     esp, ebp
.text:000066D6                 pop     ebp
.text:000066D7                 retn    4
.text:000066D7 ??4?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAV0@ABV0@@Z endp
.text:000066D7
.text:000066D7 ; ---------------------------------------------------------------------------
.text:000066DA                 align 4
.text:000066DA _text           ends
.text:000066DA
.text:000066DC ; ===========================================================================
.text:000066DC
.text:000066DC ; Segment type: Pure code
.text:000066DC ; Segment permissions: Read/Execute
.text:000066DC _text           segment para public 'CODE' use32
.text:000066DC                 assume cs:_text
.text:000066DC                 ;org 66DCh
.text:000066DC ; COMDAT (pick any)
.text:000066DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000066DC
.text:000066DC ; =============== S U B R O U T I N E =======================================
.text:000066DC
.text:000066DC ; Attributes: bp-based frame
.text:000066DC
.text:000066DC ; public: struct NArchive::N7z::CBond2 & __thiscall CRecordVector<struct NArchive::N7z::CBond2>::operator[](unsigned int)
.text:000066DC                 public ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z
.text:000066DC ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z proc near
.text:000066DC                                         ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+26Bp
.text:000066DC
.text:000066DC var_4           = dword ptr -4
.text:000066DC arg_0           = dword ptr  8
.text:000066DC
.text:000066DC                 push    ebp
.text:000066DD                 mov     ebp, esp
.text:000066DF                 push    ecx
.text:000066E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000066E7                 mov     [ebp+var_4], ecx
.text:000066EA                 mov     eax, [ebp+arg_0]
.text:000066ED                 imul    eax, 0Ch
.text:000066F0                 mov     ecx, [ebp+var_4]
.text:000066F3                 add     eax, [ecx]
.text:000066F5                 mov     esp, ebp
.text:000066F7                 pop     ebp
.text:000066F8                 retn    4
.text:000066F8 ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z endp
.text:000066F8
.text:000066F8 ; ---------------------------------------------------------------------------
.text:000066FB                 align 4
.text:000066FB _text           ends
.text:000066FB
.text:000066FC ; ===========================================================================
.text:000066FC
.text:000066FC ; Segment type: Pure code
.text:000066FC ; Segment permissions: Read/Execute
.text:000066FC _text           segment para public 'CODE' use32
.text:000066FC                 assume cs:_text
.text:000066FC                 ;org 66FCh
.text:000066FC ; COMDAT (pick any)
.text:000066FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000066FC
.text:000066FC ; =============== S U B R O U T I N E =======================================
.text:000066FC
.text:000066FC ; Attributes: bp-based frame
.text:000066FC
.text:000066FC ; public: __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>(void)
.text:000066FC                 public ??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ
.text:000066FC ??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ proc near
.text:000066FC                                         ; CODE XREF: NCoderMixer2::CBindInfo::CBindInfo(void)+30p
.text:000066FC
.text:000066FC var_4           = dword ptr -4
.text:000066FC
.text:000066FC                 push    ebp
.text:000066FD                 mov     ebp, esp
.text:000066FF                 push    ecx
.text:00006700                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006707                 mov     [ebp+var_4], ecx
.text:0000670A                 mov     eax, [ebp+var_4]
.text:0000670D                 mov     dword ptr [eax], 0
.text:00006713                 mov     ecx, [ebp+var_4]
.text:00006716                 mov     dword ptr [ecx+4], 0
.text:0000671D                 mov     edx, [ebp+var_4]
.text:00006720                 mov     dword ptr [edx+8], 0
.text:00006727                 mov     eax, [ebp+var_4]
.text:0000672A                 mov     esp, ebp
.text:0000672C                 pop     ebp
.text:0000672D                 retn
.text:0000672D ??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ endp
.text:0000672D
.text:0000672D ; ---------------------------------------------------------------------------
.text:0000672E                 align 10h
.text:0000672E _text           ends
.text:0000672E
.text:00006730 ; ===========================================================================
.text:00006730
.text:00006730 ; Segment type: Pure code
.text:00006730 ; Segment permissions: Read/Execute
.text:00006730 _text           segment para public 'CODE' use32
.text:00006730                 assume cs:_text
.text:00006730                 ;org 6730h
.text:00006730 ; COMDAT (pick any)
.text:00006730                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006730
.text:00006730 ; =============== S U B R O U T I N E =======================================
.text:00006730
.text:00006730 ; Attributes: bp-based frame
.text:00006730
.text:00006730 ; public: unsigned int __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::Size(void)const
.text:00006730                 public ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ
.text:00006730 ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ proc near
.text:00006730                                         ; CODE XREF: NArchive::N7z::CEncoder::InitBindConv(void)+2Fp
.text:00006730                                         ; NArchive::N7z::CEncoder::InitBindConv(void)+8Fp ...
.text:00006730
.text:00006730 var_4           = dword ptr -4
.text:00006730
.text:00006730                 push    ebp
.text:00006731                 mov     ebp, esp
.text:00006733                 push    ecx
.text:00006734                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000673B                 mov     [ebp+var_4], ecx
.text:0000673E                 mov     eax, [ebp+var_4]
.text:00006741                 mov     eax, [eax+4]
.text:00006744                 mov     esp, ebp
.text:00006746                 pop     ebp
.text:00006747                 retn
.text:00006747 ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ endp
.text:00006747
.text:00006747 _text           ends
.text:00006747
.text:00006748 ; ===========================================================================
.text:00006748
.text:00006748 ; Segment type: Pure code
.text:00006748 ; Segment permissions: Read/Execute
.text:00006748 _text           segment para public 'CODE' use32
.text:00006748                 assume cs:_text
.text:00006748                 ;org 6748h
.text:00006748 ; COMDAT (pick any)
.text:00006748                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006748
.text:00006748 ; =============== S U B R O U T I N E =======================================
.text:00006748
.text:00006748 ; Attributes: bp-based frame
.text:00006748
.text:00006748 ; public: __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>(void)
.text:00006748                 public ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ
.text:00006748 ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ proc near
.text:00006748                                         ; CODE XREF: __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$0+3j
.text:00006748                                         ; NCoderMixer2::CBindInfo::~CBindInfo(void)+76p ...
.text:00006748
.text:00006748 var_8           = dword ptr -8
.text:00006748 var_4           = dword ptr -4
.text:00006748
.text:00006748                 push    ebp
.text:00006749                 mov     ebp, esp
.text:0000674B                 sub     esp, 8
.text:0000674E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006755                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000675C                 mov     [ebp+var_4], ecx
.text:0000675F                 mov     eax, [ebp+var_4]
.text:00006762                 mov     ecx, [eax]
.text:00006764                 mov     [ebp+var_8], ecx
.text:00006767                 mov     edx, [ebp+var_8]
.text:0000676A                 push    edx             ; void *
.text:0000676B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006770                 add     esp, 4
.text:00006773                 add     esp, 8
.text:00006776                 cmp     ebp, esp
.text:00006778                 call    __RTC_CheckEsp
.text:0000677D                 mov     esp, ebp
.text:0000677F                 pop     ebp
.text:00006780                 retn
.text:00006780 ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ endp
.text:00006780
.text:00006780 ; ---------------------------------------------------------------------------
.text:00006781                 align 4
.text:00006781 _text           ends
.text:00006781
.text:00006784 ; ===========================================================================
.text:00006784
.text:00006784 ; Segment type: Pure code
.text:00006784 ; Segment permissions: Read/Execute
.text:00006784 _text           segment para public 'CODE' use32
.text:00006784                 assume cs:_text
.text:00006784                 ;org 6784h
.text:00006784 ; COMDAT (pick any)
.text:00006784                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006784
.text:00006784 ; =============== S U B R O U T I N E =======================================
.text:00006784
.text:00006784 ; Attributes: bp-based frame
.text:00006784
.text:00006784 ; public: class CRecordVector<struct NCoderMixer2::CCoderStreamsInfo> & __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::operator=(class CRecordVector<struct NCoderMixer2::CCoderStreamsInfo> const &)
.text:00006784                 public ??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z
.text:00006784 ??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z proc near
.text:00006784                                         ; CODE XREF: NCoderMixer2::CBindInfo::operator=(NCoderMixer2::CBindInfo const &)+15p
.text:00006784
.text:00006784 var_10          = dword ptr -10h
.text:00006784 var_C           = dword ptr -0Ch
.text:00006784 var_8           = dword ptr -8
.text:00006784 var_4           = dword ptr -4
.text:00006784 arg_0           = dword ptr  8
.text:00006784
.text:00006784                 push    ebp
.text:00006785                 mov     ebp, esp
.text:00006787                 sub     esp, 10h
.text:0000678A                 mov     eax, 0CCCCCCCCh
.text:0000678F                 mov     [ebp+var_10], eax
.text:00006792                 mov     [ebp+var_C], eax
.text:00006795                 mov     [ebp+var_8], eax
.text:00006798                 mov     [ebp+var_4], eax
.text:0000679B                 mov     [ebp+var_4], ecx
.text:0000679E                 mov     eax, [ebp+arg_0]
.text:000067A1                 cmp     eax, [ebp+var_4]
.text:000067A4                 jnz     short loc_67AE
.text:000067A6                 mov     eax, [ebp+var_4]
.text:000067A9                 jmp     loc_6852
.text:000067AE ; ---------------------------------------------------------------------------
.text:000067AE
.text:000067AE loc_67AE:                               ; CODE XREF: CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=(CRecordVector<NCoderMixer2::CCoderStreamsInfo> const &)+20j
.text:000067AE                 mov     ecx, [ebp+arg_0]
.text:000067B1                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:000067B6                 mov     [ebp+var_8], eax
.text:000067B9                 mov     ecx, [ebp+var_4]
.text:000067BC                 mov     edx, [ebp+var_8]
.text:000067BF                 cmp     edx, [ecx+8]
.text:000067C2                 jbe     short loc_6825
.text:000067C4                 mov     eax, [ebp+var_4]
.text:000067C7                 mov     ecx, [eax]
.text:000067C9                 mov     [ebp+var_C], ecx
.text:000067CC                 mov     edx, [ebp+var_C]
.text:000067CF                 push    edx             ; void *
.text:000067D0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000067D5                 add     esp, 4
.text:000067D8                 mov     eax, [ebp+var_4]
.text:000067DB                 mov     dword ptr [eax+8], 0
.text:000067E2                 mov     ecx, [ebp+var_4]
.text:000067E5                 mov     dword ptr [ecx+4], 0
.text:000067EC                 mov     edx, [ebp+var_4]
.text:000067EF                 mov     dword ptr [edx], 0
.text:000067F5                 xor     ecx, ecx
.text:000067F7                 mov     eax, [ebp+var_8]
.text:000067FA                 mov     edx, 4
.text:000067FF                 mul     edx
.text:00006801                 seto    cl
.text:00006804                 neg     ecx
.text:00006806                 or      ecx, eax
.text:00006808                 push    ecx             ; unsigned int
.text:00006809                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000680E                 add     esp, 4
.text:00006811                 mov     [ebp+var_10], eax
.text:00006814                 mov     eax, [ebp+var_4]
.text:00006817                 mov     ecx, [ebp+var_10]
.text:0000681A                 mov     [eax], ecx
.text:0000681C                 mov     edx, [ebp+var_4]
.text:0000681F                 mov     eax, [ebp+var_8]
.text:00006822                 mov     [edx+8], eax
.text:00006825
.text:00006825 loc_6825:                               ; CODE XREF: CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=(CRecordVector<NCoderMixer2::CCoderStreamsInfo> const &)+3Ej
.text:00006825                 mov     ecx, [ebp+var_4]
.text:00006828                 mov     edx, [ebp+var_8]
.text:0000682B                 mov     [ecx+4], edx
.text:0000682E                 cmp     [ebp+var_8], 0
.text:00006832                 jz      short loc_684F
.text:00006834                 mov     eax, [ebp+var_8]
.text:00006837                 shl     eax, 2
.text:0000683A                 push    eax             ; Size
.text:0000683B                 mov     ecx, [ebp+arg_0]
.text:0000683E                 mov     edx, [ecx]
.text:00006840                 push    edx             ; Src
.text:00006841                 mov     eax, [ebp+var_4]
.text:00006844                 mov     ecx, [eax]
.text:00006846                 push    ecx             ; Dst
.text:00006847                 call    _memcpy
.text:0000684C                 add     esp, 0Ch
.text:0000684F
.text:0000684F loc_684F:                               ; CODE XREF: CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=(CRecordVector<NCoderMixer2::CCoderStreamsInfo> const &)+AEj
.text:0000684F                 mov     eax, [ebp+var_4]
.text:00006852
.text:00006852 loc_6852:                               ; CODE XREF: CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=(CRecordVector<NCoderMixer2::CCoderStreamsInfo> const &)+25j
.text:00006852                 add     esp, 10h
.text:00006855                 cmp     ebp, esp
.text:00006857                 call    __RTC_CheckEsp
.text:0000685C                 mov     esp, ebp
.text:0000685E                 pop     ebp
.text:0000685F                 retn    4
.text:0000685F ??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z endp
.text:0000685F
.text:0000685F ; ---------------------------------------------------------------------------
.text:00006862                 align 4
.text:00006862 _text           ends
.text:00006862
.text:00006864 ; ===========================================================================
.text:00006864
.text:00006864 ; Segment type: Pure code
.text:00006864 ; Segment permissions: Read/Execute
.text:00006864 _text           segment para public 'CODE' use32
.text:00006864                 assume cs:_text
.text:00006864                 ;org 6864h
.text:00006864 ; COMDAT (pick any)
.text:00006864                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006864
.text:00006864 ; =============== S U B R O U T I N E =======================================
.text:00006864
.text:00006864 ; Attributes: bp-based frame
.text:00006864
.text:00006864 ; public: unsigned int __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::Add(struct NCoderMixer2::CCoderStreamsInfo)
.text:00006864                 public ?Add@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEIUCCoderStreamsInfo@NCoderMixer2@@@Z
.text:00006864 ?Add@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEIUCCoderStreamsInfo@NCoderMixer2@@@Z proc near
.text:00006864                                         ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+102p
.text:00006864                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+21Bp ...
.text:00006864
.text:00006864 var_8           = dword ptr -8
.text:00006864 var_4           = dword ptr -4
.text:00006864 arg_0           = dword ptr  8
.text:00006864
.text:00006864                 push    ebp
.text:00006865                 mov     ebp, esp
.text:00006867                 sub     esp, 8
.text:0000686A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006871                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006878                 mov     [ebp+var_4], ecx
.text:0000687B                 mov     ecx, [ebp+var_4]
.text:0000687E                 call    ?ReserveOnePosition@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@AAEXXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::ReserveOnePosition(void)
.text:00006883                 mov     eax, [ebp+var_4]
.text:00006886                 mov     ecx, [eax+4]
.text:00006889                 mov     edx, [ebp+var_4]
.text:0000688C                 mov     eax, [edx]
.text:0000688E                 mov     edx, [ebp+arg_0]
.text:00006891                 mov     [eax+ecx*4], edx
.text:00006894                 mov     eax, [ebp+var_4]
.text:00006897                 mov     ecx, [eax+4]
.text:0000689A                 mov     [ebp+var_8], ecx
.text:0000689D                 mov     edx, [ebp+var_4]
.text:000068A0                 mov     eax, [edx+4]
.text:000068A3                 add     eax, 1
.text:000068A6                 mov     ecx, [ebp+var_4]
.text:000068A9                 mov     [ecx+4], eax
.text:000068AC                 mov     eax, [ebp+var_8]
.text:000068AF                 add     esp, 8
.text:000068B2                 cmp     ebp, esp
.text:000068B4                 call    __RTC_CheckEsp
.text:000068B9                 mov     esp, ebp
.text:000068BB                 pop     ebp
.text:000068BC                 retn    4
.text:000068BC ?Add@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEIUCCoderStreamsInfo@NCoderMixer2@@@Z endp
.text:000068BC
.text:000068BC ; ---------------------------------------------------------------------------
.text:000068BF                 align 10h
.text:000068BF _text           ends
.text:000068BF
.text:000068C0 ; ===========================================================================
.text:000068C0
.text:000068C0 ; Segment type: Pure code
.text:000068C0 ; Segment permissions: Read/Execute
.text:000068C0 _text           segment para public 'CODE' use32
.text:000068C0                 assume cs:_text
.text:000068C0                 ;org 68C0h
.text:000068C0 ; COMDAT (pick any)
.text:000068C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000068C0
.text:000068C0 ; =============== S U B R O U T I N E =======================================
.text:000068C0
.text:000068C0 ; Attributes: bp-based frame
.text:000068C0
.text:000068C0 ; public: struct NCoderMixer2::CCoderStreamsInfo const & __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::operator[](unsigned int)const
.text:000068C0                 public ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z
.text:000068C0 ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z proc near
.text:000068C0                                         ; CODE XREF: NCoderMixer2::CBindInfo::GetStream_for_Coder(uint)+46p
.text:000068C0
.text:000068C0 var_4           = dword ptr -4
.text:000068C0 arg_0           = dword ptr  8
.text:000068C0
.text:000068C0                 push    ebp
.text:000068C1                 mov     ebp, esp
.text:000068C3                 push    ecx
.text:000068C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000068CB                 mov     [ebp+var_4], ecx
.text:000068CE                 mov     eax, [ebp+var_4]
.text:000068D1                 mov     ecx, [eax]
.text:000068D3                 mov     edx, [ebp+arg_0]
.text:000068D6                 lea     eax, [ecx+edx*4]
.text:000068D9                 mov     esp, ebp
.text:000068DB                 pop     ebp
.text:000068DC                 retn    4
.text:000068DC ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z endp
.text:000068DC
.text:000068DC ; ---------------------------------------------------------------------------
.text:000068DF                 align 10h
.text:000068DF _text           ends
.text:000068DF
.text:000068E0 ; ===========================================================================
.text:000068E0
.text:000068E0 ; Segment type: Pure code
.text:000068E0 ; Segment permissions: Read/Execute
.text:000068E0 _text           segment para public 'CODE' use32
.text:000068E0                 assume cs:_text
.text:000068E0                 ;org 68E0h
.text:000068E0 ; COMDAT (pick any)
.text:000068E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000068E0
.text:000068E0 ; =============== S U B R O U T I N E =======================================
.text:000068E0
.text:000068E0 ; Attributes: bp-based frame
.text:000068E0
.text:000068E0 ; public: struct NCoderMixer2::CCoderStreamsInfo & __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::operator[](unsigned int)
.text:000068E0                 public ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z
.text:000068E0 ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z proc near
.text:000068E0                                         ; CODE XREF: NArchive::N7z::CEncoder::InitBindConv(void)+B4p
.text:000068E0                                         ; NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+12Cp ...
.text:000068E0
.text:000068E0 var_4           = dword ptr -4
.text:000068E0 arg_0           = dword ptr  8
.text:000068E0
.text:000068E0                 push    ebp
.text:000068E1                 mov     ebp, esp
.text:000068E3                 push    ecx
.text:000068E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000068EB                 mov     [ebp+var_4], ecx
.text:000068EE                 mov     eax, [ebp+var_4]
.text:000068F1                 mov     ecx, [eax]
.text:000068F3                 mov     edx, [ebp+arg_0]
.text:000068F6                 lea     eax, [ecx+edx*4]
.text:000068F9                 mov     esp, ebp
.text:000068FB                 pop     ebp
.text:000068FC                 retn    4
.text:000068FC ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z endp
.text:000068FC
.text:000068FC ; ---------------------------------------------------------------------------
.text:000068FF                 align 10h
.text:000068FF _text           ends
.text:000068FF
.text:00006900 ; ===========================================================================
.text:00006900
.text:00006900 ; Segment type: Pure code
.text:00006900 ; Segment permissions: Read/Execute
.text:00006900 _text           segment para public 'CODE' use32
.text:00006900                 assume cs:_text
.text:00006900                 ;org 6900h
.text:00006900 ; COMDAT (pick any)
.text:00006900                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006900
.text:00006900 ; =============== S U B R O U T I N E =======================================
.text:00006900
.text:00006900 ; Attributes: bp-based frame
.text:00006900
.text:00006900 ; public: __thiscall CRecordVector<struct NCoderMixer2::CBond>::CRecordVector<struct NCoderMixer2::CBond>(void)
.text:00006900                 public ??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ
.text:00006900 ??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ proc near
.text:00006900                                         ; CODE XREF: NCoderMixer2::CBindInfo::CBindInfo(void)+42p
.text:00006900
.text:00006900 var_4           = dword ptr -4
.text:00006900
.text:00006900                 push    ebp
.text:00006901                 mov     ebp, esp
.text:00006903                 push    ecx
.text:00006904                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000690B                 mov     [ebp+var_4], ecx
.text:0000690E                 mov     eax, [ebp+var_4]
.text:00006911                 mov     dword ptr [eax], 0
.text:00006917                 mov     ecx, [ebp+var_4]
.text:0000691A                 mov     dword ptr [ecx+4], 0
.text:00006921                 mov     edx, [ebp+var_4]
.text:00006924                 mov     dword ptr [edx+8], 0
.text:0000692B                 mov     eax, [ebp+var_4]
.text:0000692E                 mov     esp, ebp
.text:00006930                 pop     ebp
.text:00006931                 retn
.text:00006931 ??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ endp
.text:00006931
.text:00006931 ; ---------------------------------------------------------------------------
.text:00006932                 align 4
.text:00006932 _text           ends
.text:00006932
.text:00006934 ; ===========================================================================
.text:00006934
.text:00006934 ; Segment type: Pure code
.text:00006934 ; Segment permissions: Read/Execute
.text:00006934 _text           segment para public 'CODE' use32
.text:00006934                 assume cs:_text
.text:00006934                 ;org 6934h
.text:00006934 ; COMDAT (pick any)
.text:00006934                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006934
.text:00006934 ; =============== S U B R O U T I N E =======================================
.text:00006934
.text:00006934 ; Attributes: bp-based frame
.text:00006934
.text:00006934 ; public: unsigned int __thiscall CRecordVector<struct NCoderMixer2::CBond>::Size(void)const
.text:00006934                 public ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ
.text:00006934 ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ proc near
.text:00006934                                         ; CODE XREF: NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+27p
.text:00006934                                         ; NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+50p ...
.text:00006934
.text:00006934 var_4           = dword ptr -4
.text:00006934
.text:00006934                 push    ebp
.text:00006935                 mov     ebp, esp
.text:00006937                 push    ecx
.text:00006938                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000693F                 mov     [ebp+var_4], ecx
.text:00006942                 mov     eax, [ebp+var_4]
.text:00006945                 mov     eax, [eax+4]
.text:00006948                 mov     esp, ebp
.text:0000694A                 pop     ebp
.text:0000694B                 retn
.text:0000694B ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ endp
.text:0000694B
.text:0000694B _text           ends
.text:0000694B
.text:0000694C ; ===========================================================================
.text:0000694C
.text:0000694C ; Segment type: Pure code
.text:0000694C ; Segment permissions: Read/Execute
.text:0000694C _text           segment para public 'CODE' use32
.text:0000694C                 assume cs:_text
.text:0000694C                 ;org 694Ch
.text:0000694C ; COMDAT (pick any)
.text:0000694C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000694C
.text:0000694C ; =============== S U B R O U T I N E =======================================
.text:0000694C
.text:0000694C ; Attributes: bp-based frame
.text:0000694C
.text:0000694C ; public: __thiscall CRecordVector<struct NCoderMixer2::CBond>::~CRecordVector<struct NCoderMixer2::CBond>(void)
.text:0000694C                 public ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ
.text:0000694C ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ proc near
.text:0000694C                                         ; CODE XREF: __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$1+6j
.text:0000694C                                         ; NCoderMixer2::CBindInfo::~CBindInfo(void)+67p ...
.text:0000694C
.text:0000694C var_8           = dword ptr -8
.text:0000694C var_4           = dword ptr -4
.text:0000694C
.text:0000694C                 push    ebp
.text:0000694D                 mov     ebp, esp
.text:0000694F                 sub     esp, 8
.text:00006952                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006959                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006960                 mov     [ebp+var_4], ecx
.text:00006963                 mov     eax, [ebp+var_4]
.text:00006966                 mov     ecx, [eax]
.text:00006968                 mov     [ebp+var_8], ecx
.text:0000696B                 mov     edx, [ebp+var_8]
.text:0000696E                 push    edx             ; void *
.text:0000696F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006974                 add     esp, 4
.text:00006977                 add     esp, 8
.text:0000697A                 cmp     ebp, esp
.text:0000697C                 call    __RTC_CheckEsp
.text:00006981                 mov     esp, ebp
.text:00006983                 pop     ebp
.text:00006984                 retn
.text:00006984 ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ endp
.text:00006984
.text:00006984 ; ---------------------------------------------------------------------------
.text:00006985                 align 4
.text:00006985 _text           ends
.text:00006985
.text:00006988 ; ===========================================================================
.text:00006988
.text:00006988 ; Segment type: Pure code
.text:00006988 ; Segment permissions: Read/Execute
.text:00006988 _text           segment para public 'CODE' use32
.text:00006988                 assume cs:_text
.text:00006988                 ;org 6988h
.text:00006988 ; COMDAT (pick any)
.text:00006988                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006988
.text:00006988 ; =============== S U B R O U T I N E =======================================
.text:00006988
.text:00006988 ; Attributes: bp-based frame
.text:00006988
.text:00006988 ; public: class CRecordVector<struct NCoderMixer2::CBond> & __thiscall CRecordVector<struct NCoderMixer2::CBond>::operator=(class CRecordVector<struct NCoderMixer2::CBond> const &)
.text:00006988                 public ??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z
.text:00006988 ??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z proc near
.text:00006988                                         ; CODE XREF: NCoderMixer2::CBindInfo::operator=(NCoderMixer2::CBindInfo const &)+27p
.text:00006988
.text:00006988 var_10          = dword ptr -10h
.text:00006988 var_C           = dword ptr -0Ch
.text:00006988 var_8           = dword ptr -8
.text:00006988 var_4           = dword ptr -4
.text:00006988 arg_0           = dword ptr  8
.text:00006988
.text:00006988                 push    ebp
.text:00006989                 mov     ebp, esp
.text:0000698B                 sub     esp, 10h
.text:0000698E                 mov     eax, 0CCCCCCCCh
.text:00006993                 mov     [ebp+var_10], eax
.text:00006996                 mov     [ebp+var_C], eax
.text:00006999                 mov     [ebp+var_8], eax
.text:0000699C                 mov     [ebp+var_4], eax
.text:0000699F                 mov     [ebp+var_4], ecx
.text:000069A2                 mov     eax, [ebp+arg_0]
.text:000069A5                 cmp     eax, [ebp+var_4]
.text:000069A8                 jnz     short loc_69B2
.text:000069AA                 mov     eax, [ebp+var_4]
.text:000069AD                 jmp     loc_6A56
.text:000069B2 ; ---------------------------------------------------------------------------
.text:000069B2
.text:000069B2 loc_69B2:                               ; CODE XREF: CRecordVector<NCoderMixer2::CBond>::operator=(CRecordVector<NCoderMixer2::CBond> const &)+20j
.text:000069B2                 mov     ecx, [ebp+arg_0]
.text:000069B5                 call    ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size(void)
.text:000069BA                 mov     [ebp+var_8], eax
.text:000069BD                 mov     ecx, [ebp+var_4]
.text:000069C0                 mov     edx, [ebp+var_8]
.text:000069C3                 cmp     edx, [ecx+8]
.text:000069C6                 jbe     short loc_6A29
.text:000069C8                 mov     eax, [ebp+var_4]
.text:000069CB                 mov     ecx, [eax]
.text:000069CD                 mov     [ebp+var_C], ecx
.text:000069D0                 mov     edx, [ebp+var_C]
.text:000069D3                 push    edx             ; void *
.text:000069D4                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000069D9                 add     esp, 4
.text:000069DC                 mov     eax, [ebp+var_4]
.text:000069DF                 mov     dword ptr [eax+8], 0
.text:000069E6                 mov     ecx, [ebp+var_4]
.text:000069E9                 mov     dword ptr [ecx+4], 0
.text:000069F0                 mov     edx, [ebp+var_4]
.text:000069F3                 mov     dword ptr [edx], 0
.text:000069F9                 xor     ecx, ecx
.text:000069FB                 mov     eax, [ebp+var_8]
.text:000069FE                 mov     edx, 8
.text:00006A03                 mul     edx
.text:00006A05                 seto    cl
.text:00006A08                 neg     ecx
.text:00006A0A                 or      ecx, eax
.text:00006A0C                 push    ecx             ; unsigned int
.text:00006A0D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006A12                 add     esp, 4
.text:00006A15                 mov     [ebp+var_10], eax
.text:00006A18                 mov     eax, [ebp+var_4]
.text:00006A1B                 mov     ecx, [ebp+var_10]
.text:00006A1E                 mov     [eax], ecx
.text:00006A20                 mov     edx, [ebp+var_4]
.text:00006A23                 mov     eax, [ebp+var_8]
.text:00006A26                 mov     [edx+8], eax
.text:00006A29
.text:00006A29 loc_6A29:                               ; CODE XREF: CRecordVector<NCoderMixer2::CBond>::operator=(CRecordVector<NCoderMixer2::CBond> const &)+3Ej
.text:00006A29                 mov     ecx, [ebp+var_4]
.text:00006A2C                 mov     edx, [ebp+var_8]
.text:00006A2F                 mov     [ecx+4], edx
.text:00006A32                 cmp     [ebp+var_8], 0
.text:00006A36                 jz      short loc_6A53
.text:00006A38                 mov     eax, [ebp+var_8]
.text:00006A3B                 shl     eax, 3
.text:00006A3E                 push    eax             ; Size
.text:00006A3F                 mov     ecx, [ebp+arg_0]
.text:00006A42                 mov     edx, [ecx]
.text:00006A44                 push    edx             ; Src
.text:00006A45                 mov     eax, [ebp+var_4]
.text:00006A48                 mov     ecx, [eax]
.text:00006A4A                 push    ecx             ; Dst
.text:00006A4B                 call    _memcpy
.text:00006A50                 add     esp, 0Ch
.text:00006A53
.text:00006A53 loc_6A53:                               ; CODE XREF: CRecordVector<NCoderMixer2::CBond>::operator=(CRecordVector<NCoderMixer2::CBond> const &)+AEj
.text:00006A53                 mov     eax, [ebp+var_4]
.text:00006A56
.text:00006A56 loc_6A56:                               ; CODE XREF: CRecordVector<NCoderMixer2::CBond>::operator=(CRecordVector<NCoderMixer2::CBond> const &)+25j
.text:00006A56                 add     esp, 10h
.text:00006A59                 cmp     ebp, esp
.text:00006A5B                 call    __RTC_CheckEsp
.text:00006A60                 mov     esp, ebp
.text:00006A62                 pop     ebp
.text:00006A63                 retn    4
.text:00006A63 ??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z endp
.text:00006A63
.text:00006A63 ; ---------------------------------------------------------------------------
.text:00006A66                 align 4
.text:00006A66 _text           ends
.text:00006A66
.text:00006A68 ; ===========================================================================
.text:00006A68
.text:00006A68 ; Segment type: Pure code
.text:00006A68 ; Segment permissions: Read/Execute
.text:00006A68 _text           segment para public 'CODE' use32
.text:00006A68                 assume cs:_text
.text:00006A68                 ;org 6A68h
.text:00006A68 ; COMDAT (pick any)
.text:00006A68                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006A68
.text:00006A68 ; =============== S U B R O U T I N E =======================================
.text:00006A68
.text:00006A68 ; Attributes: bp-based frame
.text:00006A68
.text:00006A68 ; public: unsigned int __thiscall CRecordVector<struct NCoderMixer2::CBond>::Add(struct NCoderMixer2::CBond)
.text:00006A68                 public ?Add@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEIUCBond@NCoderMixer2@@@Z
.text:00006A68 ?Add@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEIUCBond@NCoderMixer2@@@Z proc near
.text:00006A68                                         ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+1BCp
.text:00006A68                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+306p ...
.text:00006A68
.text:00006A68 var_8           = dword ptr -8
.text:00006A68 var_4           = dword ptr -4
.text:00006A68 arg_0           = dword ptr  8
.text:00006A68 arg_4           = dword ptr  0Ch
.text:00006A68
.text:00006A68                 push    ebp
.text:00006A69                 mov     ebp, esp
.text:00006A6B                 sub     esp, 8
.text:00006A6E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006A75                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006A7C                 mov     [ebp+var_4], ecx
.text:00006A7F                 mov     ecx, [ebp+var_4]
.text:00006A82                 call    ?ReserveOnePosition@?$CRecordVector@UCBond@NCoderMixer2@@@@AAEXXZ ; CRecordVector<NCoderMixer2::CBond>::ReserveOnePosition(void)
.text:00006A87                 mov     eax, [ebp+var_4]
.text:00006A8A                 mov     ecx, [eax+4]
.text:00006A8D                 mov     edx, [ebp+var_4]
.text:00006A90                 mov     eax, [edx]
.text:00006A92                 mov     edx, [ebp+arg_0]
.text:00006A95                 mov     [eax+ecx*8], edx
.text:00006A98                 mov     edx, [ebp+arg_4]
.text:00006A9B                 mov     [eax+ecx*8+4], edx
.text:00006A9F                 mov     eax, [ebp+var_4]
.text:00006AA2                 mov     ecx, [eax+4]
.text:00006AA5                 mov     [ebp+var_8], ecx
.text:00006AA8                 mov     edx, [ebp+var_4]
.text:00006AAB                 mov     eax, [edx+4]
.text:00006AAE                 add     eax, 1
.text:00006AB1                 mov     ecx, [ebp+var_4]
.text:00006AB4                 mov     [ecx+4], eax
.text:00006AB7                 mov     eax, [ebp+var_8]
.text:00006ABA                 add     esp, 8
.text:00006ABD                 cmp     ebp, esp
.text:00006ABF                 call    __RTC_CheckEsp
.text:00006AC4                 mov     esp, ebp
.text:00006AC6                 pop     ebp
.text:00006AC7                 retn    8
.text:00006AC7 ?Add@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEIUCBond@NCoderMixer2@@@Z endp
.text:00006AC7
.text:00006AC7 ; ---------------------------------------------------------------------------
.text:00006ACA                 align 4
.text:00006ACA _text           ends
.text:00006ACA
.text:00006ACC ; ===========================================================================
.text:00006ACC
.text:00006ACC ; Segment type: Pure code
.text:00006ACC ; Segment permissions: Read/Execute
.text:00006ACC _text           segment para public 'CODE' use32
.text:00006ACC                 assume cs:_text
.text:00006ACC                 ;org 6ACCh
.text:00006ACC ; COMDAT (pick any)
.text:00006ACC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006ACC
.text:00006ACC ; =============== S U B R O U T I N E =======================================
.text:00006ACC
.text:00006ACC ; Attributes: bp-based frame
.text:00006ACC
.text:00006ACC ; public: struct NCoderMixer2::CBond const & __thiscall CRecordVector<struct NCoderMixer2::CBond>::operator[](unsigned int)const
.text:00006ACC                 public ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z
.text:00006ACC ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z proc near
.text:00006ACC                                         ; CODE XREF: NCoderMixer2::CBindInfo::FindBond_for_UnpackStream(uint)+43p
.text:00006ACC                                         ; NCoderMixer2::CBindInfo::FindBond_for_PackStream(uint)+43p
.text:00006ACC
.text:00006ACC var_4           = dword ptr -4
.text:00006ACC arg_0           = dword ptr  8
.text:00006ACC
.text:00006ACC                 push    ebp
.text:00006ACD                 mov     ebp, esp
.text:00006ACF                 push    ecx
.text:00006AD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006AD7                 mov     [ebp+var_4], ecx
.text:00006ADA                 mov     eax, [ebp+var_4]
.text:00006ADD                 mov     ecx, [eax]
.text:00006ADF                 mov     edx, [ebp+arg_0]
.text:00006AE2                 lea     eax, [ecx+edx*8]
.text:00006AE5                 mov     esp, ebp
.text:00006AE7                 pop     ebp
.text:00006AE8                 retn    4
.text:00006AE8 ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z endp
.text:00006AE8
.text:00006AE8 ; ---------------------------------------------------------------------------
.text:00006AEB                 align 4
.text:00006AEB _text           ends
.text:00006AEB
.text:00006AEC ; ===========================================================================
.text:00006AEC
.text:00006AEC ; Segment type: Pure code
.text:00006AEC ; Segment permissions: Read/Execute
.text:00006AEC _text           segment para public 'CODE' use32
.text:00006AEC                 assume cs:_text
.text:00006AEC                 ;org 6AECh
.text:00006AEC ; COMDAT (pick any)
.text:00006AEC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006AEC
.text:00006AEC ; =============== S U B R O U T I N E =======================================
.text:00006AEC
.text:00006AEC ; Attributes: bp-based frame
.text:00006AEC
.text:00006AEC ; public: struct NCoderMixer2::CBond & __thiscall CRecordVector<struct NCoderMixer2::CBond>::operator[](unsigned int)
.text:00006AEC                 public ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z
.text:00006AEC ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z proc near
.text:00006AEC                                         ; CODE XREF: NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+86p
.text:00006AEC                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+40Bp
.text:00006AEC
.text:00006AEC var_4           = dword ptr -4
.text:00006AEC arg_0           = dword ptr  8
.text:00006AEC
.text:00006AEC                 push    ebp
.text:00006AED                 mov     ebp, esp
.text:00006AEF                 push    ecx
.text:00006AF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006AF7                 mov     [ebp+var_4], ecx
.text:00006AFA                 mov     eax, [ebp+var_4]
.text:00006AFD                 mov     ecx, [eax]
.text:00006AFF                 mov     edx, [ebp+arg_0]
.text:00006B02                 lea     eax, [ecx+edx*8]
.text:00006B05                 mov     esp, ebp
.text:00006B07                 pop     ebp
.text:00006B08                 retn    4
.text:00006B08 ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z endp
.text:00006B08
.text:00006B08 ; ---------------------------------------------------------------------------
.text:00006B0B                 align 4
.text:00006B0B _text           ends
.text:00006B0B
.text:00006B0C ; ===========================================================================
.text:00006B0C
.text:00006B0C ; Segment type: Pure code
.text:00006B0C ; Segment permissions: Read/Execute
.text:00006B0C _text           segment para public 'CODE' use32
.text:00006B0C                 assume cs:_text
.text:00006B0C                 ;org 6B0Ch
.text:00006B0C ; COMDAT (pick any)
.text:00006B0C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006B0C
.text:00006B0C ; =============== S U B R O U T I N E =======================================
.text:00006B0C
.text:00006B0C ; Attributes: bp-based frame
.text:00006B0C
.text:00006B0C ; public: __thiscall CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:00006B0C                 public ??0?$CRecordVector@_K@@QAE@XZ
.text:00006B0C ??0?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::CEncoder::CEncoder(NArchive::N7z::CCompressionMethodMode const &)+6Fp
.text:00006B0C
.text:00006B0C var_4           = dword ptr -4
.text:00006B0C
.text:00006B0C                 push    ebp
.text:00006B0D                 mov     ebp, esp
.text:00006B0F                 push    ecx
.text:00006B10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006B17                 mov     [ebp+var_4], ecx
.text:00006B1A                 mov     eax, [ebp+var_4]
.text:00006B1D                 mov     dword ptr [eax], 0
.text:00006B23                 mov     ecx, [ebp+var_4]
.text:00006B26                 mov     dword ptr [ecx+4], 0
.text:00006B2D                 mov     edx, [ebp+var_4]
.text:00006B30                 mov     dword ptr [edx+8], 0
.text:00006B37                 mov     eax, [ebp+var_4]
.text:00006B3A                 mov     esp, ebp
.text:00006B3C                 pop     ebp
.text:00006B3D                 retn
.text:00006B3D ??0?$CRecordVector@_K@@QAE@XZ endp
.text:00006B3D
.text:00006B3D ; ---------------------------------------------------------------------------
.text:00006B3E                 align 10h
.text:00006B3E _text           ends
.text:00006B3E
.text:00006B40 ; ===========================================================================
.text:00006B40
.text:00006B40 ; Segment type: Pure code
.text:00006B40 ; Segment permissions: Read/Execute
.text:00006B40 _text           segment para public 'CODE' use32
.text:00006B40                 assume cs:_text
.text:00006B40                 ;org 6B40h
.text:00006B40 ; COMDAT (pick any)
.text:00006B40                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006B40
.text:00006B40 ; =============== S U B R O U T I N E =======================================
.text:00006B40
.text:00006B40 ; Attributes: bp-based frame
.text:00006B40
.text:00006B40 ; public: __thiscall CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00006B40                 public ??1?$CRecordVector@_K@@QAE@XZ
.text:00006B40 ??1?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::CEncoder::~CEncoder(void)+73p
.text:00006B40                                         ; __unwindfunclet$??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z$3+9j ...
.text:00006B40
.text:00006B40 var_8           = dword ptr -8
.text:00006B40 var_4           = dword ptr -4
.text:00006B40
.text:00006B40                 push    ebp
.text:00006B41                 mov     ebp, esp
.text:00006B43                 sub     esp, 8
.text:00006B46                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006B4D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006B54                 mov     [ebp+var_4], ecx
.text:00006B57                 mov     eax, [ebp+var_4]
.text:00006B5A                 mov     ecx, [eax]
.text:00006B5C                 mov     [ebp+var_8], ecx
.text:00006B5F                 mov     edx, [ebp+var_8]
.text:00006B62                 push    edx             ; void *
.text:00006B63                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006B68                 add     esp, 4
.text:00006B6B                 add     esp, 8
.text:00006B6E                 cmp     ebp, esp
.text:00006B70                 call    __RTC_CheckEsp
.text:00006B75                 mov     esp, ebp
.text:00006B77                 pop     ebp
.text:00006B78                 retn
.text:00006B78 ??1?$CRecordVector@_K@@QAE@XZ endp
.text:00006B78
.text:00006B78 ; ---------------------------------------------------------------------------
.text:00006B79                 align 4
.text:00006B79 _text           ends
.text:00006B79
.text:00006B7C ; ===========================================================================
.text:00006B7C
.text:00006B7C ; Segment type: Pure code
.text:00006B7C ; Segment permissions: Read/Execute
.text:00006B7C _text           segment para public 'CODE' use32
.text:00006B7C                 assume cs:_text
.text:00006B7C                 ;org 6B7Ch
.text:00006B7C ; COMDAT (pick any)
.text:00006B7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006B7C
.text:00006B7C ; =============== S U B R O U T I N E =======================================
.text:00006B7C
.text:00006B7C ; Attributes: bp-based frame
.text:00006B7C
.text:00006B7C ; public: unsigned int __thiscall CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:00006B7C                 public ?Add@?$CRecordVector@_K@@QAEI_K@Z
.text:00006B7C ?Add@?$CRecordVector@_K@@QAEI_K@Z proc near
.text:00006B7C                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+908p
.text:00006B7C                                         ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+9FDp ...
.text:00006B7C
.text:00006B7C var_8           = dword ptr -8
.text:00006B7C var_4           = dword ptr -4
.text:00006B7C arg_0           = dword ptr  8
.text:00006B7C arg_4           = dword ptr  0Ch
.text:00006B7C
.text:00006B7C                 push    ebp
.text:00006B7D                 mov     ebp, esp
.text:00006B7F                 sub     esp, 8
.text:00006B82                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006B89                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006B90                 mov     [ebp+var_4], ecx
.text:00006B93                 mov     ecx, [ebp+var_4]
.text:00006B96                 call    ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition(void)
.text:00006B9B                 mov     eax, [ebp+var_4]
.text:00006B9E                 mov     ecx, [eax+4]
.text:00006BA1                 mov     edx, [ebp+var_4]
.text:00006BA4                 mov     eax, [edx]
.text:00006BA6                 mov     edx, [ebp+arg_0]
.text:00006BA9                 mov     [eax+ecx*8], edx
.text:00006BAC                 mov     edx, [ebp+arg_4]
.text:00006BAF                 mov     [eax+ecx*8+4], edx
.text:00006BB3                 mov     eax, [ebp+var_4]
.text:00006BB6                 mov     ecx, [eax+4]
.text:00006BB9                 mov     [ebp+var_8], ecx
.text:00006BBC                 mov     edx, [ebp+var_4]
.text:00006BBF                 mov     eax, [edx+4]
.text:00006BC2                 add     eax, 1
.text:00006BC5                 mov     ecx, [ebp+var_4]
.text:00006BC8                 mov     [ecx+4], eax
.text:00006BCB                 mov     eax, [ebp+var_8]
.text:00006BCE                 add     esp, 8
.text:00006BD1                 cmp     ebp, esp
.text:00006BD3                 call    __RTC_CheckEsp
.text:00006BD8                 mov     esp, ebp
.text:00006BDA                 pop     ebp
.text:00006BDB                 retn    8
.text:00006BDB ?Add@?$CRecordVector@_K@@QAEI_K@Z endp
.text:00006BDB
.text:00006BDB ; ---------------------------------------------------------------------------
.text:00006BDE                 align 10h
.text:00006BDE _text           ends
.text:00006BDE
.text:00006BE0 ; ===========================================================================
.text:00006BE0
.text:00006BE0 ; Segment type: Pure code
.text:00006BE0 ; Segment permissions: Read/Execute
.text:00006BE0 _text           segment para public 'CODE' use32
.text:00006BE0                 assume cs:_text
.text:00006BE0                 ;org 6BE0h
.text:00006BE0 ; COMDAT (pick any)
.text:00006BE0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006BE0
.text:00006BE0 ; =============== S U B R O U T I N E =======================================
.text:00006BE0
.text:00006BE0 ; Attributes: bp-based frame
.text:00006BE0
.text:00006BE0 ; public: unsigned __int64 & __thiscall CRecordVector<unsigned __int64>::operator[](unsigned int)
.text:00006BE0                 public ??A?$CRecordVector@_K@@QAEAA_KI@Z
.text:00006BE0 ??A?$CRecordVector@_K@@QAEAA_KI@Z proc near
.text:00006BE0                                         ; CODE XREF: NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+14Cp
.text:00006BE0
.text:00006BE0 var_4           = dword ptr -4
.text:00006BE0 arg_0           = dword ptr  8
.text:00006BE0
.text:00006BE0                 push    ebp
.text:00006BE1                 mov     ebp, esp
.text:00006BE3                 push    ecx
.text:00006BE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006BEB                 mov     [ebp+var_4], ecx
.text:00006BEE                 mov     eax, [ebp+var_4]
.text:00006BF1                 mov     ecx, [eax]
.text:00006BF3                 mov     edx, [ebp+arg_0]
.text:00006BF6                 lea     eax, [ecx+edx*8]
.text:00006BF9                 mov     esp, ebp
.text:00006BFB                 pop     ebp
.text:00006BFC                 retn    4
.text:00006BFC ??A?$CRecordVector@_K@@QAEAA_KI@Z endp
.text:00006BFC
.text:00006BFC ; ---------------------------------------------------------------------------
.text:00006BFF                 align 10h
.text:00006BFF _text           ends
.text:00006BFF
.text:00006C00 ; ===========================================================================
.text:00006C00
.text:00006C00 ; Segment type: Pure code
.text:00006C00 ; Segment permissions: Read/Execute
.text:00006C00 _text           segment para public 'CODE' use32
.text:00006C00                 assume cs:_text
.text:00006C00                 ;org 6C00h
.text:00006C00 ; COMDAT (pick any)
.text:00006C00                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006C00
.text:00006C00 ; =============== S U B R O U T I N E =======================================
.text:00006C00
.text:00006C00 ; Attributes: bp-based frame
.text:00006C00
.text:00006C00 ; public: __thiscall CRecordVector<bool>::CRecordVector<bool>(void)
.text:00006C00                 public ??0?$CRecordVector@_N@@QAE@XZ
.text:00006C00 ??0?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: NCoderMixer2::CMixer::CMixer(bool)+4Ep
.text:00006C00                                         ; NCoderMixer2::CMixer::CMixer(bool)+5Dp
.text:00006C00
.text:00006C00 var_4           = dword ptr -4
.text:00006C00
.text:00006C00                 push    ebp
.text:00006C01                 mov     ebp, esp
.text:00006C03                 push    ecx
.text:00006C04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C0B                 mov     [ebp+var_4], ecx
.text:00006C0E                 mov     eax, [ebp+var_4]
.text:00006C11                 mov     dword ptr [eax], 0
.text:00006C17                 mov     ecx, [ebp+var_4]
.text:00006C1A                 mov     dword ptr [ecx+4], 0
.text:00006C21                 mov     edx, [ebp+var_4]
.text:00006C24                 mov     dword ptr [edx+8], 0
.text:00006C2B                 mov     eax, [ebp+var_4]
.text:00006C2E                 mov     esp, ebp
.text:00006C30                 pop     ebp
.text:00006C31                 retn
.text:00006C31 ??0?$CRecordVector@_N@@QAE@XZ endp
.text:00006C31
.text:00006C31 ; ---------------------------------------------------------------------------
.text:00006C32                 align 4
.text:00006C32 _text           ends
.text:00006C32
.text:00006C34 ; ===========================================================================
.text:00006C34
.text:00006C34 ; Segment type: Pure code
.text:00006C34 ; Segment permissions: Read/Execute
.text:00006C34 _text           segment para public 'CODE' use32
.text:00006C34                 assume cs:_text
.text:00006C34                 ;org 6C34h
.text:00006C34 ; COMDAT (pick any)
.text:00006C34                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006C34
.text:00006C34 ; =============== S U B R O U T I N E =======================================
.text:00006C34
.text:00006C34 ; Attributes: bp-based frame
.text:00006C34
.text:00006C34 ; public: __thiscall CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00006C34                 public ??1?$CRecordVector@_N@@QAE@XZ
.text:00006C34 ??1?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$1+6j
.text:00006C34                                         ; NCoderMixer2::CMixer::~CMixer(void)+3Ap ...
.text:00006C34
.text:00006C34 var_8           = dword ptr -8
.text:00006C34 var_4           = dword ptr -4
.text:00006C34
.text:00006C34                 push    ebp
.text:00006C35                 mov     ebp, esp
.text:00006C37                 sub     esp, 8
.text:00006C3A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006C41                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C48                 mov     [ebp+var_4], ecx
.text:00006C4B                 mov     eax, [ebp+var_4]
.text:00006C4E                 mov     ecx, [eax]
.text:00006C50                 mov     [ebp+var_8], ecx
.text:00006C53                 mov     edx, [ebp+var_8]
.text:00006C56                 push    edx             ; void *
.text:00006C57                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006C5C                 add     esp, 4
.text:00006C5F                 add     esp, 8
.text:00006C62                 cmp     ebp, esp
.text:00006C64                 call    __RTC_CheckEsp
.text:00006C69                 mov     esp, ebp
.text:00006C6B                 pop     ebp
.text:00006C6C                 retn
.text:00006C6C ??1?$CRecordVector@_N@@QAE@XZ endp
.text:00006C6C
.text:00006C6C ; ---------------------------------------------------------------------------
.text:00006C6D                 align 10h
.text:00006C6D _text           ends
.text:00006C6D
.text:00006C70 ; ===========================================================================
.text:00006C70
.text:00006C70 ; Segment type: Pure code
.text:00006C70 ; Segment permissions: Read/Execute
.text:00006C70 _text           segment para public 'CODE' use32
.text:00006C70                 assume cs:_text
.text:00006C70                 ;org 6C70h
.text:00006C70 ; COMDAT (pick any)
.text:00006C70                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006C70
.text:00006C70 ; =============== S U B R O U T I N E =======================================
.text:00006C70
.text:00006C70 ; Attributes: bp-based frame
.text:00006C70
.text:00006C70 ; public: void __thiscall CRecordVector<bool>::Clear(void)
.text:00006C70                 public ?Clear@?$CRecordVector@_N@@QAEXXZ
.text:00006C70 ?Clear@?$CRecordVector@_N@@QAEXXZ proc near
.text:00006C70                                         ; CODE XREF: NCoderMixer2::CMixer::SetBindInfo(NCoderMixer2::CBindInfo const &)+23p
.text:00006C70
.text:00006C70 var_4           = dword ptr -4
.text:00006C70
.text:00006C70                 push    ebp
.text:00006C71                 mov     ebp, esp
.text:00006C73                 push    ecx
.text:00006C74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C7B                 mov     [ebp+var_4], ecx
.text:00006C7E                 mov     eax, [ebp+var_4]
.text:00006C81                 mov     dword ptr [eax+4], 0
.text:00006C88                 mov     esp, ebp
.text:00006C8A                 pop     ebp
.text:00006C8B                 retn
.text:00006C8B ?Clear@?$CRecordVector@_N@@QAEXXZ endp
.text:00006C8B
.text:00006C8B _text           ends
.text:00006C8B
.text:00006C8C ; ===========================================================================
.text:00006C8C
.text:00006C8C ; Segment type: Pure code
.text:00006C8C ; Segment permissions: Read/Execute
.text:00006C8C _text           segment para public 'CODE' use32
.text:00006C8C                 assume cs:_text
.text:00006C8C                 ;org 6C8Ch
.text:00006C8C ; COMDAT (pick any)
.text:00006C8C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006C8C
.text:00006C8C ; =============== S U B R O U T I N E =======================================
.text:00006C8C
.text:00006C8C ; Attributes: bp-based frame
.text:00006C8C
.text:00006C8C ; public: __thiscall CRecordVector<struct ISequentialOutStream *>::CRecordVector<struct ISequentialOutStream *>(void)
.text:00006C8C                 public ??0?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ
.text:00006C8C ??0?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ proc near
.text:00006C8C                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+30Bp
.text:00006C8C
.text:00006C8C var_4           = dword ptr -4
.text:00006C8C
.text:00006C8C                 push    ebp
.text:00006C8D                 mov     ebp, esp
.text:00006C8F                 push    ecx
.text:00006C90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C97                 mov     [ebp+var_4], ecx
.text:00006C9A                 mov     eax, [ebp+var_4]
.text:00006C9D                 mov     dword ptr [eax], 0
.text:00006CA3                 mov     ecx, [ebp+var_4]
.text:00006CA6                 mov     dword ptr [ecx+4], 0
.text:00006CAD                 mov     edx, [ebp+var_4]
.text:00006CB0                 mov     dword ptr [edx+8], 0
.text:00006CB7                 mov     eax, [ebp+var_4]
.text:00006CBA                 mov     esp, ebp
.text:00006CBC                 pop     ebp
.text:00006CBD                 retn
.text:00006CBD ??0?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ endp
.text:00006CBD
.text:00006CBD ; ---------------------------------------------------------------------------
.text:00006CBE                 align 10h
.text:00006CBE _text           ends
.text:00006CBE
.text:00006CC0 ; ===========================================================================
.text:00006CC0
.text:00006CC0 ; Segment type: Pure code
.text:00006CC0 ; Segment permissions: Read/Execute
.text:00006CC0 _text           segment para public 'CODE' use32
.text:00006CC0                 assume cs:_text
.text:00006CC0                 ;org 6CC0h
.text:00006CC0 ; COMDAT (pick any)
.text:00006CC0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006CC0
.text:00006CC0 ; =============== S U B R O U T I N E =======================================
.text:00006CC0
.text:00006CC0 ; Attributes: bp-based frame
.text:00006CC0
.text:00006CC0 ; public: __thiscall CRecordVector<struct ISequentialOutStream *>::~CRecordVector<struct ISequentialOutStream *>(void)
.text:00006CC0                 public ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ
.text:00006CC0 ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ proc near
.text:00006CC0                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+87Cp
.text:00006CC0                                         ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+980p ...
.text:00006CC0
.text:00006CC0 var_8           = dword ptr -8
.text:00006CC0 var_4           = dword ptr -4
.text:00006CC0
.text:00006CC0                 push    ebp
.text:00006CC1                 mov     ebp, esp
.text:00006CC3                 sub     esp, 8
.text:00006CC6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006CCD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006CD4                 mov     [ebp+var_4], ecx
.text:00006CD7                 mov     eax, [ebp+var_4]
.text:00006CDA                 mov     ecx, [eax]
.text:00006CDC                 mov     [ebp+var_8], ecx
.text:00006CDF                 mov     edx, [ebp+var_8]
.text:00006CE2                 push    edx             ; void *
.text:00006CE3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006CE8                 add     esp, 4
.text:00006CEB                 add     esp, 8
.text:00006CEE                 cmp     ebp, esp
.text:00006CF0                 call    __RTC_CheckEsp
.text:00006CF5                 mov     esp, ebp
.text:00006CF7                 pop     ebp
.text:00006CF8                 retn
.text:00006CF8 ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ endp
.text:00006CF8
.text:00006CF8 ; ---------------------------------------------------------------------------
.text:00006CF9                 align 4
.text:00006CF9 _text           ends
.text:00006CF9
.text:00006CFC ; ===========================================================================
.text:00006CFC
.text:00006CFC ; Segment type: Pure code
.text:00006CFC ; Segment permissions: Read/Execute
.text:00006CFC _text           segment para public 'CODE' use32
.text:00006CFC                 assume cs:_text
.text:00006CFC                 ;org 6CFCh
.text:00006CFC ; COMDAT (pick any)
.text:00006CFC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006CFC
.text:00006CFC ; =============== S U B R O U T I N E =======================================
.text:00006CFC
.text:00006CFC ; Attributes: bp-based frame
.text:00006CFC
.text:00006CFC ; public: unsigned int __thiscall CRecordVector<struct ISequentialOutStream *>::Add(struct ISequentialOutStream * const)
.text:00006CFC                 public ?Add@?$CRecordVector@PAUISequentialOutStream@@@@QAEIQAUISequentialOutStream@@@Z
.text:00006CFC ?Add@?$CRecordVector@PAUISequentialOutStream@@@@QAEIQAUISequentialOutStream@@@Z proc near
.text:00006CFC                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+7ADp
.text:00006CFC                                         ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+7F1p
.text:00006CFC
.text:00006CFC var_8           = dword ptr -8
.text:00006CFC var_4           = dword ptr -4
.text:00006CFC arg_0           = dword ptr  8
.text:00006CFC
.text:00006CFC                 push    ebp
.text:00006CFD                 mov     ebp, esp
.text:00006CFF                 sub     esp, 8
.text:00006D02                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006D09                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006D10                 mov     [ebp+var_4], ecx
.text:00006D13                 mov     ecx, [ebp+var_4]
.text:00006D16                 call    ?ReserveOnePosition@?$CRecordVector@PAUISequentialOutStream@@@@AAEXXZ ; CRecordVector<ISequentialOutStream *>::ReserveOnePosition(void)
.text:00006D1B                 mov     eax, [ebp+var_4]
.text:00006D1E                 mov     ecx, [eax+4]
.text:00006D21                 mov     edx, [ebp+var_4]
.text:00006D24                 mov     eax, [edx]
.text:00006D26                 mov     edx, [ebp+arg_0]
.text:00006D29                 mov     [eax+ecx*4], edx
.text:00006D2C                 mov     eax, [ebp+var_4]
.text:00006D2F                 mov     ecx, [eax+4]
.text:00006D32                 mov     [ebp+var_8], ecx
.text:00006D35                 mov     edx, [ebp+var_4]
.text:00006D38                 mov     eax, [edx+4]
.text:00006D3B                 add     eax, 1
.text:00006D3E                 mov     ecx, [ebp+var_4]
.text:00006D41                 mov     [ecx+4], eax
.text:00006D44                 mov     eax, [ebp+var_8]
.text:00006D47                 add     esp, 8
.text:00006D4A                 cmp     ebp, esp
.text:00006D4C                 call    __RTC_CheckEsp
.text:00006D51                 mov     esp, ebp
.text:00006D53                 pop     ebp
.text:00006D54                 retn    4
.text:00006D54 ?Add@?$CRecordVector@PAUISequentialOutStream@@@@QAEIQAUISequentialOutStream@@@Z endp
.text:00006D54
.text:00006D54 ; ---------------------------------------------------------------------------
.text:00006D57                 align 4
.text:00006D57 _text           ends
.text:00006D57
.text:00006D58 ; ===========================================================================
.text:00006D58
.text:00006D58 ; Segment type: Pure code
.text:00006D58 ; Segment permissions: Read/Execute
.text:00006D58 _text           segment para public 'CODE' use32
.text:00006D58                 assume cs:_text
.text:00006D58                 ;org 6D58h
.text:00006D58 ; COMDAT (pick any)
.text:00006D58                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006D58
.text:00006D58 ; =============== S U B R O U T I N E =======================================
.text:00006D58
.text:00006D58 ; Attributes: bp-based frame
.text:00006D58
.text:00006D58 ; public: struct ISequentialOutStream * & __thiscall CRecordVector<struct ISequentialOutStream *>::Front(void)
.text:00006D58                 public ?Front@?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@XZ
.text:00006D58 ?Front@?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@XZ proc near
.text:00006D58                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+82Cp
.text:00006D58
.text:00006D58 var_4           = dword ptr -4
.text:00006D58
.text:00006D58                 push    ebp
.text:00006D59                 mov     ebp, esp
.text:00006D5B                 push    ecx
.text:00006D5C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006D63                 mov     [ebp+var_4], ecx
.text:00006D66                 mov     eax, [ebp+var_4]
.text:00006D69                 mov     eax, [eax]
.text:00006D6B                 mov     esp, ebp
.text:00006D6D                 pop     ebp
.text:00006D6E                 retn
.text:00006D6E ?Front@?$CRecordVector@PAUISequentialOutStream@@@@QAEAAPAUISequentialOutStream@@XZ endp
.text:00006D6E
.text:00006D6E ; ---------------------------------------------------------------------------
.text:00006D6F                 align 10h
.text:00006D6F _text           ends
.text:00006D6F
.text:00006D70 ; ===========================================================================
.text:00006D70
.text:00006D70 ; Segment type: Pure code
.text:00006D70 ; Segment permissions: Read/Execute
.text:00006D70 _text           segment para public 'CODE' use32
.text:00006D70                 assume cs:_text
.text:00006D70                 ;org 6D70h
.text:00006D70 ; COMDAT (pick any)
.text:00006D70                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006D70
.text:00006D70 ; =============== S U B R O U T I N E =======================================
.text:00006D70
.text:00006D70 ; Attributes: bp-based frame
.text:00006D70
.text:00006D70 ; public: __thiscall CObjectVector<class CMyComPtr<struct ISequentialOutStream>>::CObjectVector<class CMyComPtr<struct ISequentialOutStream>>(void)
.text:00006D70                 public ??0?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
.text:00006D70 ??0?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ proc near
.text:00006D70                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+E9p
.text:00006D70
.text:00006D70 var_4           = dword ptr -4
.text:00006D70
.text:00006D70                 push    ebp
.text:00006D71                 mov     ebp, esp
.text:00006D73                 push    ecx
.text:00006D74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006D7B                 mov     [ebp+var_4], ecx
.text:00006D7E                 mov     ecx, [ebp+var_4]
.text:00006D81                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00006D86                 mov     eax, [ebp+var_4]
.text:00006D89                 add     esp, 4
.text:00006D8C                 cmp     ebp, esp
.text:00006D8E                 call    __RTC_CheckEsp
.text:00006D93                 mov     esp, ebp
.text:00006D95                 pop     ebp
.text:00006D96                 retn
.text:00006D96 ??0?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ endp
.text:00006D96
.text:00006D96 ; ---------------------------------------------------------------------------
.text:00006D97                 align 4
.text:00006D97 _text           ends
.text:00006D97
.text:00006D98 ; ===========================================================================
.text:00006D98
.text:00006D98 ; Segment type: Pure code
.text:00006D98 ; Segment permissions: Read/Execute
.text:00006D98 _text           segment para public 'CODE' use32
.text:00006D98                 assume cs:_text
.text:00006D98                 ;org 6D98h
.text:00006D98 ; COMDAT (pick any)
.text:00006D98                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006D98
.text:00006D98 ; =============== S U B R O U T I N E =======================================
.text:00006D98
.text:00006D98 ; Attributes: bp-based frame
.text:00006D98
.text:00006D98 ; public: class CMyComPtr<struct ISequentialOutStream> & __thiscall CObjectVector<class CMyComPtr<struct ISequentialOutStream>>::operator[](unsigned int)
.text:00006D98                 public ??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z
.text:00006D98 ??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z proc near
.text:00006D98                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+7DEp
.text:00006D98
.text:00006D98 var_4           = dword ptr -4
.text:00006D98 arg_0           = dword ptr  8
.text:00006D98
.text:00006D98                 push    ebp
.text:00006D99                 mov     ebp, esp
.text:00006D9B                 push    ecx
.text:00006D9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006DA3                 mov     [ebp+var_4], ecx
.text:00006DA6                 mov     eax, [ebp+arg_0]
.text:00006DA9                 push    eax
.text:00006DAA                 mov     ecx, [ebp+var_4]
.text:00006DAD                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00006DB2                 mov     eax, [eax]
.text:00006DB4                 add     esp, 4
.text:00006DB7                 cmp     ebp, esp
.text:00006DB9                 call    __RTC_CheckEsp
.text:00006DBE                 mov     esp, ebp
.text:00006DC0                 pop     ebp
.text:00006DC1                 retn    4
.text:00006DC1 ??A?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEAAV?$CMyComPtr@UISequentialOutStream@@@@I@Z endp
.text:00006DC1
.text:00006DC1 _text           ends
.text:00006DC1
.text:00006DC4 ; ===========================================================================
.text:00006DC4
.text:00006DC4 ; Segment type: Pure code
.text:00006DC4 ; Segment permissions: Read/Execute
.text:00006DC4 _text           segment para public 'CODE' use32
.text:00006DC4                 assume cs:_text
.text:00006DC4                 ;org 6DC4h
.text:00006DC4 ; COMDAT (pick any)
.text:00006DC4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006DC4
.text:00006DC4 ; =============== S U B R O U T I N E =======================================
.text:00006DC4
.text:00006DC4 ; Attributes: bp-based frame
.text:00006DC4
.text:00006DC4 ; public: unsigned int __thiscall CObjectVector<class CMyComPtr<struct ISequentialOutStream>>::Add(class CMyComPtr<struct ISequentialOutStream> const &)
.text:00006DC4                 public ?Add@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEIABV?$CMyComPtr@UISequentialOutStream@@@@@Z
.text:00006DC4 ?Add@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEIABV?$CMyComPtr@UISequentialOutStream@@@@@Z proc near
.text:00006DC4                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+1F6p
.text:00006DC4
.text:00006DC4 var_C           = dword ptr -0Ch
.text:00006DC4 var_8           = dword ptr -8
.text:00006DC4 var_4           = dword ptr -4
.text:00006DC4 arg_0           = dword ptr  8
.text:00006DC4
.text:00006DC4                 push    ebp
.text:00006DC5                 mov     ebp, esp
.text:00006DC7                 sub     esp, 0Ch
.text:00006DCA                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00006DD1                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006DD8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006DDF                 mov     [ebp+var_4], ecx
.text:00006DE2                 push    4               ; unsigned int
.text:00006DE4                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006DE9                 add     esp, 4
.text:00006DEC                 mov     [ebp+var_8], eax
.text:00006DEF                 cmp     [ebp+var_8], 0
.text:00006DF3                 jz      short loc_6E06
.text:00006DF5                 mov     eax, [ebp+arg_0]
.text:00006DF8                 push    eax
.text:00006DF9                 mov     ecx, [ebp+var_8]
.text:00006DFC                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(CMyComPtr<ISequentialOutStream> const &)
.text:00006E01                 mov     [ebp+var_C], eax
.text:00006E04                 jmp     short loc_6E0D
.text:00006E06 ; ---------------------------------------------------------------------------
.text:00006E06
.text:00006E06 loc_6E06:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::Add(CMyComPtr<ISequentialOutStream> const &)+2Fj
.text:00006E06                 mov     [ebp+var_C], 0
.text:00006E0D
.text:00006E0D loc_6E0D:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::Add(CMyComPtr<ISequentialOutStream> const &)+40j
.text:00006E0D                 mov     ecx, [ebp+var_C]
.text:00006E10                 push    ecx
.text:00006E11                 mov     ecx, [ebp+var_4]
.text:00006E14                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00006E19                 add     esp, 0Ch
.text:00006E1C                 cmp     ebp, esp
.text:00006E1E                 call    __RTC_CheckEsp
.text:00006E23                 mov     esp, ebp
.text:00006E25                 pop     ebp
.text:00006E26                 retn    4
.text:00006E26 ?Add@?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAEIABV?$CMyComPtr@UISequentialOutStream@@@@@Z endp
.text:00006E26
.text:00006E26 ; ---------------------------------------------------------------------------
.text:00006E29                 align 4
.text:00006E29 _text           ends
.text:00006E29
.text:00006E2C ; ===========================================================================
.text:00006E2C
.text:00006E2C ; Segment type: Pure code
.text:00006E2C ; Segment permissions: Read/Execute
.text:00006E2C _text           segment para public 'CODE' use32
.text:00006E2C                 assume cs:_text
.text:00006E2C                 ;org 6E2Ch
.text:00006E2C ; COMDAT (pick any)
.text:00006E2C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006E2C
.text:00006E2C ; =============== S U B R O U T I N E =======================================
.text:00006E2C
.text:00006E2C ; Attributes: bp-based frame
.text:00006E2C
.text:00006E2C ; public: __thiscall CObjectVector<class CMyComPtr<struct ISequentialOutStream>>::~CObjectVector<class CMyComPtr<struct ISequentialOutStream>>(void)
.text:00006E2C                 public ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
.text:00006E2C ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ proc near
.text:00006E2C                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+8A6p
.text:00006E2C                                         ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+9AAp ...
.text:00006E2C
.text:00006E2C var_20          = dword ptr -20h
.text:00006E2C var_1C          = dword ptr -1Ch
.text:00006E2C var_18          = dword ptr -18h
.text:00006E2C var_14          = dword ptr -14h
.text:00006E2C var_10          = dword ptr -10h
.text:00006E2C var_C           = dword ptr -0Ch
.text:00006E2C var_4           = dword ptr -4
.text:00006E2C
.text:00006E2C                 push    ebp
.text:00006E2D                 mov     ebp, esp
.text:00006E2F                 push    0FFFFFFFFh
.text:00006E31                 push    offset __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
.text:00006E36                 mov     eax, large fs:0
.text:00006E3C                 push    eax
.text:00006E3D                 sub     esp, 14h
.text:00006E40                 mov     eax, 0CCCCCCCCh
.text:00006E45                 mov     [ebp+var_20], eax
.text:00006E48                 mov     [ebp+var_1C], eax
.text:00006E4B                 mov     [ebp+var_18], eax
.text:00006E4E                 mov     [ebp+var_14], eax
.text:00006E51                 mov     [ebp+var_10], eax
.text:00006E54                 mov     eax, dword ptr ds:___security_cookie
.text:00006E59                 xor     eax, ebp
.text:00006E5B                 push    eax
.text:00006E5C                 lea     eax, [ebp+var_C]
.text:00006E5F                 mov     large fs:0, eax
.text:00006E65                 mov     [ebp+var_10], ecx
.text:00006E68                 mov     [ebp+var_4], 0
.text:00006E6F                 mov     ecx, [ebp+var_10]
.text:00006E72                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00006E77                 mov     [ebp+var_14], eax
.text:00006E7A
.text:00006E7A loc_6E7A:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void):loc_6EBCj
.text:00006E7A                 cmp     [ebp+var_14], 0
.text:00006E7E                 jz      short loc_6EBE
.text:00006E80                 mov     eax, [ebp+var_14]
.text:00006E83                 sub     eax, 1
.text:00006E86                 mov     [ebp+var_14], eax
.text:00006E89                 mov     ecx, [ebp+var_14]
.text:00006E8C                 push    ecx
.text:00006E8D                 mov     ecx, [ebp+var_10]
.text:00006E90                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00006E95                 mov     edx, [eax]
.text:00006E97                 mov     [ebp+var_1C], edx
.text:00006E9A                 mov     eax, [ebp+var_1C]
.text:00006E9D                 mov     [ebp+var_18], eax
.text:00006EA0                 cmp     [ebp+var_18], 0
.text:00006EA4                 jz      short loc_6EB5
.text:00006EA6                 push    1
.text:00006EA8                 mov     ecx, [ebp+var_18]
.text:00006EAB                 call    ??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z ; CMyComPtr<ISequentialOutStream>::`scalar deleting destructor'(uint)
.text:00006EB0                 mov     [ebp+var_20], eax
.text:00006EB3                 jmp     short loc_6EBC
.text:00006EB5 ; ---------------------------------------------------------------------------
.text:00006EB5
.text:00006EB5 loc_6EB5:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)+78j
.text:00006EB5                 mov     [ebp+var_20], 0
.text:00006EBC
.text:00006EBC loc_6EBC:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)+87j
.text:00006EBC                 jmp     short loc_6E7A
.text:00006EBE ; ---------------------------------------------------------------------------
.text:00006EBE
.text:00006EBE loc_6EBE:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)+52j
.text:00006EBE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006EC5                 mov     ecx, [ebp+var_10]
.text:00006EC8                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00006ECD                 mov     ecx, [ebp+var_C]
.text:00006ED0                 mov     large fs:0, ecx
.text:00006ED7                 pop     ecx
.text:00006ED8                 add     esp, 20h
.text:00006EDB                 cmp     ebp, esp
.text:00006EDD                 call    __RTC_CheckEsp
.text:00006EE2                 mov     esp, ebp
.text:00006EE4                 pop     ebp
.text:00006EE5                 retn
.text:00006EE5 ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ endp
.text:00006EE5
.text:00006EE5 ; ---------------------------------------------------------------------------
.text:00006EE6                 align 4
.text:00006EE6 _text           ends
.text:00006EE6
.text$x:00006EE8 ; ===========================================================================
.text$x:00006EE8
.text$x:00006EE8 ; Segment type: Pure code
.text$x:00006EE8 ; Segment permissions: Read/Execute
.text$x:00006EE8 _text$x         segment para public 'CODE' use32
.text$x:00006EE8                 assume cs:_text$x
.text$x:00006EE8                 ;org 6EE8h
.text$x:00006EE8 ; COMDAT (pick associative to section at 6E2C)
.text$x:00006EE8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00006EE8
.text$x:00006EE8 ; =============== S U B R O U T I N E =======================================
.text$x:00006EE8
.text$x:00006EE8
.text$x:00006EE8 __unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ$0 proc near
.text$x:00006EE8                                         ; DATA XREF: .xdata$x:00006F10o
.text$x:00006EE8                 mov     ecx, [ebp-10h]
.text$x:00006EEB                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00006EEB __unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ$0 endp
.text$x:00006EEB
.text$x:00006EF0
.text$x:00006EF0 ; =============== S U B R O U T I N E =======================================
.text$x:00006EF0
.text$x:00006EF0
.text$x:00006EF0 __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ proc near
.text$x:00006EF0                                         ; DATA XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)+5o
.text$x:00006EF0
.text$x:00006EF0 arg_4           = dword ptr  8
.text$x:00006EF0
.text$x:00006EF0                 mov     edx, [esp+arg_4]
.text$x:00006EF4                 lea     eax, [edx+0Ch]
.text$x:00006EF7                 mov     ecx, [edx-18h]
.text$x:00006EFA                 xor     ecx, eax
.text$x:00006EFC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006F01                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
.text$x:00006F06                 jmp     ___CxxFrameHandler3
.text$x:00006F06 __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ endp
.text$x:00006F06
.text$x:00006F06 ; ---------------------------------------------------------------------------
.text$x:00006F0B                 align 4
.text$x:00006F0B _text$x         ends
.text$x:00006F0B
.xdata$x:00006F0C ; ===========================================================================
.xdata$x:00006F0C
.xdata$x:00006F0C ; Segment type: Pure data
.xdata$x:00006F0C ; Segment permissions: Read
.xdata$x:00006F0C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006F0C                 assume cs:_xdata$x
.xdata$x:00006F0C                 ;org 6F0Ch
.xdata$x:00006F0C ; COMDAT (pick associative to section at 6E2C)
.xdata$x:00006F0C __unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ db 0FFh
.xdata$x:00006F0C                                         ; DATA XREF: .xdata$x:00006F1Co
.xdata$x:00006F0D                 db 0FFh
.xdata$x:00006F0E                 db 0FFh
.xdata$x:00006F0F                 db 0FFh
.xdata$x:00006F10                 dd offset __unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ$0
.xdata$x:00006F14 __ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ db  22h ; "
.xdata$x:00006F14                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ+11o
.xdata$x:00006F15                 db    5
.xdata$x:00006F16                 db  93h ; ô
.xdata$x:00006F17                 db  19h
.xdata$x:00006F18                 db    1
.xdata$x:00006F19                 db    0
.xdata$x:00006F1A                 db    0
.xdata$x:00006F1B                 db    0
.xdata$x:00006F1C                 dd offset __unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
.xdata$x:00006F20                 db    0
.xdata$x:00006F21                 db    0
.xdata$x:00006F22                 db    0
.xdata$x:00006F23                 db    0
.xdata$x:00006F24                 db    0
.xdata$x:00006F25                 db    0
.xdata$x:00006F26                 db    0
.xdata$x:00006F27                 db    0
.xdata$x:00006F28                 db    0
.xdata$x:00006F29                 db    0
.xdata$x:00006F2A                 db    0
.xdata$x:00006F2B                 db    0
.xdata$x:00006F2C                 db    0
.xdata$x:00006F2D                 db    0
.xdata$x:00006F2E                 db    0
.xdata$x:00006F2F                 db    0
.xdata$x:00006F30                 db    0
.xdata$x:00006F31                 db    0
.xdata$x:00006F32                 db    0
.xdata$x:00006F33                 db    0
.xdata$x:00006F34                 db    1
.xdata$x:00006F35                 db    0
.xdata$x:00006F36                 db    0
.xdata$x:00006F37                 db    0
.xdata$x:00006F37 _xdata$x        ends
.xdata$x:00006F37
.text:00006F38 ; ===========================================================================
.text:00006F38
.text:00006F38 ; Segment type: Pure code
.text:00006F38 ; Segment permissions: Read/Execute
.text:00006F38 _text           segment para public 'CODE' use32
.text:00006F38                 assume cs:_text
.text:00006F38                 ;org 6F38h
.text:00006F38 ; COMDAT (pick any)
.text:00006F38                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006F38
.text:00006F38 ; =============== S U B R O U T I N E =======================================
.text:00006F38
.text:00006F38 ; Attributes: bp-based frame
.text:00006F38
.text:00006F38 ; public: __thiscall CObjectVector<class CStreamBinder>::CObjectVector<class CStreamBinder>(void)
.text:00006F38                 public ??0?$CObjectVector@VCStreamBinder@@@@QAE@XZ
.text:00006F38 ??0?$CObjectVector@VCStreamBinder@@@@QAE@XZ proc near
.text:00006F38                                         ; CODE XREF: NCoderMixer2::CMixerMT::CMixerMT(bool)+70p
.text:00006F38
.text:00006F38 var_4           = dword ptr -4
.text:00006F38
.text:00006F38                 push    ebp
.text:00006F39                 mov     ebp, esp
.text:00006F3B                 push    ecx
.text:00006F3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006F43                 mov     [ebp+var_4], ecx
.text:00006F46                 mov     ecx, [ebp+var_4]
.text:00006F49                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00006F4E                 mov     eax, [ebp+var_4]
.text:00006F51                 add     esp, 4
.text:00006F54                 cmp     ebp, esp
.text:00006F56                 call    __RTC_CheckEsp
.text:00006F5B                 mov     esp, ebp
.text:00006F5D                 pop     ebp
.text:00006F5E                 retn
.text:00006F5E ??0?$CObjectVector@VCStreamBinder@@@@QAE@XZ endp
.text:00006F5E
.text:00006F5E ; ---------------------------------------------------------------------------
.text:00006F5F                 align 10h
.text:00006F5F _text           ends
.text:00006F5F
.text:00006F60 ; ===========================================================================
.text:00006F60
.text:00006F60 ; Segment type: Pure code
.text:00006F60 ; Segment permissions: Read/Execute
.text:00006F60 _text           segment para public 'CODE' use32
.text:00006F60                 assume cs:_text
.text:00006F60                 ;org 6F60h
.text:00006F60 ; COMDAT (pick any)
.text:00006F60                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006F60
.text:00006F60 ; =============== S U B R O U T I N E =======================================
.text:00006F60
.text:00006F60 ; Attributes: bp-based frame
.text:00006F60
.text:00006F60 ; public: __thiscall CObjectVector<class CStreamBinder>::~CObjectVector<class CStreamBinder>(void)
.text:00006F60                 public ??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ
.text:00006F60 ??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ proc near
.text:00006F60                                         ; CODE XREF: __unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$1+6j
.text:00006F60                                         ; NCoderMixer2::CMixerMT::~CMixerMT(void)+49p ...
.text:00006F60
.text:00006F60 var_20          = dword ptr -20h
.text:00006F60 var_1C          = dword ptr -1Ch
.text:00006F60 var_18          = dword ptr -18h
.text:00006F60 var_14          = dword ptr -14h
.text:00006F60 var_10          = dword ptr -10h
.text:00006F60 var_C           = dword ptr -0Ch
.text:00006F60 var_4           = dword ptr -4
.text:00006F60
.text:00006F60                 push    ebp
.text:00006F61                 mov     ebp, esp
.text:00006F63                 push    0FFFFFFFFh
.text:00006F65                 push    offset __ehhandler$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ
.text:00006F6A                 mov     eax, large fs:0
.text:00006F70                 push    eax
.text:00006F71                 sub     esp, 14h
.text:00006F74                 mov     eax, 0CCCCCCCCh
.text:00006F79                 mov     [ebp+var_20], eax
.text:00006F7C                 mov     [ebp+var_1C], eax
.text:00006F7F                 mov     [ebp+var_18], eax
.text:00006F82                 mov     [ebp+var_14], eax
.text:00006F85                 mov     [ebp+var_10], eax
.text:00006F88                 mov     eax, dword ptr ds:___security_cookie
.text:00006F8D                 xor     eax, ebp
.text:00006F8F                 push    eax
.text:00006F90                 lea     eax, [ebp+var_C]
.text:00006F93                 mov     large fs:0, eax
.text:00006F99                 mov     [ebp+var_10], ecx
.text:00006F9C                 mov     [ebp+var_4], 0
.text:00006FA3                 mov     ecx, [ebp+var_10]
.text:00006FA6                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00006FAB                 mov     [ebp+var_14], eax
.text:00006FAE
.text:00006FAE loc_6FAE:                               ; CODE XREF: CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>(void):loc_6FF0j
.text:00006FAE                 cmp     [ebp+var_14], 0
.text:00006FB2                 jz      short loc_6FF2
.text:00006FB4                 mov     eax, [ebp+var_14]
.text:00006FB7                 sub     eax, 1
.text:00006FBA                 mov     [ebp+var_14], eax
.text:00006FBD                 mov     ecx, [ebp+var_14]
.text:00006FC0                 push    ecx
.text:00006FC1                 mov     ecx, [ebp+var_10]
.text:00006FC4                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00006FC9                 mov     edx, [eax]
.text:00006FCB                 mov     [ebp+var_1C], edx
.text:00006FCE                 mov     eax, [ebp+var_1C]
.text:00006FD1                 mov     [ebp+var_18], eax
.text:00006FD4                 cmp     [ebp+var_18], 0
.text:00006FD8                 jz      short loc_6FE9
.text:00006FDA                 push    1
.text:00006FDC                 mov     ecx, [ebp+var_18]
.text:00006FDF                 call    ??_GCStreamBinder@@QAEPAXI@Z ; CStreamBinder::`scalar deleting destructor'(uint)
.text:00006FE4                 mov     [ebp+var_20], eax
.text:00006FE7                 jmp     short loc_6FF0
.text:00006FE9 ; ---------------------------------------------------------------------------
.text:00006FE9
.text:00006FE9 loc_6FE9:                               ; CODE XREF: CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>(void)+78j
.text:00006FE9                 mov     [ebp+var_20], 0
.text:00006FF0
.text:00006FF0 loc_6FF0:                               ; CODE XREF: CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>(void)+87j
.text:00006FF0                 jmp     short loc_6FAE
.text:00006FF2 ; ---------------------------------------------------------------------------
.text:00006FF2
.text:00006FF2 loc_6FF2:                               ; CODE XREF: CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>(void)+52j
.text:00006FF2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006FF9                 mov     ecx, [ebp+var_10]
.text:00006FFC                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00007001                 mov     ecx, [ebp+var_C]
.text:00007004                 mov     large fs:0, ecx
.text:0000700B                 pop     ecx
.text:0000700C                 add     esp, 20h
.text:0000700F                 cmp     ebp, esp
.text:00007011                 call    __RTC_CheckEsp
.text:00007016                 mov     esp, ebp
.text:00007018                 pop     ebp
.text:00007019                 retn
.text:00007019 ??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ endp
.text:00007019
.text:00007019 ; ---------------------------------------------------------------------------
.text:0000701A                 align 4
.text:0000701A _text           ends
.text:0000701A
.text$x:0000701C ; ===========================================================================
.text$x:0000701C
.text$x:0000701C ; Segment type: Pure code
.text$x:0000701C ; Segment permissions: Read/Execute
.text$x:0000701C _text$x         segment para public 'CODE' use32
.text$x:0000701C                 assume cs:_text$x
.text$x:0000701C                 ;org 701Ch
.text$x:0000701C ; COMDAT (pick associative to section at 6F60)
.text$x:0000701C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000701C
.text$x:0000701C ; =============== S U B R O U T I N E =======================================
.text$x:0000701C
.text$x:0000701C
.text$x:0000701C __unwindfunclet$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ$0 proc near
.text$x:0000701C                                         ; DATA XREF: .xdata$x:00007044o
.text$x:0000701C                 mov     ecx, [ebp-10h]
.text$x:0000701F                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000701F __unwindfunclet$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ$0 endp
.text$x:0000701F
.text$x:00007024
.text$x:00007024 ; =============== S U B R O U T I N E =======================================
.text$x:00007024
.text$x:00007024
.text$x:00007024 __ehhandler$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ proc near
.text$x:00007024                                         ; DATA XREF: CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>(void)+5o
.text$x:00007024
.text$x:00007024 arg_4           = dword ptr  8
.text$x:00007024
.text$x:00007024                 mov     edx, [esp+arg_4]
.text$x:00007028                 lea     eax, [edx+0Ch]
.text$x:0000702B                 mov     ecx, [edx-18h]
.text$x:0000702E                 xor     ecx, eax
.text$x:00007030                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007035                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ
.text$x:0000703A                 jmp     ___CxxFrameHandler3
.text$x:0000703A __ehhandler$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ endp
.text$x:0000703A
.text$x:0000703A ; ---------------------------------------------------------------------------
.text$x:0000703F                 align 10h
.text$x:0000703F _text$x         ends
.text$x:0000703F
.xdata$x:00007040 ; ===========================================================================
.xdata$x:00007040
.xdata$x:00007040 ; Segment type: Pure data
.xdata$x:00007040 ; Segment permissions: Read
.xdata$x:00007040 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007040                 assume cs:_xdata$x
.xdata$x:00007040                 ;org 7040h
.xdata$x:00007040 ; COMDAT (pick associative to section at 6F60)
.xdata$x:00007040 __unwindtable$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ db 0FFh
.xdata$x:00007040                                         ; DATA XREF: .xdata$x:00007050o
.xdata$x:00007041                 db 0FFh
.xdata$x:00007042                 db 0FFh
.xdata$x:00007043                 db 0FFh
.xdata$x:00007044                 dd offset __unwindfunclet$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ$0
.xdata$x:00007048 __ehfuncinfo$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ db  22h ; "
.xdata$x:00007048                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ+11o
.xdata$x:00007049                 db    5
.xdata$x:0000704A                 db  93h ; ô
.xdata$x:0000704B                 db  19h
.xdata$x:0000704C                 db    1
.xdata$x:0000704D                 db    0
.xdata$x:0000704E                 db    0
.xdata$x:0000704F                 db    0
.xdata$x:00007050                 dd offset __unwindtable$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ
.xdata$x:00007054                 db    0
.xdata$x:00007055                 db    0
.xdata$x:00007056                 db    0
.xdata$x:00007057                 db    0
.xdata$x:00007058                 db    0
.xdata$x:00007059                 db    0
.xdata$x:0000705A                 db    0
.xdata$x:0000705B                 db    0
.xdata$x:0000705C                 db    0
.xdata$x:0000705D                 db    0
.xdata$x:0000705E                 db    0
.xdata$x:0000705F                 db    0
.xdata$x:00007060                 db    0
.xdata$x:00007061                 db    0
.xdata$x:00007062                 db    0
.xdata$x:00007063                 db    0
.xdata$x:00007064                 db    0
.xdata$x:00007065                 db    0
.xdata$x:00007066                 db    0
.xdata$x:00007067                 db    0
.xdata$x:00007068                 db    1
.xdata$x:00007069                 db    0
.xdata$x:0000706A                 db    0
.xdata$x:0000706B                 db    0
.xdata$x:0000706B _xdata$x        ends
.xdata$x:0000706B
.text:0000706C ; ===========================================================================
.text:0000706C
.text:0000706C ; Segment type: Pure code
.text:0000706C ; Segment permissions: Read/Execute
.text:0000706C _text           segment para public 'CODE' use32
.text:0000706C                 assume cs:_text
.text:0000706C                 ;org 706Ch
.text:0000706C ; COMDAT (pick any)
.text:0000706C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000706C
.text:0000706C ; =============== S U B R O U T I N E =======================================
.text:0000706C
.text:0000706C ; Attributes: bp-based frame
.text:0000706C
.text:0000706C ; public: __thiscall CObjectVector<class NCoderMixer2::CCoderMT>::CObjectVector<class NCoderMixer2::CCoderMT>(void)
.text:0000706C                 public ??0?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ
.text:0000706C ??0?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ proc near
.text:0000706C                                         ; CODE XREF: NCoderMixer2::CMixerMT::CMixerMT(bool)+7Fp
.text:0000706C
.text:0000706C var_4           = dword ptr -4
.text:0000706C
.text:0000706C                 push    ebp
.text:0000706D                 mov     ebp, esp
.text:0000706F                 push    ecx
.text:00007070                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007077                 mov     [ebp+var_4], ecx
.text:0000707A                 mov     ecx, [ebp+var_4]
.text:0000707D                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00007082                 mov     eax, [ebp+var_4]
.text:00007085                 add     esp, 4
.text:00007088                 cmp     ebp, esp
.text:0000708A                 call    __RTC_CheckEsp
.text:0000708F                 mov     esp, ebp
.text:00007091                 pop     ebp
.text:00007092                 retn
.text:00007092 ??0?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ endp
.text:00007092
.text:00007092 ; ---------------------------------------------------------------------------
.text:00007093                 align 4
.text:00007093 _text           ends
.text:00007093
.text:00007094 ; ===========================================================================
.text:00007094
.text:00007094 ; Segment type: Pure code
.text:00007094 ; Segment permissions: Read/Execute
.text:00007094 _text           segment para public 'CODE' use32
.text:00007094                 assume cs:_text
.text:00007094                 ;org 7094h
.text:00007094 ; COMDAT (pick any)
.text:00007094                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007094
.text:00007094 ; =============== S U B R O U T I N E =======================================
.text:00007094
.text:00007094 ; Attributes: bp-based frame
.text:00007094
.text:00007094 ; public: class NCoderMixer2::CCoderMT & __thiscall CObjectVector<class NCoderMixer2::CCoderMT>::operator[](unsigned int)
.text:00007094                 public ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z
.text:00007094 ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z proc near
.text:00007094                                         ; CODE XREF: NCoderMixer2::CMixerMT::SetCoderInfo(uint,unsigned __int64 const *,unsigned __int64 const * const *)+20p
.text:00007094
.text:00007094 var_4           = dword ptr -4
.text:00007094 arg_0           = dword ptr  8
.text:00007094
.text:00007094                 push    ebp
.text:00007095                 mov     ebp, esp
.text:00007097                 push    ecx
.text:00007098                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000709F                 mov     [ebp+var_4], ecx
.text:000070A2                 mov     eax, [ebp+arg_0]
.text:000070A5                 push    eax
.text:000070A6                 mov     ecx, [ebp+var_4]
.text:000070A9                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000070AE                 mov     eax, [eax]
.text:000070B0                 add     esp, 4
.text:000070B3                 cmp     ebp, esp
.text:000070B5                 call    __RTC_CheckEsp
.text:000070BA                 mov     esp, ebp
.text:000070BC                 pop     ebp
.text:000070BD                 retn    4
.text:000070BD ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z endp
.text:000070BD
.text:000070BD _text           ends
.text:000070BD
.text:000070C0 ; ===========================================================================
.text:000070C0
.text:000070C0 ; Segment type: Pure code
.text:000070C0 ; Segment permissions: Read/Execute
.text:000070C0 _text           segment para public 'CODE' use32
.text:000070C0                 assume cs:_text
.text:000070C0                 ;org 70C0h
.text:000070C0 ; COMDAT (pick any)
.text:000070C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000070C0
.text:000070C0 ; =============== S U B R O U T I N E =======================================
.text:000070C0
.text:000070C0 ; Attributes: bp-based frame
.text:000070C0
.text:000070C0 ; public: __thiscall CObjectVector<class NCoderMixer2::CCoderMT>::~CObjectVector<class NCoderMixer2::CCoderMT>(void)
.text:000070C0                 public ??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ
.text:000070C0 ??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ proc near
.text:000070C0                                         ; CODE XREF: NCoderMixer2::CMixerMT::~CMixerMT(void)+3Ap
.text:000070C0
.text:000070C0 var_20          = dword ptr -20h
.text:000070C0 var_1C          = dword ptr -1Ch
.text:000070C0 var_18          = dword ptr -18h
.text:000070C0 var_14          = dword ptr -14h
.text:000070C0 var_10          = dword ptr -10h
.text:000070C0 var_C           = dword ptr -0Ch
.text:000070C0 var_4           = dword ptr -4
.text:000070C0
.text:000070C0                 push    ebp
.text:000070C1                 mov     ebp, esp
.text:000070C3                 push    0FFFFFFFFh
.text:000070C5                 push    offset __ehhandler$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ
.text:000070CA                 mov     eax, large fs:0
.text:000070D0                 push    eax
.text:000070D1                 sub     esp, 14h
.text:000070D4                 mov     eax, 0CCCCCCCCh
.text:000070D9                 mov     [ebp+var_20], eax
.text:000070DC                 mov     [ebp+var_1C], eax
.text:000070DF                 mov     [ebp+var_18], eax
.text:000070E2                 mov     [ebp+var_14], eax
.text:000070E5                 mov     [ebp+var_10], eax
.text:000070E8                 mov     eax, dword ptr ds:___security_cookie
.text:000070ED                 xor     eax, ebp
.text:000070EF                 push    eax
.text:000070F0                 lea     eax, [ebp+var_C]
.text:000070F3                 mov     large fs:0, eax
.text:000070F9                 mov     [ebp+var_10], ecx
.text:000070FC                 mov     [ebp+var_4], 0
.text:00007103                 mov     ecx, [ebp+var_10]
.text:00007106                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000710B                 mov     [ebp+var_14], eax
.text:0000710E
.text:0000710E loc_710E:                               ; CODE XREF: CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>(void):loc_7150j
.text:0000710E                 cmp     [ebp+var_14], 0
.text:00007112                 jz      short loc_7152
.text:00007114                 mov     eax, [ebp+var_14]
.text:00007117                 sub     eax, 1
.text:0000711A                 mov     [ebp+var_14], eax
.text:0000711D                 mov     ecx, [ebp+var_14]
.text:00007120                 push    ecx
.text:00007121                 mov     ecx, [ebp+var_10]
.text:00007124                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00007129                 mov     edx, [eax]
.text:0000712B                 mov     [ebp+var_1C], edx
.text:0000712E                 mov     eax, [ebp+var_1C]
.text:00007131                 mov     [ebp+var_18], eax
.text:00007134                 cmp     [ebp+var_18], 0
.text:00007138                 jz      short loc_7149
.text:0000713A                 push    1
.text:0000713C                 mov     ecx, [ebp+var_18]
.text:0000713F                 call    ??_GCCoderMT@NCoderMixer2@@QAEPAXI@Z ; NCoderMixer2::CCoderMT::`scalar deleting destructor'(uint)
.text:00007144                 mov     [ebp+var_20], eax
.text:00007147                 jmp     short loc_7150
.text:00007149 ; ---------------------------------------------------------------------------
.text:00007149
.text:00007149 loc_7149:                               ; CODE XREF: CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>(void)+78j
.text:00007149                 mov     [ebp+var_20], 0
.text:00007150
.text:00007150 loc_7150:                               ; CODE XREF: CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>(void)+87j
.text:00007150                 jmp     short loc_710E
.text:00007152 ; ---------------------------------------------------------------------------
.text:00007152
.text:00007152 loc_7152:                               ; CODE XREF: CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>(void)+52j
.text:00007152                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007159                 mov     ecx, [ebp+var_10]
.text:0000715C                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00007161                 mov     ecx, [ebp+var_C]
.text:00007164                 mov     large fs:0, ecx
.text:0000716B                 pop     ecx
.text:0000716C                 add     esp, 20h
.text:0000716F                 cmp     ebp, esp
.text:00007171                 call    __RTC_CheckEsp
.text:00007176                 mov     esp, ebp
.text:00007178                 pop     ebp
.text:00007179                 retn
.text:00007179 ??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ endp
.text:00007179
.text:00007179 ; ---------------------------------------------------------------------------
.text:0000717A                 align 4
.text:0000717A _text           ends
.text:0000717A
.text$x:0000717C ; ===========================================================================
.text$x:0000717C
.text$x:0000717C ; Segment type: Pure code
.text$x:0000717C ; Segment permissions: Read/Execute
.text$x:0000717C _text$x         segment para public 'CODE' use32
.text$x:0000717C                 assume cs:_text$x
.text$x:0000717C                 ;org 717Ch
.text$x:0000717C ; COMDAT (pick associative to section at 70C0)
.text$x:0000717C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000717C
.text$x:0000717C ; =============== S U B R O U T I N E =======================================
.text$x:0000717C
.text$x:0000717C
.text$x:0000717C __unwindfunclet$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ$0 proc near
.text$x:0000717C                                         ; DATA XREF: .xdata$x:000071A4o
.text$x:0000717C                 mov     ecx, [ebp-10h]
.text$x:0000717F                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000717F __unwindfunclet$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ$0 endp
.text$x:0000717F
.text$x:00007184
.text$x:00007184 ; =============== S U B R O U T I N E =======================================
.text$x:00007184
.text$x:00007184
.text$x:00007184 __ehhandler$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ proc near
.text$x:00007184                                         ; DATA XREF: CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>(void)+5o
.text$x:00007184
.text$x:00007184 arg_4           = dword ptr  8
.text$x:00007184
.text$x:00007184                 mov     edx, [esp+arg_4]
.text$x:00007188                 lea     eax, [edx+0Ch]
.text$x:0000718B                 mov     ecx, [edx-18h]
.text$x:0000718E                 xor     ecx, eax
.text$x:00007190                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007195                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ
.text$x:0000719A                 jmp     ___CxxFrameHandler3
.text$x:0000719A __ehhandler$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ endp
.text$x:0000719A
.text$x:0000719A ; ---------------------------------------------------------------------------
.text$x:0000719F                 align 10h
.text$x:0000719F _text$x         ends
.text$x:0000719F
.xdata$x:000071A0 ; ===========================================================================
.xdata$x:000071A0
.xdata$x:000071A0 ; Segment type: Pure data
.xdata$x:000071A0 ; Segment permissions: Read
.xdata$x:000071A0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000071A0                 assume cs:_xdata$x
.xdata$x:000071A0                 ;org 71A0h
.xdata$x:000071A0 ; COMDAT (pick associative to section at 70C0)
.xdata$x:000071A0 __unwindtable$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ db 0FFh
.xdata$x:000071A0                                         ; DATA XREF: .xdata$x:000071B0o
.xdata$x:000071A1                 db 0FFh
.xdata$x:000071A2                 db 0FFh
.xdata$x:000071A3                 db 0FFh
.xdata$x:000071A4                 dd offset __unwindfunclet$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ$0
.xdata$x:000071A8 __ehfuncinfo$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ db  22h ; "
.xdata$x:000071A8                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ+11o
.xdata$x:000071A9                 db    5
.xdata$x:000071AA                 db  93h ; ô
.xdata$x:000071AB                 db  19h
.xdata$x:000071AC                 db    1
.xdata$x:000071AD                 db    0
.xdata$x:000071AE                 db    0
.xdata$x:000071AF                 db    0
.xdata$x:000071B0                 dd offset __unwindtable$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ
.xdata$x:000071B4                 db    0
.xdata$x:000071B5                 db    0
.xdata$x:000071B6                 db    0
.xdata$x:000071B7                 db    0
.xdata$x:000071B8                 db    0
.xdata$x:000071B9                 db    0
.xdata$x:000071BA                 db    0
.xdata$x:000071BB                 db    0
.xdata$x:000071BC                 db    0
.xdata$x:000071BD                 db    0
.xdata$x:000071BE                 db    0
.xdata$x:000071BF                 db    0
.xdata$x:000071C0                 db    0
.xdata$x:000071C1                 db    0
.xdata$x:000071C2                 db    0
.xdata$x:000071C3                 db    0
.xdata$x:000071C4                 db    0
.xdata$x:000071C5                 db    0
.xdata$x:000071C6                 db    0
.xdata$x:000071C7                 db    0
.xdata$x:000071C8                 db    1
.xdata$x:000071C9                 db    0
.xdata$x:000071CA                 db    0
.xdata$x:000071CB                 db    0
.xdata$x:000071CB _xdata$x        ends
.xdata$x:000071CB
.text:000071CC ; ===========================================================================
.text:000071CC
.text:000071CC ; Segment type: Pure code
.text:000071CC ; Segment permissions: Read/Execute
.text:000071CC _text           segment para public 'CODE' use32
.text:000071CC                 assume cs:_text
.text:000071CC                 ;org 71CCh
.text:000071CC ; COMDAT (pick any)
.text:000071CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000071CC
.text:000071CC ; =============== S U B R O U T I N E =======================================
.text:000071CC
.text:000071CC ; Attributes: bp-based frame
.text:000071CC
.text:000071CC ; public: __thiscall CObjArray2<struct NArchive::N7z::CCoderInfo>::operator struct NArchive::N7z::CCoderInfo *(void)
.text:000071CC                 public ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ
.text:000071CC ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ proc near
.text:000071CC                                         ; CODE XREF: NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+104p
.text:000071CC                                         ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+425p
.text:000071CC
.text:000071CC var_4           = dword ptr -4
.text:000071CC
.text:000071CC                 push    ebp
.text:000071CD                 mov     ebp, esp
.text:000071CF                 push    ecx
.text:000071D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000071D7                 mov     [ebp+var_4], ecx
.text:000071DA                 mov     eax, [ebp+var_4]
.text:000071DD                 mov     eax, [eax]
.text:000071DF                 mov     esp, ebp
.text:000071E1                 pop     ebp
.text:000071E2                 retn
.text:000071E2 ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ endp
.text:000071E2
.text:000071E2 ; ---------------------------------------------------------------------------
.text:000071E3                 align 4
.text:000071E3 _text           ends
.text:000071E3
.text:000071E4 ; ===========================================================================
.text:000071E4
.text:000071E4 ; Segment type: Pure code
.text:000071E4 ; Segment permissions: Read/Execute
.text:000071E4 _text           segment para public 'CODE' use32
.text:000071E4                 assume cs:_text
.text:000071E4                 ;org 71E4h
.text:000071E4 ; COMDAT (pick any)
.text:000071E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000071E4
.text:000071E4 ; =============== S U B R O U T I N E =======================================
.text:000071E4
.text:000071E4 ; Attributes: bp-based frame
.text:000071E4
.text:000071E4 ; public: void __thiscall CObjArray2<struct NArchive::N7z::CCoderInfo>::SetSize(unsigned int)
.text:000071E4                 public ?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z
.text:000071E4 ?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z proc near
.text:000071E4                                         ; CODE XREF: NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+DAp
.text:000071E4
.text:000071E4 var_30          = dword ptr -30h
.text:000071E4 var_2C          = dword ptr -2Ch
.text:000071E4 var_28          = dword ptr -28h
.text:000071E4 var_24          = dword ptr -24h
.text:000071E4 var_20          = dword ptr -20h
.text:000071E4 var_1C          = dword ptr -1Ch
.text:000071E4 var_18          = dword ptr -18h
.text:000071E4 var_14          = dword ptr -14h
.text:000071E4 var_10          = dword ptr -10h
.text:000071E4 var_C           = dword ptr -0Ch
.text:000071E4 var_4           = dword ptr -4
.text:000071E4 arg_0           = dword ptr  8
.text:000071E4
.text:000071E4                 push    ebp
.text:000071E5                 mov     ebp, esp
.text:000071E7                 push    0FFFFFFFFh
.text:000071E9                 push    offset __ehhandler$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z
.text:000071EE                 mov     eax, large fs:0
.text:000071F4                 push    eax
.text:000071F5                 sub     esp, 24h
.text:000071F8                 mov     eax, 0CCCCCCCCh
.text:000071FD                 mov     [ebp+var_30], eax
.text:00007200                 mov     [ebp+var_2C], eax
.text:00007203                 mov     [ebp+var_28], eax
.text:00007206                 mov     [ebp+var_24], eax
.text:00007209                 mov     [ebp+var_20], eax
.text:0000720C                 mov     [ebp+var_1C], eax
.text:0000720F                 mov     [ebp+var_18], eax
.text:00007212                 mov     [ebp+var_14], eax
.text:00007215                 mov     [ebp+var_10], eax
.text:00007218                 mov     eax, dword ptr ds:___security_cookie
.text:0000721D                 xor     eax, ebp
.text:0000721F                 push    eax
.text:00007220                 lea     eax, [ebp+var_C]
.text:00007223                 mov     large fs:0, eax
.text:00007229                 mov     [ebp+var_10], ecx
.text:0000722C                 mov     eax, [ebp+var_10]
.text:0000722F                 mov     ecx, [ebp+arg_0]
.text:00007232                 cmp     ecx, [eax+4]
.text:00007235                 jnz     short loc_723C
.text:00007237                 jmp     loc_730F
.text:0000723C ; ---------------------------------------------------------------------------
.text:0000723C
.text:0000723C loc_723C:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+51j
.text:0000723C                 mov     [ebp+var_14], 0
.text:00007243                 cmp     [ebp+arg_0], 0
.text:00007247                 jz      loc_72D4
.text:0000724D                 mov     edx, [ebp+arg_0]
.text:00007250                 mov     [ebp+var_18], edx
.text:00007253                 xor     ecx, ecx
.text:00007255                 mov     eax, [ebp+var_18]
.text:00007258                 mov     edx, 18h
.text:0000725D                 mul     edx
.text:0000725F                 seto    cl
.text:00007262                 neg     ecx
.text:00007264                 or      ecx, eax
.text:00007266                 xor     eax, eax
.text:00007268                 add     ecx, 4
.text:0000726B                 setb    al
.text:0000726E                 neg     eax
.text:00007270                 or      eax, ecx
.text:00007272                 push    eax             ; unsigned int
.text:00007273                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00007278                 add     esp, 4
.text:0000727B                 mov     [ebp+var_20], eax
.text:0000727E                 mov     [ebp+var_4], 0
.text:00007285                 cmp     [ebp+var_20], 0
.text:00007289                 jz      short loc_72BA
.text:0000728B                 mov     ecx, [ebp+var_20]
.text:0000728E                 mov     edx, [ebp+var_18]
.text:00007291                 mov     [ecx], edx
.text:00007293                 push    offset ??1CCoderInfo@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCoderInfo::~CCoderInfo(void)
.text:00007298                 push    offset ??0CCoderInfo@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCoderInfo::CCoderInfo(void)
.text:0000729D                 mov     eax, [ebp+var_18]
.text:000072A0                 push    eax
.text:000072A1                 push    18h
.text:000072A3                 mov     ecx, [ebp+var_20]
.text:000072A6                 add     ecx, 4
.text:000072A9                 push    ecx
.text:000072AA                 call    ??_L@YGXPAXIHP6EX0@Z1@Z ; `eh vector constructor iterator'(void *,uint,int,void (*)(void *),void (*)(void *))
.text:000072AF                 mov     edx, [ebp+var_20]
.text:000072B2                 add     edx, 4
.text:000072B5                 mov     [ebp+var_2C], edx
.text:000072B8                 jmp     short loc_72C1
.text:000072BA ; ---------------------------------------------------------------------------
.text:000072BA
.text:000072BA loc_72BA:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+A5j
.text:000072BA                 mov     [ebp+var_2C], 0
.text:000072C1
.text:000072C1 loc_72C1:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+D4j
.text:000072C1                 mov     eax, [ebp+var_2C]
.text:000072C4                 mov     [ebp+var_1C], eax
.text:000072C7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000072CE                 mov     ecx, [ebp+var_1C]
.text:000072D1                 mov     [ebp+var_14], ecx
.text:000072D4
.text:000072D4 loc_72D4:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+63j
.text:000072D4                 mov     edx, [ebp+var_10]
.text:000072D7                 mov     eax, [edx]
.text:000072D9                 mov     [ebp+var_28], eax
.text:000072DC                 mov     ecx, [ebp+var_28]
.text:000072DF                 mov     [ebp+var_24], ecx
.text:000072E2                 cmp     [ebp+var_24], 0
.text:000072E6                 jz      short loc_72F7
.text:000072E8                 push    3
.text:000072EA                 mov     ecx, [ebp+var_24]
.text:000072ED                 call    ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)
.text:000072F2                 mov     [ebp+var_30], eax
.text:000072F5                 jmp     short loc_72FE
.text:000072F7 ; ---------------------------------------------------------------------------
.text:000072F7
.text:000072F7 loc_72F7:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+102j
.text:000072F7                 mov     [ebp+var_30], 0
.text:000072FE
.text:000072FE loc_72FE:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+111j
.text:000072FE                 mov     edx, [ebp+var_10]
.text:00007301                 mov     eax, [ebp+var_14]
.text:00007304                 mov     [edx], eax
.text:00007306                 mov     ecx, [ebp+var_10]
.text:00007309                 mov     edx, [ebp+arg_0]
.text:0000730C                 mov     [ecx+4], edx
.text:0000730F
.text:0000730F loc_730F:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+53j
.text:0000730F                 mov     ecx, [ebp+var_C]
.text:00007312                 mov     large fs:0, ecx
.text:00007319                 pop     ecx
.text:0000731A                 add     esp, 30h
.text:0000731D                 cmp     ebp, esp
.text:0000731F                 call    __RTC_CheckEsp
.text:00007324                 mov     esp, ebp
.text:00007326                 pop     ebp
.text:00007327                 retn    4
.text:00007327 ?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z endp
.text:00007327
.text:00007327 ; ---------------------------------------------------------------------------
.text:0000732A                 align 4
.text:0000732A _text           ends
.text:0000732A
.text$x:0000732C ; ===========================================================================
.text$x:0000732C
.text$x:0000732C ; Segment type: Pure code
.text$x:0000732C ; Segment permissions: Read/Execute
.text$x:0000732C _text$x         segment para public 'CODE' use32
.text$x:0000732C                 assume cs:_text$x
.text$x:0000732C                 ;org 732Ch
.text$x:0000732C ; COMDAT (pick associative to section at 71E4)
.text$x:0000732C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000732C
.text$x:0000732C ; =============== S U B R O U T I N E =======================================
.text$x:0000732C
.text$x:0000732C
.text$x:0000732C __unwindfunclet$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z$0 proc near
.text$x:0000732C                                         ; DATA XREF: .xdata$x:00007358o
.text$x:0000732C                 mov     eax, [ebp-20h]
.text$x:0000732F                 push    eax             ; void *
.text$x:00007330                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00007335                 pop     ecx
.text$x:00007336                 retn
.text$x:00007336 __unwindfunclet$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z$0 endp
.text$x:00007336
.text$x:00007337
.text$x:00007337 ; =============== S U B R O U T I N E =======================================
.text$x:00007337
.text$x:00007337
.text$x:00007337 __ehhandler$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z proc near
.text$x:00007337                                         ; DATA XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+5o
.text$x:00007337
.text$x:00007337 arg_4           = dword ptr  8
.text$x:00007337
.text$x:00007337                 mov     edx, [esp+arg_4]
.text$x:0000733B                 lea     eax, [edx+0Ch]
.text$x:0000733E                 mov     ecx, [edx-28h]
.text$x:00007341                 xor     ecx, eax
.text$x:00007343                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007348                 mov     eax, offset __ehfuncinfo$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z
.text$x:0000734D                 jmp     ___CxxFrameHandler3
.text$x:0000734D __ehhandler$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z endp
.text$x:0000734D
.text$x:0000734D ; ---------------------------------------------------------------------------
.text$x:00007352                 align 4
.text$x:00007352 _text$x         ends
.text$x:00007352
.xdata$x:00007354 ; ===========================================================================
.xdata$x:00007354
.xdata$x:00007354 ; Segment type: Pure data
.xdata$x:00007354 ; Segment permissions: Read
.xdata$x:00007354 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007354                 assume cs:_xdata$x
.xdata$x:00007354                 ;org 7354h
.xdata$x:00007354 ; COMDAT (pick associative to section at 71E4)
.xdata$x:00007354 __unwindtable$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z db 0FFh
.xdata$x:00007354                                         ; DATA XREF: .xdata$x:00007364o
.xdata$x:00007355                 db 0FFh
.xdata$x:00007356                 db 0FFh
.xdata$x:00007357                 db 0FFh
.xdata$x:00007358                 dd offset __unwindfunclet$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z$0
.xdata$x:0000735C __ehfuncinfo$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z db  22h ; "
.xdata$x:0000735C                                         ; DATA XREF: __ehhandler$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z+11o
.xdata$x:0000735D                 db    5
.xdata$x:0000735E                 db  93h ; ô
.xdata$x:0000735F                 db  19h
.xdata$x:00007360                 db    1
.xdata$x:00007361                 db    0
.xdata$x:00007362                 db    0
.xdata$x:00007363                 db    0
.xdata$x:00007364                 dd offset __unwindtable$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z
.xdata$x:00007368                 db    0
.xdata$x:00007369                 db    0
.xdata$x:0000736A                 db    0
.xdata$x:0000736B                 db    0
.xdata$x:0000736C                 db    0
.xdata$x:0000736D                 db    0
.xdata$x:0000736E                 db    0
.xdata$x:0000736F                 db    0
.xdata$x:00007370                 db    0
.xdata$x:00007371                 db    0
.xdata$x:00007372                 db    0
.xdata$x:00007373                 db    0
.xdata$x:00007374                 db    0
.xdata$x:00007375                 db    0
.xdata$x:00007376                 db    0
.xdata$x:00007377                 db    0
.xdata$x:00007378                 db    0
.xdata$x:00007379                 db    0
.xdata$x:0000737A                 db    0
.xdata$x:0000737B                 db    0
.xdata$x:0000737C                 db    1
.xdata$x:0000737D                 db    0
.xdata$x:0000737E                 db    0
.xdata$x:0000737F                 db    0
.xdata$x:0000737F _xdata$x        ends
.xdata$x:0000737F
.text:00007380 ; ===========================================================================
.text:00007380
.text:00007380 ; Segment type: Pure code
.text:00007380 ; Segment permissions: Read/Execute
.text:00007380 _text           segment para public 'CODE' use32
.text:00007380                 assume cs:_text
.text:00007380                 ;org 7380h
.text:00007380 ; COMDAT (pick any)
.text:00007380                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007380
.text:00007380 ; =============== S U B R O U T I N E =======================================
.text:00007380
.text:00007380 ; Attributes: bp-based frame
.text:00007380
.text:00007380 ; public: __thiscall CObjArray2<struct NArchive::N7z::CBond>::operator struct NArchive::N7z::CBond *(void)
.text:00007380                 public ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ
.text:00007380 ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ proc near
.text:00007380                                         ; CODE XREF: NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+60p
.text:00007380
.text:00007380 var_4           = dword ptr -4
.text:00007380
.text:00007380                 push    ebp
.text:00007381                 mov     ebp, esp
.text:00007383                 push    ecx
.text:00007384                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000738B                 mov     [ebp+var_4], ecx
.text:0000738E                 mov     eax, [ebp+var_4]
.text:00007391                 mov     eax, [eax]
.text:00007393                 mov     esp, ebp
.text:00007395                 pop     ebp
.text:00007396                 retn
.text:00007396 ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ endp
.text:00007396
.text:00007396 ; ---------------------------------------------------------------------------
.text:00007397                 align 4
.text:00007397 _text           ends
.text:00007397
.text:00007398 ; ===========================================================================
.text:00007398
.text:00007398 ; Segment type: Pure code
.text:00007398 ; Segment permissions: Read/Execute
.text:00007398 _text           segment para public 'CODE' use32
.text:00007398                 assume cs:_text
.text:00007398                 ;org 7398h
.text:00007398 ; COMDAT (pick any)
.text:00007398                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007398
.text:00007398 ; =============== S U B R O U T I N E =======================================
.text:00007398
.text:00007398 ; Attributes: bp-based frame
.text:00007398
.text:00007398 ; public: void __thiscall CObjArray2<struct NArchive::N7z::CBond>::SetSize(unsigned int)
.text:00007398                 public ?SetSize@?$CObjArray2@UCBond@N7z@NArchive@@@@QAEXI@Z
.text:00007398 ?SetSize@?$CObjArray2@UCBond@N7z@NArchive@@@@QAEXI@Z proc near
.text:00007398                                         ; CODE XREF: NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+33p
.text:00007398
.text:00007398 var_10          = dword ptr -10h
.text:00007398 var_C           = dword ptr -0Ch
.text:00007398 var_8           = dword ptr -8
.text:00007398 var_4           = dword ptr -4
.text:00007398 arg_0           = dword ptr  8
.text:00007398
.text:00007398                 push    ebp
.text:00007399                 mov     ebp, esp
.text:0000739B                 sub     esp, 10h
.text:0000739E                 mov     eax, 0CCCCCCCCh
.text:000073A3                 mov     [ebp+var_10], eax
.text:000073A6                 mov     [ebp+var_C], eax
.text:000073A9                 mov     [ebp+var_8], eax
.text:000073AC                 mov     [ebp+var_4], eax
.text:000073AF                 mov     [ebp+var_4], ecx
.text:000073B2                 mov     eax, [ebp+var_4]
.text:000073B5                 mov     ecx, [ebp+arg_0]
.text:000073B8                 cmp     ecx, [eax+4]
.text:000073BB                 jnz     short loc_73BF
.text:000073BD                 jmp     short loc_7416
.text:000073BF ; ---------------------------------------------------------------------------
.text:000073BF
.text:000073BF loc_73BF:                               ; CODE XREF: CObjArray2<NArchive::N7z::CBond>::SetSize(uint)+23j
.text:000073BF                 mov     [ebp+var_8], 0
.text:000073C6                 cmp     [ebp+arg_0], 0
.text:000073CA                 jz      short loc_73F1
.text:000073CC                 xor     ecx, ecx
.text:000073CE                 mov     eax, [ebp+arg_0]
.text:000073D1                 mov     edx, 8
.text:000073D6                 mul     edx
.text:000073D8                 seto    cl
.text:000073DB                 neg     ecx
.text:000073DD                 or      ecx, eax
.text:000073DF                 push    ecx             ; unsigned int
.text:000073E0                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000073E5                 add     esp, 4
.text:000073E8                 mov     [ebp+var_C], eax
.text:000073EB                 mov     eax, [ebp+var_C]
.text:000073EE                 mov     [ebp+var_8], eax
.text:000073F1
.text:000073F1 loc_73F1:                               ; CODE XREF: CObjArray2<NArchive::N7z::CBond>::SetSize(uint)+32j
.text:000073F1                 mov     ecx, [ebp+var_4]
.text:000073F4                 mov     edx, [ecx]
.text:000073F6                 mov     [ebp+var_10], edx
.text:000073F9                 mov     eax, [ebp+var_10]
.text:000073FC                 push    eax             ; void *
.text:000073FD                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007402                 add     esp, 4
.text:00007405                 mov     ecx, [ebp+var_4]
.text:00007408                 mov     edx, [ebp+var_8]
.text:0000740B                 mov     [ecx], edx
.text:0000740D                 mov     eax, [ebp+var_4]
.text:00007410                 mov     ecx, [ebp+arg_0]
.text:00007413                 mov     [eax+4], ecx
.text:00007416
.text:00007416 loc_7416:                               ; CODE XREF: CObjArray2<NArchive::N7z::CBond>::SetSize(uint)+25j
.text:00007416                 add     esp, 10h
.text:00007419                 cmp     ebp, esp
.text:0000741B                 call    __RTC_CheckEsp
.text:00007420                 mov     esp, ebp
.text:00007422                 pop     ebp
.text:00007423                 retn    4
.text:00007423 ?SetSize@?$CObjArray2@UCBond@N7z@NArchive@@@@QAEXI@Z endp
.text:00007423
.text:00007423 ; ---------------------------------------------------------------------------
.text:00007426                 align 4
.text:00007426 _text           ends
.text:00007426
.text:00007428 ; ===========================================================================
.text:00007428
.text:00007428 ; Segment type: Pure code
.text:00007428 ; Segment permissions: Read/Execute
.text:00007428 _text           segment para public 'CODE' use32
.text:00007428                 assume cs:_text
.text:00007428                 ;org 7428h
.text:00007428 ; COMDAT (pick any)
.text:00007428                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007428
.text:00007428 ; =============== S U B R O U T I N E =======================================
.text:00007428
.text:00007428 ; Attributes: bp-based frame
.text:00007428
.text:00007428 ; public: __thiscall CObjArray2<unsigned int>::operator unsigned int *(void)
.text:00007428                 public ??B?$CObjArray2@I@@QAEPAIXZ
.text:00007428 ??B?$CObjArray2@I@@QAEPAIXZ proc near   ; CODE XREF: NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+1C1p
.text:00007428
.text:00007428 var_4           = dword ptr -4
.text:00007428
.text:00007428                 push    ebp
.text:00007429                 mov     ebp, esp
.text:0000742B                 push    ecx
.text:0000742C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007433                 mov     [ebp+var_4], ecx
.text:00007436                 mov     eax, [ebp+var_4]
.text:00007439                 mov     eax, [eax]
.text:0000743B                 mov     esp, ebp
.text:0000743D                 pop     ebp
.text:0000743E                 retn
.text:0000743E ??B?$CObjArray2@I@@QAEPAIXZ endp
.text:0000743E
.text:0000743E ; ---------------------------------------------------------------------------
.text:0000743F                 align 10h
.text:0000743F _text           ends
.text:0000743F
.text:00007440 ; ===========================================================================
.text:00007440
.text:00007440 ; Segment type: Pure code
.text:00007440 ; Segment permissions: Read/Execute
.text:00007440 _text           segment para public 'CODE' use32
.text:00007440                 assume cs:_text
.text:00007440                 ;org 7440h
.text:00007440 ; COMDAT (pick any)
.text:00007440                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007440
.text:00007440 ; =============== S U B R O U T I N E =======================================
.text:00007440
.text:00007440 ; Attributes: bp-based frame
.text:00007440
.text:00007440 ; public: void __thiscall CObjArray2<unsigned int>::SetSize(unsigned int)
.text:00007440                 public ?SetSize@?$CObjArray2@I@@QAEXI@Z
.text:00007440 ?SetSize@?$CObjArray2@I@@QAEXI@Z proc near
.text:00007440                                         ; CODE XREF: NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+172p
.text:00007440
.text:00007440 var_10          = dword ptr -10h
.text:00007440 var_C           = dword ptr -0Ch
.text:00007440 var_8           = dword ptr -8
.text:00007440 var_4           = dword ptr -4
.text:00007440 arg_0           = dword ptr  8
.text:00007440
.text:00007440                 push    ebp
.text:00007441                 mov     ebp, esp
.text:00007443                 sub     esp, 10h
.text:00007446                 mov     eax, 0CCCCCCCCh
.text:0000744B                 mov     [ebp+var_10], eax
.text:0000744E                 mov     [ebp+var_C], eax
.text:00007451                 mov     [ebp+var_8], eax
.text:00007454                 mov     [ebp+var_4], eax
.text:00007457                 mov     [ebp+var_4], ecx
.text:0000745A                 mov     eax, [ebp+var_4]
.text:0000745D                 mov     ecx, [ebp+arg_0]
.text:00007460                 cmp     ecx, [eax+4]
.text:00007463                 jnz     short loc_7467
.text:00007465                 jmp     short loc_74BE
.text:00007467 ; ---------------------------------------------------------------------------
.text:00007467
.text:00007467 loc_7467:                               ; CODE XREF: CObjArray2<uint>::SetSize(uint)+23j
.text:00007467                 mov     [ebp+var_8], 0
.text:0000746E                 cmp     [ebp+arg_0], 0
.text:00007472                 jz      short loc_7499
.text:00007474                 xor     ecx, ecx
.text:00007476                 mov     eax, [ebp+arg_0]
.text:00007479                 mov     edx, 4
.text:0000747E                 mul     edx
.text:00007480                 seto    cl
.text:00007483                 neg     ecx
.text:00007485                 or      ecx, eax
.text:00007487                 push    ecx             ; unsigned int
.text:00007488                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000748D                 add     esp, 4
.text:00007490                 mov     [ebp+var_C], eax
.text:00007493                 mov     eax, [ebp+var_C]
.text:00007496                 mov     [ebp+var_8], eax
.text:00007499
.text:00007499 loc_7499:                               ; CODE XREF: CObjArray2<uint>::SetSize(uint)+32j
.text:00007499                 mov     ecx, [ebp+var_4]
.text:0000749C                 mov     edx, [ecx]
.text:0000749E                 mov     [ebp+var_10], edx
.text:000074A1                 mov     eax, [ebp+var_10]
.text:000074A4                 push    eax             ; void *
.text:000074A5                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000074AA                 add     esp, 4
.text:000074AD                 mov     ecx, [ebp+var_4]
.text:000074B0                 mov     edx, [ebp+var_8]
.text:000074B3                 mov     [ecx], edx
.text:000074B5                 mov     eax, [ebp+var_4]
.text:000074B8                 mov     ecx, [ebp+arg_0]
.text:000074BB                 mov     [eax+4], ecx
.text:000074BE
.text:000074BE loc_74BE:                               ; CODE XREF: CObjArray2<uint>::SetSize(uint)+25j
.text:000074BE                 add     esp, 10h
.text:000074C1                 cmp     ebp, esp
.text:000074C3                 call    __RTC_CheckEsp
.text:000074C8                 mov     esp, ebp
.text:000074CA                 pop     ebp
.text:000074CB                 retn    4
.text:000074CB ?SetSize@?$CObjArray2@I@@QAEXI@Z endp
.text:000074CB
.text:000074CB ; ---------------------------------------------------------------------------
.text:000074CE                 align 10h
.text:000074CE _text           ends
.text:000074CE
.text:000074D0 ; ===========================================================================
.text:000074D0
.text:000074D0 ; Segment type: Pure code
.text:000074D0 ; Segment permissions: Read/Execute
.text:000074D0 _text           segment para public 'CODE' use32
.text:000074D0                 assume cs:_text
.text:000074D0                 ;org 74D0h
.text:000074D0 ; COMDAT (pick any)
.text:000074D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000074D0
.text:000074D0 ; =============== S U B R O U T I N E =======================================
.text:000074D0
.text:000074D0 ; Attributes: bp-based frame
.text:000074D0
.text:000074D0 ; public: __thiscall CMyComPtr<struct ICompressGetSubStreamSize>::CMyComPtr<struct ICompressGetSubStreamSize>(void)
.text:000074D0                 public ??0?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ
.text:000074D0 ??0?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ proc near
.text:000074D0                                         ; CODE XREF: CSequentialInStreamSizeCount2::CSequentialInStreamSizeCount2(void)+76p
.text:000074D0
.text:000074D0 var_4           = dword ptr -4
.text:000074D0
.text:000074D0                 push    ebp
.text:000074D1                 mov     ebp, esp
.text:000074D3                 push    ecx
.text:000074D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000074DB                 mov     [ebp+var_4], ecx
.text:000074DE                 mov     eax, [ebp+var_4]
.text:000074E1                 mov     dword ptr [eax], 0
.text:000074E7                 mov     eax, [ebp+var_4]
.text:000074EA                 mov     esp, ebp
.text:000074EC                 pop     ebp
.text:000074ED                 retn
.text:000074ED ??0?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ endp
.text:000074ED
.text:000074ED ; ---------------------------------------------------------------------------
.text:000074EE                 align 10h
.text:000074EE _text           ends
.text:000074EE
.text:000074F0 ; ===========================================================================
.text:000074F0
.text:000074F0 ; Segment type: Pure code
.text:000074F0 ; Segment permissions: Read/Execute
.text:000074F0 _text           segment para public 'CODE' use32
.text:000074F0                 assume cs:_text
.text:000074F0                 ;org 74F0h
.text:000074F0 ; COMDAT (pick any)
.text:000074F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000074F0
.text:000074F0 ; =============== S U B R O U T I N E =======================================
.text:000074F0
.text:000074F0 ; Attributes: bp-based frame
.text:000074F0
.text:000074F0 ; public: __thiscall CMyComPtr<struct ICompressGetSubStreamSize>::~CMyComPtr<struct ICompressGetSubStreamSize>(void)
.text:000074F0                 public ??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ
.text:000074F0 ??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ proc near
.text:000074F0                                         ; CODE XREF: CSequentialInStreamSizeCount2::~CSequentialInStreamSizeCount2(void)+3Ap
.text:000074F0
.text:000074F0 var_4           = dword ptr -4
.text:000074F0
.text:000074F0                 push    ebp
.text:000074F1                 mov     ebp, esp
.text:000074F3                 push    ecx
.text:000074F4                 push    esi
.text:000074F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000074FC                 mov     [ebp+var_4], ecx
.text:000074FF                 mov     eax, [ebp+var_4]
.text:00007502                 cmp     dword ptr [eax], 0
.text:00007505                 jz      short loc_7522
.text:00007507                 mov     ecx, [ebp+var_4]
.text:0000750A                 mov     edx, [ecx]
.text:0000750C                 mov     eax, [ebp+var_4]
.text:0000750F                 mov     ecx, [eax]
.text:00007511                 mov     edx, [edx]
.text:00007513                 mov     esi, esp
.text:00007515                 push    ecx
.text:00007516                 mov     eax, [edx+8]
.text:00007519                 call    eax
.text:0000751B                 cmp     esi, esp
.text:0000751D                 call    __RTC_CheckEsp
.text:00007522
.text:00007522 loc_7522:                               ; CODE XREF: CMyComPtr<ICompressGetSubStreamSize>::~CMyComPtr<ICompressGetSubStreamSize>(void)+15j
.text:00007522                 pop     esi
.text:00007523                 add     esp, 4
.text:00007526                 cmp     ebp, esp
.text:00007528                 call    __RTC_CheckEsp
.text:0000752D                 mov     esp, ebp
.text:0000752F                 pop     ebp
.text:00007530                 retn
.text:00007530 ??1?$CMyComPtr@UICompressGetSubStreamSize@@@@QAE@XZ endp
.text:00007530
.text:00007530 ; ---------------------------------------------------------------------------
.text:00007531                 align 4
.text:00007531 _text           ends
.text:00007531
.text:00007534 ; ===========================================================================
.text:00007534
.text:00007534 ; Segment type: Pure code
.text:00007534 ; Segment permissions: Read/Execute
.text:00007534 _text           segment para public 'CODE' use32
.text:00007534                 assume cs:_text
.text:00007534                 ;org 7534h
.text:00007534 ; COMDAT (pick any)
.text:00007534                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007534
.text:00007534 ; =============== S U B R O U T I N E =======================================
.text:00007534
.text:00007534 ; Attributes: bp-based frame
.text:00007534
.text:00007534 ; public: void __thiscall CMyComPtr<struct ICompressGetSubStreamSize>::Release(void)
.text:00007534                 public ?Release@?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEXXZ
.text:00007534 ?Release@?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEXXZ proc near
.text:00007534                                         ; CODE XREF: CSequentialInStreamSizeCount2::Init(ISequentialInStream *)+25p
.text:00007534
.text:00007534 var_4           = dword ptr -4
.text:00007534
.text:00007534                 push    ebp
.text:00007535                 mov     ebp, esp
.text:00007537                 push    ecx
.text:00007538                 push    esi
.text:00007539                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007540                 mov     [ebp+var_4], ecx
.text:00007543                 mov     eax, [ebp+var_4]
.text:00007546                 cmp     dword ptr [eax], 0
.text:00007549                 jz      short loc_756F
.text:0000754B                 mov     ecx, [ebp+var_4]
.text:0000754E                 mov     edx, [ecx]
.text:00007550                 mov     eax, [ebp+var_4]
.text:00007553                 mov     ecx, [eax]
.text:00007555                 mov     edx, [edx]
.text:00007557                 mov     esi, esp
.text:00007559                 push    ecx
.text:0000755A                 mov     eax, [edx+8]
.text:0000755D                 call    eax
.text:0000755F                 cmp     esi, esp
.text:00007561                 call    __RTC_CheckEsp
.text:00007566                 mov     ecx, [ebp+var_4]
.text:00007569                 mov     dword ptr [ecx], 0
.text:0000756F
.text:0000756F loc_756F:                               ; CODE XREF: CMyComPtr<ICompressGetSubStreamSize>::Release(void)+15j
.text:0000756F                 pop     esi
.text:00007570                 add     esp, 4
.text:00007573                 cmp     ebp, esp
.text:00007575                 call    __RTC_CheckEsp
.text:0000757A                 mov     esp, ebp
.text:0000757C                 pop     ebp
.text:0000757D                 retn
.text:0000757D ?Release@?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEXXZ endp
.text:0000757D
.text:0000757D ; ---------------------------------------------------------------------------
.text:0000757E                 align 10h
.text:0000757E _text           ends
.text:0000757E
.text:00007580 ; ===========================================================================
.text:00007580
.text:00007580 ; Segment type: Pure code
.text:00007580 ; Segment permissions: Read/Execute
.text:00007580 _text           segment para public 'CODE' use32
.text:00007580                 assume cs:_text
.text:00007580                 ;org 7580h
.text:00007580 ; COMDAT (pick any)
.text:00007580                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007580
.text:00007580 ; =============== S U B R O U T I N E =======================================
.text:00007580
.text:00007580 ; Attributes: bp-based frame
.text:00007580
.text:00007580 ; public: struct ICompressGetSubStreamSize * * __thiscall CMyComPtr<struct ICompressGetSubStreamSize>::operator&(void)
.text:00007580                 public ??I?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEPAPAUICompressGetSubStreamSize@@XZ
.text:00007580 ??I?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEPAPAUICompressGetSubStreamSize@@XZ proc near
.text:00007580                                         ; CODE XREF: CSequentialInStreamSizeCount2::Init(ISequentialInStream *)+3Fp
.text:00007580
.text:00007580 var_4           = dword ptr -4
.text:00007580
.text:00007580                 push    ebp
.text:00007581                 mov     ebp, esp
.text:00007583                 push    ecx
.text:00007584                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000758B                 mov     [ebp+var_4], ecx
.text:0000758E                 mov     eax, [ebp+var_4]
.text:00007591                 mov     esp, ebp
.text:00007593                 pop     ebp
.text:00007594                 retn
.text:00007594 ??I?$CMyComPtr@UICompressGetSubStreamSize@@@@QAEPAPAUICompressGetSubStreamSize@@XZ endp
.text:00007594
.text:00007594 ; ---------------------------------------------------------------------------
.text:00007595                 align 4
.text:00007595 _text           ends
.text:00007595
.text:00007598 ; ===========================================================================
.text:00007598
.text:00007598 ; Segment type: Pure code
.text:00007598 ; Segment permissions: Read/Execute
.text:00007598 _text           segment para public 'CODE' use32
.text:00007598                 assume cs:_text
.text:00007598                 ;org 7598h
.text:00007598 ; COMDAT (pick any)
.text:00007598                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007598
.text:00007598 ; =============== S U B R O U T I N E =======================================
.text:00007598
.text:00007598 ; Attributes: bp-based frame
.text:00007598
.text:00007598 ; public: __thiscall CMyComPtr<struct ICompressSetCoderMt>::CMyComPtr<struct ICompressSetCoderMt>(void)
.text:00007598                 public ??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ
.text:00007598 ??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ proc near
.text:00007598                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+311p
.text:00007598
.text:00007598 var_4           = dword ptr -4
.text:00007598
.text:00007598                 push    ebp
.text:00007599                 mov     ebp, esp
.text:0000759B                 push    ecx
.text:0000759C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000075A3                 mov     [ebp+var_4], ecx
.text:000075A6                 mov     eax, [ebp+var_4]
.text:000075A9                 mov     dword ptr [eax], 0
.text:000075AF                 mov     eax, [ebp+var_4]
.text:000075B2                 mov     esp, ebp
.text:000075B4                 pop     ebp
.text:000075B5                 retn
.text:000075B5 ??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ endp
.text:000075B5
.text:000075B5 ; ---------------------------------------------------------------------------
.text:000075B6                 align 4
.text:000075B6 _text           ends
.text:000075B6
.text:000075B8 ; ===========================================================================
.text:000075B8
.text:000075B8 ; Segment type: Pure code
.text:000075B8 ; Segment permissions: Read/Execute
.text:000075B8 _text           segment para public 'CODE' use32
.text:000075B8                 assume cs:_text
.text:000075B8                 ;org 75B8h
.text:000075B8 ; COMDAT (pick any)
.text:000075B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000075B8
.text:000075B8 ; =============== S U B R O U T I N E =======================================
.text:000075B8
.text:000075B8 ; Attributes: bp-based frame
.text:000075B8
.text:000075B8 ; public: __thiscall CMyComPtr<struct ICompressSetCoderMt>::~CMyComPtr<struct ICompressSetCoderMt>(void)
.text:000075B8                 public ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ
.text:000075B8 ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ proc near
.text:000075B8                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+387p
.text:000075B8                                         ; NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+3B9p ...
.text:000075B8
.text:000075B8 var_4           = dword ptr -4
.text:000075B8
.text:000075B8                 push    ebp
.text:000075B9                 mov     ebp, esp
.text:000075BB                 push    ecx
.text:000075BC                 push    esi
.text:000075BD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000075C4                 mov     [ebp+var_4], ecx
.text:000075C7                 mov     eax, [ebp+var_4]
.text:000075CA                 cmp     dword ptr [eax], 0
.text:000075CD                 jz      short loc_75EA
.text:000075CF                 mov     ecx, [ebp+var_4]
.text:000075D2                 mov     edx, [ecx]
.text:000075D4                 mov     eax, [ebp+var_4]
.text:000075D7                 mov     ecx, [eax]
.text:000075D9                 mov     edx, [edx]
.text:000075DB                 mov     esi, esp
.text:000075DD                 push    ecx
.text:000075DE                 mov     eax, [edx+8]
.text:000075E1                 call    eax
.text:000075E3                 cmp     esi, esp
.text:000075E5                 call    __RTC_CheckEsp
.text:000075EA
.text:000075EA loc_75EA:                               ; CODE XREF: CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>(void)+15j
.text:000075EA                 pop     esi
.text:000075EB                 add     esp, 4
.text:000075EE                 cmp     ebp, esp
.text:000075F0                 call    __RTC_CheckEsp
.text:000075F5                 mov     esp, ebp
.text:000075F7                 pop     ebp
.text:000075F8                 retn
.text:000075F8 ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ endp
.text:000075F8
.text:000075F8 ; ---------------------------------------------------------------------------
.text:000075F9                 align 4
.text:000075F9 _text           ends
.text:000075F9
.text:000075FC ; ===========================================================================
.text:000075FC
.text:000075FC ; Segment type: Pure code
.text:000075FC ; Segment permissions: Read/Execute
.text:000075FC _text           segment para public 'CODE' use32
.text:000075FC                 assume cs:_text
.text:000075FC                 ;org 75FCh
.text:000075FC ; COMDAT (pick any)
.text:000075FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000075FC
.text:000075FC ; =============== S U B R O U T I N E =======================================
.text:000075FC
.text:000075FC ; Attributes: bp-based frame
.text:000075FC
.text:000075FC ; public: __thiscall CMyComPtr<struct ICompressSetCoderMt>::operator struct ICompressSetCoderMt *(void)const
.text:000075FC                 public ??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ
.text:000075FC ??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ proc near
.text:000075FC                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+333p
.text:000075FC
.text:000075FC var_4           = dword ptr -4
.text:000075FC
.text:000075FC                 push    ebp
.text:000075FD                 mov     ebp, esp
.text:000075FF                 push    ecx
.text:00007600                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007607                 mov     [ebp+var_4], ecx
.text:0000760A                 mov     eax, [ebp+var_4]
.text:0000760D                 mov     eax, [eax]
.text:0000760F                 mov     esp, ebp
.text:00007611                 pop     ebp
.text:00007612                 retn
.text:00007612 ??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ endp
.text:00007612
.text:00007612 ; ---------------------------------------------------------------------------
.text:00007613                 align 4
.text:00007613 _text           ends
.text:00007613
.text:00007614 ; ===========================================================================
.text:00007614
.text:00007614 ; Segment type: Pure code
.text:00007614 ; Segment permissions: Read/Execute
.text:00007614 _text           segment para public 'CODE' use32
.text:00007614                 assume cs:_text
.text:00007614                 ;org 7614h
.text:00007614 ; COMDAT (pick any)
.text:00007614                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007614
.text:00007614 ; =============== S U B R O U T I N E =======================================
.text:00007614
.text:00007614 ; Attributes: bp-based frame
.text:00007614
.text:00007614 ; public: struct ICompressSetCoderMt * * __thiscall CMyComPtr<struct ICompressSetCoderMt>::operator&(void)
.text:00007614                 public ??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ
.text:00007614 ??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ proc near
.text:00007614                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+31Dp
.text:00007614
.text:00007614 var_4           = dword ptr -4
.text:00007614
.text:00007614                 push    ebp
.text:00007615                 mov     ebp, esp
.text:00007617                 push    ecx
.text:00007618                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000761F                 mov     [ebp+var_4], ecx
.text:00007622                 mov     eax, [ebp+var_4]
.text:00007625                 mov     esp, ebp
.text:00007627                 pop     ebp
.text:00007628                 retn
.text:00007628 ??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ endp
.text:00007628
.text:00007628 ; ---------------------------------------------------------------------------
.text:00007629                 align 4
.text:00007629 _text           ends
.text:00007629
.text:0000762C ; ===========================================================================
.text:0000762C
.text:0000762C ; Segment type: Pure code
.text:0000762C ; Segment permissions: Read/Execute
.text:0000762C _text           segment para public 'CODE' use32
.text:0000762C                 assume cs:_text
.text:0000762C                 ;org 762Ch
.text:0000762C ; COMDAT (pick any)
.text:0000762C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000762C
.text:0000762C ; =============== S U B R O U T I N E =======================================
.text:0000762C
.text:0000762C ; Attributes: bp-based frame
.text:0000762C
.text:0000762C ; public: struct ICompressSetCoderMt * __thiscall CMyComPtr<struct ICompressSetCoderMt>::operator->(void)const
.text:0000762C                 public ??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ
.text:0000762C ??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ proc near
.text:0000762C                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+33Fp
.text:0000762C
.text:0000762C var_4           = dword ptr -4
.text:0000762C
.text:0000762C                 push    ebp
.text:0000762D                 mov     ebp, esp
.text:0000762F                 push    ecx
.text:00007630                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007637                 mov     [ebp+var_4], ecx
.text:0000763A                 mov     eax, [ebp+var_4]
.text:0000763D                 mov     eax, [eax]
.text:0000763F                 mov     esp, ebp
.text:00007641                 pop     ebp
.text:00007642                 retn
.text:00007642 ??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ endp
.text:00007642
.text:00007642 ; ---------------------------------------------------------------------------
.text:00007643                 align 4
.text:00007643 _text           ends
.text:00007643
.text:00007644 ; ===========================================================================
.text:00007644
.text:00007644 ; Segment type: Pure code
.text:00007644 ; Segment permissions: Read/Execute
.text:00007644 _text           segment para public 'CODE' use32
.text:00007644                 assume cs:_text
.text:00007644                 ;org 7644h
.text:00007644 ; COMDAT (pick any)
.text:00007644                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007644
.text:00007644 ; =============== S U B R O U T I N E =======================================
.text:00007644
.text:00007644 ; Attributes: bp-based frame
.text:00007644
.text:00007644 ; public: __thiscall CObjectVector<class CInOutTempBuffer>::CObjectVector<class CInOutTempBuffer>(void)
.text:00007644                 public ??0?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ
.text:00007644 ??0?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ proc near
.text:00007644                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+D1p
.text:00007644
.text:00007644 var_4           = dword ptr -4
.text:00007644
.text:00007644                 push    ebp
.text:00007645                 mov     ebp, esp
.text:00007647                 push    ecx
.text:00007648                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000764F                 mov     [ebp+var_4], ecx
.text:00007652                 mov     ecx, [ebp+var_4]
.text:00007655                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000765A                 mov     eax, [ebp+var_4]
.text:0000765D                 add     esp, 4
.text:00007660                 cmp     ebp, esp
.text:00007662                 call    __RTC_CheckEsp
.text:00007667                 mov     esp, ebp
.text:00007669                 pop     ebp
.text:0000766A                 retn
.text:0000766A ??0?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ endp
.text:0000766A
.text:0000766A ; ---------------------------------------------------------------------------
.text:0000766B                 align 4
.text:0000766B _text           ends
.text:0000766B
.text:0000766C ; ===========================================================================
.text:0000766C
.text:0000766C ; Segment type: Pure code
.text:0000766C ; Segment permissions: Read/Execute
.text:0000766C _text           segment para public 'CODE' use32
.text:0000766C                 assume cs:_text
.text:0000766C                 ;org 766Ch
.text:0000766C ; COMDAT (pick any)
.text:0000766C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000766C
.text:0000766C ; =============== S U B R O U T I N E =======================================
.text:0000766C
.text:0000766C ; Attributes: bp-based frame
.text:0000766C
.text:0000766C ; public: class CInOutTempBuffer & __thiscall CObjectVector<class CInOutTempBuffer>::operator[](unsigned int)
.text:0000766C                 public ??A?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@I@Z
.text:0000766C ??A?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@I@Z proc near
.text:0000766C                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+1DBp
.text:0000766C                                         ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+93Dp
.text:0000766C
.text:0000766C var_4           = dword ptr -4
.text:0000766C arg_0           = dword ptr  8
.text:0000766C
.text:0000766C                 push    ebp
.text:0000766D                 mov     ebp, esp
.text:0000766F                 push    ecx
.text:00007670                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007677                 mov     [ebp+var_4], ecx
.text:0000767A                 mov     eax, [ebp+arg_0]
.text:0000767D                 push    eax
.text:0000767E                 mov     ecx, [ebp+var_4]
.text:00007681                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00007686                 mov     eax, [eax]
.text:00007688                 add     esp, 4
.text:0000768B                 cmp     ebp, esp
.text:0000768D                 call    __RTC_CheckEsp
.text:00007692                 mov     esp, ebp
.text:00007694                 pop     ebp
.text:00007695                 retn    4
.text:00007695 ??A?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@I@Z endp
.text:00007695
.text:00007695 _text           ends
.text:00007695
.text:00007698 ; ===========================================================================
.text:00007698
.text:00007698 ; Segment type: Pure code
.text:00007698 ; Segment permissions: Read/Execute
.text:00007698 _text           segment para public 'CODE' use32
.text:00007698                 assume cs:_text
.text:00007698                 ;org 7698h
.text:00007698 ; COMDAT (pick any)
.text:00007698                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007698
.text:00007698 ; =============== S U B R O U T I N E =======================================
.text:00007698
.text:00007698 ; Attributes: bp-based frame
.text:00007698
.text:00007698 ; public: class CInOutTempBuffer & __thiscall CObjectVector<class CInOutTempBuffer>::AddNew(void)
.text:00007698                 public ?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ
.text:00007698 ?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ proc near
.text:00007698                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+125p
.text:00007698
.text:00007698 var_20          = dword ptr -20h
.text:00007698 var_1C          = dword ptr -1Ch
.text:00007698 var_18          = dword ptr -18h
.text:00007698 var_14          = dword ptr -14h
.text:00007698 var_10          = dword ptr -10h
.text:00007698 var_C           = dword ptr -0Ch
.text:00007698 var_4           = dword ptr -4
.text:00007698
.text:00007698                 push    ebp
.text:00007699                 mov     ebp, esp
.text:0000769B                 push    0FFFFFFFFh
.text:0000769D                 push    offset __ehhandler$?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ
.text:000076A2                 mov     eax, large fs:0
.text:000076A8                 push    eax
.text:000076A9                 sub     esp, 14h
.text:000076AC                 mov     eax, 0CCCCCCCCh
.text:000076B1                 mov     [ebp+var_20], eax
.text:000076B4                 mov     [ebp+var_1C], eax
.text:000076B7                 mov     [ebp+var_18], eax
.text:000076BA                 mov     [ebp+var_14], eax
.text:000076BD                 mov     [ebp+var_10], eax
.text:000076C0                 mov     eax, dword ptr ds:___security_cookie
.text:000076C5                 xor     eax, ebp
.text:000076C7                 push    eax
.text:000076C8                 lea     eax, [ebp+var_C]
.text:000076CB                 mov     large fs:0, eax
.text:000076D1                 mov     [ebp+var_10], ecx
.text:000076D4                 push    38h ; '8'       ; unsigned int
.text:000076D6                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000076DB                 add     esp, 4
.text:000076DE                 mov     [ebp+var_1C], eax
.text:000076E1                 mov     [ebp+var_4], 0
.text:000076E8                 cmp     [ebp+var_1C], 0
.text:000076EC                 jz      short loc_76FB
.text:000076EE                 mov     ecx, [ebp+var_1C]
.text:000076F1                 call    ??0CInOutTempBuffer@@QAE@XZ ; CInOutTempBuffer::CInOutTempBuffer(void)
.text:000076F6                 mov     [ebp+var_20], eax
.text:000076F9                 jmp     short loc_7702
.text:000076FB ; ---------------------------------------------------------------------------
.text:000076FB
.text:000076FB loc_76FB:                               ; CODE XREF: CObjectVector<CInOutTempBuffer>::AddNew(void)+54j
.text:000076FB                 mov     [ebp+var_20], 0
.text:00007702
.text:00007702 loc_7702:                               ; CODE XREF: CObjectVector<CInOutTempBuffer>::AddNew(void)+61j
.text:00007702                 mov     eax, [ebp+var_20]
.text:00007705                 mov     [ebp+var_18], eax
.text:00007708                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000770F                 mov     ecx, [ebp+var_18]
.text:00007712                 mov     [ebp+var_14], ecx
.text:00007715                 mov     edx, [ebp+var_14]
.text:00007718                 push    edx
.text:00007719                 mov     ecx, [ebp+var_10]
.text:0000771C                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00007721                 mov     eax, [ebp+var_14]
.text:00007724                 mov     ecx, [ebp+var_C]
.text:00007727                 mov     large fs:0, ecx
.text:0000772E                 pop     ecx
.text:0000772F                 add     esp, 20h
.text:00007732                 cmp     ebp, esp
.text:00007734                 call    __RTC_CheckEsp
.text:00007739                 mov     esp, ebp
.text:0000773B                 pop     ebp
.text:0000773C                 retn
.text:0000773C ?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ endp
.text:0000773C
.text:0000773C ; ---------------------------------------------------------------------------
.text:0000773D                 align 10h
.text:0000773D _text           ends
.text:0000773D
.text$x:00007740 ; ===========================================================================
.text$x:00007740
.text$x:00007740 ; Segment type: Pure code
.text$x:00007740 ; Segment permissions: Read/Execute
.text$x:00007740 _text$x         segment para public 'CODE' use32
.text$x:00007740                 assume cs:_text$x
.text$x:00007740                 ;org 7740h
.text$x:00007740 ; COMDAT (pick associative to section at 7698)
.text$x:00007740                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00007740
.text$x:00007740 ; =============== S U B R O U T I N E =======================================
.text$x:00007740
.text$x:00007740
.text$x:00007740 __unwindfunclet$?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ$0 proc near
.text$x:00007740                                         ; DATA XREF: .xdata$x:0000776Co
.text$x:00007740                 mov     eax, [ebp-1Ch]
.text$x:00007743                 push    eax             ; void *
.text$x:00007744                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00007749                 pop     ecx
.text$x:0000774A                 retn
.text$x:0000774A __unwindfunclet$?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ$0 endp
.text$x:0000774A
.text$x:0000774B
.text$x:0000774B ; =============== S U B R O U T I N E =======================================
.text$x:0000774B
.text$x:0000774B
.text$x:0000774B __ehhandler$?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ proc near
.text$x:0000774B                                         ; DATA XREF: CObjectVector<CInOutTempBuffer>::AddNew(void)+5o
.text$x:0000774B
.text$x:0000774B arg_4           = dword ptr  8
.text$x:0000774B
.text$x:0000774B                 mov     edx, [esp+arg_4]
.text$x:0000774F                 lea     eax, [edx+0Ch]
.text$x:00007752                 mov     ecx, [edx-18h]
.text$x:00007755                 xor     ecx, eax
.text$x:00007757                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000775C                 mov     eax, offset __ehfuncinfo$?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ
.text$x:00007761                 jmp     ___CxxFrameHandler3
.text$x:00007761 __ehhandler$?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ endp
.text$x:00007761
.text$x:00007761 ; ---------------------------------------------------------------------------
.text$x:00007766                 align 4
.text$x:00007766 _text$x         ends
.text$x:00007766
.xdata$x:00007768 ; ===========================================================================
.xdata$x:00007768
.xdata$x:00007768 ; Segment type: Pure data
.xdata$x:00007768 ; Segment permissions: Read
.xdata$x:00007768 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007768                 assume cs:_xdata$x
.xdata$x:00007768                 ;org 7768h
.xdata$x:00007768 ; COMDAT (pick associative to section at 7698)
.xdata$x:00007768 __unwindtable$?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ db 0FFh
.xdata$x:00007768                                         ; DATA XREF: .xdata$x:00007778o
.xdata$x:00007769                 db 0FFh
.xdata$x:0000776A                 db 0FFh
.xdata$x:0000776B                 db 0FFh
.xdata$x:0000776C                 dd offset __unwindfunclet$?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ$0
.xdata$x:00007770 __ehfuncinfo$?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ db  22h ; "
.xdata$x:00007770                                         ; DATA XREF: __ehhandler$?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ+11o
.xdata$x:00007771                 db    5
.xdata$x:00007772                 db  93h ; ô
.xdata$x:00007773                 db  19h
.xdata$x:00007774                 db    1
.xdata$x:00007775                 db    0
.xdata$x:00007776                 db    0
.xdata$x:00007777                 db    0
.xdata$x:00007778                 dd offset __unwindtable$?AddNew@?$CObjectVector@VCInOutTempBuffer@@@@QAEAAVCInOutTempBuffer@@XZ
.xdata$x:0000777C                 db    0
.xdata$x:0000777D                 db    0
.xdata$x:0000777E                 db    0
.xdata$x:0000777F                 db    0
.xdata$x:00007780                 db    0
.xdata$x:00007781                 db    0
.xdata$x:00007782                 db    0
.xdata$x:00007783                 db    0
.xdata$x:00007784                 db    0
.xdata$x:00007785                 db    0
.xdata$x:00007786                 db    0
.xdata$x:00007787                 db    0
.xdata$x:00007788                 db    0
.xdata$x:00007789                 db    0
.xdata$x:0000778A                 db    0
.xdata$x:0000778B                 db    0
.xdata$x:0000778C                 db    0
.xdata$x:0000778D                 db    0
.xdata$x:0000778E                 db    0
.xdata$x:0000778F                 db    0
.xdata$x:00007790                 db    1
.xdata$x:00007791                 db    0
.xdata$x:00007792                 db    0
.xdata$x:00007793                 db    0
.xdata$x:00007793 _xdata$x        ends
.xdata$x:00007793
.text:00007794 ; ===========================================================================
.text:00007794
.text:00007794 ; Segment type: Pure code
.text:00007794 ; Segment permissions: Read/Execute
.text:00007794 _text           segment para public 'CODE' use32
.text:00007794                 assume cs:_text
.text:00007794                 ;org 7794h
.text:00007794 ; COMDAT (pick any)
.text:00007794                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007794
.text:00007794 ; =============== S U B R O U T I N E =======================================
.text:00007794
.text:00007794 ; Attributes: bp-based frame
.text:00007794
.text:00007794 ; public: __thiscall CObjectVector<class CInOutTempBuffer>::~CObjectVector<class CInOutTempBuffer>(void)
.text:00007794                 public ??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ
.text:00007794 ??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ proc near
.text:00007794                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+8BEp
.text:00007794                                         ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+9C2p ...
.text:00007794
.text:00007794 var_20          = dword ptr -20h
.text:00007794 var_1C          = dword ptr -1Ch
.text:00007794 var_18          = dword ptr -18h
.text:00007794 var_14          = dword ptr -14h
.text:00007794 var_10          = dword ptr -10h
.text:00007794 var_C           = dword ptr -0Ch
.text:00007794 var_4           = dword ptr -4
.text:00007794
.text:00007794                 push    ebp
.text:00007795                 mov     ebp, esp
.text:00007797                 push    0FFFFFFFFh
.text:00007799                 push    offset __ehhandler$??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ
.text:0000779E                 mov     eax, large fs:0
.text:000077A4                 push    eax
.text:000077A5                 sub     esp, 14h
.text:000077A8                 mov     eax, 0CCCCCCCCh
.text:000077AD                 mov     [ebp+var_20], eax
.text:000077B0                 mov     [ebp+var_1C], eax
.text:000077B3                 mov     [ebp+var_18], eax
.text:000077B6                 mov     [ebp+var_14], eax
.text:000077B9                 mov     [ebp+var_10], eax
.text:000077BC                 mov     eax, dword ptr ds:___security_cookie
.text:000077C1                 xor     eax, ebp
.text:000077C3                 push    eax
.text:000077C4                 lea     eax, [ebp+var_C]
.text:000077C7                 mov     large fs:0, eax
.text:000077CD                 mov     [ebp+var_10], ecx
.text:000077D0                 mov     [ebp+var_4], 0
.text:000077D7                 mov     ecx, [ebp+var_10]
.text:000077DA                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000077DF                 mov     [ebp+var_14], eax
.text:000077E2
.text:000077E2 loc_77E2:                               ; CODE XREF: CObjectVector<CInOutTempBuffer>::~CObjectVector<CInOutTempBuffer>(void):loc_7824j
.text:000077E2                 cmp     [ebp+var_14], 0
.text:000077E6                 jz      short loc_7826
.text:000077E8                 mov     eax, [ebp+var_14]
.text:000077EB                 sub     eax, 1
.text:000077EE                 mov     [ebp+var_14], eax
.text:000077F1                 mov     ecx, [ebp+var_14]
.text:000077F4                 push    ecx
.text:000077F5                 mov     ecx, [ebp+var_10]
.text:000077F8                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000077FD                 mov     edx, [eax]
.text:000077FF                 mov     [ebp+var_1C], edx
.text:00007802                 mov     eax, [ebp+var_1C]
.text:00007805                 mov     [ebp+var_18], eax
.text:00007808                 cmp     [ebp+var_18], 0
.text:0000780C                 jz      short loc_781D
.text:0000780E                 push    1
.text:00007810                 mov     ecx, [ebp+var_18]
.text:00007813                 call    ??_GCInOutTempBuffer@@QAEPAXI@Z ; CInOutTempBuffer::`scalar deleting destructor'(uint)
.text:00007818                 mov     [ebp+var_20], eax
.text:0000781B                 jmp     short loc_7824
.text:0000781D ; ---------------------------------------------------------------------------
.text:0000781D
.text:0000781D loc_781D:                               ; CODE XREF: CObjectVector<CInOutTempBuffer>::~CObjectVector<CInOutTempBuffer>(void)+78j
.text:0000781D                 mov     [ebp+var_20], 0
.text:00007824
.text:00007824 loc_7824:                               ; CODE XREF: CObjectVector<CInOutTempBuffer>::~CObjectVector<CInOutTempBuffer>(void)+87j
.text:00007824                 jmp     short loc_77E2
.text:00007826 ; ---------------------------------------------------------------------------
.text:00007826
.text:00007826 loc_7826:                               ; CODE XREF: CObjectVector<CInOutTempBuffer>::~CObjectVector<CInOutTempBuffer>(void)+52j
.text:00007826                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000782D                 mov     ecx, [ebp+var_10]
.text:00007830                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00007835                 mov     ecx, [ebp+var_C]
.text:00007838                 mov     large fs:0, ecx
.text:0000783F                 pop     ecx
.text:00007840                 add     esp, 20h
.text:00007843                 cmp     ebp, esp
.text:00007845                 call    __RTC_CheckEsp
.text:0000784A                 mov     esp, ebp
.text:0000784C                 pop     ebp
.text:0000784D                 retn
.text:0000784D ??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ endp
.text:0000784D
.text:0000784D ; ---------------------------------------------------------------------------
.text:0000784E                 align 10h
.text:0000784E _text           ends
.text:0000784E
.text$x:00007850 ; ===========================================================================
.text$x:00007850
.text$x:00007850 ; Segment type: Pure code
.text$x:00007850 ; Segment permissions: Read/Execute
.text$x:00007850 _text$x         segment para public 'CODE' use32
.text$x:00007850                 assume cs:_text$x
.text$x:00007850                 ;org 7850h
.text$x:00007850 ; COMDAT (pick associative to section at 7794)
.text$x:00007850                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00007850
.text$x:00007850 ; =============== S U B R O U T I N E =======================================
.text$x:00007850
.text$x:00007850
.text$x:00007850 __unwindfunclet$??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ$0 proc near
.text$x:00007850                                         ; DATA XREF: .xdata$x:00007878o
.text$x:00007850                 mov     ecx, [ebp-10h]
.text$x:00007853                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00007853 __unwindfunclet$??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ$0 endp
.text$x:00007853
.text$x:00007858
.text$x:00007858 ; =============== S U B R O U T I N E =======================================
.text$x:00007858
.text$x:00007858
.text$x:00007858 __ehhandler$??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ proc near
.text$x:00007858                                         ; DATA XREF: CObjectVector<CInOutTempBuffer>::~CObjectVector<CInOutTempBuffer>(void)+5o
.text$x:00007858
.text$x:00007858 arg_4           = dword ptr  8
.text$x:00007858
.text$x:00007858                 mov     edx, [esp+arg_4]
.text$x:0000785C                 lea     eax, [edx+0Ch]
.text$x:0000785F                 mov     ecx, [edx-18h]
.text$x:00007862                 xor     ecx, eax
.text$x:00007864                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007869                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ
.text$x:0000786E                 jmp     ___CxxFrameHandler3
.text$x:0000786E __ehhandler$??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ endp
.text$x:0000786E
.text$x:0000786E ; ---------------------------------------------------------------------------
.text$x:00007873                 align 4
.text$x:00007873 _text$x         ends
.text$x:00007873
.xdata$x:00007874 ; ===========================================================================
.xdata$x:00007874
.xdata$x:00007874 ; Segment type: Pure data
.xdata$x:00007874 ; Segment permissions: Read
.xdata$x:00007874 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007874                 assume cs:_xdata$x
.xdata$x:00007874                 ;org 7874h
.xdata$x:00007874 ; COMDAT (pick associative to section at 7794)
.xdata$x:00007874 __unwindtable$??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ db 0FFh
.xdata$x:00007874                                         ; DATA XREF: .xdata$x:00007884o
.xdata$x:00007875                 db 0FFh
.xdata$x:00007876                 db 0FFh
.xdata$x:00007877                 db 0FFh
.xdata$x:00007878                 dd offset __unwindfunclet$??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ$0
.xdata$x:0000787C __ehfuncinfo$??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ db  22h ; "
.xdata$x:0000787C                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ+11o
.xdata$x:0000787D                 db    5
.xdata$x:0000787E                 db  93h ; ô
.xdata$x:0000787F                 db  19h
.xdata$x:00007880                 db    1
.xdata$x:00007881                 db    0
.xdata$x:00007882                 db    0
.xdata$x:00007883                 db    0
.xdata$x:00007884                 dd offset __unwindtable$??1?$CObjectVector@VCInOutTempBuffer@@@@QAE@XZ
.xdata$x:00007888                 db    0
.xdata$x:00007889                 db    0
.xdata$x:0000788A                 db    0
.xdata$x:0000788B                 db    0
.xdata$x:0000788C                 db    0
.xdata$x:0000788D                 db    0
.xdata$x:0000788E                 db    0
.xdata$x:0000788F                 db    0
.xdata$x:00007890                 db    0
.xdata$x:00007891                 db    0
.xdata$x:00007892                 db    0
.xdata$x:00007893                 db    0
.xdata$x:00007894                 db    0
.xdata$x:00007895                 db    0
.xdata$x:00007896                 db    0
.xdata$x:00007897                 db    0
.xdata$x:00007898                 db    0
.xdata$x:00007899                 db    0
.xdata$x:0000789A                 db    0
.xdata$x:0000789B                 db    0
.xdata$x:0000789C                 db    1
.xdata$x:0000789D                 db    0
.xdata$x:0000789E                 db    0
.xdata$x:0000789F                 db    0
.xdata$x:0000789F _xdata$x        ends
.xdata$x:0000789F
.text:000078A0 ; ===========================================================================
.text:000078A0
.text:000078A0 ; Segment type: Pure code
.text:000078A0 ; Segment permissions: Read/Execute
.text:000078A0 _text           segment para public 'CODE' use32
.text:000078A0                 assume cs:_text
.text:000078A0                 ;org 78A0h
.text:000078A0 ; COMDAT (pick any)
.text:000078A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000078A0
.text:000078A0 ; =============== S U B R O U T I N E =======================================
.text:000078A0
.text:000078A0 ; Attributes: bp-based frame
.text:000078A0
.text:000078A0 ; public: unsigned int __thiscall CObjectVector<class NArchive::N7z::CSequentialOutTempBufferImp2 *>::Size(void)const
.text:000078A0                 public ?Size@?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QBEIXZ
.text:000078A0 ?Size@?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QBEIXZ proc near
.text:000078A0                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+6B8p
.text:000078A0
.text:000078A0 var_4           = dword ptr -4
.text:000078A0
.text:000078A0                 push    ebp
.text:000078A1                 mov     ebp, esp
.text:000078A3                 push    ecx
.text:000078A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000078AB                 mov     [ebp+var_4], ecx
.text:000078AE                 mov     ecx, [ebp+var_4]
.text:000078B1                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000078B6                 add     esp, 4
.text:000078B9                 cmp     ebp, esp
.text:000078BB                 call    __RTC_CheckEsp
.text:000078C0                 mov     esp, ebp
.text:000078C2                 pop     ebp
.text:000078C3                 retn
.text:000078C3 ?Size@?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QBEIXZ endp
.text:000078C3
.text:000078C3 _text           ends
.text:000078C3
.text:000078C4 ; ===========================================================================
.text:000078C4
.text:000078C4 ; Segment type: Pure code
.text:000078C4 ; Segment permissions: Read/Execute
.text:000078C4 _text           segment para public 'CODE' use32
.text:000078C4                 assume cs:_text
.text:000078C4                 ;org 78C4h
.text:000078C4 ; COMDAT (pick any)
.text:000078C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000078C4
.text:000078C4 ; =============== S U B R O U T I N E =======================================
.text:000078C4
.text:000078C4 ; Attributes: bp-based frame
.text:000078C4
.text:000078C4 ; public: __thiscall CObjectVector<class NArchive::N7z::CSequentialOutTempBufferImp2 *>::CObjectVector<class NArchive::N7z::CSequentialOutTempBufferImp2 *>(void)
.text:000078C4                 public ??0?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ
.text:000078C4 ??0?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ proc near
.text:000078C4                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+DDp
.text:000078C4
.text:000078C4 var_4           = dword ptr -4
.text:000078C4
.text:000078C4                 push    ebp
.text:000078C5                 mov     ebp, esp
.text:000078C7                 push    ecx
.text:000078C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000078CF                 mov     [ebp+var_4], ecx
.text:000078D2                 mov     ecx, [ebp+var_4]
.text:000078D5                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:000078DA                 mov     eax, [ebp+var_4]
.text:000078DD                 add     esp, 4
.text:000078E0                 cmp     ebp, esp
.text:000078E2                 call    __RTC_CheckEsp
.text:000078E7                 mov     esp, ebp
.text:000078E9                 pop     ebp
.text:000078EA                 retn
.text:000078EA ??0?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ endp
.text:000078EA
.text:000078EA ; ---------------------------------------------------------------------------
.text:000078EB                 align 4
.text:000078EB _text           ends
.text:000078EB
.text:000078EC ; ===========================================================================
.text:000078EC
.text:000078EC ; Segment type: Pure code
.text:000078EC ; Segment permissions: Read/Execute
.text:000078EC _text           segment para public 'CODE' use32
.text:000078EC                 assume cs:_text
.text:000078EC                 ;org 78ECh
.text:000078EC ; COMDAT (pick any)
.text:000078EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000078EC
.text:000078EC ; =============== S U B R O U T I N E =======================================
.text:000078EC
.text:000078EC ; Attributes: bp-based frame
.text:000078EC
.text:000078EC ; public: class NArchive::N7z::CSequentialOutTempBufferImp2 * & __thiscall CObjectVector<class NArchive::N7z::CSequentialOutTempBufferImp2 *>::operator[](unsigned int)
.text:000078EC                 public ??A?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAEAAPAVCSequentialOutTempBufferImp2@N7z@NArchive@@I@Z
.text:000078EC ??A?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAEAAPAVCSequentialOutTempBufferImp2@N7z@NArchive@@I@Z proc near
.text:000078EC                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+6CFp
.text:000078EC
.text:000078EC var_4           = dword ptr -4
.text:000078EC arg_0           = dword ptr  8
.text:000078EC
.text:000078EC                 push    ebp
.text:000078ED                 mov     ebp, esp
.text:000078EF                 push    ecx
.text:000078F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000078F7                 mov     [ebp+var_4], ecx
.text:000078FA                 mov     eax, [ebp+arg_0]
.text:000078FD                 push    eax
.text:000078FE                 mov     ecx, [ebp+var_4]
.text:00007901                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00007906                 mov     eax, [eax]
.text:00007908                 add     esp, 4
.text:0000790B                 cmp     ebp, esp
.text:0000790D                 call    __RTC_CheckEsp
.text:00007912                 mov     esp, ebp
.text:00007914                 pop     ebp
.text:00007915                 retn    4
.text:00007915 ??A?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAEAAPAVCSequentialOutTempBufferImp2@N7z@NArchive@@I@Z endp
.text:00007915
.text:00007915 _text           ends
.text:00007915
.text:00007918 ; ===========================================================================
.text:00007918
.text:00007918 ; Segment type: Pure code
.text:00007918 ; Segment permissions: Read/Execute
.text:00007918 _text           segment para public 'CODE' use32
.text:00007918                 assume cs:_text
.text:00007918                 ;org 7918h
.text:00007918 ; COMDAT (pick any)
.text:00007918                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007918
.text:00007918 ; =============== S U B R O U T I N E =======================================
.text:00007918
.text:00007918 ; Attributes: bp-based frame
.text:00007918
.text:00007918 ; public: unsigned int __thiscall CObjectVector<class NArchive::N7z::CSequentialOutTempBufferImp2 *>::Add(class NArchive::N7z::CSequentialOutTempBufferImp2 * const &)
.text:00007918                 public ?Add@?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAEIABQAVCSequentialOutTempBufferImp2@N7z@NArchive@@@Z
.text:00007918 ?Add@?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAEIABQAVCSequentialOutTempBufferImp2@N7z@NArchive@@@Z proc near
.text:00007918                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+205p
.text:00007918
.text:00007918 var_C           = dword ptr -0Ch
.text:00007918 var_8           = dword ptr -8
.text:00007918 var_4           = dword ptr -4
.text:00007918 arg_0           = dword ptr  8
.text:00007918
.text:00007918                 push    ebp
.text:00007919                 mov     ebp, esp
.text:0000791B                 sub     esp, 0Ch
.text:0000791E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00007925                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000792C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007933                 mov     [ebp+var_4], ecx
.text:00007936                 push    4               ; unsigned int
.text:00007938                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000793D                 add     esp, 4
.text:00007940                 mov     [ebp+var_8], eax
.text:00007943                 cmp     [ebp+var_8], 0
.text:00007947                 jz      short loc_795B
.text:00007949                 mov     eax, [ebp+var_8]
.text:0000794C                 mov     ecx, [ebp+arg_0]
.text:0000794F                 mov     edx, [ecx]
.text:00007951                 mov     [eax], edx
.text:00007953                 mov     eax, [ebp+var_8]
.text:00007956                 mov     [ebp+var_C], eax
.text:00007959                 jmp     short loc_7962
.text:0000795B ; ---------------------------------------------------------------------------
.text:0000795B
.text:0000795B loc_795B:                               ; CODE XREF: CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::Add(NArchive::N7z::CSequentialOutTempBufferImp2 * const &)+2Fj
.text:0000795B                 mov     [ebp+var_C], 0
.text:00007962
.text:00007962 loc_7962:                               ; CODE XREF: CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::Add(NArchive::N7z::CSequentialOutTempBufferImp2 * const &)+41j
.text:00007962                 mov     ecx, [ebp+var_C]
.text:00007965                 push    ecx
.text:00007966                 mov     ecx, [ebp+var_4]
.text:00007969                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:0000796E                 add     esp, 0Ch
.text:00007971                 cmp     ebp, esp
.text:00007973                 call    __RTC_CheckEsp
.text:00007978                 mov     esp, ebp
.text:0000797A                 pop     ebp
.text:0000797B                 retn    4
.text:0000797B ?Add@?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAEIABQAVCSequentialOutTempBufferImp2@N7z@NArchive@@@Z endp
.text:0000797B
.text:0000797B ; ---------------------------------------------------------------------------
.text:0000797E                 align 10h
.text:0000797E _text           ends
.text:0000797E
.text:00007980 ; ===========================================================================
.text:00007980
.text:00007980 ; Segment type: Pure code
.text:00007980 ; Segment permissions: Read/Execute
.text:00007980 _text           segment para public 'CODE' use32
.text:00007980                 assume cs:_text
.text:00007980                 ;org 7980h
.text:00007980 ; COMDAT (pick any)
.text:00007980                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007980
.text:00007980 ; =============== S U B R O U T I N E =======================================
.text:00007980
.text:00007980 ; Attributes: bp-based frame
.text:00007980
.text:00007980 ; public: __thiscall CObjectVector<class NArchive::N7z::CSequentialOutTempBufferImp2 *>::~CObjectVector<class NArchive::N7z::CSequentialOutTempBufferImp2 *>(void)
.text:00007980                 public ??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ
.text:00007980 ??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ proc near
.text:00007980                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+8B2p
.text:00007980                                         ; NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+9B6p ...
.text:00007980
.text:00007980 var_18          = dword ptr -18h
.text:00007980 var_14          = dword ptr -14h
.text:00007980 var_10          = dword ptr -10h
.text:00007980 var_C           = dword ptr -0Ch
.text:00007980 var_4           = dword ptr -4
.text:00007980
.text:00007980                 push    ebp
.text:00007981                 mov     ebp, esp
.text:00007983                 push    0FFFFFFFFh
.text:00007985                 push    offset __ehhandler$??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ
.text:0000798A                 mov     eax, large fs:0
.text:00007990                 push    eax
.text:00007991                 sub     esp, 0Ch
.text:00007994                 mov     [ebp+var_18], 0CCCCCCCCh
.text:0000799B                 mov     [ebp+var_14], 0CCCCCCCCh
.text:000079A2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000079A9                 mov     eax, dword ptr ds:___security_cookie
.text:000079AE                 xor     eax, ebp
.text:000079B0                 push    eax
.text:000079B1                 lea     eax, [ebp+var_C]
.text:000079B4                 mov     large fs:0, eax
.text:000079BA                 mov     [ebp+var_10], ecx
.text:000079BD                 mov     [ebp+var_4], 0
.text:000079C4                 mov     ecx, [ebp+var_10]
.text:000079C7                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000079CC                 mov     [ebp+var_14], eax
.text:000079CF
.text:000079CF loc_79CF:                               ; CODE XREF: CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::~CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>(void)+7Bj
.text:000079CF                 cmp     [ebp+var_14], 0
.text:000079D3                 jz      short loc_79FD
.text:000079D5                 mov     eax, [ebp+var_14]
.text:000079D8                 sub     eax, 1
.text:000079DB                 mov     [ebp+var_14], eax
.text:000079DE                 mov     ecx, [ebp+var_14]
.text:000079E1                 push    ecx
.text:000079E2                 mov     ecx, [ebp+var_10]
.text:000079E5                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000079EA                 mov     edx, [eax]
.text:000079EC                 mov     [ebp+var_18], edx
.text:000079EF                 mov     eax, [ebp+var_18]
.text:000079F2                 push    eax             ; void *
.text:000079F3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000079F8                 add     esp, 4
.text:000079FB                 jmp     short loc_79CF
.text:000079FD ; ---------------------------------------------------------------------------
.text:000079FD
.text:000079FD loc_79FD:                               ; CODE XREF: CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::~CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>(void)+53j
.text:000079FD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007A04                 mov     ecx, [ebp+var_10]
.text:00007A07                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00007A0C                 mov     ecx, [ebp+var_C]
.text:00007A0F                 mov     large fs:0, ecx
.text:00007A16                 pop     ecx
.text:00007A17                 add     esp, 18h
.text:00007A1A                 cmp     ebp, esp
.text:00007A1C                 call    __RTC_CheckEsp
.text:00007A21                 mov     esp, ebp
.text:00007A23                 pop     ebp
.text:00007A24                 retn
.text:00007A24 ??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ endp
.text:00007A24
.text:00007A24 ; ---------------------------------------------------------------------------
.text:00007A25                 align 4
.text:00007A25 _text           ends
.text:00007A25
.text$x:00007A28 ; ===========================================================================
.text$x:00007A28
.text$x:00007A28 ; Segment type: Pure code
.text$x:00007A28 ; Segment permissions: Read/Execute
.text$x:00007A28 _text$x         segment para public 'CODE' use32
.text$x:00007A28                 assume cs:_text$x
.text$x:00007A28                 ;org 7A28h
.text$x:00007A28 ; COMDAT (pick associative to section at 7980)
.text$x:00007A28                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00007A28
.text$x:00007A28 ; =============== S U B R O U T I N E =======================================
.text$x:00007A28
.text$x:00007A28
.text$x:00007A28 __unwindfunclet$??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ$0 proc near
.text$x:00007A28                                         ; DATA XREF: .xdata$x:00007A50o
.text$x:00007A28                 mov     ecx, [ebp-10h]
.text$x:00007A2B                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00007A2B __unwindfunclet$??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ$0 endp
.text$x:00007A2B
.text$x:00007A30
.text$x:00007A30 ; =============== S U B R O U T I N E =======================================
.text$x:00007A30
.text$x:00007A30
.text$x:00007A30 __ehhandler$??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ proc near
.text$x:00007A30                                         ; DATA XREF: CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>::~CObjectVector<NArchive::N7z::CSequentialOutTempBufferImp2 *>(void)+5o
.text$x:00007A30
.text$x:00007A30 arg_4           = dword ptr  8
.text$x:00007A30
.text$x:00007A30                 mov     edx, [esp+arg_4]
.text$x:00007A34                 lea     eax, [edx+0Ch]
.text$x:00007A37                 mov     ecx, [edx-10h]
.text$x:00007A3A                 xor     ecx, eax
.text$x:00007A3C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007A41                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ
.text$x:00007A46                 jmp     ___CxxFrameHandler3
.text$x:00007A46 __ehhandler$??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ endp
.text$x:00007A46
.text$x:00007A46 ; ---------------------------------------------------------------------------
.text$x:00007A4B                 align 4
.text$x:00007A4B _text$x         ends
.text$x:00007A4B
.xdata$x:00007A4C ; ===========================================================================
.xdata$x:00007A4C
.xdata$x:00007A4C ; Segment type: Pure data
.xdata$x:00007A4C ; Segment permissions: Read
.xdata$x:00007A4C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007A4C                 assume cs:_xdata$x
.xdata$x:00007A4C                 ;org 7A4Ch
.xdata$x:00007A4C ; COMDAT (pick associative to section at 7980)
.xdata$x:00007A4C __unwindtable$??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:00007A4C                                         ; DATA XREF: .xdata$x:00007A5Co
.xdata$x:00007A4D                 db 0FFh
.xdata$x:00007A4E                 db 0FFh
.xdata$x:00007A4F                 db 0FFh
.xdata$x:00007A50                 dd offset __unwindfunclet$??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ$0
.xdata$x:00007A54 __ehfuncinfo$??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:00007A54                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ+11o
.xdata$x:00007A55                 db    5
.xdata$x:00007A56                 db  93h ; ô
.xdata$x:00007A57                 db  19h
.xdata$x:00007A58                 db    1
.xdata$x:00007A59                 db    0
.xdata$x:00007A5A                 db    0
.xdata$x:00007A5B                 db    0
.xdata$x:00007A5C                 dd offset __unwindtable$??1?$CObjectVector@PAVCSequentialOutTempBufferImp2@N7z@NArchive@@@@QAE@XZ
.xdata$x:00007A60                 db    0
.xdata$x:00007A61                 db    0
.xdata$x:00007A62                 db    0
.xdata$x:00007A63                 db    0
.xdata$x:00007A64                 db    0
.xdata$x:00007A65                 db    0
.xdata$x:00007A66                 db    0
.xdata$x:00007A67                 db    0
.xdata$x:00007A68                 db    0
.xdata$x:00007A69                 db    0
.xdata$x:00007A6A                 db    0
.xdata$x:00007A6B                 db    0
.xdata$x:00007A6C                 db    0
.xdata$x:00007A6D                 db    0
.xdata$x:00007A6E                 db    0
.xdata$x:00007A6F                 db    0
.xdata$x:00007A70                 db    0
.xdata$x:00007A71                 db    0
.xdata$x:00007A72                 db    0
.xdata$x:00007A73                 db    0
.xdata$x:00007A74                 db    1
.xdata$x:00007A75                 db    0
.xdata$x:00007A76                 db    0
.xdata$x:00007A77                 db    0
.xdata$x:00007A77 _xdata$x        ends
.xdata$x:00007A77
.text:00007A78 ; ===========================================================================
.text:00007A78
.text:00007A78 ; Segment type: Pure code
.text:00007A78 ; Segment permissions: Read/Execute
.text:00007A78 _text           segment para public 'CODE' use32
.text:00007A78                 assume cs:_text
.text:00007A78                 ;org 7A78h
.text:00007A78 ; COMDAT (pick any)
.text:00007A78                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007A78
.text:00007A78 ; =============== S U B R O U T I N E =======================================
.text:00007A78
.text:00007A78 ; Attributes: bp-based frame
.text:00007A78
.text:00007A78 ; public: void * __thiscall CProp::`scalar deleting destructor'(unsigned int)
.text:00007A78                 public ??_GCProp@@QAEPAXI@Z
.text:00007A78 ??_GCProp@@QAEPAXI@Z proc near          ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+7Fp
.text:00007A78
.text:00007A78 var_4           = dword ptr -4
.text:00007A78 arg_0           = dword ptr  8
.text:00007A78
.text:00007A78                 push    ebp
.text:00007A79                 mov     ebp, esp
.text:00007A7B                 push    ecx
.text:00007A7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007A83                 mov     [ebp+var_4], ecx
.text:00007A86                 mov     ecx, [ebp+var_4] ; this
.text:00007A89                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:00007A8E                 mov     eax, [ebp+arg_0]
.text:00007A91                 and     eax, 1
.text:00007A94                 jz      short loc_7AA2
.text:00007A96                 mov     ecx, [ebp+var_4]
.text:00007A99                 push    ecx             ; void *
.text:00007A9A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007A9F                 add     esp, 4
.text:00007AA2
.text:00007AA2 loc_7AA2:                               ; CODE XREF: CProp::`scalar deleting destructor'(uint)+1Cj
.text:00007AA2                 mov     eax, [ebp+var_4]
.text:00007AA5                 add     esp, 4
.text:00007AA8                 cmp     ebp, esp
.text:00007AAA                 call    __RTC_CheckEsp
.text:00007AAF                 mov     esp, ebp
.text:00007AB1                 pop     ebp
.text:00007AB2                 retn    4
.text:00007AB2 ??_GCProp@@QAEPAXI@Z endp
.text:00007AB2
.text:00007AB2 ; ---------------------------------------------------------------------------
.text:00007AB5                 align 4
.text:00007AB5 _text           ends
.text:00007AB5
.text:00007AB8 ; ===========================================================================
.text:00007AB8
.text:00007AB8 ; Segment type: Pure code
.text:00007AB8 ; Segment permissions: Read/Execute
.text:00007AB8 _text           segment para public 'CODE' use32
.text:00007AB8                 assume cs:_text
.text:00007AB8                 ;org 7AB8h
.text:00007AB8 ; COMDAT (pick any)
.text:00007AB8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007AB8
.text:00007AB8 ; =============== S U B R O U T I N E =======================================
.text:00007AB8
.text:00007AB8 ; Attributes: bp-based frame
.text:00007AB8
.text:00007AB8 ; _DWORD __thiscall NArchive::N7z::CMethodFull::CMethodFull(NArchive::N7z::CMethodFull *this, const struct NArchive::N7z::CMethodFull *)
.text:00007AB8                 public ??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z
.text:00007AB8 ??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z proc near
.text:00007AB8                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::operator=(CObjectVector<NArchive::N7z::CMethodFull> const &)+B2p
.text:00007AB8                                         ; CObjectVector<NArchive::N7z::CMethodFull>::Add(NArchive::N7z::CMethodFull const &)+5Ap
.text:00007AB8
.text:00007AB8 var_4           = dword ptr -4
.text:00007AB8 arg_0           = dword ptr  8
.text:00007AB8
.text:00007AB8                 push    ebp
.text:00007AB9                 mov     ebp, esp
.text:00007ABB                 push    ecx
.text:00007ABC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007AC3                 mov     [ebp+var_4], ecx
.text:00007AC6                 mov     eax, [ebp+arg_0]
.text:00007AC9                 push    eax
.text:00007ACA                 mov     ecx, [ebp+var_4]
.text:00007ACD                 call    ??0CMethodProps@@QAE@ABV0@@Z ; CMethodProps::CMethodProps(CMethodProps const &)
.text:00007AD2                 mov     ecx, [ebp+var_4]
.text:00007AD5                 mov     edx, [ebp+arg_0]
.text:00007AD8                 mov     eax, [edx+10h]
.text:00007ADB                 mov     [ecx+10h], eax
.text:00007ADE                 mov     edx, [edx+14h]
.text:00007AE1                 mov     [ecx+14h], edx
.text:00007AE4                 mov     eax, [ebp+var_4]
.text:00007AE7                 mov     ecx, [ebp+arg_0]
.text:00007AEA                 mov     edx, [ecx+18h]
.text:00007AED                 mov     [eax+18h], edx
.text:00007AF0                 mov     eax, [ebp+var_4]
.text:00007AF3                 add     esp, 4
.text:00007AF6                 cmp     ebp, esp
.text:00007AF8                 call    __RTC_CheckEsp
.text:00007AFD                 mov     esp, ebp
.text:00007AFF                 pop     ebp
.text:00007B00                 retn    4
.text:00007B00 ??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z endp
.text:00007B00
.text:00007B00 ; ---------------------------------------------------------------------------
.text:00007B03                 align 4
.text:00007B03 _text           ends
.text:00007B03
.text:00007B04 ; ===========================================================================
.text:00007B04
.text:00007B04 ; Segment type: Pure code
.text:00007B04 ; Segment permissions: Read/Execute
.text:00007B04 _text           segment para public 'CODE' use32
.text:00007B04                 assume cs:_text
.text:00007B04                 ;org 7B04h
.text:00007B04 ; COMDAT (pick any)
.text:00007B04                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007B04
.text:00007B04 ; =============== S U B R O U T I N E =======================================
.text:00007B04
.text:00007B04 ; Attributes: bp-based frame
.text:00007B04
.text:00007B04 ; public: void * __thiscall NArchive::N7z::CMethodFull::`scalar deleting destructor'(unsigned int)
.text:00007B04                 public ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z
.text:00007B04 ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z proc near
.text:00007B04                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>(void)+7Fp
.text:00007B04                                         ; CObjectVector<NArchive::N7z::CMethodFull>::Clear(void)+59p
.text:00007B04
.text:00007B04 var_4           = dword ptr -4
.text:00007B04 arg_0           = dword ptr  8
.text:00007B04
.text:00007B04                 push    ebp
.text:00007B05                 mov     ebp, esp
.text:00007B07                 push    ecx
.text:00007B08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007B0F                 mov     [ebp+var_4], ecx
.text:00007B12                 mov     ecx, [ebp+var_4] ; this
.text:00007B15                 call    ??1CMethodFull@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CMethodFull::~CMethodFull(void)
.text:00007B1A                 mov     eax, [ebp+arg_0]
.text:00007B1D                 and     eax, 1
.text:00007B20                 jz      short loc_7B2E
.text:00007B22                 mov     ecx, [ebp+var_4]
.text:00007B25                 push    ecx             ; void *
.text:00007B26                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007B2B                 add     esp, 4
.text:00007B2E
.text:00007B2E loc_7B2E:                               ; CODE XREF: NArchive::N7z::CMethodFull::`scalar deleting destructor'(uint)+1Cj
.text:00007B2E                 mov     eax, [ebp+var_4]
.text:00007B31                 add     esp, 4
.text:00007B34                 cmp     ebp, esp
.text:00007B36                 call    __RTC_CheckEsp
.text:00007B3B                 mov     esp, ebp
.text:00007B3D                 pop     ebp
.text:00007B3E                 retn    4
.text:00007B3E ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z endp
.text:00007B3E
.text:00007B3E ; ---------------------------------------------------------------------------
.text:00007B41                 align 4
.text:00007B41 _text           ends
.text:00007B41
.text:00007B44 ; ===========================================================================
.text:00007B44
.text:00007B44 ; Segment type: Pure code
.text:00007B44 ; Segment permissions: Read/Execute
.text:00007B44 _text           segment para public 'CODE' use32
.text:00007B44                 assume cs:_text
.text:00007B44                 ;org 7B44h
.text:00007B44 ; COMDAT (pick any)
.text:00007B44                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007B44
.text:00007B44 ; =============== S U B R O U T I N E =======================================
.text:00007B44
.text:00007B44 ; Attributes: bp-based frame
.text:00007B44
.text:00007B44 ; public: void * __thiscall CMyComPtr<struct ISequentialOutStream>::`scalar deleting destructor'(unsigned int)
.text:00007B44                 public ??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z
.text:00007B44 ??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z proc near
.text:00007B44                                         ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)+7Fp
.text:00007B44
.text:00007B44 var_4           = dword ptr -4
.text:00007B44 arg_0           = dword ptr  8
.text:00007B44
.text:00007B44                 push    ebp
.text:00007B45                 mov     ebp, esp
.text:00007B47                 push    ecx
.text:00007B48                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007B4F                 mov     [ebp+var_4], ecx
.text:00007B52                 mov     ecx, [ebp+var_4]
.text:00007B55                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00007B5A                 mov     eax, [ebp+arg_0]
.text:00007B5D                 and     eax, 1
.text:00007B60                 jz      short loc_7B6E
.text:00007B62                 mov     ecx, [ebp+var_4]
.text:00007B65                 push    ecx             ; void *
.text:00007B66                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007B6B                 add     esp, 4
.text:00007B6E
.text:00007B6E loc_7B6E:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::`scalar deleting destructor'(uint)+1Cj
.text:00007B6E                 mov     eax, [ebp+var_4]
.text:00007B71                 add     esp, 4
.text:00007B74                 cmp     ebp, esp
.text:00007B76                 call    __RTC_CheckEsp
.text:00007B7B                 mov     esp, ebp
.text:00007B7D                 pop     ebp
.text:00007B7E                 retn    4
.text:00007B7E ??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z endp
.text:00007B7E
.text:00007B7E ; ---------------------------------------------------------------------------
.text:00007B81                 align 4
.text:00007B81 _text           ends
.text:00007B81
.text:00007B84 ; ===========================================================================
.text:00007B84
.text:00007B84 ; Segment type: Pure code
.text:00007B84 ; Segment permissions: Read/Execute
.text:00007B84 _text           segment para public 'CODE' use32
.text:00007B84                 assume cs:_text
.text:00007B84                 ;org 7B84h
.text:00007B84 ; COMDAT (pick any)
.text:00007B84                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007B84
.text:00007B84 ; =============== S U B R O U T I N E =======================================
.text:00007B84
.text:00007B84 ; Attributes: bp-based frame
.text:00007B84
.text:00007B84 ; public: void * __thiscall CStreamBinder::`scalar deleting destructor'(unsigned int)
.text:00007B84                 public ??_GCStreamBinder@@QAEPAXI@Z
.text:00007B84 ??_GCStreamBinder@@QAEPAXI@Z proc near  ; CODE XREF: CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>(void)+7Fp
.text:00007B84
.text:00007B84 var_4           = dword ptr -4
.text:00007B84 arg_0           = dword ptr  8
.text:00007B84
.text:00007B84                 push    ebp
.text:00007B85                 mov     ebp, esp
.text:00007B87                 push    ecx
.text:00007B88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007B8F                 mov     [ebp+var_4], ecx
.text:00007B92                 mov     ecx, [ebp+var_4] ; this
.text:00007B95                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:00007B9A                 mov     eax, [ebp+arg_0]
.text:00007B9D                 and     eax, 1
.text:00007BA0                 jz      short loc_7BAE
.text:00007BA2                 mov     ecx, [ebp+var_4]
.text:00007BA5                 push    ecx             ; void *
.text:00007BA6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007BAB                 add     esp, 4
.text:00007BAE
.text:00007BAE loc_7BAE:                               ; CODE XREF: CStreamBinder::`scalar deleting destructor'(uint)+1Cj
.text:00007BAE                 mov     eax, [ebp+var_4]
.text:00007BB1                 add     esp, 4
.text:00007BB4                 cmp     ebp, esp
.text:00007BB6                 call    __RTC_CheckEsp
.text:00007BBB                 mov     esp, ebp
.text:00007BBD                 pop     ebp
.text:00007BBE                 retn    4
.text:00007BBE ??_GCStreamBinder@@QAEPAXI@Z endp
.text:00007BBE
.text:00007BBE ; ---------------------------------------------------------------------------
.text:00007BC1                 align 4
.text:00007BC1 _text           ends
.text:00007BC1
.text:00007BC4 ; ===========================================================================
.text:00007BC4
.text:00007BC4 ; Segment type: Pure code
.text:00007BC4 ; Segment permissions: Read/Execute
.text:00007BC4 _text           segment para public 'CODE' use32
.text:00007BC4                 assume cs:_text
.text:00007BC4                 ;org 7BC4h
.text:00007BC4 ; COMDAT (pick any)
.text:00007BC4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007BC4
.text:00007BC4 ; =============== S U B R O U T I N E =======================================
.text:00007BC4
.text:00007BC4 ; Attributes: bp-based frame
.text:00007BC4
.text:00007BC4 ; public: void * __thiscall NCoderMixer2::CCoderMT::`scalar deleting destructor'(unsigned int)
.text:00007BC4                 public ??_GCCoderMT@NCoderMixer2@@QAEPAXI@Z
.text:00007BC4 ??_GCCoderMT@NCoderMixer2@@QAEPAXI@Z proc near
.text:00007BC4                                         ; CODE XREF: CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>(void)+7Fp
.text:00007BC4
.text:00007BC4 var_4           = dword ptr -4
.text:00007BC4 arg_0           = dword ptr  8
.text:00007BC4
.text:00007BC4                 push    ebp
.text:00007BC5                 mov     ebp, esp
.text:00007BC7                 push    ecx
.text:00007BC8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007BCF                 mov     [ebp+var_4], ecx
.text:00007BD2                 mov     ecx, [ebp+var_4] ; this
.text:00007BD5                 call    ??1CCoderMT@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CCoderMT::~CCoderMT(void)
.text:00007BDA                 mov     eax, [ebp+arg_0]
.text:00007BDD                 and     eax, 1
.text:00007BE0                 jz      short loc_7BEE
.text:00007BE2                 mov     ecx, [ebp+var_4]
.text:00007BE5                 push    ecx             ; void *
.text:00007BE6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007BEB                 add     esp, 4
.text:00007BEE
.text:00007BEE loc_7BEE:                               ; CODE XREF: NCoderMixer2::CCoderMT::`scalar deleting destructor'(uint)+1Cj
.text:00007BEE                 mov     eax, [ebp+var_4]
.text:00007BF1                 add     esp, 4
.text:00007BF4                 cmp     ebp, esp
.text:00007BF6                 call    __RTC_CheckEsp
.text:00007BFB                 mov     esp, ebp
.text:00007BFD                 pop     ebp
.text:00007BFE                 retn    4
.text:00007BFE ??_GCCoderMT@NCoderMixer2@@QAEPAXI@Z endp
.text:00007BFE
.text:00007BFE ; ---------------------------------------------------------------------------
.text:00007C01                 align 4
.text:00007C01 _text           ends
.text:00007C01
.text:00007C04 ; ===========================================================================
.text:00007C04
.text:00007C04 ; Segment type: Pure code
.text:00007C04 ; Segment permissions: Read/Execute
.text:00007C04 _text           segment para public 'CODE' use32
.text:00007C04                 assume cs:_text
.text:00007C04                 ;org 7C04h
.text:00007C04 ; COMDAT (pick any)
.text:00007C04                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007C04
.text:00007C04 ; =============== S U B R O U T I N E =======================================
.text:00007C04
.text:00007C04 ; Attributes: bp-based frame
.text:00007C04
.text:00007C04 ; _DWORD __thiscall NCoderMixer2::CCoderMT::~CCoderMT(NCoderMixer2::CCoderMT *__hidden this)
.text:00007C04                 public ??1CCoderMT@NCoderMixer2@@QAE@XZ
.text:00007C04 ??1CCoderMT@NCoderMixer2@@QAE@XZ proc near
.text:00007C04                                         ; CODE XREF: NCoderMixer2::CCoderMT::`scalar deleting destructor'(uint)+11p
.text:00007C04
.text:00007C04 var_10          = dword ptr -10h
.text:00007C04 var_C           = dword ptr -0Ch
.text:00007C04 var_4           = dword ptr -4
.text:00007C04
.text:00007C04                 push    ebp
.text:00007C05                 mov     ebp, esp
.text:00007C07                 push    0FFFFFFFFh
.text:00007C09                 push    offset __ehhandler$??1CCoderMT@NCoderMixer2@@QAE@XZ
.text:00007C0E                 mov     eax, large fs:0
.text:00007C14                 push    eax
.text:00007C15                 push    ecx
.text:00007C16                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00007C1D                 mov     eax, dword ptr ds:___security_cookie
.text:00007C22                 xor     eax, ebp
.text:00007C24                 push    eax
.text:00007C25                 lea     eax, [ebp+var_C]
.text:00007C28                 mov     large fs:0, eax
.text:00007C2E                 mov     [ebp+var_10], ecx
.text:00007C31                 mov     eax, [ebp+var_10]
.text:00007C34                 mov     dword ptr [eax], offset ??_7CCoderMT@NCoderMixer2@@6B@ ; const NCoderMixer2::CCoderMT::`vftable'
.text:00007C3A                 mov     [ebp+var_4], 5
.text:00007C41                 mov     ecx, [ebp+var_10] ; this
.text:00007C44                 call    ?WaitThreadFinish@CVirtThread@@QAEXXZ ; CVirtThread::WaitThreadFinish(void)
.text:00007C49                 mov     byte ptr [ebp+var_4], 4
.text:00007C4D                 mov     ecx, [ebp+var_10]
.text:00007C50                 add     ecx, 7Ch ; '|'
.text:00007C53                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)
.text:00007C58                 mov     byte ptr [ebp+var_4], 3
.text:00007C5C                 mov     ecx, [ebp+var_10]
.text:00007C5F                 add     ecx, 70h ; 'p'
.text:00007C62                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)
.text:00007C67                 mov     byte ptr [ebp+var_4], 2
.text:00007C6B                 mov     ecx, [ebp+var_10]
.text:00007C6E                 add     ecx, 5Ch ; '\'
.text:00007C71                 call    ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>(void)
.text:00007C76                 mov     byte ptr [ebp+var_4], 1
.text:00007C7A                 mov     ecx, [ebp+var_10]
.text:00007C7D                 add     ecx, 50h ; 'P'
.text:00007C80                 call    ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>(void)
.text:00007C85                 mov     byte ptr [ebp+var_4], 0
.text:00007C89                 mov     ecx, [ebp+var_10] ; this
.text:00007C8C                 call    ??1CVirtThread@@QAE@XZ ; CVirtThread::~CVirtThread(void)
.text:00007C91                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007C98                 mov     ecx, [ebp+var_10]
.text:00007C9B                 add     ecx, 18h        ; this
.text:00007C9E                 call    ??1CCoder@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CCoder::~CCoder(void)
.text:00007CA3                 mov     ecx, [ebp+var_C]
.text:00007CA6                 mov     large fs:0, ecx
.text:00007CAD                 pop     ecx
.text:00007CAE                 add     esp, 10h
.text:00007CB1                 cmp     ebp, esp
.text:00007CB3                 call    __RTC_CheckEsp
.text:00007CB8                 mov     esp, ebp
.text:00007CBA                 pop     ebp
.text:00007CBB                 retn
.text:00007CBB ??1CCoderMT@NCoderMixer2@@QAE@XZ endp
.text:00007CBB
.text:00007CBB _text           ends
.text:00007CBB
.text$x:00007CBC ; ===========================================================================
.text$x:00007CBC
.text$x:00007CBC ; Segment type: Pure code
.text$x:00007CBC ; Segment permissions: Read/Execute
.text$x:00007CBC _text$x         segment para public 'CODE' use32
.text$x:00007CBC                 assume cs:_text$x
.text$x:00007CBC                 ;org 7CBCh
.text$x:00007CBC ; COMDAT (pick associative to section at 7C04)
.text$x:00007CBC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00007CBC
.text$x:00007CBC ; =============== S U B R O U T I N E =======================================
.text$x:00007CBC
.text$x:00007CBC
.text$x:00007CBC __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:00007CBC                                         ; DATA XREF: .xdata$x:00007D48o
.text$x:00007CBC                 mov     ecx, [ebp-10h]
.text$x:00007CBF                 add     ecx, 18h        ; this
.text$x:00007CC2                 jmp     ??1CCoder@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CCoder::~CCoder(void)
.text$x:00007CC2 __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$0 endp
.text$x:00007CC2
.text$x:00007CC7
.text$x:00007CC7 ; =============== S U B R O U T I N E =======================================
.text$x:00007CC7
.text$x:00007CC7
.text$x:00007CC7 __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:00007CC7                                         ; DATA XREF: .xdata$x:00007D50o
.text$x:00007CC7                 mov     ecx, [ebp-10h]  ; this
.text$x:00007CCA                 jmp     ??1CVirtThread@@QAE@XZ ; CVirtThread::~CVirtThread(void)
.text$x:00007CCA __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$1 endp
.text$x:00007CCA
.text$x:00007CCF
.text$x:00007CCF ; =============== S U B R O U T I N E =======================================
.text$x:00007CCF
.text$x:00007CCF
.text$x:00007CCF __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$2 proc near
.text$x:00007CCF                                         ; DATA XREF: .xdata$x:00007D58o
.text$x:00007CCF                 mov     ecx, [ebp-10h]
.text$x:00007CD2                 add     ecx, 50h ; 'P'
.text$x:00007CD5                 jmp     ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>(void)
.text$x:00007CD5 __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$2 endp
.text$x:00007CD5
.text$x:00007CDA
.text$x:00007CDA ; =============== S U B R O U T I N E =======================================
.text$x:00007CDA
.text$x:00007CDA
.text$x:00007CDA __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$3 proc near
.text$x:00007CDA                                         ; DATA XREF: .xdata$x:00007D60o
.text$x:00007CDA                 mov     ecx, [ebp-10h]
.text$x:00007CDD                 add     ecx, 5Ch ; '\'
.text$x:00007CE0                 jmp     ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>(void)
.text$x:00007CE0 __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$3 endp
.text$x:00007CE0
.text$x:00007CE5
.text$x:00007CE5 ; =============== S U B R O U T I N E =======================================
.text$x:00007CE5
.text$x:00007CE5
.text$x:00007CE5 __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$4 proc near
.text$x:00007CE5                                         ; DATA XREF: .xdata$x:00007D68o
.text$x:00007CE5                 mov     ecx, [ebp-10h]
.text$x:00007CE8                 add     ecx, 70h ; 'p'
.text$x:00007CEB                 jmp     ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)
.text$x:00007CEB __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$4 endp
.text$x:00007CEB
.text$x:00007CF0
.text$x:00007CF0 ; =============== S U B R O U T I N E =======================================
.text$x:00007CF0
.text$x:00007CF0
.text$x:00007CF0 __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$5 proc near
.text$x:00007CF0                                         ; DATA XREF: .xdata$x:00007D70o
.text$x:00007CF0                 mov     ecx, [ebp-10h]
.text$x:00007CF3                 add     ecx, 7Ch ; '|'
.text$x:00007CF6                 jmp     ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)
.text$x:00007CF6 __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$5 endp
.text$x:00007CF6
.text$x:00007CFB
.text$x:00007CFB ; =============== S U B R O U T I N E =======================================
.text$x:00007CFB
.text$x:00007CFB
.text$x:00007CFB __ehhandler$??1CCoderMT@NCoderMixer2@@QAE@XZ proc near
.text$x:00007CFB                                         ; DATA XREF: NCoderMixer2::CCoderMT::~CCoderMT(void)+5o
.text$x:00007CFB
.text$x:00007CFB arg_4           = dword ptr  8
.text$x:00007CFB
.text$x:00007CFB                 mov     edx, [esp+arg_4]
.text$x:00007CFF                 lea     eax, [edx+0Ch]
.text$x:00007D02                 mov     ecx, [edx-8]
.text$x:00007D05                 xor     ecx, eax
.text$x:00007D07                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007D0C                 mov     eax, offset __ehfuncinfo$??1CCoderMT@NCoderMixer2@@QAE@XZ
.text$x:00007D11                 jmp     ___CxxFrameHandler3
.text$x:00007D11 __ehhandler$??1CCoderMT@NCoderMixer2@@QAE@XZ endp
.text$x:00007D11
.text$x:00007D11 ; ---------------------------------------------------------------------------
.text$x:00007D16                 align 4
.text$x:00007D16 _text$x         ends
.text$x:00007D16
.rdata:00007D18 ; ===========================================================================
.rdata:00007D18
.rdata:00007D18 ; Segment type: Pure data
.rdata:00007D18 ; Segment permissions: Read
.rdata:00007D18 _rdata          segment dword public 'DATA' use32
.rdata:00007D18                 assume cs:_rdata
.rdata:00007D18                 ;org 7D18h
.rdata:00007D18 ; COMDAT (pick largest)
.rdata:00007D18                 dd offset ??_R4CCoderMT@NCoderMixer2@@6B@ ; const NCoderMixer2::CCoderMT::`RTTI Complete Object Locator'
.rdata:00007D1C                 public ??_7CCoderMT@NCoderMixer2@@6B@
.rdata:00007D1C ; const NCoderMixer2::CCoderMT::`vftable'
.rdata:00007D1C ??_7CCoderMT@NCoderMixer2@@6B@ dd offset ?Execute@CCoderMT@NCoderMixer2@@EAEXXZ
.rdata:00007D1C                                         ; DATA XREF: NCoderMixer2::CCoderMT::~CCoderMT(void)+30o
.rdata:00007D1C _rdata          ends                    ; NCoderMixer2::CCoderMT::Execute(void)
.rdata:00007D1C
.xdata$x:00007D20 ; ===========================================================================
.xdata$x:00007D20
.xdata$x:00007D20 ; Segment type: Pure data
.xdata$x:00007D20 ; Segment permissions: Read
.xdata$x:00007D20 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007D20                 assume cs:_xdata$x
.xdata$x:00007D20                 ;org 7D20h
.xdata$x:00007D20 ; COMDAT (pick associative to section at 7C04)
.xdata$x:00007D20 __ehfuncinfo$??1CCoderMT@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:00007D20                                         ; DATA XREF: __ehhandler$??1CCoderMT@NCoderMixer2@@QAE@XZ+11o
.xdata$x:00007D21                 db    5
.xdata$x:00007D22                 db  93h ; ô
.xdata$x:00007D23                 db  19h
.xdata$x:00007D24                 db    6
.xdata$x:00007D25                 db    0
.xdata$x:00007D26                 db    0
.xdata$x:00007D27                 db    0
.xdata$x:00007D28                 dd offset __unwindtable$??1CCoderMT@NCoderMixer2@@QAE@XZ
.xdata$x:00007D2C                 align 20h
.xdata$x:00007D40                 db    1
.xdata$x:00007D41                 db    0
.xdata$x:00007D42                 db    0
.xdata$x:00007D43                 db    0
.xdata$x:00007D44 __unwindtable$??1CCoderMT@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:00007D44                                         ; DATA XREF: .xdata$x:00007D28o
.xdata$x:00007D45                 db 0FFh
.xdata$x:00007D46                 db 0FFh
.xdata$x:00007D47                 db 0FFh
.xdata$x:00007D48                 dd offset __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$0
.xdata$x:00007D4C                 align 10h
.xdata$x:00007D50                 dd offset __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$1
.xdata$x:00007D54                 db    1
.xdata$x:00007D55                 db    0
.xdata$x:00007D56                 db    0
.xdata$x:00007D57                 db    0
.xdata$x:00007D58                 dd offset __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$2
.xdata$x:00007D5C                 db    2
.xdata$x:00007D5D                 db    0
.xdata$x:00007D5E                 db    0
.xdata$x:00007D5F                 db    0
.xdata$x:00007D60                 dd offset __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$3
.xdata$x:00007D64                 db    3
.xdata$x:00007D65                 db    0
.xdata$x:00007D66                 db    0
.xdata$x:00007D67                 db    0
.xdata$x:00007D68                 dd offset __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$4
.xdata$x:00007D6C                 db    4
.xdata$x:00007D6D                 db    0
.xdata$x:00007D6E                 db    0
.xdata$x:00007D6F                 db    0
.xdata$x:00007D70                 dd offset __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$5
.xdata$x:00007D70 _xdata$x        ends
.xdata$x:00007D70
.rdata$r:00007D74 ; ===========================================================================
.rdata$r:00007D74
.rdata$r:00007D74 ; Segment type: Pure data
.rdata$r:00007D74 ; Segment permissions: Read
.rdata$r:00007D74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007D74                 assume cs:_rdata$r
.rdata$r:00007D74                 ;org 7D74h
.rdata$r:00007D74 ; COMDAT (pick any)
.rdata$r:00007D74                 public ??_R4CCoderMT@NCoderMixer2@@6B@
.rdata$r:00007D74 ; const NCoderMixer2::CCoderMT::`RTTI Complete Object Locator'
.rdata$r:00007D74 ??_R4CCoderMT@NCoderMixer2@@6B@ db    0 ; DATA XREF: .rdata:00007D18o
.rdata$r:00007D75                 db    0
.rdata$r:00007D76                 db    0
.rdata$r:00007D77                 db    0
.rdata$r:00007D78                 db    0
.rdata$r:00007D79                 db    0
.rdata$r:00007D7A                 db    0
.rdata$r:00007D7B                 db    0
.rdata$r:00007D7C                 db    0
.rdata$r:00007D7D                 db    0
.rdata$r:00007D7E                 db    0
.rdata$r:00007D7F                 db    0
.rdata$r:00007D80                 dd offset ??_R0?AVCCoderMT@NCoderMixer2@@@8 ; NCoderMixer2::CCoderMT `RTTI Type Descriptor'
.rdata$r:00007D84                 dd offset ??_R3CCoderMT@NCoderMixer2@@8 ; NCoderMixer2::CCoderMT::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007D84 _rdata$r        ends
.rdata$r:00007D84
.data:00007D88 ; ===========================================================================
.data:00007D88
.data:00007D88 ; Segment type: Pure data
.data:00007D88 ; Segment permissions: Read/Write
.data:00007D88 _data           segment dword public 'DATA' use32
.data:00007D88                 assume cs:_data
.data:00007D88                 ;org 7D88h
.data:00007D88 ; COMDAT (pick any)
.data:00007D88                 public ??_R0?AVCCoderMT@NCoderMixer2@@@8
.data:00007D88 ; class NCoderMixer2::CCoderMT `RTTI Type Descriptor'
.data:00007D88 ??_R0?AVCCoderMT@NCoderMixer2@@@8 dd offset ??_7type_info@@6B@
.data:00007D88                                         ; DATA XREF: .rdata$r:00007D80o
.data:00007D88                                         ; .rdata$r:NCoderMixer2::CCoderMT::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00007D88                                         ; const type_info::`vftable'
.data:00007D8C                 align 10h
.data:00007D90 a_?avccodermt@n db '.?AVCCoderMT@NCoderMixer2@@',0
.data:00007D90 _data           ends
.data:00007D90
.rdata$r:00007DAC ; ===========================================================================
.rdata$r:00007DAC
.rdata$r:00007DAC ; Segment type: Pure data
.rdata$r:00007DAC ; Segment permissions: Read
.rdata$r:00007DAC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007DAC                 assume cs:_rdata$r
.rdata$r:00007DAC                 ;org 7DACh
.rdata$r:00007DAC ; COMDAT (pick any)
.rdata$r:00007DAC                 public ??_R3CCoderMT@NCoderMixer2@@8
.rdata$r:00007DAC ; NCoderMixer2::CCoderMT::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007DAC ??_R3CCoderMT@NCoderMixer2@@8 db    0   ; DATA XREF: .rdata$r:00007D84o
.rdata$r:00007DAC                                         ; .rdata$r:00007DE4o
.rdata$r:00007DAD                 db    0
.rdata$r:00007DAE                 db    0
.rdata$r:00007DAF                 db    0
.rdata$r:00007DB0                 db    1
.rdata$r:00007DB1                 db    0
.rdata$r:00007DB2                 db    0
.rdata$r:00007DB3                 db    0
.rdata$r:00007DB4                 db    3
.rdata$r:00007DB5                 db    0
.rdata$r:00007DB6                 db    0
.rdata$r:00007DB7                 db    0
.rdata$r:00007DB8                 dd offset ??_R2CCoderMT@NCoderMixer2@@8 ; NCoderMixer2::CCoderMT::`RTTI Base Class Array'
.rdata$r:00007DB8 _rdata$r        ends
.rdata$r:00007DB8
.rdata$r:00007DBC ; ===========================================================================
.rdata$r:00007DBC
.rdata$r:00007DBC ; Segment type: Pure data
.rdata$r:00007DBC ; Segment permissions: Read
.rdata$r:00007DBC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007DBC                 assume cs:_rdata$r
.rdata$r:00007DBC                 ;org 7DBCh
.rdata$r:00007DBC ; COMDAT (pick any)
.rdata$r:00007DBC                 public ??_R2CCoderMT@NCoderMixer2@@8
.rdata$r:00007DBC ; NCoderMixer2::CCoderMT::`RTTI Base Class Array'
.rdata$r:00007DBC ??_R2CCoderMT@NCoderMixer2@@8 dd offset ??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8
.rdata$r:00007DBC                                         ; DATA XREF: .rdata$r:00007DB8o
.rdata$r:00007DBC                                         ; NCoderMixer2::CCoderMT::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007DC0                 dd offset ??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8 ; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (24,-1,0,64)'
.rdata$r:00007DC4                 dd offset ??_R1A@?0A@EA@CVirtThread@@8 ; CVirtThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007DC8                 db    0
.rdata$r:00007DC9                 align 4
.rdata$r:00007DC9 _rdata$r        ends
.rdata$r:00007DC9
.rdata$r:00007DCC ; ===========================================================================
.rdata$r:00007DCC
.rdata$r:00007DCC ; Segment type: Pure data
.rdata$r:00007DCC ; Segment permissions: Read
.rdata$r:00007DCC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007DCC                 assume cs:_rdata$r
.rdata$r:00007DCC                 ;org 7DCCh
.rdata$r:00007DCC ; COMDAT (pick any)
.rdata$r:00007DCC                 public ??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8
.rdata$r:00007DCC ; NCoderMixer2::CCoderMT::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007DCC ??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8 dd offset ??_R0?AVCCoderMT@NCoderMixer2@@@8
.rdata$r:00007DCC                                         ; DATA XREF: .rdata$r:NCoderMixer2::CCoderMT::`RTTI Base Class Array'o
.rdata$r:00007DCC                                         ; NCoderMixer2::CCoderMT `RTTI Type Descriptor'
.rdata$r:00007DD0                 db    2
.rdata$r:00007DD1                 db    0
.rdata$r:00007DD2                 db    0
.rdata$r:00007DD3                 db    0
.rdata$r:00007DD4                 db    0
.rdata$r:00007DD5                 db    0
.rdata$r:00007DD6                 db    0
.rdata$r:00007DD7                 db    0
.rdata$r:00007DD8                 db 0FFh
.rdata$r:00007DD9                 db 0FFh
.rdata$r:00007DDA                 db 0FFh
.rdata$r:00007DDB                 db 0FFh
.rdata$r:00007DDC                 db    0
.rdata$r:00007DDD                 db    0
.rdata$r:00007DDE                 db    0
.rdata$r:00007DDF                 db    0
.rdata$r:00007DE0                 db  40h ; @
.rdata$r:00007DE1                 db    0
.rdata$r:00007DE2                 db    0
.rdata$r:00007DE3                 db    0
.rdata$r:00007DE4                 dd offset ??_R3CCoderMT@NCoderMixer2@@8 ; NCoderMixer2::CCoderMT::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007DE4 _rdata$r        ends
.rdata$r:00007DE4
.rdata$r:00007DE8 ; ===========================================================================
.rdata$r:00007DE8
.rdata$r:00007DE8 ; Segment type: Pure data
.rdata$r:00007DE8 ; Segment permissions: Read
.rdata$r:00007DE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007DE8                 assume cs:_rdata$r
.rdata$r:00007DE8                 ;org 7DE8h
.rdata$r:00007DE8 ; COMDAT (pick any)
.rdata$r:00007DE8                 public ??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8
.rdata$r:00007DE8 ; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (24, -1, 0, 64)'
.rdata$r:00007DE8 ??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8 dd offset ??_R0?AVCCoder@NCoderMixer2@@@8
.rdata$r:00007DE8                                         ; DATA XREF: .rdata$r:00007DC0o
.rdata$r:00007DE8                                         ; NCoderMixer2::CCoder `RTTI Type Descriptor'
.rdata$r:00007DEC                 align 10h
.rdata$r:00007DF0                 db  18h
.rdata$r:00007DF1                 db    0
.rdata$r:00007DF2                 db    0
.rdata$r:00007DF3                 db    0
.rdata$r:00007DF4                 db 0FFh
.rdata$r:00007DF5                 db 0FFh
.rdata$r:00007DF6                 db 0FFh
.rdata$r:00007DF7                 db 0FFh
.rdata$r:00007DF8                 db    0
.rdata$r:00007DF9                 db    0
.rdata$r:00007DFA                 db    0
.rdata$r:00007DFB                 db    0
.rdata$r:00007DFC                 db  40h ; @
.rdata$r:00007DFD                 db    0
.rdata$r:00007DFE                 db    0
.rdata$r:00007DFF                 db    0
.rdata$r:00007E00                 dd offset ??_R3CCoder@NCoderMixer2@@8 ; NCoderMixer2::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007E00 _rdata$r        ends
.rdata$r:00007E00
.data:00007E04 ; ===========================================================================
.data:00007E04
.data:00007E04 ; Segment type: Pure data
.data:00007E04 ; Segment permissions: Read/Write
.data:00007E04 _data           segment dword public 'DATA' use32
.data:00007E04                 assume cs:_data
.data:00007E04                 ;org 7E04h
.data:00007E04 ; COMDAT (pick any)
.data:00007E04                 public ??_R0?AVCCoder@NCoderMixer2@@@8
.data:00007E04 ; class NCoderMixer2::CCoder `RTTI Type Descriptor'
.data:00007E04 ??_R0?AVCCoder@NCoderMixer2@@@8 dd offset ??_7type_info@@6B@
.data:00007E04                                         ; DATA XREF: .rdata$r:NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (24,-1,0,64)'o
.data:00007E04                                         ; .rdata$r:NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00007E04                                         ; const type_info::`vftable'
.data:00007E08                 db    0
.data:00007E09                 db    0
.data:00007E0A                 db    0
.data:00007E0B                 db    0
.data:00007E0C                 db  2Eh ; .
.data:00007E0D                 db  3Fh ; ?
.data:00007E0E                 db  41h ; A
.data:00007E0F                 db  56h ; V
.data:00007E10                 db  43h ; C
.data:00007E11                 db  43h ; C
.data:00007E12                 db  6Fh ; o
.data:00007E13                 db  64h ; d
.data:00007E14                 db  65h ; e
.data:00007E15                 db  72h ; r
.data:00007E16                 db  40h ; @
.data:00007E17                 db  4Eh ; N
.data:00007E18                 db  43h ; C
.data:00007E19                 db  6Fh ; o
.data:00007E1A                 db  64h ; d
.data:00007E1B                 db  65h ; e
.data:00007E1C                 db  72h ; r
.data:00007E1D                 db  4Dh ; M
.data:00007E1E                 db  69h ; i
.data:00007E1F                 db  78h ; x
.data:00007E20                 db  65h ; e
.data:00007E21                 db  72h ; r
.data:00007E22                 db  32h ; 2
.data:00007E23                 db  40h ; @
.data:00007E24                 db  40h ; @
.data:00007E25                 db    0
.data:00007E26                 align 4
.data:00007E26 _data           ends
.data:00007E26
.rdata$r:00007E28 ; ===========================================================================
.rdata$r:00007E28
.rdata$r:00007E28 ; Segment type: Pure data
.rdata$r:00007E28 ; Segment permissions: Read
.rdata$r:00007E28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007E28                 assume cs:_rdata$r
.rdata$r:00007E28                 ;org 7E28h
.rdata$r:00007E28 ; COMDAT (pick any)
.rdata$r:00007E28                 public ??_R3CCoder@NCoderMixer2@@8
.rdata$r:00007E28 ; NCoderMixer2::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007E28 ??_R3CCoder@NCoderMixer2@@8 db    0     ; DATA XREF: .rdata$r:00007E00o
.rdata$r:00007E28                                         ; .rdata$r:00007E58o
.rdata$r:00007E29                 db    0
.rdata$r:00007E2A                 db    0
.rdata$r:00007E2B                 db    0
.rdata$r:00007E2C                 db    0
.rdata$r:00007E2D                 db    0
.rdata$r:00007E2E                 db    0
.rdata$r:00007E2F                 db    0
.rdata$r:00007E30                 db    1
.rdata$r:00007E31                 db    0
.rdata$r:00007E32                 db    0
.rdata$r:00007E33                 db    0
.rdata$r:00007E34                 dd offset ??_R2CCoder@NCoderMixer2@@8 ; NCoderMixer2::CCoder::`RTTI Base Class Array'
.rdata$r:00007E34 _rdata$r        ends
.rdata$r:00007E34
.rdata$r:00007E38 ; ===========================================================================
.rdata$r:00007E38
.rdata$r:00007E38 ; Segment type: Pure data
.rdata$r:00007E38 ; Segment permissions: Read
.rdata$r:00007E38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007E38                 assume cs:_rdata$r
.rdata$r:00007E38                 ;org 7E38h
.rdata$r:00007E38 ; COMDAT (pick any)
.rdata$r:00007E38                 public ??_R2CCoder@NCoderMixer2@@8
.rdata$r:00007E38 ; NCoderMixer2::CCoder::`RTTI Base Class Array'
.rdata$r:00007E38 ??_R2CCoder@NCoderMixer2@@8 dd offset ??_R1A@?0A@EA@CCoder@NCoderMixer2@@8
.rdata$r:00007E38                                         ; DATA XREF: .rdata$r:00007E34o
.rdata$r:00007E38                                         ; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007E3C                 db    0
.rdata$r:00007E3D                 align 10h
.rdata$r:00007E3D _rdata$r        ends
.rdata$r:00007E3D
.rdata$r:00007E40 ; ===========================================================================
.rdata$r:00007E40
.rdata$r:00007E40 ; Segment type: Pure data
.rdata$r:00007E40 ; Segment permissions: Read
.rdata$r:00007E40 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007E40                 assume cs:_rdata$r
.rdata$r:00007E40                 ;org 7E40h
.rdata$r:00007E40 ; COMDAT (pick any)
.rdata$r:00007E40                 public ??_R1A@?0A@EA@CCoder@NCoderMixer2@@8
.rdata$r:00007E40 ; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007E40 ??_R1A@?0A@EA@CCoder@NCoderMixer2@@8 dd offset ??_R0?AVCCoder@NCoderMixer2@@@8
.rdata$r:00007E40                                         ; DATA XREF: .rdata$r:NCoderMixer2::CCoder::`RTTI Base Class Array'o
.rdata$r:00007E40                                         ; NCoderMixer2::CCoder `RTTI Type Descriptor'
.rdata$r:00007E44                 db    0
.rdata$r:00007E45                 db    0
.rdata$r:00007E46                 db    0
.rdata$r:00007E47                 db    0
.rdata$r:00007E48                 db    0
.rdata$r:00007E49                 db    0
.rdata$r:00007E4A                 db    0
.rdata$r:00007E4B                 db    0
.rdata$r:00007E4C                 db 0FFh
.rdata$r:00007E4D                 db 0FFh
.rdata$r:00007E4E                 db 0FFh
.rdata$r:00007E4F                 db 0FFh
.rdata$r:00007E50                 db    0
.rdata$r:00007E51                 db    0
.rdata$r:00007E52                 db    0
.rdata$r:00007E53                 db    0
.rdata$r:00007E54                 db  40h ; @
.rdata$r:00007E55                 db    0
.rdata$r:00007E56                 db    0
.rdata$r:00007E57                 db    0
.rdata$r:00007E58                 dd offset ??_R3CCoder@NCoderMixer2@@8 ; NCoderMixer2::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007E58 _rdata$r        ends
.rdata$r:00007E58
.rdata$r:00007E5C ; ===========================================================================
.rdata$r:00007E5C
.rdata$r:00007E5C ; Segment type: Pure data
.rdata$r:00007E5C ; Segment permissions: Read
.rdata$r:00007E5C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007E5C                 assume cs:_rdata$r
.rdata$r:00007E5C                 ;org 7E5Ch
.rdata$r:00007E5C ; COMDAT (pick any)
.rdata$r:00007E5C                 public ??_R1A@?0A@EA@CVirtThread@@8
.rdata$r:00007E5C ; CVirtThread::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007E5C ??_R1A@?0A@EA@CVirtThread@@8 dd offset ??_R0?AUCVirtThread@@@8
.rdata$r:00007E5C                                         ; DATA XREF: .rdata$r:00007DC4o
.rdata$r:00007E5C                                         ; .rdata$r:CVirtThread::`RTTI Base Class Array'o
.rdata$r:00007E5C                                         ; CVirtThread `RTTI Type Descriptor'
.rdata$r:00007E60                 db    0
.rdata$r:00007E61                 db    0
.rdata$r:00007E62                 db    0
.rdata$r:00007E63                 db    0
.rdata$r:00007E64                 db    0
.rdata$r:00007E65                 db    0
.rdata$r:00007E66                 db    0
.rdata$r:00007E67                 db    0
.rdata$r:00007E68                 db 0FFh
.rdata$r:00007E69                 db 0FFh
.rdata$r:00007E6A                 db 0FFh
.rdata$r:00007E6B                 db 0FFh
.rdata$r:00007E6C                 db    0
.rdata$r:00007E6D                 db    0
.rdata$r:00007E6E                 db    0
.rdata$r:00007E6F                 db    0
.rdata$r:00007E70                 db  40h ; @
.rdata$r:00007E71                 db    0
.rdata$r:00007E72                 db    0
.rdata$r:00007E73                 db    0
.rdata$r:00007E74                 dd offset ??_R3CVirtThread@@8 ; CVirtThread::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007E74 _rdata$r        ends
.rdata$r:00007E74
.data:00007E78 ; ===========================================================================
.data:00007E78
.data:00007E78 ; Segment type: Pure data
.data:00007E78 ; Segment permissions: Read/Write
.data:00007E78 _data           segment dword public 'DATA' use32
.data:00007E78                 assume cs:_data
.data:00007E78                 ;org 7E78h
.data:00007E78 ; COMDAT (pick any)
.data:00007E78                 public ??_R0?AUCVirtThread@@@8
.data:00007E78 ; struct CVirtThread `RTTI Type Descriptor'
.data:00007E78 ??_R0?AUCVirtThread@@@8 dd offset ??_7type_info@@6B@
.data:00007E78                                         ; DATA XREF: .rdata$r:CVirtThread::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00007E78                                         ; .rdata$r:00007FC8o
.data:00007E78                                         ; const type_info::`vftable'
.data:00007E7C                 align 10h
.data:00007E80 a_?aucvirtthrea db '.?AUCVirtThread@@',0
.data:00007E92                 align 4
.data:00007E92 _data           ends
.data:00007E92
.rdata$r:00007E94 ; ===========================================================================
.rdata$r:00007E94
.rdata$r:00007E94 ; Segment type: Pure data
.rdata$r:00007E94 ; Segment permissions: Read
.rdata$r:00007E94 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007E94                 assume cs:_rdata$r
.rdata$r:00007E94                 ;org 7E94h
.rdata$r:00007E94 ; COMDAT (pick any)
.rdata$r:00007E94                 public ??_R3CVirtThread@@8
.rdata$r:00007E94 ; CVirtThread::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007E94 ??_R3CVirtThread@@8 db    0             ; DATA XREF: .rdata$r:00007E74o
.rdata$r:00007E94                                         ; .rdata$r:00007FCCo
.rdata$r:00007E95                 db    0
.rdata$r:00007E96                 db    0
.rdata$r:00007E97                 db    0
.rdata$r:00007E98                 db    0
.rdata$r:00007E99                 db    0
.rdata$r:00007E9A                 db    0
.rdata$r:00007E9B                 db    0
.rdata$r:00007E9C                 db    1
.rdata$r:00007E9D                 db    0
.rdata$r:00007E9E                 db    0
.rdata$r:00007E9F                 db    0
.rdata$r:00007EA0                 dd offset ??_R2CVirtThread@@8 ; CVirtThread::`RTTI Base Class Array'
.rdata$r:00007EA0 _rdata$r        ends
.rdata$r:00007EA0
.rdata$r:00007EA4 ; ===========================================================================
.rdata$r:00007EA4
.rdata$r:00007EA4 ; Segment type: Pure data
.rdata$r:00007EA4 ; Segment permissions: Read
.rdata$r:00007EA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007EA4                 assume cs:_rdata$r
.rdata$r:00007EA4                 ;org 7EA4h
.rdata$r:00007EA4 ; COMDAT (pick any)
.rdata$r:00007EA4                 public ??_R2CVirtThread@@8
.rdata$r:00007EA4 ; CVirtThread::`RTTI Base Class Array'
.rdata$r:00007EA4 ??_R2CVirtThread@@8 dd offset ??_R1A@?0A@EA@CVirtThread@@8
.rdata$r:00007EA4                                         ; DATA XREF: .rdata$r:00007EA0o
.rdata$r:00007EA4                                         ; CVirtThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007EA8                 db    0
.rdata$r:00007EA9                 align 4
.rdata$r:00007EA9 _rdata$r        ends
.rdata$r:00007EA9
.text:00007EAC ; ===========================================================================
.text:00007EAC
.text:00007EAC ; Segment type: Pure code
.text:00007EAC ; Segment permissions: Read/Execute
.text:00007EAC _text           segment para public 'CODE' use32
.text:00007EAC                 assume cs:_text
.text:00007EAC                 ;org 7EACh
.text:00007EAC ; COMDAT (pick any)
.text:00007EAC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007EAC
.text:00007EAC ; =============== S U B R O U T I N E =======================================
.text:00007EAC
.text:00007EAC ; Attributes: bp-based frame
.text:00007EAC
.text:00007EAC ; _DWORD __thiscall CVirtThread::~CVirtThread(CVirtThread *__hidden this)
.text:00007EAC                 public ??1CVirtThread@@QAE@XZ
.text:00007EAC ??1CVirtThread@@QAE@XZ proc near        ; CODE XREF: NCoderMixer2::CCoderMT::~CCoderMT(void)+88p
.text:00007EAC                                         ; __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$1+3j
.text:00007EAC
.text:00007EAC var_10          = dword ptr -10h
.text:00007EAC var_C           = dword ptr -0Ch
.text:00007EAC var_4           = dword ptr -4
.text:00007EAC
.text:00007EAC                 push    ebp
.text:00007EAD                 mov     ebp, esp
.text:00007EAF                 push    0FFFFFFFFh
.text:00007EB1                 push    offset __ehhandler$??1CVirtThread@@QAE@XZ
.text:00007EB6                 mov     eax, large fs:0
.text:00007EBC                 push    eax
.text:00007EBD                 push    ecx
.text:00007EBE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00007EC5                 mov     eax, dword ptr ds:___security_cookie
.text:00007ECA                 xor     eax, ebp
.text:00007ECC                 push    eax
.text:00007ECD                 lea     eax, [ebp+var_C]
.text:00007ED0                 mov     large fs:0, eax
.text:00007ED6                 mov     [ebp+var_10], ecx
.text:00007ED9                 mov     eax, [ebp+var_10]
.text:00007EDC                 mov     dword ptr [eax], offset ??_7CVirtThread@@6B@ ; const CVirtThread::`vftable'
.text:00007EE2                 mov     [ebp+var_4], 2
.text:00007EE9                 mov     ecx, [ebp+var_10] ; this
.text:00007EEC                 call    ?WaitThreadFinish@CVirtThread@@QAEXXZ ; CVirtThread::WaitThreadFinish(void)
.text:00007EF1                 mov     byte ptr [ebp+var_4], 1
.text:00007EF5                 mov     ecx, [ebp+var_10]
.text:00007EF8                 add     ecx, 0Ch        ; this
.text:00007EFB                 call    ??1CThread@NWindows@@QAE@XZ ; NWindows::CThread::~CThread(void)
.text:00007F00                 mov     byte ptr [ebp+var_4], 0
.text:00007F04                 mov     ecx, [ebp+var_10]
.text:00007F07                 add     ecx, 8          ; this
.text:00007F0A                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:00007F0F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007F16                 mov     ecx, [ebp+var_10]
.text:00007F19                 add     ecx, 4          ; this
.text:00007F1C                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:00007F21                 mov     ecx, [ebp+var_C]
.text:00007F24                 mov     large fs:0, ecx
.text:00007F2B                 pop     ecx
.text:00007F2C                 add     esp, 10h
.text:00007F2F                 cmp     ebp, esp
.text:00007F31                 call    __RTC_CheckEsp
.text:00007F36                 mov     esp, ebp
.text:00007F38                 pop     ebp
.text:00007F39                 retn
.text:00007F39 ??1CVirtThread@@QAE@XZ endp
.text:00007F39
.text:00007F39 ; ---------------------------------------------------------------------------
.text:00007F3A                 align 4
.text:00007F3A _text           ends
.text:00007F3A
.text$x:00007F3C ; ===========================================================================
.text$x:00007F3C
.text$x:00007F3C ; Segment type: Pure code
.text$x:00007F3C ; Segment permissions: Read/Execute
.text$x:00007F3C _text$x         segment para public 'CODE' use32
.text$x:00007F3C                 assume cs:_text$x
.text$x:00007F3C                 ;org 7F3Ch
.text$x:00007F3C ; COMDAT (pick associative to section at 7EAC)
.text$x:00007F3C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00007F3C
.text$x:00007F3C ; =============== S U B R O U T I N E =======================================
.text$x:00007F3C
.text$x:00007F3C
.text$x:00007F3C __unwindfunclet$??1CVirtThread@@QAE@XZ$0 proc near
.text$x:00007F3C                                         ; DATA XREF: .xdata$x:00007F84o
.text$x:00007F3C                 mov     ecx, [ebp-10h]
.text$x:00007F3F                 add     ecx, 4          ; this
.text$x:00007F42                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00007F42 __unwindfunclet$??1CVirtThread@@QAE@XZ$0 endp
.text$x:00007F42
.text$x:00007F47
.text$x:00007F47 ; =============== S U B R O U T I N E =======================================
.text$x:00007F47
.text$x:00007F47
.text$x:00007F47 __unwindfunclet$??1CVirtThread@@QAE@XZ$1 proc near
.text$x:00007F47                                         ; DATA XREF: .xdata$x:00007F8Co
.text$x:00007F47                 mov     ecx, [ebp-10h]
.text$x:00007F4A                 add     ecx, 8          ; this
.text$x:00007F4D                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00007F4D __unwindfunclet$??1CVirtThread@@QAE@XZ$1 endp
.text$x:00007F4D
.text$x:00007F52
.text$x:00007F52 ; =============== S U B R O U T I N E =======================================
.text$x:00007F52
.text$x:00007F52
.text$x:00007F52 __unwindfunclet$??1CVirtThread@@QAE@XZ$2 proc near
.text$x:00007F52                                         ; DATA XREF: .xdata$x:00007F94o
.text$x:00007F52                 mov     ecx, [ebp-10h]
.text$x:00007F55                 add     ecx, 0Ch        ; this
.text$x:00007F58                 jmp     ??1CThread@NWindows@@QAE@XZ ; NWindows::CThread::~CThread(void)
.text$x:00007F58 __unwindfunclet$??1CVirtThread@@QAE@XZ$2 endp
.text$x:00007F58
.text$x:00007F5D
.text$x:00007F5D ; =============== S U B R O U T I N E =======================================
.text$x:00007F5D
.text$x:00007F5D
.text$x:00007F5D __ehhandler$??1CVirtThread@@QAE@XZ proc near
.text$x:00007F5D                                         ; DATA XREF: CVirtThread::~CVirtThread(void)+5o
.text$x:00007F5D
.text$x:00007F5D arg_4           = dword ptr  8
.text$x:00007F5D
.text$x:00007F5D                 mov     edx, [esp+arg_4]
.text$x:00007F61                 lea     eax, [edx+0Ch]
.text$x:00007F64                 mov     ecx, [edx-8]
.text$x:00007F67                 xor     ecx, eax
.text$x:00007F69                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007F6E                 mov     eax, offset __ehfuncinfo$??1CVirtThread@@QAE@XZ
.text$x:00007F73                 jmp     ___CxxFrameHandler3
.text$x:00007F73 __ehhandler$??1CVirtThread@@QAE@XZ endp
.text$x:00007F73
.text$x:00007F73 _text$x         ends
.text$x:00007F73
.rdata:00007F78 ; ===========================================================================
.rdata:00007F78
.rdata:00007F78 ; Segment type: Pure data
.rdata:00007F78 ; Segment permissions: Read
.rdata:00007F78 _rdata          segment dword public 'DATA' use32
.rdata:00007F78                 assume cs:_rdata
.rdata:00007F78                 ;org 7F78h
.rdata:00007F78 ; COMDAT (pick largest)
.rdata:00007F78                 dd offset ??_R4CVirtThread@@6B@ ; const CVirtThread::`RTTI Complete Object Locator'
.rdata:00007F7C                 public ??_7CVirtThread@@6B@
.rdata:00007F7C ; const CVirtThread::`vftable'
.rdata:00007F7C ??_7CVirtThread@@6B@ dd offset __purecall
.rdata:00007F7C                                         ; DATA XREF: CVirtThread::~CVirtThread(void)+30o
.rdata:00007F7C _rdata          ends
.rdata:00007F7C
.xdata$x:00007F80 ; ===========================================================================
.xdata$x:00007F80
.xdata$x:00007F80 ; Segment type: Pure data
.xdata$x:00007F80 ; Segment permissions: Read
.xdata$x:00007F80 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007F80                 assume cs:_xdata$x
.xdata$x:00007F80                 ;org 7F80h
.xdata$x:00007F80 ; COMDAT (pick associative to section at 7EAC)
.xdata$x:00007F80 __unwindtable$??1CVirtThread@@QAE@XZ db 0FFh
.xdata$x:00007F80                                         ; DATA XREF: .xdata$x:00007FA0o
.xdata$x:00007F81                 db 0FFh
.xdata$x:00007F82                 db 0FFh
.xdata$x:00007F83                 db 0FFh
.xdata$x:00007F84                 dd offset __unwindfunclet$??1CVirtThread@@QAE@XZ$0
.xdata$x:00007F88                 db    0
.xdata$x:00007F89                 db    0
.xdata$x:00007F8A                 db    0
.xdata$x:00007F8B                 db    0
.xdata$x:00007F8C                 dd offset __unwindfunclet$??1CVirtThread@@QAE@XZ$1
.xdata$x:00007F90                 db    1
.xdata$x:00007F91                 db    0
.xdata$x:00007F92                 db    0
.xdata$x:00007F93                 db    0
.xdata$x:00007F94                 dd offset __unwindfunclet$??1CVirtThread@@QAE@XZ$2
.xdata$x:00007F98 __ehfuncinfo$??1CVirtThread@@QAE@XZ db  22h ; "
.xdata$x:00007F98                                         ; DATA XREF: __ehhandler$??1CVirtThread@@QAE@XZ+11o
.xdata$x:00007F99                 db    5
.xdata$x:00007F9A                 db  93h ; ô
.xdata$x:00007F9B                 db  19h
.xdata$x:00007F9C                 db    3
.xdata$x:00007F9D                 db    0
.xdata$x:00007F9E                 db    0
.xdata$x:00007F9F                 db    0
.xdata$x:00007FA0                 dd offset __unwindtable$??1CVirtThread@@QAE@XZ
.xdata$x:00007FA4                 db    0
.xdata$x:00007FA5                 db    0
.xdata$x:00007FA6                 db    0
.xdata$x:00007FA7                 db    0
.xdata$x:00007FA8                 db    0
.xdata$x:00007FA9                 db    0
.xdata$x:00007FAA                 db    0
.xdata$x:00007FAB                 db    0
.xdata$x:00007FAC                 db    0
.xdata$x:00007FAD                 db    0
.xdata$x:00007FAE                 db    0
.xdata$x:00007FAF                 db    0
.xdata$x:00007FB0                 db    0
.xdata$x:00007FB1                 db    0
.xdata$x:00007FB2                 db    0
.xdata$x:00007FB3                 db    0
.xdata$x:00007FB4                 db    0
.xdata$x:00007FB5                 db    0
.xdata$x:00007FB6                 db    0
.xdata$x:00007FB7                 db    0
.xdata$x:00007FB8                 db    1
.xdata$x:00007FB9                 db    0
.xdata$x:00007FBA                 db    0
.xdata$x:00007FBB                 db    0
.xdata$x:00007FBB _xdata$x        ends
.xdata$x:00007FBB
.rdata$r:00007FBC ; ===========================================================================
.rdata$r:00007FBC
.rdata$r:00007FBC ; Segment type: Pure data
.rdata$r:00007FBC ; Segment permissions: Read
.rdata$r:00007FBC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007FBC                 assume cs:_rdata$r
.rdata$r:00007FBC                 ;org 7FBCh
.rdata$r:00007FBC ; COMDAT (pick any)
.rdata$r:00007FBC                 public ??_R4CVirtThread@@6B@
.rdata$r:00007FBC ; const CVirtThread::`RTTI Complete Object Locator'
.rdata$r:00007FBC ??_R4CVirtThread@@6B@ db    0           ; DATA XREF: .rdata:00007F78o
.rdata$r:00007FBD                 db    0
.rdata$r:00007FBE                 db    0
.rdata$r:00007FBF                 db    0
.rdata$r:00007FC0                 db    0
.rdata$r:00007FC1                 db    0
.rdata$r:00007FC2                 db    0
.rdata$r:00007FC3                 db    0
.rdata$r:00007FC4                 db    0
.rdata$r:00007FC5                 db    0
.rdata$r:00007FC6                 db    0
.rdata$r:00007FC7                 db    0
.rdata$r:00007FC8                 dd offset ??_R0?AUCVirtThread@@@8 ; CVirtThread `RTTI Type Descriptor'
.rdata$r:00007FCC                 dd offset ??_R3CVirtThread@@8 ; CVirtThread::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007FCC _rdata$r        ends
.rdata$r:00007FCC
.text:00007FD0 ; ===========================================================================
.text:00007FD0
.text:00007FD0 ; Segment type: Pure code
.text:00007FD0 ; Segment permissions: Read/Execute
.text:00007FD0 _text           segment para public 'CODE' use32
.text:00007FD0                 assume cs:_text
.text:00007FD0                 ;org 7FD0h
.text:00007FD0 ; COMDAT (pick any)
.text:00007FD0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007FD0
.text:00007FD0 ; =============== S U B R O U T I N E =======================================
.text:00007FD0
.text:00007FD0 ; Attributes: bp-based frame
.text:00007FD0
.text:00007FD0 ; _DWORD __thiscall NWindows::CThread::~CThread(NWindows::CThread *__hidden this)
.text:00007FD0                 public ??1CThread@NWindows@@QAE@XZ
.text:00007FD0 ??1CThread@NWindows@@QAE@XZ proc near   ; CODE XREF: CVirtThread::~CVirtThread(void)+4Fp
.text:00007FD0                                         ; __unwindfunclet$??1CVirtThread@@QAE@XZ$2+6j
.text:00007FD0
.text:00007FD0 var_4           = dword ptr -4
.text:00007FD0
.text:00007FD0                 push    ebp
.text:00007FD1                 mov     ebp, esp
.text:00007FD3                 push    ecx
.text:00007FD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007FDB                 mov     [ebp+var_4], ecx
.text:00007FDE                 mov     ecx, [ebp+var_4] ; this
.text:00007FE1                 call    ?Close@CThread@NWindows@@QAEIXZ ; NWindows::CThread::Close(void)
.text:00007FE6                 add     esp, 4
.text:00007FE9                 cmp     ebp, esp
.text:00007FEB                 call    __RTC_CheckEsp
.text:00007FF0                 mov     esp, ebp
.text:00007FF2                 pop     ebp
.text:00007FF3                 retn
.text:00007FF3 ??1CThread@NWindows@@QAE@XZ endp
.text:00007FF3
.text:00007FF3 _text           ends
.text:00007FF3
.text:00007FF4 ; ===========================================================================
.text:00007FF4
.text:00007FF4 ; Segment type: Pure code
.text:00007FF4 ; Segment permissions: Read/Execute
.text:00007FF4 _text           segment para public 'CODE' use32
.text:00007FF4                 assume cs:_text
.text:00007FF4                 ;org 7FF4h
.text:00007FF4 ; COMDAT (pick any)
.text:00007FF4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00007FF4
.text:00007FF4 ; =============== S U B R O U T I N E =======================================
.text:00007FF4
.text:00007FF4 ; Attributes: bp-based frame
.text:00007FF4
.text:00007FF4 ; unsigned int __thiscall NWindows::CThread::Close(NWindows::CThread *__hidden this)
.text:00007FF4                 public ?Close@CThread@NWindows@@QAEIXZ
.text:00007FF4 ?Close@CThread@NWindows@@QAEIXZ proc near
.text:00007FF4                                         ; CODE XREF: NWindows::CThread::~CThread(void)+11p
.text:00007FF4
.text:00007FF4 var_4           = dword ptr -4
.text:00007FF4
.text:00007FF4                 push    ebp
.text:00007FF5                 mov     ebp, esp
.text:00007FF7                 push    ecx
.text:00007FF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007FFF                 mov     [ebp+var_4], ecx
.text:00008002                 mov     eax, [ebp+var_4]
.text:00008005                 push    eax
.text:00008006                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:0000800B                 add     esp, 4
.text:0000800E                 cmp     ebp, esp
.text:00008010                 call    __RTC_CheckEsp
.text:00008015                 mov     esp, ebp
.text:00008017                 pop     ebp
.text:00008018                 retn
.text:00008018 ?Close@CThread@NWindows@@QAEIXZ endp
.text:00008018
.text:00008018 ; ---------------------------------------------------------------------------
.text:00008019                 align 4
.text:00008019 _text           ends
.text:00008019
.text:0000801C ; ===========================================================================
.text:0000801C
.text:0000801C ; Segment type: Pure code
.text:0000801C ; Segment permissions: Read/Execute
.text:0000801C _text           segment para public 'CODE' use32
.text:0000801C                 assume cs:_text
.text:0000801C                 ;org 801Ch
.text:0000801C ; COMDAT (pick any)
.text:0000801C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000801C
.text:0000801C ; =============== S U B R O U T I N E =======================================
.text:0000801C
.text:0000801C ; Attributes: bp-based frame
.text:0000801C
.text:0000801C ; _DWORD __thiscall NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(NWindows::NSynchronization::CAutoResetEvent *__hidden this)
.text:0000801C                 public ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:0000801C ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:0000801C                                         ; CODE XREF: CVirtThread::~CVirtThread(void)+5Ep
.text:0000801C                                         ; CVirtThread::~CVirtThread(void)+70p ...
.text:0000801C
.text:0000801C var_4           = dword ptr -4
.text:0000801C
.text:0000801C                 push    ebp
.text:0000801D                 mov     ebp, esp
.text:0000801F                 push    ecx
.text:00008020                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008027                 mov     [ebp+var_4], ecx
.text:0000802A                 mov     ecx, [ebp+var_4] ; this
.text:0000802D                 call    ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent(void)
.text:00008032                 add     esp, 4
.text:00008035                 cmp     ebp, esp
.text:00008037                 call    __RTC_CheckEsp
.text:0000803C                 mov     esp, ebp
.text:0000803E                 pop     ebp
.text:0000803F                 retn
.text:0000803F ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:0000803F
.text:0000803F _text           ends
.text:0000803F
.text:00008040 ; ===========================================================================
.text:00008040
.text:00008040 ; Segment type: Pure code
.text:00008040 ; Segment permissions: Read/Execute
.text:00008040 _text           segment para public 'CODE' use32
.text:00008040                 assume cs:_text
.text:00008040                 ;org 8040h
.text:00008040 ; COMDAT (pick any)
.text:00008040                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008040
.text:00008040 ; =============== S U B R O U T I N E =======================================
.text:00008040
.text:00008040 ; Attributes: bp-based frame
.text:00008040
.text:00008040 ; _DWORD __thiscall NWindows::NSynchronization::CBaseEvent::~CBaseEvent(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00008040                 public ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ
.text:00008040 ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:00008040                                         ; CODE XREF: NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)+11p
.text:00008040                                         ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)+11p
.text:00008040
.text:00008040 var_4           = dword ptr -4
.text:00008040
.text:00008040                 push    ebp
.text:00008041                 mov     ebp, esp
.text:00008043                 push    ecx
.text:00008044                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000804B                 mov     [ebp+var_4], ecx
.text:0000804E                 mov     ecx, [ebp+var_4] ; this
.text:00008051                 call    ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Close(void)
.text:00008056                 add     esp, 4
.text:00008059                 cmp     ebp, esp
.text:0000805B                 call    __RTC_CheckEsp
.text:00008060                 mov     esp, ebp
.text:00008062                 pop     ebp
.text:00008063                 retn
.text:00008063 ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:00008063
.text:00008063 _text           ends
.text:00008063
.text:00008064 ; ===========================================================================
.text:00008064
.text:00008064 ; Segment type: Pure code
.text:00008064 ; Segment permissions: Read/Execute
.text:00008064 _text           segment para public 'CODE' use32
.text:00008064                 assume cs:_text
.text:00008064                 ;org 8064h
.text:00008064 ; COMDAT (pick any)
.text:00008064                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008064
.text:00008064 ; =============== S U B R O U T I N E =======================================
.text:00008064
.text:00008064 ; Attributes: bp-based frame
.text:00008064
.text:00008064 ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Close(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00008064                 public ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:00008064 ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:00008064                                         ; CODE XREF: NWindows::NSynchronization::CBaseEvent::~CBaseEvent(void)+11p
.text:00008064
.text:00008064 var_4           = dword ptr -4
.text:00008064
.text:00008064                 push    ebp
.text:00008065                 mov     ebp, esp
.text:00008067                 push    ecx
.text:00008068                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000806F                 mov     [ebp+var_4], ecx
.text:00008072                 mov     eax, [ebp+var_4]
.text:00008075                 push    eax
.text:00008076                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:0000807B                 add     esp, 4
.text:0000807E                 cmp     ebp, esp
.text:00008080                 call    __RTC_CheckEsp
.text:00008085                 mov     esp, ebp
.text:00008087                 pop     ebp
.text:00008088                 retn
.text:00008088 ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:00008088
.text:00008088 ; ---------------------------------------------------------------------------
.text:00008089                 align 4
.text:00008089 _text           ends
.text:00008089
.text:0000808C ; ===========================================================================
.text:0000808C
.text:0000808C ; Segment type: Pure code
.text:0000808C ; Segment permissions: Read/Execute
.text:0000808C _text           segment para public 'CODE' use32
.text:0000808C                 assume cs:_text
.text:0000808C                 ;org 808Ch
.text:0000808C ; COMDAT (pick any)
.text:0000808C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000808C
.text:0000808C ; =============== S U B R O U T I N E =======================================
.text:0000808C
.text:0000808C ; Attributes: bp-based frame
.text:0000808C
.text:0000808C ; _DWORD __thiscall NCoderMixer2::CCoder::~CCoder(NCoderMixer2::CCoder *__hidden this)
.text:0000808C                 public ??1CCoder@NCoderMixer2@@QAE@XZ
.text:0000808C ??1CCoder@NCoderMixer2@@QAE@XZ proc near
.text:0000808C                                         ; CODE XREF: NCoderMixer2::CCoderMT::~CCoderMT(void)+9Ap
.text:0000808C                                         ; __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$0+6j
.text:0000808C
.text:0000808C var_10          = dword ptr -10h
.text:0000808C var_C           = dword ptr -0Ch
.text:0000808C var_4           = dword ptr -4
.text:0000808C
.text:0000808C                 push    ebp
.text:0000808D                 mov     ebp, esp
.text:0000808F                 push    0FFFFFFFFh
.text:00008091                 push    offset __ehhandler$??1CCoder@NCoderMixer2@@QAE@XZ
.text:00008096                 mov     eax, large fs:0
.text:0000809C                 push    eax
.text:0000809D                 push    ecx
.text:0000809E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000080A5                 mov     eax, dword ptr ds:___security_cookie
.text:000080AA                 xor     eax, ebp
.text:000080AC                 push    eax
.text:000080AD                 lea     eax, [ebp+var_C]
.text:000080B0                 mov     large fs:0, eax
.text:000080B6                 mov     [ebp+var_10], ecx
.text:000080B9                 mov     [ebp+var_4], 2
.text:000080C0                 mov     ecx, [ebp+var_10]
.text:000080C3                 add     ecx, 28h ; '('
.text:000080C6                 call    ??1?$CRecordVector@PB_K@@QAE@XZ ; CRecordVector<unsigned __int64 const *>::~CRecordVector<unsigned __int64 const *>(void)
.text:000080CB                 mov     byte ptr [ebp+var_4], 1
.text:000080CF                 mov     ecx, [ebp+var_10]
.text:000080D2                 add     ecx, 1Ch
.text:000080D5                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:000080DA                 mov     byte ptr [ebp+var_4], 0
.text:000080DE                 mov     ecx, [ebp+var_10]
.text:000080E1                 add     ecx, 4
.text:000080E4                 call    ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>(void)
.text:000080E9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000080F0                 mov     ecx, [ebp+var_10]
.text:000080F3                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000080F8                 mov     ecx, [ebp+var_C]
.text:000080FB                 mov     large fs:0, ecx
.text:00008102                 pop     ecx
.text:00008103                 add     esp, 10h
.text:00008106                 cmp     ebp, esp
.text:00008108                 call    __RTC_CheckEsp
.text:0000810D                 mov     esp, ebp
.text:0000810F                 pop     ebp
.text:00008110                 retn
.text:00008110 ??1CCoder@NCoderMixer2@@QAE@XZ endp
.text:00008110
.text:00008110 ; ---------------------------------------------------------------------------
.text:00008111                 align 4
.text:00008111 _text           ends
.text:00008111
.text$x:00008114 ; ===========================================================================
.text$x:00008114
.text$x:00008114 ; Segment type: Pure code
.text$x:00008114 ; Segment permissions: Read/Execute
.text$x:00008114 _text$x         segment para public 'CODE' use32
.text$x:00008114                 assume cs:_text$x
.text$x:00008114                 ;org 8114h
.text$x:00008114 ; COMDAT (pick associative to section at 808C)
.text$x:00008114                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00008114
.text$x:00008114 ; =============== S U B R O U T I N E =======================================
.text$x:00008114
.text$x:00008114
.text$x:00008114 __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:00008114                                         ; DATA XREF: .xdata$x:00008154o
.text$x:00008114                 mov     ecx, [ebp-10h]
.text$x:00008117                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00008117 __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$0 endp
.text$x:00008117
.text$x:0000811C
.text$x:0000811C ; =============== S U B R O U T I N E =======================================
.text$x:0000811C
.text$x:0000811C
.text$x:0000811C __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:0000811C                                         ; DATA XREF: .xdata$x:0000815Co
.text$x:0000811C                 mov     ecx, [ebp-10h]
.text$x:0000811F                 add     ecx, 4
.text$x:00008122                 jmp     ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>(void)
.text$x:00008122 __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$1 endp
.text$x:00008122
.text$x:00008127
.text$x:00008127 ; =============== S U B R O U T I N E =======================================
.text$x:00008127
.text$x:00008127
.text$x:00008127 __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$2 proc near
.text$x:00008127                                         ; DATA XREF: .xdata$x:00008164o
.text$x:00008127                 mov     ecx, [ebp-10h]
.text$x:0000812A                 add     ecx, 1Ch
.text$x:0000812D                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:0000812D __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$2 endp
.text$x:0000812D
.text$x:00008132
.text$x:00008132 ; =============== S U B R O U T I N E =======================================
.text$x:00008132
.text$x:00008132
.text$x:00008132 __ehhandler$??1CCoder@NCoderMixer2@@QAE@XZ proc near
.text$x:00008132                                         ; DATA XREF: NCoderMixer2::CCoder::~CCoder(void)+5o
.text$x:00008132
.text$x:00008132 arg_4           = dword ptr  8
.text$x:00008132
.text$x:00008132                 mov     edx, [esp+arg_4]
.text$x:00008136                 lea     eax, [edx+0Ch]
.text$x:00008139                 mov     ecx, [edx-8]
.text$x:0000813C                 xor     ecx, eax
.text$x:0000813E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008143                 mov     eax, offset __ehfuncinfo$??1CCoder@NCoderMixer2@@QAE@XZ
.text$x:00008148                 jmp     ___CxxFrameHandler3
.text$x:00008148 __ehhandler$??1CCoder@NCoderMixer2@@QAE@XZ endp
.text$x:00008148
.text$x:00008148 ; ---------------------------------------------------------------------------
.text$x:0000814D                 align 10h
.text$x:0000814D _text$x         ends
.text$x:0000814D
.xdata$x:00008150 ; ===========================================================================
.xdata$x:00008150
.xdata$x:00008150 ; Segment type: Pure data
.xdata$x:00008150 ; Segment permissions: Read
.xdata$x:00008150 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008150                 assume cs:_xdata$x
.xdata$x:00008150                 ;org 8150h
.xdata$x:00008150 ; COMDAT (pick associative to section at 808C)
.xdata$x:00008150 __unwindtable$??1CCoder@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:00008150                                         ; DATA XREF: .xdata$x:00008170o
.xdata$x:00008151                 db 0FFh
.xdata$x:00008152                 db 0FFh
.xdata$x:00008153                 db 0FFh
.xdata$x:00008154                 dd offset __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$0
.xdata$x:00008158                 db    0
.xdata$x:00008159                 db    0
.xdata$x:0000815A                 db    0
.xdata$x:0000815B                 db    0
.xdata$x:0000815C                 dd offset __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$1
.xdata$x:00008160                 db    1
.xdata$x:00008161                 db    0
.xdata$x:00008162                 db    0
.xdata$x:00008163                 db    0
.xdata$x:00008164                 dd offset __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$2
.xdata$x:00008168 __ehfuncinfo$??1CCoder@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:00008168                                         ; DATA XREF: __ehhandler$??1CCoder@NCoderMixer2@@QAE@XZ+11o
.xdata$x:00008169                 db    5
.xdata$x:0000816A                 db  93h ; ô
.xdata$x:0000816B                 db  19h
.xdata$x:0000816C                 db    3
.xdata$x:0000816D                 db    0
.xdata$x:0000816E                 db    0
.xdata$x:0000816F                 db    0
.xdata$x:00008170                 dd offset __unwindtable$??1CCoder@NCoderMixer2@@QAE@XZ
.xdata$x:00008174                 db    0
.xdata$x:00008175                 db    0
.xdata$x:00008176                 db    0
.xdata$x:00008177                 db    0
.xdata$x:00008178                 db    0
.xdata$x:00008179                 db    0
.xdata$x:0000817A                 db    0
.xdata$x:0000817B                 db    0
.xdata$x:0000817C                 db    0
.xdata$x:0000817D                 db    0
.xdata$x:0000817E                 db    0
.xdata$x:0000817F                 db    0
.xdata$x:00008180                 db    0
.xdata$x:00008181                 db    0
.xdata$x:00008182                 db    0
.xdata$x:00008183                 db    0
.xdata$x:00008184                 db    0
.xdata$x:00008185                 db    0
.xdata$x:00008186                 db    0
.xdata$x:00008187                 db    0
.xdata$x:00008188                 db    1
.xdata$x:00008189                 db    0
.xdata$x:0000818A                 db    0
.xdata$x:0000818B                 db    0
.xdata$x:0000818B _xdata$x        ends
.xdata$x:0000818B
.text:0000818C ; ===========================================================================
.text:0000818C
.text:0000818C ; Segment type: Pure code
.text:0000818C ; Segment permissions: Read/Execute
.text:0000818C _text           segment para public 'CODE' use32
.text:0000818C                 assume cs:_text
.text:0000818C                 ;org 818Ch
.text:0000818C ; COMDAT (pick any)
.text:0000818C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000818C
.text:0000818C ; =============== S U B R O U T I N E =======================================
.text:0000818C
.text:0000818C ; Attributes: bp-based frame
.text:0000818C
.text:0000818C ; public: __thiscall CRecordVector<unsigned __int64 const *>::~CRecordVector<unsigned __int64 const *>(void)
.text:0000818C                 public ??1?$CRecordVector@PB_K@@QAE@XZ
.text:0000818C ??1?$CRecordVector@PB_K@@QAE@XZ proc near
.text:0000818C                                         ; CODE XREF: NCoderMixer2::CCoder::~CCoder(void)+3Ap
.text:0000818C
.text:0000818C var_8           = dword ptr -8
.text:0000818C var_4           = dword ptr -4
.text:0000818C
.text:0000818C                 push    ebp
.text:0000818D                 mov     ebp, esp
.text:0000818F                 sub     esp, 8
.text:00008192                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008199                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000081A0                 mov     [ebp+var_4], ecx
.text:000081A3                 mov     eax, [ebp+var_4]
.text:000081A6                 mov     ecx, [eax]
.text:000081A8                 mov     [ebp+var_8], ecx
.text:000081AB                 mov     edx, [ebp+var_8]
.text:000081AE                 push    edx             ; void *
.text:000081AF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000081B4                 add     esp, 4
.text:000081B7                 add     esp, 8
.text:000081BA                 cmp     ebp, esp
.text:000081BC                 call    __RTC_CheckEsp
.text:000081C1                 mov     esp, ebp
.text:000081C3                 pop     ebp
.text:000081C4                 retn
.text:000081C4 ??1?$CRecordVector@PB_K@@QAE@XZ endp
.text:000081C4
.text:000081C4 ; ---------------------------------------------------------------------------
.text:000081C5                 align 4
.text:000081C5 _text           ends
.text:000081C5
.text:000081C8 ; ===========================================================================
.text:000081C8
.text:000081C8 ; Segment type: Pure code
.text:000081C8 ; Segment permissions: Read/Execute
.text:000081C8 _text           segment para public 'CODE' use32
.text:000081C8                 assume cs:_text
.text:000081C8                 ;org 81C8h
.text:000081C8 ; COMDAT (pick any)
.text:000081C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000081C8
.text:000081C8 ; =============== S U B R O U T I N E =======================================
.text:000081C8
.text:000081C8 ; Attributes: bp-based frame
.text:000081C8
.text:000081C8 ; public: __thiscall CRecordVector<struct ISequentialInStream *>::~CRecordVector<struct ISequentialInStream *>(void)
.text:000081C8                 public ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ
.text:000081C8 ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ proc near
.text:000081C8                                         ; CODE XREF: NCoderMixer2::CCoderMT::~CCoderMT(void)+7Cp
.text:000081C8                                         ; __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$2+6j
.text:000081C8
.text:000081C8 var_8           = dword ptr -8
.text:000081C8 var_4           = dword ptr -4
.text:000081C8
.text:000081C8                 push    ebp
.text:000081C9                 mov     ebp, esp
.text:000081CB                 sub     esp, 8
.text:000081CE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000081D5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000081DC                 mov     [ebp+var_4], ecx
.text:000081DF                 mov     eax, [ebp+var_4]
.text:000081E2                 mov     ecx, [eax]
.text:000081E4                 mov     [ebp+var_8], ecx
.text:000081E7                 mov     edx, [ebp+var_8]
.text:000081EA                 push    edx             ; void *
.text:000081EB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000081F0                 add     esp, 4
.text:000081F3                 add     esp, 8
.text:000081F6                 cmp     ebp, esp
.text:000081F8                 call    __RTC_CheckEsp
.text:000081FD                 mov     esp, ebp
.text:000081FF                 pop     ebp
.text:00008200                 retn
.text:00008200 ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ endp
.text:00008200
.text:00008200 ; ---------------------------------------------------------------------------
.text:00008201                 align 4
.text:00008201 _text           ends
.text:00008201
.text:00008204 ; ===========================================================================
.text:00008204
.text:00008204 ; Segment type: Pure code
.text:00008204 ; Segment permissions: Read/Execute
.text:00008204 _text           segment para public 'CODE' use32
.text:00008204                 assume cs:_text
.text:00008204                 ;org 8204h
.text:00008204 ; COMDAT (pick any)
.text:00008204                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008204
.text:00008204 ; =============== S U B R O U T I N E =======================================
.text:00008204
.text:00008204 ; Attributes: bp-based frame
.text:00008204
.text:00008204 ; public: __thiscall CObjectVector<class CMyComPtr<struct ISequentialInStream>>::~CObjectVector<class CMyComPtr<struct ISequentialInStream>>(void)
.text:00008204                 public ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
.text:00008204 ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ proc near
.text:00008204                                         ; CODE XREF: NCoderMixer2::CCoderMT::~CCoderMT(void)+5Ep
.text:00008204                                         ; __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$4+6j
.text:00008204
.text:00008204 var_20          = dword ptr -20h
.text:00008204 var_1C          = dword ptr -1Ch
.text:00008204 var_18          = dword ptr -18h
.text:00008204 var_14          = dword ptr -14h
.text:00008204 var_10          = dword ptr -10h
.text:00008204 var_C           = dword ptr -0Ch
.text:00008204 var_4           = dword ptr -4
.text:00008204
.text:00008204                 push    ebp
.text:00008205                 mov     ebp, esp
.text:00008207                 push    0FFFFFFFFh
.text:00008209                 push    offset __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
.text:0000820E                 mov     eax, large fs:0
.text:00008214                 push    eax
.text:00008215                 sub     esp, 14h
.text:00008218                 mov     eax, 0CCCCCCCCh
.text:0000821D                 mov     [ebp+var_20], eax
.text:00008220                 mov     [ebp+var_1C], eax
.text:00008223                 mov     [ebp+var_18], eax
.text:00008226                 mov     [ebp+var_14], eax
.text:00008229                 mov     [ebp+var_10], eax
.text:0000822C                 mov     eax, dword ptr ds:___security_cookie
.text:00008231                 xor     eax, ebp
.text:00008233                 push    eax
.text:00008234                 lea     eax, [ebp+var_C]
.text:00008237                 mov     large fs:0, eax
.text:0000823D                 mov     [ebp+var_10], ecx
.text:00008240                 mov     [ebp+var_4], 0
.text:00008247                 mov     ecx, [ebp+var_10]
.text:0000824A                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000824F                 mov     [ebp+var_14], eax
.text:00008252
.text:00008252 loc_8252:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void):loc_8294j
.text:00008252                 cmp     [ebp+var_14], 0
.text:00008256                 jz      short loc_8296
.text:00008258                 mov     eax, [ebp+var_14]
.text:0000825B                 sub     eax, 1
.text:0000825E                 mov     [ebp+var_14], eax
.text:00008261                 mov     ecx, [ebp+var_14]
.text:00008264                 push    ecx
.text:00008265                 mov     ecx, [ebp+var_10]
.text:00008268                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000826D                 mov     edx, [eax]
.text:0000826F                 mov     [ebp+var_1C], edx
.text:00008272                 mov     eax, [ebp+var_1C]
.text:00008275                 mov     [ebp+var_18], eax
.text:00008278                 cmp     [ebp+var_18], 0
.text:0000827C                 jz      short loc_828D
.text:0000827E                 push    1
.text:00008280                 mov     ecx, [ebp+var_18]
.text:00008283                 call    ??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z ; CMyComPtr<ISequentialInStream>::`scalar deleting destructor'(uint)
.text:00008288                 mov     [ebp+var_20], eax
.text:0000828B                 jmp     short loc_8294
.text:0000828D ; ---------------------------------------------------------------------------
.text:0000828D
.text:0000828D loc_828D:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)+78j
.text:0000828D                 mov     [ebp+var_20], 0
.text:00008294
.text:00008294 loc_8294:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)+87j
.text:00008294                 jmp     short loc_8252
.text:00008296 ; ---------------------------------------------------------------------------
.text:00008296
.text:00008296 loc_8296:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)+52j
.text:00008296                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000829D                 mov     ecx, [ebp+var_10]
.text:000082A0                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000082A5                 mov     ecx, [ebp+var_C]
.text:000082A8                 mov     large fs:0, ecx
.text:000082AF                 pop     ecx
.text:000082B0                 add     esp, 20h
.text:000082B3                 cmp     ebp, esp
.text:000082B5                 call    __RTC_CheckEsp
.text:000082BA                 mov     esp, ebp
.text:000082BC                 pop     ebp
.text:000082BD                 retn
.text:000082BD ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ endp
.text:000082BD
.text:000082BD ; ---------------------------------------------------------------------------
.text:000082BE                 align 10h
.text:000082BE _text           ends
.text:000082BE
.text$x:000082C0 ; ===========================================================================
.text$x:000082C0
.text$x:000082C0 ; Segment type: Pure code
.text$x:000082C0 ; Segment permissions: Read/Execute
.text$x:000082C0 _text$x         segment para public 'CODE' use32
.text$x:000082C0                 assume cs:_text$x
.text$x:000082C0                 ;org 82C0h
.text$x:000082C0 ; COMDAT (pick associative to section at 8204)
.text$x:000082C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000082C0
.text$x:000082C0 ; =============== S U B R O U T I N E =======================================
.text$x:000082C0
.text$x:000082C0
.text$x:000082C0 __unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ$0 proc near
.text$x:000082C0                                         ; DATA XREF: .xdata$x:000082E8o
.text$x:000082C0                 mov     ecx, [ebp-10h]
.text$x:000082C3                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:000082C3 __unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ$0 endp
.text$x:000082C3
.text$x:000082C8
.text$x:000082C8 ; =============== S U B R O U T I N E =======================================
.text$x:000082C8
.text$x:000082C8
.text$x:000082C8 __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ proc near
.text$x:000082C8                                         ; DATA XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)+5o
.text$x:000082C8
.text$x:000082C8 arg_4           = dword ptr  8
.text$x:000082C8
.text$x:000082C8                 mov     edx, [esp+arg_4]
.text$x:000082CC                 lea     eax, [edx+0Ch]
.text$x:000082CF                 mov     ecx, [edx-18h]
.text$x:000082D2                 xor     ecx, eax
.text$x:000082D4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000082D9                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
.text$x:000082DE                 jmp     ___CxxFrameHandler3
.text$x:000082DE __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ endp
.text$x:000082DE
.text$x:000082DE ; ---------------------------------------------------------------------------
.text$x:000082E3                 align 4
.text$x:000082E3 _text$x         ends
.text$x:000082E3
.xdata$x:000082E4 ; ===========================================================================
.xdata$x:000082E4
.xdata$x:000082E4 ; Segment type: Pure data
.xdata$x:000082E4 ; Segment permissions: Read
.xdata$x:000082E4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000082E4                 assume cs:_xdata$x
.xdata$x:000082E4                 ;org 82E4h
.xdata$x:000082E4 ; COMDAT (pick associative to section at 8204)
.xdata$x:000082E4 __unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ db 0FFh
.xdata$x:000082E4                                         ; DATA XREF: .xdata$x:000082F4o
.xdata$x:000082E5                 db 0FFh
.xdata$x:000082E6                 db 0FFh
.xdata$x:000082E7                 db 0FFh
.xdata$x:000082E8                 dd offset __unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ$0
.xdata$x:000082EC __ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ db  22h ; "
.xdata$x:000082EC                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ+11o
.xdata$x:000082ED                 db    5
.xdata$x:000082EE                 db  93h ; ô
.xdata$x:000082EF                 db  19h
.xdata$x:000082F0                 db    1
.xdata$x:000082F1                 db    0
.xdata$x:000082F2                 db    0
.xdata$x:000082F3                 db    0
.xdata$x:000082F4                 dd offset __unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
.xdata$x:000082F8                 db    0
.xdata$x:000082F9                 db    0
.xdata$x:000082FA                 db    0
.xdata$x:000082FB                 db    0
.xdata$x:000082FC                 db    0
.xdata$x:000082FD                 db    0
.xdata$x:000082FE                 db    0
.xdata$x:000082FF                 db    0
.xdata$x:00008300                 db    0
.xdata$x:00008301                 db    0
.xdata$x:00008302                 db    0
.xdata$x:00008303                 db    0
.xdata$x:00008304                 db    0
.xdata$x:00008305                 db    0
.xdata$x:00008306                 db    0
.xdata$x:00008307                 db    0
.xdata$x:00008308                 db    0
.xdata$x:00008309                 db    0
.xdata$x:0000830A                 db    0
.xdata$x:0000830B                 db    0
.xdata$x:0000830C                 db    1
.xdata$x:0000830D                 db    0
.xdata$x:0000830E                 db    0
.xdata$x:0000830F                 db    0
.xdata$x:0000830F _xdata$x        ends
.xdata$x:0000830F
.text:00008310 ; ===========================================================================
.text:00008310
.text:00008310 ; Segment type: Pure code
.text:00008310 ; Segment permissions: Read/Execute
.text:00008310 _text           segment para public 'CODE' use32
.text:00008310                 assume cs:_text
.text:00008310                 ;org 8310h
.text:00008310 ; COMDAT (pick any)
.text:00008310                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008310
.text:00008310 ; =============== S U B R O U T I N E =======================================
.text:00008310
.text:00008310 ; Attributes: bp-based frame
.text:00008310
.text:00008310 ; public: void * __thiscall CMyComPtr<struct ISequentialInStream>::`scalar deleting destructor'(unsigned int)
.text:00008310                 public ??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z
.text:00008310 ??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z proc near
.text:00008310                                         ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)+7Fp
.text:00008310
.text:00008310 var_4           = dword ptr -4
.text:00008310 arg_0           = dword ptr  8
.text:00008310
.text:00008310                 push    ebp
.text:00008311                 mov     ebp, esp
.text:00008313                 push    ecx
.text:00008314                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000831B                 mov     [ebp+var_4], ecx
.text:0000831E                 mov     ecx, [ebp+var_4]
.text:00008321                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00008326                 mov     eax, [ebp+arg_0]
.text:00008329                 and     eax, 1
.text:0000832C                 jz      short loc_833A
.text:0000832E                 mov     ecx, [ebp+var_4]
.text:00008331                 push    ecx             ; void *
.text:00008332                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008337                 add     esp, 4
.text:0000833A
.text:0000833A loc_833A:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::`scalar deleting destructor'(uint)+1Cj
.text:0000833A                 mov     eax, [ebp+var_4]
.text:0000833D                 add     esp, 4
.text:00008340                 cmp     ebp, esp
.text:00008342                 call    __RTC_CheckEsp
.text:00008347                 mov     esp, ebp
.text:00008349                 pop     ebp
.text:0000834A                 retn    4
.text:0000834A ??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z endp
.text:0000834A
.text:0000834A ; ---------------------------------------------------------------------------
.text:0000834D                 align 10h
.text:0000834D _text           ends
.text:0000834D
.text:00008350 ; ===========================================================================
.text:00008350
.text:00008350 ; Segment type: Pure code
.text:00008350 ; Segment permissions: Read/Execute
.text:00008350 _text           segment para public 'CODE' use32
.text:00008350                 assume cs:_text
.text:00008350                 ;org 8350h
.text:00008350 ; COMDAT (pick any)
.text:00008350                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008350
.text:00008350 ; =============== S U B R O U T I N E =======================================
.text:00008350
.text:00008350 ; Attributes: bp-based frame
.text:00008350
.text:00008350 ; public: void * __thiscall NArchive::N7z::CCoderInfo::`vector deleting destructor'(unsigned int)
.text:00008350                 public ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z
.text:00008350 ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z proc near
.text:00008350                                         ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+109p
.text:00008350
.text:00008350 var_4           = dword ptr -4
.text:00008350 arg_0           = dword ptr  8
.text:00008350
.text:00008350                 push    ebp
.text:00008351                 mov     ebp, esp
.text:00008353                 push    ecx
.text:00008354                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000835B                 mov     [ebp+var_4], ecx
.text:0000835E                 mov     eax, [ebp+arg_0]
.text:00008361                 and     eax, 2
.text:00008364                 jz      short loc_839C
.text:00008366                 push    offset ??1CCoderInfo@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCoderInfo::~CCoderInfo(void)
.text:0000836B                 mov     ecx, [ebp+var_4]
.text:0000836E                 mov     edx, [ecx-4]
.text:00008371                 push    edx
.text:00008372                 push    18h
.text:00008374                 mov     eax, [ebp+var_4]
.text:00008377                 push    eax
.text:00008378                 call    ??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
.text:0000837D                 mov     ecx, [ebp+arg_0]
.text:00008380                 and     ecx, 1
.text:00008383                 jz      short loc_8394
.text:00008385                 mov     edx, [ebp+var_4]
.text:00008388                 sub     edx, 4
.text:0000838B                 push    edx             ; void *
.text:0000838C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008391                 add     esp, 4
.text:00008394
.text:00008394 loc_8394:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+33j
.text:00008394                 mov     eax, [ebp+var_4]
.text:00008397                 sub     eax, 4
.text:0000839A                 jmp     short loc_83BB
.text:0000839C ; ---------------------------------------------------------------------------
.text:0000839C
.text:0000839C loc_839C:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+14j
.text:0000839C                 mov     ecx, [ebp+var_4] ; this
.text:0000839F                 call    ??1CCoderInfo@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCoderInfo::~CCoderInfo(void)
.text:000083A4                 mov     eax, [ebp+arg_0]
.text:000083A7                 and     eax, 1
.text:000083AA                 jz      short loc_83B8
.text:000083AC                 mov     ecx, [ebp+var_4]
.text:000083AF                 push    ecx             ; void *
.text:000083B0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000083B5                 add     esp, 4
.text:000083B8
.text:000083B8 loc_83B8:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+5Aj
.text:000083B8                 mov     eax, [ebp+var_4]
.text:000083BB
.text:000083BB loc_83BB:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+4Aj
.text:000083BB                 add     esp, 4
.text:000083BE                 cmp     ebp, esp
.text:000083C0                 call    __RTC_CheckEsp
.text:000083C5                 mov     esp, ebp
.text:000083C7                 pop     ebp
.text:000083C8                 retn    4
.text:000083C8 ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z endp
.text:000083C8
.text:000083C8 ; ---------------------------------------------------------------------------
.text:000083CB                 align 4
.text:000083CB _text           ends
.text:000083CB
.text:000083CC ; ===========================================================================
.text:000083CC
.text:000083CC ; Segment type: Pure code
.text:000083CC ; Segment permissions: Read/Execute
.text:000083CC _text           segment para public 'CODE' use32
.text:000083CC                 assume cs:_text
.text:000083CC                 ;org 83CCh
.text:000083CC ; COMDAT (pick any)
.text:000083CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000083CC
.text:000083CC ; =============== S U B R O U T I N E =======================================
.text:000083CC
.text:000083CC ; Attributes: bp-based frame
.text:000083CC
.text:000083CC ; _DWORD __thiscall NArchive::N7z::CCoderInfo::CCoderInfo(NArchive::N7z::CCoderInfo *__hidden this)
.text:000083CC                 public ??0CCoderInfo@N7z@NArchive@@QAE@XZ
.text:000083CC ??0CCoderInfo@N7z@NArchive@@QAE@XZ proc near
.text:000083CC                                         ; DATA XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+B4o
.text:000083CC
.text:000083CC var_4           = dword ptr -4
.text:000083CC
.text:000083CC                 push    ebp
.text:000083CD                 mov     ebp, esp
.text:000083CF                 push    ecx
.text:000083D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000083D7                 mov     [ebp+var_4], ecx
.text:000083DA                 mov     ecx, [ebp+var_4]
.text:000083DD                 add     ecx, 8
.text:000083E0                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:000083E5                 mov     eax, [ebp+var_4]
.text:000083E8                 add     esp, 4
.text:000083EB                 cmp     ebp, esp
.text:000083ED                 call    __RTC_CheckEsp
.text:000083F2                 mov     esp, ebp
.text:000083F4                 pop     ebp
.text:000083F5                 retn
.text:000083F5 ??0CCoderInfo@N7z@NArchive@@QAE@XZ endp
.text:000083F5
.text:000083F5 ; ---------------------------------------------------------------------------
.text:000083F6                 align 4
.text:000083F6 _text           ends
.text:000083F6
.text:000083F8 ; ===========================================================================
.text:000083F8
.text:000083F8 ; Segment type: Pure code
.text:000083F8 ; Segment permissions: Read/Execute
.text:000083F8 _text           segment para public 'CODE' use32
.text:000083F8                 assume cs:_text
.text:000083F8                 ;org 83F8h
.text:000083F8 ; COMDAT (pick any)
.text:000083F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000083F8
.text:000083F8 ; =============== S U B R O U T I N E =======================================
.text:000083F8
.text:000083F8 ; Attributes: bp-based frame
.text:000083F8
.text:000083F8 ; _DWORD __thiscall NArchive::N7z::CCoderInfo::~CCoderInfo(NArchive::N7z::CCoderInfo *__hidden this)
.text:000083F8                 public ??1CCoderInfo@N7z@NArchive@@QAE@XZ
.text:000083F8 ??1CCoderInfo@N7z@NArchive@@QAE@XZ proc near
.text:000083F8                                         ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+4Fp
.text:000083F8                                         ; DATA XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+AFo ...
.text:000083F8
.text:000083F8 var_4           = dword ptr -4
.text:000083F8
.text:000083F8                 push    ebp
.text:000083F9                 mov     ebp, esp
.text:000083FB                 push    ecx
.text:000083FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008403                 mov     [ebp+var_4], ecx
.text:00008406                 mov     ecx, [ebp+var_4]
.text:00008409                 add     ecx, 8
.text:0000840C                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00008411                 add     esp, 4
.text:00008414                 cmp     ebp, esp
.text:00008416                 call    __RTC_CheckEsp
.text:0000841B                 mov     esp, ebp
.text:0000841D                 pop     ebp
.text:0000841E                 retn
.text:0000841E ??1CCoderInfo@N7z@NArchive@@QAE@XZ endp
.text:0000841E
.text:0000841E ; ---------------------------------------------------------------------------
.text:0000841F                 align 10h
.text:0000841F _text           ends
.text:0000841F
.text:00008420 ; ===========================================================================
.text:00008420
.text:00008420 ; Segment type: Pure code
.text:00008420 ; Segment permissions: Read/Execute
.text:00008420 _text           segment para public 'CODE' use32
.text:00008420                 assume cs:_text
.text:00008420                 ;org 8420h
.text:00008420 ; COMDAT (pick any)
.text:00008420                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008420
.text:00008420 ; =============== S U B R O U T I N E =======================================
.text:00008420
.text:00008420 ; Attributes: bp-based frame
.text:00008420
.text:00008420 ; public: void * __thiscall CInOutTempBuffer::`scalar deleting destructor'(unsigned int)
.text:00008420                 public ??_GCInOutTempBuffer@@QAEPAXI@Z
.text:00008420 ??_GCInOutTempBuffer@@QAEPAXI@Z proc near
.text:00008420                                         ; CODE XREF: CObjectVector<CInOutTempBuffer>::~CObjectVector<CInOutTempBuffer>(void)+7Fp
.text:00008420
.text:00008420 var_4           = dword ptr -4
.text:00008420 arg_0           = dword ptr  8
.text:00008420
.text:00008420                 push    ebp
.text:00008421                 mov     ebp, esp
.text:00008423                 push    ecx
.text:00008424                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000842B                 mov     [ebp+var_4], ecx
.text:0000842E                 mov     ecx, [ebp+var_4] ; this
.text:00008431                 call    ??1CInOutTempBuffer@@QAE@XZ ; CInOutTempBuffer::~CInOutTempBuffer(void)
.text:00008436                 mov     eax, [ebp+arg_0]
.text:00008439                 and     eax, 1
.text:0000843C                 jz      short loc_844A
.text:0000843E                 mov     ecx, [ebp+var_4]
.text:00008441                 push    ecx             ; void *
.text:00008442                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008447                 add     esp, 4
.text:0000844A
.text:0000844A loc_844A:                               ; CODE XREF: CInOutTempBuffer::`scalar deleting destructor'(uint)+1Cj
.text:0000844A                 mov     eax, [ebp+var_4]
.text:0000844D                 add     esp, 4
.text:00008450                 cmp     ebp, esp
.text:00008452                 call    __RTC_CheckEsp
.text:00008457                 mov     esp, ebp
.text:00008459                 pop     ebp
.text:0000845A                 retn    4
.text:0000845A ??_GCInOutTempBuffer@@QAEPAXI@Z endp
.text:0000845A
.text:0000845A ; ---------------------------------------------------------------------------
.text:0000845D                 align 10h
.text:0000845D _text           ends
.text:0000845D
.text:00008460 ; ===========================================================================
.text:00008460
.text:00008460 ; Segment type: Pure code
.text:00008460 ; Segment permissions: Read/Execute
.text:00008460 _text           segment para public 'CODE' use32
.text:00008460                 assume cs:_text
.text:00008460                 ;org 8460h
.text:00008460 ; COMDAT (pick any)
.text:00008460                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008460
.text:00008460 ; =============== S U B R O U T I N E =======================================
.text:00008460
.text:00008460 ; Attributes: bp-based frame
.text:00008460
.text:00008460 ; _DWORD __thiscall CProp::~CProp(CProp *__hidden this)
.text:00008460                 public ??1CProp@@QAE@XZ
.text:00008460 ??1CProp@@QAE@XZ proc near              ; CODE XREF: CProp::`scalar deleting destructor'(uint)+11p
.text:00008460
.text:00008460 var_4           = dword ptr -4
.text:00008460
.text:00008460                 push    ebp
.text:00008461                 mov     ebp, esp
.text:00008463                 push    ecx
.text:00008464                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000846B                 mov     [ebp+var_4], ecx
.text:0000846E                 mov     ecx, [ebp+var_4]
.text:00008471                 add     ecx, 8          ; this
.text:00008474                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00008479                 add     esp, 4
.text:0000847C                 cmp     ebp, esp
.text:0000847E                 call    __RTC_CheckEsp
.text:00008483                 mov     esp, ebp
.text:00008485                 pop     ebp
.text:00008486                 retn
.text:00008486 ??1CProp@@QAE@XZ endp
.text:00008486
.text:00008486 ; ---------------------------------------------------------------------------
.text:00008487                 align 4
.text:00008487 _text           ends
.text:00008487
.text:00008488 ; ===========================================================================
.text:00008488
.text:00008488 ; Segment type: Pure code
.text:00008488 ; Segment permissions: Read/Execute
.text:00008488 _text           segment para public 'CODE' use32
.text:00008488                 assume cs:_text
.text:00008488                 ;org 8488h
.text:00008488 ; COMDAT (pick any)
.text:00008488                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008488
.text:00008488 ; =============== S U B R O U T I N E =======================================
.text:00008488
.text:00008488 ; Attributes: bp-based frame
.text:00008488
.text:00008488 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00008488                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00008488 ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00008488                                         ; CODE XREF: CProp::~CProp(void)+14p
.text:00008488
.text:00008488 var_4           = dword ptr -4
.text:00008488
.text:00008488                 push    ebp
.text:00008489                 mov     ebp, esp
.text:0000848B                 push    ecx
.text:0000848C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008493                 mov     [ebp+var_4], ecx
.text:00008496                 mov     ecx, [ebp+var_4] ; this
.text:00008499                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:0000849E                 add     esp, 4
.text:000084A1                 cmp     ebp, esp
.text:000084A3                 call    __RTC_CheckEsp
.text:000084A8                 mov     esp, ebp
.text:000084AA                 pop     ebp
.text:000084AB                 retn
.text:000084AB ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:000084AB
.text:000084AB _text           ends
.text:000084AB
.text:000084AC ; ===========================================================================
.text:000084AC
.text:000084AC ; Segment type: Pure code
.text:000084AC ; Segment permissions: Read/Execute
.text:000084AC _text           segment para public 'CODE' use32
.text:000084AC                 assume cs:_text
.text:000084AC                 ;org 84ACh
.text:000084AC ; COMDAT (pick any)
.text:000084AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000084AC
.text:000084AC ; =============== S U B R O U T I N E =======================================
.text:000084AC
.text:000084AC ; Attributes: bp-based frame
.text:000084AC
.text:000084AC ; public: __thiscall CMethodProps::CMethodProps(class CMethodProps const &)
.text:000084AC                 public ??0CMethodProps@@QAE@ABV0@@Z
.text:000084AC ??0CMethodProps@@QAE@ABV0@@Z proc near  ; CODE XREF: NArchive::N7z::CMethodFull::CMethodFull(NArchive::N7z::CMethodFull const &)+15p
.text:000084AC
.text:000084AC var_4           = dword ptr -4
.text:000084AC arg_0           = dword ptr  8
.text:000084AC
.text:000084AC                 push    ebp
.text:000084AD                 mov     ebp, esp
.text:000084AF                 push    ecx
.text:000084B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000084B7                 mov     [ebp+var_4], ecx
.text:000084BA                 mov     eax, [ebp+arg_0]
.text:000084BD                 push    eax
.text:000084BE                 mov     ecx, [ebp+var_4]
.text:000084C1                 call    ??0CProps@@QAE@ABU0@@Z ; CProps::CProps(CProps const &)
.text:000084C6                 mov     eax, [ebp+var_4]
.text:000084C9                 add     esp, 4
.text:000084CC                 cmp     ebp, esp
.text:000084CE                 call    __RTC_CheckEsp
.text:000084D3                 mov     esp, ebp
.text:000084D5                 pop     ebp
.text:000084D6                 retn    4
.text:000084D6 ??0CMethodProps@@QAE@ABV0@@Z endp
.text:000084D6
.text:000084D6 ; ---------------------------------------------------------------------------
.text:000084D9                 align 4
.text:000084D9 _text           ends
.text:000084D9
.text:000084DC ; ===========================================================================
.text:000084DC
.text:000084DC ; Segment type: Pure code
.text:000084DC ; Segment permissions: Read/Execute
.text:000084DC _text           segment para public 'CODE' use32
.text:000084DC                 assume cs:_text
.text:000084DC                 ;org 84DCh
.text:000084DC ; COMDAT (pick any)
.text:000084DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000084DC
.text:000084DC ; =============== S U B R O U T I N E =======================================
.text:000084DC
.text:000084DC ; Attributes: bp-based frame
.text:000084DC
.text:000084DC ; _DWORD __thiscall CStreamBinder::~CStreamBinder(CStreamBinder *__hidden this)
.text:000084DC                 public ??1CStreamBinder@@QAE@XZ
.text:000084DC ??1CStreamBinder@@QAE@XZ proc near      ; CODE XREF: CStreamBinder::`scalar deleting destructor'(uint)+11p
.text:000084DC
.text:000084DC var_10          = dword ptr -10h
.text:000084DC var_C           = dword ptr -0Ch
.text:000084DC var_4           = dword ptr -4
.text:000084DC
.text:000084DC                 push    ebp
.text:000084DD                 mov     ebp, esp
.text:000084DF                 push    0FFFFFFFFh
.text:000084E1                 push    offset __ehhandler$??1CStreamBinder@@QAE@XZ
.text:000084E6                 mov     eax, large fs:0
.text:000084EC                 push    eax
.text:000084ED                 push    ecx
.text:000084EE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000084F5                 mov     eax, dword ptr ds:___security_cookie
.text:000084FA                 xor     eax, ebp
.text:000084FC                 push    eax
.text:000084FD                 lea     eax, [ebp+var_C]
.text:00008500                 mov     large fs:0, eax
.text:00008506                 mov     [ebp+var_10], ecx
.text:00008509                 mov     [ebp+var_4], 1
.text:00008510                 mov     ecx, [ebp+var_10]
.text:00008513                 add     ecx, 8          ; this
.text:00008516                 call    ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text:0000851B                 mov     byte ptr [ebp+var_4], 0
.text:0000851F                 mov     ecx, [ebp+var_10]
.text:00008522                 add     ecx, 4          ; this
.text:00008525                 call    ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text:0000852A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008531                 mov     ecx, [ebp+var_10] ; this
.text:00008534                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:00008539                 mov     ecx, [ebp+var_C]
.text:0000853C                 mov     large fs:0, ecx
.text:00008543                 pop     ecx
.text:00008544                 add     esp, 10h
.text:00008547                 cmp     ebp, esp
.text:00008549                 call    __RTC_CheckEsp
.text:0000854E                 mov     esp, ebp
.text:00008550                 pop     ebp
.text:00008551                 retn
.text:00008551 ??1CStreamBinder@@QAE@XZ endp
.text:00008551
.text:00008551 ; ---------------------------------------------------------------------------
.text:00008552                 align 4
.text:00008552 _text           ends
.text:00008552
.text$x:00008554 ; ===========================================================================
.text$x:00008554
.text$x:00008554 ; Segment type: Pure code
.text$x:00008554 ; Segment permissions: Read/Execute
.text$x:00008554 _text$x         segment para public 'CODE' use32
.text$x:00008554                 assume cs:_text$x
.text$x:00008554                 ;org 8554h
.text$x:00008554 ; COMDAT (pick associative to section at 84DC)
.text$x:00008554                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00008554
.text$x:00008554 ; =============== S U B R O U T I N E =======================================
.text$x:00008554
.text$x:00008554
.text$x:00008554 __unwindfunclet$??1CStreamBinder@@QAE@XZ$0 proc near
.text$x:00008554                                         ; DATA XREF: .xdata$x:00008588o
.text$x:00008554                 mov     ecx, [ebp-10h]  ; this
.text$x:00008557                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00008557 __unwindfunclet$??1CStreamBinder@@QAE@XZ$0 endp
.text$x:00008557
.text$x:0000855C
.text$x:0000855C ; =============== S U B R O U T I N E =======================================
.text$x:0000855C
.text$x:0000855C
.text$x:0000855C __unwindfunclet$??1CStreamBinder@@QAE@XZ$1 proc near
.text$x:0000855C                                         ; DATA XREF: .xdata$x:00008590o
.text$x:0000855C                 mov     ecx, [ebp-10h]
.text$x:0000855F                 add     ecx, 4          ; this
.text$x:00008562                 jmp     ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text$x:00008562 __unwindfunclet$??1CStreamBinder@@QAE@XZ$1 endp
.text$x:00008562
.text$x:00008567
.text$x:00008567 ; =============== S U B R O U T I N E =======================================
.text$x:00008567
.text$x:00008567
.text$x:00008567 __ehhandler$??1CStreamBinder@@QAE@XZ proc near
.text$x:00008567                                         ; DATA XREF: CStreamBinder::~CStreamBinder(void)+5o
.text$x:00008567
.text$x:00008567 arg_4           = dword ptr  8
.text$x:00008567
.text$x:00008567                 mov     edx, [esp+arg_4]
.text$x:0000856B                 lea     eax, [edx+0Ch]
.text$x:0000856E                 mov     ecx, [edx-8]
.text$x:00008571                 xor     ecx, eax
.text$x:00008573                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008578                 mov     eax, offset __ehfuncinfo$??1CStreamBinder@@QAE@XZ
.text$x:0000857D                 jmp     ___CxxFrameHandler3
.text$x:0000857D __ehhandler$??1CStreamBinder@@QAE@XZ endp
.text$x:0000857D
.text$x:0000857D ; ---------------------------------------------------------------------------
.text$x:00008582                 align 4
.text$x:00008582 _text$x         ends
.text$x:00008582
.xdata$x:00008584 ; ===========================================================================
.xdata$x:00008584
.xdata$x:00008584 ; Segment type: Pure data
.xdata$x:00008584 ; Segment permissions: Read
.xdata$x:00008584 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008584                 assume cs:_xdata$x
.xdata$x:00008584                 ;org 8584h
.xdata$x:00008584 ; COMDAT (pick associative to section at 84DC)
.xdata$x:00008584 __unwindtable$??1CStreamBinder@@QAE@XZ db 0FFh
.xdata$x:00008584                                         ; DATA XREF: .xdata$x:0000859Co
.xdata$x:00008585                 db 0FFh
.xdata$x:00008586                 db 0FFh
.xdata$x:00008587                 db 0FFh
.xdata$x:00008588                 dd offset __unwindfunclet$??1CStreamBinder@@QAE@XZ$0
.xdata$x:0000858C                 align 10h
.xdata$x:00008590                 dd offset __unwindfunclet$??1CStreamBinder@@QAE@XZ$1
.xdata$x:00008594 __ehfuncinfo$??1CStreamBinder@@QAE@XZ db  22h ; "
.xdata$x:00008594                                         ; DATA XREF: __ehhandler$??1CStreamBinder@@QAE@XZ+11o
.xdata$x:00008595                 db    5
.xdata$x:00008596                 db  93h ; ô
.xdata$x:00008597                 db  19h
.xdata$x:00008598                 db    2
.xdata$x:00008599                 db    0
.xdata$x:0000859A                 db    0
.xdata$x:0000859B                 db    0
.xdata$x:0000859C                 dd offset __unwindtable$??1CStreamBinder@@QAE@XZ
.xdata$x:000085A0                 db    0
.xdata$x:000085A1                 db    0
.xdata$x:000085A2                 db    0
.xdata$x:000085A3                 db    0
.xdata$x:000085A4                 db    0
.xdata$x:000085A5                 db    0
.xdata$x:000085A6                 db    0
.xdata$x:000085A7                 db    0
.xdata$x:000085A8                 db    0
.xdata$x:000085A9                 db    0
.xdata$x:000085AA                 db    0
.xdata$x:000085AB                 db    0
.xdata$x:000085AC                 db    0
.xdata$x:000085AD                 db    0
.xdata$x:000085AE                 db    0
.xdata$x:000085AF                 db    0
.xdata$x:000085B0                 db    0
.xdata$x:000085B1                 db    0
.xdata$x:000085B2                 db    0
.xdata$x:000085B3                 db    0
.xdata$x:000085B4                 db    1
.xdata$x:000085B5                 db    0
.xdata$x:000085B6                 db    0
.xdata$x:000085B7                 db    0
.xdata$x:000085B7 _xdata$x        ends
.xdata$x:000085B7
.text:000085B8 ; ===========================================================================
.text:000085B8
.text:000085B8 ; Segment type: Pure code
.text:000085B8 ; Segment permissions: Read/Execute
.text:000085B8 _text           segment para public 'CODE' use32
.text:000085B8                 assume cs:_text
.text:000085B8                 ;org 85B8h
.text:000085B8 ; COMDAT (pick any)
.text:000085B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000085B8
.text:000085B8 ; =============== S U B R O U T I N E =======================================
.text:000085B8
.text:000085B8 ; Attributes: bp-based frame
.text:000085B8
.text:000085B8 ; public: __thiscall CProps::CProps(struct CProps const &)
.text:000085B8                 public ??0CProps@@QAE@ABU0@@Z
.text:000085B8 ??0CProps@@QAE@ABU0@@Z proc near        ; CODE XREF: CMethodProps::CMethodProps(CMethodProps const &)+15p
.text:000085B8
.text:000085B8 var_4           = dword ptr -4
.text:000085B8 arg_0           = dword ptr  8
.text:000085B8
.text:000085B8                 push    ebp
.text:000085B9                 mov     ebp, esp
.text:000085BB                 push    ecx
.text:000085BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000085C3                 mov     [ebp+var_4], ecx
.text:000085C6                 mov     eax, [ebp+arg_0]
.text:000085C9                 push    eax
.text:000085CA                 mov     ecx, [ebp+var_4]
.text:000085CD                 call    ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ; CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)
.text:000085D2                 mov     eax, [ebp+var_4]
.text:000085D5                 add     esp, 4
.text:000085D8                 cmp     ebp, esp
.text:000085DA                 call    __RTC_CheckEsp
.text:000085DF                 mov     esp, ebp
.text:000085E1                 pop     ebp
.text:000085E2                 retn    4
.text:000085E2 ??0CProps@@QAE@ABU0@@Z endp
.text:000085E2
.text:000085E2 ; ---------------------------------------------------------------------------
.text:000085E5                 align 4
.text:000085E5 _text           ends
.text:000085E5
.text:000085E8 ; ===========================================================================
.text:000085E8
.text:000085E8 ; Segment type: Pure code
.text:000085E8 ; Segment permissions: Read/Execute
.text:000085E8 _text           segment para public 'CODE' use32
.text:000085E8                 assume cs:_text
.text:000085E8                 ;org 85E8h
.text:000085E8 ; COMDAT (pick any)
.text:000085E8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000085E8
.text:000085E8 ; =============== S U B R O U T I N E =======================================
.text:000085E8
.text:000085E8 ; Attributes: bp-based frame
.text:000085E8
.text:000085E8 ; _DWORD __thiscall NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(NWindows::NSynchronization::CManualResetEvent *__hidden this)
.text:000085E8                 public ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:000085E8 ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:000085E8                                         ; CODE XREF: CStreamBinder::~CStreamBinder(void)+3Ap
.text:000085E8                                         ; CStreamBinder::~CStreamBinder(void)+49p ...
.text:000085E8
.text:000085E8 var_4           = dword ptr -4
.text:000085E8
.text:000085E8                 push    ebp
.text:000085E9                 mov     ebp, esp
.text:000085EB                 push    ecx
.text:000085EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000085F3                 mov     [ebp+var_4], ecx
.text:000085F6                 mov     ecx, [ebp+var_4] ; this
.text:000085F9                 call    ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent(void)
.text:000085FE                 add     esp, 4
.text:00008601                 cmp     ebp, esp
.text:00008603                 call    __RTC_CheckEsp
.text:00008608                 mov     esp, ebp
.text:0000860A                 pop     ebp
.text:0000860B                 retn
.text:0000860B ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:0000860B
.text:0000860B _text           ends
.text:0000860B
.text:0000860C ; ===========================================================================
.text:0000860C
.text:0000860C ; Segment type: Pure code
.text:0000860C ; Segment permissions: Read/Execute
.text:0000860C _text           segment para public 'CODE' use32
.text:0000860C                 assume cs:_text
.text:0000860C                 ;org 860Ch
.text:0000860C ; COMDAT (pick any)
.text:0000860C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000860C
.text:0000860C ; =============== S U B R O U T I N E =======================================
.text:0000860C
.text:0000860C ; Attributes: bp-based frame
.text:0000860C
.text:0000860C ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000860C                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:0000860C ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:0000860C                                         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(void)+11p
.text:0000860C                                         ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>(void)+11p ...
.text:0000860C
.text:0000860C var_4           = dword ptr -4
.text:0000860C
.text:0000860C                 push    ebp
.text:0000860D                 mov     ebp, esp
.text:0000860F                 push    ecx
.text:00008610                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008617                 mov     [ebp+var_4], ecx
.text:0000861A                 mov     eax, [ebp+var_4]
.text:0000861D                 mov     dword ptr [eax], 0
.text:00008623                 mov     ecx, [ebp+var_4]
.text:00008626                 mov     dword ptr [ecx+4], 0
.text:0000862D                 mov     edx, [ebp+var_4]
.text:00008630                 mov     dword ptr [edx+8], 0
.text:00008637                 mov     eax, [ebp+var_4]
.text:0000863A                 mov     esp, ebp
.text:0000863C                 pop     ebp
.text:0000863D                 retn
.text:0000863D ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:0000863D
.text:0000863D ; ---------------------------------------------------------------------------
.text:0000863E                 align 10h
.text:0000863E _text           ends
.text:0000863E
.text:00008640 ; ===========================================================================
.text:00008640
.text:00008640 ; Segment type: Pure code
.text:00008640 ; Segment permissions: Read/Execute
.text:00008640 _text           segment para public 'CODE' use32
.text:00008640                 assume cs:_text
.text:00008640                 ;org 8640h
.text:00008640 ; COMDAT (pick any)
.text:00008640                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008640
.text:00008640 ; =============== S U B R O U T I N E =======================================
.text:00008640
.text:00008640 ; Attributes: bp-based frame
.text:00008640
.text:00008640 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00008640                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00008640 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00008640                                         ; CODE XREF: CObjectVector<CProp>::Size(void)+11p
.text:00008640                                         ; CObjectVector<CProp>::~CObjectVector<CProp>(void)+46p ...
.text:00008640
.text:00008640 var_4           = dword ptr -4
.text:00008640
.text:00008640                 push    ebp
.text:00008641                 mov     ebp, esp
.text:00008643                 push    ecx
.text:00008644                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000864B                 mov     [ebp+var_4], ecx
.text:0000864E                 mov     eax, [ebp+var_4]
.text:00008651                 mov     eax, [eax+4]
.text:00008654                 mov     esp, ebp
.text:00008656                 pop     ebp
.text:00008657                 retn
.text:00008657 ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:00008657
.text:00008657 _text           ends
.text:00008657
.text:00008658 ; ===========================================================================
.text:00008658
.text:00008658 ; Segment type: Pure code
.text:00008658 ; Segment permissions: Read/Execute
.text:00008658 _text           segment para public 'CODE' use32
.text:00008658                 assume cs:_text
.text:00008658                 ;org 8658h
.text:00008658 ; COMDAT (pick any)
.text:00008658                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008658
.text:00008658 ; =============== S U B R O U T I N E =======================================
.text:00008658
.text:00008658 ; Attributes: bp-based frame
.text:00008658
.text:00008658 ; public: bool __thiscall CRecordVector<void *>::IsEmpty(void)const
.text:00008658                 public ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
.text:00008658 ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ proc near
.text:00008658                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::IsEmpty(void)+11p
.text:00008658
.text:00008658 var_4           = dword ptr -4
.text:00008658
.text:00008658                 push    ebp
.text:00008659                 mov     ebp, esp
.text:0000865B                 push    ecx
.text:0000865C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008663                 mov     [ebp+var_4], ecx
.text:00008666                 mov     eax, [ebp+var_4]
.text:00008669                 xor     ecx, ecx
.text:0000866B                 cmp     dword ptr [eax+4], 0
.text:0000866F                 setz    cl
.text:00008672                 mov     al, cl
.text:00008674                 mov     esp, ebp
.text:00008676                 pop     ebp
.text:00008677                 retn
.text:00008677 ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ endp
.text:00008677
.text:00008677 _text           ends
.text:00008677
.text:00008678 ; ===========================================================================
.text:00008678
.text:00008678 ; Segment type: Pure code
.text:00008678 ; Segment permissions: Read/Execute
.text:00008678 _text           segment para public 'CODE' use32
.text:00008678                 assume cs:_text
.text:00008678                 ;org 8678h
.text:00008678 ; COMDAT (pick any)
.text:00008678                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008678
.text:00008678 ; =============== S U B R O U T I N E =======================================
.text:00008678
.text:00008678 ; Attributes: bp-based frame
.text:00008678
.text:00008678 ; public: void __thiscall CRecordVector<void *>::Reserve(unsigned int)
.text:00008678                 public ?Reserve@?$CRecordVector@PAX@@QAEXI@Z
.text:00008678 ?Reserve@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:00008678                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::operator=(CObjectVector<NArchive::N7z::CMethodFull> const &)+69p
.text:00008678
.text:00008678 var_10          = dword ptr -10h
.text:00008678 var_C           = dword ptr -0Ch
.text:00008678 Dst             = dword ptr -8
.text:00008678 var_4           = dword ptr -4
.text:00008678 arg_0           = dword ptr  8
.text:00008678
.text:00008678                 push    ebp
.text:00008679                 mov     ebp, esp
.text:0000867B                 sub     esp, 10h
.text:0000867E                 mov     eax, 0CCCCCCCCh
.text:00008683                 mov     [ebp+var_10], eax
.text:00008686                 mov     [ebp+var_C], eax
.text:00008689                 mov     [ebp+Dst], eax
.text:0000868C                 mov     [ebp+var_4], eax
.text:0000868F                 mov     [ebp+var_4], ecx
.text:00008692                 mov     eax, [ebp+var_4]
.text:00008695                 mov     ecx, [ebp+arg_0]
.text:00008698                 cmp     ecx, [eax+8]
.text:0000869B                 jbe     short loc_870C
.text:0000869D                 xor     ecx, ecx
.text:0000869F                 mov     eax, [ebp+arg_0]
.text:000086A2                 mov     edx, 4
.text:000086A7                 mul     edx
.text:000086A9                 seto    cl
.text:000086AC                 neg     ecx
.text:000086AE                 or      ecx, eax
.text:000086B0                 push    ecx             ; unsigned int
.text:000086B1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000086B6                 add     esp, 4
.text:000086B9                 mov     [ebp+var_C], eax
.text:000086BC                 mov     eax, [ebp+var_C]
.text:000086BF                 mov     [ebp+Dst], eax
.text:000086C2                 mov     ecx, [ebp+var_4]
.text:000086C5                 cmp     dword ptr [ecx+4], 0
.text:000086C9                 jz      short loc_86E7
.text:000086CB                 mov     edx, [ebp+var_4]
.text:000086CE                 mov     eax, [edx+4]
.text:000086D1                 shl     eax, 2
.text:000086D4                 push    eax             ; Size
.text:000086D5                 mov     ecx, [ebp+var_4]
.text:000086D8                 mov     edx, [ecx]
.text:000086DA                 push    edx             ; Src
.text:000086DB                 mov     eax, [ebp+Dst]
.text:000086DE                 push    eax             ; Dst
.text:000086DF                 call    _memcpy
.text:000086E4                 add     esp, 0Ch
.text:000086E7
.text:000086E7 loc_86E7:                               ; CODE XREF: CRecordVector<void *>::Reserve(uint)+51j
.text:000086E7                 mov     ecx, [ebp+var_4]
.text:000086EA                 mov     edx, [ecx]
.text:000086EC                 mov     [ebp+var_10], edx
.text:000086EF                 mov     eax, [ebp+var_10]
.text:000086F2                 push    eax             ; void *
.text:000086F3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000086F8                 add     esp, 4
.text:000086FB                 mov     ecx, [ebp+var_4]
.text:000086FE                 mov     edx, [ebp+Dst]
.text:00008701                 mov     [ecx], edx
.text:00008703                 mov     eax, [ebp+var_4]
.text:00008706                 mov     ecx, [ebp+arg_0]
.text:00008709                 mov     [eax+8], ecx
.text:0000870C
.text:0000870C loc_870C:                               ; CODE XREF: CRecordVector<void *>::Reserve(uint)+23j
.text:0000870C                 add     esp, 10h
.text:0000870F                 cmp     ebp, esp
.text:00008711                 call    __RTC_CheckEsp
.text:00008716                 mov     esp, ebp
.text:00008718                 pop     ebp
.text:00008719                 retn    4
.text:00008719 ?Reserve@?$CRecordVector@PAX@@QAEXI@Z endp
.text:00008719
.text:00008719 _text           ends
.text:00008719
.text:0000871C ; ===========================================================================
.text:0000871C
.text:0000871C ; Segment type: Pure code
.text:0000871C ; Segment permissions: Read/Execute
.text:0000871C _text           segment para public 'CODE' use32
.text:0000871C                 assume cs:_text
.text:0000871C                 ;org 871Ch
.text:0000871C ; COMDAT (pick any)
.text:0000871C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000871C
.text:0000871C ; =============== S U B R O U T I N E =======================================
.text:0000871C
.text:0000871C ; Attributes: bp-based frame
.text:0000871C
.text:0000871C ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000871C                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:0000871C ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:0000871C                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+9Cp
.text:0000871C                                         ; __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0+3j ...
.text:0000871C
.text:0000871C var_8           = dword ptr -8
.text:0000871C var_4           = dword ptr -4
.text:0000871C
.text:0000871C                 push    ebp
.text:0000871D                 mov     ebp, esp
.text:0000871F                 sub     esp, 8
.text:00008722                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008729                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008730                 mov     [ebp+var_4], ecx
.text:00008733                 mov     eax, [ebp+var_4]
.text:00008736                 mov     ecx, [eax]
.text:00008738                 mov     [ebp+var_8], ecx
.text:0000873B                 mov     edx, [ebp+var_8]
.text:0000873E                 push    edx             ; void *
.text:0000873F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008744                 add     esp, 4
.text:00008747                 add     esp, 8
.text:0000874A                 cmp     ebp, esp
.text:0000874C                 call    __RTC_CheckEsp
.text:00008751                 mov     esp, ebp
.text:00008753                 pop     ebp
.text:00008754                 retn
.text:00008754 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:00008754
.text:00008754 ; ---------------------------------------------------------------------------
.text:00008755                 align 4
.text:00008755 _text           ends
.text:00008755
.text:00008758 ; ===========================================================================
.text:00008758
.text:00008758 ; Segment type: Pure code
.text:00008758 ; Segment permissions: Read/Execute
.text:00008758 _text           segment para public 'CODE' use32
.text:00008758                 assume cs:_text
.text:00008758                 ;org 8758h
.text:00008758 ; COMDAT (pick any)
.text:00008758                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008758
.text:00008758 ; =============== S U B R O U T I N E =======================================
.text:00008758
.text:00008758 ; Attributes: bp-based frame
.text:00008758
.text:00008758 ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:00008758                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:00008758 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:00008758                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::Add(NArchive::N7z::CMethodFull const &)+7Fp
.text:00008758                                         ; CObjectVector<CMyComPtr<ISequentialOutStream>>::Add(CMyComPtr<ISequentialOutStream> const &)+50p ...
.text:00008758
.text:00008758 var_8           = dword ptr -8
.text:00008758 var_4           = dword ptr -4
.text:00008758 arg_0           = dword ptr  8
.text:00008758
.text:00008758                 push    ebp
.text:00008759                 mov     ebp, esp
.text:0000875B                 sub     esp, 8
.text:0000875E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008765                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000876C                 mov     [ebp+var_4], ecx
.text:0000876F                 mov     ecx, [ebp+var_4]
.text:00008772                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:00008777                 mov     eax, [ebp+var_4]
.text:0000877A                 mov     ecx, [eax+4]
.text:0000877D                 mov     edx, [ebp+var_4]
.text:00008780                 mov     eax, [edx]
.text:00008782                 mov     edx, [ebp+arg_0]
.text:00008785                 mov     [eax+ecx*4], edx
.text:00008788                 mov     eax, [ebp+var_4]
.text:0000878B                 mov     ecx, [eax+4]
.text:0000878E                 mov     [ebp+var_8], ecx
.text:00008791                 mov     edx, [ebp+var_4]
.text:00008794                 mov     eax, [edx+4]
.text:00008797                 add     eax, 1
.text:0000879A                 mov     ecx, [ebp+var_4]
.text:0000879D                 mov     [ecx+4], eax
.text:000087A0                 mov     eax, [ebp+var_8]
.text:000087A3                 add     esp, 8
.text:000087A6                 cmp     ebp, esp
.text:000087A8                 call    __RTC_CheckEsp
.text:000087AD                 mov     esp, ebp
.text:000087AF                 pop     ebp
.text:000087B0                 retn    4
.text:000087B0 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:000087B0
.text:000087B0 ; ---------------------------------------------------------------------------
.text:000087B3                 align 4
.text:000087B3 _text           ends
.text:000087B3
.text:000087B4 ; ===========================================================================
.text:000087B4
.text:000087B4 ; Segment type: Pure code
.text:000087B4 ; Segment permissions: Read/Execute
.text:000087B4 _text           segment para public 'CODE' use32
.text:000087B4                 assume cs:_text
.text:000087B4                 ;org 87B4h
.text:000087B4 ; COMDAT (pick any)
.text:000087B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000087B4
.text:000087B4 ; =============== S U B R O U T I N E =======================================
.text:000087B4
.text:000087B4 ; Attributes: bp-based frame
.text:000087B4
.text:000087B4 ; public: void __thiscall CRecordVector<void *>::AddInReserved(void * const)
.text:000087B4                 public ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
.text:000087B4 ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z proc near
.text:000087B4                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::operator=(CObjectVector<NArchive::N7z::CMethodFull> const &)+D7p
.text:000087B4                                         ; CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+C8p
.text:000087B4
.text:000087B4 var_4           = dword ptr -4
.text:000087B4 arg_0           = dword ptr  8
.text:000087B4
.text:000087B4                 push    ebp
.text:000087B5                 mov     ebp, esp
.text:000087B7                 push    ecx
.text:000087B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000087BF                 mov     [ebp+var_4], ecx
.text:000087C2                 mov     eax, [ebp+var_4]
.text:000087C5                 mov     ecx, [eax+4]
.text:000087C8                 mov     edx, [ebp+var_4]
.text:000087CB                 mov     eax, [edx]
.text:000087CD                 mov     edx, [ebp+arg_0]
.text:000087D0                 mov     [eax+ecx*4], edx
.text:000087D3                 mov     eax, [ebp+var_4]
.text:000087D6                 mov     ecx, [eax+4]
.text:000087D9                 add     ecx, 1
.text:000087DC                 mov     edx, [ebp+var_4]
.text:000087DF                 mov     [edx+4], ecx
.text:000087E2                 mov     esp, ebp
.text:000087E4                 pop     ebp
.text:000087E5                 retn    4
.text:000087E5 ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z endp
.text:000087E5
.text:000087E5 _text           ends
.text:000087E5
.text:000087E8 ; ===========================================================================
.text:000087E8
.text:000087E8 ; Segment type: Pure code
.text:000087E8 ; Segment permissions: Read/Execute
.text:000087E8 _text           segment para public 'CODE' use32
.text:000087E8                 assume cs:_text
.text:000087E8                 ;org 87E8h
.text:000087E8 ; COMDAT (pick any)
.text:000087E8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000087E8
.text:000087E8 ; =============== S U B R O U T I N E =======================================
.text:000087E8
.text:000087E8 ; Attributes: bp-based frame
.text:000087E8
.text:000087E8 ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:000087E8                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:000087E8 ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:000087E8                                         ; CODE XREF: CObjectVector<CProp>::operator[](uint)+15p
.text:000087E8                                         ; CObjectVector<NArchive::N7z::CMethodFull>::operator[](uint)+15p
.text:000087E8
.text:000087E8 var_4           = dword ptr -4
.text:000087E8 arg_0           = dword ptr  8
.text:000087E8
.text:000087E8                 push    ebp
.text:000087E9                 mov     ebp, esp
.text:000087EB                 push    ecx
.text:000087EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000087F3                 mov     [ebp+var_4], ecx
.text:000087F6                 mov     eax, [ebp+var_4]
.text:000087F9                 mov     ecx, [eax]
.text:000087FB                 mov     edx, [ebp+arg_0]
.text:000087FE                 lea     eax, [ecx+edx*4]
.text:00008801                 mov     esp, ebp
.text:00008803                 pop     ebp
.text:00008804                 retn    4
.text:00008804 ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:00008804
.text:00008804 ; ---------------------------------------------------------------------------
.text:00008807                 align 4
.text:00008807 _text           ends
.text:00008807
.text:00008808 ; ===========================================================================
.text:00008808
.text:00008808 ; Segment type: Pure code
.text:00008808 ; Segment permissions: Read/Execute
.text:00008808 _text           segment para public 'CODE' use32
.text:00008808                 assume cs:_text
.text:00008808                 ;org 8808h
.text:00008808 ; COMDAT (pick any)
.text:00008808                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008808
.text:00008808 ; =============== S U B R O U T I N E =======================================
.text:00008808
.text:00008808 ; Attributes: bp-based frame
.text:00008808
.text:00008808 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00008808                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00008808 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00008808                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+64p
.text:00008808                                         ; CObjectVector<NArchive::N7z::CMethodFull>::operator[](uint)+15p ...
.text:00008808
.text:00008808 var_4           = dword ptr -4
.text:00008808 arg_0           = dword ptr  8
.text:00008808
.text:00008808                 push    ebp
.text:00008809                 mov     ebp, esp
.text:0000880B                 push    ecx
.text:0000880C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008813                 mov     [ebp+var_4], ecx
.text:00008816                 mov     eax, [ebp+var_4]
.text:00008819                 mov     ecx, [eax]
.text:0000881B                 mov     edx, [ebp+arg_0]
.text:0000881E                 lea     eax, [ecx+edx*4]
.text:00008821                 mov     esp, ebp
.text:00008823                 pop     ebp
.text:00008824                 retn    4
.text:00008824 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:00008824
.text:00008824 ; ---------------------------------------------------------------------------
.text:00008827                 align 4
.text:00008827 _text           ends
.text:00008827
.text:00008828 ; ===========================================================================
.text:00008828
.text:00008828 ; Segment type: Pure code
.text:00008828 ; Segment permissions: Read/Execute
.text:00008828 _text           segment para public 'CODE' use32
.text:00008828                 assume cs:_text
.text:00008828                 ;org 8828h
.text:00008828 ; COMDAT (pick any)
.text:00008828                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008828
.text:00008828 ; =============== S U B R O U T I N E =======================================
.text:00008828
.text:00008828 ; Attributes: bp-based frame
.text:00008828
.text:00008828 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(class CMyComPtr<struct ISequentialOutStream> const &)
.text:00008828                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z
.text:00008828 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z proc near
.text:00008828                                         ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::Add(CMyComPtr<ISequentialOutStream> const &)+38p
.text:00008828
.text:00008828 var_4           = dword ptr -4
.text:00008828 arg_0           = dword ptr  8
.text:00008828
.text:00008828                 push    ebp
.text:00008829                 mov     ebp, esp
.text:0000882B                 push    ecx
.text:0000882C                 push    esi
.text:0000882D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008834                 mov     [ebp+var_4], ecx
.text:00008837                 mov     eax, [ebp+var_4]
.text:0000883A                 mov     ecx, [ebp+arg_0]
.text:0000883D                 mov     edx, [ecx]
.text:0000883F                 mov     [eax], edx
.text:00008841                 mov     eax, [ebp+var_4]
.text:00008844                 cmp     dword ptr [eax], 0
.text:00008847                 jz      short loc_8864
.text:00008849                 mov     ecx, [ebp+var_4]
.text:0000884C                 mov     edx, [ecx]
.text:0000884E                 mov     eax, [ebp+var_4]
.text:00008851                 mov     ecx, [eax]
.text:00008853                 mov     edx, [edx]
.text:00008855                 mov     esi, esp
.text:00008857                 push    ecx
.text:00008858                 mov     eax, [edx+4]
.text:0000885B                 call    eax
.text:0000885D                 cmp     esi, esp
.text:0000885F                 call    __RTC_CheckEsp
.text:00008864
.text:00008864 loc_8864:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(CMyComPtr<ISequentialOutStream> const &)+1Fj
.text:00008864                 mov     eax, [ebp+var_4]
.text:00008867                 pop     esi
.text:00008868                 add     esp, 4
.text:0000886B                 cmp     ebp, esp
.text:0000886D                 call    __RTC_CheckEsp
.text:00008872                 mov     esp, ebp
.text:00008874                 pop     ebp
.text:00008875                 retn    4
.text:00008875 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@ABV0@@Z endp
.text:00008875
.text:00008875 _text           ends
.text:00008875
.text:00008878 ; ===========================================================================
.text:00008878
.text:00008878 ; Segment type: Pure code
.text:00008878 ; Segment permissions: Read/Execute
.text:00008878 _text           segment para public 'CODE' use32
.text:00008878                 assume cs:_text
.text:00008878                 ;org 8878h
.text:00008878 ; COMDAT (pick any)
.text:00008878                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008878
.text:00008878 ; =============== S U B R O U T I N E =======================================
.text:00008878
.text:00008878 ; Attributes: bp-based frame
.text:00008878
.text:00008878 ; private: void __thiscall CRecordVector<unsigned int>::MoveItems(unsigned int, unsigned int)
.text:00008878                 public ?MoveItems@?$CRecordVector@I@@AAEXII@Z
.text:00008878 ?MoveItems@?$CRecordVector@I@@AAEXII@Z proc near
.text:00008878                                         ; CODE XREF: CRecordVector<uint>::Insert(uint,uint)+24p
.text:00008878
.text:00008878 var_4           = dword ptr -4
.text:00008878 arg_0           = dword ptr  8
.text:00008878 arg_4           = dword ptr  0Ch
.text:00008878
.text:00008878                 push    ebp
.text:00008879                 mov     ebp, esp
.text:0000887B                 push    ecx
.text:0000887C                 push    esi
.text:0000887D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008884                 mov     [ebp+var_4], ecx
.text:00008887                 mov     eax, [ebp+var_4]
.text:0000888A                 mov     ecx, [eax+4]
.text:0000888D                 sub     ecx, [ebp+arg_4]
.text:00008890                 shl     ecx, 2
.text:00008893                 mov     esi, esp
.text:00008895                 push    ecx             ; Size
.text:00008896                 mov     edx, [ebp+var_4]
.text:00008899                 mov     eax, [edx]
.text:0000889B                 mov     ecx, [ebp+arg_4]
.text:0000889E                 lea     edx, [eax+ecx*4]
.text:000088A1                 push    edx             ; Src
.text:000088A2                 mov     eax, [ebp+var_4]
.text:000088A5                 mov     ecx, [eax]
.text:000088A7                 mov     edx, [ebp+arg_0]
.text:000088AA                 lea     eax, [ecx+edx*4]
.text:000088AD                 push    eax             ; Dst
.text:000088AE                 call    dword ptr ds:__imp__memmove
.text:000088B4                 add     esp, 0Ch
.text:000088B7                 cmp     esi, esp
.text:000088B9                 call    __RTC_CheckEsp
.text:000088BE                 pop     esi
.text:000088BF                 add     esp, 4
.text:000088C2                 cmp     ebp, esp
.text:000088C4                 call    __RTC_CheckEsp
.text:000088C9                 mov     esp, ebp
.text:000088CB                 pop     ebp
.text:000088CC                 retn    8
.text:000088CC ?MoveItems@?$CRecordVector@I@@AAEXII@Z endp
.text:000088CC
.text:000088CC ; ---------------------------------------------------------------------------
.text:000088CF                 align 10h
.text:000088CF _text           ends
.text:000088CF
.text:000088D0 ; ===========================================================================
.text:000088D0
.text:000088D0 ; Segment type: Pure code
.text:000088D0 ; Segment permissions: Read/Execute
.text:000088D0 _text           segment para public 'CODE' use32
.text:000088D0                 assume cs:_text
.text:000088D0                 ;org 88D0h
.text:000088D0 ; COMDAT (pick any)
.text:000088D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000088D0
.text:000088D0 ; =============== S U B R O U T I N E =======================================
.text:000088D0
.text:000088D0 ; Attributes: bp-based frame
.text:000088D0
.text:000088D0 ; private: void __thiscall CRecordVector<unsigned int>::ReserveOnePosition(void)
.text:000088D0                 public ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ
.text:000088D0 ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ proc near
.text:000088D0                                         ; CODE XREF: CRecordVector<uint>::Add(uint)+1Ap
.text:000088D0                                         ; CRecordVector<uint>::Insert(uint,uint)+11p
.text:000088D0
.text:000088D0 var_14          = dword ptr -14h
.text:000088D0 var_10          = dword ptr -10h
.text:000088D0 Dst             = dword ptr -0Ch
.text:000088D0 var_8           = dword ptr -8
.text:000088D0 var_4           = dword ptr -4
.text:000088D0
.text:000088D0                 push    ebp
.text:000088D1                 mov     ebp, esp
.text:000088D3                 sub     esp, 14h
.text:000088D6                 mov     eax, 0CCCCCCCCh
.text:000088DB                 mov     [ebp+var_14], eax
.text:000088DE                 mov     [ebp+var_10], eax
.text:000088E1                 mov     [ebp+Dst], eax
.text:000088E4                 mov     [ebp+var_8], eax
.text:000088E7                 mov     [ebp+var_4], eax
.text:000088EA                 mov     [ebp+var_4], ecx
.text:000088ED                 mov     eax, [ebp+var_4]
.text:000088F0                 mov     ecx, [ebp+var_4]
.text:000088F3                 mov     edx, [eax+4]
.text:000088F6                 cmp     edx, [ecx+8]
.text:000088F9                 jnz     loc_8984
.text:000088FF                 mov     eax, [ebp+var_4]
.text:00008902                 mov     ecx, [eax+8]
.text:00008905                 shr     ecx, 2
.text:00008908                 mov     edx, [ebp+var_4]
.text:0000890B                 mov     eax, [edx+8]
.text:0000890E                 lea     ecx, [eax+ecx+1]
.text:00008912                 mov     [ebp+var_8], ecx
.text:00008915                 xor     ecx, ecx
.text:00008917                 mov     eax, [ebp+var_8]
.text:0000891A                 mov     edx, 4
.text:0000891F                 mul     edx
.text:00008921                 seto    cl
.text:00008924                 neg     ecx
.text:00008926                 or      ecx, eax
.text:00008928                 push    ecx             ; unsigned int
.text:00008929                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000892E                 add     esp, 4
.text:00008931                 mov     [ebp+var_10], eax
.text:00008934                 mov     eax, [ebp+var_10]
.text:00008937                 mov     [ebp+Dst], eax
.text:0000893A                 mov     ecx, [ebp+var_4]
.text:0000893D                 cmp     dword ptr [ecx+4], 0
.text:00008941                 jz      short loc_895F
.text:00008943                 mov     edx, [ebp+var_4]
.text:00008946                 mov     eax, [edx+4]
.text:00008949                 shl     eax, 2
.text:0000894C                 push    eax             ; Size
.text:0000894D                 mov     ecx, [ebp+var_4]
.text:00008950                 mov     edx, [ecx]
.text:00008952                 push    edx             ; Src
.text:00008953                 mov     eax, [ebp+Dst]
.text:00008956                 push    eax             ; Dst
.text:00008957                 call    _memcpy
.text:0000895C                 add     esp, 0Ch
.text:0000895F
.text:0000895F loc_895F:                               ; CODE XREF: CRecordVector<uint>::ReserveOnePosition(void)+71j
.text:0000895F                 mov     ecx, [ebp+var_4]
.text:00008962                 mov     edx, [ecx]
.text:00008964                 mov     [ebp+var_14], edx
.text:00008967                 mov     eax, [ebp+var_14]
.text:0000896A                 push    eax             ; void *
.text:0000896B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008970                 add     esp, 4
.text:00008973                 mov     ecx, [ebp+var_4]
.text:00008976                 mov     edx, [ebp+Dst]
.text:00008979                 mov     [ecx], edx
.text:0000897B                 mov     eax, [ebp+var_4]
.text:0000897E                 mov     ecx, [ebp+var_8]
.text:00008981                 mov     [eax+8], ecx
.text:00008984
.text:00008984 loc_8984:                               ; CODE XREF: CRecordVector<uint>::ReserveOnePosition(void)+29j
.text:00008984                 add     esp, 14h
.text:00008987                 cmp     ebp, esp
.text:00008989                 call    __RTC_CheckEsp
.text:0000898E                 mov     esp, ebp
.text:00008990                 pop     ebp
.text:00008991                 retn
.text:00008991 ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ endp
.text:00008991
.text:00008991 ; ---------------------------------------------------------------------------
.text:00008992                 align 4
.text:00008992 _text           ends
.text:00008992
.text:00008994 ; ===========================================================================
.text:00008994
.text:00008994 ; Segment type: Pure code
.text:00008994 ; Segment permissions: Read/Execute
.text:00008994 _text           segment para public 'CODE' use32
.text:00008994                 assume cs:_text
.text:00008994                 ;org 8994h
.text:00008994 ; COMDAT (pick any)
.text:00008994                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008994
.text:00008994 ; =============== S U B R O U T I N E =======================================
.text:00008994
.text:00008994 ; Attributes: bp-based frame
.text:00008994
.text:00008994 ; public: void __thiscall CRecordVector<unsigned int>::ClearAndReserve(unsigned int)
.text:00008994                 public ?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z
.text:00008994 ?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z proc near
.text:00008994                                         ; CODE XREF: CRecordVector<uint>::ClearAndSetSize(uint)+15p
.text:00008994
.text:00008994 var_C           = dword ptr -0Ch
.text:00008994 var_8           = dword ptr -8
.text:00008994 var_4           = dword ptr -4
.text:00008994 arg_0           = dword ptr  8
.text:00008994
.text:00008994                 push    ebp
.text:00008995                 mov     ebp, esp
.text:00008997                 sub     esp, 0Ch
.text:0000899A                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000089A1                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000089A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000089AF                 mov     [ebp+var_4], ecx
.text:000089B2                 mov     ecx, [ebp+var_4]
.text:000089B5                 call    ?Clear@?$CRecordVector@I@@QAEXXZ ; CRecordVector<uint>::Clear(void)
.text:000089BA                 mov     eax, [ebp+var_4]
.text:000089BD                 mov     ecx, [ebp+arg_0]
.text:000089C0                 cmp     ecx, [eax+8]
.text:000089C3                 jbe     short loc_8A1C
.text:000089C5                 mov     edx, [ebp+var_4]
.text:000089C8                 mov     eax, [edx]
.text:000089CA                 mov     [ebp+var_8], eax
.text:000089CD                 mov     ecx, [ebp+var_8]
.text:000089D0                 push    ecx             ; void *
.text:000089D1                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000089D6                 add     esp, 4
.text:000089D9                 mov     edx, [ebp+var_4]
.text:000089DC                 mov     dword ptr [edx], 0
.text:000089E2                 mov     eax, [ebp+var_4]
.text:000089E5                 mov     dword ptr [eax+8], 0
.text:000089EC                 xor     ecx, ecx
.text:000089EE                 mov     eax, [ebp+arg_0]
.text:000089F1                 mov     edx, 4
.text:000089F6                 mul     edx
.text:000089F8                 seto    cl
.text:000089FB                 neg     ecx
.text:000089FD                 or      ecx, eax
.text:000089FF                 push    ecx             ; unsigned int
.text:00008A00                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00008A05                 add     esp, 4
.text:00008A08                 mov     [ebp+var_C], eax
.text:00008A0B                 mov     eax, [ebp+var_4]
.text:00008A0E                 mov     ecx, [ebp+var_C]
.text:00008A11                 mov     [eax], ecx
.text:00008A13                 mov     edx, [ebp+var_4]
.text:00008A16                 mov     eax, [ebp+arg_0]
.text:00008A19                 mov     [edx+8], eax
.text:00008A1C
.text:00008A1C loc_8A1C:                               ; CODE XREF: CRecordVector<uint>::ClearAndReserve(uint)+2Fj
.text:00008A1C                 add     esp, 0Ch
.text:00008A1F                 cmp     ebp, esp
.text:00008A21                 call    __RTC_CheckEsp
.text:00008A26                 mov     esp, ebp
.text:00008A28                 pop     ebp
.text:00008A29                 retn    4
.text:00008A29 ?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z endp
.text:00008A29
.text:00008A29 _text           ends
.text:00008A29
.text:00008A2C ; ===========================================================================
.text:00008A2C
.text:00008A2C ; Segment type: Pure code
.text:00008A2C ; Segment permissions: Read/Execute
.text:00008A2C _text           segment para public 'CODE' use32
.text:00008A2C                 assume cs:_text
.text:00008A2C                 ;org 8A2Ch
.text:00008A2C ; COMDAT (pick any)
.text:00008A2C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008A2C
.text:00008A2C ; =============== S U B R O U T I N E =======================================
.text:00008A2C
.text:00008A2C ; Attributes: bp-based frame
.text:00008A2C
.text:00008A2C ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(void)
.text:00008A2C                 public ??0?$CBuffer@E@@QAE@XZ
.text:00008A2C ??0?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::N7z::CCoderInfo::CCoderInfo(void)+14p
.text:00008A2C
.text:00008A2C var_4           = dword ptr -4
.text:00008A2C
.text:00008A2C                 push    ebp
.text:00008A2D                 mov     ebp, esp
.text:00008A2F                 push    ecx
.text:00008A30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008A37                 mov     [ebp+var_4], ecx
.text:00008A3A                 mov     eax, [ebp+var_4]
.text:00008A3D                 mov     dword ptr [eax], 0
.text:00008A43                 mov     ecx, [ebp+var_4]
.text:00008A46                 mov     dword ptr [ecx+4], 0
.text:00008A4D                 mov     eax, [ebp+var_4]
.text:00008A50                 mov     esp, ebp
.text:00008A52                 pop     ebp
.text:00008A53                 retn
.text:00008A53 ??0?$CBuffer@E@@QAE@XZ endp
.text:00008A53
.text:00008A53 _text           ends
.text:00008A53
.text:00008A54 ; ===========================================================================
.text:00008A54
.text:00008A54 ; Segment type: Pure code
.text:00008A54 ; Segment permissions: Read/Execute
.text:00008A54 _text           segment para public 'CODE' use32
.text:00008A54                 assume cs:_text
.text:00008A54                 ;org 8A54h
.text:00008A54 ; COMDAT (pick any)
.text:00008A54                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008A54
.text:00008A54 ; =============== S U B R O U T I N E =======================================
.text:00008A54
.text:00008A54 ; Attributes: bp-based frame
.text:00008A54
.text:00008A54 ; public: __thiscall CObjectVector<struct CProp>::CObjectVector<struct CProp>(class CObjectVector<struct CProp> const &)
.text:00008A54                 public ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.text:00008A54 ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z proc near
.text:00008A54                                         ; CODE XREF: CProps::CProps(CProps const &)+15p
.text:00008A54
.text:00008A54 var_24          = dword ptr -24h
.text:00008A54 var_20          = dword ptr -20h
.text:00008A54 var_1C          = dword ptr -1Ch
.text:00008A54 var_18          = dword ptr -18h
.text:00008A54 var_14          = dword ptr -14h
.text:00008A54 var_10          = dword ptr -10h
.text:00008A54 var_C           = dword ptr -0Ch
.text:00008A54 var_4           = dword ptr -4
.text:00008A54 arg_0           = dword ptr  8
.text:00008A54
.text:00008A54                 push    ebp
.text:00008A55                 mov     ebp, esp
.text:00008A57                 push    0FFFFFFFFh
.text:00008A59                 push    offset __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.text:00008A5E                 mov     eax, large fs:0
.text:00008A64                 push    eax
.text:00008A65                 sub     esp, 18h
.text:00008A68                 mov     eax, 0CCCCCCCCh
.text:00008A6D                 mov     [ebp+var_24], eax
.text:00008A70                 mov     [ebp+var_20], eax
.text:00008A73                 mov     [ebp+var_1C], eax
.text:00008A76                 mov     [ebp+var_18], eax
.text:00008A79                 mov     [ebp+var_14], eax
.text:00008A7C                 mov     [ebp+var_10], eax
.text:00008A7F                 mov     eax, dword ptr ds:___security_cookie
.text:00008A84                 xor     eax, ebp
.text:00008A86                 push    eax
.text:00008A87                 lea     eax, [ebp+var_C]
.text:00008A8A                 mov     large fs:0, eax
.text:00008A90                 mov     [ebp+var_10], ecx
.text:00008A93                 mov     ecx, [ebp+var_10]
.text:00008A96                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00008A9B                 mov     [ebp+var_4], 0
.text:00008AA2                 mov     ecx, [ebp+arg_0]
.text:00008AA5                 call    ?Size@?$CObjectVector@UCProp@@@@QBEIXZ ; CObjectVector<CProp>::Size(void)
.text:00008AAA                 mov     [ebp+var_14], eax
.text:00008AAD                 mov     eax, [ebp+var_14]
.text:00008AB0                 push    eax
.text:00008AB1                 mov     ecx, [ebp+var_10]
.text:00008AB4                 call    ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve(uint)
.text:00008AB9                 mov     [ebp+var_18], 0
.text:00008AC0                 jmp     short loc_8ACB
.text:00008AC2 ; ---------------------------------------------------------------------------
.text:00008AC2
.text:00008AC2 loc_8AC2:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+CDj
.text:00008AC2                 mov     ecx, [ebp+var_18]
.text:00008AC5                 add     ecx, 1
.text:00008AC8                 mov     [ebp+var_18], ecx
.text:00008ACB
.text:00008ACB loc_8ACB:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+6Cj
.text:00008ACB                 mov     edx, [ebp+var_18]
.text:00008ACE                 cmp     edx, [ebp+var_14]
.text:00008AD1                 jnb     short loc_8B23
.text:00008AD3                 push    18h             ; unsigned int
.text:00008AD5                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00008ADA                 add     esp, 4
.text:00008ADD                 mov     [ebp+var_20], eax
.text:00008AE0                 mov     byte ptr [ebp+var_4], 1
.text:00008AE4                 cmp     [ebp+var_20], 0
.text:00008AE8                 jz      short loc_8B04
.text:00008AEA                 mov     eax, [ebp+var_18]
.text:00008AED                 push    eax
.text:00008AEE                 mov     ecx, [ebp+arg_0]
.text:00008AF1                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:00008AF6                 push    eax             ; struct CProp *
.text:00008AF7                 mov     ecx, [ebp+var_20] ; this
.text:00008AFA                 call    ??0CProp@@QAE@ABU0@@Z ; CProp::CProp(CProp const &)
.text:00008AFF                 mov     [ebp+var_24], eax
.text:00008B02                 jmp     short loc_8B0B
.text:00008B04 ; ---------------------------------------------------------------------------
.text:00008B04
.text:00008B04 loc_8B04:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+94j
.text:00008B04                 mov     [ebp+var_24], 0
.text:00008B0B
.text:00008B0B loc_8B0B:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+AEj
.text:00008B0B                 mov     ecx, [ebp+var_24]
.text:00008B0E                 mov     [ebp+var_1C], ecx
.text:00008B11                 mov     byte ptr [ebp+var_4], 0
.text:00008B15                 mov     edx, [ebp+var_1C]
.text:00008B18                 push    edx
.text:00008B19                 mov     ecx, [ebp+var_10]
.text:00008B1C                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:00008B21                 jmp     short loc_8AC2
.text:00008B23 ; ---------------------------------------------------------------------------
.text:00008B23
.text:00008B23 loc_8B23:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+7Dj
.text:00008B23                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008B2A                 mov     eax, [ebp+var_10]
.text:00008B2D                 mov     ecx, [ebp+var_C]
.text:00008B30                 mov     large fs:0, ecx
.text:00008B37                 pop     ecx
.text:00008B38                 add     esp, 24h
.text:00008B3B                 cmp     ebp, esp
.text:00008B3D                 call    __RTC_CheckEsp
.text:00008B42                 mov     esp, ebp
.text:00008B44                 pop     ebp
.text:00008B45                 retn    4
.text:00008B45 ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z endp
.text:00008B45
.text:00008B45 _text           ends
.text:00008B45
.text$x:00008B48 ; ===========================================================================
.text$x:00008B48
.text$x:00008B48 ; Segment type: Pure code
.text$x:00008B48 ; Segment permissions: Read/Execute
.text$x:00008B48 _text$x         segment para public 'CODE' use32
.text$x:00008B48                 assume cs:_text$x
.text$x:00008B48                 ;org 8B48h
.text$x:00008B48 ; COMDAT (pick associative to section at 8A54)
.text$x:00008B48                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00008B48
.text$x:00008B48 ; =============== S U B R O U T I N E =======================================
.text$x:00008B48
.text$x:00008B48
.text$x:00008B48 __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0 proc near
.text$x:00008B48                                         ; DATA XREF: .xdata$x:00008B7Co
.text$x:00008B48                 mov     ecx, [ebp-10h]
.text$x:00008B4B                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00008B4B __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0 endp
.text$x:00008B4B
.text$x:00008B50
.text$x:00008B50 ; =============== S U B R O U T I N E =======================================
.text$x:00008B50
.text$x:00008B50
.text$x:00008B50 __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1 proc near
.text$x:00008B50                                         ; DATA XREF: .xdata$x:00008B84o
.text$x:00008B50                 mov     eax, [ebp-20h]
.text$x:00008B53                 push    eax             ; void *
.text$x:00008B54                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00008B59                 pop     ecx
.text$x:00008B5A                 retn
.text$x:00008B5A __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1 endp
.text$x:00008B5A
.text$x:00008B5B
.text$x:00008B5B ; =============== S U B R O U T I N E =======================================
.text$x:00008B5B
.text$x:00008B5B
.text$x:00008B5B __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z proc near
.text$x:00008B5B                                         ; DATA XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+5o
.text$x:00008B5B
.text$x:00008B5B arg_4           = dword ptr  8
.text$x:00008B5B
.text$x:00008B5B                 mov     edx, [esp+arg_4]
.text$x:00008B5F                 lea     eax, [edx+0Ch]
.text$x:00008B62                 mov     ecx, [edx-1Ch]
.text$x:00008B65                 xor     ecx, eax
.text$x:00008B67                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008B6C                 mov     eax, offset __ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.text$x:00008B71                 jmp     ___CxxFrameHandler3
.text$x:00008B71 __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z endp
.text$x:00008B71
.text$x:00008B71 ; ---------------------------------------------------------------------------
.text$x:00008B76                 align 4
.text$x:00008B76 _text$x         ends
.text$x:00008B76
.xdata$x:00008B78 ; ===========================================================================
.xdata$x:00008B78
.xdata$x:00008B78 ; Segment type: Pure data
.xdata$x:00008B78 ; Segment permissions: Read
.xdata$x:00008B78 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008B78                 assume cs:_xdata$x
.xdata$x:00008B78                 ;org 8B78h
.xdata$x:00008B78 ; COMDAT (pick associative to section at 8A54)
.xdata$x:00008B78 __unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z db 0FFh
.xdata$x:00008B78                                         ; DATA XREF: .xdata$x:00008B90o
.xdata$x:00008B79                 db 0FFh
.xdata$x:00008B7A                 db 0FFh
.xdata$x:00008B7B                 db 0FFh
.xdata$x:00008B7C                 dd offset __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0
.xdata$x:00008B80                 db    0
.xdata$x:00008B81                 db    0
.xdata$x:00008B82                 db    0
.xdata$x:00008B83                 db    0
.xdata$x:00008B84                 dd offset __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1
.xdata$x:00008B88 __ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z db  22h ; "
.xdata$x:00008B88                                         ; DATA XREF: __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z+11o
.xdata$x:00008B89                 db    5
.xdata$x:00008B8A                 db  93h ; ô
.xdata$x:00008B8B                 db  19h
.xdata$x:00008B8C                 db    2
.xdata$x:00008B8D                 db    0
.xdata$x:00008B8E                 db    0
.xdata$x:00008B8F                 db    0
.xdata$x:00008B90                 dd offset __unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.xdata$x:00008B94                 db    0
.xdata$x:00008B95                 db    0
.xdata$x:00008B96                 db    0
.xdata$x:00008B97                 db    0
.xdata$x:00008B98                 db    0
.xdata$x:00008B99                 db    0
.xdata$x:00008B9A                 db    0
.xdata$x:00008B9B                 db    0
.xdata$x:00008B9C                 db    0
.xdata$x:00008B9D                 db    0
.xdata$x:00008B9E                 db    0
.xdata$x:00008B9F                 db    0
.xdata$x:00008BA0                 db    0
.xdata$x:00008BA1                 db    0
.xdata$x:00008BA2                 db    0
.xdata$x:00008BA3                 db    0
.xdata$x:00008BA4                 db    0
.xdata$x:00008BA5                 db    0
.xdata$x:00008BA6                 db    0
.xdata$x:00008BA7                 db    0
.xdata$x:00008BA8                 db    1
.xdata$x:00008BA9                 db    0
.xdata$x:00008BAA                 db    0
.xdata$x:00008BAB                 db    0
.xdata$x:00008BAB _xdata$x        ends
.xdata$x:00008BAB
.text:00008BAC ; ===========================================================================
.text:00008BAC
.text:00008BAC ; Segment type: Pure code
.text:00008BAC ; Segment permissions: Read/Execute
.text:00008BAC _text           segment para public 'CODE' use32
.text:00008BAC                 assume cs:_text
.text:00008BAC                 ;org 8BACh
.text:00008BAC ; COMDAT (pick any)
.text:00008BAC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008BAC
.text:00008BAC ; =============== S U B R O U T I N E =======================================
.text:00008BAC
.text:00008BAC ; Attributes: bp-based frame
.text:00008BAC
.text:00008BAC ; public: struct NArchive::N7z::CMethodFull const & __thiscall CObjectVector<struct NArchive::N7z::CMethodFull>::operator[](unsigned int)const
.text:00008BAC                 public ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEABUCMethodFull@N7z@NArchive@@I@Z
.text:00008BAC ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEABUCMethodFull@N7z@NArchive@@I@Z proc near
.text:00008BAC                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::operator=(CObjectVector<NArchive::N7z::CMethodFull> const &)+A9p
.text:00008BAC
.text:00008BAC var_4           = dword ptr -4
.text:00008BAC arg_0           = dword ptr  8
.text:00008BAC
.text:00008BAC                 push    ebp
.text:00008BAD                 mov     ebp, esp
.text:00008BAF                 push    ecx
.text:00008BB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008BB7                 mov     [ebp+var_4], ecx
.text:00008BBA                 mov     eax, [ebp+arg_0]
.text:00008BBD                 push    eax
.text:00008BBE                 mov     ecx, [ebp+var_4]
.text:00008BC1                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00008BC6                 mov     eax, [eax]
.text:00008BC8                 add     esp, 4
.text:00008BCB                 cmp     ebp, esp
.text:00008BCD                 call    __RTC_CheckEsp
.text:00008BD2                 mov     esp, ebp
.text:00008BD4                 pop     ebp
.text:00008BD5                 retn    4
.text:00008BD5 ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEABUCMethodFull@N7z@NArchive@@I@Z endp
.text:00008BD5
.text:00008BD5 _text           ends
.text:00008BD5
.text:00008BD8 ; ===========================================================================
.text:00008BD8
.text:00008BD8 ; Segment type: Pure code
.text:00008BD8 ; Segment permissions: Read/Execute
.text:00008BD8 _text           segment para public 'CODE' use32
.text:00008BD8                 assume cs:_text
.text:00008BD8                 ;org 8BD8h
.text:00008BD8 ; COMDAT (pick any)
.text:00008BD8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008BD8
.text:00008BD8 ; =============== S U B R O U T I N E =======================================
.text:00008BD8
.text:00008BD8 ; Attributes: bp-based frame
.text:00008BD8
.text:00008BD8 ; public: void __thiscall CObjectVector<struct NArchive::N7z::CMethodFull>::Clear(void)
.text:00008BD8                 public ?Clear@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEXXZ
.text:00008BD8 ?Clear@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEXXZ proc near
.text:00008BD8                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::operator=(CObjectVector<NArchive::N7z::CMethodFull> const &)+52p
.text:00008BD8
.text:00008BD8 var_14          = dword ptr -14h
.text:00008BD8 var_10          = dword ptr -10h
.text:00008BD8 var_C           = dword ptr -0Ch
.text:00008BD8 var_8           = dword ptr -8
.text:00008BD8 var_4           = dword ptr -4
.text:00008BD8
.text:00008BD8                 push    ebp
.text:00008BD9                 mov     ebp, esp
.text:00008BDB                 sub     esp, 14h
.text:00008BDE                 mov     eax, 0CCCCCCCCh
.text:00008BE3                 mov     [ebp+var_14], eax
.text:00008BE6                 mov     [ebp+var_10], eax
.text:00008BE9                 mov     [ebp+var_C], eax
.text:00008BEC                 mov     [ebp+var_8], eax
.text:00008BEF                 mov     [ebp+var_4], eax
.text:00008BF2                 mov     [ebp+var_4], ecx
.text:00008BF5                 mov     ecx, [ebp+var_4]
.text:00008BF8                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00008BFD                 mov     [ebp+var_8], eax
.text:00008C00
.text:00008C00 loc_8C00:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::Clear(void):loc_8C42j
.text:00008C00                 cmp     [ebp+var_8], 0
.text:00008C04                 jz      short loc_8C44
.text:00008C06                 mov     eax, [ebp+var_8]
.text:00008C09                 sub     eax, 1
.text:00008C0C                 mov     [ebp+var_8], eax
.text:00008C0F                 mov     ecx, [ebp+var_8]
.text:00008C12                 push    ecx
.text:00008C13                 mov     ecx, [ebp+var_4]
.text:00008C16                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00008C1B                 mov     edx, [eax]
.text:00008C1D                 mov     [ebp+var_10], edx
.text:00008C20                 mov     eax, [ebp+var_10]
.text:00008C23                 mov     [ebp+var_C], eax
.text:00008C26                 cmp     [ebp+var_C], 0
.text:00008C2A                 jz      short loc_8C3B
.text:00008C2C                 push    1
.text:00008C2E                 mov     ecx, [ebp+var_C]
.text:00008C31                 call    ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CMethodFull::`scalar deleting destructor'(uint)
.text:00008C36                 mov     [ebp+var_14], eax
.text:00008C39                 jmp     short loc_8C42
.text:00008C3B ; ---------------------------------------------------------------------------
.text:00008C3B
.text:00008C3B loc_8C3B:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::Clear(void)+52j
.text:00008C3B                 mov     [ebp+var_14], 0
.text:00008C42
.text:00008C42 loc_8C42:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::Clear(void)+61j
.text:00008C42                 jmp     short loc_8C00
.text:00008C44 ; ---------------------------------------------------------------------------
.text:00008C44
.text:00008C44 loc_8C44:                               ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::Clear(void)+2Cj
.text:00008C44                 mov     ecx, [ebp+var_4]
.text:00008C47                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:00008C4C                 add     esp, 14h
.text:00008C4F                 cmp     ebp, esp
.text:00008C51                 call    __RTC_CheckEsp
.text:00008C56                 mov     esp, ebp
.text:00008C58                 pop     ebp
.text:00008C59                 retn
.text:00008C59 ?Clear@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEXXZ endp
.text:00008C59
.text:00008C59 ; ---------------------------------------------------------------------------
.text:00008C5A                 align 4
.text:00008C5A _text           ends
.text:00008C5A
.text:00008C5C ; ===========================================================================
.text:00008C5C
.text:00008C5C ; Segment type: Pure code
.text:00008C5C ; Segment permissions: Read/Execute
.text:00008C5C _text           segment para public 'CODE' use32
.text:00008C5C                 assume cs:_text
.text:00008C5C                 ;org 8C5Ch
.text:00008C5C ; COMDAT (pick any)
.text:00008C5C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008C5C
.text:00008C5C ; =============== S U B R O U T I N E =======================================
.text:00008C5C
.text:00008C5C ; Attributes: bp-based frame
.text:00008C5C
.text:00008C5C ; public: void __thiscall CRecordVector<void *>::Clear(void)
.text:00008C5C                 public ?Clear@?$CRecordVector@PAX@@QAEXXZ
.text:00008C5C ?Clear@?$CRecordVector@PAX@@QAEXXZ proc near
.text:00008C5C                                         ; CODE XREF: CObjectVector<NArchive::N7z::CMethodFull>::Clear(void)+6Fp
.text:00008C5C
.text:00008C5C var_4           = dword ptr -4
.text:00008C5C
.text:00008C5C                 push    ebp
.text:00008C5D                 mov     ebp, esp
.text:00008C5F                 push    ecx
.text:00008C60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008C67                 mov     [ebp+var_4], ecx
.text:00008C6A                 mov     eax, [ebp+var_4]
.text:00008C6D                 mov     dword ptr [eax+4], 0
.text:00008C74                 mov     esp, ebp
.text:00008C76                 pop     ebp
.text:00008C77                 retn
.text:00008C77 ?Clear@?$CRecordVector@PAX@@QAEXXZ endp
.text:00008C77
.text:00008C77 _text           ends
.text:00008C77
.text:00008C78 ; ===========================================================================
.text:00008C78
.text:00008C78 ; Segment type: Pure code
.text:00008C78 ; Segment permissions: Read/Execute
.text:00008C78 _text           segment para public 'CODE' use32
.text:00008C78                 assume cs:_text
.text:00008C78                 ;org 8C78h
.text:00008C78 ; COMDAT (pick any)
.text:00008C78                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008C78
.text:00008C78 ; =============== S U B R O U T I N E =======================================
.text:00008C78
.text:00008C78 ; Attributes: bp-based frame
.text:00008C78
.text:00008C78 ; private: void __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::ReserveOnePosition(void)
.text:00008C78                 public ?ReserveOnePosition@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@AAEXXZ
.text:00008C78 ?ReserveOnePosition@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@AAEXXZ proc near
.text:00008C78                                         ; CODE XREF: CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Add(NCoderMixer2::CCoderStreamsInfo)+1Ap
.text:00008C78
.text:00008C78 var_14          = dword ptr -14h
.text:00008C78 var_10          = dword ptr -10h
.text:00008C78 Dst             = dword ptr -0Ch
.text:00008C78 var_8           = dword ptr -8
.text:00008C78 var_4           = dword ptr -4
.text:00008C78
.text:00008C78                 push    ebp
.text:00008C79                 mov     ebp, esp
.text:00008C7B                 sub     esp, 14h
.text:00008C7E                 mov     eax, 0CCCCCCCCh
.text:00008C83                 mov     [ebp+var_14], eax
.text:00008C86                 mov     [ebp+var_10], eax
.text:00008C89                 mov     [ebp+Dst], eax
.text:00008C8C                 mov     [ebp+var_8], eax
.text:00008C8F                 mov     [ebp+var_4], eax
.text:00008C92                 mov     [ebp+var_4], ecx
.text:00008C95                 mov     eax, [ebp+var_4]
.text:00008C98                 mov     ecx, [ebp+var_4]
.text:00008C9B                 mov     edx, [eax+4]
.text:00008C9E                 cmp     edx, [ecx+8]
.text:00008CA1                 jnz     loc_8D2C
.text:00008CA7                 mov     eax, [ebp+var_4]
.text:00008CAA                 mov     ecx, [eax+8]
.text:00008CAD                 shr     ecx, 2
.text:00008CB0                 mov     edx, [ebp+var_4]
.text:00008CB3                 mov     eax, [edx+8]
.text:00008CB6                 lea     ecx, [eax+ecx+1]
.text:00008CBA                 mov     [ebp+var_8], ecx
.text:00008CBD                 xor     ecx, ecx
.text:00008CBF                 mov     eax, [ebp+var_8]
.text:00008CC2                 mov     edx, 4
.text:00008CC7                 mul     edx
.text:00008CC9                 seto    cl
.text:00008CCC                 neg     ecx
.text:00008CCE                 or      ecx, eax
.text:00008CD0                 push    ecx             ; unsigned int
.text:00008CD1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00008CD6                 add     esp, 4
.text:00008CD9                 mov     [ebp+var_10], eax
.text:00008CDC                 mov     eax, [ebp+var_10]
.text:00008CDF                 mov     [ebp+Dst], eax
.text:00008CE2                 mov     ecx, [ebp+var_4]
.text:00008CE5                 cmp     dword ptr [ecx+4], 0
.text:00008CE9                 jz      short loc_8D07
.text:00008CEB                 mov     edx, [ebp+var_4]
.text:00008CEE                 mov     eax, [edx+4]
.text:00008CF1                 shl     eax, 2
.text:00008CF4                 push    eax             ; Size
.text:00008CF5                 mov     ecx, [ebp+var_4]
.text:00008CF8                 mov     edx, [ecx]
.text:00008CFA                 push    edx             ; Src
.text:00008CFB                 mov     eax, [ebp+Dst]
.text:00008CFE                 push    eax             ; Dst
.text:00008CFF                 call    _memcpy
.text:00008D04                 add     esp, 0Ch
.text:00008D07
.text:00008D07 loc_8D07:                               ; CODE XREF: CRecordVector<NCoderMixer2::CCoderStreamsInfo>::ReserveOnePosition(void)+71j
.text:00008D07                 mov     ecx, [ebp+var_4]
.text:00008D0A                 mov     edx, [ecx]
.text:00008D0C                 mov     [ebp+var_14], edx
.text:00008D0F                 mov     eax, [ebp+var_14]
.text:00008D12                 push    eax             ; void *
.text:00008D13                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008D18                 add     esp, 4
.text:00008D1B                 mov     ecx, [ebp+var_4]
.text:00008D1E                 mov     edx, [ebp+Dst]
.text:00008D21                 mov     [ecx], edx
.text:00008D23                 mov     eax, [ebp+var_4]
.text:00008D26                 mov     ecx, [ebp+var_8]
.text:00008D29                 mov     [eax+8], ecx
.text:00008D2C
.text:00008D2C loc_8D2C:                               ; CODE XREF: CRecordVector<NCoderMixer2::CCoderStreamsInfo>::ReserveOnePosition(void)+29j
.text:00008D2C                 add     esp, 14h
.text:00008D2F                 cmp     ebp, esp
.text:00008D31                 call    __RTC_CheckEsp
.text:00008D36                 mov     esp, ebp
.text:00008D38                 pop     ebp
.text:00008D39                 retn
.text:00008D39 ?ReserveOnePosition@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@AAEXXZ endp
.text:00008D39
.text:00008D39 ; ---------------------------------------------------------------------------
.text:00008D3A                 align 4
.text:00008D3A _text           ends
.text:00008D3A
.text:00008D3C ; ===========================================================================
.text:00008D3C
.text:00008D3C ; Segment type: Pure code
.text:00008D3C ; Segment permissions: Read/Execute
.text:00008D3C _text           segment para public 'CODE' use32
.text:00008D3C                 assume cs:_text
.text:00008D3C                 ;org 8D3Ch
.text:00008D3C ; COMDAT (pick any)
.text:00008D3C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008D3C
.text:00008D3C ; =============== S U B R O U T I N E =======================================
.text:00008D3C
.text:00008D3C ; Attributes: bp-based frame
.text:00008D3C
.text:00008D3C ; private: void __thiscall CRecordVector<struct NCoderMixer2::CBond>::ReserveOnePosition(void)
.text:00008D3C                 public ?ReserveOnePosition@?$CRecordVector@UCBond@NCoderMixer2@@@@AAEXXZ
.text:00008D3C ?ReserveOnePosition@?$CRecordVector@UCBond@NCoderMixer2@@@@AAEXXZ proc near
.text:00008D3C                                         ; CODE XREF: CRecordVector<NCoderMixer2::CBond>::Add(NCoderMixer2::CBond)+1Ap
.text:00008D3C
.text:00008D3C var_14          = dword ptr -14h
.text:00008D3C var_10          = dword ptr -10h
.text:00008D3C Dst             = dword ptr -0Ch
.text:00008D3C var_8           = dword ptr -8
.text:00008D3C var_4           = dword ptr -4
.text:00008D3C
.text:00008D3C                 push    ebp
.text:00008D3D                 mov     ebp, esp
.text:00008D3F                 sub     esp, 14h
.text:00008D42                 mov     eax, 0CCCCCCCCh
.text:00008D47                 mov     [ebp+var_14], eax
.text:00008D4A                 mov     [ebp+var_10], eax
.text:00008D4D                 mov     [ebp+Dst], eax
.text:00008D50                 mov     [ebp+var_8], eax
.text:00008D53                 mov     [ebp+var_4], eax
.text:00008D56                 mov     [ebp+var_4], ecx
.text:00008D59                 mov     eax, [ebp+var_4]
.text:00008D5C                 mov     ecx, [ebp+var_4]
.text:00008D5F                 mov     edx, [eax+4]
.text:00008D62                 cmp     edx, [ecx+8]
.text:00008D65                 jnz     loc_8DF0
.text:00008D6B                 mov     eax, [ebp+var_4]
.text:00008D6E                 mov     ecx, [eax+8]
.text:00008D71                 shr     ecx, 2
.text:00008D74                 mov     edx, [ebp+var_4]
.text:00008D77                 mov     eax, [edx+8]
.text:00008D7A                 lea     ecx, [eax+ecx+1]
.text:00008D7E                 mov     [ebp+var_8], ecx
.text:00008D81                 xor     ecx, ecx
.text:00008D83                 mov     eax, [ebp+var_8]
.text:00008D86                 mov     edx, 8
.text:00008D8B                 mul     edx
.text:00008D8D                 seto    cl
.text:00008D90                 neg     ecx
.text:00008D92                 or      ecx, eax
.text:00008D94                 push    ecx             ; unsigned int
.text:00008D95                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00008D9A                 add     esp, 4
.text:00008D9D                 mov     [ebp+var_10], eax
.text:00008DA0                 mov     eax, [ebp+var_10]
.text:00008DA3                 mov     [ebp+Dst], eax
.text:00008DA6                 mov     ecx, [ebp+var_4]
.text:00008DA9                 cmp     dword ptr [ecx+4], 0
.text:00008DAD                 jz      short loc_8DCB
.text:00008DAF                 mov     edx, [ebp+var_4]
.text:00008DB2                 mov     eax, [edx+4]
.text:00008DB5                 shl     eax, 3
.text:00008DB8                 push    eax             ; Size
.text:00008DB9                 mov     ecx, [ebp+var_4]
.text:00008DBC                 mov     edx, [ecx]
.text:00008DBE                 push    edx             ; Src
.text:00008DBF                 mov     eax, [ebp+Dst]
.text:00008DC2                 push    eax             ; Dst
.text:00008DC3                 call    _memcpy
.text:00008DC8                 add     esp, 0Ch
.text:00008DCB
.text:00008DCB loc_8DCB:                               ; CODE XREF: CRecordVector<NCoderMixer2::CBond>::ReserveOnePosition(void)+71j
.text:00008DCB                 mov     ecx, [ebp+var_4]
.text:00008DCE                 mov     edx, [ecx]
.text:00008DD0                 mov     [ebp+var_14], edx
.text:00008DD3                 mov     eax, [ebp+var_14]
.text:00008DD6                 push    eax             ; void *
.text:00008DD7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008DDC                 add     esp, 4
.text:00008DDF                 mov     ecx, [ebp+var_4]
.text:00008DE2                 mov     edx, [ebp+Dst]
.text:00008DE5                 mov     [ecx], edx
.text:00008DE7                 mov     eax, [ebp+var_4]
.text:00008DEA                 mov     ecx, [ebp+var_8]
.text:00008DED                 mov     [eax+8], ecx
.text:00008DF0
.text:00008DF0 loc_8DF0:                               ; CODE XREF: CRecordVector<NCoderMixer2::CBond>::ReserveOnePosition(void)+29j
.text:00008DF0                 add     esp, 14h
.text:00008DF3                 cmp     ebp, esp
.text:00008DF5                 call    __RTC_CheckEsp
.text:00008DFA                 mov     esp, ebp
.text:00008DFC                 pop     ebp
.text:00008DFD                 retn
.text:00008DFD ?ReserveOnePosition@?$CRecordVector@UCBond@NCoderMixer2@@@@AAEXXZ endp
.text:00008DFD
.text:00008DFD ; ---------------------------------------------------------------------------
.text:00008DFE                 align 10h
.text:00008DFE _text           ends
.text:00008DFE
.text:00008E00 ; ===========================================================================
.text:00008E00
.text:00008E00 ; Segment type: Pure code
.text:00008E00 ; Segment permissions: Read/Execute
.text:00008E00 _text           segment para public 'CODE' use32
.text:00008E00                 assume cs:_text
.text:00008E00                 ;org 8E00h
.text:00008E00 ; COMDAT (pick any)
.text:00008E00                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008E00
.text:00008E00 ; =============== S U B R O U T I N E =======================================
.text:00008E00
.text:00008E00 ; Attributes: bp-based frame
.text:00008E00
.text:00008E00 ; private: void __thiscall CRecordVector<unsigned __int64>::ReserveOnePosition(void)
.text:00008E00                 public ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ
.text:00008E00 ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ proc near
.text:00008E00                                         ; CODE XREF: CRecordVector<unsigned __int64>::Add(unsigned __int64)+1Ap
.text:00008E00
.text:00008E00 var_14          = dword ptr -14h
.text:00008E00 var_10          = dword ptr -10h
.text:00008E00 Dst             = dword ptr -0Ch
.text:00008E00 var_8           = dword ptr -8
.text:00008E00 var_4           = dword ptr -4
.text:00008E00
.text:00008E00                 push    ebp
.text:00008E01                 mov     ebp, esp
.text:00008E03                 sub     esp, 14h
.text:00008E06                 mov     eax, 0CCCCCCCCh
.text:00008E0B                 mov     [ebp+var_14], eax
.text:00008E0E                 mov     [ebp+var_10], eax
.text:00008E11                 mov     [ebp+Dst], eax
.text:00008E14                 mov     [ebp+var_8], eax
.text:00008E17                 mov     [ebp+var_4], eax
.text:00008E1A                 mov     [ebp+var_4], ecx
.text:00008E1D                 mov     eax, [ebp+var_4]
.text:00008E20                 mov     ecx, [ebp+var_4]
.text:00008E23                 mov     edx, [eax+4]
.text:00008E26                 cmp     edx, [ecx+8]
.text:00008E29                 jnz     loc_8EB4
.text:00008E2F                 mov     eax, [ebp+var_4]
.text:00008E32                 mov     ecx, [eax+8]
.text:00008E35                 shr     ecx, 2
.text:00008E38                 mov     edx, [ebp+var_4]
.text:00008E3B                 mov     eax, [edx+8]
.text:00008E3E                 lea     ecx, [eax+ecx+1]
.text:00008E42                 mov     [ebp+var_8], ecx
.text:00008E45                 xor     ecx, ecx
.text:00008E47                 mov     eax, [ebp+var_8]
.text:00008E4A                 mov     edx, 8
.text:00008E4F                 mul     edx
.text:00008E51                 seto    cl
.text:00008E54                 neg     ecx
.text:00008E56                 or      ecx, eax
.text:00008E58                 push    ecx             ; unsigned int
.text:00008E59                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00008E5E                 add     esp, 4
.text:00008E61                 mov     [ebp+var_10], eax
.text:00008E64                 mov     eax, [ebp+var_10]
.text:00008E67                 mov     [ebp+Dst], eax
.text:00008E6A                 mov     ecx, [ebp+var_4]
.text:00008E6D                 cmp     dword ptr [ecx+4], 0
.text:00008E71                 jz      short loc_8E8F
.text:00008E73                 mov     edx, [ebp+var_4]
.text:00008E76                 mov     eax, [edx+4]
.text:00008E79                 shl     eax, 3
.text:00008E7C                 push    eax             ; Size
.text:00008E7D                 mov     ecx, [ebp+var_4]
.text:00008E80                 mov     edx, [ecx]
.text:00008E82                 push    edx             ; Src
.text:00008E83                 mov     eax, [ebp+Dst]
.text:00008E86                 push    eax             ; Dst
.text:00008E87                 call    _memcpy
.text:00008E8C                 add     esp, 0Ch
.text:00008E8F
.text:00008E8F loc_8E8F:                               ; CODE XREF: CRecordVector<unsigned __int64>::ReserveOnePosition(void)+71j
.text:00008E8F                 mov     ecx, [ebp+var_4]
.text:00008E92                 mov     edx, [ecx]
.text:00008E94                 mov     [ebp+var_14], edx
.text:00008E97                 mov     eax, [ebp+var_14]
.text:00008E9A                 push    eax             ; void *
.text:00008E9B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008EA0                 add     esp, 4
.text:00008EA3                 mov     ecx, [ebp+var_4]
.text:00008EA6                 mov     edx, [ebp+Dst]
.text:00008EA9                 mov     [ecx], edx
.text:00008EAB                 mov     eax, [ebp+var_4]
.text:00008EAE                 mov     ecx, [ebp+var_8]
.text:00008EB1                 mov     [eax+8], ecx
.text:00008EB4
.text:00008EB4 loc_8EB4:                               ; CODE XREF: CRecordVector<unsigned __int64>::ReserveOnePosition(void)+29j
.text:00008EB4                 add     esp, 14h
.text:00008EB7                 cmp     ebp, esp
.text:00008EB9                 call    __RTC_CheckEsp
.text:00008EBE                 mov     esp, ebp
.text:00008EC0                 pop     ebp
.text:00008EC1                 retn
.text:00008EC1 ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ endp
.text:00008EC1
.text:00008EC1 ; ---------------------------------------------------------------------------
.text:00008EC2                 align 4
.text:00008EC2 _text           ends
.text:00008EC2
.text:00008EC4 ; ===========================================================================
.text:00008EC4
.text:00008EC4 ; Segment type: Pure code
.text:00008EC4 ; Segment permissions: Read/Execute
.text:00008EC4 _text           segment para public 'CODE' use32
.text:00008EC4                 assume cs:_text
.text:00008EC4                 ;org 8EC4h
.text:00008EC4 ; COMDAT (pick any)
.text:00008EC4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008EC4
.text:00008EC4 ; =============== S U B R O U T I N E =======================================
.text:00008EC4
.text:00008EC4 ; Attributes: bp-based frame
.text:00008EC4
.text:00008EC4 ; private: void __thiscall CRecordVector<struct ISequentialOutStream *>::ReserveOnePosition(void)
.text:00008EC4                 public ?ReserveOnePosition@?$CRecordVector@PAUISequentialOutStream@@@@AAEXXZ
.text:00008EC4 ?ReserveOnePosition@?$CRecordVector@PAUISequentialOutStream@@@@AAEXXZ proc near
.text:00008EC4                                         ; CODE XREF: CRecordVector<ISequentialOutStream *>::Add(ISequentialOutStream * const)+1Ap
.text:00008EC4
.text:00008EC4 var_14          = dword ptr -14h
.text:00008EC4 var_10          = dword ptr -10h
.text:00008EC4 Dst             = dword ptr -0Ch
.text:00008EC4 var_8           = dword ptr -8
.text:00008EC4 var_4           = dword ptr -4
.text:00008EC4
.text:00008EC4                 push    ebp
.text:00008EC5                 mov     ebp, esp
.text:00008EC7                 sub     esp, 14h
.text:00008ECA                 mov     eax, 0CCCCCCCCh
.text:00008ECF                 mov     [ebp+var_14], eax
.text:00008ED2                 mov     [ebp+var_10], eax
.text:00008ED5                 mov     [ebp+Dst], eax
.text:00008ED8                 mov     [ebp+var_8], eax
.text:00008EDB                 mov     [ebp+var_4], eax
.text:00008EDE                 mov     [ebp+var_4], ecx
.text:00008EE1                 mov     eax, [ebp+var_4]
.text:00008EE4                 mov     ecx, [ebp+var_4]
.text:00008EE7                 mov     edx, [eax+4]
.text:00008EEA                 cmp     edx, [ecx+8]
.text:00008EED                 jnz     loc_8F78
.text:00008EF3                 mov     eax, [ebp+var_4]
.text:00008EF6                 mov     ecx, [eax+8]
.text:00008EF9                 shr     ecx, 2
.text:00008EFC                 mov     edx, [ebp+var_4]
.text:00008EFF                 mov     eax, [edx+8]
.text:00008F02                 lea     ecx, [eax+ecx+1]
.text:00008F06                 mov     [ebp+var_8], ecx
.text:00008F09                 xor     ecx, ecx
.text:00008F0B                 mov     eax, [ebp+var_8]
.text:00008F0E                 mov     edx, 4
.text:00008F13                 mul     edx
.text:00008F15                 seto    cl
.text:00008F18                 neg     ecx
.text:00008F1A                 or      ecx, eax
.text:00008F1C                 push    ecx             ; unsigned int
.text:00008F1D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00008F22                 add     esp, 4
.text:00008F25                 mov     [ebp+var_10], eax
.text:00008F28                 mov     eax, [ebp+var_10]
.text:00008F2B                 mov     [ebp+Dst], eax
.text:00008F2E                 mov     ecx, [ebp+var_4]
.text:00008F31                 cmp     dword ptr [ecx+4], 0
.text:00008F35                 jz      short loc_8F53
.text:00008F37                 mov     edx, [ebp+var_4]
.text:00008F3A                 mov     eax, [edx+4]
.text:00008F3D                 shl     eax, 2
.text:00008F40                 push    eax             ; Size
.text:00008F41                 mov     ecx, [ebp+var_4]
.text:00008F44                 mov     edx, [ecx]
.text:00008F46                 push    edx             ; Src
.text:00008F47                 mov     eax, [ebp+Dst]
.text:00008F4A                 push    eax             ; Dst
.text:00008F4B                 call    _memcpy
.text:00008F50                 add     esp, 0Ch
.text:00008F53
.text:00008F53 loc_8F53:                               ; CODE XREF: CRecordVector<ISequentialOutStream *>::ReserveOnePosition(void)+71j
.text:00008F53                 mov     ecx, [ebp+var_4]
.text:00008F56                 mov     edx, [ecx]
.text:00008F58                 mov     [ebp+var_14], edx
.text:00008F5B                 mov     eax, [ebp+var_14]
.text:00008F5E                 push    eax             ; void *
.text:00008F5F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008F64                 add     esp, 4
.text:00008F67                 mov     ecx, [ebp+var_4]
.text:00008F6A                 mov     edx, [ebp+Dst]
.text:00008F6D                 mov     [ecx], edx
.text:00008F6F                 mov     eax, [ebp+var_4]
.text:00008F72                 mov     ecx, [ebp+var_8]
.text:00008F75                 mov     [eax+8], ecx
.text:00008F78
.text:00008F78 loc_8F78:                               ; CODE XREF: CRecordVector<ISequentialOutStream *>::ReserveOnePosition(void)+29j
.text:00008F78                 add     esp, 14h
.text:00008F7B                 cmp     ebp, esp
.text:00008F7D                 call    __RTC_CheckEsp
.text:00008F82                 mov     esp, ebp
.text:00008F84                 pop     ebp
.text:00008F85                 retn
.text:00008F85 ?ReserveOnePosition@?$CRecordVector@PAUISequentialOutStream@@@@AAEXXZ endp
.text:00008F85
.text:00008F85 ; ---------------------------------------------------------------------------
.text:00008F86                 align 4
.text:00008F86 _text           ends
.text:00008F86
.text:00008F88 ; ===========================================================================
.text:00008F88
.text:00008F88 ; Segment type: Pure code
.text:00008F88 ; Segment permissions: Read/Execute
.text:00008F88 _text           segment para public 'CODE' use32
.text:00008F88                 assume cs:_text
.text:00008F88                 ;org 8F88h
.text:00008F88 ; COMDAT (pick any)
.text:00008F88                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008F88
.text:00008F88 ; =============== S U B R O U T I N E =======================================
.text:00008F88
.text:00008F88 ; Attributes: bp-based frame
.text:00008F88
.text:00008F88 ; _DWORD __thiscall CProp::CProp(CProp *this, const struct CProp *)
.text:00008F88                 public ??0CProp@@QAE@ABU0@@Z
.text:00008F88 ??0CProp@@QAE@ABU0@@Z proc near         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+A6p
.text:00008F88
.text:00008F88 var_4           = dword ptr -4
.text:00008F88 arg_0           = dword ptr  8
.text:00008F88
.text:00008F88                 push    ebp
.text:00008F89                 mov     ebp, esp
.text:00008F8B                 push    ecx
.text:00008F8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008F93                 mov     [ebp+var_4], ecx
.text:00008F96                 mov     eax, [ebp+var_4]
.text:00008F99                 mov     ecx, [ebp+arg_0]
.text:00008F9C                 mov     edx, [ecx]
.text:00008F9E                 mov     [eax], edx
.text:00008FA0                 mov     eax, [ebp+var_4]
.text:00008FA3                 mov     ecx, [ebp+arg_0]
.text:00008FA6                 mov     dl, [ecx+4]
.text:00008FA9                 mov     [eax+4], dl
.text:00008FAC                 mov     eax, [ebp+arg_0]
.text:00008FAF                 add     eax, 8
.text:00008FB2                 push    eax             ; struct NWindows::NCOM::CPropVariant *
.text:00008FB3                 mov     ecx, [ebp+var_4]
.text:00008FB6                 add     ecx, 8          ; this
.text:00008FB9                 call    ??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z ; NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant const &)
.text:00008FBE                 mov     eax, [ebp+var_4]
.text:00008FC1                 add     esp, 4
.text:00008FC4                 cmp     ebp, esp
.text:00008FC6                 call    __RTC_CheckEsp
.text:00008FCB                 mov     esp, ebp
.text:00008FCD                 pop     ebp
.text:00008FCE                 retn    4
.text:00008FCE ??0CProp@@QAE@ABU0@@Z endp
.text:00008FCE
.text:00008FCE ; ---------------------------------------------------------------------------
.text:00008FD1                 align 4
.text:00008FD1 _text           ends
.text:00008FD1
.text:00008FD4 ; ===========================================================================
.text:00008FD4
.text:00008FD4 ; Segment type: Pure code
.text:00008FD4 ; Segment permissions: Read/Execute
.text:00008FD4 _text           segment para public 'CODE' use32
.text:00008FD4                 assume cs:_text
.text:00008FD4                 ;org 8FD4h
.text:00008FD4 ; COMDAT (pick any)
.text:00008FD4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00008FD4
.text:00008FD4 ; =============== S U B R O U T I N E =======================================
.text:00008FD4
.text:00008FD4 ; Attributes: bp-based frame
.text:00008FD4
.text:00008FD4 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:00008FD4                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:00008FD4 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:00008FD4                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:00008FD4
.text:00008FD4 var_14          = dword ptr -14h
.text:00008FD4 var_10          = dword ptr -10h
.text:00008FD4 Dst             = dword ptr -0Ch
.text:00008FD4 var_8           = dword ptr -8
.text:00008FD4 var_4           = dword ptr -4
.text:00008FD4
.text:00008FD4                 push    ebp
.text:00008FD5                 mov     ebp, esp
.text:00008FD7                 sub     esp, 14h
.text:00008FDA                 mov     eax, 0CCCCCCCCh
.text:00008FDF                 mov     [ebp+var_14], eax
.text:00008FE2                 mov     [ebp+var_10], eax
.text:00008FE5                 mov     [ebp+Dst], eax
.text:00008FE8                 mov     [ebp+var_8], eax
.text:00008FEB                 mov     [ebp+var_4], eax
.text:00008FEE                 mov     [ebp+var_4], ecx
.text:00008FF1                 mov     eax, [ebp+var_4]
.text:00008FF4                 mov     ecx, [ebp+var_4]
.text:00008FF7                 mov     edx, [eax+4]
.text:00008FFA                 cmp     edx, [ecx+8]
.text:00008FFD                 jnz     loc_9088
.text:00009003                 mov     eax, [ebp+var_4]
.text:00009006                 mov     ecx, [eax+8]
.text:00009009                 shr     ecx, 2
.text:0000900C                 mov     edx, [ebp+var_4]
.text:0000900F                 mov     eax, [edx+8]
.text:00009012                 lea     ecx, [eax+ecx+1]
.text:00009016                 mov     [ebp+var_8], ecx
.text:00009019                 xor     ecx, ecx
.text:0000901B                 mov     eax, [ebp+var_8]
.text:0000901E                 mov     edx, 4
.text:00009023                 mul     edx
.text:00009025                 seto    cl
.text:00009028                 neg     ecx
.text:0000902A                 or      ecx, eax
.text:0000902C                 push    ecx             ; unsigned int
.text:0000902D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00009032                 add     esp, 4
.text:00009035                 mov     [ebp+var_10], eax
.text:00009038                 mov     eax, [ebp+var_10]
.text:0000903B                 mov     [ebp+Dst], eax
.text:0000903E                 mov     ecx, [ebp+var_4]
.text:00009041                 cmp     dword ptr [ecx+4], 0
.text:00009045                 jz      short loc_9063
.text:00009047                 mov     edx, [ebp+var_4]
.text:0000904A                 mov     eax, [edx+4]
.text:0000904D                 shl     eax, 2
.text:00009050                 push    eax             ; Size
.text:00009051                 mov     ecx, [ebp+var_4]
.text:00009054                 mov     edx, [ecx]
.text:00009056                 push    edx             ; Src
.text:00009057                 mov     eax, [ebp+Dst]
.text:0000905A                 push    eax             ; Dst
.text:0000905B                 call    _memcpy
.text:00009060                 add     esp, 0Ch
.text:00009063
.text:00009063 loc_9063:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:00009063                 mov     ecx, [ebp+var_4]
.text:00009066                 mov     edx, [ecx]
.text:00009068                 mov     [ebp+var_14], edx
.text:0000906B                 mov     eax, [ebp+var_14]
.text:0000906E                 push    eax             ; void *
.text:0000906F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00009074                 add     esp, 4
.text:00009077                 mov     ecx, [ebp+var_4]
.text:0000907A                 mov     edx, [ebp+Dst]
.text:0000907D                 mov     [ecx], edx
.text:0000907F                 mov     eax, [ebp+var_4]
.text:00009082                 mov     ecx, [ebp+var_8]
.text:00009085                 mov     [eax+8], ecx
.text:00009088
.text:00009088 loc_9088:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:00009088                 add     esp, 14h
.text:0000908B                 cmp     ebp, esp
.text:0000908D                 call    __RTC_CheckEsp
.text:00009092                 mov     esp, ebp
.text:00009094                 pop     ebp
.text:00009095                 retn
.text:00009095 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:00009095
.text:00009095 ; ---------------------------------------------------------------------------
.text:00009096                 align 4
.text:00009096 _text           ends
.text:00009096
.text:00009098 ; ===========================================================================
.text:00009098
.text:00009098 ; Segment type: Pure code
.text:00009098 ; Segment permissions: Read/Execute
.text:00009098 _text           segment para public 'CODE' use32
.text:00009098                 assume cs:_text
.text:00009098                 ;org 9098h
.text:00009098 ; COMDAT (pick any)
.text:00009098                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009098
.text:00009098 ; =============== S U B R O U T I N E =======================================
.text:00009098
.text:00009098 ; Attributes: bp-based frame
.text:00009098
.text:00009098 ; public: void __thiscall CRecordVector<void *>::ConstructReserve(unsigned int)
.text:00009098                 public ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
.text:00009098 ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:00009098                                         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+60p
.text:00009098
.text:00009098 var_8           = dword ptr -8
.text:00009098 var_4           = dword ptr -4
.text:00009098 arg_0           = dword ptr  8
.text:00009098
.text:00009098                 push    ebp
.text:00009099                 mov     ebp, esp
.text:0000909B                 sub     esp, 8
.text:0000909E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000090A5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000090AC                 mov     [ebp+var_4], ecx
.text:000090AF                 cmp     [ebp+arg_0], 0
.text:000090B3                 jz      short loc_90E5
.text:000090B5                 xor     ecx, ecx
.text:000090B7                 mov     eax, [ebp+arg_0]
.text:000090BA                 mov     edx, 4
.text:000090BF                 mul     edx
.text:000090C1                 seto    cl
.text:000090C4                 neg     ecx
.text:000090C6                 or      ecx, eax
.text:000090C8                 push    ecx             ; unsigned int
.text:000090C9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000090CE                 add     esp, 4
.text:000090D1                 mov     [ebp+var_8], eax
.text:000090D4                 mov     eax, [ebp+var_4]
.text:000090D7                 mov     ecx, [ebp+var_8]
.text:000090DA                 mov     [eax], ecx
.text:000090DC                 mov     edx, [ebp+var_4]
.text:000090DF                 mov     eax, [ebp+arg_0]
.text:000090E2                 mov     [edx+8], eax
.text:000090E5
.text:000090E5 loc_90E5:                               ; CODE XREF: CRecordVector<void *>::ConstructReserve(uint)+1Bj
.text:000090E5                 add     esp, 8
.text:000090E8                 cmp     ebp, esp
.text:000090EA                 call    __RTC_CheckEsp
.text:000090EF                 mov     esp, ebp
.text:000090F1                 pop     ebp
.text:000090F2                 retn    4
.text:000090F2 ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z endp
.text:000090F2
.text:000090F2 ; ---------------------------------------------------------------------------
.text:000090F5                 align 4
.text:000090F5 _text           ends
.text:000090F5
.text:000090F8 ; ===========================================================================
.text:000090F8
.text:000090F8 ; Segment type: Pure code
.text:000090F8 ; Segment permissions: Read/Execute
.text:000090F8 _text           segment para public 'CODE' use32
.text:000090F8                 assume cs:_text
.text:000090F8                 ;org 90F8h
.text:000090F8 ; COMDAT (pick any)
.text:000090F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000090F8
.text:000090F8 ; =============== S U B R O U T I N E =======================================
.text:000090F8
.text:000090F8 ; Attributes: bp-based frame
.text:000090F8
.text:000090F8 ; public: long __thiscall CMyComPtr<struct ISequentialInStream>::QueryInterface<struct ICompressGetSubStreamSize>(struct _GUID const &, struct ICompressGetSubStreamSize * *)const
.text:000090F8                 public ??$QueryInterface@UICompressGetSubStreamSize@@@?$CMyComPtr@UISequentialInStream@@@@QBEJABU_GUID@@PAPAUICompressGetSubStreamSize@@@Z
.text:000090F8 ??$QueryInterface@UICompressGetSubStreamSize@@@?$CMyComPtr@UISequentialInStream@@@@QBEJABU_GUID@@PAPAUICompressGetSubStreamSize@@@Z proc near
.text:000090F8                                         ; CODE XREF: CSequentialInStreamSizeCount2::Init(ISequentialInStream *)+50p
.text:000090F8
.text:000090F8 var_4           = dword ptr -4
.text:000090F8 arg_0           = dword ptr  8
.text:000090F8 arg_4           = dword ptr  0Ch
.text:000090F8
.text:000090F8                 push    ebp
.text:000090F9                 mov     ebp, esp
.text:000090FB                 push    ecx
.text:000090FC                 push    esi
.text:000090FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009104                 mov     [ebp+var_4], ecx
.text:00009107                 mov     esi, esp
.text:00009109                 mov     eax, [ebp+arg_4]
.text:0000910C                 push    eax
.text:0000910D                 mov     ecx, [ebp+arg_0]
.text:00009110                 push    ecx
.text:00009111                 mov     edx, [ebp+var_4]
.text:00009114                 mov     eax, [edx]
.text:00009116                 mov     ecx, [ebp+var_4]
.text:00009119                 mov     edx, [ecx]
.text:0000911B                 mov     eax, [eax]
.text:0000911D                 push    edx
.text:0000911E                 mov     ecx, [eax]
.text:00009120                 call    ecx
.text:00009122                 cmp     esi, esp
.text:00009124                 call    __RTC_CheckEsp
.text:00009129                 pop     esi
.text:0000912A                 add     esp, 4
.text:0000912D                 cmp     ebp, esp
.text:0000912F                 call    __RTC_CheckEsp
.text:00009134                 mov     esp, ebp
.text:00009136                 pop     ebp
.text:00009137                 retn    8
.text:00009137 ??$QueryInterface@UICompressGetSubStreamSize@@@?$CMyComPtr@UISequentialInStream@@@@QBEJABU_GUID@@PAPAUICompressGetSubStreamSize@@@Z endp
.text:00009137
.text:00009137 ; ---------------------------------------------------------------------------
.text:0000913A                 align 4
.text:0000913A _text           ends
.text:0000913A
.text:0000913C ; ===========================================================================
.text:0000913C
.text:0000913C ; Segment type: Pure code
.text:0000913C ; Segment permissions: Read/Execute
.text:0000913C _text           segment para public 'CODE' use32
.text:0000913C                 assume cs:_text
.text:0000913C                 ;org 913Ch
.text:0000913C ; COMDAT (pick any)
.text:0000913C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000913C
.text:0000913C ; =============== S U B R O U T I N E =======================================
.text:0000913C
.text:0000913C ; Attributes: bp-based frame
.text:0000913C
.text:0000913C ; public: long __thiscall CMyComPtr<struct IUnknown>::QueryInterface<struct ICompressSetCoderMt>(struct _GUID const &, struct ICompressSetCoderMt * *)const
.text:0000913C                 public ??$QueryInterface@UICompressSetCoderMt@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderMt@@@Z
.text:0000913C ??$QueryInterface@UICompressSetCoderMt@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderMt@@@Z proc near
.text:0000913C                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+32Bp
.text:0000913C
.text:0000913C var_4           = dword ptr -4
.text:0000913C arg_0           = dword ptr  8
.text:0000913C arg_4           = dword ptr  0Ch
.text:0000913C
.text:0000913C                 push    ebp
.text:0000913D                 mov     ebp, esp
.text:0000913F                 push    ecx
.text:00009140                 push    esi
.text:00009141                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00009148                 mov     [ebp+var_4], ecx
.text:0000914B                 mov     esi, esp
.text:0000914D                 mov     eax, [ebp+arg_4]
.text:00009150                 push    eax
.text:00009151                 mov     ecx, [ebp+arg_0]
.text:00009154                 push    ecx
.text:00009155                 mov     edx, [ebp+var_4]
.text:00009158                 mov     eax, [edx]
.text:0000915A                 mov     ecx, [ebp+var_4]
.text:0000915D                 mov     edx, [ecx]
.text:0000915F                 mov     eax, [eax]
.text:00009161                 push    edx
.text:00009162                 mov     ecx, [eax]
.text:00009164                 call    ecx
.text:00009166                 cmp     esi, esp
.text:00009168                 call    __RTC_CheckEsp
.text:0000916D                 pop     esi
.text:0000916E                 add     esp, 4
.text:00009171                 cmp     ebp, esp
.text:00009173                 call    __RTC_CheckEsp
.text:00009178                 mov     esp, ebp
.text:0000917A                 pop     ebp
.text:0000917B                 retn    8
.text:0000917B ??$QueryInterface@UICompressSetCoderMt@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderMt@@@Z endp
.text:0000917B
.text:0000917B ; ---------------------------------------------------------------------------
.text:0000917E                 align 10h
.text:0000917E _text           ends
.text:0000917E
.text:00009180 ; ===========================================================================
.text:00009180
.text:00009180 ; Segment type: Pure code
.text:00009180 ; Segment permissions: Read/Execute
.text:00009180 _text           segment para public 'CODE' use32
.text:00009180                 assume cs:_text
.text:00009180                 ;org 9180h
.text:00009180 ; COMDAT (pick any)
.text:00009180                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00009180
.text:00009180 ; =============== S U B R O U T I N E =======================================
.text:00009180
.text:00009180 ; Attributes: bp-based frame
.text:00009180
.text:00009180 ; public: long __thiscall CMyComPtr<struct IUnknown>::QueryInterface<struct ICryptoSetPassword>(struct _GUID const &, struct ICryptoSetPassword * *)const
.text:00009180                 public ??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z
.text:00009180 ??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z proc near
.text:00009180                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+429p
.text:00009180
.text:00009180 var_4           = dword ptr -4
.text:00009180 arg_0           = dword ptr  8
.text:00009180 arg_4           = dword ptr  0Ch
.text:00009180
.text:00009180                 push    ebp
.text:00009181                 mov     ebp, esp
.text:00009183                 push    ecx
.text:00009184                 push    esi
.text:00009185                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000918C                 mov     [ebp+var_4], ecx
.text:0000918F                 mov     esi, esp
.text:00009191                 mov     eax, [ebp+arg_4]
.text:00009194                 push    eax
.text:00009195                 mov     ecx, [ebp+arg_0]
.text:00009198                 push    ecx
.text:00009199                 mov     edx, [ebp+var_4]
.text:0000919C                 mov     eax, [edx]
.text:0000919E                 mov     ecx, [ebp+var_4]
.text:000091A1                 mov     edx, [ecx]
.text:000091A3                 mov     eax, [eax]
.text:000091A5                 push    edx
.text:000091A6                 mov     ecx, [eax]
.text:000091A8                 call    ecx
.text:000091AA                 cmp     esi, esp
.text:000091AC                 call    __RTC_CheckEsp
.text:000091B1                 pop     esi
.text:000091B2                 add     esp, 4
.text:000091B5                 cmp     ebp, esp
.text:000091B7                 call    __RTC_CheckEsp
.text:000091BC                 mov     esp, ebp
.text:000091BE                 pop     ebp
.text:000091BF                 retn    8
.text:000091BF ??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z endp
.text:000091BF
.text:000091BF ; ---------------------------------------------------------------------------
.text:000091C2                 align 4
.text:000091C2 _text           ends
.text:000091C2
.text:000091C4 ; ===========================================================================
.text:000091C4
.text:000091C4 ; Segment type: Pure code
.text:000091C4 ; Segment permissions: Read/Execute
.text:000091C4 _text           segment para public 'CODE' use32
.text:000091C4                 assume cs:_text
.text:000091C4                 ;org 91C4h
.text:000091C4 ; COMDAT (pick any)
.text:000091C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000091C4
.text:000091C4 ; =============== S U B R O U T I N E =======================================
.text:000091C4
.text:000091C4
.text:000091C4 ; [thunk]:public: virtual unsigned long __stdcall CSequentialInStreamSizeCount2::AddRef`adjustor{4}' (void)
.text:000091C4                 public ?AddRef@CSequentialInStreamSizeCount2@@W3AGKXZ
.text:000091C4 ?AddRef@CSequentialInStreamSizeCount2@@W3AGKXZ proc near
.text:000091C4                                         ; DATA XREF: .rdata:000045ECo
.text:000091C4
.text:000091C4 arg_0           = dword ptr  4
.text:000091C4
.text:000091C4                 sub     [esp+arg_0], 4
.text:000091C9                 jmp     ?AddRef@CSequentialInStreamSizeCount2@@UAGKXZ ; CSequentialInStreamSizeCount2::AddRef(void)
.text:000091C9 ?AddRef@CSequentialInStreamSizeCount2@@W3AGKXZ endp
.text:000091C9
.text:000091C9 ; ---------------------------------------------------------------------------
.text:000091CE                 align 10h
.text:000091CE _text           ends
.text:000091CE
.text:000091D0 ; ===========================================================================
.text:000091D0
.text:000091D0 ; Segment type: Pure code
.text:000091D0 ; Segment permissions: Read/Execute
.text:000091D0 _text           segment para public 'CODE' use32
.text:000091D0                 assume cs:_text
.text:000091D0                 ;org 91D0h
.text:000091D0 ; COMDAT (pick any)
.text:000091D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000091D0
.text:000091D0 ; =============== S U B R O U T I N E =======================================
.text:000091D0
.text:000091D0
.text:000091D0 ; [thunk]:public: virtual long __stdcall CSequentialInStreamSizeCount2::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:000091D0                 public ?QueryInterface@CSequentialInStreamSizeCount2@@W3AGJABU_GUID@@PAPAX@Z
.text:000091D0 ?QueryInterface@CSequentialInStreamSizeCount2@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:000091D0                                         ; DATA XREF: .rdata:const CSequentialInStreamSizeCount2::`vftable'{for `ICompressGetSubStreamSize'}o
.text:000091D0
.text:000091D0 arg_0           = dword ptr  4
.text:000091D0
.text:000091D0                 sub     [esp+arg_0], 4
.text:000091D5                 jmp     ?QueryInterface@CSequentialInStreamSizeCount2@@UAGJABU_GUID@@PAPAX@Z ; CSequentialInStreamSizeCount2::QueryInterface(_GUID const &,void * *)
.text:000091D5 ?QueryInterface@CSequentialInStreamSizeCount2@@W3AGJABU_GUID@@PAPAX@Z endp
.text:000091D5
.text:000091D5 ; ---------------------------------------------------------------------------
.text:000091DA                 align 4
.text:000091DA _text           ends
.text:000091DA
.text:000091DC ; ===========================================================================
.text:000091DC
.text:000091DC ; Segment type: Pure code
.text:000091DC ; Segment permissions: Read/Execute
.text:000091DC _text           segment para public 'CODE' use32
.text:000091DC                 assume cs:_text
.text:000091DC                 ;org 91DCh
.text:000091DC ; COMDAT (pick any)
.text:000091DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000091DC
.text:000091DC ; =============== S U B R O U T I N E =======================================
.text:000091DC
.text:000091DC
.text:000091DC ; [thunk]:public: virtual unsigned long __stdcall CSequentialInStreamSizeCount2::Release`adjustor{4}' (void)
.text:000091DC                 public ?Release@CSequentialInStreamSizeCount2@@W3AGKXZ
.text:000091DC ?Release@CSequentialInStreamSizeCount2@@W3AGKXZ proc near
.text:000091DC                                         ; DATA XREF: .rdata:000045F0o
.text:000091DC
.text:000091DC arg_0           = dword ptr  4
.text:000091DC
.text:000091DC                 sub     [esp+arg_0], 4
.text:000091E1                 jmp     ?Release@CSequentialInStreamSizeCount2@@UAGKXZ ; CSequentialInStreamSizeCount2::Release(void)
.text:000091E1 ?Release@CSequentialInStreamSizeCount2@@W3AGKXZ endp
.text:000091E1
.text:000091E1 _text           ends
.text:000091E1
UNDEF:000091F0 ; ===========================================================================
UNDEF:000091F0
UNDEF:000091F0 ; Segment type: Externs
UNDEF:000091F0 ; UNDEF
UNDEF:000091F0                 extrn __RTC_CheckEsp:near
UNDEF:000091F0                                         ; CODE XREF: NArchive::N7z::CEncoder::InitBindConv(void)+158p
UNDEF:000091F0                                         ; NArchive::N7z::CEncoder::SetFolder(NArchive::N7z::CFolder &)+1D6p ...
UNDEF:000091F4                 extrn __RTC_Shutdown:near
UNDEF:000091F4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000091F8                 extrn __RTC_InitBase:near
UNDEF:000091F8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000091FC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000091FC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000091FC                                         ; CODE XREF: NArchive::N7z::CMtEncMultiProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+94p
UNDEF:000091FC                                         ; NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+5B3p ...
UNDEF:00009200 ; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00009200                 extrn __imp__EnterCriticalSection@4:near
UNDEF:00009200                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15p
UNDEF:00009200                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15r
UNDEF:00009204 ; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00009204                 extrn __imp__LeaveCriticalSection@4:near
UNDEF:00009204                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15p
UNDEF:00009204                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15r
UNDEF:00009208 ; void __cdecl operator delete(void *)
UNDEF:00009208                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$0+7p
UNDEF:00009208                                         ; __unwindfunclet$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z$1+7p ...
UNDEF:0000920C                 extrn _IID_ICryptoSetPassword:near
UNDEF:0000920C                                         ; DATA XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+421o
UNDEF:00009210                 extrn _IID_ICompressSetCoderMt:near
UNDEF:00009210                                         ; DATA XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+323o
UNDEF:00009214 ; __int32 __stdcall CreateCoder(unsigned __int64, bool, struct CCreatedCoder *)
UNDEF:00009214                 extrn ?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z:near
UNDEF:00009214                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+22Fp
UNDEF:00009218 ; _DWORD __thiscall NCoderMixer2::CMixerST::CMixerST(NCoderMixer2::CMixerST *__hidden this, bool)
UNDEF:00009218                 extrn ??0CMixerST@NCoderMixer2@@QAE@_N@Z:near
UNDEF:00009218                                         ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+130p
UNDEF:0000921C ; void *__cdecl operator new(unsigned int)
UNDEF:0000921C                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+56p
UNDEF:0000921C                                         ; NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+10Ap ...
UNDEF:00009220                 extrn ___security_cookie:near
UNDEF:00009220                                         ; DATA XREF: NArchive::N7z::CEncoder::CreateMixerCoder(unsigned __int64 const *)+2Er
UNDEF:00009220                                         ; NArchive::N7z::SetCoderProps2(CProps const &,unsigned __int64 const *,IUnknown *)+29r ...
UNDEF:00009224                 extrn ___CxxFrameHandler3:near
UNDEF:00009224                                         ; CODE XREF: __ehhandler$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z+19j
UNDEF:00009224                                         ; __ehhandler$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z+16j ...
UNDEF:00009228 ; __fastcall __security_check_cookie(x)
UNDEF:00009228                 extrn @__security_check_cookie@4:near
UNDEF:00009228                                         ; CODE XREF: __ehhandler$?CreateMixerCoder@CEncoder@N7z@NArchive@@AAEJPB_K@Z+Fp
UNDEF:00009228                                         ; __ehhandler$?SetCoderProps2@N7z@NArchive@@YGJABUCProps@@PB_KPAUIUnknown@@@Z+Cp ...
UNDEF:0000922C ; const type_info::`vftable'
UNDEF:0000922C                 extrn ??_7type_info@@6B@:near
UNDEF:0000922C                                         ; DATA XREF: .data:NCoderMixer2::CMixerMT `RTTI Type Descriptor'o
UNDEF:0000922C                                         ; .data:IUnknown `RTTI Type Descriptor'o ...
UNDEF:00009230 ; public: virtual long __thiscall NCoderMixer2::CMixerMT::SetBindInfo(struct NCoderMixer2::CBindInfo const &)
UNDEF:00009230                 extrn ?SetBindInfo@CMixerMT@NCoderMixer2@@UAEJABUCBindInfo@2@@Z:near
UNDEF:00009230                                         ; DATA XREF: .rdata:const NCoderMixer2::CMixerMT::`vftable'{for `NCoderMixer2::CMixer'}o
UNDEF:00009234 ; public: virtual void __thiscall NCoderMixer2::CMixerMT::AddCoder(struct CCreatedCoder const &)
UNDEF:00009234                 extrn ?AddCoder@CMixerMT@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z:near
UNDEF:00009234                                         ; DATA XREF: .rdata:00002A6Co
UNDEF:00009238 ; public: virtual class NCoderMixer2::CCoder & __thiscall NCoderMixer2::CMixerMT::GetCoder(unsigned int)
UNDEF:00009238                 extrn ?GetCoder@CMixerMT@NCoderMixer2@@UAEAAVCCoder@2@I@Z:near
UNDEF:00009238                                         ; DATA XREF: .rdata:00002A70o
UNDEF:0000923C ; public: virtual void __thiscall NCoderMixer2::CMixerMT::SelectMainCoder(bool)
UNDEF:0000923C                 extrn ?SelectMainCoder@CMixerMT@NCoderMixer2@@UAEX_N@Z:near
UNDEF:0000923C                                         ; DATA XREF: .rdata:00002A74o
UNDEF:00009240 ; public: virtual void __thiscall NCoderMixer2::CMixerMT::ReInit(void)
UNDEF:00009240                 extrn ?ReInit@CMixerMT@NCoderMixer2@@UAEXXZ:near
UNDEF:00009240                                         ; DATA XREF: .rdata:00002A78o
UNDEF:00009244 ; public: virtual long __thiscall NCoderMixer2::CMixerMT::Code(struct ISequentialInStream * const *, struct ISequentialOutStream * const *, struct ICompressProgressInfo *)
UNDEF:00009244                 extrn ?Code@CMixerMT@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z:near
UNDEF:00009244                                         ; DATA XREF: .rdata:00002A80o
UNDEF:00009248 ; public: virtual unsigned __int64 __thiscall NCoderMixer2::CMixerMT::GetBondStreamSize(unsigned int)const
UNDEF:00009248                 extrn ?GetBondStreamSize@CMixerMT@NCoderMixer2@@UBE_KI@Z:near
UNDEF:00009248                                         ; DATA XREF: .rdata:00002A84o
UNDEF:0000924C                 extrn __purecall:near   ; DATA XREF: .rdata:00002D94o
UNDEF:0000924C                                         ; .rdata:00002D98o ...
UNDEF:00009250 ; const IID IID_IUnknown
UNDEF:00009250                 extrn _IID_IUnknown:near
UNDEF:00009250                                         ; DATA XREF: NCoderMixer2::CMixerMT::QueryInterface(_GUID const &,void * *)+Co
UNDEF:00009250                                         ; CDynBufSeqOutStream::QueryInterface(_GUID const &,void * *)+Co ...
UNDEF:00009254 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00009254                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00009258 ; void __thiscall NCoderMixer2::CCoder::SetCoderInfo(NCoderMixer2::CCoder *__hidden this, const unsigned __int64 *, const unsigned __int64 *const *)
UNDEF:00009258                 extrn ?SetCoderInfo@CCoder@NCoderMixer2@@QAEXPB_KPBQB_K@Z:near
UNDEF:00009258                                         ; CODE XREF: NCoderMixer2::CMixerMT::SetCoderInfo(uint,unsigned __int64 const *,unsigned __int64 const * const *)+2Ap
UNDEF:0000925C ; __int32 __thiscall CProps::SetCoderProps(CProps *__hidden this, struct ICompressSetCoderProperties *, const unsigned __int64 *)
UNDEF:0000925C                 extrn ?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z:near
UNDEF:0000925C                                         ; CODE XREF: NArchive::N7z::SetCoderProps2(CProps const &,unsigned __int64 const *,IUnknown *)+89p
UNDEF:00009260                 extrn _IID_ICompressSetCoderProperties:near
UNDEF:00009260                                         ; DATA XREF: NArchive::N7z::SetCoderProps2(CProps const &,unsigned __int64 const *,IUnknown *)+54o
UNDEF:00009264 ; bool __thiscall CInOutTempBuffer::Write(CInOutTempBuffer *__hidden this, const void *, unsigned int)
UNDEF:00009264                 extrn ?Write@CInOutTempBuffer@@QAE_NPBXI@Z:near
UNDEF:00009264                                         ; CODE XREF: NArchive::N7z::CSequentialOutTempBufferImp2::Write(void const *,uint,uint *)+11p
UNDEF:00009268 ; __int32 __thiscall CInOutTempBuffer::WriteToStream(CInOutTempBuffer *__hidden this, struct ISequentialOutStream *)
UNDEF:00009268                 extrn ?WriteToStream@CInOutTempBuffer@@QAEJPAUISequentialOutStream@@@Z:near
UNDEF:00009268                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+952p
UNDEF:0000926C ; bool __thiscall NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder(NCoderMixer2::CMixer *__hidden this, unsigned int)
UNDEF:0000926C                 extrn ?Is_PackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z:near
UNDEF:0000926C                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+596p
UNDEF:00009270 ; public: void __thiscall CDynBufSeqOutStream::CopyToBuffer(class CBuffer<unsigned char> &)const
UNDEF:00009270                 extrn ?CopyToBuffer@CDynBufSeqOutStream@@QBEXAAV?$CBuffer@E@@@Z:near
UNDEF:00009270                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+511p
UNDEF:00009274                 extrn _IID_ICompressWriteCoderProperties:near
UNDEF:00009274                                         ; DATA XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+403o
UNDEF:00009278                 extrn _IID_ICryptoResetInitVector:near
UNDEF:00009278                                         ; DATA XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+38Ao
UNDEF:0000927C ; void __thiscall CInOutTempBuffer::InitWriting(CInOutTempBuffer *__hidden this)
UNDEF:0000927C                 extrn ?InitWriting@CInOutTempBuffer@@QAEXXZ:near
UNDEF:0000927C                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+138p
UNDEF:00009280 ; void __thiscall CInOutTempBuffer::Create(CInOutTempBuffer *__hidden this)
UNDEF:00009280                 extrn ?Create@CInOutTempBuffer@@QAEXXZ:near
UNDEF:00009280                                         ; CODE XREF: NArchive::N7z::CEncoder::Encode(ISequentialInStream *,unsigned __int64 const *,NArchive::N7z::CFolder &,CRecordVector<unsigned __int64> &,unsigned __int64 &,ISequentialOutStream *,CRecordVector<unsigned __int64> &,ICompressProgressInfo *)+130p
UNDEF:00009284 ; public: virtual long __stdcall CDynBufSeqOutStream::Write(void const *, unsigned int, unsigned int *)
UNDEF:00009284                 extrn ?Write@CDynBufSeqOutStream@@UAGJPBXIPAI@Z:near
UNDEF:00009284                                         ; DATA XREF: .rdata:0000374Co
UNDEF:00009288                 extrn _IID_ISequentialOutStream:near
UNDEF:00009288                                         ; DATA XREF: CDynBufSeqOutStream::QueryInterface(_GUID const &,void * *):loc_38ACo
UNDEF:00009288                                         ; NArchive::N7z::CSequentialOutTempBufferImp2::QueryInterface(_GUID const &,void * *):loc_41F8o ...
UNDEF:0000928C ; void __thiscall CByteDynBuffer::Free(CByteDynBuffer *__hidden this)
UNDEF:0000928C                 extrn ?Free@CByteDynBuffer@@QAEXXZ:near
UNDEF:0000928C                                         ; CODE XREF: CByteDynBuffer::~CByteDynBuffer(void)+11p
UNDEF:00009290 ; __stdcall CriticalSection_Init(x)
UNDEF:00009290                 extrn _CriticalSection_Init@4:near
UNDEF:00009290                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)+12p
UNDEF:00009294                 extrn _IID_ICompressProgressInfo:near
UNDEF:00009294                                         ; DATA XREF: NArchive::N7z::CMtEncMultiProgress::QueryInterface(_GUID const &,void * *):loc_3DD0o
UNDEF:00009298 ; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00009298                 extrn __imp__DeleteCriticalSection@4:near
UNDEF:00009298                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)+15p
UNDEF:00009298                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)+15r
UNDEF:0000929C                 extrn _IID_ICompressGetSubStreamSize:near
UNDEF:0000929C                                         ; DATA XREF: CSequentialInStreamSizeCount2::Init(ISequentialInStream *)+45o
UNDEF:0000929C                                         ; CSequentialInStreamSizeCount2::QueryInterface(_GUID const &,void * *):loc_48A4o
UNDEF:000092A0 ; public: virtual long __stdcall CSequentialInStreamSizeCount2::Read(void *, unsigned int, unsigned int *)
UNDEF:000092A0                 extrn ?Read@CSequentialInStreamSizeCount2@@UAGJPAXIPAI@Z:near
UNDEF:000092A0                                         ; DATA XREF: .rdata:00004608o
UNDEF:000092A4 ; public: virtual long __stdcall CSequentialInStreamSizeCount2::GetSubStreamSize(unsigned __int64, unsigned __int64 *)
UNDEF:000092A4                 extrn ?GetSubStreamSize@CSequentialInStreamSizeCount2@@UAGJ_KPA_K@Z:near
UNDEF:000092A4                                         ; DATA XREF: .rdata:000045F4o
UNDEF:000092A8                 extrn _IID_ISequentialInStream:near
UNDEF:000092A8                                         ; DATA XREF: CSequentialInStreamSizeCount2::QueryInterface(_GUID const &,void * *):loc_4888o
UNDEF:000092AC ; public: virtual long __stdcall CSequentialOutStreamSizeCount::Write(void const *, unsigned int, unsigned int *)
UNDEF:000092AC                 extrn ?Write@CSequentialOutStreamSizeCount@@UAGJPBXIPAI@Z:near
UNDEF:000092AC                                         ; DATA XREF: .rdata:00004AF8o
UNDEF:000092B0 ; __stdcall _CxxThrowException(x, x)
UNDEF:000092B0                 extrn __CxxThrowException@8:near
UNDEF:000092B0                                         ; CODE XREF: NArchive::N7z::CEncoder::CEncoder(NArchive::N7z::CCompressionMethodMode const &)+D7p
UNDEF:000092B0                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+8Cp ...
UNDEF:000092B4 ; public: __thiscall UString::UString(void)
UNDEF:000092B4                 extrn ??0UString@@QAE@XZ:near
UNDEF:000092B4                                         ; CODE XREF: NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode(void)+77p
UNDEF:000092B8 ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:000092B8                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:000092B8                                         ; CODE XREF: NArchive::N7z::CCompressionMethodMode::operator=(NArchive::N7z::CCompressionMethodMode const &)+75p
UNDEF:000092BC ; bool __thiscall NCoderMixer2::CBindInfo::CalcMapsAndCheck(NCoderMixer2::CBindInfo *__hidden this)
UNDEF:000092BC                 extrn ?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ:near
UNDEF:000092BC                                         ; CODE XREF: NArchive::N7z::CEncoder::EncoderConstr(void)+371p
UNDEF:000092BC                                         ; NArchive::N7z::CEncoder::EncoderConstr(void)+630p
UNDEF:000092C0 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:000092C0                 extrn _memcpy:near      ; CODE XREF: CRecordVector<uint>::operator=(CRecordVector<uint> const &)+C3p
UNDEF:000092C0                                         ; CRecordVector<NArchive::N7z::CBond2>::operator=(CRecordVector<NArchive::N7z::CBond2> const &)+C3p ...
UNDEF:000092C4 ; void *__cdecl _memmove(void *Dst, const void *Src, size_t Size)
UNDEF:000092C4                 extrn __imp__memmove:near
UNDEF:000092C4                                         ; CODE XREF: CRecordVector<uint>::MoveToFront(uint)+44p
UNDEF:000092C4                                         ; CRecordVector<uint>::MoveItems(uint,uint)+36p
UNDEF:000092C4                                         ; DATA XREF: ...
UNDEF:000092C8 ; void __stdcall `eh vector constructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *), void (__thiscall *)(void *))
UNDEF:000092C8                 extrn ??_L@YGXPAXIHP6EX0@Z1@Z:near
UNDEF:000092C8                                         ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::SetSize(uint)+C6p
UNDEF:000092CC ; public: __thiscall CInOutTempBuffer::CInOutTempBuffer(void)
UNDEF:000092CC                 extrn ??0CInOutTempBuffer@@QAE@XZ:near
UNDEF:000092CC                                         ; CODE XREF: CObjectVector<CInOutTempBuffer>::AddNew(void)+59p
UNDEF:000092D0 ; void __thiscall CVirtThread::WaitThreadFinish(CVirtThread *__hidden this)
UNDEF:000092D0                 extrn ?WaitThreadFinish@CVirtThread@@QAEXXZ:near
UNDEF:000092D0                                         ; CODE XREF: NCoderMixer2::CCoderMT::~CCoderMT(void)+40p
UNDEF:000092D0                                         ; CVirtThread::~CVirtThread(void)+40p
UNDEF:000092D4 ; private: virtual void __thiscall NCoderMixer2::CCoderMT::Execute(void)
UNDEF:000092D4                 extrn ?Execute@CCoderMT@NCoderMixer2@@EAEXXZ:near
UNDEF:000092D4                                         ; DATA XREF: .rdata:const NCoderMixer2::CCoderMT::`vftable'o
UNDEF:000092D8 ; __stdcall HandlePtr_Close(x)
UNDEF:000092D8                 extrn _HandlePtr_Close@4:near
UNDEF:000092D8                                         ; CODE XREF: NWindows::CThread::Close(void)+12p
UNDEF:000092D8                                         ; NWindows::NSynchronization::CBaseEvent::Close(void)+12p
UNDEF:000092DC ; void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *))
UNDEF:000092DC                 extrn ??_M@YGXPAXIHP6EX0@Z@Z:near
UNDEF:000092DC                                         ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+28p
UNDEF:000092E0 ; _DWORD __thiscall CInOutTempBuffer::~CInOutTempBuffer(CInOutTempBuffer *__hidden this)
UNDEF:000092E0                 extrn ??1CInOutTempBuffer@@QAE@XZ:near
UNDEF:000092E0                                         ; CODE XREF: CInOutTempBuffer::`scalar deleting destructor'(uint)+11p
UNDEF:000092E4 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:000092E4                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:000092E4                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:000092E8 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this, const struct NWindows::NCOM::CPropVariant *)
UNDEF:000092E8                 extrn ??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z:near
UNDEF:000092E8                                         ; CODE XREF: CProp::CProp(CProp const &)+31p
UNDEF:000092E8
UNDEF:000092E8