.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : F6A1017D50E0199C0985B128DBC62934
.rdata:00000000 ; Input CRC32 : 9C87E665
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Ppmd8.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000                 public _PPMD8_kExpEscape
.rdata:00000000 _PPMD8_kExpEscape db  19h
.rdata:00000001                 db  0Eh
.rdata:00000002                 db    9
.rdata:00000003                 db    7
.rdata:00000004                 db    5
.rdata:00000005                 db    5
.rdata:00000006                 db    4
.rdata:00000007                 db    4
.rdata:00000008                 db    4
.rdata:00000009                 db    3
.rdata:0000000A                 db    3
.rdata:0000000B                 db    3
.rdata:0000000C                 db    2
.rdata:0000000D                 db    2
.rdata:0000000E                 db    2
.rdata:0000000F                 db    2
.rdata:00000010 _kInitBinEsc    dw 3CDDh                ; DATA XREF: RestartModel(x)+215r
.rdata:00000012                 db  3Fh ; ?
.rdata:00000013                 db  1Fh
.rdata:00000014                 db 0BFh ; +
.rdata:00000015                 db  59h ; Y
.rdata:00000016                 db 0F3h ; =
.rdata:00000017                 db  48h ; H
.rdata:00000018                 db 0A1h ; Ã­
.rdata:00000019                 db  64h ; d
.rdata:0000001A                 db 0BCh ; +
.rdata:0000001B                 db  5Ah ; Z
.rdata:0000001C                 db  32h ; 2
.rdata:0000001D                 db  66h ; f
.rdata:0000001E                 db  51h ; Q
.rdata:0000001F                 db  60h ; `
.rdata:0000001F _rdata          ends
.rdata:0000001F
.text:00000020 ; ===========================================================================
.text:00000020
.text:00000020 ; Segment type: Pure code
.text:00000020 ; Segment permissions: Read/Execute
.text:00000020 _text           segment para public 'CODE' use32
.text:00000020                 assume cs:_text
.text:00000020                 ;org 20h
.text:00000020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000020
.text:00000020 ; =============== S U B R O U T I N E =======================================
.text:00000020
.text:00000020 ; Attributes: bp-based frame
.text:00000020
.text:00000020 ; __stdcall Ppmd8_Construct(x)
.text:00000020                 public _Ppmd8_Construct@4
.text:00000020 _Ppmd8_Construct@4 proc near
.text:00000020
.text:00000020 var_14          = dword ptr -14h
.text:00000020 var_10          = dword ptr -10h
.text:00000020 var_C           = dword ptr -0Ch
.text:00000020 var_8           = dword ptr -8
.text:00000020 var_4           = dword ptr -4
.text:00000020 arg_0           = dword ptr  8
.text:00000020
.text:00000020                 push    ebp
.text:00000021                 mov     ebp, esp
.text:00000023                 sub     esp, 14h
.text:00000026                 mov     eax, 0CCCCCCCCh
.text:0000002B                 mov     [ebp+var_14], eax
.text:0000002E                 mov     [ebp+var_10], eax
.text:00000031                 mov     [ebp+var_C], eax
.text:00000034                 mov     [ebp+var_8], eax
.text:00000037                 mov     [ebp+var_4], eax
.text:0000003A                 mov     eax, [ebp+arg_0]
.text:0000003D                 mov     dword ptr [eax+2Ch], 0
.text:00000044                 mov     [ebp+var_4], 0
.text:0000004B                 mov     [ebp+var_8], 0
.text:00000052                 jmp     short loc_5D
.text:00000054 ; ---------------------------------------------------------------------------
.text:00000054
.text:00000054 loc_54:                                 ; CODE XREF: Ppmd8_Construct(x)+90j
.text:00000054                 mov     ecx, [ebp+var_4]
.text:00000057                 add     ecx, 1
.text:0000005A                 mov     [ebp+var_4], ecx
.text:0000005D
.text:0000005D loc_5D:                                 ; CODE XREF: Ppmd8_Construct(x)+32j
.text:0000005D                 cmp     [ebp+var_4], 26h ; '&'
.text:00000061                 jnb     short loc_B2
.text:00000063                 cmp     [ebp+var_4], 0Ch
.text:00000067                 jb      short loc_72
.text:00000069                 mov     [ebp+var_14], 4
.text:00000070                 jmp     short loc_7E
.text:00000072 ; ---------------------------------------------------------------------------
.text:00000072
.text:00000072 loc_72:                                 ; CODE XREF: Ppmd8_Construct(x)+47j
.text:00000072                 mov     edx, [ebp+var_4]
.text:00000075                 shr     edx, 2
.text:00000078                 add     edx, 1
.text:0000007B                 mov     [ebp+var_14], edx
.text:0000007E
.text:0000007E loc_7E:                                 ; CODE XREF: Ppmd8_Construct(x)+50j
.text:0000007E                 mov     eax, [ebp+var_14]
.text:00000081                 mov     [ebp+var_10], eax
.text:00000084
.text:00000084 loc_84:                                 ; CODE XREF: Ppmd8_Construct(x)+82j
.text:00000084                 mov     ecx, [ebp+arg_0]
.text:00000087                 add     ecx, [ebp+var_8]
.text:0000008A                 mov     dl, byte ptr [ebp+var_4]
.text:0000008D                 mov     [ecx+7Eh], dl
.text:00000090                 mov     eax, [ebp+var_8]
.text:00000093                 add     eax, 1
.text:00000096                 mov     [ebp+var_8], eax
.text:00000099                 mov     ecx, [ebp+var_10]
.text:0000009C                 sub     ecx, 1
.text:0000009F                 mov     [ebp+var_10], ecx
.text:000000A2                 jnz     short loc_84
.text:000000A4                 mov     edx, [ebp+arg_0]
.text:000000A7                 add     edx, [ebp+var_4]
.text:000000AA                 mov     al, byte ptr [ebp+var_8]
.text:000000AD                 mov     [edx+58h], al
.text:000000B0                 jmp     short loc_54
.text:000000B2 ; ---------------------------------------------------------------------------
.text:000000B2
.text:000000B2 loc_B2:                                 ; CODE XREF: Ppmd8_Construct(x)+41j
.text:000000B2                 mov     ecx, [ebp+arg_0]
.text:000000B5                 mov     byte ptr [ecx+230h], 0
.text:000000BC                 mov     edx, [ebp+arg_0]
.text:000000BF                 mov     byte ptr [edx+231h], 2
.text:000000C6                 push    9               ; Size
.text:000000C8                 push    4               ; Val
.text:000000CA                 mov     eax, [ebp+arg_0]
.text:000000CD                 add     eax, 232h
.text:000000D2                 push    eax             ; Dst
.text:000000D3                 call    _memset
.text:000000D8                 add     esp, 0Ch
.text:000000DB                 push    0F5h ; ')'      ; Size
.text:000000E0                 push    6               ; Val
.text:000000E2                 mov     ecx, [ebp+arg_0]
.text:000000E5                 add     ecx, 23Bh
.text:000000EB                 push    ecx             ; Dst
.text:000000EC                 call    _memset
.text:000000F1                 add     esp, 0Ch
.text:000000F4                 mov     [ebp+var_4], 0
.text:000000FB                 jmp     short loc_106
.text:000000FD ; ---------------------------------------------------------------------------
.text:000000FD
.text:000000FD loc_FD:                                 ; CODE XREF: Ppmd8_Construct(x)+FBj
.text:000000FD                 mov     edx, [ebp+var_4]
.text:00000100                 add     edx, 1
.text:00000103                 mov     [ebp+var_4], edx
.text:00000106
.text:00000106 loc_106:                                ; CODE XREF: Ppmd8_Construct(x)+DBj
.text:00000106                 cmp     [ebp+var_4], 5
.text:0000010A                 jnb     short loc_11D
.text:0000010C                 mov     eax, [ebp+arg_0]
.text:0000010F                 add     eax, [ebp+var_4]
.text:00000112                 mov     cl, byte ptr [ebp+var_4]
.text:00000115                 mov     [eax+330h], cl
.text:0000011B                 jmp     short loc_FD
.text:0000011D ; ---------------------------------------------------------------------------
.text:0000011D
.text:0000011D loc_11D:                                ; CODE XREF: Ppmd8_Construct(x)+EAj
.text:0000011D                 mov     edx, [ebp+var_4]
.text:00000120                 mov     [ebp+var_C], edx
.text:00000123                 mov     [ebp+var_8], 1
.text:0000012A                 jmp     short loc_135
.text:0000012C ; ---------------------------------------------------------------------------
.text:0000012C
.text:0000012C loc_12C:                                ; CODE XREF: Ppmd8_Construct(x):loc_16Aj
.text:0000012C                 mov     eax, [ebp+var_4]
.text:0000012F                 add     eax, 1
.text:00000132                 mov     [ebp+var_4], eax
.text:00000135
.text:00000135 loc_135:                                ; CODE XREF: Ppmd8_Construct(x)+10Aj
.text:00000135                 cmp     [ebp+var_4], 104h
.text:0000013C                 jnb     short loc_16C
.text:0000013E                 mov     ecx, [ebp+arg_0]
.text:00000141                 add     ecx, [ebp+var_4]
.text:00000144                 mov     dl, byte ptr [ebp+var_C]
.text:00000147                 mov     [ecx+330h], dl
.text:0000014D                 mov     eax, [ebp+var_8]
.text:00000150                 sub     eax, 1
.text:00000153                 mov     [ebp+var_8], eax
.text:00000156                 jnz     short loc_16A
.text:00000158                 mov     ecx, [ebp+var_C]
.text:0000015B                 add     ecx, 1
.text:0000015E                 mov     [ebp+var_C], ecx
.text:00000161                 mov     edx, [ebp+var_C]
.text:00000164                 sub     edx, 4
.text:00000167                 mov     [ebp+var_8], edx
.text:0000016A
.text:0000016A loc_16A:                                ; CODE XREF: Ppmd8_Construct(x)+136j
.text:0000016A                 jmp     short loc_12C
.text:0000016C ; ---------------------------------------------------------------------------
.text:0000016C
.text:0000016C loc_16C:                                ; CODE XREF: Ppmd8_Construct(x)+11Cj
.text:0000016C                 add     esp, 14h
.text:0000016F                 cmp     ebp, esp
.text:00000171                 call    __RTC_CheckEsp
.text:00000176                 mov     esp, ebp
.text:00000178                 pop     ebp
.text:00000179                 retn    4
.text:00000179 _Ppmd8_Construct@4 endp
.text:00000179
.text:00000179 ; ---------------------------------------------------------------------------
.text:0000017C                 align 10h
.text:00000180
.text:00000180 ; =============== S U B R O U T I N E =======================================
.text:00000180
.text:00000180 ; Attributes: bp-based frame
.text:00000180
.text:00000180 ; __stdcall Ppmd8_Free(x, x)
.text:00000180                 public _Ppmd8_Free@8
.text:00000180 _Ppmd8_Free@8   proc near               ; CODE XREF: Ppmd8_Alloc(x,x,x)+28p
.text:00000180
.text:00000180 arg_0           = dword ptr  8
.text:00000180 arg_4           = dword ptr  0Ch
.text:00000180
.text:00000180                 push    ebp
.text:00000181                 mov     ebp, esp
.text:00000183                 push    esi
.text:00000184                 mov     esi, esp
.text:00000186                 mov     eax, [ebp+arg_0]
.text:00000189                 mov     ecx, [eax+2Ch]
.text:0000018C                 push    ecx
.text:0000018D                 mov     edx, [ebp+arg_4]
.text:00000190                 push    edx
.text:00000191                 mov     eax, [ebp+arg_4]
.text:00000194                 mov     ecx, [eax+4]
.text:00000197                 call    ecx
.text:00000199                 cmp     esi, esp
.text:0000019B                 call    __RTC_CheckEsp
.text:000001A0                 mov     edx, [ebp+arg_0]
.text:000001A3                 mov     dword ptr [edx+24h], 0
.text:000001AA                 mov     eax, [ebp+arg_0]
.text:000001AD                 mov     dword ptr [eax+2Ch], 0
.text:000001B4                 pop     esi
.text:000001B5                 cmp     ebp, esp
.text:000001B7                 call    __RTC_CheckEsp
.text:000001BC                 pop     ebp
.text:000001BD                 retn    8
.text:000001BD _Ppmd8_Free@8   endp
.text:000001BD
.text:000001C0
.text:000001C0 ; =============== S U B R O U T I N E =======================================
.text:000001C0
.text:000001C0 ; Attributes: bp-based frame
.text:000001C0
.text:000001C0 ; __stdcall Ppmd8_Alloc(x, x, x)
.text:000001C0                 public _Ppmd8_Alloc@12
.text:000001C0 _Ppmd8_Alloc@12 proc near
.text:000001C0
.text:000001C0 var_4           = dword ptr -4
.text:000001C0 arg_0           = dword ptr  8
.text:000001C0 arg_4           = dword ptr  0Ch
.text:000001C0 arg_8           = dword ptr  10h
.text:000001C0
.text:000001C0                 push    ebp
.text:000001C1                 mov     ebp, esp
.text:000001C3                 push    ecx
.text:000001C4                 push    esi
.text:000001C5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001CC                 mov     eax, [ebp+arg_0]
.text:000001CF                 cmp     dword ptr [eax+2Ch], 0
.text:000001D3                 jz      short loc_1E0
.text:000001D5                 mov     ecx, [ebp+arg_0]
.text:000001D8                 mov     edx, [ecx+24h]
.text:000001DB                 cmp     edx, [ebp+arg_4]
.text:000001DE                 jz      short loc_23B
.text:000001E0
.text:000001E0 loc_1E0:                                ; CODE XREF: Ppmd8_Alloc(x,x,x)+13j
.text:000001E0                 mov     eax, [ebp+arg_8]
.text:000001E3                 push    eax
.text:000001E4                 mov     ecx, [ebp+arg_0]
.text:000001E7                 push    ecx
.text:000001E8                 call    _Ppmd8_Free@8   ; Ppmd8_Free(x,x)
.text:000001ED                 mov     edx, 4
.text:000001F2                 sub     edx, [ebp+arg_4]
.text:000001F5                 and     edx, 3
.text:000001F8                 mov     eax, [ebp+arg_0]
.text:000001FB                 mov     [eax+40h], edx
.text:000001FE                 mov     ecx, [ebp+arg_0]
.text:00000201                 mov     edx, [ecx+40h]
.text:00000204                 add     edx, [ebp+arg_4]
.text:00000207                 mov     esi, esp
.text:00000209                 push    edx
.text:0000020A                 mov     eax, [ebp+arg_8]
.text:0000020D                 push    eax
.text:0000020E                 mov     ecx, [ebp+arg_8]
.text:00000211                 mov     edx, [ecx]
.text:00000213                 call    edx
.text:00000215                 cmp     esi, esp
.text:00000217                 call    __RTC_CheckEsp
.text:0000021C                 mov     [ebp+var_4], eax
.text:0000021F                 mov     eax, [ebp+arg_0]
.text:00000222                 mov     ecx, [ebp+var_4]
.text:00000225                 mov     [eax+2Ch], ecx
.text:00000228                 cmp     [ebp+var_4], 0
.text:0000022C                 jnz     short loc_232
.text:0000022E                 xor     eax, eax
.text:00000230                 jmp     short loc_240
.text:00000232 ; ---------------------------------------------------------------------------
.text:00000232
.text:00000232 loc_232:                                ; CODE XREF: Ppmd8_Alloc(x,x,x)+6Cj
.text:00000232                 mov     edx, [ebp+arg_0]
.text:00000235                 mov     eax, [ebp+arg_4]
.text:00000238                 mov     [edx+24h], eax
.text:0000023B
.text:0000023B loc_23B:                                ; CODE XREF: Ppmd8_Alloc(x,x,x)+1Ej
.text:0000023B                 mov     eax, 1
.text:00000240
.text:00000240 loc_240:                                ; CODE XREF: Ppmd8_Alloc(x,x,x)+70j
.text:00000240                 pop     esi
.text:00000241                 add     esp, 4
.text:00000244                 cmp     ebp, esp
.text:00000246                 call    __RTC_CheckEsp
.text:0000024B                 mov     esp, ebp
.text:0000024D                 pop     ebp
.text:0000024E                 retn    0Ch
.text:0000024E _Ppmd8_Alloc@12 endp
.text:0000024E
.text:0000024E ; ---------------------------------------------------------------------------
.text:00000251                 align 10h
.text:00000260
.text:00000260 ; =============== S U B R O U T I N E =======================================
.text:00000260
.text:00000260 ; Attributes: bp-based frame
.text:00000260
.text:00000260 ; __stdcall Ppmd8_Init(x, x, x)
.text:00000260                 public _Ppmd8_Init@12
.text:00000260 _Ppmd8_Init@12  proc near
.text:00000260
.text:00000260 arg_0           = dword ptr  8
.text:00000260 arg_4           = dword ptr  0Ch
.text:00000260 arg_8           = dword ptr  10h
.text:00000260
.text:00000260                 push    ebp
.text:00000261                 mov     ebp, esp
.text:00000263                 mov     eax, [ebp+arg_0]
.text:00000266                 mov     ecx, [ebp+arg_4]
.text:00000269                 mov     [eax+18h], ecx
.text:0000026C                 mov     edx, [ebp+arg_0]
.text:0000026F                 mov     eax, [ebp+arg_8]
.text:00000272                 mov     [edx+44h], eax
.text:00000275                 mov     ecx, [ebp+arg_0]
.text:00000278                 push    ecx
.text:00000279                 call    _RestartModel@4 ; RestartModel(x)
.text:0000027E                 mov     edx, [ebp+arg_0]
.text:00000281                 mov     byte ptr [edx+436h], 7
.text:00000288                 xor     eax, eax
.text:0000028A                 mov     ecx, [ebp+arg_0]
.text:0000028D                 mov     [ecx+434h], ax
.text:00000294                 mov     edx, [ebp+arg_0]
.text:00000297                 mov     byte ptr [edx+437h], 40h ; '@'
.text:0000029E                 cmp     ebp, esp
.text:000002A0                 call    __RTC_CheckEsp
.text:000002A5                 pop     ebp
.text:000002A6                 retn    0Ch
.text:000002A6 _Ppmd8_Init@12  endp
.text:000002A6
.text:000002A6 ; ---------------------------------------------------------------------------
.text:000002A9                 align 10h
.text:000002B0
.text:000002B0 ; =============== S U B R O U T I N E =======================================
.text:000002B0
.text:000002B0 ; Attributes: bp-based frame
.text:000002B0
.text:000002B0 ; __stdcall RestartModel(x)
.text:000002B0 _RestartModel@4 proc near               ; CODE XREF: Ppmd8_Init(x,x,x)+19p
.text:000002B0                                         ; RestoreModel(x,x)+18Dp
.text:000002B0
.text:000002B0 var_30          = dword ptr -30h
.text:000002B0 var_2C          = dword ptr -2Ch
.text:000002B0 var_28          = dword ptr -28h
.text:000002B0 var_24          = dword ptr -24h
.text:000002B0 var_20          = dword ptr -20h
.text:000002B0 var_1C          = dword ptr -1Ch
.text:000002B0 var_18          = word ptr -18h
.text:000002B0 var_14          = dword ptr -14h
.text:000002B0 var_10          = dword ptr -10h
.text:000002B0 var_C           = dword ptr -0Ch
.text:000002B0 var_8           = dword ptr -8
.text:000002B0 var_4           = dword ptr -4
.text:000002B0 arg_0           = dword ptr  8
.text:000002B0
.text:000002B0                 push    ebp
.text:000002B1                 mov     ebp, esp
.text:000002B3                 sub     esp, 30h
.text:000002B6                 push    edi
.text:000002B7                 lea     edi, [ebp+var_30]
.text:000002BA                 mov     ecx, 0Ch
.text:000002BF                 mov     eax, 0CCCCCCCCh
.text:000002C4                 rep stosd
.text:000002C6                 push    98h ; 'Ã¿'       ; Size
.text:000002CB                 push    0               ; Val
.text:000002CD                 mov     eax, [ebp+arg_0]
.text:000002D0                 add     eax, 100h
.text:000002D5                 push    eax             ; Dst
.text:000002D6                 call    _memset
.text:000002DB                 add     esp, 0Ch
.text:000002DE                 push    98h ; 'Ã¿'       ; Size
.text:000002E3                 push    0               ; Val
.text:000002E5                 mov     ecx, [ebp+arg_0]
.text:000002E8                 add     ecx, 198h
.text:000002EE                 push    ecx             ; Dst
.text:000002EF                 call    _memset
.text:000002F4                 add     esp, 0Ch
.text:000002F7                 mov     edx, [ebp+arg_0]
.text:000002FA                 mov     eax, [edx+2Ch]
.text:000002FD                 mov     ecx, [ebp+arg_0]
.text:00000300                 add     eax, [ecx+40h]
.text:00000303                 mov     edx, [ebp+arg_0]
.text:00000306                 mov     [edx+38h], eax
.text:00000309                 mov     eax, [ebp+arg_0]
.text:0000030C                 mov     ecx, [eax+38h]
.text:0000030F                 mov     edx, [ebp+arg_0]
.text:00000312                 add     ecx, [edx+24h]
.text:00000315                 mov     eax, [ebp+arg_0]
.text:00000318                 mov     [eax+34h], ecx
.text:0000031B                 mov     ecx, [ebp+arg_0]
.text:0000031E                 mov     eax, [ecx+24h]
.text:00000321                 shr     eax, 3
.text:00000324                 xor     edx, edx
.text:00000326                 mov     ecx, 0Ch
.text:0000032B                 div     ecx
.text:0000032D                 imul    eax, 7
.text:00000330                 imul    eax, 0Ch
.text:00000333                 mov     edx, [ebp+arg_0]
.text:00000336                 mov     ecx, [edx+34h]
.text:00000339                 sub     ecx, eax
.text:0000033B                 mov     [ebp+var_24], ecx
.text:0000033E                 mov     edx, [ebp+arg_0]
.text:00000341                 mov     eax, [ebp+var_24]
.text:00000344                 mov     [edx+3Ch], eax
.text:00000347                 mov     ecx, [ebp+arg_0]
.text:0000034A                 mov     edx, [ebp+var_24]
.text:0000034D                 mov     [ecx+30h], edx
.text:00000350                 mov     eax, [ebp+arg_0]
.text:00000353                 mov     dword ptr [eax+28h], 0
.text:0000035A                 mov     ecx, [ebp+arg_0]
.text:0000035D                 mov     edx, [ebp+arg_0]
.text:00000360                 mov     eax, [edx+18h]
.text:00000363                 mov     [ecx+0Ch], eax
.text:00000366                 mov     ecx, [ebp+arg_0]
.text:00000369                 cmp     dword ptr [ecx+18h], 0Ch
.text:0000036D                 jnb     short loc_37A
.text:0000036F                 mov     edx, [ebp+arg_0]
.text:00000372                 mov     eax, [edx+18h]
.text:00000375                 mov     [ebp+var_28], eax
.text:00000378                 jmp     short loc_381
.text:0000037A ; ---------------------------------------------------------------------------
.text:0000037A
.text:0000037A loc_37A:                                ; CODE XREF: RestartModel(x)+BDj
.text:0000037A                 mov     [ebp+var_28], 0Ch
.text:00000381
.text:00000381 loc_381:                                ; CODE XREF: RestartModel(x)+C8j
.text:00000381                 mov     ecx, [ebp+var_28]
.text:00000384                 neg     ecx
.text:00000386                 sub     ecx, 1
.text:00000389                 mov     [ebp+var_2C], ecx
.text:0000038C                 mov     edx, [ebp+arg_0]
.text:0000038F                 mov     eax, [ebp+var_2C]
.text:00000392                 mov     [edx+20h], eax
.text:00000395                 mov     ecx, [ebp+arg_0]
.text:00000398                 mov     edx, [ebp+var_2C]
.text:0000039B                 mov     [ecx+1Ch], edx
.text:0000039E                 mov     eax, [ebp+arg_0]
.text:000003A1                 mov     dword ptr [eax+14h], 0
.text:000003A8                 mov     ecx, [ebp+arg_0]
.text:000003AB                 mov     edx, [ecx+34h]
.text:000003AE                 sub     edx, 0Ch
.text:000003B1                 mov     [ebp+var_30], edx
.text:000003B4                 mov     eax, [ebp+arg_0]
.text:000003B7                 mov     ecx, [ebp+var_30]
.text:000003BA                 mov     [eax+34h], ecx
.text:000003BD                 mov     edx, [ebp+arg_0]
.text:000003C0                 mov     eax, [ebp+var_30]
.text:000003C3                 mov     [edx+4], eax
.text:000003C6                 mov     ecx, [ebp+arg_0]
.text:000003C9                 mov     edx, [ebp+var_30]
.text:000003CC                 mov     [ecx], edx
.text:000003CE                 mov     eax, [ebp+arg_0]
.text:000003D1                 mov     ecx, [eax]
.text:000003D3                 mov     dword ptr [ecx+8], 0
.text:000003DA                 mov     edx, [ebp+arg_0]
.text:000003DD                 mov     eax, [edx]
.text:000003DF                 mov     byte ptr [eax], 0FFh
.text:000003E2                 mov     ecx, [ebp+arg_0]
.text:000003E5                 mov     edx, [ecx]
.text:000003E7                 mov     byte ptr [edx+1], 0
.text:000003EB                 mov     eax, [ebp+arg_0]
.text:000003EE                 mov     ecx, [eax]
.text:000003F0                 mov     edx, 101h
.text:000003F5                 mov     [ecx+2], dx
.text:000003F9                 mov     eax, [ebp+arg_0]
.text:000003FC                 mov     ecx, [ebp+arg_0]
.text:000003FF                 mov     edx, [ecx+30h]
.text:00000402                 mov     [eax+8], edx
.text:00000405                 mov     eax, [ebp+arg_0]
.text:00000408                 mov     ecx, [eax+30h]
.text:0000040B                 add     ecx, 600h
.text:00000411                 mov     edx, [ebp+arg_0]
.text:00000414                 mov     [edx+30h], ecx
.text:00000417                 mov     eax, [ebp+arg_0]
.text:0000041A                 mov     ecx, [eax]
.text:0000041C                 mov     edx, [ebp+arg_0]
.text:0000041F                 mov     eax, [edx+8]
.text:00000422                 mov     [ecx+4], eax
.text:00000425                 mov     [ebp+var_4], 0
.text:0000042C                 jmp     short loc_437
.text:0000042E ; ---------------------------------------------------------------------------
.text:0000042E
.text:0000042E loc_42E:                                ; CODE XREF: RestartModel(x)+1B9j
.text:0000042E                 mov     ecx, [ebp+var_4]
.text:00000431                 add     ecx, 1
.text:00000434                 mov     [ebp+var_4], ecx
.text:00000437
.text:00000437 loc_437:                                ; CODE XREF: RestartModel(x)+17Cj
.text:00000437                 cmp     [ebp+var_4], 100h
.text:0000043E                 jnb     short loc_46B
.text:00000440                 mov     edx, [ebp+var_4]
.text:00000443                 imul    edx, 6
.text:00000446                 mov     eax, [ebp+arg_0]
.text:00000449                 add     edx, [eax+8]
.text:0000044C                 mov     [ebp+var_14], edx
.text:0000044F                 mov     ecx, [ebp+var_14]
.text:00000452                 mov     dl, byte ptr [ebp+var_4]
.text:00000455                 mov     [ecx], dl
.text:00000457                 mov     eax, [ebp+var_14]
.text:0000045A                 mov     byte ptr [eax+1], 1
.text:0000045E                 push    0
.text:00000460                 mov     ecx, [ebp+var_14]
.text:00000463                 push    ecx
.text:00000464                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:00000469                 jmp     short loc_42E
.text:0000046B ; ---------------------------------------------------------------------------
.text:0000046B
.text:0000046B loc_46B:                                ; CODE XREF: RestartModel(x)+18Ej
.text:0000046B                 mov     [ebp+var_C], 0
.text:00000472                 mov     edx, [ebp+var_C]
.text:00000475                 mov     [ebp+var_4], edx
.text:00000478                 jmp     short loc_483
.text:0000047A ; ---------------------------------------------------------------------------
.text:0000047A
.text:0000047A loc_47A:                                ; CODE XREF: RestartModel(x):loc_525j
.text:0000047A                 mov     eax, [ebp+var_C]
.text:0000047D                 add     eax, 1
.text:00000480                 mov     [ebp+var_C], eax
.text:00000483
.text:00000483 loc_483:                                ; CODE XREF: RestartModel(x)+1C8j
.text:00000483                 cmp     [ebp+var_C], 19h
.text:00000487                 jnb     loc_52A
.text:0000048D
.text:0000048D loc_48D:                                ; CODE XREF: RestartModel(x)+1F8j
.text:0000048D                 mov     ecx, [ebp+arg_0]
.text:00000490                 add     ecx, [ebp+var_4]
.text:00000493                 movzx   edx, byte ptr [ecx+330h]
.text:0000049A                 cmp     edx, [ebp+var_C]
.text:0000049D                 jnz     short loc_4AA
.text:0000049F                 mov     eax, [ebp+var_4]
.text:000004A2                 add     eax, 1
.text:000004A5                 mov     [ebp+var_4], eax
.text:000004A8                 jmp     short loc_48D
.text:000004AA ; ---------------------------------------------------------------------------
.text:000004AA
.text:000004AA loc_4AA:                                ; CODE XREF: RestartModel(x)+1EDj
.text:000004AA                 mov     [ebp+var_8], 0
.text:000004B1                 jmp     short loc_4BC
.text:000004B3 ; ---------------------------------------------------------------------------
.text:000004B3
.text:000004B3 loc_4B3:                                ; CODE XREF: RestartModel(x):loc_523j
.text:000004B3                 mov     ecx, [ebp+var_8]
.text:000004B6                 add     ecx, 1
.text:000004B9                 mov     [ebp+var_8], ecx
.text:000004BC
.text:000004BC loc_4BC:                                ; CODE XREF: RestartModel(x)+201j
.text:000004BC                 cmp     [ebp+var_8], 8
.text:000004C0                 jnb     short loc_525
.text:000004C2                 mov     edx, [ebp+var_8]
.text:000004C5                 movzx   eax, _kInitBinEsc[edx*2]
.text:000004CD                 mov     ecx, [ebp+var_4]
.text:000004D0                 add     ecx, 1
.text:000004D3                 xor     edx, edx
.text:000004D5                 div     ecx
.text:000004D7                 mov     edx, 4000h
.text:000004DC                 sub     edx, eax
.text:000004DE                 mov     [ebp+var_18], dx
.text:000004E2                 mov     eax, [ebp+var_C]
.text:000004E5                 shl     eax, 7
.text:000004E8                 mov     ecx, [ebp+arg_0]
.text:000004EB                 lea     edx, [ecx+eax+1038h]
.text:000004F2                 mov     eax, [ebp+var_8]
.text:000004F5                 lea     ecx, [edx+eax*2]
.text:000004F8                 mov     [ebp+var_1C], ecx
.text:000004FB                 mov     [ebp+var_10], 0
.text:00000502                 jmp     short loc_50D
.text:00000504 ; ---------------------------------------------------------------------------
.text:00000504
.text:00000504 loc_504:                                ; CODE XREF: RestartModel(x)+271j
.text:00000504                 mov     edx, [ebp+var_10]
.text:00000507                 add     edx, 8
.text:0000050A                 mov     [ebp+var_10], edx
.text:0000050D
.text:0000050D loc_50D:                                ; CODE XREF: RestartModel(x)+252j
.text:0000050D                 cmp     [ebp+var_10], 40h ; '@'
.text:00000511                 jnb     short loc_523
.text:00000513                 mov     eax, [ebp+var_10]
.text:00000516                 mov     ecx, [ebp+var_1C]
.text:00000519                 mov     dx, [ebp+var_18]
.text:0000051D                 mov     [ecx+eax*2], dx
.text:00000521                 jmp     short loc_504
.text:00000523 ; ---------------------------------------------------------------------------
.text:00000523
.text:00000523 loc_523:                                ; CODE XREF: RestartModel(x)+261j
.text:00000523                 jmp     short loc_4B3
.text:00000525 ; ---------------------------------------------------------------------------
.text:00000525
.text:00000525 loc_525:                                ; CODE XREF: RestartModel(x)+210j
.text:00000525                 jmp     loc_47A
.text:0000052A ; ---------------------------------------------------------------------------
.text:0000052A
.text:0000052A loc_52A:                                ; CODE XREF: RestartModel(x)+1D7j
.text:0000052A                 mov     [ebp+var_C], 0
.text:00000531                 mov     eax, [ebp+var_C]
.text:00000534                 mov     [ebp+var_4], eax
.text:00000537                 jmp     short loc_542
.text:00000539 ; ---------------------------------------------------------------------------
.text:00000539
.text:00000539 loc_539:                                ; CODE XREF: RestartModel(x):loc_5BDj
.text:00000539                 mov     ecx, [ebp+var_C]
.text:0000053C                 add     ecx, 1
.text:0000053F                 mov     [ebp+var_C], ecx
.text:00000542
.text:00000542 loc_542:                                ; CODE XREF: RestartModel(x)+287j
.text:00000542                 cmp     [ebp+var_C], 18h
.text:00000546                 jnb     short loc_5C2
.text:00000548
.text:00000548 loc_548:                                ; CODE XREF: RestartModel(x)+2B8j
.text:00000548                 mov     edx, [ebp+arg_0]
.text:0000054B                 add     edx, [ebp+var_4]
.text:0000054E                 movzx   eax, byte ptr [edx+333h]
.text:00000555                 mov     ecx, [ebp+var_C]
.text:00000558                 add     ecx, 3
.text:0000055B                 cmp     eax, ecx
.text:0000055D                 jnz     short loc_56A
.text:0000055F                 mov     edx, [ebp+var_4]
.text:00000562                 add     edx, 1
.text:00000565                 mov     [ebp+var_4], edx
.text:00000568                 jmp     short loc_548
.text:0000056A ; ---------------------------------------------------------------------------
.text:0000056A
.text:0000056A loc_56A:                                ; CODE XREF: RestartModel(x)+2ADj
.text:0000056A                 mov     [ebp+var_8], 0
.text:00000571                 jmp     short loc_57C
.text:00000573 ; ---------------------------------------------------------------------------
.text:00000573
.text:00000573 loc_573:                                ; CODE XREF: RestartModel(x)+30Bj
.text:00000573                 mov     eax, [ebp+var_8]
.text:00000576                 add     eax, 1
.text:00000579                 mov     [ebp+var_8], eax
.text:0000057C
.text:0000057C loc_57C:                                ; CODE XREF: RestartModel(x)+2C1j
.text:0000057C                 cmp     [ebp+var_8], 20h ; ' '
.text:00000580                 jnb     short loc_5BD
.text:00000582                 mov     ecx, [ebp+var_C]
.text:00000585                 shl     ecx, 7
.text:00000588                 mov     edx, [ebp+arg_0]
.text:0000058B                 lea     eax, [edx+ecx+438h]
.text:00000592                 mov     ecx, [ebp+var_8]
.text:00000595                 lea     edx, [eax+ecx*4]
.text:00000598                 mov     [ebp+var_20], edx
.text:0000059B                 mov     eax, [ebp+var_20]
.text:0000059E                 mov     byte ptr [eax+2], 3
.text:000005A2                 mov     ecx, [ebp+var_4]
.text:000005A5                 shl     ecx, 1
.text:000005A7                 lea     edx, ds:28h[ecx*8]
.text:000005AE                 mov     eax, [ebp+var_20]
.text:000005B1                 mov     [eax], dx
.text:000005B4                 mov     ecx, [ebp+var_20]
.text:000005B7                 mov     byte ptr [ecx+3], 7
.text:000005BB                 jmp     short loc_573
.text:000005BD ; ---------------------------------------------------------------------------
.text:000005BD
.text:000005BD loc_5BD:                                ; CODE XREF: RestartModel(x)+2D0j
.text:000005BD                 jmp     loc_539
.text:000005C2 ; ---------------------------------------------------------------------------
.text:000005C2
.text:000005C2 loc_5C2:                                ; CODE XREF: RestartModel(x)+296j
.text:000005C2                 pop     edi
.text:000005C3                 add     esp, 30h
.text:000005C6                 cmp     ebp, esp
.text:000005C8                 call    __RTC_CheckEsp
.text:000005CD                 mov     esp, ebp
.text:000005CF                 pop     ebp
.text:000005D0                 retn    4
.text:000005D0 _RestartModel@4 endp
.text:000005D0
.text:000005D0 ; ---------------------------------------------------------------------------
.text:000005D3                 align 10h
.text:000005E0
.text:000005E0 ; =============== S U B R O U T I N E =======================================
.text:000005E0
.text:000005E0 ; Attributes: bp-based frame
.text:000005E0
.text:000005E0 ; __stdcall SetSuccessor(x, x)
.text:000005E0 _SetSuccessor@8 proc near               ; CODE XREF: RestartModel(x)+1B4p
.text:000005E0                                         ; UpdateModel(x)+17Fp ...
.text:000005E0
.text:000005E0 arg_0           = dword ptr  8
.text:000005E0 arg_4           = dword ptr  0Ch
.text:000005E0
.text:000005E0                 push    ebp
.text:000005E1                 mov     ebp, esp
.text:000005E3                 mov     eax, [ebp+arg_4]
.text:000005E6                 and     eax, 0FFFFh
.text:000005EB                 mov     ecx, [ebp+arg_0]
.text:000005EE                 mov     [ecx+2], ax
.text:000005F2                 mov     edx, [ebp+arg_4]
.text:000005F5                 shr     edx, 10h
.text:000005F8                 and     edx, 0FFFFh
.text:000005FE                 mov     eax, [ebp+arg_0]
.text:00000601                 mov     [eax+4], dx
.text:00000605                 pop     ebp
.text:00000606                 retn    8
.text:00000606 _SetSuccessor@8 endp
.text:00000606
.text:00000606 ; ---------------------------------------------------------------------------
.text:00000609                 align 10h
.text:00000610
.text:00000610 ; =============== S U B R O U T I N E =======================================
.text:00000610
.text:00000610 ; Attributes: bp-based frame
.text:00000610
.text:00000610 ; __stdcall Ppmd8_MakeEscFreq(x, x, x)
.text:00000610                 public _Ppmd8_MakeEscFreq@12
.text:00000610 _Ppmd8_MakeEscFreq@12 proc near
.text:00000610
.text:00000610 var_8           = dword ptr -8
.text:00000610 var_4           = dword ptr -4
.text:00000610 arg_0           = dword ptr  8
.text:00000610 arg_4           = dword ptr  0Ch
.text:00000610 arg_8           = dword ptr  10h
.text:00000610
.text:00000610                 push    ebp
.text:00000611                 mov     ebp, esp
.text:00000613                 sub     esp, 8
.text:00000616                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000061D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000624                 mov     eax, [ebp+arg_0]
.text:00000627                 mov     ecx, [eax]
.text:00000629                 movzx   edx, byte ptr [ecx]
.text:0000062C                 cmp     edx, 0FFh
.text:00000632                 jz      loc_6E1
.text:00000638                 mov     eax, [ebp+arg_0]
.text:0000063B                 mov     ecx, [eax]
.text:0000063D                 movzx   edx, byte ptr [ecx]
.text:00000640                 mov     eax, [ebp+arg_0]
.text:00000643                 movzx   ecx, byte ptr [eax+edx+332h]
.text:0000064B                 sub     ecx, 3
.text:0000064E                 shl     ecx, 7
.text:00000651                 mov     edx, [ebp+arg_0]
.text:00000654                 lea     eax, [edx+ecx+438h]
.text:0000065B                 mov     ecx, [ebp+arg_0]
.text:0000065E                 mov     edx, [ecx]
.text:00000660                 movzx   ecx, word ptr [edx+2]
.text:00000664                 mov     edx, [ebp+arg_0]
.text:00000667                 mov     edx, [edx]
.text:00000669                 movzx   edx, byte ptr [edx]
.text:0000066C                 add     edx, 1
.text:0000066F                 imul    edx, 0Bh
.text:00000672                 cmp     edx, ecx
.text:00000674                 sbb     ecx, ecx
.text:00000676                 neg     ecx
.text:00000678                 lea     edx, [eax+ecx*4]
.text:0000067B                 mov     eax, [ebp+arg_0]
.text:0000067E                 mov     ecx, [eax]
.text:00000680                 movzx   eax, byte ptr [ecx]
.text:00000683                 shl     eax, 1
.text:00000685                 mov     ecx, [ebp+arg_0]
.text:00000688                 mov     ecx, [ecx]
.text:0000068A                 mov     ecx, [ecx+8]
.text:0000068D                 movzx   ecx, byte ptr [ecx]
.text:00000690                 add     ecx, [ebp+arg_4]
.text:00000693                 cmp     eax, ecx
.text:00000695                 sbb     eax, eax
.text:00000697                 neg     eax
.text:00000699                 shl     eax, 1
.text:0000069B                 lea     ecx, [edx+eax*4]
.text:0000069E                 mov     edx, [ebp+arg_0]
.text:000006A1                 mov     eax, [edx]
.text:000006A3                 movzx   edx, byte ptr [eax+1]
.text:000006A7                 lea     eax, [ecx+edx*4]
.text:000006AA                 mov     [ebp+var_4], eax
.text:000006AD                 mov     ecx, [ebp+var_4]
.text:000006B0                 movzx   edx, word ptr [ecx]
.text:000006B3                 mov     eax, [ebp+var_4]
.text:000006B6                 movzx   ecx, byte ptr [eax+2]
.text:000006BA                 sar     edx, cl
.text:000006BC                 mov     [ebp+var_8], edx
.text:000006BF                 mov     ecx, [ebp+var_4]
.text:000006C2                 movzx   edx, word ptr [ecx]
.text:000006C5                 sub     edx, [ebp+var_8]
.text:000006C8                 mov     eax, [ebp+var_4]
.text:000006CB                 mov     [eax], dx
.text:000006CE                 xor     ecx, ecx
.text:000006D0                 cmp     [ebp+var_8], 0
.text:000006D4                 setz    cl
.text:000006D7                 add     ecx, [ebp+var_8]
.text:000006DA                 mov     edx, [ebp+arg_8]
.text:000006DD                 mov     [edx], ecx
.text:000006DF                 jmp     short loc_6F5
.text:000006E1 ; ---------------------------------------------------------------------------
.text:000006E1
.text:000006E1 loc_6E1:                                ; CODE XREF: Ppmd8_MakeEscFreq(x,x,x)+22j
.text:000006E1                 mov     eax, [ebp+arg_0]
.text:000006E4                 add     eax, 434h
.text:000006E9                 mov     [ebp+var_4], eax
.text:000006EC                 mov     ecx, [ebp+arg_8]
.text:000006EF                 mov     dword ptr [ecx], 1
.text:000006F5
.text:000006F5 loc_6F5:                                ; CODE XREF: Ppmd8_MakeEscFreq(x,x,x)+CFj
.text:000006F5                 mov     eax, [ebp+var_4]
.text:000006F8                 mov     esp, ebp
.text:000006FA                 pop     ebp
.text:000006FB                 retn    0Ch
.text:000006FB _Ppmd8_MakeEscFreq@12 endp
.text:000006FB
.text:000006FB ; ---------------------------------------------------------------------------
.text:000006FE                 align 10h
.text:00000700
.text:00000700 ; =============== S U B R O U T I N E =======================================
.text:00000700
.text:00000700 ; Attributes: bp-based frame
.text:00000700
.text:00000700 ; __stdcall Ppmd8_Update1(x)
.text:00000700                 public _Ppmd8_Update1@4
.text:00000700 _Ppmd8_Update1@4 proc near
.text:00000700
.text:00000700 var_4           = dword ptr -4
.text:00000700 arg_0           = dword ptr  8
.text:00000700
.text:00000700                 push    ebp
.text:00000701                 mov     ebp, esp
.text:00000703                 push    ecx
.text:00000704                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000070B                 mov     eax, [ebp+arg_0]
.text:0000070E                 mov     ecx, [eax+8]
.text:00000711                 mov     [ebp+var_4], ecx
.text:00000714                 mov     edx, [ebp+var_4]
.text:00000717                 movzx   eax, byte ptr [edx+1]
.text:0000071B                 add     eax, 4
.text:0000071E                 mov     ecx, [ebp+var_4]
.text:00000721                 mov     [ecx+1], al
.text:00000724                 mov     edx, [ebp+arg_0]
.text:00000727                 mov     eax, [edx]
.text:00000729                 movzx   ecx, word ptr [eax+2]
.text:0000072D                 add     ecx, 4
.text:00000730                 mov     edx, [ebp+arg_0]
.text:00000733                 mov     eax, [edx]
.text:00000735                 mov     [eax+2], cx
.text:00000739                 mov     ecx, [ebp+var_4]
.text:0000073C                 movzx   edx, byte ptr [ecx+1]
.text:00000740                 mov     eax, [ebp+var_4]
.text:00000743                 movzx   ecx, byte ptr [eax-5]
.text:00000747                 cmp     edx, ecx
.text:00000749                 jle     short loc_782
.text:0000074B                 mov     edx, [ebp+var_4]
.text:0000074E                 sub     edx, 6
.text:00000751                 push    edx
.text:00000752                 mov     eax, [ebp+var_4]
.text:00000755                 push    eax
.text:00000756                 call    _SwapStates@8   ; SwapStates(x,x)
.text:0000075B                 mov     ecx, [ebp+var_4]
.text:0000075E                 sub     ecx, 6
.text:00000761                 mov     [ebp+var_4], ecx
.text:00000764                 mov     edx, [ebp+arg_0]
.text:00000767                 mov     eax, [ebp+var_4]
.text:0000076A                 mov     [edx+8], eax
.text:0000076D                 mov     ecx, [ebp+var_4]
.text:00000770                 movzx   edx, byte ptr [ecx+1]
.text:00000774                 cmp     edx, 7Ch ; '|'
.text:00000777                 jle     short loc_782
.text:00000779                 mov     eax, [ebp+arg_0]
.text:0000077C                 push    eax
.text:0000077D                 call    _Rescale@4      ; Rescale(x)
.text:00000782
.text:00000782 loc_782:                                ; CODE XREF: Ppmd8_Update1(x)+49j
.text:00000782                                         ; Ppmd8_Update1(x)+77j
.text:00000782                 mov     ecx, [ebp+arg_0]
.text:00000785                 push    ecx
.text:00000786                 call    _NextContext@4  ; NextContext(x)
.text:0000078B                 add     esp, 4
.text:0000078E                 cmp     ebp, esp
.text:00000790                 call    __RTC_CheckEsp
.text:00000795                 mov     esp, ebp
.text:00000797                 pop     ebp
.text:00000798                 retn    4
.text:00000798 _Ppmd8_Update1@4 endp
.text:00000798
.text:00000798 ; ---------------------------------------------------------------------------
.text:0000079B                 align 10h
.text:000007A0
.text:000007A0 ; =============== S U B R O U T I N E =======================================
.text:000007A0
.text:000007A0 ; Attributes: bp-based frame
.text:000007A0
.text:000007A0 ; __stdcall SwapStates(x, x)
.text:000007A0 _SwapStates@8   proc near               ; CODE XREF: Ppmd8_Update1(x)+56p
.text:000007A0                                         ; UpdateModel(x)+105p ...
.text:000007A0
.text:000007A0 var_10          = dword ptr -10h
.text:000007A0 var_C           = dword ptr -0Ch
.text:000007A0 var_8           = dword ptr -8
.text:000007A0 var_4           = dword ptr -4
.text:000007A0 arg_0           = dword ptr  8
.text:000007A0 arg_4           = dword ptr  0Ch
.text:000007A0
.text:000007A0                 push    ebp
.text:000007A1                 mov     ebp, esp
.text:000007A3                 sub     esp, 10h
.text:000007A6                 mov     eax, 0CCCCCCCCh
.text:000007AB                 mov     [ebp+var_10], eax
.text:000007AE                 mov     [ebp+var_C], eax
.text:000007B1                 mov     [ebp+var_8], eax
.text:000007B4                 mov     [ebp+var_4], eax
.text:000007B7                 mov     eax, [ebp+arg_0]
.text:000007BA                 mov     ecx, [eax]
.text:000007BC                 mov     [ebp+var_C], ecx
.text:000007BF                 mov     dx, [eax+4]
.text:000007C3                 mov     word ptr [ebp+var_8], dx
.text:000007C7                 mov     eax, [ebp+arg_4]
.text:000007CA                 mov     ecx, [ebp+arg_0]
.text:000007CD                 mov     edx, [eax]
.text:000007CF                 mov     [ecx], edx
.text:000007D1                 mov     ax, [eax+4]
.text:000007D5                 mov     [ecx+4], ax
.text:000007D9                 mov     ecx, [ebp+arg_4]
.text:000007DC                 mov     edx, [ebp+var_C]
.text:000007DF                 mov     [ecx], edx
.text:000007E1                 mov     ax, word ptr [ebp+var_8]
.text:000007E5                 mov     [ecx+4], ax
.text:000007E9                 push    edx
.text:000007EA                 mov     ecx, ebp
.text:000007EC                 push    eax
.text:000007ED                 lea     edx, $LN5
.text:000007F3                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000007F8                 pop     eax
.text:000007F9                 pop     edx
.text:000007FA                 mov     esp, ebp
.text:000007FC                 pop     ebp
.text:000007FD                 retn    8
.text:000007FD _SwapStates@8   endp
.text:000007FD
.text:000007FD ; ---------------------------------------------------------------------------
.text:00000800 $LN5            dd 1                    ; DATA XREF: SwapStates(x,x)+4Do
.text:00000804                 dd offset $LN4
.text:00000808 $LN4            dd 0FFFFFFF4h, 6        ; DATA XREF: .text:00000804o
.text:00000810                 dd offset $LN3
.text:00000814 $LN3            dd 706D74h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00000810o
.text:00000820
.text:00000820 ; =============== S U B R O U T I N E =======================================
.text:00000820
.text:00000820 ; Attributes: bp-based frame
.text:00000820
.text:00000820 ; __stdcall Rescale(x)
.text:00000820 _Rescale@4      proc near               ; CODE XREF: Ppmd8_Update1(x)+7Dp
.text:00000820                                         ; Ppmd8_Update1_0(x)+7Dp ...
.text:00000820
.text:00000820 var_5C          = dword ptr -5Ch
.text:00000820 var_54          = dword ptr -54h
.text:00000820 var_50          = word ptr -50h
.text:00000820 var_48          = dword ptr -48h
.text:00000820 var_44          = dword ptr -44h
.text:00000820 var_40          = dword ptr -40h
.text:00000820 var_38          = dword ptr -38h
.text:00000820 var_34          = word ptr -34h
.text:00000820 var_2C          = dword ptr -2Ch
.text:00000820 var_24          = dword ptr -24h
.text:00000820 var_20          = word ptr -20h
.text:00000820 var_18          = dword ptr -18h
.text:00000820 var_14          = dword ptr -14h
.text:00000820 var_10          = dword ptr -10h
.text:00000820 var_C           = dword ptr -0Ch
.text:00000820 var_8           = dword ptr -8
.text:00000820 var_4           = dword ptr -4
.text:00000820 arg_0           = dword ptr  8
.text:00000820
.text:00000820                 push    ebp
.text:00000821                 mov     ebp, esp
.text:00000823                 sub     esp, 5Ch
.text:00000826                 push    edi
.text:00000827                 lea     edi, [ebp+var_5C]
.text:0000082A                 mov     ecx, 17h
.text:0000082F                 mov     eax, 0CCCCCCCCh
.text:00000834                 rep stosd
.text:00000836                 mov     eax, [ebp+arg_0]
.text:00000839                 mov     ecx, [eax]
.text:0000083B                 mov     edx, [ecx+4]
.text:0000083E                 mov     [ebp+var_14], edx
.text:00000841                 mov     eax, [ebp+arg_0]
.text:00000844                 mov     ecx, [eax+8]
.text:00000847                 mov     [ebp+var_18], ecx
.text:0000084A                 mov     edx, [ebp+var_18]
.text:0000084D                 mov     eax, [edx]
.text:0000084F                 mov     [ebp+var_24], eax
.text:00000852                 mov     cx, [edx+4]
.text:00000856                 mov     [ebp+var_20], cx
.text:0000085A                 jmp     short loc_865
.text:0000085C ; ---------------------------------------------------------------------------
.text:0000085C
.text:0000085C loc_85C:                                ; CODE XREF: Rescale(x)+62j
.text:0000085C                 mov     edx, [ebp+var_18]
.text:0000085F                 sub     edx, 6
.text:00000862                 mov     [ebp+var_18], edx
.text:00000865
.text:00000865 loc_865:                                ; CODE XREF: Rescale(x)+3Aj
.text:00000865                 mov     eax, [ebp+var_18]
.text:00000868                 cmp     eax, [ebp+var_14]
.text:0000086B                 jz      short loc_884
.text:0000086D                 mov     ecx, [ebp+var_18]
.text:00000870                 sub     ecx, 6
.text:00000873                 mov     edx, [ebp+var_18]
.text:00000876                 mov     eax, [ecx]
.text:00000878                 mov     [edx], eax
.text:0000087A                 mov     cx, [ecx+4]
.text:0000087E                 mov     [edx+4], cx
.text:00000882                 jmp     short loc_85C
.text:00000884 ; ---------------------------------------------------------------------------
.text:00000884
.text:00000884 loc_884:                                ; CODE XREF: Rescale(x)+4Bj
.text:00000884                 mov     edx, [ebp+var_18]
.text:00000887                 mov     eax, [ebp+var_24]
.text:0000088A                 mov     [edx], eax
.text:0000088C                 mov     cx, [ebp+var_20]
.text:00000890                 mov     [edx+4], cx
.text:00000894                 mov     edx, [ebp+arg_0]
.text:00000897                 mov     eax, [edx]
.text:00000899                 movzx   ecx, word ptr [eax+2]
.text:0000089D                 mov     edx, [ebp+var_18]
.text:000008A0                 movzx   eax, byte ptr [edx+1]
.text:000008A4                 sub     ecx, eax
.text:000008A6                 mov     [ebp+var_10], ecx
.text:000008A9                 mov     ecx, [ebp+var_18]
.text:000008AC                 movzx   edx, byte ptr [ecx+1]
.text:000008B0                 add     edx, 4
.text:000008B3                 mov     eax, [ebp+var_18]
.text:000008B6                 mov     [eax+1], dl
.text:000008B9                 mov     ecx, [ebp+arg_0]
.text:000008BC                 xor     edx, edx
.text:000008BE                 cmp     dword ptr [ecx+0Ch], 0
.text:000008C2                 setnz   dl
.text:000008C5                 mov     [ebp+var_8], edx
.text:000008C8                 mov     eax, [ebp+var_18]
.text:000008CB                 movzx   ecx, byte ptr [eax+1]
.text:000008CF                 add     ecx, [ebp+var_8]
.text:000008D2                 shr     ecx, 1
.text:000008D4                 mov     edx, [ebp+var_18]
.text:000008D7                 mov     [edx+1], cl
.text:000008DA                 mov     eax, [ebp+var_18]
.text:000008DD                 movzx   ecx, byte ptr [eax+1]
.text:000008E1                 mov     [ebp+var_C], ecx
.text:000008E4                 mov     edx, [ebp+arg_0]
.text:000008E7                 mov     eax, [edx]
.text:000008E9                 movzx   ecx, byte ptr [eax]
.text:000008EC                 mov     [ebp+var_4], ecx
.text:000008EF
.text:000008EF loc_8EF:                                ; CODE XREF: Rescale(x)+17Cj
.text:000008EF                 mov     edx, [ebp+var_18]
.text:000008F2                 add     edx, 6
.text:000008F5                 mov     [ebp+var_18], edx
.text:000008F8                 mov     eax, [ebp+var_18]
.text:000008FB                 movzx   ecx, byte ptr [eax+1]
.text:000008FF                 mov     edx, [ebp+var_10]
.text:00000902                 sub     edx, ecx
.text:00000904                 mov     [ebp+var_10], edx
.text:00000907                 mov     eax, [ebp+var_18]
.text:0000090A                 movzx   ecx, byte ptr [eax+1]
.text:0000090E                 add     ecx, [ebp+var_8]
.text:00000911                 shr     ecx, 1
.text:00000913                 mov     edx, [ebp+var_18]
.text:00000916                 mov     [edx+1], cl
.text:00000919                 mov     eax, [ebp+var_18]
.text:0000091C                 movzx   ecx, byte ptr [eax+1]
.text:00000920                 add     ecx, [ebp+var_C]
.text:00000923                 mov     [ebp+var_C], ecx
.text:00000926                 mov     edx, [ebp+var_18]
.text:00000929                 movzx   eax, byte ptr [edx+1]
.text:0000092D                 mov     ecx, [ebp+var_18]
.text:00000930                 movzx   edx, byte ptr [ecx-5]
.text:00000934                 cmp     eax, edx
.text:00000936                 jle     short loc_993
.text:00000938                 mov     eax, [ebp+var_18]
.text:0000093B                 mov     [ebp+var_2C], eax
.text:0000093E                 mov     ecx, [ebp+var_2C]
.text:00000941                 mov     edx, [ecx]
.text:00000943                 mov     [ebp+var_38], edx
.text:00000946                 mov     ax, [ecx+4]
.text:0000094A                 mov     [ebp+var_34], ax
.text:0000094E
.text:0000094E loc_94E:                                ; CODE XREF: Rescale(x)+161j
.text:0000094E                 mov     ecx, [ebp+var_2C]
.text:00000951                 sub     ecx, 6
.text:00000954                 mov     edx, [ebp+var_2C]
.text:00000957                 mov     eax, [ecx]
.text:00000959                 mov     [edx], eax
.text:0000095B                 mov     cx, [ecx+4]
.text:0000095F                 mov     [edx+4], cx
.text:00000963                 mov     edx, [ebp+var_2C]
.text:00000966                 sub     edx, 6
.text:00000969                 mov     [ebp+var_2C], edx
.text:0000096C                 mov     eax, [ebp+var_2C]
.text:0000096F                 cmp     eax, [ebp+var_14]
.text:00000972                 jz      short loc_983
.text:00000974                 movzx   ecx, byte ptr [ebp+var_38+1]
.text:00000978                 mov     edx, [ebp+var_2C]
.text:0000097B                 movzx   eax, byte ptr [edx-5]
.text:0000097F                 cmp     ecx, eax
.text:00000981                 jg      short loc_94E
.text:00000983
.text:00000983 loc_983:                                ; CODE XREF: Rescale(x)+152j
.text:00000983                 mov     ecx, [ebp+var_2C]
.text:00000986                 mov     edx, [ebp+var_38]
.text:00000989                 mov     [ecx], edx
.text:0000098B                 mov     ax, [ebp+var_34]
.text:0000098F                 mov     [ecx+4], ax
.text:00000993
.text:00000993 loc_993:                                ; CODE XREF: Rescale(x)+116j
.text:00000993                 mov     ecx, [ebp+var_4]
.text:00000996                 sub     ecx, 1
.text:00000999                 mov     [ebp+var_4], ecx
.text:0000099C                 jnz     loc_8EF
.text:000009A2                 mov     edx, [ebp+var_18]
.text:000009A5                 movzx   eax, byte ptr [edx+1]
.text:000009A9                 test    eax, eax
.text:000009AB                 jnz     loc_B64
.text:000009B1                 mov     ecx, [ebp+arg_0]
.text:000009B4                 mov     edx, [ecx]
.text:000009B6                 movzx   eax, byte ptr [edx]
.text:000009B9                 mov     [ebp+var_40], eax
.text:000009BC
.text:000009BC loc_9BC:                                ; CODE XREF: Rescale(x)+1B7j
.text:000009BC                 mov     ecx, [ebp+var_4]
.text:000009BF                 add     ecx, 1
.text:000009C2                 mov     [ebp+var_4], ecx
.text:000009C5                 mov     edx, [ebp+var_18]
.text:000009C8                 sub     edx, 6
.text:000009CB                 mov     [ebp+var_18], edx
.text:000009CE                 mov     eax, [ebp+var_18]
.text:000009D1                 movzx   ecx, byte ptr [eax+1]
.text:000009D5                 test    ecx, ecx
.text:000009D7                 jz      short loc_9BC
.text:000009D9                 mov     edx, [ebp+var_10]
.text:000009DC                 add     edx, [ebp+var_4]
.text:000009DF                 mov     [ebp+var_10], edx
.text:000009E2                 mov     eax, [ebp+arg_0]
.text:000009E5                 mov     ecx, [eax]
.text:000009E7                 movzx   edx, byte ptr [ecx]
.text:000009EA                 sub     edx, [ebp+var_4]
.text:000009ED                 mov     eax, [ebp+arg_0]
.text:000009F0                 mov     ecx, [eax]
.text:000009F2                 mov     [ecx], dl
.text:000009F4                 mov     edx, [ebp+arg_0]
.text:000009F7                 mov     eax, [edx]
.text:000009F9                 movzx   ecx, byte ptr [eax]
.text:000009FC                 test    ecx, ecx
.text:000009FE                 jnz     loc_A9E
.text:00000A04                 mov     edx, [ebp+var_14]
.text:00000A07                 mov     eax, [edx]
.text:00000A09                 mov     [ebp+var_54], eax
.text:00000A0C                 mov     cx, [edx+4]
.text:00000A10                 mov     [ebp+var_50], cx
.text:00000A14                 movzx   edx, byte ptr [ebp+var_54+1]
.text:00000A18                 mov     eax, [ebp+var_10]
.text:00000A1B                 lea     eax, [eax+edx*2-1]
.text:00000A1F                 xor     edx, edx
.text:00000A21                 div     [ebp+var_10]
.text:00000A24                 mov     byte ptr [ebp+var_54+1], al
.text:00000A27                 movzx   ecx, byte ptr [ebp+var_54+1]
.text:00000A2B                 cmp     ecx, 29h ; ')'
.text:00000A2E                 jle     short loc_A34
.text:00000A30                 mov     byte ptr [ebp+var_54+1], 29h ; ')'
.text:00000A34
.text:00000A34 loc_A34:                                ; CODE XREF: Rescale(x)+20Ej
.text:00000A34                 mov     edx, [ebp+var_40]
.text:00000A37                 add     edx, 2
.text:00000A3A                 shr     edx, 1
.text:00000A3C                 mov     eax, [ebp+arg_0]
.text:00000A3F                 movzx   ecx, byte ptr [eax+edx+7Dh]
.text:00000A44                 push    ecx
.text:00000A45                 mov     edx, [ebp+var_14]
.text:00000A48                 push    edx
.text:00000A49                 mov     eax, [ebp+arg_0]
.text:00000A4C                 push    eax
.text:00000A4D                 call    _InsertNode@12  ; InsertNode(x,x,x)
.text:00000A52                 mov     ecx, [ebp+arg_0]
.text:00000A55                 mov     edx, [ecx]
.text:00000A57                 movzx   eax, byte ptr [edx+1]
.text:00000A5B                 and     eax, 10h
.text:00000A5E                 movzx   ecx, byte ptr [ebp+var_54]
.text:00000A62                 xor     edx, edx
.text:00000A64                 cmp     ecx, 40h ; '@'
.text:00000A67                 setnl   dl
.text:00000A6A                 lea     eax, [eax+edx*8]
.text:00000A6D                 mov     ecx, [ebp+arg_0]
.text:00000A70                 mov     edx, [ecx]
.text:00000A72                 mov     [edx+1], al
.text:00000A75                 mov     eax, [ebp+arg_0]
.text:00000A78                 mov     ecx, [eax]
.text:00000A7A                 add     ecx, 2
.text:00000A7D                 mov     [ebp+var_5C], ecx
.text:00000A80                 mov     edx, [ebp+arg_0]
.text:00000A83                 mov     eax, [ebp+var_5C]
.text:00000A86                 mov     [edx+8], eax
.text:00000A89                 mov     ecx, [ebp+var_5C]
.text:00000A8C                 mov     edx, [ebp+var_54]
.text:00000A8F                 mov     [ecx], edx
.text:00000A91                 mov     ax, [ebp+var_50]
.text:00000A95                 mov     [ecx+4], ax
.text:00000A99                 jmp     loc_B9C
.text:00000A9E ; ---------------------------------------------------------------------------
.text:00000A9E
.text:00000A9E loc_A9E:                                ; CODE XREF: Rescale(x)+1DEj
.text:00000A9E                 mov     ecx, [ebp+var_40]
.text:00000AA1                 add     ecx, 2
.text:00000AA4                 shr     ecx, 1
.text:00000AA6                 mov     [ebp+var_44], ecx
.text:00000AA9                 mov     edx, [ebp+arg_0]
.text:00000AAC                 mov     eax, [edx]
.text:00000AAE                 movzx   ecx, byte ptr [eax]
.text:00000AB1                 add     ecx, 2
.text:00000AB4                 sar     ecx, 1
.text:00000AB6                 mov     [ebp+var_48], ecx
.text:00000AB9                 mov     edx, [ebp+var_44]
.text:00000ABC                 cmp     edx, [ebp+var_48]
.text:00000ABF                 jz      short loc_ADE
.text:00000AC1                 mov     eax, [ebp+var_48]
.text:00000AC4                 push    eax
.text:00000AC5                 mov     ecx, [ebp+var_44]
.text:00000AC8                 push    ecx
.text:00000AC9                 mov     edx, [ebp+var_14]
.text:00000ACC                 push    edx
.text:00000ACD                 mov     eax, [ebp+arg_0]
.text:00000AD0                 push    eax
.text:00000AD1                 call    _ShrinkUnits@16 ; ShrinkUnits(x,x,x,x)
.text:00000AD6                 mov     ecx, [ebp+arg_0]
.text:00000AD9                 mov     edx, [ecx]
.text:00000ADB                 mov     [edx+4], eax
.text:00000ADE
.text:00000ADE loc_ADE:                                ; CODE XREF: Rescale(x)+29Fj
.text:00000ADE                 mov     eax, [ebp+arg_0]
.text:00000AE1                 mov     ecx, [eax]
.text:00000AE3                 movzx   edx, byte ptr [ecx+1]
.text:00000AE7                 and     edx, 0FFFFFFF7h
.text:00000AEA                 mov     eax, [ebp+arg_0]
.text:00000AED                 mov     ecx, [eax]
.text:00000AEF                 mov     [ecx+1], dl
.text:00000AF2                 mov     edx, [ebp+arg_0]
.text:00000AF5                 mov     eax, [edx]
.text:00000AF7                 mov     ecx, [eax+4]
.text:00000AFA                 mov     [ebp+var_18], ecx
.text:00000AFD                 mov     edx, [ebp+arg_0]
.text:00000B00                 mov     eax, [edx]
.text:00000B02                 mov     ecx, [ebp+var_18]
.text:00000B05                 movzx   edx, byte ptr [ecx]
.text:00000B08                 xor     ecx, ecx
.text:00000B0A                 cmp     edx, 40h ; '@'
.text:00000B0D                 setnl   cl
.text:00000B10                 shl     ecx, 3
.text:00000B13                 mov     edx, [ebp+arg_0]
.text:00000B16                 mov     edx, [edx]
.text:00000B18                 movzx   edx, byte ptr [edx+1]
.text:00000B1C                 or      edx, ecx
.text:00000B1E                 mov     [eax+1], dl
.text:00000B21                 mov     eax, [ebp+arg_0]
.text:00000B24                 mov     ecx, [eax]
.text:00000B26                 movzx   edx, byte ptr [ecx]
.text:00000B29                 mov     [ebp+var_4], edx
.text:00000B2C
.text:00000B2C loc_B2C:                                ; CODE XREF: Rescale(x)+342j
.text:00000B2C                 mov     eax, [ebp+var_18]
.text:00000B2F                 add     eax, 6
.text:00000B32                 mov     [ebp+var_18], eax
.text:00000B35                 mov     ecx, [ebp+arg_0]
.text:00000B38                 mov     edx, [ecx]
.text:00000B3A                 mov     eax, [ebp+var_18]
.text:00000B3D                 movzx   ecx, byte ptr [eax]
.text:00000B40                 xor     eax, eax
.text:00000B42                 cmp     ecx, 40h ; '@'
.text:00000B45                 setnl   al
.text:00000B48                 shl     eax, 3
.text:00000B4B                 mov     ecx, [ebp+arg_0]
.text:00000B4E                 mov     ecx, [ecx]
.text:00000B50                 movzx   ecx, byte ptr [ecx+1]
.text:00000B54                 or      ecx, eax
.text:00000B56                 mov     [edx+1], cl
.text:00000B59                 mov     edx, [ebp+var_4]
.text:00000B5C                 sub     edx, 1
.text:00000B5F                 mov     [ebp+var_4], edx
.text:00000B62                 jnz     short loc_B2C
.text:00000B64
.text:00000B64 loc_B64:                                ; CODE XREF: Rescale(x)+18Bj
.text:00000B64                 mov     eax, [ebp+var_C]
.text:00000B67                 add     eax, [ebp+var_10]
.text:00000B6A                 mov     ecx, [ebp+var_10]
.text:00000B6D                 shr     ecx, 1
.text:00000B6F                 sub     eax, ecx
.text:00000B71                 mov     edx, [ebp+arg_0]
.text:00000B74                 mov     ecx, [edx]
.text:00000B76                 mov     [ecx+2], ax
.text:00000B7A                 mov     edx, [ebp+arg_0]
.text:00000B7D                 mov     eax, [edx]
.text:00000B7F                 movzx   ecx, byte ptr [eax+1]
.text:00000B83                 or      ecx, 4
.text:00000B86                 mov     edx, [ebp+arg_0]
.text:00000B89                 mov     eax, [edx]
.text:00000B8B                 mov     [eax+1], cl
.text:00000B8E                 mov     ecx, [ebp+arg_0]
.text:00000B91                 mov     edx, [ecx]
.text:00000B93                 mov     eax, [ebp+arg_0]
.text:00000B96                 mov     ecx, [edx+4]
.text:00000B99                 mov     [eax+8], ecx
.text:00000B9C
.text:00000B9C loc_B9C:                                ; CODE XREF: Rescale(x)+279j
.text:00000B9C                 push    edx
.text:00000B9D                 mov     ecx, ebp
.text:00000B9F                 push    eax
.text:00000BA0                 lea     edx, $LN28
.text:00000BA6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000BAB                 pop     eax
.text:00000BAC                 pop     edx
.text:00000BAD                 pop     edi
.text:00000BAE                 add     esp, 5Ch
.text:00000BB1                 cmp     ebp, esp
.text:00000BB3                 call    __RTC_CheckEsp
.text:00000BB8                 mov     esp, ebp
.text:00000BBA                 pop     ebp
.text:00000BBB                 retn    4
.text:00000BBB _Rescale@4      endp
.text:00000BBB
.text:00000BBB ; ---------------------------------------------------------------------------
.text:00000BBE                 align 10h
.text:00000BC0 $LN28           dd 3                    ; DATA XREF: Rescale(x)+380o
.text:00000BC4                 dd offset $LN27
.text:00000BC8 $LN27           dd 0FFFFFFDCh, 6        ; DATA XREF: .text:00000BC4o
.text:00000BD0                 dd offset $LN24
.text:00000BD4                 dd 0FFFFFFC8h, 6
.text:00000BDC                 dd offset $LN25
.text:00000BE0                 dd 0FFFFFFACh, 6
.text:00000BE8                 dd offset $LN26
.text:00000BEC $LN26           dd 706D74h              ; DATA XREF: .text:00000BE8o
.text:00000BF0 $LN25           dd 706D74h              ; DATA XREF: .text:00000BDCo
.text:00000BF4 $LN24           dd 706D74h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00000BD0o
.text:00000C00
.text:00000C00 ; =============== S U B R O U T I N E =======================================
.text:00000C00
.text:00000C00 ; Attributes: bp-based frame
.text:00000C00
.text:00000C00 ; __stdcall InsertNode(x, x, x)
.text:00000C00 _InsertNode@12  proc near               ; CODE XREF: Rescale(x)+22Dp
.text:00000C00                                         ; ShrinkUnits(x,x,x,x)+C4p ...
.text:00000C00
.text:00000C00 arg_0           = dword ptr  8
.text:00000C00 arg_4           = dword ptr  0Ch
.text:00000C00 arg_8           = dword ptr  10h
.text:00000C00
.text:00000C00                 push    ebp
.text:00000C01                 mov     ebp, esp
.text:00000C03                 mov     eax, [ebp+arg_4]
.text:00000C06                 mov     dword ptr [eax], 0FFFFFFFFh
.text:00000C0C                 mov     ecx, [ebp+arg_4]
.text:00000C0F                 mov     edx, [ebp+arg_8]
.text:00000C12                 mov     eax, [ebp+arg_0]
.text:00000C15                 mov     edx, [eax+edx*4+100h]
.text:00000C1C                 mov     [ecx+4], edx
.text:00000C1F                 mov     eax, [ebp+arg_0]
.text:00000C22                 add     eax, [ebp+arg_8]
.text:00000C25                 movzx   ecx, byte ptr [eax+58h]
.text:00000C29                 mov     edx, [ebp+arg_4]
.text:00000C2C                 mov     [edx+8], ecx
.text:00000C2F                 mov     eax, [ebp+arg_8]
.text:00000C32                 mov     ecx, [ebp+arg_0]
.text:00000C35                 mov     edx, [ebp+arg_4]
.text:00000C38                 mov     [ecx+eax*4+100h], edx
.text:00000C3F                 mov     eax, [ebp+arg_8]
.text:00000C42                 mov     ecx, [ebp+arg_0]
.text:00000C45                 mov     edx, [ecx+eax*4+198h]
.text:00000C4C                 add     edx, 1
.text:00000C4F                 mov     eax, [ebp+arg_8]
.text:00000C52                 mov     ecx, [ebp+arg_0]
.text:00000C55                 mov     [ecx+eax*4+198h], edx
.text:00000C5C                 pop     ebp
.text:00000C5D                 retn    0Ch
.text:00000C5D _InsertNode@12  endp
.text:00000C5D
.text:00000C60
.text:00000C60 ; =============== S U B R O U T I N E =======================================
.text:00000C60
.text:00000C60 ; Attributes: bp-based frame
.text:00000C60
.text:00000C60 ; __stdcall ShrinkUnits(x, x, x, x)
.text:00000C60 _ShrinkUnits@16 proc near               ; CODE XREF: Rescale(x)+2B1p
.text:00000C60                                         ; Refresh(x,x,x,x)+41p
.text:00000C60
.text:00000C60 var_18          = dword ptr -18h
.text:00000C60 var_14          = dword ptr -14h
.text:00000C60 var_10          = dword ptr -10h
.text:00000C60 var_C           = dword ptr -0Ch
.text:00000C60 var_8           = dword ptr -8
.text:00000C60 var_4           = dword ptr -4
.text:00000C60 arg_0           = dword ptr  8
.text:00000C60 arg_4           = dword ptr  0Ch
.text:00000C60 arg_8           = dword ptr  10h
.text:00000C60 arg_C           = dword ptr  14h
.text:00000C60
.text:00000C60                 push    ebp
.text:00000C61                 mov     ebp, esp
.text:00000C63                 sub     esp, 18h
.text:00000C66                 mov     eax, 0CCCCCCCCh
.text:00000C6B                 mov     [ebp+var_18], eax
.text:00000C6E                 mov     [ebp+var_14], eax
.text:00000C71                 mov     [ebp+var_10], eax
.text:00000C74                 mov     [ebp+var_C], eax
.text:00000C77                 mov     [ebp+var_8], eax
.text:00000C7A                 mov     [ebp+var_4], eax
.text:00000C7D                 mov     eax, [ebp+arg_0]
.text:00000C80                 add     eax, [ebp+arg_8]
.text:00000C83                 movzx   ecx, byte ptr [eax+7Dh]
.text:00000C87                 mov     [ebp+var_4], ecx
.text:00000C8A                 mov     edx, [ebp+arg_0]
.text:00000C8D                 add     edx, [ebp+arg_C]
.text:00000C90                 movzx   eax, byte ptr [edx+7Dh]
.text:00000C94                 mov     [ebp+var_8], eax
.text:00000C97                 mov     ecx, [ebp+var_4]
.text:00000C9A                 cmp     ecx, [ebp+var_8]
.text:00000C9D                 jnz     short loc_CA7
.text:00000C9F                 mov     eax, [ebp+arg_4]
.text:00000CA2                 jmp     loc_D46
.text:00000CA7 ; ---------------------------------------------------------------------------
.text:00000CA7
.text:00000CA7 loc_CA7:                                ; CODE XREF: ShrinkUnits(x,x,x,x)+3Dj
.text:00000CA7                 mov     edx, [ebp+var_8]
.text:00000CAA                 mov     eax, [ebp+arg_0]
.text:00000CAD                 cmp     dword ptr [eax+edx*4+100h], 0
.text:00000CB5                 jz      short loc_D2E
.text:00000CB7                 mov     ecx, [ebp+var_8]
.text:00000CBA                 push    ecx
.text:00000CBB                 mov     edx, [ebp+arg_0]
.text:00000CBE                 push    edx
.text:00000CBF                 call    _RemoveNode@8   ; RemoveNode(x,x)
.text:00000CC4                 mov     [ebp+var_C], eax
.text:00000CC7                 mov     eax, [ebp+var_C]
.text:00000CCA                 mov     [ebp+var_10], eax
.text:00000CCD                 mov     ecx, [ebp+arg_4]
.text:00000CD0                 mov     [ebp+var_14], ecx
.text:00000CD3                 mov     edx, [ebp+arg_C]
.text:00000CD6                 mov     [ebp+var_18], edx
.text:00000CD9
.text:00000CD9 loc_CD9:                                ; CODE XREF: ShrinkUnits(x,x,x,x)+B6j
.text:00000CD9                 mov     eax, [ebp+var_10]
.text:00000CDC                 mov     ecx, [ebp+var_14]
.text:00000CDF                 mov     edx, [ecx]
.text:00000CE1                 mov     [eax], edx
.text:00000CE3                 mov     eax, [ebp+var_10]
.text:00000CE6                 mov     ecx, [ebp+var_14]
.text:00000CE9                 mov     edx, [ecx+4]
.text:00000CEC                 mov     [eax+4], edx
.text:00000CEF                 mov     eax, [ebp+var_10]
.text:00000CF2                 mov     ecx, [ebp+var_14]
.text:00000CF5                 mov     edx, [ecx+8]
.text:00000CF8                 mov     [eax+8], edx
.text:00000CFB                 mov     eax, [ebp+var_14]
.text:00000CFE                 add     eax, 0Ch
.text:00000D01                 mov     [ebp+var_14], eax
.text:00000D04                 mov     ecx, [ebp+var_10]
.text:00000D07                 add     ecx, 0Ch
.text:00000D0A                 mov     [ebp+var_10], ecx
.text:00000D0D                 mov     edx, [ebp+var_18]
.text:00000D10                 sub     edx, 1
.text:00000D13                 mov     [ebp+var_18], edx
.text:00000D16                 jnz     short loc_CD9
.text:00000D18                 mov     eax, [ebp+var_4]
.text:00000D1B                 push    eax
.text:00000D1C                 mov     ecx, [ebp+arg_4]
.text:00000D1F                 push    ecx
.text:00000D20                 mov     edx, [ebp+arg_0]
.text:00000D23                 push    edx
.text:00000D24                 call    _InsertNode@12  ; InsertNode(x,x,x)
.text:00000D29                 mov     eax, [ebp+var_C]
.text:00000D2C                 jmp     short loc_D46
.text:00000D2E ; ---------------------------------------------------------------------------
.text:00000D2E
.text:00000D2E loc_D2E:                                ; CODE XREF: ShrinkUnits(x,x,x,x)+55j
.text:00000D2E                 mov     eax, [ebp+var_8]
.text:00000D31                 push    eax
.text:00000D32                 mov     ecx, [ebp+var_4]
.text:00000D35                 push    ecx
.text:00000D36                 mov     edx, [ebp+arg_4]
.text:00000D39                 push    edx
.text:00000D3A                 mov     eax, [ebp+arg_0]
.text:00000D3D                 push    eax
.text:00000D3E                 call    _SplitBlock@16  ; SplitBlock(x,x,x,x)
.text:00000D43                 mov     eax, [ebp+arg_4]
.text:00000D46
.text:00000D46 loc_D46:                                ; CODE XREF: ShrinkUnits(x,x,x,x)+42j
.text:00000D46                                         ; ShrinkUnits(x,x,x,x)+CCj
.text:00000D46                 add     esp, 18h
.text:00000D49                 cmp     ebp, esp
.text:00000D4B                 call    __RTC_CheckEsp
.text:00000D50                 mov     esp, ebp
.text:00000D52                 pop     ebp
.text:00000D53                 retn    10h
.text:00000D53 _ShrinkUnits@16 endp
.text:00000D53
.text:00000D53 ; ---------------------------------------------------------------------------
.text:00000D56                 align 10h
.text:00000D60
.text:00000D60 ; =============== S U B R O U T I N E =======================================
.text:00000D60
.text:00000D60 ; Attributes: bp-based frame
.text:00000D60
.text:00000D60 ; __stdcall RemoveNode(x, x)
.text:00000D60 _RemoveNode@8   proc near               ; CODE XREF: ShrinkUnits(x,x,x,x)+5Fp
.text:00000D60                                         ; AllocUnits(x,x)+2Cp ...
.text:00000D60
.text:00000D60 var_4           = dword ptr -4
.text:00000D60 arg_0           = dword ptr  8
.text:00000D60 arg_4           = dword ptr  0Ch
.text:00000D60
.text:00000D60                 push    ebp
.text:00000D61                 mov     ebp, esp
.text:00000D63                 push    ecx
.text:00000D64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D6B                 mov     eax, [ebp+arg_4]
.text:00000D6E                 mov     ecx, [ebp+arg_0]
.text:00000D71                 mov     edx, [ecx+eax*4+100h]
.text:00000D78                 mov     [ebp+var_4], edx
.text:00000D7B                 mov     eax, [ebp+arg_4]
.text:00000D7E                 mov     ecx, [ebp+arg_0]
.text:00000D81                 mov     edx, [ebp+var_4]
.text:00000D84                 mov     edx, [edx+4]
.text:00000D87                 mov     [ecx+eax*4+100h], edx
.text:00000D8E                 mov     eax, [ebp+arg_4]
.text:00000D91                 mov     ecx, [ebp+arg_0]
.text:00000D94                 mov     edx, [ecx+eax*4+198h]
.text:00000D9B                 sub     edx, 1
.text:00000D9E                 mov     eax, [ebp+arg_4]
.text:00000DA1                 mov     ecx, [ebp+arg_0]
.text:00000DA4                 mov     [ecx+eax*4+198h], edx
.text:00000DAB                 mov     eax, [ebp+var_4]
.text:00000DAE                 mov     esp, ebp
.text:00000DB0                 pop     ebp
.text:00000DB1                 retn    8
.text:00000DB1 _RemoveNode@8   endp
.text:00000DB1
.text:00000DB1 ; ---------------------------------------------------------------------------
.text:00000DB4                 align 10h
.text:00000DC0
.text:00000DC0 ; =============== S U B R O U T I N E =======================================
.text:00000DC0
.text:00000DC0 ; Attributes: bp-based frame
.text:00000DC0
.text:00000DC0 ; __stdcall SplitBlock(x, x, x, x)
.text:00000DC0 _SplitBlock@16  proc near               ; CODE XREF: ShrinkUnits(x,x,x,x)+DEp
.text:00000DC0                                         ; AllocUnitsRare(x,x)+ECp
.text:00000DC0
.text:00000DC0 var_C           = dword ptr -0Ch
.text:00000DC0 var_8           = dword ptr -8
.text:00000DC0 var_4           = dword ptr -4
.text:00000DC0 arg_0           = dword ptr  8
.text:00000DC0 arg_4           = dword ptr  0Ch
.text:00000DC0 arg_8           = dword ptr  10h
.text:00000DC0 arg_C           = dword ptr  14h
.text:00000DC0
.text:00000DC0                 push    ebp
.text:00000DC1                 mov     ebp, esp
.text:00000DC3                 sub     esp, 0Ch
.text:00000DC6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000DCD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000DD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DDB                 mov     eax, [ebp+arg_0]
.text:00000DDE                 add     eax, [ebp+arg_8]
.text:00000DE1                 movzx   ecx, byte ptr [eax+58h]
.text:00000DE5                 mov     edx, [ebp+arg_0]
.text:00000DE8                 add     edx, [ebp+arg_C]
.text:00000DEB                 movzx   eax, byte ptr [edx+58h]
.text:00000DEF                 sub     ecx, eax
.text:00000DF1                 mov     [ebp+var_8], ecx
.text:00000DF4                 mov     ecx, [ebp+arg_0]
.text:00000DF7                 add     ecx, [ebp+arg_C]
.text:00000DFA                 movzx   edx, byte ptr [ecx+58h]
.text:00000DFE                 imul    edx, 0Ch
.text:00000E01                 add     edx, [ebp+arg_4]
.text:00000E04                 mov     [ebp+arg_4], edx
.text:00000E07                 mov     eax, [ebp+arg_0]
.text:00000E0A                 add     eax, [ebp+var_8]
.text:00000E0D                 movzx   ecx, byte ptr [eax+7Dh]
.text:00000E11                 mov     [ebp+var_4], ecx
.text:00000E14                 mov     edx, [ebp+arg_0]
.text:00000E17                 add     edx, [ebp+var_4]
.text:00000E1A                 movzx   eax, byte ptr [edx+58h]
.text:00000E1E                 cmp     eax, [ebp+var_8]
.text:00000E21                 jz      short loc_E56
.text:00000E23                 mov     ecx, [ebp+var_4]
.text:00000E26                 sub     ecx, 1
.text:00000E29                 mov     [ebp+var_4], ecx
.text:00000E2C                 mov     edx, [ebp+arg_0]
.text:00000E2F                 add     edx, [ebp+var_4]
.text:00000E32                 movzx   eax, byte ptr [edx+58h]
.text:00000E36                 mov     [ebp+var_C], eax
.text:00000E39                 mov     ecx, [ebp+var_8]
.text:00000E3C                 sub     ecx, [ebp+var_C]
.text:00000E3F                 sub     ecx, 1
.text:00000E42                 push    ecx
.text:00000E43                 mov     edx, [ebp+var_C]
.text:00000E46                 imul    edx, 0Ch
.text:00000E49                 add     edx, [ebp+arg_4]
.text:00000E4C                 push    edx
.text:00000E4D                 mov     eax, [ebp+arg_0]
.text:00000E50                 push    eax
.text:00000E51                 call    _InsertNode@12  ; InsertNode(x,x,x)
.text:00000E56
.text:00000E56 loc_E56:                                ; CODE XREF: SplitBlock(x,x,x,x)+61j
.text:00000E56                 mov     ecx, [ebp+var_4]
.text:00000E59                 push    ecx
.text:00000E5A                 mov     edx, [ebp+arg_4]
.text:00000E5D                 push    edx
.text:00000E5E                 mov     eax, [ebp+arg_0]
.text:00000E61                 push    eax
.text:00000E62                 call    _InsertNode@12  ; InsertNode(x,x,x)
.text:00000E67                 add     esp, 0Ch
.text:00000E6A                 cmp     ebp, esp
.text:00000E6C                 call    __RTC_CheckEsp
.text:00000E71                 mov     esp, ebp
.text:00000E73                 pop     ebp
.text:00000E74                 retn    10h
.text:00000E74 _SplitBlock@16  endp
.text:00000E74
.text:00000E74 ; ---------------------------------------------------------------------------
.text:00000E77                 align 10h
.text:00000E80
.text:00000E80 ; =============== S U B R O U T I N E =======================================
.text:00000E80
.text:00000E80 ; Attributes: bp-based frame
.text:00000E80
.text:00000E80 ; __stdcall NextContext(x)
.text:00000E80 _NextContext@4  proc near               ; CODE XREF: Ppmd8_Update1(x)+86p
.text:00000E80                                         ; Ppmd8_Update1_0(x)+86p ...
.text:00000E80
.text:00000E80 var_4           = dword ptr -4
.text:00000E80 arg_0           = dword ptr  8
.text:00000E80
.text:00000E80                 push    ebp
.text:00000E81                 mov     ebp, esp
.text:00000E83                 push    ecx
.text:00000E84                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E8B                 mov     eax, [ebp+arg_0]
.text:00000E8E                 mov     ecx, [eax+8]
.text:00000E91                 movzx   edx, word ptr [ecx+2]
.text:00000E95                 mov     eax, [ebp+arg_0]
.text:00000E98                 mov     ecx, [eax+8]
.text:00000E9B                 movzx   eax, word ptr [ecx+4]
.text:00000E9F                 shl     eax, 10h
.text:00000EA2                 or      edx, eax
.text:00000EA4                 mov     [ebp+var_4], edx
.text:00000EA7                 mov     ecx, [ebp+arg_0]
.text:00000EAA                 cmp     dword ptr [ecx+0Ch], 0
.text:00000EAE                 jnz     short loc_ECE
.text:00000EB0                 mov     edx, [ebp+arg_0]
.text:00000EB3                 mov     eax, [ebp+var_4]
.text:00000EB6                 cmp     eax, [edx+3Ch]
.text:00000EB9                 jb      short loc_ECE
.text:00000EBB                 mov     ecx, [ebp+arg_0]
.text:00000EBE                 mov     edx, [ebp+var_4]
.text:00000EC1                 mov     [ecx+4], edx
.text:00000EC4                 mov     eax, [ebp+arg_0]
.text:00000EC7                 mov     ecx, [ebp+var_4]
.text:00000ECA                 mov     [eax], ecx
.text:00000ECC                 jmp     short loc_EE2
.text:00000ECE ; ---------------------------------------------------------------------------
.text:00000ECE
.text:00000ECE loc_ECE:                                ; CODE XREF: NextContext(x)+2Ej
.text:00000ECE                                         ; NextContext(x)+39j
.text:00000ECE                 mov     edx, [ebp+arg_0]
.text:00000ED1                 push    edx
.text:00000ED2                 call    _UpdateModel@4  ; UpdateModel(x)
.text:00000ED7                 mov     eax, [ebp+arg_0]
.text:00000EDA                 mov     ecx, [ebp+arg_0]
.text:00000EDD                 mov     edx, [ecx+4]
.text:00000EE0                 mov     [eax], edx
.text:00000EE2
.text:00000EE2 loc_EE2:                                ; CODE XREF: NextContext(x)+4Cj
.text:00000EE2                 add     esp, 4
.text:00000EE5                 cmp     ebp, esp
.text:00000EE7                 call    __RTC_CheckEsp
.text:00000EEC                 mov     esp, ebp
.text:00000EEE                 pop     ebp
.text:00000EEF                 retn    4
.text:00000EEF _NextContext@4  endp
.text:00000EEF
.text:00000EEF ; ---------------------------------------------------------------------------
.text:00000EF2                 align 10h
.text:00000F00
.text:00000F00 ; =============== S U B R O U T I N E =======================================
.text:00000F00
.text:00000F00 ; Attributes: bp-based frame
.text:00000F00
.text:00000F00 ; __stdcall UpdateModel(x)
.text:00000F00 _UpdateModel@4  proc near               ; CODE XREF: NextContext(x)+52p
.text:00000F00                                         ; Ppmd8_Update2(x)+5Ep
.text:00000F00
.text:00000F00 var_60          = dword ptr -60h
.text:00000F00 var_5C          = dword ptr -5Ch
.text:00000F00 var_58          = dword ptr -58h
.text:00000F00 var_54          = dword ptr -54h
.text:00000F00 var_50          = dword ptr -50h
.text:00000F00 var_4C          = dword ptr -4Ch
.text:00000F00 var_48          = dword ptr -48h
.text:00000F00 var_44          = dword ptr -44h
.text:00000F00 var_40          = dword ptr -40h
.text:00000F00 var_3C          = dword ptr -3Ch
.text:00000F00 var_38          = dword ptr -38h
.text:00000F00 var_34          = dword ptr -34h
.text:00000F00 var_30          = dword ptr -30h
.text:00000F00 var_2C          = dword ptr -2Ch
.text:00000F00 var_28          = dword ptr -28h
.text:00000F00 var_24          = dword ptr -24h
.text:00000F00 var_20          = dword ptr -20h
.text:00000F00 var_1A          = byte ptr -1Ah
.text:00000F00 var_19          = byte ptr -19h
.text:00000F00 var_18          = dword ptr -18h
.text:00000F00 var_14          = dword ptr -14h
.text:00000F00 var_10          = dword ptr -10h
.text:00000F00 var_C           = dword ptr -0Ch
.text:00000F00 var_8           = dword ptr -8
.text:00000F00 var_4           = dword ptr -4
.text:00000F00 arg_0           = dword ptr  8
.text:00000F00
.text:00000F00                 push    ebp
.text:00000F01                 mov     ebp, esp
.text:00000F03                 sub     esp, 60h
.text:00000F06                 push    edi
.text:00000F07                 lea     edi, [ebp+var_60]
.text:00000F0A                 mov     ecx, 18h
.text:00000F0F                 mov     eax, 0CCCCCCCCh
.text:00000F14                 rep stosd
.text:00000F16                 mov     eax, [ebp+arg_0]
.text:00000F19                 mov     ecx, [eax+8]
.text:00000F1C                 movzx   edx, word ptr [ecx+2]
.text:00000F20                 mov     eax, [ebp+arg_0]
.text:00000F23                 mov     ecx, [eax+8]
.text:00000F26                 movzx   eax, word ptr [ecx+4]
.text:00000F2A                 shl     eax, 10h
.text:00000F2D                 or      edx, eax
.text:00000F2F                 mov     [ebp+var_8], edx
.text:00000F32                 mov     ecx, [ebp+arg_0]
.text:00000F35                 mov     edx, [ecx+8]
.text:00000F38                 movzx   eax, byte ptr [edx+1]
.text:00000F3C                 mov     [ebp+var_18], eax
.text:00000F3F                 mov     ecx, [ebp+arg_0]
.text:00000F42                 mov     edx, [ecx+8]
.text:00000F45                 mov     al, [edx]
.text:00000F47                 mov     [ebp+var_1A], al
.text:00000F4A                 mov     [ebp+var_20], 0
.text:00000F51                 mov     ecx, [ebp+arg_0]
.text:00000F54                 mov     edx, [ecx+8]
.text:00000F57                 movzx   eax, byte ptr [edx+1]
.text:00000F5B                 cmp     eax, 1Fh
.text:00000F5E                 jge     loc_1040
.text:00000F64                 mov     ecx, [ebp+arg_0]
.text:00000F67                 mov     edx, [ecx]
.text:00000F69                 cmp     dword ptr [edx+8], 0
.text:00000F6D                 jz      loc_1040
.text:00000F73                 mov     eax, [ebp+arg_0]
.text:00000F76                 mov     ecx, [eax]
.text:00000F78                 mov     edx, [ecx+8]
.text:00000F7B                 mov     [ebp+var_C], edx
.text:00000F7E                 mov     eax, [ebp+var_C]
.text:00000F81                 movzx   ecx, byte ptr [eax]
.text:00000F84                 test    ecx, ecx
.text:00000F86                 jnz     short loc_FB0
.text:00000F88                 mov     edx, [ebp+var_C]
.text:00000F8B                 add     edx, 2
.text:00000F8E                 mov     [ebp+var_20], edx
.text:00000F91                 mov     eax, [ebp+var_20]
.text:00000F94                 movzx   ecx, byte ptr [eax+1]
.text:00000F98                 cmp     ecx, 20h ; ' '
.text:00000F9B                 jge     short loc_FAB
.text:00000F9D                 mov     edx, [ebp+var_20]
.text:00000FA0                 mov     al, [edx+1]
.text:00000FA3                 add     al, 1
.text:00000FA5                 mov     ecx, [ebp+var_20]
.text:00000FA8                 mov     [ecx+1], al
.text:00000FAB
.text:00000FAB loc_FAB:                                ; CODE XREF: UpdateModel(x)+9Bj
.text:00000FAB                 jmp     loc_1040
.text:00000FB0 ; ---------------------------------------------------------------------------
.text:00000FB0
.text:00000FB0 loc_FB0:                                ; CODE XREF: UpdateModel(x)+86j
.text:00000FB0                 mov     edx, [ebp+var_C]
.text:00000FB3                 mov     eax, [edx+4]
.text:00000FB6                 mov     [ebp+var_20], eax
.text:00000FB9                 mov     ecx, [ebp+var_20]
.text:00000FBC                 movzx   edx, byte ptr [ecx]
.text:00000FBF                 mov     eax, [ebp+arg_0]
.text:00000FC2                 mov     ecx, [eax+8]
.text:00000FC5                 movzx   eax, byte ptr [ecx]
.text:00000FC8                 cmp     edx, eax
.text:00000FCA                 jz      short loc_1013
.text:00000FCC
.text:00000FCC loc_FCC:                                ; CODE XREF: UpdateModel(x)+E6j
.text:00000FCC                 mov     ecx, [ebp+var_20]
.text:00000FCF                 add     ecx, 6
.text:00000FD2                 mov     [ebp+var_20], ecx
.text:00000FD5                 mov     edx, [ebp+var_20]
.text:00000FD8                 movzx   eax, byte ptr [edx]
.text:00000FDB                 mov     ecx, [ebp+arg_0]
.text:00000FDE                 mov     edx, [ecx+8]
.text:00000FE1                 movzx   ecx, byte ptr [edx]
.text:00000FE4                 cmp     eax, ecx
.text:00000FE6                 jnz     short loc_FCC
.text:00000FE8                 mov     edx, [ebp+var_20]
.text:00000FEB                 movzx   eax, byte ptr [edx+1]
.text:00000FEF                 mov     ecx, [ebp+var_20]
.text:00000FF2                 movzx   edx, byte ptr [ecx-5]
.text:00000FF6                 cmp     eax, edx
.text:00000FF8                 jl      short loc_1013
.text:00000FFA                 mov     eax, [ebp+var_20]
.text:00000FFD                 sub     eax, 6
.text:00001000                 push    eax
.text:00001001                 mov     ecx, [ebp+var_20]
.text:00001004                 push    ecx
.text:00001005                 call    _SwapStates@8   ; SwapStates(x,x)
.text:0000100A                 mov     edx, [ebp+var_20]
.text:0000100D                 sub     edx, 6
.text:00001010                 mov     [ebp+var_20], edx
.text:00001013
.text:00001013 loc_1013:                               ; CODE XREF: UpdateModel(x)+CAj
.text:00001013                                         ; UpdateModel(x)+F8j
.text:00001013                 mov     eax, [ebp+var_20]
.text:00001016                 movzx   ecx, byte ptr [eax+1]
.text:0000101A                 cmp     ecx, 73h ; 's'
.text:0000101D                 jge     short loc_1040
.text:0000101F                 mov     edx, [ebp+var_20]
.text:00001022                 movzx   eax, byte ptr [edx+1]
.text:00001026                 add     eax, 2
.text:00001029                 mov     ecx, [ebp+var_20]
.text:0000102C                 mov     [ecx+1], al
.text:0000102F                 mov     edx, [ebp+var_C]
.text:00001032                 movzx   eax, word ptr [edx+2]
.text:00001036                 add     eax, 2
.text:00001039                 mov     ecx, [ebp+var_C]
.text:0000103C                 mov     [ecx+2], ax
.text:00001040
.text:00001040 loc_1040:                               ; CODE XREF: UpdateModel(x)+5Ej
.text:00001040                                         ; UpdateModel(x)+6Dj ...
.text:00001040                 mov     edx, [ebp+arg_0]
.text:00001043                 mov     eax, [edx+4]
.text:00001046                 mov     [ebp+var_C], eax
.text:00001049                 mov     ecx, [ebp+arg_0]
.text:0000104C                 cmp     dword ptr [ecx+0Ch], 0
.text:00001050                 jnz     short loc_10B1
.text:00001052                 cmp     [ebp+var_8], 0
.text:00001056                 jz      short loc_10B1
.text:00001058                 mov     edx, [ebp+arg_0]
.text:0000105B                 mov     eax, [edx]
.text:0000105D                 push    eax
.text:0000105E                 mov     ecx, [ebp+var_20]
.text:00001061                 push    ecx
.text:00001062                 push    1
.text:00001064                 mov     edx, [ebp+arg_0]
.text:00001067                 push    edx
.text:00001068                 call    _CreateSuccessors@16 ; CreateSuccessors(x,x,x,x)
.text:0000106D                 mov     [ebp+var_24], eax
.text:00001070                 cmp     [ebp+var_24], 0
.text:00001074                 jnz     short loc_1093
.text:00001076                 push    0
.text:00001078                 mov     eax, [ebp+arg_0]
.text:0000107B                 mov     ecx, [eax+8]
.text:0000107E                 push    ecx
.text:0000107F                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:00001084                 mov     edx, [ebp+var_C]
.text:00001087                 push    edx
.text:00001088                 mov     eax, [ebp+arg_0]
.text:0000108B                 push    eax
.text:0000108C                 call    _RestoreModel@8 ; RestoreModel(x,x)
.text:00001091                 jmp     short loc_10AC
.text:00001093 ; ---------------------------------------------------------------------------
.text:00001093
.text:00001093 loc_1093:                               ; CODE XREF: UpdateModel(x)+174j
.text:00001093                 mov     ecx, [ebp+var_24]
.text:00001096                 push    ecx
.text:00001097                 mov     edx, [ebp+arg_0]
.text:0000109A                 mov     eax, [edx+8]
.text:0000109D                 push    eax
.text:0000109E                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:000010A3                 mov     ecx, [ebp+arg_0]
.text:000010A6                 mov     edx, [ebp+var_24]
.text:000010A9                 mov     [ecx+4], edx
.text:000010AC
.text:000010AC loc_10AC:                               ; CODE XREF: UpdateModel(x)+191j
.text:000010AC                 jmp     loc_1499
.text:000010B1 ; ---------------------------------------------------------------------------
.text:000010B1
.text:000010B1 loc_10B1:                               ; CODE XREF: UpdateModel(x)+150j
.text:000010B1                                         ; UpdateModel(x)+156j
.text:000010B1                 mov     eax, [ebp+arg_0]
.text:000010B4                 mov     ecx, [eax+8]
.text:000010B7                 mov     edx, [ebp+arg_0]
.text:000010BA                 mov     eax, [edx+38h]
.text:000010BD                 mov     cl, [ecx]
.text:000010BF                 mov     [eax], cl
.text:000010C1                 mov     edx, [ebp+arg_0]
.text:000010C4                 mov     eax, [edx+38h]
.text:000010C7                 add     eax, 1
.text:000010CA                 mov     ecx, [ebp+arg_0]
.text:000010CD                 mov     [ecx+38h], eax
.text:000010D0                 mov     edx, [ebp+arg_0]
.text:000010D3                 mov     eax, [edx+38h]
.text:000010D6                 mov     [ebp+var_4], eax
.text:000010D9                 mov     ecx, [ebp+arg_0]
.text:000010DC                 mov     edx, [ebp+arg_0]
.text:000010DF                 mov     eax, [ecx+38h]
.text:000010E2                 cmp     eax, [edx+3Ch]
.text:000010E5                 jb      short loc_10F9
.text:000010E7                 mov     ecx, [ebp+var_C]
.text:000010EA                 push    ecx
.text:000010EB                 mov     edx, [ebp+arg_0]
.text:000010EE                 push    edx
.text:000010EF                 call    _RestoreModel@8 ; RestoreModel(x,x)
.text:000010F4                 jmp     loc_1499
.text:000010F9 ; ---------------------------------------------------------------------------
.text:000010F9
.text:000010F9 loc_10F9:                               ; CODE XREF: UpdateModel(x)+1E5j
.text:000010F9                 cmp     [ebp+var_8], 0
.text:000010FD                 jnz     short loc_1135
.text:000010FF                 mov     eax, [ebp+arg_0]
.text:00001102                 mov     ecx, [eax]
.text:00001104                 push    ecx
.text:00001105                 mov     edx, [ebp+var_20]
.text:00001108                 push    edx
.text:00001109                 mov     eax, [ebp+arg_0]
.text:0000110C                 push    eax
.text:0000110D                 call    _ReduceOrder@12 ; ReduceOrder(x,x,x)
.text:00001112                 mov     [ebp+var_28], eax
.text:00001115                 cmp     [ebp+var_28], 0
.text:00001119                 jnz     short loc_112D
.text:0000111B                 mov     ecx, [ebp+var_C]
.text:0000111E                 push    ecx
.text:0000111F                 mov     edx, [ebp+arg_0]
.text:00001122                 push    edx
.text:00001123                 call    _RestoreModel@8 ; RestoreModel(x,x)
.text:00001128                 jmp     loc_1499
.text:0000112D ; ---------------------------------------------------------------------------
.text:0000112D
.text:0000112D loc_112D:                               ; CODE XREF: UpdateModel(x)+219j
.text:0000112D                 mov     eax, [ebp+var_28]
.text:00001130                 mov     [ebp+var_8], eax
.text:00001133                 jmp     short loc_1176
.text:00001135 ; ---------------------------------------------------------------------------
.text:00001135
.text:00001135 loc_1135:                               ; CODE XREF: UpdateModel(x)+1FDj
.text:00001135                 mov     ecx, [ebp+arg_0]
.text:00001138                 mov     edx, [ebp+var_8]
.text:0000113B                 cmp     edx, [ecx+3Ch]
.text:0000113E                 jnb     short loc_1176
.text:00001140                 mov     eax, [ebp+arg_0]
.text:00001143                 mov     ecx, [eax]
.text:00001145                 push    ecx
.text:00001146                 mov     edx, [ebp+var_20]
.text:00001149                 push    edx
.text:0000114A                 push    0
.text:0000114C                 mov     eax, [ebp+arg_0]
.text:0000114F                 push    eax
.text:00001150                 call    _CreateSuccessors@16 ; CreateSuccessors(x,x,x,x)
.text:00001155                 mov     [ebp+var_2C], eax
.text:00001158                 cmp     [ebp+var_2C], 0
.text:0000115C                 jnz     short loc_1170
.text:0000115E                 mov     ecx, [ebp+var_C]
.text:00001161                 push    ecx
.text:00001162                 mov     edx, [ebp+arg_0]
.text:00001165                 push    edx
.text:00001166                 call    _RestoreModel@8 ; RestoreModel(x,x)
.text:0000116B                 jmp     loc_1499
.text:00001170 ; ---------------------------------------------------------------------------
.text:00001170
.text:00001170 loc_1170:                               ; CODE XREF: UpdateModel(x)+25Cj
.text:00001170                 mov     eax, [ebp+var_2C]
.text:00001173                 mov     [ebp+var_8], eax
.text:00001176
.text:00001176 loc_1176:                               ; CODE XREF: UpdateModel(x)+233j
.text:00001176                                         ; UpdateModel(x)+23Ej
.text:00001176                 mov     ecx, [ebp+arg_0]
.text:00001179                 mov     edx, [ecx+0Ch]
.text:0000117C                 sub     edx, 1
.text:0000117F                 mov     [ebp+var_60], edx
.text:00001182                 mov     eax, [ebp+arg_0]
.text:00001185                 mov     ecx, [ebp+var_60]
.text:00001188                 mov     [eax+0Ch], ecx
.text:0000118B                 cmp     [ebp+var_60], 0
.text:0000118F                 jnz     short loc_11B5
.text:00001191                 mov     edx, [ebp+var_8]
.text:00001194                 mov     [ebp+var_4], edx
.text:00001197                 mov     eax, [ebp+arg_0]
.text:0000119A                 mov     ecx, [ebp+arg_0]
.text:0000119D                 mov     edx, [eax+4]
.text:000011A0                 xor     eax, eax
.text:000011A2                 cmp     edx, [ecx]
.text:000011A4                 setnz   al
.text:000011A7                 mov     ecx, [ebp+arg_0]
.text:000011AA                 mov     edx, [ecx+38h]
.text:000011AD                 sub     edx, eax
.text:000011AF                 mov     eax, [ebp+arg_0]
.text:000011B2                 mov     [eax+38h], edx
.text:000011B5
.text:000011B5 loc_11B5:                               ; CODE XREF: UpdateModel(x)+28Fj
.text:000011B5                 mov     ecx, [ebp+arg_0]
.text:000011B8                 mov     edx, [ecx]
.text:000011BA                 movzx   eax, byte ptr [edx]
.text:000011BD                 mov     [ebp+var_14], eax
.text:000011C0                 mov     ecx, [ebp+arg_0]
.text:000011C3                 mov     edx, [ecx]
.text:000011C5                 movzx   eax, word ptr [edx+2]
.text:000011C9                 sub     eax, [ebp+var_14]
.text:000011CC                 sub     eax, [ebp+var_18]
.text:000011CF                 mov     [ebp+var_10], eax
.text:000011D2                 movzx   ecx, [ebp+var_1A]
.text:000011D6                 xor     edx, edx
.text:000011D8                 cmp     ecx, 40h ; '@'
.text:000011DB                 setnl   dl
.text:000011DE                 shl     edx, 3
.text:000011E1                 mov     [ebp+var_19], dl
.text:000011E4                 jmp     short loc_11EF
.text:000011E6 ; ---------------------------------------------------------------------------
.text:000011E6
.text:000011E6 loc_11E6:                               ; CODE XREF: UpdateModel(x)+583j
.text:000011E6                 mov     eax, [ebp+var_C]
.text:000011E9                 mov     ecx, [eax+8]
.text:000011EC                 mov     [ebp+var_C], ecx
.text:000011EF
.text:000011EF loc_11EF:                               ; CODE XREF: UpdateModel(x)+2E4j
.text:000011EF                 mov     edx, [ebp+arg_0]
.text:000011F2                 mov     eax, [ebp+var_C]
.text:000011F5                 cmp     eax, [edx]
.text:000011F7                 jz      loc_1488
.text:000011FD                 mov     ecx, [ebp+var_C]
.text:00001200                 movzx   edx, byte ptr [ecx]
.text:00001203                 mov     [ebp+var_30], edx
.text:00001206                 cmp     [ebp+var_30], 0
.text:0000120A                 jz      loc_130B
.text:00001210                 mov     eax, [ebp+var_30]
.text:00001213                 and     eax, 1
.text:00001216                 jz      loc_12E6
.text:0000121C                 mov     ecx, [ebp+var_30]
.text:0000121F                 add     ecx, 1
.text:00001222                 shr     ecx, 1
.text:00001224                 mov     [ebp+var_3C], ecx
.text:00001227                 mov     edx, [ebp+arg_0]
.text:0000122A                 add     edx, [ebp+var_3C]
.text:0000122D                 movzx   eax, byte ptr [edx+7Dh]
.text:00001231                 mov     [ebp+var_40], eax
.text:00001234                 mov     ecx, [ebp+arg_0]
.text:00001237                 add     ecx, [ebp+var_3C]
.text:0000123A                 movzx   edx, byte ptr [ecx+7Eh]
.text:0000123E                 cmp     [ebp+var_40], edx
.text:00001241                 jz      loc_12E6
.text:00001247                 mov     eax, [ebp+var_40]
.text:0000124A                 add     eax, 1
.text:0000124D                 push    eax
.text:0000124E                 mov     ecx, [ebp+arg_0]
.text:00001251                 push    ecx
.text:00001252                 call    _AllocUnits@8   ; AllocUnits(x,x)
.text:00001257                 mov     [ebp+var_44], eax
.text:0000125A                 cmp     [ebp+var_44], 0
.text:0000125E                 jnz     short loc_1272
.text:00001260                 mov     edx, [ebp+var_C]
.text:00001263                 push    edx
.text:00001264                 mov     eax, [ebp+arg_0]
.text:00001267                 push    eax
.text:00001268                 call    _RestoreModel@8 ; RestoreModel(x,x)
.text:0000126D                 jmp     loc_1499
.text:00001272 ; ---------------------------------------------------------------------------
.text:00001272
.text:00001272 loc_1272:                               ; CODE XREF: UpdateModel(x)+35Ej
.text:00001272                 mov     ecx, [ebp+var_C]
.text:00001275                 mov     edx, [ecx+4]
.text:00001278                 mov     [ebp+var_48], edx
.text:0000127B                 mov     eax, [ebp+var_44]
.text:0000127E                 mov     [ebp+var_4C], eax
.text:00001281                 mov     ecx, [ebp+var_48]
.text:00001284                 mov     [ebp+var_50], ecx
.text:00001287                 mov     edx, [ebp+var_3C]
.text:0000128A                 mov     [ebp+var_54], edx
.text:0000128D
.text:0000128D loc_128D:                               ; CODE XREF: UpdateModel(x)+3CAj
.text:0000128D                 mov     eax, [ebp+var_4C]
.text:00001290                 mov     ecx, [ebp+var_50]
.text:00001293                 mov     edx, [ecx]
.text:00001295                 mov     [eax], edx
.text:00001297                 mov     eax, [ebp+var_4C]
.text:0000129A                 mov     ecx, [ebp+var_50]
.text:0000129D                 mov     edx, [ecx+4]
.text:000012A0                 mov     [eax+4], edx
.text:000012A3                 mov     eax, [ebp+var_4C]
.text:000012A6                 mov     ecx, [ebp+var_50]
.text:000012A9                 mov     edx, [ecx+8]
.text:000012AC                 mov     [eax+8], edx
.text:000012AF                 mov     eax, [ebp+var_50]
.text:000012B2                 add     eax, 0Ch
.text:000012B5                 mov     [ebp+var_50], eax
.text:000012B8                 mov     ecx, [ebp+var_4C]
.text:000012BB                 add     ecx, 0Ch
.text:000012BE                 mov     [ebp+var_4C], ecx
.text:000012C1                 mov     edx, [ebp+var_54]
.text:000012C4                 sub     edx, 1
.text:000012C7                 mov     [ebp+var_54], edx
.text:000012CA                 jnz     short loc_128D
.text:000012CC                 mov     eax, [ebp+var_40]
.text:000012CF                 push    eax
.text:000012D0                 mov     ecx, [ebp+var_48]
.text:000012D3                 push    ecx
.text:000012D4                 mov     edx, [ebp+arg_0]
.text:000012D7                 push    edx
.text:000012D8                 call    _InsertNode@12  ; InsertNode(x,x,x)
.text:000012DD                 mov     eax, [ebp+var_C]
.text:000012E0                 mov     ecx, [ebp+var_44]
.text:000012E3                 mov     [eax+4], ecx
.text:000012E6
.text:000012E6 loc_12E6:                               ; CODE XREF: UpdateModel(x)+316j
.text:000012E6                                         ; UpdateModel(x)+341j
.text:000012E6                 mov     edx, [ebp+var_C]
.text:000012E9                 movzx   eax, word ptr [edx+2]
.text:000012ED                 mov     ecx, [ebp+var_30]
.text:000012F0                 imul    ecx, 3
.text:000012F3                 add     ecx, 1
.text:000012F6                 cmp     ecx, [ebp+var_14]
.text:000012F9                 sbb     edx, edx
.text:000012FB                 neg     edx
.text:000012FD                 add     eax, edx
.text:000012FF                 mov     ecx, [ebp+var_C]
.text:00001302                 mov     [ecx+2], ax
.text:00001306                 jmp     loc_1394
.text:0000130B ; ---------------------------------------------------------------------------
.text:0000130B
.text:0000130B loc_130B:                               ; CODE XREF: UpdateModel(x)+30Aj
.text:0000130B                 push    0
.text:0000130D                 mov     edx, [ebp+arg_0]
.text:00001310                 push    edx
.text:00001311                 call    _AllocUnits@8   ; AllocUnits(x,x)
.text:00001316                 mov     [ebp+var_58], eax
.text:00001319                 cmp     [ebp+var_58], 0
.text:0000131D                 jnz     short loc_1331
.text:0000131F                 mov     eax, [ebp+var_C]
.text:00001322                 push    eax
.text:00001323                 mov     ecx, [ebp+arg_0]
.text:00001326                 push    ecx
.text:00001327                 call    _RestoreModel@8 ; RestoreModel(x,x)
.text:0000132C                 jmp     loc_1499
.text:00001331 ; ---------------------------------------------------------------------------
.text:00001331
.text:00001331 loc_1331:                               ; CODE XREF: UpdateModel(x)+41Dj
.text:00001331                 mov     edx, [ebp+var_C]
.text:00001334                 add     edx, 2
.text:00001337                 mov     eax, [ebp+var_58]
.text:0000133A                 mov     ecx, [edx]
.text:0000133C                 mov     [eax], ecx
.text:0000133E                 mov     dx, [edx+4]
.text:00001342                 mov     [eax+4], dx
.text:00001346                 mov     eax, [ebp+var_C]
.text:00001349                 mov     ecx, [ebp+var_58]
.text:0000134C                 mov     [eax+4], ecx
.text:0000134F                 mov     edx, [ebp+var_58]
.text:00001352                 movzx   eax, byte ptr [edx+1]
.text:00001356                 cmp     eax, 1Eh
.text:00001359                 jge     short loc_136B
.text:0000135B                 mov     ecx, [ebp+var_58]
.text:0000135E                 mov     dl, [ecx+1]
.text:00001361                 shl     dl, 1
.text:00001363                 mov     eax, [ebp+var_58]
.text:00001366                 mov     [eax+1], dl
.text:00001369                 jmp     short loc_1372
.text:0000136B ; ---------------------------------------------------------------------------
.text:0000136B
.text:0000136B loc_136B:                               ; CODE XREF: UpdateModel(x)+459j
.text:0000136B                 mov     ecx, [ebp+var_58]
.text:0000136E                 mov     byte ptr [ecx+1], 78h ; 'x'
.text:00001372
.text:00001372 loc_1372:                               ; CODE XREF: UpdateModel(x)+469j
.text:00001372                 mov     edx, [ebp+var_58]
.text:00001375                 movzx   eax, byte ptr [edx+1]
.text:00001379                 mov     ecx, [ebp+arg_0]
.text:0000137C                 add     eax, [ecx+10h]
.text:0000137F                 mov     edx, 2
.text:00001384                 cmp     edx, [ebp+var_14]
.text:00001387                 sbb     ecx, ecx
.text:00001389                 neg     ecx
.text:0000138B                 add     eax, ecx
.text:0000138D                 mov     edx, [ebp+var_C]
.text:00001390                 mov     [edx+2], ax
.text:00001394
.text:00001394 loc_1394:                               ; CODE XREF: UpdateModel(x)+406j
.text:00001394                 mov     eax, [ebp+var_18]
.text:00001397                 shl     eax, 1
.text:00001399                 mov     ecx, [ebp+var_C]
.text:0000139C                 movzx   edx, word ptr [ecx+2]
.text:000013A0                 add     edx, 6
.text:000013A3                 imul    eax, edx
.text:000013A6                 mov     [ebp+var_34], eax
.text:000013A9                 mov     eax, [ebp+var_C]
.text:000013AC                 movzx   ecx, word ptr [eax+2]
.text:000013B0                 add     ecx, [ebp+var_10]
.text:000013B3                 mov     [ebp+var_38], ecx
.text:000013B6                 mov     edx, [ebp+var_38]
.text:000013B9                 imul    edx, 6
.text:000013BC                 cmp     [ebp+var_34], edx
.text:000013BF                 jnb     short loc_13F3
.text:000013C1                 mov     eax, [ebp+var_34]
.text:000013C4                 cmp     [ebp+var_38], eax
.text:000013C7                 sbb     ecx, ecx
.text:000013C9                 neg     ecx
.text:000013CB                 mov     edx, [ebp+var_38]
.text:000013CE                 shl     edx, 2
.text:000013D1                 cmp     [ebp+var_34], edx
.text:000013D4                 sbb     eax, eax
.text:000013D6                 add     eax, 1
.text:000013D9                 lea     ecx, [ecx+eax+1]
.text:000013DD                 mov     [ebp+var_34], ecx
.text:000013E0                 mov     edx, [ebp+var_C]
.text:000013E3                 movzx   eax, word ptr [edx+2]
.text:000013E7                 add     eax, 4
.text:000013EA                 mov     ecx, [ebp+var_C]
.text:000013ED                 mov     [ecx+2], ax
.text:000013F1                 jmp     short loc_1434
.text:000013F3 ; ---------------------------------------------------------------------------
.text:000013F3
.text:000013F3 loc_13F3:                               ; CODE XREF: UpdateModel(x)+4BFj
.text:000013F3                 mov     edx, [ebp+var_38]
.text:000013F6                 imul    edx, 9
.text:000013F9                 cmp     edx, [ebp+var_34]
.text:000013FC                 sbb     eax, eax
.text:000013FE                 neg     eax
.text:00001400                 mov     ecx, [ebp+var_38]
.text:00001403                 imul    ecx, 0Ch
.text:00001406                 cmp     ecx, [ebp+var_34]
.text:00001409                 sbb     edx, edx
.text:0000140B                 neg     edx
.text:0000140D                 lea     eax, [eax+edx+4]
.text:00001411                 mov     ecx, [ebp+var_38]
.text:00001414                 imul    ecx, 0Fh
.text:00001417                 cmp     ecx, [ebp+var_34]
.text:0000141A                 sbb     edx, edx
.text:0000141C                 neg     edx
.text:0000141E                 add     eax, edx
.text:00001420                 mov     [ebp+var_34], eax
.text:00001423                 mov     eax, [ebp+var_C]
.text:00001426                 movzx   ecx, word ptr [eax+2]
.text:0000142A                 add     ecx, [ebp+var_34]
.text:0000142D                 mov     edx, [ebp+var_C]
.text:00001430                 mov     [edx+2], cx
.text:00001434
.text:00001434 loc_1434:                               ; CODE XREF: UpdateModel(x)+4F1j
.text:00001434                 mov     eax, [ebp+var_30]
.text:00001437                 imul    eax, 6
.text:0000143A                 mov     ecx, [ebp+var_C]
.text:0000143D                 mov     edx, [ecx+4]
.text:00001440                 lea     eax, [edx+eax+6]
.text:00001444                 mov     [ebp+var_5C], eax
.text:00001447                 mov     ecx, [ebp+var_4]
.text:0000144A                 push    ecx
.text:0000144B                 mov     edx, [ebp+var_5C]
.text:0000144E                 push    edx
.text:0000144F                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:00001454                 mov     eax, [ebp+var_5C]
.text:00001457                 mov     cl, [ebp+var_1A]
.text:0000145A                 mov     [eax], cl
.text:0000145C                 mov     edx, [ebp+var_5C]
.text:0000145F                 mov     al, byte ptr [ebp+var_34]
.text:00001462                 mov     [edx+1], al
.text:00001465                 movzx   ecx, [ebp+var_19]
.text:00001469                 mov     edx, [ebp+var_C]
.text:0000146C                 movzx   eax, byte ptr [edx+1]
.text:00001470                 or      eax, ecx
.text:00001472                 mov     ecx, [ebp+var_C]
.text:00001475                 mov     [ecx+1], al
.text:00001478                 mov     edx, [ebp+var_30]
.text:0000147B                 add     edx, 1
.text:0000147E                 mov     eax, [ebp+var_C]
.text:00001481                 mov     [eax], dl
.text:00001483                 jmp     loc_11E6
.text:00001488 ; ---------------------------------------------------------------------------
.text:00001488
.text:00001488 loc_1488:                               ; CODE XREF: UpdateModel(x)+2F7j
.text:00001488                 mov     ecx, [ebp+arg_0]
.text:0000148B                 mov     edx, [ebp+var_8]
.text:0000148E                 mov     [ecx], edx
.text:00001490                 mov     eax, [ebp+arg_0]
.text:00001493                 mov     ecx, [ebp+var_8]
.text:00001496                 mov     [eax+4], ecx
.text:00001499
.text:00001499 loc_1499:                               ; CODE XREF: UpdateModel(x):loc_10ACj
.text:00001499                                         ; UpdateModel(x)+1F4j ...
.text:00001499                 pop     edi
.text:0000149A                 add     esp, 60h
.text:0000149D                 cmp     ebp, esp
.text:0000149F                 call    __RTC_CheckEsp
.text:000014A4                 mov     esp, ebp
.text:000014A6                 pop     ebp
.text:000014A7                 retn    4
.text:000014A7 _UpdateModel@4  endp
.text:000014A7
.text:000014A7 ; ---------------------------------------------------------------------------
.text:000014AA                 align 10h
.text:000014B0
.text:000014B0 ; =============== S U B R O U T I N E =======================================
.text:000014B0
.text:000014B0 ; Attributes: bp-based frame
.text:000014B0
.text:000014B0 ; __stdcall AllocUnits(x, x)
.text:000014B0 _AllocUnits@8   proc near               ; CODE XREF: UpdateModel(x)+352p
.text:000014B0                                         ; UpdateModel(x)+411p
.text:000014B0
.text:000014B0 var_8           = dword ptr -8
.text:000014B0 var_4           = dword ptr -4
.text:000014B0 arg_0           = dword ptr  8
.text:000014B0 arg_4           = dword ptr  0Ch
.text:000014B0
.text:000014B0                 push    ebp
.text:000014B1                 mov     ebp, esp
.text:000014B3                 sub     esp, 8
.text:000014B6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000014BD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014C4                 mov     eax, [ebp+arg_4]
.text:000014C7                 mov     ecx, [ebp+arg_0]
.text:000014CA                 cmp     dword ptr [ecx+eax*4+100h], 0
.text:000014D2                 jz      short loc_14E3
.text:000014D4                 mov     edx, [ebp+arg_4]
.text:000014D7                 push    edx
.text:000014D8                 mov     eax, [ebp+arg_0]
.text:000014DB                 push    eax
.text:000014DC                 call    _RemoveNode@8   ; RemoveNode(x,x)
.text:000014E1                 jmp     short loc_152E
.text:000014E3 ; ---------------------------------------------------------------------------
.text:000014E3
.text:000014E3 loc_14E3:                               ; CODE XREF: AllocUnits(x,x)+22j
.text:000014E3                 mov     ecx, [ebp+arg_0]
.text:000014E6                 add     ecx, [ebp+arg_4]
.text:000014E9                 movzx   edx, byte ptr [ecx+58h]
.text:000014ED                 imul    edx, 0Ch
.text:000014F0                 mov     [ebp+var_4], edx
.text:000014F3                 mov     eax, [ebp+arg_0]
.text:000014F6                 mov     ecx, [ebp+arg_0]
.text:000014F9                 mov     edx, [eax+34h]
.text:000014FC                 sub     edx, [ecx+30h]
.text:000014FF                 cmp     [ebp+var_4], edx
.text:00001502                 ja      short loc_1521
.text:00001504                 mov     eax, [ebp+arg_0]
.text:00001507                 mov     ecx, [eax+30h]
.text:0000150A                 mov     [ebp+var_8], ecx
.text:0000150D                 mov     edx, [ebp+arg_0]
.text:00001510                 mov     eax, [edx+30h]
.text:00001513                 add     eax, [ebp+var_4]
.text:00001516                 mov     ecx, [ebp+arg_0]
.text:00001519                 mov     [ecx+30h], eax
.text:0000151C                 mov     eax, [ebp+var_8]
.text:0000151F                 jmp     short loc_152E
.text:00001521 ; ---------------------------------------------------------------------------
.text:00001521
.text:00001521 loc_1521:                               ; CODE XREF: AllocUnits(x,x)+52j
.text:00001521                 mov     edx, [ebp+arg_4]
.text:00001524                 push    edx
.text:00001525                 mov     eax, [ebp+arg_0]
.text:00001528                 push    eax
.text:00001529                 call    _AllocUnitsRare@8 ; AllocUnitsRare(x,x)
.text:0000152E
.text:0000152E loc_152E:                               ; CODE XREF: AllocUnits(x,x)+31j
.text:0000152E                                         ; AllocUnits(x,x)+6Fj
.text:0000152E                 add     esp, 8
.text:00001531                 cmp     ebp, esp
.text:00001533                 call    __RTC_CheckEsp
.text:00001538                 mov     esp, ebp
.text:0000153A                 pop     ebp
.text:0000153B                 retn    8
.text:0000153B _AllocUnits@8   endp
.text:0000153B
.text:0000153B ; ---------------------------------------------------------------------------
.text:0000153E                 align 10h
.text:00001540
.text:00001540 ; =============== S U B R O U T I N E =======================================
.text:00001540
.text:00001540 ; Attributes: bp-based frame
.text:00001540
.text:00001540 ; __stdcall AllocUnitsRare(x, x)
.text:00001540 _AllocUnitsRare@8 proc near             ; CODE XREF: AllocUnits(x,x)+79p
.text:00001540                                         ; CreateSuccessors(x,x,x,x)+2A3p
.text:00001540
.text:00001540 var_14          = dword ptr -14h
.text:00001540 var_10          = dword ptr -10h
.text:00001540 var_C           = dword ptr -0Ch
.text:00001540 var_8           = dword ptr -8
.text:00001540 var_4           = dword ptr -4
.text:00001540 arg_0           = dword ptr  8
.text:00001540 arg_4           = dword ptr  0Ch
.text:00001540
.text:00001540                 push    ebp
.text:00001541                 mov     ebp, esp
.text:00001543                 sub     esp, 14h
.text:00001546                 mov     eax, 0CCCCCCCCh
.text:0000154B                 mov     [ebp+var_14], eax
.text:0000154E                 mov     [ebp+var_10], eax
.text:00001551                 mov     [ebp+var_C], eax
.text:00001554                 mov     [ebp+var_8], eax
.text:00001557                 mov     [ebp+var_4], eax
.text:0000155A                 mov     eax, [ebp+arg_0]
.text:0000155D                 cmp     dword ptr [eax+28h], 0
.text:00001561                 jnz     short loc_158E
.text:00001563                 mov     ecx, [ebp+arg_0]
.text:00001566                 push    ecx
.text:00001567                 call    _GlueFreeBlocks@4 ; GlueFreeBlocks(x)
.text:0000156C                 mov     edx, [ebp+arg_4]
.text:0000156F                 mov     eax, [ebp+arg_0]
.text:00001572                 cmp     dword ptr [eax+edx*4+100h], 0
.text:0000157A                 jz      short loc_158E
.text:0000157C                 mov     ecx, [ebp+arg_4]
.text:0000157F                 push    ecx
.text:00001580                 mov     edx, [ebp+arg_0]
.text:00001583                 push    edx
.text:00001584                 call    _RemoveNode@8   ; RemoveNode(x,x)
.text:00001589                 jmp     loc_1634
.text:0000158E ; ---------------------------------------------------------------------------
.text:0000158E
.text:0000158E loc_158E:                               ; CODE XREF: AllocUnitsRare(x,x)+21j
.text:0000158E                                         ; AllocUnitsRare(x,x)+3Aj
.text:0000158E                 mov     eax, [ebp+arg_4]
.text:00001591                 mov     [ebp+var_4], eax
.text:00001594
.text:00001594 loc_1594:                               ; CODE XREF: AllocUnitsRare(x,x)+CAj
.text:00001594                 mov     ecx, [ebp+var_4]
.text:00001597                 add     ecx, 1
.text:0000159A                 mov     [ebp+var_4], ecx
.text:0000159D                 cmp     [ebp+var_4], 26h ; '&'
.text:000015A1                 jnz     short loc_15FC
.text:000015A3                 mov     edx, [ebp+arg_0]
.text:000015A6                 add     edx, [ebp+arg_4]
.text:000015A9                 movzx   eax, byte ptr [edx+58h]
.text:000015AD                 imul    eax, 0Ch
.text:000015B0                 mov     [ebp+var_C], eax
.text:000015B3                 mov     ecx, [ebp+arg_0]
.text:000015B6                 mov     edx, [ecx+28h]
.text:000015B9                 sub     edx, 1
.text:000015BC                 mov     eax, [ebp+arg_0]
.text:000015BF                 mov     [eax+28h], edx
.text:000015C2                 mov     ecx, [ebp+arg_0]
.text:000015C5                 mov     edx, [ebp+arg_0]
.text:000015C8                 mov     eax, [ecx+3Ch]
.text:000015CB                 sub     eax, [edx+38h]
.text:000015CE                 cmp     eax, [ebp+var_C]
.text:000015D1                 jbe     short loc_15F0
.text:000015D3                 mov     ecx, [ebp+arg_0]
.text:000015D6                 mov     edx, [ecx+3Ch]
.text:000015D9                 sub     edx, [ebp+var_C]
.text:000015DC                 mov     [ebp+var_10], edx
.text:000015DF                 mov     eax, [ebp+arg_0]
.text:000015E2                 mov     ecx, [ebp+var_10]
.text:000015E5                 mov     [eax+3Ch], ecx
.text:000015E8                 mov     edx, [ebp+var_10]
.text:000015EB                 mov     [ebp+var_14], edx
.text:000015EE                 jmp     short loc_15F7
.text:000015F0 ; ---------------------------------------------------------------------------
.text:000015F0
.text:000015F0 loc_15F0:                               ; CODE XREF: AllocUnitsRare(x,x)+91j
.text:000015F0                 mov     [ebp+var_14], 0
.text:000015F7
.text:000015F7 loc_15F7:                               ; CODE XREF: AllocUnitsRare(x,x)+AEj
.text:000015F7                 mov     eax, [ebp+var_14]
.text:000015FA                 jmp     short loc_1634
.text:000015FC ; ---------------------------------------------------------------------------
.text:000015FC
.text:000015FC loc_15FC:                               ; CODE XREF: AllocUnitsRare(x,x)+61j
.text:000015FC                 mov     eax, [ebp+var_4]
.text:000015FF                 mov     ecx, [ebp+arg_0]
.text:00001602                 cmp     dword ptr [ecx+eax*4+100h], 0
.text:0000160A                 jz      short loc_1594
.text:0000160C                 mov     edx, [ebp+var_4]
.text:0000160F                 push    edx
.text:00001610                 mov     eax, [ebp+arg_0]
.text:00001613                 push    eax
.text:00001614                 call    _RemoveNode@8   ; RemoveNode(x,x)
.text:00001619                 mov     [ebp+var_8], eax
.text:0000161C                 mov     ecx, [ebp+arg_4]
.text:0000161F                 push    ecx
.text:00001620                 mov     edx, [ebp+var_4]
.text:00001623                 push    edx
.text:00001624                 mov     eax, [ebp+var_8]
.text:00001627                 push    eax
.text:00001628                 mov     ecx, [ebp+arg_0]
.text:0000162B                 push    ecx
.text:0000162C                 call    _SplitBlock@16  ; SplitBlock(x,x,x,x)
.text:00001631                 mov     eax, [ebp+var_8]
.text:00001634
.text:00001634 loc_1634:                               ; CODE XREF: AllocUnitsRare(x,x)+49j
.text:00001634                                         ; AllocUnitsRare(x,x)+BAj
.text:00001634                 add     esp, 14h
.text:00001637                 cmp     ebp, esp
.text:00001639                 call    __RTC_CheckEsp
.text:0000163E                 mov     esp, ebp
.text:00001640                 pop     ebp
.text:00001641                 retn    8
.text:00001641 _AllocUnitsRare@8 endp
.text:00001641
.text:00001641 ; ---------------------------------------------------------------------------
.text:00001644                 align 10h
.text:00001650
.text:00001650 ; =============== S U B R O U T I N E =======================================
.text:00001650
.text:00001650 ; Attributes: bp-based frame
.text:00001650
.text:00001650 ; __stdcall GlueFreeBlocks(x)
.text:00001650 _GlueFreeBlocks@4 proc near             ; CODE XREF: AllocUnitsRare(x,x)+27p
.text:00001650
.text:00001650 var_2C          = dword ptr -2Ch
.text:00001650 var_28          = dword ptr -28h
.text:00001650 var_24          = dword ptr -24h
.text:00001650 var_20          = dword ptr -20h
.text:00001650 var_1C          = dword ptr -1Ch
.text:00001650 var_18          = dword ptr -18h
.text:00001650 var_14          = dword ptr -14h
.text:00001650 var_10          = dword ptr -10h
.text:00001650 var_8           = dword ptr -8
.text:00001650 arg_0           = dword ptr  8
.text:00001650
.text:00001650                 push    ebp
.text:00001651                 mov     ebp, esp
.text:00001653                 sub     esp, 2Ch
.text:00001656                 push    edi
.text:00001657                 lea     edi, [ebp+var_2C]
.text:0000165A                 mov     ecx, 0Bh
.text:0000165F                 mov     eax, 0CCCCCCCCh
.text:00001664                 rep stosd
.text:00001666                 mov     [ebp+var_8], 0
.text:0000166D                 lea     eax, [ebp+var_8]
.text:00001670                 mov     [ebp+var_10], eax
.text:00001673                 mov     ecx, [ebp+arg_0]
.text:00001676                 mov     dword ptr [ecx+28h], 2000h
.text:0000167D                 push    98h ; 'Ã¿'       ; Size
.text:00001682                 push    0               ; Val
.text:00001684                 mov     edx, [ebp+arg_0]
.text:00001687                 add     edx, 198h
.text:0000168D                 push    edx             ; Dst
.text:0000168E                 call    _memset
.text:00001693                 add     esp, 0Ch
.text:00001696                 mov     eax, [ebp+arg_0]
.text:00001699                 mov     ecx, [ebp+arg_0]
.text:0000169C                 mov     edx, [eax+30h]
.text:0000169F                 cmp     edx, [ecx+34h]
.text:000016A2                 jz      short loc_16B0
.text:000016A4                 mov     eax, [ebp+arg_0]
.text:000016A7                 mov     ecx, [eax+30h]
.text:000016AA                 mov     dword ptr [ecx], 0
.text:000016B0
.text:000016B0 loc_16B0:                               ; CODE XREF: GlueFreeBlocks(x)+52j
.text:000016B0                 mov     [ebp+var_14], 0
.text:000016B7                 jmp     short loc_16C2
.text:000016B9 ; ---------------------------------------------------------------------------
.text:000016B9
.text:000016B9 loc_16B9:                               ; CODE XREF: GlueFreeBlocks(x):loc_1753j
.text:000016B9                 mov     edx, [ebp+var_14]
.text:000016BC                 add     edx, 1
.text:000016BF                 mov     [ebp+var_14], edx
.text:000016C2
.text:000016C2 loc_16C2:                               ; CODE XREF: GlueFreeBlocks(x)+67j
.text:000016C2                 cmp     [ebp+var_14], 26h ; '&'
.text:000016C6                 jnb     loc_1758
.text:000016CC                 mov     eax, [ebp+var_14]
.text:000016CF                 mov     ecx, [ebp+arg_0]
.text:000016D2                 mov     edx, [ecx+eax*4+100h]
.text:000016D9                 mov     [ebp+var_18], edx
.text:000016DC                 mov     eax, [ebp+var_14]
.text:000016DF                 mov     ecx, [ebp+arg_0]
.text:000016E2                 mov     dword ptr [ecx+eax*4+100h], 0
.text:000016ED
.text:000016ED loc_16ED:                               ; CODE XREF: GlueFreeBlocks(x)+101j
.text:000016ED                 cmp     [ebp+var_18], 0
.text:000016F1                 jz      short loc_1753
.text:000016F3                 mov     edx, [ebp+var_18]
.text:000016F6                 mov     [ebp+var_1C], edx
.text:000016F9                 mov     eax, [ebp+var_1C]
.text:000016FC                 cmp     dword ptr [eax+8], 0
.text:00001700                 jz      short loc_1748
.text:00001702                 mov     ecx, [ebp+var_10]
.text:00001705                 mov     edx, [ebp+var_18]
.text:00001708                 mov     [ecx], edx
.text:0000170A                 mov     eax, [ebp+var_1C]
.text:0000170D                 add     eax, 4
.text:00001710                 mov     [ebp+var_10], eax
.text:00001713
.text:00001713 loc_1713:                               ; CODE XREF: GlueFreeBlocks(x)+F6j
.text:00001713                 mov     ecx, [ebp+var_1C]
.text:00001716                 mov     edx, [ecx+8]
.text:00001719                 imul    edx, 0Ch
.text:0000171C                 add     edx, [ebp+var_1C]
.text:0000171F                 mov     [ebp+var_20], edx
.text:00001722                 mov     eax, [ebp+var_20]
.text:00001725                 cmp     dword ptr [eax], 0FFFFFFFFh
.text:00001728                 jnz     short loc_1748
.text:0000172A                 mov     ecx, [ebp+var_1C]
.text:0000172D                 mov     edx, [ecx+8]
.text:00001730                 mov     eax, [ebp+var_20]
.text:00001733                 add     edx, [eax+8]
.text:00001736                 mov     ecx, [ebp+var_1C]
.text:00001739                 mov     [ecx+8], edx
.text:0000173C                 mov     edx, [ebp+var_20]
.text:0000173F                 mov     dword ptr [edx+8], 0
.text:00001746                 jmp     short loc_1713
.text:00001748 ; ---------------------------------------------------------------------------
.text:00001748
.text:00001748 loc_1748:                               ; CODE XREF: GlueFreeBlocks(x)+B0j
.text:00001748                                         ; GlueFreeBlocks(x)+D8j
.text:00001748                 mov     eax, [ebp+var_1C]
.text:0000174B                 mov     ecx, [eax+4]
.text:0000174E                 mov     [ebp+var_18], ecx
.text:00001751                 jmp     short loc_16ED
.text:00001753 ; ---------------------------------------------------------------------------
.text:00001753
.text:00001753 loc_1753:                               ; CODE XREF: GlueFreeBlocks(x)+A1j
.text:00001753                 jmp     loc_16B9
.text:00001758 ; ---------------------------------------------------------------------------
.text:00001758
.text:00001758 loc_1758:                               ; CODE XREF: GlueFreeBlocks(x)+76j
.text:00001758                 mov     edx, [ebp+var_10]
.text:0000175B                 mov     dword ptr [edx], 0
.text:00001761
.text:00001761 loc_1761:                               ; CODE XREF: GlueFreeBlocks(x)+139j
.text:00001761                                         ; GlueFreeBlocks(x)+1CEj
.text:00001761                 cmp     [ebp+var_8], 0
.text:00001765                 jz      loc_1823
.text:0000176B                 mov     eax, [ebp+var_8]
.text:0000176E                 mov     [ebp+var_24], eax
.text:00001771                 mov     ecx, [ebp+var_24]
.text:00001774                 mov     edx, [ecx+4]
.text:00001777                 mov     [ebp+var_8], edx
.text:0000177A                 mov     eax, [ebp+var_24]
.text:0000177D                 mov     ecx, [eax+8]
.text:00001780                 mov     [ebp+var_28], ecx
.text:00001783                 cmp     [ebp+var_28], 0
.text:00001787                 jnz     short loc_178B
.text:00001789                 jmp     short loc_1761
.text:0000178B ; ---------------------------------------------------------------------------
.text:0000178B
.text:0000178B loc_178B:                               ; CODE XREF: GlueFreeBlocks(x)+137j
.text:0000178B                 jmp     short loc_17A4
.text:0000178D ; ---------------------------------------------------------------------------
.text:0000178D
.text:0000178D loc_178D:                               ; CODE XREF: GlueFreeBlocks(x)+16Cj
.text:0000178D                 mov     edx, [ebp+var_28]
.text:00001790                 sub     edx, 80h ; 'Ã'
.text:00001796                 mov     [ebp+var_28], edx
.text:00001799                 mov     eax, [ebp+var_24]
.text:0000179C                 add     eax, 600h
.text:000017A1                 mov     [ebp+var_24], eax
.text:000017A4
.text:000017A4 loc_17A4:                               ; CODE XREF: GlueFreeBlocks(x):loc_178Bj
.text:000017A4                 cmp     [ebp+var_28], 80h ; 'Ã'
.text:000017AB                 jbe     short loc_17BE
.text:000017AD                 push    25h ; '%'
.text:000017AF                 mov     ecx, [ebp+var_24]
.text:000017B2                 push    ecx
.text:000017B3                 mov     edx, [ebp+arg_0]
.text:000017B6                 push    edx
.text:000017B7                 call    _InsertNode@12  ; InsertNode(x,x,x)
.text:000017BC                 jmp     short loc_178D
.text:000017BE ; ---------------------------------------------------------------------------
.text:000017BE
.text:000017BE loc_17BE:                               ; CODE XREF: GlueFreeBlocks(x)+15Bj
.text:000017BE                 mov     eax, [ebp+arg_0]
.text:000017C1                 add     eax, [ebp+var_28]
.text:000017C4                 movzx   ecx, byte ptr [eax+7Dh]
.text:000017C8                 mov     [ebp+var_14], ecx
.text:000017CB                 mov     edx, [ebp+arg_0]
.text:000017CE                 add     edx, [ebp+var_14]
.text:000017D1                 movzx   eax, byte ptr [edx+58h]
.text:000017D5                 cmp     eax, [ebp+var_28]
.text:000017D8                 jz      short loc_180D
.text:000017DA                 mov     ecx, [ebp+var_14]
.text:000017DD                 sub     ecx, 1
.text:000017E0                 mov     [ebp+var_14], ecx
.text:000017E3                 mov     edx, [ebp+arg_0]
.text:000017E6                 add     edx, [ebp+var_14]
.text:000017E9                 movzx   eax, byte ptr [edx+58h]
.text:000017ED                 mov     [ebp+var_2C], eax
.text:000017F0                 mov     ecx, [ebp+var_28]
.text:000017F3                 sub     ecx, [ebp+var_2C]
.text:000017F6                 sub     ecx, 1
.text:000017F9                 push    ecx
.text:000017FA                 mov     edx, [ebp+var_2C]
.text:000017FD                 imul    edx, 0Ch
.text:00001800                 add     edx, [ebp+var_24]
.text:00001803                 push    edx
.text:00001804                 mov     eax, [ebp+arg_0]
.text:00001807                 push    eax
.text:00001808                 call    _InsertNode@12  ; InsertNode(x,x,x)
.text:0000180D
.text:0000180D loc_180D:                               ; CODE XREF: GlueFreeBlocks(x)+188j
.text:0000180D                 mov     ecx, [ebp+var_14]
.text:00001810                 push    ecx
.text:00001811                 mov     edx, [ebp+var_24]
.text:00001814                 push    edx
.text:00001815                 mov     eax, [ebp+arg_0]
.text:00001818                 push    eax
.text:00001819                 call    _InsertNode@12  ; InsertNode(x,x,x)
.text:0000181E                 jmp     loc_1761
.text:00001823 ; ---------------------------------------------------------------------------
.text:00001823
.text:00001823 loc_1823:                               ; CODE XREF: GlueFreeBlocks(x)+115j
.text:00001823                 push    edx
.text:00001824                 mov     ecx, ebp
.text:00001826                 push    eax
.text:00001827                 lea     edx, $LN22
.text:0000182D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001832                 pop     eax
.text:00001833                 pop     edx
.text:00001834                 pop     edi
.text:00001835                 add     esp, 2Ch
.text:00001838                 cmp     ebp, esp
.text:0000183A                 call    __RTC_CheckEsp
.text:0000183F                 mov     esp, ebp
.text:00001841                 pop     ebp
.text:00001842                 retn    4
.text:00001842 _GlueFreeBlocks@4 endp
.text:00001842
.text:00001842 ; ---------------------------------------------------------------------------
.text:00001845                 align 4
.text:00001848 $LN22           dd 1                    ; DATA XREF: GlueFreeBlocks(x)+1D7o
.text:0000184C                 dd offset $LN21
.text:00001850 $LN21           dd 0FFFFFFF8h, 4        ; DATA XREF: .text:0000184Co
.text:00001858                 dd offset $LN20         ; "head"
.text:0000185C $LN20           db 'head',0             ; DATA XREF: .text:00001858o
.text:00001861                 align 10h
.text:00001870
.text:00001870 ; =============== S U B R O U T I N E =======================================
.text:00001870
.text:00001870 ; Attributes: bp-based frame
.text:00001870
.text:00001870 ; __stdcall RestoreModel(x, x)
.text:00001870 _RestoreModel@8 proc near               ; CODE XREF: UpdateModel(x)+18Cp
.text:00001870                                         ; UpdateModel(x)+1EFp ...
.text:00001870
.text:00001870 var_C           = dword ptr -0Ch
.text:00001870 var_8           = dword ptr -8
.text:00001870 var_4           = dword ptr -4
.text:00001870 arg_0           = dword ptr  8
.text:00001870 arg_4           = dword ptr  0Ch
.text:00001870
.text:00001870                 push    ebp
.text:00001871                 mov     ebp, esp
.text:00001873                 sub     esp, 0Ch
.text:00001876                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000187D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001884                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000188B                 mov     eax, [ebp+arg_0]
.text:0000188E                 mov     ecx, [eax+2Ch]
.text:00001891                 mov     edx, [ebp+arg_0]
.text:00001894                 add     ecx, [edx+40h]
.text:00001897                 mov     eax, [ebp+arg_0]
.text:0000189A                 mov     [eax+38h], ecx
.text:0000189D                 mov     ecx, [ebp+arg_0]
.text:000018A0                 mov     edx, [ecx+4]
.text:000018A3                 mov     [ebp+var_4], edx
.text:000018A6                 jmp     short loc_18B1
.text:000018A8 ; ---------------------------------------------------------------------------
.text:000018A8
.text:000018A8 loc_18A8:                               ; CODE XREF: RestoreModel(x,x):loc_1950j
.text:000018A8                 mov     eax, [ebp+var_4]
.text:000018AB                 mov     ecx, [eax+8]
.text:000018AE                 mov     [ebp+var_4], ecx
.text:000018B1
.text:000018B1 loc_18B1:                               ; CODE XREF: RestoreModel(x,x)+36j
.text:000018B1                 mov     edx, [ebp+var_4]
.text:000018B4                 cmp     edx, [ebp+arg_4]
.text:000018B7                 jz      loc_1955
.text:000018BD                 mov     eax, [ebp+var_4]
.text:000018C0                 mov     cl, [eax]
.text:000018C2                 sub     cl, 1
.text:000018C5                 mov     edx, [ebp+var_4]
.text:000018C8                 mov     [edx], cl
.text:000018CA                 mov     eax, [ebp+var_4]
.text:000018CD                 movzx   ecx, byte ptr [eax]
.text:000018D0                 test    ecx, ecx
.text:000018D2                 jnz     short loc_1935
.text:000018D4                 mov     edx, [ebp+var_4]
.text:000018D7                 mov     eax, [edx+4]
.text:000018DA                 mov     [ebp+var_8], eax
.text:000018DD                 mov     ecx, [ebp+var_4]
.text:000018E0                 movzx   edx, byte ptr [ecx+1]
.text:000018E4                 and     edx, 10h
.text:000018E7                 mov     eax, [ebp+var_8]
.text:000018EA                 movzx   ecx, byte ptr [eax]
.text:000018ED                 xor     eax, eax
.text:000018EF                 cmp     ecx, 40h ; '@'
.text:000018F2                 setnl   al
.text:000018F5                 lea     ecx, [edx+eax*8]
.text:000018F8                 mov     edx, [ebp+var_4]
.text:000018FB                 mov     [edx+1], cl
.text:000018FE                 mov     eax, [ebp+var_8]
.text:00001901                 mov     ecx, [ebp+var_4]
.text:00001904                 add     ecx, 2
.text:00001907                 mov     edx, [eax]
.text:00001909                 mov     [ecx], edx
.text:0000190B                 mov     ax, [eax+4]
.text:0000190F                 mov     [ecx+4], ax
.text:00001913                 mov     ecx, [ebp+var_8]
.text:00001916                 push    ecx
.text:00001917                 mov     edx, [ebp+arg_0]
.text:0000191A                 push    edx
.text:0000191B                 call    _SpecialFreeUnit@8 ; SpecialFreeUnit(x,x)
.text:00001920                 mov     eax, [ebp+var_4]
.text:00001923                 movzx   ecx, byte ptr [eax+3]
.text:00001927                 add     ecx, 0Bh
.text:0000192A                 shr     ecx, 3
.text:0000192D                 mov     edx, [ebp+var_4]
.text:00001930                 mov     [edx+3], cl
.text:00001933                 jmp     short loc_1950
.text:00001935 ; ---------------------------------------------------------------------------
.text:00001935
.text:00001935 loc_1935:                               ; CODE XREF: RestoreModel(x,x)+62j
.text:00001935                 push    0
.text:00001937                 mov     eax, [ebp+var_4]
.text:0000193A                 movzx   ecx, byte ptr [eax]
.text:0000193D                 add     ecx, 3
.text:00001940                 sar     ecx, 1
.text:00001942                 push    ecx
.text:00001943                 mov     edx, [ebp+var_4]
.text:00001946                 push    edx
.text:00001947                 mov     eax, [ebp+arg_0]
.text:0000194A                 push    eax
.text:0000194B                 call    _Refresh@16     ; Refresh(x,x,x,x)
.text:00001950
.text:00001950 loc_1950:                               ; CODE XREF: RestoreModel(x,x)+C3j
.text:00001950                 jmp     loc_18A8
.text:00001955 ; ---------------------------------------------------------------------------
.text:00001955
.text:00001955 loc_1955:                               ; CODE XREF: RestoreModel(x,x)+47j
.text:00001955                 jmp     short loc_1960
.text:00001957 ; ---------------------------------------------------------------------------
.text:00001957
.text:00001957 loc_1957:                               ; CODE XREF: RestoreModel(x,x):loc_19D6j
.text:00001957                 mov     ecx, [ebp+var_4]
.text:0000195A                 mov     edx, [ecx+8]
.text:0000195D                 mov     [ebp+var_4], edx
.text:00001960
.text:00001960 loc_1960:                               ; CODE XREF: RestoreModel(x,x):loc_1955j
.text:00001960                 mov     eax, [ebp+arg_0]
.text:00001963                 mov     ecx, [ebp+var_4]
.text:00001966                 cmp     ecx, [eax]
.text:00001968                 jz      short loc_19DB
.text:0000196A                 mov     edx, [ebp+var_4]
.text:0000196D                 movzx   eax, byte ptr [edx]
.text:00001970                 test    eax, eax
.text:00001972                 jnz     short loc_198E
.text:00001974                 mov     ecx, [ebp+var_4]
.text:00001977                 movzx   edx, byte ptr [ecx+3]
.text:0000197B                 mov     eax, [ebp+var_4]
.text:0000197E                 movzx   ecx, byte ptr [eax+3]
.text:00001982                 sar     ecx, 1
.text:00001984                 sub     edx, ecx
.text:00001986                 mov     eax, [ebp+var_4]
.text:00001989                 mov     [eax+3], dl
.text:0000198C                 jmp     short loc_19D6
.text:0000198E ; ---------------------------------------------------------------------------
.text:0000198E
.text:0000198E loc_198E:                               ; CODE XREF: RestoreModel(x,x)+102j
.text:0000198E                 mov     ecx, [ebp+var_4]
.text:00001991                 movzx   edx, word ptr [ecx+2]
.text:00001995                 add     edx, 4
.text:00001998                 mov     [ebp+var_C], edx
.text:0000199B                 mov     eax, [ebp+var_4]
.text:0000199E                 mov     cx, word ptr [ebp+var_C]
.text:000019A2                 mov     [eax+2], cx
.text:000019A6                 movzx   edx, word ptr [ebp+var_C]
.text:000019AA                 mov     eax, [ebp+var_4]
.text:000019AD                 movzx   ecx, byte ptr [eax]
.text:000019B0                 lea     eax, ds:80h[ecx*4]
.text:000019B7                 cmp     edx, eax
.text:000019B9                 jle     short loc_19D6
.text:000019BB                 push    1
.text:000019BD                 mov     ecx, [ebp+var_4]
.text:000019C0                 movzx   edx, byte ptr [ecx]
.text:000019C3                 add     edx, 2
.text:000019C6                 sar     edx, 1
.text:000019C8                 push    edx
.text:000019C9                 mov     eax, [ebp+var_4]
.text:000019CC                 push    eax
.text:000019CD                 mov     ecx, [ebp+arg_0]
.text:000019D0                 push    ecx
.text:000019D1                 call    _Refresh@16     ; Refresh(x,x,x,x)
.text:000019D6
.text:000019D6 loc_19D6:                               ; CODE XREF: RestoreModel(x,x)+11Cj
.text:000019D6                                         ; RestoreModel(x,x)+149j
.text:000019D6                 jmp     loc_1957
.text:000019DB ; ---------------------------------------------------------------------------
.text:000019DB
.text:000019DB loc_19DB:                               ; CODE XREF: RestoreModel(x,x)+F8j
.text:000019DB                 mov     edx, [ebp+arg_0]
.text:000019DE                 cmp     dword ptr [edx+44h], 0
.text:000019E2                 jz      short loc_19F9
.text:000019E4                 mov     eax, [ebp+arg_0]
.text:000019E7                 push    eax
.text:000019E8                 call    _GetUsedMemory@4 ; GetUsedMemory(x)
.text:000019ED                 mov     ecx, [ebp+arg_0]
.text:000019F0                 mov     edx, [ecx+24h]
.text:000019F3                 shr     edx, 1
.text:000019F5                 cmp     eax, edx
.text:000019F7                 jnb     short loc_1A04
.text:000019F9
.text:000019F9 loc_19F9:                               ; CODE XREF: RestoreModel(x,x)+172j
.text:000019F9                 mov     eax, [ebp+arg_0]
.text:000019FC                 push    eax
.text:000019FD                 call    _RestartModel@4 ; RestartModel(x)
.text:00001A02                 jmp     short loc_1A6B
.text:00001A04 ; ---------------------------------------------------------------------------
.text:00001A04
.text:00001A04 loc_1A04:                               ; CODE XREF: RestoreModel(x,x)+187j
.text:00001A04                                         ; RestoreModel(x,x)+1AFj
.text:00001A04                 mov     ecx, [ebp+arg_0]
.text:00001A07                 mov     edx, [ecx+4]
.text:00001A0A                 cmp     dword ptr [edx+8], 0
.text:00001A0E                 jz      short loc_1A21
.text:00001A10                 mov     eax, [ebp+arg_0]
.text:00001A13                 mov     ecx, [eax+4]
.text:00001A16                 mov     edx, [ebp+arg_0]
.text:00001A19                 mov     eax, [ecx+8]
.text:00001A1C                 mov     [edx+4], eax
.text:00001A1F                 jmp     short loc_1A04
.text:00001A21 ; ---------------------------------------------------------------------------
.text:00001A21
.text:00001A21 loc_1A21:                               ; CODE XREF: RestoreModel(x,x)+19Ej
.text:00001A21                                         ; RestoreModel(x,x)+1E3j
.text:00001A21                 push    0
.text:00001A23                 mov     ecx, [ebp+arg_0]
.text:00001A26                 mov     edx, [ecx+4]
.text:00001A29                 push    edx
.text:00001A2A                 mov     eax, [ebp+arg_0]
.text:00001A2D                 push    eax
.text:00001A2E                 call    _CutOff@12      ; CutOff(x,x,x)
.text:00001A33                 mov     ecx, [ebp+arg_0]
.text:00001A36                 push    ecx
.text:00001A37                 call    _ExpandTextArea@4 ; ExpandTextArea(x)
.text:00001A3C                 mov     edx, [ebp+arg_0]
.text:00001A3F                 push    edx
.text:00001A40                 call    _GetUsedMemory@4 ; GetUsedMemory(x)
.text:00001A45                 mov     ecx, [ebp+arg_0]
.text:00001A48                 mov     edx, [ecx+24h]
.text:00001A4B                 shr     edx, 2
.text:00001A4E                 imul    edx, 3
.text:00001A51                 cmp     eax, edx
.text:00001A53                 ja      short loc_1A21
.text:00001A55                 mov     eax, [ebp+arg_0]
.text:00001A58                 mov     dword ptr [eax+28h], 0
.text:00001A5F                 mov     ecx, [ebp+arg_0]
.text:00001A62                 mov     edx, [ebp+arg_0]
.text:00001A65                 mov     eax, [edx+18h]
.text:00001A68                 mov     [ecx+0Ch], eax
.text:00001A6B
.text:00001A6B loc_1A6B:                               ; CODE XREF: RestoreModel(x,x)+192j
.text:00001A6B                 add     esp, 0Ch
.text:00001A6E                 cmp     ebp, esp
.text:00001A70                 call    __RTC_CheckEsp
.text:00001A75                 mov     esp, ebp
.text:00001A77                 pop     ebp
.text:00001A78                 retn    8
.text:00001A78 _RestoreModel@8 endp
.text:00001A78
.text:00001A78 ; ---------------------------------------------------------------------------
.text:00001A7B                 align 10h
.text:00001A80
.text:00001A80 ; =============== S U B R O U T I N E =======================================
.text:00001A80
.text:00001A80 ; Attributes: bp-based frame
.text:00001A80
.text:00001A80 ; __stdcall SpecialFreeUnit(x, x)
.text:00001A80 _SpecialFreeUnit@8 proc near            ; CODE XREF: RestoreModel(x,x)+ABp
.text:00001A80                                         ; CutOff(x,x,x)+BAp ...
.text:00001A80
.text:00001A80 arg_0           = dword ptr  8
.text:00001A80 arg_4           = dword ptr  0Ch
.text:00001A80
.text:00001A80                 push    ebp
.text:00001A81                 mov     ebp, esp
.text:00001A83                 mov     eax, [ebp+arg_0]
.text:00001A86                 mov     ecx, [ebp+arg_4]
.text:00001A89                 cmp     ecx, [eax+3Ch]
.text:00001A8C                 jz      short loc_1A9F
.text:00001A8E                 push    0
.text:00001A90                 mov     edx, [ebp+arg_4]
.text:00001A93                 push    edx
.text:00001A94                 mov     eax, [ebp+arg_0]
.text:00001A97                 push    eax
.text:00001A98                 call    _InsertNode@12  ; InsertNode(x,x,x)
.text:00001A9D                 jmp     short loc_1AAE
.text:00001A9F ; ---------------------------------------------------------------------------
.text:00001A9F
.text:00001A9F loc_1A9F:                               ; CODE XREF: SpecialFreeUnit(x,x)+Cj
.text:00001A9F                 mov     ecx, [ebp+arg_0]
.text:00001AA2                 mov     edx, [ecx+3Ch]
.text:00001AA5                 add     edx, 0Ch
.text:00001AA8                 mov     eax, [ebp+arg_0]
.text:00001AAB                 mov     [eax+3Ch], edx
.text:00001AAE
.text:00001AAE loc_1AAE:                               ; CODE XREF: SpecialFreeUnit(x,x)+1Dj
.text:00001AAE                 cmp     ebp, esp
.text:00001AB0                 call    __RTC_CheckEsp
.text:00001AB5                 pop     ebp
.text:00001AB6                 retn    8
.text:00001AB6 _SpecialFreeUnit@8 endp
.text:00001AB6
.text:00001AB6 ; ---------------------------------------------------------------------------
.text:00001AB9                 align 10h
.text:00001AC0
.text:00001AC0 ; =============== S U B R O U T I N E =======================================
.text:00001AC0
.text:00001AC0 ; Attributes: bp-based frame
.text:00001AC0
.text:00001AC0 ; __stdcall ExpandTextArea(x)
.text:00001AC0 _ExpandTextArea@4 proc near             ; CODE XREF: RestoreModel(x,x)+1C7p
.text:00001AC0
.text:00001AC0 var_B8          = dword ptr -0B8h
.text:00001AC0 var_B4          = dword ptr -0B4h
.text:00001AC0 var_B0          = dword ptr -0B0h
.text:00001AC0 var_AC          = dword ptr -0ACh
.text:00001AC0 var_A8          = dword ptr -0A8h
.text:00001AC0 Dst             = dword ptr -0A0h
.text:00001AC0 var_4           = dword ptr -4
.text:00001AC0 arg_0           = dword ptr  8
.text:00001AC0
.text:00001AC0                 push    ebp
.text:00001AC1                 mov     ebp, esp
.text:00001AC3                 sub     esp, 0B8h
.text:00001AC9                 push    edi
.text:00001ACA                 lea     edi, [ebp+var_B8]
.text:00001AD0                 mov     ecx, 2Eh ; '.'
.text:00001AD5                 mov     eax, 0CCCCCCCCh
.text:00001ADA                 rep stosd
.text:00001ADC                 mov     eax, dword ptr ds:___security_cookie
.text:00001AE1                 xor     eax, ebp
.text:00001AE3                 mov     [ebp+var_4], eax
.text:00001AE6                 push    98h ; 'Ã¿'       ; Size
.text:00001AEB                 push    0               ; Val
.text:00001AED                 lea     eax, [ebp+Dst]
.text:00001AF3                 push    eax             ; Dst
.text:00001AF4                 call    _memset
.text:00001AF9                 add     esp, 0Ch
.text:00001AFC                 mov     ecx, [ebp+arg_0]
.text:00001AFF                 mov     edx, [ebp+arg_0]
.text:00001B02                 mov     eax, [ecx+30h]
.text:00001B05                 cmp     eax, [edx+34h]
.text:00001B08                 jz      short loc_1B16
.text:00001B0A                 mov     ecx, [ebp+arg_0]
.text:00001B0D                 mov     edx, [ecx+30h]
.text:00001B10                 mov     dword ptr [edx], 0
.text:00001B16
.text:00001B16 loc_1B16:                               ; CODE XREF: ExpandTextArea(x)+48j
.text:00001B16                 mov     eax, [ebp+arg_0]
.text:00001B19                 mov     ecx, [eax+3Ch]
.text:00001B1C                 mov     [ebp+var_AC], ecx
.text:00001B22                 jmp     short loc_1B3C
.text:00001B24 ; ---------------------------------------------------------------------------
.text:00001B24
.text:00001B24 loc_1B24:                               ; CODE XREF: ExpandTextArea(x)+C6j
.text:00001B24                 mov     edx, [ebp+var_AC]
.text:00001B2A                 mov     eax, [edx+8]
.text:00001B2D                 imul    eax, 0Ch
.text:00001B30                 add     eax, [ebp+var_AC]
.text:00001B36                 mov     [ebp+var_AC], eax
.text:00001B3C
.text:00001B3C loc_1B3C:                               ; CODE XREF: ExpandTextArea(x)+62j
.text:00001B3C                 mov     ecx, [ebp+var_AC]
.text:00001B42                 cmp     dword ptr [ecx], 0FFFFFFFFh
.text:00001B45                 jnz     short loc_1B88
.text:00001B47                 mov     edx, [ebp+var_AC]
.text:00001B4D                 mov     dword ptr [edx], 0
.text:00001B53                 mov     eax, [ebp+var_AC]
.text:00001B59                 mov     ecx, [eax+8]
.text:00001B5C                 mov     edx, [ebp+arg_0]
.text:00001B5F                 movzx   eax, byte ptr [edx+ecx+7Dh]
.text:00001B64                 mov     ecx, [ebp+eax*4+Dst]
.text:00001B6B                 add     ecx, 1
.text:00001B6E                 mov     edx, [ebp+var_AC]
.text:00001B74                 mov     eax, [edx+8]
.text:00001B77                 mov     edx, [ebp+arg_0]
.text:00001B7A                 movzx   eax, byte ptr [edx+eax+7Dh]
.text:00001B7F                 mov     [ebp+eax*4+Dst], ecx
.text:00001B86                 jmp     short loc_1B24
.text:00001B88 ; ---------------------------------------------------------------------------
.text:00001B88
.text:00001B88 loc_1B88:                               ; CODE XREF: ExpandTextArea(x)+85j
.text:00001B88                 mov     ecx, [ebp+arg_0]
.text:00001B8B                 mov     edx, [ebp+var_AC]
.text:00001B91                 mov     [ecx+3Ch], edx
.text:00001B94                 mov     [ebp+var_A8], 0
.text:00001B9E                 jmp     short loc_1BAF
.text:00001BA0 ; ---------------------------------------------------------------------------
.text:00001BA0
.text:00001BA0 loc_1BA0:                               ; CODE XREF: ExpandTextArea(x):loc_1C8Ej
.text:00001BA0                 mov     eax, [ebp+var_A8]
.text:00001BA6                 add     eax, 1
.text:00001BA9                 mov     [ebp+var_A8], eax
.text:00001BAF
.text:00001BAF loc_1BAF:                               ; CODE XREF: ExpandTextArea(x)+DEj
.text:00001BAF                 cmp     [ebp+var_A8], 26h ; '&'
.text:00001BB6                 jnb     loc_1C93
.text:00001BBC                 mov     ecx, [ebp+var_A8]
.text:00001BC2                 mov     edx, [ebp+arg_0]
.text:00001BC5                 lea     eax, [edx+ecx*4+100h]
.text:00001BCC                 mov     [ebp+var_B0], eax
.text:00001BD2
.text:00001BD2 loc_1BD2:                               ; CODE XREF: ExpandTextArea(x)+1C9j
.text:00001BD2                 mov     ecx, [ebp+var_A8]
.text:00001BD8                 cmp     [ebp+ecx*4+Dst], 0
.text:00001BE0                 jz      loc_1C8E
.text:00001BE6                 mov     edx, [ebp+var_B0]
.text:00001BEC                 mov     eax, [edx]
.text:00001BEE                 mov     [ebp+var_B4], eax
.text:00001BF4
.text:00001BF4 loc_1BF4:                               ; CODE XREF: ExpandTextArea(x):loc_1C75j
.text:00001BF4                 mov     ecx, [ebp+var_B4]
.text:00001BFA                 cmp     dword ptr [ecx], 0
.text:00001BFD                 jnz     short loc_1C7A
.text:00001BFF                 mov     edx, [ebp+var_B0]
.text:00001C05                 mov     eax, [ebp+var_B4]
.text:00001C0B                 mov     ecx, [eax+4]
.text:00001C0E                 mov     [edx], ecx
.text:00001C10                 mov     edx, [ebp+var_B0]
.text:00001C16                 mov     eax, [edx]
.text:00001C18                 mov     [ebp+var_B4], eax
.text:00001C1E                 mov     ecx, [ebp+var_A8]
.text:00001C24                 mov     edx, [ebp+arg_0]
.text:00001C27                 mov     eax, [edx+ecx*4+198h]
.text:00001C2E                 sub     eax, 1
.text:00001C31                 mov     ecx, [ebp+var_A8]
.text:00001C37                 mov     edx, [ebp+arg_0]
.text:00001C3A                 mov     [edx+ecx*4+198h], eax
.text:00001C41                 mov     eax, [ebp+var_A8]
.text:00001C47                 mov     ecx, [ebp+eax*4+Dst]
.text:00001C4E                 sub     ecx, 1
.text:00001C51                 mov     [ebp+var_B8], ecx
.text:00001C57                 mov     edx, [ebp+var_A8]
.text:00001C5D                 mov     eax, [ebp+var_B8]
.text:00001C63                 mov     [ebp+edx*4+Dst], eax
.text:00001C6A                 cmp     [ebp+var_B8], 0
.text:00001C71                 jnz     short loc_1C75
.text:00001C73                 jmp     short loc_1C7A
.text:00001C75 ; ---------------------------------------------------------------------------
.text:00001C75
.text:00001C75 loc_1C75:                               ; CODE XREF: ExpandTextArea(x)+1B1j
.text:00001C75                 jmp     loc_1BF4
.text:00001C7A ; ---------------------------------------------------------------------------
.text:00001C7A
.text:00001C7A loc_1C7A:                               ; CODE XREF: ExpandTextArea(x)+13Dj
.text:00001C7A                                         ; ExpandTextArea(x)+1B3j
.text:00001C7A                 mov     ecx, [ebp+var_B4]
.text:00001C80                 add     ecx, 4
.text:00001C83                 mov     [ebp+var_B0], ecx
.text:00001C89                 jmp     loc_1BD2
.text:00001C8E ; ---------------------------------------------------------------------------
.text:00001C8E
.text:00001C8E loc_1C8E:                               ; CODE XREF: ExpandTextArea(x)+120j
.text:00001C8E                 jmp     loc_1BA0
.text:00001C93 ; ---------------------------------------------------------------------------
.text:00001C93
.text:00001C93 loc_1C93:                               ; CODE XREF: ExpandTextArea(x)+F6j
.text:00001C93                 push    edx
.text:00001C94                 mov     ecx, ebp
.text:00001C96                 push    eax
.text:00001C97                 lea     edx, $LN17
.text:00001C9D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001CA2                 pop     eax
.text:00001CA3                 pop     edx
.text:00001CA4                 pop     edi
.text:00001CA5                 mov     ecx, [ebp+var_4]
.text:00001CA8                 xor     ecx, ebp
.text:00001CAA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001CAF                 add     esp, 0B8h
.text:00001CB5                 cmp     ebp, esp
.text:00001CB7                 call    __RTC_CheckEsp
.text:00001CBC                 mov     esp, ebp
.text:00001CBE                 pop     ebp
.text:00001CBF                 retn    4
.text:00001CBF _ExpandTextArea@4 endp
.text:00001CBF
.text:00001CBF ; ---------------------------------------------------------------------------
.text:00001CC2                 align 4
.text:00001CC4 $LN17           dd 1                    ; DATA XREF: ExpandTextArea(x)+1D7o
.text:00001CC8                 dd offset $LN16
.text:00001CCC $LN16           dd 0FFFFFF60h, 98h      ; DATA XREF: .text:00001CC8o
.text:00001CD4                 dd offset $LN15         ; "count"
.text:00001CD8 $LN15           db 'count',0            ; DATA XREF: .text:00001CD4o
.text:00001CDE                 align 10h
.text:00001CE0
.text:00001CE0 ; =============== S U B R O U T I N E =======================================
.text:00001CE0
.text:00001CE0 ; Attributes: bp-based frame
.text:00001CE0
.text:00001CE0 ; __stdcall Refresh(x, x, x, x)
.text:00001CE0 _Refresh@16     proc near               ; CODE XREF: RestoreModel(x,x)+DBp
.text:00001CE0                                         ; RestoreModel(x,x)+161p ...
.text:00001CE0
.text:00001CE0 var_1C          = dword ptr -1Ch
.text:00001CE0 var_18          = dword ptr -18h
.text:00001CE0 var_14          = dword ptr -14h
.text:00001CE0 var_10          = dword ptr -10h
.text:00001CE0 var_C           = dword ptr -0Ch
.text:00001CE0 var_8           = dword ptr -8
.text:00001CE0 var_4           = dword ptr -4
.text:00001CE0 arg_0           = dword ptr  8
.text:00001CE0 arg_4           = dword ptr  0Ch
.text:00001CE0 arg_8           = dword ptr  10h
.text:00001CE0 arg_C           = dword ptr  14h
.text:00001CE0
.text:00001CE0                 push    ebp
.text:00001CE1                 mov     ebp, esp
.text:00001CE3                 sub     esp, 1Ch
.text:00001CE6                 mov     eax, 0CCCCCCCCh
.text:00001CEB                 mov     [ebp+var_1C], eax
.text:00001CEE                 mov     [ebp+var_18], eax
.text:00001CF1                 mov     [ebp+var_14], eax
.text:00001CF4                 mov     [ebp+var_10], eax
.text:00001CF7                 mov     [ebp+var_C], eax
.text:00001CFA                 mov     [ebp+var_8], eax
.text:00001CFD                 mov     [ebp+var_4], eax
.text:00001D00                 mov     eax, [ebp+arg_4]
.text:00001D03                 movzx   ecx, byte ptr [eax]
.text:00001D06                 mov     [ebp+var_4], ecx
.text:00001D09                 mov     edx, [ebp+var_4]
.text:00001D0C                 add     edx, 2
.text:00001D0F                 shr     edx, 1
.text:00001D11                 push    edx
.text:00001D12                 mov     eax, [ebp+arg_8]
.text:00001D15                 push    eax
.text:00001D16                 mov     ecx, [ebp+arg_4]
.text:00001D19                 mov     edx, [ecx+4]
.text:00001D1C                 push    edx
.text:00001D1D                 mov     eax, [ebp+arg_0]
.text:00001D20                 push    eax
.text:00001D21                 call    _ShrinkUnits@16 ; ShrinkUnits(x,x,x,x)
.text:00001D26                 mov     [ebp+var_14], eax
.text:00001D29                 mov     ecx, [ebp+arg_4]
.text:00001D2C                 mov     edx, [ebp+var_14]
.text:00001D2F                 mov     [ecx+4], edx
.text:00001D32                 mov     eax, [ebp+arg_4]
.text:00001D35                 movzx   ecx, byte ptr [eax+1]
.text:00001D39                 mov     edx, [ebp+arg_C]
.text:00001D3C                 lea     eax, ds:10h[edx*4]
.text:00001D43                 and     ecx, eax
.text:00001D45                 mov     edx, [ebp+var_14]
.text:00001D48                 movzx   eax, byte ptr [edx]
.text:00001D4B                 xor     edx, edx
.text:00001D4D                 cmp     eax, 40h ; '@'
.text:00001D50                 setnl   dl
.text:00001D53                 lea     eax, [ecx+edx*8]
.text:00001D56                 mov     [ebp+var_10], eax
.text:00001D59                 mov     ecx, [ebp+arg_4]
.text:00001D5C                 movzx   edx, word ptr [ecx+2]
.text:00001D60                 mov     eax, [ebp+var_14]
.text:00001D63                 movzx   ecx, byte ptr [eax+1]
.text:00001D67                 sub     edx, ecx
.text:00001D69                 mov     [ebp+var_8], edx
.text:00001D6C                 mov     edx, [ebp+var_14]
.text:00001D6F                 movzx   eax, byte ptr [edx+1]
.text:00001D73                 add     eax, [ebp+arg_C]
.text:00001D76                 mov     ecx, [ebp+arg_C]
.text:00001D79                 shr     eax, cl
.text:00001D7B                 mov     [ebp+var_18], eax
.text:00001D7E                 mov     ecx, [ebp+var_14]
.text:00001D81                 mov     dl, byte ptr [ebp+var_18]
.text:00001D84                 mov     [ecx+1], dl
.text:00001D87                 movzx   eax, byte ptr [ebp+var_18]
.text:00001D8B                 mov     [ebp+var_C], eax
.text:00001D8E
.text:00001D8E loc_1D8E:                               ; CODE XREF: Refresh(x,x,x,x)+10Bj
.text:00001D8E                 mov     ecx, [ebp+var_14]
.text:00001D91                 add     ecx, 6
.text:00001D94                 mov     [ebp+var_14], ecx
.text:00001D97                 mov     edx, [ebp+var_14]
.text:00001D9A                 movzx   eax, byte ptr [edx+1]
.text:00001D9E                 mov     ecx, [ebp+var_8]
.text:00001DA1                 sub     ecx, eax
.text:00001DA3                 mov     [ebp+var_8], ecx
.text:00001DA6                 mov     edx, [ebp+var_14]
.text:00001DA9                 movzx   eax, byte ptr [edx+1]
.text:00001DAD                 add     eax, [ebp+arg_C]
.text:00001DB0                 mov     ecx, [ebp+arg_C]
.text:00001DB3                 shr     eax, cl
.text:00001DB5                 mov     [ebp+var_1C], eax
.text:00001DB8                 mov     ecx, [ebp+var_14]
.text:00001DBB                 mov     dl, byte ptr [ebp+var_1C]
.text:00001DBE                 mov     [ecx+1], dl
.text:00001DC1                 movzx   eax, byte ptr [ebp+var_1C]
.text:00001DC5                 add     eax, [ebp+var_C]
.text:00001DC8                 mov     [ebp+var_C], eax
.text:00001DCB                 mov     ecx, [ebp+var_14]
.text:00001DCE                 movzx   edx, byte ptr [ecx]
.text:00001DD1                 xor     eax, eax
.text:00001DD3                 cmp     edx, 40h ; '@'
.text:00001DD6                 setnl   al
.text:00001DD9                 shl     eax, 3
.text:00001DDC                 or      eax, [ebp+var_10]
.text:00001DDF                 mov     [ebp+var_10], eax
.text:00001DE2                 mov     ecx, [ebp+var_4]
.text:00001DE5                 sub     ecx, 1
.text:00001DE8                 mov     [ebp+var_4], ecx
.text:00001DEB                 jnz     short loc_1D8E
.text:00001DED                 mov     edx, [ebp+var_8]
.text:00001DF0                 add     edx, [ebp+arg_C]
.text:00001DF3                 mov     ecx, [ebp+arg_C]
.text:00001DF6                 shr     edx, cl
.text:00001DF8                 add     edx, [ebp+var_C]
.text:00001DFB                 mov     eax, [ebp+arg_4]
.text:00001DFE                 mov     [eax+2], dx
.text:00001E02                 mov     ecx, [ebp+arg_4]
.text:00001E05                 mov     dl, byte ptr [ebp+var_10]
.text:00001E08                 mov     [ecx+1], dl
.text:00001E0B                 add     esp, 1Ch
.text:00001E0E                 cmp     ebp, esp
.text:00001E10                 call    __RTC_CheckEsp
.text:00001E15                 mov     esp, ebp
.text:00001E17                 pop     ebp
.text:00001E18                 retn    10h
.text:00001E18 _Refresh@16     endp
.text:00001E18
.text:00001E18 ; ---------------------------------------------------------------------------
.text:00001E1B                 align 10h
.text:00001E20
.text:00001E20 ; =============== S U B R O U T I N E =======================================
.text:00001E20
.text:00001E20 ; Attributes: bp-based frame
.text:00001E20
.text:00001E20 ; __stdcall CutOff(x, x, x)
.text:00001E20 _CutOff@12      proc near               ; CODE XREF: RestoreModel(x,x)+1BEp
.text:00001E20                                         ; CutOff(x,x,x)+73p ...
.text:00001E20
.text:00001E20 var_10          = dword ptr -10h
.text:00001E20 var_C           = dword ptr -0Ch
.text:00001E20 var_8           = dword ptr -8
.text:00001E20 var_4           = dword ptr -4
.text:00001E20 arg_0           = dword ptr  8
.text:00001E20 arg_4           = dword ptr  0Ch
.text:00001E20 arg_8           = dword ptr  10h
.text:00001E20
.text:00001E20                 push    ebp
.text:00001E21                 mov     ebp, esp
.text:00001E23                 sub     esp, 10h
.text:00001E26                 mov     eax, 0CCCCCCCCh
.text:00001E2B                 mov     [ebp+var_10], eax
.text:00001E2E                 mov     [ebp+var_C], eax
.text:00001E31                 mov     [ebp+var_8], eax
.text:00001E34                 mov     [ebp+var_4], eax
.text:00001E37                 mov     eax, [ebp+arg_4]
.text:00001E3A                 movzx   ecx, byte ptr [eax]
.text:00001E3D                 test    ecx, ecx
.text:00001E3F                 jnz     loc_1EE6
.text:00001E45                 mov     edx, [ebp+arg_4]
.text:00001E48                 add     edx, 2
.text:00001E4B                 mov     [ebp+var_C], edx
.text:00001E4E                 mov     eax, [ebp+var_C]
.text:00001E51                 movzx   ecx, word ptr [eax+2]
.text:00001E55                 mov     edx, [ebp+var_C]
.text:00001E58                 movzx   eax, word ptr [edx+4]
.text:00001E5C                 shl     eax, 10h
.text:00001E5F                 or      ecx, eax
.text:00001E61                 mov     edx, [ebp+arg_0]
.text:00001E64                 cmp     ecx, [edx+3Ch]
.text:00001E67                 jb      short loc_1ED2
.text:00001E69                 mov     eax, [ebp+arg_0]
.text:00001E6C                 mov     ecx, [ebp+arg_8]
.text:00001E6F                 cmp     ecx, [eax+18h]
.text:00001E72                 jnb     short loc_1EA4
.text:00001E74                 mov     edx, [ebp+arg_8]
.text:00001E77                 add     edx, 1
.text:00001E7A                 push    edx
.text:00001E7B                 mov     eax, [ebp+var_C]
.text:00001E7E                 movzx   ecx, word ptr [eax+2]
.text:00001E82                 mov     edx, [ebp+var_C]
.text:00001E85                 movzx   eax, word ptr [edx+4]
.text:00001E89                 shl     eax, 10h
.text:00001E8C                 or      ecx, eax
.text:00001E8E                 push    ecx
.text:00001E8F                 mov     ecx, [ebp+arg_0]
.text:00001E92                 push    ecx
.text:00001E93                 call    _CutOff@12      ; CutOff(x,x,x)
.text:00001E98                 push    eax
.text:00001E99                 mov     edx, [ebp+var_C]
.text:00001E9C                 push    edx
.text:00001E9D                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:00001EA2                 jmp     short loc_1EAF
.text:00001EA4 ; ---------------------------------------------------------------------------
.text:00001EA4
.text:00001EA4 loc_1EA4:                               ; CODE XREF: CutOff(x,x,x)+52j
.text:00001EA4                 push    0
.text:00001EA6                 mov     eax, [ebp+var_C]
.text:00001EA9                 push    eax
.text:00001EAA                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:00001EAF
.text:00001EAF loc_1EAF:                               ; CODE XREF: CutOff(x,x,x)+82j
.text:00001EAF                 mov     ecx, [ebp+var_C]
.text:00001EB2                 movzx   edx, word ptr [ecx+2]
.text:00001EB6                 mov     eax, [ebp+var_C]
.text:00001EB9                 movzx   ecx, word ptr [eax+4]
.text:00001EBD                 shl     ecx, 10h
.text:00001EC0                 or      edx, ecx
.text:00001EC2                 jnz     short loc_1ECA
.text:00001EC4                 cmp     [ebp+arg_8], 9
.text:00001EC8                 ja      short loc_1ED2
.text:00001ECA
.text:00001ECA loc_1ECA:                               ; CODE XREF: CutOff(x,x,x)+A2j
.text:00001ECA                 mov     eax, [ebp+arg_4]
.text:00001ECD                 jmp     loc_20B8
.text:00001ED2 ; ---------------------------------------------------------------------------
.text:00001ED2
.text:00001ED2 loc_1ED2:                               ; CODE XREF: CutOff(x,x,x)+47j
.text:00001ED2                                         ; CutOff(x,x,x)+A8j
.text:00001ED2                 mov     edx, [ebp+arg_4]
.text:00001ED5                 push    edx
.text:00001ED6                 mov     eax, [ebp+arg_0]
.text:00001ED9                 push    eax
.text:00001EDA                 call    _SpecialFreeUnit@8 ; SpecialFreeUnit(x,x)
.text:00001EDF                 xor     eax, eax
.text:00001EE1                 jmp     loc_20B8
.text:00001EE6 ; ---------------------------------------------------------------------------
.text:00001EE6
.text:00001EE6 loc_1EE6:                               ; CODE XREF: CutOff(x,x,x)+1Fj
.text:00001EE6                 mov     ecx, [ebp+arg_4]
.text:00001EE9                 movzx   edx, byte ptr [ecx]
.text:00001EEC                 add     edx, 2
.text:00001EEF                 shr     edx, 1
.text:00001EF1                 mov     [ebp+var_8], edx
.text:00001EF4                 mov     eax, [ebp+var_8]
.text:00001EF7                 push    eax
.text:00001EF8                 mov     ecx, [ebp+arg_4]
.text:00001EFB                 mov     edx, [ecx+4]
.text:00001EFE                 push    edx
.text:00001EFF                 mov     eax, [ebp+arg_0]
.text:00001F02                 push    eax
.text:00001F03                 call    _MoveUnitsUp@12 ; MoveUnitsUp(x,x,x)
.text:00001F08                 mov     ecx, [ebp+arg_4]
.text:00001F0B                 mov     [ecx+4], eax
.text:00001F0E                 mov     edx, [ebp+arg_4]
.text:00001F11                 movzx   eax, byte ptr [edx]
.text:00001F14                 mov     [ebp+var_4], eax
.text:00001F17                 mov     ecx, [ebp+var_4]
.text:00001F1A                 imul    ecx, 6
.text:00001F1D                 mov     edx, [ebp+arg_4]
.text:00001F20                 add     ecx, [edx+4]
.text:00001F23                 mov     [ebp+var_C], ecx
.text:00001F26                 jmp     short loc_1F31
.text:00001F28 ; ---------------------------------------------------------------------------
.text:00001F28
.text:00001F28 loc_1F28:                               ; CODE XREF: CutOff(x,x,x):loc_1FD3j
.text:00001F28                 mov     eax, [ebp+var_C]
.text:00001F2B                 sub     eax, 6
.text:00001F2E                 mov     [ebp+var_C], eax
.text:00001F31
.text:00001F31 loc_1F31:                               ; CODE XREF: CutOff(x,x,x)+106j
.text:00001F31                 mov     ecx, [ebp+arg_4]
.text:00001F34                 mov     edx, [ebp+var_C]
.text:00001F37                 cmp     edx, [ecx+4]
.text:00001F3A                 jb      loc_1FD8
.text:00001F40                 mov     eax, [ebp+var_C]
.text:00001F43                 movzx   ecx, word ptr [eax+2]
.text:00001F47                 mov     edx, [ebp+var_C]
.text:00001F4A                 movzx   eax, word ptr [edx+4]
.text:00001F4E                 shl     eax, 10h
.text:00001F51                 or      ecx, eax
.text:00001F53                 mov     edx, [ebp+arg_0]
.text:00001F56                 cmp     ecx, [edx+3Ch]
.text:00001F59                 jnb     short loc_1F8D
.text:00001F5B                 mov     eax, [ebp+var_4]
.text:00001F5E                 imul    eax, 6
.text:00001F61                 mov     ecx, [ebp+arg_4]
.text:00001F64                 add     eax, [ecx+4]
.text:00001F67                 mov     [ebp+var_10], eax
.text:00001F6A                 mov     edx, [ebp+var_4]
.text:00001F6D                 sub     edx, 1
.text:00001F70                 mov     [ebp+var_4], edx
.text:00001F73                 push    0
.text:00001F75                 mov     eax, [ebp+var_C]
.text:00001F78                 push    eax
.text:00001F79                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:00001F7E                 mov     ecx, [ebp+var_10]
.text:00001F81                 push    ecx
.text:00001F82                 mov     edx, [ebp+var_C]
.text:00001F85                 push    edx
.text:00001F86                 call    _SwapStates@8   ; SwapStates(x,x)
.text:00001F8B                 jmp     short loc_1FD3
.text:00001F8D ; ---------------------------------------------------------------------------
.text:00001F8D
.text:00001F8D loc_1F8D:                               ; CODE XREF: CutOff(x,x,x)+139j
.text:00001F8D                 mov     eax, [ebp+arg_0]
.text:00001F90                 mov     ecx, [ebp+arg_8]
.text:00001F93                 cmp     ecx, [eax+18h]
.text:00001F96                 jnb     short loc_1FC8
.text:00001F98                 mov     edx, [ebp+arg_8]
.text:00001F9B                 add     edx, 1
.text:00001F9E                 push    edx
.text:00001F9F                 mov     eax, [ebp+var_C]
.text:00001FA2                 movzx   ecx, word ptr [eax+2]
.text:00001FA6                 mov     edx, [ebp+var_C]
.text:00001FA9                 movzx   eax, word ptr [edx+4]
.text:00001FAD                 shl     eax, 10h
.text:00001FB0                 or      ecx, eax
.text:00001FB2                 push    ecx
.text:00001FB3                 mov     ecx, [ebp+arg_0]
.text:00001FB6                 push    ecx
.text:00001FB7                 call    _CutOff@12      ; CutOff(x,x,x)
.text:00001FBC                 push    eax
.text:00001FBD                 mov     edx, [ebp+var_C]
.text:00001FC0                 push    edx
.text:00001FC1                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:00001FC6                 jmp     short loc_1FD3
.text:00001FC8 ; ---------------------------------------------------------------------------
.text:00001FC8
.text:00001FC8 loc_1FC8:                               ; CODE XREF: CutOff(x,x,x)+176j
.text:00001FC8                 push    0
.text:00001FCA                 mov     eax, [ebp+var_C]
.text:00001FCD                 push    eax
.text:00001FCE                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:00001FD3
.text:00001FD3 loc_1FD3:                               ; CODE XREF: CutOff(x,x,x)+16Bj
.text:00001FD3                                         ; CutOff(x,x,x)+1A6j
.text:00001FD3                 jmp     loc_1F28
.text:00001FD8 ; ---------------------------------------------------------------------------
.text:00001FD8
.text:00001FD8 loc_1FD8:                               ; CODE XREF: CutOff(x,x,x)+11Aj
.text:00001FD8                 mov     ecx, [ebp+arg_4]
.text:00001FDB                 movzx   edx, byte ptr [ecx]
.text:00001FDE                 cmp     [ebp+var_4], edx
.text:00001FE1                 jz      loc_20B5
.text:00001FE7                 cmp     [ebp+arg_8], 0
.text:00001FEB                 jz      loc_20B5
.text:00001FF1                 mov     eax, [ebp+arg_4]
.text:00001FF4                 mov     cl, byte ptr [ebp+var_4]
.text:00001FF7                 mov     [eax], cl
.text:00001FF9                 mov     edx, [ebp+arg_4]
.text:00001FFC                 mov     eax, [edx+4]
.text:00001FFF                 mov     [ebp+var_C], eax
.text:00002002                 cmp     [ebp+var_4], 0
.text:00002006                 jge     short loc_202D
.text:00002008                 mov     ecx, [ebp+var_8]
.text:0000200B                 push    ecx
.text:0000200C                 mov     edx, [ebp+var_C]
.text:0000200F                 push    edx
.text:00002010                 mov     eax, [ebp+arg_0]
.text:00002013                 push    eax
.text:00002014                 call    _FreeUnits@12   ; FreeUnits(x,x,x)
.text:00002019                 mov     ecx, [ebp+arg_4]
.text:0000201C                 push    ecx
.text:0000201D                 mov     edx, [ebp+arg_0]
.text:00002020                 push    edx
.text:00002021                 call    _SpecialFreeUnit@8 ; SpecialFreeUnit(x,x)
.text:00002026                 xor     eax, eax
.text:00002028                 jmp     loc_20B8
.text:0000202D ; ---------------------------------------------------------------------------
.text:0000202D
.text:0000202D loc_202D:                               ; CODE XREF: CutOff(x,x,x)+1E6j
.text:0000202D                 cmp     [ebp+var_4], 0
.text:00002031                 jnz     short loc_208F
.text:00002033                 mov     eax, [ebp+arg_4]
.text:00002036                 movzx   ecx, byte ptr [eax+1]
.text:0000203A                 and     ecx, 10h
.text:0000203D                 mov     edx, [ebp+var_C]
.text:00002040                 movzx   eax, byte ptr [edx]
.text:00002043                 xor     edx, edx
.text:00002045                 cmp     eax, 40h ; '@'
.text:00002048                 setnl   dl
.text:0000204B                 lea     eax, [ecx+edx*8]
.text:0000204E                 mov     ecx, [ebp+arg_4]
.text:00002051                 mov     [ecx+1], al
.text:00002054                 mov     edx, [ebp+var_C]
.text:00002057                 mov     eax, [ebp+arg_4]
.text:0000205A                 add     eax, 2
.text:0000205D                 mov     ecx, [edx]
.text:0000205F                 mov     [eax], ecx
.text:00002061                 mov     dx, [edx+4]
.text:00002065                 mov     [eax+4], dx
.text:00002069                 mov     eax, [ebp+var_8]
.text:0000206C                 push    eax
.text:0000206D                 mov     ecx, [ebp+var_C]
.text:00002070                 push    ecx
.text:00002071                 mov     edx, [ebp+arg_0]
.text:00002074                 push    edx
.text:00002075                 call    _FreeUnits@12   ; FreeUnits(x,x,x)
.text:0000207A                 mov     eax, [ebp+arg_4]
.text:0000207D                 movzx   ecx, byte ptr [eax+3]
.text:00002081                 add     ecx, 0Bh
.text:00002084                 shr     ecx, 3
.text:00002087                 mov     edx, [ebp+arg_4]
.text:0000208A                 mov     [edx+3], cl
.text:0000208D                 jmp     short loc_20B5
.text:0000208F ; ---------------------------------------------------------------------------
.text:0000208F
.text:0000208F loc_208F:                               ; CODE XREF: CutOff(x,x,x)+211j
.text:0000208F                 mov     eax, [ebp+arg_4]
.text:00002092                 movzx   ecx, word ptr [eax+2]
.text:00002096                 mov     edx, [ebp+var_4]
.text:00002099                 shl     edx, 4
.text:0000209C                 xor     eax, eax
.text:0000209E                 cmp     ecx, edx
.text:000020A0                 setnle  al
.text:000020A3                 push    eax
.text:000020A4                 mov     ecx, [ebp+var_8]
.text:000020A7                 push    ecx
.text:000020A8                 mov     edx, [ebp+arg_4]
.text:000020AB                 push    edx
.text:000020AC                 mov     eax, [ebp+arg_0]
.text:000020AF                 push    eax
.text:000020B0                 call    _Refresh@16     ; Refresh(x,x,x,x)
.text:000020B5
.text:000020B5 loc_20B5:                               ; CODE XREF: CutOff(x,x,x)+1C1j
.text:000020B5                                         ; CutOff(x,x,x)+1CBj ...
.text:000020B5                 mov     eax, [ebp+arg_4]
.text:000020B8
.text:000020B8 loc_20B8:                               ; CODE XREF: CutOff(x,x,x)+ADj
.text:000020B8                                         ; CutOff(x,x,x)+C1j ...
.text:000020B8                 add     esp, 10h
.text:000020BB                 cmp     ebp, esp
.text:000020BD                 call    __RTC_CheckEsp
.text:000020C2                 mov     esp, ebp
.text:000020C4                 pop     ebp
.text:000020C5                 retn    0Ch
.text:000020C5 _CutOff@12      endp
.text:000020C5
.text:000020C5 ; ---------------------------------------------------------------------------
.text:000020C8                 align 10h
.text:000020D0
.text:000020D0 ; =============== S U B R O U T I N E =======================================
.text:000020D0
.text:000020D0 ; Attributes: bp-based frame
.text:000020D0
.text:000020D0 ; __stdcall FreeUnits(x, x, x)
.text:000020D0 _FreeUnits@12   proc near               ; CODE XREF: CutOff(x,x,x)+1F4p
.text:000020D0                                         ; CutOff(x,x,x)+255p
.text:000020D0
.text:000020D0 arg_0           = dword ptr  8
.text:000020D0 arg_4           = dword ptr  0Ch
.text:000020D0 arg_8           = dword ptr  10h
.text:000020D0
.text:000020D0                 push    ebp
.text:000020D1                 mov     ebp, esp
.text:000020D3                 mov     eax, [ebp+arg_0]
.text:000020D6                 add     eax, [ebp+arg_8]
.text:000020D9                 movzx   ecx, byte ptr [eax+7Dh]
.text:000020DD                 push    ecx
.text:000020DE                 mov     edx, [ebp+arg_4]
.text:000020E1                 push    edx
.text:000020E2                 mov     eax, [ebp+arg_0]
.text:000020E5                 push    eax
.text:000020E6                 call    _InsertNode@12  ; InsertNode(x,x,x)
.text:000020EB                 cmp     ebp, esp
.text:000020ED                 call    __RTC_CheckEsp
.text:000020F2                 pop     ebp
.text:000020F3                 retn    0Ch
.text:000020F3 _FreeUnits@12   endp
.text:000020F3
.text:000020F3 ; ---------------------------------------------------------------------------
.text:000020F6                 align 10h
.text:00002100
.text:00002100 ; =============== S U B R O U T I N E =======================================
.text:00002100
.text:00002100 ; Attributes: bp-based frame
.text:00002100
.text:00002100 ; __stdcall MoveUnitsUp(x, x, x)
.text:00002100 _MoveUnitsUp@12 proc near               ; CODE XREF: CutOff(x,x,x)+E3p
.text:00002100
.text:00002100 var_14          = dword ptr -14h
.text:00002100 var_10          = dword ptr -10h
.text:00002100 var_C           = dword ptr -0Ch
.text:00002100 var_8           = dword ptr -8
.text:00002100 var_4           = dword ptr -4
.text:00002100 arg_0           = dword ptr  8
.text:00002100 arg_4           = dword ptr  0Ch
.text:00002100 arg_8           = dword ptr  10h
.text:00002100
.text:00002100                 push    ebp
.text:00002101                 mov     ebp, esp
.text:00002103                 sub     esp, 14h
.text:00002106                 mov     eax, 0CCCCCCCCh
.text:0000210B                 mov     [ebp+var_14], eax
.text:0000210E                 mov     [ebp+var_10], eax
.text:00002111                 mov     [ebp+var_C], eax
.text:00002114                 mov     [ebp+var_8], eax
.text:00002117                 mov     [ebp+var_4], eax
.text:0000211A                 mov     eax, [ebp+arg_0]
.text:0000211D                 add     eax, [ebp+arg_8]
.text:00002120                 movzx   ecx, byte ptr [eax+7Dh]
.text:00002124                 mov     [ebp+var_4], ecx
.text:00002127                 mov     edx, [ebp+arg_0]
.text:0000212A                 mov     eax, [edx+3Ch]
.text:0000212D                 add     eax, 4000h
.text:00002132                 cmp     [ebp+arg_4], eax
.text:00002135                 ja      short loc_2149
.text:00002137                 mov     ecx, [ebp+var_4]
.text:0000213A                 mov     edx, [ebp+arg_0]
.text:0000213D                 mov     eax, [ebp+arg_4]
.text:00002140                 cmp     eax, [edx+ecx*4+100h]
.text:00002147                 jbe     short loc_2151
.text:00002149
.text:00002149 loc_2149:                               ; CODE XREF: MoveUnitsUp(x,x,x)+35j
.text:00002149                 mov     eax, [ebp+arg_4]
.text:0000214C                 jmp     loc_21EC
.text:00002151 ; ---------------------------------------------------------------------------
.text:00002151
.text:00002151 loc_2151:                               ; CODE XREF: MoveUnitsUp(x,x,x)+47j
.text:00002151                 mov     ecx, [ebp+var_4]
.text:00002154                 push    ecx
.text:00002155                 mov     edx, [ebp+arg_0]
.text:00002158                 push    edx
.text:00002159                 call    _RemoveNode@8   ; RemoveNode(x,x)
.text:0000215E                 mov     [ebp+var_8], eax
.text:00002161                 mov     eax, [ebp+var_8]
.text:00002164                 mov     [ebp+var_C], eax
.text:00002167                 mov     ecx, [ebp+arg_4]
.text:0000216A                 mov     [ebp+var_10], ecx
.text:0000216D                 mov     edx, [ebp+arg_8]
.text:00002170                 mov     [ebp+var_14], edx
.text:00002173
.text:00002173 loc_2173:                               ; CODE XREF: MoveUnitsUp(x,x,x)+B0j
.text:00002173                 mov     eax, [ebp+var_C]
.text:00002176                 mov     ecx, [ebp+var_10]
.text:00002179                 mov     edx, [ecx]
.text:0000217B                 mov     [eax], edx
.text:0000217D                 mov     eax, [ebp+var_C]
.text:00002180                 mov     ecx, [ebp+var_10]
.text:00002183                 mov     edx, [ecx+4]
.text:00002186                 mov     [eax+4], edx
.text:00002189                 mov     eax, [ebp+var_C]
.text:0000218C                 mov     ecx, [ebp+var_10]
.text:0000218F                 mov     edx, [ecx+8]
.text:00002192                 mov     [eax+8], edx
.text:00002195                 mov     eax, [ebp+var_10]
.text:00002198                 add     eax, 0Ch
.text:0000219B                 mov     [ebp+var_10], eax
.text:0000219E                 mov     ecx, [ebp+var_C]
.text:000021A1                 add     ecx, 0Ch
.text:000021A4                 mov     [ebp+var_C], ecx
.text:000021A7                 mov     edx, [ebp+var_14]
.text:000021AA                 sub     edx, 1
.text:000021AD                 mov     [ebp+var_14], edx
.text:000021B0                 jnz     short loc_2173
.text:000021B2                 mov     eax, [ebp+arg_0]
.text:000021B5                 mov     ecx, [ebp+arg_4]
.text:000021B8                 cmp     ecx, [eax+3Ch]
.text:000021BB                 jz      short loc_21D0
.text:000021BD                 mov     edx, [ebp+var_4]
.text:000021C0                 push    edx
.text:000021C1                 mov     eax, [ebp+arg_4]
.text:000021C4                 push    eax
.text:000021C5                 mov     ecx, [ebp+arg_0]
.text:000021C8                 push    ecx
.text:000021C9                 call    _InsertNode@12  ; InsertNode(x,x,x)
.text:000021CE                 jmp     short loc_21E9
.text:000021D0 ; ---------------------------------------------------------------------------
.text:000021D0
.text:000021D0 loc_21D0:                               ; CODE XREF: MoveUnitsUp(x,x,x)+BBj
.text:000021D0                 mov     edx, [ebp+arg_0]
.text:000021D3                 add     edx, [ebp+var_4]
.text:000021D6                 movzx   eax, byte ptr [edx+58h]
.text:000021DA                 imul    eax, 0Ch
.text:000021DD                 mov     ecx, [ebp+arg_0]
.text:000021E0                 add     eax, [ecx+3Ch]
.text:000021E3                 mov     edx, [ebp+arg_0]
.text:000021E6                 mov     [edx+3Ch], eax
.text:000021E9
.text:000021E9 loc_21E9:                               ; CODE XREF: MoveUnitsUp(x,x,x)+CEj
.text:000021E9                 mov     eax, [ebp+var_8]
.text:000021EC
.text:000021EC loc_21EC:                               ; CODE XREF: MoveUnitsUp(x,x,x)+4Cj
.text:000021EC                 add     esp, 14h
.text:000021EF                 cmp     ebp, esp
.text:000021F1                 call    __RTC_CheckEsp
.text:000021F6                 mov     esp, ebp
.text:000021F8                 pop     ebp
.text:000021F9                 retn    0Ch
.text:000021F9 _MoveUnitsUp@12 endp
.text:000021F9
.text:000021F9 ; ---------------------------------------------------------------------------
.text:000021FC                 align 10h
.text:00002200
.text:00002200 ; =============== S U B R O U T I N E =======================================
.text:00002200
.text:00002200 ; Attributes: bp-based frame
.text:00002200
.text:00002200 ; __stdcall GetUsedMemory(x)
.text:00002200 _GetUsedMemory@4 proc near              ; CODE XREF: RestoreModel(x,x)+178p
.text:00002200                                         ; RestoreModel(x,x)+1D0p
.text:00002200
.text:00002200 var_8           = dword ptr -8
.text:00002200 var_4           = dword ptr -4
.text:00002200 arg_0           = dword ptr  8
.text:00002200
.text:00002200                 push    ebp
.text:00002201                 mov     ebp, esp
.text:00002203                 sub     esp, 8
.text:00002206                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000220D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002214                 mov     [ebp+var_4], 0
.text:0000221B                 mov     [ebp+var_8], 0
.text:00002222                 jmp     short loc_222D
.text:00002224 ; ---------------------------------------------------------------------------
.text:00002224
.text:00002224 loc_2224:                               ; CODE XREF: GetUsedMemory(x)+51j
.text:00002224                 mov     eax, [ebp+var_8]
.text:00002227                 add     eax, 1
.text:0000222A                 mov     [ebp+var_8], eax
.text:0000222D
.text:0000222D loc_222D:                               ; CODE XREF: GetUsedMemory(x)+22j
.text:0000222D                 cmp     [ebp+var_8], 26h ; '&'
.text:00002231                 jnb     short loc_2253
.text:00002233                 mov     ecx, [ebp+arg_0]
.text:00002236                 add     ecx, [ebp+var_8]
.text:00002239                 movzx   edx, byte ptr [ecx+58h]
.text:0000223D                 mov     eax, [ebp+var_8]
.text:00002240                 mov     ecx, [ebp+arg_0]
.text:00002243                 imul    edx, [ecx+eax*4+198h]
.text:0000224B                 add     edx, [ebp+var_4]
.text:0000224E                 mov     [ebp+var_4], edx
.text:00002251                 jmp     short loc_2224
.text:00002253 ; ---------------------------------------------------------------------------
.text:00002253
.text:00002253 loc_2253:                               ; CODE XREF: GetUsedMemory(x)+31j
.text:00002253                 mov     edx, [ebp+arg_0]
.text:00002256                 mov     eax, [ebp+arg_0]
.text:00002259                 mov     ecx, [edx+34h]
.text:0000225C                 sub     ecx, [eax+30h]
.text:0000225F                 mov     edx, [ebp+arg_0]
.text:00002262                 mov     eax, [edx+24h]
.text:00002265                 sub     eax, ecx
.text:00002267                 mov     ecx, [ebp+arg_0]
.text:0000226A                 mov     edx, [ebp+arg_0]
.text:0000226D                 mov     ecx, [ecx+3Ch]
.text:00002270                 sub     ecx, [edx+38h]
.text:00002273                 sub     eax, ecx
.text:00002275                 mov     edx, [ebp+var_4]
.text:00002278                 imul    edx, 0Ch
.text:0000227B                 sub     eax, edx
.text:0000227D                 mov     esp, ebp
.text:0000227F                 pop     ebp
.text:00002280                 retn    4
.text:00002280 _GetUsedMemory@4 endp
.text:00002280
.text:00002280 ; ---------------------------------------------------------------------------
.text:00002283                 align 10h
.text:00002290
.text:00002290 ; =============== S U B R O U T I N E =======================================
.text:00002290
.text:00002290 ; Attributes: bp-based frame
.text:00002290
.text:00002290 ; __stdcall CreateSuccessors(x, x, x, x)
.text:00002290 _CreateSuccessors@16 proc near          ; CODE XREF: UpdateModel(x)+168p
.text:00002290                                         ; UpdateModel(x)+250p ...
.text:00002290
.text:00002290 var_88          = dword ptr -88h
.text:00002290 var_84          = dword ptr -84h
.text:00002290 var_80          = dword ptr -80h
.text:00002290 var_7C          = dword ptr -7Ch
.text:00002290 var_78          = dword ptr -78h
.text:00002290 var_74          = dword ptr -74h
.text:00002290 var_70          = dword ptr -70h
.text:00002290 var_6C          = dword ptr -6Ch
.text:00002290 var_68          = dword ptr -68h
.text:00002290 var_60          = dword ptr -60h
.text:00002290 var_18          = dword ptr -18h
.text:00002290 var_11          = byte ptr -11h
.text:00002290 var_C           = dword ptr -0Ch
.text:00002290 var_8           = word ptr -8
.text:00002290 arg_0           = dword ptr  8
.text:00002290 arg_4           = dword ptr  0Ch
.text:00002290 arg_8           = dword ptr  10h
.text:00002290 arg_C           = dword ptr  14h
.text:00002290
.text:00002290                 push    ebp
.text:00002291                 mov     ebp, esp
.text:00002293                 sub     esp, 88h
.text:00002299                 push    ebx
.text:0000229A                 push    edi
.text:0000229B                 lea     edi, [ebp+var_88]
.text:000022A1                 mov     ecx, 22h ; '"'
.text:000022A6                 mov     eax, 0CCCCCCCCh
.text:000022AB                 rep stosd
.text:000022AD                 mov     eax, [ebp+arg_0]
.text:000022B0                 mov     ecx, [eax+8]
.text:000022B3                 movzx   edx, word ptr [ecx+2]
.text:000022B7                 mov     eax, [ebp+arg_0]
.text:000022BA                 mov     ecx, [eax+8]
.text:000022BD                 movzx   eax, word ptr [ecx+4]
.text:000022C1                 shl     eax, 10h
.text:000022C4                 or      edx, eax
.text:000022C6                 mov     [ebp+var_18], edx
.text:000022C9                 mov     [ebp+var_68], 0
.text:000022D0                 cmp     [ebp+arg_4], 0
.text:000022D4                 jnz     short loc_22EC
.text:000022D6                 mov     ecx, [ebp+var_68]
.text:000022D9                 mov     edx, [ebp+arg_0]
.text:000022DC                 mov     eax, [edx+8]
.text:000022DF                 mov     [ebp+ecx*4+var_60], eax
.text:000022E3                 mov     ecx, [ebp+var_68]
.text:000022E6                 add     ecx, 1
.text:000022E9                 mov     [ebp+var_68], ecx
.text:000022EC
.text:000022EC loc_22EC:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+44j
.text:000022EC                                         ; CreateSuccessors(x,x,x,x)+16Cj
.text:000022EC                 mov     edx, [ebp+arg_C]
.text:000022EF                 cmp     dword ptr [edx+8], 0
.text:000022F3                 jz      loc_2401
.text:000022F9                 mov     eax, [ebp+arg_C]
.text:000022FC                 mov     ecx, [eax+8]
.text:000022FF                 mov     [ebp+arg_C], ecx
.text:00002302                 cmp     [ebp+arg_8], 0
.text:00002306                 jz      short loc_231A
.text:00002308                 mov     edx, [ebp+arg_8]
.text:0000230B                 mov     [ebp+var_70], edx
.text:0000230E                 mov     [ebp+arg_8], 0
.text:00002315                 jmp     loc_23B5
.text:0000231A ; ---------------------------------------------------------------------------
.text:0000231A
.text:0000231A loc_231A:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+76j
.text:0000231A                 mov     eax, [ebp+arg_C]
.text:0000231D                 movzx   ecx, byte ptr [eax]
.text:00002320                 test    ecx, ecx
.text:00002322                 jz      short loc_237C
.text:00002324                 mov     edx, [ebp+arg_C]
.text:00002327                 mov     eax, [edx+4]
.text:0000232A                 mov     [ebp+var_70], eax
.text:0000232D                 jmp     short loc_2338
.text:0000232F ; ---------------------------------------------------------------------------
.text:0000232F
.text:0000232F loc_232F:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+BBj
.text:0000232F                 mov     ecx, [ebp+var_70]
.text:00002332                 add     ecx, 6
.text:00002335                 mov     [ebp+var_70], ecx
.text:00002338
.text:00002338 loc_2338:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+9Dj
.text:00002338                 mov     edx, [ebp+var_70]
.text:0000233B                 movzx   eax, byte ptr [edx]
.text:0000233E                 mov     ecx, [ebp+arg_0]
.text:00002341                 mov     edx, [ecx+8]
.text:00002344                 movzx   ecx, byte ptr [edx]
.text:00002347                 cmp     eax, ecx
.text:00002349                 jz      short loc_234D
.text:0000234B                 jmp     short loc_232F
.text:0000234D ; ---------------------------------------------------------------------------
.text:0000234D
.text:0000234D loc_234D:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+B9j
.text:0000234D                 mov     edx, [ebp+var_70]
.text:00002350                 movzx   eax, byte ptr [edx+1]
.text:00002354                 cmp     eax, 73h ; 's'
.text:00002357                 jge     short loc_237A
.text:00002359                 mov     ecx, [ebp+var_70]
.text:0000235C                 mov     dl, [ecx+1]
.text:0000235F                 add     dl, 1
.text:00002362                 mov     eax, [ebp+var_70]
.text:00002365                 mov     [eax+1], dl
.text:00002368                 mov     ecx, [ebp+arg_C]
.text:0000236B                 mov     dx, [ecx+2]
.text:0000236F                 add     dx, 1
.text:00002373                 mov     eax, [ebp+arg_C]
.text:00002376                 mov     [eax+2], dx
.text:0000237A
.text:0000237A loc_237A:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+C7j
.text:0000237A                 jmp     short loc_23B5
.text:0000237C ; ---------------------------------------------------------------------------
.text:0000237C
.text:0000237C loc_237C:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+92j
.text:0000237C                 mov     ecx, [ebp+arg_C]
.text:0000237F                 add     ecx, 2
.text:00002382                 mov     [ebp+var_70], ecx
.text:00002385                 mov     edx, [ebp+var_70]
.text:00002388                 movzx   eax, byte ptr [edx+1]
.text:0000238C                 mov     ecx, [ebp+arg_C]
.text:0000238F                 mov     edx, [ecx+8]
.text:00002392                 movzx   ecx, byte ptr [edx]
.text:00002395                 neg     ecx
.text:00002397                 sbb     ecx, ecx
.text:00002399                 add     ecx, 1
.text:0000239C                 mov     edx, [ebp+var_70]
.text:0000239F                 movzx   edx, byte ptr [edx+1]
.text:000023A3                 xor     ebx, ebx
.text:000023A5                 cmp     edx, 18h
.text:000023A8                 setl    bl
.text:000023AB                 and     ecx, ebx
.text:000023AD                 add     eax, ecx
.text:000023AF                 mov     ecx, [ebp+var_70]
.text:000023B2                 mov     [ecx+1], al
.text:000023B5
.text:000023B5 loc_23B5:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+85j
.text:000023B5                                         ; CreateSuccessors(x,x,x,x):loc_237Aj
.text:000023B5                 mov     edx, [ebp+var_70]
.text:000023B8                 movzx   eax, word ptr [edx+2]
.text:000023BC                 mov     ecx, [ebp+var_70]
.text:000023BF                 movzx   edx, word ptr [ecx+4]
.text:000023C3                 shl     edx, 10h
.text:000023C6                 or      eax, edx
.text:000023C8                 mov     [ebp+var_6C], eax
.text:000023CB                 mov     eax, [ebp+var_6C]
.text:000023CE                 cmp     eax, [ebp+var_18]
.text:000023D1                 jz      short loc_23E9
.text:000023D3                 mov     ecx, [ebp+var_6C]
.text:000023D6                 mov     [ebp+arg_C], ecx
.text:000023D9                 cmp     [ebp+var_68], 0
.text:000023DD                 jnz     short loc_23E7
.text:000023DF                 mov     eax, [ebp+arg_C]
.text:000023E2                 jmp     loc_259D
.text:000023E7 ; ---------------------------------------------------------------------------
.text:000023E7
.text:000023E7 loc_23E7:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+14Dj
.text:000023E7                 jmp     short loc_2401
.text:000023E9 ; ---------------------------------------------------------------------------
.text:000023E9
.text:000023E9 loc_23E9:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+141j
.text:000023E9                 mov     edx, [ebp+var_68]
.text:000023EC                 mov     eax, [ebp+var_70]
.text:000023EF                 mov     [ebp+edx*4+var_60], eax
.text:000023F3                 mov     ecx, [ebp+var_68]
.text:000023F6                 add     ecx, 1
.text:000023F9                 mov     [ebp+var_68], ecx
.text:000023FC                 jmp     loc_22EC
.text:00002401 ; ---------------------------------------------------------------------------
.text:00002401
.text:00002401 loc_2401:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+63j
.text:00002401                                         ; CreateSuccessors(x,x,x,x):loc_23E7j
.text:00002401                 mov     edx, [ebp+var_18]
.text:00002404                 mov     al, [edx]
.text:00002406                 mov     byte ptr [ebp+var_C], al
.text:00002409                 mov     ecx, [ebp+var_18]
.text:0000240C                 add     ecx, 1
.text:0000240F                 push    ecx
.text:00002410                 lea     edx, [ebp+var_C]
.text:00002413                 push    edx
.text:00002414                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:00002419                 mov     eax, [ebp+arg_0]
.text:0000241C                 mov     ecx, [eax+8]
.text:0000241F                 movzx   edx, byte ptr [ecx]
.text:00002422                 xor     eax, eax
.text:00002424                 cmp     edx, 40h ; '@'
.text:00002427                 setnl   al
.text:0000242A                 shl     eax, 4
.text:0000242D                 movzx   ecx, byte ptr [ebp+var_C]
.text:00002431                 xor     edx, edx
.text:00002433                 cmp     ecx, 40h ; '@'
.text:00002436                 setnl   dl
.text:00002439                 lea     eax, [eax+edx*8]
.text:0000243C                 mov     [ebp+var_11], al
.text:0000243F                 mov     ecx, [ebp+arg_C]
.text:00002442                 movzx   edx, byte ptr [ecx]
.text:00002445                 test    edx, edx
.text:00002447                 jnz     short loc_2457
.text:00002449                 mov     eax, [ebp+arg_C]
.text:0000244C                 mov     cl, [eax+3]
.text:0000244F                 mov     byte ptr [ebp+var_C+1], cl
.text:00002452                 jmp     loc_24DD
.text:00002457 ; ---------------------------------------------------------------------------
.text:00002457
.text:00002457 loc_2457:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+1B7j
.text:00002457                 mov     edx, [ebp+arg_C]
.text:0000245A                 mov     eax, [edx+4]
.text:0000245D                 mov     [ebp+var_7C], eax
.text:00002460                 jmp     short loc_246B
.text:00002462 ; ---------------------------------------------------------------------------
.text:00002462
.text:00002462 loc_2462:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+1E9j
.text:00002462                 mov     ecx, [ebp+var_7C]
.text:00002465                 add     ecx, 6
.text:00002468                 mov     [ebp+var_7C], ecx
.text:0000246B
.text:0000246B loc_246B:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+1D0j
.text:0000246B                 mov     edx, [ebp+var_7C]
.text:0000246E                 movzx   eax, byte ptr [edx]
.text:00002471                 movzx   ecx, byte ptr [ebp+var_C]
.text:00002475                 cmp     eax, ecx
.text:00002477                 jz      short loc_247B
.text:00002479                 jmp     short loc_2462
.text:0000247B ; ---------------------------------------------------------------------------
.text:0000247B
.text:0000247B loc_247B:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+1E7j
.text:0000247B                 mov     edx, [ebp+var_7C]
.text:0000247E                 movzx   eax, byte ptr [edx+1]
.text:00002482                 sub     eax, 1
.text:00002485                 mov     [ebp+var_74], eax
.text:00002488                 mov     ecx, [ebp+arg_C]
.text:0000248B                 movzx   edx, word ptr [ecx+2]
.text:0000248F                 mov     eax, [ebp+arg_C]
.text:00002492                 movzx   ecx, byte ptr [eax]
.text:00002495                 sub     edx, ecx
.text:00002497                 sub     edx, [ebp+var_74]
.text:0000249A                 mov     [ebp+var_78], edx
.text:0000249D                 mov     edx, [ebp+var_74]
.text:000024A0                 shl     edx, 1
.text:000024A2                 cmp     edx, [ebp+var_78]
.text:000024A5                 ja      short loc_24BC
.text:000024A7                 mov     eax, [ebp+var_74]
.text:000024AA                 imul    eax, 5
.text:000024AD                 cmp     [ebp+var_78], eax
.text:000024B0                 sbb     ecx, ecx
.text:000024B2                 neg     ecx
.text:000024B4                 mov     [ebp+var_84], ecx
.text:000024BA                 jmp     short loc_24D1
.text:000024BC ; ---------------------------------------------------------------------------
.text:000024BC
.text:000024BC loc_24BC:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+215j
.text:000024BC                 mov     edx, [ebp+var_78]
.text:000024BF                 mov     eax, [ebp+var_74]
.text:000024C2                 lea     eax, [eax+edx*2-3]
.text:000024C6                 xor     edx, edx
.text:000024C8                 div     [ebp+var_78]
.text:000024CB                 mov     [ebp+var_84], eax
.text:000024D1
.text:000024D1 loc_24D1:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+22Aj
.text:000024D1                 mov     ecx, [ebp+var_84]
.text:000024D7                 add     ecx, 1
.text:000024DA                 mov     byte ptr [ebp+var_C+1], cl
.text:000024DD
.text:000024DD loc_24DD:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+1C2j
.text:000024DD                                         ; CreateSuccessors(x,x,x,x)+304j
.text:000024DD                 mov     edx, [ebp+arg_0]
.text:000024E0                 mov     eax, [ebp+arg_0]
.text:000024E3                 mov     ecx, [edx+34h]
.text:000024E6                 cmp     ecx, [eax+30h]
.text:000024E9                 jz      short loc_2511
.text:000024EB                 mov     edx, [ebp+arg_0]
.text:000024EE                 mov     eax, [edx+34h]
.text:000024F1                 sub     eax, 0Ch
.text:000024F4                 mov     [ebp+var_88], eax
.text:000024FA                 mov     ecx, [ebp+arg_0]
.text:000024FD                 mov     edx, [ebp+var_88]
.text:00002503                 mov     [ecx+34h], edx
.text:00002506                 mov     eax, [ebp+var_88]
.text:0000250C                 mov     [ebp+var_80], eax
.text:0000250F                 jmp     short loc_2545
.text:00002511 ; ---------------------------------------------------------------------------
.text:00002511
.text:00002511 loc_2511:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+259j
.text:00002511                 mov     ecx, [ebp+arg_0]
.text:00002514                 cmp     dword ptr [ecx+100h], 0
.text:0000251B                 jz      short loc_252D
.text:0000251D                 push    0
.text:0000251F                 mov     edx, [ebp+arg_0]
.text:00002522                 push    edx
.text:00002523                 call    _RemoveNode@8   ; RemoveNode(x,x)
.text:00002528                 mov     [ebp+var_80], eax
.text:0000252B                 jmp     short loc_2545
.text:0000252D ; ---------------------------------------------------------------------------
.text:0000252D
.text:0000252D loc_252D:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+28Bj
.text:0000252D                 push    0
.text:0000252F                 mov     eax, [ebp+arg_0]
.text:00002532                 push    eax
.text:00002533                 call    _AllocUnitsRare@8 ; AllocUnitsRare(x,x)
.text:00002538                 mov     [ebp+var_80], eax
.text:0000253B                 cmp     [ebp+var_80], 0
.text:0000253F                 jnz     short loc_2545
.text:00002541                 xor     eax, eax
.text:00002543                 jmp     short loc_259D
.text:00002545 ; ---------------------------------------------------------------------------
.text:00002545
.text:00002545 loc_2545:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+27Fj
.text:00002545                                         ; CreateSuccessors(x,x,x,x)+29Bj ...
.text:00002545                 mov     ecx, [ebp+var_80]
.text:00002548                 mov     byte ptr [ecx], 0
.text:0000254B                 mov     edx, [ebp+var_80]
.text:0000254E                 mov     al, [ebp+var_11]
.text:00002551                 mov     [edx+1], al
.text:00002554                 mov     ecx, [ebp+var_80]
.text:00002557                 add     ecx, 2
.text:0000255A                 mov     edx, [ebp+var_C]
.text:0000255D                 mov     [ecx], edx
.text:0000255F                 mov     ax, [ebp+var_8]
.text:00002563                 mov     [ecx+4], ax
.text:00002567                 mov     ecx, [ebp+var_80]
.text:0000256A                 mov     edx, [ebp+arg_C]
.text:0000256D                 mov     [ecx+8], edx
.text:00002570                 mov     eax, [ebp+var_68]
.text:00002573                 sub     eax, 1
.text:00002576                 mov     [ebp+var_68], eax
.text:00002579                 mov     ecx, [ebp+var_80]
.text:0000257C                 push    ecx
.text:0000257D                 mov     edx, [ebp+var_68]
.text:00002580                 mov     eax, [ebp+edx*4+var_60]
.text:00002584                 push    eax
.text:00002585                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:0000258A                 mov     ecx, [ebp+var_80]
.text:0000258D                 mov     [ebp+arg_C], ecx
.text:00002590                 cmp     [ebp+var_68], 0
.text:00002594                 jnz     loc_24DD
.text:0000259A                 mov     eax, [ebp+arg_C]
.text:0000259D
.text:0000259D loc_259D:                               ; CODE XREF: CreateSuccessors(x,x,x,x)+152j
.text:0000259D                                         ; CreateSuccessors(x,x,x,x)+2B3j
.text:0000259D                 push    edx
.text:0000259E                 mov     ecx, ebp
.text:000025A0                 push    eax
.text:000025A1                 lea     edx, $LN34
.text:000025A7                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000025AC                 pop     eax
.text:000025AD                 pop     edx
.text:000025AE                 pop     edi
.text:000025AF                 pop     ebx
.text:000025B0                 add     esp, 88h
.text:000025B6                 cmp     ebp, esp
.text:000025B8                 call    __RTC_CheckEsp
.text:000025BD                 mov     esp, ebp
.text:000025BF                 pop     ebp
.text:000025C0                 retn    10h
.text:000025C0 _CreateSuccessors@16 endp
.text:000025C0
.text:000025C0 ; ---------------------------------------------------------------------------
.text:000025C3                 align 4
.text:000025C4 $LN34           dd 2                    ; DATA XREF: CreateSuccessors(x,x,x,x)+311o
.text:000025C8                 dd offset $LN33
.text:000025CC $LN33           dd 0FFFFFFF4h, 6        ; DATA XREF: .text:000025C8o
.text:000025D4                 dd offset $LN31         ; "upState"
.text:000025D8                 dd 0FFFFFFA0h, 44h
.text:000025E0                 dd offset $LN32
.text:000025E4 $LN32           db 70h, 73h, 0          ; DATA XREF: .text:000025E0o
.text:000025E7 $LN31           db 'upState',0          ; DATA XREF: .text:000025D4o
.text:000025EF                 align 10h
.text:000025F0
.text:000025F0 ; =============== S U B R O U T I N E =======================================
.text:000025F0
.text:000025F0 ; Attributes: bp-based frame
.text:000025F0
.text:000025F0 ; __stdcall ReduceOrder(x, x, x)
.text:000025F0 _ReduceOrder@12 proc near               ; CODE XREF: UpdateModel(x)+20Dp
.text:000025F0
.text:000025F0 var_14          = dword ptr -14h
.text:000025F0 var_10          = dword ptr -10h
.text:000025F0 var_C           = dword ptr -0Ch
.text:000025F0 var_8           = dword ptr -8
.text:000025F0 var_4           = dword ptr -4
.text:000025F0 arg_0           = dword ptr  8
.text:000025F0 arg_4           = dword ptr  0Ch
.text:000025F0 arg_8           = dword ptr  10h
.text:000025F0
.text:000025F0                 push    ebp
.text:000025F1                 mov     ebp, esp
.text:000025F3                 sub     esp, 14h
.text:000025F6                 mov     eax, 0CCCCCCCCh
.text:000025FB                 mov     [ebp+var_14], eax
.text:000025FE                 mov     [ebp+var_10], eax
.text:00002601                 mov     [ebp+var_C], eax
.text:00002604                 mov     [ebp+var_8], eax
.text:00002607                 mov     [ebp+var_4], eax
.text:0000260A                 mov     [ebp+var_4], 0
.text:00002611                 mov     eax, [ebp+arg_8]
.text:00002614                 mov     [ebp+var_8], eax
.text:00002617                 mov     ecx, [ebp+arg_0]
.text:0000261A                 mov     edx, [ecx+38h]
.text:0000261D                 mov     [ebp+var_C], edx
.text:00002620                 mov     eax, [ebp+var_C]
.text:00002623                 push    eax
.text:00002624                 mov     ecx, [ebp+arg_0]
.text:00002627                 mov     edx, [ecx+8]
.text:0000262A                 push    edx
.text:0000262B                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:00002630                 mov     eax, [ebp+arg_0]
.text:00002633                 mov     ecx, [eax+0Ch]
.text:00002636                 add     ecx, 1
.text:00002639                 mov     edx, [ebp+arg_0]
.text:0000263C                 mov     [edx+0Ch], ecx
.text:0000263F
.text:0000263F loc_263F:                               ; CODE XREF: ReduceOrder(x,x,x)+155j
.text:0000263F                 cmp     [ebp+arg_4], 0
.text:00002643                 jz      short loc_2660
.text:00002645                 mov     eax, [ebp+arg_8]
.text:00002648                 mov     ecx, [eax+8]
.text:0000264B                 mov     [ebp+arg_8], ecx
.text:0000264E                 mov     edx, [ebp+arg_4]
.text:00002651                 mov     [ebp+var_4], edx
.text:00002654                 mov     [ebp+arg_4], 0
.text:0000265B                 jmp     loc_2712
.text:00002660 ; ---------------------------------------------------------------------------
.text:00002660
.text:00002660 loc_2660:                               ; CODE XREF: ReduceOrder(x,x,x)+53j
.text:00002660                 mov     eax, [ebp+arg_8]
.text:00002663                 cmp     dword ptr [eax+8], 0
.text:00002667                 jnz     short loc_2671
.text:00002669                 mov     eax, [ebp+arg_8]
.text:0000266C                 jmp     loc_2820
.text:00002671 ; ---------------------------------------------------------------------------
.text:00002671
.text:00002671 loc_2671:                               ; CODE XREF: ReduceOrder(x,x,x)+77j
.text:00002671                 mov     ecx, [ebp+arg_8]
.text:00002674                 mov     edx, [ecx+8]
.text:00002677                 mov     [ebp+arg_8], edx
.text:0000267A                 mov     eax, [ebp+arg_8]
.text:0000267D                 movzx   ecx, byte ptr [eax]
.text:00002680                 test    ecx, ecx
.text:00002682                 jz      short loc_26EB
.text:00002684                 mov     edx, [ebp+arg_8]
.text:00002687                 mov     eax, [edx+4]
.text:0000268A                 mov     [ebp+var_4], eax
.text:0000268D                 mov     ecx, [ebp+var_4]
.text:00002690                 movzx   edx, byte ptr [ecx]
.text:00002693                 mov     eax, [ebp+arg_0]
.text:00002696                 mov     ecx, [eax+8]
.text:00002699                 movzx   eax, byte ptr [ecx]
.text:0000269C                 cmp     edx, eax
.text:0000269E                 jz      short loc_26BC
.text:000026A0
.text:000026A0 loc_26A0:                               ; CODE XREF: ReduceOrder(x,x,x)+CAj
.text:000026A0                 mov     ecx, [ebp+var_4]
.text:000026A3                 add     ecx, 6
.text:000026A6                 mov     [ebp+var_4], ecx
.text:000026A9                 mov     edx, [ebp+var_4]
.text:000026AC                 movzx   eax, byte ptr [edx]
.text:000026AF                 mov     ecx, [ebp+arg_0]
.text:000026B2                 mov     edx, [ecx+8]
.text:000026B5                 movzx   ecx, byte ptr [edx]
.text:000026B8                 cmp     eax, ecx
.text:000026BA                 jnz     short loc_26A0
.text:000026BC
.text:000026BC loc_26BC:                               ; CODE XREF: ReduceOrder(x,x,x)+AEj
.text:000026BC                 mov     edx, [ebp+var_4]
.text:000026BF                 movzx   eax, byte ptr [edx+1]
.text:000026C3                 cmp     eax, 73h ; 's'
.text:000026C6                 jge     short loc_26E9
.text:000026C8                 mov     ecx, [ebp+var_4]
.text:000026CB                 movzx   edx, byte ptr [ecx+1]
.text:000026CF                 add     edx, 2
.text:000026D2                 mov     eax, [ebp+var_4]
.text:000026D5                 mov     [eax+1], dl
.text:000026D8                 mov     ecx, [ebp+arg_8]
.text:000026DB                 movzx   edx, word ptr [ecx+2]
.text:000026DF                 add     edx, 2
.text:000026E2                 mov     eax, [ebp+arg_8]
.text:000026E5                 mov     [eax+2], dx
.text:000026E9
.text:000026E9 loc_26E9:                               ; CODE XREF: ReduceOrder(x,x,x)+D6j
.text:000026E9                 jmp     short loc_2712
.text:000026EB ; ---------------------------------------------------------------------------
.text:000026EB
.text:000026EB loc_26EB:                               ; CODE XREF: ReduceOrder(x,x,x)+92j
.text:000026EB                 mov     ecx, [ebp+arg_8]
.text:000026EE                 add     ecx, 2
.text:000026F1                 mov     [ebp+var_4], ecx
.text:000026F4                 mov     edx, [ebp+var_4]
.text:000026F7                 movzx   eax, byte ptr [edx+1]
.text:000026FB                 mov     ecx, [ebp+var_4]
.text:000026FE                 movzx   edx, byte ptr [ecx+1]
.text:00002702                 xor     ecx, ecx
.text:00002704                 cmp     edx, 20h ; ' '
.text:00002707                 setl    cl
.text:0000270A                 add     eax, ecx
.text:0000270C                 mov     edx, [ebp+var_4]
.text:0000270F                 mov     [edx+1], al
.text:00002712
.text:00002712 loc_2712:                               ; CODE XREF: ReduceOrder(x,x,x)+6Bj
.text:00002712                                         ; ReduceOrder(x,x,x):loc_26E9j
.text:00002712                 mov     eax, [ebp+var_4]
.text:00002715                 movzx   ecx, word ptr [eax+2]
.text:00002719                 mov     edx, [ebp+var_4]
.text:0000271C                 movzx   eax, word ptr [edx+4]
.text:00002720                 shl     eax, 10h
.text:00002723                 or      ecx, eax
.text:00002725                 jz      short loc_2729
.text:00002727                 jmp     short loc_274A
.text:00002729 ; ---------------------------------------------------------------------------
.text:00002729
.text:00002729 loc_2729:                               ; CODE XREF: ReduceOrder(x,x,x)+135j
.text:00002729                 mov     ecx, [ebp+var_C]
.text:0000272C                 push    ecx
.text:0000272D                 mov     edx, [ebp+var_4]
.text:00002730                 push    edx
.text:00002731                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:00002736                 mov     eax, [ebp+arg_0]
.text:00002739                 mov     ecx, [eax+0Ch]
.text:0000273C                 add     ecx, 1
.text:0000273F                 mov     edx, [ebp+arg_0]
.text:00002742                 mov     [edx+0Ch], ecx
.text:00002745                 jmp     loc_263F
.text:0000274A ; ---------------------------------------------------------------------------
.text:0000274A
.text:0000274A loc_274A:                               ; CODE XREF: ReduceOrder(x,x,x)+137j
.text:0000274A                 mov     eax, [ebp+var_4]
.text:0000274D                 movzx   ecx, word ptr [eax+2]
.text:00002751                 mov     edx, [ebp+var_4]
.text:00002754                 movzx   eax, word ptr [edx+4]
.text:00002758                 shl     eax, 10h
.text:0000275B                 or      ecx, eax
.text:0000275D                 cmp     ecx, [ebp+var_C]
.text:00002760                 ja      short loc_27B1
.text:00002762                 mov     ecx, [ebp+arg_0]
.text:00002765                 mov     edx, [ecx+8]
.text:00002768                 mov     [ebp+var_14], edx
.text:0000276B                 mov     eax, [ebp+arg_0]
.text:0000276E                 mov     ecx, [ebp+var_4]
.text:00002771                 mov     [eax+8], ecx
.text:00002774                 mov     edx, [ebp+arg_8]
.text:00002777                 push    edx
.text:00002778                 push    0
.text:0000277A                 push    0
.text:0000277C                 mov     eax, [ebp+arg_0]
.text:0000277F                 push    eax
.text:00002780                 call    _CreateSuccessors@16 ; CreateSuccessors(x,x,x,x)
.text:00002785                 mov     [ebp+var_10], eax
.text:00002788                 cmp     [ebp+var_10], 0
.text:0000278C                 jnz     short loc_279B
.text:0000278E                 push    0
.text:00002790                 mov     ecx, [ebp+var_4]
.text:00002793                 push    ecx
.text:00002794                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:00002799                 jmp     short loc_27A8
.text:0000279B ; ---------------------------------------------------------------------------
.text:0000279B
.text:0000279B loc_279B:                               ; CODE XREF: ReduceOrder(x,x,x)+19Cj
.text:0000279B                 mov     edx, [ebp+var_10]
.text:0000279E                 push    edx
.text:0000279F                 mov     eax, [ebp+var_4]
.text:000027A2                 push    eax
.text:000027A3                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:000027A8
.text:000027A8 loc_27A8:                               ; CODE XREF: ReduceOrder(x,x,x)+1A9j
.text:000027A8                 mov     ecx, [ebp+arg_0]
.text:000027AB                 mov     edx, [ebp+var_14]
.text:000027AE                 mov     [ecx+8], edx
.text:000027B1
.text:000027B1 loc_27B1:                               ; CODE XREF: ReduceOrder(x,x,x)+170j
.text:000027B1                 mov     eax, [ebp+arg_0]
.text:000027B4                 cmp     dword ptr [eax+0Ch], 1
.text:000027B8                 jnz     short loc_27F4
.text:000027BA                 mov     ecx, [ebp+arg_0]
.text:000027BD                 mov     edx, [ebp+var_8]
.text:000027C0                 cmp     edx, [ecx+4]
.text:000027C3                 jnz     short loc_27F4
.text:000027C5                 mov     eax, [ebp+var_4]
.text:000027C8                 movzx   ecx, word ptr [eax+2]
.text:000027CC                 mov     edx, [ebp+var_4]
.text:000027CF                 movzx   eax, word ptr [edx+4]
.text:000027D3                 shl     eax, 10h
.text:000027D6                 or      ecx, eax
.text:000027D8                 push    ecx
.text:000027D9                 mov     ecx, [ebp+arg_0]
.text:000027DC                 mov     edx, [ecx+8]
.text:000027DF                 push    edx
.text:000027E0                 call    _SetSuccessor@8 ; SetSuccessor(x,x)
.text:000027E5                 mov     eax, [ebp+arg_0]
.text:000027E8                 mov     ecx, [eax+38h]
.text:000027EB                 sub     ecx, 1
.text:000027EE                 mov     edx, [ebp+arg_0]
.text:000027F1                 mov     [edx+38h], ecx
.text:000027F4
.text:000027F4 loc_27F4:                               ; CODE XREF: ReduceOrder(x,x,x)+1C8j
.text:000027F4                                         ; ReduceOrder(x,x,x)+1D3j
.text:000027F4                 mov     eax, [ebp+var_4]
.text:000027F7                 movzx   ecx, word ptr [eax+2]
.text:000027FB                 mov     edx, [ebp+var_4]
.text:000027FE                 movzx   eax, word ptr [edx+4]
.text:00002802                 shl     eax, 10h
.text:00002805                 or      ecx, eax
.text:00002807                 jnz     short loc_280D
.text:00002809                 xor     eax, eax
.text:0000280B                 jmp     short loc_2820
.text:0000280D ; ---------------------------------------------------------------------------
.text:0000280D
.text:0000280D loc_280D:                               ; CODE XREF: ReduceOrder(x,x,x)+217j
.text:0000280D                 mov     ecx, [ebp+var_4]
.text:00002810                 movzx   eax, word ptr [ecx+2]
.text:00002814                 mov     edx, [ebp+var_4]
.text:00002817                 movzx   ecx, word ptr [edx+4]
.text:0000281B                 shl     ecx, 10h
.text:0000281E                 or      eax, ecx
.text:00002820
.text:00002820 loc_2820:                               ; CODE XREF: ReduceOrder(x,x,x)+7Cj
.text:00002820                                         ; ReduceOrder(x,x,x)+21Bj
.text:00002820                 add     esp, 14h
.text:00002823                 cmp     ebp, esp
.text:00002825                 call    __RTC_CheckEsp
.text:0000282A                 mov     esp, ebp
.text:0000282C                 pop     ebp
.text:0000282D                 retn    0Ch
.text:0000282D _ReduceOrder@12 endp
.text:0000282D
.text:00002830
.text:00002830 ; =============== S U B R O U T I N E =======================================
.text:00002830
.text:00002830 ; Attributes: bp-based frame
.text:00002830
.text:00002830 ; __stdcall Ppmd8_Update1_0(x)
.text:00002830                 public _Ppmd8_Update1_0@4
.text:00002830 _Ppmd8_Update1_0@4 proc near
.text:00002830
.text:00002830 var_4           = dword ptr -4
.text:00002830 arg_0           = dword ptr  8
.text:00002830
.text:00002830                 push    ebp
.text:00002831                 mov     ebp, esp
.text:00002833                 push    ecx
.text:00002834                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000283B                 mov     eax, [ebp+arg_0]
.text:0000283E                 mov     ecx, [eax+8]
.text:00002841                 movzx   edx, byte ptr [ecx+1]
.text:00002845                 shl     edx, 1
.text:00002847                 mov     eax, [ebp+arg_0]
.text:0000284A                 mov     ecx, [eax]
.text:0000284C                 movzx   eax, word ptr [ecx+2]
.text:00002850                 xor     ecx, ecx
.text:00002852                 cmp     edx, eax
.text:00002854                 setnl   cl
.text:00002857                 mov     edx, [ebp+arg_0]
.text:0000285A                 mov     [edx+14h], ecx
.text:0000285D                 mov     eax, [ebp+arg_0]
.text:00002860                 mov     ecx, [eax+1Ch]
.text:00002863                 mov     edx, [ebp+arg_0]
.text:00002866                 add     ecx, [edx+14h]
.text:00002869                 mov     eax, [ebp+arg_0]
.text:0000286C                 mov     [eax+1Ch], ecx
.text:0000286F                 mov     ecx, [ebp+arg_0]
.text:00002872                 mov     edx, [ecx]
.text:00002874                 movzx   eax, word ptr [edx+2]
.text:00002878                 add     eax, 4
.text:0000287B                 mov     ecx, [ebp+arg_0]
.text:0000287E                 mov     edx, [ecx]
.text:00002880                 mov     [edx+2], ax
.text:00002884                 mov     eax, [ebp+arg_0]
.text:00002887                 mov     ecx, [eax+8]
.text:0000288A                 movzx   edx, byte ptr [ecx+1]
.text:0000288E                 add     edx, 4
.text:00002891                 mov     [ebp+var_4], edx
.text:00002894                 mov     eax, [ebp+arg_0]
.text:00002897                 mov     ecx, [eax+8]
.text:0000289A                 mov     dl, byte ptr [ebp+var_4]
.text:0000289D                 mov     [ecx+1], dl
.text:000028A0                 movzx   eax, byte ptr [ebp+var_4]
.text:000028A4                 cmp     eax, 7Ch ; '|'
.text:000028A7                 jle     short loc_28B2
.text:000028A9                 mov     ecx, [ebp+arg_0]
.text:000028AC                 push    ecx
.text:000028AD                 call    _Rescale@4      ; Rescale(x)
.text:000028B2
.text:000028B2 loc_28B2:                               ; CODE XREF: Ppmd8_Update1_0(x)+77j
.text:000028B2                 mov     edx, [ebp+arg_0]
.text:000028B5                 push    edx
.text:000028B6                 call    _NextContext@4  ; NextContext(x)
.text:000028BB                 add     esp, 4
.text:000028BE                 cmp     ebp, esp
.text:000028C0                 call    __RTC_CheckEsp
.text:000028C5                 mov     esp, ebp
.text:000028C7                 pop     ebp
.text:000028C8                 retn    4
.text:000028C8 _Ppmd8_Update1_0@4 endp
.text:000028C8
.text:000028C8 ; ---------------------------------------------------------------------------
.text:000028CB                 align 10h
.text:000028D0
.text:000028D0 ; =============== S U B R O U T I N E =======================================
.text:000028D0
.text:000028D0 ; Attributes: bp-based frame
.text:000028D0
.text:000028D0 ; __stdcall Ppmd8_UpdateBin(x)
.text:000028D0                 public _Ppmd8_UpdateBin@4
.text:000028D0 _Ppmd8_UpdateBin@4 proc near
.text:000028D0
.text:000028D0 arg_0           = dword ptr  8
.text:000028D0
.text:000028D0                 push    ebp
.text:000028D1                 mov     ebp, esp
.text:000028D3                 mov     eax, [ebp+arg_0]
.text:000028D6                 mov     ecx, [eax+8]
.text:000028D9                 movzx   edx, byte ptr [ecx+1]
.text:000028DD                 mov     eax, [ebp+arg_0]
.text:000028E0                 mov     ecx, [eax+8]
.text:000028E3                 movzx   eax, byte ptr [ecx+1]
.text:000028E7                 xor     ecx, ecx
.text:000028E9                 cmp     eax, 0C4h ; '-'
.text:000028EE                 setl    cl
.text:000028F1                 add     edx, ecx
.text:000028F3                 mov     eax, [ebp+arg_0]
.text:000028F6                 mov     ecx, [eax+8]
.text:000028F9                 mov     [ecx+1], dl
.text:000028FC                 mov     edx, [ebp+arg_0]
.text:000028FF                 mov     dword ptr [edx+14h], 1
.text:00002906                 mov     eax, [ebp+arg_0]
.text:00002909                 mov     ecx, [eax+1Ch]
.text:0000290C                 add     ecx, 1
.text:0000290F                 mov     edx, [ebp+arg_0]
.text:00002912                 mov     [edx+1Ch], ecx
.text:00002915                 mov     eax, [ebp+arg_0]
.text:00002918                 push    eax
.text:00002919                 call    _NextContext@4  ; NextContext(x)
.text:0000291E                 cmp     ebp, esp
.text:00002920                 call    __RTC_CheckEsp
.text:00002925                 pop     ebp
.text:00002926                 retn    4
.text:00002926 _Ppmd8_UpdateBin@4 endp
.text:00002926
.text:00002926 ; ---------------------------------------------------------------------------
.text:00002929                 align 10h
.text:00002930
.text:00002930 ; =============== S U B R O U T I N E =======================================
.text:00002930
.text:00002930 ; Attributes: bp-based frame
.text:00002930
.text:00002930 ; __stdcall Ppmd8_Update2(x)
.text:00002930                 public _Ppmd8_Update2@4
.text:00002930 _Ppmd8_Update2@4 proc near
.text:00002930
.text:00002930 var_4           = dword ptr -4
.text:00002930 arg_0           = dword ptr  8
.text:00002930
.text:00002930                 push    ebp
.text:00002931                 mov     ebp, esp
.text:00002933                 push    ecx
.text:00002934                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000293B                 mov     eax, [ebp+arg_0]
.text:0000293E                 mov     ecx, [eax]
.text:00002940                 movzx   edx, word ptr [ecx+2]
.text:00002944                 add     edx, 4
.text:00002947                 mov     eax, [ebp+arg_0]
.text:0000294A                 mov     ecx, [eax]
.text:0000294C                 mov     [ecx+2], dx
.text:00002950                 mov     edx, [ebp+arg_0]
.text:00002953                 mov     eax, [edx+8]
.text:00002956                 movzx   ecx, byte ptr [eax+1]
.text:0000295A                 add     ecx, 4
.text:0000295D                 mov     [ebp+var_4], ecx
.text:00002960                 mov     edx, [ebp+arg_0]
.text:00002963                 mov     eax, [edx+8]
.text:00002966                 mov     cl, byte ptr [ebp+var_4]
.text:00002969                 mov     [eax+1], cl
.text:0000296C                 movzx   edx, byte ptr [ebp+var_4]
.text:00002970                 cmp     edx, 7Ch ; '|'
.text:00002973                 jle     short loc_297E
.text:00002975                 mov     eax, [ebp+arg_0]
.text:00002978                 push    eax
.text:00002979                 call    _Rescale@4      ; Rescale(x)
.text:0000297E
.text:0000297E loc_297E:                               ; CODE XREF: Ppmd8_Update2(x)+43j
.text:0000297E                 mov     ecx, [ebp+arg_0]
.text:00002981                 mov     edx, [ebp+arg_0]
.text:00002984                 mov     eax, [edx+20h]
.text:00002987                 mov     [ecx+1Ch], eax
.text:0000298A                 mov     ecx, [ebp+arg_0]
.text:0000298D                 push    ecx
.text:0000298E                 call    _UpdateModel@4  ; UpdateModel(x)
.text:00002993                 mov     edx, [ebp+arg_0]
.text:00002996                 mov     eax, [ebp+arg_0]
.text:00002999                 mov     ecx, [eax+4]
.text:0000299C                 mov     [edx], ecx
.text:0000299E                 add     esp, 4
.text:000029A1                 cmp     ebp, esp
.text:000029A3                 call    __RTC_CheckEsp
.text:000029A8                 mov     esp, ebp
.text:000029AA                 pop     ebp
.text:000029AB                 retn    4
.text:000029AB _Ppmd8_Update2@4 endp
.text:000029AB
.text:000029AB ; ---------------------------------------------------------------------------
.text:000029AE                 align 10h
.text:000029AE _text           ends
.text:000029AE
.rtc$TMZ:000029B0 ; ===========================================================================
.rtc$TMZ:000029B0
.rtc$TMZ:000029B0 ; Segment type: Pure data
.rtc$TMZ:000029B0 ; Segment permissions: Read
.rtc$TMZ:000029B0 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000029B0                 assume cs:_rtc$TMZ
.rtc$TMZ:000029B0                 ;org 29B0h
.rtc$TMZ:000029B0 ; COMDAT (pick any)
.rtc$TMZ:000029B0 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000029B0 _rtc$TMZ        ends
.rtc$TMZ:000029B0
.rtc$IMZ:000029B4 ; ===========================================================================
.rtc$IMZ:000029B4
.rtc$IMZ:000029B4 ; Segment type: Pure data
.rtc$IMZ:000029B4 ; Segment permissions: Read
.rtc$IMZ:000029B4 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000029B4                 assume cs:_rtc$IMZ
.rtc$IMZ:000029B4                 ;org 29B4h
.rtc$IMZ:000029B4 ; COMDAT (pick any)
.rtc$IMZ:000029B4 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000029B4 _rtc$IMZ        ends
.rtc$IMZ:000029B4
UNDEF:000029C0 ; ===========================================================================
UNDEF:000029C0
UNDEF:000029C0 ; Segment type: Externs
UNDEF:000029C0 ; UNDEF
UNDEF:000029C0 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:000029C0                 extrn _memset:near      ; CODE XREF: Ppmd8_Construct(x)+B3p
UNDEF:000029C0                                         ; Ppmd8_Construct(x)+CCp ...
UNDEF:000029C4                 extrn __RTC_CheckEsp:near
UNDEF:000029C4                                         ; CODE XREF: Ppmd8_Construct(x)+151p
UNDEF:000029C4                                         ; Ppmd8_Free(x,x)+1Bp ...
UNDEF:000029C8                 extrn __RTC_Shutdown:near
UNDEF:000029C8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000029CC                 extrn __RTC_InitBase:near
UNDEF:000029CC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000029D0 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000029D0                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000029D0                                         ; CODE XREF: SwapStates(x,x)+53p
UNDEF:000029D0                                         ; Rescale(x)+386p ...
UNDEF:000029D4                 extrn ___security_cookie:near
UNDEF:000029D4                                         ; DATA XREF: ExpandTextArea(x)+1Cr
UNDEF:000029D8 ; __fastcall __security_check_cookie(x)
UNDEF:000029D8                 extrn @__security_check_cookie@4:near
UNDEF:000029D8                                         ; CODE XREF: ExpandTextArea(x)+1EAp
UNDEF:000029D8
UNDEF:000029D8
UNDEF:000029D8                 end