.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 2A509A13C781F8648211D744614BFD4F
.text:00000000 ; Input CRC32 : 4B9BA902
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\InBuffer.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; _DWORD __thiscall CInBufferBase::CInBufferBase(CInBufferBase *__hidden this)
.text:00000000                 public ??0CInBufferBase@@QAE@XZ
.text:00000000 ??0CInBufferBase@@QAE@XZ proc near
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_4], ecx
.text:0000000E                 mov     eax, [ebp+var_4]
.text:00000011                 mov     dword ptr [eax], 0
.text:00000017                 mov     ecx, [ebp+var_4]
.text:0000001A                 mov     dword ptr [ecx+4], 0
.text:00000021                 mov     edx, [ebp+var_4]
.text:00000024                 mov     dword ptr [edx+8], 0
.text:0000002B                 mov     eax, [ebp+var_4]
.text:0000002E                 mov     dword ptr [eax+0Ch], 0
.text:00000035                 mov     ecx, [ebp+var_4]
.text:00000038                 mov     dword ptr [ecx+10h], 0
.text:0000003F                 mov     dword ptr [ecx+14h], 0
.text:00000046                 mov     edx, [ebp+var_4]
.text:00000049                 mov     dword ptr [edx+18h], 0
.text:00000050                 mov     eax, [ebp+var_4]
.text:00000053                 mov     byte ptr [eax+1Ch], 0
.text:00000057                 mov     ecx, [ebp+var_4]
.text:0000005A                 mov     dword ptr [ecx+20h], 0
.text:00000061                 mov     eax, [ebp+var_4]
.text:00000064                 mov     esp, ebp
.text:00000066                 pop     ebp
.text:00000067                 retn
.text:00000067 ??0CInBufferBase@@QAE@XZ endp
.text:00000067
.text:00000067 ; ---------------------------------------------------------------------------
.text:00000068                 align 10h
.text:00000070
.text:00000070 ; =============== S U B R O U T I N E =======================================
.text:00000070
.text:00000070 ; Attributes: bp-based frame
.text:00000070
.text:00000070 ; bool __thiscall CInBuffer::Create(CInBuffer *this, unsigned int)
.text:00000070                 public ?Create@CInBuffer@@QAE_NI@Z
.text:00000070 ?Create@CInBuffer@@QAE_NI@Z proc near
.text:00000070
.text:00000070 var_8           = dword ptr -8
.text:00000070 var_4           = dword ptr -4
.text:00000070 arg_0           = dword ptr  8
.text:00000070
.text:00000070                 push    ebp
.text:00000071                 mov     ebp, esp
.text:00000073                 sub     esp, 8
.text:00000076                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000007D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000084                 mov     [ebp+var_4], ecx
.text:00000087                 mov     [ebp+var_8], 1
.text:0000008E                 cmp     [ebp+arg_0], 1
.text:00000092                 jnb     short loc_9B
.text:00000094                 mov     [ebp+arg_0], 1
.text:0000009B
.text:0000009B loc_9B:                                 ; CODE XREF: CInBuffer::Create(uint)+22j
.text:0000009B                 mov     eax, [ebp+var_4]
.text:0000009E                 cmp     dword ptr [eax+8], 0
.text:000000A2                 jz      short loc_B3
.text:000000A4                 mov     ecx, [ebp+var_4]
.text:000000A7                 mov     edx, [ecx+18h]
.text:000000AA                 cmp     edx, [ebp+arg_0]
.text:000000AD                 jnz     short loc_B3
.text:000000AF                 mov     al, 1
.text:000000B1                 jmp     short loc_DF
.text:000000B3 ; ---------------------------------------------------------------------------
.text:000000B3
.text:000000B3 loc_B3:                                 ; CODE XREF: CInBuffer::Create(uint)+32j
.text:000000B3                                         ; CInBuffer::Create(uint)+3Dj
.text:000000B3                 mov     ecx, [ebp+var_4] ; this
.text:000000B6                 call    ?Free@CInBuffer@@QAEXXZ ; CInBuffer::Free(void)
.text:000000BB                 mov     eax, [ebp+var_4]
.text:000000BE                 mov     ecx, [ebp+arg_0]
.text:000000C1                 mov     [eax+18h], ecx
.text:000000C4                 mov     edx, [ebp+arg_0]
.text:000000C7                 push    edx
.text:000000C8                 call    _MidAlloc@4     ; MidAlloc(x)
.text:000000CD                 mov     ecx, [ebp+var_4]
.text:000000D0                 mov     [ecx+8], eax
.text:000000D3                 mov     edx, [ebp+var_4]
.text:000000D6                 xor     eax, eax
.text:000000D8                 cmp     dword ptr [edx+8], 0
.text:000000DC                 setnz   al
.text:000000DF
.text:000000DF loc_DF:                                 ; CODE XREF: CInBuffer::Create(uint)+41j
.text:000000DF                 add     esp, 8
.text:000000E2                 cmp     ebp, esp
.text:000000E4                 call    __RTC_CheckEsp
.text:000000E9                 mov     esp, ebp
.text:000000EB                 pop     ebp
.text:000000EC                 retn    4
.text:000000EC ?Create@CInBuffer@@QAE_NI@Z endp
.text:000000EC
.text:000000EC ; ---------------------------------------------------------------------------
.text:000000EF                 align 10h
.text:000000F0
.text:000000F0 ; =============== S U B R O U T I N E =======================================
.text:000000F0
.text:000000F0 ; Attributes: bp-based frame
.text:000000F0
.text:000000F0 ; void __thiscall CInBuffer::Free(CInBuffer *__hidden this)
.text:000000F0                 public ?Free@CInBuffer@@QAEXXZ
.text:000000F0 ?Free@CInBuffer@@QAEXXZ proc near       ; CODE XREF: CInBuffer::Create(uint)+46p
.text:000000F0
.text:000000F0 var_4           = dword ptr -4
.text:000000F0
.text:000000F0                 push    ebp
.text:000000F1                 mov     ebp, esp
.text:000000F3                 push    ecx
.text:000000F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000FB                 mov     [ebp+var_4], ecx
.text:000000FE                 mov     eax, [ebp+var_4]
.text:00000101                 mov     ecx, [eax+8]
.text:00000104                 push    ecx
.text:00000105                 call    _MidFree@4      ; MidFree(x)
.text:0000010A                 mov     edx, [ebp+var_4]
.text:0000010D                 mov     dword ptr [edx+8], 0
.text:00000114                 add     esp, 4
.text:00000117                 cmp     ebp, esp
.text:00000119                 call    __RTC_CheckEsp
.text:0000011E                 mov     esp, ebp
.text:00000120                 pop     ebp
.text:00000121                 retn
.text:00000121 ?Free@CInBuffer@@QAEXXZ endp
.text:00000121
.text:00000121 ; ---------------------------------------------------------------------------
.text:00000122                 align 10h
.text:00000130
.text:00000130 ; =============== S U B R O U T I N E =======================================
.text:00000130
.text:00000130 ; Attributes: bp-based frame
.text:00000130
.text:00000130 ; void __thiscall CInBufferBase::Init(CInBufferBase *__hidden this)
.text:00000130                 public ?Init@CInBufferBase@@QAEXXZ
.text:00000130 ?Init@CInBufferBase@@QAEXXZ proc near
.text:00000130
.text:00000130 var_4           = dword ptr -4
.text:00000130
.text:00000130                 push    ebp
.text:00000131                 mov     ebp, esp
.text:00000133                 push    ecx
.text:00000134                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000013B                 mov     [ebp+var_4], ecx
.text:0000013E                 mov     eax, [ebp+var_4]
.text:00000141                 mov     dword ptr [eax+10h], 0
.text:00000148                 mov     dword ptr [eax+14h], 0
.text:0000014F                 mov     ecx, [ebp+var_4]
.text:00000152                 mov     edx, [ebp+var_4]
.text:00000155                 mov     eax, [edx+8]
.text:00000158                 mov     [ecx], eax
.text:0000015A                 mov     ecx, [ebp+var_4]
.text:0000015D                 mov     edx, [ebp+var_4]
.text:00000160                 mov     eax, [edx]
.text:00000162                 mov     [ecx+4], eax
.text:00000165                 mov     ecx, [ebp+var_4]
.text:00000168                 mov     byte ptr [ecx+1Ch], 0
.text:0000016C                 mov     edx, [ebp+var_4]
.text:0000016F                 mov     dword ptr [edx+20h], 0
.text:00000176                 mov     esp, ebp
.text:00000178                 pop     ebp
.text:00000179                 retn
.text:00000179 ?Init@CInBufferBase@@QAEXXZ endp
.text:00000179
.text:00000179 ; ---------------------------------------------------------------------------
.text:0000017A                 align 10h
.text:00000180
.text:00000180 ; =============== S U B R O U T I N E =======================================
.text:00000180
.text:00000180 ; Attributes: bp-based frame
.text:00000180
.text:00000180 ; bool __thiscall CInBufferBase::ReadBlock(CInBufferBase *__hidden this)
.text:00000180                 public ?ReadBlock@CInBufferBase@@IAE_NXZ
.text:00000180 ?ReadBlock@CInBufferBase@@IAE_NXZ proc near
.text:00000180                                         ; CODE XREF: CInBufferBase::ReadByte_FromNewBlock(uchar &)+11p
.text:00000180                                         ; CInBufferBase::ReadByte_FromNewBlock(void)+1Ap ...
.text:00000180
.text:00000180 var_1C          = dword ptr -1Ch
.text:00000180 var_18          = dword ptr -18h
.text:00000180 var_14          = dword ptr -14h
.text:00000180 var_10          = dword ptr -10h
.text:00000180 var_C           = dword ptr -0Ch
.text:00000180 var_8           = dword ptr -8
.text:00000180 var_4           = dword ptr -4
.text:00000180
.text:00000180                 push    ebp
.text:00000181                 mov     ebp, esp
.text:00000183                 sub     esp, 1Ch
.text:00000186                 push    esi
.text:00000187                 mov     eax, 0CCCCCCCCh
.text:0000018C                 mov     [ebp+var_1C], eax
.text:0000018F                 mov     [ebp+var_18], eax
.text:00000192                 mov     [ebp+var_14], eax
.text:00000195                 mov     [ebp+var_10], eax
.text:00000198                 mov     [ebp+var_C], eax
.text:0000019B                 mov     [ebp+var_8], eax
.text:0000019E                 mov     [ebp+var_4], eax
.text:000001A1                 mov     [ebp+var_4], ecx
.text:000001A4                 mov     eax, [ebp+var_4]
.text:000001A7                 movzx   ecx, byte ptr [eax+1Ch]
.text:000001AB                 test    ecx, ecx
.text:000001AD                 jz      short loc_1B6
.text:000001AF                 xor     al, al
.text:000001B1                 jmp     loc_26F
.text:000001B6 ; ---------------------------------------------------------------------------
.text:000001B6
.text:000001B6 loc_1B6:                                ; CODE XREF: CInBufferBase::ReadBlock(void)+2Dj
.text:000001B6                 mov     edx, [ebp+var_4]
.text:000001B9                 mov     eax, [ebp+var_4]
.text:000001BC                 mov     ecx, [edx]
.text:000001BE                 sub     ecx, [eax+8]
.text:000001C1                 mov     eax, ecx
.text:000001C3                 cdq
.text:000001C4                 mov     ecx, [ebp+var_4]
.text:000001C7                 add     eax, [ecx+10h]
.text:000001CA                 adc     edx, [ecx+14h]
.text:000001CD                 mov     ecx, [ebp+var_4]
.text:000001D0                 mov     [ecx+10h], eax
.text:000001D3                 mov     [ecx+14h], edx
.text:000001D6                 mov     edx, [ebp+var_4]
.text:000001D9                 mov     eax, [ebp+var_4]
.text:000001DC                 mov     ecx, [eax+8]
.text:000001DF                 mov     [edx], ecx
.text:000001E1                 mov     edx, [ebp+var_4]
.text:000001E4                 mov     eax, [ebp+var_4]
.text:000001E7                 mov     ecx, [eax+8]
.text:000001EA                 mov     [edx+4], ecx
.text:000001ED                 mov     esi, esp
.text:000001EF                 lea     edx, [ebp+var_C]
.text:000001F2                 push    edx
.text:000001F3                 mov     eax, [ebp+var_4]
.text:000001F6                 mov     ecx, [eax+18h]
.text:000001F9                 push    ecx
.text:000001FA                 mov     edx, [ebp+var_4]
.text:000001FD                 mov     eax, [edx+8]
.text:00000200                 push    eax
.text:00000201                 mov     ecx, [ebp+var_4]
.text:00000204                 mov     edx, [ecx+0Ch]
.text:00000207                 mov     eax, [ebp+var_4]
.text:0000020A                 mov     ecx, [eax+0Ch]
.text:0000020D                 mov     edx, [edx]
.text:0000020F                 push    ecx
.text:00000210                 mov     eax, [edx+0Ch]
.text:00000213                 call    eax
.text:00000215                 cmp     esi, esp
.text:00000217                 call    __RTC_CheckEsp
.text:0000021C                 mov     [ebp+var_14], eax
.text:0000021F                 cmp     [ebp+var_14], 0
.text:00000223                 jz      short loc_244
.text:00000225                 mov     ecx, [ebp+var_14]
.text:00000228                 push    ecx             ; __int32
.text:00000229                 lea     ecx, [ebp+var_1C] ; this
.text:0000022C                 call    ??0CInBufferException@@QAE@J@Z ; CInBufferException::CInBufferException(long)
.text:00000231                 mov     edx, [eax]
.text:00000233                 mov     [ebp+var_18], edx
.text:00000236                 push    offset __TI2?AUCInBufferException@@
.text:0000023B                 lea     eax, [ebp+var_18]
.text:0000023E                 push    eax
.text:0000023F                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00000244 ; ---------------------------------------------------------------------------
.text:00000244
.text:00000244 loc_244:                                ; CODE XREF: CInBufferBase::ReadBlock(void)+A3j
.text:00000244                 mov     ecx, [ebp+var_4]
.text:00000247                 mov     edx, [ecx]
.text:00000249                 add     edx, [ebp+var_C]
.text:0000024C                 mov     eax, [ebp+var_4]
.text:0000024F                 mov     [eax+4], edx
.text:00000252                 xor     ecx, ecx
.text:00000254                 cmp     [ebp+var_C], 0
.text:00000258                 setz    cl
.text:0000025B                 mov     edx, [ebp+var_4]
.text:0000025E                 mov     [edx+1Ch], cl
.text:00000261                 mov     eax, [ebp+var_4]
.text:00000264                 movzx   eax, byte ptr [eax+1Ch]
.text:00000268                 neg     eax
.text:0000026A                 sbb     eax, eax
.text:0000026C                 add     eax, 1
.text:0000026F
.text:0000026F loc_26F:                                ; CODE XREF: CInBufferBase::ReadBlock(void)+31j
.text:0000026F                 push    edx
.text:00000270                 mov     ecx, ebp
.text:00000272                 push    eax
.text:00000273                 lea     edx, $LN7
.text:00000279                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000027E                 pop     eax
.text:0000027F                 pop     edx
.text:00000280                 pop     esi
.text:00000281                 add     esp, 1Ch
.text:00000284                 cmp     ebp, esp
.text:00000286                 call    __RTC_CheckEsp
.text:0000028B                 mov     esp, ebp
.text:0000028D                 pop     ebp
.text:0000028E                 retn
.text:0000028E ?ReadBlock@CInBufferBase@@IAE_NXZ endp
.text:0000028E
.text:0000028E ; ---------------------------------------------------------------------------
.text:0000028F                 align 10h
.text:00000290 $LN7            dd 1                    ; DATA XREF: CInBufferBase::ReadBlock(void)+F3o
.text:00000294                 dd offset $LN6
.text:00000298 $LN6            dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000294o
.text:000002A0                 dd offset $LN5          ; "processed"
.text:000002A4 $LN5            db 'processed',0        ; DATA XREF: .text:000002A0o
.text:000002AE                 align 10h
.text:000002B0
.text:000002B0 ; =============== S U B R O U T I N E =======================================
.text:000002B0
.text:000002B0 ; Attributes: bp-based frame
.text:000002B0
.text:000002B0 ; bool __thiscall CInBufferBase::ReadByte_FromNewBlock(CInBufferBase *this, unsigned __int8 *)
.text:000002B0                 public ?ReadByte_FromNewBlock@CInBufferBase@@IAE_NAAE@Z
.text:000002B0 ?ReadByte_FromNewBlock@CInBufferBase@@IAE_NAAE@Z proc near
.text:000002B0
.text:000002B0 var_4           = dword ptr -4
.text:000002B0 arg_0           = dword ptr  8
.text:000002B0
.text:000002B0                 push    ebp
.text:000002B1                 mov     ebp, esp
.text:000002B3                 push    ecx
.text:000002B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002BB                 mov     [ebp+var_4], ecx
.text:000002BE                 mov     ecx, [ebp+var_4] ; this
.text:000002C1                 call    ?ReadBlock@CInBufferBase@@IAE_NXZ ; CInBufferBase::ReadBlock(void)
.text:000002C6                 movzx   eax, al
.text:000002C9                 test    eax, eax
.text:000002CB                 jnz     short loc_2E6
.text:000002CD                 mov     ecx, [ebp+var_4]
.text:000002D0                 mov     edx, [ecx+20h]
.text:000002D3                 add     edx, 1
.text:000002D6                 mov     eax, [ebp+var_4]
.text:000002D9                 mov     [eax+20h], edx
.text:000002DC                 mov     ecx, [ebp+arg_0]
.text:000002DF                 mov     byte ptr [ecx], 0FFh
.text:000002E2                 xor     al, al
.text:000002E4                 jmp     short loc_301
.text:000002E6 ; ---------------------------------------------------------------------------
.text:000002E6
.text:000002E6 loc_2E6:                                ; CODE XREF: CInBufferBase::ReadByte_FromNewBlock(uchar &)+1Bj
.text:000002E6                 mov     edx, [ebp+var_4]
.text:000002E9                 mov     eax, [edx]
.text:000002EB                 mov     ecx, [ebp+arg_0]
.text:000002EE                 mov     dl, [eax]
.text:000002F0                 mov     [ecx], dl
.text:000002F2                 mov     eax, [ebp+var_4]
.text:000002F5                 mov     ecx, [eax]
.text:000002F7                 add     ecx, 1
.text:000002FA                 mov     edx, [ebp+var_4]
.text:000002FD                 mov     [edx], ecx
.text:000002FF                 mov     al, 1
.text:00000301
.text:00000301 loc_301:                                ; CODE XREF: CInBufferBase::ReadByte_FromNewBlock(uchar &)+34j
.text:00000301                 add     esp, 4
.text:00000304                 cmp     ebp, esp
.text:00000306                 call    __RTC_CheckEsp
.text:0000030B                 mov     esp, ebp
.text:0000030D                 pop     ebp
.text:0000030E                 retn    4
.text:0000030E ?ReadByte_FromNewBlock@CInBufferBase@@IAE_NAAE@Z endp
.text:0000030E
.text:0000030E ; ---------------------------------------------------------------------------
.text:00000311                 align 10h
.text:00000320
.text:00000320 ; =============== S U B R O U T I N E =======================================
.text:00000320
.text:00000320 ; Attributes: bp-based frame
.text:00000320
.text:00000320 ; unsigned __int8 __thiscall CInBufferBase::ReadByte_FromNewBlock(CInBufferBase *__hidden this)
.text:00000320                 public ?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ
.text:00000320 ?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ proc near
.text:00000320
.text:00000320 var_8           = dword ptr -8
.text:00000320 var_4           = dword ptr -4
.text:00000320
.text:00000320                 push    ebp
.text:00000321                 mov     ebp, esp
.text:00000323                 sub     esp, 8
.text:00000326                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000032D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000334                 mov     [ebp+var_4], ecx
.text:00000337                 mov     ecx, [ebp+var_4] ; this
.text:0000033A                 call    ?ReadBlock@CInBufferBase@@IAE_NXZ ; CInBufferBase::ReadBlock(void)
.text:0000033F                 movzx   eax, al
.text:00000342                 test    eax, eax
.text:00000344                 jnz     short loc_359
.text:00000346                 mov     ecx, [ebp+var_4]
.text:00000349                 mov     edx, [ecx+20h]
.text:0000034C                 add     edx, 1
.text:0000034F                 mov     eax, [ebp+var_4]
.text:00000352                 mov     [eax+20h], edx
.text:00000355                 or      al, 0FFh
.text:00000357                 jmp     short loc_373
.text:00000359 ; ---------------------------------------------------------------------------
.text:00000359
.text:00000359 loc_359:                                ; CODE XREF: CInBufferBase::ReadByte_FromNewBlock(void)+24j
.text:00000359                 mov     ecx, [ebp+var_4]
.text:0000035C                 mov     edx, [ecx]
.text:0000035E                 mov     al, [edx]
.text:00000360                 mov     byte ptr [ebp+var_8+3], al
.text:00000363                 mov     ecx, [ebp+var_4]
.text:00000366                 mov     edx, [ecx]
.text:00000368                 add     edx, 1
.text:0000036B                 mov     eax, [ebp+var_4]
.text:0000036E                 mov     [eax], edx
.text:00000370                 mov     al, byte ptr [ebp+var_8+3]
.text:00000373
.text:00000373 loc_373:                                ; CODE XREF: CInBufferBase::ReadByte_FromNewBlock(void)+37j
.text:00000373                 add     esp, 8
.text:00000376                 cmp     ebp, esp
.text:00000378                 call    __RTC_CheckEsp
.text:0000037D                 mov     esp, ebp
.text:0000037F                 pop     ebp
.text:00000380                 retn
.text:00000380 ?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ endp
.text:00000380
.text:00000380 ; ---------------------------------------------------------------------------
.text:00000381                 align 10h
.text:00000390
.text:00000390 ; =============== S U B R O U T I N E =======================================
.text:00000390
.text:00000390 ; Attributes: bp-based frame
.text:00000390
.text:00000390 ; unsigned int __thiscall CInBufferBase::ReadBytes(CInBufferBase *this, unsigned __int8 *, unsigned int)
.text:00000390                 public ?ReadBytes@CInBufferBase@@QAEIPAEI@Z
.text:00000390 ?ReadBytes@CInBufferBase@@QAEIPAEI@Z proc near
.text:00000390
.text:00000390 var_10          = dword ptr -10h
.text:00000390 var_C           = dword ptr -0Ch
.text:00000390 var_8           = dword ptr -8
.text:00000390 var_4           = dword ptr -4
.text:00000390 arg_0           = dword ptr  8
.text:00000390 arg_4           = dword ptr  0Ch
.text:00000390
.text:00000390                 push    ebp
.text:00000391                 mov     ebp, esp
.text:00000393                 sub     esp, 10h
.text:00000396                 mov     eax, 0CCCCCCCCh
.text:0000039B                 mov     [ebp+var_10], eax
.text:0000039E                 mov     [ebp+var_C], eax
.text:000003A1                 mov     [ebp+var_8], eax
.text:000003A4                 mov     [ebp+var_4], eax
.text:000003A7                 mov     [ebp+var_4], ecx
.text:000003AA                 mov     eax, [ebp+var_4]
.text:000003AD                 mov     ecx, [ebp+var_4]
.text:000003B0                 mov     edx, [eax+4]
.text:000003B3                 sub     edx, [ecx]
.text:000003B5                 cmp     edx, [ebp+arg_4]
.text:000003B8                 jb      short loc_400
.text:000003BA                 mov     eax, [ebp+var_4]
.text:000003BD                 mov     ecx, [eax]
.text:000003BF                 mov     [ebp+var_8], ecx
.text:000003C2                 mov     [ebp+var_C], 0
.text:000003C9                 jmp     short loc_3D4
.text:000003CB ; ---------------------------------------------------------------------------
.text:000003CB
.text:000003CB loc_3CB:                                ; CODE XREF: CInBufferBase::ReadBytes(uchar *,uint)+5Cj
.text:000003CB                 mov     edx, [ebp+var_C]
.text:000003CE                 add     edx, 1
.text:000003D1                 mov     [ebp+var_C], edx
.text:000003D4
.text:000003D4 loc_3D4:                                ; CODE XREF: CInBufferBase::ReadBytes(uchar *,uint)+39j
.text:000003D4                 mov     eax, [ebp+var_C]
.text:000003D7                 cmp     eax, [ebp+arg_4]
.text:000003DA                 jnb     short loc_3EE
.text:000003DC                 mov     ecx, [ebp+arg_0]
.text:000003DF                 add     ecx, [ebp+var_C]
.text:000003E2                 mov     edx, [ebp+var_8]
.text:000003E5                 add     edx, [ebp+var_C]
.text:000003E8                 mov     al, [edx]
.text:000003EA                 mov     [ecx], al
.text:000003EC                 jmp     short loc_3CB
.text:000003EE ; ---------------------------------------------------------------------------
.text:000003EE
.text:000003EE loc_3EE:                                ; CODE XREF: CInBufferBase::ReadBytes(uchar *,uint)+4Aj
.text:000003EE                 mov     ecx, [ebp+var_4]
.text:000003F1                 mov     edx, [ecx]
.text:000003F3                 add     edx, [ebp+arg_4]
.text:000003F6                 mov     eax, [ebp+var_4]
.text:000003F9                 mov     [eax], edx
.text:000003FB                 mov     eax, [ebp+arg_4]
.text:000003FE                 jmp     short loc_45C
.text:00000400 ; ---------------------------------------------------------------------------
.text:00000400
.text:00000400 loc_400:                                ; CODE XREF: CInBufferBase::ReadBytes(uchar *,uint)+28j
.text:00000400                 mov     [ebp+var_10], 0
.text:00000407                 jmp     short loc_412
.text:00000409 ; ---------------------------------------------------------------------------
.text:00000409
.text:00000409 loc_409:                                ; CODE XREF: CInBufferBase::ReadBytes(uchar *,uint)+C7j
.text:00000409                 mov     ecx, [ebp+var_10]
.text:0000040C                 add     ecx, 1
.text:0000040F                 mov     [ebp+var_10], ecx
.text:00000412
.text:00000412 loc_412:                                ; CODE XREF: CInBufferBase::ReadBytes(uchar *,uint)+77j
.text:00000412                 mov     edx, [ebp+var_10]
.text:00000415                 cmp     edx, [ebp+arg_4]
.text:00000418                 jnb     short loc_459
.text:0000041A                 mov     eax, [ebp+var_4]
.text:0000041D                 mov     ecx, [ebp+var_4]
.text:00000420                 mov     edx, [eax]
.text:00000422                 cmp     edx, [ecx+4]
.text:00000425                 jb      short loc_43B
.text:00000427                 mov     ecx, [ebp+var_4] ; this
.text:0000042A                 call    ?ReadBlock@CInBufferBase@@IAE_NXZ ; CInBufferBase::ReadBlock(void)
.text:0000042F                 movzx   eax, al
.text:00000432                 test    eax, eax
.text:00000434                 jnz     short loc_43B
.text:00000436                 mov     eax, [ebp+var_10]
.text:00000439                 jmp     short loc_45C
.text:0000043B ; ---------------------------------------------------------------------------
.text:0000043B
.text:0000043B loc_43B:                                ; CODE XREF: CInBufferBase::ReadBytes(uchar *,uint)+95j
.text:0000043B                                         ; CInBufferBase::ReadBytes(uchar *,uint)+A4j
.text:0000043B                 mov     ecx, [ebp+var_4]
.text:0000043E                 mov     edx, [ecx]
.text:00000440                 mov     eax, [ebp+arg_0]
.text:00000443                 add     eax, [ebp+var_10]
.text:00000446                 mov     cl, [edx]
.text:00000448                 mov     [eax], cl
.text:0000044A                 mov     edx, [ebp+var_4]
.text:0000044D                 mov     eax, [edx]
.text:0000044F                 add     eax, 1
.text:00000452                 mov     ecx, [ebp+var_4]
.text:00000455                 mov     [ecx], eax
.text:00000457                 jmp     short loc_409
.text:00000459 ; ---------------------------------------------------------------------------
.text:00000459
.text:00000459 loc_459:                                ; CODE XREF: CInBufferBase::ReadBytes(uchar *,uint)+88j
.text:00000459                 mov     eax, [ebp+arg_4]
.text:0000045C
.text:0000045C loc_45C:                                ; CODE XREF: CInBufferBase::ReadBytes(uchar *,uint)+6Ej
.text:0000045C                                         ; CInBufferBase::ReadBytes(uchar *,uint)+A9j
.text:0000045C                 add     esp, 10h
.text:0000045F                 cmp     ebp, esp
.text:00000461                 call    __RTC_CheckEsp
.text:00000466                 mov     esp, ebp
.text:00000468                 pop     ebp
.text:00000469                 retn    8
.text:00000469 ?ReadBytes@CInBufferBase@@QAEIPAEI@Z endp
.text:00000469
.text:00000469 ; ---------------------------------------------------------------------------
.text:0000046C                 align 10h
.text:00000470
.text:00000470 ; =============== S U B R O U T I N E =======================================
.text:00000470
.text:00000470 ; Attributes: bp-based frame
.text:00000470
.text:00000470 ; unsigned int __thiscall CInBufferBase::Skip(CInBufferBase *this, unsigned int)
.text:00000470                 public ?Skip@CInBufferBase@@QAEII@Z
.text:00000470 ?Skip@CInBufferBase@@QAEII@Z proc near
.text:00000470
.text:00000470 var_C           = dword ptr -0Ch
.text:00000470 var_8           = dword ptr -8
.text:00000470 var_4           = dword ptr -4
.text:00000470 arg_0           = dword ptr  8
.text:00000470
.text:00000470                 push    ebp
.text:00000471                 mov     ebp, esp
.text:00000473                 sub     esp, 0Ch
.text:00000476                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000047D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000484                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000048B                 mov     [ebp+var_4], ecx
.text:0000048E                 mov     [ebp+var_8], 0
.text:00000495
.text:00000495 loc_495:                                ; CODE XREF: CInBufferBase::Skip(uint):loc_4F3j
.text:00000495                 mov     eax, [ebp+var_4]
.text:00000498                 mov     ecx, [ebp+var_4]
.text:0000049B                 mov     edx, [eax+4]
.text:0000049E                 sub     edx, [ecx]
.text:000004A0                 mov     [ebp+var_C], edx
.text:000004A3                 mov     eax, [ebp+var_C]
.text:000004A6                 cmp     eax, [ebp+arg_0]
.text:000004A9                 jb      short loc_4C0
.text:000004AB                 mov     ecx, [ebp+var_4]
.text:000004AE                 mov     edx, [ecx]
.text:000004B0                 add     edx, [ebp+arg_0]
.text:000004B3                 mov     eax, [ebp+var_4]
.text:000004B6                 mov     [eax], edx
.text:000004B8                 mov     eax, [ebp+var_8]
.text:000004BB                 add     eax, [ebp+arg_0]
.text:000004BE                 jmp     short loc_4F5
.text:000004C0 ; ---------------------------------------------------------------------------
.text:000004C0
.text:000004C0 loc_4C0:                                ; CODE XREF: CInBufferBase::Skip(uint)+39j
.text:000004C0                 mov     ecx, [ebp+var_4]
.text:000004C3                 mov     edx, [ecx]
.text:000004C5                 add     edx, [ebp+var_C]
.text:000004C8                 mov     eax, [ebp+var_4]
.text:000004CB                 mov     [eax], edx
.text:000004CD                 mov     ecx, [ebp+var_8]
.text:000004D0                 add     ecx, [ebp+var_C]
.text:000004D3                 mov     [ebp+var_8], ecx
.text:000004D6                 mov     edx, [ebp+arg_0]
.text:000004D9                 sub     edx, [ebp+var_C]
.text:000004DC                 mov     [ebp+arg_0], edx
.text:000004DF                 mov     ecx, [ebp+var_4] ; this
.text:000004E2                 call    ?ReadBlock@CInBufferBase@@IAE_NXZ ; CInBufferBase::ReadBlock(void)
.text:000004E7                 movzx   eax, al
.text:000004EA                 test    eax, eax
.text:000004EC                 jnz     short loc_4F3
.text:000004EE                 mov     eax, [ebp+var_8]
.text:000004F1                 jmp     short loc_4F5
.text:000004F3 ; ---------------------------------------------------------------------------
.text:000004F3
.text:000004F3 loc_4F3:                                ; CODE XREF: CInBufferBase::Skip(uint)+7Cj
.text:000004F3                 jmp     short loc_495
.text:000004F5 ; ---------------------------------------------------------------------------
.text:000004F5
.text:000004F5 loc_4F5:                                ; CODE XREF: CInBufferBase::Skip(uint)+4Ej
.text:000004F5                                         ; CInBufferBase::Skip(uint)+81j
.text:000004F5                 add     esp, 0Ch
.text:000004F8                 cmp     ebp, esp
.text:000004FA                 call    __RTC_CheckEsp
.text:000004FF                 mov     esp, ebp
.text:00000501                 pop     ebp
.text:00000502                 retn    4
.text:00000502 ?Skip@CInBufferBase@@QAEII@Z endp
.text:00000502
.text:00000502 ; ---------------------------------------------------------------------------
.text:00000505                 align 4
.text:00000505 _text           ends
.text:00000505
.rtc$TMZ:00000508 ; ===========================================================================
.rtc$TMZ:00000508
.rtc$TMZ:00000508 ; Segment type: Pure data
.rtc$TMZ:00000508 ; Segment permissions: Read
.rtc$TMZ:00000508 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000508                 assume cs:_rtc$TMZ
.rtc$TMZ:00000508                 ;org 508h
.rtc$TMZ:00000508 ; COMDAT (pick any)
.rtc$TMZ:00000508 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000508 _rtc$TMZ        ends
.rtc$TMZ:00000508
.rtc$IMZ:0000050C ; ===========================================================================
.rtc$IMZ:0000050C
.rtc$IMZ:0000050C ; Segment type: Pure data
.rtc$IMZ:0000050C ; Segment permissions: Read
.rtc$IMZ:0000050C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000050C                 assume cs:_rtc$IMZ
.rtc$IMZ:0000050C                 ;org 50Ch
.rtc$IMZ:0000050C ; COMDAT (pick any)
.rtc$IMZ:0000050C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000050C _rtc$IMZ        ends
.rtc$IMZ:0000050C
.xdata$x:00000510 ; ===========================================================================
.xdata$x:00000510
.xdata$x:00000510 ; Segment type: Pure data
.xdata$x:00000510 ; Segment permissions: Read
.xdata$x:00000510 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000510                 assume cs:_xdata$x
.xdata$x:00000510                 ;org 510h
.xdata$x:00000510 ; COMDAT (pick any)
.xdata$x:00000510                 public __TI2?AUCInBufferException@@
.xdata$x:00000510 __TI2?AUCInBufferException@@ db    0    ; DATA XREF: CInBufferBase::ReadBlock(void)+B6o
.xdata$x:00000511                 db    0
.xdata$x:00000512                 db    0
.xdata$x:00000513                 db    0
.xdata$x:00000514                 db    0
.xdata$x:00000515                 db    0
.xdata$x:00000516                 db    0
.xdata$x:00000517                 db    0
.xdata$x:00000518                 db    0
.xdata$x:00000519                 db    0
.xdata$x:0000051A                 db    0
.xdata$x:0000051B                 db    0
.xdata$x:0000051C                 dd offset __CTA2?AUCInBufferException@@
.xdata$x:0000051C _xdata$x        ends
.xdata$x:0000051C
.xdata$x:00000520 ; ===========================================================================
.xdata$x:00000520
.xdata$x:00000520 ; Segment type: Pure data
.xdata$x:00000520 ; Segment permissions: Read
.xdata$x:00000520 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000520                 assume cs:_xdata$x
.xdata$x:00000520                 ;org 520h
.xdata$x:00000520 ; COMDAT (pick any)
.xdata$x:00000520                 public __CTA2?AUCInBufferException@@
.xdata$x:00000520 __CTA2?AUCInBufferException@@ db    2   ; DATA XREF: .xdata$x:0000051Co
.xdata$x:00000521                 db    0
.xdata$x:00000522                 db    0
.xdata$x:00000523                 db    0
.xdata$x:00000524                 dd offset __CT??_R0?AUCInBufferException@@@84
.xdata$x:00000528                 dd offset __CT??_R0?AUCSystemException@@@84
.xdata$x:00000528 _xdata$x        ends
.xdata$x:00000528
.xdata$x:0000052C ; ===========================================================================
.xdata$x:0000052C
.xdata$x:0000052C ; Segment type: Pure data
.xdata$x:0000052C ; Segment permissions: Read
.xdata$x:0000052C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000052C                 assume cs:_xdata$x
.xdata$x:0000052C                 ;org 52Ch
.xdata$x:0000052C ; COMDAT (pick any)
.xdata$x:0000052C                 public __CT??_R0?AUCInBufferException@@@84
.xdata$x:0000052C __CT??_R0?AUCInBufferException@@@84 db    0
.xdata$x:0000052C                                         ; DATA XREF: .xdata$x:00000524o
.xdata$x:0000052D                 db    0
.xdata$x:0000052E                 db    0
.xdata$x:0000052F                 db    0
.xdata$x:00000530                 dd offset ??_R0?AUCInBufferException@@@8 ; CInBufferException `RTTI Type Descriptor'
.xdata$x:00000534                 align 8
.xdata$x:00000538                 db 0FFh
.xdata$x:00000539                 db 0FFh
.xdata$x:0000053A                 db 0FFh
.xdata$x:0000053B                 db 0FFh
.xdata$x:0000053C                 db    0
.xdata$x:0000053D                 db    0
.xdata$x:0000053E                 db    0
.xdata$x:0000053F                 db    0
.xdata$x:00000540                 db    4
.xdata$x:00000541                 db    0
.xdata$x:00000542                 db    0
.xdata$x:00000543                 db    0
.xdata$x:00000544                 db    0
.xdata$x:00000545                 db    0
.xdata$x:00000546                 db    0
.xdata$x:00000547                 db    0
.xdata$x:00000547 _xdata$x        ends
.xdata$x:00000547
.data:00000548 ; ===========================================================================
.data:00000548
.data:00000548 ; Segment type: Pure data
.data:00000548 ; Segment permissions: Read/Write
.data:00000548 _data           segment dword public 'DATA' use32
.data:00000548                 assume cs:_data
.data:00000548                 ;org 548h
.data:00000548 ; COMDAT (pick any)
.data:00000548                 public ??_R0?AUCInBufferException@@@8
.data:00000548 ; struct CInBufferException `RTTI Type Descriptor'
.data:00000548 ??_R0?AUCInBufferException@@@8 dd offset ??_7type_info@@6B@
.data:00000548                                         ; DATA XREF: .xdata$x:00000530o
.data:00000548                                         ; const type_info::`vftable'
.data:0000054C                 align 10h
.data:00000550 a_?aucinbuffere db '.?AUCInBufferException@@',0
.data:00000569                 align 4
.data:00000569 _data           ends
.data:00000569
.xdata$x:0000056C ; ===========================================================================
.xdata$x:0000056C
.xdata$x:0000056C ; Segment type: Pure data
.xdata$x:0000056C ; Segment permissions: Read
.xdata$x:0000056C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000056C                 assume cs:_xdata$x
.xdata$x:0000056C                 ;org 56Ch
.xdata$x:0000056C ; COMDAT (pick any)
.xdata$x:0000056C                 public __CT??_R0?AUCSystemException@@@84
.xdata$x:0000056C __CT??_R0?AUCSystemException@@@84 db    0 ; DATA XREF: .xdata$x:00000528o
.xdata$x:0000056D                 db    0
.xdata$x:0000056E                 db    0
.xdata$x:0000056F                 db    0
.xdata$x:00000570                 dd offset ??_R0?AUCSystemException@@@8 ; CSystemException `RTTI Type Descriptor'
.xdata$x:00000574                 align 8
.xdata$x:00000578                 db 0FFh
.xdata$x:00000579                 db 0FFh
.xdata$x:0000057A                 db 0FFh
.xdata$x:0000057B                 db 0FFh
.xdata$x:0000057C                 db    0
.xdata$x:0000057D                 db    0
.xdata$x:0000057E                 db    0
.xdata$x:0000057F                 db    0
.xdata$x:00000580                 db    4
.xdata$x:00000581                 db    0
.xdata$x:00000582                 db    0
.xdata$x:00000583                 db    0
.xdata$x:00000584                 db    0
.xdata$x:00000585                 db    0
.xdata$x:00000586                 db    0
.xdata$x:00000587                 db    0
.xdata$x:00000587 _xdata$x        ends
.xdata$x:00000587
.data:00000588 ; ===========================================================================
.data:00000588
.data:00000588 ; Segment type: Pure data
.data:00000588 ; Segment permissions: Read/Write
.data:00000588 _data           segment dword public 'DATA' use32
.data:00000588                 assume cs:_data
.data:00000588                 ;org 588h
.data:00000588 ; COMDAT (pick any)
.data:00000588                 public ??_R0?AUCSystemException@@@8
.data:00000588 ; struct CSystemException `RTTI Type Descriptor'
.data:00000588 ??_R0?AUCSystemException@@@8 dd offset ??_7type_info@@6B@
.data:00000588                                         ; DATA XREF: .xdata$x:00000570o
.data:00000588                                         ; const type_info::`vftable'
.data:0000058C                 align 10h
.data:00000590 a_?aucsystemexc db '.?AUCSystemException@@',0
.data:000005A7                 align 4
.data:000005A7 _data           ends
.data:000005A7
.text:000005A8 ; ===========================================================================
.text:000005A8
.text:000005A8 ; Segment type: Pure code
.text:000005A8 ; Segment permissions: Read/Execute
.text:000005A8 _text           segment para public 'CODE' use32
.text:000005A8                 assume cs:_text
.text:000005A8                 ;org 5A8h
.text:000005A8 ; COMDAT (pick any)
.text:000005A8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000005A8
.text:000005A8 ; =============== S U B R O U T I N E =======================================
.text:000005A8
.text:000005A8 ; Attributes: bp-based frame
.text:000005A8
.text:000005A8 ; _DWORD __thiscall CInBufferException::CInBufferException(CInBufferException *this, __int32)
.text:000005A8                 public ??0CInBufferException@@QAE@J@Z
.text:000005A8 ??0CInBufferException@@QAE@J@Z proc near
.text:000005A8                                         ; CODE XREF: CInBufferBase::ReadBlock(void)+ACp
.text:000005A8
.text:000005A8 var_4           = dword ptr -4
.text:000005A8 arg_0           = dword ptr  8
.text:000005A8
.text:000005A8                 push    ebp
.text:000005A9                 mov     ebp, esp
.text:000005AB                 push    ecx
.text:000005AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005B3                 mov     [ebp+var_4], ecx
.text:000005B6                 mov     eax, [ebp+arg_0]
.text:000005B9                 push    eax             ; __int32
.text:000005BA                 mov     ecx, [ebp+var_4] ; this
.text:000005BD                 call    ??0CSystemException@@QAE@J@Z ; CSystemException::CSystemException(long)
.text:000005C2                 mov     eax, [ebp+var_4]
.text:000005C5                 add     esp, 4
.text:000005C8                 cmp     ebp, esp
.text:000005CA                 call    __RTC_CheckEsp
.text:000005CF                 mov     esp, ebp
.text:000005D1                 pop     ebp
.text:000005D2                 retn    4
.text:000005D2 ??0CInBufferException@@QAE@J@Z endp
.text:000005D2
.text:000005D2 ; ---------------------------------------------------------------------------
.text:000005D5                 align 4
.text:000005D5 _text           ends
.text:000005D5
.text:000005D8 ; ===========================================================================
.text:000005D8
.text:000005D8 ; Segment type: Pure code
.text:000005D8 ; Segment permissions: Read/Execute
.text:000005D8 _text           segment para public 'CODE' use32
.text:000005D8                 assume cs:_text
.text:000005D8                 ;org 5D8h
.text:000005D8 ; COMDAT (pick any)
.text:000005D8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000005D8
.text:000005D8 ; =============== S U B R O U T I N E =======================================
.text:000005D8
.text:000005D8 ; Attributes: bp-based frame
.text:000005D8
.text:000005D8 ; _DWORD __thiscall CSystemException::CSystemException(CSystemException *this, __int32)
.text:000005D8                 public ??0CSystemException@@QAE@J@Z
.text:000005D8 ??0CSystemException@@QAE@J@Z proc near  ; CODE XREF: CInBufferException::CInBufferException(long)+15p
.text:000005D8
.text:000005D8 var_4           = dword ptr -4
.text:000005D8 arg_0           = dword ptr  8
.text:000005D8
.text:000005D8                 push    ebp
.text:000005D9                 mov     ebp, esp
.text:000005DB                 push    ecx
.text:000005DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005E3                 mov     [ebp+var_4], ecx
.text:000005E6                 mov     eax, [ebp+var_4]
.text:000005E9                 mov     ecx, [ebp+arg_0]
.text:000005EC                 mov     [eax], ecx
.text:000005EE                 mov     eax, [ebp+var_4]
.text:000005F1                 mov     esp, ebp
.text:000005F3                 pop     ebp
.text:000005F4                 retn    4
.text:000005F4 ??0CSystemException@@QAE@J@Z endp
.text:000005F4
.text:000005F4 _text           ends
.text:000005F4
UNDEF:00000600 ; ===========================================================================
UNDEF:00000600
UNDEF:00000600 ; Segment type: Externs
UNDEF:00000600 ; UNDEF
UNDEF:00000600                 extrn __RTC_Shutdown:near
UNDEF:00000600                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000604                 extrn __RTC_InitBase:near
UNDEF:00000604                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000608 ; __stdcall MidAlloc(x)
UNDEF:00000608                 extrn _MidAlloc@4:near  ; CODE XREF: CInBuffer::Create(uint)+58p
UNDEF:0000060C                 extrn __RTC_CheckEsp:near
UNDEF:0000060C                                         ; CODE XREF: CInBuffer::Create(uint)+74p
UNDEF:0000060C                                         ; CInBuffer::Free(void)+29p ...
UNDEF:00000610 ; __stdcall MidFree(x)
UNDEF:00000610                 extrn _MidFree@4:near   ; CODE XREF: CInBuffer::Free(void)+15p
UNDEF:00000614 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000614                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000614                                         ; CODE XREF: CInBufferBase::ReadBlock(void)+F9p
UNDEF:00000618 ; __stdcall _CxxThrowException(x, x)
UNDEF:00000618                 extrn __CxxThrowException@8:near
UNDEF:00000618                                         ; CODE XREF: CInBufferBase::ReadBlock(void)+BFp
UNDEF:0000061C ; const type_info::`vftable'
UNDEF:0000061C                 extrn ??_7type_info@@6B@:near
UNDEF:0000061C                                         ; DATA XREF: .data:CInBufferException `RTTI Type Descriptor'o
UNDEF:0000061C                                         ; .data:CSystemException `RTTI Type Descriptor'o
UNDEF:0000061C
UNDEF:0000061C
UNDEF:0000061C                 end