.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : E3E2F5132BAAE4C52CFBD86F5767B9C6
.text:00000000 ; Input CRC32 : BAD8407A
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Ppmd7Enc.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __stdcall Ppmd7z_RangeEnc_Init(x)
.text:00000000                 public _Ppmd7z_RangeEnc_Init@4
.text:00000000 _Ppmd7z_RangeEnc_Init@4 proc near
.text:00000000
.text:00000000 arg_0           = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 mov     eax, [ebp+arg_0]
.text:00000006                 mov     dword ptr [eax], 0
.text:0000000C                 mov     dword ptr [eax+4], 0
.text:00000013                 mov     ecx, [ebp+arg_0]
.text:00000016                 mov     dword ptr [ecx+8], 0FFFFFFFFh
.text:0000001D                 mov     edx, [ebp+arg_0]
.text:00000020                 mov     byte ptr [edx+0Ch], 0
.text:00000024                 mov     eax, [ebp+arg_0]
.text:00000027                 mov     dword ptr [eax+10h], 1
.text:0000002E                 mov     dword ptr [eax+14h], 0
.text:00000035                 pop     ebp
.text:00000036                 retn    4
.text:00000036 _Ppmd7z_RangeEnc_Init@4 endp
.text:00000036
.text:00000036 ; ---------------------------------------------------------------------------
.text:00000039                 align 10h
.text:00000040
.text:00000040 ; =============== S U B R O U T I N E =======================================
.text:00000040
.text:00000040 ; Attributes: bp-based frame
.text:00000040
.text:00000040 ; __stdcall Ppmd7z_RangeEnc_FlushData(x)
.text:00000040                 public _Ppmd7z_RangeEnc_FlushData@4
.text:00000040 _Ppmd7z_RangeEnc_FlushData@4 proc near
.text:00000040
.text:00000040 var_4           = dword ptr -4
.text:00000040 arg_0           = dword ptr  8
.text:00000040
.text:00000040                 push    ebp
.text:00000041                 mov     ebp, esp
.text:00000043                 push    ecx
.text:00000044                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000004B                 mov     [ebp+var_4], 0
.text:00000052                 jmp     short loc_5D
.text:00000054 ; ---------------------------------------------------------------------------
.text:00000054
.text:00000054 loc_54:                                 ; CODE XREF: Ppmd7z_RangeEnc_FlushData(x)+2Cj
.text:00000054                 mov     eax, [ebp+var_4]
.text:00000057                 add     eax, 1
.text:0000005A                 mov     [ebp+var_4], eax
.text:0000005D
.text:0000005D loc_5D:                                 ; CODE XREF: Ppmd7z_RangeEnc_FlushData(x)+12j
.text:0000005D                 cmp     [ebp+var_4], 5
.text:00000061                 jnb     short loc_6E
.text:00000063                 mov     ecx, [ebp+arg_0]
.text:00000066                 push    ecx
.text:00000067                 call    _RangeEnc_ShiftLow@4 ; RangeEnc_ShiftLow(x)
.text:0000006C                 jmp     short loc_54
.text:0000006E ; ---------------------------------------------------------------------------
.text:0000006E
.text:0000006E loc_6E:                                 ; CODE XREF: Ppmd7z_RangeEnc_FlushData(x)+21j
.text:0000006E                 add     esp, 4
.text:00000071                 cmp     ebp, esp
.text:00000073                 call    __RTC_CheckEsp
.text:00000078                 mov     esp, ebp
.text:0000007A                 pop     ebp
.text:0000007B                 retn    4
.text:0000007B _Ppmd7z_RangeEnc_FlushData@4 endp
.text:0000007B
.text:0000007B ; ---------------------------------------------------------------------------
.text:0000007E                 align 10h
.text:00000080
.text:00000080 ; =============== S U B R O U T I N E =======================================
.text:00000080
.text:00000080 ; Attributes: bp-based frame
.text:00000080
.text:00000080 ; __stdcall RangeEnc_ShiftLow(x)
.text:00000080 _RangeEnc_ShiftLow@4 proc near          ; CODE XREF: Ppmd7z_RangeEnc_FlushData(x)+27p
.text:00000080                                         ; RangeEnc_Encode(x,x,x,x)+6Ap ...
.text:00000080
.text:00000080 var_C           = dword ptr -0Ch
.text:00000080 var_8           = dword ptr -8
.text:00000080 var_4           = dword ptr -4
.text:00000080 arg_0           = dword ptr  8
.text:00000080
.text:00000080                 push    ebp
.text:00000081                 mov     ebp, esp
.text:00000083                 sub     esp, 0Ch
.text:00000086                 push    esi
.text:00000087                 push    edi
.text:00000088                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000008F                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000096                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000009D                 mov     eax, [ebp+arg_0]
.text:000000A0                 cmp     dword ptr [eax], 0FF000000h
.text:000000A6                 jb      short loc_BB
.text:000000A8                 mov     ecx, [ebp+arg_0]
.text:000000AB                 mov     eax, [ecx]
.text:000000AD                 mov     edx, [ecx+4]
.text:000000B0                 mov     cl, 20h ; ' '
.text:000000B2                 call    __aullshr
.text:000000B7                 test    eax, eax
.text:000000B9                 jz      short loc_135
.text:000000BB
.text:000000BB loc_BB:                                 ; CODE XREF: RangeEnc_ShiftLow(x)+26j
.text:000000BB                 mov     edx, [ebp+arg_0]
.text:000000BE                 mov     al, [edx+0Ch]
.text:000000C1                 mov     byte ptr [ebp+var_4+3], al
.text:000000C4
.text:000000C4 loc_C4:                                 ; CODE XREF: RangeEnc_ShiftLow(x)+A5j
.text:000000C4                 movzx   esi, byte ptr [ebp+var_4+3]
.text:000000C8                 mov     ecx, [ebp+arg_0]
.text:000000CB                 mov     eax, [ecx]
.text:000000CD                 mov     edx, [ecx+4]
.text:000000D0                 mov     cl, 20h ; ' '
.text:000000D2                 call    __aullshr
.text:000000D7                 movzx   edx, al
.text:000000DA                 add     esi, edx
.text:000000DC                 mov     edi, esp
.text:000000DE                 push    esi
.text:000000DF                 mov     eax, [ebp+arg_0]
.text:000000E2                 mov     ecx, [eax+18h]
.text:000000E5                 push    ecx
.text:000000E6                 mov     edx, [ebp+arg_0]
.text:000000E9                 mov     eax, [edx+18h]
.text:000000EC                 mov     ecx, [eax]
.text:000000EE                 call    ecx
.text:000000F0                 cmp     edi, esp
.text:000000F2                 call    __RTC_CheckEsp
.text:000000F7                 mov     byte ptr [ebp+var_4+3], 0FFh
.text:000000FB                 mov     edx, [ebp+arg_0]
.text:000000FE                 mov     eax, [edx+10h]
.text:00000101                 sub     eax, 1
.text:00000104                 mov     [ebp+var_C], eax
.text:00000107                 mov     ecx, [edx+14h]
.text:0000010A                 sbb     ecx, 0
.text:0000010D                 mov     [ebp+var_8], ecx
.text:00000110                 mov     edx, [ebp+arg_0]
.text:00000113                 mov     eax, [ebp+var_C]
.text:00000116                 mov     [edx+10h], eax
.text:00000119                 mov     ecx, [ebp+var_8]
.text:0000011C                 mov     [edx+14h], ecx
.text:0000011F                 mov     edx, [ebp+var_C]
.text:00000122                 or      edx, [ebp+var_8]
.text:00000125                 jnz     short loc_C4
.text:00000127                 mov     eax, [ebp+arg_0]
.text:0000012A                 mov     ecx, [eax]
.text:0000012C                 shr     ecx, 18h
.text:0000012F                 mov     edx, [ebp+arg_0]
.text:00000132                 mov     [edx+0Ch], cl
.text:00000135
.text:00000135 loc_135:                                ; CODE XREF: RangeEnc_ShiftLow(x)+39j
.text:00000135                 mov     eax, [ebp+arg_0]
.text:00000138                 mov     ecx, [eax+10h]
.text:0000013B                 add     ecx, 1
.text:0000013E                 mov     edx, [eax+14h]
.text:00000141                 adc     edx, 0
.text:00000144                 mov     eax, [ebp+arg_0]
.text:00000147                 mov     [eax+10h], ecx
.text:0000014A                 mov     [eax+14h], edx
.text:0000014D                 mov     ecx, [ebp+arg_0]
.text:00000150                 mov     edx, [ecx]
.text:00000152                 shl     edx, 8
.text:00000155                 xor     eax, eax
.text:00000157                 mov     ecx, [ebp+arg_0]
.text:0000015A                 mov     [ecx], edx
.text:0000015C                 mov     [ecx+4], eax
.text:0000015F                 pop     edi
.text:00000160                 pop     esi
.text:00000161                 add     esp, 0Ch
.text:00000164                 cmp     ebp, esp
.text:00000166                 call    __RTC_CheckEsp
.text:0000016B                 mov     esp, ebp
.text:0000016D                 pop     ebp
.text:0000016E                 retn    4
.text:0000016E _RangeEnc_ShiftLow@4 endp
.text:0000016E
.text:0000016E ; ---------------------------------------------------------------------------
.text:00000171                 align 10h
.text:00000180
.text:00000180 ; =============== S U B R O U T I N E =======================================
.text:00000180
.text:00000180 ; Attributes: bp-based frame
.text:00000180
.text:00000180 ; __stdcall Ppmd7_EncodeSymbol(x, x, x)
.text:00000180                 public _Ppmd7_EncodeSymbol@12
.text:00000180 _Ppmd7_EncodeSymbol@12 proc near
.text:00000180
.text:00000180 var_15C         = byte ptr -15Ch
.text:00000180 var_159         = byte ptr -159h
.text:00000180 var_158         = dword ptr -158h
.text:00000180 var_154         = dword ptr -154h
.text:00000180 var_150         = dword ptr -150h
.text:00000180 var_14C         = dword ptr -14Ch
.text:00000180 var_148         = dword ptr -148h
.text:00000180 var_144         = dword ptr -144h
.text:00000180 var_140         = dword ptr -140h
.text:00000180 var_13C         = dword ptr -13Ch
.text:00000180 var_138         = dword ptr -138h
.text:00000180 var_130         = dword ptr -130h
.text:00000180 var_128         = dword ptr -128h
.text:00000180 var_124         = dword ptr -124h
.text:00000180 var_120         = dword ptr -120h
.text:00000180 var_11C         = dword ptr -11Ch
.text:00000180 var_118         = dword ptr -118h
.text:00000180 var_114         = dword ptr -114h
.text:00000180 var_110         = dword ptr -110h
.text:00000180 var_108         = dword ptr -108h
.text:00000180 var_104         = dword ptr -104h
.text:00000180 var_100         = dword ptr -100h
.text:00000180 var_FC          = dword ptr -0FCh
.text:00000180 var_F8          = dword ptr -0F8h
.text:00000180 var_F4          = dword ptr -0F4h
.text:00000180 var_F0          = dword ptr -0F0h
.text:00000180 var_EC          = dword ptr -0ECh
.text:00000180 var_4           = dword ptr -4
.text:00000180 arg_0           = dword ptr  8
.text:00000180 arg_4           = dword ptr  0Ch
.text:00000180 arg_8           = dword ptr  10h
.text:00000180
.text:00000180                 push    ebp
.text:00000181                 mov     ebp, esp
.text:00000183                 sub     esp, 15Ch
.text:00000189                 push    esi
.text:0000018A                 push    edi
.text:0000018B                 lea     edi, [ebp+var_15C]
.text:00000191                 mov     ecx, 57h ; 'W'
.text:00000196                 mov     eax, 0CCCCCCCCh
.text:0000019B                 rep stosd
.text:0000019D                 mov     eax, dword ptr ds:___security_cookie
.text:000001A2                 xor     eax, ebp
.text:000001A4                 mov     [ebp+var_4], eax
.text:000001A7                 mov     eax, [ebp+arg_0]
.text:000001AA                 mov     ecx, [eax]
.text:000001AC                 movzx   edx, word ptr [ecx]
.text:000001AF                 cmp     edx, 1
.text:000001B2                 jz      loc_411
.text:000001B8                 mov     eax, [ebp+arg_0]
.text:000001BB                 mov     ecx, [eax]
.text:000001BD                 mov     edx, [ecx+4]
.text:000001C0                 mov     [ebp+var_110], edx
.text:000001C6                 mov     eax, [ebp+var_110]
.text:000001CC                 movzx   ecx, byte ptr [eax]
.text:000001CF                 cmp     ecx, [ebp+arg_8]
.text:000001D2                 jnz     short loc_20E
.text:000001D4                 mov     edx, [ebp+arg_0]
.text:000001D7                 mov     eax, [edx]
.text:000001D9                 movzx   ecx, word ptr [eax+2]
.text:000001DD                 push    ecx
.text:000001DE                 mov     edx, [ebp+var_110]
.text:000001E4                 movzx   eax, byte ptr [edx+1]
.text:000001E8                 push    eax
.text:000001E9                 push    0
.text:000001EB                 mov     ecx, [ebp+arg_4]
.text:000001EE                 push    ecx
.text:000001EF                 call    _RangeEnc_Encode@16 ; RangeEnc_Encode(x,x,x,x)
.text:000001F4                 mov     edx, [ebp+arg_0]
.text:000001F7                 mov     eax, [ebp+var_110]
.text:000001FD                 mov     [edx+8], eax
.text:00000200                 mov     ecx, [ebp+arg_0]
.text:00000203                 push    ecx
.text:00000204                 call    _Ppmd7_Update1_0@4 ; Ppmd7_Update1_0(x)
.text:00000209                 jmp     loc_8A3
.text:0000020E ; ---------------------------------------------------------------------------
.text:0000020E
.text:0000020E loc_20E:                                ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+52j
.text:0000020E                 mov     edx, [ebp+arg_0]
.text:00000211                 mov     dword ptr [edx+14h], 0
.text:00000218                 mov     eax, [ebp+var_110]
.text:0000021E                 movzx   ecx, byte ptr [eax+1]
.text:00000222                 mov     [ebp+var_114], ecx
.text:00000228                 mov     edx, [ebp+arg_0]
.text:0000022B                 mov     eax, [edx]
.text:0000022D                 movzx   ecx, word ptr [eax]
.text:00000230                 sub     ecx, 1
.text:00000233                 mov     [ebp+var_118], ecx
.text:00000239
.text:00000239 loc_239:                                ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+13Aj
.text:00000239                 mov     edx, [ebp+var_110]
.text:0000023F                 add     edx, 6
.text:00000242                 mov     [ebp+var_110], edx
.text:00000248                 mov     eax, [ebp+var_110]
.text:0000024E                 movzx   ecx, byte ptr [eax]
.text:00000251                 cmp     ecx, [ebp+arg_8]
.text:00000254                 jnz     short loc_295
.text:00000256                 mov     edx, [ebp+arg_0]
.text:00000259                 mov     eax, [edx]
.text:0000025B                 movzx   ecx, word ptr [eax+2]
.text:0000025F                 push    ecx
.text:00000260                 mov     edx, [ebp+var_110]
.text:00000266                 movzx   eax, byte ptr [edx+1]
.text:0000026A                 push    eax
.text:0000026B                 mov     ecx, [ebp+var_114]
.text:00000271                 push    ecx
.text:00000272                 mov     edx, [ebp+arg_4]
.text:00000275                 push    edx
.text:00000276                 call    _RangeEnc_Encode@16 ; RangeEnc_Encode(x,x,x,x)
.text:0000027B                 mov     eax, [ebp+arg_0]
.text:0000027E                 mov     ecx, [ebp+var_110]
.text:00000284                 mov     [eax+8], ecx
.text:00000287                 mov     edx, [ebp+arg_0]
.text:0000028A                 push    edx
.text:0000028B                 call    _Ppmd7_Update1@4 ; Ppmd7_Update1(x)
.text:00000290                 jmp     loc_8A3
.text:00000295 ; ---------------------------------------------------------------------------
.text:00000295
.text:00000295 loc_295:                                ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+D4j
.text:00000295                 mov     eax, [ebp+var_110]
.text:0000029B                 movzx   ecx, byte ptr [eax+1]
.text:0000029F                 add     ecx, [ebp+var_114]
.text:000002A5                 mov     [ebp+var_114], ecx
.text:000002AB                 mov     edx, [ebp+var_118]
.text:000002B1                 sub     edx, 1
.text:000002B4                 mov     [ebp+var_118], edx
.text:000002BA                 jnz     loc_239
.text:000002C0                 mov     eax, [ebp+arg_0]
.text:000002C3                 mov     ecx, [eax+8]
.text:000002C6                 movzx   edx, byte ptr [ecx]
.text:000002C9                 mov     eax, [ebp+arg_0]
.text:000002CC                 movzx   ecx, byte ptr [eax+edx+388h]
.text:000002D4                 mov     edx, [ebp+arg_0]
.text:000002D7                 mov     [edx+1Ch], ecx
.text:000002DA                 mov     [ebp+var_11C], 0
.text:000002E4                 jmp     short loc_2F5
.text:000002E6 ; ---------------------------------------------------------------------------
.text:000002E6
.text:000002E6 loc_2E6:                                ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+20Aj
.text:000002E6                 mov     eax, [ebp+var_11C]
.text:000002EC                 add     eax, 8
.text:000002EF                 mov     [ebp+var_11C], eax
.text:000002F5
.text:000002F5 loc_2F5:                                ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+164j
.text:000002F5                 cmp     [ebp+var_11C], 40h ; '@'
.text:000002FC                 jnb     loc_38F
.text:00000302                 mov     ecx, [ebp+var_11C]
.text:00000308                 mov     [ebp+ecx*4+var_108], 0FFFFFFFFh
.text:00000313                 mov     edx, [ebp+var_11C]
.text:00000319                 mov     [ebp+edx*4+var_104], 0FFFFFFFFh
.text:00000324                 mov     eax, [ebp+var_11C]
.text:0000032A                 mov     [ebp+eax*4+var_100], 0FFFFFFFFh
.text:00000335                 mov     ecx, [ebp+var_11C]
.text:0000033B                 mov     [ebp+ecx*4+var_FC], 0FFFFFFFFh
.text:00000346                 mov     edx, [ebp+var_11C]
.text:0000034C                 mov     [ebp+edx*4+var_F8], 0FFFFFFFFh
.text:00000357                 mov     eax, [ebp+var_11C]
.text:0000035D                 mov     [ebp+eax*4+var_F4], 0FFFFFFFFh
.text:00000368                 mov     ecx, [ebp+var_11C]
.text:0000036E                 mov     [ebp+ecx*4+var_F0], 0FFFFFFFFh
.text:00000379                 mov     edx, [ebp+var_11C]
.text:0000037F                 mov     [ebp+edx*4+var_EC], 0FFFFFFFFh
.text:0000038A                 jmp     loc_2E6
.text:0000038F ; ---------------------------------------------------------------------------
.text:0000038F
.text:0000038F loc_38F:                                ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+17Cj
.text:0000038F                 mov     eax, [ebp+var_110]
.text:00000395                 movzx   ecx, byte ptr [eax]
.text:00000398                 mov     byte ptr [ebp+ecx+var_108], 0
.text:000003A0                 mov     edx, [ebp+arg_0]
.text:000003A3                 mov     eax, [edx]
.text:000003A5                 movzx   ecx, word ptr [eax]
.text:000003A8                 sub     ecx, 1
.text:000003AB                 mov     [ebp+var_118], ecx
.text:000003B1
.text:000003B1 loc_3B1:                                ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+260j
.text:000003B1                 mov     edx, [ebp+var_110]
.text:000003B7                 sub     edx, 6
.text:000003BA                 mov     [ebp+var_110], edx
.text:000003C0                 mov     eax, [ebp+var_110]
.text:000003C6                 movzx   ecx, byte ptr [eax]
.text:000003C9                 mov     byte ptr [ebp+ecx+var_108], 0
.text:000003D1                 mov     edx, [ebp+var_118]
.text:000003D7                 sub     edx, 1
.text:000003DA                 mov     [ebp+var_118], edx
.text:000003E0                 jnz     short loc_3B1
.text:000003E2                 mov     eax, [ebp+arg_0]
.text:000003E5                 mov     ecx, [eax]
.text:000003E7                 movzx   edx, word ptr [ecx+2]
.text:000003EB                 push    edx
.text:000003EC                 mov     eax, [ebp+arg_0]
.text:000003EF                 mov     ecx, [eax]
.text:000003F1                 movzx   edx, word ptr [ecx+2]
.text:000003F5                 sub     edx, [ebp+var_114]
.text:000003FB                 push    edx
.text:000003FC                 mov     eax, [ebp+var_114]
.text:00000402                 push    eax
.text:00000403                 mov     ecx, [ebp+arg_4]
.text:00000406                 push    ecx
.text:00000407                 call    _RangeEnc_Encode@16 ; RangeEnc_Encode(x,x,x,x)
.text:0000040C                 jmp     loc_638
.text:00000411 ; ---------------------------------------------------------------------------
.text:00000411
.text:00000411 loc_411:                                ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+32j
.text:00000411                 mov     edx, [ebp+arg_0]
.text:00000414                 mov     eax, [edx+8]
.text:00000417                 movzx   ecx, byte ptr [eax]
.text:0000041A                 mov     edx, [ebp+arg_0]
.text:0000041D                 movzx   eax, byte ptr [edx+ecx+388h]
.text:00000425                 mov     [ebp+var_158], eax
.text:0000042B                 mov     ecx, [ebp+arg_0]
.text:0000042E                 mov     edx, [ebp+var_158]
.text:00000434                 mov     [ecx+1Ch], edx
.text:00000437                 mov     eax, [ebp+arg_0]
.text:0000043A                 mov     ecx, [eax+20h]
.text:0000043D                 sar     ecx, 1Ah
.text:00000440                 and     ecx, 20h
.text:00000443                 mov     edx, [ebp+arg_0]
.text:00000446                 mov     eax, [edx]
.text:00000448                 movzx   edx, byte ptr [eax+2]
.text:0000044C                 mov     eax, [ebp+arg_0]
.text:0000044F                 movzx   edx, byte ptr [eax+edx+388h]
.text:00000457                 mov     eax, [ebp+arg_0]
.text:0000045A                 mov     eax, [eax]
.text:0000045C                 mov     eax, [eax+8]
.text:0000045F                 movzx   eax, word ptr [eax]
.text:00000462                 mov     esi, [ebp+arg_0]
.text:00000465                 movzx   eax, byte ptr [esi+eax+287h]
.text:0000046D                 mov     esi, [ebp+arg_0]
.text:00000470                 mov     esi, [esi+14h]
.text:00000473                 add     esi, eax
.text:00000475                 add     esi, [ebp+var_158]
.text:0000047B                 lea     edx, [esi+edx*2]
.text:0000047E                 add     edx, ecx
.text:00000480                 mov     eax, [ebp+arg_0]
.text:00000483                 mov     ecx, [eax]
.text:00000485                 movzx   eax, byte ptr [ecx+3]
.text:00000489                 sub     eax, 1
.text:0000048C                 shl     eax, 7
.text:0000048F                 mov     ecx, [ebp+arg_0]
.text:00000492                 lea     eax, [ecx+eax+0ACCh]
.text:00000499                 lea     ecx, [eax+edx*2]
.text:0000049C                 mov     [ebp+var_120], ecx
.text:000004A2                 mov     edx, [ebp+arg_0]
.text:000004A5                 mov     eax, [edx]
.text:000004A7                 add     eax, 2
.text:000004AA                 mov     [ebp+var_124], eax
.text:000004B0                 mov     ecx, [ebp+var_124]
.text:000004B6                 movzx   edx, byte ptr [ecx]
.text:000004B9                 cmp     edx, [ebp+arg_8]
.text:000004BC                 jnz     short loc_519
.text:000004BE                 mov     eax, [ebp+var_120]
.text:000004C4                 movzx   ecx, word ptr [eax]
.text:000004C7                 push    ecx
.text:000004C8                 mov     edx, [ebp+arg_4]
.text:000004CB                 push    edx
.text:000004CC                 call    _RangeEnc_EncodeBit_0@8 ; RangeEnc_EncodeBit_0(x,x)
.text:000004D1                 mov     eax, [ebp+var_120]
.text:000004D7                 movzx   ecx, word ptr [eax]
.text:000004DA                 add     ecx, 80h ; 'Ç'
.text:000004E0                 mov     edx, [ebp+var_120]
.text:000004E6                 movzx   eax, word ptr [edx]
.text:000004E9                 add     eax, 20h ; ' '
.text:000004EC                 sar     eax, 7
.text:000004EF                 sub     ecx, eax
.text:000004F1                 mov     edx, [ebp+var_120]
.text:000004F7                 mov     [edx], cx
.text:000004FA                 mov     eax, [ebp+arg_0]
.text:000004FD                 mov     ecx, [ebp+var_124]
.text:00000503                 mov     [eax+8], ecx
.text:00000506                 mov     edx, [ebp+arg_0]
.text:00000509                 push    edx
.text:0000050A                 call    _Ppmd7_UpdateBin@4 ; Ppmd7_UpdateBin(x)
.text:0000050F                 jmp     loc_8A3
.text:00000514 ; ---------------------------------------------------------------------------
.text:00000514                 jmp     loc_638
.text:00000519 ; ---------------------------------------------------------------------------
.text:00000519
.text:00000519 loc_519:                                ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+33Cj
.text:00000519                 mov     eax, [ebp+var_120]
.text:0000051F                 movzx   ecx, word ptr [eax]
.text:00000522                 push    ecx
.text:00000523                 mov     edx, [ebp+arg_4]
.text:00000526                 push    edx
.text:00000527                 call    _RangeEnc_EncodeBit_1@8 ; RangeEnc_EncodeBit_1(x,x)
.text:0000052C                 mov     eax, [ebp+var_120]
.text:00000532                 movzx   ecx, word ptr [eax]
.text:00000535                 mov     edx, [ebp+var_120]
.text:0000053B                 movzx   eax, word ptr [edx]
.text:0000053E                 add     eax, 20h ; ' '
.text:00000541                 sar     eax, 7
.text:00000544                 sub     ecx, eax
.text:00000546                 mov     edx, [ebp+var_120]
.text:0000054C                 mov     [edx], cx
.text:0000054F                 mov     eax, [ebp+var_120]
.text:00000555                 movzx   ecx, word ptr [eax]
.text:00000558                 sar     ecx, 0Ah
.text:0000055B                 movzx   edx, byte ptr ds:_PPMD7_kExpEscape[ecx]
.text:00000562                 mov     eax, [ebp+arg_0]
.text:00000565                 mov     [eax+10h], edx
.text:00000568                 mov     [ebp+var_128], 0
.text:00000572                 jmp     short loc_583
.text:00000574 ; ---------------------------------------------------------------------------
.text:00000574
.text:00000574 loc_574:                                ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+498j
.text:00000574                 mov     ecx, [ebp+var_128]
.text:0000057A                 add     ecx, 8
.text:0000057D                 mov     [ebp+var_128], ecx
.text:00000583
.text:00000583 loc_583:                                ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+3F2j
.text:00000583                 cmp     [ebp+var_128], 40h ; '@'
.text:0000058A                 jnb     loc_61D
.text:00000590                 mov     edx, [ebp+var_128]
.text:00000596                 mov     [ebp+edx*4+var_108], 0FFFFFFFFh
.text:000005A1                 mov     eax, [ebp+var_128]
.text:000005A7                 mov     [ebp+eax*4+var_104], 0FFFFFFFFh
.text:000005B2                 mov     ecx, [ebp+var_128]
.text:000005B8                 mov     [ebp+ecx*4+var_100], 0FFFFFFFFh
.text:000005C3                 mov     edx, [ebp+var_128]
.text:000005C9                 mov     [ebp+edx*4+var_FC], 0FFFFFFFFh
.text:000005D4                 mov     eax, [ebp+var_128]
.text:000005DA                 mov     [ebp+eax*4+var_F8], 0FFFFFFFFh
.text:000005E5                 mov     ecx, [ebp+var_128]
.text:000005EB                 mov     [ebp+ecx*4+var_F4], 0FFFFFFFFh
.text:000005F6                 mov     edx, [ebp+var_128]
.text:000005FC                 mov     [ebp+edx*4+var_F0], 0FFFFFFFFh
.text:00000607                 mov     eax, [ebp+var_128]
.text:0000060D                 mov     [ebp+eax*4+var_EC], 0FFFFFFFFh
.text:00000618                 jmp     loc_574
.text:0000061D ; ---------------------------------------------------------------------------
.text:0000061D
.text:0000061D loc_61D:                                ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+40Aj
.text:0000061D                 mov     ecx, [ebp+var_124]
.text:00000623                 movzx   edx, byte ptr [ecx]
.text:00000626                 mov     byte ptr [ebp+edx+var_108], 0
.text:0000062E                 mov     eax, [ebp+arg_0]
.text:00000631                 mov     dword ptr [eax+14h], 0
.text:00000638
.text:00000638 loc_638:                                ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+28Cj
.text:00000638                                         ; Ppmd7_EncodeSymbol(x,x,x)+394j ...
.text:00000638                 mov     ecx, [ebp+arg_0]
.text:0000063B                 mov     edx, [ecx]
.text:0000063D                 movzx   eax, word ptr [edx]
.text:00000640                 mov     [ebp+var_148], eax
.text:00000646
.text:00000646 loc_646:                                ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+500j
.text:00000646                 mov     ecx, [ebp+arg_0]
.text:00000649                 mov     edx, [ecx+0Ch]
.text:0000064C                 add     edx, 1
.text:0000064F                 mov     eax, [ebp+arg_0]
.text:00000652                 mov     [eax+0Ch], edx
.text:00000655                 mov     ecx, [ebp+arg_0]
.text:00000658                 mov     edx, [ecx]
.text:0000065A                 cmp     dword ptr [edx+8], 0
.text:0000065E                 jnz     short loc_665
.text:00000660                 jmp     loc_8A3
.text:00000665 ; ---------------------------------------------------------------------------
.text:00000665
.text:00000665 loc_665:                                ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+4DEj
.text:00000665                 mov     eax, [ebp+arg_0]
.text:00000668                 mov     ecx, [eax]
.text:0000066A                 mov     edx, [ebp+arg_0]
.text:0000066D                 mov     eax, [ecx+8]
.text:00000670                 mov     [edx], eax
.text:00000672                 mov     ecx, [ebp+arg_0]
.text:00000675                 mov     edx, [ecx]
.text:00000677                 movzx   eax, word ptr [edx]
.text:0000067A                 cmp     eax, [ebp+var_148]
.text:00000680                 jz      short loc_646
.text:00000682                 lea     ecx, [ebp+var_130]
.text:00000688                 push    ecx
.text:00000689                 mov     edx, [ebp+var_148]
.text:0000068F                 push    edx
.text:00000690                 mov     eax, [ebp+arg_0]
.text:00000693                 push    eax
.text:00000694                 call    _Ppmd7_MakeEscFreq@12 ; Ppmd7_MakeEscFreq(x,x,x)
.text:00000699                 mov     [ebp+var_138], eax
.text:0000069F                 mov     ecx, [ebp+arg_0]
.text:000006A2                 mov     edx, [ecx]
.text:000006A4                 mov     eax, [edx+4]
.text:000006A7                 mov     [ebp+var_13C], eax
.text:000006AD                 mov     [ebp+var_140], 0
.text:000006B7                 mov     ecx, [ebp+arg_0]
.text:000006BA                 mov     edx, [ecx]
.text:000006BC                 movzx   eax, word ptr [edx]
.text:000006BF                 mov     [ebp+var_144], eax
.text:000006C5
.text:000006C5 loc_6C5:                                ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+6D6j
.text:000006C5                 mov     ecx, [ebp+var_13C]
.text:000006CB                 movzx   edx, byte ptr [ecx]
.text:000006CE                 mov     [ebp+var_14C], edx
.text:000006D4                 mov     eax, [ebp+var_14C]
.text:000006DA                 cmp     eax, [ebp+arg_8]
.text:000006DD                 jnz     loc_804
.text:000006E3                 mov     ecx, [ebp+var_140]
.text:000006E9                 mov     [ebp+var_150], ecx
.text:000006EF                 mov     edx, [ebp+var_13C]
.text:000006F5                 mov     [ebp+var_154], edx
.text:000006FB
.text:000006FB loc_6FB:                                ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+5C2j
.text:000006FB                 mov     eax, [ebp+var_13C]
.text:00000701                 movzx   ecx, byte ptr [eax+1]
.text:00000705                 mov     edx, [ebp+var_13C]
.text:0000070B                 movzx   eax, byte ptr [edx]
.text:0000070E                 movsx   edx, byte ptr [ebp+eax+var_108]
.text:00000716                 and     ecx, edx
.text:00000718                 add     ecx, [ebp+var_140]
.text:0000071E                 mov     [ebp+var_140], ecx
.text:00000724                 mov     eax, [ebp+var_13C]
.text:0000072A                 add     eax, 6
.text:0000072D                 mov     [ebp+var_13C], eax
.text:00000733                 mov     ecx, [ebp+var_144]
.text:00000739                 sub     ecx, 1
.text:0000073C                 mov     [ebp+var_144], ecx
.text:00000742                 jnz     short loc_6FB
.text:00000744                 mov     edx, [ebp+var_140]
.text:0000074A                 add     edx, [ebp+var_130]
.text:00000750                 push    edx
.text:00000751                 mov     eax, [ebp+var_154]
.text:00000757                 movzx   ecx, byte ptr [eax+1]
.text:0000075B                 push    ecx
.text:0000075C                 mov     edx, [ebp+var_150]
.text:00000762                 push    edx
.text:00000763                 mov     eax, [ebp+arg_4]
.text:00000766                 push    eax
.text:00000767                 call    _RangeEnc_Encode@16 ; RangeEnc_Encode(x,x,x,x)
.text:0000076C                 mov     ecx, [ebp+var_138]
.text:00000772                 movzx   edx, byte ptr [ecx+2]
.text:00000776                 cmp     edx, 7
.text:00000779                 jge     short loc_7EA
.text:0000077B                 mov     eax, [ebp+var_138]
.text:00000781                 mov     cl, [eax+3]
.text:00000784                 sub     cl, 1
.text:00000787                 mov     [ebp+var_159], cl
.text:0000078D                 mov     edx, [ebp+var_138]
.text:00000793                 mov     al, [ebp+var_159]
.text:00000799                 mov     [edx+3], al
.text:0000079C                 movzx   ecx, [ebp+var_159]
.text:000007A3                 test    ecx, ecx
.text:000007A5                 jnz     short loc_7EA
.text:000007A7                 mov     edx, [ebp+var_138]
.text:000007AD                 mov     ax, [edx]
.text:000007B0                 shl     ax, 1
.text:000007B3                 mov     ecx, [ebp+var_138]
.text:000007B9                 mov     [ecx], ax
.text:000007BC                 mov     edx, [ebp+var_138]
.text:000007C2                 movzx   ecx, byte ptr [edx+2]
.text:000007C6                 mov     eax, 3
.text:000007CB                 shl     eax, cl
.text:000007CD                 mov     ecx, [ebp+var_138]
.text:000007D3                 mov     [ecx+3], al
.text:000007D6                 mov     edx, [ebp+var_138]
.text:000007DC                 mov     al, [edx+2]
.text:000007DF                 add     al, 1
.text:000007E1                 mov     ecx, [ebp+var_138]
.text:000007E7                 mov     [ecx+2], al
.text:000007EA
.text:000007EA loc_7EA:                                ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+5F9j
.text:000007EA                                         ; Ppmd7_EncodeSymbol(x,x,x)+625j
.text:000007EA                 mov     edx, [ebp+arg_0]
.text:000007ED                 mov     eax, [ebp+var_154]
.text:000007F3                 mov     [edx+8], eax
.text:000007F6                 mov     ecx, [ebp+arg_0]
.text:000007F9                 push    ecx
.text:000007FA                 call    _Ppmd7_Update2@4 ; Ppmd7_Update2(x)
.text:000007FF                 jmp     loc_8A3
.text:00000804 ; ---------------------------------------------------------------------------
.text:00000804
.text:00000804 loc_804:                                ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+55Dj
.text:00000804                 mov     edx, [ebp+var_13C]
.text:0000080A                 movzx   eax, byte ptr [edx+1]
.text:0000080E                 mov     ecx, [ebp+var_14C]
.text:00000814                 movsx   edx, byte ptr [ebp+ecx+var_108]
.text:0000081C                 and     eax, edx
.text:0000081E                 add     eax, [ebp+var_140]
.text:00000824                 mov     [ebp+var_140], eax
.text:0000082A                 mov     eax, [ebp+var_14C]
.text:00000830                 mov     byte ptr [ebp+eax+var_108], 0
.text:00000838                 mov     ecx, [ebp+var_13C]
.text:0000083E                 add     ecx, 6
.text:00000841                 mov     [ebp+var_13C], ecx
.text:00000847                 mov     edx, [ebp+var_144]
.text:0000084D                 sub     edx, 1
.text:00000850                 mov     [ebp+var_144], edx
.text:00000856                 jnz     loc_6C5
.text:0000085C                 mov     eax, [ebp+var_140]
.text:00000862                 add     eax, [ebp+var_130]
.text:00000868                 push    eax
.text:00000869                 mov     ecx, [ebp+var_130]
.text:0000086F                 push    ecx
.text:00000870                 mov     edx, [ebp+var_140]
.text:00000876                 push    edx
.text:00000877                 mov     eax, [ebp+arg_4]
.text:0000087A                 push    eax
.text:0000087B                 call    _RangeEnc_Encode@16 ; RangeEnc_Encode(x,x,x,x)
.text:00000880                 mov     ecx, [ebp+var_138]
.text:00000886                 movzx   edx, word ptr [ecx]
.text:00000889                 add     edx, [ebp+var_140]
.text:0000088F                 add     edx, [ebp+var_130]
.text:00000895                 mov     eax, [ebp+var_138]
.text:0000089B                 mov     [eax], dx
.text:0000089E                 jmp     loc_638
.text:000008A3 ; ---------------------------------------------------------------------------
.text:000008A3
.text:000008A3 loc_8A3:                                ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+89j
.text:000008A3                                         ; Ppmd7_EncodeSymbol(x,x,x)+110j ...
.text:000008A3                 push    edx
.text:000008A4                 mov     ecx, ebp
.text:000008A6                 push    eax
.text:000008A7                 lea     edx, $LN38
.text:000008AD                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000008B2                 pop     eax
.text:000008B3                 pop     edx
.text:000008B4                 pop     edi
.text:000008B5                 pop     esi
.text:000008B6                 mov     ecx, [ebp+var_4]
.text:000008B9                 xor     ecx, ebp
.text:000008BB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000008C0                 add     esp, 15Ch
.text:000008C6                 cmp     ebp, esp
.text:000008C8                 call    __RTC_CheckEsp
.text:000008CD                 mov     esp, ebp
.text:000008CF                 pop     ebp
.text:000008D0                 retn    0Ch
.text:000008D0 _Ppmd7_EncodeSymbol@12 endp
.text:000008D0
.text:000008D0 ; ---------------------------------------------------------------------------
.text:000008D3                 align 4
.text:000008D4 $LN38           dd 2                    ; DATA XREF: Ppmd7_EncodeSymbol(x,x,x)+727o
.text:000008D8                 dd offset $LN37
.text:000008DC $LN37           dd 0FFFFFEF8h, 100h     ; DATA XREF: .text:000008D8o
.text:000008E4                 dd offset $LN35         ; "charMask"
.text:000008E8                 dd 0FFFFFED0h, 4
.text:000008F0                 dd offset $LN36         ; "escFreq"
.text:000008F4 $LN36           db 'escFreq',0          ; DATA XREF: .text:000008F0o
.text:000008FC $LN35           db 'charMask',0         ; DATA XREF: .text:000008E4o
.text:00000905                 align 10h
.text:00000910
.text:00000910 ; =============== S U B R O U T I N E =======================================
.text:00000910
.text:00000910 ; Attributes: bp-based frame
.text:00000910
.text:00000910 ; __stdcall RangeEnc_Encode(x, x, x, x)
.text:00000910 _RangeEnc_Encode@16 proc near           ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+6Fp
.text:00000910                                         ; Ppmd7_EncodeSymbol(x,x,x)+F6p ...
.text:00000910
.text:00000910 var_4           = dword ptr -4
.text:00000910 arg_0           = dword ptr  8
.text:00000910 arg_4           = dword ptr  0Ch
.text:00000910 arg_8           = dword ptr  10h
.text:00000910 arg_C           = dword ptr  14h
.text:00000910
.text:00000910                 push    ebp
.text:00000911                 mov     ebp, esp
.text:00000913                 push    ecx
.text:00000914                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000091B                 mov     eax, [ebp+arg_0]
.text:0000091E                 mov     eax, [eax+8]
.text:00000921                 xor     edx, edx
.text:00000923                 div     [ebp+arg_C]
.text:00000926                 mov     [ebp+var_4], eax
.text:00000929                 mov     ecx, [ebp+arg_0]
.text:0000092C                 mov     edx, [ebp+var_4]
.text:0000092F                 mov     [ecx+8], edx
.text:00000932                 mov     eax, [ebp+arg_4]
.text:00000935                 imul    eax, [ebp+var_4]
.text:00000939                 xor     ecx, ecx
.text:0000093B                 mov     edx, [ebp+arg_0]
.text:0000093E                 add     eax, [edx]
.text:00000940                 adc     ecx, [edx+4]
.text:00000943                 mov     edx, [ebp+arg_0]
.text:00000946                 mov     [edx], eax
.text:00000948                 mov     [edx+4], ecx
.text:0000094B                 mov     eax, [ebp+arg_0]
.text:0000094E                 mov     ecx, [eax+8]
.text:00000951                 imul    ecx, [ebp+arg_8]
.text:00000955                 mov     edx, [ebp+arg_0]
.text:00000958                 mov     [edx+8], ecx
.text:0000095B
.text:0000095B loc_95B:                                ; CODE XREF: RangeEnc_Encode(x,x,x,x)+6Fj
.text:0000095B                 mov     eax, [ebp+arg_0]
.text:0000095E                 cmp     dword ptr [eax+8], 1000000h
.text:00000965                 jnb     short loc_981
.text:00000967                 mov     ecx, [ebp+arg_0]
.text:0000096A                 mov     edx, [ecx+8]
.text:0000096D                 shl     edx, 8
.text:00000970                 mov     eax, [ebp+arg_0]
.text:00000973                 mov     [eax+8], edx
.text:00000976                 mov     ecx, [ebp+arg_0]
.text:00000979                 push    ecx
.text:0000097A                 call    _RangeEnc_ShiftLow@4 ; RangeEnc_ShiftLow(x)
.text:0000097F                 jmp     short loc_95B
.text:00000981 ; ---------------------------------------------------------------------------
.text:00000981
.text:00000981 loc_981:                                ; CODE XREF: RangeEnc_Encode(x,x,x,x)+55j
.text:00000981                 add     esp, 4
.text:00000984                 cmp     ebp, esp
.text:00000986                 call    __RTC_CheckEsp
.text:0000098B                 mov     esp, ebp
.text:0000098D                 pop     ebp
.text:0000098E                 retn    10h
.text:0000098E _RangeEnc_Encode@16 endp
.text:0000098E
.text:0000098E ; ---------------------------------------------------------------------------
.text:00000991                 align 10h
.text:000009A0
.text:000009A0 ; =============== S U B R O U T I N E =======================================
.text:000009A0
.text:000009A0 ; Attributes: bp-based frame
.text:000009A0
.text:000009A0 ; __stdcall RangeEnc_EncodeBit_0(x, x)
.text:000009A0 _RangeEnc_EncodeBit_0@8 proc near       ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+34Cp
.text:000009A0
.text:000009A0 arg_0           = dword ptr  8
.text:000009A0 arg_4           = dword ptr  0Ch
.text:000009A0
.text:000009A0                 push    ebp
.text:000009A1                 mov     ebp, esp
.text:000009A3                 mov     eax, [ebp+arg_0]
.text:000009A6                 mov     ecx, [eax+8]
.text:000009A9                 shr     ecx, 0Eh
.text:000009AC                 imul    ecx, [ebp+arg_4]
.text:000009B0                 mov     edx, [ebp+arg_0]
.text:000009B3                 mov     [edx+8], ecx
.text:000009B6
.text:000009B6 loc_9B6:                                ; CODE XREF: RangeEnc_EncodeBit_0(x,x)+3Aj
.text:000009B6                 mov     eax, [ebp+arg_0]
.text:000009B9                 cmp     dword ptr [eax+8], 1000000h
.text:000009C0                 jnb     short loc_9DC
.text:000009C2                 mov     ecx, [ebp+arg_0]
.text:000009C5                 mov     edx, [ecx+8]
.text:000009C8                 shl     edx, 8
.text:000009CB                 mov     eax, [ebp+arg_0]
.text:000009CE                 mov     [eax+8], edx
.text:000009D1                 mov     ecx, [ebp+arg_0]
.text:000009D4                 push    ecx
.text:000009D5                 call    _RangeEnc_ShiftLow@4 ; RangeEnc_ShiftLow(x)
.text:000009DA                 jmp     short loc_9B6
.text:000009DC ; ---------------------------------------------------------------------------
.text:000009DC
.text:000009DC loc_9DC:                                ; CODE XREF: RangeEnc_EncodeBit_0(x,x)+20j
.text:000009DC                 cmp     ebp, esp
.text:000009DE                 call    __RTC_CheckEsp
.text:000009E3                 pop     ebp
.text:000009E4                 retn    8
.text:000009E4 _RangeEnc_EncodeBit_0@8 endp
.text:000009E4
.text:000009E4 ; ---------------------------------------------------------------------------
.text:000009E7                 align 10h
.text:000009F0
.text:000009F0 ; =============== S U B R O U T I N E =======================================
.text:000009F0
.text:000009F0 ; Attributes: bp-based frame
.text:000009F0
.text:000009F0 ; __stdcall RangeEnc_EncodeBit_1(x, x)
.text:000009F0 _RangeEnc_EncodeBit_1@8 proc near       ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+3A7p
.text:000009F0
.text:000009F0 var_4           = dword ptr -4
.text:000009F0 arg_0           = dword ptr  8
.text:000009F0 arg_4           = dword ptr  0Ch
.text:000009F0
.text:000009F0                 push    ebp
.text:000009F1                 mov     ebp, esp
.text:000009F3                 push    ecx
.text:000009F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009FB                 mov     eax, [ebp+arg_0]
.text:000009FE                 mov     ecx, [eax+8]
.text:00000A01                 shr     ecx, 0Eh
.text:00000A04                 imul    ecx, [ebp+arg_4]
.text:00000A08                 mov     [ebp+var_4], ecx
.text:00000A0B                 mov     edx, [ebp+var_4]
.text:00000A0E                 xor     eax, eax
.text:00000A10                 mov     ecx, [ebp+arg_0]
.text:00000A13                 add     edx, [ecx]
.text:00000A15                 adc     eax, [ecx+4]
.text:00000A18                 mov     ecx, [ebp+arg_0]
.text:00000A1B                 mov     [ecx], edx
.text:00000A1D                 mov     [ecx+4], eax
.text:00000A20                 mov     edx, [ebp+arg_0]
.text:00000A23                 mov     eax, [edx+8]
.text:00000A26                 sub     eax, [ebp+var_4]
.text:00000A29                 mov     ecx, [ebp+arg_0]
.text:00000A2C                 mov     [ecx+8], eax
.text:00000A2F
.text:00000A2F loc_A2F:                                ; CODE XREF: RangeEnc_EncodeBit_1(x,x)+63j
.text:00000A2F                 mov     edx, [ebp+arg_0]
.text:00000A32                 cmp     dword ptr [edx+8], 1000000h
.text:00000A39                 jnb     short loc_A55
.text:00000A3B                 mov     eax, [ebp+arg_0]
.text:00000A3E                 mov     ecx, [eax+8]
.text:00000A41                 shl     ecx, 8
.text:00000A44                 mov     edx, [ebp+arg_0]
.text:00000A47                 mov     [edx+8], ecx
.text:00000A4A                 mov     eax, [ebp+arg_0]
.text:00000A4D                 push    eax
.text:00000A4E                 call    _RangeEnc_ShiftLow@4 ; RangeEnc_ShiftLow(x)
.text:00000A53                 jmp     short loc_A2F
.text:00000A55 ; ---------------------------------------------------------------------------
.text:00000A55
.text:00000A55 loc_A55:                                ; CODE XREF: RangeEnc_EncodeBit_1(x,x)+49j
.text:00000A55                 add     esp, 4
.text:00000A58                 cmp     ebp, esp
.text:00000A5A                 call    __RTC_CheckEsp
.text:00000A5F                 mov     esp, ebp
.text:00000A61                 pop     ebp
.text:00000A62                 retn    8
.text:00000A62 _RangeEnc_EncodeBit_1@8 endp
.text:00000A62
.text:00000A62 ; ---------------------------------------------------------------------------
.text:00000A65                 align 4
.text:00000A65 _text           ends
.text:00000A65
.rtc$TMZ:00000A68 ; ===========================================================================
.rtc$TMZ:00000A68
.rtc$TMZ:00000A68 ; Segment type: Pure data
.rtc$TMZ:00000A68 ; Segment permissions: Read
.rtc$TMZ:00000A68 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000A68                 assume cs:_rtc$TMZ
.rtc$TMZ:00000A68                 ;org 0A68h
.rtc$TMZ:00000A68 ; COMDAT (pick any)
.rtc$TMZ:00000A68 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000A68 _rtc$TMZ        ends
.rtc$TMZ:00000A68
.rtc$IMZ:00000A6C ; ===========================================================================
.rtc$IMZ:00000A6C
.rtc$IMZ:00000A6C ; Segment type: Pure data
.rtc$IMZ:00000A6C ; Segment permissions: Read
.rtc$IMZ:00000A6C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000A6C                 assume cs:_rtc$IMZ
.rtc$IMZ:00000A6C                 ;org 0A6Ch
.rtc$IMZ:00000A6C ; COMDAT (pick any)
.rtc$IMZ:00000A6C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000A6C _rtc$IMZ        ends
.rtc$IMZ:00000A6C
UNDEF:00000A70 ; ===========================================================================
UNDEF:00000A70
UNDEF:00000A70 ; Segment type: Externs
UNDEF:00000A70 ; UNDEF
UNDEF:00000A70                 extrn __RTC_Shutdown:near
UNDEF:00000A70                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000A74                 extrn __RTC_InitBase:near
UNDEF:00000A74                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000A78                 extrn __RTC_CheckEsp:near
UNDEF:00000A78                                         ; CODE XREF: Ppmd7z_RangeEnc_FlushData(x)+33p
UNDEF:00000A78                                         ; RangeEnc_ShiftLow(x)+72p ...
UNDEF:00000A7C                 extrn __aullshr:near    ; CODE XREF: RangeEnc_ShiftLow(x)+32p
UNDEF:00000A7C                                         ; RangeEnc_ShiftLow(x)+52p
UNDEF:00000A80 ; __stdcall Ppmd7_Update2(x)
UNDEF:00000A80                 extrn _Ppmd7_Update2@4:near
UNDEF:00000A80                                         ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+67Ap
UNDEF:00000A84 ; __stdcall Ppmd7_MakeEscFreq(x, x, x)
UNDEF:00000A84                 extrn _Ppmd7_MakeEscFreq@12:near
UNDEF:00000A84                                         ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+514p
UNDEF:00000A88                 extrn _PPMD7_kExpEscape:near
UNDEF:00000A88                                         ; DATA XREF: Ppmd7_EncodeSymbol(x,x,x)+3DBr
UNDEF:00000A8C ; __stdcall Ppmd7_UpdateBin(x)
UNDEF:00000A8C                 extrn _Ppmd7_UpdateBin@4:near
UNDEF:00000A8C                                         ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+38Ap
UNDEF:00000A90 ; __stdcall Ppmd7_Update1(x)
UNDEF:00000A90                 extrn _Ppmd7_Update1@4:near
UNDEF:00000A90                                         ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+10Bp
UNDEF:00000A94 ; __stdcall Ppmd7_Update1_0(x)
UNDEF:00000A94                 extrn _Ppmd7_Update1_0@4:near
UNDEF:00000A94                                         ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+84p
UNDEF:00000A98                 extrn ___security_cookie:near
UNDEF:00000A98                                         ; DATA XREF: Ppmd7_EncodeSymbol(x,x,x)+1Dr
UNDEF:00000A9C ; __fastcall __security_check_cookie(x)
UNDEF:00000A9C                 extrn @__security_check_cookie@4:near
UNDEF:00000A9C                                         ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+73Bp
UNDEF:00000AA0 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000AA0                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000AA0                                         ; CODE XREF: Ppmd7_EncodeSymbol(x,x,x)+72Dp
UNDEF:00000AA0
UNDEF:00000AA0
UNDEF:00000AA0                 end