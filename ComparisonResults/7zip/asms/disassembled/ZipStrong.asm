.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : D608A725FE9648867FF10335360D0E96
.text:00000000 ; Input CRC32 : 42CD745E
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ZipStrong.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; void __thiscall NCrypto::NZipStrong::CKeyInfo::SetPassword(NCrypto::NZipStrong::CKeyInfo *this, const unsigned __int8 *, unsigned int)
.text:00000000                 public ?SetPassword@CKeyInfo@NZipStrong@NCrypto@@QAEXPBEI@Z
.text:00000000 ?SetPassword@CKeyInfo@NZipStrong@NCrypto@@QAEXPBEI@Z proc near
.text:00000000                                         ; CODE XREF: NCrypto::NZipStrong::CBaseCoder::CryptoSetPassword(uchar const *,uint)+11p
.text:00000000
.text:00000000 var_70          = byte ptr -70h
.text:00000000 var_6C          = byte ptr -6Ch
.text:00000000 Dst             = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 70h
.text:00000006                 push    edi
.text:00000007                 push    ecx
.text:00000008                 lea     edi, [ebp+var_70]
.text:0000000B                 mov     ecx, 1Ch
.text:00000010                 mov     eax, 0CCCCCCCCh
.text:00000015                 rep stosd
.text:00000017                 pop     ecx
.text:00000018                 mov     eax, dword ptr ds:___security_cookie
.text:0000001D                 xor     eax, ebp
.text:0000001F                 mov     [ebp+var_4], eax
.text:00000022                 mov     [ebp+Dst], ecx
.text:00000025                 lea     ecx, [ebp+var_6C] ; this
.text:00000028                 call    ?Init@CContextBase@NSha1@NCrypto@@QAEXXZ ; NCrypto::NSha1::CContextBase::Init(void)
.text:0000002D                 mov     eax, [ebp+arg_4]
.text:00000030                 push    eax             ; unsigned int
.text:00000031                 mov     ecx, [ebp+arg_0]
.text:00000034                 push    ecx             ; unsigned __int8 *
.text:00000035                 lea     ecx, [ebp+var_6C] ; this
.text:00000038                 call    ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CContext::Update(uchar const *,uint)
.text:0000003D                 mov     edx, [ebp+Dst]
.text:00000040                 push    edx             ; Dst
.text:00000041                 lea     eax, [ebp+var_6C]
.text:00000044                 push    eax             ; NCrypto::NSha1::CContext *
.text:00000045                 call    ?DeriveKey@NZipStrong@NCrypto@@YGXAAVCContext@NSha1@2@PAE@Z ; NCrypto::NZipStrong::DeriveKey(NCrypto::NSha1::CContext &,uchar *)
.text:0000004A                 push    edx
.text:0000004B                 mov     ecx, ebp
.text:0000004D                 push    eax
.text:0000004E                 lea     edx, $LN5
.text:00000054                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000059                 pop     eax
.text:0000005A                 pop     edx
.text:0000005B                 pop     edi
.text:0000005C                 mov     ecx, [ebp+var_4]
.text:0000005F                 xor     ecx, ebp
.text:00000061                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000066                 add     esp, 70h
.text:00000069                 cmp     ebp, esp
.text:0000006B                 call    __RTC_CheckEsp
.text:00000070                 mov     esp, ebp
.text:00000072                 pop     ebp
.text:00000073                 retn    8
.text:00000073 ?SetPassword@CKeyInfo@NZipStrong@NCrypto@@QAEXPBEI@Z endp
.text:00000073
.text:00000073 ; ---------------------------------------------------------------------------
.text:00000076                 align 4
.text:00000078 $LN5            dd 1                    ; DATA XREF: NCrypto::NZipStrong::CKeyInfo::SetPassword(uchar const *,uint)+4Eo
.text:0000007C                 dd offset $LN4
.text:00000080 $LN4            dd 0FFFFFF94h, 60h      ; DATA XREF: .text:0000007Co
.text:00000088                 dd offset $LN3
.text:0000008C $LN3            dd 616873h              ; DATA XREF: .text:00000088o
.text:00000090
.text:00000090 ; =============== S U B R O U T I N E =======================================
.text:00000090
.text:00000090 ; Attributes: bp-based frame
.text:00000090
.text:00000090 ; int __stdcall NCrypto::NZipStrong::DeriveKey(NCrypto::NSha1::CContext *, void *Dst)
.text:00000090 ?DeriveKey@NZipStrong@NCrypto@@YGXAAVCContext@NSha1@2@PAE@Z proc near
.text:00000090                                         ; CODE XREF: NCrypto::NZipStrong::CKeyInfo::SetPassword(uchar const *,uint)+45p
.text:00000090                                         ; NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+2CCp
.text:00000090
.text:00000090 var_50          = byte ptr -50h
.text:00000090 Src             = byte ptr -4Ch
.text:00000090 var_38          = byte ptr -38h
.text:00000090 var_1C          = byte ptr -1Ch
.text:00000090 var_4           = dword ptr -4
.text:00000090 arg_0           = dword ptr  8
.text:00000090 Dst             = dword ptr  0Ch
.text:00000090
.text:00000090                 push    ebp
.text:00000091                 mov     ebp, esp
.text:00000093                 sub     esp, 50h
.text:00000096                 push    edi
.text:00000097                 lea     edi, [ebp+var_50]
.text:0000009A                 mov     ecx, 14h
.text:0000009F                 mov     eax, 0CCCCCCCCh
.text:000000A4                 rep stosd
.text:000000A6                 mov     eax, dword ptr ds:___security_cookie
.text:000000AB                 xor     eax, ebp
.text:000000AD                 mov     [ebp+var_4], eax
.text:000000B0                 lea     eax, [ebp+var_1C]
.text:000000B3                 push    eax             ; unsigned __int8 *
.text:000000B4                 mov     ecx, [ebp+arg_0] ; this
.text:000000B7                 call    ?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z ; NCrypto::NSha1::CContext::Final(uchar *)
.text:000000BC                 lea     ecx, [ebp+Src]
.text:000000BF                 push    ecx             ; unsigned __int8 *
.text:000000C0                 push    36h ; '6'       ; char
.text:000000C2                 lea     edx, [ebp+var_1C]
.text:000000C5                 push    edx             ; int
.text:000000C6                 call    ?DeriveKey2@NZipStrong@NCrypto@@YGXPBEEPAE@Z ; NCrypto::NZipStrong::DeriveKey2(uchar const *,uchar,uchar *)
.text:000000CB                 lea     eax, [ebp+var_38]
.text:000000CE                 push    eax             ; unsigned __int8 *
.text:000000CF                 push    5Ch ; '\'       ; char
.text:000000D1                 lea     ecx, [ebp+var_1C]
.text:000000D4                 push    ecx             ; int
.text:000000D5                 call    ?DeriveKey2@NZipStrong@NCrypto@@YGXPBEEPAE@Z ; NCrypto::NZipStrong::DeriveKey2(uchar const *,uchar,uchar *)
.text:000000DA                 push    20h ; ' '       ; Size
.text:000000DC                 lea     edx, [ebp+Src]
.text:000000DF                 push    edx             ; Src
.text:000000E0                 mov     eax, [ebp+Dst]
.text:000000E3                 push    eax             ; Dst
.text:000000E4                 call    _memcpy
.text:000000E9                 add     esp, 0Ch
.text:000000EC                 push    edx
.text:000000ED                 mov     ecx, ebp
.text:000000EF                 push    eax
.text:000000F0                 lea     edx, $LN6
.text:000000F6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000000FB                 pop     eax
.text:000000FC                 pop     edx
.text:000000FD                 pop     edi
.text:000000FE                 mov     ecx, [ebp+var_4]
.text:00000101                 xor     ecx, ebp
.text:00000103                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000108                 add     esp, 50h
.text:0000010B                 cmp     ebp, esp
.text:0000010D                 call    __RTC_CheckEsp
.text:00000112                 mov     esp, ebp
.text:00000114                 pop     ebp
.text:00000115                 retn    8
.text:00000115 ?DeriveKey@NZipStrong@NCrypto@@YGXAAVCContext@NSha1@2@PAE@Z endp
.text:00000115
.text:00000115 ; ---------------------------------------------------------------------------
.text:00000118 $LN6            dd 2                    ; DATA XREF: NCrypto::NZipStrong::DeriveKey(NCrypto::NSha1::CContext &,uchar *)+60o
.text:0000011C                 dd offset $LN5_0
.text:00000120 $LN5_0          dd 0FFFFFFE4h, 14h      ; DATA XREF: .text:0000011Co
.text:00000128                 dd offset $LN3_0        ; "digest"
.text:0000012C                 dd 0FFFFFFB4h, 28h
.text:00000134                 dd offset $LN4_0        ; "temp"
.text:00000138 $LN4_0          db 'temp',0             ; DATA XREF: .text:00000134o
.text:0000013D $LN3_0          db 'digest',0           ; DATA XREF: .text:00000128o
.text:00000144                 align 10h
.text:00000150
.text:00000150 ; =============== S U B R O U T I N E =======================================
.text:00000150
.text:00000150 ; Attributes: bp-based frame
.text:00000150
.text:00000150 ; int __stdcall NCrypto::NZipStrong::DeriveKey2(int, char, unsigned __int8 *)
.text:00000150 ?DeriveKey2@NZipStrong@NCrypto@@YGXPBEEPAE@Z proc near
.text:00000150                                         ; CODE XREF: NCrypto::NZipStrong::DeriveKey(NCrypto::NSha1::CContext &,uchar *)+36p
.text:00000150                                         ; NCrypto::NZipStrong::DeriveKey(NCrypto::NSha1::CContext &,uchar *)+45p
.text:00000150
.text:00000150 var_B8          = byte ptr -0B8h
.text:00000150 var_B4          = byte ptr -0B4h
.text:00000150 var_50          = dword ptr -50h
.text:00000150 Dst             = byte ptr -48h
.text:00000150 var_4           = dword ptr -4
.text:00000150 arg_0           = dword ptr  8
.text:00000150 arg_4           = byte ptr  0Ch
.text:00000150 arg_8           = dword ptr  10h
.text:00000150
.text:00000150                 push    ebp
.text:00000151                 mov     ebp, esp
.text:00000153                 sub     esp, 0B8h
.text:00000159                 push    edi
.text:0000015A                 lea     edi, [ebp+var_B8]
.text:00000160                 mov     ecx, 2Eh ; '.'
.text:00000165                 mov     eax, 0CCCCCCCCh
.text:0000016A                 rep stosd
.text:0000016C                 mov     eax, dword ptr ds:___security_cookie
.text:00000171                 xor     eax, ebp
.text:00000173                 mov     [ebp+var_4], eax
.text:00000176                 push    40h ; '@'       ; Size
.text:00000178                 movzx   eax, [ebp+arg_4]
.text:0000017C                 push    eax             ; Val
.text:0000017D                 lea     ecx, [ebp+Dst]
.text:00000180                 push    ecx             ; Dst
.text:00000181                 call    _memset
.text:00000186                 add     esp, 0Ch
.text:00000189                 mov     [ebp+var_50], 0
.text:00000190                 jmp     short loc_19B
.text:00000192 ; ---------------------------------------------------------------------------
.text:00000192
.text:00000192 loc_192:                                ; CODE XREF: NCrypto::NZipStrong::DeriveKey2(uchar const *,uchar,uchar *)+6Bj
.text:00000192                 mov     edx, [ebp+var_50]
.text:00000195                 add     edx, 1
.text:00000198                 mov     [ebp+var_50], edx
.text:0000019B
.text:0000019B loc_19B:                                ; CODE XREF: NCrypto::NZipStrong::DeriveKey2(uchar const *,uchar,uchar *)+40j
.text:0000019B                 cmp     [ebp+var_50], 14h
.text:0000019F                 jnb     short loc_1BD
.text:000001A1                 mov     eax, [ebp+arg_0]
.text:000001A4                 add     eax, [ebp+var_50]
.text:000001A7                 movzx   ecx, byte ptr [eax]
.text:000001AA                 mov     edx, [ebp+var_50]
.text:000001AD                 movzx   eax, [ebp+edx+Dst]
.text:000001B2                 xor     eax, ecx
.text:000001B4                 mov     ecx, [ebp+var_50]
.text:000001B7                 mov     [ebp+ecx+Dst], al
.text:000001BB                 jmp     short loc_192
.text:000001BD ; ---------------------------------------------------------------------------
.text:000001BD
.text:000001BD loc_1BD:                                ; CODE XREF: NCrypto::NZipStrong::DeriveKey2(uchar const *,uchar,uchar *)+4Fj
.text:000001BD                 lea     ecx, [ebp+var_B4] ; this
.text:000001C3                 call    ?Init@CContextBase@NSha1@NCrypto@@QAEXXZ ; NCrypto::NSha1::CContextBase::Init(void)
.text:000001C8                 push    40h ; '@'       ; unsigned int
.text:000001CA                 lea     edx, [ebp+Dst]
.text:000001CD                 push    edx             ; unsigned __int8 *
.text:000001CE                 lea     ecx, [ebp+var_B4] ; this
.text:000001D4                 call    ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CContext::Update(uchar const *,uint)
.text:000001D9                 mov     eax, [ebp+arg_8]
.text:000001DC                 push    eax             ; unsigned __int8 *
.text:000001DD                 lea     ecx, [ebp+var_B4] ; this
.text:000001E3                 call    ?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z ; NCrypto::NSha1::CContext::Final(uchar *)
.text:000001E8                 push    edx
.text:000001E9                 mov     ecx, ebp
.text:000001EB                 push    eax
.text:000001EC                 lea     edx, $LN9
.text:000001F2                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000001F7                 pop     eax
.text:000001F8                 pop     edx
.text:000001F9                 pop     edi
.text:000001FA                 mov     ecx, [ebp+var_4]
.text:000001FD                 xor     ecx, ebp
.text:000001FF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000204                 add     esp, 0B8h
.text:0000020A                 cmp     ebp, esp
.text:0000020C                 call    __RTC_CheckEsp
.text:00000211                 mov     esp, ebp
.text:00000213                 pop     ebp
.text:00000214                 retn    0Ch
.text:00000214 ?DeriveKey2@NZipStrong@NCrypto@@YGXPBEEPAE@Z endp
.text:00000214
.text:00000214 ; ---------------------------------------------------------------------------
.text:00000217                 align 4
.text:00000218 $LN9            dd 2                    ; DATA XREF: NCrypto::NZipStrong::DeriveKey2(uchar const *,uchar,uchar *)+9Co
.text:0000021C                 dd offset $LN8
.text:00000220 $LN8            dd 0FFFFFFB8h, 40h      ; DATA XREF: .text:0000021Co
.text:00000228                 dd offset $LN6_0
.text:0000022C                 dd 0FFFFFF4Ch, 60h
.text:00000234                 dd offset $LN7
.text:00000238 $LN7            dd 616873h              ; DATA XREF: .text:00000234o
.text:0000023C $LN6_0          dd 667562h              ; DATA XREF: .text:00000228o
.text:00000240
.text:00000240 ; =============== S U B R O U T I N E =======================================
.text:00000240
.text:00000240 ; Attributes: bp-based frame
.text:00000240
.text:00000240 ; __int32 __stdcall NCrypto::NZipStrong::CBaseCoder::CryptoSetPassword(NCrypto::NZipStrong::CBaseCoder *this, const unsigned __int8 *, unsigned int)
.text:00000240                 public ?CryptoSetPassword@CBaseCoder@NZipStrong@NCrypto@@UAGJPBEI@Z
.text:00000240 ?CryptoSetPassword@CBaseCoder@NZipStrong@NCrypto@@UAGJPBEI@Z proc near
.text:00000240
.text:00000240 this            = dword ptr  8
.text:00000240 arg_4           = dword ptr  0Ch
.text:00000240 arg_8           = dword ptr  10h
.text:00000240
.text:00000240                 push    ebp
.text:00000241                 mov     ebp, esp
.text:00000243                 mov     eax, [ebp+arg_8]
.text:00000246                 push    eax             ; unsigned int
.text:00000247                 mov     ecx, [ebp+arg_4]
.text:0000024A                 push    ecx             ; unsigned __int8 *
.text:0000024B                 mov     ecx, [ebp+this]
.text:0000024E                 add     ecx, 4          ; this
.text:00000251                 call    ?SetPassword@CKeyInfo@NZipStrong@NCrypto@@QAEXPBEI@Z ; NCrypto::NZipStrong::CKeyInfo::SetPassword(uchar const *,uint)
.text:00000256                 xor     eax, eax
.text:00000258                 cmp     ebp, esp
.text:0000025A                 call    __RTC_CheckEsp
.text:0000025F                 pop     ebp
.text:00000260                 retn    0Ch
.text:00000260 ?CryptoSetPassword@CBaseCoder@NZipStrong@NCrypto@@UAGJPBEI@Z endp
.text:00000260
.text:00000260 ; ---------------------------------------------------------------------------
.text:00000263                 align 10h
.text:00000270
.text:00000270 ; =============== S U B R O U T I N E =======================================
.text:00000270
.text:00000270 ; Attributes: bp-based frame
.text:00000270
.text:00000270 ; __int32 __stdcall NCrypto::NZipStrong::CBaseCoder::Init(NCrypto::NZipStrong::CBaseCoder *this)
.text:00000270                 public ?Init@CBaseCoder@NZipStrong@NCrypto@@UAGJXZ
.text:00000270 ?Init@CBaseCoder@NZipStrong@NCrypto@@UAGJXZ proc near
.text:00000270
.text:00000270 this            = dword ptr  8
.text:00000270
.text:00000270                 push    ebp
.text:00000271                 mov     ebp, esp
.text:00000273                 xor     eax, eax
.text:00000275                 pop     ebp
.text:00000276                 retn    4
.text:00000276 ?Init@CBaseCoder@NZipStrong@NCrypto@@UAGJXZ endp
.text:00000276
.text:00000276 ; ---------------------------------------------------------------------------
.text:00000279                 align 10h
.text:00000280
.text:00000280 ; =============== S U B R O U T I N E =======================================
.text:00000280
.text:00000280 ; Attributes: bp-based frame
.text:00000280
.text:00000280 ; __int32 __thiscall NCrypto::NZipStrong::CDecoder::ReadHeader(NCrypto::NZipStrong::CDecoder *this, struct ISequentialInStream *, unsigned int, unsigned __int64)
.text:00000280                 public ?ReadHeader@CDecoder@NZipStrong@NCrypto@@QAEJPAUISequentialInStream@@I_K@Z
.text:00000280 ?ReadHeader@CDecoder@NZipStrong@NCrypto@@QAEJPAUISequentialInStream@@I_K@Z proc near
.text:00000280
.text:00000280 var_20          = dword ptr -20h
.text:00000280 var_1C          = dword ptr -1Ch
.text:00000280 var_18          = dword ptr -18h
.text:00000280 var_14          = dword ptr -14h
.text:00000280 var_10          = dword ptr -10h
.text:00000280 var_C           = dword ptr -0Ch
.text:00000280 var_8           = dword ptr -8
.text:00000280 var_4           = dword ptr -4
.text:00000280 arg_0           = dword ptr  8
.text:00000280 arg_4           = dword ptr  0Ch
.text:00000280 arg_8           = qword ptr  10h
.text:00000280
.text:00000280                 push    ebp
.text:00000281                 mov     ebp, esp
.text:00000283                 sub     esp, 20h
.text:00000286                 push    esi
.text:00000287                 mov     eax, 0CCCCCCCCh
.text:0000028C                 mov     [ebp+var_20], eax
.text:0000028F                 mov     [ebp+var_1C], eax
.text:00000292                 mov     [ebp+var_18], eax
.text:00000295                 mov     [ebp+var_14], eax
.text:00000298                 mov     [ebp+var_10], eax
.text:0000029B                 mov     [ebp+var_C], eax
.text:0000029E                 mov     [ebp+var_8], eax
.text:000002A1                 mov     [ebp+var_4], eax
.text:000002A4                 mov     [ebp+var_4], ecx
.text:000002A7                 push    2               ; unsigned int
.text:000002A9                 lea     eax, [ebp+var_C]
.text:000002AC                 push    eax             ; void *
.text:000002AD                 mov     ecx, [ebp+arg_0]
.text:000002B0                 push    ecx             ; struct ISequentialInStream *
.text:000002B1                 call    ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE(ISequentialInStream *,void *,uint)
.text:000002B6                 mov     [ebp+var_14], eax
.text:000002B9                 cmp     [ebp+var_14], 0
.text:000002BD                 jz      short loc_2C7
.text:000002BF                 mov     eax, [ebp+var_14]
.text:000002C2                 jmp     loc_433
.text:000002C7 ; ---------------------------------------------------------------------------
.text:000002C7
.text:000002C7 loc_2C7:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::ReadHeader(ISequentialInStream *,uint,unsigned __int64)+3Dj
.text:000002C7                 movzx   edx, word ptr [ebp+var_C]
.text:000002CB                 mov     eax, [ebp+var_4]
.text:000002CE                 mov     [eax+180h], edx
.text:000002D4                 mov     ecx, [ebp+var_4]
.text:000002D7                 cmp     dword ptr [ecx+180h], 0
.text:000002DE                 jnz     short loc_326
.text:000002E0                 push    10h             ; Size
.text:000002E2                 push    0               ; Val
.text:000002E4                 mov     edx, [ebp+var_4]
.text:000002E7                 add     edx, 184h
.text:000002ED                 push    edx             ; Dst
.text:000002EE                 call    _memset
.text:000002F3                 add     esp, 0Ch
.text:000002F6                 mov     eax, [ebp+var_4]
.text:000002F9                 mov     ecx, [ebp+arg_4]
.text:000002FC                 mov     [eax+184h], ecx
.text:00000302                 mov     edx, [ebp+var_4]
.text:00000305                 mov     eax, dword ptr [ebp+arg_8]
.text:00000308                 mov     [edx+188h], eax
.text:0000030E                 mov     ecx, dword ptr [ebp+arg_8+4]
.text:00000311                 mov     [edx+18Ch], ecx
.text:00000317                 mov     edx, [ebp+var_4]
.text:0000031A                 mov     dword ptr [edx+180h], 0Ch
.text:00000324                 jmp     short loc_36B
.text:00000326 ; ---------------------------------------------------------------------------
.text:00000326
.text:00000326 loc_326:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::ReadHeader(ISequentialInStream *,uint,unsigned __int64)+5Ej
.text:00000326                 mov     eax, [ebp+var_4]
.text:00000329                 cmp     dword ptr [eax+180h], 10h
.text:00000330                 jnz     short loc_361
.text:00000332                 mov     ecx, [ebp+var_4]
.text:00000335                 mov     edx, [ecx+180h]
.text:0000033B                 push    edx             ; unsigned int
.text:0000033C                 mov     eax, [ebp+var_4]
.text:0000033F                 add     eax, 184h
.text:00000344                 push    eax             ; void *
.text:00000345                 mov     ecx, [ebp+arg_0]
.text:00000348                 push    ecx             ; struct ISequentialInStream *
.text:00000349                 call    ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE(ISequentialInStream *,void *,uint)
.text:0000034E                 mov     [ebp+var_18], eax
.text:00000351                 cmp     [ebp+var_18], 0
.text:00000355                 jz      short loc_35F
.text:00000357                 mov     eax, [ebp+var_18]
.text:0000035A                 jmp     loc_433
.text:0000035F ; ---------------------------------------------------------------------------
.text:0000035F
.text:0000035F loc_35F:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::ReadHeader(ISequentialInStream *,uint,unsigned __int64)+D5j
.text:0000035F                 jmp     short loc_36B
.text:00000361 ; ---------------------------------------------------------------------------
.text:00000361
.text:00000361 loc_361:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::ReadHeader(ISequentialInStream *,uint,unsigned __int64)+B0j
.text:00000361                 mov     eax, 80004001h
.text:00000366                 jmp     loc_433
.text:0000036B ; ---------------------------------------------------------------------------
.text:0000036B
.text:0000036B loc_36B:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::ReadHeader(ISequentialInStream *,uint,unsigned __int64)+A4j
.text:0000036B                                         ; NCrypto::NZipStrong::CDecoder::ReadHeader(ISequentialInStream *,uint,unsigned __int64):loc_35Fj
.text:0000036B                 push    4               ; unsigned int
.text:0000036D                 lea     edx, [ebp+var_C]
.text:00000370                 push    edx             ; void *
.text:00000371                 mov     eax, [ebp+arg_0]
.text:00000374                 push    eax             ; struct ISequentialInStream *
.text:00000375                 call    ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE(ISequentialInStream *,void *,uint)
.text:0000037A                 mov     [ebp+var_1C], eax
.text:0000037D                 cmp     [ebp+var_1C], 0
.text:00000381                 jz      short loc_38B
.text:00000383                 mov     eax, [ebp+var_1C]
.text:00000386                 jmp     loc_433
.text:0000038B ; ---------------------------------------------------------------------------
.text:0000038B
.text:0000038B loc_38B:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::ReadHeader(ISequentialInStream *,uint,unsigned __int64)+101j
.text:0000038B                 mov     ecx, [ebp+var_4]
.text:0000038E                 mov     edx, [ebp+var_C]
.text:00000391                 mov     [ecx+194h], edx
.text:00000397                 mov     [ebp+var_20], 10h
.text:0000039E                 mov     eax, [ebp+var_4]
.text:000003A1                 cmp     dword ptr [eax+194h], 10h
.text:000003A8                 jb      short loc_3B9
.text:000003AA                 mov     ecx, [ebp+var_4]
.text:000003AD                 cmp     dword ptr [ecx+194h], 40000h
.text:000003B7                 jbe     short loc_3C0
.text:000003B9
.text:000003B9 loc_3B9:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::ReadHeader(ISequentialInStream *,uint,unsigned __int64)+128j
.text:000003B9                 mov     eax, 80004001h
.text:000003BE                 jmp     short loc_433
.text:000003C0 ; ---------------------------------------------------------------------------
.text:000003C0
.text:000003C0 loc_3C0:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::ReadHeader(ISequentialInStream *,uint,unsigned __int64)+137j
.text:000003C0                 mov     edx, [ebp+var_4]
.text:000003C3                 mov     esi, [edx+194h]
.text:000003C9                 add     esi, 10h
.text:000003CC                 mov     ecx, [ebp+var_4]
.text:000003CF                 add     ecx, 174h
.text:000003D5                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:000003DA                 cmp     esi, eax
.text:000003DC                 jbe     short loc_416
.text:000003DE                 mov     eax, [ebp+var_4]
.text:000003E1                 mov     ecx, [eax+194h]
.text:000003E7                 add     ecx, 10h
.text:000003EA                 push    ecx
.text:000003EB                 mov     ecx, [ebp+var_4]
.text:000003EE                 add     ecx, 174h
.text:000003F4                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:000003F9                 mov     ecx, [ebp+var_4]
.text:000003FC                 add     ecx, 174h
.text:00000402                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00000407                 add     eax, 0Fh
.text:0000040A                 and     eax, 0FFFFFFF0h
.text:0000040D                 mov     edx, [ebp+var_4]
.text:00000410                 mov     [edx+17Ch], eax
.text:00000416
.text:00000416 loc_416:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::ReadHeader(ISequentialInStream *,uint,unsigned __int64)+15Cj
.text:00000416                 mov     eax, [ebp+var_4]
.text:00000419                 mov     ecx, [eax+194h]
.text:0000041F                 push    ecx             ; unsigned int
.text:00000420                 mov     edx, [ebp+var_4]
.text:00000423                 mov     eax, [edx+17Ch]
.text:00000429                 push    eax             ; void *
.text:0000042A                 mov     ecx, [ebp+arg_0]
.text:0000042D                 push    ecx             ; struct ISequentialInStream *
.text:0000042E                 call    ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE(ISequentialInStream *,void *,uint)
.text:00000433
.text:00000433 loc_433:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::ReadHeader(ISequentialInStream *,uint,unsigned __int64)+42j
.text:00000433                                         ; NCrypto::NZipStrong::CDecoder::ReadHeader(ISequentialInStream *,uint,unsigned __int64)+DAj ...
.text:00000433                 push    edx
.text:00000434                 mov     ecx, ebp
.text:00000436                 push    eax
.text:00000437                 lea     edx, $LN15
.text:0000043D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000442                 pop     eax
.text:00000443                 pop     edx
.text:00000444                 pop     esi
.text:00000445                 add     esp, 20h
.text:00000448                 cmp     ebp, esp
.text:0000044A                 call    __RTC_CheckEsp
.text:0000044F                 mov     esp, ebp
.text:00000451                 pop     ebp
.text:00000452                 retn    10h
.text:00000452 ?ReadHeader@CDecoder@NZipStrong@NCrypto@@QAEJPAUISequentialInStream@@I_K@Z endp
.text:00000452
.text:00000452 ; ---------------------------------------------------------------------------
.text:00000455                 align 4
.text:00000458 $LN15           dd 1                    ; DATA XREF: NCrypto::NZipStrong::CDecoder::ReadHeader(ISequentialInStream *,uint,unsigned __int64)+1B7o
.text:0000045C                 dd offset $LN14
.text:00000460 $LN14           dd 0FFFFFFF4h, 4        ; DATA XREF: .text:0000045Co
.text:00000468                 dd offset $LN13         ; "temp"
.text:0000046C $LN13           db 'temp',0             ; DATA XREF: .text:00000468o
.text:00000471                 align 10h
.text:00000480
.text:00000480 ; =============== S U B R O U T I N E =======================================
.text:00000480
.text:00000480 ; Attributes: bp-based frame
.text:00000480
.text:00000480 ; __int32 __thiscall NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(NCrypto::NZipStrong::CDecoder *this, bool *)
.text:00000480                 public ?Init_and_CheckPassword@CDecoder@NZipStrong@NCrypto@@QAEJAA_N@Z
.text:00000480 ?Init_and_CheckPassword@CDecoder@NZipStrong@NCrypto@@QAEJAA_N@Z proc near
.text:00000480
.text:00000480 var_CC          = dword ptr -0CCh
.text:00000480 var_C8          = dword ptr -0C8h
.text:00000480 var_C0          = byte ptr -0C0h
.text:00000480 var_58          = byte ptr -58h
.text:00000480 var_34          = dword ptr -34h
.text:00000480 var_30          = dword ptr -30h
.text:00000480 var_2C          = dword ptr -2Ch
.text:00000480 var_28          = dword ptr -28h
.text:00000480 var_24          = dword ptr -24h
.text:00000480 Size            = dword ptr -20h
.text:00000480 var_1C          = word ptr -1Ch
.text:00000480 var_18          = word ptr -18h
.text:00000480 var_14          = word ptr -14h
.text:00000480 var_10          = word ptr -10h
.text:00000480 Dst             = dword ptr -0Ch
.text:00000480 var_8           = dword ptr -8
.text:00000480 var_4           = dword ptr -4
.text:00000480 arg_0           = dword ptr  8
.text:00000480
.text:00000480                 push    ebp
.text:00000481                 mov     ebp, esp
.text:00000483                 sub     esp, 0CCh
.text:00000489                 push    esi
.text:0000048A                 push    edi
.text:0000048B                 push    ecx
.text:0000048C                 lea     edi, [ebp+var_CC]
.text:00000492                 mov     ecx, 33h ; '3'
.text:00000497                 mov     eax, 0CCCCCCCCh
.text:0000049C                 rep stosd
.text:0000049E                 pop     ecx
.text:0000049F                 mov     eax, dword ptr ds:___security_cookie
.text:000004A4                 xor     eax, ebp
.text:000004A6                 mov     [ebp+var_4], eax
.text:000004A9                 mov     [ebp+var_8], ecx
.text:000004AC                 mov     eax, [ebp+arg_0]
.text:000004AF                 mov     byte ptr [eax], 0
.text:000004B2                 mov     ecx, [ebp+var_8]
.text:000004B5                 cmp     dword ptr [ecx+194h], 10h
.text:000004BC                 jnb     short loc_4C8
.text:000004BE                 mov     eax, 80004001h
.text:000004C3                 jmp     loc_83E
.text:000004C8 ; ---------------------------------------------------------------------------
.text:000004C8
.text:000004C8 loc_4C8:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+3Cj
.text:000004C8                 mov     edx, [ebp+var_8]
.text:000004CB                 mov     eax, [edx+17Ch]
.text:000004D1                 mov     [ebp+Dst], eax
.text:000004D4                 mov     ecx, [ebp+Dst]
.text:000004D7                 mov     dx, [ecx]
.text:000004DA                 mov     [ebp+var_10], dx
.text:000004DE                 movzx   eax, [ebp+var_10]
.text:000004E2                 cmp     eax, 3
.text:000004E5                 jz      short loc_4F1
.text:000004E7                 mov     eax, 80004001h
.text:000004EC                 jmp     loc_83E
.text:000004F1 ; ---------------------------------------------------------------------------
.text:000004F1
.text:000004F1 loc_4F1:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+65j
.text:000004F1                 mov     ecx, [ebp+Dst]
.text:000004F4                 mov     dx, [ecx+2]
.text:000004F8                 mov     [ebp+var_14], dx
.text:000004FC                 movzx   eax, [ebp+var_14]
.text:00000500                 cmp     eax, 660Eh
.text:00000505                 jge     short loc_511
.text:00000507                 mov     eax, 80004001h
.text:0000050C                 jmp     loc_83E
.text:00000511 ; ---------------------------------------------------------------------------
.text:00000511
.text:00000511 loc_511:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+85j
.text:00000511                 movzx   ecx, [ebp+var_14]
.text:00000515                 sub     ecx, 660Eh
.text:0000051B                 mov     [ebp+var_14], cx
.text:0000051F                 movzx   edx, [ebp+var_14]
.text:00000523                 cmp     edx, 2
.text:00000526                 jle     short loc_532
.text:00000528                 mov     eax, 80004001h
.text:0000052D                 jmp     loc_83E
.text:00000532 ; ---------------------------------------------------------------------------
.text:00000532
.text:00000532 loc_532:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+A6j
.text:00000532                 mov     eax, [ebp+Dst]
.text:00000535                 mov     cx, [eax+4]
.text:00000539                 mov     [ebp+var_18], cx
.text:0000053D                 mov     edx, [ebp+Dst]
.text:00000540                 mov     ax, [edx+6]
.text:00000544                 mov     [ebp+var_1C], ax
.text:00000548                 movzx   ecx, [ebp+var_14]
.text:0000054C                 shl     ecx, 6
.text:0000054F                 add     ecx, 80h ; 'Ç'
.text:00000555                 movzx   edx, [ebp+var_18]
.text:00000559                 cmp     ecx, edx
.text:0000055B                 jz      short loc_567
.text:0000055D                 mov     eax, 80004001h
.text:00000562                 jmp     loc_83E
.text:00000567 ; ---------------------------------------------------------------------------
.text:00000567
.text:00000567 loc_567:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+DBj
.text:00000567                 movzx   eax, [ebp+var_14]
.text:0000056B                 lea     ecx, ds:10h[eax*8]
.text:00000572                 mov     edx, [ebp+var_8]
.text:00000575                 mov     [edx+170h], ecx
.text:0000057B                 movzx   eax, [ebp+var_1C]
.text:0000057F                 and     eax, 1
.text:00000582                 jnz     short loc_58E
.text:00000584                 mov     eax, 80004001h
.text:00000589                 jmp     loc_83E
.text:0000058E ; ---------------------------------------------------------------------------
.text:0000058E
.text:0000058E loc_58E:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+102j
.text:0000058E                 movzx   ecx, [ebp+var_1C]
.text:00000592                 and     ecx, 4000h
.text:00000598                 jz      short loc_5A4
.text:0000059A                 mov     eax, 80004001h
.text:0000059F                 jmp     loc_83E
.text:000005A4 ; ---------------------------------------------------------------------------
.text:000005A4
.text:000005A4 loc_5A4:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+118j
.text:000005A4                 mov     edx, [ebp+Dst]
.text:000005A7                 movzx   eax, word ptr [edx+8]
.text:000005AB                 mov     [ebp+Size], eax
.text:000005AE                 mov     ecx, [ebp+Size]
.text:000005B1                 and     ecx, 0Fh
.text:000005B4                 jnz     short loc_5C7
.text:000005B6                 mov     edx, [ebp+Size]
.text:000005B9                 add     edx, 10h
.text:000005BC                 mov     eax, [ebp+var_8]
.text:000005BF                 cmp     edx, [eax+194h]
.text:000005C5                 jbe     short loc_5D1
.text:000005C7
.text:000005C7 loc_5C7:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+134j
.text:000005C7                 mov     eax, 80004001h
.text:000005CC                 jmp     loc_83E
.text:000005D1 ; ---------------------------------------------------------------------------
.text:000005D1
.text:000005D1 loc_5D1:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+145j
.text:000005D1                 mov     esi, esp
.text:000005D3                 mov     ecx, [ebp+Size]
.text:000005D6                 push    ecx             ; Size
.text:000005D7                 mov     edx, [ebp+Dst]
.text:000005DA                 add     edx, 0Ah
.text:000005DD                 push    edx             ; Src
.text:000005DE                 mov     eax, [ebp+Dst]
.text:000005E1                 push    eax             ; Dst
.text:000005E2                 call    dword ptr ds:__imp__memmove
.text:000005E8                 add     esp, 0Ch
.text:000005EB                 cmp     esi, esp
.text:000005ED                 call    __RTC_CheckEsp
.text:000005F2                 mov     ecx, [ebp+Size]
.text:000005F5                 mov     edx, [ebp+Dst]
.text:000005F8                 lea     eax, [edx+ecx+10h]
.text:000005FC                 mov     [ebp+var_24], eax
.text:000005FF                 mov     ecx, [ebp+var_24]
.text:00000602                 cmp     dword ptr [ecx-6], 0
.text:00000606                 jz      short loc_612
.text:00000608                 mov     eax, 80004001h
.text:0000060D                 jmp     loc_83E
.text:00000612 ; ---------------------------------------------------------------------------
.text:00000612
.text:00000612 loc_612:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+186j
.text:00000612                 mov     edx, [ebp+var_24]
.text:00000615                 movzx   eax, word ptr [edx-2]
.text:00000619                 mov     [ebp+var_28], eax
.text:0000061C                 mov     ecx, [ebp+var_28]
.text:0000061F                 and     ecx, 0Fh
.text:00000622                 jnz     short loc_639
.text:00000624                 mov     edx, [ebp+var_28]
.text:00000627                 mov     eax, [ebp+Size]
.text:0000062A                 lea     ecx, [eax+edx+10h]
.text:0000062E                 mov     edx, [ebp+var_8]
.text:00000631                 cmp     ecx, [edx+194h]
.text:00000637                 jz      short loc_643
.text:00000639
.text:00000639 loc_639:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+1A2j
.text:00000639                 mov     eax, 80004001h
.text:0000063E                 jmp     loc_83E
.text:00000643 ; ---------------------------------------------------------------------------
.text:00000643
.text:00000643 loc_643:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+1B7j
.text:00000643                 mov     esi, esp
.text:00000645                 mov     eax, [ebp+var_8]
.text:00000648                 mov     ecx, [eax+170h]
.text:0000064E                 push    ecx
.text:0000064F                 mov     edx, [ebp+var_8]
.text:00000652                 add     edx, 150h
.text:00000658                 push    edx
.text:00000659                 mov     eax, [ebp+var_8]
.text:0000065C                 add     eax, 4
.text:0000065F                 mov     ecx, [ebp+var_8]
.text:00000662                 mov     edx, [ecx+4]
.text:00000665                 push    eax
.text:00000666                 mov     eax, [edx+0Ch]
.text:00000669                 call    eax
.text:0000066B                 cmp     esi, esp
.text:0000066D                 call    __RTC_CheckEsp
.text:00000672                 mov     [ebp+var_2C], eax
.text:00000675                 cmp     [ebp+var_2C], 0
.text:00000679                 jz      short loc_683
.text:0000067B                 mov     eax, [ebp+var_2C]
.text:0000067E                 jmp     loc_83E
.text:00000683 ; ---------------------------------------------------------------------------
.text:00000683
.text:00000683 loc_683:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+1F9j
.text:00000683                 mov     esi, esp
.text:00000685                 push    10h
.text:00000687                 mov     ecx, [ebp+var_8]
.text:0000068A                 add     ecx, 184h
.text:00000690                 push    ecx
.text:00000691                 mov     edx, [ebp+var_8]
.text:00000694                 add     edx, 4
.text:00000697                 mov     eax, [ebp+var_8]
.text:0000069A                 mov     ecx, [eax+4]
.text:0000069D                 push    edx
.text:0000069E                 mov     edx, [ecx+10h]
.text:000006A1                 call    edx
.text:000006A3                 cmp     esi, esp
.text:000006A5                 call    __RTC_CheckEsp
.text:000006AA                 mov     [ebp+var_30], eax
.text:000006AD                 cmp     [ebp+var_30], 0
.text:000006B1                 jz      short loc_6BB
.text:000006B3                 mov     eax, [ebp+var_30]
.text:000006B6                 jmp     loc_83E
.text:000006BB ; ---------------------------------------------------------------------------
.text:000006BB
.text:000006BB loc_6BB:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+231j
.text:000006BB                 mov     eax, [ebp+var_8]
.text:000006BE                 mov     ecx, [eax]
.text:000006C0                 mov     esi, esp
.text:000006C2                 mov     edx, [ebp+var_8]
.text:000006C5                 push    edx
.text:000006C6                 mov     eax, [ecx+0Ch]
.text:000006C9                 call    eax
.text:000006CB                 cmp     esi, esp
.text:000006CD                 call    __RTC_CheckEsp
.text:000006D2                 mov     [ebp+var_34], eax
.text:000006D5                 cmp     [ebp+var_34], 0
.text:000006D9                 jz      short loc_6E3
.text:000006DB                 mov     eax, [ebp+var_34]
.text:000006DE                 jmp     loc_83E
.text:000006E3 ; ---------------------------------------------------------------------------
.text:000006E3
.text:000006E3 loc_6E3:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+259j
.text:000006E3                 mov     esi, esp
.text:000006E5                 mov     ecx, [ebp+Size]
.text:000006E8                 push    ecx
.text:000006E9                 mov     edx, [ebp+Dst]
.text:000006EC                 push    edx
.text:000006ED                 mov     eax, [ebp+var_8]
.text:000006F0                 mov     ecx, [eax]
.text:000006F2                 mov     edx, [ebp+var_8]
.text:000006F5                 push    edx
.text:000006F6                 mov     eax, [ecx+10h]
.text:000006F9                 call    eax
.text:000006FB                 cmp     esi, esp
.text:000006FD                 call    __RTC_CheckEsp
.text:00000702                 lea     ecx, [ebp+var_C0] ; this
.text:00000708                 call    ?Init@CContextBase@NSha1@NCrypto@@QAEXXZ ; NCrypto::NSha1::CContextBase::Init(void)
.text:0000070D                 mov     ecx, [ebp+var_8]
.text:00000710                 mov     edx, [ecx+180h]
.text:00000716                 push    edx             ; unsigned int
.text:00000717                 mov     eax, [ebp+var_8]
.text:0000071A                 add     eax, 184h
.text:0000071F                 push    eax             ; unsigned __int8 *
.text:00000720                 lea     ecx, [ebp+var_C0] ; this
.text:00000726                 call    ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CContext::Update(uchar const *,uint)
.text:0000072B                 mov     ecx, [ebp+Size]
.text:0000072E                 sub     ecx, 10h
.text:00000731                 push    ecx             ; unsigned int
.text:00000732                 mov     edx, [ebp+Dst]
.text:00000735                 push    edx             ; unsigned __int8 *
.text:00000736                 lea     ecx, [ebp+var_C0] ; this
.text:0000073C                 call    ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CContext::Update(uchar const *,uint)
.text:00000741                 lea     eax, [ebp+var_58]
.text:00000744                 push    eax             ; Dst
.text:00000745                 lea     ecx, [ebp+var_C0]
.text:0000074B                 push    ecx             ; NCrypto::NSha1::CContext *
.text:0000074C                 call    ?DeriveKey@NZipStrong@NCrypto@@YGXAAVCContext@NSha1@2@PAE@Z ; NCrypto::NZipStrong::DeriveKey(NCrypto::NSha1::CContext &,uchar *)
.text:00000751                 mov     esi, esp
.text:00000753                 mov     edx, [ebp+var_8]
.text:00000756                 mov     eax, [edx+170h]
.text:0000075C                 push    eax
.text:0000075D                 lea     ecx, [ebp+var_58]
.text:00000760                 push    ecx
.text:00000761                 mov     edx, [ebp+var_8]
.text:00000764                 add     edx, 4
.text:00000767                 mov     eax, [ebp+var_8]
.text:0000076A                 mov     ecx, [eax+4]
.text:0000076D                 push    edx
.text:0000076E                 mov     edx, [ecx+0Ch]
.text:00000771                 call    edx
.text:00000773                 cmp     esi, esp
.text:00000775                 call    __RTC_CheckEsp
.text:0000077A                 mov     [ebp+var_C8], eax
.text:00000780                 cmp     [ebp+var_C8], 0
.text:00000787                 jz      short loc_794
.text:00000789                 mov     eax, [ebp+var_C8]
.text:0000078F                 jmp     loc_83E
.text:00000794 ; ---------------------------------------------------------------------------
.text:00000794
.text:00000794 loc_794:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+307j
.text:00000794                 mov     esi, esp
.text:00000796                 push    10h
.text:00000798                 mov     eax, [ebp+var_8]
.text:0000079B                 add     eax, 184h
.text:000007A0                 push    eax
.text:000007A1                 mov     ecx, [ebp+var_8]
.text:000007A4                 add     ecx, 4
.text:000007A7                 mov     edx, [ebp+var_8]
.text:000007AA                 mov     eax, [edx+4]
.text:000007AD                 push    ecx
.text:000007AE                 mov     ecx, [eax+10h]
.text:000007B1                 call    ecx
.text:000007B3                 cmp     esi, esp
.text:000007B5                 call    __RTC_CheckEsp
.text:000007BA                 mov     [ebp+var_CC], eax
.text:000007C0                 cmp     [ebp+var_CC], 0
.text:000007C7                 jz      short loc_7D1
.text:000007C9                 mov     eax, [ebp+var_CC]
.text:000007CF                 jmp     short loc_83E
.text:000007D1 ; ---------------------------------------------------------------------------
.text:000007D1
.text:000007D1 loc_7D1:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+347j
.text:000007D1                 mov     edx, [ebp+var_8]
.text:000007D4                 mov     eax, [edx]
.text:000007D6                 mov     esi, esp
.text:000007D8                 mov     ecx, [ebp+var_8]
.text:000007DB                 push    ecx
.text:000007DC                 mov     edx, [eax+0Ch]
.text:000007DF                 call    edx
.text:000007E1                 cmp     esi, esp
.text:000007E3                 call    __RTC_CheckEsp
.text:000007E8                 mov     esi, esp
.text:000007EA                 mov     eax, [ebp+var_28]
.text:000007ED                 push    eax
.text:000007EE                 mov     ecx, [ebp+var_24]
.text:000007F1                 push    ecx
.text:000007F2                 mov     edx, [ebp+var_8]
.text:000007F5                 mov     eax, [edx]
.text:000007F7                 mov     ecx, [ebp+var_8]
.text:000007FA                 push    ecx
.text:000007FB                 mov     edx, [eax+10h]
.text:000007FE                 call    edx
.text:00000800                 cmp     esi, esp
.text:00000802                 call    __RTC_CheckEsp
.text:00000807                 cmp     [ebp+var_28], 4
.text:0000080B                 jnb     short loc_814
.text:0000080D                 mov     eax, 80004001h
.text:00000812                 jmp     short loc_83E
.text:00000814 ; ---------------------------------------------------------------------------
.text:00000814
.text:00000814 loc_814:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+38Bj
.text:00000814                 mov     eax, [ebp+var_28]
.text:00000817                 sub     eax, 4
.text:0000081A                 mov     [ebp+var_28], eax
.text:0000081D                 mov     edx, [ebp+var_28]
.text:00000820                 mov     ecx, [ebp+var_24]
.text:00000823                 call    @CrcCalc@8      ; CrcCalc(x,x)
.text:00000828                 mov     ecx, [ebp+var_24]
.text:0000082B                 add     ecx, [ebp+var_28]
.text:0000082E                 cmp     [ecx], eax
.text:00000830                 jz      short loc_836
.text:00000832                 xor     eax, eax
.text:00000834                 jmp     short loc_83E
.text:00000836 ; ---------------------------------------------------------------------------
.text:00000836
.text:00000836 loc_836:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+3B0j
.text:00000836                 mov     edx, [ebp+arg_0]
.text:00000839                 mov     byte ptr [edx], 1
.text:0000083C                 xor     eax, eax
.text:0000083E
.text:0000083E loc_83E:                                ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+43j
.text:0000083E                                         ; NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+6Cj ...
.text:0000083E                 push    edx
.text:0000083F                 mov     ecx, ebp
.text:00000841                 push    eax
.text:00000842                 lea     edx, $LN25
.text:00000848                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000084D                 pop     eax
.text:0000084E                 pop     edx
.text:0000084F                 pop     edi
.text:00000850                 pop     esi
.text:00000851                 mov     ecx, [ebp+var_4]
.text:00000854                 xor     ecx, ebp
.text:00000856                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000085B                 add     esp, 0CCh
.text:00000861                 cmp     ebp, esp
.text:00000863                 call    __RTC_CheckEsp
.text:00000868                 mov     esp, ebp
.text:0000086A                 pop     ebp
.text:0000086B                 retn    4
.text:0000086B ?Init_and_CheckPassword@CDecoder@NZipStrong@NCrypto@@QAEJAA_N@Z endp
.text:0000086B
.text:0000086B ; ---------------------------------------------------------------------------
.text:0000086E                 align 10h
.text:00000870 $LN25           dd 2                    ; DATA XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+3C2o
.text:00000874                 dd offset $LN24
.text:00000878 $LN24           dd 0FFFFFFA8h, 20h      ; DATA XREF: .text:00000874o
.text:00000880                 dd offset $LN22         ; "fileKey"
.text:00000884                 dd 0FFFFFF40h, 60h
.text:0000088C                 dd offset $LN23
.text:00000890 $LN23           dd 616873h              ; DATA XREF: .text:0000088Co
.text:00000894 $LN22           db 'fileKey',0          ; DATA XREF: .text:00000880o
.text:00000894 _text           ends
.text:00000894
.rtc$TMZ:0000089C ; ===========================================================================
.rtc$TMZ:0000089C
.rtc$TMZ:0000089C ; Segment type: Pure data
.rtc$TMZ:0000089C ; Segment permissions: Read
.rtc$TMZ:0000089C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000089C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000089C                 ;org 89Ch
.rtc$TMZ:0000089C ; COMDAT (pick any)
.rtc$TMZ:0000089C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000089C _rtc$TMZ        ends
.rtc$TMZ:0000089C
.rtc$IMZ:000008A0 ; ===========================================================================
.rtc$IMZ:000008A0
.rtc$IMZ:000008A0 ; Segment type: Pure data
.rtc$IMZ:000008A0 ; Segment permissions: Read
.rtc$IMZ:000008A0 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000008A0                 assume cs:_rtc$IMZ
.rtc$IMZ:000008A0                 ;org 8A0h
.rtc$IMZ:000008A0 ; COMDAT (pick any)
.rtc$IMZ:000008A0 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000008A0 _rtc$IMZ        ends
.rtc$IMZ:000008A0
.text:000008A4 ; ===========================================================================
.text:000008A4
.text:000008A4 ; Segment type: Pure code
.text:000008A4 ; Segment permissions: Read/Execute
.text:000008A4 _text           segment para public 'CODE' use32
.text:000008A4                 assume cs:_text
.text:000008A4                 ;org 8A4h
.text:000008A4 ; COMDAT (pick any)
.text:000008A4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000008A4
.text:000008A4 ; =============== S U B R O U T I N E =======================================
.text:000008A4
.text:000008A4 ; Attributes: bp-based frame
.text:000008A4
.text:000008A4 ; void __thiscall NCrypto::NSha1::CContextBase::Init(NCrypto::NSha1::CContextBase *__hidden this)
.text:000008A4                 public ?Init@CContextBase@NSha1@NCrypto@@QAEXXZ
.text:000008A4 ?Init@CContextBase@NSha1@NCrypto@@QAEXXZ proc near
.text:000008A4                                         ; CODE XREF: NCrypto::NZipStrong::CKeyInfo::SetPassword(uchar const *,uint)+28p
.text:000008A4                                         ; NCrypto::NZipStrong::DeriveKey2(uchar const *,uchar,uchar *)+73p ...
.text:000008A4
.text:000008A4 var_4           = dword ptr -4
.text:000008A4
.text:000008A4                 push    ebp
.text:000008A5                 mov     ebp, esp
.text:000008A7                 push    ecx
.text:000008A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008AF                 mov     [ebp+var_4], ecx
.text:000008B2                 mov     eax, [ebp+var_4]
.text:000008B5                 push    eax
.text:000008B6                 call    _Sha1_Init@4    ; Sha1_Init(x)
.text:000008BB                 add     esp, 4
.text:000008BE                 cmp     ebp, esp
.text:000008C0                 call    __RTC_CheckEsp
.text:000008C5                 mov     esp, ebp
.text:000008C7                 pop     ebp
.text:000008C8                 retn
.text:000008C8 ?Init@CContextBase@NSha1@NCrypto@@QAEXXZ endp
.text:000008C8
.text:000008C8 ; ---------------------------------------------------------------------------
.text:000008C9                 align 4
.text:000008C9 _text           ends
.text:000008C9
.text:000008CC ; ===========================================================================
.text:000008CC
.text:000008CC ; Segment type: Pure code
.text:000008CC ; Segment permissions: Read/Execute
.text:000008CC _text           segment para public 'CODE' use32
.text:000008CC                 assume cs:_text
.text:000008CC                 ;org 8CCh
.text:000008CC ; COMDAT (pick any)
.text:000008CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000008CC
.text:000008CC ; =============== S U B R O U T I N E =======================================
.text:000008CC
.text:000008CC ; Attributes: bp-based frame
.text:000008CC
.text:000008CC ; void __thiscall NCrypto::NSha1::CContext::Update(NCrypto::NSha1::CContext *this, const unsigned __int8 *, unsigned int)
.text:000008CC                 public ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z
.text:000008CC ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z proc near
.text:000008CC                                         ; CODE XREF: NCrypto::NZipStrong::CKeyInfo::SetPassword(uchar const *,uint)+38p
.text:000008CC                                         ; NCrypto::NZipStrong::DeriveKey2(uchar const *,uchar,uchar *)+84p ...
.text:000008CC
.text:000008CC var_4           = dword ptr -4
.text:000008CC arg_0           = dword ptr  8
.text:000008CC arg_4           = dword ptr  0Ch
.text:000008CC
.text:000008CC                 push    ebp
.text:000008CD                 mov     ebp, esp
.text:000008CF                 push    ecx
.text:000008D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008D7                 mov     [ebp+var_4], ecx
.text:000008DA                 mov     eax, [ebp+arg_4]
.text:000008DD                 push    eax
.text:000008DE                 mov     ecx, [ebp+arg_0]
.text:000008E1                 push    ecx
.text:000008E2                 mov     edx, [ebp+var_4]
.text:000008E5                 push    edx
.text:000008E6                 call    _Sha1_Update@12 ; Sha1_Update(x,x,x)
.text:000008EB                 add     esp, 4
.text:000008EE                 cmp     ebp, esp
.text:000008F0                 call    __RTC_CheckEsp
.text:000008F5                 mov     esp, ebp
.text:000008F7                 pop     ebp
.text:000008F8                 retn    8
.text:000008F8 ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z endp
.text:000008F8
.text:000008F8 ; ---------------------------------------------------------------------------
.text:000008FB                 align 4
.text:000008FB _text           ends
.text:000008FB
.text:000008FC ; ===========================================================================
.text:000008FC
.text:000008FC ; Segment type: Pure code
.text:000008FC ; Segment permissions: Read/Execute
.text:000008FC _text           segment para public 'CODE' use32
.text:000008FC                 assume cs:_text
.text:000008FC                 ;org 8FCh
.text:000008FC ; COMDAT (pick any)
.text:000008FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000008FC
.text:000008FC ; =============== S U B R O U T I N E =======================================
.text:000008FC
.text:000008FC ; Attributes: bp-based frame
.text:000008FC
.text:000008FC ; void __thiscall NCrypto::NSha1::CContext::Final(NCrypto::NSha1::CContext *this, unsigned __int8 *)
.text:000008FC                 public ?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z
.text:000008FC ?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z proc near
.text:000008FC                                         ; CODE XREF: NCrypto::NZipStrong::DeriveKey(NCrypto::NSha1::CContext &,uchar *)+27p
.text:000008FC                                         ; NCrypto::NZipStrong::DeriveKey2(uchar const *,uchar,uchar *)+93p
.text:000008FC
.text:000008FC var_4           = dword ptr -4
.text:000008FC arg_0           = dword ptr  8
.text:000008FC
.text:000008FC                 push    ebp
.text:000008FD                 mov     ebp, esp
.text:000008FF                 push    ecx
.text:00000900                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000907                 mov     [ebp+var_4], ecx
.text:0000090A                 mov     eax, [ebp+arg_0]
.text:0000090D                 push    eax
.text:0000090E                 mov     ecx, [ebp+var_4]
.text:00000911                 push    ecx
.text:00000912                 call    _Sha1_Final@8   ; Sha1_Final(x,x)
.text:00000917                 add     esp, 4
.text:0000091A                 cmp     ebp, esp
.text:0000091C                 call    __RTC_CheckEsp
.text:00000921                 mov     esp, ebp
.text:00000923                 pop     ebp
.text:00000924                 retn    4
.text:00000924 ?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z endp
.text:00000924
.text:00000924 ; ---------------------------------------------------------------------------
.text:00000927                 align 4
.text:00000927 _text           ends
.text:00000927
.text:00000928 ; ===========================================================================
.text:00000928
.text:00000928 ; Segment type: Pure code
.text:00000928 ; Segment permissions: Read/Execute
.text:00000928 _text           segment para public 'CODE' use32
.text:00000928                 assume cs:_text
.text:00000928                 ;org 928h
.text:00000928 ; COMDAT (pick any)
.text:00000928                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000928
.text:00000928 ; =============== S U B R O U T I N E =======================================
.text:00000928
.text:00000928 ; Attributes: bp-based frame
.text:00000928
.text:00000928 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char *(void)
.text:00000928                 public ??B?$CBuffer@E@@QAEPAEXZ
.text:00000928 ??B?$CBuffer@E@@QAEPAEXZ proc near      ; CODE XREF: NCrypto::NZipStrong::CDecoder::ReadHeader(ISequentialInStream *,uint,unsigned __int64)+182p
.text:00000928
.text:00000928 var_4           = dword ptr -4
.text:00000928
.text:00000928                 push    ebp
.text:00000929                 mov     ebp, esp
.text:0000092B                 push    ecx
.text:0000092C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000933                 mov     [ebp+var_4], ecx
.text:00000936                 mov     eax, [ebp+var_4]
.text:00000939                 mov     eax, [eax]
.text:0000093B                 mov     esp, ebp
.text:0000093D                 pop     ebp
.text:0000093E                 retn
.text:0000093E ??B?$CBuffer@E@@QAEPAEXZ endp
.text:0000093E
.text:0000093E ; ---------------------------------------------------------------------------
.text:0000093F                 align 10h
.text:0000093F _text           ends
.text:0000093F
.text:00000940 ; ===========================================================================
.text:00000940
.text:00000940 ; Segment type: Pure code
.text:00000940 ; Segment permissions: Read/Execute
.text:00000940 _text           segment para public 'CODE' use32
.text:00000940                 assume cs:_text
.text:00000940                 ;org 940h
.text:00000940 ; COMDAT (pick any)
.text:00000940                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000940
.text:00000940 ; =============== S U B R O U T I N E =======================================
.text:00000940
.text:00000940 ; Attributes: bp-based frame
.text:00000940
.text:00000940 ; public: unsigned int __thiscall CBuffer<unsigned char>::Size(void)const
.text:00000940                 public ?Size@?$CBuffer@E@@QBEIXZ
.text:00000940 ?Size@?$CBuffer@E@@QBEIXZ proc near     ; CODE XREF: NCrypto::NZipStrong::CDecoder::ReadHeader(ISequentialInStream *,uint,unsigned __int64)+155p
.text:00000940
.text:00000940 var_4           = dword ptr -4
.text:00000940
.text:00000940                 push    ebp
.text:00000941                 mov     ebp, esp
.text:00000943                 push    ecx
.text:00000944                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000094B                 mov     [ebp+var_4], ecx
.text:0000094E                 mov     eax, [ebp+var_4]
.text:00000951                 mov     eax, [eax+4]
.text:00000954                 mov     esp, ebp
.text:00000956                 pop     ebp
.text:00000957                 retn
.text:00000957 ?Size@?$CBuffer@E@@QBEIXZ endp
.text:00000957
.text:00000957 _text           ends
.text:00000957
.text:00000958 ; ===========================================================================
.text:00000958
.text:00000958 ; Segment type: Pure code
.text:00000958 ; Segment permissions: Read/Execute
.text:00000958 _text           segment para public 'CODE' use32
.text:00000958                 assume cs:_text
.text:00000958                 ;org 958h
.text:00000958 ; COMDAT (pick any)
.text:00000958                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000958
.text:00000958 ; =============== S U B R O U T I N E =======================================
.text:00000958
.text:00000958 ; Attributes: bp-based frame
.text:00000958
.text:00000958 ; public: void __thiscall CBuffer<unsigned char>::Alloc(unsigned int)
.text:00000958                 public ?Alloc@?$CBuffer@E@@QAEXI@Z
.text:00000958 ?Alloc@?$CBuffer@E@@QAEXI@Z proc near   ; CODE XREF: NCrypto::NZipStrong::CDecoder::ReadHeader(ISequentialInStream *,uint,unsigned __int64)+174p
.text:00000958
.text:00000958 var_8           = dword ptr -8
.text:00000958 var_4           = dword ptr -4
.text:00000958 arg_0           = dword ptr  8
.text:00000958
.text:00000958                 push    ebp
.text:00000959                 mov     ebp, esp
.text:0000095B                 sub     esp, 8
.text:0000095E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000965                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000096C                 mov     [ebp+var_4], ecx
.text:0000096F                 mov     eax, [ebp+var_4]
.text:00000972                 mov     ecx, [ebp+arg_0]
.text:00000975                 cmp     ecx, [eax+4]
.text:00000978                 jz      short loc_9A8
.text:0000097A                 mov     ecx, [ebp+var_4]
.text:0000097D                 call    ?Free@?$CBuffer@E@@QAEXXZ ; CBuffer<uchar>::Free(void)
.text:00000982                 cmp     [ebp+arg_0], 0
.text:00000986                 jz      short loc_9A8
.text:00000988                 mov     edx, [ebp+arg_0]
.text:0000098B                 push    edx             ; unsigned int
.text:0000098C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000991                 add     esp, 4
.text:00000994                 mov     [ebp+var_8], eax
.text:00000997                 mov     eax, [ebp+var_4]
.text:0000099A                 mov     ecx, [ebp+var_8]
.text:0000099D                 mov     [eax], ecx
.text:0000099F                 mov     edx, [ebp+var_4]
.text:000009A2                 mov     eax, [ebp+arg_0]
.text:000009A5                 mov     [edx+4], eax
.text:000009A8
.text:000009A8 loc_9A8:                                ; CODE XREF: CBuffer<uchar>::Alloc(uint)+20j
.text:000009A8                                         ; CBuffer<uchar>::Alloc(uint)+2Ej
.text:000009A8                 add     esp, 8
.text:000009AB                 cmp     ebp, esp
.text:000009AD                 call    __RTC_CheckEsp
.text:000009B2                 mov     esp, ebp
.text:000009B4                 pop     ebp
.text:000009B5                 retn    4
.text:000009B5 ?Alloc@?$CBuffer@E@@QAEXI@Z endp
.text:000009B5
.text:000009B5 _text           ends
.text:000009B5
.text:000009B8 ; ===========================================================================
.text:000009B8
.text:000009B8 ; Segment type: Pure code
.text:000009B8 ; Segment permissions: Read/Execute
.text:000009B8 _text           segment para public 'CODE' use32
.text:000009B8                 assume cs:_text
.text:000009B8                 ;org 9B8h
.text:000009B8 ; COMDAT (pick any)
.text:000009B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000009B8
.text:000009B8 ; =============== S U B R O U T I N E =======================================
.text:000009B8
.text:000009B8 ; Attributes: bp-based frame
.text:000009B8
.text:000009B8 ; public: void __thiscall CBuffer<unsigned char>::Free(void)
.text:000009B8                 public ?Free@?$CBuffer@E@@QAEXXZ
.text:000009B8 ?Free@?$CBuffer@E@@QAEXXZ proc near     ; CODE XREF: CBuffer<uchar>::Alloc(uint)+25p
.text:000009B8
.text:000009B8 var_8           = dword ptr -8
.text:000009B8 var_4           = dword ptr -4
.text:000009B8
.text:000009B8                 push    ebp
.text:000009B9                 mov     ebp, esp
.text:000009BB                 sub     esp, 8
.text:000009BE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000009C5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009CC                 mov     [ebp+var_4], ecx
.text:000009CF                 mov     eax, [ebp+var_4]
.text:000009D2                 cmp     dword ptr [eax], 0
.text:000009D5                 jz      short loc_9F4
.text:000009D7                 mov     ecx, [ebp+var_4]
.text:000009DA                 mov     edx, [ecx]
.text:000009DC                 mov     [ebp+var_8], edx
.text:000009DF                 mov     eax, [ebp+var_8]
.text:000009E2                 push    eax             ; void *
.text:000009E3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000009E8                 add     esp, 4
.text:000009EB                 mov     ecx, [ebp+var_4]
.text:000009EE                 mov     dword ptr [ecx], 0
.text:000009F4
.text:000009F4 loc_9F4:                                ; CODE XREF: CBuffer<uchar>::Free(void)+1Dj
.text:000009F4                 mov     edx, [ebp+var_4]
.text:000009F7                 mov     dword ptr [edx+4], 0
.text:000009FE                 add     esp, 8
.text:00000A01                 cmp     ebp, esp
.text:00000A03                 call    __RTC_CheckEsp
.text:00000A08                 mov     esp, ebp
.text:00000A0A                 pop     ebp
.text:00000A0B                 retn
.text:00000A0B ?Free@?$CBuffer@E@@QAEXXZ endp
.text:00000A0B
.text:00000A0B _text           ends
.text:00000A0B
UNDEF:00000A10 ; ===========================================================================
UNDEF:00000A10
UNDEF:00000A10 ; Segment type: Externs
UNDEF:00000A10 ; UNDEF
UNDEF:00000A10                 extrn ___security_cookie:near
UNDEF:00000A10                                         ; DATA XREF: NCrypto::NZipStrong::CKeyInfo::SetPassword(uchar const *,uint)+18r
UNDEF:00000A10                                         ; NCrypto::NZipStrong::DeriveKey(NCrypto::NSha1::CContext &,uchar *)+16r ...
UNDEF:00000A14                 extrn __RTC_CheckEsp:near
UNDEF:00000A14                                         ; CODE XREF: NCrypto::NZipStrong::CKeyInfo::SetPassword(uchar const *,uint)+6Bp
UNDEF:00000A14                                         ; NCrypto::NZipStrong::DeriveKey(NCrypto::NSha1::CContext &,uchar *)+7Dp ...
UNDEF:00000A18 ; __fastcall __security_check_cookie(x)
UNDEF:00000A18                 extrn @__security_check_cookie@4:near
UNDEF:00000A18                                         ; CODE XREF: NCrypto::NZipStrong::CKeyInfo::SetPassword(uchar const *,uint)+61p
UNDEF:00000A18                                         ; NCrypto::NZipStrong::DeriveKey(NCrypto::NSha1::CContext &,uchar *)+73p ...
UNDEF:00000A1C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000A1C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000A1C                                         ; CODE XREF: NCrypto::NZipStrong::CKeyInfo::SetPassword(uchar const *,uint)+54p
UNDEF:00000A1C                                         ; NCrypto::NZipStrong::DeriveKey(NCrypto::NSha1::CContext &,uchar *)+66p ...
UNDEF:00000A20                 extrn __RTC_Shutdown:near
UNDEF:00000A20                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000A24                 extrn __RTC_InitBase:near
UNDEF:00000A24                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000A28 ; __stdcall Sha1_Init(x)
UNDEF:00000A28                 extrn _Sha1_Init@4:near ; CODE XREF: NCrypto::NSha1::CContextBase::Init(void)+12p
UNDEF:00000A2C ; __stdcall Sha1_Update(x, x, x)
UNDEF:00000A2C                 extrn _Sha1_Update@12:near
UNDEF:00000A2C                                         ; CODE XREF: NCrypto::NSha1::CContext::Update(uchar const *,uint)+1Ap
UNDEF:00000A30 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00000A30                 extrn _memcpy:near      ; CODE XREF: NCrypto::NZipStrong::DeriveKey(NCrypto::NSha1::CContext &,uchar *)+54p
UNDEF:00000A34 ; __stdcall Sha1_Final(x, x)
UNDEF:00000A34                 extrn _Sha1_Final@8:near
UNDEF:00000A34                                         ; CODE XREF: NCrypto::NSha1::CContext::Final(uchar *)+16p
UNDEF:00000A38 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:00000A38                 extrn _memset:near      ; CODE XREF: NCrypto::NZipStrong::DeriveKey2(uchar const *,uchar,uchar *)+31p
UNDEF:00000A38                                         ; NCrypto::NZipStrong::CDecoder::ReadHeader(ISequentialInStream *,uint,unsigned __int64)+6Ep
UNDEF:00000A3C ; __int32 __stdcall ReadStream_FALSE(struct ISequentialInStream *, void *, unsigned int)
UNDEF:00000A3C                 extrn ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z:near
UNDEF:00000A3C                                         ; CODE XREF: NCrypto::NZipStrong::CDecoder::ReadHeader(ISequentialInStream *,uint,unsigned __int64)+31p
UNDEF:00000A3C                                         ; NCrypto::NZipStrong::CDecoder::ReadHeader(ISequentialInStream *,uint,unsigned __int64)+C9p ...
UNDEF:00000A40 ; __fastcall CrcCalc(x, x)
UNDEF:00000A40                 extrn @CrcCalc@8:near   ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+3A3p
UNDEF:00000A44 ; void *__cdecl _memmove(void *Dst, const void *Src, size_t Size)
UNDEF:00000A44                 extrn __imp__memmove:near
UNDEF:00000A44                                         ; CODE XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+162p
UNDEF:00000A44                                         ; DATA XREF: NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword(bool &)+162r
UNDEF:00000A48 ; void *__cdecl operator new(unsigned int)
UNDEF:00000A48                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CBuffer<uchar>::Alloc(uint)+34p
UNDEF:00000A4C ; void __cdecl operator delete(void *)
UNDEF:00000A4C                 extrn ??3@YAXPAX@Z:near ; CODE XREF: CBuffer<uchar>::Free(void)+2Bp
UNDEF:00000A4C
UNDEF:00000A4C
UNDEF:00000A4C                 end