.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 9E68BCC5CA9D518F2C9ABD94F539C189
.text:00000000 ; Input CRC32 : 9CD83D13
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\IntToString.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; void __stdcall ConvertUInt32ToString(unsigned int, char *)
.text:00000000                 public ?ConvertUInt32ToString@@YGXIPAD@Z
.text:00000000 ?ConvertUInt32ToString@@YGXIPAD@Z proc near
.text:00000000                                         ; CODE XREF: ConvertUInt64ToString(unsigned __int64,char *)+36p
.text:00000000
.text:00000000 var_20          = dword ptr -20h
.text:00000000 var_1C          = dword ptr -1Ch
.text:00000000 var_18          = dword ptr -18h
.text:00000000 var_14          = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 20h
.text:00000006                 mov     eax, 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_20], eax
.text:0000000E                 mov     [ebp+var_1C], eax
.text:00000011                 mov     [ebp+var_18], eax
.text:00000014                 mov     [ebp+var_14], eax
.text:00000017                 mov     [ebp+var_10], eax
.text:0000001A                 mov     [ebp+var_C], eax
.text:0000001D                 mov     [ebp+var_8], eax
.text:00000020                 mov     [ebp+var_4], eax
.text:00000023                 mov     eax, dword ptr ds:___security_cookie
.text:00000028                 xor     eax, ebp
.text:0000002A                 mov     [ebp+var_4], eax
.text:0000002D                 mov     [ebp+var_20], 0
.text:00000034
.text:00000034 loc_34:                                 ; CODE XREF: ConvertUInt32ToString(uint,char *)+68j
.text:00000034                 cmp     [ebp+arg_0], 0Ah
.text:00000038                 jb      short loc_6A
.text:0000003A                 mov     eax, [ebp+arg_0]
.text:0000003D                 xor     edx, edx
.text:0000003F                 mov     ecx, 0Ah
.text:00000044                 div     ecx
.text:00000046                 add     edx, 30h ; '0'
.text:00000049                 mov     eax, [ebp+var_20]
.text:0000004C                 mov     byte ptr [ebp+eax+var_18], dl
.text:00000050                 mov     ecx, [ebp+var_20]
.text:00000053                 add     ecx, 1
.text:00000056                 mov     [ebp+var_20], ecx
.text:00000059                 mov     eax, [ebp+arg_0]
.text:0000005C                 xor     edx, edx
.text:0000005E                 mov     ecx, 0Ah
.text:00000063                 div     ecx
.text:00000065                 mov     [ebp+arg_0], eax
.text:00000068                 jmp     short loc_34
.text:0000006A ; ---------------------------------------------------------------------------
.text:0000006A
.text:0000006A loc_6A:                                 ; CODE XREF: ConvertUInt32ToString(uint,char *)+38j
.text:0000006A                 mov     edx, [ebp+arg_0]
.text:0000006D                 add     edx, 30h ; '0'
.text:00000070                 mov     eax, [ebp+arg_4]
.text:00000073                 mov     [eax], dl
.text:00000075                 mov     ecx, [ebp+arg_4]
.text:00000078                 add     ecx, 1
.text:0000007B                 mov     [ebp+arg_4], ecx
.text:0000007E
.text:0000007E loc_7E:                                 ; CODE XREF: ConvertUInt32ToString(uint,char *)+A2j
.text:0000007E                 cmp     [ebp+var_20], 0
.text:00000082                 jz      short loc_A4
.text:00000084                 mov     edx, [ebp+var_20]
.text:00000087                 sub     edx, 1
.text:0000008A                 mov     [ebp+var_20], edx
.text:0000008D                 mov     eax, [ebp+arg_4]
.text:00000090                 mov     ecx, [ebp+var_20]
.text:00000093                 mov     dl, byte ptr [ebp+ecx+var_18]
.text:00000097                 mov     [eax], dl
.text:00000099                 mov     eax, [ebp+arg_4]
.text:0000009C                 add     eax, 1
.text:0000009F                 mov     [ebp+arg_4], eax
.text:000000A2                 jmp     short loc_7E
.text:000000A4 ; ---------------------------------------------------------------------------
.text:000000A4
.text:000000A4 loc_A4:                                 ; CODE XREF: ConvertUInt32ToString(uint,char *)+82j
.text:000000A4                 mov     ecx, [ebp+arg_4]
.text:000000A7                 mov     byte ptr [ecx], 0
.text:000000AA                 push    edx
.text:000000AB                 mov     ecx, ebp
.text:000000AD                 push    eax
.text:000000AE                 lea     edx, $LN9
.text:000000B4                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000000B9                 pop     eax
.text:000000BA                 pop     edx
.text:000000BB                 mov     ecx, [ebp+var_4]
.text:000000BE                 xor     ecx, ebp
.text:000000C0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000000C5                 mov     esp, ebp
.text:000000C7                 pop     ebp
.text:000000C8                 retn    8
.text:000000C8 ?ConvertUInt32ToString@@YGXIPAD@Z endp
.text:000000C8
.text:000000C8 ; ---------------------------------------------------------------------------
.text:000000CB                 align 4
.text:000000CC $LN9            dd 1                    ; DATA XREF: ConvertUInt32ToString(uint,char *)+AEo
.text:000000D0                 dd offset $LN8
.text:000000D4 $LN8            dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:000000D0o
.text:000000DC                 dd offset $LN7          ; "temp"
.text:000000E0 $LN7            db 'temp',0             ; DATA XREF: .text:000000DCo
.text:000000E5                 align 10h
.text:000000F0
.text:000000F0 ; =============== S U B R O U T I N E =======================================
.text:000000F0
.text:000000F0 ; Attributes: bp-based frame
.text:000000F0
.text:000000F0 ; void __stdcall ConvertUInt64ToString(unsigned __int64, char *)
.text:000000F0                 public ?ConvertUInt64ToString@@YGX_KPAD@Z
.text:000000F0 ?ConvertUInt64ToString@@YGX_KPAD@Z proc near
.text:000000F0                                         ; CODE XREF: ConvertInt64ToString(__int64,char *)+3Fp
.text:000000F0
.text:000000F0 var_28          = dword ptr -28h
.text:000000F0 var_20          = byte ptr -20h
.text:000000F0 var_4           = dword ptr -4
.text:000000F0 arg_0           = qword ptr  8
.text:000000F0 arg_8           = dword ptr  10h
.text:000000F0
.text:000000F0                 push    ebp
.text:000000F1                 mov     ebp, esp
.text:000000F3                 sub     esp, 28h
.text:000000F6                 push    edi
.text:000000F7                 lea     edi, [ebp+var_28]
.text:000000FA                 mov     ecx, 0Ah
.text:000000FF                 mov     eax, 0CCCCCCCCh
.text:00000104                 rep stosd
.text:00000106                 mov     eax, dword ptr ds:___security_cookie
.text:0000010B                 xor     eax, ebp
.text:0000010D                 mov     [ebp+var_4], eax
.text:00000110                 cmp     dword ptr [ebp+arg_0+4], 0
.text:00000114                 ja      short loc_130
.text:00000116                 jb      short loc_11E
.text:00000118                 cmp     dword ptr [ebp+arg_0], 0FFFFFFFFh
.text:0000011C                 ja      short loc_130
.text:0000011E
.text:0000011E loc_11E:                                ; CODE XREF: ConvertUInt64ToString(unsigned __int64,char *)+26j
.text:0000011E                 mov     eax, [ebp+arg_8]
.text:00000121                 push    eax             ; char *
.text:00000122                 mov     ecx, dword ptr [ebp+arg_0]
.text:00000125                 push    ecx             ; unsigned int
.text:00000126                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:0000012B                 jmp     loc_1C0
.text:00000130 ; ---------------------------------------------------------------------------
.text:00000130
.text:00000130 loc_130:                                ; CODE XREF: ConvertUInt64ToString(unsigned __int64,char *)+24j
.text:00000130                                         ; ConvertUInt64ToString(unsigned __int64,char *)+2Cj
.text:00000130                 mov     [ebp+var_28], 0
.text:00000137
.text:00000137 loc_137:                                ; CODE XREF: ConvertUInt64ToString(unsigned __int64,char *)+8Ej
.text:00000137                 cmp     dword ptr [ebp+arg_0+4], 0
.text:0000013B                 ja      short loc_143
.text:0000013D                 cmp     dword ptr [ebp+arg_0], 0Ah
.text:00000141                 jb      short loc_180
.text:00000143
.text:00000143 loc_143:                                ; CODE XREF: ConvertUInt64ToString(unsigned __int64,char *)+4Bj
.text:00000143                 push    0
.text:00000145                 push    0Ah
.text:00000147                 mov     edx, dword ptr [ebp+arg_0+4]
.text:0000014A                 push    edx
.text:0000014B                 mov     eax, dword ptr [ebp+arg_0]
.text:0000014E                 push    eax
.text:0000014F                 call    __aullrem
.text:00000154                 add     eax, 30h ; '0'
.text:00000157                 mov     ecx, [ebp+var_28]
.text:0000015A                 mov     [ebp+ecx+var_20], al
.text:0000015E                 mov     edx, [ebp+var_28]
.text:00000161                 add     edx, 1
.text:00000164                 mov     [ebp+var_28], edx
.text:00000167                 push    0
.text:00000169                 push    0Ah
.text:0000016B                 mov     eax, dword ptr [ebp+arg_0+4]
.text:0000016E                 push    eax
.text:0000016F                 mov     ecx, dword ptr [ebp+arg_0]
.text:00000172                 push    ecx
.text:00000173                 call    __aulldiv
.text:00000178                 mov     dword ptr [ebp+arg_0], eax
.text:0000017B                 mov     dword ptr [ebp+arg_0+4], edx
.text:0000017E                 jmp     short loc_137
.text:00000180 ; ---------------------------------------------------------------------------
.text:00000180
.text:00000180 loc_180:                                ; CODE XREF: ConvertUInt64ToString(unsigned __int64,char *)+51j
.text:00000180                 mov     edx, dword ptr [ebp+arg_0]
.text:00000183                 add     edx, 30h ; '0'
.text:00000186                 mov     eax, [ebp+arg_8]
.text:00000189                 mov     [eax], dl
.text:0000018B                 mov     ecx, [ebp+arg_8]
.text:0000018E                 add     ecx, 1
.text:00000191                 mov     [ebp+arg_8], ecx
.text:00000194
.text:00000194 loc_194:                                ; CODE XREF: ConvertUInt64ToString(unsigned __int64,char *)+C8j
.text:00000194                 cmp     [ebp+var_28], 0
.text:00000198                 jz      short loc_1BA
.text:0000019A                 mov     edx, [ebp+var_28]
.text:0000019D                 sub     edx, 1
.text:000001A0                 mov     [ebp+var_28], edx
.text:000001A3                 mov     eax, [ebp+arg_8]
.text:000001A6                 mov     ecx, [ebp+var_28]
.text:000001A9                 mov     dl, [ebp+ecx+var_20]
.text:000001AD                 mov     [eax], dl
.text:000001AF                 mov     eax, [ebp+arg_8]
.text:000001B2                 add     eax, 1
.text:000001B5                 mov     [ebp+arg_8], eax
.text:000001B8                 jmp     short loc_194
.text:000001BA ; ---------------------------------------------------------------------------
.text:000001BA
.text:000001BA loc_1BA:                                ; CODE XREF: ConvertUInt64ToString(unsigned __int64,char *)+A8j
.text:000001BA                 mov     ecx, [ebp+arg_8]
.text:000001BD                 mov     byte ptr [ecx], 0
.text:000001C0
.text:000001C0 loc_1C0:                                ; CODE XREF: ConvertUInt64ToString(unsigned __int64,char *)+3Bj
.text:000001C0                 push    edx
.text:000001C1                 mov     ecx, ebp
.text:000001C3                 push    eax
.text:000001C4                 lea     edx, $LN12
.text:000001CA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000001CF                 pop     eax
.text:000001D0                 pop     edx
.text:000001D1                 pop     edi
.text:000001D2                 mov     ecx, [ebp+var_4]
.text:000001D5                 xor     ecx, ebp
.text:000001D7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000001DC                 add     esp, 28h
.text:000001DF                 cmp     ebp, esp
.text:000001E1                 call    __RTC_CheckEsp
.text:000001E6                 mov     esp, ebp
.text:000001E8                 pop     ebp
.text:000001E9                 retn    0Ch
.text:000001E9 ?ConvertUInt64ToString@@YGX_KPAD@Z endp
.text:000001E9
.text:000001E9 ; ---------------------------------------------------------------------------
.text:000001EC $LN12           dd 1                    ; DATA XREF: ConvertUInt64ToString(unsigned __int64,char *)+D4o
.text:000001F0                 dd offset $LN11
.text:000001F4 $LN11           dd 0FFFFFFE0h, 18h      ; DATA XREF: .text:000001F0o
.text:000001FC                 dd offset $LN10         ; "temp"
.text:00000200 $LN10           db 'temp',0             ; DATA XREF: .text:000001FCo
.text:00000205                 align 10h
.text:00000210
.text:00000210 ; =============== S U B R O U T I N E =======================================
.text:00000210
.text:00000210 ; Attributes: bp-based frame
.text:00000210
.text:00000210 ; void __stdcall ConvertUInt64ToOct(unsigned __int64, char *)
.text:00000210                 public ?ConvertUInt64ToOct@@YGX_KPAD@Z
.text:00000210 ?ConvertUInt64ToOct@@YGX_KPAD@Z proc near
.text:00000210
.text:00000210 var_10          = dword ptr -10h
.text:00000210 var_C           = dword ptr -0Ch
.text:00000210 var_8           = dword ptr -8
.text:00000210 var_4           = dword ptr -4
.text:00000210 arg_0           = qword ptr  8
.text:00000210 arg_8           = dword ptr  10h
.text:00000210
.text:00000210                 push    ebp
.text:00000211                 mov     ebp, esp
.text:00000213                 sub     esp, 10h
.text:00000216                 mov     eax, 0CCCCCCCCh
.text:0000021B                 mov     [ebp+var_10], eax
.text:0000021E                 mov     [ebp+var_C], eax
.text:00000221                 mov     [ebp+var_8], eax
.text:00000224                 mov     [ebp+var_4], eax
.text:00000227                 mov     eax, dword ptr [ebp+arg_0]
.text:0000022A                 mov     [ebp+var_8], eax
.text:0000022D                 mov     ecx, dword ptr [ebp+arg_0+4]
.text:00000230                 mov     [ebp+var_4], ecx
.text:00000233                 mov     [ebp+var_C], 1
.text:0000023A                 jmp     short loc_245
.text:0000023C ; ---------------------------------------------------------------------------
.text:0000023C
.text:0000023C loc_23C:                                ; CODE XREF: ConvertUInt64ToOct(unsigned __int64,char *):loc_262j
.text:0000023C                 mov     edx, [ebp+var_C]
.text:0000023F                 add     edx, 1
.text:00000242                 mov     [ebp+var_C], edx
.text:00000245
.text:00000245 loc_245:                                ; CODE XREF: ConvertUInt64ToOct(unsigned __int64,char *)+2Aj
.text:00000245                 mov     eax, [ebp+var_8]
.text:00000248                 mov     edx, [ebp+var_4]
.text:0000024B                 mov     cl, 3
.text:0000024D                 call    __aullshr
.text:00000252                 mov     [ebp+var_8], eax
.text:00000255                 mov     [ebp+var_4], edx
.text:00000258                 mov     eax, [ebp+var_8]
.text:0000025B                 or      eax, [ebp+var_4]
.text:0000025E                 jnz     short loc_262
.text:00000260                 jmp     short loc_264
.text:00000262 ; ---------------------------------------------------------------------------
.text:00000262
.text:00000262 loc_262:                                ; CODE XREF: ConvertUInt64ToOct(unsigned __int64,char *)+4Ej
.text:00000262                 jmp     short loc_23C
.text:00000264 ; ---------------------------------------------------------------------------
.text:00000264
.text:00000264 loc_264:                                ; CODE XREF: ConvertUInt64ToOct(unsigned __int64,char *)+50j
.text:00000264                 mov     ecx, [ebp+arg_8]
.text:00000267                 add     ecx, [ebp+var_C]
.text:0000026A                 mov     byte ptr [ecx], 0
.text:0000026D
.text:0000026D loc_26D:                                ; CODE XREF: ConvertUInt64ToOct(unsigned __int64,char *)+9Aj
.text:0000026D                 mov     edx, dword ptr [ebp+arg_0]
.text:00000270                 and     edx, 7
.text:00000273                 mov     eax, dword ptr [ebp+arg_0+4]
.text:00000276                 and     eax, 0
.text:00000279                 mov     [ebp+var_10], edx
.text:0000027C                 mov     eax, dword ptr [ebp+arg_0]
.text:0000027F                 mov     edx, dword ptr [ebp+arg_0+4]
.text:00000282                 mov     cl, 3
.text:00000284                 call    __aullshr
.text:00000289                 mov     dword ptr [ebp+arg_0], eax
.text:0000028C                 mov     dword ptr [ebp+arg_0+4], edx
.text:0000028F                 mov     ecx, [ebp+var_C]
.text:00000292                 sub     ecx, 1
.text:00000295                 mov     [ebp+var_C], ecx
.text:00000298                 mov     edx, [ebp+var_10]
.text:0000029B                 add     edx, 30h ; '0'
.text:0000029E                 mov     eax, [ebp+arg_8]
.text:000002A1                 add     eax, [ebp+var_C]
.text:000002A4                 mov     [eax], dl
.text:000002A6                 cmp     [ebp+var_C], 0
.text:000002AA                 jnz     short loc_26D
.text:000002AC                 add     esp, 10h
.text:000002AF                 cmp     ebp, esp
.text:000002B1                 call    __RTC_CheckEsp
.text:000002B6                 mov     esp, ebp
.text:000002B8                 pop     ebp
.text:000002B9                 retn    0Ch
.text:000002B9 ?ConvertUInt64ToOct@@YGX_KPAD@Z endp
.text:000002B9
.text:000002B9 ; ---------------------------------------------------------------------------
.text:000002BC                 align 10h
.text:000002C0
.text:000002C0 ; =============== S U B R O U T I N E =======================================
.text:000002C0
.text:000002C0 ; Attributes: bp-based frame
.text:000002C0
.text:000002C0 ; void __stdcall ConvertUInt32ToHex(unsigned int, char *)
.text:000002C0                 public ?ConvertUInt32ToHex@@YGXIPAD@Z
.text:000002C0 ?ConvertUInt32ToHex@@YGXIPAD@Z proc near
.text:000002C0
.text:000002C0 var_10          = dword ptr -10h
.text:000002C0 var_C           = dword ptr -0Ch
.text:000002C0 var_8           = dword ptr -8
.text:000002C0 var_4           = dword ptr -4
.text:000002C0 arg_0           = dword ptr  8
.text:000002C0 arg_4           = dword ptr  0Ch
.text:000002C0
.text:000002C0                 push    ebp
.text:000002C1                 mov     ebp, esp
.text:000002C3                 sub     esp, 10h
.text:000002C6                 mov     eax, 0CCCCCCCCh
.text:000002CB                 mov     [ebp+var_10], eax
.text:000002CE                 mov     [ebp+var_C], eax
.text:000002D1                 mov     [ebp+var_8], eax
.text:000002D4                 mov     [ebp+var_4], eax
.text:000002D7                 mov     eax, [ebp+arg_0]
.text:000002DA                 mov     [ebp+var_4], eax
.text:000002DD                 mov     [ebp+var_8], 1
.text:000002E4                 jmp     short loc_2EF
.text:000002E6 ; ---------------------------------------------------------------------------
.text:000002E6
.text:000002E6 loc_2E6:                                ; CODE XREF: ConvertUInt32ToHex(uint,char *):loc_300j
.text:000002E6                 mov     ecx, [ebp+var_8]
.text:000002E9                 add     ecx, 1
.text:000002EC                 mov     [ebp+var_8], ecx
.text:000002EF
.text:000002EF loc_2EF:                                ; CODE XREF: ConvertUInt32ToHex(uint,char *)+24j
.text:000002EF                 mov     edx, [ebp+var_4]
.text:000002F2                 shr     edx, 4
.text:000002F5                 mov     [ebp+var_4], edx
.text:000002F8                 cmp     [ebp+var_4], 0
.text:000002FC                 jnz     short loc_300
.text:000002FE                 jmp     short loc_302
.text:00000300 ; ---------------------------------------------------------------------------
.text:00000300
.text:00000300 loc_300:                                ; CODE XREF: ConvertUInt32ToHex(uint,char *)+3Cj
.text:00000300                 jmp     short loc_2E6
.text:00000302 ; ---------------------------------------------------------------------------
.text:00000302
.text:00000302 loc_302:                                ; CODE XREF: ConvertUInt32ToHex(uint,char *)+3Ej
.text:00000302                 mov     eax, [ebp+arg_4]
.text:00000305                 add     eax, [ebp+var_8]
.text:00000308                 mov     byte ptr [eax], 0
.text:0000030B
.text:0000030B loc_30B:                                ; CODE XREF: ConvertUInt32ToHex(uint,char *)+8Fj
.text:0000030B                 mov     ecx, [ebp+arg_0]
.text:0000030E                 and     ecx, 0Fh
.text:00000311                 mov     [ebp+var_C], ecx
.text:00000314                 mov     edx, [ebp+arg_0]
.text:00000317                 shr     edx, 4
.text:0000031A                 mov     [ebp+arg_0], edx
.text:0000031D                 cmp     [ebp+var_C], 0Ah
.text:00000321                 jnb     short loc_32E
.text:00000323                 mov     eax, [ebp+var_C]
.text:00000326                 add     eax, 30h ; '0'
.text:00000329                 mov     [ebp+var_10], eax
.text:0000032C                 jmp     short loc_337
.text:0000032E ; ---------------------------------------------------------------------------
.text:0000032E
.text:0000032E loc_32E:                                ; CODE XREF: ConvertUInt32ToHex(uint,char *)+61j
.text:0000032E                 mov     ecx, [ebp+var_C]
.text:00000331                 add     ecx, 37h ; '7'
.text:00000334                 mov     [ebp+var_10], ecx
.text:00000337
.text:00000337 loc_337:                                ; CODE XREF: ConvertUInt32ToHex(uint,char *)+6Cj
.text:00000337                 mov     edx, [ebp+var_8]
.text:0000033A                 sub     edx, 1
.text:0000033D                 mov     [ebp+var_8], edx
.text:00000340                 mov     eax, [ebp+arg_4]
.text:00000343                 add     eax, [ebp+var_8]
.text:00000346                 mov     cl, byte ptr [ebp+var_10]
.text:00000349                 mov     [eax], cl
.text:0000034B                 cmp     [ebp+var_8], 0
.text:0000034F                 jnz     short loc_30B
.text:00000351                 mov     esp, ebp
.text:00000353                 pop     ebp
.text:00000354                 retn    8
.text:00000354 ?ConvertUInt32ToHex@@YGXIPAD@Z endp
.text:00000354
.text:00000354 ; ---------------------------------------------------------------------------
.text:00000357                 align 10h
.text:00000360
.text:00000360 ; =============== S U B R O U T I N E =======================================
.text:00000360
.text:00000360 ; Attributes: bp-based frame
.text:00000360
.text:00000360 ; void __stdcall ConvertUInt64ToHex(unsigned __int64, char *)
.text:00000360                 public ?ConvertUInt64ToHex@@YGX_KPAD@Z
.text:00000360 ?ConvertUInt64ToHex@@YGX_KPAD@Z proc near
.text:00000360
.text:00000360 var_14          = dword ptr -14h
.text:00000360 var_10          = dword ptr -10h
.text:00000360 var_C           = dword ptr -0Ch
.text:00000360 var_8           = dword ptr -8
.text:00000360 var_4           = dword ptr -4
.text:00000360 arg_0           = qword ptr  8
.text:00000360 arg_8           = dword ptr  10h
.text:00000360
.text:00000360                 push    ebp
.text:00000361                 mov     ebp, esp
.text:00000363                 sub     esp, 14h
.text:00000366                 mov     eax, 0CCCCCCCCh
.text:0000036B                 mov     [ebp+var_14], eax
.text:0000036E                 mov     [ebp+var_10], eax
.text:00000371                 mov     [ebp+var_C], eax
.text:00000374                 mov     [ebp+var_8], eax
.text:00000377                 mov     [ebp+var_4], eax
.text:0000037A                 mov     eax, dword ptr [ebp+arg_0]
.text:0000037D                 mov     [ebp+var_8], eax
.text:00000380                 mov     ecx, dword ptr [ebp+arg_0+4]
.text:00000383                 mov     [ebp+var_4], ecx
.text:00000386                 mov     [ebp+var_C], 1
.text:0000038D                 jmp     short loc_398
.text:0000038F ; ---------------------------------------------------------------------------
.text:0000038F
.text:0000038F loc_38F:                                ; CODE XREF: ConvertUInt64ToHex(unsigned __int64,char *):loc_3B5j
.text:0000038F                 mov     edx, [ebp+var_C]
.text:00000392                 add     edx, 1
.text:00000395                 mov     [ebp+var_C], edx
.text:00000398
.text:00000398 loc_398:                                ; CODE XREF: ConvertUInt64ToHex(unsigned __int64,char *)+2Dj
.text:00000398                 mov     eax, [ebp+var_8]
.text:0000039B                 mov     edx, [ebp+var_4]
.text:0000039E                 mov     cl, 4
.text:000003A0                 call    __aullshr
.text:000003A5                 mov     [ebp+var_8], eax
.text:000003A8                 mov     [ebp+var_4], edx
.text:000003AB                 mov     eax, [ebp+var_8]
.text:000003AE                 or      eax, [ebp+var_4]
.text:000003B1                 jnz     short loc_3B5
.text:000003B3                 jmp     short loc_3B7
.text:000003B5 ; ---------------------------------------------------------------------------
.text:000003B5
.text:000003B5 loc_3B5:                                ; CODE XREF: ConvertUInt64ToHex(unsigned __int64,char *)+51j
.text:000003B5                 jmp     short loc_38F
.text:000003B7 ; ---------------------------------------------------------------------------
.text:000003B7
.text:000003B7 loc_3B7:                                ; CODE XREF: ConvertUInt64ToHex(unsigned __int64,char *)+53j
.text:000003B7                 mov     ecx, [ebp+arg_8]
.text:000003BA                 add     ecx, [ebp+var_C]
.text:000003BD                 mov     byte ptr [ecx], 0
.text:000003C0
.text:000003C0 loc_3C0:                                ; CODE XREF: ConvertUInt64ToHex(unsigned __int64,char *)+B4j
.text:000003C0                 mov     edx, dword ptr [ebp+arg_0]
.text:000003C3                 and     edx, 0Fh
.text:000003C6                 mov     eax, dword ptr [ebp+arg_0+4]
.text:000003C9                 and     eax, 0
.text:000003CC                 mov     [ebp+var_10], edx
.text:000003CF                 mov     eax, dword ptr [ebp+arg_0]
.text:000003D2                 mov     edx, dword ptr [ebp+arg_0+4]
.text:000003D5                 mov     cl, 4
.text:000003D7                 call    __aullshr
.text:000003DC                 mov     dword ptr [ebp+arg_0], eax
.text:000003DF                 mov     dword ptr [ebp+arg_0+4], edx
.text:000003E2                 cmp     [ebp+var_10], 0Ah
.text:000003E6                 jnb     short loc_3F3
.text:000003E8                 mov     ecx, [ebp+var_10]
.text:000003EB                 add     ecx, 30h ; '0'
.text:000003EE                 mov     [ebp+var_14], ecx
.text:000003F1                 jmp     short loc_3FC
.text:000003F3 ; ---------------------------------------------------------------------------
.text:000003F3
.text:000003F3 loc_3F3:                                ; CODE XREF: ConvertUInt64ToHex(unsigned __int64,char *)+86j
.text:000003F3                 mov     edx, [ebp+var_10]
.text:000003F6                 add     edx, 37h ; '7'
.text:000003F9                 mov     [ebp+var_14], edx
.text:000003FC
.text:000003FC loc_3FC:                                ; CODE XREF: ConvertUInt64ToHex(unsigned __int64,char *)+91j
.text:000003FC                 mov     eax, [ebp+var_C]
.text:000003FF                 sub     eax, 1
.text:00000402                 mov     [ebp+var_C], eax
.text:00000405                 mov     ecx, [ebp+arg_8]
.text:00000408                 add     ecx, [ebp+var_C]
.text:0000040B                 mov     dl, byte ptr [ebp+var_14]
.text:0000040E                 mov     [ecx], dl
.text:00000410                 cmp     [ebp+var_C], 0
.text:00000414                 jnz     short loc_3C0
.text:00000416                 add     esp, 14h
.text:00000419                 cmp     ebp, esp
.text:0000041B                 call    __RTC_CheckEsp
.text:00000420                 mov     esp, ebp
.text:00000422                 pop     ebp
.text:00000423                 retn    0Ch
.text:00000423 ?ConvertUInt64ToHex@@YGX_KPAD@Z endp
.text:00000423
.text:00000423 ; ---------------------------------------------------------------------------
.text:00000426                 align 10h
.text:00000430
.text:00000430 ; =============== S U B R O U T I N E =======================================
.text:00000430
.text:00000430 ; Attributes: bp-based frame
.text:00000430
.text:00000430 ; void __stdcall ConvertUInt32ToHex8Digits(unsigned int, char *)
.text:00000430                 public ?ConvertUInt32ToHex8Digits@@YGXIPAD@Z
.text:00000430 ?ConvertUInt32ToHex8Digits@@YGXIPAD@Z proc near
.text:00000430
.text:00000430 var_C           = dword ptr -0Ch
.text:00000430 var_8           = dword ptr -8
.text:00000430 var_4           = dword ptr -4
.text:00000430 arg_0           = dword ptr  8
.text:00000430 arg_4           = dword ptr  0Ch
.text:00000430
.text:00000430                 push    ebp
.text:00000431                 mov     ebp, esp
.text:00000433                 sub     esp, 0Ch
.text:00000436                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000043D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000444                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000044B                 mov     eax, [ebp+arg_4]
.text:0000044E                 mov     byte ptr [eax+8], 0
.text:00000452                 mov     [ebp+var_4], 7
.text:00000459                 jmp     short loc_464
.text:0000045B ; ---------------------------------------------------------------------------
.text:0000045B
.text:0000045B loc_45B:                                ; CODE XREF: ConvertUInt32ToHex8Digits(uint,char *)+71j
.text:0000045B                 mov     ecx, [ebp+var_4]
.text:0000045E                 sub     ecx, 1
.text:00000461                 mov     [ebp+var_4], ecx
.text:00000464
.text:00000464 loc_464:                                ; CODE XREF: ConvertUInt32ToHex8Digits(uint,char *)+29j
.text:00000464                 cmp     [ebp+var_4], 0
.text:00000468                 jl      short loc_4A3
.text:0000046A                 mov     edx, [ebp+arg_0]
.text:0000046D                 and     edx, 0Fh
.text:00000470                 mov     [ebp+var_8], edx
.text:00000473                 mov     eax, [ebp+arg_0]
.text:00000476                 shr     eax, 4
.text:00000479                 mov     [ebp+arg_0], eax
.text:0000047C                 cmp     [ebp+var_8], 0Ah
.text:00000480                 jnb     short loc_48D
.text:00000482                 mov     ecx, [ebp+var_8]
.text:00000485                 add     ecx, 30h ; '0'
.text:00000488                 mov     [ebp+var_C], ecx
.text:0000048B                 jmp     short loc_496
.text:0000048D ; ---------------------------------------------------------------------------
.text:0000048D
.text:0000048D loc_48D:                                ; CODE XREF: ConvertUInt32ToHex8Digits(uint,char *)+50j
.text:0000048D                 mov     edx, [ebp+var_8]
.text:00000490                 add     edx, 37h ; '7'
.text:00000493                 mov     [ebp+var_C], edx
.text:00000496
.text:00000496 loc_496:                                ; CODE XREF: ConvertUInt32ToHex8Digits(uint,char *)+5Bj
.text:00000496                 mov     eax, [ebp+arg_4]
.text:00000499                 add     eax, [ebp+var_4]
.text:0000049C                 mov     cl, byte ptr [ebp+var_C]
.text:0000049F                 mov     [eax], cl
.text:000004A1                 jmp     short loc_45B
.text:000004A3 ; ---------------------------------------------------------------------------
.text:000004A3
.text:000004A3 loc_4A3:                                ; CODE XREF: ConvertUInt32ToHex8Digits(uint,char *)+38j
.text:000004A3                 mov     esp, ebp
.text:000004A5                 pop     ebp
.text:000004A6                 retn    8
.text:000004A6 ?ConvertUInt32ToHex8Digits@@YGXIPAD@Z endp
.text:000004A6
.text:000004A6 ; ---------------------------------------------------------------------------
.text:000004A9                 align 10h
.text:000004B0
.text:000004B0 ; =============== S U B R O U T I N E =======================================
.text:000004B0
.text:000004B0 ; Attributes: bp-based frame
.text:000004B0
.text:000004B0 ; void __stdcall ConvertUInt32ToString(unsigned int, wchar_t *)
.text:000004B0                 public ?ConvertUInt32ToString@@YGXIPA_W@Z
.text:000004B0 ?ConvertUInt32ToString@@YGXIPA_W@Z proc near
.text:000004B0                                         ; CODE XREF: ConvertUInt64ToString(unsigned __int64,wchar_t *)+36p
.text:000004B0
.text:000004B0 var_20          = dword ptr -20h
.text:000004B0 var_1C          = dword ptr -1Ch
.text:000004B0 var_18          = dword ptr -18h
.text:000004B0 var_14          = dword ptr -14h
.text:000004B0 var_10          = dword ptr -10h
.text:000004B0 var_C           = dword ptr -0Ch
.text:000004B0 var_8           = dword ptr -8
.text:000004B0 var_4           = dword ptr -4
.text:000004B0 arg_0           = dword ptr  8
.text:000004B0 arg_4           = dword ptr  0Ch
.text:000004B0
.text:000004B0                 push    ebp
.text:000004B1                 mov     ebp, esp
.text:000004B3                 sub     esp, 20h
.text:000004B6                 mov     eax, 0CCCCCCCCh
.text:000004BB                 mov     [ebp+var_20], eax
.text:000004BE                 mov     [ebp+var_1C], eax
.text:000004C1                 mov     [ebp+var_18], eax
.text:000004C4                 mov     [ebp+var_14], eax
.text:000004C7                 mov     [ebp+var_10], eax
.text:000004CA                 mov     [ebp+var_C], eax
.text:000004CD                 mov     [ebp+var_8], eax
.text:000004D0                 mov     [ebp+var_4], eax
.text:000004D3                 mov     eax, dword ptr ds:___security_cookie
.text:000004D8                 xor     eax, ebp
.text:000004DA                 mov     [ebp+var_4], eax
.text:000004DD                 mov     [ebp+var_20], 0
.text:000004E4
.text:000004E4 loc_4E4:                                ; CODE XREF: ConvertUInt32ToString(uint,wchar_t *)+68j
.text:000004E4                 cmp     [ebp+arg_0], 0Ah
.text:000004E8                 jb      short loc_51A
.text:000004EA                 mov     eax, [ebp+arg_0]
.text:000004ED                 xor     edx, edx
.text:000004EF                 mov     ecx, 0Ah
.text:000004F4                 div     ecx
.text:000004F6                 add     edx, 30h ; '0'
.text:000004F9                 mov     eax, [ebp+var_20]
.text:000004FC                 mov     byte ptr [ebp+eax+var_18], dl
.text:00000500                 mov     ecx, [ebp+var_20]
.text:00000503                 add     ecx, 1
.text:00000506                 mov     [ebp+var_20], ecx
.text:00000509                 mov     eax, [ebp+arg_0]
.text:0000050C                 xor     edx, edx
.text:0000050E                 mov     ecx, 0Ah
.text:00000513                 div     ecx
.text:00000515                 mov     [ebp+arg_0], eax
.text:00000518                 jmp     short loc_4E4
.text:0000051A ; ---------------------------------------------------------------------------
.text:0000051A
.text:0000051A loc_51A:                                ; CODE XREF: ConvertUInt32ToString(uint,wchar_t *)+38j
.text:0000051A                 mov     edx, [ebp+arg_0]
.text:0000051D                 add     edx, 30h ; '0'
.text:00000520                 mov     eax, [ebp+arg_4]
.text:00000523                 mov     [eax], dx
.text:00000526                 mov     ecx, [ebp+arg_4]
.text:00000529                 add     ecx, 2
.text:0000052C                 mov     [ebp+arg_4], ecx
.text:0000052F
.text:0000052F loc_52F:                                ; CODE XREF: ConvertUInt32ToString(uint,wchar_t *)+A6j
.text:0000052F                 cmp     [ebp+var_20], 0
.text:00000533                 jz      short loc_558
.text:00000535                 mov     edx, [ebp+var_20]
.text:00000538                 sub     edx, 1
.text:0000053B                 mov     [ebp+var_20], edx
.text:0000053E                 mov     eax, [ebp+var_20]
.text:00000541                 movzx   cx, byte ptr [ebp+eax+var_18]
.text:00000547                 mov     edx, [ebp+arg_4]
.text:0000054A                 mov     [edx], cx
.text:0000054D                 mov     eax, [ebp+arg_4]
.text:00000550                 add     eax, 2
.text:00000553                 mov     [ebp+arg_4], eax
.text:00000556                 jmp     short loc_52F
.text:00000558 ; ---------------------------------------------------------------------------
.text:00000558
.text:00000558 loc_558:                                ; CODE XREF: ConvertUInt32ToString(uint,wchar_t *)+83j
.text:00000558                 xor     ecx, ecx
.text:0000055A                 mov     edx, [ebp+arg_4]
.text:0000055D                 mov     [edx], cx
.text:00000560                 push    edx
.text:00000561                 mov     ecx, ebp
.text:00000563                 push    eax
.text:00000564                 lea     edx, $LN9_0
.text:0000056A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000056F                 pop     eax
.text:00000570                 pop     edx
.text:00000571                 mov     ecx, [ebp+var_4]
.text:00000574                 xor     ecx, ebp
.text:00000576                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000057B                 mov     esp, ebp
.text:0000057D                 pop     ebp
.text:0000057E                 retn    8
.text:0000057E ?ConvertUInt32ToString@@YGXIPA_W@Z endp
.text:0000057E
.text:0000057E ; ---------------------------------------------------------------------------
.text:00000581                 align 4
.text:00000584 $LN9_0          dd 1                    ; DATA XREF: ConvertUInt32ToString(uint,wchar_t *)+B4o
.text:00000588                 dd offset $LN8_0
.text:0000058C $LN8_0          dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00000588o
.text:00000594                 dd offset $LN7_0        ; "temp"
.text:00000598 $LN7_0          db 'temp',0             ; DATA XREF: .text:00000594o
.text:0000059D                 align 10h
.text:000005A0
.text:000005A0 ; =============== S U B R O U T I N E =======================================
.text:000005A0
.text:000005A0 ; Attributes: bp-based frame
.text:000005A0
.text:000005A0 ; void __stdcall ConvertUInt64ToString(unsigned __int64, wchar_t *)
.text:000005A0                 public ?ConvertUInt64ToString@@YGX_KPA_W@Z
.text:000005A0 ?ConvertUInt64ToString@@YGX_KPA_W@Z proc near
.text:000005A0                                         ; CODE XREF: ConvertInt64ToString(__int64,wchar_t *)+44p
.text:000005A0
.text:000005A0 var_28          = dword ptr -28h
.text:000005A0 var_20          = byte ptr -20h
.text:000005A0 var_4           = dword ptr -4
.text:000005A0 arg_0           = qword ptr  8
.text:000005A0 arg_8           = dword ptr  10h
.text:000005A0
.text:000005A0                 push    ebp
.text:000005A1                 mov     ebp, esp
.text:000005A3                 sub     esp, 28h
.text:000005A6                 push    edi
.text:000005A7                 lea     edi, [ebp+var_28]
.text:000005AA                 mov     ecx, 0Ah
.text:000005AF                 mov     eax, 0CCCCCCCCh
.text:000005B4                 rep stosd
.text:000005B6                 mov     eax, dword ptr ds:___security_cookie
.text:000005BB                 xor     eax, ebp
.text:000005BD                 mov     [ebp+var_4], eax
.text:000005C0                 cmp     dword ptr [ebp+arg_0+4], 0
.text:000005C4                 ja      short loc_5E0
.text:000005C6                 jb      short loc_5CE
.text:000005C8                 cmp     dword ptr [ebp+arg_0], 0FFFFFFFFh
.text:000005CC                 ja      short loc_5E0
.text:000005CE
.text:000005CE loc_5CE:                                ; CODE XREF: ConvertUInt64ToString(unsigned __int64,wchar_t *)+26j
.text:000005CE                 mov     eax, [ebp+arg_8]
.text:000005D1                 push    eax             ; wchar_t *
.text:000005D2                 mov     ecx, dword ptr [ebp+arg_0]
.text:000005D5                 push    ecx             ; unsigned int
.text:000005D6                 call    ?ConvertUInt32ToString@@YGXIPA_W@Z ; ConvertUInt32ToString(uint,wchar_t *)
.text:000005DB                 jmp     loc_676
.text:000005E0 ; ---------------------------------------------------------------------------
.text:000005E0
.text:000005E0 loc_5E0:                                ; CODE XREF: ConvertUInt64ToString(unsigned __int64,wchar_t *)+24j
.text:000005E0                                         ; ConvertUInt64ToString(unsigned __int64,wchar_t *)+2Cj
.text:000005E0                 mov     [ebp+var_28], 0
.text:000005E7
.text:000005E7 loc_5E7:                                ; CODE XREF: ConvertUInt64ToString(unsigned __int64,wchar_t *)+8Ej
.text:000005E7                 cmp     dword ptr [ebp+arg_0+4], 0
.text:000005EB                 ja      short loc_5F3
.text:000005ED                 cmp     dword ptr [ebp+arg_0], 0Ah
.text:000005F1                 jb      short loc_630
.text:000005F3
.text:000005F3 loc_5F3:                                ; CODE XREF: ConvertUInt64ToString(unsigned __int64,wchar_t *)+4Bj
.text:000005F3                 push    0
.text:000005F5                 push    0Ah
.text:000005F7                 mov     edx, dword ptr [ebp+arg_0+4]
.text:000005FA                 push    edx
.text:000005FB                 mov     eax, dword ptr [ebp+arg_0]
.text:000005FE                 push    eax
.text:000005FF                 call    __aullrem
.text:00000604                 add     eax, 30h ; '0'
.text:00000607                 mov     ecx, [ebp+var_28]
.text:0000060A                 mov     [ebp+ecx+var_20], al
.text:0000060E                 mov     edx, [ebp+var_28]
.text:00000611                 add     edx, 1
.text:00000614                 mov     [ebp+var_28], edx
.text:00000617                 push    0
.text:00000619                 push    0Ah
.text:0000061B                 mov     eax, dword ptr [ebp+arg_0+4]
.text:0000061E                 push    eax
.text:0000061F                 mov     ecx, dword ptr [ebp+arg_0]
.text:00000622                 push    ecx
.text:00000623                 call    __aulldiv
.text:00000628                 mov     dword ptr [ebp+arg_0], eax
.text:0000062B                 mov     dword ptr [ebp+arg_0+4], edx
.text:0000062E                 jmp     short loc_5E7
.text:00000630 ; ---------------------------------------------------------------------------
.text:00000630
.text:00000630 loc_630:                                ; CODE XREF: ConvertUInt64ToString(unsigned __int64,wchar_t *)+51j
.text:00000630                 mov     edx, dword ptr [ebp+arg_0]
.text:00000633                 add     edx, 30h ; '0'
.text:00000636                 mov     eax, [ebp+arg_8]
.text:00000639                 mov     [eax], dx
.text:0000063C                 mov     ecx, [ebp+arg_8]
.text:0000063F                 add     ecx, 2
.text:00000642                 mov     [ebp+arg_8], ecx
.text:00000645
.text:00000645 loc_645:                                ; CODE XREF: ConvertUInt64ToString(unsigned __int64,wchar_t *)+CCj
.text:00000645                 cmp     [ebp+var_28], 0
.text:00000649                 jz      short loc_66E
.text:0000064B                 mov     edx, [ebp+var_28]
.text:0000064E                 sub     edx, 1
.text:00000651                 mov     [ebp+var_28], edx
.text:00000654                 mov     eax, [ebp+var_28]
.text:00000657                 movzx   cx, [ebp+eax+var_20]
.text:0000065D                 mov     edx, [ebp+arg_8]
.text:00000660                 mov     [edx], cx
.text:00000663                 mov     eax, [ebp+arg_8]
.text:00000666                 add     eax, 2
.text:00000669                 mov     [ebp+arg_8], eax
.text:0000066C                 jmp     short loc_645
.text:0000066E ; ---------------------------------------------------------------------------
.text:0000066E
.text:0000066E loc_66E:                                ; CODE XREF: ConvertUInt64ToString(unsigned __int64,wchar_t *)+A9j
.text:0000066E                 xor     ecx, ecx
.text:00000670                 mov     edx, [ebp+arg_8]
.text:00000673                 mov     [edx], cx
.text:00000676
.text:00000676 loc_676:                                ; CODE XREF: ConvertUInt64ToString(unsigned __int64,wchar_t *)+3Bj
.text:00000676                 push    edx
.text:00000677                 mov     ecx, ebp
.text:00000679                 push    eax
.text:0000067A                 lea     edx, $LN12_0
.text:00000680                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000685                 pop     eax
.text:00000686                 pop     edx
.text:00000687                 pop     edi
.text:00000688                 mov     ecx, [ebp+var_4]
.text:0000068B                 xor     ecx, ebp
.text:0000068D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000692                 add     esp, 28h
.text:00000695                 cmp     ebp, esp
.text:00000697                 call    __RTC_CheckEsp
.text:0000069C                 mov     esp, ebp
.text:0000069E                 pop     ebp
.text:0000069F                 retn    0Ch
.text:0000069F ?ConvertUInt64ToString@@YGX_KPA_W@Z endp
.text:0000069F
.text:0000069F ; ---------------------------------------------------------------------------
.text:000006A2                 align 4
.text:000006A4 $LN12_0         dd 1                    ; DATA XREF: ConvertUInt64ToString(unsigned __int64,wchar_t *)+DAo
.text:000006A8                 dd offset $LN11_0
.text:000006AC $LN11_0         dd 0FFFFFFE0h, 18h      ; DATA XREF: .text:000006A8o
.text:000006B4                 dd offset $LN10_0       ; "temp"
.text:000006B8 $LN10_0         db 'temp',0             ; DATA XREF: .text:000006B4o
.text:000006BD                 align 10h
.text:000006C0
.text:000006C0 ; =============== S U B R O U T I N E =======================================
.text:000006C0
.text:000006C0 ; Attributes: bp-based frame
.text:000006C0
.text:000006C0 ; void __stdcall ConvertInt64ToString(unsigned __int64, char *)
.text:000006C0                 public ?ConvertInt64ToString@@YGX_JPAD@Z
.text:000006C0 ?ConvertInt64ToString@@YGX_JPAD@Z proc near
.text:000006C0
.text:000006C0 arg_0           = qword ptr  8
.text:000006C0 arg_8           = dword ptr  10h
.text:000006C0
.text:000006C0                 push    ebp
.text:000006C1                 mov     ebp, esp
.text:000006C3                 cmp     dword ptr [ebp+arg_0+4], 0
.text:000006C7                 jg      short loc_6F3
.text:000006C9                 jl      short loc_6D1
.text:000006CB                 cmp     dword ptr [ebp+arg_0], 0
.text:000006CF                 jnb     short loc_6F3
.text:000006D1
.text:000006D1 loc_6D1:                                ; CODE XREF: ConvertInt64ToString(__int64,char *)+9j
.text:000006D1                 mov     eax, [ebp+arg_8]
.text:000006D4                 mov     byte ptr [eax], 2Dh ; '-'
.text:000006D7                 mov     ecx, [ebp+arg_8]
.text:000006DA                 add     ecx, 1
.text:000006DD                 mov     [ebp+arg_8], ecx
.text:000006E0                 mov     edx, dword ptr [ebp+arg_0]
.text:000006E3                 neg     edx
.text:000006E5                 mov     eax, dword ptr [ebp+arg_0+4]
.text:000006E8                 adc     eax, 0
.text:000006EB                 neg     eax
.text:000006ED                 mov     dword ptr [ebp+arg_0], edx
.text:000006F0                 mov     dword ptr [ebp+arg_0+4], eax
.text:000006F3
.text:000006F3 loc_6F3:                                ; CODE XREF: ConvertInt64ToString(__int64,char *)+7j
.text:000006F3                                         ; ConvertInt64ToString(__int64,char *)+Fj
.text:000006F3                 mov     ecx, [ebp+arg_8]
.text:000006F6                 push    ecx             ; char *
.text:000006F7                 mov     edx, dword ptr [ebp+arg_0+4]
.text:000006FA                 push    edx
.text:000006FB                 mov     eax, dword ptr [ebp+arg_0]
.text:000006FE                 push    eax             ; unsigned __int64
.text:000006FF                 call    ?ConvertUInt64ToString@@YGX_KPAD@Z ; ConvertUInt64ToString(unsigned __int64,char *)
.text:00000704                 cmp     ebp, esp
.text:00000706                 call    __RTC_CheckEsp
.text:0000070B                 pop     ebp
.text:0000070C                 retn    0Ch
.text:0000070C ?ConvertInt64ToString@@YGX_JPAD@Z endp
.text:0000070C
.text:0000070C ; ---------------------------------------------------------------------------
.text:0000070F                 align 10h
.text:00000710
.text:00000710 ; =============== S U B R O U T I N E =======================================
.text:00000710
.text:00000710 ; Attributes: bp-based frame
.text:00000710
.text:00000710 ; void __stdcall ConvertInt64ToString(unsigned __int64, wchar_t *)
.text:00000710                 public ?ConvertInt64ToString@@YGX_JPA_W@Z
.text:00000710 ?ConvertInt64ToString@@YGX_JPA_W@Z proc near
.text:00000710
.text:00000710 arg_0           = qword ptr  8
.text:00000710 arg_8           = dword ptr  10h
.text:00000710
.text:00000710                 push    ebp
.text:00000711                 mov     ebp, esp
.text:00000713                 cmp     dword ptr [ebp+arg_0+4], 0
.text:00000717                 jg      short loc_748
.text:00000719                 jl      short loc_721
.text:0000071B                 cmp     dword ptr [ebp+arg_0], 0
.text:0000071F                 jnb     short loc_748
.text:00000721
.text:00000721 loc_721:                                ; CODE XREF: ConvertInt64ToString(__int64,wchar_t *)+9j
.text:00000721                 mov     eax, 2Dh ; '-'
.text:00000726                 mov     ecx, [ebp+arg_8]
.text:00000729                 mov     [ecx], ax
.text:0000072C                 mov     edx, [ebp+arg_8]
.text:0000072F                 add     edx, 2
.text:00000732                 mov     [ebp+arg_8], edx
.text:00000735                 mov     eax, dword ptr [ebp+arg_0]
.text:00000738                 neg     eax
.text:0000073A                 mov     ecx, dword ptr [ebp+arg_0+4]
.text:0000073D                 adc     ecx, 0
.text:00000740                 neg     ecx
.text:00000742                 mov     dword ptr [ebp+arg_0], eax
.text:00000745                 mov     dword ptr [ebp+arg_0+4], ecx
.text:00000748
.text:00000748 loc_748:                                ; CODE XREF: ConvertInt64ToString(__int64,wchar_t *)+7j
.text:00000748                                         ; ConvertInt64ToString(__int64,wchar_t *)+Fj
.text:00000748                 mov     edx, [ebp+arg_8]
.text:0000074B                 push    edx             ; wchar_t *
.text:0000074C                 mov     eax, dword ptr [ebp+arg_0+4]
.text:0000074F                 push    eax
.text:00000750                 mov     ecx, dword ptr [ebp+arg_0]
.text:00000753                 push    ecx             ; unsigned __int64
.text:00000754                 call    ?ConvertUInt64ToString@@YGX_KPA_W@Z ; ConvertUInt64ToString(unsigned __int64,wchar_t *)
.text:00000759                 cmp     ebp, esp
.text:0000075B                 call    __RTC_CheckEsp
.text:00000760                 pop     ebp
.text:00000761                 retn    0Ch
.text:00000761 ?ConvertInt64ToString@@YGX_JPA_W@Z endp
.text:00000761
.text:00000761 _text           ends
.text:00000761
.rtc$TMZ:00000764 ; ===========================================================================
.rtc$TMZ:00000764
.rtc$TMZ:00000764 ; Segment type: Pure data
.rtc$TMZ:00000764 ; Segment permissions: Read
.rtc$TMZ:00000764 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000764                 assume cs:_rtc$TMZ
.rtc$TMZ:00000764                 ;org 764h
.rtc$TMZ:00000764 ; COMDAT (pick any)
.rtc$TMZ:00000764 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000764 _rtc$TMZ        ends
.rtc$TMZ:00000764
.rtc$IMZ:00000768 ; ===========================================================================
.rtc$IMZ:00000768
.rtc$IMZ:00000768 ; Segment type: Pure data
.rtc$IMZ:00000768 ; Segment permissions: Read
.rtc$IMZ:00000768 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000768                 assume cs:_rtc$IMZ
.rtc$IMZ:00000768                 ;org 768h
.rtc$IMZ:00000768 ; COMDAT (pick any)
.rtc$IMZ:00000768 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000768 _rtc$IMZ        ends
.rtc$IMZ:00000768
UNDEF:00000770 ; ===========================================================================
UNDEF:00000770
UNDEF:00000770 ; Segment type: Externs
UNDEF:00000770 ; UNDEF
UNDEF:00000770                 extrn ___security_cookie:near
UNDEF:00000770                                         ; DATA XREF: ConvertUInt32ToString(uint,char *)+23r
UNDEF:00000770                                         ; ConvertUInt64ToString(unsigned __int64,char *)+16r ...
UNDEF:00000774 ; __fastcall __security_check_cookie(x)
UNDEF:00000774                 extrn @__security_check_cookie@4:near
UNDEF:00000774                                         ; CODE XREF: ConvertUInt32ToString(uint,char *)+C0p
UNDEF:00000774                                         ; ConvertUInt64ToString(unsigned __int64,char *)+E7p ...
UNDEF:00000778 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000778                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000778                                         ; CODE XREF: ConvertUInt32ToString(uint,char *)+B4p
UNDEF:00000778                                         ; ConvertUInt64ToString(unsigned __int64,char *)+DAp ...
UNDEF:0000077C                 extrn __RTC_Shutdown:near
UNDEF:0000077C                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000780                 extrn __RTC_InitBase:near
UNDEF:00000780                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000784                 extrn __RTC_CheckEsp:near
UNDEF:00000784                                         ; CODE XREF: ConvertUInt64ToString(unsigned __int64,char *)+F1p
UNDEF:00000784                                         ; ConvertUInt64ToOct(unsigned __int64,char *)+A1p ...
UNDEF:00000788                 extrn __aulldiv:near    ; CODE XREF: ConvertUInt64ToString(unsigned __int64,char *)+83p
UNDEF:00000788                                         ; ConvertUInt64ToString(unsigned __int64,wchar_t *)+83p
UNDEF:0000078C                 extrn __aullrem:near    ; CODE XREF: ConvertUInt64ToString(unsigned __int64,char *)+5Fp
UNDEF:0000078C                                         ; ConvertUInt64ToString(unsigned __int64,wchar_t *)+5Fp
UNDEF:00000790                 extrn __aullshr:near    ; CODE XREF: ConvertUInt64ToOct(unsigned __int64,char *)+3Dp
UNDEF:00000790                                         ; ConvertUInt64ToOct(unsigned __int64,char *)+74p ...
UNDEF:00000790
UNDEF:00000790
UNDEF:00000790                 end