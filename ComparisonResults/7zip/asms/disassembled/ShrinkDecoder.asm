.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 233F8E9D47892A2D57FE5890BF03BBC5
.text:00000000 ; Input CRC32 : C02F4273
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ShrinkDecoder.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __thiscall NCompress::NShrink::CDecoder::CodeReal(NCompress::NShrink::CDecoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00000000                 public ?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000000 ?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00000000                                         ; CODE XREF: NCompress::NShrink::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+59p
.text:00000000
.text:00000000 var_E8          = dword ptr -0E8h
.text:00000000 var_E4          = dword ptr -0E4h
.text:00000000 var_E0          = dword ptr -0E0h
.text:00000000 var_DC          = dword ptr -0DCh
.text:00000000 var_D8          = dword ptr -0D8h
.text:00000000 var_D4          = dword ptr -0D4h
.text:00000000 var_D0          = dword ptr -0D0h
.text:00000000 var_CC          = dword ptr -0CCh
.text:00000000 var_C8          = dword ptr -0C8h
.text:00000000 var_C0          = dword ptr -0C0h
.text:00000000 var_BC          = dword ptr -0BCh
.text:00000000 var_B0          = dword ptr -0B0h
.text:00000000 var_AC          = dword ptr -0ACh
.text:00000000 var_A4          = dword ptr -0A4h
.text:00000000 var_A0          = dword ptr -0A0h
.text:00000000 var_9C          = dword ptr -9Ch
.text:00000000 var_98          = dword ptr -98h
.text:00000000 var_94          = dword ptr -94h
.text:00000000 var_90          = dword ptr -90h
.text:00000000 var_89          = byte ptr -89h
.text:00000000 var_88          = dword ptr -88h
.text:00000000 var_84          = dword ptr -84h
.text:00000000 var_80          = dword ptr -80h
.text:00000000 var_7C          = dword ptr -7Ch
.text:00000000 var_74          = byte ptr -74h
.text:00000000 var_44          = byte ptr -44h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_10          = dword ptr  18h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    0FFFFFFFFh
.text:00000005                 push    offset __ehhandler$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:0000000A                 mov     eax, large fs:0
.text:00000010                 push    eax
.text:00000011                 sub     esp, 0DCh
.text:00000017                 push    esi
.text:00000018                 push    edi
.text:00000019                 push    ecx
.text:0000001A                 lea     edi, [ebp+var_E8]
.text:00000020                 mov     ecx, 37h ; '7'
.text:00000025                 mov     eax, 0CCCCCCCCh
.text:0000002A                 rep stosd
.text:0000002C                 pop     ecx
.text:0000002D                 mov     eax, dword ptr ds:___security_cookie
.text:00000032                 xor     eax, ebp
.text:00000034                 push    eax
.text:00000035                 lea     eax, [ebp+var_C]
.text:00000038                 mov     large fs:0, eax
.text:0000003E
.text:0000003E loc_3E:                                 ; DATA XREF: .xdata$x:000009ECo
.text:0000003E                 mov     [ebp+var_10], ecx
.text:00000041                 lea     ecx, [ebp+var_44]
.text:00000044                 call    ??0?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CBaseDecoder<CInBuffer>::CBaseDecoder<CInBuffer>(void)
.text:00000049                 mov     [ebp+var_4], 0
.text:00000050                 lea     ecx, [ebp+var_74] ; this
.text:00000053                 call    ??0COutBuffer@@QAE@XZ ; COutBuffer::COutBuffer(void)
.text:00000058                 mov     byte ptr [ebp+var_4], 1
.text:0000005C                 push    100000h
.text:00000061                 lea     ecx, [ebp+var_44]
.text:00000064                 call    ?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z ; NBitl::CBaseDecoder<CInBuffer>::Create(uint)
.text:00000069                 movzx   eax, al
.text:0000006C                 test    eax, eax
.text:0000006E                 jnz     short loc_A0
.text:00000070                 mov     [ebp+var_CC], 8007000Eh
.text:0000007A                 mov     byte ptr [ebp+var_4], 0
.text:0000007E                 lea     ecx, [ebp+var_74] ; this
.text:00000081                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:00000086                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000008D                 lea     ecx, [ebp+var_44]
.text:00000090                 call    ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>(void)
.text:00000095                 mov     eax, [ebp+var_CC]
.text:0000009B                 jmp     loc_74E
.text:000000A0 ; ---------------------------------------------------------------------------
.text:000000A0
.text:000000A0 loc_A0:                                 ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+6Ej
.text:000000A0                 mov     ecx, [ebp+arg_0]
.text:000000A3                 push    ecx             ; struct ISequentialInStream *
.text:000000A4                 lea     ecx, [ebp+var_44]
.text:000000A7                 call    ?SetStream@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXPAUISequentialInStream@@@Z ; NBitl::CBaseDecoder<CInBuffer>::SetStream(ISequentialInStream *)
.text:000000AC                 lea     ecx, [ebp+var_44]
.text:000000AF                 call    ?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ ; NBitl::CBaseDecoder<CInBuffer>::Init(void)
.text:000000B4                 push    100000h         ; unsigned int
.text:000000B9                 lea     ecx, [ebp+var_74] ; this
.text:000000BC                 call    ?Create@COutBuffer@@QAE_NI@Z ; COutBuffer::Create(uint)
.text:000000C1                 movzx   edx, al
.text:000000C4                 test    edx, edx
.text:000000C6                 jnz     short loc_F8
.text:000000C8                 mov     [ebp+var_D0], 8007000Eh
.text:000000D2                 mov     byte ptr [ebp+var_4], 0
.text:000000D6                 lea     ecx, [ebp+var_74] ; this
.text:000000D9                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:000000DE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000000E5                 lea     ecx, [ebp+var_44]
.text:000000E8                 call    ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>(void)
.text:000000ED                 mov     eax, [ebp+var_D0]
.text:000000F3                 jmp     loc_74E
.text:000000F8 ; ---------------------------------------------------------------------------
.text:000000F8
.text:000000F8 loc_F8:                                 ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+C6j
.text:000000F8                 mov     eax, [ebp+arg_4]
.text:000000FB                 push    eax             ; struct ISequentialOutStream *
.text:000000FC                 lea     ecx, [ebp+var_74] ; this
.text:000000FF                 call    ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z ; COutBuffer::SetStream(ISequentialOutStream *)
.text:00000104                 lea     ecx, [ebp+var_74] ; this
.text:00000107                 call    ?Init@COutBuffer@@QAEXXZ ; COutBuffer::Init(void)
.text:0000010C                 mov     [ebp+var_80], 0
.text:00000113                 mov     [ebp+var_7C], 0
.text:0000011A                 mov     [ebp+var_84], 9
.text:00000124                 mov     [ebp+var_88], 101h
.text:0000012E                 mov     [ebp+var_89], 0
.text:00000135                 mov     [ebp+var_90], 0
.text:0000013F                 mov     [ebp+var_94], 0
.text:00000149                 jmp     short loc_15A
.text:0000014B ; ---------------------------------------------------------------------------
.text:0000014B
.text:0000014B loc_14B:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+176j
.text:0000014B                 mov     ecx, [ebp+var_94]
.text:00000151                 add     ecx, 1
.text:00000154                 mov     [ebp+var_94], ecx
.text:0000015A
.text:0000015A loc_15A:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+149j
.text:0000015A                 cmp     [ebp+var_94], 2000h
.text:00000164                 jnb     short loc_178
.text:00000166                 xor     edx, edx
.text:00000168                 mov     eax, [ebp+var_94]
.text:0000016E                 mov     ecx, [ebp+var_10]
.text:00000171                 mov     [ecx+eax*2+8], dx
.text:00000176                 jmp     short loc_14B
.text:00000178 ; ---------------------------------------------------------------------------
.text:00000178
.text:00000178 loc_178:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+164j
.text:00000178                 mov     [ebp+var_94], 0
.text:00000182                 jmp     short loc_193
.text:00000184 ; ---------------------------------------------------------------------------
.text:00000184
.text:00000184 loc_184:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1AFj
.text:00000184                 mov     edx, [ebp+var_94]
.text:0000018A                 add     edx, 1
.text:0000018D                 mov     [ebp+var_94], edx
.text:00000193
.text:00000193 loc_193:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+182j
.text:00000193                 cmp     [ebp+var_94], 2000h
.text:0000019D                 jnb     short loc_1B1
.text:0000019F                 mov     eax, [ebp+var_10]
.text:000001A2                 add     eax, [ebp+var_94]
.text:000001A8                 mov     byte ptr [eax+4008h], 0
.text:000001AF                 jmp     short loc_184
.text:000001B1 ; ---------------------------------------------------------------------------
.text:000001B1
.text:000001B1 loc_1B1:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+19Dj
.text:000001B1                 mov     [ebp+var_94], 0
.text:000001BB                 jmp     short loc_1CC
.text:000001BD ; ---------------------------------------------------------------------------
.text:000001BD
.text:000001BD loc_1BD:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1E8j
.text:000001BD                 mov     ecx, [ebp+var_94]
.text:000001C3                 add     ecx, 1
.text:000001C6                 mov     [ebp+var_94], ecx
.text:000001CC
.text:000001CC loc_1CC:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1BBj
.text:000001CC                 cmp     [ebp+var_94], 101h
.text:000001D6                 jge     short loc_1EA
.text:000001D8                 mov     edx, [ebp+var_10]
.text:000001DB                 add     edx, [ebp+var_94]
.text:000001E1                 mov     byte ptr [edx+8008h], 0
.text:000001E8                 jmp     short loc_1BD
.text:000001EA ; ---------------------------------------------------------------------------
.text:000001EA
.text:000001EA loc_1EA:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1D6j
.text:000001EA                 jmp     short loc_1FB
.text:000001EC ; ---------------------------------------------------------------------------
.text:000001EC
.text:000001EC loc_1EC:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+217j
.text:000001EC                 mov     eax, [ebp+var_94]
.text:000001F2                 add     eax, 1
.text:000001F5                 mov     [ebp+var_94], eax
.text:000001FB
.text:000001FB loc_1FB:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_1EAj
.text:000001FB                 cmp     [ebp+var_94], 2000h
.text:00000205                 jnb     short loc_219
.text:00000207                 mov     ecx, [ebp+var_10]
.text:0000020A                 add     ecx, [ebp+var_94]
.text:00000210                 mov     byte ptr [ecx+8008h], 1
.text:00000217                 jmp     short loc_1EC
.text:00000219 ; ---------------------------------------------------------------------------
.text:00000219
.text:00000219 loc_219:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+205j
.text:00000219                                         ; NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_489j ...
.text:00000219                 mov     edx, [ebp+var_84]
.text:0000021F                 push    edx
.text:00000220                 lea     ecx, [ebp+var_44]
.text:00000223                 call    ?ReadBits@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CBaseDecoder<CInBuffer>::ReadBits(uint)
.text:00000228                 mov     [ebp+var_98], eax
.text:0000022E                 lea     ecx, [ebp+var_44]
.text:00000231                 call    ?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ ; NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead(void)
.text:00000236                 movzx   eax, al
.text:00000239                 test    eax, eax
.text:0000023B                 jz      short loc_242
.text:0000023D                 jmp     loc_71F
.text:00000242 ; ---------------------------------------------------------------------------
.text:00000242
.text:00000242 loc_242:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+23Bj
.text:00000242                 mov     ecx, [ebp+var_10]
.text:00000245                 add     ecx, [ebp+var_98]
.text:0000024B                 movzx   edx, byte ptr [ecx+8008h]
.text:00000252                 test    edx, edx
.text:00000254                 jz      short loc_286
.text:00000256                 mov     [ebp+var_D4], 1
.text:00000260                 mov     byte ptr [ebp+var_4], 0
.text:00000264                 lea     ecx, [ebp+var_74] ; this
.text:00000267                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:0000026C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000273                 lea     ecx, [ebp+var_44]
.text:00000276                 call    ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>(void)
.text:0000027B                 mov     eax, [ebp+var_D4]
.text:00000281                 jmp     loc_74E
.text:00000286 ; ---------------------------------------------------------------------------
.text:00000286
.text:00000286 loc_286:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+254j
.text:00000286                 cmp     [ebp+var_98], 100h
.text:00000290                 jnz     loc_48E
.text:00000296                 mov     eax, [ebp+var_84]
.text:0000029C                 push    eax
.text:0000029D                 lea     ecx, [ebp+var_44]
.text:000002A0                 call    ?ReadBits@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CBaseDecoder<CInBuffer>::ReadBits(uint)
.text:000002A5                 mov     [ebp+var_9C], eax
.text:000002AB                 cmp     [ebp+var_9C], 1
.text:000002B2                 jnz     short loc_2D1
.text:000002B4                 cmp     [ebp+var_84], 0Dh
.text:000002BB                 jge     short loc_2CC
.text:000002BD                 mov     ecx, [ebp+var_84]
.text:000002C3                 add     ecx, 1
.text:000002C6                 mov     [ebp+var_84], ecx
.text:000002CC
.text:000002CC loc_2CC:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2BBj
.text:000002CC                 jmp     loc_489
.text:000002D1 ; ---------------------------------------------------------------------------
.text:000002D1
.text:000002D1 loc_2D1:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2B2j
.text:000002D1                 cmp     [ebp+var_9C], 2
.text:000002D8                 jnz     loc_459
.text:000002DE                 movzx   edx, [ebp+var_89]
.text:000002E5                 test    edx, edx
.text:000002E7                 jz      short loc_2F9
.text:000002E9                 mov     eax, [ebp+var_10]
.text:000002EC                 add     eax, [ebp+var_88]
.text:000002F2                 mov     byte ptr [eax+8007h], 1
.text:000002F9
.text:000002F9 loc_2F9:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2E7j
.text:000002F9                 mov     [ebp+var_94], 101h
.text:00000303                 jmp     short loc_314
.text:00000305 ; ---------------------------------------------------------------------------
.text:00000305
.text:00000305 loc_305:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+330j
.text:00000305                 mov     ecx, [ebp+var_94]
.text:0000030B                 add     ecx, 1
.text:0000030E                 mov     [ebp+var_94], ecx
.text:00000314
.text:00000314 loc_314:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+303j
.text:00000314                 cmp     [ebp+var_94], 2000h
.text:0000031E                 jnb     short loc_332
.text:00000320                 mov     edx, [ebp+var_10]
.text:00000323                 add     edx, [ebp+var_94]
.text:00000329                 mov     byte ptr [edx+0A008h], 0
.text:00000330                 jmp     short loc_305
.text:00000332 ; ---------------------------------------------------------------------------
.text:00000332
.text:00000332 loc_332:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+31Ej
.text:00000332                 mov     [ebp+var_94], 101h
.text:0000033C                 jmp     short loc_34D
.text:0000033E ; ---------------------------------------------------------------------------
.text:0000033E
.text:0000033E loc_33E:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_386j
.text:0000033E                 mov     eax, [ebp+var_94]
.text:00000344                 add     eax, 1
.text:00000347                 mov     [ebp+var_94], eax
.text:0000034D
.text:0000034D loc_34D:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+33Cj
.text:0000034D                 cmp     [ebp+var_94], 2000h
.text:00000357                 jnb     short loc_388
.text:00000359                 mov     ecx, [ebp+var_10]
.text:0000035C                 add     ecx, [ebp+var_94]
.text:00000362                 movzx   edx, byte ptr [ecx+8008h]
.text:00000369                 test    edx, edx
.text:0000036B                 jnz     short loc_386
.text:0000036D                 mov     eax, [ebp+var_94]
.text:00000373                 mov     ecx, [ebp+var_10]
.text:00000376                 movzx   edx, word ptr [ecx+eax*2+8]
.text:0000037B                 mov     eax, [ebp+var_10]
.text:0000037E                 mov     byte ptr [eax+edx+0A008h], 1
.text:00000386
.text:00000386 loc_386:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+36Bj
.text:00000386                 jmp     short loc_33E
.text:00000388 ; ---------------------------------------------------------------------------
.text:00000388
.text:00000388 loc_388:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+357j
.text:00000388                 mov     [ebp+var_94], 101h
.text:00000392                 jmp     short loc_3A3
.text:00000394 ; ---------------------------------------------------------------------------
.text:00000394
.text:00000394 loc_394:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_3D3j
.text:00000394                 mov     ecx, [ebp+var_94]
.text:0000039A                 add     ecx, 1
.text:0000039D                 mov     [ebp+var_94], ecx
.text:000003A3
.text:000003A3 loc_3A3:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+392j
.text:000003A3                 cmp     [ebp+var_94], 2000h
.text:000003AD                 jnb     short loc_3D5
.text:000003AF                 mov     edx, [ebp+var_10]
.text:000003B2                 add     edx, [ebp+var_94]
.text:000003B8                 movzx   eax, byte ptr [edx+0A008h]
.text:000003BF                 test    eax, eax
.text:000003C1                 jnz     short loc_3D3
.text:000003C3                 mov     ecx, [ebp+var_10]
.text:000003C6                 add     ecx, [ebp+var_94]
.text:000003CC                 mov     byte ptr [ecx+8008h], 1
.text:000003D3
.text:000003D3 loc_3D3:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3C1j
.text:000003D3                 jmp     short loc_394
.text:000003D5 ; ---------------------------------------------------------------------------
.text:000003D5
.text:000003D5 loc_3D5:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3ADj
.text:000003D5                 mov     [ebp+var_88], 101h
.text:000003DF
.text:000003DF loc_3DF:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+40Ej
.text:000003DF                 cmp     [ebp+var_88], 2000h
.text:000003E9                 jnb     short loc_410
.text:000003EB                 mov     edx, [ebp+var_10]
.text:000003EE                 add     edx, [ebp+var_88]
.text:000003F4                 movzx   eax, byte ptr [edx+8008h]
.text:000003FB                 test    eax, eax
.text:000003FD                 jnz     short loc_410
.text:000003FF                 mov     ecx, [ebp+var_88]
.text:00000405                 add     ecx, 1
.text:00000408                 mov     [ebp+var_88], ecx
.text:0000040E                 jmp     short loc_3DF
.text:00000410 ; ---------------------------------------------------------------------------
.text:00000410
.text:00000410 loc_410:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3E9j
.text:00000410                                         ; NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3FDj
.text:00000410                 cmp     [ebp+var_88], 2000h
.text:0000041A                 jnb     short loc_457
.text:0000041C                 mov     [ebp+var_89], 1
.text:00000423                 mov     edx, [ebp+var_10]
.text:00000426                 add     edx, [ebp+var_88]
.text:0000042C                 mov     byte ptr [edx+8008h], 0
.text:00000433                 mov     eax, [ebp+var_88]
.text:00000439                 mov     ecx, [ebp+var_10]
.text:0000043C                 mov     dx, word ptr [ebp+var_90]
.text:00000443                 mov     [ecx+eax*2+8], dx
.text:00000448                 mov     eax, [ebp+var_88]
.text:0000044E                 add     eax, 1
.text:00000451                 mov     [ebp+var_88], eax
.text:00000457
.text:00000457 loc_457:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+41Aj
.text:00000457                 jmp     short loc_489
.text:00000459 ; ---------------------------------------------------------------------------
.text:00000459
.text:00000459 loc_459:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2D8j
.text:00000459                 mov     [ebp+var_D8], 1
.text:00000463                 mov     byte ptr [ebp+var_4], 0
.text:00000467                 lea     ecx, [ebp+var_74] ; this
.text:0000046A                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:0000046F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000476                 lea     ecx, [ebp+var_44]
.text:00000479                 call    ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>(void)
.text:0000047E                 mov     eax, [ebp+var_D8]
.text:00000484                 jmp     loc_74E
.text:00000489 ; ---------------------------------------------------------------------------
.text:00000489
.text:00000489 loc_489:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_2CCj
.text:00000489                                         ; NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_457j
.text:00000489                 jmp     loc_219
.text:0000048E ; ---------------------------------------------------------------------------
.text:0000048E
.text:0000048E loc_48E:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+290j
.text:0000048E                 mov     ecx, [ebp+var_98]
.text:00000494                 mov     [ebp+var_A0], ecx
.text:0000049A                 mov     [ebp+var_94], 0
.text:000004A4                 mov     [ebp+var_A4], 0FFFFFFFFh
.text:000004AE
.text:000004AE loc_4AE:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+518j
.text:000004AE                 cmp     [ebp+var_A0], 100h
.text:000004B8                 jb      short loc_51A
.text:000004BA                 mov     edx, [ebp+var_88]
.text:000004C0                 sub     edx, 1
.text:000004C3                 cmp     [ebp+var_A0], edx
.text:000004C9                 jnz     short loc_4D7
.text:000004CB                 mov     eax, [ebp+var_94]
.text:000004D1                 mov     [ebp+var_A4], eax
.text:000004D7
.text:000004D7 loc_4D7:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+4C9j
.text:000004D7                 mov     ecx, [ebp+var_10]
.text:000004DA                 add     ecx, [ebp+var_94]
.text:000004E0                 mov     edx, [ebp+var_10]
.text:000004E3                 add     edx, [ebp+var_A0]
.text:000004E9                 mov     al, [edx+4008h]
.text:000004EF                 mov     [ecx+6008h], al
.text:000004F5                 mov     ecx, [ebp+var_94]
.text:000004FB                 add     ecx, 1
.text:000004FE                 mov     [ebp+var_94], ecx
.text:00000504                 mov     edx, [ebp+var_A0]
.text:0000050A                 mov     eax, [ebp+var_10]
.text:0000050D                 movzx   ecx, word ptr [eax+edx*2+8]
.text:00000512                 mov     [ebp+var_A0], ecx
.text:00000518                 jmp     short loc_4AE
.text:0000051A ; ---------------------------------------------------------------------------
.text:0000051A
.text:0000051A loc_51A:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+4B8j
.text:0000051A                 mov     edx, [ebp+var_10]
.text:0000051D                 add     edx, [ebp+var_94]
.text:00000523                 mov     al, byte ptr [ebp+var_A0]
.text:00000529                 mov     [edx+6008h], al
.text:0000052F                 mov     ecx, [ebp+var_94]
.text:00000535                 add     ecx, 1
.text:00000538                 mov     [ebp+var_94], ecx
.text:0000053E                 movzx   edx, [ebp+var_89]
.text:00000545                 test    edx, edx
.text:00000547                 jz      short loc_57C
.text:00000549                 mov     eax, [ebp+var_10]
.text:0000054C                 add     eax, [ebp+var_88]
.text:00000552                 mov     cl, byte ptr [ebp+var_A0]
.text:00000558                 mov     [eax+4007h], cl
.text:0000055E                 cmp     [ebp+var_A4], 0
.text:00000565                 jl      short loc_57C
.text:00000567                 mov     edx, [ebp+var_10]
.text:0000056A                 add     edx, [ebp+var_A4]
.text:00000570                 mov     al, byte ptr [ebp+var_A0]
.text:00000576                 mov     [edx+6008h], al
.text:0000057C
.text:0000057C loc_57C:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+547j
.text:0000057C                                         ; NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+565j ...
.text:0000057C                 cmp     [ebp+var_94], 0
.text:00000583                 jle     short loc_5AF
.text:00000585                 mov     ecx, [ebp+var_94]
.text:0000058B                 sub     ecx, 1
.text:0000058E                 mov     [ebp+var_94], ecx
.text:00000594                 mov     edx, [ebp+var_10]
.text:00000597                 add     edx, [ebp+var_94]
.text:0000059D                 movzx   eax, byte ptr [edx+6008h]
.text:000005A4                 push    eax             ; unsigned __int8
.text:000005A5                 lea     ecx, [ebp+var_74] ; this
.text:000005A8                 call    ?WriteByte@COutBuffer@@QAEXE@Z ; COutBuffer::WriteByte(uchar)
.text:000005AD                 jmp     short loc_57C
.text:000005AF ; ---------------------------------------------------------------------------
.text:000005AF
.text:000005AF loc_5AF:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+583j
.text:000005AF                                         ; NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5DEj
.text:000005AF                 cmp     [ebp+var_88], 2000h
.text:000005B9                 jnb     short loc_5E0
.text:000005BB                 mov     ecx, [ebp+var_10]
.text:000005BE                 add     ecx, [ebp+var_88]
.text:000005C4                 movzx   edx, byte ptr [ecx+8008h]
.text:000005CB                 test    edx, edx
.text:000005CD                 jnz     short loc_5E0
.text:000005CF                 mov     eax, [ebp+var_88]
.text:000005D5                 add     eax, 1
.text:000005D8                 mov     [ebp+var_88], eax
.text:000005DE                 jmp     short loc_5AF
.text:000005E0 ; ---------------------------------------------------------------------------
.text:000005E0
.text:000005E0 loc_5E0:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5B9j
.text:000005E0                                         ; NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5CDj
.text:000005E0                 cmp     [ebp+var_88], 2000h
.text:000005EA                 jnb     short loc_629
.text:000005EC                 mov     [ebp+var_89], 1
.text:000005F3                 mov     ecx, [ebp+var_10]
.text:000005F6                 add     ecx, [ebp+var_88]
.text:000005FC                 mov     byte ptr [ecx+8008h], 0
.text:00000603                 mov     edx, [ebp+var_88]
.text:00000609                 mov     eax, [ebp+var_10]
.text:0000060C                 mov     cx, word ptr [ebp+var_98]
.text:00000613                 mov     [eax+edx*2+8], cx
.text:00000618                 mov     edx, [ebp+var_88]
.text:0000061E                 add     edx, 1
.text:00000621                 mov     [ebp+var_88], edx
.text:00000627                 jmp     short loc_630
.text:00000629 ; ---------------------------------------------------------------------------
.text:00000629
.text:00000629 loc_629:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5EAj
.text:00000629                 mov     [ebp+var_89], 0
.text:00000630
.text:00000630 loc_630:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+627j
.text:00000630                 mov     eax, [ebp+var_98]
.text:00000636                 mov     [ebp+var_90], eax
.text:0000063C                 lea     ecx, [ebp+var_74] ; this
.text:0000063F                 call    ?GetProcessedSize@COutBuffer@@QBE_KXZ ; COutBuffer::GetProcessedSize(void)
.text:00000644                 mov     [ebp+var_B0], eax
.text:0000064A                 mov     [ebp+var_AC], edx
.text:00000650                 cmp     [ebp+arg_10], 0
.text:00000654                 jz      loc_71A
.text:0000065A                 mov     ecx, [ebp+var_B0]
.text:00000660                 sub     ecx, [ebp+var_80]
.text:00000663                 mov     edx, [ebp+var_AC]
.text:00000669                 sbb     edx, [ebp+var_7C]
.text:0000066C                 mov     [ebp+var_E8], ecx
.text:00000672                 mov     [ebp+var_E4], edx
.text:00000678                 cmp     [ebp+var_E4], 0
.text:0000067F                 ja      short loc_691
.text:00000681                 cmp     [ebp+var_E8], 40000h
.text:0000068B                 jbe     loc_71A
.text:00000691
.text:00000691 loc_691:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+67Fj
.text:00000691                 mov     eax, [ebp+var_B0]
.text:00000697                 mov     [ebp+var_80], eax
.text:0000069A                 mov     ecx, [ebp+var_AC]
.text:000006A0                 mov     [ebp+var_7C], ecx
.text:000006A3                 lea     ecx, [ebp+var_44]
.text:000006A6                 call    ?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ ; NBitl::CBaseDecoder<CInBuffer>::GetProcessedSize(void)
.text:000006AB                 mov     [ebp+var_C0], eax
.text:000006B1                 mov     [ebp+var_BC], edx
.text:000006B7                 mov     esi, esp
.text:000006B9                 lea     edx, [ebp+var_B0]
.text:000006BF                 push    edx
.text:000006C0                 lea     eax, [ebp+var_C0]
.text:000006C6                 push    eax
.text:000006C7                 mov     ecx, [ebp+arg_10]
.text:000006CA                 mov     edx, [ecx]
.text:000006CC                 mov     eax, [ebp+arg_10]
.text:000006CF                 push    eax
.text:000006D0                 mov     ecx, [edx+0Ch]
.text:000006D3                 call    ecx
.text:000006D5                 cmp     esi, esp
.text:000006D7                 call    __RTC_CheckEsp
.text:000006DC                 mov     [ebp+var_C8], eax
.text:000006E2                 cmp     [ebp+var_C8], 0
.text:000006E9                 jz      short loc_71A
.text:000006EB                 mov     edx, [ebp+var_C8]
.text:000006F1                 mov     [ebp+var_DC], edx
.text:000006F7                 mov     byte ptr [ebp+var_4], 0
.text:000006FB                 lea     ecx, [ebp+var_74] ; this
.text:000006FE                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:00000703                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000070A                 lea     ecx, [ebp+var_44]
.text:0000070D                 call    ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>(void)
.text:00000712                 mov     eax, [ebp+var_DC]
.text:00000718                 jmp     short loc_74E
.text:0000071A ; ---------------------------------------------------------------------------
.text:0000071A
.text:0000071A loc_71A:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+654j
.text:0000071A                                         ; NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+68Bj ...
.text:0000071A                 jmp     loc_219
.text:0000071F ; ---------------------------------------------------------------------------
.text:0000071F
.text:0000071F loc_71F:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+23Dj
.text:0000071F                 lea     ecx, [ebp+var_74] ; this
.text:00000722                 call    ?Flush@COutBuffer@@QAEJXZ ; COutBuffer::Flush(void)
.text:00000727                 mov     [ebp+var_E0], eax
.text:0000072D                 mov     byte ptr [ebp+var_4], 0
.text:00000731                 lea     ecx, [ebp+var_74] ; this
.text:00000734                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:00000739                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000740                 lea     ecx, [ebp+var_44]
.text:00000743                 call    ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>(void)
.text:00000748                 mov     eax, [ebp+var_E0]
.text:0000074E
.text:0000074E loc_74E:                                ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+9Bj
.text:0000074E                                         ; NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+F3j ...
.text:0000074E                 push    edx
.text:0000074F                 mov     ecx, ebp
.text:00000751                 push    eax
.text:00000752                 lea     edx, $LN65
.text:00000758                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000075D                 pop     eax
.text:0000075E                 pop     edx
.text:0000075F                 mov     ecx, [ebp+var_C]
.text:00000762                 mov     large fs:0, ecx
.text:00000769                 pop     ecx
.text:0000076A                 pop     edi
.text:0000076B                 pop     esi
.text:0000076C                 add     esp, 0E8h
.text:00000772                 cmp     ebp, esp
.text:00000774                 call    __RTC_CheckEsp
.text:00000779                 mov     esp, ebp
.text:0000077B                 pop     ebp
.text:0000077C                 retn    14h
.text:0000077C ?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:0000077C
.text:0000077C ; ---------------------------------------------------------------------------
.text:0000077F                 align 10h
.text:00000780 $LN65           dd 4                    ; DATA XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+752o
.text:00000784                 dd offset $LN64
.text:00000788 $LN64           dd 0FFFFFFBCh, 30h      ; DATA XREF: .text:00000784o
.text:00000790                 dd offset $LN59         ; "inBuffer"
.text:00000794                 dd 0FFFFFF8Ch, 28h
.text:0000079C                 dd offset $LN60         ; "outBuffer"
.text:000007A0                 dd 0FFFFFF50h, 8
.text:000007A8                 dd offset $LN61         ; "nowPos"
.text:000007AC                 dd 0FFFFFF40h, 8
.text:000007B4                 dd offset $LN62         ; "packSize"
.text:000007B8 $LN62           db 'packSize',0         ; DATA XREF: .text:000007B4o
.text:000007C1 $LN61           db 'nowPos',0           ; DATA XREF: .text:000007A8o
.text:000007C8 $LN60           db 'outBuffer',0        ; DATA XREF: .text:0000079Co
.text:000007D2 $LN59           db 'inBuffer',0         ; DATA XREF: .text:00000790o
.text:000007DB                 align 10h
.text:000007E0
.text:000007E0 ; =============== S U B R O U T I N E =======================================
.text:000007E0
.text:000007E0 ; Attributes: bp-based frame
.text:000007E0
.text:000007E0 ; __int32 __cdecl NCompress::NShrink::CDecoder::Code(NCompress::NShrink::CDecoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:000007E0                 public ?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:000007E0 ?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:000007E0
.text:000007E0 var_38          = dword ptr -38h
.text:000007E0 var_10          = dword ptr -10h
.text:000007E0 var_C           = dword ptr -0Ch
.text:000007E0 var_4           = dword ptr -4
.text:000007E0 this            = dword ptr  8
.text:000007E0 arg_4           = dword ptr  0Ch
.text:000007E0 arg_8           = dword ptr  10h
.text:000007E0 arg_C           = dword ptr  14h
.text:000007E0 arg_10          = dword ptr  18h
.text:000007E0 arg_14          = dword ptr  1Ch
.text:000007E0
.text:000007E0 ; FUNCTION CHUNK AT .text:000008B0 SIZE 0000002F BYTES
.text:000007E0
.text:000007E0                 push    ebp
.text:000007E1                 mov     ebp, esp
.text:000007E3                 push    0FFFFFFFFh
.text:000007E5                 push    offset __ehhandler$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:000007EA                 mov     eax, large fs:0
.text:000007F0                 push    eax
.text:000007F1                 push    ecx
.text:000007F2                 sub     esp, 28h
.text:000007F5                 push    ebx
.text:000007F6                 push    esi
.text:000007F7                 push    edi
.text:000007F8                 lea     edi, [ebp+var_38]
.text:000007FB                 mov     ecx, 0Ah
.text:00000800                 mov     eax, 0CCCCCCCCh
.text:00000805                 rep stosd
.text:00000807                 mov     eax, dword ptr ds:___security_cookie
.text:0000080C                 xor     eax, ebp
.text:0000080E                 push    eax
.text:0000080F                 lea     eax, [ebp+var_C]
.text:00000812                 mov     large fs:0, eax
.text:00000818                 mov     [ebp+var_10], esp
.text:0000081B                 mov     [ebp+var_4], 0
.text:00000822                 mov     eax, [ebp+arg_14]
.text:00000825                 push    eax             ; struct ICompressProgressInfo *
.text:00000826                 mov     ecx, [ebp+arg_10]
.text:00000829                 push    ecx             ; unsigned __int64 *
.text:0000082A                 mov     edx, [ebp+arg_C]
.text:0000082D                 push    edx             ; unsigned __int64 *
.text:0000082E                 mov     eax, [ebp+arg_8]
.text:00000831                 push    eax             ; struct ISequentialOutStream *
.text:00000832                 mov     ecx, [ebp+arg_4]
.text:00000835                 push    ecx             ; struct ISequentialInStream *
.text:00000836                 mov     ecx, [ebp+this] ; this
.text:00000839                 call    ?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.text:0000083E                 mov     [ebp+var_38], eax
.text:00000841                 mov     eax, [ebp+var_38]
.text:00000844                 jmp     short loc_8B0
.text:00000844 ?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:00000844
.text:00000846
.text:00000846 ; =============== S U B R O U T I N E =======================================
.text:00000846
.text:00000846
.text:00000846 __catch$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 proc near
.text:00000846                                         ; DATA XREF: .xdata$x:000009D8o
.text:00000846                 mov     edx, [ebp-18h]
.text:00000849                 mov     eax, [edx]
.text:0000084B                 mov     [ebp-2Ch], eax
.text:0000084E                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000855                 mov     eax, offset $LN9
.text:0000085A                 retn
.text:0000085A __catch$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 endp
.text:0000085A
.text:0000085B ; ---------------------------------------------------------------------------
.text:0000085B                 mov     eax, offset __tryend$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
.text:00000860                 retn
.text:00000861
.text:00000861 ; =============== S U B R O U T I N E =======================================
.text:00000861
.text:00000861
.text:00000861 __catch$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1 proc near
.text:00000861                                         ; DATA XREF: .xdata$x:000009E8o
.text:00000861                 mov     ecx, [ebp-24h]
.text:00000864                 mov     edx, [ecx]
.text:00000866                 mov     [ebp-30h], edx
.text:00000869                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000870                 mov     eax, offset $LN11
.text:00000875                 retn
.text:00000875 __catch$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1 endp
.text:00000875
.text:00000876 ; ---------------------------------------------------------------------------
.text:00000876                 mov     eax, offset __tryend$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
.text:0000087B                 retn
.text:0000087C
.text:0000087C ; =============== S U B R O U T I N E =======================================
.text:0000087C
.text:0000087C
.text:0000087C __catch$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2 proc near
.text:0000087C                                         ; DATA XREF: .xdata$x:000009F8o
.text:0000087C                 mov     dword ptr [ebp-34h], 1
.text:00000883                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000088A                 mov     eax, offset $LN13
.text:0000088F                 retn
.text:0000088F __catch$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2 endp
.text:0000088F
.text:00000890 ; ---------------------------------------------------------------------------
.text:00000890                 mov     eax, offset __tryend$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
.text:00000895                 retn
.text:00000896 ; ---------------------------------------------------------------------------
.text:00000896
.text:00000896 __tryend$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3:
.text:00000896                                         ; DATA XREF: .text:0000085Bo
.text:00000896                                         ; .text:00000876o ...
.text:00000896                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000089D                 jmp     short loc_8A4
.text:0000089F ; ---------------------------------------------------------------------------
.text:0000089F
.text:0000089F $LN13:                                  ; DATA XREF: __catch$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2+Eo
.text:0000089F                 mov     eax, [ebp-34h]
.text:000008A2                 jmp     short loc_8B0
.text:000008A4 ; ---------------------------------------------------------------------------
.text:000008A4
.text:000008A4 loc_8A4:                                ; CODE XREF: .text:0000089Dj
.text:000008A4                 jmp     short loc_8AB
.text:000008A6 ; ---------------------------------------------------------------------------
.text:000008A6
.text:000008A6 $LN11:                                  ; DATA XREF: __catch$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1+Fo
.text:000008A6                 mov     eax, [ebp-30h]
.text:000008A9                 jmp     short loc_8B0
.text:000008AB ; ---------------------------------------------------------------------------
.text:000008AB
.text:000008AB loc_8AB:                                ; CODE XREF: .text:loc_8A4j
.text:000008AB                 jmp     short loc_8B0
.text:000008AD ; ---------------------------------------------------------------------------
.text:000008AD
.text:000008AD $LN9:                                   ; DATA XREF: __catch$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0+Fo
.text:000008AD                 mov     eax, [ebp-2Ch]
.text:000008B0 ; START OF FUNCTION CHUNK FOR ?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:000008B0
.text:000008B0 loc_8B0:                                ; CODE XREF: NCompress::NShrink::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+64j
.text:000008B0                                         ; .text:000008A2j ...
.text:000008B0                 push    edx
.text:000008B1                 mov     ecx, ebp
.text:000008B3                 push    eax
.text:000008B4                 lea     edx, $LN21
.text:000008BA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000008BF                 pop     eax
.text:000008C0                 pop     edx
.text:000008C1                 mov     ecx, [ebp+var_C]
.text:000008C4                 mov     large fs:0, ecx
.text:000008CB                 pop     ecx
.text:000008CC                 pop     edi
.text:000008CD                 pop     esi
.text:000008CE                 pop     ebx
.text:000008CF                 add     esp, 38h
.text:000008D2                 cmp     ebp, esp
.text:000008D4                 call    __RTC_CheckEsp
.text:000008D9                 mov     esp, ebp
.text:000008DB                 pop     ebp
.text:000008DC                 retn    18h
.text:000008DC ; END OF FUNCTION CHUNK FOR ?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:000008DC ; ---------------------------------------------------------------------------
.text:000008DF                 align 10h
.text:000008E0 $LN21           dd 2                    ; DATA XREF: NCompress::NShrink::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+D4o
.text:000008E4                 dd offset $LN20
.text:000008E8 $LN20           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:000008E4o
.text:000008F0                 dd offset $LN17
.text:000008F4                 dd 0FFFFFFDCh, 4
.text:000008FC                 dd offset $LN18
.text:00000900 $LN18           db 65h, 0               ; DATA XREF: .text:000008FCo
.text:00000902 $LN17           dw 65h                  ; DATA XREF: .text:000008F0o
.text:00000902 _text           ends
.text:00000902
.text$x:00000904 ; ===========================================================================
.text$x:00000904
.text$x:00000904 ; Segment type: Pure code
.text$x:00000904 ; Segment permissions: Read/Execute
.text$x:00000904 _text$x         segment para public 'CODE' use32
.text$x:00000904                 assume cs:_text$x
.text$x:00000904                 ;org 904h
.text$x:00000904                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000904
.text$x:00000904 ; =============== S U B R O U T I N E =======================================
.text$x:00000904
.text$x:00000904
.text$x:00000904 __unwindfunclet$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 proc near
.text$x:00000904                                         ; DATA XREF: .xdata$x:00000954o
.text$x:00000904                 lea     ecx, [ebp-44h]
.text$x:00000907                 jmp     ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>(void)
.text$x:00000907 __unwindfunclet$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 endp
.text$x:00000907
.text$x:0000090C
.text$x:0000090C ; =============== S U B R O U T I N E =======================================
.text$x:0000090C
.text$x:0000090C
.text$x:0000090C __unwindfunclet$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1 proc near
.text$x:0000090C                                         ; DATA XREF: .xdata$x:0000095Co
.text$x:0000090C                 lea     ecx, [ebp-74h]  ; this
.text$x:0000090F                 jmp     ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text$x:0000090F __unwindfunclet$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1 endp
.text$x:0000090F
.text$x:00000914
.text$x:00000914 ; =============== S U B R O U T I N E =======================================
.text$x:00000914
.text$x:00000914
.text$x:00000914 __ehhandler$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text$x:00000914                                         ; DATA XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5o
.text$x:00000914
.text$x:00000914 arg_4           = dword ptr  8
.text$x:00000914
.text$x:00000914                 mov     edx, [esp+arg_4]
.text$x:00000918                 lea     eax, [edx+0Ch]
.text$x:0000091B                 mov     ecx, [edx-0E8h]
.text$x:00000921                 xor     ecx, eax
.text$x:00000923                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000928                 mov     eax, offset __ehfuncinfo$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text$x:0000092D                 jmp     ___CxxFrameHandler3
.text$x:0000092D __ehhandler$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text$x:0000092D
.text$x:00000932
.text$x:00000932 ; =============== S U B R O U T I N E =======================================
.text$x:00000932
.text$x:00000932
.text$x:00000932 __ehhandler$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text$x:00000932                                         ; DATA XREF: NCompress::NShrink::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5o
.text$x:00000932
.text$x:00000932 arg_4           = dword ptr  8
.text$x:00000932
.text$x:00000932                 mov     edx, [esp+arg_4]
.text$x:00000936                 lea     eax, [edx+0Ch]
.text$x:00000939                 mov     ecx, [edx-3Ch]
.text$x:0000093C                 xor     ecx, eax
.text$x:0000093E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000943                 mov     eax, offset __ehfuncinfo$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text$x:00000948                 jmp     ___CxxFrameHandler3
.text$x:00000948 __ehhandler$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text$x:00000948
.text$x:00000948 ; ---------------------------------------------------------------------------
.text$x:0000094D                 align 10h
.text$x:0000094D _text$x         ends
.text$x:0000094D
.xdata$x:00000950 ; ===========================================================================
.xdata$x:00000950
.xdata$x:00000950 ; Segment type: Pure data
.xdata$x:00000950 ; Segment permissions: Read
.xdata$x:00000950 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000950                 assume cs:_xdata$x
.xdata$x:00000950                 ;org 950h
.xdata$x:00000950 __unwindtable$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:00000950                                         ; DATA XREF: .xdata$x:00000968o
.xdata$x:00000951                 db 0FFh
.xdata$x:00000952                 db 0FFh
.xdata$x:00000953                 db 0FFh
.xdata$x:00000954                 dd offset __unwindfunclet$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0
.xdata$x:00000958                 db    0
.xdata$x:00000959                 db    0
.xdata$x:0000095A                 db    0
.xdata$x:0000095B                 db    0
.xdata$x:0000095C                 dd offset __unwindfunclet$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1
.xdata$x:00000960 __ehfuncinfo$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:00000960                                         ; DATA XREF: __ehhandler$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+14o
.xdata$x:00000961                 db    5
.xdata$x:00000962                 db  93h ; ô
.xdata$x:00000963                 db  19h
.xdata$x:00000964                 db    2
.xdata$x:00000965                 db    0
.xdata$x:00000966                 db    0
.xdata$x:00000967                 db    0
.xdata$x:00000968                 dd offset __unwindtable$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.xdata$x:0000096C                 align 20h
.xdata$x:00000980                 db    1
.xdata$x:00000981                 db    0
.xdata$x:00000982                 db    0
.xdata$x:00000983                 db    0
.xdata$x:00000984 __unwindtable$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:00000984                                         ; DATA XREF: .xdata$x:000009B0o
.xdata$x:00000985                 db 0FFh
.xdata$x:00000986                 db 0FFh
.xdata$x:00000987                 db 0FFh
.xdata$x:00000988                 db    0
.xdata$x:00000989                 db    0
.xdata$x:0000098A                 db    0
.xdata$x:0000098B                 db    0
.xdata$x:0000098C                 db 0FFh
.xdata$x:0000098D                 db 0FFh
.xdata$x:0000098E                 db 0FFh
.xdata$x:0000098F                 db 0FFh
.xdata$x:00000990                 db    0
.xdata$x:00000991                 db    0
.xdata$x:00000992                 db    0
.xdata$x:00000993                 db    0
.xdata$x:00000994 __tryblocktable$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db    0
.xdata$x:00000994                                         ; DATA XREF: .xdata$x:000009B8o
.xdata$x:00000995                 db    0
.xdata$x:00000996                 db    0
.xdata$x:00000997                 db    0
.xdata$x:00000998                 db    0
.xdata$x:00000999                 db    0
.xdata$x:0000099A                 db    0
.xdata$x:0000099B                 db    0
.xdata$x:0000099C                 db    1
.xdata$x:0000099D                 db    0
.xdata$x:0000099E                 db    0
.xdata$x:0000099F                 db    0
.xdata$x:000009A0                 db    3
.xdata$x:000009A1                 db    0
.xdata$x:000009A2                 db    0
.xdata$x:000009A3                 db    0
.xdata$x:000009A4                 dd offset __catchsym$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$4
.xdata$x:000009A8 __ehfuncinfo$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:000009A8                                         ; DATA XREF: __ehhandler$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+11o
.xdata$x:000009A9                 db    5
.xdata$x:000009AA                 db  93h ; ô
.xdata$x:000009AB                 db  19h
.xdata$x:000009AC                 db    2
.xdata$x:000009AD                 db    0
.xdata$x:000009AE                 db    0
.xdata$x:000009AF                 db    0
.xdata$x:000009B0                 dd offset __unwindtable$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.xdata$x:000009B4                 db    1
.xdata$x:000009B5                 db    0
.xdata$x:000009B6                 db    0
.xdata$x:000009B7                 db    0
.xdata$x:000009B8                 dd offset __tryblocktable$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.xdata$x:000009BC                 db    0
.xdata$x:000009BD                 db    0
.xdata$x:000009BE                 db    0
.xdata$x:000009BF                 db    0
.xdata$x:000009C0                 db    0
.xdata$x:000009C1                 db    0
.xdata$x:000009C2                 db    0
.xdata$x:000009C3                 db    0
.xdata$x:000009C4                 db    0
.xdata$x:000009C5                 db    0
.xdata$x:000009C6                 db    0
.xdata$x:000009C7                 db    0
.xdata$x:000009C8                 db    1
.xdata$x:000009C9                 db    0
.xdata$x:000009CA                 db    0
.xdata$x:000009CB                 db    0
.xdata$x:000009CC __catchsym$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$4 db    9
.xdata$x:000009CC                                         ; DATA XREF: .xdata$x:000009A4o
.xdata$x:000009CD                 db    0
.xdata$x:000009CE                 db    0
.xdata$x:000009CF                 db    0
.xdata$x:000009D0                 dd offset ??_R0?AUCInBufferException@@@8 ; CInBufferException `RTTI Type Descriptor'
.xdata$x:000009D4                 db 0E8h ; F
.xdata$x:000009D5                 db 0FFh
.xdata$x:000009D6                 db 0FFh
.xdata$x:000009D7                 db 0FFh
.xdata$x:000009D8                 dd offset __catch$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0
.xdata$x:000009DC                 db    9
.xdata$x:000009DD                 db    0
.xdata$x:000009DE                 db    0
.xdata$x:000009DF                 db    0
.xdata$x:000009E0                 dd offset ??_R0?AUCOutBufferException@@@8 ; COutBufferException `RTTI Type Descriptor'
.xdata$x:000009E4                 db 0DCh ; _
.xdata$x:000009E5                 db 0FFh
.xdata$x:000009E6                 db 0FFh
.xdata$x:000009E7                 db 0FFh
.xdata$x:000009E8                 dd offset __catch$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1
.xdata$x:000009EC                 dd offset loc_3E+2
.xdata$x:000009F0                 db    0
.xdata$x:000009F1                 db    0
.xdata$x:000009F2                 db    0
.xdata$x:000009F3                 db    0
.xdata$x:000009F4                 db    0
.xdata$x:000009F5                 db    0
.xdata$x:000009F6                 db    0
.xdata$x:000009F7                 db    0
.xdata$x:000009F8                 dd offset __catch$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2
.xdata$x:000009F8 _xdata$x        ends
.xdata$x:000009F8
.rtc$TMZ:000009FC ; ===========================================================================
.rtc$TMZ:000009FC
.rtc$TMZ:000009FC ; Segment type: Pure data
.rtc$TMZ:000009FC ; Segment permissions: Read
.rtc$TMZ:000009FC _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000009FC                 assume cs:_rtc$TMZ
.rtc$TMZ:000009FC                 ;org 9FCh
.rtc$TMZ:000009FC ; COMDAT (pick any)
.rtc$TMZ:000009FC __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000009FC _rtc$TMZ        ends
.rtc$TMZ:000009FC
.rtc$IMZ:00000A00 ; ===========================================================================
.rtc$IMZ:00000A00
.rtc$IMZ:00000A00 ; Segment type: Pure data
.rtc$IMZ:00000A00 ; Segment permissions: Read
.rtc$IMZ:00000A00 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000A00                 assume cs:_rtc$IMZ
.rtc$IMZ:00000A00                 ;org 0A00h
.rtc$IMZ:00000A00 ; COMDAT (pick any)
.rtc$IMZ:00000A00 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000A00 _rtc$IMZ        ends
.rtc$IMZ:00000A00
.text:00000A04 ; ===========================================================================
.text:00000A04
.text:00000A04 ; Segment type: Pure code
.text:00000A04 ; Segment permissions: Read/Execute
.text:00000A04 _text           segment para public 'CODE' use32
.text:00000A04                 assume cs:_text
.text:00000A04                 ;org 0A04h
.text:00000A04 ; COMDAT (pick any)
.text:00000A04                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000A04
.text:00000A04 ; =============== S U B R O U T I N E =======================================
.text:00000A04
.text:00000A04 ; Attributes: bp-based frame
.text:00000A04
.text:00000A04 ; _DWORD __thiscall COutBuffer::COutBuffer(COutBuffer *__hidden this)
.text:00000A04                 public ??0COutBuffer@@QAE@XZ
.text:00000A04 ??0COutBuffer@@QAE@XZ proc near         ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+53p
.text:00000A04
.text:00000A04 var_4           = dword ptr -4
.text:00000A04
.text:00000A04                 push    ebp
.text:00000A05                 mov     ebp, esp
.text:00000A07                 push    ecx
.text:00000A08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A0F                 mov     [ebp+var_4], ecx
.text:00000A12                 mov     eax, [ebp+var_4]
.text:00000A15                 mov     dword ptr [eax], 0
.text:00000A1B                 mov     ecx, [ebp+var_4]
.text:00000A1E                 mov     dword ptr [ecx+4], 0
.text:00000A25                 mov     edx, [ebp+var_4]
.text:00000A28                 mov     dword ptr [edx+14h], 0
.text:00000A2F                 mov     eax, [ebp+var_4]
.text:00000A32                 mov     dword ptr [eax+20h], 0
.text:00000A39                 mov     eax, [ebp+var_4]
.text:00000A3C                 mov     esp, ebp
.text:00000A3E                 pop     ebp
.text:00000A3F                 retn
.text:00000A3F ??0COutBuffer@@QAE@XZ endp
.text:00000A3F
.text:00000A3F _text           ends
.text:00000A3F
.text:00000A40 ; ===========================================================================
.text:00000A40
.text:00000A40 ; Segment type: Pure code
.text:00000A40 ; Segment permissions: Read/Execute
.text:00000A40 _text           segment para public 'CODE' use32
.text:00000A40                 assume cs:_text
.text:00000A40                 ;org 0A40h
.text:00000A40 ; COMDAT (pick any)
.text:00000A40                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000A40
.text:00000A40 ; =============== S U B R O U T I N E =======================================
.text:00000A40
.text:00000A40 ; Attributes: bp-based frame
.text:00000A40
.text:00000A40 ; _DWORD __thiscall COutBuffer::~COutBuffer(COutBuffer *__hidden this)
.text:00000A40                 public ??1COutBuffer@@QAE@XZ
.text:00000A40 ??1COutBuffer@@QAE@XZ proc near         ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+81p
.text:00000A40                                         ; NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+D9p ...
.text:00000A40
.text:00000A40 var_4           = dword ptr -4
.text:00000A40
.text:00000A40                 push    ebp
.text:00000A41                 mov     ebp, esp
.text:00000A43                 push    ecx
.text:00000A44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A4B                 mov     [ebp+var_4], ecx
.text:00000A4E                 mov     ecx, [ebp+var_4] ; this
.text:00000A51                 call    ?Free@COutBuffer@@QAEXXZ ; COutBuffer::Free(void)
.text:00000A56                 add     esp, 4
.text:00000A59                 cmp     ebp, esp
.text:00000A5B                 call    __RTC_CheckEsp
.text:00000A60                 mov     esp, ebp
.text:00000A62                 pop     ebp
.text:00000A63                 retn
.text:00000A63 ??1COutBuffer@@QAE@XZ endp
.text:00000A63
.text:00000A63 _text           ends
.text:00000A63
.text:00000A64 ; ===========================================================================
.text:00000A64
.text:00000A64 ; Segment type: Pure code
.text:00000A64 ; Segment permissions: Read/Execute
.text:00000A64 _text           segment para public 'CODE' use32
.text:00000A64                 assume cs:_text
.text:00000A64                 ;org 0A64h
.text:00000A64 ; COMDAT (pick any)
.text:00000A64                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000A64
.text:00000A64 ; =============== S U B R O U T I N E =======================================
.text:00000A64
.text:00000A64 ; Attributes: bp-based frame
.text:00000A64
.text:00000A64 ; void __thiscall COutBuffer::SetStream(COutBuffer *this, struct ISequentialOutStream *)
.text:00000A64                 public ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z
.text:00000A64 ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z proc near
.text:00000A64                                         ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+FFp
.text:00000A64
.text:00000A64 var_4           = dword ptr -4
.text:00000A64 arg_0           = dword ptr  8
.text:00000A64
.text:00000A64                 push    ebp
.text:00000A65                 mov     ebp, esp
.text:00000A67                 push    ecx
.text:00000A68                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A6F                 mov     [ebp+var_4], ecx
.text:00000A72                 mov     eax, [ebp+var_4]
.text:00000A75                 mov     ecx, [ebp+arg_0]
.text:00000A78                 mov     [eax+14h], ecx
.text:00000A7B                 mov     esp, ebp
.text:00000A7D                 pop     ebp
.text:00000A7E                 retn    4
.text:00000A7E ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z endp
.text:00000A7E
.text:00000A7E ; ---------------------------------------------------------------------------
.text:00000A81                 align 4
.text:00000A81 _text           ends
.text:00000A81
.text:00000A84 ; ===========================================================================
.text:00000A84
.text:00000A84 ; Segment type: Pure code
.text:00000A84 ; Segment permissions: Read/Execute
.text:00000A84 _text           segment para public 'CODE' use32
.text:00000A84                 assume cs:_text
.text:00000A84                 ;org 0A84h
.text:00000A84 ; COMDAT (pick any)
.text:00000A84                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000A84
.text:00000A84 ; =============== S U B R O U T I N E =======================================
.text:00000A84
.text:00000A84 ; Attributes: bp-based frame
.text:00000A84
.text:00000A84 ; void __thiscall COutBuffer::WriteByte(COutBuffer *this, unsigned __int8)
.text:00000A84                 public ?WriteByte@COutBuffer@@QAEXE@Z
.text:00000A84 ?WriteByte@COutBuffer@@QAEXE@Z proc near
.text:00000A84                                         ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5A8p
.text:00000A84
.text:00000A84 var_4           = dword ptr -4
.text:00000A84 arg_0           = byte ptr  8
.text:00000A84
.text:00000A84                 push    ebp
.text:00000A85                 mov     ebp, esp
.text:00000A87                 push    ecx
.text:00000A88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A8F                 mov     [ebp+var_4], ecx
.text:00000A92                 mov     eax, [ebp+var_4]
.text:00000A95                 mov     ecx, [eax]
.text:00000A97                 mov     edx, [ebp+var_4]
.text:00000A9A                 mov     eax, [edx+4]
.text:00000A9D                 mov     dl, [ebp+arg_0]
.text:00000AA0                 mov     [ecx+eax], dl
.text:00000AA3                 mov     eax, [ebp+var_4]
.text:00000AA6                 mov     ecx, [eax+4]
.text:00000AA9                 add     ecx, 1
.text:00000AAC                 mov     edx, [ebp+var_4]
.text:00000AAF                 mov     [edx+4], ecx
.text:00000AB2                 mov     eax, [ebp+var_4]
.text:00000AB5                 mov     ecx, [ebp+var_4]
.text:00000AB8                 mov     edx, [eax+4]
.text:00000ABB                 cmp     edx, [ecx+8]
.text:00000ABE                 jnz     short loc_AC8
.text:00000AC0                 mov     ecx, [ebp+var_4] ; this
.text:00000AC3                 call    ?FlushWithCheck@COutBuffer@@QAEXXZ ; COutBuffer::FlushWithCheck(void)
.text:00000AC8
.text:00000AC8 loc_AC8:                                ; CODE XREF: COutBuffer::WriteByte(uchar)+3Aj
.text:00000AC8                 add     esp, 4
.text:00000ACB                 cmp     ebp, esp
.text:00000ACD                 call    __RTC_CheckEsp
.text:00000AD2                 mov     esp, ebp
.text:00000AD4                 pop     ebp
.text:00000AD5                 retn    4
.text:00000AD5 ?WriteByte@COutBuffer@@QAEXE@Z endp
.text:00000AD5
.text:00000AD5 _text           ends
.text:00000AD5
.text:00000AD8 ; ===========================================================================
.text:00000AD8
.text:00000AD8 ; Segment type: Pure code
.text:00000AD8 ; Segment permissions: Read/Execute
.text:00000AD8 _text           segment para public 'CODE' use32
.text:00000AD8                 assume cs:_text
.text:00000AD8                 ;org 0AD8h
.text:00000AD8 ; COMDAT (pick any)
.text:00000AD8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000AD8
.text:00000AD8 ; =============== S U B R O U T I N E =======================================
.text:00000AD8
.text:00000AD8 ; Attributes: bp-based frame
.text:00000AD8
.text:00000AD8 ; public: __thiscall NBitl::CBaseDecoder<class CInBuffer>::CBaseDecoder<class CInBuffer>(void)
.text:00000AD8                 public ??0?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ
.text:00000AD8 ??0?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ proc near
.text:00000AD8                                         ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+44p
.text:00000AD8
.text:00000AD8 var_4           = dword ptr -4
.text:00000AD8
.text:00000AD8                 push    ebp
.text:00000AD9                 mov     ebp, esp
.text:00000ADB                 push    ecx
.text:00000ADC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AE3                 mov     [ebp+var_4], ecx
.text:00000AE6                 mov     ecx, [ebp+var_4]
.text:00000AE9                 add     ecx, 8
.text:00000AEC                 call    ??0CInBuffer@@QAE@XZ ; CInBuffer::CInBuffer(void)
.text:00000AF1                 mov     eax, [ebp+var_4]
.text:00000AF4                 add     esp, 4
.text:00000AF7                 cmp     ebp, esp
.text:00000AF9                 call    __RTC_CheckEsp
.text:00000AFE                 mov     esp, ebp
.text:00000B00                 pop     ebp
.text:00000B01                 retn
.text:00000B01 ??0?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ endp
.text:00000B01
.text:00000B01 ; ---------------------------------------------------------------------------
.text:00000B02                 align 4
.text:00000B02 _text           ends
.text:00000B02
.text:00000B04 ; ===========================================================================
.text:00000B04
.text:00000B04 ; Segment type: Pure code
.text:00000B04 ; Segment permissions: Read/Execute
.text:00000B04 _text           segment para public 'CODE' use32
.text:00000B04                 assume cs:_text
.text:00000B04                 ;org 0B04h
.text:00000B04 ; COMDAT (pick any)
.text:00000B04                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000B04
.text:00000B04 ; =============== S U B R O U T I N E =======================================
.text:00000B04
.text:00000B04 ; Attributes: bp-based frame
.text:00000B04
.text:00000B04 ; public: __thiscall NBitl::CBaseDecoder<class CInBuffer>::~CBaseDecoder<class CInBuffer>(void)
.text:00000B04                 public ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ
.text:00000B04 ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ proc near
.text:00000B04                                         ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+90p
.text:00000B04                                         ; NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+E8p ...
.text:00000B04
.text:00000B04 var_4           = dword ptr -4
.text:00000B04
.text:00000B04                 push    ebp
.text:00000B05                 mov     ebp, esp
.text:00000B07                 push    ecx
.text:00000B08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B0F                 mov     [ebp+var_4], ecx
.text:00000B12                 mov     ecx, [ebp+var_4]
.text:00000B15                 add     ecx, 8          ; this
.text:00000B18                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:00000B1D                 add     esp, 4
.text:00000B20                 cmp     ebp, esp
.text:00000B22                 call    __RTC_CheckEsp
.text:00000B27                 mov     esp, ebp
.text:00000B29                 pop     ebp
.text:00000B2A                 retn
.text:00000B2A ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ endp
.text:00000B2A
.text:00000B2A ; ---------------------------------------------------------------------------
.text:00000B2B                 align 4
.text:00000B2B _text           ends
.text:00000B2B
.text:00000B2C ; ===========================================================================
.text:00000B2C
.text:00000B2C ; Segment type: Pure code
.text:00000B2C ; Segment permissions: Read/Execute
.text:00000B2C _text           segment para public 'CODE' use32
.text:00000B2C                 assume cs:_text
.text:00000B2C                 ;org 0B2Ch
.text:00000B2C ; COMDAT (pick any)
.text:00000B2C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000B2C
.text:00000B2C ; =============== S U B R O U T I N E =======================================
.text:00000B2C
.text:00000B2C ; Attributes: bp-based frame
.text:00000B2C
.text:00000B2C ; _DWORD __thiscall CInBuffer::~CInBuffer(CInBuffer *__hidden this)
.text:00000B2C                 public ??1CInBuffer@@QAE@XZ
.text:00000B2C ??1CInBuffer@@QAE@XZ proc near          ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>(void)+14p
.text:00000B2C
.text:00000B2C var_4           = dword ptr -4
.text:00000B2C
.text:00000B2C                 push    ebp
.text:00000B2D                 mov     ebp, esp
.text:00000B2F                 push    ecx
.text:00000B30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B37                 mov     [ebp+var_4], ecx
.text:00000B3A                 mov     ecx, [ebp+var_4] ; this
.text:00000B3D                 call    ?Free@CInBuffer@@QAEXXZ ; CInBuffer::Free(void)
.text:00000B42                 add     esp, 4
.text:00000B45                 cmp     ebp, esp
.text:00000B47                 call    __RTC_CheckEsp
.text:00000B4C                 mov     esp, ebp
.text:00000B4E                 pop     ebp
.text:00000B4F                 retn
.text:00000B4F ??1CInBuffer@@QAE@XZ endp
.text:00000B4F
.text:00000B4F _text           ends
.text:00000B4F
.text:00000B50 ; ===========================================================================
.text:00000B50
.text:00000B50 ; Segment type: Pure code
.text:00000B50 ; Segment permissions: Read/Execute
.text:00000B50 _text           segment para public 'CODE' use32
.text:00000B50                 assume cs:_text
.text:00000B50                 ;org 0B50h
.text:00000B50 ; COMDAT (pick any)
.text:00000B50                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000B50
.text:00000B50 ; =============== S U B R O U T I N E =======================================
.text:00000B50
.text:00000B50 ; Attributes: bp-based frame
.text:00000B50
.text:00000B50 ; public: __thiscall CInBuffer::CInBuffer(void)
.text:00000B50                 public ??0CInBuffer@@QAE@XZ
.text:00000B50 ??0CInBuffer@@QAE@XZ proc near          ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::CBaseDecoder<CInBuffer>(void)+14p
.text:00000B50
.text:00000B50 var_4           = dword ptr -4
.text:00000B50
.text:00000B50                 push    ebp
.text:00000B51                 mov     ebp, esp
.text:00000B53                 push    ecx
.text:00000B54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B5B                 mov     [ebp+var_4], ecx
.text:00000B5E                 mov     ecx, [ebp+var_4]
.text:00000B61                 call    ??0CInBufferBase@@QAE@XZ ; CInBufferBase::CInBufferBase(void)
.text:00000B66                 mov     eax, [ebp+var_4]
.text:00000B69                 add     esp, 4
.text:00000B6C                 cmp     ebp, esp
.text:00000B6E                 call    __RTC_CheckEsp
.text:00000B73                 mov     esp, ebp
.text:00000B75                 pop     ebp
.text:00000B76                 retn
.text:00000B76 ??0CInBuffer@@QAE@XZ endp
.text:00000B76
.text:00000B76 ; ---------------------------------------------------------------------------
.text:00000B77                 align 4
.text:00000B77 _text           ends
.text:00000B77
.data:00000B78 ; ===========================================================================
.data:00000B78
.data:00000B78 ; Segment type: Pure data
.data:00000B78 ; Segment permissions: Read/Write
.data:00000B78 _data           segment dword public 'DATA' use32
.data:00000B78                 assume cs:_data
.data:00000B78                 ;org 0B78h
.data:00000B78 ; COMDAT (pick any)
.data:00000B78                 public ??_R0?AUCInBufferException@@@8
.data:00000B78 ; struct CInBufferException `RTTI Type Descriptor'
.data:00000B78 ??_R0?AUCInBufferException@@@8 dd offset ??_7type_info@@6B@
.data:00000B78                                         ; DATA XREF: .xdata$x:000009D0o
.data:00000B78                                         ; const type_info::`vftable'
.data:00000B7C                 align 10h
.data:00000B80 a_?aucinbuffere db '.?AUCInBufferException@@',0
.data:00000B99                 align 4
.data:00000B99 _data           ends
.data:00000B99
.data:00000B9C ; ===========================================================================
.data:00000B9C
.data:00000B9C ; Segment type: Pure data
.data:00000B9C ; Segment permissions: Read/Write
.data:00000B9C _data           segment dword public 'DATA' use32
.data:00000B9C                 assume cs:_data
.data:00000B9C                 ;org 0B9Ch
.data:00000B9C ; COMDAT (pick any)
.data:00000B9C                 public ??_R0?AUCOutBufferException@@@8
.data:00000B9C ; struct COutBufferException `RTTI Type Descriptor'
.data:00000B9C ??_R0?AUCOutBufferException@@@8 dd offset ??_7type_info@@6B@
.data:00000B9C                                         ; DATA XREF: .xdata$x:000009E0o
.data:00000B9C                                         ; const type_info::`vftable'
.data:00000BA0                 db    0
.data:00000BA1                 db    0
.data:00000BA2                 db    0
.data:00000BA3                 db    0
.data:00000BA4                 db  2Eh ; .
.data:00000BA5                 db  3Fh ; ?
.data:00000BA6                 db  41h ; A
.data:00000BA7                 db  55h ; U
.data:00000BA8                 db  43h ; C
.data:00000BA9                 db  4Fh ; O
.data:00000BAA                 db  75h ; u
.data:00000BAB                 db  74h ; t
.data:00000BAC                 db  42h ; B
.data:00000BAD                 db  75h ; u
.data:00000BAE                 db  66h ; f
.data:00000BAF                 db  66h ; f
.data:00000BB0                 db  65h ; e
.data:00000BB1                 db  72h ; r
.data:00000BB2                 db  45h ; E
.data:00000BB3                 db  78h ; x
.data:00000BB4                 db  63h ; c
.data:00000BB5                 db  65h ; e
.data:00000BB6                 db  70h ; p
.data:00000BB7                 db  74h ; t
.data:00000BB8                 db  69h ; i
.data:00000BB9                 db  6Fh ; o
.data:00000BBA                 db  6Eh ; n
.data:00000BBB                 db  40h ; @
.data:00000BBC                 db  40h ; @
.data:00000BBD                 db    0
.data:00000BBE                 align 10h
.data:00000BBE _data           ends
.data:00000BBE
.text:00000BC0 ; ===========================================================================
.text:00000BC0
.text:00000BC0 ; Segment type: Pure code
.text:00000BC0 ; Segment permissions: Read/Execute
.text:00000BC0 _text           segment para public 'CODE' use32
.text:00000BC0                 assume cs:_text
.text:00000BC0                 ;org 0BC0h
.text:00000BC0 ; COMDAT (pick any)
.text:00000BC0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000BC0
.text:00000BC0 ; =============== S U B R O U T I N E =======================================
.text:00000BC0
.text:00000BC0 ; Attributes: bp-based frame
.text:00000BC0
.text:00000BC0 ; public: bool __thiscall NBitl::CBaseDecoder<class CInBuffer>::Create(unsigned int)
.text:00000BC0                 public ?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z
.text:00000BC0 ?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z proc near
.text:00000BC0                                         ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+64p
.text:00000BC0
.text:00000BC0 var_4           = dword ptr -4
.text:00000BC0 arg_0           = dword ptr  8
.text:00000BC0
.text:00000BC0                 push    ebp
.text:00000BC1                 mov     ebp, esp
.text:00000BC3                 push    ecx
.text:00000BC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BCB                 mov     [ebp+var_4], ecx
.text:00000BCE                 mov     eax, [ebp+arg_0]
.text:00000BD1                 push    eax             ; unsigned int
.text:00000BD2                 mov     ecx, [ebp+var_4]
.text:00000BD5                 add     ecx, 8          ; this
.text:00000BD8                 call    ?Create@CInBuffer@@QAE_NI@Z ; CInBuffer::Create(uint)
.text:00000BDD                 add     esp, 4
.text:00000BE0                 cmp     ebp, esp
.text:00000BE2                 call    __RTC_CheckEsp
.text:00000BE7                 mov     esp, ebp
.text:00000BE9                 pop     ebp
.text:00000BEA                 retn    4
.text:00000BEA ?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z endp
.text:00000BEA
.text:00000BEA ; ---------------------------------------------------------------------------
.text:00000BED                 align 10h
.text:00000BED _text           ends
.text:00000BED
.text:00000BF0 ; ===========================================================================
.text:00000BF0
.text:00000BF0 ; Segment type: Pure code
.text:00000BF0 ; Segment permissions: Read/Execute
.text:00000BF0 _text           segment para public 'CODE' use32
.text:00000BF0                 assume cs:_text
.text:00000BF0                 ;org 0BF0h
.text:00000BF0 ; COMDAT (pick any)
.text:00000BF0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000BF0
.text:00000BF0 ; =============== S U B R O U T I N E =======================================
.text:00000BF0
.text:00000BF0 ; Attributes: bp-based frame
.text:00000BF0
.text:00000BF0 ; int __stdcall NBitl::CBaseDecoder<CInBuffer>::SetStream(struct ISequentialInStream *)
.text:00000BF0                 public ?SetStream@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXPAUISequentialInStream@@@Z
.text:00000BF0 ?SetStream@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXPAUISequentialInStream@@@Z proc near
.text:00000BF0                                         ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+A7p
.text:00000BF0
.text:00000BF0 var_4           = dword ptr -4
.text:00000BF0 arg_0           = dword ptr  8
.text:00000BF0
.text:00000BF0                 push    ebp
.text:00000BF1                 mov     ebp, esp
.text:00000BF3                 push    ecx
.text:00000BF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BFB                 mov     [ebp+var_4], ecx
.text:00000BFE                 mov     eax, [ebp+arg_0]
.text:00000C01                 push    eax             ; struct ISequentialInStream *
.text:00000C02                 mov     ecx, [ebp+var_4]
.text:00000C05                 add     ecx, 8          ; this
.text:00000C08                 call    ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z ; CInBufferBase::SetStream(ISequentialInStream *)
.text:00000C0D                 add     esp, 4
.text:00000C10                 cmp     ebp, esp
.text:00000C12                 call    __RTC_CheckEsp
.text:00000C17                 mov     esp, ebp
.text:00000C19                 pop     ebp
.text:00000C1A                 retn    4
.text:00000C1A ?SetStream@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXPAUISequentialInStream@@@Z endp
.text:00000C1A
.text:00000C1A ; ---------------------------------------------------------------------------
.text:00000C1D                 align 10h
.text:00000C1D _text           ends
.text:00000C1D
.text:00000C20 ; ===========================================================================
.text:00000C20
.text:00000C20 ; Segment type: Pure code
.text:00000C20 ; Segment permissions: Read/Execute
.text:00000C20 _text           segment para public 'CODE' use32
.text:00000C20                 assume cs:_text
.text:00000C20                 ;org 0C20h
.text:00000C20 ; COMDAT (pick any)
.text:00000C20                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000C20
.text:00000C20 ; =============== S U B R O U T I N E =======================================
.text:00000C20
.text:00000C20 ; Attributes: bp-based frame
.text:00000C20
.text:00000C20 ; void __thiscall CInBufferBase::SetStream(CInBufferBase *this, struct ISequentialInStream *)
.text:00000C20                 public ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z
.text:00000C20 ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z proc near
.text:00000C20                                         ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::SetStream(ISequentialInStream *)+18p
.text:00000C20
.text:00000C20 var_4           = dword ptr -4
.text:00000C20 arg_0           = dword ptr  8
.text:00000C20
.text:00000C20                 push    ebp
.text:00000C21                 mov     ebp, esp
.text:00000C23                 push    ecx
.text:00000C24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C2B                 mov     [ebp+var_4], ecx
.text:00000C2E                 mov     eax, [ebp+var_4]
.text:00000C31                 mov     ecx, [ebp+arg_0]
.text:00000C34                 mov     [eax+0Ch], ecx
.text:00000C37                 mov     esp, ebp
.text:00000C39                 pop     ebp
.text:00000C3A                 retn    4
.text:00000C3A ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z endp
.text:00000C3A
.text:00000C3A ; ---------------------------------------------------------------------------
.text:00000C3D                 align 10h
.text:00000C3D _text           ends
.text:00000C3D
.text:00000C40 ; ===========================================================================
.text:00000C40
.text:00000C40 ; Segment type: Pure code
.text:00000C40 ; Segment permissions: Read/Execute
.text:00000C40 _text           segment para public 'CODE' use32
.text:00000C40                 assume cs:_text
.text:00000C40                 ;org 0C40h
.text:00000C40 ; COMDAT (pick any)
.text:00000C40                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000C40
.text:00000C40 ; =============== S U B R O U T I N E =======================================
.text:00000C40
.text:00000C40 ; Attributes: bp-based frame
.text:00000C40
.text:00000C40 ; public: void __thiscall NBitl::CBaseDecoder<class CInBuffer>::Init(void)
.text:00000C40                 public ?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ
.text:00000C40 ?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ proc near
.text:00000C40                                         ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+AFp
.text:00000C40
.text:00000C40 var_4           = dword ptr -4
.text:00000C40
.text:00000C40                 push    ebp
.text:00000C41                 mov     ebp, esp
.text:00000C43                 push    ecx
.text:00000C44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C4B                 mov     [ebp+var_4], ecx
.text:00000C4E                 mov     ecx, [ebp+var_4]
.text:00000C51                 add     ecx, 8          ; this
.text:00000C54                 call    ?Init@CInBufferBase@@QAEXXZ ; CInBufferBase::Init(void)
.text:00000C59                 mov     eax, [ebp+var_4]
.text:00000C5C                 mov     dword ptr [eax], 20h ; ' '
.text:00000C62                 mov     ecx, [ebp+var_4]
.text:00000C65                 mov     dword ptr [ecx+4], 0
.text:00000C6C                 add     esp, 4
.text:00000C6F                 cmp     ebp, esp
.text:00000C71                 call    __RTC_CheckEsp
.text:00000C76                 mov     esp, ebp
.text:00000C78                 pop     ebp
.text:00000C79                 retn
.text:00000C79 ?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ endp
.text:00000C79
.text:00000C79 ; ---------------------------------------------------------------------------
.text:00000C7A                 align 4
.text:00000C7A _text           ends
.text:00000C7A
.text:00000C7C ; ===========================================================================
.text:00000C7C
.text:00000C7C ; Segment type: Pure code
.text:00000C7C ; Segment permissions: Read/Execute
.text:00000C7C _text           segment para public 'CODE' use32
.text:00000C7C                 assume cs:_text
.text:00000C7C                 ;org 0C7Ch
.text:00000C7C ; COMDAT (pick any)
.text:00000C7C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000C7C
.text:00000C7C ; =============== S U B R O U T I N E =======================================
.text:00000C7C
.text:00000C7C ; Attributes: bp-based frame
.text:00000C7C
.text:00000C7C ; public: unsigned __int64 __thiscall NBitl::CBaseDecoder<class CInBuffer>::GetProcessedSize(void)const
.text:00000C7C                 public ?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ
.text:00000C7C ?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ proc near
.text:00000C7C                                         ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+6A6p
.text:00000C7C
.text:00000C7C var_4           = dword ptr -4
.text:00000C7C
.text:00000C7C                 push    ebp
.text:00000C7D                 mov     ebp, esp
.text:00000C7F                 push    ecx
.text:00000C80                 push    esi
.text:00000C81                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C88                 mov     [ebp+var_4], ecx
.text:00000C8B                 mov     ecx, [ebp+var_4]
.text:00000C8E                 add     ecx, 8          ; this
.text:00000C91                 call    ?GetProcessedSize@CInBufferBase@@QBE_KXZ ; CInBufferBase::GetProcessedSize(void)
.text:00000C96                 mov     ecx, [ebp+var_4]
.text:00000C99                 mov     esi, 20h ; ' '
.text:00000C9E                 sub     esi, [ecx]
.text:00000CA0                 shr     esi, 3
.text:00000CA3                 xor     ecx, ecx
.text:00000CA5                 sub     eax, esi
.text:00000CA7                 sbb     edx, ecx
.text:00000CA9                 pop     esi
.text:00000CAA                 add     esp, 4
.text:00000CAD                 cmp     ebp, esp
.text:00000CAF                 call    __RTC_CheckEsp
.text:00000CB4                 mov     esp, ebp
.text:00000CB6                 pop     ebp
.text:00000CB7                 retn
.text:00000CB7 ?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ endp
.text:00000CB7
.text:00000CB7 _text           ends
.text:00000CB7
.text:00000CB8 ; ===========================================================================
.text:00000CB8
.text:00000CB8 ; Segment type: Pure code
.text:00000CB8 ; Segment permissions: Read/Execute
.text:00000CB8 _text           segment para public 'CODE' use32
.text:00000CB8                 assume cs:_text
.text:00000CB8                 ;org 0CB8h
.text:00000CB8 ; COMDAT (pick any)
.text:00000CB8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000CB8
.text:00000CB8 ; =============== S U B R O U T I N E =======================================
.text:00000CB8
.text:00000CB8 ; Attributes: bp-based frame
.text:00000CB8
.text:00000CB8 ; unsigned __int64 __thiscall CInBufferBase::GetProcessedSize(CInBufferBase *__hidden this)
.text:00000CB8                 public ?GetProcessedSize@CInBufferBase@@QBE_KXZ
.text:00000CB8 ?GetProcessedSize@CInBufferBase@@QBE_KXZ proc near
.text:00000CB8                                         ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::GetProcessedSize(void)+15p
.text:00000CB8
.text:00000CB8 var_4           = dword ptr -4
.text:00000CB8
.text:00000CB8                 push    ebp
.text:00000CB9                 mov     ebp, esp
.text:00000CBB                 push    ecx
.text:00000CBC                 push    esi
.text:00000CBD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CC4                 mov     [ebp+var_4], ecx
.text:00000CC7                 mov     eax, [ebp+var_4]
.text:00000CCA                 mov     ecx, [eax+20h]
.text:00000CCD                 xor     esi, esi
.text:00000CCF                 mov     edx, [ebp+var_4]
.text:00000CD2                 add     ecx, [edx+10h]
.text:00000CD5                 adc     esi, [edx+14h]
.text:00000CD8                 mov     eax, [ebp+var_4]
.text:00000CDB                 mov     edx, [ebp+var_4]
.text:00000CDE                 mov     eax, [eax]
.text:00000CE0                 sub     eax, [edx+8]
.text:00000CE3                 cdq
.text:00000CE4                 add     ecx, eax
.text:00000CE6                 adc     esi, edx
.text:00000CE8                 mov     eax, ecx
.text:00000CEA                 mov     edx, esi
.text:00000CEC                 pop     esi
.text:00000CED                 mov     esp, ebp
.text:00000CEF                 pop     ebp
.text:00000CF0                 retn
.text:00000CF0 ?GetProcessedSize@CInBufferBase@@QBE_KXZ endp
.text:00000CF0
.text:00000CF0 ; ---------------------------------------------------------------------------
.text:00000CF1                 align 4
.text:00000CF1 _text           ends
.text:00000CF1
.text:00000CF4 ; ===========================================================================
.text:00000CF4
.text:00000CF4 ; Segment type: Pure code
.text:00000CF4 ; Segment permissions: Read/Execute
.text:00000CF4 _text           segment para public 'CODE' use32
.text:00000CF4                 assume cs:_text
.text:00000CF4                 ;org 0CF4h
.text:00000CF4 ; COMDAT (pick any)
.text:00000CF4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000CF4
.text:00000CF4 ; =============== S U B R O U T I N E =======================================
.text:00000CF4
.text:00000CF4 ; Attributes: bp-based frame
.text:00000CF4
.text:00000CF4 ; public: unsigned int __thiscall NBitl::CBaseDecoder<class CInBuffer>::ReadBits(unsigned int)
.text:00000CF4                 public ?ReadBits@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEII@Z
.text:00000CF4 ?ReadBits@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEII@Z proc near
.text:00000CF4                                         ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+223p
.text:00000CF4                                         ; NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2A0p
.text:00000CF4
.text:00000CF4 var_8           = dword ptr -8
.text:00000CF4 var_4           = dword ptr -4
.text:00000CF4 arg_0           = dword ptr  8
.text:00000CF4
.text:00000CF4                 push    ebp
.text:00000CF5                 mov     ebp, esp
.text:00000CF7                 sub     esp, 8
.text:00000CFA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000D01                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D08                 mov     [ebp+var_4], ecx
.text:00000D0B                 mov     ecx, [ebp+var_4]
.text:00000D0E                 call    ?Normalize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ ; NBitl::CBaseDecoder<CInBuffer>::Normalize(void)
.text:00000D13                 mov     eax, 1
.text:00000D18                 mov     ecx, [ebp+arg_0]
.text:00000D1B                 shl     eax, cl
.text:00000D1D                 sub     eax, 1
.text:00000D20                 mov     ecx, [ebp+var_4]
.text:00000D23                 and     eax, [ecx+4]
.text:00000D26                 mov     [ebp+var_8], eax
.text:00000D29                 mov     edx, [ebp+var_4]
.text:00000D2C                 mov     eax, [edx]
.text:00000D2E                 add     eax, [ebp+arg_0]
.text:00000D31                 mov     ecx, [ebp+var_4]
.text:00000D34                 mov     [ecx], eax
.text:00000D36                 mov     edx, [ebp+var_4]
.text:00000D39                 mov     eax, [edx+4]
.text:00000D3C                 mov     ecx, [ebp+arg_0]
.text:00000D3F                 shr     eax, cl
.text:00000D41                 mov     ecx, [ebp+var_4]
.text:00000D44                 mov     [ecx+4], eax
.text:00000D47                 mov     eax, [ebp+var_8]
.text:00000D4A                 add     esp, 8
.text:00000D4D                 cmp     ebp, esp
.text:00000D4F                 call    __RTC_CheckEsp
.text:00000D54                 mov     esp, ebp
.text:00000D56                 pop     ebp
.text:00000D57                 retn    4
.text:00000D57 ?ReadBits@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEII@Z endp
.text:00000D57
.text:00000D57 ; ---------------------------------------------------------------------------
.text:00000D5A                 align 4
.text:00000D5A _text           ends
.text:00000D5A
.text:00000D5C ; ===========================================================================
.text:00000D5C
.text:00000D5C ; Segment type: Pure code
.text:00000D5C ; Segment permissions: Read/Execute
.text:00000D5C _text           segment para public 'CODE' use32
.text:00000D5C                 assume cs:_text
.text:00000D5C                 ;org 0D5Ch
.text:00000D5C ; COMDAT (pick any)
.text:00000D5C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000D5C
.text:00000D5C ; =============== S U B R O U T I N E =======================================
.text:00000D5C
.text:00000D5C ; Attributes: bp-based frame
.text:00000D5C
.text:00000D5C ; public: bool __thiscall NBitl::CBaseDecoder<class CInBuffer>::ExtraBitsWereRead(void)const
.text:00000D5C                 public ?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ
.text:00000D5C ?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ proc near
.text:00000D5C                                         ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+231p
.text:00000D5C
.text:00000D5C var_8           = dword ptr -8
.text:00000D5C var_4           = dword ptr -4
.text:00000D5C
.text:00000D5C                 push    ebp
.text:00000D5D                 mov     ebp, esp
.text:00000D5F                 sub     esp, 8
.text:00000D62                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000D69                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D70                 mov     [ebp+var_4], ecx
.text:00000D73                 mov     eax, [ebp+var_4]
.text:00000D76                 cmp     dword ptr [eax+28h], 4
.text:00000D7A                 ja      short loc_D9C
.text:00000D7C                 mov     ecx, [ebp+var_4]
.text:00000D7F                 mov     edx, 20h ; ' '
.text:00000D84                 sub     edx, [ecx]
.text:00000D86                 mov     eax, [ebp+var_4]
.text:00000D89                 mov     ecx, [eax+28h]
.text:00000D8C                 shl     ecx, 3
.text:00000D8F                 cmp     edx, ecx
.text:00000D91                 jb      short loc_D9C
.text:00000D93                 mov     [ebp+var_8], 0
.text:00000D9A                 jmp     short loc_DA3
.text:00000D9C ; ---------------------------------------------------------------------------
.text:00000D9C
.text:00000D9C loc_D9C:                                ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead(void)+1Ej
.text:00000D9C                                         ; NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead(void)+35j
.text:00000D9C                 mov     [ebp+var_8], 1
.text:00000DA3
.text:00000DA3 loc_DA3:                                ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead(void)+3Ej
.text:00000DA3                 mov     al, byte ptr [ebp+var_8]
.text:00000DA6                 mov     esp, ebp
.text:00000DA8                 pop     ebp
.text:00000DA9                 retn
.text:00000DA9 ?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ endp
.text:00000DA9
.text:00000DA9 ; ---------------------------------------------------------------------------
.text:00000DAA                 align 4
.text:00000DAA _text           ends
.text:00000DAA
.text:00000DAC ; ===========================================================================
.text:00000DAC
.text:00000DAC ; Segment type: Pure code
.text:00000DAC ; Segment permissions: Read/Execute
.text:00000DAC _text           segment para public 'CODE' use32
.text:00000DAC                 assume cs:_text
.text:00000DAC                 ;org 0DACh
.text:00000DAC ; COMDAT (pick any)
.text:00000DAC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000DAC
.text:00000DAC ; =============== S U B R O U T I N E =======================================
.text:00000DAC
.text:00000DAC ; Attributes: bp-based frame
.text:00000DAC
.text:00000DAC ; public: void __thiscall NBitl::CBaseDecoder<class CInBuffer>::Normalize(void)
.text:00000DAC                 public ?Normalize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ
.text:00000DAC ?Normalize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ proc near
.text:00000DAC                                         ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::ReadBits(uint)+1Ap
.text:00000DAC
.text:00000DAC var_4           = dword ptr -4
.text:00000DAC
.text:00000DAC                 push    ebp
.text:00000DAD                 mov     ebp, esp
.text:00000DAF                 push    ecx
.text:00000DB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DB7                 mov     [ebp+var_4], ecx
.text:00000DBA                 jmp     short loc_DC9
.text:00000DBC ; ---------------------------------------------------------------------------
.text:00000DBC
.text:00000DBC loc_DBC:                                ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::Normalize(void)+4Bj
.text:00000DBC                 mov     eax, [ebp+var_4]
.text:00000DBF                 mov     ecx, [eax]
.text:00000DC1                 sub     ecx, 8
.text:00000DC4                 mov     edx, [ebp+var_4]
.text:00000DC7                 mov     [edx], ecx
.text:00000DC9
.text:00000DC9 loc_DC9:                                ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::Normalize(void)+Ej
.text:00000DC9                 mov     eax, [ebp+var_4]
.text:00000DCC                 cmp     dword ptr [eax], 8
.text:00000DCF                 jb      short loc_DF9
.text:00000DD1                 mov     ecx, [ebp+var_4]
.text:00000DD4                 add     ecx, 8          ; this
.text:00000DD7                 call    ?ReadByte@CInBufferBase@@QAEEXZ ; CInBufferBase::ReadByte(void)
.text:00000DDC                 movzx   edx, al
.text:00000DDF                 mov     eax, [ebp+var_4]
.text:00000DE2                 mov     ecx, 20h ; ' '
.text:00000DE7                 sub     ecx, [eax]
.text:00000DE9                 shl     edx, cl
.text:00000DEB                 mov     ecx, [ebp+var_4]
.text:00000DEE                 or      edx, [ecx+4]
.text:00000DF1                 mov     eax, [ebp+var_4]
.text:00000DF4                 mov     [eax+4], edx
.text:00000DF7                 jmp     short loc_DBC
.text:00000DF9 ; ---------------------------------------------------------------------------
.text:00000DF9
.text:00000DF9 loc_DF9:                                ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::Normalize(void)+23j
.text:00000DF9                 add     esp, 4
.text:00000DFC                 cmp     ebp, esp
.text:00000DFE                 call    __RTC_CheckEsp
.text:00000E03                 mov     esp, ebp
.text:00000E05                 pop     ebp
.text:00000E06                 retn
.text:00000E06 ?Normalize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ endp
.text:00000E06
.text:00000E06 ; ---------------------------------------------------------------------------
.text:00000E07                 align 4
.text:00000E07 _text           ends
.text:00000E07
.text:00000E08 ; ===========================================================================
.text:00000E08
.text:00000E08 ; Segment type: Pure code
.text:00000E08 ; Segment permissions: Read/Execute
.text:00000E08 _text           segment para public 'CODE' use32
.text:00000E08                 assume cs:_text
.text:00000E08                 ;org 0E08h
.text:00000E08 ; COMDAT (pick any)
.text:00000E08                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000E08
.text:00000E08 ; =============== S U B R O U T I N E =======================================
.text:00000E08
.text:00000E08 ; Attributes: bp-based frame
.text:00000E08
.text:00000E08 ; unsigned __int8 __thiscall CInBufferBase::ReadByte(CInBufferBase *__hidden this)
.text:00000E08                 public ?ReadByte@CInBufferBase@@QAEEXZ
.text:00000E08 ?ReadByte@CInBufferBase@@QAEEXZ proc near
.text:00000E08                                         ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::Normalize(void)+2Bp
.text:00000E08
.text:00000E08 var_8           = dword ptr -8
.text:00000E08 var_4           = dword ptr -4
.text:00000E08
.text:00000E08                 push    ebp
.text:00000E09                 mov     ebp, esp
.text:00000E0B                 sub     esp, 8
.text:00000E0E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000E15                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E1C                 mov     [ebp+var_4], ecx
.text:00000E1F                 mov     eax, [ebp+var_4]
.text:00000E22                 mov     ecx, [ebp+var_4]
.text:00000E25                 mov     edx, [eax]
.text:00000E27                 cmp     edx, [ecx+4]
.text:00000E2A                 jb      short loc_E36
.text:00000E2C                 mov     ecx, [ebp+var_4] ; this
.text:00000E2F                 call    ?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ ; CInBufferBase::ReadByte_FromNewBlock(void)
.text:00000E34                 jmp     short loc_E50
.text:00000E36 ; ---------------------------------------------------------------------------
.text:00000E36
.text:00000E36 loc_E36:                                ; CODE XREF: CInBufferBase::ReadByte(void)+22j
.text:00000E36                 mov     eax, [ebp+var_4]
.text:00000E39                 mov     ecx, [eax]
.text:00000E3B                 mov     dl, [ecx]
.text:00000E3D                 mov     byte ptr [ebp+var_8+3], dl
.text:00000E40                 mov     eax, [ebp+var_4]
.text:00000E43                 mov     ecx, [eax]
.text:00000E45                 add     ecx, 1
.text:00000E48                 mov     edx, [ebp+var_4]
.text:00000E4B                 mov     [edx], ecx
.text:00000E4D                 mov     al, byte ptr [ebp+var_8+3]
.text:00000E50
.text:00000E50 loc_E50:                                ; CODE XREF: CInBufferBase::ReadByte(void)+2Cj
.text:00000E50                 add     esp, 8
.text:00000E53                 cmp     ebp, esp
.text:00000E55                 call    __RTC_CheckEsp
.text:00000E5A                 mov     esp, ebp
.text:00000E5C                 pop     ebp
.text:00000E5D                 retn
.text:00000E5D ?ReadByte@CInBufferBase@@QAEEXZ endp
.text:00000E5D
.text:00000E5D _text           ends
.text:00000E5D
UNDEF:00000E60 ; ===========================================================================
UNDEF:00000E60
UNDEF:00000E60 ; Segment type: Externs
UNDEF:00000E60 ; UNDEF
UNDEF:00000E60 ; __int32 __thiscall COutBuffer::Flush(COutBuffer *__hidden this)
UNDEF:00000E60                 extrn ?Flush@COutBuffer@@QAEJXZ:near
UNDEF:00000E60                                         ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+722p
UNDEF:00000E64 ; unsigned __int64 __thiscall COutBuffer::GetProcessedSize(COutBuffer *__hidden this)
UNDEF:00000E64                 extrn ?GetProcessedSize@COutBuffer@@QBE_KXZ:near
UNDEF:00000E64                                         ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+63Fp
UNDEF:00000E68 ; void __thiscall COutBuffer::Init(COutBuffer *__hidden this)
UNDEF:00000E68                 extrn ?Init@COutBuffer@@QAEXXZ:near
UNDEF:00000E68                                         ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+107p
UNDEF:00000E6C ; bool __thiscall COutBuffer::Create(COutBuffer *__hidden this, unsigned int)
UNDEF:00000E6C                 extrn ?Create@COutBuffer@@QAE_NI@Z:near
UNDEF:00000E6C                                         ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+BCp
UNDEF:00000E70                 extrn ___security_cookie:near
UNDEF:00000E70                                         ; DATA XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2Dr
UNDEF:00000E70                                         ; NCompress::NShrink::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+27r
UNDEF:00000E74                 extrn ___CxxFrameHandler3:near
UNDEF:00000E74                                         ; CODE XREF: __ehhandler$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+19j
UNDEF:00000E74                                         ; __ehhandler$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+16j
UNDEF:00000E78 ; __fastcall __security_check_cookie(x)
UNDEF:00000E78                 extrn @__security_check_cookie@4:near
UNDEF:00000E78                                         ; CODE XREF: __ehhandler$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+Fp
UNDEF:00000E78                                         ; __ehhandler$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+Cp
UNDEF:00000E7C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000E7C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000E7C                                         ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+758p
UNDEF:00000E7C                                         ; NCompress::NShrink::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+DAp
UNDEF:00000E80                 extrn __RTC_CheckEsp:near
UNDEF:00000E80                                         ; CODE XREF: NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+6D7p
UNDEF:00000E80                                         ; NCompress::NShrink::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+774p ...
UNDEF:00000E84                 extrn __RTC_Shutdown:near
UNDEF:00000E84                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000E88                 extrn __RTC_InitBase:near
UNDEF:00000E88                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000E8C ; void __thiscall COutBuffer::Free(COutBuffer *__hidden this)
UNDEF:00000E8C                 extrn ?Free@COutBuffer@@QAEXXZ:near
UNDEF:00000E8C                                         ; CODE XREF: COutBuffer::~COutBuffer(void)+11p
UNDEF:00000E90 ; void __thiscall COutBuffer::FlushWithCheck(COutBuffer *__hidden this)
UNDEF:00000E90                 extrn ?FlushWithCheck@COutBuffer@@QAEXXZ:near
UNDEF:00000E90                                         ; CODE XREF: COutBuffer::WriteByte(uchar)+3Fp
UNDEF:00000E94 ; void __thiscall CInBuffer::Free(CInBuffer *__hidden this)
UNDEF:00000E94                 extrn ?Free@CInBuffer@@QAEXXZ:near
UNDEF:00000E94                                         ; CODE XREF: CInBuffer::~CInBuffer(void)+11p
UNDEF:00000E98 ; public: __thiscall CInBufferBase::CInBufferBase(void)
UNDEF:00000E98                 extrn ??0CInBufferBase@@QAE@XZ:near
UNDEF:00000E98                                         ; CODE XREF: CInBuffer::CInBuffer(void)+11p
UNDEF:00000E9C ; const type_info::`vftable'
UNDEF:00000E9C                 extrn ??_7type_info@@6B@:near
UNDEF:00000E9C                                         ; DATA XREF: .data:CInBufferException `RTTI Type Descriptor'o
UNDEF:00000E9C                                         ; .data:COutBufferException `RTTI Type Descriptor'o
UNDEF:00000EA0 ; bool __thiscall CInBuffer::Create(CInBuffer *__hidden this, unsigned int)
UNDEF:00000EA0                 extrn ?Create@CInBuffer@@QAE_NI@Z:near
UNDEF:00000EA0                                         ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::Create(uint)+18p
UNDEF:00000EA4 ; void __thiscall CInBufferBase::Init(CInBufferBase *__hidden this)
UNDEF:00000EA4                 extrn ?Init@CInBufferBase@@QAEXXZ:near
UNDEF:00000EA4                                         ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::Init(void)+14p
UNDEF:00000EA8 ; unsigned __int8 __thiscall CInBufferBase::ReadByte_FromNewBlock(CInBufferBase *__hidden this)
UNDEF:00000EA8                 extrn ?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ:near
UNDEF:00000EA8                                         ; CODE XREF: CInBufferBase::ReadByte(void)+27p
UNDEF:00000EA8
UNDEF:00000EA8
UNDEF:00000EA8                 end