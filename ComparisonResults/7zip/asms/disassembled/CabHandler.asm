.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 42F94D5017D8E59DC9CCC06EEF6715A2
.rdata:00000000 ; Input CRC32 : 5040A2BD
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\CabHandler.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 _kProps         db 3                    ; DATA XREF: NArchive::NCab::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+13r
.rdata:00000001                 db    7
.rdata:00000002                 db  0Ch
.rdata:00000003                 db    9
.rdata:00000004                 db  16h
.rdata:00000005                 db  1Bh
.rdata:00000006                 db    0
.rdata:00000007                 db    0
.rdata:00000008 _kArcProps      db 4Fh                  ; DATA XREF: NArchive::NCab::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+13r
.rdata:00000009                 db  16h
.rdata:0000000A                 db  26h ; &
.rdata:0000000B                 db  27h ; '
.rdata:0000000C                 db  50h ; P
.rdata:0000000D                 db  31h ; 1
.rdata:0000000E                 db    0
.rdata:0000000F                 db    0
.rdata:00000010 $SG71355        db 'None',0             ; DATA XREF: .rdata:_kMethodso
.rdata:00000015                 align 4
.rdata:00000018 $SG71356        db 'MSZip',0            ; DATA XREF: .rdata:00000030o
.rdata:0000001E                 align 10h
.rdata:00000020 $SG71357        db 'Quantum',0          ; DATA XREF: .rdata:00000034o
.rdata:00000020                                         ; .text:00000858o
.rdata:00000028 $SG71358        db 'LZX',0              ; DATA XREF: .rdata:00000038o
.rdata:0000002C ; char *kMethods
.rdata:0000002C _kMethods       dd offset $SG71355      ; DATA XREF: NArchive::NCab::SetMethodName(char *,uint,uint)+Cr
.rdata:0000002C                                         ; "None"
.rdata:00000030                 dd offset $SG71356      ; "MSZip"
.rdata:00000034                 dd offset $SG71357      ; "Quantum"
.rdata:00000038                 dd offset $SG71358      ; "LZX"
.rdata:0000003C $SG71445        db '.cab',0             ; DATA XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+606o
.rdata:0000003C                                         ; .xdata$x:__catchsym$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$5o ...
.rdata:00000041                 align 4
.rdata:00000044 ; char _SG71614[]
.rdata:00000044 $SG71614        db 'Can',27h,'t open volume: ',0
.rdata:00000044                                         ; DATA XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *):loc_15C3o
.rdata:00000044 _rdata          ends
.rdata:00000044
.text:00000058 ; ===========================================================================
.text:00000058
.text:00000058 ; Segment type: Pure code
.text:00000058 ; Segment permissions: Read/Execute
.text:00000058 _text           segment para public 'CODE' use32
.text:00000058                 assume cs:_text
.text:00000058                 ;org 58h
.text:00000058                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000058
.text:00000058 ; =============== S U B R O U T I N E =======================================
.text:00000058
.text:00000058 ; Attributes: bp-based frame
.text:00000058
.text:00000058 ; __int32 __stdcall NArchive::NCab::CHandler::GetNumberOfProperties(NArchive::NCab::CHandler *this, unsigned int *)
.text:00000058                 public ?GetNumberOfProperties@CHandler@NCab@NArchive@@UAGJPAI@Z
.text:00000058 ?GetNumberOfProperties@CHandler@NCab@NArchive@@UAGJPAI@Z proc near
.text:00000058
.text:00000058 this            = dword ptr  8
.text:00000058 arg_4           = dword ptr  0Ch
.text:00000058
.text:00000058                 push    ebp
.text:00000059                 mov     ebp, esp
.text:0000005B                 mov     eax, [ebp+arg_4]
.text:0000005E                 mov     dword ptr [eax], 6
.text:00000064                 xor     eax, eax
.text:00000066                 pop     ebp
.text:00000067                 retn    8
.text:00000067 ?GetNumberOfProperties@CHandler@NCab@NArchive@@UAGJPAI@Z endp
.text:00000067
.text:00000067 ; ---------------------------------------------------------------------------
.text:0000006A                 db 0Eh dup(0CCh)
.text:00000078
.text:00000078 ; =============== S U B R O U T I N E =======================================
.text:00000078
.text:00000078 ; Attributes: bp-based frame
.text:00000078
.text:00000078 ; __int32 __stdcall NArchive::NCab::CHandler::GetPropertyInfo(NArchive::NCab::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *, unsigned __int16 *)
.text:00000078                 public ?GetPropertyInfo@CHandler@NCab@NArchive@@UAGJIPAPA_WPAKPAG@Z
.text:00000078 ?GetPropertyInfo@CHandler@NCab@NArchive@@UAGJIPAPA_WPAKPAG@Z proc near
.text:00000078
.text:00000078 this            = dword ptr  8
.text:00000078 arg_4           = dword ptr  0Ch
.text:00000078 arg_8           = dword ptr  10h
.text:00000078 arg_C           = dword ptr  14h
.text:00000078 arg_10          = dword ptr  18h
.text:00000078
.text:00000078                 push    ebp
.text:00000079                 mov     ebp, esp
.text:0000007B                 cmp     [ebp+arg_4], 6
.text:0000007F                 jb      short loc_88
.text:00000081                 mov     eax, 80070057h
.text:00000086                 jmp     short loc_B5
.text:00000088 ; ---------------------------------------------------------------------------
.text:00000088
.text:00000088 loc_88:                                 ; CODE XREF: NArchive::NCab::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+7j
.text:00000088                 mov     eax, [ebp+arg_4]
.text:0000008B                 movzx   ecx, _kProps[eax]
.text:00000092                 mov     edx, [ebp+arg_C]
.text:00000095                 mov     [edx], ecx
.text:00000097                 mov     eax, [ebp+arg_C]
.text:0000009A                 mov     ecx, [eax]
.text:0000009C                 movzx   dx, byte ptr ds:?k7z_PROPID_To_VARTYPE@@3QBEB[ecx] ; uchar const * const k7z_PROPID_To_VARTYPE
.text:000000A4                 mov     eax, [ebp+arg_10]
.text:000000A7                 mov     [eax], dx
.text:000000AA                 mov     ecx, [ebp+arg_8]
.text:000000AD                 mov     dword ptr [ecx], 0
.text:000000B3                 xor     eax, eax
.text:000000B5
.text:000000B5 loc_B5:                                 ; CODE XREF: NArchive::NCab::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+Ej
.text:000000B5                 pop     ebp
.text:000000B6                 retn    14h
.text:000000B6 ?GetPropertyInfo@CHandler@NCab@NArchive@@UAGJIPAPA_WPAKPAG@Z endp
.text:000000B6
.text:000000B6 ; ---------------------------------------------------------------------------
.text:000000B9                 db 0Fh dup(0CCh)
.text:000000C8
.text:000000C8 ; =============== S U B R O U T I N E =======================================
.text:000000C8
.text:000000C8 ; Attributes: bp-based frame
.text:000000C8
.text:000000C8 ; __int32 __stdcall NArchive::NCab::CHandler::GetNumberOfArchiveProperties(NArchive::NCab::CHandler *this, unsigned int *)
.text:000000C8                 public ?GetNumberOfArchiveProperties@CHandler@NCab@NArchive@@UAGJPAI@Z
.text:000000C8 ?GetNumberOfArchiveProperties@CHandler@NCab@NArchive@@UAGJPAI@Z proc near
.text:000000C8
.text:000000C8 this            = dword ptr  8
.text:000000C8 arg_4           = dword ptr  0Ch
.text:000000C8
.text:000000C8                 push    ebp
.text:000000C9                 mov     ebp, esp
.text:000000CB                 mov     eax, [ebp+arg_4]
.text:000000CE                 mov     dword ptr [eax], 6
.text:000000D4                 xor     eax, eax
.text:000000D6                 pop     ebp
.text:000000D7                 retn    8
.text:000000D7 ?GetNumberOfArchiveProperties@CHandler@NCab@NArchive@@UAGJPAI@Z endp
.text:000000D7
.text:000000D7 ; ---------------------------------------------------------------------------
.text:000000DA                 db 0Eh dup(0CCh)
.text:000000E8
.text:000000E8 ; =============== S U B R O U T I N E =======================================
.text:000000E8
.text:000000E8 ; Attributes: bp-based frame
.text:000000E8
.text:000000E8 ; __int32 __stdcall NArchive::NCab::CHandler::GetArchivePropertyInfo(NArchive::NCab::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *, unsigned __int16 *)
.text:000000E8                 public ?GetArchivePropertyInfo@CHandler@NCab@NArchive@@UAGJIPAPA_WPAKPAG@Z
.text:000000E8 ?GetArchivePropertyInfo@CHandler@NCab@NArchive@@UAGJIPAPA_WPAKPAG@Z proc near
.text:000000E8
.text:000000E8 this            = dword ptr  8
.text:000000E8 arg_4           = dword ptr  0Ch
.text:000000E8 arg_8           = dword ptr  10h
.text:000000E8 arg_C           = dword ptr  14h
.text:000000E8 arg_10          = dword ptr  18h
.text:000000E8
.text:000000E8                 push    ebp
.text:000000E9                 mov     ebp, esp
.text:000000EB                 cmp     [ebp+arg_4], 6
.text:000000EF                 jb      short loc_F8
.text:000000F1                 mov     eax, 80070057h
.text:000000F6                 jmp     short loc_125
.text:000000F8 ; ---------------------------------------------------------------------------
.text:000000F8
.text:000000F8 loc_F8:                                 ; CODE XREF: NArchive::NCab::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+7j
.text:000000F8                 mov     eax, [ebp+arg_4]
.text:000000FB                 movzx   ecx, _kArcProps[eax]
.text:00000102                 mov     edx, [ebp+arg_C]
.text:00000105                 mov     [edx], ecx
.text:00000107                 mov     eax, [ebp+arg_C]
.text:0000010A                 mov     ecx, [eax]
.text:0000010C                 movzx   dx, byte ptr ds:?k7z_PROPID_To_VARTYPE@@3QBEB[ecx] ; uchar const * const k7z_PROPID_To_VARTYPE
.text:00000114                 mov     eax, [ebp+arg_10]
.text:00000117                 mov     [eax], dx
.text:0000011A                 mov     ecx, [ebp+arg_8]
.text:0000011D                 mov     dword ptr [ecx], 0
.text:00000123                 xor     eax, eax
.text:00000125
.text:00000125 loc_125:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+Ej
.text:00000125                 pop     ebp
.text:00000126                 retn    14h
.text:00000126 ?GetArchivePropertyInfo@CHandler@NCab@NArchive@@UAGJIPAPA_WPAKPAG@Z endp
.text:00000126
.text:00000126 ; ---------------------------------------------------------------------------
.text:00000129                 db 0Fh dup(0CCh)
.text:00000138
.text:00000138 ; =============== S U B R O U T I N E =======================================
.text:00000138
.text:00000138 ; Attributes: bp-based frame
.text:00000138
.text:00000138 ; __int32 __cdecl NArchive::NCab::CHandler::GetArchiveProperty(NArchive::NCab::CHandler *this, unsigned __int32, struct tagPROPVARIANT *)
.text:00000138                 public ?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:00000138 ?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z proc near
.text:00000138
.text:00000138 var_168         = dword ptr -168h
.text:00000138 var_164         = dword ptr -164h
.text:00000138 var_160         = dword ptr -160h
.text:00000138 var_15C         = dword ptr -15Ch
.text:00000138 var_155         = byte ptr -155h
.text:00000138 var_154         = dword ptr -154h
.text:00000138 var_150         = dword ptr -150h
.text:00000138 var_14C         = dword ptr -14Ch
.text:00000138 var_148         = dword ptr -148h
.text:00000138 var_144         = dword ptr -144h
.text:00000138 var_140         = dword ptr -140h
.text:00000138 var_13C         = dword ptr -13Ch
.text:00000138 var_138         = dword ptr -138h
.text:00000138 var_134         = dword ptr -134h
.text:00000138 var_130         = dword ptr -130h
.text:00000138 var_12C         = dword ptr -12Ch
.text:00000138 var_128         = dword ptr -128h
.text:00000138 var_124         = dword ptr -124h
.text:00000138 var_11D         = byte ptr -11Dh
.text:00000138 var_11C         = dword ptr -11Ch
.text:00000138 var_118         = dword ptr -118h
.text:00000138 var_114         = dword ptr -114h
.text:00000138 var_110         = dword ptr -110h
.text:00000138 var_10C         = dword ptr -10Ch
.text:00000138 var_108         = dword ptr -108h
.text:00000138 var_100         = dword ptr -100h
.text:00000138 var_F8          = byte ptr -0F8h
.text:00000138 var_D0          = byte ptr -0D0h
.text:00000138 var_C0          = dword ptr -0C0h
.text:00000138 var_BC          = dword ptr -0BCh
.text:00000138 var_B8          = dword ptr -0B8h
.text:00000138 var_B4          = dword ptr -0B4h
.text:00000138 var_B0          = dword ptr -0B0h
.text:00000138 var_AC          = dword ptr -0ACh
.text:00000138 var_A8          = dword ptr -0A8h
.text:00000138 var_A4          = dword ptr -0A4h
.text:00000138 var_A0          = dword ptr -0A0h
.text:00000138 var_9C          = dword ptr -9Ch
.text:00000138 var_94          = byte ptr -94h
.text:00000138 var_70          = dword ptr -70h
.text:00000138 var_68          = byte ptr -68h
.text:00000138 var_58          = dword ptr -58h
.text:00000138 var_54          = dword ptr -54h
.text:00000138 var_50          = dword ptr -50h
.text:00000138 var_4C          = dword ptr -4Ch
.text:00000138 var_48          = dword ptr -48h
.text:00000138 var_44          = dword ptr -44h
.text:00000138 var_3C          = dword ptr -3Ch
.text:00000138 var_38          = dword ptr -38h
.text:00000138 var_30          = dword ptr -30h
.text:00000138 var_28          = byte ptr -28h
.text:00000138 var_14          = dword ptr -14h
.text:00000138 var_10          = dword ptr -10h
.text:00000138 var_C           = dword ptr -0Ch
.text:00000138 var_4           = dword ptr -4
.text:00000138 this            = dword ptr  8
.text:00000138 arg_4           = dword ptr  0Ch
.text:00000138 arg_8           = dword ptr  10h
.text:00000138
.text:00000138 ; FUNCTION CHUNK AT .text:000007D3 SIZE 0000003C BYTES
.text:00000138
.text:00000138                 push    ebp
.text:00000139                 mov     ebp, esp
.text:0000013B                 push    0FFFFFFFFh
.text:0000013D                 push    offset __ehhandler$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:00000142                 mov     eax, large fs:0
.text:00000148                 push    eax
.text:00000149                 push    ecx
.text:0000014A                 sub     esp, 158h
.text:00000150                 push    ebx
.text:00000151                 push    esi
.text:00000152                 push    edi
.text:00000153                 lea     edi, [ebp+var_168]
.text:00000159                 mov     ecx, 56h ; 'V'
.text:0000015E                 mov     eax, 0CCCCCCCCh
.text:00000163                 rep stosd
.text:00000165                 mov     eax, dword ptr ds:___security_cookie
.text:0000016A                 xor     eax, ebp
.text:0000016C                 mov     [ebp+var_14], eax
.text:0000016F                 push    eax
.text:00000170                 lea     eax, [ebp+var_C]
.text:00000173                 mov     large fs:0, eax
.text:00000179                 mov     [ebp+var_10], esp
.text:0000017C                 mov     [ebp+var_4], 0
.text:00000183                 lea     ecx, [ebp+var_28] ; this
.text:00000186                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:0000018B                 mov     [ebp+var_108], eax
.text:00000191                 mov     byte ptr [ebp+var_4], 1
.text:00000195                 mov     eax, [ebp+arg_4]
.text:00000198                 mov     [ebp+var_10C], eax
.text:0000019E                 mov     ecx, [ebp+var_10C]
.text:000001A4                 sub     ecx, 4
.text:000001A7                 mov     [ebp+var_10C], ecx
.text:000001AD                 cmp     [ebp+var_10C], 4Ch ; 'L' ; switch 77 cases
.text:000001B4                 ja      $LN40           ; jumptable 000001C7 default case
.text:000001BA                 mov     edx, [ebp+var_10C]
.text:000001C0                 movzx   eax, ds:$LN53[edx]
.text:000001C7                 jmp     ds:$LN63[eax*4] ; switch jump
.text:000001CE ; ---------------------------------------------------------------------------
.text:000001CE
.text:000001CE $LN39:                                  ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+8Fj
.text:000001CE                                         ; DATA XREF: .text:$LN63o
.text:000001CE                 mov     [ebp+var_30], 0 ; jumptable 000001C7 case 18
.text:000001D5                 mov     [ebp+var_3C], 0
.text:000001DC                 mov     [ebp+var_38], 0
.text:000001E3                 mov     [ebp+var_44], 0
.text:000001EA                 jmp     short loc_1F5
.text:000001EC ; ---------------------------------------------------------------------------
.text:000001EC
.text:000001EC loc_1EC:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *):loc_2DCj
.text:000001EC                 mov     ecx, [ebp+var_44]
.text:000001EF                 add     ecx, 1
.text:000001F2                 mov     [ebp+var_44], ecx
.text:000001F5
.text:000001F5 loc_1F5:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+B2j
.text:000001F5                 mov     ecx, [ebp+this]
.text:000001F8                 add     ecx, 8
.text:000001FB                 call    ?Size@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::Size(void)
.text:00000200                 mov     [ebp+var_110], eax
.text:00000206                 mov     edx, [ebp+var_44]
.text:00000209                 cmp     edx, [ebp+var_110]
.text:0000020F                 jnb     loc_2E1
.text:00000215                 mov     eax, [ebp+var_44]
.text:00000218                 push    eax
.text:00000219                 mov     ecx, [ebp+this]
.text:0000021C                 add     ecx, 8
.text:0000021F                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:00000224                 mov     [ebp+var_114], eax
.text:0000022A                 mov     ecx, [ebp+var_114]
.text:00000230                 mov     [ebp+var_48], ecx
.text:00000233                 mov     [ebp+var_4C], 0
.text:0000023A                 jmp     short loc_245
.text:0000023C ; ---------------------------------------------------------------------------
.text:0000023C
.text:0000023C loc_23C:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *):loc_2D7j
.text:0000023C                 mov     edx, [ebp+var_4C]
.text:0000023F                 add     edx, 1
.text:00000242                 mov     [ebp+var_4C], edx
.text:00000245
.text:00000245 loc_245:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+102j
.text:00000245                 mov     ecx, [ebp+var_48]
.text:00000248                 call    ?Size@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NCab::CFolder>::Size(void)
.text:0000024D                 mov     [ebp+var_118], eax
.text:00000253                 mov     eax, [ebp+var_4C]
.text:00000256                 cmp     eax, [ebp+var_118]
.text:0000025C                 jnb     short loc_2DC
.text:0000025E                 mov     ecx, [ebp+var_4C]
.text:00000261                 push    ecx
.text:00000262                 mov     ecx, [ebp+var_48]
.text:00000265                 call    ??A?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEABUCFolder@NCab@NArchive@@I@Z ; CRecordVector<NArchive::NCab::CFolder>::operator[](uint)
.text:0000026A                 mov     [ebp+var_11C], eax
.text:00000270                 mov     edx, [ebp+var_11C]
.text:00000276                 mov     [ebp+var_50], edx
.text:00000279                 mov     ecx, [ebp+var_50] ; this
.text:0000027C                 call    ?GetMethod@CFolder@NCab@NArchive@@QBEEXZ ; NArchive::NCab::CFolder::GetMethod(void)
.text:00000281                 mov     [ebp+var_11D], al
.text:00000287                 movzx   eax, [ebp+var_11D]
.text:0000028E                 mov     [ebp+var_54], eax
.text:00000291                 mov     edx, 1
.text:00000296                 mov     ecx, [ebp+var_54]
.text:00000299                 shl     edx, cl
.text:0000029B                 or      edx, [ebp+var_30]
.text:0000029E                 mov     [ebp+var_30], edx
.text:000002A1                 cmp     [ebp+var_54], 3
.text:000002A5                 jz      short loc_2AD
.text:000002A7                 cmp     [ebp+var_54], 2
.text:000002AB                 jnz     short loc_2D7
.text:000002AD
.text:000002AD loc_2AD:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+16Dj
.text:000002AD                 xor     eax, eax
.text:000002AF                 cmp     [ebp+var_54], 2
.text:000002B3                 setnz   al
.text:000002B6                 mov     [ebp+var_58], eax
.text:000002B9                 mov     ecx, [ebp+var_50]
.text:000002BC                 movzx   edx, byte ptr [ecx+7]
.text:000002C0                 mov     eax, [ebp+var_58]
.text:000002C3                 cmp     [ebp+eax*4+var_3C], edx
.text:000002C7                 jnb     short loc_2D7
.text:000002C9                 mov     ecx, [ebp+var_50]
.text:000002CC                 movzx   edx, byte ptr [ecx+7]
.text:000002D0                 mov     eax, [ebp+var_58]
.text:000002D3                 mov     [ebp+eax*4+var_3C], edx
.text:000002D7
.text:000002D7 loc_2D7:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+173j
.text:000002D7                                         ; NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+18Fj
.text:000002D7                 jmp     loc_23C
.text:000002DC ; ---------------------------------------------------------------------------
.text:000002DC
.text:000002DC loc_2DC:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+124j
.text:000002DC                 jmp     loc_1EC
.text:000002E1 ; ---------------------------------------------------------------------------
.text:000002E1
.text:000002E1 loc_2E1:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+D7j
.text:000002E1                 lea     ecx, [ebp+var_68]
.text:000002E4                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000002E9                 mov     [ebp+var_124], eax
.text:000002EF                 mov     byte ptr [ebp+var_4], 2
.text:000002F3                 mov     [ebp+var_70], 0
.text:000002FA                 jmp     short loc_305
.text:000002FC ; ---------------------------------------------------------------------------
.text:000002FC
.text:000002FC loc_2FC:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1E2j
.text:000002FC                                         ; NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+219j
.text:000002FC                 mov     ecx, [ebp+var_70]
.text:000002FF                 add     ecx, 1
.text:00000302                 mov     [ebp+var_70], ecx
.text:00000305
.text:00000305 loc_305:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1C2j
.text:00000305                 cmp     [ebp+var_70], 10h
.text:00000309                 jnb     short loc_353
.text:0000030B                 mov     edx, 1
.text:00000310                 mov     ecx, [ebp+var_70]
.text:00000313                 shl     edx, cl
.text:00000315                 and     edx, [ebp+var_30]
.text:00000318                 jnz     short loc_31C
.text:0000031A                 jmp     short loc_2FC
.text:0000031C ; ---------------------------------------------------------------------------
.text:0000031C
.text:0000031C loc_31C:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1E0j
.text:0000031C                 lea     ecx, [ebp+var_68] ; this
.text:0000031F                 call    ?Add_Space_if_NotEmpty@AString@@QAEXXZ ; AString::Add_Space_if_NotEmpty(void)
.text:00000324                 xor     eax, eax
.text:00000326                 cmp     [ebp+var_70], 2
.text:0000032A                 setnz   al
.text:0000032D                 mov     ecx, [ebp+eax*4+var_3C]
.text:00000331                 push    ecx             ; int
.text:00000332                 mov     edx, [ebp+var_70]
.text:00000335                 push    edx             ; unsigned int
.text:00000336                 lea     eax, [ebp+var_94]
.text:0000033C                 push    eax             ; char *
.text:0000033D                 call    ?SetMethodName@NCab@NArchive@@YGXPADII@Z ; NArchive::NCab::SetMethodName(char *,uint,uint)
.text:00000342                 lea     ecx, [ebp+var_94]
.text:00000348                 push    ecx
.text:00000349                 lea     ecx, [ebp+var_68]
.text:0000034C                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000351                 jmp     short loc_2FC
.text:00000353 ; ---------------------------------------------------------------------------
.text:00000353
.text:00000353 loc_353:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1D1j
.text:00000353                 lea     ecx, [ebp+var_68]
.text:00000356                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:0000035B                 mov     [ebp+var_128], eax
.text:00000361                 mov     edx, [ebp+var_128]
.text:00000367                 push    edx
.text:00000368                 lea     ecx, [ebp+var_28]
.text:0000036B                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=(char const *)
.text:00000370                 mov     byte ptr [ebp+var_4], 1
.text:00000374                 lea     ecx, [ebp+var_68] ; this
.text:00000377                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000037C                 jmp     $LN40           ; jumptable 000001C7 default case
.text:00000381 ; ---------------------------------------------------------------------------
.text:00000381
.text:00000381 $LN25:                                  ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+8Fj
.text:00000381                                         ; DATA XREF: .text:$LN63o
.text:00000381                 mov     [ebp+var_9C], 0 ; jumptable 000001C7 case 34
.text:0000038B                 mov     [ebp+var_A0], 0
.text:00000395                 jmp     short loc_3A6
.text:00000397 ; ---------------------------------------------------------------------------
.text:00000397
.text:00000397 loc_397:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+2C8j
.text:00000397                 mov     eax, [ebp+var_A0]
.text:0000039D                 add     eax, 1
.text:000003A0                 mov     [ebp+var_A0], eax
.text:000003A6
.text:000003A6 loc_3A6:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+25Dj
.text:000003A6                 mov     ecx, [ebp+this]
.text:000003A9                 add     ecx, 8
.text:000003AC                 call    ?Size@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::Size(void)
.text:000003B1                 mov     [ebp+var_12C], eax
.text:000003B7                 mov     ecx, [ebp+var_A0]
.text:000003BD                 cmp     ecx, [ebp+var_12C]
.text:000003C3                 jnb     short loc_402
.text:000003C5                 mov     edx, [ebp+var_A0]
.text:000003CB                 push    edx
.text:000003CC                 mov     ecx, [ebp+this]
.text:000003CF                 add     ecx, 8
.text:000003D2                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:000003D7                 mov     [ebp+var_130], eax
.text:000003DD                 mov     ecx, [ebp+var_130]
.text:000003E3                 call    ?Size@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NCab::CFolder>::Size(void)
.text:000003E8                 mov     [ebp+var_134], eax
.text:000003EE                 mov     eax, [ebp+var_9C]
.text:000003F4                 add     eax, [ebp+var_134]
.text:000003FA                 mov     [ebp+var_9C], eax
.text:00000400                 jmp     short loc_397
.text:00000402 ; ---------------------------------------------------------------------------
.text:00000402
.text:00000402 loc_402:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+28Bj
.text:00000402                 mov     ecx, [ebp+var_9C]
.text:00000408                 push    ecx
.text:00000409                 lea     ecx, [ebp+var_28]
.text:0000040C                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:00000411                 jmp     $LN40           ; jumptable 000001C7 default case
.text:00000416 ; ---------------------------------------------------------------------------
.text:00000416
.text:00000416 $LN21:                                  ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+8Fj
.text:00000416                                         ; DATA XREF: .text:$LN63o
.text:00000416                 mov     ecx, [ebp+this] ; jumptable 000001C7 case 75
.text:00000419                 add     ecx, 8
.text:0000041C                 call    ?Size@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::Size(void)
.text:00000421                 mov     [ebp+var_138], eax
.text:00000427                 cmp     [ebp+var_138], 1
.text:0000042E                 jbe     loc_4D5
.text:00000434                 mov     [ebp+var_A8], 0
.text:0000043E                 mov     [ebp+var_A4], 0
.text:00000448                 mov     [ebp+var_AC], 0
.text:00000452                 jmp     short loc_463
.text:00000454 ; ---------------------------------------------------------------------------
.text:00000454
.text:00000454 loc_454:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+385j
.text:00000454                 mov     edx, [ebp+var_AC]
.text:0000045A                 add     edx, 1
.text:0000045D                 mov     [ebp+var_AC], edx
.text:00000463
.text:00000463 loc_463:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+31Aj
.text:00000463                 mov     ecx, [ebp+this]
.text:00000466                 add     ecx, 8
.text:00000469                 call    ?Size@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::Size(void)
.text:0000046E                 mov     [ebp+var_13C], eax
.text:00000474                 mov     eax, [ebp+var_AC]
.text:0000047A                 cmp     eax, [ebp+var_13C]
.text:00000480                 jnb     short loc_4BF
.text:00000482                 mov     ecx, [ebp+var_AC]
.text:00000488                 push    ecx
.text:00000489                 mov     ecx, [ebp+this]
.text:0000048C                 add     ecx, 8
.text:0000048F                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:00000494                 mov     [ebp+var_140], eax
.text:0000049A                 mov     edx, [ebp+var_140]
.text:000004A0                 mov     eax, [edx+6Ch]
.text:000004A3                 xor     ecx, ecx
.text:000004A5                 add     eax, [ebp+var_A8]
.text:000004AB                 adc     ecx, [ebp+var_A4]
.text:000004B1                 mov     [ebp+var_A8], eax
.text:000004B7                 mov     [ebp+var_A4], ecx
.text:000004BD                 jmp     short loc_454
.text:000004BF ; ---------------------------------------------------------------------------
.text:000004BF
.text:000004BF loc_4BF:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+348j
.text:000004BF                 mov     edx, [ebp+var_A4]
.text:000004C5                 push    edx
.text:000004C6                 mov     eax, [ebp+var_A8]
.text:000004CC                 push    eax
.text:000004CD                 lea     ecx, [ebp+var_28]
.text:000004D0                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000004D5
.text:000004D5 loc_4D5:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+2F6j
.text:000004D5                 jmp     $LN40           ; jumptable 000001C7 default case
.text:000004DA ; ---------------------------------------------------------------------------
.text:000004DA
.text:000004DA $LN16:                                  ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+8Fj
.text:000004DA                                         ; DATA XREF: .text:$LN63o
.text:000004DA                 mov     ecx, [ebp+this] ; jumptable 000001C7 case 35
.text:000004DD                 add     ecx, 8
.text:000004E0                 call    ?Size@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::Size(void)
.text:000004E5                 mov     [ebp+var_144], eax
.text:000004EB                 mov     ecx, [ebp+var_144]
.text:000004F1                 push    ecx
.text:000004F2                 lea     ecx, [ebp+var_28]
.text:000004F5                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:000004FA                 jmp     $LN40           ; jumptable 000001C7 default case
.text:000004FF ; ---------------------------------------------------------------------------
.text:000004FF
.text:000004FF $LN15:                                  ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+8Fj
.text:000004FF                                         ; DATA XREF: .text:$LN63o
.text:000004FF                 mov     ecx, [ebp+this] ; jumptable 000001C7 case 76
.text:00000502                 add     ecx, 8
.text:00000505                 call    ?Size@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::Size(void)
.text:0000050A                 mov     [ebp+var_148], eax
.text:00000510                 cmp     [ebp+var_148], 1
.text:00000517                 jnz     short loc_559
.text:00000519                 push    0
.text:0000051B                 mov     ecx, [ebp+this]
.text:0000051E                 add     ecx, 8
.text:00000521                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:00000526                 mov     [ebp+var_14C], eax
.text:0000052C                 mov     edx, [ebp+var_14C]
.text:00000532                 mov     [ebp+var_B0], edx
.text:00000538                 mov     eax, [ebp+var_B0]
.text:0000053E                 add     eax, 20h ; ' '
.text:00000541                 mov     [ebp+var_B4], eax
.text:00000547                 mov     ecx, [ebp+var_B4]
.text:0000054D                 mov     edx, [ecx+14h]
.text:00000550                 push    edx
.text:00000551                 lea     ecx, [ebp+var_28]
.text:00000554                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:00000559
.text:00000559 loc_559:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+3DFj
.text:00000559                 jmp     $LN40           ; jumptable 000001C7 default case
.text:0000055E ; ---------------------------------------------------------------------------
.text:0000055E
.text:0000055E $LN13:                                  ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+8Fj
.text:0000055E                                         ; DATA XREF: .text:$LN63o
.text:0000055E                 mov     ecx, [ebp+this] ; jumptable 000001C7 case 45
.text:00000561                 add     ecx, 8
.text:00000564                 call    ?Size@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::Size(void)
.text:00000569                 mov     [ebp+var_150], eax
.text:0000056F                 cmp     [ebp+var_150], 0
.text:00000576                 jz      short loc_59D
.text:00000578                 push    0
.text:0000057A                 mov     ecx, [ebp+this]
.text:0000057D                 add     ecx, 8
.text:00000580                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:00000585                 mov     [ebp+var_154], eax
.text:0000058B                 mov     eax, [ebp+var_154]
.text:00000591                 mov     ecx, [eax+30h]
.text:00000594                 push    ecx
.text:00000595                 lea     ecx, [ebp+var_28]
.text:00000598                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:0000059D
.text:0000059D loc_59D:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+43Ej
.text:0000059D                 jmp     $LN40           ; jumptable 000001C7 default case
.text:000005A2 ; ---------------------------------------------------------------------------
.text:000005A2
.text:000005A2 $LN11:                                  ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+8Fj
.text:000005A2                                         ; DATA XREF: .text:$LN63o
.text:000005A2                 mov     edx, [ebp+this] ; jumptable 000001C7 case 32
.text:000005A5                 mov     eax, [edx+54h]
.text:000005A8                 push    eax
.text:000005A9                 mov     ecx, [edx+50h]
.text:000005AC                 push    ecx
.text:000005AD                 lea     ecx, [ebp+var_28]
.text:000005B0                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000005B5                 jmp     $LN40           ; jumptable 000001C7 default case
.text:000005BA ; ---------------------------------------------------------------------------
.text:000005BA
.text:000005BA $LN10:                                  ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+8Fj
.text:000005BA                                         ; DATA XREF: .text:$LN63o
.text:000005BA                 mov     edx, [ebp+this] ; jumptable 000001C7 case 40
.text:000005BD                 mov     eax, [edx+48h]
.text:000005C0                 xor     ecx, ecx
.text:000005C2                 push    ecx
.text:000005C3                 push    eax
.text:000005C4                 lea     ecx, [ebp+var_28]
.text:000005C7                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000005CC                 jmp     $LN40           ; jumptable 000001C7 default case
.text:000005D1 ; ---------------------------------------------------------------------------
.text:000005D1
.text:000005D1 $LN9:                                   ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+8Fj
.text:000005D1                                         ; DATA XREF: .text:$LN63o
.text:000005D1                 mov     [ebp+var_B8], 0 ; jumptable 000001C7 case 67
.text:000005DB                 mov     edx, [ebp+this]
.text:000005DE                 movzx   eax, byte ptr [edx+44h]
.text:000005E2                 test    eax, eax
.text:000005E4                 jnz     short loc_5F5
.text:000005E6                 mov     ecx, [ebp+var_B8]
.text:000005EC                 or      ecx, 1
.text:000005EF                 mov     [ebp+var_B8], ecx
.text:000005F5
.text:000005F5 loc_5F5:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+4ACj
.text:000005F5                 mov     edx, [ebp+this]
.text:000005F8                 movzx   eax, byte ptr [edx+45h]
.text:000005FC                 test    eax, eax
.text:000005FE                 jz      short loc_60F
.text:00000600                 mov     ecx, [ebp+var_B8]
.text:00000606                 or      ecx, 2
.text:00000609                 mov     [ebp+var_B8], ecx
.text:0000060F
.text:0000060F loc_60F:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+4C6j
.text:0000060F                 mov     edx, [ebp+this]
.text:00000612                 movzx   eax, byte ptr [edx+46h]
.text:00000616                 test    eax, eax
.text:00000618                 jz      short loc_629
.text:0000061A                 mov     ecx, [ebp+var_B8]
.text:00000620                 or      ecx, 20h
.text:00000623                 mov     [ebp+var_B8], ecx
.text:00000629
.text:00000629 loc_629:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+4E0j
.text:00000629                 mov     edx, [ebp+var_B8]
.text:0000062F                 push    edx
.text:00000630                 lea     ecx, [ebp+var_28]
.text:00000633                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:00000638                 jmp     $LN40           ; jumptable 000001C7 default case
.text:0000063D ; ---------------------------------------------------------------------------
.text:0000063D
.text:0000063D $LN5:                                   ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+8Fj
.text:0000063D                                         ; DATA XREF: .text:$LN63o
.text:0000063D                 mov     ecx, [ebp+this] ; jumptable 000001C7 case 51
.text:00000640                 add     ecx, 38h ; '8'  ; this
.text:00000643                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00000648                 mov     [ebp+var_155], al
.text:0000064E                 movzx   eax, [ebp+var_155]
.text:00000655                 test    eax, eax
.text:00000657                 jnz     short loc_668
.text:00000659                 mov     ecx, [ebp+this]
.text:0000065C                 add     ecx, 38h ; '8'
.text:0000065F                 push    ecx
.text:00000660                 lea     ecx, [ebp+var_28]
.text:00000663                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=(UString const &)
.text:00000668
.text:00000668 loc_668:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+51Fj
.text:00000668                 jmp     $LN40           ; jumptable 000001C7 default case
.text:0000066D ; ---------------------------------------------------------------------------
.text:0000066D
.text:0000066D $LN3:                                   ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+8Fj
.text:0000066D                                         ; DATA XREF: .text:$LN63o
.text:0000066D                 mov     ecx, [ebp+this] ; jumptable 000001C7 case 0
.text:00000670                 add     ecx, 8
.text:00000673                 call    ?Size@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::Size(void)
.text:00000678                 mov     [ebp+var_15C], eax
.text:0000067E                 cmp     [ebp+var_15C], 1
.text:00000685                 jnz     $LN40           ; jumptable 000001C7 default case
.text:0000068B                 push    0
.text:0000068D                 mov     ecx, [ebp+this]
.text:00000690                 add     ecx, 8
.text:00000693                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:00000698                 mov     [ebp+var_160], eax
.text:0000069E                 mov     edx, [ebp+var_160]
.text:000006A4                 mov     [ebp+var_BC], edx
.text:000006AA                 mov     eax, [ebp+var_BC]
.text:000006B0                 add     eax, 20h ; ' '
.text:000006B3                 mov     [ebp+var_C0], eax
.text:000006B9                 mov     ecx, [ebp+var_C0]
.text:000006BF                 cmp     dword ptr [ecx+10h], 0
.text:000006C3                 jz      $LN40           ; jumptable 000001C7 default case
.text:000006C9                 lea     ecx, [ebp+var_D0]
.text:000006CF                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000006D4                 mov     [ebp+var_164], eax
.text:000006DA                 mov     byte ptr [ebp+var_4], 3
.text:000006DE                 lea     edx, [ebp+var_F8]
.text:000006E4                 push    edx             ; char *
.text:000006E5                 mov     eax, [ebp+var_C0]
.text:000006EB                 mov     ecx, [eax+10h]
.text:000006EE                 push    ecx             ; unsigned int
.text:000006EF                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:000006F4                 lea     edx, [ebp+var_F8]
.text:000006FA                 push    edx
.text:000006FB                 lea     ecx, [ebp+var_D0]
.text:00000701                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00000706                 lea     eax, [ebp+var_F8]
.text:0000070C                 push    eax             ; char *
.text:0000070D                 mov     ecx, [ebp+var_C0]
.text:00000713                 mov     edx, [ecx+14h]
.text:00000716                 add     edx, 1
.text:00000719                 push    edx             ; unsigned int
.text:0000071A                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:0000071F                 push    5Fh ; '_'
.text:00000721                 lea     ecx, [ebp+var_D0]
.text:00000727                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:0000072C                 lea     eax, [ebp+var_F8]
.text:00000732                 push    eax
.text:00000733                 lea     ecx, [ebp+var_D0]
.text:00000739                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:0000073E                 push    offset $SG71445 ; ".cab"
.text:00000743                 lea     ecx, [ebp+var_D0]
.text:00000749                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:0000074E                 lea     ecx, [ebp+var_D0]
.text:00000754                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000759                 mov     [ebp+var_168], eax
.text:0000075F                 mov     ecx, [ebp+var_168]
.text:00000765                 push    ecx
.text:00000766                 lea     ecx, [ebp+var_28]
.text:00000769                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=(char const *)
.text:0000076E                 mov     byte ptr [ebp+var_4], 1
.text:00000772                 lea     ecx, [ebp+var_D0] ; this
.text:00000778                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000077D
.text:0000077D $LN40:                                  ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Cj
.text:0000077D                                         ; NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+8Fj ...
.text:0000077D                 mov     edx, [ebp+arg_8] ; jumptable 000001C7 default case
.text:00000780                 push    edx             ; struct tagPROPVARIANT *
.text:00000781                 lea     ecx, [ebp+var_28] ; this
.text:00000784                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:00000789                 mov     [ebp+var_100], 0
.text:00000793                 mov     byte ptr [ebp+var_4], 0
.text:00000797                 lea     ecx, [ebp+var_28] ; this
.text:0000079A                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000079F                 mov     eax, [ebp+var_100]
.text:000007A5                 jmp     short loc_7D3
.text:000007A5 ?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z endp
.text:000007A5
.text:000007A7
.text:000007A7 ; =============== S U B R O U T I N E =======================================
.text:000007A7
.text:000007A7
.text:000007A7 __catch$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0 proc near
.text:000007A7                                         ; DATA XREF: .xdata$x:000049FCo
.text:000007A7                 mov     dword ptr [ebp-104h], 8007000Eh
.text:000007B1                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000007B8                 mov     eax, offset $LN51
.text:000007BD                 retn
.text:000007BD __catch$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0 endp
.text:000007BD
.text:000007BE ; ---------------------------------------------------------------------------
.text:000007BE                 mov     eax, offset __tryend$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$1
.text:000007C3                 retn
.text:000007C4 ; ---------------------------------------------------------------------------
.text:000007C4
.text:000007C4 __tryend$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$1:
.text:000007C4                                         ; DATA XREF: .text:000007BEo
.text:000007C4                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000007CB                 jmp     short loc_7D3
.text:000007CD ; ---------------------------------------------------------------------------
.text:000007CD
.text:000007CD $LN51:                                  ; DATA XREF: __catch$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0+11o
.text:000007CD                 mov     eax, [ebp-104h]
.text:000007D3 ; START OF FUNCTION CHUNK FOR ?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:000007D3
.text:000007D3 loc_7D3:                                ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+66Dj
.text:000007D3                                         ; .text:000007CBj
.text:000007D3                 push    edx
.text:000007D4                 mov     ecx, ebp
.text:000007D6                 push    eax
.text:000007D7                 lea     edx, $LN62
.text:000007DD                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000007E2                 pop     eax
.text:000007E3                 pop     edx
.text:000007E4                 mov     ecx, [ebp+var_C]
.text:000007E7                 mov     large fs:0, ecx
.text:000007EE                 pop     ecx
.text:000007EF                 pop     edi
.text:000007F0                 pop     esi
.text:000007F1                 pop     ebx
.text:000007F2                 mov     ecx, [ebp+var_14]
.text:000007F5                 xor     ecx, ebp
.text:000007F7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000007FC                 add     esp, 168h
.text:00000802                 cmp     ebp, esp
.text:00000804                 call    __RTC_CheckEsp
.text:00000809                 mov     esp, ebp
.text:0000080B                 pop     ebp
.text:0000080C                 retn    0Ch
.text:0000080C ; END OF FUNCTION CHUNK FOR ?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:0000080C ; ---------------------------------------------------------------------------
.text:0000080F                 align 10h
.text:00000810 $LN62           dd 6                    ; DATA XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+69Fo
.text:00000814                 dd offset $LN61
.text:00000818 $LN61           dd 0FFFFFFD8h, 10h      ; DATA XREF: .text:00000814o
.text:00000820                 dd offset $LN54         ; "prop"
.text:00000824                 dd 0FFFFFFC4h, 8
.text:0000082C                 dd offset $LN55         ; "params"
.text:00000830                 dd 0FFFFFF98h, 0Ch
.text:00000838                 dd offset $LN56         ; "s"
.text:0000083C                 dd 0FFFFFF6Ch, 20h
.text:00000844                 dd offset $LN57         ; "temp"
.text:00000848                 dd 0FFFFFF30h, 0Ch
.text:00000850                 dd offset $LN58         ; "s"
.text:00000854                 db 8, 0FFh
.text:00000856                 dw 0FFFFh
.text:00000858                 dd offset $SG71357      ; "Quantum"
.text:0000085C                 dd offset $LN59         ; "temp"
.text:00000860 $LN59           db 'temp',0             ; DATA XREF: .text:0000085Co
.text:00000865 $LN58           db 's',0                ; DATA XREF: .text:00000850o
.text:00000867 $LN57           db 'temp',0             ; DATA XREF: .text:00000844o
.text:0000086C $LN56           db 's',0                ; DATA XREF: .text:00000838o
.text:0000086E $LN55           db 'params',0           ; DATA XREF: .text:0000082Co
.text:00000875 $LN54           db 'prop',0             ; DATA XREF: .text:00000820o
.text:0000087A                 align 4
.text:0000087C $LN63           dd offset $LN3, offset $LN39, offset $LN11, offset $LN25
.text:0000087C                                         ; DATA XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+8Fr
.text:0000087C                 dd offset $LN16, offset $LN10, offset $LN13, offset $LN5 ; jump table for switch statement
.text:0000087C                 dd offset $LN9, offset $LN21, offset $LN15, offset $LN40
.text:000008AC $LN53           db      0,   0Bh,   0Bh,   0Bh
.text:000008AC                                         ; DATA XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+88r
.text:000008AC                 db    0Bh,   0Bh,   0Bh,   0Bh ; indirect table for switch statement
.text:000008AC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000008AC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000008AC                 db    0Bh,   0Bh,     1,   0Bh
.text:000008AC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000008AC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000008AC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000008AC                 db      2,   0Bh,     3,     4
.text:000008AC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000008AC                 db      5,   0Bh,   0Bh,   0Bh
.text:000008AC                 db    0Bh,     6,   0Bh,   0Bh
.text:000008AC                 db    0Bh,   0Bh,   0Bh,     7
.text:000008AC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000008AC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000008AC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000008AC                 db    0Bh,   0Bh,   0Bh,     8
.text:000008AC                 db    0Bh,   0Bh,   0Bh,   0Bh
.text:000008AC                 db    0Bh,   0Bh,   0Bh,     9
.text:000008AC                 db    0Ah
.text:000008F9                 db 0Fh dup(0CCh)
.text:00000908
.text:00000908 ; =============== S U B R O U T I N E =======================================
.text:00000908
.text:00000908 ; Attributes: bp-based frame
.text:00000908
.text:00000908 ; int __stdcall NArchive::NCab::SetMethodName(char *, unsigned int, int)
.text:00000908 ?SetMethodName@NCab@NArchive@@YGXPADII@Z proc near
.text:00000908                                         ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+205p
.text:00000908                                         ; NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+305p
.text:00000908
.text:00000908 arg_0           = dword ptr  8
.text:00000908 arg_4           = dword ptr  0Ch
.text:00000908 arg_8           = dword ptr  10h
.text:00000908
.text:00000908                 push    ebp
.text:00000909                 mov     ebp, esp
.text:0000090B                 cmp     [ebp+arg_4], 4
.text:0000090F                 jnb     short loc_94B
.text:00000911                 mov     eax, [ebp+arg_4]
.text:00000914                 mov     ecx, _kMethods[eax*4]
.text:0000091B                 push    ecx             ; char *
.text:0000091C                 mov     edx, [ebp+arg_0]
.text:0000091F                 push    edx             ; char *
.text:00000920                 call    ?MyStpCpy@@YGPADPADPBD@Z ; MyStpCpy(char *,char const *)
.text:00000925                 mov     [ebp+arg_0], eax
.text:00000928                 cmp     [ebp+arg_4], 3
.text:0000092C                 jz      short loc_936
.text:0000092E                 cmp     [ebp+arg_4], 2
.text:00000932                 jz      short loc_936
.text:00000934                 jmp     short loc_958
.text:00000936 ; ---------------------------------------------------------------------------
.text:00000936
.text:00000936 loc_936:                                ; CODE XREF: NArchive::NCab::SetMethodName(char *,uint,uint)+24j
.text:00000936                                         ; NArchive::NCab::SetMethodName(char *,uint,uint)+2Aj
.text:00000936                 mov     eax, [ebp+arg_0]
.text:00000939                 mov     byte ptr [eax], 3Ah ; ':'
.text:0000093C                 mov     ecx, [ebp+arg_0]
.text:0000093F                 add     ecx, 1
.text:00000942                 mov     [ebp+arg_0], ecx
.text:00000945                 mov     edx, [ebp+arg_8]
.text:00000948                 mov     [ebp+arg_4], edx
.text:0000094B
.text:0000094B loc_94B:                                ; CODE XREF: NArchive::NCab::SetMethodName(char *,uint,uint)+7j
.text:0000094B                 mov     eax, [ebp+arg_0]
.text:0000094E                 push    eax             ; char *
.text:0000094F                 mov     ecx, [ebp+arg_4]
.text:00000952                 push    ecx             ; unsigned int
.text:00000953                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:00000958
.text:00000958 loc_958:                                ; CODE XREF: NArchive::NCab::SetMethodName(char *,uint,uint)+2Cj
.text:00000958                 cmp     ebp, esp
.text:0000095A                 call    __RTC_CheckEsp
.text:0000095F                 pop     ebp
.text:00000960                 retn    0Ch
.text:00000960 ?SetMethodName@NCab@NArchive@@YGXPADII@Z endp
.text:00000960
.text:00000960 ; ---------------------------------------------------------------------------
.text:00000963                 align 8
.text:00000968
.text:00000968 ; =============== S U B R O U T I N E =======================================
.text:00000968
.text:00000968 ; Attributes: bp-based frame
.text:00000968
.text:00000968 ; __int32 __cdecl NArchive::NCab::CHandler::GetProperty(NArchive::NCab::CHandler *this, unsigned int, unsigned __int32, struct tagPROPVARIANT *)
.text:00000968                 public ?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:00000968 ?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z proc near
.text:00000968
.text:00000968 var_10C         = dword ptr -10Ch
.text:00000968 var_105         = byte ptr -105h
.text:00000968 var_104         = dword ptr -104h
.text:00000968 var_100         = dword ptr -100h
.text:00000968 var_FC          = dword ptr -0FCh
.text:00000968 var_F8          = dword ptr -0F8h
.text:00000968 var_F1          = byte ptr -0F1h
.text:00000968 var_F0          = dword ptr -0F0h
.text:00000968 var_EC          = dword ptr -0ECh
.text:00000968 var_E8          = dword ptr -0E8h
.text:00000968 var_E4          = dword ptr -0E4h
.text:00000968 var_E0          = dword ptr -0E0h
.text:00000968 var_D9          = byte ptr -0D9h
.text:00000968 var_D8          = dword ptr -0D8h
.text:00000968 var_D4          = dword ptr -0D4h
.text:00000968 var_D0          = dword ptr -0D0h
.text:00000968 var_CC          = dword ptr -0CCh
.text:00000968 var_C8          = dword ptr -0C8h
.text:00000968 var_C4          = dword ptr -0C4h
.text:00000968 var_BC          = dword ptr -0BCh
.text:00000968 var_B8          = byte ptr -0B8h
.text:00000968 var_AC          = byte ptr -0ACh
.text:00000968 var_9C          = byte ptr -9Ch
.text:00000968 var_78          = dword ptr -78h
.text:00000968 var_74          = dword ptr -74h
.text:00000968 FileTime        = _FILETIME ptr -6Ch
.text:00000968 LocalFileTime   = FILETIME ptr -5Ch
.text:00000968 var_4C          = byte ptr -4Ch
.text:00000968 var_3C          = dword ptr -3Ch
.text:00000968 var_38          = dword ptr -38h
.text:00000968 var_34          = dword ptr -34h
.text:00000968 var_30          = dword ptr -30h
.text:00000968 var_28          = byte ptr -28h
.text:00000968 var_14          = dword ptr -14h
.text:00000968 var_10          = dword ptr -10h
.text:00000968 var_C           = dword ptr -0Ch
.text:00000968 var_4           = dword ptr -4
.text:00000968 this            = dword ptr  8
.text:00000968 arg_4           = dword ptr  0Ch
.text:00000968 arg_8           = dword ptr  10h
.text:00000968 arg_C           = dword ptr  14h
.text:00000968
.text:00000968 ; FUNCTION CHUNK AT .text:00000CFD SIZE 0000003C BYTES
.text:00000968
.text:00000968                 push    ebp
.text:00000969                 mov     ebp, esp
.text:0000096B                 push    0FFFFFFFFh
.text:0000096D                 push    offset __ehhandler$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:00000972                 mov     eax, large fs:0
.text:00000978                 push    eax
.text:00000979                 push    ecx
.text:0000097A                 sub     esp, 0FCh
.text:00000980                 push    ebx
.text:00000981                 push    esi
.text:00000982                 push    edi
.text:00000983                 lea     edi, [ebp+var_10C]
.text:00000989                 mov     ecx, 3Fh ; '?'
.text:0000098E                 mov     eax, 0CCCCCCCCh
.text:00000993                 rep stosd
.text:00000995                 mov     eax, dword ptr ds:___security_cookie
.text:0000099A                 xor     eax, ebp
.text:0000099C                 mov     [ebp+var_14], eax
.text:0000099F                 push    eax             ; struct _FILETIME *
.text:000009A0                 lea     eax, [ebp+var_C]
.text:000009A3                 mov     large fs:0, eax
.text:000009A9                 mov     [ebp+var_10], esp
.text:000009AC                 mov     [ebp+var_4], 0
.text:000009B3                 lea     ecx, [ebp+var_28] ; this
.text:000009B6                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:000009BB                 mov     [ebp+var_C4], eax
.text:000009C1                 mov     byte ptr [ebp+var_4], 1
.text:000009C5                 mov     eax, [ebp+arg_4]
.text:000009C8                 push    eax
.text:000009C9                 mov     ecx, [ebp+this]
.text:000009CC                 add     ecx, 14h
.text:000009CF                 call    ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEAAUCMvItem@NCab@NArchive@@I@Z ; CRecordVector<NArchive::NCab::CMvItem>::operator[](uint)
.text:000009D4                 mov     [ebp+var_C8], eax
.text:000009DA                 mov     ecx, [ebp+var_C8]
.text:000009E0                 mov     [ebp+var_30], ecx
.text:000009E3                 mov     edx, [ebp+var_30]
.text:000009E6                 mov     eax, [edx]
.text:000009E8                 push    eax
.text:000009E9                 mov     ecx, [ebp+this]
.text:000009EC                 add     ecx, 8
.text:000009EF                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:000009F4                 mov     [ebp+var_CC], eax
.text:000009FA                 mov     ecx, [ebp+var_CC]
.text:00000A00                 mov     [ebp+var_34], ecx
.text:00000A03                 mov     edx, [ebp+var_30]
.text:00000A06                 mov     eax, [edx+4]
.text:00000A09                 mov     [ebp+var_38], eax
.text:00000A0C                 mov     ecx, [ebp+var_38]
.text:00000A0F                 push    ecx
.text:00000A10                 mov     ecx, [ebp+var_34]
.text:00000A13                 add     ecx, 0Ch
.text:00000A16                 call    ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QBEABUCItem@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CItem>::operator[](uint)
.text:00000A1B                 mov     [ebp+var_D0], eax
.text:00000A21                 mov     edx, [ebp+var_D0]
.text:00000A27                 mov     [ebp+var_3C], edx
.text:00000A2A                 mov     eax, [ebp+arg_8]
.text:00000A2D                 mov     [ebp+var_D4], eax
.text:00000A33                 mov     ecx, [ebp+var_D4]
.text:00000A39                 sub     ecx, 3
.text:00000A3C                 mov     [ebp+var_D4], ecx
.text:00000A42                 cmp     [ebp+var_D4], 18h ; switch 25 cases
.text:00000A49                 ja      $LN13_0         ; jumptable 00000A5C default case
.text:00000A4F                 mov     edx, [ebp+var_D4]
.text:00000A55                 movzx   eax, ds:$LN27[edx]
.text:00000A5C                 jmp     ds:$LN36[eax*4] ; switch jump
.text:00000A63 ; ---------------------------------------------------------------------------
.text:00000A63
.text:00000A63 $LN12:                                  ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+F4j
.text:00000A63                                         ; DATA XREF: .text:$LN36o
.text:00000A63                 lea     ecx, [ebp+var_4C] ; jumptable 00000A5C case 0
.text:00000A66                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000A6B                 mov     [ebp+var_D8], eax
.text:00000A71                 mov     byte ptr [ebp+var_4], 2
.text:00000A75                 mov     ecx, [ebp+var_3C] ; this
.text:00000A78                 call    ?IsNameUTF@CItem@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CItem::IsNameUTF(void)
.text:00000A7D                 mov     [ebp+var_D9], al
.text:00000A83                 movzx   ecx, [ebp+var_D9]
.text:00000A8A                 test    ecx, ecx
.text:00000A8C                 jz      short loc_A9D
.text:00000A8E                 lea     edx, [ebp+var_4C]
.text:00000A91                 push    edx             ; struct UString *
.text:00000A92                 mov     eax, [ebp+var_3C]
.text:00000A95                 push    eax             ; struct AString *
.text:00000A96                 call    ?ConvertUTF8ToUnicode@@YG_NABVAString@@AAVUString@@@Z ; ConvertUTF8ToUnicode(AString const &,UString &)
.text:00000A9B                 jmp     short loc_AE3
.text:00000A9D ; ---------------------------------------------------------------------------
.text:00000A9D
.text:00000A9D loc_A9D:                                ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+124j
.text:00000A9D                 push    0
.text:00000A9F                 mov     ecx, [ebp+var_3C]
.text:00000AA2                 push    ecx
.text:00000AA3                 lea     edx, [ebp+var_AC]
.text:00000AA9                 push    edx
.text:00000AAA                 call    ?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z ; MultiByteToUnicodeString(AString const &,uint)
.text:00000AAF                 mov     [ebp+var_E0], eax
.text:00000AB5                 mov     eax, [ebp+var_E0]
.text:00000ABB                 mov     [ebp+var_E4], eax
.text:00000AC1                 mov     byte ptr [ebp+var_4], 3
.text:00000AC5                 mov     ecx, [ebp+var_E4]
.text:00000ACB                 push    ecx
.text:00000ACC                 lea     ecx, [ebp+var_4C]
.text:00000ACF                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00000AD4                 mov     byte ptr [ebp+var_4], 2
.text:00000AD8                 lea     ecx, [ebp+var_AC] ; this
.text:00000ADE                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000AE3
.text:00000AE3 loc_AE3:                                ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+133j
.text:00000AE3                 lea     edx, [ebp+var_4C]
.text:00000AE6                 push    edx
.text:00000AE7                 lea     eax, [ebp+var_B8]
.text:00000AED                 push    eax
.text:00000AEE                 call    ?WinNameToOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z ; NArchive::NItemName::WinNameToOSName(UString const &)
.text:00000AF3                 mov     [ebp+var_E8], eax
.text:00000AF9                 mov     ecx, [ebp+var_E8]
.text:00000AFF                 mov     [ebp+var_EC], ecx
.text:00000B05                 mov     byte ptr [ebp+var_4], 4
.text:00000B09                 mov     ecx, [ebp+var_EC]
.text:00000B0F                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000B14                 mov     [ebp+var_F0], eax
.text:00000B1A                 mov     edx, [ebp+var_F0]
.text:00000B20                 push    edx
.text:00000B21                 lea     ecx, [ebp+var_28]
.text:00000B24                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PB_W@Z ; NWindows::NCOM::CPropVariant::operator=(wchar_t const *)
.text:00000B29                 mov     byte ptr [ebp+var_4], 2
.text:00000B2D                 lea     ecx, [ebp+var_B8] ; this
.text:00000B33                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000B38                 mov     byte ptr [ebp+var_4], 1
.text:00000B3C                 lea     ecx, [ebp+var_4C] ; this
.text:00000B3F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000B44                 jmp     $LN13_0         ; jumptable 00000A5C default case
.text:00000B49 ; ---------------------------------------------------------------------------
.text:00000B49
.text:00000B49 $LN9_0:                                 ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+F4j
.text:00000B49                                         ; DATA XREF: .text:$LN36o
.text:00000B49                 mov     ecx, [ebp+var_3C] ; jumptable 00000A5C case 3
.text:00000B4C                 call    ?IsDir@CItem@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CItem::IsDir(void)
.text:00000B51                 mov     [ebp+var_F1], al
.text:00000B57                 movzx   eax, [ebp+var_F1]
.text:00000B5E                 push    eax
.text:00000B5F                 lea     ecx, [ebp+var_28]
.text:00000B62                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=(bool)
.text:00000B67                 jmp     $LN13_0         ; jumptable 00000A5C default case
.text:00000B6C ; ---------------------------------------------------------------------------
.text:00000B6C
.text:00000B6C $LN8:                                   ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+F4j
.text:00000B6C                                         ; DATA XREF: .text:$LN36o
.text:00000B6C                 mov     ecx, [ebp+var_3C] ; jumptable 00000A5C case 4
.text:00000B6F                 mov     edx, [ecx+10h]
.text:00000B72                 push    edx
.text:00000B73                 lea     ecx, [ebp+var_28]
.text:00000B76                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:00000B7B                 jmp     $LN13_0         ; jumptable 00000A5C default case
.text:00000B80 ; ---------------------------------------------------------------------------
.text:00000B80
.text:00000B80 $LN7:                                   ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+F4j
.text:00000B80                                         ; DATA XREF: .text:$LN36o
.text:00000B80                 mov     ecx, [ebp+var_3C] ; jumptable 00000A5C case 6
.text:00000B83                 call    ?GetWinAttrib@CItem@NCab@NArchive@@QBEIXZ ; NArchive::NCab::CItem::GetWinAttrib(void)
.text:00000B88                 mov     [ebp+var_F8], eax
.text:00000B8E                 mov     eax, [ebp+var_F8]
.text:00000B94                 push    eax
.text:00000B95                 lea     ecx, [ebp+var_28]
.text:00000B98                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:00000B9D                 jmp     $LN13_0         ; jumptable 00000A5C default case
.text:00000BA2 ; ---------------------------------------------------------------------------
.text:00000BA2
.text:00000BA2 $LN6:                                   ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+F4j
.text:00000BA2                                         ; DATA XREF: .text:$LN36o
.text:00000BA2                 lea     ecx, [ebp+LocalFileTime] ; jumptable 00000A5C case 9
.text:00000BA5                 push    ecx             ; unsigned int
.text:00000BA6                 mov     edx, [ebp+var_3C]
.text:00000BA9                 mov     eax, [edx+14h]
.text:00000BAC                 push    eax             ; this
.text:00000BAD                 call    ?DosTimeToFileTime@NTime@NWindows@@YG_NIAAU_FILETIME@@@Z ; NWindows::NTime::DosTimeToFileTime(uint,_FILETIME &)
.text:00000BB2                 movzx   ecx, al
.text:00000BB5                 test    ecx, ecx
.text:00000BB7                 jz      short loc_BE3
.text:00000BB9                 mov     esi, esp
.text:00000BBB                 lea     edx, [ebp+FileTime]
.text:00000BBE                 push    edx             ; lpFileTime
.text:00000BBF                 lea     eax, [ebp+LocalFileTime]
.text:00000BC2                 push    eax             ; lpLocalFileTime
.text:00000BC3                 call    dword ptr ds:__imp__LocalFileTimeToFileTime@8 ; LocalFileTimeToFileTime(x,x)
.text:00000BC9                 cmp     esi, esp
.text:00000BCB                 call    __RTC_CheckEsp
.text:00000BD0                 test    eax, eax
.text:00000BD2                 jnz     short loc_BE1
.text:00000BD4                 mov     [ebp+FileTime.dwLowDateTime], 0
.text:00000BDB                 mov     ecx, [ebp+FileTime.dwLowDateTime]
.text:00000BDE                 mov     [ebp+FileTime.dwHighDateTime], ecx
.text:00000BE1
.text:00000BE1 loc_BE1:                                ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+26Aj
.text:00000BE1                 jmp     short loc_BF0
.text:00000BE3 ; ---------------------------------------------------------------------------
.text:00000BE3
.text:00000BE3 loc_BE3:                                ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+24Fj
.text:00000BE3                 mov     [ebp+FileTime.dwLowDateTime], 0
.text:00000BEA                 mov     edx, [ebp+FileTime.dwLowDateTime]
.text:00000BED                 mov     [ebp+FileTime.dwHighDateTime], edx
.text:00000BF0
.text:00000BF0 loc_BF0:                                ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *):loc_BE1j
.text:00000BF0                 lea     eax, [ebp+FileTime]
.text:00000BF3                 push    eax
.text:00000BF4                 lea     ecx, [ebp+var_28]
.text:00000BF7                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=(_FILETIME const &)
.text:00000BFC                 jmp     $LN13_0         ; jumptable 00000A5C default case
.text:00000C01 ; ---------------------------------------------------------------------------
.text:00000C01
.text:00000C01 $LN2:                                   ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+F4j
.text:00000C01                                         ; DATA XREF: .text:$LN36o
.text:00000C01                 mov     ecx, [ebp+var_34] ; jumptable 00000A5C case 19
.text:00000C04                 call    ?Size@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NCab::CFolder>::Size(void)
.text:00000C09                 mov     [ebp+var_FC], eax
.text:00000C0F                 mov     ecx, [ebp+var_FC]
.text:00000C15                 push    ecx             ; unsigned int
.text:00000C16                 mov     ecx, [ebp+var_3C] ; this
.text:00000C19                 call    ?GetFolderIndex@CItem@NCab@NArchive@@QBEHI@Z ; NArchive::NCab::CItem::GetFolderIndex(uint)
.text:00000C1E                 mov     [ebp+var_100], eax
.text:00000C24                 mov     edx, [ebp+var_100]
.text:00000C2A                 mov     [ebp+var_74], edx
.text:00000C2D                 mov     eax, [ebp+var_74]
.text:00000C30                 push    eax
.text:00000C31                 mov     ecx, [ebp+var_34]
.text:00000C34                 call    ??A?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEABUCFolder@NCab@NArchive@@I@Z ; CRecordVector<NArchive::NCab::CFolder>::operator[](uint)
.text:00000C39                 mov     [ebp+var_104], eax
.text:00000C3F                 mov     ecx, [ebp+var_104]
.text:00000C45                 mov     [ebp+var_78], ecx
.text:00000C48                 mov     ecx, [ebp+var_78] ; this
.text:00000C4B                 call    ?GetMethod@CFolder@NCab@NArchive@@QBEEXZ ; NArchive::NCab::CFolder::GetMethod(void)
.text:00000C50                 mov     [ebp+var_105], al
.text:00000C56                 mov     edx, [ebp+var_78]
.text:00000C59                 movzx   eax, byte ptr [edx+7]
.text:00000C5D                 push    eax             ; int
.text:00000C5E                 movzx   ecx, [ebp+var_105]
.text:00000C65                 push    ecx             ; unsigned int
.text:00000C66                 lea     edx, [ebp+var_9C]
.text:00000C6C                 push    edx             ; char *
.text:00000C6D                 call    ?SetMethodName@NCab@NArchive@@YGXPADII@Z ; NArchive::NCab::SetMethodName(char *,uint,uint)
.text:00000C72                 lea     eax, [ebp+var_9C]
.text:00000C78                 push    eax
.text:00000C79                 lea     ecx, [ebp+var_28]
.text:00000C7C                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=(char const *)
.text:00000C81                 jmp     short $LN13_0   ; jumptable 00000A5C default case
.text:00000C83 ; ---------------------------------------------------------------------------
.text:00000C83
.text:00000C83 $LN1:                                   ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+F4j
.text:00000C83                                         ; DATA XREF: .text:$LN36o
.text:00000C83                 mov     ecx, [ebp+var_30] ; jumptable 00000A5C case 24
.text:00000C86                 push    ecx             ; struct NArchive::NCab::CMvItem *
.text:00000C87                 mov     ecx, [ebp+this]
.text:00000C8A                 add     ecx, 8          ; this
.text:00000C8D                 call    ?GetFolderIndex@CMvDatabaseEx@NCab@NArchive@@QBEHPBUCMvItem@23@@Z ; NArchive::NCab::CMvDatabaseEx::GetFolderIndex(NArchive::NCab::CMvItem const *)
.text:00000C92                 mov     [ebp+var_10C], eax
.text:00000C98                 mov     edx, [ebp+var_10C]
.text:00000C9E                 push    edx
.text:00000C9F                 lea     ecx, [ebp+var_28]
.text:00000CA2                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@H@Z ; NWindows::NCOM::CPropVariant::operator=(int)
.text:00000CA7
.text:00000CA7 $LN13_0:                                ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+E1j
.text:00000CA7                                         ; NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+F4j ...
.text:00000CA7                 mov     eax, [ebp+arg_C] ; jumptable 00000A5C default case
.text:00000CAA                 push    eax             ; struct tagPROPVARIANT *
.text:00000CAB                 lea     ecx, [ebp+var_28] ; this
.text:00000CAE                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:00000CB3                 mov     [ebp+var_BC], 0
.text:00000CBD                 mov     byte ptr [ebp+var_4], 0
.text:00000CC1                 lea     ecx, [ebp+var_28] ; this
.text:00000CC4                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000CC9                 mov     eax, [ebp+var_BC]
.text:00000CCF                 jmp     short loc_CFD
.text:00000CCF ?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z endp
.text:00000CCF
.text:00000CD1
.text:00000CD1 ; =============== S U B R O U T I N E =======================================
.text:00000CD1
.text:00000CD1
.text:00000CD1 __catch$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0 proc near
.text:00000CD1                                         ; DATA XREF: .xdata$x:00004A6Co
.text:00000CD1                 mov     dword ptr [ebp-0C0h], 8007000Eh
.text:00000CDB                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000CE2                 mov     eax, offset $LN25_0
.text:00000CE7                 retn
.text:00000CE7 __catch$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0 endp
.text:00000CE7
.text:00000CE8 ; ---------------------------------------------------------------------------
.text:00000CE8                 mov     eax, offset __tryend$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$1
.text:00000CED                 retn
.text:00000CEE ; ---------------------------------------------------------------------------
.text:00000CEE
.text:00000CEE __tryend$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$1:
.text:00000CEE                                         ; DATA XREF: .text:00000CE8o
.text:00000CEE                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000CF5                 jmp     short loc_CFD
.text:00000CF7 ; ---------------------------------------------------------------------------
.text:00000CF7
.text:00000CF7 $LN25_0:                                ; DATA XREF: __catch$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0+11o
.text:00000CF7                 mov     eax, [ebp-0C0h]
.text:00000CFD ; START OF FUNCTION CHUNK FOR ?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:00000CFD
.text:00000CFD loc_CFD:                                ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+367j
.text:00000CFD                                         ; .text:00000CF5j
.text:00000CFD                 push    edx
.text:00000CFE                 mov     ecx, ebp
.text:00000D00                 push    eax
.text:00000D01                 lea     edx, $LN35
.text:00000D07                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000D0C                 pop     eax
.text:00000D0D                 pop     edx
.text:00000D0E                 mov     ecx, [ebp+var_C]
.text:00000D11                 mov     large fs:0, ecx
.text:00000D18                 pop     ecx
.text:00000D19                 pop     edi
.text:00000D1A                 pop     esi
.text:00000D1B                 pop     ebx
.text:00000D1C                 mov     ecx, [ebp+var_14]
.text:00000D1F                 xor     ecx, ebp
.text:00000D21                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000D26                 add     esp, 10Ch
.text:00000D2C                 cmp     ebp, esp
.text:00000D2E                 call    __RTC_CheckEsp
.text:00000D33                 mov     esp, ebp
.text:00000D35                 pop     ebp
.text:00000D36                 retn    10h
.text:00000D36 ; END OF FUNCTION CHUNK FOR ?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:00000D36 ; ---------------------------------------------------------------------------
.text:00000D39                 align 4
.text:00000D3C $LN35           dd 5                    ; DATA XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+399o
.text:00000D40                 dd offset $LN34
.text:00000D44 $LN34           dd 0FFFFFFD8h, 10h      ; DATA XREF: .text:00000D40o
.text:00000D4C                 dd offset $LN28         ; "prop"
.text:00000D50                 dd 0FFFFFFB4h, 0Ch
.text:00000D58                 dd offset $LN29         ; "unicodeName"
.text:00000D5C                 dd 0FFFFFFA4h, 8
.text:00000D64                 dd offset $LN30         ; "localFileTime"
.text:00000D68                 dd 0FFFFFF94h, 8
.text:00000D70                 dd offset $LN31         ; "utcFileTime"
.text:00000D74                 dd 0FFFFFF64h, 20h
.text:00000D7C                 dd offset $LN32
.text:00000D80 $LN32           db 73h, 0               ; DATA XREF: .text:00000D7Co
.text:00000D82 $LN31           db 'utcFileTime',0      ; DATA XREF: .text:00000D70o
.text:00000D8E $LN30           db 'localFileTime',0    ; DATA XREF: .text:00000D64o
.text:00000D9C $LN29           db 'unicodeName',0      ; DATA XREF: .text:00000D58o
.text:00000DA8 $LN28           db 'prop',0             ; DATA XREF: .text:00000D4Co
.text:00000DAD                 align 10h
.text:00000DB0 $LN36           dd offset $LN12         ; DATA XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+F4r
.text:00000DB0                 dd offset $LN9_0        ; jump table for switch statement
.text:00000DB0                 dd offset $LN8
.text:00000DB0                 dd offset $LN7
.text:00000DB0                 dd offset $LN6
.text:00000DB0                 dd offset $LN2
.text:00000DB0                 dd offset $LN1
.text:00000DB0                 dd offset $LN13_0
.text:00000DD0 $LN27           db      0,     7,     7,     1
.text:00000DD0                                         ; DATA XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+EDr
.text:00000DD0                 db      2,     7,     3,     7 ; indirect table for switch statement
.text:00000DD0                 db      7,     4,     7,     7
.text:00000DD0                 db      7,     7,     7,     7
.text:00000DD0                 db      7,     7,     7,     5
.text:00000DD0                 db      7,     7,     7,     7
.text:00000DD0                 db      6
.text:00000DE9                 db 0Fh dup(0CCh)
.text:00000DF8
.text:00000DF8 ; =============== S U B R O U T I N E =======================================
.text:00000DF8
.text:00000DF8 ; Attributes: bp-based frame
.text:00000DF8
.text:00000DF8 ; __int32 __cdecl NArchive::NCab::CHandler::Open(NArchive::NCab::CHandler *this, struct IInStream *, const unsigned __int64 *, struct IArchiveOpenCallback *)
.text:00000DF8                 public ?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00000DF8 ?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z proc near
.text:00000DF8
.text:00000DF8 var_1D8         = byte ptr -1D8h
.text:00000DF8 var_1D7         = byte ptr -1D7h
.text:00000DF8 var_1D6         = byte ptr -1D6h
.text:00000DF8 var_1D5         = byte ptr -1D5h
.text:00000DF8 var_1D4         = dword ptr -1D4h
.text:00000DF8 var_1D0         = dword ptr -1D0h
.text:00000DF8 var_1CC         = dword ptr -1CCh
.text:00000DF8 var_1C8         = dword ptr -1C8h
.text:00000DF8 var_1C4         = dword ptr -1C4h
.text:00000DF8 var_1C0         = dword ptr -1C0h
.text:00000DF8 var_1BA         = byte ptr -1BAh
.text:00000DF8 var_1B9         = byte ptr -1B9h
.text:00000DF8 var_1B8         = dword ptr -1B8h
.text:00000DF8 var_1B1         = byte ptr -1B1h
.text:00000DF8 var_1B0         = dword ptr -1B0h
.text:00000DF8 var_1A9         = byte ptr -1A9h
.text:00000DF8 var_1A8         = dword ptr -1A8h
.text:00000DF8 var_1A4         = dword ptr -1A4h
.text:00000DF8 var_19D         = byte ptr -19Dh
.text:00000DF8 var_19C         = dword ptr -19Ch
.text:00000DF8 var_198         = dword ptr -198h
.text:00000DF8 var_194         = dword ptr -194h
.text:00000DF8 var_190         = dword ptr -190h
.text:00000DF8 var_18C         = dword ptr -18Ch
.text:00000DF8 var_185         = byte ptr -185h
.text:00000DF8 var_184         = dword ptr -184h
.text:00000DF8 var_180         = dword ptr -180h
.text:00000DF8 var_179         = byte ptr -179h
.text:00000DF8 var_178         = dword ptr -178h
.text:00000DF8 var_174         = dword ptr -174h
.text:00000DF8 var_170         = dword ptr -170h
.text:00000DF8 var_16C         = dword ptr -16Ch
.text:00000DF8 var_168         = dword ptr -168h
.text:00000DF8 var_164         = dword ptr -164h
.text:00000DF8 var_15C         = dword ptr -15Ch
.text:00000DF8 var_158         = dword ptr -158h
.text:00000DF8 var_154         = dword ptr -154h
.text:00000DF8 var_150         = dword ptr -150h
.text:00000DF8 var_14C         = dword ptr -14Ch
.text:00000DF8 var_148         = dword ptr -148h
.text:00000DF8 var_144         = dword ptr -144h
.text:00000DF8 var_13C         = byte ptr -13Ch
.text:00000DF8 var_12C         = dword ptr -12Ch
.text:00000DF8 var_128         = dword ptr -128h
.text:00000DF8 var_124         = dword ptr -124h
.text:00000DF8 var_120         = dword ptr -120h
.text:00000DF8 var_11C         = dword ptr -11Ch
.text:00000DF8 var_118         = dword ptr -118h
.text:00000DF8 var_114         = dword ptr -114h
.text:00000DF8 var_110         = dword ptr -110h
.text:00000DF8 var_10C         = dword ptr -10Ch
.text:00000DF8 var_104         = byte ptr -104h
.text:00000DF8 var_F8          = byte ptr -0F8h
.text:00000DF8 var_EC          = dword ptr -0ECh
.text:00000DF8 var_E8          = dword ptr -0E8h
.text:00000DF8 var_D4          = dword ptr -0D4h
.text:00000DF8 var_D0          = dword ptr -0D0h
.text:00000DF8 var_98          = dword ptr -98h
.text:00000DF8 var_8C          = byte ptr -8Ch
.text:00000DF8 var_80          = dword ptr -80h
.text:00000DF8 var_78          = dword ptr -78h
.text:00000DF8 var_74          = dword ptr -74h
.text:00000DF8 var_69          = byte ptr -69h
.text:00000DF8 var_64          = byte ptr -64h
.text:00000DF8 var_58          = byte ptr -58h
.text:00000DF8 var_4C          = byte ptr -4Ch
.text:00000DF8 var_1C          = byte ptr -1Ch
.text:00000DF8 var_1B          = byte ptr -1Bh
.text:00000DF8 var_1A          = byte ptr -1Ah
.text:00000DF8 var_19          = byte ptr -19h
.text:00000DF8 var_10          = dword ptr -10h
.text:00000DF8 var_C           = dword ptr -0Ch
.text:00000DF8 var_4           = dword ptr -4
.text:00000DF8 this            = dword ptr  8
.text:00000DF8 arg_4           = dword ptr  0Ch
.text:00000DF8 arg_8           = dword ptr  10h
.text:00000DF8 arg_C           = dword ptr  14h
.text:00000DF8
.text:00000DF8 ; FUNCTION CHUNK AT .text:00001759 SIZE 00000009 BYTES
.text:00000DF8 ; FUNCTION CHUNK AT .text:0000176A SIZE 00000034 BYTES
.text:00000DF8
.text:00000DF8                 push    ebp
.text:00000DF9                 mov     ebp, esp
.text:00000DFB                 push    0FFFFFFFFh
.text:00000DFD                 push    offset __ehhandler$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00000E02                 mov     eax, large fs:0
.text:00000E08                 push    eax
.text:00000E09                 push    ecx
.text:00000E0A                 sub     esp, 1C8h
.text:00000E10                 push    ebx
.text:00000E11                 push    esi
.text:00000E12                 push    edi
.text:00000E13                 lea     edi, [ebp+var_1D8]
.text:00000E19                 mov     ecx, 72h ; 'r'
.text:00000E1E                 mov     eax, 0CCCCCCCCh
.text:00000E23                 rep stosd
.text:00000E25                 mov     eax, dword ptr ds:___security_cookie
.text:00000E2A                 xor     eax, ebp
.text:00000E2C                 push    eax
.text:00000E2D                 lea     eax, [ebp+var_C]
.text:00000E30                 mov     large fs:0, eax
.text:00000E36                 mov     [ebp+var_10], esp
.text:00000E39                 mov     [ebp+var_4], 0
.text:00000E40                 mov     esi, esp
.text:00000E42                 mov     eax, [ebp+this]
.text:00000E45                 push    eax
.text:00000E46                 mov     ecx, [ebp+this]
.text:00000E49                 mov     edx, [ecx]
.text:00000E4B                 mov     eax, [edx+10h]
.text:00000E4E                 call    eax
.text:00000E50                 cmp     esi, esp
.text:00000E52                 call    __RTC_CheckEsp
.text:00000E57                 lea     ecx, [ebp+var_4C] ; this
.text:00000E5A                 call    ??0CInArchive@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CInArchive::CInArchive(void)
.text:00000E5F                 mov     [ebp+var_164], eax
.text:00000E65                 mov     byte ptr [ebp+var_4], 1
.text:00000E69                 lea     ecx, [ebp+var_58]
.text:00000E6C                 call    ??0?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::CMyComPtr<IArchiveOpenVolumeCallback>(void)
.text:00000E71                 mov     [ebp+var_168], eax
.text:00000E77                 mov     byte ptr [ebp+var_4], 2
.text:00000E7B                 lea     ecx, [ebp+var_58]
.text:00000E7E                 call    ??I?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAEPAPAUIArchiveOpenVolumeCallback@@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator&(void)
.text:00000E83                 mov     [ebp+var_16C], eax
.text:00000E89                 mov     esi, esp
.text:00000E8B                 mov     ecx, [ebp+var_16C]
.text:00000E91                 push    ecx
.text:00000E92                 push    offset _IID_IArchiveOpenVolumeCallback
.text:00000E97                 mov     edx, [ebp+arg_C]
.text:00000E9A                 push    edx
.text:00000E9B                 mov     eax, [ebp+arg_C]
.text:00000E9E                 mov     ecx, [eax]
.text:00000EA0                 mov     edx, [ecx]
.text:00000EA2                 call    edx
.text:00000EA4                 cmp     esi, esp
.text:00000EA6                 call    __RTC_CheckEsp
.text:00000EAB                 mov     eax, [ebp+arg_4]
.text:00000EAE                 push    eax
.text:00000EAF                 lea     ecx, [ebp+var_64]
.text:00000EB2                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(IInStream *)
.text:00000EB7                 mov     byte ptr [ebp+var_4], 3
.text:00000EBB                 mov     [ebp+var_69], 0
.text:00000EBF                 mov     [ebp+var_78], 0
.text:00000EC6                 mov     [ebp+var_74], 0
.text:00000ECD                 mov     [ebp+var_80], 0
.text:00000ED4
.text:00000ED4 loc_ED4:                                ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+849j
.text:00000ED4                 lea     ecx, [ebp+var_64]
.text:00000ED7                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00000EDC                 mov     [ebp+var_170], eax
.text:00000EE2                 cmp     [ebp+var_170], 0
.text:00000EE9                 jz      loc_1646
.text:00000EEF                 lea     ecx, [ebp+var_104] ; this
.text:00000EF5                 call    ??0CDatabaseEx@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CDatabaseEx::CDatabaseEx(void)
.text:00000EFA                 mov     [ebp+var_174], eax
.text:00000F00                 mov     byte ptr [ebp+var_4], 4
.text:00000F04                 lea     ecx, [ebp+var_64]
.text:00000F07                 push    ecx
.text:00000F08                 lea     ecx, [ebp+var_8C]
.text:00000F0E                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@ABV0@@Z ; CMyComPtr<IInStream>::operator=(CMyComPtr<IInStream> const &)
.text:00000F13                 mov     edx, [ebp+arg_8]
.text:00000F16                 push    edx             ; unsigned __int64 *
.text:00000F17                 lea     eax, [ebp+var_104]
.text:00000F1D                 push    eax             ; struct NArchive::NCab::CDatabaseEx *
.text:00000F1E                 lea     ecx, [ebp+var_4C] ; this
.text:00000F21                 call    ?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z ; NArchive::NCab::CInArchive::Open(NArchive::NCab::CDatabaseEx &,unsigned __int64 const *)
.text:00000F26                 mov     [ebp+var_178], eax
.text:00000F2C                 mov     ecx, [ebp+var_178]
.text:00000F32                 mov     [ebp+var_10C], ecx
.text:00000F38                 movzx   edx, [ebp+var_19]
.text:00000F3C                 mov     eax, [ebp+this]
.text:00000F3F                 movzx   ecx, byte ptr [eax+45h]
.text:00000F43                 or      ecx, edx
.text:00000F45                 mov     edx, [ebp+this]
.text:00000F48                 mov     [edx+45h], cl
.text:00000F4B                 movzx   eax, [ebp+var_1B]
.text:00000F4F                 mov     ecx, [ebp+this]
.text:00000F52                 movzx   edx, byte ptr [ecx+45h]
.text:00000F56                 or      edx, eax
.text:00000F58                 mov     eax, [ebp+this]
.text:00000F5B                 mov     [eax+45h], dl
.text:00000F5E                 movzx   ecx, [ebp+var_1A]
.text:00000F62                 mov     edx, [ebp+this]
.text:00000F65                 movzx   eax, byte ptr [edx+46h]
.text:00000F69                 or      eax, ecx
.text:00000F6B                 mov     ecx, [ebp+this]
.text:00000F6E                 mov     [ecx+46h], al
.text:00000F71                 cmp     [ebp+var_10C], 0
.text:00000F78                 jnz     loc_107A
.text:00000F7E                 mov     ecx, [ebp+this]
.text:00000F81                 add     ecx, 8
.text:00000F84                 call    ?IsEmpty@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::IsEmpty(void)
.text:00000F89                 mov     [ebp+var_179], al
.text:00000F8F                 movzx   edx, [ebp+var_179]
.text:00000F96                 test    edx, edx
.text:00000F98                 jnz     loc_107A
.text:00000F9E                 mov     ecx, [ebp+this]
.text:00000FA1                 add     ecx, 8
.text:00000FA4                 call    ?Back@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@XZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::Back(void)
.text:00000FA9                 mov     [ebp+var_180], eax
.text:00000FAF                 mov     eax, [ebp+var_180]
.text:00000FB5                 add     eax, 20h ; ' '
.text:00000FB8                 mov     [ebp+var_110], eax
.text:00000FBE                 mov     ecx, [ebp+var_D0]
.text:00000FC4                 mov     [ebp+var_114], ecx
.text:00000FCA                 mov     edx, [ebp+var_110]
.text:00000FD0                 mov     eax, [edx+10h]
.text:00000FD3                 cmp     eax, [ebp+var_D4]
.text:00000FD9                 jz      short loc_FEA
.text:00000FDB                 mov     [ebp+var_10C], 1
.text:00000FE5                 jmp     loc_107A
.text:00000FEA ; ---------------------------------------------------------------------------
.text:00000FEA
.text:00000FEA loc_FEA:                                ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+1E1j
.text:00000FEA                 movzx   ecx, [ebp+var_69]
.text:00000FEE                 test    ecx, ecx
.text:00000FF0                 jz      short loc_1012
.text:00000FF2                 mov     edx, [ebp+var_110]
.text:00000FF8                 mov     eax, [edx+14h]
.text:00000FFB                 add     eax, 1
.text:00000FFE                 cmp     [ebp+var_114], eax
.text:00001004                 jz      short loc_1010
.text:00001006                 mov     [ebp+var_10C], 1
.text:00001010
.text:00001010 loc_1010:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+20Cj
.text:00001010                 jmp     short loc_107A
.text:00001012 ; ---------------------------------------------------------------------------
.text:00001012
.text:00001012 loc_1012:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+1F8j
.text:00001012                 mov     ecx, [ebp+var_110]
.text:00001018                 mov     edx, [ebp+var_114]
.text:0000101E                 cmp     edx, [ecx+14h]
.text:00001021                 jb      short loc_102F
.text:00001023                 mov     [ebp+var_10C], 1
.text:0000102D                 jmp     short loc_107A
.text:0000102F ; ---------------------------------------------------------------------------
.text:0000102F
.text:0000102F loc_102F:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+229j
.text:0000102F                 cmp     [ebp+var_80], 0
.text:00001033                 jz      short loc_107A
.text:00001035                 mov     eax, [ebp+var_80]
.text:00001038                 sub     eax, 1
.text:0000103B                 push    eax
.text:0000103C                 mov     ecx, [ebp+this]
.text:0000103F                 add     ecx, 8
.text:00001042                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:00001047                 mov     [ebp+var_184], eax
.text:0000104D                 mov     ecx, [ebp+var_184]
.text:00001053                 add     ecx, 20h ; ' '
.text:00001056                 mov     [ebp+var_118], ecx
.text:0000105C                 mov     edx, [ebp+var_118]
.text:00001062                 mov     eax, [edx+14h]
.text:00001065                 add     eax, 1
.text:00001068                 cmp     [ebp+var_114], eax
.text:0000106E                 jz      short loc_107A
.text:00001070                 mov     [ebp+var_10C], 1
.text:0000107A
.text:0000107A loc_107A:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+180j
.text:0000107A                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+1A0j ...
.text:0000107A                 movzx   ecx, [ebp+var_1C]
.text:0000107E                 test    ecx, ecx
.text:00001080                 jnz     short loc_108B
.text:00001082                 cmp     [ebp+var_10C], 0
.text:00001089                 jnz     short loc_10CF
.text:0000108B
.text:0000108B loc_108B:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+288j
.text:0000108B                 mov     edx, [ebp+this]
.text:0000108E                 mov     byte ptr [edx+44h], 1
.text:00001092                 mov     ecx, [ebp+this]
.text:00001095                 add     ecx, 8
.text:00001098                 call    ?IsEmpty@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::IsEmpty(void)
.text:0000109D                 mov     [ebp+var_185], al
.text:000010A3                 movzx   eax, [ebp+var_185]
.text:000010AA                 test    eax, eax
.text:000010AC                 jz      short loc_10CF
.text:000010AE                 mov     ecx, [ebp+this]
.text:000010B1                 mov     edx, [ebp+var_EC]
.text:000010B7                 mov     [ecx+50h], edx
.text:000010BA                 mov     eax, [ebp+var_E8]
.text:000010C0                 mov     [ecx+54h], eax
.text:000010C3                 mov     ecx, [ebp+this]
.text:000010C6                 mov     edx, [ebp+var_98]
.text:000010CC                 mov     [ecx+48h], edx
.text:000010CF
.text:000010CF loc_10CF:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+291j
.text:000010CF                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+2B4j
.text:000010CF                 cmp     [ebp+var_10C], 0
.text:000010D6                 jnz     loc_11AA
.text:000010DC                 lea     ecx, [ebp+var_F8]
.text:000010E2                 call    ?Size@?$CObjectVector@UCItem@NCab@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NCab::CItem>::Size(void)
.text:000010E7                 mov     [ebp+var_18C], eax
.text:000010ED                 mov     eax, [ebp+var_18C]
.text:000010F3                 xor     ecx, ecx
.text:000010F5                 add     eax, [ebp+var_78]
.text:000010F8                 adc     ecx, [ebp+var_74]
.text:000010FB                 mov     [ebp+var_78], eax
.text:000010FE                 mov     [ebp+var_74], ecx
.text:00001101                 movzx   edx, [ebp+var_69]
.text:00001105                 test    edx, edx
.text:00001107                 jz      short loc_1128
.text:00001109                 mov     ecx, [ebp+this]
.text:0000110C                 add     ecx, 8
.text:0000110F                 call    ?Size@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::Size(void)
.text:00001114                 mov     [ebp+var_190], eax
.text:0000111A                 mov     eax, [ebp+var_190]
.text:00001120                 mov     [ebp+var_194], eax
.text:00001126                 jmp     short loc_1131
.text:00001128 ; ---------------------------------------------------------------------------
.text:00001128
.text:00001128 loc_1128:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+30Fj
.text:00001128                 mov     ecx, [ebp+var_80]
.text:0000112B                 mov     [ebp+var_194], ecx
.text:00001131
.text:00001131 loc_1131:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+32Ej
.text:00001131                 lea     edx, [ebp+var_104]
.text:00001137                 push    edx             ; struct NArchive::NCab::CDatabaseEx *
.text:00001138                 mov     eax, [ebp+var_194]
.text:0000113E                 push    eax             ; int
.text:0000113F                 mov     ecx, [ebp+this]
.text:00001142                 add     ecx, 8
.text:00001145                 call    ?Insert@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXIABUCDatabaseEx@NCab@NArchive@@@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::Insert(uint,NArchive::NCab::CDatabaseEx const &)
.text:0000114A                 movzx   ecx, [ebp+var_69]
.text:0000114E                 test    ecx, ecx
.text:00001150                 jnz     short loc_11A5
.text:00001152                 mov     ecx, [ebp+this]
.text:00001155                 add     ecx, 8
.text:00001158                 call    ?Size@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::Size(void)
.text:0000115D                 mov     [ebp+var_198], eax
.text:00001163                 cmp     [ebp+var_198], 1
.text:0000116A                 jbe     short loc_11A5
.text:0000116C                 mov     edx, [ebp+var_80]
.text:0000116F                 add     edx, 1
.text:00001172                 mov     [ebp+var_80], edx
.text:00001175                 mov     eax, [ebp+var_80]
.text:00001178                 push    eax
.text:00001179                 mov     ecx, [ebp+this]
.text:0000117C                 add     ecx, 8
.text:0000117F                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:00001184                 mov     [ebp+var_19C], eax
.text:0000118A                 mov     ecx, [ebp+var_D0]
.text:00001190                 add     ecx, 1
.text:00001193                 mov     edx, [ebp+var_19C]
.text:00001199                 cmp     ecx, [edx+34h]
.text:0000119C                 jnz     short loc_11A5
.text:0000119E                 mov     [ebp+var_80], 0
.text:000011A5
.text:000011A5 loc_11A5:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+358j
.text:000011A5                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+372j ...
.text:000011A5                 jmp     loc_129D
.text:000011AA ; ---------------------------------------------------------------------------
.text:000011AA
.text:000011AA loc_11AA:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+2DEj
.text:000011AA                 cmp     [ebp+var_10C], 1
.text:000011B1                 jz      short loc_11FD
.text:000011B3                 mov     eax, [ebp+var_10C]
.text:000011B9                 mov     [ebp+var_148], eax
.text:000011BF                 mov     byte ptr [ebp+var_4], 3
.text:000011C3                 lea     ecx, [ebp+var_104] ; this
.text:000011C9                 call    ??1CDatabaseEx@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CDatabaseEx::~CDatabaseEx(void)
.text:000011CE                 mov     byte ptr [ebp+var_4], 2
.text:000011D2                 lea     ecx, [ebp+var_64]
.text:000011D5                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:000011DA                 mov     byte ptr [ebp+var_4], 1
.text:000011DE                 lea     ecx, [ebp+var_58]
.text:000011E1                 call    ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>(void)
.text:000011E6                 mov     byte ptr [ebp+var_4], 0
.text:000011EA                 lea     ecx, [ebp+var_4C] ; this
.text:000011ED                 call    ??1CInArchive@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CInArchive::~CInArchive(void)
.text:000011F2                 mov     eax, [ebp+var_148]
.text:000011F8                 jmp     loc_176C
.text:000011FD ; ---------------------------------------------------------------------------
.text:000011FD
.text:000011FD loc_11FD:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+3B9j
.text:000011FD                 mov     ecx, [ebp+this]
.text:00001200                 add     ecx, 8
.text:00001203                 call    ?IsEmpty@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::IsEmpty(void)
.text:00001208                 mov     [ebp+var_19D], al
.text:0000120E                 movzx   ecx, [ebp+var_19D]
.text:00001215                 test    ecx, ecx
.text:00001217                 jz      short loc_1261
.text:00001219                 mov     [ebp+var_14C], 1
.text:00001223                 mov     byte ptr [ebp+var_4], 3
.text:00001227                 lea     ecx, [ebp+var_104] ; this
.text:0000122D                 call    ??1CDatabaseEx@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CDatabaseEx::~CDatabaseEx(void)
.text:00001232                 mov     byte ptr [ebp+var_4], 2
.text:00001236                 lea     ecx, [ebp+var_64]
.text:00001239                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000123E                 mov     byte ptr [ebp+var_4], 1
.text:00001242                 lea     ecx, [ebp+var_58]
.text:00001245                 call    ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>(void)
.text:0000124A                 mov     byte ptr [ebp+var_4], 0
.text:0000124E                 lea     ecx, [ebp+var_4C] ; this
.text:00001251                 call    ??1CInArchive@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CInArchive::~CInArchive(void)
.text:00001256                 mov     eax, [ebp+var_14C]
.text:0000125C                 jmp     loc_176C
.text:00001261 ; ---------------------------------------------------------------------------
.text:00001261
.text:00001261 loc_1261:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+41Fj
.text:00001261                 movzx   edx, [ebp+var_69]
.text:00001265                 test    edx, edx
.text:00001267                 jz      short loc_127D
.text:00001269                 mov     byte ptr [ebp+var_4], 3
.text:0000126D                 lea     ecx, [ebp+var_104] ; this
.text:00001273                 call    ??1CDatabaseEx@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CDatabaseEx::~CDatabaseEx(void)
.text:00001278                 jmp     loc_1646
.text:0000127D ; ---------------------------------------------------------------------------
.text:0000127D
.text:0000127D loc_127D:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+46Fj
.text:0000127D                 mov     [ebp+var_69], 1
.text:00001281                 cmp     [ebp+var_80], 0
.text:00001285                 jz      short loc_129D
.text:00001287                 mov     eax, [ebp+var_80]
.text:0000128A                 push    eax
.text:0000128B                 mov     ecx, [ebp+this]
.text:0000128E                 add     ecx, 8
.text:00001291                 call    ?DeleteFrontal@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXI@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::DeleteFrontal(uint)
.text:00001296                 mov     [ebp+var_80], 0
.text:0000129D
.text:0000129D loc_129D:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *):loc_11A5j
.text:0000129D                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+48Dj
.text:0000129D                 mov     esi, esp
.text:0000129F                 push    0
.text:000012A1                 lea     ecx, [ebp+var_78]
.text:000012A4                 push    ecx
.text:000012A5                 mov     edx, [ebp+arg_C]
.text:000012A8                 push    edx
.text:000012A9                 mov     eax, [ebp+arg_C]
.text:000012AC                 mov     ecx, [eax]
.text:000012AE                 mov     edx, [ecx+10h]
.text:000012B1                 call    edx
.text:000012B3                 cmp     esi, esp
.text:000012B5                 call    __RTC_CheckEsp
.text:000012BA                 mov     [ebp+var_1A4], eax
.text:000012C0                 mov     eax, [ebp+var_1A4]
.text:000012C6                 mov     [ebp+var_11C], eax
.text:000012CC                 cmp     [ebp+var_11C], 0
.text:000012D3                 jz      short loc_131F
.text:000012D5                 mov     ecx, [ebp+var_11C]
.text:000012DB                 mov     [ebp+var_150], ecx
.text:000012E1                 mov     byte ptr [ebp+var_4], 3
.text:000012E5                 lea     ecx, [ebp+var_104] ; this
.text:000012EB                 call    ??1CDatabaseEx@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CDatabaseEx::~CDatabaseEx(void)
.text:000012F0                 mov     byte ptr [ebp+var_4], 2
.text:000012F4                 lea     ecx, [ebp+var_64]
.text:000012F7                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:000012FC                 mov     byte ptr [ebp+var_4], 1
.text:00001300                 lea     ecx, [ebp+var_58]
.text:00001303                 call    ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>(void)
.text:00001308                 mov     byte ptr [ebp+var_4], 0
.text:0000130C                 lea     ecx, [ebp+var_4C] ; this
.text:0000130F                 call    ??1CInArchive@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CInArchive::~CInArchive(void)
.text:00001314                 mov     eax, [ebp+var_150]
.text:0000131A                 jmp     loc_176C
.text:0000131F ; ---------------------------------------------------------------------------
.text:0000131F
.text:0000131F loc_131F:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+4DBj
.text:0000131F                 push    0
.text:00001321                 lea     ecx, [ebp+var_64]
.text:00001324                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:00001329
.text:00001329 loc_1329:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+835j
.text:00001329                 mov     [ebp+var_120], 0
.text:00001333                 movzx   edx, [ebp+var_69]
.text:00001337                 test    edx, edx
.text:00001339                 jnz     loc_1408
.text:0000133F                 cmp     [ebp+var_80], 0
.text:00001343                 jnz     short loc_139A
.text:00001345                 push    0
.text:00001347                 mov     ecx, [ebp+this]
.text:0000134A                 add     ecx, 8
.text:0000134D                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:00001352                 mov     [ebp+var_1A8], eax
.text:00001358                 mov     eax, [ebp+var_1A8]
.text:0000135E                 add     eax, 20h ; ' '
.text:00001361                 mov     [ebp+var_124], eax
.text:00001367                 mov     ecx, [ebp+var_124] ; this
.text:0000136D                 call    ?IsTherePrev@CArchInfo@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CArchInfo::IsTherePrev(void)
.text:00001372                 mov     [ebp+var_1A9], al
.text:00001378                 movzx   ecx, [ebp+var_1A9]
.text:0000137F                 test    ecx, ecx
.text:00001381                 jz      short loc_1394
.text:00001383                 mov     edx, [ebp+var_124]
.text:00001389                 add     edx, 1Ch
.text:0000138C                 mov     [ebp+var_120], edx
.text:00001392                 jmp     short loc_1398
.text:00001394 ; ---------------------------------------------------------------------------
.text:00001394
.text:00001394 loc_1394:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+589j
.text:00001394                 mov     [ebp+var_69], 1
.text:00001398
.text:00001398 loc_1398:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+59Aj
.text:00001398                 jmp     short loc_1408
.text:0000139A ; ---------------------------------------------------------------------------
.text:0000139A
.text:0000139A loc_139A:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+54Bj
.text:0000139A                 mov     eax, [ebp+var_80]
.text:0000139D                 sub     eax, 1
.text:000013A0                 push    eax
.text:000013A1                 mov     ecx, [ebp+this]
.text:000013A4                 add     ecx, 8
.text:000013A7                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:000013AC                 mov     [ebp+var_1B0], eax
.text:000013B2                 mov     ecx, [ebp+var_1B0]
.text:000013B8                 add     ecx, 20h ; ' '
.text:000013BB                 mov     [ebp+var_128], ecx
.text:000013C1                 mov     ecx, [ebp+var_128] ; this
.text:000013C7                 call    ?IsThereNext@CArchInfo@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CArchInfo::IsThereNext(void)
.text:000013CC                 mov     [ebp+var_1B1], al
.text:000013D2                 movzx   edx, [ebp+var_1B1]
.text:000013D9                 test    edx, edx
.text:000013DB                 jz      short loc_13EE
.text:000013DD                 mov     eax, [ebp+var_128]
.text:000013E3                 add     eax, 34h ; '4'
.text:000013E6                 mov     [ebp+var_120], eax
.text:000013EC                 jmp     short loc_1408
.text:000013EE ; ---------------------------------------------------------------------------
.text:000013EE
.text:000013EE loc_13EE:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+5E3j
.text:000013EE                 mov     [ebp+var_69], 1
.text:000013F2                 mov     ecx, [ebp+var_80]
.text:000013F5                 push    ecx
.text:000013F6                 mov     ecx, [ebp+this]
.text:000013F9                 add     ecx, 8
.text:000013FC                 call    ?DeleteFrontal@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXI@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::DeleteFrontal(uint)
.text:00001401                 mov     [ebp+var_80], 0
.text:00001408
.text:00001408 loc_1408:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+541j
.text:00001408                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *):loc_1398j ...
.text:00001408                 cmp     [ebp+var_120], 0
.text:0000140F                 jnz     short loc_145C
.text:00001411                 mov     ecx, [ebp+this]
.text:00001414                 add     ecx, 8
.text:00001417                 call    ?Back@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@XZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::Back(void)
.text:0000141C                 mov     [ebp+var_1B8], eax
.text:00001422                 mov     edx, [ebp+var_1B8]
.text:00001428                 add     edx, 20h ; ' '
.text:0000142B                 mov     [ebp+var_12C], edx
.text:00001431                 mov     ecx, [ebp+var_12C] ; this
.text:00001437                 call    ?IsThereNext@CArchInfo@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CArchInfo::IsThereNext(void)
.text:0000143C                 mov     [ebp+var_1B9], al
.text:00001442                 movzx   eax, [ebp+var_1B9]
.text:00001449                 test    eax, eax
.text:0000144B                 jz      short loc_145C
.text:0000144D                 mov     ecx, [ebp+var_12C]
.text:00001453                 add     ecx, 34h ; '4'
.text:00001456                 mov     [ebp+var_120], ecx
.text:0000145C
.text:0000145C loc_145C:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+617j
.text:0000145C                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+653j
.text:0000145C                 cmp     [ebp+var_120], 0
.text:00001463                 jnz     short loc_146A
.text:00001465                 jmp     loc_1632
.text:0000146A ; ---------------------------------------------------------------------------
.text:0000146A
.text:0000146A loc_146A:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+66Bj
.text:0000146A                 lea     ecx, [ebp+var_58]
.text:0000146D                 call    ??7?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBE_NXZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator!(void)
.text:00001472                 mov     [ebp+var_1BA], al
.text:00001478                 movzx   edx, [ebp+var_1BA]
.text:0000147F                 test    edx, edx
.text:00001481                 jz      short loc_1488
.text:00001483                 jmp     loc_1632
.text:00001488 ; ---------------------------------------------------------------------------
.text:00001488
.text:00001488 loc_1488:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+689j
.text:00001488                 push    0
.text:0000148A                 mov     eax, [ebp+var_120]
.text:00001490                 push    eax
.text:00001491                 lea     ecx, [ebp+var_13C]
.text:00001497                 push    ecx
.text:00001498                 call    ?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z ; MultiByteToUnicodeString(AString const &,uint)
.text:0000149D                 mov     [ebp+var_1C0], eax
.text:000014A3                 mov     byte ptr [ebp+var_4], 5
.text:000014A7                 lea     ecx, [ebp+var_58]
.text:000014AA                 call    ??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator->(void)
.text:000014AF                 mov     [ebp+var_1C4], eax
.text:000014B5                 mov     edx, [ebp+var_1C4]
.text:000014BB                 mov     [ebp+var_1C8], edx
.text:000014C1                 lea     ecx, [ebp+var_64]
.text:000014C4                 call    ??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator&(void)
.text:000014C9                 mov     [ebp+var_1CC], eax
.text:000014CF                 lea     ecx, [ebp+var_13C]
.text:000014D5                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000014DA                 mov     [ebp+var_1D0], eax
.text:000014E0                 mov     esi, esp
.text:000014E2                 mov     eax, [ebp+var_1CC]
.text:000014E8                 push    eax
.text:000014E9                 mov     ecx, [ebp+var_1D0]
.text:000014EF                 push    ecx
.text:000014F0                 mov     edx, [ebp+var_1C8]
.text:000014F6                 push    edx
.text:000014F7                 mov     eax, [ebp+var_1C8]
.text:000014FD                 mov     ecx, [eax]
.text:000014FF                 mov     edx, [ecx+10h]
.text:00001502                 call    edx
.text:00001504                 cmp     esi, esp
.text:00001506                 call    __RTC_CheckEsp
.text:0000150B                 mov     [ebp+var_1D4], eax
.text:00001511                 mov     eax, [ebp+var_1D4]
.text:00001517                 mov     [ebp+var_144], eax
.text:0000151D                 cmp     [ebp+var_144], 0
.text:00001524                 jnz     short loc_153A
.text:00001526                 mov     byte ptr [ebp+var_4], 4
.text:0000152A                 lea     ecx, [ebp+var_13C] ; this
.text:00001530                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001535                 jmp     loc_1632
.text:0000153A ; ---------------------------------------------------------------------------
.text:0000153A
.text:0000153A loc_153A:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+72Cj
.text:0000153A                 cmp     [ebp+var_144], 1
.text:00001541                 jz      short loc_159C
.text:00001543                 mov     ecx, [ebp+var_144]
.text:00001549                 mov     [ebp+var_154], ecx
.text:0000154F                 mov     byte ptr [ebp+var_4], 4
.text:00001553                 lea     ecx, [ebp+var_13C] ; this
.text:00001559                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000155E                 mov     byte ptr [ebp+var_4], 3
.text:00001562                 lea     ecx, [ebp+var_104] ; this
.text:00001568                 call    ??1CDatabaseEx@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CDatabaseEx::~CDatabaseEx(void)
.text:0000156D                 mov     byte ptr [ebp+var_4], 2
.text:00001571                 lea     ecx, [ebp+var_64]
.text:00001574                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00001579                 mov     byte ptr [ebp+var_4], 1
.text:0000157D                 lea     ecx, [ebp+var_58]
.text:00001580                 call    ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>(void)
.text:00001585                 mov     byte ptr [ebp+var_4], 0
.text:00001589                 lea     ecx, [ebp+var_4C] ; this
.text:0000158C                 call    ??1CInArchive@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CInArchive::~CInArchive(void)
.text:00001591                 mov     eax, [ebp+var_154]
.text:00001597                 jmp     loc_176C
.text:0000159C ; ---------------------------------------------------------------------------
.text:0000159C
.text:0000159C loc_159C:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+749j
.text:0000159C                 mov     ecx, [ebp+this]
.text:0000159F                 add     ecx, 38h ; '8'  ; this
.text:000015A2                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:000015A7                 mov     [ebp+var_1D5], al
.text:000015AD                 movzx   edx, [ebp+var_1D5]
.text:000015B4                 test    edx, edx
.text:000015B6                 jnz     short loc_15C3
.text:000015B8                 mov     ecx, [ebp+this]
.text:000015BB                 add     ecx, 38h ; '8'  ; this
.text:000015BE                 call    ?Add_LF@UString@@QAEXXZ ; UString::Add_LF(void)
.text:000015C3
.text:000015C3 loc_15C3:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+7BEj
.text:000015C3                 push    offset $SG71614 ; "Can't open volume: "
.text:000015C8                 mov     ecx, [ebp+this]
.text:000015CB                 add     ecx, 38h ; '8'  ; this
.text:000015CE                 call    ?AddAscii@UString@@QAEXPBD@Z ; UString::AddAscii(char const *)
.text:000015D3                 lea     eax, [ebp+var_13C]
.text:000015D9                 push    eax
.text:000015DA                 mov     ecx, [ebp+this]
.text:000015DD                 add     ecx, 38h ; '8'
.text:000015E0                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:000015E5                 movzx   ecx, [ebp+var_69]
.text:000015E9                 test    ecx, ecx
.text:000015EB                 jz      short loc_15FE
.text:000015ED                 mov     byte ptr [ebp+var_4], 4
.text:000015F1                 lea     ecx, [ebp+var_13C] ; this
.text:000015F7                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000015FC                 jmp     short loc_1632
.text:000015FE ; ---------------------------------------------------------------------------
.text:000015FE
.text:000015FE loc_15FE:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+7F3j
.text:000015FE                 mov     [ebp+var_69], 1
.text:00001602                 cmp     [ebp+var_80], 0
.text:00001606                 jz      short loc_161E
.text:00001608                 mov     edx, [ebp+var_80]
.text:0000160B                 push    edx
.text:0000160C                 mov     ecx, [ebp+this]
.text:0000160F                 add     ecx, 8
.text:00001612                 call    ?DeleteFrontal@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXI@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::DeleteFrontal(uint)
.text:00001617                 mov     [ebp+var_80], 0
.text:0000161E
.text:0000161E loc_161E:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+80Ej
.text:0000161E                 mov     byte ptr [ebp+var_4], 4
.text:00001622                 lea     ecx, [ebp+var_13C] ; this
.text:00001628                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000162D                 jmp     loc_1329
.text:00001632 ; ---------------------------------------------------------------------------
.text:00001632
.text:00001632 loc_1632:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+66Dj
.text:00001632                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+68Bj ...
.text:00001632                 mov     byte ptr [ebp+var_4], 3
.text:00001636                 lea     ecx, [ebp+var_104] ; this
.text:0000163C                 call    ??1CDatabaseEx@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CDatabaseEx::~CDatabaseEx(void)
.text:00001641                 jmp     loc_ED4
.text:00001646 ; ---------------------------------------------------------------------------
.text:00001646
.text:00001646 loc_1646:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+F1j
.text:00001646                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+480j
.text:00001646                 cmp     [ebp+var_80], 0
.text:0000164A                 jz      short loc_1662
.text:0000164C                 mov     eax, [ebp+var_80]
.text:0000164F                 push    eax
.text:00001650                 mov     ecx, [ebp+this]
.text:00001653                 add     ecx, 8
.text:00001656                 call    ?DeleteFrontal@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXI@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::DeleteFrontal(uint)
.text:0000165B                 mov     [ebp+var_80], 0
.text:00001662
.text:00001662 loc_1662:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+852j
.text:00001662                 mov     ecx, [ebp+this]
.text:00001665                 add     ecx, 8
.text:00001668                 call    ?IsEmpty@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::IsEmpty(void)
.text:0000166D                 mov     [ebp+var_1D6], al
.text:00001673                 movzx   ecx, [ebp+var_1D6]
.text:0000167A                 test    ecx, ecx
.text:0000167C                 jz      short loc_16B9
.text:0000167E                 mov     [ebp+var_158], 1
.text:00001688                 mov     byte ptr [ebp+var_4], 2
.text:0000168C                 lea     ecx, [ebp+var_64]
.text:0000168F                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00001694                 mov     byte ptr [ebp+var_4], 1
.text:00001698                 lea     ecx, [ebp+var_58]
.text:0000169B                 call    ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>(void)
.text:000016A0                 mov     byte ptr [ebp+var_4], 0
.text:000016A4                 lea     ecx, [ebp+var_4C] ; this
.text:000016A7                 call    ??1CInArchive@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CInArchive::~CInArchive(void)
.text:000016AC                 mov     eax, [ebp+var_158]
.text:000016B2                 jmp     loc_176C
.text:000016B7 ; ---------------------------------------------------------------------------
.text:000016B7                 jmp     short loc_1716
.text:000016B9 ; ---------------------------------------------------------------------------
.text:000016B9
.text:000016B9 loc_16B9:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+884j
.text:000016B9                 mov     ecx, [ebp+this]
.text:000016BC                 add     ecx, 8          ; this
.text:000016BF                 call    ?FillSortAndShrink@CMvDatabaseEx@NCab@NArchive@@QAEXXZ ; NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(void)
.text:000016C4                 mov     ecx, [ebp+this]
.text:000016C7                 add     ecx, 8          ; this
.text:000016CA                 call    ?Check@CMvDatabaseEx@NCab@NArchive@@QAE_NXZ ; NArchive::NCab::CMvDatabaseEx::Check(void)
.text:000016CF                 mov     [ebp+var_1D7], al
.text:000016D5                 movzx   edx, [ebp+var_1D7]
.text:000016DC                 test    edx, edx
.text:000016DE                 jnz     short loc_1716
.text:000016E0                 mov     [ebp+var_15C], 1
.text:000016EA                 mov     byte ptr [ebp+var_4], 2
.text:000016EE                 lea     ecx, [ebp+var_64]
.text:000016F1                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:000016F6                 mov     byte ptr [ebp+var_4], 1
.text:000016FA                 lea     ecx, [ebp+var_58]
.text:000016FD                 call    ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>(void)
.text:00001702                 mov     byte ptr [ebp+var_4], 0
.text:00001706                 lea     ecx, [ebp+var_4C] ; this
.text:00001709                 call    ??1CInArchive@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CInArchive::~CInArchive(void)
.text:0000170E                 mov     eax, [ebp+var_15C]
.text:00001714                 jmp     short loc_176C
.text:00001716 ; ---------------------------------------------------------------------------
.text:00001716
.text:00001716 loc_1716:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+8BFj
.text:00001716                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+8E6j
.text:00001716                 mov     byte ptr [ebp+var_4], 2
.text:0000171A                 lea     ecx, [ebp+var_64]
.text:0000171D                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00001722                 mov     byte ptr [ebp+var_4], 1
.text:00001726                 lea     ecx, [ebp+var_58]
.text:00001729                 call    ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>(void)
.text:0000172E                 mov     byte ptr [ebp+var_4], 0
.text:00001732                 lea     ecx, [ebp+var_4C] ; this
.text:00001735                 call    ??1CInArchive@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CInArchive::~CInArchive(void)
.text:0000173A                 jmp     short $LN52
.text:0000173A ?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z endp
.text:0000173A
.text:0000173C
.text:0000173C ; =============== S U B R O U T I N E =======================================
.text:0000173C
.text:0000173C
.text:0000173C __catch$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0 proc near
.text:0000173C                                         ; DATA XREF: .xdata$x:00004AE4o
.text:0000173C                 mov     dword ptr [ebp-160h], 8007000Eh
.text:00001746                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000174D                 mov     eax, offset $LN60
.text:00001752                 retn
.text:00001752 __catch$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0 endp
.text:00001752
.text:00001753 ; ---------------------------------------------------------------------------
.text:00001753                 mov     eax, offset $LN52
.text:00001758                 retn
.text:00001759 ; ---------------------------------------------------------------------------
.text:00001759 ; START OF FUNCTION CHUNK FOR ?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00001759
.text:00001759 $LN52:                                  ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+942j
.text:00001759                                         ; DATA XREF: .text:00001753o
.text:00001759                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001760                 jmp     short loc_176A
.text:00001760 ; END OF FUNCTION CHUNK FOR ?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00001762
.text:00001762 ; =============== S U B R O U T I N E =======================================
.text:00001762
.text:00001762
.text:00001762 $LN60           proc near               ; DATA XREF: __catch$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0+11o
.text:00001762                 mov     eax, [ebp-160h]
.text:00001768                 jmp     short loc_176C
.text:00001768 $LN60           endp
.text:00001768
.text:0000176A ; ---------------------------------------------------------------------------
.text:0000176A ; START OF FUNCTION CHUNK FOR ?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:0000176A
.text:0000176A loc_176A:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+968j
.text:0000176A                 xor     eax, eax
.text:0000176C
.text:0000176C loc_176C:                               ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+400j
.text:0000176C                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+464j ...
.text:0000176C                 push    edx
.text:0000176D                 mov     ecx, ebp
.text:0000176F                 push    eax
.text:00001770                 lea     edx, $LN70
.text:00001776                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000177B                 pop     eax
.text:0000177C                 pop     edx
.text:0000177D                 mov     ecx, [ebp+var_C]
.text:00001780                 mov     large fs:0, ecx
.text:00001787                 pop     ecx
.text:00001788                 pop     edi
.text:00001789                 pop     esi
.text:0000178A                 pop     ebx
.text:0000178B                 add     esp, 1D8h
.text:00001791                 cmp     ebp, esp
.text:00001793                 call    __RTC_CheckEsp
.text:00001798                 mov     esp, ebp
.text:0000179A                 pop     ebp
.text:0000179B                 retn    10h
.text:0000179B ; END OF FUNCTION CHUNK FOR ?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:0000179B ; ---------------------------------------------------------------------------
.text:0000179E                 align 10h
.text:000017A0 $LN70           dd 6                    ; DATA XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+978o
.text:000017A4                 dd offset $LN69
.text:000017A8 $LN69           dd 0FFFFFFB4h, 38h      ; DATA XREF: .text:000017A4o
.text:000017B0                 dd offset $LN62_0       ; "archive"
.text:000017B4                 dd 0FFFFFFA8h, 4
.text:000017BC                 dd offset $LN63_0       ; "openVolumeCallback"
.text:000017C0                 dd 0FFFFFF9Ch, 4
.text:000017C8                 dd offset $LN64         ; "nextStream"
.text:000017CC                 db 88h, 0FFh
.text:000017CE                 dw 0FFFFh
.text:000017D0                 dd 8
.text:000017D4                 dd offset $LN65         ; "numItems"
.text:000017D8                 dd 0FFFFFEFCh, 80h
.text:000017E0                 dd offset $LN66         ; "db"
.text:000017E4                 dd 0FFFFFEC4h, 0Ch
.text:000017EC                 dd offset $LN67         ; "fullName"
.text:000017F0 $LN67           db 'fullName',0         ; DATA XREF: .text:000017ECo
.text:000017F9 $LN66           db 'db',0               ; DATA XREF: .text:000017E0o
.text:000017FC $LN65           db 'numItems',0         ; DATA XREF: .text:000017D4o
.text:00001805 $LN64           db 'nextStream',0       ; DATA XREF: .text:000017C8o
.text:00001810 $LN63_0         db 'openVolumeCallback',0 ; DATA XREF: .text:000017BCo
.text:00001823 $LN62_0         db 'archive',0          ; DATA XREF: .text:000017B0o
.text:0000182B                 db 0Dh dup(0CCh)
.text:00001838
.text:00001838 ; =============== S U B R O U T I N E =======================================
.text:00001838
.text:00001838 ; Attributes: bp-based frame
.text:00001838
.text:00001838 ; __int32 __stdcall NArchive::NCab::CHandler::Close(NArchive::NCab::CHandler *this)
.text:00001838                 public ?Close@CHandler@NCab@NArchive@@UAGJXZ
.text:00001838 ?Close@CHandler@NCab@NArchive@@UAGJXZ proc near
.text:00001838
.text:00001838 this            = dword ptr  8
.text:00001838
.text:00001838                 push    ebp
.text:00001839                 mov     ebp, esp
.text:0000183B                 mov     ecx, [ebp+this]
.text:0000183E                 add     ecx, 38h ; '8'  ; this
.text:00001841                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00001846                 mov     eax, [ebp+this]
.text:00001849                 mov     byte ptr [eax+44h], 0
.text:0000184D                 mov     ecx, [ebp+this]
.text:00001850                 mov     byte ptr [ecx+45h], 0
.text:00001854                 mov     edx, [ebp+this]
.text:00001857                 mov     byte ptr [edx+46h], 0
.text:0000185B                 mov     eax, [ebp+this]
.text:0000185E                 mov     dword ptr [eax+48h], 0
.text:00001865                 mov     ecx, [ebp+this]
.text:00001868                 mov     dword ptr [ecx+50h], 0
.text:0000186F                 mov     dword ptr [ecx+54h], 0
.text:00001876                 mov     ecx, [ebp+this]
.text:00001879                 add     ecx, 8          ; this
.text:0000187C                 call    ?Clear@CMvDatabaseEx@NCab@NArchive@@QAEXXZ ; NArchive::NCab::CMvDatabaseEx::Clear(void)
.text:00001881                 xor     eax, eax
.text:00001883                 cmp     ebp, esp
.text:00001885                 call    __RTC_CheckEsp
.text:0000188A                 pop     ebp
.text:0000188B                 retn    4
.text:0000188B ?Close@CHandler@NCab@NArchive@@UAGJXZ endp
.text:0000188B
.text:0000188B ; ---------------------------------------------------------------------------
.text:0000188E                 db 0Ah dup(0CCh)
.text:00001898
.text:00001898 ; =============== S U B R O U T I N E =======================================
.text:00001898
.text:00001898 ; Attributes: bp-based frame
.text:00001898
.text:00001898 ; public: void __thiscall NArchive::NCab::CFolderOutStream::Init(class NArchive::NCab::CMvDatabaseEx const *, class CRecordVector<bool> const *, unsigned int, unsigned __int64, struct IArchiveExtractCallback *, bool)
.text:00001898                 public ?Init@CFolderOutStream@NCab@NArchive@@QAEXPBVCMvDatabaseEx@23@PBV?$CRecordVector@_N@@I_KPAUIArchiveExtractCallback@@_N@Z
.text:00001898 ?Init@CFolderOutStream@NCab@NArchive@@QAEXPBVCMvDatabaseEx@23@PBV?$CRecordVector@_N@@I_KPAUIArchiveExtractCallback@@_N@Z proc near
.text:00001898                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+EDAp
.text:00001898
.text:00001898 var_4           = dword ptr -4
.text:00001898 arg_0           = dword ptr  8
.text:00001898 arg_4           = dword ptr  0Ch
.text:00001898 arg_8           = dword ptr  10h
.text:00001898 arg_C           = dword ptr  14h
.text:00001898 arg_10          = dword ptr  18h
.text:00001898 arg_14          = dword ptr  1Ch
.text:00001898 arg_18          = byte ptr  20h
.text:00001898
.text:00001898                 push    ebp
.text:00001899                 mov     ebp, esp
.text:0000189B                 push    ecx
.text:0000189C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000018A3                 mov     [ebp+var_4], ecx
.text:000018A6                 mov     eax, [ebp+var_4]
.text:000018A9                 mov     ecx, [ebp+arg_0]
.text:000018AC                 mov     [eax+8], ecx
.text:000018AF                 mov     edx, [ebp+var_4]
.text:000018B2                 mov     eax, [ebp+arg_4]
.text:000018B5                 mov     [edx+0Ch], eax
.text:000018B8                 mov     ecx, [ebp+var_4]
.text:000018BB                 mov     edx, [ebp+arg_8]
.text:000018BE                 mov     [ecx+24h], edx
.text:000018C1                 mov     eax, [ebp+var_4]
.text:000018C4                 mov     ecx, [ebp+arg_C]
.text:000018C7                 mov     [eax+40h], ecx
.text:000018CA                 mov     edx, [ebp+arg_10]
.text:000018CD                 mov     [eax+44h], edx
.text:000018D0                 mov     eax, [ebp+arg_14]
.text:000018D3                 push    eax
.text:000018D4                 mov     ecx, [ebp+var_4]
.text:000018D7                 add     ecx, 2Ch ; ','
.text:000018DA                 call    ??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@PAU1@@Z ; CMyComPtr<IArchiveExtractCallback>::operator=(IArchiveExtractCallback *)
.text:000018DF                 mov     ecx, [ebp+var_4]
.text:000018E2                 mov     dl, [ebp+arg_18]
.text:000018E5                 mov     [ecx+30h], dl
.text:000018E8                 mov     eax, [ebp+var_4]
.text:000018EB                 mov     dword ptr [eax+28h], 0
.text:000018F2                 mov     ecx, [ebp+var_4]
.text:000018F5                 mov     dword ptr [ecx+48h], 0
.text:000018FC                 mov     dword ptr [ecx+4Ch], 0
.text:00001903                 mov     edx, [ebp+var_4]
.text:00001906                 mov     byte ptr [edx+39h], 0
.text:0000190A                 mov     eax, [ebp+var_4]
.text:0000190D                 mov     byte ptr [eax+38h], 1
.text:00001911                 mov     ecx, [ebp+var_4]
.text:00001914                 mov     byte ptr [ecx+1Ch], 0
.text:00001918                 mov     edx, [ebp+var_4]
.text:0000191B                 mov     dword ptr [edx+18h], 0
.text:00001922                 add     esp, 4
.text:00001925                 cmp     ebp, esp
.text:00001927                 call    __RTC_CheckEsp
.text:0000192C                 mov     esp, ebp
.text:0000192E                 pop     ebp
.text:0000192F                 retn    1Ch
.text:0000192F ?Init@CFolderOutStream@NCab@NArchive@@QAEXPBVCMvDatabaseEx@23@PBV?$CRecordVector@_N@@I_KPAUIArchiveExtractCallback@@_N@Z endp
.text:0000192F
.text:0000192F ; ---------------------------------------------------------------------------
.text:00001932                 align 8
.text:00001938
.text:00001938 ; =============== S U B R O U T I N E =======================================
.text:00001938
.text:00001938 ; Attributes: bp-based frame
.text:00001938
.text:00001938 ; __int32 __thiscall NArchive::NCab::CFolderOutStream::CloseFileWithResOp(NArchive::NCab::CFolderOutStream *this, int)
.text:00001938                 public ?CloseFileWithResOp@CFolderOutStream@NCab@NArchive@@AAEJH@Z
.text:00001938 ?CloseFileWithResOp@CFolderOutStream@NCab@NArchive@@AAEJH@Z proc near
.text:00001938                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::CloseFile(void)+23p
.text:00001938                                         ; NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+29Ap
.text:00001938
.text:00001938 var_8           = dword ptr -8
.text:00001938 var_4           = dword ptr -4
.text:00001938 arg_0           = dword ptr  8
.text:00001938
.text:00001938                 push    ebp
.text:00001939                 mov     ebp, esp
.text:0000193B                 sub     esp, 8
.text:0000193E                 push    esi
.text:0000193F                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001946                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000194D                 mov     [ebp+var_4], ecx
.text:00001950                 mov     ecx, [ebp+var_4]
.text:00001953                 add     ecx, 34h ; '4'
.text:00001956                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:0000195B                 mov     eax, [ebp+var_4]
.text:0000195E                 mov     byte ptr [eax+39h], 0
.text:00001962                 mov     ecx, [ebp+var_4]
.text:00001965                 mov     edx, [ecx+18h]
.text:00001968                 sub     edx, 1
.text:0000196B                 mov     eax, [ebp+var_4]
.text:0000196E                 mov     [eax+18h], edx
.text:00001971                 mov     ecx, [ebp+var_4]
.text:00001974                 add     ecx, 2Ch ; ','
.text:00001977                 call    ??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator->(void)
.text:0000197C                 mov     [ebp+var_8], eax
.text:0000197F                 mov     esi, esp
.text:00001981                 mov     ecx, [ebp+arg_0]
.text:00001984                 push    ecx
.text:00001985                 mov     edx, [ebp+var_8]
.text:00001988                 push    edx
.text:00001989                 mov     eax, [ebp+var_8]
.text:0000198C                 mov     ecx, [eax]
.text:0000198E                 mov     edx, [ecx+1Ch]
.text:00001991                 call    edx
.text:00001993                 cmp     esi, esp
.text:00001995                 call    __RTC_CheckEsp
.text:0000199A                 pop     esi
.text:0000199B                 add     esp, 8
.text:0000199E                 cmp     ebp, esp
.text:000019A0                 call    __RTC_CheckEsp
.text:000019A5                 mov     esp, ebp
.text:000019A7                 pop     ebp
.text:000019A8                 retn    4
.text:000019A8 ?CloseFileWithResOp@CFolderOutStream@NCab@NArchive@@AAEJH@Z endp
.text:000019A8
.text:000019A8 ; ---------------------------------------------------------------------------
.text:000019AB                 db 0Dh dup(0CCh)
.text:000019B8
.text:000019B8 ; =============== S U B R O U T I N E =======================================
.text:000019B8
.text:000019B8 ; Attributes: bp-based frame
.text:000019B8
.text:000019B8 ; __int32 __thiscall NArchive::NCab::CFolderOutStream::CloseFile(NArchive::NCab::CFolderOutStream *__hidden this)
.text:000019B8                 public ?CloseFile@CFolderOutStream@NCab@NArchive@@AAEJXZ
.text:000019B8 ?CloseFile@CFolderOutStream@NCab@NArchive@@AAEJXZ proc near
.text:000019B8                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+31Dp
.text:000019B8                                         ; NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+1C3p ...
.text:000019B8
.text:000019B8 var_4           = dword ptr -4
.text:000019B8
.text:000019B8                 push    ebp
.text:000019B9                 mov     ebp, esp
.text:000019BB                 push    ecx
.text:000019BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000019C3                 mov     [ebp+var_4], ecx
.text:000019C6                 mov     eax, [ebp+var_4]
.text:000019C9                 movzx   ecx, byte ptr [eax+38h]
.text:000019CD                 neg     ecx
.text:000019CF                 sbb     ecx, ecx
.text:000019D1                 and     ecx, 0FFFFFFFEh
.text:000019D4                 add     ecx, 2
.text:000019D7                 push    ecx             ; int
.text:000019D8                 mov     ecx, [ebp+var_4] ; this
.text:000019DB                 call    ?CloseFileWithResOp@CFolderOutStream@NCab@NArchive@@AAEJH@Z ; NArchive::NCab::CFolderOutStream::CloseFileWithResOp(int)
.text:000019E0                 add     esp, 4
.text:000019E3                 cmp     ebp, esp
.text:000019E5                 call    __RTC_CheckEsp
.text:000019EA                 mov     esp, ebp
.text:000019EC                 pop     ebp
.text:000019ED                 retn
.text:000019ED ?CloseFile@CFolderOutStream@NCab@NArchive@@AAEJXZ endp
.text:000019ED
.text:000019ED ; ---------------------------------------------------------------------------
.text:000019EE                 db 0Ah dup(0CCh)
.text:000019F8
.text:000019F8 ; =============== S U B R O U T I N E =======================================
.text:000019F8
.text:000019F8 ; Attributes: bp-based frame
.text:000019F8
.text:000019F8 ; __int32 __thiscall NArchive::NCab::CFolderOutStream::OpenFile(NArchive::NCab::CFolderOutStream *__hidden this)
.text:000019F8                 public ?OpenFile@CFolderOutStream@NCab@NArchive@@AAEJXZ
.text:000019F8 ?OpenFile@CFolderOutStream@NCab@NArchive@@AAEJXZ proc near
.text:000019F8                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::WriteEmptyFiles(void)+C4p
.text:000019F8                                         ; NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+1EFp ...
.text:000019F8
.text:000019F8 var_64          = dword ptr -64h
.text:000019F8 var_60          = dword ptr -60h
.text:000019F8 var_5C          = dword ptr -5Ch
.text:000019F8 var_58          = dword ptr -58h
.text:000019F8 var_54          = dword ptr -54h
.text:000019F8 var_50          = dword ptr -50h
.text:000019F8 var_4C          = dword ptr -4Ch
.text:000019F8 var_48          = dword ptr -48h
.text:000019F8 var_44          = dword ptr -44h
.text:000019F8 var_40          = dword ptr -40h
.text:000019F8 var_3C          = dword ptr -3Ch
.text:000019F8 var_38          = dword ptr -38h
.text:000019F8 var_30          = byte ptr -30h
.text:000019F8 var_28          = dword ptr -28h
.text:000019F8 var_24          = dword ptr -24h
.text:000019F8 var_20          = dword ptr -20h
.text:000019F8 var_1C          = dword ptr -1Ch
.text:000019F8 var_18          = dword ptr -18h
.text:000019F8 var_14          = dword ptr -14h
.text:000019F8 var_10          = dword ptr -10h
.text:000019F8 var_C           = dword ptr -0Ch
.text:000019F8 var_4           = dword ptr -4
.text:000019F8
.text:000019F8                 push    ebp
.text:000019F9                 mov     ebp, esp
.text:000019FB                 push    0FFFFFFFFh
.text:000019FD                 push    offset __ehhandler$?OpenFile@CFolderOutStream@NCab@NArchive@@AAEJXZ
.text:00001A02                 mov     eax, large fs:0
.text:00001A08                 push    eax
.text:00001A09                 sub     esp, 58h
.text:00001A0C                 push    esi
.text:00001A0D                 push    edi
.text:00001A0E                 push    ecx
.text:00001A0F                 lea     edi, [ebp+var_64]
.text:00001A12                 mov     ecx, 16h
.text:00001A17                 mov     eax, 0CCCCCCCCh
.text:00001A1C                 rep stosd
.text:00001A1E                 pop     ecx
.text:00001A1F                 mov     eax, dword ptr ds:___security_cookie
.text:00001A24                 xor     eax, ebp
.text:00001A26                 push    eax
.text:00001A27                 lea     eax, [ebp+var_C]
.text:00001A2A                 mov     large fs:0, eax
.text:00001A30                 mov     [ebp+var_10], ecx
.text:00001A33                 mov     eax, [ebp+var_10]
.text:00001A36                 cmp     dword ptr [eax+18h], 0
.text:00001A3A                 jnz     loc_1D2E
.text:00001A40                 mov     ecx, [ebp+var_10]
.text:00001A43                 mov     edx, [ecx+24h]
.text:00001A46                 mov     eax, [ebp+var_10]
.text:00001A49                 add     edx, [eax+28h]
.text:00001A4C                 push    edx
.text:00001A4D                 mov     ecx, [ebp+var_10]
.text:00001A50                 mov     ecx, [ecx+8]
.text:00001A53                 add     ecx, 0Ch
.text:00001A56                 call    ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QBEABUCMvItem@NCab@NArchive@@I@Z ; CRecordVector<NArchive::NCab::CMvItem>::operator[](uint)
.text:00001A5B                 mov     [ebp+var_14], eax
.text:00001A5E                 mov     edx, [ebp+var_14]
.text:00001A61                 mov     eax, [edx+4]
.text:00001A64                 push    eax
.text:00001A65                 mov     ecx, [ebp+var_14]
.text:00001A68                 mov     edx, [ecx]
.text:00001A6A                 push    edx
.text:00001A6B                 mov     eax, [ebp+var_10]
.text:00001A6E                 mov     ecx, [eax+8]
.text:00001A71                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEABUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:00001A76                 add     eax, 0Ch
.text:00001A79                 mov     ecx, eax
.text:00001A7B                 call    ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QBEABUCItem@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CItem>::operator[](uint)
.text:00001A80                 mov     [ebp+var_18], eax
.text:00001A83                 mov     [ebp+var_1C], 0
.text:00001A8A                 mov     ecx, [ebp+var_10]
.text:00001A8D                 mov     edx, [ecx+28h]
.text:00001A90                 mov     [ebp+var_20], edx
.text:00001A93                 jmp     short loc_1A9E
.text:00001A95 ; ---------------------------------------------------------------------------
.text:00001A95
.text:00001A95 loc_1A95:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void):loc_1B43j
.text:00001A95                 mov     eax, [ebp+var_20]
.text:00001A98                 add     eax, 1
.text:00001A9B                 mov     [ebp+var_20], eax
.text:00001A9E
.text:00001A9E loc_1A9E:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+9Bj
.text:00001A9E                 mov     ecx, [ebp+var_10]
.text:00001AA1                 mov     ecx, [ecx+0Ch]
.text:00001AA4                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00001AA9                 cmp     [ebp+var_20], eax
.text:00001AAC                 jnb     loc_1B48
.text:00001AB2                 mov     edx, [ebp+var_10]
.text:00001AB5                 mov     eax, [edx+24h]
.text:00001AB8                 add     eax, [ebp+var_20]
.text:00001ABB                 push    eax
.text:00001ABC                 mov     ecx, [ebp+var_10]
.text:00001ABF                 mov     ecx, [ecx+8]
.text:00001AC2                 add     ecx, 0Ch
.text:00001AC5                 call    ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QBEABUCMvItem@NCab@NArchive@@I@Z ; CRecordVector<NArchive::NCab::CMvItem>::operator[](uint)
.text:00001ACA                 mov     [ebp+var_24], eax
.text:00001ACD                 mov     edx, [ebp+var_24]
.text:00001AD0                 mov     eax, [edx+4]
.text:00001AD3                 push    eax
.text:00001AD4                 mov     ecx, [ebp+var_24]
.text:00001AD7                 mov     edx, [ecx]
.text:00001AD9                 push    edx
.text:00001ADA                 mov     eax, [ebp+var_10]
.text:00001ADD                 mov     ecx, [eax+8]
.text:00001AE0                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEABUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:00001AE5                 add     eax, 0Ch
.text:00001AE8                 mov     ecx, eax
.text:00001AEA                 call    ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QBEABUCItem@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CItem>::operator[](uint)
.text:00001AEF                 mov     [ebp+var_28], eax
.text:00001AF2                 mov     ecx, [ebp+var_18]
.text:00001AF5                 mov     edx, [ebp+var_28]
.text:00001AF8                 mov     eax, [ecx+0Ch]
.text:00001AFB                 cmp     eax, [edx+0Ch]
.text:00001AFE                 jnz     short loc_1B17
.text:00001B00                 mov     ecx, [ebp+var_18]
.text:00001B03                 mov     edx, [ebp+var_28]
.text:00001B06                 mov     eax, [ecx+10h]
.text:00001B09                 cmp     eax, [edx+10h]
.text:00001B0C                 jnz     short loc_1B17
.text:00001B0E                 mov     ecx, [ebp+var_18]
.text:00001B11                 cmp     dword ptr [ecx+10h], 0
.text:00001B15                 jnz     short loc_1B19
.text:00001B17
.text:00001B17 loc_1B17:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+106j
.text:00001B17                                         ; NArchive::NCab::CFolderOutStream::OpenFile(void)+114j
.text:00001B17                 jmp     short loc_1B48
.text:00001B19 ; ---------------------------------------------------------------------------
.text:00001B19
.text:00001B19 loc_1B19:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+11Dj
.text:00001B19                 mov     edx, [ebp+var_10]
.text:00001B1C                 movzx   eax, byte ptr [edx+30h]
.text:00001B20                 test    eax, eax
.text:00001B22                 jnz     short loc_1B43
.text:00001B24                 mov     ecx, [ebp+var_20]
.text:00001B27                 push    ecx
.text:00001B28                 mov     edx, [ebp+var_10]
.text:00001B2B                 mov     ecx, [edx+0Ch]
.text:00001B2E                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00001B33                 movzx   eax, byte ptr [eax]
.text:00001B36                 test    eax, eax
.text:00001B38                 jz      short loc_1B43
.text:00001B3A                 mov     ecx, [ebp+var_1C]
.text:00001B3D                 add     ecx, 1
.text:00001B40                 mov     [ebp+var_1C], ecx
.text:00001B43
.text:00001B43 loc_1B43:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+12Aj
.text:00001B43                                         ; NArchive::NCab::CFolderOutStream::OpenFile(void)+140j
.text:00001B43                 jmp     loc_1A95
.text:00001B48 ; ---------------------------------------------------------------------------
.text:00001B48
.text:00001B48 loc_1B48:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+B4j
.text:00001B48                                         ; NArchive::NCab::CFolderOutStream::OpenFile(void):loc_1B17j
.text:00001B48                 mov     edx, [ebp+var_10]
.text:00001B4B                 mov     eax, [ebp+var_20]
.text:00001B4E                 sub     eax, [edx+28h]
.text:00001B51                 mov     ecx, [ebp+var_10]
.text:00001B54                 mov     [ecx+18h], eax
.text:00001B57                 mov     edx, [ebp+var_10]
.text:00001B5A                 cmp     dword ptr [edx+18h], 0
.text:00001B5E                 jnz     short loc_1B6A
.text:00001B60                 mov     eax, [ebp+var_10]
.text:00001B63                 mov     dword ptr [eax+18h], 1
.text:00001B6A
.text:00001B6A loc_1B6A:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+166j
.text:00001B6A                 mov     ecx, [ebp+var_10]
.text:00001B6D                 mov     byte ptr [ecx+1Ch], 0
.text:00001B71                 cmp     [ebp+var_1C], 1
.text:00001B75                 jbe     short loc_1BDF
.text:00001B77                 mov     edx, [ebp+var_10]
.text:00001B7A                 cmp     dword ptr [edx+10h], 0
.text:00001B7E                 jz      short loc_1B8E
.text:00001B80                 mov     eax, [ebp+var_18]
.text:00001B83                 mov     ecx, [ebp+var_10]
.text:00001B86                 mov     edx, [eax+10h]
.text:00001B89                 cmp     edx, [ecx+14h]
.text:00001B8C                 jbe     short loc_1BC7
.text:00001B8E
.text:00001B8E loc_1B8E:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+186j
.text:00001B8E                 mov     ecx, [ebp+var_10] ; this
.text:00001B91                 call    ?FreeTempBuf@CFolderOutStream@NCab@NArchive@@AAEXXZ ; NArchive::NCab::CFolderOutStream::FreeTempBuf(void)
.text:00001B96                 mov     eax, [ebp+var_18]
.text:00001B99                 mov     ecx, [eax+10h]
.text:00001B9C                 push    ecx
.text:00001B9D                 call    _MyAlloc@4      ; MyAlloc(x)
.text:00001BA2                 mov     edx, [ebp+var_10]
.text:00001BA5                 mov     [edx+10h], eax
.text:00001BA8                 mov     eax, [ebp+var_10]
.text:00001BAB                 mov     ecx, [ebp+var_18]
.text:00001BAE                 mov     edx, [ecx+10h]
.text:00001BB1                 mov     [eax+14h], edx
.text:00001BB4                 mov     eax, [ebp+var_10]
.text:00001BB7                 cmp     dword ptr [eax+10h], 0
.text:00001BBB                 jnz     short loc_1BC7
.text:00001BBD                 mov     eax, 8007000Eh
.text:00001BC2                 jmp     loc_1E03
.text:00001BC7 ; ---------------------------------------------------------------------------
.text:00001BC7
.text:00001BC7 loc_1BC7:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+194j
.text:00001BC7                                         ; NArchive::NCab::CFolderOutStream::OpenFile(void)+1C3j
.text:00001BC7                 mov     ecx, [ebp+var_10]
.text:00001BCA                 mov     byte ptr [ecx+1Ch], 1
.text:00001BCE                 mov     edx, [ebp+var_10]
.text:00001BD1                 mov     eax, [ebp+var_18]
.text:00001BD4                 mov     ecx, [eax+0Ch]
.text:00001BD7                 mov     [edx+20h], ecx
.text:00001BDA                 jmp     loc_1D2E
.text:00001BDF ; ---------------------------------------------------------------------------
.text:00001BDF
.text:00001BDF loc_1BDF:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+17Dj
.text:00001BDF                 cmp     [ebp+var_1C], 1
.text:00001BE3                 jnz     loc_1D2E
.text:00001BE9
.text:00001BE9 loc_1BE9:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+331j
.text:00001BE9                 mov     edx, [ebp+var_10]
.text:00001BEC                 cmp     dword ptr [edx+18h], 0
.text:00001BF0                 jz      loc_1D2E
.text:00001BF6                 mov     eax, [ebp+var_10]
.text:00001BF9                 mov     ecx, [eax+28h]
.text:00001BFC                 push    ecx
.text:00001BFD                 mov     edx, [ebp+var_10]
.text:00001C00                 mov     ecx, [edx+0Ch]
.text:00001C03                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00001C08                 movzx   eax, byte ptr [eax]
.text:00001C0B                 test    eax, eax
.text:00001C0D                 jnz     loc_1D2E
.text:00001C13                 lea     ecx, [ebp+var_30]
.text:00001C16                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00001C1B                 mov     [ebp+var_4], 0
.text:00001C22                 mov     ecx, [ebp+var_10]
.text:00001C25                 add     ecx, 2Ch ; ','
.text:00001C28                 call    ??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator->(void)
.text:00001C2D                 mov     [ebp+var_54], eax
.text:00001C30                 mov     esi, esp
.text:00001C32                 push    2
.text:00001C34                 lea     ecx, [ebp+var_30]
.text:00001C37                 call    ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&(void)
.text:00001C3C                 push    eax
.text:00001C3D                 mov     ecx, [ebp+var_10]
.text:00001C40                 mov     edx, [ecx+24h]
.text:00001C43                 mov     eax, [ebp+var_10]
.text:00001C46                 add     edx, [eax+28h]
.text:00001C49                 push    edx
.text:00001C4A                 mov     ecx, [ebp+var_54]
.text:00001C4D                 push    ecx
.text:00001C4E                 mov     edx, [ebp+var_54]
.text:00001C51                 mov     eax, [edx]
.text:00001C53                 mov     ecx, [eax+14h]
.text:00001C56                 call    ecx
.text:00001C58                 cmp     esi, esp
.text:00001C5A                 call    __RTC_CheckEsp
.text:00001C5F                 mov     [ebp+var_38], eax
.text:00001C62                 cmp     [ebp+var_38], 0
.text:00001C66                 jz      short loc_1C85
.text:00001C68                 mov     edx, [ebp+var_38]
.text:00001C6B                 mov     [ebp+var_48], edx
.text:00001C6E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001C75                 lea     ecx, [ebp+var_30]
.text:00001C78                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001C7D                 mov     eax, [ebp+var_48]
.text:00001C80                 jmp     loc_1E03
.text:00001C85 ; ---------------------------------------------------------------------------
.text:00001C85
.text:00001C85 loc_1C85:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+26Ej
.text:00001C85                 lea     ecx, [ebp+var_30]
.text:00001C88                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00001C8D                 test    eax, eax
.text:00001C8F                 jz      short loc_1CAF
.text:00001C91                 mov     [ebp+var_4C], 80004005h
.text:00001C98                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001C9F                 lea     ecx, [ebp+var_30]
.text:00001CA2                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001CA7                 mov     eax, [ebp+var_4C]
.text:00001CAA                 jmp     loc_1E03
.text:00001CAF ; ---------------------------------------------------------------------------
.text:00001CAF
.text:00001CAF loc_1CAF:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+297j
.text:00001CAF                 mov     ecx, [ebp+var_10]
.text:00001CB2                 add     ecx, 2Ch ; ','
.text:00001CB5                 call    ??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator->(void)
.text:00001CBA                 mov     [ebp+var_58], eax
.text:00001CBD                 mov     esi, esp
.text:00001CBF                 push    2
.text:00001CC1                 mov     eax, [ebp+var_58]
.text:00001CC4                 push    eax
.text:00001CC5                 mov     ecx, [ebp+var_58]
.text:00001CC8                 mov     edx, [ecx]
.text:00001CCA                 mov     eax, [edx+18h]
.text:00001CCD                 call    eax
.text:00001CCF                 cmp     esi, esp
.text:00001CD1                 call    __RTC_CheckEsp
.text:00001CD6                 mov     [ebp+var_3C], eax
.text:00001CD9                 cmp     [ebp+var_3C], 0
.text:00001CDD                 jz      short loc_1CFC
.text:00001CDF                 mov     ecx, [ebp+var_3C]
.text:00001CE2                 mov     [ebp+var_50], ecx
.text:00001CE5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001CEC                 lea     ecx, [ebp+var_30]
.text:00001CEF                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001CF4                 mov     eax, [ebp+var_50]
.text:00001CF7                 jmp     loc_1E03
.text:00001CFC ; ---------------------------------------------------------------------------
.text:00001CFC
.text:00001CFC loc_1CFC:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+2E5j
.text:00001CFC                 mov     edx, [ebp+var_10]
.text:00001CFF                 mov     eax, [edx+28h]
.text:00001D02                 add     eax, 1
.text:00001D05                 mov     ecx, [ebp+var_10]
.text:00001D08                 mov     [ecx+28h], eax
.text:00001D0B                 mov     edx, [ebp+var_10]
.text:00001D0E                 mov     byte ptr [edx+39h], 1
.text:00001D12                 mov     ecx, [ebp+var_10] ; this
.text:00001D15                 call    ?CloseFile@CFolderOutStream@NCab@NArchive@@AAEJXZ ; NArchive::NCab::CFolderOutStream::CloseFile(void)
.text:00001D1A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001D21                 lea     ecx, [ebp+var_30]
.text:00001D24                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001D29                 jmp     loc_1BE9
.text:00001D2E ; ---------------------------------------------------------------------------
.text:00001D2E
.text:00001D2E loc_1D2E:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+42j
.text:00001D2E                                         ; NArchive::NCab::CFolderOutStream::OpenFile(void)+1E2j ...
.text:00001D2E                 mov     eax, [ebp+var_10]
.text:00001D31                 mov     ecx, [eax+28h]
.text:00001D34                 push    ecx
.text:00001D35                 mov     edx, [ebp+var_10]
.text:00001D38                 mov     ecx, [edx+0Ch]
.text:00001D3B                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00001D40                 movzx   eax, byte ptr [eax]
.text:00001D43                 test    eax, eax
.text:00001D45                 jz      short loc_1D59
.text:00001D47                 mov     ecx, [ebp+var_10]
.text:00001D4A                 movzx   edx, byte ptr [ecx+30h]
.text:00001D4E                 neg     edx
.text:00001D50                 sbb     edx, edx
.text:00001D52                 neg     edx
.text:00001D54                 mov     [ebp+var_5C], edx
.text:00001D57                 jmp     short loc_1D60
.text:00001D59 ; ---------------------------------------------------------------------------
.text:00001D59
.text:00001D59 loc_1D59:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+34Dj
.text:00001D59                 mov     [ebp+var_5C], 2
.text:00001D60
.text:00001D60 loc_1D60:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+35Fj
.text:00001D60                 mov     eax, [ebp+var_5C]
.text:00001D63                 mov     [ebp+var_40], eax
.text:00001D66                 mov     ecx, [ebp+var_10]
.text:00001D69                 add     ecx, 2Ch ; ','
.text:00001D6C                 call    ??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator->(void)
.text:00001D71                 mov     [ebp+var_60], eax
.text:00001D74                 mov     esi, esp
.text:00001D76                 mov     ecx, [ebp+var_40]
.text:00001D79                 push    ecx
.text:00001D7A                 mov     ecx, [ebp+var_10]
.text:00001D7D                 add     ecx, 34h ; '4'
.text:00001D80                 call    ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&(void)
.text:00001D85                 push    eax
.text:00001D86                 mov     edx, [ebp+var_10]
.text:00001D89                 mov     eax, [edx+24h]
.text:00001D8C                 mov     ecx, [ebp+var_10]
.text:00001D8F                 add     eax, [ecx+28h]
.text:00001D92                 push    eax
.text:00001D93                 mov     edx, [ebp+var_60]
.text:00001D96                 push    edx
.text:00001D97                 mov     eax, [ebp+var_60]
.text:00001D9A                 mov     ecx, [eax]
.text:00001D9C                 mov     edx, [ecx+14h]
.text:00001D9F                 call    edx
.text:00001DA1                 cmp     esi, esp
.text:00001DA3                 call    __RTC_CheckEsp
.text:00001DA8                 mov     [ebp+var_44], eax
.text:00001DAB                 cmp     [ebp+var_44], 0
.text:00001DAF                 jz      short loc_1DB6
.text:00001DB1                 mov     eax, [ebp+var_44]
.text:00001DB4                 jmp     short loc_1E03
.text:00001DB6 ; ---------------------------------------------------------------------------
.text:00001DB6
.text:00001DB6 loc_1DB6:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+3B7j
.text:00001DB6                 mov     ecx, [ebp+var_10]
.text:00001DB9                 add     ecx, 34h ; '4'
.text:00001DBC                 call    ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!(void)
.text:00001DC1                 movzx   eax, al
.text:00001DC4                 test    eax, eax
.text:00001DC6                 jz      short loc_1DDA
.text:00001DC8                 mov     ecx, [ebp+var_10]
.text:00001DCB                 movzx   edx, byte ptr [ecx+30h]
.text:00001DCF                 test    edx, edx
.text:00001DD1                 jnz     short loc_1DDA
.text:00001DD3                 mov     [ebp+var_40], 2
.text:00001DDA
.text:00001DDA loc_1DDA:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+3CEj
.text:00001DDA                                         ; NArchive::NCab::CFolderOutStream::OpenFile(void)+3D9j
.text:00001DDA                 mov     ecx, [ebp+var_10]
.text:00001DDD                 add     ecx, 2Ch ; ','
.text:00001DE0                 call    ??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator->(void)
.text:00001DE5                 mov     [ebp+var_64], eax
.text:00001DE8                 mov     esi, esp
.text:00001DEA                 mov     eax, [ebp+var_40]
.text:00001DED                 push    eax
.text:00001DEE                 mov     ecx, [ebp+var_64]
.text:00001DF1                 push    ecx
.text:00001DF2                 mov     edx, [ebp+var_64]
.text:00001DF5                 mov     eax, [edx]
.text:00001DF7                 mov     ecx, [eax+18h]
.text:00001DFA                 call    ecx
.text:00001DFC                 cmp     esi, esp
.text:00001DFE                 call    __RTC_CheckEsp
.text:00001E03
.text:00001E03 loc_1E03:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+1CAj
.text:00001E03                                         ; NArchive::NCab::CFolderOutStream::OpenFile(void)+288j ...
.text:00001E03                 push    edx
.text:00001E04                 mov     ecx, ebp
.text:00001E06                 push    eax
.text:00001E07                 lea     edx, $LN30_0
.text:00001E0D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001E12                 pop     eax
.text:00001E13                 pop     edx
.text:00001E14                 mov     ecx, [ebp+var_C]
.text:00001E17                 mov     large fs:0, ecx
.text:00001E1E                 pop     ecx
.text:00001E1F                 pop     edi
.text:00001E20                 pop     esi
.text:00001E21                 add     esp, 64h
.text:00001E24                 cmp     ebp, esp
.text:00001E26                 call    __RTC_CheckEsp
.text:00001E2B                 mov     esp, ebp
.text:00001E2D                 pop     ebp
.text:00001E2E                 retn
.text:00001E2E ?OpenFile@CFolderOutStream@NCab@NArchive@@AAEJXZ endp
.text:00001E2E
.text:00001E2E ; ---------------------------------------------------------------------------
.text:00001E2F                 align 10h
.text:00001E30 $LN30_0         dd 1                    ; DATA XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+40Fo
.text:00001E34                 dd offset $LN29_0
.text:00001E38 $LN29_0         dd 0FFFFFFD0h, 4        ; DATA XREF: .text:00001E34o
.text:00001E40                 dd offset $LN27_0       ; "stream"
.text:00001E44 $LN27_0         db 'stream',0           ; DATA XREF: .text:00001E40o
.text:00001E4B                 db 0Dh dup(0CCh)
.text:00001E58
.text:00001E58 ; =============== S U B R O U T I N E =======================================
.text:00001E58
.text:00001E58 ; Attributes: bp-based frame
.text:00001E58
.text:00001E58 ; __int32 __thiscall NArchive::NCab::CFolderOutStream::WriteEmptyFiles(NArchive::NCab::CFolderOutStream *__hidden this)
.text:00001E58                 public ?WriteEmptyFiles@CFolderOutStream@NCab@NArchive@@QAEJXZ
.text:00001E58 ?WriteEmptyFiles@CFolderOutStream@NCab@NArchive@@QAEJXZ proc near
.text:00001E58                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+523p
.text:00001E58                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1C1Ap
.text:00001E58
.text:00001E58 var_24          = dword ptr -24h
.text:00001E58 var_20          = dword ptr -20h
.text:00001E58 var_1C          = dword ptr -1Ch
.text:00001E58 var_18          = dword ptr -18h
.text:00001E58 var_14          = dword ptr -14h
.text:00001E58 var_10          = dword ptr -10h
.text:00001E58 var_C           = dword ptr -0Ch
.text:00001E58 var_8           = dword ptr -8
.text:00001E58 var_4           = dword ptr -4
.text:00001E58
.text:00001E58                 push    ebp
.text:00001E59                 mov     ebp, esp
.text:00001E5B                 sub     esp, 24h
.text:00001E5E                 push    esi
.text:00001E5F                 mov     eax, 0CCCCCCCCh
.text:00001E64                 mov     [ebp+var_24], eax
.text:00001E67                 mov     [ebp+var_20], eax
.text:00001E6A                 mov     [ebp+var_1C], eax
.text:00001E6D                 mov     [ebp+var_18], eax
.text:00001E70                 mov     [ebp+var_14], eax
.text:00001E73                 mov     [ebp+var_10], eax
.text:00001E76                 mov     [ebp+var_C], eax
.text:00001E79                 mov     [ebp+var_8], eax
.text:00001E7C                 mov     [ebp+var_4], eax
.text:00001E7F                 mov     [ebp+var_4], ecx
.text:00001E82                 mov     eax, [ebp+var_4]
.text:00001E85                 movzx   ecx, byte ptr [eax+39h]
.text:00001E89                 test    ecx, ecx
.text:00001E8B                 jz      short loc_1E94
.text:00001E8D                 xor     eax, eax
.text:00001E8F                 jmp     loc_1F7C
.text:00001E94 ; ---------------------------------------------------------------------------
.text:00001E94
.text:00001E94 loc_1E94:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::WriteEmptyFiles(void)+33j
.text:00001E94                 jmp     short loc_1EA5
.text:00001E96 ; ---------------------------------------------------------------------------
.text:00001E96
.text:00001E96 loc_1E96:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::WriteEmptyFiles(void):loc_1F75j
.text:00001E96                 mov     edx, [ebp+var_4]
.text:00001E99                 mov     eax, [edx+28h]
.text:00001E9C                 add     eax, 1
.text:00001E9F                 mov     ecx, [ebp+var_4]
.text:00001EA2                 mov     [ecx+28h], eax
.text:00001EA5
.text:00001EA5 loc_1EA5:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::WriteEmptyFiles(void):loc_1E94j
.text:00001EA5                 mov     edx, [ebp+var_4]
.text:00001EA8                 mov     ecx, [edx+0Ch]
.text:00001EAB                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:00001EB0                 mov     ecx, [ebp+var_4]
.text:00001EB3                 cmp     [ecx+28h], eax
.text:00001EB6                 jnb     loc_1F7A
.text:00001EBC                 mov     edx, [ebp+var_4]
.text:00001EBF                 mov     eax, [edx+24h]
.text:00001EC2                 mov     ecx, [ebp+var_4]
.text:00001EC5                 add     eax, [ecx+28h]
.text:00001EC8                 push    eax
.text:00001EC9                 mov     edx, [ebp+var_4]
.text:00001ECC                 mov     ecx, [edx+8]
.text:00001ECF                 add     ecx, 0Ch
.text:00001ED2                 call    ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QBEABUCMvItem@NCab@NArchive@@I@Z ; CRecordVector<NArchive::NCab::CMvItem>::operator[](uint)
.text:00001ED7                 mov     [ebp+var_8], eax
.text:00001EDA                 mov     eax, [ebp+var_8]
.text:00001EDD                 mov     ecx, [eax+4]
.text:00001EE0                 push    ecx
.text:00001EE1                 mov     edx, [ebp+var_8]
.text:00001EE4                 mov     eax, [edx]
.text:00001EE6                 push    eax
.text:00001EE7                 mov     ecx, [ebp+var_4]
.text:00001EEA                 mov     ecx, [ecx+8]
.text:00001EED                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEABUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:00001EF2                 add     eax, 0Ch
.text:00001EF5                 mov     ecx, eax
.text:00001EF7                 call    ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QBEABUCItem@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CItem>::operator[](uint)
.text:00001EFC                 mov     [ebp+var_C], eax
.text:00001EFF                 mov     edx, [ebp+var_C]
.text:00001F02                 mov     eax, [edx+10h]
.text:00001F05                 xor     ecx, ecx
.text:00001F07                 mov     [ebp+var_14], eax
.text:00001F0A                 mov     [ebp+var_10], ecx
.text:00001F0D                 mov     edx, [ebp+var_14]
.text:00001F10                 or      edx, [ebp+var_10]
.text:00001F13                 jz      short loc_1F19
.text:00001F15                 xor     eax, eax
.text:00001F17                 jmp     short loc_1F7C
.text:00001F19 ; ---------------------------------------------------------------------------
.text:00001F19
.text:00001F19 loc_1F19:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::WriteEmptyFiles(void)+BBj
.text:00001F19                 mov     ecx, [ebp+var_4] ; this
.text:00001F1C                 call    ?OpenFile@CFolderOutStream@NCab@NArchive@@AAEJXZ ; NArchive::NCab::CFolderOutStream::OpenFile(void)
.text:00001F21                 mov     [ebp+var_18], eax
.text:00001F24                 mov     ecx, [ebp+var_4]
.text:00001F27                 add     ecx, 34h ; '4'
.text:00001F2A                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:00001F2F                 mov     eax, [ebp+var_18]
.text:00001F32                 mov     [ebp+var_1C], eax
.text:00001F35                 cmp     [ebp+var_1C], 0
.text:00001F39                 jz      short loc_1F40
.text:00001F3B                 mov     eax, [ebp+var_1C]
.text:00001F3E                 jmp     short loc_1F7C
.text:00001F40 ; ---------------------------------------------------------------------------
.text:00001F40
.text:00001F40 loc_1F40:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::WriteEmptyFiles(void)+E1j
.text:00001F40                 mov     ecx, [ebp+var_4]
.text:00001F43                 add     ecx, 2Ch ; ','
.text:00001F46                 call    ??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator->(void)
.text:00001F4B                 mov     [ebp+var_24], eax
.text:00001F4E                 mov     esi, esp
.text:00001F50                 push    0
.text:00001F52                 mov     ecx, [ebp+var_24]
.text:00001F55                 push    ecx
.text:00001F56                 mov     edx, [ebp+var_24]
.text:00001F59                 mov     eax, [edx]
.text:00001F5B                 mov     ecx, [eax+1Ch]
.text:00001F5E                 call    ecx
.text:00001F60                 cmp     esi, esp
.text:00001F62                 call    __RTC_CheckEsp
.text:00001F67                 mov     [ebp+var_20], eax
.text:00001F6A                 cmp     [ebp+var_20], 0
.text:00001F6E                 jz      short loc_1F75
.text:00001F70                 mov     eax, [ebp+var_20]
.text:00001F73                 jmp     short loc_1F7C
.text:00001F75 ; ---------------------------------------------------------------------------
.text:00001F75
.text:00001F75 loc_1F75:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::WriteEmptyFiles(void)+116j
.text:00001F75                 jmp     loc_1E96
.text:00001F7A ; ---------------------------------------------------------------------------
.text:00001F7A
.text:00001F7A loc_1F7A:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::WriteEmptyFiles(void)+5Ej
.text:00001F7A                 xor     eax, eax
.text:00001F7C
.text:00001F7C loc_1F7C:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::WriteEmptyFiles(void)+37j
.text:00001F7C                                         ; NArchive::NCab::CFolderOutStream::WriteEmptyFiles(void)+BFj ...
.text:00001F7C                 pop     esi
.text:00001F7D                 add     esp, 24h
.text:00001F80                 cmp     ebp, esp
.text:00001F82                 call    __RTC_CheckEsp
.text:00001F87                 mov     esp, ebp
.text:00001F89                 pop     ebp
.text:00001F8A                 retn
.text:00001F8A ?WriteEmptyFiles@CFolderOutStream@NCab@NArchive@@QAEJXZ endp
.text:00001F8A
.text:00001F8A ; ---------------------------------------------------------------------------
.text:00001F8B                 db 0Dh dup(0CCh)
.text:00001F98
.text:00001F98 ; =============== S U B R O U T I N E =======================================
.text:00001F98
.text:00001F98 ; Attributes: bp-based frame
.text:00001F98
.text:00001F98 ; __int32 __thiscall NArchive::NCab::CFolderOutStream::Write2(NArchive::NCab::CFolderOutStream *this, const void *Src, unsigned int, unsigned int *, bool)
.text:00001F98                 public ?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z
.text:00001F98 ?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z proc near
.text:00001F98                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::Write(void const *,uint,uint *)+14p
.text:00001F98                                         ; NArchive::NCab::CFolderOutStream::FlushCorrupted(void)+F1p
.text:00001F98
.text:00001F98 var_C8          = dword ptr -0C8h
.text:00001F98 var_C4          = dword ptr -0C4h
.text:00001F98 var_C0          = dword ptr -0C0h
.text:00001F98 var_BC          = dword ptr -0BCh
.text:00001F98 var_B8          = dword ptr -0B8h
.text:00001F98 var_B4          = dword ptr -0B4h
.text:00001F98 var_B0          = dword ptr -0B0h
.text:00001F98 var_AC          = dword ptr -0ACh
.text:00001F98 var_A8          = dword ptr -0A8h
.text:00001F98 var_A4          = dword ptr -0A4h
.text:00001F98 var_A0          = dword ptr -0A0h
.text:00001F98 var_9C          = dword ptr -9Ch
.text:00001F98 var_98          = dword ptr -98h
.text:00001F98 var_94          = dword ptr -94h
.text:00001F98 var_90          = dword ptr -90h
.text:00001F98 var_8C          = dword ptr -8Ch
.text:00001F98 var_88          = dword ptr -88h
.text:00001F98 var_84          = dword ptr -84h
.text:00001F98 var_80          = dword ptr -80h
.text:00001F98 var_7C          = dword ptr -7Ch
.text:00001F98 var_78          = dword ptr -78h
.text:00001F98 var_74          = dword ptr -74h
.text:00001F98 var_70          = dword ptr -70h
.text:00001F98 var_6C          = dword ptr -6Ch
.text:00001F98 var_68          = dword ptr -68h
.text:00001F98 var_64          = dword ptr -64h
.text:00001F98 var_60          = dword ptr -60h
.text:00001F98 var_5C          = dword ptr -5Ch
.text:00001F98 var_54          = dword ptr -54h
.text:00001F98 var_50          = dword ptr -50h
.text:00001F98 var_4C          = dword ptr -4Ch
.text:00001F98 var_48          = dword ptr -48h
.text:00001F98 var_44          = dword ptr -44h
.text:00001F98 var_40          = dword ptr -40h
.text:00001F98 var_3C          = dword ptr -3Ch
.text:00001F98 var_38          = dword ptr -38h
.text:00001F98 var_34          = dword ptr -34h
.text:00001F98 var_30          = dword ptr -30h
.text:00001F98 var_28          = dword ptr -28h
.text:00001F98 var_20          = dword ptr -20h
.text:00001F98 Size            = dword ptr -1Ch
.text:00001F98 var_18          = dword ptr -18h
.text:00001F98 var_14          = dword ptr -14h
.text:00001F98 var_10          = dword ptr -10h
.text:00001F98 var_C           = dword ptr -0Ch
.text:00001F98 var_4           = dword ptr -4
.text:00001F98 Src             = dword ptr  8
.text:00001F98 arg_4           = dword ptr  0Ch
.text:00001F98 arg_8           = dword ptr  10h
.text:00001F98 arg_C           = byte ptr  14h
.text:00001F98
.text:00001F98 ; FUNCTION CHUNK AT .text:000024F4 SIZE 00000032 BYTES
.text:00001F98
.text:00001F98                 push    ebp
.text:00001F99                 mov     ebp, esp
.text:00001F9B                 push    0FFFFFFFFh
.text:00001F9D                 push    offset __ehhandler$?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z
.text:00001FA2                 mov     eax, large fs:0
.text:00001FA8                 push    eax
.text:00001FA9                 push    ecx
.text:00001FAA                 sub     esp, 0B8h
.text:00001FB0                 push    ebx
.text:00001FB1                 push    esi
.text:00001FB2                 push    edi
.text:00001FB3                 push    ecx
.text:00001FB4                 lea     edi, [ebp+var_C8]
.text:00001FBA                 mov     ecx, 2Eh ; '.'
.text:00001FBF                 mov     eax, 0CCCCCCCCh
.text:00001FC4                 rep stosd
.text:00001FC6                 pop     ecx
.text:00001FC7                 mov     eax, dword ptr ds:___security_cookie
.text:00001FCC                 xor     eax, ebp
.text:00001FCE                 push    eax
.text:00001FCF                 lea     eax, [ebp+var_C]
.text:00001FD2                 mov     large fs:0, eax
.text:00001FD8                 mov     [ebp+var_10], esp
.text:00001FDB                 mov     [ebp+var_14], ecx
.text:00001FDE                 mov     [ebp+var_4], 0
.text:00001FE5                 mov     [ebp+var_18], 0
.text:00001FEC                 cmp     [ebp+arg_8], 0
.text:00001FF0                 jz      short loc_1FFB
.text:00001FF2                 mov     eax, [ebp+arg_8]
.text:00001FF5                 mov     dword ptr [eax], 0
.text:00001FFB
.text:00001FFB loc_1FFB:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+58j
.text:00001FFB                                         ; NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool):loc_24B3j
.text:00001FFB                 cmp     [ebp+arg_4], 0
.text:00001FFF                 jz      loc_24B8
.text:00002005                 mov     ecx, [ebp+var_14]
.text:00002008                 movzx   edx, byte ptr [ecx+39h]
.text:0000200C                 test    edx, edx
.text:0000200E                 jz      loc_22AB
.text:00002014                 mov     eax, [ebp+arg_4]
.text:00002017                 push    eax
.text:00002018                 mov     ecx, [ebp+var_14]
.text:0000201B                 mov     edx, [ecx+3Ch]
.text:0000201E                 push    edx
.text:0000201F                 call    ??$MyMin@I@@YGIII@Z ; MyMin<uint>(uint,uint)
.text:00002024                 mov     [ebp+var_5C], eax
.text:00002027                 mov     eax, [ebp+var_5C]
.text:0000202A                 mov     [ebp+Size], eax
.text:0000202D                 mov     [ebp+var_20], 0
.text:00002034                 cmp     [ebp+Size], 0
.text:00002038                 jz      loc_20EE
.text:0000203E                 movzx   ecx, [ebp+arg_C]
.text:00002042                 test    ecx, ecx
.text:00002044                 jnz     short loc_204D
.text:00002046                 mov     edx, [ebp+var_14]
.text:00002049                 mov     byte ptr [edx+38h], 0
.text:0000204D
.text:0000204D loc_204D:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+ACj
.text:0000204D                 mov     ecx, [ebp+var_14]
.text:00002050                 add     ecx, 34h ; '4'
.text:00002053                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00002058                 mov     [ebp+var_60], eax
.text:0000205B                 cmp     [ebp+var_60], 0
.text:0000205F                 jz      short loc_20AE
.text:00002061                 mov     [ebp+var_28], 0
.text:00002068                 mov     ecx, [ebp+var_14]
.text:0000206B                 add     ecx, 34h ; '4'
.text:0000206E                 call    ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->(void)
.text:00002073                 mov     [ebp+var_64], eax
.text:00002076                 mov     eax, [ebp+var_64]
.text:00002079                 mov     [ebp+var_68], eax
.text:0000207C                 mov     esi, esp
.text:0000207E                 lea     ecx, [ebp+var_28]
.text:00002081                 push    ecx
.text:00002082                 mov     edx, [ebp+Size]
.text:00002085                 push    edx
.text:00002086                 mov     eax, [ebp+Src]
.text:00002089                 push    eax
.text:0000208A                 mov     ecx, [ebp+var_68]
.text:0000208D                 push    ecx
.text:0000208E                 mov     edx, [ebp+var_68]
.text:00002091                 mov     eax, [edx]
.text:00002093                 mov     ecx, [eax+0Ch]
.text:00002096                 call    ecx
.text:00002098                 cmp     esi, esp
.text:0000209A                 call    __RTC_CheckEsp
.text:0000209F                 mov     [ebp+var_6C], eax
.text:000020A2                 mov     edx, [ebp+var_6C]
.text:000020A5                 mov     [ebp+var_20], edx
.text:000020A8                 mov     eax, [ebp+var_28]
.text:000020AB                 mov     [ebp+Size], eax
.text:000020AE
.text:000020AE loc_20AE:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+C7j
.text:000020AE                 mov     ecx, [ebp+var_14]
.text:000020B1                 movzx   edx, byte ptr [ecx+1Ch]
.text:000020B5                 test    edx, edx
.text:000020B7                 jz      short loc_20EE
.text:000020B9                 mov     eax, [ebp+var_14]
.text:000020BC                 cmp     dword ptr [eax+10h], 0
.text:000020C0                 jz      short loc_20EE
.text:000020C2                 mov     ecx, [ebp+Size]
.text:000020C5                 push    ecx             ; Size
.text:000020C6                 mov     edx, [ebp+Src]
.text:000020C9                 push    edx             ; Src
.text:000020CA                 mov     eax, [ebp+var_14]
.text:000020CD                 mov     ecx, [eax+20h]
.text:000020D0                 xor     edx, edx
.text:000020D2                 mov     eax, [ebp+var_14]
.text:000020D5                 mov     esi, [eax+48h]
.text:000020D8                 sub     esi, ecx
.text:000020DA                 mov     ecx, [eax+4Ch]
.text:000020DD                 sbb     ecx, edx
.text:000020DF                 mov     edx, [ebp+var_14]
.text:000020E2                 add     esi, [edx+10h]
.text:000020E5                 push    esi             ; Dst
.text:000020E6                 call    _memcpy
.text:000020EB                 add     esp, 0Ch
.text:000020EE
.text:000020EE loc_20EE:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+A0j
.text:000020EE                                         ; NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+11Fj ...
.text:000020EE                 mov     eax, [ebp+var_18]
.text:000020F1                 add     eax, [ebp+Size]
.text:000020F4                 mov     [ebp+var_18], eax
.text:000020F7                 cmp     [ebp+arg_8], 0
.text:000020FB                 jz      short loc_2105
.text:000020FD                 mov     ecx, [ebp+arg_8]
.text:00002100                 mov     edx, [ebp+var_18]
.text:00002103                 mov     [ecx], edx
.text:00002105
.text:00002105 loc_2105:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+163j
.text:00002105                 mov     eax, [ebp+Src]
.text:00002108                 add     eax, [ebp+Size]
.text:0000210B                 mov     [ebp+Src], eax
.text:0000210E                 mov     ecx, [ebp+arg_4]
.text:00002111                 sub     ecx, [ebp+Size]
.text:00002114                 mov     [ebp+arg_4], ecx
.text:00002117                 mov     edx, [ebp+var_14]
.text:0000211A                 mov     eax, [edx+3Ch]
.text:0000211D                 sub     eax, [ebp+Size]
.text:00002120                 mov     ecx, [ebp+var_14]
.text:00002123                 mov     [ecx+3Ch], eax
.text:00002126                 mov     edx, [ebp+Size]
.text:00002129                 xor     eax, eax
.text:0000212B                 mov     ecx, [ebp+var_14]
.text:0000212E                 add     edx, [ecx+48h]
.text:00002131                 adc     eax, [ecx+4Ch]
.text:00002134                 mov     ecx, [ebp+var_14]
.text:00002137                 mov     [ecx+48h], edx
.text:0000213A                 mov     [ecx+4Ch], eax
.text:0000213D                 cmp     [ebp+var_20], 0
.text:00002141                 jz      short loc_214B
.text:00002143                 mov     eax, [ebp+var_20]
.text:00002146                 jmp     loc_24F4
.text:0000214B ; ---------------------------------------------------------------------------
.text:0000214B
.text:0000214B loc_214B:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+1A9j
.text:0000214B                 mov     edx, [ebp+var_14]
.text:0000214E                 cmp     dword ptr [edx+3Ch], 0
.text:00002152                 jnz     loc_229B
.text:00002158                 mov     ecx, [ebp+var_14] ; this
.text:0000215B                 call    ?CloseFile@CFolderOutStream@NCab@NArchive@@AAEJXZ ; NArchive::NCab::CFolderOutStream::CloseFile(void)
.text:00002160                 mov     [ebp+var_70], eax
.text:00002163                 mov     eax, [ebp+var_70]
.text:00002166                 mov     [ebp+var_30], eax
.text:00002169                 cmp     [ebp+var_30], 0
.text:0000216D                 jz      short loc_2177
.text:0000216F                 mov     eax, [ebp+var_30]
.text:00002172                 jmp     loc_24F4
.text:00002177 ; ---------------------------------------------------------------------------
.text:00002177
.text:00002177 loc_2177:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+1D5j
.text:00002177                                         ; NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool):loc_228Fj
.text:00002177                 mov     ecx, [ebp+var_14]
.text:0000217A                 cmp     dword ptr [ecx+18h], 0
.text:0000217E                 jz      loc_2294
.text:00002184                 mov     ecx, [ebp+var_14] ; this
.text:00002187                 call    ?OpenFile@CFolderOutStream@NCab@NArchive@@AAEJXZ ; NArchive::NCab::CFolderOutStream::OpenFile(void)
.text:0000218C                 mov     [ebp+var_74], eax
.text:0000218F                 mov     edx, [ebp+var_74]
.text:00002192                 mov     [ebp+var_34], edx
.text:00002195                 mov     eax, [ebp+var_14]
.text:00002198                 mov     byte ptr [eax+39h], 1
.text:0000219C                 mov     ecx, [ebp+var_14]
.text:0000219F                 mov     edx, [ecx+28h]
.text:000021A2                 add     edx, 1
.text:000021A5                 mov     eax, [ebp+var_14]
.text:000021A8                 mov     [eax+28h], edx
.text:000021AB                 cmp     [ebp+var_34], 0
.text:000021AF                 jnz     short loc_2205
.text:000021B1                 mov     ecx, [ebp+var_14]
.text:000021B4                 add     ecx, 34h ; '4'
.text:000021B7                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:000021BC                 mov     [ebp+var_78], eax
.text:000021BF                 cmp     [ebp+var_78], 0
.text:000021C3                 jz      short loc_2205
.text:000021C5                 mov     ecx, [ebp+var_14]
.text:000021C8                 cmp     dword ptr [ecx+10h], 0
.text:000021CC                 jz      short loc_2205
.text:000021CE                 mov     ecx, [ebp+var_14]
.text:000021D1                 add     ecx, 34h ; '4'
.text:000021D4                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:000021D9                 mov     [ebp+var_7C], eax
.text:000021DC                 mov     edx, [ebp+var_14]
.text:000021DF                 mov     eax, [edx+20h]
.text:000021E2                 xor     ecx, ecx
.text:000021E4                 mov     edx, [ebp+var_14]
.text:000021E7                 mov     esi, [edx+48h]
.text:000021EA                 sub     esi, eax
.text:000021EC                 mov     eax, [edx+4Ch]
.text:000021EF                 sbb     eax, ecx
.text:000021F1                 push    esi             ; unsigned int
.text:000021F2                 mov     ecx, [ebp+var_14]
.text:000021F5                 mov     edx, [ecx+10h]
.text:000021F8                 push    edx             ; void *
.text:000021F9                 mov     eax, [ebp+var_7C]
.text:000021FC                 push    eax             ; struct ISequentialOutStream *
.text:000021FD                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:00002202                 mov     [ebp+var_34], eax
.text:00002205
.text:00002205 loc_2205:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+217j
.text:00002205                                         ; NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+22Bj ...
.text:00002205                 mov     ecx, [ebp+var_14]
.text:00002208                 cmp     dword ptr [ecx+10h], 0
.text:0000220C                 jnz     short loc_2256
.text:0000220E                 mov     edx, [ebp+var_14]
.text:00002211                 movzx   eax, byte ptr [edx+1Ch]
.text:00002215                 test    eax, eax
.text:00002217                 jz      short loc_2256
.text:00002219                 mov     ecx, [ebp+var_14]
.text:0000221C                 add     ecx, 34h ; '4'
.text:0000221F                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00002224                 mov     [ebp+var_80], eax
.text:00002227                 cmp     [ebp+var_80], 0
.text:0000222B                 jz      short loc_2256
.text:0000222D                 push    1               ; int
.text:0000222F                 mov     ecx, [ebp+var_14] ; this
.text:00002232                 call    ?CloseFileWithResOp@CFolderOutStream@NCab@NArchive@@AAEJH@Z ; NArchive::NCab::CFolderOutStream::CloseFileWithResOp(int)
.text:00002237                 mov     [ebp+var_84], eax
.text:0000223D                 mov     ecx, [ebp+var_84]
.text:00002243                 mov     [ebp+var_38], ecx
.text:00002246                 cmp     [ebp+var_38], 0
.text:0000224A                 jz      short loc_2254
.text:0000224C                 mov     eax, [ebp+var_38]
.text:0000224F                 jmp     loc_24F4
.text:00002254 ; ---------------------------------------------------------------------------
.text:00002254
.text:00002254 loc_2254:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+2B2j
.text:00002254                 jmp     short loc_227B
.text:00002256 ; ---------------------------------------------------------------------------
.text:00002256
.text:00002256 loc_2256:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+274j
.text:00002256                                         ; NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+27Fj ...
.text:00002256                 mov     ecx, [ebp+var_14] ; this
.text:00002259                 call    ?CloseFile@CFolderOutStream@NCab@NArchive@@AAEJXZ ; NArchive::NCab::CFolderOutStream::CloseFile(void)
.text:0000225E                 mov     [ebp+var_88], eax
.text:00002264                 mov     edx, [ebp+var_88]
.text:0000226A                 mov     [ebp+var_3C], edx
.text:0000226D                 cmp     [ebp+var_3C], 0
.text:00002271                 jz      short loc_227B
.text:00002273                 mov     eax, [ebp+var_3C]
.text:00002276                 jmp     loc_24F4
.text:0000227B ; ---------------------------------------------------------------------------
.text:0000227B
.text:0000227B loc_227B:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool):loc_2254j
.text:0000227B                                         ; NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+2D9j
.text:0000227B                 mov     eax, [ebp+var_34]
.text:0000227E                 mov     [ebp+var_40], eax
.text:00002281                 cmp     [ebp+var_40], 0
.text:00002285                 jz      short loc_228F
.text:00002287                 mov     eax, [ebp+var_40]
.text:0000228A                 jmp     loc_24F4
.text:0000228F ; ---------------------------------------------------------------------------
.text:0000228F
.text:0000228F loc_228F:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+2EDj
.text:0000228F                 jmp     loc_2177
.text:00002294 ; ---------------------------------------------------------------------------
.text:00002294
.text:00002294 loc_2294:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+1E6j
.text:00002294                 mov     ecx, [ebp+var_14]
.text:00002297                 mov     byte ptr [ecx+1Ch], 0
.text:0000229B
.text:0000229B loc_229B:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+1BAj
.text:0000229B                 cmp     [ebp+var_18], 0
.text:0000229F                 jbe     short loc_22A6
.text:000022A1                 jmp     loc_24B8
.text:000022A6 ; ---------------------------------------------------------------------------
.text:000022A6
.text:000022A6 loc_22A6:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+307j
.text:000022A6                 jmp     loc_24B3
.text:000022AB ; ---------------------------------------------------------------------------
.text:000022AB
.text:000022AB loc_22AB:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+76j
.text:000022AB                 mov     edx, [ebp+var_14]
.text:000022AE                 mov     ecx, [edx+0Ch]
.text:000022B1                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:000022B6                 mov     [ebp+var_8C], eax
.text:000022BC                 mov     eax, [ebp+var_14]
.text:000022BF                 mov     ecx, [eax+28h]
.text:000022C2                 cmp     ecx, [ebp+var_8C]
.text:000022C8                 jb      short loc_22D4
.text:000022CA                 mov     eax, 80004005h
.text:000022CF                 jmp     loc_24F4
.text:000022D4 ; ---------------------------------------------------------------------------
.text:000022D4
.text:000022D4 loc_22D4:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+330j
.text:000022D4                 mov     edx, [ebp+var_14]
.text:000022D7                 mov     eax, [edx+24h]
.text:000022DA                 mov     ecx, [ebp+var_14]
.text:000022DD                 add     eax, [ecx+28h]
.text:000022E0                 push    eax
.text:000022E1                 mov     edx, [ebp+var_14]
.text:000022E4                 mov     ecx, [edx+8]
.text:000022E7                 add     ecx, 0Ch
.text:000022EA                 call    ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QBEABUCMvItem@NCab@NArchive@@I@Z ; CRecordVector<NArchive::NCab::CMvItem>::operator[](uint)
.text:000022EF                 mov     [ebp+var_90], eax
.text:000022F5                 mov     eax, [ebp+var_90]
.text:000022FB                 mov     [ebp+var_44], eax
.text:000022FE                 mov     ecx, [ebp+var_44]
.text:00002301                 mov     edx, [ecx]
.text:00002303                 push    edx
.text:00002304                 mov     eax, [ebp+var_14]
.text:00002307                 mov     ecx, [eax+8]
.text:0000230A                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEABUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:0000230F                 mov     [ebp+var_94], eax
.text:00002315                 mov     ecx, [ebp+var_44]
.text:00002318                 mov     edx, [ecx+4]
.text:0000231B                 push    edx
.text:0000231C                 mov     ecx, [ebp+var_94]
.text:00002322                 add     ecx, 0Ch
.text:00002325                 call    ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QBEABUCItem@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CItem>::operator[](uint)
.text:0000232A                 mov     [ebp+var_98], eax
.text:00002330                 mov     eax, [ebp+var_98]
.text:00002336                 mov     [ebp+var_48], eax
.text:00002339                 mov     ecx, [ebp+var_14]
.text:0000233C                 mov     edx, [ebp+var_48]
.text:0000233F                 mov     eax, [edx+10h]
.text:00002342                 mov     [ecx+3Ch], eax
.text:00002345                 mov     ecx, [ebp+var_48]
.text:00002348                 mov     edx, [ecx+0Ch]
.text:0000234B                 mov     [ebp+var_4C], edx
.text:0000234E                 mov     eax, [ebp+var_4C]
.text:00002351                 xor     ecx, ecx
.text:00002353                 mov     edx, [ebp+var_14]
.text:00002356                 mov     [ebp+var_A0], eax
.text:0000235C                 mov     [ebp+var_9C], ecx
.text:00002362                 mov     [ebp+var_A4], edx
.text:00002368                 mov     eax, [ebp+var_A4]
.text:0000236E                 mov     ecx, [ebp+var_9C]
.text:00002374                 cmp     ecx, [eax+4Ch]
.text:00002377                 ja      short loc_2396
.text:00002379                 jb      short loc_238C
.text:0000237B                 mov     edx, [ebp+var_A4]
.text:00002381                 mov     eax, [ebp+var_A0]
.text:00002387                 cmp     eax, [edx+48h]
.text:0000238A                 jnb     short loc_2396
.text:0000238C
.text:0000238C loc_238C:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+3E1j
.text:0000238C                 mov     eax, 80004005h
.text:00002391                 jmp     loc_24F4
.text:00002396 ; ---------------------------------------------------------------------------
.text:00002396
.text:00002396 loc_2396:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+3DFj
.text:00002396                                         ; NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+3F2j
.text:00002396                 mov     ecx, [ebp+var_4C]
.text:00002399                 xor     edx, edx
.text:0000239B                 mov     eax, [ebp+var_14]
.text:0000239E                 mov     [ebp+var_AC], ecx
.text:000023A4                 mov     [ebp+var_A8], edx
.text:000023AA                 mov     [ebp+var_B0], eax
.text:000023B0                 mov     ecx, [ebp+var_B0]
.text:000023B6                 mov     edx, [ebp+var_A8]
.text:000023BC                 cmp     edx, [ecx+4Ch]
.text:000023BF                 jb      short loc_2438
.text:000023C1                 ja      short loc_23D4
.text:000023C3                 mov     eax, [ebp+var_B0]
.text:000023C9                 mov     ecx, [ebp+var_AC]
.text:000023CF                 cmp     ecx, [eax+48h]
.text:000023D2                 jbe     short loc_2438
.text:000023D4
.text:000023D4 loc_23D4:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+429j
.text:000023D4                 mov     edx, [ebp+arg_4]
.text:000023D7                 push    edx
.text:000023D8                 mov     eax, [ebp+var_14]
.text:000023DB                 mov     ecx, [eax+48h]
.text:000023DE                 mov     edx, [ebp+var_4C]
.text:000023E1                 sub     edx, ecx
.text:000023E3                 push    edx
.text:000023E4                 call    ??$MyMin@I@@YGIII@Z ; MyMin<uint>(uint,uint)
.text:000023E9                 mov     [ebp+var_B4], eax
.text:000023EF                 mov     eax, [ebp+var_B4]
.text:000023F5                 mov     [ebp+var_50], eax
.text:000023F8                 mov     ecx, [ebp+var_18]
.text:000023FB                 add     ecx, [ebp+var_50]
.text:000023FE                 mov     [ebp+var_18], ecx
.text:00002401                 cmp     [ebp+arg_8], 0
.text:00002405                 jz      short loc_240F
.text:00002407                 mov     edx, [ebp+arg_8]
.text:0000240A                 mov     eax, [ebp+var_18]
.text:0000240D                 mov     [edx], eax
.text:0000240F
.text:0000240F loc_240F:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+46Dj
.text:0000240F                 mov     ecx, [ebp+Src]
.text:00002412                 add     ecx, [ebp+var_50]
.text:00002415                 mov     [ebp+Src], ecx
.text:00002418                 mov     edx, [ebp+arg_4]
.text:0000241B                 sub     edx, [ebp+var_50]
.text:0000241E                 mov     [ebp+arg_4], edx
.text:00002421                 mov     eax, [ebp+var_50]
.text:00002424                 xor     ecx, ecx
.text:00002426                 mov     edx, [ebp+var_14]
.text:00002429                 add     eax, [edx+48h]
.text:0000242C                 adc     ecx, [edx+4Ch]
.text:0000242F                 mov     edx, [ebp+var_14]
.text:00002432                 mov     [edx+48h], eax
.text:00002435                 mov     [edx+4Ch], ecx
.text:00002438
.text:00002438 loc_2438:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+427j
.text:00002438                                         ; NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+43Aj
.text:00002438                 mov     eax, [ebp+var_4C]
.text:0000243B                 xor     ecx, ecx
.text:0000243D                 mov     edx, [ebp+var_14]
.text:00002440                 mov     [ebp+var_BC], eax
.text:00002446                 mov     [ebp+var_B8], ecx
.text:0000244C                 mov     [ebp+var_C0], edx
.text:00002452                 mov     eax, [ebp+var_C0]
.text:00002458                 mov     ecx, [ebp+var_BC]
.text:0000245E                 cmp     ecx, [eax+48h]
.text:00002461                 jnz     short loc_24B3
.text:00002463                 mov     edx, [ebp+var_C0]
.text:00002469                 mov     eax, [ebp+var_B8]
.text:0000246F                 cmp     eax, [edx+4Ch]
.text:00002472                 jnz     short loc_24B3
.text:00002474                 mov     ecx, [ebp+var_14] ; this
.text:00002477                 call    ?OpenFile@CFolderOutStream@NCab@NArchive@@AAEJXZ ; NArchive::NCab::CFolderOutStream::OpenFile(void)
.text:0000247C                 mov     [ebp+var_C4], eax
.text:00002482                 mov     ecx, [ebp+var_C4]
.text:00002488                 mov     [ebp+var_54], ecx
.text:0000248B                 cmp     [ebp+var_54], 0
.text:0000248F                 jz      short loc_2496
.text:00002491                 mov     eax, [ebp+var_54]
.text:00002494                 jmp     short loc_24F4
.text:00002496 ; ---------------------------------------------------------------------------
.text:00002496
.text:00002496 loc_2496:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+4F7j
.text:00002496                 mov     edx, [ebp+var_14]
.text:00002499                 mov     byte ptr [edx+39h], 1
.text:0000249D                 mov     eax, [ebp+var_14]
.text:000024A0                 mov     ecx, [eax+28h]
.text:000024A3                 add     ecx, 1
.text:000024A6                 mov     edx, [ebp+var_14]
.text:000024A9                 mov     [edx+28h], ecx
.text:000024AC                 mov     eax, [ebp+var_14]
.text:000024AF                 mov     byte ptr [eax+38h], 1
.text:000024B3
.text:000024B3 loc_24B3:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool):loc_22A6j
.text:000024B3                                         ; NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+4C9j ...
.text:000024B3                 jmp     loc_1FFB
.text:000024B8 ; ---------------------------------------------------------------------------
.text:000024B8
.text:000024B8 loc_24B8:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+67j
.text:000024B8                                         ; NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+309j
.text:000024B8                 mov     ecx, [ebp+var_14] ; this
.text:000024BB                 call    ?WriteEmptyFiles@CFolderOutStream@NCab@NArchive@@QAEJXZ ; NArchive::NCab::CFolderOutStream::WriteEmptyFiles(void)
.text:000024C0                 mov     [ebp+var_C8], eax
.text:000024C6                 mov     eax, [ebp+var_C8]
.text:000024CC                 jmp     short loc_24F4
.text:000024CC ?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z endp
.text:000024CC
.text:000024CE
.text:000024CE ; =============== S U B R O U T I N E =======================================
.text:000024CE
.text:000024CE
.text:000024CE __catch$?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z$0 proc near
.text:000024CE                                         ; DATA XREF: .xdata$x:00004B90o
.text:000024CE                 mov     dword ptr [ebp-58h], 8007000Eh
.text:000024D5                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000024DC                 mov     eax, offset $LN35_0
.text:000024E1                 retn
.text:000024E1 __catch$?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z$0 endp
.text:000024E1
.text:000024E2 ; ---------------------------------------------------------------------------
.text:000024E2                 mov     eax, offset __tryend$?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z$1
.text:000024E7                 retn
.text:000024E8 ; ---------------------------------------------------------------------------
.text:000024E8
.text:000024E8 __tryend$?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z$1:
.text:000024E8                                         ; DATA XREF: .text:000024E2o
.text:000024E8                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000024EF                 jmp     short loc_24F4
.text:000024F1 ; ---------------------------------------------------------------------------
.text:000024F1
.text:000024F1 $LN35_0:                                ; DATA XREF: __catch$?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z$0+Eo
.text:000024F1                 mov     eax, [ebp-58h]
.text:000024F4 ; START OF FUNCTION CHUNK FOR ?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z
.text:000024F4
.text:000024F4 loc_24F4:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+1AEj
.text:000024F4                                         ; NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+1DAj ...
.text:000024F4                 push    edx
.text:000024F5                 mov     ecx, ebp
.text:000024F7                 push    eax
.text:000024F8                 lea     edx, $LN42
.text:000024FE                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002503                 pop     eax
.text:00002504                 pop     edx
.text:00002505                 mov     ecx, [ebp+var_C]
.text:00002508                 mov     large fs:0, ecx
.text:0000250F                 pop     ecx
.text:00002510                 pop     edi
.text:00002511                 pop     esi
.text:00002512                 pop     ebx
.text:00002513                 add     esp, 0C8h
.text:00002519                 cmp     ebp, esp
.text:0000251B                 call    __RTC_CheckEsp
.text:00002520                 mov     esp, ebp
.text:00002522                 pop     ebp
.text:00002523                 retn    10h
.text:00002523 ; END OF FUNCTION CHUNK FOR ?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z
.text:00002523 ; ---------------------------------------------------------------------------
.text:00002526                 align 4
.text:00002528 $LN42           dd 1                    ; DATA XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+560o
.text:0000252C                 dd offset $LN41
.text:00002530 $LN41           dd 0FFFFFFD8h, 4        ; DATA XREF: .text:0000252Co
.text:00002538                 dd offset $LN39_0       ; "processedSizeLocal"
.text:0000253C $LN39_0         db 'processedSizeLocal',0 ; DATA XREF: .text:00002538o
.text:0000254F                 db 9 dup(0CCh)
.text:00002558
.text:00002558 ; =============== S U B R O U T I N E =======================================
.text:00002558
.text:00002558 ; Attributes: bp-based frame
.text:00002558
.text:00002558 ; __int32 __stdcall NArchive::NCab::CFolderOutStream::Write(NArchive::NCab::CFolderOutStream *this, const void *Src, unsigned int, unsigned int *)
.text:00002558                 public ?Write@CFolderOutStream@NCab@NArchive@@UAGJPBXIPAI@Z
.text:00002558 ?Write@CFolderOutStream@NCab@NArchive@@UAGJPBXIPAI@Z proc near
.text:00002558                                         ; DATA XREF: .rdata:000072ACo
.text:00002558
.text:00002558 this            = dword ptr  8
.text:00002558 Src             = dword ptr  0Ch
.text:00002558 arg_8           = dword ptr  10h
.text:00002558 arg_C           = dword ptr  14h
.text:00002558
.text:00002558                 push    ebp
.text:00002559                 mov     ebp, esp
.text:0000255B                 push    1               ; bool
.text:0000255D                 mov     eax, [ebp+arg_C]
.text:00002560                 push    eax             ; unsigned int *
.text:00002561                 mov     ecx, [ebp+arg_8]
.text:00002564                 push    ecx             ; unsigned int
.text:00002565                 mov     edx, [ebp+Src]
.text:00002568                 push    edx             ; Src
.text:00002569                 mov     ecx, [ebp+this] ; this
.text:0000256C                 call    ?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z ; NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)
.text:00002571                 cmp     ebp, esp
.text:00002573                 call    __RTC_CheckEsp
.text:00002578                 pop     ebp
.text:00002579                 retn    10h
.text:00002579 ?Write@CFolderOutStream@NCab@NArchive@@UAGJPBXIPAI@Z endp
.text:00002579
.text:00002579 ; ---------------------------------------------------------------------------
.text:0000257C                 db 0Ch dup(0CCh)
.text:00002588
.text:00002588 ; =============== S U B R O U T I N E =======================================
.text:00002588
.text:00002588 ; Attributes: bp-based frame
.text:00002588
.text:00002588 ; __int32 __thiscall NArchive::NCab::CFolderOutStream::FlushCorrupted(NArchive::NCab::CFolderOutStream *__hidden this)
.text:00002588                 public ?FlushCorrupted@CFolderOutStream@NCab@NArchive@@QAEJXZ
.text:00002588 ?FlushCorrupted@CFolderOutStream@NCab@NArchive@@QAEJXZ proc near
.text:00002588                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1CF9p
.text:00002588
.text:00002588 var_438         = dword ptr -438h
.text:00002588 var_434         = dword ptr -434h
.text:00002588 var_42C         = dword ptr -42Ch
.text:00002588 var_424         = dword ptr -424h
.text:00002588 var_420         = dword ptr -420h
.text:00002588 var_41C         = dword ptr -41Ch
.text:00002588 var_418         = dword ptr -418h
.text:00002588 Src             = byte ptr -410h
.text:00002588 var_C           = dword ptr -0Ch
.text:00002588 var_8           = dword ptr -8
.text:00002588 var_4           = dword ptr -4
.text:00002588
.text:00002588                 push    ebp
.text:00002589                 mov     ebp, esp
.text:0000258B                 sub     esp, 438h
.text:00002591                 push    edi
.text:00002592                 push    ecx
.text:00002593                 lea     edi, [ebp+var_438]
.text:00002599                 mov     ecx, 10Eh
.text:0000259E                 mov     eax, 0CCCCCCCCh
.text:000025A3                 rep stosd
.text:000025A5                 pop     ecx
.text:000025A6                 mov     eax, dword ptr ds:___security_cookie
.text:000025AB                 xor     eax, ebp
.text:000025AD                 mov     [ebp+var_4], eax
.text:000025B0                 mov     [ebp+var_8], ecx
.text:000025B3                 mov     [ebp+var_C], 400h
.text:000025BA                 mov     [ebp+var_418], 0
.text:000025C4                 jmp     short loc_25D5
.text:000025C6 ; ---------------------------------------------------------------------------
.text:000025C6
.text:000025C6 loc_25C6:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::FlushCorrupted(void)+67j
.text:000025C6                 mov     eax, [ebp+var_418]
.text:000025CC                 add     eax, 1
.text:000025CF                 mov     [ebp+var_418], eax
.text:000025D5
.text:000025D5 loc_25D5:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::FlushCorrupted(void)+3Cj
.text:000025D5                 cmp     [ebp+var_418], 400h
.text:000025DF                 jnb     short loc_25F1
.text:000025E1                 mov     ecx, [ebp+var_418]
.text:000025E7                 mov     [ebp+ecx+Src], 0
.text:000025EF                 jmp     short loc_25C6
.text:000025F1 ; ---------------------------------------------------------------------------
.text:000025F1
.text:000025F1 loc_25F1:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::FlushCorrupted(void)+57j
.text:000025F1                                         ; NArchive::NCab::CFolderOutStream::FlushCorrupted(void):loc_2695j
.text:000025F1                 mov     ecx, [ebp+var_8] ; this
.text:000025F4                 call    ?GetRemain@CFolderOutStream@NCab@NArchive@@QBE_KXZ ; NArchive::NCab::CFolderOutStream::GetRemain(void)
.text:000025F9                 mov     [ebp+var_420], eax
.text:000025FF                 mov     [ebp+var_41C], edx
.text:00002605                 mov     edx, [ebp+var_420]
.text:0000260B                 or      edx, [ebp+var_41C]
.text:00002611                 jnz     short loc_261A
.text:00002613                 xor     eax, eax
.text:00002615                 jmp     loc_269A
.text:0000261A ; ---------------------------------------------------------------------------
.text:0000261A
.text:0000261A loc_261A:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::FlushCorrupted(void)+89j
.text:0000261A                 cmp     [ebp+var_41C], 0
.text:00002621                 ja      short loc_263F
.text:00002623                 jb      short loc_2631
.text:00002625                 cmp     [ebp+var_420], 400h
.text:0000262F                 jnb     short loc_263F
.text:00002631
.text:00002631 loc_2631:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::FlushCorrupted(void)+9Bj
.text:00002631                 mov     eax, [ebp+var_420]
.text:00002637                 mov     [ebp+var_438], eax
.text:0000263D                 jmp     short loc_2649
.text:0000263F ; ---------------------------------------------------------------------------
.text:0000263F
.text:0000263F loc_263F:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::FlushCorrupted(void)+99j
.text:0000263F                                         ; NArchive::NCab::CFolderOutStream::FlushCorrupted(void)+A7j
.text:0000263F                 mov     [ebp+var_438], 400h
.text:00002649
.text:00002649 loc_2649:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::FlushCorrupted(void)+B5j
.text:00002649                 mov     ecx, [ebp+var_438]
.text:0000264F                 mov     [ebp+var_424], ecx
.text:00002655                 mov     [ebp+var_42C], 0
.text:0000265F                 push    0               ; bool
.text:00002661                 lea     edx, [ebp+var_42C]
.text:00002667                 push    edx             ; unsigned int *
.text:00002668                 mov     eax, [ebp+var_424]
.text:0000266E                 push    eax             ; unsigned int
.text:0000266F                 lea     ecx, [ebp+Src]
.text:00002675                 push    ecx             ; Src
.text:00002676                 mov     ecx, [ebp+var_8] ; this
.text:00002679                 call    ?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z ; NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)
.text:0000267E                 mov     [ebp+var_434], eax
.text:00002684                 cmp     [ebp+var_434], 0
.text:0000268B                 jz      short loc_2695
.text:0000268D                 mov     eax, [ebp+var_434]
.text:00002693                 jmp     short loc_269A
.text:00002695 ; ---------------------------------------------------------------------------
.text:00002695
.text:00002695 loc_2695:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::FlushCorrupted(void)+103j
.text:00002695                 jmp     loc_25F1
.text:0000269A ; ---------------------------------------------------------------------------
.text:0000269A
.text:0000269A loc_269A:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::FlushCorrupted(void)+8Dj
.text:0000269A                                         ; NArchive::NCab::CFolderOutStream::FlushCorrupted(void)+10Bj
.text:0000269A                 push    edx
.text:0000269B                 mov     ecx, ebp
.text:0000269D                 push    eax
.text:0000269E                 lea     edx, $LN16_0
.text:000026A4                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000026A9                 pop     eax
.text:000026AA                 pop     edx
.text:000026AB                 pop     edi
.text:000026AC                 mov     ecx, [ebp+var_4]
.text:000026AF                 xor     ecx, ebp
.text:000026B1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000026B6                 add     esp, 438h
.text:000026BC                 cmp     ebp, esp
.text:000026BE                 call    __RTC_CheckEsp
.text:000026C3                 mov     esp, ebp
.text:000026C5                 pop     ebp
.text:000026C6                 retn
.text:000026C6 ?FlushCorrupted@CFolderOutStream@NCab@NArchive@@QAEJXZ endp
.text:000026C6
.text:000026C6 ; ---------------------------------------------------------------------------
.text:000026C7                 align 4
.text:000026C8 $LN16_0         dd 2                    ; DATA XREF: NArchive::NCab::CFolderOutStream::FlushCorrupted(void)+116o
.text:000026CC                 dd offset $LN15_0
.text:000026D0 $LN15_0         dd 0FFFFFBF0h, 400h     ; DATA XREF: .text:000026CCo
.text:000026D8                 dd offset $LN13_1       ; "buf"
.text:000026DC                 dd 0FFFFFBD4h, 4
.text:000026E4                 dd offset $LN14         ; "processedSizeLocal"
.text:000026E8 $LN14           db 'processedSizeLocal',0 ; DATA XREF: .text:000026E4o
.text:000026FB $LN13_1         db 'buf',0              ; DATA XREF: .text:000026D8o
.text:000026FF                 db 9 dup(0CCh)
.text:00002708
.text:00002708 ; =============== S U B R O U T I N E =======================================
.text:00002708
.text:00002708 ; Attributes: bp-based frame
.text:00002708
.text:00002708 ; __int32 __thiscall NArchive::NCab::CFolderOutStream::Unsupported(NArchive::NCab::CFolderOutStream *__hidden this)
.text:00002708                 public ?Unsupported@CFolderOutStream@NCab@NArchive@@QAEJXZ
.text:00002708 ?Unsupported@CFolderOutStream@NCab@NArchive@@QAEJXZ proc near
.text:00002708                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+117Ep
.text:00002708
.text:00002708 var_10          = dword ptr -10h
.text:00002708 var_C           = dword ptr -0Ch
.text:00002708 var_8           = dword ptr -8
.text:00002708 var_4           = dword ptr -4
.text:00002708
.text:00002708                 push    ebp
.text:00002709                 mov     ebp, esp
.text:0000270B                 sub     esp, 10h
.text:0000270E                 push    esi
.text:0000270F                 mov     eax, 0CCCCCCCCh
.text:00002714                 mov     [ebp+var_10], eax
.text:00002717                 mov     [ebp+var_C], eax
.text:0000271A                 mov     [ebp+var_8], eax
.text:0000271D                 mov     [ebp+var_4], eax
.text:00002720                 mov     [ebp+var_4], ecx
.text:00002723
.text:00002723 loc_2723:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Unsupported(void)+99j
.text:00002723                 mov     eax, [ebp+var_4]
.text:00002726                 mov     ecx, [eax+0Ch]
.text:00002729                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:0000272E                 mov     ecx, [ebp+var_4]
.text:00002731                 cmp     [ecx+28h], eax
.text:00002734                 jnb     short loc_27A3
.text:00002736                 mov     ecx, [ebp+var_4] ; this
.text:00002739                 call    ?OpenFile@CFolderOutStream@NCab@NArchive@@AAEJXZ ; NArchive::NCab::CFolderOutStream::OpenFile(void)
.text:0000273E                 mov     [ebp+var_8], eax
.text:00002741                 cmp     [ebp+var_8], 1
.text:00002745                 jz      short loc_2752
.text:00002747                 cmp     [ebp+var_8], 0
.text:0000274B                 jz      short loc_2752
.text:0000274D                 mov     eax, [ebp+var_8]
.text:00002750                 jmp     short loc_27A5
.text:00002752 ; ---------------------------------------------------------------------------
.text:00002752
.text:00002752 loc_2752:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Unsupported(void)+3Dj
.text:00002752                                         ; NArchive::NCab::CFolderOutStream::Unsupported(void)+43j
.text:00002752                 mov     ecx, [ebp+var_4]
.text:00002755                 add     ecx, 34h ; '4'
.text:00002758                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:0000275D                 mov     ecx, [ebp+var_4]
.text:00002760                 add     ecx, 2Ch ; ','
.text:00002763                 call    ??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator->(void)
.text:00002768                 mov     [ebp+var_10], eax
.text:0000276B                 mov     esi, esp
.text:0000276D                 push    1
.text:0000276F                 mov     edx, [ebp+var_10]
.text:00002772                 push    edx
.text:00002773                 mov     eax, [ebp+var_10]
.text:00002776                 mov     ecx, [eax]
.text:00002778                 mov     edx, [ecx+1Ch]
.text:0000277B                 call    edx
.text:0000277D                 cmp     esi, esp
.text:0000277F                 call    __RTC_CheckEsp
.text:00002784                 mov     [ebp+var_C], eax
.text:00002787                 cmp     [ebp+var_C], 0
.text:0000278B                 jz      short loc_2792
.text:0000278D                 mov     eax, [ebp+var_C]
.text:00002790                 jmp     short loc_27A5
.text:00002792 ; ---------------------------------------------------------------------------
.text:00002792
.text:00002792 loc_2792:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Unsupported(void)+83j
.text:00002792                 mov     eax, [ebp+var_4]
.text:00002795                 mov     ecx, [eax+28h]
.text:00002798                 add     ecx, 1
.text:0000279B                 mov     edx, [ebp+var_4]
.text:0000279E                 mov     [edx+28h], ecx
.text:000027A1                 jmp     short loc_2723
.text:000027A3 ; ---------------------------------------------------------------------------
.text:000027A3
.text:000027A3 loc_27A3:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Unsupported(void)+2Cj
.text:000027A3                 xor     eax, eax
.text:000027A5
.text:000027A5 loc_27A5:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Unsupported(void)+48j
.text:000027A5                                         ; NArchive::NCab::CFolderOutStream::Unsupported(void)+88j
.text:000027A5                 pop     esi
.text:000027A6                 add     esp, 10h
.text:000027A9                 cmp     ebp, esp
.text:000027AB                 call    __RTC_CheckEsp
.text:000027B0                 mov     esp, ebp
.text:000027B2                 pop     ebp
.text:000027B3                 retn
.text:000027B3 ?Unsupported@CFolderOutStream@NCab@NArchive@@QAEJXZ endp
.text:000027B3
.text:000027B3 ; ---------------------------------------------------------------------------
.text:000027B4                 align 8
.text:000027B8
.text:000027B8 ; =============== S U B R O U T I N E =======================================
.text:000027B8
.text:000027B8 ; Attributes: bp-based frame
.text:000027B8
.text:000027B8 ; __int32 __cdecl NArchive::NCab::CHandler::Extract(NArchive::NCab::CHandler *this, const unsigned int *, unsigned int, int, struct IArchiveExtractCallback *)
.text:000027B8                 public ?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:000027B8 ?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z proc near
.text:000027B8
.text:000027B8 var_418         = dword ptr -418h
.text:000027B8 var_414         = dword ptr -414h
.text:000027B8 var_410         = dword ptr -410h
.text:000027B8 var_40C         = dword ptr -40Ch
.text:000027B8 var_408         = dword ptr -408h
.text:000027B8 var_404         = dword ptr -404h
.text:000027B8 var_400         = dword ptr -400h
.text:000027B8 var_3FC         = dword ptr -3FCh
.text:000027B8 var_3F8         = dword ptr -3F8h
.text:000027B8 var_3F4         = dword ptr -3F4h
.text:000027B8 var_3F0         = dword ptr -3F0h
.text:000027B8 var_3EC         = dword ptr -3ECh
.text:000027B8 var_3E8         = dword ptr -3E8h
.text:000027B8 var_3E4         = dword ptr -3E4h
.text:000027B8 var_3DE         = byte ptr -3DEh
.text:000027B8 var_3DD         = byte ptr -3DDh
.text:000027B8 var_3DC         = dword ptr -3DCh
.text:000027B8 var_3D8         = dword ptr -3D8h
.text:000027B8 var_3D4         = dword ptr -3D4h
.text:000027B8 var_3D0         = dword ptr -3D0h
.text:000027B8 var_3CC         = dword ptr -3CCh
.text:000027B8 var_3C8         = dword ptr -3C8h
.text:000027B8 var_3C4         = dword ptr -3C4h
.text:000027B8 var_3C0         = dword ptr -3C0h
.text:000027B8 var_3BC         = dword ptr -3BCh
.text:000027B8 var_3B8         = dword ptr -3B8h
.text:000027B8 var_3B4         = dword ptr -3B4h
.text:000027B8 var_3AD         = byte ptr -3ADh
.text:000027B8 var_3AC         = dword ptr -3ACh
.text:000027B8 var_3A8         = dword ptr -3A8h
.text:000027B8 var_3A4         = dword ptr -3A4h
.text:000027B8 var_3A0         = dword ptr -3A0h
.text:000027B8 var_39C         = dword ptr -39Ch
.text:000027B8 var_398         = dword ptr -398h
.text:000027B8 var_394         = dword ptr -394h
.text:000027B8 var_390         = dword ptr -390h
.text:000027B8 var_38C         = dword ptr -38Ch
.text:000027B8 var_388         = dword ptr -388h
.text:000027B8 var_384         = dword ptr -384h
.text:000027B8 var_380         = dword ptr -380h
.text:000027B8 var_37C         = dword ptr -37Ch
.text:000027B8 var_375         = byte ptr -375h
.text:000027B8 var_374         = dword ptr -374h
.text:000027B8 var_370         = dword ptr -370h
.text:000027B8 var_36C         = dword ptr -36Ch
.text:000027B8 var_368         = dword ptr -368h
.text:000027B8 var_364         = dword ptr -364h
.text:000027B8 var_360         = dword ptr -360h
.text:000027B8 var_35C         = dword ptr -35Ch
.text:000027B8 var_358         = dword ptr -358h
.text:000027B8 var_354         = dword ptr -354h
.text:000027B8 var_350         = dword ptr -350h
.text:000027B8 var_34C         = dword ptr -34Ch
.text:000027B8 var_348         = dword ptr -348h
.text:000027B8 var_341         = byte ptr -341h
.text:000027B8 var_340         = dword ptr -340h
.text:000027B8 var_33C         = dword ptr -33Ch
.text:000027B8 var_338         = dword ptr -338h
.text:000027B8 var_334         = dword ptr -334h
.text:000027B8 var_32D         = byte ptr -32Dh
.text:000027B8 var_32C         = dword ptr -32Ch
.text:000027B8 var_328         = dword ptr -328h
.text:000027B8 var_324         = dword ptr -324h
.text:000027B8 var_31D         = byte ptr -31Dh
.text:000027B8 var_31C         = dword ptr -31Ch
.text:000027B8 var_315         = byte ptr -315h
.text:000027B8 var_314         = dword ptr -314h
.text:000027B8 var_310         = dword ptr -310h
.text:000027B8 var_30C         = dword ptr -30Ch
.text:000027B8 var_308         = dword ptr -308h
.text:000027B8 var_304         = dword ptr -304h
.text:000027B8 var_300         = dword ptr -300h
.text:000027B8 var_2FC         = dword ptr -2FCh
.text:000027B8 var_2F8         = dword ptr -2F8h
.text:000027B8 var_2F4         = dword ptr -2F4h
.text:000027B8 var_2F0         = dword ptr -2F0h
.text:000027B8 var_2E9         = byte ptr -2E9h
.text:000027B8 var_2E8         = dword ptr -2E8h
.text:000027B8 var_2E4         = dword ptr -2E4h
.text:000027B8 var_2E0         = dword ptr -2E0h
.text:000027B8 var_2DC         = dword ptr -2DCh
.text:000027B8 var_2D8         = dword ptr -2D8h
.text:000027B8 var_2D4         = dword ptr -2D4h
.text:000027B8 var_2D0         = dword ptr -2D0h
.text:000027B8 var_2CC         = dword ptr -2CCh
.text:000027B8 var_2C8         = dword ptr -2C8h
.text:000027B8 var_2C4         = dword ptr -2C4h
.text:000027B8 var_2C0         = dword ptr -2C0h
.text:000027B8 var_2BC         = dword ptr -2BCh
.text:000027B8 var_2B8         = dword ptr -2B8h
.text:000027B8 var_2B4         = dword ptr -2B4h
.text:000027B8 var_2B0         = dword ptr -2B0h
.text:000027B8 var_2AC         = dword ptr -2ACh
.text:000027B8 var_2A8         = dword ptr -2A8h
.text:000027B8 var_2A4         = dword ptr -2A4h
.text:000027B8 var_29D         = byte ptr -29Dh
.text:000027B8 var_29C         = dword ptr -29Ch
.text:000027B8 var_298         = dword ptr -298h
.text:000027B8 var_294         = dword ptr -294h
.text:000027B8 var_290         = dword ptr -290h
.text:000027B8 var_28C         = dword ptr -28Ch
.text:000027B8 var_285         = byte ptr -285h
.text:000027B8 var_284         = dword ptr -284h
.text:000027B8 var_280         = dword ptr -280h
.text:000027B8 var_27C         = dword ptr -27Ch
.text:000027B8 var_278         = dword ptr -278h
.text:000027B8 var_274         = dword ptr -274h
.text:000027B8 var_270         = dword ptr -270h
.text:000027B8 var_26C         = dword ptr -26Ch
.text:000027B8 var_268         = dword ptr -268h
.text:000027B8 var_264         = dword ptr -264h
.text:000027B8 var_260         = dword ptr -260h
.text:000027B8 var_25C         = dword ptr -25Ch
.text:000027B8 var_258         = dword ptr -258h
.text:000027B8 var_254         = dword ptr -254h
.text:000027B8 var_250         = dword ptr -250h
.text:000027B8 var_24C         = dword ptr -24Ch
.text:000027B8 var_245         = byte ptr -245h
.text:000027B8 var_244         = dword ptr -244h
.text:000027B8 var_240         = dword ptr -240h
.text:000027B8 var_23C         = dword ptr -23Ch
.text:000027B8 var_238         = dword ptr -238h
.text:000027B8 var_234         = dword ptr -234h
.text:000027B8 var_22C         = dword ptr -22Ch
.text:000027B8 var_228         = dword ptr -228h
.text:000027B8 var_224         = dword ptr -224h
.text:000027B8 var_220         = dword ptr -220h
.text:000027B8 var_21C         = dword ptr -21Ch
.text:000027B8 var_218         = dword ptr -218h
.text:000027B8 var_214         = dword ptr -214h
.text:000027B8 var_210         = dword ptr -210h
.text:000027B8 var_20C         = dword ptr -20Ch
.text:000027B8 var_208         = dword ptr -208h
.text:000027B8 var_204         = dword ptr -204h
.text:000027B8 var_200         = dword ptr -200h
.text:000027B8 var_1FC         = dword ptr -1FCh
.text:000027B8 var_1F8         = dword ptr -1F8h
.text:000027B8 var_1F4         = dword ptr -1F4h
.text:000027B8 var_1F0         = dword ptr -1F0h
.text:000027B8 var_1EC         = dword ptr -1ECh
.text:000027B8 var_1E8         = dword ptr -1E8h
.text:000027B8 var_1E4         = dword ptr -1E4h
.text:000027B8 var_1E0         = dword ptr -1E0h
.text:000027B8 var_1DC         = dword ptr -1DCh
.text:000027B8 var_1D8         = dword ptr -1D8h
.text:000027B8 var_1D4         = dword ptr -1D4h
.text:000027B8 var_1D0         = dword ptr -1D0h
.text:000027B8 var_1CC         = dword ptr -1CCh
.text:000027B8 var_1C8         = dword ptr -1C8h
.text:000027B8 var_1C4         = dword ptr -1C4h
.text:000027B8 var_1C0         = dword ptr -1C0h
.text:000027B8 var_1BC         = dword ptr -1BCh
.text:000027B8 var_1B8         = dword ptr -1B8h
.text:000027B8 var_1B4         = dword ptr -1B4h
.text:000027B8 var_1B0         = dword ptr -1B0h
.text:000027B8 var_1AC         = dword ptr -1ACh
.text:000027B8 var_1A8         = dword ptr -1A8h
.text:000027B8 var_1A4         = dword ptr -1A4h
.text:000027B8 var_19C         = dword ptr -19Ch
.text:000027B8 var_198         = dword ptr -198h
.text:000027B8 var_190         = dword ptr -190h
.text:000027B8 var_18C         = dword ptr -18Ch
.text:000027B8 var_188         = dword ptr -188h
.text:000027B8 var_184         = dword ptr -184h
.text:000027B8 var_17C         = dword ptr -17Ch
.text:000027B8 var_170         = dword ptr -170h
.text:000027B8 var_168         = dword ptr -168h
.text:000027B8 var_164         = dword ptr -164h
.text:000027B8 var_160         = dword ptr -160h
.text:000027B8 var_15C         = dword ptr -15Ch
.text:000027B8 var_156         = byte ptr -156h
.text:000027B8 var_155         = byte ptr -155h
.text:000027B8 var_154         = dword ptr -154h
.text:000027B8 var_150         = dword ptr -150h
.text:000027B8 var_14C         = dword ptr -14Ch
.text:000027B8 var_148         = dword ptr -148h
.text:000027B8 var_144         = dword ptr -144h
.text:000027B8 var_140         = dword ptr -140h
.text:000027B8 var_138         = byte ptr -138h
.text:000027B8 var_130         = dword ptr -130h
.text:000027B8 var_12C         = dword ptr -12Ch
.text:000027B8 var_128         = dword ptr -128h
.text:000027B8 var_124         = dword ptr -124h
.text:000027B8 var_120         = dword ptr -120h
.text:000027B8 var_11C         = dword ptr -11Ch
.text:000027B8 var_118         = dword ptr -118h
.text:000027B8 var_114         = dword ptr -114h
.text:000027B8 var_110         = dword ptr -110h
.text:000027B8 var_10C         = dword ptr -10Ch
.text:000027B8 var_108         = dword ptr -108h
.text:000027B8 var_104         = dword ptr -104h
.text:000027B8 var_100         = dword ptr -100h
.text:000027B8 var_F8          = byte ptr -0F8h
.text:000027B8 var_F0          = dword ptr -0F0h
.text:000027B8 var_EC          = dword ptr -0ECh
.text:000027B8 var_E8          = dword ptr -0E8h
.text:000027B8 var_E4          = dword ptr -0E4h
.text:000027B8 var_E0          = dword ptr -0E0h
.text:000027B8 var_D8          = byte ptr -0D8h
.text:000027B8 var_D0          = dword ptr -0D0h
.text:000027B8 var_CC          = dword ptr -0CCh
.text:000027B8 var_C8          = dword ptr -0C8h
.text:000027B8 var_C4          = dword ptr -0C4h
.text:000027B8 var_C0          = dword ptr -0C0h
.text:000027B8 var_BC          = dword ptr -0BCh
.text:000027B8 var_B4          = byte ptr -0B4h
.text:000027B8 var_A0          = byte ptr -0A0h
.text:000027B8 var_98          = dword ptr -98h
.text:000027B8 var_90          = byte ptr -90h
.text:000027B8 var_88          = dword ptr -88h
.text:000027B8 var_80          = byte ptr -80h
.text:000027B8 var_78          = dword ptr -78h
.text:000027B8 var_70          = byte ptr -70h
.text:000027B8 var_68          = dword ptr -68h
.text:000027B8 var_60          = byte ptr -60h
.text:000027B8 var_58          = dword ptr -58h
.text:000027B8 var_50          = byte ptr -50h
.text:000027B8 var_48          = dword ptr -48h
.text:000027B8 var_44          = dword ptr -44h
.text:000027B8 var_40          = dword ptr -40h
.text:000027B8 var_3C          = dword ptr -3Ch
.text:000027B8 var_38          = dword ptr -38h
.text:000027B8 var_34          = dword ptr -34h
.text:000027B8 var_30          = dword ptr -30h
.text:000027B8 var_2C          = dword ptr -2Ch
.text:000027B8 var_28          = dword ptr -28h
.text:000027B8 var_24          = dword ptr -24h
.text:000027B8 var_20          = dword ptr -20h
.text:000027B8 var_1C          = dword ptr -1Ch
.text:000027B8 var_18          = dword ptr -18h
.text:000027B8 var_12          = byte ptr -12h
.text:000027B8 var_11          = byte ptr -11h
.text:000027B8 var_10          = dword ptr -10h
.text:000027B8 var_C           = dword ptr -0Ch
.text:000027B8 var_4           = dword ptr -4
.text:000027B8 this            = dword ptr  8
.text:000027B8 arg_4           = dword ptr  0Ch
.text:000027B8 arg_8           = dword ptr  10h
.text:000027B8 arg_C           = dword ptr  14h
.text:000027B8 arg_10          = dword ptr  18h
.text:000027B8
.text:000027B8 ; FUNCTION CHUNK AT .text:0000461F SIZE 00000032 BYTES
.text:000027B8
.text:000027B8                 push    ebp
.text:000027B9                 mov     ebp, esp
.text:000027BB                 push    0FFFFFFFFh
.text:000027BD                 push    offset __ehhandler$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:000027C2                 mov     eax, large fs:0
.text:000027C8                 push    eax
.text:000027C9                 push    ecx
.text:000027CA                 sub     esp, 408h
.text:000027D0                 push    ebx
.text:000027D1                 push    esi
.text:000027D2                 push    edi
.text:000027D3                 lea     edi, [ebp+var_418]
.text:000027D9                 mov     ecx, 102h
.text:000027DE                 mov     eax, 0CCCCCCCCh
.text:000027E3                 rep stosd
.text:000027E5                 mov     eax, dword ptr ds:___security_cookie
.text:000027EA                 xor     eax, ebp
.text:000027EC                 push    eax
.text:000027ED                 lea     eax, [ebp+var_C]
.text:000027F0                 mov     large fs:0, eax
.text:000027F6                 mov     [ebp+var_10], esp
.text:000027F9                 mov     [ebp+var_4], 0
.text:00002800                 xor     eax, eax
.text:00002802                 cmp     [ebp+arg_8], 0FFFFFFFFh
.text:00002806                 setz    al
.text:00002809                 mov     [ebp+var_11], al
.text:0000280C                 movzx   ecx, [ebp+var_11]
.text:00002810                 test    ecx, ecx
.text:00002812                 jz      short loc_282E
.text:00002814                 mov     ecx, [ebp+this]
.text:00002817                 add     ecx, 14h
.text:0000281A                 call    ?Size@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NCab::CMvItem>::Size(void)
.text:0000281F                 mov     [ebp+var_234], eax
.text:00002825                 mov     edx, [ebp+var_234]
.text:0000282B                 mov     [ebp+arg_8], edx
.text:0000282E
.text:0000282E loc_282E:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5Aj
.text:0000282E                 cmp     [ebp+arg_8], 0
.text:00002832                 jnz     short loc_283B
.text:00002834                 xor     eax, eax
.text:00002836                 jmp     loc_461F
.text:0000283B ; ---------------------------------------------------------------------------
.text:0000283B
.text:0000283B loc_283B:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+7Aj
.text:0000283B                 xor     eax, eax
.text:0000283D                 cmp     [ebp+arg_C], 0
.text:00002841                 setnz   al
.text:00002844                 mov     [ebp+var_12], al
.text:00002847                 mov     [ebp+var_1C], 0
.text:0000284E                 mov     [ebp+var_18], 0
.text:00002855                 mov     [ebp+var_24], 0FFFFFFFEh
.text:0000285C                 mov     [ebp+var_2C], 0
.text:00002863                 mov     [ebp+var_28], 0
.text:0000286A                 mov     [ebp+var_20], 0
.text:00002871                 jmp     short loc_287C
.text:00002873 ; ---------------------------------------------------------------------------
.text:00002873
.text:00002873 loc_2873:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+16Dj
.text:00002873                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1D6j
.text:00002873                 mov     ecx, [ebp+var_20]
.text:00002876                 add     ecx, 1
.text:00002879                 mov     [ebp+var_20], ecx
.text:0000287C
.text:0000287C loc_287C:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+B9j
.text:0000287C                 mov     edx, [ebp+var_20]
.text:0000287F                 cmp     edx, [ebp+arg_8]
.text:00002882                 jnb     loc_2993
.text:00002888                 movzx   eax, [ebp+var_11]
.text:0000288C                 test    eax, eax
.text:0000288E                 jz      short loc_289B
.text:00002890                 mov     ecx, [ebp+var_20]
.text:00002893                 mov     [ebp+var_238], ecx
.text:00002899                 jmp     short loc_28AA
.text:0000289B ; ---------------------------------------------------------------------------
.text:0000289B
.text:0000289B loc_289B:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+D6j
.text:0000289B                 mov     edx, [ebp+var_20]
.text:0000289E                 mov     eax, [ebp+arg_4]
.text:000028A1                 mov     ecx, [eax+edx*4]
.text:000028A4                 mov     [ebp+var_238], ecx
.text:000028AA
.text:000028AA loc_28AA:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+E1j
.text:000028AA                 mov     edx, [ebp+var_238]
.text:000028B0                 mov     [ebp+var_30], edx
.text:000028B3                 mov     eax, [ebp+var_30]
.text:000028B6                 push    eax
.text:000028B7                 mov     ecx, [ebp+this]
.text:000028BA                 add     ecx, 14h
.text:000028BD                 call    ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEAAUCMvItem@NCab@NArchive@@I@Z ; CRecordVector<NArchive::NCab::CMvItem>::operator[](uint)
.text:000028C2                 mov     [ebp+var_23C], eax
.text:000028C8                 mov     ecx, [ebp+var_23C]
.text:000028CE                 mov     [ebp+var_34], ecx
.text:000028D1                 mov     edx, [ebp+var_34]
.text:000028D4                 mov     eax, [edx]
.text:000028D6                 push    eax
.text:000028D7                 mov     ecx, [ebp+this]
.text:000028DA                 add     ecx, 8
.text:000028DD                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:000028E2                 mov     [ebp+var_240], eax
.text:000028E8                 mov     ecx, [ebp+var_34]
.text:000028EB                 mov     edx, [ecx+4]
.text:000028EE                 push    edx
.text:000028EF                 mov     ecx, [ebp+var_240]
.text:000028F5                 add     ecx, 0Ch
.text:000028F8                 call    ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CItem>::operator[](uint)
.text:000028FD                 mov     [ebp+var_244], eax
.text:00002903                 mov     eax, [ebp+var_244]
.text:00002909                 mov     [ebp+var_38], eax
.text:0000290C                 mov     ecx, [ebp+var_38] ; this
.text:0000290F                 call    ?IsDir@CItem@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CItem::IsDir(void)
.text:00002914                 mov     [ebp+var_245], al
.text:0000291A                 movzx   ecx, [ebp+var_245]
.text:00002921                 test    ecx, ecx
.text:00002923                 jz      short loc_292A
.text:00002925                 jmp     loc_2873
.text:0000292A ; ---------------------------------------------------------------------------
.text:0000292A
.text:0000292A loc_292A:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+16Bj
.text:0000292A                 mov     edx, [ebp+var_34]
.text:0000292D                 push    edx             ; struct NArchive::NCab::CMvItem *
.text:0000292E                 mov     ecx, [ebp+this]
.text:00002931                 add     ecx, 8          ; this
.text:00002934                 call    ?GetFolderIndex@CMvDatabaseEx@NCab@NArchive@@QBEHPBUCMvItem@23@@Z ; NArchive::NCab::CMvDatabaseEx::GetFolderIndex(NArchive::NCab::CMvItem const *)
.text:00002939                 mov     [ebp+var_24C], eax
.text:0000293F                 mov     eax, [ebp+var_24C]
.text:00002945                 mov     [ebp+var_3C], eax
.text:00002948                 mov     ecx, [ebp+var_3C]
.text:0000294B                 cmp     ecx, [ebp+var_24]
.text:0000294E                 jz      short loc_2962
.text:00002950                 mov     edx, [ebp+var_1C]
.text:00002953                 add     edx, [ebp+var_2C]
.text:00002956                 mov     eax, [ebp+var_18]
.text:00002959                 adc     eax, [ebp+var_28]
.text:0000295C                 mov     [ebp+var_1C], edx
.text:0000295F                 mov     [ebp+var_18], eax
.text:00002962
.text:00002962 loc_2962:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+196j
.text:00002962                 mov     ecx, [ebp+var_3C]
.text:00002965                 mov     [ebp+var_24], ecx
.text:00002968                 mov     ecx, [ebp+var_38] ; this
.text:0000296B                 call    ?GetEndOffset@CItem@NCab@NArchive@@QBE_KXZ ; NArchive::NCab::CItem::GetEndOffset(void)
.text:00002970                 mov     [ebp+var_254], eax
.text:00002976                 mov     [ebp+var_250], edx
.text:0000297C                 mov     edx, [ebp+var_254]
.text:00002982                 mov     [ebp+var_2C], edx
.text:00002985                 mov     eax, [ebp+var_250]
.text:0000298B                 mov     [ebp+var_28], eax
.text:0000298E                 jmp     loc_2873
.text:00002993 ; ---------------------------------------------------------------------------
.text:00002993
.text:00002993 loc_2993:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+CAj
.text:00002993                 mov     ecx, [ebp+var_1C]
.text:00002996                 add     ecx, [ebp+var_2C]
.text:00002999                 mov     edx, [ebp+var_18]
.text:0000299C                 adc     edx, [ebp+var_28]
.text:0000299F                 mov     [ebp+var_1C], ecx
.text:000029A2                 mov     [ebp+var_18], edx
.text:000029A5                 mov     esi, esp
.text:000029A7                 mov     eax, [ebp+var_18]
.text:000029AA                 push    eax
.text:000029AB                 mov     ecx, [ebp+var_1C]
.text:000029AE                 push    ecx
.text:000029AF                 mov     edx, [ebp+arg_10]
.text:000029B2                 push    edx
.text:000029B3                 mov     eax, [ebp+arg_10]
.text:000029B6                 mov     ecx, [eax]
.text:000029B8                 mov     edx, [ecx+0Ch]
.text:000029BB                 call    edx
.text:000029BD                 cmp     esi, esp
.text:000029BF                 call    __RTC_CheckEsp
.text:000029C4                 mov     [ebp+var_1C], 0
.text:000029CB                 mov     [ebp+var_18], 0
.text:000029D2                 mov     [ebp+var_44], 0
.text:000029D9                 mov     [ebp+var_40], 0
.text:000029E0                 push    38h ; '8'       ; unsigned int
.text:000029E2                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000029E7                 add     esp, 4
.text:000029EA                 mov     [ebp+var_258], eax
.text:000029F0                 mov     eax, [ebp+var_258]
.text:000029F6                 mov     [ebp+var_1B8], eax
.text:000029FC                 mov     byte ptr [ebp+var_4], 1
.text:00002A00                 cmp     [ebp+var_1B8], 0
.text:00002A07                 jz      short loc_2A28
.text:00002A09                 mov     ecx, [ebp+var_1B8]
.text:00002A0F                 call    ??0CLocalProgress@@QAE@XZ ; CLocalProgress::CLocalProgress(void)
.text:00002A14                 mov     [ebp+var_25C], eax
.text:00002A1A                 mov     ecx, [ebp+var_25C]
.text:00002A20                 mov     [ebp+var_260], ecx
.text:00002A26                 jmp     short loc_2A32
.text:00002A28 ; ---------------------------------------------------------------------------
.text:00002A28
.text:00002A28 loc_2A28:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+24Fj
.text:00002A28                 mov     [ebp+var_260], 0
.text:00002A32
.text:00002A32 loc_2A32:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+26Ej
.text:00002A32                 mov     edx, [ebp+var_260]
.text:00002A38                 mov     [ebp+var_1B4], edx
.text:00002A3E                 mov     byte ptr [ebp+var_4], 0
.text:00002A42                 mov     eax, [ebp+var_1B4]
.text:00002A48                 mov     [ebp+var_48], eax
.text:00002A4B                 mov     ecx, [ebp+var_48]
.text:00002A4E                 push    ecx
.text:00002A4F                 lea     ecx, [ebp+var_50]
.text:00002A52                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)
.text:00002A57                 mov     byte ptr [ebp+var_4], 2
.text:00002A5B                 push    0               ; bool
.text:00002A5D                 mov     edx, [ebp+arg_10]
.text:00002A60                 push    edx             ; struct IProgress *
.text:00002A61                 mov     ecx, [ebp+var_48] ; this
.text:00002A64                 call    ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init(IProgress *,bool)
.text:00002A69                 push    28h ; '('       ; unsigned int
.text:00002A6B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002A70                 add     esp, 4
.text:00002A73                 mov     [ebp+var_264], eax
.text:00002A79                 mov     eax, [ebp+var_264]
.text:00002A7F                 mov     [ebp+var_1C0], eax
.text:00002A85                 mov     byte ptr [ebp+var_4], 3
.text:00002A89                 cmp     [ebp+var_1C0], 0
.text:00002A90                 jz      short loc_2AB1
.text:00002A92                 mov     ecx, [ebp+var_1C0] ; this
.text:00002A98                 call    ??0CCopyCoder@NCompress@@QAE@XZ ; NCompress::CCopyCoder::CCopyCoder(void)
.text:00002A9D                 mov     [ebp+var_268], eax
.text:00002AA3                 mov     ecx, [ebp+var_268]
.text:00002AA9                 mov     [ebp+var_26C], ecx
.text:00002AAF                 jmp     short loc_2ABB
.text:00002AB1 ; ---------------------------------------------------------------------------
.text:00002AB1
.text:00002AB1 loc_2AB1:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2D8j
.text:00002AB1                 mov     [ebp+var_26C], 0
.text:00002ABB
.text:00002ABB loc_2ABB:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2F7j
.text:00002ABB                 mov     edx, [ebp+var_26C]
.text:00002AC1                 mov     [ebp+var_1BC], edx
.text:00002AC7                 mov     byte ptr [ebp+var_4], 2
.text:00002ACB                 mov     eax, [ebp+var_1BC]
.text:00002AD1                 mov     [ebp+var_58], eax
.text:00002AD4                 mov     ecx, [ebp+var_58]
.text:00002AD7                 push    ecx
.text:00002AD8                 lea     ecx, [ebp+var_60]
.text:00002ADB                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(ICompressCoder *)
.text:00002AE0                 mov     byte ptr [ebp+var_4], 4
.text:00002AE4                 mov     [ebp+var_68], 0
.text:00002AEB                 lea     ecx, [ebp+var_70]
.text:00002AEE                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(void)
.text:00002AF3                 mov     [ebp+var_270], eax
.text:00002AF9                 mov     byte ptr [ebp+var_4], 5
.text:00002AFD                 mov     [ebp+var_78], 0
.text:00002B04                 lea     ecx, [ebp+var_80]
.text:00002B07                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(void)
.text:00002B0C                 mov     [ebp+var_274], eax
.text:00002B12                 mov     byte ptr [ebp+var_4], 6
.text:00002B16                 mov     [ebp+var_88], 0
.text:00002B20                 lea     ecx, [ebp+var_90]
.text:00002B26                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(void)
.text:00002B2B                 mov     [ebp+var_278], eax
.text:00002B31                 mov     byte ptr [ebp+var_4], 7
.text:00002B35                 push    1Ch             ; unsigned int
.text:00002B37                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002B3C                 add     esp, 4
.text:00002B3F                 mov     [ebp+var_27C], eax
.text:00002B45                 mov     edx, [ebp+var_27C]
.text:00002B4B                 mov     [ebp+var_1C8], edx
.text:00002B51                 mov     byte ptr [ebp+var_4], 8
.text:00002B55                 cmp     [ebp+var_1C8], 0
.text:00002B5C                 jz      short loc_2B7D
.text:00002B5E                 mov     ecx, [ebp+var_1C8] ; this
.text:00002B64                 call    ??0CCabBlockInStream@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CCabBlockInStream::CCabBlockInStream(void)
.text:00002B69                 mov     [ebp+var_280], eax
.text:00002B6F                 mov     eax, [ebp+var_280]
.text:00002B75                 mov     [ebp+var_284], eax
.text:00002B7B                 jmp     short loc_2B87
.text:00002B7D ; ---------------------------------------------------------------------------
.text:00002B7D
.text:00002B7D loc_2B7D:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3A4j
.text:00002B7D                 mov     [ebp+var_284], 0
.text:00002B87
.text:00002B87 loc_2B87:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3C3j
.text:00002B87                 mov     ecx, [ebp+var_284]
.text:00002B8D                 mov     [ebp+var_1C4], ecx
.text:00002B93                 mov     byte ptr [ebp+var_4], 7
.text:00002B97                 mov     edx, [ebp+var_1C4]
.text:00002B9D                 mov     [ebp+var_98], edx
.text:00002BA3                 mov     eax, [ebp+var_98]
.text:00002BA9                 push    eax
.text:00002BAA                 lea     ecx, [ebp+var_A0]
.text:00002BB0                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)
.text:00002BB5                 mov     byte ptr [ebp+var_4], 9
.text:00002BB9                 mov     ecx, [ebp+var_98] ; this
.text:00002BBF                 call    ?Create@CCabBlockInStream@NCab@NArchive@@QAE_NXZ ; NArchive::NCab::CCabBlockInStream::Create(void)
.text:00002BC4                 mov     [ebp+var_285], al
.text:00002BCA                 movzx   ecx, [ebp+var_285]
.text:00002BD1                 test    ecx, ecx
.text:00002BD3                 jnz     short loc_2C38
.text:00002BD5                 mov     [ebp+var_1CC], 8007000Eh
.text:00002BDF                 mov     byte ptr [ebp+var_4], 7
.text:00002BE3                 lea     ecx, [ebp+var_A0]
.text:00002BE9                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002BEE                 mov     byte ptr [ebp+var_4], 6
.text:00002BF2                 lea     ecx, [ebp+var_90]
.text:00002BF8                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00002BFD                 mov     byte ptr [ebp+var_4], 5
.text:00002C01                 lea     ecx, [ebp+var_80]
.text:00002C04                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00002C09                 mov     byte ptr [ebp+var_4], 4
.text:00002C0D                 lea     ecx, [ebp+var_70]
.text:00002C10                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00002C15                 mov     byte ptr [ebp+var_4], 2
.text:00002C19                 lea     ecx, [ebp+var_60]
.text:00002C1C                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00002C21                 mov     byte ptr [ebp+var_4], 0
.text:00002C25                 lea     ecx, [ebp+var_50]
.text:00002C28                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002C2D                 mov     eax, [ebp+var_1CC]
.text:00002C33                 jmp     loc_461F
.text:00002C38 ; ---------------------------------------------------------------------------
.text:00002C38
.text:00002C38 loc_2C38:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+41Bj
.text:00002C38                 lea     ecx, [ebp+var_B4]
.text:00002C3E                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:00002C43                 mov     [ebp+var_28C], eax
.text:00002C49                 mov     byte ptr [ebp+var_4], 0Ah
.text:00002C4D                 mov     [ebp+var_20], 0
.text:00002C54
.text:00002C54 loc_2C54:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+818j
.text:00002C54                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+AE7j ...
.text:00002C54                 mov     edx, [ebp+var_20]
.text:00002C57                 cmp     edx, [ebp+arg_8]
.text:00002C5A                 jnb     loc_4584
.text:00002C60                 movzx   eax, [ebp+var_11]
.text:00002C64                 test    eax, eax
.text:00002C66                 jz      short loc_2C73
.text:00002C68                 mov     ecx, [ebp+var_20]
.text:00002C6B                 mov     [ebp+var_290], ecx
.text:00002C71                 jmp     short loc_2C82
.text:00002C73 ; ---------------------------------------------------------------------------
.text:00002C73
.text:00002C73 loc_2C73:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4AEj
.text:00002C73                 mov     edx, [ebp+var_20]
.text:00002C76                 mov     eax, [ebp+arg_4]
.text:00002C79                 mov     ecx, [eax+edx*4]
.text:00002C7C                 mov     [ebp+var_290], ecx
.text:00002C82
.text:00002C82 loc_2C82:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4B9j
.text:00002C82                 mov     edx, [ebp+var_290]
.text:00002C88                 mov     [ebp+var_BC], edx
.text:00002C8E                 mov     eax, [ebp+var_BC]
.text:00002C94                 push    eax
.text:00002C95                 mov     ecx, [ebp+this]
.text:00002C98                 add     ecx, 14h
.text:00002C9B                 call    ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEAAUCMvItem@NCab@NArchive@@I@Z ; CRecordVector<NArchive::NCab::CMvItem>::operator[](uint)
.text:00002CA0                 mov     [ebp+var_294], eax
.text:00002CA6                 mov     ecx, [ebp+var_294]
.text:00002CAC                 mov     [ebp+var_C0], ecx
.text:00002CB2                 mov     edx, [ebp+var_C0]
.text:00002CB8                 mov     eax, [edx]
.text:00002CBA                 push    eax
.text:00002CBB                 mov     ecx, [ebp+this]
.text:00002CBE                 add     ecx, 8
.text:00002CC1                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:00002CC6                 mov     [ebp+var_298], eax
.text:00002CCC                 mov     ecx, [ebp+var_298]
.text:00002CD2                 mov     [ebp+var_C4], ecx
.text:00002CD8                 mov     edx, [ebp+var_C0]
.text:00002CDE                 mov     eax, [edx+4]
.text:00002CE1                 mov     [ebp+var_C8], eax
.text:00002CE7                 mov     ecx, [ebp+var_C8]
.text:00002CED                 push    ecx
.text:00002CEE                 mov     ecx, [ebp+var_C4]
.text:00002CF4                 add     ecx, 0Ch
.text:00002CF7                 call    ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QBEABUCItem@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CItem>::operator[](uint)
.text:00002CFC                 mov     [ebp+var_29C], eax
.text:00002D02                 mov     edx, [ebp+var_29C]
.text:00002D08                 mov     [ebp+var_CC], edx
.text:00002D0E                 mov     eax, [ebp+var_20]
.text:00002D11                 add     eax, 1
.text:00002D14                 mov     [ebp+var_20], eax
.text:00002D17                 mov     ecx, [ebp+var_CC] ; this
.text:00002D1D                 call    ?IsDir@CItem@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CItem::IsDir(void)
.text:00002D22                 mov     [ebp+var_29D], al
.text:00002D28                 movzx   ecx, [ebp+var_29D]
.text:00002D2F                 test    ecx, ecx
.text:00002D31                 jz      loc_2FD5
.text:00002D37                 movzx   edx, [ebp+var_12]
.text:00002D3B                 neg     edx
.text:00002D3D                 sbb     edx, edx
.text:00002D3F                 neg     edx
.text:00002D41                 mov     [ebp+var_D0], edx
.text:00002D47                 lea     ecx, [ebp+var_D8]
.text:00002D4D                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00002D52                 mov     [ebp+var_2A4], eax
.text:00002D58                 mov     byte ptr [ebp+var_4], 0Bh
.text:00002D5C                 lea     ecx, [ebp+var_D8]
.text:00002D62                 call    ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&(void)
.text:00002D67                 mov     [ebp+var_2A8], eax
.text:00002D6D                 mov     esi, esp
.text:00002D6F                 mov     eax, [ebp+var_D0]
.text:00002D75                 push    eax
.text:00002D76                 mov     ecx, [ebp+var_2A8]
.text:00002D7C                 push    ecx
.text:00002D7D                 mov     edx, [ebp+var_BC]
.text:00002D83                 push    edx
.text:00002D84                 mov     eax, [ebp+arg_10]
.text:00002D87                 push    eax
.text:00002D88                 mov     ecx, [ebp+arg_10]
.text:00002D8B                 mov     edx, [ecx]
.text:00002D8D                 mov     eax, [edx+14h]
.text:00002D90                 call    eax
.text:00002D92                 cmp     esi, esp
.text:00002D94                 call    __RTC_CheckEsp
.text:00002D99                 mov     [ebp+var_2AC], eax
.text:00002D9F                 mov     ecx, [ebp+var_2AC]
.text:00002DA5                 mov     [ebp+var_E0], ecx
.text:00002DAB                 cmp     [ebp+var_E0], 0
.text:00002DB2                 jz      loc_2E3B
.text:00002DB8                 mov     edx, [ebp+var_E0]
.text:00002DBE                 mov     [ebp+var_1D0], edx
.text:00002DC4                 mov     byte ptr [ebp+var_4], 0Ah
.text:00002DC8                 lea     ecx, [ebp+var_D8]
.text:00002DCE                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002DD3                 mov     byte ptr [ebp+var_4], 9
.text:00002DD7                 lea     ecx, [ebp+var_B4]
.text:00002DDD                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00002DE2                 mov     byte ptr [ebp+var_4], 7
.text:00002DE6                 lea     ecx, [ebp+var_A0]
.text:00002DEC                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002DF1                 mov     byte ptr [ebp+var_4], 6
.text:00002DF5                 lea     ecx, [ebp+var_90]
.text:00002DFB                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00002E00                 mov     byte ptr [ebp+var_4], 5
.text:00002E04                 lea     ecx, [ebp+var_80]
.text:00002E07                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00002E0C                 mov     byte ptr [ebp+var_4], 4
.text:00002E10                 lea     ecx, [ebp+var_70]
.text:00002E13                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00002E18                 mov     byte ptr [ebp+var_4], 2
.text:00002E1C                 lea     ecx, [ebp+var_60]
.text:00002E1F                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00002E24                 mov     byte ptr [ebp+var_4], 0
.text:00002E28                 lea     ecx, [ebp+var_50]
.text:00002E2B                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002E30                 mov     eax, [ebp+var_1D0]
.text:00002E36                 jmp     loc_461F
.text:00002E3B ; ---------------------------------------------------------------------------
.text:00002E3B
.text:00002E3B loc_2E3B:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5FAj
.text:00002E3B                 mov     esi, esp
.text:00002E3D                 mov     eax, [ebp+var_D0]
.text:00002E43                 push    eax
.text:00002E44                 mov     ecx, [ebp+arg_10]
.text:00002E47                 push    ecx
.text:00002E48                 mov     edx, [ebp+arg_10]
.text:00002E4B                 mov     eax, [edx]
.text:00002E4D                 mov     ecx, [eax+18h]
.text:00002E50                 call    ecx
.text:00002E52                 cmp     esi, esp
.text:00002E54                 call    __RTC_CheckEsp
.text:00002E59                 mov     [ebp+var_2B0], eax
.text:00002E5F                 mov     edx, [ebp+var_2B0]
.text:00002E65                 mov     [ebp+var_E4], edx
.text:00002E6B                 cmp     [ebp+var_E4], 0
.text:00002E72                 jz      loc_2EFB
.text:00002E78                 mov     eax, [ebp+var_E4]
.text:00002E7E                 mov     [ebp+var_1D4], eax
.text:00002E84                 mov     byte ptr [ebp+var_4], 0Ah
.text:00002E88                 lea     ecx, [ebp+var_D8]
.text:00002E8E                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002E93                 mov     byte ptr [ebp+var_4], 9
.text:00002E97                 lea     ecx, [ebp+var_B4]
.text:00002E9D                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00002EA2                 mov     byte ptr [ebp+var_4], 7
.text:00002EA6                 lea     ecx, [ebp+var_A0]
.text:00002EAC                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002EB1                 mov     byte ptr [ebp+var_4], 6
.text:00002EB5                 lea     ecx, [ebp+var_90]
.text:00002EBB                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00002EC0                 mov     byte ptr [ebp+var_4], 5
.text:00002EC4                 lea     ecx, [ebp+var_80]
.text:00002EC7                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00002ECC                 mov     byte ptr [ebp+var_4], 4
.text:00002ED0                 lea     ecx, [ebp+var_70]
.text:00002ED3                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00002ED8                 mov     byte ptr [ebp+var_4], 2
.text:00002EDC                 lea     ecx, [ebp+var_60]
.text:00002EDF                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00002EE4                 mov     byte ptr [ebp+var_4], 0
.text:00002EE8                 lea     ecx, [ebp+var_50]
.text:00002EEB                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002EF0                 mov     eax, [ebp+var_1D4]
.text:00002EF6                 jmp     loc_461F
.text:00002EFB ; ---------------------------------------------------------------------------
.text:00002EFB
.text:00002EFB loc_2EFB:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6BAj
.text:00002EFB                 lea     ecx, [ebp+var_D8]
.text:00002F01                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:00002F06                 mov     esi, esp
.text:00002F08                 push    0
.text:00002F0A                 mov     ecx, [ebp+arg_10]
.text:00002F0D                 push    ecx
.text:00002F0E                 mov     edx, [ebp+arg_10]
.text:00002F11                 mov     eax, [edx]
.text:00002F13                 mov     ecx, [eax+1Ch]
.text:00002F16                 call    ecx
.text:00002F18                 cmp     esi, esp
.text:00002F1A                 call    __RTC_CheckEsp
.text:00002F1F                 mov     [ebp+var_2B4], eax
.text:00002F25                 mov     edx, [ebp+var_2B4]
.text:00002F2B                 mov     [ebp+var_E8], edx
.text:00002F31                 cmp     [ebp+var_E8], 0
.text:00002F38                 jz      loc_2FC1
.text:00002F3E                 mov     eax, [ebp+var_E8]
.text:00002F44                 mov     [ebp+var_1D8], eax
.text:00002F4A                 mov     byte ptr [ebp+var_4], 0Ah
.text:00002F4E                 lea     ecx, [ebp+var_D8]
.text:00002F54                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002F59                 mov     byte ptr [ebp+var_4], 9
.text:00002F5D                 lea     ecx, [ebp+var_B4]
.text:00002F63                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00002F68                 mov     byte ptr [ebp+var_4], 7
.text:00002F6C                 lea     ecx, [ebp+var_A0]
.text:00002F72                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002F77                 mov     byte ptr [ebp+var_4], 6
.text:00002F7B                 lea     ecx, [ebp+var_90]
.text:00002F81                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00002F86                 mov     byte ptr [ebp+var_4], 5
.text:00002F8A                 lea     ecx, [ebp+var_80]
.text:00002F8D                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00002F92                 mov     byte ptr [ebp+var_4], 4
.text:00002F96                 lea     ecx, [ebp+var_70]
.text:00002F99                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00002F9E                 mov     byte ptr [ebp+var_4], 2
.text:00002FA2                 lea     ecx, [ebp+var_60]
.text:00002FA5                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00002FAA                 mov     byte ptr [ebp+var_4], 0
.text:00002FAE                 lea     ecx, [ebp+var_50]
.text:00002FB1                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002FB6                 mov     eax, [ebp+var_1D8]
.text:00002FBC                 jmp     loc_461F
.text:00002FC1 ; ---------------------------------------------------------------------------
.text:00002FC1
.text:00002FC1 loc_2FC1:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+780j
.text:00002FC1                 mov     byte ptr [ebp+var_4], 0Ah
.text:00002FC5                 lea     ecx, [ebp+var_D8]
.text:00002FCB                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002FD0                 jmp     loc_2C54
.text:00002FD5 ; ---------------------------------------------------------------------------
.text:00002FD5
.text:00002FD5 loc_2FD5:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+579j
.text:00002FD5                 mov     ecx, [ebp+var_C0]
.text:00002FDB                 push    ecx             ; struct NArchive::NCab::CMvItem *
.text:00002FDC                 mov     ecx, [ebp+this]
.text:00002FDF                 add     ecx, 8          ; this
.text:00002FE2                 call    ?GetFolderIndex@CMvDatabaseEx@NCab@NArchive@@QBEHPBUCMvItem@23@@Z ; NArchive::NCab::CMvDatabaseEx::GetFolderIndex(NArchive::NCab::CMvItem const *)
.text:00002FE7                 mov     [ebp+var_2B8], eax
.text:00002FED                 mov     edx, [ebp+var_2B8]
.text:00002FF3                 mov     [ebp+var_EC], edx
.text:00002FF9                 cmp     [ebp+var_EC], 0
.text:00003000                 jge     loc_32A4
.text:00003006                 movzx   eax, [ebp+var_12]
.text:0000300A                 neg     eax
.text:0000300C                 sbb     eax, eax
.text:0000300E                 neg     eax
.text:00003010                 mov     [ebp+var_F0], eax
.text:00003016                 lea     ecx, [ebp+var_F8]
.text:0000301C                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00003021                 mov     [ebp+var_2BC], eax
.text:00003027                 mov     byte ptr [ebp+var_4], 0Ch
.text:0000302B                 lea     ecx, [ebp+var_F8]
.text:00003031                 call    ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&(void)
.text:00003036                 mov     [ebp+var_2C0], eax
.text:0000303C                 mov     esi, esp
.text:0000303E                 mov     ecx, [ebp+var_F0]
.text:00003044                 push    ecx
.text:00003045                 mov     edx, [ebp+var_2C0]
.text:0000304B                 push    edx
.text:0000304C                 mov     eax, [ebp+var_BC]
.text:00003052                 push    eax
.text:00003053                 mov     ecx, [ebp+arg_10]
.text:00003056                 push    ecx
.text:00003057                 mov     edx, [ebp+arg_10]
.text:0000305A                 mov     eax, [edx]
.text:0000305C                 mov     ecx, [eax+14h]
.text:0000305F                 call    ecx
.text:00003061                 cmp     esi, esp
.text:00003063                 call    __RTC_CheckEsp
.text:00003068                 mov     [ebp+var_2C4], eax
.text:0000306E                 mov     edx, [ebp+var_2C4]
.text:00003074                 mov     [ebp+var_100], edx
.text:0000307A                 cmp     [ebp+var_100], 0
.text:00003081                 jz      loc_310A
.text:00003087                 mov     eax, [ebp+var_100]
.text:0000308D                 mov     [ebp+var_1DC], eax
.text:00003093                 mov     byte ptr [ebp+var_4], 0Ah
.text:00003097                 lea     ecx, [ebp+var_F8]
.text:0000309D                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000030A2                 mov     byte ptr [ebp+var_4], 9
.text:000030A6                 lea     ecx, [ebp+var_B4]
.text:000030AC                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000030B1                 mov     byte ptr [ebp+var_4], 7
.text:000030B5                 lea     ecx, [ebp+var_A0]
.text:000030BB                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000030C0                 mov     byte ptr [ebp+var_4], 6
.text:000030C4                 lea     ecx, [ebp+var_90]
.text:000030CA                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000030CF                 mov     byte ptr [ebp+var_4], 5
.text:000030D3                 lea     ecx, [ebp+var_80]
.text:000030D6                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000030DB                 mov     byte ptr [ebp+var_4], 4
.text:000030DF                 lea     ecx, [ebp+var_70]
.text:000030E2                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000030E7                 mov     byte ptr [ebp+var_4], 2
.text:000030EB                 lea     ecx, [ebp+var_60]
.text:000030EE                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000030F3                 mov     byte ptr [ebp+var_4], 0
.text:000030F7                 lea     ecx, [ebp+var_50]
.text:000030FA                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000030FF                 mov     eax, [ebp+var_1DC]
.text:00003105                 jmp     loc_461F
.text:0000310A ; ---------------------------------------------------------------------------
.text:0000310A
.text:0000310A loc_310A:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+8C9j
.text:0000310A                 mov     esi, esp
.text:0000310C                 mov     ecx, [ebp+var_F0]
.text:00003112                 push    ecx
.text:00003113                 mov     edx, [ebp+arg_10]
.text:00003116                 push    edx
.text:00003117                 mov     eax, [ebp+arg_10]
.text:0000311A                 mov     ecx, [eax]
.text:0000311C                 mov     edx, [ecx+18h]
.text:0000311F                 call    edx
.text:00003121                 cmp     esi, esp
.text:00003123                 call    __RTC_CheckEsp
.text:00003128                 mov     [ebp+var_2C8], eax
.text:0000312E                 mov     eax, [ebp+var_2C8]
.text:00003134                 mov     [ebp+var_104], eax
.text:0000313A                 cmp     [ebp+var_104], 0
.text:00003141                 jz      loc_31CA
.text:00003147                 mov     ecx, [ebp+var_104]
.text:0000314D                 mov     [ebp+var_1E0], ecx
.text:00003153                 mov     byte ptr [ebp+var_4], 0Ah
.text:00003157                 lea     ecx, [ebp+var_F8]
.text:0000315D                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003162                 mov     byte ptr [ebp+var_4], 9
.text:00003166                 lea     ecx, [ebp+var_B4]
.text:0000316C                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00003171                 mov     byte ptr [ebp+var_4], 7
.text:00003175                 lea     ecx, [ebp+var_A0]
.text:0000317B                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003180                 mov     byte ptr [ebp+var_4], 6
.text:00003184                 lea     ecx, [ebp+var_90]
.text:0000318A                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:0000318F                 mov     byte ptr [ebp+var_4], 5
.text:00003193                 lea     ecx, [ebp+var_80]
.text:00003196                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:0000319B                 mov     byte ptr [ebp+var_4], 4
.text:0000319F                 lea     ecx, [ebp+var_70]
.text:000031A2                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000031A7                 mov     byte ptr [ebp+var_4], 2
.text:000031AB                 lea     ecx, [ebp+var_60]
.text:000031AE                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000031B3                 mov     byte ptr [ebp+var_4], 0
.text:000031B7                 lea     ecx, [ebp+var_50]
.text:000031BA                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000031BF                 mov     eax, [ebp+var_1E0]
.text:000031C5                 jmp     loc_461F
.text:000031CA ; ---------------------------------------------------------------------------
.text:000031CA
.text:000031CA loc_31CA:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+989j
.text:000031CA                 lea     ecx, [ebp+var_F8]
.text:000031D0                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:000031D5                 mov     esi, esp
.text:000031D7                 push    2
.text:000031D9                 mov     edx, [ebp+arg_10]
.text:000031DC                 push    edx
.text:000031DD                 mov     eax, [ebp+arg_10]
.text:000031E0                 mov     ecx, [eax]
.text:000031E2                 mov     edx, [ecx+1Ch]
.text:000031E5                 call    edx
.text:000031E7                 cmp     esi, esp
.text:000031E9                 call    __RTC_CheckEsp
.text:000031EE                 mov     [ebp+var_2CC], eax
.text:000031F4                 mov     eax, [ebp+var_2CC]
.text:000031FA                 mov     [ebp+var_108], eax
.text:00003200                 cmp     [ebp+var_108], 0
.text:00003207                 jz      loc_3290
.text:0000320D                 mov     ecx, [ebp+var_108]
.text:00003213                 mov     [ebp+var_1E4], ecx
.text:00003219                 mov     byte ptr [ebp+var_4], 0Ah
.text:0000321D                 lea     ecx, [ebp+var_F8]
.text:00003223                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003228                 mov     byte ptr [ebp+var_4], 9
.text:0000322C                 lea     ecx, [ebp+var_B4]
.text:00003232                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00003237                 mov     byte ptr [ebp+var_4], 7
.text:0000323B                 lea     ecx, [ebp+var_A0]
.text:00003241                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003246                 mov     byte ptr [ebp+var_4], 6
.text:0000324A                 lea     ecx, [ebp+var_90]
.text:00003250                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003255                 mov     byte ptr [ebp+var_4], 5
.text:00003259                 lea     ecx, [ebp+var_80]
.text:0000325C                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003261                 mov     byte ptr [ebp+var_4], 4
.text:00003265                 lea     ecx, [ebp+var_70]
.text:00003268                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:0000326D                 mov     byte ptr [ebp+var_4], 2
.text:00003271                 lea     ecx, [ebp+var_60]
.text:00003274                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003279                 mov     byte ptr [ebp+var_4], 0
.text:0000327D                 lea     ecx, [ebp+var_50]
.text:00003280                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003285                 mov     eax, [ebp+var_1E4]
.text:0000328B                 jmp     loc_461F
.text:00003290 ; ---------------------------------------------------------------------------
.text:00003290
.text:00003290 loc_3290:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+A4Fj
.text:00003290                 mov     byte ptr [ebp+var_4], 0Ah
.text:00003294                 lea     ecx, [ebp+var_F8]
.text:0000329A                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000329F                 jmp     loc_2C54
.text:000032A4 ; ---------------------------------------------------------------------------
.text:000032A4
.text:000032A4 loc_32A4:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+848j
.text:000032A4                 mov     edx, [ebp+var_EC]
.text:000032AA                 push    edx
.text:000032AB                 mov     ecx, [ebp+this]
.text:000032AE                 add     ecx, 2Ch ; ','
.text:000032B1                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:000032B6                 mov     [ebp+var_2D0], eax
.text:000032BC                 mov     eax, [ebp+var_2D0]
.text:000032C2                 mov     ecx, [eax]
.text:000032C4                 mov     [ebp+var_10C], ecx
.text:000032CA                 mov     edx, [ebp+var_10C]
.text:000032D0                 mov     [ebp+var_110], edx
.text:000032D6                 lea     ecx, [ebp+var_B4]
.text:000032DC                 call    ?Clear@?$CRecordVector@_N@@QAEXXZ ; CRecordVector<bool>::Clear(void)
.text:000032E1                 jmp     short loc_32F2
.text:000032E3 ; ---------------------------------------------------------------------------
.text:000032E3
.text:000032E3 loc_32E3:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+B55j
.text:000032E3                 mov     eax, [ebp+var_110]
.text:000032E9                 add     eax, 1
.text:000032EC                 mov     [ebp+var_110], eax
.text:000032F2
.text:000032F2 loc_32F2:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+B29j
.text:000032F2                 mov     ecx, [ebp+var_110]
.text:000032F8                 cmp     ecx, [ebp+var_BC]
.text:000032FE                 jnb     short loc_330F
.text:00003300                 push    0
.text:00003302                 lea     ecx, [ebp+var_B4]
.text:00003308                 call    ?Add@?$CRecordVector@_N@@QAEI_N@Z ; CRecordVector<bool>::Add(bool)
.text:0000330D                 jmp     short loc_32E3
.text:0000330F ; ---------------------------------------------------------------------------
.text:0000330F
.text:0000330F loc_330F:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+B46j
.text:0000330F                 push    1
.text:00003311                 lea     ecx, [ebp+var_B4]
.text:00003317                 call    ?Add@?$CRecordVector@_N@@QAEI_N@Z ; CRecordVector<bool>::Add(bool)
.text:0000331C                 mov     edx, [ebp+var_110]
.text:00003322                 add     edx, 1
.text:00003325                 mov     [ebp+var_110], edx
.text:0000332B                 mov     ecx, [ebp+var_CC] ; this
.text:00003331                 call    ?GetEndOffset@CItem@NCab@NArchive@@QBE_KXZ ; NArchive::NCab::CItem::GetEndOffset(void)
.text:00003336                 mov     [ebp+var_2D8], eax
.text:0000333C                 mov     [ebp+var_2D4], edx
.text:00003342                 mov     eax, [ebp+var_2D8]
.text:00003348                 mov     [ebp+var_118], eax
.text:0000334E                 mov     ecx, [ebp+var_2D4]
.text:00003354                 mov     [ebp+var_114], ecx
.text:0000335A                 jmp     short loc_3365
.text:0000335C ; ---------------------------------------------------------------------------
.text:0000335C
.text:0000335C loc_335C:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+C6Bj
.text:0000335C                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+D1Dj
.text:0000335C                 mov     edx, [ebp+var_20]
.text:0000335F                 add     edx, 1
.text:00003362                 mov     [ebp+var_20], edx
.text:00003365
.text:00003365 loc_3365:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+BA2j
.text:00003365                 mov     eax, [ebp+var_20]
.text:00003368                 cmp     eax, [ebp+arg_8]
.text:0000336B                 jnb     loc_34DA
.text:00003371                 movzx   ecx, [ebp+var_11]
.text:00003375                 test    ecx, ecx
.text:00003377                 jz      short loc_3384
.text:00003379                 mov     edx, [ebp+var_20]
.text:0000337C                 mov     [ebp+var_2DC], edx
.text:00003382                 jmp     short loc_3393
.text:00003384 ; ---------------------------------------------------------------------------
.text:00003384
.text:00003384 loc_3384:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+BBFj
.text:00003384                 mov     eax, [ebp+var_20]
.text:00003387                 mov     ecx, [ebp+arg_4]
.text:0000338A                 mov     edx, [ecx+eax*4]
.text:0000338D                 mov     [ebp+var_2DC], edx
.text:00003393
.text:00003393 loc_3393:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+BCAj
.text:00003393                 mov     eax, [ebp+var_2DC]
.text:00003399                 mov     [ebp+var_11C], eax
.text:0000339F                 mov     ecx, [ebp+var_11C]
.text:000033A5                 push    ecx
.text:000033A6                 mov     ecx, [ebp+this]
.text:000033A9                 add     ecx, 14h
.text:000033AC                 call    ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEAAUCMvItem@NCab@NArchive@@I@Z ; CRecordVector<NArchive::NCab::CMvItem>::operator[](uint)
.text:000033B1                 mov     [ebp+var_2E0], eax
.text:000033B7                 mov     edx, [ebp+var_2E0]
.text:000033BD                 mov     [ebp+var_120], edx
.text:000033C3                 mov     eax, [ebp+var_120]
.text:000033C9                 mov     ecx, [eax]
.text:000033CB                 push    ecx
.text:000033CC                 mov     ecx, [ebp+this]
.text:000033CF                 add     ecx, 8
.text:000033D2                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:000033D7                 mov     [ebp+var_2E4], eax
.text:000033DD                 mov     edx, [ebp+var_120]
.text:000033E3                 mov     eax, [edx+4]
.text:000033E6                 push    eax
.text:000033E7                 mov     ecx, [ebp+var_2E4]
.text:000033ED                 add     ecx, 0Ch
.text:000033F0                 call    ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CItem>::operator[](uint)
.text:000033F5                 mov     [ebp+var_2E8], eax
.text:000033FB                 mov     ecx, [ebp+var_2E8]
.text:00003401                 mov     [ebp+var_124], ecx
.text:00003407                 mov     ecx, [ebp+var_124] ; this
.text:0000340D                 call    ?IsDir@CItem@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CItem::IsDir(void)
.text:00003412                 mov     [ebp+var_2E9], al
.text:00003418                 movzx   edx, [ebp+var_2E9]
.text:0000341F                 test    edx, edx
.text:00003421                 jz      short loc_3428
.text:00003423                 jmp     loc_335C
.text:00003428 ; ---------------------------------------------------------------------------
.text:00003428
.text:00003428 loc_3428:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+C69j
.text:00003428                 mov     eax, [ebp+var_120]
.text:0000342E                 push    eax             ; struct NArchive::NCab::CMvItem *
.text:0000342F                 mov     ecx, [ebp+this]
.text:00003432                 add     ecx, 8          ; this
.text:00003435                 call    ?GetFolderIndex@CMvDatabaseEx@NCab@NArchive@@QBEHPBUCMvItem@23@@Z ; NArchive::NCab::CMvDatabaseEx::GetFolderIndex(NArchive::NCab::CMvItem const *)
.text:0000343A                 mov     [ebp+var_2F0], eax
.text:00003440                 mov     ecx, [ebp+var_2F0]
.text:00003446                 mov     [ebp+var_128], ecx
.text:0000344C                 mov     edx, [ebp+var_128]
.text:00003452                 cmp     edx, [ebp+var_EC]
.text:00003458                 jz      short loc_345C
.text:0000345A                 jmp     short loc_34DA
.text:0000345C ; ---------------------------------------------------------------------------
.text:0000345C
.text:0000345C loc_345C:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+CA0j
.text:0000345C                 jmp     short loc_346D
.text:0000345E ; ---------------------------------------------------------------------------
.text:0000345E
.text:0000345E loc_345E:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+CD0j
.text:0000345E                 mov     eax, [ebp+var_110]
.text:00003464                 add     eax, 1
.text:00003467                 mov     [ebp+var_110], eax
.text:0000346D
.text:0000346D loc_346D:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *):loc_345Cj
.text:0000346D                 mov     ecx, [ebp+var_110]
.text:00003473                 cmp     ecx, [ebp+var_11C]
.text:00003479                 jnb     short loc_348A
.text:0000347B                 push    0
.text:0000347D                 lea     ecx, [ebp+var_B4]
.text:00003483                 call    ?Add@?$CRecordVector@_N@@QAEI_N@Z ; CRecordVector<bool>::Add(bool)
.text:00003488                 jmp     short loc_345E
.text:0000348A ; ---------------------------------------------------------------------------
.text:0000348A
.text:0000348A loc_348A:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+CC1j
.text:0000348A                 push    1
.text:0000348C                 lea     ecx, [ebp+var_B4]
.text:00003492                 call    ?Add@?$CRecordVector@_N@@QAEI_N@Z ; CRecordVector<bool>::Add(bool)
.text:00003497                 mov     edx, [ebp+var_110]
.text:0000349D                 add     edx, 1
.text:000034A0                 mov     [ebp+var_110], edx
.text:000034A6                 mov     ecx, [ebp+var_124] ; this
.text:000034AC                 call    ?GetEndOffset@CItem@NCab@NArchive@@QBE_KXZ ; NArchive::NCab::CItem::GetEndOffset(void)
.text:000034B1                 mov     [ebp+var_2F8], eax
.text:000034B7                 mov     [ebp+var_2F4], edx
.text:000034BD                 mov     eax, [ebp+var_2F8]
.text:000034C3                 mov     [ebp+var_118], eax
.text:000034C9                 mov     ecx, [ebp+var_2F4]
.text:000034CF                 mov     [ebp+var_114], ecx
.text:000034D5                 jmp     loc_335C
.text:000034DA ; ---------------------------------------------------------------------------
.text:000034DA
.text:000034DA loc_34DA:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+BB3j
.text:000034DA                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+CA2j
.text:000034DA                 mov     edx, [ebp+var_48]
.text:000034DD                 mov     eax, [ebp+var_1C]
.text:000034E0                 mov     [edx+28h], eax
.text:000034E3                 mov     ecx, [ebp+var_18]
.text:000034E6                 mov     [edx+2Ch], ecx
.text:000034E9                 mov     edx, [ebp+var_48]
.text:000034EC                 mov     eax, [ebp+var_44]
.text:000034EF                 mov     [edx+20h], eax
.text:000034F2                 mov     ecx, [ebp+var_40]
.text:000034F5                 mov     [edx+24h], ecx
.text:000034F8                 mov     ecx, [ebp+var_48] ; this
.text:000034FB                 call    ?SetCur@CLocalProgress@@QAEJXZ ; CLocalProgress::SetCur(void)
.text:00003500                 mov     [ebp+var_2FC], eax
.text:00003506                 mov     edx, [ebp+var_2FC]
.text:0000350C                 mov     [ebp+var_12C], edx
.text:00003512                 cmp     [ebp+var_12C], 0
.text:00003519                 jz      short loc_358F
.text:0000351B                 mov     eax, [ebp+var_12C]
.text:00003521                 mov     [ebp+var_1E8], eax
.text:00003527                 mov     byte ptr [ebp+var_4], 9
.text:0000352B                 lea     ecx, [ebp+var_B4]
.text:00003531                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00003536                 mov     byte ptr [ebp+var_4], 7
.text:0000353A                 lea     ecx, [ebp+var_A0]
.text:00003540                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003545                 mov     byte ptr [ebp+var_4], 6
.text:00003549                 lea     ecx, [ebp+var_90]
.text:0000354F                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003554                 mov     byte ptr [ebp+var_4], 5
.text:00003558                 lea     ecx, [ebp+var_80]
.text:0000355B                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003560                 mov     byte ptr [ebp+var_4], 4
.text:00003564                 lea     ecx, [ebp+var_70]
.text:00003567                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:0000356C                 mov     byte ptr [ebp+var_4], 2
.text:00003570                 lea     ecx, [ebp+var_60]
.text:00003573                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003578                 mov     byte ptr [ebp+var_4], 0
.text:0000357C                 lea     ecx, [ebp+var_50]
.text:0000357F                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003584                 mov     eax, [ebp+var_1E8]
.text:0000358A                 jmp     loc_461F
.text:0000358F ; ---------------------------------------------------------------------------
.text:0000358F
.text:0000358F loc_358F:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+D61j
.text:0000358F                 push    50h ; 'P'       ; unsigned int
.text:00003591                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00003596                 add     esp, 4
.text:00003599                 mov     [ebp+var_300], eax
.text:0000359F                 mov     ecx, [ebp+var_300]
.text:000035A5                 mov     [ebp+var_1F0], ecx
.text:000035AB                 mov     byte ptr [ebp+var_4], 0Dh
.text:000035AF                 cmp     [ebp+var_1F0], 0
.text:000035B6                 jz      short loc_35D7
.text:000035B8                 mov     ecx, [ebp+var_1F0] ; this
.text:000035BE                 call    ??0CFolderOutStream@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CFolderOutStream::CFolderOutStream(void)
.text:000035C3                 mov     [ebp+var_304], eax
.text:000035C9                 mov     edx, [ebp+var_304]
.text:000035CF                 mov     [ebp+var_308], edx
.text:000035D5                 jmp     short loc_35E1
.text:000035D7 ; ---------------------------------------------------------------------------
.text:000035D7
.text:000035D7 loc_35D7:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+DFEj
.text:000035D7                 mov     [ebp+var_308], 0
.text:000035E1
.text:000035E1 loc_35E1:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+E1Dj
.text:000035E1                 mov     eax, [ebp+var_308]
.text:000035E7                 mov     [ebp+var_1EC], eax
.text:000035ED                 mov     byte ptr [ebp+var_4], 0Ah
.text:000035F1                 mov     ecx, [ebp+var_1EC]
.text:000035F7                 mov     [ebp+var_130], ecx
.text:000035FD                 mov     edx, [ebp+var_130]
.text:00003603                 push    edx
.text:00003604                 lea     ecx, [ebp+var_138]
.text:0000360A                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)
.text:0000360F                 mov     byte ptr [ebp+var_4], 0Eh
.text:00003613                 mov     ecx, [ebp+var_C4]
.text:00003619                 call    ?Size@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NCab::CFolder>::Size(void)
.text:0000361E                 mov     [ebp+var_30C], eax
.text:00003624                 mov     eax, [ebp+var_30C]
.text:0000362A                 push    eax             ; unsigned int
.text:0000362B                 mov     ecx, [ebp+var_CC] ; this
.text:00003631                 call    ?GetFolderIndex@CItem@NCab@NArchive@@QBEHI@Z ; NArchive::NCab::CItem::GetFolderIndex(uint)
.text:00003636                 mov     [ebp+var_310], eax
.text:0000363C                 mov     ecx, [ebp+var_310]
.text:00003642                 push    ecx
.text:00003643                 mov     ecx, [ebp+var_C4]
.text:00003649                 call    ??A?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEABUCFolder@NCab@NArchive@@I@Z ; CRecordVector<NArchive::NCab::CFolder>::operator[](uint)
.text:0000364E                 mov     [ebp+var_314], eax
.text:00003654                 mov     edx, [ebp+var_314]
.text:0000365A                 mov     [ebp+var_140], edx
.text:00003660                 movzx   eax, [ebp+var_12]
.text:00003664                 push    eax
.text:00003665                 mov     ecx, [ebp+arg_10]
.text:00003668                 push    ecx
.text:00003669                 mov     edx, [ebp+var_114]
.text:0000366F                 push    edx
.text:00003670                 mov     eax, [ebp+var_118]
.text:00003676                 push    eax
.text:00003677                 mov     ecx, [ebp+var_10C]
.text:0000367D                 push    ecx
.text:0000367E                 lea     edx, [ebp+var_B4]
.text:00003684                 push    edx
.text:00003685                 mov     eax, [ebp+this]
.text:00003688                 add     eax, 8
.text:0000368B                 push    eax
.text:0000368C                 mov     ecx, [ebp+var_130]
.text:00003692                 call    ?Init@CFolderOutStream@NCab@NArchive@@QAEXPBVCMvDatabaseEx@23@PBV?$CRecordVector@_N@@I_KPAUIArchiveExtractCallback@@_N@Z ; NArchive::NCab::CFolderOutStream::Init(NArchive::NCab::CMvDatabaseEx const *,CRecordVector<bool> const *,uint,unsigned __int64,IArchiveExtractCallback *,bool)
.text:00003697                 mov     ecx, [ebp+var_98]
.text:0000369D                 mov     byte ptr [ecx+18h], 0
.text:000036A1                 mov     [ebp+var_144], 0
.text:000036AB                 mov     ecx, [ebp+var_140] ; this
.text:000036B1                 call    ?GetMethod@CFolder@NCab@NArchive@@QBEEXZ ; NArchive::NCab::CFolder::GetMethod(void)
.text:000036B6                 mov     [ebp+var_315], al
.text:000036BC                 movzx   edx, [ebp+var_315]
.text:000036C3                 mov     [ebp+var_31C], edx
.text:000036C9                 cmp     [ebp+var_31C], 3 ; switch 4 cases
.text:000036D0                 ja      loc_3916        ; jumptable 000036DC default case
.text:000036D6                 mov     eax, [ebp+var_31C]
.text:000036DC                 jmp     ds:$LN138[eax*4] ; switch jump
.text:000036E3 ; ---------------------------------------------------------------------------
.text:000036E3
.text:000036E3 $LN42_0:                                ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+F24j
.text:000036E3                                         ; DATA XREF: .text:$LN138o
.text:000036E3                 jmp     loc_3920        ; jumptable 000036DC case 0
.text:000036E8 ; ---------------------------------------------------------------------------
.text:000036E8
.text:000036E8 $LN41_0:                                ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+F24j
.text:000036E8                                         ; DATA XREF: .text:$LN138o
.text:000036E8                 lea     ecx, [ebp+var_70] ; jumptable 000036DC case 1
.text:000036EB                 call    ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ; CMyComPtr<ICompressCoder>::operator!(void)
.text:000036F0                 mov     [ebp+var_31D], al
.text:000036F6                 movzx   ecx, [ebp+var_31D]
.text:000036FD                 test    ecx, ecx
.text:000036FF                 jz      short loc_377B
.text:00003701                 push    0D70h           ; unsigned int
.text:00003706                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000370B                 add     esp, 4
.text:0000370E                 mov     [ebp+var_324], eax
.text:00003714                 mov     edx, [ebp+var_324]
.text:0000371A                 mov     [ebp+var_1F8], edx
.text:00003720                 mov     byte ptr [ebp+var_4], 0Fh
.text:00003724                 cmp     [ebp+var_1F8], 0
.text:0000372B                 jz      short loc_374C
.text:0000372D                 mov     ecx, [ebp+var_1F8] ; this
.text:00003733                 call    ??0CCOMCoder@NDecoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)
.text:00003738                 mov     [ebp+var_328], eax
.text:0000373E                 mov     eax, [ebp+var_328]
.text:00003744                 mov     [ebp+var_32C], eax
.text:0000374A                 jmp     short loc_3756
.text:0000374C ; ---------------------------------------------------------------------------
.text:0000374C
.text:0000374C loc_374C:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+F73j
.text:0000374C                 mov     [ebp+var_32C], 0
.text:00003756
.text:00003756 loc_3756:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+F92j
.text:00003756                 mov     ecx, [ebp+var_32C]
.text:0000375C                 mov     [ebp+var_1F4], ecx
.text:00003762                 mov     byte ptr [ebp+var_4], 0Eh
.text:00003766                 mov     edx, [ebp+var_1F4]
.text:0000376C                 mov     [ebp+var_68], edx
.text:0000376F                 mov     eax, [ebp+var_68]
.text:00003772                 push    eax
.text:00003773                 lea     ecx, [ebp+var_70]
.text:00003776                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:0000377B
.text:0000377B loc_377B:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+F47j
.text:0000377B                 mov     ecx, [ebp+var_98]
.text:00003781                 mov     byte ptr [ecx+18h], 1
.text:00003785                 jmp     loc_3920
.text:0000378A ; ---------------------------------------------------------------------------
.text:0000378A
.text:0000378A $LN39_1:                                ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+F24j
.text:0000378A                                         ; DATA XREF: .text:$LN138o
.text:0000378A                 lea     ecx, [ebp+var_80] ; jumptable 000036DC case 3
.text:0000378D                 call    ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ; CMyComPtr<ICompressCoder>::operator!(void)
.text:00003792                 mov     [ebp+var_32D], al
.text:00003798                 movzx   edx, [ebp+var_32D]
.text:0000379F                 test    edx, edx
.text:000037A1                 jz      short loc_381F
.text:000037A3                 push    1CD0h           ; unsigned int
.text:000037A8                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000037AD                 add     esp, 4
.text:000037B0                 mov     [ebp+var_334], eax
.text:000037B6                 mov     eax, [ebp+var_334]
.text:000037BC                 mov     [ebp+var_200], eax
.text:000037C2                 mov     byte ptr [ebp+var_4], 10h
.text:000037C6                 cmp     [ebp+var_200], 0
.text:000037CD                 jz      short loc_37F0
.text:000037CF                 push    0               ; bool
.text:000037D1                 mov     ecx, [ebp+var_200] ; this
.text:000037D7                 call    ??0CDecoder@NLzx@NCompress@@QAE@_N@Z ; NCompress::NLzx::CDecoder::CDecoder(bool)
.text:000037DC                 mov     [ebp+var_338], eax
.text:000037E2                 mov     ecx, [ebp+var_338]
.text:000037E8                 mov     [ebp+var_33C], ecx
.text:000037EE                 jmp     short loc_37FA
.text:000037F0 ; ---------------------------------------------------------------------------
.text:000037F0
.text:000037F0 loc_37F0:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1015j
.text:000037F0                 mov     [ebp+var_33C], 0
.text:000037FA
.text:000037FA loc_37FA:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1036j
.text:000037FA                 mov     edx, [ebp+var_33C]
.text:00003800                 mov     [ebp+var_1FC], edx
.text:00003806                 mov     byte ptr [ebp+var_4], 0Eh
.text:0000380A                 mov     eax, [ebp+var_1FC]
.text:00003810                 mov     [ebp+var_78], eax
.text:00003813                 mov     ecx, [ebp+var_78]
.text:00003816                 push    ecx
.text:00003817                 lea     ecx, [ebp+var_80]
.text:0000381A                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:0000381F
.text:0000381F loc_381F:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+FE9j
.text:0000381F                 mov     edx, [ebp+var_140]
.text:00003825                 movzx   eax, byte ptr [edx+7]
.text:00003829                 push    eax             ; unsigned int
.text:0000382A                 mov     ecx, [ebp+var_78] ; this
.text:0000382D                 call    ?SetParams@CDecoder@NLzx@NCompress@@QAEJI@Z ; NCompress::NLzx::CDecoder::SetParams(uint)
.text:00003832                 mov     [ebp+var_340], eax
.text:00003838                 mov     ecx, [ebp+var_340]
.text:0000383E                 mov     [ebp+var_144], ecx
.text:00003844                 jmp     loc_3920
.text:00003849 ; ---------------------------------------------------------------------------
.text:00003849
.text:00003849 $LN37:                                  ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+F24j
.text:00003849                                         ; DATA XREF: .text:$LN138o
.text:00003849                 lea     ecx, [ebp+var_90] ; jumptable 000036DC case 2
.text:0000384F                 call    ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ; CMyComPtr<ICompressCoder>::operator!(void)
.text:00003854                 mov     [ebp+var_341], al
.text:0000385A                 movzx   edx, [ebp+var_341]
.text:00003861                 test    edx, edx
.text:00003863                 jz      loc_38EC
.text:00003869                 push    7B8h            ; unsigned int
.text:0000386E                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00003873                 add     esp, 4
.text:00003876                 mov     [ebp+var_348], eax
.text:0000387C                 mov     eax, [ebp+var_348]
.text:00003882                 mov     [ebp+var_208], eax
.text:00003888                 mov     byte ptr [ebp+var_4], 11h
.text:0000388C                 cmp     [ebp+var_208], 0
.text:00003893                 jz      short loc_38B4
.text:00003895                 mov     ecx, [ebp+var_208] ; this
.text:0000389B                 call    ??0CDecoder@NQuantum@NCompress@@QAE@XZ ; NCompress::NQuantum::CDecoder::CDecoder(void)
.text:000038A0                 mov     [ebp+var_34C], eax
.text:000038A6                 mov     ecx, [ebp+var_34C]
.text:000038AC                 mov     [ebp+var_350], ecx
.text:000038B2                 jmp     short loc_38BE
.text:000038B4 ; ---------------------------------------------------------------------------
.text:000038B4
.text:000038B4 loc_38B4:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+10DBj
.text:000038B4                 mov     [ebp+var_350], 0
.text:000038BE
.text:000038BE loc_38BE:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+10FAj
.text:000038BE                 mov     edx, [ebp+var_350]
.text:000038C4                 mov     [ebp+var_204], edx
.text:000038CA                 mov     byte ptr [ebp+var_4], 0Eh
.text:000038CE                 mov     eax, [ebp+var_204]
.text:000038D4                 mov     [ebp+var_88], eax
.text:000038DA                 mov     ecx, [ebp+var_88]
.text:000038E0                 push    ecx
.text:000038E1                 lea     ecx, [ebp+var_90]
.text:000038E7                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:000038EC
.text:000038EC loc_38EC:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+10ABj
.text:000038EC                 mov     edx, [ebp+var_140]
.text:000038F2                 movzx   eax, byte ptr [edx+7]
.text:000038F6                 push    eax             ; int
.text:000038F7                 mov     ecx, [ebp+var_88] ; this
.text:000038FD                 call    ?SetParams@CDecoder@NQuantum@NCompress@@QAEJH@Z ; NCompress::NQuantum::CDecoder::SetParams(int)
.text:00003902                 mov     [ebp+var_354], eax
.text:00003908                 mov     ecx, [ebp+var_354]
.text:0000390E                 mov     [ebp+var_144], ecx
.text:00003914                 jmp     short loc_3920
.text:00003916 ; ---------------------------------------------------------------------------
.text:00003916
.text:00003916 loc_3916:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+F18j
.text:00003916                 mov     [ebp+var_144], 80070057h ; jumptable 000036DC default case
.text:00003920
.text:00003920 loc_3920:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *):$LN42_0j
.text:00003920                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+FCDj ...
.text:00003920                 cmp     [ebp+var_144], 80070057h
.text:0000392A                 jnz     loc_3A09
.text:00003930                 mov     ecx, [ebp+var_130] ; this
.text:00003936                 call    ?Unsupported@CFolderOutStream@NCab@NArchive@@QAEJXZ ; NArchive::NCab::CFolderOutStream::Unsupported(void)
.text:0000393B                 mov     [ebp+var_358], eax
.text:00003941                 mov     edx, [ebp+var_358]
.text:00003947                 mov     [ebp+var_148], edx
.text:0000394D                 cmp     [ebp+var_148], 0
.text:00003954                 jz      loc_39DD
.text:0000395A                 mov     eax, [ebp+var_148]
.text:00003960                 mov     [ebp+var_20C], eax
.text:00003966                 mov     byte ptr [ebp+var_4], 0Ah
.text:0000396A                 lea     ecx, [ebp+var_138]
.text:00003970                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003975                 mov     byte ptr [ebp+var_4], 9
.text:00003979                 lea     ecx, [ebp+var_B4]
.text:0000397F                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00003984                 mov     byte ptr [ebp+var_4], 7
.text:00003988                 lea     ecx, [ebp+var_A0]
.text:0000398E                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003993                 mov     byte ptr [ebp+var_4], 6
.text:00003997                 lea     ecx, [ebp+var_90]
.text:0000399D                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000039A2                 mov     byte ptr [ebp+var_4], 5
.text:000039A6                 lea     ecx, [ebp+var_80]
.text:000039A9                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000039AE                 mov     byte ptr [ebp+var_4], 4
.text:000039B2                 lea     ecx, [ebp+var_70]
.text:000039B5                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000039BA                 mov     byte ptr [ebp+var_4], 2
.text:000039BE                 lea     ecx, [ebp+var_60]
.text:000039C1                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000039C6                 mov     byte ptr [ebp+var_4], 0
.text:000039CA                 lea     ecx, [ebp+var_50]
.text:000039CD                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000039D2                 mov     eax, [ebp+var_20C]
.text:000039D8                 jmp     loc_461F
.text:000039DD ; ---------------------------------------------------------------------------
.text:000039DD
.text:000039DD loc_39DD:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+119Cj
.text:000039DD                 mov     ecx, [ebp+var_1C]
.text:000039E0                 add     ecx, [ebp+var_118]
.text:000039E6                 mov     edx, [ebp+var_18]
.text:000039E9                 adc     edx, [ebp+var_114]
.text:000039EF                 mov     [ebp+var_1C], ecx
.text:000039F2                 mov     [ebp+var_18], edx
.text:000039F5                 mov     byte ptr [ebp+var_4], 0Ah
.text:000039F9                 lea     ecx, [ebp+var_138]
.text:000039FF                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003A04                 jmp     loc_2C54
.text:00003A09 ; ---------------------------------------------------------------------------
.text:00003A09
.text:00003A09 loc_3A09:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1172j
.text:00003A09                 mov     eax, [ebp+var_144]
.text:00003A0F                 mov     [ebp+var_14C], eax
.text:00003A15                 cmp     [ebp+var_14C], 0
.text:00003A1C                 jz      loc_3AA5
.text:00003A22                 mov     ecx, [ebp+var_14C]
.text:00003A28                 mov     [ebp+var_210], ecx
.text:00003A2E                 mov     byte ptr [ebp+var_4], 0Ah
.text:00003A32                 lea     ecx, [ebp+var_138]
.text:00003A38                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003A3D                 mov     byte ptr [ebp+var_4], 9
.text:00003A41                 lea     ecx, [ebp+var_B4]
.text:00003A47                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00003A4C                 mov     byte ptr [ebp+var_4], 7
.text:00003A50                 lea     ecx, [ebp+var_A0]
.text:00003A56                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003A5B                 mov     byte ptr [ebp+var_4], 6
.text:00003A5F                 lea     ecx, [ebp+var_90]
.text:00003A65                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003A6A                 mov     byte ptr [ebp+var_4], 5
.text:00003A6E                 lea     ecx, [ebp+var_80]
.text:00003A71                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003A76                 mov     byte ptr [ebp+var_4], 4
.text:00003A7A                 lea     ecx, [ebp+var_70]
.text:00003A7D                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003A82                 mov     byte ptr [ebp+var_4], 2
.text:00003A86                 lea     ecx, [ebp+var_60]
.text:00003A89                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003A8E                 mov     byte ptr [ebp+var_4], 0
.text:00003A92                 lea     ecx, [ebp+var_50]
.text:00003A95                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003A9A                 mov     eax, [ebp+var_210]
.text:00003AA0                 jmp     loc_461F
.text:00003AA5 ; ---------------------------------------------------------------------------
.text:00003AA5
.text:00003AA5 loc_3AA5:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1264j
.text:00003AA5                 mov     edx, [ebp+var_C0]
.text:00003AAB                 mov     eax, [edx]
.text:00003AAD                 mov     [ebp+var_150], eax
.text:00003AB3                 mov     ecx, [ebp+var_C4]
.text:00003AB9                 call    ?Size@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NCab::CFolder>::Size(void)
.text:00003ABE                 mov     [ebp+var_35C], eax
.text:00003AC4                 mov     ecx, [ebp+var_35C]
.text:00003ACA                 push    ecx             ; unsigned int
.text:00003ACB                 mov     ecx, [ebp+var_CC] ; this
.text:00003AD1                 call    ?GetFolderIndex@CItem@NCab@NArchive@@QBEHI@Z ; NArchive::NCab::CItem::GetFolderIndex(uint)
.text:00003AD6                 mov     [ebp+var_360], eax
.text:00003ADC                 mov     edx, [ebp+var_360]
.text:00003AE2                 mov     [ebp+var_154], edx
.text:00003AE8                 mov     [ebp+var_155], 0
.text:00003AEF                 mov     [ebp+var_156], 0
.text:00003AF6                 mov     [ebp+var_15C], 0
.text:00003B00
.text:00003B00 loc_3B00:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1562j
.text:00003B00                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1699j ...
.text:00003B00                 mov     ecx, [ebp+var_130] ; this
.text:00003B06                 call    ?GetRemain@CFolderOutStream@NCab@NArchive@@QBE_KXZ ; NArchive::NCab::CFolderOutStream::GetRemain(void)
.text:00003B0B                 mov     [ebp+var_368], eax
.text:00003B11                 mov     [ebp+var_364], edx
.text:00003B17                 mov     eax, [ebp+var_368]
.text:00003B1D                 or      eax, [ebp+var_364]
.text:00003B23                 jz      loc_43BF
.text:00003B29                 mov     ecx, [ebp+this]
.text:00003B2C                 add     ecx, 8
.text:00003B2F                 call    ?Size@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::Size(void)
.text:00003B34                 mov     [ebp+var_36C], eax
.text:00003B3A                 mov     ecx, [ebp+var_150]
.text:00003B40                 cmp     ecx, [ebp+var_36C]
.text:00003B46                 jb      short loc_3B57
.text:00003B48                 mov     [ebp+var_144], 1
.text:00003B52                 jmp     loc_43BF
.text:00003B57 ; ---------------------------------------------------------------------------
.text:00003B57
.text:00003B57 loc_3B57:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+138Ej
.text:00003B57                 mov     edx, [ebp+var_150]
.text:00003B5D                 push    edx
.text:00003B5E                 mov     ecx, [ebp+this]
.text:00003B61                 add     ecx, 8
.text:00003B64                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:00003B69                 mov     [ebp+var_370], eax
.text:00003B6F                 mov     eax, [ebp+var_370]
.text:00003B75                 mov     [ebp+var_160], eax
.text:00003B7B                 mov     ecx, [ebp+var_154]
.text:00003B81                 push    ecx
.text:00003B82                 mov     ecx, [ebp+var_160]
.text:00003B88                 call    ??A?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEABUCFolder@NCab@NArchive@@I@Z ; CRecordVector<NArchive::NCab::CFolder>::operator[](uint)
.text:00003B8D                 mov     [ebp+var_374], eax
.text:00003B93                 mov     edx, [ebp+var_374]
.text:00003B99                 mov     [ebp+var_164], edx
.text:00003B9F                 cmp     [ebp+var_15C], 0
.text:00003BA6                 jnz     loc_3CCB
.text:00003BAC                 mov     ecx, [ebp+var_160]
.text:00003BB2                 add     ecx, 20h ; ' '  ; this
.text:00003BB5                 call    ?GetDataBlockReserveSize@CArchInfo@NCab@NArchive@@QBEEXZ ; NArchive::NCab::CArchInfo::GetDataBlockReserveSize(void)
.text:00003BBA                 mov     [ebp+var_375], al
.text:00003BC0                 movzx   eax, [ebp+var_375]
.text:00003BC7                 mov     ecx, [ebp+var_98]
.text:00003BCD                 mov     [ecx+14h], eax
.text:00003BD0                 mov     ecx, [ebp+var_160]
.text:00003BD6                 add     ecx, 78h ; 'x'
.text:00003BD9                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00003BDE                 mov     [ebp+var_37C], eax
.text:00003BE4                 mov     edx, [ebp+var_37C]
.text:00003BEA                 mov     [ebp+var_380], edx
.text:00003BF0                 mov     esi, esp
.text:00003BF2                 push    0
.text:00003BF4                 push    0
.text:00003BF6                 mov     eax, [ebp+var_164]
.text:00003BFC                 mov     ecx, [eax]
.text:00003BFE                 xor     edx, edx
.text:00003C00                 mov     eax, [ebp+var_160]
.text:00003C06                 add     ecx, [eax+18h]
.text:00003C09                 adc     edx, [eax+1Ch]
.text:00003C0C                 push    edx
.text:00003C0D                 push    ecx
.text:00003C0E                 mov     ecx, [ebp+var_380]
.text:00003C14                 push    ecx
.text:00003C15                 mov     edx, [ebp+var_380]
.text:00003C1B                 mov     eax, [edx]
.text:00003C1D                 mov     ecx, [eax+10h]
.text:00003C20                 call    ecx
.text:00003C22                 cmp     esi, esp
.text:00003C24                 call    __RTC_CheckEsp
.text:00003C29                 mov     [ebp+var_384], eax
.text:00003C2F                 mov     edx, [ebp+var_384]
.text:00003C35                 mov     [ebp+var_168], edx
.text:00003C3B                 cmp     [ebp+var_168], 0
.text:00003C42                 jz      loc_3CCB
.text:00003C48                 mov     eax, [ebp+var_168]
.text:00003C4E                 mov     [ebp+var_214], eax
.text:00003C54                 mov     byte ptr [ebp+var_4], 0Ah
.text:00003C58                 lea     ecx, [ebp+var_138]
.text:00003C5E                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003C63                 mov     byte ptr [ebp+var_4], 9
.text:00003C67                 lea     ecx, [ebp+var_B4]
.text:00003C6D                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00003C72                 mov     byte ptr [ebp+var_4], 7
.text:00003C76                 lea     ecx, [ebp+var_A0]
.text:00003C7C                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003C81                 mov     byte ptr [ebp+var_4], 6
.text:00003C85                 lea     ecx, [ebp+var_90]
.text:00003C8B                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003C90                 mov     byte ptr [ebp+var_4], 5
.text:00003C94                 lea     ecx, [ebp+var_80]
.text:00003C97                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003C9C                 mov     byte ptr [ebp+var_4], 4
.text:00003CA0                 lea     ecx, [ebp+var_70]
.text:00003CA3                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003CA8                 mov     byte ptr [ebp+var_4], 2
.text:00003CAC                 lea     ecx, [ebp+var_60]
.text:00003CAF                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003CB4                 mov     byte ptr [ebp+var_4], 0
.text:00003CB8                 lea     ecx, [ebp+var_50]
.text:00003CBB                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003CC0                 mov     eax, [ebp+var_214]
.text:00003CC6                 jmp     loc_461F
.text:00003CCB ; ---------------------------------------------------------------------------
.text:00003CCB
.text:00003CCB loc_3CCB:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+13EEj
.text:00003CCB                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+148Aj
.text:00003CCB                 mov     ecx, [ebp+var_164]
.text:00003CD1                 movzx   edx, word ptr [ecx+4]
.text:00003CD5                 cmp     [ebp+var_15C], edx
.text:00003CDB                 jnz     short loc_3D1F
.text:00003CDD                 mov     ecx, [ebp+this]
.text:00003CE0                 add     ecx, 8
.text:00003CE3                 call    ?Size@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::Size(void)
.text:00003CE8                 mov     [ebp+var_388], eax
.text:00003CEE                 cmp     [ebp+var_388], 1
.text:00003CF5                 jbe     short loc_3D1F
.text:00003CF7                 mov     eax, [ebp+var_150]
.text:00003CFD                 add     eax, 1
.text:00003D00                 mov     [ebp+var_150], eax
.text:00003D06                 mov     [ebp+var_154], 0
.text:00003D10                 mov     [ebp+var_15C], 0
.text:00003D1A                 jmp     loc_3B00
.text:00003D1F ; ---------------------------------------------------------------------------
.text:00003D1F
.text:00003D1F loc_3D1F:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1523j
.text:00003D1F                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+153Dj
.text:00003D1F                 mov     ecx, [ebp+var_15C]
.text:00003D25                 add     ecx, 1
.text:00003D28                 mov     [ebp+var_15C], ecx
.text:00003D2E                 movzx   edx, [ebp+var_156]
.text:00003D35                 test    edx, edx
.text:00003D37                 jnz     short loc_3D44
.text:00003D39                 mov     ecx, [ebp+var_98] ; this
.text:00003D3F                 call    ?InitForNewBlock@CCabBlockInStream@NCab@NArchive@@QAEXXZ ; NArchive::NCab::CCabBlockInStream::InitForNewBlock(void)
.text:00003D44
.text:00003D44 loc_3D44:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+157Fj
.text:00003D44                 mov     ecx, [ebp+var_160]
.text:00003D4A                 add     ecx, 78h ; 'x'
.text:00003D4D                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00003D52                 mov     [ebp+var_38C], eax
.text:00003D58                 lea     eax, [ebp+var_17C]
.text:00003D5E                 push    eax             ; unsigned int *
.text:00003D5F                 lea     ecx, [ebp+var_170]
.text:00003D65                 push    ecx             ; unsigned int *
.text:00003D66                 mov     edx, [ebp+var_38C]
.text:00003D6C                 push    edx             ; struct ISequentialInStream *
.text:00003D6D                 mov     ecx, [ebp+var_98] ; this
.text:00003D73                 call    ?PreRead@CCabBlockInStream@NCab@NArchive@@QAEJPAUISequentialInStream@@AAI1@Z ; NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)
.text:00003D78                 mov     [ebp+var_390], eax
.text:00003D7E                 mov     eax, [ebp+var_390]
.text:00003D84                 mov     [ebp+var_144], eax
.text:00003D8A                 cmp     [ebp+var_144], 1
.text:00003D91                 jnz     short loc_3D98
.text:00003D93                 jmp     loc_43BF
.text:00003D98 ; ---------------------------------------------------------------------------
.text:00003D98
.text:00003D98 loc_3D98:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+15D9j
.text:00003D98                 mov     ecx, [ebp+var_144]
.text:00003D9E                 mov     [ebp+var_184], ecx
.text:00003DA4                 cmp     [ebp+var_184], 0
.text:00003DAB                 jz      loc_3E34
.text:00003DB1                 mov     edx, [ebp+var_184]
.text:00003DB7                 mov     [ebp+var_218], edx
.text:00003DBD                 mov     byte ptr [ebp+var_4], 0Ah
.text:00003DC1                 lea     ecx, [ebp+var_138]
.text:00003DC7                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003DCC                 mov     byte ptr [ebp+var_4], 9
.text:00003DD0                 lea     ecx, [ebp+var_B4]
.text:00003DD6                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00003DDB                 mov     byte ptr [ebp+var_4], 7
.text:00003DDF                 lea     ecx, [ebp+var_A0]
.text:00003DE5                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003DEA                 mov     byte ptr [ebp+var_4], 6
.text:00003DEE                 lea     ecx, [ebp+var_90]
.text:00003DF4                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003DF9                 mov     byte ptr [ebp+var_4], 5
.text:00003DFD                 lea     ecx, [ebp+var_80]
.text:00003E00                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003E05                 mov     byte ptr [ebp+var_4], 4
.text:00003E09                 lea     ecx, [ebp+var_70]
.text:00003E0C                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003E11                 mov     byte ptr [ebp+var_4], 2
.text:00003E15                 lea     ecx, [ebp+var_60]
.text:00003E18                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003E1D                 mov     byte ptr [ebp+var_4], 0
.text:00003E21                 lea     ecx, [ebp+var_50]
.text:00003E24                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003E29                 mov     eax, [ebp+var_218]
.text:00003E2F                 jmp     loc_461F
.text:00003E34 ; ---------------------------------------------------------------------------
.text:00003E34
.text:00003E34 loc_3E34:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+15F3j
.text:00003E34                 xor     eax, eax
.text:00003E36                 cmp     [ebp+var_17C], 0
.text:00003E3D                 setz    al
.text:00003E40                 mov     [ebp+var_156], al
.text:00003E46                 movzx   ecx, [ebp+var_156]
.text:00003E4D                 test    ecx, ecx
.text:00003E4F                 jz      short loc_3E56
.text:00003E51                 jmp     loc_3B00
.text:00003E56 ; ---------------------------------------------------------------------------
.text:00003E56
.text:00003E56 loc_3E56:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1697j
.text:00003E56                 mov     ecx, [ebp+var_130] ; this
.text:00003E5C                 call    ?GetPosInFolder@CFolderOutStream@NCab@NArchive@@QBE_KXZ ; NArchive::NCab::CFolderOutStream::GetPosInFolder(void)
.text:00003E61                 mov     [ebp+var_398], eax
.text:00003E67                 mov     [ebp+var_394], edx
.text:00003E6D                 mov     edx, [ebp+var_1C]
.text:00003E70                 add     edx, [ebp+var_398]
.text:00003E76                 mov     eax, [ebp+var_18]
.text:00003E79                 adc     eax, [ebp+var_394]
.text:00003E7F                 mov     [ebp+var_18C], edx
.text:00003E85                 mov     [ebp+var_188], eax
.text:00003E8B                 mov     ecx, [ebp+var_170]
.text:00003E91                 xor     edx, edx
.text:00003E93                 add     ecx, [ebp+var_44]
.text:00003E96                 adc     edx, [ebp+var_40]
.text:00003E99                 mov     [ebp+var_44], ecx
.text:00003E9C                 mov     [ebp+var_40], edx
.text:00003E9F                 mov     eax, [ebp+var_48]
.text:00003EA2                 mov     ecx, [ebp+var_18C]
.text:00003EA8                 mov     [eax+28h], ecx
.text:00003EAB                 mov     edx, [ebp+var_188]
.text:00003EB1                 mov     [eax+2Ch], edx
.text:00003EB4                 mov     eax, [ebp+var_48]
.text:00003EB7                 mov     ecx, [ebp+var_44]
.text:00003EBA                 mov     [eax+20h], ecx
.text:00003EBD                 mov     edx, [ebp+var_40]
.text:00003EC0                 mov     [eax+24h], edx
.text:00003EC3                 mov     ecx, [ebp+var_48] ; this
.text:00003EC6                 call    ?SetCur@CLocalProgress@@QAEJXZ ; CLocalProgress::SetCur(void)
.text:00003ECB                 mov     [ebp+var_39C], eax
.text:00003ED1                 mov     eax, [ebp+var_39C]
.text:00003ED7                 mov     [ebp+var_190], eax
.text:00003EDD                 cmp     [ebp+var_190], 0
.text:00003EE4                 jz      loc_3F6D
.text:00003EEA                 mov     ecx, [ebp+var_190]
.text:00003EF0                 mov     [ebp+var_21C], ecx
.text:00003EF6                 mov     byte ptr [ebp+var_4], 0Ah
.text:00003EFA                 lea     ecx, [ebp+var_138]
.text:00003F00                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00003F05                 mov     byte ptr [ebp+var_4], 9
.text:00003F09                 lea     ecx, [ebp+var_B4]
.text:00003F0F                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00003F14                 mov     byte ptr [ebp+var_4], 7
.text:00003F18                 lea     ecx, [ebp+var_A0]
.text:00003F1E                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003F23                 mov     byte ptr [ebp+var_4], 6
.text:00003F27                 lea     ecx, [ebp+var_90]
.text:00003F2D                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003F32                 mov     byte ptr [ebp+var_4], 5
.text:00003F36                 lea     ecx, [ebp+var_80]
.text:00003F39                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003F3E                 mov     byte ptr [ebp+var_4], 4
.text:00003F42                 lea     ecx, [ebp+var_70]
.text:00003F45                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003F4A                 mov     byte ptr [ebp+var_4], 2
.text:00003F4E                 lea     ecx, [ebp+var_60]
.text:00003F51                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003F56                 mov     byte ptr [ebp+var_4], 0
.text:00003F5A                 lea     ecx, [ebp+var_50]
.text:00003F5D                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003F62                 mov     eax, [ebp+var_21C]
.text:00003F68                 jmp     loc_461F
.text:00003F6D ; ---------------------------------------------------------------------------
.text:00003F6D
.text:00003F6D loc_3F6D:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+172Cj
.text:00003F6D                 mov     ecx, [ebp+var_130] ; this
.text:00003F73                 call    ?GetRemain@CFolderOutStream@NCab@NArchive@@QBE_KXZ ; NArchive::NCab::CFolderOutStream::GetRemain(void)
.text:00003F78                 mov     [ebp+var_3A4], eax
.text:00003F7E                 mov     [ebp+var_3A0], edx
.text:00003F84                 mov     edx, [ebp+var_3A4]
.text:00003F8A                 mov     [ebp+var_19C], edx
.text:00003F90                 mov     eax, [ebp+var_3A0]
.text:00003F96                 mov     [ebp+var_198], eax
.text:00003F9C                 mov     [ebp+var_1A4], 8000h
.text:00003FA6                 cmp     [ebp+var_198], 0
.text:00003FAD                 ja      short loc_3FBB
.text:00003FAF                 cmp     [ebp+var_19C], 8000h
.text:00003FB9                 jbe     short loc_3FCF
.text:00003FBB
.text:00003FBB loc_3FBB:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+17F5j
.text:00003FBB                 mov     [ebp+var_19C], 8000h
.text:00003FC5                 mov     [ebp+var_198], 0
.text:00003FCF
.text:00003FCF loc_3FCF:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1801j
.text:00003FCF                 mov     ecx, [ebp+var_17C]
.text:00003FD5                 xor     edx, edx
.text:00003FD7                 mov     [ebp+var_3AC], ecx
.text:00003FDD                 mov     [ebp+var_3A8], edx
.text:00003FE3                 mov     eax, [ebp+var_198]
.text:00003FE9                 cmp     eax, [ebp+var_3A8]
.text:00003FEF                 jb      short loc_4015
.text:00003FF1                 ja      short loc_4001
.text:00003FF3                 mov     ecx, [ebp+var_19C]
.text:00003FF9                 cmp     ecx, [ebp+var_3AC]
.text:00003FFF                 jbe     short loc_4015
.text:00004001
.text:00004001 loc_4001:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1839j
.text:00004001                 mov     edx, [ebp+var_17C]
.text:00004007                 xor     eax, eax
.text:00004009                 mov     [ebp+var_19C], edx
.text:0000400F                 mov     [ebp+var_198], eax
.text:00004015
.text:00004015 loc_4015:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1837j
.text:00004015                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1847j
.text:00004015                 mov     ecx, [ebp+var_164] ; this
.text:0000401B                 call    ?GetMethod@CFolder@NCab@NArchive@@QBEEXZ ; NArchive::NCab::CFolder::GetMethod(void)
.text:00004020                 mov     [ebp+var_3AD], al
.text:00004026                 movzx   ecx, [ebp+var_3AD]
.text:0000402D                 mov     [ebp+var_3B4], ecx
.text:00004033                 cmp     [ebp+var_3B4], 3 ; switch 4 cases
.text:0000403A                 ja      loc_42FB        ; jumptable 00004046 default case
.text:00004040                 mov     edx, [ebp+var_3B4]
.text:00004046                 jmp     ds:$LN139[edx*4] ; switch jump
.text:0000404D ; ---------------------------------------------------------------------------
.text:0000404D
.text:0000404D $LN15_1:                                ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+188Ej
.text:0000404D                                         ; DATA XREF: .text:$LN139o
.text:0000404D                 lea     ecx, [ebp+var_60] ; jumptable 00004046 case 0
.text:00004050                 call    ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->(void)
.text:00004055                 mov     [ebp+var_3B8], eax
.text:0000405B                 mov     eax, [ebp+var_3B8]
.text:00004061                 mov     [ebp+var_3BC], eax
.text:00004067                 lea     ecx, [ebp+var_138]
.text:0000406D                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00004072                 mov     [ebp+var_3C0], eax
.text:00004078                 lea     ecx, [ebp+var_A0]
.text:0000407E                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00004083                 mov     [ebp+var_3C4], eax
.text:00004089                 mov     esi, esp
.text:0000408B                 push    0
.text:0000408D                 lea     ecx, [ebp+var_19C]
.text:00004093                 push    ecx
.text:00004094                 push    0
.text:00004096                 mov     edx, [ebp+var_3C0]
.text:0000409C                 push    edx
.text:0000409D                 mov     eax, [ebp+var_3C4]
.text:000040A3                 push    eax
.text:000040A4                 mov     ecx, [ebp+var_3BC]
.text:000040AA                 push    ecx
.text:000040AB                 mov     edx, [ebp+var_3BC]
.text:000040B1                 mov     eax, [edx]
.text:000040B3                 mov     ecx, [eax+0Ch]
.text:000040B6                 call    ecx
.text:000040B8                 cmp     esi, esp
.text:000040BA                 call    __RTC_CheckEsp
.text:000040BF                 mov     [ebp+var_3C8], eax
.text:000040C5                 mov     edx, [ebp+var_3C8]
.text:000040CB                 mov     [ebp+var_144], edx
.text:000040D1                 jmp     loc_42FB        ; jumptable 00004046 default case
.text:000040D6 ; ---------------------------------------------------------------------------
.text:000040D6
.text:000040D6 $LN14_0:                                ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+188Ej
.text:000040D6                                         ; DATA XREF: .text:$LN139o
.text:000040D6                 movzx   eax, [ebp+var_155] ; jumptable 00004046 case 1
.text:000040DD                 push    eax             ; bool
.text:000040DE                 mov     ecx, [ebp+var_68] ; this
.text:000040E1                 call    ?Set_KeepHistory@CCoder@NDecoder@NDeflate@NCompress@@QAEX_N@Z ; NCompress::NDeflate::NDecoder::CCoder::Set_KeepHistory(bool)
.text:000040E6                 push    1               ; bool
.text:000040E8                 mov     ecx, [ebp+var_68] ; this
.text:000040EB                 call    ?Set_NeedFinishInput@CCoder@NDecoder@NDeflate@NCompress@@QAEX_N@Z ; NCompress::NDeflate::NDecoder::CCoder::Set_NeedFinishInput(bool)
.text:000040F0                 lea     ecx, [ebp+var_70]
.text:000040F3                 call    ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->(void)
.text:000040F8                 mov     [ebp+var_3CC], eax
.text:000040FE                 mov     ecx, [ebp+var_3CC]
.text:00004104                 mov     [ebp+var_3D0], ecx
.text:0000410A                 lea     ecx, [ebp+var_138]
.text:00004110                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00004115                 mov     [ebp+var_3D4], eax
.text:0000411B                 lea     ecx, [ebp+var_A0]
.text:00004121                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00004126                 mov     [ebp+var_3D8], eax
.text:0000412C                 mov     esi, esp
.text:0000412E                 push    0
.text:00004130                 lea     edx, [ebp+var_19C]
.text:00004136                 push    edx
.text:00004137                 push    0
.text:00004139                 mov     eax, [ebp+var_3D4]
.text:0000413F                 push    eax
.text:00004140                 mov     ecx, [ebp+var_3D8]
.text:00004146                 push    ecx
.text:00004147                 mov     edx, [ebp+var_3D0]
.text:0000414D                 push    edx
.text:0000414E                 mov     eax, [ebp+var_3D0]
.text:00004154                 mov     ecx, [eax]
.text:00004156                 mov     edx, [ecx+0Ch]
.text:00004159                 call    edx
.text:0000415B                 cmp     esi, esp
.text:0000415D                 call    __RTC_CheckEsp
.text:00004162                 mov     [ebp+var_3DC], eax
.text:00004168                 mov     eax, [ebp+var_3DC]
.text:0000416E                 mov     [ebp+var_144], eax
.text:00004174                 cmp     [ebp+var_144], 0
.text:0000417B                 jnz     short loc_41C3
.text:0000417D                 mov     ecx, [ebp+var_68] ; this
.text:00004180                 call    ?IsFinished@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ ; NCompress::NDeflate::NDecoder::CCoder::IsFinished(void)
.text:00004185                 mov     [ebp+var_3DD], al
.text:0000418B                 movzx   ecx, [ebp+var_3DD]
.text:00004192                 test    ecx, ecx
.text:00004194                 jnz     short loc_41A0
.text:00004196                 mov     [ebp+var_144], 1
.text:000041A0
.text:000041A0 loc_41A0:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+19DCj
.text:000041A0                 mov     ecx, [ebp+var_68] ; this
.text:000041A3                 call    ?IsFinalBlock@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ ; NCompress::NDeflate::NDecoder::CCoder::IsFinalBlock(void)
.text:000041A8                 mov     [ebp+var_3DE], al
.text:000041AE                 movzx   edx, [ebp+var_3DE]
.text:000041B5                 test    edx, edx
.text:000041B7                 jnz     short loc_41C3
.text:000041B9                 mov     [ebp+var_144], 1
.text:000041C3
.text:000041C3 loc_41C3:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+19C3j
.text:000041C3                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+19FFj
.text:000041C3                 jmp     loc_42FB        ; jumptable 00004046 default case
.text:000041C8 ; ---------------------------------------------------------------------------
.text:000041C8
.text:000041C8 $LN10_0:                                ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+188Ej
.text:000041C8                                         ; DATA XREF: .text:$LN139o
.text:000041C8                 movzx   eax, [ebp+var_155] ; jumptable 00004046 case 3
.text:000041CF                 push    eax             ; bool
.text:000041D0                 mov     ecx, [ebp+var_78] ; this
.text:000041D3                 call    ?SetKeepHistory@CDecoder@NLzx@NCompress@@QAEX_N@Z ; NCompress::NLzx::CDecoder::SetKeepHistory(bool)
.text:000041D8                 lea     ecx, [ebp+var_80]
.text:000041DB                 call    ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->(void)
.text:000041E0                 mov     [ebp+var_3E4], eax
.text:000041E6                 mov     ecx, [ebp+var_3E4]
.text:000041EC                 mov     [ebp+var_3E8], ecx
.text:000041F2                 lea     ecx, [ebp+var_138]
.text:000041F8                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:000041FD                 mov     [ebp+var_3EC], eax
.text:00004203                 lea     ecx, [ebp+var_A0]
.text:00004209                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:0000420E                 mov     [ebp+var_3F0], eax
.text:00004214                 mov     esi, esp
.text:00004216                 push    0
.text:00004218                 lea     edx, [ebp+var_19C]
.text:0000421E                 push    edx
.text:0000421F                 push    0
.text:00004221                 mov     eax, [ebp+var_3EC]
.text:00004227                 push    eax
.text:00004228                 mov     ecx, [ebp+var_3F0]
.text:0000422E                 push    ecx
.text:0000422F                 mov     edx, [ebp+var_3E8]
.text:00004235                 push    edx
.text:00004236                 mov     eax, [ebp+var_3E8]
.text:0000423C                 mov     ecx, [eax]
.text:0000423E                 mov     edx, [ecx+0Ch]
.text:00004241                 call    edx
.text:00004243                 cmp     esi, esp
.text:00004245                 call    __RTC_CheckEsp
.text:0000424A                 mov     [ebp+var_3F4], eax
.text:00004250                 mov     eax, [ebp+var_3F4]
.text:00004256                 mov     [ebp+var_144], eax
.text:0000425C                 jmp     loc_42FB        ; jumptable 00004046 default case
.text:00004261 ; ---------------------------------------------------------------------------
.text:00004261
.text:00004261 $LN9_1:                                 ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+188Ej
.text:00004261                                         ; DATA XREF: .text:$LN139o
.text:00004261                 movzx   ecx, [ebp+var_155] ; jumptable 00004046 case 2
.text:00004268                 push    ecx             ; bool
.text:00004269                 mov     ecx, [ebp+var_88] ; this
.text:0000426F                 call    ?SetKeepHistory@CDecoder@NQuantum@NCompress@@QAEX_N@Z ; NCompress::NQuantum::CDecoder::SetKeepHistory(bool)
.text:00004274                 lea     ecx, [ebp+var_90]
.text:0000427A                 call    ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->(void)
.text:0000427F                 mov     [ebp+var_3F8], eax
.text:00004285                 mov     edx, [ebp+var_3F8]
.text:0000428B                 mov     [ebp+var_3FC], edx
.text:00004291                 lea     ecx, [ebp+var_138]
.text:00004297                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:0000429C                 mov     [ebp+var_400], eax
.text:000042A2                 lea     ecx, [ebp+var_A0]
.text:000042A8                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:000042AD                 mov     [ebp+var_404], eax
.text:000042B3                 mov     esi, esp
.text:000042B5                 push    0
.text:000042B7                 lea     eax, [ebp+var_19C]
.text:000042BD                 push    eax
.text:000042BE                 push    0
.text:000042C0                 mov     ecx, [ebp+var_400]
.text:000042C6                 push    ecx
.text:000042C7                 mov     edx, [ebp+var_404]
.text:000042CD                 push    edx
.text:000042CE                 mov     eax, [ebp+var_3FC]
.text:000042D4                 push    eax
.text:000042D5                 mov     ecx, [ebp+var_3FC]
.text:000042DB                 mov     edx, [ecx]
.text:000042DD                 mov     eax, [edx+0Ch]
.text:000042E0                 call    eax
.text:000042E2                 cmp     esi, esp
.text:000042E4                 call    __RTC_CheckEsp
.text:000042E9                 mov     [ebp+var_408], eax
.text:000042EF                 mov     ecx, [ebp+var_408]
.text:000042F5                 mov     [ebp+var_144], ecx
.text:000042FB
.text:000042FB loc_42FB:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1882j
.text:000042FB                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1919j ...
.text:000042FB                 cmp     [ebp+var_144], 0 ; jumptable 00004046 default case
.text:00004302                 jz      loc_43B3
.text:00004308                 cmp     [ebp+var_144], 1
.text:0000430F                 jz      loc_43B1
.text:00004315                 mov     edx, [ebp+var_144]
.text:0000431B                 mov     [ebp+var_1A8], edx
.text:00004321                 cmp     [ebp+var_1A8], 0
.text:00004328                 jz      loc_43B1
.text:0000432E                 mov     eax, [ebp+var_1A8]
.text:00004334                 mov     [ebp+var_220], eax
.text:0000433A                 mov     byte ptr [ebp+var_4], 0Ah
.text:0000433E                 lea     ecx, [ebp+var_138]
.text:00004344                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00004349                 mov     byte ptr [ebp+var_4], 9
.text:0000434D                 lea     ecx, [ebp+var_B4]
.text:00004353                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00004358                 mov     byte ptr [ebp+var_4], 7
.text:0000435C                 lea     ecx, [ebp+var_A0]
.text:00004362                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00004367                 mov     byte ptr [ebp+var_4], 6
.text:0000436B                 lea     ecx, [ebp+var_90]
.text:00004371                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00004376                 mov     byte ptr [ebp+var_4], 5
.text:0000437A                 lea     ecx, [ebp+var_80]
.text:0000437D                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00004382                 mov     byte ptr [ebp+var_4], 4
.text:00004386                 lea     ecx, [ebp+var_70]
.text:00004389                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:0000438E                 mov     byte ptr [ebp+var_4], 2
.text:00004392                 lea     ecx, [ebp+var_60]
.text:00004395                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:0000439A                 mov     byte ptr [ebp+var_4], 0
.text:0000439E                 lea     ecx, [ebp+var_50]
.text:000043A1                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000043A6                 mov     eax, [ebp+var_220]
.text:000043AC                 jmp     loc_461F
.text:000043B1 ; ---------------------------------------------------------------------------
.text:000043B1
.text:000043B1 loc_43B1:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1B57j
.text:000043B1                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1B70j
.text:000043B1                 jmp     short loc_43BF
.text:000043B3 ; ---------------------------------------------------------------------------
.text:000043B3
.text:000043B3 loc_43B3:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1B4Aj
.text:000043B3                 mov     [ebp+var_155], 1
.text:000043BA                 jmp     loc_3B00
.text:000043BF ; ---------------------------------------------------------------------------
.text:000043BF
.text:000043BF loc_43BF:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+136Bj
.text:000043BF                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+139Aj ...
.text:000043BF                 cmp     [ebp+var_144], 0
.text:000043C6                 jnz     loc_4479
.text:000043CC                 mov     ecx, [ebp+var_130] ; this
.text:000043D2                 call    ?WriteEmptyFiles@CFolderOutStream@NCab@NArchive@@QAEJXZ ; NArchive::NCab::CFolderOutStream::WriteEmptyFiles(void)
.text:000043D7                 mov     [ebp+var_40C], eax
.text:000043DD                 mov     ecx, [ebp+var_40C]
.text:000043E3                 mov     [ebp+var_1AC], ecx
.text:000043E9                 cmp     [ebp+var_1AC], 0
.text:000043F0                 jz      loc_4479
.text:000043F6                 mov     edx, [ebp+var_1AC]
.text:000043FC                 mov     [ebp+var_224], edx
.text:00004402                 mov     byte ptr [ebp+var_4], 0Ah
.text:00004406                 lea     ecx, [ebp+var_138]
.text:0000440C                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00004411                 mov     byte ptr [ebp+var_4], 9
.text:00004415                 lea     ecx, [ebp+var_B4]
.text:0000441B                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00004420                 mov     byte ptr [ebp+var_4], 7
.text:00004424                 lea     ecx, [ebp+var_A0]
.text:0000442A                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000442F                 mov     byte ptr [ebp+var_4], 6
.text:00004433                 lea     ecx, [ebp+var_90]
.text:00004439                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:0000443E                 mov     byte ptr [ebp+var_4], 5
.text:00004442                 lea     ecx, [ebp+var_80]
.text:00004445                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:0000444A                 mov     byte ptr [ebp+var_4], 4
.text:0000444E                 lea     ecx, [ebp+var_70]
.text:00004451                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00004456                 mov     byte ptr [ebp+var_4], 2
.text:0000445A                 lea     ecx, [ebp+var_60]
.text:0000445D                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00004462                 mov     byte ptr [ebp+var_4], 0
.text:00004466                 lea     ecx, [ebp+var_50]
.text:00004469                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000446E                 mov     eax, [ebp+var_224]
.text:00004474                 jmp     loc_461F
.text:00004479 ; ---------------------------------------------------------------------------
.text:00004479
.text:00004479 loc_4479:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1C0Ej
.text:00004479                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1C38j
.text:00004479                 cmp     [ebp+var_144], 0
.text:00004480                 jnz     short loc_44AB
.text:00004482                 mov     ecx, [ebp+var_130] ; this
.text:00004488                 call    ?GetRemain@CFolderOutStream@NCab@NArchive@@QBE_KXZ ; NArchive::NCab::CFolderOutStream::GetRemain(void)
.text:0000448D                 mov     [ebp+var_414], eax
.text:00004493                 mov     [ebp+var_410], edx
.text:00004499                 mov     eax, [ebp+var_414]
.text:0000449F                 or      eax, [ebp+var_410]
.text:000044A5                 jz      loc_4558
.text:000044AB
.text:000044AB loc_44AB:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1CC8j
.text:000044AB                 mov     ecx, [ebp+var_130] ; this
.text:000044B1                 call    ?FlushCorrupted@CFolderOutStream@NCab@NArchive@@QAEJXZ ; NArchive::NCab::CFolderOutStream::FlushCorrupted(void)
.text:000044B6                 mov     [ebp+var_418], eax
.text:000044BC                 mov     ecx, [ebp+var_418]
.text:000044C2                 mov     [ebp+var_1B0], ecx
.text:000044C8                 cmp     [ebp+var_1B0], 0
.text:000044CF                 jz      loc_4558
.text:000044D5                 mov     edx, [ebp+var_1B0]
.text:000044DB                 mov     [ebp+var_228], edx
.text:000044E1                 mov     byte ptr [ebp+var_4], 0Ah
.text:000044E5                 lea     ecx, [ebp+var_138]
.text:000044EB                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000044F0                 mov     byte ptr [ebp+var_4], 9
.text:000044F4                 lea     ecx, [ebp+var_B4]
.text:000044FA                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000044FF                 mov     byte ptr [ebp+var_4], 7
.text:00004503                 lea     ecx, [ebp+var_A0]
.text:00004509                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000450E                 mov     byte ptr [ebp+var_4], 6
.text:00004512                 lea     ecx, [ebp+var_90]
.text:00004518                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:0000451D                 mov     byte ptr [ebp+var_4], 5
.text:00004521                 lea     ecx, [ebp+var_80]
.text:00004524                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00004529                 mov     byte ptr [ebp+var_4], 4
.text:0000452D                 lea     ecx, [ebp+var_70]
.text:00004530                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00004535                 mov     byte ptr [ebp+var_4], 2
.text:00004539                 lea     ecx, [ebp+var_60]
.text:0000453C                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00004541                 mov     byte ptr [ebp+var_4], 0
.text:00004545                 lea     ecx, [ebp+var_50]
.text:00004548                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000454D                 mov     eax, [ebp+var_228]
.text:00004553                 jmp     loc_461F
.text:00004558 ; ---------------------------------------------------------------------------
.text:00004558
.text:00004558 loc_4558:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1CEDj
.text:00004558                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1D17j
.text:00004558                 mov     eax, [ebp+var_1C]
.text:0000455B                 add     eax, [ebp+var_118]
.text:00004561                 mov     ecx, [ebp+var_18]
.text:00004564                 adc     ecx, [ebp+var_114]
.text:0000456A                 mov     [ebp+var_1C], eax
.text:0000456D                 mov     [ebp+var_18], ecx
.text:00004570                 mov     byte ptr [ebp+var_4], 0Ah
.text:00004574                 lea     ecx, [ebp+var_138]
.text:0000457A                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000457F                 jmp     loc_2C54
.text:00004584 ; ---------------------------------------------------------------------------
.text:00004584
.text:00004584 loc_4584:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4A2j
.text:00004584                 mov     [ebp+var_22C], 0
.text:0000458E                 mov     byte ptr [ebp+var_4], 9
.text:00004592                 lea     ecx, [ebp+var_B4]
.text:00004598                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:0000459D                 mov     byte ptr [ebp+var_4], 7
.text:000045A1                 lea     ecx, [ebp+var_A0]
.text:000045A7                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000045AC                 mov     byte ptr [ebp+var_4], 6
.text:000045B0                 lea     ecx, [ebp+var_90]
.text:000045B6                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000045BB                 mov     byte ptr [ebp+var_4], 5
.text:000045BF                 lea     ecx, [ebp+var_80]
.text:000045C2                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000045C7                 mov     byte ptr [ebp+var_4], 4
.text:000045CB                 lea     ecx, [ebp+var_70]
.text:000045CE                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000045D3                 mov     byte ptr [ebp+var_4], 2
.text:000045D7                 lea     ecx, [ebp+var_60]
.text:000045DA                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000045DF                 mov     byte ptr [ebp+var_4], 0
.text:000045E3                 lea     ecx, [ebp+var_50]
.text:000045E6                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000045EB                 mov     eax, [ebp+var_22C]
.text:000045F1                 jmp     short loc_461F
.text:000045F1 ?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z endp
.text:000045F1
.text:000045F3
.text:000045F3 ; =============== S U B R O U T I N E =======================================
.text:000045F3
.text:000045F3
.text:000045F3 __catch$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0 proc near
.text:000045F3                                         ; DATA XREF: .xdata$x:00004BE8o
.text:000045F3                 mov     dword ptr [ebp-230h], 8007000Eh
.text:000045FD                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00004604                 mov     eax, offset $LN118
.text:00004609                 retn
.text:00004609 __catch$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0 endp
.text:00004609
.text:0000460A ; ---------------------------------------------------------------------------
.text:0000460A                 mov     eax, offset __tryend$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1
.text:0000460F                 retn
.text:00004610 ; ---------------------------------------------------------------------------
.text:00004610
.text:00004610 __tryend$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1:
.text:00004610                                         ; DATA XREF: .text:0000460Ao
.text:00004610                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00004617                 jmp     short loc_461F
.text:00004619 ; ---------------------------------------------------------------------------
.text:00004619
.text:00004619 $LN118:                                 ; DATA XREF: __catch$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0+11o
.text:00004619                 mov     eax, [ebp-230h]
.text:0000461F ; START OF FUNCTION CHUNK FOR ?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:0000461F
.text:0000461F loc_461F:                               ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+7Ej
.text:0000461F                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+47Bj ...
.text:0000461F                 push    edx
.text:00004620                 mov     ecx, ebp
.text:00004622                 push    eax
.text:00004623                 lea     edx, $LN137
.text:00004629                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000462E                 pop     eax
.text:0000462F                 pop     edx
.text:00004630                 mov     ecx, [ebp+var_C]
.text:00004633                 mov     large fs:0, ecx
.text:0000463A                 pop     ecx
.text:0000463B                 pop     edi
.text:0000463C                 pop     esi
.text:0000463D                 pop     ebx
.text:0000463E                 add     esp, 418h
.text:00004644                 cmp     ebp, esp
.text:00004646                 call    __RTC_CheckEsp
.text:0000464B                 mov     esp, ebp
.text:0000464D                 pop     ebp
.text:0000464E                 retn    14h
.text:0000464E ; END OF FUNCTION CHUNK FOR ?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:0000464E ; ---------------------------------------------------------------------------
.text:00004651                 align 4
.text:00004654 $LN137          dd 0Dh                  ; DATA XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1E6Bo
.text:00004658                 dd offset $LN136
.text:0000465C $LN136          dd 0FFFFFFB0h, 4        ; DATA XREF: .text:00004658o
.text:00004664                 dd offset $LN122        ; "progress"
.text:00004668                 dd 0FFFFFFA0h, 4
.text:00004670                 dd offset $LN123        ; "copyCoder"
.text:00004674                 db 90h
.text:00004675                 db 3 dup(0FFh)
.text:00004678                 dd 4
.text:0000467C                 dd offset $LN124        ; "deflateDecoder"
.text:00004680                 dd 0FFFFFF80h, 4
.text:00004688                 dd offset $LN125        ; "lzxDecoder"
.text:0000468C                 dd 0FFFFFF70h, 4
.text:00004694                 dd offset $LN126        ; "quantumDecoder"
.text:00004698                 dd 0FFFFFF60h, 4
.text:000046A0                 dd offset $LN127        ; "cabBlockInStream"
.text:000046A4                 dd 0FFFFFF4Ch, 0Ch
.text:000046AC                 dd offset $LN128        ; "extractStatuses"
.text:000046B0                 dd 0FFFFFF28h, 4
.text:000046B8                 dd offset $LN129        ; "realOutStream"
.text:000046BC                 db 8, 0FFh
.text:000046BE                 dw 0FFFFh
.text:000046C0                 dd 4
.text:000046C4                 dd offset $LN130        ; "realOutStream"
.text:000046C8                 dd 0FFFFFEC8h, 4
.text:000046D0                 dd offset $LN131        ; "outStream"
.text:000046D4                 db 90h
.text:000046D5                 db 0FEh, 2 dup(0FFh)
.text:000046D8                 dd 4
.text:000046DC                 dd offset $LN132        ; "packSize"
.text:000046E0                 dd 0FFFFFE84h, 4
.text:000046E8                 dd offset $LN133        ; "unpackSize"
.text:000046EC                 dd 0FFFFFE64h, 8
.text:000046F4                 dd offset $LN134        ; "unpackRemain"
.text:000046F8 $LN134          db 'unpackRemain',0     ; DATA XREF: .text:000046F4o
.text:00004705 $LN133          db 'unpackSize',0       ; DATA XREF: .text:000046E8o
.text:00004710 $LN132          db 'packSize',0         ; DATA XREF: .text:000046DCo
.text:00004719 $LN131          db 'outStream',0        ; DATA XREF: .text:000046D0o
.text:00004723 $LN130          db 'realOutStream',0    ; DATA XREF: .text:000046C4o
.text:00004731 $LN129          db 'realOutStream',0    ; DATA XREF: .text:000046B8o
.text:0000473F $LN128          db 'extractStatuses',0  ; DATA XREF: .text:000046ACo
.text:0000474F $LN127          db 'cabBlockInStream',0 ; DATA XREF: .text:000046A0o
.text:00004760 $LN126          db 'quantumDecoder',0   ; DATA XREF: .text:00004694o
.text:0000476F $LN125          db 'lzxDecoder',0       ; DATA XREF: .text:00004688o
.text:0000477A $LN124          db 'deflateDecoder',0   ; DATA XREF: .text:0000467Co
.text:00004789 $LN123          db 'copyCoder',0        ; DATA XREF: .text:00004670o
.text:00004793 $LN122          db 'progress',0         ; DATA XREF: .text:00004664o
.text:0000479C $LN138          dd offset $LN42_0       ; DATA XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+F24r
.text:0000479C                 dd offset $LN41_0       ; jump table for switch statement
.text:0000479C                 dd offset $LN37
.text:0000479C                 dd offset $LN39_1
.text:000047AC $LN139          dd offset $LN15_1       ; DATA XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+188Er
.text:000047AC                 dd offset $LN14_0       ; jump table for switch statement
.text:000047AC                 dd offset $LN9_1
.text:000047AC                 dd offset $LN10_0
.text:000047BC                 db 0Ch dup(0CCh)
.text:000047C8
.text:000047C8 ; =============== S U B R O U T I N E =======================================
.text:000047C8
.text:000047C8 ; Attributes: bp-based frame
.text:000047C8
.text:000047C8 ; __int32 __stdcall NArchive::NCab::CHandler::GetNumberOfItems(NArchive::NCab::CHandler *this, unsigned int *)
.text:000047C8                 public ?GetNumberOfItems@CHandler@NCab@NArchive@@UAGJPAI@Z
.text:000047C8 ?GetNumberOfItems@CHandler@NCab@NArchive@@UAGJPAI@Z proc near
.text:000047C8
.text:000047C8 this            = dword ptr  8
.text:000047C8 arg_4           = dword ptr  0Ch
.text:000047C8
.text:000047C8                 push    ebp
.text:000047C9                 mov     ebp, esp
.text:000047CB                 mov     ecx, [ebp+this]
.text:000047CE                 add     ecx, 14h
.text:000047D1                 call    ?Size@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NCab::CMvItem>::Size(void)
.text:000047D6                 mov     ecx, [ebp+arg_4]
.text:000047D9                 mov     [ecx], eax
.text:000047DB                 xor     eax, eax
.text:000047DD                 cmp     ebp, esp
.text:000047DF                 call    __RTC_CheckEsp
.text:000047E4                 pop     ebp
.text:000047E5                 retn    8
.text:000047E5 ?GetNumberOfItems@CHandler@NCab@NArchive@@UAGJPAI@Z endp
.text:000047E5
.text:000047E5 _text           ends
.text:000047E5
.rtc$TMZ:000047E8 ; ===========================================================================
.rtc$TMZ:000047E8
.rtc$TMZ:000047E8 ; Segment type: Pure data
.rtc$TMZ:000047E8 ; Segment permissions: Read
.rtc$TMZ:000047E8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000047E8                 assume cs:_rtc$TMZ
.rtc$TMZ:000047E8                 ;org 47E8h
.rtc$TMZ:000047E8 ; COMDAT (pick any)
.rtc$TMZ:000047E8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000047E8 _rtc$TMZ        ends
.rtc$TMZ:000047E8
.rtc$IMZ:000047EC ; ===========================================================================
.rtc$IMZ:000047EC
.rtc$IMZ:000047EC ; Segment type: Pure data
.rtc$IMZ:000047EC ; Segment permissions: Read
.rtc$IMZ:000047EC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000047EC                 assume cs:_rtc$IMZ
.rtc$IMZ:000047EC                 ;org 47ECh
.rtc$IMZ:000047EC ; COMDAT (pick any)
.rtc$IMZ:000047EC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000047EC _rtc$IMZ        ends
.rtc$IMZ:000047EC
.text$x:000047F0 ; ===========================================================================
.text$x:000047F0
.text$x:000047F0 ; Segment type: Pure code
.text$x:000047F0 ; Segment permissions: Read/Execute
.text$x:000047F0 _text$x         segment para public 'CODE' use32
.text$x:000047F0                 assume cs:_text$x
.text$x:000047F0                 ;org 47F0h
.text$x:000047F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000047F0
.text$x:000047F0 ; =============== S U B R O U T I N E =======================================
.text$x:000047F0
.text$x:000047F0
.text$x:000047F0 __unwindfunclet$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$2 proc near
.text$x:000047F0                                         ; DATA XREF: .xdata$x:00004A44o
.text$x:000047F0                 lea     ecx, [ebp-28h]  ; this
.text$x:000047F3                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:000047F3 __unwindfunclet$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$2 endp
.text$x:000047F3
.text$x:000047F8
.text$x:000047F8 ; =============== S U B R O U T I N E =======================================
.text$x:000047F8
.text$x:000047F8
.text$x:000047F8 __unwindfunclet$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$3 proc near
.text$x:000047F8                                         ; DATA XREF: .xdata$x:00004A4Co
.text$x:000047F8                 lea     ecx, [ebp-68h]  ; this
.text$x:000047FB                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000047FB __unwindfunclet$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$3 endp
.text$x:000047FB
.text$x:00004800
.text$x:00004800 ; =============== S U B R O U T I N E =======================================
.text$x:00004800
.text$x:00004800
.text$x:00004800 __unwindfunclet$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$4 proc near
.text$x:00004800                                         ; DATA XREF: .xdata$x:00004A54o
.text$x:00004800                 lea     ecx, [ebp-0D0h] ; this
.text$x:00004806                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00004806 __unwindfunclet$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$4 endp
.text$x:00004806
.text$x:0000480B
.text$x:0000480B ; =============== S U B R O U T I N E =======================================
.text$x:0000480B
.text$x:0000480B
.text$x:0000480B __ehhandler$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z proc near
.text$x:0000480B                                         ; DATA XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+5o
.text$x:0000480B
.text$x:0000480B arg_4           = dword ptr  8
.text$x:0000480B
.text$x:0000480B                 mov     edx, [esp+arg_4]
.text$x:0000480F                 lea     eax, [edx+0Ch]
.text$x:00004812                 mov     ecx, [edx-16Ch]
.text$x:00004818                 xor     ecx, eax
.text$x:0000481A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000481F                 mov     ecx, [edx-8]
.text$x:00004822                 xor     ecx, eax
.text$x:00004824                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004829                 mov     eax, offset __ehfuncinfo$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text$x:0000482E                 jmp     ___CxxFrameHandler3
.text$x:0000482E __ehhandler$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z endp
.text$x:0000482E
.text$x:00004833
.text$x:00004833 ; =============== S U B R O U T I N E =======================================
.text$x:00004833
.text$x:00004833
.text$x:00004833 __unwindfunclet$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2 proc near
.text$x:00004833                                         ; DATA XREF: .xdata$x:00004AB4o
.text$x:00004833                 lea     ecx, [ebp-28h]  ; this
.text$x:00004836                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00004836 __unwindfunclet$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2 endp
.text$x:00004836
.text$x:0000483B
.text$x:0000483B ; =============== S U B R O U T I N E =======================================
.text$x:0000483B
.text$x:0000483B
.text$x:0000483B __unwindfunclet$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3 proc near
.text$x:0000483B                                         ; DATA XREF: .xdata$x:00004ABCo
.text$x:0000483B                 lea     ecx, [ebp-4Ch]  ; this
.text$x:0000483E                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000483E __unwindfunclet$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3 endp
.text$x:0000483E
.text$x:00004843
.text$x:00004843 ; =============== S U B R O U T I N E =======================================
.text$x:00004843
.text$x:00004843
.text$x:00004843 __unwindfunclet$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$4 proc near
.text$x:00004843                                         ; DATA XREF: .xdata$x:00004AC4o
.text$x:00004843                 lea     ecx, [ebp-0ACh] ; this
.text$x:00004849                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004849 __unwindfunclet$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$4 endp
.text$x:00004849
.text$x:0000484E
.text$x:0000484E ; =============== S U B R O U T I N E =======================================
.text$x:0000484E
.text$x:0000484E
.text$x:0000484E __unwindfunclet$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$5 proc near
.text$x:0000484E                                         ; DATA XREF: .xdata$x:00004ACCo
.text$x:0000484E                 lea     ecx, [ebp-0B8h] ; this
.text$x:00004854                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00004854 __unwindfunclet$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$5 endp
.text$x:00004854
.text$x:00004859
.text$x:00004859 ; =============== S U B R O U T I N E =======================================
.text$x:00004859
.text$x:00004859
.text$x:00004859 __ehhandler$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z proc near
.text$x:00004859                                         ; DATA XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+5o
.text$x:00004859
.text$x:00004859 arg_4           = dword ptr  8
.text$x:00004859
.text$x:00004859                 mov     edx, [esp+arg_4]
.text$x:0000485D                 lea     eax, [edx+0Ch]
.text$x:00004860                 mov     ecx, [edx-110h]
.text$x:00004866                 xor     ecx, eax
.text$x:00004868                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000486D                 mov     ecx, [edx-8]
.text$x:00004870                 xor     ecx, eax
.text$x:00004872                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004877                 mov     eax, offset __ehfuncinfo$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text$x:0000487C                 jmp     ___CxxFrameHandler3
.text$x:0000487C __ehhandler$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z endp
.text$x:0000487C
.text$x:00004881
.text$x:00004881 ; =============== S U B R O U T I N E =======================================
.text$x:00004881
.text$x:00004881
.text$x:00004881 __unwindfunclet$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2 proc near
.text$x:00004881                                         ; DATA XREF: .xdata$x:00004B2Co
.text$x:00004881                 lea     ecx, [ebp-4Ch]  ; this
.text$x:00004884                 jmp     ??1CInArchive@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CInArchive::~CInArchive(void)
.text$x:00004884 __unwindfunclet$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2 endp
.text$x:00004884
.text$x:00004889
.text$x:00004889 ; =============== S U B R O U T I N E =======================================
.text$x:00004889
.text$x:00004889
.text$x:00004889 __unwindfunclet$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$3 proc near
.text$x:00004889                                         ; DATA XREF: .xdata$x:00004B34o
.text$x:00004889                 lea     ecx, [ebp-58h]
.text$x:0000488C                 jmp     ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>(void)
.text$x:0000488C __unwindfunclet$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$3 endp
.text$x:0000488C
.text$x:00004891
.text$x:00004891 ; =============== S U B R O U T I N E =======================================
.text$x:00004891
.text$x:00004891
.text$x:00004891 __unwindfunclet$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$4 proc near
.text$x:00004891                                         ; DATA XREF: .xdata$x:00004B3Co
.text$x:00004891                 lea     ecx, [ebp-64h]
.text$x:00004894                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:00004894 __unwindfunclet$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$4 endp
.text$x:00004894
.text$x:00004899
.text$x:00004899 ; =============== S U B R O U T I N E =======================================
.text$x:00004899
.text$x:00004899
.text$x:00004899 __unwindfunclet$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$5 proc near
.text$x:00004899                                         ; DATA XREF: .xdata$x:00004B44o
.text$x:00004899                 lea     ecx, [ebp-104h] ; this
.text$x:0000489F                 jmp     ??1CDatabaseEx@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CDatabaseEx::~CDatabaseEx(void)
.text$x:0000489F __unwindfunclet$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$5 endp
.text$x:0000489F
.text$x:000048A4
.text$x:000048A4 ; =============== S U B R O U T I N E =======================================
.text$x:000048A4
.text$x:000048A4
.text$x:000048A4 __unwindfunclet$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$6 proc near
.text$x:000048A4                                         ; DATA XREF: .xdata$x:00004B4Co
.text$x:000048A4                 lea     ecx, [ebp-13Ch] ; this
.text$x:000048AA                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000048AA __unwindfunclet$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$6 endp
.text$x:000048AA
.text$x:000048AF
.text$x:000048AF ; =============== S U B R O U T I N E =======================================
.text$x:000048AF
.text$x:000048AF
.text$x:000048AF __ehhandler$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z proc near
.text$x:000048AF                                         ; DATA XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+5o
.text$x:000048AF
.text$x:000048AF arg_4           = dword ptr  8
.text$x:000048AF
.text$x:000048AF                 mov     edx, [esp+arg_4]
.text$x:000048B3                 lea     eax, [edx+0Ch]
.text$x:000048B6                 mov     ecx, [edx-1DCh]
.text$x:000048BC                 xor     ecx, eax
.text$x:000048BE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000048C3                 mov     eax, offset __ehfuncinfo$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text$x:000048C8                 jmp     ___CxxFrameHandler3
.text$x:000048C8 __ehhandler$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z endp
.text$x:000048C8
.text$x:000048CD
.text$x:000048CD ; =============== S U B R O U T I N E =======================================
.text$x:000048CD
.text$x:000048CD
.text$x:000048CD __unwindfunclet$?OpenFile@CFolderOutStream@NCab@NArchive@@AAEJXZ$0 proc near
.text$x:000048CD                                         ; DATA XREF: .xdata$x:00004B5Co
.text$x:000048CD                 lea     ecx, [ebp-30h]
.text$x:000048D0                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:000048D0 __unwindfunclet$?OpenFile@CFolderOutStream@NCab@NArchive@@AAEJXZ$0 endp
.text$x:000048D0
.text$x:000048D5
.text$x:000048D5 ; =============== S U B R O U T I N E =======================================
.text$x:000048D5
.text$x:000048D5
.text$x:000048D5 __ehhandler$?OpenFile@CFolderOutStream@NCab@NArchive@@AAEJXZ proc near
.text$x:000048D5                                         ; DATA XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+5o
.text$x:000048D5
.text$x:000048D5 arg_4           = dword ptr  8
.text$x:000048D5
.text$x:000048D5                 mov     edx, [esp+arg_4]
.text$x:000048D9                 lea     eax, [edx+0Ch]
.text$x:000048DC                 mov     ecx, [edx-64h]
.text$x:000048DF                 xor     ecx, eax
.text$x:000048E1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000048E6                 mov     eax, offset __ehfuncinfo$?OpenFile@CFolderOutStream@NCab@NArchive@@AAEJXZ
.text$x:000048EB                 jmp     ___CxxFrameHandler3
.text$x:000048EB __ehhandler$?OpenFile@CFolderOutStream@NCab@NArchive@@AAEJXZ endp
.text$x:000048EB
.text$x:000048F0
.text$x:000048F0 ; =============== S U B R O U T I N E =======================================
.text$x:000048F0
.text$x:000048F0
.text$x:000048F0 __ehhandler$?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z proc near
.text$x:000048F0                                         ; DATA XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+5o
.text$x:000048F0
.text$x:000048F0 arg_4           = dword ptr  8
.text$x:000048F0
.text$x:000048F0                 mov     edx, [esp+arg_4]
.text$x:000048F4                 lea     eax, [edx+0Ch]
.text$x:000048F7                 mov     ecx, [edx-0CCh]
.text$x:000048FD                 xor     ecx, eax
.text$x:000048FF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004904                 mov     eax, offset __ehfuncinfo$?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z
.text$x:00004909                 jmp     ___CxxFrameHandler3
.text$x:00004909 __ehhandler$?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z endp
.text$x:00004909
.text$x:0000490E
.text$x:0000490E ; =============== S U B R O U T I N E =======================================
.text$x:0000490E
.text$x:0000490E
.text$x:0000490E __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2 proc near
.text$x:0000490E                                         ; DATA XREF: .xdata$x:00004C30o
.text$x:0000490E                 mov     eax, [ebp-1B8h]
.text$x:00004914                 push    eax             ; void *
.text$x:00004915                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000491A                 pop     ecx
.text$x:0000491B                 retn
.text$x:0000491B __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2 endp
.text$x:0000491B
.text$x:0000491C
.text$x:0000491C ; =============== S U B R O U T I N E =======================================
.text$x:0000491C
.text$x:0000491C
.text$x:0000491C __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3 proc near
.text$x:0000491C                                         ; DATA XREF: .xdata$x:00004C38o
.text$x:0000491C                 lea     ecx, [ebp-50h]
.text$x:0000491F                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:0000491F __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3 endp
.text$x:0000491F
.text$x:00004924
.text$x:00004924 ; =============== S U B R O U T I N E =======================================
.text$x:00004924
.text$x:00004924
.text$x:00004924 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4 proc near
.text$x:00004924                                         ; DATA XREF: .xdata$x:00004C40o
.text$x:00004924                 mov     eax, [ebp-1C0h]
.text$x:0000492A                 push    eax             ; void *
.text$x:0000492B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004930                 pop     ecx
.text$x:00004931                 retn
.text$x:00004931 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4 endp
.text$x:00004931
.text$x:00004932
.text$x:00004932 ; =============== S U B R O U T I N E =======================================
.text$x:00004932
.text$x:00004932
.text$x:00004932 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5 proc near
.text$x:00004932                                         ; DATA XREF: .xdata$x:00004C48o
.text$x:00004932                 lea     ecx, [ebp-60h]
.text$x:00004935                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00004935 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5 endp
.text$x:00004935
.text$x:0000493A
.text$x:0000493A ; =============== S U B R O U T I N E =======================================
.text$x:0000493A
.text$x:0000493A
.text$x:0000493A __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6 proc near
.text$x:0000493A                                         ; DATA XREF: .xdata$x:00004C50o
.text$x:0000493A                 lea     ecx, [ebp-70h]
.text$x:0000493D                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:0000493D __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6 endp
.text$x:0000493D
.text$x:00004942
.text$x:00004942 ; =============== S U B R O U T I N E =======================================
.text$x:00004942
.text$x:00004942
.text$x:00004942 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7 proc near
.text$x:00004942                                         ; DATA XREF: .xdata$x:00004C58o
.text$x:00004942                 lea     ecx, [ebp-80h]
.text$x:00004945                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00004945 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7 endp
.text$x:00004945
.text$x:0000494A
.text$x:0000494A ; =============== S U B R O U T I N E =======================================
.text$x:0000494A
.text$x:0000494A
.text$x:0000494A __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8 proc near
.text$x:0000494A                                         ; DATA XREF: .xdata$x:00004C60o
.text$x:0000494A                 lea     ecx, [ebp-90h]
.text$x:00004950                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00004950 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8 endp
.text$x:00004950
.text$x:00004955
.text$x:00004955 ; =============== S U B R O U T I N E =======================================
.text$x:00004955
.text$x:00004955
.text$x:00004955 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9 proc near
.text$x:00004955                                         ; DATA XREF: .xdata$x:00004C68o
.text$x:00004955                 mov     eax, [ebp-1C8h]
.text$x:0000495B                 push    eax             ; void *
.text$x:0000495C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004961                 pop     ecx
.text$x:00004962                 retn
.text$x:00004962 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9 endp
.text$x:00004962
.text$x:00004963
.text$x:00004963 ; =============== S U B R O U T I N E =======================================
.text$x:00004963
.text$x:00004963
.text$x:00004963 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10 proc near
.text$x:00004963                                         ; DATA XREF: .xdata$x:00004C70o
.text$x:00004963                 lea     ecx, [ebp-0A0h]
.text$x:00004969                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00004969 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10 endp
.text$x:00004969
.text$x:0000496E
.text$x:0000496E ; =============== S U B R O U T I N E =======================================
.text$x:0000496E
.text$x:0000496E
.text$x:0000496E __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$11 proc near
.text$x:0000496E                                         ; DATA XREF: .xdata$x:00004C78o
.text$x:0000496E                 lea     ecx, [ebp-0B4h]
.text$x:00004974                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:00004974 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$11 endp
.text$x:00004974
.text$x:00004979
.text$x:00004979 ; =============== S U B R O U T I N E =======================================
.text$x:00004979
.text$x:00004979
.text$x:00004979 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$12 proc near
.text$x:00004979                                         ; DATA XREF: .xdata$x:00004C80o
.text$x:00004979                 lea     ecx, [ebp-0D8h]
.text$x:0000497F                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:0000497F __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$12 endp
.text$x:0000497F
.text$x:00004984
.text$x:00004984 ; =============== S U B R O U T I N E =======================================
.text$x:00004984
.text$x:00004984
.text$x:00004984 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$13 proc near
.text$x:00004984                                         ; DATA XREF: .xdata$x:00004C88o
.text$x:00004984                 lea     ecx, [ebp-0F8h]
.text$x:0000498A                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:0000498A __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$13 endp
.text$x:0000498A
.text$x:0000498F
.text$x:0000498F ; =============== S U B R O U T I N E =======================================
.text$x:0000498F
.text$x:0000498F
.text$x:0000498F __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$14 proc near
.text$x:0000498F                                         ; DATA XREF: .xdata$x:00004C90o
.text$x:0000498F                 mov     eax, [ebp-1F0h]
.text$x:00004995                 push    eax             ; void *
.text$x:00004996                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000499B                 pop     ecx
.text$x:0000499C                 retn
.text$x:0000499C __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$14 endp
.text$x:0000499C
.text$x:0000499D
.text$x:0000499D ; =============== S U B R O U T I N E =======================================
.text$x:0000499D
.text$x:0000499D
.text$x:0000499D __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$15 proc near
.text$x:0000499D                                         ; DATA XREF: .xdata$x:00004C98o
.text$x:0000499D                 lea     ecx, [ebp-138h]
.text$x:000049A3                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:000049A3 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$15 endp
.text$x:000049A3
.text$x:000049A8
.text$x:000049A8 ; =============== S U B R O U T I N E =======================================
.text$x:000049A8
.text$x:000049A8
.text$x:000049A8 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$16 proc near
.text$x:000049A8                                         ; DATA XREF: .xdata$x:00004CA0o
.text$x:000049A8                 mov     eax, [ebp-1F8h]
.text$x:000049AE                 push    eax             ; void *
.text$x:000049AF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000049B4                 pop     ecx
.text$x:000049B5                 retn
.text$x:000049B5 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$16 endp
.text$x:000049B5
.text$x:000049B6
.text$x:000049B6 ; =============== S U B R O U T I N E =======================================
.text$x:000049B6
.text$x:000049B6
.text$x:000049B6 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$17 proc near
.text$x:000049B6                                         ; DATA XREF: .xdata$x:00004CA8o
.text$x:000049B6                 mov     eax, [ebp-200h]
.text$x:000049BC                 push    eax             ; void *
.text$x:000049BD                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000049C2                 pop     ecx
.text$x:000049C3                 retn
.text$x:000049C3 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$17 endp
.text$x:000049C3
.text$x:000049C4
.text$x:000049C4 ; =============== S U B R O U T I N E =======================================
.text$x:000049C4
.text$x:000049C4
.text$x:000049C4 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$18 proc near
.text$x:000049C4                                         ; DATA XREF: .xdata$x:00004CB0o
.text$x:000049C4                 mov     eax, [ebp-208h]
.text$x:000049CA                 push    eax             ; void *
.text$x:000049CB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000049D0                 pop     ecx
.text$x:000049D1                 retn
.text$x:000049D1 __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$18 endp
.text$x:000049D1
.text$x:000049D2
.text$x:000049D2 ; =============== S U B R O U T I N E =======================================
.text$x:000049D2
.text$x:000049D2
.text$x:000049D2 __ehhandler$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z proc near
.text$x:000049D2                                         ; DATA XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5o
.text$x:000049D2
.text$x:000049D2 arg_4           = dword ptr  8
.text$x:000049D2
.text$x:000049D2                 mov     edx, [esp+arg_4]
.text$x:000049D6                 lea     eax, [edx+0Ch]
.text$x:000049D9                 mov     ecx, [edx-41Ch]
.text$x:000049DF                 xor     ecx, eax
.text$x:000049E1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000049E6                 mov     eax, offset __ehfuncinfo$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text$x:000049EB                 jmp     ___CxxFrameHandler3
.text$x:000049EB __ehhandler$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z endp
.text$x:000049EB
.text$x:000049EB _text$x         ends
.text$x:000049EB
.xdata$x:000049F0 ; ===========================================================================
.xdata$x:000049F0
.xdata$x:000049F0 ; Segment type: Pure data
.xdata$x:000049F0 ; Segment permissions: Read
.xdata$x:000049F0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000049F0                 assume cs:_xdata$x
.xdata$x:000049F0                 ;org 49F0h
.xdata$x:000049F0 __catchsym$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$5 dd offset $SG71445+4
.xdata$x:000049F0                                         ; DATA XREF: .xdata$x:00004A10o
.xdata$x:000049F0                                         ; ""
.xdata$x:000049F4                 db    0
.xdata$x:000049F5                 db    0
.xdata$x:000049F6                 db    0
.xdata$x:000049F7                 db    0
.xdata$x:000049F8                 db    0
.xdata$x:000049F9                 db    0
.xdata$x:000049FA                 db    0
.xdata$x:000049FB                 db    0
.xdata$x:000049FC                 dd offset __catch$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0
.xdata$x:00004A00 __tryblocktable$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z db    0
.xdata$x:00004A00                                         ; DATA XREF: .xdata$x:00004A24o
.xdata$x:00004A01                 db    0
.xdata$x:00004A02                 db    0
.xdata$x:00004A03                 db    0
.xdata$x:00004A04                 db    3
.xdata$x:00004A05                 db    0
.xdata$x:00004A06                 db    0
.xdata$x:00004A07                 db    0
.xdata$x:00004A08                 db    4
.xdata$x:00004A09                 db    0
.xdata$x:00004A0A                 db    0
.xdata$x:00004A0B                 db    0
.xdata$x:00004A0C                 db    1
.xdata$x:00004A0D                 db    0
.xdata$x:00004A0E                 db    0
.xdata$x:00004A0F                 db    0
.xdata$x:00004A10                 dd offset __catchsym$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$5
.xdata$x:00004A14 __ehfuncinfo$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z db  22h ; "
.xdata$x:00004A14                                         ; DATA XREF: __ehhandler$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z+1Eo
.xdata$x:00004A15                 db    5
.xdata$x:00004A16                 db  93h ; ô
.xdata$x:00004A17                 db  19h
.xdata$x:00004A18                 db    5
.xdata$x:00004A19                 db    0
.xdata$x:00004A1A                 db    0
.xdata$x:00004A1B                 db    0
.xdata$x:00004A1C                 dd offset __unwindtable$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.xdata$x:00004A20                 db    1
.xdata$x:00004A21                 db    0
.xdata$x:00004A22                 db    0
.xdata$x:00004A23                 db    0
.xdata$x:00004A24                 dd offset __tryblocktable$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.xdata$x:00004A28                 db    0
.xdata$x:00004A29                 db    0
.xdata$x:00004A2A                 db    0
.xdata$x:00004A2B                 db    0
.xdata$x:00004A2C                 db    0
.xdata$x:00004A2D                 db    0
.xdata$x:00004A2E                 db    0
.xdata$x:00004A2F                 db    0
.xdata$x:00004A30                 db    0
.xdata$x:00004A31                 db    0
.xdata$x:00004A32                 db    0
.xdata$x:00004A33                 db    0
.xdata$x:00004A34                 db    1
.xdata$x:00004A35                 db    0
.xdata$x:00004A36                 db    0
.xdata$x:00004A37                 db    0
.xdata$x:00004A38 __unwindtable$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z db 0FFh
.xdata$x:00004A38                                         ; DATA XREF: .xdata$x:00004A1Co
.xdata$x:00004A39                 db 0FFh
.xdata$x:00004A3A                 db 0FFh
.xdata$x:00004A3B                 db 0FFh
.xdata$x:00004A3C                 db    0
.xdata$x:00004A3D                 db    0
.xdata$x:00004A3E                 db    0
.xdata$x:00004A3F                 db    0
.xdata$x:00004A40                 db    0
.xdata$x:00004A41                 db    0
.xdata$x:00004A42                 db    0
.xdata$x:00004A43                 db    0
.xdata$x:00004A44                 dd offset __unwindfunclet$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$2
.xdata$x:00004A48                 db    1
.xdata$x:00004A49                 db    0
.xdata$x:00004A4A                 db    0
.xdata$x:00004A4B                 db    0
.xdata$x:00004A4C                 dd offset __unwindfunclet$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$3
.xdata$x:00004A50                 db    1
.xdata$x:00004A51                 db    0
.xdata$x:00004A52                 db    0
.xdata$x:00004A53                 db    0
.xdata$x:00004A54                 dd offset __unwindfunclet$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$4
.xdata$x:00004A58                 db 0FFh
.xdata$x:00004A59                 db 0FFh
.xdata$x:00004A5A                 db 0FFh
.xdata$x:00004A5B                 db 0FFh
.xdata$x:00004A5C                 db    0
.xdata$x:00004A5D                 db    0
.xdata$x:00004A5E                 db    0
.xdata$x:00004A5F                 db    0
.xdata$x:00004A60 __catchsym$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$6 dd offset $SG71445+4
.xdata$x:00004A60                                         ; DATA XREF: .xdata$x:00004A80o
.xdata$x:00004A60                                         ; ""
.xdata$x:00004A64                 db    0
.xdata$x:00004A65                 db    0
.xdata$x:00004A66                 db    0
.xdata$x:00004A67                 db    0
.xdata$x:00004A68                 db    0
.xdata$x:00004A69                 db    0
.xdata$x:00004A6A                 db    0
.xdata$x:00004A6B                 db    0
.xdata$x:00004A6C                 dd offset __catch$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0
.xdata$x:00004A70 __tryblocktable$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z db    0
.xdata$x:00004A70                                         ; DATA XREF: .xdata$x:00004A94o
.xdata$x:00004A71                 db    0
.xdata$x:00004A72                 db    0
.xdata$x:00004A73                 db    0
.xdata$x:00004A74                 db    4
.xdata$x:00004A75                 db    0
.xdata$x:00004A76                 db    0
.xdata$x:00004A77                 db    0
.xdata$x:00004A78                 db    5
.xdata$x:00004A79                 db    0
.xdata$x:00004A7A                 db    0
.xdata$x:00004A7B                 db    0
.xdata$x:00004A7C                 db    1
.xdata$x:00004A7D                 db    0
.xdata$x:00004A7E                 db    0
.xdata$x:00004A7F                 db    0
.xdata$x:00004A80                 dd offset __catchsym$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$6
.xdata$x:00004A84 __ehfuncinfo$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z db  22h ; "
.xdata$x:00004A84                                         ; DATA XREF: __ehhandler$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z+1Eo
.xdata$x:00004A85                 db    5
.xdata$x:00004A86                 db  93h ; ô
.xdata$x:00004A87                 db  19h
.xdata$x:00004A88                 db    6
.xdata$x:00004A89                 db    0
.xdata$x:00004A8A                 db    0
.xdata$x:00004A8B                 db    0
.xdata$x:00004A8C                 dd offset __unwindtable$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.xdata$x:00004A90                 db    1
.xdata$x:00004A91                 db    0
.xdata$x:00004A92                 db    0
.xdata$x:00004A93                 db    0
.xdata$x:00004A94                 dd offset __tryblocktable$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.xdata$x:00004A98                 db    0
.xdata$x:00004A99                 db    0
.xdata$x:00004A9A                 db    0
.xdata$x:00004A9B                 db    0
.xdata$x:00004A9C                 db    0
.xdata$x:00004A9D                 db    0
.xdata$x:00004A9E                 db    0
.xdata$x:00004A9F                 db    0
.xdata$x:00004AA0                 db    0
.xdata$x:00004AA1                 db    0
.xdata$x:00004AA2                 db    0
.xdata$x:00004AA3                 db    0
.xdata$x:00004AA4                 db    1
.xdata$x:00004AA5                 db    0
.xdata$x:00004AA6                 db    0
.xdata$x:00004AA7                 db    0
.xdata$x:00004AA8 __unwindtable$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z db 0FFh
.xdata$x:00004AA8                                         ; DATA XREF: .xdata$x:00004A8Co
.xdata$x:00004AA9                 db 0FFh
.xdata$x:00004AAA                 db 0FFh
.xdata$x:00004AAB                 db 0FFh
.xdata$x:00004AAC                 db    0
.xdata$x:00004AAD                 db    0
.xdata$x:00004AAE                 db    0
.xdata$x:00004AAF                 db    0
.xdata$x:00004AB0                 db    0
.xdata$x:00004AB1                 db    0
.xdata$x:00004AB2                 db    0
.xdata$x:00004AB3                 db    0
.xdata$x:00004AB4                 dd offset __unwindfunclet$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2
.xdata$x:00004AB8                 db    1
.xdata$x:00004AB9                 db    0
.xdata$x:00004ABA                 db    0
.xdata$x:00004ABB                 db    0
.xdata$x:00004ABC                 dd offset __unwindfunclet$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3
.xdata$x:00004AC0                 db    2
.xdata$x:00004AC1                 db    0
.xdata$x:00004AC2                 db    0
.xdata$x:00004AC3                 db    0
.xdata$x:00004AC4                 dd offset __unwindfunclet$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$4
.xdata$x:00004AC8                 db    2
.xdata$x:00004AC9                 db    0
.xdata$x:00004ACA                 db    0
.xdata$x:00004ACB                 db    0
.xdata$x:00004ACC                 dd offset __unwindfunclet$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$5
.xdata$x:00004AD0                 db 0FFh
.xdata$x:00004AD1                 db 0FFh
.xdata$x:00004AD2                 db 0FFh
.xdata$x:00004AD3                 db 0FFh
.xdata$x:00004AD4                 db    0
.xdata$x:00004AD5                 db    0
.xdata$x:00004AD6                 db    0
.xdata$x:00004AD7                 db    0
.xdata$x:00004AD8 __catchsym$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$7 dd offset $SG71445+4
.xdata$x:00004AD8                                         ; DATA XREF: .xdata$x:00004AF8o
.xdata$x:00004AD8                                         ; ""
.xdata$x:00004ADC                 db    0
.xdata$x:00004ADD                 db    0
.xdata$x:00004ADE                 db    0
.xdata$x:00004ADF                 db    0
.xdata$x:00004AE0                 db    0
.xdata$x:00004AE1                 db    0
.xdata$x:00004AE2                 db    0
.xdata$x:00004AE3                 db    0
.xdata$x:00004AE4                 dd offset __catch$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0
.xdata$x:00004AE8 __tryblocktable$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db    0
.xdata$x:00004AE8                                         ; DATA XREF: .xdata$x:00004B0Co
.xdata$x:00004AE9                 db    0
.xdata$x:00004AEA                 db    0
.xdata$x:00004AEB                 db    0
.xdata$x:00004AEC                 db    5
.xdata$x:00004AED                 db    0
.xdata$x:00004AEE                 db    0
.xdata$x:00004AEF                 db    0
.xdata$x:00004AF0                 db    6
.xdata$x:00004AF1                 db    0
.xdata$x:00004AF2                 db    0
.xdata$x:00004AF3                 db    0
.xdata$x:00004AF4                 db    1
.xdata$x:00004AF5                 db    0
.xdata$x:00004AF6                 db    0
.xdata$x:00004AF7                 db    0
.xdata$x:00004AF8                 dd offset __catchsym$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$7
.xdata$x:00004AFC __ehfuncinfo$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db  22h ; "
.xdata$x:00004AFC                                         ; DATA XREF: __ehhandler$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z+14o
.xdata$x:00004AFD                 db    5
.xdata$x:00004AFE                 db  93h ; ô
.xdata$x:00004AFF                 db  19h
.xdata$x:00004B00                 db    7
.xdata$x:00004B01                 db    0
.xdata$x:00004B02                 db    0
.xdata$x:00004B03                 db    0
.xdata$x:00004B04                 dd offset __unwindtable$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.xdata$x:00004B08                 db    1
.xdata$x:00004B09                 db    0
.xdata$x:00004B0A                 db    0
.xdata$x:00004B0B                 db    0
.xdata$x:00004B0C                 dd offset __tryblocktable$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.xdata$x:00004B10                 db    0
.xdata$x:00004B11                 db    0
.xdata$x:00004B12                 db    0
.xdata$x:00004B13                 db    0
.xdata$x:00004B14                 db    0
.xdata$x:00004B15                 db    0
.xdata$x:00004B16                 db    0
.xdata$x:00004B17                 db    0
.xdata$x:00004B18                 db    0
.xdata$x:00004B19                 db    0
.xdata$x:00004B1A                 db    0
.xdata$x:00004B1B                 db    0
.xdata$x:00004B1C                 db    1
.xdata$x:00004B1D                 db    0
.xdata$x:00004B1E                 db    0
.xdata$x:00004B1F                 db    0
.xdata$x:00004B20 __unwindtable$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db 0FFh
.xdata$x:00004B20                                         ; DATA XREF: .xdata$x:00004B04o
.xdata$x:00004B21                 db 0FFh
.xdata$x:00004B22                 db 0FFh
.xdata$x:00004B23                 db 0FFh
.xdata$x:00004B24                 db    0
.xdata$x:00004B25                 db    0
.xdata$x:00004B26                 db    0
.xdata$x:00004B27                 db    0
.xdata$x:00004B28                 db    0
.xdata$x:00004B29                 db    0
.xdata$x:00004B2A                 db    0
.xdata$x:00004B2B                 db    0
.xdata$x:00004B2C                 dd offset __unwindfunclet$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2
.xdata$x:00004B30                 db    1
.xdata$x:00004B31                 db    0
.xdata$x:00004B32                 db    0
.xdata$x:00004B33                 db    0
.xdata$x:00004B34                 dd offset __unwindfunclet$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$3
.xdata$x:00004B38                 db    2
.xdata$x:00004B39                 db    0
.xdata$x:00004B3A                 db    0
.xdata$x:00004B3B                 db    0
.xdata$x:00004B3C                 dd offset __unwindfunclet$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$4
.xdata$x:00004B40                 db    3
.xdata$x:00004B41                 db    0
.xdata$x:00004B42                 db    0
.xdata$x:00004B43                 db    0
.xdata$x:00004B44                 dd offset __unwindfunclet$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$5
.xdata$x:00004B48                 db    4
.xdata$x:00004B49                 db    0
.xdata$x:00004B4A                 db    0
.xdata$x:00004B4B                 db    0
.xdata$x:00004B4C                 dd offset __unwindfunclet$?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$6
.xdata$x:00004B50                 db 0FFh
.xdata$x:00004B51                 db 0FFh
.xdata$x:00004B52                 db 0FFh
.xdata$x:00004B53                 db 0FFh
.xdata$x:00004B54                 db    0
.xdata$x:00004B55                 db    0
.xdata$x:00004B56                 db    0
.xdata$x:00004B57                 db    0
.xdata$x:00004B58 __unwindtable$?OpenFile@CFolderOutStream@NCab@NArchive@@AAEJXZ db 0FFh
.xdata$x:00004B58                                         ; DATA XREF: .xdata$x:00004B68o
.xdata$x:00004B59                 db 0FFh
.xdata$x:00004B5A                 db 0FFh
.xdata$x:00004B5B                 db 0FFh
.xdata$x:00004B5C                 dd offset __unwindfunclet$?OpenFile@CFolderOutStream@NCab@NArchive@@AAEJXZ$0
.xdata$x:00004B60 __ehfuncinfo$?OpenFile@CFolderOutStream@NCab@NArchive@@AAEJXZ db  22h ; "
.xdata$x:00004B60                                         ; DATA XREF: __ehhandler$?OpenFile@CFolderOutStream@NCab@NArchive@@AAEJXZ+11o
.xdata$x:00004B61                 db    5
.xdata$x:00004B62                 db  93h ; ô
.xdata$x:00004B63                 db  19h
.xdata$x:00004B64                 db    1
.xdata$x:00004B65                 db    0
.xdata$x:00004B66                 db    0
.xdata$x:00004B67                 db    0
.xdata$x:00004B68                 dd offset __unwindtable$?OpenFile@CFolderOutStream@NCab@NArchive@@AAEJXZ
.xdata$x:00004B6C                 align 20h
.xdata$x:00004B80                 db    1
.xdata$x:00004B81                 db    0
.xdata$x:00004B82                 db    0
.xdata$x:00004B83                 db    0
.xdata$x:00004B84 __catchsym$?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z$2 dd offset $SG71445+4
.xdata$x:00004B84                                         ; DATA XREF: .xdata$x:00004BB4o
.xdata$x:00004B84                                         ; ""
.xdata$x:00004B88                 align 10h
.xdata$x:00004B90                 dd offset __catch$?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z$0
.xdata$x:00004B94 __unwindtable$?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z db 0FFh
.xdata$x:00004B94                                         ; DATA XREF: .xdata$x:00004BC0o
.xdata$x:00004B95                 db 0FFh
.xdata$x:00004B96                 db 0FFh
.xdata$x:00004B97                 db 0FFh
.xdata$x:00004B98                 db    0
.xdata$x:00004B99                 db    0
.xdata$x:00004B9A                 db    0
.xdata$x:00004B9B                 db    0
.xdata$x:00004B9C                 db 0FFh
.xdata$x:00004B9D                 db 0FFh
.xdata$x:00004B9E                 db 0FFh
.xdata$x:00004B9F                 db 0FFh
.xdata$x:00004BA0                 db    0
.xdata$x:00004BA1                 db    0
.xdata$x:00004BA2                 db    0
.xdata$x:00004BA3                 db    0
.xdata$x:00004BA4 __tryblocktable$?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z db    0
.xdata$x:00004BA4                                         ; DATA XREF: .xdata$x:00004BC8o
.xdata$x:00004BA5                 db    0
.xdata$x:00004BA6                 db    0
.xdata$x:00004BA7                 db    0
.xdata$x:00004BA8                 db    0
.xdata$x:00004BA9                 db    0
.xdata$x:00004BAA                 db    0
.xdata$x:00004BAB                 db    0
.xdata$x:00004BAC                 db    1
.xdata$x:00004BAD                 db    0
.xdata$x:00004BAE                 db    0
.xdata$x:00004BAF                 db    0
.xdata$x:00004BB0                 db    1
.xdata$x:00004BB1                 db    0
.xdata$x:00004BB2                 db    0
.xdata$x:00004BB3                 db    0
.xdata$x:00004BB4                 dd offset __catchsym$?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z$2
.xdata$x:00004BB8 __ehfuncinfo$?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z db  22h ; "
.xdata$x:00004BB8                                         ; DATA XREF: __ehhandler$?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z+14o
.xdata$x:00004BB9                 db    5
.xdata$x:00004BBA                 db  93h ; ô
.xdata$x:00004BBB                 db  19h
.xdata$x:00004BBC                 db    2
.xdata$x:00004BBD                 db    0
.xdata$x:00004BBE                 db    0
.xdata$x:00004BBF                 db    0
.xdata$x:00004BC0                 dd offset __unwindtable$?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z
.xdata$x:00004BC4                 db    1
.xdata$x:00004BC5                 db    0
.xdata$x:00004BC6                 db    0
.xdata$x:00004BC7                 db    0
.xdata$x:00004BC8                 dd offset __tryblocktable$?Write2@CFolderOutStream@NCab@NArchive@@AAEJPBXIPAI_N@Z
.xdata$x:00004BCC                 db    0
.xdata$x:00004BCD                 db    0
.xdata$x:00004BCE                 db    0
.xdata$x:00004BCF                 db    0
.xdata$x:00004BD0                 db    0
.xdata$x:00004BD1                 db    0
.xdata$x:00004BD2                 db    0
.xdata$x:00004BD3                 db    0
.xdata$x:00004BD4                 db    0
.xdata$x:00004BD5                 db    0
.xdata$x:00004BD6                 db    0
.xdata$x:00004BD7                 db    0
.xdata$x:00004BD8                 db    1
.xdata$x:00004BD9                 db    0
.xdata$x:00004BDA                 db    0
.xdata$x:00004BDB                 db    0
.xdata$x:00004BDC __catchsym$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$19 dd offset $SG71445+4
.xdata$x:00004BDC                                         ; DATA XREF: .xdata$x:00004BFCo
.xdata$x:00004BDC                                         ; ""
.xdata$x:00004BE0                 db    0
.xdata$x:00004BE1                 db    0
.xdata$x:00004BE2                 db    0
.xdata$x:00004BE3                 db    0
.xdata$x:00004BE4                 db    0
.xdata$x:00004BE5                 db    0
.xdata$x:00004BE6                 db    0
.xdata$x:00004BE7                 db    0
.xdata$x:00004BE8                 dd offset __catch$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0
.xdata$x:00004BEC __tryblocktable$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db    0
.xdata$x:00004BEC                                         ; DATA XREF: .xdata$x:00004C10o
.xdata$x:00004BED                 db    0
.xdata$x:00004BEE                 db    0
.xdata$x:00004BEF                 db    0
.xdata$x:00004BF0                 db  11h
.xdata$x:00004BF1                 db    0
.xdata$x:00004BF2                 db    0
.xdata$x:00004BF3                 db    0
.xdata$x:00004BF4                 db  12h
.xdata$x:00004BF5                 db    0
.xdata$x:00004BF6                 db    0
.xdata$x:00004BF7                 db    0
.xdata$x:00004BF8                 db    1
.xdata$x:00004BF9                 db    0
.xdata$x:00004BFA                 db    0
.xdata$x:00004BFB                 db    0
.xdata$x:00004BFC                 dd offset __catchsym$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$19
.xdata$x:00004C00 __ehfuncinfo$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db  22h ; "
.xdata$x:00004C00                                         ; DATA XREF: __ehhandler$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z+14o
.xdata$x:00004C01                 db    5
.xdata$x:00004C02                 db  93h ; ô
.xdata$x:00004C03                 db  19h
.xdata$x:00004C04                 db  13h
.xdata$x:00004C05                 db    0
.xdata$x:00004C06                 db    0
.xdata$x:00004C07                 db    0
.xdata$x:00004C08                 dd offset __unwindtable$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.xdata$x:00004C0C                 db    1
.xdata$x:00004C0D                 db    0
.xdata$x:00004C0E                 db    0
.xdata$x:00004C0F                 db    0
.xdata$x:00004C10                 dd offset __tryblocktable$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.xdata$x:00004C14                 align 10h
.xdata$x:00004C20                 db    1
.xdata$x:00004C21                 db    0
.xdata$x:00004C22                 db    0
.xdata$x:00004C23                 db    0
.xdata$x:00004C24 __unwindtable$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db 0FFh
.xdata$x:00004C24                                         ; DATA XREF: .xdata$x:00004C08o
.xdata$x:00004C25                 db 0FFh
.xdata$x:00004C26                 db 0FFh
.xdata$x:00004C27                 db 0FFh
.xdata$x:00004C28                 db    0
.xdata$x:00004C29                 db    0
.xdata$x:00004C2A                 db    0
.xdata$x:00004C2B                 db    0
.xdata$x:00004C2C                 db    0
.xdata$x:00004C2D                 db    0
.xdata$x:00004C2E                 db    0
.xdata$x:00004C2F                 db    0
.xdata$x:00004C30                 dd offset __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2
.xdata$x:00004C34                 align 8
.xdata$x:00004C38                 dd offset __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3
.xdata$x:00004C3C                 db    2
.xdata$x:00004C3D                 db    0
.xdata$x:00004C3E                 db    0
.xdata$x:00004C3F                 db    0
.xdata$x:00004C40                 dd offset __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4
.xdata$x:00004C44                 db    2
.xdata$x:00004C45                 db    0
.xdata$x:00004C46                 db    0
.xdata$x:00004C47                 db    0
.xdata$x:00004C48                 dd offset __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5
.xdata$x:00004C4C                 db    4
.xdata$x:00004C4D                 db    0
.xdata$x:00004C4E                 db    0
.xdata$x:00004C4F                 db    0
.xdata$x:00004C50                 dd offset __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6
.xdata$x:00004C54                 db    5
.xdata$x:00004C55                 db    0
.xdata$x:00004C56                 db    0
.xdata$x:00004C57                 db    0
.xdata$x:00004C58                 dd offset __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7
.xdata$x:00004C5C                 db    6
.xdata$x:00004C5D                 db    0
.xdata$x:00004C5E                 db    0
.xdata$x:00004C5F                 db    0
.xdata$x:00004C60                 dd offset __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8
.xdata$x:00004C64                 db    7
.xdata$x:00004C65                 db    0
.xdata$x:00004C66                 db    0
.xdata$x:00004C67                 db    0
.xdata$x:00004C68                 dd offset __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9
.xdata$x:00004C6C                 db    7
.xdata$x:00004C6D                 db    0
.xdata$x:00004C6E                 db    0
.xdata$x:00004C6F                 db    0
.xdata$x:00004C70                 dd offset __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10
.xdata$x:00004C74                 db    9
.xdata$x:00004C75                 db    0
.xdata$x:00004C76                 db    0
.xdata$x:00004C77                 db    0
.xdata$x:00004C78                 dd offset __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$11
.xdata$x:00004C7C                 db  0Ah
.xdata$x:00004C7D                 db    0
.xdata$x:00004C7E                 db    0
.xdata$x:00004C7F                 db    0
.xdata$x:00004C80                 dd offset __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$12
.xdata$x:00004C84                 db  0Ah
.xdata$x:00004C85                 db    0
.xdata$x:00004C86                 db    0
.xdata$x:00004C87                 db    0
.xdata$x:00004C88                 dd offset __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$13
.xdata$x:00004C8C                 db  0Ah
.xdata$x:00004C8D                 db    0
.xdata$x:00004C8E                 db    0
.xdata$x:00004C8F                 db    0
.xdata$x:00004C90                 dd offset __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$14
.xdata$x:00004C94                 db  0Ah
.xdata$x:00004C95                 db    0
.xdata$x:00004C96                 db    0
.xdata$x:00004C97                 db    0
.xdata$x:00004C98                 dd offset __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$15
.xdata$x:00004C9C                 db  0Eh
.xdata$x:00004C9D                 db    0
.xdata$x:00004C9E                 db    0
.xdata$x:00004C9F                 db    0
.xdata$x:00004CA0                 dd offset __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$16
.xdata$x:00004CA4                 db  0Eh
.xdata$x:00004CA5                 db    0
.xdata$x:00004CA6                 db    0
.xdata$x:00004CA7                 db    0
.xdata$x:00004CA8                 dd offset __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$17
.xdata$x:00004CAC                 db  0Eh
.xdata$x:00004CAD                 db    0
.xdata$x:00004CAE                 db    0
.xdata$x:00004CAF                 db    0
.xdata$x:00004CB0                 dd offset __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$18
.xdata$x:00004CB4                 db 0FFh
.xdata$x:00004CB5                 db 0FFh
.xdata$x:00004CB6                 db 0FFh
.xdata$x:00004CB7                 db 0FFh
.xdata$x:00004CB8                 db    0
.xdata$x:00004CB9                 db    0
.xdata$x:00004CBA                 db    0
.xdata$x:00004CBB                 db    0
.xdata$x:00004CBB _xdata$x        ends
.xdata$x:00004CBB
.text:00004CBC ; ===========================================================================
.text:00004CBC
.text:00004CBC ; Segment type: Pure code
.text:00004CBC ; Segment permissions: Read/Execute
.text:00004CBC _text           segment para public 'CODE' use32
.text:00004CBC                 assume cs:_text
.text:00004CBC                 ;org 4CBCh
.text:00004CBC ; COMDAT (pick any)
.text:00004CBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004CBC
.text:00004CBC ; =============== S U B R O U T I N E =======================================
.text:00004CBC
.text:00004CBC ; Attributes: bp-based frame
.text:00004CBC
.text:00004CBC ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00004CBC                 public ??1AString@@QAE@XZ
.text:00004CBC ??1AString@@QAE@XZ proc near            ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+23Fp
.text:00004CBC                                         ; NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+640p ...
.text:00004CBC
.text:00004CBC var_8           = dword ptr -8
.text:00004CBC var_4           = dword ptr -4
.text:00004CBC
.text:00004CBC                 push    ebp
.text:00004CBD                 mov     ebp, esp
.text:00004CBF                 sub     esp, 8
.text:00004CC2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004CC9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CD0                 mov     [ebp+var_4], ecx
.text:00004CD3                 mov     eax, [ebp+var_4]
.text:00004CD6                 mov     ecx, [eax]
.text:00004CD8                 mov     [ebp+var_8], ecx
.text:00004CDB                 mov     edx, [ebp+var_8]
.text:00004CDE                 push    edx             ; void *
.text:00004CDF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004CE4                 add     esp, 4
.text:00004CE7                 add     esp, 8
.text:00004CEA                 cmp     ebp, esp
.text:00004CEC                 call    __RTC_CheckEsp
.text:00004CF1                 mov     esp, ebp
.text:00004CF3                 pop     ebp
.text:00004CF4                 retn
.text:00004CF4 ??1AString@@QAE@XZ endp
.text:00004CF4
.text:00004CF4 ; ---------------------------------------------------------------------------
.text:00004CF5                 align 4
.text:00004CF5 _text           ends
.text:00004CF5
.text:00004CF8 ; ===========================================================================
.text:00004CF8
.text:00004CF8 ; Segment type: Pure code
.text:00004CF8 ; Segment permissions: Read/Execute
.text:00004CF8 _text           segment para public 'CODE' use32
.text:00004CF8                 assume cs:_text
.text:00004CF8                 ;org 4CF8h
.text:00004CF8 ; COMDAT (pick any)
.text:00004CF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004CF8
.text:00004CF8 ; =============== S U B R O U T I N E =======================================
.text:00004CF8
.text:00004CF8 ; Attributes: bp-based frame
.text:00004CF8
.text:00004CF8 ; public: __thiscall AString::operator char const *(void)const
.text:00004CF8                 public ??BAString@@QBEPBDXZ
.text:00004CF8 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+21Ep
.text:00004CF8                                         ; NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+61Cp
.text:00004CF8
.text:00004CF8 var_4           = dword ptr -4
.text:00004CF8
.text:00004CF8                 push    ebp
.text:00004CF9                 mov     ebp, esp
.text:00004CFB                 push    ecx
.text:00004CFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D03                 mov     [ebp+var_4], ecx
.text:00004D06                 mov     eax, [ebp+var_4]
.text:00004D09                 mov     eax, [eax]
.text:00004D0B                 mov     esp, ebp
.text:00004D0D                 pop     ebp
.text:00004D0E                 retn
.text:00004D0E ??BAString@@QBEPBDXZ endp
.text:00004D0E
.text:00004D0E ; ---------------------------------------------------------------------------
.text:00004D0F                 align 10h
.text:00004D0F _text           ends
.text:00004D0F
.text:00004D10 ; ===========================================================================
.text:00004D10
.text:00004D10 ; Segment type: Pure code
.text:00004D10 ; Segment permissions: Read/Execute
.text:00004D10 _text           segment para public 'CODE' use32
.text:00004D10                 assume cs:_text
.text:00004D10                 ;org 4D10h
.text:00004D10 ; COMDAT (pick any)
.text:00004D10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004D10
.text:00004D10 ; =============== S U B R O U T I N E =======================================
.text:00004D10
.text:00004D10 ; Attributes: bp-based frame
.text:00004D10
.text:00004D10 ; public: class AString & __thiscall AString::operator+=(char)
.text:00004D10                 public ??YAString@@QAEAAV0@D@Z
.text:00004D10 ??YAString@@QAEAAV0@D@Z proc near       ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+5EFp
.text:00004D10
.text:00004D10 var_C           = dword ptr -0Ch
.text:00004D10 var_8           = dword ptr -8
.text:00004D10 var_4           = dword ptr -4
.text:00004D10 arg_0           = byte ptr  8
.text:00004D10
.text:00004D10                 push    ebp
.text:00004D11                 mov     ebp, esp
.text:00004D13                 sub     esp, 0Ch
.text:00004D16                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00004D1D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004D24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D2B                 mov     [ebp+var_4], ecx
.text:00004D2E                 mov     eax, [ebp+var_4]
.text:00004D31                 mov     ecx, [ebp+var_4]
.text:00004D34                 mov     edx, [eax+8]
.text:00004D37                 cmp     edx, [ecx+4]
.text:00004D3A                 jnz     short loc_4D44
.text:00004D3C                 mov     ecx, [ebp+var_4] ; this
.text:00004D3F                 call    ?Grow_1@AString@@AAEXXZ ; AString::Grow_1(void)
.text:00004D44
.text:00004D44 loc_4D44:                               ; CODE XREF: AString::operator+=(char)+2Aj
.text:00004D44                 mov     eax, [ebp+var_4]
.text:00004D47                 mov     ecx, [eax+4]
.text:00004D4A                 mov     [ebp+var_8], ecx
.text:00004D4D                 mov     edx, [ebp+var_4]
.text:00004D50                 mov     eax, [edx]
.text:00004D52                 mov     [ebp+var_C], eax
.text:00004D55                 mov     ecx, [ebp+var_C]
.text:00004D58                 add     ecx, [ebp+var_8]
.text:00004D5B                 mov     dl, [ebp+arg_0]
.text:00004D5E                 mov     [ecx], dl
.text:00004D60                 mov     eax, [ebp+var_8]
.text:00004D63                 add     eax, 1
.text:00004D66                 mov     [ebp+var_8], eax
.text:00004D69                 mov     ecx, [ebp+var_C]
.text:00004D6C                 add     ecx, [ebp+var_8]
.text:00004D6F                 mov     byte ptr [ecx], 0
.text:00004D72                 mov     edx, [ebp+var_4]
.text:00004D75                 mov     eax, [ebp+var_8]
.text:00004D78                 mov     [edx+4], eax
.text:00004D7B                 mov     eax, [ebp+var_4]
.text:00004D7E                 add     esp, 0Ch
.text:00004D81                 cmp     ebp, esp
.text:00004D83                 call    __RTC_CheckEsp
.text:00004D88                 mov     esp, ebp
.text:00004D8A                 pop     ebp
.text:00004D8B                 retn    4
.text:00004D8B ??YAString@@QAEAAV0@D@Z endp
.text:00004D8B
.text:00004D8B ; ---------------------------------------------------------------------------
.text:00004D8E                 align 10h
.text:00004D8E _text           ends
.text:00004D8E
.text:00004D90 ; ===========================================================================
.text:00004D90
.text:00004D90 ; Segment type: Pure code
.text:00004D90 ; Segment permissions: Read/Execute
.text:00004D90 _text           segment para public 'CODE' use32
.text:00004D90                 assume cs:_text
.text:00004D90                 ;org 4D90h
.text:00004D90 ; COMDAT (pick any)
.text:00004D90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004D90
.text:00004D90 ; =============== S U B R O U T I N E =======================================
.text:00004D90
.text:00004D90 ; Attributes: bp-based frame
.text:00004D90
.text:00004D90 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:00004D90                 public ?IsEmpty@UString@@QBE_NXZ
.text:00004D90 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+50Bp
.text:00004D90                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+7AAp
.text:00004D90
.text:00004D90 var_4           = dword ptr -4
.text:00004D90
.text:00004D90                 push    ebp
.text:00004D91                 mov     ebp, esp
.text:00004D93                 push    ecx
.text:00004D94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D9B                 mov     [ebp+var_4], ecx
.text:00004D9E                 mov     eax, [ebp+var_4]
.text:00004DA1                 xor     ecx, ecx
.text:00004DA3                 cmp     dword ptr [eax+4], 0
.text:00004DA7                 setz    cl
.text:00004DAA                 mov     al, cl
.text:00004DAC                 mov     esp, ebp
.text:00004DAE                 pop     ebp
.text:00004DAF                 retn
.text:00004DAF ?IsEmpty@UString@@QBE_NXZ endp
.text:00004DAF
.text:00004DAF _text           ends
.text:00004DAF
.text:00004DB0 ; ===========================================================================
.text:00004DB0
.text:00004DB0 ; Segment type: Pure code
.text:00004DB0 ; Segment permissions: Read/Execute
.text:00004DB0 _text           segment para public 'CODE' use32
.text:00004DB0                 assume cs:_text
.text:00004DB0                 ;org 4DB0h
.text:00004DB0 ; COMDAT (pick any)
.text:00004DB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004DB0
.text:00004DB0 ; =============== S U B R O U T I N E =======================================
.text:00004DB0
.text:00004DB0 ; Attributes: bp-based frame
.text:00004DB0
.text:00004DB0 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00004DB0                 public ??0CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00004DB0 ??0CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00004DB0                                         ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+4Ep
.text:00004DB0                                         ; NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+4Ep
.text:00004DB0
.text:00004DB0 var_4           = dword ptr -4
.text:00004DB0
.text:00004DB0                 push    ebp
.text:00004DB1                 mov     ebp, esp
.text:00004DB3                 push    ecx
.text:00004DB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004DBB                 mov     [ebp+var_4], ecx
.text:00004DBE                 xor     eax, eax
.text:00004DC0                 mov     ecx, [ebp+var_4]
.text:00004DC3                 mov     [ecx], ax
.text:00004DC6                 xor     edx, edx
.text:00004DC8                 mov     eax, [ebp+var_4]
.text:00004DCB                 mov     [eax+2], dx
.text:00004DCF                 mov     ecx, [ebp+var_4]
.text:00004DD2                 mov     dword ptr [ecx+8], 0
.text:00004DD9                 mov     eax, [ebp+var_4]
.text:00004DDC                 mov     esp, ebp
.text:00004DDE                 pop     ebp
.text:00004DDF                 retn
.text:00004DDF ??0CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00004DDF
.text:00004DDF _text           ends
.text:00004DDF
.text:00004DE0 ; ===========================================================================
.text:00004DE0
.text:00004DE0 ; Segment type: Pure code
.text:00004DE0 ; Segment permissions: Read/Execute
.text:00004DE0 _text           segment para public 'CODE' use32
.text:00004DE0                 assume cs:_text
.text:00004DE0                 ;org 4DE0h
.text:00004DE0 ; COMDAT (pick any)
.text:00004DE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004DE0
.text:00004DE0 ; =============== S U B R O U T I N E =======================================
.text:00004DE0
.text:00004DE0 ; Attributes: bp-based frame
.text:00004DE0
.text:00004DE0 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00004DE0                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00004DE0 ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00004DE0                                         ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+662p
.text:00004DE0                                         ; NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+35Cp ...
.text:00004DE0
.text:00004DE0 var_4           = dword ptr -4
.text:00004DE0
.text:00004DE0                 push    ebp
.text:00004DE1                 mov     ebp, esp
.text:00004DE3                 push    ecx
.text:00004DE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004DEB                 mov     [ebp+var_4], ecx
.text:00004DEE                 mov     ecx, [ebp+var_4] ; this
.text:00004DF1                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:00004DF6                 add     esp, 4
.text:00004DF9                 cmp     ebp, esp
.text:00004DFB                 call    __RTC_CheckEsp
.text:00004E00                 mov     esp, ebp
.text:00004E02                 pop     ebp
.text:00004E03                 retn
.text:00004E03 ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00004E03
.text:00004E03 _text           ends
.text:00004E03
.text:00004E04 ; ===========================================================================
.text:00004E04
.text:00004E04 ; Segment type: Pure code
.text:00004E04 ; Segment permissions: Read/Execute
.text:00004E04 _text           segment para public 'CODE' use32
.text:00004E04                 assume cs:_text
.text:00004E04                 ;org 4E04h
.text:00004E04 ; COMDAT (pick any)
.text:00004E04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E04
.text:00004E04 ; =============== S U B R O U T I N E =======================================
.text:00004E04
.text:00004E04 ; Attributes: bp-based frame
.text:00004E04
.text:00004E04 ; unsigned __int8 __thiscall NArchive::NCab::CFolder::GetMethod(NArchive::NCab::CFolder *__hidden this)
.text:00004E04                 public ?GetMethod@CFolder@NCab@NArchive@@QBEEXZ
.text:00004E04 ?GetMethod@CFolder@NCab@NArchive@@QBEEXZ proc near
.text:00004E04                                         ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+144p
.text:00004E04                                         ; NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+2E3p ...
.text:00004E04
.text:00004E04 var_4           = dword ptr -4
.text:00004E04
.text:00004E04                 push    ebp
.text:00004E05                 mov     ebp, esp
.text:00004E07                 push    ecx
.text:00004E08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E0F                 mov     [ebp+var_4], ecx
.text:00004E12                 mov     eax, [ebp+var_4]
.text:00004E15                 movzx   eax, byte ptr [eax+6]
.text:00004E19                 and     eax, 0Fh
.text:00004E1C                 mov     esp, ebp
.text:00004E1E                 pop     ebp
.text:00004E1F                 retn
.text:00004E1F ?GetMethod@CFolder@NCab@NArchive@@QBEEXZ endp
.text:00004E1F
.text:00004E1F _text           ends
.text:00004E1F
.text:00004E20 ; ===========================================================================
.text:00004E20
.text:00004E20 ; Segment type: Pure code
.text:00004E20 ; Segment permissions: Read/Execute
.text:00004E20 _text           segment para public 'CODE' use32
.text:00004E20                 assume cs:_text
.text:00004E20                 ;org 4E20h
.text:00004E20 ; COMDAT (pick any)
.text:00004E20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E20
.text:00004E20 ; =============== S U B R O U T I N E =======================================
.text:00004E20
.text:00004E20 ; Attributes: bp-based frame
.text:00004E20
.text:00004E20 ; char *__stdcall MyStpCpy(char *, const char *)
.text:00004E20                 public ?MyStpCpy@@YGPADPADPBD@Z
.text:00004E20 ?MyStpCpy@@YGPADPADPBD@Z proc near      ; CODE XREF: NArchive::NCab::SetMethodName(char *,uint,uint)+18p
.text:00004E20
.text:00004E20 var_4           = dword ptr -4
.text:00004E20 arg_0           = dword ptr  8
.text:00004E20 arg_4           = dword ptr  0Ch
.text:00004E20
.text:00004E20                 push    ebp
.text:00004E21                 mov     ebp, esp
.text:00004E23                 push    ecx
.text:00004E24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E2B
.text:00004E2B loc_4E2B:                               ; CODE XREF: MyStpCpy(char *,char const *)+3Aj
.text:00004E2B                 mov     eax, [ebp+arg_4]
.text:00004E2E                 mov     cl, [eax]
.text:00004E30                 mov     byte ptr [ebp+var_4+3], cl
.text:00004E33                 mov     edx, [ebp+arg_0]
.text:00004E36                 mov     al, byte ptr [ebp+var_4+3]
.text:00004E39                 mov     [edx], al
.text:00004E3B                 movsx   ecx, byte ptr [ebp+var_4+3]
.text:00004E3F                 test    ecx, ecx
.text:00004E41                 jnz     short loc_4E48
.text:00004E43                 mov     eax, [ebp+arg_0]
.text:00004E46                 jmp     short loc_4E5C
.text:00004E48 ; ---------------------------------------------------------------------------
.text:00004E48
.text:00004E48 loc_4E48:                               ; CODE XREF: MyStpCpy(char *,char const *)+21j
.text:00004E48                 mov     edx, [ebp+arg_4]
.text:00004E4B                 add     edx, 1
.text:00004E4E                 mov     [ebp+arg_4], edx
.text:00004E51                 mov     eax, [ebp+arg_0]
.text:00004E54                 add     eax, 1
.text:00004E57                 mov     [ebp+arg_0], eax
.text:00004E5A                 jmp     short loc_4E2B
.text:00004E5C ; ---------------------------------------------------------------------------
.text:00004E5C
.text:00004E5C loc_4E5C:                               ; CODE XREF: MyStpCpy(char *,char const *)+26j
.text:00004E5C                 mov     esp, ebp
.text:00004E5E                 pop     ebp
.text:00004E5F                 retn    8
.text:00004E5F ?MyStpCpy@@YGPADPADPBD@Z endp
.text:00004E5F
.text:00004E5F ; ---------------------------------------------------------------------------
.text:00004E62                 align 4
.text:00004E62 _text           ends
.text:00004E62
.text:00004E64 ; ===========================================================================
.text:00004E64
.text:00004E64 ; Segment type: Pure code
.text:00004E64 ; Segment permissions: Read/Execute
.text:00004E64 _text           segment para public 'CODE' use32
.text:00004E64                 assume cs:_text
.text:00004E64                 ;org 4E64h
.text:00004E64 ; COMDAT (pick any)
.text:00004E64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E64
.text:00004E64 ; =============== S U B R O U T I N E =======================================
.text:00004E64
.text:00004E64 ; Attributes: bp-based frame
.text:00004E64
.text:00004E64 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00004E64                 public ??1UString@@QAE@XZ
.text:00004E64 ??1UString@@QAE@XZ proc near            ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+176p
.text:00004E64                                         ; NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1CBp ...
.text:00004E64
.text:00004E64 var_8           = dword ptr -8
.text:00004E64 var_4           = dword ptr -4
.text:00004E64
.text:00004E64                 push    ebp
.text:00004E65                 mov     ebp, esp
.text:00004E67                 sub     esp, 8
.text:00004E6A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004E71                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E78                 mov     [ebp+var_4], ecx
.text:00004E7B                 mov     eax, [ebp+var_4]
.text:00004E7E                 mov     ecx, [eax]
.text:00004E80                 mov     [ebp+var_8], ecx
.text:00004E83                 mov     edx, [ebp+var_8]
.text:00004E86                 push    edx             ; void *
.text:00004E87                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004E8C                 add     esp, 4
.text:00004E8F                 add     esp, 8
.text:00004E92                 cmp     ebp, esp
.text:00004E94                 call    __RTC_CheckEsp
.text:00004E99                 mov     esp, ebp
.text:00004E9B                 pop     ebp
.text:00004E9C                 retn
.text:00004E9C ??1UString@@QAE@XZ endp
.text:00004E9C
.text:00004E9C ; ---------------------------------------------------------------------------
.text:00004E9D                 align 10h
.text:00004E9D _text           ends
.text:00004E9D
.text:00004EA0 ; ===========================================================================
.text:00004EA0
.text:00004EA0 ; Segment type: Pure code
.text:00004EA0 ; Segment permissions: Read/Execute
.text:00004EA0 _text           segment para public 'CODE' use32
.text:00004EA0                 assume cs:_text
.text:00004EA0                 ;org 4EA0h
.text:00004EA0 ; COMDAT (pick any)
.text:00004EA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004EA0
.text:00004EA0 ; =============== S U B R O U T I N E =======================================
.text:00004EA0
.text:00004EA0 ; Attributes: bp-based frame
.text:00004EA0
.text:00004EA0 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00004EA0                 public ??BUString@@QBEPB_WXZ
.text:00004EA0 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1A7p
.text:00004EA0                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+6DDp
.text:00004EA0
.text:00004EA0 var_4           = dword ptr -4
.text:00004EA0
.text:00004EA0                 push    ebp
.text:00004EA1                 mov     ebp, esp
.text:00004EA3                 push    ecx
.text:00004EA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004EAB                 mov     [ebp+var_4], ecx
.text:00004EAE                 mov     eax, [ebp+var_4]
.text:00004EB1                 mov     eax, [eax]
.text:00004EB3                 mov     esp, ebp
.text:00004EB5                 pop     ebp
.text:00004EB6                 retn
.text:00004EB6 ??BUString@@QBEPB_WXZ endp
.text:00004EB6
.text:00004EB6 ; ---------------------------------------------------------------------------
.text:00004EB7                 align 4
.text:00004EB7 _text           ends
.text:00004EB7
.text:00004EB8 ; ===========================================================================
.text:00004EB8
.text:00004EB8 ; Segment type: Pure code
.text:00004EB8 ; Segment permissions: Read/Execute
.text:00004EB8 _text           segment para public 'CODE' use32
.text:00004EB8                 assume cs:_text
.text:00004EB8                 ;org 4EB8h
.text:00004EB8 ; COMDAT (pick any)
.text:00004EB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004EB8
.text:00004EB8 ; =============== S U B R O U T I N E =======================================
.text:00004EB8
.text:00004EB8 ; Attributes: bp-based frame
.text:00004EB8
.text:00004EB8 ; class UString __stdcall NArchive::NItemName::WinNameToOSName(class UString const &)
.text:00004EB8                 public ?WinNameToOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
.text:00004EB8 ?WinNameToOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z proc near
.text:00004EB8                                         ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+186p
.text:00004EB8
.text:00004EB8 var_4           = dword ptr -4
.text:00004EB8 arg_0           = dword ptr  8
.text:00004EB8 arg_4           = dword ptr  0Ch
.text:00004EB8
.text:00004EB8                 push    ebp
.text:00004EB9                 mov     ebp, esp
.text:00004EBB                 push    ecx
.text:00004EBC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004EC3                 mov     [ebp+var_4], 0
.text:00004ECA                 mov     eax, [ebp+arg_4]
.text:00004ECD                 push    eax
.text:00004ECE                 mov     ecx, [ebp+arg_0]
.text:00004ED1                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00004ED6                 mov     ecx, [ebp+var_4]
.text:00004ED9                 or      ecx, 1
.text:00004EDC                 mov     [ebp+var_4], ecx
.text:00004EDF                 mov     eax, [ebp+arg_0]
.text:00004EE2                 add     esp, 4
.text:00004EE5                 cmp     ebp, esp
.text:00004EE7                 call    __RTC_CheckEsp
.text:00004EEC                 mov     esp, ebp
.text:00004EEE                 pop     ebp
.text:00004EEF                 retn    8
.text:00004EEF ?WinNameToOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z endp
.text:00004EEF
.text:00004EEF ; ---------------------------------------------------------------------------
.text:00004EF2                 align 4
.text:00004EF2 _text           ends
.text:00004EF2
.text:00004EF4 ; ===========================================================================
.text:00004EF4
.text:00004EF4 ; Segment type: Pure code
.text:00004EF4 ; Segment permissions: Read/Execute
.text:00004EF4 _text           segment para public 'CODE' use32
.text:00004EF4                 assume cs:_text
.text:00004EF4                 ;org 4EF4h
.text:00004EF4 ; COMDAT (pick any)
.text:00004EF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004EF4
.text:00004EF4 ; =============== S U B R O U T I N E =======================================
.text:00004EF4
.text:00004EF4 ; Attributes: bp-based frame
.text:00004EF4
.text:00004EF4 ; unsigned int __thiscall NArchive::NCab::CItem::GetWinAttrib(NArchive::NCab::CItem *__hidden this)
.text:00004EF4                 public ?GetWinAttrib@CItem@NCab@NArchive@@QBEIXZ
.text:00004EF4 ?GetWinAttrib@CItem@NCab@NArchive@@QBEIXZ proc near
.text:00004EF4                                         ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+21Bp
.text:00004EF4
.text:00004EF4 var_4           = dword ptr -4
.text:00004EF4
.text:00004EF4                 push    ebp
.text:00004EF5                 mov     ebp, esp
.text:00004EF7                 push    ecx
.text:00004EF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004EFF                 mov     [ebp+var_4], ecx
.text:00004F02                 mov     eax, [ebp+var_4]
.text:00004F05                 movzx   eax, word ptr [eax+1Eh]
.text:00004F09                 and     eax, 0FFFFFF7Fh
.text:00004F0E                 mov     esp, ebp
.text:00004F10                 pop     ebp
.text:00004F11                 retn
.text:00004F11 ?GetWinAttrib@CItem@NCab@NArchive@@QBEIXZ endp
.text:00004F11
.text:00004F11 ; ---------------------------------------------------------------------------
.text:00004F12                 align 4
.text:00004F12 _text           ends
.text:00004F12
.text:00004F14 ; ===========================================================================
.text:00004F14
.text:00004F14 ; Segment type: Pure code
.text:00004F14 ; Segment permissions: Read/Execute
.text:00004F14 _text           segment para public 'CODE' use32
.text:00004F14                 assume cs:_text
.text:00004F14                 ;org 4F14h
.text:00004F14 ; COMDAT (pick any)
.text:00004F14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004F14
.text:00004F14 ; =============== S U B R O U T I N E =======================================
.text:00004F14
.text:00004F14 ; Attributes: bp-based frame
.text:00004F14
.text:00004F14 ; bool __thiscall NArchive::NCab::CItem::IsNameUTF(NArchive::NCab::CItem *__hidden this)
.text:00004F14                 public ?IsNameUTF@CItem@NCab@NArchive@@QBE_NXZ
.text:00004F14 ?IsNameUTF@CItem@NCab@NArchive@@QBE_NXZ proc near
.text:00004F14                                         ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+110p
.text:00004F14
.text:00004F14 var_4           = dword ptr -4
.text:00004F14
.text:00004F14                 push    ebp
.text:00004F15                 mov     ebp, esp
.text:00004F17                 push    ecx
.text:00004F18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F1F                 mov     [ebp+var_4], ecx
.text:00004F22                 mov     eax, [ebp+var_4]
.text:00004F25                 movzx   eax, word ptr [eax+1Eh]
.text:00004F29                 and     eax, 80h
.text:00004F2E                 neg     eax
.text:00004F30                 sbb     eax, eax
.text:00004F32                 neg     eax
.text:00004F34                 mov     esp, ebp
.text:00004F36                 pop     ebp
.text:00004F37                 retn
.text:00004F37 ?IsNameUTF@CItem@NCab@NArchive@@QBE_NXZ endp
.text:00004F37
.text:00004F37 _text           ends
.text:00004F37
.text:00004F38 ; ===========================================================================
.text:00004F38
.text:00004F38 ; Segment type: Pure code
.text:00004F38 ; Segment permissions: Read/Execute
.text:00004F38 _text           segment para public 'CODE' use32
.text:00004F38                 assume cs:_text
.text:00004F38                 ;org 4F38h
.text:00004F38 ; COMDAT (pick any)
.text:00004F38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004F38
.text:00004F38 ; =============== S U B R O U T I N E =======================================
.text:00004F38
.text:00004F38 ; Attributes: bp-based frame
.text:00004F38
.text:00004F38 ; bool __thiscall NArchive::NCab::CItem::IsDir(NArchive::NCab::CItem *__hidden this)
.text:00004F38                 public ?IsDir@CItem@NCab@NArchive@@QBE_NXZ
.text:00004F38 ?IsDir@CItem@NCab@NArchive@@QBE_NXZ proc near
.text:00004F38                                         ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1E4p
.text:00004F38                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+157p ...
.text:00004F38
.text:00004F38 var_4           = dword ptr -4
.text:00004F38
.text:00004F38                 push    ebp
.text:00004F39                 mov     ebp, esp
.text:00004F3B                 push    ecx
.text:00004F3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F43                 mov     [ebp+var_4], ecx
.text:00004F46                 mov     eax, [ebp+var_4]
.text:00004F49                 movzx   eax, word ptr [eax+1Eh]
.text:00004F4D                 and     eax, 10h
.text:00004F50                 neg     eax
.text:00004F52                 sbb     eax, eax
.text:00004F54                 neg     eax
.text:00004F56                 mov     esp, ebp
.text:00004F58                 pop     ebp
.text:00004F59                 retn
.text:00004F59 ?IsDir@CItem@NCab@NArchive@@QBE_NXZ endp
.text:00004F59
.text:00004F59 ; ---------------------------------------------------------------------------
.text:00004F5A                 align 4
.text:00004F5A _text           ends
.text:00004F5A
.text:00004F5C ; ===========================================================================
.text:00004F5C
.text:00004F5C ; Segment type: Pure code
.text:00004F5C ; Segment permissions: Read/Execute
.text:00004F5C _text           segment para public 'CODE' use32
.text:00004F5C                 assume cs:_text
.text:00004F5C                 ;org 4F5Ch
.text:00004F5C ; COMDAT (pick any)
.text:00004F5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004F5C
.text:00004F5C ; =============== S U B R O U T I N E =======================================
.text:00004F5C
.text:00004F5C ; Attributes: bp-based frame
.text:00004F5C
.text:00004F5C ; int __thiscall NArchive::NCab::CItem::GetFolderIndex(NArchive::NCab::CItem *this, unsigned int)
.text:00004F5C                 public ?GetFolderIndex@CItem@NCab@NArchive@@QBEHI@Z
.text:00004F5C ?GetFolderIndex@CItem@NCab@NArchive@@QBEHI@Z proc near
.text:00004F5C                                         ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+2B1p
.text:00004F5C                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+E79p ...
.text:00004F5C
.text:00004F5C var_4           = dword ptr -4
.text:00004F5C arg_0           = dword ptr  8
.text:00004F5C
.text:00004F5C                 push    ebp
.text:00004F5D                 mov     ebp, esp
.text:00004F5F                 push    ecx
.text:00004F60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F67                 mov     [ebp+var_4], ecx
.text:00004F6A                 mov     ecx, [ebp+var_4] ; this
.text:00004F6D                 call    ?ContinuedFromPrev@CItem@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CItem::ContinuedFromPrev(void)
.text:00004F72                 movzx   eax, al
.text:00004F75                 test    eax, eax
.text:00004F77                 jz      short loc_4F7D
.text:00004F79                 xor     eax, eax
.text:00004F7B                 jmp     short loc_4F9A
.text:00004F7D ; ---------------------------------------------------------------------------
.text:00004F7D
.text:00004F7D loc_4F7D:                               ; CODE XREF: NArchive::NCab::CItem::GetFolderIndex(uint)+1Bj
.text:00004F7D                 mov     ecx, [ebp+var_4] ; this
.text:00004F80                 call    ?ContinuedToNext@CItem@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CItem::ContinuedToNext(void)
.text:00004F85                 movzx   ecx, al
.text:00004F88                 test    ecx, ecx
.text:00004F8A                 jz      short loc_4F94
.text:00004F8C                 mov     eax, [ebp+arg_0]
.text:00004F8F                 sub     eax, 1
.text:00004F92                 jmp     short loc_4F9A
.text:00004F94 ; ---------------------------------------------------------------------------
.text:00004F94
.text:00004F94 loc_4F94:                               ; CODE XREF: NArchive::NCab::CItem::GetFolderIndex(uint)+2Ej
.text:00004F94                 mov     edx, [ebp+var_4]
.text:00004F97                 mov     eax, [edx+18h]
.text:00004F9A
.text:00004F9A loc_4F9A:                               ; CODE XREF: NArchive::NCab::CItem::GetFolderIndex(uint)+1Fj
.text:00004F9A                                         ; NArchive::NCab::CItem::GetFolderIndex(uint)+36j
.text:00004F9A                 add     esp, 4
.text:00004F9D                 cmp     ebp, esp
.text:00004F9F                 call    __RTC_CheckEsp
.text:00004FA4                 mov     esp, ebp
.text:00004FA6                 pop     ebp
.text:00004FA7                 retn    4
.text:00004FA7 ?GetFolderIndex@CItem@NCab@NArchive@@QBEHI@Z endp
.text:00004FA7
.text:00004FA7 ; ---------------------------------------------------------------------------
.text:00004FAA                 align 4
.text:00004FAA _text           ends
.text:00004FAA
.text:00004FAC ; ===========================================================================
.text:00004FAC
.text:00004FAC ; Segment type: Pure code
.text:00004FAC ; Segment permissions: Read/Execute
.text:00004FAC _text           segment para public 'CODE' use32
.text:00004FAC                 assume cs:_text
.text:00004FAC                 ;org 4FACh
.text:00004FAC ; COMDAT (pick any)
.text:00004FAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004FAC
.text:00004FAC ; =============== S U B R O U T I N E =======================================
.text:00004FAC
.text:00004FAC ; Attributes: bp-based frame
.text:00004FAC
.text:00004FAC ; bool __thiscall NArchive::NCab::CItem::ContinuedFromPrev(NArchive::NCab::CItem *__hidden this)
.text:00004FAC                 public ?ContinuedFromPrev@CItem@NCab@NArchive@@QBE_NXZ
.text:00004FAC ?ContinuedFromPrev@CItem@NCab@NArchive@@QBE_NXZ proc near
.text:00004FAC                                         ; CODE XREF: NArchive::NCab::CItem::GetFolderIndex(uint)+11p
.text:00004FAC
.text:00004FAC var_8           = dword ptr -8
.text:00004FAC var_4           = dword ptr -4
.text:00004FAC
.text:00004FAC                 push    ebp
.text:00004FAD                 mov     ebp, esp
.text:00004FAF                 sub     esp, 8
.text:00004FB2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004FB9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004FC0                 mov     [ebp+var_4], ecx
.text:00004FC3                 mov     eax, [ebp+var_4]
.text:00004FC6                 cmp     dword ptr [eax+18h], 0FFFDh
.text:00004FCD                 jz      short loc_4FE4
.text:00004FCF                 mov     ecx, [ebp+var_4]
.text:00004FD2                 cmp     dword ptr [ecx+18h], 0FFFFh
.text:00004FD9                 jz      short loc_4FE4
.text:00004FDB                 mov     [ebp+var_8], 0
.text:00004FE2                 jmp     short loc_4FEB
.text:00004FE4 ; ---------------------------------------------------------------------------
.text:00004FE4
.text:00004FE4 loc_4FE4:                               ; CODE XREF: NArchive::NCab::CItem::ContinuedFromPrev(void)+21j
.text:00004FE4                                         ; NArchive::NCab::CItem::ContinuedFromPrev(void)+2Dj
.text:00004FE4                 mov     [ebp+var_8], 1
.text:00004FEB
.text:00004FEB loc_4FEB:                               ; CODE XREF: NArchive::NCab::CItem::ContinuedFromPrev(void)+36j
.text:00004FEB                 mov     al, byte ptr [ebp+var_8]
.text:00004FEE                 mov     esp, ebp
.text:00004FF0                 pop     ebp
.text:00004FF1                 retn
.text:00004FF1 ?ContinuedFromPrev@CItem@NCab@NArchive@@QBE_NXZ endp
.text:00004FF1
.text:00004FF1 ; ---------------------------------------------------------------------------
.text:00004FF2                 align 4
.text:00004FF2 _text           ends
.text:00004FF2
.text:00004FF4 ; ===========================================================================
.text:00004FF4
.text:00004FF4 ; Segment type: Pure code
.text:00004FF4 ; Segment permissions: Read/Execute
.text:00004FF4 _text           segment para public 'CODE' use32
.text:00004FF4                 assume cs:_text
.text:00004FF4                 ;org 4FF4h
.text:00004FF4 ; COMDAT (pick any)
.text:00004FF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004FF4
.text:00004FF4 ; =============== S U B R O U T I N E =======================================
.text:00004FF4
.text:00004FF4 ; Attributes: bp-based frame
.text:00004FF4
.text:00004FF4 ; bool __thiscall NArchive::NCab::CItem::ContinuedToNext(NArchive::NCab::CItem *__hidden this)
.text:00004FF4                 public ?ContinuedToNext@CItem@NCab@NArchive@@QBE_NXZ
.text:00004FF4 ?ContinuedToNext@CItem@NCab@NArchive@@QBE_NXZ proc near
.text:00004FF4                                         ; CODE XREF: NArchive::NCab::CItem::GetFolderIndex(uint)+24p
.text:00004FF4
.text:00004FF4 var_8           = dword ptr -8
.text:00004FF4 var_4           = dword ptr -4
.text:00004FF4
.text:00004FF4                 push    ebp
.text:00004FF5                 mov     ebp, esp
.text:00004FF7                 sub     esp, 8
.text:00004FFA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005001                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005008                 mov     [ebp+var_4], ecx
.text:0000500B                 mov     eax, [ebp+var_4]
.text:0000500E                 cmp     dword ptr [eax+18h], 0FFFEh
.text:00005015                 jz      short loc_502C
.text:00005017                 mov     ecx, [ebp+var_4]
.text:0000501A                 cmp     dword ptr [ecx+18h], 0FFFFh
.text:00005021                 jz      short loc_502C
.text:00005023                 mov     [ebp+var_8], 0
.text:0000502A                 jmp     short loc_5033
.text:0000502C ; ---------------------------------------------------------------------------
.text:0000502C
.text:0000502C loc_502C:                               ; CODE XREF: NArchive::NCab::CItem::ContinuedToNext(void)+21j
.text:0000502C                                         ; NArchive::NCab::CItem::ContinuedToNext(void)+2Dj
.text:0000502C                 mov     [ebp+var_8], 1
.text:00005033
.text:00005033 loc_5033:                               ; CODE XREF: NArchive::NCab::CItem::ContinuedToNext(void)+36j
.text:00005033                 mov     al, byte ptr [ebp+var_8]
.text:00005036                 mov     esp, ebp
.text:00005038                 pop     ebp
.text:00005039                 retn
.text:00005039 ?ContinuedToNext@CItem@NCab@NArchive@@QBE_NXZ endp
.text:00005039
.text:00005039 ; ---------------------------------------------------------------------------
.text:0000503A                 align 4
.text:0000503A _text           ends
.text:0000503A
.text:0000503C ; ===========================================================================
.text:0000503C
.text:0000503C ; Segment type: Pure code
.text:0000503C ; Segment permissions: Read/Execute
.text:0000503C _text           segment para public 'CODE' use32
.text:0000503C                 assume cs:_text
.text:0000503C                 ;org 503Ch
.text:0000503C ; COMDAT (pick any)
.text:0000503C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000503C
.text:0000503C ; =============== S U B R O U T I N E =======================================
.text:0000503C
.text:0000503C ; Attributes: bp-based frame
.text:0000503C
.text:0000503C ; int __thiscall NArchive::NCab::CMvDatabaseEx::GetFolderIndex(NArchive::NCab::CMvDatabaseEx *this, const struct NArchive::NCab::CMvItem *)
.text:0000503C                 public ?GetFolderIndex@CMvDatabaseEx@NCab@NArchive@@QBEHPBUCMvItem@23@@Z
.text:0000503C ?GetFolderIndex@CMvDatabaseEx@NCab@NArchive@@QBEHPBUCMvItem@23@@Z proc near
.text:0000503C                                         ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+325p
.text:0000503C                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+17Cp ...
.text:0000503C
.text:0000503C var_8           = dword ptr -8
.text:0000503C var_4           = dword ptr -4
.text:0000503C arg_0           = dword ptr  8
.text:0000503C
.text:0000503C                 push    ebp
.text:0000503D                 mov     ebp, esp
.text:0000503F                 sub     esp, 8
.text:00005042                 push    esi
.text:00005043                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000504A                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005051                 mov     [ebp+var_4], ecx
.text:00005054                 mov     eax, [ebp+arg_0]
.text:00005057                 mov     ecx, [eax]
.text:00005059                 push    ecx
.text:0000505A                 mov     ecx, [ebp+var_4]
.text:0000505D                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEABUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:00005062                 mov     [ebp+var_8], eax
.text:00005065                 mov     edx, [ebp+arg_0]
.text:00005068                 mov     eax, [edx]
.text:0000506A                 push    eax
.text:0000506B                 mov     ecx, [ebp+var_4]
.text:0000506E                 add     ecx, 18h
.text:00005071                 call    ??A?$CRecordVector@H@@QBEABHI@Z ; CRecordVector<int>::operator[](uint)
.text:00005076                 mov     esi, eax
.text:00005078                 mov     ecx, [ebp+var_8]
.text:0000507B                 call    ?Size@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NCab::CFolder>::Size(void)
.text:00005080                 push    eax             ; unsigned int
.text:00005081                 mov     ecx, [ebp+arg_0]
.text:00005084                 mov     edx, [ecx+4]
.text:00005087                 push    edx
.text:00005088                 mov     ecx, [ebp+var_8]
.text:0000508B                 add     ecx, 0Ch
.text:0000508E                 call    ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QBEABUCItem@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CItem>::operator[](uint)
.text:00005093                 mov     ecx, eax        ; this
.text:00005095                 call    ?GetFolderIndex@CItem@NCab@NArchive@@QBEHI@Z ; NArchive::NCab::CItem::GetFolderIndex(uint)
.text:0000509A                 add     eax, [esi]
.text:0000509C                 pop     esi
.text:0000509D                 add     esp, 8
.text:000050A0                 cmp     ebp, esp
.text:000050A2                 call    __RTC_CheckEsp
.text:000050A7                 mov     esp, ebp
.text:000050A9                 pop     ebp
.text:000050AA                 retn    4
.text:000050AA ?GetFolderIndex@CMvDatabaseEx@NCab@NArchive@@QBEHPBUCMvItem@23@@Z endp
.text:000050AA
.text:000050AA ; ---------------------------------------------------------------------------
.text:000050AD                 align 10h
.text:000050AD _text           ends
.text:000050AD
.text:000050B0 ; ===========================================================================
.text:000050B0
.text:000050B0 ; Segment type: Pure code
.text:000050B0 ; Segment permissions: Read/Execute
.text:000050B0 _text           segment para public 'CODE' use32
.text:000050B0                 assume cs:_text
.text:000050B0                 ;org 50B0h
.text:000050B0 ; COMDAT (pick any)
.text:000050B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000050B0
.text:000050B0 ; =============== S U B R O U T I N E =======================================
.text:000050B0
.text:000050B0 ; Attributes: bp-based frame
.text:000050B0
.text:000050B0 ; bool __thiscall NArchive::NCab::CArchInfo::IsTherePrev(NArchive::NCab::CArchInfo *__hidden this)
.text:000050B0                 public ?IsTherePrev@CArchInfo@NCab@NArchive@@QBE_NXZ
.text:000050B0 ?IsTherePrev@CArchInfo@NCab@NArchive@@QBE_NXZ proc near
.text:000050B0                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+575p
.text:000050B0
.text:000050B0 var_4           = dword ptr -4
.text:000050B0
.text:000050B0                 push    ebp
.text:000050B1                 mov     ebp, esp
.text:000050B3                 push    ecx
.text:000050B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050BB                 mov     [ebp+var_4], ecx
.text:000050BE                 mov     eax, [ebp+var_4]
.text:000050C1                 mov     eax, [eax+0Ch]
.text:000050C4                 and     eax, 1
.text:000050C7                 neg     eax
.text:000050C9                 sbb     eax, eax
.text:000050CB                 neg     eax
.text:000050CD                 mov     esp, ebp
.text:000050CF                 pop     ebp
.text:000050D0                 retn
.text:000050D0 ?IsTherePrev@CArchInfo@NCab@NArchive@@QBE_NXZ endp
.text:000050D0
.text:000050D0 ; ---------------------------------------------------------------------------
.text:000050D1                 align 4
.text:000050D1 _text           ends
.text:000050D1
.text:000050D4 ; ===========================================================================
.text:000050D4
.text:000050D4 ; Segment type: Pure code
.text:000050D4 ; Segment permissions: Read/Execute
.text:000050D4 _text           segment para public 'CODE' use32
.text:000050D4                 assume cs:_text
.text:000050D4                 ;org 50D4h
.text:000050D4 ; COMDAT (pick any)
.text:000050D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000050D4
.text:000050D4 ; =============== S U B R O U T I N E =======================================
.text:000050D4
.text:000050D4 ; Attributes: bp-based frame
.text:000050D4
.text:000050D4 ; bool __thiscall NArchive::NCab::CArchInfo::IsThereNext(NArchive::NCab::CArchInfo *__hidden this)
.text:000050D4                 public ?IsThereNext@CArchInfo@NCab@NArchive@@QBE_NXZ
.text:000050D4 ?IsThereNext@CArchInfo@NCab@NArchive@@QBE_NXZ proc near
.text:000050D4                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+5CFp
.text:000050D4                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+63Fp
.text:000050D4
.text:000050D4 var_4           = dword ptr -4
.text:000050D4
.text:000050D4                 push    ebp
.text:000050D5                 mov     ebp, esp
.text:000050D7                 push    ecx
.text:000050D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050DF                 mov     [ebp+var_4], ecx
.text:000050E2                 mov     eax, [ebp+var_4]
.text:000050E5                 mov     eax, [eax+0Ch]
.text:000050E8                 and     eax, 2
.text:000050EB                 neg     eax
.text:000050ED                 sbb     eax, eax
.text:000050EF                 neg     eax
.text:000050F1                 mov     esp, ebp
.text:000050F3                 pop     ebp
.text:000050F4                 retn
.text:000050F4 ?IsThereNext@CArchInfo@NCab@NArchive@@QBE_NXZ endp
.text:000050F4
.text:000050F4 ; ---------------------------------------------------------------------------
.text:000050F5                 align 4
.text:000050F5 _text           ends
.text:000050F5
.text:000050F8 ; ===========================================================================
.text:000050F8
.text:000050F8 ; Segment type: Pure code
.text:000050F8 ; Segment permissions: Read/Execute
.text:000050F8 _text           segment para public 'CODE' use32
.text:000050F8                 assume cs:_text
.text:000050F8                 ;org 50F8h
.text:000050F8 ; COMDAT (pick any)
.text:000050F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000050F8
.text:000050F8 ; =============== S U B R O U T I N E =======================================
.text:000050F8
.text:000050F8 ; Attributes: bp-based frame
.text:000050F8
.text:000050F8 ; _DWORD __thiscall NArchive::NCab::CInArchive::CInArchive(NArchive::NCab::CInArchive *__hidden this)
.text:000050F8                 public ??0CInArchive@NCab@NArchive@@QAE@XZ
.text:000050F8 ??0CInArchive@NCab@NArchive@@QAE@XZ proc near
.text:000050F8                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+62p
.text:000050F8
.text:000050F8 var_4           = dword ptr -4
.text:000050F8
.text:000050F8                 push    ebp
.text:000050F9                 mov     ebp, esp
.text:000050FB                 push    ecx
.text:000050FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005103                 mov     [ebp+var_4], ecx
.text:00005106                 mov     ecx, [ebp+var_4] ; this
.text:00005109                 call    ??0CInBufferBase@@QAE@XZ ; CInBufferBase::CInBufferBase(void)
.text:0000510E                 mov     ecx, [ebp+var_4]
.text:00005111                 add     ecx, 28h ; '('
.text:00005114                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:00005119                 mov     eax, [ebp+var_4]
.text:0000511C                 add     esp, 4
.text:0000511F                 cmp     ebp, esp
.text:00005121                 call    __RTC_CheckEsp
.text:00005126                 mov     esp, ebp
.text:00005128                 pop     ebp
.text:00005129                 retn
.text:00005129 ??0CInArchive@NCab@NArchive@@QAE@XZ endp
.text:00005129
.text:00005129 ; ---------------------------------------------------------------------------
.text:0000512A                 align 4
.text:0000512A _text           ends
.text:0000512A
.text:0000512C ; ===========================================================================
.text:0000512C
.text:0000512C ; Segment type: Pure code
.text:0000512C ; Segment permissions: Read/Execute
.text:0000512C _text           segment para public 'CODE' use32
.text:0000512C                 assume cs:_text
.text:0000512C                 ;org 512Ch
.text:0000512C ; COMDAT (pick any)
.text:0000512C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000512C
.text:0000512C ; =============== S U B R O U T I N E =======================================
.text:0000512C
.text:0000512C ; Attributes: bp-based frame
.text:0000512C
.text:0000512C ; _DWORD __thiscall NArchive::NCab::CInArchive::~CInArchive(NArchive::NCab::CInArchive *__hidden this)
.text:0000512C                 public ??1CInArchive@NCab@NArchive@@QAE@XZ
.text:0000512C ??1CInArchive@NCab@NArchive@@QAE@XZ proc near
.text:0000512C                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+3F5p
.text:0000512C                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+459p ...
.text:0000512C
.text:0000512C var_4           = dword ptr -4
.text:0000512C
.text:0000512C                 push    ebp
.text:0000512D                 mov     ebp, esp
.text:0000512F                 push    ecx
.text:00005130                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005137                 mov     [ebp+var_4], ecx
.text:0000513A                 mov     ecx, [ebp+var_4]
.text:0000513D                 add     ecx, 28h ; '('
.text:00005140                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00005145                 add     esp, 4
.text:00005148                 cmp     ebp, esp
.text:0000514A                 call    __RTC_CheckEsp
.text:0000514F                 mov     esp, ebp
.text:00005151                 pop     ebp
.text:00005152                 retn
.text:00005152 ??1CInArchive@NCab@NArchive@@QAE@XZ endp
.text:00005152
.text:00005152 ; ---------------------------------------------------------------------------
.text:00005153                 align 4
.text:00005153 _text           ends
.text:00005153
.text:00005154 ; ===========================================================================
.text:00005154
.text:00005154 ; Segment type: Pure code
.text:00005154 ; Segment permissions: Read/Execute
.text:00005154 _text           segment para public 'CODE' use32
.text:00005154                 assume cs:_text
.text:00005154                 ;org 5154h
.text:00005154 ; COMDAT (pick any)
.text:00005154                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005154
.text:00005154 ; =============== S U B R O U T I N E =======================================
.text:00005154
.text:00005154 ; Attributes: bp-based frame
.text:00005154
.text:00005154 ; _DWORD __thiscall NArchive::NCab::CDatabaseEx::CDatabaseEx(NArchive::NCab::CDatabaseEx *__hidden this)
.text:00005154                 public ??0CDatabaseEx@NCab@NArchive@@QAE@XZ
.text:00005154 ??0CDatabaseEx@NCab@NArchive@@QAE@XZ proc near
.text:00005154                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+FDp
.text:00005154
.text:00005154 var_10          = dword ptr -10h
.text:00005154 var_C           = dword ptr -0Ch
.text:00005154 var_4           = dword ptr -4
.text:00005154
.text:00005154                 push    ebp
.text:00005155                 mov     ebp, esp
.text:00005157                 push    0FFFFFFFFh
.text:00005159                 push    offset __ehhandler$??0CDatabaseEx@NCab@NArchive@@QAE@XZ
.text:0000515E                 mov     eax, large fs:0
.text:00005164                 push    eax
.text:00005165                 push    ecx
.text:00005166                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000516D                 mov     eax, dword ptr ds:___security_cookie
.text:00005172                 xor     eax, ebp
.text:00005174                 push    eax
.text:00005175                 lea     eax, [ebp+var_C]
.text:00005178                 mov     large fs:0, eax
.text:0000517E                 mov     [ebp+var_10], ecx
.text:00005181                 mov     ecx, [ebp+var_10] ; this
.text:00005184                 call    ??0CDatabase@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CDatabase::CDatabase(void)
.text:00005189                 mov     [ebp+var_4], 0
.text:00005190                 mov     ecx, [ebp+var_10]
.text:00005193                 add     ecx, 78h ; 'x'
.text:00005196                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:0000519B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000051A2                 mov     eax, [ebp+var_10]
.text:000051A5                 mov     ecx, [ebp+var_C]
.text:000051A8                 mov     large fs:0, ecx
.text:000051AF                 pop     ecx
.text:000051B0                 add     esp, 10h
.text:000051B3                 cmp     ebp, esp
.text:000051B5                 call    __RTC_CheckEsp
.text:000051BA                 mov     esp, ebp
.text:000051BC                 pop     ebp
.text:000051BD                 retn
.text:000051BD ??0CDatabaseEx@NCab@NArchive@@QAE@XZ endp
.text:000051BD
.text:000051BD ; ---------------------------------------------------------------------------
.text:000051BE                 align 10h
.text:000051BE _text           ends
.text:000051BE
.text$x:000051C0 ; ===========================================================================
.text$x:000051C0
.text$x:000051C0 ; Segment type: Pure code
.text$x:000051C0 ; Segment permissions: Read/Execute
.text$x:000051C0 _text$x         segment para public 'CODE' use32
.text$x:000051C0                 assume cs:_text$x
.text$x:000051C0                 ;org 51C0h
.text$x:000051C0 ; COMDAT (pick associative to section at 5154)
.text$x:000051C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000051C0
.text$x:000051C0 ; =============== S U B R O U T I N E =======================================
.text$x:000051C0
.text$x:000051C0
.text$x:000051C0 __unwindfunclet$??0CDatabaseEx@NCab@NArchive@@QAE@XZ$0 proc near
.text$x:000051C0                                         ; DATA XREF: .xdata$x:000051E8o
.text$x:000051C0                 mov     ecx, [ebp-10h]  ; this
.text$x:000051C3                 jmp     ??1CDatabase@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CDatabase::~CDatabase(void)
.text$x:000051C3 __unwindfunclet$??0CDatabaseEx@NCab@NArchive@@QAE@XZ$0 endp
.text$x:000051C3
.text$x:000051C8
.text$x:000051C8 ; =============== S U B R O U T I N E =======================================
.text$x:000051C8
.text$x:000051C8
.text$x:000051C8 __ehhandler$??0CDatabaseEx@NCab@NArchive@@QAE@XZ proc near
.text$x:000051C8                                         ; DATA XREF: NArchive::NCab::CDatabaseEx::CDatabaseEx(void)+5o
.text$x:000051C8
.text$x:000051C8 arg_4           = dword ptr  8
.text$x:000051C8
.text$x:000051C8                 mov     edx, [esp+arg_4]
.text$x:000051CC                 lea     eax, [edx+0Ch]
.text$x:000051CF                 mov     ecx, [edx-8]
.text$x:000051D2                 xor     ecx, eax
.text$x:000051D4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000051D9                 mov     eax, offset __ehfuncinfo$??0CDatabaseEx@NCab@NArchive@@QAE@XZ
.text$x:000051DE                 jmp     ___CxxFrameHandler3
.text$x:000051DE __ehhandler$??0CDatabaseEx@NCab@NArchive@@QAE@XZ endp
.text$x:000051DE
.text$x:000051DE ; ---------------------------------------------------------------------------
.text$x:000051E3                 align 4
.text$x:000051E3 _text$x         ends
.text$x:000051E3
.xdata$x:000051E4 ; ===========================================================================
.xdata$x:000051E4
.xdata$x:000051E4 ; Segment type: Pure data
.xdata$x:000051E4 ; Segment permissions: Read
.xdata$x:000051E4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000051E4                 assume cs:_xdata$x
.xdata$x:000051E4                 ;org 51E4h
.xdata$x:000051E4 ; COMDAT (pick associative to section at 5154)
.xdata$x:000051E4 __unwindtable$??0CDatabaseEx@NCab@NArchive@@QAE@XZ db 0FFh
.xdata$x:000051E4                                         ; DATA XREF: .xdata$x:000051F4o
.xdata$x:000051E5                 db 0FFh
.xdata$x:000051E6                 db 0FFh
.xdata$x:000051E7                 db 0FFh
.xdata$x:000051E8                 dd offset __unwindfunclet$??0CDatabaseEx@NCab@NArchive@@QAE@XZ$0
.xdata$x:000051EC __ehfuncinfo$??0CDatabaseEx@NCab@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000051EC                                         ; DATA XREF: __ehhandler$??0CDatabaseEx@NCab@NArchive@@QAE@XZ+11o
.xdata$x:000051ED                 db    5
.xdata$x:000051EE                 db  93h ; ô
.xdata$x:000051EF                 db  19h
.xdata$x:000051F0                 db    1
.xdata$x:000051F1                 db    0
.xdata$x:000051F2                 db    0
.xdata$x:000051F3                 db    0
.xdata$x:000051F4                 dd offset __unwindtable$??0CDatabaseEx@NCab@NArchive@@QAE@XZ
.xdata$x:000051F8                 db    0
.xdata$x:000051F9                 db    0
.xdata$x:000051FA                 db    0
.xdata$x:000051FB                 db    0
.xdata$x:000051FC                 db    0
.xdata$x:000051FD                 db    0
.xdata$x:000051FE                 db    0
.xdata$x:000051FF                 db    0
.xdata$x:00005200                 db    0
.xdata$x:00005201                 db    0
.xdata$x:00005202                 db    0
.xdata$x:00005203                 db    0
.xdata$x:00005204                 db    0
.xdata$x:00005205                 db    0
.xdata$x:00005206                 db    0
.xdata$x:00005207                 db    0
.xdata$x:00005208                 db    0
.xdata$x:00005209                 db    0
.xdata$x:0000520A                 db    0
.xdata$x:0000520B                 db    0
.xdata$x:0000520C                 db    1
.xdata$x:0000520D                 db    0
.xdata$x:0000520E                 db    0
.xdata$x:0000520F                 db    0
.xdata$x:0000520F _xdata$x        ends
.xdata$x:0000520F
.text:00005210 ; ===========================================================================
.text:00005210
.text:00005210 ; Segment type: Pure code
.text:00005210 ; Segment permissions: Read/Execute
.text:00005210 _text           segment para public 'CODE' use32
.text:00005210                 assume cs:_text
.text:00005210                 ;org 5210h
.text:00005210 ; COMDAT (pick any)
.text:00005210                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005210
.text:00005210 ; =============== S U B R O U T I N E =======================================
.text:00005210
.text:00005210 ; Attributes: bp-based frame
.text:00005210
.text:00005210 ; _DWORD __thiscall NArchive::NCab::CDatabaseEx::~CDatabaseEx(NArchive::NCab::CDatabaseEx *__hidden this)
.text:00005210                 public ??1CDatabaseEx@NCab@NArchive@@QAE@XZ
.text:00005210 ??1CDatabaseEx@NCab@NArchive@@QAE@XZ proc near
.text:00005210                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+3D1p
.text:00005210                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+435p ...
.text:00005210
.text:00005210 var_10          = dword ptr -10h
.text:00005210 var_C           = dword ptr -0Ch
.text:00005210 var_4           = dword ptr -4
.text:00005210
.text:00005210                 push    ebp
.text:00005211                 mov     ebp, esp
.text:00005213                 push    0FFFFFFFFh
.text:00005215                 push    offset __ehhandler$??1CDatabaseEx@NCab@NArchive@@QAE@XZ
.text:0000521A                 mov     eax, large fs:0
.text:00005220                 push    eax
.text:00005221                 push    ecx
.text:00005222                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005229                 mov     eax, dword ptr ds:___security_cookie
.text:0000522E                 xor     eax, ebp
.text:00005230                 push    eax
.text:00005231                 lea     eax, [ebp+var_C]
.text:00005234                 mov     large fs:0, eax
.text:0000523A                 mov     [ebp+var_10], ecx
.text:0000523D                 mov     [ebp+var_4], 0
.text:00005244                 mov     ecx, [ebp+var_10]
.text:00005247                 add     ecx, 78h ; 'x'
.text:0000524A                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:0000524F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005256                 mov     ecx, [ebp+var_10] ; this
.text:00005259                 call    ??1CDatabase@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CDatabase::~CDatabase(void)
.text:0000525E                 mov     ecx, [ebp+var_C]
.text:00005261                 mov     large fs:0, ecx
.text:00005268                 pop     ecx
.text:00005269                 add     esp, 10h
.text:0000526C                 cmp     ebp, esp
.text:0000526E                 call    __RTC_CheckEsp
.text:00005273                 mov     esp, ebp
.text:00005275                 pop     ebp
.text:00005276                 retn
.text:00005276 ??1CDatabaseEx@NCab@NArchive@@QAE@XZ endp
.text:00005276
.text:00005276 ; ---------------------------------------------------------------------------
.text:00005277                 align 4
.text:00005277 _text           ends
.text:00005277
.text$x:00005278 ; ===========================================================================
.text$x:00005278
.text$x:00005278 ; Segment type: Pure code
.text$x:00005278 ; Segment permissions: Read/Execute
.text$x:00005278 _text$x         segment para public 'CODE' use32
.text$x:00005278                 assume cs:_text$x
.text$x:00005278                 ;org 5278h
.text$x:00005278 ; COMDAT (pick associative to section at 5210)
.text$x:00005278                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005278
.text$x:00005278 ; =============== S U B R O U T I N E =======================================
.text$x:00005278
.text$x:00005278
.text$x:00005278 __unwindfunclet$??1CDatabaseEx@NCab@NArchive@@QAE@XZ$0 proc near
.text$x:00005278                                         ; DATA XREF: .xdata$x:000052A0o
.text$x:00005278                 mov     ecx, [ebp-10h]  ; this
.text$x:0000527B                 jmp     ??1CDatabase@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CDatabase::~CDatabase(void)
.text$x:0000527B __unwindfunclet$??1CDatabaseEx@NCab@NArchive@@QAE@XZ$0 endp
.text$x:0000527B
.text$x:00005280
.text$x:00005280 ; =============== S U B R O U T I N E =======================================
.text$x:00005280
.text$x:00005280
.text$x:00005280 __ehhandler$??1CDatabaseEx@NCab@NArchive@@QAE@XZ proc near
.text$x:00005280                                         ; DATA XREF: NArchive::NCab::CDatabaseEx::~CDatabaseEx(void)+5o
.text$x:00005280
.text$x:00005280 arg_4           = dword ptr  8
.text$x:00005280
.text$x:00005280                 mov     edx, [esp+arg_4]
.text$x:00005284                 lea     eax, [edx+0Ch]
.text$x:00005287                 mov     ecx, [edx-8]
.text$x:0000528A                 xor     ecx, eax
.text$x:0000528C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005291                 mov     eax, offset __ehfuncinfo$??1CDatabaseEx@NCab@NArchive@@QAE@XZ
.text$x:00005296                 jmp     ___CxxFrameHandler3
.text$x:00005296 __ehhandler$??1CDatabaseEx@NCab@NArchive@@QAE@XZ endp
.text$x:00005296
.text$x:00005296 ; ---------------------------------------------------------------------------
.text$x:0000529B                 align 4
.text$x:0000529B _text$x         ends
.text$x:0000529B
.xdata$x:0000529C ; ===========================================================================
.xdata$x:0000529C
.xdata$x:0000529C ; Segment type: Pure data
.xdata$x:0000529C ; Segment permissions: Read
.xdata$x:0000529C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000529C                 assume cs:_xdata$x
.xdata$x:0000529C                 ;org 529Ch
.xdata$x:0000529C ; COMDAT (pick associative to section at 5210)
.xdata$x:0000529C __unwindtable$??1CDatabaseEx@NCab@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000529C                                         ; DATA XREF: .xdata$x:000052ACo
.xdata$x:0000529D                 db 0FFh
.xdata$x:0000529E                 db 0FFh
.xdata$x:0000529F                 db 0FFh
.xdata$x:000052A0                 dd offset __unwindfunclet$??1CDatabaseEx@NCab@NArchive@@QAE@XZ$0
.xdata$x:000052A4 __ehfuncinfo$??1CDatabaseEx@NCab@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000052A4                                         ; DATA XREF: __ehhandler$??1CDatabaseEx@NCab@NArchive@@QAE@XZ+11o
.xdata$x:000052A5                 db    5
.xdata$x:000052A6                 db  93h ; ô
.xdata$x:000052A7                 db  19h
.xdata$x:000052A8                 db    1
.xdata$x:000052A9                 db    0
.xdata$x:000052AA                 db    0
.xdata$x:000052AB                 db    0
.xdata$x:000052AC                 dd offset __unwindtable$??1CDatabaseEx@NCab@NArchive@@QAE@XZ
.xdata$x:000052B0                 db    0
.xdata$x:000052B1                 db    0
.xdata$x:000052B2                 db    0
.xdata$x:000052B3                 db    0
.xdata$x:000052B4                 db    0
.xdata$x:000052B5                 db    0
.xdata$x:000052B6                 db    0
.xdata$x:000052B7                 db    0
.xdata$x:000052B8                 db    0
.xdata$x:000052B9                 db    0
.xdata$x:000052BA                 db    0
.xdata$x:000052BB                 db    0
.xdata$x:000052BC                 db    0
.xdata$x:000052BD                 db    0
.xdata$x:000052BE                 db    0
.xdata$x:000052BF                 db    0
.xdata$x:000052C0                 db    0
.xdata$x:000052C1                 db    0
.xdata$x:000052C2                 db    0
.xdata$x:000052C3                 db    0
.xdata$x:000052C4                 db    1
.xdata$x:000052C5                 db    0
.xdata$x:000052C6                 db    0
.xdata$x:000052C7                 db    0
.xdata$x:000052C7 _xdata$x        ends
.xdata$x:000052C7
.text:000052C8 ; ===========================================================================
.text:000052C8
.text:000052C8 ; Segment type: Pure code
.text:000052C8 ; Segment permissions: Read/Execute
.text:000052C8 _text           segment para public 'CODE' use32
.text:000052C8                 assume cs:_text
.text:000052C8                 ;org 52C8h
.text:000052C8 ; COMDAT (pick any)
.text:000052C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000052C8
.text:000052C8 ; =============== S U B R O U T I N E =======================================
.text:000052C8
.text:000052C8 ; Attributes: bp-based frame
.text:000052C8
.text:000052C8 ; _DWORD __thiscall NArchive::NCab::CDatabase::CDatabase(NArchive::NCab::CDatabase *__hidden this)
.text:000052C8                 public ??0CDatabase@NCab@NArchive@@QAE@XZ
.text:000052C8 ??0CDatabase@NCab@NArchive@@QAE@XZ proc near
.text:000052C8                                         ; CODE XREF: NArchive::NCab::CDatabaseEx::CDatabaseEx(void)+30p
.text:000052C8
.text:000052C8 var_10          = dword ptr -10h
.text:000052C8 var_C           = dword ptr -0Ch
.text:000052C8 var_4           = dword ptr -4
.text:000052C8
.text:000052C8                 push    ebp
.text:000052C9                 mov     ebp, esp
.text:000052CB                 push    0FFFFFFFFh
.text:000052CD                 push    offset __ehhandler$??0CDatabase@NCab@NArchive@@QAE@XZ
.text:000052D2                 mov     eax, large fs:0
.text:000052D8                 push    eax
.text:000052D9                 push    ecx
.text:000052DA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000052E1                 mov     eax, dword ptr ds:___security_cookie
.text:000052E6                 xor     eax, ebp
.text:000052E8                 push    eax
.text:000052E9                 lea     eax, [ebp+var_C]
.text:000052EC                 mov     large fs:0, eax
.text:000052F2                 mov     [ebp+var_10], ecx
.text:000052F5                 mov     ecx, [ebp+var_10]
.text:000052F8                 call    ??0?$CRecordVector@UCFolder@NCab@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NCab::CFolder>::CRecordVector<NArchive::NCab::CFolder>(void)
.text:000052FD                 mov     [ebp+var_4], 0
.text:00005304                 mov     ecx, [ebp+var_10]
.text:00005307                 add     ecx, 0Ch
.text:0000530A                 call    ??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NCab::CItem>::CObjectVector<NArchive::NCab::CItem>(void)
.text:0000530F                 mov     byte ptr [ebp+var_4], 1
.text:00005313                 mov     ecx, [ebp+var_10]
.text:00005316                 add     ecx, 20h ; ' '  ; this
.text:00005319                 call    ??0CInArcInfo@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CInArcInfo::CInArcInfo(void)
.text:0000531E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005325                 mov     eax, [ebp+var_10]
.text:00005328                 mov     ecx, [ebp+var_C]
.text:0000532B                 mov     large fs:0, ecx
.text:00005332                 pop     ecx
.text:00005333                 add     esp, 10h
.text:00005336                 cmp     ebp, esp
.text:00005338                 call    __RTC_CheckEsp
.text:0000533D                 mov     esp, ebp
.text:0000533F                 pop     ebp
.text:00005340                 retn
.text:00005340 ??0CDatabase@NCab@NArchive@@QAE@XZ endp
.text:00005340
.text:00005340 ; ---------------------------------------------------------------------------
.text:00005341                 align 4
.text:00005341 _text           ends
.text:00005341
.text$x:00005344 ; ===========================================================================
.text$x:00005344
.text$x:00005344 ; Segment type: Pure code
.text$x:00005344 ; Segment permissions: Read/Execute
.text$x:00005344 _text$x         segment para public 'CODE' use32
.text$x:00005344                 assume cs:_text$x
.text$x:00005344                 ;org 5344h
.text$x:00005344 ; COMDAT (pick associative to section at 52C8)
.text$x:00005344                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005344
.text$x:00005344 ; =============== S U B R O U T I N E =======================================
.text$x:00005344
.text$x:00005344
.text$x:00005344 __unwindfunclet$??0CDatabase@NCab@NArchive@@QAE@XZ$0 proc near
.text$x:00005344                                         ; DATA XREF: .xdata$x:00005378o
.text$x:00005344                 mov     ecx, [ebp-10h]
.text$x:00005347                 jmp     ??1?$CRecordVector@UCFolder@NCab@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NCab::CFolder>::~CRecordVector<NArchive::NCab::CFolder>(void)
.text$x:00005347 __unwindfunclet$??0CDatabase@NCab@NArchive@@QAE@XZ$0 endp
.text$x:00005347
.text$x:0000534C
.text$x:0000534C ; =============== S U B R O U T I N E =======================================
.text$x:0000534C
.text$x:0000534C
.text$x:0000534C __unwindfunclet$??0CDatabase@NCab@NArchive@@QAE@XZ$1 proc near
.text$x:0000534C                                         ; DATA XREF: .xdata$x:00005380o
.text$x:0000534C                 mov     ecx, [ebp-10h]
.text$x:0000534F                 add     ecx, 0Ch
.text$x:00005352                 jmp     ??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)
.text$x:00005352 __unwindfunclet$??0CDatabase@NCab@NArchive@@QAE@XZ$1 endp
.text$x:00005352
.text$x:00005357
.text$x:00005357 ; =============== S U B R O U T I N E =======================================
.text$x:00005357
.text$x:00005357
.text$x:00005357 __ehhandler$??0CDatabase@NCab@NArchive@@QAE@XZ proc near
.text$x:00005357                                         ; DATA XREF: NArchive::NCab::CDatabase::CDatabase(void)+5o
.text$x:00005357
.text$x:00005357 arg_4           = dword ptr  8
.text$x:00005357
.text$x:00005357                 mov     edx, [esp+arg_4]
.text$x:0000535B                 lea     eax, [edx+0Ch]
.text$x:0000535E                 mov     ecx, [edx-8]
.text$x:00005361                 xor     ecx, eax
.text$x:00005363                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005368                 mov     eax, offset __ehfuncinfo$??0CDatabase@NCab@NArchive@@QAE@XZ
.text$x:0000536D                 jmp     ___CxxFrameHandler3
.text$x:0000536D __ehhandler$??0CDatabase@NCab@NArchive@@QAE@XZ endp
.text$x:0000536D
.text$x:0000536D ; ---------------------------------------------------------------------------
.text$x:00005372                 align 4
.text$x:00005372 _text$x         ends
.text$x:00005372
.xdata$x:00005374 ; ===========================================================================
.xdata$x:00005374
.xdata$x:00005374 ; Segment type: Pure data
.xdata$x:00005374 ; Segment permissions: Read
.xdata$x:00005374 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005374                 assume cs:_xdata$x
.xdata$x:00005374                 ;org 5374h
.xdata$x:00005374 ; COMDAT (pick associative to section at 52C8)
.xdata$x:00005374 __unwindtable$??0CDatabase@NCab@NArchive@@QAE@XZ db 0FFh
.xdata$x:00005374                                         ; DATA XREF: .xdata$x:0000538Co
.xdata$x:00005375                 db 0FFh
.xdata$x:00005376                 db 0FFh
.xdata$x:00005377                 db 0FFh
.xdata$x:00005378                 dd offset __unwindfunclet$??0CDatabase@NCab@NArchive@@QAE@XZ$0
.xdata$x:0000537C                 align 10h
.xdata$x:00005380                 dd offset __unwindfunclet$??0CDatabase@NCab@NArchive@@QAE@XZ$1
.xdata$x:00005384 __ehfuncinfo$??0CDatabase@NCab@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00005384                                         ; DATA XREF: __ehhandler$??0CDatabase@NCab@NArchive@@QAE@XZ+11o
.xdata$x:00005385                 db    5
.xdata$x:00005386                 db  93h ; ô
.xdata$x:00005387                 db  19h
.xdata$x:00005388                 db    2
.xdata$x:00005389                 db    0
.xdata$x:0000538A                 db    0
.xdata$x:0000538B                 db    0
.xdata$x:0000538C                 dd offset __unwindtable$??0CDatabase@NCab@NArchive@@QAE@XZ
.xdata$x:00005390                 db    0
.xdata$x:00005391                 db    0
.xdata$x:00005392                 db    0
.xdata$x:00005393                 db    0
.xdata$x:00005394                 db    0
.xdata$x:00005395                 db    0
.xdata$x:00005396                 db    0
.xdata$x:00005397                 db    0
.xdata$x:00005398                 db    0
.xdata$x:00005399                 db    0
.xdata$x:0000539A                 db    0
.xdata$x:0000539B                 db    0
.xdata$x:0000539C                 db    0
.xdata$x:0000539D                 db    0
.xdata$x:0000539E                 db    0
.xdata$x:0000539F                 db    0
.xdata$x:000053A0                 db    0
.xdata$x:000053A1                 db    0
.xdata$x:000053A2                 db    0
.xdata$x:000053A3                 db    0
.xdata$x:000053A4                 db    1
.xdata$x:000053A5                 db    0
.xdata$x:000053A6                 db    0
.xdata$x:000053A7                 db    0
.xdata$x:000053A7 _xdata$x        ends
.xdata$x:000053A7
.text:000053A8 ; ===========================================================================
.text:000053A8
.text:000053A8 ; Segment type: Pure code
.text:000053A8 ; Segment permissions: Read/Execute
.text:000053A8 _text           segment para public 'CODE' use32
.text:000053A8                 assume cs:_text
.text:000053A8                 ;org 53A8h
.text:000053A8 ; COMDAT (pick any)
.text:000053A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000053A8
.text:000053A8 ; =============== S U B R O U T I N E =======================================
.text:000053A8
.text:000053A8 ; Attributes: bp-based frame
.text:000053A8
.text:000053A8 ; _DWORD __thiscall NArchive::NCab::CDatabase::~CDatabase(NArchive::NCab::CDatabase *__hidden this)
.text:000053A8                 public ??1CDatabase@NCab@NArchive@@QAE@XZ
.text:000053A8 ??1CDatabase@NCab@NArchive@@QAE@XZ proc near
.text:000053A8                                         ; CODE XREF: __unwindfunclet$??0CDatabaseEx@NCab@NArchive@@QAE@XZ$0+3j
.text:000053A8                                         ; NArchive::NCab::CDatabaseEx::~CDatabaseEx(void)+49p ...
.text:000053A8
.text:000053A8 var_10          = dword ptr -10h
.text:000053A8 var_C           = dword ptr -0Ch
.text:000053A8 var_4           = dword ptr -4
.text:000053A8
.text:000053A8                 push    ebp
.text:000053A9                 mov     ebp, esp
.text:000053AB                 push    0FFFFFFFFh
.text:000053AD                 push    offset __ehhandler$??1CDatabase@NCab@NArchive@@QAE@XZ
.text:000053B2                 mov     eax, large fs:0
.text:000053B8                 push    eax
.text:000053B9                 push    ecx
.text:000053BA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000053C1                 mov     eax, dword ptr ds:___security_cookie
.text:000053C6                 xor     eax, ebp
.text:000053C8                 push    eax
.text:000053C9                 lea     eax, [ebp+var_C]
.text:000053CC                 mov     large fs:0, eax
.text:000053D2                 mov     [ebp+var_10], ecx
.text:000053D5                 mov     [ebp+var_4], 1
.text:000053DC                 mov     ecx, [ebp+var_10]
.text:000053DF                 add     ecx, 20h ; ' '  ; this
.text:000053E2                 call    ??1CInArcInfo@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CInArcInfo::~CInArcInfo(void)
.text:000053E7                 mov     byte ptr [ebp+var_4], 0
.text:000053EB                 mov     ecx, [ebp+var_10]
.text:000053EE                 add     ecx, 0Ch
.text:000053F1                 call    ??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)
.text:000053F6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000053FD                 mov     ecx, [ebp+var_10]
.text:00005400                 call    ??1?$CRecordVector@UCFolder@NCab@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NCab::CFolder>::~CRecordVector<NArchive::NCab::CFolder>(void)
.text:00005405                 mov     ecx, [ebp+var_C]
.text:00005408                 mov     large fs:0, ecx
.text:0000540F                 pop     ecx
.text:00005410                 add     esp, 10h
.text:00005413                 cmp     ebp, esp
.text:00005415                 call    __RTC_CheckEsp
.text:0000541A                 mov     esp, ebp
.text:0000541C                 pop     ebp
.text:0000541D                 retn
.text:0000541D ??1CDatabase@NCab@NArchive@@QAE@XZ endp
.text:0000541D
.text:0000541D ; ---------------------------------------------------------------------------
.text:0000541E                 align 10h
.text:0000541E _text           ends
.text:0000541E
.text$x:00005420 ; ===========================================================================
.text$x:00005420
.text$x:00005420 ; Segment type: Pure code
.text$x:00005420 ; Segment permissions: Read/Execute
.text$x:00005420 _text$x         segment para public 'CODE' use32
.text$x:00005420                 assume cs:_text$x
.text$x:00005420                 ;org 5420h
.text$x:00005420 ; COMDAT (pick associative to section at 53A8)
.text$x:00005420                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005420
.text$x:00005420 ; =============== S U B R O U T I N E =======================================
.text$x:00005420
.text$x:00005420
.text$x:00005420 __unwindfunclet$??1CDatabase@NCab@NArchive@@QAE@XZ$0 proc near
.text$x:00005420                                         ; DATA XREF: .xdata$x:00005454o
.text$x:00005420                 mov     ecx, [ebp-10h]
.text$x:00005423                 jmp     ??1?$CRecordVector@UCFolder@NCab@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NCab::CFolder>::~CRecordVector<NArchive::NCab::CFolder>(void)
.text$x:00005423 __unwindfunclet$??1CDatabase@NCab@NArchive@@QAE@XZ$0 endp
.text$x:00005423
.text$x:00005428
.text$x:00005428 ; =============== S U B R O U T I N E =======================================
.text$x:00005428
.text$x:00005428
.text$x:00005428 __unwindfunclet$??1CDatabase@NCab@NArchive@@QAE@XZ$1 proc near
.text$x:00005428                                         ; DATA XREF: .xdata$x:0000545Co
.text$x:00005428                 mov     ecx, [ebp-10h]
.text$x:0000542B                 add     ecx, 0Ch
.text$x:0000542E                 jmp     ??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)
.text$x:0000542E __unwindfunclet$??1CDatabase@NCab@NArchive@@QAE@XZ$1 endp
.text$x:0000542E
.text$x:00005433
.text$x:00005433 ; =============== S U B R O U T I N E =======================================
.text$x:00005433
.text$x:00005433
.text$x:00005433 __ehhandler$??1CDatabase@NCab@NArchive@@QAE@XZ proc near
.text$x:00005433                                         ; DATA XREF: NArchive::NCab::CDatabase::~CDatabase(void)+5o
.text$x:00005433
.text$x:00005433 arg_4           = dword ptr  8
.text$x:00005433
.text$x:00005433                 mov     edx, [esp+arg_4]
.text$x:00005437                 lea     eax, [edx+0Ch]
.text$x:0000543A                 mov     ecx, [edx-8]
.text$x:0000543D                 xor     ecx, eax
.text$x:0000543F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005444                 mov     eax, offset __ehfuncinfo$??1CDatabase@NCab@NArchive@@QAE@XZ
.text$x:00005449                 jmp     ___CxxFrameHandler3
.text$x:00005449 __ehhandler$??1CDatabase@NCab@NArchive@@QAE@XZ endp
.text$x:00005449
.text$x:00005449 ; ---------------------------------------------------------------------------
.text$x:0000544E                 align 10h
.text$x:0000544E _text$x         ends
.text$x:0000544E
.xdata$x:00005450 ; ===========================================================================
.xdata$x:00005450
.xdata$x:00005450 ; Segment type: Pure data
.xdata$x:00005450 ; Segment permissions: Read
.xdata$x:00005450 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005450                 assume cs:_xdata$x
.xdata$x:00005450                 ;org 5450h
.xdata$x:00005450 ; COMDAT (pick associative to section at 53A8)
.xdata$x:00005450 __unwindtable$??1CDatabase@NCab@NArchive@@QAE@XZ db 0FFh
.xdata$x:00005450                                         ; DATA XREF: .xdata$x:00005468o
.xdata$x:00005451                 db 0FFh
.xdata$x:00005452                 db 0FFh
.xdata$x:00005453                 db 0FFh
.xdata$x:00005454                 dd offset __unwindfunclet$??1CDatabase@NCab@NArchive@@QAE@XZ$0
.xdata$x:00005458                 db    0
.xdata$x:00005459                 db    0
.xdata$x:0000545A                 db    0
.xdata$x:0000545B                 db    0
.xdata$x:0000545C                 dd offset __unwindfunclet$??1CDatabase@NCab@NArchive@@QAE@XZ$1
.xdata$x:00005460 __ehfuncinfo$??1CDatabase@NCab@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00005460                                         ; DATA XREF: __ehhandler$??1CDatabase@NCab@NArchive@@QAE@XZ+11o
.xdata$x:00005461                 db    5
.xdata$x:00005462                 db  93h ; ô
.xdata$x:00005463                 db  19h
.xdata$x:00005464                 db    2
.xdata$x:00005465                 db    0
.xdata$x:00005466                 db    0
.xdata$x:00005467                 db    0
.xdata$x:00005468                 dd offset __unwindtable$??1CDatabase@NCab@NArchive@@QAE@XZ
.xdata$x:0000546C                 align 20h
.xdata$x:00005480                 db    1
.xdata$x:00005481                 db    0
.xdata$x:00005482                 db    0
.xdata$x:00005483                 db    0
.xdata$x:00005483 _xdata$x        ends
.xdata$x:00005483
.text:00005484 ; ===========================================================================
.text:00005484
.text:00005484 ; Segment type: Pure code
.text:00005484 ; Segment permissions: Read/Execute
.text:00005484 _text           segment para public 'CODE' use32
.text:00005484                 assume cs:_text
.text:00005484                 ;org 5484h
.text:00005484 ; COMDAT (pick any)
.text:00005484                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005484
.text:00005484 ; =============== S U B R O U T I N E =======================================
.text:00005484
.text:00005484 ; Attributes: bp-based frame
.text:00005484
.text:00005484 ; _DWORD __thiscall NArchive::NCab::CInArcInfo::CInArcInfo(NArchive::NCab::CInArcInfo *__hidden this)
.text:00005484                 public ??0CInArcInfo@NCab@NArchive@@QAE@XZ
.text:00005484 ??0CInArcInfo@NCab@NArchive@@QAE@XZ proc near
.text:00005484                                         ; CODE XREF: NArchive::NCab::CDatabase::CDatabase(void)+51p
.text:00005484
.text:00005484 var_4           = dword ptr -4
.text:00005484
.text:00005484                 push    ebp
.text:00005485                 mov     ebp, esp
.text:00005487                 push    ecx
.text:00005488                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000548F                 mov     [ebp+var_4], ecx
.text:00005492                 mov     ecx, [ebp+var_4] ; this
.text:00005495                 call    ??0CArchInfo@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CArchInfo::CArchInfo(void)
.text:0000549A                 mov     eax, [ebp+var_4]
.text:0000549D                 add     esp, 4
.text:000054A0                 cmp     ebp, esp
.text:000054A2                 call    __RTC_CheckEsp
.text:000054A7                 mov     esp, ebp
.text:000054A9                 pop     ebp
.text:000054AA                 retn
.text:000054AA ??0CInArcInfo@NCab@NArchive@@QAE@XZ endp
.text:000054AA
.text:000054AA ; ---------------------------------------------------------------------------
.text:000054AB                 align 4
.text:000054AB _text           ends
.text:000054AB
.text:000054AC ; ===========================================================================
.text:000054AC
.text:000054AC ; Segment type: Pure code
.text:000054AC ; Segment permissions: Read/Execute
.text:000054AC _text           segment para public 'CODE' use32
.text:000054AC                 assume cs:_text
.text:000054AC                 ;org 54ACh
.text:000054AC ; COMDAT (pick any)
.text:000054AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000054AC
.text:000054AC ; =============== S U B R O U T I N E =======================================
.text:000054AC
.text:000054AC ; Attributes: bp-based frame
.text:000054AC
.text:000054AC ; _DWORD __thiscall NArchive::NCab::CArchInfo::CArchInfo(NArchive::NCab::CArchInfo *__hidden this)
.text:000054AC                 public ??0CArchInfo@NCab@NArchive@@QAE@XZ
.text:000054AC ??0CArchInfo@NCab@NArchive@@QAE@XZ proc near
.text:000054AC                                         ; CODE XREF: NArchive::NCab::CInArcInfo::CInArcInfo(void)+11p
.text:000054AC
.text:000054AC var_10          = dword ptr -10h
.text:000054AC var_C           = dword ptr -0Ch
.text:000054AC var_4           = dword ptr -4
.text:000054AC
.text:000054AC                 push    ebp
.text:000054AD                 mov     ebp, esp
.text:000054AF                 push    0FFFFFFFFh
.text:000054B1                 push    offset __ehhandler$??0CArchInfo@NCab@NArchive@@QAE@XZ
.text:000054B6                 mov     eax, large fs:0
.text:000054BC                 push    eax
.text:000054BD                 push    ecx
.text:000054BE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000054C5                 mov     eax, dword ptr ds:___security_cookie
.text:000054CA                 xor     eax, ebp
.text:000054CC                 push    eax
.text:000054CD                 lea     eax, [ebp+var_C]
.text:000054D0                 mov     large fs:0, eax
.text:000054D6                 mov     [ebp+var_10], ecx
.text:000054D9                 mov     ecx, [ebp+var_10]
.text:000054DC                 add     ecx, 1Ch        ; this
.text:000054DF                 call    ??0COtherArc@NCab@NArchive@@QAE@XZ ; NArchive::NCab::COtherArc::COtherArc(void)
.text:000054E4                 mov     [ebp+var_4], 0
.text:000054EB                 mov     ecx, [ebp+var_10]
.text:000054EE                 add     ecx, 34h ; '4'  ; this
.text:000054F1                 call    ??0COtherArc@NCab@NArchive@@QAE@XZ ; NArchive::NCab::COtherArc::COtherArc(void)
.text:000054F6                 xor     eax, eax
.text:000054F8                 mov     ecx, [ebp+var_10]
.text:000054FB                 mov     [ecx+18h], ax
.text:000054FF                 mov     edx, [ebp+var_10]
.text:00005502                 mov     byte ptr [edx+1Ah], 0
.text:00005506                 mov     eax, [ebp+var_10]
.text:00005509                 mov     byte ptr [eax+1Bh], 0
.text:0000550D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005514                 mov     eax, [ebp+var_10]
.text:00005517                 mov     ecx, [ebp+var_C]
.text:0000551A                 mov     large fs:0, ecx
.text:00005521                 pop     ecx
.text:00005522                 add     esp, 10h
.text:00005525                 cmp     ebp, esp
.text:00005527                 call    __RTC_CheckEsp
.text:0000552C                 mov     esp, ebp
.text:0000552E                 pop     ebp
.text:0000552F                 retn
.text:0000552F ??0CArchInfo@NCab@NArchive@@QAE@XZ endp
.text:0000552F
.text:0000552F _text           ends
.text:0000552F
.text$x:00005530 ; ===========================================================================
.text$x:00005530
.text$x:00005530 ; Segment type: Pure code
.text$x:00005530 ; Segment permissions: Read/Execute
.text$x:00005530 _text$x         segment para public 'CODE' use32
.text$x:00005530                 assume cs:_text$x
.text$x:00005530                 ;org 5530h
.text$x:00005530 ; COMDAT (pick associative to section at 54AC)
.text$x:00005530                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005530
.text$x:00005530 ; =============== S U B R O U T I N E =======================================
.text$x:00005530
.text$x:00005530
.text$x:00005530 __unwindfunclet$??0CArchInfo@NCab@NArchive@@QAE@XZ$0 proc near
.text$x:00005530                                         ; DATA XREF: .xdata$x:0000555Co
.text$x:00005530                 mov     ecx, [ebp-10h]
.text$x:00005533                 add     ecx, 1Ch        ; this
.text$x:00005536                 jmp     ??1COtherArc@NCab@NArchive@@QAE@XZ ; NArchive::NCab::COtherArc::~COtherArc(void)
.text$x:00005536 __unwindfunclet$??0CArchInfo@NCab@NArchive@@QAE@XZ$0 endp
.text$x:00005536
.text$x:0000553B
.text$x:0000553B ; =============== S U B R O U T I N E =======================================
.text$x:0000553B
.text$x:0000553B
.text$x:0000553B __ehhandler$??0CArchInfo@NCab@NArchive@@QAE@XZ proc near
.text$x:0000553B                                         ; DATA XREF: NArchive::NCab::CArchInfo::CArchInfo(void)+5o
.text$x:0000553B
.text$x:0000553B arg_4           = dword ptr  8
.text$x:0000553B
.text$x:0000553B                 mov     edx, [esp+arg_4]
.text$x:0000553F                 lea     eax, [edx+0Ch]
.text$x:00005542                 mov     ecx, [edx-8]
.text$x:00005545                 xor     ecx, eax
.text$x:00005547                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000554C                 mov     eax, offset __ehfuncinfo$??0CArchInfo@NCab@NArchive@@QAE@XZ
.text$x:00005551                 jmp     ___CxxFrameHandler3
.text$x:00005551 __ehhandler$??0CArchInfo@NCab@NArchive@@QAE@XZ endp
.text$x:00005551
.text$x:00005551 ; ---------------------------------------------------------------------------
.text$x:00005556                 align 4
.text$x:00005556 _text$x         ends
.text$x:00005556
.xdata$x:00005558 ; ===========================================================================
.xdata$x:00005558
.xdata$x:00005558 ; Segment type: Pure data
.xdata$x:00005558 ; Segment permissions: Read
.xdata$x:00005558 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005558                 assume cs:_xdata$x
.xdata$x:00005558                 ;org 5558h
.xdata$x:00005558 ; COMDAT (pick associative to section at 54AC)
.xdata$x:00005558 __unwindtable$??0CArchInfo@NCab@NArchive@@QAE@XZ db 0FFh
.xdata$x:00005558                                         ; DATA XREF: .xdata$x:00005568o
.xdata$x:00005559                 db 0FFh
.xdata$x:0000555A                 db 0FFh
.xdata$x:0000555B                 db 0FFh
.xdata$x:0000555C                 dd offset __unwindfunclet$??0CArchInfo@NCab@NArchive@@QAE@XZ$0
.xdata$x:00005560 __ehfuncinfo$??0CArchInfo@NCab@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00005560                                         ; DATA XREF: __ehhandler$??0CArchInfo@NCab@NArchive@@QAE@XZ+11o
.xdata$x:00005561                 db    5
.xdata$x:00005562                 db  93h ; ô
.xdata$x:00005563                 db  19h
.xdata$x:00005564                 db    1
.xdata$x:00005565                 db    0
.xdata$x:00005566                 db    0
.xdata$x:00005567                 db    0
.xdata$x:00005568                 dd offset __unwindtable$??0CArchInfo@NCab@NArchive@@QAE@XZ
.xdata$x:0000556C                 align 20h
.xdata$x:00005580                 db    1
.xdata$x:00005581                 db    0
.xdata$x:00005582                 db    0
.xdata$x:00005583                 db    0
.xdata$x:00005583 _xdata$x        ends
.xdata$x:00005583
.text:00005584 ; ===========================================================================
.text:00005584
.text:00005584 ; Segment type: Pure code
.text:00005584 ; Segment permissions: Read/Execute
.text:00005584 _text           segment para public 'CODE' use32
.text:00005584                 assume cs:_text
.text:00005584                 ;org 5584h
.text:00005584 ; COMDAT (pick any)
.text:00005584                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005584
.text:00005584 ; =============== S U B R O U T I N E =======================================
.text:00005584
.text:00005584 ; Attributes: bp-based frame
.text:00005584
.text:00005584 ; _DWORD __thiscall NArchive::NCab::COtherArc::COtherArc(NArchive::NCab::COtherArc *__hidden this)
.text:00005584                 public ??0COtherArc@NCab@NArchive@@QAE@XZ
.text:00005584 ??0COtherArc@NCab@NArchive@@QAE@XZ proc near
.text:00005584                                         ; CODE XREF: NArchive::NCab::CArchInfo::CArchInfo(void)+33p
.text:00005584                                         ; NArchive::NCab::CArchInfo::CArchInfo(void)+45p
.text:00005584
.text:00005584 var_10          = dword ptr -10h
.text:00005584 var_C           = dword ptr -0Ch
.text:00005584 var_4           = dword ptr -4
.text:00005584
.text:00005584                 push    ebp
.text:00005585                 mov     ebp, esp
.text:00005587                 push    0FFFFFFFFh
.text:00005589                 push    offset __ehhandler$??0COtherArc@NCab@NArchive@@QAE@XZ
.text:0000558E                 mov     eax, large fs:0
.text:00005594                 push    eax
.text:00005595                 push    ecx
.text:00005596                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000559D                 mov     eax, dword ptr ds:___security_cookie
.text:000055A2                 xor     eax, ebp
.text:000055A4                 push    eax
.text:000055A5                 lea     eax, [ebp+var_C]
.text:000055A8                 mov     large fs:0, eax
.text:000055AE                 mov     [ebp+var_10], ecx
.text:000055B1                 mov     ecx, [ebp+var_10]
.text:000055B4                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000055B9                 mov     [ebp+var_4], 0
.text:000055C0                 mov     ecx, [ebp+var_10]
.text:000055C3                 add     ecx, 0Ch
.text:000055C6                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000055CB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000055D2                 mov     eax, [ebp+var_10]
.text:000055D5                 mov     ecx, [ebp+var_C]
.text:000055D8                 mov     large fs:0, ecx
.text:000055DF                 pop     ecx
.text:000055E0                 add     esp, 10h
.text:000055E3                 cmp     ebp, esp
.text:000055E5                 call    __RTC_CheckEsp
.text:000055EA                 mov     esp, ebp
.text:000055EC                 pop     ebp
.text:000055ED                 retn
.text:000055ED ??0COtherArc@NCab@NArchive@@QAE@XZ endp
.text:000055ED
.text:000055ED ; ---------------------------------------------------------------------------
.text:000055EE                 align 10h
.text:000055EE _text           ends
.text:000055EE
.text$x:000055F0 ; ===========================================================================
.text$x:000055F0
.text$x:000055F0 ; Segment type: Pure code
.text$x:000055F0 ; Segment permissions: Read/Execute
.text$x:000055F0 _text$x         segment para public 'CODE' use32
.text$x:000055F0                 assume cs:_text$x
.text$x:000055F0                 ;org 55F0h
.text$x:000055F0 ; COMDAT (pick associative to section at 5584)
.text$x:000055F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000055F0
.text$x:000055F0 ; =============== S U B R O U T I N E =======================================
.text$x:000055F0
.text$x:000055F0
.text$x:000055F0 __unwindfunclet$??0COtherArc@NCab@NArchive@@QAE@XZ$0 proc near
.text$x:000055F0                                         ; DATA XREF: .xdata$x:00005618o
.text$x:000055F0                 mov     ecx, [ebp-10h]  ; this
.text$x:000055F3                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000055F3 __unwindfunclet$??0COtherArc@NCab@NArchive@@QAE@XZ$0 endp
.text$x:000055F3
.text$x:000055F8
.text$x:000055F8 ; =============== S U B R O U T I N E =======================================
.text$x:000055F8
.text$x:000055F8
.text$x:000055F8 __ehhandler$??0COtherArc@NCab@NArchive@@QAE@XZ proc near
.text$x:000055F8                                         ; DATA XREF: NArchive::NCab::COtherArc::COtherArc(void)+5o
.text$x:000055F8
.text$x:000055F8 arg_4           = dword ptr  8
.text$x:000055F8
.text$x:000055F8                 mov     edx, [esp+arg_4]
.text$x:000055FC                 lea     eax, [edx+0Ch]
.text$x:000055FF                 mov     ecx, [edx-8]
.text$x:00005602                 xor     ecx, eax
.text$x:00005604                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005609                 mov     eax, offset __ehfuncinfo$??0COtherArc@NCab@NArchive@@QAE@XZ
.text$x:0000560E                 jmp     ___CxxFrameHandler3
.text$x:0000560E __ehhandler$??0COtherArc@NCab@NArchive@@QAE@XZ endp
.text$x:0000560E
.text$x:0000560E ; ---------------------------------------------------------------------------
.text$x:00005613                 align 4
.text$x:00005613 _text$x         ends
.text$x:00005613
.xdata$x:00005614 ; ===========================================================================
.xdata$x:00005614
.xdata$x:00005614 ; Segment type: Pure data
.xdata$x:00005614 ; Segment permissions: Read
.xdata$x:00005614 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005614                 assume cs:_xdata$x
.xdata$x:00005614                 ;org 5614h
.xdata$x:00005614 ; COMDAT (pick associative to section at 5584)
.xdata$x:00005614 __unwindtable$??0COtherArc@NCab@NArchive@@QAE@XZ db 0FFh
.xdata$x:00005614                                         ; DATA XREF: .xdata$x:00005624o
.xdata$x:00005615                 db 0FFh
.xdata$x:00005616                 db 0FFh
.xdata$x:00005617                 db 0FFh
.xdata$x:00005618                 dd offset __unwindfunclet$??0COtherArc@NCab@NArchive@@QAE@XZ$0
.xdata$x:0000561C __ehfuncinfo$??0COtherArc@NCab@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000561C                                         ; DATA XREF: __ehhandler$??0COtherArc@NCab@NArchive@@QAE@XZ+11o
.xdata$x:0000561D                 db    5
.xdata$x:0000561E                 db  93h ; ô
.xdata$x:0000561F                 db  19h
.xdata$x:00005620                 db    1
.xdata$x:00005621                 db    0
.xdata$x:00005622                 db    0
.xdata$x:00005623                 db    0
.xdata$x:00005624                 dd offset __unwindtable$??0COtherArc@NCab@NArchive@@QAE@XZ
.xdata$x:00005628                 db    0
.xdata$x:00005629                 db    0
.xdata$x:0000562A                 db    0
.xdata$x:0000562B                 db    0
.xdata$x:0000562C                 db    0
.xdata$x:0000562D                 db    0
.xdata$x:0000562E                 db    0
.xdata$x:0000562F                 db    0
.xdata$x:00005630                 db    0
.xdata$x:00005631                 db    0
.xdata$x:00005632                 db    0
.xdata$x:00005633                 db    0
.xdata$x:00005634                 db    0
.xdata$x:00005635                 db    0
.xdata$x:00005636                 db    0
.xdata$x:00005637                 db    0
.xdata$x:00005638                 db    0
.xdata$x:00005639                 db    0
.xdata$x:0000563A                 db    0
.xdata$x:0000563B                 db    0
.xdata$x:0000563C                 db    1
.xdata$x:0000563D                 db    0
.xdata$x:0000563E                 db    0
.xdata$x:0000563F                 db    0
.xdata$x:0000563F _xdata$x        ends
.xdata$x:0000563F
.text:00005640 ; ===========================================================================
.text:00005640
.text:00005640 ; Segment type: Pure code
.text:00005640 ; Segment permissions: Read/Execute
.text:00005640 _text           segment para public 'CODE' use32
.text:00005640                 assume cs:_text
.text:00005640                 ;org 5640h
.text:00005640 ; COMDAT (pick any)
.text:00005640                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005640
.text:00005640 ; =============== S U B R O U T I N E =======================================
.text:00005640
.text:00005640 ; Attributes: bp-based frame
.text:00005640
.text:00005640 ; _DWORD __thiscall NArchive::NCab::COtherArc::~COtherArc(NArchive::NCab::COtherArc *__hidden this)
.text:00005640                 public ??1COtherArc@NCab@NArchive@@QAE@XZ
.text:00005640 ??1COtherArc@NCab@NArchive@@QAE@XZ proc near
.text:00005640                                         ; CODE XREF: __unwindfunclet$??0CArchInfo@NCab@NArchive@@QAE@XZ$0+6j
.text:00005640                                         ; NArchive::NCab::CArchInfo::~CArchInfo(void)+3Ap ...
.text:00005640
.text:00005640 var_10          = dword ptr -10h
.text:00005640 var_C           = dword ptr -0Ch
.text:00005640 var_4           = dword ptr -4
.text:00005640
.text:00005640                 push    ebp
.text:00005641                 mov     ebp, esp
.text:00005643                 push    0FFFFFFFFh
.text:00005645                 push    offset __ehhandler$??1COtherArc@NCab@NArchive@@QAE@XZ
.text:0000564A                 mov     eax, large fs:0
.text:00005650                 push    eax
.text:00005651                 push    ecx
.text:00005652                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005659                 mov     eax, dword ptr ds:___security_cookie
.text:0000565E                 xor     eax, ebp
.text:00005660                 push    eax
.text:00005661                 lea     eax, [ebp+var_C]
.text:00005664                 mov     large fs:0, eax
.text:0000566A                 mov     [ebp+var_10], ecx
.text:0000566D                 mov     [ebp+var_4], 0
.text:00005674                 mov     ecx, [ebp+var_10]
.text:00005677                 add     ecx, 0Ch        ; this
.text:0000567A                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000567F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005686                 mov     ecx, [ebp+var_10] ; this
.text:00005689                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000568E                 mov     ecx, [ebp+var_C]
.text:00005691                 mov     large fs:0, ecx
.text:00005698                 pop     ecx
.text:00005699                 add     esp, 10h
.text:0000569C                 cmp     ebp, esp
.text:0000569E                 call    __RTC_CheckEsp
.text:000056A3                 mov     esp, ebp
.text:000056A5                 pop     ebp
.text:000056A6                 retn
.text:000056A6 ??1COtherArc@NCab@NArchive@@QAE@XZ endp
.text:000056A6
.text:000056A6 ; ---------------------------------------------------------------------------
.text:000056A7                 align 4
.text:000056A7 _text           ends
.text:000056A7
.text$x:000056A8 ; ===========================================================================
.text$x:000056A8
.text$x:000056A8 ; Segment type: Pure code
.text$x:000056A8 ; Segment permissions: Read/Execute
.text$x:000056A8 _text$x         segment para public 'CODE' use32
.text$x:000056A8                 assume cs:_text$x
.text$x:000056A8                 ;org 56A8h
.text$x:000056A8 ; COMDAT (pick associative to section at 5640)
.text$x:000056A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000056A8
.text$x:000056A8 ; =============== S U B R O U T I N E =======================================
.text$x:000056A8
.text$x:000056A8
.text$x:000056A8 __unwindfunclet$??1COtherArc@NCab@NArchive@@QAE@XZ$0 proc near
.text$x:000056A8                                         ; DATA XREF: .xdata$x:000056D0o
.text$x:000056A8                 mov     ecx, [ebp-10h]  ; this
.text$x:000056AB                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000056AB __unwindfunclet$??1COtherArc@NCab@NArchive@@QAE@XZ$0 endp
.text$x:000056AB
.text$x:000056B0
.text$x:000056B0 ; =============== S U B R O U T I N E =======================================
.text$x:000056B0
.text$x:000056B0
.text$x:000056B0 __ehhandler$??1COtherArc@NCab@NArchive@@QAE@XZ proc near
.text$x:000056B0                                         ; DATA XREF: NArchive::NCab::COtherArc::~COtherArc(void)+5o
.text$x:000056B0
.text$x:000056B0 arg_4           = dword ptr  8
.text$x:000056B0
.text$x:000056B0                 mov     edx, [esp+arg_4]
.text$x:000056B4                 lea     eax, [edx+0Ch]
.text$x:000056B7                 mov     ecx, [edx-8]
.text$x:000056BA                 xor     ecx, eax
.text$x:000056BC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000056C1                 mov     eax, offset __ehfuncinfo$??1COtherArc@NCab@NArchive@@QAE@XZ
.text$x:000056C6                 jmp     ___CxxFrameHandler3
.text$x:000056C6 __ehhandler$??1COtherArc@NCab@NArchive@@QAE@XZ endp
.text$x:000056C6
.text$x:000056C6 ; ---------------------------------------------------------------------------
.text$x:000056CB                 align 4
.text$x:000056CB _text$x         ends
.text$x:000056CB
.xdata$x:000056CC ; ===========================================================================
.xdata$x:000056CC
.xdata$x:000056CC ; Segment type: Pure data
.xdata$x:000056CC ; Segment permissions: Read
.xdata$x:000056CC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000056CC                 assume cs:_xdata$x
.xdata$x:000056CC                 ;org 56CCh
.xdata$x:000056CC ; COMDAT (pick associative to section at 5640)
.xdata$x:000056CC __unwindtable$??1COtherArc@NCab@NArchive@@QAE@XZ db 0FFh
.xdata$x:000056CC                                         ; DATA XREF: .xdata$x:000056DCo
.xdata$x:000056CD                 db 0FFh
.xdata$x:000056CE                 db 0FFh
.xdata$x:000056CF                 db 0FFh
.xdata$x:000056D0                 dd offset __unwindfunclet$??1COtherArc@NCab@NArchive@@QAE@XZ$0
.xdata$x:000056D4 __ehfuncinfo$??1COtherArc@NCab@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000056D4                                         ; DATA XREF: __ehhandler$??1COtherArc@NCab@NArchive@@QAE@XZ+11o
.xdata$x:000056D5                 db    5
.xdata$x:000056D6                 db  93h ; ô
.xdata$x:000056D7                 db  19h
.xdata$x:000056D8                 db    1
.xdata$x:000056D9                 db    0
.xdata$x:000056DA                 db    0
.xdata$x:000056DB                 db    0
.xdata$x:000056DC                 dd offset __unwindtable$??1COtherArc@NCab@NArchive@@QAE@XZ
.xdata$x:000056E0                 db    0
.xdata$x:000056E1                 db    0
.xdata$x:000056E2                 db    0
.xdata$x:000056E3                 db    0
.xdata$x:000056E4                 db    0
.xdata$x:000056E5                 db    0
.xdata$x:000056E6                 db    0
.xdata$x:000056E7                 db    0
.xdata$x:000056E8                 db    0
.xdata$x:000056E9                 db    0
.xdata$x:000056EA                 db    0
.xdata$x:000056EB                 db    0
.xdata$x:000056EC                 db    0
.xdata$x:000056ED                 db    0
.xdata$x:000056EE                 db    0
.xdata$x:000056EF                 db    0
.xdata$x:000056F0                 db    0
.xdata$x:000056F1                 db    0
.xdata$x:000056F2                 db    0
.xdata$x:000056F3                 db    0
.xdata$x:000056F4                 db    1
.xdata$x:000056F5                 db    0
.xdata$x:000056F6                 db    0
.xdata$x:000056F7                 db    0
.xdata$x:000056F7 _xdata$x        ends
.xdata$x:000056F7
.text:000056F8 ; ===========================================================================
.text:000056F8
.text:000056F8 ; Segment type: Pure code
.text:000056F8 ; Segment permissions: Read/Execute
.text:000056F8 _text           segment para public 'CODE' use32
.text:000056F8                 assume cs:_text
.text:000056F8                 ;org 56F8h
.text:000056F8 ; COMDAT (pick any)
.text:000056F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000056F8
.text:000056F8 ; =============== S U B R O U T I N E =======================================
.text:000056F8
.text:000056F8 ; Attributes: bp-based frame
.text:000056F8
.text:000056F8 ; _DWORD __thiscall NArchive::NCab::CInArcInfo::~CInArcInfo(NArchive::NCab::CInArcInfo *__hidden this)
.text:000056F8                 public ??1CInArcInfo@NCab@NArchive@@QAE@XZ
.text:000056F8 ??1CInArcInfo@NCab@NArchive@@QAE@XZ proc near
.text:000056F8                                         ; CODE XREF: NArchive::NCab::CDatabase::~CDatabase(void)+3Ap
.text:000056F8
.text:000056F8 var_4           = dword ptr -4
.text:000056F8
.text:000056F8                 push    ebp
.text:000056F9                 mov     ebp, esp
.text:000056FB                 push    ecx
.text:000056FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005703                 mov     [ebp+var_4], ecx
.text:00005706                 mov     ecx, [ebp+var_4] ; this
.text:00005709                 call    ??1CArchInfo@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CArchInfo::~CArchInfo(void)
.text:0000570E                 add     esp, 4
.text:00005711                 cmp     ebp, esp
.text:00005713                 call    __RTC_CheckEsp
.text:00005718                 mov     esp, ebp
.text:0000571A                 pop     ebp
.text:0000571B                 retn
.text:0000571B ??1CInArcInfo@NCab@NArchive@@QAE@XZ endp
.text:0000571B
.text:0000571B _text           ends
.text:0000571B
.text:0000571C ; ===========================================================================
.text:0000571C
.text:0000571C ; Segment type: Pure code
.text:0000571C ; Segment permissions: Read/Execute
.text:0000571C _text           segment para public 'CODE' use32
.text:0000571C                 assume cs:_text
.text:0000571C                 ;org 571Ch
.text:0000571C ; COMDAT (pick any)
.text:0000571C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000571C
.text:0000571C ; =============== S U B R O U T I N E =======================================
.text:0000571C
.text:0000571C ; Attributes: bp-based frame
.text:0000571C
.text:0000571C ; _DWORD __thiscall NArchive::NCab::CArchInfo::~CArchInfo(NArchive::NCab::CArchInfo *__hidden this)
.text:0000571C                 public ??1CArchInfo@NCab@NArchive@@QAE@XZ
.text:0000571C ??1CArchInfo@NCab@NArchive@@QAE@XZ proc near
.text:0000571C                                         ; CODE XREF: NArchive::NCab::CInArcInfo::~CInArcInfo(void)+11p
.text:0000571C
.text:0000571C var_10          = dword ptr -10h
.text:0000571C var_C           = dword ptr -0Ch
.text:0000571C var_4           = dword ptr -4
.text:0000571C
.text:0000571C                 push    ebp
.text:0000571D                 mov     ebp, esp
.text:0000571F                 push    0FFFFFFFFh
.text:00005721                 push    offset __ehhandler$??1CArchInfo@NCab@NArchive@@QAE@XZ
.text:00005726                 mov     eax, large fs:0
.text:0000572C                 push    eax
.text:0000572D                 push    ecx
.text:0000572E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005735                 mov     eax, dword ptr ds:___security_cookie
.text:0000573A                 xor     eax, ebp
.text:0000573C                 push    eax
.text:0000573D                 lea     eax, [ebp+var_C]
.text:00005740                 mov     large fs:0, eax
.text:00005746                 mov     [ebp+var_10], ecx
.text:00005749                 mov     [ebp+var_4], 0
.text:00005750                 mov     ecx, [ebp+var_10]
.text:00005753                 add     ecx, 34h ; '4'  ; this
.text:00005756                 call    ??1COtherArc@NCab@NArchive@@QAE@XZ ; NArchive::NCab::COtherArc::~COtherArc(void)
.text:0000575B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005762                 mov     ecx, [ebp+var_10]
.text:00005765                 add     ecx, 1Ch        ; this
.text:00005768                 call    ??1COtherArc@NCab@NArchive@@QAE@XZ ; NArchive::NCab::COtherArc::~COtherArc(void)
.text:0000576D                 mov     ecx, [ebp+var_C]
.text:00005770                 mov     large fs:0, ecx
.text:00005777                 pop     ecx
.text:00005778                 add     esp, 10h
.text:0000577B                 cmp     ebp, esp
.text:0000577D                 call    __RTC_CheckEsp
.text:00005782                 mov     esp, ebp
.text:00005784                 pop     ebp
.text:00005785                 retn
.text:00005785 ??1CArchInfo@NCab@NArchive@@QAE@XZ endp
.text:00005785
.text:00005785 ; ---------------------------------------------------------------------------
.text:00005786                 align 4
.text:00005786 _text           ends
.text:00005786
.text$x:00005788 ; ===========================================================================
.text$x:00005788
.text$x:00005788 ; Segment type: Pure code
.text$x:00005788 ; Segment permissions: Read/Execute
.text$x:00005788 _text$x         segment para public 'CODE' use32
.text$x:00005788                 assume cs:_text$x
.text$x:00005788                 ;org 5788h
.text$x:00005788 ; COMDAT (pick associative to section at 571C)
.text$x:00005788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005788
.text$x:00005788 ; =============== S U B R O U T I N E =======================================
.text$x:00005788
.text$x:00005788
.text$x:00005788 __unwindfunclet$??1CArchInfo@NCab@NArchive@@QAE@XZ$0 proc near
.text$x:00005788                                         ; DATA XREF: .xdata$x:000057B4o
.text$x:00005788                 mov     ecx, [ebp-10h]
.text$x:0000578B                 add     ecx, 1Ch        ; this
.text$x:0000578E                 jmp     ??1COtherArc@NCab@NArchive@@QAE@XZ ; NArchive::NCab::COtherArc::~COtherArc(void)
.text$x:0000578E __unwindfunclet$??1CArchInfo@NCab@NArchive@@QAE@XZ$0 endp
.text$x:0000578E
.text$x:00005793
.text$x:00005793 ; =============== S U B R O U T I N E =======================================
.text$x:00005793
.text$x:00005793
.text$x:00005793 __ehhandler$??1CArchInfo@NCab@NArchive@@QAE@XZ proc near
.text$x:00005793                                         ; DATA XREF: NArchive::NCab::CArchInfo::~CArchInfo(void)+5o
.text$x:00005793
.text$x:00005793 arg_4           = dword ptr  8
.text$x:00005793
.text$x:00005793                 mov     edx, [esp+arg_4]
.text$x:00005797                 lea     eax, [edx+0Ch]
.text$x:0000579A                 mov     ecx, [edx-8]
.text$x:0000579D                 xor     ecx, eax
.text$x:0000579F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000057A4                 mov     eax, offset __ehfuncinfo$??1CArchInfo@NCab@NArchive@@QAE@XZ
.text$x:000057A9                 jmp     ___CxxFrameHandler3
.text$x:000057A9 __ehhandler$??1CArchInfo@NCab@NArchive@@QAE@XZ endp
.text$x:000057A9
.text$x:000057A9 ; ---------------------------------------------------------------------------
.text$x:000057AE                 align 10h
.text$x:000057AE _text$x         ends
.text$x:000057AE
.xdata$x:000057B0 ; ===========================================================================
.xdata$x:000057B0
.xdata$x:000057B0 ; Segment type: Pure data
.xdata$x:000057B0 ; Segment permissions: Read
.xdata$x:000057B0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000057B0                 assume cs:_xdata$x
.xdata$x:000057B0                 ;org 57B0h
.xdata$x:000057B0 ; COMDAT (pick associative to section at 571C)
.xdata$x:000057B0 __unwindtable$??1CArchInfo@NCab@NArchive@@QAE@XZ db 0FFh
.xdata$x:000057B0                                         ; DATA XREF: .xdata$x:000057C0o
.xdata$x:000057B1                 db 0FFh
.xdata$x:000057B2                 db 0FFh
.xdata$x:000057B3                 db 0FFh
.xdata$x:000057B4                 dd offset __unwindfunclet$??1CArchInfo@NCab@NArchive@@QAE@XZ$0
.xdata$x:000057B8 __ehfuncinfo$??1CArchInfo@NCab@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000057B8                                         ; DATA XREF: __ehhandler$??1CArchInfo@NCab@NArchive@@QAE@XZ+11o
.xdata$x:000057B9                 db    5
.xdata$x:000057BA                 db  93h ; ô
.xdata$x:000057BB                 db  19h
.xdata$x:000057BC                 db    1
.xdata$x:000057BD                 db    0
.xdata$x:000057BE                 db    0
.xdata$x:000057BF                 db    0
.xdata$x:000057C0                 dd offset __unwindtable$??1CArchInfo@NCab@NArchive@@QAE@XZ
.xdata$x:000057C4                 db    0
.xdata$x:000057C5                 db    0
.xdata$x:000057C6                 db    0
.xdata$x:000057C7                 db    0
.xdata$x:000057C8                 db    0
.xdata$x:000057C9                 db    0
.xdata$x:000057CA                 db    0
.xdata$x:000057CB                 db    0
.xdata$x:000057CC                 db    0
.xdata$x:000057CD                 db    0
.xdata$x:000057CE                 db    0
.xdata$x:000057CF                 db    0
.xdata$x:000057D0                 db    0
.xdata$x:000057D1                 db    0
.xdata$x:000057D2                 db    0
.xdata$x:000057D3                 db    0
.xdata$x:000057D4                 db    0
.xdata$x:000057D5                 db    0
.xdata$x:000057D6                 db    0
.xdata$x:000057D7                 db    0
.xdata$x:000057D8                 db    1
.xdata$x:000057D9                 db    0
.xdata$x:000057DA                 db    0
.xdata$x:000057DB                 db    0
.xdata$x:000057DB _xdata$x        ends
.xdata$x:000057DB
.text:000057DC ; ===========================================================================
.text:000057DC
.text:000057DC ; Segment type: Pure code
.text:000057DC ; Segment permissions: Read/Execute
.text:000057DC _text           segment para public 'CODE' use32
.text:000057DC                 assume cs:_text
.text:000057DC                 ;org 57DCh
.text:000057DC ; COMDAT (pick any)
.text:000057DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000057DC
.text:000057DC ; =============== S U B R O U T I N E =======================================
.text:000057DC
.text:000057DC ; Attributes: bp-based frame
.text:000057DC
.text:000057DC ; void __thiscall UString::Empty(UString *__hidden this)
.text:000057DC                 public ?Empty@UString@@QAEXXZ
.text:000057DC ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: NArchive::NCab::CHandler::Close(void)+9p
.text:000057DC
.text:000057DC var_4           = dword ptr -4
.text:000057DC
.text:000057DC                 push    ebp
.text:000057DD                 mov     ebp, esp
.text:000057DF                 push    ecx
.text:000057E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000057E7                 mov     [ebp+var_4], ecx
.text:000057EA                 mov     eax, [ebp+var_4]
.text:000057ED                 mov     dword ptr [eax+4], 0
.text:000057F4                 mov     ecx, [ebp+var_4]
.text:000057F7                 mov     edx, [ecx]
.text:000057F9                 xor     eax, eax
.text:000057FB                 mov     [edx], ax
.text:000057FE                 mov     esp, ebp
.text:00005800                 pop     ebp
.text:00005801                 retn
.text:00005801 ?Empty@UString@@QAEXXZ endp
.text:00005801
.text:00005801 ; ---------------------------------------------------------------------------
.text:00005802                 align 4
.text:00005802 _text           ends
.text:00005802
.text:00005804 ; ===========================================================================
.text:00005804
.text:00005804 ; Segment type: Pure code
.text:00005804 ; Segment permissions: Read/Execute
.text:00005804 _text           segment para public 'CODE' use32
.text:00005804                 assume cs:_text
.text:00005804                 ;org 5804h
.text:00005804 ; COMDAT (pick any)
.text:00005804                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005804
.text:00005804 ; =============== S U B R O U T I N E =======================================
.text:00005804
.text:00005804 ; Attributes: bp-based frame
.text:00005804
.text:00005804 ; void __thiscall NArchive::NCab::CMvDatabaseEx::Clear(NArchive::NCab::CMvDatabaseEx *__hidden this)
.text:00005804                 public ?Clear@CMvDatabaseEx@NCab@NArchive@@QAEXXZ
.text:00005804 ?Clear@CMvDatabaseEx@NCab@NArchive@@QAEXXZ proc near
.text:00005804                                         ; CODE XREF: NArchive::NCab::CHandler::Close(void)+44p
.text:00005804
.text:00005804 var_4           = dword ptr -4
.text:00005804
.text:00005804                 push    ebp
.text:00005805                 mov     ebp, esp
.text:00005807                 push    ecx
.text:00005808                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000580F                 mov     [ebp+var_4], ecx
.text:00005812                 mov     ecx, [ebp+var_4]
.text:00005815                 call    ?Clear@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::Clear(void)
.text:0000581A                 mov     ecx, [ebp+var_4]
.text:0000581D                 add     ecx, 0Ch
.text:00005820                 call    ?Clear@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::NCab::CMvItem>::Clear(void)
.text:00005825                 mov     ecx, [ebp+var_4]
.text:00005828                 add     ecx, 18h
.text:0000582B                 call    ?Clear@?$CRecordVector@H@@QAEXXZ ; CRecordVector<int>::Clear(void)
.text:00005830                 mov     ecx, [ebp+var_4]
.text:00005833                 add     ecx, 24h ; '$'
.text:00005836                 call    ?Clear@?$CRecordVector@I@@QAEXXZ ; CRecordVector<uint>::Clear(void)
.text:0000583B                 add     esp, 4
.text:0000583E                 cmp     ebp, esp
.text:00005840                 call    __RTC_CheckEsp
.text:00005845                 mov     esp, ebp
.text:00005847                 pop     ebp
.text:00005848                 retn
.text:00005848 ?Clear@CMvDatabaseEx@NCab@NArchive@@QAEXXZ endp
.text:00005848
.text:00005848 ; ---------------------------------------------------------------------------
.text:00005849                 align 4
.text:00005849 _text           ends
.text:00005849
.text:0000584C ; ===========================================================================
.text:0000584C
.text:0000584C ; Segment type: Pure code
.text:0000584C ; Segment permissions: Read/Execute
.text:0000584C _text           segment para public 'CODE' use32
.text:0000584C                 assume cs:_text
.text:0000584C                 ;org 584Ch
.text:0000584C ; COMDAT (pick any)
.text:0000584C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000584C
.text:0000584C ; =============== S U B R O U T I N E =======================================
.text:0000584C
.text:0000584C ; Attributes: bp-based frame
.text:0000584C
.text:0000584C ; void __thiscall NArchive::NCab::CFolderOutStream::FreeTempBuf(NArchive::NCab::CFolderOutStream *__hidden this)
.text:0000584C                 public ?FreeTempBuf@CFolderOutStream@NCab@NArchive@@AAEXXZ
.text:0000584C ?FreeTempBuf@CFolderOutStream@NCab@NArchive@@AAEXXZ proc near
.text:0000584C                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+199p
.text:0000584C                                         ; NArchive::NCab::CFolderOutStream::~CFolderOutStream(void)+40p
.text:0000584C
.text:0000584C var_4           = dword ptr -4
.text:0000584C
.text:0000584C                 push    ebp
.text:0000584D                 mov     ebp, esp
.text:0000584F                 push    ecx
.text:00005850                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005857                 mov     [ebp+var_4], ecx
.text:0000585A                 mov     eax, [ebp+var_4]
.text:0000585D                 mov     ecx, [eax+10h]
.text:00005860                 push    ecx
.text:00005861                 call    _MyFree@4       ; MyFree(x)
.text:00005866                 mov     edx, [ebp+var_4]
.text:00005869                 mov     dword ptr [edx+10h], 0
.text:00005870                 add     esp, 4
.text:00005873                 cmp     ebp, esp
.text:00005875                 call    __RTC_CheckEsp
.text:0000587A                 mov     esp, ebp
.text:0000587C                 pop     ebp
.text:0000587D                 retn
.text:0000587D ?FreeTempBuf@CFolderOutStream@NCab@NArchive@@AAEXXZ endp
.text:0000587D
.text:0000587D ; ---------------------------------------------------------------------------
.text:0000587E                 align 10h
.text:0000587E _text           ends
.text:0000587E
.text:00005880 ; ===========================================================================
.text:00005880
.text:00005880 ; Segment type: Pure code
.text:00005880 ; Segment permissions: Read/Execute
.text:00005880 _text           segment para public 'CODE' use32
.text:00005880                 assume cs:_text
.text:00005880                 ;org 5880h
.text:00005880 ; COMDAT (pick any)
.text:00005880                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005880
.text:00005880 ; =============== S U B R O U T I N E =======================================
.text:00005880
.text:00005880 ; Attributes: bp-based frame
.text:00005880
.text:00005880 ; unsigned __int64 __thiscall NArchive::NCab::CFolderOutStream::GetRemain(NArchive::NCab::CFolderOutStream *__hidden this)
.text:00005880                 public ?GetRemain@CFolderOutStream@NCab@NArchive@@QBE_KXZ
.text:00005880 ?GetRemain@CFolderOutStream@NCab@NArchive@@QBE_KXZ proc near
.text:00005880                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::FlushCorrupted(void)+6Cp
.text:00005880                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+134Ep ...
.text:00005880
.text:00005880 var_4           = dword ptr -4
.text:00005880
.text:00005880                 push    ebp
.text:00005881                 mov     ebp, esp
.text:00005883                 push    ecx
.text:00005884                 push    esi
.text:00005885                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000588C                 mov     [ebp+var_4], ecx
.text:0000588F                 mov     eax, [ebp+var_4]
.text:00005892                 mov     ecx, [ebp+var_4]
.text:00005895                 mov     edx, [eax+40h]
.text:00005898                 sub     edx, [ecx+48h]
.text:0000589B                 mov     esi, [eax+44h]
.text:0000589E                 sbb     esi, [ecx+4Ch]
.text:000058A1                 mov     eax, edx
.text:000058A3                 mov     edx, esi
.text:000058A5                 pop     esi
.text:000058A6                 mov     esp, ebp
.text:000058A8                 pop     ebp
.text:000058A9                 retn
.text:000058A9 ?GetRemain@CFolderOutStream@NCab@NArchive@@QBE_KXZ endp
.text:000058A9
.text:000058A9 ; ---------------------------------------------------------------------------
.text:000058AA                 align 4
.text:000058AA _text           ends
.text:000058AA
.text:000058AC ; ===========================================================================
.text:000058AC
.text:000058AC ; Segment type: Pure code
.text:000058AC ; Segment permissions: Read/Execute
.text:000058AC _text           segment para public 'CODE' use32
.text:000058AC                 assume cs:_text
.text:000058AC                 ;org 58ACh
.text:000058AC ; COMDAT (pick any)
.text:000058AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000058AC
.text:000058AC ; =============== S U B R O U T I N E =======================================
.text:000058AC
.text:000058AC ; Attributes: bp-based frame
.text:000058AC
.text:000058AC ; _DWORD __thiscall NCompress::CCopyCoder::CCopyCoder(NCompress::CCopyCoder *__hidden this)
.text:000058AC                 public ??0CCopyCoder@NCompress@@QAE@XZ
.text:000058AC ??0CCopyCoder@NCompress@@QAE@XZ proc near
.text:000058AC                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2E0p
.text:000058AC
.text:000058AC var_4           = dword ptr -4
.text:000058AC
.text:000058AC                 push    ebp
.text:000058AD                 mov     ebp, esp
.text:000058AF                 push    ecx
.text:000058B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000058B7                 mov     [ebp+var_4], ecx
.text:000058BA                 mov     ecx, [ebp+var_4] ; this
.text:000058BD                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:000058C2                 mov     ecx, [ebp+var_4]
.text:000058C5                 add     ecx, 4          ; this
.text:000058C8                 call    ??0ICompressSetInStream@@QAE@XZ ; ICompressSetInStream::ICompressSetInStream(void)
.text:000058CD                 mov     ecx, [ebp+var_4]
.text:000058D0                 add     ecx, 8          ; this
.text:000058D3                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:000058D8                 mov     ecx, [ebp+var_4]
.text:000058DB                 add     ecx, 0Ch        ; this
.text:000058DE                 call    ??0ICompressGetInStreamProcessedSize@@QAE@XZ ; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)
.text:000058E3                 mov     ecx, [ebp+var_4]
.text:000058E6                 add     ecx, 10h        ; this
.text:000058E9                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000058EE                 mov     eax, [ebp+var_4]
.text:000058F1                 mov     dword ptr [eax], offset ??_7CCopyCoder@NCompress@@6BICompressCoder@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressCoder'}
.text:000058F7                 mov     ecx, [ebp+var_4]
.text:000058FA                 mov     dword ptr [ecx+4], offset ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}
.text:00005901                 mov     edx, [ebp+var_4]
.text:00005904                 mov     dword ptr [edx+8], offset ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ ; const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}
.text:0000590B                 mov     eax, [ebp+var_4]
.text:0000590E                 mov     dword ptr [eax+0Ch], offset ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:00005915                 mov     ecx, [ebp+var_4]
.text:00005918                 mov     dword ptr [ecx+14h], 0
.text:0000591F                 mov     ecx, [ebp+var_4]
.text:00005922                 add     ecx, 18h
.text:00005925                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:0000592A                 mov     edx, [ebp+var_4]
.text:0000592D                 mov     dword ptr [edx+20h], 0
.text:00005934                 mov     dword ptr [edx+24h], 0
.text:0000593B                 mov     eax, [ebp+var_4]
.text:0000593E                 add     esp, 4
.text:00005941                 cmp     ebp, esp
.text:00005943                 call    __RTC_CheckEsp
.text:00005948                 mov     esp, ebp
.text:0000594A                 pop     ebp
.text:0000594B                 retn
.text:0000594B ??0CCopyCoder@NCompress@@QAE@XZ endp
.text:0000594B
.text:0000594B _text           ends
.text:0000594B
.rdata:0000594C ; ===========================================================================
.rdata:0000594C
.rdata:0000594C ; Segment type: Pure data
.rdata:0000594C ; Segment permissions: Read
.rdata:0000594C _rdata          segment dword public 'DATA' use32
.rdata:0000594C                 assume cs:_rdata
.rdata:0000594C                 ;org 594Ch
.rdata:0000594C ; COMDAT (pick largest)
.rdata:0000594C                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata:00005950                 public ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata:00005950 ; const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.rdata:00005950 ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00005950                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+62o
.rdata:00005950                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00005954                 dd offset ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}' (void)
.rdata:00005958                 dd offset ?Release@CCopyCoder@NCompress@@WM@AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}' (void)
.rdata:0000595C                 dd offset ?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z ; NCompress::CCopyCoder::GetInStreamProcessedSize(unsigned __int64 *)
.rdata:0000595C _rdata          ends
.rdata:0000595C
.rdata:00005960 ; ===========================================================================
.rdata:00005960
.rdata:00005960 ; Segment type: Pure data
.rdata:00005960 ; Segment permissions: Read
.rdata:00005960 _rdata          segment dword public 'DATA' use32
.rdata:00005960                 assume cs:_rdata
.rdata:00005960                 ;org 5960h
.rdata:00005960 ; COMDAT (pick largest)
.rdata:00005960                 dd offset ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:00005964                 public ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
.rdata:00005964 ; const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}
.rdata:00005964 ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00005964                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+58o
.rdata:00005964                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00005968                 dd offset ?AddRef@CCopyCoder@NCompress@@W7AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}' (void)
.rdata:0000596C                 dd offset ?Release@CCopyCoder@NCompress@@W7AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}' (void)
.rdata:00005970                 dd offset ?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z ; NCompress::CCopyCoder::Read(void *,uint,uint *)
.rdata:00005970 _rdata          ends
.rdata:00005970
.rdata:00005974 ; ===========================================================================
.rdata:00005974
.rdata:00005974 ; Segment type: Pure data
.rdata:00005974 ; Segment permissions: Read
.rdata:00005974 _rdata          segment dword public 'DATA' use32
.rdata:00005974                 assume cs:_rdata
.rdata:00005974                 ;org 5974h
.rdata:00005974 ; COMDAT (pick largest)
.rdata:00005974                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:00005978                 public ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
.rdata:00005978 ; const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}
.rdata:00005978 ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00005978                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+4Eo
.rdata:00005978                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:0000597C                 dd offset ?AddRef@CCopyCoder@NCompress@@W3AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}' (void)
.rdata:00005980                 dd offset ?Release@CCopyCoder@NCompress@@W3AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}' (void)
.rdata:00005984                 dd offset ?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::CCopyCoder::SetInStream(ISequentialInStream *)
.rdata:00005988                 dd offset ?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ ; NCompress::CCopyCoder::ReleaseInStream(void)
.rdata:00005988 _rdata          ends
.rdata:00005988
.rdata:0000598C ; ===========================================================================
.rdata:0000598C
.rdata:0000598C ; Segment type: Pure data
.rdata:0000598C ; Segment permissions: Read
.rdata:0000598C _rdata          segment dword public 'DATA' use32
.rdata:0000598C                 assume cs:_rdata
.rdata:0000598C                 ;org 598Ch
.rdata:0000598C ; COMDAT (pick largest)
.rdata:0000598C                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:00005990                 public ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
.rdata:00005990 ; const NCompress::CCopyCoder::`vftable'{for `ICompressCoder'}
.rdata:00005990 ??_7CCopyCoder@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00005990                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+45o
.rdata:00005990                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.rdata:00005994                 dd offset ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.rdata:00005998                 dd offset ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.rdata:0000599C                 dd offset ?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:0000599C _rdata          ends
.rdata:0000599C
.rdata$r:000059A0 ; ===========================================================================
.rdata$r:000059A0
.rdata$r:000059A0 ; Segment type: Pure data
.rdata$r:000059A0 ; Segment permissions: Read
.rdata$r:000059A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000059A0                 assume cs:_rdata$r
.rdata$r:000059A0                 ;org 59A0h
.rdata$r:000059A0 ; COMDAT (pick any)
.rdata$r:000059A0                 public ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@
.rdata$r:000059A0 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:000059A0 ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:000059A0                                         ; DATA XREF: .rdata:0000598Co
.rdata$r:000059A1                 db    0
.rdata$r:000059A2                 db    0
.rdata$r:000059A3                 db    0
.rdata$r:000059A4                 db    0
.rdata$r:000059A5                 db    0
.rdata$r:000059A6                 db    0
.rdata$r:000059A7                 db    0
.rdata$r:000059A8                 db    0
.rdata$r:000059A9                 db    0
.rdata$r:000059AA                 db    0
.rdata$r:000059AB                 db    0
.rdata$r:000059AC                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:000059B0                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000059B0 _rdata$r        ends
.rdata$r:000059B0
.data:000059B4 ; ===========================================================================
.data:000059B4
.data:000059B4 ; Segment type: Pure data
.data:000059B4 ; Segment permissions: Read/Write
.data:000059B4 _data           segment dword public 'DATA' use32
.data:000059B4                 assume cs:_data
.data:000059B4                 ;org 59B4h
.data:000059B4 ; COMDAT (pick any)
.data:000059B4                 public ??_R0?AVCCopyCoder@NCompress@@@8
.data:000059B4 ; class NCompress::CCopyCoder `RTTI Type Descriptor'
.data:000059B4 ??_R0?AVCCopyCoder@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:000059B4                                         ; DATA XREF: .rdata$r:000059ACo
.data:000059B4                                         ; .rdata$r:NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000059B4                                         ; const type_info::`vftable'
.data:000059B8                 db    0
.data:000059B9                 db    0
.data:000059BA                 db    0
.data:000059BB                 db    0
.data:000059BC                 db  2Eh ; .
.data:000059BD                 db  3Fh ; ?
.data:000059BE                 db  41h ; A
.data:000059BF                 db  56h ; V
.data:000059C0                 db  43h ; C
.data:000059C1                 db  43h ; C
.data:000059C2                 db  6Fh ; o
.data:000059C3                 db  70h ; p
.data:000059C4                 db  79h ; y
.data:000059C5                 db  43h ; C
.data:000059C6                 db  6Fh ; o
.data:000059C7                 db  64h ; d
.data:000059C8                 db  65h ; e
.data:000059C9                 db  72h ; r
.data:000059CA                 db  40h ; @
.data:000059CB                 db  4Eh ; N
.data:000059CC                 db  43h ; C
.data:000059CD                 db  6Fh ; o
.data:000059CE                 db  6Dh ; m
.data:000059CF                 db  70h ; p
.data:000059D0                 db  72h ; r
.data:000059D1                 db  65h ; e
.data:000059D2                 db  73h ; s
.data:000059D3                 db  73h ; s
.data:000059D4                 db  40h ; @
.data:000059D5                 db  40h ; @
.data:000059D6                 db    0
.data:000059D7                 align 4
.data:000059D7 _data           ends
.data:000059D7
.rdata$r:000059D8 ; ===========================================================================
.rdata$r:000059D8
.rdata$r:000059D8 ; Segment type: Pure data
.rdata$r:000059D8 ; Segment permissions: Read
.rdata$r:000059D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000059D8                 assume cs:_rdata$r
.rdata$r:000059D8                 ;org 59D8h
.rdata$r:000059D8 ; COMDAT (pick any)
.rdata$r:000059D8                 public ??_R3CCopyCoder@NCompress@@8
.rdata$r:000059D8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000059D8 ??_R3CCopyCoder@NCompress@@8 db    0    ; DATA XREF: .rdata$r:000059B0o
.rdata$r:000059D8                                         ; .rdata$r:00005A2Co ...
.rdata$r:000059D9                 db    0
.rdata$r:000059DA                 db    0
.rdata$r:000059DB                 db    0
.rdata$r:000059DC                 db    5
.rdata$r:000059DD                 db    0
.rdata$r:000059DE                 db    0
.rdata$r:000059DF                 db    0
.rdata$r:000059E0                 db  0Ah
.rdata$r:000059E1                 db    0
.rdata$r:000059E2                 db    0
.rdata$r:000059E3                 db    0
.rdata$r:000059E4                 dd offset ??_R2CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Base Class Array'
.rdata$r:000059E4 _rdata$r        ends
.rdata$r:000059E4
.rdata$r:000059E8 ; ===========================================================================
.rdata$r:000059E8
.rdata$r:000059E8 ; Segment type: Pure data
.rdata$r:000059E8 ; Segment permissions: Read
.rdata$r:000059E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000059E8                 assume cs:_rdata$r
.rdata$r:000059E8                 ;org 59E8h
.rdata$r:000059E8 ; COMDAT (pick any)
.rdata$r:000059E8                 public ??_R2CCopyCoder@NCompress@@8
.rdata$r:000059E8 ; NCompress::CCopyCoder::`RTTI Base Class Array'
.rdata$r:000059E8 ??_R2CCopyCoder@NCompress@@8 dd offset ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
.rdata$r:000059E8                                         ; DATA XREF: .rdata$r:000059E4o
.rdata$r:000059E8                                         ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000059EC                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000059F0                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:000059F4                 dd offset ??_R13?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000059F8                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:000059FC                 dd offset ??_R17?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00005A00                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00005A04                 dd offset ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00005A08                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:00005A0C                 dd offset ??_R1BA@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00005A10                 db    0
.rdata$r:00005A11                 align 4
.rdata$r:00005A11 _rdata$r        ends
.rdata$r:00005A11
.rdata$r:00005A14 ; ===========================================================================
.rdata$r:00005A14
.rdata$r:00005A14 ; Segment type: Pure data
.rdata$r:00005A14 ; Segment permissions: Read
.rdata$r:00005A14 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005A14                 assume cs:_rdata$r
.rdata$r:00005A14                 ;org 5A14h
.rdata$r:00005A14 ; COMDAT (pick any)
.rdata$r:00005A14                 public ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
.rdata$r:00005A14 ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005A14 ??_R1A@?0A@EA@CCopyCoder@NCompress@@8 dd offset ??_R0?AVCCopyCoder@NCompress@@@8
.rdata$r:00005A14                                         ; DATA XREF: .rdata$r:NCompress::CCopyCoder::`RTTI Base Class Array'o
.rdata$r:00005A14                                         ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00005A18                 db    9
.rdata$r:00005A19                 db    0
.rdata$r:00005A1A                 db    0
.rdata$r:00005A1B                 db    0
.rdata$r:00005A1C                 db    0
.rdata$r:00005A1D                 db    0
.rdata$r:00005A1E                 db    0
.rdata$r:00005A1F                 db    0
.rdata$r:00005A20                 db 0FFh
.rdata$r:00005A21                 db 0FFh
.rdata$r:00005A22                 db 0FFh
.rdata$r:00005A23                 db 0FFh
.rdata$r:00005A24                 db    0
.rdata$r:00005A25                 db    0
.rdata$r:00005A26                 db    0
.rdata$r:00005A27                 db    0
.rdata$r:00005A28                 db  40h ; @
.rdata$r:00005A29                 db    0
.rdata$r:00005A2A                 db    0
.rdata$r:00005A2B                 db    0
.rdata$r:00005A2C                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005A2C _rdata$r        ends
.rdata$r:00005A2C
.rdata$r:00005A30 ; ===========================================================================
.rdata$r:00005A30
.rdata$r:00005A30 ; Segment type: Pure data
.rdata$r:00005A30 ; Segment permissions: Read
.rdata$r:00005A30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005A30                 assume cs:_rdata$r
.rdata$r:00005A30                 ;org 5A30h
.rdata$r:00005A30 ; COMDAT (pick any)
.rdata$r:00005A30                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00005A30 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005A30 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:00005A30                                         ; DATA XREF: .rdata$r:000059ECo
.rdata$r:00005A30                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o ...
.rdata$r:00005A30                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00005A34                 db    1
.rdata$r:00005A35                 db    0
.rdata$r:00005A36                 db    0
.rdata$r:00005A37                 db    0
.rdata$r:00005A38                 db    0
.rdata$r:00005A39                 db    0
.rdata$r:00005A3A                 db    0
.rdata$r:00005A3B                 db    0
.rdata$r:00005A3C                 db 0FFh
.rdata$r:00005A3D                 db 0FFh
.rdata$r:00005A3E                 db 0FFh
.rdata$r:00005A3F                 db 0FFh
.rdata$r:00005A40                 db    0
.rdata$r:00005A41                 db    0
.rdata$r:00005A42                 db    0
.rdata$r:00005A43                 db    0
.rdata$r:00005A44                 db  40h ; @
.rdata$r:00005A45                 db    0
.rdata$r:00005A46                 db    0
.rdata$r:00005A47                 db    0
.rdata$r:00005A48                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005A48 _rdata$r        ends
.rdata$r:00005A48
.data:00005A4C ; ===========================================================================
.data:00005A4C
.data:00005A4C ; Segment type: Pure data
.data:00005A4C ; Segment permissions: Read/Write
.data:00005A4C _data           segment dword public 'DATA' use32
.data:00005A4C                 assume cs:_data
.data:00005A4C                 ;org 5A4Ch
.data:00005A4C ; COMDAT (pick any)
.data:00005A4C                 public ??_R0?AUICompressCoder@@@8
.data:00005A4C ; struct ICompressCoder `RTTI Type Descriptor'
.data:00005A4C ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:00005A4C                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005A4C                                         ; .rdata$r:00005FDCo
.data:00005A4C                                         ; const type_info::`vftable'
.data:00005A50                 db    0
.data:00005A51                 db    0
.data:00005A52                 db    0
.data:00005A53                 db    0
.data:00005A54                 db  2Eh ; .
.data:00005A55                 db  3Fh ; ?
.data:00005A56                 db  41h ; A
.data:00005A57                 db  55h ; U
.data:00005A58                 db  49h ; I
.data:00005A59                 db  43h ; C
.data:00005A5A                 db  6Fh ; o
.data:00005A5B                 db  6Dh ; m
.data:00005A5C                 db  70h ; p
.data:00005A5D                 db  72h ; r
.data:00005A5E                 db  65h ; e
.data:00005A5F                 db  73h ; s
.data:00005A60                 db  73h ; s
.data:00005A61                 db  43h ; C
.data:00005A62                 db  6Fh ; o
.data:00005A63                 db  64h ; d
.data:00005A64                 db  65h ; e
.data:00005A65                 db  72h ; r
.data:00005A66                 db  40h ; @
.data:00005A67                 db  40h ; @
.data:00005A68                 db    0
.data:00005A69                 align 4
.data:00005A69 _data           ends
.data:00005A69
.rdata$r:00005A6C ; ===========================================================================
.rdata$r:00005A6C
.rdata$r:00005A6C ; Segment type: Pure data
.rdata$r:00005A6C ; Segment permissions: Read
.rdata$r:00005A6C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005A6C                 assume cs:_rdata$r
.rdata$r:00005A6C                 ;org 5A6Ch
.rdata$r:00005A6C ; COMDAT (pick any)
.rdata$r:00005A6C                 public ??_R3ICompressCoder@@8
.rdata$r:00005A6C ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005A6C ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:00005A48o
.rdata$r:00005A6C                                         ; .rdata$r:00005FE0o
.rdata$r:00005A6D                 db    0
.rdata$r:00005A6E                 db    0
.rdata$r:00005A6F                 db    0
.rdata$r:00005A70                 db    0
.rdata$r:00005A71                 db    0
.rdata$r:00005A72                 db    0
.rdata$r:00005A73                 db    0
.rdata$r:00005A74                 db    2
.rdata$r:00005A75                 db    0
.rdata$r:00005A76                 db    0
.rdata$r:00005A77                 db    0
.rdata$r:00005A78                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00005A78 _rdata$r        ends
.rdata$r:00005A78
.rdata$r:00005A7C ; ===========================================================================
.rdata$r:00005A7C
.rdata$r:00005A7C ; Segment type: Pure data
.rdata$r:00005A7C ; Segment permissions: Read
.rdata$r:00005A7C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005A7C                 assume cs:_rdata$r
.rdata$r:00005A7C                 ;org 5A7Ch
.rdata$r:00005A7C ; COMDAT (pick any)
.rdata$r:00005A7C                 public ??_R2ICompressCoder@@8
.rdata$r:00005A7C ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00005A7C ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00005A7C                                         ; DATA XREF: .rdata$r:00005A78o
.rdata$r:00005A7C                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005A80                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005A84                 db    0
.rdata$r:00005A85                 align 4
.rdata$r:00005A85 _rdata$r        ends
.rdata$r:00005A85
.rdata$r:00005A88 ; ===========================================================================
.rdata$r:00005A88
.rdata$r:00005A88 ; Segment type: Pure data
.rdata$r:00005A88 ; Segment permissions: Read
.rdata$r:00005A88 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005A88                 assume cs:_rdata$r
.rdata$r:00005A88                 ;org 5A88h
.rdata$r:00005A88 ; COMDAT (pick any)
.rdata$r:00005A88                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00005A88 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005A88 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00005A88                                         ; DATA XREF: .rdata$r:00005A80o
.rdata$r:00005A88                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:00005A88                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00005A8C                 db    0
.rdata$r:00005A8D                 db    0
.rdata$r:00005A8E                 db    0
.rdata$r:00005A8F                 db    0
.rdata$r:00005A90                 db    0
.rdata$r:00005A91                 db    0
.rdata$r:00005A92                 db    0
.rdata$r:00005A93                 db    0
.rdata$r:00005A94                 db 0FFh
.rdata$r:00005A95                 db 0FFh
.rdata$r:00005A96                 db 0FFh
.rdata$r:00005A97                 db 0FFh
.rdata$r:00005A98                 db    0
.rdata$r:00005A99                 db    0
.rdata$r:00005A9A                 db    0
.rdata$r:00005A9B                 db    0
.rdata$r:00005A9C                 db  40h ; @
.rdata$r:00005A9D                 db    0
.rdata$r:00005A9E                 db    0
.rdata$r:00005A9F                 db    0
.rdata$r:00005AA0                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005AA0 _rdata$r        ends
.rdata$r:00005AA0
.data:00005AA4 ; ===========================================================================
.data:00005AA4
.data:00005AA4 ; Segment type: Pure data
.data:00005AA4 ; Segment permissions: Read/Write
.data:00005AA4 _data           segment dword public 'DATA' use32
.data:00005AA4                 assume cs:_data
.data:00005AA4                 ;org 5AA4h
.data:00005AA4 ; COMDAT (pick any)
.data:00005AA4                 public ??_R0?AUIUnknown@@@8
.data:00005AA4 ; struct IUnknown `RTTI Type Descriptor'
.data:00005AA4 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00005AA4                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005AA4                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00005AA4                                         ; const type_info::`vftable'
.data:00005AA8                 db    0
.data:00005AA9                 db    0
.data:00005AAA                 db    0
.data:00005AAB                 db    0
.data:00005AAC                 db  2Eh ; .
.data:00005AAD                 db  3Fh ; ?
.data:00005AAE                 db  41h ; A
.data:00005AAF                 db  55h ; U
.data:00005AB0                 db  49h ; I
.data:00005AB1                 db  55h ; U
.data:00005AB2                 db  6Eh ; n
.data:00005AB3                 db  6Bh ; k
.data:00005AB4                 db  6Eh ; n
.data:00005AB5                 db  6Fh ; o
.data:00005AB6                 db  77h ; w
.data:00005AB7                 db  6Eh ; n
.data:00005AB8                 db  40h ; @
.data:00005AB9                 db  40h ; @
.data:00005ABA                 db    0
.data:00005ABB                 align 4
.data:00005ABB _data           ends
.data:00005ABB
.rdata$r:00005ABC ; ===========================================================================
.rdata$r:00005ABC
.rdata$r:00005ABC ; Segment type: Pure data
.rdata$r:00005ABC ; Segment permissions: Read
.rdata$r:00005ABC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005ABC                 assume cs:_rdata$r
.rdata$r:00005ABC                 ;org 5ABCh
.rdata$r:00005ABC ; COMDAT (pick any)
.rdata$r:00005ABC                 public ??_R3IUnknown@@8
.rdata$r:00005ABC ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005ABC ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00005AA0o
.rdata$r:00005ABC                                         ; .rdata$r:00005AECo ...
.rdata$r:00005ABD                 db    0
.rdata$r:00005ABE                 db    0
.rdata$r:00005ABF                 db    0
.rdata$r:00005AC0                 db    0
.rdata$r:00005AC1                 db    0
.rdata$r:00005AC2                 db    0
.rdata$r:00005AC3                 db    0
.rdata$r:00005AC4                 db    1
.rdata$r:00005AC5                 db    0
.rdata$r:00005AC6                 db    0
.rdata$r:00005AC7                 db    0
.rdata$r:00005AC8                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00005AC8 _rdata$r        ends
.rdata$r:00005AC8
.rdata$r:00005ACC ; ===========================================================================
.rdata$r:00005ACC
.rdata$r:00005ACC ; Segment type: Pure data
.rdata$r:00005ACC ; Segment permissions: Read
.rdata$r:00005ACC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005ACC                 assume cs:_rdata$r
.rdata$r:00005ACC                 ;org 5ACCh
.rdata$r:00005ACC ; COMDAT (pick any)
.rdata$r:00005ACC                 public ??_R2IUnknown@@8
.rdata$r:00005ACC ; IUnknown::`RTTI Base Class Array'
.rdata$r:00005ACC ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00005ACC                                         ; DATA XREF: .rdata$r:00005AC8o
.rdata$r:00005ACC                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005AD0                 db    0
.rdata$r:00005AD1                 align 4
.rdata$r:00005AD1 _rdata$r        ends
.rdata$r:00005AD1
.rdata$r:00005AD4 ; ===========================================================================
.rdata$r:00005AD4
.rdata$r:00005AD4 ; Segment type: Pure data
.rdata$r:00005AD4 ; Segment permissions: Read
.rdata$r:00005AD4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005AD4                 assume cs:_rdata$r
.rdata$r:00005AD4                 ;org 5AD4h
.rdata$r:00005AD4 ; COMDAT (pick any)
.rdata$r:00005AD4                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00005AD4 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00005AD4 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00005AD4                                         ; DATA XREF: .rdata$r:000059F0o
.rdata$r:00005AD4                                         ; .rdata$r:000062F8o ...
.rdata$r:00005AD4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00005AD8                 align 10h
.rdata$r:00005AE0                 db 0FFh
.rdata$r:00005AE1                 db 0FFh
.rdata$r:00005AE2                 db 0FFh
.rdata$r:00005AE3                 db 0FFh
.rdata$r:00005AE4                 db    0
.rdata$r:00005AE5                 db    0
.rdata$r:00005AE6                 db    0
.rdata$r:00005AE7                 db    0
.rdata$r:00005AE8                 db  42h ; B
.rdata$r:00005AE9                 db    0
.rdata$r:00005AEA                 db    0
.rdata$r:00005AEB                 db    0
.rdata$r:00005AEC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005AEC _rdata$r        ends
.rdata$r:00005AEC
.rdata$r:00005AF0 ; ===========================================================================
.rdata$r:00005AF0
.rdata$r:00005AF0 ; Segment type: Pure data
.rdata$r:00005AF0 ; Segment permissions: Read
.rdata$r:00005AF0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005AF0                 assume cs:_rdata$r
.rdata$r:00005AF0                 ;org 5AF0h
.rdata$r:00005AF0 ; COMDAT (pick any)
.rdata$r:00005AF0                 public ??_R13?0A@EA@ICompressSetInStream@@8
.rdata$r:00005AF0 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00005AF0 ??_R13?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:00005AF0                                         ; DATA XREF: .rdata$r:000059F4o
.rdata$r:00005AF0                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00005AF4                 db    1
.rdata$r:00005AF5                 db    0
.rdata$r:00005AF6                 db    0
.rdata$r:00005AF7                 db    0
.rdata$r:00005AF8                 db    4
.rdata$r:00005AF9                 db    0
.rdata$r:00005AFA                 db    0
.rdata$r:00005AFB                 db    0
.rdata$r:00005AFC                 db 0FFh
.rdata$r:00005AFD                 db 0FFh
.rdata$r:00005AFE                 db 0FFh
.rdata$r:00005AFF                 db 0FFh
.rdata$r:00005B00                 db    0
.rdata$r:00005B01                 db    0
.rdata$r:00005B02                 db    0
.rdata$r:00005B03                 db    0
.rdata$r:00005B04                 db  40h ; @
.rdata$r:00005B05                 db    0
.rdata$r:00005B06                 db    0
.rdata$r:00005B07                 db    0
.rdata$r:00005B08                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005B08 _rdata$r        ends
.rdata$r:00005B08
.data:00005B0C ; ===========================================================================
.data:00005B0C
.data:00005B0C ; Segment type: Pure data
.data:00005B0C ; Segment permissions: Read/Write
.data:00005B0C _data           segment dword public 'DATA' use32
.data:00005B0C                 assume cs:_data
.data:00005B0C                 ;org 5B0Ch
.data:00005B0C ; COMDAT (pick any)
.data:00005B0C                 public ??_R0?AUICompressSetInStream@@@8
.data:00005B0C ; struct ICompressSetInStream `RTTI Type Descriptor'
.data:00005B0C ??_R0?AUICompressSetInStream@@@8 dd offset ??_7type_info@@6B@
.data:00005B0C                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00005B0C                                         ; .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00005B0C                                         ; const type_info::`vftable'
.data:00005B10                 db    0
.data:00005B11                 db    0
.data:00005B12                 db    0
.data:00005B13                 db    0
.data:00005B14                 db  2Eh ; .
.data:00005B15                 db  3Fh ; ?
.data:00005B16                 db  41h ; A
.data:00005B17                 db  55h ; U
.data:00005B18                 db  49h ; I
.data:00005B19                 db  43h ; C
.data:00005B1A                 db  6Fh ; o
.data:00005B1B                 db  6Dh ; m
.data:00005B1C                 db  70h ; p
.data:00005B1D                 db  72h ; r
.data:00005B1E                 db  65h ; e
.data:00005B1F                 db  73h ; s
.data:00005B20                 db  73h ; s
.data:00005B21                 db  53h ; S
.data:00005B22                 db  65h ; e
.data:00005B23                 db  74h ; t
.data:00005B24                 db  49h ; I
.data:00005B25                 db  6Eh ; n
.data:00005B26                 db  53h ; S
.data:00005B27                 db  74h ; t
.data:00005B28                 db  72h ; r
.data:00005B29                 db  65h ; e
.data:00005B2A                 db  61h ; a
.data:00005B2B                 db  6Dh ; m
.data:00005B2C                 db  40h ; @
.data:00005B2D                 db  40h ; @
.data:00005B2E                 db    0
.data:00005B2F                 align 10h
.data:00005B2F _data           ends
.data:00005B2F
.rdata$r:00005B30 ; ===========================================================================
.rdata$r:00005B30
.rdata$r:00005B30 ; Segment type: Pure data
.rdata$r:00005B30 ; Segment permissions: Read
.rdata$r:00005B30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005B30                 assume cs:_rdata$r
.rdata$r:00005B30                 ;org 5B30h
.rdata$r:00005B30 ; COMDAT (pick any)
.rdata$r:00005B30                 public ??_R3ICompressSetInStream@@8
.rdata$r:00005B30 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005B30 ??_R3ICompressSetInStream@@8 db    0    ; DATA XREF: .rdata$r:00005B08o
.rdata$r:00005B30                                         ; .rdata$r:00005B64o ...
.rdata$r:00005B31                 db    0
.rdata$r:00005B32                 db    0
.rdata$r:00005B33                 db    0
.rdata$r:00005B34                 db    0
.rdata$r:00005B35                 db    0
.rdata$r:00005B36                 db    0
.rdata$r:00005B37                 db    0
.rdata$r:00005B38                 db    2
.rdata$r:00005B39                 db    0
.rdata$r:00005B3A                 db    0
.rdata$r:00005B3B                 db    0
.rdata$r:00005B3C                 dd offset ??_R2ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:00005B3C _rdata$r        ends
.rdata$r:00005B3C
.rdata$r:00005B40 ; ===========================================================================
.rdata$r:00005B40
.rdata$r:00005B40 ; Segment type: Pure data
.rdata$r:00005B40 ; Segment permissions: Read
.rdata$r:00005B40 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005B40                 assume cs:_rdata$r
.rdata$r:00005B40                 ;org 5B40h
.rdata$r:00005B40 ; COMDAT (pick any)
.rdata$r:00005B40                 public ??_R2ICompressSetInStream@@8
.rdata$r:00005B40 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:00005B40 ??_R2ICompressSetInStream@@8 dd offset ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:00005B40                                         ; DATA XREF: .rdata$r:00005B3Co
.rdata$r:00005B40                                         ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005B44                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005B48                 db    0
.rdata$r:00005B49                 align 4
.rdata$r:00005B49 _rdata$r        ends
.rdata$r:00005B49
.rdata$r:00005B4C ; ===========================================================================
.rdata$r:00005B4C
.rdata$r:00005B4C ; Segment type: Pure data
.rdata$r:00005B4C ; Segment permissions: Read
.rdata$r:00005B4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005B4C                 assume cs:_rdata$r
.rdata$r:00005B4C                 ;org 5B4Ch
.rdata$r:00005B4C ; COMDAT (pick any)
.rdata$r:00005B4C                 public ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:00005B4C ; ICompressSetInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005B4C ??_R1A@?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:00005B4C                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Array'o
.rdata$r:00005B4C                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00005B50                 db    1
.rdata$r:00005B51                 db    0
.rdata$r:00005B52                 db    0
.rdata$r:00005B53                 db    0
.rdata$r:00005B54                 db    0
.rdata$r:00005B55                 db    0
.rdata$r:00005B56                 db    0
.rdata$r:00005B57                 db    0
.rdata$r:00005B58                 db 0FFh
.rdata$r:00005B59                 db 0FFh
.rdata$r:00005B5A                 db 0FFh
.rdata$r:00005B5B                 db 0FFh
.rdata$r:00005B5C                 db    0
.rdata$r:00005B5D                 db    0
.rdata$r:00005B5E                 db    0
.rdata$r:00005B5F                 db    0
.rdata$r:00005B60                 db  40h ; @
.rdata$r:00005B61                 db    0
.rdata$r:00005B62                 db    0
.rdata$r:00005B63                 db    0
.rdata$r:00005B64                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005B64 _rdata$r        ends
.rdata$r:00005B64
.rdata$r:00005B68 ; ===========================================================================
.rdata$r:00005B68
.rdata$r:00005B68 ; Segment type: Pure data
.rdata$r:00005B68 ; Segment permissions: Read
.rdata$r:00005B68 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005B68                 assume cs:_rdata$r
.rdata$r:00005B68                 ;org 5B68h
.rdata$r:00005B68 ; COMDAT (pick any)
.rdata$r:00005B68                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00005B68 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00005B68 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00005B68                                         ; DATA XREF: .rdata$r:000059F8o
.rdata$r:00005B68                                         ; .rdata$r:00006300o ...
.rdata$r:00005B68                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00005B6C                 align 10h
.rdata$r:00005B70                 db    4
.rdata$r:00005B71                 db    0
.rdata$r:00005B72                 db    0
.rdata$r:00005B73                 db    0
.rdata$r:00005B74                 db 0FFh
.rdata$r:00005B75                 db 0FFh
.rdata$r:00005B76                 db 0FFh
.rdata$r:00005B77                 db 0FFh
.rdata$r:00005B78                 db    0
.rdata$r:00005B79                 db    0
.rdata$r:00005B7A                 db    0
.rdata$r:00005B7B                 db    0
.rdata$r:00005B7C                 db  42h ; B
.rdata$r:00005B7D                 db    0
.rdata$r:00005B7E                 db    0
.rdata$r:00005B7F                 db    0
.rdata$r:00005B80                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005B80 _rdata$r        ends
.rdata$r:00005B80
.rdata$r:00005B84 ; ===========================================================================
.rdata$r:00005B84
.rdata$r:00005B84 ; Segment type: Pure data
.rdata$r:00005B84 ; Segment permissions: Read
.rdata$r:00005B84 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005B84                 assume cs:_rdata$r
.rdata$r:00005B84                 ;org 5B84h
.rdata$r:00005B84 ; COMDAT (pick any)
.rdata$r:00005B84                 public ??_R17?0A@EA@ISequentialInStream@@8
.rdata$r:00005B84 ; ISequentialInStream::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00005B84 ??_R17?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00005B84                                         ; DATA XREF: .rdata$r:000059FCo
.rdata$r:00005B84                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00005B88                 db    1
.rdata$r:00005B89                 db    0
.rdata$r:00005B8A                 db    0
.rdata$r:00005B8B                 db    0
.rdata$r:00005B8C                 db    8
.rdata$r:00005B8D                 db    0
.rdata$r:00005B8E                 db    0
.rdata$r:00005B8F                 db    0
.rdata$r:00005B90                 db 0FFh
.rdata$r:00005B91                 db 0FFh
.rdata$r:00005B92                 db 0FFh
.rdata$r:00005B93                 db 0FFh
.rdata$r:00005B94                 db    0
.rdata$r:00005B95                 db    0
.rdata$r:00005B96                 db    0
.rdata$r:00005B97                 db    0
.rdata$r:00005B98                 db  40h ; @
.rdata$r:00005B99                 db    0
.rdata$r:00005B9A                 db    0
.rdata$r:00005B9B                 db    0
.rdata$r:00005B9C                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005B9C _rdata$r        ends
.rdata$r:00005B9C
.data:00005BA0 ; ===========================================================================
.data:00005BA0
.data:00005BA0 ; Segment type: Pure data
.data:00005BA0 ; Segment permissions: Read/Write
.data:00005BA0 _data           segment dword public 'DATA' use32
.data:00005BA0                 assume cs:_data
.data:00005BA0                 ;org 5BA0h
.data:00005BA0 ; COMDAT (pick any)
.data:00005BA0                 public ??_R0?AUISequentialInStream@@@8
.data:00005BA0 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:00005BA0 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00005BA0                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00005BA0                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00005BA0                                         ; const type_info::`vftable'
.data:00005BA4                 align 8
.data:00005BA8 a_?auisequentia db '.?AUISequentialInStream@@',0
.data:00005BC2                 align 4
.data:00005BC2 _data           ends
.data:00005BC2
.rdata$r:00005BC4 ; ===========================================================================
.rdata$r:00005BC4
.rdata$r:00005BC4 ; Segment type: Pure data
.rdata$r:00005BC4 ; Segment permissions: Read
.rdata$r:00005BC4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005BC4                 assume cs:_rdata$r
.rdata$r:00005BC4                 ;org 5BC4h
.rdata$r:00005BC4 ; COMDAT (pick any)
.rdata$r:00005BC4                 public ??_R3ISequentialInStream@@8
.rdata$r:00005BC4 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005BC4 ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00005B9Co
.rdata$r:00005BC4                                         ; .rdata$r:00005BF8o ...
.rdata$r:00005BC5                 db    0
.rdata$r:00005BC6                 db    0
.rdata$r:00005BC7                 db    0
.rdata$r:00005BC8                 db    0
.rdata$r:00005BC9                 db    0
.rdata$r:00005BCA                 db    0
.rdata$r:00005BCB                 db    0
.rdata$r:00005BCC                 db    2
.rdata$r:00005BCD                 db    0
.rdata$r:00005BCE                 db    0
.rdata$r:00005BCF                 db    0
.rdata$r:00005BD0                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00005BD0 _rdata$r        ends
.rdata$r:00005BD0
.rdata$r:00005BD4 ; ===========================================================================
.rdata$r:00005BD4
.rdata$r:00005BD4 ; Segment type: Pure data
.rdata$r:00005BD4 ; Segment permissions: Read
.rdata$r:00005BD4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005BD4                 assume cs:_rdata$r
.rdata$r:00005BD4                 ;org 5BD4h
.rdata$r:00005BD4 ; COMDAT (pick any)
.rdata$r:00005BD4                 public ??_R2ISequentialInStream@@8
.rdata$r:00005BD4 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00005BD4 ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00005BD4                                         ; DATA XREF: .rdata$r:00005BD0o
.rdata$r:00005BD4                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005BD8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005BDC                 db    0
.rdata$r:00005BDD                 align 10h
.rdata$r:00005BDD _rdata$r        ends
.rdata$r:00005BDD
.rdata$r:00005BE0 ; ===========================================================================
.rdata$r:00005BE0
.rdata$r:00005BE0 ; Segment type: Pure data
.rdata$r:00005BE0 ; Segment permissions: Read
.rdata$r:00005BE0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005BE0                 assume cs:_rdata$r
.rdata$r:00005BE0                 ;org 5BE0h
.rdata$r:00005BE0 ; COMDAT (pick any)
.rdata$r:00005BE0                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00005BE0 ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005BE0 ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00005BE0                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:00005BE0                                         ; .rdata$r:00006FC8o
.rdata$r:00005BE0                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00005BE4                 db    1
.rdata$r:00005BE5                 db    0
.rdata$r:00005BE6                 db    0
.rdata$r:00005BE7                 db    0
.rdata$r:00005BE8                 db    0
.rdata$r:00005BE9                 db    0
.rdata$r:00005BEA                 db    0
.rdata$r:00005BEB                 db    0
.rdata$r:00005BEC                 db 0FFh
.rdata$r:00005BED                 db 0FFh
.rdata$r:00005BEE                 db 0FFh
.rdata$r:00005BEF                 db 0FFh
.rdata$r:00005BF0                 db    0
.rdata$r:00005BF1                 db    0
.rdata$r:00005BF2                 db    0
.rdata$r:00005BF3                 db    0
.rdata$r:00005BF4                 db  40h ; @
.rdata$r:00005BF5                 db    0
.rdata$r:00005BF6                 db    0
.rdata$r:00005BF7                 db    0
.rdata$r:00005BF8                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005BF8 _rdata$r        ends
.rdata$r:00005BF8
.rdata$r:00005BFC ; ===========================================================================
.rdata$r:00005BFC
.rdata$r:00005BFC ; Segment type: Pure data
.rdata$r:00005BFC ; Segment permissions: Read
.rdata$r:00005BFC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005BFC                 assume cs:_rdata$r
.rdata$r:00005BFC                 ;org 5BFCh
.rdata$r:00005BFC ; COMDAT (pick any)
.rdata$r:00005BFC                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:00005BFC ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:00005BFC ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00005BFC                                         ; DATA XREF: .rdata$r:00005A00o
.rdata$r:00005BFC                                         ; .rdata$r:00006308o ...
.rdata$r:00005BFC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00005C00                 db    0
.rdata$r:00005C01                 db    0
.rdata$r:00005C02                 db    0
.rdata$r:00005C03                 db    0
.rdata$r:00005C04                 db    8
.rdata$r:00005C05                 db    0
.rdata$r:00005C06                 db    0
.rdata$r:00005C07                 db    0
.rdata$r:00005C08                 db 0FFh
.rdata$r:00005C09                 db 0FFh
.rdata$r:00005C0A                 db 0FFh
.rdata$r:00005C0B                 db 0FFh
.rdata$r:00005C0C                 db    0
.rdata$r:00005C0D                 db    0
.rdata$r:00005C0E                 db    0
.rdata$r:00005C0F                 db    0
.rdata$r:00005C10                 db  42h ; B
.rdata$r:00005C11                 db    0
.rdata$r:00005C12                 db    0
.rdata$r:00005C13                 db    0
.rdata$r:00005C14                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005C14 _rdata$r        ends
.rdata$r:00005C14
.rdata$r:00005C18 ; ===========================================================================
.rdata$r:00005C18
.rdata$r:00005C18 ; Segment type: Pure data
.rdata$r:00005C18 ; Segment permissions: Read
.rdata$r:00005C18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005C18                 assume cs:_rdata$r
.rdata$r:00005C18                 ;org 5C18h
.rdata$r:00005C18 ; COMDAT (pick any)
.rdata$r:00005C18                 public ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00005C18 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00005C18 ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:00005C18                                         ; DATA XREF: .rdata$r:00005A04o
.rdata$r:00005C18                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:00005C1C                 db    1
.rdata$r:00005C1D                 db    0
.rdata$r:00005C1E                 db    0
.rdata$r:00005C1F                 db    0
.rdata$r:00005C20                 db  0Ch
.rdata$r:00005C21                 db    0
.rdata$r:00005C22                 db    0
.rdata$r:00005C23                 db    0
.rdata$r:00005C24                 db 0FFh
.rdata$r:00005C25                 db 0FFh
.rdata$r:00005C26                 db 0FFh
.rdata$r:00005C27                 db 0FFh
.rdata$r:00005C28                 db    0
.rdata$r:00005C29                 db    0
.rdata$r:00005C2A                 db    0
.rdata$r:00005C2B                 db    0
.rdata$r:00005C2C                 db  40h ; @
.rdata$r:00005C2D                 db    0
.rdata$r:00005C2E                 db    0
.rdata$r:00005C2F                 db    0
.rdata$r:00005C30                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005C30 _rdata$r        ends
.rdata$r:00005C30
.data:00005C34 ; ===========================================================================
.data:00005C34
.data:00005C34 ; Segment type: Pure data
.data:00005C34 ; Segment permissions: Read/Write
.data:00005C34 _data           segment dword public 'DATA' use32
.data:00005C34                 assume cs:_data
.data:00005C34                 ;org 5C34h
.data:00005C34 ; COMDAT (pick any)
.data:00005C34                 public ??_R0?AUICompressGetInStreamProcessedSize@@@8
.data:00005C34 ; struct ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.data:00005C34 ??_R0?AUICompressGetInStreamProcessedSize@@@8 dd offset ??_7type_info@@6B@
.data:00005C34                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:00005C34                                         ; .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00005C34                                         ; const type_info::`vftable'
.data:00005C38                 db    0
.data:00005C39                 db    0
.data:00005C3A                 db    0
.data:00005C3B                 db    0
.data:00005C3C                 db  2Eh ; .
.data:00005C3D                 db  3Fh ; ?
.data:00005C3E                 db  41h ; A
.data:00005C3F                 db  55h ; U
.data:00005C40                 db  49h ; I
.data:00005C41                 db  43h ; C
.data:00005C42                 db  6Fh ; o
.data:00005C43                 db  6Dh ; m
.data:00005C44                 db  70h ; p
.data:00005C45                 db  72h ; r
.data:00005C46                 db  65h ; e
.data:00005C47                 db  73h ; s
.data:00005C48                 db  73h ; s
.data:00005C49                 db  47h ; G
.data:00005C4A                 db  65h ; e
.data:00005C4B                 db  74h ; t
.data:00005C4C                 db  49h ; I
.data:00005C4D                 db  6Eh ; n
.data:00005C4E                 db  53h ; S
.data:00005C4F                 db  74h ; t
.data:00005C50                 db  72h ; r
.data:00005C51                 db  65h ; e
.data:00005C52                 db  61h ; a
.data:00005C53                 db  6Dh ; m
.data:00005C54                 db  50h ; P
.data:00005C55                 db  72h ; r
.data:00005C56                 db  6Fh ; o
.data:00005C57                 db  63h ; c
.data:00005C58                 db  65h ; e
.data:00005C59                 db  73h ; s
.data:00005C5A                 db  73h ; s
.data:00005C5B                 db  65h ; e
.data:00005C5C                 db  64h ; d
.data:00005C5D                 db  53h ; S
.data:00005C5E                 db  69h ; i
.data:00005C5F                 db  7Ah ; z
.data:00005C60                 db  65h ; e
.data:00005C61                 db  40h ; @
.data:00005C62                 db  40h ; @
.data:00005C63                 db    0
.data:00005C63 _data           ends
.data:00005C63
.rdata$r:00005C64 ; ===========================================================================
.rdata$r:00005C64
.rdata$r:00005C64 ; Segment type: Pure data
.rdata$r:00005C64 ; Segment permissions: Read
.rdata$r:00005C64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005C64                 assume cs:_rdata$r
.rdata$r:00005C64                 ;org 5C64h
.rdata$r:00005C64 ; COMDAT (pick any)
.rdata$r:00005C64                 public ??_R3ICompressGetInStreamProcessedSize@@8
.rdata$r:00005C64 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005C64 ??_R3ICompressGetInStreamProcessedSize@@8 db    0
.rdata$r:00005C64                                         ; DATA XREF: .rdata$r:00005C30o
.rdata$r:00005C64                                         ; .rdata$r:00005C98o ...
.rdata$r:00005C65                 db    0
.rdata$r:00005C66                 db    0
.rdata$r:00005C67                 db    0
.rdata$r:00005C68                 db    0
.rdata$r:00005C69                 db    0
.rdata$r:00005C6A                 db    0
.rdata$r:00005C6B                 db    0
.rdata$r:00005C6C                 db    2
.rdata$r:00005C6D                 db    0
.rdata$r:00005C6E                 db    0
.rdata$r:00005C6F                 db    0
.rdata$r:00005C70                 dd offset ??_R2ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:00005C70 _rdata$r        ends
.rdata$r:00005C70
.rdata$r:00005C74 ; ===========================================================================
.rdata$r:00005C74
.rdata$r:00005C74 ; Segment type: Pure data
.rdata$r:00005C74 ; Segment permissions: Read
.rdata$r:00005C74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005C74                 assume cs:_rdata$r
.rdata$r:00005C74                 ;org 5C74h
.rdata$r:00005C74 ; COMDAT (pick any)
.rdata$r:00005C74                 public ??_R2ICompressGetInStreamProcessedSize@@8
.rdata$r:00005C74 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:00005C74 ??_R2ICompressGetInStreamProcessedSize@@8 dd offset ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00005C74                                         ; DATA XREF: .rdata$r:00005C70o
.rdata$r:00005C74                                         ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005C78                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005C7C                 db    0
.rdata$r:00005C7D                 align 10h
.rdata$r:00005C7D _rdata$r        ends
.rdata$r:00005C7D
.rdata$r:00005C80 ; ===========================================================================
.rdata$r:00005C80
.rdata$r:00005C80 ; Segment type: Pure data
.rdata$r:00005C80 ; Segment permissions: Read
.rdata$r:00005C80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005C80                 assume cs:_rdata$r
.rdata$r:00005C80                 ;org 5C80h
.rdata$r:00005C80 ; COMDAT (pick any)
.rdata$r:00005C80                 public ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00005C80 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005C80 ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:00005C80                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Array'o
.rdata$r:00005C80                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:00005C84                 db    1
.rdata$r:00005C85                 db    0
.rdata$r:00005C86                 db    0
.rdata$r:00005C87                 db    0
.rdata$r:00005C88                 db    0
.rdata$r:00005C89                 db    0
.rdata$r:00005C8A                 db    0
.rdata$r:00005C8B                 db    0
.rdata$r:00005C8C                 db 0FFh
.rdata$r:00005C8D                 db 0FFh
.rdata$r:00005C8E                 db 0FFh
.rdata$r:00005C8F                 db 0FFh
.rdata$r:00005C90                 db    0
.rdata$r:00005C91                 db    0
.rdata$r:00005C92                 db    0
.rdata$r:00005C93                 db    0
.rdata$r:00005C94                 db  40h ; @
.rdata$r:00005C95                 db    0
.rdata$r:00005C96                 db    0
.rdata$r:00005C97                 db    0
.rdata$r:00005C98                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005C98 _rdata$r        ends
.rdata$r:00005C98
.rdata$r:00005C9C ; ===========================================================================
.rdata$r:00005C9C
.rdata$r:00005C9C ; Segment type: Pure data
.rdata$r:00005C9C ; Segment permissions: Read
.rdata$r:00005C9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005C9C                 assume cs:_rdata$r
.rdata$r:00005C9C                 ;org 5C9Ch
.rdata$r:00005C9C ; COMDAT (pick any)
.rdata$r:00005C9C                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:00005C9C ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:00005C9C ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00005C9C                                         ; DATA XREF: .rdata$r:00005A08o
.rdata$r:00005C9C                                         ; .rdata$r:00006310o ...
.rdata$r:00005C9C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00005CA0                 db    0
.rdata$r:00005CA1                 db    0
.rdata$r:00005CA2                 db    0
.rdata$r:00005CA3                 db    0
.rdata$r:00005CA4                 db  0Ch
.rdata$r:00005CA5                 db    0
.rdata$r:00005CA6                 db    0
.rdata$r:00005CA7                 db    0
.rdata$r:00005CA8                 db 0FFh
.rdata$r:00005CA9                 db 0FFh
.rdata$r:00005CAA                 db 0FFh
.rdata$r:00005CAB                 db 0FFh
.rdata$r:00005CAC                 db    0
.rdata$r:00005CAD                 db    0
.rdata$r:00005CAE                 db    0
.rdata$r:00005CAF                 db    0
.rdata$r:00005CB0                 db  42h ; B
.rdata$r:00005CB1                 db    0
.rdata$r:00005CB2                 db    0
.rdata$r:00005CB3                 db    0
.rdata$r:00005CB4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005CB4 _rdata$r        ends
.rdata$r:00005CB4
.rdata$r:00005CB8 ; ===========================================================================
.rdata$r:00005CB8
.rdata$r:00005CB8 ; Segment type: Pure data
.rdata$r:00005CB8 ; Segment permissions: Read
.rdata$r:00005CB8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005CB8                 assume cs:_rdata$r
.rdata$r:00005CB8                 ;org 5CB8h
.rdata$r:00005CB8 ; COMDAT (pick any)
.rdata$r:00005CB8                 public ??_R1BA@?0A@EA@CMyUnknownImp@@8
.rdata$r:00005CB8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:00005CB8 ??_R1BA@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00005CB8                                         ; DATA XREF: .rdata$r:00005A0Co
.rdata$r:00005CB8                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00005CBC                 align 10h
.rdata$r:00005CC0                 db  10h
.rdata$r:00005CC1                 db    0
.rdata$r:00005CC2                 db    0
.rdata$r:00005CC3                 db    0
.rdata$r:00005CC4                 db 0FFh
.rdata$r:00005CC5                 db 0FFh
.rdata$r:00005CC6                 db 0FFh
.rdata$r:00005CC7                 db 0FFh
.rdata$r:00005CC8                 db    0
.rdata$r:00005CC9                 db    0
.rdata$r:00005CCA                 db    0
.rdata$r:00005CCB                 db    0
.rdata$r:00005CCC                 db  40h ; @
.rdata$r:00005CCD                 db    0
.rdata$r:00005CCE                 db    0
.rdata$r:00005CCF                 db    0
.rdata$r:00005CD0                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005CD0 _rdata$r        ends
.rdata$r:00005CD0
.data:00005CD4 ; ===========================================================================
.data:00005CD4
.data:00005CD4 ; Segment type: Pure data
.data:00005CD4 ; Segment permissions: Read/Write
.data:00005CD4 _data           segment dword public 'DATA' use32
.data:00005CD4                 assume cs:_data
.data:00005CD4                 ;org 5CD4h
.data:00005CD4 ; COMDAT (pick any)
.data:00005CD4                 public ??_R0?AVCMyUnknownImp@@@8
.data:00005CD4 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00005CD4 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00005CD4                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:00005CD4                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00005CD4                                         ; const type_info::`vftable'
.data:00005CD8                 db    0
.data:00005CD9                 db    0
.data:00005CDA                 db    0
.data:00005CDB                 db    0
.data:00005CDC                 db  2Eh ; .
.data:00005CDD                 db  3Fh ; ?
.data:00005CDE                 db  41h ; A
.data:00005CDF                 db  56h ; V
.data:00005CE0                 db  43h ; C
.data:00005CE1                 db  4Dh ; M
.data:00005CE2                 db  79h ; y
.data:00005CE3                 db  55h ; U
.data:00005CE4                 db  6Eh ; n
.data:00005CE5                 db  6Bh ; k
.data:00005CE6                 db  6Eh ; n
.data:00005CE7                 db  6Fh ; o
.data:00005CE8                 db  77h ; w
.data:00005CE9                 db  6Eh ; n
.data:00005CEA                 db  49h ; I
.data:00005CEB                 db  6Dh ; m
.data:00005CEC                 db  70h ; p
.data:00005CED                 db  40h ; @
.data:00005CEE                 db  40h ; @
.data:00005CEF                 db    0
.data:00005CEF _data           ends
.data:00005CEF
.rdata$r:00005CF0 ; ===========================================================================
.rdata$r:00005CF0
.rdata$r:00005CF0 ; Segment type: Pure data
.rdata$r:00005CF0 ; Segment permissions: Read
.rdata$r:00005CF0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005CF0                 assume cs:_rdata$r
.rdata$r:00005CF0                 ;org 5CF0h
.rdata$r:00005CF0 ; COMDAT (pick any)
.rdata$r:00005CF0                 public ??_R3CMyUnknownImp@@8
.rdata$r:00005CF0 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005CF0 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00005CD0o
.rdata$r:00005CF0                                         ; .rdata$r:00005D20o ...
.rdata$r:00005CF1                 db    0
.rdata$r:00005CF2                 db    0
.rdata$r:00005CF3                 db    0
.rdata$r:00005CF4                 db    0
.rdata$r:00005CF5                 db    0
.rdata$r:00005CF6                 db    0
.rdata$r:00005CF7                 db    0
.rdata$r:00005CF8                 db    1
.rdata$r:00005CF9                 db    0
.rdata$r:00005CFA                 db    0
.rdata$r:00005CFB                 db    0
.rdata$r:00005CFC                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00005CFC _rdata$r        ends
.rdata$r:00005CFC
.rdata$r:00005D00 ; ===========================================================================
.rdata$r:00005D00
.rdata$r:00005D00 ; Segment type: Pure data
.rdata$r:00005D00 ; Segment permissions: Read
.rdata$r:00005D00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005D00                 assume cs:_rdata$r
.rdata$r:00005D00                 ;org 5D00h
.rdata$r:00005D00 ; COMDAT (pick any)
.rdata$r:00005D00                 public ??_R2CMyUnknownImp@@8
.rdata$r:00005D00 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00005D00 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00005D00                                         ; DATA XREF: .rdata$r:00005CFCo
.rdata$r:00005D00                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005D04                 db    0
.rdata$r:00005D05                 align 4
.rdata$r:00005D05 _rdata$r        ends
.rdata$r:00005D05
.rdata$r:00005D08 ; ===========================================================================
.rdata$r:00005D08
.rdata$r:00005D08 ; Segment type: Pure data
.rdata$r:00005D08 ; Segment permissions: Read
.rdata$r:00005D08 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005D08                 assume cs:_rdata$r
.rdata$r:00005D08                 ;org 5D08h
.rdata$r:00005D08 ; COMDAT (pick any)
.rdata$r:00005D08                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00005D08 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005D08 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00005D08                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00005D08                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00005D0C                 db    0
.rdata$r:00005D0D                 db    0
.rdata$r:00005D0E                 db    0
.rdata$r:00005D0F                 db    0
.rdata$r:00005D10                 db    0
.rdata$r:00005D11                 db    0
.rdata$r:00005D12                 db    0
.rdata$r:00005D13                 db    0
.rdata$r:00005D14                 db 0FFh
.rdata$r:00005D15                 db 0FFh
.rdata$r:00005D16                 db 0FFh
.rdata$r:00005D17                 db 0FFh
.rdata$r:00005D18                 db    0
.rdata$r:00005D19                 db    0
.rdata$r:00005D1A                 db    0
.rdata$r:00005D1B                 db    0
.rdata$r:00005D1C                 db  40h ; @
.rdata$r:00005D1D                 db    0
.rdata$r:00005D1E                 db    0
.rdata$r:00005D1F                 db    0
.rdata$r:00005D20                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005D20 _rdata$r        ends
.rdata$r:00005D20
.rdata$r:00005D24 ; ===========================================================================
.rdata$r:00005D24
.rdata$r:00005D24 ; Segment type: Pure data
.rdata$r:00005D24 ; Segment permissions: Read
.rdata$r:00005D24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005D24                 assume cs:_rdata$r
.rdata$r:00005D24                 ;org 5D24h
.rdata$r:00005D24 ; COMDAT (pick any)
.rdata$r:00005D24                 public ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@
.rdata$r:00005D24 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:00005D24 ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:00005D24                                         ; DATA XREF: .rdata:00005974o
.rdata$r:00005D25                 db    0
.rdata$r:00005D26                 db    0
.rdata$r:00005D27                 db    0
.rdata$r:00005D28                 db    4
.rdata$r:00005D29                 db    0
.rdata$r:00005D2A                 db    0
.rdata$r:00005D2B                 db    0
.rdata$r:00005D2C                 db    0
.rdata$r:00005D2D                 db    0
.rdata$r:00005D2E                 db    0
.rdata$r:00005D2F                 db    0
.rdata$r:00005D30                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00005D34                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005D34 _rdata$r        ends
.rdata$r:00005D34
.rdata$r:00005D38 ; ===========================================================================
.rdata$r:00005D38
.rdata$r:00005D38 ; Segment type: Pure data
.rdata$r:00005D38 ; Segment permissions: Read
.rdata$r:00005D38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005D38                 assume cs:_rdata$r
.rdata$r:00005D38                 ;org 5D38h
.rdata$r:00005D38 ; COMDAT (pick any)
.rdata$r:00005D38                 public ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@
.rdata$r:00005D38 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:00005D38 ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:00005D38                                         ; DATA XREF: .rdata:00005960o
.rdata$r:00005D39                 db    0
.rdata$r:00005D3A                 db    0
.rdata$r:00005D3B                 db    0
.rdata$r:00005D3C                 db    8
.rdata$r:00005D3D                 db    0
.rdata$r:00005D3E                 db    0
.rdata$r:00005D3F                 db    0
.rdata$r:00005D40                 db    0
.rdata$r:00005D41                 db    0
.rdata$r:00005D42                 db    0
.rdata$r:00005D43                 db    0
.rdata$r:00005D44                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00005D48                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005D48 _rdata$r        ends
.rdata$r:00005D48
.rdata$r:00005D4C ; ===========================================================================
.rdata$r:00005D4C
.rdata$r:00005D4C ; Segment type: Pure data
.rdata$r:00005D4C ; Segment permissions: Read
.rdata$r:00005D4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005D4C                 assume cs:_rdata$r
.rdata$r:00005D4C                 ;org 5D4Ch
.rdata$r:00005D4C ; COMDAT (pick any)
.rdata$r:00005D4C                 public ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata$r:00005D4C ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata$r:00005D4C ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ db    0
.rdata$r:00005D4C                                         ; DATA XREF: .rdata:0000594Co
.rdata$r:00005D4D                 db    0
.rdata$r:00005D4E                 db    0
.rdata$r:00005D4F                 db    0
.rdata$r:00005D50                 db  0Ch
.rdata$r:00005D51                 db    0
.rdata$r:00005D52                 db    0
.rdata$r:00005D53                 db    0
.rdata$r:00005D54                 db    0
.rdata$r:00005D55                 db    0
.rdata$r:00005D56                 db    0
.rdata$r:00005D57                 db    0
.rdata$r:00005D58                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00005D5C                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005D5C _rdata$r        ends
.rdata$r:00005D5C
.text:00005D60 ; ===========================================================================
.text:00005D60
.text:00005D60 ; Segment type: Pure code
.text:00005D60 ; Segment permissions: Read/Execute
.text:00005D60 _text           segment para public 'CODE' use32
.text:00005D60                 assume cs:_text
.text:00005D60                 ;org 5D60h
.text:00005D60 ; COMDAT (pick any)
.text:00005D60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005D60
.text:00005D60 ; =============== S U B R O U T I N E =======================================
.text:00005D60
.text:00005D60 ; Attributes: bp-based frame
.text:00005D60
.text:00005D60 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00005D60                 public ??0CMyUnknownImp@@QAE@XZ
.text:00005D60 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+3Dp
.text:00005D60                                         ; NCompress::NQuantum::CDecoder::CDecoder(void)+1Cp ...
.text:00005D60
.text:00005D60 var_4           = dword ptr -4
.text:00005D60
.text:00005D60                 push    ebp
.text:00005D61                 mov     ebp, esp
.text:00005D63                 push    ecx
.text:00005D64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D6B                 mov     [ebp+var_4], ecx
.text:00005D6E                 mov     eax, [ebp+var_4]
.text:00005D71                 mov     dword ptr [eax], 0
.text:00005D77                 mov     eax, [ebp+var_4]
.text:00005D7A                 mov     esp, ebp
.text:00005D7C                 pop     ebp
.text:00005D7D                 retn
.text:00005D7D ??0CMyUnknownImp@@QAE@XZ endp
.text:00005D7D
.text:00005D7D ; ---------------------------------------------------------------------------
.text:00005D7E                 align 10h
.text:00005D7E _text           ends
.text:00005D7E
.text:00005D80 ; ===========================================================================
.text:00005D80
.text:00005D80 ; Segment type: Pure code
.text:00005D80 ; Segment permissions: Read/Execute
.text:00005D80 _text           segment para public 'CODE' use32
.text:00005D80                 assume cs:_text
.text:00005D80                 ;org 5D80h
.text:00005D80 ; COMDAT (pick any)
.text:00005D80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005D80
.text:00005D80 ; =============== S U B R O U T I N E =======================================
.text:00005D80
.text:00005D80 ; Attributes: bp-based frame
.text:00005D80
.text:00005D80 ; __int32 __stdcall NCompress::CCopyCoder::QueryInterface(NCompress::CCopyCoder *this, const struct _GUID *Buf1, void **)
.text:00005D80                 public ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00005D80 ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00005D80                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00005D80                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:00005D80
.text:00005D80 var_C           = dword ptr -0Ch
.text:00005D80 var_8           = dword ptr -8
.text:00005D80 var_4           = dword ptr -4
.text:00005D80 this            = dword ptr  8
.text:00005D80 Buf1            = dword ptr  0Ch
.text:00005D80 arg_8           = dword ptr  10h
.text:00005D80
.text:00005D80                 push    ebp
.text:00005D81                 mov     ebp, esp
.text:00005D83                 sub     esp, 0Ch
.text:00005D86                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00005D8D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005D94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D9B                 mov     eax, [ebp+arg_8]
.text:00005D9E                 mov     dword ptr [eax], 0
.text:00005DA4                 push    offset _IID_IUnknown ; Buf2
.text:00005DA9                 mov     ecx, [ebp+Buf1]
.text:00005DAC                 push    ecx             ; Buf1
.text:00005DAD                 call    ___@8           ; __(x,x)
.text:00005DB2                 test    eax, eax
.text:00005DB4                 jz      short loc_5DC3
.text:00005DB6                 mov     edx, [ebp+arg_8]
.text:00005DB9                 mov     eax, [ebp+this]
.text:00005DBC                 mov     [edx], eax
.text:00005DBE                 jmp     loc_5E85
.text:00005DC3 ; ---------------------------------------------------------------------------
.text:00005DC3
.text:00005DC3 loc_5DC3:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+34j
.text:00005DC3                 push    offset _IID_ICompressCoder ; Buf2
.text:00005DC8                 mov     ecx, [ebp+Buf1]
.text:00005DCB                 push    ecx             ; Buf1
.text:00005DCC                 call    ___@8           ; __(x,x)
.text:00005DD1                 test    eax, eax
.text:00005DD3                 jz      short loc_5DE2
.text:00005DD5                 mov     edx, [ebp+arg_8]
.text:00005DD8                 mov     eax, [ebp+this]
.text:00005DDB                 mov     [edx], eax
.text:00005DDD                 jmp     loc_5E85
.text:00005DE2 ; ---------------------------------------------------------------------------
.text:00005DE2
.text:00005DE2 loc_5DE2:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+53j
.text:00005DE2                 push    offset _IID_ICompressSetInStream ; Buf2
.text:00005DE7                 mov     ecx, [ebp+Buf1]
.text:00005DEA                 push    ecx             ; Buf1
.text:00005DEB                 call    ___@8           ; __(x,x)
.text:00005DF0                 test    eax, eax
.text:00005DF2                 jz      short loc_5E16
.text:00005DF4                 cmp     [ebp+this], 0
.text:00005DF8                 jz      short loc_5E05
.text:00005DFA                 mov     edx, [ebp+this]
.text:00005DFD                 add     edx, 4
.text:00005E00                 mov     [ebp+var_4], edx
.text:00005E03                 jmp     short loc_5E0C
.text:00005E05 ; ---------------------------------------------------------------------------
.text:00005E05
.text:00005E05 loc_5E05:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+78j
.text:00005E05                 mov     [ebp+var_4], 0
.text:00005E0C
.text:00005E0C loc_5E0C:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+83j
.text:00005E0C                 mov     eax, [ebp+arg_8]
.text:00005E0F                 mov     ecx, [ebp+var_4]
.text:00005E12                 mov     [eax], ecx
.text:00005E14                 jmp     short loc_5E85
.text:00005E16 ; ---------------------------------------------------------------------------
.text:00005E16
.text:00005E16 loc_5E16:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+72j
.text:00005E16                 push    offset _IID_ISequentialInStream ; Buf2
.text:00005E1B                 mov     edx, [ebp+Buf1]
.text:00005E1E                 push    edx             ; Buf1
.text:00005E1F                 call    ___@8           ; __(x,x)
.text:00005E24                 test    eax, eax
.text:00005E26                 jz      short loc_5E4A
.text:00005E28                 cmp     [ebp+this], 0
.text:00005E2C                 jz      short loc_5E39
.text:00005E2E                 mov     eax, [ebp+this]
.text:00005E31                 add     eax, 8
.text:00005E34                 mov     [ebp+var_8], eax
.text:00005E37                 jmp     short loc_5E40
.text:00005E39 ; ---------------------------------------------------------------------------
.text:00005E39
.text:00005E39 loc_5E39:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+ACj
.text:00005E39                 mov     [ebp+var_8], 0
.text:00005E40
.text:00005E40 loc_5E40:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+B7j
.text:00005E40                 mov     ecx, [ebp+arg_8]
.text:00005E43                 mov     edx, [ebp+var_8]
.text:00005E46                 mov     [ecx], edx
.text:00005E48                 jmp     short loc_5E85
.text:00005E4A ; ---------------------------------------------------------------------------
.text:00005E4A
.text:00005E4A loc_5E4A:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+A6j
.text:00005E4A                 push    offset _IID_ICompressGetInStreamProcessedSize ; Buf2
.text:00005E4F                 mov     eax, [ebp+Buf1]
.text:00005E52                 push    eax             ; Buf1
.text:00005E53                 call    ___@8           ; __(x,x)
.text:00005E58                 test    eax, eax
.text:00005E5A                 jz      short loc_5E7E
.text:00005E5C                 cmp     [ebp+this], 0
.text:00005E60                 jz      short loc_5E6D
.text:00005E62                 mov     ecx, [ebp+this]
.text:00005E65                 add     ecx, 0Ch
.text:00005E68                 mov     [ebp+var_C], ecx
.text:00005E6B                 jmp     short loc_5E74
.text:00005E6D ; ---------------------------------------------------------------------------
.text:00005E6D
.text:00005E6D loc_5E6D:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+E0j
.text:00005E6D                 mov     [ebp+var_C], 0
.text:00005E74
.text:00005E74 loc_5E74:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+EBj
.text:00005E74                 mov     edx, [ebp+arg_8]
.text:00005E77                 mov     eax, [ebp+var_C]
.text:00005E7A                 mov     [edx], eax
.text:00005E7C                 jmp     short loc_5E85
.text:00005E7E ; ---------------------------------------------------------------------------
.text:00005E7E
.text:00005E7E loc_5E7E:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+DAj
.text:00005E7E                 mov     eax, 80004002h
.text:00005E83                 jmp     short loc_5E96
.text:00005E85 ; ---------------------------------------------------------------------------
.text:00005E85
.text:00005E85 loc_5E85:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+3Ej
.text:00005E85                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+5Dj ...
.text:00005E85                 mov     ecx, [ebp+this]
.text:00005E88                 mov     edx, [ecx+10h]
.text:00005E8B                 add     edx, 1
.text:00005E8E                 mov     eax, [ebp+this]
.text:00005E91                 mov     [eax+10h], edx
.text:00005E94                 xor     eax, eax
.text:00005E96
.text:00005E96 loc_5E96:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+103j
.text:00005E96                 add     esp, 0Ch
.text:00005E99                 cmp     ebp, esp
.text:00005E9B                 call    __RTC_CheckEsp
.text:00005EA0                 mov     esp, ebp
.text:00005EA2                 pop     ebp
.text:00005EA3                 retn    0Ch
.text:00005EA3 ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00005EA3
.text:00005EA3 ; ---------------------------------------------------------------------------
.text:00005EA6                 align 4
.text:00005EA6 _text           ends
.text:00005EA6
.text:00005EA8 ; ===========================================================================
.text:00005EA8
.text:00005EA8 ; Segment type: Pure code
.text:00005EA8 ; Segment permissions: Read/Execute
.text:00005EA8 _text           segment para public 'CODE' use32
.text:00005EA8                 assume cs:_text
.text:00005EA8                 ;org 5EA8h
.text:00005EA8 ; COMDAT (pick any)
.text:00005EA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005EA8
.text:00005EA8 ; =============== S U B R O U T I N E =======================================
.text:00005EA8
.text:00005EA8 ; Attributes: bp-based frame
.text:00005EA8
.text:00005EA8 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00005EA8                 public ___@8
.text:00005EA8 ___@8           proc near               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+2Dp
.text:00005EA8                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+4Cp ...
.text:00005EA8
.text:00005EA8 Buf1            = dword ptr  8
.text:00005EA8 Buf2            = dword ptr  0Ch
.text:00005EA8
.text:00005EA8                 push    ebp
.text:00005EA9                 mov     ebp, esp
.text:00005EAB                 mov     eax, [ebp+Buf2]
.text:00005EAE                 push    eax             ; Buf2
.text:00005EAF                 mov     ecx, [ebp+Buf1]
.text:00005EB2                 push    ecx             ; Buf1
.text:00005EB3                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00005EB8                 cmp     ebp, esp
.text:00005EBA                 call    __RTC_CheckEsp
.text:00005EBF                 pop     ebp
.text:00005EC0                 retn    8
.text:00005EC0 ___@8           endp
.text:00005EC0
.text:00005EC0 ; ---------------------------------------------------------------------------
.text:00005EC3                 align 4
.text:00005EC3 _text           ends
.text:00005EC3
.text:00005EC4 ; ===========================================================================
.text:00005EC4
.text:00005EC4 ; Segment type: Pure code
.text:00005EC4 ; Segment permissions: Read/Execute
.text:00005EC4 _text           segment para public 'CODE' use32
.text:00005EC4                 assume cs:_text
.text:00005EC4                 ;org 5EC4h
.text:00005EC4 ; COMDAT (pick any)
.text:00005EC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005EC4
.text:00005EC4 ; =============== S U B R O U T I N E =======================================
.text:00005EC4
.text:00005EC4 ; Attributes: bp-based frame
.text:00005EC4
.text:00005EC4 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00005EC4                 public _IsEqualGUID@8
.text:00005EC4 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00005EC4
.text:00005EC4 Buf1            = dword ptr  8
.text:00005EC4 Buf2            = dword ptr  0Ch
.text:00005EC4
.text:00005EC4                 push    ebp
.text:00005EC5                 mov     ebp, esp
.text:00005EC7                 push    10h             ; Size
.text:00005EC9                 mov     eax, [ebp+Buf2]
.text:00005ECC                 push    eax             ; Buf2
.text:00005ECD                 mov     ecx, [ebp+Buf1]
.text:00005ED0                 push    ecx             ; Buf1
.text:00005ED1                 call    _memcmp
.text:00005ED6                 add     esp, 0Ch
.text:00005ED9                 neg     eax
.text:00005EDB                 sbb     eax, eax
.text:00005EDD                 add     eax, 1
.text:00005EE0                 cmp     ebp, esp
.text:00005EE2                 call    __RTC_CheckEsp
.text:00005EE7                 pop     ebp
.text:00005EE8                 retn    8
.text:00005EE8 _IsEqualGUID@8  endp
.text:00005EE8
.text:00005EE8 ; ---------------------------------------------------------------------------
.text:00005EEB                 align 4
.text:00005EEB _text           ends
.text:00005EEB
.text:00005EEC ; ===========================================================================
.text:00005EEC
.text:00005EEC ; Segment type: Pure code
.text:00005EEC ; Segment permissions: Read/Execute
.text:00005EEC _text           segment para public 'CODE' use32
.text:00005EEC                 assume cs:_text
.text:00005EEC                 ;org 5EECh
.text:00005EEC ; COMDAT (pick any)
.text:00005EEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005EEC
.text:00005EEC ; =============== S U B R O U T I N E =======================================
.text:00005EEC
.text:00005EEC ; Attributes: bp-based frame
.text:00005EEC
.text:00005EEC ; unsigned __int32 __stdcall NCompress::CCopyCoder::AddRef(NCompress::CCopyCoder *this)
.text:00005EEC                 public ?AddRef@CCopyCoder@NCompress@@UAGKXZ
.text:00005EEC ?AddRef@CCopyCoder@NCompress@@UAGKXZ proc near
.text:00005EEC                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}' (void)+5j
.text:00005EEC                                         ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}' (void)+5j ...
.text:00005EEC
.text:00005EEC var_4           = dword ptr -4
.text:00005EEC this            = dword ptr  8
.text:00005EEC
.text:00005EEC                 push    ebp
.text:00005EED                 mov     ebp, esp
.text:00005EEF                 push    ecx
.text:00005EF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005EF7                 mov     eax, [ebp+this]
.text:00005EFA                 mov     ecx, [eax+10h]
.text:00005EFD                 add     ecx, 1
.text:00005F00                 mov     [ebp+var_4], ecx
.text:00005F03                 mov     edx, [ebp+this]
.text:00005F06                 mov     eax, [ebp+var_4]
.text:00005F09                 mov     [edx+10h], eax
.text:00005F0C                 mov     eax, [ebp+var_4]
.text:00005F0F                 mov     esp, ebp
.text:00005F11                 pop     ebp
.text:00005F12                 retn    4
.text:00005F12 ?AddRef@CCopyCoder@NCompress@@UAGKXZ endp
.text:00005F12
.text:00005F12 ; ---------------------------------------------------------------------------
.text:00005F15                 align 4
.text:00005F15 _text           ends
.text:00005F15
.text:00005F18 ; ===========================================================================
.text:00005F18
.text:00005F18 ; Segment type: Pure code
.text:00005F18 ; Segment permissions: Read/Execute
.text:00005F18 _text           segment para public 'CODE' use32
.text:00005F18                 assume cs:_text
.text:00005F18                 ;org 5F18h
.text:00005F18 ; COMDAT (pick any)
.text:00005F18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005F18
.text:00005F18 ; =============== S U B R O U T I N E =======================================
.text:00005F18
.text:00005F18 ; Attributes: bp-based frame
.text:00005F18
.text:00005F18 ; unsigned __int32 __stdcall NCompress::CCopyCoder::Release(NCompress::CCopyCoder *this)
.text:00005F18                 public ?Release@CCopyCoder@NCompress@@UAGKXZ
.text:00005F18 ?Release@CCopyCoder@NCompress@@UAGKXZ proc near
.text:00005F18                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::Release`adjustor{4}' (void)+5j
.text:00005F18                                         ; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}' (void)+5j ...
.text:00005F18
.text:00005F18 var_10          = dword ptr -10h
.text:00005F18 var_C           = dword ptr -0Ch
.text:00005F18 var_8           = dword ptr -8
.text:00005F18 var_4           = dword ptr -4
.text:00005F18 this            = dword ptr  8
.text:00005F18
.text:00005F18                 push    ebp
.text:00005F19                 mov     ebp, esp
.text:00005F1B                 sub     esp, 10h
.text:00005F1E                 mov     eax, 0CCCCCCCCh
.text:00005F23                 mov     [ebp+var_10], eax
.text:00005F26                 mov     [ebp+var_C], eax
.text:00005F29                 mov     [ebp+var_8], eax
.text:00005F2C                 mov     [ebp+var_4], eax
.text:00005F2F                 mov     eax, [ebp+this]
.text:00005F32                 mov     ecx, [eax+10h]
.text:00005F35                 sub     ecx, 1
.text:00005F38                 mov     [ebp+var_C], ecx
.text:00005F3B                 mov     edx, [ebp+this]
.text:00005F3E                 mov     eax, [ebp+var_C]
.text:00005F41                 mov     [edx+10h], eax
.text:00005F44                 cmp     [ebp+var_C], 0
.text:00005F48                 jz      short loc_5F52
.text:00005F4A                 mov     ecx, [ebp+this]
.text:00005F4D                 mov     eax, [ecx+10h]
.text:00005F50                 jmp     short loc_5F7C
.text:00005F52 ; ---------------------------------------------------------------------------
.text:00005F52
.text:00005F52 loc_5F52:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+30j
.text:00005F52                 mov     edx, [ebp+this]
.text:00005F55                 mov     [ebp+var_8], edx
.text:00005F58                 mov     eax, [ebp+var_8]
.text:00005F5B                 mov     [ebp+var_4], eax
.text:00005F5E                 cmp     [ebp+var_4], 0
.text:00005F62                 jz      short loc_5F73
.text:00005F64                 push    1
.text:00005F66                 mov     ecx, [ebp+var_4]
.text:00005F69                 call    ??_GCCopyCoder@NCompress@@QAEPAXI@Z ; NCompress::CCopyCoder::`scalar deleting destructor'(uint)
.text:00005F6E                 mov     [ebp+var_10], eax
.text:00005F71                 jmp     short loc_5F7A
.text:00005F73 ; ---------------------------------------------------------------------------
.text:00005F73
.text:00005F73 loc_5F73:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+4Aj
.text:00005F73                 mov     [ebp+var_10], 0
.text:00005F7A
.text:00005F7A loc_5F7A:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+59j
.text:00005F7A                 xor     eax, eax
.text:00005F7C
.text:00005F7C loc_5F7C:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+38j
.text:00005F7C                 add     esp, 10h
.text:00005F7F                 cmp     ebp, esp
.text:00005F81                 call    __RTC_CheckEsp
.text:00005F86                 mov     esp, ebp
.text:00005F88                 pop     ebp
.text:00005F89                 retn    4
.text:00005F89 ?Release@CCopyCoder@NCompress@@UAGKXZ endp
.text:00005F89
.text:00005F89 _text           ends
.text:00005F89
.text:00005F8C ; ===========================================================================
.text:00005F8C
.text:00005F8C ; Segment type: Pure code
.text:00005F8C ; Segment permissions: Read/Execute
.text:00005F8C _text           segment para public 'CODE' use32
.text:00005F8C                 assume cs:_text
.text:00005F8C                 ;org 5F8Ch
.text:00005F8C ; COMDAT (pick any)
.text:00005F8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005F8C
.text:00005F8C ; =============== S U B R O U T I N E =======================================
.text:00005F8C
.text:00005F8C ; Attributes: bp-based frame
.text:00005F8C
.text:00005F8C ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:00005F8C                 public ??0ICompressCoder@@QAE@XZ
.text:00005F8C ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+11p
.text:00005F8C                                         ; NCompress::NQuantum::CDecoder::CDecoder(void)+11p
.text:00005F8C
.text:00005F8C var_4           = dword ptr -4
.text:00005F8C
.text:00005F8C                 push    ebp
.text:00005F8D                 mov     ebp, esp
.text:00005F8F                 push    ecx
.text:00005F90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F97                 mov     [ebp+var_4], ecx
.text:00005F9A                 mov     ecx, [ebp+var_4]
.text:00005F9D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00005FA2                 mov     eax, [ebp+var_4]
.text:00005FA5                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:00005FAB                 mov     eax, [ebp+var_4]
.text:00005FAE                 add     esp, 4
.text:00005FB1                 cmp     ebp, esp
.text:00005FB3                 call    __RTC_CheckEsp
.text:00005FB8                 mov     esp, ebp
.text:00005FBA                 pop     ebp
.text:00005FBB                 retn
.text:00005FBB ??0ICompressCoder@@QAE@XZ endp
.text:00005FBB
.text:00005FBB _text           ends
.text:00005FBB
.rdata:00005FBC ; ===========================================================================
.rdata:00005FBC
.rdata:00005FBC ; Segment type: Pure data
.rdata:00005FBC ; Segment permissions: Read
.rdata:00005FBC _rdata          segment dword public 'DATA' use32
.rdata:00005FBC                 assume cs:_rdata
.rdata:00005FBC                 ;org 5FBCh
.rdata:00005FBC ; COMDAT (pick largest)
.rdata:00005FBC                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:00005FC0                 public ??_7ICompressCoder@@6B@
.rdata:00005FC0 ; const ICompressCoder::`vftable'
.rdata:00005FC0 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:00005FC0                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:00005FC4                 dd offset __purecall
.rdata:00005FC8                 dd offset __purecall
.rdata:00005FCC                 dd offset __purecall
.rdata:00005FCC _rdata          ends
.rdata:00005FCC
.rdata$r:00005FD0 ; ===========================================================================
.rdata$r:00005FD0
.rdata$r:00005FD0 ; Segment type: Pure data
.rdata$r:00005FD0 ; Segment permissions: Read
.rdata$r:00005FD0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005FD0                 assume cs:_rdata$r
.rdata$r:00005FD0                 ;org 5FD0h
.rdata$r:00005FD0 ; COMDAT (pick any)
.rdata$r:00005FD0                 public ??_R4ICompressCoder@@6B@
.rdata$r:00005FD0 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:00005FD0 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:00005FBCo
.rdata$r:00005FD1                 db    0
.rdata$r:00005FD2                 db    0
.rdata$r:00005FD3                 db    0
.rdata$r:00005FD4                 db    0
.rdata$r:00005FD5                 db    0
.rdata$r:00005FD6                 db    0
.rdata$r:00005FD7                 db    0
.rdata$r:00005FD8                 db    0
.rdata$r:00005FD9                 db    0
.rdata$r:00005FDA                 db    0
.rdata$r:00005FDB                 db    0
.rdata$r:00005FDC                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00005FE0                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005FE0 _rdata$r        ends
.rdata$r:00005FE0
.text:00005FE4 ; ===========================================================================
.text:00005FE4
.text:00005FE4 ; Segment type: Pure code
.text:00005FE4 ; Segment permissions: Read/Execute
.text:00005FE4 _text           segment para public 'CODE' use32
.text:00005FE4                 assume cs:_text
.text:00005FE4                 ;org 5FE4h
.text:00005FE4 ; COMDAT (pick any)
.text:00005FE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005FE4
.text:00005FE4 ; =============== S U B R O U T I N E =======================================
.text:00005FE4
.text:00005FE4 ; Attributes: bp-based frame
.text:00005FE4
.text:00005FE4 ; _DWORD __thiscall ICompressSetInStream::ICompressSetInStream(ICompressSetInStream *__hidden this)
.text:00005FE4                 public ??0ICompressSetInStream@@QAE@XZ
.text:00005FE4 ??0ICompressSetInStream@@QAE@XZ proc near
.text:00005FE4                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+1Cp
.text:00005FE4
.text:00005FE4 var_4           = dword ptr -4
.text:00005FE4
.text:00005FE4                 push    ebp
.text:00005FE5                 mov     ebp, esp
.text:00005FE7                 push    ecx
.text:00005FE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005FEF                 mov     [ebp+var_4], ecx
.text:00005FF2                 mov     ecx, [ebp+var_4]
.text:00005FF5                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00005FFA                 mov     eax, [ebp+var_4]
.text:00005FFD                 mov     dword ptr [eax], offset ??_7ICompressSetInStream@@6B@ ; const ICompressSetInStream::`vftable'
.text:00006003                 mov     eax, [ebp+var_4]
.text:00006006                 add     esp, 4
.text:00006009                 cmp     ebp, esp
.text:0000600B                 call    __RTC_CheckEsp
.text:00006010                 mov     esp, ebp
.text:00006012                 pop     ebp
.text:00006013                 retn
.text:00006013 ??0ICompressSetInStream@@QAE@XZ endp
.text:00006013
.text:00006013 _text           ends
.text:00006013
.rdata:00006014 ; ===========================================================================
.rdata:00006014
.rdata:00006014 ; Segment type: Pure data
.rdata:00006014 ; Segment permissions: Read
.rdata:00006014 _rdata          segment dword public 'DATA' use32
.rdata:00006014                 assume cs:_rdata
.rdata:00006014                 ;org 6014h
.rdata:00006014 ; COMDAT (pick largest)
.rdata:00006014                 dd offset ??_R4ICompressSetInStream@@6B@ ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata:00006018                 public ??_7ICompressSetInStream@@6B@
.rdata:00006018 ; const ICompressSetInStream::`vftable'
.rdata:00006018 ??_7ICompressSetInStream@@6B@ dd offset __purecall
.rdata:00006018                                         ; DATA XREF: ICompressSetInStream::ICompressSetInStream(void)+19o
.rdata:0000601C                 dd offset __purecall
.rdata:00006020                 dd offset __purecall
.rdata:00006024                 dd offset __purecall
.rdata:00006028                 dd offset __purecall
.rdata:00006028 _rdata          ends
.rdata:00006028
.rdata$r:0000602C ; ===========================================================================
.rdata$r:0000602C
.rdata$r:0000602C ; Segment type: Pure data
.rdata$r:0000602C ; Segment permissions: Read
.rdata$r:0000602C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000602C                 assume cs:_rdata$r
.rdata$r:0000602C                 ;org 602Ch
.rdata$r:0000602C ; COMDAT (pick any)
.rdata$r:0000602C                 public ??_R4ICompressSetInStream@@6B@
.rdata$r:0000602C ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata$r:0000602C ??_R4ICompressSetInStream@@6B@ db    0  ; DATA XREF: .rdata:00006014o
.rdata$r:0000602D                 db    0
.rdata$r:0000602E                 db    0
.rdata$r:0000602F                 db    0
.rdata$r:00006030                 db    0
.rdata$r:00006031                 db    0
.rdata$r:00006032                 db    0
.rdata$r:00006033                 db    0
.rdata$r:00006034                 db    0
.rdata$r:00006035                 db    0
.rdata$r:00006036                 db    0
.rdata$r:00006037                 db    0
.rdata$r:00006038                 dd offset ??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:0000603C                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000603C _rdata$r        ends
.rdata$r:0000603C
.text:00006040 ; ===========================================================================
.text:00006040
.text:00006040 ; Segment type: Pure code
.text:00006040 ; Segment permissions: Read/Execute
.text:00006040 _text           segment para public 'CODE' use32
.text:00006040                 assume cs:_text
.text:00006040                 ;org 6040h
.text:00006040 ; COMDAT (pick any)
.text:00006040                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006040
.text:00006040 ; =============== S U B R O U T I N E =======================================
.text:00006040
.text:00006040 ; Attributes: bp-based frame
.text:00006040
.text:00006040 ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:00006040                 public ??0ISequentialInStream@@QAE@XZ
.text:00006040 ??0ISequentialInStream@@QAE@XZ proc near
.text:00006040                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+27p
.text:00006040                                         ; NArchive::NCab::CCabBlockInStream::CCabBlockInStream(void)+11p
.text:00006040
.text:00006040 var_4           = dword ptr -4
.text:00006040
.text:00006040                 push    ebp
.text:00006041                 mov     ebp, esp
.text:00006043                 push    ecx
.text:00006044                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000604B                 mov     [ebp+var_4], ecx
.text:0000604E                 mov     ecx, [ebp+var_4]
.text:00006051                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00006056                 mov     eax, [ebp+var_4]
.text:00006059                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:0000605F                 mov     eax, [ebp+var_4]
.text:00006062                 add     esp, 4
.text:00006065                 cmp     ebp, esp
.text:00006067                 call    __RTC_CheckEsp
.text:0000606C                 mov     esp, ebp
.text:0000606E                 pop     ebp
.text:0000606F                 retn
.text:0000606F ??0ISequentialInStream@@QAE@XZ endp
.text:0000606F
.text:0000606F _text           ends
.text:0000606F
.rdata:00006070 ; ===========================================================================
.rdata:00006070
.rdata:00006070 ; Segment type: Pure data
.rdata:00006070 ; Segment permissions: Read
.rdata:00006070 _rdata          segment dword public 'DATA' use32
.rdata:00006070                 assume cs:_rdata
.rdata:00006070                 ;org 6070h
.rdata:00006070 ; COMDAT (pick largest)
.rdata:00006070                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:00006074                 public ??_7ISequentialInStream@@6B@
.rdata:00006074 ; const ISequentialInStream::`vftable'
.rdata:00006074 ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:00006074                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:00006078                 dd offset __purecall
.rdata:0000607C                 dd offset __purecall
.rdata:00006080                 dd offset __purecall
.rdata:00006080 _rdata          ends
.rdata:00006080
.rdata$r:00006084 ; ===========================================================================
.rdata$r:00006084
.rdata$r:00006084 ; Segment type: Pure data
.rdata$r:00006084 ; Segment permissions: Read
.rdata$r:00006084 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006084                 assume cs:_rdata$r
.rdata$r:00006084                 ;org 6084h
.rdata$r:00006084 ; COMDAT (pick any)
.rdata$r:00006084                 public ??_R4ISequentialInStream@@6B@
.rdata$r:00006084 ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:00006084 ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:00006070o
.rdata$r:00006085                 db    0
.rdata$r:00006086                 db    0
.rdata$r:00006087                 db    0
.rdata$r:00006088                 db    0
.rdata$r:00006089                 db    0
.rdata$r:0000608A                 db    0
.rdata$r:0000608B                 db    0
.rdata$r:0000608C                 db    0
.rdata$r:0000608D                 db    0
.rdata$r:0000608E                 db    0
.rdata$r:0000608F                 db    0
.rdata$r:00006090                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00006094                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006094 _rdata$r        ends
.rdata$r:00006094
.text:00006098 ; ===========================================================================
.text:00006098
.text:00006098 ; Segment type: Pure code
.text:00006098 ; Segment permissions: Read/Execute
.text:00006098 _text           segment para public 'CODE' use32
.text:00006098                 assume cs:_text
.text:00006098                 ;org 6098h
.text:00006098 ; COMDAT (pick any)
.text:00006098                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006098
.text:00006098 ; =============== S U B R O U T I N E =======================================
.text:00006098
.text:00006098 ; Attributes: bp-based frame
.text:00006098
.text:00006098 ; _DWORD __thiscall ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(ICompressGetInStreamProcessedSize *__hidden this)
.text:00006098                 public ??0ICompressGetInStreamProcessedSize@@QAE@XZ
.text:00006098 ??0ICompressGetInStreamProcessedSize@@QAE@XZ proc near
.text:00006098                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+32p
.text:00006098
.text:00006098 var_4           = dword ptr -4
.text:00006098
.text:00006098                 push    ebp
.text:00006099                 mov     ebp, esp
.text:0000609B                 push    ecx
.text:0000609C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000060A3                 mov     [ebp+var_4], ecx
.text:000060A6                 mov     ecx, [ebp+var_4]
.text:000060A9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000060AE                 mov     eax, [ebp+var_4]
.text:000060B1                 mov     dword ptr [eax], offset ??_7ICompressGetInStreamProcessedSize@@6B@ ; const ICompressGetInStreamProcessedSize::`vftable'
.text:000060B7                 mov     eax, [ebp+var_4]
.text:000060BA                 add     esp, 4
.text:000060BD                 cmp     ebp, esp
.text:000060BF                 call    __RTC_CheckEsp
.text:000060C4                 mov     esp, ebp
.text:000060C6                 pop     ebp
.text:000060C7                 retn
.text:000060C7 ??0ICompressGetInStreamProcessedSize@@QAE@XZ endp
.text:000060C7
.text:000060C7 _text           ends
.text:000060C7
.rdata:000060C8 ; ===========================================================================
.rdata:000060C8
.rdata:000060C8 ; Segment type: Pure data
.rdata:000060C8 ; Segment permissions: Read
.rdata:000060C8 _rdata          segment dword public 'DATA' use32
.rdata:000060C8                 assume cs:_rdata
.rdata:000060C8                 ;org 60C8h
.rdata:000060C8 ; COMDAT (pick largest)
.rdata:000060C8                 dd offset ??_R4ICompressGetInStreamProcessedSize@@6B@ ; const ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
.rdata:000060CC                 public ??_7ICompressGetInStreamProcessedSize@@6B@
.rdata:000060CC ; const ICompressGetInStreamProcessedSize::`vftable'
.rdata:000060CC ??_7ICompressGetInStreamProcessedSize@@6B@ dd offset __purecall
.rdata:000060CC                                         ; DATA XREF: ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)+19o
.rdata:000060D0                 dd offset __purecall
.rdata:000060D4                 dd offset __purecall
.rdata:000060D8                 dd offset __purecall
.rdata:000060D8 _rdata          ends
.rdata:000060D8
.rdata$r:000060DC ; ===========================================================================
.rdata$r:000060DC
.rdata$r:000060DC ; Segment type: Pure data
.rdata$r:000060DC ; Segment permissions: Read
.rdata$r:000060DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000060DC                 assume cs:_rdata$r
.rdata$r:000060DC                 ;org 60DCh
.rdata$r:000060DC ; COMDAT (pick any)
.rdata$r:000060DC                 public ??_R4ICompressGetInStreamProcessedSize@@6B@
.rdata$r:000060DC ; const ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
.rdata$r:000060DC ??_R4ICompressGetInStreamProcessedSize@@6B@ db    0
.rdata$r:000060DC                                         ; DATA XREF: .rdata:000060C8o
.rdata$r:000060DD                 db    0
.rdata$r:000060DE                 db    0
.rdata$r:000060DF                 db    0
.rdata$r:000060E0                 db    0
.rdata$r:000060E1                 db    0
.rdata$r:000060E2                 db    0
.rdata$r:000060E3                 db    0
.rdata$r:000060E4                 db    0
.rdata$r:000060E5                 db    0
.rdata$r:000060E6                 db    0
.rdata$r:000060E7                 db    0
.rdata$r:000060E8                 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:000060EC                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000060EC _rdata$r        ends
.rdata$r:000060EC
.text:000060F0 ; ===========================================================================
.text:000060F0
.text:000060F0 ; Segment type: Pure code
.text:000060F0 ; Segment permissions: Read/Execute
.text:000060F0 _text           segment para public 'CODE' use32
.text:000060F0                 assume cs:_text
.text:000060F0                 ;org 60F0h
.text:000060F0 ; COMDAT (pick any)
.text:000060F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000060F0
.text:000060F0 ; =============== S U B R O U T I N E =======================================
.text:000060F0
.text:000060F0 ; Attributes: bp-based frame
.text:000060F0
.text:000060F0 ; public: void * __thiscall NCompress::CCopyCoder::`scalar deleting destructor'(unsigned int)
.text:000060F0                 public ??_GCCopyCoder@NCompress@@QAEPAXI@Z
.text:000060F0 ??_GCCopyCoder@NCompress@@QAEPAXI@Z proc near
.text:000060F0                                         ; CODE XREF: NCompress::CCopyCoder::Release(void)+51p
.text:000060F0
.text:000060F0 var_4           = dword ptr -4
.text:000060F0 arg_0           = dword ptr  8
.text:000060F0
.text:000060F0                 push    ebp
.text:000060F1                 mov     ebp, esp
.text:000060F3                 push    ecx
.text:000060F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000060FB                 mov     [ebp+var_4], ecx
.text:000060FE                 mov     ecx, [ebp+var_4] ; this
.text:00006101                 call    ??1CCopyCoder@NCompress@@QAE@XZ ; NCompress::CCopyCoder::~CCopyCoder(void)
.text:00006106                 mov     eax, [ebp+arg_0]
.text:00006109                 and     eax, 1
.text:0000610C                 jz      short loc_611A
.text:0000610E                 mov     ecx, [ebp+var_4]
.text:00006111                 push    ecx             ; void *
.text:00006112                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006117                 add     esp, 4
.text:0000611A
.text:0000611A loc_611A:                               ; CODE XREF: NCompress::CCopyCoder::`scalar deleting destructor'(uint)+1Cj
.text:0000611A                 mov     eax, [ebp+var_4]
.text:0000611D                 add     esp, 4
.text:00006120                 cmp     ebp, esp
.text:00006122                 call    __RTC_CheckEsp
.text:00006127                 mov     esp, ebp
.text:00006129                 pop     ebp
.text:0000612A                 retn    4
.text:0000612A ??_GCCopyCoder@NCompress@@QAEPAXI@Z endp
.text:0000612A
.text:0000612A ; ---------------------------------------------------------------------------
.text:0000612D                 align 10h
.text:0000612D _text           ends
.text:0000612D
.text:00006130 ; ===========================================================================
.text:00006130
.text:00006130 ; Segment type: Pure code
.text:00006130 ; Segment permissions: Read/Execute
.text:00006130 _text           segment para public 'CODE' use32
.text:00006130                 assume cs:_text
.text:00006130                 ;org 6130h
.text:00006130 ; COMDAT (pick any)
.text:00006130                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006130
.text:00006130 ; =============== S U B R O U T I N E =======================================
.text:00006130
.text:00006130 ; Attributes: bp-based frame
.text:00006130
.text:00006130 ; public: __thiscall IUnknown::IUnknown(void)
.text:00006130                 public ??0IUnknown@@QAE@XZ
.text:00006130 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:00006130                                         ; ICompressSetInStream::ICompressSetInStream(void)+11p ...
.text:00006130
.text:00006130 var_4           = dword ptr -4
.text:00006130
.text:00006130                 push    ebp
.text:00006131                 mov     ebp, esp
.text:00006133                 push    ecx
.text:00006134                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000613B                 mov     [ebp+var_4], ecx
.text:0000613E                 mov     eax, [ebp+var_4]
.text:00006141                 mov     esp, ebp
.text:00006143                 pop     ebp
.text:00006144                 retn
.text:00006144 ??0IUnknown@@QAE@XZ endp
.text:00006144
.text:00006144 ; ---------------------------------------------------------------------------
.text:00006145                 align 4
.text:00006145 _text           ends
.text:00006145
.text:00006148 ; ===========================================================================
.text:00006148
.text:00006148 ; Segment type: Pure code
.text:00006148 ; Segment permissions: Read/Execute
.text:00006148 _text           segment para public 'CODE' use32
.text:00006148                 assume cs:_text
.text:00006148                 ;org 6148h
.text:00006148 ; COMDAT (pick any)
.text:00006148                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006148
.text:00006148 ; =============== S U B R O U T I N E =======================================
.text:00006148
.text:00006148 ; Attributes: bp-based frame
.text:00006148
.text:00006148 ; void __thiscall NCompress::NDeflate::NDecoder::CCoder::Set_KeepHistory(NCompress::NDeflate::NDecoder::CCoder *this, bool)
.text:00006148                 public ?Set_KeepHistory@CCoder@NDecoder@NDeflate@NCompress@@QAEX_N@Z
.text:00006148 ?Set_KeepHistory@CCoder@NDecoder@NDeflate@NCompress@@QAEX_N@Z proc near
.text:00006148                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1929p
.text:00006148
.text:00006148 var_4           = dword ptr -4
.text:00006148 arg_0           = byte ptr  8
.text:00006148
.text:00006148                 push    ebp
.text:00006149                 mov     ebp, esp
.text:0000614B                 push    ecx
.text:0000614C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006153                 mov     [ebp+var_4], ecx
.text:00006156                 mov     eax, [ebp+var_4]
.text:00006159                 mov     cl, [ebp+arg_0]
.text:0000615C                 mov     [eax+0D58h], cl
.text:00006162                 mov     esp, ebp
.text:00006164                 pop     ebp
.text:00006165                 retn    4
.text:00006165 ?Set_KeepHistory@CCoder@NDecoder@NDeflate@NCompress@@QAEX_N@Z endp
.text:00006165
.text:00006165 _text           ends
.text:00006165
.text:00006168 ; ===========================================================================
.text:00006168
.text:00006168 ; Segment type: Pure code
.text:00006168 ; Segment permissions: Read/Execute
.text:00006168 _text           segment para public 'CODE' use32
.text:00006168                 assume cs:_text
.text:00006168                 ;org 6168h
.text:00006168 ; COMDAT (pick any)
.text:00006168                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006168
.text:00006168 ; =============== S U B R O U T I N E =======================================
.text:00006168
.text:00006168 ; Attributes: bp-based frame
.text:00006168
.text:00006168 ; void __thiscall NCompress::NDeflate::NDecoder::CCoder::Set_NeedFinishInput(NCompress::NDeflate::NDecoder::CCoder *this, bool)
.text:00006168                 public ?Set_NeedFinishInput@CCoder@NDecoder@NDeflate@NCompress@@QAEX_N@Z
.text:00006168 ?Set_NeedFinishInput@CCoder@NDecoder@NDeflate@NCompress@@QAEX_N@Z proc near
.text:00006168                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1933p
.text:00006168
.text:00006168 var_4           = dword ptr -4
.text:00006168 arg_0           = byte ptr  8
.text:00006168
.text:00006168                 push    ebp
.text:00006169                 mov     ebp, esp
.text:0000616B                 push    ecx
.text:0000616C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006173                 mov     [ebp+var_4], ecx
.text:00006176                 mov     eax, [ebp+var_4]
.text:00006179                 mov     cl, [ebp+arg_0]
.text:0000617C                 mov     [eax+0D59h], cl
.text:00006182                 mov     esp, ebp
.text:00006184                 pop     ebp
.text:00006185                 retn    4
.text:00006185 ?Set_NeedFinishInput@CCoder@NDecoder@NDeflate@NCompress@@QAEX_N@Z endp
.text:00006185
.text:00006185 _text           ends
.text:00006185
.text:00006188 ; ===========================================================================
.text:00006188
.text:00006188 ; Segment type: Pure code
.text:00006188 ; Segment permissions: Read/Execute
.text:00006188 _text           segment para public 'CODE' use32
.text:00006188                 assume cs:_text
.text:00006188                 ;org 6188h
.text:00006188 ; COMDAT (pick any)
.text:00006188                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006188
.text:00006188 ; =============== S U B R O U T I N E =======================================
.text:00006188
.text:00006188 ; Attributes: bp-based frame
.text:00006188
.text:00006188 ; bool __thiscall NCompress::NDeflate::NDecoder::CCoder::IsFinished(NCompress::NDeflate::NDecoder::CCoder *__hidden this)
.text:00006188                 public ?IsFinished@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ
.text:00006188 ?IsFinished@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ proc near
.text:00006188                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+19C8p
.text:00006188
.text:00006188 var_4           = dword ptr -4
.text:00006188
.text:00006188                 push    ebp
.text:00006189                 mov     ebp, esp
.text:0000618B                 push    ecx
.text:0000618C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006193                 mov     [ebp+var_4], ecx
.text:00006196                 mov     eax, [ebp+var_4]
.text:00006199                 xor     ecx, ecx
.text:0000619B                 cmp     dword ptr [eax+0D5Ch], 0FFFFFFFFh
.text:000061A2                 setz    cl
.text:000061A5                 mov     al, cl
.text:000061A7                 mov     esp, ebp
.text:000061A9                 pop     ebp
.text:000061AA                 retn
.text:000061AA ?IsFinished@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ endp
.text:000061AA
.text:000061AA ; ---------------------------------------------------------------------------
.text:000061AB                 align 4
.text:000061AB _text           ends
.text:000061AB
.text:000061AC ; ===========================================================================
.text:000061AC
.text:000061AC ; Segment type: Pure code
.text:000061AC ; Segment permissions: Read/Execute
.text:000061AC _text           segment para public 'CODE' use32
.text:000061AC                 assume cs:_text
.text:000061AC                 ;org 61ACh
.text:000061AC ; COMDAT (pick any)
.text:000061AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000061AC
.text:000061AC ; =============== S U B R O U T I N E =======================================
.text:000061AC
.text:000061AC ; Attributes: bp-based frame
.text:000061AC
.text:000061AC ; bool __thiscall NCompress::NDeflate::NDecoder::CCoder::IsFinalBlock(NCompress::NDeflate::NDecoder::CCoder *__hidden this)
.text:000061AC                 public ?IsFinalBlock@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ
.text:000061AC ?IsFinalBlock@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ proc near
.text:000061AC                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+19EBp
.text:000061AC
.text:000061AC var_4           = dword ptr -4
.text:000061AC
.text:000061AC                 push    ebp
.text:000061AD                 mov     ebp, esp
.text:000061AF                 push    ecx
.text:000061B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000061B7                 mov     [ebp+var_4], ecx
.text:000061BA                 mov     eax, [ebp+var_4]
.text:000061BD                 mov     al, [eax+0D54h]
.text:000061C3                 mov     esp, ebp
.text:000061C5                 pop     ebp
.text:000061C6                 retn
.text:000061C6 ?IsFinalBlock@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ endp
.text:000061C6
.text:000061C6 ; ---------------------------------------------------------------------------
.text:000061C7                 align 4
.text:000061C7 _text           ends
.text:000061C7
.text:000061C8 ; ===========================================================================
.text:000061C8
.text:000061C8 ; Segment type: Pure code
.text:000061C8 ; Segment permissions: Read/Execute
.text:000061C8 _text           segment para public 'CODE' use32
.text:000061C8                 assume cs:_text
.text:000061C8                 ;org 61C8h
.text:000061C8 ; COMDAT (pick any)
.text:000061C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000061C8
.text:000061C8 ; =============== S U B R O U T I N E =======================================
.text:000061C8
.text:000061C8 ; Attributes: bp-based frame
.text:000061C8
.text:000061C8 ; _DWORD __thiscall NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(NCompress::NDeflate::NDecoder::CCOMCoder *__hidden this)
.text:000061C8                 public ??0CCOMCoder@NDecoder@NDeflate@NCompress@@QAE@XZ
.text:000061C8 ??0CCOMCoder@NDecoder@NDeflate@NCompress@@QAE@XZ proc near
.text:000061C8                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+F7Bp
.text:000061C8
.text:000061C8 var_4           = dword ptr -4
.text:000061C8
.text:000061C8                 push    ebp
.text:000061C9                 mov     ebp, esp
.text:000061CB                 push    ecx
.text:000061CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000061D3                 mov     [ebp+var_4], ecx
.text:000061D6                 push    0               ; bool
.text:000061D8                 push    0               ; bool
.text:000061DA                 mov     ecx, [ebp+var_4] ; this
.text:000061DD                 call    ??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z ; NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)
.text:000061E2                 mov     eax, [ebp+var_4]
.text:000061E5                 mov     dword ptr [eax], offset ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressCoder'}
.text:000061EB                 mov     ecx, [ebp+var_4]
.text:000061EE                 mov     dword ptr [ecx+4], offset ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:000061F5                 mov     edx, [ebp+var_4]
.text:000061F8                 mov     dword ptr [edx+8], offset ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressSetInStream'}
.text:000061FF                 mov     eax, [ebp+var_4]
.text:00006202                 mov     dword ptr [eax+0Ch], offset ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressSetOutStreamSize'}
.text:00006209                 mov     ecx, [ebp+var_4]
.text:0000620C                 mov     dword ptr [ecx+10h], offset ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ISequentialInStream'}
.text:00006213                 mov     eax, [ebp+var_4]
.text:00006216                 add     esp, 4
.text:00006219                 cmp     ebp, esp
.text:0000621B                 call    __RTC_CheckEsp
.text:00006220                 mov     esp, ebp
.text:00006222                 pop     ebp
.text:00006223                 retn
.text:00006223 ??0CCOMCoder@NDecoder@NDeflate@NCompress@@QAE@XZ endp
.text:00006223
.text:00006223 _text           ends
.text:00006223
.rdata:00006224 ; ===========================================================================
.rdata:00006224
.rdata:00006224 ; Segment type: Pure data
.rdata:00006224 ; Segment permissions: Read
.rdata:00006224 _rdata          segment dword public 'DATA' use32
.rdata:00006224                 assume cs:_rdata
.rdata:00006224                 ;org 6224h
.rdata:00006224 ; COMDAT (pick largest)
.rdata:00006224                 dd offset ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:00006228                 public ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@
.rdata:00006228 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ISequentialInStream'}
.rdata:00006228 ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.rdata:00006228                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)+44o
.rdata:00006228                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{16}' (_GUID const &,void * *)
.rdata:0000622C                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{16}' (void)
.rdata:00006230                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{16}' (void)
.rdata:00006234                 dd offset ?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z ; NCompress::NDeflate::NDecoder::CCoder::Read(void *,uint,uint *)
.rdata:00006234 _rdata          ends
.rdata:00006234
.rdata:00006238 ; ===========================================================================
.rdata:00006238
.rdata:00006238 ; Segment type: Pure data
.rdata:00006238 ; Segment permissions: Read
.rdata:00006238 _rdata          segment dword public 'DATA' use32
.rdata:00006238                 assume cs:_rdata
.rdata:00006238                 ;org 6238h
.rdata:00006238 ; COMDAT (pick largest)
.rdata:00006238                 dd offset ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata:0000623C                 public ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@
.rdata:0000623C ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressSetOutStreamSize'}
.rdata:0000623C ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:0000623C                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)+3Ao
.rdata:0000623C                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00006240                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{12}' (void)
.rdata:00006244                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{12}' (void)
.rdata:00006248                 dd offset ?SetOutStreamSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPB_K@Z ; NCompress::NDeflate::NDecoder::CCoder::SetOutStreamSize(unsigned __int64 const *)
.rdata:00006248 _rdata          ends
.rdata:00006248
.rdata:0000624C ; ===========================================================================
.rdata:0000624C
.rdata:0000624C ; Segment type: Pure data
.rdata:0000624C ; Segment permissions: Read
.rdata:0000624C _rdata          segment dword public 'DATA' use32
.rdata:0000624C                 assume cs:_rdata
.rdata:0000624C                 ;org 624Ch
.rdata:0000624C ; COMDAT (pick largest)
.rdata:0000624C                 dd offset ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:00006250                 public ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@
.rdata:00006250 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressSetInStream'}
.rdata:00006250 ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00006250                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)+30o
.rdata:00006250                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00006254                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{8}' (void)
.rdata:00006258                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{8}' (void)
.rdata:0000625C                 dd offset ?SetInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::NDeflate::NDecoder::CCoder::SetInStream(ISequentialInStream *)
.rdata:00006260                 dd offset ?ReleaseInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJXZ ; NCompress::NDeflate::NDecoder::CCoder::ReleaseInStream(void)
.rdata:00006260 _rdata          ends
.rdata:00006260
.rdata:00006264 ; ===========================================================================
.rdata:00006264
.rdata:00006264 ; Segment type: Pure data
.rdata:00006264 ; Segment permissions: Read
.rdata:00006264 _rdata          segment dword public 'DATA' use32
.rdata:00006264                 assume cs:_rdata
.rdata:00006264                 ;org 6264h
.rdata:00006264 ; COMDAT (pick largest)
.rdata:00006264                 dd offset ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata:00006268                 public ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata:00006268 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.rdata:00006268 ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00006268                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)+26o
.rdata:00006268                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:0000626C                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{4}' (void)
.rdata:00006270                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{4}' (void)
.rdata:00006274                 dd offset ?GetInStreamProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPA_K@Z ; NCompress::NDeflate::NDecoder::CCoder::GetInStreamProcessedSize(unsigned __int64 *)
.rdata:00006274 _rdata          ends
.rdata:00006274
.rdata:00006278 ; ===========================================================================
.rdata:00006278
.rdata:00006278 ; Segment type: Pure data
.rdata:00006278 ; Segment permissions: Read
.rdata:00006278 _rdata          segment dword public 'DATA' use32
.rdata:00006278                 assume cs:_rdata
.rdata:00006278                 ;org 6278h
.rdata:00006278 ; COMDAT (pick largest)
.rdata:00006278                 dd offset ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:0000627C                 public ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata:0000627C ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressCoder'}
.rdata:0000627C ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:0000627C                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)+1Do
.rdata:0000627C                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.rdata:00006280                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.rdata:00006284                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.rdata:00006288                 dd offset ?Code@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NDecoder::CCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:0000628C                 dd offset ??_ECCOMCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z ; NCompress::NDeflate::NDecoder::CCOMCoder::`vector deleting destructor'(uint)
.rdata:00006290                 dd offset ?CodeResume@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NDecoder::CCoder::CodeResume(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00006290 _rdata          ends
.rdata:00006290
.rdata$r:00006294 ; ===========================================================================
.rdata$r:00006294
.rdata$r:00006294 ; Segment type: Pure data
.rdata$r:00006294 ; Segment permissions: Read
.rdata$r:00006294 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006294                 assume cs:_rdata$r
.rdata$r:00006294                 ;org 6294h
.rdata$r:00006294 ; COMDAT (pick any)
.rdata$r:00006294                 public ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata$r:00006294 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:00006294 ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:00006294                                         ; DATA XREF: .rdata:00006278o
.rdata$r:00006295                 db    0
.rdata$r:00006296                 db    0
.rdata$r:00006297                 db    0
.rdata$r:00006298                 db    0
.rdata$r:00006299                 db    0
.rdata$r:0000629A                 db    0
.rdata$r:0000629B                 db    0
.rdata$r:0000629C                 db    0
.rdata$r:0000629D                 db    0
.rdata$r:0000629E                 db    0
.rdata$r:0000629F                 db    0
.rdata$r:000062A0                 dd offset ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:000062A4                 dd offset ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000062A4 _rdata$r        ends
.rdata$r:000062A4
.data:000062A8 ; ===========================================================================
.data:000062A8
.data:000062A8 ; Segment type: Pure data
.data:000062A8 ; Segment permissions: Read/Write
.data:000062A8 _data           segment dword public 'DATA' use32
.data:000062A8                 assume cs:_data
.data:000062A8                 ;org 62A8h
.data:000062A8 ; COMDAT (pick any)
.data:000062A8                 public ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8
.data:000062A8 ; class NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.data:000062A8 ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:000062A8                                         ; DATA XREF: .rdata$r:000062A0o
.data:000062A8                                         ; .rdata$r:NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000062A8                                         ; const type_info::`vftable'
.data:000062AC                 align 10h
.data:000062B0 a_?avccomcoder@ db '.?AVCCOMCoder@NDecoder@NDeflate@NCompress@@',0
.data:000062B0 _data           ends
.data:000062B0
.rdata$r:000062DC ; ===========================================================================
.rdata$r:000062DC
.rdata$r:000062DC ; Segment type: Pure data
.rdata$r:000062DC ; Segment permissions: Read
.rdata$r:000062DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000062DC                 assume cs:_rdata$r
.rdata$r:000062DC                 ;org 62DCh
.rdata$r:000062DC ; COMDAT (pick any)
.rdata$r:000062DC                 public ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:000062DC ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000062DC ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 db    0
.rdata$r:000062DC                                         ; DATA XREF: .rdata$r:000062A4o
.rdata$r:000062DC                                         ; .rdata$r:0000633Co ...
.rdata$r:000062DD                 db    0
.rdata$r:000062DE                 db    0
.rdata$r:000062DF                 db    0
.rdata$r:000062E0                 db    1
.rdata$r:000062E1                 db    0
.rdata$r:000062E2                 db    0
.rdata$r:000062E3                 db    0
.rdata$r:000062E4                 db  0Dh
.rdata$r:000062E5                 db    0
.rdata$r:000062E6                 db    0
.rdata$r:000062E7                 db    0
.rdata$r:000062E8                 dd offset ??_R2CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Base Class Array'
.rdata$r:000062E8 _rdata$r        ends
.rdata$r:000062E8
.rdata$r:000062EC ; ===========================================================================
.rdata$r:000062EC
.rdata$r:000062EC ; Segment type: Pure data
.rdata$r:000062EC ; Segment permissions: Read
.rdata$r:000062EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000062EC                 assume cs:_rdata$r
.rdata$r:000062EC                 ;org 62ECh
.rdata$r:000062EC ; COMDAT (pick any)
.rdata$r:000062EC                 public ??_R2CCOMCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:000062EC ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Base Class Array'
.rdata$r:000062EC ??_R2CCOMCoder@NDecoder@NDeflate@NCompress@@8 dd offset ??_R1A@?0A@EA@CCOMCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:000062EC                                         ; DATA XREF: .rdata$r:000062E8o
.rdata$r:000062EC                                         ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000062F0                 dd offset ??_R1A@?0A@EA@CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000062F4                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000062F8                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:000062FC                 dd offset ??_R13?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00006300                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00006304                 dd offset ??_R17?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00006308                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:0000630C                 dd offset ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00006310                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:00006314                 dd offset ??_R1BA@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00006318                 dd offset ??_R1BA@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
.rdata$r:0000631C                 dd offset ??_R1BE@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (20,-1,0,64)'
.rdata$r:00006320                 db    0
.rdata$r:00006321                 align 4
.rdata$r:00006321 _rdata$r        ends
.rdata$r:00006321
.rdata$r:00006324 ; ===========================================================================
.rdata$r:00006324
.rdata$r:00006324 ; Segment type: Pure data
.rdata$r:00006324 ; Segment permissions: Read
.rdata$r:00006324 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006324                 assume cs:_rdata$r
.rdata$r:00006324                 ;org 6324h
.rdata$r:00006324 ; COMDAT (pick any)
.rdata$r:00006324                 public ??_R1A@?0A@EA@CCOMCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:00006324 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006324 ??_R1A@?0A@EA@CCOMCoder@NDecoder@NDeflate@NCompress@@8 dd offset ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8
.rdata$r:00006324                                         ; DATA XREF: .rdata$r:NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Base Class Array'o
.rdata$r:00006324                                         ; NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:00006328                 db  0Ch
.rdata$r:00006329                 db    0
.rdata$r:0000632A                 db    0
.rdata$r:0000632B                 db    0
.rdata$r:0000632C                 db    0
.rdata$r:0000632D                 db    0
.rdata$r:0000632E                 db    0
.rdata$r:0000632F                 db    0
.rdata$r:00006330                 db 0FFh
.rdata$r:00006331                 db 0FFh
.rdata$r:00006332                 db 0FFh
.rdata$r:00006333                 db 0FFh
.rdata$r:00006334                 db    0
.rdata$r:00006335                 db    0
.rdata$r:00006336                 db    0
.rdata$r:00006337                 db    0
.rdata$r:00006338                 db  40h ; @
.rdata$r:00006339                 db    0
.rdata$r:0000633A                 db    0
.rdata$r:0000633B                 db    0
.rdata$r:0000633C                 dd offset ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000633C _rdata$r        ends
.rdata$r:0000633C
.rdata$r:00006340 ; ===========================================================================
.rdata$r:00006340
.rdata$r:00006340 ; Segment type: Pure data
.rdata$r:00006340 ; Segment permissions: Read
.rdata$r:00006340 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006340                 assume cs:_rdata$r
.rdata$r:00006340                 ;org 6340h
.rdata$r:00006340 ; COMDAT (pick any)
.rdata$r:00006340                 public ??_R1A@?0A@EA@CCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:00006340 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006340 ??_R1A@?0A@EA@CCoder@NDecoder@NDeflate@NCompress@@8 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8
.rdata$r:00006340                                         ; DATA XREF: .rdata$r:000062F0o
.rdata$r:00006340                                         ; .rdata$r:NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Array'o
.rdata$r:00006340                                         ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00006344                 db  0Bh
.rdata$r:00006345                 db    0
.rdata$r:00006346                 db    0
.rdata$r:00006347                 db    0
.rdata$r:00006348                 db    0
.rdata$r:00006349                 db    0
.rdata$r:0000634A                 db    0
.rdata$r:0000634B                 db    0
.rdata$r:0000634C                 db 0FFh
.rdata$r:0000634D                 db 0FFh
.rdata$r:0000634E                 db 0FFh
.rdata$r:0000634F                 db 0FFh
.rdata$r:00006350                 db    0
.rdata$r:00006351                 db    0
.rdata$r:00006352                 db    0
.rdata$r:00006353                 db    0
.rdata$r:00006354                 db  40h ; @
.rdata$r:00006355                 db    0
.rdata$r:00006356                 db    0
.rdata$r:00006357                 db    0
.rdata$r:00006358                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006358 _rdata$r        ends
.rdata$r:00006358
.data:0000635C ; ===========================================================================
.data:0000635C
.data:0000635C ; Segment type: Pure data
.data:0000635C ; Segment permissions: Read/Write
.data:0000635C _data           segment dword public 'DATA' use32
.data:0000635C                 assume cs:_data
.data:0000635C                 ;org 635Ch
.data:0000635C ; COMDAT (pick any)
.data:0000635C                 public ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8
.data:0000635C ; class NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.data:0000635C ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:0000635C                                         ; DATA XREF: .rdata$r:NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000635C                                         ; .rdata$r:00006928o ...
.data:0000635C                                         ; const type_info::`vftable'
.data:00006360                 db    0
.data:00006361                 db    0
.data:00006362                 db    0
.data:00006363                 db    0
.data:00006364                 db  2Eh ; .
.data:00006365                 db  3Fh ; ?
.data:00006366                 db  41h ; A
.data:00006367                 db  56h ; V
.data:00006368                 db  43h ; C
.data:00006369                 db  43h ; C
.data:0000636A                 db  6Fh ; o
.data:0000636B                 db  64h ; d
.data:0000636C                 db  65h ; e
.data:0000636D                 db  72h ; r
.data:0000636E                 db  40h ; @
.data:0000636F                 db  4Eh ; N
.data:00006370                 db  44h ; D
.data:00006371                 db  65h ; e
.data:00006372                 db  63h ; c
.data:00006373                 db  6Fh ; o
.data:00006374                 db  64h ; d
.data:00006375                 db  65h ; e
.data:00006376                 db  72h ; r
.data:00006377                 db  40h ; @
.data:00006378                 db  4Eh ; N
.data:00006379                 db  44h ; D
.data:0000637A                 db  65h ; e
.data:0000637B                 db  66h ; f
.data:0000637C                 db  6Ch ; l
.data:0000637D                 db  61h ; a
.data:0000637E                 db  74h ; t
.data:0000637F                 db  65h ; e
.data:00006380                 db  40h ; @
.data:00006381                 db  4Eh ; N
.data:00006382                 db  43h ; C
.data:00006383                 db  6Fh ; o
.data:00006384                 db  6Dh ; m
.data:00006385                 db  70h ; p
.data:00006386                 db  72h ; r
.data:00006387                 db  65h ; e
.data:00006388                 db  73h ; s
.data:00006389                 db  73h ; s
.data:0000638A                 db  40h ; @
.data:0000638B                 db  40h ; @
.data:0000638C                 db    0
.data:0000638D                 align 10h
.data:0000638D _data           ends
.data:0000638D
.rdata$r:00006390 ; ===========================================================================
.rdata$r:00006390
.rdata$r:00006390 ; Segment type: Pure data
.rdata$r:00006390 ; Segment permissions: Read
.rdata$r:00006390 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006390                 assume cs:_rdata$r
.rdata$r:00006390                 ;org 6390h
.rdata$r:00006390 ; COMDAT (pick any)
.rdata$r:00006390                 public ??_R3CCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:00006390 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006390 ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 db    0
.rdata$r:00006390                                         ; DATA XREF: .rdata$r:00006358o
.rdata$r:00006390                                         ; .rdata$r:0000692Co ...
.rdata$r:00006391                 db    0
.rdata$r:00006392                 db    0
.rdata$r:00006393                 db    0
.rdata$r:00006394                 db    5
.rdata$r:00006395                 db    0
.rdata$r:00006396                 db    0
.rdata$r:00006397                 db    0
.rdata$r:00006398                 db  0Ch
.rdata$r:00006399                 db    0
.rdata$r:0000639A                 db    0
.rdata$r:0000639B                 db    0
.rdata$r:0000639C                 dd offset ??_R2CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Array'
.rdata$r:0000639C _rdata$r        ends
.rdata$r:0000639C
.rdata$r:000063A0 ; ===========================================================================
.rdata$r:000063A0
.rdata$r:000063A0 ; Segment type: Pure data
.rdata$r:000063A0 ; Segment permissions: Read
.rdata$r:000063A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000063A0                 assume cs:_rdata$r
.rdata$r:000063A0                 ;org 63A0h
.rdata$r:000063A0 ; COMDAT (pick any)
.rdata$r:000063A0                 public ??_R2CCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:000063A0 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Array'
.rdata$r:000063A0 ??_R2CCoder@NDecoder@NDeflate@NCompress@@8 dd offset ??_R1A@?0A@EA@CCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:000063A0                                         ; DATA XREF: .rdata$r:0000639Co
.rdata$r:000063A0                                         ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000063A4                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000063A8                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:000063AC                 dd offset ??_R13?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000063B0                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:000063B4                 dd offset ??_R17?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:000063B8                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:000063BC                 dd offset ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:000063C0                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:000063C4                 dd offset ??_R1BA@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:000063C8                 dd offset ??_R1BA@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
.rdata$r:000063CC                 dd offset ??_R1BE@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (20,-1,0,64)'
.rdata$r:000063D0                 db    0
.rdata$r:000063D1                 align 4
.rdata$r:000063D1 _rdata$r        ends
.rdata$r:000063D1
.rdata$r:000063D4 ; ===========================================================================
.rdata$r:000063D4
.rdata$r:000063D4 ; Segment type: Pure data
.rdata$r:000063D4 ; Segment permissions: Read
.rdata$r:000063D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000063D4                 assume cs:_rdata$r
.rdata$r:000063D4                 ;org 63D4h
.rdata$r:000063D4 ; COMDAT (pick any)
.rdata$r:000063D4                 public ??_R13?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:000063D4 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:000063D4 ??_R13?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:000063D4                                         ; DATA XREF: .rdata$r:000062FCo
.rdata$r:000063D4                                         ; .rdata$r:000063ACo
.rdata$r:000063D4                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:000063D8                 db    1
.rdata$r:000063D9                 db    0
.rdata$r:000063DA                 db    0
.rdata$r:000063DB                 db    0
.rdata$r:000063DC                 db    4
.rdata$r:000063DD                 db    0
.rdata$r:000063DE                 db    0
.rdata$r:000063DF                 db    0
.rdata$r:000063E0                 db 0FFh
.rdata$r:000063E1                 db 0FFh
.rdata$r:000063E2                 db 0FFh
.rdata$r:000063E3                 db 0FFh
.rdata$r:000063E4                 db    0
.rdata$r:000063E5                 db    0
.rdata$r:000063E6                 db    0
.rdata$r:000063E7                 db    0
.rdata$r:000063E8                 db  40h ; @
.rdata$r:000063E9                 db    0
.rdata$r:000063EA                 db    0
.rdata$r:000063EB                 db    0
.rdata$r:000063EC                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000063EC _rdata$r        ends
.rdata$r:000063EC
.rdata$r:000063F0 ; ===========================================================================
.rdata$r:000063F0
.rdata$r:000063F0 ; Segment type: Pure data
.rdata$r:000063F0 ; Segment permissions: Read
.rdata$r:000063F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000063F0                 assume cs:_rdata$r
.rdata$r:000063F0                 ;org 63F0h
.rdata$r:000063F0 ; COMDAT (pick any)
.rdata$r:000063F0                 public ??_R17?0A@EA@ICompressSetInStream@@8
.rdata$r:000063F0 ; ICompressSetInStream::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:000063F0 ??_R17?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:000063F0                                         ; DATA XREF: .rdata$r:00006304o
.rdata$r:000063F0                                         ; .rdata$r:000063B4o
.rdata$r:000063F0                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:000063F4                 db    1
.rdata$r:000063F5                 db    0
.rdata$r:000063F6                 db    0
.rdata$r:000063F7                 db    0
.rdata$r:000063F8                 db    8
.rdata$r:000063F9                 db    0
.rdata$r:000063FA                 db    0
.rdata$r:000063FB                 db    0
.rdata$r:000063FC                 db 0FFh
.rdata$r:000063FD                 db 0FFh
.rdata$r:000063FE                 db 0FFh
.rdata$r:000063FF                 db 0FFh
.rdata$r:00006400                 db    0
.rdata$r:00006401                 db    0
.rdata$r:00006402                 db    0
.rdata$r:00006403                 db    0
.rdata$r:00006404                 db  40h ; @
.rdata$r:00006405                 db    0
.rdata$r:00006406                 db    0
.rdata$r:00006407                 db    0
.rdata$r:00006408                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006408 _rdata$r        ends
.rdata$r:00006408
.rdata$r:0000640C ; ===========================================================================
.rdata$r:0000640C
.rdata$r:0000640C ; Segment type: Pure data
.rdata$r:0000640C ; Segment permissions: Read
.rdata$r:0000640C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000640C                 assume cs:_rdata$r
.rdata$r:0000640C                 ;org 640Ch
.rdata$r:0000640C ; COMDAT (pick any)
.rdata$r:0000640C                 public ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:0000640C ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:0000640C ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:0000640C                                         ; DATA XREF: .rdata$r:0000630Co
.rdata$r:0000640C                                         ; .rdata$r:000063BCo
.rdata$r:0000640C                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:00006410                 db    1
.rdata$r:00006411                 db    0
.rdata$r:00006412                 db    0
.rdata$r:00006413                 db    0
.rdata$r:00006414                 db  0Ch
.rdata$r:00006415                 db    0
.rdata$r:00006416                 db    0
.rdata$r:00006417                 db    0
.rdata$r:00006418                 db 0FFh
.rdata$r:00006419                 db 0FFh
.rdata$r:0000641A                 db 0FFh
.rdata$r:0000641B                 db 0FFh
.rdata$r:0000641C                 db    0
.rdata$r:0000641D                 db    0
.rdata$r:0000641E                 db    0
.rdata$r:0000641F                 db    0
.rdata$r:00006420                 db  40h ; @
.rdata$r:00006421                 db    0
.rdata$r:00006422                 db    0
.rdata$r:00006423                 db    0
.rdata$r:00006424                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006424 _rdata$r        ends
.rdata$r:00006424
.data:00006428 ; ===========================================================================
.data:00006428
.data:00006428 ; Segment type: Pure data
.data:00006428 ; Segment permissions: Read/Write
.data:00006428 _data           segment dword public 'DATA' use32
.data:00006428                 assume cs:_data
.data:00006428                 ;org 6428h
.data:00006428 ; COMDAT (pick any)
.data:00006428                 public ??_R0?AUICompressSetOutStreamSize@@@8
.data:00006428 ; struct ICompressSetOutStreamSize `RTTI Type Descriptor'
.data:00006428 ??_R0?AUICompressSetOutStreamSize@@@8 dd offset ??_7type_info@@6B@
.data:00006428                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:00006428                                         ; .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00006428                                         ; const type_info::`vftable'
.data:0000642C                 align 10h
.data:00006430 a_?auicompresss db '.?AUICompressSetOutStreamSize@@',0
.data:00006430 _data           ends
.data:00006430
.rdata$r:00006450 ; ===========================================================================
.rdata$r:00006450
.rdata$r:00006450 ; Segment type: Pure data
.rdata$r:00006450 ; Segment permissions: Read
.rdata$r:00006450 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006450                 assume cs:_rdata$r
.rdata$r:00006450                 ;org 6450h
.rdata$r:00006450 ; COMDAT (pick any)
.rdata$r:00006450                 public ??_R3ICompressSetOutStreamSize@@8
.rdata$r:00006450 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006450 ??_R3ICompressSetOutStreamSize@@8 db    0 ; DATA XREF: .rdata$r:00006424o
.rdata$r:00006450                                         ; .rdata$r:00006484o
.rdata$r:00006451                 db    0
.rdata$r:00006452                 db    0
.rdata$r:00006453                 db    0
.rdata$r:00006454                 db    0
.rdata$r:00006455                 db    0
.rdata$r:00006456                 db    0
.rdata$r:00006457                 db    0
.rdata$r:00006458                 db    2
.rdata$r:00006459                 db    0
.rdata$r:0000645A                 db    0
.rdata$r:0000645B                 db    0
.rdata$r:0000645C                 dd offset ??_R2ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:0000645C _rdata$r        ends
.rdata$r:0000645C
.rdata$r:00006460 ; ===========================================================================
.rdata$r:00006460
.rdata$r:00006460 ; Segment type: Pure data
.rdata$r:00006460 ; Segment permissions: Read
.rdata$r:00006460 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006460                 assume cs:_rdata$r
.rdata$r:00006460                 ;org 6460h
.rdata$r:00006460 ; COMDAT (pick any)
.rdata$r:00006460                 public ??_R2ICompressSetOutStreamSize@@8
.rdata$r:00006460 ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:00006460 ??_R2ICompressSetOutStreamSize@@8 dd offset ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:00006460                                         ; DATA XREF: .rdata$r:0000645Co
.rdata$r:00006460                                         ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006464                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006468                 db    0
.rdata$r:00006469                 align 4
.rdata$r:00006469 _rdata$r        ends
.rdata$r:00006469
.rdata$r:0000646C ; ===========================================================================
.rdata$r:0000646C
.rdata$r:0000646C ; Segment type: Pure data
.rdata$r:0000646C ; Segment permissions: Read
.rdata$r:0000646C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000646C                 assume cs:_rdata$r
.rdata$r:0000646C                 ;org 646Ch
.rdata$r:0000646C ; COMDAT (pick any)
.rdata$r:0000646C                 public ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:0000646C ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000646C ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:0000646C                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Array'o
.rdata$r:0000646C                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:00006470                 db    1
.rdata$r:00006471                 db    0
.rdata$r:00006472                 db    0
.rdata$r:00006473                 db    0
.rdata$r:00006474                 db    0
.rdata$r:00006475                 db    0
.rdata$r:00006476                 db    0
.rdata$r:00006477                 db    0
.rdata$r:00006478                 db 0FFh
.rdata$r:00006479                 db 0FFh
.rdata$r:0000647A                 db 0FFh
.rdata$r:0000647B                 db 0FFh
.rdata$r:0000647C                 db    0
.rdata$r:0000647D                 db    0
.rdata$r:0000647E                 db    0
.rdata$r:0000647F                 db    0
.rdata$r:00006480                 db  40h ; @
.rdata$r:00006481                 db    0
.rdata$r:00006482                 db    0
.rdata$r:00006483                 db    0
.rdata$r:00006484                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006484 _rdata$r        ends
.rdata$r:00006484
.rdata$r:00006488 ; ===========================================================================
.rdata$r:00006488
.rdata$r:00006488 ; Segment type: Pure data
.rdata$r:00006488 ; Segment permissions: Read
.rdata$r:00006488 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006488                 assume cs:_rdata$r
.rdata$r:00006488                 ;org 6488h
.rdata$r:00006488 ; COMDAT (pick any)
.rdata$r:00006488                 public ??_R1BA@?0A@EA@ISequentialInStream@@8
.rdata$r:00006488 ; ISequentialInStream::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:00006488 ??_R1BA@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00006488                                         ; DATA XREF: .rdata$r:00006314o
.rdata$r:00006488                                         ; .rdata$r:000063C4o
.rdata$r:00006488                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:0000648C                 db    1
.rdata$r:0000648D                 db    0
.rdata$r:0000648E                 db    0
.rdata$r:0000648F                 db    0
.rdata$r:00006490                 db  10h
.rdata$r:00006491                 db    0
.rdata$r:00006492                 db    0
.rdata$r:00006493                 db    0
.rdata$r:00006494                 db 0FFh
.rdata$r:00006495                 db 0FFh
.rdata$r:00006496                 db 0FFh
.rdata$r:00006497                 db 0FFh
.rdata$r:00006498                 db    0
.rdata$r:00006499                 db    0
.rdata$r:0000649A                 db    0
.rdata$r:0000649B                 db    0
.rdata$r:0000649C                 db  40h ; @
.rdata$r:0000649D                 db    0
.rdata$r:0000649E                 db    0
.rdata$r:0000649F                 db    0
.rdata$r:000064A0                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000064A0 _rdata$r        ends
.rdata$r:000064A0
.rdata$r:000064A4 ; ===========================================================================
.rdata$r:000064A4
.rdata$r:000064A4 ; Segment type: Pure data
.rdata$r:000064A4 ; Segment permissions: Read
.rdata$r:000064A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000064A4                 assume cs:_rdata$r
.rdata$r:000064A4                 ;org 64A4h
.rdata$r:000064A4 ; COMDAT (pick any)
.rdata$r:000064A4                 public ??_R1BA@?0A@EC@IUnknown@@8
.rdata$r:000064A4 ; IUnknown::`RTTI Base Class Descriptor at (16, -1, 0, 66)'
.rdata$r:000064A4 ??_R1BA@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000064A4                                         ; DATA XREF: .rdata$r:00006318o
.rdata$r:000064A4                                         ; .rdata$r:000063C8o
.rdata$r:000064A4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000064A8                 db    0
.rdata$r:000064A9                 db    0
.rdata$r:000064AA                 db    0
.rdata$r:000064AB                 db    0
.rdata$r:000064AC                 db  10h
.rdata$r:000064AD                 db    0
.rdata$r:000064AE                 db    0
.rdata$r:000064AF                 db    0
.rdata$r:000064B0                 db 0FFh
.rdata$r:000064B1                 db 0FFh
.rdata$r:000064B2                 db 0FFh
.rdata$r:000064B3                 db 0FFh
.rdata$r:000064B4                 db    0
.rdata$r:000064B5                 db    0
.rdata$r:000064B6                 db    0
.rdata$r:000064B7                 db    0
.rdata$r:000064B8                 db  42h ; B
.rdata$r:000064B9                 db    0
.rdata$r:000064BA                 db    0
.rdata$r:000064BB                 db    0
.rdata$r:000064BC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000064BC _rdata$r        ends
.rdata$r:000064BC
.rdata$r:000064C0 ; ===========================================================================
.rdata$r:000064C0
.rdata$r:000064C0 ; Segment type: Pure data
.rdata$r:000064C0 ; Segment permissions: Read
.rdata$r:000064C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000064C0                 assume cs:_rdata$r
.rdata$r:000064C0                 ;org 64C0h
.rdata$r:000064C0 ; COMDAT (pick any)
.rdata$r:000064C0                 public ??_R1BE@?0A@EA@CMyUnknownImp@@8
.rdata$r:000064C0 ; CMyUnknownImp::`RTTI Base Class Descriptor at (20, -1, 0, 64)'
.rdata$r:000064C0 ??_R1BE@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000064C0                                         ; DATA XREF: .rdata$r:0000631Co
.rdata$r:000064C0                                         ; .rdata$r:000063CCo
.rdata$r:000064C0                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000064C4                 align 8
.rdata$r:000064C8                 db  14h
.rdata$r:000064C9                 db    0
.rdata$r:000064CA                 db    0
.rdata$r:000064CB                 db    0
.rdata$r:000064CC                 db 0FFh
.rdata$r:000064CD                 db 0FFh
.rdata$r:000064CE                 db 0FFh
.rdata$r:000064CF                 db 0FFh
.rdata$r:000064D0                 db    0
.rdata$r:000064D1                 db    0
.rdata$r:000064D2                 db    0
.rdata$r:000064D3                 db    0
.rdata$r:000064D4                 db  40h ; @
.rdata$r:000064D5                 db    0
.rdata$r:000064D6                 db    0
.rdata$r:000064D7                 db    0
.rdata$r:000064D8                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000064D8 _rdata$r        ends
.rdata$r:000064D8
.rdata$r:000064DC ; ===========================================================================
.rdata$r:000064DC
.rdata$r:000064DC ; Segment type: Pure data
.rdata$r:000064DC ; Segment permissions: Read
.rdata$r:000064DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000064DC                 assume cs:_rdata$r
.rdata$r:000064DC                 ;org 64DCh
.rdata$r:000064DC ; COMDAT (pick any)
.rdata$r:000064DC                 public ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata$r:000064DC ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata$r:000064DC ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ db    0
.rdata$r:000064DC                                         ; DATA XREF: .rdata:00006264o
.rdata$r:000064DD                 db    0
.rdata$r:000064DE                 db    0
.rdata$r:000064DF                 db    0
.rdata$r:000064E0                 db    4
.rdata$r:000064E1                 db    0
.rdata$r:000064E2                 db    0
.rdata$r:000064E3                 db    0
.rdata$r:000064E4                 db    0
.rdata$r:000064E5                 db    0
.rdata$r:000064E6                 db    0
.rdata$r:000064E7                 db    0
.rdata$r:000064E8                 dd offset ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:000064EC                 dd offset ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000064EC _rdata$r        ends
.rdata$r:000064EC
.rdata$r:000064F0 ; ===========================================================================
.rdata$r:000064F0
.rdata$r:000064F0 ; Segment type: Pure data
.rdata$r:000064F0 ; Segment permissions: Read
.rdata$r:000064F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000064F0                 assume cs:_rdata$r
.rdata$r:000064F0                 ;org 64F0h
.rdata$r:000064F0 ; COMDAT (pick any)
.rdata$r:000064F0                 public ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@
.rdata$r:000064F0 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:000064F0 ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:000064F0                                         ; DATA XREF: .rdata:0000624Co
.rdata$r:000064F1                 db    0
.rdata$r:000064F2                 db    0
.rdata$r:000064F3                 db    0
.rdata$r:000064F4                 db    8
.rdata$r:000064F5                 db    0
.rdata$r:000064F6                 db    0
.rdata$r:000064F7                 db    0
.rdata$r:000064F8                 db    0
.rdata$r:000064F9                 db    0
.rdata$r:000064FA                 db    0
.rdata$r:000064FB                 db    0
.rdata$r:000064FC                 dd offset ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:00006500                 dd offset ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006500 _rdata$r        ends
.rdata$r:00006500
.rdata$r:00006504 ; ===========================================================================
.rdata$r:00006504
.rdata$r:00006504 ; Segment type: Pure data
.rdata$r:00006504 ; Segment permissions: Read
.rdata$r:00006504 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006504                 assume cs:_rdata$r
.rdata$r:00006504                 ;org 6504h
.rdata$r:00006504 ; COMDAT (pick any)
.rdata$r:00006504                 public ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@
.rdata$r:00006504 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata$r:00006504 ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ db    0
.rdata$r:00006504                                         ; DATA XREF: .rdata:00006238o
.rdata$r:00006505                 db    0
.rdata$r:00006506                 db    0
.rdata$r:00006507                 db    0
.rdata$r:00006508                 db  0Ch
.rdata$r:00006509                 db    0
.rdata$r:0000650A                 db    0
.rdata$r:0000650B                 db    0
.rdata$r:0000650C                 db    0
.rdata$r:0000650D                 db    0
.rdata$r:0000650E                 db    0
.rdata$r:0000650F                 db    0
.rdata$r:00006510                 dd offset ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:00006514                 dd offset ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006514 _rdata$r        ends
.rdata$r:00006514
.rdata$r:00006518 ; ===========================================================================
.rdata$r:00006518
.rdata$r:00006518 ; Segment type: Pure data
.rdata$r:00006518 ; Segment permissions: Read
.rdata$r:00006518 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006518                 assume cs:_rdata$r
.rdata$r:00006518                 ;org 6518h
.rdata$r:00006518 ; COMDAT (pick any)
.rdata$r:00006518                 public ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@
.rdata$r:00006518 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:00006518 ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:00006518                                         ; DATA XREF: .rdata:00006224o
.rdata$r:00006519                 db    0
.rdata$r:0000651A                 db    0
.rdata$r:0000651B                 db    0
.rdata$r:0000651C                 db  10h
.rdata$r:0000651D                 db    0
.rdata$r:0000651E                 db    0
.rdata$r:0000651F                 db    0
.rdata$r:00006520                 db    0
.rdata$r:00006521                 db    0
.rdata$r:00006522                 db    0
.rdata$r:00006523                 db    0
.rdata$r:00006524                 dd offset ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:00006528                 dd offset ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006528 _rdata$r        ends
.rdata$r:00006528
.text:0000652C ; ===========================================================================
.text:0000652C
.text:0000652C ; Segment type: Pure code
.text:0000652C ; Segment permissions: Read/Execute
.text:0000652C _text           segment para public 'CODE' use32
.text:0000652C                 assume cs:_text
.text:0000652C                 ;org 652Ch
.text:0000652C ; COMDAT (pick any)
.text:0000652C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000652C
.text:0000652C ; =============== S U B R O U T I N E =======================================
.text:0000652C
.text:0000652C ; Attributes: bp-based frame
.text:0000652C
.text:0000652C ; __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface(NCompress::NDeflate::NDecoder::CCoder *this, const struct _GUID *Buf1, void **)
.text:0000652C                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:0000652C ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:0000652C                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:0000652C                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:0000652C
.text:0000652C var_14          = dword ptr -14h
.text:0000652C var_10          = dword ptr -10h
.text:0000652C var_C           = dword ptr -0Ch
.text:0000652C var_8           = dword ptr -8
.text:0000652C var_4           = dword ptr -4
.text:0000652C this            = dword ptr  8
.text:0000652C Buf1            = dword ptr  0Ch
.text:0000652C arg_8           = dword ptr  10h
.text:0000652C
.text:0000652C                 push    ebp
.text:0000652D                 mov     ebp, esp
.text:0000652F                 sub     esp, 14h
.text:00006532                 mov     eax, 0CCCCCCCCh
.text:00006537                 mov     [ebp+var_14], eax
.text:0000653A                 mov     [ebp+var_10], eax
.text:0000653D                 mov     [ebp+var_C], eax
.text:00006540                 mov     [ebp+var_8], eax
.text:00006543                 mov     [ebp+var_4], eax
.text:00006546                 mov     eax, [ebp+arg_8]
.text:00006549                 mov     dword ptr [eax], 0
.text:0000654F                 push    offset _IID_IUnknown ; Buf2
.text:00006554                 mov     ecx, [ebp+Buf1]
.text:00006557                 push    ecx             ; Buf1
.text:00006558                 call    ___@8           ; __(x,x)
.text:0000655D                 test    eax, eax
.text:0000655F                 jz      short loc_6586
.text:00006561                 cmp     [ebp+this], 0
.text:00006565                 jz      short loc_6572
.text:00006567                 mov     edx, [ebp+this]
.text:0000656A                 add     edx, 4
.text:0000656D                 mov     [ebp+var_4], edx
.text:00006570                 jmp     short loc_6579
.text:00006572 ; ---------------------------------------------------------------------------
.text:00006572
.text:00006572 loc_6572:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+39j
.text:00006572                 mov     [ebp+var_4], 0
.text:00006579
.text:00006579 loc_6579:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+44j
.text:00006579                 mov     eax, [ebp+arg_8]
.text:0000657C                 mov     ecx, [ebp+var_4]
.text:0000657F                 mov     [eax], ecx
.text:00006581                 jmp     loc_6660
.text:00006586 ; ---------------------------------------------------------------------------
.text:00006586
.text:00006586 loc_6586:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+33j
.text:00006586                 push    offset _IID_ICompressGetInStreamProcessedSize ; Buf2
.text:0000658B                 mov     edx, [ebp+Buf1]
.text:0000658E                 push    edx             ; Buf1
.text:0000658F                 call    ___@8           ; __(x,x)
.text:00006594                 test    eax, eax
.text:00006596                 jz      short loc_65BD
.text:00006598                 cmp     [ebp+this], 0
.text:0000659C                 jz      short loc_65A9
.text:0000659E                 mov     eax, [ebp+this]
.text:000065A1                 add     eax, 4
.text:000065A4                 mov     [ebp+var_8], eax
.text:000065A7                 jmp     short loc_65B0
.text:000065A9 ; ---------------------------------------------------------------------------
.text:000065A9
.text:000065A9 loc_65A9:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+70j
.text:000065A9                 mov     [ebp+var_8], 0
.text:000065B0
.text:000065B0 loc_65B0:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+7Bj
.text:000065B0                 mov     ecx, [ebp+arg_8]
.text:000065B3                 mov     edx, [ebp+var_8]
.text:000065B6                 mov     [ecx], edx
.text:000065B8                 jmp     loc_6660
.text:000065BD ; ---------------------------------------------------------------------------
.text:000065BD
.text:000065BD loc_65BD:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+6Aj
.text:000065BD                 push    offset _IID_ICompressSetInStream ; Buf2
.text:000065C2                 mov     eax, [ebp+Buf1]
.text:000065C5                 push    eax             ; Buf1
.text:000065C6                 call    ___@8           ; __(x,x)
.text:000065CB                 test    eax, eax
.text:000065CD                 jz      short loc_65F1
.text:000065CF                 cmp     [ebp+this], 0
.text:000065D3                 jz      short loc_65E0
.text:000065D5                 mov     ecx, [ebp+this]
.text:000065D8                 add     ecx, 8
.text:000065DB                 mov     [ebp+var_C], ecx
.text:000065DE                 jmp     short loc_65E7
.text:000065E0 ; ---------------------------------------------------------------------------
.text:000065E0
.text:000065E0 loc_65E0:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+A7j
.text:000065E0                 mov     [ebp+var_C], 0
.text:000065E7
.text:000065E7 loc_65E7:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+B2j
.text:000065E7                 mov     edx, [ebp+arg_8]
.text:000065EA                 mov     eax, [ebp+var_C]
.text:000065ED                 mov     [edx], eax
.text:000065EF                 jmp     short loc_6660
.text:000065F1 ; ---------------------------------------------------------------------------
.text:000065F1
.text:000065F1 loc_65F1:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+A1j
.text:000065F1                 push    offset _IID_ICompressSetOutStreamSize ; Buf2
.text:000065F6                 mov     ecx, [ebp+Buf1]
.text:000065F9                 push    ecx             ; Buf1
.text:000065FA                 call    ___@8           ; __(x,x)
.text:000065FF                 test    eax, eax
.text:00006601                 jz      short loc_6625
.text:00006603                 cmp     [ebp+this], 0
.text:00006607                 jz      short loc_6614
.text:00006609                 mov     edx, [ebp+this]
.text:0000660C                 add     edx, 0Ch
.text:0000660F                 mov     [ebp+var_10], edx
.text:00006612                 jmp     short loc_661B
.text:00006614 ; ---------------------------------------------------------------------------
.text:00006614
.text:00006614 loc_6614:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+DBj
.text:00006614                 mov     [ebp+var_10], 0
.text:0000661B
.text:0000661B loc_661B:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+E6j
.text:0000661B                 mov     eax, [ebp+arg_8]
.text:0000661E                 mov     ecx, [ebp+var_10]
.text:00006621                 mov     [eax], ecx
.text:00006623                 jmp     short loc_6660
.text:00006625 ; ---------------------------------------------------------------------------
.text:00006625
.text:00006625 loc_6625:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+D5j
.text:00006625                 push    offset _IID_ISequentialInStream ; Buf2
.text:0000662A                 mov     edx, [ebp+Buf1]
.text:0000662D                 push    edx             ; Buf1
.text:0000662E                 call    ___@8           ; __(x,x)
.text:00006633                 test    eax, eax
.text:00006635                 jz      short loc_6659
.text:00006637                 cmp     [ebp+this], 0
.text:0000663B                 jz      short loc_6648
.text:0000663D                 mov     eax, [ebp+this]
.text:00006640                 add     eax, 10h
.text:00006643                 mov     [ebp+var_14], eax
.text:00006646                 jmp     short loc_664F
.text:00006648 ; ---------------------------------------------------------------------------
.text:00006648
.text:00006648 loc_6648:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+10Fj
.text:00006648                 mov     [ebp+var_14], 0
.text:0000664F
.text:0000664F loc_664F:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+11Aj
.text:0000664F                 mov     ecx, [ebp+arg_8]
.text:00006652                 mov     edx, [ebp+var_14]
.text:00006655                 mov     [ecx], edx
.text:00006657                 jmp     short loc_6660
.text:00006659 ; ---------------------------------------------------------------------------
.text:00006659
.text:00006659 loc_6659:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+109j
.text:00006659                 mov     eax, 80004002h
.text:0000665E                 jmp     short loc_6671
.text:00006660 ; ---------------------------------------------------------------------------
.text:00006660
.text:00006660 loc_6660:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+55j
.text:00006660                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+8Cj ...
.text:00006660                 mov     eax, [ebp+this]
.text:00006663                 mov     ecx, [eax+14h]
.text:00006666                 add     ecx, 1
.text:00006669                 mov     edx, [ebp+this]
.text:0000666C                 mov     [edx+14h], ecx
.text:0000666F                 xor     eax, eax
.text:00006671
.text:00006671 loc_6671:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+132j
.text:00006671                 add     esp, 14h
.text:00006674                 cmp     ebp, esp
.text:00006676                 call    __RTC_CheckEsp
.text:0000667B                 mov     esp, ebp
.text:0000667D                 pop     ebp
.text:0000667E                 retn    0Ch
.text:0000667E ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000667E
.text:0000667E ; ---------------------------------------------------------------------------
.text:00006681                 align 4
.text:00006681 _text           ends
.text:00006681
.text:00006684 ; ===========================================================================
.text:00006684
.text:00006684 ; Segment type: Pure code
.text:00006684 ; Segment permissions: Read/Execute
.text:00006684 _text           segment para public 'CODE' use32
.text:00006684                 assume cs:_text
.text:00006684                 ;org 6684h
.text:00006684 ; COMDAT (pick any)
.text:00006684                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006684
.text:00006684 ; =============== S U B R O U T I N E =======================================
.text:00006684
.text:00006684 ; Attributes: bp-based frame
.text:00006684
.text:00006684 ; unsigned __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef(NCompress::NDeflate::NDecoder::CCoder *this)
.text:00006684                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ
.text:00006684 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ proc near
.text:00006684                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{4}' (void)+5j
.text:00006684                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{8}' (void)+5j ...
.text:00006684
.text:00006684 var_4           = dword ptr -4
.text:00006684 this            = dword ptr  8
.text:00006684
.text:00006684                 push    ebp
.text:00006685                 mov     ebp, esp
.text:00006687                 push    ecx
.text:00006688                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000668F                 mov     eax, [ebp+this]
.text:00006692                 mov     ecx, [eax+14h]
.text:00006695                 add     ecx, 1
.text:00006698                 mov     [ebp+var_4], ecx
.text:0000669B                 mov     edx, [ebp+this]
.text:0000669E                 mov     eax, [ebp+var_4]
.text:000066A1                 mov     [edx+14h], eax
.text:000066A4                 mov     eax, [ebp+var_4]
.text:000066A7                 mov     esp, ebp
.text:000066A9                 pop     ebp
.text:000066AA                 retn    4
.text:000066AA ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ endp
.text:000066AA
.text:000066AA ; ---------------------------------------------------------------------------
.text:000066AD                 align 10h
.text:000066AD _text           ends
.text:000066AD
.text:000066B0 ; ===========================================================================
.text:000066B0
.text:000066B0 ; Segment type: Pure code
.text:000066B0 ; Segment permissions: Read/Execute
.text:000066B0 _text           segment para public 'CODE' use32
.text:000066B0                 assume cs:_text
.text:000066B0                 ;org 66B0h
.text:000066B0 ; COMDAT (pick any)
.text:000066B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000066B0
.text:000066B0 ; =============== S U B R O U T I N E =======================================
.text:000066B0
.text:000066B0 ; Attributes: bp-based frame
.text:000066B0
.text:000066B0 ; unsigned __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::Release(NCompress::NDeflate::NDecoder::CCoder *this)
.text:000066B0                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ
.text:000066B0 ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ proc near
.text:000066B0                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{12}' (void)+5j
.text:000066B0                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{16}' (void)+5j ...
.text:000066B0
.text:000066B0 var_10          = dword ptr -10h
.text:000066B0 var_C           = dword ptr -0Ch
.text:000066B0 var_8           = dword ptr -8
.text:000066B0 var_4           = dword ptr -4
.text:000066B0 this            = dword ptr  8
.text:000066B0
.text:000066B0                 push    ebp
.text:000066B1                 mov     ebp, esp
.text:000066B3                 sub     esp, 10h
.text:000066B6                 push    esi
.text:000066B7                 mov     eax, 0CCCCCCCCh
.text:000066BC                 mov     [ebp+var_10], eax
.text:000066BF                 mov     [ebp+var_C], eax
.text:000066C2                 mov     [ebp+var_8], eax
.text:000066C5                 mov     [ebp+var_4], eax
.text:000066C8                 mov     eax, [ebp+this]
.text:000066CB                 mov     ecx, [eax+14h]
.text:000066CE                 sub     ecx, 1
.text:000066D1                 mov     [ebp+var_C], ecx
.text:000066D4                 mov     edx, [ebp+this]
.text:000066D7                 mov     eax, [ebp+var_C]
.text:000066DA                 mov     [edx+14h], eax
.text:000066DD                 cmp     [ebp+var_C], 0
.text:000066E1                 jz      short loc_66EB
.text:000066E3                 mov     ecx, [ebp+this]
.text:000066E6                 mov     eax, [ecx+14h]
.text:000066E9                 jmp     short loc_6723
.text:000066EB ; ---------------------------------------------------------------------------
.text:000066EB
.text:000066EB loc_66EB:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Release(void)+31j
.text:000066EB                 mov     edx, [ebp+this]
.text:000066EE                 mov     [ebp+var_8], edx
.text:000066F1                 mov     eax, [ebp+var_8]
.text:000066F4                 mov     [ebp+var_4], eax
.text:000066F7                 cmp     [ebp+var_4], 0
.text:000066FB                 jz      short loc_671A
.text:000066FD                 mov     esi, esp
.text:000066FF                 push    1
.text:00006701                 mov     ecx, [ebp+var_4]
.text:00006704                 mov     edx, [ecx]
.text:00006706                 mov     ecx, [ebp+var_4]
.text:00006709                 mov     eax, [edx+10h]
.text:0000670C                 call    eax
.text:0000670E                 cmp     esi, esp
.text:00006710                 call    __RTC_CheckEsp
.text:00006715                 mov     [ebp+var_10], eax
.text:00006718                 jmp     short loc_6721
.text:0000671A ; ---------------------------------------------------------------------------
.text:0000671A
.text:0000671A loc_671A:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Release(void)+4Bj
.text:0000671A                 mov     [ebp+var_10], 0
.text:00006721
.text:00006721 loc_6721:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Release(void)+68j
.text:00006721                 xor     eax, eax
.text:00006723
.text:00006723 loc_6723:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Release(void)+39j
.text:00006723                 pop     esi
.text:00006724                 add     esp, 10h
.text:00006727                 cmp     ebp, esp
.text:00006729                 call    __RTC_CheckEsp
.text:0000672E                 mov     esp, ebp
.text:00006730                 pop     ebp
.text:00006731                 retn    4
.text:00006731 ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ endp
.text:00006731
.text:00006731 _text           ends
.text:00006731
.text:00006734 ; ===========================================================================
.text:00006734
.text:00006734 ; Segment type: Pure code
.text:00006734 ; Segment permissions: Read/Execute
.text:00006734 _text           segment para public 'CODE' use32
.text:00006734                 assume cs:_text
.text:00006734                 ;org 6734h
.text:00006734 ; COMDAT (pick any)
.text:00006734                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006734
.text:00006734 ; =============== S U B R O U T I N E =======================================
.text:00006734
.text:00006734 ; Attributes: bp-based frame
.text:00006734
.text:00006734 ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCOMCoder::`scalar deleting destructor'(unsigned int)
.text:00006734                 public ??_GCCOMCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z
.text:00006734 ??_GCCOMCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z proc near
.text:00006734
.text:00006734 var_4           = dword ptr -4
.text:00006734 arg_0           = dword ptr  8
.text:00006734
.text:00006734                 push    ebp
.text:00006735                 mov     ebp, esp
.text:00006737                 push    ecx
.text:00006738                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000673F                 mov     [ebp+var_4], ecx
.text:00006742                 mov     ecx, [ebp+var_4] ; this
.text:00006745                 call    ??1CCOMCoder@NDecoder@NDeflate@NCompress@@UAE@XZ ; NCompress::NDeflate::NDecoder::CCOMCoder::~CCOMCoder(void)
.text:0000674A                 mov     eax, [ebp+arg_0]
.text:0000674D                 and     eax, 1
.text:00006750                 jz      short loc_675E
.text:00006752                 mov     ecx, [ebp+var_4]
.text:00006755                 push    ecx             ; void *
.text:00006756                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000675B                 add     esp, 4
.text:0000675E
.text:0000675E loc_675E:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCOMCoder::`scalar deleting destructor'(uint)+1Cj
.text:0000675E                 mov     eax, [ebp+var_4]
.text:00006761                 add     esp, 4
.text:00006764                 cmp     ebp, esp
.text:00006766                 call    __RTC_CheckEsp
.text:0000676B                 mov     esp, ebp
.text:0000676D                 pop     ebp
.text:0000676E                 retn    4
.text:0000676E ??_GCCOMCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z endp
.text:0000676E
.text:0000676E ; ---------------------------------------------------------------------------
.text:00006771                 align 4
.text:00006771 _text           ends
.text:00006771
.text:00006774 ; ===========================================================================
.text:00006774
.text:00006774 ; Segment type: Pure code
.text:00006774 ; Segment permissions: Read/Execute
.text:00006774 _text           segment para public 'CODE' use32
.text:00006774                 assume cs:_text
.text:00006774                 ;org 6774h
.text:00006774 ; COMDAT (pick any)
.text:00006774                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006774
.text:00006774 ; =============== S U B R O U T I N E =======================================
.text:00006774
.text:00006774 ; Attributes: bp-based frame
.text:00006774
.text:00006774 ; _DWORD __thiscall NCompress::NDeflate::NDecoder::CCOMCoder::~CCOMCoder(NCompress::NDeflate::NDecoder::CCOMCoder *__hidden this)
.text:00006774                 public ??1CCOMCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.text:00006774 ??1CCOMCoder@NDecoder@NDeflate@NCompress@@UAE@XZ proc near
.text:00006774                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCOMCoder::`scalar deleting destructor'(uint)+11p
.text:00006774
.text:00006774 var_4           = dword ptr -4
.text:00006774
.text:00006774                 push    ebp
.text:00006775                 mov     ebp, esp
.text:00006777                 push    ecx
.text:00006778                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000677F                 mov     [ebp+var_4], ecx
.text:00006782                 mov     ecx, [ebp+var_4] ; this
.text:00006785                 call    ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ ; NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)
.text:0000678A                 add     esp, 4
.text:0000678D                 cmp     ebp, esp
.text:0000678F                 call    __RTC_CheckEsp
.text:00006794                 mov     esp, ebp
.text:00006796                 pop     ebp
.text:00006797                 retn
.text:00006797 ??1CCOMCoder@NDecoder@NDeflate@NCompress@@UAE@XZ endp
.text:00006797
.text:00006797 _text           ends
.text:00006797
.text:00006798 ; ===========================================================================
.text:00006798
.text:00006798 ; Segment type: Pure code
.text:00006798 ; Segment permissions: Read/Execute
.text:00006798 _text           segment para public 'CODE' use32
.text:00006798                 assume cs:_text
.text:00006798                 ;org 6798h
.text:00006798 ; COMDAT (pick any)
.text:00006798                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006798
.text:00006798 ; =============== S U B R O U T I N E =======================================
.text:00006798
.text:00006798 ; Attributes: bp-based frame
.text:00006798
.text:00006798 ; _DWORD __thiscall NCompress::NDeflate::NDecoder::CCoder::~CCoder(NCompress::NDeflate::NDecoder::CCoder *__hidden this)
.text:00006798                 public ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.text:00006798 ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ proc near
.text:00006798                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCOMCoder::~CCOMCoder(void)+11p
.text:00006798                                         ; NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(uint)+11p
.text:00006798
.text:00006798 var_10          = dword ptr -10h
.text:00006798 var_C           = dword ptr -0Ch
.text:00006798 var_4           = dword ptr -4
.text:00006798
.text:00006798                 push    ebp
.text:00006799                 mov     ebp, esp
.text:0000679B                 push    0FFFFFFFFh
.text:0000679D                 push    offset __ehhandler$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.text:000067A2                 mov     eax, large fs:0
.text:000067A8                 push    eax
.text:000067A9                 push    ecx
.text:000067AA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000067B1                 mov     eax, dword ptr ds:___security_cookie
.text:000067B6                 xor     eax, ebp
.text:000067B8                 push    eax
.text:000067B9                 lea     eax, [ebp+var_C]
.text:000067BC                 mov     large fs:0, eax
.text:000067C2                 mov     [ebp+var_10], ecx
.text:000067C5                 mov     eax, [ebp+var_10]
.text:000067C8                 mov     dword ptr [eax], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressCoder'}
.text:000067CE                 mov     ecx, [ebp+var_10]
.text:000067D1                 mov     dword ptr [ecx+4], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:000067D8                 mov     edx, [ebp+var_10]
.text:000067DB                 mov     dword ptr [edx+8], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetInStream'}
.text:000067E2                 mov     eax, [ebp+var_10]
.text:000067E5                 mov     dword ptr [eax+0Ch], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetOutStreamSize'}
.text:000067EC                 mov     ecx, [ebp+var_10]
.text:000067EF                 mov     dword ptr [ecx+10h], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ISequentialInStream'}
.text:000067F6                 mov     [ebp+var_4], 1
.text:000067FD                 mov     ecx, [ebp+var_10]
.text:00006800                 add     ecx, 48h ; 'H'
.text:00006803                 call    ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CDecoder<CInBuffer>::~CDecoder<CInBuffer>(void)
.text:00006808                 mov     byte ptr [ebp+var_4], 0
.text:0000680C                 mov     ecx, [ebp+var_10]
.text:0000680F                 add     ecx, 40h ; '@'
.text:00006812                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00006817                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000681E                 mov     ecx, [ebp+var_10]
.text:00006821                 add     ecx, 18h        ; this
.text:00006824                 call    ??1CLzOutWindow@@QAE@XZ ; CLzOutWindow::~CLzOutWindow(void)
.text:00006829                 mov     ecx, [ebp+var_C]
.text:0000682C                 mov     large fs:0, ecx
.text:00006833                 pop     ecx
.text:00006834                 add     esp, 10h
.text:00006837                 cmp     ebp, esp
.text:00006839                 call    __RTC_CheckEsp
.text:0000683E                 mov     esp, ebp
.text:00006840                 pop     ebp
.text:00006841                 retn
.text:00006841 ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ endp
.text:00006841
.text:00006841 ; ---------------------------------------------------------------------------
.text:00006842                 align 4
.text:00006842 _text           ends
.text:00006842
.text$x:00006844 ; ===========================================================================
.text$x:00006844
.text$x:00006844 ; Segment type: Pure code
.text$x:00006844 ; Segment permissions: Read/Execute
.text$x:00006844 _text$x         segment para public 'CODE' use32
.text$x:00006844                 assume cs:_text$x
.text$x:00006844                 ;org 6844h
.text$x:00006844 ; COMDAT (pick associative to section at 6798)
.text$x:00006844                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006844
.text$x:00006844 ; =============== S U B R O U T I N E =======================================
.text$x:00006844
.text$x:00006844
.text$x:00006844 __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$0 proc near
.text$x:00006844                                         ; DATA XREF: .xdata$x:000068ECo
.text$x:00006844                 mov     ecx, [ebp-10h]
.text$x:00006847                 add     ecx, 18h        ; this
.text$x:0000684A                 jmp     ??1CLzOutWindow@@QAE@XZ ; CLzOutWindow::~CLzOutWindow(void)
.text$x:0000684A __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$0 endp
.text$x:0000684A
.text$x:0000684F
.text$x:0000684F ; =============== S U B R O U T I N E =======================================
.text$x:0000684F
.text$x:0000684F
.text$x:0000684F __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$1 proc near
.text$x:0000684F                                         ; DATA XREF: .xdata$x:000068F4o
.text$x:0000684F                 mov     ecx, [ebp-10h]
.text$x:00006852                 add     ecx, 40h ; '@'
.text$x:00006855                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00006855 __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$1 endp
.text$x:00006855
.text$x:0000685A
.text$x:0000685A ; =============== S U B R O U T I N E =======================================
.text$x:0000685A
.text$x:0000685A
.text$x:0000685A __ehhandler$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ proc near
.text$x:0000685A                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+5o
.text$x:0000685A
.text$x:0000685A arg_4           = dword ptr  8
.text$x:0000685A
.text$x:0000685A                 mov     edx, [esp+arg_4]
.text$x:0000685E                 lea     eax, [edx+0Ch]
.text$x:00006861                 mov     ecx, [edx-8]
.text$x:00006864                 xor     ecx, eax
.text$x:00006866                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000686B                 mov     eax, offset __ehfuncinfo$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.text$x:00006870                 jmp     ___CxxFrameHandler3
.text$x:00006870 __ehhandler$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ endp
.text$x:00006870
.text$x:00006870 ; ---------------------------------------------------------------------------
.text$x:00006875                 align 4
.text$x:00006875 _text$x         ends
.text$x:00006875
.rdata:00006878 ; ===========================================================================
.rdata:00006878
.rdata:00006878 ; Segment type: Pure data
.rdata:00006878 ; Segment permissions: Read
.rdata:00006878 _rdata          segment dword public 'DATA' use32
.rdata:00006878                 assume cs:_rdata
.rdata:00006878                 ;org 6878h
.rdata:00006878 ; COMDAT (pick largest)
.rdata:00006878                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:0000687C                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@
.rdata:0000687C ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ISequentialInStream'}
.rdata:0000687C ??_7CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.rdata:0000687C                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+57o
.rdata:0000687C                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{16}' (_GUID const &,void * *)
.rdata:00006880                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{16}' (void)
.rdata:00006884                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{16}' (void)
.rdata:00006888                 dd offset ?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z ; NCompress::NDeflate::NDecoder::CCoder::Read(void *,uint,uint *)
.rdata:00006888 _rdata          ends
.rdata:00006888
.rdata:0000688C ; ===========================================================================
.rdata:0000688C
.rdata:0000688C ; Segment type: Pure data
.rdata:0000688C ; Segment permissions: Read
.rdata:0000688C _rdata          segment dword public 'DATA' use32
.rdata:0000688C                 assume cs:_rdata
.rdata:0000688C                 ;org 688Ch
.rdata:0000688C ; COMDAT (pick largest)
.rdata:0000688C                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata:00006890                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@
.rdata:00006890 ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetOutStreamSize'}
.rdata:00006890 ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00006890                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+4Do
.rdata:00006890                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00006894                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{12}' (void)
.rdata:00006898                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{12}' (void)
.rdata:0000689C                 dd offset ?SetOutStreamSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPB_K@Z ; NCompress::NDeflate::NDecoder::CCoder::SetOutStreamSize(unsigned __int64 const *)
.rdata:0000689C _rdata          ends
.rdata:0000689C
.rdata:000068A0 ; ===========================================================================
.rdata:000068A0
.rdata:000068A0 ; Segment type: Pure data
.rdata:000068A0 ; Segment permissions: Read
.rdata:000068A0 _rdata          segment dword public 'DATA' use32
.rdata:000068A0                 assume cs:_rdata
.rdata:000068A0                 ;org 68A0h
.rdata:000068A0 ; COMDAT (pick largest)
.rdata:000068A0                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:000068A4                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@
.rdata:000068A4 ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetInStream'}
.rdata:000068A4 ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:000068A4                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+43o
.rdata:000068A4                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:000068A8                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{8}' (void)
.rdata:000068AC                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{8}' (void)
.rdata:000068B0                 dd offset ?SetInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::NDeflate::NDecoder::CCoder::SetInStream(ISequentialInStream *)
.rdata:000068B4                 dd offset ?ReleaseInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJXZ ; NCompress::NDeflate::NDecoder::CCoder::ReleaseInStream(void)
.rdata:000068B4 _rdata          ends
.rdata:000068B4
.rdata:000068B8 ; ===========================================================================
.rdata:000068B8
.rdata:000068B8 ; Segment type: Pure data
.rdata:000068B8 ; Segment permissions: Read
.rdata:000068B8 _rdata          segment dword public 'DATA' use32
.rdata:000068B8                 assume cs:_rdata
.rdata:000068B8                 ;org 68B8h
.rdata:000068B8 ; COMDAT (pick largest)
.rdata:000068B8                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata:000068BC                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata:000068BC ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.rdata:000068BC ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:000068BC                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+39o
.rdata:000068BC                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:000068C0                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{4}' (void)
.rdata:000068C4                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{4}' (void)
.rdata:000068C8                 dd offset ?GetInStreamProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPA_K@Z ; NCompress::NDeflate::NDecoder::CCoder::GetInStreamProcessedSize(unsigned __int64 *)
.rdata:000068C8 _rdata          ends
.rdata:000068C8
.rdata:000068CC ; ===========================================================================
.rdata:000068CC
.rdata:000068CC ; Segment type: Pure data
.rdata:000068CC ; Segment permissions: Read
.rdata:000068CC _rdata          segment dword public 'DATA' use32
.rdata:000068CC                 assume cs:_rdata
.rdata:000068CC                 ;org 68CCh
.rdata:000068CC ; COMDAT (pick largest)
.rdata:000068CC                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:000068D0                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata:000068D0 ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressCoder'}
.rdata:000068D0 ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:000068D0                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+30o
.rdata:000068D0                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.rdata:000068D4                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.rdata:000068D8                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.rdata:000068DC                 dd offset ?Code@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NDecoder::CCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:000068E0                 dd offset ??_ECCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z ; NCompress::NDeflate::NDecoder::CCoder::`vector deleting destructor'(uint)
.rdata:000068E4                 dd offset ?CodeResume@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NDecoder::CCoder::CodeResume(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:000068E4 _rdata          ends
.rdata:000068E4
.xdata$x:000068E8 ; ===========================================================================
.xdata$x:000068E8
.xdata$x:000068E8 ; Segment type: Pure data
.xdata$x:000068E8 ; Segment permissions: Read
.xdata$x:000068E8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000068E8                 assume cs:_xdata$x
.xdata$x:000068E8                 ;org 68E8h
.xdata$x:000068E8 ; COMDAT (pick associative to section at 6798)
.xdata$x:000068E8 __unwindtable$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ db 0FFh
.xdata$x:000068E8                                         ; DATA XREF: .xdata$x:00006900o
.xdata$x:000068E9                 db 0FFh
.xdata$x:000068EA                 db 0FFh
.xdata$x:000068EB                 db 0FFh
.xdata$x:000068EC                 dd offset __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$0
.xdata$x:000068F0                 db    0
.xdata$x:000068F1                 db    0
.xdata$x:000068F2                 db    0
.xdata$x:000068F3                 db    0
.xdata$x:000068F4                 dd offset __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$1
.xdata$x:000068F8 __ehfuncinfo$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ db  22h ; "
.xdata$x:000068F8                                         ; DATA XREF: __ehhandler$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ+11o
.xdata$x:000068F9                 db    5
.xdata$x:000068FA                 db  93h ; ô
.xdata$x:000068FB                 db  19h
.xdata$x:000068FC                 db    2
.xdata$x:000068FD                 db    0
.xdata$x:000068FE                 db    0
.xdata$x:000068FF                 db    0
.xdata$x:00006900                 dd offset __unwindtable$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.xdata$x:00006904                 db    0
.xdata$x:00006905                 db    0
.xdata$x:00006906                 db    0
.xdata$x:00006907                 db    0
.xdata$x:00006908                 db    0
.xdata$x:00006909                 db    0
.xdata$x:0000690A                 db    0
.xdata$x:0000690B                 db    0
.xdata$x:0000690C                 db    0
.xdata$x:0000690D                 db    0
.xdata$x:0000690E                 db    0
.xdata$x:0000690F                 db    0
.xdata$x:00006910                 db    0
.xdata$x:00006911                 db    0
.xdata$x:00006912                 db    0
.xdata$x:00006913                 db    0
.xdata$x:00006914                 db    0
.xdata$x:00006915                 db    0
.xdata$x:00006916                 db    0
.xdata$x:00006917                 db    0
.xdata$x:00006918                 db    1
.xdata$x:00006919                 db    0
.xdata$x:0000691A                 db    0
.xdata$x:0000691B                 db    0
.xdata$x:0000691B _xdata$x        ends
.xdata$x:0000691B
.rdata$r:0000691C ; ===========================================================================
.rdata$r:0000691C
.rdata$r:0000691C ; Segment type: Pure data
.rdata$r:0000691C ; Segment permissions: Read
.rdata$r:0000691C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000691C                 assume cs:_rdata$r
.rdata$r:0000691C                 ;org 691Ch
.rdata$r:0000691C ; COMDAT (pick any)
.rdata$r:0000691C                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata$r:0000691C ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:0000691C ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:0000691C                                         ; DATA XREF: .rdata:000068CCo
.rdata$r:0000691D                 db    0
.rdata$r:0000691E                 db    0
.rdata$r:0000691F                 db    0
.rdata$r:00006920                 db    0
.rdata$r:00006921                 db    0
.rdata$r:00006922                 db    0
.rdata$r:00006923                 db    0
.rdata$r:00006924                 db    0
.rdata$r:00006925                 db    0
.rdata$r:00006926                 db    0
.rdata$r:00006927                 db    0
.rdata$r:00006928                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:0000692C                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000692C _rdata$r        ends
.rdata$r:0000692C
.rdata$r:00006930 ; ===========================================================================
.rdata$r:00006930
.rdata$r:00006930 ; Segment type: Pure data
.rdata$r:00006930 ; Segment permissions: Read
.rdata$r:00006930 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006930                 assume cs:_rdata$r
.rdata$r:00006930                 ;org 6930h
.rdata$r:00006930 ; COMDAT (pick any)
.rdata$r:00006930                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata$r:00006930 ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata$r:00006930 ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ db    0
.rdata$r:00006930                                         ; DATA XREF: .rdata:000068B8o
.rdata$r:00006931                 db    0
.rdata$r:00006932                 db    0
.rdata$r:00006933                 db    0
.rdata$r:00006934                 db    4
.rdata$r:00006935                 db    0
.rdata$r:00006936                 db    0
.rdata$r:00006937                 db    0
.rdata$r:00006938                 db    0
.rdata$r:00006939                 db    0
.rdata$r:0000693A                 db    0
.rdata$r:0000693B                 db    0
.rdata$r:0000693C                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00006940                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006940 _rdata$r        ends
.rdata$r:00006940
.rdata$r:00006944 ; ===========================================================================
.rdata$r:00006944
.rdata$r:00006944 ; Segment type: Pure data
.rdata$r:00006944 ; Segment permissions: Read
.rdata$r:00006944 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006944                 assume cs:_rdata$r
.rdata$r:00006944                 ;org 6944h
.rdata$r:00006944 ; COMDAT (pick any)
.rdata$r:00006944                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@
.rdata$r:00006944 ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:00006944 ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:00006944                                         ; DATA XREF: .rdata:000068A0o
.rdata$r:00006945                 db    0
.rdata$r:00006946                 db    0
.rdata$r:00006947                 db    0
.rdata$r:00006948                 db    8
.rdata$r:00006949                 db    0
.rdata$r:0000694A                 db    0
.rdata$r:0000694B                 db    0
.rdata$r:0000694C                 db    0
.rdata$r:0000694D                 db    0
.rdata$r:0000694E                 db    0
.rdata$r:0000694F                 db    0
.rdata$r:00006950                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00006954                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006954 _rdata$r        ends
.rdata$r:00006954
.rdata$r:00006958 ; ===========================================================================
.rdata$r:00006958
.rdata$r:00006958 ; Segment type: Pure data
.rdata$r:00006958 ; Segment permissions: Read
.rdata$r:00006958 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006958                 assume cs:_rdata$r
.rdata$r:00006958                 ;org 6958h
.rdata$r:00006958 ; COMDAT (pick any)
.rdata$r:00006958                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@
.rdata$r:00006958 ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata$r:00006958 ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ db    0
.rdata$r:00006958                                         ; DATA XREF: .rdata:0000688Co
.rdata$r:00006959                 db    0
.rdata$r:0000695A                 db    0
.rdata$r:0000695B                 db    0
.rdata$r:0000695C                 db  0Ch
.rdata$r:0000695D                 db    0
.rdata$r:0000695E                 db    0
.rdata$r:0000695F                 db    0
.rdata$r:00006960                 db    0
.rdata$r:00006961                 db    0
.rdata$r:00006962                 db    0
.rdata$r:00006963                 db    0
.rdata$r:00006964                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00006968                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006968 _rdata$r        ends
.rdata$r:00006968
.rdata$r:0000696C ; ===========================================================================
.rdata$r:0000696C
.rdata$r:0000696C ; Segment type: Pure data
.rdata$r:0000696C ; Segment permissions: Read
.rdata$r:0000696C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000696C                 assume cs:_rdata$r
.rdata$r:0000696C                 ;org 696Ch
.rdata$r:0000696C ; COMDAT (pick any)
.rdata$r:0000696C                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@
.rdata$r:0000696C ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:0000696C ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:0000696C                                         ; DATA XREF: .rdata:00006878o
.rdata$r:0000696D                 db    0
.rdata$r:0000696E                 db    0
.rdata$r:0000696F                 db    0
.rdata$r:00006970                 db  10h
.rdata$r:00006971                 db    0
.rdata$r:00006972                 db    0
.rdata$r:00006973                 db    0
.rdata$r:00006974                 db    0
.rdata$r:00006975                 db    0
.rdata$r:00006976                 db    0
.rdata$r:00006977                 db    0
.rdata$r:00006978                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:0000697C                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000697C _rdata$r        ends
.rdata$r:0000697C
.text:00006980 ; ===========================================================================
.text:00006980
.text:00006980 ; Segment type: Pure code
.text:00006980 ; Segment permissions: Read/Execute
.text:00006980 _text           segment para public 'CODE' use32
.text:00006980                 assume cs:_text
.text:00006980                 ;org 6980h
.text:00006980 ; COMDAT (pick any)
.text:00006980                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006980
.text:00006980 ; =============== S U B R O U T I N E =======================================
.text:00006980
.text:00006980 ; Attributes: bp-based frame
.text:00006980
.text:00006980 ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(unsigned int)
.text:00006980                 public ??_GCCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z
.text:00006980 ??_GCCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z proc near
.text:00006980
.text:00006980 var_4           = dword ptr -4
.text:00006980 arg_0           = dword ptr  8
.text:00006980
.text:00006980                 push    ebp
.text:00006981                 mov     ebp, esp
.text:00006983                 push    ecx
.text:00006984                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000698B                 mov     [ebp+var_4], ecx
.text:0000698E                 mov     ecx, [ebp+var_4] ; this
.text:00006991                 call    ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ ; NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)
.text:00006996                 mov     eax, [ebp+arg_0]
.text:00006999                 and     eax, 1
.text:0000699C                 jz      short loc_69AA
.text:0000699E                 mov     ecx, [ebp+var_4]
.text:000069A1                 push    ecx             ; void *
.text:000069A2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000069A7                 add     esp, 4
.text:000069AA
.text:000069AA loc_69AA:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(uint)+1Cj
.text:000069AA                 mov     eax, [ebp+var_4]
.text:000069AD                 add     esp, 4
.text:000069B0                 cmp     ebp, esp
.text:000069B2                 call    __RTC_CheckEsp
.text:000069B7                 mov     esp, ebp
.text:000069B9                 pop     ebp
.text:000069BA                 retn    4
.text:000069BA ??_GCCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z endp
.text:000069BA
.text:000069BA ; ---------------------------------------------------------------------------
.text:000069BD                 align 10h
.text:000069BD _text           ends
.text:000069BD
.text:000069C0 ; ===========================================================================
.text:000069C0
.text:000069C0 ; Segment type: Pure code
.text:000069C0 ; Segment permissions: Read/Execute
.text:000069C0 _text           segment para public 'CODE' use32
.text:000069C0                 assume cs:_text
.text:000069C0                 ;org 69C0h
.text:000069C0 ; COMDAT (pick any)
.text:000069C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000069C0
.text:000069C0 ; =============== S U B R O U T I N E =======================================
.text:000069C0
.text:000069C0 ; Attributes: bp-based frame
.text:000069C0
.text:000069C0 ; _DWORD __thiscall CLzOutWindow::~CLzOutWindow(CLzOutWindow *__hidden this)
.text:000069C0                 public ??1CLzOutWindow@@QAE@XZ
.text:000069C0 ??1CLzOutWindow@@QAE@XZ proc near       ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+8Cp
.text:000069C0                                         ; __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$0+6j ...
.text:000069C0
.text:000069C0 var_4           = dword ptr -4
.text:000069C0
.text:000069C0                 push    ebp
.text:000069C1                 mov     ebp, esp
.text:000069C3                 push    ecx
.text:000069C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000069CB                 mov     [ebp+var_4], ecx
.text:000069CE                 mov     ecx, [ebp+var_4] ; this
.text:000069D1                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:000069D6                 add     esp, 4
.text:000069D9                 cmp     ebp, esp
.text:000069DB                 call    __RTC_CheckEsp
.text:000069E0                 mov     esp, ebp
.text:000069E2                 pop     ebp
.text:000069E3                 retn
.text:000069E3 ??1CLzOutWindow@@QAE@XZ endp
.text:000069E3
.text:000069E3 _text           ends
.text:000069E3
.text:000069E4 ; ===========================================================================
.text:000069E4
.text:000069E4 ; Segment type: Pure code
.text:000069E4 ; Segment permissions: Read/Execute
.text:000069E4 _text           segment para public 'CODE' use32
.text:000069E4                 assume cs:_text
.text:000069E4                 ;org 69E4h
.text:000069E4 ; COMDAT (pick any)
.text:000069E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000069E4
.text:000069E4 ; =============== S U B R O U T I N E =======================================
.text:000069E4
.text:000069E4 ; Attributes: bp-based frame
.text:000069E4
.text:000069E4 ; _DWORD __thiscall COutBuffer::~COutBuffer(COutBuffer *__hidden this)
.text:000069E4                 public ??1COutBuffer@@QAE@XZ
.text:000069E4 ??1COutBuffer@@QAE@XZ proc near         ; CODE XREF: CLzOutWindow::~CLzOutWindow(void)+11p
.text:000069E4
.text:000069E4 var_4           = dword ptr -4
.text:000069E4
.text:000069E4                 push    ebp
.text:000069E5                 mov     ebp, esp
.text:000069E7                 push    ecx
.text:000069E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000069EF                 mov     [ebp+var_4], ecx
.text:000069F2                 mov     ecx, [ebp+var_4] ; this
.text:000069F5                 call    ?Free@COutBuffer@@QAEXXZ ; COutBuffer::Free(void)
.text:000069FA                 add     esp, 4
.text:000069FD                 cmp     ebp, esp
.text:000069FF                 call    __RTC_CheckEsp
.text:00006A04                 mov     esp, ebp
.text:00006A06                 pop     ebp
.text:00006A07                 retn
.text:00006A07 ??1COutBuffer@@QAE@XZ endp
.text:00006A07
.text:00006A07 _text           ends
.text:00006A07
.text:00006A08 ; ===========================================================================
.text:00006A08
.text:00006A08 ; Segment type: Pure code
.text:00006A08 ; Segment permissions: Read/Execute
.text:00006A08 _text           segment para public 'CODE' use32
.text:00006A08                 assume cs:_text
.text:00006A08                 ;org 6A08h
.text:00006A08 ; COMDAT (pick any)
.text:00006A08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006A08
.text:00006A08 ; =============== S U B R O U T I N E =======================================
.text:00006A08
.text:00006A08 ; Attributes: bp-based frame
.text:00006A08
.text:00006A08 ; public: __thiscall NBitl::CDecoder<class CInBuffer>::~CDecoder<class CInBuffer>(void)
.text:00006A08                 public ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ
.text:00006A08 ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ proc near
.text:00006A08                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+6Bp
.text:00006A08
.text:00006A08 var_4           = dword ptr -4
.text:00006A08
.text:00006A08                 push    ebp
.text:00006A09                 mov     ebp, esp
.text:00006A0B                 push    ecx
.text:00006A0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006A13                 mov     [ebp+var_4], ecx
.text:00006A16                 mov     ecx, [ebp+var_4]
.text:00006A19                 call    ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>(void)
.text:00006A1E                 add     esp, 4
.text:00006A21                 cmp     ebp, esp
.text:00006A23                 call    __RTC_CheckEsp
.text:00006A28                 mov     esp, ebp
.text:00006A2A                 pop     ebp
.text:00006A2B                 retn
.text:00006A2B ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ endp
.text:00006A2B
.text:00006A2B _text           ends
.text:00006A2B
.text:00006A2C ; ===========================================================================
.text:00006A2C
.text:00006A2C ; Segment type: Pure code
.text:00006A2C ; Segment permissions: Read/Execute
.text:00006A2C _text           segment para public 'CODE' use32
.text:00006A2C                 assume cs:_text
.text:00006A2C                 ;org 6A2Ch
.text:00006A2C ; COMDAT (pick any)
.text:00006A2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006A2C
.text:00006A2C ; =============== S U B R O U T I N E =======================================
.text:00006A2C
.text:00006A2C ; Attributes: bp-based frame
.text:00006A2C
.text:00006A2C ; public: __thiscall NBitl::CBaseDecoder<class CInBuffer>::~CBaseDecoder<class CInBuffer>(void)
.text:00006A2C                 public ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ
.text:00006A2C ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ proc near
.text:00006A2C                                         ; CODE XREF: NBitl::CDecoder<CInBuffer>::~CDecoder<CInBuffer>(void)+11p
.text:00006A2C
.text:00006A2C var_4           = dword ptr -4
.text:00006A2C
.text:00006A2C                 push    ebp
.text:00006A2D                 mov     ebp, esp
.text:00006A2F                 push    ecx
.text:00006A30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006A37                 mov     [ebp+var_4], ecx
.text:00006A3A                 mov     ecx, [ebp+var_4]
.text:00006A3D                 add     ecx, 8          ; this
.text:00006A40                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:00006A45                 add     esp, 4
.text:00006A48                 cmp     ebp, esp
.text:00006A4A                 call    __RTC_CheckEsp
.text:00006A4F                 mov     esp, ebp
.text:00006A51                 pop     ebp
.text:00006A52                 retn
.text:00006A52 ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ endp
.text:00006A52
.text:00006A52 ; ---------------------------------------------------------------------------
.text:00006A53                 align 4
.text:00006A53 _text           ends
.text:00006A53
.text:00006A54 ; ===========================================================================
.text:00006A54
.text:00006A54 ; Segment type: Pure code
.text:00006A54 ; Segment permissions: Read/Execute
.text:00006A54 _text           segment para public 'CODE' use32
.text:00006A54                 assume cs:_text
.text:00006A54                 ;org 6A54h
.text:00006A54 ; COMDAT (pick any)
.text:00006A54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006A54
.text:00006A54 ; =============== S U B R O U T I N E =======================================
.text:00006A54
.text:00006A54 ; Attributes: bp-based frame
.text:00006A54
.text:00006A54 ; _DWORD __thiscall CInBuffer::~CInBuffer(CInBuffer *__hidden this)
.text:00006A54                 public ??1CInBuffer@@QAE@XZ
.text:00006A54 ??1CInBuffer@@QAE@XZ proc near          ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>(void)+14p
.text:00006A54                                         ; NCompress::NQuantum::CStreamBitDecoder::~CStreamBitDecoder(void)+14p
.text:00006A54
.text:00006A54 var_4           = dword ptr -4
.text:00006A54
.text:00006A54                 push    ebp
.text:00006A55                 mov     ebp, esp
.text:00006A57                 push    ecx
.text:00006A58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006A5F                 mov     [ebp+var_4], ecx
.text:00006A62                 mov     ecx, [ebp+var_4] ; this
.text:00006A65                 call    ?Free@CInBuffer@@QAEXXZ ; CInBuffer::Free(void)
.text:00006A6A                 add     esp, 4
.text:00006A6D                 cmp     ebp, esp
.text:00006A6F                 call    __RTC_CheckEsp
.text:00006A74                 mov     esp, ebp
.text:00006A76                 pop     ebp
.text:00006A77                 retn
.text:00006A77 ??1CInBuffer@@QAE@XZ endp
.text:00006A77
.text:00006A77 _text           ends
.text:00006A77
.text:00006A78 ; ===========================================================================
.text:00006A78
.text:00006A78 ; Segment type: Pure code
.text:00006A78 ; Segment permissions: Read/Execute
.text:00006A78 _text           segment para public 'CODE' use32
.text:00006A78                 assume cs:_text
.text:00006A78                 ;org 6A78h
.text:00006A78 ; COMDAT (pick any)
.text:00006A78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006A78
.text:00006A78 ; =============== S U B R O U T I N E =======================================
.text:00006A78
.text:00006A78 ; Attributes: bp-based frame
.text:00006A78
.text:00006A78 ; void __thiscall NCompress::NLzx::CDecoder::SetKeepHistory(NCompress::NLzx::CDecoder *this, bool)
.text:00006A78                 public ?SetKeepHistory@CDecoder@NLzx@NCompress@@QAEX_N@Z
.text:00006A78 ?SetKeepHistory@CDecoder@NLzx@NCompress@@QAEX_N@Z proc near
.text:00006A78                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1A1Bp
.text:00006A78
.text:00006A78 var_4           = dword ptr -4
.text:00006A78 arg_0           = byte ptr  8
.text:00006A78
.text:00006A78                 push    ebp
.text:00006A79                 mov     ebp, esp
.text:00006A7B                 push    ecx
.text:00006A7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006A83                 mov     [ebp+var_4], ecx
.text:00006A86                 mov     eax, [ebp+var_4]
.text:00006A89                 mov     cl, [ebp+arg_0]
.text:00006A8C                 mov     [eax+1CC0h], cl
.text:00006A92                 mov     esp, ebp
.text:00006A94                 pop     ebp
.text:00006A95                 retn    4
.text:00006A95 ?SetKeepHistory@CDecoder@NLzx@NCompress@@QAEX_N@Z endp
.text:00006A95
.text:00006A95 _text           ends
.text:00006A95
.text:00006A98 ; ===========================================================================
.text:00006A98
.text:00006A98 ; Segment type: Pure code
.text:00006A98 ; Segment permissions: Read/Execute
.text:00006A98 _text           segment para public 'CODE' use32
.text:00006A98                 assume cs:_text
.text:00006A98                 ;org 6A98h
.text:00006A98 ; COMDAT (pick any)
.text:00006A98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006A98
.text:00006A98 ; =============== S U B R O U T I N E =======================================
.text:00006A98
.text:00006A98 ; Attributes: bp-based frame
.text:00006A98
.text:00006A98 ; void __thiscall NCompress::NQuantum::CDecoder::SetKeepHistory(NCompress::NQuantum::CDecoder *this, bool)
.text:00006A98                 public ?SetKeepHistory@CDecoder@NQuantum@NCompress@@QAEX_N@Z
.text:00006A98 ?SetKeepHistory@CDecoder@NQuantum@NCompress@@QAEX_N@Z proc near
.text:00006A98                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1AB7p
.text:00006A98
.text:00006A98 var_4           = dword ptr -4
.text:00006A98 arg_0           = byte ptr  8
.text:00006A98
.text:00006A98                 push    ebp
.text:00006A99                 mov     ebp, esp
.text:00006A9B                 push    ecx
.text:00006A9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006AA3                 mov     [ebp+var_4], ecx
.text:00006AA6                 mov     eax, [ebp+var_4]
.text:00006AA9                 mov     cl, [ebp+arg_0]
.text:00006AAC                 mov     [eax+84h], cl
.text:00006AB2                 mov     esp, ebp
.text:00006AB4                 pop     ebp
.text:00006AB5                 retn    4
.text:00006AB5 ?SetKeepHistory@CDecoder@NQuantum@NCompress@@QAEX_N@Z endp
.text:00006AB5
.text:00006AB5 _text           ends
.text:00006AB5
.text:00006AB8 ; ===========================================================================
.text:00006AB8
.text:00006AB8 ; Segment type: Pure code
.text:00006AB8 ; Segment permissions: Read/Execute
.text:00006AB8 _text           segment para public 'CODE' use32
.text:00006AB8                 assume cs:_text
.text:00006AB8                 ;org 6AB8h
.text:00006AB8 ; COMDAT (pick any)
.text:00006AB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006AB8
.text:00006AB8 ; =============== S U B R O U T I N E =======================================
.text:00006AB8
.text:00006AB8 ; Attributes: bp-based frame
.text:00006AB8
.text:00006AB8 ; _DWORD __thiscall NCompress::NQuantum::CDecoder::CDecoder(NCompress::NQuantum::CDecoder *__hidden this)
.text:00006AB8                 public ??0CDecoder@NQuantum@NCompress@@QAE@XZ
.text:00006AB8 ??0CDecoder@NQuantum@NCompress@@QAE@XZ proc near
.text:00006AB8                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+10E3p
.text:00006AB8
.text:00006AB8 var_4           = dword ptr -4
.text:00006AB8
.text:00006AB8                 push    ebp
.text:00006AB9                 mov     ebp, esp
.text:00006ABB                 push    ecx
.text:00006ABC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006AC3                 mov     [ebp+var_4], ecx
.text:00006AC6                 mov     ecx, [ebp+var_4] ; this
.text:00006AC9                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:00006ACE                 mov     ecx, [ebp+var_4]
.text:00006AD1                 add     ecx, 4          ; this
.text:00006AD4                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00006AD9                 mov     eax, [ebp+var_4]
.text:00006ADC                 mov     dword ptr [eax], offset ??_7CDecoder@NQuantum@NCompress@@6B@ ; const NCompress::NQuantum::CDecoder::`vftable'
.text:00006AE2                 mov     ecx, [ebp+var_4]
.text:00006AE5                 add     ecx, 8          ; this
.text:00006AE8                 call    ??0CLzOutWindow@@QAE@XZ ; CLzOutWindow::CLzOutWindow(void)
.text:00006AED                 mov     ecx, [ebp+var_4]
.text:00006AF0                 add     ecx, 30h ; '0'  ; this
.text:00006AF3                 call    ??0CDecoder@NRangeCoder@NQuantum@NCompress@@QAE@XZ ; NCompress::NQuantum::NRangeCoder::CDecoder::CDecoder(void)
.text:00006AF8                 mov     ecx, [ebp+var_4]
.text:00006AFB                 mov     byte ptr [ecx+84h], 0
.text:00006B02                 mov     eax, [ebp+var_4]
.text:00006B05                 add     esp, 4
.text:00006B08                 cmp     ebp, esp
.text:00006B0A                 call    __RTC_CheckEsp
.text:00006B0F                 mov     esp, ebp
.text:00006B11                 pop     ebp
.text:00006B12                 retn
.text:00006B12 ??0CDecoder@NQuantum@NCompress@@QAE@XZ endp
.text:00006B12
.text:00006B12 ; ---------------------------------------------------------------------------
.text:00006B13                 align 4
.text:00006B13 _text           ends
.text:00006B13
.rdata:00006B14 ; ===========================================================================
.rdata:00006B14
.rdata:00006B14 ; Segment type: Pure data
.rdata:00006B14 ; Segment permissions: Read
.rdata:00006B14 _rdata          segment dword public 'DATA' use32
.rdata:00006B14                 assume cs:_rdata
.rdata:00006B14                 ;org 6B14h
.rdata:00006B14 ; COMDAT (pick largest)
.rdata:00006B14                 dd offset ??_R4CDecoder@NQuantum@NCompress@@6B@ ; const NCompress::NQuantum::CDecoder::`RTTI Complete Object Locator'
.rdata:00006B18                 public ??_7CDecoder@NQuantum@NCompress@@6B@
.rdata:00006B18 ; const NCompress::NQuantum::CDecoder::`vftable'
.rdata:00006B18 ??_7CDecoder@NQuantum@NCompress@@6B@ dd offset ?QueryInterface@CDecoder@NQuantum@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00006B18                                         ; DATA XREF: NCompress::NQuantum::CDecoder::CDecoder(void)+24o
.rdata:00006B18                                         ; NCompress::NQuantum::CDecoder::~CDecoder(void)+30o
.rdata:00006B18                                         ; NCompress::NQuantum::CDecoder::QueryInterface(_GUID const &,void * *)
.rdata:00006B1C                 dd offset ?AddRef@CDecoder@NQuantum@NCompress@@UAGKXZ ; NCompress::NQuantum::CDecoder::AddRef(void)
.rdata:00006B20                 dd offset ?Release@CDecoder@NQuantum@NCompress@@UAGKXZ ; NCompress::NQuantum::CDecoder::Release(void)
.rdata:00006B24                 dd offset ?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NQuantum::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00006B28                 dd offset ?SetOutStreamSize@CDecoder@NQuantum@NCompress@@UAGJPB_K@Z ; NCompress::NQuantum::CDecoder::SetOutStreamSize(unsigned __int64 const *)
.rdata:00006B2C                 dd offset ??_ECDecoder@NQuantum@NCompress@@UAEPAXI@Z ; NCompress::NQuantum::CDecoder::`vector deleting destructor'(uint)
.rdata:00006B2C _rdata          ends
.rdata:00006B2C
.rdata$r:00006B30 ; ===========================================================================
.rdata$r:00006B30
.rdata$r:00006B30 ; Segment type: Pure data
.rdata$r:00006B30 ; Segment permissions: Read
.rdata$r:00006B30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006B30                 assume cs:_rdata$r
.rdata$r:00006B30                 ;org 6B30h
.rdata$r:00006B30 ; COMDAT (pick any)
.rdata$r:00006B30                 public ??_R4CDecoder@NQuantum@NCompress@@6B@
.rdata$r:00006B30 ; const NCompress::NQuantum::CDecoder::`RTTI Complete Object Locator'
.rdata$r:00006B30 ??_R4CDecoder@NQuantum@NCompress@@6B@ db    0
.rdata$r:00006B30                                         ; DATA XREF: .rdata:00006B14o
.rdata$r:00006B31                 db    0
.rdata$r:00006B32                 db    0
.rdata$r:00006B33                 db    0
.rdata$r:00006B34                 db    0
.rdata$r:00006B35                 db    0
.rdata$r:00006B36                 db    0
.rdata$r:00006B37                 db    0
.rdata$r:00006B38                 db    0
.rdata$r:00006B39                 db    0
.rdata$r:00006B3A                 db    0
.rdata$r:00006B3B                 db    0
.rdata$r:00006B3C                 dd offset ??_R0?AVCDecoder@NQuantum@NCompress@@@8 ; NCompress::NQuantum::CDecoder `RTTI Type Descriptor'
.rdata$r:00006B40                 dd offset ??_R3CDecoder@NQuantum@NCompress@@8 ; NCompress::NQuantum::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006B40 _rdata$r        ends
.rdata$r:00006B40
.data:00006B44 ; ===========================================================================
.data:00006B44
.data:00006B44 ; Segment type: Pure data
.data:00006B44 ; Segment permissions: Read/Write
.data:00006B44 _data           segment dword public 'DATA' use32
.data:00006B44                 assume cs:_data
.data:00006B44                 ;org 6B44h
.data:00006B44 ; COMDAT (pick any)
.data:00006B44                 public ??_R0?AVCDecoder@NQuantum@NCompress@@@8
.data:00006B44 ; class NCompress::NQuantum::CDecoder `RTTI Type Descriptor'
.data:00006B44 ??_R0?AVCDecoder@NQuantum@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00006B44                                         ; DATA XREF: .rdata$r:00006B3Co
.data:00006B44                                         ; .rdata$r:NCompress::NQuantum::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00006B44                                         ; const type_info::`vftable'
.data:00006B48                 db    0
.data:00006B49                 db    0
.data:00006B4A                 db    0
.data:00006B4B                 db    0
.data:00006B4C                 db  2Eh ; .
.data:00006B4D                 db  3Fh ; ?
.data:00006B4E                 db  41h ; A
.data:00006B4F                 db  56h ; V
.data:00006B50                 db  43h ; C
.data:00006B51                 db  44h ; D
.data:00006B52                 db  65h ; e
.data:00006B53                 db  63h ; c
.data:00006B54                 db  6Fh ; o
.data:00006B55                 db  64h ; d
.data:00006B56                 db  65h ; e
.data:00006B57                 db  72h ; r
.data:00006B58                 db  40h ; @
.data:00006B59                 db  4Eh ; N
.data:00006B5A                 db  51h ; Q
.data:00006B5B                 db  75h ; u
.data:00006B5C                 db  61h ; a
.data:00006B5D                 db  6Eh ; n
.data:00006B5E                 db  74h ; t
.data:00006B5F                 db  75h ; u
.data:00006B60                 db  6Dh ; m
.data:00006B61                 db  40h ; @
.data:00006B62                 db  4Eh ; N
.data:00006B63                 db  43h ; C
.data:00006B64                 db  6Fh ; o
.data:00006B65                 db  6Dh ; m
.data:00006B66                 db  70h ; p
.data:00006B67                 db  72h ; r
.data:00006B68                 db  65h ; e
.data:00006B69                 db  73h ; s
.data:00006B6A                 db  73h ; s
.data:00006B6B                 db  40h ; @
.data:00006B6C                 db  40h ; @
.data:00006B6D                 db    0
.data:00006B6E                 align 10h
.data:00006B6E _data           ends
.data:00006B6E
.rdata$r:00006B70 ; ===========================================================================
.rdata$r:00006B70
.rdata$r:00006B70 ; Segment type: Pure data
.rdata$r:00006B70 ; Segment permissions: Read
.rdata$r:00006B70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006B70                 assume cs:_rdata$r
.rdata$r:00006B70                 ;org 6B70h
.rdata$r:00006B70 ; COMDAT (pick any)
.rdata$r:00006B70                 public ??_R3CDecoder@NQuantum@NCompress@@8
.rdata$r:00006B70 ; NCompress::NQuantum::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006B70 ??_R3CDecoder@NQuantum@NCompress@@8 db    0
.rdata$r:00006B70                                         ; DATA XREF: .rdata$r:00006B40o
.rdata$r:00006B70                                         ; .rdata$r:00006BACo
.rdata$r:00006B71                 db    0
.rdata$r:00006B72                 db    0
.rdata$r:00006B73                 db    0
.rdata$r:00006B74                 db    1
.rdata$r:00006B75                 db    0
.rdata$r:00006B76                 db    0
.rdata$r:00006B77                 db    0
.rdata$r:00006B78                 db    4
.rdata$r:00006B79                 db    0
.rdata$r:00006B7A                 db    0
.rdata$r:00006B7B                 db    0
.rdata$r:00006B7C                 dd offset ??_R2CDecoder@NQuantum@NCompress@@8 ; NCompress::NQuantum::CDecoder::`RTTI Base Class Array'
.rdata$r:00006B7C _rdata$r        ends
.rdata$r:00006B7C
.rdata$r:00006B80 ; ===========================================================================
.rdata$r:00006B80
.rdata$r:00006B80 ; Segment type: Pure data
.rdata$r:00006B80 ; Segment permissions: Read
.rdata$r:00006B80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006B80                 assume cs:_rdata$r
.rdata$r:00006B80                 ;org 6B80h
.rdata$r:00006B80 ; COMDAT (pick any)
.rdata$r:00006B80                 public ??_R2CDecoder@NQuantum@NCompress@@8
.rdata$r:00006B80 ; NCompress::NQuantum::CDecoder::`RTTI Base Class Array'
.rdata$r:00006B80 ??_R2CDecoder@NQuantum@NCompress@@8 dd offset ??_R1A@?0A@EA@CDecoder@NQuantum@NCompress@@8
.rdata$r:00006B80                                         ; DATA XREF: .rdata$r:00006B7Co
.rdata$r:00006B80                                         ; NCompress::NQuantum::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006B84                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006B88                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006B8C                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00006B90                 db    0
.rdata$r:00006B91                 align 4
.rdata$r:00006B91 _rdata$r        ends
.rdata$r:00006B91
.rdata$r:00006B94 ; ===========================================================================
.rdata$r:00006B94
.rdata$r:00006B94 ; Segment type: Pure data
.rdata$r:00006B94 ; Segment permissions: Read
.rdata$r:00006B94 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006B94                 assume cs:_rdata$r
.rdata$r:00006B94                 ;org 6B94h
.rdata$r:00006B94 ; COMDAT (pick any)
.rdata$r:00006B94                 public ??_R1A@?0A@EA@CDecoder@NQuantum@NCompress@@8
.rdata$r:00006B94 ; NCompress::NQuantum::CDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006B94 ??_R1A@?0A@EA@CDecoder@NQuantum@NCompress@@8 dd offset ??_R0?AVCDecoder@NQuantum@NCompress@@@8
.rdata$r:00006B94                                         ; DATA XREF: .rdata$r:NCompress::NQuantum::CDecoder::`RTTI Base Class Array'o
.rdata$r:00006B94                                         ; NCompress::NQuantum::CDecoder `RTTI Type Descriptor'
.rdata$r:00006B98                 db    3
.rdata$r:00006B99                 db    0
.rdata$r:00006B9A                 db    0
.rdata$r:00006B9B                 db    0
.rdata$r:00006B9C                 db    0
.rdata$r:00006B9D                 db    0
.rdata$r:00006B9E                 db    0
.rdata$r:00006B9F                 db    0
.rdata$r:00006BA0                 db 0FFh
.rdata$r:00006BA1                 db 0FFh
.rdata$r:00006BA2                 db 0FFh
.rdata$r:00006BA3                 db 0FFh
.rdata$r:00006BA4                 db    0
.rdata$r:00006BA5                 db    0
.rdata$r:00006BA6                 db    0
.rdata$r:00006BA7                 db    0
.rdata$r:00006BA8                 db  40h ; @
.rdata$r:00006BA9                 db    0
.rdata$r:00006BAA                 db    0
.rdata$r:00006BAB                 db    0
.rdata$r:00006BAC                 dd offset ??_R3CDecoder@NQuantum@NCompress@@8 ; NCompress::NQuantum::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006BAC _rdata$r        ends
.rdata$r:00006BAC
.rdata$r:00006BB0 ; ===========================================================================
.rdata$r:00006BB0
.rdata$r:00006BB0 ; Segment type: Pure data
.rdata$r:00006BB0 ; Segment permissions: Read
.rdata$r:00006BB0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006BB0                 assume cs:_rdata$r
.rdata$r:00006BB0                 ;org 6BB0h
.rdata$r:00006BB0 ; COMDAT (pick any)
.rdata$r:00006BB0                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00006BB0 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00006BB0 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00006BB0                                         ; DATA XREF: .rdata$r:00006B8Co
.rdata$r:00006BB0                                         ; .rdata$r:00006FD0o ...
.rdata$r:00006BB0                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00006BB4                 align 8
.rdata$r:00006BB8                 db    4
.rdata$r:00006BB9                 db    0
.rdata$r:00006BBA                 db    0
.rdata$r:00006BBB                 db    0
.rdata$r:00006BBC                 db 0FFh
.rdata$r:00006BBD                 db 0FFh
.rdata$r:00006BBE                 db 0FFh
.rdata$r:00006BBF                 db 0FFh
.rdata$r:00006BC0                 db    0
.rdata$r:00006BC1                 db    0
.rdata$r:00006BC2                 db    0
.rdata$r:00006BC3                 db    0
.rdata$r:00006BC4                 db  40h ; @
.rdata$r:00006BC5                 db    0
.rdata$r:00006BC6                 db    0
.rdata$r:00006BC7                 db    0
.rdata$r:00006BC8                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006BC8 _rdata$r        ends
.rdata$r:00006BC8
.text:00006BCC ; ===========================================================================
.text:00006BCC
.text:00006BCC ; Segment type: Pure code
.text:00006BCC ; Segment permissions: Read/Execute
.text:00006BCC _text           segment para public 'CODE' use32
.text:00006BCC                 assume cs:_text
.text:00006BCC                 ;org 6BCCh
.text:00006BCC ; COMDAT (pick any)
.text:00006BCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006BCC
.text:00006BCC ; =============== S U B R O U T I N E =======================================
.text:00006BCC
.text:00006BCC ; Attributes: bp-based frame
.text:00006BCC
.text:00006BCC ; __int32 __stdcall NCompress::NQuantum::CDecoder::QueryInterface(NCompress::NQuantum::CDecoder *this, const struct _GUID *Buf1, void **)
.text:00006BCC                 public ?QueryInterface@CDecoder@NQuantum@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00006BCC ?QueryInterface@CDecoder@NQuantum@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00006BCC                                         ; DATA XREF: .rdata:const NCompress::NQuantum::CDecoder::`vftable'o
.text:00006BCC
.text:00006BCC this            = dword ptr  8
.text:00006BCC Buf1            = dword ptr  0Ch
.text:00006BCC arg_8           = dword ptr  10h
.text:00006BCC
.text:00006BCC                 push    ebp
.text:00006BCD                 mov     ebp, esp
.text:00006BCF                 mov     eax, [ebp+arg_8]
.text:00006BD2                 mov     dword ptr [eax], 0
.text:00006BD8                 push    offset _IID_IUnknown ; Buf2
.text:00006BDD                 mov     ecx, [ebp+Buf1]
.text:00006BE0                 push    ecx             ; Buf1
.text:00006BE1                 call    ___@8           ; __(x,x)
.text:00006BE6                 test    eax, eax
.text:00006BE8                 jz      short loc_6BF4
.text:00006BEA                 mov     edx, [ebp+arg_8]
.text:00006BED                 mov     eax, [ebp+this]
.text:00006BF0                 mov     [edx], eax
.text:00006BF2                 jmp     short loc_6BFB
.text:00006BF4 ; ---------------------------------------------------------------------------
.text:00006BF4
.text:00006BF4 loc_6BF4:                               ; CODE XREF: NCompress::NQuantum::CDecoder::QueryInterface(_GUID const &,void * *)+1Cj
.text:00006BF4                 mov     eax, 80004002h
.text:00006BF9                 jmp     short loc_6C0C
.text:00006BFB ; ---------------------------------------------------------------------------
.text:00006BFB
.text:00006BFB loc_6BFB:                               ; CODE XREF: NCompress::NQuantum::CDecoder::QueryInterface(_GUID const &,void * *)+26j
.text:00006BFB                 mov     ecx, [ebp+this]
.text:00006BFE                 mov     edx, [ecx+4]
.text:00006C01                 add     edx, 1
.text:00006C04                 mov     eax, [ebp+this]
.text:00006C07                 mov     [eax+4], edx
.text:00006C0A                 xor     eax, eax
.text:00006C0C
.text:00006C0C loc_6C0C:                               ; CODE XREF: NCompress::NQuantum::CDecoder::QueryInterface(_GUID const &,void * *)+2Dj
.text:00006C0C                 cmp     ebp, esp
.text:00006C0E                 call    __RTC_CheckEsp
.text:00006C13                 pop     ebp
.text:00006C14                 retn    0Ch
.text:00006C14 ?QueryInterface@CDecoder@NQuantum@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00006C14
.text:00006C14 ; ---------------------------------------------------------------------------
.text:00006C17                 align 4
.text:00006C17 _text           ends
.text:00006C17
.text:00006C18 ; ===========================================================================
.text:00006C18
.text:00006C18 ; Segment type: Pure code
.text:00006C18 ; Segment permissions: Read/Execute
.text:00006C18 _text           segment para public 'CODE' use32
.text:00006C18                 assume cs:_text
.text:00006C18                 ;org 6C18h
.text:00006C18 ; COMDAT (pick any)
.text:00006C18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006C18
.text:00006C18 ; =============== S U B R O U T I N E =======================================
.text:00006C18
.text:00006C18 ; Attributes: bp-based frame
.text:00006C18
.text:00006C18 ; unsigned __int32 __stdcall NCompress::NQuantum::CDecoder::AddRef(NCompress::NQuantum::CDecoder *this)
.text:00006C18                 public ?AddRef@CDecoder@NQuantum@NCompress@@UAGKXZ
.text:00006C18 ?AddRef@CDecoder@NQuantum@NCompress@@UAGKXZ proc near
.text:00006C18                                         ; DATA XREF: .rdata:00006B1Co
.text:00006C18
.text:00006C18 var_4           = dword ptr -4
.text:00006C18 this            = dword ptr  8
.text:00006C18
.text:00006C18                 push    ebp
.text:00006C19                 mov     ebp, esp
.text:00006C1B                 push    ecx
.text:00006C1C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C23                 mov     eax, [ebp+this]
.text:00006C26                 mov     ecx, [eax+4]
.text:00006C29                 add     ecx, 1
.text:00006C2C                 mov     [ebp+var_4], ecx
.text:00006C2F                 mov     edx, [ebp+this]
.text:00006C32                 mov     eax, [ebp+var_4]
.text:00006C35                 mov     [edx+4], eax
.text:00006C38                 mov     eax, [ebp+var_4]
.text:00006C3B                 mov     esp, ebp
.text:00006C3D                 pop     ebp
.text:00006C3E                 retn    4
.text:00006C3E ?AddRef@CDecoder@NQuantum@NCompress@@UAGKXZ endp
.text:00006C3E
.text:00006C3E ; ---------------------------------------------------------------------------
.text:00006C41                 align 4
.text:00006C41 _text           ends
.text:00006C41
.text:00006C44 ; ===========================================================================
.text:00006C44
.text:00006C44 ; Segment type: Pure code
.text:00006C44 ; Segment permissions: Read/Execute
.text:00006C44 _text           segment para public 'CODE' use32
.text:00006C44                 assume cs:_text
.text:00006C44                 ;org 6C44h
.text:00006C44 ; COMDAT (pick any)
.text:00006C44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006C44
.text:00006C44 ; =============== S U B R O U T I N E =======================================
.text:00006C44
.text:00006C44 ; Attributes: bp-based frame
.text:00006C44
.text:00006C44 ; unsigned __int32 __stdcall NCompress::NQuantum::CDecoder::Release(NCompress::NQuantum::CDecoder *this)
.text:00006C44                 public ?Release@CDecoder@NQuantum@NCompress@@UAGKXZ
.text:00006C44 ?Release@CDecoder@NQuantum@NCompress@@UAGKXZ proc near
.text:00006C44                                         ; DATA XREF: .rdata:00006B20o
.text:00006C44
.text:00006C44 var_10          = dword ptr -10h
.text:00006C44 var_C           = dword ptr -0Ch
.text:00006C44 var_8           = dword ptr -8
.text:00006C44 var_4           = dword ptr -4
.text:00006C44 this            = dword ptr  8
.text:00006C44
.text:00006C44                 push    ebp
.text:00006C45                 mov     ebp, esp
.text:00006C47                 sub     esp, 10h
.text:00006C4A                 push    esi
.text:00006C4B                 mov     eax, 0CCCCCCCCh
.text:00006C50                 mov     [ebp+var_10], eax
.text:00006C53                 mov     [ebp+var_C], eax
.text:00006C56                 mov     [ebp+var_8], eax
.text:00006C59                 mov     [ebp+var_4], eax
.text:00006C5C                 mov     eax, [ebp+this]
.text:00006C5F                 mov     ecx, [eax+4]
.text:00006C62                 sub     ecx, 1
.text:00006C65                 mov     [ebp+var_C], ecx
.text:00006C68                 mov     edx, [ebp+this]
.text:00006C6B                 mov     eax, [ebp+var_C]
.text:00006C6E                 mov     [edx+4], eax
.text:00006C71                 cmp     [ebp+var_C], 0
.text:00006C75                 jz      short loc_6C7F
.text:00006C77                 mov     ecx, [ebp+this]
.text:00006C7A                 mov     eax, [ecx+4]
.text:00006C7D                 jmp     short loc_6CB7
.text:00006C7F ; ---------------------------------------------------------------------------
.text:00006C7F
.text:00006C7F loc_6C7F:                               ; CODE XREF: NCompress::NQuantum::CDecoder::Release(void)+31j
.text:00006C7F                 mov     edx, [ebp+this]
.text:00006C82                 mov     [ebp+var_8], edx
.text:00006C85                 mov     eax, [ebp+var_8]
.text:00006C88                 mov     [ebp+var_4], eax
.text:00006C8B                 cmp     [ebp+var_4], 0
.text:00006C8F                 jz      short loc_6CAE
.text:00006C91                 mov     esi, esp
.text:00006C93                 push    1
.text:00006C95                 mov     ecx, [ebp+var_4]
.text:00006C98                 mov     edx, [ecx]
.text:00006C9A                 mov     ecx, [ebp+var_4]
.text:00006C9D                 mov     eax, [edx+14h]
.text:00006CA0                 call    eax
.text:00006CA2                 cmp     esi, esp
.text:00006CA4                 call    __RTC_CheckEsp
.text:00006CA9                 mov     [ebp+var_10], eax
.text:00006CAC                 jmp     short loc_6CB5
.text:00006CAE ; ---------------------------------------------------------------------------
.text:00006CAE
.text:00006CAE loc_6CAE:                               ; CODE XREF: NCompress::NQuantum::CDecoder::Release(void)+4Bj
.text:00006CAE                 mov     [ebp+var_10], 0
.text:00006CB5
.text:00006CB5 loc_6CB5:                               ; CODE XREF: NCompress::NQuantum::CDecoder::Release(void)+68j
.text:00006CB5                 xor     eax, eax
.text:00006CB7
.text:00006CB7 loc_6CB7:                               ; CODE XREF: NCompress::NQuantum::CDecoder::Release(void)+39j
.text:00006CB7                 pop     esi
.text:00006CB8                 add     esp, 10h
.text:00006CBB                 cmp     ebp, esp
.text:00006CBD                 call    __RTC_CheckEsp
.text:00006CC2                 mov     esp, ebp
.text:00006CC4                 pop     ebp
.text:00006CC5                 retn    4
.text:00006CC5 ?Release@CDecoder@NQuantum@NCompress@@UAGKXZ endp
.text:00006CC5
.text:00006CC5 _text           ends
.text:00006CC5
.text:00006CC8 ; ===========================================================================
.text:00006CC8
.text:00006CC8 ; Segment type: Pure code
.text:00006CC8 ; Segment permissions: Read/Execute
.text:00006CC8 _text           segment para public 'CODE' use32
.text:00006CC8                 assume cs:_text
.text:00006CC8                 ;org 6CC8h
.text:00006CC8 ; COMDAT (pick any)
.text:00006CC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006CC8
.text:00006CC8 ; =============== S U B R O U T I N E =======================================
.text:00006CC8
.text:00006CC8 ; Attributes: bp-based frame
.text:00006CC8
.text:00006CC8 ; public: virtual void * __thiscall NCompress::NQuantum::CDecoder::`scalar deleting destructor'(unsigned int)
.text:00006CC8                 public ??_GCDecoder@NQuantum@NCompress@@UAEPAXI@Z
.text:00006CC8 ??_GCDecoder@NQuantum@NCompress@@UAEPAXI@Z proc near
.text:00006CC8
.text:00006CC8 var_4           = dword ptr -4
.text:00006CC8 arg_0           = dword ptr  8
.text:00006CC8
.text:00006CC8                 push    ebp
.text:00006CC9                 mov     ebp, esp
.text:00006CCB                 push    ecx
.text:00006CCC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006CD3                 mov     [ebp+var_4], ecx
.text:00006CD6                 mov     ecx, [ebp+var_4] ; this
.text:00006CD9                 call    ??1CDecoder@NQuantum@NCompress@@UAE@XZ ; NCompress::NQuantum::CDecoder::~CDecoder(void)
.text:00006CDE                 mov     eax, [ebp+arg_0]
.text:00006CE1                 and     eax, 1
.text:00006CE4                 jz      short loc_6CF2
.text:00006CE6                 mov     ecx, [ebp+var_4]
.text:00006CE9                 push    ecx             ; void *
.text:00006CEA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006CEF                 add     esp, 4
.text:00006CF2
.text:00006CF2 loc_6CF2:                               ; CODE XREF: NCompress::NQuantum::CDecoder::`scalar deleting destructor'(uint)+1Cj
.text:00006CF2                 mov     eax, [ebp+var_4]
.text:00006CF5                 add     esp, 4
.text:00006CF8                 cmp     ebp, esp
.text:00006CFA                 call    __RTC_CheckEsp
.text:00006CFF                 mov     esp, ebp
.text:00006D01                 pop     ebp
.text:00006D02                 retn    4
.text:00006D02 ??_GCDecoder@NQuantum@NCompress@@UAEPAXI@Z endp
.text:00006D02
.text:00006D02 ; ---------------------------------------------------------------------------
.text:00006D05                 align 4
.text:00006D05 _text           ends
.text:00006D05
.text:00006D08 ; ===========================================================================
.text:00006D08
.text:00006D08 ; Segment type: Pure code
.text:00006D08 ; Segment permissions: Read/Execute
.text:00006D08 _text           segment para public 'CODE' use32
.text:00006D08                 assume cs:_text
.text:00006D08                 ;org 6D08h
.text:00006D08 ; COMDAT (pick any)
.text:00006D08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006D08
.text:00006D08 ; =============== S U B R O U T I N E =======================================
.text:00006D08
.text:00006D08 ; Attributes: bp-based frame
.text:00006D08
.text:00006D08 ; _DWORD __thiscall NCompress::NQuantum::CDecoder::~CDecoder(NCompress::NQuantum::CDecoder *__hidden this)
.text:00006D08                 public ??1CDecoder@NQuantum@NCompress@@UAE@XZ
.text:00006D08 ??1CDecoder@NQuantum@NCompress@@UAE@XZ proc near
.text:00006D08                                         ; CODE XREF: NCompress::NQuantum::CDecoder::`scalar deleting destructor'(uint)+11p
.text:00006D08
.text:00006D08 var_10          = dword ptr -10h
.text:00006D08 var_C           = dword ptr -0Ch
.text:00006D08 var_4           = dword ptr -4
.text:00006D08
.text:00006D08                 push    ebp
.text:00006D09                 mov     ebp, esp
.text:00006D0B                 push    0FFFFFFFFh
.text:00006D0D                 push    offset __ehhandler$??1CDecoder@NQuantum@NCompress@@UAE@XZ
.text:00006D12                 mov     eax, large fs:0
.text:00006D18                 push    eax
.text:00006D19                 push    ecx
.text:00006D1A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00006D21                 mov     eax, dword ptr ds:___security_cookie
.text:00006D26                 xor     eax, ebp
.text:00006D28                 push    eax
.text:00006D29                 lea     eax, [ebp+var_C]
.text:00006D2C                 mov     large fs:0, eax
.text:00006D32                 mov     [ebp+var_10], ecx
.text:00006D35                 mov     eax, [ebp+var_10]
.text:00006D38                 mov     dword ptr [eax], offset ??_7CDecoder@NQuantum@NCompress@@6B@ ; const NCompress::NQuantum::CDecoder::`vftable'
.text:00006D3E                 mov     [ebp+var_4], 0
.text:00006D45                 mov     ecx, [ebp+var_10]
.text:00006D48                 add     ecx, 30h ; '0'  ; this
.text:00006D4B                 call    ??1CDecoder@NRangeCoder@NQuantum@NCompress@@QAE@XZ ; NCompress::NQuantum::NRangeCoder::CDecoder::~CDecoder(void)
.text:00006D50                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006D57                 mov     ecx, [ebp+var_10]
.text:00006D5A                 add     ecx, 8          ; this
.text:00006D5D                 call    ??1CLzOutWindow@@QAE@XZ ; CLzOutWindow::~CLzOutWindow(void)
.text:00006D62                 mov     ecx, [ebp+var_C]
.text:00006D65                 mov     large fs:0, ecx
.text:00006D6C                 pop     ecx
.text:00006D6D                 add     esp, 10h
.text:00006D70                 cmp     ebp, esp
.text:00006D72                 call    __RTC_CheckEsp
.text:00006D77                 mov     esp, ebp
.text:00006D79                 pop     ebp
.text:00006D7A                 retn
.text:00006D7A ??1CDecoder@NQuantum@NCompress@@UAE@XZ endp
.text:00006D7A
.text:00006D7A ; ---------------------------------------------------------------------------
.text:00006D7B                 align 4
.text:00006D7B _text           ends
.text:00006D7B
.text$x:00006D7C ; ===========================================================================
.text$x:00006D7C
.text$x:00006D7C ; Segment type: Pure code
.text$x:00006D7C ; Segment permissions: Read/Execute
.text$x:00006D7C _text$x         segment para public 'CODE' use32
.text$x:00006D7C                 assume cs:_text$x
.text$x:00006D7C                 ;org 6D7Ch
.text$x:00006D7C ; COMDAT (pick associative to section at 6D08)
.text$x:00006D7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006D7C
.text$x:00006D7C ; =============== S U B R O U T I N E =======================================
.text$x:00006D7C
.text$x:00006D7C
.text$x:00006D7C __unwindfunclet$??1CDecoder@NQuantum@NCompress@@UAE@XZ$0 proc near
.text$x:00006D7C                                         ; DATA XREF: .xdata$x:00006DA8o
.text$x:00006D7C                 mov     ecx, [ebp-10h]
.text$x:00006D7F                 add     ecx, 8          ; this
.text$x:00006D82                 jmp     ??1CLzOutWindow@@QAE@XZ ; CLzOutWindow::~CLzOutWindow(void)
.text$x:00006D82 __unwindfunclet$??1CDecoder@NQuantum@NCompress@@UAE@XZ$0 endp
.text$x:00006D82
.text$x:00006D87
.text$x:00006D87 ; =============== S U B R O U T I N E =======================================
.text$x:00006D87
.text$x:00006D87
.text$x:00006D87 __ehhandler$??1CDecoder@NQuantum@NCompress@@UAE@XZ proc near
.text$x:00006D87                                         ; DATA XREF: NCompress::NQuantum::CDecoder::~CDecoder(void)+5o
.text$x:00006D87
.text$x:00006D87 arg_4           = dword ptr  8
.text$x:00006D87
.text$x:00006D87                 mov     edx, [esp+arg_4]
.text$x:00006D8B                 lea     eax, [edx+0Ch]
.text$x:00006D8E                 mov     ecx, [edx-8]
.text$x:00006D91                 xor     ecx, eax
.text$x:00006D93                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006D98                 mov     eax, offset __ehfuncinfo$??1CDecoder@NQuantum@NCompress@@UAE@XZ
.text$x:00006D9D                 jmp     ___CxxFrameHandler3
.text$x:00006D9D __ehhandler$??1CDecoder@NQuantum@NCompress@@UAE@XZ endp
.text$x:00006D9D
.text$x:00006D9D ; ---------------------------------------------------------------------------
.text$x:00006DA2                 align 4
.text$x:00006DA2 _text$x         ends
.text$x:00006DA2
.xdata$x:00006DA4 ; ===========================================================================
.xdata$x:00006DA4
.xdata$x:00006DA4 ; Segment type: Pure data
.xdata$x:00006DA4 ; Segment permissions: Read
.xdata$x:00006DA4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006DA4                 assume cs:_xdata$x
.xdata$x:00006DA4                 ;org 6DA4h
.xdata$x:00006DA4 ; COMDAT (pick associative to section at 6D08)
.xdata$x:00006DA4 __unwindtable$??1CDecoder@NQuantum@NCompress@@UAE@XZ db 0FFh
.xdata$x:00006DA4                                         ; DATA XREF: .xdata$x:00006DB4o
.xdata$x:00006DA5                 db 0FFh
.xdata$x:00006DA6                 db 0FFh
.xdata$x:00006DA7                 db 0FFh
.xdata$x:00006DA8                 dd offset __unwindfunclet$??1CDecoder@NQuantum@NCompress@@UAE@XZ$0
.xdata$x:00006DAC __ehfuncinfo$??1CDecoder@NQuantum@NCompress@@UAE@XZ db  22h ; "
.xdata$x:00006DAC                                         ; DATA XREF: __ehhandler$??1CDecoder@NQuantum@NCompress@@UAE@XZ+11o
.xdata$x:00006DAD                 db    5
.xdata$x:00006DAE                 db  93h ; ô
.xdata$x:00006DAF                 db  19h
.xdata$x:00006DB0                 db    1
.xdata$x:00006DB1                 db    0
.xdata$x:00006DB2                 db    0
.xdata$x:00006DB3                 db    0
.xdata$x:00006DB4                 dd offset __unwindtable$??1CDecoder@NQuantum@NCompress@@UAE@XZ
.xdata$x:00006DB8                 db    0
.xdata$x:00006DB9                 db    0
.xdata$x:00006DBA                 db    0
.xdata$x:00006DBB                 db    0
.xdata$x:00006DBC                 db    0
.xdata$x:00006DBD                 db    0
.xdata$x:00006DBE                 db    0
.xdata$x:00006DBF                 db    0
.xdata$x:00006DC0                 db    0
.xdata$x:00006DC1                 db    0
.xdata$x:00006DC2                 db    0
.xdata$x:00006DC3                 db    0
.xdata$x:00006DC4                 db    0
.xdata$x:00006DC5                 db    0
.xdata$x:00006DC6                 db    0
.xdata$x:00006DC7                 db    0
.xdata$x:00006DC8                 db    0
.xdata$x:00006DC9                 db    0
.xdata$x:00006DCA                 db    0
.xdata$x:00006DCB                 db    0
.xdata$x:00006DCC                 db    1
.xdata$x:00006DCD                 db    0
.xdata$x:00006DCE                 db    0
.xdata$x:00006DCF                 db    0
.xdata$x:00006DCF _xdata$x        ends
.xdata$x:00006DCF
.text:00006DD0 ; ===========================================================================
.text:00006DD0
.text:00006DD0 ; Segment type: Pure code
.text:00006DD0 ; Segment permissions: Read/Execute
.text:00006DD0 _text           segment para public 'CODE' use32
.text:00006DD0                 assume cs:_text
.text:00006DD0                 ;org 6DD0h
.text:00006DD0 ; COMDAT (pick any)
.text:00006DD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006DD0
.text:00006DD0 ; =============== S U B R O U T I N E =======================================
.text:00006DD0
.text:00006DD0 ; Attributes: bp-based frame
.text:00006DD0
.text:00006DD0 ; _DWORD __thiscall CLzOutWindow::CLzOutWindow(CLzOutWindow *__hidden this)
.text:00006DD0                 public ??0CLzOutWindow@@QAE@XZ
.text:00006DD0 ??0CLzOutWindow@@QAE@XZ proc near       ; CODE XREF: NCompress::NQuantum::CDecoder::CDecoder(void)+30p
.text:00006DD0
.text:00006DD0 var_4           = dword ptr -4
.text:00006DD0
.text:00006DD0                 push    ebp
.text:00006DD1                 mov     ebp, esp
.text:00006DD3                 push    ecx
.text:00006DD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006DDB                 mov     [ebp+var_4], ecx
.text:00006DDE                 mov     ecx, [ebp+var_4] ; this
.text:00006DE1                 call    ??0COutBuffer@@QAE@XZ ; COutBuffer::COutBuffer(void)
.text:00006DE6                 mov     eax, [ebp+var_4]
.text:00006DE9                 add     esp, 4
.text:00006DEC                 cmp     ebp, esp
.text:00006DEE                 call    __RTC_CheckEsp
.text:00006DF3                 mov     esp, ebp
.text:00006DF5                 pop     ebp
.text:00006DF6                 retn
.text:00006DF6 ??0CLzOutWindow@@QAE@XZ endp
.text:00006DF6
.text:00006DF6 ; ---------------------------------------------------------------------------
.text:00006DF7                 align 4
.text:00006DF7 _text           ends
.text:00006DF7
.text:00006DF8 ; ===========================================================================
.text:00006DF8
.text:00006DF8 ; Segment type: Pure code
.text:00006DF8 ; Segment permissions: Read/Execute
.text:00006DF8 _text           segment para public 'CODE' use32
.text:00006DF8                 assume cs:_text
.text:00006DF8                 ;org 6DF8h
.text:00006DF8 ; COMDAT (pick any)
.text:00006DF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006DF8
.text:00006DF8 ; =============== S U B R O U T I N E =======================================
.text:00006DF8
.text:00006DF8 ; Attributes: bp-based frame
.text:00006DF8
.text:00006DF8 ; _DWORD __thiscall COutBuffer::COutBuffer(COutBuffer *__hidden this)
.text:00006DF8                 public ??0COutBuffer@@QAE@XZ
.text:00006DF8 ??0COutBuffer@@QAE@XZ proc near         ; CODE XREF: CLzOutWindow::CLzOutWindow(void)+11p
.text:00006DF8
.text:00006DF8 var_4           = dword ptr -4
.text:00006DF8
.text:00006DF8                 push    ebp
.text:00006DF9                 mov     ebp, esp
.text:00006DFB                 push    ecx
.text:00006DFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006E03                 mov     [ebp+var_4], ecx
.text:00006E06                 mov     eax, [ebp+var_4]
.text:00006E09                 mov     dword ptr [eax], 0
.text:00006E0F                 mov     ecx, [ebp+var_4]
.text:00006E12                 mov     dword ptr [ecx+4], 0
.text:00006E19                 mov     edx, [ebp+var_4]
.text:00006E1C                 mov     dword ptr [edx+14h], 0
.text:00006E23                 mov     eax, [ebp+var_4]
.text:00006E26                 mov     dword ptr [eax+20h], 0
.text:00006E2D                 mov     eax, [ebp+var_4]
.text:00006E30                 mov     esp, ebp
.text:00006E32                 pop     ebp
.text:00006E33                 retn
.text:00006E33 ??0COutBuffer@@QAE@XZ endp
.text:00006E33
.text:00006E33 _text           ends
.text:00006E33
.text:00006E34 ; ===========================================================================
.text:00006E34
.text:00006E34 ; Segment type: Pure code
.text:00006E34 ; Segment permissions: Read/Execute
.text:00006E34 _text           segment para public 'CODE' use32
.text:00006E34                 assume cs:_text
.text:00006E34                 ;org 6E34h
.text:00006E34 ; COMDAT (pick any)
.text:00006E34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E34
.text:00006E34 ; =============== S U B R O U T I N E =======================================
.text:00006E34
.text:00006E34 ; Attributes: bp-based frame
.text:00006E34
.text:00006E34 ; _DWORD __thiscall NCompress::NQuantum::NRangeCoder::CDecoder::CDecoder(NCompress::NQuantum::NRangeCoder::CDecoder *__hidden this)
.text:00006E34                 public ??0CDecoder@NRangeCoder@NQuantum@NCompress@@QAE@XZ
.text:00006E34 ??0CDecoder@NRangeCoder@NQuantum@NCompress@@QAE@XZ proc near
.text:00006E34                                         ; CODE XREF: NCompress::NQuantum::CDecoder::CDecoder(void)+3Bp
.text:00006E34
.text:00006E34 var_4           = dword ptr -4
.text:00006E34
.text:00006E34                 push    ebp
.text:00006E35                 mov     ebp, esp
.text:00006E37                 push    ecx
.text:00006E38                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006E3F                 mov     [ebp+var_4], ecx
.text:00006E42                 mov     ecx, [ebp+var_4]
.text:00006E45                 add     ecx, 10h        ; this
.text:00006E48                 call    ??0CStreamBitDecoder@NQuantum@NCompress@@QAE@XZ ; NCompress::NQuantum::CStreamBitDecoder::CStreamBitDecoder(void)
.text:00006E4D                 mov     eax, [ebp+var_4]
.text:00006E50                 add     esp, 4
.text:00006E53                 cmp     ebp, esp
.text:00006E55                 call    __RTC_CheckEsp
.text:00006E5A                 mov     esp, ebp
.text:00006E5C                 pop     ebp
.text:00006E5D                 retn
.text:00006E5D ??0CDecoder@NRangeCoder@NQuantum@NCompress@@QAE@XZ endp
.text:00006E5D
.text:00006E5D ; ---------------------------------------------------------------------------
.text:00006E5E                 align 10h
.text:00006E5E _text           ends
.text:00006E5E
.text:00006E60 ; ===========================================================================
.text:00006E60
.text:00006E60 ; Segment type: Pure code
.text:00006E60 ; Segment permissions: Read/Execute
.text:00006E60 _text           segment para public 'CODE' use32
.text:00006E60                 assume cs:_text
.text:00006E60                 ;org 6E60h
.text:00006E60 ; COMDAT (pick any)
.text:00006E60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E60
.text:00006E60 ; =============== S U B R O U T I N E =======================================
.text:00006E60
.text:00006E60 ; Attributes: bp-based frame
.text:00006E60
.text:00006E60 ; _DWORD __thiscall NCompress::NQuantum::NRangeCoder::CDecoder::~CDecoder(NCompress::NQuantum::NRangeCoder::CDecoder *__hidden this)
.text:00006E60                 public ??1CDecoder@NRangeCoder@NQuantum@NCompress@@QAE@XZ
.text:00006E60 ??1CDecoder@NRangeCoder@NQuantum@NCompress@@QAE@XZ proc near
.text:00006E60                                         ; CODE XREF: NCompress::NQuantum::CDecoder::~CDecoder(void)+43p
.text:00006E60
.text:00006E60 var_4           = dword ptr -4
.text:00006E60
.text:00006E60                 push    ebp
.text:00006E61                 mov     ebp, esp
.text:00006E63                 push    ecx
.text:00006E64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006E6B                 mov     [ebp+var_4], ecx
.text:00006E6E                 mov     ecx, [ebp+var_4]
.text:00006E71                 add     ecx, 10h        ; this
.text:00006E74                 call    ??1CStreamBitDecoder@NQuantum@NCompress@@QAE@XZ ; NCompress::NQuantum::CStreamBitDecoder::~CStreamBitDecoder(void)
.text:00006E79                 add     esp, 4
.text:00006E7C                 cmp     ebp, esp
.text:00006E7E                 call    __RTC_CheckEsp
.text:00006E83                 mov     esp, ebp
.text:00006E85                 pop     ebp
.text:00006E86                 retn
.text:00006E86 ??1CDecoder@NRangeCoder@NQuantum@NCompress@@QAE@XZ endp
.text:00006E86
.text:00006E86 ; ---------------------------------------------------------------------------
.text:00006E87                 align 4
.text:00006E87 _text           ends
.text:00006E87
.text:00006E88 ; ===========================================================================
.text:00006E88
.text:00006E88 ; Segment type: Pure code
.text:00006E88 ; Segment permissions: Read/Execute
.text:00006E88 _text           segment para public 'CODE' use32
.text:00006E88                 assume cs:_text
.text:00006E88                 ;org 6E88h
.text:00006E88 ; COMDAT (pick any)
.text:00006E88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E88
.text:00006E88 ; =============== S U B R O U T I N E =======================================
.text:00006E88
.text:00006E88 ; Attributes: bp-based frame
.text:00006E88
.text:00006E88 ; _DWORD __thiscall NCompress::NQuantum::CStreamBitDecoder::CStreamBitDecoder(NCompress::NQuantum::CStreamBitDecoder *__hidden this)
.text:00006E88                 public ??0CStreamBitDecoder@NQuantum@NCompress@@QAE@XZ
.text:00006E88 ??0CStreamBitDecoder@NQuantum@NCompress@@QAE@XZ proc near
.text:00006E88                                         ; CODE XREF: NCompress::NQuantum::NRangeCoder::CDecoder::CDecoder(void)+14p
.text:00006E88
.text:00006E88 var_4           = dword ptr -4
.text:00006E88
.text:00006E88                 push    ebp
.text:00006E89                 mov     ebp, esp
.text:00006E8B                 push    ecx
.text:00006E8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006E93                 mov     [ebp+var_4], ecx
.text:00006E96                 mov     ecx, [ebp+var_4]
.text:00006E99                 add     ecx, 8
.text:00006E9C                 call    ??0CInBuffer@@QAE@XZ ; CInBuffer::CInBuffer(void)
.text:00006EA1                 mov     eax, [ebp+var_4]
.text:00006EA4                 add     esp, 4
.text:00006EA7                 cmp     ebp, esp
.text:00006EA9                 call    __RTC_CheckEsp
.text:00006EAE                 mov     esp, ebp
.text:00006EB0                 pop     ebp
.text:00006EB1                 retn
.text:00006EB1 ??0CStreamBitDecoder@NQuantum@NCompress@@QAE@XZ endp
.text:00006EB1
.text:00006EB1 ; ---------------------------------------------------------------------------
.text:00006EB2                 align 4
.text:00006EB2 _text           ends
.text:00006EB2
.text:00006EB4 ; ===========================================================================
.text:00006EB4
.text:00006EB4 ; Segment type: Pure code
.text:00006EB4 ; Segment permissions: Read/Execute
.text:00006EB4 _text           segment para public 'CODE' use32
.text:00006EB4                 assume cs:_text
.text:00006EB4                 ;org 6EB4h
.text:00006EB4 ; COMDAT (pick any)
.text:00006EB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006EB4
.text:00006EB4 ; =============== S U B R O U T I N E =======================================
.text:00006EB4
.text:00006EB4 ; Attributes: bp-based frame
.text:00006EB4
.text:00006EB4 ; public: __thiscall CInBuffer::CInBuffer(void)
.text:00006EB4                 public ??0CInBuffer@@QAE@XZ
.text:00006EB4 ??0CInBuffer@@QAE@XZ proc near          ; CODE XREF: NCompress::NQuantum::CStreamBitDecoder::CStreamBitDecoder(void)+14p
.text:00006EB4
.text:00006EB4 var_4           = dword ptr -4
.text:00006EB4
.text:00006EB4                 push    ebp
.text:00006EB5                 mov     ebp, esp
.text:00006EB7                 push    ecx
.text:00006EB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006EBF                 mov     [ebp+var_4], ecx
.text:00006EC2                 mov     ecx, [ebp+var_4] ; this
.text:00006EC5                 call    ??0CInBufferBase@@QAE@XZ ; CInBufferBase::CInBufferBase(void)
.text:00006ECA                 mov     eax, [ebp+var_4]
.text:00006ECD                 add     esp, 4
.text:00006ED0                 cmp     ebp, esp
.text:00006ED2                 call    __RTC_CheckEsp
.text:00006ED7                 mov     esp, ebp
.text:00006ED9                 pop     ebp
.text:00006EDA                 retn
.text:00006EDA ??0CInBuffer@@QAE@XZ endp
.text:00006EDA
.text:00006EDA ; ---------------------------------------------------------------------------
.text:00006EDB                 align 4
.text:00006EDB _text           ends
.text:00006EDB
.text:00006EDC ; ===========================================================================
.text:00006EDC
.text:00006EDC ; Segment type: Pure code
.text:00006EDC ; Segment permissions: Read/Execute
.text:00006EDC _text           segment para public 'CODE' use32
.text:00006EDC                 assume cs:_text
.text:00006EDC                 ;org 6EDCh
.text:00006EDC ; COMDAT (pick any)
.text:00006EDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006EDC
.text:00006EDC ; =============== S U B R O U T I N E =======================================
.text:00006EDC
.text:00006EDC ; Attributes: bp-based frame
.text:00006EDC
.text:00006EDC ; _DWORD __thiscall NCompress::NQuantum::CStreamBitDecoder::~CStreamBitDecoder(NCompress::NQuantum::CStreamBitDecoder *__hidden this)
.text:00006EDC                 public ??1CStreamBitDecoder@NQuantum@NCompress@@QAE@XZ
.text:00006EDC ??1CStreamBitDecoder@NQuantum@NCompress@@QAE@XZ proc near
.text:00006EDC                                         ; CODE XREF: NCompress::NQuantum::NRangeCoder::CDecoder::~CDecoder(void)+14p
.text:00006EDC
.text:00006EDC var_4           = dword ptr -4
.text:00006EDC
.text:00006EDC                 push    ebp
.text:00006EDD                 mov     ebp, esp
.text:00006EDF                 push    ecx
.text:00006EE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006EE7                 mov     [ebp+var_4], ecx
.text:00006EEA                 mov     ecx, [ebp+var_4]
.text:00006EED                 add     ecx, 8          ; this
.text:00006EF0                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:00006EF5                 add     esp, 4
.text:00006EF8                 cmp     ebp, esp
.text:00006EFA                 call    __RTC_CheckEsp
.text:00006EFF                 mov     esp, ebp
.text:00006F01                 pop     ebp
.text:00006F02                 retn
.text:00006F02 ??1CStreamBitDecoder@NQuantum@NCompress@@QAE@XZ endp
.text:00006F02
.text:00006F02 ; ---------------------------------------------------------------------------
.text:00006F03                 align 4
.text:00006F03 _text           ends
.text:00006F03
.text:00006F04 ; ===========================================================================
.text:00006F04
.text:00006F04 ; Segment type: Pure code
.text:00006F04 ; Segment permissions: Read/Execute
.text:00006F04 _text           segment para public 'CODE' use32
.text:00006F04                 assume cs:_text
.text:00006F04                 ;org 6F04h
.text:00006F04 ; COMDAT (pick any)
.text:00006F04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006F04
.text:00006F04 ; =============== S U B R O U T I N E =======================================
.text:00006F04
.text:00006F04 ; Attributes: bp-based frame
.text:00006F04
.text:00006F04 ; _DWORD __thiscall NArchive::NCab::CCabBlockInStream::CCabBlockInStream(NArchive::NCab::CCabBlockInStream *__hidden this)
.text:00006F04                 public ??0CCabBlockInStream@NCab@NArchive@@QAE@XZ
.text:00006F04 ??0CCabBlockInStream@NCab@NArchive@@QAE@XZ proc near
.text:00006F04                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3ACp
.text:00006F04
.text:00006F04 var_4           = dword ptr -4
.text:00006F04
.text:00006F04                 push    ebp
.text:00006F05                 mov     ebp, esp
.text:00006F07                 push    ecx
.text:00006F08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006F0F                 mov     [ebp+var_4], ecx
.text:00006F12                 mov     ecx, [ebp+var_4] ; this
.text:00006F15                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00006F1A                 mov     ecx, [ebp+var_4]
.text:00006F1D                 add     ecx, 4          ; this
.text:00006F20                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00006F25                 mov     eax, [ebp+var_4]
.text:00006F28                 mov     dword ptr [eax], offset ??_7CCabBlockInStream@NCab@NArchive@@6B@ ; const NArchive::NCab::CCabBlockInStream::`vftable'
.text:00006F2E                 mov     ecx, [ebp+var_4]
.text:00006F31                 mov     dword ptr [ecx+8], 0
.text:00006F38                 mov     edx, [ebp+var_4]
.text:00006F3B                 mov     dword ptr [edx+14h], 0
.text:00006F42                 mov     eax, [ebp+var_4]
.text:00006F45                 mov     byte ptr [eax+18h], 0
.text:00006F49                 mov     eax, [ebp+var_4]
.text:00006F4C                 add     esp, 4
.text:00006F4F                 cmp     ebp, esp
.text:00006F51                 call    __RTC_CheckEsp
.text:00006F56                 mov     esp, ebp
.text:00006F58                 pop     ebp
.text:00006F59                 retn
.text:00006F59 ??0CCabBlockInStream@NCab@NArchive@@QAE@XZ endp
.text:00006F59
.text:00006F59 ; ---------------------------------------------------------------------------
.text:00006F5A                 align 4
.text:00006F5A _text           ends
.text:00006F5A
.rdata:00006F5C ; ===========================================================================
.rdata:00006F5C
.rdata:00006F5C ; Segment type: Pure data
.rdata:00006F5C ; Segment permissions: Read
.rdata:00006F5C _rdata          segment dword public 'DATA' use32
.rdata:00006F5C                 assume cs:_rdata
.rdata:00006F5C                 ;org 6F5Ch
.rdata:00006F5C ; COMDAT (pick largest)
.rdata:00006F5C                 dd offset ??_R4CCabBlockInStream@NCab@NArchive@@6B@ ; const NArchive::NCab::CCabBlockInStream::`RTTI Complete Object Locator'
.rdata:00006F60                 public ??_7CCabBlockInStream@NCab@NArchive@@6B@
.rdata:00006F60 ; const NArchive::NCab::CCabBlockInStream::`vftable'
.rdata:00006F60 ??_7CCabBlockInStream@NCab@NArchive@@6B@ dd offset ?QueryInterface@CCabBlockInStream@NCab@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:00006F60                                         ; DATA XREF: NArchive::NCab::CCabBlockInStream::CCabBlockInStream(void)+24o
.rdata:00006F60                                         ; NArchive::NCab::CCabBlockInStream::QueryInterface(_GUID const &,void * *)
.rdata:00006F64                 dd offset ?AddRef@CCabBlockInStream@NCab@NArchive@@UAGKXZ ; NArchive::NCab::CCabBlockInStream::AddRef(void)
.rdata:00006F68                 dd offset ?Release@CCabBlockInStream@NCab@NArchive@@UAGKXZ ; NArchive::NCab::CCabBlockInStream::Release(void)
.rdata:00006F6C                 dd offset ?Read@CCabBlockInStream@NCab@NArchive@@UAGJPAXIPAI@Z ; NArchive::NCab::CCabBlockInStream::Read(void *,uint,uint *)
.rdata:00006F6C _rdata          ends
.rdata:00006F6C
.rdata$r:00006F70 ; ===========================================================================
.rdata$r:00006F70
.rdata$r:00006F70 ; Segment type: Pure data
.rdata$r:00006F70 ; Segment permissions: Read
.rdata$r:00006F70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006F70                 assume cs:_rdata$r
.rdata$r:00006F70                 ;org 6F70h
.rdata$r:00006F70 ; COMDAT (pick any)
.rdata$r:00006F70                 public ??_R4CCabBlockInStream@NCab@NArchive@@6B@
.rdata$r:00006F70 ; const NArchive::NCab::CCabBlockInStream::`RTTI Complete Object Locator'
.rdata$r:00006F70 ??_R4CCabBlockInStream@NCab@NArchive@@6B@ db    0
.rdata$r:00006F70                                         ; DATA XREF: .rdata:00006F5Co
.rdata$r:00006F71                 db    0
.rdata$r:00006F72                 db    0
.rdata$r:00006F73                 db    0
.rdata$r:00006F74                 db    0
.rdata$r:00006F75                 db    0
.rdata$r:00006F76                 db    0
.rdata$r:00006F77                 db    0
.rdata$r:00006F78                 db    0
.rdata$r:00006F79                 db    0
.rdata$r:00006F7A                 db    0
.rdata$r:00006F7B                 db    0
.rdata$r:00006F7C                 dd offset ??_R0?AVCCabBlockInStream@NCab@NArchive@@@8 ; NArchive::NCab::CCabBlockInStream `RTTI Type Descriptor'
.rdata$r:00006F80                 dd offset ??_R3CCabBlockInStream@NCab@NArchive@@8 ; NArchive::NCab::CCabBlockInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006F80 _rdata$r        ends
.rdata$r:00006F80
.data:00006F84 ; ===========================================================================
.data:00006F84
.data:00006F84 ; Segment type: Pure data
.data:00006F84 ; Segment permissions: Read/Write
.data:00006F84 _data           segment dword public 'DATA' use32
.data:00006F84                 assume cs:_data
.data:00006F84                 ;org 6F84h
.data:00006F84 ; COMDAT (pick any)
.data:00006F84                 public ??_R0?AVCCabBlockInStream@NCab@NArchive@@@8
.data:00006F84 ; class NArchive::NCab::CCabBlockInStream `RTTI Type Descriptor'
.data:00006F84 ??_R0?AVCCabBlockInStream@NCab@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00006F84                                         ; DATA XREF: .rdata$r:00006F7Co
.data:00006F84                                         ; .rdata$r:NArchive::NCab::CCabBlockInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00006F84                                         ; const type_info::`vftable'
.data:00006F88                 db    0
.data:00006F89                 db    0
.data:00006F8A                 db    0
.data:00006F8B                 db    0
.data:00006F8C                 db  2Eh ; .
.data:00006F8D                 db  3Fh ; ?
.data:00006F8E                 db  41h ; A
.data:00006F8F                 db  56h ; V
.data:00006F90                 db  43h ; C
.data:00006F91                 db  43h ; C
.data:00006F92                 db  61h ; a
.data:00006F93                 db  62h ; b
.data:00006F94                 db  42h ; B
.data:00006F95                 db  6Ch ; l
.data:00006F96                 db  6Fh ; o
.data:00006F97                 db  63h ; c
.data:00006F98                 db  6Bh ; k
.data:00006F99                 db  49h ; I
.data:00006F9A                 db  6Eh ; n
.data:00006F9B                 db  53h ; S
.data:00006F9C                 db  74h ; t
.data:00006F9D                 db  72h ; r
.data:00006F9E                 db  65h ; e
.data:00006F9F                 db  61h ; a
.data:00006FA0                 db  6Dh ; m
.data:00006FA1                 db  40h ; @
.data:00006FA2                 db  4Eh ; N
.data:00006FA3                 db  43h ; C
.data:00006FA4                 db  61h ; a
.data:00006FA5                 db  62h ; b
.data:00006FA6                 db  40h ; @
.data:00006FA7                 db  4Eh ; N
.data:00006FA8                 db  41h ; A
.data:00006FA9                 db  72h ; r
.data:00006FAA                 db  63h ; c
.data:00006FAB                 db  68h ; h
.data:00006FAC                 db  69h ; i
.data:00006FAD                 db  76h ; v
.data:00006FAE                 db  65h ; e
.data:00006FAF                 db  40h ; @
.data:00006FB0                 db  40h ; @
.data:00006FB1                 db    0
.data:00006FB2                 align 4
.data:00006FB2 _data           ends
.data:00006FB2
.rdata$r:00006FB4 ; ===========================================================================
.rdata$r:00006FB4
.rdata$r:00006FB4 ; Segment type: Pure data
.rdata$r:00006FB4 ; Segment permissions: Read
.rdata$r:00006FB4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006FB4                 assume cs:_rdata$r
.rdata$r:00006FB4                 ;org 6FB4h
.rdata$r:00006FB4 ; COMDAT (pick any)
.rdata$r:00006FB4                 public ??_R3CCabBlockInStream@NCab@NArchive@@8
.rdata$r:00006FB4 ; NArchive::NCab::CCabBlockInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006FB4 ??_R3CCabBlockInStream@NCab@NArchive@@8 db    0
.rdata$r:00006FB4                                         ; DATA XREF: .rdata$r:00006F80o
.rdata$r:00006FB4                                         ; .rdata$r:00006FF0o
.rdata$r:00006FB5                 db    0
.rdata$r:00006FB6                 db    0
.rdata$r:00006FB7                 db    0
.rdata$r:00006FB8                 db    1
.rdata$r:00006FB9                 db    0
.rdata$r:00006FBA                 db    0
.rdata$r:00006FBB                 db    0
.rdata$r:00006FBC                 db    4
.rdata$r:00006FBD                 db    0
.rdata$r:00006FBE                 db    0
.rdata$r:00006FBF                 db    0
.rdata$r:00006FC0                 dd offset ??_R2CCabBlockInStream@NCab@NArchive@@8 ; NArchive::NCab::CCabBlockInStream::`RTTI Base Class Array'
.rdata$r:00006FC0 _rdata$r        ends
.rdata$r:00006FC0
.rdata$r:00006FC4 ; ===========================================================================
.rdata$r:00006FC4
.rdata$r:00006FC4 ; Segment type: Pure data
.rdata$r:00006FC4 ; Segment permissions: Read
.rdata$r:00006FC4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006FC4                 assume cs:_rdata$r
.rdata$r:00006FC4                 ;org 6FC4h
.rdata$r:00006FC4 ; COMDAT (pick any)
.rdata$r:00006FC4                 public ??_R2CCabBlockInStream@NCab@NArchive@@8
.rdata$r:00006FC4 ; NArchive::NCab::CCabBlockInStream::`RTTI Base Class Array'
.rdata$r:00006FC4 ??_R2CCabBlockInStream@NCab@NArchive@@8 dd offset ??_R1A@?0A@EA@CCabBlockInStream@NCab@NArchive@@8
.rdata$r:00006FC4                                         ; DATA XREF: .rdata$r:00006FC0o
.rdata$r:00006FC4                                         ; NArchive::NCab::CCabBlockInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006FC8                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006FCC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006FD0                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00006FD4                 db    0
.rdata$r:00006FD5                 align 4
.rdata$r:00006FD5 _rdata$r        ends
.rdata$r:00006FD5
.rdata$r:00006FD8 ; ===========================================================================
.rdata$r:00006FD8
.rdata$r:00006FD8 ; Segment type: Pure data
.rdata$r:00006FD8 ; Segment permissions: Read
.rdata$r:00006FD8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006FD8                 assume cs:_rdata$r
.rdata$r:00006FD8                 ;org 6FD8h
.rdata$r:00006FD8 ; COMDAT (pick any)
.rdata$r:00006FD8                 public ??_R1A@?0A@EA@CCabBlockInStream@NCab@NArchive@@8
.rdata$r:00006FD8 ; NArchive::NCab::CCabBlockInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006FD8 ??_R1A@?0A@EA@CCabBlockInStream@NCab@NArchive@@8 dd offset ??_R0?AVCCabBlockInStream@NCab@NArchive@@@8
.rdata$r:00006FD8                                         ; DATA XREF: .rdata$r:NArchive::NCab::CCabBlockInStream::`RTTI Base Class Array'o
.rdata$r:00006FD8                                         ; NArchive::NCab::CCabBlockInStream `RTTI Type Descriptor'
.rdata$r:00006FDC                 db    3
.rdata$r:00006FDD                 db    0
.rdata$r:00006FDE                 db    0
.rdata$r:00006FDF                 db    0
.rdata$r:00006FE0                 db    0
.rdata$r:00006FE1                 db    0
.rdata$r:00006FE2                 db    0
.rdata$r:00006FE3                 db    0
.rdata$r:00006FE4                 db 0FFh
.rdata$r:00006FE5                 db 0FFh
.rdata$r:00006FE6                 db 0FFh
.rdata$r:00006FE7                 db 0FFh
.rdata$r:00006FE8                 db    0
.rdata$r:00006FE9                 db    0
.rdata$r:00006FEA                 db    0
.rdata$r:00006FEB                 db    0
.rdata$r:00006FEC                 db  40h ; @
.rdata$r:00006FED                 db    0
.rdata$r:00006FEE                 db    0
.rdata$r:00006FEF                 db    0
.rdata$r:00006FF0                 dd offset ??_R3CCabBlockInStream@NCab@NArchive@@8 ; NArchive::NCab::CCabBlockInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006FF0 _rdata$r        ends
.rdata$r:00006FF0
.text:00006FF4 ; ===========================================================================
.text:00006FF4
.text:00006FF4 ; Segment type: Pure code
.text:00006FF4 ; Segment permissions: Read/Execute
.text:00006FF4 _text           segment para public 'CODE' use32
.text:00006FF4                 assume cs:_text
.text:00006FF4                 ;org 6FF4h
.text:00006FF4 ; COMDAT (pick any)
.text:00006FF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006FF4
.text:00006FF4 ; =============== S U B R O U T I N E =======================================
.text:00006FF4
.text:00006FF4 ; Attributes: bp-based frame
.text:00006FF4
.text:00006FF4 ; __int32 __stdcall NArchive::NCab::CCabBlockInStream::QueryInterface(NArchive::NCab::CCabBlockInStream *this, const struct _GUID *Buf1, void **)
.text:00006FF4                 public ?QueryInterface@CCabBlockInStream@NCab@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00006FF4 ?QueryInterface@CCabBlockInStream@NCab@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00006FF4                                         ; DATA XREF: .rdata:const NArchive::NCab::CCabBlockInStream::`vftable'o
.text:00006FF4
.text:00006FF4 this            = dword ptr  8
.text:00006FF4 Buf1            = dword ptr  0Ch
.text:00006FF4 arg_8           = dword ptr  10h
.text:00006FF4
.text:00006FF4                 push    ebp
.text:00006FF5                 mov     ebp, esp
.text:00006FF7                 mov     eax, [ebp+arg_8]
.text:00006FFA                 mov     dword ptr [eax], 0
.text:00007000                 push    offset _IID_IUnknown ; Buf2
.text:00007005                 mov     ecx, [ebp+Buf1]
.text:00007008                 push    ecx             ; Buf1
.text:00007009                 call    ___@8           ; __(x,x)
.text:0000700E                 test    eax, eax
.text:00007010                 jz      short loc_701C
.text:00007012                 mov     edx, [ebp+arg_8]
.text:00007015                 mov     eax, [ebp+this]
.text:00007018                 mov     [edx], eax
.text:0000701A                 jmp     short loc_7023
.text:0000701C ; ---------------------------------------------------------------------------
.text:0000701C
.text:0000701C loc_701C:                               ; CODE XREF: NArchive::NCab::CCabBlockInStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:0000701C                 mov     eax, 80004002h
.text:00007021                 jmp     short loc_7034
.text:00007023 ; ---------------------------------------------------------------------------
.text:00007023
.text:00007023 loc_7023:                               ; CODE XREF: NArchive::NCab::CCabBlockInStream::QueryInterface(_GUID const &,void * *)+26j
.text:00007023                 mov     ecx, [ebp+this]
.text:00007026                 mov     edx, [ecx+4]
.text:00007029                 add     edx, 1
.text:0000702C                 mov     eax, [ebp+this]
.text:0000702F                 mov     [eax+4], edx
.text:00007032                 xor     eax, eax
.text:00007034
.text:00007034 loc_7034:                               ; CODE XREF: NArchive::NCab::CCabBlockInStream::QueryInterface(_GUID const &,void * *)+2Dj
.text:00007034                 cmp     ebp, esp
.text:00007036                 call    __RTC_CheckEsp
.text:0000703B                 pop     ebp
.text:0000703C                 retn    0Ch
.text:0000703C ?QueryInterface@CCabBlockInStream@NCab@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000703C
.text:0000703C ; ---------------------------------------------------------------------------
.text:0000703F                 align 10h
.text:0000703F _text           ends
.text:0000703F
.text:00007040 ; ===========================================================================
.text:00007040
.text:00007040 ; Segment type: Pure code
.text:00007040 ; Segment permissions: Read/Execute
.text:00007040 _text           segment para public 'CODE' use32
.text:00007040                 assume cs:_text
.text:00007040                 ;org 7040h
.text:00007040 ; COMDAT (pick any)
.text:00007040                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007040
.text:00007040 ; =============== S U B R O U T I N E =======================================
.text:00007040
.text:00007040 ; Attributes: bp-based frame
.text:00007040
.text:00007040 ; unsigned __int32 __stdcall NArchive::NCab::CCabBlockInStream::AddRef(NArchive::NCab::CCabBlockInStream *this)
.text:00007040                 public ?AddRef@CCabBlockInStream@NCab@NArchive@@UAGKXZ
.text:00007040 ?AddRef@CCabBlockInStream@NCab@NArchive@@UAGKXZ proc near
.text:00007040                                         ; DATA XREF: .rdata:00006F64o
.text:00007040
.text:00007040 var_4           = dword ptr -4
.text:00007040 this            = dword ptr  8
.text:00007040
.text:00007040                 push    ebp
.text:00007041                 mov     ebp, esp
.text:00007043                 push    ecx
.text:00007044                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000704B                 mov     eax, [ebp+this]
.text:0000704E                 mov     ecx, [eax+4]
.text:00007051                 add     ecx, 1
.text:00007054                 mov     [ebp+var_4], ecx
.text:00007057                 mov     edx, [ebp+this]
.text:0000705A                 mov     eax, [ebp+var_4]
.text:0000705D                 mov     [edx+4], eax
.text:00007060                 mov     eax, [ebp+var_4]
.text:00007063                 mov     esp, ebp
.text:00007065                 pop     ebp
.text:00007066                 retn    4
.text:00007066 ?AddRef@CCabBlockInStream@NCab@NArchive@@UAGKXZ endp
.text:00007066
.text:00007066 ; ---------------------------------------------------------------------------
.text:00007069                 align 4
.text:00007069 _text           ends
.text:00007069
.text:0000706C ; ===========================================================================
.text:0000706C
.text:0000706C ; Segment type: Pure code
.text:0000706C ; Segment permissions: Read/Execute
.text:0000706C _text           segment para public 'CODE' use32
.text:0000706C                 assume cs:_text
.text:0000706C                 ;org 706Ch
.text:0000706C ; COMDAT (pick any)
.text:0000706C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000706C
.text:0000706C ; =============== S U B R O U T I N E =======================================
.text:0000706C
.text:0000706C ; Attributes: bp-based frame
.text:0000706C
.text:0000706C ; unsigned __int32 __stdcall NArchive::NCab::CCabBlockInStream::Release(NArchive::NCab::CCabBlockInStream *this)
.text:0000706C                 public ?Release@CCabBlockInStream@NCab@NArchive@@UAGKXZ
.text:0000706C ?Release@CCabBlockInStream@NCab@NArchive@@UAGKXZ proc near
.text:0000706C                                         ; DATA XREF: .rdata:00006F68o
.text:0000706C
.text:0000706C var_10          = dword ptr -10h
.text:0000706C var_C           = dword ptr -0Ch
.text:0000706C var_8           = dword ptr -8
.text:0000706C var_4           = dword ptr -4
.text:0000706C this            = dword ptr  8
.text:0000706C
.text:0000706C                 push    ebp
.text:0000706D                 mov     ebp, esp
.text:0000706F                 sub     esp, 10h
.text:00007072                 mov     eax, 0CCCCCCCCh
.text:00007077                 mov     [ebp+var_10], eax
.text:0000707A                 mov     [ebp+var_C], eax
.text:0000707D                 mov     [ebp+var_8], eax
.text:00007080                 mov     [ebp+var_4], eax
.text:00007083                 mov     eax, [ebp+this]
.text:00007086                 mov     ecx, [eax+4]
.text:00007089                 sub     ecx, 1
.text:0000708C                 mov     [ebp+var_C], ecx
.text:0000708F                 mov     edx, [ebp+this]
.text:00007092                 mov     eax, [ebp+var_C]
.text:00007095                 mov     [edx+4], eax
.text:00007098                 cmp     [ebp+var_C], 0
.text:0000709C                 jz      short loc_70A6
.text:0000709E                 mov     ecx, [ebp+this]
.text:000070A1                 mov     eax, [ecx+4]
.text:000070A4                 jmp     short loc_70D0
.text:000070A6 ; ---------------------------------------------------------------------------
.text:000070A6
.text:000070A6 loc_70A6:                               ; CODE XREF: NArchive::NCab::CCabBlockInStream::Release(void)+30j
.text:000070A6                 mov     edx, [ebp+this]
.text:000070A9                 mov     [ebp+var_8], edx
.text:000070AC                 mov     eax, [ebp+var_8]
.text:000070AF                 mov     [ebp+var_4], eax
.text:000070B2                 cmp     [ebp+var_4], 0
.text:000070B6                 jz      short loc_70C7
.text:000070B8                 push    1
.text:000070BA                 mov     ecx, [ebp+var_4]
.text:000070BD                 call    ??_GCCabBlockInStream@NCab@NArchive@@QAEPAXI@Z ; NArchive::NCab::CCabBlockInStream::`scalar deleting destructor'(uint)
.text:000070C2                 mov     [ebp+var_10], eax
.text:000070C5                 jmp     short loc_70CE
.text:000070C7 ; ---------------------------------------------------------------------------
.text:000070C7
.text:000070C7 loc_70C7:                               ; CODE XREF: NArchive::NCab::CCabBlockInStream::Release(void)+4Aj
.text:000070C7                 mov     [ebp+var_10], 0
.text:000070CE
.text:000070CE loc_70CE:                               ; CODE XREF: NArchive::NCab::CCabBlockInStream::Release(void)+59j
.text:000070CE                 xor     eax, eax
.text:000070D0
.text:000070D0 loc_70D0:                               ; CODE XREF: NArchive::NCab::CCabBlockInStream::Release(void)+38j
.text:000070D0                 add     esp, 10h
.text:000070D3                 cmp     ebp, esp
.text:000070D5                 call    __RTC_CheckEsp
.text:000070DA                 mov     esp, ebp
.text:000070DC                 pop     ebp
.text:000070DD                 retn    4
.text:000070DD ?Release@CCabBlockInStream@NCab@NArchive@@UAGKXZ endp
.text:000070DD
.text:000070DD _text           ends
.text:000070DD
.text:000070E0 ; ===========================================================================
.text:000070E0
.text:000070E0 ; Segment type: Pure code
.text:000070E0 ; Segment permissions: Read/Execute
.text:000070E0 _text           segment para public 'CODE' use32
.text:000070E0                 assume cs:_text
.text:000070E0                 ;org 70E0h
.text:000070E0 ; COMDAT (pick any)
.text:000070E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000070E0
.text:000070E0 ; =============== S U B R O U T I N E =======================================
.text:000070E0
.text:000070E0 ; Attributes: bp-based frame
.text:000070E0
.text:000070E0 ; void __thiscall NArchive::NCab::CCabBlockInStream::InitForNewBlock(NArchive::NCab::CCabBlockInStream *__hidden this)
.text:000070E0                 public ?InitForNewBlock@CCabBlockInStream@NCab@NArchive@@QAEXXZ
.text:000070E0 ?InitForNewBlock@CCabBlockInStream@NCab@NArchive@@QAEXXZ proc near
.text:000070E0                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1587p
.text:000070E0
.text:000070E0 var_4           = dword ptr -4
.text:000070E0
.text:000070E0                 push    ebp
.text:000070E1                 mov     ebp, esp
.text:000070E3                 push    ecx
.text:000070E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000070EB                 mov     [ebp+var_4], ecx
.text:000070EE                 mov     eax, [ebp+var_4]
.text:000070F1                 mov     dword ptr [eax+0Ch], 0
.text:000070F8                 mov     ecx, [ebp+var_4]
.text:000070FB                 mov     dword ptr [ecx+10h], 0
.text:00007102                 mov     esp, ebp
.text:00007104                 pop     ebp
.text:00007105                 retn
.text:00007105 ?InitForNewBlock@CCabBlockInStream@NCab@NArchive@@QAEXXZ endp
.text:00007105
.text:00007105 ; ---------------------------------------------------------------------------
.text:00007106                 align 4
.text:00007106 _text           ends
.text:00007106
.text:00007108 ; ===========================================================================
.text:00007108
.text:00007108 ; Segment type: Pure code
.text:00007108 ; Segment permissions: Read/Execute
.text:00007108 _text           segment para public 'CODE' use32
.text:00007108                 assume cs:_text
.text:00007108                 ;org 7108h
.text:00007108 ; COMDAT (pick any)
.text:00007108                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007108
.text:00007108 ; =============== S U B R O U T I N E =======================================
.text:00007108
.text:00007108 ; Attributes: bp-based frame
.text:00007108
.text:00007108 ; public: void * __thiscall NArchive::NCab::CCabBlockInStream::`scalar deleting destructor'(unsigned int)
.text:00007108                 public ??_GCCabBlockInStream@NCab@NArchive@@QAEPAXI@Z
.text:00007108 ??_GCCabBlockInStream@NCab@NArchive@@QAEPAXI@Z proc near
.text:00007108                                         ; CODE XREF: NArchive::NCab::CCabBlockInStream::Release(void)+51p
.text:00007108
.text:00007108 var_4           = dword ptr -4
.text:00007108 arg_0           = dword ptr  8
.text:00007108
.text:00007108                 push    ebp
.text:00007109                 mov     ebp, esp
.text:0000710B                 push    ecx
.text:0000710C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007113                 mov     [ebp+var_4], ecx
.text:00007116                 mov     ecx, [ebp+var_4] ; this
.text:00007119                 call    ??1CCabBlockInStream@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CCabBlockInStream::~CCabBlockInStream(void)
.text:0000711E                 mov     eax, [ebp+arg_0]
.text:00007121                 and     eax, 1
.text:00007124                 jz      short loc_7132
.text:00007126                 mov     ecx, [ebp+var_4]
.text:00007129                 push    ecx             ; void *
.text:0000712A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000712F                 add     esp, 4
.text:00007132
.text:00007132 loc_7132:                               ; CODE XREF: NArchive::NCab::CCabBlockInStream::`scalar deleting destructor'(uint)+1Cj
.text:00007132                 mov     eax, [ebp+var_4]
.text:00007135                 add     esp, 4
.text:00007138                 cmp     ebp, esp
.text:0000713A                 call    __RTC_CheckEsp
.text:0000713F                 mov     esp, ebp
.text:00007141                 pop     ebp
.text:00007142                 retn    4
.text:00007142 ??_GCCabBlockInStream@NCab@NArchive@@QAEPAXI@Z endp
.text:00007142
.text:00007142 ; ---------------------------------------------------------------------------
.text:00007145                 align 4
.text:00007145 _text           ends
.text:00007145
.text:00007148 ; ===========================================================================
.text:00007148
.text:00007148 ; Segment type: Pure code
.text:00007148 ; Segment permissions: Read/Execute
.text:00007148 _text           segment para public 'CODE' use32
.text:00007148                 assume cs:_text
.text:00007148                 ;org 7148h
.text:00007148 ; COMDAT (pick any)
.text:00007148                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007148
.text:00007148 ; =============== S U B R O U T I N E =======================================
.text:00007148
.text:00007148 ; Attributes: bp-based frame
.text:00007148
.text:00007148 ; unsigned __int64 __thiscall NArchive::NCab::CItem::GetEndOffset(NArchive::NCab::CItem *__hidden this)
.text:00007148                 public ?GetEndOffset@CItem@NCab@NArchive@@QBE_KXZ
.text:00007148 ?GetEndOffset@CItem@NCab@NArchive@@QBE_KXZ proc near
.text:00007148                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1B3p
.text:00007148                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+B79p ...
.text:00007148
.text:00007148 var_4           = dword ptr -4
.text:00007148
.text:00007148                 push    ebp
.text:00007149                 mov     ebp, esp
.text:0000714B                 push    ecx
.text:0000714C                 push    esi
.text:0000714D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007154                 mov     [ebp+var_4], ecx
.text:00007157                 mov     eax, [ebp+var_4]
.text:0000715A                 mov     eax, [eax+0Ch]
.text:0000715D                 xor     edx, edx
.text:0000715F                 mov     ecx, [ebp+var_4]
.text:00007162                 mov     ecx, [ecx+10h]
.text:00007165                 xor     esi, esi
.text:00007167                 add     eax, ecx
.text:00007169                 adc     edx, esi
.text:0000716B                 pop     esi
.text:0000716C                 mov     esp, ebp
.text:0000716E                 pop     ebp
.text:0000716F                 retn
.text:0000716F ?GetEndOffset@CItem@NCab@NArchive@@QBE_KXZ endp
.text:0000716F
.text:0000716F _text           ends
.text:0000716F
.text:00007170 ; ===========================================================================
.text:00007170
.text:00007170 ; Segment type: Pure code
.text:00007170 ; Segment permissions: Read/Execute
.text:00007170 _text           segment para public 'CODE' use32
.text:00007170                 assume cs:_text
.text:00007170                 ;org 7170h
.text:00007170 ; COMDAT (pick any)
.text:00007170                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007170
.text:00007170 ; =============== S U B R O U T I N E =======================================
.text:00007170
.text:00007170 ; Attributes: bp-based frame
.text:00007170
.text:00007170 ; unsigned __int8 __thiscall NArchive::NCab::CArchInfo::GetDataBlockReserveSize(NArchive::NCab::CArchInfo *__hidden this)
.text:00007170                 public ?GetDataBlockReserveSize@CArchInfo@NCab@NArchive@@QBEEXZ
.text:00007170 ?GetDataBlockReserveSize@CArchInfo@NCab@NArchive@@QBEEXZ proc near
.text:00007170                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+13FDp
.text:00007170
.text:00007170 var_8           = dword ptr -8
.text:00007170 var_4           = dword ptr -4
.text:00007170
.text:00007170                 push    ebp
.text:00007171                 mov     ebp, esp
.text:00007173                 sub     esp, 8
.text:00007176                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000717D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007184                 mov     [ebp+var_4], ecx
.text:00007187                 mov     ecx, [ebp+var_4] ; this
.text:0000718A                 call    ?ReserveBlockPresent@CArchInfo@NCab@NArchive@@QBE_NXZ ; NArchive::NCab::CArchInfo::ReserveBlockPresent(void)
.text:0000718F                 movzx   eax, al
.text:00007192                 test    eax, eax
.text:00007194                 jz      short loc_71A2
.text:00007196                 mov     ecx, [ebp+var_4]
.text:00007199                 movzx   edx, byte ptr [ecx+1Bh]
.text:0000719D                 mov     [ebp+var_8], edx
.text:000071A0                 jmp     short loc_71A9
.text:000071A2 ; ---------------------------------------------------------------------------
.text:000071A2
.text:000071A2 loc_71A2:                               ; CODE XREF: NArchive::NCab::CArchInfo::GetDataBlockReserveSize(void)+24j
.text:000071A2                 mov     [ebp+var_8], 0
.text:000071A9
.text:000071A9 loc_71A9:                               ; CODE XREF: NArchive::NCab::CArchInfo::GetDataBlockReserveSize(void)+30j
.text:000071A9                 mov     al, byte ptr [ebp+var_8]
.text:000071AC                 add     esp, 8
.text:000071AF                 cmp     ebp, esp
.text:000071B1                 call    __RTC_CheckEsp
.text:000071B6                 mov     esp, ebp
.text:000071B8                 pop     ebp
.text:000071B9                 retn
.text:000071B9 ?GetDataBlockReserveSize@CArchInfo@NCab@NArchive@@QBEEXZ endp
.text:000071B9
.text:000071B9 ; ---------------------------------------------------------------------------
.text:000071BA                 align 4
.text:000071BA _text           ends
.text:000071BA
.text:000071BC ; ===========================================================================
.text:000071BC
.text:000071BC ; Segment type: Pure code
.text:000071BC ; Segment permissions: Read/Execute
.text:000071BC _text           segment para public 'CODE' use32
.text:000071BC                 assume cs:_text
.text:000071BC                 ;org 71BCh
.text:000071BC ; COMDAT (pick any)
.text:000071BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000071BC
.text:000071BC ; =============== S U B R O U T I N E =======================================
.text:000071BC
.text:000071BC ; Attributes: bp-based frame
.text:000071BC
.text:000071BC ; bool __thiscall NArchive::NCab::CArchInfo::ReserveBlockPresent(NArchive::NCab::CArchInfo *__hidden this)
.text:000071BC                 public ?ReserveBlockPresent@CArchInfo@NCab@NArchive@@QBE_NXZ
.text:000071BC ?ReserveBlockPresent@CArchInfo@NCab@NArchive@@QBE_NXZ proc near
.text:000071BC                                         ; CODE XREF: NArchive::NCab::CArchInfo::GetDataBlockReserveSize(void)+1Ap
.text:000071BC
.text:000071BC var_4           = dword ptr -4
.text:000071BC
.text:000071BC                 push    ebp
.text:000071BD                 mov     ebp, esp
.text:000071BF                 push    ecx
.text:000071C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000071C7                 mov     [ebp+var_4], ecx
.text:000071CA                 mov     eax, [ebp+var_4]
.text:000071CD                 mov     eax, [eax+0Ch]
.text:000071D0                 and     eax, 4
.text:000071D3                 neg     eax
.text:000071D5                 sbb     eax, eax
.text:000071D7                 neg     eax
.text:000071D9                 mov     esp, ebp
.text:000071DB                 pop     ebp
.text:000071DC                 retn
.text:000071DC ?ReserveBlockPresent@CArchInfo@NCab@NArchive@@QBE_NXZ endp
.text:000071DC
.text:000071DC ; ---------------------------------------------------------------------------
.text:000071DD                 align 10h
.text:000071DD _text           ends
.text:000071DD
.text:000071E0 ; ===========================================================================
.text:000071E0
.text:000071E0 ; Segment type: Pure code
.text:000071E0 ; Segment permissions: Read/Execute
.text:000071E0 _text           segment para public 'CODE' use32
.text:000071E0                 assume cs:_text
.text:000071E0                 ;org 71E0h
.text:000071E0 ; COMDAT (pick any)
.text:000071E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000071E0
.text:000071E0 ; =============== S U B R O U T I N E =======================================
.text:000071E0
.text:000071E0 ; Attributes: bp-based frame
.text:000071E0
.text:000071E0 ; _DWORD __thiscall NArchive::NCab::CFolderOutStream::CFolderOutStream(NArchive::NCab::CFolderOutStream *__hidden this)
.text:000071E0                 public ??0CFolderOutStream@NCab@NArchive@@QAE@XZ
.text:000071E0 ??0CFolderOutStream@NCab@NArchive@@QAE@XZ proc near
.text:000071E0                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+E06p
.text:000071E0
.text:000071E0 var_10          = dword ptr -10h
.text:000071E0 var_C           = dword ptr -0Ch
.text:000071E0 var_4           = dword ptr -4
.text:000071E0
.text:000071E0                 push    ebp
.text:000071E1                 mov     ebp, esp
.text:000071E3                 push    0FFFFFFFFh
.text:000071E5                 push    offset __ehhandler$??0CFolderOutStream@NCab@NArchive@@QAE@XZ
.text:000071EA                 mov     eax, large fs:0
.text:000071F0                 push    eax
.text:000071F1                 push    ecx
.text:000071F2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000071F9                 mov     eax, dword ptr ds:___security_cookie
.text:000071FE                 xor     eax, ebp
.text:00007200                 push    eax
.text:00007201                 lea     eax, [ebp+var_C]
.text:00007204                 mov     large fs:0, eax
.text:0000720A                 mov     [ebp+var_10], ecx
.text:0000720D                 mov     ecx, [ebp+var_10] ; this
.text:00007210                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:00007215                 mov     ecx, [ebp+var_10]
.text:00007218                 add     ecx, 4          ; this
.text:0000721B                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00007220                 mov     eax, [ebp+var_10]
.text:00007223                 mov     dword ptr [eax], offset ??_7CFolderOutStream@NCab@NArchive@@6B@ ; const NArchive::NCab::CFolderOutStream::`vftable'
.text:00007229                 mov     ecx, [ebp+var_10]
.text:0000722C                 mov     dword ptr [ecx+10h], 0
.text:00007233                 mov     ecx, [ebp+var_10]
.text:00007236                 add     ecx, 2Ch ; ','
.text:00007239                 call    ??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>(void)
.text:0000723E                 mov     [ebp+var_4], 0
.text:00007245                 mov     ecx, [ebp+var_10]
.text:00007248                 add     ecx, 34h ; '4'
.text:0000724B                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00007250                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007257                 mov     eax, [ebp+var_10]
.text:0000725A                 mov     ecx, [ebp+var_C]
.text:0000725D                 mov     large fs:0, ecx
.text:00007264                 pop     ecx
.text:00007265                 add     esp, 10h
.text:00007268                 cmp     ebp, esp
.text:0000726A                 call    __RTC_CheckEsp
.text:0000726F                 mov     esp, ebp
.text:00007271                 pop     ebp
.text:00007272                 retn
.text:00007272 ??0CFolderOutStream@NCab@NArchive@@QAE@XZ endp
.text:00007272
.text:00007272 ; ---------------------------------------------------------------------------
.text:00007273                 align 4
.text:00007273 _text           ends
.text:00007273
.text$x:00007274 ; ===========================================================================
.text$x:00007274
.text$x:00007274 ; Segment type: Pure code
.text$x:00007274 ; Segment permissions: Read/Execute
.text$x:00007274 _text$x         segment para public 'CODE' use32
.text$x:00007274                 assume cs:_text$x
.text$x:00007274                 ;org 7274h
.text$x:00007274 ; COMDAT (pick associative to section at 71E0)
.text$x:00007274                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007274
.text$x:00007274 ; =============== S U B R O U T I N E =======================================
.text$x:00007274
.text$x:00007274
.text$x:00007274 __unwindfunclet$??0CFolderOutStream@NCab@NArchive@@QAE@XZ$0 proc near
.text$x:00007274                                         ; DATA XREF: .xdata$x:000072B4o
.text$x:00007274                 mov     ecx, [ebp-10h]
.text$x:00007277                 add     ecx, 2Ch ; ','
.text$x:0000727A                 jmp     ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text$x:0000727A __unwindfunclet$??0CFolderOutStream@NCab@NArchive@@QAE@XZ$0 endp
.text$x:0000727A
.text$x:0000727F
.text$x:0000727F ; =============== S U B R O U T I N E =======================================
.text$x:0000727F
.text$x:0000727F
.text$x:0000727F __ehhandler$??0CFolderOutStream@NCab@NArchive@@QAE@XZ proc near
.text$x:0000727F                                         ; DATA XREF: NArchive::NCab::CFolderOutStream::CFolderOutStream(void)+5o
.text$x:0000727F
.text$x:0000727F arg_4           = dword ptr  8
.text$x:0000727F
.text$x:0000727F                 mov     edx, [esp+arg_4]
.text$x:00007283                 lea     eax, [edx+0Ch]
.text$x:00007286                 mov     ecx, [edx-8]
.text$x:00007289                 xor     ecx, eax
.text$x:0000728B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007290                 mov     eax, offset __ehfuncinfo$??0CFolderOutStream@NCab@NArchive@@QAE@XZ
.text$x:00007295                 jmp     ___CxxFrameHandler3
.text$x:00007295 __ehhandler$??0CFolderOutStream@NCab@NArchive@@QAE@XZ endp
.text$x:00007295
.text$x:00007295 ; ---------------------------------------------------------------------------
.text$x:0000729A                 align 4
.text$x:0000729A _text$x         ends
.text$x:0000729A
.rdata:0000729C ; ===========================================================================
.rdata:0000729C
.rdata:0000729C ; Segment type: Pure data
.rdata:0000729C ; Segment permissions: Read
.rdata:0000729C _rdata          segment dword public 'DATA' use32
.rdata:0000729C                 assume cs:_rdata
.rdata:0000729C                 ;org 729Ch
.rdata:0000729C ; COMDAT (pick largest)
.rdata:0000729C                 dd offset ??_R4CFolderOutStream@NCab@NArchive@@6B@ ; const NArchive::NCab::CFolderOutStream::`RTTI Complete Object Locator'
.rdata:000072A0                 public ??_7CFolderOutStream@NCab@NArchive@@6B@
.rdata:000072A0 ; const NArchive::NCab::CFolderOutStream::`vftable'
.rdata:000072A0 ??_7CFolderOutStream@NCab@NArchive@@6B@ dd offset ?QueryInterface@CFolderOutStream@NCab@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:000072A0                                         ; DATA XREF: NArchive::NCab::CFolderOutStream::CFolderOutStream(void)+43o
.rdata:000072A0                                         ; NArchive::NCab::CFolderOutStream::~CFolderOutStream(void)+30o
.rdata:000072A0                                         ; NArchive::NCab::CFolderOutStream::QueryInterface(_GUID const &,void * *)
.rdata:000072A4                 dd offset ?AddRef@CFolderOutStream@NCab@NArchive@@UAGKXZ ; NArchive::NCab::CFolderOutStream::AddRef(void)
.rdata:000072A8                 dd offset ?Release@CFolderOutStream@NCab@NArchive@@UAGKXZ ; NArchive::NCab::CFolderOutStream::Release(void)
.rdata:000072AC                 dd offset ?Write@CFolderOutStream@NCab@NArchive@@UAGJPBXIPAI@Z ; NArchive::NCab::CFolderOutStream::Write(void const *,uint,uint *)
.rdata:000072AC _rdata          ends
.rdata:000072AC
.xdata$x:000072B0 ; ===========================================================================
.xdata$x:000072B0
.xdata$x:000072B0 ; Segment type: Pure data
.xdata$x:000072B0 ; Segment permissions: Read
.xdata$x:000072B0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000072B0                 assume cs:_xdata$x
.xdata$x:000072B0                 ;org 72B0h
.xdata$x:000072B0 ; COMDAT (pick associative to section at 71E0)
.xdata$x:000072B0 __unwindtable$??0CFolderOutStream@NCab@NArchive@@QAE@XZ db 0FFh
.xdata$x:000072B0                                         ; DATA XREF: .xdata$x:000072C0o
.xdata$x:000072B1                 db 0FFh
.xdata$x:000072B2                 db 0FFh
.xdata$x:000072B3                 db 0FFh
.xdata$x:000072B4                 dd offset __unwindfunclet$??0CFolderOutStream@NCab@NArchive@@QAE@XZ$0
.xdata$x:000072B8 __ehfuncinfo$??0CFolderOutStream@NCab@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000072B8                                         ; DATA XREF: __ehhandler$??0CFolderOutStream@NCab@NArchive@@QAE@XZ+11o
.xdata$x:000072B9                 db    5
.xdata$x:000072BA                 db  93h ; ô
.xdata$x:000072BB                 db  19h
.xdata$x:000072BC                 db    1
.xdata$x:000072BD                 db    0
.xdata$x:000072BE                 db    0
.xdata$x:000072BF                 db    0
.xdata$x:000072C0                 dd offset __unwindtable$??0CFolderOutStream@NCab@NArchive@@QAE@XZ
.xdata$x:000072C4                 db    0
.xdata$x:000072C5                 db    0
.xdata$x:000072C6                 db    0
.xdata$x:000072C7                 db    0
.xdata$x:000072C8                 db    0
.xdata$x:000072C9                 db    0
.xdata$x:000072CA                 db    0
.xdata$x:000072CB                 db    0
.xdata$x:000072CC                 db    0
.xdata$x:000072CD                 db    0
.xdata$x:000072CE                 db    0
.xdata$x:000072CF                 db    0
.xdata$x:000072D0                 db    0
.xdata$x:000072D1                 db    0
.xdata$x:000072D2                 db    0
.xdata$x:000072D3                 db    0
.xdata$x:000072D4                 db    0
.xdata$x:000072D5                 db    0
.xdata$x:000072D6                 db    0
.xdata$x:000072D7                 db    0
.xdata$x:000072D8                 db    1
.xdata$x:000072D9                 db    0
.xdata$x:000072DA                 db    0
.xdata$x:000072DB                 db    0
.xdata$x:000072DB _xdata$x        ends
.xdata$x:000072DB
.rdata$r:000072DC ; ===========================================================================
.rdata$r:000072DC
.rdata$r:000072DC ; Segment type: Pure data
.rdata$r:000072DC ; Segment permissions: Read
.rdata$r:000072DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000072DC                 assume cs:_rdata$r
.rdata$r:000072DC                 ;org 72DCh
.rdata$r:000072DC ; COMDAT (pick any)
.rdata$r:000072DC                 public ??_R4CFolderOutStream@NCab@NArchive@@6B@
.rdata$r:000072DC ; const NArchive::NCab::CFolderOutStream::`RTTI Complete Object Locator'
.rdata$r:000072DC ??_R4CFolderOutStream@NCab@NArchive@@6B@ db    0
.rdata$r:000072DC                                         ; DATA XREF: .rdata:0000729Co
.rdata$r:000072DD                 db    0
.rdata$r:000072DE                 db    0
.rdata$r:000072DF                 db    0
.rdata$r:000072E0                 db    0
.rdata$r:000072E1                 db    0
.rdata$r:000072E2                 db    0
.rdata$r:000072E3                 db    0
.rdata$r:000072E4                 db    0
.rdata$r:000072E5                 db    0
.rdata$r:000072E6                 db    0
.rdata$r:000072E7                 db    0
.rdata$r:000072E8                 dd offset ??_R0?AVCFolderOutStream@NCab@NArchive@@@8 ; NArchive::NCab::CFolderOutStream `RTTI Type Descriptor'
.rdata$r:000072EC                 dd offset ??_R3CFolderOutStream@NCab@NArchive@@8 ; NArchive::NCab::CFolderOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000072EC _rdata$r        ends
.rdata$r:000072EC
.data:000072F0 ; ===========================================================================
.data:000072F0
.data:000072F0 ; Segment type: Pure data
.data:000072F0 ; Segment permissions: Read/Write
.data:000072F0 _data           segment dword public 'DATA' use32
.data:000072F0                 assume cs:_data
.data:000072F0                 ;org 72F0h
.data:000072F0 ; COMDAT (pick any)
.data:000072F0                 public ??_R0?AVCFolderOutStream@NCab@NArchive@@@8
.data:000072F0 ; class NArchive::NCab::CFolderOutStream `RTTI Type Descriptor'
.data:000072F0 ??_R0?AVCFolderOutStream@NCab@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:000072F0                                         ; DATA XREF: .rdata$r:000072E8o
.data:000072F0                                         ; .rdata$r:NArchive::NCab::CFolderOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000072F0                                         ; const type_info::`vftable'
.data:000072F4                 align 8
.data:000072F8 a_?avcfolderout db '.?AVCFolderOutStream@NCab@NArchive@@',0
.data:0000731D                 align 10h
.data:0000731D _data           ends
.data:0000731D
.rdata$r:00007320 ; ===========================================================================
.rdata$r:00007320
.rdata$r:00007320 ; Segment type: Pure data
.rdata$r:00007320 ; Segment permissions: Read
.rdata$r:00007320 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007320                 assume cs:_rdata$r
.rdata$r:00007320                 ;org 7320h
.rdata$r:00007320 ; COMDAT (pick any)
.rdata$r:00007320                 public ??_R3CFolderOutStream@NCab@NArchive@@8
.rdata$r:00007320 ; NArchive::NCab::CFolderOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007320 ??_R3CFolderOutStream@NCab@NArchive@@8 db    0
.rdata$r:00007320                                         ; DATA XREF: .rdata$r:000072ECo
.rdata$r:00007320                                         ; .rdata$r:0000735Co
.rdata$r:00007321                 db    0
.rdata$r:00007322                 db    0
.rdata$r:00007323                 db    0
.rdata$r:00007324                 db    1
.rdata$r:00007325                 db    0
.rdata$r:00007326                 db    0
.rdata$r:00007327                 db    0
.rdata$r:00007328                 db    4
.rdata$r:00007329                 db    0
.rdata$r:0000732A                 db    0
.rdata$r:0000732B                 db    0
.rdata$r:0000732C                 dd offset ??_R2CFolderOutStream@NCab@NArchive@@8 ; NArchive::NCab::CFolderOutStream::`RTTI Base Class Array'
.rdata$r:0000732C _rdata$r        ends
.rdata$r:0000732C
.rdata$r:00007330 ; ===========================================================================
.rdata$r:00007330
.rdata$r:00007330 ; Segment type: Pure data
.rdata$r:00007330 ; Segment permissions: Read
.rdata$r:00007330 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007330                 assume cs:_rdata$r
.rdata$r:00007330                 ;org 7330h
.rdata$r:00007330 ; COMDAT (pick any)
.rdata$r:00007330                 public ??_R2CFolderOutStream@NCab@NArchive@@8
.rdata$r:00007330 ; NArchive::NCab::CFolderOutStream::`RTTI Base Class Array'
.rdata$r:00007330 ??_R2CFolderOutStream@NCab@NArchive@@8 dd offset ??_R1A@?0A@EA@CFolderOutStream@NCab@NArchive@@8
.rdata$r:00007330                                         ; DATA XREF: .rdata$r:0000732Co
.rdata$r:00007330                                         ; NArchive::NCab::CFolderOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007334                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007338                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000733C                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00007340                 db    0
.rdata$r:00007341                 align 4
.rdata$r:00007341 _rdata$r        ends
.rdata$r:00007341
.rdata$r:00007344 ; ===========================================================================
.rdata$r:00007344
.rdata$r:00007344 ; Segment type: Pure data
.rdata$r:00007344 ; Segment permissions: Read
.rdata$r:00007344 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007344                 assume cs:_rdata$r
.rdata$r:00007344                 ;org 7344h
.rdata$r:00007344 ; COMDAT (pick any)
.rdata$r:00007344                 public ??_R1A@?0A@EA@CFolderOutStream@NCab@NArchive@@8
.rdata$r:00007344 ; NArchive::NCab::CFolderOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007344 ??_R1A@?0A@EA@CFolderOutStream@NCab@NArchive@@8 dd offset ??_R0?AVCFolderOutStream@NCab@NArchive@@@8
.rdata$r:00007344                                         ; DATA XREF: .rdata$r:NArchive::NCab::CFolderOutStream::`RTTI Base Class Array'o
.rdata$r:00007344                                         ; NArchive::NCab::CFolderOutStream `RTTI Type Descriptor'
.rdata$r:00007348                 db    3
.rdata$r:00007349                 db    0
.rdata$r:0000734A                 db    0
.rdata$r:0000734B                 db    0
.rdata$r:0000734C                 db    0
.rdata$r:0000734D                 db    0
.rdata$r:0000734E                 db    0
.rdata$r:0000734F                 db    0
.rdata$r:00007350                 db 0FFh
.rdata$r:00007351                 db 0FFh
.rdata$r:00007352                 db 0FFh
.rdata$r:00007353                 db 0FFh
.rdata$r:00007354                 db    0
.rdata$r:00007355                 db    0
.rdata$r:00007356                 db    0
.rdata$r:00007357                 db    0
.rdata$r:00007358                 db  40h ; @
.rdata$r:00007359                 db    0
.rdata$r:0000735A                 db    0
.rdata$r:0000735B                 db    0
.rdata$r:0000735C                 dd offset ??_R3CFolderOutStream@NCab@NArchive@@8 ; NArchive::NCab::CFolderOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000735C _rdata$r        ends
.rdata$r:0000735C
.rdata$r:00007360 ; ===========================================================================
.rdata$r:00007360
.rdata$r:00007360 ; Segment type: Pure data
.rdata$r:00007360 ; Segment permissions: Read
.rdata$r:00007360 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007360                 assume cs:_rdata$r
.rdata$r:00007360                 ;org 7360h
.rdata$r:00007360 ; COMDAT (pick any)
.rdata$r:00007360                 public ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00007360 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007360 ??_R1A@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:00007360                                         ; DATA XREF: .rdata$r:00007334o
.rdata$r:00007360                                         ; .rdata$r:ISequentialOutStream::`RTTI Base Class Array'o
.rdata$r:00007360                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00007364                 db    1
.rdata$r:00007365                 db    0
.rdata$r:00007366                 db    0
.rdata$r:00007367                 db    0
.rdata$r:00007368                 db    0
.rdata$r:00007369                 db    0
.rdata$r:0000736A                 db    0
.rdata$r:0000736B                 db    0
.rdata$r:0000736C                 db 0FFh
.rdata$r:0000736D                 db 0FFh
.rdata$r:0000736E                 db 0FFh
.rdata$r:0000736F                 db 0FFh
.rdata$r:00007370                 db    0
.rdata$r:00007371                 db    0
.rdata$r:00007372                 db    0
.rdata$r:00007373                 db    0
.rdata$r:00007374                 db  40h ; @
.rdata$r:00007375                 db    0
.rdata$r:00007376                 db    0
.rdata$r:00007377                 db    0
.rdata$r:00007378                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007378 _rdata$r        ends
.rdata$r:00007378
.data:0000737C ; ===========================================================================
.data:0000737C
.data:0000737C ; Segment type: Pure data
.data:0000737C ; Segment permissions: Read/Write
.data:0000737C _data           segment dword public 'DATA' use32
.data:0000737C                 assume cs:_data
.data:0000737C                 ;org 737Ch
.data:0000737C ; COMDAT (pick any)
.data:0000737C                 public ??_R0?AUISequentialOutStream@@@8
.data:0000737C ; struct ISequentialOutStream `RTTI Type Descriptor'
.data:0000737C ??_R0?AUISequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:0000737C                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000737C                                         ; .rdata$r:0000763Co
.data:0000737C                                         ; const type_info::`vftable'
.data:00007380                 db    0
.data:00007381                 db    0
.data:00007382                 db    0
.data:00007383                 db    0
.data:00007384                 db  2Eh ; .
.data:00007385                 db  3Fh ; ?
.data:00007386                 db  41h ; A
.data:00007387                 db  55h ; U
.data:00007388                 db  49h ; I
.data:00007389                 db  53h ; S
.data:0000738A                 db  65h ; e
.data:0000738B                 db  71h ; q
.data:0000738C                 db  75h ; u
.data:0000738D                 db  65h ; e
.data:0000738E                 db  6Eh ; n
.data:0000738F                 db  74h ; t
.data:00007390                 db  69h ; i
.data:00007391                 db  61h ; a
.data:00007392                 db  6Ch ; l
.data:00007393                 db  4Fh ; O
.data:00007394                 db  75h ; u
.data:00007395                 db  74h ; t
.data:00007396                 db  53h ; S
.data:00007397                 db  74h ; t
.data:00007398                 db  72h ; r
.data:00007399                 db  65h ; e
.data:0000739A                 db  61h ; a
.data:0000739B                 db  6Dh ; m
.data:0000739C                 db  40h ; @
.data:0000739D                 db  40h ; @
.data:0000739E                 db    0
.data:0000739F                 align 10h
.data:0000739F _data           ends
.data:0000739F
.rdata$r:000073A0 ; ===========================================================================
.rdata$r:000073A0
.rdata$r:000073A0 ; Segment type: Pure data
.rdata$r:000073A0 ; Segment permissions: Read
.rdata$r:000073A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000073A0                 assume cs:_rdata$r
.rdata$r:000073A0                 ;org 73A0h
.rdata$r:000073A0 ; COMDAT (pick any)
.rdata$r:000073A0                 public ??_R3ISequentialOutStream@@8
.rdata$r:000073A0 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000073A0 ??_R3ISequentialOutStream@@8 db    0    ; DATA XREF: .rdata$r:00007378o
.rdata$r:000073A0                                         ; .rdata$r:00007640o
.rdata$r:000073A1                 db    0
.rdata$r:000073A2                 db    0
.rdata$r:000073A3                 db    0
.rdata$r:000073A4                 db    0
.rdata$r:000073A5                 db    0
.rdata$r:000073A6                 db    0
.rdata$r:000073A7                 db    0
.rdata$r:000073A8                 db    2
.rdata$r:000073A9                 db    0
.rdata$r:000073AA                 db    0
.rdata$r:000073AB                 db    0
.rdata$r:000073AC                 dd offset ??_R2ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:000073AC _rdata$r        ends
.rdata$r:000073AC
.rdata$r:000073B0 ; ===========================================================================
.rdata$r:000073B0
.rdata$r:000073B0 ; Segment type: Pure data
.rdata$r:000073B0 ; Segment permissions: Read
.rdata$r:000073B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000073B0                 assume cs:_rdata$r
.rdata$r:000073B0                 ;org 73B0h
.rdata$r:000073B0 ; COMDAT (pick any)
.rdata$r:000073B0                 public ??_R2ISequentialOutStream@@8
.rdata$r:000073B0 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:000073B0 ??_R2ISequentialOutStream@@8 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:000073B0                                         ; DATA XREF: .rdata$r:000073ACo
.rdata$r:000073B0                                         ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000073B4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000073B8                 db    0
.rdata$r:000073B9                 align 4
.rdata$r:000073B9 _rdata$r        ends
.rdata$r:000073B9
.text:000073BC ; ===========================================================================
.text:000073BC
.text:000073BC ; Segment type: Pure code
.text:000073BC ; Segment permissions: Read/Execute
.text:000073BC _text           segment para public 'CODE' use32
.text:000073BC                 assume cs:_text
.text:000073BC                 ;org 73BCh
.text:000073BC ; COMDAT (pick any)
.text:000073BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000073BC
.text:000073BC ; =============== S U B R O U T I N E =======================================
.text:000073BC
.text:000073BC ; Attributes: bp-based frame
.text:000073BC
.text:000073BC ; __int32 __stdcall NArchive::NCab::CFolderOutStream::QueryInterface(NArchive::NCab::CFolderOutStream *this, const struct _GUID *Buf1, void **)
.text:000073BC                 public ?QueryInterface@CFolderOutStream@NCab@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:000073BC ?QueryInterface@CFolderOutStream@NCab@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000073BC                                         ; DATA XREF: .rdata:const NArchive::NCab::CFolderOutStream::`vftable'o
.text:000073BC
.text:000073BC this            = dword ptr  8
.text:000073BC Buf1            = dword ptr  0Ch
.text:000073BC arg_8           = dword ptr  10h
.text:000073BC
.text:000073BC                 push    ebp
.text:000073BD                 mov     ebp, esp
.text:000073BF                 mov     eax, [ebp+arg_8]
.text:000073C2                 mov     dword ptr [eax], 0
.text:000073C8                 push    offset _IID_IUnknown ; Buf2
.text:000073CD                 mov     ecx, [ebp+Buf1]
.text:000073D0                 push    ecx             ; Buf1
.text:000073D1                 call    ___@8           ; __(x,x)
.text:000073D6                 test    eax, eax
.text:000073D8                 jz      short loc_73E4
.text:000073DA                 mov     edx, [ebp+arg_8]
.text:000073DD                 mov     eax, [ebp+this]
.text:000073E0                 mov     [edx], eax
.text:000073E2                 jmp     short loc_73EB
.text:000073E4 ; ---------------------------------------------------------------------------
.text:000073E4
.text:000073E4 loc_73E4:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:000073E4                 mov     eax, 80004002h
.text:000073E9                 jmp     short loc_73FC
.text:000073EB ; ---------------------------------------------------------------------------
.text:000073EB
.text:000073EB loc_73EB:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::QueryInterface(_GUID const &,void * *)+26j
.text:000073EB                 mov     ecx, [ebp+this]
.text:000073EE                 mov     edx, [ecx+4]
.text:000073F1                 add     edx, 1
.text:000073F4                 mov     eax, [ebp+this]
.text:000073F7                 mov     [eax+4], edx
.text:000073FA                 xor     eax, eax
.text:000073FC
.text:000073FC loc_73FC:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::QueryInterface(_GUID const &,void * *)+2Dj
.text:000073FC                 cmp     ebp, esp
.text:000073FE                 call    __RTC_CheckEsp
.text:00007403                 pop     ebp
.text:00007404                 retn    0Ch
.text:00007404 ?QueryInterface@CFolderOutStream@NCab@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:00007404
.text:00007404 ; ---------------------------------------------------------------------------
.text:00007407                 align 4
.text:00007407 _text           ends
.text:00007407
.text:00007408 ; ===========================================================================
.text:00007408
.text:00007408 ; Segment type: Pure code
.text:00007408 ; Segment permissions: Read/Execute
.text:00007408 _text           segment para public 'CODE' use32
.text:00007408                 assume cs:_text
.text:00007408                 ;org 7408h
.text:00007408 ; COMDAT (pick any)
.text:00007408                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007408
.text:00007408 ; =============== S U B R O U T I N E =======================================
.text:00007408
.text:00007408 ; Attributes: bp-based frame
.text:00007408
.text:00007408 ; unsigned __int32 __stdcall NArchive::NCab::CFolderOutStream::AddRef(NArchive::NCab::CFolderOutStream *this)
.text:00007408                 public ?AddRef@CFolderOutStream@NCab@NArchive@@UAGKXZ
.text:00007408 ?AddRef@CFolderOutStream@NCab@NArchive@@UAGKXZ proc near
.text:00007408                                         ; DATA XREF: .rdata:000072A4o
.text:00007408
.text:00007408 var_4           = dword ptr -4
.text:00007408 this            = dword ptr  8
.text:00007408
.text:00007408                 push    ebp
.text:00007409                 mov     ebp, esp
.text:0000740B                 push    ecx
.text:0000740C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007413                 mov     eax, [ebp+this]
.text:00007416                 mov     ecx, [eax+4]
.text:00007419                 add     ecx, 1
.text:0000741C                 mov     [ebp+var_4], ecx
.text:0000741F                 mov     edx, [ebp+this]
.text:00007422                 mov     eax, [ebp+var_4]
.text:00007425                 mov     [edx+4], eax
.text:00007428                 mov     eax, [ebp+var_4]
.text:0000742B                 mov     esp, ebp
.text:0000742D                 pop     ebp
.text:0000742E                 retn    4
.text:0000742E ?AddRef@CFolderOutStream@NCab@NArchive@@UAGKXZ endp
.text:0000742E
.text:0000742E ; ---------------------------------------------------------------------------
.text:00007431                 align 4
.text:00007431 _text           ends
.text:00007431
.text:00007434 ; ===========================================================================
.text:00007434
.text:00007434 ; Segment type: Pure code
.text:00007434 ; Segment permissions: Read/Execute
.text:00007434 _text           segment para public 'CODE' use32
.text:00007434                 assume cs:_text
.text:00007434                 ;org 7434h
.text:00007434 ; COMDAT (pick any)
.text:00007434                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007434
.text:00007434 ; =============== S U B R O U T I N E =======================================
.text:00007434
.text:00007434 ; Attributes: bp-based frame
.text:00007434
.text:00007434 ; unsigned __int32 __stdcall NArchive::NCab::CFolderOutStream::Release(NArchive::NCab::CFolderOutStream *this)
.text:00007434                 public ?Release@CFolderOutStream@NCab@NArchive@@UAGKXZ
.text:00007434 ?Release@CFolderOutStream@NCab@NArchive@@UAGKXZ proc near
.text:00007434                                         ; DATA XREF: .rdata:000072A8o
.text:00007434
.text:00007434 var_10          = dword ptr -10h
.text:00007434 var_C           = dword ptr -0Ch
.text:00007434 var_8           = dword ptr -8
.text:00007434 var_4           = dword ptr -4
.text:00007434 this            = dword ptr  8
.text:00007434
.text:00007434                 push    ebp
.text:00007435                 mov     ebp, esp
.text:00007437                 sub     esp, 10h
.text:0000743A                 mov     eax, 0CCCCCCCCh
.text:0000743F                 mov     [ebp+var_10], eax
.text:00007442                 mov     [ebp+var_C], eax
.text:00007445                 mov     [ebp+var_8], eax
.text:00007448                 mov     [ebp+var_4], eax
.text:0000744B                 mov     eax, [ebp+this]
.text:0000744E                 mov     ecx, [eax+4]
.text:00007451                 sub     ecx, 1
.text:00007454                 mov     [ebp+var_C], ecx
.text:00007457                 mov     edx, [ebp+this]
.text:0000745A                 mov     eax, [ebp+var_C]
.text:0000745D                 mov     [edx+4], eax
.text:00007460                 cmp     [ebp+var_C], 0
.text:00007464                 jz      short loc_746E
.text:00007466                 mov     ecx, [ebp+this]
.text:00007469                 mov     eax, [ecx+4]
.text:0000746C                 jmp     short loc_7498
.text:0000746E ; ---------------------------------------------------------------------------
.text:0000746E
.text:0000746E loc_746E:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Release(void)+30j
.text:0000746E                 mov     edx, [ebp+this]
.text:00007471                 mov     [ebp+var_8], edx
.text:00007474                 mov     eax, [ebp+var_8]
.text:00007477                 mov     [ebp+var_4], eax
.text:0000747A                 cmp     [ebp+var_4], 0
.text:0000747E                 jz      short loc_748F
.text:00007480                 push    1
.text:00007482                 mov     ecx, [ebp+var_4]
.text:00007485                 call    ??_GCFolderOutStream@NCab@NArchive@@QAEPAXI@Z ; NArchive::NCab::CFolderOutStream::`scalar deleting destructor'(uint)
.text:0000748A                 mov     [ebp+var_10], eax
.text:0000748D                 jmp     short loc_7496
.text:0000748F ; ---------------------------------------------------------------------------
.text:0000748F
.text:0000748F loc_748F:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Release(void)+4Aj
.text:0000748F                 mov     [ebp+var_10], 0
.text:00007496
.text:00007496 loc_7496:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Release(void)+59j
.text:00007496                 xor     eax, eax
.text:00007498
.text:00007498 loc_7498:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::Release(void)+38j
.text:00007498                 add     esp, 10h
.text:0000749B                 cmp     ebp, esp
.text:0000749D                 call    __RTC_CheckEsp
.text:000074A2                 mov     esp, ebp
.text:000074A4                 pop     ebp
.text:000074A5                 retn    4
.text:000074A5 ?Release@CFolderOutStream@NCab@NArchive@@UAGKXZ endp
.text:000074A5
.text:000074A5 _text           ends
.text:000074A5
.text:000074A8 ; ===========================================================================
.text:000074A8
.text:000074A8 ; Segment type: Pure code
.text:000074A8 ; Segment permissions: Read/Execute
.text:000074A8 _text           segment para public 'CODE' use32
.text:000074A8                 assume cs:_text
.text:000074A8                 ;org 74A8h
.text:000074A8 ; COMDAT (pick any)
.text:000074A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000074A8
.text:000074A8 ; =============== S U B R O U T I N E =======================================
.text:000074A8
.text:000074A8 ; Attributes: bp-based frame
.text:000074A8
.text:000074A8 ; unsigned __int64 __thiscall NArchive::NCab::CFolderOutStream::GetPosInFolder(NArchive::NCab::CFolderOutStream *__hidden this)
.text:000074A8                 public ?GetPosInFolder@CFolderOutStream@NCab@NArchive@@QBE_KXZ
.text:000074A8 ?GetPosInFolder@CFolderOutStream@NCab@NArchive@@QBE_KXZ proc near
.text:000074A8                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+16A4p
.text:000074A8
.text:000074A8 var_4           = dword ptr -4
.text:000074A8
.text:000074A8                 push    ebp
.text:000074A9                 mov     ebp, esp
.text:000074AB                 push    ecx
.text:000074AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000074B3                 mov     [ebp+var_4], ecx
.text:000074B6                 mov     ecx, [ebp+var_4]
.text:000074B9                 mov     eax, [ecx+48h]
.text:000074BC                 mov     edx, [ecx+4Ch]
.text:000074BF                 mov     esp, ebp
.text:000074C1                 pop     ebp
.text:000074C2                 retn
.text:000074C2 ?GetPosInFolder@CFolderOutStream@NCab@NArchive@@QBE_KXZ endp
.text:000074C2
.text:000074C2 ; ---------------------------------------------------------------------------
.text:000074C3                 align 4
.text:000074C3 _text           ends
.text:000074C3
.text:000074C4 ; ===========================================================================
.text:000074C4
.text:000074C4 ; Segment type: Pure code
.text:000074C4 ; Segment permissions: Read/Execute
.text:000074C4 _text           segment para public 'CODE' use32
.text:000074C4                 assume cs:_text
.text:000074C4                 ;org 74C4h
.text:000074C4 ; COMDAT (pick any)
.text:000074C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000074C4
.text:000074C4 ; =============== S U B R O U T I N E =======================================
.text:000074C4
.text:000074C4 ; Attributes: bp-based frame
.text:000074C4
.text:000074C4 ; public: void * __thiscall NArchive::NCab::CFolderOutStream::`scalar deleting destructor'(unsigned int)
.text:000074C4                 public ??_GCFolderOutStream@NCab@NArchive@@QAEPAXI@Z
.text:000074C4 ??_GCFolderOutStream@NCab@NArchive@@QAEPAXI@Z proc near
.text:000074C4                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::Release(void)+51p
.text:000074C4
.text:000074C4 var_4           = dword ptr -4
.text:000074C4 arg_0           = dword ptr  8
.text:000074C4
.text:000074C4                 push    ebp
.text:000074C5                 mov     ebp, esp
.text:000074C7                 push    ecx
.text:000074C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000074CF                 mov     [ebp+var_4], ecx
.text:000074D2                 mov     ecx, [ebp+var_4] ; this
.text:000074D5                 call    ??1CFolderOutStream@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CFolderOutStream::~CFolderOutStream(void)
.text:000074DA                 mov     eax, [ebp+arg_0]
.text:000074DD                 and     eax, 1
.text:000074E0                 jz      short loc_74EE
.text:000074E2                 mov     ecx, [ebp+var_4]
.text:000074E5                 push    ecx             ; void *
.text:000074E6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000074EB                 add     esp, 4
.text:000074EE
.text:000074EE loc_74EE:                               ; CODE XREF: NArchive::NCab::CFolderOutStream::`scalar deleting destructor'(uint)+1Cj
.text:000074EE                 mov     eax, [ebp+var_4]
.text:000074F1                 add     esp, 4
.text:000074F4                 cmp     ebp, esp
.text:000074F6                 call    __RTC_CheckEsp
.text:000074FB                 mov     esp, ebp
.text:000074FD                 pop     ebp
.text:000074FE                 retn    4
.text:000074FE ??_GCFolderOutStream@NCab@NArchive@@QAEPAXI@Z endp
.text:000074FE
.text:000074FE ; ---------------------------------------------------------------------------
.text:00007501                 align 4
.text:00007501 _text           ends
.text:00007501
.text:00007504 ; ===========================================================================
.text:00007504
.text:00007504 ; Segment type: Pure code
.text:00007504 ; Segment permissions: Read/Execute
.text:00007504 _text           segment para public 'CODE' use32
.text:00007504                 assume cs:_text
.text:00007504                 ;org 7504h
.text:00007504 ; COMDAT (pick any)
.text:00007504                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007504
.text:00007504 ; =============== S U B R O U T I N E =======================================
.text:00007504
.text:00007504 ; Attributes: bp-based frame
.text:00007504
.text:00007504 ; _DWORD __thiscall NArchive::NCab::CFolderOutStream::~CFolderOutStream(NArchive::NCab::CFolderOutStream *__hidden this)
.text:00007504                 public ??1CFolderOutStream@NCab@NArchive@@QAE@XZ
.text:00007504 ??1CFolderOutStream@NCab@NArchive@@QAE@XZ proc near
.text:00007504                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::`scalar deleting destructor'(uint)+11p
.text:00007504
.text:00007504 var_10          = dword ptr -10h
.text:00007504 var_C           = dword ptr -0Ch
.text:00007504 var_4           = dword ptr -4
.text:00007504
.text:00007504                 push    ebp
.text:00007505                 mov     ebp, esp
.text:00007507                 push    0FFFFFFFFh
.text:00007509                 push    offset __ehhandler$??1CFolderOutStream@NCab@NArchive@@QAE@XZ
.text:0000750E                 mov     eax, large fs:0
.text:00007514                 push    eax
.text:00007515                 push    ecx
.text:00007516                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000751D                 mov     eax, dword ptr ds:___security_cookie
.text:00007522                 xor     eax, ebp
.text:00007524                 push    eax
.text:00007525                 lea     eax, [ebp+var_C]
.text:00007528                 mov     large fs:0, eax
.text:0000752E                 mov     [ebp+var_10], ecx
.text:00007531                 mov     eax, [ebp+var_10]
.text:00007534                 mov     dword ptr [eax], offset ??_7CFolderOutStream@NCab@NArchive@@6B@ ; const NArchive::NCab::CFolderOutStream::`vftable'
.text:0000753A                 mov     [ebp+var_4], 1
.text:00007541                 mov     ecx, [ebp+var_10] ; this
.text:00007544                 call    ?FreeTempBuf@CFolderOutStream@NCab@NArchive@@AAEXXZ ; NArchive::NCab::CFolderOutStream::FreeTempBuf(void)
.text:00007549                 mov     byte ptr [ebp+var_4], 0
.text:0000754D                 mov     ecx, [ebp+var_10]
.text:00007550                 add     ecx, 34h ; '4'
.text:00007553                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00007558                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000755F                 mov     ecx, [ebp+var_10]
.text:00007562                 add     ecx, 2Ch ; ','
.text:00007565                 call    ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text:0000756A                 mov     ecx, [ebp+var_C]
.text:0000756D                 mov     large fs:0, ecx
.text:00007574                 pop     ecx
.text:00007575                 add     esp, 10h
.text:00007578                 cmp     ebp, esp
.text:0000757A                 call    __RTC_CheckEsp
.text:0000757F                 mov     esp, ebp
.text:00007581                 pop     ebp
.text:00007582                 retn
.text:00007582 ??1CFolderOutStream@NCab@NArchive@@QAE@XZ endp
.text:00007582
.text:00007582 ; ---------------------------------------------------------------------------
.text:00007583                 align 4
.text:00007583 _text           ends
.text:00007583
.text$x:00007584 ; ===========================================================================
.text$x:00007584
.text$x:00007584 ; Segment type: Pure code
.text$x:00007584 ; Segment permissions: Read/Execute
.text$x:00007584 _text$x         segment para public 'CODE' use32
.text$x:00007584                 assume cs:_text$x
.text$x:00007584                 ;org 7584h
.text$x:00007584 ; COMDAT (pick associative to section at 7504)
.text$x:00007584                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007584
.text$x:00007584 ; =============== S U B R O U T I N E =======================================
.text$x:00007584
.text$x:00007584
.text$x:00007584 __unwindfunclet$??1CFolderOutStream@NCab@NArchive@@QAE@XZ$0 proc near
.text$x:00007584                                         ; DATA XREF: .xdata$x:000075BCo
.text$x:00007584                 mov     ecx, [ebp-10h]
.text$x:00007587                 add     ecx, 2Ch ; ','
.text$x:0000758A                 jmp     ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)
.text$x:0000758A __unwindfunclet$??1CFolderOutStream@NCab@NArchive@@QAE@XZ$0 endp
.text$x:0000758A
.text$x:0000758F
.text$x:0000758F ; =============== S U B R O U T I N E =======================================
.text$x:0000758F
.text$x:0000758F
.text$x:0000758F __unwindfunclet$??1CFolderOutStream@NCab@NArchive@@QAE@XZ$1 proc near
.text$x:0000758F                                         ; DATA XREF: .xdata$x:000075C4o
.text$x:0000758F                 mov     ecx, [ebp-10h]
.text$x:00007592                 add     ecx, 34h ; '4'
.text$x:00007595                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00007595 __unwindfunclet$??1CFolderOutStream@NCab@NArchive@@QAE@XZ$1 endp
.text$x:00007595
.text$x:0000759A
.text$x:0000759A ; =============== S U B R O U T I N E =======================================
.text$x:0000759A
.text$x:0000759A
.text$x:0000759A __ehhandler$??1CFolderOutStream@NCab@NArchive@@QAE@XZ proc near
.text$x:0000759A                                         ; DATA XREF: NArchive::NCab::CFolderOutStream::~CFolderOutStream(void)+5o
.text$x:0000759A
.text$x:0000759A arg_4           = dword ptr  8
.text$x:0000759A
.text$x:0000759A                 mov     edx, [esp+arg_4]
.text$x:0000759E                 lea     eax, [edx+0Ch]
.text$x:000075A1                 mov     ecx, [edx-8]
.text$x:000075A4                 xor     ecx, eax
.text$x:000075A6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000075AB                 mov     eax, offset __ehfuncinfo$??1CFolderOutStream@NCab@NArchive@@QAE@XZ
.text$x:000075B0                 jmp     ___CxxFrameHandler3
.text$x:000075B0 __ehhandler$??1CFolderOutStream@NCab@NArchive@@QAE@XZ endp
.text$x:000075B0
.text$x:000075B0 ; ---------------------------------------------------------------------------
.text$x:000075B5                 align 4
.text$x:000075B5 _text$x         ends
.text$x:000075B5
.xdata$x:000075B8 ; ===========================================================================
.xdata$x:000075B8
.xdata$x:000075B8 ; Segment type: Pure data
.xdata$x:000075B8 ; Segment permissions: Read
.xdata$x:000075B8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000075B8                 assume cs:_xdata$x
.xdata$x:000075B8                 ;org 75B8h
.xdata$x:000075B8 ; COMDAT (pick associative to section at 7504)
.xdata$x:000075B8 __unwindtable$??1CFolderOutStream@NCab@NArchive@@QAE@XZ db 0FFh
.xdata$x:000075B8                                         ; DATA XREF: .xdata$x:000075D0o
.xdata$x:000075B9                 db 0FFh
.xdata$x:000075BA                 db 0FFh
.xdata$x:000075BB                 db 0FFh
.xdata$x:000075BC                 dd offset __unwindfunclet$??1CFolderOutStream@NCab@NArchive@@QAE@XZ$0
.xdata$x:000075C0                 db    0
.xdata$x:000075C1                 db    0
.xdata$x:000075C2                 db    0
.xdata$x:000075C3                 db    0
.xdata$x:000075C4                 dd offset __unwindfunclet$??1CFolderOutStream@NCab@NArchive@@QAE@XZ$1
.xdata$x:000075C8 __ehfuncinfo$??1CFolderOutStream@NCab@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000075C8                                         ; DATA XREF: __ehhandler$??1CFolderOutStream@NCab@NArchive@@QAE@XZ+11o
.xdata$x:000075C9                 db    5
.xdata$x:000075CA                 db  93h ; ô
.xdata$x:000075CB                 db  19h
.xdata$x:000075CC                 db    2
.xdata$x:000075CD                 db    0
.xdata$x:000075CE                 db    0
.xdata$x:000075CF                 db    0
.xdata$x:000075D0                 dd offset __unwindtable$??1CFolderOutStream@NCab@NArchive@@QAE@XZ
.xdata$x:000075D4                 db    0
.xdata$x:000075D5                 db    0
.xdata$x:000075D6                 db    0
.xdata$x:000075D7                 db    0
.xdata$x:000075D8                 db    0
.xdata$x:000075D9                 db    0
.xdata$x:000075DA                 db    0
.xdata$x:000075DB                 db    0
.xdata$x:000075DC                 db    0
.xdata$x:000075DD                 db    0
.xdata$x:000075DE                 db    0
.xdata$x:000075DF                 db    0
.xdata$x:000075E0                 db    0
.xdata$x:000075E1                 db    0
.xdata$x:000075E2                 db    0
.xdata$x:000075E3                 db    0
.xdata$x:000075E4                 db    0
.xdata$x:000075E5                 db    0
.xdata$x:000075E6                 db    0
.xdata$x:000075E7                 db    0
.xdata$x:000075E8                 db    1
.xdata$x:000075E9                 db    0
.xdata$x:000075EA                 db    0
.xdata$x:000075EB                 db    0
.xdata$x:000075EB _xdata$x        ends
.xdata$x:000075EB
.text:000075EC ; ===========================================================================
.text:000075EC
.text:000075EC ; Segment type: Pure code
.text:000075EC ; Segment permissions: Read/Execute
.text:000075EC _text           segment para public 'CODE' use32
.text:000075EC                 assume cs:_text
.text:000075EC                 ;org 75ECh
.text:000075EC ; COMDAT (pick any)
.text:000075EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000075EC
.text:000075EC ; =============== S U B R O U T I N E =======================================
.text:000075EC
.text:000075EC ; Attributes: bp-based frame
.text:000075EC
.text:000075EC ; _DWORD __thiscall ISequentialOutStream::ISequentialOutStream(ISequentialOutStream *__hidden this)
.text:000075EC                 public ??0ISequentialOutStream@@QAE@XZ
.text:000075EC ??0ISequentialOutStream@@QAE@XZ proc near
.text:000075EC                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::CFolderOutStream(void)+30p
.text:000075EC
.text:000075EC var_4           = dword ptr -4
.text:000075EC
.text:000075EC                 push    ebp
.text:000075ED                 mov     ebp, esp
.text:000075EF                 push    ecx
.text:000075F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000075F7                 mov     [ebp+var_4], ecx
.text:000075FA                 mov     ecx, [ebp+var_4]
.text:000075FD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00007602                 mov     eax, [ebp+var_4]
.text:00007605                 mov     dword ptr [eax], offset ??_7ISequentialOutStream@@6B@ ; const ISequentialOutStream::`vftable'
.text:0000760B                 mov     eax, [ebp+var_4]
.text:0000760E                 add     esp, 4
.text:00007611                 cmp     ebp, esp
.text:00007613                 call    __RTC_CheckEsp
.text:00007618                 mov     esp, ebp
.text:0000761A                 pop     ebp
.text:0000761B                 retn
.text:0000761B ??0ISequentialOutStream@@QAE@XZ endp
.text:0000761B
.text:0000761B _text           ends
.text:0000761B
.rdata:0000761C ; ===========================================================================
.rdata:0000761C
.rdata:0000761C ; Segment type: Pure data
.rdata:0000761C ; Segment permissions: Read
.rdata:0000761C _rdata          segment dword public 'DATA' use32
.rdata:0000761C                 assume cs:_rdata
.rdata:0000761C                 ;org 761Ch
.rdata:0000761C ; COMDAT (pick largest)
.rdata:0000761C                 dd offset ??_R4ISequentialOutStream@@6B@ ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata:00007620                 public ??_7ISequentialOutStream@@6B@
.rdata:00007620 ; const ISequentialOutStream::`vftable'
.rdata:00007620 ??_7ISequentialOutStream@@6B@ dd offset __purecall
.rdata:00007620                                         ; DATA XREF: ISequentialOutStream::ISequentialOutStream(void)+19o
.rdata:00007624                 dd offset __purecall
.rdata:00007628                 dd offset __purecall
.rdata:0000762C                 dd offset __purecall
.rdata:0000762C _rdata          ends
.rdata:0000762C
.rdata$r:00007630 ; ===========================================================================
.rdata$r:00007630
.rdata$r:00007630 ; Segment type: Pure data
.rdata$r:00007630 ; Segment permissions: Read
.rdata$r:00007630 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007630                 assume cs:_rdata$r
.rdata$r:00007630                 ;org 7630h
.rdata$r:00007630 ; COMDAT (pick any)
.rdata$r:00007630                 public ??_R4ISequentialOutStream@@6B@
.rdata$r:00007630 ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:00007630 ??_R4ISequentialOutStream@@6B@ db    0  ; DATA XREF: .rdata:0000761Co
.rdata$r:00007631                 db    0
.rdata$r:00007632                 db    0
.rdata$r:00007633                 db    0
.rdata$r:00007634                 db    0
.rdata$r:00007635                 db    0
.rdata$r:00007636                 db    0
.rdata$r:00007637                 db    0
.rdata$r:00007638                 db    0
.rdata$r:00007639                 db    0
.rdata$r:0000763A                 db    0
.rdata$r:0000763B                 db    0
.rdata$r:0000763C                 dd offset ??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00007640                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007640 _rdata$r        ends
.rdata$r:00007640
.text:00007644 ; ===========================================================================
.text:00007644
.text:00007644 ; Segment type: Pure code
.text:00007644 ; Segment permissions: Read/Execute
.text:00007644 _text           segment para public 'CODE' use32
.text:00007644                 assume cs:_text
.text:00007644                 ;org 7644h
.text:00007644 ; COMDAT (pick any)
.text:00007644                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007644
.text:00007644 ; =============== S U B R O U T I N E =======================================
.text:00007644
.text:00007644 ; Attributes: bp-based frame
.text:00007644
.text:00007644 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::CMyComPtr<struct ICompressProgressInfo>(struct ICompressProgressInfo *)
.text:00007644                 public ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
.text:00007644 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z proc near
.text:00007644                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+29Ap
.text:00007644
.text:00007644 var_4           = dword ptr -4
.text:00007644 arg_0           = dword ptr  8
.text:00007644
.text:00007644                 push    ebp
.text:00007645                 mov     ebp, esp
.text:00007647                 push    ecx
.text:00007648                 push    esi
.text:00007649                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007650                 mov     [ebp+var_4], ecx
.text:00007653                 mov     eax, [ebp+var_4]
.text:00007656                 mov     ecx, [ebp+arg_0]
.text:00007659                 mov     [eax], ecx
.text:0000765B                 cmp     [ebp+arg_0], 0
.text:0000765F                 jz      short loc_7678
.text:00007661                 mov     edx, [ebp+arg_0]
.text:00007664                 mov     eax, [edx]
.text:00007666                 mov     esi, esp
.text:00007668                 mov     ecx, [ebp+arg_0]
.text:0000766B                 push    ecx
.text:0000766C                 mov     edx, [eax+4]
.text:0000766F                 call    edx
.text:00007671                 cmp     esi, esp
.text:00007673                 call    __RTC_CheckEsp
.text:00007678
.text:00007678 loc_7678:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)+1Bj
.text:00007678                 mov     eax, [ebp+var_4]
.text:0000767B                 pop     esi
.text:0000767C                 add     esp, 4
.text:0000767F                 cmp     ebp, esp
.text:00007681                 call    __RTC_CheckEsp
.text:00007686                 mov     esp, ebp
.text:00007688                 pop     ebp
.text:00007689                 retn    4
.text:00007689 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z endp
.text:00007689
.text:00007689 _text           ends
.text:00007689
.text:0000768C ; ===========================================================================
.text:0000768C
.text:0000768C ; Segment type: Pure code
.text:0000768C ; Segment permissions: Read/Execute
.text:0000768C _text           segment para public 'CODE' use32
.text:0000768C                 assume cs:_text
.text:0000768C                 ;org 768Ch
.text:0000768C ; COMDAT (pick any)
.text:0000768C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000768C
.text:0000768C ; =============== S U B R O U T I N E =======================================
.text:0000768C
.text:0000768C ; Attributes: bp-based frame
.text:0000768C
.text:0000768C ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::~CMyComPtr<struct ICompressProgressInfo>(void)
.text:0000768C                 public ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
.text:0000768C ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
.text:0000768C                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+470p
.text:0000768C                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+673p ...
.text:0000768C
.text:0000768C var_4           = dword ptr -4
.text:0000768C
.text:0000768C                 push    ebp
.text:0000768D                 mov     ebp, esp
.text:0000768F                 push    ecx
.text:00007690                 push    esi
.text:00007691                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007698                 mov     [ebp+var_4], ecx
.text:0000769B                 mov     eax, [ebp+var_4]
.text:0000769E                 cmp     dword ptr [eax], 0
.text:000076A1                 jz      short loc_76BE
.text:000076A3                 mov     ecx, [ebp+var_4]
.text:000076A6                 mov     edx, [ecx]
.text:000076A8                 mov     eax, [ebp+var_4]
.text:000076AB                 mov     ecx, [eax]
.text:000076AD                 mov     edx, [edx]
.text:000076AF                 mov     esi, esp
.text:000076B1                 push    ecx
.text:000076B2                 mov     eax, [edx+8]
.text:000076B5                 call    eax
.text:000076B7                 cmp     esi, esp
.text:000076B9                 call    __RTC_CheckEsp
.text:000076BE
.text:000076BE loc_76BE:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)+15j
.text:000076BE                 pop     esi
.text:000076BF                 add     esp, 4
.text:000076C2                 cmp     ebp, esp
.text:000076C4                 call    __RTC_CheckEsp
.text:000076C9                 mov     esp, ebp
.text:000076CB                 pop     ebp
.text:000076CC                 retn
.text:000076CC ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ endp
.text:000076CC
.text:000076CC ; ---------------------------------------------------------------------------
.text:000076CD                 align 10h
.text:000076CD _text           ends
.text:000076CD
.text:000076D0 ; ===========================================================================
.text:000076D0
.text:000076D0 ; Segment type: Pure code
.text:000076D0 ; Segment permissions: Read/Execute
.text:000076D0 _text           segment para public 'CODE' use32
.text:000076D0                 assume cs:_text
.text:000076D0                 ;org 76D0h
.text:000076D0 ; COMDAT (pick any)
.text:000076D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000076D0
.text:000076D0 ; =============== S U B R O U T I N E =======================================
.text:000076D0
.text:000076D0 ; Attributes: bp-based frame
.text:000076D0
.text:000076D0 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:000076D0                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:000076D0 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:000076D0                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+79p
.text:000076D0
.text:000076D0 var_4           = dword ptr -4
.text:000076D0
.text:000076D0                 push    ebp
.text:000076D1                 mov     ebp, esp
.text:000076D3                 push    ecx
.text:000076D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000076DB                 mov     [ebp+var_4], ecx
.text:000076DE                 mov     eax, [ebp+var_4]
.text:000076E1                 mov     dword ptr [eax], 0
.text:000076E7                 mov     eax, [ebp+var_4]
.text:000076EA                 mov     esp, ebp
.text:000076EC                 pop     ebp
.text:000076ED                 retn
.text:000076ED ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:000076ED
.text:000076ED ; ---------------------------------------------------------------------------
.text:000076EE                 align 10h
.text:000076EE _text           ends
.text:000076EE
.text:000076F0 ; ===========================================================================
.text:000076F0
.text:000076F0 ; Segment type: Pure code
.text:000076F0 ; Segment permissions: Read/Execute
.text:000076F0 _text           segment para public 'CODE' use32
.text:000076F0                 assume cs:_text
.text:000076F0                 ;org 76F0h
.text:000076F0 ; COMDAT (pick any)
.text:000076F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000076F0
.text:000076F0 ; =============== S U B R O U T I N E =======================================
.text:000076F0
.text:000076F0 ; Attributes: bp-based frame
.text:000076F0
.text:000076F0 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(struct ISequentialInStream *)
.text:000076F0                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z
.text:000076F0 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z proc near
.text:000076F0                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3F8p
.text:000076F0
.text:000076F0 var_4           = dword ptr -4
.text:000076F0 arg_0           = dword ptr  8
.text:000076F0
.text:000076F0                 push    ebp
.text:000076F1                 mov     ebp, esp
.text:000076F3                 push    ecx
.text:000076F4                 push    esi
.text:000076F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000076FC                 mov     [ebp+var_4], ecx
.text:000076FF                 mov     eax, [ebp+var_4]
.text:00007702                 mov     ecx, [ebp+arg_0]
.text:00007705                 mov     [eax], ecx
.text:00007707                 cmp     [ebp+arg_0], 0
.text:0000770B                 jz      short loc_7724
.text:0000770D                 mov     edx, [ebp+arg_0]
.text:00007710                 mov     eax, [edx]
.text:00007712                 mov     esi, esp
.text:00007714                 mov     ecx, [ebp+arg_0]
.text:00007717                 push    ecx
.text:00007718                 mov     edx, [eax+4]
.text:0000771B                 call    edx
.text:0000771D                 cmp     esi, esp
.text:0000771F                 call    __RTC_CheckEsp
.text:00007724
.text:00007724 loc_7724:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)+1Bj
.text:00007724                 mov     eax, [ebp+var_4]
.text:00007727                 pop     esi
.text:00007728                 add     esp, 4
.text:0000772B                 cmp     ebp, esp
.text:0000772D                 call    __RTC_CheckEsp
.text:00007732                 mov     esp, ebp
.text:00007734                 pop     ebp
.text:00007735                 retn    4
.text:00007735 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z endp
.text:00007735
.text:00007735 _text           ends
.text:00007735
.text:00007738 ; ===========================================================================
.text:00007738
.text:00007738 ; Segment type: Pure code
.text:00007738 ; Segment permissions: Read/Execute
.text:00007738 _text           segment para public 'CODE' use32
.text:00007738                 assume cs:_text
.text:00007738                 ;org 7738h
.text:00007738 ; COMDAT (pick any)
.text:00007738                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007738
.text:00007738 ; =============== S U B R O U T I N E =======================================
.text:00007738
.text:00007738 ; Attributes: bp-based frame
.text:00007738
.text:00007738 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00007738                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00007738 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00007738                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+431p
.text:00007738                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+634p ...
.text:00007738
.text:00007738 var_4           = dword ptr -4
.text:00007738
.text:00007738                 push    ebp
.text:00007739                 mov     ebp, esp
.text:0000773B                 push    ecx
.text:0000773C                 push    esi
.text:0000773D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007744                 mov     [ebp+var_4], ecx
.text:00007747                 mov     eax, [ebp+var_4]
.text:0000774A                 cmp     dword ptr [eax], 0
.text:0000774D                 jz      short loc_776A
.text:0000774F                 mov     ecx, [ebp+var_4]
.text:00007752                 mov     edx, [ecx]
.text:00007754                 mov     eax, [ebp+var_4]
.text:00007757                 mov     ecx, [eax]
.text:00007759                 mov     edx, [edx]
.text:0000775B                 mov     esi, esp
.text:0000775D                 push    ecx
.text:0000775E                 mov     eax, [edx+8]
.text:00007761                 call    eax
.text:00007763                 cmp     esi, esp
.text:00007765                 call    __RTC_CheckEsp
.text:0000776A
.text:0000776A loc_776A:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:0000776A                 pop     esi
.text:0000776B                 add     esp, 4
.text:0000776E                 cmp     ebp, esp
.text:00007770                 call    __RTC_CheckEsp
.text:00007775                 mov     esp, ebp
.text:00007777                 pop     ebp
.text:00007778                 retn
.text:00007778 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00007778
.text:00007778 ; ---------------------------------------------------------------------------
.text:00007779                 align 4
.text:00007779 _text           ends
.text:00007779
.text:0000777C ; ===========================================================================
.text:0000777C
.text:0000777C ; Segment type: Pure code
.text:0000777C ; Segment permissions: Read/Execute
.text:0000777C _text           segment para public 'CODE' use32
.text:0000777C                 assume cs:_text
.text:0000777C                 ;org 777Ch
.text:0000777C ; COMDAT (pick any)
.text:0000777C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000777C
.text:0000777C ; =============== S U B R O U T I N E =======================================
.text:0000777C
.text:0000777C ; Attributes: bp-based frame
.text:0000777C
.text:0000777C ; public: __thiscall CMyComPtr<struct ISequentialInStream>::operator struct ISequentialInStream *(void)const
.text:0000777C                 public ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:0000777C ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:0000777C                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+18C6p
.text:0000777C                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1969p ...
.text:0000777C
.text:0000777C var_4           = dword ptr -4
.text:0000777C
.text:0000777C                 push    ebp
.text:0000777D                 mov     ebp, esp
.text:0000777F                 push    ecx
.text:00007780                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007787                 mov     [ebp+var_4], ecx
.text:0000778A                 mov     eax, [ebp+var_4]
.text:0000778D                 mov     eax, [eax]
.text:0000778F                 mov     esp, ebp
.text:00007791                 pop     ebp
.text:00007792                 retn
.text:00007792 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:00007792
.text:00007792 ; ---------------------------------------------------------------------------
.text:00007793                 align 4
.text:00007793 _text           ends
.text:00007793
.text:00007794 ; ===========================================================================
.text:00007794
.text:00007794 ; Segment type: Pure code
.text:00007794 ; Segment permissions: Read/Execute
.text:00007794 _text           segment para public 'CODE' use32
.text:00007794                 assume cs:_text
.text:00007794                 ;org 7794h
.text:00007794 ; COMDAT (pick any)
.text:00007794                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007794
.text:00007794 ; =============== S U B R O U T I N E =======================================
.text:00007794
.text:00007794 ; Attributes: bp-based frame
.text:00007794
.text:00007794 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(void)
.text:00007794                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:00007794 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:00007794                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+21Ep
.text:00007794                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+595p ...
.text:00007794
.text:00007794 var_4           = dword ptr -4
.text:00007794
.text:00007794                 push    ebp
.text:00007795                 mov     ebp, esp
.text:00007797                 push    ecx
.text:00007798                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000779F                 mov     [ebp+var_4], ecx
.text:000077A2                 mov     eax, [ebp+var_4]
.text:000077A5                 mov     dword ptr [eax], 0
.text:000077AB                 mov     eax, [ebp+var_4]
.text:000077AE                 mov     esp, ebp
.text:000077B0                 pop     ebp
.text:000077B1                 retn
.text:000077B1 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:000077B1
.text:000077B1 ; ---------------------------------------------------------------------------
.text:000077B2                 align 4
.text:000077B2 _text           ends
.text:000077B2
.text:000077B4 ; ===========================================================================
.text:000077B4
.text:000077B4 ; Segment type: Pure code
.text:000077B4 ; Segment permissions: Read/Execute
.text:000077B4 _text           segment para public 'CODE' use32
.text:000077B4                 assume cs:_text
.text:000077B4                 ;org 77B4h
.text:000077B4 ; COMDAT (pick any)
.text:000077B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000077B4
.text:000077B4 ; =============== S U B R O U T I N E =======================================
.text:000077B4
.text:000077B4 ; Attributes: bp-based frame
.text:000077B4
.text:000077B4 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(struct ISequentialOutStream *)
.text:000077B4                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
.text:000077B4 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z proc near
.text:000077B4                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+E52p
.text:000077B4
.text:000077B4 var_4           = dword ptr -4
.text:000077B4 arg_0           = dword ptr  8
.text:000077B4
.text:000077B4                 push    ebp
.text:000077B5                 mov     ebp, esp
.text:000077B7                 push    ecx
.text:000077B8                 push    esi
.text:000077B9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000077C0                 mov     [ebp+var_4], ecx
.text:000077C3                 mov     eax, [ebp+var_4]
.text:000077C6                 mov     ecx, [ebp+arg_0]
.text:000077C9                 mov     [eax], ecx
.text:000077CB                 cmp     [ebp+arg_0], 0
.text:000077CF                 jz      short loc_77E8
.text:000077D1                 mov     edx, [ebp+arg_0]
.text:000077D4                 mov     eax, [edx]
.text:000077D6                 mov     esi, esp
.text:000077D8                 mov     ecx, [ebp+arg_0]
.text:000077DB                 push    ecx
.text:000077DC                 mov     edx, [eax+4]
.text:000077DF                 call    edx
.text:000077E1                 cmp     esi, esp
.text:000077E3                 call    __RTC_CheckEsp
.text:000077E8
.text:000077E8 loc_77E8:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)+1Bj
.text:000077E8                 mov     eax, [ebp+var_4]
.text:000077EB                 pop     esi
.text:000077EC                 add     esp, 4
.text:000077EF                 cmp     ebp, esp
.text:000077F1                 call    __RTC_CheckEsp
.text:000077F6                 mov     esp, ebp
.text:000077F8                 pop     ebp
.text:000077F9                 retn    4
.text:000077F9 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z endp
.text:000077F9
.text:000077F9 _text           ends
.text:000077F9
.text:000077FC ; ===========================================================================
.text:000077FC
.text:000077FC ; Segment type: Pure code
.text:000077FC ; Segment permissions: Read/Execute
.text:000077FC _text           segment para public 'CODE' use32
.text:000077FC                 assume cs:_text
.text:000077FC                 ;org 77FCh
.text:000077FC ; COMDAT (pick any)
.text:000077FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000077FC
.text:000077FC ; =============== S U B R O U T I N E =======================================
.text:000077FC
.text:000077FC ; Attributes: bp-based frame
.text:000077FC
.text:000077FC ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:000077FC                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:000077FC ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:000077FC                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+280p
.text:000077FC                                         ; NArchive::NCab::CFolderOutStream::OpenFile(void)+2AAp ...
.text:000077FC
.text:000077FC var_4           = dword ptr -4
.text:000077FC
.text:000077FC                 push    ebp
.text:000077FD                 mov     ebp, esp
.text:000077FF                 push    ecx
.text:00007800                 push    esi
.text:00007801                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007808                 mov     [ebp+var_4], ecx
.text:0000780B                 mov     eax, [ebp+var_4]
.text:0000780E                 cmp     dword ptr [eax], 0
.text:00007811                 jz      short loc_782E
.text:00007813                 mov     ecx, [ebp+var_4]
.text:00007816                 mov     edx, [ecx]
.text:00007818                 mov     eax, [ebp+var_4]
.text:0000781B                 mov     ecx, [eax]
.text:0000781D                 mov     edx, [edx]
.text:0000781F                 mov     esi, esp
.text:00007821                 push    ecx
.text:00007822                 mov     eax, [edx+8]
.text:00007825                 call    eax
.text:00007827                 cmp     esi, esp
.text:00007829                 call    __RTC_CheckEsp
.text:0000782E
.text:0000782E loc_782E:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:0000782E                 pop     esi
.text:0000782F                 add     esp, 4
.text:00007832                 cmp     ebp, esp
.text:00007834                 call    __RTC_CheckEsp
.text:00007839                 mov     esp, ebp
.text:0000783B                 pop     ebp
.text:0000783C                 retn
.text:0000783C ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:0000783C
.text:0000783C ; ---------------------------------------------------------------------------
.text:0000783D                 align 10h
.text:0000783D _text           ends
.text:0000783D
.text:00007840 ; ===========================================================================
.text:00007840
.text:00007840 ; Segment type: Pure code
.text:00007840 ; Segment permissions: Read/Execute
.text:00007840 _text           segment para public 'CODE' use32
.text:00007840                 assume cs:_text
.text:00007840                 ;org 7840h
.text:00007840 ; COMDAT (pick any)
.text:00007840                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007840
.text:00007840 ; =============== S U B R O U T I N E =======================================
.text:00007840
.text:00007840 ; Attributes: bp-based frame
.text:00007840
.text:00007840 ; public: void __thiscall CMyComPtr<struct ISequentialOutStream>::Release(void)
.text:00007840                 public ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
.text:00007840 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ proc near
.text:00007840                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::CloseFileWithResOp(int)+1Ep
.text:00007840                                         ; NArchive::NCab::CFolderOutStream::WriteEmptyFiles(void)+D2p ...
.text:00007840
.text:00007840 var_4           = dword ptr -4
.text:00007840
.text:00007840                 push    ebp
.text:00007841                 mov     ebp, esp
.text:00007843                 push    ecx
.text:00007844                 push    esi
.text:00007845                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000784C                 mov     [ebp+var_4], ecx
.text:0000784F                 mov     eax, [ebp+var_4]
.text:00007852                 cmp     dword ptr [eax], 0
.text:00007855                 jz      short loc_787B
.text:00007857                 mov     ecx, [ebp+var_4]
.text:0000785A                 mov     edx, [ecx]
.text:0000785C                 mov     eax, [ebp+var_4]
.text:0000785F                 mov     ecx, [eax]
.text:00007861                 mov     edx, [edx]
.text:00007863                 mov     esi, esp
.text:00007865                 push    ecx
.text:00007866                 mov     eax, [edx+8]
.text:00007869                 call    eax
.text:0000786B                 cmp     esi, esp
.text:0000786D                 call    __RTC_CheckEsp
.text:00007872                 mov     ecx, [ebp+var_4]
.text:00007875                 mov     dword ptr [ecx], 0
.text:0000787B
.text:0000787B loc_787B:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::Release(void)+15j
.text:0000787B                 pop     esi
.text:0000787C                 add     esp, 4
.text:0000787F                 cmp     ebp, esp
.text:00007881                 call    __RTC_CheckEsp
.text:00007886                 mov     esp, ebp
.text:00007888                 pop     ebp
.text:00007889                 retn
.text:00007889 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ endp
.text:00007889
.text:00007889 ; ---------------------------------------------------------------------------
.text:0000788A                 align 4
.text:0000788A _text           ends
.text:0000788A
.text:0000788C ; ===========================================================================
.text:0000788C
.text:0000788C ; Segment type: Pure code
.text:0000788C ; Segment permissions: Read/Execute
.text:0000788C _text           segment para public 'CODE' use32
.text:0000788C                 assume cs:_text
.text:0000788C                 ;org 788Ch
.text:0000788C ; COMDAT (pick any)
.text:0000788C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000788C
.text:0000788C ; =============== S U B R O U T I N E =======================================
.text:0000788C
.text:0000788C ; Attributes: bp-based frame
.text:0000788C
.text:0000788C ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:0000788C                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:0000788C ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:0000788C                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+290p
.text:0000788C                                         ; NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+BBp ...
.text:0000788C
.text:0000788C var_4           = dword ptr -4
.text:0000788C
.text:0000788C                 push    ebp
.text:0000788D                 mov     ebp, esp
.text:0000788F                 push    ecx
.text:00007890                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007897                 mov     [ebp+var_4], ecx
.text:0000789A                 mov     eax, [ebp+var_4]
.text:0000789D                 mov     eax, [eax]
.text:0000789F                 mov     esp, ebp
.text:000078A1                 pop     ebp
.text:000078A2                 retn
.text:000078A2 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:000078A2
.text:000078A2 ; ---------------------------------------------------------------------------
.text:000078A3                 align 4
.text:000078A3 _text           ends
.text:000078A3
.text:000078A4 ; ===========================================================================
.text:000078A4
.text:000078A4 ; Segment type: Pure code
.text:000078A4 ; Segment permissions: Read/Execute
.text:000078A4 _text           segment para public 'CODE' use32
.text:000078A4                 assume cs:_text
.text:000078A4                 ;org 78A4h
.text:000078A4 ; COMDAT (pick any)
.text:000078A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000078A4
.text:000078A4 ; =============== S U B R O U T I N E =======================================
.text:000078A4
.text:000078A4 ; Attributes: bp-based frame
.text:000078A4
.text:000078A4 ; public: struct ISequentialOutStream * * __thiscall CMyComPtr<struct ISequentialOutStream>::operator&(void)
.text:000078A4                 public ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
.text:000078A4 ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ proc near
.text:000078A4                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+23Fp
.text:000078A4                                         ; NArchive::NCab::CFolderOutStream::OpenFile(void)+388p ...
.text:000078A4
.text:000078A4 var_4           = dword ptr -4
.text:000078A4
.text:000078A4                 push    ebp
.text:000078A5                 mov     ebp, esp
.text:000078A7                 push    ecx
.text:000078A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000078AF                 mov     [ebp+var_4], ecx
.text:000078B2                 mov     eax, [ebp+var_4]
.text:000078B5                 mov     esp, ebp
.text:000078B7                 pop     ebp
.text:000078B8                 retn
.text:000078B8 ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ endp
.text:000078B8
.text:000078B8 ; ---------------------------------------------------------------------------
.text:000078B9                 align 4
.text:000078B9 _text           ends
.text:000078B9
.text:000078BC ; ===========================================================================
.text:000078BC
.text:000078BC ; Segment type: Pure code
.text:000078BC ; Segment permissions: Read/Execute
.text:000078BC _text           segment para public 'CODE' use32
.text:000078BC                 assume cs:_text
.text:000078BC                 ;org 78BCh
.text:000078BC ; COMDAT (pick any)
.text:000078BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000078BC
.text:000078BC ; =============== S U B R O U T I N E =======================================
.text:000078BC
.text:000078BC ; Attributes: bp-based frame
.text:000078BC
.text:000078BC ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator->(void)const
.text:000078BC                 public ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:000078BC ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:000078BC                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+D6p
.text:000078BC
.text:000078BC var_4           = dword ptr -4
.text:000078BC
.text:000078BC                 push    ebp
.text:000078BD                 mov     ebp, esp
.text:000078BF                 push    ecx
.text:000078C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000078C7                 mov     [ebp+var_4], ecx
.text:000078CA                 mov     eax, [ebp+var_4]
.text:000078CD                 mov     eax, [eax]
.text:000078CF                 mov     esp, ebp
.text:000078D1                 pop     ebp
.text:000078D2                 retn
.text:000078D2 ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:000078D2
.text:000078D2 ; ---------------------------------------------------------------------------
.text:000078D3                 align 4
.text:000078D3 _text           ends
.text:000078D3
.text:000078D4 ; ===========================================================================
.text:000078D4
.text:000078D4 ; Segment type: Pure code
.text:000078D4 ; Segment permissions: Read/Execute
.text:000078D4 _text           segment para public 'CODE' use32
.text:000078D4                 assume cs:_text
.text:000078D4                 ;org 78D4h
.text:000078D4 ; COMDAT (pick any)
.text:000078D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000078D4
.text:000078D4 ; =============== S U B R O U T I N E =======================================
.text:000078D4
.text:000078D4 ; Attributes: bp-based frame
.text:000078D4
.text:000078D4 ; public: bool __thiscall CMyComPtr<struct ISequentialOutStream>::operator!(void)const
.text:000078D4                 public ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
.text:000078D4 ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ proc near
.text:000078D4                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+3C4p
.text:000078D4
.text:000078D4 var_4           = dword ptr -4
.text:000078D4
.text:000078D4                 push    ebp
.text:000078D5                 mov     ebp, esp
.text:000078D7                 push    ecx
.text:000078D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000078DF                 mov     [ebp+var_4], ecx
.text:000078E2                 mov     eax, [ebp+var_4]
.text:000078E5                 xor     ecx, ecx
.text:000078E7                 cmp     dword ptr [eax], 0
.text:000078EA                 setz    cl
.text:000078ED                 mov     al, cl
.text:000078EF                 mov     esp, ebp
.text:000078F1                 pop     ebp
.text:000078F2                 retn
.text:000078F2 ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ endp
.text:000078F2
.text:000078F2 ; ---------------------------------------------------------------------------
.text:000078F3                 align 4
.text:000078F3 _text           ends
.text:000078F3
.text:000078F4 ; ===========================================================================
.text:000078F4
.text:000078F4 ; Segment type: Pure code
.text:000078F4 ; Segment permissions: Read/Execute
.text:000078F4 _text           segment para public 'CODE' use32
.text:000078F4                 assume cs:_text
.text:000078F4                 ;org 78F4h
.text:000078F4 ; COMDAT (pick any)
.text:000078F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000078F4
.text:000078F4 ; =============== S U B R O U T I N E =======================================
.text:000078F4
.text:000078F4 ; Attributes: bp-based frame
.text:000078F4
.text:000078F4 ; public: __thiscall CRecordVector<struct NArchive::NCab::CFolder>::CRecordVector<struct NArchive::NCab::CFolder>(void)
.text:000078F4                 public ??0?$CRecordVector@UCFolder@NCab@NArchive@@@@QAE@XZ
.text:000078F4 ??0?$CRecordVector@UCFolder@NCab@NArchive@@@@QAE@XZ proc near
.text:000078F4                                         ; CODE XREF: NArchive::NCab::CDatabase::CDatabase(void)+30p
.text:000078F4
.text:000078F4 var_4           = dword ptr -4
.text:000078F4
.text:000078F4                 push    ebp
.text:000078F5                 mov     ebp, esp
.text:000078F7                 push    ecx
.text:000078F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000078FF                 mov     [ebp+var_4], ecx
.text:00007902                 mov     eax, [ebp+var_4]
.text:00007905                 mov     dword ptr [eax], 0
.text:0000790B                 mov     ecx, [ebp+var_4]
.text:0000790E                 mov     dword ptr [ecx+4], 0
.text:00007915                 mov     edx, [ebp+var_4]
.text:00007918                 mov     dword ptr [edx+8], 0
.text:0000791F                 mov     eax, [ebp+var_4]
.text:00007922                 mov     esp, ebp
.text:00007924                 pop     ebp
.text:00007925                 retn
.text:00007925 ??0?$CRecordVector@UCFolder@NCab@NArchive@@@@QAE@XZ endp
.text:00007925
.text:00007925 ; ---------------------------------------------------------------------------
.text:00007926                 align 4
.text:00007926 _text           ends
.text:00007926
.text:00007928 ; ===========================================================================
.text:00007928
.text:00007928 ; Segment type: Pure code
.text:00007928 ; Segment permissions: Read/Execute
.text:00007928 _text           segment para public 'CODE' use32
.text:00007928                 assume cs:_text
.text:00007928                 ;org 7928h
.text:00007928 ; COMDAT (pick any)
.text:00007928                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007928
.text:00007928 ; =============== S U B R O U T I N E =======================================
.text:00007928
.text:00007928 ; Attributes: bp-based frame
.text:00007928
.text:00007928 ; public: unsigned int __thiscall CRecordVector<struct NArchive::NCab::CFolder>::Size(void)const
.text:00007928                 public ?Size@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEIXZ
.text:00007928 ?Size@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEIXZ proc near
.text:00007928                                         ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+110p
.text:00007928                                         ; NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+2ABp ...
.text:00007928
.text:00007928 var_4           = dword ptr -4
.text:00007928
.text:00007928                 push    ebp
.text:00007929                 mov     ebp, esp
.text:0000792B                 push    ecx
.text:0000792C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007933                 mov     [ebp+var_4], ecx
.text:00007936                 mov     eax, [ebp+var_4]
.text:00007939                 mov     eax, [eax+4]
.text:0000793C                 mov     esp, ebp
.text:0000793E                 pop     ebp
.text:0000793F                 retn
.text:0000793F ?Size@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEIXZ endp
.text:0000793F
.text:0000793F _text           ends
.text:0000793F
.text:00007940 ; ===========================================================================
.text:00007940
.text:00007940 ; Segment type: Pure code
.text:00007940 ; Segment permissions: Read/Execute
.text:00007940 _text           segment para public 'CODE' use32
.text:00007940                 assume cs:_text
.text:00007940                 ;org 7940h
.text:00007940 ; COMDAT (pick any)
.text:00007940                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007940
.text:00007940 ; =============== S U B R O U T I N E =======================================
.text:00007940
.text:00007940 ; Attributes: bp-based frame
.text:00007940
.text:00007940 ; public: __thiscall CRecordVector<struct NArchive::NCab::CFolder>::~CRecordVector<struct NArchive::NCab::CFolder>(void)
.text:00007940                 public ??1?$CRecordVector@UCFolder@NCab@NArchive@@@@QAE@XZ
.text:00007940 ??1?$CRecordVector@UCFolder@NCab@NArchive@@@@QAE@XZ proc near
.text:00007940                                         ; CODE XREF: __unwindfunclet$??0CDatabase@NCab@NArchive@@QAE@XZ$0+3j
.text:00007940                                         ; NArchive::NCab::CDatabase::~CDatabase(void)+58p ...
.text:00007940
.text:00007940 var_8           = dword ptr -8
.text:00007940 var_4           = dword ptr -4
.text:00007940
.text:00007940                 push    ebp
.text:00007941                 mov     ebp, esp
.text:00007943                 sub     esp, 8
.text:00007946                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000794D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007954                 mov     [ebp+var_4], ecx
.text:00007957                 mov     eax, [ebp+var_4]
.text:0000795A                 mov     ecx, [eax]
.text:0000795C                 mov     [ebp+var_8], ecx
.text:0000795F                 mov     edx, [ebp+var_8]
.text:00007962                 push    edx             ; void *
.text:00007963                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00007968                 add     esp, 4
.text:0000796B                 add     esp, 8
.text:0000796E                 cmp     ebp, esp
.text:00007970                 call    __RTC_CheckEsp
.text:00007975                 mov     esp, ebp
.text:00007977                 pop     ebp
.text:00007978                 retn
.text:00007978 ??1?$CRecordVector@UCFolder@NCab@NArchive@@@@QAE@XZ endp
.text:00007978
.text:00007978 ; ---------------------------------------------------------------------------
.text:00007979                 align 4
.text:00007979 _text           ends
.text:00007979
.text:0000797C ; ===========================================================================
.text:0000797C
.text:0000797C ; Segment type: Pure code
.text:0000797C ; Segment permissions: Read/Execute
.text:0000797C _text           segment para public 'CODE' use32
.text:0000797C                 assume cs:_text
.text:0000797C                 ;org 797Ch
.text:0000797C ; COMDAT (pick any)
.text:0000797C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000797C
.text:0000797C ; =============== S U B R O U T I N E =======================================
.text:0000797C
.text:0000797C ; Attributes: bp-based frame
.text:0000797C
.text:0000797C ; public: struct NArchive::NCab::CFolder const & __thiscall CRecordVector<struct NArchive::NCab::CFolder>::operator[](unsigned int)const
.text:0000797C                 public ??A?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEABUCFolder@NCab@NArchive@@I@Z
.text:0000797C ??A?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEABUCFolder@NCab@NArchive@@I@Z proc near
.text:0000797C                                         ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+12Dp
.text:0000797C                                         ; NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+2CCp ...
.text:0000797C
.text:0000797C var_4           = dword ptr -4
.text:0000797C arg_0           = dword ptr  8
.text:0000797C
.text:0000797C                 push    ebp
.text:0000797D                 mov     ebp, esp
.text:0000797F                 push    ecx
.text:00007980                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007987                 mov     [ebp+var_4], ecx
.text:0000798A                 mov     eax, [ebp+var_4]
.text:0000798D                 mov     ecx, [eax]
.text:0000798F                 mov     edx, [ebp+arg_0]
.text:00007992                 lea     eax, [ecx+edx*8]
.text:00007995                 mov     esp, ebp
.text:00007997                 pop     ebp
.text:00007998                 retn    4
.text:00007998 ??A?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEABUCFolder@NCab@NArchive@@I@Z endp
.text:00007998
.text:00007998 ; ---------------------------------------------------------------------------
.text:0000799B                 align 4
.text:0000799B _text           ends
.text:0000799B
.text:0000799C ; ===========================================================================
.text:0000799C
.text:0000799C ; Segment type: Pure code
.text:0000799C ; Segment permissions: Read/Execute
.text:0000799C _text           segment para public 'CODE' use32
.text:0000799C                 assume cs:_text
.text:0000799C                 ;org 799Ch
.text:0000799C ; COMDAT (pick any)
.text:0000799C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000799C
.text:0000799C ; =============== S U B R O U T I N E =======================================
.text:0000799C
.text:0000799C ; Attributes: bp-based frame
.text:0000799C
.text:0000799C ; public: unsigned int __thiscall CObjectVector<struct NArchive::NCab::CItem>::Size(void)const
.text:0000799C                 public ?Size@?$CObjectVector@UCItem@NCab@NArchive@@@@QBEIXZ
.text:0000799C ?Size@?$CObjectVector@UCItem@NCab@NArchive@@@@QBEIXZ proc near
.text:0000799C                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+2EAp
.text:0000799C                                         ; CObjectVector<NArchive::NCab::CItem>::CObjectVector<NArchive::NCab::CItem>(CObjectVector<NArchive::NCab::CItem> const &)+51p
.text:0000799C
.text:0000799C var_4           = dword ptr -4
.text:0000799C
.text:0000799C                 push    ebp
.text:0000799D                 mov     ebp, esp
.text:0000799F                 push    ecx
.text:000079A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000079A7                 mov     [ebp+var_4], ecx
.text:000079AA                 mov     ecx, [ebp+var_4]
.text:000079AD                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000079B2                 add     esp, 4
.text:000079B5                 cmp     ebp, esp
.text:000079B7                 call    __RTC_CheckEsp
.text:000079BC                 mov     esp, ebp
.text:000079BE                 pop     ebp
.text:000079BF                 retn
.text:000079BF ?Size@?$CObjectVector@UCItem@NCab@NArchive@@@@QBEIXZ endp
.text:000079BF
.text:000079BF _text           ends
.text:000079BF
.text:000079C0 ; ===========================================================================
.text:000079C0
.text:000079C0 ; Segment type: Pure code
.text:000079C0 ; Segment permissions: Read/Execute
.text:000079C0 _text           segment para public 'CODE' use32
.text:000079C0                 assume cs:_text
.text:000079C0                 ;org 79C0h
.text:000079C0 ; COMDAT (pick any)
.text:000079C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000079C0
.text:000079C0 ; =============== S U B R O U T I N E =======================================
.text:000079C0
.text:000079C0 ; Attributes: bp-based frame
.text:000079C0
.text:000079C0 ; public: __thiscall CObjectVector<struct NArchive::NCab::CItem>::CObjectVector<struct NArchive::NCab::CItem>(void)
.text:000079C0                 public ??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ
.text:000079C0 ??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ proc near
.text:000079C0                                         ; CODE XREF: NArchive::NCab::CDatabase::CDatabase(void)+42p
.text:000079C0
.text:000079C0 var_4           = dword ptr -4
.text:000079C0
.text:000079C0                 push    ebp
.text:000079C1                 mov     ebp, esp
.text:000079C3                 push    ecx
.text:000079C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000079CB                 mov     [ebp+var_4], ecx
.text:000079CE                 mov     ecx, [ebp+var_4]
.text:000079D1                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:000079D6                 mov     eax, [ebp+var_4]
.text:000079D9                 add     esp, 4
.text:000079DC                 cmp     ebp, esp
.text:000079DE                 call    __RTC_CheckEsp
.text:000079E3                 mov     esp, ebp
.text:000079E5                 pop     ebp
.text:000079E6                 retn
.text:000079E6 ??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ endp
.text:000079E6
.text:000079E6 ; ---------------------------------------------------------------------------
.text:000079E7                 align 4
.text:000079E7 _text           ends
.text:000079E7
.text:000079E8 ; ===========================================================================
.text:000079E8
.text:000079E8 ; Segment type: Pure code
.text:000079E8 ; Segment permissions: Read/Execute
.text:000079E8 _text           segment para public 'CODE' use32
.text:000079E8                 assume cs:_text
.text:000079E8                 ;org 79E8h
.text:000079E8 ; COMDAT (pick any)
.text:000079E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000079E8
.text:000079E8 ; =============== S U B R O U T I N E =======================================
.text:000079E8
.text:000079E8 ; Attributes: bp-based frame
.text:000079E8
.text:000079E8 ; public: struct NArchive::NCab::CItem const & __thiscall CObjectVector<struct NArchive::NCab::CItem>::operator[](unsigned int)const
.text:000079E8                 public ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QBEABUCItem@NCab@NArchive@@I@Z
.text:000079E8 ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QBEABUCItem@NCab@NArchive@@I@Z proc near
.text:000079E8                                         ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+AEp
.text:000079E8                                         ; NArchive::NCab::CFolderOutStream::OpenFile(void)+83p ...
.text:000079E8
.text:000079E8 var_4           = dword ptr -4
.text:000079E8 arg_0           = dword ptr  8
.text:000079E8
.text:000079E8                 push    ebp
.text:000079E9                 mov     ebp, esp
.text:000079EB                 push    ecx
.text:000079EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000079F3                 mov     [ebp+var_4], ecx
.text:000079F6                 mov     eax, [ebp+arg_0]
.text:000079F9                 push    eax
.text:000079FA                 mov     ecx, [ebp+var_4]
.text:000079FD                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00007A02                 mov     eax, [eax]
.text:00007A04                 add     esp, 4
.text:00007A07                 cmp     ebp, esp
.text:00007A09                 call    __RTC_CheckEsp
.text:00007A0E                 mov     esp, ebp
.text:00007A10                 pop     ebp
.text:00007A11                 retn    4
.text:00007A11 ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QBEABUCItem@NCab@NArchive@@I@Z endp
.text:00007A11
.text:00007A11 _text           ends
.text:00007A11
.text:00007A14 ; ===========================================================================
.text:00007A14
.text:00007A14 ; Segment type: Pure code
.text:00007A14 ; Segment permissions: Read/Execute
.text:00007A14 _text           segment para public 'CODE' use32
.text:00007A14                 assume cs:_text
.text:00007A14                 ;org 7A14h
.text:00007A14 ; COMDAT (pick any)
.text:00007A14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007A14
.text:00007A14 ; =============== S U B R O U T I N E =======================================
.text:00007A14
.text:00007A14 ; Attributes: bp-based frame
.text:00007A14
.text:00007A14 ; public: struct NArchive::NCab::CItem & __thiscall CObjectVector<struct NArchive::NCab::CItem>::operator[](unsigned int)
.text:00007A14                 public ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@I@Z
.text:00007A14 ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@I@Z proc near
.text:00007A14                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+140p
.text:00007A14                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+C38p
.text:00007A14
.text:00007A14 var_4           = dword ptr -4
.text:00007A14 arg_0           = dword ptr  8
.text:00007A14
.text:00007A14                 push    ebp
.text:00007A15                 mov     ebp, esp
.text:00007A17                 push    ecx
.text:00007A18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007A1F                 mov     [ebp+var_4], ecx
.text:00007A22                 mov     eax, [ebp+arg_0]
.text:00007A25                 push    eax
.text:00007A26                 mov     ecx, [ebp+var_4]
.text:00007A29                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00007A2E                 mov     eax, [eax]
.text:00007A30                 add     esp, 4
.text:00007A33                 cmp     ebp, esp
.text:00007A35                 call    __RTC_CheckEsp
.text:00007A3A                 mov     esp, ebp
.text:00007A3C                 pop     ebp
.text:00007A3D                 retn    4
.text:00007A3D ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QAEAAUCItem@NCab@NArchive@@I@Z endp
.text:00007A3D
.text:00007A3D _text           ends
.text:00007A3D
.text:00007A40 ; ===========================================================================
.text:00007A40
.text:00007A40 ; Segment type: Pure code
.text:00007A40 ; Segment permissions: Read/Execute
.text:00007A40 _text           segment para public 'CODE' use32
.text:00007A40                 assume cs:_text
.text:00007A40                 ;org 7A40h
.text:00007A40 ; COMDAT (pick any)
.text:00007A40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007A40
.text:00007A40 ; =============== S U B R O U T I N E =======================================
.text:00007A40
.text:00007A40 ; Attributes: bp-based frame
.text:00007A40
.text:00007A40 ; public: __thiscall CObjectVector<struct NArchive::NCab::CItem>::~CObjectVector<struct NArchive::NCab::CItem>(void)
.text:00007A40                 public ??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ
.text:00007A40 ??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ proc near
.text:00007A40                                         ; CODE XREF: __unwindfunclet$??0CDatabase@NCab@NArchive@@QAE@XZ$1+6j
.text:00007A40                                         ; NArchive::NCab::CDatabase::~CDatabase(void)+49p ...
.text:00007A40
.text:00007A40 var_20          = dword ptr -20h
.text:00007A40 var_1C          = dword ptr -1Ch
.text:00007A40 var_18          = dword ptr -18h
.text:00007A40 var_14          = dword ptr -14h
.text:00007A40 var_10          = dword ptr -10h
.text:00007A40 var_C           = dword ptr -0Ch
.text:00007A40 var_4           = dword ptr -4
.text:00007A40
.text:00007A40                 push    ebp
.text:00007A41                 mov     ebp, esp
.text:00007A43                 push    0FFFFFFFFh
.text:00007A45                 push    offset __ehhandler$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ
.text:00007A4A                 mov     eax, large fs:0
.text:00007A50                 push    eax
.text:00007A51                 sub     esp, 14h
.text:00007A54                 mov     eax, 0CCCCCCCCh
.text:00007A59                 mov     [ebp+var_20], eax
.text:00007A5C                 mov     [ebp+var_1C], eax
.text:00007A5F                 mov     [ebp+var_18], eax
.text:00007A62                 mov     [ebp+var_14], eax
.text:00007A65                 mov     [ebp+var_10], eax
.text:00007A68                 mov     eax, dword ptr ds:___security_cookie
.text:00007A6D                 xor     eax, ebp
.text:00007A6F                 push    eax
.text:00007A70                 lea     eax, [ebp+var_C]
.text:00007A73                 mov     large fs:0, eax
.text:00007A79                 mov     [ebp+var_10], ecx
.text:00007A7C                 mov     [ebp+var_4], 0
.text:00007A83                 mov     ecx, [ebp+var_10]
.text:00007A86                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00007A8B                 mov     [ebp+var_14], eax
.text:00007A8E
.text:00007A8E loc_7A8E:                               ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void):loc_7AD0j
.text:00007A8E                 cmp     [ebp+var_14], 0
.text:00007A92                 jz      short loc_7AD2
.text:00007A94                 mov     eax, [ebp+var_14]
.text:00007A97                 sub     eax, 1
.text:00007A9A                 mov     [ebp+var_14], eax
.text:00007A9D                 mov     ecx, [ebp+var_14]
.text:00007AA0                 push    ecx
.text:00007AA1                 mov     ecx, [ebp+var_10]
.text:00007AA4                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00007AA9                 mov     edx, [eax]
.text:00007AAB                 mov     [ebp+var_1C], edx
.text:00007AAE                 mov     eax, [ebp+var_1C]
.text:00007AB1                 mov     [ebp+var_18], eax
.text:00007AB4                 cmp     [ebp+var_18], 0
.text:00007AB8                 jz      short loc_7AC9
.text:00007ABA                 push    1
.text:00007ABC                 mov     ecx, [ebp+var_18]
.text:00007ABF                 call    ??_GCItem@NCab@NArchive@@QAEPAXI@Z ; NArchive::NCab::CItem::`scalar deleting destructor'(uint)
.text:00007AC4                 mov     [ebp+var_20], eax
.text:00007AC7                 jmp     short loc_7AD0
.text:00007AC9 ; ---------------------------------------------------------------------------
.text:00007AC9
.text:00007AC9 loc_7AC9:                               ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)+78j
.text:00007AC9                 mov     [ebp+var_20], 0
.text:00007AD0
.text:00007AD0 loc_7AD0:                               ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)+87j
.text:00007AD0                 jmp     short loc_7A8E
.text:00007AD2 ; ---------------------------------------------------------------------------
.text:00007AD2
.text:00007AD2 loc_7AD2:                               ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)+52j
.text:00007AD2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007AD9                 mov     ecx, [ebp+var_10]
.text:00007ADC                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00007AE1                 mov     ecx, [ebp+var_C]
.text:00007AE4                 mov     large fs:0, ecx
.text:00007AEB                 pop     ecx
.text:00007AEC                 add     esp, 20h
.text:00007AEF                 cmp     ebp, esp
.text:00007AF1                 call    __RTC_CheckEsp
.text:00007AF6                 mov     esp, ebp
.text:00007AF8                 pop     ebp
.text:00007AF9                 retn
.text:00007AF9 ??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ endp
.text:00007AF9
.text:00007AF9 ; ---------------------------------------------------------------------------
.text:00007AFA                 align 4
.text:00007AFA _text           ends
.text:00007AFA
.text$x:00007AFC ; ===========================================================================
.text$x:00007AFC
.text$x:00007AFC ; Segment type: Pure code
.text$x:00007AFC ; Segment permissions: Read/Execute
.text$x:00007AFC _text$x         segment para public 'CODE' use32
.text$x:00007AFC                 assume cs:_text$x
.text$x:00007AFC                 ;org 7AFCh
.text$x:00007AFC ; COMDAT (pick associative to section at 7A40)
.text$x:00007AFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007AFC
.text$x:00007AFC ; =============== S U B R O U T I N E =======================================
.text$x:00007AFC
.text$x:00007AFC
.text$x:00007AFC __unwindfunclet$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ$0 proc near
.text$x:00007AFC                                         ; DATA XREF: .xdata$x:00007B24o
.text$x:00007AFC                 mov     ecx, [ebp-10h]
.text$x:00007AFF                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00007AFF __unwindfunclet$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ$0 endp
.text$x:00007AFF
.text$x:00007B04
.text$x:00007B04 ; =============== S U B R O U T I N E =======================================
.text$x:00007B04
.text$x:00007B04
.text$x:00007B04 __ehhandler$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ proc near
.text$x:00007B04                                         ; DATA XREF: CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)+5o
.text$x:00007B04
.text$x:00007B04 arg_4           = dword ptr  8
.text$x:00007B04
.text$x:00007B04                 mov     edx, [esp+arg_4]
.text$x:00007B08                 lea     eax, [edx+0Ch]
.text$x:00007B0B                 mov     ecx, [edx-18h]
.text$x:00007B0E                 xor     ecx, eax
.text$x:00007B10                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007B15                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ
.text$x:00007B1A                 jmp     ___CxxFrameHandler3
.text$x:00007B1A __ehhandler$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ endp
.text$x:00007B1A
.text$x:00007B1A ; ---------------------------------------------------------------------------
.text$x:00007B1F                 align 10h
.text$x:00007B1F _text$x         ends
.text$x:00007B1F
.xdata$x:00007B20 ; ===========================================================================
.xdata$x:00007B20
.xdata$x:00007B20 ; Segment type: Pure data
.xdata$x:00007B20 ; Segment permissions: Read
.xdata$x:00007B20 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007B20                 assume cs:_xdata$x
.xdata$x:00007B20                 ;org 7B20h
.xdata$x:00007B20 ; COMDAT (pick associative to section at 7A40)
.xdata$x:00007B20 __unwindtable$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:00007B20                                         ; DATA XREF: .xdata$x:00007B30o
.xdata$x:00007B21                 db 0FFh
.xdata$x:00007B22                 db 0FFh
.xdata$x:00007B23                 db 0FFh
.xdata$x:00007B24                 dd offset __unwindfunclet$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ$0
.xdata$x:00007B28 __ehfuncinfo$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:00007B28                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ+11o
.xdata$x:00007B29                 db    5
.xdata$x:00007B2A                 db  93h ; ô
.xdata$x:00007B2B                 db  19h
.xdata$x:00007B2C                 db    1
.xdata$x:00007B2D                 db    0
.xdata$x:00007B2E                 db    0
.xdata$x:00007B2F                 db    0
.xdata$x:00007B30                 dd offset __unwindtable$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ
.xdata$x:00007B34                 db    0
.xdata$x:00007B35                 db    0
.xdata$x:00007B36                 db    0
.xdata$x:00007B37                 db    0
.xdata$x:00007B38                 db    0
.xdata$x:00007B39                 db    0
.xdata$x:00007B3A                 db    0
.xdata$x:00007B3B                 db    0
.xdata$x:00007B3C                 db    0
.xdata$x:00007B3D                 db    0
.xdata$x:00007B3E                 db    0
.xdata$x:00007B3F                 db    0
.xdata$x:00007B40                 db    0
.xdata$x:00007B41                 db    0
.xdata$x:00007B42                 db    0
.xdata$x:00007B43                 db    0
.xdata$x:00007B44                 db    0
.xdata$x:00007B45                 db    0
.xdata$x:00007B46                 db    0
.xdata$x:00007B47                 db    0
.xdata$x:00007B48                 db    1
.xdata$x:00007B49                 db    0
.xdata$x:00007B4A                 db    0
.xdata$x:00007B4B                 db    0
.xdata$x:00007B4B _xdata$x        ends
.xdata$x:00007B4B
.text:00007B4C ; ===========================================================================
.text:00007B4C
.text:00007B4C ; Segment type: Pure code
.text:00007B4C ; Segment permissions: Read/Execute
.text:00007B4C _text           segment para public 'CODE' use32
.text:00007B4C                 assume cs:_text
.text:00007B4C                 ;org 7B4Ch
.text:00007B4C ; COMDAT (pick any)
.text:00007B4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007B4C
.text:00007B4C ; =============== S U B R O U T I N E =======================================
.text:00007B4C
.text:00007B4C ; Attributes: bp-based frame
.text:00007B4C
.text:00007B4C ; public: __thiscall CMyComPtr<struct IInStream>::CMyComPtr<struct IInStream>(void)
.text:00007B4C                 public ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:00007B4C ??0?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:00007B4C                                         ; CODE XREF: NArchive::NCab::CDatabaseEx::CDatabaseEx(void)+42p
.text:00007B4C
.text:00007B4C var_4           = dword ptr -4
.text:00007B4C
.text:00007B4C                 push    ebp
.text:00007B4D                 mov     ebp, esp
.text:00007B4F                 push    ecx
.text:00007B50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007B57                 mov     [ebp+var_4], ecx
.text:00007B5A                 mov     eax, [ebp+var_4]
.text:00007B5D                 mov     dword ptr [eax], 0
.text:00007B63                 mov     eax, [ebp+var_4]
.text:00007B66                 mov     esp, ebp
.text:00007B68                 pop     ebp
.text:00007B69                 retn
.text:00007B69 ??0?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:00007B69
.text:00007B69 ; ---------------------------------------------------------------------------
.text:00007B6A                 align 4
.text:00007B6A _text           ends
.text:00007B6A
.text:00007B6C ; ===========================================================================
.text:00007B6C
.text:00007B6C ; Segment type: Pure code
.text:00007B6C ; Segment permissions: Read/Execute
.text:00007B6C _text           segment para public 'CODE' use32
.text:00007B6C                 assume cs:_text
.text:00007B6C                 ;org 7B6Ch
.text:00007B6C ; COMDAT (pick any)
.text:00007B6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007B6C
.text:00007B6C ; =============== S U B R O U T I N E =======================================
.text:00007B6C
.text:00007B6C ; Attributes: bp-based frame
.text:00007B6C
.text:00007B6C ; public: __thiscall CMyComPtr<struct IInStream>::CMyComPtr<struct IInStream>(struct IInStream *)
.text:00007B6C                 public ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z
.text:00007B6C ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z proc near
.text:00007B6C                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+BAp
.text:00007B6C
.text:00007B6C var_4           = dword ptr -4
.text:00007B6C arg_0           = dword ptr  8
.text:00007B6C
.text:00007B6C                 push    ebp
.text:00007B6D                 mov     ebp, esp
.text:00007B6F                 push    ecx
.text:00007B70                 push    esi
.text:00007B71                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007B78                 mov     [ebp+var_4], ecx
.text:00007B7B                 mov     eax, [ebp+var_4]
.text:00007B7E                 mov     ecx, [ebp+arg_0]
.text:00007B81                 mov     [eax], ecx
.text:00007B83                 cmp     [ebp+arg_0], 0
.text:00007B87                 jz      short loc_7BA0
.text:00007B89                 mov     edx, [ebp+arg_0]
.text:00007B8C                 mov     eax, [edx]
.text:00007B8E                 mov     esi, esp
.text:00007B90                 mov     ecx, [ebp+arg_0]
.text:00007B93                 push    ecx
.text:00007B94                 mov     edx, [eax+4]
.text:00007B97                 call    edx
.text:00007B99                 cmp     esi, esp
.text:00007B9B                 call    __RTC_CheckEsp
.text:00007BA0
.text:00007BA0 loc_7BA0:                               ; CODE XREF: CMyComPtr<IInStream>::CMyComPtr<IInStream>(IInStream *)+1Bj
.text:00007BA0                 mov     eax, [ebp+var_4]
.text:00007BA3                 pop     esi
.text:00007BA4                 add     esp, 4
.text:00007BA7                 cmp     ebp, esp
.text:00007BA9                 call    __RTC_CheckEsp
.text:00007BAE                 mov     esp, ebp
.text:00007BB0                 pop     ebp
.text:00007BB1                 retn    4
.text:00007BB1 ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z endp
.text:00007BB1
.text:00007BB1 _text           ends
.text:00007BB1
.text:00007BB4 ; ===========================================================================
.text:00007BB4
.text:00007BB4 ; Segment type: Pure code
.text:00007BB4 ; Segment permissions: Read/Execute
.text:00007BB4 _text           segment para public 'CODE' use32
.text:00007BB4                 assume cs:_text
.text:00007BB4                 ;org 7BB4h
.text:00007BB4 ; COMDAT (pick any)
.text:00007BB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007BB4
.text:00007BB4 ; =============== S U B R O U T I N E =======================================
.text:00007BB4
.text:00007BB4 ; Attributes: bp-based frame
.text:00007BB4
.text:00007BB4 ; public: __thiscall CMyComPtr<struct IInStream>::~CMyComPtr<struct IInStream>(void)
.text:00007BB4                 public ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:00007BB4 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:00007BB4                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+3DDp
.text:00007BB4                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+441p ...
.text:00007BB4
.text:00007BB4 var_4           = dword ptr -4
.text:00007BB4
.text:00007BB4                 push    ebp
.text:00007BB5                 mov     ebp, esp
.text:00007BB7                 push    ecx
.text:00007BB8                 push    esi
.text:00007BB9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007BC0                 mov     [ebp+var_4], ecx
.text:00007BC3                 mov     eax, [ebp+var_4]
.text:00007BC6                 cmp     dword ptr [eax], 0
.text:00007BC9                 jz      short loc_7BE6
.text:00007BCB                 mov     ecx, [ebp+var_4]
.text:00007BCE                 mov     edx, [ecx]
.text:00007BD0                 mov     eax, [ebp+var_4]
.text:00007BD3                 mov     ecx, [eax]
.text:00007BD5                 mov     edx, [edx]
.text:00007BD7                 mov     esi, esp
.text:00007BD9                 push    ecx
.text:00007BDA                 mov     eax, [edx+8]
.text:00007BDD                 call    eax
.text:00007BDF                 cmp     esi, esp
.text:00007BE1                 call    __RTC_CheckEsp
.text:00007BE6
.text:00007BE6 loc_7BE6:                               ; CODE XREF: CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)+15j
.text:00007BE6                 pop     esi
.text:00007BE7                 add     esp, 4
.text:00007BEA                 cmp     ebp, esp
.text:00007BEC                 call    __RTC_CheckEsp
.text:00007BF1                 mov     esp, ebp
.text:00007BF3                 pop     ebp
.text:00007BF4                 retn
.text:00007BF4 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:00007BF4
.text:00007BF4 ; ---------------------------------------------------------------------------
.text:00007BF5                 align 4
.text:00007BF5 _text           ends
.text:00007BF5
.text:00007BF8 ; ===========================================================================
.text:00007BF8
.text:00007BF8 ; Segment type: Pure code
.text:00007BF8 ; Segment permissions: Read/Execute
.text:00007BF8 _text           segment para public 'CODE' use32
.text:00007BF8                 assume cs:_text
.text:00007BF8                 ;org 7BF8h
.text:00007BF8 ; COMDAT (pick any)
.text:00007BF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007BF8
.text:00007BF8 ; =============== S U B R O U T I N E =======================================
.text:00007BF8
.text:00007BF8 ; Attributes: bp-based frame
.text:00007BF8
.text:00007BF8 ; public: __thiscall CMyComPtr<struct IInStream>::operator struct IInStream *(void)const
.text:00007BF8                 public ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:00007BF8 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:00007BF8                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+DFp
.text:00007BF8                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1595p
.text:00007BF8
.text:00007BF8 var_4           = dword ptr -4
.text:00007BF8
.text:00007BF8                 push    ebp
.text:00007BF9                 mov     ebp, esp
.text:00007BFB                 push    ecx
.text:00007BFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007C03                 mov     [ebp+var_4], ecx
.text:00007C06                 mov     eax, [ebp+var_4]
.text:00007C09                 mov     eax, [eax]
.text:00007C0B                 mov     esp, ebp
.text:00007C0D                 pop     ebp
.text:00007C0E                 retn
.text:00007C0E ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:00007C0E
.text:00007C0E ; ---------------------------------------------------------------------------
.text:00007C0F                 align 10h
.text:00007C0F _text           ends
.text:00007C0F
.text:00007C10 ; ===========================================================================
.text:00007C10
.text:00007C10 ; Segment type: Pure code
.text:00007C10 ; Segment permissions: Read/Execute
.text:00007C10 _text           segment para public 'CODE' use32
.text:00007C10                 assume cs:_text
.text:00007C10                 ;org 7C10h
.text:00007C10 ; COMDAT (pick any)
.text:00007C10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007C10
.text:00007C10 ; =============== S U B R O U T I N E =======================================
.text:00007C10
.text:00007C10 ; Attributes: bp-based frame
.text:00007C10
.text:00007C10 ; public: struct IInStream * * __thiscall CMyComPtr<struct IInStream>::operator&(void)
.text:00007C10                 public ??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ
.text:00007C10 ??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ proc near
.text:00007C10                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+6CCp
.text:00007C10
.text:00007C10 var_4           = dword ptr -4
.text:00007C10
.text:00007C10                 push    ebp
.text:00007C11                 mov     ebp, esp
.text:00007C13                 push    ecx
.text:00007C14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007C1B                 mov     [ebp+var_4], ecx
.text:00007C1E                 mov     eax, [ebp+var_4]
.text:00007C21                 mov     esp, ebp
.text:00007C23                 pop     ebp
.text:00007C24                 retn
.text:00007C24 ??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ endp
.text:00007C24
.text:00007C24 ; ---------------------------------------------------------------------------
.text:00007C25                 align 4
.text:00007C25 _text           ends
.text:00007C25
.text:00007C28 ; ===========================================================================
.text:00007C28
.text:00007C28 ; Segment type: Pure code
.text:00007C28 ; Segment permissions: Read/Execute
.text:00007C28 _text           segment para public 'CODE' use32
.text:00007C28                 assume cs:_text
.text:00007C28                 ;org 7C28h
.text:00007C28 ; COMDAT (pick any)
.text:00007C28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007C28
.text:00007C28 ; =============== S U B R O U T I N E =======================================
.text:00007C28
.text:00007C28 ; Attributes: bp-based frame
.text:00007C28
.text:00007C28 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator->(void)const
.text:00007C28                 public ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:00007C28 ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:00007C28                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1421p
.text:00007C28
.text:00007C28 var_4           = dword ptr -4
.text:00007C28
.text:00007C28                 push    ebp
.text:00007C29                 mov     ebp, esp
.text:00007C2B                 push    ecx
.text:00007C2C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007C33                 mov     [ebp+var_4], ecx
.text:00007C36                 mov     eax, [ebp+var_4]
.text:00007C39                 mov     eax, [eax]
.text:00007C3B                 mov     esp, ebp
.text:00007C3D                 pop     ebp
.text:00007C3E                 retn
.text:00007C3E ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:00007C3E
.text:00007C3E ; ---------------------------------------------------------------------------
.text:00007C3F                 align 10h
.text:00007C3F _text           ends
.text:00007C3F
.text:00007C40 ; ===========================================================================
.text:00007C40
.text:00007C40 ; Segment type: Pure code
.text:00007C40 ; Segment permissions: Read/Execute
.text:00007C40 _text           segment para public 'CODE' use32
.text:00007C40                 assume cs:_text
.text:00007C40                 ;org 7C40h
.text:00007C40 ; COMDAT (pick any)
.text:00007C40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007C40
.text:00007C40 ; =============== S U B R O U T I N E =======================================
.text:00007C40
.text:00007C40 ; Attributes: bp-based frame
.text:00007C40
.text:00007C40 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator=(struct IInStream *)
.text:00007C40                 public ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
.text:00007C40 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z proc near
.text:00007C40                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+52Cp
.text:00007C40                                         ; CMyComPtr<IInStream>::operator=(CMyComPtr<IInStream> const &)+17p
.text:00007C40
.text:00007C40 var_4           = dword ptr -4
.text:00007C40 arg_0           = dword ptr  8
.text:00007C40
.text:00007C40                 push    ebp
.text:00007C41                 mov     ebp, esp
.text:00007C43                 push    ecx
.text:00007C44                 push    esi
.text:00007C45                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007C4C                 mov     [ebp+var_4], ecx
.text:00007C4F                 cmp     [ebp+arg_0], 0
.text:00007C53                 jz      short loc_7C6C
.text:00007C55                 mov     eax, [ebp+arg_0]
.text:00007C58                 mov     ecx, [eax]
.text:00007C5A                 mov     esi, esp
.text:00007C5C                 mov     edx, [ebp+arg_0]
.text:00007C5F                 push    edx
.text:00007C60                 mov     eax, [ecx+4]
.text:00007C63                 call    eax
.text:00007C65                 cmp     esi, esp
.text:00007C67                 call    __RTC_CheckEsp
.text:00007C6C
.text:00007C6C loc_7C6C:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+13j
.text:00007C6C                 mov     ecx, [ebp+var_4]
.text:00007C6F                 cmp     dword ptr [ecx], 0
.text:00007C72                 jz      short loc_7C8F
.text:00007C74                 mov     edx, [ebp+var_4]
.text:00007C77                 mov     eax, [edx]
.text:00007C79                 mov     ecx, [ebp+var_4]
.text:00007C7C                 mov     edx, [ecx]
.text:00007C7E                 mov     eax, [eax]
.text:00007C80                 mov     esi, esp
.text:00007C82                 push    edx
.text:00007C83                 mov     ecx, [eax+8]
.text:00007C86                 call    ecx
.text:00007C88                 cmp     esi, esp
.text:00007C8A                 call    __RTC_CheckEsp
.text:00007C8F
.text:00007C8F loc_7C8F:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+32j
.text:00007C8F                 mov     edx, [ebp+var_4]
.text:00007C92                 mov     eax, [ebp+arg_0]
.text:00007C95                 mov     [edx], eax
.text:00007C97                 mov     eax, [ebp+arg_0]
.text:00007C9A                 pop     esi
.text:00007C9B                 add     esp, 4
.text:00007C9E                 cmp     ebp, esp
.text:00007CA0                 call    __RTC_CheckEsp
.text:00007CA5                 mov     esp, ebp
.text:00007CA7                 pop     ebp
.text:00007CA8                 retn    4
.text:00007CA8 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z endp
.text:00007CA8
.text:00007CA8 ; ---------------------------------------------------------------------------
.text:00007CAB                 align 4
.text:00007CAB _text           ends
.text:00007CAB
.text:00007CAC ; ===========================================================================
.text:00007CAC
.text:00007CAC ; Segment type: Pure code
.text:00007CAC ; Segment permissions: Read/Execute
.text:00007CAC _text           segment para public 'CODE' use32
.text:00007CAC                 assume cs:_text
.text:00007CAC                 ;org 7CACh
.text:00007CAC ; COMDAT (pick any)
.text:00007CAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007CAC
.text:00007CAC ; =============== S U B R O U T I N E =======================================
.text:00007CAC
.text:00007CAC ; Attributes: bp-based frame
.text:00007CAC
.text:00007CAC ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator=(class CMyComPtr<struct IInStream> const &)
.text:00007CAC                 public ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@ABV0@@Z
.text:00007CAC ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@ABV0@@Z proc near
.text:00007CAC                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+116p
.text:00007CAC
.text:00007CAC var_4           = dword ptr -4
.text:00007CAC arg_0           = dword ptr  8
.text:00007CAC
.text:00007CAC                 push    ebp
.text:00007CAD                 mov     ebp, esp
.text:00007CAF                 push    ecx
.text:00007CB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007CB7                 mov     [ebp+var_4], ecx
.text:00007CBA                 mov     eax, [ebp+arg_0]
.text:00007CBD                 mov     ecx, [eax]
.text:00007CBF                 push    ecx
.text:00007CC0                 mov     ecx, [ebp+var_4]
.text:00007CC3                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:00007CC8                 add     esp, 4
.text:00007CCB                 cmp     ebp, esp
.text:00007CCD                 call    __RTC_CheckEsp
.text:00007CD2                 mov     esp, ebp
.text:00007CD4                 pop     ebp
.text:00007CD5                 retn    4
.text:00007CD5 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@ABV0@@Z endp
.text:00007CD5
.text:00007CD5 _text           ends
.text:00007CD5
.text:00007CD8 ; ===========================================================================
.text:00007CD8
.text:00007CD8 ; Segment type: Pure code
.text:00007CD8 ; Segment permissions: Read/Execute
.text:00007CD8 _text           segment para public 'CODE' use32
.text:00007CD8                 assume cs:_text
.text:00007CD8                 ;org 7CD8h
.text:00007CD8 ; COMDAT (pick any)
.text:00007CD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007CD8
.text:00007CD8 ; =============== S U B R O U T I N E =======================================
.text:00007CD8
.text:00007CD8 ; Attributes: bp-based frame
.text:00007CD8
.text:00007CD8 ; public: unsigned int __thiscall CObjectVector<struct NArchive::NCab::CDatabaseEx>::Size(void)const
.text:00007CD8                 public ?Size@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEIXZ
.text:00007CD8 ?Size@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEIXZ proc near
.text:00007CD8                                         ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+C3p
.text:00007CD8                                         ; NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+274p ...
.text:00007CD8
.text:00007CD8 var_4           = dword ptr -4
.text:00007CD8
.text:00007CD8                 push    ebp
.text:00007CD9                 mov     ebp, esp
.text:00007CDB                 push    ecx
.text:00007CDC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007CE3                 mov     [ebp+var_4], ecx
.text:00007CE6                 mov     ecx, [ebp+var_4]
.text:00007CE9                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00007CEE                 add     esp, 4
.text:00007CF1                 cmp     ebp, esp
.text:00007CF3                 call    __RTC_CheckEsp
.text:00007CF8                 mov     esp, ebp
.text:00007CFA                 pop     ebp
.text:00007CFB                 retn
.text:00007CFB ?Size@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEIXZ endp
.text:00007CFB
.text:00007CFB _text           ends
.text:00007CFB
.text:00007CFC ; ===========================================================================
.text:00007CFC
.text:00007CFC ; Segment type: Pure code
.text:00007CFC ; Segment permissions: Read/Execute
.text:00007CFC _text           segment para public 'CODE' use32
.text:00007CFC                 assume cs:_text
.text:00007CFC                 ;org 7CFCh
.text:00007CFC ; COMDAT (pick any)
.text:00007CFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007CFC
.text:00007CFC ; =============== S U B R O U T I N E =======================================
.text:00007CFC
.text:00007CFC ; Attributes: bp-based frame
.text:00007CFC
.text:00007CFC ; public: bool __thiscall CObjectVector<struct NArchive::NCab::CDatabaseEx>::IsEmpty(void)const
.text:00007CFC                 public ?IsEmpty@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBE_NXZ
.text:00007CFC ?IsEmpty@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBE_NXZ proc near
.text:00007CFC                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+18Cp
.text:00007CFC                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+2A0p ...
.text:00007CFC
.text:00007CFC var_4           = dword ptr -4
.text:00007CFC
.text:00007CFC                 push    ebp
.text:00007CFD                 mov     ebp, esp
.text:00007CFF                 push    ecx
.text:00007D00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007D07                 mov     [ebp+var_4], ecx
.text:00007D0A                 mov     ecx, [ebp+var_4]
.text:00007D0D                 call    ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ; CRecordVector<void *>::IsEmpty(void)
.text:00007D12                 add     esp, 4
.text:00007D15                 cmp     ebp, esp
.text:00007D17                 call    __RTC_CheckEsp
.text:00007D1C                 mov     esp, ebp
.text:00007D1E                 pop     ebp
.text:00007D1F                 retn
.text:00007D1F ?IsEmpty@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBE_NXZ endp
.text:00007D1F
.text:00007D1F _text           ends
.text:00007D1F
.text:00007D20 ; ===========================================================================
.text:00007D20
.text:00007D20 ; Segment type: Pure code
.text:00007D20 ; Segment permissions: Read/Execute
.text:00007D20 _text           segment para public 'CODE' use32
.text:00007D20                 assume cs:_text
.text:00007D20                 ;org 7D20h
.text:00007D20 ; COMDAT (pick any)
.text:00007D20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007D20
.text:00007D20 ; =============== S U B R O U T I N E =======================================
.text:00007D20
.text:00007D20 ; Attributes: bp-based frame
.text:00007D20
.text:00007D20 ; public: struct NArchive::NCab::CDatabaseEx const & __thiscall CObjectVector<struct NArchive::NCab::CDatabaseEx>::operator[](unsigned int)const
.text:00007D20                 public ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEABUCDatabaseEx@NCab@NArchive@@I@Z
.text:00007D20 ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEABUCDatabaseEx@NCab@NArchive@@I@Z proc near
.text:00007D20                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+79p
.text:00007D20                                         ; NArchive::NCab::CFolderOutStream::OpenFile(void)+E8p ...
.text:00007D20
.text:00007D20 var_4           = dword ptr -4
.text:00007D20 arg_0           = dword ptr  8
.text:00007D20
.text:00007D20                 push    ebp
.text:00007D21                 mov     ebp, esp
.text:00007D23                 push    ecx
.text:00007D24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007D2B                 mov     [ebp+var_4], ecx
.text:00007D2E                 mov     eax, [ebp+arg_0]
.text:00007D31                 push    eax
.text:00007D32                 mov     ecx, [ebp+var_4]
.text:00007D35                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00007D3A                 mov     eax, [eax]
.text:00007D3C                 add     esp, 4
.text:00007D3F                 cmp     ebp, esp
.text:00007D41                 call    __RTC_CheckEsp
.text:00007D46                 mov     esp, ebp
.text:00007D48                 pop     ebp
.text:00007D49                 retn    4
.text:00007D49 ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QBEABUCDatabaseEx@NCab@NArchive@@I@Z endp
.text:00007D49
.text:00007D49 _text           ends
.text:00007D49
.text:00007D4C ; ===========================================================================
.text:00007D4C
.text:00007D4C ; Segment type: Pure code
.text:00007D4C ; Segment permissions: Read/Execute
.text:00007D4C _text           segment para public 'CODE' use32
.text:00007D4C                 assume cs:_text
.text:00007D4C                 ;org 7D4Ch
.text:00007D4C ; COMDAT (pick any)
.text:00007D4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007D4C
.text:00007D4C ; =============== S U B R O U T I N E =======================================
.text:00007D4C
.text:00007D4C ; Attributes: bp-based frame
.text:00007D4C
.text:00007D4C ; public: struct NArchive::NCab::CDatabaseEx & __thiscall CObjectVector<struct NArchive::NCab::CDatabaseEx>::operator[](unsigned int)
.text:00007D4C                 public ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z
.text:00007D4C ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z proc near
.text:00007D4C                                         ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+E7p
.text:00007D4C                                         ; NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+29Ap ...
.text:00007D4C
.text:00007D4C var_4           = dword ptr -4
.text:00007D4C arg_0           = dword ptr  8
.text:00007D4C
.text:00007D4C                 push    ebp
.text:00007D4D                 mov     ebp, esp
.text:00007D4F                 push    ecx
.text:00007D50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007D57                 mov     [ebp+var_4], ecx
.text:00007D5A                 mov     eax, [ebp+arg_0]
.text:00007D5D                 push    eax
.text:00007D5E                 mov     ecx, [ebp+var_4]
.text:00007D61                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00007D66                 mov     eax, [eax]
.text:00007D68                 add     esp, 4
.text:00007D6B                 cmp     ebp, esp
.text:00007D6D                 call    __RTC_CheckEsp
.text:00007D72                 mov     esp, ebp
.text:00007D74                 pop     ebp
.text:00007D75                 retn    4
.text:00007D75 ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z endp
.text:00007D75
.text:00007D75 _text           ends
.text:00007D75
.text:00007D78 ; ===========================================================================
.text:00007D78
.text:00007D78 ; Segment type: Pure code
.text:00007D78 ; Segment permissions: Read/Execute
.text:00007D78 _text           segment para public 'CODE' use32
.text:00007D78                 assume cs:_text
.text:00007D78                 ;org 7D78h
.text:00007D78 ; COMDAT (pick any)
.text:00007D78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007D78
.text:00007D78 ; =============== S U B R O U T I N E =======================================
.text:00007D78
.text:00007D78 ; Attributes: bp-based frame
.text:00007D78
.text:00007D78 ; public: struct NArchive::NCab::CDatabaseEx & __thiscall CObjectVector<struct NArchive::NCab::CDatabaseEx>::Back(void)
.text:00007D78                 public ?Back@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@XZ
.text:00007D78 ?Back@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@XZ proc near
.text:00007D78                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+1ACp
.text:00007D78                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+61Fp
.text:00007D78
.text:00007D78 var_4           = dword ptr -4
.text:00007D78
.text:00007D78                 push    ebp
.text:00007D79                 mov     ebp, esp
.text:00007D7B                 push    ecx
.text:00007D7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007D83                 mov     [ebp+var_4], ecx
.text:00007D86                 mov     ecx, [ebp+var_4]
.text:00007D89                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00007D8E                 sub     eax, 1
.text:00007D91                 push    eax
.text:00007D92                 mov     ecx, [ebp+var_4]
.text:00007D95                 call    ??A?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)
.text:00007D9A                 add     esp, 4
.text:00007D9D                 cmp     ebp, esp
.text:00007D9F                 call    __RTC_CheckEsp
.text:00007DA4                 mov     esp, ebp
.text:00007DA6                 pop     ebp
.text:00007DA7                 retn
.text:00007DA7 ?Back@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEAAUCDatabaseEx@NCab@NArchive@@XZ endp
.text:00007DA7
.text:00007DA7 _text           ends
.text:00007DA7
.text:00007DA8 ; ===========================================================================
.text:00007DA8
.text:00007DA8 ; Segment type: Pure code
.text:00007DA8 ; Segment permissions: Read/Execute
.text:00007DA8 _text           segment para public 'CODE' use32
.text:00007DA8                 assume cs:_text
.text:00007DA8                 ;org 7DA8h
.text:00007DA8 ; COMDAT (pick any)
.text:00007DA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007DA8
.text:00007DA8 ; =============== S U B R O U T I N E =======================================
.text:00007DA8
.text:00007DA8 ; Attributes: bp-based frame
.text:00007DA8
.text:00007DA8 ; int __stdcall CObjectVector<NArchive::NCab::CDatabaseEx>::Insert(int, struct NArchive::NCab::CDatabaseEx *)
.text:00007DA8                 public ?Insert@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXIABUCDatabaseEx@NCab@NArchive@@@Z
.text:00007DA8 ?Insert@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXIABUCDatabaseEx@NCab@NArchive@@@Z proc near
.text:00007DA8                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+34Dp
.text:00007DA8
.text:00007DA8 var_1C          = dword ptr -1Ch
.text:00007DA8 var_18          = dword ptr -18h
.text:00007DA8 var_14          = dword ptr -14h
.text:00007DA8 var_10          = dword ptr -10h
.text:00007DA8 var_C           = dword ptr -0Ch
.text:00007DA8 var_4           = dword ptr -4
.text:00007DA8 arg_0           = dword ptr  8
.text:00007DA8 arg_4           = dword ptr  0Ch
.text:00007DA8
.text:00007DA8                 push    ebp
.text:00007DA9                 mov     ebp, esp
.text:00007DAB                 push    0FFFFFFFFh
.text:00007DAD                 push    offset __ehhandler$?Insert@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXIABUCDatabaseEx@NCab@NArchive@@@Z
.text:00007DB2                 mov     eax, large fs:0
.text:00007DB8                 push    eax
.text:00007DB9                 sub     esp, 10h
.text:00007DBC                 mov     eax, 0CCCCCCCCh
.text:00007DC1                 mov     [ebp+var_1C], eax
.text:00007DC4                 mov     [ebp+var_18], eax
.text:00007DC7                 mov     [ebp+var_14], eax
.text:00007DCA                 mov     [ebp+var_10], eax
.text:00007DCD                 mov     eax, dword ptr ds:___security_cookie
.text:00007DD2                 xor     eax, ebp
.text:00007DD4                 push    eax
.text:00007DD5                 lea     eax, [ebp+var_C]
.text:00007DD8                 mov     large fs:0, eax
.text:00007DDE                 mov     [ebp+var_10], ecx
.text:00007DE1                 push    80h ; 'Ç'       ; unsigned int
.text:00007DE6                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00007DEB                 add     esp, 4
.text:00007DEE                 mov     [ebp+var_18], eax
.text:00007DF1                 mov     [ebp+var_4], 0
.text:00007DF8                 cmp     [ebp+var_18], 0
.text:00007DFC                 jz      short loc_7E0F
.text:00007DFE                 mov     eax, [ebp+arg_4]
.text:00007E01                 push    eax             ; struct NArchive::NCab::CDatabaseEx *
.text:00007E02                 mov     ecx, [ebp+var_18] ; this
.text:00007E05                 call    ??0CDatabaseEx@NCab@NArchive@@QAE@ABU012@@Z ; NArchive::NCab::CDatabaseEx::CDatabaseEx(NArchive::NCab::CDatabaseEx const &)
.text:00007E0A                 mov     [ebp+var_1C], eax
.text:00007E0D                 jmp     short loc_7E16
.text:00007E0F ; ---------------------------------------------------------------------------
.text:00007E0F
.text:00007E0F loc_7E0F:                               ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::Insert(uint,NArchive::NCab::CDatabaseEx const &)+54j
.text:00007E0F                 mov     [ebp+var_1C], 0
.text:00007E16
.text:00007E16 loc_7E16:                               ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::Insert(uint,NArchive::NCab::CDatabaseEx const &)+65j
.text:00007E16                 mov     ecx, [ebp+var_1C]
.text:00007E19                 mov     [ebp+var_14], ecx
.text:00007E1C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00007E23                 mov     edx, [ebp+var_14]
.text:00007E26                 push    edx
.text:00007E27                 mov     eax, [ebp+arg_0]
.text:00007E2A                 push    eax
.text:00007E2B                 mov     ecx, [ebp+var_10]
.text:00007E2E                 call    ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z ; CRecordVector<void *>::Insert(uint,void * const)
.text:00007E33                 mov     ecx, [ebp+var_C]
.text:00007E36                 mov     large fs:0, ecx
.text:00007E3D                 pop     ecx
.text:00007E3E                 add     esp, 1Ch
.text:00007E41                 cmp     ebp, esp
.text:00007E43                 call    __RTC_CheckEsp
.text:00007E48                 mov     esp, ebp
.text:00007E4A                 pop     ebp
.text:00007E4B                 retn    8
.text:00007E4B ?Insert@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXIABUCDatabaseEx@NCab@NArchive@@@Z endp
.text:00007E4B
.text:00007E4B ; ---------------------------------------------------------------------------
.text:00007E4E                 align 10h
.text:00007E4E _text           ends
.text:00007E4E
.text$x:00007E50 ; ===========================================================================
.text$x:00007E50
.text$x:00007E50 ; Segment type: Pure code
.text$x:00007E50 ; Segment permissions: Read/Execute
.text$x:00007E50 _text$x         segment para public 'CODE' use32
.text$x:00007E50                 assume cs:_text$x
.text$x:00007E50                 ;org 7E50h
.text$x:00007E50 ; COMDAT (pick associative to section at 7DA8)
.text$x:00007E50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007E50
.text$x:00007E50 ; =============== S U B R O U T I N E =======================================
.text$x:00007E50
.text$x:00007E50
.text$x:00007E50 __unwindfunclet$?Insert@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXIABUCDatabaseEx@NCab@NArchive@@@Z$0 proc near
.text$x:00007E50                                         ; DATA XREF: .xdata$x:00007E7Co
.text$x:00007E50                 mov     eax, [ebp-18h]
.text$x:00007E53                 push    eax             ; void *
.text$x:00007E54                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00007E59                 pop     ecx
.text$x:00007E5A                 retn
.text$x:00007E5A __unwindfunclet$?Insert@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXIABUCDatabaseEx@NCab@NArchive@@@Z$0 endp
.text$x:00007E5A
.text$x:00007E5B
.text$x:00007E5B ; =============== S U B R O U T I N E =======================================
.text$x:00007E5B
.text$x:00007E5B
.text$x:00007E5B __ehhandler$?Insert@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXIABUCDatabaseEx@NCab@NArchive@@@Z proc near
.text$x:00007E5B                                         ; DATA XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::Insert(uint,NArchive::NCab::CDatabaseEx const &)+5o
.text$x:00007E5B
.text$x:00007E5B arg_4           = dword ptr  8
.text$x:00007E5B
.text$x:00007E5B                 mov     edx, [esp+arg_4]
.text$x:00007E5F                 lea     eax, [edx+0Ch]
.text$x:00007E62                 mov     ecx, [edx-14h]
.text$x:00007E65                 xor     ecx, eax
.text$x:00007E67                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007E6C                 mov     eax, offset __ehfuncinfo$?Insert@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXIABUCDatabaseEx@NCab@NArchive@@@Z
.text$x:00007E71                 jmp     ___CxxFrameHandler3
.text$x:00007E71 __ehhandler$?Insert@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXIABUCDatabaseEx@NCab@NArchive@@@Z endp
.text$x:00007E71
.text$x:00007E71 ; ---------------------------------------------------------------------------
.text$x:00007E76                 align 4
.text$x:00007E76 _text$x         ends
.text$x:00007E76
.xdata$x:00007E78 ; ===========================================================================
.xdata$x:00007E78
.xdata$x:00007E78 ; Segment type: Pure data
.xdata$x:00007E78 ; Segment permissions: Read
.xdata$x:00007E78 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007E78                 assume cs:_xdata$x
.xdata$x:00007E78                 ;org 7E78h
.xdata$x:00007E78 ; COMDAT (pick associative to section at 7DA8)
.xdata$x:00007E78 __unwindtable$?Insert@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXIABUCDatabaseEx@NCab@NArchive@@@Z db 0FFh
.xdata$x:00007E78                                         ; DATA XREF: .xdata$x:00007E88o
.xdata$x:00007E79                 db 0FFh
.xdata$x:00007E7A                 db 0FFh
.xdata$x:00007E7B                 db 0FFh
.xdata$x:00007E7C                 dd offset __unwindfunclet$?Insert@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXIABUCDatabaseEx@NCab@NArchive@@@Z$0
.xdata$x:00007E80 __ehfuncinfo$?Insert@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXIABUCDatabaseEx@NCab@NArchive@@@Z db  22h ; "
.xdata$x:00007E80                                         ; DATA XREF: __ehhandler$?Insert@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXIABUCDatabaseEx@NCab@NArchive@@@Z+11o
.xdata$x:00007E81                 db    5
.xdata$x:00007E82                 db  93h ; ô
.xdata$x:00007E83                 db  19h
.xdata$x:00007E84                 db    1
.xdata$x:00007E85                 db    0
.xdata$x:00007E86                 db    0
.xdata$x:00007E87                 db    0
.xdata$x:00007E88                 dd offset __unwindtable$?Insert@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXIABUCDatabaseEx@NCab@NArchive@@@Z
.xdata$x:00007E8C                 align 20h
.xdata$x:00007EA0                 db    1
.xdata$x:00007EA1                 db    0
.xdata$x:00007EA2                 db    0
.xdata$x:00007EA3                 db    0
.xdata$x:00007EA3 _xdata$x        ends
.xdata$x:00007EA3
.text:00007EA4 ; ===========================================================================
.text:00007EA4
.text:00007EA4 ; Segment type: Pure code
.text:00007EA4 ; Segment permissions: Read/Execute
.text:00007EA4 _text           segment para public 'CODE' use32
.text:00007EA4                 assume cs:_text
.text:00007EA4                 ;org 7EA4h
.text:00007EA4 ; COMDAT (pick any)
.text:00007EA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007EA4
.text:00007EA4 ; =============== S U B R O U T I N E =======================================
.text:00007EA4
.text:00007EA4 ; Attributes: bp-based frame
.text:00007EA4
.text:00007EA4 ; public: void __thiscall CObjectVector<struct NArchive::NCab::CDatabaseEx>::Clear(void)
.text:00007EA4                 public ?Clear@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXXZ
.text:00007EA4 ?Clear@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXXZ proc near
.text:00007EA4                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Clear(void)+11p
.text:00007EA4
.text:00007EA4 var_14          = dword ptr -14h
.text:00007EA4 var_10          = dword ptr -10h
.text:00007EA4 var_C           = dword ptr -0Ch
.text:00007EA4 var_8           = dword ptr -8
.text:00007EA4 var_4           = dword ptr -4
.text:00007EA4
.text:00007EA4                 push    ebp
.text:00007EA5                 mov     ebp, esp
.text:00007EA7                 sub     esp, 14h
.text:00007EAA                 mov     eax, 0CCCCCCCCh
.text:00007EAF                 mov     [ebp+var_14], eax
.text:00007EB2                 mov     [ebp+var_10], eax
.text:00007EB5                 mov     [ebp+var_C], eax
.text:00007EB8                 mov     [ebp+var_8], eax
.text:00007EBB                 mov     [ebp+var_4], eax
.text:00007EBE                 mov     [ebp+var_4], ecx
.text:00007EC1                 mov     ecx, [ebp+var_4]
.text:00007EC4                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00007EC9                 mov     [ebp+var_8], eax
.text:00007ECC
.text:00007ECC loc_7ECC:                               ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::Clear(void):loc_7F0Ej
.text:00007ECC                 cmp     [ebp+var_8], 0
.text:00007ED0                 jz      short loc_7F10
.text:00007ED2                 mov     eax, [ebp+var_8]
.text:00007ED5                 sub     eax, 1
.text:00007ED8                 mov     [ebp+var_8], eax
.text:00007EDB                 mov     ecx, [ebp+var_8]
.text:00007EDE                 push    ecx
.text:00007EDF                 mov     ecx, [ebp+var_4]
.text:00007EE2                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00007EE7                 mov     edx, [eax]
.text:00007EE9                 mov     [ebp+var_10], edx
.text:00007EEC                 mov     eax, [ebp+var_10]
.text:00007EEF                 mov     [ebp+var_C], eax
.text:00007EF2                 cmp     [ebp+var_C], 0
.text:00007EF6                 jz      short loc_7F07
.text:00007EF8                 push    1
.text:00007EFA                 mov     ecx, [ebp+var_C]
.text:00007EFD                 call    ??_GCDatabaseEx@NCab@NArchive@@QAEPAXI@Z ; NArchive::NCab::CDatabaseEx::`scalar deleting destructor'(uint)
.text:00007F02                 mov     [ebp+var_14], eax
.text:00007F05                 jmp     short loc_7F0E
.text:00007F07 ; ---------------------------------------------------------------------------
.text:00007F07
.text:00007F07 loc_7F07:                               ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::Clear(void)+52j
.text:00007F07                 mov     [ebp+var_14], 0
.text:00007F0E
.text:00007F0E loc_7F0E:                               ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::Clear(void)+61j
.text:00007F0E                 jmp     short loc_7ECC
.text:00007F10 ; ---------------------------------------------------------------------------
.text:00007F10
.text:00007F10 loc_7F10:                               ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::Clear(void)+2Cj
.text:00007F10                 mov     ecx, [ebp+var_4]
.text:00007F13                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:00007F18                 add     esp, 14h
.text:00007F1B                 cmp     ebp, esp
.text:00007F1D                 call    __RTC_CheckEsp
.text:00007F22                 mov     esp, ebp
.text:00007F24                 pop     ebp
.text:00007F25                 retn
.text:00007F25 ?Clear@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXXZ endp
.text:00007F25
.text:00007F25 ; ---------------------------------------------------------------------------
.text:00007F26                 align 4
.text:00007F26 _text           ends
.text:00007F26
.text:00007F28 ; ===========================================================================
.text:00007F28
.text:00007F28 ; Segment type: Pure code
.text:00007F28 ; Segment permissions: Read/Execute
.text:00007F28 _text           segment para public 'CODE' use32
.text:00007F28                 assume cs:_text
.text:00007F28                 ;org 7F28h
.text:00007F28 ; COMDAT (pick any)
.text:00007F28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007F28
.text:00007F28 ; =============== S U B R O U T I N E =======================================
.text:00007F28
.text:00007F28 ; Attributes: bp-based frame
.text:00007F28
.text:00007F28 ; public: void __thiscall CObjectVector<struct NArchive::NCab::CDatabaseEx>::DeleteFrontal(unsigned int)
.text:00007F28                 public ?DeleteFrontal@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXI@Z
.text:00007F28 ?DeleteFrontal@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXI@Z proc near
.text:00007F28                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+499p
.text:00007F28                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+604p ...
.text:00007F28
.text:00007F28 var_14          = dword ptr -14h
.text:00007F28 var_10          = dword ptr -10h
.text:00007F28 var_C           = dword ptr -0Ch
.text:00007F28 var_8           = dword ptr -8
.text:00007F28 var_4           = dword ptr -4
.text:00007F28 arg_0           = dword ptr  8
.text:00007F28
.text:00007F28                 push    ebp
.text:00007F29                 mov     ebp, esp
.text:00007F2B                 sub     esp, 14h
.text:00007F2E                 mov     eax, 0CCCCCCCCh
.text:00007F33                 mov     [ebp+var_14], eax
.text:00007F36                 mov     [ebp+var_10], eax
.text:00007F39                 mov     [ebp+var_C], eax
.text:00007F3C                 mov     [ebp+var_8], eax
.text:00007F3F                 mov     [ebp+var_4], eax
.text:00007F42                 mov     [ebp+var_4], ecx
.text:00007F45                 mov     [ebp+var_8], 0
.text:00007F4C                 jmp     short loc_7F57
.text:00007F4E ; ---------------------------------------------------------------------------
.text:00007F4E
.text:00007F4E loc_7F4E:                               ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::DeleteFrontal(uint):loc_7F92j
.text:00007F4E                 mov     eax, [ebp+var_8]
.text:00007F51                 add     eax, 1
.text:00007F54                 mov     [ebp+var_8], eax
.text:00007F57
.text:00007F57 loc_7F57:                               ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::DeleteFrontal(uint)+24j
.text:00007F57                 mov     ecx, [ebp+var_8]
.text:00007F5A                 cmp     ecx, [ebp+arg_0]
.text:00007F5D                 jnb     short loc_7F94
.text:00007F5F                 mov     edx, [ebp+var_8]
.text:00007F62                 push    edx
.text:00007F63                 mov     ecx, [ebp+var_4]
.text:00007F66                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00007F6B                 mov     eax, [eax]
.text:00007F6D                 mov     [ebp+var_10], eax
.text:00007F70                 mov     ecx, [ebp+var_10]
.text:00007F73                 mov     [ebp+var_C], ecx
.text:00007F76                 cmp     [ebp+var_C], 0
.text:00007F7A                 jz      short loc_7F8B
.text:00007F7C                 push    1
.text:00007F7E                 mov     ecx, [ebp+var_C]
.text:00007F81                 call    ??_GCDatabaseEx@NCab@NArchive@@QAEPAXI@Z ; NArchive::NCab::CDatabaseEx::`scalar deleting destructor'(uint)
.text:00007F86                 mov     [ebp+var_14], eax
.text:00007F89                 jmp     short loc_7F92
.text:00007F8B ; ---------------------------------------------------------------------------
.text:00007F8B
.text:00007F8B loc_7F8B:                               ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::DeleteFrontal(uint)+52j
.text:00007F8B                 mov     [ebp+var_14], 0
.text:00007F92
.text:00007F92 loc_7F92:                               ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::DeleteFrontal(uint)+61j
.text:00007F92                 jmp     short loc_7F4E
.text:00007F94 ; ---------------------------------------------------------------------------
.text:00007F94
.text:00007F94 loc_7F94:                               ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::DeleteFrontal(uint)+35j
.text:00007F94                 mov     edx, [ebp+arg_0]
.text:00007F97                 push    edx
.text:00007F98                 mov     ecx, [ebp+var_4]
.text:00007F9B                 call    ?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::DeleteFrontal(uint)
.text:00007FA0                 add     esp, 14h
.text:00007FA3                 cmp     ebp, esp
.text:00007FA5                 call    __RTC_CheckEsp
.text:00007FAA                 mov     esp, ebp
.text:00007FAC                 pop     ebp
.text:00007FAD                 retn    4
.text:00007FAD ?DeleteFrontal@?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAEXI@Z endp
.text:00007FAD
.text:00007FAD _text           ends
.text:00007FAD
.text:00007FB0 ; ===========================================================================
.text:00007FB0
.text:00007FB0 ; Segment type: Pure code
.text:00007FB0 ; Segment permissions: Read/Execute
.text:00007FB0 _text           segment para public 'CODE' use32
.text:00007FB0                 assume cs:_text
.text:00007FB0                 ;org 7FB0h
.text:00007FB0 ; COMDAT (pick any)
.text:00007FB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007FB0
.text:00007FB0 ; =============== S U B R O U T I N E =======================================
.text:00007FB0
.text:00007FB0 ; Attributes: bp-based frame
.text:00007FB0
.text:00007FB0 ; public: unsigned int __thiscall CRecordVector<struct NArchive::NCab::CMvItem>::Size(void)const
.text:00007FB0                 public ?Size@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QBEIXZ
.text:00007FB0 ?Size@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QBEIXZ proc near
.text:00007FB0                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+62p
.text:00007FB0                                         ; NArchive::NCab::CHandler::GetNumberOfItems(uint *)+9p
.text:00007FB0
.text:00007FB0 var_4           = dword ptr -4
.text:00007FB0
.text:00007FB0                 push    ebp
.text:00007FB1                 mov     ebp, esp
.text:00007FB3                 push    ecx
.text:00007FB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007FBB                 mov     [ebp+var_4], ecx
.text:00007FBE                 mov     eax, [ebp+var_4]
.text:00007FC1                 mov     eax, [eax+4]
.text:00007FC4                 mov     esp, ebp
.text:00007FC6                 pop     ebp
.text:00007FC7                 retn
.text:00007FC7 ?Size@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QBEIXZ endp
.text:00007FC7
.text:00007FC7 _text           ends
.text:00007FC7
.text:00007FC8 ; ===========================================================================
.text:00007FC8
.text:00007FC8 ; Segment type: Pure code
.text:00007FC8 ; Segment permissions: Read/Execute
.text:00007FC8 _text           segment para public 'CODE' use32
.text:00007FC8                 assume cs:_text
.text:00007FC8                 ;org 7FC8h
.text:00007FC8 ; COMDAT (pick any)
.text:00007FC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007FC8
.text:00007FC8 ; =============== S U B R O U T I N E =======================================
.text:00007FC8
.text:00007FC8 ; Attributes: bp-based frame
.text:00007FC8
.text:00007FC8 ; public: void __thiscall CRecordVector<struct NArchive::NCab::CMvItem>::Clear(void)
.text:00007FC8                 public ?Clear@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEXXZ
.text:00007FC8 ?Clear@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEXXZ proc near
.text:00007FC8                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Clear(void)+1Cp
.text:00007FC8
.text:00007FC8 var_4           = dword ptr -4
.text:00007FC8
.text:00007FC8                 push    ebp
.text:00007FC9                 mov     ebp, esp
.text:00007FCB                 push    ecx
.text:00007FCC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007FD3                 mov     [ebp+var_4], ecx
.text:00007FD6                 mov     eax, [ebp+var_4]
.text:00007FD9                 mov     dword ptr [eax+4], 0
.text:00007FE0                 mov     esp, ebp
.text:00007FE2                 pop     ebp
.text:00007FE3                 retn
.text:00007FE3 ?Clear@?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEXXZ endp
.text:00007FE3
.text:00007FE3 _text           ends
.text:00007FE3
.text:00007FE4 ; ===========================================================================
.text:00007FE4
.text:00007FE4 ; Segment type: Pure code
.text:00007FE4 ; Segment permissions: Read/Execute
.text:00007FE4 _text           segment para public 'CODE' use32
.text:00007FE4                 assume cs:_text
.text:00007FE4                 ;org 7FE4h
.text:00007FE4 ; COMDAT (pick any)
.text:00007FE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007FE4
.text:00007FE4 ; =============== S U B R O U T I N E =======================================
.text:00007FE4
.text:00007FE4 ; Attributes: bp-based frame
.text:00007FE4
.text:00007FE4 ; public: struct NArchive::NCab::CMvItem const & __thiscall CRecordVector<struct NArchive::NCab::CMvItem>::operator[](unsigned int)const
.text:00007FE4                 public ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QBEABUCMvItem@NCab@NArchive@@I@Z
.text:00007FE4 ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QBEABUCMvItem@NCab@NArchive@@I@Z proc near
.text:00007FE4                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+5Ep
.text:00007FE4                                         ; NArchive::NCab::CFolderOutStream::OpenFile(void)+CDp ...
.text:00007FE4
.text:00007FE4 var_4           = dword ptr -4
.text:00007FE4 arg_0           = dword ptr  8
.text:00007FE4
.text:00007FE4                 push    ebp
.text:00007FE5                 mov     ebp, esp
.text:00007FE7                 push    ecx
.text:00007FE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00007FEF                 mov     [ebp+var_4], ecx
.text:00007FF2                 mov     eax, [ebp+var_4]
.text:00007FF5                 mov     ecx, [eax]
.text:00007FF7                 mov     edx, [ebp+arg_0]
.text:00007FFA                 lea     eax, [ecx+edx*8]
.text:00007FFD                 mov     esp, ebp
.text:00007FFF                 pop     ebp
.text:00008000                 retn    4
.text:00008000 ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QBEABUCMvItem@NCab@NArchive@@I@Z endp
.text:00008000
.text:00008000 ; ---------------------------------------------------------------------------
.text:00008003                 align 4
.text:00008003 _text           ends
.text:00008003
.text:00008004 ; ===========================================================================
.text:00008004
.text:00008004 ; Segment type: Pure code
.text:00008004 ; Segment permissions: Read/Execute
.text:00008004 _text           segment para public 'CODE' use32
.text:00008004                 assume cs:_text
.text:00008004                 ;org 8004h
.text:00008004 ; COMDAT (pick any)
.text:00008004                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008004
.text:00008004 ; =============== S U B R O U T I N E =======================================
.text:00008004
.text:00008004 ; Attributes: bp-based frame
.text:00008004
.text:00008004 ; public: struct NArchive::NCab::CMvItem & __thiscall CRecordVector<struct NArchive::NCab::CMvItem>::operator[](unsigned int)
.text:00008004                 public ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEAAUCMvItem@NCab@NArchive@@I@Z
.text:00008004 ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEAAUCMvItem@NCab@NArchive@@I@Z proc near
.text:00008004                                         ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+67p
.text:00008004                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+105p ...
.text:00008004
.text:00008004 var_4           = dword ptr -4
.text:00008004 arg_0           = dword ptr  8
.text:00008004
.text:00008004                 push    ebp
.text:00008005                 mov     ebp, esp
.text:00008007                 push    ecx
.text:00008008                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000800F                 mov     [ebp+var_4], ecx
.text:00008012                 mov     eax, [ebp+var_4]
.text:00008015                 mov     ecx, [eax]
.text:00008017                 mov     edx, [ebp+arg_0]
.text:0000801A                 lea     eax, [ecx+edx*8]
.text:0000801D                 mov     esp, ebp
.text:0000801F                 pop     ebp
.text:00008020                 retn    4
.text:00008020 ??A?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAEAAUCMvItem@NCab@NArchive@@I@Z endp
.text:00008020
.text:00008020 ; ---------------------------------------------------------------------------
.text:00008023                 align 4
.text:00008023 _text           ends
.text:00008023
.text:00008024 ; ===========================================================================
.text:00008024
.text:00008024 ; Segment type: Pure code
.text:00008024 ; Segment permissions: Read/Execute
.text:00008024 _text           segment para public 'CODE' use32
.text:00008024                 assume cs:_text
.text:00008024                 ;org 8024h
.text:00008024 ; COMDAT (pick any)
.text:00008024                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008024
.text:00008024 ; =============== S U B R O U T I N E =======================================
.text:00008024
.text:00008024 ; Attributes: bp-based frame
.text:00008024
.text:00008024 ; public: void __thiscall CRecordVector<int>::Clear(void)
.text:00008024                 public ?Clear@?$CRecordVector@H@@QAEXXZ
.text:00008024 ?Clear@?$CRecordVector@H@@QAEXXZ proc near
.text:00008024                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Clear(void)+27p
.text:00008024
.text:00008024 var_4           = dword ptr -4
.text:00008024
.text:00008024                 push    ebp
.text:00008025                 mov     ebp, esp
.text:00008027                 push    ecx
.text:00008028                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000802F                 mov     [ebp+var_4], ecx
.text:00008032                 mov     eax, [ebp+var_4]
.text:00008035                 mov     dword ptr [eax+4], 0
.text:0000803C                 mov     esp, ebp
.text:0000803E                 pop     ebp
.text:0000803F                 retn
.text:0000803F ?Clear@?$CRecordVector@H@@QAEXXZ endp
.text:0000803F
.text:0000803F _text           ends
.text:0000803F
.text:00008040 ; ===========================================================================
.text:00008040
.text:00008040 ; Segment type: Pure code
.text:00008040 ; Segment permissions: Read/Execute
.text:00008040 _text           segment para public 'CODE' use32
.text:00008040                 assume cs:_text
.text:00008040                 ;org 8040h
.text:00008040 ; COMDAT (pick any)
.text:00008040                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008040
.text:00008040 ; =============== S U B R O U T I N E =======================================
.text:00008040
.text:00008040 ; Attributes: bp-based frame
.text:00008040
.text:00008040 ; public: int const & __thiscall CRecordVector<int>::operator[](unsigned int)const
.text:00008040                 public ??A?$CRecordVector@H@@QBEABHI@Z
.text:00008040 ??A?$CRecordVector@H@@QBEABHI@Z proc near
.text:00008040                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::GetFolderIndex(NArchive::NCab::CMvItem const *)+35p
.text:00008040
.text:00008040 var_4           = dword ptr -4
.text:00008040 arg_0           = dword ptr  8
.text:00008040
.text:00008040                 push    ebp
.text:00008041                 mov     ebp, esp
.text:00008043                 push    ecx
.text:00008044                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000804B                 mov     [ebp+var_4], ecx
.text:0000804E                 mov     eax, [ebp+var_4]
.text:00008051                 mov     ecx, [eax]
.text:00008053                 mov     edx, [ebp+arg_0]
.text:00008056                 lea     eax, [ecx+edx*4]
.text:00008059                 mov     esp, ebp
.text:0000805B                 pop     ebp
.text:0000805C                 retn    4
.text:0000805C ??A?$CRecordVector@H@@QBEABHI@Z endp
.text:0000805C
.text:0000805C ; ---------------------------------------------------------------------------
.text:0000805F                 align 10h
.text:0000805F _text           ends
.text:0000805F
.text:00008060 ; ===========================================================================
.text:00008060
.text:00008060 ; Segment type: Pure code
.text:00008060 ; Segment permissions: Read/Execute
.text:00008060 _text           segment para public 'CODE' use32
.text:00008060                 assume cs:_text
.text:00008060                 ;org 8060h
.text:00008060 ; COMDAT (pick any)
.text:00008060                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008060
.text:00008060 ; =============== S U B R O U T I N E =======================================
.text:00008060
.text:00008060 ; Attributes: bp-based frame
.text:00008060
.text:00008060 ; public: void __thiscall CRecordVector<unsigned int>::Clear(void)
.text:00008060                 public ?Clear@?$CRecordVector@I@@QAEXXZ
.text:00008060 ?Clear@?$CRecordVector@I@@QAEXXZ proc near
.text:00008060                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::Clear(void)+32p
.text:00008060
.text:00008060 var_4           = dword ptr -4
.text:00008060
.text:00008060                 push    ebp
.text:00008061                 mov     ebp, esp
.text:00008063                 push    ecx
.text:00008064                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000806B                 mov     [ebp+var_4], ecx
.text:0000806E                 mov     eax, [ebp+var_4]
.text:00008071                 mov     dword ptr [eax+4], 0
.text:00008078                 mov     esp, ebp
.text:0000807A                 pop     ebp
.text:0000807B                 retn
.text:0000807B ?Clear@?$CRecordVector@I@@QAEXXZ endp
.text:0000807B
.text:0000807B _text           ends
.text:0000807B
.text:0000807C ; ===========================================================================
.text:0000807C
.text:0000807C ; Segment type: Pure code
.text:0000807C ; Segment permissions: Read/Execute
.text:0000807C _text           segment para public 'CODE' use32
.text:0000807C                 assume cs:_text
.text:0000807C                 ;org 807Ch
.text:0000807C ; COMDAT (pick any)
.text:0000807C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000807C
.text:0000807C ; =============== S U B R O U T I N E =======================================
.text:0000807C
.text:0000807C ; Attributes: bp-based frame
.text:0000807C
.text:0000807C ; public: unsigned int & __thiscall CRecordVector<unsigned int>::operator[](unsigned int)
.text:0000807C                 public ??A?$CRecordVector@I@@QAEAAII@Z
.text:0000807C ??A?$CRecordVector@I@@QAEAAII@Z proc near
.text:0000807C                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+AF9p
.text:0000807C
.text:0000807C var_4           = dword ptr -4
.text:0000807C arg_0           = dword ptr  8
.text:0000807C
.text:0000807C                 push    ebp
.text:0000807D                 mov     ebp, esp
.text:0000807F                 push    ecx
.text:00008080                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008087                 mov     [ebp+var_4], ecx
.text:0000808A                 mov     eax, [ebp+var_4]
.text:0000808D                 mov     ecx, [eax]
.text:0000808F                 mov     edx, [ebp+arg_0]
.text:00008092                 lea     eax, [ecx+edx*4]
.text:00008095                 mov     esp, ebp
.text:00008097                 pop     ebp
.text:00008098                 retn    4
.text:00008098 ??A?$CRecordVector@I@@QAEAAII@Z endp
.text:00008098
.text:00008098 ; ---------------------------------------------------------------------------
.text:0000809B                 align 4
.text:0000809B _text           ends
.text:0000809B
.text:0000809C ; ===========================================================================
.text:0000809C
.text:0000809C ; Segment type: Pure code
.text:0000809C ; Segment permissions: Read/Execute
.text:0000809C _text           segment para public 'CODE' use32
.text:0000809C                 assume cs:_text
.text:0000809C                 ;org 809Ch
.text:0000809C ; COMDAT (pick any)
.text:0000809C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000809C
.text:0000809C ; =============== S U B R O U T I N E =======================================
.text:0000809C
.text:0000809C ; Attributes: bp-based frame
.text:0000809C
.text:0000809C ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(void)
.text:0000809C                 public ??0?$CBuffer@E@@QAE@XZ
.text:0000809C ??0?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::NCab::CInArchive::CInArchive(void)+1Cp
.text:0000809C
.text:0000809C var_4           = dword ptr -4
.text:0000809C
.text:0000809C                 push    ebp
.text:0000809D                 mov     ebp, esp
.text:0000809F                 push    ecx
.text:000080A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000080A7                 mov     [ebp+var_4], ecx
.text:000080AA                 mov     eax, [ebp+var_4]
.text:000080AD                 mov     dword ptr [eax], 0
.text:000080B3                 mov     ecx, [ebp+var_4]
.text:000080B6                 mov     dword ptr [ecx+4], 0
.text:000080BD                 mov     eax, [ebp+var_4]
.text:000080C0                 mov     esp, ebp
.text:000080C2                 pop     ebp
.text:000080C3                 retn
.text:000080C3 ??0?$CBuffer@E@@QAE@XZ endp
.text:000080C3
.text:000080C3 _text           ends
.text:000080C3
.text:000080C4 ; ===========================================================================
.text:000080C4
.text:000080C4 ; Segment type: Pure code
.text:000080C4 ; Segment permissions: Read/Execute
.text:000080C4 _text           segment para public 'CODE' use32
.text:000080C4                 assume cs:_text
.text:000080C4                 ;org 80C4h
.text:000080C4 ; COMDAT (pick any)
.text:000080C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000080C4
.text:000080C4 ; =============== S U B R O U T I N E =======================================
.text:000080C4
.text:000080C4 ; Attributes: bp-based frame
.text:000080C4
.text:000080C4 ; public: __thiscall CBuffer<unsigned char>::~CBuffer<unsigned char>(void)
.text:000080C4                 public ??1?$CBuffer@E@@QAE@XZ
.text:000080C4 ??1?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::NCab::CInArchive::~CInArchive(void)+14p
.text:000080C4
.text:000080C4 var_8           = dword ptr -8
.text:000080C4 var_4           = dword ptr -4
.text:000080C4
.text:000080C4                 push    ebp
.text:000080C5                 mov     ebp, esp
.text:000080C7                 sub     esp, 8
.text:000080CA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000080D1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000080D8                 mov     [ebp+var_4], ecx
.text:000080DB                 mov     eax, [ebp+var_4]
.text:000080DE                 mov     ecx, [eax]
.text:000080E0                 mov     [ebp+var_8], ecx
.text:000080E3                 mov     edx, [ebp+var_8]
.text:000080E6                 push    edx             ; void *
.text:000080E7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000080EC                 add     esp, 4
.text:000080EF                 add     esp, 8
.text:000080F2                 cmp     ebp, esp
.text:000080F4                 call    __RTC_CheckEsp
.text:000080F9                 mov     esp, ebp
.text:000080FB                 pop     ebp
.text:000080FC                 retn
.text:000080FC ??1?$CBuffer@E@@QAE@XZ endp
.text:000080FC
.text:000080FC ; ---------------------------------------------------------------------------
.text:000080FD                 align 10h
.text:000080FD _text           ends
.text:000080FD
.text:00008100 ; ===========================================================================
.text:00008100
.text:00008100 ; Segment type: Pure code
.text:00008100 ; Segment permissions: Read/Execute
.text:00008100 _text           segment para public 'CODE' use32
.text:00008100                 assume cs:_text
.text:00008100                 ;org 8100h
.text:00008100 ; COMDAT (pick any)
.text:00008100                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008100
.text:00008100 ; =============== S U B R O U T I N E =======================================
.text:00008100
.text:00008100 ; Attributes: bp-based frame
.text:00008100
.text:00008100 ; public: __thiscall CMyComPtr<struct IArchiveOpenVolumeCallback>::CMyComPtr<struct IArchiveOpenVolumeCallback>(void)
.text:00008100                 public ??0?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ
.text:00008100 ??0?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ proc near
.text:00008100                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+74p
.text:00008100
.text:00008100 var_4           = dword ptr -4
.text:00008100
.text:00008100                 push    ebp
.text:00008101                 mov     ebp, esp
.text:00008103                 push    ecx
.text:00008104                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000810B                 mov     [ebp+var_4], ecx
.text:0000810E                 mov     eax, [ebp+var_4]
.text:00008111                 mov     dword ptr [eax], 0
.text:00008117                 mov     eax, [ebp+var_4]
.text:0000811A                 mov     esp, ebp
.text:0000811C                 pop     ebp
.text:0000811D                 retn
.text:0000811D ??0?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ endp
.text:0000811D
.text:0000811D ; ---------------------------------------------------------------------------
.text:0000811E                 align 10h
.text:0000811E _text           ends
.text:0000811E
.text:00008120 ; ===========================================================================
.text:00008120
.text:00008120 ; Segment type: Pure code
.text:00008120 ; Segment permissions: Read/Execute
.text:00008120 _text           segment para public 'CODE' use32
.text:00008120                 assume cs:_text
.text:00008120                 ;org 8120h
.text:00008120 ; COMDAT (pick any)
.text:00008120                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008120
.text:00008120 ; =============== S U B R O U T I N E =======================================
.text:00008120
.text:00008120 ; Attributes: bp-based frame
.text:00008120
.text:00008120 ; public: __thiscall CMyComPtr<struct IArchiveOpenVolumeCallback>::~CMyComPtr<struct IArchiveOpenVolumeCallback>(void)
.text:00008120                 public ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ
.text:00008120 ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ proc near
.text:00008120                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+3E9p
.text:00008120                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+44Dp ...
.text:00008120
.text:00008120 var_4           = dword ptr -4
.text:00008120
.text:00008120                 push    ebp
.text:00008121                 mov     ebp, esp
.text:00008123                 push    ecx
.text:00008124                 push    esi
.text:00008125                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000812C                 mov     [ebp+var_4], ecx
.text:0000812F                 mov     eax, [ebp+var_4]
.text:00008132                 cmp     dword ptr [eax], 0
.text:00008135                 jz      short loc_8152
.text:00008137                 mov     ecx, [ebp+var_4]
.text:0000813A                 mov     edx, [ecx]
.text:0000813C                 mov     eax, [ebp+var_4]
.text:0000813F                 mov     ecx, [eax]
.text:00008141                 mov     edx, [edx]
.text:00008143                 mov     esi, esp
.text:00008145                 push    ecx
.text:00008146                 mov     eax, [edx+8]
.text:00008149                 call    eax
.text:0000814B                 cmp     esi, esp
.text:0000814D                 call    __RTC_CheckEsp
.text:00008152
.text:00008152 loc_8152:                               ; CODE XREF: CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>(void)+15j
.text:00008152                 pop     esi
.text:00008153                 add     esp, 4
.text:00008156                 cmp     ebp, esp
.text:00008158                 call    __RTC_CheckEsp
.text:0000815D                 mov     esp, ebp
.text:0000815F                 pop     ebp
.text:00008160                 retn
.text:00008160 ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ endp
.text:00008160
.text:00008160 ; ---------------------------------------------------------------------------
.text:00008161                 align 4
.text:00008161 _text           ends
.text:00008161
.text:00008164 ; ===========================================================================
.text:00008164
.text:00008164 ; Segment type: Pure code
.text:00008164 ; Segment permissions: Read/Execute
.text:00008164 _text           segment para public 'CODE' use32
.text:00008164                 assume cs:_text
.text:00008164                 ;org 8164h
.text:00008164 ; COMDAT (pick any)
.text:00008164                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008164
.text:00008164 ; =============== S U B R O U T I N E =======================================
.text:00008164
.text:00008164 ; Attributes: bp-based frame
.text:00008164
.text:00008164 ; public: struct IArchiveOpenVolumeCallback * * __thiscall CMyComPtr<struct IArchiveOpenVolumeCallback>::operator&(void)
.text:00008164                 public ??I?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAEPAPAUIArchiveOpenVolumeCallback@@XZ
.text:00008164 ??I?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAEPAPAUIArchiveOpenVolumeCallback@@XZ proc near
.text:00008164                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+86p
.text:00008164
.text:00008164 var_4           = dword ptr -4
.text:00008164
.text:00008164                 push    ebp
.text:00008165                 mov     ebp, esp
.text:00008167                 push    ecx
.text:00008168                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000816F                 mov     [ebp+var_4], ecx
.text:00008172                 mov     eax, [ebp+var_4]
.text:00008175                 mov     esp, ebp
.text:00008177                 pop     ebp
.text:00008178                 retn
.text:00008178 ??I?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAEPAPAUIArchiveOpenVolumeCallback@@XZ endp
.text:00008178
.text:00008178 ; ---------------------------------------------------------------------------
.text:00008179                 align 4
.text:00008179 _text           ends
.text:00008179
.text:0000817C ; ===========================================================================
.text:0000817C
.text:0000817C ; Segment type: Pure code
.text:0000817C ; Segment permissions: Read/Execute
.text:0000817C _text           segment para public 'CODE' use32
.text:0000817C                 assume cs:_text
.text:0000817C                 ;org 817Ch
.text:0000817C ; COMDAT (pick any)
.text:0000817C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000817C
.text:0000817C ; =============== S U B R O U T I N E =======================================
.text:0000817C
.text:0000817C ; Attributes: bp-based frame
.text:0000817C
.text:0000817C ; public: struct IArchiveOpenVolumeCallback * __thiscall CMyComPtr<struct IArchiveOpenVolumeCallback>::operator->(void)const
.text:0000817C                 public ??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ
.text:0000817C ??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ proc near
.text:0000817C                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+6B2p
.text:0000817C
.text:0000817C var_4           = dword ptr -4
.text:0000817C
.text:0000817C                 push    ebp
.text:0000817D                 mov     ebp, esp
.text:0000817F                 push    ecx
.text:00008180                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008187                 mov     [ebp+var_4], ecx
.text:0000818A                 mov     eax, [ebp+var_4]
.text:0000818D                 mov     eax, [eax]
.text:0000818F                 mov     esp, ebp
.text:00008191                 pop     ebp
.text:00008192                 retn
.text:00008192 ??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ endp
.text:00008192
.text:00008192 ; ---------------------------------------------------------------------------
.text:00008193                 align 4
.text:00008193 _text           ends
.text:00008193
.text:00008194 ; ===========================================================================
.text:00008194
.text:00008194 ; Segment type: Pure code
.text:00008194 ; Segment permissions: Read/Execute
.text:00008194 _text           segment para public 'CODE' use32
.text:00008194                 assume cs:_text
.text:00008194                 ;org 8194h
.text:00008194 ; COMDAT (pick any)
.text:00008194                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008194
.text:00008194 ; =============== S U B R O U T I N E =======================================
.text:00008194
.text:00008194 ; Attributes: bp-based frame
.text:00008194
.text:00008194 ; public: bool __thiscall CMyComPtr<struct IArchiveOpenVolumeCallback>::operator!(void)const
.text:00008194                 public ??7?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBE_NXZ
.text:00008194 ??7?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBE_NXZ proc near
.text:00008194                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+675p
.text:00008194
.text:00008194 var_4           = dword ptr -4
.text:00008194
.text:00008194                 push    ebp
.text:00008195                 mov     ebp, esp
.text:00008197                 push    ecx
.text:00008198                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000819F                 mov     [ebp+var_4], ecx
.text:000081A2                 mov     eax, [ebp+var_4]
.text:000081A5                 xor     ecx, ecx
.text:000081A7                 cmp     dword ptr [eax], 0
.text:000081AA                 setz    cl
.text:000081AD                 mov     al, cl
.text:000081AF                 mov     esp, ebp
.text:000081B1                 pop     ebp
.text:000081B2                 retn
.text:000081B2 ??7?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBE_NXZ endp
.text:000081B2
.text:000081B2 ; ---------------------------------------------------------------------------
.text:000081B3                 align 4
.text:000081B3 _text           ends
.text:000081B3
.text:000081B4 ; ===========================================================================
.text:000081B4
.text:000081B4 ; Segment type: Pure code
.text:000081B4 ; Segment permissions: Read/Execute
.text:000081B4 _text           segment para public 'CODE' use32
.text:000081B4                 assume cs:_text
.text:000081B4                 ;org 81B4h
.text:000081B4 ; COMDAT (pick any)
.text:000081B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000081B4
.text:000081B4 ; =============== S U B R O U T I N E =======================================
.text:000081B4
.text:000081B4 ; Attributes: bp-based frame
.text:000081B4
.text:000081B4 ; public: __thiscall CMyComPtr<struct IArchiveExtractCallback>::CMyComPtr<struct IArchiveExtractCallback>(void)
.text:000081B4                 public ??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ
.text:000081B4 ??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ proc near
.text:000081B4                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::CFolderOutStream(void)+59p
.text:000081B4
.text:000081B4 var_4           = dword ptr -4
.text:000081B4
.text:000081B4                 push    ebp
.text:000081B5                 mov     ebp, esp
.text:000081B7                 push    ecx
.text:000081B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000081BF                 mov     [ebp+var_4], ecx
.text:000081C2                 mov     eax, [ebp+var_4]
.text:000081C5                 mov     dword ptr [eax], 0
.text:000081CB                 mov     eax, [ebp+var_4]
.text:000081CE                 mov     esp, ebp
.text:000081D0                 pop     ebp
.text:000081D1                 retn
.text:000081D1 ??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ endp
.text:000081D1
.text:000081D1 ; ---------------------------------------------------------------------------
.text:000081D2                 align 4
.text:000081D2 _text           ends
.text:000081D2
.text:000081D4 ; ===========================================================================
.text:000081D4
.text:000081D4 ; Segment type: Pure code
.text:000081D4 ; Segment permissions: Read/Execute
.text:000081D4 _text           segment para public 'CODE' use32
.text:000081D4                 assume cs:_text
.text:000081D4                 ;org 81D4h
.text:000081D4 ; COMDAT (pick any)
.text:000081D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000081D4
.text:000081D4 ; =============== S U B R O U T I N E =======================================
.text:000081D4
.text:000081D4 ; Attributes: bp-based frame
.text:000081D4
.text:000081D4 ; public: __thiscall CMyComPtr<struct IArchiveExtractCallback>::~CMyComPtr<struct IArchiveExtractCallback>(void)
.text:000081D4                 public ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ
.text:000081D4 ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ proc near
.text:000081D4                                         ; CODE XREF: __unwindfunclet$??0CFolderOutStream@NCab@NArchive@@QAE@XZ$0+6j
.text:000081D4                                         ; NArchive::NCab::CFolderOutStream::~CFolderOutStream(void)+61p ...
.text:000081D4
.text:000081D4 var_4           = dword ptr -4
.text:000081D4
.text:000081D4                 push    ebp
.text:000081D5                 mov     ebp, esp
.text:000081D7                 push    ecx
.text:000081D8                 push    esi
.text:000081D9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000081E0                 mov     [ebp+var_4], ecx
.text:000081E3                 mov     eax, [ebp+var_4]
.text:000081E6                 cmp     dword ptr [eax], 0
.text:000081E9                 jz      short loc_8206
.text:000081EB                 mov     ecx, [ebp+var_4]
.text:000081EE                 mov     edx, [ecx]
.text:000081F0                 mov     eax, [ebp+var_4]
.text:000081F3                 mov     ecx, [eax]
.text:000081F5                 mov     edx, [edx]
.text:000081F7                 mov     esi, esp
.text:000081F9                 push    ecx
.text:000081FA                 mov     eax, [edx+8]
.text:000081FD                 call    eax
.text:000081FF                 cmp     esi, esp
.text:00008201                 call    __RTC_CheckEsp
.text:00008206
.text:00008206 loc_8206:                               ; CODE XREF: CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>(void)+15j
.text:00008206                 pop     esi
.text:00008207                 add     esp, 4
.text:0000820A                 cmp     ebp, esp
.text:0000820C                 call    __RTC_CheckEsp
.text:00008211                 mov     esp, ebp
.text:00008213                 pop     ebp
.text:00008214                 retn
.text:00008214 ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ endp
.text:00008214
.text:00008214 ; ---------------------------------------------------------------------------
.text:00008215                 align 4
.text:00008215 _text           ends
.text:00008215
.text:00008218 ; ===========================================================================
.text:00008218
.text:00008218 ; Segment type: Pure code
.text:00008218 ; Segment permissions: Read/Execute
.text:00008218 _text           segment para public 'CODE' use32
.text:00008218                 assume cs:_text
.text:00008218                 ;org 8218h
.text:00008218 ; COMDAT (pick any)
.text:00008218                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008218
.text:00008218 ; =============== S U B R O U T I N E =======================================
.text:00008218
.text:00008218 ; Attributes: bp-based frame
.text:00008218
.text:00008218 ; public: struct IArchiveExtractCallback * __thiscall CMyComPtr<struct IArchiveExtractCallback>::operator->(void)const
.text:00008218                 public ??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ
.text:00008218 ??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ proc near
.text:00008218                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::CloseFileWithResOp(int)+3Fp
.text:00008218                                         ; NArchive::NCab::CFolderOutStream::OpenFile(void)+230p ...
.text:00008218
.text:00008218 var_4           = dword ptr -4
.text:00008218
.text:00008218                 push    ebp
.text:00008219                 mov     ebp, esp
.text:0000821B                 push    ecx
.text:0000821C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008223                 mov     [ebp+var_4], ecx
.text:00008226                 mov     eax, [ebp+var_4]
.text:00008229                 mov     eax, [eax]
.text:0000822B                 mov     esp, ebp
.text:0000822D                 pop     ebp
.text:0000822E                 retn
.text:0000822E ??C?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ endp
.text:0000822E
.text:0000822E ; ---------------------------------------------------------------------------
.text:0000822F                 align 10h
.text:0000822F _text           ends
.text:0000822F
.text:00008230 ; ===========================================================================
.text:00008230
.text:00008230 ; Segment type: Pure code
.text:00008230 ; Segment permissions: Read/Execute
.text:00008230 _text           segment para public 'CODE' use32
.text:00008230                 assume cs:_text
.text:00008230                 ;org 8230h
.text:00008230 ; COMDAT (pick any)
.text:00008230                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008230
.text:00008230 ; =============== S U B R O U T I N E =======================================
.text:00008230
.text:00008230 ; Attributes: bp-based frame
.text:00008230
.text:00008230 ; public: struct IArchiveExtractCallback * __thiscall CMyComPtr<struct IArchiveExtractCallback>::operator=(struct IArchiveExtractCallback *)
.text:00008230                 public ??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@PAU1@@Z
.text:00008230 ??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@PAU1@@Z proc near
.text:00008230                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::Init(NArchive::NCab::CMvDatabaseEx const *,CRecordVector<bool> const *,uint,unsigned __int64,IArchiveExtractCallback *,bool)+42p
.text:00008230
.text:00008230 var_4           = dword ptr -4
.text:00008230 arg_0           = dword ptr  8
.text:00008230
.text:00008230                 push    ebp
.text:00008231                 mov     ebp, esp
.text:00008233                 push    ecx
.text:00008234                 push    esi
.text:00008235                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000823C                 mov     [ebp+var_4], ecx
.text:0000823F                 cmp     [ebp+arg_0], 0
.text:00008243                 jz      short loc_825C
.text:00008245                 mov     eax, [ebp+arg_0]
.text:00008248                 mov     ecx, [eax]
.text:0000824A                 mov     esi, esp
.text:0000824C                 mov     edx, [ebp+arg_0]
.text:0000824F                 push    edx
.text:00008250                 mov     eax, [ecx+4]
.text:00008253                 call    eax
.text:00008255                 cmp     esi, esp
.text:00008257                 call    __RTC_CheckEsp
.text:0000825C
.text:0000825C loc_825C:                               ; CODE XREF: CMyComPtr<IArchiveExtractCallback>::operator=(IArchiveExtractCallback *)+13j
.text:0000825C                 mov     ecx, [ebp+var_4]
.text:0000825F                 cmp     dword ptr [ecx], 0
.text:00008262                 jz      short loc_827F
.text:00008264                 mov     edx, [ebp+var_4]
.text:00008267                 mov     eax, [edx]
.text:00008269                 mov     ecx, [ebp+var_4]
.text:0000826C                 mov     edx, [ecx]
.text:0000826E                 mov     eax, [eax]
.text:00008270                 mov     esi, esp
.text:00008272                 push    edx
.text:00008273                 mov     ecx, [eax+8]
.text:00008276                 call    ecx
.text:00008278                 cmp     esi, esp
.text:0000827A                 call    __RTC_CheckEsp
.text:0000827F
.text:0000827F loc_827F:                               ; CODE XREF: CMyComPtr<IArchiveExtractCallback>::operator=(IArchiveExtractCallback *)+32j
.text:0000827F                 mov     edx, [ebp+var_4]
.text:00008282                 mov     eax, [ebp+arg_0]
.text:00008285                 mov     [edx], eax
.text:00008287                 mov     eax, [ebp+arg_0]
.text:0000828A                 pop     esi
.text:0000828B                 add     esp, 4
.text:0000828E                 cmp     ebp, esp
.text:00008290                 call    __RTC_CheckEsp
.text:00008295                 mov     esp, ebp
.text:00008297                 pop     ebp
.text:00008298                 retn    4
.text:00008298 ??4?$CMyComPtr@UIArchiveExtractCallback@@@@QAEPAUIArchiveExtractCallback@@PAU1@@Z endp
.text:00008298
.text:00008298 ; ---------------------------------------------------------------------------
.text:0000829B                 align 4
.text:0000829B _text           ends
.text:0000829B
.text:0000829C ; ===========================================================================
.text:0000829C
.text:0000829C ; Segment type: Pure code
.text:0000829C ; Segment permissions: Read/Execute
.text:0000829C _text           segment para public 'CODE' use32
.text:0000829C                 assume cs:_text
.text:0000829C                 ;org 829Ch
.text:0000829C ; COMDAT (pick any)
.text:0000829C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000829C
.text:0000829C ; =============== S U B R O U T I N E =======================================
.text:0000829C
.text:0000829C ; Attributes: bp-based frame
.text:0000829C
.text:0000829C ; public: __thiscall CRecordVector<bool>::CRecordVector<bool>(void)
.text:0000829C                 public ??0?$CRecordVector@_N@@QAE@XZ
.text:0000829C ??0?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+486p
.text:0000829C
.text:0000829C var_4           = dword ptr -4
.text:0000829C
.text:0000829C                 push    ebp
.text:0000829D                 mov     ebp, esp
.text:0000829F                 push    ecx
.text:000082A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000082A7                 mov     [ebp+var_4], ecx
.text:000082AA                 mov     eax, [ebp+var_4]
.text:000082AD                 mov     dword ptr [eax], 0
.text:000082B3                 mov     ecx, [ebp+var_4]
.text:000082B6                 mov     dword ptr [ecx+4], 0
.text:000082BD                 mov     edx, [ebp+var_4]
.text:000082C0                 mov     dword ptr [edx+8], 0
.text:000082C7                 mov     eax, [ebp+var_4]
.text:000082CA                 mov     esp, ebp
.text:000082CC                 pop     ebp
.text:000082CD                 retn
.text:000082CD ??0?$CRecordVector@_N@@QAE@XZ endp
.text:000082CD
.text:000082CD ; ---------------------------------------------------------------------------
.text:000082CE                 align 10h
.text:000082CE _text           ends
.text:000082CE
.text:000082D0 ; ===========================================================================
.text:000082D0
.text:000082D0 ; Segment type: Pure code
.text:000082D0 ; Segment permissions: Read/Execute
.text:000082D0 _text           segment para public 'CODE' use32
.text:000082D0                 assume cs:_text
.text:000082D0                 ;org 82D0h
.text:000082D0 ; COMDAT (pick any)
.text:000082D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000082D0
.text:000082D0 ; =============== S U B R O U T I N E =======================================
.text:000082D0
.text:000082D0 ; Attributes: bp-based frame
.text:000082D0
.text:000082D0 ; public: unsigned int __thiscall CRecordVector<bool>::Size(void)const
.text:000082D0                 public ?Size@?$CRecordVector@_N@@QBEIXZ
.text:000082D0 ?Size@?$CRecordVector@_N@@QBEIXZ proc near
.text:000082D0                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+ACp
.text:000082D0                                         ; NArchive::NCab::CFolderOutStream::WriteEmptyFiles(void)+53p ...
.text:000082D0
.text:000082D0 var_4           = dword ptr -4
.text:000082D0
.text:000082D0                 push    ebp
.text:000082D1                 mov     ebp, esp
.text:000082D3                 push    ecx
.text:000082D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000082DB                 mov     [ebp+var_4], ecx
.text:000082DE                 mov     eax, [ebp+var_4]
.text:000082E1                 mov     eax, [eax+4]
.text:000082E4                 mov     esp, ebp
.text:000082E6                 pop     ebp
.text:000082E7                 retn
.text:000082E7 ?Size@?$CRecordVector@_N@@QBEIXZ endp
.text:000082E7
.text:000082E7 _text           ends
.text:000082E7
.text:000082E8 ; ===========================================================================
.text:000082E8
.text:000082E8 ; Segment type: Pure code
.text:000082E8 ; Segment permissions: Read/Execute
.text:000082E8 _text           segment para public 'CODE' use32
.text:000082E8                 assume cs:_text
.text:000082E8                 ;org 82E8h
.text:000082E8 ; COMDAT (pick any)
.text:000082E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000082E8
.text:000082E8 ; =============== S U B R O U T I N E =======================================
.text:000082E8
.text:000082E8 ; Attributes: bp-based frame
.text:000082E8
.text:000082E8 ; public: __thiscall CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000082E8                 public ??1?$CRecordVector@_N@@QAE@XZ
.text:000082E8 ??1?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+625p
.text:000082E8                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6E5p ...
.text:000082E8
.text:000082E8 var_8           = dword ptr -8
.text:000082E8 var_4           = dword ptr -4
.text:000082E8
.text:000082E8                 push    ebp
.text:000082E9                 mov     ebp, esp
.text:000082EB                 sub     esp, 8
.text:000082EE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000082F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000082FC                 mov     [ebp+var_4], ecx
.text:000082FF                 mov     eax, [ebp+var_4]
.text:00008302                 mov     ecx, [eax]
.text:00008304                 mov     [ebp+var_8], ecx
.text:00008307                 mov     edx, [ebp+var_8]
.text:0000830A                 push    edx             ; void *
.text:0000830B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008310                 add     esp, 4
.text:00008313                 add     esp, 8
.text:00008316                 cmp     ebp, esp
.text:00008318                 call    __RTC_CheckEsp
.text:0000831D                 mov     esp, ebp
.text:0000831F                 pop     ebp
.text:00008320                 retn
.text:00008320 ??1?$CRecordVector@_N@@QAE@XZ endp
.text:00008320
.text:00008320 ; ---------------------------------------------------------------------------
.text:00008321                 align 4
.text:00008321 _text           ends
.text:00008321
.text:00008324 ; ===========================================================================
.text:00008324
.text:00008324 ; Segment type: Pure code
.text:00008324 ; Segment permissions: Read/Execute
.text:00008324 _text           segment para public 'CODE' use32
.text:00008324                 assume cs:_text
.text:00008324                 ;org 8324h
.text:00008324 ; COMDAT (pick any)
.text:00008324                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008324
.text:00008324 ; =============== S U B R O U T I N E =======================================
.text:00008324
.text:00008324 ; Attributes: bp-based frame
.text:00008324
.text:00008324 ; public: void __thiscall CRecordVector<bool>::Clear(void)
.text:00008324                 public ?Clear@?$CRecordVector@_N@@QAEXXZ
.text:00008324 ?Clear@?$CRecordVector@_N@@QAEXXZ proc near
.text:00008324                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+B24p
.text:00008324
.text:00008324 var_4           = dword ptr -4
.text:00008324
.text:00008324                 push    ebp
.text:00008325                 mov     ebp, esp
.text:00008327                 push    ecx
.text:00008328                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000832F                 mov     [ebp+var_4], ecx
.text:00008332                 mov     eax, [ebp+var_4]
.text:00008335                 mov     dword ptr [eax+4], 0
.text:0000833C                 mov     esp, ebp
.text:0000833E                 pop     ebp
.text:0000833F                 retn
.text:0000833F ?Clear@?$CRecordVector@_N@@QAEXXZ endp
.text:0000833F
.text:0000833F _text           ends
.text:0000833F
.text:00008340 ; ===========================================================================
.text:00008340
.text:00008340 ; Segment type: Pure code
.text:00008340 ; Segment permissions: Read/Execute
.text:00008340 _text           segment para public 'CODE' use32
.text:00008340                 assume cs:_text
.text:00008340                 ;org 8340h
.text:00008340 ; COMDAT (pick any)
.text:00008340                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008340
.text:00008340 ; =============== S U B R O U T I N E =======================================
.text:00008340
.text:00008340 ; Attributes: bp-based frame
.text:00008340
.text:00008340 ; public: unsigned int __thiscall CRecordVector<bool>::Add(bool)
.text:00008340                 public ?Add@?$CRecordVector@_N@@QAEI_N@Z
.text:00008340 ?Add@?$CRecordVector@_N@@QAEI_N@Z proc near
.text:00008340                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+B50p
.text:00008340                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+B5Fp ...
.text:00008340
.text:00008340 var_8           = dword ptr -8
.text:00008340 var_4           = dword ptr -4
.text:00008340 arg_0           = byte ptr  8
.text:00008340
.text:00008340                 push    ebp
.text:00008341                 mov     ebp, esp
.text:00008343                 sub     esp, 8
.text:00008346                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000834D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008354                 mov     [ebp+var_4], ecx
.text:00008357                 mov     ecx, [ebp+var_4]
.text:0000835A                 call    ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ ; CRecordVector<bool>::ReserveOnePosition(void)
.text:0000835F                 mov     eax, [ebp+var_4]
.text:00008362                 mov     ecx, [eax]
.text:00008364                 mov     edx, [ebp+var_4]
.text:00008367                 mov     eax, [edx+4]
.text:0000836A                 mov     dl, [ebp+arg_0]
.text:0000836D                 mov     [ecx+eax], dl
.text:00008370                 mov     eax, [ebp+var_4]
.text:00008373                 mov     ecx, [eax+4]
.text:00008376                 mov     [ebp+var_8], ecx
.text:00008379                 mov     edx, [ebp+var_4]
.text:0000837C                 mov     eax, [edx+4]
.text:0000837F                 add     eax, 1
.text:00008382                 mov     ecx, [ebp+var_4]
.text:00008385                 mov     [ecx+4], eax
.text:00008388                 mov     eax, [ebp+var_8]
.text:0000838B                 add     esp, 8
.text:0000838E                 cmp     ebp, esp
.text:00008390                 call    __RTC_CheckEsp
.text:00008395                 mov     esp, ebp
.text:00008397                 pop     ebp
.text:00008398                 retn    4
.text:00008398 ?Add@?$CRecordVector@_N@@QAEI_N@Z endp
.text:00008398
.text:00008398 ; ---------------------------------------------------------------------------
.text:0000839B                 align 4
.text:0000839B _text           ends
.text:0000839B
.text:0000839C ; ===========================================================================
.text:0000839C
.text:0000839C ; Segment type: Pure code
.text:0000839C ; Segment permissions: Read/Execute
.text:0000839C _text           segment para public 'CODE' use32
.text:0000839C                 assume cs:_text
.text:0000839C                 ;org 839Ch
.text:0000839C ; COMDAT (pick any)
.text:0000839C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000839C
.text:0000839C ; =============== S U B R O U T I N E =======================================
.text:0000839C
.text:0000839C ; Attributes: bp-based frame
.text:0000839C
.text:0000839C ; public: bool const & __thiscall CRecordVector<bool>::operator[](unsigned int)const
.text:0000839C                 public ??A?$CRecordVector@_N@@QBEAB_NI@Z
.text:0000839C ??A?$CRecordVector@_N@@QBEAB_NI@Z proc near
.text:0000839C                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+136p
.text:0000839C                                         ; NArchive::NCab::CFolderOutStream::OpenFile(void)+20Bp ...
.text:0000839C
.text:0000839C var_4           = dword ptr -4
.text:0000839C arg_0           = dword ptr  8
.text:0000839C
.text:0000839C                 push    ebp
.text:0000839D                 mov     ebp, esp
.text:0000839F                 push    ecx
.text:000083A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000083A7                 mov     [ebp+var_4], ecx
.text:000083AA                 mov     eax, [ebp+var_4]
.text:000083AD                 mov     eax, [eax]
.text:000083AF                 add     eax, [ebp+arg_0]
.text:000083B2                 mov     esp, ebp
.text:000083B4                 pop     ebp
.text:000083B5                 retn    4
.text:000083B5 ??A?$CRecordVector@_N@@QBEAB_NI@Z endp
.text:000083B5
.text:000083B5 _text           ends
.text:000083B5
.text:000083B8 ; ===========================================================================
.text:000083B8
.text:000083B8 ; Segment type: Pure code
.text:000083B8 ; Segment permissions: Read/Execute
.text:000083B8 _text           segment para public 'CODE' use32
.text:000083B8                 assume cs:_text
.text:000083B8                 ;org 83B8h
.text:000083B8 ; COMDAT (pick any)
.text:000083B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000083B8
.text:000083B8 ; =============== S U B R O U T I N E =======================================
.text:000083B8
.text:000083B8 ; Attributes: bp-based frame
.text:000083B8
.text:000083B8 ; public: __thiscall CMyComPtr<struct ICompressCoder>::CMyComPtr<struct ICompressCoder>(void)
.text:000083B8                 public ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:000083B8 ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:000083B8                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+336p
.text:000083B8                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+34Fp ...
.text:000083B8
.text:000083B8 var_4           = dword ptr -4
.text:000083B8
.text:000083B8                 push    ebp
.text:000083B9                 mov     ebp, esp
.text:000083BB                 push    ecx
.text:000083BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000083C3                 mov     [ebp+var_4], ecx
.text:000083C6                 mov     eax, [ebp+var_4]
.text:000083C9                 mov     dword ptr [eax], 0
.text:000083CF                 mov     eax, [ebp+var_4]
.text:000083D2                 mov     esp, ebp
.text:000083D4                 pop     ebp
.text:000083D5                 retn
.text:000083D5 ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:000083D5
.text:000083D5 ; ---------------------------------------------------------------------------
.text:000083D6                 align 4
.text:000083D6 _text           ends
.text:000083D6
.text:000083D8 ; ===========================================================================
.text:000083D8
.text:000083D8 ; Segment type: Pure code
.text:000083D8 ; Segment permissions: Read/Execute
.text:000083D8 _text           segment para public 'CODE' use32
.text:000083D8                 assume cs:_text
.text:000083D8                 ;org 83D8h
.text:000083D8 ; COMDAT (pick any)
.text:000083D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000083D8
.text:000083D8 ; =============== S U B R O U T I N E =======================================
.text:000083D8
.text:000083D8 ; Attributes: bp-based frame
.text:000083D8
.text:000083D8 ; public: __thiscall CMyComPtr<struct ICompressCoder>::CMyComPtr<struct ICompressCoder>(struct ICompressCoder *)
.text:000083D8                 public ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z
.text:000083D8 ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z proc near
.text:000083D8                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+323p
.text:000083D8
.text:000083D8 var_4           = dword ptr -4
.text:000083D8 arg_0           = dword ptr  8
.text:000083D8
.text:000083D8                 push    ebp
.text:000083D9                 mov     ebp, esp
.text:000083DB                 push    ecx
.text:000083DC                 push    esi
.text:000083DD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000083E4                 mov     [ebp+var_4], ecx
.text:000083E7                 mov     eax, [ebp+var_4]
.text:000083EA                 mov     ecx, [ebp+arg_0]
.text:000083ED                 mov     [eax], ecx
.text:000083EF                 cmp     [ebp+arg_0], 0
.text:000083F3                 jz      short loc_840C
.text:000083F5                 mov     edx, [ebp+arg_0]
.text:000083F8                 mov     eax, [edx]
.text:000083FA                 mov     esi, esp
.text:000083FC                 mov     ecx, [ebp+arg_0]
.text:000083FF                 push    ecx
.text:00008400                 mov     edx, [eax+4]
.text:00008403                 call    edx
.text:00008405                 cmp     esi, esp
.text:00008407                 call    __RTC_CheckEsp
.text:0000840C
.text:0000840C loc_840C:                               ; CODE XREF: CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(ICompressCoder *)+1Bj
.text:0000840C                 mov     eax, [ebp+var_4]
.text:0000840F                 pop     esi
.text:00008410                 add     esp, 4
.text:00008413                 cmp     ebp, esp
.text:00008415                 call    __RTC_CheckEsp
.text:0000841A                 mov     esp, ebp
.text:0000841C                 pop     ebp
.text:0000841D                 retn    4
.text:0000841D ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z endp
.text:0000841D
.text:0000841D _text           ends
.text:0000841D
.text:00008420 ; ===========================================================================
.text:00008420
.text:00008420 ; Segment type: Pure code
.text:00008420 ; Segment permissions: Read/Execute
.text:00008420 _text           segment para public 'CODE' use32
.text:00008420                 assume cs:_text
.text:00008420                 ;org 8420h
.text:00008420 ; COMDAT (pick any)
.text:00008420                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008420
.text:00008420 ; =============== S U B R O U T I N E =======================================
.text:00008420
.text:00008420 ; Attributes: bp-based frame
.text:00008420
.text:00008420 ; public: __thiscall CMyComPtr<struct ICompressCoder>::~CMyComPtr<struct ICompressCoder>(void)
.text:00008420                 public ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:00008420 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:00008420                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+440p
.text:00008420                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+44Cp ...
.text:00008420
.text:00008420 var_4           = dword ptr -4
.text:00008420
.text:00008420                 push    ebp
.text:00008421                 mov     ebp, esp
.text:00008423                 push    ecx
.text:00008424                 push    esi
.text:00008425                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000842C                 mov     [ebp+var_4], ecx
.text:0000842F                 mov     eax, [ebp+var_4]
.text:00008432                 cmp     dword ptr [eax], 0
.text:00008435                 jz      short loc_8452
.text:00008437                 mov     ecx, [ebp+var_4]
.text:0000843A                 mov     edx, [ecx]
.text:0000843C                 mov     eax, [ebp+var_4]
.text:0000843F                 mov     ecx, [eax]
.text:00008441                 mov     edx, [edx]
.text:00008443                 mov     esi, esp
.text:00008445                 push    ecx
.text:00008446                 mov     eax, [edx+8]
.text:00008449                 call    eax
.text:0000844B                 cmp     esi, esp
.text:0000844D                 call    __RTC_CheckEsp
.text:00008452
.text:00008452 loc_8452:                               ; CODE XREF: CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)+15j
.text:00008452                 pop     esi
.text:00008453                 add     esp, 4
.text:00008456                 cmp     ebp, esp
.text:00008458                 call    __RTC_CheckEsp
.text:0000845D                 mov     esp, ebp
.text:0000845F                 pop     ebp
.text:00008460                 retn
.text:00008460 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:00008460
.text:00008460 ; ---------------------------------------------------------------------------
.text:00008461                 align 4
.text:00008461 _text           ends
.text:00008461
.text:00008464 ; ===========================================================================
.text:00008464
.text:00008464 ; Segment type: Pure code
.text:00008464 ; Segment permissions: Read/Execute
.text:00008464 _text           segment para public 'CODE' use32
.text:00008464                 assume cs:_text
.text:00008464                 ;org 8464h
.text:00008464 ; COMDAT (pick any)
.text:00008464                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008464
.text:00008464 ; =============== S U B R O U T I N E =======================================
.text:00008464
.text:00008464 ; Attributes: bp-based frame
.text:00008464
.text:00008464 ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator->(void)const
.text:00008464                 public ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
.text:00008464 ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ proc near
.text:00008464                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1898p
.text:00008464                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+193Bp ...
.text:00008464
.text:00008464 var_4           = dword ptr -4
.text:00008464
.text:00008464                 push    ebp
.text:00008465                 mov     ebp, esp
.text:00008467                 push    ecx
.text:00008468                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000846F                 mov     [ebp+var_4], ecx
.text:00008472                 mov     eax, [ebp+var_4]
.text:00008475                 mov     eax, [eax]
.text:00008477                 mov     esp, ebp
.text:00008479                 pop     ebp
.text:0000847A                 retn
.text:0000847A ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ endp
.text:0000847A
.text:0000847A ; ---------------------------------------------------------------------------
.text:0000847B                 align 4
.text:0000847B _text           ends
.text:0000847B
.text:0000847C ; ===========================================================================
.text:0000847C
.text:0000847C ; Segment type: Pure code
.text:0000847C ; Segment permissions: Read/Execute
.text:0000847C _text           segment para public 'CODE' use32
.text:0000847C                 assume cs:_text
.text:0000847C                 ;org 847Ch
.text:0000847C ; COMDAT (pick any)
.text:0000847C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000847C
.text:0000847C ; =============== S U B R O U T I N E =======================================
.text:0000847C
.text:0000847C ; Attributes: bp-based frame
.text:0000847C
.text:0000847C ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator=(struct ICompressCoder *)
.text:0000847C                 public ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z
.text:0000847C ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z proc near
.text:0000847C                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+FBEp
.text:0000847C                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1062p ...
.text:0000847C
.text:0000847C var_4           = dword ptr -4
.text:0000847C arg_0           = dword ptr  8
.text:0000847C
.text:0000847C                 push    ebp
.text:0000847D                 mov     ebp, esp
.text:0000847F                 push    ecx
.text:00008480                 push    esi
.text:00008481                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008488                 mov     [ebp+var_4], ecx
.text:0000848B                 cmp     [ebp+arg_0], 0
.text:0000848F                 jz      short loc_84A8
.text:00008491                 mov     eax, [ebp+arg_0]
.text:00008494                 mov     ecx, [eax]
.text:00008496                 mov     esi, esp
.text:00008498                 mov     edx, [ebp+arg_0]
.text:0000849B                 push    edx
.text:0000849C                 mov     eax, [ecx+4]
.text:0000849F                 call    eax
.text:000084A1                 cmp     esi, esp
.text:000084A3                 call    __RTC_CheckEsp
.text:000084A8
.text:000084A8 loc_84A8:                               ; CODE XREF: CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)+13j
.text:000084A8                 mov     ecx, [ebp+var_4]
.text:000084AB                 cmp     dword ptr [ecx], 0
.text:000084AE                 jz      short loc_84CB
.text:000084B0                 mov     edx, [ebp+var_4]
.text:000084B3                 mov     eax, [edx]
.text:000084B5                 mov     ecx, [ebp+var_4]
.text:000084B8                 mov     edx, [ecx]
.text:000084BA                 mov     eax, [eax]
.text:000084BC                 mov     esi, esp
.text:000084BE                 push    edx
.text:000084BF                 mov     ecx, [eax+8]
.text:000084C2                 call    ecx
.text:000084C4                 cmp     esi, esp
.text:000084C6                 call    __RTC_CheckEsp
.text:000084CB
.text:000084CB loc_84CB:                               ; CODE XREF: CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)+32j
.text:000084CB                 mov     edx, [ebp+var_4]
.text:000084CE                 mov     eax, [ebp+arg_0]
.text:000084D1                 mov     [edx], eax
.text:000084D3                 mov     eax, [ebp+arg_0]
.text:000084D6                 pop     esi
.text:000084D7                 add     esp, 4
.text:000084DA                 cmp     ebp, esp
.text:000084DC                 call    __RTC_CheckEsp
.text:000084E1                 mov     esp, ebp
.text:000084E3                 pop     ebp
.text:000084E4                 retn    4
.text:000084E4 ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z endp
.text:000084E4
.text:000084E4 ; ---------------------------------------------------------------------------
.text:000084E7                 align 4
.text:000084E7 _text           ends
.text:000084E7
.text:000084E8 ; ===========================================================================
.text:000084E8
.text:000084E8 ; Segment type: Pure code
.text:000084E8 ; Segment permissions: Read/Execute
.text:000084E8 _text           segment para public 'CODE' use32
.text:000084E8                 assume cs:_text
.text:000084E8                 ;org 84E8h
.text:000084E8 ; COMDAT (pick any)
.text:000084E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000084E8
.text:000084E8 ; =============== S U B R O U T I N E =======================================
.text:000084E8
.text:000084E8 ; Attributes: bp-based frame
.text:000084E8
.text:000084E8 ; public: bool __thiscall CMyComPtr<struct ICompressCoder>::operator!(void)const
.text:000084E8                 public ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ
.text:000084E8 ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ proc near
.text:000084E8                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+F33p
.text:000084E8                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+FD5p ...
.text:000084E8
.text:000084E8 var_4           = dword ptr -4
.text:000084E8
.text:000084E8                 push    ebp
.text:000084E9                 mov     ebp, esp
.text:000084EB                 push    ecx
.text:000084EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000084F3                 mov     [ebp+var_4], ecx
.text:000084F6                 mov     eax, [ebp+var_4]
.text:000084F9                 xor     ecx, ecx
.text:000084FB                 cmp     dword ptr [eax], 0
.text:000084FE                 setz    cl
.text:00008501                 mov     al, cl
.text:00008503                 mov     esp, ebp
.text:00008505                 pop     ebp
.text:00008506                 retn
.text:00008506 ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ endp
.text:00008506
.text:00008506 ; ---------------------------------------------------------------------------
.text:00008507                 align 4
.text:00008507 _text           ends
.text:00008507
.text:00008508 ; ===========================================================================
.text:00008508
.text:00008508 ; Segment type: Pure code
.text:00008508 ; Segment permissions: Read/Execute
.text:00008508 _text           segment para public 'CODE' use32
.text:00008508                 assume cs:_text
.text:00008508                 ;org 8508h
.text:00008508 ; COMDAT (pick any)
.text:00008508                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008508
.text:00008508 ; =============== S U B R O U T I N E =======================================
.text:00008508
.text:00008508 ; Attributes: bp-based frame
.text:00008508
.text:00008508 ; public: void * __thiscall NArchive::NCab::CItem::`scalar deleting destructor'(unsigned int)
.text:00008508                 public ??_GCItem@NCab@NArchive@@QAEPAXI@Z
.text:00008508 ??_GCItem@NCab@NArchive@@QAEPAXI@Z proc near
.text:00008508                                         ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)+7Fp
.text:00008508
.text:00008508 var_4           = dword ptr -4
.text:00008508 arg_0           = dword ptr  8
.text:00008508
.text:00008508                 push    ebp
.text:00008509                 mov     ebp, esp
.text:0000850B                 push    ecx
.text:0000850C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008513                 mov     [ebp+var_4], ecx
.text:00008516                 mov     ecx, [ebp+var_4] ; this
.text:00008519                 call    ??1CItem@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CItem::~CItem(void)
.text:0000851E                 mov     eax, [ebp+arg_0]
.text:00008521                 and     eax, 1
.text:00008524                 jz      short loc_8532
.text:00008526                 mov     ecx, [ebp+var_4]
.text:00008529                 push    ecx             ; void *
.text:0000852A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000852F                 add     esp, 4
.text:00008532
.text:00008532 loc_8532:                               ; CODE XREF: NArchive::NCab::CItem::`scalar deleting destructor'(uint)+1Cj
.text:00008532                 mov     eax, [ebp+var_4]
.text:00008535                 add     esp, 4
.text:00008538                 cmp     ebp, esp
.text:0000853A                 call    __RTC_CheckEsp
.text:0000853F                 mov     esp, ebp
.text:00008541                 pop     ebp
.text:00008542                 retn    4
.text:00008542 ??_GCItem@NCab@NArchive@@QAEPAXI@Z endp
.text:00008542
.text:00008542 ; ---------------------------------------------------------------------------
.text:00008545                 align 4
.text:00008545 _text           ends
.text:00008545
.text:00008548 ; ===========================================================================
.text:00008548
.text:00008548 ; Segment type: Pure code
.text:00008548 ; Segment permissions: Read/Execute
.text:00008548 _text           segment para public 'CODE' use32
.text:00008548                 assume cs:_text
.text:00008548                 ;org 8548h
.text:00008548 ; COMDAT (pick any)
.text:00008548                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008548
.text:00008548 ; =============== S U B R O U T I N E =======================================
.text:00008548
.text:00008548 ; Attributes: bp-based frame
.text:00008548
.text:00008548 ; _DWORD __thiscall NArchive::NCab::CDatabaseEx::CDatabaseEx(NArchive::NCab::CDatabaseEx *this, const struct NArchive::NCab::CDatabaseEx *)
.text:00008548                 public ??0CDatabaseEx@NCab@NArchive@@QAE@ABU012@@Z
.text:00008548 ??0CDatabaseEx@NCab@NArchive@@QAE@ABU012@@Z proc near
.text:00008548                                         ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::Insert(uint,NArchive::NCab::CDatabaseEx const &)+5Dp
.text:00008548
.text:00008548 var_4           = dword ptr -4
.text:00008548 arg_0           = dword ptr  8
.text:00008548
.text:00008548                 push    ebp
.text:00008549                 mov     ebp, esp
.text:0000854B                 push    ecx
.text:0000854C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008553                 mov     [ebp+var_4], ecx
.text:00008556                 mov     eax, [ebp+arg_0]
.text:00008559                 push    eax             ; struct NArchive::NCab::CDatabase *
.text:0000855A                 mov     ecx, [ebp+var_4] ; this
.text:0000855D                 call    ??0CDatabase@NCab@NArchive@@QAE@ABU012@@Z ; NArchive::NCab::CDatabase::CDatabase(NArchive::NCab::CDatabase const &)
.text:00008562                 mov     ecx, [ebp+arg_0]
.text:00008565                 add     ecx, 78h ; 'x'
.text:00008568                 push    ecx
.text:00008569                 mov     ecx, [ebp+var_4]
.text:0000856C                 add     ecx, 78h ; 'x'
.text:0000856F                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@ABV0@@Z ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(CMyComPtr<IInStream> const &)
.text:00008574                 mov     eax, [ebp+var_4]
.text:00008577                 add     esp, 4
.text:0000857A                 cmp     ebp, esp
.text:0000857C                 call    __RTC_CheckEsp
.text:00008581                 mov     esp, ebp
.text:00008583                 pop     ebp
.text:00008584                 retn    4
.text:00008584 ??0CDatabaseEx@NCab@NArchive@@QAE@ABU012@@Z endp
.text:00008584
.text:00008584 ; ---------------------------------------------------------------------------
.text:00008587                 align 4
.text:00008587 _text           ends
.text:00008587
.text:00008588 ; ===========================================================================
.text:00008588
.text:00008588 ; Segment type: Pure code
.text:00008588 ; Segment permissions: Read/Execute
.text:00008588 _text           segment para public 'CODE' use32
.text:00008588                 assume cs:_text
.text:00008588                 ;org 8588h
.text:00008588 ; COMDAT (pick any)
.text:00008588                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008588
.text:00008588 ; =============== S U B R O U T I N E =======================================
.text:00008588
.text:00008588 ; Attributes: bp-based frame
.text:00008588
.text:00008588 ; public: void * __thiscall NArchive::NCab::CDatabaseEx::`scalar deleting destructor'(unsigned int)
.text:00008588                 public ??_GCDatabaseEx@NCab@NArchive@@QAEPAXI@Z
.text:00008588 ??_GCDatabaseEx@NCab@NArchive@@QAEPAXI@Z proc near
.text:00008588                                         ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::Clear(void)+59p
.text:00008588                                         ; CObjectVector<NArchive::NCab::CDatabaseEx>::DeleteFrontal(uint)+59p
.text:00008588
.text:00008588 var_4           = dword ptr -4
.text:00008588 arg_0           = dword ptr  8
.text:00008588
.text:00008588                 push    ebp
.text:00008589                 mov     ebp, esp
.text:0000858B                 push    ecx
.text:0000858C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008593                 mov     [ebp+var_4], ecx
.text:00008596                 mov     ecx, [ebp+var_4] ; this
.text:00008599                 call    ??1CDatabaseEx@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CDatabaseEx::~CDatabaseEx(void)
.text:0000859E                 mov     eax, [ebp+arg_0]
.text:000085A1                 and     eax, 1
.text:000085A4                 jz      short loc_85B2
.text:000085A6                 mov     ecx, [ebp+var_4]
.text:000085A9                 push    ecx             ; void *
.text:000085AA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000085AF                 add     esp, 4
.text:000085B2
.text:000085B2 loc_85B2:                               ; CODE XREF: NArchive::NCab::CDatabaseEx::`scalar deleting destructor'(uint)+1Cj
.text:000085B2                 mov     eax, [ebp+var_4]
.text:000085B5                 add     esp, 4
.text:000085B8                 cmp     ebp, esp
.text:000085BA                 call    __RTC_CheckEsp
.text:000085BF                 mov     esp, ebp
.text:000085C1                 pop     ebp
.text:000085C2                 retn    4
.text:000085C2 ??_GCDatabaseEx@NCab@NArchive@@QAEPAXI@Z endp
.text:000085C2
.text:000085C2 ; ---------------------------------------------------------------------------
.text:000085C5                 align 4
.text:000085C5 _text           ends
.text:000085C5
.text:000085C8 ; ===========================================================================
.text:000085C8
.text:000085C8 ; Segment type: Pure code
.text:000085C8 ; Segment permissions: Read/Execute
.text:000085C8 _text           segment para public 'CODE' use32
.text:000085C8                 assume cs:_text
.text:000085C8                 ;org 85C8h
.text:000085C8 ; COMDAT (pick any)
.text:000085C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000085C8
.text:000085C8 ; =============== S U B R O U T I N E =======================================
.text:000085C8
.text:000085C8 ; Attributes: bp-based frame
.text:000085C8
.text:000085C8 ; _DWORD __thiscall NArchive::NCab::CItem::~CItem(NArchive::NCab::CItem *__hidden this)
.text:000085C8                 public ??1CItem@NCab@NArchive@@QAE@XZ
.text:000085C8 ??1CItem@NCab@NArchive@@QAE@XZ proc near
.text:000085C8                                         ; CODE XREF: NArchive::NCab::CItem::`scalar deleting destructor'(uint)+11p
.text:000085C8
.text:000085C8 var_4           = dword ptr -4
.text:000085C8
.text:000085C8                 push    ebp
.text:000085C9                 mov     ebp, esp
.text:000085CB                 push    ecx
.text:000085CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000085D3                 mov     [ebp+var_4], ecx
.text:000085D6                 mov     ecx, [ebp+var_4] ; this
.text:000085D9                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000085DE                 add     esp, 4
.text:000085E1                 cmp     ebp, esp
.text:000085E3                 call    __RTC_CheckEsp
.text:000085E8                 mov     esp, ebp
.text:000085EA                 pop     ebp
.text:000085EB                 retn
.text:000085EB ??1CItem@NCab@NArchive@@QAE@XZ endp
.text:000085EB
.text:000085EB _text           ends
.text:000085EB
.text:000085EC ; ===========================================================================
.text:000085EC
.text:000085EC ; Segment type: Pure code
.text:000085EC ; Segment permissions: Read/Execute
.text:000085EC _text           segment para public 'CODE' use32
.text:000085EC                 assume cs:_text
.text:000085EC                 ;org 85ECh
.text:000085EC ; COMDAT (pick any)
.text:000085EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000085EC
.text:000085EC ; =============== S U B R O U T I N E =======================================
.text:000085EC
.text:000085EC ; Attributes: bp-based frame
.text:000085EC
.text:000085EC ; _DWORD __thiscall NArchive::NCab::CDatabase::CDatabase(NArchive::NCab::CDatabase *this, const struct NArchive::NCab::CDatabase *)
.text:000085EC                 public ??0CDatabase@NCab@NArchive@@QAE@ABU012@@Z
.text:000085EC ??0CDatabase@NCab@NArchive@@QAE@ABU012@@Z proc near
.text:000085EC                                         ; CODE XREF: NArchive::NCab::CDatabaseEx::CDatabaseEx(NArchive::NCab::CDatabaseEx const &)+15p
.text:000085EC
.text:000085EC var_10          = dword ptr -10h
.text:000085EC var_C           = dword ptr -0Ch
.text:000085EC var_4           = dword ptr -4
.text:000085EC arg_0           = dword ptr  8
.text:000085EC
.text:000085EC                 push    ebp
.text:000085ED                 mov     ebp, esp
.text:000085EF                 push    0FFFFFFFFh
.text:000085F1                 push    offset __ehhandler$??0CDatabase@NCab@NArchive@@QAE@ABU012@@Z
.text:000085F6                 mov     eax, large fs:0
.text:000085FC                 push    eax
.text:000085FD                 push    ecx
.text:000085FE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00008605                 mov     eax, dword ptr ds:___security_cookie
.text:0000860A                 xor     eax, ebp
.text:0000860C                 push    eax
.text:0000860D                 lea     eax, [ebp+var_C]
.text:00008610                 mov     large fs:0, eax
.text:00008616                 mov     [ebp+var_10], ecx
.text:00008619                 mov     eax, [ebp+arg_0]
.text:0000861C                 push    eax
.text:0000861D                 mov     ecx, [ebp+var_10]
.text:00008620                 call    ??0?$CRecordVector@UCFolder@NCab@NArchive@@@@QAE@ABV0@@Z ; CRecordVector<NArchive::NCab::CFolder>::CRecordVector<NArchive::NCab::CFolder>(CRecordVector<NArchive::NCab::CFolder> const &)
.text:00008625                 mov     [ebp+var_4], 0
.text:0000862C                 mov     ecx, [ebp+arg_0]
.text:0000862F                 add     ecx, 0Ch
.text:00008632                 push    ecx
.text:00008633                 mov     ecx, [ebp+var_10]
.text:00008636                 add     ecx, 0Ch
.text:00008639                 call    ??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@ABV0@@Z ; CObjectVector<NArchive::NCab::CItem>::CObjectVector<NArchive::NCab::CItem>(CObjectVector<NArchive::NCab::CItem> const &)
.text:0000863E                 mov     byte ptr [ebp+var_4], 1
.text:00008642                 mov     edx, [ebp+var_10]
.text:00008645                 mov     eax, [ebp+arg_0]
.text:00008648                 mov     ecx, [eax+18h]
.text:0000864B                 mov     [edx+18h], ecx
.text:0000864E                 mov     eax, [eax+1Ch]
.text:00008651                 mov     [edx+1Ch], eax
.text:00008654                 mov     ecx, [ebp+arg_0]
.text:00008657                 add     ecx, 20h ; ' '
.text:0000865A                 push    ecx             ; struct NArchive::NCab::CInArcInfo *
.text:0000865B                 mov     ecx, [ebp+var_10]
.text:0000865E                 add     ecx, 20h ; ' '  ; this
.text:00008661                 call    ??0CInArcInfo@NCab@NArchive@@QAE@ABU012@@Z ; NArchive::NCab::CInArcInfo::CInArcInfo(NArchive::NCab::CInArcInfo const &)
.text:00008666                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000866D                 mov     eax, [ebp+var_10]
.text:00008670                 mov     ecx, [ebp+var_C]
.text:00008673                 mov     large fs:0, ecx
.text:0000867A                 pop     ecx
.text:0000867B                 add     esp, 10h
.text:0000867E                 cmp     ebp, esp
.text:00008680                 call    __RTC_CheckEsp
.text:00008685                 mov     esp, ebp
.text:00008687                 pop     ebp
.text:00008688                 retn    4
.text:00008688 ??0CDatabase@NCab@NArchive@@QAE@ABU012@@Z endp
.text:00008688
.text:00008688 ; ---------------------------------------------------------------------------
.text:0000868B                 align 4
.text:0000868B _text           ends
.text:0000868B
.text$x:0000868C ; ===========================================================================
.text$x:0000868C
.text$x:0000868C ; Segment type: Pure code
.text$x:0000868C ; Segment permissions: Read/Execute
.text$x:0000868C _text$x         segment para public 'CODE' use32
.text$x:0000868C                 assume cs:_text$x
.text$x:0000868C                 ;org 868Ch
.text$x:0000868C ; COMDAT (pick associative to section at 85EC)
.text$x:0000868C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000868C
.text$x:0000868C ; =============== S U B R O U T I N E =======================================
.text$x:0000868C
.text$x:0000868C
.text$x:0000868C __unwindfunclet$??0CDatabase@NCab@NArchive@@QAE@ABU012@@Z$0 proc near
.text$x:0000868C                                         ; DATA XREF: .xdata$x:000086C0o
.text$x:0000868C                 mov     ecx, [ebp-10h]
.text$x:0000868F                 jmp     ??1?$CRecordVector@UCFolder@NCab@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NCab::CFolder>::~CRecordVector<NArchive::NCab::CFolder>(void)
.text$x:0000868F __unwindfunclet$??0CDatabase@NCab@NArchive@@QAE@ABU012@@Z$0 endp
.text$x:0000868F
.text$x:00008694
.text$x:00008694 ; =============== S U B R O U T I N E =======================================
.text$x:00008694
.text$x:00008694
.text$x:00008694 __unwindfunclet$??0CDatabase@NCab@NArchive@@QAE@ABU012@@Z$1 proc near
.text$x:00008694                                         ; DATA XREF: .xdata$x:000086C8o
.text$x:00008694                 mov     ecx, [ebp-10h]
.text$x:00008697                 add     ecx, 0Ch
.text$x:0000869A                 jmp     ??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)
.text$x:0000869A __unwindfunclet$??0CDatabase@NCab@NArchive@@QAE@ABU012@@Z$1 endp
.text$x:0000869A
.text$x:0000869F
.text$x:0000869F ; =============== S U B R O U T I N E =======================================
.text$x:0000869F
.text$x:0000869F
.text$x:0000869F __ehhandler$??0CDatabase@NCab@NArchive@@QAE@ABU012@@Z proc near
.text$x:0000869F                                         ; DATA XREF: NArchive::NCab::CDatabase::CDatabase(NArchive::NCab::CDatabase const &)+5o
.text$x:0000869F
.text$x:0000869F arg_4           = dword ptr  8
.text$x:0000869F
.text$x:0000869F                 mov     edx, [esp+arg_4]
.text$x:000086A3                 lea     eax, [edx+0Ch]
.text$x:000086A6                 mov     ecx, [edx-8]
.text$x:000086A9                 xor     ecx, eax
.text$x:000086AB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000086B0                 mov     eax, offset __ehfuncinfo$??0CDatabase@NCab@NArchive@@QAE@ABU012@@Z
.text$x:000086B5                 jmp     ___CxxFrameHandler3
.text$x:000086B5 __ehhandler$??0CDatabase@NCab@NArchive@@QAE@ABU012@@Z endp
.text$x:000086B5
.text$x:000086B5 ; ---------------------------------------------------------------------------
.text$x:000086BA                 align 4
.text$x:000086BA _text$x         ends
.text$x:000086BA
.xdata$x:000086BC ; ===========================================================================
.xdata$x:000086BC
.xdata$x:000086BC ; Segment type: Pure data
.xdata$x:000086BC ; Segment permissions: Read
.xdata$x:000086BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000086BC                 assume cs:_xdata$x
.xdata$x:000086BC                 ;org 86BCh
.xdata$x:000086BC ; COMDAT (pick associative to section at 85EC)
.xdata$x:000086BC __unwindtable$??0CDatabase@NCab@NArchive@@QAE@ABU012@@Z db 0FFh
.xdata$x:000086BC                                         ; DATA XREF: .xdata$x:000086D4o
.xdata$x:000086BD                 db 0FFh
.xdata$x:000086BE                 db 0FFh
.xdata$x:000086BF                 db 0FFh
.xdata$x:000086C0                 dd offset __unwindfunclet$??0CDatabase@NCab@NArchive@@QAE@ABU012@@Z$0
.xdata$x:000086C4                 align 8
.xdata$x:000086C8                 dd offset __unwindfunclet$??0CDatabase@NCab@NArchive@@QAE@ABU012@@Z$1
.xdata$x:000086CC __ehfuncinfo$??0CDatabase@NCab@NArchive@@QAE@ABU012@@Z db  22h ; "
.xdata$x:000086CC                                         ; DATA XREF: __ehhandler$??0CDatabase@NCab@NArchive@@QAE@ABU012@@Z+11o
.xdata$x:000086CD                 db    5
.xdata$x:000086CE                 db  93h ; ô
.xdata$x:000086CF                 db  19h
.xdata$x:000086D0                 db    2
.xdata$x:000086D1                 db    0
.xdata$x:000086D2                 db    0
.xdata$x:000086D3                 db    0
.xdata$x:000086D4                 dd offset __unwindtable$??0CDatabase@NCab@NArchive@@QAE@ABU012@@Z
.xdata$x:000086D8                 db    0
.xdata$x:000086D9                 db    0
.xdata$x:000086DA                 db    0
.xdata$x:000086DB                 db    0
.xdata$x:000086DC                 db    0
.xdata$x:000086DD                 db    0
.xdata$x:000086DE                 db    0
.xdata$x:000086DF                 db    0
.xdata$x:000086E0                 db    0
.xdata$x:000086E1                 db    0
.xdata$x:000086E2                 db    0
.xdata$x:000086E3                 db    0
.xdata$x:000086E4                 db    0
.xdata$x:000086E5                 db    0
.xdata$x:000086E6                 db    0
.xdata$x:000086E7                 db    0
.xdata$x:000086E8                 db    0
.xdata$x:000086E9                 db    0
.xdata$x:000086EA                 db    0
.xdata$x:000086EB                 db    0
.xdata$x:000086EC                 db    1
.xdata$x:000086ED                 db    0
.xdata$x:000086EE                 db    0
.xdata$x:000086EF                 db    0
.xdata$x:000086EF _xdata$x        ends
.xdata$x:000086EF
.text:000086F0 ; ===========================================================================
.text:000086F0
.text:000086F0 ; Segment type: Pure code
.text:000086F0 ; Segment permissions: Read/Execute
.text:000086F0 _text           segment para public 'CODE' use32
.text:000086F0                 assume cs:_text
.text:000086F0                 ;org 86F0h
.text:000086F0 ; COMDAT (pick any)
.text:000086F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000086F0
.text:000086F0 ; =============== S U B R O U T I N E =======================================
.text:000086F0
.text:000086F0 ; Attributes: bp-based frame
.text:000086F0
.text:000086F0 ; _DWORD __thiscall NArchive::NCab::CInArcInfo::CInArcInfo(NArchive::NCab::CInArcInfo *this, const struct NArchive::NCab::CInArcInfo *)
.text:000086F0                 public ??0CInArcInfo@NCab@NArchive@@QAE@ABU012@@Z
.text:000086F0 ??0CInArcInfo@NCab@NArchive@@QAE@ABU012@@Z proc near
.text:000086F0                                         ; CODE XREF: NArchive::NCab::CDatabase::CDatabase(NArchive::NCab::CDatabase const &)+75p
.text:000086F0
.text:000086F0 var_4           = dword ptr -4
.text:000086F0 arg_0           = dword ptr  8
.text:000086F0
.text:000086F0                 push    ebp
.text:000086F1                 mov     ebp, esp
.text:000086F3                 push    ecx
.text:000086F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000086FB                 mov     [ebp+var_4], ecx
.text:000086FE                 mov     eax, [ebp+arg_0]
.text:00008701                 push    eax             ; struct NArchive::NCab::CArchInfo *
.text:00008702                 mov     ecx, [ebp+var_4] ; this
.text:00008705                 call    ??0CArchInfo@NCab@NArchive@@QAE@ABU012@@Z ; NArchive::NCab::CArchInfo::CArchInfo(NArchive::NCab::CArchInfo const &)
.text:0000870A                 mov     ecx, [ebp+var_4]
.text:0000870D                 mov     edx, [ebp+arg_0]
.text:00008710                 mov     eax, [edx+4Ch]
.text:00008713                 mov     [ecx+4Ch], eax
.text:00008716                 mov     ecx, [ebp+var_4]
.text:00008719                 mov     edx, [ebp+arg_0]
.text:0000871C                 mov     eax, [edx+50h]
.text:0000871F                 mov     [ecx+50h], eax
.text:00008722                 mov     eax, [ebp+var_4]
.text:00008725                 add     esp, 4
.text:00008728                 cmp     ebp, esp
.text:0000872A                 call    __RTC_CheckEsp
.text:0000872F                 mov     esp, ebp
.text:00008731                 pop     ebp
.text:00008732                 retn    4
.text:00008732 ??0CInArcInfo@NCab@NArchive@@QAE@ABU012@@Z endp
.text:00008732
.text:00008732 ; ---------------------------------------------------------------------------
.text:00008735                 align 4
.text:00008735 _text           ends
.text:00008735
.text:00008738 ; ===========================================================================
.text:00008738
.text:00008738 ; Segment type: Pure code
.text:00008738 ; Segment permissions: Read/Execute
.text:00008738 _text           segment para public 'CODE' use32
.text:00008738                 assume cs:_text
.text:00008738                 ;org 8738h
.text:00008738 ; COMDAT (pick any)
.text:00008738                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008738
.text:00008738 ; =============== S U B R O U T I N E =======================================
.text:00008738
.text:00008738 ; Attributes: bp-based frame
.text:00008738
.text:00008738 ; _DWORD __thiscall NArchive::NCab::CArchInfo::CArchInfo(NArchive::NCab::CArchInfo *this, const struct NArchive::NCab::CArchInfo *)
.text:00008738                 public ??0CArchInfo@NCab@NArchive@@QAE@ABU012@@Z
.text:00008738 ??0CArchInfo@NCab@NArchive@@QAE@ABU012@@Z proc near
.text:00008738                                         ; CODE XREF: NArchive::NCab::CInArcInfo::CInArcInfo(NArchive::NCab::CInArcInfo const &)+15p
.text:00008738
.text:00008738 var_10          = dword ptr -10h
.text:00008738 var_C           = dword ptr -0Ch
.text:00008738 var_4           = dword ptr -4
.text:00008738 arg_0           = dword ptr  8
.text:00008738
.text:00008738                 push    ebp
.text:00008739                 mov     ebp, esp
.text:0000873B                 push    0FFFFFFFFh
.text:0000873D                 push    offset __ehhandler$??0CArchInfo@NCab@NArchive@@QAE@ABU012@@Z
.text:00008742                 mov     eax, large fs:0
.text:00008748                 push    eax
.text:00008749                 push    ecx
.text:0000874A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00008751                 mov     eax, dword ptr ds:___security_cookie
.text:00008756                 xor     eax, ebp
.text:00008758                 push    eax
.text:00008759                 lea     eax, [ebp+var_C]
.text:0000875C                 mov     large fs:0, eax
.text:00008762                 mov     [ebp+var_10], ecx
.text:00008765                 mov     eax, [ebp+var_10]
.text:00008768                 mov     ecx, [ebp+arg_0]
.text:0000876B                 mov     dl, [ecx]
.text:0000876D                 mov     [eax], dl
.text:0000876F                 mov     eax, [ebp+var_10]
.text:00008772                 mov     ecx, [ebp+arg_0]
.text:00008775                 mov     dl, [ecx+1]
.text:00008778                 mov     [eax+1], dl
.text:0000877B                 mov     eax, [ebp+var_10]
.text:0000877E                 mov     ecx, [ebp+arg_0]
.text:00008781                 mov     edx, [ecx+4]
.text:00008784                 mov     [eax+4], edx
.text:00008787                 mov     eax, [ebp+var_10]
.text:0000878A                 mov     ecx, [ebp+arg_0]
.text:0000878D                 mov     edx, [ecx+8]
.text:00008790                 mov     [eax+8], edx
.text:00008793                 mov     eax, [ebp+var_10]
.text:00008796                 mov     ecx, [ebp+arg_0]
.text:00008799                 mov     edx, [ecx+0Ch]
.text:0000879C                 mov     [eax+0Ch], edx
.text:0000879F                 mov     eax, [ebp+var_10]
.text:000087A2                 mov     ecx, [ebp+arg_0]
.text:000087A5                 mov     edx, [ecx+10h]
.text:000087A8                 mov     [eax+10h], edx
.text:000087AB                 mov     eax, [ebp+var_10]
.text:000087AE                 mov     ecx, [ebp+arg_0]
.text:000087B1                 mov     edx, [ecx+14h]
.text:000087B4                 mov     [eax+14h], edx
.text:000087B7                 mov     eax, [ebp+var_10]
.text:000087BA                 mov     ecx, [ebp+arg_0]
.text:000087BD                 mov     dx, [ecx+18h]
.text:000087C1                 mov     [eax+18h], dx
.text:000087C5                 mov     eax, [ebp+var_10]
.text:000087C8                 mov     ecx, [ebp+arg_0]
.text:000087CB                 mov     dl, [ecx+1Ah]
.text:000087CE                 mov     [eax+1Ah], dl
.text:000087D1                 mov     eax, [ebp+var_10]
.text:000087D4                 mov     ecx, [ebp+arg_0]
.text:000087D7                 mov     dl, [ecx+1Bh]
.text:000087DA                 mov     [eax+1Bh], dl
.text:000087DD                 mov     eax, [ebp+arg_0]
.text:000087E0                 add     eax, 1Ch
.text:000087E3                 push    eax             ; struct NArchive::NCab::COtherArc *
.text:000087E4                 mov     ecx, [ebp+var_10]
.text:000087E7                 add     ecx, 1Ch        ; this
.text:000087EA                 call    ??0COtherArc@NCab@NArchive@@QAE@ABU012@@Z ; NArchive::NCab::COtherArc::COtherArc(NArchive::NCab::COtherArc const &)
.text:000087EF                 mov     [ebp+var_4], 0
.text:000087F6                 mov     ecx, [ebp+arg_0]
.text:000087F9                 add     ecx, 34h ; '4'
.text:000087FC                 push    ecx             ; struct NArchive::NCab::COtherArc *
.text:000087FD                 mov     ecx, [ebp+var_10]
.text:00008800                 add     ecx, 34h ; '4'  ; this
.text:00008803                 call    ??0COtherArc@NCab@NArchive@@QAE@ABU012@@Z ; NArchive::NCab::COtherArc::COtherArc(NArchive::NCab::COtherArc const &)
.text:00008808                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000880F                 mov     eax, [ebp+var_10]
.text:00008812                 mov     ecx, [ebp+var_C]
.text:00008815                 mov     large fs:0, ecx
.text:0000881C                 pop     ecx
.text:0000881D                 add     esp, 10h
.text:00008820                 cmp     ebp, esp
.text:00008822                 call    __RTC_CheckEsp
.text:00008827                 mov     esp, ebp
.text:00008829                 pop     ebp
.text:0000882A                 retn    4
.text:0000882A ??0CArchInfo@NCab@NArchive@@QAE@ABU012@@Z endp
.text:0000882A
.text:0000882A ; ---------------------------------------------------------------------------
.text:0000882D                 align 10h
.text:0000882D _text           ends
.text:0000882D
.text$x:00008830 ; ===========================================================================
.text$x:00008830
.text$x:00008830 ; Segment type: Pure code
.text$x:00008830 ; Segment permissions: Read/Execute
.text$x:00008830 _text$x         segment para public 'CODE' use32
.text$x:00008830                 assume cs:_text$x
.text$x:00008830                 ;org 8830h
.text$x:00008830 ; COMDAT (pick associative to section at 8738)
.text$x:00008830                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008830
.text$x:00008830 ; =============== S U B R O U T I N E =======================================
.text$x:00008830
.text$x:00008830
.text$x:00008830 __unwindfunclet$??0CArchInfo@NCab@NArchive@@QAE@ABU012@@Z$0 proc near
.text$x:00008830                                         ; DATA XREF: .xdata$x:0000885Co
.text$x:00008830                 mov     ecx, [ebp-10h]
.text$x:00008833                 add     ecx, 1Ch        ; this
.text$x:00008836                 jmp     ??1COtherArc@NCab@NArchive@@QAE@XZ ; NArchive::NCab::COtherArc::~COtherArc(void)
.text$x:00008836 __unwindfunclet$??0CArchInfo@NCab@NArchive@@QAE@ABU012@@Z$0 endp
.text$x:00008836
.text$x:0000883B
.text$x:0000883B ; =============== S U B R O U T I N E =======================================
.text$x:0000883B
.text$x:0000883B
.text$x:0000883B __ehhandler$??0CArchInfo@NCab@NArchive@@QAE@ABU012@@Z proc near
.text$x:0000883B                                         ; DATA XREF: NArchive::NCab::CArchInfo::CArchInfo(NArchive::NCab::CArchInfo const &)+5o
.text$x:0000883B
.text$x:0000883B arg_4           = dword ptr  8
.text$x:0000883B
.text$x:0000883B                 mov     edx, [esp+arg_4]
.text$x:0000883F                 lea     eax, [edx+0Ch]
.text$x:00008842                 mov     ecx, [edx-8]
.text$x:00008845                 xor     ecx, eax
.text$x:00008847                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000884C                 mov     eax, offset __ehfuncinfo$??0CArchInfo@NCab@NArchive@@QAE@ABU012@@Z
.text$x:00008851                 jmp     ___CxxFrameHandler3
.text$x:00008851 __ehhandler$??0CArchInfo@NCab@NArchive@@QAE@ABU012@@Z endp
.text$x:00008851
.text$x:00008851 ; ---------------------------------------------------------------------------
.text$x:00008856                 align 4
.text$x:00008856 _text$x         ends
.text$x:00008856
.xdata$x:00008858 ; ===========================================================================
.xdata$x:00008858
.xdata$x:00008858 ; Segment type: Pure data
.xdata$x:00008858 ; Segment permissions: Read
.xdata$x:00008858 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008858                 assume cs:_xdata$x
.xdata$x:00008858                 ;org 8858h
.xdata$x:00008858 ; COMDAT (pick associative to section at 8738)
.xdata$x:00008858 __unwindtable$??0CArchInfo@NCab@NArchive@@QAE@ABU012@@Z db 0FFh
.xdata$x:00008858                                         ; DATA XREF: .xdata$x:00008868o
.xdata$x:00008859                 db 0FFh
.xdata$x:0000885A                 db 0FFh
.xdata$x:0000885B                 db 0FFh
.xdata$x:0000885C                 dd offset __unwindfunclet$??0CArchInfo@NCab@NArchive@@QAE@ABU012@@Z$0
.xdata$x:00008860 __ehfuncinfo$??0CArchInfo@NCab@NArchive@@QAE@ABU012@@Z db  22h ; "
.xdata$x:00008860                                         ; DATA XREF: __ehhandler$??0CArchInfo@NCab@NArchive@@QAE@ABU012@@Z+11o
.xdata$x:00008861                 db    5
.xdata$x:00008862                 db  93h ; ô
.xdata$x:00008863                 db  19h
.xdata$x:00008864                 db    1
.xdata$x:00008865                 db    0
.xdata$x:00008866                 db    0
.xdata$x:00008867                 db    0
.xdata$x:00008868                 dd offset __unwindtable$??0CArchInfo@NCab@NArchive@@QAE@ABU012@@Z
.xdata$x:0000886C                 align 20h
.xdata$x:00008880                 db    1
.xdata$x:00008881                 db    0
.xdata$x:00008882                 db    0
.xdata$x:00008883                 db    0
.xdata$x:00008883 _xdata$x        ends
.xdata$x:00008883
.text:00008884 ; ===========================================================================
.text:00008884
.text:00008884 ; Segment type: Pure code
.text:00008884 ; Segment permissions: Read/Execute
.text:00008884 _text           segment para public 'CODE' use32
.text:00008884                 assume cs:_text
.text:00008884                 ;org 8884h
.text:00008884 ; COMDAT (pick any)
.text:00008884                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008884
.text:00008884 ; =============== S U B R O U T I N E =======================================
.text:00008884
.text:00008884 ; Attributes: bp-based frame
.text:00008884
.text:00008884 ; _DWORD __thiscall NArchive::NCab::COtherArc::COtherArc(NArchive::NCab::COtherArc *this, const struct NArchive::NCab::COtherArc *)
.text:00008884                 public ??0COtherArc@NCab@NArchive@@QAE@ABU012@@Z
.text:00008884 ??0COtherArc@NCab@NArchive@@QAE@ABU012@@Z proc near
.text:00008884                                         ; CODE XREF: NArchive::NCab::CArchInfo::CArchInfo(NArchive::NCab::CArchInfo const &)+B2p
.text:00008884                                         ; NArchive::NCab::CArchInfo::CArchInfo(NArchive::NCab::CArchInfo const &)+CBp
.text:00008884
.text:00008884 var_10          = dword ptr -10h
.text:00008884 var_C           = dword ptr -0Ch
.text:00008884 var_4           = dword ptr -4
.text:00008884 arg_0           = dword ptr  8
.text:00008884
.text:00008884                 push    ebp
.text:00008885                 mov     ebp, esp
.text:00008887                 push    0FFFFFFFFh
.text:00008889                 push    offset __ehhandler$??0COtherArc@NCab@NArchive@@QAE@ABU012@@Z
.text:0000888E                 mov     eax, large fs:0
.text:00008894                 push    eax
.text:00008895                 push    ecx
.text:00008896                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000889D                 mov     eax, dword ptr ds:___security_cookie
.text:000088A2                 xor     eax, ebp
.text:000088A4                 push    eax
.text:000088A5                 lea     eax, [ebp+var_C]
.text:000088A8                 mov     large fs:0, eax
.text:000088AE                 mov     [ebp+var_10], ecx
.text:000088B1                 mov     eax, [ebp+arg_0]
.text:000088B4                 push    eax
.text:000088B5                 mov     ecx, [ebp+var_10]
.text:000088B8                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:000088BD                 mov     [ebp+var_4], 0
.text:000088C4                 mov     ecx, [ebp+arg_0]
.text:000088C7                 add     ecx, 0Ch
.text:000088CA                 push    ecx
.text:000088CB                 mov     ecx, [ebp+var_10]
.text:000088CE                 add     ecx, 0Ch
.text:000088D1                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:000088D6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000088DD                 mov     eax, [ebp+var_10]
.text:000088E0                 mov     ecx, [ebp+var_C]
.text:000088E3                 mov     large fs:0, ecx
.text:000088EA                 pop     ecx
.text:000088EB                 add     esp, 10h
.text:000088EE                 cmp     ebp, esp
.text:000088F0                 call    __RTC_CheckEsp
.text:000088F5                 mov     esp, ebp
.text:000088F7                 pop     ebp
.text:000088F8                 retn    4
.text:000088F8 ??0COtherArc@NCab@NArchive@@QAE@ABU012@@Z endp
.text:000088F8
.text:000088F8 ; ---------------------------------------------------------------------------
.text:000088FB                 align 4
.text:000088FB _text           ends
.text:000088FB
.text$x:000088FC ; ===========================================================================
.text$x:000088FC
.text$x:000088FC ; Segment type: Pure code
.text$x:000088FC ; Segment permissions: Read/Execute
.text$x:000088FC _text$x         segment para public 'CODE' use32
.text$x:000088FC                 assume cs:_text$x
.text$x:000088FC                 ;org 88FCh
.text$x:000088FC ; COMDAT (pick associative to section at 8884)
.text$x:000088FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000088FC
.text$x:000088FC ; =============== S U B R O U T I N E =======================================
.text$x:000088FC
.text$x:000088FC
.text$x:000088FC __unwindfunclet$??0COtherArc@NCab@NArchive@@QAE@ABU012@@Z$0 proc near
.text$x:000088FC                                         ; DATA XREF: .xdata$x:00008924o
.text$x:000088FC                 mov     ecx, [ebp-10h]  ; this
.text$x:000088FF                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000088FF __unwindfunclet$??0COtherArc@NCab@NArchive@@QAE@ABU012@@Z$0 endp
.text$x:000088FF
.text$x:00008904
.text$x:00008904 ; =============== S U B R O U T I N E =======================================
.text$x:00008904
.text$x:00008904
.text$x:00008904 __ehhandler$??0COtherArc@NCab@NArchive@@QAE@ABU012@@Z proc near
.text$x:00008904                                         ; DATA XREF: NArchive::NCab::COtherArc::COtherArc(NArchive::NCab::COtherArc const &)+5o
.text$x:00008904
.text$x:00008904 arg_4           = dword ptr  8
.text$x:00008904
.text$x:00008904                 mov     edx, [esp+arg_4]
.text$x:00008908                 lea     eax, [edx+0Ch]
.text$x:0000890B                 mov     ecx, [edx-8]
.text$x:0000890E                 xor     ecx, eax
.text$x:00008910                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008915                 mov     eax, offset __ehfuncinfo$??0COtherArc@NCab@NArchive@@QAE@ABU012@@Z
.text$x:0000891A                 jmp     ___CxxFrameHandler3
.text$x:0000891A __ehhandler$??0COtherArc@NCab@NArchive@@QAE@ABU012@@Z endp
.text$x:0000891A
.text$x:0000891A ; ---------------------------------------------------------------------------
.text$x:0000891F                 align 10h
.text$x:0000891F _text$x         ends
.text$x:0000891F
.xdata$x:00008920 ; ===========================================================================
.xdata$x:00008920
.xdata$x:00008920 ; Segment type: Pure data
.xdata$x:00008920 ; Segment permissions: Read
.xdata$x:00008920 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008920                 assume cs:_xdata$x
.xdata$x:00008920                 ;org 8920h
.xdata$x:00008920 ; COMDAT (pick associative to section at 8884)
.xdata$x:00008920 __unwindtable$??0COtherArc@NCab@NArchive@@QAE@ABU012@@Z db 0FFh
.xdata$x:00008920                                         ; DATA XREF: .xdata$x:00008930o
.xdata$x:00008921                 db 0FFh
.xdata$x:00008922                 db 0FFh
.xdata$x:00008923                 db 0FFh
.xdata$x:00008924                 dd offset __unwindfunclet$??0COtherArc@NCab@NArchive@@QAE@ABU012@@Z$0
.xdata$x:00008928 __ehfuncinfo$??0COtherArc@NCab@NArchive@@QAE@ABU012@@Z db  22h ; "
.xdata$x:00008928                                         ; DATA XREF: __ehhandler$??0COtherArc@NCab@NArchive@@QAE@ABU012@@Z+11o
.xdata$x:00008929                 db    5
.xdata$x:0000892A                 db  93h ; ô
.xdata$x:0000892B                 db  19h
.xdata$x:0000892C                 db    1
.xdata$x:0000892D                 db    0
.xdata$x:0000892E                 db    0
.xdata$x:0000892F                 db    0
.xdata$x:00008930                 dd offset __unwindtable$??0COtherArc@NCab@NArchive@@QAE@ABU012@@Z
.xdata$x:00008934                 db    0
.xdata$x:00008935                 db    0
.xdata$x:00008936                 db    0
.xdata$x:00008937                 db    0
.xdata$x:00008938                 db    0
.xdata$x:00008939                 db    0
.xdata$x:0000893A                 db    0
.xdata$x:0000893B                 db    0
.xdata$x:0000893C                 db    0
.xdata$x:0000893D                 db    0
.xdata$x:0000893E                 db    0
.xdata$x:0000893F                 db    0
.xdata$x:00008940                 db    0
.xdata$x:00008941                 db    0
.xdata$x:00008942                 db    0
.xdata$x:00008943                 db    0
.xdata$x:00008944                 db    0
.xdata$x:00008945                 db    0
.xdata$x:00008946                 db    0
.xdata$x:00008947                 db    0
.xdata$x:00008948                 db    1
.xdata$x:00008949                 db    0
.xdata$x:0000894A                 db    0
.xdata$x:0000894B                 db    0
.xdata$x:0000894B _xdata$x        ends
.xdata$x:0000894B
.text:0000894C ; ===========================================================================
.text:0000894C
.text:0000894C ; Segment type: Pure code
.text:0000894C ; Segment permissions: Read/Execute
.text:0000894C _text           segment para public 'CODE' use32
.text:0000894C                 assume cs:_text
.text:0000894C                 ;org 894Ch
.text:0000894C ; COMDAT (pick any)
.text:0000894C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000894C
.text:0000894C ; =============== S U B R O U T I N E =======================================
.text:0000894C
.text:0000894C ; Attributes: bp-based frame
.text:0000894C
.text:0000894C ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000894C                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:0000894C ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:0000894C                                         ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::CObjectVector<NArchive::NCab::CItem>(void)+11p
.text:0000894C                                         ; CObjectVector<NArchive::NCab::CItem>::CObjectVector<NArchive::NCab::CItem>(CObjectVector<NArchive::NCab::CItem> const &)+42p
.text:0000894C
.text:0000894C var_4           = dword ptr -4
.text:0000894C
.text:0000894C                 push    ebp
.text:0000894D                 mov     ebp, esp
.text:0000894F                 push    ecx
.text:00008950                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008957                 mov     [ebp+var_4], ecx
.text:0000895A                 mov     eax, [ebp+var_4]
.text:0000895D                 mov     dword ptr [eax], 0
.text:00008963                 mov     ecx, [ebp+var_4]
.text:00008966                 mov     dword ptr [ecx+4], 0
.text:0000896D                 mov     edx, [ebp+var_4]
.text:00008970                 mov     dword ptr [edx+8], 0
.text:00008977                 mov     eax, [ebp+var_4]
.text:0000897A                 mov     esp, ebp
.text:0000897C                 pop     ebp
.text:0000897D                 retn
.text:0000897D ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:0000897D
.text:0000897D ; ---------------------------------------------------------------------------
.text:0000897E                 align 10h
.text:0000897E _text           ends
.text:0000897E
.text:00008980 ; ===========================================================================
.text:00008980
.text:00008980 ; Segment type: Pure code
.text:00008980 ; Segment permissions: Read/Execute
.text:00008980 _text           segment para public 'CODE' use32
.text:00008980                 assume cs:_text
.text:00008980                 ;org 8980h
.text:00008980 ; COMDAT (pick any)
.text:00008980                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008980
.text:00008980 ; =============== S U B R O U T I N E =======================================
.text:00008980
.text:00008980 ; Attributes: bp-based frame
.text:00008980
.text:00008980 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00008980                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00008980 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00008980                                         ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::Size(void)+11p
.text:00008980                                         ; CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)+46p ...
.text:00008980
.text:00008980 var_4           = dword ptr -4
.text:00008980
.text:00008980                 push    ebp
.text:00008981                 mov     ebp, esp
.text:00008983                 push    ecx
.text:00008984                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000898B                 mov     [ebp+var_4], ecx
.text:0000898E                 mov     eax, [ebp+var_4]
.text:00008991                 mov     eax, [eax+4]
.text:00008994                 mov     esp, ebp
.text:00008996                 pop     ebp
.text:00008997                 retn
.text:00008997 ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:00008997
.text:00008997 _text           ends
.text:00008997
.text:00008998 ; ===========================================================================
.text:00008998
.text:00008998 ; Segment type: Pure code
.text:00008998 ; Segment permissions: Read/Execute
.text:00008998 _text           segment para public 'CODE' use32
.text:00008998                 assume cs:_text
.text:00008998                 ;org 8998h
.text:00008998 ; COMDAT (pick any)
.text:00008998                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008998
.text:00008998 ; =============== S U B R O U T I N E =======================================
.text:00008998
.text:00008998 ; Attributes: bp-based frame
.text:00008998
.text:00008998 ; public: bool __thiscall CRecordVector<void *>::IsEmpty(void)const
.text:00008998                 public ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
.text:00008998 ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ proc near
.text:00008998                                         ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::IsEmpty(void)+11p
.text:00008998
.text:00008998 var_4           = dword ptr -4
.text:00008998
.text:00008998                 push    ebp
.text:00008999                 mov     ebp, esp
.text:0000899B                 push    ecx
.text:0000899C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000089A3                 mov     [ebp+var_4], ecx
.text:000089A6                 mov     eax, [ebp+var_4]
.text:000089A9                 xor     ecx, ecx
.text:000089AB                 cmp     dword ptr [eax+4], 0
.text:000089AF                 setz    cl
.text:000089B2                 mov     al, cl
.text:000089B4                 mov     esp, ebp
.text:000089B6                 pop     ebp
.text:000089B7                 retn
.text:000089B7 ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ endp
.text:000089B7
.text:000089B7 _text           ends
.text:000089B7
.text:000089B8 ; ===========================================================================
.text:000089B8
.text:000089B8 ; Segment type: Pure code
.text:000089B8 ; Segment permissions: Read/Execute
.text:000089B8 _text           segment para public 'CODE' use32
.text:000089B8                 assume cs:_text
.text:000089B8                 ;org 89B8h
.text:000089B8 ; COMDAT (pick any)
.text:000089B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000089B8
.text:000089B8 ; =============== S U B R O U T I N E =======================================
.text:000089B8
.text:000089B8 ; Attributes: bp-based frame
.text:000089B8
.text:000089B8 ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000089B8                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:000089B8 ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:000089B8                                         ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)+9Cp
.text:000089B8                                         ; __unwindfunclet$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ$0+3j ...
.text:000089B8
.text:000089B8 var_8           = dword ptr -8
.text:000089B8 var_4           = dword ptr -4
.text:000089B8
.text:000089B8                 push    ebp
.text:000089B9                 mov     ebp, esp
.text:000089BB                 sub     esp, 8
.text:000089BE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000089C5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000089CC                 mov     [ebp+var_4], ecx
.text:000089CF                 mov     eax, [ebp+var_4]
.text:000089D2                 mov     ecx, [eax]
.text:000089D4                 mov     [ebp+var_8], ecx
.text:000089D7                 mov     edx, [ebp+var_8]
.text:000089DA                 push    edx             ; void *
.text:000089DB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000089E0                 add     esp, 4
.text:000089E3                 add     esp, 8
.text:000089E6                 cmp     ebp, esp
.text:000089E8                 call    __RTC_CheckEsp
.text:000089ED                 mov     esp, ebp
.text:000089EF                 pop     ebp
.text:000089F0                 retn
.text:000089F0 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:000089F0
.text:000089F0 ; ---------------------------------------------------------------------------
.text:000089F1                 align 4
.text:000089F1 _text           ends
.text:000089F1
.text:000089F4 ; ===========================================================================
.text:000089F4
.text:000089F4 ; Segment type: Pure code
.text:000089F4 ; Segment permissions: Read/Execute
.text:000089F4 _text           segment para public 'CODE' use32
.text:000089F4                 assume cs:_text
.text:000089F4                 ;org 89F4h
.text:000089F4 ; COMDAT (pick any)
.text:000089F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000089F4
.text:000089F4 ; =============== S U B R O U T I N E =======================================
.text:000089F4
.text:000089F4 ; Attributes: bp-based frame
.text:000089F4
.text:000089F4 ; public: void __thiscall CRecordVector<void *>::Clear(void)
.text:000089F4                 public ?Clear@?$CRecordVector@PAX@@QAEXXZ
.text:000089F4 ?Clear@?$CRecordVector@PAX@@QAEXXZ proc near
.text:000089F4                                         ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::Clear(void)+6Fp
.text:000089F4
.text:000089F4 var_4           = dword ptr -4
.text:000089F4
.text:000089F4                 push    ebp
.text:000089F5                 mov     ebp, esp
.text:000089F7                 push    ecx
.text:000089F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000089FF                 mov     [ebp+var_4], ecx
.text:00008A02                 mov     eax, [ebp+var_4]
.text:00008A05                 mov     dword ptr [eax+4], 0
.text:00008A0C                 mov     esp, ebp
.text:00008A0E                 pop     ebp
.text:00008A0F                 retn
.text:00008A0F ?Clear@?$CRecordVector@PAX@@QAEXXZ endp
.text:00008A0F
.text:00008A0F _text           ends
.text:00008A0F
.text:00008A10 ; ===========================================================================
.text:00008A10
.text:00008A10 ; Segment type: Pure code
.text:00008A10 ; Segment permissions: Read/Execute
.text:00008A10 _text           segment para public 'CODE' use32
.text:00008A10                 assume cs:_text
.text:00008A10                 ;org 8A10h
.text:00008A10 ; COMDAT (pick any)
.text:00008A10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008A10
.text:00008A10 ; =============== S U B R O U T I N E =======================================
.text:00008A10
.text:00008A10 ; Attributes: bp-based frame
.text:00008A10
.text:00008A10 ; public: void __thiscall CRecordVector<void *>::DeleteFrontal(unsigned int)
.text:00008A10                 public ?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z
.text:00008A10 ?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:00008A10                                         ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::DeleteFrontal(uint)+73p
.text:00008A10
.text:00008A10 var_4           = dword ptr -4
.text:00008A10 arg_0           = dword ptr  8
.text:00008A10
.text:00008A10                 push    ebp
.text:00008A11                 mov     ebp, esp
.text:00008A13                 push    ecx
.text:00008A14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008A1B                 mov     [ebp+var_4], ecx
.text:00008A1E                 cmp     [ebp+arg_0], 0
.text:00008A22                 jz      short loc_8A41
.text:00008A24                 mov     eax, [ebp+arg_0]
.text:00008A27                 push    eax
.text:00008A28                 push    0
.text:00008A2A                 mov     ecx, [ebp+var_4]
.text:00008A2D                 call    ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems(uint,uint)
.text:00008A32                 mov     ecx, [ebp+var_4]
.text:00008A35                 mov     edx, [ecx+4]
.text:00008A38                 sub     edx, [ebp+arg_0]
.text:00008A3B                 mov     eax, [ebp+var_4]
.text:00008A3E                 mov     [eax+4], edx
.text:00008A41
.text:00008A41 loc_8A41:                               ; CODE XREF: CRecordVector<void *>::DeleteFrontal(uint)+12j
.text:00008A41                 add     esp, 4
.text:00008A44                 cmp     ebp, esp
.text:00008A46                 call    __RTC_CheckEsp
.text:00008A4B                 mov     esp, ebp
.text:00008A4D                 pop     ebp
.text:00008A4E                 retn    4
.text:00008A4E ?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z endp
.text:00008A4E
.text:00008A4E ; ---------------------------------------------------------------------------
.text:00008A51                 align 4
.text:00008A51 _text           ends
.text:00008A51
.text:00008A54 ; ===========================================================================
.text:00008A54
.text:00008A54 ; Segment type: Pure code
.text:00008A54 ; Segment permissions: Read/Execute
.text:00008A54 _text           segment para public 'CODE' use32
.text:00008A54                 assume cs:_text
.text:00008A54                 ;org 8A54h
.text:00008A54 ; COMDAT (pick any)
.text:00008A54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008A54
.text:00008A54 ; =============== S U B R O U T I N E =======================================
.text:00008A54
.text:00008A54 ; Attributes: bp-based frame
.text:00008A54
.text:00008A54 ; public: void __thiscall CRecordVector<void *>::Insert(unsigned int, void * const)
.text:00008A54                 public ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z
.text:00008A54 ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z proc near
.text:00008A54                                         ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::Insert(uint,NArchive::NCab::CDatabaseEx const &)+86p
.text:00008A54
.text:00008A54 var_4           = dword ptr -4
.text:00008A54 arg_0           = dword ptr  8
.text:00008A54 arg_4           = dword ptr  0Ch
.text:00008A54
.text:00008A54                 push    ebp
.text:00008A55                 mov     ebp, esp
.text:00008A57                 push    ecx
.text:00008A58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008A5F                 mov     [ebp+var_4], ecx
.text:00008A62                 mov     ecx, [ebp+var_4]
.text:00008A65                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:00008A6A                 mov     eax, [ebp+arg_0]
.text:00008A6D                 push    eax
.text:00008A6E                 mov     ecx, [ebp+arg_0]
.text:00008A71                 add     ecx, 1
.text:00008A74                 push    ecx
.text:00008A75                 mov     ecx, [ebp+var_4]
.text:00008A78                 call    ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems(uint,uint)
.text:00008A7D                 mov     edx, [ebp+var_4]
.text:00008A80                 mov     eax, [edx]
.text:00008A82                 mov     ecx, [ebp+arg_0]
.text:00008A85                 mov     edx, [ebp+arg_4]
.text:00008A88                 mov     [eax+ecx*4], edx
.text:00008A8B                 mov     eax, [ebp+var_4]
.text:00008A8E                 mov     ecx, [eax+4]
.text:00008A91                 add     ecx, 1
.text:00008A94                 mov     edx, [ebp+var_4]
.text:00008A97                 mov     [edx+4], ecx
.text:00008A9A                 add     esp, 4
.text:00008A9D                 cmp     ebp, esp
.text:00008A9F                 call    __RTC_CheckEsp
.text:00008AA4                 mov     esp, ebp
.text:00008AA6                 pop     ebp
.text:00008AA7                 retn    8
.text:00008AA7 ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z endp
.text:00008AA7
.text:00008AA7 ; ---------------------------------------------------------------------------
.text:00008AAA                 align 4
.text:00008AAA _text           ends
.text:00008AAA
.text:00008AAC ; ===========================================================================
.text:00008AAC
.text:00008AAC ; Segment type: Pure code
.text:00008AAC ; Segment permissions: Read/Execute
.text:00008AAC _text           segment para public 'CODE' use32
.text:00008AAC                 assume cs:_text
.text:00008AAC                 ;org 8AACh
.text:00008AAC ; COMDAT (pick any)
.text:00008AAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008AAC
.text:00008AAC ; =============== S U B R O U T I N E =======================================
.text:00008AAC
.text:00008AAC ; Attributes: bp-based frame
.text:00008AAC
.text:00008AAC ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:00008AAC                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:00008AAC ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:00008AAC                                         ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::operator[](uint)+15p
.text:00008AAC                                         ; CObjectVector<NArchive::NCab::CDatabaseEx>::operator[](uint)+15p
.text:00008AAC
.text:00008AAC var_4           = dword ptr -4
.text:00008AAC arg_0           = dword ptr  8
.text:00008AAC
.text:00008AAC                 push    ebp
.text:00008AAD                 mov     ebp, esp
.text:00008AAF                 push    ecx
.text:00008AB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008AB7                 mov     [ebp+var_4], ecx
.text:00008ABA                 mov     eax, [ebp+var_4]
.text:00008ABD                 mov     ecx, [eax]
.text:00008ABF                 mov     edx, [ebp+arg_0]
.text:00008AC2                 lea     eax, [ecx+edx*4]
.text:00008AC5                 mov     esp, ebp
.text:00008AC7                 pop     ebp
.text:00008AC8                 retn    4
.text:00008AC8 ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:00008AC8
.text:00008AC8 ; ---------------------------------------------------------------------------
.text:00008ACB                 align 4
.text:00008ACB _text           ends
.text:00008ACB
.text:00008ACC ; ===========================================================================
.text:00008ACC
.text:00008ACC ; Segment type: Pure code
.text:00008ACC ; Segment permissions: Read/Execute
.text:00008ACC _text           segment para public 'CODE' use32
.text:00008ACC                 assume cs:_text
.text:00008ACC                 ;org 8ACCh
.text:00008ACC ; COMDAT (pick any)
.text:00008ACC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008ACC
.text:00008ACC ; =============== S U B R O U T I N E =======================================
.text:00008ACC
.text:00008ACC ; Attributes: bp-based frame
.text:00008ACC
.text:00008ACC ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00008ACC                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00008ACC ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00008ACC                                         ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::operator[](uint)+15p
.text:00008ACC                                         ; CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)+64p ...
.text:00008ACC
.text:00008ACC var_4           = dword ptr -4
.text:00008ACC arg_0           = dword ptr  8
.text:00008ACC
.text:00008ACC                 push    ebp
.text:00008ACD                 mov     ebp, esp
.text:00008ACF                 push    ecx
.text:00008AD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008AD7                 mov     [ebp+var_4], ecx
.text:00008ADA                 mov     eax, [ebp+var_4]
.text:00008ADD                 mov     ecx, [eax]
.text:00008ADF                 mov     edx, [ebp+arg_0]
.text:00008AE2                 lea     eax, [ecx+edx*4]
.text:00008AE5                 mov     esp, ebp
.text:00008AE7                 pop     ebp
.text:00008AE8                 retn    4
.text:00008AE8 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:00008AE8
.text:00008AE8 ; ---------------------------------------------------------------------------
.text:00008AEB                 align 4
.text:00008AEB _text           ends
.text:00008AEB
.text:00008AEC ; ===========================================================================
.text:00008AEC
.text:00008AEC ; Segment type: Pure code
.text:00008AEC ; Segment permissions: Read/Execute
.text:00008AEC _text           segment para public 'CODE' use32
.text:00008AEC                 assume cs:_text
.text:00008AEC                 ;org 8AECh
.text:00008AEC ; COMDAT (pick any)
.text:00008AEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008AEC
.text:00008AEC ; =============== S U B R O U T I N E =======================================
.text:00008AEC
.text:00008AEC ; Attributes: bp-based frame
.text:00008AEC
.text:00008AEC ; public: __thiscall CRecordVector<struct NArchive::NCab::CFolder>::CRecordVector<struct NArchive::NCab::CFolder>(class CRecordVector<struct NArchive::NCab::CFolder> const &)
.text:00008AEC                 public ??0?$CRecordVector@UCFolder@NCab@NArchive@@@@QAE@ABV0@@Z
.text:00008AEC ??0?$CRecordVector@UCFolder@NCab@NArchive@@@@QAE@ABV0@@Z proc near
.text:00008AEC                                         ; CODE XREF: NArchive::NCab::CDatabase::CDatabase(NArchive::NCab::CDatabase const &)+34p
.text:00008AEC
.text:00008AEC var_C           = dword ptr -0Ch
.text:00008AEC var_8           = dword ptr -8
.text:00008AEC var_4           = dword ptr -4
.text:00008AEC arg_0           = dword ptr  8
.text:00008AEC
.text:00008AEC                 push    ebp
.text:00008AED                 mov     ebp, esp
.text:00008AEF                 sub     esp, 0Ch
.text:00008AF2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00008AF9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008B00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008B07                 mov     [ebp+var_4], ecx
.text:00008B0A                 mov     eax, [ebp+var_4]
.text:00008B0D                 mov     dword ptr [eax], 0
.text:00008B13                 mov     ecx, [ebp+var_4]
.text:00008B16                 mov     dword ptr [ecx+4], 0
.text:00008B1D                 mov     edx, [ebp+var_4]
.text:00008B20                 mov     dword ptr [edx+8], 0
.text:00008B27                 mov     ecx, [ebp+arg_0]
.text:00008B2A                 call    ?Size@?$CRecordVector@UCFolder@NCab@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NCab::CFolder>::Size(void)
.text:00008B2F                 mov     [ebp+var_8], eax
.text:00008B32                 cmp     [ebp+var_8], 0
.text:00008B36                 jz      short loc_8B8C
.text:00008B38                 xor     ecx, ecx
.text:00008B3A                 mov     eax, [ebp+var_8]
.text:00008B3D                 mov     edx, 8
.text:00008B42                 mul     edx
.text:00008B44                 seto    cl
.text:00008B47                 neg     ecx
.text:00008B49                 or      ecx, eax
.text:00008B4B                 push    ecx             ; unsigned int
.text:00008B4C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00008B51                 add     esp, 4
.text:00008B54                 mov     [ebp+var_C], eax
.text:00008B57                 mov     eax, [ebp+var_4]
.text:00008B5A                 mov     ecx, [ebp+var_C]
.text:00008B5D                 mov     [eax], ecx
.text:00008B5F                 mov     edx, [ebp+var_4]
.text:00008B62                 mov     eax, [ebp+var_8]
.text:00008B65                 mov     [edx+4], eax
.text:00008B68                 mov     ecx, [ebp+var_4]
.text:00008B6B                 mov     edx, [ebp+var_8]
.text:00008B6E                 mov     [ecx+8], edx
.text:00008B71                 mov     eax, [ebp+var_8]
.text:00008B74                 shl     eax, 3
.text:00008B77                 push    eax             ; Size
.text:00008B78                 mov     ecx, [ebp+arg_0]
.text:00008B7B                 mov     edx, [ecx]
.text:00008B7D                 push    edx             ; Src
.text:00008B7E                 mov     eax, [ebp+var_4]
.text:00008B81                 mov     ecx, [eax]
.text:00008B83                 push    ecx             ; Dst
.text:00008B84                 call    _memcpy
.text:00008B89                 add     esp, 0Ch
.text:00008B8C
.text:00008B8C loc_8B8C:                               ; CODE XREF: CRecordVector<NArchive::NCab::CFolder>::CRecordVector<NArchive::NCab::CFolder>(CRecordVector<NArchive::NCab::CFolder> const &)+4Aj
.text:00008B8C                 mov     eax, [ebp+var_4]
.text:00008B8F                 add     esp, 0Ch
.text:00008B92                 cmp     ebp, esp
.text:00008B94                 call    __RTC_CheckEsp
.text:00008B99                 mov     esp, ebp
.text:00008B9B                 pop     ebp
.text:00008B9C                 retn    4
.text:00008B9C ??0?$CRecordVector@UCFolder@NCab@NArchive@@@@QAE@ABV0@@Z endp
.text:00008B9C
.text:00008B9C ; ---------------------------------------------------------------------------
.text:00008B9F                 align 10h
.text:00008B9F _text           ends
.text:00008B9F
.text:00008BA0 ; ===========================================================================
.text:00008BA0
.text:00008BA0 ; Segment type: Pure code
.text:00008BA0 ; Segment permissions: Read/Execute
.text:00008BA0 _text           segment para public 'CODE' use32
.text:00008BA0                 assume cs:_text
.text:00008BA0                 ;org 8BA0h
.text:00008BA0 ; COMDAT (pick any)
.text:00008BA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008BA0
.text:00008BA0 ; =============== S U B R O U T I N E =======================================
.text:00008BA0
.text:00008BA0 ; Attributes: bp-based frame
.text:00008BA0
.text:00008BA0 ; public: __thiscall CObjectVector<struct NArchive::NCab::CItem>::CObjectVector<struct NArchive::NCab::CItem>(class CObjectVector<struct NArchive::NCab::CItem> const &)
.text:00008BA0                 public ??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@ABV0@@Z
.text:00008BA0 ??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@ABV0@@Z proc near
.text:00008BA0                                         ; CODE XREF: NArchive::NCab::CDatabase::CDatabase(NArchive::NCab::CDatabase const &)+4Dp
.text:00008BA0
.text:00008BA0 var_24          = dword ptr -24h
.text:00008BA0 var_20          = dword ptr -20h
.text:00008BA0 var_1C          = dword ptr -1Ch
.text:00008BA0 var_18          = dword ptr -18h
.text:00008BA0 var_14          = dword ptr -14h
.text:00008BA0 var_10          = dword ptr -10h
.text:00008BA0 var_C           = dword ptr -0Ch
.text:00008BA0 var_4           = dword ptr -4
.text:00008BA0 arg_0           = dword ptr  8
.text:00008BA0
.text:00008BA0                 push    ebp
.text:00008BA1                 mov     ebp, esp
.text:00008BA3                 push    0FFFFFFFFh
.text:00008BA5                 push    offset __ehhandler$??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@ABV0@@Z
.text:00008BAA                 mov     eax, large fs:0
.text:00008BB0                 push    eax
.text:00008BB1                 sub     esp, 18h
.text:00008BB4                 mov     eax, 0CCCCCCCCh
.text:00008BB9                 mov     [ebp+var_24], eax
.text:00008BBC                 mov     [ebp+var_20], eax
.text:00008BBF                 mov     [ebp+var_1C], eax
.text:00008BC2                 mov     [ebp+var_18], eax
.text:00008BC5                 mov     [ebp+var_14], eax
.text:00008BC8                 mov     [ebp+var_10], eax
.text:00008BCB                 mov     eax, dword ptr ds:___security_cookie
.text:00008BD0                 xor     eax, ebp
.text:00008BD2                 push    eax
.text:00008BD3                 lea     eax, [ebp+var_C]
.text:00008BD6                 mov     large fs:0, eax
.text:00008BDC                 mov     [ebp+var_10], ecx
.text:00008BDF                 mov     ecx, [ebp+var_10]
.text:00008BE2                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00008BE7                 mov     [ebp+var_4], 0
.text:00008BEE                 mov     ecx, [ebp+arg_0]
.text:00008BF1                 call    ?Size@?$CObjectVector@UCItem@NCab@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NCab::CItem>::Size(void)
.text:00008BF6                 mov     [ebp+var_14], eax
.text:00008BF9                 mov     eax, [ebp+var_14]
.text:00008BFC                 push    eax
.text:00008BFD                 mov     ecx, [ebp+var_10]
.text:00008C00                 call    ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve(uint)
.text:00008C05                 mov     [ebp+var_18], 0
.text:00008C0C                 jmp     short loc_8C17
.text:00008C0E ; ---------------------------------------------------------------------------
.text:00008C0E
.text:00008C0E loc_8C0E:                               ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::CObjectVector<NArchive::NCab::CItem>(CObjectVector<NArchive::NCab::CItem> const &)+CDj
.text:00008C0E                 mov     ecx, [ebp+var_18]
.text:00008C11                 add     ecx, 1
.text:00008C14                 mov     [ebp+var_18], ecx
.text:00008C17
.text:00008C17 loc_8C17:                               ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::CObjectVector<NArchive::NCab::CItem>(CObjectVector<NArchive::NCab::CItem> const &)+6Cj
.text:00008C17                 mov     edx, [ebp+var_18]
.text:00008C1A                 cmp     edx, [ebp+var_14]
.text:00008C1D                 jnb     short loc_8C6F
.text:00008C1F                 push    20h ; ' '       ; unsigned int
.text:00008C21                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00008C26                 add     esp, 4
.text:00008C29                 mov     [ebp+var_20], eax
.text:00008C2C                 mov     byte ptr [ebp+var_4], 1
.text:00008C30                 cmp     [ebp+var_20], 0
.text:00008C34                 jz      short loc_8C50
.text:00008C36                 mov     eax, [ebp+var_18]
.text:00008C39                 push    eax
.text:00008C3A                 mov     ecx, [ebp+arg_0]
.text:00008C3D                 call    ??A?$CObjectVector@UCItem@NCab@NArchive@@@@QBEABUCItem@NCab@NArchive@@I@Z ; CObjectVector<NArchive::NCab::CItem>::operator[](uint)
.text:00008C42                 push    eax             ; struct NArchive::NCab::CItem *
.text:00008C43                 mov     ecx, [ebp+var_20] ; this
.text:00008C46                 call    ??0CItem@NCab@NArchive@@QAE@ABU012@@Z ; NArchive::NCab::CItem::CItem(NArchive::NCab::CItem const &)
.text:00008C4B                 mov     [ebp+var_24], eax
.text:00008C4E                 jmp     short loc_8C57
.text:00008C50 ; ---------------------------------------------------------------------------
.text:00008C50
.text:00008C50 loc_8C50:                               ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::CObjectVector<NArchive::NCab::CItem>(CObjectVector<NArchive::NCab::CItem> const &)+94j
.text:00008C50                 mov     [ebp+var_24], 0
.text:00008C57
.text:00008C57 loc_8C57:                               ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::CObjectVector<NArchive::NCab::CItem>(CObjectVector<NArchive::NCab::CItem> const &)+AEj
.text:00008C57                 mov     ecx, [ebp+var_24]
.text:00008C5A                 mov     [ebp+var_1C], ecx
.text:00008C5D                 mov     byte ptr [ebp+var_4], 0
.text:00008C61                 mov     edx, [ebp+var_1C]
.text:00008C64                 push    edx
.text:00008C65                 mov     ecx, [ebp+var_10]
.text:00008C68                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:00008C6D                 jmp     short loc_8C0E
.text:00008C6F ; ---------------------------------------------------------------------------
.text:00008C6F
.text:00008C6F loc_8C6F:                               ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::CObjectVector<NArchive::NCab::CItem>(CObjectVector<NArchive::NCab::CItem> const &)+7Dj
.text:00008C6F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00008C76                 mov     eax, [ebp+var_10]
.text:00008C79                 mov     ecx, [ebp+var_C]
.text:00008C7C                 mov     large fs:0, ecx
.text:00008C83                 pop     ecx
.text:00008C84                 add     esp, 24h
.text:00008C87                 cmp     ebp, esp
.text:00008C89                 call    __RTC_CheckEsp
.text:00008C8E                 mov     esp, ebp
.text:00008C90                 pop     ebp
.text:00008C91                 retn    4
.text:00008C91 ??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@ABV0@@Z endp
.text:00008C91
.text:00008C91 _text           ends
.text:00008C91
.text$x:00008C94 ; ===========================================================================
.text$x:00008C94
.text$x:00008C94 ; Segment type: Pure code
.text$x:00008C94 ; Segment permissions: Read/Execute
.text$x:00008C94 _text$x         segment para public 'CODE' use32
.text$x:00008C94                 assume cs:_text$x
.text$x:00008C94                 ;org 8C94h
.text$x:00008C94 ; COMDAT (pick associative to section at 8BA0)
.text$x:00008C94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008C94
.text$x:00008C94 ; =============== S U B R O U T I N E =======================================
.text$x:00008C94
.text$x:00008C94
.text$x:00008C94 __unwindfunclet$??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@ABV0@@Z$0 proc near
.text$x:00008C94                                         ; DATA XREF: .xdata$x:00008CC8o
.text$x:00008C94                 mov     ecx, [ebp-10h]
.text$x:00008C97                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00008C97 __unwindfunclet$??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@ABV0@@Z$0 endp
.text$x:00008C97
.text$x:00008C9C
.text$x:00008C9C ; =============== S U B R O U T I N E =======================================
.text$x:00008C9C
.text$x:00008C9C
.text$x:00008C9C __unwindfunclet$??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@ABV0@@Z$1 proc near
.text$x:00008C9C                                         ; DATA XREF: .xdata$x:00008CD0o
.text$x:00008C9C                 mov     eax, [ebp-20h]
.text$x:00008C9F                 push    eax             ; void *
.text$x:00008CA0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00008CA5                 pop     ecx
.text$x:00008CA6                 retn
.text$x:00008CA6 __unwindfunclet$??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@ABV0@@Z$1 endp
.text$x:00008CA6
.text$x:00008CA7
.text$x:00008CA7 ; =============== S U B R O U T I N E =======================================
.text$x:00008CA7
.text$x:00008CA7
.text$x:00008CA7 __ehhandler$??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@ABV0@@Z proc near
.text$x:00008CA7                                         ; DATA XREF: CObjectVector<NArchive::NCab::CItem>::CObjectVector<NArchive::NCab::CItem>(CObjectVector<NArchive::NCab::CItem> const &)+5o
.text$x:00008CA7
.text$x:00008CA7 arg_4           = dword ptr  8
.text$x:00008CA7
.text$x:00008CA7                 mov     edx, [esp+arg_4]
.text$x:00008CAB                 lea     eax, [edx+0Ch]
.text$x:00008CAE                 mov     ecx, [edx-1Ch]
.text$x:00008CB1                 xor     ecx, eax
.text$x:00008CB3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008CB8                 mov     eax, offset __ehfuncinfo$??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@ABV0@@Z
.text$x:00008CBD                 jmp     ___CxxFrameHandler3
.text$x:00008CBD __ehhandler$??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@ABV0@@Z endp
.text$x:00008CBD
.text$x:00008CBD ; ---------------------------------------------------------------------------
.text$x:00008CC2                 align 4
.text$x:00008CC2 _text$x         ends
.text$x:00008CC2
.xdata$x:00008CC4 ; ===========================================================================
.xdata$x:00008CC4
.xdata$x:00008CC4 ; Segment type: Pure data
.xdata$x:00008CC4 ; Segment permissions: Read
.xdata$x:00008CC4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008CC4                 assume cs:_xdata$x
.xdata$x:00008CC4                 ;org 8CC4h
.xdata$x:00008CC4 ; COMDAT (pick associative to section at 8BA0)
.xdata$x:00008CC4 __unwindtable$??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@ABV0@@Z db 0FFh
.xdata$x:00008CC4                                         ; DATA XREF: .xdata$x:00008CDCo
.xdata$x:00008CC5                 db 0FFh
.xdata$x:00008CC6                 db 0FFh
.xdata$x:00008CC7                 db 0FFh
.xdata$x:00008CC8                 dd offset __unwindfunclet$??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@ABV0@@Z$0
.xdata$x:00008CCC                 align 10h
.xdata$x:00008CD0                 dd offset __unwindfunclet$??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@ABV0@@Z$1
.xdata$x:00008CD4 __ehfuncinfo$??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@ABV0@@Z db  22h ; "
.xdata$x:00008CD4                                         ; DATA XREF: __ehhandler$??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@ABV0@@Z+11o
.xdata$x:00008CD5                 db    5
.xdata$x:00008CD6                 db  93h ; ô
.xdata$x:00008CD7                 db  19h
.xdata$x:00008CD8                 db    2
.xdata$x:00008CD9                 db    0
.xdata$x:00008CDA                 db    0
.xdata$x:00008CDB                 db    0
.xdata$x:00008CDC                 dd offset __unwindtable$??0?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@ABV0@@Z
.xdata$x:00008CE0                 db    0
.xdata$x:00008CE1                 db    0
.xdata$x:00008CE2                 db    0
.xdata$x:00008CE3                 db    0
.xdata$x:00008CE4                 db    0
.xdata$x:00008CE5                 db    0
.xdata$x:00008CE6                 db    0
.xdata$x:00008CE7                 db    0
.xdata$x:00008CE8                 db    0
.xdata$x:00008CE9                 db    0
.xdata$x:00008CEA                 db    0
.xdata$x:00008CEB                 db    0
.xdata$x:00008CEC                 db    0
.xdata$x:00008CED                 db    0
.xdata$x:00008CEE                 db    0
.xdata$x:00008CEF                 db    0
.xdata$x:00008CF0                 db    0
.xdata$x:00008CF1                 db    0
.xdata$x:00008CF2                 db    0
.xdata$x:00008CF3                 db    0
.xdata$x:00008CF4                 db    1
.xdata$x:00008CF5                 db    0
.xdata$x:00008CF6                 db    0
.xdata$x:00008CF7                 db    0
.xdata$x:00008CF7 _xdata$x        ends
.xdata$x:00008CF7
.text:00008CF8 ; ===========================================================================
.text:00008CF8
.text:00008CF8 ; Segment type: Pure code
.text:00008CF8 ; Segment permissions: Read/Execute
.text:00008CF8 _text           segment para public 'CODE' use32
.text:00008CF8                 assume cs:_text
.text:00008CF8                 ;org 8CF8h
.text:00008CF8 ; COMDAT (pick any)
.text:00008CF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008CF8
.text:00008CF8 ; =============== S U B R O U T I N E =======================================
.text:00008CF8
.text:00008CF8 ; Attributes: bp-based frame
.text:00008CF8
.text:00008CF8 ; public: __thiscall CMyComPtr<struct IInStream>::CMyComPtr<struct IInStream>(class CMyComPtr<struct IInStream> const &)
.text:00008CF8                 public ??0?$CMyComPtr@UIInStream@@@@QAE@ABV0@@Z
.text:00008CF8 ??0?$CMyComPtr@UIInStream@@@@QAE@ABV0@@Z proc near
.text:00008CF8                                         ; CODE XREF: NArchive::NCab::CDatabaseEx::CDatabaseEx(NArchive::NCab::CDatabaseEx const &)+27p
.text:00008CF8
.text:00008CF8 var_4           = dword ptr -4
.text:00008CF8 arg_0           = dword ptr  8
.text:00008CF8
.text:00008CF8                 push    ebp
.text:00008CF9                 mov     ebp, esp
.text:00008CFB                 push    ecx
.text:00008CFC                 push    esi
.text:00008CFD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008D04                 mov     [ebp+var_4], ecx
.text:00008D07                 mov     eax, [ebp+var_4]
.text:00008D0A                 mov     ecx, [ebp+arg_0]
.text:00008D0D                 mov     edx, [ecx]
.text:00008D0F                 mov     [eax], edx
.text:00008D11                 mov     eax, [ebp+var_4]
.text:00008D14                 cmp     dword ptr [eax], 0
.text:00008D17                 jz      short loc_8D34
.text:00008D19                 mov     ecx, [ebp+var_4]
.text:00008D1C                 mov     edx, [ecx]
.text:00008D1E                 mov     eax, [ebp+var_4]
.text:00008D21                 mov     ecx, [eax]
.text:00008D23                 mov     edx, [edx]
.text:00008D25                 mov     esi, esp
.text:00008D27                 push    ecx
.text:00008D28                 mov     eax, [edx+4]
.text:00008D2B                 call    eax
.text:00008D2D                 cmp     esi, esp
.text:00008D2F                 call    __RTC_CheckEsp
.text:00008D34
.text:00008D34 loc_8D34:                               ; CODE XREF: CMyComPtr<IInStream>::CMyComPtr<IInStream>(CMyComPtr<IInStream> const &)+1Fj
.text:00008D34                 mov     eax, [ebp+var_4]
.text:00008D37                 pop     esi
.text:00008D38                 add     esp, 4
.text:00008D3B                 cmp     ebp, esp
.text:00008D3D                 call    __RTC_CheckEsp
.text:00008D42                 mov     esp, ebp
.text:00008D44                 pop     ebp
.text:00008D45                 retn    4
.text:00008D45 ??0?$CMyComPtr@UIInStream@@@@QAE@ABV0@@Z endp
.text:00008D45
.text:00008D45 _text           ends
.text:00008D45
.text:00008D48 ; ===========================================================================
.text:00008D48
.text:00008D48 ; Segment type: Pure code
.text:00008D48 ; Segment permissions: Read/Execute
.text:00008D48 _text           segment para public 'CODE' use32
.text:00008D48                 assume cs:_text
.text:00008D48                 ;org 8D48h
.text:00008D48 ; COMDAT (pick any)
.text:00008D48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008D48
.text:00008D48 ; =============== S U B R O U T I N E =======================================
.text:00008D48
.text:00008D48 ; Attributes: bp-based frame
.text:00008D48
.text:00008D48 ; private: void __thiscall CRecordVector<bool>::ReserveOnePosition(void)
.text:00008D48                 public ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ
.text:00008D48 ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ proc near
.text:00008D48                                         ; CODE XREF: CRecordVector<bool>::Add(bool)+1Ap
.text:00008D48
.text:00008D48 var_14          = dword ptr -14h
.text:00008D48 var_10          = dword ptr -10h
.text:00008D48 Dst             = dword ptr -0Ch
.text:00008D48 var_8           = dword ptr -8
.text:00008D48 var_4           = dword ptr -4
.text:00008D48
.text:00008D48                 push    ebp
.text:00008D49                 mov     ebp, esp
.text:00008D4B                 sub     esp, 14h
.text:00008D4E                 mov     eax, 0CCCCCCCCh
.text:00008D53                 mov     [ebp+var_14], eax
.text:00008D56                 mov     [ebp+var_10], eax
.text:00008D59                 mov     [ebp+Dst], eax
.text:00008D5C                 mov     [ebp+var_8], eax
.text:00008D5F                 mov     [ebp+var_4], eax
.text:00008D62                 mov     [ebp+var_4], ecx
.text:00008D65                 mov     eax, [ebp+var_4]
.text:00008D68                 mov     ecx, [ebp+var_4]
.text:00008D6B                 mov     edx, [eax+4]
.text:00008D6E                 cmp     edx, [ecx+8]
.text:00008D71                 jnz     short loc_8DE5
.text:00008D73                 mov     eax, [ebp+var_4]
.text:00008D76                 mov     ecx, [eax+8]
.text:00008D79                 shr     ecx, 2
.text:00008D7C                 mov     edx, [ebp+var_4]
.text:00008D7F                 mov     eax, [edx+8]
.text:00008D82                 lea     ecx, [eax+ecx+1]
.text:00008D86                 mov     [ebp+var_8], ecx
.text:00008D89                 mov     edx, [ebp+var_8]
.text:00008D8C                 push    edx             ; unsigned int
.text:00008D8D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00008D92                 add     esp, 4
.text:00008D95                 mov     [ebp+var_10], eax
.text:00008D98                 mov     eax, [ebp+var_10]
.text:00008D9B                 mov     [ebp+Dst], eax
.text:00008D9E                 mov     ecx, [ebp+var_4]
.text:00008DA1                 cmp     dword ptr [ecx+4], 0
.text:00008DA5                 jz      short loc_8DC0
.text:00008DA7                 mov     edx, [ebp+var_4]
.text:00008DAA                 mov     eax, [edx+4]
.text:00008DAD                 push    eax             ; Size
.text:00008DAE                 mov     ecx, [ebp+var_4]
.text:00008DB1                 mov     edx, [ecx]
.text:00008DB3                 push    edx             ; Src
.text:00008DB4                 mov     eax, [ebp+Dst]
.text:00008DB7                 push    eax             ; Dst
.text:00008DB8                 call    _memcpy
.text:00008DBD                 add     esp, 0Ch
.text:00008DC0
.text:00008DC0 loc_8DC0:                               ; CODE XREF: CRecordVector<bool>::ReserveOnePosition(void)+5Dj
.text:00008DC0                 mov     ecx, [ebp+var_4]
.text:00008DC3                 mov     edx, [ecx]
.text:00008DC5                 mov     [ebp+var_14], edx
.text:00008DC8                 mov     eax, [ebp+var_14]
.text:00008DCB                 push    eax             ; void *
.text:00008DCC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008DD1                 add     esp, 4
.text:00008DD4                 mov     ecx, [ebp+var_4]
.text:00008DD7                 mov     edx, [ebp+Dst]
.text:00008DDA                 mov     [ecx], edx
.text:00008DDC                 mov     eax, [ebp+var_4]
.text:00008DDF                 mov     ecx, [ebp+var_8]
.text:00008DE2                 mov     [eax+8], ecx
.text:00008DE5
.text:00008DE5 loc_8DE5:                               ; CODE XREF: CRecordVector<bool>::ReserveOnePosition(void)+29j
.text:00008DE5                 add     esp, 14h
.text:00008DE8                 cmp     ebp, esp
.text:00008DEA                 call    __RTC_CheckEsp
.text:00008DEF                 mov     esp, ebp
.text:00008DF1                 pop     ebp
.text:00008DF2                 retn
.text:00008DF2 ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ endp
.text:00008DF2
.text:00008DF2 ; ---------------------------------------------------------------------------
.text:00008DF3                 align 4
.text:00008DF3 _text           ends
.text:00008DF3
.text:00008DF4 ; ===========================================================================
.text:00008DF4
.text:00008DF4 ; Segment type: Pure code
.text:00008DF4 ; Segment permissions: Read/Execute
.text:00008DF4 _text           segment para public 'CODE' use32
.text:00008DF4                 assume cs:_text
.text:00008DF4                 ;org 8DF4h
.text:00008DF4 ; COMDAT (pick any)
.text:00008DF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008DF4
.text:00008DF4 ; =============== S U B R O U T I N E =======================================
.text:00008DF4
.text:00008DF4 ; Attributes: bp-based frame
.text:00008DF4
.text:00008DF4 ; _DWORD __thiscall NArchive::NCab::CItem::CItem(NArchive::NCab::CItem *this, const struct NArchive::NCab::CItem *)
.text:00008DF4                 public ??0CItem@NCab@NArchive@@QAE@ABU012@@Z
.text:00008DF4 ??0CItem@NCab@NArchive@@QAE@ABU012@@Z proc near
.text:00008DF4                                         ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::CObjectVector<NArchive::NCab::CItem>(CObjectVector<NArchive::NCab::CItem> const &)+A6p
.text:00008DF4
.text:00008DF4 var_4           = dword ptr -4
.text:00008DF4 arg_0           = dword ptr  8
.text:00008DF4
.text:00008DF4                 push    ebp
.text:00008DF5                 mov     ebp, esp
.text:00008DF7                 push    ecx
.text:00008DF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008DFF                 mov     [ebp+var_4], ecx
.text:00008E02                 mov     eax, [ebp+arg_0]
.text:00008E05                 push    eax
.text:00008E06                 mov     ecx, [ebp+var_4]
.text:00008E09                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:00008E0E                 mov     ecx, [ebp+var_4]
.text:00008E11                 mov     edx, [ebp+arg_0]
.text:00008E14                 mov     eax, [edx+0Ch]
.text:00008E17                 mov     [ecx+0Ch], eax
.text:00008E1A                 mov     ecx, [ebp+var_4]
.text:00008E1D                 mov     edx, [ebp+arg_0]
.text:00008E20                 mov     eax, [edx+10h]
.text:00008E23                 mov     [ecx+10h], eax
.text:00008E26                 mov     ecx, [ebp+var_4]
.text:00008E29                 mov     edx, [ebp+arg_0]
.text:00008E2C                 mov     eax, [edx+14h]
.text:00008E2F                 mov     [ecx+14h], eax
.text:00008E32                 mov     ecx, [ebp+var_4]
.text:00008E35                 mov     edx, [ebp+arg_0]
.text:00008E38                 mov     eax, [edx+18h]
.text:00008E3B                 mov     [ecx+18h], eax
.text:00008E3E                 mov     ecx, [ebp+var_4]
.text:00008E41                 mov     edx, [ebp+arg_0]
.text:00008E44                 mov     ax, [edx+1Ch]
.text:00008E48                 mov     [ecx+1Ch], ax
.text:00008E4C                 mov     ecx, [ebp+var_4]
.text:00008E4F                 mov     edx, [ebp+arg_0]
.text:00008E52                 mov     ax, [edx+1Eh]
.text:00008E56                 mov     [ecx+1Eh], ax
.text:00008E5A                 mov     eax, [ebp+var_4]
.text:00008E5D                 add     esp, 4
.text:00008E60                 cmp     ebp, esp
.text:00008E62                 call    __RTC_CheckEsp
.text:00008E67                 mov     esp, ebp
.text:00008E69                 pop     ebp
.text:00008E6A                 retn    4
.text:00008E6A ??0CItem@NCab@NArchive@@QAE@ABU012@@Z endp
.text:00008E6A
.text:00008E6A ; ---------------------------------------------------------------------------
.text:00008E6D                 align 10h
.text:00008E6D _text           ends
.text:00008E6D
.text:00008E70 ; ===========================================================================
.text:00008E70
.text:00008E70 ; Segment type: Pure code
.text:00008E70 ; Segment permissions: Read/Execute
.text:00008E70 _text           segment para public 'CODE' use32
.text:00008E70                 assume cs:_text
.text:00008E70                 ;org 8E70h
.text:00008E70 ; COMDAT (pick any)
.text:00008E70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008E70
.text:00008E70 ; =============== S U B R O U T I N E =======================================
.text:00008E70
.text:00008E70 ; Attributes: bp-based frame
.text:00008E70
.text:00008E70 ; private: void __thiscall CRecordVector<void *>::MoveItems(unsigned int, unsigned int)
.text:00008E70                 public ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z
.text:00008E70 ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z proc near
.text:00008E70                                         ; CODE XREF: CRecordVector<void *>::DeleteFrontal(uint)+1Dp
.text:00008E70                                         ; CRecordVector<void *>::Insert(uint,void * const)+24p
.text:00008E70
.text:00008E70 var_4           = dword ptr -4
.text:00008E70 arg_0           = dword ptr  8
.text:00008E70 arg_4           = dword ptr  0Ch
.text:00008E70
.text:00008E70                 push    ebp
.text:00008E71                 mov     ebp, esp
.text:00008E73                 push    ecx
.text:00008E74                 push    esi
.text:00008E75                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008E7C                 mov     [ebp+var_4], ecx
.text:00008E7F                 mov     eax, [ebp+var_4]
.text:00008E82                 mov     ecx, [eax+4]
.text:00008E85                 sub     ecx, [ebp+arg_4]
.text:00008E88                 shl     ecx, 2
.text:00008E8B                 mov     esi, esp
.text:00008E8D                 push    ecx             ; Size
.text:00008E8E                 mov     edx, [ebp+var_4]
.text:00008E91                 mov     eax, [edx]
.text:00008E93                 mov     ecx, [ebp+arg_4]
.text:00008E96                 lea     edx, [eax+ecx*4]
.text:00008E99                 push    edx             ; Src
.text:00008E9A                 mov     eax, [ebp+var_4]
.text:00008E9D                 mov     ecx, [eax]
.text:00008E9F                 mov     edx, [ebp+arg_0]
.text:00008EA2                 lea     eax, [ecx+edx*4]
.text:00008EA5                 push    eax             ; Dst
.text:00008EA6                 call    dword ptr ds:__imp__memmove
.text:00008EAC                 add     esp, 0Ch
.text:00008EAF                 cmp     esi, esp
.text:00008EB1                 call    __RTC_CheckEsp
.text:00008EB6                 pop     esi
.text:00008EB7                 add     esp, 4
.text:00008EBA                 cmp     ebp, esp
.text:00008EBC                 call    __RTC_CheckEsp
.text:00008EC1                 mov     esp, ebp
.text:00008EC3                 pop     ebp
.text:00008EC4                 retn    8
.text:00008EC4 ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z endp
.text:00008EC4
.text:00008EC4 ; ---------------------------------------------------------------------------
.text:00008EC7                 align 4
.text:00008EC7 _text           ends
.text:00008EC7
.text:00008EC8 ; ===========================================================================
.text:00008EC8
.text:00008EC8 ; Segment type: Pure code
.text:00008EC8 ; Segment permissions: Read/Execute
.text:00008EC8 _text           segment para public 'CODE' use32
.text:00008EC8                 assume cs:_text
.text:00008EC8                 ;org 8EC8h
.text:00008EC8 ; COMDAT (pick any)
.text:00008EC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008EC8
.text:00008EC8 ; =============== S U B R O U T I N E =======================================
.text:00008EC8
.text:00008EC8 ; Attributes: bp-based frame
.text:00008EC8
.text:00008EC8 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:00008EC8                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:00008EC8 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:00008EC8                                         ; CODE XREF: CRecordVector<void *>::Insert(uint,void * const)+11p
.text:00008EC8
.text:00008EC8 var_14          = dword ptr -14h
.text:00008EC8 var_10          = dword ptr -10h
.text:00008EC8 Dst             = dword ptr -0Ch
.text:00008EC8 var_8           = dword ptr -8
.text:00008EC8 var_4           = dword ptr -4
.text:00008EC8
.text:00008EC8                 push    ebp
.text:00008EC9                 mov     ebp, esp
.text:00008ECB                 sub     esp, 14h
.text:00008ECE                 mov     eax, 0CCCCCCCCh
.text:00008ED3                 mov     [ebp+var_14], eax
.text:00008ED6                 mov     [ebp+var_10], eax
.text:00008ED9                 mov     [ebp+Dst], eax
.text:00008EDC                 mov     [ebp+var_8], eax
.text:00008EDF                 mov     [ebp+var_4], eax
.text:00008EE2                 mov     [ebp+var_4], ecx
.text:00008EE5                 mov     eax, [ebp+var_4]
.text:00008EE8                 mov     ecx, [ebp+var_4]
.text:00008EEB                 mov     edx, [eax+4]
.text:00008EEE                 cmp     edx, [ecx+8]
.text:00008EF1                 jnz     loc_8F7C
.text:00008EF7                 mov     eax, [ebp+var_4]
.text:00008EFA                 mov     ecx, [eax+8]
.text:00008EFD                 shr     ecx, 2
.text:00008F00                 mov     edx, [ebp+var_4]
.text:00008F03                 mov     eax, [edx+8]
.text:00008F06                 lea     ecx, [eax+ecx+1]
.text:00008F0A                 mov     [ebp+var_8], ecx
.text:00008F0D                 xor     ecx, ecx
.text:00008F0F                 mov     eax, [ebp+var_8]
.text:00008F12                 mov     edx, 4
.text:00008F17                 mul     edx
.text:00008F19                 seto    cl
.text:00008F1C                 neg     ecx
.text:00008F1E                 or      ecx, eax
.text:00008F20                 push    ecx             ; unsigned int
.text:00008F21                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00008F26                 add     esp, 4
.text:00008F29                 mov     [ebp+var_10], eax
.text:00008F2C                 mov     eax, [ebp+var_10]
.text:00008F2F                 mov     [ebp+Dst], eax
.text:00008F32                 mov     ecx, [ebp+var_4]
.text:00008F35                 cmp     dword ptr [ecx+4], 0
.text:00008F39                 jz      short loc_8F57
.text:00008F3B                 mov     edx, [ebp+var_4]
.text:00008F3E                 mov     eax, [edx+4]
.text:00008F41                 shl     eax, 2
.text:00008F44                 push    eax             ; Size
.text:00008F45                 mov     ecx, [ebp+var_4]
.text:00008F48                 mov     edx, [ecx]
.text:00008F4A                 push    edx             ; Src
.text:00008F4B                 mov     eax, [ebp+Dst]
.text:00008F4E                 push    eax             ; Dst
.text:00008F4F                 call    _memcpy
.text:00008F54                 add     esp, 0Ch
.text:00008F57
.text:00008F57 loc_8F57:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:00008F57                 mov     ecx, [ebp+var_4]
.text:00008F5A                 mov     edx, [ecx]
.text:00008F5C                 mov     [ebp+var_14], edx
.text:00008F5F                 mov     eax, [ebp+var_14]
.text:00008F62                 push    eax             ; void *
.text:00008F63                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00008F68                 add     esp, 4
.text:00008F6B                 mov     ecx, [ebp+var_4]
.text:00008F6E                 mov     edx, [ebp+Dst]
.text:00008F71                 mov     [ecx], edx
.text:00008F73                 mov     eax, [ebp+var_4]
.text:00008F76                 mov     ecx, [ebp+var_8]
.text:00008F79                 mov     [eax+8], ecx
.text:00008F7C
.text:00008F7C loc_8F7C:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:00008F7C                 add     esp, 14h
.text:00008F7F                 cmp     ebp, esp
.text:00008F81                 call    __RTC_CheckEsp
.text:00008F86                 mov     esp, ebp
.text:00008F88                 pop     ebp
.text:00008F89                 retn
.text:00008F89 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:00008F89
.text:00008F89 ; ---------------------------------------------------------------------------
.text:00008F8A                 align 4
.text:00008F8A _text           ends
.text:00008F8A
.text:00008F8C ; ===========================================================================
.text:00008F8C
.text:00008F8C ; Segment type: Pure code
.text:00008F8C ; Segment permissions: Read/Execute
.text:00008F8C _text           segment para public 'CODE' use32
.text:00008F8C                 assume cs:_text
.text:00008F8C                 ;org 8F8Ch
.text:00008F8C ; COMDAT (pick any)
.text:00008F8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008F8C
.text:00008F8C ; =============== S U B R O U T I N E =======================================
.text:00008F8C
.text:00008F8C ; Attributes: bp-based frame
.text:00008F8C
.text:00008F8C ; public: void __thiscall CRecordVector<void *>::ConstructReserve(unsigned int)
.text:00008F8C                 public ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
.text:00008F8C ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:00008F8C                                         ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::CObjectVector<NArchive::NCab::CItem>(CObjectVector<NArchive::NCab::CItem> const &)+60p
.text:00008F8C
.text:00008F8C var_8           = dword ptr -8
.text:00008F8C var_4           = dword ptr -4
.text:00008F8C arg_0           = dword ptr  8
.text:00008F8C
.text:00008F8C                 push    ebp
.text:00008F8D                 mov     ebp, esp
.text:00008F8F                 sub     esp, 8
.text:00008F92                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00008F99                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008FA0                 mov     [ebp+var_4], ecx
.text:00008FA3                 cmp     [ebp+arg_0], 0
.text:00008FA7                 jz      short loc_8FD9
.text:00008FA9                 xor     ecx, ecx
.text:00008FAB                 mov     eax, [ebp+arg_0]
.text:00008FAE                 mov     edx, 4
.text:00008FB3                 mul     edx
.text:00008FB5                 seto    cl
.text:00008FB8                 neg     ecx
.text:00008FBA                 or      ecx, eax
.text:00008FBC                 push    ecx             ; unsigned int
.text:00008FBD                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00008FC2                 add     esp, 4
.text:00008FC5                 mov     [ebp+var_8], eax
.text:00008FC8                 mov     eax, [ebp+var_4]
.text:00008FCB                 mov     ecx, [ebp+var_8]
.text:00008FCE                 mov     [eax], ecx
.text:00008FD0                 mov     edx, [ebp+var_4]
.text:00008FD3                 mov     eax, [ebp+arg_0]
.text:00008FD6                 mov     [edx+8], eax
.text:00008FD9
.text:00008FD9 loc_8FD9:                               ; CODE XREF: CRecordVector<void *>::ConstructReserve(uint)+1Bj
.text:00008FD9                 add     esp, 8
.text:00008FDC                 cmp     ebp, esp
.text:00008FDE                 call    __RTC_CheckEsp
.text:00008FE3                 mov     esp, ebp
.text:00008FE5                 pop     ebp
.text:00008FE6                 retn    4
.text:00008FE6 ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z endp
.text:00008FE6
.text:00008FE6 ; ---------------------------------------------------------------------------
.text:00008FE9                 align 4
.text:00008FE9 _text           ends
.text:00008FE9
.text:00008FEC ; ===========================================================================
.text:00008FEC
.text:00008FEC ; Segment type: Pure code
.text:00008FEC ; Segment permissions: Read/Execute
.text:00008FEC _text           segment para public 'CODE' use32
.text:00008FEC                 assume cs:_text
.text:00008FEC                 ;org 8FECh
.text:00008FEC ; COMDAT (pick any)
.text:00008FEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00008FEC
.text:00008FEC ; =============== S U B R O U T I N E =======================================
.text:00008FEC
.text:00008FEC ; Attributes: bp-based frame
.text:00008FEC
.text:00008FEC ; public: void __thiscall CRecordVector<void *>::AddInReserved(void * const)
.text:00008FEC                 public ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
.text:00008FEC ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z proc near
.text:00008FEC                                         ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::CObjectVector<NArchive::NCab::CItem>(CObjectVector<NArchive::NCab::CItem> const &)+C8p
.text:00008FEC
.text:00008FEC var_4           = dword ptr -4
.text:00008FEC arg_0           = dword ptr  8
.text:00008FEC
.text:00008FEC                 push    ebp
.text:00008FED                 mov     ebp, esp
.text:00008FEF                 push    ecx
.text:00008FF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00008FF7                 mov     [ebp+var_4], ecx
.text:00008FFA                 mov     eax, [ebp+var_4]
.text:00008FFD                 mov     ecx, [eax+4]
.text:00009000                 mov     edx, [ebp+var_4]
.text:00009003                 mov     eax, [edx]
.text:00009005                 mov     edx, [ebp+arg_0]
.text:00009008                 mov     [eax+ecx*4], edx
.text:0000900B                 mov     eax, [ebp+var_4]
.text:0000900E                 mov     ecx, [eax+4]
.text:00009011                 add     ecx, 1
.text:00009014                 mov     edx, [ebp+var_4]
.text:00009017                 mov     [edx+4], ecx
.text:0000901A                 mov     esp, ebp
.text:0000901C                 pop     ebp
.text:0000901D                 retn    4
.text:0000901D ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z endp
.text:0000901D
.text:0000901D _text           ends
.text:0000901D
.text:00009020 ; ===========================================================================
.text:00009020
.text:00009020 ; Segment type: Pure code
.text:00009020 ; Segment permissions: Read/Execute
.text:00009020 _text           segment para public 'CODE' use32
.text:00009020                 assume cs:_text
.text:00009020                 ;org 9020h
.text:00009020 ; COMDAT (pick any)
.text:00009020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009020
.text:00009020 ; =============== S U B R O U T I N E =======================================
.text:00009020
.text:00009020 ; Attributes: bp-based frame
.text:00009020
.text:00009020 ; unsigned int __stdcall MyMin<unsigned int>(unsigned int, unsigned int)
.text:00009020                 public ??$MyMin@I@@YGIII@Z
.text:00009020 ??$MyMin@I@@YGIII@Z proc near           ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+87p
.text:00009020                                         ; NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+44Cp
.text:00009020
.text:00009020 var_4           = dword ptr -4
.text:00009020 arg_0           = dword ptr  8
.text:00009020 arg_4           = dword ptr  0Ch
.text:00009020
.text:00009020                 push    ebp
.text:00009021                 mov     ebp, esp
.text:00009023                 push    ecx
.text:00009024                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000902B                 mov     eax, [ebp+arg_0]
.text:0000902E                 cmp     eax, [ebp+arg_4]
.text:00009031                 jnb     short loc_903B
.text:00009033                 mov     ecx, [ebp+arg_0]
.text:00009036                 mov     [ebp+var_4], ecx
.text:00009039                 jmp     short loc_9041
.text:0000903B ; ---------------------------------------------------------------------------
.text:0000903B
.text:0000903B loc_903B:                               ; CODE XREF: MyMin<uint>(uint,uint)+11j
.text:0000903B                 mov     edx, [ebp+arg_4]
.text:0000903E                 mov     [ebp+var_4], edx
.text:00009041
.text:00009041 loc_9041:                               ; CODE XREF: MyMin<uint>(uint,uint)+19j
.text:00009041                 mov     eax, [ebp+var_4]
.text:00009044                 mov     esp, ebp
.text:00009046                 pop     ebp
.text:00009047                 retn    8
.text:00009047 ??$MyMin@I@@YGIII@Z endp
.text:00009047
.text:00009047 ; ---------------------------------------------------------------------------
.text:0000904A                 align 4
.text:0000904A _text           ends
.text:0000904A
.text:0000904C ; ===========================================================================
.text:0000904C
.text:0000904C ; Segment type: Pure code
.text:0000904C ; Segment permissions: Read/Execute
.text:0000904C _text           segment para public 'CODE' use32
.text:0000904C                 assume cs:_text
.text:0000904C                 ;org 904Ch
.text:0000904C ; COMDAT (pick any)
.text:0000904C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000904C
.text:0000904C ; =============== S U B R O U T I N E =======================================
.text:0000904C
.text:0000904C
.text:0000904C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{12}' (void)
.text:0000904C                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ
.text:0000904C ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ proc near
.text:0000904C                                         ; DATA XREF: .rdata:00006244o
.text:0000904C                                         ; .rdata:00006898o
.text:0000904C
.text:0000904C arg_0           = dword ptr  4
.text:0000904C
.text:0000904C                 sub     [esp+arg_0], 0Ch
.text:00009051                 jmp     ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.text:00009051 ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ endp
.text:00009051
.text:00009051 ; ---------------------------------------------------------------------------
.text:00009056                 align 4
.text:00009056 _text           ends
.text:00009056
.text:00009058 ; ===========================================================================
.text:00009058
.text:00009058 ; Segment type: Pure code
.text:00009058 ; Segment permissions: Read/Execute
.text:00009058 _text           segment para public 'CODE' use32
.text:00009058                 assume cs:_text
.text:00009058                 ;org 9058h
.text:00009058 ; COMDAT (pick any)
.text:00009058                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009058
.text:00009058 ; =============== S U B R O U T I N E =======================================
.text:00009058
.text:00009058
.text:00009058 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{4}' (void)
.text:00009058                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ
.text:00009058 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ proc near
.text:00009058                                         ; DATA XREF: .rdata:0000626Co
.text:00009058                                         ; .rdata:000068C0o
.text:00009058
.text:00009058 arg_0           = dword ptr  4
.text:00009058
.text:00009058                 sub     [esp+arg_0], 4
.text:0000905D                 jmp     ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.text:0000905D ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ endp
.text:0000905D
.text:0000905D ; ---------------------------------------------------------------------------
.text:00009062                 align 4
.text:00009062 _text           ends
.text:00009062
.text:00009064 ; ===========================================================================
.text:00009064
.text:00009064 ; Segment type: Pure code
.text:00009064 ; Segment permissions: Read/Execute
.text:00009064 _text           segment para public 'CODE' use32
.text:00009064                 assume cs:_text
.text:00009064                 ;org 9064h
.text:00009064 ; COMDAT (pick any)
.text:00009064                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009064
.text:00009064 ; =============== S U B R O U T I N E =======================================
.text:00009064
.text:00009064
.text:00009064 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{4}' (void)
.text:00009064                 public ?Release@CCopyCoder@NCompress@@W3AGKXZ
.text:00009064 ?Release@CCopyCoder@NCompress@@W3AGKXZ proc near
.text:00009064                                         ; DATA XREF: .rdata:00005980o
.text:00009064
.text:00009064 arg_0           = dword ptr  4
.text:00009064
.text:00009064                 sub     [esp+arg_0], 4
.text:00009069                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:00009069 ?Release@CCopyCoder@NCompress@@W3AGKXZ endp
.text:00009069
.text:00009069 ; ---------------------------------------------------------------------------
.text:0000906E                 align 10h
.text:0000906E _text           ends
.text:0000906E
.text:00009070 ; ===========================================================================
.text:00009070
.text:00009070 ; Segment type: Pure code
.text:00009070 ; Segment permissions: Read/Execute
.text:00009070 _text           segment para public 'CODE' use32
.text:00009070                 assume cs:_text
.text:00009070                 ;org 9070h
.text:00009070 ; COMDAT (pick any)
.text:00009070                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009070
.text:00009070 ; =============== S U B R O U T I N E =======================================
.text:00009070
.text:00009070
.text:00009070 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{16}' (void)
.text:00009070                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ
.text:00009070 ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ proc near
.text:00009070                                         ; DATA XREF: .rdata:00006230o
.text:00009070                                         ; .rdata:00006884o
.text:00009070
.text:00009070 arg_0           = dword ptr  4
.text:00009070
.text:00009070                 sub     [esp+arg_0], 10h
.text:00009075                 jmp     ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.text:00009075 ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ endp
.text:00009075
.text:00009075 ; ---------------------------------------------------------------------------
.text:0000907A                 align 4
.text:0000907A _text           ends
.text:0000907A
.text:0000907C ; ===========================================================================
.text:0000907C
.text:0000907C ; Segment type: Pure code
.text:0000907C ; Segment permissions: Read/Execute
.text:0000907C _text           segment para public 'CODE' use32
.text:0000907C                 assume cs:_text
.text:0000907C                 ;org 907Ch
.text:0000907C ; COMDAT (pick any)
.text:0000907C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000907C
.text:0000907C ; =============== S U B R O U T I N E =======================================
.text:0000907C
.text:0000907C
.text:0000907C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{8}' (void)
.text:0000907C                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ
.text:0000907C ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ proc near
.text:0000907C                                         ; DATA XREF: .rdata:00006254o
.text:0000907C                                         ; .rdata:000068A8o
.text:0000907C
.text:0000907C arg_0           = dword ptr  4
.text:0000907C
.text:0000907C                 sub     [esp+arg_0], 8
.text:00009081                 jmp     ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.text:00009081 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ endp
.text:00009081
.text:00009081 ; ---------------------------------------------------------------------------
.text:00009086                 align 4
.text:00009086 _text           ends
.text:00009086
.text:00009088 ; ===========================================================================
.text:00009088
.text:00009088 ; Segment type: Pure code
.text:00009088 ; Segment permissions: Read/Execute
.text:00009088 _text           segment para public 'CODE' use32
.text:00009088                 assume cs:_text
.text:00009088                 ;org 9088h
.text:00009088 ; COMDAT (pick any)
.text:00009088                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009088
.text:00009088 ; =============== S U B R O U T I N E =======================================
.text:00009088
.text:00009088
.text:00009088 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{8}' (void)
.text:00009088                 public ?Release@CCopyCoder@NCompress@@W7AGKXZ
.text:00009088 ?Release@CCopyCoder@NCompress@@W7AGKXZ proc near
.text:00009088                                         ; DATA XREF: .rdata:0000596Co
.text:00009088
.text:00009088 arg_0           = dword ptr  4
.text:00009088
.text:00009088                 sub     [esp+arg_0], 8
.text:0000908D                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:0000908D ?Release@CCopyCoder@NCompress@@W7AGKXZ endp
.text:0000908D
.text:0000908D ; ---------------------------------------------------------------------------
.text:00009092                 align 4
.text:00009092 _text           ends
.text:00009092
.text:00009094 ; ===========================================================================
.text:00009094
.text:00009094 ; Segment type: Pure code
.text:00009094 ; Segment permissions: Read/Execute
.text:00009094 _text           segment para public 'CODE' use32
.text:00009094                 assume cs:_text
.text:00009094                 ;org 9094h
.text:00009094 ; COMDAT (pick any)
.text:00009094                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009094
.text:00009094 ; =============== S U B R O U T I N E =======================================
.text:00009094
.text:00009094
.text:00009094 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{12}' (void)
.text:00009094                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ
.text:00009094 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ proc near
.text:00009094                                         ; DATA XREF: .rdata:00006240o
.text:00009094                                         ; .rdata:00006894o
.text:00009094
.text:00009094 arg_0           = dword ptr  4
.text:00009094
.text:00009094                 sub     [esp+arg_0], 0Ch
.text:00009099                 jmp     ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.text:00009099 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ endp
.text:00009099
.text:00009099 ; ---------------------------------------------------------------------------
.text:0000909E                 align 10h
.text:0000909E _text           ends
.text:0000909E
.text:000090A0 ; ===========================================================================
.text:000090A0
.text:000090A0 ; Segment type: Pure code
.text:000090A0 ; Segment permissions: Read/Execute
.text:000090A0 _text           segment para public 'CODE' use32
.text:000090A0                 assume cs:_text
.text:000090A0                 ;org 90A0h
.text:000090A0 ; COMDAT (pick any)
.text:000090A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000090A0
.text:000090A0 ; =============== S U B R O U T I N E =======================================
.text:000090A0
.text:000090A0
.text:000090A0 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{12}' (void)
.text:000090A0                 public ?Release@CCopyCoder@NCompress@@WM@AGKXZ
.text:000090A0 ?Release@CCopyCoder@NCompress@@WM@AGKXZ proc near
.text:000090A0                                         ; DATA XREF: .rdata:00005958o
.text:000090A0
.text:000090A0 arg_0           = dword ptr  4
.text:000090A0
.text:000090A0                 sub     [esp+arg_0], 0Ch
.text:000090A5                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:000090A5 ?Release@CCopyCoder@NCompress@@WM@AGKXZ endp
.text:000090A5
.text:000090A5 ; ---------------------------------------------------------------------------
.text:000090AA                 align 4
.text:000090AA _text           ends
.text:000090AA
.text:000090AC ; ===========================================================================
.text:000090AC
.text:000090AC ; Segment type: Pure code
.text:000090AC ; Segment permissions: Read/Execute
.text:000090AC _text           segment para public 'CODE' use32
.text:000090AC                 assume cs:_text
.text:000090AC                 ;org 90ACh
.text:000090AC ; COMDAT (pick any)
.text:000090AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000090AC
.text:000090AC ; =============== S U B R O U T I N E =======================================
.text:000090AC
.text:000090AC
.text:000090AC ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{4}' (void)
.text:000090AC                 public ?AddRef@CCopyCoder@NCompress@@W3AGKXZ
.text:000090AC ?AddRef@CCopyCoder@NCompress@@W3AGKXZ proc near ; DATA XREF: .rdata:0000597Co
.text:000090AC
.text:000090AC arg_0           = dword ptr  4
.text:000090AC
.text:000090AC                 sub     [esp+arg_0], 4
.text:000090B1                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:000090B1 ?AddRef@CCopyCoder@NCompress@@W3AGKXZ endp
.text:000090B1
.text:000090B1 ; ---------------------------------------------------------------------------
.text:000090B6                 align 4
.text:000090B6 _text           ends
.text:000090B6
.text:000090B8 ; ===========================================================================
.text:000090B8
.text:000090B8 ; Segment type: Pure code
.text:000090B8 ; Segment permissions: Read/Execute
.text:000090B8 _text           segment para public 'CODE' use32
.text:000090B8                 assume cs:_text
.text:000090B8                 ;org 90B8h
.text:000090B8 ; COMDAT (pick any)
.text:000090B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000090B8
.text:000090B8 ; =============== S U B R O U T I N E =======================================
.text:000090B8
.text:000090B8
.text:000090B8 ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:000090B8                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:000090B8 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:000090B8                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}o
.text:000090B8                                         ; .rdata:const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}o
.text:000090B8
.text:000090B8 arg_0           = dword ptr  4
.text:000090B8
.text:000090B8                 sub     [esp+arg_0], 4
.text:000090BD                 jmp     ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:000090BD ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:000090BD
.text:000090BD ; ---------------------------------------------------------------------------
.text:000090C2                 align 4
.text:000090C2 _text           ends
.text:000090C2
.text:000090C4 ; ===========================================================================
.text:000090C4
.text:000090C4 ; Segment type: Pure code
.text:000090C4 ; Segment permissions: Read/Execute
.text:000090C4 _text           segment para public 'CODE' use32
.text:000090C4                 assume cs:_text
.text:000090C4                 ;org 90C4h
.text:000090C4 ; COMDAT (pick any)
.text:000090C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000090C4
.text:000090C4 ; =============== S U B R O U T I N E =======================================
.text:000090C4
.text:000090C4
.text:000090C4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{16}' (void)
.text:000090C4                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ
.text:000090C4 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ proc near
.text:000090C4                                         ; DATA XREF: .rdata:0000622Co
.text:000090C4                                         ; .rdata:00006880o
.text:000090C4
.text:000090C4 arg_0           = dword ptr  4
.text:000090C4
.text:000090C4                 sub     [esp+arg_0], 10h
.text:000090C9                 jmp     ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.text:000090C9 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ endp
.text:000090C9
.text:000090C9 ; ---------------------------------------------------------------------------
.text:000090CE                 align 10h
.text:000090CE _text           ends
.text:000090CE
.text:000090D0 ; ===========================================================================
.text:000090D0
.text:000090D0 ; Segment type: Pure code
.text:000090D0 ; Segment permissions: Read/Execute
.text:000090D0 _text           segment para public 'CODE' use32
.text:000090D0                 assume cs:_text
.text:000090D0                 ;org 90D0h
.text:000090D0 ; COMDAT (pick any)
.text:000090D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000090D0
.text:000090D0 ; =============== S U B R O U T I N E =======================================
.text:000090D0
.text:000090D0
.text:000090D0 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{8}' (void)
.text:000090D0                 public ?AddRef@CCopyCoder@NCompress@@W7AGKXZ
.text:000090D0 ?AddRef@CCopyCoder@NCompress@@W7AGKXZ proc near ; DATA XREF: .rdata:00005968o
.text:000090D0
.text:000090D0 arg_0           = dword ptr  4
.text:000090D0
.text:000090D0                 sub     [esp+arg_0], 8
.text:000090D5                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:000090D5 ?AddRef@CCopyCoder@NCompress@@W7AGKXZ endp
.text:000090D5
.text:000090D5 ; ---------------------------------------------------------------------------
.text:000090DA                 align 4
.text:000090DA _text           ends
.text:000090DA
.text:000090DC ; ===========================================================================
.text:000090DC
.text:000090DC ; Segment type: Pure code
.text:000090DC ; Segment permissions: Read/Execute
.text:000090DC _text           segment para public 'CODE' use32
.text:000090DC                 assume cs:_text
.text:000090DC                 ;org 90DCh
.text:000090DC ; COMDAT (pick any)
.text:000090DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000090DC
.text:000090DC ; =============== S U B R O U T I N E =======================================
.text:000090DC
.text:000090DC
.text:000090DC ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:000090DC                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:000090DC ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:000090DC                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressSetInStream'}o
.text:000090DC                                         ; .rdata:const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetInStream'}o
.text:000090DC
.text:000090DC arg_0           = dword ptr  4
.text:000090DC
.text:000090DC                 sub     [esp+arg_0], 8
.text:000090E1                 jmp     ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:000090E1 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:000090E1
.text:000090E1 ; ---------------------------------------------------------------------------
.text:000090E6                 align 4
.text:000090E6 _text           ends
.text:000090E6
.text:000090E8 ; ===========================================================================
.text:000090E8
.text:000090E8 ; Segment type: Pure code
.text:000090E8 ; Segment permissions: Read/Execute
.text:000090E8 _text           segment para public 'CODE' use32
.text:000090E8                 assume cs:_text
.text:000090E8                 ;org 90E8h
.text:000090E8 ; COMDAT (pick any)
.text:000090E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000090E8
.text:000090E8 ; =============== S U B R O U T I N E =======================================
.text:000090E8
.text:000090E8
.text:000090E8 ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:000090E8                 public ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:000090E8 ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:000090E8                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}o
.text:000090E8
.text:000090E8 arg_0           = dword ptr  4
.text:000090E8
.text:000090E8                 sub     [esp+arg_0], 4
.text:000090ED                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:000090ED ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:000090ED
.text:000090ED ; ---------------------------------------------------------------------------
.text:000090F2                 align 4
.text:000090F2 _text           ends
.text:000090F2
.text:000090F4 ; ===========================================================================
.text:000090F4
.text:000090F4 ; Segment type: Pure code
.text:000090F4 ; Segment permissions: Read/Execute
.text:000090F4 _text           segment para public 'CODE' use32
.text:000090F4                 assume cs:_text
.text:000090F4                 ;org 90F4h
.text:000090F4 ; COMDAT (pick any)
.text:000090F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000090F4
.text:000090F4 ; =============== S U B R O U T I N E =======================================
.text:000090F4
.text:000090F4
.text:000090F4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{12}' (void)
.text:000090F4                 public ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
.text:000090F4 ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ proc near
.text:000090F4                                         ; DATA XREF: .rdata:00005954o
.text:000090F4
.text:000090F4 arg_0           = dword ptr  4
.text:000090F4
.text:000090F4                 sub     [esp+arg_0], 0Ch
.text:000090F9                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:000090F9 ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ endp
.text:000090F9
.text:000090F9 ; ---------------------------------------------------------------------------
.text:000090FE                 align 10h
.text:000090FE _text           ends
.text:000090FE
.text:00009100 ; ===========================================================================
.text:00009100
.text:00009100 ; Segment type: Pure code
.text:00009100 ; Segment permissions: Read/Execute
.text:00009100 _text           segment para public 'CODE' use32
.text:00009100                 assume cs:_text
.text:00009100                 ;org 9100h
.text:00009100 ; COMDAT (pick any)
.text:00009100                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009100
.text:00009100 ; =============== S U B R O U T I N E =======================================
.text:00009100
.text:00009100
.text:00009100 ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:00009100                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.text:00009100 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:00009100                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressSetOutStreamSize'}o
.text:00009100                                         ; .rdata:const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetOutStreamSize'}o
.text:00009100
.text:00009100 arg_0           = dword ptr  4
.text:00009100
.text:00009100                 sub     [esp+arg_0], 0Ch
.text:00009105                 jmp     ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:00009105 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:00009105
.text:00009105 ; ---------------------------------------------------------------------------
.text:0000910A                 align 4
.text:0000910A _text           ends
.text:0000910A
.text:0000910C ; ===========================================================================
.text:0000910C
.text:0000910C ; Segment type: Pure code
.text:0000910C ; Segment permissions: Read/Execute
.text:0000910C _text           segment para public 'CODE' use32
.text:0000910C                 assume cs:_text
.text:0000910C                 ;org 910Ch
.text:0000910C ; COMDAT (pick any)
.text:0000910C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000910C
.text:0000910C ; =============== S U B R O U T I N E =======================================
.text:0000910C
.text:0000910C
.text:0000910C ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:0000910C                 public ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:0000910C ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:0000910C                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}o
.text:0000910C
.text:0000910C arg_0           = dword ptr  4
.text:0000910C
.text:0000910C                 sub     [esp+arg_0], 8
.text:00009111                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:00009111 ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00009111
.text:00009111 ; ---------------------------------------------------------------------------
.text:00009116                 align 4
.text:00009116 _text           ends
.text:00009116
.text:00009118 ; ===========================================================================
.text:00009118
.text:00009118 ; Segment type: Pure code
.text:00009118 ; Segment permissions: Read/Execute
.text:00009118 _text           segment para public 'CODE' use32
.text:00009118                 assume cs:_text
.text:00009118                 ;org 9118h
.text:00009118 ; COMDAT (pick any)
.text:00009118                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009118
.text:00009118 ; =============== S U B R O U T I N E =======================================
.text:00009118
.text:00009118
.text:00009118 ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{16}' (struct _GUID const &, void * *)
.text:00009118                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.text:00009118 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z proc near
.text:00009118                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ISequentialInStream'}o
.text:00009118                                         ; .rdata:const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ISequentialInStream'}o
.text:00009118
.text:00009118 arg_0           = dword ptr  4
.text:00009118
.text:00009118                 sub     [esp+arg_0], 10h
.text:0000911D                 jmp     ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:0000911D ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z endp
.text:0000911D
.text:0000911D ; ---------------------------------------------------------------------------
.text:00009122                 align 4
.text:00009122 _text           ends
.text:00009122
.text:00009124 ; ===========================================================================
.text:00009124
.text:00009124 ; Segment type: Pure code
.text:00009124 ; Segment permissions: Read/Execute
.text:00009124 _text           segment para public 'CODE' use32
.text:00009124                 assume cs:_text
.text:00009124                 ;org 9124h
.text:00009124 ; COMDAT (pick any)
.text:00009124                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009124
.text:00009124 ; =============== S U B R O U T I N E =======================================
.text:00009124
.text:00009124
.text:00009124 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{4}' (void)
.text:00009124                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ
.text:00009124 ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ proc near
.text:00009124                                         ; DATA XREF: .rdata:00006270o
.text:00009124                                         ; .rdata:000068C4o
.text:00009124
.text:00009124 arg_0           = dword ptr  4
.text:00009124
.text:00009124                 sub     [esp+arg_0], 4
.text:00009129                 jmp     ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.text:00009129 ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ endp
.text:00009129
.text:00009129 ; ---------------------------------------------------------------------------
.text:0000912E                 align 10h
.text:0000912E _text           ends
.text:0000912E
.text:00009130 ; ===========================================================================
.text:00009130
.text:00009130 ; Segment type: Pure code
.text:00009130 ; Segment permissions: Read/Execute
.text:00009130 _text           segment para public 'CODE' use32
.text:00009130                 assume cs:_text
.text:00009130                 ;org 9130h
.text:00009130 ; COMDAT (pick any)
.text:00009130                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00009130
.text:00009130 ; =============== S U B R O U T I N E =======================================
.text:00009130
.text:00009130
.text:00009130 ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:00009130                 public ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.text:00009130 ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:00009130                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}o
.text:00009130
.text:00009130 arg_0           = dword ptr  4
.text:00009130
.text:00009130                 sub     [esp+arg_0], 0Ch
.text:00009135                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:00009135 ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:00009135
.text:00009135 ; ---------------------------------------------------------------------------
.text:0000913A                 align 4
.text:0000913A _text           ends
.text:0000913A
.text:0000913C ; ===========================================================================
.text:0000913C
.text:0000913C ; Segment type: Pure code
.text:0000913C ; Segment permissions: Read/Execute
.text:0000913C _text           segment para public 'CODE' use32
.text:0000913C                 assume cs:_text
.text:0000913C                 ;org 913Ch
.text:0000913C ; COMDAT (pick any)
.text:0000913C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000913C
.text:0000913C ; =============== S U B R O U T I N E =======================================
.text:0000913C
.text:0000913C
.text:0000913C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{8}' (void)
.text:0000913C                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ
.text:0000913C ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ proc near
.text:0000913C                                         ; DATA XREF: .rdata:00006258o
.text:0000913C                                         ; .rdata:000068ACo
.text:0000913C
.text:0000913C arg_0           = dword ptr  4
.text:0000913C
.text:0000913C                 sub     [esp+arg_0], 8
.text:00009141                 jmp     ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.text:00009141 ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ endp
.text:00009141
.text:00009141 _text           ends
.text:00009141
UNDEF:00009150 ; ===========================================================================
UNDEF:00009150
UNDEF:00009150 ; Segment type: Externs
UNDEF:00009150 ; UNDEF
UNDEF:00009150                 extrn __RTC_Shutdown:near
UNDEF:00009150                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00009154                 extrn __RTC_InitBase:near
UNDEF:00009154                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00009158 ; unsigned char const * const k7z_PROPID_To_VARTYPE
UNDEF:00009158                 extrn ?k7z_PROPID_To_VARTYPE@@3QBEB:near
UNDEF:00009158                                         ; DATA XREF: NArchive::NCab::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+24r
UNDEF:00009158                                         ; NArchive::NCab::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+24r
UNDEF:0000915C ; __int32 __thiscall NWindows::NCOM::CPropVariant::Detach(NWindows::NCOM::CPropVariant *__hidden this, struct tagPROPVARIANT *)
UNDEF:0000915C                 extrn ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z:near
UNDEF:0000915C                                         ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+64Cp
UNDEF:0000915C                                         ; NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+346p
UNDEF:00009160 ; void __stdcall ConvertUInt32ToString(unsigned int, char *)
UNDEF:00009160                 extrn ?ConvertUInt32ToString@@YGXIPAD@Z:near
UNDEF:00009160                                         ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+5B7p
UNDEF:00009160                                         ; NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+5E2p ...
UNDEF:00009164 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(class UString const &)
UNDEF:00009164                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z:near
UNDEF:00009164                                         ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+52Bp
UNDEF:00009168 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
UNDEF:00009168                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:near
UNDEF:00009168                                         ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+398p
UNDEF:00009168                                         ; NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+478p ...
UNDEF:0000916C ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned int)
UNDEF:0000916C                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z:near
UNDEF:0000916C                                         ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+2D4p
UNDEF:0000916C                                         ; NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+3BDp ...
UNDEF:00009170 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(char const *)
UNDEF:00009170                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z:near
UNDEF:00009170                                         ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+233p
UNDEF:00009170                                         ; NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+631p ...
UNDEF:00009174 ; public: class AString & __thiscall AString::operator+=(char const *)
UNDEF:00009174                 extrn ??YAString@@QAEAAV0@PBD@Z:near
UNDEF:00009174                                         ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+214p
UNDEF:00009174                                         ; NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+5C9p ...
UNDEF:00009178 ; void __thiscall AString::Add_Space_if_NotEmpty(AString *__hidden this)
UNDEF:00009178                 extrn ?Add_Space_if_NotEmpty@AString@@QAEXXZ:near
UNDEF:00009178                                         ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1E7p
UNDEF:0000917C ; public: __thiscall AString::AString(void)
UNDEF:0000917C                 extrn ??0AString@@QAE@XZ:near
UNDEF:0000917C                                         ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1ACp
UNDEF:0000917C                                         ; NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+597p ...
UNDEF:00009180                 extrn ___security_cookie:near
UNDEF:00009180                                         ; DATA XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+2Dr
UNDEF:00009180                                         ; NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+2Dr ...
UNDEF:00009184                 extrn ___CxxFrameHandler3:near
UNDEF:00009184                                         ; CODE XREF: __ehhandler$?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z+23j
UNDEF:00009184                                         ; __ehhandler$?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z+23j ...
UNDEF:00009188                 extrn __RTC_CheckEsp:near
UNDEF:00009188                                         ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+6CCp
UNDEF:00009188                                         ; NArchive::NCab::SetMethodName(char *,uint,uint)+52p ...
UNDEF:0000918C ; __fastcall __security_check_cookie(x)
UNDEF:0000918C                 extrn @__security_check_cookie@4:near
UNDEF:0000918C                                         ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+6BFp
UNDEF:0000918C                                         ; NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+3B9p ...
UNDEF:00009190 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00009190                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00009190                                         ; CODE XREF: NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+6A5p
UNDEF:00009190                                         ; NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+39Fp ...
UNDEF:00009194 ; void __cdecl operator delete(void *)
UNDEF:00009194                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2+7p
UNDEF:00009194                                         ; __unwindfunclet$?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4+7p ...
UNDEF:00009198 ; void __thiscall AString::Grow_1(AString *__hidden this)
UNDEF:00009198                 extrn ?Grow_1@AString@@AAEXXZ:near
UNDEF:00009198                                         ; CODE XREF: AString::operator+=(char)+2Fp
UNDEF:0000919C ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:0000919C                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:0000919C                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:000091A0 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(int)
UNDEF:000091A0                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@H@Z:near
UNDEF:000091A0                                         ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+33Ap
UNDEF:000091A4 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(struct _FILETIME const &)
UNDEF:000091A4                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z:near
UNDEF:000091A4                                         ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+28Fp
UNDEF:000091A8 ; BOOL __stdcall LocalFileTimeToFileTime(const FILETIME *lpLocalFileTime, LPFILETIME lpFileTime)
UNDEF:000091A8                 extrn __imp__LocalFileTimeToFileTime@8:near
UNDEF:000091A8                                         ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+25Bp
UNDEF:000091A8                                         ; DATA XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+25Br
UNDEF:000091AC ; bool NWindows::NTime::DosTimeToFileTime(NWindows::NTime *__hidden this, unsigned int, struct _FILETIME *)
UNDEF:000091AC                 extrn ?DosTimeToFileTime@NTime@NWindows@@YG_NIAAU_FILETIME@@@Z:near
UNDEF:000091AC                                         ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+245p
UNDEF:000091B0 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(bool)
UNDEF:000091B0                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z:near
UNDEF:000091B0                                         ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1FAp
UNDEF:000091B4 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(wchar_t const *)
UNDEF:000091B4                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PB_W@Z:near
UNDEF:000091B4                                         ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1BCp
UNDEF:000091B8 ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:000091B8                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:000091B8                                         ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+167p
UNDEF:000091BC ; struct UString __stdcall __high MultiByteToUnicodeString(const struct AString *, unsigned int)
UNDEF:000091BC                 extrn ?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z:near
UNDEF:000091BC                                         ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+142p
UNDEF:000091BC                                         ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+6A0p
UNDEF:000091C0 ; bool __stdcall ConvertUTF8ToUnicode(const struct AString *, struct UString *)
UNDEF:000091C0                 extrn ?ConvertUTF8ToUnicode@@YG_NABVAString@@AAVUString@@@Z:near
UNDEF:000091C0                                         ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+12Ep
UNDEF:000091C4 ; public: __thiscall UString::UString(void)
UNDEF:000091C4                 extrn ??0UString@@QAE@XZ:near
UNDEF:000091C4                                         ; CODE XREF: NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+FEp
UNDEF:000091C8 ; public: __thiscall UString::UString(class UString const &)
UNDEF:000091C8                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:000091C8                                         ; CODE XREF: NArchive::NItemName::WinNameToOSName(UString const &)+19p
UNDEF:000091CC ; bool __thiscall NArchive::NCab::CMvDatabaseEx::Check(NArchive::NCab::CMvDatabaseEx *__hidden this)
UNDEF:000091CC                 extrn ?Check@CMvDatabaseEx@NCab@NArchive@@QAE_NXZ:near
UNDEF:000091CC                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+8D2p
UNDEF:000091D0 ; void __thiscall NArchive::NCab::CMvDatabaseEx::FillSortAndShrink(NArchive::NCab::CMvDatabaseEx *__hidden this)
UNDEF:000091D0                 extrn ?FillSortAndShrink@CMvDatabaseEx@NCab@NArchive@@QAEXXZ:near
UNDEF:000091D0                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+8C7p
UNDEF:000091D4 ; public: class UString & __thiscall UString::operator+=(class UString const &)
UNDEF:000091D4                 extrn ??YUString@@QAEAAV0@ABV0@@Z:near
UNDEF:000091D4                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+7E8p
UNDEF:000091D8 ; void __thiscall UString::AddAscii(UString *__hidden this, const char *)
UNDEF:000091D8                 extrn ?AddAscii@UString@@QAEXPBD@Z:near
UNDEF:000091D8                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+7D6p
UNDEF:000091DC ; void __thiscall UString::Add_LF(UString *__hidden this)
UNDEF:000091DC                 extrn ?Add_LF@UString@@QAEXXZ:near
UNDEF:000091DC                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+7C6p
UNDEF:000091E0 ; __int32 __thiscall NArchive::NCab::CInArchive::Open(NArchive::NCab::CInArchive *__hidden this, struct NArchive::NCab::CDatabaseEx *, const unsigned __int64 *)
UNDEF:000091E0                 extrn ?Open@CInArchive@NCab@NArchive@@QAEJAAUCDatabaseEx@23@PB_K@Z:near
UNDEF:000091E0                                         ; CODE XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+129p
UNDEF:000091E4                 extrn _IID_IArchiveOpenVolumeCallback:near
UNDEF:000091E4                                         ; DATA XREF: NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+9Ao
UNDEF:000091E8 ; _DWORD __thiscall CInBufferBase::CInBufferBase(CInBufferBase *__hidden this)
UNDEF:000091E8                 extrn ??0CInBufferBase@@QAE@XZ:near
UNDEF:000091E8                                         ; CODE XREF: NArchive::NCab::CInArchive::CInArchive(void)+11p
UNDEF:000091E8                                         ; CInBuffer::CInBuffer(void)+11p
UNDEF:000091EC ; __stdcall MyAlloc(x)
UNDEF:000091EC                 extrn _MyAlloc@4:near   ; CODE XREF: NArchive::NCab::CFolderOutStream::OpenFile(void)+1A5p
UNDEF:000091F0 ; __stdcall MyFree(x)
UNDEF:000091F0                 extrn _MyFree@4:near    ; CODE XREF: NArchive::NCab::CFolderOutStream::FreeTempBuf(void)+15p
UNDEF:000091F4 ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:000091F4                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:000091F4                                         ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+265p
UNDEF:000091F8 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:000091F8                 extrn _memcpy:near      ; CODE XREF: NArchive::NCab::CFolderOutStream::Write2(void const *,uint,uint *,bool)+14Ep
UNDEF:000091F8                                         ; CRecordVector<NArchive::NCab::CFolder>::CRecordVector<NArchive::NCab::CFolder>(CRecordVector<NArchive::NCab::CFolder> const &)+98p ...
UNDEF:000091FC ; __int32 __thiscall NArchive::NCab::CCabBlockInStream::PreRead(NArchive::NCab::CCabBlockInStream *__hidden this, struct ISequentialInStream *, unsigned int *, unsigned int *)
UNDEF:000091FC                 extrn ?PreRead@CCabBlockInStream@NCab@NArchive@@QAEJPAUISequentialInStream@@AAI1@Z:near
UNDEF:000091FC                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+15BBp
UNDEF:00009200 ; __int32 __thiscall NCompress::NQuantum::CDecoder::SetParams(NCompress::NQuantum::CDecoder *__hidden this, int)
UNDEF:00009200                 extrn ?SetParams@CDecoder@NQuantum@NCompress@@QAEJH@Z:near
UNDEF:00009200                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1145p
UNDEF:00009204 ; __int32 __thiscall NCompress::NLzx::CDecoder::SetParams(NCompress::NLzx::CDecoder *__hidden this, unsigned int)
UNDEF:00009204                 extrn ?SetParams@CDecoder@NLzx@NCompress@@QAEJI@Z:near
UNDEF:00009204                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1075p
UNDEF:00009208 ; _DWORD __thiscall NCompress::NLzx::CDecoder::CDecoder(NCompress::NLzx::CDecoder *__hidden this, bool)
UNDEF:00009208                 extrn ??0CDecoder@NLzx@NCompress@@QAE@_N@Z:near
UNDEF:00009208                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+101Fp
UNDEF:0000920C ; __int32 __thiscall CLocalProgress::SetCur(CLocalProgress *__hidden this)
UNDEF:0000920C                 extrn ?SetCur@CLocalProgress@@QAEJXZ:near
UNDEF:0000920C                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+D43p
UNDEF:0000920C                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+170Ep
UNDEF:00009210 ; bool __thiscall NArchive::NCab::CCabBlockInStream::Create(NArchive::NCab::CCabBlockInStream *__hidden this)
UNDEF:00009210                 extrn ?Create@CCabBlockInStream@NCab@NArchive@@QAE_NXZ:near
UNDEF:00009210                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+407p
UNDEF:00009214 ; void __thiscall CLocalProgress::Init(CLocalProgress *__hidden this, struct IProgress *, bool)
UNDEF:00009214                 extrn ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:near
UNDEF:00009214                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2ACp
UNDEF:00009218 ; public: __thiscall CLocalProgress::CLocalProgress(void)
UNDEF:00009218                 extrn ??0CLocalProgress@@QAE@XZ:near
UNDEF:00009218                                         ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+257p
UNDEF:0000921C ; void *__cdecl operator new(unsigned int)
UNDEF:0000921C                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+22Ap
UNDEF:0000921C                                         ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2B3p ...
UNDEF:00009220 ; const type_info::`vftable'
UNDEF:00009220                 extrn ??_7type_info@@6B@:near
UNDEF:00009220                                         ; DATA XREF: .data:NCompress::CCopyCoder `RTTI Type Descriptor'o
UNDEF:00009220                                         ; .data:ICompressCoder `RTTI Type Descriptor'o ...
UNDEF:00009224 ; public: virtual long __stdcall NCompress::CCopyCoder::Code(struct ISequentialInStream *, struct ISequentialOutStream *, unsigned __int64 const *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:00009224                 extrn ?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:near
UNDEF:00009224                                         ; DATA XREF: .rdata:0000599Co
UNDEF:00009228 ; public: virtual long __stdcall NCompress::CCopyCoder::SetInStream(struct ISequentialInStream *)
UNDEF:00009228                 extrn ?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z:near
UNDEF:00009228                                         ; DATA XREF: .rdata:00005984o
UNDEF:0000922C ; public: virtual long __stdcall NCompress::CCopyCoder::ReleaseInStream(void)
UNDEF:0000922C                 extrn ?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ:near
UNDEF:0000922C                                         ; DATA XREF: .rdata:00005988o
UNDEF:00009230 ; public: virtual long __stdcall NCompress::CCopyCoder::Read(void *, unsigned int, unsigned int *)
UNDEF:00009230                 extrn ?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z:near
UNDEF:00009230                                         ; DATA XREF: .rdata:00005970o
UNDEF:00009234 ; public: virtual long __stdcall NCompress::CCopyCoder::GetInStreamProcessedSize(unsigned __int64 *)
UNDEF:00009234                 extrn ?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z:near
UNDEF:00009234                                         ; DATA XREF: .rdata:0000595Co
UNDEF:00009238                 extrn _IID_ICompressGetInStreamProcessedSize:near
UNDEF:00009238                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_5E4Ao
UNDEF:00009238                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_6586o
UNDEF:0000923C                 extrn _IID_ISequentialInStream:near
UNDEF:0000923C                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_5E16o
UNDEF:0000923C                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_6625o
UNDEF:00009240                 extrn _IID_ICompressSetInStream:near
UNDEF:00009240                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_5DE2o
UNDEF:00009240                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_65BDo
UNDEF:00009244                 extrn _IID_ICompressCoder:near
UNDEF:00009244                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_5DC3o
UNDEF:00009248 ; const IID IID_IUnknown
UNDEF:00009248                 extrn _IID_IUnknown:near
UNDEF:00009248                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+24o
UNDEF:00009248                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+23o ...
UNDEF:0000924C ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:0000924C                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00009250                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:00009250                                         ; .rdata:00005FC4o ...
UNDEF:00009254 ; _DWORD __thiscall NCompress::CCopyCoder::~CCopyCoder(NCompress::CCopyCoder *__hidden this)
UNDEF:00009254                 extrn ??1CCopyCoder@NCompress@@QAE@XZ:near
UNDEF:00009254                                         ; CODE XREF: NCompress::CCopyCoder::`scalar deleting destructor'(uint)+11p
UNDEF:00009258 ; _DWORD __thiscall NCompress::NDeflate::NDecoder::CCoder::CCoder(NCompress::NDeflate::NDecoder::CCoder *__hidden this, bool, bool)
UNDEF:00009258                 extrn ??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z:near
UNDEF:00009258                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)+15p
UNDEF:0000925C ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::Code(struct ISequentialInStream *, struct ISequentialOutStream *, unsigned __int64 const *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:0000925C                 extrn ?Code@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:near
UNDEF:0000925C                                         ; DATA XREF: .rdata:00006288o
UNDEF:0000925C                                         ; .rdata:000068DCo
UNDEF:00009260 ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCOMCoder::`scalar deleting destructor'(unsigned int)
UNDEF:00009260                 extrn ??_GCCOMCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z_0:near
UNDEF:00009264 ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCOMCoder::`vector deleting destructor'(unsigned int)
UNDEF:00009264                 extrn ??_ECCOMCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z:near ; weak
UNDEF:00009264                                         ; DATA XREF: .rdata:0000628Co
UNDEF:00009268 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::CodeResume(struct ISequentialOutStream *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:00009268                 extrn ?CodeResume@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z:near
UNDEF:00009268                                         ; DATA XREF: .rdata:00006290o
UNDEF:00009268                                         ; .rdata:000068E4o
UNDEF:0000926C ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::GetInStreamProcessedSize(unsigned __int64 *)
UNDEF:0000926C                 extrn ?GetInStreamProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPA_K@Z:near
UNDEF:0000926C                                         ; DATA XREF: .rdata:00006274o
UNDEF:0000926C                                         ; .rdata:000068C8o
UNDEF:00009270 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::SetInStream(struct ISequentialInStream *)
UNDEF:00009270                 extrn ?SetInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@@Z:near
UNDEF:00009270                                         ; DATA XREF: .rdata:0000625Co
UNDEF:00009270                                         ; .rdata:000068B0o
UNDEF:00009274 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::ReleaseInStream(void)
UNDEF:00009274                 extrn ?ReleaseInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJXZ:near
UNDEF:00009274                                         ; DATA XREF: .rdata:00006260o
UNDEF:00009274                                         ; .rdata:000068B4o
UNDEF:00009278 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::SetOutStreamSize(unsigned __int64 const *)
UNDEF:00009278                 extrn ?SetOutStreamSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPB_K@Z:near
UNDEF:00009278                                         ; DATA XREF: .rdata:00006248o
UNDEF:00009278                                         ; .rdata:0000689Co
UNDEF:0000927C ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::Read(void *, unsigned int, unsigned int *)
UNDEF:0000927C                 extrn ?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z:near
UNDEF:0000927C                                         ; DATA XREF: .rdata:00006234o
UNDEF:0000927C                                         ; .rdata:00006888o
UNDEF:00009280                 extrn _IID_ICompressSetOutStreamSize:near
UNDEF:00009280                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_65F1o
UNDEF:00009284 ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(unsigned int)
UNDEF:00009284                 extrn ??_GCCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z_0:near
UNDEF:00009288 ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCoder::`vector deleting destructor'(unsigned int)
UNDEF:00009288                 extrn ??_ECCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z:near ; weak
UNDEF:00009288                                         ; DATA XREF: .rdata:000068E0o
UNDEF:0000928C ; void __thiscall COutBuffer::Free(COutBuffer *__hidden this)
UNDEF:0000928C                 extrn ?Free@COutBuffer@@QAEXXZ:near
UNDEF:0000928C                                         ; CODE XREF: COutBuffer::~COutBuffer(void)+11p
UNDEF:00009290 ; void __thiscall CInBuffer::Free(CInBuffer *__hidden this)
UNDEF:00009290                 extrn ?Free@CInBuffer@@QAEXXZ:near
UNDEF:00009290                                         ; CODE XREF: CInBuffer::~CInBuffer(void)+11p
UNDEF:00009294 ; public: virtual long __stdcall NCompress::NQuantum::CDecoder::Code(struct ISequentialInStream *, struct ISequentialOutStream *, unsigned __int64 const *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:00009294                 extrn ?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:near
UNDEF:00009294                                         ; DATA XREF: .rdata:00006B24o
UNDEF:00009298 ; public: virtual long __stdcall NCompress::NQuantum::CDecoder::SetOutStreamSize(unsigned __int64 const *)
UNDEF:00009298                 extrn ?SetOutStreamSize@CDecoder@NQuantum@NCompress@@UAGJPB_K@Z:near
UNDEF:00009298                                         ; DATA XREF: .rdata:00006B28o
UNDEF:0000929C ; public: virtual void * __thiscall NCompress::NQuantum::CDecoder::`scalar deleting destructor'(unsigned int)
UNDEF:0000929C                 extrn ??_GCDecoder@NQuantum@NCompress@@UAEPAXI@Z_0:near
UNDEF:000092A0 ; public: virtual void * __thiscall NCompress::NQuantum::CDecoder::`vector deleting destructor'(unsigned int)
UNDEF:000092A0                 extrn ??_ECDecoder@NQuantum@NCompress@@UAEPAXI@Z:near ; weak
UNDEF:000092A0                                         ; DATA XREF: .rdata:00006B2Co
UNDEF:000092A4 ; public: virtual long __stdcall NArchive::NCab::CCabBlockInStream::Read(void *, unsigned int, unsigned int *)
UNDEF:000092A4                 extrn ?Read@CCabBlockInStream@NCab@NArchive@@UAGJPAXIPAI@Z:near
UNDEF:000092A4                                         ; DATA XREF: .rdata:00006F6Co
UNDEF:000092A8 ; _DWORD __thiscall NArchive::NCab::CCabBlockInStream::~CCabBlockInStream(NArchive::NCab::CCabBlockInStream *__hidden this)
UNDEF:000092A8                 extrn ??1CCabBlockInStream@NCab@NArchive@@QAE@XZ:near
UNDEF:000092A8                                         ; CODE XREF: NArchive::NCab::CCabBlockInStream::`scalar deleting destructor'(uint)+11p
UNDEF:000092AC ; public: __thiscall AString::AString(class AString const &)
UNDEF:000092AC                 extrn ??0AString@@QAE@ABV0@@Z:near
UNDEF:000092AC                                         ; CODE XREF: NArchive::NCab::COtherArc::COtherArc(NArchive::NCab::COtherArc const &)+34p
UNDEF:000092AC                                         ; NArchive::NCab::COtherArc::COtherArc(NArchive::NCab::COtherArc const &)+4Dp ...
UNDEF:000092B0 ; void *__cdecl _memmove(void *Dst, const void *Src, size_t Size)
UNDEF:000092B0                 extrn __imp__memmove:near
UNDEF:000092B0                                         ; CODE XREF: CRecordVector<void *>::MoveItems(uint,uint)+36p
UNDEF:000092B0                                         ; DATA XREF: CRecordVector<void *>::MoveItems(uint,uint)+36r
UNDEF:000092B0
UNDEF:000092B0
UNDEF:000092B0                 end