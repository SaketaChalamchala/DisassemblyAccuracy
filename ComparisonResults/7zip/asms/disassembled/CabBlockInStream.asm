.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 4F693D09C881320745DC1E037D8969BD
.text:00000000 ; Input CRC32 : D09BC8D5
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\CabBlockInStream.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; bool __thiscall NArchive::NCab::CCabBlockInStream::Create(NArchive::NCab::CCabBlockInStream *__hidden this)
.text:00000000                 public ?Create@CCabBlockInStream@NCab@NArchive@@QAE_NXZ
.text:00000000 ?Create@CCabBlockInStream@NCab@NArchive@@QAE_NXZ proc near
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_4], ecx
.text:0000000E                 mov     eax, [ebp+var_4]
.text:00000011                 cmp     dword ptr [eax+8], 0
.text:00000015                 jnz     short loc_27
.text:00000017                 push    10000h
.text:0000001C                 call    _MyAlloc@4      ; MyAlloc(x)
.text:00000021                 mov     ecx, [ebp+var_4]
.text:00000024                 mov     [ecx+8], eax
.text:00000027
.text:00000027 loc_27:                                 ; CODE XREF: NArchive::NCab::CCabBlockInStream::Create(void)+15j
.text:00000027                 mov     edx, [ebp+var_4]
.text:0000002A                 xor     eax, eax
.text:0000002C                 cmp     dword ptr [edx+8], 0
.text:00000030                 setnz   al
.text:00000033                 add     esp, 4
.text:00000036                 cmp     ebp, esp
.text:00000038                 call    __RTC_CheckEsp
.text:0000003D                 mov     esp, ebp
.text:0000003F                 pop     ebp
.text:00000040                 retn
.text:00000040 ?Create@CCabBlockInStream@NCab@NArchive@@QAE_NXZ endp
.text:00000040
.text:00000040 ; ---------------------------------------------------------------------------
.text:00000041                 align 10h
.text:00000050
.text:00000050 ; =============== S U B R O U T I N E =======================================
.text:00000050
.text:00000050 ; Attributes: bp-based frame
.text:00000050
.text:00000050 ; _DWORD __thiscall NArchive::NCab::CCabBlockInStream::~CCabBlockInStream(NArchive::NCab::CCabBlockInStream *__hidden this)
.text:00000050                 public ??1CCabBlockInStream@NCab@NArchive@@QAE@XZ
.text:00000050 ??1CCabBlockInStream@NCab@NArchive@@QAE@XZ proc near
.text:00000050                                         ; CODE XREF: NArchive::NCab::CCabBlockInStream::`scalar deleting destructor'(uint)+11p
.text:00000050
.text:00000050 var_4           = dword ptr -4
.text:00000050
.text:00000050                 push    ebp
.text:00000051                 mov     ebp, esp
.text:00000053                 push    ecx
.text:00000054                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000005B                 mov     [ebp+var_4], ecx
.text:0000005E                 mov     eax, [ebp+var_4]
.text:00000061                 mov     dword ptr [eax], offset ??_7CCabBlockInStream@NCab@NArchive@@6B@ ; const NArchive::NCab::CCabBlockInStream::`vftable'
.text:00000067                 mov     ecx, [ebp+var_4]
.text:0000006A                 mov     edx, [ecx+8]
.text:0000006D                 push    edx
.text:0000006E                 call    _MyFree@4       ; MyFree(x)
.text:00000073                 add     esp, 4
.text:00000076                 cmp     ebp, esp
.text:00000078                 call    __RTC_CheckEsp
.text:0000007D                 mov     esp, ebp
.text:0000007F                 pop     ebp
.text:00000080                 retn
.text:00000080 ??1CCabBlockInStream@NCab@NArchive@@QAE@XZ endp
.text:00000080
.text:00000080 ; ---------------------------------------------------------------------------
.text:00000081                 align 10h
.text:00000090
.text:00000090 ; =============== S U B R O U T I N E =======================================
.text:00000090
.text:00000090 ; Attributes: bp-based frame
.text:00000090
.text:00000090 ; __int32 __thiscall NArchive::NCab::CCabBlockInStream::PreRead(NArchive::NCab::CCabBlockInStream *this, struct ISequentialInStream *, unsigned int *, unsigned int *)
.text:00000090                 public ?PreRead@CCabBlockInStream@NCab@NArchive@@QAEJPAUISequentialInStream@@AAI1@Z
.text:00000090 ?PreRead@CCabBlockInStream@NCab@NArchive@@QAEJPAUISequentialInStream@@AAI1@Z proc near
.text:00000090
.text:00000090 var_128         = dword ptr -128h
.text:00000090 var_124         = dword ptr -124h
.text:00000090 var_11C         = dword ptr -11Ch
.text:00000090 var_118         = word ptr -118h
.text:00000090 var_116         = word ptr -116h
.text:00000090 var_10          = dword ptr -10h
.text:00000090 var_C           = dword ptr -0Ch
.text:00000090 var_8           = dword ptr -8
.text:00000090 var_4           = dword ptr -4
.text:00000090 arg_0           = dword ptr  8
.text:00000090 arg_4           = dword ptr  0Ch
.text:00000090 arg_8           = dword ptr  10h
.text:00000090
.text:00000090                 push    ebp
.text:00000091                 mov     ebp, esp
.text:00000093                 sub     esp, 128h
.text:00000099                 push    esi
.text:0000009A                 push    edi
.text:0000009B                 push    ecx
.text:0000009C                 lea     edi, [ebp+var_128]
.text:000000A2                 mov     ecx, 4Ah ; 'J'
.text:000000A7                 mov     eax, 0CCCCCCCCh
.text:000000AC                 rep stosd
.text:000000AE                 pop     ecx
.text:000000AF                 mov     eax, dword ptr ds:___security_cookie
.text:000000B4                 xor     eax, ebp
.text:000000B6                 mov     [ebp+var_4], eax
.text:000000B9                 mov     [ebp+var_8], ecx
.text:000000BC                 mov     [ebp+var_C], 8
.text:000000C3                 mov     [ebp+var_10], 100h
.text:000000CA                 mov     eax, [ebp+var_8]
.text:000000CD                 mov     ecx, [eax+14h]
.text:000000D0                 add     ecx, 8
.text:000000D3                 push    ecx             ; unsigned int
.text:000000D4                 lea     edx, [ebp+var_11C]
.text:000000DA                 push    edx             ; void *
.text:000000DB                 mov     eax, [ebp+arg_0]
.text:000000DE                 push    eax             ; struct ISequentialInStream *
.text:000000DF                 call    ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE(ISequentialInStream *,void *,uint)
.text:000000E4                 mov     [ebp+var_124], eax
.text:000000EA                 cmp     [ebp+var_124], 0
.text:000000F1                 jz      short loc_FE
.text:000000F3                 mov     eax, [ebp+var_124]
.text:000000F9                 jmp     loc_223
.text:000000FE ; ---------------------------------------------------------------------------
.text:000000FE
.text:000000FE loc_FE:                                 ; CODE XREF: NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+61j
.text:000000FE                 movzx   ecx, [ebp+var_118]
.text:00000105                 mov     edx, [ebp+arg_4]
.text:00000108                 mov     [edx], ecx
.text:0000010A                 movzx   eax, [ebp+var_116]
.text:00000111                 mov     ecx, [ebp+arg_8]
.text:00000114                 mov     [ecx], eax
.text:00000116                 mov     edx, [ebp+var_8]
.text:00000119                 mov     eax, 10000h
.text:0000011E                 sub     eax, [edx+0Ch]
.text:00000121                 mov     ecx, [ebp+arg_4]
.text:00000124                 cmp     [ecx], eax
.text:00000126                 jbe     short loc_132
.text:00000128                 mov     eax, 1
.text:0000012D                 jmp     loc_223
.text:00000132 ; ---------------------------------------------------------------------------
.text:00000132
.text:00000132 loc_132:                                ; CODE XREF: NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+96j
.text:00000132                 mov     edx, [ebp+arg_4]
.text:00000135                 mov     eax, [edx]
.text:00000137                 push    eax             ; unsigned int
.text:00000138                 mov     ecx, [ebp+var_8]
.text:0000013B                 mov     edx, [ecx+8]
.text:0000013E                 mov     eax, [ebp+var_8]
.text:00000141                 add     edx, [eax+0Ch]
.text:00000144                 push    edx             ; void *
.text:00000145                 mov     ecx, [ebp+arg_0]
.text:00000148                 push    ecx             ; struct ISequentialInStream *
.text:00000149                 call    ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE(ISequentialInStream *,void *,uint)
.text:0000014E                 mov     [ebp+var_128], eax
.text:00000154                 cmp     [ebp+var_128], 0
.text:0000015B                 jz      short loc_168
.text:0000015D                 mov     eax, [ebp+var_128]
.text:00000163                 jmp     loc_223
.text:00000168 ; ---------------------------------------------------------------------------
.text:00000168
.text:00000168 loc_168:                                ; CODE XREF: NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+CBj
.text:00000168                 mov     edx, [ebp+var_8]
.text:0000016B                 movzx   eax, byte ptr [edx+18h]
.text:0000016F                 test    eax, eax
.text:00000171                 jz      short loc_1CC
.text:00000173                 mov     ecx, [ebp+var_8]
.text:00000176                 cmp     dword ptr [ecx+0Ch], 0
.text:0000017A                 jnz     short loc_1B2
.text:0000017C                 mov     edx, [ebp+arg_4]
.text:0000017F                 cmp     dword ptr [edx], 2
.text:00000182                 jb      short loc_1A1
.text:00000184                 mov     eax, [ebp+var_8]
.text:00000187                 mov     ecx, [eax+8]
.text:0000018A                 movzx   edx, byte ptr [ecx]
.text:0000018D                 cmp     edx, 43h ; 'C'
.text:00000190                 jnz     short loc_1A1
.text:00000192                 mov     eax, [ebp+var_8]
.text:00000195                 mov     ecx, [eax+8]
.text:00000198                 movzx   edx, byte ptr [ecx+1]
.text:0000019C                 cmp     edx, 4Bh ; 'K'
.text:0000019F                 jz      short loc_1A8
.text:000001A1
.text:000001A1 loc_1A1:                                ; CODE XREF: NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+F2j
.text:000001A1                                         ; NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+100j
.text:000001A1                 mov     eax, 1
.text:000001A6                 jmp     short loc_223
.text:000001A8 ; ---------------------------------------------------------------------------
.text:000001A8
.text:000001A8 loc_1A8:                                ; CODE XREF: NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+10Fj
.text:000001A8                 mov     eax, [ebp+var_8]
.text:000001AB                 mov     dword ptr [eax+10h], 2
.text:000001B2
.text:000001B2 loc_1B2:                                ; CODE XREF: NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+EAj
.text:000001B2                 mov     ecx, [ebp+var_8]
.text:000001B5                 mov     edx, [ecx+0Ch]
.text:000001B8                 mov     eax, [ebp+arg_4]
.text:000001BB                 add     edx, [eax]
.text:000001BD                 cmp     edx, 800Ch
.text:000001C3                 jbe     short loc_1CC
.text:000001C5                 mov     eax, 1
.text:000001CA                 jmp     short loc_223
.text:000001CC ; ---------------------------------------------------------------------------
.text:000001CC
.text:000001CC loc_1CC:                                ; CODE XREF: NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+E1j
.text:000001CC                                         ; NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+133j
.text:000001CC                 cmp     [ebp+var_11C], 0
.text:000001D3                 jz      short loc_210
.text:000001D5                 mov     ecx, [ebp+var_8]
.text:000001D8                 mov     edx, [ecx+14h]
.text:000001DB                 add     edx, 8
.text:000001DE                 push    edx
.text:000001DF                 lea     eax, [ebp+var_11C]
.text:000001E5                 push    eax
.text:000001E6                 call    ?CheckSum@NCab@NArchive@@YGIPBEI@Z ; NArchive::NCab::CheckSum(uchar const *,uint)
.text:000001EB                 mov     esi, eax
.text:000001ED                 mov     ecx, [ebp+arg_4]
.text:000001F0                 mov     edx, [ecx]
.text:000001F2                 push    edx
.text:000001F3                 mov     eax, [ebp+var_8]
.text:000001F6                 mov     ecx, [eax+8]
.text:000001F9                 mov     edx, [ebp+var_8]
.text:000001FC                 add     ecx, [edx+0Ch]
.text:000001FF                 push    ecx
.text:00000200                 call    ?CheckSum@NCab@NArchive@@YGIPBEI@Z ; NArchive::NCab::CheckSum(uchar const *,uint)
.text:00000205                 cmp     esi, eax
.text:00000207                 jz      short loc_210
.text:00000209                 mov     eax, 1
.text:0000020E                 jmp     short loc_223
.text:00000210 ; ---------------------------------------------------------------------------
.text:00000210
.text:00000210 loc_210:                                ; CODE XREF: NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+143j
.text:00000210                                         ; NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+177j
.text:00000210                 mov     eax, [ebp+var_8]
.text:00000213                 mov     ecx, [eax+0Ch]
.text:00000216                 mov     edx, [ebp+arg_4]
.text:00000219                 add     ecx, [edx]
.text:0000021B                 mov     eax, [ebp+var_8]
.text:0000021E                 mov     [eax+0Ch], ecx
.text:00000221                 xor     eax, eax
.text:00000223
.text:00000223 loc_223:                                ; CODE XREF: NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+69j
.text:00000223                                         ; NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+9Dj ...
.text:00000223                 push    edx
.text:00000224                 mov     ecx, ebp
.text:00000226                 push    eax
.text:00000227                 lea     edx, $LN15
.text:0000022D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000232                 pop     eax
.text:00000233                 pop     edx
.text:00000234                 pop     edi
.text:00000235                 pop     esi
.text:00000236                 mov     ecx, [ebp+var_4]
.text:00000239                 xor     ecx, ebp
.text:0000023B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000240                 add     esp, 128h
.text:00000246                 cmp     ebp, esp
.text:00000248                 call    __RTC_CheckEsp
.text:0000024D                 mov     esp, ebp
.text:0000024F                 pop     ebp
.text:00000250                 retn    0Ch
.text:00000250 ?PreRead@CCabBlockInStream@NCab@NArchive@@QAEJPAUISequentialInStream@@AAI1@Z endp
.text:00000250
.text:00000250 ; ---------------------------------------------------------------------------
.text:00000253                 align 4
.text:00000254 $LN15           dd 1                    ; DATA XREF: NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+197o
.text:00000258                 dd offset $LN14
.text:0000025C $LN14           dd 0FFFFFEE4h, 108h     ; DATA XREF: .text:00000258o
.text:00000264                 dd offset $LN13         ; "header"
.text:00000268 $LN13           db 'header',0           ; DATA XREF: .text:00000264o
.text:0000026F                 align 10h
.text:00000270
.text:00000270 ; =============== S U B R O U T I N E =======================================
.text:00000270
.text:00000270 ; Attributes: bp-based frame
.text:00000270
.text:00000270 ; unsigned int __stdcall NArchive::NCab::CheckSum(unsigned char const *, unsigned int)
.text:00000270 ?CheckSum@NCab@NArchive@@YGIPBEI@Z proc near
.text:00000270                                         ; CODE XREF: NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+156p
.text:00000270                                         ; NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+170p
.text:00000270
.text:00000270 var_8           = dword ptr -8
.text:00000270 var_4           = dword ptr -4
.text:00000270 arg_0           = dword ptr  8
.text:00000270 arg_4           = dword ptr  0Ch
.text:00000270
.text:00000270                 push    ebp
.text:00000271                 mov     ebp, esp
.text:00000273                 sub     esp, 8
.text:00000276                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000027D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000284                 mov     [ebp+var_4], 0
.text:0000028B                 mov     eax, [ebp+arg_4]
.text:0000028E                 shr     eax, 2
.text:00000291                 mov     [ebp+var_8], eax
.text:00000294                 jmp     short loc_29F
.text:00000296 ; ---------------------------------------------------------------------------
.text:00000296
.text:00000296 loc_296:                                ; CODE XREF: NArchive::NCab::CheckSum(uchar const *,uint)+49j
.text:00000296                 mov     ecx, [ebp+var_8]
.text:00000299                 sub     ecx, 1
.text:0000029C                 mov     [ebp+var_8], ecx
.text:0000029F
.text:0000029F loc_29F:                                ; CODE XREF: NArchive::NCab::CheckSum(uchar const *,uint)+24j
.text:0000029F                 cmp     [ebp+var_8], 0
.text:000002A3                 jz      short loc_2BB
.text:000002A5                 mov     edx, [ebp+arg_0]
.text:000002A8                 mov     eax, [ebp+var_4]
.text:000002AB                 xor     eax, [edx]
.text:000002AD                 mov     [ebp+var_4], eax
.text:000002B0                 mov     ecx, [ebp+arg_0]
.text:000002B3                 add     ecx, 4
.text:000002B6                 mov     [ebp+arg_0], ecx
.text:000002B9                 jmp     short loc_296
.text:000002BB ; ---------------------------------------------------------------------------
.text:000002BB
.text:000002BB loc_2BB:                                ; CODE XREF: NArchive::NCab::CheckSum(uchar const *,uint)+33j
.text:000002BB                 mov     edx, [ebp+arg_4]
.text:000002BE                 and     edx, 3
.text:000002C1                 mov     [ebp+arg_4], edx
.text:000002C4                 cmp     [ebp+arg_4], 2
.text:000002C8                 jbe     short loc_2E2
.text:000002CA                 mov     eax, [ebp+arg_0]
.text:000002CD                 movzx   ecx, byte ptr [eax]
.text:000002D0                 shl     ecx, 10h
.text:000002D3                 xor     ecx, [ebp+var_4]
.text:000002D6                 mov     [ebp+var_4], ecx
.text:000002D9                 mov     edx, [ebp+arg_0]
.text:000002DC                 add     edx, 1
.text:000002DF                 mov     [ebp+arg_0], edx
.text:000002E2
.text:000002E2 loc_2E2:                                ; CODE XREF: NArchive::NCab::CheckSum(uchar const *,uint)+58j
.text:000002E2                 cmp     [ebp+arg_4], 1
.text:000002E6                 jbe     short loc_300
.text:000002E8                 mov     eax, [ebp+arg_0]
.text:000002EB                 movzx   ecx, byte ptr [eax]
.text:000002EE                 shl     ecx, 8
.text:000002F1                 xor     ecx, [ebp+var_4]
.text:000002F4                 mov     [ebp+var_4], ecx
.text:000002F7                 mov     edx, [ebp+arg_0]
.text:000002FA                 add     edx, 1
.text:000002FD                 mov     [ebp+arg_0], edx
.text:00000300
.text:00000300 loc_300:                                ; CODE XREF: NArchive::NCab::CheckSum(uchar const *,uint)+76j
.text:00000300                 cmp     [ebp+arg_4], 0
.text:00000304                 jbe     short loc_31B
.text:00000306                 mov     eax, [ebp+arg_0]
.text:00000309                 movzx   ecx, byte ptr [eax]
.text:0000030C                 xor     ecx, [ebp+var_4]
.text:0000030F                 mov     [ebp+var_4], ecx
.text:00000312                 mov     edx, [ebp+arg_0]
.text:00000315                 add     edx, 1
.text:00000318                 mov     [ebp+arg_0], edx
.text:0000031B
.text:0000031B loc_31B:                                ; CODE XREF: NArchive::NCab::CheckSum(uchar const *,uint)+94j
.text:0000031B                 mov     eax, [ebp+var_4]
.text:0000031E                 mov     esp, ebp
.text:00000320                 pop     ebp
.text:00000321                 retn    8
.text:00000321 ?CheckSum@NCab@NArchive@@YGIPBEI@Z endp
.text:00000321
.text:00000321 ; ---------------------------------------------------------------------------
.text:00000324                 align 10h
.text:00000330
.text:00000330 ; =============== S U B R O U T I N E =======================================
.text:00000330
.text:00000330 ; Attributes: bp-based frame
.text:00000330
.text:00000330 ; __int32 __stdcall NArchive::NCab::CCabBlockInStream::Read(NArchive::NCab::CCabBlockInStream *this, void *Dst, size_t Size, unsigned int *)
.text:00000330                 public ?Read@CCabBlockInStream@NCab@NArchive@@UAGJPAXIPAI@Z
.text:00000330 ?Read@CCabBlockInStream@NCab@NArchive@@UAGJPAXIPAI@Z proc near
.text:00000330                                         ; DATA XREF: .rdata:000003C4o
.text:00000330
.text:00000330 var_4           = dword ptr -4
.text:00000330 this            = dword ptr  8
.text:00000330 Dst             = dword ptr  0Ch
.text:00000330 Size            = dword ptr  10h
.text:00000330 arg_C           = dword ptr  14h
.text:00000330
.text:00000330                 push    ebp
.text:00000331                 mov     ebp, esp
.text:00000333                 push    ecx
.text:00000334                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000033B                 cmp     [ebp+Size], 0
.text:0000033F                 jz      short loc_38A
.text:00000341                 mov     eax, [ebp+this]
.text:00000344                 mov     ecx, [ebp+this]
.text:00000347                 mov     edx, [eax+0Ch]
.text:0000034A                 sub     edx, [ecx+10h]
.text:0000034D                 mov     [ebp+var_4], edx
.text:00000350                 mov     eax, [ebp+Size]
.text:00000353                 cmp     eax, [ebp+var_4]
.text:00000356                 jbe     short loc_35E
.text:00000358                 mov     ecx, [ebp+var_4]
.text:0000035B                 mov     [ebp+Size], ecx
.text:0000035E
.text:0000035E loc_35E:                                ; CODE XREF: NArchive::NCab::CCabBlockInStream::Read(void *,uint,uint *)+26j
.text:0000035E                 mov     edx, [ebp+Size]
.text:00000361                 push    edx             ; Size
.text:00000362                 mov     eax, [ebp+this]
.text:00000365                 mov     ecx, [eax+8]
.text:00000368                 mov     edx, [ebp+this]
.text:0000036B                 add     ecx, [edx+10h]
.text:0000036E                 push    ecx             ; Src
.text:0000036F                 mov     eax, [ebp+Dst]
.text:00000372                 push    eax             ; Dst
.text:00000373                 call    _memcpy
.text:00000378                 add     esp, 0Ch
.text:0000037B                 mov     ecx, [ebp+this]
.text:0000037E                 mov     edx, [ecx+10h]
.text:00000381                 add     edx, [ebp+Size]
.text:00000384                 mov     eax, [ebp+this]
.text:00000387                 mov     [eax+10h], edx
.text:0000038A
.text:0000038A loc_38A:                                ; CODE XREF: NArchive::NCab::CCabBlockInStream::Read(void *,uint,uint *)+Fj
.text:0000038A                 cmp     [ebp+arg_C], 0
.text:0000038E                 jz      short loc_398
.text:00000390                 mov     ecx, [ebp+arg_C]
.text:00000393                 mov     edx, [ebp+Size]
.text:00000396                 mov     [ecx], edx
.text:00000398
.text:00000398 loc_398:                                ; CODE XREF: NArchive::NCab::CCabBlockInStream::Read(void *,uint,uint *)+5Ej
.text:00000398                 xor     eax, eax
.text:0000039A                 add     esp, 4
.text:0000039D                 cmp     ebp, esp
.text:0000039F                 call    __RTC_CheckEsp
.text:000003A4                 mov     esp, ebp
.text:000003A6                 pop     ebp
.text:000003A7                 retn    10h
.text:000003A7 ?Read@CCabBlockInStream@NCab@NArchive@@UAGJPAXIPAI@Z endp
.text:000003A7
.text:000003A7 ; ---------------------------------------------------------------------------
.text:000003AA                 align 4
.text:000003AA _text           ends
.text:000003AA
.rtc$TMZ:000003AC ; ===========================================================================
.rtc$TMZ:000003AC
.rtc$TMZ:000003AC ; Segment type: Pure data
.rtc$TMZ:000003AC ; Segment permissions: Read
.rtc$TMZ:000003AC _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000003AC                 assume cs:_rtc$TMZ
.rtc$TMZ:000003AC                 ;org 3ACh
.rtc$TMZ:000003AC ; COMDAT (pick any)
.rtc$TMZ:000003AC __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000003AC _rtc$TMZ        ends
.rtc$TMZ:000003AC
.rtc$IMZ:000003B0 ; ===========================================================================
.rtc$IMZ:000003B0
.rtc$IMZ:000003B0 ; Segment type: Pure data
.rtc$IMZ:000003B0 ; Segment permissions: Read
.rtc$IMZ:000003B0 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000003B0                 assume cs:_rtc$IMZ
.rtc$IMZ:000003B0                 ;org 3B0h
.rtc$IMZ:000003B0 ; COMDAT (pick any)
.rtc$IMZ:000003B0 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000003B0 _rtc$IMZ        ends
.rtc$IMZ:000003B0
.rdata:000003B4 ; ===========================================================================
.rdata:000003B4
.rdata:000003B4 ; Segment type: Pure data
.rdata:000003B4 ; Segment permissions: Read
.rdata:000003B4 _rdata          segment dword public 'DATA' use32
.rdata:000003B4                 assume cs:_rdata
.rdata:000003B4                 ;org 3B4h
.rdata:000003B4 ; COMDAT (pick largest)
.rdata:000003B4                 dd offset ??_R4CCabBlockInStream@NCab@NArchive@@6B@ ; const NArchive::NCab::CCabBlockInStream::`RTTI Complete Object Locator'
.rdata:000003B8                 public ??_7CCabBlockInStream@NCab@NArchive@@6B@
.rdata:000003B8 ; const NArchive::NCab::CCabBlockInStream::`vftable'
.rdata:000003B8 ??_7CCabBlockInStream@NCab@NArchive@@6B@ dd offset ?QueryInterface@CCabBlockInStream@NCab@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:000003B8                                         ; DATA XREF: NArchive::NCab::CCabBlockInStream::~CCabBlockInStream(void)+11o
.rdata:000003B8                                         ; NArchive::NCab::CCabBlockInStream::QueryInterface(_GUID const &,void * *)
.rdata:000003BC                 dd offset ?AddRef@CCabBlockInStream@NCab@NArchive@@UAGKXZ ; NArchive::NCab::CCabBlockInStream::AddRef(void)
.rdata:000003C0                 dd offset ?Release@CCabBlockInStream@NCab@NArchive@@UAGKXZ ; NArchive::NCab::CCabBlockInStream::Release(void)
.rdata:000003C4                 dd offset ?Read@CCabBlockInStream@NCab@NArchive@@UAGJPAXIPAI@Z ; NArchive::NCab::CCabBlockInStream::Read(void *,uint,uint *)
.rdata:000003C4 _rdata          ends
.rdata:000003C4
.rdata$r:000003C8 ; ===========================================================================
.rdata$r:000003C8
.rdata$r:000003C8 ; Segment type: Pure data
.rdata$r:000003C8 ; Segment permissions: Read
.rdata$r:000003C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003C8                 assume cs:_rdata$r
.rdata$r:000003C8                 ;org 3C8h
.rdata$r:000003C8 ; COMDAT (pick any)
.rdata$r:000003C8                 public ??_R4CCabBlockInStream@NCab@NArchive@@6B@
.rdata$r:000003C8 ; const NArchive::NCab::CCabBlockInStream::`RTTI Complete Object Locator'
.rdata$r:000003C8 ??_R4CCabBlockInStream@NCab@NArchive@@6B@ db    0
.rdata$r:000003C8                                         ; DATA XREF: .rdata:000003B4o
.rdata$r:000003C9                 db    0
.rdata$r:000003CA                 db    0
.rdata$r:000003CB                 db    0
.rdata$r:000003CC                 db    0
.rdata$r:000003CD                 db    0
.rdata$r:000003CE                 db    0
.rdata$r:000003CF                 db    0
.rdata$r:000003D0                 db    0
.rdata$r:000003D1                 db    0
.rdata$r:000003D2                 db    0
.rdata$r:000003D3                 db    0
.rdata$r:000003D4                 dd offset ??_R0?AVCCabBlockInStream@NCab@NArchive@@@8 ; NArchive::NCab::CCabBlockInStream `RTTI Type Descriptor'
.rdata$r:000003D8                 dd offset ??_R3CCabBlockInStream@NCab@NArchive@@8 ; NArchive::NCab::CCabBlockInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003D8 _rdata$r        ends
.rdata$r:000003D8
.data:000003DC ; ===========================================================================
.data:000003DC
.data:000003DC ; Segment type: Pure data
.data:000003DC ; Segment permissions: Read/Write
.data:000003DC _data           segment dword public 'DATA' use32
.data:000003DC                 assume cs:_data
.data:000003DC                 ;org 3DCh
.data:000003DC ; COMDAT (pick any)
.data:000003DC                 public ??_R0?AVCCabBlockInStream@NCab@NArchive@@@8
.data:000003DC ; class NArchive::NCab::CCabBlockInStream `RTTI Type Descriptor'
.data:000003DC ??_R0?AVCCabBlockInStream@NCab@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:000003DC                                         ; DATA XREF: .rdata$r:000003D4o
.data:000003DC                                         ; .rdata$r:NArchive::NCab::CCabBlockInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000003DC                                         ; const type_info::`vftable'
.data:000003E0                 db    0
.data:000003E1                 db    0
.data:000003E2                 db    0
.data:000003E3                 db    0
.data:000003E4                 db  2Eh ; .
.data:000003E5                 db  3Fh ; ?
.data:000003E6                 db  41h ; A
.data:000003E7                 db  56h ; V
.data:000003E8                 db  43h ; C
.data:000003E9                 db  43h ; C
.data:000003EA                 db  61h ; a
.data:000003EB                 db  62h ; b
.data:000003EC                 db  42h ; B
.data:000003ED                 db  6Ch ; l
.data:000003EE                 db  6Fh ; o
.data:000003EF                 db  63h ; c
.data:000003F0                 db  6Bh ; k
.data:000003F1                 db  49h ; I
.data:000003F2                 db  6Eh ; n
.data:000003F3                 db  53h ; S
.data:000003F4                 db  74h ; t
.data:000003F5                 db  72h ; r
.data:000003F6                 db  65h ; e
.data:000003F7                 db  61h ; a
.data:000003F8                 db  6Dh ; m
.data:000003F9                 db  40h ; @
.data:000003FA                 db  4Eh ; N
.data:000003FB                 db  43h ; C
.data:000003FC                 db  61h ; a
.data:000003FD                 db  62h ; b
.data:000003FE                 db  40h ; @
.data:000003FF                 db  4Eh ; N
.data:00000400                 db  41h ; A
.data:00000401                 db  72h ; r
.data:00000402                 db  63h ; c
.data:00000403                 db  68h ; h
.data:00000404                 db  69h ; i
.data:00000405                 db  76h ; v
.data:00000406                 db  65h ; e
.data:00000407                 db  40h ; @
.data:00000408                 db  40h ; @
.data:00000409                 db    0
.data:0000040A                 align 4
.data:0000040A _data           ends
.data:0000040A
.rdata$r:0000040C ; ===========================================================================
.rdata$r:0000040C
.rdata$r:0000040C ; Segment type: Pure data
.rdata$r:0000040C ; Segment permissions: Read
.rdata$r:0000040C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000040C                 assume cs:_rdata$r
.rdata$r:0000040C                 ;org 40Ch
.rdata$r:0000040C ; COMDAT (pick any)
.rdata$r:0000040C                 public ??_R3CCabBlockInStream@NCab@NArchive@@8
.rdata$r:0000040C ; NArchive::NCab::CCabBlockInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000040C ??_R3CCabBlockInStream@NCab@NArchive@@8 db    0
.rdata$r:0000040C                                         ; DATA XREF: .rdata$r:000003D8o
.rdata$r:0000040C                                         ; .rdata$r:00000448o
.rdata$r:0000040D                 db    0
.rdata$r:0000040E                 db    0
.rdata$r:0000040F                 db    0
.rdata$r:00000410                 db    1
.rdata$r:00000411                 db    0
.rdata$r:00000412                 db    0
.rdata$r:00000413                 db    0
.rdata$r:00000414                 db    4
.rdata$r:00000415                 db    0
.rdata$r:00000416                 db    0
.rdata$r:00000417                 db    0
.rdata$r:00000418                 dd offset ??_R2CCabBlockInStream@NCab@NArchive@@8 ; NArchive::NCab::CCabBlockInStream::`RTTI Base Class Array'
.rdata$r:00000418 _rdata$r        ends
.rdata$r:00000418
.rdata$r:0000041C ; ===========================================================================
.rdata$r:0000041C
.rdata$r:0000041C ; Segment type: Pure data
.rdata$r:0000041C ; Segment permissions: Read
.rdata$r:0000041C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000041C                 assume cs:_rdata$r
.rdata$r:0000041C                 ;org 41Ch
.rdata$r:0000041C ; COMDAT (pick any)
.rdata$r:0000041C                 public ??_R2CCabBlockInStream@NCab@NArchive@@8
.rdata$r:0000041C ; NArchive::NCab::CCabBlockInStream::`RTTI Base Class Array'
.rdata$r:0000041C ??_R2CCabBlockInStream@NCab@NArchive@@8 dd offset ??_R1A@?0A@EA@CCabBlockInStream@NCab@NArchive@@8
.rdata$r:0000041C                                         ; DATA XREF: .rdata$r:00000418o
.rdata$r:0000041C                                         ; NArchive::NCab::CCabBlockInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000420                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000424                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000428                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000042C                 db    0
.rdata$r:0000042D                 align 10h
.rdata$r:0000042D _rdata$r        ends
.rdata$r:0000042D
.rdata$r:00000430 ; ===========================================================================
.rdata$r:00000430
.rdata$r:00000430 ; Segment type: Pure data
.rdata$r:00000430 ; Segment permissions: Read
.rdata$r:00000430 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000430                 assume cs:_rdata$r
.rdata$r:00000430                 ;org 430h
.rdata$r:00000430 ; COMDAT (pick any)
.rdata$r:00000430                 public ??_R1A@?0A@EA@CCabBlockInStream@NCab@NArchive@@8
.rdata$r:00000430 ; NArchive::NCab::CCabBlockInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000430 ??_R1A@?0A@EA@CCabBlockInStream@NCab@NArchive@@8 dd offset ??_R0?AVCCabBlockInStream@NCab@NArchive@@@8
.rdata$r:00000430                                         ; DATA XREF: .rdata$r:NArchive::NCab::CCabBlockInStream::`RTTI Base Class Array'o
.rdata$r:00000430                                         ; NArchive::NCab::CCabBlockInStream `RTTI Type Descriptor'
.rdata$r:00000434                 db    3
.rdata$r:00000435                 db    0
.rdata$r:00000436                 db    0
.rdata$r:00000437                 db    0
.rdata$r:00000438                 db    0
.rdata$r:00000439                 db    0
.rdata$r:0000043A                 db    0
.rdata$r:0000043B                 db    0
.rdata$r:0000043C                 db 0FFh
.rdata$r:0000043D                 db 0FFh
.rdata$r:0000043E                 db 0FFh
.rdata$r:0000043F                 db 0FFh
.rdata$r:00000440                 db    0
.rdata$r:00000441                 db    0
.rdata$r:00000442                 db    0
.rdata$r:00000443                 db    0
.rdata$r:00000444                 db  40h ; @
.rdata$r:00000445                 db    0
.rdata$r:00000446                 db    0
.rdata$r:00000447                 db    0
.rdata$r:00000448                 dd offset ??_R3CCabBlockInStream@NCab@NArchive@@8 ; NArchive::NCab::CCabBlockInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000448 _rdata$r        ends
.rdata$r:00000448
.rdata$r:0000044C ; ===========================================================================
.rdata$r:0000044C
.rdata$r:0000044C ; Segment type: Pure data
.rdata$r:0000044C ; Segment permissions: Read
.rdata$r:0000044C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000044C                 assume cs:_rdata$r
.rdata$r:0000044C                 ;org 44Ch
.rdata$r:0000044C ; COMDAT (pick any)
.rdata$r:0000044C                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:0000044C ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000044C ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:0000044C                                         ; DATA XREF: .rdata$r:00000420o
.rdata$r:0000044C                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:0000044C                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00000450                 db    1
.rdata$r:00000451                 db    0
.rdata$r:00000452                 db    0
.rdata$r:00000453                 db    0
.rdata$r:00000454                 db    0
.rdata$r:00000455                 db    0
.rdata$r:00000456                 db    0
.rdata$r:00000457                 db    0
.rdata$r:00000458                 db 0FFh
.rdata$r:00000459                 db 0FFh
.rdata$r:0000045A                 db 0FFh
.rdata$r:0000045B                 db 0FFh
.rdata$r:0000045C                 db    0
.rdata$r:0000045D                 db    0
.rdata$r:0000045E                 db    0
.rdata$r:0000045F                 db    0
.rdata$r:00000460                 db  40h ; @
.rdata$r:00000461                 db    0
.rdata$r:00000462                 db    0
.rdata$r:00000463                 db    0
.rdata$r:00000464                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000464 _rdata$r        ends
.rdata$r:00000464
.data:00000468 ; ===========================================================================
.data:00000468
.data:00000468 ; Segment type: Pure data
.data:00000468 ; Segment permissions: Read/Write
.data:00000468 _data           segment dword public 'DATA' use32
.data:00000468                 assume cs:_data
.data:00000468                 ;org 468h
.data:00000468 ; COMDAT (pick any)
.data:00000468                 public ??_R0?AUISequentialInStream@@@8
.data:00000468 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:00000468 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00000468                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000468                                         ; const type_info::`vftable'
.data:0000046C                 align 10h
.data:00000470 a_?auisequentia db '.?AUISequentialInStream@@',0
.data:0000048A                 align 4
.data:0000048A _data           ends
.data:0000048A
.rdata$r:0000048C ; ===========================================================================
.rdata$r:0000048C
.rdata$r:0000048C ; Segment type: Pure data
.rdata$r:0000048C ; Segment permissions: Read
.rdata$r:0000048C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000048C                 assume cs:_rdata$r
.rdata$r:0000048C                 ;org 48Ch
.rdata$r:0000048C ; COMDAT (pick any)
.rdata$r:0000048C                 public ??_R3ISequentialInStream@@8
.rdata$r:0000048C ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000048C ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00000464o
.rdata$r:0000048D                 db    0
.rdata$r:0000048E                 db    0
.rdata$r:0000048F                 db    0
.rdata$r:00000490                 db    0
.rdata$r:00000491                 db    0
.rdata$r:00000492                 db    0
.rdata$r:00000493                 db    0
.rdata$r:00000494                 db    2
.rdata$r:00000495                 db    0
.rdata$r:00000496                 db    0
.rdata$r:00000497                 db    0
.rdata$r:00000498                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00000498 _rdata$r        ends
.rdata$r:00000498
.rdata$r:0000049C ; ===========================================================================
.rdata$r:0000049C
.rdata$r:0000049C ; Segment type: Pure data
.rdata$r:0000049C ; Segment permissions: Read
.rdata$r:0000049C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000049C                 assume cs:_rdata$r
.rdata$r:0000049C                 ;org 49Ch
.rdata$r:0000049C ; COMDAT (pick any)
.rdata$r:0000049C                 public ??_R2ISequentialInStream@@8
.rdata$r:0000049C ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:0000049C ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:0000049C                                         ; DATA XREF: .rdata$r:00000498o
.rdata$r:0000049C                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000004A0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000004A4                 db    0
.rdata$r:000004A5                 align 4
.rdata$r:000004A5 _rdata$r        ends
.rdata$r:000004A5
.rdata$r:000004A8 ; ===========================================================================
.rdata$r:000004A8
.rdata$r:000004A8 ; Segment type: Pure data
.rdata$r:000004A8 ; Segment permissions: Read
.rdata$r:000004A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004A8                 assume cs:_rdata$r
.rdata$r:000004A8                 ;org 4A8h
.rdata$r:000004A8 ; COMDAT (pick any)
.rdata$r:000004A8                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000004A8 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000004A8 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000004A8                                         ; DATA XREF: .rdata$r:00000424o
.rdata$r:000004A8                                         ; .rdata$r:000004A0o ...
.rdata$r:000004A8                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000004AC                 db    0
.rdata$r:000004AD                 db    0
.rdata$r:000004AE                 db    0
.rdata$r:000004AF                 db    0
.rdata$r:000004B0                 db    0
.rdata$r:000004B1                 db    0
.rdata$r:000004B2                 db    0
.rdata$r:000004B3                 db    0
.rdata$r:000004B4                 db 0FFh
.rdata$r:000004B5                 db 0FFh
.rdata$r:000004B6                 db 0FFh
.rdata$r:000004B7                 db 0FFh
.rdata$r:000004B8                 db    0
.rdata$r:000004B9                 db    0
.rdata$r:000004BA                 db    0
.rdata$r:000004BB                 db    0
.rdata$r:000004BC                 db  40h ; @
.rdata$r:000004BD                 db    0
.rdata$r:000004BE                 db    0
.rdata$r:000004BF                 db    0
.rdata$r:000004C0                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004C0 _rdata$r        ends
.rdata$r:000004C0
.data:000004C4 ; ===========================================================================
.data:000004C4
.data:000004C4 ; Segment type: Pure data
.data:000004C4 ; Segment permissions: Read/Write
.data:000004C4 _data           segment dword public 'DATA' use32
.data:000004C4                 assume cs:_data
.data:000004C4                 ;org 4C4h
.data:000004C4 ; COMDAT (pick any)
.data:000004C4                 public ??_R0?AUIUnknown@@@8
.data:000004C4 ; struct IUnknown `RTTI Type Descriptor'
.data:000004C4 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:000004C4                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000004C4                                         ; const type_info::`vftable'
.data:000004C8                 db    0
.data:000004C9                 db    0
.data:000004CA                 db    0
.data:000004CB                 db    0
.data:000004CC                 db  2Eh ; .
.data:000004CD                 db  3Fh ; ?
.data:000004CE                 db  41h ; A
.data:000004CF                 db  55h ; U
.data:000004D0                 db  49h ; I
.data:000004D1                 db  55h ; U
.data:000004D2                 db  6Eh ; n
.data:000004D3                 db  6Bh ; k
.data:000004D4                 db  6Eh ; n
.data:000004D5                 db  6Fh ; o
.data:000004D6                 db  77h ; w
.data:000004D7                 db  6Eh ; n
.data:000004D8                 db  40h ; @
.data:000004D9                 db  40h ; @
.data:000004DA                 db    0
.data:000004DB                 align 4
.data:000004DB _data           ends
.data:000004DB
.rdata$r:000004DC ; ===========================================================================
.rdata$r:000004DC
.rdata$r:000004DC ; Segment type: Pure data
.rdata$r:000004DC ; Segment permissions: Read
.rdata$r:000004DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004DC                 assume cs:_rdata$r
.rdata$r:000004DC                 ;org 4DCh
.rdata$r:000004DC ; COMDAT (pick any)
.rdata$r:000004DC                 public ??_R3IUnknown@@8
.rdata$r:000004DC ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004DC ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:000004C0o
.rdata$r:000004DD                 db    0
.rdata$r:000004DE                 db    0
.rdata$r:000004DF                 db    0
.rdata$r:000004E0                 db    0
.rdata$r:000004E1                 db    0
.rdata$r:000004E2                 db    0
.rdata$r:000004E3                 db    0
.rdata$r:000004E4                 db    1
.rdata$r:000004E5                 db    0
.rdata$r:000004E6                 db    0
.rdata$r:000004E7                 db    0
.rdata$r:000004E8                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000004E8 _rdata$r        ends
.rdata$r:000004E8
.rdata$r:000004EC ; ===========================================================================
.rdata$r:000004EC
.rdata$r:000004EC ; Segment type: Pure data
.rdata$r:000004EC ; Segment permissions: Read
.rdata$r:000004EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004EC                 assume cs:_rdata$r
.rdata$r:000004EC                 ;org 4ECh
.rdata$r:000004EC ; COMDAT (pick any)
.rdata$r:000004EC                 public ??_R2IUnknown@@8
.rdata$r:000004EC ; IUnknown::`RTTI Base Class Array'
.rdata$r:000004EC ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000004EC                                         ; DATA XREF: .rdata$r:000004E8o
.rdata$r:000004EC                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000004F0                 db    0
.rdata$r:000004F1                 align 4
.rdata$r:000004F1 _rdata$r        ends
.rdata$r:000004F1
.rdata$r:000004F4 ; ===========================================================================
.rdata$r:000004F4
.rdata$r:000004F4 ; Segment type: Pure data
.rdata$r:000004F4 ; Segment permissions: Read
.rdata$r:000004F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004F4                 assume cs:_rdata$r
.rdata$r:000004F4                 ;org 4F4h
.rdata$r:000004F4 ; COMDAT (pick any)
.rdata$r:000004F4                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:000004F4 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:000004F4 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000004F4                                         ; DATA XREF: .rdata$r:00000428o
.rdata$r:000004F4                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000004F8                 db    0
.rdata$r:000004F9                 db    0
.rdata$r:000004FA                 db    0
.rdata$r:000004FB                 db    0
.rdata$r:000004FC                 db    4
.rdata$r:000004FD                 db    0
.rdata$r:000004FE                 db    0
.rdata$r:000004FF                 db    0
.rdata$r:00000500                 db 0FFh
.rdata$r:00000501                 db 0FFh
.rdata$r:00000502                 db 0FFh
.rdata$r:00000503                 db 0FFh
.rdata$r:00000504                 db    0
.rdata$r:00000505                 db    0
.rdata$r:00000506                 db    0
.rdata$r:00000507                 db    0
.rdata$r:00000508                 db  40h ; @
.rdata$r:00000509                 db    0
.rdata$r:0000050A                 db    0
.rdata$r:0000050B                 db    0
.rdata$r:0000050C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000050C _rdata$r        ends
.rdata$r:0000050C
.data:00000510 ; ===========================================================================
.data:00000510
.data:00000510 ; Segment type: Pure data
.data:00000510 ; Segment permissions: Read/Write
.data:00000510 _data           segment dword public 'DATA' use32
.data:00000510                 assume cs:_data
.data:00000510                 ;org 510h
.data:00000510 ; COMDAT (pick any)
.data:00000510                 public ??_R0?AVCMyUnknownImp@@@8
.data:00000510 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00000510 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00000510                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00000510                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000510                                         ; const type_info::`vftable'
.data:00000514                 align 8
.data:00000518 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00000518 _data           ends
.data:00000518
.rdata$r:0000052C ; ===========================================================================
.rdata$r:0000052C
.rdata$r:0000052C ; Segment type: Pure data
.rdata$r:0000052C ; Segment permissions: Read
.rdata$r:0000052C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000052C                 assume cs:_rdata$r
.rdata$r:0000052C                 ;org 52Ch
.rdata$r:0000052C ; COMDAT (pick any)
.rdata$r:0000052C                 public ??_R3CMyUnknownImp@@8
.rdata$r:0000052C ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000052C ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:0000050Co
.rdata$r:0000052C                                         ; .rdata$r:0000055Co
.rdata$r:0000052D                 db    0
.rdata$r:0000052E                 db    0
.rdata$r:0000052F                 db    0
.rdata$r:00000530                 db    0
.rdata$r:00000531                 db    0
.rdata$r:00000532                 db    0
.rdata$r:00000533                 db    0
.rdata$r:00000534                 db    1
.rdata$r:00000535                 db    0
.rdata$r:00000536                 db    0
.rdata$r:00000537                 db    0
.rdata$r:00000538                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000538 _rdata$r        ends
.rdata$r:00000538
.rdata$r:0000053C ; ===========================================================================
.rdata$r:0000053C
.rdata$r:0000053C ; Segment type: Pure data
.rdata$r:0000053C ; Segment permissions: Read
.rdata$r:0000053C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000053C                 assume cs:_rdata$r
.rdata$r:0000053C                 ;org 53Ch
.rdata$r:0000053C ; COMDAT (pick any)
.rdata$r:0000053C                 public ??_R2CMyUnknownImp@@8
.rdata$r:0000053C ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:0000053C ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000053C                                         ; DATA XREF: .rdata$r:00000538o
.rdata$r:0000053C                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000540                 db    0
.rdata$r:00000541                 align 4
.rdata$r:00000541 _rdata$r        ends
.rdata$r:00000541
.rdata$r:00000544 ; ===========================================================================
.rdata$r:00000544
.rdata$r:00000544 ; Segment type: Pure data
.rdata$r:00000544 ; Segment permissions: Read
.rdata$r:00000544 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000544                 assume cs:_rdata$r
.rdata$r:00000544                 ;org 544h
.rdata$r:00000544 ; COMDAT (pick any)
.rdata$r:00000544                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000544 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000544 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000544                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00000544                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000548                 align 10h
.rdata$r:00000550                 db 0FFh
.rdata$r:00000551                 db 0FFh
.rdata$r:00000552                 db 0FFh
.rdata$r:00000553                 db 0FFh
.rdata$r:00000554                 db    0
.rdata$r:00000555                 db    0
.rdata$r:00000556                 db    0
.rdata$r:00000557                 db    0
.rdata$r:00000558                 db  40h ; @
.rdata$r:00000559                 db    0
.rdata$r:0000055A                 db    0
.rdata$r:0000055B                 db    0
.rdata$r:0000055C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000055C _rdata$r        ends
.rdata$r:0000055C
.text:00000560 ; ===========================================================================
.text:00000560
.text:00000560 ; Segment type: Pure code
.text:00000560 ; Segment permissions: Read/Execute
.text:00000560 _text           segment para public 'CODE' use32
.text:00000560                 assume cs:_text
.text:00000560                 ;org 560h
.text:00000560 ; COMDAT (pick any)
.text:00000560                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000560
.text:00000560 ; =============== S U B R O U T I N E =======================================
.text:00000560
.text:00000560 ; Attributes: bp-based frame
.text:00000560
.text:00000560 ; __int32 __stdcall NArchive::NCab::CCabBlockInStream::QueryInterface(NArchive::NCab::CCabBlockInStream *this, const struct _GUID *Buf1, void **)
.text:00000560                 public ?QueryInterface@CCabBlockInStream@NCab@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00000560 ?QueryInterface@CCabBlockInStream@NCab@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000560                                         ; DATA XREF: .rdata:const NArchive::NCab::CCabBlockInStream::`vftable'o
.text:00000560
.text:00000560 this            = dword ptr  8
.text:00000560 Buf1            = dword ptr  0Ch
.text:00000560 arg_8           = dword ptr  10h
.text:00000560
.text:00000560                 push    ebp
.text:00000561                 mov     ebp, esp
.text:00000563                 mov     eax, [ebp+arg_8]
.text:00000566                 mov     dword ptr [eax], 0
.text:0000056C                 push    offset _IID_IUnknown ; Buf2
.text:00000571                 mov     ecx, [ebp+Buf1]
.text:00000574                 push    ecx             ; Buf1
.text:00000575                 call    ___@8           ; __(x,x)
.text:0000057A                 test    eax, eax
.text:0000057C                 jz      short loc_588
.text:0000057E                 mov     edx, [ebp+arg_8]
.text:00000581                 mov     eax, [ebp+this]
.text:00000584                 mov     [edx], eax
.text:00000586                 jmp     short loc_58F
.text:00000588 ; ---------------------------------------------------------------------------
.text:00000588
.text:00000588 loc_588:                                ; CODE XREF: NArchive::NCab::CCabBlockInStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00000588                 mov     eax, 80004002h
.text:0000058D                 jmp     short loc_5A0
.text:0000058F ; ---------------------------------------------------------------------------
.text:0000058F
.text:0000058F loc_58F:                                ; CODE XREF: NArchive::NCab::CCabBlockInStream::QueryInterface(_GUID const &,void * *)+26j
.text:0000058F                 mov     ecx, [ebp+this]
.text:00000592                 mov     edx, [ecx+4]
.text:00000595                 add     edx, 1
.text:00000598                 mov     eax, [ebp+this]
.text:0000059B                 mov     [eax+4], edx
.text:0000059E                 xor     eax, eax
.text:000005A0
.text:000005A0 loc_5A0:                                ; CODE XREF: NArchive::NCab::CCabBlockInStream::QueryInterface(_GUID const &,void * *)+2Dj
.text:000005A0                 cmp     ebp, esp
.text:000005A2                 call    __RTC_CheckEsp
.text:000005A7                 pop     ebp
.text:000005A8                 retn    0Ch
.text:000005A8 ?QueryInterface@CCabBlockInStream@NCab@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:000005A8
.text:000005A8 ; ---------------------------------------------------------------------------
.text:000005AB                 align 4
.text:000005AB _text           ends
.text:000005AB
.text:000005AC ; ===========================================================================
.text:000005AC
.text:000005AC ; Segment type: Pure code
.text:000005AC ; Segment permissions: Read/Execute
.text:000005AC _text           segment para public 'CODE' use32
.text:000005AC                 assume cs:_text
.text:000005AC                 ;org 5ACh
.text:000005AC ; COMDAT (pick any)
.text:000005AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000005AC
.text:000005AC ; =============== S U B R O U T I N E =======================================
.text:000005AC
.text:000005AC ; Attributes: bp-based frame
.text:000005AC
.text:000005AC ; unsigned __int32 __stdcall NArchive::NCab::CCabBlockInStream::AddRef(NArchive::NCab::CCabBlockInStream *this)
.text:000005AC                 public ?AddRef@CCabBlockInStream@NCab@NArchive@@UAGKXZ
.text:000005AC ?AddRef@CCabBlockInStream@NCab@NArchive@@UAGKXZ proc near
.text:000005AC                                         ; DATA XREF: .rdata:000003BCo
.text:000005AC
.text:000005AC var_4           = dword ptr -4
.text:000005AC this            = dword ptr  8
.text:000005AC
.text:000005AC                 push    ebp
.text:000005AD                 mov     ebp, esp
.text:000005AF                 push    ecx
.text:000005B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005B7                 mov     eax, [ebp+this]
.text:000005BA                 mov     ecx, [eax+4]
.text:000005BD                 add     ecx, 1
.text:000005C0                 mov     [ebp+var_4], ecx
.text:000005C3                 mov     edx, [ebp+this]
.text:000005C6                 mov     eax, [ebp+var_4]
.text:000005C9                 mov     [edx+4], eax
.text:000005CC                 mov     eax, [ebp+var_4]
.text:000005CF                 mov     esp, ebp
.text:000005D1                 pop     ebp
.text:000005D2                 retn    4
.text:000005D2 ?AddRef@CCabBlockInStream@NCab@NArchive@@UAGKXZ endp
.text:000005D2
.text:000005D2 ; ---------------------------------------------------------------------------
.text:000005D5                 align 4
.text:000005D5 _text           ends
.text:000005D5
.text:000005D8 ; ===========================================================================
.text:000005D8
.text:000005D8 ; Segment type: Pure code
.text:000005D8 ; Segment permissions: Read/Execute
.text:000005D8 _text           segment para public 'CODE' use32
.text:000005D8                 assume cs:_text
.text:000005D8                 ;org 5D8h
.text:000005D8 ; COMDAT (pick any)
.text:000005D8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000005D8
.text:000005D8 ; =============== S U B R O U T I N E =======================================
.text:000005D8
.text:000005D8 ; Attributes: bp-based frame
.text:000005D8
.text:000005D8 ; unsigned __int32 __stdcall NArchive::NCab::CCabBlockInStream::Release(NArchive::NCab::CCabBlockInStream *this)
.text:000005D8                 public ?Release@CCabBlockInStream@NCab@NArchive@@UAGKXZ
.text:000005D8 ?Release@CCabBlockInStream@NCab@NArchive@@UAGKXZ proc near
.text:000005D8                                         ; DATA XREF: .rdata:000003C0o
.text:000005D8
.text:000005D8 var_10          = dword ptr -10h
.text:000005D8 var_C           = dword ptr -0Ch
.text:000005D8 var_8           = dword ptr -8
.text:000005D8 var_4           = dword ptr -4
.text:000005D8 this            = dword ptr  8
.text:000005D8
.text:000005D8                 push    ebp
.text:000005D9                 mov     ebp, esp
.text:000005DB                 sub     esp, 10h
.text:000005DE                 mov     eax, 0CCCCCCCCh
.text:000005E3                 mov     [ebp+var_10], eax
.text:000005E6                 mov     [ebp+var_C], eax
.text:000005E9                 mov     [ebp+var_8], eax
.text:000005EC                 mov     [ebp+var_4], eax
.text:000005EF                 mov     eax, [ebp+this]
.text:000005F2                 mov     ecx, [eax+4]
.text:000005F5                 sub     ecx, 1
.text:000005F8                 mov     [ebp+var_C], ecx
.text:000005FB                 mov     edx, [ebp+this]
.text:000005FE                 mov     eax, [ebp+var_C]
.text:00000601                 mov     [edx+4], eax
.text:00000604                 cmp     [ebp+var_C], 0
.text:00000608                 jz      short loc_612
.text:0000060A                 mov     ecx, [ebp+this]
.text:0000060D                 mov     eax, [ecx+4]
.text:00000610                 jmp     short loc_63C
.text:00000612 ; ---------------------------------------------------------------------------
.text:00000612
.text:00000612 loc_612:                                ; CODE XREF: NArchive::NCab::CCabBlockInStream::Release(void)+30j
.text:00000612                 mov     edx, [ebp+this]
.text:00000615                 mov     [ebp+var_8], edx
.text:00000618                 mov     eax, [ebp+var_8]
.text:0000061B                 mov     [ebp+var_4], eax
.text:0000061E                 cmp     [ebp+var_4], 0
.text:00000622                 jz      short loc_633
.text:00000624                 push    1
.text:00000626                 mov     ecx, [ebp+var_4]
.text:00000629                 call    ??_GCCabBlockInStream@NCab@NArchive@@QAEPAXI@Z ; NArchive::NCab::CCabBlockInStream::`scalar deleting destructor'(uint)
.text:0000062E                 mov     [ebp+var_10], eax
.text:00000631                 jmp     short loc_63A
.text:00000633 ; ---------------------------------------------------------------------------
.text:00000633
.text:00000633 loc_633:                                ; CODE XREF: NArchive::NCab::CCabBlockInStream::Release(void)+4Aj
.text:00000633                 mov     [ebp+var_10], 0
.text:0000063A
.text:0000063A loc_63A:                                ; CODE XREF: NArchive::NCab::CCabBlockInStream::Release(void)+59j
.text:0000063A                 xor     eax, eax
.text:0000063C
.text:0000063C loc_63C:                                ; CODE XREF: NArchive::NCab::CCabBlockInStream::Release(void)+38j
.text:0000063C                 add     esp, 10h
.text:0000063F                 cmp     ebp, esp
.text:00000641                 call    __RTC_CheckEsp
.text:00000646                 mov     esp, ebp
.text:00000648                 pop     ebp
.text:00000649                 retn    4
.text:00000649 ?Release@CCabBlockInStream@NCab@NArchive@@UAGKXZ endp
.text:00000649
.text:00000649 _text           ends
.text:00000649
.text:0000064C ; ===========================================================================
.text:0000064C
.text:0000064C ; Segment type: Pure code
.text:0000064C ; Segment permissions: Read/Execute
.text:0000064C _text           segment para public 'CODE' use32
.text:0000064C                 assume cs:_text
.text:0000064C                 ;org 64Ch
.text:0000064C ; COMDAT (pick any)
.text:0000064C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000064C
.text:0000064C ; =============== S U B R O U T I N E =======================================
.text:0000064C
.text:0000064C ; Attributes: bp-based frame
.text:0000064C
.text:0000064C ; public: void * __thiscall NArchive::NCab::CCabBlockInStream::`scalar deleting destructor'(unsigned int)
.text:0000064C                 public ??_GCCabBlockInStream@NCab@NArchive@@QAEPAXI@Z
.text:0000064C ??_GCCabBlockInStream@NCab@NArchive@@QAEPAXI@Z proc near
.text:0000064C                                         ; CODE XREF: NArchive::NCab::CCabBlockInStream::Release(void)+51p
.text:0000064C
.text:0000064C var_4           = dword ptr -4
.text:0000064C arg_0           = dword ptr  8
.text:0000064C
.text:0000064C                 push    ebp
.text:0000064D                 mov     ebp, esp
.text:0000064F                 push    ecx
.text:00000650                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000657                 mov     [ebp+var_4], ecx
.text:0000065A                 mov     ecx, [ebp+var_4] ; this
.text:0000065D                 call    ??1CCabBlockInStream@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CCabBlockInStream::~CCabBlockInStream(void)
.text:00000662                 mov     eax, [ebp+arg_0]
.text:00000665                 and     eax, 1
.text:00000668                 jz      short loc_676
.text:0000066A                 mov     ecx, [ebp+var_4]
.text:0000066D                 push    ecx             ; void *
.text:0000066E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000673                 add     esp, 4
.text:00000676
.text:00000676 loc_676:                                ; CODE XREF: NArchive::NCab::CCabBlockInStream::`scalar deleting destructor'(uint)+1Cj
.text:00000676                 mov     eax, [ebp+var_4]
.text:00000679                 add     esp, 4
.text:0000067C                 cmp     ebp, esp
.text:0000067E                 call    __RTC_CheckEsp
.text:00000683                 mov     esp, ebp
.text:00000685                 pop     ebp
.text:00000686                 retn    4
.text:00000686 ??_GCCabBlockInStream@NCab@NArchive@@QAEPAXI@Z endp
.text:00000686
.text:00000686 ; ---------------------------------------------------------------------------
.text:00000689                 align 4
.text:00000689 _text           ends
.text:00000689
.text:0000068C ; ===========================================================================
.text:0000068C
.text:0000068C ; Segment type: Pure code
.text:0000068C ; Segment permissions: Read/Execute
.text:0000068C _text           segment para public 'CODE' use32
.text:0000068C                 assume cs:_text
.text:0000068C                 ;org 68Ch
.text:0000068C ; COMDAT (pick any)
.text:0000068C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000068C
.text:0000068C ; =============== S U B R O U T I N E =======================================
.text:0000068C
.text:0000068C ; Attributes: bp-based frame
.text:0000068C
.text:0000068C ; int __stdcall __(void *Buf1, void *Buf2)
.text:0000068C                 public ___@8
.text:0000068C ___@8           proc near               ; CODE XREF: NArchive::NCab::CCabBlockInStream::QueryInterface(_GUID const &,void * *)+15p
.text:0000068C
.text:0000068C Buf1            = dword ptr  8
.text:0000068C Buf2            = dword ptr  0Ch
.text:0000068C
.text:0000068C                 push    ebp
.text:0000068D                 mov     ebp, esp
.text:0000068F                 mov     eax, [ebp+Buf2]
.text:00000692                 push    eax             ; Buf2
.text:00000693                 mov     ecx, [ebp+Buf1]
.text:00000696                 push    ecx             ; Buf1
.text:00000697                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:0000069C                 cmp     ebp, esp
.text:0000069E                 call    __RTC_CheckEsp
.text:000006A3                 pop     ebp
.text:000006A4                 retn    8
.text:000006A4 ___@8           endp
.text:000006A4
.text:000006A4 ; ---------------------------------------------------------------------------
.text:000006A7                 align 4
.text:000006A7 _text           ends
.text:000006A7
.text:000006A8 ; ===========================================================================
.text:000006A8
.text:000006A8 ; Segment type: Pure code
.text:000006A8 ; Segment permissions: Read/Execute
.text:000006A8 _text           segment para public 'CODE' use32
.text:000006A8                 assume cs:_text
.text:000006A8                 ;org 6A8h
.text:000006A8 ; COMDAT (pick any)
.text:000006A8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000006A8
.text:000006A8 ; =============== S U B R O U T I N E =======================================
.text:000006A8
.text:000006A8 ; Attributes: bp-based frame
.text:000006A8
.text:000006A8 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:000006A8                 public _IsEqualGUID@8
.text:000006A8 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:000006A8
.text:000006A8 Buf1            = dword ptr  8
.text:000006A8 Buf2            = dword ptr  0Ch
.text:000006A8
.text:000006A8                 push    ebp
.text:000006A9                 mov     ebp, esp
.text:000006AB                 push    10h             ; Size
.text:000006AD                 mov     eax, [ebp+Buf2]
.text:000006B0                 push    eax             ; Buf2
.text:000006B1                 mov     ecx, [ebp+Buf1]
.text:000006B4                 push    ecx             ; Buf1
.text:000006B5                 call    _memcmp
.text:000006BA                 add     esp, 0Ch
.text:000006BD                 neg     eax
.text:000006BF                 sbb     eax, eax
.text:000006C1                 add     eax, 1
.text:000006C4                 cmp     ebp, esp
.text:000006C6                 call    __RTC_CheckEsp
.text:000006CB                 pop     ebp
.text:000006CC                 retn    8
.text:000006CC _IsEqualGUID@8  endp
.text:000006CC
.text:000006CC _text           ends
.text:000006CC
UNDEF:000006D0 ; ===========================================================================
UNDEF:000006D0
UNDEF:000006D0 ; Segment type: Externs
UNDEF:000006D0 ; UNDEF
UNDEF:000006D0 ; __stdcall MyAlloc(x)
UNDEF:000006D0                 extrn _MyAlloc@4:near   ; CODE XREF: NArchive::NCab::CCabBlockInStream::Create(void)+1Cp
UNDEF:000006D4                 extrn __RTC_CheckEsp:near
UNDEF:000006D4                                         ; CODE XREF: NArchive::NCab::CCabBlockInStream::Create(void)+38p
UNDEF:000006D4                                         ; NArchive::NCab::CCabBlockInStream::~CCabBlockInStream(void)+28p ...
UNDEF:000006D8                 extrn __RTC_Shutdown:near
UNDEF:000006D8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000006DC                 extrn __RTC_InitBase:near
UNDEF:000006DC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000006E0 ; __stdcall MyFree(x)
UNDEF:000006E0                 extrn _MyFree@4:near    ; CODE XREF: NArchive::NCab::CCabBlockInStream::~CCabBlockInStream(void)+1Ep
UNDEF:000006E4 ; const type_info::`vftable'
UNDEF:000006E4                 extrn ??_7type_info@@6B@:near
UNDEF:000006E4                                         ; DATA XREF: .data:NArchive::NCab::CCabBlockInStream `RTTI Type Descriptor'o
UNDEF:000006E4                                         ; .data:ISequentialInStream `RTTI Type Descriptor'o ...
UNDEF:000006E8 ; const IID IID_IUnknown
UNDEF:000006E8                 extrn _IID_IUnknown:near
UNDEF:000006E8                                         ; DATA XREF: NArchive::NCab::CCabBlockInStream::QueryInterface(_GUID const &,void * *)+Co
UNDEF:000006EC ; void __cdecl operator delete(void *)
UNDEF:000006EC                 extrn ??3@YAXPAX@Z:near ; CODE XREF: NArchive::NCab::CCabBlockInStream::`scalar deleting destructor'(uint)+22p
UNDEF:000006F0 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:000006F0                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:000006F4 ; __int32 __stdcall ReadStream_FALSE(struct ISequentialInStream *, void *, unsigned int)
UNDEF:000006F4                 extrn ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z:near
UNDEF:000006F4                                         ; CODE XREF: NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+4Fp
UNDEF:000006F4                                         ; NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+B9p
UNDEF:000006F8                 extrn ___security_cookie:near
UNDEF:000006F8                                         ; DATA XREF: NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+1Fr
UNDEF:000006FC ; __fastcall __security_check_cookie(x)
UNDEF:000006FC                 extrn @__security_check_cookie@4:near
UNDEF:000006FC                                         ; CODE XREF: NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+1ABp
UNDEF:00000700 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000700                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000700                                         ; CODE XREF: NArchive::NCab::CCabBlockInStream::PreRead(ISequentialInStream *,uint &,uint &)+19Dp
UNDEF:00000704 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00000704                 extrn _memcpy:near      ; CODE XREF: NArchive::NCab::CCabBlockInStream::Read(void *,uint,uint *)+43p
UNDEF:00000704
UNDEF:00000704