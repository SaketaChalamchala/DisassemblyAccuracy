.bss:00000000 ;
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.bss:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.bss:00000000 ; |                      License info: 48-3677-7074-51                      |
.bss:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ;
.bss:00000000 ; Input MD5   : 9E1B12835329B71331EF637733B79C69
.bss:00000000 ; Input CRC32 : 32E34256
.bss:00000000
.bss:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\CreateCoder.obj
.bss:00000000 ; Format      : COFF (X386MAGIC)
.bss:00000000 ; includelib "uuid.lib"
.bss:00000000 ; includelib "MSVCRTD"
.bss:00000000 ; includelib "OLDNAMES"
.bss:00000000
.bss:00000000                 .686p
.bss:00000000                 .mmx
.bss:00000000                 .model flat
.bss:00000000
.bss:00000000 ; ===========================================================================
.bss:00000000
.bss:00000000 ; Segment type: Uninitialized
.bss:00000000 ; Segment permissions: Read/Write
.bss:00000000 ; Segment alignment 'qword' can not be represented in assembly
.bss:00000000 _bss            segment para public 'BSS' use32
.bss:00000000                 assume cs:_bss
.bss:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.bss:00000000                 public ?g_Hashers@@3PAPBUCHasherInfo@@A
.bss:00000000 ; struct CHasherInfo const * * g_Hashers
.bss:00000000 ?g_Hashers@@3PAPBUCHasherInfo@@A dd ?   ; DATA XREF: RegisterHasher(CHasherInfo const *)+14w
.bss:00000000                                         ; FindHashMethod(AString const &,unsigned __int64 &)+34r ...
.bss:00000004                 align 40h
.bss:00000040                 public ?g_Codecs@@3PAPBUCCodecInfo@@A
.bss:00000040 ; struct CCodecInfo const * * g_Codecs
.bss:00000040 ?g_Codecs@@3PAPBUCCodecInfo@@A dd ?     ; DATA XREF: RegisterCodec(CCodecInfo const *)+14w
.bss:00000040                                         ; FindMethod(AString const &,unsigned __int64 &,uint &)+34r ...
.bss:00000044                 db    ? ;
.bss:00000045                 db    ? ;
.bss:00000046                 db    ? ;
.bss:00000047                 db    ? ;
.bss:00000048                 db    ? ;
.bss:00000049                 db    ? ;
.bss:0000004A                 db    ? ;
.bss:0000004B                 db    ? ;
.bss:0000004C                 db    ? ;
.bss:0000004D                 db    ? ;
.bss:0000004E                 db    ? ;
.bss:0000004F                 db    ? ;
.bss:00000050                 db    ? ;
.bss:00000051                 db    ? ;
.bss:00000052                 db    ? ;
.bss:00000053                 db    ? ;
.bss:00000054                 db    ? ;
.bss:00000055                 db    ? ;
.bss:00000056                 db    ? ;
.bss:00000057                 db    ? ;
.bss:00000058                 db    ? ;
.bss:00000059                 db    ? ;
.bss:0000005A                 db    ? ;
.bss:0000005B                 db    ? ;
.bss:0000005C                 db    ? ;
.bss:0000005D                 db    ? ;
.bss:0000005E                 db    ? ;
.bss:0000005F                 db    ? ;
.bss:00000060                 db    ? ;
.bss:00000061                 db    ? ;
.bss:00000062                 db    ? ;
.bss:00000063                 db    ? ;
.bss:00000064                 db    ? ;
.bss:00000065                 db    ? ;
.bss:00000066                 db    ? ;
.bss:00000067                 db    ? ;
.bss:00000068                 db    ? ;
.bss:00000069                 db    ? ;
.bss:0000006A                 db    ? ;
.bss:0000006B                 db    ? ;
.bss:0000006C                 db    ? ;
.bss:0000006D                 db    ? ;
.bss:0000006E                 db    ? ;
.bss:0000006F                 db    ? ;
.bss:00000070                 db    ? ;
.bss:00000071                 db    ? ;
.bss:00000072                 db    ? ;
.bss:00000073                 db    ? ;
.bss:00000074                 db    ? ;
.bss:00000075                 db    ? ;
.bss:00000076                 db    ? ;
.bss:00000077                 db    ? ;
.bss:00000078                 db    ? ;
.bss:00000079                 db    ? ;
.bss:0000007A                 db    ? ;
.bss:0000007B                 db    ? ;
.bss:0000007C                 db    ? ;
.bss:0000007D                 db    ? ;
.bss:0000007E                 db    ? ;
.bss:0000007F                 db    ? ;
.bss:00000080                 db    ? ;
.bss:00000081                 db    ? ;
.bss:00000082                 db    ? ;
.bss:00000083                 db    ? ;
.bss:00000084                 db    ? ;
.bss:00000085                 db    ? ;
.bss:00000086                 db    ? ;
.bss:00000087                 db    ? ;
.bss:00000088                 db    ? ;
.bss:00000089                 db    ? ;
.bss:0000008A                 db    ? ;
.bss:0000008B                 db    ? ;
.bss:0000008C                 db    ? ;
.bss:0000008D                 db    ? ;
.bss:0000008E                 db    ? ;
.bss:0000008F                 db    ? ;
.bss:00000090                 db    ? ;
.bss:00000091                 db    ? ;
.bss:00000092                 db    ? ;
.bss:00000093                 db    ? ;
.bss:00000094                 db    ? ;
.bss:00000095                 db    ? ;
.bss:00000096                 db    ? ;
.bss:00000097                 db    ? ;
.bss:00000098                 db    ? ;
.bss:00000099                 db    ? ;
.bss:0000009A                 db    ? ;
.bss:0000009B                 db    ? ;
.bss:0000009C                 db    ? ;
.bss:0000009D                 db    ? ;
.bss:0000009E                 db    ? ;
.bss:0000009F                 db    ? ;
.bss:000000A0                 db    ? ;
.bss:000000A1                 db    ? ;
.bss:000000A2                 db    ? ;
.bss:000000A3                 db    ? ;
.bss:000000A4                 db    ? ;
.bss:000000A5                 db    ? ;
.bss:000000A6                 db    ? ;
.bss:000000A7                 db    ? ;
.bss:000000A8                 db    ? ;
.bss:000000A9                 db    ? ;
.bss:000000AA                 db    ? ;
.bss:000000AB                 db    ? ;
.bss:000000AC                 db    ? ;
.bss:000000AD                 db    ? ;
.bss:000000AE                 db    ? ;
.bss:000000AF                 db    ? ;
.bss:000000B0                 db    ? ;
.bss:000000B1                 db    ? ;
.bss:000000B2                 db    ? ;
.bss:000000B3                 db    ? ;
.bss:000000B4                 db    ? ;
.bss:000000B5                 db    ? ;
.bss:000000B6                 db    ? ;
.bss:000000B7                 db    ? ;
.bss:000000B8                 db    ? ;
.bss:000000B9                 db    ? ;
.bss:000000BA                 db    ? ;
.bss:000000BB                 db    ? ;
.bss:000000BC                 db    ? ;
.bss:000000BD                 db    ? ;
.bss:000000BE                 db    ? ;
.bss:000000BF                 db    ? ;
.bss:000000C0                 db    ? ;
.bss:000000C1                 db    ? ;
.bss:000000C2                 db    ? ;
.bss:000000C3                 db    ? ;
.bss:000000C4                 db    ? ;
.bss:000000C5                 db    ? ;
.bss:000000C6                 db    ? ;
.bss:000000C7                 db    ? ;
.bss:000000C8                 db    ? ;
.bss:000000C9                 db    ? ;
.bss:000000CA                 db    ? ;
.bss:000000CB                 db    ? ;
.bss:000000CC                 db    ? ;
.bss:000000CD                 db    ? ;
.bss:000000CE                 db    ? ;
.bss:000000CF                 db    ? ;
.bss:000000D0                 db    ? ;
.bss:000000D1                 db    ? ;
.bss:000000D2                 db    ? ;
.bss:000000D3                 db    ? ;
.bss:000000D4                 db    ? ;
.bss:000000D5                 db    ? ;
.bss:000000D6                 db    ? ;
.bss:000000D7                 db    ? ;
.bss:000000D8                 db    ? ;
.bss:000000D9                 db    ? ;
.bss:000000DA                 db    ? ;
.bss:000000DB                 db    ? ;
.bss:000000DC                 db    ? ;
.bss:000000DD                 db    ? ;
.bss:000000DE                 db    ? ;
.bss:000000DF                 db    ? ;
.bss:000000E0                 db    ? ;
.bss:000000E1                 db    ? ;
.bss:000000E2                 db    ? ;
.bss:000000E3                 db    ? ;
.bss:000000E4                 db    ? ;
.bss:000000E5                 db    ? ;
.bss:000000E6                 db    ? ;
.bss:000000E7                 db    ? ;
.bss:000000E8                 db    ? ;
.bss:000000E9                 db    ? ;
.bss:000000EA                 db    ? ;
.bss:000000EB                 db    ? ;
.bss:000000EC                 db    ? ;
.bss:000000ED                 db    ? ;
.bss:000000EE                 db    ? ;
.bss:000000EF                 db    ? ;
.bss:000000F0                 db    ? ;
.bss:000000F1                 db    ? ;
.bss:000000F2                 db    ? ;
.bss:000000F3                 db    ? ;
.bss:000000F4                 db    ? ;
.bss:000000F5                 db    ? ;
.bss:000000F6                 db    ? ;
.bss:000000F7                 db    ? ;
.bss:000000F8                 db    ? ;
.bss:000000F9                 db    ? ;
.bss:000000FA                 db    ? ;
.bss:000000FB                 db    ? ;
.bss:000000FC                 db    ? ;
.bss:000000FD                 db    ? ;
.bss:000000FE                 db    ? ;
.bss:000000FF                 db    ? ;
.bss:00000100                 db    ? ;
.bss:00000101                 db    ? ;
.bss:00000102                 db    ? ;
.bss:00000103                 db    ? ;
.bss:00000104                 db    ? ;
.bss:00000105                 db    ? ;
.bss:00000106                 db    ? ;
.bss:00000107                 db    ? ;
.bss:00000108                 db    ? ;
.bss:00000109                 db    ? ;
.bss:0000010A                 db    ? ;
.bss:0000010B                 db    ? ;
.bss:0000010C                 db    ? ;
.bss:0000010D                 db    ? ;
.bss:0000010E                 db    ? ;
.bss:0000010F                 db    ? ;
.bss:00000110                 db    ? ;
.bss:00000111                 db    ? ;
.bss:00000112                 db    ? ;
.bss:00000113                 db    ? ;
.bss:00000114                 db    ? ;
.bss:00000115                 db    ? ;
.bss:00000116                 db    ? ;
.bss:00000117                 db    ? ;
.bss:00000118                 db    ? ;
.bss:00000119                 db    ? ;
.bss:0000011A                 db    ? ;
.bss:0000011B                 db    ? ;
.bss:0000011C                 db    ? ;
.bss:0000011D                 db    ? ;
.bss:0000011E                 db    ? ;
.bss:0000011F                 db    ? ;
.bss:00000120                 db    ? ;
.bss:00000121                 db    ? ;
.bss:00000122                 db    ? ;
.bss:00000123                 db    ? ;
.bss:00000124                 db    ? ;
.bss:00000125                 db    ? ;
.bss:00000126                 db    ? ;
.bss:00000127                 db    ? ;
.bss:00000128                 db    ? ;
.bss:00000129                 db    ? ;
.bss:0000012A                 db    ? ;
.bss:0000012B                 db    ? ;
.bss:0000012C                 db    ? ;
.bss:0000012D                 db    ? ;
.bss:0000012E                 db    ? ;
.bss:0000012F                 db    ? ;
.bss:00000130                 db    ? ;
.bss:00000131                 db    ? ;
.bss:00000132                 db    ? ;
.bss:00000133                 db    ? ;
.bss:00000134                 db    ? ;
.bss:00000135                 db    ? ;
.bss:00000136                 db    ? ;
.bss:00000137                 db    ? ;
.bss:00000138                 db    ? ;
.bss:00000139                 db    ? ;
.bss:0000013A                 db    ? ;
.bss:0000013B                 db    ? ;
.bss:0000013C                 db    ? ;
.bss:0000013D                 db    ? ;
.bss:0000013E                 db    ? ;
.bss:0000013F                 db    ? ;
.bss:00000140                 public ?g_NumCodecs@@3IA
.bss:00000140 ; unsigned int g_NumCodecs
.bss:00000140 ?g_NumCodecs@@3IA dd ?                  ; DATA XREF: RegisterCodec(CCodecInfo const *)+3r
.bss:00000140                                         ; RegisterCodec(CCodecInfo const *)+Cr ...
.bss:00000144                 public ?g_NumHashers@@3IA
.bss:00000144 ; unsigned int g_NumHashers
.bss:00000144 ?g_NumHashers@@3IA dd ?                 ; DATA XREF: RegisterHasher(CHasherInfo const *)+3r
.bss:00000144                                         ; RegisterHasher(CHasherInfo const *)+Cr ...
.bss:00000144 _bss            ends
.bss:00000144
.text:00000148 ; ===========================================================================
.text:00000148
.text:00000148 ; Segment type: Pure code
.text:00000148 ; Segment permissions: Read/Execute
.text:00000148 _text           segment para public 'CODE' use32
.text:00000148                 assume cs:_text
.text:00000148                 ;org 148h
.text:00000148                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000148
.text:00000148 ; =============== S U B R O U T I N E =======================================
.text:00000148
.text:00000148 ; Attributes: bp-based frame
.text:00000148
.text:00000148 ; void __stdcall RegisterCodec(const struct CCodecInfo *)
.text:00000148                 public ?RegisterCodec@@YGXPBUCCodecInfo@@@Z
.text:00000148 ?RegisterCodec@@YGXPBUCCodecInfo@@@Z proc near
.text:00000148
.text:00000148 arg_0           = dword ptr  8
.text:00000148
.text:00000148                 push    ebp
.text:00000149                 mov     ebp, esp
.text:0000014B                 cmp     ds:?g_NumCodecs@@3IA, 40h ; '@' ; uint g_NumCodecs
.text:00000152                 jnb     short loc_172
.text:00000154                 mov     eax, ds:?g_NumCodecs@@3IA ; uint g_NumCodecs
.text:00000159                 mov     ecx, [ebp+arg_0]
.text:0000015C                 mov     ds:?g_Codecs@@3PAPBUCCodecInfo@@A[eax*4], ecx ; CCodecInfo const * * g_Codecs
.text:00000163                 mov     edx, ds:?g_NumCodecs@@3IA ; uint g_NumCodecs
.text:00000169                 add     edx, 1
.text:0000016C                 mov     ds:?g_NumCodecs@@3IA, edx ; uint g_NumCodecs
.text:00000172
.text:00000172 loc_172:                                ; CODE XREF: RegisterCodec(CCodecInfo const *)+Aj
.text:00000172                 pop     ebp
.text:00000173                 retn    4
.text:00000173 ?RegisterCodec@@YGXPBUCCodecInfo@@@Z endp
.text:00000173
.text:00000173 ; ---------------------------------------------------------------------------
.text:00000176                 align 4
.text:00000178
.text:00000178 ; =============== S U B R O U T I N E =======================================
.text:00000178
.text:00000178 ; Attributes: bp-based frame
.text:00000178
.text:00000178 ; void __stdcall RegisterHasher(const struct CHasherInfo *)
.text:00000178                 public ?RegisterHasher@@YGXPBUCHasherInfo@@@Z
.text:00000178 ?RegisterHasher@@YGXPBUCHasherInfo@@@Z proc near
.text:00000178
.text:00000178 arg_0           = dword ptr  8
.text:00000178
.text:00000178                 push    ebp
.text:00000179                 mov     ebp, esp
.text:0000017B                 cmp     ds:?g_NumHashers@@3IA, 10h ; uint g_NumHashers
.text:00000182                 jnb     short loc_1A2
.text:00000184                 mov     eax, ds:?g_NumHashers@@3IA ; uint g_NumHashers
.text:00000189                 mov     ecx, [ebp+arg_0]
.text:0000018C                 mov     ds:?g_Hashers@@3PAPBUCHasherInfo@@A[eax*4], ecx ; CHasherInfo const * * g_Hashers
.text:00000193                 mov     edx, ds:?g_NumHashers@@3IA ; uint g_NumHashers
.text:00000199                 add     edx, 1
.text:0000019C                 mov     ds:?g_NumHashers@@3IA, edx ; uint g_NumHashers
.text:000001A2
.text:000001A2 loc_1A2:                                ; CODE XREF: RegisterHasher(CHasherInfo const *)+Aj
.text:000001A2                 pop     ebp
.text:000001A3                 retn    4
.text:000001A3 ?RegisterHasher@@YGXPBUCHasherInfo@@@Z endp
.text:000001A3
.text:000001A3 ; ---------------------------------------------------------------------------
.text:000001A6                 align 4
.text:000001A8
.text:000001A8 ; =============== S U B R O U T I N E =======================================
.text:000001A8
.text:000001A8 ; Attributes: bp-based frame
.text:000001A8
.text:000001A8 ; bool __stdcall FindMethod(const struct AString *, unsigned __int64 *, unsigned int *)
.text:000001A8                 public ?FindMethod@@YG_NABVAString@@AA_KAAI@Z
.text:000001A8 ?FindMethod@@YG_NABVAString@@AA_KAAI@Z proc near
.text:000001A8
.text:000001A8 var_8           = dword ptr -8
.text:000001A8 var_4           = dword ptr -4
.text:000001A8 arg_0           = dword ptr  8
.text:000001A8 arg_4           = dword ptr  0Ch
.text:000001A8 arg_8           = dword ptr  10h
.text:000001A8
.text:000001A8                 push    ebp
.text:000001A9                 mov     ebp, esp
.text:000001AB                 sub     esp, 8
.text:000001AE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000001B5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001BC                 mov     [ebp+var_4], 0
.text:000001C3                 jmp     short loc_1CE
.text:000001C5 ; ---------------------------------------------------------------------------
.text:000001C5
.text:000001C5 loc_1C5:                                ; CODE XREF: FindMethod(AString const &,unsigned __int64 &,uint &):loc_222j
.text:000001C5                 mov     eax, [ebp+var_4]
.text:000001C8                 add     eax, 1
.text:000001CB                 mov     [ebp+var_4], eax
.text:000001CE
.text:000001CE loc_1CE:                                ; CODE XREF: FindMethod(AString const &,unsigned __int64 &,uint &)+1Bj
.text:000001CE                 mov     ecx, [ebp+var_4]
.text:000001D1                 cmp     ecx, ds:?g_NumCodecs@@3IA ; uint g_NumCodecs
.text:000001D7                 jnb     short loc_224
.text:000001D9                 mov     edx, [ebp+var_4]
.text:000001DC                 mov     eax, ds:?g_Codecs@@3PAPBUCCodecInfo@@A[edx*4] ; CCodecInfo const * * g_Codecs
.text:000001E3                 mov     [ebp+var_8], eax
.text:000001E6                 mov     ecx, [ebp+var_8]
.text:000001E9                 mov     edx, [ecx+10h]
.text:000001EC                 push    edx             ; char *
.text:000001ED                 mov     ecx, [ebp+arg_0]
.text:000001F0                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000001F5                 push    eax             ; char *
.text:000001F6                 call    ?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z ; StringsAreEqualNoCase_Ascii(char const *,char const *)
.text:000001FB                 movzx   eax, al
.text:000001FE                 test    eax, eax
.text:00000200                 jz      short loc_222
.text:00000202                 mov     ecx, [ebp+arg_4]
.text:00000205                 mov     edx, [ebp+var_8]
.text:00000208                 mov     eax, [edx+8]
.text:0000020B                 mov     [ecx], eax
.text:0000020D                 mov     edx, [edx+0Ch]
.text:00000210                 mov     [ecx+4], edx
.text:00000213                 mov     eax, [ebp+arg_8]
.text:00000216                 mov     ecx, [ebp+var_8]
.text:00000219                 mov     edx, [ecx+14h]
.text:0000021C                 mov     [eax], edx
.text:0000021E                 mov     al, 1
.text:00000220                 jmp     short loc_226
.text:00000222 ; ---------------------------------------------------------------------------
.text:00000222
.text:00000222 loc_222:                                ; CODE XREF: FindMethod(AString const &,unsigned __int64 &,uint &)+58j
.text:00000222                 jmp     short loc_1C5
.text:00000224 ; ---------------------------------------------------------------------------
.text:00000224
.text:00000224 loc_224:                                ; CODE XREF: FindMethod(AString const &,unsigned __int64 &,uint &)+2Fj
.text:00000224                 xor     al, al
.text:00000226
.text:00000226 loc_226:                                ; CODE XREF: FindMethod(AString const &,unsigned __int64 &,uint &)+78j
.text:00000226                 add     esp, 8
.text:00000229                 cmp     ebp, esp
.text:0000022B                 call    __RTC_CheckEsp
.text:00000230                 mov     esp, ebp
.text:00000232                 pop     ebp
.text:00000233                 retn    0Ch
.text:00000233 ?FindMethod@@YG_NABVAString@@AA_KAAI@Z endp
.text:00000233
.text:00000233 ; ---------------------------------------------------------------------------
.text:00000236                 align 4
.text:00000238
.text:00000238 ; =============== S U B R O U T I N E =======================================
.text:00000238
.text:00000238 ; Attributes: bp-based frame
.text:00000238
.text:00000238 ; bool __stdcall FindMethod(unsigned __int64, struct AString *)
.text:00000238                 public ?FindMethod@@YG_N_KAAVAString@@@Z
.text:00000238 ?FindMethod@@YG_N_KAAVAString@@@Z proc near
.text:00000238
.text:00000238 var_C           = dword ptr -0Ch
.text:00000238 var_8           = dword ptr -8
.text:00000238 var_4           = dword ptr -4
.text:00000238 arg_0           = qword ptr  8
.text:00000238 arg_8           = dword ptr  10h
.text:00000238
.text:00000238                 push    ebp
.text:00000239                 mov     ebp, esp
.text:0000023B                 sub     esp, 0Ch
.text:0000023E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000245                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000024C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000253                 mov     ecx, [ebp+arg_8] ; this
.text:00000256                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:0000025B                 mov     [ebp+var_4], 0
.text:00000262                 jmp     short loc_26D
.text:00000264 ; ---------------------------------------------------------------------------
.text:00000264
.text:00000264 loc_264:                                ; CODE XREF: FindMethod(unsigned __int64,AString &):loc_2B4j
.text:00000264                 mov     eax, [ebp+var_4]
.text:00000267                 add     eax, 1
.text:0000026A                 mov     [ebp+var_4], eax
.text:0000026D
.text:0000026D loc_26D:                                ; CODE XREF: FindMethod(unsigned __int64,AString &)+2Aj
.text:0000026D                 mov     ecx, [ebp+var_4]
.text:00000270                 cmp     ecx, ds:?g_NumCodecs@@3IA ; uint g_NumCodecs
.text:00000276                 jnb     short loc_2B6
.text:00000278                 mov     edx, [ebp+var_4]
.text:0000027B                 mov     eax, ds:?g_Codecs@@3PAPBUCCodecInfo@@A[edx*4] ; CCodecInfo const * * g_Codecs
.text:00000282                 mov     [ebp+var_8], eax
.text:00000285                 mov     ecx, [ebp+var_8]
.text:00000288                 mov     [ebp+var_C], ecx
.text:0000028B                 mov     edx, [ebp+var_C]
.text:0000028E                 mov     eax, dword ptr [ebp+arg_0]
.text:00000291                 cmp     eax, [edx+8]
.text:00000294                 jnz     short loc_2B4
.text:00000296                 mov     ecx, [ebp+var_C]
.text:00000299                 mov     edx, dword ptr [ebp+arg_0+4]
.text:0000029C                 cmp     edx, [ecx+0Ch]
.text:0000029F                 jnz     short loc_2B4
.text:000002A1                 mov     eax, [ebp+var_8]
.text:000002A4                 mov     ecx, [eax+10h]
.text:000002A7                 push    ecx
.text:000002A8                 mov     ecx, [ebp+arg_8]
.text:000002AB                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:000002B0                 mov     al, 1
.text:000002B2                 jmp     short loc_2B8
.text:000002B4 ; ---------------------------------------------------------------------------
.text:000002B4
.text:000002B4 loc_2B4:                                ; CODE XREF: FindMethod(unsigned __int64,AString &)+5Cj
.text:000002B4                                         ; FindMethod(unsigned __int64,AString &)+67j
.text:000002B4                 jmp     short loc_264
.text:000002B6 ; ---------------------------------------------------------------------------
.text:000002B6
.text:000002B6 loc_2B6:                                ; CODE XREF: FindMethod(unsigned __int64,AString &)+3Ej
.text:000002B6                 xor     al, al
.text:000002B8
.text:000002B8 loc_2B8:                                ; CODE XREF: FindMethod(unsigned __int64,AString &)+7Aj
.text:000002B8                 add     esp, 0Ch
.text:000002BB                 cmp     ebp, esp
.text:000002BD                 call    __RTC_CheckEsp
.text:000002C2                 mov     esp, ebp
.text:000002C4                 pop     ebp
.text:000002C5                 retn    0Ch
.text:000002C5 ?FindMethod@@YG_N_KAAVAString@@@Z endp
.text:000002C5
.text:000002C8
.text:000002C8 ; =============== S U B R O U T I N E =======================================
.text:000002C8
.text:000002C8 ; Attributes: bp-based frame
.text:000002C8
.text:000002C8 ; bool __stdcall FindHashMethod(const struct AString *, unsigned __int64 *)
.text:000002C8                 public ?FindHashMethod@@YG_NABVAString@@AA_K@Z
.text:000002C8 ?FindHashMethod@@YG_NABVAString@@AA_K@Z proc near
.text:000002C8
.text:000002C8 var_8           = dword ptr -8
.text:000002C8 var_4           = dword ptr -4
.text:000002C8 arg_0           = dword ptr  8
.text:000002C8 arg_4           = dword ptr  0Ch
.text:000002C8
.text:000002C8                 push    ebp
.text:000002C9                 mov     ebp, esp
.text:000002CB                 sub     esp, 8
.text:000002CE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000002D5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002DC                 mov     [ebp+var_4], 0
.text:000002E3                 jmp     short loc_2EE
.text:000002E5 ; ---------------------------------------------------------------------------
.text:000002E5
.text:000002E5 loc_2E5:                                ; CODE XREF: FindHashMethod(AString const &,unsigned __int64 &):loc_337j
.text:000002E5                 mov     eax, [ebp+var_4]
.text:000002E8                 add     eax, 1
.text:000002EB                 mov     [ebp+var_4], eax
.text:000002EE
.text:000002EE loc_2EE:                                ; CODE XREF: FindHashMethod(AString const &,unsigned __int64 &)+1Bj
.text:000002EE                 mov     ecx, [ebp+var_4]
.text:000002F1                 cmp     ecx, ds:?g_NumHashers@@3IA ; uint g_NumHashers
.text:000002F7                 jnb     short loc_339
.text:000002F9                 mov     edx, [ebp+var_4]
.text:000002FC                 mov     eax, ds:?g_Hashers@@3PAPBUCHasherInfo@@A[edx*4] ; CHasherInfo const * * g_Hashers
.text:00000303                 mov     [ebp+var_8], eax
.text:00000306                 mov     ecx, [ebp+var_8]
.text:00000309                 mov     edx, [ecx+10h]
.text:0000030C                 push    edx             ; char *
.text:0000030D                 mov     ecx, [ebp+arg_0]
.text:00000310                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000315                 push    eax             ; char *
.text:00000316                 call    ?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z ; StringsAreEqualNoCase_Ascii(char const *,char const *)
.text:0000031B                 movzx   eax, al
.text:0000031E                 test    eax, eax
.text:00000320                 jz      short loc_337
.text:00000322                 mov     ecx, [ebp+arg_4]
.text:00000325                 mov     edx, [ebp+var_8]
.text:00000328                 mov     eax, [edx+8]
.text:0000032B                 mov     [ecx], eax
.text:0000032D                 mov     edx, [edx+0Ch]
.text:00000330                 mov     [ecx+4], edx
.text:00000333                 mov     al, 1
.text:00000335                 jmp     short loc_33B
.text:00000337 ; ---------------------------------------------------------------------------
.text:00000337
.text:00000337 loc_337:                                ; CODE XREF: FindHashMethod(AString const &,unsigned __int64 &)+58j
.text:00000337                 jmp     short loc_2E5
.text:00000339 ; ---------------------------------------------------------------------------
.text:00000339
.text:00000339 loc_339:                                ; CODE XREF: FindHashMethod(AString const &,unsigned __int64 &)+2Fj
.text:00000339                 xor     al, al
.text:0000033B
.text:0000033B loc_33B:                                ; CODE XREF: FindHashMethod(AString const &,unsigned __int64 &)+6Dj
.text:0000033B                 add     esp, 8
.text:0000033E                 cmp     ebp, esp
.text:00000340                 call    __RTC_CheckEsp
.text:00000345                 mov     esp, ebp
.text:00000347                 pop     ebp
.text:00000348                 retn    8
.text:00000348 ?FindHashMethod@@YG_NABVAString@@AA_K@Z endp
.text:00000348
.text:00000348 ; ---------------------------------------------------------------------------
.text:0000034B                 db 0Dh dup(0CCh)
.text:00000358
.text:00000358 ; =============== S U B R O U T I N E =======================================
.text:00000358
.text:00000358 ; Attributes: bp-based frame
.text:00000358
.text:00000358 ; void __stdcall GetHashMethods(class CRecordVector<unsigned __int64> &)
.text:00000358                 public ?GetHashMethods@@YGXAAV?$CRecordVector@_K@@@Z
.text:00000358 ?GetHashMethods@@YGXAAV?$CRecordVector@_K@@@Z proc near
.text:00000358
.text:00000358 var_4           = dword ptr -4
.text:00000358 arg_0           = dword ptr  8
.text:00000358
.text:00000358                 push    ebp
.text:00000359                 mov     ebp, esp
.text:0000035B                 push    ecx
.text:0000035C                 push    esi
.text:0000035D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000364                 mov     eax, ds:?g_NumHashers@@3IA ; uint g_NumHashers
.text:00000369                 push    eax
.text:0000036A                 mov     ecx, [ebp+arg_0]
.text:0000036D                 call    ?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::ClearAndSetSize(uint)
.text:00000372                 mov     [ebp+var_4], 0
.text:00000379                 jmp     short loc_384
.text:0000037B ; ---------------------------------------------------------------------------
.text:0000037B
.text:0000037B loc_37B:                                ; CODE XREF: GetHashMethods(CRecordVector<unsigned __int64> &)+58j
.text:0000037B                 mov     ecx, [ebp+var_4]
.text:0000037E                 add     ecx, 1
.text:00000381                 mov     [ebp+var_4], ecx
.text:00000384
.text:00000384 loc_384:                                ; CODE XREF: GetHashMethods(CRecordVector<unsigned __int64> &)+21j
.text:00000384                 mov     edx, [ebp+var_4]
.text:00000387                 cmp     edx, ds:?g_NumHashers@@3IA ; uint g_NumHashers
.text:0000038D                 jnb     short loc_3B2
.text:0000038F                 mov     eax, [ebp+var_4]
.text:00000392                 mov     esi, ds:?g_Hashers@@3PAPBUCHasherInfo@@A[eax*4] ; CHasherInfo const * * g_Hashers
.text:00000399                 mov     ecx, [ebp+var_4]
.text:0000039C                 push    ecx
.text:0000039D                 mov     ecx, [ebp+arg_0]
.text:000003A0                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:000003A5                 mov     edx, [esi+8]
.text:000003A8                 mov     [eax], edx
.text:000003AA                 mov     ecx, [esi+0Ch]
.text:000003AD                 mov     [eax+4], ecx
.text:000003B0                 jmp     short loc_37B
.text:000003B2 ; ---------------------------------------------------------------------------
.text:000003B2
.text:000003B2 loc_3B2:                                ; CODE XREF: GetHashMethods(CRecordVector<unsigned __int64> &)+35j
.text:000003B2                 pop     esi
.text:000003B3                 add     esp, 4
.text:000003B6                 cmp     ebp, esp
.text:000003B8                 call    __RTC_CheckEsp
.text:000003BD                 mov     esp, ebp
.text:000003BF                 pop     ebp
.text:000003C0                 retn    4
.text:000003C0 ?GetHashMethods@@YGXAAV?$CRecordVector@_K@@@Z endp
.text:000003C0
.text:000003C0 ; ---------------------------------------------------------------------------
.text:000003C3                 align 8
.text:000003C8
.text:000003C8 ; =============== S U B R O U T I N E =======================================
.text:000003C8
.text:000003C8 ; Attributes: bp-based frame
.text:000003C8
.text:000003C8 ; long __stdcall CreateCoder(unsigned __int64, bool, class CMyComPtr<struct ICompressFilter> &, struct CCreatedCoder &)
.text:000003C8                 public ?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@AAUCCreatedCoder@@@Z
.text:000003C8 ?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@AAUCCreatedCoder@@@Z proc near
.text:000003C8                                         ; CODE XREF: CreateCoder(unsigned __int64,bool,CCreatedCoder &)+69p
.text:000003C8                                         ; CreateFilter(unsigned __int64,bool,CMyComPtr<ICompressFilter> &)+63p
.text:000003C8
.text:000003C8 var_14          = dword ptr -14h
.text:000003C8 var_10          = dword ptr -10h
.text:000003C8 var_C           = dword ptr -0Ch
.text:000003C8 var_8           = dword ptr -8
.text:000003C8 var_4           = dword ptr -4
.text:000003C8 arg_0           = dword ptr  8
.text:000003C8 arg_4           = dword ptr  0Ch
.text:000003C8 arg_8           = byte ptr  10h
.text:000003C8 arg_C           = dword ptr  14h
.text:000003C8 arg_10          = dword ptr  18h
.text:000003C8
.text:000003C8                 push    ebp
.text:000003C9                 mov     ebp, esp
.text:000003CB                 sub     esp, 14h
.text:000003CE                 push    esi
.text:000003CF                 mov     eax, 0CCCCCCCCh
.text:000003D4                 mov     [ebp+var_14], eax
.text:000003D7                 mov     [ebp+var_10], eax
.text:000003DA                 mov     [ebp+var_C], eax
.text:000003DD                 mov     [ebp+var_8], eax
.text:000003E0                 mov     [ebp+var_4], eax
.text:000003E3                 mov     eax, [ebp+arg_10]
.text:000003E6                 mov     byte ptr [eax+8], 0
.text:000003EA                 mov     ecx, [ebp+arg_10]
.text:000003ED                 mov     byte ptr [ecx+9], 0
.text:000003F1                 mov     edx, [ebp+arg_10]
.text:000003F4                 mov     dword ptr [edx+0Ch], 1
.text:000003FB                 mov     [ebp+var_4], 0
.text:00000402                 jmp     short loc_40D
.text:00000404 ; ---------------------------------------------------------------------------
.text:00000404
.text:00000404 loc_404:                                ; CODE XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &):loc_52Dj
.text:00000404                 mov     eax, [ebp+var_4]
.text:00000407                 add     eax, 1
.text:0000040A                 mov     [ebp+var_4], eax
.text:0000040D
.text:0000040D loc_40D:                                ; CODE XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+3Aj
.text:0000040D                 mov     ecx, [ebp+var_4]
.text:00000410                 cmp     ecx, ds:?g_NumCodecs@@3IA ; uint g_NumCodecs
.text:00000416                 jnb     loc_532
.text:0000041C                 mov     edx, [ebp+var_4]
.text:0000041F                 mov     eax, ds:?g_Codecs@@3PAPBUCCodecInfo@@A[edx*4] ; CCodecInfo const * * g_Codecs
.text:00000426                 mov     [ebp+var_8], eax
.text:00000429                 mov     ecx, [ebp+var_8]
.text:0000042C                 mov     [ebp+var_14], ecx
.text:0000042F                 mov     edx, [ebp+var_14]
.text:00000432                 mov     eax, [edx+8]
.text:00000435                 cmp     eax, [ebp+arg_0]
.text:00000438                 jnz     loc_52D
.text:0000043E                 mov     ecx, [ebp+var_14]
.text:00000441                 mov     edx, [ecx+0Ch]
.text:00000444                 cmp     edx, [ebp+arg_4]
.text:00000447                 jnz     loc_52D
.text:0000044D                 movzx   eax, [ebp+arg_8]
.text:00000451                 test    eax, eax
.text:00000453                 jz      short loc_4C3
.text:00000455                 mov     ecx, [ebp+var_8]
.text:00000458                 cmp     dword ptr [ecx+4], 0
.text:0000045C                 jz      short loc_4C1
.text:0000045E                 mov     edx, [ebp+var_8]
.text:00000461                 mov     esi, esp
.text:00000463                 mov     eax, [edx+4]
.text:00000466                 call    eax
.text:00000468                 cmp     esi, esp
.text:0000046A                 call    __RTC_CheckEsp
.text:0000046F                 mov     [ebp+var_C], eax
.text:00000472                 mov     ecx, [ebp+var_8]
.text:00000475                 movzx   edx, byte ptr [ecx+18h]
.text:00000479                 test    edx, edx
.text:0000047B                 jz      short loc_48B
.text:0000047D                 mov     eax, [ebp+var_C]
.text:00000480                 push    eax
.text:00000481                 mov     ecx, [ebp+arg_C]
.text:00000484                 call    ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)
.text:00000489                 jmp     short loc_4BD
.text:0000048B ; ---------------------------------------------------------------------------
.text:0000048B
.text:0000048B loc_48B:                                ; CODE XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+B3j
.text:0000048B                 mov     ecx, [ebp+var_8]
.text:0000048E                 cmp     dword ptr [ecx+14h], 1
.text:00000492                 jnz     short loc_4A2
.text:00000494                 mov     edx, [ebp+var_C]
.text:00000497                 push    edx
.text:00000498                 mov     ecx, [ebp+arg_10]
.text:0000049B                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:000004A0                 jmp     short loc_4BD
.text:000004A2 ; ---------------------------------------------------------------------------
.text:000004A2
.text:000004A2 loc_4A2:                                ; CODE XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+CAj
.text:000004A2                 mov     eax, [ebp+var_C]
.text:000004A5                 push    eax
.text:000004A6                 mov     ecx, [ebp+arg_10]
.text:000004A9                 add     ecx, 4
.text:000004AC                 call    ??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@PAU1@@Z ; CMyComPtr<ICompressCoder2>::operator=(ICompressCoder2 *)
.text:000004B1                 mov     ecx, [ebp+arg_10]
.text:000004B4                 mov     edx, [ebp+var_8]
.text:000004B7                 mov     eax, [edx+14h]
.text:000004BA                 mov     [ecx+0Ch], eax
.text:000004BD
.text:000004BD loc_4BD:                                ; CODE XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+C1j
.text:000004BD                                         ; CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+D8j
.text:000004BD                 xor     eax, eax
.text:000004BF                 jmp     short loc_534
.text:000004C1 ; ---------------------------------------------------------------------------
.text:000004C1
.text:000004C1 loc_4C1:                                ; CODE XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+94j
.text:000004C1                 jmp     short loc_52D
.text:000004C3 ; ---------------------------------------------------------------------------
.text:000004C3
.text:000004C3 loc_4C3:                                ; CODE XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+8Bj
.text:000004C3                 mov     ecx, [ebp+var_8]
.text:000004C6                 cmp     dword ptr [ecx], 0
.text:000004C9                 jz      short loc_52D
.text:000004CB                 mov     edx, [ebp+var_8]
.text:000004CE                 mov     esi, esp
.text:000004D0                 mov     eax, [edx]
.text:000004D2                 call    eax
.text:000004D4                 cmp     esi, esp
.text:000004D6                 call    __RTC_CheckEsp
.text:000004DB                 mov     [ebp+var_10], eax
.text:000004DE                 mov     ecx, [ebp+var_8]
.text:000004E1                 movzx   edx, byte ptr [ecx+18h]
.text:000004E5                 test    edx, edx
.text:000004E7                 jz      short loc_4F7
.text:000004E9                 mov     eax, [ebp+var_10]
.text:000004EC                 push    eax
.text:000004ED                 mov     ecx, [ebp+arg_C]
.text:000004F0                 call    ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)
.text:000004F5                 jmp     short loc_529
.text:000004F7 ; ---------------------------------------------------------------------------
.text:000004F7
.text:000004F7 loc_4F7:                                ; CODE XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+11Fj
.text:000004F7                 mov     ecx, [ebp+var_8]
.text:000004FA                 cmp     dword ptr [ecx+14h], 1
.text:000004FE                 jnz     short loc_50E
.text:00000500                 mov     edx, [ebp+var_10]
.text:00000503                 push    edx
.text:00000504                 mov     ecx, [ebp+arg_10]
.text:00000507                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:0000050C                 jmp     short loc_529
.text:0000050E ; ---------------------------------------------------------------------------
.text:0000050E
.text:0000050E loc_50E:                                ; CODE XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+136j
.text:0000050E                 mov     eax, [ebp+var_10]
.text:00000511                 push    eax
.text:00000512                 mov     ecx, [ebp+arg_10]
.text:00000515                 add     ecx, 4
.text:00000518                 call    ??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@PAU1@@Z ; CMyComPtr<ICompressCoder2>::operator=(ICompressCoder2 *)
.text:0000051D                 mov     ecx, [ebp+arg_10]
.text:00000520                 mov     edx, [ebp+var_8]
.text:00000523                 mov     eax, [edx+14h]
.text:00000526                 mov     [ecx+0Ch], eax
.text:00000529
.text:00000529 loc_529:                                ; CODE XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+12Dj
.text:00000529                                         ; CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+144j
.text:00000529                 xor     eax, eax
.text:0000052B                 jmp     short loc_534
.text:0000052D ; ---------------------------------------------------------------------------
.text:0000052D
.text:0000052D loc_52D:                                ; CODE XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+70j
.text:0000052D                                         ; CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+7Fj ...
.text:0000052D                 jmp     loc_404
.text:00000532 ; ---------------------------------------------------------------------------
.text:00000532
.text:00000532 loc_532:                                ; CODE XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+4Ej
.text:00000532                 xor     eax, eax
.text:00000534
.text:00000534 loc_534:                                ; CODE XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+F7j
.text:00000534                                         ; CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+163j
.text:00000534                 pop     esi
.text:00000535                 add     esp, 14h
.text:00000538                 cmp     ebp, esp
.text:0000053A                 call    __RTC_CheckEsp
.text:0000053F                 mov     esp, ebp
.text:00000541                 pop     ebp
.text:00000542                 retn    14h
.text:00000542 ?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@AAUCCreatedCoder@@@Z endp
.text:00000542
.text:00000542 ; ---------------------------------------------------------------------------
.text:00000545                 align 4
.text:00000548
.text:00000548 ; =============== S U B R O U T I N E =======================================
.text:00000548
.text:00000548 ; Attributes: bp-based frame
.text:00000548
.text:00000548 ; __int32 __stdcall CreateCoder(unsigned __int64, bool, struct CCreatedCoder *)
.text:00000548                 public ?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z
.text:00000548 ?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z proc near
.text:00000548                                         ; CODE XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressCoder> &)+62p
.text:00000548
.text:00000548 var_30          = dword ptr -30h
.text:00000548 var_2C          = dword ptr -2Ch
.text:00000548 var_28          = dword ptr -28h
.text:00000548 var_24          = dword ptr -24h
.text:00000548 var_20          = dword ptr -20h
.text:00000548 var_1C          = dword ptr -1Ch
.text:00000548 var_18          = dword ptr -18h
.text:00000548 var_14          = dword ptr -14h
.text:00000548 var_10          = dword ptr -10h
.text:00000548 var_C           = dword ptr -0Ch
.text:00000548 var_4           = dword ptr -4
.text:00000548 arg_0           = qword ptr  8
.text:00000548 arg_8           = byte ptr  10h
.text:00000548 arg_C           = dword ptr  14h
.text:00000548
.text:00000548                 push    ebp
.text:00000549                 mov     ebp, esp
.text:0000054B                 push    0FFFFFFFFh
.text:0000054D                 push    offset __ehhandler$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z
.text:00000552                 mov     eax, large fs:0
.text:00000558                 push    eax
.text:00000559                 sub     esp, 24h
.text:0000055C                 mov     eax, 0CCCCCCCCh
.text:00000561                 mov     [ebp+var_30], eax
.text:00000564                 mov     [ebp+var_2C], eax
.text:00000567                 mov     [ebp+var_28], eax
.text:0000056A                 mov     [ebp+var_24], eax
.text:0000056D                 mov     [ebp+var_20], eax
.text:00000570                 mov     [ebp+var_1C], eax
.text:00000573                 mov     [ebp+var_18], eax
.text:00000576                 mov     [ebp+var_14], eax
.text:00000579                 mov     [ebp+var_10], eax
.text:0000057C                 mov     eax, dword ptr ds:___security_cookie
.text:00000581                 xor     eax, ebp
.text:00000583                 push    eax
.text:00000584                 lea     eax, [ebp+var_C]
.text:00000587                 mov     large fs:0, eax
.text:0000058D                 lea     ecx, [ebp+var_14]
.text:00000590                 call    ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>(void)
.text:00000595                 mov     [ebp+var_4], 0
.text:0000059C                 mov     eax, [ebp+arg_C]
.text:0000059F                 push    eax
.text:000005A0                 lea     ecx, [ebp+var_14]
.text:000005A3                 push    ecx
.text:000005A4                 movzx   edx, [ebp+arg_8]
.text:000005A8                 push    edx
.text:000005A9                 mov     eax, dword ptr [ebp+arg_0+4]
.text:000005AC                 push    eax
.text:000005AD                 mov     ecx, dword ptr [ebp+arg_0]
.text:000005B0                 push    ecx
.text:000005B1                 call    ?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@AAUCCreatedCoder@@@Z ; CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)
.text:000005B6                 mov     [ebp+var_1C], eax
.text:000005B9                 lea     ecx, [ebp+var_14]
.text:000005BC                 call    ??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator ICompressFilter *(void)
.text:000005C1                 test    eax, eax
.text:000005C3                 jz      short loc_62D
.text:000005C5                 mov     edx, [ebp+arg_C]
.text:000005C8                 mov     byte ptr [edx+9], 1
.text:000005CC                 push    98h ; 'ÿ'       ; unsigned int
.text:000005D1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000005D6                 add     esp, 4
.text:000005D9                 mov     [ebp+var_28], eax
.text:000005DC                 mov     byte ptr [ebp+var_4], 1
.text:000005E0                 cmp     [ebp+var_28], 0
.text:000005E4                 jz      short loc_5F8
.text:000005E6                 movzx   eax, [ebp+arg_8]
.text:000005EA                 push    eax             ; bool
.text:000005EB                 mov     ecx, [ebp+var_28] ; this
.text:000005EE                 call    ??0CFilterCoder@@QAE@_N@Z ; CFilterCoder::CFilterCoder(bool)
.text:000005F3                 mov     [ebp+var_30], eax
.text:000005F6                 jmp     short loc_5FF
.text:000005F8 ; ---------------------------------------------------------------------------
.text:000005F8
.text:000005F8 loc_5F8:                                ; CODE XREF: CreateCoder(unsigned __int64,bool,CCreatedCoder &)+9Cj
.text:000005F8                 mov     [ebp+var_30], 0
.text:000005FF
.text:000005FF loc_5FF:                                ; CODE XREF: CreateCoder(unsigned __int64,bool,CCreatedCoder &)+AEj
.text:000005FF                 mov     ecx, [ebp+var_30]
.text:00000602                 mov     [ebp+var_24], ecx
.text:00000605                 mov     byte ptr [ebp+var_4], 0
.text:00000609                 mov     edx, [ebp+var_24]
.text:0000060C                 mov     [ebp+var_20], edx
.text:0000060F                 mov     eax, [ebp+var_20]
.text:00000612                 push    eax
.text:00000613                 mov     ecx, [ebp+arg_C]
.text:00000616                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:0000061B                 lea     ecx, [ebp+var_14]
.text:0000061E                 push    ecx
.text:0000061F                 mov     ecx, [ebp+var_20]
.text:00000622                 add     ecx, 94h ; 'ö'
.text:00000628                 call    ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z ; CMyComPtr<ICompressFilter>::operator=(CMyComPtr<ICompressFilter> const &)
.text:0000062D
.text:0000062D loc_62D:                                ; CODE XREF: CreateCoder(unsigned __int64,bool,CCreatedCoder &)+7Bj
.text:0000062D                 mov     edx, [ebp+var_1C]
.text:00000630                 mov     [ebp+var_2C], edx
.text:00000633                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000063A                 lea     ecx, [ebp+var_14]
.text:0000063D                 call    ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text:00000642                 mov     eax, [ebp+var_2C]
.text:00000645                 push    edx
.text:00000646                 mov     ecx, ebp
.text:00000648                 push    eax
.text:00000649                 lea     edx, $LN11
.text:0000064F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000654                 pop     eax
.text:00000655                 pop     edx
.text:00000656                 mov     ecx, [ebp+var_C]
.text:00000659                 mov     large fs:0, ecx
.text:00000660                 pop     ecx
.text:00000661                 add     esp, 30h
.text:00000664                 cmp     ebp, esp
.text:00000666                 call    __RTC_CheckEsp
.text:0000066B                 mov     esp, ebp
.text:0000066D                 pop     ebp
.text:0000066E                 retn    10h
.text:0000066E ?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z endp
.text:0000066E
.text:0000066E ; ---------------------------------------------------------------------------
.text:00000671                 align 4
.text:00000674 $LN11           dd 1                    ; DATA XREF: CreateCoder(unsigned __int64,bool,CCreatedCoder &)+101o
.text:00000678                 dd offset $LN10
.text:0000067C $LN10           dd 0FFFFFFECh, 4        ; DATA XREF: .text:00000678o
.text:00000684                 dd offset $LN8          ; "filter"
.text:00000688 $LN8            db 'filter',0           ; DATA XREF: .text:00000684o
.text:0000068F                 db 9 dup(0CCh)
.text:00000698
.text:00000698 ; =============== S U B R O U T I N E =======================================
.text:00000698
.text:00000698 ; Attributes: bp-based frame
.text:00000698
.text:00000698 ; long __stdcall CreateCoder(unsigned __int64, bool, class CMyComPtr<struct ICompressCoder> &)
.text:00000698                 public ?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z
.text:00000698 ?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z proc near
.text:00000698
.text:00000698 var_2C          = dword ptr -2Ch
.text:00000698 var_28          = dword ptr -28h
.text:00000698 var_24          = dword ptr -24h
.text:00000698 var_20          = dword ptr -20h
.text:00000698 var_1C          = dword ptr -1Ch
.text:00000698 var_18          = dword ptr -18h
.text:00000698 var_14          = dword ptr -14h
.text:00000698 var_10          = dword ptr -10h
.text:00000698 var_C           = dword ptr -0Ch
.text:00000698 var_4           = dword ptr -4
.text:00000698 arg_0           = qword ptr  8
.text:00000698 arg_8           = byte ptr  10h
.text:00000698 arg_C           = dword ptr  14h
.text:00000698
.text:00000698                 push    ebp
.text:00000699                 mov     ebp, esp
.text:0000069B                 push    0FFFFFFFFh
.text:0000069D                 push    offset __ehhandler$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z
.text:000006A2                 mov     eax, large fs:0
.text:000006A8                 push    eax
.text:000006A9                 sub     esp, 20h
.text:000006AC                 mov     eax, 0CCCCCCCCh
.text:000006B1                 mov     [ebp+var_2C], eax
.text:000006B4                 mov     [ebp+var_28], eax
.text:000006B7                 mov     [ebp+var_24], eax
.text:000006BA                 mov     [ebp+var_20], eax
.text:000006BD                 mov     [ebp+var_1C], eax
.text:000006C0                 mov     [ebp+var_18], eax
.text:000006C3                 mov     [ebp+var_14], eax
.text:000006C6                 mov     [ebp+var_10], eax
.text:000006C9                 mov     eax, dword ptr ds:___security_cookie
.text:000006CE                 xor     eax, ebp
.text:000006D0                 push    eax
.text:000006D1                 lea     eax, [ebp+var_C]
.text:000006D4                 mov     large fs:0, eax
.text:000006DA                 lea     ecx, [ebp+var_20] ; this
.text:000006DD                 call    ??0CCreatedCoder@@QAE@XZ ; CCreatedCoder::CCreatedCoder(void)
.text:000006E2                 mov     [ebp+var_4], 0
.text:000006E9                 lea     eax, [ebp+var_20]
.text:000006EC                 push    eax             ; struct CCreatedCoder *
.text:000006ED                 movzx   ecx, [ebp+arg_8]
.text:000006F1                 push    ecx             ; bool
.text:000006F2                 mov     edx, dword ptr [ebp+arg_0+4]
.text:000006F5                 push    edx
.text:000006F6                 mov     eax, dword ptr [ebp+arg_0]
.text:000006F9                 push    eax             ; unsigned __int64
.text:000006FA                 call    ?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z ; CreateCoder(unsigned __int64,bool,CCreatedCoder &)
.text:000006FF                 mov     [ebp+var_28], eax
.text:00000702                 lea     ecx, [ebp+var_20]
.text:00000705                 push    ecx
.text:00000706                 mov     ecx, [ebp+arg_C]
.text:00000709                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z ; CMyComPtr<ICompressCoder>::operator=(CMyComPtr<ICompressCoder> const &)
.text:0000070E                 mov     edx, [ebp+var_28]
.text:00000711                 mov     [ebp+var_2C], edx
.text:00000714                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000071B                 lea     ecx, [ebp+var_20] ; this
.text:0000071E                 call    ??1CCreatedCoder@@QAE@XZ ; CCreatedCoder::~CCreatedCoder(void)
.text:00000723                 mov     eax, [ebp+var_2C]
.text:00000726                 push    edx
.text:00000727                 mov     ecx, ebp
.text:00000729                 push    eax
.text:0000072A                 lea     edx, $LN7
.text:00000730                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000735                 pop     eax
.text:00000736                 pop     edx
.text:00000737                 mov     ecx, [ebp+var_C]
.text:0000073A                 mov     large fs:0, ecx
.text:00000741                 pop     ecx
.text:00000742                 add     esp, 2Ch
.text:00000745                 cmp     ebp, esp
.text:00000747                 call    __RTC_CheckEsp
.text:0000074C                 mov     esp, ebp
.text:0000074E                 pop     ebp
.text:0000074F                 retn    10h
.text:0000074F ?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z endp
.text:0000074F
.text:0000074F ; ---------------------------------------------------------------------------
.text:00000752                 align 4
.text:00000754 $LN7            dd 1                    ; DATA XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressCoder> &)+92o
.text:00000758                 dd offset $LN6
.text:0000075C $LN6            dd 0FFFFFFE0h, 10h      ; DATA XREF: .text:00000758o
.text:00000764                 dd offset $LN4
.text:00000768 $LN4            dd 646F63h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00000764o
.text:00000778
.text:00000778 ; =============== S U B R O U T I N E =======================================
.text:00000778
.text:00000778 ; Attributes: bp-based frame
.text:00000778
.text:00000778 ; long __stdcall CreateFilter(unsigned __int64, bool, class CMyComPtr<struct ICompressFilter> &)
.text:00000778                 public ?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z
.text:00000778 ?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z proc near
.text:00000778
.text:00000778 var_28          = dword ptr -28h
.text:00000778 var_24          = dword ptr -24h
.text:00000778 var_20          = dword ptr -20h
.text:00000778 var_1C          = dword ptr -1Ch
.text:00000778 var_18          = dword ptr -18h
.text:00000778 var_14          = dword ptr -14h
.text:00000778 var_10          = dword ptr -10h
.text:00000778 var_C           = dword ptr -0Ch
.text:00000778 var_4           = dword ptr -4
.text:00000778 arg_0           = dword ptr  8
.text:00000778 arg_4           = dword ptr  0Ch
.text:00000778 arg_8           = byte ptr  10h
.text:00000778 arg_C           = dword ptr  14h
.text:00000778
.text:00000778                 push    ebp
.text:00000779                 mov     ebp, esp
.text:0000077B                 push    0FFFFFFFFh
.text:0000077D                 push    offset __ehhandler$?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z
.text:00000782                 mov     eax, large fs:0
.text:00000788                 push    eax
.text:00000789                 sub     esp, 1Ch
.text:0000078C                 mov     eax, 0CCCCCCCCh
.text:00000791                 mov     [ebp+var_28], eax
.text:00000794                 mov     [ebp+var_24], eax
.text:00000797                 mov     [ebp+var_20], eax
.text:0000079A                 mov     [ebp+var_1C], eax
.text:0000079D                 mov     [ebp+var_18], eax
.text:000007A0                 mov     [ebp+var_14], eax
.text:000007A3                 mov     [ebp+var_10], eax
.text:000007A6                 mov     eax, dword ptr ds:___security_cookie
.text:000007AB                 xor     eax, ebp
.text:000007AD                 push    eax
.text:000007AE                 lea     eax, [ebp+var_C]
.text:000007B1                 mov     large fs:0, eax
.text:000007B7                 lea     ecx, [ebp+var_20] ; this
.text:000007BA                 call    ??0CCreatedCoder@@QAE@XZ ; CCreatedCoder::CCreatedCoder(void)
.text:000007BF                 mov     [ebp+var_4], 0
.text:000007C6                 lea     eax, [ebp+var_20]
.text:000007C9                 push    eax
.text:000007CA                 mov     ecx, [ebp+arg_C]
.text:000007CD                 push    ecx
.text:000007CE                 movzx   edx, [ebp+arg_8]
.text:000007D2                 push    edx
.text:000007D3                 mov     eax, [ebp+arg_4]
.text:000007D6                 push    eax
.text:000007D7                 mov     ecx, [ebp+arg_0]
.text:000007DA                 push    ecx
.text:000007DB                 call    ?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@AAUCCreatedCoder@@@Z ; CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)
.text:000007E0                 mov     [ebp+var_28], eax
.text:000007E3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000007EA                 lea     ecx, [ebp+var_20] ; this
.text:000007ED                 call    ??1CCreatedCoder@@QAE@XZ ; CCreatedCoder::~CCreatedCoder(void)
.text:000007F2                 mov     eax, [ebp+var_28]
.text:000007F5                 push    edx
.text:000007F6                 mov     ecx, ebp
.text:000007F8                 push    eax
.text:000007F9                 lea     edx, $LN7_0
.text:000007FF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000804                 pop     eax
.text:00000805                 pop     edx
.text:00000806                 mov     ecx, [ebp+var_C]
.text:00000809                 mov     large fs:0, ecx
.text:00000810                 pop     ecx
.text:00000811                 add     esp, 28h
.text:00000814                 cmp     ebp, esp
.text:00000816                 call    __RTC_CheckEsp
.text:0000081B                 mov     esp, ebp
.text:0000081D                 pop     ebp
.text:0000081E                 retn    10h
.text:0000081E ?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z endp
.text:0000081E
.text:0000081E ; ---------------------------------------------------------------------------
.text:00000821                 align 4
.text:00000824 $LN7_0          dd 1                    ; DATA XREF: CreateFilter(unsigned __int64,bool,CMyComPtr<ICompressFilter> &)+81o
.text:00000828                 dd offset $LN6_0
.text:0000082C $LN6_0          dd 0FFFFFFE0h, 10h      ; DATA XREF: .text:00000828o
.text:00000834                 dd offset $LN4_0
.text:00000838 $LN4_0          dd 646F63h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00000834o
.text:00000848
.text:00000848 ; =============== S U B R O U T I N E =======================================
.text:00000848
.text:00000848 ; Attributes: bp-based frame
.text:00000848
.text:00000848 ; int __stdcall CreateHasher(int, int, AString *, int)
.text:00000848                 public ?CreateHasher@@YGJ_KAAVAString@@AAV?$CMyComPtr@UIHasher@@@@@Z
.text:00000848 ?CreateHasher@@YGJ_KAAVAString@@AAV?$CMyComPtr@UIHasher@@@@@Z proc near
.text:00000848
.text:00000848 var_C           = dword ptr -0Ch
.text:00000848 var_8           = dword ptr -8
.text:00000848 var_4           = dword ptr -4
.text:00000848 arg_0           = dword ptr  8
.text:00000848 arg_4           = dword ptr  0Ch
.text:00000848 arg_8           = dword ptr  10h
.text:00000848 arg_C           = dword ptr  14h
.text:00000848
.text:00000848                 push    ebp
.text:00000849                 mov     ebp, esp
.text:0000084B                 sub     esp, 0Ch
.text:0000084E                 push    esi
.text:0000084F                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000856                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000085D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000864                 mov     ecx, [ebp+arg_8] ; this
.text:00000867                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:0000086C                 mov     [ebp+var_4], 0
.text:00000873                 jmp     short loc_87E
.text:00000875 ; ---------------------------------------------------------------------------
.text:00000875
.text:00000875 loc_875:                                ; CODE XREF: CreateHasher(unsigned __int64,AString &,CMyComPtr<IHasher> &):loc_8DCj
.text:00000875                 mov     eax, [ebp+var_4]
.text:00000878                 add     eax, 1
.text:0000087B                 mov     [ebp+var_4], eax
.text:0000087E
.text:0000087E loc_87E:                                ; CODE XREF: CreateHasher(unsigned __int64,AString &,CMyComPtr<IHasher> &)+2Bj
.text:0000087E                 mov     ecx, [ebp+var_4]
.text:00000881                 cmp     ecx, ds:?g_NumHashers@@3IA ; uint g_NumHashers
.text:00000887                 jnb     short loc_8DE
.text:00000889                 mov     edx, [ebp+var_4]
.text:0000088C                 mov     eax, ds:?g_Hashers@@3PAPBUCHasherInfo@@A[edx*4] ; CHasherInfo const * * g_Hashers
.text:00000893                 mov     [ebp+var_8], eax
.text:00000896                 mov     ecx, [ebp+var_8]
.text:00000899                 mov     [ebp+var_C], ecx
.text:0000089C                 mov     edx, [ebp+var_C]
.text:0000089F                 mov     eax, [edx+8]
.text:000008A2                 cmp     eax, [ebp+arg_0]
.text:000008A5                 jnz     short loc_8DC
.text:000008A7                 mov     ecx, [ebp+var_C]
.text:000008AA                 mov     edx, [ecx+0Ch]
.text:000008AD                 cmp     edx, [ebp+arg_4]
.text:000008B0                 jnz     short loc_8DC
.text:000008B2                 mov     eax, [ebp+var_8]
.text:000008B5                 mov     esi, esp
.text:000008B7                 mov     ecx, [eax]
.text:000008B9                 call    ecx
.text:000008BB                 cmp     esi, esp
.text:000008BD                 call    __RTC_CheckEsp
.text:000008C2                 push    eax
.text:000008C3                 mov     ecx, [ebp+arg_C]
.text:000008C6                 call    ??4?$CMyComPtr@UIHasher@@@@QAEPAUIHasher@@PAU1@@Z ; CMyComPtr<IHasher>::operator=(IHasher *)
.text:000008CB                 mov     edx, [ebp+var_8]
.text:000008CE                 mov     eax, [edx+10h]
.text:000008D1                 push    eax
.text:000008D2                 mov     ecx, [ebp+arg_8]
.text:000008D5                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:000008DA                 jmp     short loc_8DE
.text:000008DC ; ---------------------------------------------------------------------------
.text:000008DC
.text:000008DC loc_8DC:                                ; CODE XREF: CreateHasher(unsigned __int64,AString &,CMyComPtr<IHasher> &)+5Dj
.text:000008DC                                         ; CreateHasher(unsigned __int64,AString &,CMyComPtr<IHasher> &)+68j
.text:000008DC                 jmp     short loc_875
.text:000008DE ; ---------------------------------------------------------------------------
.text:000008DE
.text:000008DE loc_8DE:                                ; CODE XREF: CreateHasher(unsigned __int64,AString &,CMyComPtr<IHasher> &)+3Fj
.text:000008DE                                         ; CreateHasher(unsigned __int64,AString &,CMyComPtr<IHasher> &)+92j
.text:000008DE                 xor     eax, eax
.text:000008E0                 pop     esi
.text:000008E1                 add     esp, 0Ch
.text:000008E4                 cmp     ebp, esp
.text:000008E6                 call    __RTC_CheckEsp
.text:000008EB                 mov     esp, ebp
.text:000008ED                 pop     ebp
.text:000008EE                 retn    10h
.text:000008EE ?CreateHasher@@YGJ_KAAVAString@@AAV?$CMyComPtr@UIHasher@@@@@Z endp
.text:000008EE
.text:000008EE ; ---------------------------------------------------------------------------
.text:000008F1                 align 4
.text:000008F1 _text           ends
.text:000008F1
.rtc$TMZ:000008F4 ; ===========================================================================
.rtc$TMZ:000008F4
.rtc$TMZ:000008F4 ; Segment type: Pure data
.rtc$TMZ:000008F4 ; Segment permissions: Read
.rtc$TMZ:000008F4 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000008F4                 assume cs:_rtc$TMZ
.rtc$TMZ:000008F4                 ;org 8F4h
.rtc$TMZ:000008F4 ; COMDAT (pick any)
.rtc$TMZ:000008F4 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000008F4 _rtc$TMZ        ends
.rtc$TMZ:000008F4
.rtc$IMZ:000008F8 ; ===========================================================================
.rtc$IMZ:000008F8
.rtc$IMZ:000008F8 ; Segment type: Pure data
.rtc$IMZ:000008F8 ; Segment permissions: Read
.rtc$IMZ:000008F8 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000008F8                 assume cs:_rtc$IMZ
.rtc$IMZ:000008F8                 ;org 8F8h
.rtc$IMZ:000008F8 ; COMDAT (pick any)
.rtc$IMZ:000008F8 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000008F8 _rtc$IMZ        ends
.rtc$IMZ:000008F8
.text:000008FC ; ===========================================================================
.text:000008FC
.text:000008FC ; Segment type: Pure code
.text:000008FC ; Segment permissions: Read/Execute
.text:000008FC _text           segment para public 'CODE' use32
.text:000008FC                 assume cs:_text
.text:000008FC                 ;org 8FCh
.text:000008FC ; COMDAT (pick any)
.text:000008FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000008FC
.text:000008FC ; =============== S U B R O U T I N E =======================================
.text:000008FC
.text:000008FC ; Attributes: bp-based frame
.text:000008FC
.text:000008FC ; public: __thiscall AString::operator char const *(void)const
.text:000008FC                 public ??BAString@@QBEPBDXZ
.text:000008FC ??BAString@@QBEPBDXZ proc near          ; CODE XREF: FindMethod(AString const &,unsigned __int64 &,uint &)+48p
.text:000008FC                                         ; FindHashMethod(AString const &,unsigned __int64 &)+48p
.text:000008FC
.text:000008FC var_4           = dword ptr -4
.text:000008FC
.text:000008FC                 push    ebp
.text:000008FD                 mov     ebp, esp
.text:000008FF                 push    ecx
.text:00000900                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000907                 mov     [ebp+var_4], ecx
.text:0000090A                 mov     eax, [ebp+var_4]
.text:0000090D                 mov     eax, [eax]
.text:0000090F                 mov     esp, ebp
.text:00000911                 pop     ebp
.text:00000912                 retn
.text:00000912 ??BAString@@QBEPBDXZ endp
.text:00000912
.text:00000912 ; ---------------------------------------------------------------------------
.text:00000913                 align 4
.text:00000913 _text           ends
.text:00000913
.text:00000914 ; ===========================================================================
.text:00000914
.text:00000914 ; Segment type: Pure code
.text:00000914 ; Segment permissions: Read/Execute
.text:00000914 _text           segment para public 'CODE' use32
.text:00000914                 assume cs:_text
.text:00000914                 ;org 914h
.text:00000914 ; COMDAT (pick any)
.text:00000914                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000914
.text:00000914 ; =============== S U B R O U T I N E =======================================
.text:00000914
.text:00000914 ; Attributes: bp-based frame
.text:00000914
.text:00000914 ; void __thiscall AString::Empty(AString *__hidden this)
.text:00000914                 public ?Empty@AString@@QAEXXZ
.text:00000914 ?Empty@AString@@QAEXXZ proc near        ; CODE XREF: FindMethod(unsigned __int64,AString &)+1Ep
.text:00000914                                         ; CreateHasher(unsigned __int64,AString &,CMyComPtr<IHasher> &)+1Fp
.text:00000914
.text:00000914 var_4           = dword ptr -4
.text:00000914
.text:00000914                 push    ebp
.text:00000915                 mov     ebp, esp
.text:00000917                 push    ecx
.text:00000918                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000091F                 mov     [ebp+var_4], ecx
.text:00000922                 mov     eax, [ebp+var_4]
.text:00000925                 mov     dword ptr [eax+4], 0
.text:0000092C                 mov     ecx, [ebp+var_4]
.text:0000092F                 mov     edx, [ecx]
.text:00000931                 mov     byte ptr [edx], 0
.text:00000934                 mov     esp, ebp
.text:00000936                 pop     ebp
.text:00000937                 retn
.text:00000937 ?Empty@AString@@QAEXXZ endp
.text:00000937
.text:00000937 _text           ends
.text:00000937
.text$x:00000938 ; ===========================================================================
.text$x:00000938
.text$x:00000938 ; Segment type: Pure code
.text$x:00000938 ; Segment permissions: Read/Execute
.text$x:00000938 _text$x         segment para public 'CODE' use32
.text$x:00000938                 assume cs:_text$x
.text$x:00000938                 ;org 938h
.text$x:00000938                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00000938
.text$x:00000938 ; =============== S U B R O U T I N E =======================================
.text$x:00000938
.text$x:00000938
.text$x:00000938 __unwindfunclet$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z$0 proc near
.text$x:00000938                                         ; DATA XREF: .xdata$x:000009B0o
.text$x:00000938                 lea     ecx, [ebp-14h]
.text$x:0000093B                 jmp     ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)
.text$x:0000093B __unwindfunclet$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z$0 endp
.text$x:0000093B
.text$x:00000940
.text$x:00000940 ; =============== S U B R O U T I N E =======================================
.text$x:00000940
.text$x:00000940
.text$x:00000940 __unwindfunclet$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z$1 proc near
.text$x:00000940                                         ; DATA XREF: .xdata$x:000009B8o
.text$x:00000940                 mov     eax, [ebp-28h]
.text$x:00000943                 push    eax             ; void *
.text$x:00000944                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000949                 pop     ecx
.text$x:0000094A                 retn
.text$x:0000094A __unwindfunclet$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z$1 endp
.text$x:0000094A
.text$x:0000094B
.text$x:0000094B ; =============== S U B R O U T I N E =======================================
.text$x:0000094B
.text$x:0000094B
.text$x:0000094B __ehhandler$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z proc near
.text$x:0000094B                                         ; DATA XREF: CreateCoder(unsigned __int64,bool,CCreatedCoder &)+5o
.text$x:0000094B
.text$x:0000094B arg_4           = dword ptr  8
.text$x:0000094B
.text$x:0000094B                 mov     edx, [esp+arg_4]
.text$x:0000094F                 lea     eax, [edx+0Ch]
.text$x:00000952                 mov     ecx, [edx-28h]
.text$x:00000955                 xor     ecx, eax
.text$x:00000957                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000095C                 mov     eax, offset __ehfuncinfo$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z
.text$x:00000961                 jmp     ___CxxFrameHandler3
.text$x:00000961 __ehhandler$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z endp
.text$x:00000961
.text$x:00000966
.text$x:00000966 ; =============== S U B R O U T I N E =======================================
.text$x:00000966
.text$x:00000966
.text$x:00000966 __unwindfunclet$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z$0 proc near
.text$x:00000966                                         ; DATA XREF: .xdata$x:000009E4o
.text$x:00000966                 lea     ecx, [ebp-20h]  ; this
.text$x:00000969                 jmp     ??1CCreatedCoder@@QAE@XZ ; CCreatedCoder::~CCreatedCoder(void)
.text$x:00000969 __unwindfunclet$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z$0 endp
.text$x:00000969
.text$x:0000096E
.text$x:0000096E ; =============== S U B R O U T I N E =======================================
.text$x:0000096E
.text$x:0000096E
.text$x:0000096E __ehhandler$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z proc near
.text$x:0000096E                                         ; DATA XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressCoder> &)+5o
.text$x:0000096E
.text$x:0000096E arg_4           = dword ptr  8
.text$x:0000096E
.text$x:0000096E                 mov     edx, [esp+arg_4]
.text$x:00000972                 lea     eax, [edx+0Ch]
.text$x:00000975                 mov     ecx, [edx-24h]
.text$x:00000978                 xor     ecx, eax
.text$x:0000097A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000097F                 mov     eax, offset __ehfuncinfo$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z
.text$x:00000984                 jmp     ___CxxFrameHandler3
.text$x:00000984 __ehhandler$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z endp
.text$x:00000984
.text$x:00000989
.text$x:00000989 ; =============== S U B R O U T I N E =======================================
.text$x:00000989
.text$x:00000989
.text$x:00000989 __unwindfunclet$?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z$0 proc near
.text$x:00000989                                         ; DATA XREF: .xdata$x:00000A10o
.text$x:00000989                 lea     ecx, [ebp-20h]  ; this
.text$x:0000098C                 jmp     ??1CCreatedCoder@@QAE@XZ ; CCreatedCoder::~CCreatedCoder(void)
.text$x:0000098C __unwindfunclet$?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z$0 endp
.text$x:0000098C
.text$x:00000991
.text$x:00000991 ; =============== S U B R O U T I N E =======================================
.text$x:00000991
.text$x:00000991
.text$x:00000991 __ehhandler$?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z proc near
.text$x:00000991                                         ; DATA XREF: CreateFilter(unsigned __int64,bool,CMyComPtr<ICompressFilter> &)+5o
.text$x:00000991
.text$x:00000991 arg_4           = dword ptr  8
.text$x:00000991
.text$x:00000991                 mov     edx, [esp+arg_4]
.text$x:00000995                 lea     eax, [edx+0Ch]
.text$x:00000998                 mov     ecx, [edx-20h]
.text$x:0000099B                 xor     ecx, eax
.text$x:0000099D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000009A2                 mov     eax, offset __ehfuncinfo$?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z
.text$x:000009A7                 jmp     ___CxxFrameHandler3
.text$x:000009A7 __ehhandler$?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z endp
.text$x:000009A7
.text$x:000009A7 _text$x         ends
.text$x:000009A7
.xdata$x:000009AC ; ===========================================================================
.xdata$x:000009AC
.xdata$x:000009AC ; Segment type: Pure data
.xdata$x:000009AC ; Segment permissions: Read
.xdata$x:000009AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000009AC                 assume cs:_xdata$x
.xdata$x:000009AC                 ;org 9ACh
.xdata$x:000009AC __unwindtable$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z db 0FFh
.xdata$x:000009AC                                         ; DATA XREF: .xdata$x:000009C4o
.xdata$x:000009AD                 db 0FFh
.xdata$x:000009AE                 db 0FFh
.xdata$x:000009AF                 db 0FFh
.xdata$x:000009B0                 dd offset __unwindfunclet$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z$0
.xdata$x:000009B4                 align 8
.xdata$x:000009B8                 dd offset __unwindfunclet$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z$1
.xdata$x:000009BC __ehfuncinfo$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z db  22h ; "
.xdata$x:000009BC                                         ; DATA XREF: __ehhandler$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z+11o
.xdata$x:000009BD                 db    5
.xdata$x:000009BE                 db  93h ; ô
.xdata$x:000009BF                 db  19h
.xdata$x:000009C0                 db    2
.xdata$x:000009C1                 db    0
.xdata$x:000009C2                 db    0
.xdata$x:000009C3                 db    0
.xdata$x:000009C4                 dd offset __unwindtable$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z
.xdata$x:000009C8                 db    0
.xdata$x:000009C9                 db    0
.xdata$x:000009CA                 db    0
.xdata$x:000009CB                 db    0
.xdata$x:000009CC                 db    0
.xdata$x:000009CD                 db    0
.xdata$x:000009CE                 db    0
.xdata$x:000009CF                 db    0
.xdata$x:000009D0                 db    0
.xdata$x:000009D1                 db    0
.xdata$x:000009D2                 db    0
.xdata$x:000009D3                 db    0
.xdata$x:000009D4                 db    0
.xdata$x:000009D5                 db    0
.xdata$x:000009D6                 db    0
.xdata$x:000009D7                 db    0
.xdata$x:000009D8                 db    0
.xdata$x:000009D9                 db    0
.xdata$x:000009DA                 db    0
.xdata$x:000009DB                 db    0
.xdata$x:000009DC                 db    1
.xdata$x:000009DD                 db    0
.xdata$x:000009DE                 db    0
.xdata$x:000009DF                 db    0
.xdata$x:000009E0 __unwindtable$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z db 0FFh
.xdata$x:000009E0                                         ; DATA XREF: .xdata$x:000009F0o
.xdata$x:000009E1                 db 0FFh
.xdata$x:000009E2                 db 0FFh
.xdata$x:000009E3                 db 0FFh
.xdata$x:000009E4                 dd offset __unwindfunclet$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z$0
.xdata$x:000009E8 __ehfuncinfo$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z db  22h ; "
.xdata$x:000009E8                                         ; DATA XREF: __ehhandler$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z+11o
.xdata$x:000009E9                 db    5
.xdata$x:000009EA                 db  93h ; ô
.xdata$x:000009EB                 db  19h
.xdata$x:000009EC                 db    1
.xdata$x:000009ED                 db    0
.xdata$x:000009EE                 db    0
.xdata$x:000009EF                 db    0
.xdata$x:000009F0                 dd offset __unwindtable$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z
.xdata$x:000009F4                 db    0
.xdata$x:000009F5                 db    0
.xdata$x:000009F6                 db    0
.xdata$x:000009F7                 db    0
.xdata$x:000009F8                 db    0
.xdata$x:000009F9                 db    0
.xdata$x:000009FA                 db    0
.xdata$x:000009FB                 db    0
.xdata$x:000009FC                 db    0
.xdata$x:000009FD                 db    0
.xdata$x:000009FE                 db    0
.xdata$x:000009FF                 db    0
.xdata$x:00000A00                 db    0
.xdata$x:00000A01                 db    0
.xdata$x:00000A02                 db    0
.xdata$x:00000A03                 db    0
.xdata$x:00000A04                 db    0
.xdata$x:00000A05                 db    0
.xdata$x:00000A06                 db    0
.xdata$x:00000A07                 db    0
.xdata$x:00000A08                 db    1
.xdata$x:00000A09                 db    0
.xdata$x:00000A0A                 db    0
.xdata$x:00000A0B                 db    0
.xdata$x:00000A0C __unwindtable$?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z db 0FFh
.xdata$x:00000A0C                                         ; DATA XREF: .xdata$x:00000A1Co
.xdata$x:00000A0D                 db 0FFh
.xdata$x:00000A0E                 db 0FFh
.xdata$x:00000A0F                 db 0FFh
.xdata$x:00000A10                 dd offset __unwindfunclet$?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z$0
.xdata$x:00000A14 __ehfuncinfo$?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z db  22h ; "
.xdata$x:00000A14                                         ; DATA XREF: __ehhandler$?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z+11o
.xdata$x:00000A15                 db    5
.xdata$x:00000A16                 db  93h ; ô
.xdata$x:00000A17                 db  19h
.xdata$x:00000A18                 db    1
.xdata$x:00000A19                 db    0
.xdata$x:00000A1A                 db    0
.xdata$x:00000A1B                 db    0
.xdata$x:00000A1C                 dd offset __unwindtable$?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z
.xdata$x:00000A20                 db    0
.xdata$x:00000A21                 db    0
.xdata$x:00000A22                 db    0
.xdata$x:00000A23                 db    0
.xdata$x:00000A24                 db    0
.xdata$x:00000A25                 db    0
.xdata$x:00000A26                 db    0
.xdata$x:00000A27                 db    0
.xdata$x:00000A28                 db    0
.xdata$x:00000A29                 db    0
.xdata$x:00000A2A                 db    0
.xdata$x:00000A2B                 db    0
.xdata$x:00000A2C                 db    0
.xdata$x:00000A2D                 db    0
.xdata$x:00000A2E                 db    0
.xdata$x:00000A2F                 db    0
.xdata$x:00000A30                 db    0
.xdata$x:00000A31                 db    0
.xdata$x:00000A32                 db    0
.xdata$x:00000A33                 db    0
.xdata$x:00000A34                 db    1
.xdata$x:00000A35                 db    0
.xdata$x:00000A36                 db    0
.xdata$x:00000A37                 db    0
.xdata$x:00000A37 _xdata$x        ends
.xdata$x:00000A37
.text:00000A38 ; ===========================================================================
.text:00000A38
.text:00000A38 ; Segment type: Pure code
.text:00000A38 ; Segment permissions: Read/Execute
.text:00000A38 _text           segment para public 'CODE' use32
.text:00000A38                 assume cs:_text
.text:00000A38                 ;org 0A38h
.text:00000A38 ; COMDAT (pick any)
.text:00000A38                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000A38
.text:00000A38 ; =============== S U B R O U T I N E =======================================
.text:00000A38
.text:00000A38 ; Attributes: bp-based frame
.text:00000A38
.text:00000A38 ; _DWORD __thiscall CCreatedCoder::CCreatedCoder(CCreatedCoder *__hidden this)
.text:00000A38                 public ??0CCreatedCoder@@QAE@XZ
.text:00000A38 ??0CCreatedCoder@@QAE@XZ proc near      ; CODE XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressCoder> &)+45p
.text:00000A38                                         ; CreateFilter(unsigned __int64,bool,CMyComPtr<ICompressFilter> &)+42p
.text:00000A38
.text:00000A38 var_10          = dword ptr -10h
.text:00000A38 var_C           = dword ptr -0Ch
.text:00000A38 var_4           = dword ptr -4
.text:00000A38
.text:00000A38                 push    ebp
.text:00000A39                 mov     ebp, esp
.text:00000A3B                 push    0FFFFFFFFh
.text:00000A3D                 push    offset __ehhandler$??0CCreatedCoder@@QAE@XZ
.text:00000A42                 mov     eax, large fs:0
.text:00000A48                 push    eax
.text:00000A49                 push    ecx
.text:00000A4A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000A51                 mov     eax, dword ptr ds:___security_cookie
.text:00000A56                 xor     eax, ebp
.text:00000A58                 push    eax
.text:00000A59                 lea     eax, [ebp+var_C]
.text:00000A5C                 mov     large fs:0, eax
.text:00000A62                 mov     [ebp+var_10], ecx
.text:00000A65                 mov     ecx, [ebp+var_10]
.text:00000A68                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(void)
.text:00000A6D                 mov     [ebp+var_4], 0
.text:00000A74                 mov     ecx, [ebp+var_10]
.text:00000A77                 add     ecx, 4
.text:00000A7A                 call    ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>(void)
.text:00000A7F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000A86                 mov     eax, [ebp+var_10]
.text:00000A89                 mov     ecx, [ebp+var_C]
.text:00000A8C                 mov     large fs:0, ecx
.text:00000A93                 pop     ecx
.text:00000A94                 add     esp, 10h
.text:00000A97                 cmp     ebp, esp
.text:00000A99                 call    __RTC_CheckEsp
.text:00000A9E                 mov     esp, ebp
.text:00000AA0                 pop     ebp
.text:00000AA1                 retn
.text:00000AA1 ??0CCreatedCoder@@QAE@XZ endp
.text:00000AA1
.text:00000AA1 ; ---------------------------------------------------------------------------
.text:00000AA2                 align 4
.text:00000AA2 _text           ends
.text:00000AA2
.text$x:00000AA4 ; ===========================================================================
.text$x:00000AA4
.text$x:00000AA4 ; Segment type: Pure code
.text$x:00000AA4 ; Segment permissions: Read/Execute
.text$x:00000AA4 _text$x         segment para public 'CODE' use32
.text$x:00000AA4                 assume cs:_text$x
.text$x:00000AA4                 ;org 0AA4h
.text$x:00000AA4 ; COMDAT (pick associative to section at A38)
.text$x:00000AA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00000AA4
.text$x:00000AA4 ; =============== S U B R O U T I N E =======================================
.text$x:00000AA4
.text$x:00000AA4
.text$x:00000AA4 __unwindfunclet$??0CCreatedCoder@@QAE@XZ$0 proc near
.text$x:00000AA4                                         ; DATA XREF: .xdata$x:00000ACCo
.text$x:00000AA4                 mov     ecx, [ebp-10h]
.text$x:00000AA7                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00000AA7 __unwindfunclet$??0CCreatedCoder@@QAE@XZ$0 endp
.text$x:00000AA7
.text$x:00000AAC
.text$x:00000AAC ; =============== S U B R O U T I N E =======================================
.text$x:00000AAC
.text$x:00000AAC
.text$x:00000AAC __ehhandler$??0CCreatedCoder@@QAE@XZ proc near
.text$x:00000AAC                                         ; DATA XREF: CCreatedCoder::CCreatedCoder(void)+5o
.text$x:00000AAC
.text$x:00000AAC arg_4           = dword ptr  8
.text$x:00000AAC
.text$x:00000AAC                 mov     edx, [esp+arg_4]
.text$x:00000AB0                 lea     eax, [edx+0Ch]
.text$x:00000AB3                 mov     ecx, [edx-8]
.text$x:00000AB6                 xor     ecx, eax
.text$x:00000AB8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000ABD                 mov     eax, offset __ehfuncinfo$??0CCreatedCoder@@QAE@XZ
.text$x:00000AC2                 jmp     ___CxxFrameHandler3
.text$x:00000AC2 __ehhandler$??0CCreatedCoder@@QAE@XZ endp
.text$x:00000AC2
.text$x:00000AC2 ; ---------------------------------------------------------------------------
.text$x:00000AC7                 align 4
.text$x:00000AC7 _text$x         ends
.text$x:00000AC7
.xdata$x:00000AC8 ; ===========================================================================
.xdata$x:00000AC8
.xdata$x:00000AC8 ; Segment type: Pure data
.xdata$x:00000AC8 ; Segment permissions: Read
.xdata$x:00000AC8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000AC8                 assume cs:_xdata$x
.xdata$x:00000AC8                 ;org 0AC8h
.xdata$x:00000AC8 ; COMDAT (pick associative to section at A38)
.xdata$x:00000AC8 __unwindtable$??0CCreatedCoder@@QAE@XZ db 0FFh
.xdata$x:00000AC8                                         ; DATA XREF: .xdata$x:00000AD8o
.xdata$x:00000AC9                 db 0FFh
.xdata$x:00000ACA                 db 0FFh
.xdata$x:00000ACB                 db 0FFh
.xdata$x:00000ACC                 dd offset __unwindfunclet$??0CCreatedCoder@@QAE@XZ$0
.xdata$x:00000AD0 __ehfuncinfo$??0CCreatedCoder@@QAE@XZ db  22h ; "
.xdata$x:00000AD0                                         ; DATA XREF: __ehhandler$??0CCreatedCoder@@QAE@XZ+11o
.xdata$x:00000AD1                 db    5
.xdata$x:00000AD2                 db  93h ; ô
.xdata$x:00000AD3                 db  19h
.xdata$x:00000AD4                 db    1
.xdata$x:00000AD5                 db    0
.xdata$x:00000AD6                 db    0
.xdata$x:00000AD7                 db    0
.xdata$x:00000AD8                 dd offset __unwindtable$??0CCreatedCoder@@QAE@XZ
.xdata$x:00000ADC                 db    0
.xdata$x:00000ADD                 db    0
.xdata$x:00000ADE                 db    0
.xdata$x:00000ADF                 db    0
.xdata$x:00000AE0                 db    0
.xdata$x:00000AE1                 db    0
.xdata$x:00000AE2                 db    0
.xdata$x:00000AE3                 db    0
.xdata$x:00000AE4                 db    0
.xdata$x:00000AE5                 db    0
.xdata$x:00000AE6                 db    0
.xdata$x:00000AE7                 db    0
.xdata$x:00000AE8                 db    0
.xdata$x:00000AE9                 db    0
.xdata$x:00000AEA                 db    0
.xdata$x:00000AEB                 db    0
.xdata$x:00000AEC                 db    0
.xdata$x:00000AED                 db    0
.xdata$x:00000AEE                 db    0
.xdata$x:00000AEF                 db    0
.xdata$x:00000AF0                 db    1
.xdata$x:00000AF1                 db    0
.xdata$x:00000AF2                 db    0
.xdata$x:00000AF3                 db    0
.xdata$x:00000AF3 _xdata$x        ends
.xdata$x:00000AF3
.text:00000AF4 ; ===========================================================================
.text:00000AF4
.text:00000AF4 ; Segment type: Pure code
.text:00000AF4 ; Segment permissions: Read/Execute
.text:00000AF4 _text           segment para public 'CODE' use32
.text:00000AF4                 assume cs:_text
.text:00000AF4                 ;org 0AF4h
.text:00000AF4 ; COMDAT (pick any)
.text:00000AF4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000AF4
.text:00000AF4 ; =============== S U B R O U T I N E =======================================
.text:00000AF4
.text:00000AF4 ; Attributes: bp-based frame
.text:00000AF4
.text:00000AF4 ; _DWORD __thiscall CCreatedCoder::~CCreatedCoder(CCreatedCoder *__hidden this)
.text:00000AF4                 public ??1CCreatedCoder@@QAE@XZ
.text:00000AF4 ??1CCreatedCoder@@QAE@XZ proc near      ; CODE XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressCoder> &)+86p
.text:00000AF4                                         ; CreateFilter(unsigned __int64,bool,CMyComPtr<ICompressFilter> &)+75p ...
.text:00000AF4
.text:00000AF4 var_10          = dword ptr -10h
.text:00000AF4 var_C           = dword ptr -0Ch
.text:00000AF4 var_4           = dword ptr -4
.text:00000AF4
.text:00000AF4                 push    ebp
.text:00000AF5                 mov     ebp, esp
.text:00000AF7                 push    0FFFFFFFFh
.text:00000AF9                 push    offset __ehhandler$??1CCreatedCoder@@QAE@XZ
.text:00000AFE                 mov     eax, large fs:0
.text:00000B04                 push    eax
.text:00000B05                 push    ecx
.text:00000B06                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000B0D                 mov     eax, dword ptr ds:___security_cookie
.text:00000B12                 xor     eax, ebp
.text:00000B14                 push    eax
.text:00000B15                 lea     eax, [ebp+var_C]
.text:00000B18                 mov     large fs:0, eax
.text:00000B1E                 mov     [ebp+var_10], ecx
.text:00000B21                 mov     [ebp+var_4], 0
.text:00000B28                 mov     ecx, [ebp+var_10]
.text:00000B2B                 add     ecx, 4
.text:00000B2E                 call    ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>(void)
.text:00000B33                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000B3A                 mov     ecx, [ebp+var_10]
.text:00000B3D                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00000B42                 mov     ecx, [ebp+var_C]
.text:00000B45                 mov     large fs:0, ecx
.text:00000B4C                 pop     ecx
.text:00000B4D                 add     esp, 10h
.text:00000B50                 cmp     ebp, esp
.text:00000B52                 call    __RTC_CheckEsp
.text:00000B57                 mov     esp, ebp
.text:00000B59                 pop     ebp
.text:00000B5A                 retn
.text:00000B5A ??1CCreatedCoder@@QAE@XZ endp
.text:00000B5A
.text:00000B5A ; ---------------------------------------------------------------------------
.text:00000B5B                 align 4
.text:00000B5B _text           ends
.text:00000B5B
.text$x:00000B5C ; ===========================================================================
.text$x:00000B5C
.text$x:00000B5C ; Segment type: Pure code
.text$x:00000B5C ; Segment permissions: Read/Execute
.text$x:00000B5C _text$x         segment para public 'CODE' use32
.text$x:00000B5C                 assume cs:_text$x
.text$x:00000B5C                 ;org 0B5Ch
.text$x:00000B5C ; COMDAT (pick associative to section at AF4)
.text$x:00000B5C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00000B5C
.text$x:00000B5C ; =============== S U B R O U T I N E =======================================
.text$x:00000B5C
.text$x:00000B5C
.text$x:00000B5C __unwindfunclet$??1CCreatedCoder@@QAE@XZ$0 proc near
.text$x:00000B5C                                         ; DATA XREF: .xdata$x:00000B84o
.text$x:00000B5C                 mov     ecx, [ebp-10h]
.text$x:00000B5F                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00000B5F __unwindfunclet$??1CCreatedCoder@@QAE@XZ$0 endp
.text$x:00000B5F
.text$x:00000B64
.text$x:00000B64 ; =============== S U B R O U T I N E =======================================
.text$x:00000B64
.text$x:00000B64
.text$x:00000B64 __ehhandler$??1CCreatedCoder@@QAE@XZ proc near
.text$x:00000B64                                         ; DATA XREF: CCreatedCoder::~CCreatedCoder(void)+5o
.text$x:00000B64
.text$x:00000B64 arg_4           = dword ptr  8
.text$x:00000B64
.text$x:00000B64                 mov     edx, [esp+arg_4]
.text$x:00000B68                 lea     eax, [edx+0Ch]
.text$x:00000B6B                 mov     ecx, [edx-8]
.text$x:00000B6E                 xor     ecx, eax
.text$x:00000B70                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000B75                 mov     eax, offset __ehfuncinfo$??1CCreatedCoder@@QAE@XZ
.text$x:00000B7A                 jmp     ___CxxFrameHandler3
.text$x:00000B7A __ehhandler$??1CCreatedCoder@@QAE@XZ endp
.text$x:00000B7A
.text$x:00000B7A ; ---------------------------------------------------------------------------
.text$x:00000B7F                 align 10h
.text$x:00000B7F _text$x         ends
.text$x:00000B7F
.xdata$x:00000B80 ; ===========================================================================
.xdata$x:00000B80
.xdata$x:00000B80 ; Segment type: Pure data
.xdata$x:00000B80 ; Segment permissions: Read
.xdata$x:00000B80 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000B80                 assume cs:_xdata$x
.xdata$x:00000B80                 ;org 0B80h
.xdata$x:00000B80 ; COMDAT (pick associative to section at AF4)
.xdata$x:00000B80 __unwindtable$??1CCreatedCoder@@QAE@XZ db 0FFh
.xdata$x:00000B80                                         ; DATA XREF: .xdata$x:00000B90o
.xdata$x:00000B81                 db 0FFh
.xdata$x:00000B82                 db 0FFh
.xdata$x:00000B83                 db 0FFh
.xdata$x:00000B84                 dd offset __unwindfunclet$??1CCreatedCoder@@QAE@XZ$0
.xdata$x:00000B88 __ehfuncinfo$??1CCreatedCoder@@QAE@XZ db  22h ; "
.xdata$x:00000B88                                         ; DATA XREF: __ehhandler$??1CCreatedCoder@@QAE@XZ+11o
.xdata$x:00000B89                 db    5
.xdata$x:00000B8A                 db  93h ; ô
.xdata$x:00000B8B                 db  19h
.xdata$x:00000B8C                 db    1
.xdata$x:00000B8D                 db    0
.xdata$x:00000B8E                 db    0
.xdata$x:00000B8F                 db    0
.xdata$x:00000B90                 dd offset __unwindtable$??1CCreatedCoder@@QAE@XZ
.xdata$x:00000B94                 db    0
.xdata$x:00000B95                 db    0
.xdata$x:00000B96                 db    0
.xdata$x:00000B97                 db    0
.xdata$x:00000B98                 db    0
.xdata$x:00000B99                 db    0
.xdata$x:00000B9A                 db    0
.xdata$x:00000B9B                 db    0
.xdata$x:00000B9C                 db    0
.xdata$x:00000B9D                 db    0
.xdata$x:00000B9E                 db    0
.xdata$x:00000B9F                 db    0
.xdata$x:00000BA0                 db    0
.xdata$x:00000BA1                 db    0
.xdata$x:00000BA2                 db    0
.xdata$x:00000BA3                 db    0
.xdata$x:00000BA4                 db    0
.xdata$x:00000BA5                 db    0
.xdata$x:00000BA6                 db    0
.xdata$x:00000BA7                 db    0
.xdata$x:00000BA8                 db    1
.xdata$x:00000BA9                 db    0
.xdata$x:00000BAA                 db    0
.xdata$x:00000BAB                 db    0
.xdata$x:00000BAB _xdata$x        ends
.xdata$x:00000BAB
.text:00000BAC ; ===========================================================================
.text:00000BAC
.text:00000BAC ; Segment type: Pure code
.text:00000BAC ; Segment permissions: Read/Execute
.text:00000BAC _text           segment para public 'CODE' use32
.text:00000BAC                 assume cs:_text
.text:00000BAC                 ;org 0BACh
.text:00000BAC ; COMDAT (pick any)
.text:00000BAC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000BAC
.text:00000BAC ; =============== S U B R O U T I N E =======================================
.text:00000BAC
.text:00000BAC ; Attributes: bp-based frame
.text:00000BAC
.text:00000BAC ; public: __thiscall CMyComPtr<struct ICompressCoder>::CMyComPtr<struct ICompressCoder>(void)
.text:00000BAC                 public ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:00000BAC ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:00000BAC                                         ; CODE XREF: CCreatedCoder::CCreatedCoder(void)+30p
.text:00000BAC
.text:00000BAC var_4           = dword ptr -4
.text:00000BAC
.text:00000BAC                 push    ebp
.text:00000BAD                 mov     ebp, esp
.text:00000BAF                 push    ecx
.text:00000BB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BB7                 mov     [ebp+var_4], ecx
.text:00000BBA                 mov     eax, [ebp+var_4]
.text:00000BBD                 mov     dword ptr [eax], 0
.text:00000BC3                 mov     eax, [ebp+var_4]
.text:00000BC6                 mov     esp, ebp
.text:00000BC8                 pop     ebp
.text:00000BC9                 retn
.text:00000BC9 ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:00000BC9
.text:00000BC9 ; ---------------------------------------------------------------------------
.text:00000BCA                 align 4
.text:00000BCA _text           ends
.text:00000BCA
.text:00000BCC ; ===========================================================================
.text:00000BCC
.text:00000BCC ; Segment type: Pure code
.text:00000BCC ; Segment permissions: Read/Execute
.text:00000BCC _text           segment para public 'CODE' use32
.text:00000BCC                 assume cs:_text
.text:00000BCC                 ;org 0BCCh
.text:00000BCC ; COMDAT (pick any)
.text:00000BCC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000BCC
.text:00000BCC ; =============== S U B R O U T I N E =======================================
.text:00000BCC
.text:00000BCC ; Attributes: bp-based frame
.text:00000BCC
.text:00000BCC ; public: __thiscall CMyComPtr<struct ICompressCoder>::~CMyComPtr<struct ICompressCoder>(void)
.text:00000BCC                 public ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:00000BCC ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:00000BCC                                         ; CODE XREF: __unwindfunclet$??0CCreatedCoder@@QAE@XZ$0+3j
.text:00000BCC                                         ; CCreatedCoder::~CCreatedCoder(void)+49p ...
.text:00000BCC
.text:00000BCC var_4           = dword ptr -4
.text:00000BCC
.text:00000BCC                 push    ebp
.text:00000BCD                 mov     ebp, esp
.text:00000BCF                 push    ecx
.text:00000BD0                 push    esi
.text:00000BD1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BD8                 mov     [ebp+var_4], ecx
.text:00000BDB                 mov     eax, [ebp+var_4]
.text:00000BDE                 cmp     dword ptr [eax], 0
.text:00000BE1                 jz      short loc_BFE
.text:00000BE3                 mov     ecx, [ebp+var_4]
.text:00000BE6                 mov     edx, [ecx]
.text:00000BE8                 mov     eax, [ebp+var_4]
.text:00000BEB                 mov     ecx, [eax]
.text:00000BED                 mov     edx, [edx]
.text:00000BEF                 mov     esi, esp
.text:00000BF1                 push    ecx
.text:00000BF2                 mov     eax, [edx+8]
.text:00000BF5                 call    eax
.text:00000BF7                 cmp     esi, esp
.text:00000BF9                 call    __RTC_CheckEsp
.text:00000BFE
.text:00000BFE loc_BFE:                                ; CODE XREF: CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)+15j
.text:00000BFE                 pop     esi
.text:00000BFF                 add     esp, 4
.text:00000C02                 cmp     ebp, esp
.text:00000C04                 call    __RTC_CheckEsp
.text:00000C09                 mov     esp, ebp
.text:00000C0B                 pop     ebp
.text:00000C0C                 retn
.text:00000C0C ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:00000C0C
.text:00000C0C ; ---------------------------------------------------------------------------
.text:00000C0D                 align 10h
.text:00000C0D _text           ends
.text:00000C0D
.text:00000C10 ; ===========================================================================
.text:00000C10
.text:00000C10 ; Segment type: Pure code
.text:00000C10 ; Segment permissions: Read/Execute
.text:00000C10 _text           segment para public 'CODE' use32
.text:00000C10                 assume cs:_text
.text:00000C10                 ;org 0C10h
.text:00000C10 ; COMDAT (pick any)
.text:00000C10                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000C10
.text:00000C10 ; =============== S U B R O U T I N E =======================================
.text:00000C10
.text:00000C10 ; Attributes: bp-based frame
.text:00000C10
.text:00000C10 ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator=(struct ICompressCoder *)
.text:00000C10                 public ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z
.text:00000C10 ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z proc near
.text:00000C10                                         ; CODE XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+D3p
.text:00000C10                                         ; CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+13Fp ...
.text:00000C10
.text:00000C10 var_4           = dword ptr -4
.text:00000C10 arg_0           = dword ptr  8
.text:00000C10
.text:00000C10                 push    ebp
.text:00000C11                 mov     ebp, esp
.text:00000C13                 push    ecx
.text:00000C14                 push    esi
.text:00000C15                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C1C                 mov     [ebp+var_4], ecx
.text:00000C1F                 cmp     [ebp+arg_0], 0
.text:00000C23                 jz      short loc_C3C
.text:00000C25                 mov     eax, [ebp+arg_0]
.text:00000C28                 mov     ecx, [eax]
.text:00000C2A                 mov     esi, esp
.text:00000C2C                 mov     edx, [ebp+arg_0]
.text:00000C2F                 push    edx
.text:00000C30                 mov     eax, [ecx+4]
.text:00000C33                 call    eax
.text:00000C35                 cmp     esi, esp
.text:00000C37                 call    __RTC_CheckEsp
.text:00000C3C
.text:00000C3C loc_C3C:                                ; CODE XREF: CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)+13j
.text:00000C3C                 mov     ecx, [ebp+var_4]
.text:00000C3F                 cmp     dword ptr [ecx], 0
.text:00000C42                 jz      short loc_C5F
.text:00000C44                 mov     edx, [ebp+var_4]
.text:00000C47                 mov     eax, [edx]
.text:00000C49                 mov     ecx, [ebp+var_4]
.text:00000C4C                 mov     edx, [ecx]
.text:00000C4E                 mov     eax, [eax]
.text:00000C50                 mov     esi, esp
.text:00000C52                 push    edx
.text:00000C53                 mov     ecx, [eax+8]
.text:00000C56                 call    ecx
.text:00000C58                 cmp     esi, esp
.text:00000C5A                 call    __RTC_CheckEsp
.text:00000C5F
.text:00000C5F loc_C5F:                                ; CODE XREF: CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)+32j
.text:00000C5F                 mov     edx, [ebp+var_4]
.text:00000C62                 mov     eax, [ebp+arg_0]
.text:00000C65                 mov     [edx], eax
.text:00000C67                 mov     eax, [ebp+arg_0]
.text:00000C6A                 pop     esi
.text:00000C6B                 add     esp, 4
.text:00000C6E                 cmp     ebp, esp
.text:00000C70                 call    __RTC_CheckEsp
.text:00000C75                 mov     esp, ebp
.text:00000C77                 pop     ebp
.text:00000C78                 retn    4
.text:00000C78 ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z endp
.text:00000C78
.text:00000C78 ; ---------------------------------------------------------------------------
.text:00000C7B                 align 4
.text:00000C7B _text           ends
.text:00000C7B
.text:00000C7C ; ===========================================================================
.text:00000C7C
.text:00000C7C ; Segment type: Pure code
.text:00000C7C ; Segment permissions: Read/Execute
.text:00000C7C _text           segment para public 'CODE' use32
.text:00000C7C                 assume cs:_text
.text:00000C7C                 ;org 0C7Ch
.text:00000C7C ; COMDAT (pick any)
.text:00000C7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000C7C
.text:00000C7C ; =============== S U B R O U T I N E =======================================
.text:00000C7C
.text:00000C7C ; Attributes: bp-based frame
.text:00000C7C
.text:00000C7C ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator=(class CMyComPtr<struct ICompressCoder> const &)
.text:00000C7C                 public ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z
.text:00000C7C ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z proc near
.text:00000C7C                                         ; CODE XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressCoder> &)+71p
.text:00000C7C
.text:00000C7C var_4           = dword ptr -4
.text:00000C7C arg_0           = dword ptr  8
.text:00000C7C
.text:00000C7C                 push    ebp
.text:00000C7D                 mov     ebp, esp
.text:00000C7F                 push    ecx
.text:00000C80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C87                 mov     [ebp+var_4], ecx
.text:00000C8A                 mov     eax, [ebp+arg_0]
.text:00000C8D                 mov     ecx, [eax]
.text:00000C8F                 push    ecx
.text:00000C90                 mov     ecx, [ebp+var_4]
.text:00000C93                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:00000C98                 add     esp, 4
.text:00000C9B                 cmp     ebp, esp
.text:00000C9D                 call    __RTC_CheckEsp
.text:00000CA2                 mov     esp, ebp
.text:00000CA4                 pop     ebp
.text:00000CA5                 retn    4
.text:00000CA5 ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z endp
.text:00000CA5
.text:00000CA5 _text           ends
.text:00000CA5
.text:00000CA8 ; ===========================================================================
.text:00000CA8
.text:00000CA8 ; Segment type: Pure code
.text:00000CA8 ; Segment permissions: Read/Execute
.text:00000CA8 _text           segment para public 'CODE' use32
.text:00000CA8                 assume cs:_text
.text:00000CA8                 ;org 0CA8h
.text:00000CA8 ; COMDAT (pick any)
.text:00000CA8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000CA8
.text:00000CA8 ; =============== S U B R O U T I N E =======================================
.text:00000CA8
.text:00000CA8 ; Attributes: bp-based frame
.text:00000CA8
.text:00000CA8 ; public: __thiscall CMyComPtr<struct ICompressCoder2>::CMyComPtr<struct ICompressCoder2>(void)
.text:00000CA8                 public ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ
.text:00000CA8 ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ proc near
.text:00000CA8                                         ; CODE XREF: CCreatedCoder::CCreatedCoder(void)+42p
.text:00000CA8
.text:00000CA8 var_4           = dword ptr -4
.text:00000CA8
.text:00000CA8                 push    ebp
.text:00000CA9                 mov     ebp, esp
.text:00000CAB                 push    ecx
.text:00000CAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CB3                 mov     [ebp+var_4], ecx
.text:00000CB6                 mov     eax, [ebp+var_4]
.text:00000CB9                 mov     dword ptr [eax], 0
.text:00000CBF                 mov     eax, [ebp+var_4]
.text:00000CC2                 mov     esp, ebp
.text:00000CC4                 pop     ebp
.text:00000CC5                 retn
.text:00000CC5 ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ endp
.text:00000CC5
.text:00000CC5 ; ---------------------------------------------------------------------------
.text:00000CC6                 align 4
.text:00000CC6 _text           ends
.text:00000CC6
.text:00000CC8 ; ===========================================================================
.text:00000CC8
.text:00000CC8 ; Segment type: Pure code
.text:00000CC8 ; Segment permissions: Read/Execute
.text:00000CC8 _text           segment para public 'CODE' use32
.text:00000CC8                 assume cs:_text
.text:00000CC8                 ;org 0CC8h
.text:00000CC8 ; COMDAT (pick any)
.text:00000CC8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000CC8
.text:00000CC8 ; =============== S U B R O U T I N E =======================================
.text:00000CC8
.text:00000CC8 ; Attributes: bp-based frame
.text:00000CC8
.text:00000CC8 ; public: __thiscall CMyComPtr<struct ICompressCoder2>::~CMyComPtr<struct ICompressCoder2>(void)
.text:00000CC8                 public ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ
.text:00000CC8 ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ proc near
.text:00000CC8                                         ; CODE XREF: CCreatedCoder::~CCreatedCoder(void)+3Ap
.text:00000CC8
.text:00000CC8 var_4           = dword ptr -4
.text:00000CC8
.text:00000CC8                 push    ebp
.text:00000CC9                 mov     ebp, esp
.text:00000CCB                 push    ecx
.text:00000CCC                 push    esi
.text:00000CCD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CD4                 mov     [ebp+var_4], ecx
.text:00000CD7                 mov     eax, [ebp+var_4]
.text:00000CDA                 cmp     dword ptr [eax], 0
.text:00000CDD                 jz      short loc_CFA
.text:00000CDF                 mov     ecx, [ebp+var_4]
.text:00000CE2                 mov     edx, [ecx]
.text:00000CE4                 mov     eax, [ebp+var_4]
.text:00000CE7                 mov     ecx, [eax]
.text:00000CE9                 mov     edx, [edx]
.text:00000CEB                 mov     esi, esp
.text:00000CED                 push    ecx
.text:00000CEE                 mov     eax, [edx+8]
.text:00000CF1                 call    eax
.text:00000CF3                 cmp     esi, esp
.text:00000CF5                 call    __RTC_CheckEsp
.text:00000CFA
.text:00000CFA loc_CFA:                                ; CODE XREF: CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>(void)+15j
.text:00000CFA                 pop     esi
.text:00000CFB                 add     esp, 4
.text:00000CFE                 cmp     ebp, esp
.text:00000D00                 call    __RTC_CheckEsp
.text:00000D05                 mov     esp, ebp
.text:00000D07                 pop     ebp
.text:00000D08                 retn
.text:00000D08 ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ endp
.text:00000D08
.text:00000D08 ; ---------------------------------------------------------------------------
.text:00000D09                 align 4
.text:00000D09 _text           ends
.text:00000D09
.text:00000D0C ; ===========================================================================
.text:00000D0C
.text:00000D0C ; Segment type: Pure code
.text:00000D0C ; Segment permissions: Read/Execute
.text:00000D0C _text           segment para public 'CODE' use32
.text:00000D0C                 assume cs:_text
.text:00000D0C                 ;org 0D0Ch
.text:00000D0C ; COMDAT (pick any)
.text:00000D0C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000D0C
.text:00000D0C ; =============== S U B R O U T I N E =======================================
.text:00000D0C
.text:00000D0C ; Attributes: bp-based frame
.text:00000D0C
.text:00000D0C ; public: struct ICompressCoder2 * __thiscall CMyComPtr<struct ICompressCoder2>::operator=(struct ICompressCoder2 *)
.text:00000D0C                 public ??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@PAU1@@Z
.text:00000D0C ??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@PAU1@@Z proc near
.text:00000D0C                                         ; CODE XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+E4p
.text:00000D0C                                         ; CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+150p
.text:00000D0C
.text:00000D0C var_4           = dword ptr -4
.text:00000D0C arg_0           = dword ptr  8
.text:00000D0C
.text:00000D0C                 push    ebp
.text:00000D0D                 mov     ebp, esp
.text:00000D0F                 push    ecx
.text:00000D10                 push    esi
.text:00000D11                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D18                 mov     [ebp+var_4], ecx
.text:00000D1B                 cmp     [ebp+arg_0], 0
.text:00000D1F                 jz      short loc_D38
.text:00000D21                 mov     eax, [ebp+arg_0]
.text:00000D24                 mov     ecx, [eax]
.text:00000D26                 mov     esi, esp
.text:00000D28                 mov     edx, [ebp+arg_0]
.text:00000D2B                 push    edx
.text:00000D2C                 mov     eax, [ecx+4]
.text:00000D2F                 call    eax
.text:00000D31                 cmp     esi, esp
.text:00000D33                 call    __RTC_CheckEsp
.text:00000D38
.text:00000D38 loc_D38:                                ; CODE XREF: CMyComPtr<ICompressCoder2>::operator=(ICompressCoder2 *)+13j
.text:00000D38                 mov     ecx, [ebp+var_4]
.text:00000D3B                 cmp     dword ptr [ecx], 0
.text:00000D3E                 jz      short loc_D5B
.text:00000D40                 mov     edx, [ebp+var_4]
.text:00000D43                 mov     eax, [edx]
.text:00000D45                 mov     ecx, [ebp+var_4]
.text:00000D48                 mov     edx, [ecx]
.text:00000D4A                 mov     eax, [eax]
.text:00000D4C                 mov     esi, esp
.text:00000D4E                 push    edx
.text:00000D4F                 mov     ecx, [eax+8]
.text:00000D52                 call    ecx
.text:00000D54                 cmp     esi, esp
.text:00000D56                 call    __RTC_CheckEsp
.text:00000D5B
.text:00000D5B loc_D5B:                                ; CODE XREF: CMyComPtr<ICompressCoder2>::operator=(ICompressCoder2 *)+32j
.text:00000D5B                 mov     edx, [ebp+var_4]
.text:00000D5E                 mov     eax, [ebp+arg_0]
.text:00000D61                 mov     [edx], eax
.text:00000D63                 mov     eax, [ebp+arg_0]
.text:00000D66                 pop     esi
.text:00000D67                 add     esp, 4
.text:00000D6A                 cmp     ebp, esp
.text:00000D6C                 call    __RTC_CheckEsp
.text:00000D71                 mov     esp, ebp
.text:00000D73                 pop     ebp
.text:00000D74                 retn    4
.text:00000D74 ??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@PAU1@@Z endp
.text:00000D74
.text:00000D74 ; ---------------------------------------------------------------------------
.text:00000D77                 align 4
.text:00000D77 _text           ends
.text:00000D77
.text:00000D78 ; ===========================================================================
.text:00000D78
.text:00000D78 ; Segment type: Pure code
.text:00000D78 ; Segment permissions: Read/Execute
.text:00000D78 _text           segment para public 'CODE' use32
.text:00000D78                 assume cs:_text
.text:00000D78                 ;org 0D78h
.text:00000D78 ; COMDAT (pick any)
.text:00000D78                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000D78
.text:00000D78 ; =============== S U B R O U T I N E =======================================
.text:00000D78
.text:00000D78 ; Attributes: bp-based frame
.text:00000D78
.text:00000D78 ; public: __thiscall CMyComPtr<struct ICompressFilter>::CMyComPtr<struct ICompressFilter>(void)
.text:00000D78                 public ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ
.text:00000D78 ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ proc near
.text:00000D78                                         ; CODE XREF: CreateCoder(unsigned __int64,bool,CCreatedCoder &)+48p
.text:00000D78
.text:00000D78 var_4           = dword ptr -4
.text:00000D78
.text:00000D78                 push    ebp
.text:00000D79                 mov     ebp, esp
.text:00000D7B                 push    ecx
.text:00000D7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D83                 mov     [ebp+var_4], ecx
.text:00000D86                 mov     eax, [ebp+var_4]
.text:00000D89                 mov     dword ptr [eax], 0
.text:00000D8F                 mov     eax, [ebp+var_4]
.text:00000D92                 mov     esp, ebp
.text:00000D94                 pop     ebp
.text:00000D95                 retn
.text:00000D95 ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ endp
.text:00000D95
.text:00000D95 ; ---------------------------------------------------------------------------
.text:00000D96                 align 4
.text:00000D96 _text           ends
.text:00000D96
.text:00000D98 ; ===========================================================================
.text:00000D98
.text:00000D98 ; Segment type: Pure code
.text:00000D98 ; Segment permissions: Read/Execute
.text:00000D98 _text           segment para public 'CODE' use32
.text:00000D98                 assume cs:_text
.text:00000D98                 ;org 0D98h
.text:00000D98 ; COMDAT (pick any)
.text:00000D98                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000D98
.text:00000D98 ; =============== S U B R O U T I N E =======================================
.text:00000D98
.text:00000D98 ; Attributes: bp-based frame
.text:00000D98
.text:00000D98 ; public: __thiscall CMyComPtr<struct ICompressFilter>::~CMyComPtr<struct ICompressFilter>(void)
.text:00000D98                 public ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ
.text:00000D98 ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ proc near
.text:00000D98                                         ; CODE XREF: CreateCoder(unsigned __int64,bool,CCreatedCoder &)+F5p
.text:00000D98                                         ; __unwindfunclet$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z$0+3j
.text:00000D98
.text:00000D98 var_4           = dword ptr -4
.text:00000D98
.text:00000D98                 push    ebp
.text:00000D99                 mov     ebp, esp
.text:00000D9B                 push    ecx
.text:00000D9C                 push    esi
.text:00000D9D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DA4                 mov     [ebp+var_4], ecx
.text:00000DA7                 mov     eax, [ebp+var_4]
.text:00000DAA                 cmp     dword ptr [eax], 0
.text:00000DAD                 jz      short loc_DCA
.text:00000DAF                 mov     ecx, [ebp+var_4]
.text:00000DB2                 mov     edx, [ecx]
.text:00000DB4                 mov     eax, [ebp+var_4]
.text:00000DB7                 mov     ecx, [eax]
.text:00000DB9                 mov     edx, [edx]
.text:00000DBB                 mov     esi, esp
.text:00000DBD                 push    ecx
.text:00000DBE                 mov     eax, [edx+8]
.text:00000DC1                 call    eax
.text:00000DC3                 cmp     esi, esp
.text:00000DC5                 call    __RTC_CheckEsp
.text:00000DCA
.text:00000DCA loc_DCA:                                ; CODE XREF: CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>(void)+15j
.text:00000DCA                 pop     esi
.text:00000DCB                 add     esp, 4
.text:00000DCE                 cmp     ebp, esp
.text:00000DD0                 call    __RTC_CheckEsp
.text:00000DD5                 mov     esp, ebp
.text:00000DD7                 pop     ebp
.text:00000DD8                 retn
.text:00000DD8 ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ endp
.text:00000DD8
.text:00000DD8 ; ---------------------------------------------------------------------------
.text:00000DD9                 align 4
.text:00000DD9 _text           ends
.text:00000DD9
.text:00000DDC ; ===========================================================================
.text:00000DDC
.text:00000DDC ; Segment type: Pure code
.text:00000DDC ; Segment permissions: Read/Execute
.text:00000DDC _text           segment para public 'CODE' use32
.text:00000DDC                 assume cs:_text
.text:00000DDC                 ;org 0DDCh
.text:00000DDC ; COMDAT (pick any)
.text:00000DDC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000DDC
.text:00000DDC ; =============== S U B R O U T I N E =======================================
.text:00000DDC
.text:00000DDC ; Attributes: bp-based frame
.text:00000DDC
.text:00000DDC ; public: __thiscall CMyComPtr<struct ICompressFilter>::operator struct ICompressFilter *(void)const
.text:00000DDC                 public ??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ
.text:00000DDC ??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ proc near
.text:00000DDC                                         ; CODE XREF: CreateCoder(unsigned __int64,bool,CCreatedCoder &)+74p
.text:00000DDC
.text:00000DDC var_4           = dword ptr -4
.text:00000DDC
.text:00000DDC                 push    ebp
.text:00000DDD                 mov     ebp, esp
.text:00000DDF                 push    ecx
.text:00000DE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DE7                 mov     [ebp+var_4], ecx
.text:00000DEA                 mov     eax, [ebp+var_4]
.text:00000DED                 mov     eax, [eax]
.text:00000DEF                 mov     esp, ebp
.text:00000DF1                 pop     ebp
.text:00000DF2                 retn
.text:00000DF2 ??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ endp
.text:00000DF2
.text:00000DF2 ; ---------------------------------------------------------------------------
.text:00000DF3                 align 4
.text:00000DF3 _text           ends
.text:00000DF3
.text:00000DF4 ; ===========================================================================
.text:00000DF4
.text:00000DF4 ; Segment type: Pure code
.text:00000DF4 ; Segment permissions: Read/Execute
.text:00000DF4 _text           segment para public 'CODE' use32
.text:00000DF4                 assume cs:_text
.text:00000DF4                 ;org 0DF4h
.text:00000DF4 ; COMDAT (pick any)
.text:00000DF4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000DF4
.text:00000DF4 ; =============== S U B R O U T I N E =======================================
.text:00000DF4
.text:00000DF4 ; Attributes: bp-based frame
.text:00000DF4
.text:00000DF4 ; public: struct ICompressFilter * __thiscall CMyComPtr<struct ICompressFilter>::operator=(struct ICompressFilter *)
.text:00000DF4                 public ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z
.text:00000DF4 ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z proc near
.text:00000DF4                                         ; CODE XREF: CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+BCp
.text:00000DF4                                         ; CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressFilter> &,CCreatedCoder &)+128p ...
.text:00000DF4
.text:00000DF4 var_4           = dword ptr -4
.text:00000DF4 arg_0           = dword ptr  8
.text:00000DF4
.text:00000DF4                 push    ebp
.text:00000DF5                 mov     ebp, esp
.text:00000DF7                 push    ecx
.text:00000DF8                 push    esi
.text:00000DF9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E00                 mov     [ebp+var_4], ecx
.text:00000E03                 cmp     [ebp+arg_0], 0
.text:00000E07                 jz      short loc_E20
.text:00000E09                 mov     eax, [ebp+arg_0]
.text:00000E0C                 mov     ecx, [eax]
.text:00000E0E                 mov     esi, esp
.text:00000E10                 mov     edx, [ebp+arg_0]
.text:00000E13                 push    edx
.text:00000E14                 mov     eax, [ecx+4]
.text:00000E17                 call    eax
.text:00000E19                 cmp     esi, esp
.text:00000E1B                 call    __RTC_CheckEsp
.text:00000E20
.text:00000E20 loc_E20:                                ; CODE XREF: CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)+13j
.text:00000E20                 mov     ecx, [ebp+var_4]
.text:00000E23                 cmp     dword ptr [ecx], 0
.text:00000E26                 jz      short loc_E43
.text:00000E28                 mov     edx, [ebp+var_4]
.text:00000E2B                 mov     eax, [edx]
.text:00000E2D                 mov     ecx, [ebp+var_4]
.text:00000E30                 mov     edx, [ecx]
.text:00000E32                 mov     eax, [eax]
.text:00000E34                 mov     esi, esp
.text:00000E36                 push    edx
.text:00000E37                 mov     ecx, [eax+8]
.text:00000E3A                 call    ecx
.text:00000E3C                 cmp     esi, esp
.text:00000E3E                 call    __RTC_CheckEsp
.text:00000E43
.text:00000E43 loc_E43:                                ; CODE XREF: CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)+32j
.text:00000E43                 mov     edx, [ebp+var_4]
.text:00000E46                 mov     eax, [ebp+arg_0]
.text:00000E49                 mov     [edx], eax
.text:00000E4B                 mov     eax, [ebp+arg_0]
.text:00000E4E                 pop     esi
.text:00000E4F                 add     esp, 4
.text:00000E52                 cmp     ebp, esp
.text:00000E54                 call    __RTC_CheckEsp
.text:00000E59                 mov     esp, ebp
.text:00000E5B                 pop     ebp
.text:00000E5C                 retn    4
.text:00000E5C ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z endp
.text:00000E5C
.text:00000E5C ; ---------------------------------------------------------------------------
.text:00000E5F                 align 10h
.text:00000E5F _text           ends
.text:00000E5F
.text:00000E60 ; ===========================================================================
.text:00000E60
.text:00000E60 ; Segment type: Pure code
.text:00000E60 ; Segment permissions: Read/Execute
.text:00000E60 _text           segment para public 'CODE' use32
.text:00000E60                 assume cs:_text
.text:00000E60                 ;org 0E60h
.text:00000E60 ; COMDAT (pick any)
.text:00000E60                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000E60
.text:00000E60 ; =============== S U B R O U T I N E =======================================
.text:00000E60
.text:00000E60 ; Attributes: bp-based frame
.text:00000E60
.text:00000E60 ; public: struct ICompressFilter * __thiscall CMyComPtr<struct ICompressFilter>::operator=(class CMyComPtr<struct ICompressFilter> const &)
.text:00000E60                 public ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z
.text:00000E60 ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z proc near
.text:00000E60                                         ; CODE XREF: CreateCoder(unsigned __int64,bool,CCreatedCoder &)+E0p
.text:00000E60
.text:00000E60 var_4           = dword ptr -4
.text:00000E60 arg_0           = dword ptr  8
.text:00000E60
.text:00000E60                 push    ebp
.text:00000E61                 mov     ebp, esp
.text:00000E63                 push    ecx
.text:00000E64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E6B                 mov     [ebp+var_4], ecx
.text:00000E6E                 mov     eax, [ebp+arg_0]
.text:00000E71                 mov     ecx, [eax]
.text:00000E73                 push    ecx
.text:00000E74                 mov     ecx, [ebp+var_4]
.text:00000E77                 call    ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=(ICompressFilter *)
.text:00000E7C                 add     esp, 4
.text:00000E7F                 cmp     ebp, esp
.text:00000E81                 call    __RTC_CheckEsp
.text:00000E86                 mov     esp, ebp
.text:00000E88                 pop     ebp
.text:00000E89                 retn    4
.text:00000E89 ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z endp
.text:00000E89
.text:00000E89 _text           ends
.text:00000E89
.text:00000E8C ; ===========================================================================
.text:00000E8C
.text:00000E8C ; Segment type: Pure code
.text:00000E8C ; Segment permissions: Read/Execute
.text:00000E8C _text           segment para public 'CODE' use32
.text:00000E8C                 assume cs:_text
.text:00000E8C                 ;org 0E8Ch
.text:00000E8C ; COMDAT (pick any)
.text:00000E8C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000E8C
.text:00000E8C ; =============== S U B R O U T I N E =======================================
.text:00000E8C
.text:00000E8C ; Attributes: bp-based frame
.text:00000E8C
.text:00000E8C ; public: void __thiscall CRecordVector<unsigned __int64>::ClearAndSetSize(unsigned int)
.text:00000E8C                 public ?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z
.text:00000E8C ?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z proc near
.text:00000E8C                                         ; CODE XREF: GetHashMethods(CRecordVector<unsigned __int64> &)+15p
.text:00000E8C
.text:00000E8C var_4           = dword ptr -4
.text:00000E8C arg_0           = dword ptr  8
.text:00000E8C
.text:00000E8C                 push    ebp
.text:00000E8D                 mov     ebp, esp
.text:00000E8F                 push    ecx
.text:00000E90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E97                 mov     [ebp+var_4], ecx
.text:00000E9A                 mov     eax, [ebp+arg_0]
.text:00000E9D                 push    eax
.text:00000E9E                 mov     ecx, [ebp+var_4]
.text:00000EA1                 call    ?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::ClearAndReserve(uint)
.text:00000EA6                 mov     ecx, [ebp+var_4]
.text:00000EA9                 mov     edx, [ebp+arg_0]
.text:00000EAC                 mov     [ecx+4], edx
.text:00000EAF                 add     esp, 4
.text:00000EB2                 cmp     ebp, esp
.text:00000EB4                 call    __RTC_CheckEsp
.text:00000EB9                 mov     esp, ebp
.text:00000EBB                 pop     ebp
.text:00000EBC                 retn    4
.text:00000EBC ?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z endp
.text:00000EBC
.text:00000EBC ; ---------------------------------------------------------------------------
.text:00000EBF                 align 10h
.text:00000EBF _text           ends
.text:00000EBF
.text:00000EC0 ; ===========================================================================
.text:00000EC0
.text:00000EC0 ; Segment type: Pure code
.text:00000EC0 ; Segment permissions: Read/Execute
.text:00000EC0 _text           segment para public 'CODE' use32
.text:00000EC0                 assume cs:_text
.text:00000EC0                 ;org 0EC0h
.text:00000EC0 ; COMDAT (pick any)
.text:00000EC0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000EC0
.text:00000EC0 ; =============== S U B R O U T I N E =======================================
.text:00000EC0
.text:00000EC0 ; Attributes: bp-based frame
.text:00000EC0
.text:00000EC0 ; public: unsigned __int64 & __thiscall CRecordVector<unsigned __int64>::operator[](unsigned int)
.text:00000EC0                 public ??A?$CRecordVector@_K@@QAEAA_KI@Z
.text:00000EC0 ??A?$CRecordVector@_K@@QAEAA_KI@Z proc near
.text:00000EC0                                         ; CODE XREF: GetHashMethods(CRecordVector<unsigned __int64> &)+48p
.text:00000EC0
.text:00000EC0 var_4           = dword ptr -4
.text:00000EC0 arg_0           = dword ptr  8
.text:00000EC0
.text:00000EC0                 push    ebp
.text:00000EC1                 mov     ebp, esp
.text:00000EC3                 push    ecx
.text:00000EC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000ECB                 mov     [ebp+var_4], ecx
.text:00000ECE                 mov     eax, [ebp+var_4]
.text:00000ED1                 mov     ecx, [eax]
.text:00000ED3                 mov     edx, [ebp+arg_0]
.text:00000ED6                 lea     eax, [ecx+edx*8]
.text:00000ED9                 mov     esp, ebp
.text:00000EDB                 pop     ebp
.text:00000EDC                 retn    4
.text:00000EDC ??A?$CRecordVector@_K@@QAEAA_KI@Z endp
.text:00000EDC
.text:00000EDC ; ---------------------------------------------------------------------------
.text:00000EDF                 align 10h
.text:00000EDF _text           ends
.text:00000EDF
.text:00000EE0 ; ===========================================================================
.text:00000EE0
.text:00000EE0 ; Segment type: Pure code
.text:00000EE0 ; Segment permissions: Read/Execute
.text:00000EE0 _text           segment para public 'CODE' use32
.text:00000EE0                 assume cs:_text
.text:00000EE0                 ;org 0EE0h
.text:00000EE0 ; COMDAT (pick any)
.text:00000EE0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000EE0
.text:00000EE0 ; =============== S U B R O U T I N E =======================================
.text:00000EE0
.text:00000EE0 ; Attributes: bp-based frame
.text:00000EE0
.text:00000EE0 ; public: struct IHasher * __thiscall CMyComPtr<struct IHasher>::operator=(struct IHasher *)
.text:00000EE0                 public ??4?$CMyComPtr@UIHasher@@@@QAEPAUIHasher@@PAU1@@Z
.text:00000EE0 ??4?$CMyComPtr@UIHasher@@@@QAEPAUIHasher@@PAU1@@Z proc near
.text:00000EE0                                         ; CODE XREF: CreateHasher(unsigned __int64,AString &,CMyComPtr<IHasher> &)+7Ep
.text:00000EE0
.text:00000EE0 var_4           = dword ptr -4
.text:00000EE0 arg_0           = dword ptr  8
.text:00000EE0
.text:00000EE0                 push    ebp
.text:00000EE1                 mov     ebp, esp
.text:00000EE3                 push    ecx
.text:00000EE4                 push    esi
.text:00000EE5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000EEC                 mov     [ebp+var_4], ecx
.text:00000EEF                 cmp     [ebp+arg_0], 0
.text:00000EF3                 jz      short loc_F0C
.text:00000EF5                 mov     eax, [ebp+arg_0]
.text:00000EF8                 mov     ecx, [eax]
.text:00000EFA                 mov     esi, esp
.text:00000EFC                 mov     edx, [ebp+arg_0]
.text:00000EFF                 push    edx
.text:00000F00                 mov     eax, [ecx+4]
.text:00000F03                 call    eax
.text:00000F05                 cmp     esi, esp
.text:00000F07                 call    __RTC_CheckEsp
.text:00000F0C
.text:00000F0C loc_F0C:                                ; CODE XREF: CMyComPtr<IHasher>::operator=(IHasher *)+13j
.text:00000F0C                 mov     ecx, [ebp+var_4]
.text:00000F0F                 cmp     dword ptr [ecx], 0
.text:00000F12                 jz      short loc_F2F
.text:00000F14                 mov     edx, [ebp+var_4]
.text:00000F17                 mov     eax, [edx]
.text:00000F19                 mov     ecx, [ebp+var_4]
.text:00000F1C                 mov     edx, [ecx]
.text:00000F1E                 mov     eax, [eax]
.text:00000F20                 mov     esi, esp
.text:00000F22                 push    edx
.text:00000F23                 mov     ecx, [eax+8]
.text:00000F26                 call    ecx
.text:00000F28                 cmp     esi, esp
.text:00000F2A                 call    __RTC_CheckEsp
.text:00000F2F
.text:00000F2F loc_F2F:                                ; CODE XREF: CMyComPtr<IHasher>::operator=(IHasher *)+32j
.text:00000F2F                 mov     edx, [ebp+var_4]
.text:00000F32                 mov     eax, [ebp+arg_0]
.text:00000F35                 mov     [edx], eax
.text:00000F37                 mov     eax, [ebp+arg_0]
.text:00000F3A                 pop     esi
.text:00000F3B                 add     esp, 4
.text:00000F3E                 cmp     ebp, esp
.text:00000F40                 call    __RTC_CheckEsp
.text:00000F45                 mov     esp, ebp
.text:00000F47                 pop     ebp
.text:00000F48                 retn    4
.text:00000F48 ??4?$CMyComPtr@UIHasher@@@@QAEPAUIHasher@@PAU1@@Z endp
.text:00000F48
.text:00000F48 ; ---------------------------------------------------------------------------
.text:00000F4B                 align 4
.text:00000F4B _text           ends
.text:00000F4B
.text:00000F4C ; ===========================================================================
.text:00000F4C
.text:00000F4C ; Segment type: Pure code
.text:00000F4C ; Segment permissions: Read/Execute
.text:00000F4C _text           segment para public 'CODE' use32
.text:00000F4C                 assume cs:_text
.text:00000F4C                 ;org 0F4Ch
.text:00000F4C ; COMDAT (pick any)
.text:00000F4C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000F4C
.text:00000F4C ; =============== S U B R O U T I N E =======================================
.text:00000F4C
.text:00000F4C ; Attributes: bp-based frame
.text:00000F4C
.text:00000F4C ; public: void __thiscall CRecordVector<unsigned __int64>::ClearAndReserve(unsigned int)
.text:00000F4C                 public ?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z
.text:00000F4C ?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z proc near
.text:00000F4C                                         ; CODE XREF: CRecordVector<unsigned __int64>::ClearAndSetSize(uint)+15p
.text:00000F4C
.text:00000F4C var_C           = dword ptr -0Ch
.text:00000F4C var_8           = dword ptr -8
.text:00000F4C var_4           = dword ptr -4
.text:00000F4C arg_0           = dword ptr  8
.text:00000F4C
.text:00000F4C                 push    ebp
.text:00000F4D                 mov     ebp, esp
.text:00000F4F                 sub     esp, 0Ch
.text:00000F52                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000F59                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000F60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F67                 mov     [ebp+var_4], ecx
.text:00000F6A                 mov     ecx, [ebp+var_4]
.text:00000F6D                 call    ?Clear@?$CRecordVector@_K@@QAEXXZ ; CRecordVector<unsigned __int64>::Clear(void)
.text:00000F72                 mov     eax, [ebp+var_4]
.text:00000F75                 mov     ecx, [ebp+arg_0]
.text:00000F78                 cmp     ecx, [eax+8]
.text:00000F7B                 jbe     short loc_FD4
.text:00000F7D                 mov     edx, [ebp+var_4]
.text:00000F80                 mov     eax, [edx]
.text:00000F82                 mov     [ebp+var_8], eax
.text:00000F85                 mov     ecx, [ebp+var_8]
.text:00000F88                 push    ecx             ; void *
.text:00000F89                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000F8E                 add     esp, 4
.text:00000F91                 mov     edx, [ebp+var_4]
.text:00000F94                 mov     dword ptr [edx], 0
.text:00000F9A                 mov     eax, [ebp+var_4]
.text:00000F9D                 mov     dword ptr [eax+8], 0
.text:00000FA4                 xor     ecx, ecx
.text:00000FA6                 mov     eax, [ebp+arg_0]
.text:00000FA9                 mov     edx, 8
.text:00000FAE                 mul     edx
.text:00000FB0                 seto    cl
.text:00000FB3                 neg     ecx
.text:00000FB5                 or      ecx, eax
.text:00000FB7                 push    ecx             ; unsigned int
.text:00000FB8                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000FBD                 add     esp, 4
.text:00000FC0                 mov     [ebp+var_C], eax
.text:00000FC3                 mov     eax, [ebp+var_4]
.text:00000FC6                 mov     ecx, [ebp+var_C]
.text:00000FC9                 mov     [eax], ecx
.text:00000FCB                 mov     edx, [ebp+var_4]
.text:00000FCE                 mov     eax, [ebp+arg_0]
.text:00000FD1                 mov     [edx+8], eax
.text:00000FD4
.text:00000FD4 loc_FD4:                                ; CODE XREF: CRecordVector<unsigned __int64>::ClearAndReserve(uint)+2Fj
.text:00000FD4                 add     esp, 0Ch
.text:00000FD7                 cmp     ebp, esp
.text:00000FD9                 call    __RTC_CheckEsp
.text:00000FDE                 mov     esp, ebp
.text:00000FE0                 pop     ebp
.text:00000FE1                 retn    4
.text:00000FE1 ?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z endp
.text:00000FE1
.text:00000FE1 _text           ends
.text:00000FE1
.text:00000FE4 ; ===========================================================================
.text:00000FE4
.text:00000FE4 ; Segment type: Pure code
.text:00000FE4 ; Segment permissions: Read/Execute
.text:00000FE4 _text           segment para public 'CODE' use32
.text:00000FE4                 assume cs:_text
.text:00000FE4                 ;org 0FE4h
.text:00000FE4 ; COMDAT (pick any)
.text:00000FE4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000FE4
.text:00000FE4 ; =============== S U B R O U T I N E =======================================
.text:00000FE4
.text:00000FE4 ; Attributes: bp-based frame
.text:00000FE4
.text:00000FE4 ; public: void __thiscall CRecordVector<unsigned __int64>::Clear(void)
.text:00000FE4                 public ?Clear@?$CRecordVector@_K@@QAEXXZ
.text:00000FE4 ?Clear@?$CRecordVector@_K@@QAEXXZ proc near
.text:00000FE4                                         ; CODE XREF: CRecordVector<unsigned __int64>::ClearAndReserve(uint)+21p
.text:00000FE4
.text:00000FE4 var_4           = dword ptr -4
.text:00000FE4
.text:00000FE4                 push    ebp
.text:00000FE5                 mov     ebp, esp
.text:00000FE7                 push    ecx
.text:00000FE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000FEF                 mov     [ebp+var_4], ecx
.text:00000FF2                 mov     eax, [ebp+var_4]
.text:00000FF5                 mov     dword ptr [eax+4], 0
.text:00000FFC                 mov     esp, ebp
.text:00000FFE                 pop     ebp
.text:00000FFF                 retn
.text:00000FFF ?Clear@?$CRecordVector@_K@@QAEXXZ endp
.text:00000FFF
.text:00000FFF _text           ends
.text:00000FFF
UNDEF:00001000 ; ===========================================================================
UNDEF:00001000
UNDEF:00001000 ; Segment type: Externs
UNDEF:00001000 ; UNDEF
UNDEF:00001000                 extrn __RTC_Shutdown:near
UNDEF:00001000                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001004                 extrn __RTC_InitBase:near
UNDEF:00001004                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001008 ; bool __stdcall StringsAreEqualNoCase_Ascii(const char *, const char *)
UNDEF:00001008                 extrn ?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z:near
UNDEF:00001008                                         ; CODE XREF: FindMethod(AString const &,unsigned __int64 &,uint &)+4Ep
UNDEF:00001008                                         ; FindHashMethod(AString const &,unsigned __int64 &)+4Ep
UNDEF:0000100C                 extrn __RTC_CheckEsp:near
UNDEF:0000100C                                         ; CODE XREF: FindMethod(AString const &,unsigned __int64 &,uint &)+83p
UNDEF:0000100C                                         ; FindMethod(unsigned __int64,AString &)+85p ...
UNDEF:00001010 ; public: class AString & __thiscall AString::operator=(char const *)
UNDEF:00001010                 extrn ??4AString@@QAEAAV0@PBD@Z:near
UNDEF:00001010                                         ; CODE XREF: FindMethod(unsigned __int64,AString &)+73p
UNDEF:00001010                                         ; CreateHasher(unsigned __int64,AString &,CMyComPtr<IHasher> &)+8Dp
UNDEF:00001014 ; void __cdecl operator delete(void *)
UNDEF:00001014                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z$1+4p
UNDEF:00001014                                         ; CRecordVector<unsigned __int64>::ClearAndReserve(uint)+3Dp
UNDEF:00001018 ; _DWORD __thiscall CFilterCoder::CFilterCoder(CFilterCoder *__hidden this, bool)
UNDEF:00001018                 extrn ??0CFilterCoder@@QAE@_N@Z:near
UNDEF:00001018                                         ; CODE XREF: CreateCoder(unsigned __int64,bool,CCreatedCoder &)+A6p
UNDEF:0000101C ; void *__cdecl operator new(unsigned int)
UNDEF:0000101C                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CreateCoder(unsigned __int64,bool,CCreatedCoder &)+89p
UNDEF:0000101C                                         ; CRecordVector<unsigned __int64>::ClearAndReserve(uint)+6Cp
UNDEF:00001020                 extrn ___security_cookie:near
UNDEF:00001020                                         ; DATA XREF: CreateCoder(unsigned __int64,bool,CCreatedCoder &)+34r
UNDEF:00001020                                         ; CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressCoder> &)+31r ...
UNDEF:00001024                 extrn ___CxxFrameHandler3:near
UNDEF:00001024                                         ; CODE XREF: __ehhandler$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z+16j
UNDEF:00001024                                         ; __ehhandler$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z+16j ...
UNDEF:00001028 ; __fastcall __security_check_cookie(x)
UNDEF:00001028                 extrn @__security_check_cookie@4:near
UNDEF:00001028                                         ; CODE XREF: __ehhandler$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z+Cp
UNDEF:00001028                                         ; __ehhandler$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z+Cp ...
UNDEF:0000102C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000102C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000102C                                         ; CODE XREF: CreateCoder(unsigned __int64,bool,CCreatedCoder &)+107p
UNDEF:0000102C                                         ; CreateCoder(unsigned __int64,bool,CMyComPtr<ICompressCoder> &)+98p ...
UNDEF:0000102C
UNDEF:0000102C
UNDEF:0000102C                 end