.bss:00000000 ;
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.bss:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.bss:00000000 ; |                      License info: 48-3677-7074-51                      |
.bss:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.bss:00000000 ; +-------------------------------------------------------------------------+
.bss:00000000 ;
.bss:00000000 ; Input MD5   : 6088013C9712EA11EBC39DD077F15D93
.bss:00000000 ; Input CRC32 : AE09C4CA
.bss:00000000
.bss:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Alloc.obj
.bss:00000000 ; Format      : COFF (X386MAGIC)
.bss:00000000 ; includelib "uuid.lib"
.bss:00000000 ; includelib "MSVCRTD"
.bss:00000000 ; includelib "OLDNAMES"
.bss:00000000
.bss:00000000                 .686p
.bss:00000000                 .mmx
.bss:00000000                 .model flat
.bss:00000000
.bss:00000000 ; ===========================================================================
.bss:00000000
.bss:00000000 ; Segment type: Uninitialized
.bss:00000000 ; Segment permissions: Read/Write
.bss:00000000 _bss            segment dword public 'BSS' use32
.bss:00000000                 assume cs:_bss
.bss:00000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000                 public _g_LargePageSize
.bss:00000000 _g_LargePageSize dd ?                   ; DATA XREF: SetLargePageSize()+76w
.bss:00000000                                         ; BigAlloc(x):loc_1BEr ...
.bss:00000000 _bss            ends
.bss:00000000
.data:00000004 ; ===========================================================================
.data:00000004
.data:00000004 ; Segment type: Pure data
.data:00000004 ; Segment permissions: Read/Write
.data:00000004 _data           segment dword public 'DATA' use32
.data:00000004                 assume cs:_data
.data:00000004                 ;org 4
.data:00000004 ; CHAR _SG80036[]
.data:00000004 $SG80036        db 'GetLargePageMinimum',0
.data:00000004                                         ; DATA XREF: SetLargePageSize()+1Fo
.data:00000018 ; CHAR _SG80037[]
.data:00000018 $SG80037        db 'kernel32.dll',0     ; DATA XREF: SetLargePageSize()+26o
.data:00000025                 align 4
.data:00000028                 public _g_Alloc
.data:00000028 _g_Alloc        dd offset _SzAlloc@8    ; SzAlloc(x,x)
.data:0000002C                 dd offset _SzFree@8     ; SzFree(x,x)
.data:00000030                 public _g_BigAlloc
.data:00000030 _g_BigAlloc     dd offset _SzBigAlloc@8 ; SzBigAlloc(x,x)
.data:00000034                 dd offset _SzBigFree@8  ; SzBigFree(x,x)
.data:00000034 _data           ends
.data:00000034
.text:00000038 ; ===========================================================================
.text:00000038
.text:00000038 ; Segment type: Pure code
.text:00000038 ; Segment permissions: Read/Execute
.text:00000038 _text           segment para public 'CODE' use32
.text:00000038                 assume cs:_text
.text:00000038                 ;org 38h
.text:00000038                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000038
.text:00000038 ; =============== S U B R O U T I N E =======================================
.text:00000038
.text:00000038 ; Attributes: bp-based frame
.text:00000038
.text:00000038 ; int __stdcall MyAlloc(size_t Size)
.text:00000038                 public _MyAlloc@4
.text:00000038 _MyAlloc@4      proc near               ; CODE XREF: SzAlloc(x,x)+7p
.text:00000038
.text:00000038 Size            = dword ptr  8
.text:00000038
.text:00000038                 push    ebp
.text:00000039                 mov     ebp, esp
.text:0000003B                 push    esi
.text:0000003C                 cmp     [ebp+Size], 0
.text:00000040                 jnz     short loc_46
.text:00000042                 xor     eax, eax
.text:00000044                 jmp     short loc_5C
.text:00000046 ; ---------------------------------------------------------------------------
.text:00000046
.text:00000046 loc_46:                                 ; CODE XREF: MyAlloc(x)+8j
.text:00000046                 mov     esi, esp
.text:00000048                 mov     eax, [ebp+Size]
.text:0000004B                 push    eax             ; Size
.text:0000004C                 call    dword ptr ds:__imp__malloc
.text:00000052                 add     esp, 4
.text:00000055                 cmp     esi, esp
.text:00000057                 call    __RTC_CheckEsp
.text:0000005C
.text:0000005C loc_5C:                                 ; CODE XREF: MyAlloc(x)+Cj
.text:0000005C                 pop     esi
.text:0000005D                 cmp     ebp, esp
.text:0000005F                 call    __RTC_CheckEsp
.text:00000064                 pop     ebp
.text:00000065                 retn    4
.text:00000065 _MyAlloc@4      endp
.text:00000065
.text:00000068
.text:00000068 ; =============== S U B R O U T I N E =======================================
.text:00000068
.text:00000068 ; Attributes: bp-based frame
.text:00000068
.text:00000068 ; int __stdcall MyFree(void *Memory)
.text:00000068                 public _MyFree@4
.text:00000068 _MyFree@4       proc near               ; CODE XREF: SzFree(x,x)+7p
.text:00000068
.text:00000068 Memory          = dword ptr  8
.text:00000068
.text:00000068                 push    ebp
.text:00000069                 mov     ebp, esp
.text:0000006B                 push    esi
.text:0000006C                 mov     esi, esp
.text:0000006E                 mov     eax, [ebp+Memory]
.text:00000071                 push    eax             ; Memory
.text:00000072                 call    dword ptr ds:__imp__free
.text:00000078                 add     esp, 4
.text:0000007B                 cmp     esi, esp
.text:0000007D                 call    __RTC_CheckEsp
.text:00000082                 pop     esi
.text:00000083                 cmp     ebp, esp
.text:00000085                 call    __RTC_CheckEsp
.text:0000008A                 pop     ebp
.text:0000008B                 retn    4
.text:0000008B _MyFree@4       endp
.text:0000008B
.text:0000008B ; ---------------------------------------------------------------------------
.text:0000008E                 db 0Ah dup(0CCh)
.text:00000098
.text:00000098 ; =============== S U B R O U T I N E =======================================
.text:00000098
.text:00000098 ; Attributes: bp-based frame
.text:00000098
.text:00000098 ; int __stdcall MidAlloc(SIZE_T dwSize)
.text:00000098                 public _MidAlloc@4
.text:00000098 _MidAlloc@4     proc near
.text:00000098
.text:00000098 dwSize          = dword ptr  8
.text:00000098
.text:00000098                 push    ebp
.text:00000099                 mov     ebp, esp
.text:0000009B                 push    esi
.text:0000009C                 cmp     [ebp+dwSize], 0
.text:000000A0                 jnz     short loc_A6
.text:000000A2                 xor     eax, eax
.text:000000A4                 jmp     short loc_C2
.text:000000A6 ; ---------------------------------------------------------------------------
.text:000000A6
.text:000000A6 loc_A6:                                 ; CODE XREF: MidAlloc(x)+8j
.text:000000A6                 mov     esi, esp
.text:000000A8                 push    4               ; flProtect
.text:000000AA                 push    1000h           ; flAllocationType
.text:000000AF                 mov     eax, [ebp+dwSize]
.text:000000B2                 push    eax             ; dwSize
.text:000000B3                 push    0               ; lpAddress
.text:000000B5                 call    dword ptr ds:__imp__VirtualAlloc@16 ; VirtualAlloc(x,x,x,x)
.text:000000BB                 cmp     esi, esp
.text:000000BD                 call    __RTC_CheckEsp
.text:000000C2
.text:000000C2 loc_C2:                                 ; CODE XREF: MidAlloc(x)+Cj
.text:000000C2                 pop     esi
.text:000000C3                 cmp     ebp, esp
.text:000000C5                 call    __RTC_CheckEsp
.text:000000CA                 pop     ebp
.text:000000CB                 retn    4
.text:000000CB _MidAlloc@4     endp
.text:000000CB
.text:000000CB ; ---------------------------------------------------------------------------
.text:000000CE                 db 0Ah dup(0CCh)
.text:000000D8
.text:000000D8 ; =============== S U B R O U T I N E =======================================
.text:000000D8
.text:000000D8 ; Attributes: bp-based frame
.text:000000D8
.text:000000D8 ; int __stdcall MidFree(LPVOID lpAddress)
.text:000000D8                 public _MidFree@4
.text:000000D8 _MidFree@4      proc near
.text:000000D8
.text:000000D8 lpAddress       = dword ptr  8
.text:000000D8
.text:000000D8                 push    ebp
.text:000000D9                 mov     ebp, esp
.text:000000DB                 push    esi
.text:000000DC                 cmp     [ebp+lpAddress], 0
.text:000000E0                 jnz     short loc_E4
.text:000000E2                 jmp     short loc_FE
.text:000000E4 ; ---------------------------------------------------------------------------
.text:000000E4
.text:000000E4 loc_E4:                                 ; CODE XREF: MidFree(x)+8j
.text:000000E4                 mov     esi, esp
.text:000000E6                 push    8000h           ; dwFreeType
.text:000000EB                 push    0               ; dwSize
.text:000000ED                 mov     eax, [ebp+lpAddress]
.text:000000F0                 push    eax             ; lpAddress
.text:000000F1                 call    dword ptr ds:__imp__VirtualFree@12 ; VirtualFree(x,x,x)
.text:000000F7                 cmp     esi, esp
.text:000000F9                 call    __RTC_CheckEsp
.text:000000FE
.text:000000FE loc_FE:                                 ; CODE XREF: MidFree(x)+Aj
.text:000000FE                 pop     esi
.text:000000FF                 cmp     ebp, esp
.text:00000101                 call    __RTC_CheckEsp
.text:00000106                 pop     ebp
.text:00000107                 retn    4
.text:00000107 _MidFree@4      endp
.text:00000107
.text:00000107 ; ---------------------------------------------------------------------------
.text:0000010A                 db 0Eh dup(0CCh)
.text:00000118
.text:00000118 ; =============== S U B R O U T I N E =======================================
.text:00000118
.text:00000118 ; Attributes: bp-based frame
.text:00000118
.text:00000118 ; _DWORD __stdcall SetLargePageSize()
.text:00000118                 public _SetLargePageSize@0
.text:00000118 _SetLargePageSize@0 proc near
.text:00000118
.text:00000118 var_8           = dword ptr -8
.text:00000118 var_4           = dword ptr -4
.text:00000118
.text:00000118                 push    ebp
.text:00000119                 mov     ebp, esp
.text:0000011B                 sub     esp, 8
.text:0000011E                 push    esi
.text:0000011F                 push    edi
.text:00000120                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000127                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000012E                 mov     [ebp+var_4], 0
.text:00000135                 mov     esi, esp
.text:00000137                 push    offset $SG80036 ; "GetLargePageMinimum"
.text:0000013C                 mov     edi, esp
.text:0000013E                 push    offset $SG80037 ; "kernel32.dll"
.text:00000143                 call    dword ptr ds:__imp__GetModuleHandleA@4 ; GetModuleHandleA(x)
.text:00000149                 cmp     edi, esp
.text:0000014B                 call    __RTC_CheckEsp
.text:00000150                 push    eax             ; hModule
.text:00000151                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text:00000157                 cmp     esi, esp
.text:00000159                 call    __RTC_CheckEsp
.text:0000015E                 mov     [ebp+var_8], eax
.text:00000161                 cmp     [ebp+var_8], 0
.text:00000165                 jnz     short loc_169
.text:00000167                 jmp     short loc_194
.text:00000169 ; ---------------------------------------------------------------------------
.text:00000169
.text:00000169 loc_169:                                ; CODE XREF: SetLargePageSize()+4Dj
.text:00000169                 mov     esi, esp
.text:0000016B                 call    [ebp+var_8]
.text:0000016E                 cmp     esi, esp
.text:00000170                 call    __RTC_CheckEsp
.text:00000175                 mov     [ebp+var_4], eax
.text:00000178                 cmp     [ebp+var_4], 0
.text:0000017C                 jz      short loc_189
.text:0000017E                 mov     eax, [ebp+var_4]
.text:00000181                 sub     eax, 1
.text:00000184                 and     eax, [ebp+var_4]
.text:00000187                 jz      short loc_18B
.text:00000189
.text:00000189 loc_189:                                ; CODE XREF: SetLargePageSize()+64j
.text:00000189                 jmp     short loc_194
.text:0000018B ; ---------------------------------------------------------------------------
.text:0000018B
.text:0000018B loc_18B:                                ; CODE XREF: SetLargePageSize()+6Fj
.text:0000018B                 mov     ecx, [ebp+var_4]
.text:0000018E                 mov     ds:_g_LargePageSize, ecx
.text:00000194
.text:00000194 loc_194:                                ; CODE XREF: SetLargePageSize()+4Fj
.text:00000194                                         ; SetLargePageSize():loc_189j
.text:00000194                 pop     edi
.text:00000195                 pop     esi
.text:00000196                 add     esp, 8
.text:00000199                 cmp     ebp, esp
.text:0000019B                 call    __RTC_CheckEsp
.text:000001A0                 mov     esp, ebp
.text:000001A2                 pop     ebp
.text:000001A3                 retn
.text:000001A3 _SetLargePageSize@0 endp
.text:000001A3
.text:000001A3 ; ---------------------------------------------------------------------------
.text:000001A4                 align 8
.text:000001A8
.text:000001A8 ; =============== S U B R O U T I N E =======================================
.text:000001A8
.text:000001A8 ; Attributes: bp-based frame
.text:000001A8
.text:000001A8 ; int __stdcall BigAlloc(SIZE_T dwSize)
.text:000001A8                 public _BigAlloc@4
.text:000001A8 _BigAlloc@4     proc near               ; CODE XREF: SzBigAlloc(x,x)+7p
.text:000001A8
.text:000001A8 var_4           = dword ptr -4
.text:000001A8 dwSize          = dword ptr  8
.text:000001A8
.text:000001A8                 push    ebp
.text:000001A9                 mov     ebp, esp
.text:000001AB                 push    ecx
.text:000001AC                 push    esi
.text:000001AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001B4                 cmp     [ebp+dwSize], 0
.text:000001B8                 jnz     short loc_1BE
.text:000001BA                 xor     eax, eax
.text:000001BC                 jmp     short loc_237
.text:000001BE ; ---------------------------------------------------------------------------
.text:000001BE
.text:000001BE loc_1BE:                                ; CODE XREF: BigAlloc(x)+10j
.text:000001BE                 cmp     ds:_g_LargePageSize, 0
.text:000001C5                 jz      short loc_21B
.text:000001C7                 cmp     ds:_g_LargePageSize, 40000000h
.text:000001D1                 ja      short loc_21B
.text:000001D3                 cmp     [ebp+dwSize], 40000h
.text:000001DA                 jb      short loc_21B
.text:000001DC                 mov     esi, esp
.text:000001DE                 push    4               ; flProtect
.text:000001E0                 push    20001000h       ; flAllocationType
.text:000001E5                 mov     eax, ds:_g_LargePageSize
.text:000001EA                 mov     ecx, [ebp+dwSize]
.text:000001ED                 lea     edx, [ecx+eax-1]
.text:000001F1                 mov     eax, ds:_g_LargePageSize
.text:000001F6                 sub     eax, 1
.text:000001F9                 not     eax
.text:000001FB                 and     edx, eax
.text:000001FD                 push    edx             ; dwSize
.text:000001FE                 push    0               ; lpAddress
.text:00000200                 call    dword ptr ds:__imp__VirtualAlloc@16 ; VirtualAlloc(x,x,x,x)
.text:00000206                 cmp     esi, esp
.text:00000208                 call    __RTC_CheckEsp
.text:0000020D                 mov     [ebp+var_4], eax
.text:00000210                 cmp     [ebp+var_4], 0
.text:00000214                 jz      short loc_21B
.text:00000216                 mov     eax, [ebp+var_4]
.text:00000219                 jmp     short loc_237
.text:0000021B ; ---------------------------------------------------------------------------
.text:0000021B
.text:0000021B loc_21B:                                ; CODE XREF: BigAlloc(x)+1Dj
.text:0000021B                                         ; BigAlloc(x)+29j ...
.text:0000021B                 mov     esi, esp
.text:0000021D                 push    4               ; flProtect
.text:0000021F                 push    1000h           ; flAllocationType
.text:00000224                 mov     ecx, [ebp+dwSize]
.text:00000227                 push    ecx             ; dwSize
.text:00000228                 push    0               ; lpAddress
.text:0000022A                 call    dword ptr ds:__imp__VirtualAlloc@16 ; VirtualAlloc(x,x,x,x)
.text:00000230                 cmp     esi, esp
.text:00000232                 call    __RTC_CheckEsp
.text:00000237
.text:00000237 loc_237:                                ; CODE XREF: BigAlloc(x)+14j
.text:00000237                                         ; BigAlloc(x)+71j
.text:00000237                 pop     esi
.text:00000238                 add     esp, 4
.text:0000023B                 cmp     ebp, esp
.text:0000023D                 call    __RTC_CheckEsp
.text:00000242                 mov     esp, ebp
.text:00000244                 pop     ebp
.text:00000245                 retn    4
.text:00000245 _BigAlloc@4     endp
.text:00000245
.text:00000248
.text:00000248 ; =============== S U B R O U T I N E =======================================
.text:00000248
.text:00000248 ; Attributes: bp-based frame
.text:00000248
.text:00000248 ; int __stdcall BigFree(LPVOID lpAddress)
.text:00000248                 public _BigFree@4
.text:00000248 _BigFree@4      proc near               ; CODE XREF: SzBigFree(x,x)+7p
.text:00000248
.text:00000248 lpAddress       = dword ptr  8
.text:00000248
.text:00000248                 push    ebp
.text:00000249                 mov     ebp, esp
.text:0000024B                 push    esi
.text:0000024C                 cmp     [ebp+lpAddress], 0
.text:00000250                 jnz     short loc_254
.text:00000252                 jmp     short loc_26E
.text:00000254 ; ---------------------------------------------------------------------------
.text:00000254
.text:00000254 loc_254:                                ; CODE XREF: BigFree(x)+8j
.text:00000254                 mov     esi, esp
.text:00000256                 push    8000h           ; dwFreeType
.text:0000025B                 push    0               ; dwSize
.text:0000025D                 mov     eax, [ebp+lpAddress]
.text:00000260                 push    eax             ; lpAddress
.text:00000261                 call    dword ptr ds:__imp__VirtualFree@12 ; VirtualFree(x,x,x)
.text:00000267                 cmp     esi, esp
.text:00000269                 call    __RTC_CheckEsp
.text:0000026E
.text:0000026E loc_26E:                                ; CODE XREF: BigFree(x)+Aj
.text:0000026E                 pop     esi
.text:0000026F                 cmp     ebp, esp
.text:00000271                 call    __RTC_CheckEsp
.text:00000276                 pop     ebp
.text:00000277                 retn    4
.text:00000277 _BigFree@4      endp
.text:00000277
.text:00000277 ; ---------------------------------------------------------------------------
.text:0000027A                 db 0Eh dup(0CCh)
.text:00000288
.text:00000288 ; =============== S U B R O U T I N E =======================================
.text:00000288
.text:00000288 ; Attributes: bp-based frame
.text:00000288
.text:00000288 ; int __stdcall SzAlloc(int, size_t Size)
.text:00000288 _SzAlloc@8      proc near               ; DATA XREF: .data:_g_Alloco
.text:00000288
.text:00000288 Size            = dword ptr  0Ch
.text:00000288
.text:00000288                 push    ebp
.text:00000289                 mov     ebp, esp
.text:0000028B                 mov     eax, [ebp+Size]
.text:0000028E                 push    eax             ; Size
.text:0000028F                 call    _MyAlloc@4      ; MyAlloc(x)
.text:00000294                 cmp     ebp, esp
.text:00000296                 call    __RTC_CheckEsp
.text:0000029B                 pop     ebp
.text:0000029C                 retn    8
.text:0000029C _SzAlloc@8      endp
.text:0000029C
.text:0000029C ; ---------------------------------------------------------------------------
.text:0000029F                 db 9 dup(0CCh)
.text:000002A8
.text:000002A8 ; =============== S U B R O U T I N E =======================================
.text:000002A8
.text:000002A8 ; Attributes: bp-based frame
.text:000002A8
.text:000002A8 ; int __stdcall SzFree(int, void *Memory)
.text:000002A8 _SzFree@8       proc near               ; DATA XREF: .data:0000002Co
.text:000002A8
.text:000002A8 Memory          = dword ptr  0Ch
.text:000002A8
.text:000002A8                 push    ebp
.text:000002A9                 mov     ebp, esp
.text:000002AB                 mov     eax, [ebp+Memory]
.text:000002AE                 push    eax             ; Memory
.text:000002AF                 call    _MyFree@4       ; MyFree(x)
.text:000002B4                 cmp     ebp, esp
.text:000002B6                 call    __RTC_CheckEsp
.text:000002BB                 pop     ebp
.text:000002BC                 retn    8
.text:000002BC _SzFree@8       endp
.text:000002BC
.text:000002BC ; ---------------------------------------------------------------------------
.text:000002BF                 db 9 dup(0CCh)
.text:000002C8
.text:000002C8 ; =============== S U B R O U T I N E =======================================
.text:000002C8
.text:000002C8 ; Attributes: bp-based frame
.text:000002C8
.text:000002C8 ; int __stdcall SzBigAlloc(int, SIZE_T dwSize)
.text:000002C8 _SzBigAlloc@8   proc near               ; DATA XREF: .data:_g_BigAlloco
.text:000002C8
.text:000002C8 dwSize          = dword ptr  0Ch
.text:000002C8
.text:000002C8                 push    ebp
.text:000002C9                 mov     ebp, esp
.text:000002CB                 mov     eax, [ebp+dwSize]
.text:000002CE                 push    eax             ; dwSize
.text:000002CF                 call    _BigAlloc@4     ; BigAlloc(x)
.text:000002D4                 cmp     ebp, esp
.text:000002D6                 call    __RTC_CheckEsp
.text:000002DB                 pop     ebp
.text:000002DC                 retn    8
.text:000002DC _SzBigAlloc@8   endp
.text:000002DC
.text:000002DC ; ---------------------------------------------------------------------------
.text:000002DF                 db 9 dup(0CCh)
.text:000002E8
.text:000002E8 ; =============== S U B R O U T I N E =======================================
.text:000002E8
.text:000002E8 ; Attributes: bp-based frame
.text:000002E8
.text:000002E8 ; int __stdcall SzBigFree(int, LPVOID lpAddress)
.text:000002E8 _SzBigFree@8    proc near               ; DATA XREF: .data:00000034o
.text:000002E8
.text:000002E8 lpAddress       = dword ptr  0Ch
.text:000002E8
.text:000002E8                 push    ebp
.text:000002E9                 mov     ebp, esp
.text:000002EB                 mov     eax, [ebp+lpAddress]
.text:000002EE                 push    eax             ; lpAddress
.text:000002EF                 call    _BigFree@4      ; BigFree(x)
.text:000002F4                 cmp     ebp, esp
.text:000002F6                 call    __RTC_CheckEsp
.text:000002FB                 pop     ebp
.text:000002FC                 retn    8
.text:000002FC _SzBigFree@8    endp
.text:000002FC
.text:000002FC ; ---------------------------------------------------------------------------
.text:000002FF                 align 10h
.text:000002FF _text           ends
.text:000002FF
.rtc$TMZ:00000300 ; ===========================================================================
.rtc$TMZ:00000300
.rtc$TMZ:00000300 ; Segment type: Pure data
.rtc$TMZ:00000300 ; Segment permissions: Read
.rtc$TMZ:00000300 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000300                 assume cs:_rtc$TMZ
.rtc$TMZ:00000300                 ;org 300h
.rtc$TMZ:00000300 ; COMDAT (pick any)
.rtc$TMZ:00000300 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000300 _rtc$TMZ        ends
.rtc$TMZ:00000300
.rtc$IMZ:00000304 ; ===========================================================================
.rtc$IMZ:00000304
.rtc$IMZ:00000304 ; Segment type: Pure data
.rtc$IMZ:00000304 ; Segment permissions: Read
.rtc$IMZ:00000304 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000304                 assume cs:_rtc$IMZ
.rtc$IMZ:00000304                 ;org 304h
.rtc$IMZ:00000304 ; COMDAT (pick any)
.rtc$IMZ:00000304 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000304 _rtc$IMZ        ends
.rtc$IMZ:00000304
UNDEF:00000310 ; ===========================================================================
UNDEF:00000310
UNDEF:00000310 ; Segment type: Externs
UNDEF:00000310 ; UNDEF
UNDEF:00000310 ; void *__cdecl _malloc(size_t Size)
UNDEF:00000310                 extrn __imp__malloc:near ; CODE XREF: MyAlloc(x)+14p
UNDEF:00000310                                         ; DATA XREF: MyAlloc(x)+14r
UNDEF:00000314                 extrn __RTC_CheckEsp:near ; CODE XREF: MyAlloc(x)+1Fp
UNDEF:00000314                                         ; MyAlloc(x)+27p ...
UNDEF:00000318                 extrn __RTC_Shutdown:near
UNDEF:00000318                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000031C                 extrn __RTC_InitBase:near
UNDEF:0000031C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000320 ; void __cdecl _free(void *Memory)
UNDEF:00000320                 extrn __imp__free:near  ; CODE XREF: MyFree(x)+Ap
UNDEF:00000320                                         ; DATA XREF: MyFree(x)+Ar
UNDEF:00000324 ; LPVOID __stdcall VirtualAlloc(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect)
UNDEF:00000324                 extrn __imp__VirtualAlloc@16:near
UNDEF:00000324                                         ; CODE XREF: MidAlloc(x)+1Dp
UNDEF:00000324                                         ; BigAlloc(x)+58p ...
UNDEF:00000328 ; BOOL __stdcall VirtualFree(LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType)
UNDEF:00000328                 extrn __imp__VirtualFree@12:near ; CODE XREF: MidFree(x)+19p
UNDEF:00000328                                         ; BigFree(x)+19p
UNDEF:00000328                                         ; DATA XREF: ...
UNDEF:0000032C ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
UNDEF:0000032C                 extrn __imp__GetProcAddress@8:near
UNDEF:0000032C                                         ; CODE XREF: SetLargePageSize()+39p
UNDEF:0000032C                                         ; DATA XREF: SetLargePageSize()+39r
UNDEF:00000330 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
UNDEF:00000330                 extrn __imp__GetModuleHandleA@4:near
UNDEF:00000330                                         ; CODE XREF: SetLargePageSize()+2Bp
UNDEF:00000330                                         ; DATA XREF: SetLargePageSize()+2Br
UNDEF:00000330
UNDEF:00000330
UNDEF:00000330                 end