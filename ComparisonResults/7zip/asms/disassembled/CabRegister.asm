.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 3F2CB444392FE70ACFD6871111430511
.rdata:00000000 ; Input CRC32 : FAD75E4F
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\CabRegister.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG68997        db  43h ; C             ; DATA XREF: .rdata:00000014o
.rdata:00000001                 db  61h ; a
.rdata:00000002                 db  62h ; b
.rdata:00000003                 db    0
.rdata:00000004 $SG68998        db  63h ; c             ; DATA XREF: .rdata:00000018o
.rdata:00000005                 db  61h ; a
.rdata:00000006                 db  62h ; b
.rdata:00000007                 db    0
.rdata:00000008 ; struct CArcInfo g_ArcInfo
.rdata:00000008 _g_ArcInfo      db    8                 ; DATA XREF: NArchive::NCab::CRegisterArc::CRegisterArc(void)+Eo
.rdata:00000009                 db    0
.rdata:0000000A                 db    8
.rdata:0000000B                 db    8
.rdata:0000000C                 db    0
.rdata:0000000D                 db    0
.rdata:0000000E                 db    0
.rdata:0000000F                 db    0
.rdata:00000010                 dd offset ?kMarker@NHeader@NCab@NArchive@@3QBEB ; uchar const * const NArchive::NCab::NHeader::kMarker
.rdata:00000014                 dd offset $SG68997
.rdata:00000018                 dd offset $SG68998
.rdata:0000001C                 align 10h
.rdata:00000020                 dd offset ?CreateArc@NCab@NArchive@@YGPAUIInArchive@@XZ ; NArchive::NCab::CreateArc(void)
.rdata:00000024                 db    0
.rdata:00000025                 db    0
.rdata:00000026                 db    0
.rdata:00000027                 db    0
.rdata:00000028                 db    0
.rdata:00000029                 db    0
.rdata:0000002A                 db    0
.rdata:0000002B                 db    0
.rdata:0000002B _rdata          ends
.rdata:0000002B
.text:0000002C ; ===========================================================================
.text:0000002C
.text:0000002C ; Segment type: Pure code
.text:0000002C ; Segment permissions: Read/Execute
.text:0000002C _text           segment para public 'CODE' use32
.text:0000002C                 assume cs:_text
.text:0000002C                 ;org 2Ch
.text:0000002C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000002C
.text:0000002C ; =============== S U B R O U T I N E =======================================
.text:0000002C
.text:0000002C ; Attributes: bp-based frame
.text:0000002C
.text:0000002C ; struct IInArchive * __stdcall NArchive::NCab::CreateArc(void)
.text:0000002C ?CreateArc@NCab@NArchive@@YGPAUIInArchive@@XZ proc near
.text:0000002C                                         ; DATA XREF: .rdata:00000020o
.text:0000002C
.text:0000002C var_18          = dword ptr -18h
.text:0000002C var_14          = dword ptr -14h
.text:0000002C var_10          = dword ptr -10h
.text:0000002C var_C           = dword ptr -0Ch
.text:0000002C var_4           = dword ptr -4
.text:0000002C
.text:0000002C                 push    ebp
.text:0000002D                 mov     ebp, esp
.text:0000002F                 push    0FFFFFFFFh
.text:00000031                 push    offset __ehhandler$?CreateArc@NCab@NArchive@@YGPAUIInArchive@@XZ
.text:00000036                 mov     eax, large fs:0
.text:0000003C                 push    eax
.text:0000003D                 sub     esp, 0Ch
.text:00000040                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00000047                 mov     [ebp+var_14], 0CCCCCCCCh
.text:0000004E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000055                 mov     eax, dword ptr ds:___security_cookie
.text:0000005A                 xor     eax, ebp
.text:0000005C                 push    eax
.text:0000005D                 lea     eax, [ebp+var_C]
.text:00000060                 mov     large fs:0, eax
.text:00000066                 push    58h ; 'X'       ; unsigned int
.text:00000068                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000006D                 add     esp, 4
.text:00000070                 mov     [ebp+var_14], eax
.text:00000073                 mov     [ebp+var_4], 0
.text:0000007A                 cmp     [ebp+var_14], 0
.text:0000007E                 jz      short loc_8D
.text:00000080                 mov     ecx, [ebp+var_14] ; this
.text:00000083                 call    ??0CHandler@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CHandler::CHandler(void)
.text:00000088                 mov     [ebp+var_18], eax
.text:0000008B                 jmp     short loc_94
.text:0000008D ; ---------------------------------------------------------------------------
.text:0000008D
.text:0000008D loc_8D:                                 ; CODE XREF: NArchive::NCab::CreateArc(void)+52j
.text:0000008D                 mov     [ebp+var_18], 0
.text:00000094
.text:00000094 loc_94:                                 ; CODE XREF: NArchive::NCab::CreateArc(void)+5Fj
.text:00000094                 mov     eax, [ebp+var_18]
.text:00000097                 mov     [ebp+var_10], eax
.text:0000009A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000000A1                 mov     eax, [ebp+var_10]
.text:000000A4                 mov     ecx, [ebp+var_C]
.text:000000A7                 mov     large fs:0, ecx
.text:000000AE                 pop     ecx
.text:000000AF                 add     esp, 18h
.text:000000B2                 cmp     ebp, esp
.text:000000B4                 call    __RTC_CheckEsp
.text:000000B9                 mov     esp, ebp
.text:000000BB                 pop     ebp
.text:000000BC                 retn
.text:000000BC ?CreateArc@NCab@NArchive@@YGPAUIInArchive@@XZ endp
.text:000000BC
.text:000000BC ; ---------------------------------------------------------------------------
.text:000000BD                 align 10h
.text:000000BD _text           ends
.text:000000BD
.text$x:000000C0 ; ===========================================================================
.text$x:000000C0
.text$x:000000C0 ; Segment type: Pure code
.text$x:000000C0 ; Segment permissions: Read/Execute
.text$x:000000C0 _text$x         segment para public 'CODE' use32
.text$x:000000C0                 assume cs:_text$x
.text$x:000000C0                 ;org 0C0h
.text$x:000000C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000000C0
.text$x:000000C0 ; =============== S U B R O U T I N E =======================================
.text$x:000000C0
.text$x:000000C0
.text$x:000000C0 __unwindfunclet$?CreateArc@NCab@NArchive@@YGPAUIInArchive@@XZ$0 proc near
.text$x:000000C0                                         ; DATA XREF: .xdata$x:000000ECo
.text$x:000000C0                 mov     eax, [ebp-14h]
.text$x:000000C3                 push    eax             ; void *
.text$x:000000C4                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000000C9                 pop     ecx
.text$x:000000CA                 retn
.text$x:000000CA __unwindfunclet$?CreateArc@NCab@NArchive@@YGPAUIInArchive@@XZ$0 endp
.text$x:000000CA
.text$x:000000CB
.text$x:000000CB ; =============== S U B R O U T I N E =======================================
.text$x:000000CB
.text$x:000000CB
.text$x:000000CB __ehhandler$?CreateArc@NCab@NArchive@@YGPAUIInArchive@@XZ proc near
.text$x:000000CB                                         ; DATA XREF: NArchive::NCab::CreateArc(void)+5o
.text$x:000000CB
.text$x:000000CB arg_4           = dword ptr  8
.text$x:000000CB
.text$x:000000CB                 mov     edx, [esp+arg_4]
.text$x:000000CF                 lea     eax, [edx+0Ch]
.text$x:000000D2                 mov     ecx, [edx-10h]
.text$x:000000D5                 xor     ecx, eax
.text$x:000000D7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000000DC                 mov     eax, offset __ehfuncinfo$?CreateArc@NCab@NArchive@@YGPAUIInArchive@@XZ
.text$x:000000E1                 jmp     ___CxxFrameHandler3
.text$x:000000E1 __ehhandler$?CreateArc@NCab@NArchive@@YGPAUIInArchive@@XZ endp
.text$x:000000E1
.text$x:000000E1 ; ---------------------------------------------------------------------------
.text$x:000000E6                 align 4
.text$x:000000E6 _text$x         ends
.text$x:000000E6
.xdata$x:000000E8 ; ===========================================================================
.xdata$x:000000E8
.xdata$x:000000E8 ; Segment type: Pure data
.xdata$x:000000E8 ; Segment permissions: Read
.xdata$x:000000E8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000000E8                 assume cs:_xdata$x
.xdata$x:000000E8                 ;org 0E8h
.xdata$x:000000E8 __unwindtable$?CreateArc@NCab@NArchive@@YGPAUIInArchive@@XZ db 0FFh
.xdata$x:000000E8                                         ; DATA XREF: .xdata$x:000000F8o
.xdata$x:000000E9                 db 0FFh
.xdata$x:000000EA                 db 0FFh
.xdata$x:000000EB                 db 0FFh
.xdata$x:000000EC                 dd offset __unwindfunclet$?CreateArc@NCab@NArchive@@YGPAUIInArchive@@XZ$0
.xdata$x:000000F0 __ehfuncinfo$?CreateArc@NCab@NArchive@@YGPAUIInArchive@@XZ db  22h ; "
.xdata$x:000000F0                                         ; DATA XREF: __ehhandler$?CreateArc@NCab@NArchive@@YGPAUIInArchive@@XZ+11o
.xdata$x:000000F1                 db    5
.xdata$x:000000F2                 db  93h ; ô
.xdata$x:000000F3                 db  19h
.xdata$x:000000F4                 db    1
.xdata$x:000000F5                 db    0
.xdata$x:000000F6                 db    0
.xdata$x:000000F7                 db    0
.xdata$x:000000F8                 dd offset __unwindtable$?CreateArc@NCab@NArchive@@YGPAUIInArchive@@XZ
.xdata$x:000000FC                 db    0
.xdata$x:000000FD                 db    0
.xdata$x:000000FE                 db    0
.xdata$x:000000FF                 db    0
.xdata$x:00000100                 db    0
.xdata$x:00000101                 db    0
.xdata$x:00000102                 db    0
.xdata$x:00000103                 db    0
.xdata$x:00000104                 db    0
.xdata$x:00000105                 db    0
.xdata$x:00000106                 db    0
.xdata$x:00000107                 db    0
.xdata$x:00000108                 db    0
.xdata$x:00000109                 db    0
.xdata$x:0000010A                 db    0
.xdata$x:0000010B                 db    0
.xdata$x:0000010C                 db    0
.xdata$x:0000010D                 db    0
.xdata$x:0000010E                 db    0
.xdata$x:0000010F                 db    0
.xdata$x:00000110                 db    1
.xdata$x:00000111                 db    0
.xdata$x:00000112                 db    0
.xdata$x:00000113                 db    0
.xdata$x:00000113 _xdata$x        ends
.xdata$x:00000113
.rtc$TMZ:00000114 ; ===========================================================================
.rtc$TMZ:00000114
.rtc$TMZ:00000114 ; Segment type: Pure data
.rtc$TMZ:00000114 ; Segment permissions: Read
.rtc$TMZ:00000114 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000114                 assume cs:_rtc$TMZ
.rtc$TMZ:00000114                 ;org 114h
.rtc$TMZ:00000114 ; COMDAT (pick any)
.rtc$TMZ:00000114 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000114 _rtc$TMZ        ends
.rtc$TMZ:00000114
.rtc$IMZ:00000118 ; ===========================================================================
.rtc$IMZ:00000118
.rtc$IMZ:00000118 ; Segment type: Pure data
.rtc$IMZ:00000118 ; Segment permissions: Read
.rtc$IMZ:00000118 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000118                 assume cs:_rtc$IMZ
.rtc$IMZ:00000118                 ;org 118h
.rtc$IMZ:00000118 ; COMDAT (pick any)
.rtc$IMZ:00000118 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000118 _rtc$IMZ        ends
.rtc$IMZ:00000118
.text:0000011C ; ===========================================================================
.text:0000011C
.text:0000011C ; Segment type: Pure code
.text:0000011C ; Segment permissions: Read/Execute
.text:0000011C _text           segment para public 'CODE' use32
.text:0000011C                 assume cs:_text
.text:0000011C                 ;org 11Ch
.text:0000011C ; COMDAT (pick any)
.text:0000011C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000011C
.text:0000011C ; =============== S U B R O U T I N E =======================================
.text:0000011C
.text:0000011C ; Attributes: bp-based frame
.text:0000011C
.text:0000011C ; _DWORD __thiscall NArchive::NCab::CHandler::CHandler(NArchive::NCab::CHandler *__hidden this)
.text:0000011C                 public ??0CHandler@NCab@NArchive@@QAE@XZ
.text:0000011C ??0CHandler@NCab@NArchive@@QAE@XZ proc near
.text:0000011C                                         ; CODE XREF: NArchive::NCab::CreateArc(void)+57p
.text:0000011C
.text:0000011C var_10          = dword ptr -10h
.text:0000011C var_C           = dword ptr -0Ch
.text:0000011C var_4           = dword ptr -4
.text:0000011C
.text:0000011C                 push    ebp
.text:0000011D                 mov     ebp, esp
.text:0000011F                 push    0FFFFFFFFh
.text:00000121                 push    offset __ehhandler$??0CHandler@NCab@NArchive@@QAE@XZ
.text:00000126                 mov     eax, large fs:0
.text:0000012C                 push    eax
.text:0000012D                 push    ecx
.text:0000012E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000135                 mov     eax, dword ptr ds:___security_cookie
.text:0000013A                 xor     eax, ebp
.text:0000013C                 push    eax
.text:0000013D                 lea     eax, [ebp+var_C]
.text:00000140                 mov     large fs:0, eax
.text:00000146                 mov     [ebp+var_10], ecx
.text:00000149                 mov     ecx, [ebp+var_10] ; this
.text:0000014C                 call    ??0IInArchive@@QAE@XZ ; IInArchive::IInArchive(void)
.text:00000151                 mov     ecx, [ebp+var_10]
.text:00000154                 add     ecx, 4          ; this
.text:00000157                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000015C                 mov     eax, [ebp+var_10]
.text:0000015F                 mov     dword ptr [eax], offset ??_7CHandler@NCab@NArchive@@6B@ ; const NArchive::NCab::CHandler::`vftable'
.text:00000165                 mov     ecx, [ebp+var_10]
.text:00000168                 add     ecx, 8          ; this
.text:0000016B                 call    ??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CMvDatabaseEx::CMvDatabaseEx(void)
.text:00000170                 mov     [ebp+var_4], 0
.text:00000177                 mov     ecx, [ebp+var_10]
.text:0000017A                 add     ecx, 38h ; '8'  ; this
.text:0000017D                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000182                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000189                 mov     eax, [ebp+var_10]
.text:0000018C                 mov     ecx, [ebp+var_C]
.text:0000018F                 mov     large fs:0, ecx
.text:00000196                 pop     ecx
.text:00000197                 add     esp, 10h
.text:0000019A                 cmp     ebp, esp
.text:0000019C                 call    __RTC_CheckEsp
.text:000001A1                 mov     esp, ebp
.text:000001A3                 pop     ebp
.text:000001A4                 retn
.text:000001A4 ??0CHandler@NCab@NArchive@@QAE@XZ endp
.text:000001A4
.text:000001A4 ; ---------------------------------------------------------------------------
.text:000001A5                 align 4
.text:000001A5 _text           ends
.text:000001A5
.text$x:000001A8 ; ===========================================================================
.text$x:000001A8
.text$x:000001A8 ; Segment type: Pure code
.text$x:000001A8 ; Segment permissions: Read/Execute
.text$x:000001A8 _text$x         segment para public 'CODE' use32
.text$x:000001A8                 assume cs:_text$x
.text$x:000001A8                 ;org 1A8h
.text$x:000001A8 ; COMDAT (pick associative to section at 11C)
.text$x:000001A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000001A8
.text$x:000001A8 ; =============== S U B R O U T I N E =======================================
.text$x:000001A8
.text$x:000001A8
.text$x:000001A8 __unwindfunclet$??0CHandler@NCab@NArchive@@QAE@XZ$0 proc near
.text$x:000001A8                                         ; DATA XREF: .xdata$x:0000020Co
.text$x:000001A8                 mov     ecx, [ebp-10h]
.text$x:000001AB                 add     ecx, 8          ; this
.text$x:000001AE                 jmp     ??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CMvDatabaseEx::~CMvDatabaseEx(void)
.text$x:000001AE __unwindfunclet$??0CHandler@NCab@NArchive@@QAE@XZ$0 endp
.text$x:000001AE
.text$x:000001B3
.text$x:000001B3 ; =============== S U B R O U T I N E =======================================
.text$x:000001B3
.text$x:000001B3
.text$x:000001B3 __ehhandler$??0CHandler@NCab@NArchive@@QAE@XZ proc near
.text$x:000001B3                                         ; DATA XREF: NArchive::NCab::CHandler::CHandler(void)+5o
.text$x:000001B3
.text$x:000001B3 arg_4           = dword ptr  8
.text$x:000001B3
.text$x:000001B3                 mov     edx, [esp+arg_4]
.text$x:000001B7                 lea     eax, [edx+0Ch]
.text$x:000001BA                 mov     ecx, [edx-8]
.text$x:000001BD                 xor     ecx, eax
.text$x:000001BF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000001C4                 mov     eax, offset __ehfuncinfo$??0CHandler@NCab@NArchive@@QAE@XZ
.text$x:000001C9                 jmp     ___CxxFrameHandler3
.text$x:000001C9 __ehhandler$??0CHandler@NCab@NArchive@@QAE@XZ endp
.text$x:000001C9
.text$x:000001C9 ; ---------------------------------------------------------------------------
.text$x:000001CE                 align 10h
.text$x:000001CE _text$x         ends
.text$x:000001CE
.rdata:000001D0 ; ===========================================================================
.rdata:000001D0
.rdata:000001D0 ; Segment type: Pure data
.rdata:000001D0 ; Segment permissions: Read
.rdata:000001D0 _rdata          segment dword public 'DATA' use32
.rdata:000001D0                 assume cs:_rdata
.rdata:000001D0                 ;org 1D0h
.rdata:000001D0 ; COMDAT (pick largest)
.rdata:000001D0                 dd offset ??_R4CHandler@NCab@NArchive@@6B@ ; const NArchive::NCab::CHandler::`RTTI Complete Object Locator'
.rdata:000001D4                 public ??_7CHandler@NCab@NArchive@@6B@
.rdata:000001D4 ; const NArchive::NCab::CHandler::`vftable'
.rdata:000001D4 ??_7CHandler@NCab@NArchive@@6B@ dd offset ?QueryInterface@CHandler@NCab@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:000001D4                                         ; DATA XREF: NArchive::NCab::CHandler::CHandler(void)+43o
.rdata:000001D4                                         ; NArchive::NCab::CHandler::QueryInterface(_GUID const &,void * *)
.rdata:000001D8                 dd offset ?AddRef@CHandler@NCab@NArchive@@UAGKXZ ; NArchive::NCab::CHandler::AddRef(void)
.rdata:000001DC                 dd offset ?Release@CHandler@NCab@NArchive@@UAGKXZ ; NArchive::NCab::CHandler::Release(void)
.rdata:000001E0                 dd offset ?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ; NArchive::NCab::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)
.rdata:000001E4                 dd offset ?Close@CHandler@NCab@NArchive@@UAGJXZ ; NArchive::NCab::CHandler::Close(void)
.rdata:000001E8                 dd offset ?GetNumberOfItems@CHandler@NCab@NArchive@@UAGJPAI@Z ; NArchive::NCab::CHandler::GetNumberOfItems(uint *)
.rdata:000001EC                 dd offset ?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ; NArchive::NCab::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)
.rdata:000001F0                 dd offset ?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ; NArchive::NCab::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)
.rdata:000001F4                 dd offset ?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ; NArchive::NCab::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)
.rdata:000001F8                 dd offset ?GetNumberOfProperties@CHandler@NCab@NArchive@@UAGJPAI@Z ; NArchive::NCab::CHandler::GetNumberOfProperties(uint *)
.rdata:000001FC                 dd offset ?GetPropertyInfo@CHandler@NCab@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NCab::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)
.rdata:00000200                 dd offset ?GetNumberOfArchiveProperties@CHandler@NCab@NArchive@@UAGJPAI@Z ; NArchive::NCab::CHandler::GetNumberOfArchiveProperties(uint *)
.rdata:00000204                 dd offset ?GetArchivePropertyInfo@CHandler@NCab@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NCab::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)
.rdata:00000204 _rdata          ends
.rdata:00000204
.xdata$x:00000208 ; ===========================================================================
.xdata$x:00000208
.xdata$x:00000208 ; Segment type: Pure data
.xdata$x:00000208 ; Segment permissions: Read
.xdata$x:00000208 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000208                 assume cs:_xdata$x
.xdata$x:00000208                 ;org 208h
.xdata$x:00000208 ; COMDAT (pick associative to section at 11C)
.xdata$x:00000208 __unwindtable$??0CHandler@NCab@NArchive@@QAE@XZ db 0FFh
.xdata$x:00000208                                         ; DATA XREF: .xdata$x:00000218o
.xdata$x:00000209                 db 0FFh
.xdata$x:0000020A                 db 0FFh
.xdata$x:0000020B                 db 0FFh
.xdata$x:0000020C                 dd offset __unwindfunclet$??0CHandler@NCab@NArchive@@QAE@XZ$0
.xdata$x:00000210 __ehfuncinfo$??0CHandler@NCab@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00000210                                         ; DATA XREF: __ehhandler$??0CHandler@NCab@NArchive@@QAE@XZ+11o
.xdata$x:00000211                 db    5
.xdata$x:00000212                 db  93h ; ô
.xdata$x:00000213                 db  19h
.xdata$x:00000214                 db    1
.xdata$x:00000215                 db    0
.xdata$x:00000216                 db    0
.xdata$x:00000217                 db    0
.xdata$x:00000218                 dd offset __unwindtable$??0CHandler@NCab@NArchive@@QAE@XZ
.xdata$x:0000021C                 db    0
.xdata$x:0000021D                 db    0
.xdata$x:0000021E                 db    0
.xdata$x:0000021F                 db    0
.xdata$x:00000220                 db    0
.xdata$x:00000221                 db    0
.xdata$x:00000222                 db    0
.xdata$x:00000223                 db    0
.xdata$x:00000224                 db    0
.xdata$x:00000225                 db    0
.xdata$x:00000226                 db    0
.xdata$x:00000227                 db    0
.xdata$x:00000228                 db    0
.xdata$x:00000229                 db    0
.xdata$x:0000022A                 db    0
.xdata$x:0000022B                 db    0
.xdata$x:0000022C                 db    0
.xdata$x:0000022D                 db    0
.xdata$x:0000022E                 db    0
.xdata$x:0000022F                 db    0
.xdata$x:00000230                 db    1
.xdata$x:00000231                 db    0
.xdata$x:00000232                 db    0
.xdata$x:00000233                 db    0
.xdata$x:00000233 _xdata$x        ends
.xdata$x:00000233
.rdata$r:00000234 ; ===========================================================================
.rdata$r:00000234
.rdata$r:00000234 ; Segment type: Pure data
.rdata$r:00000234 ; Segment permissions: Read
.rdata$r:00000234 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000234                 assume cs:_rdata$r
.rdata$r:00000234                 ;org 234h
.rdata$r:00000234 ; COMDAT (pick any)
.rdata$r:00000234                 public ??_R4CHandler@NCab@NArchive@@6B@
.rdata$r:00000234 ; const NArchive::NCab::CHandler::`RTTI Complete Object Locator'
.rdata$r:00000234 ??_R4CHandler@NCab@NArchive@@6B@ db    0 ; DATA XREF: .rdata:000001D0o
.rdata$r:00000235                 db    0
.rdata$r:00000236                 db    0
.rdata$r:00000237                 db    0
.rdata$r:00000238                 db    0
.rdata$r:00000239                 db    0
.rdata$r:0000023A                 db    0
.rdata$r:0000023B                 db    0
.rdata$r:0000023C                 db    0
.rdata$r:0000023D                 db    0
.rdata$r:0000023E                 db    0
.rdata$r:0000023F                 db    0
.rdata$r:00000240                 dd offset ??_R0?AVCHandler@NCab@NArchive@@@8 ; NArchive::NCab::CHandler `RTTI Type Descriptor'
.rdata$r:00000244                 dd offset ??_R3CHandler@NCab@NArchive@@8 ; NArchive::NCab::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000244 _rdata$r        ends
.rdata$r:00000244
.data:00000248 ; ===========================================================================
.data:00000248
.data:00000248 ; Segment type: Pure data
.data:00000248 ; Segment permissions: Read/Write
.data:00000248 _data           segment dword public 'DATA' use32
.data:00000248                 assume cs:_data
.data:00000248                 ;org 248h
.data:00000248 ; COMDAT (pick any)
.data:00000248                 public ??_R0?AVCHandler@NCab@NArchive@@@8
.data:00000248 ; class NArchive::NCab::CHandler `RTTI Type Descriptor'
.data:00000248 ??_R0?AVCHandler@NCab@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00000248                                         ; DATA XREF: .rdata$r:00000240o
.data:00000248                                         ; .rdata$r:NArchive::NCab::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000248                                         ; const type_info::`vftable'
.data:0000024C                 align 10h
.data:00000250 a_?avchandler@n db '.?AVCHandler@NCab@NArchive@@',0
.data:0000026D                 align 10h
.data:0000026D _data           ends
.data:0000026D
.rdata$r:00000270 ; ===========================================================================
.rdata$r:00000270
.rdata$r:00000270 ; Segment type: Pure data
.rdata$r:00000270 ; Segment permissions: Read
.rdata$r:00000270 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000270                 assume cs:_rdata$r
.rdata$r:00000270                 ;org 270h
.rdata$r:00000270 ; COMDAT (pick any)
.rdata$r:00000270                 public ??_R3CHandler@NCab@NArchive@@8
.rdata$r:00000270 ; NArchive::NCab::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000270 ??_R3CHandler@NCab@NArchive@@8 db    0  ; DATA XREF: .rdata$r:00000244o
.rdata$r:00000270                                         ; .rdata$r:000002ACo
.rdata$r:00000271                 db    0
.rdata$r:00000272                 db    0
.rdata$r:00000273                 db    0
.rdata$r:00000274                 db    1
.rdata$r:00000275                 db    0
.rdata$r:00000276                 db    0
.rdata$r:00000277                 db    0
.rdata$r:00000278                 db    4
.rdata$r:00000279                 db    0
.rdata$r:0000027A                 db    0
.rdata$r:0000027B                 db    0
.rdata$r:0000027C                 dd offset ??_R2CHandler@NCab@NArchive@@8 ; NArchive::NCab::CHandler::`RTTI Base Class Array'
.rdata$r:0000027C _rdata$r        ends
.rdata$r:0000027C
.rdata$r:00000280 ; ===========================================================================
.rdata$r:00000280
.rdata$r:00000280 ; Segment type: Pure data
.rdata$r:00000280 ; Segment permissions: Read
.rdata$r:00000280 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000280                 assume cs:_rdata$r
.rdata$r:00000280                 ;org 280h
.rdata$r:00000280 ; COMDAT (pick any)
.rdata$r:00000280                 public ??_R2CHandler@NCab@NArchive@@8
.rdata$r:00000280 ; NArchive::NCab::CHandler::`RTTI Base Class Array'
.rdata$r:00000280 ??_R2CHandler@NCab@NArchive@@8 dd offset ??_R1A@?0A@EA@CHandler@NCab@NArchive@@8
.rdata$r:00000280                                         ; DATA XREF: .rdata$r:0000027Co
.rdata$r:00000280                                         ; NArchive::NCab::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000284                 dd offset ??_R1A@?0A@EA@IInArchive@@8 ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000288                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000028C                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000290                 db    0
.rdata$r:00000291                 align 4
.rdata$r:00000291 _rdata$r        ends
.rdata$r:00000291
.rdata$r:00000294 ; ===========================================================================
.rdata$r:00000294
.rdata$r:00000294 ; Segment type: Pure data
.rdata$r:00000294 ; Segment permissions: Read
.rdata$r:00000294 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000294                 assume cs:_rdata$r
.rdata$r:00000294                 ;org 294h
.rdata$r:00000294 ; COMDAT (pick any)
.rdata$r:00000294                 public ??_R1A@?0A@EA@CHandler@NCab@NArchive@@8
.rdata$r:00000294 ; NArchive::NCab::CHandler::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000294 ??_R1A@?0A@EA@CHandler@NCab@NArchive@@8 dd offset ??_R0?AVCHandler@NCab@NArchive@@@8
.rdata$r:00000294                                         ; DATA XREF: .rdata$r:NArchive::NCab::CHandler::`RTTI Base Class Array'o
.rdata$r:00000294                                         ; NArchive::NCab::CHandler `RTTI Type Descriptor'
.rdata$r:00000298                 db    3
.rdata$r:00000299                 db    0
.rdata$r:0000029A                 db    0
.rdata$r:0000029B                 db    0
.rdata$r:0000029C                 db    0
.rdata$r:0000029D                 db    0
.rdata$r:0000029E                 db    0
.rdata$r:0000029F                 db    0
.rdata$r:000002A0                 db 0FFh
.rdata$r:000002A1                 db 0FFh
.rdata$r:000002A2                 db 0FFh
.rdata$r:000002A3                 db 0FFh
.rdata$r:000002A4                 db    0
.rdata$r:000002A5                 db    0
.rdata$r:000002A6                 db    0
.rdata$r:000002A7                 db    0
.rdata$r:000002A8                 db  40h ; @
.rdata$r:000002A9                 db    0
.rdata$r:000002AA                 db    0
.rdata$r:000002AB                 db    0
.rdata$r:000002AC                 dd offset ??_R3CHandler@NCab@NArchive@@8 ; NArchive::NCab::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:000002AC _rdata$r        ends
.rdata$r:000002AC
.rdata$r:000002B0 ; ===========================================================================
.rdata$r:000002B0
.rdata$r:000002B0 ; Segment type: Pure data
.rdata$r:000002B0 ; Segment permissions: Read
.rdata$r:000002B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002B0                 assume cs:_rdata$r
.rdata$r:000002B0                 ;org 2B0h
.rdata$r:000002B0 ; COMDAT (pick any)
.rdata$r:000002B0                 public ??_R1A@?0A@EA@IInArchive@@8
.rdata$r:000002B0 ; IInArchive::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000002B0 ??_R1A@?0A@EA@IInArchive@@8 dd offset ??_R0?AUIInArchive@@@8
.rdata$r:000002B0                                         ; DATA XREF: .rdata$r:00000284o
.rdata$r:000002B0                                         ; .rdata$r:IInArchive::`RTTI Base Class Array'o
.rdata$r:000002B0                                         ; IInArchive `RTTI Type Descriptor'
.rdata$r:000002B4                 db    1
.rdata$r:000002B5                 db    0
.rdata$r:000002B6                 db    0
.rdata$r:000002B7                 db    0
.rdata$r:000002B8                 db    0
.rdata$r:000002B9                 db    0
.rdata$r:000002BA                 db    0
.rdata$r:000002BB                 db    0
.rdata$r:000002BC                 db 0FFh
.rdata$r:000002BD                 db 0FFh
.rdata$r:000002BE                 db 0FFh
.rdata$r:000002BF                 db 0FFh
.rdata$r:000002C0                 db    0
.rdata$r:000002C1                 db    0
.rdata$r:000002C2                 db    0
.rdata$r:000002C3                 db    0
.rdata$r:000002C4                 db  40h ; @
.rdata$r:000002C5                 db    0
.rdata$r:000002C6                 db    0
.rdata$r:000002C7                 db    0
.rdata$r:000002C8                 dd offset ??_R3IInArchive@@8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000002C8 _rdata$r        ends
.rdata$r:000002C8
.data:000002CC ; ===========================================================================
.data:000002CC
.data:000002CC ; Segment type: Pure data
.data:000002CC ; Segment permissions: Read/Write
.data:000002CC _data           segment dword public 'DATA' use32
.data:000002CC                 assume cs:_data
.data:000002CC                 ;org 2CCh
.data:000002CC ; COMDAT (pick any)
.data:000002CC                 public ??_R0?AUIInArchive@@@8
.data:000002CC ; struct IInArchive `RTTI Type Descriptor'
.data:000002CC ??_R0?AUIInArchive@@@8 dd offset ??_7type_info@@6B@
.data:000002CC                                         ; DATA XREF: .rdata$r:IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000002CC                                         ; .rdata$r:000007D8o
.data:000002CC                                         ; const type_info::`vftable'
.data:000002D0                 db    0
.data:000002D1                 db    0
.data:000002D2                 db    0
.data:000002D3                 db    0
.data:000002D4                 db  2Eh ; .
.data:000002D5                 db  3Fh ; ?
.data:000002D6                 db  41h ; A
.data:000002D7                 db  55h ; U
.data:000002D8                 db  49h ; I
.data:000002D9                 db  49h ; I
.data:000002DA                 db  6Eh ; n
.data:000002DB                 db  41h ; A
.data:000002DC                 db  72h ; r
.data:000002DD                 db  63h ; c
.data:000002DE                 db  68h ; h
.data:000002DF                 db  69h ; i
.data:000002E0                 db  76h ; v
.data:000002E1                 db  65h ; e
.data:000002E2                 db  40h ; @
.data:000002E3                 db  40h ; @
.data:000002E4                 db    0
.data:000002E5                 align 4
.data:000002E5 _data           ends
.data:000002E5
.rdata$r:000002E8 ; ===========================================================================
.rdata$r:000002E8
.rdata$r:000002E8 ; Segment type: Pure data
.rdata$r:000002E8 ; Segment permissions: Read
.rdata$r:000002E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002E8                 assume cs:_rdata$r
.rdata$r:000002E8                 ;org 2E8h
.rdata$r:000002E8 ; COMDAT (pick any)
.rdata$r:000002E8                 public ??_R3IInArchive@@8
.rdata$r:000002E8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000002E8 ??_R3IInArchive@@8 db    0              ; DATA XREF: .rdata$r:000002C8o
.rdata$r:000002E8                                         ; .rdata$r:000007DCo
.rdata$r:000002E9                 db    0
.rdata$r:000002EA                 db    0
.rdata$r:000002EB                 db    0
.rdata$r:000002EC                 db    0
.rdata$r:000002ED                 db    0
.rdata$r:000002EE                 db    0
.rdata$r:000002EF                 db    0
.rdata$r:000002F0                 db    2
.rdata$r:000002F1                 db    0
.rdata$r:000002F2                 db    0
.rdata$r:000002F3                 db    0
.rdata$r:000002F4                 dd offset ??_R2IInArchive@@8 ; IInArchive::`RTTI Base Class Array'
.rdata$r:000002F4 _rdata$r        ends
.rdata$r:000002F4
.rdata$r:000002F8 ; ===========================================================================
.rdata$r:000002F8
.rdata$r:000002F8 ; Segment type: Pure data
.rdata$r:000002F8 ; Segment permissions: Read
.rdata$r:000002F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002F8                 assume cs:_rdata$r
.rdata$r:000002F8                 ;org 2F8h
.rdata$r:000002F8 ; COMDAT (pick any)
.rdata$r:000002F8                 public ??_R2IInArchive@@8
.rdata$r:000002F8 ; IInArchive::`RTTI Base Class Array'
.rdata$r:000002F8 ??_R2IInArchive@@8 dd offset ??_R1A@?0A@EA@IInArchive@@8
.rdata$r:000002F8                                         ; DATA XREF: .rdata$r:000002F4o
.rdata$r:000002F8                                         ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000002FC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000300                 db    0
.rdata$r:00000301                 align 4
.rdata$r:00000301 _rdata$r        ends
.rdata$r:00000301
.rdata$r:00000304 ; ===========================================================================
.rdata$r:00000304
.rdata$r:00000304 ; Segment type: Pure data
.rdata$r:00000304 ; Segment permissions: Read
.rdata$r:00000304 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000304                 assume cs:_rdata$r
.rdata$r:00000304                 ;org 304h
.rdata$r:00000304 ; COMDAT (pick any)
.rdata$r:00000304                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000304 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000304 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000304                                         ; DATA XREF: .rdata$r:00000288o
.rdata$r:00000304                                         ; .rdata$r:000002FCo ...
.rdata$r:00000304                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000308                 align 10h
.rdata$r:00000310                 db 0FFh
.rdata$r:00000311                 db 0FFh
.rdata$r:00000312                 db 0FFh
.rdata$r:00000313                 db 0FFh
.rdata$r:00000314                 db    0
.rdata$r:00000315                 db    0
.rdata$r:00000316                 db    0
.rdata$r:00000317                 db    0
.rdata$r:00000318                 db  40h ; @
.rdata$r:00000319                 db    0
.rdata$r:0000031A                 db    0
.rdata$r:0000031B                 db    0
.rdata$r:0000031C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000031C _rdata$r        ends
.rdata$r:0000031C
.data:00000320 ; ===========================================================================
.data:00000320
.data:00000320 ; Segment type: Pure data
.data:00000320 ; Segment permissions: Read/Write
.data:00000320 _data           segment dword public 'DATA' use32
.data:00000320                 assume cs:_data
.data:00000320                 ;org 320h
.data:00000320 ; COMDAT (pick any)
.data:00000320                 public ??_R0?AUIUnknown@@@8
.data:00000320 ; struct IUnknown `RTTI Type Descriptor'
.data:00000320 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00000320                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000320                                         ; const type_info::`vftable'
.data:00000324                 align 8
.data:00000328 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:00000337                 align 4
.data:00000337 _data           ends
.data:00000337
.rdata$r:00000338 ; ===========================================================================
.rdata$r:00000338
.rdata$r:00000338 ; Segment type: Pure data
.rdata$r:00000338 ; Segment permissions: Read
.rdata$r:00000338 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000338                 assume cs:_rdata$r
.rdata$r:00000338                 ;org 338h
.rdata$r:00000338 ; COMDAT (pick any)
.rdata$r:00000338                 public ??_R3IUnknown@@8
.rdata$r:00000338 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000338 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:0000031Co
.rdata$r:00000339                 db    0
.rdata$r:0000033A                 db    0
.rdata$r:0000033B                 db    0
.rdata$r:0000033C                 db    0
.rdata$r:0000033D                 db    0
.rdata$r:0000033E                 db    0
.rdata$r:0000033F                 db    0
.rdata$r:00000340                 db    1
.rdata$r:00000341                 db    0
.rdata$r:00000342                 db    0
.rdata$r:00000343                 db    0
.rdata$r:00000344                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000344 _rdata$r        ends
.rdata$r:00000344
.rdata$r:00000348 ; ===========================================================================
.rdata$r:00000348
.rdata$r:00000348 ; Segment type: Pure data
.rdata$r:00000348 ; Segment permissions: Read
.rdata$r:00000348 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000348                 assume cs:_rdata$r
.rdata$r:00000348                 ;org 348h
.rdata$r:00000348 ; COMDAT (pick any)
.rdata$r:00000348                 public ??_R2IUnknown@@8
.rdata$r:00000348 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000348 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000348                                         ; DATA XREF: .rdata$r:00000344o
.rdata$r:00000348                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000034C                 db    0
.rdata$r:0000034D                 align 10h
.rdata$r:0000034D _rdata$r        ends
.rdata$r:0000034D
.rdata$r:00000350 ; ===========================================================================
.rdata$r:00000350
.rdata$r:00000350 ; Segment type: Pure data
.rdata$r:00000350 ; Segment permissions: Read
.rdata$r:00000350 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000350                 assume cs:_rdata$r
.rdata$r:00000350                 ;org 350h
.rdata$r:00000350 ; COMDAT (pick any)
.rdata$r:00000350                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00000350 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00000350 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000350                                         ; DATA XREF: .rdata$r:0000028Co
.rdata$r:00000350                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000354                 align 8
.rdata$r:00000358                 db    4
.rdata$r:00000359                 db    0
.rdata$r:0000035A                 db    0
.rdata$r:0000035B                 db    0
.rdata$r:0000035C                 db 0FFh
.rdata$r:0000035D                 db 0FFh
.rdata$r:0000035E                 db 0FFh
.rdata$r:0000035F                 db 0FFh
.rdata$r:00000360                 db    0
.rdata$r:00000361                 db    0
.rdata$r:00000362                 db    0
.rdata$r:00000363                 db    0
.rdata$r:00000364                 db  40h ; @
.rdata$r:00000365                 db    0
.rdata$r:00000366                 db    0
.rdata$r:00000367                 db    0
.rdata$r:00000368                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000368 _rdata$r        ends
.rdata$r:00000368
.data:0000036C ; ===========================================================================
.data:0000036C
.data:0000036C ; Segment type: Pure data
.data:0000036C ; Segment permissions: Read/Write
.data:0000036C _data           segment dword public 'DATA' use32
.data:0000036C                 assume cs:_data
.data:0000036C                 ;org 36Ch
.data:0000036C ; COMDAT (pick any)
.data:0000036C                 public ??_R0?AVCMyUnknownImp@@@8
.data:0000036C ; class CMyUnknownImp `RTTI Type Descriptor'
.data:0000036C ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:0000036C                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:0000036C                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000036C                                         ; const type_info::`vftable'
.data:00000370                 db    0
.data:00000371                 db    0
.data:00000372                 db    0
.data:00000373                 db    0
.data:00000374                 db  2Eh ; .
.data:00000375                 db  3Fh ; ?
.data:00000376                 db  41h ; A
.data:00000377                 db  56h ; V
.data:00000378                 db  43h ; C
.data:00000379                 db  4Dh ; M
.data:0000037A                 db  79h ; y
.data:0000037B                 db  55h ; U
.data:0000037C                 db  6Eh ; n
.data:0000037D                 db  6Bh ; k
.data:0000037E                 db  6Eh ; n
.data:0000037F                 db  6Fh ; o
.data:00000380                 db  77h ; w
.data:00000381                 db  6Eh ; n
.data:00000382                 db  49h ; I
.data:00000383                 db  6Dh ; m
.data:00000384                 db  70h ; p
.data:00000385                 db  40h ; @
.data:00000386                 db  40h ; @
.data:00000387                 db    0
.data:00000387 _data           ends
.data:00000387
.rdata$r:00000388 ; ===========================================================================
.rdata$r:00000388
.rdata$r:00000388 ; Segment type: Pure data
.rdata$r:00000388 ; Segment permissions: Read
.rdata$r:00000388 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000388                 assume cs:_rdata$r
.rdata$r:00000388                 ;org 388h
.rdata$r:00000388 ; COMDAT (pick any)
.rdata$r:00000388                 public ??_R3CMyUnknownImp@@8
.rdata$r:00000388 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000388 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00000368o
.rdata$r:00000388                                         ; .rdata$r:000003B8o
.rdata$r:00000389                 db    0
.rdata$r:0000038A                 db    0
.rdata$r:0000038B                 db    0
.rdata$r:0000038C                 db    0
.rdata$r:0000038D                 db    0
.rdata$r:0000038E                 db    0
.rdata$r:0000038F                 db    0
.rdata$r:00000390                 db    1
.rdata$r:00000391                 db    0
.rdata$r:00000392                 db    0
.rdata$r:00000393                 db    0
.rdata$r:00000394                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000394 _rdata$r        ends
.rdata$r:00000394
.rdata$r:00000398 ; ===========================================================================
.rdata$r:00000398
.rdata$r:00000398 ; Segment type: Pure data
.rdata$r:00000398 ; Segment permissions: Read
.rdata$r:00000398 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000398                 assume cs:_rdata$r
.rdata$r:00000398                 ;org 398h
.rdata$r:00000398 ; COMDAT (pick any)
.rdata$r:00000398                 public ??_R2CMyUnknownImp@@8
.rdata$r:00000398 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000398 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000398                                         ; DATA XREF: .rdata$r:00000394o
.rdata$r:00000398                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000039C                 db    0
.rdata$r:0000039D                 align 10h
.rdata$r:0000039D _rdata$r        ends
.rdata$r:0000039D
.rdata$r:000003A0 ; ===========================================================================
.rdata$r:000003A0
.rdata$r:000003A0 ; Segment type: Pure data
.rdata$r:000003A0 ; Segment permissions: Read
.rdata$r:000003A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003A0                 assume cs:_rdata$r
.rdata$r:000003A0                 ;org 3A0h
.rdata$r:000003A0 ; COMDAT (pick any)
.rdata$r:000003A0                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000003A0 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000003A0 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000003A0                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:000003A0                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000003A4                 db    0
.rdata$r:000003A5                 db    0
.rdata$r:000003A6                 db    0
.rdata$r:000003A7                 db    0
.rdata$r:000003A8                 db    0
.rdata$r:000003A9                 db    0
.rdata$r:000003AA                 db    0
.rdata$r:000003AB                 db    0
.rdata$r:000003AC                 db 0FFh
.rdata$r:000003AD                 db 0FFh
.rdata$r:000003AE                 db 0FFh
.rdata$r:000003AF                 db 0FFh
.rdata$r:000003B0                 db    0
.rdata$r:000003B1                 db    0
.rdata$r:000003B2                 db    0
.rdata$r:000003B3                 db    0
.rdata$r:000003B4                 db  40h ; @
.rdata$r:000003B5                 db    0
.rdata$r:000003B6                 db    0
.rdata$r:000003B7                 db    0
.rdata$r:000003B8                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003B8 _rdata$r        ends
.rdata$r:000003B8
.text:000003BC ; ===========================================================================
.text:000003BC
.text:000003BC ; Segment type: Pure code
.text:000003BC ; Segment permissions: Read/Execute
.text:000003BC _text           segment para public 'CODE' use32
.text:000003BC                 assume cs:_text
.text:000003BC                 ;org 3BCh
.text:000003BC ; COMDAT (pick any)
.text:000003BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000003BC
.text:000003BC ; =============== S U B R O U T I N E =======================================
.text:000003BC
.text:000003BC ; Attributes: bp-based frame
.text:000003BC
.text:000003BC ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:000003BC                 public ??0CMyUnknownImp@@QAE@XZ
.text:000003BC ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NArchive::NCab::CHandler::CHandler(void)+3Bp
.text:000003BC
.text:000003BC var_4           = dword ptr -4
.text:000003BC
.text:000003BC                 push    ebp
.text:000003BD                 mov     ebp, esp
.text:000003BF                 push    ecx
.text:000003C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003C7                 mov     [ebp+var_4], ecx
.text:000003CA                 mov     eax, [ebp+var_4]
.text:000003CD                 mov     dword ptr [eax], 0
.text:000003D3                 mov     eax, [ebp+var_4]
.text:000003D6                 mov     esp, ebp
.text:000003D8                 pop     ebp
.text:000003D9                 retn
.text:000003D9 ??0CMyUnknownImp@@QAE@XZ endp
.text:000003D9
.text:000003D9 ; ---------------------------------------------------------------------------
.text:000003DA                 align 4
.text:000003DA _text           ends
.text:000003DA
.text:000003DC ; ===========================================================================
.text:000003DC
.text:000003DC ; Segment type: Pure code
.text:000003DC ; Segment permissions: Read/Execute
.text:000003DC _text           segment para public 'CODE' use32
.text:000003DC                 assume cs:_text
.text:000003DC                 ;org 3DCh
.text:000003DC ; COMDAT (pick any)
.text:000003DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000003DC
.text:000003DC ; =============== S U B R O U T I N E =======================================
.text:000003DC
.text:000003DC ; Attributes: bp-based frame
.text:000003DC
.text:000003DC ; __int32 __stdcall NArchive::NCab::CHandler::QueryInterface(NArchive::NCab::CHandler *this, const struct _GUID *Buf1, void **)
.text:000003DC                 public ?QueryInterface@CHandler@NCab@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:000003DC ?QueryInterface@CHandler@NCab@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000003DC                                         ; DATA XREF: .rdata:const NArchive::NCab::CHandler::`vftable'o
.text:000003DC
.text:000003DC this            = dword ptr  8
.text:000003DC Buf1            = dword ptr  0Ch
.text:000003DC arg_8           = dword ptr  10h
.text:000003DC
.text:000003DC                 push    ebp
.text:000003DD                 mov     ebp, esp
.text:000003DF                 mov     eax, [ebp+arg_8]
.text:000003E2                 mov     dword ptr [eax], 0
.text:000003E8                 push    offset _IID_IUnknown ; Buf2
.text:000003ED                 mov     ecx, [ebp+Buf1]
.text:000003F0                 push    ecx             ; Buf1
.text:000003F1                 call    ___@8           ; __(x,x)
.text:000003F6                 test    eax, eax
.text:000003F8                 jz      short loc_404
.text:000003FA                 mov     edx, [ebp+arg_8]
.text:000003FD                 mov     eax, [ebp+this]
.text:00000400                 mov     [edx], eax
.text:00000402                 jmp     short loc_427
.text:00000404 ; ---------------------------------------------------------------------------
.text:00000404
.text:00000404 loc_404:                                ; CODE XREF: NArchive::NCab::CHandler::QueryInterface(_GUID const &,void * *)+1Cj
.text:00000404                 push    offset _IID_IInArchive ; Buf2
.text:00000409                 mov     ecx, [ebp+Buf1]
.text:0000040C                 push    ecx             ; Buf1
.text:0000040D                 call    ___@8           ; __(x,x)
.text:00000412                 test    eax, eax
.text:00000414                 jz      short loc_420
.text:00000416                 mov     edx, [ebp+arg_8]
.text:00000419                 mov     eax, [ebp+this]
.text:0000041C                 mov     [edx], eax
.text:0000041E                 jmp     short loc_427
.text:00000420 ; ---------------------------------------------------------------------------
.text:00000420
.text:00000420 loc_420:                                ; CODE XREF: NArchive::NCab::CHandler::QueryInterface(_GUID const &,void * *)+38j
.text:00000420                 mov     eax, 80004002h
.text:00000425                 jmp     short loc_438
.text:00000427 ; ---------------------------------------------------------------------------
.text:00000427
.text:00000427 loc_427:                                ; CODE XREF: NArchive::NCab::CHandler::QueryInterface(_GUID const &,void * *)+26j
.text:00000427                                         ; NArchive::NCab::CHandler::QueryInterface(_GUID const &,void * *)+42j
.text:00000427                 mov     ecx, [ebp+this]
.text:0000042A                 mov     edx, [ecx+4]
.text:0000042D                 add     edx, 1
.text:00000430                 mov     eax, [ebp+this]
.text:00000433                 mov     [eax+4], edx
.text:00000436                 xor     eax, eax
.text:00000438
.text:00000438 loc_438:                                ; CODE XREF: NArchive::NCab::CHandler::QueryInterface(_GUID const &,void * *)+49j
.text:00000438                 cmp     ebp, esp
.text:0000043A                 call    __RTC_CheckEsp
.text:0000043F                 pop     ebp
.text:00000440                 retn    0Ch
.text:00000440 ?QueryInterface@CHandler@NCab@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:00000440
.text:00000440 ; ---------------------------------------------------------------------------
.text:00000443                 align 4
.text:00000443 _text           ends
.text:00000443
.text:00000444 ; ===========================================================================
.text:00000444
.text:00000444 ; Segment type: Pure code
.text:00000444 ; Segment permissions: Read/Execute
.text:00000444 _text           segment para public 'CODE' use32
.text:00000444                 assume cs:_text
.text:00000444                 ;org 444h
.text:00000444 ; COMDAT (pick any)
.text:00000444                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000444
.text:00000444 ; =============== S U B R O U T I N E =======================================
.text:00000444
.text:00000444 ; Attributes: bp-based frame
.text:00000444
.text:00000444 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00000444                 public ___@8
.text:00000444 ___@8           proc near               ; CODE XREF: NArchive::NCab::CHandler::QueryInterface(_GUID const &,void * *)+15p
.text:00000444                                         ; NArchive::NCab::CHandler::QueryInterface(_GUID const &,void * *)+31p
.text:00000444
.text:00000444 Buf1            = dword ptr  8
.text:00000444 Buf2            = dword ptr  0Ch
.text:00000444
.text:00000444                 push    ebp
.text:00000445                 mov     ebp, esp
.text:00000447                 mov     eax, [ebp+Buf2]
.text:0000044A                 push    eax             ; Buf2
.text:0000044B                 mov     ecx, [ebp+Buf1]
.text:0000044E                 push    ecx             ; Buf1
.text:0000044F                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00000454                 cmp     ebp, esp
.text:00000456                 call    __RTC_CheckEsp
.text:0000045B                 pop     ebp
.text:0000045C                 retn    8
.text:0000045C ___@8           endp
.text:0000045C
.text:0000045C ; ---------------------------------------------------------------------------
.text:0000045F                 align 10h
.text:0000045F _text           ends
.text:0000045F
.text:00000460 ; ===========================================================================
.text:00000460
.text:00000460 ; Segment type: Pure code
.text:00000460 ; Segment permissions: Read/Execute
.text:00000460 _text           segment para public 'CODE' use32
.text:00000460                 assume cs:_text
.text:00000460                 ;org 460h
.text:00000460 ; COMDAT (pick any)
.text:00000460                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000460
.text:00000460 ; =============== S U B R O U T I N E =======================================
.text:00000460
.text:00000460 ; Attributes: bp-based frame
.text:00000460
.text:00000460 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00000460                 public _IsEqualGUID@8
.text:00000460 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00000460
.text:00000460 Buf1            = dword ptr  8
.text:00000460 Buf2            = dword ptr  0Ch
.text:00000460
.text:00000460                 push    ebp
.text:00000461                 mov     ebp, esp
.text:00000463                 push    10h             ; Size
.text:00000465                 mov     eax, [ebp+Buf2]
.text:00000468                 push    eax             ; Buf2
.text:00000469                 mov     ecx, [ebp+Buf1]
.text:0000046C                 push    ecx             ; Buf1
.text:0000046D                 call    _memcmp
.text:00000472                 add     esp, 0Ch
.text:00000475                 neg     eax
.text:00000477                 sbb     eax, eax
.text:00000479                 add     eax, 1
.text:0000047C                 cmp     ebp, esp
.text:0000047E                 call    __RTC_CheckEsp
.text:00000483                 pop     ebp
.text:00000484                 retn    8
.text:00000484 _IsEqualGUID@8  endp
.text:00000484
.text:00000484 ; ---------------------------------------------------------------------------
.text:00000487                 align 4
.text:00000487 _text           ends
.text:00000487
.text:00000488 ; ===========================================================================
.text:00000488
.text:00000488 ; Segment type: Pure code
.text:00000488 ; Segment permissions: Read/Execute
.text:00000488 _text           segment para public 'CODE' use32
.text:00000488                 assume cs:_text
.text:00000488                 ;org 488h
.text:00000488 ; COMDAT (pick any)
.text:00000488                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000488
.text:00000488 ; =============== S U B R O U T I N E =======================================
.text:00000488
.text:00000488 ; Attributes: bp-based frame
.text:00000488
.text:00000488 ; unsigned __int32 __stdcall NArchive::NCab::CHandler::AddRef(NArchive::NCab::CHandler *this)
.text:00000488                 public ?AddRef@CHandler@NCab@NArchive@@UAGKXZ
.text:00000488 ?AddRef@CHandler@NCab@NArchive@@UAGKXZ proc near
.text:00000488                                         ; DATA XREF: .rdata:000001D8o
.text:00000488
.text:00000488 var_4           = dword ptr -4
.text:00000488 this            = dword ptr  8
.text:00000488
.text:00000488                 push    ebp
.text:00000489                 mov     ebp, esp
.text:0000048B                 push    ecx
.text:0000048C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000493                 mov     eax, [ebp+this]
.text:00000496                 mov     ecx, [eax+4]
.text:00000499                 add     ecx, 1
.text:0000049C                 mov     [ebp+var_4], ecx
.text:0000049F                 mov     edx, [ebp+this]
.text:000004A2                 mov     eax, [ebp+var_4]
.text:000004A5                 mov     [edx+4], eax
.text:000004A8                 mov     eax, [ebp+var_4]
.text:000004AB                 mov     esp, ebp
.text:000004AD                 pop     ebp
.text:000004AE                 retn    4
.text:000004AE ?AddRef@CHandler@NCab@NArchive@@UAGKXZ endp
.text:000004AE
.text:000004AE ; ---------------------------------------------------------------------------
.text:000004B1                 align 4
.text:000004B1 _text           ends
.text:000004B1
.text:000004B4 ; ===========================================================================
.text:000004B4
.text:000004B4 ; Segment type: Pure code
.text:000004B4 ; Segment permissions: Read/Execute
.text:000004B4 _text           segment para public 'CODE' use32
.text:000004B4                 assume cs:_text
.text:000004B4                 ;org 4B4h
.text:000004B4 ; COMDAT (pick any)
.text:000004B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000004B4
.text:000004B4 ; =============== S U B R O U T I N E =======================================
.text:000004B4
.text:000004B4 ; Attributes: bp-based frame
.text:000004B4
.text:000004B4 ; unsigned __int32 __stdcall NArchive::NCab::CHandler::Release(NArchive::NCab::CHandler *this)
.text:000004B4                 public ?Release@CHandler@NCab@NArchive@@UAGKXZ
.text:000004B4 ?Release@CHandler@NCab@NArchive@@UAGKXZ proc near
.text:000004B4                                         ; DATA XREF: .rdata:000001DCo
.text:000004B4
.text:000004B4 var_10          = dword ptr -10h
.text:000004B4 var_C           = dword ptr -0Ch
.text:000004B4 var_8           = dword ptr -8
.text:000004B4 var_4           = dword ptr -4
.text:000004B4 this            = dword ptr  8
.text:000004B4
.text:000004B4                 push    ebp
.text:000004B5                 mov     ebp, esp
.text:000004B7                 sub     esp, 10h
.text:000004BA                 mov     eax, 0CCCCCCCCh
.text:000004BF                 mov     [ebp+var_10], eax
.text:000004C2                 mov     [ebp+var_C], eax
.text:000004C5                 mov     [ebp+var_8], eax
.text:000004C8                 mov     [ebp+var_4], eax
.text:000004CB                 mov     eax, [ebp+this]
.text:000004CE                 mov     ecx, [eax+4]
.text:000004D1                 sub     ecx, 1
.text:000004D4                 mov     [ebp+var_C], ecx
.text:000004D7                 mov     edx, [ebp+this]
.text:000004DA                 mov     eax, [ebp+var_C]
.text:000004DD                 mov     [edx+4], eax
.text:000004E0                 cmp     [ebp+var_C], 0
.text:000004E4                 jz      short loc_4EE
.text:000004E6                 mov     ecx, [ebp+this]
.text:000004E9                 mov     eax, [ecx+4]
.text:000004EC                 jmp     short loc_518
.text:000004EE ; ---------------------------------------------------------------------------
.text:000004EE
.text:000004EE loc_4EE:                                ; CODE XREF: NArchive::NCab::CHandler::Release(void)+30j
.text:000004EE                 mov     edx, [ebp+this]
.text:000004F1                 mov     [ebp+var_8], edx
.text:000004F4                 mov     eax, [ebp+var_8]
.text:000004F7                 mov     [ebp+var_4], eax
.text:000004FA                 cmp     [ebp+var_4], 0
.text:000004FE                 jz      short loc_50F
.text:00000500                 push    1
.text:00000502                 mov     ecx, [ebp+var_4]
.text:00000505                 call    ??_GCHandler@NCab@NArchive@@QAEPAXI@Z ; NArchive::NCab::CHandler::`scalar deleting destructor'(uint)
.text:0000050A                 mov     [ebp+var_10], eax
.text:0000050D                 jmp     short loc_516
.text:0000050F ; ---------------------------------------------------------------------------
.text:0000050F
.text:0000050F loc_50F:                                ; CODE XREF: NArchive::NCab::CHandler::Release(void)+4Aj
.text:0000050F                 mov     [ebp+var_10], 0
.text:00000516
.text:00000516 loc_516:                                ; CODE XREF: NArchive::NCab::CHandler::Release(void)+59j
.text:00000516                 xor     eax, eax
.text:00000518
.text:00000518 loc_518:                                ; CODE XREF: NArchive::NCab::CHandler::Release(void)+38j
.text:00000518                 add     esp, 10h
.text:0000051B                 cmp     ebp, esp
.text:0000051D                 call    __RTC_CheckEsp
.text:00000522                 mov     esp, ebp
.text:00000524                 pop     ebp
.text:00000525                 retn    4
.text:00000525 ?Release@CHandler@NCab@NArchive@@UAGKXZ endp
.text:00000525
.text:00000525 _text           ends
.text:00000525
.text:00000528 ; ===========================================================================
.text:00000528
.text:00000528 ; Segment type: Pure code
.text:00000528 ; Segment permissions: Read/Execute
.text:00000528 _text           segment para public 'CODE' use32
.text:00000528                 assume cs:_text
.text:00000528                 ;org 528h
.text:00000528 ; COMDAT (pick any)
.text:00000528                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000528
.text:00000528 ; =============== S U B R O U T I N E =======================================
.text:00000528
.text:00000528 ; Attributes: bp-based frame
.text:00000528
.text:00000528 ; public: void * __thiscall NArchive::NCab::CHandler::`scalar deleting destructor'(unsigned int)
.text:00000528                 public ??_GCHandler@NCab@NArchive@@QAEPAXI@Z
.text:00000528 ??_GCHandler@NCab@NArchive@@QAEPAXI@Z proc near
.text:00000528                                         ; CODE XREF: NArchive::NCab::CHandler::Release(void)+51p
.text:00000528
.text:00000528 var_4           = dword ptr -4
.text:00000528 arg_0           = dword ptr  8
.text:00000528
.text:00000528                 push    ebp
.text:00000529                 mov     ebp, esp
.text:0000052B                 push    ecx
.text:0000052C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000533                 mov     [ebp+var_4], ecx
.text:00000536                 mov     ecx, [ebp+var_4] ; this
.text:00000539                 call    ??1CHandler@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CHandler::~CHandler(void)
.text:0000053E                 mov     eax, [ebp+arg_0]
.text:00000541                 and     eax, 1
.text:00000544                 jz      short loc_552
.text:00000546                 mov     ecx, [ebp+var_4]
.text:00000549                 push    ecx             ; void *
.text:0000054A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000054F                 add     esp, 4
.text:00000552
.text:00000552 loc_552:                                ; CODE XREF: NArchive::NCab::CHandler::`scalar deleting destructor'(uint)+1Cj
.text:00000552                 mov     eax, [ebp+var_4]
.text:00000555                 add     esp, 4
.text:00000558                 cmp     ebp, esp
.text:0000055A                 call    __RTC_CheckEsp
.text:0000055F                 mov     esp, ebp
.text:00000561                 pop     ebp
.text:00000562                 retn    4
.text:00000562 ??_GCHandler@NCab@NArchive@@QAEPAXI@Z endp
.text:00000562
.text:00000562 ; ---------------------------------------------------------------------------
.text:00000565                 align 4
.text:00000565 _text           ends
.text:00000565
.text:00000568 ; ===========================================================================
.text:00000568
.text:00000568 ; Segment type: Pure code
.text:00000568 ; Segment permissions: Read/Execute
.text:00000568 _text           segment para public 'CODE' use32
.text:00000568                 assume cs:_text
.text:00000568                 ;org 568h
.text:00000568 ; COMDAT (pick any)
.text:00000568                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000568
.text:00000568 ; =============== S U B R O U T I N E =======================================
.text:00000568
.text:00000568 ; Attributes: bp-based frame
.text:00000568
.text:00000568 ; _DWORD __thiscall NArchive::NCab::CHandler::~CHandler(NArchive::NCab::CHandler *__hidden this)
.text:00000568                 public ??1CHandler@NCab@NArchive@@QAE@XZ
.text:00000568 ??1CHandler@NCab@NArchive@@QAE@XZ proc near
.text:00000568                                         ; CODE XREF: NArchive::NCab::CHandler::`scalar deleting destructor'(uint)+11p
.text:00000568
.text:00000568 var_10          = dword ptr -10h
.text:00000568 var_C           = dword ptr -0Ch
.text:00000568 var_4           = dword ptr -4
.text:00000568
.text:00000568                 push    ebp
.text:00000569                 mov     ebp, esp
.text:0000056B                 push    0FFFFFFFFh
.text:0000056D                 push    offset __ehhandler$??1CHandler@NCab@NArchive@@QAE@XZ
.text:00000572                 mov     eax, large fs:0
.text:00000578                 push    eax
.text:00000579                 push    ecx
.text:0000057A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000581                 mov     eax, dword ptr ds:___security_cookie
.text:00000586                 xor     eax, ebp
.text:00000588                 push    eax
.text:00000589                 lea     eax, [ebp+var_C]
.text:0000058C                 mov     large fs:0, eax
.text:00000592                 mov     [ebp+var_10], ecx
.text:00000595                 mov     [ebp+var_4], 0
.text:0000059C                 mov     ecx, [ebp+var_10]
.text:0000059F                 add     ecx, 38h ; '8'  ; this
.text:000005A2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000005A7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000005AE                 mov     ecx, [ebp+var_10]
.text:000005B1                 add     ecx, 8          ; this
.text:000005B4                 call    ??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CMvDatabaseEx::~CMvDatabaseEx(void)
.text:000005B9                 mov     ecx, [ebp+var_C]
.text:000005BC                 mov     large fs:0, ecx
.text:000005C3                 pop     ecx
.text:000005C4                 add     esp, 10h
.text:000005C7                 cmp     ebp, esp
.text:000005C9                 call    __RTC_CheckEsp
.text:000005CE                 mov     esp, ebp
.text:000005D0                 pop     ebp
.text:000005D1                 retn
.text:000005D1 ??1CHandler@NCab@NArchive@@QAE@XZ endp
.text:000005D1
.text:000005D1 ; ---------------------------------------------------------------------------
.text:000005D2                 align 4
.text:000005D2 _text           ends
.text:000005D2
.text$x:000005D4 ; ===========================================================================
.text$x:000005D4
.text$x:000005D4 ; Segment type: Pure code
.text$x:000005D4 ; Segment permissions: Read/Execute
.text$x:000005D4 _text$x         segment para public 'CODE' use32
.text$x:000005D4                 assume cs:_text$x
.text$x:000005D4                 ;org 5D4h
.text$x:000005D4 ; COMDAT (pick associative to section at 568)
.text$x:000005D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000005D4
.text$x:000005D4 ; =============== S U B R O U T I N E =======================================
.text$x:000005D4
.text$x:000005D4
.text$x:000005D4 __unwindfunclet$??1CHandler@NCab@NArchive@@QAE@XZ$0 proc near
.text$x:000005D4                                         ; DATA XREF: .xdata$x:00000600o
.text$x:000005D4                 mov     ecx, [ebp-10h]
.text$x:000005D7                 add     ecx, 8          ; this
.text$x:000005DA                 jmp     ??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CMvDatabaseEx::~CMvDatabaseEx(void)
.text$x:000005DA __unwindfunclet$??1CHandler@NCab@NArchive@@QAE@XZ$0 endp
.text$x:000005DA
.text$x:000005DF
.text$x:000005DF ; =============== S U B R O U T I N E =======================================
.text$x:000005DF
.text$x:000005DF
.text$x:000005DF __ehhandler$??1CHandler@NCab@NArchive@@QAE@XZ proc near
.text$x:000005DF                                         ; DATA XREF: NArchive::NCab::CHandler::~CHandler(void)+5o
.text$x:000005DF
.text$x:000005DF arg_4           = dword ptr  8
.text$x:000005DF
.text$x:000005DF                 mov     edx, [esp+arg_4]
.text$x:000005E3                 lea     eax, [edx+0Ch]
.text$x:000005E6                 mov     ecx, [edx-8]
.text$x:000005E9                 xor     ecx, eax
.text$x:000005EB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000005F0                 mov     eax, offset __ehfuncinfo$??1CHandler@NCab@NArchive@@QAE@XZ
.text$x:000005F5                 jmp     ___CxxFrameHandler3
.text$x:000005F5 __ehhandler$??1CHandler@NCab@NArchive@@QAE@XZ endp
.text$x:000005F5
.text$x:000005F5 ; ---------------------------------------------------------------------------
.text$x:000005FA                 align 4
.text$x:000005FA _text$x         ends
.text$x:000005FA
.xdata$x:000005FC ; ===========================================================================
.xdata$x:000005FC
.xdata$x:000005FC ; Segment type: Pure data
.xdata$x:000005FC ; Segment permissions: Read
.xdata$x:000005FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000005FC                 assume cs:_xdata$x
.xdata$x:000005FC                 ;org 5FCh
.xdata$x:000005FC ; COMDAT (pick associative to section at 568)
.xdata$x:000005FC __unwindtable$??1CHandler@NCab@NArchive@@QAE@XZ db 0FFh
.xdata$x:000005FC                                         ; DATA XREF: .xdata$x:0000060Co
.xdata$x:000005FD                 db 0FFh
.xdata$x:000005FE                 db 0FFh
.xdata$x:000005FF                 db 0FFh
.xdata$x:00000600                 dd offset __unwindfunclet$??1CHandler@NCab@NArchive@@QAE@XZ$0
.xdata$x:00000604 __ehfuncinfo$??1CHandler@NCab@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00000604                                         ; DATA XREF: __ehhandler$??1CHandler@NCab@NArchive@@QAE@XZ+11o
.xdata$x:00000605                 db    5
.xdata$x:00000606                 db  93h ; ô
.xdata$x:00000607                 db  19h
.xdata$x:00000608                 db    1
.xdata$x:00000609                 db    0
.xdata$x:0000060A                 db    0
.xdata$x:0000060B                 db    0
.xdata$x:0000060C                 dd offset __unwindtable$??1CHandler@NCab@NArchive@@QAE@XZ
.xdata$x:00000610                 db    0
.xdata$x:00000611                 db    0
.xdata$x:00000612                 db    0
.xdata$x:00000613                 db    0
.xdata$x:00000614                 db    0
.xdata$x:00000615                 db    0
.xdata$x:00000616                 db    0
.xdata$x:00000617                 db    0
.xdata$x:00000618                 db    0
.xdata$x:00000619                 db    0
.xdata$x:0000061A                 db    0
.xdata$x:0000061B                 db    0
.xdata$x:0000061C                 db    0
.xdata$x:0000061D                 db    0
.xdata$x:0000061E                 db    0
.xdata$x:0000061F                 db    0
.xdata$x:00000620                 db    0
.xdata$x:00000621                 db    0
.xdata$x:00000622                 db    0
.xdata$x:00000623                 db    0
.xdata$x:00000624                 db    1
.xdata$x:00000625                 db    0
.xdata$x:00000626                 db    0
.xdata$x:00000627                 db    0
.xdata$x:00000627 _xdata$x        ends
.xdata$x:00000627
.text:00000628 ; ===========================================================================
.text:00000628
.text:00000628 ; Segment type: Pure code
.text:00000628 ; Segment permissions: Read/Execute
.text:00000628 _text           segment para public 'CODE' use32
.text:00000628                 assume cs:_text
.text:00000628                 ;org 628h
.text:00000628 ; COMDAT (pick any)
.text:00000628                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000628
.text:00000628 ; =============== S U B R O U T I N E =======================================
.text:00000628
.text:00000628 ; Attributes: bp-based frame
.text:00000628
.text:00000628 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00000628                 public ??1UString@@QAE@XZ
.text:00000628 ??1UString@@QAE@XZ proc near            ; CODE XREF: NArchive::NCab::CHandler::~CHandler(void)+3Ap
.text:00000628
.text:00000628 var_8           = dword ptr -8
.text:00000628 var_4           = dword ptr -4
.text:00000628
.text:00000628                 push    ebp
.text:00000629                 mov     ebp, esp
.text:0000062B                 sub     esp, 8
.text:0000062E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000635                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000063C                 mov     [ebp+var_4], ecx
.text:0000063F                 mov     eax, [ebp+var_4]
.text:00000642                 mov     ecx, [eax]
.text:00000644                 mov     [ebp+var_8], ecx
.text:00000647                 mov     edx, [ebp+var_8]
.text:0000064A                 push    edx             ; void *
.text:0000064B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000650                 add     esp, 4
.text:00000653                 add     esp, 8
.text:00000656                 cmp     ebp, esp
.text:00000658                 call    __RTC_CheckEsp
.text:0000065D                 mov     esp, ebp
.text:0000065F                 pop     ebp
.text:00000660                 retn
.text:00000660 ??1UString@@QAE@XZ endp
.text:00000660
.text:00000660 ; ---------------------------------------------------------------------------
.text:00000661                 align 4
.text:00000661 _text           ends
.text:00000661
.text:00000664 ; ===========================================================================
.text:00000664
.text:00000664 ; Segment type: Pure code
.text:00000664 ; Segment permissions: Read/Execute
.text:00000664 _text           segment para public 'CODE' use32
.text:00000664                 assume cs:_text
.text:00000664                 ;org 664h
.text:00000664 ; COMDAT (pick any)
.text:00000664                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000664
.text:00000664 ; =============== S U B R O U T I N E =======================================
.text:00000664
.text:00000664 ; Attributes: bp-based frame
.text:00000664
.text:00000664 ; _DWORD __thiscall NArchive::NCab::CMvDatabaseEx::~CMvDatabaseEx(NArchive::NCab::CMvDatabaseEx *__hidden this)
.text:00000664                 public ??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ
.text:00000664 ??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ proc near
.text:00000664                                         ; CODE XREF: __unwindfunclet$??0CHandler@NCab@NArchive@@QAE@XZ$0+6j
.text:00000664                                         ; NArchive::NCab::CHandler::~CHandler(void)+4Cp ...
.text:00000664
.text:00000664 var_10          = dword ptr -10h
.text:00000664 var_C           = dword ptr -0Ch
.text:00000664 var_4           = dword ptr -4
.text:00000664
.text:00000664                 push    ebp
.text:00000665                 mov     ebp, esp
.text:00000667                 push    0FFFFFFFFh
.text:00000669                 push    offset __ehhandler$??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ
.text:0000066E                 mov     eax, large fs:0
.text:00000674                 push    eax
.text:00000675                 push    ecx
.text:00000676                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000067D                 mov     eax, dword ptr ds:___security_cookie
.text:00000682                 xor     eax, ebp
.text:00000684                 push    eax
.text:00000685                 lea     eax, [ebp+var_C]
.text:00000688                 mov     large fs:0, eax
.text:0000068E                 mov     [ebp+var_10], ecx
.text:00000691                 mov     [ebp+var_4], 2
.text:00000698                 mov     ecx, [ebp+var_10]
.text:0000069B                 add     ecx, 24h ; '$'
.text:0000069E                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:000006A3                 mov     byte ptr [ebp+var_4], 1
.text:000006A7                 mov     ecx, [ebp+var_10]
.text:000006AA                 add     ecx, 18h
.text:000006AD                 call    ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text:000006B2                 mov     byte ptr [ebp+var_4], 0
.text:000006B6                 mov     ecx, [ebp+var_10]
.text:000006B9                 add     ecx, 0Ch
.text:000006BC                 call    ??1?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NCab::CMvItem>::~CRecordVector<NArchive::NCab::CMvItem>(void)
.text:000006C1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000006C8                 mov     ecx, [ebp+var_10]
.text:000006CB                 call    ??1?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::~CObjectVector<NArchive::NCab::CDatabaseEx>(void)
.text:000006D0                 mov     ecx, [ebp+var_C]
.text:000006D3                 mov     large fs:0, ecx
.text:000006DA                 pop     ecx
.text:000006DB                 add     esp, 10h
.text:000006DE                 cmp     ebp, esp
.text:000006E0                 call    __RTC_CheckEsp
.text:000006E5                 mov     esp, ebp
.text:000006E7                 pop     ebp
.text:000006E8                 retn
.text:000006E8 ??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ endp
.text:000006E8
.text:000006E8 ; ---------------------------------------------------------------------------
.text:000006E9                 align 4
.text:000006E9 _text           ends
.text:000006E9
.text$x:000006EC ; ===========================================================================
.text$x:000006EC
.text$x:000006EC ; Segment type: Pure code
.text$x:000006EC ; Segment permissions: Read/Execute
.text$x:000006EC _text$x         segment para public 'CODE' use32
.text$x:000006EC                 assume cs:_text$x
.text$x:000006EC                 ;org 6ECh
.text$x:000006EC ; COMDAT (pick associative to section at 664)
.text$x:000006EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000006EC
.text$x:000006EC ; =============== S U B R O U T I N E =======================================
.text$x:000006EC
.text$x:000006EC
.text$x:000006EC __unwindfunclet$??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ$0 proc near
.text$x:000006EC                                         ; DATA XREF: .xdata$x:0000072Co
.text$x:000006EC                 mov     ecx, [ebp-10h]
.text$x:000006EF                 jmp     ??1?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::~CObjectVector<NArchive::NCab::CDatabaseEx>(void)
.text$x:000006EF __unwindfunclet$??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ$0 endp
.text$x:000006EF
.text$x:000006F4
.text$x:000006F4 ; =============== S U B R O U T I N E =======================================
.text$x:000006F4
.text$x:000006F4
.text$x:000006F4 __unwindfunclet$??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ$1 proc near
.text$x:000006F4                                         ; DATA XREF: .xdata$x:00000734o
.text$x:000006F4                 mov     ecx, [ebp-10h]
.text$x:000006F7                 add     ecx, 0Ch
.text$x:000006FA                 jmp     ??1?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NCab::CMvItem>::~CRecordVector<NArchive::NCab::CMvItem>(void)
.text$x:000006FA __unwindfunclet$??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ$1 endp
.text$x:000006FA
.text$x:000006FF
.text$x:000006FF ; =============== S U B R O U T I N E =======================================
.text$x:000006FF
.text$x:000006FF
.text$x:000006FF __unwindfunclet$??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ$2 proc near
.text$x:000006FF                                         ; DATA XREF: .xdata$x:0000073Co
.text$x:000006FF                 mov     ecx, [ebp-10h]
.text$x:00000702                 add     ecx, 18h
.text$x:00000705                 jmp     ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text$x:00000705 __unwindfunclet$??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ$2 endp
.text$x:00000705
.text$x:0000070A
.text$x:0000070A ; =============== S U B R O U T I N E =======================================
.text$x:0000070A
.text$x:0000070A
.text$x:0000070A __ehhandler$??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ proc near
.text$x:0000070A                                         ; DATA XREF: NArchive::NCab::CMvDatabaseEx::~CMvDatabaseEx(void)+5o
.text$x:0000070A
.text$x:0000070A arg_4           = dword ptr  8
.text$x:0000070A
.text$x:0000070A                 mov     edx, [esp+arg_4]
.text$x:0000070E                 lea     eax, [edx+0Ch]
.text$x:00000711                 mov     ecx, [edx-8]
.text$x:00000714                 xor     ecx, eax
.text$x:00000716                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000071B                 mov     eax, offset __ehfuncinfo$??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ
.text$x:00000720                 jmp     ___CxxFrameHandler3
.text$x:00000720 __ehhandler$??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ endp
.text$x:00000720
.text$x:00000720 ; ---------------------------------------------------------------------------
.text$x:00000725                 align 4
.text$x:00000725 _text$x         ends
.text$x:00000725
.xdata$x:00000728 ; ===========================================================================
.xdata$x:00000728
.xdata$x:00000728 ; Segment type: Pure data
.xdata$x:00000728 ; Segment permissions: Read
.xdata$x:00000728 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000728                 assume cs:_xdata$x
.xdata$x:00000728                 ;org 728h
.xdata$x:00000728 ; COMDAT (pick associative to section at 664)
.xdata$x:00000728 __unwindtable$??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ db 0FFh
.xdata$x:00000728                                         ; DATA XREF: .xdata$x:00000748o
.xdata$x:00000729                 db 0FFh
.xdata$x:0000072A                 db 0FFh
.xdata$x:0000072B                 db 0FFh
.xdata$x:0000072C                 dd offset __unwindfunclet$??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ$0
.xdata$x:00000730                 db    0
.xdata$x:00000731                 db    0
.xdata$x:00000732                 db    0
.xdata$x:00000733                 db    0
.xdata$x:00000734                 dd offset __unwindfunclet$??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ$1
.xdata$x:00000738                 db    1
.xdata$x:00000739                 db    0
.xdata$x:0000073A                 db    0
.xdata$x:0000073B                 db    0
.xdata$x:0000073C                 dd offset __unwindfunclet$??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ$2
.xdata$x:00000740 __ehfuncinfo$??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00000740                                         ; DATA XREF: __ehhandler$??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ+11o
.xdata$x:00000741                 db    5
.xdata$x:00000742                 db  93h ; ô
.xdata$x:00000743                 db  19h
.xdata$x:00000744                 db    3
.xdata$x:00000745                 db    0
.xdata$x:00000746                 db    0
.xdata$x:00000747                 db    0
.xdata$x:00000748                 dd offset __unwindtable$??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ
.xdata$x:0000074C                 align 20h
.xdata$x:00000760                 db    1
.xdata$x:00000761                 db    0
.xdata$x:00000762                 db    0
.xdata$x:00000763                 db    0
.xdata$x:00000763 _xdata$x        ends
.xdata$x:00000763
.text:00000764 ; ===========================================================================
.text:00000764
.text:00000764 ; Segment type: Pure code
.text:00000764 ; Segment permissions: Read/Execute
.text:00000764 _text           segment para public 'CODE' use32
.text:00000764                 assume cs:_text
.text:00000764                 ;org 764h
.text:00000764 ; COMDAT (pick any)
.text:00000764                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000764
.text:00000764 ; =============== S U B R O U T I N E =======================================
.text:00000764
.text:00000764 ; Attributes: bp-based frame
.text:00000764
.text:00000764 ; _DWORD __thiscall IInArchive::IInArchive(IInArchive *__hidden this)
.text:00000764                 public ??0IInArchive@@QAE@XZ
.text:00000764 ??0IInArchive@@QAE@XZ proc near         ; CODE XREF: NArchive::NCab::CHandler::CHandler(void)+30p
.text:00000764
.text:00000764 var_4           = dword ptr -4
.text:00000764
.text:00000764                 push    ebp
.text:00000765                 mov     ebp, esp
.text:00000767                 push    ecx
.text:00000768                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000076F                 mov     [ebp+var_4], ecx
.text:00000772                 mov     ecx, [ebp+var_4]
.text:00000775                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000077A                 mov     eax, [ebp+var_4]
.text:0000077D                 mov     dword ptr [eax], offset ??_7IInArchive@@6B@ ; const IInArchive::`vftable'
.text:00000783                 mov     eax, [ebp+var_4]
.text:00000786                 add     esp, 4
.text:00000789                 cmp     ebp, esp
.text:0000078B                 call    __RTC_CheckEsp
.text:00000790                 mov     esp, ebp
.text:00000792                 pop     ebp
.text:00000793                 retn
.text:00000793 ??0IInArchive@@QAE@XZ endp
.text:00000793
.text:00000793 _text           ends
.text:00000793
.rdata:00000794 ; ===========================================================================
.rdata:00000794
.rdata:00000794 ; Segment type: Pure data
.rdata:00000794 ; Segment permissions: Read
.rdata:00000794 _rdata          segment dword public 'DATA' use32
.rdata:00000794                 assume cs:_rdata
.rdata:00000794                 ;org 794h
.rdata:00000794 ; COMDAT (pick largest)
.rdata:00000794                 dd offset ??_R4IInArchive@@6B@ ; const IInArchive::`RTTI Complete Object Locator'
.rdata:00000798                 public ??_7IInArchive@@6B@
.rdata:00000798 ; const IInArchive::`vftable'
.rdata:00000798 ??_7IInArchive@@6B@ dd offset __purecall
.rdata:00000798                                         ; DATA XREF: IInArchive::IInArchive(void)+19o
.rdata:0000079C                 dd offset __purecall
.rdata:000007A0                 dd offset __purecall
.rdata:000007A4                 dd offset __purecall
.rdata:000007A8                 dd offset __purecall
.rdata:000007AC                 dd offset __purecall
.rdata:000007B0                 dd offset __purecall
.rdata:000007B4                 dd offset __purecall
.rdata:000007B8                 dd offset __purecall
.rdata:000007BC                 dd offset __purecall
.rdata:000007C0                 dd offset __purecall
.rdata:000007C4                 dd offset __purecall
.rdata:000007C8                 dd offset __purecall
.rdata:000007C8 _rdata          ends
.rdata:000007C8
.rdata$r:000007CC ; ===========================================================================
.rdata$r:000007CC
.rdata$r:000007CC ; Segment type: Pure data
.rdata$r:000007CC ; Segment permissions: Read
.rdata$r:000007CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007CC                 assume cs:_rdata$r
.rdata$r:000007CC                 ;org 7CCh
.rdata$r:000007CC ; COMDAT (pick any)
.rdata$r:000007CC                 public ??_R4IInArchive@@6B@
.rdata$r:000007CC ; const IInArchive::`RTTI Complete Object Locator'
.rdata$r:000007CC ??_R4IInArchive@@6B@ db    0            ; DATA XREF: .rdata:00000794o
.rdata$r:000007CD                 db    0
.rdata$r:000007CE                 db    0
.rdata$r:000007CF                 db    0
.rdata$r:000007D0                 db    0
.rdata$r:000007D1                 db    0
.rdata$r:000007D2                 db    0
.rdata$r:000007D3                 db    0
.rdata$r:000007D4                 db    0
.rdata$r:000007D5                 db    0
.rdata$r:000007D6                 db    0
.rdata$r:000007D7                 db    0
.rdata$r:000007D8                 dd offset ??_R0?AUIInArchive@@@8 ; IInArchive `RTTI Type Descriptor'
.rdata$r:000007DC                 dd offset ??_R3IInArchive@@8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007DC _rdata$r        ends
.rdata$r:000007DC
.text:000007E0 ; ===========================================================================
.text:000007E0
.text:000007E0 ; Segment type: Pure code
.text:000007E0 ; Segment permissions: Read/Execute
.text:000007E0 _text           segment para public 'CODE' use32
.text:000007E0                 assume cs:_text
.text:000007E0                 ;org 7E0h
.text:000007E0 ; COMDAT (pick any)
.text:000007E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000007E0
.text:000007E0 ; =============== S U B R O U T I N E =======================================
.text:000007E0
.text:000007E0 ; Attributes: bp-based frame
.text:000007E0
.text:000007E0 ; _DWORD __thiscall NArchive::NCab::CMvDatabaseEx::CMvDatabaseEx(NArchive::NCab::CMvDatabaseEx *__hidden this)
.text:000007E0                 public ??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ
.text:000007E0 ??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ proc near
.text:000007E0                                         ; CODE XREF: NArchive::NCab::CHandler::CHandler(void)+4Fp
.text:000007E0
.text:000007E0 var_10          = dword ptr -10h
.text:000007E0 var_C           = dword ptr -0Ch
.text:000007E0 var_4           = dword ptr -4
.text:000007E0
.text:000007E0                 push    ebp
.text:000007E1                 mov     ebp, esp
.text:000007E3                 push    0FFFFFFFFh
.text:000007E5                 push    offset __ehhandler$??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ
.text:000007EA                 mov     eax, large fs:0
.text:000007F0                 push    eax
.text:000007F1                 push    ecx
.text:000007F2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000007F9                 mov     eax, dword ptr ds:___security_cookie
.text:000007FE                 xor     eax, ebp
.text:00000800                 push    eax
.text:00000801                 lea     eax, [ebp+var_C]
.text:00000804                 mov     large fs:0, eax
.text:0000080A                 mov     [ebp+var_10], ecx
.text:0000080D                 mov     ecx, [ebp+var_10]
.text:00000810                 call    ??0?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::CObjectVector<NArchive::NCab::CDatabaseEx>(void)
.text:00000815                 mov     [ebp+var_4], 0
.text:0000081C                 mov     ecx, [ebp+var_10]
.text:0000081F                 add     ecx, 0Ch
.text:00000822                 call    ??0?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NCab::CMvItem>::CRecordVector<NArchive::NCab::CMvItem>(void)
.text:00000827                 mov     byte ptr [ebp+var_4], 1
.text:0000082B                 mov     ecx, [ebp+var_10]
.text:0000082E                 add     ecx, 18h
.text:00000831                 call    ??0?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::CRecordVector<int>(void)
.text:00000836                 mov     byte ptr [ebp+var_4], 2
.text:0000083A                 mov     ecx, [ebp+var_10]
.text:0000083D                 add     ecx, 24h ; '$'
.text:00000840                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00000845                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000084C                 mov     eax, [ebp+var_10]
.text:0000084F                 mov     ecx, [ebp+var_C]
.text:00000852                 mov     large fs:0, ecx
.text:00000859                 pop     ecx
.text:0000085A                 add     esp, 10h
.text:0000085D                 cmp     ebp, esp
.text:0000085F                 call    __RTC_CheckEsp
.text:00000864                 mov     esp, ebp
.text:00000866                 pop     ebp
.text:00000867                 retn
.text:00000867 ??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ endp
.text:00000867
.text:00000867 _text           ends
.text:00000867
.text$x:00000868 ; ===========================================================================
.text$x:00000868
.text$x:00000868 ; Segment type: Pure code
.text$x:00000868 ; Segment permissions: Read/Execute
.text$x:00000868 _text$x         segment para public 'CODE' use32
.text$x:00000868                 assume cs:_text$x
.text$x:00000868                 ;org 868h
.text$x:00000868 ; COMDAT (pick associative to section at 7E0)
.text$x:00000868                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000868
.text$x:00000868 ; =============== S U B R O U T I N E =======================================
.text$x:00000868
.text$x:00000868
.text$x:00000868 __unwindfunclet$??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ$0 proc near
.text$x:00000868                                         ; DATA XREF: .xdata$x:000008A8o
.text$x:00000868                 mov     ecx, [ebp-10h]
.text$x:0000086B                 jmp     ??1?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NCab::CDatabaseEx>::~CObjectVector<NArchive::NCab::CDatabaseEx>(void)
.text$x:0000086B __unwindfunclet$??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ$0 endp
.text$x:0000086B
.text$x:00000870
.text$x:00000870 ; =============== S U B R O U T I N E =======================================
.text$x:00000870
.text$x:00000870
.text$x:00000870 __unwindfunclet$??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ$1 proc near
.text$x:00000870                                         ; DATA XREF: .xdata$x:000008B0o
.text$x:00000870                 mov     ecx, [ebp-10h]
.text$x:00000873                 add     ecx, 0Ch
.text$x:00000876                 jmp     ??1?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NCab::CMvItem>::~CRecordVector<NArchive::NCab::CMvItem>(void)
.text$x:00000876 __unwindfunclet$??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ$1 endp
.text$x:00000876
.text$x:0000087B
.text$x:0000087B ; =============== S U B R O U T I N E =======================================
.text$x:0000087B
.text$x:0000087B
.text$x:0000087B __unwindfunclet$??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ$2 proc near
.text$x:0000087B                                         ; DATA XREF: .xdata$x:000008B8o
.text$x:0000087B                 mov     ecx, [ebp-10h]
.text$x:0000087E                 add     ecx, 18h
.text$x:00000881                 jmp     ??1?$CRecordVector@H@@QAE@XZ ; CRecordVector<int>::~CRecordVector<int>(void)
.text$x:00000881 __unwindfunclet$??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ$2 endp
.text$x:00000881
.text$x:00000886
.text$x:00000886 ; =============== S U B R O U T I N E =======================================
.text$x:00000886
.text$x:00000886
.text$x:00000886 __ehhandler$??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ proc near
.text$x:00000886                                         ; DATA XREF: NArchive::NCab::CMvDatabaseEx::CMvDatabaseEx(void)+5o
.text$x:00000886
.text$x:00000886 arg_4           = dword ptr  8
.text$x:00000886
.text$x:00000886                 mov     edx, [esp+arg_4]
.text$x:0000088A                 lea     eax, [edx+0Ch]
.text$x:0000088D                 mov     ecx, [edx-8]
.text$x:00000890                 xor     ecx, eax
.text$x:00000892                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000897                 mov     eax, offset __ehfuncinfo$??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ
.text$x:0000089C                 jmp     ___CxxFrameHandler3
.text$x:0000089C __ehhandler$??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ endp
.text$x:0000089C
.text$x:0000089C ; ---------------------------------------------------------------------------
.text$x:000008A1                 align 4
.text$x:000008A1 _text$x         ends
.text$x:000008A1
.xdata$x:000008A4 ; ===========================================================================
.xdata$x:000008A4
.xdata$x:000008A4 ; Segment type: Pure data
.xdata$x:000008A4 ; Segment permissions: Read
.xdata$x:000008A4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000008A4                 assume cs:_xdata$x
.xdata$x:000008A4                 ;org 8A4h
.xdata$x:000008A4 ; COMDAT (pick associative to section at 7E0)
.xdata$x:000008A4 __unwindtable$??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ db 0FFh
.xdata$x:000008A4                                         ; DATA XREF: .xdata$x:000008C4o
.xdata$x:000008A5                 db 0FFh
.xdata$x:000008A6                 db 0FFh
.xdata$x:000008A7                 db 0FFh
.xdata$x:000008A8                 dd offset __unwindfunclet$??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ$0
.xdata$x:000008AC                 align 10h
.xdata$x:000008B0                 dd offset __unwindfunclet$??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ$1
.xdata$x:000008B4                 db    1
.xdata$x:000008B5                 db    0
.xdata$x:000008B6                 db    0
.xdata$x:000008B7                 db    0
.xdata$x:000008B8                 dd offset __unwindfunclet$??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ$2
.xdata$x:000008BC __ehfuncinfo$??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000008BC                                         ; DATA XREF: __ehhandler$??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ+11o
.xdata$x:000008BD                 db    5
.xdata$x:000008BE                 db  93h ; ô
.xdata$x:000008BF                 db  19h
.xdata$x:000008C0                 db    3
.xdata$x:000008C1                 db    0
.xdata$x:000008C2                 db    0
.xdata$x:000008C3                 db    0
.xdata$x:000008C4                 dd offset __unwindtable$??0CMvDatabaseEx@NCab@NArchive@@QAE@XZ
.xdata$x:000008C8                 db    0
.xdata$x:000008C9                 db    0
.xdata$x:000008CA                 db    0
.xdata$x:000008CB                 db    0
.xdata$x:000008CC                 db    0
.xdata$x:000008CD                 db    0
.xdata$x:000008CE                 db    0
.xdata$x:000008CF                 db    0
.xdata$x:000008D0                 db    0
.xdata$x:000008D1                 db    0
.xdata$x:000008D2                 db    0
.xdata$x:000008D3                 db    0
.xdata$x:000008D4                 db    0
.xdata$x:000008D5                 db    0
.xdata$x:000008D6                 db    0
.xdata$x:000008D7                 db    0
.xdata$x:000008D8                 db    0
.xdata$x:000008D9                 db    0
.xdata$x:000008DA                 db    0
.xdata$x:000008DB                 db    0
.xdata$x:000008DC                 db    1
.xdata$x:000008DD                 db    0
.xdata$x:000008DE                 db    0
.xdata$x:000008DF                 db    0
.xdata$x:000008DF _xdata$x        ends
.xdata$x:000008DF
.text:000008E0 ; ===========================================================================
.text:000008E0
.text:000008E0 ; Segment type: Pure code
.text:000008E0 ; Segment permissions: Read/Execute
.text:000008E0 _text           segment para public 'CODE' use32
.text:000008E0                 assume cs:_text
.text:000008E0                 ;org 8E0h
.text:000008E0 ; COMDAT (pick any)
.text:000008E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000008E0
.text:000008E0 ; =============== S U B R O U T I N E =======================================
.text:000008E0
.text:000008E0 ; Attributes: bp-based frame
.text:000008E0
.text:000008E0 ; public: __thiscall IUnknown::IUnknown(void)
.text:000008E0                 public ??0IUnknown@@QAE@XZ
.text:000008E0 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: IInArchive::IInArchive(void)+11p
.text:000008E0
.text:000008E0 var_4           = dword ptr -4
.text:000008E0
.text:000008E0                 push    ebp
.text:000008E1                 mov     ebp, esp
.text:000008E3                 push    ecx
.text:000008E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008EB                 mov     [ebp+var_4], ecx
.text:000008EE                 mov     eax, [ebp+var_4]
.text:000008F1                 mov     esp, ebp
.text:000008F3                 pop     ebp
.text:000008F4                 retn
.text:000008F4 ??0IUnknown@@QAE@XZ endp
.text:000008F4
.text:000008F4 ; ---------------------------------------------------------------------------
.text:000008F5                 align 4
.text:000008F5 _text           ends
.text:000008F5
.text:000008F8 ; ===========================================================================
.text:000008F8
.text:000008F8 ; Segment type: Pure code
.text:000008F8 ; Segment permissions: Read/Execute
.text:000008F8 _text           segment para public 'CODE' use32
.text:000008F8                 assume cs:_text
.text:000008F8                 ;org 8F8h
.text:000008F8 ; COMDAT (pick any)
.text:000008F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000008F8
.text:000008F8 ; =============== S U B R O U T I N E =======================================
.text:000008F8
.text:000008F8 ; Attributes: bp-based frame
.text:000008F8
.text:000008F8 ; public: __thiscall CObjectVector<struct NArchive::NCab::CDatabaseEx>::CObjectVector<struct NArchive::NCab::CDatabaseEx>(void)
.text:000008F8                 public ??0?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ
.text:000008F8 ??0?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ proc near
.text:000008F8                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::CMvDatabaseEx(void)+30p
.text:000008F8
.text:000008F8 var_4           = dword ptr -4
.text:000008F8
.text:000008F8                 push    ebp
.text:000008F9                 mov     ebp, esp
.text:000008FB                 push    ecx
.text:000008FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000903                 mov     [ebp+var_4], ecx
.text:00000906                 mov     ecx, [ebp+var_4]
.text:00000909                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000090E                 mov     eax, [ebp+var_4]
.text:00000911                 add     esp, 4
.text:00000914                 cmp     ebp, esp
.text:00000916                 call    __RTC_CheckEsp
.text:0000091B                 mov     esp, ebp
.text:0000091D                 pop     ebp
.text:0000091E                 retn
.text:0000091E ??0?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ endp
.text:0000091E
.text:0000091E ; ---------------------------------------------------------------------------
.text:0000091F                 align 10h
.text:0000091F _text           ends
.text:0000091F
.text:00000920 ; ===========================================================================
.text:00000920
.text:00000920 ; Segment type: Pure code
.text:00000920 ; Segment permissions: Read/Execute
.text:00000920 _text           segment para public 'CODE' use32
.text:00000920                 assume cs:_text
.text:00000920                 ;org 920h
.text:00000920 ; COMDAT (pick any)
.text:00000920                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000920
.text:00000920 ; =============== S U B R O U T I N E =======================================
.text:00000920
.text:00000920 ; Attributes: bp-based frame
.text:00000920
.text:00000920 ; public: __thiscall CObjectVector<struct NArchive::NCab::CDatabaseEx>::~CObjectVector<struct NArchive::NCab::CDatabaseEx>(void)
.text:00000920                 public ??1?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ
.text:00000920 ??1?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ proc near
.text:00000920                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::~CMvDatabaseEx(void)+67p
.text:00000920                                         ; __unwindfunclet$??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ$0+3j ...
.text:00000920
.text:00000920 var_20          = dword ptr -20h
.text:00000920 var_1C          = dword ptr -1Ch
.text:00000920 var_18          = dword ptr -18h
.text:00000920 var_14          = dword ptr -14h
.text:00000920 var_10          = dword ptr -10h
.text:00000920 var_C           = dword ptr -0Ch
.text:00000920 var_4           = dword ptr -4
.text:00000920
.text:00000920                 push    ebp
.text:00000921                 mov     ebp, esp
.text:00000923                 push    0FFFFFFFFh
.text:00000925                 push    offset __ehhandler$??1?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ
.text:0000092A                 mov     eax, large fs:0
.text:00000930                 push    eax
.text:00000931                 sub     esp, 14h
.text:00000934                 mov     eax, 0CCCCCCCCh
.text:00000939                 mov     [ebp+var_20], eax
.text:0000093C                 mov     [ebp+var_1C], eax
.text:0000093F                 mov     [ebp+var_18], eax
.text:00000942                 mov     [ebp+var_14], eax
.text:00000945                 mov     [ebp+var_10], eax
.text:00000948                 mov     eax, dword ptr ds:___security_cookie
.text:0000094D                 xor     eax, ebp
.text:0000094F                 push    eax
.text:00000950                 lea     eax, [ebp+var_C]
.text:00000953                 mov     large fs:0, eax
.text:00000959                 mov     [ebp+var_10], ecx
.text:0000095C                 mov     [ebp+var_4], 0
.text:00000963                 mov     ecx, [ebp+var_10]
.text:00000966                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000096B                 mov     [ebp+var_14], eax
.text:0000096E
.text:0000096E loc_96E:                                ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::~CObjectVector<NArchive::NCab::CDatabaseEx>(void):loc_9B0j
.text:0000096E                 cmp     [ebp+var_14], 0
.text:00000972                 jz      short loc_9B2
.text:00000974                 mov     eax, [ebp+var_14]
.text:00000977                 sub     eax, 1
.text:0000097A                 mov     [ebp+var_14], eax
.text:0000097D                 mov     ecx, [ebp+var_14]
.text:00000980                 push    ecx
.text:00000981                 mov     ecx, [ebp+var_10]
.text:00000984                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00000989                 mov     edx, [eax]
.text:0000098B                 mov     [ebp+var_1C], edx
.text:0000098E                 mov     eax, [ebp+var_1C]
.text:00000991                 mov     [ebp+var_18], eax
.text:00000994                 cmp     [ebp+var_18], 0
.text:00000998                 jz      short loc_9A9
.text:0000099A                 push    1
.text:0000099C                 mov     ecx, [ebp+var_18]
.text:0000099F                 call    ??_GCDatabaseEx@NCab@NArchive@@QAEPAXI@Z ; NArchive::NCab::CDatabaseEx::`scalar deleting destructor'(uint)
.text:000009A4                 mov     [ebp+var_20], eax
.text:000009A7                 jmp     short loc_9B0
.text:000009A9 ; ---------------------------------------------------------------------------
.text:000009A9
.text:000009A9 loc_9A9:                                ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::~CObjectVector<NArchive::NCab::CDatabaseEx>(void)+78j
.text:000009A9                 mov     [ebp+var_20], 0
.text:000009B0
.text:000009B0 loc_9B0:                                ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::~CObjectVector<NArchive::NCab::CDatabaseEx>(void)+87j
.text:000009B0                 jmp     short loc_96E
.text:000009B2 ; ---------------------------------------------------------------------------
.text:000009B2
.text:000009B2 loc_9B2:                                ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::~CObjectVector<NArchive::NCab::CDatabaseEx>(void)+52j
.text:000009B2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000009B9                 mov     ecx, [ebp+var_10]
.text:000009BC                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000009C1                 mov     ecx, [ebp+var_C]
.text:000009C4                 mov     large fs:0, ecx
.text:000009CB                 pop     ecx
.text:000009CC                 add     esp, 20h
.text:000009CF                 cmp     ebp, esp
.text:000009D1                 call    __RTC_CheckEsp
.text:000009D6                 mov     esp, ebp
.text:000009D8                 pop     ebp
.text:000009D9                 retn
.text:000009D9 ??1?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ endp
.text:000009D9
.text:000009D9 ; ---------------------------------------------------------------------------
.text:000009DA                 align 4
.text:000009DA _text           ends
.text:000009DA
.text$x:000009DC ; ===========================================================================
.text$x:000009DC
.text$x:000009DC ; Segment type: Pure code
.text$x:000009DC ; Segment permissions: Read/Execute
.text$x:000009DC _text$x         segment para public 'CODE' use32
.text$x:000009DC                 assume cs:_text$x
.text$x:000009DC                 ;org 9DCh
.text$x:000009DC ; COMDAT (pick associative to section at 920)
.text$x:000009DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000009DC
.text$x:000009DC ; =============== S U B R O U T I N E =======================================
.text$x:000009DC
.text$x:000009DC
.text$x:000009DC __unwindfunclet$??1?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ$0 proc near
.text$x:000009DC                                         ; DATA XREF: .xdata$x:00000A04o
.text$x:000009DC                 mov     ecx, [ebp-10h]
.text$x:000009DF                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:000009DF __unwindfunclet$??1?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ$0 endp
.text$x:000009DF
.text$x:000009E4
.text$x:000009E4 ; =============== S U B R O U T I N E =======================================
.text$x:000009E4
.text$x:000009E4
.text$x:000009E4 __ehhandler$??1?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ proc near
.text$x:000009E4                                         ; DATA XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::~CObjectVector<NArchive::NCab::CDatabaseEx>(void)+5o
.text$x:000009E4
.text$x:000009E4 arg_4           = dword ptr  8
.text$x:000009E4
.text$x:000009E4                 mov     edx, [esp+arg_4]
.text$x:000009E8                 lea     eax, [edx+0Ch]
.text$x:000009EB                 mov     ecx, [edx-18h]
.text$x:000009EE                 xor     ecx, eax
.text$x:000009F0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000009F5                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ
.text$x:000009FA                 jmp     ___CxxFrameHandler3
.text$x:000009FA __ehhandler$??1?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ endp
.text$x:000009FA
.text$x:000009FA ; ---------------------------------------------------------------------------
.text$x:000009FF                 align 10h
.text$x:000009FF _text$x         ends
.text$x:000009FF
.xdata$x:00000A00 ; ===========================================================================
.xdata$x:00000A00
.xdata$x:00000A00 ; Segment type: Pure data
.xdata$x:00000A00 ; Segment permissions: Read
.xdata$x:00000A00 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000A00                 assume cs:_xdata$x
.xdata$x:00000A00                 ;org 0A00h
.xdata$x:00000A00 ; COMDAT (pick associative to section at 920)
.xdata$x:00000A00 __unwindtable$??1?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:00000A00                                         ; DATA XREF: .xdata$x:00000A10o
.xdata$x:00000A01                 db 0FFh
.xdata$x:00000A02                 db 0FFh
.xdata$x:00000A03                 db 0FFh
.xdata$x:00000A04                 dd offset __unwindfunclet$??1?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ$0
.xdata$x:00000A08 __ehfuncinfo$??1?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:00000A08                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ+11o
.xdata$x:00000A09                 db    5
.xdata$x:00000A0A                 db  93h ; ô
.xdata$x:00000A0B                 db  19h
.xdata$x:00000A0C                 db    1
.xdata$x:00000A0D                 db    0
.xdata$x:00000A0E                 db    0
.xdata$x:00000A0F                 db    0
.xdata$x:00000A10                 dd offset __unwindtable$??1?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ
.xdata$x:00000A14                 db    0
.xdata$x:00000A15                 db    0
.xdata$x:00000A16                 db    0
.xdata$x:00000A17                 db    0
.xdata$x:00000A18                 db    0
.xdata$x:00000A19                 db    0
.xdata$x:00000A1A                 db    0
.xdata$x:00000A1B                 db    0
.xdata$x:00000A1C                 db    0
.xdata$x:00000A1D                 db    0
.xdata$x:00000A1E                 db    0
.xdata$x:00000A1F                 db    0
.xdata$x:00000A20                 db    0
.xdata$x:00000A21                 db    0
.xdata$x:00000A22                 db    0
.xdata$x:00000A23                 db    0
.xdata$x:00000A24                 db    0
.xdata$x:00000A25                 db    0
.xdata$x:00000A26                 db    0
.xdata$x:00000A27                 db    0
.xdata$x:00000A28                 db    1
.xdata$x:00000A29                 db    0
.xdata$x:00000A2A                 db    0
.xdata$x:00000A2B                 db    0
.xdata$x:00000A2B _xdata$x        ends
.xdata$x:00000A2B
.text:00000A2C ; ===========================================================================
.text:00000A2C
.text:00000A2C ; Segment type: Pure code
.text:00000A2C ; Segment permissions: Read/Execute
.text:00000A2C _text           segment para public 'CODE' use32
.text:00000A2C                 assume cs:_text
.text:00000A2C                 ;org 0A2Ch
.text:00000A2C ; COMDAT (pick any)
.text:00000A2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A2C
.text:00000A2C ; =============== S U B R O U T I N E =======================================
.text:00000A2C
.text:00000A2C ; Attributes: bp-based frame
.text:00000A2C
.text:00000A2C ; public: __thiscall CRecordVector<struct NArchive::NCab::CMvItem>::CRecordVector<struct NArchive::NCab::CMvItem>(void)
.text:00000A2C                 public ??0?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAE@XZ
.text:00000A2C ??0?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAE@XZ proc near
.text:00000A2C                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::CMvDatabaseEx(void)+42p
.text:00000A2C
.text:00000A2C var_4           = dword ptr -4
.text:00000A2C
.text:00000A2C                 push    ebp
.text:00000A2D                 mov     ebp, esp
.text:00000A2F                 push    ecx
.text:00000A30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A37                 mov     [ebp+var_4], ecx
.text:00000A3A                 mov     eax, [ebp+var_4]
.text:00000A3D                 mov     dword ptr [eax], 0
.text:00000A43                 mov     ecx, [ebp+var_4]
.text:00000A46                 mov     dword ptr [ecx+4], 0
.text:00000A4D                 mov     edx, [ebp+var_4]
.text:00000A50                 mov     dword ptr [edx+8], 0
.text:00000A57                 mov     eax, [ebp+var_4]
.text:00000A5A                 mov     esp, ebp
.text:00000A5C                 pop     ebp
.text:00000A5D                 retn
.text:00000A5D ??0?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAE@XZ endp
.text:00000A5D
.text:00000A5D ; ---------------------------------------------------------------------------
.text:00000A5E                 align 10h
.text:00000A5E _text           ends
.text:00000A5E
.text:00000A60 ; ===========================================================================
.text:00000A60
.text:00000A60 ; Segment type: Pure code
.text:00000A60 ; Segment permissions: Read/Execute
.text:00000A60 _text           segment para public 'CODE' use32
.text:00000A60                 assume cs:_text
.text:00000A60                 ;org 0A60h
.text:00000A60 ; COMDAT (pick any)
.text:00000A60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A60
.text:00000A60 ; =============== S U B R O U T I N E =======================================
.text:00000A60
.text:00000A60 ; Attributes: bp-based frame
.text:00000A60
.text:00000A60 ; public: __thiscall CRecordVector<struct NArchive::NCab::CMvItem>::~CRecordVector<struct NArchive::NCab::CMvItem>(void)
.text:00000A60                 public ??1?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAE@XZ
.text:00000A60 ??1?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAE@XZ proc near
.text:00000A60                                         ; CODE XREF: NArchive::NCab::CMvDatabaseEx::~CMvDatabaseEx(void)+58p
.text:00000A60                                         ; __unwindfunclet$??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ$1+6j ...
.text:00000A60
.text:00000A60 var_8           = dword ptr -8
.text:00000A60 var_4           = dword ptr -4
.text:00000A60
.text:00000A60                 push    ebp
.text:00000A61                 mov     ebp, esp
.text:00000A63                 sub     esp, 8
.text:00000A66                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000A6D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A74                 mov     [ebp+var_4], ecx
.text:00000A77                 mov     eax, [ebp+var_4]
.text:00000A7A                 mov     ecx, [eax]
.text:00000A7C                 mov     [ebp+var_8], ecx
.text:00000A7F                 mov     edx, [ebp+var_8]
.text:00000A82                 push    edx             ; void *
.text:00000A83                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000A88                 add     esp, 4
.text:00000A8B                 add     esp, 8
.text:00000A8E                 cmp     ebp, esp
.text:00000A90                 call    __RTC_CheckEsp
.text:00000A95                 mov     esp, ebp
.text:00000A97                 pop     ebp
.text:00000A98                 retn
.text:00000A98 ??1?$CRecordVector@UCMvItem@NCab@NArchive@@@@QAE@XZ endp
.text:00000A98
.text:00000A98 ; ---------------------------------------------------------------------------
.text:00000A99                 align 4
.text:00000A99 _text           ends
.text:00000A99
.text:00000A9C ; ===========================================================================
.text:00000A9C
.text:00000A9C ; Segment type: Pure code
.text:00000A9C ; Segment permissions: Read/Execute
.text:00000A9C _text           segment para public 'CODE' use32
.text:00000A9C                 assume cs:_text
.text:00000A9C                 ;org 0A9Ch
.text:00000A9C ; COMDAT (pick any)
.text:00000A9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A9C
.text:00000A9C ; =============== S U B R O U T I N E =======================================
.text:00000A9C
.text:00000A9C ; Attributes: bp-based frame
.text:00000A9C
.text:00000A9C ; public: __thiscall CRecordVector<int>::CRecordVector<int>(void)
.text:00000A9C                 public ??0?$CRecordVector@H@@QAE@XZ
.text:00000A9C ??0?$CRecordVector@H@@QAE@XZ proc near  ; CODE XREF: NArchive::NCab::CMvDatabaseEx::CMvDatabaseEx(void)+51p
.text:00000A9C
.text:00000A9C var_4           = dword ptr -4
.text:00000A9C
.text:00000A9C                 push    ebp
.text:00000A9D                 mov     ebp, esp
.text:00000A9F                 push    ecx
.text:00000AA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AA7                 mov     [ebp+var_4], ecx
.text:00000AAA                 mov     eax, [ebp+var_4]
.text:00000AAD                 mov     dword ptr [eax], 0
.text:00000AB3                 mov     ecx, [ebp+var_4]
.text:00000AB6                 mov     dword ptr [ecx+4], 0
.text:00000ABD                 mov     edx, [ebp+var_4]
.text:00000AC0                 mov     dword ptr [edx+8], 0
.text:00000AC7                 mov     eax, [ebp+var_4]
.text:00000ACA                 mov     esp, ebp
.text:00000ACC                 pop     ebp
.text:00000ACD                 retn
.text:00000ACD ??0?$CRecordVector@H@@QAE@XZ endp
.text:00000ACD
.text:00000ACD ; ---------------------------------------------------------------------------
.text:00000ACE                 align 10h
.text:00000ACE _text           ends
.text:00000ACE
.text:00000AD0 ; ===========================================================================
.text:00000AD0
.text:00000AD0 ; Segment type: Pure code
.text:00000AD0 ; Segment permissions: Read/Execute
.text:00000AD0 _text           segment para public 'CODE' use32
.text:00000AD0                 assume cs:_text
.text:00000AD0                 ;org 0AD0h
.text:00000AD0 ; COMDAT (pick any)
.text:00000AD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000AD0
.text:00000AD0 ; =============== S U B R O U T I N E =======================================
.text:00000AD0
.text:00000AD0 ; Attributes: bp-based frame
.text:00000AD0
.text:00000AD0 ; public: __thiscall CRecordVector<int>::~CRecordVector<int>(void)
.text:00000AD0                 public ??1?$CRecordVector@H@@QAE@XZ
.text:00000AD0 ??1?$CRecordVector@H@@QAE@XZ proc near  ; CODE XREF: NArchive::NCab::CMvDatabaseEx::~CMvDatabaseEx(void)+49p
.text:00000AD0                                         ; __unwindfunclet$??1CMvDatabaseEx@NCab@NArchive@@QAE@XZ$2+6j ...
.text:00000AD0
.text:00000AD0 var_8           = dword ptr -8
.text:00000AD0 var_4           = dword ptr -4
.text:00000AD0
.text:00000AD0                 push    ebp
.text:00000AD1                 mov     ebp, esp
.text:00000AD3                 sub     esp, 8
.text:00000AD6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000ADD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AE4                 mov     [ebp+var_4], ecx
.text:00000AE7                 mov     eax, [ebp+var_4]
.text:00000AEA                 mov     ecx, [eax]
.text:00000AEC                 mov     [ebp+var_8], ecx
.text:00000AEF                 mov     edx, [ebp+var_8]
.text:00000AF2                 push    edx             ; void *
.text:00000AF3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000AF8                 add     esp, 4
.text:00000AFB                 add     esp, 8
.text:00000AFE                 cmp     ebp, esp
.text:00000B00                 call    __RTC_CheckEsp
.text:00000B05                 mov     esp, ebp
.text:00000B07                 pop     ebp
.text:00000B08                 retn
.text:00000B08 ??1?$CRecordVector@H@@QAE@XZ endp
.text:00000B08
.text:00000B08 ; ---------------------------------------------------------------------------
.text:00000B09                 align 4
.text:00000B09 _text           ends
.text:00000B09
.text:00000B0C ; ===========================================================================
.text:00000B0C
.text:00000B0C ; Segment type: Pure code
.text:00000B0C ; Segment permissions: Read/Execute
.text:00000B0C _text           segment para public 'CODE' use32
.text:00000B0C                 assume cs:_text
.text:00000B0C                 ;org 0B0Ch
.text:00000B0C ; COMDAT (pick any)
.text:00000B0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000B0C
.text:00000B0C ; =============== S U B R O U T I N E =======================================
.text:00000B0C
.text:00000B0C ; Attributes: bp-based frame
.text:00000B0C
.text:00000B0C ; public: __thiscall CRecordVector<unsigned int>::CRecordVector<unsigned int>(void)
.text:00000B0C                 public ??0?$CRecordVector@I@@QAE@XZ
.text:00000B0C ??0?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: NArchive::NCab::CMvDatabaseEx::CMvDatabaseEx(void)+60p
.text:00000B0C
.text:00000B0C var_4           = dword ptr -4
.text:00000B0C
.text:00000B0C                 push    ebp
.text:00000B0D                 mov     ebp, esp
.text:00000B0F                 push    ecx
.text:00000B10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B17                 mov     [ebp+var_4], ecx
.text:00000B1A                 mov     eax, [ebp+var_4]
.text:00000B1D                 mov     dword ptr [eax], 0
.text:00000B23                 mov     ecx, [ebp+var_4]
.text:00000B26                 mov     dword ptr [ecx+4], 0
.text:00000B2D                 mov     edx, [ebp+var_4]
.text:00000B30                 mov     dword ptr [edx+8], 0
.text:00000B37                 mov     eax, [ebp+var_4]
.text:00000B3A                 mov     esp, ebp
.text:00000B3C                 pop     ebp
.text:00000B3D                 retn
.text:00000B3D ??0?$CRecordVector@I@@QAE@XZ endp
.text:00000B3D
.text:00000B3D ; ---------------------------------------------------------------------------
.text:00000B3E                 align 10h
.text:00000B3E _text           ends
.text:00000B3E
.text:00000B40 ; ===========================================================================
.text:00000B40
.text:00000B40 ; Segment type: Pure code
.text:00000B40 ; Segment permissions: Read/Execute
.text:00000B40 _text           segment para public 'CODE' use32
.text:00000B40                 assume cs:_text
.text:00000B40                 ;org 0B40h
.text:00000B40 ; COMDAT (pick any)
.text:00000B40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000B40
.text:00000B40 ; =============== S U B R O U T I N E =======================================
.text:00000B40
.text:00000B40 ; Attributes: bp-based frame
.text:00000B40
.text:00000B40 ; public: __thiscall CRecordVector<unsigned int>::~CRecordVector<unsigned int>(void)
.text:00000B40                 public ??1?$CRecordVector@I@@QAE@XZ
.text:00000B40 ??1?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: NArchive::NCab::CMvDatabaseEx::~CMvDatabaseEx(void)+3Ap
.text:00000B40
.text:00000B40 var_8           = dword ptr -8
.text:00000B40 var_4           = dword ptr -4
.text:00000B40
.text:00000B40                 push    ebp
.text:00000B41                 mov     ebp, esp
.text:00000B43                 sub     esp, 8
.text:00000B46                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000B4D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B54                 mov     [ebp+var_4], ecx
.text:00000B57                 mov     eax, [ebp+var_4]
.text:00000B5A                 mov     ecx, [eax]
.text:00000B5C                 mov     [ebp+var_8], ecx
.text:00000B5F                 mov     edx, [ebp+var_8]
.text:00000B62                 push    edx             ; void *
.text:00000B63                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000B68                 add     esp, 4
.text:00000B6B                 add     esp, 8
.text:00000B6E                 cmp     ebp, esp
.text:00000B70                 call    __RTC_CheckEsp
.text:00000B75                 mov     esp, ebp
.text:00000B77                 pop     ebp
.text:00000B78                 retn
.text:00000B78 ??1?$CRecordVector@I@@QAE@XZ endp
.text:00000B78
.text:00000B78 ; ---------------------------------------------------------------------------
.text:00000B79                 align 4
.text:00000B79 _text           ends
.text:00000B79
.text:00000B7C ; ===========================================================================
.text:00000B7C
.text:00000B7C ; Segment type: Pure code
.text:00000B7C ; Segment permissions: Read/Execute
.text:00000B7C _text           segment para public 'CODE' use32
.text:00000B7C                 assume cs:_text
.text:00000B7C                 ;org 0B7Ch
.text:00000B7C ; COMDAT (pick any)
.text:00000B7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000B7C
.text:00000B7C ; =============== S U B R O U T I N E =======================================
.text:00000B7C
.text:00000B7C ; Attributes: bp-based frame
.text:00000B7C
.text:00000B7C ; public: void * __thiscall NArchive::NCab::CDatabaseEx::`scalar deleting destructor'(unsigned int)
.text:00000B7C                 public ??_GCDatabaseEx@NCab@NArchive@@QAEPAXI@Z
.text:00000B7C ??_GCDatabaseEx@NCab@NArchive@@QAEPAXI@Z proc near
.text:00000B7C                                         ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::~CObjectVector<NArchive::NCab::CDatabaseEx>(void)+7Fp
.text:00000B7C
.text:00000B7C var_4           = dword ptr -4
.text:00000B7C arg_0           = dword ptr  8
.text:00000B7C
.text:00000B7C                 push    ebp
.text:00000B7D                 mov     ebp, esp
.text:00000B7F                 push    ecx
.text:00000B80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B87                 mov     [ebp+var_4], ecx
.text:00000B8A                 mov     ecx, [ebp+var_4] ; this
.text:00000B8D                 call    ??1CDatabaseEx@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CDatabaseEx::~CDatabaseEx(void)
.text:00000B92                 mov     eax, [ebp+arg_0]
.text:00000B95                 and     eax, 1
.text:00000B98                 jz      short loc_BA6
.text:00000B9A                 mov     ecx, [ebp+var_4]
.text:00000B9D                 push    ecx             ; void *
.text:00000B9E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000BA3                 add     esp, 4
.text:00000BA6
.text:00000BA6 loc_BA6:                                ; CODE XREF: NArchive::NCab::CDatabaseEx::`scalar deleting destructor'(uint)+1Cj
.text:00000BA6                 mov     eax, [ebp+var_4]
.text:00000BA9                 add     esp, 4
.text:00000BAC                 cmp     ebp, esp
.text:00000BAE                 call    __RTC_CheckEsp
.text:00000BB3                 mov     esp, ebp
.text:00000BB5                 pop     ebp
.text:00000BB6                 retn    4
.text:00000BB6 ??_GCDatabaseEx@NCab@NArchive@@QAEPAXI@Z endp
.text:00000BB6
.text:00000BB6 ; ---------------------------------------------------------------------------
.text:00000BB9                 align 4
.text:00000BB9 _text           ends
.text:00000BB9
.text:00000BBC ; ===========================================================================
.text:00000BBC
.text:00000BBC ; Segment type: Pure code
.text:00000BBC ; Segment permissions: Read/Execute
.text:00000BBC _text           segment para public 'CODE' use32
.text:00000BBC                 assume cs:_text
.text:00000BBC                 ;org 0BBCh
.text:00000BBC ; COMDAT (pick any)
.text:00000BBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000BBC
.text:00000BBC ; =============== S U B R O U T I N E =======================================
.text:00000BBC
.text:00000BBC ; Attributes: bp-based frame
.text:00000BBC
.text:00000BBC ; _DWORD __thiscall NArchive::NCab::CDatabaseEx::~CDatabaseEx(NArchive::NCab::CDatabaseEx *__hidden this)
.text:00000BBC                 public ??1CDatabaseEx@NCab@NArchive@@QAE@XZ
.text:00000BBC ??1CDatabaseEx@NCab@NArchive@@QAE@XZ proc near
.text:00000BBC                                         ; CODE XREF: NArchive::NCab::CDatabaseEx::`scalar deleting destructor'(uint)+11p
.text:00000BBC
.text:00000BBC var_10          = dword ptr -10h
.text:00000BBC var_C           = dword ptr -0Ch
.text:00000BBC var_4           = dword ptr -4
.text:00000BBC
.text:00000BBC                 push    ebp
.text:00000BBD                 mov     ebp, esp
.text:00000BBF                 push    0FFFFFFFFh
.text:00000BC1                 push    offset __ehhandler$??1CDatabaseEx@NCab@NArchive@@QAE@XZ
.text:00000BC6                 mov     eax, large fs:0
.text:00000BCC                 push    eax
.text:00000BCD                 push    ecx
.text:00000BCE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000BD5                 mov     eax, dword ptr ds:___security_cookie
.text:00000BDA                 xor     eax, ebp
.text:00000BDC                 push    eax
.text:00000BDD                 lea     eax, [ebp+var_C]
.text:00000BE0                 mov     large fs:0, eax
.text:00000BE6                 mov     [ebp+var_10], ecx
.text:00000BE9                 mov     [ebp+var_4], 0
.text:00000BF0                 mov     ecx, [ebp+var_10]
.text:00000BF3                 add     ecx, 78h ; 'x'
.text:00000BF6                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00000BFB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000C02                 mov     ecx, [ebp+var_10] ; this
.text:00000C05                 call    ??1CDatabase@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CDatabase::~CDatabase(void)
.text:00000C0A                 mov     ecx, [ebp+var_C]
.text:00000C0D                 mov     large fs:0, ecx
.text:00000C14                 pop     ecx
.text:00000C15                 add     esp, 10h
.text:00000C18                 cmp     ebp, esp
.text:00000C1A                 call    __RTC_CheckEsp
.text:00000C1F                 mov     esp, ebp
.text:00000C21                 pop     ebp
.text:00000C22                 retn
.text:00000C22 ??1CDatabaseEx@NCab@NArchive@@QAE@XZ endp
.text:00000C22
.text:00000C22 ; ---------------------------------------------------------------------------
.text:00000C23                 align 4
.text:00000C23 _text           ends
.text:00000C23
.text$x:00000C24 ; ===========================================================================
.text$x:00000C24
.text$x:00000C24 ; Segment type: Pure code
.text$x:00000C24 ; Segment permissions: Read/Execute
.text$x:00000C24 _text$x         segment para public 'CODE' use32
.text$x:00000C24                 assume cs:_text$x
.text$x:00000C24                 ;org 0C24h
.text$x:00000C24 ; COMDAT (pick associative to section at BBC)
.text$x:00000C24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000C24
.text$x:00000C24 ; =============== S U B R O U T I N E =======================================
.text$x:00000C24
.text$x:00000C24
.text$x:00000C24 __unwindfunclet$??1CDatabaseEx@NCab@NArchive@@QAE@XZ$0 proc near
.text$x:00000C24                                         ; DATA XREF: .xdata$x:00000C4Co
.text$x:00000C24                 mov     ecx, [ebp-10h]  ; this
.text$x:00000C27                 jmp     ??1CDatabase@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CDatabase::~CDatabase(void)
.text$x:00000C27 __unwindfunclet$??1CDatabaseEx@NCab@NArchive@@QAE@XZ$0 endp
.text$x:00000C27
.text$x:00000C2C
.text$x:00000C2C ; =============== S U B R O U T I N E =======================================
.text$x:00000C2C
.text$x:00000C2C
.text$x:00000C2C __ehhandler$??1CDatabaseEx@NCab@NArchive@@QAE@XZ proc near
.text$x:00000C2C                                         ; DATA XREF: NArchive::NCab::CDatabaseEx::~CDatabaseEx(void)+5o
.text$x:00000C2C
.text$x:00000C2C arg_4           = dword ptr  8
.text$x:00000C2C
.text$x:00000C2C                 mov     edx, [esp+arg_4]
.text$x:00000C30                 lea     eax, [edx+0Ch]
.text$x:00000C33                 mov     ecx, [edx-8]
.text$x:00000C36                 xor     ecx, eax
.text$x:00000C38                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000C3D                 mov     eax, offset __ehfuncinfo$??1CDatabaseEx@NCab@NArchive@@QAE@XZ
.text$x:00000C42                 jmp     ___CxxFrameHandler3
.text$x:00000C42 __ehhandler$??1CDatabaseEx@NCab@NArchive@@QAE@XZ endp
.text$x:00000C42
.text$x:00000C42 ; ---------------------------------------------------------------------------
.text$x:00000C47                 align 4
.text$x:00000C47 _text$x         ends
.text$x:00000C47
.xdata$x:00000C48 ; ===========================================================================
.xdata$x:00000C48
.xdata$x:00000C48 ; Segment type: Pure data
.xdata$x:00000C48 ; Segment permissions: Read
.xdata$x:00000C48 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000C48                 assume cs:_xdata$x
.xdata$x:00000C48                 ;org 0C48h
.xdata$x:00000C48 ; COMDAT (pick associative to section at BBC)
.xdata$x:00000C48 __unwindtable$??1CDatabaseEx@NCab@NArchive@@QAE@XZ db 0FFh
.xdata$x:00000C48                                         ; DATA XREF: .xdata$x:00000C58o
.xdata$x:00000C49                 db 0FFh
.xdata$x:00000C4A                 db 0FFh
.xdata$x:00000C4B                 db 0FFh
.xdata$x:00000C4C                 dd offset __unwindfunclet$??1CDatabaseEx@NCab@NArchive@@QAE@XZ$0
.xdata$x:00000C50 __ehfuncinfo$??1CDatabaseEx@NCab@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00000C50                                         ; DATA XREF: __ehhandler$??1CDatabaseEx@NCab@NArchive@@QAE@XZ+11o
.xdata$x:00000C51                 db    5
.xdata$x:00000C52                 db  93h ; ô
.xdata$x:00000C53                 db  19h
.xdata$x:00000C54                 db    1
.xdata$x:00000C55                 db    0
.xdata$x:00000C56                 db    0
.xdata$x:00000C57                 db    0
.xdata$x:00000C58                 dd offset __unwindtable$??1CDatabaseEx@NCab@NArchive@@QAE@XZ
.xdata$x:00000C5C                 db    0
.xdata$x:00000C5D                 db    0
.xdata$x:00000C5E                 db    0
.xdata$x:00000C5F                 db    0
.xdata$x:00000C60                 db    0
.xdata$x:00000C61                 db    0
.xdata$x:00000C62                 db    0
.xdata$x:00000C63                 db    0
.xdata$x:00000C64                 db    0
.xdata$x:00000C65                 db    0
.xdata$x:00000C66                 db    0
.xdata$x:00000C67                 db    0
.xdata$x:00000C68                 db    0
.xdata$x:00000C69                 db    0
.xdata$x:00000C6A                 db    0
.xdata$x:00000C6B                 db    0
.xdata$x:00000C6C                 db    0
.xdata$x:00000C6D                 db    0
.xdata$x:00000C6E                 db    0
.xdata$x:00000C6F                 db    0
.xdata$x:00000C70                 db    1
.xdata$x:00000C71                 db    0
.xdata$x:00000C72                 db    0
.xdata$x:00000C73                 db    0
.xdata$x:00000C73 _xdata$x        ends
.xdata$x:00000C73
.text:00000C74 ; ===========================================================================
.text:00000C74
.text:00000C74 ; Segment type: Pure code
.text:00000C74 ; Segment permissions: Read/Execute
.text:00000C74 _text           segment para public 'CODE' use32
.text:00000C74                 assume cs:_text
.text:00000C74                 ;org 0C74h
.text:00000C74 ; COMDAT (pick any)
.text:00000C74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000C74
.text:00000C74 ; =============== S U B R O U T I N E =======================================
.text:00000C74
.text:00000C74 ; Attributes: bp-based frame
.text:00000C74
.text:00000C74 ; _DWORD __thiscall NArchive::NCab::CDatabase::~CDatabase(NArchive::NCab::CDatabase *__hidden this)
.text:00000C74                 public ??1CDatabase@NCab@NArchive@@QAE@XZ
.text:00000C74 ??1CDatabase@NCab@NArchive@@QAE@XZ proc near
.text:00000C74                                         ; CODE XREF: NArchive::NCab::CDatabaseEx::~CDatabaseEx(void)+49p
.text:00000C74                                         ; __unwindfunclet$??1CDatabaseEx@NCab@NArchive@@QAE@XZ$0+3j
.text:00000C74
.text:00000C74 var_10          = dword ptr -10h
.text:00000C74 var_C           = dword ptr -0Ch
.text:00000C74 var_4           = dword ptr -4
.text:00000C74
.text:00000C74                 push    ebp
.text:00000C75                 mov     ebp, esp
.text:00000C77                 push    0FFFFFFFFh
.text:00000C79                 push    offset __ehhandler$??1CDatabase@NCab@NArchive@@QAE@XZ
.text:00000C7E                 mov     eax, large fs:0
.text:00000C84                 push    eax
.text:00000C85                 push    ecx
.text:00000C86                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000C8D                 mov     eax, dword ptr ds:___security_cookie
.text:00000C92                 xor     eax, ebp
.text:00000C94                 push    eax
.text:00000C95                 lea     eax, [ebp+var_C]
.text:00000C98                 mov     large fs:0, eax
.text:00000C9E                 mov     [ebp+var_10], ecx
.text:00000CA1                 mov     [ebp+var_4], 1
.text:00000CA8                 mov     ecx, [ebp+var_10]
.text:00000CAB                 add     ecx, 20h ; ' '  ; this
.text:00000CAE                 call    ??1CInArcInfo@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CInArcInfo::~CInArcInfo(void)
.text:00000CB3                 mov     byte ptr [ebp+var_4], 0
.text:00000CB7                 mov     ecx, [ebp+var_10]
.text:00000CBA                 add     ecx, 0Ch
.text:00000CBD                 call    ??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)
.text:00000CC2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000CC9                 mov     ecx, [ebp+var_10]
.text:00000CCC                 call    ??1?$CRecordVector@UCFolder@NCab@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NCab::CFolder>::~CRecordVector<NArchive::NCab::CFolder>(void)
.text:00000CD1                 mov     ecx, [ebp+var_C]
.text:00000CD4                 mov     large fs:0, ecx
.text:00000CDB                 pop     ecx
.text:00000CDC                 add     esp, 10h
.text:00000CDF                 cmp     ebp, esp
.text:00000CE1                 call    __RTC_CheckEsp
.text:00000CE6                 mov     esp, ebp
.text:00000CE8                 pop     ebp
.text:00000CE9                 retn
.text:00000CE9 ??1CDatabase@NCab@NArchive@@QAE@XZ endp
.text:00000CE9
.text:00000CE9 ; ---------------------------------------------------------------------------
.text:00000CEA                 align 4
.text:00000CEA _text           ends
.text:00000CEA
.text$x:00000CEC ; ===========================================================================
.text$x:00000CEC
.text$x:00000CEC ; Segment type: Pure code
.text$x:00000CEC ; Segment permissions: Read/Execute
.text$x:00000CEC _text$x         segment para public 'CODE' use32
.text$x:00000CEC                 assume cs:_text$x
.text$x:00000CEC                 ;org 0CECh
.text$x:00000CEC ; COMDAT (pick associative to section at C74)
.text$x:00000CEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000CEC
.text$x:00000CEC ; =============== S U B R O U T I N E =======================================
.text$x:00000CEC
.text$x:00000CEC
.text$x:00000CEC __unwindfunclet$??1CDatabase@NCab@NArchive@@QAE@XZ$0 proc near
.text$x:00000CEC                                         ; DATA XREF: .xdata$x:00000D20o
.text$x:00000CEC                 mov     ecx, [ebp-10h]
.text$x:00000CEF                 jmp     ??1?$CRecordVector@UCFolder@NCab@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NCab::CFolder>::~CRecordVector<NArchive::NCab::CFolder>(void)
.text$x:00000CEF __unwindfunclet$??1CDatabase@NCab@NArchive@@QAE@XZ$0 endp
.text$x:00000CEF
.text$x:00000CF4
.text$x:00000CF4 ; =============== S U B R O U T I N E =======================================
.text$x:00000CF4
.text$x:00000CF4
.text$x:00000CF4 __unwindfunclet$??1CDatabase@NCab@NArchive@@QAE@XZ$1 proc near
.text$x:00000CF4                                         ; DATA XREF: .xdata$x:00000D28o
.text$x:00000CF4                 mov     ecx, [ebp-10h]
.text$x:00000CF7                 add     ecx, 0Ch
.text$x:00000CFA                 jmp     ??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)
.text$x:00000CFA __unwindfunclet$??1CDatabase@NCab@NArchive@@QAE@XZ$1 endp
.text$x:00000CFA
.text$x:00000CFF
.text$x:00000CFF ; =============== S U B R O U T I N E =======================================
.text$x:00000CFF
.text$x:00000CFF
.text$x:00000CFF __ehhandler$??1CDatabase@NCab@NArchive@@QAE@XZ proc near
.text$x:00000CFF                                         ; DATA XREF: NArchive::NCab::CDatabase::~CDatabase(void)+5o
.text$x:00000CFF
.text$x:00000CFF arg_4           = dword ptr  8
.text$x:00000CFF
.text$x:00000CFF                 mov     edx, [esp+arg_4]
.text$x:00000D03                 lea     eax, [edx+0Ch]
.text$x:00000D06                 mov     ecx, [edx-8]
.text$x:00000D09                 xor     ecx, eax
.text$x:00000D0B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000D10                 mov     eax, offset __ehfuncinfo$??1CDatabase@NCab@NArchive@@QAE@XZ
.text$x:00000D15                 jmp     ___CxxFrameHandler3
.text$x:00000D15 __ehhandler$??1CDatabase@NCab@NArchive@@QAE@XZ endp
.text$x:00000D15
.text$x:00000D15 ; ---------------------------------------------------------------------------
.text$x:00000D1A                 align 4
.text$x:00000D1A _text$x         ends
.text$x:00000D1A
.xdata$x:00000D1C ; ===========================================================================
.xdata$x:00000D1C
.xdata$x:00000D1C ; Segment type: Pure data
.xdata$x:00000D1C ; Segment permissions: Read
.xdata$x:00000D1C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000D1C                 assume cs:_xdata$x
.xdata$x:00000D1C                 ;org 0D1Ch
.xdata$x:00000D1C ; COMDAT (pick associative to section at C74)
.xdata$x:00000D1C __unwindtable$??1CDatabase@NCab@NArchive@@QAE@XZ db 0FFh
.xdata$x:00000D1C                                         ; DATA XREF: .xdata$x:00000D34o
.xdata$x:00000D1D                 db 0FFh
.xdata$x:00000D1E                 db 0FFh
.xdata$x:00000D1F                 db 0FFh
.xdata$x:00000D20                 dd offset __unwindfunclet$??1CDatabase@NCab@NArchive@@QAE@XZ$0
.xdata$x:00000D24                 align 8
.xdata$x:00000D28                 dd offset __unwindfunclet$??1CDatabase@NCab@NArchive@@QAE@XZ$1
.xdata$x:00000D2C __ehfuncinfo$??1CDatabase@NCab@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00000D2C                                         ; DATA XREF: __ehhandler$??1CDatabase@NCab@NArchive@@QAE@XZ+11o
.xdata$x:00000D2D                 db    5
.xdata$x:00000D2E                 db  93h ; ô
.xdata$x:00000D2F                 db  19h
.xdata$x:00000D30                 db    2
.xdata$x:00000D31                 db    0
.xdata$x:00000D32                 db    0
.xdata$x:00000D33                 db    0
.xdata$x:00000D34                 dd offset __unwindtable$??1CDatabase@NCab@NArchive@@QAE@XZ
.xdata$x:00000D38                 db    0
.xdata$x:00000D39                 db    0
.xdata$x:00000D3A                 db    0
.xdata$x:00000D3B                 db    0
.xdata$x:00000D3C                 db    0
.xdata$x:00000D3D                 db    0
.xdata$x:00000D3E                 db    0
.xdata$x:00000D3F                 db    0
.xdata$x:00000D40                 db    0
.xdata$x:00000D41                 db    0
.xdata$x:00000D42                 db    0
.xdata$x:00000D43                 db    0
.xdata$x:00000D44                 db    0
.xdata$x:00000D45                 db    0
.xdata$x:00000D46                 db    0
.xdata$x:00000D47                 db    0
.xdata$x:00000D48                 db    0
.xdata$x:00000D49                 db    0
.xdata$x:00000D4A                 db    0
.xdata$x:00000D4B                 db    0
.xdata$x:00000D4C                 db    1
.xdata$x:00000D4D                 db    0
.xdata$x:00000D4E                 db    0
.xdata$x:00000D4F                 db    0
.xdata$x:00000D4F _xdata$x        ends
.xdata$x:00000D4F
.text:00000D50 ; ===========================================================================
.text:00000D50
.text:00000D50 ; Segment type: Pure code
.text:00000D50 ; Segment permissions: Read/Execute
.text:00000D50 _text           segment para public 'CODE' use32
.text:00000D50                 assume cs:_text
.text:00000D50                 ;org 0D50h
.text:00000D50 ; COMDAT (pick any)
.text:00000D50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D50
.text:00000D50 ; =============== S U B R O U T I N E =======================================
.text:00000D50
.text:00000D50 ; Attributes: bp-based frame
.text:00000D50
.text:00000D50 ; _DWORD __thiscall NArchive::NCab::CInArcInfo::~CInArcInfo(NArchive::NCab::CInArcInfo *__hidden this)
.text:00000D50                 public ??1CInArcInfo@NCab@NArchive@@QAE@XZ
.text:00000D50 ??1CInArcInfo@NCab@NArchive@@QAE@XZ proc near
.text:00000D50                                         ; CODE XREF: NArchive::NCab::CDatabase::~CDatabase(void)+3Ap
.text:00000D50
.text:00000D50 var_4           = dword ptr -4
.text:00000D50
.text:00000D50                 push    ebp
.text:00000D51                 mov     ebp, esp
.text:00000D53                 push    ecx
.text:00000D54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D5B                 mov     [ebp+var_4], ecx
.text:00000D5E                 mov     ecx, [ebp+var_4] ; this
.text:00000D61                 call    ??1CArchInfo@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CArchInfo::~CArchInfo(void)
.text:00000D66                 add     esp, 4
.text:00000D69                 cmp     ebp, esp
.text:00000D6B                 call    __RTC_CheckEsp
.text:00000D70                 mov     esp, ebp
.text:00000D72                 pop     ebp
.text:00000D73                 retn
.text:00000D73 ??1CInArcInfo@NCab@NArchive@@QAE@XZ endp
.text:00000D73
.text:00000D73 _text           ends
.text:00000D73
.text:00000D74 ; ===========================================================================
.text:00000D74
.text:00000D74 ; Segment type: Pure code
.text:00000D74 ; Segment permissions: Read/Execute
.text:00000D74 _text           segment para public 'CODE' use32
.text:00000D74                 assume cs:_text
.text:00000D74                 ;org 0D74h
.text:00000D74 ; COMDAT (pick any)
.text:00000D74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D74
.text:00000D74 ; =============== S U B R O U T I N E =======================================
.text:00000D74
.text:00000D74 ; Attributes: bp-based frame
.text:00000D74
.text:00000D74 ; _DWORD __thiscall NArchive::NCab::CArchInfo::~CArchInfo(NArchive::NCab::CArchInfo *__hidden this)
.text:00000D74                 public ??1CArchInfo@NCab@NArchive@@QAE@XZ
.text:00000D74 ??1CArchInfo@NCab@NArchive@@QAE@XZ proc near
.text:00000D74                                         ; CODE XREF: NArchive::NCab::CInArcInfo::~CInArcInfo(void)+11p
.text:00000D74
.text:00000D74 var_10          = dword ptr -10h
.text:00000D74 var_C           = dword ptr -0Ch
.text:00000D74 var_4           = dword ptr -4
.text:00000D74
.text:00000D74                 push    ebp
.text:00000D75                 mov     ebp, esp
.text:00000D77                 push    0FFFFFFFFh
.text:00000D79                 push    offset __ehhandler$??1CArchInfo@NCab@NArchive@@QAE@XZ
.text:00000D7E                 mov     eax, large fs:0
.text:00000D84                 push    eax
.text:00000D85                 push    ecx
.text:00000D86                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000D8D                 mov     eax, dword ptr ds:___security_cookie
.text:00000D92                 xor     eax, ebp
.text:00000D94                 push    eax
.text:00000D95                 lea     eax, [ebp+var_C]
.text:00000D98                 mov     large fs:0, eax
.text:00000D9E                 mov     [ebp+var_10], ecx
.text:00000DA1                 mov     [ebp+var_4], 0
.text:00000DA8                 mov     ecx, [ebp+var_10]
.text:00000DAB                 add     ecx, 34h ; '4'  ; this
.text:00000DAE                 call    ??1COtherArc@NCab@NArchive@@QAE@XZ ; NArchive::NCab::COtherArc::~COtherArc(void)
.text:00000DB3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000DBA                 mov     ecx, [ebp+var_10]
.text:00000DBD                 add     ecx, 1Ch        ; this
.text:00000DC0                 call    ??1COtherArc@NCab@NArchive@@QAE@XZ ; NArchive::NCab::COtherArc::~COtherArc(void)
.text:00000DC5                 mov     ecx, [ebp+var_C]
.text:00000DC8                 mov     large fs:0, ecx
.text:00000DCF                 pop     ecx
.text:00000DD0                 add     esp, 10h
.text:00000DD3                 cmp     ebp, esp
.text:00000DD5                 call    __RTC_CheckEsp
.text:00000DDA                 mov     esp, ebp
.text:00000DDC                 pop     ebp
.text:00000DDD                 retn
.text:00000DDD ??1CArchInfo@NCab@NArchive@@QAE@XZ endp
.text:00000DDD
.text:00000DDD ; ---------------------------------------------------------------------------
.text:00000DDE                 align 10h
.text:00000DDE _text           ends
.text:00000DDE
.text$x:00000DE0 ; ===========================================================================
.text$x:00000DE0
.text$x:00000DE0 ; Segment type: Pure code
.text$x:00000DE0 ; Segment permissions: Read/Execute
.text$x:00000DE0 _text$x         segment para public 'CODE' use32
.text$x:00000DE0                 assume cs:_text$x
.text$x:00000DE0                 ;org 0DE0h
.text$x:00000DE0 ; COMDAT (pick associative to section at D74)
.text$x:00000DE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000DE0
.text$x:00000DE0 ; =============== S U B R O U T I N E =======================================
.text$x:00000DE0
.text$x:00000DE0
.text$x:00000DE0 __unwindfunclet$??1CArchInfo@NCab@NArchive@@QAE@XZ$0 proc near
.text$x:00000DE0                                         ; DATA XREF: .xdata$x:00000E0Co
.text$x:00000DE0                 mov     ecx, [ebp-10h]
.text$x:00000DE3                 add     ecx, 1Ch        ; this
.text$x:00000DE6                 jmp     ??1COtherArc@NCab@NArchive@@QAE@XZ ; NArchive::NCab::COtherArc::~COtherArc(void)
.text$x:00000DE6 __unwindfunclet$??1CArchInfo@NCab@NArchive@@QAE@XZ$0 endp
.text$x:00000DE6
.text$x:00000DEB
.text$x:00000DEB ; =============== S U B R O U T I N E =======================================
.text$x:00000DEB
.text$x:00000DEB
.text$x:00000DEB __ehhandler$??1CArchInfo@NCab@NArchive@@QAE@XZ proc near
.text$x:00000DEB                                         ; DATA XREF: NArchive::NCab::CArchInfo::~CArchInfo(void)+5o
.text$x:00000DEB
.text$x:00000DEB arg_4           = dword ptr  8
.text$x:00000DEB
.text$x:00000DEB                 mov     edx, [esp+arg_4]
.text$x:00000DEF                 lea     eax, [edx+0Ch]
.text$x:00000DF2                 mov     ecx, [edx-8]
.text$x:00000DF5                 xor     ecx, eax
.text$x:00000DF7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000DFC                 mov     eax, offset __ehfuncinfo$??1CArchInfo@NCab@NArchive@@QAE@XZ
.text$x:00000E01                 jmp     ___CxxFrameHandler3
.text$x:00000E01 __ehhandler$??1CArchInfo@NCab@NArchive@@QAE@XZ endp
.text$x:00000E01
.text$x:00000E01 ; ---------------------------------------------------------------------------
.text$x:00000E06                 align 4
.text$x:00000E06 _text$x         ends
.text$x:00000E06
.xdata$x:00000E08 ; ===========================================================================
.xdata$x:00000E08
.xdata$x:00000E08 ; Segment type: Pure data
.xdata$x:00000E08 ; Segment permissions: Read
.xdata$x:00000E08 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000E08                 assume cs:_xdata$x
.xdata$x:00000E08                 ;org 0E08h
.xdata$x:00000E08 ; COMDAT (pick associative to section at D74)
.xdata$x:00000E08 __unwindtable$??1CArchInfo@NCab@NArchive@@QAE@XZ db 0FFh
.xdata$x:00000E08                                         ; DATA XREF: .xdata$x:00000E18o
.xdata$x:00000E09                 db 0FFh
.xdata$x:00000E0A                 db 0FFh
.xdata$x:00000E0B                 db 0FFh
.xdata$x:00000E0C                 dd offset __unwindfunclet$??1CArchInfo@NCab@NArchive@@QAE@XZ$0
.xdata$x:00000E10 __ehfuncinfo$??1CArchInfo@NCab@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00000E10                                         ; DATA XREF: __ehhandler$??1CArchInfo@NCab@NArchive@@QAE@XZ+11o
.xdata$x:00000E11                 db    5
.xdata$x:00000E12                 db  93h ; ô
.xdata$x:00000E13                 db  19h
.xdata$x:00000E14                 db    1
.xdata$x:00000E15                 db    0
.xdata$x:00000E16                 db    0
.xdata$x:00000E17                 db    0
.xdata$x:00000E18                 dd offset __unwindtable$??1CArchInfo@NCab@NArchive@@QAE@XZ
.xdata$x:00000E1C                 db    0
.xdata$x:00000E1D                 db    0
.xdata$x:00000E1E                 db    0
.xdata$x:00000E1F                 db    0
.xdata$x:00000E20                 db    0
.xdata$x:00000E21                 db    0
.xdata$x:00000E22                 db    0
.xdata$x:00000E23                 db    0
.xdata$x:00000E24                 db    0
.xdata$x:00000E25                 db    0
.xdata$x:00000E26                 db    0
.xdata$x:00000E27                 db    0
.xdata$x:00000E28                 db    0
.xdata$x:00000E29                 db    0
.xdata$x:00000E2A                 db    0
.xdata$x:00000E2B                 db    0
.xdata$x:00000E2C                 db    0
.xdata$x:00000E2D                 db    0
.xdata$x:00000E2E                 db    0
.xdata$x:00000E2F                 db    0
.xdata$x:00000E30                 db    1
.xdata$x:00000E31                 db    0
.xdata$x:00000E32                 db    0
.xdata$x:00000E33                 db    0
.xdata$x:00000E33 _xdata$x        ends
.xdata$x:00000E33
.text:00000E34 ; ===========================================================================
.text:00000E34
.text:00000E34 ; Segment type: Pure code
.text:00000E34 ; Segment permissions: Read/Execute
.text:00000E34 _text           segment para public 'CODE' use32
.text:00000E34                 assume cs:_text
.text:00000E34                 ;org 0E34h
.text:00000E34 ; COMDAT (pick any)
.text:00000E34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E34
.text:00000E34 ; =============== S U B R O U T I N E =======================================
.text:00000E34
.text:00000E34 ; Attributes: bp-based frame
.text:00000E34
.text:00000E34 ; _DWORD __thiscall NArchive::NCab::COtherArc::~COtherArc(NArchive::NCab::COtherArc *__hidden this)
.text:00000E34                 public ??1COtherArc@NCab@NArchive@@QAE@XZ
.text:00000E34 ??1COtherArc@NCab@NArchive@@QAE@XZ proc near
.text:00000E34                                         ; CODE XREF: NArchive::NCab::CArchInfo::~CArchInfo(void)+3Ap
.text:00000E34                                         ; NArchive::NCab::CArchInfo::~CArchInfo(void)+4Cp ...
.text:00000E34
.text:00000E34 var_10          = dword ptr -10h
.text:00000E34 var_C           = dword ptr -0Ch
.text:00000E34 var_4           = dword ptr -4
.text:00000E34
.text:00000E34                 push    ebp
.text:00000E35                 mov     ebp, esp
.text:00000E37                 push    0FFFFFFFFh
.text:00000E39                 push    offset __ehhandler$??1COtherArc@NCab@NArchive@@QAE@XZ
.text:00000E3E                 mov     eax, large fs:0
.text:00000E44                 push    eax
.text:00000E45                 push    ecx
.text:00000E46                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000E4D                 mov     eax, dword ptr ds:___security_cookie
.text:00000E52                 xor     eax, ebp
.text:00000E54                 push    eax
.text:00000E55                 lea     eax, [ebp+var_C]
.text:00000E58                 mov     large fs:0, eax
.text:00000E5E                 mov     [ebp+var_10], ecx
.text:00000E61                 mov     [ebp+var_4], 0
.text:00000E68                 mov     ecx, [ebp+var_10]
.text:00000E6B                 add     ecx, 0Ch        ; this
.text:00000E6E                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000E73                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000E7A                 mov     ecx, [ebp+var_10] ; this
.text:00000E7D                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000E82                 mov     ecx, [ebp+var_C]
.text:00000E85                 mov     large fs:0, ecx
.text:00000E8C                 pop     ecx
.text:00000E8D                 add     esp, 10h
.text:00000E90                 cmp     ebp, esp
.text:00000E92                 call    __RTC_CheckEsp
.text:00000E97                 mov     esp, ebp
.text:00000E99                 pop     ebp
.text:00000E9A                 retn
.text:00000E9A ??1COtherArc@NCab@NArchive@@QAE@XZ endp
.text:00000E9A
.text:00000E9A ; ---------------------------------------------------------------------------
.text:00000E9B                 align 4
.text:00000E9B _text           ends
.text:00000E9B
.text$x:00000E9C ; ===========================================================================
.text$x:00000E9C
.text$x:00000E9C ; Segment type: Pure code
.text$x:00000E9C ; Segment permissions: Read/Execute
.text$x:00000E9C _text$x         segment para public 'CODE' use32
.text$x:00000E9C                 assume cs:_text$x
.text$x:00000E9C                 ;org 0E9Ch
.text$x:00000E9C ; COMDAT (pick associative to section at E34)
.text$x:00000E9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000E9C
.text$x:00000E9C ; =============== S U B R O U T I N E =======================================
.text$x:00000E9C
.text$x:00000E9C
.text$x:00000E9C __unwindfunclet$??1COtherArc@NCab@NArchive@@QAE@XZ$0 proc near
.text$x:00000E9C                                         ; DATA XREF: .xdata$x:00000EC4o
.text$x:00000E9C                 mov     ecx, [ebp-10h]  ; this
.text$x:00000E9F                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00000E9F __unwindfunclet$??1COtherArc@NCab@NArchive@@QAE@XZ$0 endp
.text$x:00000E9F
.text$x:00000EA4
.text$x:00000EA4 ; =============== S U B R O U T I N E =======================================
.text$x:00000EA4
.text$x:00000EA4
.text$x:00000EA4 __ehhandler$??1COtherArc@NCab@NArchive@@QAE@XZ proc near
.text$x:00000EA4                                         ; DATA XREF: NArchive::NCab::COtherArc::~COtherArc(void)+5o
.text$x:00000EA4
.text$x:00000EA4 arg_4           = dword ptr  8
.text$x:00000EA4
.text$x:00000EA4                 mov     edx, [esp+arg_4]
.text$x:00000EA8                 lea     eax, [edx+0Ch]
.text$x:00000EAB                 mov     ecx, [edx-8]
.text$x:00000EAE                 xor     ecx, eax
.text$x:00000EB0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000EB5                 mov     eax, offset __ehfuncinfo$??1COtherArc@NCab@NArchive@@QAE@XZ
.text$x:00000EBA                 jmp     ___CxxFrameHandler3
.text$x:00000EBA __ehhandler$??1COtherArc@NCab@NArchive@@QAE@XZ endp
.text$x:00000EBA
.text$x:00000EBA ; ---------------------------------------------------------------------------
.text$x:00000EBF                 align 10h
.text$x:00000EBF _text$x         ends
.text$x:00000EBF
.xdata$x:00000EC0 ; ===========================================================================
.xdata$x:00000EC0
.xdata$x:00000EC0 ; Segment type: Pure data
.xdata$x:00000EC0 ; Segment permissions: Read
.xdata$x:00000EC0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000EC0                 assume cs:_xdata$x
.xdata$x:00000EC0                 ;org 0EC0h
.xdata$x:00000EC0 ; COMDAT (pick associative to section at E34)
.xdata$x:00000EC0 __unwindtable$??1COtherArc@NCab@NArchive@@QAE@XZ db 0FFh
.xdata$x:00000EC0                                         ; DATA XREF: .xdata$x:00000ED0o
.xdata$x:00000EC1                 db 0FFh
.xdata$x:00000EC2                 db 0FFh
.xdata$x:00000EC3                 db 0FFh
.xdata$x:00000EC4                 dd offset __unwindfunclet$??1COtherArc@NCab@NArchive@@QAE@XZ$0
.xdata$x:00000EC8 __ehfuncinfo$??1COtherArc@NCab@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00000EC8                                         ; DATA XREF: __ehhandler$??1COtherArc@NCab@NArchive@@QAE@XZ+11o
.xdata$x:00000EC9                 db    5
.xdata$x:00000ECA                 db  93h ; ô
.xdata$x:00000ECB                 db  19h
.xdata$x:00000ECC                 db    1
.xdata$x:00000ECD                 db    0
.xdata$x:00000ECE                 db    0
.xdata$x:00000ECF                 db    0
.xdata$x:00000ED0                 dd offset __unwindtable$??1COtherArc@NCab@NArchive@@QAE@XZ
.xdata$x:00000ED4                 db    0
.xdata$x:00000ED5                 db    0
.xdata$x:00000ED6                 db    0
.xdata$x:00000ED7                 db    0
.xdata$x:00000ED8                 db    0
.xdata$x:00000ED9                 db    0
.xdata$x:00000EDA                 db    0
.xdata$x:00000EDB                 db    0
.xdata$x:00000EDC                 db    0
.xdata$x:00000EDD                 db    0
.xdata$x:00000EDE                 db    0
.xdata$x:00000EDF                 db    0
.xdata$x:00000EE0                 db    0
.xdata$x:00000EE1                 db    0
.xdata$x:00000EE2                 db    0
.xdata$x:00000EE3                 db    0
.xdata$x:00000EE4                 db    0
.xdata$x:00000EE5                 db    0
.xdata$x:00000EE6                 db    0
.xdata$x:00000EE7                 db    0
.xdata$x:00000EE8                 db    1
.xdata$x:00000EE9                 db    0
.xdata$x:00000EEA                 db    0
.xdata$x:00000EEB                 db    0
.xdata$x:00000EEB _xdata$x        ends
.xdata$x:00000EEB
.text:00000EEC ; ===========================================================================
.text:00000EEC
.text:00000EEC ; Segment type: Pure code
.text:00000EEC ; Segment permissions: Read/Execute
.text:00000EEC _text           segment para public 'CODE' use32
.text:00000EEC                 assume cs:_text
.text:00000EEC                 ;org 0EECh
.text:00000EEC ; COMDAT (pick any)
.text:00000EEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000EEC
.text:00000EEC ; =============== S U B R O U T I N E =======================================
.text:00000EEC
.text:00000EEC ; Attributes: bp-based frame
.text:00000EEC
.text:00000EEC ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00000EEC                 public ??1AString@@QAE@XZ
.text:00000EEC ??1AString@@QAE@XZ proc near            ; CODE XREF: NArchive::NCab::COtherArc::~COtherArc(void)+3Ap
.text:00000EEC                                         ; NArchive::NCab::COtherArc::~COtherArc(void)+49p ...
.text:00000EEC
.text:00000EEC var_8           = dword ptr -8
.text:00000EEC var_4           = dword ptr -4
.text:00000EEC
.text:00000EEC                 push    ebp
.text:00000EED                 mov     ebp, esp
.text:00000EEF                 sub     esp, 8
.text:00000EF2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000EF9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F00                 mov     [ebp+var_4], ecx
.text:00000F03                 mov     eax, [ebp+var_4]
.text:00000F06                 mov     ecx, [eax]
.text:00000F08                 mov     [ebp+var_8], ecx
.text:00000F0B                 mov     edx, [ebp+var_8]
.text:00000F0E                 push    edx             ; void *
.text:00000F0F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000F14                 add     esp, 4
.text:00000F17                 add     esp, 8
.text:00000F1A                 cmp     ebp, esp
.text:00000F1C                 call    __RTC_CheckEsp
.text:00000F21                 mov     esp, ebp
.text:00000F23                 pop     ebp
.text:00000F24                 retn
.text:00000F24 ??1AString@@QAE@XZ endp
.text:00000F24
.text:00000F24 ; ---------------------------------------------------------------------------
.text:00000F25                 align 4
.text:00000F25 _text           ends
.text:00000F25
.text:00000F28 ; ===========================================================================
.text:00000F28
.text:00000F28 ; Segment type: Pure code
.text:00000F28 ; Segment permissions: Read/Execute
.text:00000F28 _text           segment para public 'CODE' use32
.text:00000F28                 assume cs:_text
.text:00000F28                 ;org 0F28h
.text:00000F28 ; COMDAT (pick any)
.text:00000F28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F28
.text:00000F28 ; =============== S U B R O U T I N E =======================================
.text:00000F28
.text:00000F28 ; Attributes: bp-based frame
.text:00000F28
.text:00000F28 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:00000F28                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:00000F28 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:00000F28                                         ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::CObjectVector<NArchive::NCab::CDatabaseEx>(void)+11p
.text:00000F28
.text:00000F28 var_4           = dword ptr -4
.text:00000F28
.text:00000F28                 push    ebp
.text:00000F29                 mov     ebp, esp
.text:00000F2B                 push    ecx
.text:00000F2C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F33                 mov     [ebp+var_4], ecx
.text:00000F36                 mov     eax, [ebp+var_4]
.text:00000F39                 mov     dword ptr [eax], 0
.text:00000F3F                 mov     ecx, [ebp+var_4]
.text:00000F42                 mov     dword ptr [ecx+4], 0
.text:00000F49                 mov     edx, [ebp+var_4]
.text:00000F4C                 mov     dword ptr [edx+8], 0
.text:00000F53                 mov     eax, [ebp+var_4]
.text:00000F56                 mov     esp, ebp
.text:00000F58                 pop     ebp
.text:00000F59                 retn
.text:00000F59 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:00000F59
.text:00000F59 ; ---------------------------------------------------------------------------
.text:00000F5A                 align 4
.text:00000F5A _text           ends
.text:00000F5A
.text:00000F5C ; ===========================================================================
.text:00000F5C
.text:00000F5C ; Segment type: Pure code
.text:00000F5C ; Segment permissions: Read/Execute
.text:00000F5C _text           segment para public 'CODE' use32
.text:00000F5C                 assume cs:_text
.text:00000F5C                 ;org 0F5Ch
.text:00000F5C ; COMDAT (pick any)
.text:00000F5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F5C
.text:00000F5C ; =============== S U B R O U T I N E =======================================
.text:00000F5C
.text:00000F5C ; Attributes: bp-based frame
.text:00000F5C
.text:00000F5C ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00000F5C                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00000F5C ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00000F5C                                         ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::~CObjectVector<NArchive::NCab::CDatabaseEx>(void)+46p
.text:00000F5C                                         ; CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)+46p
.text:00000F5C
.text:00000F5C var_4           = dword ptr -4
.text:00000F5C
.text:00000F5C                 push    ebp
.text:00000F5D                 mov     ebp, esp
.text:00000F5F                 push    ecx
.text:00000F60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F67                 mov     [ebp+var_4], ecx
.text:00000F6A                 mov     eax, [ebp+var_4]
.text:00000F6D                 mov     eax, [eax+4]
.text:00000F70                 mov     esp, ebp
.text:00000F72                 pop     ebp
.text:00000F73                 retn
.text:00000F73 ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:00000F73
.text:00000F73 _text           ends
.text:00000F73
.text:00000F74 ; ===========================================================================
.text:00000F74
.text:00000F74 ; Segment type: Pure code
.text:00000F74 ; Segment permissions: Read/Execute
.text:00000F74 _text           segment para public 'CODE' use32
.text:00000F74                 assume cs:_text
.text:00000F74                 ;org 0F74h
.text:00000F74 ; COMDAT (pick any)
.text:00000F74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F74
.text:00000F74 ; =============== S U B R O U T I N E =======================================
.text:00000F74
.text:00000F74 ; Attributes: bp-based frame
.text:00000F74
.text:00000F74 ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00000F74                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:00000F74 ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:00000F74                                         ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::~CObjectVector<NArchive::NCab::CDatabaseEx>(void)+9Cp
.text:00000F74                                         ; __unwindfunclet$??1?$CObjectVector@UCDatabaseEx@NCab@NArchive@@@@QAE@XZ$0+3j ...
.text:00000F74
.text:00000F74 var_8           = dword ptr -8
.text:00000F74 var_4           = dword ptr -4
.text:00000F74
.text:00000F74                 push    ebp
.text:00000F75                 mov     ebp, esp
.text:00000F77                 sub     esp, 8
.text:00000F7A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000F81                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F88                 mov     [ebp+var_4], ecx
.text:00000F8B                 mov     eax, [ebp+var_4]
.text:00000F8E                 mov     ecx, [eax]
.text:00000F90                 mov     [ebp+var_8], ecx
.text:00000F93                 mov     edx, [ebp+var_8]
.text:00000F96                 push    edx             ; void *
.text:00000F97                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000F9C                 add     esp, 4
.text:00000F9F                 add     esp, 8
.text:00000FA2                 cmp     ebp, esp
.text:00000FA4                 call    __RTC_CheckEsp
.text:00000FA9                 mov     esp, ebp
.text:00000FAB                 pop     ebp
.text:00000FAC                 retn
.text:00000FAC ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:00000FAC
.text:00000FAC ; ---------------------------------------------------------------------------
.text:00000FAD                 align 10h
.text:00000FAD _text           ends
.text:00000FAD
.text:00000FB0 ; ===========================================================================
.text:00000FB0
.text:00000FB0 ; Segment type: Pure code
.text:00000FB0 ; Segment permissions: Read/Execute
.text:00000FB0 _text           segment para public 'CODE' use32
.text:00000FB0                 assume cs:_text
.text:00000FB0                 ;org 0FB0h
.text:00000FB0 ; COMDAT (pick any)
.text:00000FB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000FB0
.text:00000FB0 ; =============== S U B R O U T I N E =======================================
.text:00000FB0
.text:00000FB0 ; Attributes: bp-based frame
.text:00000FB0
.text:00000FB0 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00000FB0                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00000FB0 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00000FB0                                         ; CODE XREF: CObjectVector<NArchive::NCab::CDatabaseEx>::~CObjectVector<NArchive::NCab::CDatabaseEx>(void)+64p
.text:00000FB0                                         ; CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)+64p
.text:00000FB0
.text:00000FB0 var_4           = dword ptr -4
.text:00000FB0 arg_0           = dword ptr  8
.text:00000FB0
.text:00000FB0                 push    ebp
.text:00000FB1                 mov     ebp, esp
.text:00000FB3                 push    ecx
.text:00000FB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000FBB                 mov     [ebp+var_4], ecx
.text:00000FBE                 mov     eax, [ebp+var_4]
.text:00000FC1                 mov     ecx, [eax]
.text:00000FC3                 mov     edx, [ebp+arg_0]
.text:00000FC6                 lea     eax, [ecx+edx*4]
.text:00000FC9                 mov     esp, ebp
.text:00000FCB                 pop     ebp
.text:00000FCC                 retn    4
.text:00000FCC ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:00000FCC
.text:00000FCC ; ---------------------------------------------------------------------------
.text:00000FCF                 align 10h
.text:00000FCF _text           ends
.text:00000FCF
.text:00000FD0 ; ===========================================================================
.text:00000FD0
.text:00000FD0 ; Segment type: Pure code
.text:00000FD0 ; Segment permissions: Read/Execute
.text:00000FD0 _text           segment para public 'CODE' use32
.text:00000FD0                 assume cs:_text
.text:00000FD0                 ;org 0FD0h
.text:00000FD0 ; COMDAT (pick any)
.text:00000FD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000FD0
.text:00000FD0 ; =============== S U B R O U T I N E =======================================
.text:00000FD0
.text:00000FD0 ; Attributes: bp-based frame
.text:00000FD0
.text:00000FD0 ; public: __thiscall CRecordVector<struct NArchive::NCab::CFolder>::~CRecordVector<struct NArchive::NCab::CFolder>(void)
.text:00000FD0                 public ??1?$CRecordVector@UCFolder@NCab@NArchive@@@@QAE@XZ
.text:00000FD0 ??1?$CRecordVector@UCFolder@NCab@NArchive@@@@QAE@XZ proc near
.text:00000FD0                                         ; CODE XREF: NArchive::NCab::CDatabase::~CDatabase(void)+58p
.text:00000FD0                                         ; __unwindfunclet$??1CDatabase@NCab@NArchive@@QAE@XZ$0+3j
.text:00000FD0
.text:00000FD0 var_8           = dword ptr -8
.text:00000FD0 var_4           = dword ptr -4
.text:00000FD0
.text:00000FD0                 push    ebp
.text:00000FD1                 mov     ebp, esp
.text:00000FD3                 sub     esp, 8
.text:00000FD6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000FDD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000FE4                 mov     [ebp+var_4], ecx
.text:00000FE7                 mov     eax, [ebp+var_4]
.text:00000FEA                 mov     ecx, [eax]
.text:00000FEC                 mov     [ebp+var_8], ecx
.text:00000FEF                 mov     edx, [ebp+var_8]
.text:00000FF2                 push    edx             ; void *
.text:00000FF3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000FF8                 add     esp, 4
.text:00000FFB                 add     esp, 8
.text:00000FFE                 cmp     ebp, esp
.text:00001000                 call    __RTC_CheckEsp
.text:00001005                 mov     esp, ebp
.text:00001007                 pop     ebp
.text:00001008                 retn
.text:00001008 ??1?$CRecordVector@UCFolder@NCab@NArchive@@@@QAE@XZ endp
.text:00001008
.text:00001008 ; ---------------------------------------------------------------------------
.text:00001009                 align 4
.text:00001009 _text           ends
.text:00001009
.text:0000100C ; ===========================================================================
.text:0000100C
.text:0000100C ; Segment type: Pure code
.text:0000100C ; Segment permissions: Read/Execute
.text:0000100C _text           segment para public 'CODE' use32
.text:0000100C                 assume cs:_text
.text:0000100C                 ;org 100Ch
.text:0000100C ; COMDAT (pick any)
.text:0000100C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000100C
.text:0000100C ; =============== S U B R O U T I N E =======================================
.text:0000100C
.text:0000100C ; Attributes: bp-based frame
.text:0000100C
.text:0000100C ; public: __thiscall CObjectVector<struct NArchive::NCab::CItem>::~CObjectVector<struct NArchive::NCab::CItem>(void)
.text:0000100C                 public ??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ
.text:0000100C ??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ proc near
.text:0000100C                                         ; CODE XREF: NArchive::NCab::CDatabase::~CDatabase(void)+49p
.text:0000100C                                         ; __unwindfunclet$??1CDatabase@NCab@NArchive@@QAE@XZ$1+6j
.text:0000100C
.text:0000100C var_20          = dword ptr -20h
.text:0000100C var_1C          = dword ptr -1Ch
.text:0000100C var_18          = dword ptr -18h
.text:0000100C var_14          = dword ptr -14h
.text:0000100C var_10          = dword ptr -10h
.text:0000100C var_C           = dword ptr -0Ch
.text:0000100C var_4           = dword ptr -4
.text:0000100C
.text:0000100C                 push    ebp
.text:0000100D                 mov     ebp, esp
.text:0000100F                 push    0FFFFFFFFh
.text:00001011                 push    offset __ehhandler$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ
.text:00001016                 mov     eax, large fs:0
.text:0000101C                 push    eax
.text:0000101D                 sub     esp, 14h
.text:00001020                 mov     eax, 0CCCCCCCCh
.text:00001025                 mov     [ebp+var_20], eax
.text:00001028                 mov     [ebp+var_1C], eax
.text:0000102B                 mov     [ebp+var_18], eax
.text:0000102E                 mov     [ebp+var_14], eax
.text:00001031                 mov     [ebp+var_10], eax
.text:00001034                 mov     eax, dword ptr ds:___security_cookie
.text:00001039                 xor     eax, ebp
.text:0000103B                 push    eax
.text:0000103C                 lea     eax, [ebp+var_C]
.text:0000103F                 mov     large fs:0, eax
.text:00001045                 mov     [ebp+var_10], ecx
.text:00001048                 mov     [ebp+var_4], 0
.text:0000104F                 mov     ecx, [ebp+var_10]
.text:00001052                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00001057                 mov     [ebp+var_14], eax
.text:0000105A
.text:0000105A loc_105A:                               ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void):loc_109Cj
.text:0000105A                 cmp     [ebp+var_14], 0
.text:0000105E                 jz      short loc_109E
.text:00001060                 mov     eax, [ebp+var_14]
.text:00001063                 sub     eax, 1
.text:00001066                 mov     [ebp+var_14], eax
.text:00001069                 mov     ecx, [ebp+var_14]
.text:0000106C                 push    ecx
.text:0000106D                 mov     ecx, [ebp+var_10]
.text:00001070                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00001075                 mov     edx, [eax]
.text:00001077                 mov     [ebp+var_1C], edx
.text:0000107A                 mov     eax, [ebp+var_1C]
.text:0000107D                 mov     [ebp+var_18], eax
.text:00001080                 cmp     [ebp+var_18], 0
.text:00001084                 jz      short loc_1095
.text:00001086                 push    1
.text:00001088                 mov     ecx, [ebp+var_18]
.text:0000108B                 call    ??_GCItem@NCab@NArchive@@QAEPAXI@Z ; NArchive::NCab::CItem::`scalar deleting destructor'(uint)
.text:00001090                 mov     [ebp+var_20], eax
.text:00001093                 jmp     short loc_109C
.text:00001095 ; ---------------------------------------------------------------------------
.text:00001095
.text:00001095 loc_1095:                               ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)+78j
.text:00001095                 mov     [ebp+var_20], 0
.text:0000109C
.text:0000109C loc_109C:                               ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)+87j
.text:0000109C                 jmp     short loc_105A
.text:0000109E ; ---------------------------------------------------------------------------
.text:0000109E
.text:0000109E loc_109E:                               ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)+52j
.text:0000109E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000010A5                 mov     ecx, [ebp+var_10]
.text:000010A8                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000010AD                 mov     ecx, [ebp+var_C]
.text:000010B0                 mov     large fs:0, ecx
.text:000010B7                 pop     ecx
.text:000010B8                 add     esp, 20h
.text:000010BB                 cmp     ebp, esp
.text:000010BD                 call    __RTC_CheckEsp
.text:000010C2                 mov     esp, ebp
.text:000010C4                 pop     ebp
.text:000010C5                 retn
.text:000010C5 ??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ endp
.text:000010C5
.text:000010C5 ; ---------------------------------------------------------------------------
.text:000010C6                 align 4
.text:000010C6 _text           ends
.text:000010C6
.text$x:000010C8 ; ===========================================================================
.text$x:000010C8
.text$x:000010C8 ; Segment type: Pure code
.text$x:000010C8 ; Segment permissions: Read/Execute
.text$x:000010C8 _text$x         segment para public 'CODE' use32
.text$x:000010C8                 assume cs:_text$x
.text$x:000010C8                 ;org 10C8h
.text$x:000010C8 ; COMDAT (pick associative to section at 100C)
.text$x:000010C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000010C8
.text$x:000010C8 ; =============== S U B R O U T I N E =======================================
.text$x:000010C8
.text$x:000010C8
.text$x:000010C8 __unwindfunclet$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ$0 proc near
.text$x:000010C8                                         ; DATA XREF: .xdata$x:000010F0o
.text$x:000010C8                 mov     ecx, [ebp-10h]
.text$x:000010CB                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:000010CB __unwindfunclet$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ$0 endp
.text$x:000010CB
.text$x:000010D0
.text$x:000010D0 ; =============== S U B R O U T I N E =======================================
.text$x:000010D0
.text$x:000010D0
.text$x:000010D0 __ehhandler$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ proc near
.text$x:000010D0                                         ; DATA XREF: CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)+5o
.text$x:000010D0
.text$x:000010D0 arg_4           = dword ptr  8
.text$x:000010D0
.text$x:000010D0                 mov     edx, [esp+arg_4]
.text$x:000010D4                 lea     eax, [edx+0Ch]
.text$x:000010D7                 mov     ecx, [edx-18h]
.text$x:000010DA                 xor     ecx, eax
.text$x:000010DC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000010E1                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ
.text$x:000010E6                 jmp     ___CxxFrameHandler3
.text$x:000010E6 __ehhandler$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ endp
.text$x:000010E6
.text$x:000010E6 ; ---------------------------------------------------------------------------
.text$x:000010EB                 align 4
.text$x:000010EB _text$x         ends
.text$x:000010EB
.xdata$x:000010EC ; ===========================================================================
.xdata$x:000010EC
.xdata$x:000010EC ; Segment type: Pure data
.xdata$x:000010EC ; Segment permissions: Read
.xdata$x:000010EC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000010EC                 assume cs:_xdata$x
.xdata$x:000010EC                 ;org 10ECh
.xdata$x:000010EC ; COMDAT (pick associative to section at 100C)
.xdata$x:000010EC __unwindtable$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:000010EC                                         ; DATA XREF: .xdata$x:000010FCo
.xdata$x:000010ED                 db 0FFh
.xdata$x:000010EE                 db 0FFh
.xdata$x:000010EF                 db 0FFh
.xdata$x:000010F0                 dd offset __unwindfunclet$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ$0
.xdata$x:000010F4 __ehfuncinfo$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:000010F4                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ+11o
.xdata$x:000010F5                 db    5
.xdata$x:000010F6                 db  93h ; ô
.xdata$x:000010F7                 db  19h
.xdata$x:000010F8                 db    1
.xdata$x:000010F9                 db    0
.xdata$x:000010FA                 db    0
.xdata$x:000010FB                 db    0
.xdata$x:000010FC                 dd offset __unwindtable$??1?$CObjectVector@UCItem@NCab@NArchive@@@@QAE@XZ
.xdata$x:00001100                 db    0
.xdata$x:00001101                 db    0
.xdata$x:00001102                 db    0
.xdata$x:00001103                 db    0
.xdata$x:00001104                 db    0
.xdata$x:00001105                 db    0
.xdata$x:00001106                 db    0
.xdata$x:00001107                 db    0
.xdata$x:00001108                 db    0
.xdata$x:00001109                 db    0
.xdata$x:0000110A                 db    0
.xdata$x:0000110B                 db    0
.xdata$x:0000110C                 db    0
.xdata$x:0000110D                 db    0
.xdata$x:0000110E                 db    0
.xdata$x:0000110F                 db    0
.xdata$x:00001110                 db    0
.xdata$x:00001111                 db    0
.xdata$x:00001112                 db    0
.xdata$x:00001113                 db    0
.xdata$x:00001114                 db    1
.xdata$x:00001115                 db    0
.xdata$x:00001116                 db    0
.xdata$x:00001117                 db    0
.xdata$x:00001117 _xdata$x        ends
.xdata$x:00001117
.text:00001118 ; ===========================================================================
.text:00001118
.text:00001118 ; Segment type: Pure code
.text:00001118 ; Segment permissions: Read/Execute
.text:00001118 _text           segment para public 'CODE' use32
.text:00001118                 assume cs:_text
.text:00001118                 ;org 1118h
.text:00001118 ; COMDAT (pick any)
.text:00001118                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001118
.text:00001118 ; =============== S U B R O U T I N E =======================================
.text:00001118
.text:00001118 ; Attributes: bp-based frame
.text:00001118
.text:00001118 ; public: void * __thiscall NArchive::NCab::CItem::`scalar deleting destructor'(unsigned int)
.text:00001118                 public ??_GCItem@NCab@NArchive@@QAEPAXI@Z
.text:00001118 ??_GCItem@NCab@NArchive@@QAEPAXI@Z proc near
.text:00001118                                         ; CODE XREF: CObjectVector<NArchive::NCab::CItem>::~CObjectVector<NArchive::NCab::CItem>(void)+7Fp
.text:00001118
.text:00001118 var_4           = dword ptr -4
.text:00001118 arg_0           = dword ptr  8
.text:00001118
.text:00001118                 push    ebp
.text:00001119                 mov     ebp, esp
.text:0000111B                 push    ecx
.text:0000111C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001123                 mov     [ebp+var_4], ecx
.text:00001126                 mov     ecx, [ebp+var_4] ; this
.text:00001129                 call    ??1CItem@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CItem::~CItem(void)
.text:0000112E                 mov     eax, [ebp+arg_0]
.text:00001131                 and     eax, 1
.text:00001134                 jz      short loc_1142
.text:00001136                 mov     ecx, [ebp+var_4]
.text:00001139                 push    ecx             ; void *
.text:0000113A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000113F                 add     esp, 4
.text:00001142
.text:00001142 loc_1142:                               ; CODE XREF: NArchive::NCab::CItem::`scalar deleting destructor'(uint)+1Cj
.text:00001142                 mov     eax, [ebp+var_4]
.text:00001145                 add     esp, 4
.text:00001148                 cmp     ebp, esp
.text:0000114A                 call    __RTC_CheckEsp
.text:0000114F                 mov     esp, ebp
.text:00001151                 pop     ebp
.text:00001152                 retn    4
.text:00001152 ??_GCItem@NCab@NArchive@@QAEPAXI@Z endp
.text:00001152
.text:00001152 ; ---------------------------------------------------------------------------
.text:00001155                 align 4
.text:00001155 _text           ends
.text:00001155
.text:00001158 ; ===========================================================================
.text:00001158
.text:00001158 ; Segment type: Pure code
.text:00001158 ; Segment permissions: Read/Execute
.text:00001158 _text           segment para public 'CODE' use32
.text:00001158                 assume cs:_text
.text:00001158                 ;org 1158h
.text:00001158 ; COMDAT (pick any)
.text:00001158                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001158
.text:00001158 ; =============== S U B R O U T I N E =======================================
.text:00001158
.text:00001158 ; Attributes: bp-based frame
.text:00001158
.text:00001158 ; _DWORD __thiscall NArchive::NCab::CItem::~CItem(NArchive::NCab::CItem *__hidden this)
.text:00001158                 public ??1CItem@NCab@NArchive@@QAE@XZ
.text:00001158 ??1CItem@NCab@NArchive@@QAE@XZ proc near
.text:00001158                                         ; CODE XREF: NArchive::NCab::CItem::`scalar deleting destructor'(uint)+11p
.text:00001158
.text:00001158 var_4           = dword ptr -4
.text:00001158
.text:00001158                 push    ebp
.text:00001159                 mov     ebp, esp
.text:0000115B                 push    ecx
.text:0000115C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001163                 mov     [ebp+var_4], ecx
.text:00001166                 mov     ecx, [ebp+var_4] ; this
.text:00001169                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000116E                 add     esp, 4
.text:00001171                 cmp     ebp, esp
.text:00001173                 call    __RTC_CheckEsp
.text:00001178                 mov     esp, ebp
.text:0000117A                 pop     ebp
.text:0000117B                 retn
.text:0000117B ??1CItem@NCab@NArchive@@QAE@XZ endp
.text:0000117B
.text:0000117B _text           ends
.text:0000117B
.text:0000117C ; ===========================================================================
.text:0000117C
.text:0000117C ; Segment type: Pure code
.text:0000117C ; Segment permissions: Read/Execute
.text:0000117C _text           segment para public 'CODE' use32
.text:0000117C                 assume cs:_text
.text:0000117C                 ;org 117Ch
.text:0000117C ; COMDAT (pick any)
.text:0000117C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000117C
.text:0000117C ; =============== S U B R O U T I N E =======================================
.text:0000117C
.text:0000117C ; Attributes: bp-based frame
.text:0000117C
.text:0000117C ; public: __thiscall CMyComPtr<struct IInStream>::~CMyComPtr<struct IInStream>(void)
.text:0000117C                 public ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:0000117C ??1?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:0000117C                                         ; CODE XREF: NArchive::NCab::CDatabaseEx::~CDatabaseEx(void)+3Ap
.text:0000117C
.text:0000117C var_4           = dword ptr -4
.text:0000117C
.text:0000117C                 push    ebp
.text:0000117D                 mov     ebp, esp
.text:0000117F                 push    ecx
.text:00001180                 push    esi
.text:00001181                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001188                 mov     [ebp+var_4], ecx
.text:0000118B                 mov     eax, [ebp+var_4]
.text:0000118E                 cmp     dword ptr [eax], 0
.text:00001191                 jz      short loc_11AE
.text:00001193                 mov     ecx, [ebp+var_4]
.text:00001196                 mov     edx, [ecx]
.text:00001198                 mov     eax, [ebp+var_4]
.text:0000119B                 mov     ecx, [eax]
.text:0000119D                 mov     edx, [edx]
.text:0000119F                 mov     esi, esp
.text:000011A1                 push    ecx
.text:000011A2                 mov     eax, [edx+8]
.text:000011A5                 call    eax
.text:000011A7                 cmp     esi, esp
.text:000011A9                 call    __RTC_CheckEsp
.text:000011AE
.text:000011AE loc_11AE:                               ; CODE XREF: CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)+15j
.text:000011AE                 pop     esi
.text:000011AF                 add     esp, 4
.text:000011B2                 cmp     ebp, esp
.text:000011B4                 call    __RTC_CheckEsp
.text:000011B9                 mov     esp, ebp
.text:000011BB                 pop     ebp
.text:000011BC                 retn
.text:000011BC ??1?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:000011BC
.text:000011BC ; ---------------------------------------------------------------------------
.text:000011BD                 align 10h
.text:000011BD _text           ends
.text:000011BD
.text$yc:000011C0 ; ===========================================================================
.text$yc:000011C0
.text$yc:000011C0 ; Segment type: Pure code
.text$yc:000011C0 ; Segment permissions: Read/Execute
.text$yc:000011C0 _text$yc        segment para public 'CODE' use32
.text$yc:000011C0                 assume cs:_text$yc
.text$yc:000011C0                 ;org 11C0h
.text$yc:000011C0 ; COMDAT (pick any)
.text$yc:000011C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:000011C0
.text$yc:000011C0 ; =============== S U B R O U T I N E =======================================
.text$yc:000011C0
.text$yc:000011C0 ; Attributes: bp-based frame
.text$yc:000011C0
.text$yc:000011C0 ; void __cdecl NArchive::NCab::`dynamic initializer for 'g_RegisterArc''(void)
.text$yc:000011C0 ??__Eg_RegisterArc@NCab@NArchive@@YAXXZ proc near
.text$yc:000011C0                                         ; DATA XREF: .CRT$XCU:_g_RegisterArc$initializer$o
.text$yc:000011C0                 push    ebp
.text$yc:000011C1                 mov     ebp, esp
.text$yc:000011C3                 mov     ecx, offset _g_RegisterArc ; this
.text$yc:000011C8                 call    ??0CRegisterArc@NCab@NArchive@@QAE@XZ ; NArchive::NCab::CRegisterArc::CRegisterArc(void)
.text$yc:000011CD                 cmp     ebp, esp
.text$yc:000011CF                 call    __RTC_CheckEsp
.text$yc:000011D4                 pop     ebp
.text$yc:000011D5                 retn
.text$yc:000011D5 ??__Eg_RegisterArc@NCab@NArchive@@YAXXZ endp
.text$yc:000011D5
.text$yc:000011D5 ; ---------------------------------------------------------------------------
.text$yc:000011D6                 align 4
.text$yc:000011D6 _text$yc        ends
.text$yc:000011D6
.text:000011D8 ; ===========================================================================
.text:000011D8
.text:000011D8 ; Segment type: Pure code
.text:000011D8 ; Segment permissions: Read/Execute
.text:000011D8 _text           segment para public 'CODE' use32
.text:000011D8                 assume cs:_text
.text:000011D8                 ;org 11D8h
.text:000011D8 ; COMDAT (pick any)
.text:000011D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000011D8
.text:000011D8 ; =============== S U B R O U T I N E =======================================
.text:000011D8
.text:000011D8 ; Attributes: bp-based frame
.text:000011D8
.text:000011D8 ; _DWORD __thiscall NArchive::NCab::CRegisterArc::CRegisterArc(NArchive::NCab::CRegisterArc *__hidden this)
.text:000011D8                 public ??0CRegisterArc@NCab@NArchive@@QAE@XZ
.text:000011D8 ??0CRegisterArc@NCab@NArchive@@QAE@XZ proc near
.text:000011D8                                         ; CODE XREF: NArchive::NCab::`dynamic initializer for 'g_RegisterArc''(void)+8p
.text:000011D8
.text:000011D8 var_4           = dword ptr -4
.text:000011D8
.text:000011D8                 push    ebp
.text:000011D9                 mov     ebp, esp
.text:000011DB                 push    ecx
.text:000011DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011E3                 mov     [ebp+var_4], ecx
.text:000011E6                 push    offset _g_ArcInfo ; struct CArcInfo *
.text:000011EB                 call    ?RegisterArc@@YGXPBUCArcInfo@@@Z ; RegisterArc(CArcInfo const *)
.text:000011F0                 mov     eax, [ebp+var_4]
.text:000011F3                 add     esp, 4
.text:000011F6                 cmp     ebp, esp
.text:000011F8                 call    __RTC_CheckEsp
.text:000011FD                 mov     esp, ebp
.text:000011FF                 pop     ebp
.text:00001200                 retn
.text:00001200 ??0CRegisterArc@NCab@NArchive@@QAE@XZ endp
.text:00001200
.text:00001200 ; ---------------------------------------------------------------------------
.text:00001201                 align 4
.text:00001201 _text           ends
.text:00001201
.bss:00001204 ; ===========================================================================
.bss:00001204
.bss:00001204 ; Segment type: Uninitialized
.bss:00001204 ; Segment permissions: Read/Write
.bss:00001204 _bss            segment byte public 'BSS' use32
.bss:00001204                 assume cs:_bss
.bss:00001204                 ;org 1204h
.bss:00001204                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00001204 ; NArchive::NCab::CRegisterArc g_RegisterArc
.bss:00001204 _g_RegisterArc  db    ? ;               ; DATA XREF: NArchive::NCab::`dynamic initializer for 'g_RegisterArc''(void)+3o
.bss:00001205                 align 4
.bss:00001205 _bss            ends
.bss:00001205
.CRT$XCU:00001208 ; ===========================================================================
.CRT$XCU:00001208
.CRT$XCU:00001208 ; Segment type: Pure data
.CRT$XCU:00001208 ; Segment permissions: Read
.CRT$XCU:00001208 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00001208                 assume cs:_CRT$XCU
.CRT$XCU:00001208                 ;org 1208h
.CRT$XCU:00001208 _g_RegisterArc$initializer$ dd offset ??__Eg_RegisterArc@NCab@NArchive@@YAXXZ ; NArchive::NCab::`dynamic initializer for 'g_RegisterArc''(void)
.CRT$XCU:00001208 _CRT$XCU        ends
.CRT$XCU:00001208
UNDEF:00001210 ; ===========================================================================
UNDEF:00001210
UNDEF:00001210 ; Segment type: Externs
UNDEF:00001210 ; UNDEF
UNDEF:00001210 ; unsigned char const * const NArchive::NCab::NHeader::kMarker
UNDEF:00001210                 extrn ?kMarker@NHeader@NCab@NArchive@@3QBEB:near
UNDEF:00001210                                         ; DATA XREF: .rdata:00000010o
UNDEF:00001214 ; void __cdecl operator delete(void *)
UNDEF:00001214                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?CreateArc@NCab@NArchive@@YGPAUIInArchive@@XZ$0+4p
UNDEF:00001214                                         ; NArchive::NCab::CHandler::`scalar deleting destructor'(uint)+22p ...
UNDEF:00001218 ; void *__cdecl operator new(unsigned int)
UNDEF:00001218                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::NCab::CreateArc(void)+3Cp
UNDEF:0000121C                 extrn ___security_cookie:near
UNDEF:0000121C                                         ; DATA XREF: NArchive::NCab::CreateArc(void)+29r
UNDEF:0000121C                                         ; NArchive::NCab::CHandler::CHandler(void)+19r ...
UNDEF:00001220                 extrn ___CxxFrameHandler3:near
UNDEF:00001220                                         ; CODE XREF: __ehhandler$?CreateArc@NCab@NArchive@@YGPAUIInArchive@@XZ+16j
UNDEF:00001220                                         ; __ehhandler$??0CHandler@NCab@NArchive@@QAE@XZ+16j ...
UNDEF:00001224 ; __fastcall __security_check_cookie(x)
UNDEF:00001224                 extrn @__security_check_cookie@4:near
UNDEF:00001224                                         ; CODE XREF: __ehhandler$?CreateArc@NCab@NArchive@@YGPAUIInArchive@@XZ+Cp
UNDEF:00001224                                         ; __ehhandler$??0CHandler@NCab@NArchive@@QAE@XZ+Cp ...
UNDEF:00001228                 extrn __RTC_CheckEsp:near
UNDEF:00001228                                         ; CODE XREF: NArchive::NCab::CreateArc(void)+88p
UNDEF:00001228                                         ; NArchive::NCab::CHandler::CHandler(void)+80p ...
UNDEF:0000122C                 extrn __RTC_Shutdown:near
UNDEF:0000122C                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001230                 extrn __RTC_InitBase:near
UNDEF:00001230                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001234 ; _DWORD __thiscall UString::UString(UString *__hidden this)
UNDEF:00001234                 extrn ??0UString@@QAE@XZ:near
UNDEF:00001234                                         ; CODE XREF: NArchive::NCab::CHandler::CHandler(void)+61p
UNDEF:00001238 ; const type_info::`vftable'
UNDEF:00001238                 extrn ??_7type_info@@6B@:near
UNDEF:00001238                                         ; DATA XREF: .data:NArchive::NCab::CHandler `RTTI Type Descriptor'o
UNDEF:00001238                                         ; .data:IInArchive `RTTI Type Descriptor'o ...
UNDEF:0000123C ; public: virtual long __stdcall NArchive::NCab::CHandler::Open(struct IInStream *, unsigned __int64 const *, struct IArchiveOpenCallback *)
UNDEF:0000123C                 extrn ?Open@CHandler@NCab@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z:near
UNDEF:0000123C                                         ; DATA XREF: .rdata:000001E0o
UNDEF:00001240 ; public: virtual long __stdcall NArchive::NCab::CHandler::Close(void)
UNDEF:00001240                 extrn ?Close@CHandler@NCab@NArchive@@UAGJXZ:near
UNDEF:00001240                                         ; DATA XREF: .rdata:000001E4o
UNDEF:00001244 ; public: virtual long __stdcall NArchive::NCab::CHandler::GetNumberOfItems(unsigned int *)
UNDEF:00001244                 extrn ?GetNumberOfItems@CHandler@NCab@NArchive@@UAGJPAI@Z:near
UNDEF:00001244                                         ; DATA XREF: .rdata:000001E8o
UNDEF:00001248 ; public: virtual long __stdcall NArchive::NCab::CHandler::GetProperty(unsigned int, unsigned long, struct tagPROPVARIANT *)
UNDEF:00001248                 extrn ?GetProperty@CHandler@NCab@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z:near
UNDEF:00001248                                         ; DATA XREF: .rdata:000001ECo
UNDEF:0000124C ; public: virtual long __stdcall NArchive::NCab::CHandler::Extract(unsigned int const *, unsigned int, int, struct IArchiveExtractCallback *)
UNDEF:0000124C                 extrn ?Extract@CHandler@NCab@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z:near
UNDEF:0000124C                                         ; DATA XREF: .rdata:000001F0o
UNDEF:00001250 ; public: virtual long __stdcall NArchive::NCab::CHandler::GetArchiveProperty(unsigned long, struct tagPROPVARIANT *)
UNDEF:00001250                 extrn ?GetArchiveProperty@CHandler@NCab@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z:near
UNDEF:00001250                                         ; DATA XREF: .rdata:000001F4o
UNDEF:00001254 ; public: virtual long __stdcall NArchive::NCab::CHandler::GetNumberOfProperties(unsigned int *)
UNDEF:00001254                 extrn ?GetNumberOfProperties@CHandler@NCab@NArchive@@UAGJPAI@Z:near
UNDEF:00001254                                         ; DATA XREF: .rdata:000001F8o
UNDEF:00001258 ; public: virtual long __stdcall NArchive::NCab::CHandler::GetPropertyInfo(unsigned int, wchar_t * *, unsigned long *, unsigned short *)
UNDEF:00001258                 extrn ?GetPropertyInfo@CHandler@NCab@NArchive@@UAGJIPAPA_WPAKPAG@Z:near
UNDEF:00001258                                         ; DATA XREF: .rdata:000001FCo
UNDEF:0000125C ; public: virtual long __stdcall NArchive::NCab::CHandler::GetNumberOfArchiveProperties(unsigned int *)
UNDEF:0000125C                 extrn ?GetNumberOfArchiveProperties@CHandler@NCab@NArchive@@UAGJPAI@Z:near
UNDEF:0000125C                                         ; DATA XREF: .rdata:00000200o
UNDEF:00001260 ; public: virtual long __stdcall NArchive::NCab::CHandler::GetArchivePropertyInfo(unsigned int, wchar_t * *, unsigned long *, unsigned short *)
UNDEF:00001260                 extrn ?GetArchivePropertyInfo@CHandler@NCab@NArchive@@UAGJIPAPA_WPAKPAG@Z:near
UNDEF:00001260                                         ; DATA XREF: .rdata:00000204o
UNDEF:00001264                 extrn _IID_IInArchive:near
UNDEF:00001264                                         ; DATA XREF: NArchive::NCab::CHandler::QueryInterface(_GUID const &,void * *):loc_404o
UNDEF:00001268 ; const IID IID_IUnknown
UNDEF:00001268                 extrn _IID_IUnknown:near
UNDEF:00001268                                         ; DATA XREF: NArchive::NCab::CHandler::QueryInterface(_GUID const &,void * *)+Co
UNDEF:0000126C ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:0000126C                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00001270                 extrn __purecall:near   ; DATA XREF: .rdata:const IInArchive::`vftable'o
UNDEF:00001270                                         ; .rdata:0000079Co ...
UNDEF:00001274 ; void __stdcall RegisterArc(const struct CArcInfo *)
UNDEF:00001274                 extrn ?RegisterArc@@YGXPBUCArcInfo@@@Z:near
UNDEF:00001274                                         ; CODE XREF: NArchive::NCab::CRegisterArc::CRegisterArc(void)+13p
UNDEF:00001274
UNDEF:00001274