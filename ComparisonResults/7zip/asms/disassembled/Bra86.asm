.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : FBD473BB467A6D6162A2EEC9472D6882
.text:00000000 ; Input CRC32 : ED97B5B1
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Bra86.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000 .intel_syntax noprefix
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000                 public _x86_Convert@20
.text:00000000 _x86_Convert@20 proc near
.text:00000000
.text:00000000 var_24          = dword ptr -24h
.text:00000000 var_20          = dword ptr -20h
.text:00000000 var_1C          = dword ptr -1Ch
.text:00000000 var_18          = dword ptr -18h
.text:00000000 var_14          = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_8           = dword ptr  10h
.text:00000000 arg_C           = dword ptr  14h
.text:00000000 arg_10          = dword ptr  18h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 24h
.text:00000006                 mov     eax, 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_24], eax
.text:0000000E                 mov     [ebp+var_20], eax
.text:00000011                 mov     [ebp+var_1C], eax
.text:00000014                 mov     [ebp+var_18], eax
.text:00000017                 mov     [ebp+var_14], eax
.text:0000001A                 mov     [ebp+var_10], eax
.text:0000001D                 mov     [ebp+var_C], eax
.text:00000020                 mov     [ebp+var_8], eax
.text:00000023                 mov     [ebp+var_4], eax
.text:00000026                 mov     [ebp+var_4], 0
.text:0000002D                 mov     eax, [ebp+arg_C]
.text:00000030                 mov     ecx, [eax]
.text:00000032                 and     ecx, 7
.text:00000035                 mov     [ebp+var_8], ecx
.text:00000038                 cmp     [ebp+arg_4], 5
.text:0000003C                 jnb     short loc_45
.text:0000003E                 xor     eax, eax
.text:00000040                 jmp     loc_24F
.text:00000045 ; ---------------------------------------------------------------------------
.text:00000045
.text:00000045 loc_45:                                 ; CODE XREF: _x86_Convert@20+3Cj
.text:00000045                 mov     edx, [ebp+arg_4]
.text:00000048                 sub     edx, 4
.text:0000004B                 mov     [ebp+arg_4], edx
.text:0000004E                 mov     eax, [ebp+arg_8]
.text:00000051                 add     eax, 5
.text:00000054                 mov     [ebp+arg_8], eax
.text:00000057
.text:00000057 loc_57:                                 ; CODE XREF: _x86_Convert@20+131j
.text:00000057                                         ; _x86_Convert@20:loc_24Aj
.text:00000057                 mov     ecx, [ebp+arg_0]
.text:0000005A                 add     ecx, [ebp+var_4]
.text:0000005D                 mov     [ebp+var_C], ecx
.text:00000060                 mov     edx, [ebp+arg_0]
.text:00000063                 add     edx, [ebp+arg_4]
.text:00000066                 mov     [ebp+var_10], edx
.text:00000069                 jmp     short loc_74
.text:0000006B ; ---------------------------------------------------------------------------
.text:0000006B
.text:0000006B loc_6B:                                 ; CODE XREF: _x86_Convert@20:loc_90j
.text:0000006B                 mov     eax, [ebp+var_C]
.text:0000006E                 add     eax, 1
.text:00000071                 mov     [ebp+var_C], eax
.text:00000074
.text:00000074 loc_74:                                 ; CODE XREF: _x86_Convert@20+69j
.text:00000074                 mov     ecx, [ebp+var_C]
.text:00000077                 cmp     ecx, [ebp+var_10]
.text:0000007A                 jnb     short loc_92
.text:0000007C                 mov     edx, [ebp+var_C]
.text:0000007F                 movzx   eax, byte ptr [edx]
.text:00000082                 and     eax, 0FEh
.text:00000087                 cmp     eax, 0E8h ; 'F'
.text:0000008C                 jnz     short loc_90
.text:0000008E                 jmp     short loc_92
.text:00000090 ; ---------------------------------------------------------------------------
.text:00000090
.text:00000090 loc_90:                                 ; CODE XREF: _x86_Convert@20+8Cj
.text:00000090                 jmp     short loc_6B
.text:00000092 ; ---------------------------------------------------------------------------
.text:00000092
.text:00000092 loc_92:                                 ; CODE XREF: _x86_Convert@20+7Aj
.text:00000092                                         ; _x86_Convert@20+8Ej
.text:00000092                 mov     ecx, [ebp+var_C]
.text:00000095                 sub     ecx, [ebp+arg_0]
.text:00000098                 sub     ecx, [ebp+var_4]
.text:0000009B                 mov     [ebp+var_14], ecx
.text:0000009E                 mov     edx, [ebp+var_C]
.text:000000A1                 sub     edx, [ebp+arg_0]
.text:000000A4                 mov     [ebp+var_4], edx
.text:000000A7                 mov     eax, [ebp+var_C]
.text:000000AA                 cmp     eax, [ebp+var_10]
.text:000000AD                 jb      short loc_D9
.text:000000AF                 cmp     [ebp+var_14], 2
.text:000000B3                 jbe     short loc_BE
.text:000000B5                 mov     [ebp+var_24], 0
.text:000000BC                 jmp     short loc_C9
.text:000000BE ; ---------------------------------------------------------------------------
.text:000000BE
.text:000000BE loc_BE:                                 ; CODE XREF: _x86_Convert@20+B3j
.text:000000BE                 mov     edx, [ebp+var_8]
.text:000000C1                 mov     ecx, [ebp+var_14]
.text:000000C4                 shr     edx, cl
.text:000000C6                 mov     [ebp+var_24], edx
.text:000000C9
.text:000000C9 loc_C9:                                 ; CODE XREF: _x86_Convert@20+BCj
.text:000000C9                 mov     eax, [ebp+arg_C]
.text:000000CC                 mov     ecx, [ebp+var_24]
.text:000000CF                 mov     [eax], ecx
.text:000000D1                 mov     eax, [ebp+var_4]
.text:000000D4                 jmp     loc_24F
.text:000000D9 ; ---------------------------------------------------------------------------
.text:000000D9
.text:000000D9 loc_D9:                                 ; CODE XREF: _x86_Convert@20+ADj
.text:000000D9                 cmp     [ebp+var_14], 2
.text:000000DD                 jbe     short loc_E8
.text:000000DF                 mov     [ebp+var_8], 0
.text:000000E6                 jmp     short loc_136
.text:000000E8 ; ---------------------------------------------------------------------------
.text:000000E8
.text:000000E8 loc_E8:                                 ; CODE XREF: _x86_Convert@20+DDj
.text:000000E8                 mov     edx, [ebp+var_8]
.text:000000EB                 mov     ecx, [ebp+var_14]
.text:000000EE                 shr     edx, cl
.text:000000F0                 mov     [ebp+var_8], edx
.text:000000F3                 cmp     [ebp+var_8], 0
.text:000000F7                 jz      short loc_136
.text:000000F9                 cmp     [ebp+var_8], 4
.text:000000FD                 ja      short loc_11D
.text:000000FF                 cmp     [ebp+var_8], 3
.text:00000103                 jz      short loc_11D
.text:00000105                 mov     eax, [ebp+var_8]
.text:00000108                 shr     eax, 1
.text:0000010A                 mov     ecx, [ebp+var_C]
.text:0000010D                 movzx   edx, byte ptr [ecx+eax+1]
.text:00000112                 add     edx, 1
.text:00000115                 and     edx, 0FEh
.text:0000011B                 jnz     short loc_136
.text:0000011D
.text:0000011D loc_11D:                                ; CODE XREF: _x86_Convert@20+FDj
.text:0000011D                                         ; _x86_Convert@20+103j
.text:0000011D                 mov     eax, [ebp+var_8]
.text:00000120                 shr     eax, 1
.text:00000122                 or      eax, 4
.text:00000125                 mov     [ebp+var_8], eax
.text:00000128                 mov     ecx, [ebp+var_4]
.text:0000012B                 add     ecx, 1
.text:0000012E                 mov     [ebp+var_4], ecx
.text:00000131                 jmp     loc_57
.text:00000136 ; ---------------------------------------------------------------------------
.text:00000136
.text:00000136 loc_136:                                ; CODE XREF: _x86_Convert@20+E6j
.text:00000136                                         ; _x86_Convert@20+F7j ...
.text:00000136                 mov     edx, [ebp+var_C]
.text:00000139                 movzx   eax, byte ptr [edx+4]
.text:0000013D                 add     eax, 1
.text:00000140                 and     eax, 0FEh
.text:00000145                 jnz     loc_236
.text:0000014B                 mov     ecx, [ebp+var_C]
.text:0000014E                 movzx   edx, byte ptr [ecx+4]
.text:00000152                 shl     edx, 18h
.text:00000155                 mov     eax, [ebp+var_C]
.text:00000158                 movzx   ecx, byte ptr [eax+3]
.text:0000015C                 shl     ecx, 10h
.text:0000015F                 or      edx, ecx
.text:00000161                 mov     eax, [ebp+var_C]
.text:00000164                 movzx   ecx, byte ptr [eax+2]
.text:00000168                 shl     ecx, 8
.text:0000016B                 or      edx, ecx
.text:0000016D                 mov     eax, [ebp+var_C]
.text:00000170                 movzx   ecx, byte ptr [eax+1]
.text:00000174                 or      edx, ecx
.text:00000176                 mov     [ebp+var_18], edx
.text:00000179                 mov     edx, [ebp+arg_8]
.text:0000017C                 add     edx, [ebp+var_4]
.text:0000017F                 mov     [ebp+var_1C], edx
.text:00000182                 mov     eax, [ebp+var_4]
.text:00000185                 add     eax, 5
.text:00000188                 mov     [ebp+var_4], eax
.text:0000018B                 cmp     [ebp+arg_10], 0
.text:0000018F                 jz      short loc_19C
.text:00000191                 mov     ecx, [ebp+var_18]
.text:00000194                 add     ecx, [ebp+var_1C]
.text:00000197                 mov     [ebp+var_18], ecx
.text:0000019A                 jmp     short loc_1A5
.text:0000019C ; ---------------------------------------------------------------------------
.text:0000019C
.text:0000019C loc_19C:                                ; CODE XREF: _x86_Convert@20+18Fj
.text:0000019C                 mov     edx, [ebp+var_18]
.text:0000019F                 sub     edx, [ebp+var_1C]
.text:000001A2                 mov     [ebp+var_18], edx
.text:000001A5
.text:000001A5 loc_1A5:                                ; CODE XREF: _x86_Convert@20+19Aj
.text:000001A5                 cmp     [ebp+var_8], 0
.text:000001A9                 jz      short loc_200
.text:000001AB                 mov     eax, [ebp+var_8]
.text:000001AE                 and     eax, 6
.text:000001B1                 shl     eax, 2
.text:000001B4                 mov     [ebp+var_20], eax
.text:000001B7                 mov     edx, [ebp+var_18]
.text:000001BA                 mov     ecx, [ebp+var_20]
.text:000001BD                 shr     edx, cl
.text:000001BF                 movzx   eax, dl
.text:000001C2                 add     eax, 1
.text:000001C5                 and     eax, 0FEh
.text:000001CA                 jnz     short loc_1F9
.text:000001CC                 mov     edx, 100h
.text:000001D1                 mov     ecx, [ebp+var_20]
.text:000001D4                 shl     edx, cl
.text:000001D6                 sub     edx, 1
.text:000001D9                 xor     edx, [ebp+var_18]
.text:000001DC                 mov     [ebp+var_18], edx
.text:000001DF                 cmp     [ebp+arg_10], 0
.text:000001E3                 jz      short loc_1F0
.text:000001E5                 mov     eax, [ebp+var_18]
.text:000001E8                 add     eax, [ebp+var_1C]
.text:000001EB                 mov     [ebp+var_18], eax
.text:000001EE                 jmp     short loc_1F9
.text:000001F0 ; ---------------------------------------------------------------------------
.text:000001F0
.text:000001F0 loc_1F0:                                ; CODE XREF: _x86_Convert@20+1E3j
.text:000001F0                 mov     ecx, [ebp+var_18]
.text:000001F3                 sub     ecx, [ebp+var_1C]
.text:000001F6                 mov     [ebp+var_18], ecx
.text:000001F9
.text:000001F9 loc_1F9:                                ; CODE XREF: _x86_Convert@20+1CAj
.text:000001F9                                         ; _x86_Convert@20+1EEj
.text:000001F9                 mov     [ebp+var_8], 0
.text:00000200
.text:00000200 loc_200:                                ; CODE XREF: _x86_Convert@20+1A9j
.text:00000200                 mov     edx, [ebp+var_C]
.text:00000203                 mov     al, byte ptr [ebp+var_18]
.text:00000206                 mov     [edx+1], al
.text:00000209                 mov     ecx, [ebp+var_18]
.text:0000020C                 shr     ecx, 8
.text:0000020F                 mov     edx, [ebp+var_C]
.text:00000212                 mov     [edx+2], cl
.text:00000215                 mov     eax, [ebp+var_18]
.text:00000218                 shr     eax, 10h
.text:0000021B                 mov     ecx, [ebp+var_C]
.text:0000021E                 mov     [ecx+3], al
.text:00000221                 mov     edx, [ebp+var_18]
.text:00000224                 shr     edx, 18h
.text:00000227                 and     edx, 1
.text:0000022A                 xor     eax, eax
.text:0000022C                 sub     eax, edx
.text:0000022E                 mov     ecx, [ebp+var_C]
.text:00000231                 mov     [ecx+4], al
.text:00000234                 jmp     short loc_24A
.text:00000236 ; ---------------------------------------------------------------------------
.text:00000236
.text:00000236 loc_236:                                ; CODE XREF: _x86_Convert@20+145j
.text:00000236                 mov     edx, [ebp+var_8]
.text:00000239                 shr     edx, 1
.text:0000023B                 or      edx, 4
.text:0000023E                 mov     [ebp+var_8], edx
.text:00000241                 mov     eax, [ebp+var_4]
.text:00000244                 add     eax, 1
.text:00000247                 mov     [ebp+var_4], eax
.text:0000024A
.text:0000024A loc_24A:                                ; CODE XREF: _x86_Convert@20+234j
.text:0000024A                 jmp     loc_57
.text:0000024F ; ---------------------------------------------------------------------------
.text:0000024F
.text:0000024F loc_24F:                                ; CODE XREF: _x86_Convert@20+40j
.text:0000024F                                         ; _x86_Convert@20+D4j
.text:0000024F                 mov     esp, ebp
.text:00000251                 pop     ebp
.text:00000252                 retn    14h
.text:00000252 _x86_Convert@20 endp
.text:00000252
.text:00000252 ; ---------------------------------------------------------------------------
.text:00000255                 align 4
.text:00000255 _text           ends
.text:00000255
.rtc$TMZ:00000258 ; ===========================================================================
.rtc$TMZ:00000258
.rtc$TMZ:00000258 ; Segment type: Pure data
.rtc$TMZ:00000258 ; Segment permissions: Read
.rtc$TMZ:00000258 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000258                 assume cs:_rtc$TMZ
.rtc$TMZ:00000258                 ;org 258h
.rtc$TMZ:00000258 ; COMDAT (pick any)
.rtc$TMZ:00000258 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000258 _rtc$TMZ        ends
.rtc$TMZ:00000258
.rtc$IMZ:0000025C ; ===========================================================================
.rtc$IMZ:0000025C
.rtc$IMZ:0000025C ; Segment type: Pure data
.rtc$IMZ:0000025C ; Segment permissions: Read
.rtc$IMZ:0000025C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000025C                 assume cs:_rtc$IMZ
.rtc$IMZ:0000025C                 ;org 25Ch
.rtc$IMZ:0000025C ; COMDAT (pick any)
.rtc$IMZ:0000025C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000025C _rtc$IMZ        ends
.rtc$IMZ:0000025C
UNDEF:00000260 ; ===========================================================================
UNDEF:00000260
UNDEF:00000260 ; Segment type: Externs
UNDEF:00000260 ; UNDEF
UNDEF:00000260                 extrn __RTC_Shutdown:near
UNDEF:00000260                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000264                 extrn __RTC_InitBase:near
UNDEF:00000264                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000264
UNDEF:00000264
UNDEF:00000264                 end