.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : E9895B8AED7E7CB2C094C26CC9B68FE4
.text:00000000 ; Input CRC32 : BC631175
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Ppmd8Enc.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __stdcall Ppmd8_RangeEnc_FlushData(x)
.text:00000000                 public _Ppmd8_RangeEnc_FlushData@4
.text:00000000 _Ppmd8_RangeEnc_FlushData@4 proc near
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 push    esi
.text:00000005                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000C                 mov     [ebp+var_4], 0
.text:00000013                 jmp     short loc_2D
.text:00000015 ; ---------------------------------------------------------------------------
.text:00000015
.text:00000015 loc_15:                                 ; CODE XREF: Ppmd8_RangeEnc_FlushData(x)+57j
.text:00000015                 mov     eax, [ebp+var_4]
.text:00000018                 add     eax, 1
.text:0000001B                 mov     [ebp+var_4], eax
.text:0000001E                 mov     ecx, [ebp+arg_0]
.text:00000021                 mov     edx, [ecx+50h]
.text:00000024                 shl     edx, 8
.text:00000027                 mov     eax, [ebp+arg_0]
.text:0000002A                 mov     [eax+50h], edx
.text:0000002D
.text:0000002D loc_2D:                                 ; CODE XREF: Ppmd8_RangeEnc_FlushData(x)+13j
.text:0000002D                 cmp     [ebp+var_4], 4
.text:00000031                 jnb     short loc_59
.text:00000033                 mov     ecx, [ebp+arg_0]
.text:00000036                 mov     edx, [ecx+50h]
.text:00000039                 shr     edx, 18h
.text:0000003C                 mov     esi, esp
.text:0000003E                 push    edx
.text:0000003F                 mov     eax, [ebp+arg_0]
.text:00000042                 mov     ecx, [eax+54h]
.text:00000045                 push    ecx
.text:00000046                 mov     edx, [ebp+arg_0]
.text:00000049                 mov     eax, [edx+54h]
.text:0000004C                 mov     ecx, [eax]
.text:0000004E                 call    ecx
.text:00000050                 cmp     esi, esp
.text:00000052                 call    __RTC_CheckEsp
.text:00000057                 jmp     short loc_15
.text:00000059 ; ---------------------------------------------------------------------------
.text:00000059
.text:00000059 loc_59:                                 ; CODE XREF: Ppmd8_RangeEnc_FlushData(x)+31j
.text:00000059                 pop     esi
.text:0000005A                 add     esp, 4
.text:0000005D                 cmp     ebp, esp
.text:0000005F                 call    __RTC_CheckEsp
.text:00000064                 mov     esp, ebp
.text:00000066                 pop     ebp
.text:00000067                 retn    4
.text:00000067 _Ppmd8_RangeEnc_FlushData@4 endp
.text:00000067
.text:00000067 ; ---------------------------------------------------------------------------
.text:0000006A                 align 10h
.text:00000070
.text:00000070 ; =============== S U B R O U T I N E =======================================
.text:00000070
.text:00000070 ; Attributes: bp-based frame
.text:00000070
.text:00000070 ; __stdcall Ppmd8_EncodeSymbol(x, x)
.text:00000070                 public _Ppmd8_EncodeSymbol@8
.text:00000070 _Ppmd8_EncodeSymbol@8 proc near
.text:00000070
.text:00000070 var_158         = byte ptr -158h
.text:00000070 var_155         = byte ptr -155h
.text:00000070 var_154         = dword ptr -154h
.text:00000070 var_150         = dword ptr -150h
.text:00000070 var_14C         = dword ptr -14Ch
.text:00000070 var_148         = dword ptr -148h
.text:00000070 var_144         = dword ptr -144h
.text:00000070 var_140         = dword ptr -140h
.text:00000070 var_13C         = dword ptr -13Ch
.text:00000070 var_138         = dword ptr -138h
.text:00000070 var_130         = dword ptr -130h
.text:00000070 var_128         = dword ptr -128h
.text:00000070 var_124         = dword ptr -124h
.text:00000070 var_120         = dword ptr -120h
.text:00000070 var_11C         = dword ptr -11Ch
.text:00000070 var_118         = dword ptr -118h
.text:00000070 var_114         = dword ptr -114h
.text:00000070 var_110         = dword ptr -110h
.text:00000070 var_108         = dword ptr -108h
.text:00000070 var_104         = dword ptr -104h
.text:00000070 var_100         = dword ptr -100h
.text:00000070 var_FC          = dword ptr -0FCh
.text:00000070 var_F8          = dword ptr -0F8h
.text:00000070 var_F4          = dword ptr -0F4h
.text:00000070 var_F0          = dword ptr -0F0h
.text:00000070 var_EC          = dword ptr -0ECh
.text:00000070 var_4           = dword ptr -4
.text:00000070 arg_0           = dword ptr  8
.text:00000070 arg_4           = dword ptr  0Ch
.text:00000070
.text:00000070                 push    ebp
.text:00000071                 mov     ebp, esp
.text:00000073                 sub     esp, 158h
.text:00000079                 push    edi
.text:0000007A                 lea     edi, [ebp+var_158]
.text:00000080                 mov     ecx, 56h ; 'V'
.text:00000085                 mov     eax, 0CCCCCCCCh
.text:0000008A                 rep stosd
.text:0000008C                 mov     eax, dword ptr ds:___security_cookie
.text:00000091                 xor     eax, ebp
.text:00000093                 mov     [ebp+var_4], eax
.text:00000096                 mov     eax, [ebp+arg_0]
.text:00000099                 mov     ecx, [eax]
.text:0000009B                 movzx   edx, byte ptr [ecx]
.text:0000009E                 test    edx, edx
.text:000000A0                 jz      loc_2DF
.text:000000A6                 mov     eax, [ebp+arg_0]
.text:000000A9                 mov     ecx, [eax]
.text:000000AB                 mov     edx, [ecx+4]
.text:000000AE                 mov     [ebp+var_110], edx
.text:000000B4                 mov     eax, [ebp+var_110]
.text:000000BA                 movzx   ecx, byte ptr [eax]
.text:000000BD                 cmp     ecx, [ebp+arg_4]
.text:000000C0                 jnz     short loc_FC
.text:000000C2                 mov     edx, [ebp+arg_0]
.text:000000C5                 mov     eax, [edx]
.text:000000C7                 movzx   ecx, word ptr [eax+2]
.text:000000CB                 push    ecx
.text:000000CC                 mov     edx, [ebp+var_110]
.text:000000D2                 movzx   eax, byte ptr [edx+1]
.text:000000D6                 push    eax
.text:000000D7                 push    0
.text:000000D9                 mov     ecx, [ebp+arg_0]
.text:000000DC                 push    ecx
.text:000000DD                 call    _RangeEnc_Encode@16 ; RangeEnc_Encode(x,x,x,x)
.text:000000E2                 mov     edx, [ebp+arg_0]
.text:000000E5                 mov     eax, [ebp+var_110]
.text:000000EB                 mov     [edx+8], eax
.text:000000EE                 mov     ecx, [ebp+arg_0]
.text:000000F1                 push    ecx
.text:000000F2                 call    _Ppmd8_Update1_0@4 ; Ppmd8_Update1_0(x)
.text:000000F7                 jmp     loc_742
.text:000000FC ; ---------------------------------------------------------------------------
.text:000000FC
.text:000000FC loc_FC:                                 ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+50j
.text:000000FC                 mov     edx, [ebp+arg_0]
.text:000000FF                 mov     dword ptr [edx+14h], 0
.text:00000106                 mov     eax, [ebp+var_110]
.text:0000010C                 movzx   ecx, byte ptr [eax+1]
.text:00000110                 mov     [ebp+var_114], ecx
.text:00000116                 mov     edx, [ebp+arg_0]
.text:00000119                 mov     eax, [edx]
.text:0000011B                 movzx   ecx, byte ptr [eax]
.text:0000011E                 mov     [ebp+var_118], ecx
.text:00000124
.text:00000124 loc_124:                                ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+135j
.text:00000124                 mov     edx, [ebp+var_110]
.text:0000012A                 add     edx, 6
.text:0000012D                 mov     [ebp+var_110], edx
.text:00000133                 mov     eax, [ebp+var_110]
.text:00000139                 movzx   ecx, byte ptr [eax]
.text:0000013C                 cmp     ecx, [ebp+arg_4]
.text:0000013F                 jnz     short loc_180
.text:00000141                 mov     edx, [ebp+arg_0]
.text:00000144                 mov     eax, [edx]
.text:00000146                 movzx   ecx, word ptr [eax+2]
.text:0000014A                 push    ecx
.text:0000014B                 mov     edx, [ebp+var_110]
.text:00000151                 movzx   eax, byte ptr [edx+1]
.text:00000155                 push    eax
.text:00000156                 mov     ecx, [ebp+var_114]
.text:0000015C                 push    ecx
.text:0000015D                 mov     edx, [ebp+arg_0]
.text:00000160                 push    edx
.text:00000161                 call    _RangeEnc_Encode@16 ; RangeEnc_Encode(x,x,x,x)
.text:00000166                 mov     eax, [ebp+arg_0]
.text:00000169                 mov     ecx, [ebp+var_110]
.text:0000016F                 mov     [eax+8], ecx
.text:00000172                 mov     edx, [ebp+arg_0]
.text:00000175                 push    edx
.text:00000176                 call    _Ppmd8_Update1@4 ; Ppmd8_Update1(x)
.text:0000017B                 jmp     loc_742
.text:00000180 ; ---------------------------------------------------------------------------
.text:00000180
.text:00000180 loc_180:                                ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+CFj
.text:00000180                 mov     eax, [ebp+var_110]
.text:00000186                 movzx   ecx, byte ptr [eax+1]
.text:0000018A                 add     ecx, [ebp+var_114]
.text:00000190                 mov     [ebp+var_114], ecx
.text:00000196                 mov     edx, [ebp+var_118]
.text:0000019C                 sub     edx, 1
.text:0000019F                 mov     [ebp+var_118], edx
.text:000001A5                 jnz     loc_124
.text:000001AB                 mov     [ebp+var_11C], 0
.text:000001B5                 jmp     short loc_1C6
.text:000001B7 ; ---------------------------------------------------------------------------
.text:000001B7
.text:000001B7 loc_1B7:                                ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+1EBj
.text:000001B7                 mov     eax, [ebp+var_11C]
.text:000001BD                 add     eax, 8
.text:000001C0                 mov     [ebp+var_11C], eax
.text:000001C6
.text:000001C6 loc_1C6:                                ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+145j
.text:000001C6                 cmp     [ebp+var_11C], 40h ; '@'
.text:000001CD                 jnb     loc_260
.text:000001D3                 mov     ecx, [ebp+var_11C]
.text:000001D9                 mov     [ebp+ecx*4+var_108], 0FFFFFFFFh
.text:000001E4                 mov     edx, [ebp+var_11C]
.text:000001EA                 mov     [ebp+edx*4+var_104], 0FFFFFFFFh
.text:000001F5                 mov     eax, [ebp+var_11C]
.text:000001FB                 mov     [ebp+eax*4+var_100], 0FFFFFFFFh
.text:00000206                 mov     ecx, [ebp+var_11C]
.text:0000020C                 mov     [ebp+ecx*4+var_FC], 0FFFFFFFFh
.text:00000217                 mov     edx, [ebp+var_11C]
.text:0000021D                 mov     [ebp+edx*4+var_F8], 0FFFFFFFFh
.text:00000228                 mov     eax, [ebp+var_11C]
.text:0000022E                 mov     [ebp+eax*4+var_F4], 0FFFFFFFFh
.text:00000239                 mov     ecx, [ebp+var_11C]
.text:0000023F                 mov     [ebp+ecx*4+var_F0], 0FFFFFFFFh
.text:0000024A                 mov     edx, [ebp+var_11C]
.text:00000250                 mov     [ebp+edx*4+var_EC], 0FFFFFFFFh
.text:0000025B                 jmp     loc_1B7
.text:00000260 ; ---------------------------------------------------------------------------
.text:00000260
.text:00000260 loc_260:                                ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+15Dj
.text:00000260                 mov     eax, [ebp+var_110]
.text:00000266                 movzx   ecx, byte ptr [eax]
.text:00000269                 mov     byte ptr [ebp+ecx+var_108], 0
.text:00000271                 mov     edx, [ebp+arg_0]
.text:00000274                 mov     eax, [edx]
.text:00000276                 movzx   ecx, byte ptr [eax]
.text:00000279                 mov     [ebp+var_118], ecx
.text:0000027F
.text:0000027F loc_27F:                                ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+23Ej
.text:0000027F                 mov     edx, [ebp+var_110]
.text:00000285                 sub     edx, 6
.text:00000288                 mov     [ebp+var_110], edx
.text:0000028E                 mov     eax, [ebp+var_110]
.text:00000294                 movzx   ecx, byte ptr [eax]
.text:00000297                 mov     byte ptr [ebp+ecx+var_108], 0
.text:0000029F                 mov     edx, [ebp+var_118]
.text:000002A5                 sub     edx, 1
.text:000002A8                 mov     [ebp+var_118], edx
.text:000002AE                 jnz     short loc_27F
.text:000002B0                 mov     eax, [ebp+arg_0]
.text:000002B3                 mov     ecx, [eax]
.text:000002B5                 movzx   edx, word ptr [ecx+2]
.text:000002B9                 push    edx
.text:000002BA                 mov     eax, [ebp+arg_0]
.text:000002BD                 mov     ecx, [eax]
.text:000002BF                 movzx   edx, word ptr [ecx+2]
.text:000002C3                 sub     edx, [ebp+var_114]
.text:000002C9                 push    edx
.text:000002CA                 mov     eax, [ebp+var_114]
.text:000002D0                 push    eax
.text:000002D1                 mov     ecx, [ebp+arg_0]
.text:000002D4                 push    ecx
.text:000002D5                 call    _RangeEnc_Encode@16 ; RangeEnc_Encode(x,x,x,x)
.text:000002DA                 jmp     loc_4D4
.text:000002DF ; ---------------------------------------------------------------------------
.text:000002DF
.text:000002DF loc_2DF:                                ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+30j
.text:000002DF                 mov     edx, [ebp+arg_0]
.text:000002E2                 mov     eax, [edx]
.text:000002E4                 movzx   ecx, byte ptr [eax+3]
.text:000002E8                 mov     edx, [ebp+arg_0]
.text:000002EB                 movzx   eax, byte ptr [edx+ecx+32Fh]
.text:000002F3                 shl     eax, 7
.text:000002F6                 mov     ecx, [ebp+arg_0]
.text:000002F9                 lea     edx, [ecx+eax+1038h]
.text:00000300                 mov     eax, [ebp+arg_0]
.text:00000303                 mov     ecx, [eax]
.text:00000305                 mov     eax, [ecx+8]
.text:00000308                 movzx   ecx, byte ptr [eax]
.text:0000030B                 mov     eax, [ebp+arg_0]
.text:0000030E                 movzx   ecx, byte ptr [eax+ecx+230h]
.text:00000316                 mov     eax, [ebp+arg_0]
.text:00000319                 add     ecx, [eax+14h]
.text:0000031C                 mov     eax, [ebp+arg_0]
.text:0000031F                 mov     eax, [eax]
.text:00000321                 movzx   eax, byte ptr [eax+1]
.text:00000325                 add     ecx, eax
.text:00000327                 mov     eax, [ebp+arg_0]
.text:0000032A                 mov     eax, [eax+1Ch]
.text:0000032D                 sar     eax, 1Ah
.text:00000330                 and     eax, 20h
.text:00000333                 add     ecx, eax
.text:00000335                 lea     ecx, [edx+ecx*2]
.text:00000338                 mov     [ebp+var_120], ecx
.text:0000033E                 mov     edx, [ebp+arg_0]
.text:00000341                 mov     eax, [edx]
.text:00000343                 add     eax, 2
.text:00000346                 mov     [ebp+var_124], eax
.text:0000034C                 mov     ecx, [ebp+var_124]
.text:00000352                 movzx   edx, byte ptr [ecx]
.text:00000355                 cmp     edx, [ebp+arg_4]
.text:00000358                 jnz     short loc_3B5
.text:0000035A                 mov     eax, [ebp+var_120]
.text:00000360                 movzx   ecx, word ptr [eax]
.text:00000363                 push    ecx
.text:00000364                 mov     edx, [ebp+arg_0]
.text:00000367                 push    edx
.text:00000368                 call    _RangeEnc_EncodeBit_0@8 ; RangeEnc_EncodeBit_0(x,x)
.text:0000036D                 mov     eax, [ebp+var_120]
.text:00000373                 movzx   ecx, word ptr [eax]
.text:00000376                 add     ecx, 80h ; 'Ç'
.text:0000037C                 mov     edx, [ebp+var_120]
.text:00000382                 movzx   eax, word ptr [edx]
.text:00000385                 add     eax, 20h ; ' '
.text:00000388                 sar     eax, 7
.text:0000038B                 sub     ecx, eax
.text:0000038D                 mov     edx, [ebp+var_120]
.text:00000393                 mov     [edx], cx
.text:00000396                 mov     eax, [ebp+arg_0]
.text:00000399                 mov     ecx, [ebp+var_124]
.text:0000039F                 mov     [eax+8], ecx
.text:000003A2                 mov     edx, [ebp+arg_0]
.text:000003A5                 push    edx
.text:000003A6                 call    _Ppmd8_UpdateBin@4 ; Ppmd8_UpdateBin(x)
.text:000003AB                 jmp     loc_742
.text:000003B0 ; ---------------------------------------------------------------------------
.text:000003B0                 jmp     loc_4D4
.text:000003B5 ; ---------------------------------------------------------------------------
.text:000003B5
.text:000003B5 loc_3B5:                                ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+2E8j
.text:000003B5                 mov     eax, [ebp+var_120]
.text:000003BB                 movzx   ecx, word ptr [eax]
.text:000003BE                 push    ecx
.text:000003BF                 mov     edx, [ebp+arg_0]
.text:000003C2                 push    edx
.text:000003C3                 call    _RangeEnc_EncodeBit_1@8 ; RangeEnc_EncodeBit_1(x,x)
.text:000003C8                 mov     eax, [ebp+var_120]
.text:000003CE                 movzx   ecx, word ptr [eax]
.text:000003D1                 mov     edx, [ebp+var_120]
.text:000003D7                 movzx   eax, word ptr [edx]
.text:000003DA                 add     eax, 20h ; ' '
.text:000003DD                 sar     eax, 7
.text:000003E0                 sub     ecx, eax
.text:000003E2                 mov     edx, [ebp+var_120]
.text:000003E8                 mov     [edx], cx
.text:000003EB                 mov     eax, [ebp+var_120]
.text:000003F1                 movzx   ecx, word ptr [eax]
.text:000003F4                 sar     ecx, 0Ah
.text:000003F7                 movzx   edx, byte ptr ds:_PPMD8_kExpEscape[ecx]
.text:000003FE                 mov     eax, [ebp+arg_0]
.text:00000401                 mov     [eax+10h], edx
.text:00000404                 mov     [ebp+var_128], 0
.text:0000040E                 jmp     short loc_41F
.text:00000410 ; ---------------------------------------------------------------------------
.text:00000410
.text:00000410 loc_410:                                ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+444j
.text:00000410                 mov     ecx, [ebp+var_128]
.text:00000416                 add     ecx, 8
.text:00000419                 mov     [ebp+var_128], ecx
.text:0000041F
.text:0000041F loc_41F:                                ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+39Ej
.text:0000041F                 cmp     [ebp+var_128], 40h ; '@'
.text:00000426                 jnb     loc_4B9
.text:0000042C                 mov     edx, [ebp+var_128]
.text:00000432                 mov     [ebp+edx*4+var_108], 0FFFFFFFFh
.text:0000043D                 mov     eax, [ebp+var_128]
.text:00000443                 mov     [ebp+eax*4+var_104], 0FFFFFFFFh
.text:0000044E                 mov     ecx, [ebp+var_128]
.text:00000454                 mov     [ebp+ecx*4+var_100], 0FFFFFFFFh
.text:0000045F                 mov     edx, [ebp+var_128]
.text:00000465                 mov     [ebp+edx*4+var_FC], 0FFFFFFFFh
.text:00000470                 mov     eax, [ebp+var_128]
.text:00000476                 mov     [ebp+eax*4+var_F8], 0FFFFFFFFh
.text:00000481                 mov     ecx, [ebp+var_128]
.text:00000487                 mov     [ebp+ecx*4+var_F4], 0FFFFFFFFh
.text:00000492                 mov     edx, [ebp+var_128]
.text:00000498                 mov     [ebp+edx*4+var_F0], 0FFFFFFFFh
.text:000004A3                 mov     eax, [ebp+var_128]
.text:000004A9                 mov     [ebp+eax*4+var_EC], 0FFFFFFFFh
.text:000004B4                 jmp     loc_410
.text:000004B9 ; ---------------------------------------------------------------------------
.text:000004B9
.text:000004B9 loc_4B9:                                ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+3B6j
.text:000004B9                 mov     ecx, [ebp+var_124]
.text:000004BF                 movzx   edx, byte ptr [ecx]
.text:000004C2                 mov     byte ptr [ebp+edx+var_108], 0
.text:000004CA                 mov     eax, [ebp+arg_0]
.text:000004CD                 mov     dword ptr [eax+14h], 0
.text:000004D4
.text:000004D4 loc_4D4:                                ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+26Aj
.text:000004D4                                         ; Ppmd8_EncodeSymbol(x,x)+340j ...
.text:000004D4                 mov     ecx, [ebp+arg_0]
.text:000004D7                 mov     edx, [ecx]
.text:000004D9                 movzx   eax, byte ptr [edx]
.text:000004DC                 mov     [ebp+var_148], eax
.text:000004E2
.text:000004E2 loc_4E2:                                ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+4ACj
.text:000004E2                 mov     ecx, [ebp+arg_0]
.text:000004E5                 mov     edx, [ecx+0Ch]
.text:000004E8                 add     edx, 1
.text:000004EB                 mov     eax, [ebp+arg_0]
.text:000004EE                 mov     [eax+0Ch], edx
.text:000004F1                 mov     ecx, [ebp+arg_0]
.text:000004F4                 mov     edx, [ecx]
.text:000004F6                 cmp     dword ptr [edx+8], 0
.text:000004FA                 jnz     short loc_501
.text:000004FC                 jmp     loc_742
.text:00000501 ; ---------------------------------------------------------------------------
.text:00000501
.text:00000501 loc_501:                                ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+48Aj
.text:00000501                 mov     eax, [ebp+arg_0]
.text:00000504                 mov     ecx, [eax]
.text:00000506                 mov     edx, [ebp+arg_0]
.text:00000509                 mov     eax, [ecx+8]
.text:0000050C                 mov     [edx], eax
.text:0000050E                 mov     ecx, [ebp+arg_0]
.text:00000511                 mov     edx, [ecx]
.text:00000513                 movzx   eax, byte ptr [edx]
.text:00000516                 cmp     eax, [ebp+var_148]
.text:0000051C                 jz      short loc_4E2
.text:0000051E                 lea     ecx, [ebp+var_130]
.text:00000524                 push    ecx
.text:00000525                 mov     edx, [ebp+var_148]
.text:0000052B                 push    edx
.text:0000052C                 mov     eax, [ebp+arg_0]
.text:0000052F                 push    eax
.text:00000530                 call    _Ppmd8_MakeEscFreq@12 ; Ppmd8_MakeEscFreq(x,x,x)
.text:00000535                 mov     [ebp+var_138], eax
.text:0000053B                 mov     ecx, [ebp+arg_0]
.text:0000053E                 mov     edx, [ecx]
.text:00000540                 mov     eax, [edx+4]
.text:00000543                 mov     [ebp+var_13C], eax
.text:00000549                 mov     [ebp+var_140], 0
.text:00000553                 mov     ecx, [ebp+arg_0]
.text:00000556                 mov     edx, [ecx]
.text:00000558                 movzx   eax, byte ptr [edx]
.text:0000055B                 add     eax, 1
.text:0000055E                 mov     [ebp+var_144], eax
.text:00000564
.text:00000564 loc_564:                                ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+685j
.text:00000564                 mov     ecx, [ebp+var_13C]
.text:0000056A                 movzx   edx, byte ptr [ecx]
.text:0000056D                 mov     [ebp+var_14C], edx
.text:00000573                 mov     eax, [ebp+var_14C]
.text:00000579                 cmp     eax, [ebp+arg_4]
.text:0000057C                 jnz     loc_6A3
.text:00000582                 mov     ecx, [ebp+var_140]
.text:00000588                 mov     [ebp+var_150], ecx
.text:0000058E                 mov     edx, [ebp+var_13C]
.text:00000594                 mov     [ebp+var_154], edx
.text:0000059A
.text:0000059A loc_59A:                                ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+571j
.text:0000059A                 mov     eax, [ebp+var_13C]
.text:000005A0                 movzx   ecx, byte ptr [eax+1]
.text:000005A4                 mov     edx, [ebp+var_13C]
.text:000005AA                 movzx   eax, byte ptr [edx]
.text:000005AD                 movsx   edx, byte ptr [ebp+eax+var_108]
.text:000005B5                 and     ecx, edx
.text:000005B7                 add     ecx, [ebp+var_140]
.text:000005BD                 mov     [ebp+var_140], ecx
.text:000005C3                 mov     eax, [ebp+var_13C]
.text:000005C9                 add     eax, 6
.text:000005CC                 mov     [ebp+var_13C], eax
.text:000005D2                 mov     ecx, [ebp+var_144]
.text:000005D8                 sub     ecx, 1
.text:000005DB                 mov     [ebp+var_144], ecx
.text:000005E1                 jnz     short loc_59A
.text:000005E3                 mov     edx, [ebp+var_140]
.text:000005E9                 add     edx, [ebp+var_130]
.text:000005EF                 push    edx
.text:000005F0                 mov     eax, [ebp+var_154]
.text:000005F6                 movzx   ecx, byte ptr [eax+1]
.text:000005FA                 push    ecx
.text:000005FB                 mov     edx, [ebp+var_150]
.text:00000601                 push    edx
.text:00000602                 mov     eax, [ebp+arg_0]
.text:00000605                 push    eax
.text:00000606                 call    _RangeEnc_Encode@16 ; RangeEnc_Encode(x,x,x,x)
.text:0000060B                 mov     ecx, [ebp+var_138]
.text:00000611                 movzx   edx, byte ptr [ecx+2]
.text:00000615                 cmp     edx, 7
.text:00000618                 jge     short loc_689
.text:0000061A                 mov     eax, [ebp+var_138]
.text:00000620                 mov     cl, [eax+3]
.text:00000623                 sub     cl, 1
.text:00000626                 mov     [ebp+var_155], cl
.text:0000062C                 mov     edx, [ebp+var_138]
.text:00000632                 mov     al, [ebp+var_155]
.text:00000638                 mov     [edx+3], al
.text:0000063B                 movzx   ecx, [ebp+var_155]
.text:00000642                 test    ecx, ecx
.text:00000644                 jnz     short loc_689
.text:00000646                 mov     edx, [ebp+var_138]
.text:0000064C                 mov     ax, [edx]
.text:0000064F                 shl     ax, 1
.text:00000652                 mov     ecx, [ebp+var_138]
.text:00000658                 mov     [ecx], ax
.text:0000065B                 mov     edx, [ebp+var_138]
.text:00000661                 movzx   ecx, byte ptr [edx+2]
.text:00000665                 mov     eax, 3
.text:0000066A                 shl     eax, cl
.text:0000066C                 mov     ecx, [ebp+var_138]
.text:00000672                 mov     [ecx+3], al
.text:00000675                 mov     edx, [ebp+var_138]
.text:0000067B                 mov     al, [edx+2]
.text:0000067E                 add     al, 1
.text:00000680                 mov     ecx, [ebp+var_138]
.text:00000686                 mov     [ecx+2], al
.text:00000689
.text:00000689 loc_689:                                ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+5A8j
.text:00000689                                         ; Ppmd8_EncodeSymbol(x,x)+5D4j
.text:00000689                 mov     edx, [ebp+arg_0]
.text:0000068C                 mov     eax, [ebp+var_154]
.text:00000692                 mov     [edx+8], eax
.text:00000695                 mov     ecx, [ebp+arg_0]
.text:00000698                 push    ecx
.text:00000699                 call    _Ppmd8_Update2@4 ; Ppmd8_Update2(x)
.text:0000069E                 jmp     loc_742
.text:000006A3 ; ---------------------------------------------------------------------------
.text:000006A3
.text:000006A3 loc_6A3:                                ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+50Cj
.text:000006A3                 mov     edx, [ebp+var_13C]
.text:000006A9                 movzx   eax, byte ptr [edx+1]
.text:000006AD                 mov     ecx, [ebp+var_14C]
.text:000006B3                 movsx   edx, byte ptr [ebp+ecx+var_108]
.text:000006BB                 and     eax, edx
.text:000006BD                 add     eax, [ebp+var_140]
.text:000006C3                 mov     [ebp+var_140], eax
.text:000006C9                 mov     eax, [ebp+var_14C]
.text:000006CF                 mov     byte ptr [ebp+eax+var_108], 0
.text:000006D7                 mov     ecx, [ebp+var_13C]
.text:000006DD                 add     ecx, 6
.text:000006E0                 mov     [ebp+var_13C], ecx
.text:000006E6                 mov     edx, [ebp+var_144]
.text:000006EC                 sub     edx, 1
.text:000006EF                 mov     [ebp+var_144], edx
.text:000006F5                 jnz     loc_564
.text:000006FB                 mov     eax, [ebp+var_140]
.text:00000701                 add     eax, [ebp+var_130]
.text:00000707                 push    eax
.text:00000708                 mov     ecx, [ebp+var_130]
.text:0000070E                 push    ecx
.text:0000070F                 mov     edx, [ebp+var_140]
.text:00000715                 push    edx
.text:00000716                 mov     eax, [ebp+arg_0]
.text:00000719                 push    eax
.text:0000071A                 call    _RangeEnc_Encode@16 ; RangeEnc_Encode(x,x,x,x)
.text:0000071F                 mov     ecx, [ebp+var_138]
.text:00000725                 movzx   edx, word ptr [ecx]
.text:00000728                 add     edx, [ebp+var_140]
.text:0000072E                 add     edx, [ebp+var_130]
.text:00000734                 mov     eax, [ebp+var_138]
.text:0000073A                 mov     [eax], dx
.text:0000073D                 jmp     loc_4D4
.text:00000742 ; ---------------------------------------------------------------------------
.text:00000742
.text:00000742 loc_742:                                ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+87j
.text:00000742                                         ; Ppmd8_EncodeSymbol(x,x)+10Bj ...
.text:00000742                 push    edx
.text:00000743                 mov     ecx, ebp
.text:00000745                 push    eax
.text:00000746                 lea     edx, $LN38
.text:0000074C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000751                 pop     eax
.text:00000752                 pop     edx
.text:00000753                 pop     edi
.text:00000754                 mov     ecx, [ebp+var_4]
.text:00000757                 xor     ecx, ebp
.text:00000759                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000075E                 add     esp, 158h
.text:00000764                 cmp     ebp, esp
.text:00000766                 call    __RTC_CheckEsp
.text:0000076B                 mov     esp, ebp
.text:0000076D                 pop     ebp
.text:0000076E                 retn    8
.text:0000076E _Ppmd8_EncodeSymbol@8 endp
.text:0000076E
.text:0000076E ; ---------------------------------------------------------------------------
.text:00000771                 align 4
.text:00000774 $LN38           dd 2                    ; DATA XREF: Ppmd8_EncodeSymbol(x,x)+6D6o
.text:00000778                 dd offset $LN37
.text:0000077C $LN37           dd 0FFFFFEF8h, 100h     ; DATA XREF: .text:00000778o
.text:00000784                 dd offset $LN35         ; "charMask"
.text:00000788                 dd 0FFFFFED0h, 4
.text:00000790                 dd offset $LN36         ; "escFreq"
.text:00000794 $LN36           db 'escFreq',0          ; DATA XREF: .text:00000790o
.text:0000079C $LN35           db 'charMask',0         ; DATA XREF: .text:00000784o
.text:000007A5                 align 10h
.text:000007B0
.text:000007B0 ; =============== S U B R O U T I N E =======================================
.text:000007B0
.text:000007B0 ; Attributes: bp-based frame
.text:000007B0
.text:000007B0 ; __stdcall RangeEnc_Encode(x, x, x, x)
.text:000007B0 _RangeEnc_Encode@16 proc near           ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+6Dp
.text:000007B0                                         ; Ppmd8_EncodeSymbol(x,x)+F1p ...
.text:000007B0
.text:000007B0 var_4           = dword ptr -4
.text:000007B0 arg_0           = dword ptr  8
.text:000007B0 arg_4           = dword ptr  0Ch
.text:000007B0 arg_8           = dword ptr  10h
.text:000007B0 arg_C           = dword ptr  14h
.text:000007B0
.text:000007B0                 push    ebp
.text:000007B1                 mov     ebp, esp
.text:000007B3                 push    ecx
.text:000007B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007BB                 mov     eax, [ebp+arg_0]
.text:000007BE                 mov     eax, [eax+48h]
.text:000007C1                 xor     edx, edx
.text:000007C3                 div     [ebp+arg_C]
.text:000007C6                 mov     [ebp+var_4], eax
.text:000007C9                 mov     ecx, [ebp+arg_0]
.text:000007CC                 mov     edx, [ebp+var_4]
.text:000007CF                 mov     [ecx+48h], edx
.text:000007D2                 mov     eax, [ebp+arg_4]
.text:000007D5                 imul    eax, [ebp+var_4]
.text:000007D9                 mov     ecx, [ebp+arg_0]
.text:000007DC                 add     eax, [ecx+50h]
.text:000007DF                 mov     edx, [ebp+arg_0]
.text:000007E2                 mov     [edx+50h], eax
.text:000007E5                 mov     eax, [ebp+arg_0]
.text:000007E8                 mov     ecx, [eax+48h]
.text:000007EB                 imul    ecx, [ebp+arg_8]
.text:000007EF                 mov     edx, [ebp+arg_0]
.text:000007F2                 mov     [edx+48h], ecx
.text:000007F5                 mov     eax, [ebp+arg_0]
.text:000007F8                 push    eax
.text:000007F9                 call    _RangeEnc_Normalize@4 ; RangeEnc_Normalize(x)
.text:000007FE                 add     esp, 4
.text:00000801                 cmp     ebp, esp
.text:00000803                 call    __RTC_CheckEsp
.text:00000808                 mov     esp, ebp
.text:0000080A                 pop     ebp
.text:0000080B                 retn    10h
.text:0000080B _RangeEnc_Encode@16 endp
.text:0000080B
.text:0000080B ; ---------------------------------------------------------------------------
.text:0000080E                 align 10h
.text:00000810
.text:00000810 ; =============== S U B R O U T I N E =======================================
.text:00000810
.text:00000810 ; Attributes: bp-based frame
.text:00000810
.text:00000810 ; __stdcall RangeEnc_Normalize(x)
.text:00000810 _RangeEnc_Normalize@4 proc near         ; CODE XREF: RangeEnc_Encode(x,x,x,x)+49p
.text:00000810                                         ; RangeEnc_EncodeBit_0(x,x)+26p ...
.text:00000810
.text:00000810 arg_0           = dword ptr  8
.text:00000810
.text:00000810                 push    ebp
.text:00000811                 mov     ebp, esp
.text:00000813                 push    esi
.text:00000814
.text:00000814 loc_814:                                ; CODE XREF: RangeEnc_Normalize(x)+88j
.text:00000814                 mov     eax, [ebp+arg_0]
.text:00000817                 mov     ecx, [eax+50h]
.text:0000081A                 mov     edx, [ebp+arg_0]
.text:0000081D                 add     ecx, [edx+48h]
.text:00000820                 mov     eax, [ebp+arg_0]
.text:00000823                 xor     ecx, [eax+50h]
.text:00000826                 cmp     ecx, 1000000h
.text:0000082C                 jb      short loc_856
.text:0000082E                 mov     ecx, [ebp+arg_0]
.text:00000831                 cmp     dword ptr [ecx+48h], 8000h
.text:00000838                 jnb     short loc_89D
.text:0000083A                 mov     edx, [ebp+arg_0]
.text:0000083D                 xor     eax, eax
.text:0000083F                 sub     eax, [edx+50h]
.text:00000842                 and     eax, 7FFFh
.text:00000847                 mov     ecx, [ebp+arg_0]
.text:0000084A                 mov     [ecx+48h], eax
.text:0000084D                 mov     edx, 1
.text:00000852                 test    edx, edx
.text:00000854                 jz      short loc_89D
.text:00000856
.text:00000856 loc_856:                                ; CODE XREF: RangeEnc_Normalize(x)+1Cj
.text:00000856                 mov     eax, [ebp+arg_0]
.text:00000859                 mov     ecx, [eax+50h]
.text:0000085C                 shr     ecx, 18h
.text:0000085F                 mov     esi, esp
.text:00000861                 push    ecx
.text:00000862                 mov     edx, [ebp+arg_0]
.text:00000865                 mov     eax, [edx+54h]
.text:00000868                 push    eax
.text:00000869                 mov     ecx, [ebp+arg_0]
.text:0000086C                 mov     edx, [ecx+54h]
.text:0000086F                 mov     eax, [edx]
.text:00000871                 call    eax
.text:00000873                 cmp     esi, esp
.text:00000875                 call    __RTC_CheckEsp
.text:0000087A                 mov     ecx, [ebp+arg_0]
.text:0000087D                 mov     edx, [ecx+48h]
.text:00000880                 shl     edx, 8
.text:00000883                 mov     eax, [ebp+arg_0]
.text:00000886                 mov     [eax+48h], edx
.text:00000889                 mov     ecx, [ebp+arg_0]
.text:0000088C                 mov     edx, [ecx+50h]
.text:0000088F                 shl     edx, 8
.text:00000892                 mov     eax, [ebp+arg_0]
.text:00000895                 mov     [eax+50h], edx
.text:00000898                 jmp     loc_814
.text:0000089D ; ---------------------------------------------------------------------------
.text:0000089D
.text:0000089D loc_89D:                                ; CODE XREF: RangeEnc_Normalize(x)+28j
.text:0000089D                                         ; RangeEnc_Normalize(x)+44j
.text:0000089D                 pop     esi
.text:0000089E                 cmp     ebp, esp
.text:000008A0                 call    __RTC_CheckEsp
.text:000008A5                 pop     ebp
.text:000008A6                 retn    4
.text:000008A6 _RangeEnc_Normalize@4 endp
.text:000008A6
.text:000008A6 ; ---------------------------------------------------------------------------
.text:000008A9                 align 10h
.text:000008B0
.text:000008B0 ; =============== S U B R O U T I N E =======================================
.text:000008B0
.text:000008B0 ; Attributes: bp-based frame
.text:000008B0
.text:000008B0 ; __stdcall RangeEnc_EncodeBit_0(x, x)
.text:000008B0 _RangeEnc_EncodeBit_0@8 proc near       ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+2F8p
.text:000008B0
.text:000008B0 arg_0           = dword ptr  8
.text:000008B0 arg_4           = dword ptr  0Ch
.text:000008B0
.text:000008B0                 push    ebp
.text:000008B1                 mov     ebp, esp
.text:000008B3                 mov     eax, [ebp+arg_0]
.text:000008B6                 mov     ecx, [eax+48h]
.text:000008B9                 shr     ecx, 0Eh
.text:000008BC                 mov     edx, [ebp+arg_0]
.text:000008BF                 mov     [edx+48h], ecx
.text:000008C2                 mov     eax, [ebp+arg_0]
.text:000008C5                 mov     ecx, [eax+48h]
.text:000008C8                 imul    ecx, [ebp+arg_4]
.text:000008CC                 mov     edx, [ebp+arg_0]
.text:000008CF                 mov     [edx+48h], ecx
.text:000008D2                 mov     eax, [ebp+arg_0]
.text:000008D5                 push    eax
.text:000008D6                 call    _RangeEnc_Normalize@4 ; RangeEnc_Normalize(x)
.text:000008DB                 cmp     ebp, esp
.text:000008DD                 call    __RTC_CheckEsp
.text:000008E2                 pop     ebp
.text:000008E3                 retn    8
.text:000008E3 _RangeEnc_EncodeBit_0@8 endp
.text:000008E3
.text:000008E3 ; ---------------------------------------------------------------------------
.text:000008E6                 align 10h
.text:000008F0
.text:000008F0 ; =============== S U B R O U T I N E =======================================
.text:000008F0
.text:000008F0 ; Attributes: bp-based frame
.text:000008F0
.text:000008F0 ; __stdcall RangeEnc_EncodeBit_1(x, x)
.text:000008F0 _RangeEnc_EncodeBit_1@8 proc near       ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+353p
.text:000008F0
.text:000008F0 var_4           = dword ptr -4
.text:000008F0 arg_0           = dword ptr  8
.text:000008F0 arg_4           = dword ptr  0Ch
.text:000008F0
.text:000008F0                 push    ebp
.text:000008F1                 mov     ebp, esp
.text:000008F3                 push    ecx
.text:000008F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008FB                 mov     eax, [ebp+arg_0]
.text:000008FE                 mov     ecx, [eax+48h]
.text:00000901                 shr     ecx, 0Eh
.text:00000904                 mov     [ebp+var_4], ecx
.text:00000907                 mov     edx, [ebp+arg_0]
.text:0000090A                 mov     eax, [ebp+var_4]
.text:0000090D                 mov     [edx+48h], eax
.text:00000910                 mov     ecx, [ebp+arg_4]
.text:00000913                 imul    ecx, [ebp+var_4]
.text:00000917                 mov     edx, [ebp+arg_0]
.text:0000091A                 add     ecx, [edx+50h]
.text:0000091D                 mov     eax, [ebp+arg_0]
.text:00000920                 mov     [eax+50h], ecx
.text:00000923                 mov     ecx, 4000h
.text:00000928                 sub     ecx, [ebp+arg_4]
.text:0000092B                 mov     edx, [ebp+arg_0]
.text:0000092E                 imul    ecx, [edx+48h]
.text:00000932                 mov     eax, [ebp+arg_0]
.text:00000935                 mov     [eax+48h], ecx
.text:00000938                 mov     ecx, [ebp+arg_0]
.text:0000093B                 push    ecx
.text:0000093C                 call    _RangeEnc_Normalize@4 ; RangeEnc_Normalize(x)
.text:00000941                 add     esp, 4
.text:00000944                 cmp     ebp, esp
.text:00000946                 call    __RTC_CheckEsp
.text:0000094B                 mov     esp, ebp
.text:0000094D                 pop     ebp
.text:0000094E                 retn    8
.text:0000094E _RangeEnc_EncodeBit_1@8 endp
.text:0000094E
.text:0000094E ; ---------------------------------------------------------------------------
.text:00000951                 align 4
.text:00000951 _text           ends
.text:00000951
.rtc$TMZ:00000954 ; ===========================================================================
.rtc$TMZ:00000954
.rtc$TMZ:00000954 ; Segment type: Pure data
.rtc$TMZ:00000954 ; Segment permissions: Read
.rtc$TMZ:00000954 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000954                 assume cs:_rtc$TMZ
.rtc$TMZ:00000954                 ;org 954h
.rtc$TMZ:00000954 ; COMDAT (pick any)
.rtc$TMZ:00000954 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000954 _rtc$TMZ        ends
.rtc$TMZ:00000954
.rtc$IMZ:00000958 ; ===========================================================================
.rtc$IMZ:00000958
.rtc$IMZ:00000958 ; Segment type: Pure data
.rtc$IMZ:00000958 ; Segment permissions: Read
.rtc$IMZ:00000958 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000958                 assume cs:_rtc$IMZ
.rtc$IMZ:00000958                 ;org 958h
.rtc$IMZ:00000958 ; COMDAT (pick any)
.rtc$IMZ:00000958 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000958 _rtc$IMZ        ends
.rtc$IMZ:00000958
UNDEF:00000960 ; ===========================================================================
UNDEF:00000960
UNDEF:00000960 ; Segment type: Externs
UNDEF:00000960 ; UNDEF
UNDEF:00000960                 extrn __RTC_CheckEsp:near
UNDEF:00000960                                         ; CODE XREF: Ppmd8_RangeEnc_FlushData(x)+52p
UNDEF:00000960                                         ; Ppmd8_RangeEnc_FlushData(x)+5Fp ...
UNDEF:00000964                 extrn __RTC_Shutdown:near
UNDEF:00000964                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000968                 extrn __RTC_InitBase:near
UNDEF:00000968                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000096C ; __stdcall Ppmd8_Update2(x)
UNDEF:0000096C                 extrn _Ppmd8_Update2@4:near
UNDEF:0000096C                                         ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+629p
UNDEF:00000970 ; __stdcall Ppmd8_MakeEscFreq(x, x, x)
UNDEF:00000970                 extrn _Ppmd8_MakeEscFreq@12:near
UNDEF:00000970                                         ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+4C0p
UNDEF:00000974                 extrn _PPMD8_kExpEscape:near
UNDEF:00000974                                         ; DATA XREF: Ppmd8_EncodeSymbol(x,x)+387r
UNDEF:00000978 ; __stdcall Ppmd8_UpdateBin(x)
UNDEF:00000978                 extrn _Ppmd8_UpdateBin@4:near
UNDEF:00000978                                         ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+336p
UNDEF:0000097C ; __stdcall Ppmd8_Update1(x)
UNDEF:0000097C                 extrn _Ppmd8_Update1@4:near
UNDEF:0000097C                                         ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+106p
UNDEF:00000980 ; __stdcall Ppmd8_Update1_0(x)
UNDEF:00000980                 extrn _Ppmd8_Update1_0@4:near
UNDEF:00000980                                         ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+82p
UNDEF:00000984                 extrn ___security_cookie:near
UNDEF:00000984                                         ; DATA XREF: Ppmd8_EncodeSymbol(x,x)+1Cr
UNDEF:00000988 ; __fastcall __security_check_cookie(x)
UNDEF:00000988                 extrn @__security_check_cookie@4:near
UNDEF:00000988                                         ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+6E9p
UNDEF:0000098C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000098C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000098C                                         ; CODE XREF: Ppmd8_EncodeSymbol(x,x)+6DCp
UNDEF:0000098C
UNDEF:0000098C
UNDEF:0000098C                 end