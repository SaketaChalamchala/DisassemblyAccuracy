.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 6A5AFA7213C2F622D4201DDCF8D353F6
.text:00000000 ; Input CRC32 : 818C4BB3
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\QuantumDecoder.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; void __thiscall NCompress::NQuantum::CDecoder::Init(NCompress::NQuantum::CDecoder *__hidden this)
.text:00000000                 public ?Init@CDecoder@NQuantum@NCompress@@AAEXXZ
.text:00000000 ?Init@CDecoder@NQuantum@NCompress@@AAEXXZ proc near
.text:00000000                                         ; CODE XREF: NCompress::NQuantum::CDecoder::SetOutStreamSize(unsigned __int64 const *)+41p
.text:00000000
.text:00000000 var_28          = dword ptr -28h
.text:00000000 var_20          = dword ptr -20h
.text:00000000 var_1C          = dword ptr -1Ch
.text:00000000 var_18          = dword ptr -18h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 28h
.text:00000006                 push    edi
.text:00000007                 push    ecx
.text:00000008                 lea     edi, [ebp+var_28]
.text:0000000B                 mov     ecx, 0Ah
.text:00000010                 mov     eax, 0CCCCCCCCh
.text:00000015                 rep stosd
.text:00000017                 pop     ecx
.text:00000018                 mov     eax, dword ptr ds:___security_cookie
.text:0000001D                 xor     eax, ebp
.text:0000001F                 mov     [ebp+var_4], eax
.text:00000022                 mov     [ebp+var_8], ecx
.text:00000025                 push    7               ; unsigned int
.text:00000027                 mov     ecx, [ebp+var_8]
.text:0000002A                 add     ecx, 88h ; 'Ãª'  ; this
.text:00000030                 call    ?Init@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEXI@Z ; NCompress::NQuantum::NRangeCoder::CModelDecoder::Init(uint)
.text:00000035                 mov     [ebp+var_C], 0
.text:0000003C                 jmp     short loc_47
.text:0000003E ; ---------------------------------------------------------------------------
.text:0000003E
.text:0000003E loc_3E:                                 ; CODE XREF: NCompress::NQuantum::CDecoder::Init(void)+67j
.text:0000003E                                         ; DATA XREF: .xdata$x:000011BCo
.text:0000003E                 mov     eax, [ebp+var_C]
.text:00000041                 add     eax, 1
.text:00000044                 mov     [ebp+var_C], eax
.text:00000047
.text:00000047 loc_47:                                 ; CODE XREF: NCompress::NQuantum::CDecoder::Init(void)+3Cj
.text:00000047                 cmp     [ebp+var_C], 4
.text:0000004B                 jnb     short loc_69
.text:0000004D                 push    40h ; '@'       ; unsigned int
.text:0000004F                 mov     ecx, [ebp+var_C]
.text:00000052                 imul    ecx, 0CCh
.text:00000058                 mov     edx, [ebp+var_8]
.text:0000005B                 lea     ecx, [edx+ecx+154h] ; this
.text:00000062                 call    ?Init@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEXI@Z ; NCompress::NQuantum::NRangeCoder::CModelDecoder::Init(uint)
.text:00000067                 jmp     short loc_3E
.text:00000069 ; ---------------------------------------------------------------------------
.text:00000069
.text:00000069 loc_69:                                 ; CODE XREF: NCompress::NQuantum::CDecoder::Init(void)+4Bj
.text:00000069                 mov     eax, [ebp+var_8]
.text:0000006C                 cmp     dword ptr [eax+80h], 0
.text:00000073                 jnz     short loc_7E
.text:00000075                 mov     [ebp+var_28], 1
.text:0000007C                 jmp     short loc_8C
.text:0000007E ; ---------------------------------------------------------------------------
.text:0000007E
.text:0000007E loc_7E:                                 ; CODE XREF: NCompress::NQuantum::CDecoder::Init(void)+73j
.text:0000007E                 mov     ecx, [ebp+var_8]
.text:00000081                 mov     edx, [ecx+80h]
.text:00000087                 shl     edx, 1
.text:00000089                 mov     [ebp+var_28], edx
.text:0000008C
.text:0000008C loc_8C:                                 ; CODE XREF: NCompress::NQuantum::CDecoder::Init(void)+7Cj
.text:0000008C                 mov     eax, [ebp+var_28]
.text:0000008F                 mov     [ebp+var_10], eax
.text:00000092                 mov     [ebp+var_20], 18h
.text:00000099                 mov     [ebp+var_1C], 24h ; '$'
.text:000000A0                 mov     [ebp+var_18], 2Ah ; '*'
.text:000000A7                 mov     [ebp+var_C], 0
.text:000000AE                 jmp     short loc_B9
.text:000000B0 ; ---------------------------------------------------------------------------
.text:000000B0
.text:000000B0 loc_B0:                                 ; CODE XREF: NCompress::NQuantum::CDecoder::Init(void)+E9j
.text:000000B0                 mov     ecx, [ebp+var_C]
.text:000000B3                 add     ecx, 1
.text:000000B6                 mov     [ebp+var_C], ecx
.text:000000B9
.text:000000B9 loc_B9:                                 ; CODE XREF: NCompress::NQuantum::CDecoder::Init(void)+AEj
.text:000000B9                 cmp     [ebp+var_C], 3
.text:000000BD                 jnb     short loc_EB
.text:000000BF                 mov     edx, [ebp+var_C]
.text:000000C2                 mov     eax, [ebp+edx*4+var_20]
.text:000000C6                 push    eax
.text:000000C7                 mov     ecx, [ebp+var_10]
.text:000000CA                 push    ecx
.text:000000CB                 call    ??$MyMin@I@@YGIII@Z ; MyMin<uint>(uint,uint)
.text:000000D0                 push    eax             ; unsigned int
.text:000000D1                 mov     edx, [ebp+var_C]
.text:000000D4                 imul    edx, 0CCh
.text:000000DA                 mov     eax, [ebp+var_8]
.text:000000DD                 lea     ecx, [eax+edx+484h] ; this
.text:000000E4                 call    ?Init@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEXI@Z ; NCompress::NQuantum::NRangeCoder::CModelDecoder::Init(uint)
.text:000000E9                 jmp     short loc_B0
.text:000000EB ; ---------------------------------------------------------------------------
.text:000000EB
.text:000000EB loc_EB:                                 ; CODE XREF: NCompress::NQuantum::CDecoder::Init(void)+BDj
.text:000000EB                 push    1Bh             ; unsigned int
.text:000000ED                 mov     ecx, [ebp+var_8]
.text:000000F0                 add     ecx, 6E8h       ; this
.text:000000F6                 call    ?Init@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEXI@Z ; NCompress::NQuantum::NRangeCoder::CModelDecoder::Init(uint)
.text:000000FB                 push    edx
.text:000000FC                 mov     ecx, ebp
.text:000000FE                 push    eax
.text:000000FF                 lea     edx, $LN13
.text:00000105                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000010A                 pop     eax
.text:0000010B                 pop     edx
.text:0000010C                 pop     edi
.text:0000010D                 mov     ecx, [ebp+var_4]
.text:00000110                 xor     ecx, ebp
.text:00000112                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000117                 add     esp, 28h
.text:0000011A                 cmp     ebp, esp
.text:0000011C                 call    __RTC_CheckEsp
.text:00000121                 mov     esp, ebp
.text:00000123                 pop     ebp
.text:00000124                 retn
.text:00000124 ?Init@CDecoder@NQuantum@NCompress@@AAEXXZ endp
.text:00000124
.text:00000124 ; ---------------------------------------------------------------------------
.text:00000125                 align 4
.text:00000128 $LN13           dd 1                    ; DATA XREF: NCompress::NQuantum::CDecoder::Init(void)+FFo
.text:0000012C                 dd offset $LN12
.text:00000130 $LN12           dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:0000012Co
.text:00000138                 dd offset $LN11         ; "kNumPosSymbolsMax"
.text:0000013C $LN11           db 'kNumPosSymbolsMax',0 ; DATA XREF: .text:00000138o
.text:0000014E                 align 10h
.text:00000150
.text:00000150 ; =============== S U B R O U T I N E =======================================
.text:00000150
.text:00000150 ; Attributes: bp-based frame
.text:00000150
.text:00000150 ; __int32 __thiscall NCompress::NQuantum::CDecoder::CodeSpec(NCompress::NQuantum::CDecoder *this, unsigned int)
.text:00000150                 public ?CodeSpec@CDecoder@NQuantum@NCompress@@AAEJI@Z
.text:00000150 ?CodeSpec@CDecoder@NQuantum@NCompress@@AAEJI@Z proc near
.text:00000150                                         ; CODE XREF: NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+113p
.text:00000150
.text:00000150 var_28          = dword ptr -28h
.text:00000150 var_24          = dword ptr -24h
.text:00000150 var_20          = dword ptr -20h
.text:00000150 var_1C          = dword ptr -1Ch
.text:00000150 var_18          = dword ptr -18h
.text:00000150 var_14          = dword ptr -14h
.text:00000150 var_D           = byte ptr -0Dh
.text:00000150 var_C           = dword ptr -0Ch
.text:00000150 var_5           = byte ptr -5
.text:00000150 var_4           = dword ptr -4
.text:00000150 arg_0           = dword ptr  8
.text:00000150
.text:00000150                 push    ebp
.text:00000151                 mov     ebp, esp
.text:00000153                 sub     esp, 28h
.text:00000156                 push    ebx
.text:00000157                 push    esi
.text:00000158                 push    edi
.text:00000159                 push    ecx
.text:0000015A                 lea     edi, [ebp+var_28]
.text:0000015D                 mov     ecx, 0Ah
.text:00000162                 mov     eax, 0CCCCCCCCh
.text:00000167                 rep stosd
.text:00000169                 pop     ecx
.text:0000016A                 mov     [ebp+var_4], ecx
.text:0000016D                 mov     eax, [ebp+var_4]
.text:00000170                 cmp     dword ptr [eax+78h], 0FFFFFFFEh
.text:00000174                 jnz     short loc_18B
.text:00000176                 mov     ecx, [ebp+var_4]
.text:00000179                 add     ecx, 30h ; '0'  ; this
.text:0000017C                 call    ?Init@CDecoder@NRangeCoder@NQuantum@NCompress@@QAEXXZ ; NCompress::NQuantum::NRangeCoder::CDecoder::Init(void)
.text:00000181                 mov     ecx, [ebp+var_4]
.text:00000184                 mov     dword ptr [ecx+78h], 0
.text:0000018B
.text:0000018B loc_18B:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+24j
.text:0000018B                 cmp     [ebp+arg_0], 0
.text:0000018F                 jnz     short loc_198
.text:00000191                 xor     eax, eax
.text:00000193                 jmp     loc_3C3
.text:00000198 ; ---------------------------------------------------------------------------
.text:00000198
.text:00000198 loc_198:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+3Fj
.text:00000198                                         ; NCompress::NQuantum::CDecoder::CodeSpec(uint)+94j
.text:00000198                 mov     edx, [ebp+var_4]
.text:0000019B                 cmp     dword ptr [edx+78h], 0
.text:0000019F                 jle     short loc_1E6
.text:000001A1                 cmp     [ebp+arg_0], 0
.text:000001A5                 jbe     short loc_1E6
.text:000001A7                 mov     eax, [ebp+var_4]
.text:000001AA                 mov     ecx, [eax+78h]
.text:000001AD                 sub     ecx, 1
.text:000001B0                 mov     edx, [ebp+var_4]
.text:000001B3                 mov     [edx+78h], ecx
.text:000001B6                 mov     eax, [ebp+var_4]
.text:000001B9                 mov     ecx, [eax+7Ch]
.text:000001BC                 push    ecx             ; unsigned int
.text:000001BD                 mov     ecx, [ebp+var_4]
.text:000001C0                 add     ecx, 8          ; this
.text:000001C3                 call    ?GetByte@CLzOutWindow@@QBEEI@Z ; CLzOutWindow::GetByte(uint)
.text:000001C8                 mov     [ebp+var_5], al
.text:000001CB                 movzx   edx, [ebp+var_5]
.text:000001CF                 push    edx             ; unsigned __int8
.text:000001D0                 mov     ecx, [ebp+var_4]
.text:000001D3                 add     ecx, 8          ; this
.text:000001D6                 call    ?PutByte@CLzOutWindow@@QAEXE@Z ; CLzOutWindow::PutByte(uchar)
.text:000001DB                 mov     eax, [ebp+arg_0]
.text:000001DE                 sub     eax, 1
.text:000001E1                 mov     [ebp+arg_0], eax
.text:000001E4                 jmp     short loc_198
.text:000001E6 ; ---------------------------------------------------------------------------
.text:000001E6
.text:000001E6 loc_1E6:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+4Fj
.text:000001E6                                         ; NCompress::NQuantum::CDecoder::CodeSpec(uint)+55j ...
.text:000001E6                 cmp     [ebp+arg_0], 0
.text:000001EA                 jbe     loc_3AF
.text:000001F0                 mov     ecx, [ebp+var_4]
.text:000001F3                 add     ecx, 40h ; '@'  ; this
.text:000001F6                 call    ?WasFinished@CStreamBitDecoder@NQuantum@NCompress@@QBE_NXZ ; NCompress::NQuantum::CStreamBitDecoder::WasFinished(void)
.text:000001FB                 movzx   ecx, al
.text:000001FE                 test    ecx, ecx
.text:00000200                 jz      short loc_20C
.text:00000202                 mov     eax, 1
.text:00000207                 jmp     loc_3C3
.text:0000020C ; ---------------------------------------------------------------------------
.text:0000020C
.text:0000020C loc_20C:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+B0j
.text:0000020C                 mov     edx, [ebp+var_4]
.text:0000020F                 add     edx, 30h ; '0'
.text:00000212                 push    edx             ; struct NCompress::NQuantum::NRangeCoder::CDecoder *
.text:00000213                 mov     ecx, [ebp+var_4]
.text:00000216                 add     ecx, 88h ; 'Ãª'  ; this
.text:0000021C                 call    ?Decode@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEIPAVCDecoder@234@@Z ; NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)
.text:00000221                 mov     [ebp+var_C], eax
.text:00000224                 cmp     [ebp+var_C], 4
.text:00000228                 jnb     short loc_272
.text:0000022A                 mov     ebx, [ebp+var_C]
.text:0000022D                 shl     ebx, 6
.text:00000230                 mov     eax, [ebp+var_4]
.text:00000233                 add     eax, 30h ; '0'
.text:00000236                 push    eax             ; struct NCompress::NQuantum::NRangeCoder::CDecoder *
.text:00000237                 mov     ecx, [ebp+var_C]
.text:0000023A                 imul    ecx, 0CCh
.text:00000240                 mov     edx, [ebp+var_4]
.text:00000243                 lea     ecx, [edx+ecx+154h] ; this
.text:0000024A                 call    ?Decode@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEIPAVCDecoder@234@@Z ; NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)
.text:0000024F                 add     ebx, eax
.text:00000251                 mov     [ebp+var_D], bl
.text:00000254                 movzx   eax, [ebp+var_D]
.text:00000258                 push    eax             ; unsigned __int8
.text:00000259                 mov     ecx, [ebp+var_4]
.text:0000025C                 add     ecx, 8          ; this
.text:0000025F                 call    ?PutByte@CLzOutWindow@@QAEXE@Z ; CLzOutWindow::PutByte(uchar)
.text:00000264                 mov     ecx, [ebp+arg_0]
.text:00000267                 sub     ecx, 1
.text:0000026A                 mov     [ebp+arg_0], ecx
.text:0000026D                 jmp     loc_3AA
.text:00000272 ; ---------------------------------------------------------------------------
.text:00000272
.text:00000272 loc_272:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+D8j
.text:00000272                 mov     edx, [ebp+var_C]
.text:00000275                 sub     edx, 4
.text:00000278                 mov     [ebp+var_C], edx
.text:0000027B                 mov     eax, [ebp+var_C]
.text:0000027E                 add     eax, 3
.text:00000281                 mov     [ebp+var_14], eax
.text:00000284                 cmp     [ebp+var_C], 2
.text:00000288                 jnz     short loc_2F8
.text:0000028A                 mov     ecx, [ebp+var_4]
.text:0000028D                 add     ecx, 30h ; '0'
.text:00000290                 push    ecx             ; struct NCompress::NQuantum::NRangeCoder::CDecoder *
.text:00000291                 mov     ecx, [ebp+var_4]
.text:00000294                 add     ecx, 6E8h       ; this
.text:0000029A                 call    ?Decode@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEIPAVCDecoder@234@@Z ; NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)
.text:0000029F                 mov     [ebp+var_18], eax
.text:000002A2                 cmp     [ebp+var_18], 6
.text:000002A6                 jb      short loc_2EF
.text:000002A8                 mov     edx, [ebp+var_18]
.text:000002AB                 sub     edx, 2
.text:000002AE                 mov     [ebp+var_18], edx
.text:000002B1                 mov     eax, [ebp+var_18]
.text:000002B4                 shr     eax, 2
.text:000002B7                 mov     [ebp+var_1C], eax
.text:000002BA                 mov     edx, [ebp+var_18]
.text:000002BD                 and     edx, 3
.text:000002C0                 or      edx, 4
.text:000002C3                 mov     ecx, [ebp+var_1C]
.text:000002C6                 shl     edx, cl
.text:000002C8                 mov     eax, [ebp+var_14]
.text:000002CB                 lea     ecx, [eax+edx-2]
.text:000002CF                 mov     [ebp+var_14], ecx
.text:000002D2                 cmp     [ebp+var_1C], 6
.text:000002D6                 jge     short loc_2ED
.text:000002D8                 mov     edx, [ebp+var_1C]
.text:000002DB                 push    edx             ; int
.text:000002DC                 mov     ecx, [ebp+var_4]
.text:000002DF                 add     ecx, 40h ; '@'  ; this
.text:000002E2                 call    ?ReadBits@CStreamBitDecoder@NQuantum@NCompress@@QAEIH@Z ; NCompress::NQuantum::CStreamBitDecoder::ReadBits(int)
.text:000002E7                 add     eax, [ebp+var_14]
.text:000002EA                 mov     [ebp+var_14], eax
.text:000002ED
.text:000002ED loc_2ED:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+186j
.text:000002ED                 jmp     short loc_2F8
.text:000002EF ; ---------------------------------------------------------------------------
.text:000002EF
.text:000002EF loc_2EF:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+156j
.text:000002EF                 mov     eax, [ebp+var_14]
.text:000002F2                 add     eax, [ebp+var_18]
.text:000002F5                 mov     [ebp+var_14], eax
.text:000002F8
.text:000002F8 loc_2F8:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+138j
.text:000002F8                                         ; NCompress::NQuantum::CDecoder::CodeSpec(uint):loc_2EDj
.text:000002F8                 mov     ecx, [ebp+var_4]
.text:000002FB                 add     ecx, 30h ; '0'
.text:000002FE                 push    ecx             ; struct NCompress::NQuantum::NRangeCoder::CDecoder *
.text:000002FF                 mov     edx, [ebp+var_C]
.text:00000302                 imul    edx, 0CCh
.text:00000308                 mov     eax, [ebp+var_4]
.text:0000030B                 lea     ecx, [eax+edx+484h] ; this
.text:00000312                 call    ?Decode@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEIPAVCDecoder@234@@Z ; NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)
.text:00000317                 mov     [ebp+var_20], eax
.text:0000031A                 cmp     [ebp+var_20], 4
.text:0000031E                 jb      short loc_34D
.text:00000320                 mov     ecx, [ebp+var_20]
.text:00000323                 shr     ecx, 1
.text:00000325                 sub     ecx, 1
.text:00000328                 mov     [ebp+var_24], ecx
.text:0000032B                 mov     esi, [ebp+var_20]
.text:0000032E                 and     esi, 1
.text:00000331                 or      esi, 2
.text:00000334                 mov     ecx, [ebp+var_24]
.text:00000337                 shl     esi, cl
.text:00000339                 mov     edx, [ebp+var_24]
.text:0000033C                 push    edx             ; int
.text:0000033D                 mov     ecx, [ebp+var_4]
.text:00000340                 add     ecx, 40h ; '@'  ; this
.text:00000343                 call    ?ReadBits@CStreamBitDecoder@NQuantum@NCompress@@QAEIH@Z ; NCompress::NQuantum::CStreamBitDecoder::ReadBits(int)
.text:00000348                 add     esi, eax
.text:0000034A                 mov     [ebp+var_20], esi
.text:0000034D
.text:0000034D loc_34D:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+1CEj
.text:0000034D                 mov     eax, [ebp+var_14]
.text:00000350                 mov     [ebp+var_28], eax
.text:00000353                 mov     ecx, [ebp+var_14]
.text:00000356                 cmp     ecx, [ebp+arg_0]
.text:00000359                 jbe     short loc_361
.text:0000035B                 mov     edx, [ebp+arg_0]
.text:0000035E                 mov     [ebp+var_28], edx
.text:00000361
.text:00000361 loc_361:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+209j
.text:00000361                 mov     eax, [ebp+var_28]
.text:00000364                 push    eax             ; unsigned int
.text:00000365                 mov     ecx, [ebp+var_20]
.text:00000368                 push    ecx             ; unsigned int
.text:00000369                 mov     ecx, [ebp+var_4]
.text:0000036C                 add     ecx, 8          ; this
.text:0000036F                 call    ?CopyBlock@CLzOutWindow@@QAE_NII@Z ; CLzOutWindow::CopyBlock(uint,uint)
.text:00000374                 movzx   edx, al
.text:00000377                 test    edx, edx
.text:00000379                 jnz     short loc_382
.text:0000037B                 mov     eax, 1
.text:00000380                 jmp     short loc_3C3
.text:00000382 ; ---------------------------------------------------------------------------
.text:00000382
.text:00000382 loc_382:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+229j
.text:00000382                 mov     eax, [ebp+arg_0]
.text:00000385                 sub     eax, [ebp+var_28]
.text:00000388                 mov     [ebp+arg_0], eax
.text:0000038B                 mov     ecx, [ebp+var_14]
.text:0000038E                 sub     ecx, [ebp+var_28]
.text:00000391                 mov     [ebp+var_14], ecx
.text:00000394                 jz      short loc_3AA
.text:00000396                 mov     edx, [ebp+var_4]
.text:00000399                 mov     eax, [ebp+var_14]
.text:0000039C                 mov     [edx+78h], eax
.text:0000039F                 mov     ecx, [ebp+var_4]
.text:000003A2                 mov     edx, [ebp+var_20]
.text:000003A5                 mov     [ecx+7Ch], edx
.text:000003A8                 jmp     short loc_3AF
.text:000003AA ; ---------------------------------------------------------------------------
.text:000003AA
.text:000003AA loc_3AA:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+11Dj
.text:000003AA                                         ; NCompress::NQuantum::CDecoder::CodeSpec(uint)+244j
.text:000003AA                 jmp     loc_1E6
.text:000003AF ; ---------------------------------------------------------------------------
.text:000003AF
.text:000003AF loc_3AF:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+9Aj
.text:000003AF                                         ; NCompress::NQuantum::CDecoder::CodeSpec(uint)+258j
.text:000003AF                 mov     ecx, [ebp+var_4]
.text:000003B2                 add     ecx, 40h ; '@'  ; this
.text:000003B5                 call    ?WasFinished@CStreamBitDecoder@NQuantum@NCompress@@QBE_NXZ ; NCompress::NQuantum::CStreamBitDecoder::WasFinished(void)
.text:000003BA                 movzx   eax, al
.text:000003BD                 neg     eax
.text:000003BF                 sbb     eax, eax
.text:000003C1                 neg     eax
.text:000003C3
.text:000003C3 loc_3C3:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+43j
.text:000003C3                                         ; NCompress::NQuantum::CDecoder::CodeSpec(uint)+B7j ...
.text:000003C3                 pop     edi
.text:000003C4                 pop     esi
.text:000003C5                 pop     ebx
.text:000003C6                 add     esp, 28h
.text:000003C9                 cmp     ebp, esp
.text:000003CB                 call    __RTC_CheckEsp
.text:000003D0                 mov     esp, ebp
.text:000003D2                 pop     ebp
.text:000003D3                 retn    4
.text:000003D3 ?CodeSpec@CDecoder@NQuantum@NCompress@@AAEJI@Z endp
.text:000003D3
.text:000003D3 ; ---------------------------------------------------------------------------
.text:000003D6                 align 10h
.text:000003E0
.text:000003E0 ; =============== S U B R O U T I N E =======================================
.text:000003E0
.text:000003E0 ; Attributes: bp-based frame
.text:000003E0
.text:000003E0 ; __int32 __thiscall NCompress::NQuantum::CDecoder::CodeReal(NCompress::NQuantum::CDecoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:000003E0                 public ?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:000003E0 ?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:000003E0                                         ; CODE XREF: NCompress::NQuantum::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+59p
.text:000003E0
.text:000003E0 var_78          = dword ptr -78h
.text:000003E0 var_74          = dword ptr -74h
.text:000003E0 var_70          = dword ptr -70h
.text:000003E0 var_6C          = dword ptr -6Ch
.text:000003E0 var_68          = dword ptr -68h
.text:000003E0 var_64          = dword ptr -64h
.text:000003E0 var_5C          = dword ptr -5Ch
.text:000003E0 var_58          = dword ptr -58h
.text:000003E0 var_4C          = dword ptr -4Ch
.text:000003E0 var_48          = dword ptr -48h
.text:000003E0 var_40          = dword ptr -40h
.text:000003E0 var_3C          = dword ptr -3Ch
.text:000003E0 var_38          = dword ptr -38h
.text:000003E0 var_34          = dword ptr -34h
.text:000003E0 var_30          = dword ptr -30h
.text:000003E0 var_2C          = dword ptr -2Ch
.text:000003E0 var_24          = byte ptr -24h
.text:000003E0 var_20          = byte ptr -20h
.text:000003E0 var_18          = dword ptr -18h
.text:000003E0 var_14          = dword ptr -14h
.text:000003E0 var_10          = dword ptr -10h
.text:000003E0 var_C           = dword ptr -0Ch
.text:000003E0 var_4           = dword ptr -4
.text:000003E0 arg_0           = dword ptr  8
.text:000003E0 arg_4           = dword ptr  0Ch
.text:000003E0 arg_C           = dword ptr  14h
.text:000003E0 arg_10          = dword ptr  18h
.text:000003E0
.text:000003E0                 push    ebp
.text:000003E1                 mov     ebp, esp
.text:000003E3                 push    0FFFFFFFFh
.text:000003E5                 push    offset __ehhandler$?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:000003EA                 mov     eax, large fs:0
.text:000003F0                 push    eax
.text:000003F1                 sub     esp, 6Ch
.text:000003F4                 push    esi
.text:000003F5                 push    edi
.text:000003F6                 push    ecx
.text:000003F7                 lea     edi, [ebp+var_78]
.text:000003FA                 mov     ecx, 1Bh
.text:000003FF                 mov     eax, 0CCCCCCCCh
.text:00000404                 rep stosd
.text:00000406                 pop     ecx
.text:00000407                 mov     eax, dword ptr ds:___security_cookie
.text:0000040C                 xor     eax, ebp
.text:0000040E                 push    eax
.text:0000040F                 lea     eax, [ebp+var_C]
.text:00000412                 mov     large fs:0, eax
.text:00000418                 mov     [ebp+var_10], ecx
.text:0000041B                 cmp     [ebp+arg_C], 0
.text:0000041F                 jnz     short loc_42B
.text:00000421                 mov     eax, 80070057h
.text:00000426                 jmp     loc_5B4
.text:0000042B ; ---------------------------------------------------------------------------
.text:0000042B
.text:0000042B loc_42B:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3Fj
.text:0000042B                 mov     eax, [ebp+arg_C]
.text:0000042E                 mov     ecx, [eax]
.text:00000430                 mov     [ebp+var_18], ecx
.text:00000433                 mov     edx, [eax+4]
.text:00000436                 mov     [ebp+var_14], edx
.text:00000439                 mov     eax, [ebp+arg_0]
.text:0000043C                 push    eax             ; struct ISequentialInStream *
.text:0000043D                 mov     ecx, [ebp+var_10]
.text:00000440                 add     ecx, 30h ; '0'  ; this
.text:00000443                 call    ?SetStream@CDecoder@NRangeCoder@NQuantum@NCompress@@QAEXPAUISequentialInStream@@@Z ; NCompress::NQuantum::NRangeCoder::CDecoder::SetStream(ISequentialInStream *)
.text:00000448                 mov     ecx, [ebp+arg_4]
.text:0000044B                 push    ecx             ; struct ISequentialOutStream *
.text:0000044C                 mov     ecx, [ebp+var_10]
.text:0000044F                 add     ecx, 8          ; this
.text:00000452                 call    ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z ; COutBuffer::SetStream(ISequentialOutStream *)
.text:00000457                 mov     esi, esp
.text:00000459                 mov     edx, [ebp+arg_C]
.text:0000045C                 push    edx
.text:0000045D                 mov     eax, [ebp+var_10]
.text:00000460                 mov     ecx, [eax]
.text:00000462                 mov     edx, [ebp+var_10]
.text:00000465                 push    edx
.text:00000466                 mov     eax, [ecx+10h]
.text:00000469                 call    eax
.text:0000046B                 cmp     esi, esp
.text:0000046D                 call    __RTC_CheckEsp
.text:00000472                 mov     ecx, [ebp+var_10]
.text:00000475                 push    ecx             ; struct NCompress::NQuantum::CDecoder *
.text:00000476                 lea     ecx, [ebp+var_24] ; this
.text:00000479                 call    ??0CDecoderFlusher@CDecoder@NQuantum@NCompress@@QAE@PAV123@@Z ; NCompress::NQuantum::CDecoder::CDecoderFlusher::CDecoderFlusher(NCompress::NQuantum::CDecoder *)
.text:0000047E                 mov     [ebp+var_4], 0
.text:00000485                 mov     ecx, [ebp+var_10]
.text:00000488                 add     ecx, 8          ; this
.text:0000048B                 call    ?GetProcessedSize@COutBuffer@@QBE_KXZ ; COutBuffer::GetProcessedSize(void)
.text:00000490                 mov     [ebp+var_30], eax
.text:00000493                 mov     [ebp+var_2C], edx
.text:00000496
.text:00000496 loc_496:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_58Ej
.text:00000496                 mov     [ebp+var_34], 40000h
.text:0000049D                 mov     ecx, [ebp+var_10]
.text:000004A0                 add     ecx, 8          ; this
.text:000004A3                 call    ?GetProcessedSize@COutBuffer@@QBE_KXZ ; COutBuffer::GetProcessedSize(void)
.text:000004A8                 sub     eax, [ebp+var_30]
.text:000004AB                 sbb     edx, [ebp+var_2C]
.text:000004AE                 mov     ecx, [ebp+var_18]
.text:000004B1                 sub     ecx, eax
.text:000004B3                 mov     eax, [ebp+var_14]
.text:000004B6                 sbb     eax, edx
.text:000004B8                 mov     [ebp+var_3C], ecx
.text:000004BB                 mov     [ebp+var_38], eax
.text:000004BE                 mov     ecx, [ebp+var_34]
.text:000004C1                 xor     edx, edx
.text:000004C3                 mov     [ebp+var_78], ecx
.text:000004C6                 mov     [ebp+var_74], edx
.text:000004C9                 mov     eax, [ebp+var_74]
.text:000004CC                 cmp     eax, [ebp+var_38]
.text:000004CF                 jb      short loc_4E1
.text:000004D1                 ja      short loc_4DB
.text:000004D3                 mov     ecx, [ebp+var_78]
.text:000004D6                 cmp     ecx, [ebp+var_3C]
.text:000004D9                 jbe     short loc_4E1
.text:000004DB
.text:000004DB loc_4DB:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+F1j
.text:000004DB                 mov     edx, [ebp+var_3C]
.text:000004DE                 mov     [ebp+var_34], edx
.text:000004E1
.text:000004E1 loc_4E1:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+EFj
.text:000004E1                                         ; NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+F9j
.text:000004E1                 cmp     [ebp+var_34], 0
.text:000004E5                 jnz     short loc_4EC
.text:000004E7                 jmp     loc_593
.text:000004EC ; ---------------------------------------------------------------------------
.text:000004EC
.text:000004EC loc_4EC:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+105j
.text:000004EC                 mov     eax, [ebp+var_34]
.text:000004EF                 push    eax             ; unsigned int
.text:000004F0                 mov     ecx, [ebp+var_10] ; this
.text:000004F3                 call    ?CodeSpec@CDecoder@NQuantum@NCompress@@AAEJI@Z ; NCompress::NQuantum::CDecoder::CodeSpec(uint)
.text:000004F8                 mov     [ebp+var_40], eax
.text:000004FB                 cmp     [ebp+var_40], 0
.text:000004FF                 jz      short loc_51E
.text:00000501                 mov     ecx, [ebp+var_40]
.text:00000504                 mov     [ebp+var_68], ecx
.text:00000507                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000050E                 lea     ecx, [ebp+var_24] ; this
.text:00000511                 call    ??1CDecoderFlusher@CDecoder@NQuantum@NCompress@@QAE@XZ ; NCompress::NQuantum::CDecoder::CDecoderFlusher::~CDecoderFlusher(void)
.text:00000516                 mov     eax, [ebp+var_68]
.text:00000519                 jmp     loc_5B4
.text:0000051E ; ---------------------------------------------------------------------------
.text:0000051E
.text:0000051E loc_51E:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+11Fj
.text:0000051E                 cmp     [ebp+arg_10], 0
.text:00000522                 jz      short loc_58E
.text:00000524                 mov     ecx, [ebp+var_10]
.text:00000527                 add     ecx, 30h ; '0'  ; this
.text:0000052A                 call    ?GetProcessedSize@CDecoder@NRangeCoder@NQuantum@NCompress@@QBE_KXZ ; NCompress::NQuantum::NRangeCoder::CDecoder::GetProcessedSize(void)
.text:0000052F                 mov     [ebp+var_4C], eax
.text:00000532                 mov     [ebp+var_48], edx
.text:00000535                 mov     ecx, [ebp+var_10]
.text:00000538                 add     ecx, 8          ; this
.text:0000053B                 call    ?GetProcessedSize@COutBuffer@@QBE_KXZ ; COutBuffer::GetProcessedSize(void)
.text:00000540                 sub     eax, [ebp+var_30]
.text:00000543                 sbb     edx, [ebp+var_2C]
.text:00000546                 mov     [ebp+var_5C], eax
.text:00000549                 mov     [ebp+var_58], edx
.text:0000054C                 mov     esi, esp
.text:0000054E                 lea     edx, [ebp+var_5C]
.text:00000551                 push    edx
.text:00000552                 lea     eax, [ebp+var_4C]
.text:00000555                 push    eax
.text:00000556                 mov     ecx, [ebp+arg_10]
.text:00000559                 mov     edx, [ecx]
.text:0000055B                 mov     eax, [ebp+arg_10]
.text:0000055E                 push    eax
.text:0000055F                 mov     ecx, [edx+0Ch]
.text:00000562                 call    ecx
.text:00000564                 cmp     esi, esp
.text:00000566                 call    __RTC_CheckEsp
.text:0000056B                 mov     [ebp+var_64], eax
.text:0000056E                 cmp     [ebp+var_64], 0
.text:00000572                 jz      short loc_58E
.text:00000574                 mov     edx, [ebp+var_64]
.text:00000577                 mov     [ebp+var_6C], edx
.text:0000057A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000581                 lea     ecx, [ebp+var_24] ; this
.text:00000584                 call    ??1CDecoderFlusher@CDecoder@NQuantum@NCompress@@QAE@XZ ; NCompress::NQuantum::CDecoder::CDecoderFlusher::~CDecoderFlusher(void)
.text:00000589                 mov     eax, [ebp+var_6C]
.text:0000058C                 jmp     short loc_5B4
.text:0000058E ; ---------------------------------------------------------------------------
.text:0000058E
.text:0000058E loc_58E:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+142j
.text:0000058E                                         ; NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+192j
.text:0000058E                 jmp     loc_496
.text:00000593 ; ---------------------------------------------------------------------------
.text:00000593
.text:00000593 loc_593:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+107j
.text:00000593                 mov     [ebp+var_20], 0
.text:00000597                 mov     ecx, [ebp+var_10] ; this
.text:0000059A                 call    ?Flush@CDecoder@NQuantum@NCompress@@QAEJXZ ; NCompress::NQuantum::CDecoder::Flush(void)
.text:0000059F                 mov     [ebp+var_70], eax
.text:000005A2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000005A9                 lea     ecx, [ebp+var_24] ; this
.text:000005AC                 call    ??1CDecoderFlusher@CDecoder@NQuantum@NCompress@@QAE@XZ ; NCompress::NQuantum::CDecoder::CDecoderFlusher::~CDecoderFlusher(void)
.text:000005B1                 mov     eax, [ebp+var_70]
.text:000005B4
.text:000005B4 loc_5B4:                                ; CODE XREF: NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+46j
.text:000005B4                                         ; NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+139j ...
.text:000005B4                 push    edx
.text:000005B5                 mov     ecx, ebp
.text:000005B7                 push    eax
.text:000005B8                 lea     edx, $LN18
.text:000005BE                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000005C3                 pop     eax
.text:000005C4                 pop     edx
.text:000005C5                 mov     ecx, [ebp+var_C]
.text:000005C8                 mov     large fs:0, ecx
.text:000005CF                 pop     ecx
.text:000005D0                 pop     edi
.text:000005D1                 pop     esi
.text:000005D2                 add     esp, 78h
.text:000005D5                 cmp     ebp, esp
.text:000005D7                 call    __RTC_CheckEsp
.text:000005DC                 mov     esp, ebp
.text:000005DE                 pop     ebp
.text:000005DF                 retn    14h
.text:000005DF ?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:000005DF
.text:000005DF ; ---------------------------------------------------------------------------
.text:000005E2                 align 4
.text:000005E4 $LN18           dd 3                    ; DATA XREF: NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1D8o
.text:000005E8                 dd offset $LN17
.text:000005EC $LN17           dd 0FFFFFFDCh, 8        ; DATA XREF: .text:000005E8o
.text:000005F4                 dd offset $LN13_0       ; "flusher"
.text:000005F8                 dd 0FFFFFFB4h, 8
.text:00000600                 dd offset $LN14         ; "inSize"
.text:00000604                 dd 0FFFFFFA4h, 8
.text:0000060C                 dd offset $LN15         ; "nowPos64"
.text:00000610 $LN15           db 'nowPos64',0         ; DATA XREF: .text:0000060Co
.text:00000619 $LN14           db 'inSize',0           ; DATA XREF: .text:00000600o
.text:00000620 $LN13_0         db 'flusher',0          ; DATA XREF: .text:000005F4o
.text:00000628                 align 10h
.text:00000630
.text:00000630 ; =============== S U B R O U T I N E =======================================
.text:00000630
.text:00000630 ; Attributes: bp-based frame
.text:00000630
.text:00000630 ; __int32 __cdecl NCompress::NQuantum::CDecoder::Code(NCompress::NQuantum::CDecoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00000630                 public ?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000630 ?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00000630
.text:00000630 var_38          = dword ptr -38h
.text:00000630 var_10          = dword ptr -10h
.text:00000630 var_C           = dword ptr -0Ch
.text:00000630 var_4           = dword ptr -4
.text:00000630 this            = dword ptr  8
.text:00000630 arg_4           = dword ptr  0Ch
.text:00000630 arg_8           = dword ptr  10h
.text:00000630 arg_C           = dword ptr  14h
.text:00000630 arg_10          = dword ptr  18h
.text:00000630 arg_14          = dword ptr  1Ch
.text:00000630
.text:00000630 ; FUNCTION CHUNK AT .text:00000700 SIZE 0000002F BYTES
.text:00000630
.text:00000630                 push    ebp
.text:00000631                 mov     ebp, esp
.text:00000633                 push    0FFFFFFFFh
.text:00000635                 push    offset __ehhandler$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:0000063A                 mov     eax, large fs:0
.text:00000640                 push    eax
.text:00000641                 push    ecx
.text:00000642                 sub     esp, 28h
.text:00000645                 push    ebx
.text:00000646                 push    esi
.text:00000647                 push    edi
.text:00000648                 lea     edi, [ebp+var_38]
.text:0000064B                 mov     ecx, 0Ah
.text:00000650                 mov     eax, 0CCCCCCCCh
.text:00000655                 rep stosd
.text:00000657                 mov     eax, dword ptr ds:___security_cookie
.text:0000065C                 xor     eax, ebp
.text:0000065E                 push    eax
.text:0000065F                 lea     eax, [ebp+var_C]
.text:00000662                 mov     large fs:0, eax
.text:00000668                 mov     [ebp+var_10], esp
.text:0000066B                 mov     [ebp+var_4], 0
.text:00000672                 mov     eax, [ebp+arg_14]
.text:00000675                 push    eax             ; struct ICompressProgressInfo *
.text:00000676                 mov     ecx, [ebp+arg_10]
.text:00000679                 push    ecx             ; unsigned __int64 *
.text:0000067A                 mov     edx, [ebp+arg_C]
.text:0000067D                 push    edx             ; unsigned __int64 *
.text:0000067E                 mov     eax, [ebp+arg_8]
.text:00000681                 push    eax             ; struct ISequentialOutStream *
.text:00000682                 mov     ecx, [ebp+arg_4]
.text:00000685                 push    ecx             ; struct ISequentialInStream *
.text:00000686                 mov     ecx, [ebp+this] ; this
.text:00000689                 call    ?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.text:0000068E                 mov     [ebp+var_38], eax
.text:00000691                 mov     eax, [ebp+var_38]
.text:00000694                 jmp     short loc_700
.text:00000694 ?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:00000694
.text:00000696
.text:00000696 ; =============== S U B R O U T I N E =======================================
.text:00000696
.text:00000696
.text:00000696 __catch$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 proc near
.text:00000696                                         ; DATA XREF: .xdata$x:000011A8o
.text:00000696                 mov     edx, [ebp-18h]
.text:00000699                 mov     eax, [edx]
.text:0000069B                 mov     [ebp-2Ch], eax
.text:0000069E                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000006A5                 mov     eax, offset $LN9
.text:000006AA                 retn
.text:000006AA __catch$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 endp
.text:000006AA
.text:000006AB ; ---------------------------------------------------------------------------
.text:000006AB                 mov     eax, offset __tryend$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
.text:000006B0                 retn
.text:000006B1
.text:000006B1 ; =============== S U B R O U T I N E =======================================
.text:000006B1
.text:000006B1
.text:000006B1 __catch$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1 proc near
.text:000006B1                                         ; DATA XREF: .xdata$x:000011B8o
.text:000006B1                 mov     ecx, [ebp-24h]
.text:000006B4                 mov     edx, [ecx]
.text:000006B6                 mov     [ebp-30h], edx
.text:000006B9                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000006C0                 mov     eax, offset $LN11_0
.text:000006C5                 retn
.text:000006C5 __catch$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1 endp
.text:000006C5
.text:000006C6 ; ---------------------------------------------------------------------------
.text:000006C6                 mov     eax, offset __tryend$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
.text:000006CB                 retn
.text:000006CC
.text:000006CC ; =============== S U B R O U T I N E =======================================
.text:000006CC
.text:000006CC
.text:000006CC __catch$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2 proc near
.text:000006CC                                         ; DATA XREF: .xdata$x:000011C8o
.text:000006CC                 mov     dword ptr [ebp-34h], 1
.text:000006D3                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000006DA                 mov     eax, offset $LN13_1
.text:000006DF                 retn
.text:000006DF __catch$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2 endp
.text:000006DF
.text:000006E0 ; ---------------------------------------------------------------------------
.text:000006E0                 mov     eax, offset __tryend$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
.text:000006E5                 retn
.text:000006E6 ; ---------------------------------------------------------------------------
.text:000006E6
.text:000006E6 __tryend$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3:
.text:000006E6                                         ; DATA XREF: .text:000006ABo
.text:000006E6                                         ; .text:000006C6o ...
.text:000006E6                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000006ED                 jmp     short loc_6F4
.text:000006EF ; ---------------------------------------------------------------------------
.text:000006EF
.text:000006EF $LN13_1:                                ; DATA XREF: __catch$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2+Eo
.text:000006EF                 mov     eax, [ebp-34h]
.text:000006F2                 jmp     short loc_700
.text:000006F4 ; ---------------------------------------------------------------------------
.text:000006F4
.text:000006F4 loc_6F4:                                ; CODE XREF: .text:000006EDj
.text:000006F4                 jmp     short loc_6FB
.text:000006F6 ; ---------------------------------------------------------------------------
.text:000006F6
.text:000006F6 $LN11_0:                                ; DATA XREF: __catch$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1+Fo
.text:000006F6                 mov     eax, [ebp-30h]
.text:000006F9                 jmp     short loc_700
.text:000006FB ; ---------------------------------------------------------------------------
.text:000006FB
.text:000006FB loc_6FB:                                ; CODE XREF: .text:loc_6F4j
.text:000006FB                 jmp     short loc_700
.text:000006FD ; ---------------------------------------------------------------------------
.text:000006FD
.text:000006FD $LN9:                                   ; DATA XREF: __catch$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0+Fo
.text:000006FD                 mov     eax, [ebp-2Ch]
.text:00000700 ; START OF FUNCTION CHUNK FOR ?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000700
.text:00000700 loc_700:                                ; CODE XREF: NCompress::NQuantum::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+64j
.text:00000700                                         ; .text:000006F2j ...
.text:00000700                 push    edx
.text:00000701                 mov     ecx, ebp
.text:00000703                 push    eax
.text:00000704                 lea     edx, $LN21
.text:0000070A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000070F                 pop     eax
.text:00000710                 pop     edx
.text:00000711                 mov     ecx, [ebp+var_C]
.text:00000714                 mov     large fs:0, ecx
.text:0000071B                 pop     ecx
.text:0000071C                 pop     edi
.text:0000071D                 pop     esi
.text:0000071E                 pop     ebx
.text:0000071F                 add     esp, 38h
.text:00000722                 cmp     ebp, esp
.text:00000724                 call    __RTC_CheckEsp
.text:00000729                 mov     esp, ebp
.text:0000072B                 pop     ebp
.text:0000072C                 retn    18h
.text:0000072C ; END OF FUNCTION CHUNK FOR ?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:0000072C ; ---------------------------------------------------------------------------
.text:0000072F                 align 10h
.text:00000730 $LN21           dd 2                    ; DATA XREF: NCompress::NQuantum::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+D4o
.text:00000734                 dd offset $LN20
.text:00000738 $LN20           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00000734o
.text:00000740                 dd offset $LN17_0
.text:00000744                 dd 0FFFFFFDCh, 4
.text:0000074C                 dd offset $LN18_0
.text:00000750 $LN18_0         db 65h, 0               ; DATA XREF: .text:0000074Co
.text:00000752 $LN17_0         dw 65h                  ; DATA XREF: .text:00000740o
.text:00000754                 align 10h
.text:00000760
.text:00000760 ; =============== S U B R O U T I N E =======================================
.text:00000760
.text:00000760 ; Attributes: bp-based frame
.text:00000760
.text:00000760 ; __int32 __stdcall NCompress::NQuantum::CDecoder::SetOutStreamSize(NCompress::NQuantum::CDecoder *this, const unsigned __int64 *)
.text:00000760                 public ?SetOutStreamSize@CDecoder@NQuantum@NCompress@@UAGJPB_K@Z
.text:00000760 ?SetOutStreamSize@CDecoder@NQuantum@NCompress@@UAGJPB_K@Z proc near
.text:00000760
.text:00000760 this            = dword ptr  8
.text:00000760 arg_4           = dword ptr  0Ch
.text:00000760
.text:00000760                 push    ebp
.text:00000761                 mov     ebp, esp
.text:00000763                 cmp     [ebp+arg_4], 0
.text:00000767                 jnz     short loc_770
.text:00000769                 mov     eax, 80004005h
.text:0000076E                 jmp     short loc_7A8
.text:00000770 ; ---------------------------------------------------------------------------
.text:00000770
.text:00000770 loc_770:                                ; CODE XREF: NCompress::NQuantum::CDecoder::SetOutStreamSize(unsigned __int64 const *)+7j
.text:00000770                 mov     eax, [ebp+this]
.text:00000773                 mov     dword ptr [eax+78h], 0FFFFFFFEh
.text:0000077A                 mov     ecx, [ebp+this]
.text:0000077D                 movzx   edx, byte ptr [ecx+84h]
.text:00000784                 push    edx             ; bool
.text:00000785                 mov     ecx, [ebp+this]
.text:00000788                 add     ecx, 8          ; this
.text:0000078B                 call    ?Init@CLzOutWindow@@QAEX_N@Z ; CLzOutWindow::Init(bool)
.text:00000790                 mov     eax, [ebp+this]
.text:00000793                 movzx   ecx, byte ptr [eax+84h]
.text:0000079A                 test    ecx, ecx
.text:0000079C                 jnz     short loc_7A6
.text:0000079E                 mov     ecx, [ebp+this] ; this
.text:000007A1                 call    ?Init@CDecoder@NQuantum@NCompress@@AAEXXZ ; NCompress::NQuantum::CDecoder::Init(void)
.text:000007A6
.text:000007A6 loc_7A6:                                ; CODE XREF: NCompress::NQuantum::CDecoder::SetOutStreamSize(unsigned __int64 const *)+3Cj
.text:000007A6                 xor     eax, eax
.text:000007A8
.text:000007A8 loc_7A8:                                ; CODE XREF: NCompress::NQuantum::CDecoder::SetOutStreamSize(unsigned __int64 const *)+Ej
.text:000007A8                 cmp     ebp, esp
.text:000007AA                 call    __RTC_CheckEsp
.text:000007AF                 pop     ebp
.text:000007B0                 retn    8
.text:000007B0 ?SetOutStreamSize@CDecoder@NQuantum@NCompress@@UAGJPB_K@Z endp
.text:000007B0
.text:000007B0 ; ---------------------------------------------------------------------------
.text:000007B3                 align 10h
.text:000007C0
.text:000007C0 ; =============== S U B R O U T I N E =======================================
.text:000007C0
.text:000007C0 ; Attributes: bp-based frame
.text:000007C0
.text:000007C0 ; __int32 __thiscall NCompress::NQuantum::CDecoder::SetParams(NCompress::NQuantum::CDecoder *this, int)
.text:000007C0                 public ?SetParams@CDecoder@NQuantum@NCompress@@QAEJH@Z
.text:000007C0 ?SetParams@CDecoder@NQuantum@NCompress@@QAEJH@Z proc near
.text:000007C0
.text:000007C0 var_4           = dword ptr -4
.text:000007C0 arg_0           = dword ptr  8
.text:000007C0
.text:000007C0                 push    ebp
.text:000007C1                 mov     ebp, esp
.text:000007C3                 push    ecx
.text:000007C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007CB                 mov     [ebp+var_4], ecx
.text:000007CE                 cmp     [ebp+arg_0], 15h
.text:000007D2                 jle     short loc_7DB
.text:000007D4                 mov     eax, 80070057h
.text:000007D9                 jmp     short loc_831
.text:000007DB ; ---------------------------------------------------------------------------
.text:000007DB
.text:000007DB loc_7DB:                                ; CODE XREF: NCompress::NQuantum::CDecoder::SetParams(int)+12j
.text:000007DB                 mov     eax, [ebp+var_4]
.text:000007DE                 mov     ecx, [ebp+arg_0]
.text:000007E1                 mov     [eax+80h], ecx
.text:000007E7                 mov     edx, [ebp+var_4]
.text:000007EA                 mov     eax, 1
.text:000007EF                 mov     ecx, [edx+80h]
.text:000007F5                 shl     eax, cl
.text:000007F7                 push    eax             ; unsigned int
.text:000007F8                 mov     ecx, [ebp+var_4]
.text:000007FB                 add     ecx, 8          ; this
.text:000007FE                 call    ?Create@COutBuffer@@QAE_NI@Z ; COutBuffer::Create(uint)
.text:00000803                 movzx   ecx, al
.text:00000806                 test    ecx, ecx
.text:00000808                 jnz     short loc_811
.text:0000080A                 mov     eax, 8007000Eh
.text:0000080F                 jmp     short loc_831
.text:00000811 ; ---------------------------------------------------------------------------
.text:00000811
.text:00000811 loc_811:                                ; CODE XREF: NCompress::NQuantum::CDecoder::SetParams(int)+48j
.text:00000811                 push    100000h         ; unsigned int
.text:00000816                 mov     ecx, [ebp+var_4]
.text:00000819                 add     ecx, 30h ; '0'  ; this
.text:0000081C                 call    ?Create@CDecoder@NRangeCoder@NQuantum@NCompress@@QAE_NI@Z ; NCompress::NQuantum::NRangeCoder::CDecoder::Create(uint)
.text:00000821                 movzx   edx, al
.text:00000824                 test    edx, edx
.text:00000826                 jnz     short loc_82F
.text:00000828                 mov     eax, 8007000Eh
.text:0000082D                 jmp     short loc_831
.text:0000082F ; ---------------------------------------------------------------------------
.text:0000082F
.text:0000082F loc_82F:                                ; CODE XREF: NCompress::NQuantum::CDecoder::SetParams(int)+66j
.text:0000082F                 xor     eax, eax
.text:00000831
.text:00000831 loc_831:                                ; CODE XREF: NCompress::NQuantum::CDecoder::SetParams(int)+19j
.text:00000831                                         ; NCompress::NQuantum::CDecoder::SetParams(int)+4Fj ...
.text:00000831                 add     esp, 4
.text:00000834                 cmp     ebp, esp
.text:00000836                 call    __RTC_CheckEsp
.text:0000083B                 mov     esp, ebp
.text:0000083D                 pop     ebp
.text:0000083E                 retn    4
.text:0000083E ?SetParams@CDecoder@NQuantum@NCompress@@QAEJH@Z endp
.text:0000083E
.text:0000083E ; ---------------------------------------------------------------------------
.text:00000841                 align 4
.text:00000841 _text           ends
.text:00000841
.rtc$TMZ:00000844 ; ===========================================================================
.rtc$TMZ:00000844
.rtc$TMZ:00000844 ; Segment type: Pure data
.rtc$TMZ:00000844 ; Segment permissions: Read
.rtc$TMZ:00000844 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000844                 assume cs:_rtc$TMZ
.rtc$TMZ:00000844                 ;org 844h
.rtc$TMZ:00000844 ; COMDAT (pick any)
.rtc$TMZ:00000844 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000844 _rtc$TMZ        ends
.rtc$TMZ:00000844
.rtc$IMZ:00000848 ; ===========================================================================
.rtc$IMZ:00000848
.rtc$IMZ:00000848 ; Segment type: Pure data
.rtc$IMZ:00000848 ; Segment permissions: Read
.rtc$IMZ:00000848 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000848                 assume cs:_rtc$IMZ
.rtc$IMZ:00000848                 ;org 848h
.rtc$IMZ:00000848 ; COMDAT (pick any)
.rtc$IMZ:00000848 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000848 _rtc$IMZ        ends
.rtc$IMZ:00000848
.text:0000084C ; ===========================================================================
.text:0000084C
.text:0000084C ; Segment type: Pure code
.text:0000084C ; Segment permissions: Read/Execute
.text:0000084C _text           segment para public 'CODE' use32
.text:0000084C                 assume cs:_text
.text:0000084C                 ;org 84Ch
.text:0000084C ; COMDAT (pick any)
.text:0000084C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000084C
.text:0000084C ; =============== S U B R O U T I N E =======================================
.text:0000084C
.text:0000084C ; Attributes: bp-based frame
.text:0000084C
.text:0000084C ; void __thiscall NCompress::NQuantum::NRangeCoder::CModelDecoder::Init(NCompress::NQuantum::NRangeCoder::CModelDecoder *this, unsigned int)
.text:0000084C                 public ?Init@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEXI@Z
.text:0000084C ?Init@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEXI@Z proc near
.text:0000084C                                         ; CODE XREF: NCompress::NQuantum::CDecoder::Init(void)+30p
.text:0000084C                                         ; NCompress::NQuantum::CDecoder::Init(void)+62p ...
.text:0000084C
.text:0000084C var_8           = dword ptr -8
.text:0000084C var_4           = dword ptr -4
.text:0000084C arg_0           = dword ptr  8
.text:0000084C
.text:0000084C                 push    ebp
.text:0000084D                 mov     ebp, esp
.text:0000084F                 sub     esp, 8
.text:00000852                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000859                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000860                 mov     [ebp+var_4], ecx
.text:00000863                 mov     eax, [ebp+var_4]
.text:00000866                 mov     ecx, [ebp+arg_0]
.text:00000869                 mov     [eax], ecx
.text:0000086B                 mov     edx, [ebp+var_4]
.text:0000086E                 mov     dword ptr [edx+4], 4
.text:00000875                 mov     [ebp+var_8], 0
.text:0000087C                 jmp     short loc_887
.text:0000087E ; ---------------------------------------------------------------------------
.text:0000087E
.text:0000087E loc_87E:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Init(uint)+63j
.text:0000087E                 mov     eax, [ebp+var_8]
.text:00000881                 add     eax, 1
.text:00000884                 mov     [ebp+var_8], eax
.text:00000887
.text:00000887 loc_887:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Init(uint)+30j
.text:00000887                 mov     ecx, [ebp+var_8]
.text:0000088A                 cmp     ecx, [ebp+arg_0]
.text:0000088D                 jnb     short loc_8B1
.text:0000088F                 mov     edx, [ebp+arg_0]
.text:00000892                 sub     edx, [ebp+var_8]
.text:00000895                 mov     eax, [ebp+var_8]
.text:00000898                 mov     ecx, [ebp+var_4]
.text:0000089B                 mov     [ecx+eax*2+8], dx
.text:000008A0                 mov     edx, [ebp+var_4]
.text:000008A3                 add     edx, [ebp+var_8]
.text:000008A6                 mov     al, byte ptr [ebp+var_8]
.text:000008A9                 mov     [edx+8Ah], al
.text:000008AF                 jmp     short loc_87E
.text:000008B1 ; ---------------------------------------------------------------------------
.text:000008B1
.text:000008B1 loc_8B1:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Init(uint)+41j
.text:000008B1                 xor     ecx, ecx
.text:000008B3                 mov     edx, [ebp+arg_0]
.text:000008B6                 mov     eax, [ebp+var_4]
.text:000008B9                 mov     [eax+edx*2+8], cx
.text:000008BE                 mov     esp, ebp
.text:000008C0                 pop     ebp
.text:000008C1                 retn    4
.text:000008C1 ?Init@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEXI@Z endp
.text:000008C1
.text:000008C1 _text           ends
.text:000008C1
.text:000008C4 ; ===========================================================================
.text:000008C4
.text:000008C4 ; Segment type: Pure code
.text:000008C4 ; Segment permissions: Read/Execute
.text:000008C4 _text           segment para public 'CODE' use32
.text:000008C4                 assume cs:_text
.text:000008C4                 ;org 8C4h
.text:000008C4 ; COMDAT (pick any)
.text:000008C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000008C4
.text:000008C4 ; =============== S U B R O U T I N E =======================================
.text:000008C4
.text:000008C4 ; Attributes: bp-based frame
.text:000008C4
.text:000008C4 ; bool __thiscall CLzOutWindow::CopyBlock(CLzOutWindow *this, unsigned int, unsigned int)
.text:000008C4                 public ?CopyBlock@CLzOutWindow@@QAE_NII@Z
.text:000008C4 ?CopyBlock@CLzOutWindow@@QAE_NII@Z proc near
.text:000008C4                                         ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+21Fp
.text:000008C4
.text:000008C4 var_14          = dword ptr -14h
.text:000008C4 var_10          = dword ptr -10h
.text:000008C4 var_C           = dword ptr -0Ch
.text:000008C4 var_8           = dword ptr -8
.text:000008C4 var_4           = dword ptr -4
.text:000008C4 arg_0           = dword ptr  8
.text:000008C4 arg_4           = dword ptr  0Ch
.text:000008C4
.text:000008C4                 push    ebp
.text:000008C5                 mov     ebp, esp
.text:000008C7                 sub     esp, 14h
.text:000008CA                 push    esi
.text:000008CB                 mov     eax, 0CCCCCCCCh
.text:000008D0                 mov     [ebp+var_14], eax
.text:000008D3                 mov     [ebp+var_10], eax
.text:000008D6                 mov     [ebp+var_C], eax
.text:000008D9                 mov     [ebp+var_8], eax
.text:000008DC                 mov     [ebp+var_4], eax
.text:000008DF                 mov     [ebp+var_4], ecx
.text:000008E2                 mov     eax, [ebp+var_4]
.text:000008E5                 mov     ecx, [eax+4]
.text:000008E8                 sub     ecx, [ebp+arg_0]
.text:000008EB                 sub     ecx, 1
.text:000008EE                 mov     [ebp+var_8], ecx
.text:000008F1                 mov     edx, [ebp+var_4]
.text:000008F4                 mov     eax, [ebp+arg_0]
.text:000008F7                 cmp     eax, [edx+4]
.text:000008FA                 jb      short loc_925
.text:000008FC                 mov     ecx, [ebp+var_4]
.text:000008FF                 movzx   edx, byte ptr [ecx+24h]
.text:00000903                 test    edx, edx
.text:00000905                 jz      short loc_912
.text:00000907                 mov     eax, [ebp+var_4]
.text:0000090A                 mov     ecx, [ebp+arg_0]
.text:0000090D                 cmp     ecx, [eax+10h]
.text:00000910                 jb      short loc_919
.text:00000912
.text:00000912 loc_912:                                ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+41j
.text:00000912                 xor     al, al
.text:00000914                 jmp     loc_A01
.text:00000919 ; ---------------------------------------------------------------------------
.text:00000919
.text:00000919 loc_919:                                ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+4Cj
.text:00000919                 mov     edx, [ebp+var_4]
.text:0000091C                 mov     eax, [ebp+var_8]
.text:0000091F                 add     eax, [edx+10h]
.text:00000922                 mov     [ebp+var_8], eax
.text:00000925
.text:00000925 loc_925:                                ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+36j
.text:00000925                 mov     ecx, [ebp+var_4]
.text:00000928                 mov     edx, [ebp+var_4]
.text:0000092B                 mov     eax, [ecx+8]
.text:0000092E                 sub     eax, [edx+4]
.text:00000931                 cmp     eax, [ebp+arg_4]
.text:00000934                 jbe     short loc_995
.text:00000936                 mov     ecx, [ebp+var_4]
.text:00000939                 mov     edx, [ecx+10h]
.text:0000093C                 sub     edx, [ebp+var_8]
.text:0000093F                 cmp     edx, [ebp+arg_4]
.text:00000942                 jbe     short loc_995
.text:00000944                 mov     eax, [ebp+var_4]
.text:00000947                 mov     ecx, [eax]
.text:00000949                 add     ecx, [ebp+var_8]
.text:0000094C                 mov     [ebp+var_C], ecx
.text:0000094F                 mov     edx, [ebp+var_4]
.text:00000952                 mov     eax, [edx]
.text:00000954                 mov     ecx, [ebp+var_4]
.text:00000957                 add     eax, [ecx+4]
.text:0000095A                 mov     [ebp+var_10], eax
.text:0000095D                 mov     edx, [ebp+var_4]
.text:00000960                 mov     eax, [edx+4]
.text:00000963                 add     eax, [ebp+arg_4]
.text:00000966                 mov     ecx, [ebp+var_4]
.text:00000969                 mov     [ecx+4], eax
.text:0000096C
.text:0000096C loc_96C:                                ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+CDj
.text:0000096C                 mov     edx, [ebp+var_10]
.text:0000096F                 mov     eax, [ebp+var_C]
.text:00000972                 mov     cl, [eax]
.text:00000974                 mov     [edx], cl
.text:00000976                 mov     edx, [ebp+var_10]
.text:00000979                 add     edx, 1
.text:0000097C                 mov     [ebp+var_10], edx
.text:0000097F                 mov     eax, [ebp+var_C]
.text:00000982                 add     eax, 1
.text:00000985                 mov     [ebp+var_C], eax
.text:00000988                 mov     ecx, [ebp+arg_4]
.text:0000098B                 sub     ecx, 1
.text:0000098E                 mov     [ebp+arg_4], ecx
.text:00000991                 jnz     short loc_96C
.text:00000993                 jmp     short loc_9FF
.text:00000995 ; ---------------------------------------------------------------------------
.text:00000995
.text:00000995 loc_995:                                ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+70j
.text:00000995                                         ; CLzOutWindow::CopyBlock(uint,uint)+7Ej ...
.text:00000995                 mov     edx, [ebp+var_4]
.text:00000998                 mov     eax, [ebp+var_8]
.text:0000099B                 cmp     eax, [edx+10h]
.text:0000099E                 jnz     short loc_9A7
.text:000009A0                 mov     [ebp+var_8], 0
.text:000009A7
.text:000009A7 loc_9A7:                                ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+DAj
.text:000009A7                 mov     ecx, [ebp+var_4]
.text:000009AA                 mov     edx, [ecx+4]
.text:000009AD                 mov     [ebp+var_14], edx
.text:000009B0                 mov     eax, [ebp+var_4]
.text:000009B3                 mov     ecx, [eax]
.text:000009B5                 mov     edx, [ebp+var_4]
.text:000009B8                 mov     eax, [edx]
.text:000009BA                 mov     edx, [ebp+var_14]
.text:000009BD                 mov     esi, [ebp+var_8]
.text:000009C0                 mov     cl, [ecx+esi]
.text:000009C3                 mov     [eax+edx], cl
.text:000009C6                 mov     edx, [ebp+var_14]
.text:000009C9                 add     edx, 1
.text:000009CC                 mov     [ebp+var_14], edx
.text:000009CF                 mov     eax, [ebp+var_8]
.text:000009D2                 add     eax, 1
.text:000009D5                 mov     [ebp+var_8], eax
.text:000009D8                 mov     ecx, [ebp+var_4]
.text:000009DB                 mov     edx, [ebp+var_14]
.text:000009DE                 mov     [ecx+4], edx
.text:000009E1                 mov     eax, [ebp+var_4]
.text:000009E4                 mov     ecx, [ebp+var_14]
.text:000009E7                 cmp     ecx, [eax+8]
.text:000009EA                 jnz     short loc_9F4
.text:000009EC                 mov     ecx, [ebp+var_4] ; this
.text:000009EF                 call    ?FlushWithCheck@COutBuffer@@QAEXXZ ; COutBuffer::FlushWithCheck(void)
.text:000009F4
.text:000009F4 loc_9F4:                                ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+126j
.text:000009F4                 mov     edx, [ebp+arg_4]
.text:000009F7                 sub     edx, 1
.text:000009FA                 mov     [ebp+arg_4], edx
.text:000009FD                 jnz     short loc_995
.text:000009FF
.text:000009FF loc_9FF:                                ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+CFj
.text:000009FF                 mov     al, 1
.text:00000A01
.text:00000A01 loc_A01:                                ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+50j
.text:00000A01                 pop     esi
.text:00000A02                 add     esp, 14h
.text:00000A05                 cmp     ebp, esp
.text:00000A07                 call    __RTC_CheckEsp
.text:00000A0C                 mov     esp, ebp
.text:00000A0E                 pop     ebp
.text:00000A0F                 retn    8
.text:00000A0F ?CopyBlock@CLzOutWindow@@QAE_NII@Z endp
.text:00000A0F
.text:00000A0F ; ---------------------------------------------------------------------------
.text:00000A12                 align 4
.text:00000A12 _text           ends
.text:00000A12
.text:00000A14 ; ===========================================================================
.text:00000A14
.text:00000A14 ; Segment type: Pure code
.text:00000A14 ; Segment permissions: Read/Execute
.text:00000A14 _text           segment para public 'CODE' use32
.text:00000A14                 assume cs:_text
.text:00000A14                 ;org 0A14h
.text:00000A14 ; COMDAT (pick any)
.text:00000A14                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000A14
.text:00000A14 ; =============== S U B R O U T I N E =======================================
.text:00000A14
.text:00000A14 ; Attributes: bp-based frame
.text:00000A14
.text:00000A14 ; void __thiscall CLzOutWindow::PutByte(CLzOutWindow *this, unsigned __int8)
.text:00000A14                 public ?PutByte@CLzOutWindow@@QAEXE@Z
.text:00000A14 ?PutByte@CLzOutWindow@@QAEXE@Z proc near
.text:00000A14                                         ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+86p
.text:00000A14                                         ; NCompress::NQuantum::CDecoder::CodeSpec(uint)+10Fp
.text:00000A14
.text:00000A14 var_8           = dword ptr -8
.text:00000A14 var_4           = dword ptr -4
.text:00000A14 arg_0           = byte ptr  8
.text:00000A14
.text:00000A14                 push    ebp
.text:00000A15                 mov     ebp, esp
.text:00000A17                 sub     esp, 8
.text:00000A1A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000A21                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A28                 mov     [ebp+var_4], ecx
.text:00000A2B                 mov     eax, [ebp+var_4]
.text:00000A2E                 mov     ecx, [eax+4]
.text:00000A31                 mov     [ebp+var_8], ecx
.text:00000A34                 mov     edx, [ebp+var_4]
.text:00000A37                 mov     eax, [edx]
.text:00000A39                 mov     ecx, [ebp+var_8]
.text:00000A3C                 mov     dl, [ebp+arg_0]
.text:00000A3F                 mov     [eax+ecx], dl
.text:00000A42                 mov     eax, [ebp+var_8]
.text:00000A45                 add     eax, 1
.text:00000A48                 mov     [ebp+var_8], eax
.text:00000A4B                 mov     ecx, [ebp+var_4]
.text:00000A4E                 mov     edx, [ebp+var_8]
.text:00000A51                 mov     [ecx+4], edx
.text:00000A54                 mov     eax, [ebp+var_4]
.text:00000A57                 mov     ecx, [ebp+var_8]
.text:00000A5A                 cmp     ecx, [eax+8]
.text:00000A5D                 jnz     short loc_A67
.text:00000A5F                 mov     ecx, [ebp+var_4] ; this
.text:00000A62                 call    ?FlushWithCheck@COutBuffer@@QAEXXZ ; COutBuffer::FlushWithCheck(void)
.text:00000A67
.text:00000A67 loc_A67:                                ; CODE XREF: CLzOutWindow::PutByte(uchar)+49j
.text:00000A67                 add     esp, 8
.text:00000A6A                 cmp     ebp, esp
.text:00000A6C                 call    __RTC_CheckEsp
.text:00000A71                 mov     esp, ebp
.text:00000A73                 pop     ebp
.text:00000A74                 retn    4
.text:00000A74 ?PutByte@CLzOutWindow@@QAEXE@Z endp
.text:00000A74
.text:00000A74 ; ---------------------------------------------------------------------------
.text:00000A77                 align 4
.text:00000A77 _text           ends
.text:00000A77
.text:00000A78 ; ===========================================================================
.text:00000A78
.text:00000A78 ; Segment type: Pure code
.text:00000A78 ; Segment permissions: Read/Execute
.text:00000A78 _text           segment para public 'CODE' use32
.text:00000A78                 assume cs:_text
.text:00000A78                 ;org 0A78h
.text:00000A78 ; COMDAT (pick any)
.text:00000A78                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000A78
.text:00000A78 ; =============== S U B R O U T I N E =======================================
.text:00000A78
.text:00000A78 ; Attributes: bp-based frame
.text:00000A78
.text:00000A78 ; unsigned __int8 __thiscall CLzOutWindow::GetByte(CLzOutWindow *this, unsigned int)
.text:00000A78                 public ?GetByte@CLzOutWindow@@QBEEI@Z
.text:00000A78 ?GetByte@CLzOutWindow@@QBEEI@Z proc near
.text:00000A78                                         ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+73p
.text:00000A78
.text:00000A78 var_8           = dword ptr -8
.text:00000A78 var_4           = dword ptr -4
.text:00000A78 arg_0           = dword ptr  8
.text:00000A78
.text:00000A78                 push    ebp
.text:00000A79                 mov     ebp, esp
.text:00000A7B                 sub     esp, 8
.text:00000A7E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000A85                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A8C                 mov     [ebp+var_4], ecx
.text:00000A8F                 mov     eax, [ebp+var_4]
.text:00000A92                 mov     ecx, [eax+4]
.text:00000A95                 sub     ecx, [ebp+arg_0]
.text:00000A98                 sub     ecx, 1
.text:00000A9B                 mov     [ebp+var_8], ecx
.text:00000A9E                 mov     edx, [ebp+var_4]
.text:00000AA1                 mov     eax, [ebp+arg_0]
.text:00000AA4                 cmp     eax, [edx+4]
.text:00000AA7                 jb      short loc_AB5
.text:00000AA9                 mov     ecx, [ebp+var_4]
.text:00000AAC                 mov     edx, [ebp+var_8]
.text:00000AAF                 add     edx, [ecx+10h]
.text:00000AB2                 mov     [ebp+var_8], edx
.text:00000AB5
.text:00000AB5 loc_AB5:                                ; CODE XREF: CLzOutWindow::GetByte(uint)+2Fj
.text:00000AB5                 mov     eax, [ebp+var_4]
.text:00000AB8                 mov     ecx, [eax]
.text:00000ABA                 mov     edx, [ebp+var_8]
.text:00000ABD                 mov     al, [ecx+edx]
.text:00000AC0                 mov     esp, ebp
.text:00000AC2                 pop     ebp
.text:00000AC3                 retn    4
.text:00000AC3 ?GetByte@CLzOutWindow@@QBEEI@Z endp
.text:00000AC3
.text:00000AC3 ; ---------------------------------------------------------------------------
.text:00000AC6                 align 4
.text:00000AC6 _text           ends
.text:00000AC6
.text:00000AC8 ; ===========================================================================
.text:00000AC8
.text:00000AC8 ; Segment type: Pure code
.text:00000AC8 ; Segment permissions: Read/Execute
.text:00000AC8 _text           segment para public 'CODE' use32
.text:00000AC8                 assume cs:_text
.text:00000AC8                 ;org 0AC8h
.text:00000AC8 ; COMDAT (pick any)
.text:00000AC8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000AC8
.text:00000AC8 ; =============== S U B R O U T I N E =======================================
.text:00000AC8
.text:00000AC8 ; Attributes: bp-based frame
.text:00000AC8
.text:00000AC8 ; bool __thiscall NCompress::NQuantum::CStreamBitDecoder::WasFinished(NCompress::NQuantum::CStreamBitDecoder *__hidden this)
.text:00000AC8                 public ?WasFinished@CStreamBitDecoder@NQuantum@NCompress@@QBE_NXZ
.text:00000AC8 ?WasFinished@CStreamBitDecoder@NQuantum@NCompress@@QBE_NXZ proc near
.text:00000AC8                                         ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+A6p
.text:00000AC8                                         ; NCompress::NQuantum::CDecoder::CodeSpec(uint)+265p
.text:00000AC8
.text:00000AC8 var_4           = dword ptr -4
.text:00000AC8
.text:00000AC8                 push    ebp
.text:00000AC9                 mov     ebp, esp
.text:00000ACB                 push    ecx
.text:00000ACC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AD3                 mov     [ebp+var_4], ecx
.text:00000AD6                 mov     ecx, [ebp+var_4]
.text:00000AD9                 add     ecx, 8          ; this
.text:00000ADC                 call    ?WasFinished@CInBufferBase@@QBE_NXZ ; CInBufferBase::WasFinished(void)
.text:00000AE1                 add     esp, 4
.text:00000AE4                 cmp     ebp, esp
.text:00000AE6                 call    __RTC_CheckEsp
.text:00000AEB                 mov     esp, ebp
.text:00000AED                 pop     ebp
.text:00000AEE                 retn
.text:00000AEE ?WasFinished@CStreamBitDecoder@NQuantum@NCompress@@QBE_NXZ endp
.text:00000AEE
.text:00000AEE ; ---------------------------------------------------------------------------
.text:00000AEF                 align 10h
.text:00000AEF _text           ends
.text:00000AEF
.text:00000AF0 ; ===========================================================================
.text:00000AF0
.text:00000AF0 ; Segment type: Pure code
.text:00000AF0 ; Segment permissions: Read/Execute
.text:00000AF0 _text           segment para public 'CODE' use32
.text:00000AF0                 assume cs:_text
.text:00000AF0                 ;org 0AF0h
.text:00000AF0 ; COMDAT (pick any)
.text:00000AF0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000AF0
.text:00000AF0 ; =============== S U B R O U T I N E =======================================
.text:00000AF0
.text:00000AF0 ; Attributes: bp-based frame
.text:00000AF0
.text:00000AF0 ; bool __thiscall CInBufferBase::WasFinished(CInBufferBase *__hidden this)
.text:00000AF0                 public ?WasFinished@CInBufferBase@@QBE_NXZ
.text:00000AF0 ?WasFinished@CInBufferBase@@QBE_NXZ proc near
.text:00000AF0                                         ; CODE XREF: NCompress::NQuantum::CStreamBitDecoder::WasFinished(void)+14p
.text:00000AF0
.text:00000AF0 var_4           = dword ptr -4
.text:00000AF0
.text:00000AF0                 push    ebp
.text:00000AF1                 mov     ebp, esp
.text:00000AF3                 push    ecx
.text:00000AF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AFB                 mov     [ebp+var_4], ecx
.text:00000AFE                 mov     eax, [ebp+var_4]
.text:00000B01                 mov     al, [eax+1Ch]
.text:00000B04                 mov     esp, ebp
.text:00000B06                 pop     ebp
.text:00000B07                 retn
.text:00000B07 ?WasFinished@CInBufferBase@@QBE_NXZ endp
.text:00000B07
.text:00000B07 _text           ends
.text:00000B07
.text:00000B08 ; ===========================================================================
.text:00000B08
.text:00000B08 ; Segment type: Pure code
.text:00000B08 ; Segment permissions: Read/Execute
.text:00000B08 _text           segment para public 'CODE' use32
.text:00000B08                 assume cs:_text
.text:00000B08                 ;org 0B08h
.text:00000B08 ; COMDAT (pick any)
.text:00000B08                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000B08
.text:00000B08 ; =============== S U B R O U T I N E =======================================
.text:00000B08
.text:00000B08 ; Attributes: bp-based frame
.text:00000B08
.text:00000B08 ; unsigned int __thiscall NCompress::NQuantum::CStreamBitDecoder::ReadBits(NCompress::NQuantum::CStreamBitDecoder *this, int)
.text:00000B08                 public ?ReadBits@CStreamBitDecoder@NQuantum@NCompress@@QAEIH@Z
.text:00000B08 ?ReadBits@CStreamBitDecoder@NQuantum@NCompress@@QAEIH@Z proc near
.text:00000B08                                         ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+192p
.text:00000B08                                         ; NCompress::NQuantum::CDecoder::CodeSpec(uint)+1F3p ...
.text:00000B08
.text:00000B08 var_8           = dword ptr -8
.text:00000B08 var_4           = dword ptr -4
.text:00000B08 arg_0           = dword ptr  8
.text:00000B08
.text:00000B08                 push    ebp
.text:00000B09                 mov     ebp, esp
.text:00000B0B                 sub     esp, 8
.text:00000B0E                 push    esi
.text:00000B0F                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000B16                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B1D                 mov     [ebp+var_4], ecx
.text:00000B20                 mov     [ebp+var_8], 0
.text:00000B27
.text:00000B27 loc_B27:                                ; CODE XREF: NCompress::NQuantum::CStreamBitDecoder::ReadBits(int)+3Aj
.text:00000B27                 mov     esi, [ebp+var_8]
.text:00000B2A                 shl     esi, 1
.text:00000B2C                 mov     ecx, [ebp+var_4] ; this
.text:00000B2F                 call    ?ReadBit@CStreamBitDecoder@NQuantum@NCompress@@QAEIXZ ; NCompress::NQuantum::CStreamBitDecoder::ReadBit(void)
.text:00000B34                 or      esi, eax
.text:00000B36                 mov     [ebp+var_8], esi
.text:00000B39                 mov     eax, [ebp+arg_0]
.text:00000B3C                 sub     eax, 1
.text:00000B3F                 mov     [ebp+arg_0], eax
.text:00000B42                 jnz     short loc_B27
.text:00000B44                 mov     eax, [ebp+var_8]
.text:00000B47                 pop     esi
.text:00000B48                 add     esp, 8
.text:00000B4B                 cmp     ebp, esp
.text:00000B4D                 call    __RTC_CheckEsp
.text:00000B52                 mov     esp, ebp
.text:00000B54                 pop     ebp
.text:00000B55                 retn    4
.text:00000B55 ?ReadBits@CStreamBitDecoder@NQuantum@NCompress@@QAEIH@Z endp
.text:00000B55
.text:00000B55 _text           ends
.text:00000B55
.text:00000B58 ; ===========================================================================
.text:00000B58
.text:00000B58 ; Segment type: Pure code
.text:00000B58 ; Segment permissions: Read/Execute
.text:00000B58 _text           segment para public 'CODE' use32
.text:00000B58                 assume cs:_text
.text:00000B58                 ;org 0B58h
.text:00000B58 ; COMDAT (pick any)
.text:00000B58                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000B58
.text:00000B58 ; =============== S U B R O U T I N E =======================================
.text:00000B58
.text:00000B58 ; Attributes: bp-based frame
.text:00000B58
.text:00000B58 ; unsigned int __thiscall NCompress::NQuantum::CStreamBitDecoder::ReadBit(NCompress::NQuantum::CStreamBitDecoder *__hidden this)
.text:00000B58                 public ?ReadBit@CStreamBitDecoder@NQuantum@NCompress@@QAEIXZ
.text:00000B58 ?ReadBit@CStreamBitDecoder@NQuantum@NCompress@@QAEIXZ proc near
.text:00000B58                                         ; CODE XREF: NCompress::NQuantum::CStreamBitDecoder::ReadBits(int)+27p
.text:00000B58                                         ; NCompress::NQuantum::NRangeCoder::CDecoder::Decode(uint,uint,uint)+E7p
.text:00000B58
.text:00000B58 var_8           = dword ptr -8
.text:00000B58 var_4           = dword ptr -4
.text:00000B58
.text:00000B58                 push    ebp
.text:00000B59                 mov     ebp, esp
.text:00000B5B                 sub     esp, 8
.text:00000B5E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000B65                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B6C                 mov     [ebp+var_4], ecx
.text:00000B6F                 mov     eax, [ebp+var_4]
.text:00000B72                 cmp     dword ptr [eax], 10000h
.text:00000B78                 jb      short loc_B93
.text:00000B7A                 mov     ecx, [ebp+var_4]
.text:00000B7D                 add     ecx, 8          ; this
.text:00000B80                 call    ?ReadByte@CInBufferBase@@QAEEXZ ; CInBufferBase::ReadByte(void)
.text:00000B85                 movzx   ecx, al
.text:00000B88                 or      ecx, 100h
.text:00000B8E                 mov     edx, [ebp+var_4]
.text:00000B91                 mov     [edx], ecx
.text:00000B93
.text:00000B93 loc_B93:                                ; CODE XREF: NCompress::NQuantum::CStreamBitDecoder::ReadBit(void)+20j
.text:00000B93                 mov     eax, [ebp+var_4]
.text:00000B96                 mov     ecx, [eax]
.text:00000B98                 shr     ecx, 7
.text:00000B9B                 and     ecx, 1
.text:00000B9E                 mov     [ebp+var_8], ecx
.text:00000BA1                 mov     edx, [ebp+var_4]
.text:00000BA4                 mov     eax, [edx]
.text:00000BA6                 shl     eax, 1
.text:00000BA8                 mov     ecx, [ebp+var_4]
.text:00000BAB                 mov     [ecx], eax
.text:00000BAD                 mov     eax, [ebp+var_8]
.text:00000BB0                 add     esp, 8
.text:00000BB3                 cmp     ebp, esp
.text:00000BB5                 call    __RTC_CheckEsp
.text:00000BBA                 mov     esp, ebp
.text:00000BBC                 pop     ebp
.text:00000BBD                 retn
.text:00000BBD ?ReadBit@CStreamBitDecoder@NQuantum@NCompress@@QAEIXZ endp
.text:00000BBD
.text:00000BBD ; ---------------------------------------------------------------------------
.text:00000BBE                 align 10h
.text:00000BBE _text           ends
.text:00000BBE
.text:00000BC0 ; ===========================================================================
.text:00000BC0
.text:00000BC0 ; Segment type: Pure code
.text:00000BC0 ; Segment permissions: Read/Execute
.text:00000BC0 _text           segment para public 'CODE' use32
.text:00000BC0                 assume cs:_text
.text:00000BC0                 ;org 0BC0h
.text:00000BC0 ; COMDAT (pick any)
.text:00000BC0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000BC0
.text:00000BC0 ; =============== S U B R O U T I N E =======================================
.text:00000BC0
.text:00000BC0 ; Attributes: bp-based frame
.text:00000BC0
.text:00000BC0 ; unsigned __int8 __thiscall CInBufferBase::ReadByte(CInBufferBase *__hidden this)
.text:00000BC0                 public ?ReadByte@CInBufferBase@@QAEEXZ
.text:00000BC0 ?ReadByte@CInBufferBase@@QAEEXZ proc near
.text:00000BC0                                         ; CODE XREF: NCompress::NQuantum::CStreamBitDecoder::ReadBit(void)+28p
.text:00000BC0
.text:00000BC0 var_8           = dword ptr -8
.text:00000BC0 var_4           = dword ptr -4
.text:00000BC0
.text:00000BC0                 push    ebp
.text:00000BC1                 mov     ebp, esp
.text:00000BC3                 sub     esp, 8
.text:00000BC6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000BCD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BD4                 mov     [ebp+var_4], ecx
.text:00000BD7                 mov     eax, [ebp+var_4]
.text:00000BDA                 mov     ecx, [ebp+var_4]
.text:00000BDD                 mov     edx, [eax]
.text:00000BDF                 cmp     edx, [ecx+4]
.text:00000BE2                 jb      short loc_BEE
.text:00000BE4                 mov     ecx, [ebp+var_4] ; this
.text:00000BE7                 call    ?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ ; CInBufferBase::ReadByte_FromNewBlock(void)
.text:00000BEC                 jmp     short loc_C08
.text:00000BEE ; ---------------------------------------------------------------------------
.text:00000BEE
.text:00000BEE loc_BEE:                                ; CODE XREF: CInBufferBase::ReadByte(void)+22j
.text:00000BEE                 mov     eax, [ebp+var_4]
.text:00000BF1                 mov     ecx, [eax]
.text:00000BF3                 mov     dl, [ecx]
.text:00000BF5                 mov     byte ptr [ebp+var_8+3], dl
.text:00000BF8                 mov     eax, [ebp+var_4]
.text:00000BFB                 mov     ecx, [eax]
.text:00000BFD                 add     ecx, 1
.text:00000C00                 mov     edx, [ebp+var_4]
.text:00000C03                 mov     [edx], ecx
.text:00000C05                 mov     al, byte ptr [ebp+var_8+3]
.text:00000C08
.text:00000C08 loc_C08:                                ; CODE XREF: CInBufferBase::ReadByte(void)+2Cj
.text:00000C08                 add     esp, 8
.text:00000C0B                 cmp     ebp, esp
.text:00000C0D                 call    __RTC_CheckEsp
.text:00000C12                 mov     esp, ebp
.text:00000C14                 pop     ebp
.text:00000C15                 retn
.text:00000C15 ?ReadByte@CInBufferBase@@QAEEXZ endp
.text:00000C15
.text:00000C15 ; ---------------------------------------------------------------------------
.text:00000C16                 align 4
.text:00000C16 _text           ends
.text:00000C16
.text:00000C18 ; ===========================================================================
.text:00000C18
.text:00000C18 ; Segment type: Pure code
.text:00000C18 ; Segment permissions: Read/Execute
.text:00000C18 _text           segment para public 'CODE' use32
.text:00000C18                 assume cs:_text
.text:00000C18                 ;org 0C18h
.text:00000C18 ; COMDAT (pick any)
.text:00000C18                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000C18
.text:00000C18 ; =============== S U B R O U T I N E =======================================
.text:00000C18
.text:00000C18 ; Attributes: bp-based frame
.text:00000C18
.text:00000C18 ; void __thiscall NCompress::NQuantum::NRangeCoder::CDecoder::Init(NCompress::NQuantum::NRangeCoder::CDecoder *__hidden this)
.text:00000C18                 public ?Init@CDecoder@NRangeCoder@NQuantum@NCompress@@QAEXXZ
.text:00000C18 ?Init@CDecoder@NRangeCoder@NQuantum@NCompress@@QAEXXZ proc near
.text:00000C18                                         ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+2Cp
.text:00000C18
.text:00000C18 var_4           = dword ptr -4
.text:00000C18
.text:00000C18                 push    ebp
.text:00000C19                 mov     ebp, esp
.text:00000C1B                 push    ecx
.text:00000C1C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C23                 mov     [ebp+var_4], ecx
.text:00000C26                 mov     ecx, [ebp+var_4]
.text:00000C29                 add     ecx, 10h        ; this
.text:00000C2C                 call    ?Init@CStreamBitDecoder@NQuantum@NCompress@@QAEXXZ ; NCompress::NQuantum::CStreamBitDecoder::Init(void)
.text:00000C31                 mov     eax, [ebp+var_4]
.text:00000C34                 mov     dword ptr [eax], 0
.text:00000C3A                 mov     ecx, [ebp+var_4]
.text:00000C3D                 mov     dword ptr [ecx+4], 10000h
.text:00000C44                 push    10h             ; int
.text:00000C46                 mov     ecx, [ebp+var_4]
.text:00000C49                 add     ecx, 10h        ; this
.text:00000C4C                 call    ?ReadBits@CStreamBitDecoder@NQuantum@NCompress@@QAEIH@Z ; NCompress::NQuantum::CStreamBitDecoder::ReadBits(int)
.text:00000C51                 mov     edx, [ebp+var_4]
.text:00000C54                 mov     [edx+8], eax
.text:00000C57                 add     esp, 4
.text:00000C5A                 cmp     ebp, esp
.text:00000C5C                 call    __RTC_CheckEsp
.text:00000C61                 mov     esp, ebp
.text:00000C63                 pop     ebp
.text:00000C64                 retn
.text:00000C64 ?Init@CDecoder@NRangeCoder@NQuantum@NCompress@@QAEXXZ endp
.text:00000C64
.text:00000C64 ; ---------------------------------------------------------------------------
.text:00000C65                 align 4
.text:00000C65 _text           ends
.text:00000C65
.text:00000C68 ; ===========================================================================
.text:00000C68
.text:00000C68 ; Segment type: Pure code
.text:00000C68 ; Segment permissions: Read/Execute
.text:00000C68 _text           segment para public 'CODE' use32
.text:00000C68                 assume cs:_text
.text:00000C68                 ;org 0C68h
.text:00000C68 ; COMDAT (pick any)
.text:00000C68                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000C68
.text:00000C68 ; =============== S U B R O U T I N E =======================================
.text:00000C68
.text:00000C68 ; Attributes: bp-based frame
.text:00000C68
.text:00000C68 ; void __thiscall NCompress::NQuantum::CStreamBitDecoder::Init(NCompress::NQuantum::CStreamBitDecoder *__hidden this)
.text:00000C68                 public ?Init@CStreamBitDecoder@NQuantum@NCompress@@QAEXXZ
.text:00000C68 ?Init@CStreamBitDecoder@NQuantum@NCompress@@QAEXXZ proc near
.text:00000C68                                         ; CODE XREF: NCompress::NQuantum::NRangeCoder::CDecoder::Init(void)+14p
.text:00000C68
.text:00000C68 var_4           = dword ptr -4
.text:00000C68
.text:00000C68                 push    ebp
.text:00000C69                 mov     ebp, esp
.text:00000C6B                 push    ecx
.text:00000C6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C73                 mov     [ebp+var_4], ecx
.text:00000C76                 mov     ecx, [ebp+var_4]
.text:00000C79                 add     ecx, 8          ; this
.text:00000C7C                 call    ?Init@CInBufferBase@@QAEXXZ ; CInBufferBase::Init(void)
.text:00000C81                 mov     eax, [ebp+var_4]
.text:00000C84                 mov     dword ptr [eax], 10000h
.text:00000C8A                 add     esp, 4
.text:00000C8D                 cmp     ebp, esp
.text:00000C8F                 call    __RTC_CheckEsp
.text:00000C94                 mov     esp, ebp
.text:00000C96                 pop     ebp
.text:00000C97                 retn
.text:00000C97 ?Init@CStreamBitDecoder@NQuantum@NCompress@@QAEXXZ endp
.text:00000C97
.text:00000C97 _text           ends
.text:00000C97
.text:00000C98 ; ===========================================================================
.text:00000C98
.text:00000C98 ; Segment type: Pure code
.text:00000C98 ; Segment permissions: Read/Execute
.text:00000C98 _text           segment para public 'CODE' use32
.text:00000C98                 assume cs:_text
.text:00000C98                 ;org 0C98h
.text:00000C98 ; COMDAT (pick any)
.text:00000C98                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000C98
.text:00000C98 ; =============== S U B R O U T I N E =======================================
.text:00000C98
.text:00000C98 ; Attributes: bp-based frame
.text:00000C98
.text:00000C98 ; unsigned int __thiscall NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CModelDecoder *this, struct NCompress::NQuantum::NRangeCoder::CDecoder *)
.text:00000C98                 public ?Decode@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEIPAVCDecoder@234@@Z
.text:00000C98 ?Decode@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEIPAVCDecoder@234@@Z proc near
.text:00000C98                                         ; CODE XREF: NCompress::NQuantum::CDecoder::CodeSpec(uint)+CCp
.text:00000C98                                         ; NCompress::NQuantum::CDecoder::CodeSpec(uint)+FAp ...
.text:00000C98
.text:00000C98 var_2C          = dword ptr -2Ch
.text:00000C98 var_28          = dword ptr -28h
.text:00000C98 var_24          = dword ptr -24h
.text:00000C98 var_20          = dword ptr -20h
.text:00000C98 var_19          = byte ptr -19h
.text:00000C98 var_18          = word ptr -18h
.text:00000C98 var_14          = dword ptr -14h
.text:00000C98 var_10          = dword ptr -10h
.text:00000C98 var_C           = dword ptr -0Ch
.text:00000C98 var_8           = dword ptr -8
.text:00000C98 var_4           = dword ptr -4
.text:00000C98 arg_0           = dword ptr  8
.text:00000C98
.text:00000C98                 push    ebp
.text:00000C99                 mov     ebp, esp
.text:00000C9B                 sub     esp, 2Ch
.text:00000C9E                 push    esi
.text:00000C9F                 push    edi
.text:00000CA0                 push    ecx
.text:00000CA1                 lea     edi, [ebp+var_2C]
.text:00000CA4                 mov     ecx, 0Bh
.text:00000CA9                 mov     eax, 0CCCCCCCCh
.text:00000CAE                 rep stosd
.text:00000CB0                 pop     ecx
.text:00000CB1                 mov     [ebp+var_4], ecx
.text:00000CB4                 mov     eax, [ebp+var_4]
.text:00000CB7                 movzx   ecx, word ptr [eax+8]
.text:00000CBB                 push    ecx             ; unsigned int
.text:00000CBC                 mov     ecx, [ebp+arg_0] ; this
.text:00000CBF                 call    ?GetThreshold@CDecoder@NRangeCoder@NQuantum@NCompress@@QBEII@Z ; NCompress::NQuantum::NRangeCoder::CDecoder::GetThreshold(uint)
.text:00000CC4                 mov     [ebp+var_8], eax
.text:00000CC7                 mov     [ebp+var_C], 1
.text:00000CCE                 jmp     short loc_CD9
.text:00000CD0 ; ---------------------------------------------------------------------------
.text:00000CD0
.text:00000CD0 loc_CD0:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+51j
.text:00000CD0                 mov     edx, [ebp+var_C]
.text:00000CD3                 add     edx, 1
.text:00000CD6                 mov     [ebp+var_C], edx
.text:00000CD9
.text:00000CD9 loc_CD9:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+36j
.text:00000CD9                 mov     eax, [ebp+var_C]
.text:00000CDC                 mov     ecx, [ebp+var_4]
.text:00000CDF                 movzx   edx, word ptr [ecx+eax*2+8]
.text:00000CE4                 cmp     edx, [ebp+var_8]
.text:00000CE7                 jbe     short loc_CEB
.text:00000CE9                 jmp     short loc_CD0
.text:00000CEB ; ---------------------------------------------------------------------------
.text:00000CEB
.text:00000CEB loc_CEB:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+4Fj
.text:00000CEB                 mov     eax, [ebp+var_4]
.text:00000CEE                 movzx   ecx, word ptr [eax+8]
.text:00000CF2                 push    ecx             ; unsigned int
.text:00000CF3                 mov     edx, [ebp+var_C]
.text:00000CF6                 mov     eax, [ebp+var_4]
.text:00000CF9                 movzx   ecx, word ptr [eax+edx*2+6]
.text:00000CFE                 push    ecx             ; unsigned int
.text:00000CFF                 mov     edx, [ebp+var_C]
.text:00000D02                 mov     eax, [ebp+var_4]
.text:00000D05                 movzx   ecx, word ptr [eax+edx*2+8]
.text:00000D0A                 push    ecx             ; unsigned int
.text:00000D0B                 mov     ecx, [ebp+arg_0] ; this
.text:00000D0E                 call    ?Decode@CDecoder@NRangeCoder@NQuantum@NCompress@@QAEXIII@Z ; NCompress::NQuantum::NRangeCoder::CDecoder::Decode(uint,uint,uint)
.text:00000D13                 mov     edx, [ebp+var_C]
.text:00000D16                 sub     edx, 1
.text:00000D19                 mov     [ebp+var_C], edx
.text:00000D1C                 mov     eax, [ebp+var_4]
.text:00000D1F                 add     eax, [ebp+var_C]
.text:00000D22                 movzx   ecx, byte ptr [eax+8Ah]
.text:00000D29                 mov     [ebp+var_10], ecx
.text:00000D2C
.text:00000D2C loc_D2C:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+D1j
.text:00000D2C                 mov     edx, [ebp+var_C]
.text:00000D2F                 mov     eax, [ebp+var_4]
.text:00000D32                 movzx   ecx, word ptr [eax+edx*2+8]
.text:00000D37                 add     ecx, 8
.text:00000D3A                 mov     edx, [ebp+var_C]
.text:00000D3D                 mov     eax, [ebp+var_4]
.text:00000D40                 mov     [eax+edx*2+8], cx
.text:00000D45                 mov     ecx, [ebp+var_C]
.text:00000D48                 mov     edx, [ebp+var_C]
.text:00000D4B                 sub     edx, 1
.text:00000D4E                 mov     [ebp+var_C], edx
.text:00000D51                 test    ecx, ecx
.text:00000D53                 jz      short loc_D5E
.text:00000D55                 mov     [ebp+var_20], 1
.text:00000D5C                 jmp     short loc_D65
.text:00000D5E ; ---------------------------------------------------------------------------
.text:00000D5E
.text:00000D5E loc_D5E:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+BBj
.text:00000D5E                 mov     [ebp+var_20], 0
.text:00000D65
.text:00000D65 loc_D65:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+C4j
.text:00000D65                 cmp     [ebp+var_20], 0
.text:00000D69                 jnz     short loc_D2C
.text:00000D6B                 mov     eax, [ebp+var_4]
.text:00000D6E                 movzx   ecx, word ptr [eax+8]
.text:00000D72                 cmp     ecx, 0ED8h
.text:00000D78                 jle     loc_F88
.text:00000D7E                 mov     edx, [ebp+var_4]
.text:00000D81                 mov     eax, [edx+4]
.text:00000D84                 sub     eax, 1
.text:00000D87                 mov     [ebp+var_24], eax
.text:00000D8A                 mov     ecx, [ebp+var_4]
.text:00000D8D                 mov     edx, [ebp+var_24]
.text:00000D90                 mov     [ecx+4], edx
.text:00000D93                 cmp     [ebp+var_24], 0
.text:00000D97                 jnz     loc_F0B
.text:00000D9D                 mov     eax, [ebp+var_4]
.text:00000DA0                 mov     dword ptr [eax+4], 32h ; '2'
.text:00000DA7                 mov     [ebp+var_C], 0
.text:00000DAE                 jmp     short loc_DB9
.text:00000DB0 ; ---------------------------------------------------------------------------
.text:00000DB0
.text:00000DB0 loc_DB0:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+153j
.text:00000DB0                 mov     ecx, [ebp+var_C]
.text:00000DB3                 add     ecx, 1
.text:00000DB6                 mov     [ebp+var_C], ecx
.text:00000DB9
.text:00000DB9 loc_DB9:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+116j
.text:00000DB9                 mov     edx, [ebp+var_4]
.text:00000DBC                 mov     eax, [ebp+var_C]
.text:00000DBF                 cmp     eax, [edx]
.text:00000DC1                 jnb     short loc_DED
.text:00000DC3                 mov     ecx, [ebp+var_C]
.text:00000DC6                 mov     edx, [ebp+var_4]
.text:00000DC9                 movzx   eax, word ptr [edx+ecx*2+8]
.text:00000DCE                 mov     ecx, [ebp+var_C]
.text:00000DD1                 mov     edx, [ebp+var_4]
.text:00000DD4                 movzx   ecx, word ptr [edx+ecx*2+0Ah]
.text:00000DD9                 sub     eax, ecx
.text:00000DDB                 add     eax, 1
.text:00000DDE                 sar     eax, 1
.text:00000DE0                 mov     edx, [ebp+var_C]
.text:00000DE3                 mov     ecx, [ebp+var_4]
.text:00000DE6                 mov     [ecx+edx*2+8], ax
.text:00000DEB                 jmp     short loc_DB0
.text:00000DED ; ---------------------------------------------------------------------------
.text:00000DED
.text:00000DED loc_DED:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+129j
.text:00000DED                 mov     [ebp+var_C], 0
.text:00000DF4                 jmp     short loc_DFF
.text:00000DF6 ; ---------------------------------------------------------------------------
.text:00000DF6
.text:00000DF6 loc_DF6:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *):loc_EBBj
.text:00000DF6                 mov     edx, [ebp+var_C]
.text:00000DF9                 add     edx, 1
.text:00000DFC                 mov     [ebp+var_C], edx
.text:00000DFF
.text:00000DFF loc_DFF:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+15Cj
.text:00000DFF                 mov     eax, [ebp+var_4]
.text:00000E02                 mov     ecx, [eax]
.text:00000E04                 sub     ecx, 1
.text:00000E07                 cmp     [ebp+var_C], ecx
.text:00000E0A                 jnb     loc_EC0
.text:00000E10                 mov     edx, [ebp+var_C]
.text:00000E13                 add     edx, 1
.text:00000E16                 mov     [ebp+var_14], edx
.text:00000E19                 jmp     short loc_E24
.text:00000E1B ; ---------------------------------------------------------------------------
.text:00000E1B
.text:00000E1B loc_E1B:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *):loc_EB6j
.text:00000E1B                 mov     eax, [ebp+var_14]
.text:00000E1E                 add     eax, 1
.text:00000E21                 mov     [ebp+var_14], eax
.text:00000E24
.text:00000E24 loc_E24:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+181j
.text:00000E24                 mov     ecx, [ebp+var_4]
.text:00000E27                 mov     edx, [ebp+var_14]
.text:00000E2A                 cmp     edx, [ecx]
.text:00000E2C                 jnb     loc_EBB
.text:00000E32                 mov     eax, [ebp+var_C]
.text:00000E35                 mov     ecx, [ebp+var_4]
.text:00000E38                 movzx   edx, word ptr [ecx+eax*2+8]
.text:00000E3D                 mov     eax, [ebp+var_14]
.text:00000E40                 mov     ecx, [ebp+var_4]
.text:00000E43                 movzx   eax, word ptr [ecx+eax*2+8]
.text:00000E48                 cmp     edx, eax
.text:00000E4A                 jge     short loc_EB6
.text:00000E4C                 mov     ecx, [ebp+var_C]
.text:00000E4F                 mov     edx, [ebp+var_4]
.text:00000E52                 mov     ax, [edx+ecx*2+8]
.text:00000E57                 mov     [ebp+var_18], ax
.text:00000E5B                 mov     ecx, [ebp+var_4]
.text:00000E5E                 add     ecx, [ebp+var_C]
.text:00000E61                 mov     dl, [ecx+8Ah]
.text:00000E67                 mov     [ebp+var_19], dl
.text:00000E6A                 mov     eax, [ebp+var_C]
.text:00000E6D                 mov     ecx, [ebp+var_4]
.text:00000E70                 mov     edx, [ebp+var_14]
.text:00000E73                 mov     esi, [ebp+var_4]
.text:00000E76                 mov     dx, [esi+edx*2+8]
.text:00000E7B                 mov     [ecx+eax*2+8], dx
.text:00000E80                 mov     eax, [ebp+var_4]
.text:00000E83                 add     eax, [ebp+var_C]
.text:00000E86                 mov     ecx, [ebp+var_4]
.text:00000E89                 add     ecx, [ebp+var_14]
.text:00000E8C                 mov     dl, [ecx+8Ah]
.text:00000E92                 mov     [eax+8Ah], dl
.text:00000E98                 mov     eax, [ebp+var_14]
.text:00000E9B                 mov     ecx, [ebp+var_4]
.text:00000E9E                 mov     dx, [ebp+var_18]
.text:00000EA2                 mov     [ecx+eax*2+8], dx
.text:00000EA7                 mov     eax, [ebp+var_4]
.text:00000EAA                 add     eax, [ebp+var_14]
.text:00000EAD                 mov     cl, [ebp+var_19]
.text:00000EB0                 mov     [eax+8Ah], cl
.text:00000EB6
.text:00000EB6 loc_EB6:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+1B2j
.text:00000EB6                 jmp     loc_E1B
.text:00000EBB ; ---------------------------------------------------------------------------
.text:00000EBB
.text:00000EBB loc_EBB:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+194j
.text:00000EBB                 jmp     loc_DF6
.text:00000EC0 ; ---------------------------------------------------------------------------
.text:00000EC0
.text:00000EC0 loc_EC0:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+172j
.text:00000EC0                                         ; NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+26Fj
.text:00000EC0                 mov     edx, [ebp+var_C]
.text:00000EC3                 mov     eax, [ebp+var_4]
.text:00000EC6                 movzx   ecx, word ptr [eax+edx*2+8]
.text:00000ECB                 mov     edx, [ebp+var_C]
.text:00000ECE                 mov     eax, [ebp+var_4]
.text:00000ED1                 movzx   edx, word ptr [eax+edx*2+0Ah]
.text:00000ED6                 add     ecx, edx
.text:00000ED8                 mov     eax, [ebp+var_C]
.text:00000EDB                 mov     edx, [ebp+var_4]
.text:00000EDE                 mov     [edx+eax*2+8], cx
.text:00000EE3                 mov     eax, [ebp+var_C]
.text:00000EE6                 mov     ecx, [ebp+var_C]
.text:00000EE9                 sub     ecx, 1
.text:00000EEC                 mov     [ebp+var_C], ecx
.text:00000EEF                 test    eax, eax
.text:00000EF1                 jz      short loc_EFC
.text:00000EF3                 mov     [ebp+var_28], 1
.text:00000EFA                 jmp     short loc_F03
.text:00000EFC ; ---------------------------------------------------------------------------
.text:00000EFC
.text:00000EFC loc_EFC:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+259j
.text:00000EFC                 mov     [ebp+var_28], 0
.text:00000F03
.text:00000F03 loc_F03:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+262j
.text:00000F03                 cmp     [ebp+var_28], 0
.text:00000F07                 jnz     short loc_EC0
.text:00000F09                 jmp     short loc_F88
.text:00000F0B ; ---------------------------------------------------------------------------
.text:00000F0B
.text:00000F0B loc_F0B:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+FFj
.text:00000F0B                 mov     edx, [ebp+var_4]
.text:00000F0E                 mov     eax, [edx]
.text:00000F10                 sub     eax, 1
.text:00000F13                 mov     [ebp+var_C], eax
.text:00000F16
.text:00000F16 loc_F16:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+2EEj
.text:00000F16                 mov     ecx, [ebp+var_C]
.text:00000F19                 mov     edx, [ebp+var_4]
.text:00000F1C                 mov     ax, [edx+ecx*2+8]
.text:00000F21                 shr     ax, 1
.text:00000F24                 mov     ecx, [ebp+var_C]
.text:00000F27                 mov     edx, [ebp+var_4]
.text:00000F2A                 mov     [edx+ecx*2+8], ax
.text:00000F2F                 mov     eax, [ebp+var_C]
.text:00000F32                 mov     ecx, [ebp+var_4]
.text:00000F35                 movzx   edx, word ptr [ecx+eax*2+8]
.text:00000F3A                 mov     eax, [ebp+var_C]
.text:00000F3D                 mov     ecx, [ebp+var_4]
.text:00000F40                 movzx   eax, word ptr [ecx+eax*2+0Ah]
.text:00000F45                 cmp     edx, eax
.text:00000F47                 jg      short loc_F62
.text:00000F49                 mov     ecx, [ebp+var_C]
.text:00000F4C                 mov     edx, [ebp+var_4]
.text:00000F4F                 movzx   eax, word ptr [edx+ecx*2+0Ah]
.text:00000F54                 add     eax, 1
.text:00000F57                 mov     ecx, [ebp+var_C]
.text:00000F5A                 mov     edx, [ebp+var_4]
.text:00000F5D                 mov     [edx+ecx*2+8], ax
.text:00000F62
.text:00000F62 loc_F62:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+2AFj
.text:00000F62                 mov     eax, [ebp+var_C]
.text:00000F65                 mov     ecx, [ebp+var_C]
.text:00000F68                 sub     ecx, 1
.text:00000F6B                 mov     [ebp+var_C], ecx
.text:00000F6E                 test    eax, eax
.text:00000F70                 jz      short loc_F7B
.text:00000F72                 mov     [ebp+var_2C], 1
.text:00000F79                 jmp     short loc_F82
.text:00000F7B ; ---------------------------------------------------------------------------
.text:00000F7B
.text:00000F7B loc_F7B:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+2D8j
.text:00000F7B                 mov     [ebp+var_2C], 0
.text:00000F82
.text:00000F82 loc_F82:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+2E1j
.text:00000F82                 cmp     [ebp+var_2C], 0
.text:00000F86                 jnz     short loc_F16
.text:00000F88
.text:00000F88 loc_F88:                                ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+E0j
.text:00000F88                                         ; NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+271j
.text:00000F88                 mov     eax, [ebp+var_10]
.text:00000F8B                 pop     edi
.text:00000F8C                 pop     esi
.text:00000F8D                 add     esp, 2Ch
.text:00000F90                 cmp     ebp, esp
.text:00000F92                 call    __RTC_CheckEsp
.text:00000F97                 mov     esp, ebp
.text:00000F99                 pop     ebp
.text:00000F9A                 retn    4
.text:00000F9A ?Decode@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEIPAVCDecoder@234@@Z endp
.text:00000F9A
.text:00000F9A ; ---------------------------------------------------------------------------
.text:00000F9D                 align 10h
.text:00000F9D _text           ends
.text:00000F9D
.text:00000FA0 ; ===========================================================================
.text:00000FA0
.text:00000FA0 ; Segment type: Pure code
.text:00000FA0 ; Segment permissions: Read/Execute
.text:00000FA0 _text           segment para public 'CODE' use32
.text:00000FA0                 assume cs:_text
.text:00000FA0                 ;org 0FA0h
.text:00000FA0 ; COMDAT (pick any)
.text:00000FA0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000FA0
.text:00000FA0 ; =============== S U B R O U T I N E =======================================
.text:00000FA0
.text:00000FA0 ; Attributes: bp-based frame
.text:00000FA0
.text:00000FA0 ; unsigned int __thiscall NCompress::NQuantum::NRangeCoder::CDecoder::GetThreshold(NCompress::NQuantum::NRangeCoder::CDecoder *this, unsigned int)
.text:00000FA0                 public ?GetThreshold@CDecoder@NRangeCoder@NQuantum@NCompress@@QBEII@Z
.text:00000FA0 ?GetThreshold@CDecoder@NRangeCoder@NQuantum@NCompress@@QBEII@Z proc near
.text:00000FA0                                         ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+27p
.text:00000FA0
.text:00000FA0 var_4           = dword ptr -4
.text:00000FA0 arg_0           = dword ptr  8
.text:00000FA0
.text:00000FA0                 push    ebp
.text:00000FA1                 mov     ebp, esp
.text:00000FA3                 push    ecx
.text:00000FA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000FAB                 mov     [ebp+var_4], ecx
.text:00000FAE                 mov     eax, [ebp+var_4]
.text:00000FB1                 mov     eax, [eax+8]
.text:00000FB4                 add     eax, 1
.text:00000FB7                 imul    eax, [ebp+arg_0]
.text:00000FBB                 sub     eax, 1
.text:00000FBE                 mov     ecx, [ebp+var_4]
.text:00000FC1                 xor     edx, edx
.text:00000FC3                 div     dword ptr [ecx+4]
.text:00000FC6                 mov     esp, ebp
.text:00000FC8                 pop     ebp
.text:00000FC9                 retn    4
.text:00000FC9 ?GetThreshold@CDecoder@NRangeCoder@NQuantum@NCompress@@QBEII@Z endp
.text:00000FC9
.text:00000FC9 _text           ends
.text:00000FC9
.text:00000FCC ; ===========================================================================
.text:00000FCC
.text:00000FCC ; Segment type: Pure code
.text:00000FCC ; Segment permissions: Read/Execute
.text:00000FCC _text           segment para public 'CODE' use32
.text:00000FCC                 assume cs:_text
.text:00000FCC                 ;org 0FCCh
.text:00000FCC ; COMDAT (pick any)
.text:00000FCC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000FCC
.text:00000FCC ; =============== S U B R O U T I N E =======================================
.text:00000FCC
.text:00000FCC ; Attributes: bp-based frame
.text:00000FCC
.text:00000FCC ; void __thiscall NCompress::NQuantum::NRangeCoder::CDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *this, unsigned int, unsigned int, unsigned int)
.text:00000FCC                 public ?Decode@CDecoder@NRangeCoder@NQuantum@NCompress@@QAEXIII@Z
.text:00000FCC ?Decode@CDecoder@NRangeCoder@NQuantum@NCompress@@QAEXIII@Z proc near
.text:00000FCC                                         ; CODE XREF: NCompress::NQuantum::NRangeCoder::CModelDecoder::Decode(NCompress::NQuantum::NRangeCoder::CDecoder *)+76p
.text:00000FCC
.text:00000FCC var_C           = dword ptr -0Ch
.text:00000FCC var_8           = dword ptr -8
.text:00000FCC var_4           = dword ptr -4
.text:00000FCC arg_0           = dword ptr  8
.text:00000FCC arg_4           = dword ptr  0Ch
.text:00000FCC arg_8           = dword ptr  10h
.text:00000FCC
.text:00000FCC                 push    ebp
.text:00000FCD                 mov     ebp, esp
.text:00000FCF                 sub     esp, 0Ch
.text:00000FD2                 push    esi
.text:00000FD3                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000FDA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000FE1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000FE8                 mov     [ebp+var_4], ecx
.text:00000FEB                 mov     eax, [ebp+var_4]
.text:00000FEE                 mov     ecx, [ebp+arg_4]
.text:00000FF1                 imul    ecx, [eax+4]
.text:00000FF5                 mov     eax, ecx
.text:00000FF7                 xor     edx, edx
.text:00000FF9                 div     [ebp+arg_8]
.text:00000FFC                 mov     edx, [ebp+var_4]
.text:00000FFF                 mov     ecx, [edx]
.text:00001001                 lea     edx, [ecx+eax-1]
.text:00001005                 mov     [ebp+var_8], edx
.text:00001008                 mov     eax, [ebp+var_4]
.text:0000100B                 mov     ecx, [ebp+arg_0]
.text:0000100E                 imul    ecx, [eax+4]
.text:00001012                 mov     eax, ecx
.text:00001014                 xor     edx, edx
.text:00001016                 div     [ebp+arg_8]
.text:00001019                 mov     [ebp+var_C], eax
.text:0000101C                 mov     edx, [ebp+var_4]
.text:0000101F                 mov     eax, [edx+8]
.text:00001022                 sub     eax, [ebp+var_C]
.text:00001025                 mov     ecx, [ebp+var_4]
.text:00001028                 mov     [ecx+8], eax
.text:0000102B                 mov     edx, [ebp+var_4]
.text:0000102E                 mov     eax, [edx]
.text:00001030                 add     eax, [ebp+var_C]
.text:00001033                 mov     ecx, [ebp+var_4]
.text:00001036                 mov     [ecx], eax
.text:00001038
.text:00001038 loc_1038:                               ; CODE XREF: NCompress::NQuantum::NRangeCoder::CDecoder::Decode(uint,uint,uint)+F4j
.text:00001038                 mov     edx, [ebp+var_4]
.text:0000103B                 mov     eax, [edx]
.text:0000103D                 and     eax, 8000h
.text:00001042                 mov     ecx, [ebp+var_8]
.text:00001045                 and     ecx, 8000h
.text:0000104B                 cmp     eax, ecx
.text:0000104D                 jz      short loc_1083
.text:0000104F                 mov     edx, [ebp+var_4]
.text:00001052                 mov     eax, [edx]
.text:00001054                 and     eax, 4000h
.text:00001059                 jz      short loc_1066
.text:0000105B                 mov     ecx, [ebp+var_8]
.text:0000105E                 and     ecx, 4000h
.text:00001064                 jz      short loc_1068
.text:00001066
.text:00001066 loc_1066:                               ; CODE XREF: NCompress::NQuantum::NRangeCoder::CDecoder::Decode(uint,uint,uint)+8Dj
.text:00001066                 jmp     short loc_10C5
.text:00001068 ; ---------------------------------------------------------------------------
.text:00001068
.text:00001068 loc_1068:                               ; CODE XREF: NCompress::NQuantum::NRangeCoder::CDecoder::Decode(uint,uint,uint)+98j
.text:00001068                 mov     edx, [ebp+var_4]
.text:0000106B                 mov     eax, [edx]
.text:0000106D                 and     eax, 3FFFh
.text:00001072                 mov     ecx, [ebp+var_4]
.text:00001075                 mov     [ecx], eax
.text:00001077                 mov     edx, [ebp+var_8]
.text:0000107A                 or      edx, 4000h
.text:00001080                 mov     [ebp+var_8], edx
.text:00001083
.text:00001083 loc_1083:                               ; CODE XREF: NCompress::NQuantum::NRangeCoder::CDecoder::Decode(uint,uint,uint)+81j
.text:00001083                 mov     eax, [ebp+var_4]
.text:00001086                 mov     ecx, [eax]
.text:00001088                 shl     ecx, 1
.text:0000108A                 and     ecx, 0FFFFh
.text:00001090                 mov     edx, [ebp+var_4]
.text:00001093                 mov     [edx], ecx
.text:00001095                 mov     eax, [ebp+var_8]
.text:00001098                 shl     eax, 1
.text:0000109A                 or      eax, 1
.text:0000109D                 and     eax, 0FFFFh
.text:000010A2                 mov     [ebp+var_8], eax
.text:000010A5                 mov     ecx, [ebp+var_4]
.text:000010A8                 mov     esi, [ecx+8]
.text:000010AB                 shl     esi, 1
.text:000010AD                 mov     ecx, [ebp+var_4]
.text:000010B0                 add     ecx, 10h        ; this
.text:000010B3                 call    ?ReadBit@CStreamBitDecoder@NQuantum@NCompress@@QAEIXZ ; NCompress::NQuantum::CStreamBitDecoder::ReadBit(void)
.text:000010B8                 or      esi, eax
.text:000010BA                 mov     edx, [ebp+var_4]
.text:000010BD                 mov     [edx+8], esi
.text:000010C0                 jmp     loc_1038
.text:000010C5 ; ---------------------------------------------------------------------------
.text:000010C5
.text:000010C5 loc_10C5:                               ; CODE XREF: NCompress::NQuantum::NRangeCoder::CDecoder::Decode(uint,uint,uint):loc_1066j
.text:000010C5                 mov     eax, [ebp+var_4]
.text:000010C8                 mov     ecx, [ebp+var_8]
.text:000010CB                 sub     ecx, [eax]
.text:000010CD                 add     ecx, 1
.text:000010D0                 mov     edx, [ebp+var_4]
.text:000010D3                 mov     [edx+4], ecx
.text:000010D6                 pop     esi
.text:000010D7                 add     esp, 0Ch
.text:000010DA                 cmp     ebp, esp
.text:000010DC                 call    __RTC_CheckEsp
.text:000010E1                 mov     esp, ebp
.text:000010E3                 pop     ebp
.text:000010E4                 retn    0Ch
.text:000010E4 ?Decode@CDecoder@NRangeCoder@NQuantum@NCompress@@QAEXIII@Z endp
.text:000010E4
.text:000010E4 ; ---------------------------------------------------------------------------
.text:000010E7                 align 4
.text:000010E7 _text           ends
.text:000010E7
.text$x:000010E8 ; ===========================================================================
.text$x:000010E8
.text$x:000010E8 ; Segment type: Pure code
.text$x:000010E8 ; Segment permissions: Read/Execute
.text$x:000010E8 _text$x         segment para public 'CODE' use32
.text$x:000010E8                 assume cs:_text$x
.text$x:000010E8                 ;org 10E8h
.text$x:000010E8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000010E8
.text$x:000010E8 ; =============== S U B R O U T I N E =======================================
.text$x:000010E8
.text$x:000010E8
.text$x:000010E8 __unwindfunclet$?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 proc near
.text$x:000010E8                                         ; DATA XREF: .xdata$x:0000112Co
.text$x:000010E8                 lea     ecx, [ebp-24h]  ; this
.text$x:000010EB                 jmp     ??1CDecoderFlusher@CDecoder@NQuantum@NCompress@@QAE@XZ ; NCompress::NQuantum::CDecoder::CDecoderFlusher::~CDecoderFlusher(void)
.text$x:000010EB __unwindfunclet$?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 endp
.text$x:000010EB
.text$x:000010F0
.text$x:000010F0 ; =============== S U B R O U T I N E =======================================
.text$x:000010F0
.text$x:000010F0
.text$x:000010F0 __ehhandler$?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text$x:000010F0                                         ; DATA XREF: NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5o
.text$x:000010F0
.text$x:000010F0 arg_4           = dword ptr  8
.text$x:000010F0
.text$x:000010F0                 mov     edx, [esp+arg_4]
.text$x:000010F4                 lea     eax, [edx+0Ch]
.text$x:000010F7                 mov     ecx, [edx-78h]
.text$x:000010FA                 xor     ecx, eax
.text$x:000010FC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001101                 mov     eax, offset __ehfuncinfo$?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text$x:00001106                 jmp     ___CxxFrameHandler3
.text$x:00001106 __ehhandler$?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text$x:00001106
.text$x:0000110B
.text$x:0000110B ; =============== S U B R O U T I N E =======================================
.text$x:0000110B
.text$x:0000110B
.text$x:0000110B __ehhandler$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text$x:0000110B                                         ; DATA XREF: NCompress::NQuantum::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5o
.text$x:0000110B
.text$x:0000110B arg_4           = dword ptr  8
.text$x:0000110B
.text$x:0000110B                 mov     edx, [esp+arg_4]
.text$x:0000110F                 lea     eax, [edx+0Ch]
.text$x:00001112                 mov     ecx, [edx-3Ch]
.text$x:00001115                 xor     ecx, eax
.text$x:00001117                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000111C                 mov     eax, offset __ehfuncinfo$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text$x:00001121                 jmp     ___CxxFrameHandler3
.text$x:00001121 __ehhandler$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text$x:00001121
.text$x:00001121 ; ---------------------------------------------------------------------------
.text$x:00001126                 align 4
.text$x:00001126 _text$x         ends
.text$x:00001126
.xdata$x:00001128 ; ===========================================================================
.xdata$x:00001128
.xdata$x:00001128 ; Segment type: Pure data
.xdata$x:00001128 ; Segment permissions: Read
.xdata$x:00001128 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001128                 assume cs:_xdata$x
.xdata$x:00001128                 ;org 1128h
.xdata$x:00001128 __unwindtable$?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:00001128                                         ; DATA XREF: .xdata$x:00001138o
.xdata$x:00001129                 db 0FFh
.xdata$x:0000112A                 db 0FFh
.xdata$x:0000112B                 db 0FFh
.xdata$x:0000112C                 dd offset __unwindfunclet$?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0
.xdata$x:00001130 __ehfuncinfo$?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:00001130                                         ; DATA XREF: __ehhandler$?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+11o
.xdata$x:00001131                 db    5
.xdata$x:00001132                 db  93h ; Ã´
.xdata$x:00001133                 db  19h
.xdata$x:00001134                 db    1
.xdata$x:00001135                 db    0
.xdata$x:00001136                 db    0
.xdata$x:00001137                 db    0
.xdata$x:00001138                 dd offset __unwindtable$?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.xdata$x:0000113C                 db    0
.xdata$x:0000113D                 db    0
.xdata$x:0000113E                 db    0
.xdata$x:0000113F                 db    0
.xdata$x:00001140                 db    0
.xdata$x:00001141                 db    0
.xdata$x:00001142                 db    0
.xdata$x:00001143                 db    0
.xdata$x:00001144                 db    0
.xdata$x:00001145                 db    0
.xdata$x:00001146                 db    0
.xdata$x:00001147                 db    0
.xdata$x:00001148                 db    0
.xdata$x:00001149                 db    0
.xdata$x:0000114A                 db    0
.xdata$x:0000114B                 db    0
.xdata$x:0000114C                 db    0
.xdata$x:0000114D                 db    0
.xdata$x:0000114E                 db    0
.xdata$x:0000114F                 db    0
.xdata$x:00001150                 db    1
.xdata$x:00001151                 db    0
.xdata$x:00001152                 db    0
.xdata$x:00001153                 db    0
.xdata$x:00001154 __unwindtable$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:00001154                                         ; DATA XREF: .xdata$x:00001180o
.xdata$x:00001155                 db 0FFh
.xdata$x:00001156                 db 0FFh
.xdata$x:00001157                 db 0FFh
.xdata$x:00001158                 db    0
.xdata$x:00001159                 db    0
.xdata$x:0000115A                 db    0
.xdata$x:0000115B                 db    0
.xdata$x:0000115C                 db 0FFh
.xdata$x:0000115D                 db 0FFh
.xdata$x:0000115E                 db 0FFh
.xdata$x:0000115F                 db 0FFh
.xdata$x:00001160                 db    0
.xdata$x:00001161                 db    0
.xdata$x:00001162                 db    0
.xdata$x:00001163                 db    0
.xdata$x:00001164 __tryblocktable$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db    0
.xdata$x:00001164                                         ; DATA XREF: .xdata$x:00001188o
.xdata$x:00001165                 db    0
.xdata$x:00001166                 db    0
.xdata$x:00001167                 db    0
.xdata$x:00001168                 db    0
.xdata$x:00001169                 db    0
.xdata$x:0000116A                 db    0
.xdata$x:0000116B                 db    0
.xdata$x:0000116C                 db    1
.xdata$x:0000116D                 db    0
.xdata$x:0000116E                 db    0
.xdata$x:0000116F                 db    0
.xdata$x:00001170                 db    3
.xdata$x:00001171                 db    0
.xdata$x:00001172                 db    0
.xdata$x:00001173                 db    0
.xdata$x:00001174                 dd offset __catchsym$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$4
.xdata$x:00001178 __ehfuncinfo$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:00001178                                         ; DATA XREF: __ehhandler$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+11o
.xdata$x:00001179                 db    5
.xdata$x:0000117A                 db  93h ; Ã´
.xdata$x:0000117B                 db  19h
.xdata$x:0000117C                 db    2
.xdata$x:0000117D                 db    0
.xdata$x:0000117E                 db    0
.xdata$x:0000117F                 db    0
.xdata$x:00001180                 dd offset __unwindtable$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.xdata$x:00001184                 db    1
.xdata$x:00001185                 db    0
.xdata$x:00001186                 db    0
.xdata$x:00001187                 db    0
.xdata$x:00001188                 dd offset __tryblocktable$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.xdata$x:0000118C                 db    0
.xdata$x:0000118D                 db    0
.xdata$x:0000118E                 db    0
.xdata$x:0000118F                 db    0
.xdata$x:00001190                 db    0
.xdata$x:00001191                 db    0
.xdata$x:00001192                 db    0
.xdata$x:00001193                 db    0
.xdata$x:00001194                 db    0
.xdata$x:00001195                 db    0
.xdata$x:00001196                 db    0
.xdata$x:00001197                 db    0
.xdata$x:00001198                 db    1
.xdata$x:00001199                 db    0
.xdata$x:0000119A                 db    0
.xdata$x:0000119B                 db    0
.xdata$x:0000119C __catchsym$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$4 db    9
.xdata$x:0000119C                                         ; DATA XREF: .xdata$x:00001174o
.xdata$x:0000119D                 db    0
.xdata$x:0000119E                 db    0
.xdata$x:0000119F                 db    0
.xdata$x:000011A0                 dd offset ??_R0?AUCInBufferException@@@8 ; CInBufferException `RTTI Type Descriptor'
.xdata$x:000011A4                 db 0E8h ; F
.xdata$x:000011A5                 db 0FFh
.xdata$x:000011A6                 db 0FFh
.xdata$x:000011A7                 db 0FFh
.xdata$x:000011A8                 dd offset __catch$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0
.xdata$x:000011AC                 db    9
.xdata$x:000011AD                 db    0
.xdata$x:000011AE                 db    0
.xdata$x:000011AF                 db    0
.xdata$x:000011B0                 dd offset ??_R0?AUCOutBufferException@@@8 ; COutBufferException `RTTI Type Descriptor'
.xdata$x:000011B4                 db 0DCh ; _
.xdata$x:000011B5                 db 0FFh
.xdata$x:000011B6                 db 0FFh
.xdata$x:000011B7                 db 0FFh
.xdata$x:000011B8                 dd offset __catch$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1
.xdata$x:000011BC                 dd offset loc_3E+2
.xdata$x:000011C0                 db    0
.xdata$x:000011C1                 db    0
.xdata$x:000011C2                 db    0
.xdata$x:000011C3                 db    0
.xdata$x:000011C4                 db    0
.xdata$x:000011C5                 db    0
.xdata$x:000011C6                 db    0
.xdata$x:000011C7                 db    0
.xdata$x:000011C8                 dd offset __catch$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2
.xdata$x:000011C8 _xdata$x        ends
.xdata$x:000011C8
.text:000011CC ; ===========================================================================
.text:000011CC
.text:000011CC ; Segment type: Pure code
.text:000011CC ; Segment permissions: Read/Execute
.text:000011CC _text           segment para public 'CODE' use32
.text:000011CC                 assume cs:_text
.text:000011CC                 ;org 11CCh
.text:000011CC ; COMDAT (pick any)
.text:000011CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000011CC
.text:000011CC ; =============== S U B R O U T I N E =======================================
.text:000011CC
.text:000011CC ; Attributes: bp-based frame
.text:000011CC
.text:000011CC ; void __thiscall COutBuffer::SetStream(COutBuffer *this, struct ISequentialOutStream *)
.text:000011CC                 public ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z
.text:000011CC ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z proc near
.text:000011CC                                         ; CODE XREF: NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+72p
.text:000011CC
.text:000011CC var_4           = dword ptr -4
.text:000011CC arg_0           = dword ptr  8
.text:000011CC
.text:000011CC                 push    ebp
.text:000011CD                 mov     ebp, esp
.text:000011CF                 push    ecx
.text:000011D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011D7                 mov     [ebp+var_4], ecx
.text:000011DA                 mov     eax, [ebp+var_4]
.text:000011DD                 mov     ecx, [ebp+arg_0]
.text:000011E0                 mov     [eax+14h], ecx
.text:000011E3                 mov     esp, ebp
.text:000011E5                 pop     ebp
.text:000011E6                 retn    4
.text:000011E6 ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z endp
.text:000011E6
.text:000011E6 ; ---------------------------------------------------------------------------
.text:000011E9                 align 4
.text:000011E9 _text           ends
.text:000011E9
.text:000011EC ; ===========================================================================
.text:000011EC
.text:000011EC ; Segment type: Pure code
.text:000011EC ; Segment permissions: Read/Execute
.text:000011EC _text           segment para public 'CODE' use32
.text:000011EC                 assume cs:_text
.text:000011EC                 ;org 11ECh
.text:000011EC ; COMDAT (pick any)
.text:000011EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000011EC
.text:000011EC ; =============== S U B R O U T I N E =======================================
.text:000011EC
.text:000011EC ; Attributes: bp-based frame
.text:000011EC
.text:000011EC ; void __thiscall NCompress::NQuantum::NRangeCoder::CDecoder::SetStream(NCompress::NQuantum::NRangeCoder::CDecoder *this, struct ISequentialInStream *)
.text:000011EC                 public ?SetStream@CDecoder@NRangeCoder@NQuantum@NCompress@@QAEXPAUISequentialInStream@@@Z
.text:000011EC ?SetStream@CDecoder@NRangeCoder@NQuantum@NCompress@@QAEXPAUISequentialInStream@@@Z proc near
.text:000011EC                                         ; CODE XREF: NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+63p
.text:000011EC
.text:000011EC var_4           = dword ptr -4
.text:000011EC arg_0           = dword ptr  8
.text:000011EC
.text:000011EC                 push    ebp
.text:000011ED                 mov     ebp, esp
.text:000011EF                 push    ecx
.text:000011F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011F7                 mov     [ebp+var_4], ecx
.text:000011FA                 mov     eax, [ebp+arg_0]
.text:000011FD                 push    eax             ; struct ISequentialInStream *
.text:000011FE                 mov     ecx, [ebp+var_4]
.text:00001201                 add     ecx, 10h        ; this
.text:00001204                 call    ?SetStream@CStreamBitDecoder@NQuantum@NCompress@@QAEXPAUISequentialInStream@@@Z ; NCompress::NQuantum::CStreamBitDecoder::SetStream(ISequentialInStream *)
.text:00001209                 add     esp, 4
.text:0000120C                 cmp     ebp, esp
.text:0000120E                 call    __RTC_CheckEsp
.text:00001213                 mov     esp, ebp
.text:00001215                 pop     ebp
.text:00001216                 retn    4
.text:00001216 ?SetStream@CDecoder@NRangeCoder@NQuantum@NCompress@@QAEXPAUISequentialInStream@@@Z endp
.text:00001216
.text:00001216 ; ---------------------------------------------------------------------------
.text:00001219                 align 4
.text:00001219 _text           ends
.text:00001219
.text:0000121C ; ===========================================================================
.text:0000121C
.text:0000121C ; Segment type: Pure code
.text:0000121C ; Segment permissions: Read/Execute
.text:0000121C _text           segment para public 'CODE' use32
.text:0000121C                 assume cs:_text
.text:0000121C                 ;org 121Ch
.text:0000121C ; COMDAT (pick any)
.text:0000121C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000121C
.text:0000121C ; =============== S U B R O U T I N E =======================================
.text:0000121C
.text:0000121C ; Attributes: bp-based frame
.text:0000121C
.text:0000121C ; void __thiscall NCompress::NQuantum::CStreamBitDecoder::SetStream(NCompress::NQuantum::CStreamBitDecoder *this, struct ISequentialInStream *)
.text:0000121C                 public ?SetStream@CStreamBitDecoder@NQuantum@NCompress@@QAEXPAUISequentialInStream@@@Z
.text:0000121C ?SetStream@CStreamBitDecoder@NQuantum@NCompress@@QAEXPAUISequentialInStream@@@Z proc near
.text:0000121C                                         ; CODE XREF: NCompress::NQuantum::NRangeCoder::CDecoder::SetStream(ISequentialInStream *)+18p
.text:0000121C
.text:0000121C var_4           = dword ptr -4
.text:0000121C arg_0           = dword ptr  8
.text:0000121C
.text:0000121C                 push    ebp
.text:0000121D                 mov     ebp, esp
.text:0000121F                 push    ecx
.text:00001220                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001227                 mov     [ebp+var_4], ecx
.text:0000122A                 mov     eax, [ebp+arg_0]
.text:0000122D                 push    eax             ; struct ISequentialInStream *
.text:0000122E                 mov     ecx, [ebp+var_4]
.text:00001231                 add     ecx, 8          ; this
.text:00001234                 call    ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z ; CInBufferBase::SetStream(ISequentialInStream *)
.text:00001239                 add     esp, 4
.text:0000123C                 cmp     ebp, esp
.text:0000123E                 call    __RTC_CheckEsp
.text:00001243                 mov     esp, ebp
.text:00001245                 pop     ebp
.text:00001246                 retn    4
.text:00001246 ?SetStream@CStreamBitDecoder@NQuantum@NCompress@@QAEXPAUISequentialInStream@@@Z endp
.text:00001246
.text:00001246 ; ---------------------------------------------------------------------------
.text:00001249                 align 4
.text:00001249 _text           ends
.text:00001249
.text:0000124C ; ===========================================================================
.text:0000124C
.text:0000124C ; Segment type: Pure code
.text:0000124C ; Segment permissions: Read/Execute
.text:0000124C _text           segment para public 'CODE' use32
.text:0000124C                 assume cs:_text
.text:0000124C                 ;org 124Ch
.text:0000124C ; COMDAT (pick any)
.text:0000124C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000124C
.text:0000124C ; =============== S U B R O U T I N E =======================================
.text:0000124C
.text:0000124C ; Attributes: bp-based frame
.text:0000124C
.text:0000124C ; void __thiscall CInBufferBase::SetStream(CInBufferBase *this, struct ISequentialInStream *)
.text:0000124C                 public ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z
.text:0000124C ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z proc near
.text:0000124C                                         ; CODE XREF: NCompress::NQuantum::CStreamBitDecoder::SetStream(ISequentialInStream *)+18p
.text:0000124C
.text:0000124C var_4           = dword ptr -4
.text:0000124C arg_0           = dword ptr  8
.text:0000124C
.text:0000124C                 push    ebp
.text:0000124D                 mov     ebp, esp
.text:0000124F                 push    ecx
.text:00001250                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001257                 mov     [ebp+var_4], ecx
.text:0000125A                 mov     eax, [ebp+var_4]
.text:0000125D                 mov     ecx, [ebp+arg_0]
.text:00001260                 mov     [eax+0Ch], ecx
.text:00001263                 mov     esp, ebp
.text:00001265                 pop     ebp
.text:00001266                 retn    4
.text:00001266 ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z endp
.text:00001266
.text:00001266 ; ---------------------------------------------------------------------------
.text:00001269                 align 4
.text:00001269 _text           ends
.text:00001269
.text:0000126C ; ===========================================================================
.text:0000126C
.text:0000126C ; Segment type: Pure code
.text:0000126C ; Segment permissions: Read/Execute
.text:0000126C _text           segment para public 'CODE' use32
.text:0000126C                 assume cs:_text
.text:0000126C                 ;org 126Ch
.text:0000126C ; COMDAT (pick any)
.text:0000126C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000126C
.text:0000126C ; =============== S U B R O U T I N E =======================================
.text:0000126C
.text:0000126C ; Attributes: bp-based frame
.text:0000126C
.text:0000126C ; unsigned __int64 __thiscall NCompress::NQuantum::NRangeCoder::CDecoder::GetProcessedSize(NCompress::NQuantum::NRangeCoder::CDecoder *__hidden this)
.text:0000126C                 public ?GetProcessedSize@CDecoder@NRangeCoder@NQuantum@NCompress@@QBE_KXZ
.text:0000126C ?GetProcessedSize@CDecoder@NRangeCoder@NQuantum@NCompress@@QBE_KXZ proc near
.text:0000126C                                         ; CODE XREF: NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+14Ap
.text:0000126C
.text:0000126C var_4           = dword ptr -4
.text:0000126C
.text:0000126C                 push    ebp
.text:0000126D                 mov     ebp, esp
.text:0000126F                 push    ecx
.text:00001270                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001277                 mov     [ebp+var_4], ecx
.text:0000127A                 mov     ecx, [ebp+var_4]
.text:0000127D                 add     ecx, 10h        ; this
.text:00001280                 call    ?GetProcessedSize@CStreamBitDecoder@NQuantum@NCompress@@QBE_KXZ ; NCompress::NQuantum::CStreamBitDecoder::GetProcessedSize(void)
.text:00001285                 add     esp, 4
.text:00001288                 cmp     ebp, esp
.text:0000128A                 call    __RTC_CheckEsp
.text:0000128F                 mov     esp, ebp
.text:00001291                 pop     ebp
.text:00001292                 retn
.text:00001292 ?GetProcessedSize@CDecoder@NRangeCoder@NQuantum@NCompress@@QBE_KXZ endp
.text:00001292
.text:00001292 ; ---------------------------------------------------------------------------
.text:00001293                 align 4
.text:00001293 _text           ends
.text:00001293
.text:00001294 ; ===========================================================================
.text:00001294
.text:00001294 ; Segment type: Pure code
.text:00001294 ; Segment permissions: Read/Execute
.text:00001294 _text           segment para public 'CODE' use32
.text:00001294                 assume cs:_text
.text:00001294                 ;org 1294h
.text:00001294 ; COMDAT (pick any)
.text:00001294                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001294
.text:00001294 ; =============== S U B R O U T I N E =======================================
.text:00001294
.text:00001294 ; Attributes: bp-based frame
.text:00001294
.text:00001294 ; unsigned __int64 __thiscall NCompress::NQuantum::CStreamBitDecoder::GetProcessedSize(NCompress::NQuantum::CStreamBitDecoder *__hidden this)
.text:00001294                 public ?GetProcessedSize@CStreamBitDecoder@NQuantum@NCompress@@QBE_KXZ
.text:00001294 ?GetProcessedSize@CStreamBitDecoder@NQuantum@NCompress@@QBE_KXZ proc near
.text:00001294                                         ; CODE XREF: NCompress::NQuantum::NRangeCoder::CDecoder::GetProcessedSize(void)+14p
.text:00001294
.text:00001294 var_4           = dword ptr -4
.text:00001294
.text:00001294                 push    ebp
.text:00001295                 mov     ebp, esp
.text:00001297                 push    ecx
.text:00001298                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000129F                 mov     [ebp+var_4], ecx
.text:000012A2                 mov     ecx, [ebp+var_4]
.text:000012A5                 add     ecx, 8          ; this
.text:000012A8                 call    ?GetProcessedSize@CInBufferBase@@QBE_KXZ ; CInBufferBase::GetProcessedSize(void)
.text:000012AD                 add     esp, 4
.text:000012B0                 cmp     ebp, esp
.text:000012B2                 call    __RTC_CheckEsp
.text:000012B7                 mov     esp, ebp
.text:000012B9                 pop     ebp
.text:000012BA                 retn
.text:000012BA ?GetProcessedSize@CStreamBitDecoder@NQuantum@NCompress@@QBE_KXZ endp
.text:000012BA
.text:000012BA ; ---------------------------------------------------------------------------
.text:000012BB                 align 4
.text:000012BB _text           ends
.text:000012BB
.text:000012BC ; ===========================================================================
.text:000012BC
.text:000012BC ; Segment type: Pure code
.text:000012BC ; Segment permissions: Read/Execute
.text:000012BC _text           segment para public 'CODE' use32
.text:000012BC                 assume cs:_text
.text:000012BC                 ;org 12BCh
.text:000012BC ; COMDAT (pick any)
.text:000012BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000012BC
.text:000012BC ; =============== S U B R O U T I N E =======================================
.text:000012BC
.text:000012BC ; Attributes: bp-based frame
.text:000012BC
.text:000012BC ; unsigned __int64 __thiscall CInBufferBase::GetProcessedSize(CInBufferBase *__hidden this)
.text:000012BC                 public ?GetProcessedSize@CInBufferBase@@QBE_KXZ
.text:000012BC ?GetProcessedSize@CInBufferBase@@QBE_KXZ proc near
.text:000012BC                                         ; CODE XREF: NCompress::NQuantum::CStreamBitDecoder::GetProcessedSize(void)+14p
.text:000012BC
.text:000012BC var_4           = dword ptr -4
.text:000012BC
.text:000012BC                 push    ebp
.text:000012BD                 mov     ebp, esp
.text:000012BF                 push    ecx
.text:000012C0                 push    esi
.text:000012C1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000012C8                 mov     [ebp+var_4], ecx
.text:000012CB                 mov     eax, [ebp+var_4]
.text:000012CE                 mov     ecx, [eax+20h]
.text:000012D1                 xor     esi, esi
.text:000012D3                 mov     edx, [ebp+var_4]
.text:000012D6                 add     ecx, [edx+10h]
.text:000012D9                 adc     esi, [edx+14h]
.text:000012DC                 mov     eax, [ebp+var_4]
.text:000012DF                 mov     edx, [ebp+var_4]
.text:000012E2                 mov     eax, [eax]
.text:000012E4                 sub     eax, [edx+8]
.text:000012E7                 cdq
.text:000012E8                 add     ecx, eax
.text:000012EA                 adc     esi, edx
.text:000012EC                 mov     eax, ecx
.text:000012EE                 mov     edx, esi
.text:000012F0                 pop     esi
.text:000012F1                 mov     esp, ebp
.text:000012F3                 pop     ebp
.text:000012F4                 retn
.text:000012F4 ?GetProcessedSize@CInBufferBase@@QBE_KXZ endp
.text:000012F4
.text:000012F4 ; ---------------------------------------------------------------------------
.text:000012F5                 align 4
.text:000012F5 _text           ends
.text:000012F5
.text:000012F8 ; ===========================================================================
.text:000012F8
.text:000012F8 ; Segment type: Pure code
.text:000012F8 ; Segment permissions: Read/Execute
.text:000012F8 _text           segment para public 'CODE' use32
.text:000012F8                 assume cs:_text
.text:000012F8                 ;org 12F8h
.text:000012F8 ; COMDAT (pick any)
.text:000012F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000012F8
.text:000012F8 ; =============== S U B R O U T I N E =======================================
.text:000012F8
.text:000012F8 ; Attributes: bp-based frame
.text:000012F8
.text:000012F8 ; _DWORD __thiscall NCompress::NQuantum::CDecoder::CDecoderFlusher::CDecoderFlusher(NCompress::NQuantum::CDecoder::CDecoderFlusher *this, struct NCompress::NQuantum::CDecoder *)
.text:000012F8                 public ??0CDecoderFlusher@CDecoder@NQuantum@NCompress@@QAE@PAV123@@Z
.text:000012F8 ??0CDecoderFlusher@CDecoder@NQuantum@NCompress@@QAE@PAV123@@Z proc near
.text:000012F8                                         ; CODE XREF: NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+99p
.text:000012F8
.text:000012F8 var_4           = dword ptr -4
.text:000012F8 arg_0           = dword ptr  8
.text:000012F8
.text:000012F8                 push    ebp
.text:000012F9                 mov     ebp, esp
.text:000012FB                 push    ecx
.text:000012FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001303                 mov     [ebp+var_4], ecx
.text:00001306                 mov     eax, [ebp+var_4]
.text:00001309                 mov     ecx, [ebp+arg_0]
.text:0000130C                 mov     [eax], ecx
.text:0000130E                 mov     edx, [ebp+var_4]
.text:00001311                 mov     byte ptr [edx+4], 1
.text:00001315                 mov     eax, [ebp+var_4]
.text:00001318                 mov     esp, ebp
.text:0000131A                 pop     ebp
.text:0000131B                 retn    4
.text:0000131B ??0CDecoderFlusher@CDecoder@NQuantum@NCompress@@QAE@PAV123@@Z endp
.text:0000131B
.text:0000131B ; ---------------------------------------------------------------------------
.text:0000131E                 align 10h
.text:0000131E _text           ends
.text:0000131E
.text:00001320 ; ===========================================================================
.text:00001320
.text:00001320 ; Segment type: Pure code
.text:00001320 ; Segment permissions: Read/Execute
.text:00001320 _text           segment para public 'CODE' use32
.text:00001320                 assume cs:_text
.text:00001320                 ;org 1320h
.text:00001320 ; COMDAT (pick any)
.text:00001320                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001320
.text:00001320 ; =============== S U B R O U T I N E =======================================
.text:00001320
.text:00001320 ; Attributes: bp-based frame
.text:00001320
.text:00001320 ; _DWORD __thiscall NCompress::NQuantum::CDecoder::CDecoderFlusher::~CDecoderFlusher(NCompress::NQuantum::CDecoder::CDecoderFlusher *__hidden this)
.text:00001320                 public ??1CDecoderFlusher@CDecoder@NQuantum@NCompress@@QAE@XZ
.text:00001320 ??1CDecoderFlusher@CDecoder@NQuantum@NCompress@@QAE@XZ proc near
.text:00001320                                         ; CODE XREF: NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+131p
.text:00001320                                         ; NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1A4p ...
.text:00001320
.text:00001320 var_4           = dword ptr -4
.text:00001320
.text:00001320                 push    ebp
.text:00001321                 mov     ebp, esp
.text:00001323                 push    ecx
.text:00001324                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000132B                 mov     [ebp+var_4], ecx
.text:0000132E                 mov     eax, [ebp+var_4]
.text:00001331                 movzx   ecx, byte ptr [eax+4]
.text:00001335                 test    ecx, ecx
.text:00001337                 jz      short loc_1343
.text:00001339                 mov     edx, [ebp+var_4]
.text:0000133C                 mov     ecx, [edx]      ; this
.text:0000133E                 call    ?Flush@CDecoder@NQuantum@NCompress@@QAEJXZ ; NCompress::NQuantum::CDecoder::Flush(void)
.text:00001343
.text:00001343 loc_1343:                               ; CODE XREF: NCompress::NQuantum::CDecoder::CDecoderFlusher::~CDecoderFlusher(void)+17j
.text:00001343                 add     esp, 4
.text:00001346                 cmp     ebp, esp
.text:00001348                 call    __RTC_CheckEsp
.text:0000134D                 mov     esp, ebp
.text:0000134F                 pop     ebp
.text:00001350                 retn
.text:00001350 ??1CDecoderFlusher@CDecoder@NQuantum@NCompress@@QAE@XZ endp
.text:00001350
.text:00001350 ; ---------------------------------------------------------------------------
.text:00001351                 align 4
.text:00001351 _text           ends
.text:00001351
.text:00001354 ; ===========================================================================
.text:00001354
.text:00001354 ; Segment type: Pure code
.text:00001354 ; Segment permissions: Read/Execute
.text:00001354 _text           segment para public 'CODE' use32
.text:00001354                 assume cs:_text
.text:00001354                 ;org 1354h
.text:00001354 ; COMDAT (pick any)
.text:00001354                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001354
.text:00001354 ; =============== S U B R O U T I N E =======================================
.text:00001354
.text:00001354 ; Attributes: bp-based frame
.text:00001354
.text:00001354 ; __int32 __thiscall NCompress::NQuantum::CDecoder::Flush(NCompress::NQuantum::CDecoder *__hidden this)
.text:00001354                 public ?Flush@CDecoder@NQuantum@NCompress@@QAEJXZ
.text:00001354 ?Flush@CDecoder@NQuantum@NCompress@@QAEJXZ proc near
.text:00001354                                         ; CODE XREF: NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1BAp
.text:00001354                                         ; NCompress::NQuantum::CDecoder::CDecoderFlusher::~CDecoderFlusher(void)+1Ep
.text:00001354
.text:00001354 var_4           = dword ptr -4
.text:00001354
.text:00001354                 push    ebp
.text:00001355                 mov     ebp, esp
.text:00001357                 push    ecx
.text:00001358                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000135F                 mov     [ebp+var_4], ecx
.text:00001362                 mov     ecx, [ebp+var_4]
.text:00001365                 add     ecx, 8          ; this
.text:00001368                 call    ?Flush@COutBuffer@@QAEJXZ ; COutBuffer::Flush(void)
.text:0000136D                 add     esp, 4
.text:00001370                 cmp     ebp, esp
.text:00001372                 call    __RTC_CheckEsp
.text:00001377                 mov     esp, ebp
.text:00001379                 pop     ebp
.text:0000137A                 retn
.text:0000137A ?Flush@CDecoder@NQuantum@NCompress@@QAEJXZ endp
.text:0000137A
.text:0000137A ; ---------------------------------------------------------------------------
.text:0000137B                 align 4
.text:0000137B _text           ends
.text:0000137B
.data:0000137C ; ===========================================================================
.data:0000137C
.data:0000137C ; Segment type: Pure data
.data:0000137C ; Segment permissions: Read/Write
.data:0000137C _data           segment dword public 'DATA' use32
.data:0000137C                 assume cs:_data
.data:0000137C                 ;org 137Ch
.data:0000137C ; COMDAT (pick any)
.data:0000137C                 public ??_R0?AUCInBufferException@@@8
.data:0000137C ; struct CInBufferException `RTTI Type Descriptor'
.data:0000137C ??_R0?AUCInBufferException@@@8 dd offset ??_7type_info@@6B@
.data:0000137C                                         ; DATA XREF: .xdata$x:000011A0o
.data:0000137C                                         ; const type_info::`vftable'
.data:00001380                 db    0
.data:00001381                 db    0
.data:00001382                 db    0
.data:00001383                 db    0
.data:00001384                 db  2Eh ; .
.data:00001385                 db  3Fh ; ?
.data:00001386                 db  41h ; A
.data:00001387                 db  55h ; U
.data:00001388                 db  43h ; C
.data:00001389                 db  49h ; I
.data:0000138A                 db  6Eh ; n
.data:0000138B                 db  42h ; B
.data:0000138C                 db  75h ; u
.data:0000138D                 db  66h ; f
.data:0000138E                 db  66h ; f
.data:0000138F                 db  65h ; e
.data:00001390                 db  72h ; r
.data:00001391                 db  45h ; E
.data:00001392                 db  78h ; x
.data:00001393                 db  63h ; c
.data:00001394                 db  65h ; e
.data:00001395                 db  70h ; p
.data:00001396                 db  74h ; t
.data:00001397                 db  69h ; i
.data:00001398                 db  6Fh ; o
.data:00001399                 db  6Eh ; n
.data:0000139A                 db  40h ; @
.data:0000139B                 db  40h ; @
.data:0000139C                 db    0
.data:0000139D                 align 10h
.data:0000139D _data           ends
.data:0000139D
.data:000013A0 ; ===========================================================================
.data:000013A0
.data:000013A0 ; Segment type: Pure data
.data:000013A0 ; Segment permissions: Read/Write
.data:000013A0 _data           segment dword public 'DATA' use32
.data:000013A0                 assume cs:_data
.data:000013A0                 ;org 13A0h
.data:000013A0 ; COMDAT (pick any)
.data:000013A0                 public ??_R0?AUCOutBufferException@@@8
.data:000013A0 ; struct COutBufferException `RTTI Type Descriptor'
.data:000013A0 ??_R0?AUCOutBufferException@@@8 dd offset ??_7type_info@@6B@
.data:000013A0                                         ; DATA XREF: .xdata$x:000011B0o
.data:000013A0                                         ; const type_info::`vftable'
.data:000013A4                 align 8
.data:000013A8 a_?aucoutbuffer db '.?AUCOutBufferException@@',0
.data:000013C2                 align 4
.data:000013C2 _data           ends
.data:000013C2
.text:000013C4 ; ===========================================================================
.text:000013C4
.text:000013C4 ; Segment type: Pure code
.text:000013C4 ; Segment permissions: Read/Execute
.text:000013C4 _text           segment para public 'CODE' use32
.text:000013C4                 assume cs:_text
.text:000013C4                 ;org 13C4h
.text:000013C4 ; COMDAT (pick any)
.text:000013C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000013C4
.text:000013C4 ; =============== S U B R O U T I N E =======================================
.text:000013C4
.text:000013C4 ; Attributes: bp-based frame
.text:000013C4
.text:000013C4 ; bool __thiscall NCompress::NQuantum::NRangeCoder::CDecoder::Create(NCompress::NQuantum::NRangeCoder::CDecoder *this, unsigned int)
.text:000013C4                 public ?Create@CDecoder@NRangeCoder@NQuantum@NCompress@@QAE_NI@Z
.text:000013C4 ?Create@CDecoder@NRangeCoder@NQuantum@NCompress@@QAE_NI@Z proc near
.text:000013C4                                         ; CODE XREF: NCompress::NQuantum::CDecoder::SetParams(int)+5Cp
.text:000013C4
.text:000013C4 var_4           = dword ptr -4
.text:000013C4 arg_0           = dword ptr  8
.text:000013C4
.text:000013C4                 push    ebp
.text:000013C5                 mov     ebp, esp
.text:000013C7                 push    ecx
.text:000013C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000013CF                 mov     [ebp+var_4], ecx
.text:000013D2                 mov     eax, [ebp+arg_0]
.text:000013D5                 push    eax             ; unsigned int
.text:000013D6                 mov     ecx, [ebp+var_4]
.text:000013D9                 add     ecx, 10h        ; this
.text:000013DC                 call    ?Create@CStreamBitDecoder@NQuantum@NCompress@@QAE_NI@Z ; NCompress::NQuantum::CStreamBitDecoder::Create(uint)
.text:000013E1                 add     esp, 4
.text:000013E4                 cmp     ebp, esp
.text:000013E6                 call    __RTC_CheckEsp
.text:000013EB                 mov     esp, ebp
.text:000013ED                 pop     ebp
.text:000013EE                 retn    4
.text:000013EE ?Create@CDecoder@NRangeCoder@NQuantum@NCompress@@QAE_NI@Z endp
.text:000013EE
.text:000013EE ; ---------------------------------------------------------------------------
.text:000013F1                 align 4
.text:000013F1 _text           ends
.text:000013F1
.text:000013F4 ; ===========================================================================
.text:000013F4
.text:000013F4 ; Segment type: Pure code
.text:000013F4 ; Segment permissions: Read/Execute
.text:000013F4 _text           segment para public 'CODE' use32
.text:000013F4                 assume cs:_text
.text:000013F4                 ;org 13F4h
.text:000013F4 ; COMDAT (pick any)
.text:000013F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000013F4
.text:000013F4 ; =============== S U B R O U T I N E =======================================
.text:000013F4
.text:000013F4 ; Attributes: bp-based frame
.text:000013F4
.text:000013F4 ; bool __thiscall NCompress::NQuantum::CStreamBitDecoder::Create(NCompress::NQuantum::CStreamBitDecoder *this, unsigned int)
.text:000013F4                 public ?Create@CStreamBitDecoder@NQuantum@NCompress@@QAE_NI@Z
.text:000013F4 ?Create@CStreamBitDecoder@NQuantum@NCompress@@QAE_NI@Z proc near
.text:000013F4                                         ; CODE XREF: NCompress::NQuantum::NRangeCoder::CDecoder::Create(uint)+18p
.text:000013F4
.text:000013F4 var_4           = dword ptr -4
.text:000013F4 arg_0           = dword ptr  8
.text:000013F4
.text:000013F4                 push    ebp
.text:000013F5                 mov     ebp, esp
.text:000013F7                 push    ecx
.text:000013F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000013FF                 mov     [ebp+var_4], ecx
.text:00001402                 mov     eax, [ebp+arg_0]
.text:00001405                 push    eax             ; unsigned int
.text:00001406                 mov     ecx, [ebp+var_4]
.text:00001409                 add     ecx, 8          ; this
.text:0000140C                 call    ?Create@CInBuffer@@QAE_NI@Z ; CInBuffer::Create(uint)
.text:00001411                 add     esp, 4
.text:00001414                 cmp     ebp, esp
.text:00001416                 call    __RTC_CheckEsp
.text:0000141B                 mov     esp, ebp
.text:0000141D                 pop     ebp
.text:0000141E                 retn    4
.text:0000141E ?Create@CStreamBitDecoder@NQuantum@NCompress@@QAE_NI@Z endp
.text:0000141E
.text:0000141E ; ---------------------------------------------------------------------------
.text:00001421                 align 4
.text:00001421 _text           ends
.text:00001421
.text:00001424 ; ===========================================================================
.text:00001424
.text:00001424 ; Segment type: Pure code
.text:00001424 ; Segment permissions: Read/Execute
.text:00001424 _text           segment para public 'CODE' use32
.text:00001424                 assume cs:_text
.text:00001424                 ;org 1424h
.text:00001424 ; COMDAT (pick any)
.text:00001424                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001424
.text:00001424 ; =============== S U B R O U T I N E =======================================
.text:00001424
.text:00001424 ; Attributes: bp-based frame
.text:00001424
.text:00001424 ; unsigned int __stdcall MyMin<unsigned int>(unsigned int, unsigned int)
.text:00001424                 public ??$MyMin@I@@YGIII@Z
.text:00001424 ??$MyMin@I@@YGIII@Z proc near           ; CODE XREF: NCompress::NQuantum::CDecoder::Init(void)+CBp
.text:00001424
.text:00001424 var_4           = dword ptr -4
.text:00001424 arg_0           = dword ptr  8
.text:00001424 arg_4           = dword ptr  0Ch
.text:00001424
.text:00001424                 push    ebp
.text:00001425                 mov     ebp, esp
.text:00001427                 push    ecx
.text:00001428                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000142F                 mov     eax, [ebp+arg_0]
.text:00001432                 cmp     eax, [ebp+arg_4]
.text:00001435                 jnb     short loc_143F
.text:00001437                 mov     ecx, [ebp+arg_0]
.text:0000143A                 mov     [ebp+var_4], ecx
.text:0000143D                 jmp     short loc_1445
.text:0000143F ; ---------------------------------------------------------------------------
.text:0000143F
.text:0000143F loc_143F:                               ; CODE XREF: MyMin<uint>(uint,uint)+11j
.text:0000143F                 mov     edx, [ebp+arg_4]
.text:00001442                 mov     [ebp+var_4], edx
.text:00001445
.text:00001445 loc_1445:                               ; CODE XREF: MyMin<uint>(uint,uint)+19j
.text:00001445                 mov     eax, [ebp+var_4]
.text:00001448                 mov     esp, ebp
.text:0000144A                 pop     ebp
.text:0000144B                 retn    8
.text:0000144B ??$MyMin@I@@YGIII@Z endp
.text:0000144B
.text:0000144B _text           ends
.text:0000144B
UNDEF:00001450 ; ===========================================================================
UNDEF:00001450
UNDEF:00001450 ; Segment type: Externs
UNDEF:00001450 ; UNDEF
UNDEF:00001450                 extrn ___security_cookie:near
UNDEF:00001450                                         ; DATA XREF: NCompress::NQuantum::CDecoder::Init(void)+18r
UNDEF:00001450                                         ; NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+27r ...
UNDEF:00001454                 extrn __RTC_CheckEsp:near
UNDEF:00001454                                         ; CODE XREF: NCompress::NQuantum::CDecoder::Init(void)+11Cp
UNDEF:00001454                                         ; NCompress::NQuantum::CDecoder::CodeSpec(uint)+27Bp ...
UNDEF:00001458 ; __fastcall __security_check_cookie(x)
UNDEF:00001458                 extrn @__security_check_cookie@4:near
UNDEF:00001458                                         ; CODE XREF: NCompress::NQuantum::CDecoder::Init(void)+112p
UNDEF:00001458                                         ; __ehhandler$?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+Cp ...
UNDEF:0000145C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000145C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000145C                                         ; CODE XREF: NCompress::NQuantum::CDecoder::Init(void)+105p
UNDEF:0000145C                                         ; NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1DEp ...
UNDEF:00001460                 extrn __RTC_Shutdown:near
UNDEF:00001460                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001464                 extrn __RTC_InitBase:near
UNDEF:00001464                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001468 ; void __thiscall COutBuffer::FlushWithCheck(COutBuffer *__hidden this)
UNDEF:00001468                 extrn ?FlushWithCheck@COutBuffer@@QAEXXZ:near
UNDEF:00001468                                         ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+12Bp
UNDEF:00001468                                         ; CLzOutWindow::PutByte(uchar)+4Ep
UNDEF:0000146C ; unsigned __int8 __thiscall CInBufferBase::ReadByte_FromNewBlock(CInBufferBase *__hidden this)
UNDEF:0000146C                 extrn ?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ:near
UNDEF:0000146C                                         ; CODE XREF: CInBufferBase::ReadByte(void)+27p
UNDEF:00001470 ; void __thiscall CInBufferBase::Init(CInBufferBase *__hidden this)
UNDEF:00001470                 extrn ?Init@CInBufferBase@@QAEXXZ:near
UNDEF:00001470                                         ; CODE XREF: NCompress::NQuantum::CStreamBitDecoder::Init(void)+14p
UNDEF:00001474 ; unsigned __int64 __thiscall COutBuffer::GetProcessedSize(COutBuffer *__hidden this)
UNDEF:00001474                 extrn ?GetProcessedSize@COutBuffer@@QBE_KXZ:near
UNDEF:00001474                                         ; CODE XREF: NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+ABp
UNDEF:00001474                                         ; NCompress::NQuantum::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+C3p ...
UNDEF:00001478                 extrn ___CxxFrameHandler3:near
UNDEF:00001478                                         ; CODE XREF: __ehhandler$?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+16j
UNDEF:00001478                                         ; __ehhandler$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+16j
UNDEF:0000147C ; __int32 __thiscall COutBuffer::Flush(COutBuffer *__hidden this)
UNDEF:0000147C                 extrn ?Flush@COutBuffer@@QAEJXZ:near
UNDEF:0000147C                                         ; CODE XREF: NCompress::NQuantum::CDecoder::Flush(void)+14p
UNDEF:00001480 ; const type_info::`vftable'
UNDEF:00001480                 extrn ??_7type_info@@6B@:near
UNDEF:00001480                                         ; DATA XREF: .data:CInBufferException `RTTI Type Descriptor'o
UNDEF:00001480                                         ; .data:COutBufferException `RTTI Type Descriptor'o
UNDEF:00001484 ; void __thiscall CLzOutWindow::Init(CLzOutWindow *__hidden this, bool)
UNDEF:00001484                 extrn ?Init@CLzOutWindow@@QAEX_N@Z:near
UNDEF:00001484                                         ; CODE XREF: NCompress::NQuantum::CDecoder::SetOutStreamSize(unsigned __int64 const *)+2Bp
UNDEF:00001488 ; bool __thiscall COutBuffer::Create(COutBuffer *__hidden this, unsigned int)
UNDEF:00001488                 extrn ?Create@COutBuffer@@QAE_NI@Z:near
UNDEF:00001488                                         ; CODE XREF: NCompress::NQuantum::CDecoder::SetParams(int)+3Ep
UNDEF:0000148C ; bool __thiscall CInBuffer::Create(CInBuffer *__hidden this, unsigned int)
UNDEF:0000148C                 extrn ?Create@CInBuffer@@QAE_NI@Z:near
UNDEF:0000148C                                         ; CODE XREF: NCompress::NQuantum::CStreamBitDecoder::Create(uint)+18p
UNDEF:0000148C
UNDEF:0000148C
UNDEF:0000148C                 end