.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : C080044860C6049CE12B27EFB7CA2538
.text:00000000 ; Input CRC32 : 77243A68
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Sha1.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __stdcall Sha1_Init(x)
.text:00000000                 public _Sha1_Init@4
.text:00000000 _Sha1_Init@4    proc near               ; CODE XREF: Sha1_Final(x,x)+13Cp
.text:00000000                                         ; Sha1_32_Final(x,x)+C6p
.text:00000000
.text:00000000 arg_0           = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 mov     eax, [ebp+arg_0]
.text:00000006                 mov     dword ptr [eax], 67452301h
.text:0000000C                 mov     ecx, [ebp+arg_0]
.text:0000000F                 mov     dword ptr [ecx+4], 0EFCDAB89h
.text:00000016                 mov     edx, [ebp+arg_0]
.text:00000019                 mov     dword ptr [edx+8], 98BADCFEh
.text:00000020                 mov     eax, [ebp+arg_0]
.text:00000023                 mov     dword ptr [eax+0Ch], 10325476h
.text:0000002A                 mov     ecx, [ebp+arg_0]
.text:0000002D                 mov     dword ptr [ecx+10h], 0C3D2E1F0h
.text:00000034                 mov     edx, [ebp+arg_0]
.text:00000037                 mov     dword ptr [edx+18h], 0
.text:0000003E                 mov     dword ptr [edx+1Ch], 0
.text:00000045                 pop     ebp
.text:00000046                 retn    4
.text:00000046 _Sha1_Init@4    endp
.text:00000046
.text:00000046 ; ---------------------------------------------------------------------------
.text:00000049                 align 10h
.text:00000050
.text:00000050 ; =============== S U B R O U T I N E =======================================
.text:00000050
.text:00000050 ; Attributes: bp-based frame
.text:00000050
.text:00000050 ; __stdcall Sha1_GetBlockDigest(x, x, x)
.text:00000050                 public _Sha1_GetBlockDigest@12
.text:00000050 _Sha1_GetBlockDigest@12 proc near       ; CODE XREF: Sha1_Update(x,x,x)+106p
.text:00000050                                         ; Sha1_Final(x,x)+9Bp ...
.text:00000050
.text:00000050 var_1AC         = dword ptr -1ACh
.text:00000050 var_1A8         = dword ptr -1A8h
.text:00000050 var_1A4         = dword ptr -1A4h
.text:00000050 var_1A0         = dword ptr -1A0h
.text:00000050 var_19C         = dword ptr -19Ch
.text:00000050 var_198         = dword ptr -198h
.text:00000050 var_194         = dword ptr -194h
.text:00000050 var_190         = dword ptr -190h
.text:00000050 var_18C         = dword ptr -18Ch
.text:00000050 var_188         = dword ptr -188h
.text:00000050 var_184         = dword ptr -184h
.text:00000050 var_180         = dword ptr -180h
.text:00000050 var_17C         = dword ptr -17Ch
.text:00000050 var_178         = dword ptr -178h
.text:00000050 var_174         = dword ptr -174h
.text:00000050 var_170         = dword ptr -170h
.text:00000050 var_16C         = dword ptr -16Ch
.text:00000050 var_168         = dword ptr -168h
.text:00000050 var_164         = dword ptr -164h
.text:00000050 var_160         = dword ptr -160h
.text:00000050 var_15C         = dword ptr -15Ch
.text:00000050 var_158         = dword ptr -158h
.text:00000050 var_154         = dword ptr -154h
.text:00000050 var_150         = dword ptr -150h
.text:00000050 var_14C         = dword ptr -14Ch
.text:00000050 var_148         = dword ptr -148h
.text:00000050 var_13C         = dword ptr -13Ch
.text:00000050 var_138         = dword ptr -138h
.text:00000050 var_134         = dword ptr -134h
.text:00000050 var_130         = dword ptr -130h
.text:00000050 var_128         = dword ptr -128h
.text:00000050 var_124         = dword ptr -124h
.text:00000050 var_120         = dword ptr -120h
.text:00000050 var_11C         = dword ptr -11Ch
.text:00000050 var_118         = dword ptr -118h
.text:00000050 var_114         = dword ptr -114h
.text:00000050 var_110         = dword ptr -110h
.text:00000050 var_18          = dword ptr -18h
.text:00000050 var_14          = dword ptr -14h
.text:00000050 var_10          = dword ptr -10h
.text:00000050 var_C           = dword ptr -0Ch
.text:00000050 var_8           = dword ptr -8
.text:00000050 var_4           = dword ptr -4
.text:00000050 arg_0           = dword ptr  8
.text:00000050 arg_4           = dword ptr  0Ch
.text:00000050 arg_8           = dword ptr  10h
.text:00000050
.text:00000050                 push    ebp
.text:00000051                 mov     ebp, esp
.text:00000053                 sub     esp, 1ACh
.text:00000059                 push    edi
.text:0000005A                 lea     edi, [ebp+var_1AC]
.text:00000060                 mov     ecx, 6Bh ; 'k'
.text:00000065                 mov     eax, 0CCCCCCCCh
.text:0000006A                 rep stosd
.text:0000006C                 mov     eax, dword ptr ds:___security_cookie
.text:00000071                 xor     eax, ebp
.text:00000073                 mov     [ebp+var_4], eax
.text:00000076                 mov     eax, [ebp+arg_0]
.text:00000079                 mov     ecx, [eax]
.text:0000007B                 mov     [ebp+var_8], ecx
.text:0000007E                 mov     edx, [ebp+arg_0]
.text:00000081                 mov     eax, [edx+4]
.text:00000084                 mov     [ebp+var_C], eax
.text:00000087                 mov     ecx, [ebp+arg_0]
.text:0000008A                 mov     edx, [ecx+8]
.text:0000008D                 mov     [ebp+var_10], edx
.text:00000090                 mov     eax, [ebp+arg_0]
.text:00000093                 mov     ecx, [eax+0Ch]
.text:00000096                 mov     [ebp+var_14], ecx
.text:00000099                 mov     edx, [ebp+arg_0]
.text:0000009C                 mov     eax, [edx+10h]
.text:0000009F                 mov     [ebp+var_18], eax
.text:000000A2                 mov     [ebp+var_164], 0
.text:000000AC                 jmp     short loc_BD
.text:000000AE ; ---------------------------------------------------------------------------
.text:000000AE
.text:000000AE loc_AE:                                 ; CODE XREF: Sha1_GetBlockDigest(x,x,x)+204j
.text:000000AE                 mov     ecx, [ebp+var_164]
.text:000000B4                 add     ecx, 5
.text:000000B7                 mov     [ebp+var_164], ecx
.text:000000BD
.text:000000BD loc_BD:                                 ; CODE XREF: Sha1_GetBlockDigest(x,x,x)+5Cj
.text:000000BD                 cmp     [ebp+var_164], 0Fh
.text:000000C4                 jnb     loc_259
.text:000000CA                 mov     edx, [ebp+var_164]
.text:000000D0                 mov     eax, [ebp+var_164]
.text:000000D6                 mov     ecx, [ebp+arg_4]
.text:000000D9                 mov     eax, [ecx+eax*4]
.text:000000DC                 mov     [ebp+edx*4+var_15C], eax
.text:000000E3                 mov     ecx, [ebp+var_8]
.text:000000E6                 rol     ecx, 5
.text:000000E9                 mov     edx, [ebp+var_10]
.text:000000EC                 xor     edx, [ebp+var_14]
.text:000000EF                 and     edx, [ebp+var_C]
.text:000000F2                 xor     edx, [ebp+var_14]
.text:000000F5                 mov     eax, [ebp+var_164]
.text:000000FB                 add     edx, [ebp+eax*4+var_15C]
.text:00000102                 add     ecx, [ebp+var_18]
.text:00000105                 lea     ecx, [ecx+edx+5A827999h]
.text:0000010C                 mov     [ebp+var_18], ecx
.text:0000010F                 mov     edx, [ebp+var_C]
.text:00000112                 rol     edx, 1Eh
.text:00000115                 mov     [ebp+var_C], edx
.text:00000118                 mov     eax, [ebp+var_164]
.text:0000011E                 mov     ecx, [ebp+var_164]
.text:00000124                 mov     edx, [ebp+arg_4]
.text:00000127                 mov     ecx, [edx+ecx*4+4]
.text:0000012B                 mov     [ebp+eax*4+var_158], ecx
.text:00000132                 mov     edx, [ebp+var_18]
.text:00000135                 rol     edx, 5
.text:00000138                 mov     eax, [ebp+var_C]
.text:0000013B                 xor     eax, [ebp+var_10]
.text:0000013E                 and     eax, [ebp+var_8]
.text:00000141                 xor     eax, [ebp+var_10]
.text:00000144                 mov     ecx, [ebp+var_164]
.text:0000014A                 add     eax, [ebp+ecx*4+var_158]
.text:00000151                 add     edx, [ebp+var_14]
.text:00000154                 lea     edx, [edx+eax+5A827999h]
.text:0000015B                 mov     [ebp+var_14], edx
.text:0000015E                 mov     eax, [ebp+var_8]
.text:00000161                 rol     eax, 1Eh
.text:00000164                 mov     [ebp+var_8], eax
.text:00000167                 mov     ecx, [ebp+var_164]
.text:0000016D                 mov     edx, [ebp+var_164]
.text:00000173                 mov     eax, [ebp+arg_4]
.text:00000176                 mov     edx, [eax+edx*4+8]
.text:0000017A                 mov     [ebp+ecx*4+var_154], edx
.text:00000181                 mov     eax, [ebp+var_14]
.text:00000184                 rol     eax, 5
.text:00000187                 mov     ecx, [ebp+var_8]
.text:0000018A                 xor     ecx, [ebp+var_C]
.text:0000018D                 and     ecx, [ebp+var_18]
.text:00000190                 xor     ecx, [ebp+var_C]
.text:00000193                 mov     edx, [ebp+var_164]
.text:00000199                 add     ecx, [ebp+edx*4+var_154]
.text:000001A0                 add     eax, [ebp+var_10]
.text:000001A3                 lea     eax, [eax+ecx+5A827999h]
.text:000001AA                 mov     [ebp+var_10], eax
.text:000001AD                 mov     ecx, [ebp+var_18]
.text:000001B0                 rol     ecx, 1Eh
.text:000001B3                 mov     [ebp+var_18], ecx
.text:000001B6                 mov     edx, [ebp+var_164]
.text:000001BC                 mov     eax, [ebp+var_164]
.text:000001C2                 mov     ecx, [ebp+arg_4]
.text:000001C5                 mov     eax, [ecx+eax*4+0Ch]
.text:000001C9                 mov     [ebp+edx*4+var_150], eax
.text:000001D0                 mov     ecx, [ebp+var_10]
.text:000001D3                 rol     ecx, 5
.text:000001D6                 mov     edx, [ebp+var_18]
.text:000001D9                 xor     edx, [ebp+var_8]
.text:000001DC                 and     edx, [ebp+var_14]
.text:000001DF                 xor     edx, [ebp+var_8]
.text:000001E2                 mov     eax, [ebp+var_164]
.text:000001E8                 add     edx, [ebp+eax*4+var_150]
.text:000001EF                 add     ecx, [ebp+var_C]
.text:000001F2                 lea     ecx, [ecx+edx+5A827999h]
.text:000001F9                 mov     [ebp+var_C], ecx
.text:000001FC                 mov     edx, [ebp+var_14]
.text:000001FF                 rol     edx, 1Eh
.text:00000202                 mov     [ebp+var_14], edx
.text:00000205                 mov     eax, [ebp+var_164]
.text:0000020B                 mov     ecx, [ebp+var_164]
.text:00000211                 mov     edx, [ebp+arg_4]
.text:00000214                 mov     ecx, [edx+ecx*4+10h]
.text:00000218                 mov     [ebp+eax*4+var_14C], ecx
.text:0000021F                 mov     edx, [ebp+var_C]
.text:00000222                 rol     edx, 5
.text:00000225                 mov     eax, [ebp+var_14]
.text:00000228                 xor     eax, [ebp+var_18]
.text:0000022B                 and     eax, [ebp+var_10]
.text:0000022E                 xor     eax, [ebp+var_18]
.text:00000231                 mov     ecx, [ebp+var_164]
.text:00000237                 add     eax, [ebp+ecx*4+var_14C]
.text:0000023E                 add     edx, [ebp+var_8]
.text:00000241                 lea     edx, [edx+eax+5A827999h]
.text:00000248                 mov     [ebp+var_8], edx
.text:0000024B                 mov     eax, [ebp+var_10]
.text:0000024E                 rol     eax, 1Eh
.text:00000251                 mov     [ebp+var_10], eax
.text:00000254                 jmp     loc_AE
.text:00000259 ; ---------------------------------------------------------------------------
.text:00000259
.text:00000259 loc_259:                                ; CODE XREF: Sha1_GetBlockDigest(x,x,x)+74j
.text:00000259                 mov     ecx, [ebp+arg_4]
.text:0000025C                 mov     edx, [ecx+3Ch]
.text:0000025F                 mov     [ebp+var_120], edx
.text:00000265                 mov     eax, [ebp+var_8]
.text:00000268                 rol     eax, 5
.text:0000026B                 mov     ecx, [ebp+var_10]
.text:0000026E                 xor     ecx, [ebp+var_14]
.text:00000271                 and     ecx, [ebp+var_C]
.text:00000274                 xor     ecx, [ebp+var_14]
.text:00000277                 add     ecx, [ebp+var_120]
.text:0000027D                 add     eax, [ebp+var_18]
.text:00000280                 lea     edx, [eax+ecx+5A827999h]
.text:00000287                 mov     [ebp+var_18], edx
.text:0000028A                 mov     eax, [ebp+var_C]
.text:0000028D                 rol     eax, 1Eh
.text:00000290                 mov     [ebp+var_C], eax
.text:00000293                 mov     ecx, [ebp+var_128]
.text:00000299                 xor     ecx, [ebp+var_13C]
.text:0000029F                 xor     ecx, [ebp+var_154]
.text:000002A5                 xor     ecx, [ebp+var_15C]
.text:000002AB                 rol     ecx, 1
.text:000002AD                 mov     [ebp+var_11C], ecx
.text:000002B3                 mov     edx, [ebp+var_18]
.text:000002B6                 rol     edx, 5
.text:000002B9                 mov     eax, [ebp+var_C]
.text:000002BC                 xor     eax, [ebp+var_10]
.text:000002BF                 and     eax, [ebp+var_8]
.text:000002C2                 xor     eax, [ebp+var_10]
.text:000002C5                 add     eax, [ebp+var_11C]
.text:000002CB                 add     edx, [ebp+var_14]
.text:000002CE                 lea     ecx, [edx+eax+5A827999h]
.text:000002D5                 mov     [ebp+var_14], ecx
.text:000002D8                 mov     edx, [ebp+var_8]
.text:000002DB                 rol     edx, 1Eh
.text:000002DE                 mov     [ebp+var_8], edx
.text:000002E1                 mov     eax, [ebp+var_124]
.text:000002E7                 xor     eax, [ebp+var_138]
.text:000002ED                 xor     eax, [ebp+var_150]
.text:000002F3                 xor     eax, [ebp+var_158]
.text:000002F9                 rol     eax, 1
.text:000002FB                 mov     [ebp+var_118], eax
.text:00000301                 mov     ecx, [ebp+var_14]
.text:00000304                 rol     ecx, 5
.text:00000307                 mov     edx, [ebp+var_8]
.text:0000030A                 xor     edx, [ebp+var_C]
.text:0000030D                 and     edx, [ebp+var_18]
.text:00000310                 xor     edx, [ebp+var_C]
.text:00000313                 add     edx, [ebp+var_118]
.text:00000319                 add     ecx, [ebp+var_10]
.text:0000031C                 lea     eax, [ecx+edx+5A827999h]
.text:00000323                 mov     [ebp+var_10], eax
.text:00000326                 mov     ecx, [ebp+var_18]
.text:00000329                 rol     ecx, 1Eh
.text:0000032C                 mov     [ebp+var_18], ecx
.text:0000032F                 mov     edx, [ebp+var_120]
.text:00000335                 xor     edx, [ebp+var_134]
.text:0000033B                 xor     edx, [ebp+var_14C]
.text:00000341                 xor     edx, [ebp+var_154]
.text:00000347                 rol     edx, 1
.text:00000349                 mov     [ebp+var_114], edx
.text:0000034F                 mov     eax, [ebp+var_10]
.text:00000352                 rol     eax, 5
.text:00000355                 mov     ecx, [ebp+var_18]
.text:00000358                 xor     ecx, [ebp+var_8]
.text:0000035B                 and     ecx, [ebp+var_14]
.text:0000035E                 xor     ecx, [ebp+var_8]
.text:00000361                 add     ecx, [ebp+var_114]
.text:00000367                 add     eax, [ebp+var_C]
.text:0000036A                 lea     edx, [eax+ecx+5A827999h]
.text:00000371                 mov     [ebp+var_C], edx
.text:00000374                 mov     eax, [ebp+var_14]
.text:00000377                 rol     eax, 1Eh
.text:0000037A                 mov     [ebp+var_14], eax
.text:0000037D                 mov     ecx, [ebp+var_11C]
.text:00000383                 xor     ecx, [ebp+var_130]
.text:00000389                 xor     ecx, [ebp+var_148]
.text:0000038F                 xor     ecx, [ebp+var_150]
.text:00000395                 rol     ecx, 1
.text:00000397                 mov     [ebp+var_110], ecx
.text:0000039D                 mov     edx, [ebp+var_C]
.text:000003A0                 rol     edx, 5
.text:000003A3                 mov     eax, [ebp+var_14]
.text:000003A6                 xor     eax, [ebp+var_18]
.text:000003A9                 and     eax, [ebp+var_10]
.text:000003AC                 xor     eax, [ebp+var_18]
.text:000003AF                 add     eax, [ebp+var_110]
.text:000003B5                 add     edx, [ebp+var_8]
.text:000003B8                 lea     ecx, [edx+eax+5A827999h]
.text:000003BF                 mov     [ebp+var_8], ecx
.text:000003C2                 mov     edx, [ebp+var_10]
.text:000003C5                 rol     edx, 1Eh
.text:000003C8                 mov     [ebp+var_10], edx
.text:000003CB                 mov     [ebp+var_168], 14h
.text:000003D5                 jmp     short loc_3E6
.text:000003D7 ; ---------------------------------------------------------------------------
.text:000003D7
.text:000003D7 loc_3D7:                                ; CODE XREF: Sha1_GetBlockDigest(x,x,x)+605j
.text:000003D7                 mov     eax, [ebp+var_168]
.text:000003DD                 add     eax, 5
.text:000003E0                 mov     [ebp+var_168], eax
.text:000003E6
.text:000003E6 loc_3E6:                                ; CODE XREF: Sha1_GetBlockDigest(x,x,x)+385j
.text:000003E6                 cmp     [ebp+var_168], 28h ; '('
.text:000003ED                 jnb     loc_65A
.text:000003F3                 mov     ecx, [ebp+var_168]
.text:000003F9                 mov     edx, [ebp+var_168]
.text:000003FF                 mov     eax, [ebp+ecx*4+var_168]
.text:00000406                 xor     eax, [ebp+edx*4+var_17C]
.text:0000040D                 mov     ecx, [ebp+var_168]
.text:00000413                 xor     eax, [ebp+ecx*4+var_194]
.text:0000041A                 mov     edx, [ebp+var_168]
.text:00000420                 xor     eax, [ebp+edx*4+var_19C]
.text:00000427                 rol     eax, 1
.text:00000429                 mov     [ebp+var_174], eax
.text:0000042F                 mov     eax, [ebp+var_168]
.text:00000435                 mov     ecx, [ebp+var_174]
.text:0000043B                 mov     [ebp+eax*4+var_15C], ecx
.text:00000442                 mov     edx, [ebp+var_8]
.text:00000445                 rol     edx, 5
.text:00000448                 mov     eax, [ebp+var_C]
.text:0000044B                 xor     eax, [ebp+var_10]
.text:0000044E                 xor     eax, [ebp+var_14]
.text:00000451                 add     eax, [ebp+var_174]
.text:00000457                 add     edx, [ebp+var_18]
.text:0000045A                 lea     ecx, [edx+eax+6ED9EBA1h]
.text:00000461                 mov     [ebp+var_18], ecx
.text:00000464                 mov     edx, [ebp+var_C]
.text:00000467                 rol     edx, 1Eh
.text:0000046A                 mov     [ebp+var_C], edx
.text:0000046D                 mov     eax, [ebp+var_168]
.text:00000473                 mov     ecx, [ebp+var_168]
.text:00000479                 mov     edx, [ebp+eax*4+var_164]
.text:00000480                 xor     edx, [ebp+ecx*4+var_178]
.text:00000487                 mov     eax, [ebp+var_168]
.text:0000048D                 xor     edx, [ebp+eax*4+var_190]
.text:00000494                 mov     ecx, [ebp+var_168]
.text:0000049A                 xor     edx, [ebp+ecx*4+var_198]
.text:000004A1                 rol     edx, 1
.text:000004A3                 mov     [ebp+var_178], edx
.text:000004A9                 mov     edx, [ebp+var_168]
.text:000004AF                 mov     eax, [ebp+var_178]
.text:000004B5                 mov     [ebp+edx*4+var_158], eax
.text:000004BC                 mov     ecx, [ebp+var_18]
.text:000004BF                 rol     ecx, 5
.text:000004C2                 mov     edx, [ebp+var_8]
.text:000004C5                 xor     edx, [ebp+var_C]
.text:000004C8                 xor     edx, [ebp+var_10]
.text:000004CB                 add     edx, [ebp+var_178]
.text:000004D1                 add     ecx, [ebp+var_14]
.text:000004D4                 lea     eax, [ecx+edx+6ED9EBA1h]
.text:000004DB                 mov     [ebp+var_14], eax
.text:000004DE                 mov     ecx, [ebp+var_8]
.text:000004E1                 rol     ecx, 1Eh
.text:000004E4                 mov     [ebp+var_8], ecx
.text:000004E7                 mov     edx, [ebp+var_168]
.text:000004ED                 mov     eax, [ebp+var_168]
.text:000004F3                 mov     ecx, [ebp+edx*4+var_160]
.text:000004FA                 xor     ecx, [ebp+eax*4+var_174]
.text:00000501                 mov     edx, [ebp+var_168]
.text:00000507                 xor     ecx, [ebp+edx*4+var_18C]
.text:0000050E                 mov     eax, [ebp+var_168]
.text:00000514                 xor     ecx, [ebp+eax*4+var_194]
.text:0000051B                 rol     ecx, 1
.text:0000051D                 mov     [ebp+var_17C], ecx
.text:00000523                 mov     ecx, [ebp+var_168]
.text:00000529                 mov     edx, [ebp+var_17C]
.text:0000052F                 mov     [ebp+ecx*4+var_154], edx
.text:00000536                 mov     eax, [ebp+var_14]
.text:00000539                 rol     eax, 5
.text:0000053C                 mov     ecx, [ebp+var_18]
.text:0000053F                 xor     ecx, [ebp+var_8]
.text:00000542                 xor     ecx, [ebp+var_C]
.text:00000545                 add     ecx, [ebp+var_17C]
.text:0000054B                 add     eax, [ebp+var_10]
.text:0000054E                 lea     edx, [eax+ecx+6ED9EBA1h]
.text:00000555                 mov     [ebp+var_10], edx
.text:00000558                 mov     eax, [ebp+var_18]
.text:0000055B                 rol     eax, 1Eh
.text:0000055E                 mov     [ebp+var_18], eax
.text:00000561                 mov     ecx, [ebp+var_168]
.text:00000567                 mov     edx, [ebp+var_168]
.text:0000056D                 mov     eax, [ebp+ecx*4+var_15C]
.text:00000574                 xor     eax, [ebp+edx*4+var_170]
.text:0000057B                 mov     ecx, [ebp+var_168]
.text:00000581                 xor     eax, [ebp+ecx*4+var_188]
.text:00000588                 mov     edx, [ebp+var_168]
.text:0000058E                 xor     eax, [ebp+edx*4+var_190]
.text:00000595                 rol     eax, 1
.text:00000597                 mov     [ebp+var_180], eax
.text:0000059D                 mov     eax, [ebp+var_168]
.text:000005A3                 mov     ecx, [ebp+var_180]
.text:000005A9                 mov     [ebp+eax*4+var_150], ecx
.text:000005B0                 mov     edx, [ebp+var_10]
.text:000005B3                 rol     edx, 5
.text:000005B6                 mov     eax, [ebp+var_14]
.text:000005B9                 xor     eax, [ebp+var_18]
.text:000005BC                 xor     eax, [ebp+var_8]
.text:000005BF                 add     eax, [ebp+var_180]
.text:000005C5                 add     edx, [ebp+var_C]
.text:000005C8                 lea     ecx, [edx+eax+6ED9EBA1h]
.text:000005CF                 mov     [ebp+var_C], ecx
.text:000005D2                 mov     edx, [ebp+var_14]
.text:000005D5                 rol     edx, 1Eh
.text:000005D8                 mov     [ebp+var_14], edx
.text:000005DB                 mov     eax, [ebp+var_168]
.text:000005E1                 mov     ecx, [ebp+var_168]
.text:000005E7                 mov     edx, [ebp+eax*4+var_158]
.text:000005EE                 xor     edx, [ebp+ecx*4+var_16C]
.text:000005F5                 mov     eax, [ebp+var_168]
.text:000005FB                 xor     edx, [ebp+eax*4+var_184]
.text:00000602                 mov     ecx, [ebp+var_168]
.text:00000608                 xor     edx, [ebp+ecx*4+var_18C]
.text:0000060F                 rol     edx, 1
.text:00000611                 mov     [ebp+var_184], edx
.text:00000617                 mov     edx, [ebp+var_168]
.text:0000061D                 mov     eax, [ebp+var_184]
.text:00000623                 mov     [ebp+edx*4+var_14C], eax
.text:0000062A                 mov     ecx, [ebp+var_C]
.text:0000062D                 rol     ecx, 5
.text:00000630                 mov     edx, [ebp+var_10]
.text:00000633                 xor     edx, [ebp+var_14]
.text:00000636                 xor     edx, [ebp+var_18]
.text:00000639                 add     edx, [ebp+var_184]
.text:0000063F                 add     ecx, [ebp+var_8]
.text:00000642                 lea     eax, [ecx+edx+6ED9EBA1h]
.text:00000649                 mov     [ebp+var_8], eax
.text:0000064C                 mov     ecx, [ebp+var_10]
.text:0000064F                 rol     ecx, 1Eh
.text:00000652                 mov     [ebp+var_10], ecx
.text:00000655                 jmp     loc_3D7
.text:0000065A ; ---------------------------------------------------------------------------
.text:0000065A
.text:0000065A loc_65A:                                ; CODE XREF: Sha1_GetBlockDigest(x,x,x)+39Dj
.text:0000065A                 mov     [ebp+var_16C], 28h ; '('
.text:00000664                 jmp     short loc_675
.text:00000666 ; ---------------------------------------------------------------------------
.text:00000666
.text:00000666 loc_666:                                ; CODE XREF: Sha1_GetBlockDigest(x,x,x)+8BCj
.text:00000666                 mov     edx, [ebp+var_16C]
.text:0000066C                 add     edx, 5
.text:0000066F                 mov     [ebp+var_16C], edx
.text:00000675
.text:00000675 loc_675:                                ; CODE XREF: Sha1_GetBlockDigest(x,x,x)+614j
.text:00000675                 cmp     [ebp+var_16C], 3Ch ; '<'
.text:0000067C                 jnb     loc_911
.text:00000682                 mov     eax, [ebp+var_16C]
.text:00000688                 mov     ecx, [ebp+var_16C]
.text:0000068E                 mov     edx, [ebp+eax*4+var_168]
.text:00000695                 xor     edx, [ebp+ecx*4+var_17C]
.text:0000069C                 mov     eax, [ebp+var_16C]
.text:000006A2                 xor     edx, [ebp+eax*4+var_194]
.text:000006A9                 mov     ecx, [ebp+var_16C]
.text:000006AF                 xor     edx, [ebp+ecx*4+var_19C]
.text:000006B6                 rol     edx, 1
.text:000006B8                 mov     [ebp+var_188], edx
.text:000006BE                 mov     edx, [ebp+var_16C]
.text:000006C4                 mov     eax, [ebp+var_188]
.text:000006CA                 mov     [ebp+edx*4+var_15C], eax
.text:000006D1                 mov     ecx, [ebp+var_8]
.text:000006D4                 rol     ecx, 5
.text:000006D7                 mov     edx, [ebp+var_C]
.text:000006DA                 or      edx, [ebp+var_10]
.text:000006DD                 and     edx, [ebp+var_14]
.text:000006E0                 mov     eax, [ebp+var_C]
.text:000006E3                 and     eax, [ebp+var_10]
.text:000006E6                 or      eax, edx
.text:000006E8                 add     eax, [ebp+var_188]
.text:000006EE                 add     ecx, [ebp+var_18]
.text:000006F1                 lea     ecx, [ecx+eax-70E44324h]
.text:000006F8                 mov     [ebp+var_18], ecx
.text:000006FB                 mov     edx, [ebp+var_C]
.text:000006FE                 rol     edx, 1Eh
.text:00000701                 mov     [ebp+var_C], edx
.text:00000704                 mov     eax, [ebp+var_16C]
.text:0000070A                 mov     ecx, [ebp+var_16C]
.text:00000710                 mov     edx, [ebp+eax*4+var_164]
.text:00000717                 xor     edx, [ebp+ecx*4+var_178]
.text:0000071E                 mov     eax, [ebp+var_16C]
.text:00000724                 xor     edx, [ebp+eax*4+var_190]
.text:0000072B                 mov     ecx, [ebp+var_16C]
.text:00000731                 xor     edx, [ebp+ecx*4+var_198]
.text:00000738                 rol     edx, 1
.text:0000073A                 mov     [ebp+var_18C], edx
.text:00000740                 mov     edx, [ebp+var_16C]
.text:00000746                 mov     eax, [ebp+var_18C]
.text:0000074C                 mov     [ebp+edx*4+var_158], eax
.text:00000753                 mov     ecx, [ebp+var_18]
.text:00000756                 rol     ecx, 5
.text:00000759                 mov     edx, [ebp+var_8]
.text:0000075C                 or      edx, [ebp+var_C]
.text:0000075F                 and     edx, [ebp+var_10]
.text:00000762                 mov     eax, [ebp+var_8]
.text:00000765                 and     eax, [ebp+var_C]
.text:00000768                 or      eax, edx
.text:0000076A                 add     eax, [ebp+var_18C]
.text:00000770                 add     ecx, [ebp+var_14]
.text:00000773                 lea     ecx, [ecx+eax-70E44324h]
.text:0000077A                 mov     [ebp+var_14], ecx
.text:0000077D                 mov     edx, [ebp+var_8]
.text:00000780                 rol     edx, 1Eh
.text:00000783                 mov     [ebp+var_8], edx
.text:00000786                 mov     eax, [ebp+var_16C]
.text:0000078C                 mov     ecx, [ebp+var_16C]
.text:00000792                 mov     edx, [ebp+eax*4+var_160]
.text:00000799                 xor     edx, [ebp+ecx*4+var_174]
.text:000007A0                 mov     eax, [ebp+var_16C]
.text:000007A6                 xor     edx, [ebp+eax*4+var_18C]
.text:000007AD                 mov     ecx, [ebp+var_16C]
.text:000007B3                 xor     edx, [ebp+ecx*4+var_194]
.text:000007BA                 rol     edx, 1
.text:000007BC                 mov     [ebp+var_190], edx
.text:000007C2                 mov     edx, [ebp+var_16C]
.text:000007C8                 mov     eax, [ebp+var_190]
.text:000007CE                 mov     [ebp+edx*4+var_154], eax
.text:000007D5                 mov     ecx, [ebp+var_14]
.text:000007D8                 rol     ecx, 5
.text:000007DB                 mov     edx, [ebp+var_18]
.text:000007DE                 or      edx, [ebp+var_8]
.text:000007E1                 and     edx, [ebp+var_C]
.text:000007E4                 mov     eax, [ebp+var_18]
.text:000007E7                 and     eax, [ebp+var_8]
.text:000007EA                 or      eax, edx
.text:000007EC                 add     eax, [ebp+var_190]
.text:000007F2                 add     ecx, [ebp+var_10]
.text:000007F5                 lea     ecx, [ecx+eax-70E44324h]
.text:000007FC                 mov     [ebp+var_10], ecx
.text:000007FF                 mov     edx, [ebp+var_18]
.text:00000802                 rol     edx, 1Eh
.text:00000805                 mov     [ebp+var_18], edx
.text:00000808                 mov     eax, [ebp+var_16C]
.text:0000080E                 mov     ecx, [ebp+var_16C]
.text:00000814                 mov     edx, [ebp+eax*4+var_15C]
.text:0000081B                 xor     edx, [ebp+ecx*4+var_170]
.text:00000822                 mov     eax, [ebp+var_16C]
.text:00000828                 xor     edx, [ebp+eax*4+var_188]
.text:0000082F                 mov     ecx, [ebp+var_16C]
.text:00000835                 xor     edx, [ebp+ecx*4+var_190]
.text:0000083C                 rol     edx, 1
.text:0000083E                 mov     [ebp+var_194], edx
.text:00000844                 mov     edx, [ebp+var_16C]
.text:0000084A                 mov     eax, [ebp+var_194]
.text:00000850                 mov     [ebp+edx*4+var_150], eax
.text:00000857                 mov     ecx, [ebp+var_10]
.text:0000085A                 rol     ecx, 5
.text:0000085D                 mov     edx, [ebp+var_14]
.text:00000860                 or      edx, [ebp+var_18]
.text:00000863                 and     edx, [ebp+var_8]
.text:00000866                 mov     eax, [ebp+var_14]
.text:00000869                 and     eax, [ebp+var_18]
.text:0000086C                 or      eax, edx
.text:0000086E                 add     eax, [ebp+var_194]
.text:00000874                 add     ecx, [ebp+var_C]
.text:00000877                 lea     ecx, [ecx+eax-70E44324h]
.text:0000087E                 mov     [ebp+var_C], ecx
.text:00000881                 mov     edx, [ebp+var_14]
.text:00000884                 rol     edx, 1Eh
.text:00000887                 mov     [ebp+var_14], edx
.text:0000088A                 mov     eax, [ebp+var_16C]
.text:00000890                 mov     ecx, [ebp+var_16C]
.text:00000896                 mov     edx, [ebp+eax*4+var_158]
.text:0000089D                 xor     edx, [ebp+ecx*4+var_16C]
.text:000008A4                 mov     eax, [ebp+var_16C]
.text:000008AA                 xor     edx, [ebp+eax*4+var_184]
.text:000008B1                 mov     ecx, [ebp+var_16C]
.text:000008B7                 xor     edx, [ebp+ecx*4+var_18C]
.text:000008BE                 rol     edx, 1
.text:000008C0                 mov     [ebp+var_198], edx
.text:000008C6                 mov     edx, [ebp+var_16C]
.text:000008CC                 mov     eax, [ebp+var_198]
.text:000008D2                 mov     [ebp+edx*4+var_14C], eax
.text:000008D9                 mov     ecx, [ebp+var_C]
.text:000008DC                 rol     ecx, 5
.text:000008DF                 mov     edx, [ebp+var_10]
.text:000008E2                 or      edx, [ebp+var_14]
.text:000008E5                 and     edx, [ebp+var_18]
.text:000008E8                 mov     eax, [ebp+var_10]
.text:000008EB                 and     eax, [ebp+var_14]
.text:000008EE                 or      eax, edx
.text:000008F0                 add     eax, [ebp+var_198]
.text:000008F6                 add     ecx, [ebp+var_8]
.text:000008F9                 lea     ecx, [ecx+eax-70E44324h]
.text:00000900                 mov     [ebp+var_8], ecx
.text:00000903                 mov     edx, [ebp+var_10]
.text:00000906                 rol     edx, 1Eh
.text:00000909                 mov     [ebp+var_10], edx
.text:0000090C                 jmp     loc_666
.text:00000911 ; ---------------------------------------------------------------------------
.text:00000911
.text:00000911 loc_911:                                ; CODE XREF: Sha1_GetBlockDigest(x,x,x)+62Cj
.text:00000911                 mov     [ebp+var_170], 3Ch ; '<'
.text:0000091B                 jmp     short loc_92C
.text:0000091D ; ---------------------------------------------------------------------------
.text:0000091D
.text:0000091D loc_91D:                                ; CODE XREF: Sha1_GetBlockDigest(x,x,x)+B4Bj
.text:0000091D                 mov     eax, [ebp+var_170]
.text:00000923                 add     eax, 5
.text:00000926                 mov     [ebp+var_170], eax
.text:0000092C
.text:0000092C loc_92C:                                ; CODE XREF: Sha1_GetBlockDigest(x,x,x)+8CBj
.text:0000092C                 cmp     [ebp+var_170], 50h ; 'P'
.text:00000933                 jnb     loc_BA0
.text:00000939                 mov     ecx, [ebp+var_170]
.text:0000093F                 mov     edx, [ebp+var_170]
.text:00000945                 mov     eax, [ebp+ecx*4+var_168]
.text:0000094C                 xor     eax, [ebp+edx*4+var_17C]
.text:00000953                 mov     ecx, [ebp+var_170]
.text:00000959                 xor     eax, [ebp+ecx*4+var_194]
.text:00000960                 mov     edx, [ebp+var_170]
.text:00000966                 xor     eax, [ebp+edx*4+var_19C]
.text:0000096D                 rol     eax, 1
.text:0000096F                 mov     [ebp+var_19C], eax
.text:00000975                 mov     eax, [ebp+var_170]
.text:0000097B                 mov     ecx, [ebp+var_19C]
.text:00000981                 mov     [ebp+eax*4+var_15C], ecx
.text:00000988                 mov     edx, [ebp+var_8]
.text:0000098B                 rol     edx, 5
.text:0000098E                 mov     eax, [ebp+var_C]
.text:00000991                 xor     eax, [ebp+var_10]
.text:00000994                 xor     eax, [ebp+var_14]
.text:00000997                 add     eax, [ebp+var_19C]
.text:0000099D                 add     edx, [ebp+var_18]
.text:000009A0                 lea     ecx, [edx+eax-359D3E2Ah]
.text:000009A7                 mov     [ebp+var_18], ecx
.text:000009AA                 mov     edx, [ebp+var_C]
.text:000009AD                 rol     edx, 1Eh
.text:000009B0                 mov     [ebp+var_C], edx
.text:000009B3                 mov     eax, [ebp+var_170]
.text:000009B9                 mov     ecx, [ebp+var_170]
.text:000009BF                 mov     edx, [ebp+eax*4+var_164]
.text:000009C6                 xor     edx, [ebp+ecx*4+var_178]
.text:000009CD                 mov     eax, [ebp+var_170]
.text:000009D3                 xor     edx, [ebp+eax*4+var_190]
.text:000009DA                 mov     ecx, [ebp+var_170]
.text:000009E0                 xor     edx, [ebp+ecx*4+var_198]
.text:000009E7                 rol     edx, 1
.text:000009E9                 mov     [ebp+var_1A0], edx
.text:000009EF                 mov     edx, [ebp+var_170]
.text:000009F5                 mov     eax, [ebp+var_1A0]
.text:000009FB                 mov     [ebp+edx*4+var_158], eax
.text:00000A02                 mov     ecx, [ebp+var_18]
.text:00000A05                 rol     ecx, 5
.text:00000A08                 mov     edx, [ebp+var_8]
.text:00000A0B                 xor     edx, [ebp+var_C]
.text:00000A0E                 xor     edx, [ebp+var_10]
.text:00000A11                 add     edx, [ebp+var_1A0]
.text:00000A17                 add     ecx, [ebp+var_14]
.text:00000A1A                 lea     eax, [ecx+edx-359D3E2Ah]
.text:00000A21                 mov     [ebp+var_14], eax
.text:00000A24                 mov     ecx, [ebp+var_8]
.text:00000A27                 rol     ecx, 1Eh
.text:00000A2A                 mov     [ebp+var_8], ecx
.text:00000A2D                 mov     edx, [ebp+var_170]
.text:00000A33                 mov     eax, [ebp+var_170]
.text:00000A39                 mov     ecx, [ebp+edx*4+var_160]
.text:00000A40                 xor     ecx, [ebp+eax*4+var_174]
.text:00000A47                 mov     edx, [ebp+var_170]
.text:00000A4D                 xor     ecx, [ebp+edx*4+var_18C]
.text:00000A54                 mov     eax, [ebp+var_170]
.text:00000A5A                 xor     ecx, [ebp+eax*4+var_194]
.text:00000A61                 rol     ecx, 1
.text:00000A63                 mov     [ebp+var_1A4], ecx
.text:00000A69                 mov     ecx, [ebp+var_170]
.text:00000A6F                 mov     edx, [ebp+var_1A4]
.text:00000A75                 mov     [ebp+ecx*4+var_154], edx
.text:00000A7C                 mov     eax, [ebp+var_14]
.text:00000A7F                 rol     eax, 5
.text:00000A82                 mov     ecx, [ebp+var_18]
.text:00000A85                 xor     ecx, [ebp+var_8]
.text:00000A88                 xor     ecx, [ebp+var_C]
.text:00000A8B                 add     ecx, [ebp+var_1A4]
.text:00000A91                 add     eax, [ebp+var_10]
.text:00000A94                 lea     edx, [eax+ecx-359D3E2Ah]
.text:00000A9B                 mov     [ebp+var_10], edx
.text:00000A9E                 mov     eax, [ebp+var_18]
.text:00000AA1                 rol     eax, 1Eh
.text:00000AA4                 mov     [ebp+var_18], eax
.text:00000AA7                 mov     ecx, [ebp+var_170]
.text:00000AAD                 mov     edx, [ebp+var_170]
.text:00000AB3                 mov     eax, [ebp+ecx*4+var_15C]
.text:00000ABA                 xor     eax, [ebp+edx*4+var_170]
.text:00000AC1                 mov     ecx, [ebp+var_170]
.text:00000AC7                 xor     eax, [ebp+ecx*4+var_188]
.text:00000ACE                 mov     edx, [ebp+var_170]
.text:00000AD4                 xor     eax, [ebp+edx*4+var_190]
.text:00000ADB                 rol     eax, 1
.text:00000ADD                 mov     [ebp+var_1A8], eax
.text:00000AE3                 mov     eax, [ebp+var_170]
.text:00000AE9                 mov     ecx, [ebp+var_1A8]
.text:00000AEF                 mov     [ebp+eax*4+var_150], ecx
.text:00000AF6                 mov     edx, [ebp+var_10]
.text:00000AF9                 rol     edx, 5
.text:00000AFC                 mov     eax, [ebp+var_14]
.text:00000AFF                 xor     eax, [ebp+var_18]
.text:00000B02                 xor     eax, [ebp+var_8]
.text:00000B05                 add     eax, [ebp+var_1A8]
.text:00000B0B                 add     edx, [ebp+var_C]
.text:00000B0E                 lea     ecx, [edx+eax-359D3E2Ah]
.text:00000B15                 mov     [ebp+var_C], ecx
.text:00000B18                 mov     edx, [ebp+var_14]
.text:00000B1B                 rol     edx, 1Eh
.text:00000B1E                 mov     [ebp+var_14], edx
.text:00000B21                 mov     eax, [ebp+var_170]
.text:00000B27                 mov     ecx, [ebp+var_170]
.text:00000B2D                 mov     edx, [ebp+eax*4+var_158]
.text:00000B34                 xor     edx, [ebp+ecx*4+var_16C]
.text:00000B3B                 mov     eax, [ebp+var_170]
.text:00000B41                 xor     edx, [ebp+eax*4+var_184]
.text:00000B48                 mov     ecx, [ebp+var_170]
.text:00000B4E                 xor     edx, [ebp+ecx*4+var_18C]
.text:00000B55                 rol     edx, 1
.text:00000B57                 mov     [ebp+var_1AC], edx
.text:00000B5D                 mov     edx, [ebp+var_170]
.text:00000B63                 mov     eax, [ebp+var_1AC]
.text:00000B69                 mov     [ebp+edx*4+var_14C], eax
.text:00000B70                 mov     ecx, [ebp+var_C]
.text:00000B73                 rol     ecx, 5
.text:00000B76                 mov     edx, [ebp+var_10]
.text:00000B79                 xor     edx, [ebp+var_14]
.text:00000B7C                 xor     edx, [ebp+var_18]
.text:00000B7F                 add     edx, [ebp+var_1AC]
.text:00000B85                 add     ecx, [ebp+var_8]
.text:00000B88                 lea     eax, [ecx+edx-359D3E2Ah]
.text:00000B8F                 mov     [ebp+var_8], eax
.text:00000B92                 mov     ecx, [ebp+var_10]
.text:00000B95                 rol     ecx, 1Eh
.text:00000B98                 mov     [ebp+var_10], ecx
.text:00000B9B                 jmp     loc_91D
.text:00000BA0 ; ---------------------------------------------------------------------------
.text:00000BA0
.text:00000BA0 loc_BA0:                                ; CODE XREF: Sha1_GetBlockDigest(x,x,x)+8E3j
.text:00000BA0                 mov     edx, [ebp+arg_0]
.text:00000BA3                 mov     eax, [edx]
.text:00000BA5                 add     eax, [ebp+var_8]
.text:00000BA8                 mov     ecx, [ebp+arg_8]
.text:00000BAB                 mov     [ecx], eax
.text:00000BAD                 mov     edx, [ebp+arg_0]
.text:00000BB0                 mov     eax, [edx+4]
.text:00000BB3                 add     eax, [ebp+var_C]
.text:00000BB6                 mov     ecx, [ebp+arg_8]
.text:00000BB9                 mov     [ecx+4], eax
.text:00000BBC                 mov     edx, [ebp+arg_0]
.text:00000BBF                 mov     eax, [edx+8]
.text:00000BC2                 add     eax, [ebp+var_10]
.text:00000BC5                 mov     ecx, [ebp+arg_8]
.text:00000BC8                 mov     [ecx+8], eax
.text:00000BCB                 mov     edx, [ebp+arg_0]
.text:00000BCE                 mov     eax, [edx+0Ch]
.text:00000BD1                 add     eax, [ebp+var_14]
.text:00000BD4                 mov     ecx, [ebp+arg_8]
.text:00000BD7                 mov     [ecx+0Ch], eax
.text:00000BDA                 mov     edx, [ebp+arg_0]
.text:00000BDD                 mov     eax, [edx+10h]
.text:00000BE0                 add     eax, [ebp+var_18]
.text:00000BE3                 mov     ecx, [ebp+arg_8]
.text:00000BE6                 mov     [ecx+10h], eax
.text:00000BE9                 push    edx
.text:00000BEA                 mov     ecx, ebp
.text:00000BEC                 push    eax
.text:00000BED                 lea     edx, $LN17
.text:00000BF3                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000BF8                 pop     eax
.text:00000BF9                 pop     edx
.text:00000BFA                 pop     edi
.text:00000BFB                 mov     ecx, [ebp+var_4]
.text:00000BFE                 xor     ecx, ebp
.text:00000C00                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000C05                 mov     esp, ebp
.text:00000C07                 pop     ebp
.text:00000C08                 retn    0Ch
.text:00000C08 _Sha1_GetBlockDigest@12 endp
.text:00000C08
.text:00000C08 ; ---------------------------------------------------------------------------
.text:00000C0B                 align 4
.text:00000C0C $LN17           dd 1                    ; DATA XREF: Sha1_GetBlockDigest(x,x,x)+B9Do
.text:00000C10                 dd offset $LN16
.text:00000C14 $LN16           dd 0FFFFFEA4h, 140h     ; DATA XREF: .text:00000C10o
.text:00000C1C                 dd offset $LN15
.text:00000C20 $LN15           dd 0CCCC0057h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00000C1Co
.text:00000C30
.text:00000C30 ; =============== S U B R O U T I N E =======================================
.text:00000C30
.text:00000C30 ; Attributes: bp-based frame
.text:00000C30
.text:00000C30 ; __stdcall Sha1_UpdateBlock_Rar(x, x, x)
.text:00000C30                 public _Sha1_UpdateBlock_Rar@12
.text:00000C30 _Sha1_UpdateBlock_Rar@12 proc near      ; CODE XREF: Sha1_Update_Rar(x,x,x,x)+E3p
.text:00000C30
.text:00000C30 var_1B0         = dword ptr -1B0h
.text:00000C30 var_1AC         = dword ptr -1ACh
.text:00000C30 var_1A8         = dword ptr -1A8h
.text:00000C30 var_1A4         = dword ptr -1A4h
.text:00000C30 var_1A0         = dword ptr -1A0h
.text:00000C30 var_19C         = dword ptr -19Ch
.text:00000C30 var_198         = dword ptr -198h
.text:00000C30 var_194         = dword ptr -194h
.text:00000C30 var_190         = dword ptr -190h
.text:00000C30 var_18C         = dword ptr -18Ch
.text:00000C30 var_188         = dword ptr -188h
.text:00000C30 var_184         = dword ptr -184h
.text:00000C30 var_180         = dword ptr -180h
.text:00000C30 var_17C         = dword ptr -17Ch
.text:00000C30 var_178         = dword ptr -178h
.text:00000C30 var_174         = dword ptr -174h
.text:00000C30 var_170         = dword ptr -170h
.text:00000C30 var_16C         = dword ptr -16Ch
.text:00000C30 var_168         = dword ptr -168h
.text:00000C30 var_164         = dword ptr -164h
.text:00000C30 var_160         = dword ptr -160h
.text:00000C30 var_15C         = dword ptr -15Ch
.text:00000C30 var_158         = dword ptr -158h
.text:00000C30 var_154         = dword ptr -154h
.text:00000C30 var_150         = dword ptr -150h
.text:00000C30 var_14C         = dword ptr -14Ch
.text:00000C30 var_148         = dword ptr -148h
.text:00000C30 var_13C         = dword ptr -13Ch
.text:00000C30 var_138         = dword ptr -138h
.text:00000C30 var_134         = dword ptr -134h
.text:00000C30 var_130         = dword ptr -130h
.text:00000C30 var_128         = dword ptr -128h
.text:00000C30 var_124         = dword ptr -124h
.text:00000C30 var_120         = dword ptr -120h
.text:00000C30 var_11C         = dword ptr -11Ch
.text:00000C30 var_118         = dword ptr -118h
.text:00000C30 var_114         = dword ptr -114h
.text:00000C30 var_110         = dword ptr -110h
.text:00000C30 var_5C          = dword ptr -5Ch
.text:00000C30 var_18          = dword ptr -18h
.text:00000C30 var_14          = dword ptr -14h
.text:00000C30 var_10          = dword ptr -10h
.text:00000C30 var_C           = dword ptr -0Ch
.text:00000C30 var_8           = dword ptr -8
.text:00000C30 var_4           = dword ptr -4
.text:00000C30 arg_0           = dword ptr  8
.text:00000C30 arg_4           = dword ptr  0Ch
.text:00000C30 arg_8           = dword ptr  10h
.text:00000C30
.text:00000C30                 push    ebp
.text:00000C31                 mov     ebp, esp
.text:00000C33                 sub     esp, 1B0h
.text:00000C39                 push    edi
.text:00000C3A                 lea     edi, [ebp+var_1B0]
.text:00000C40                 mov     ecx, 6Ch ; 'l'
.text:00000C45                 mov     eax, 0CCCCCCCCh
.text:00000C4A                 rep stosd
.text:00000C4C                 mov     eax, dword ptr ds:___security_cookie
.text:00000C51                 xor     eax, ebp
.text:00000C53                 mov     [ebp+var_4], eax
.text:00000C56                 mov     eax, [ebp+arg_0]
.text:00000C59                 mov     ecx, [eax]
.text:00000C5B                 mov     [ebp+var_8], ecx
.text:00000C5E                 mov     edx, [ebp+arg_0]
.text:00000C61                 mov     eax, [edx+4]
.text:00000C64                 mov     [ebp+var_C], eax
.text:00000C67                 mov     ecx, [ebp+arg_0]
.text:00000C6A                 mov     edx, [ecx+8]
.text:00000C6D                 mov     [ebp+var_10], edx
.text:00000C70                 mov     eax, [ebp+arg_0]
.text:00000C73                 mov     ecx, [eax+0Ch]
.text:00000C76                 mov     [ebp+var_14], ecx
.text:00000C79                 mov     edx, [ebp+arg_0]
.text:00000C7C                 mov     eax, [edx+10h]
.text:00000C7F                 mov     [ebp+var_18], eax
.text:00000C82                 mov     [ebp+var_164], 0
.text:00000C8C                 jmp     short loc_C9D
.text:00000C8E ; ---------------------------------------------------------------------------
.text:00000C8E
.text:00000C8E loc_C8E:                                ; CODE XREF: Sha1_UpdateBlock_Rar(x,x,x)+204j
.text:00000C8E                 mov     ecx, [ebp+var_164]
.text:00000C94                 add     ecx, 5
.text:00000C97                 mov     [ebp+var_164], ecx
.text:00000C9D
.text:00000C9D loc_C9D:                                ; CODE XREF: Sha1_UpdateBlock_Rar(x,x,x)+5Cj
.text:00000C9D                 cmp     [ebp+var_164], 0Fh
.text:00000CA4                 jnb     loc_E39
.text:00000CAA                 mov     edx, [ebp+var_164]
.text:00000CB0                 mov     eax, [ebp+var_164]
.text:00000CB6                 mov     ecx, [ebp+arg_4]
.text:00000CB9                 mov     eax, [ecx+eax*4]
.text:00000CBC                 mov     [ebp+edx*4+var_15C], eax
.text:00000CC3                 mov     ecx, [ebp+var_8]
.text:00000CC6                 rol     ecx, 5
.text:00000CC9                 mov     edx, [ebp+var_10]
.text:00000CCC                 xor     edx, [ebp+var_14]
.text:00000CCF                 and     edx, [ebp+var_C]
.text:00000CD2                 xor     edx, [ebp+var_14]
.text:00000CD5                 mov     eax, [ebp+var_164]
.text:00000CDB                 add     edx, [ebp+eax*4+var_15C]
.text:00000CE2                 add     ecx, [ebp+var_18]
.text:00000CE5                 lea     ecx, [ecx+edx+5A827999h]
.text:00000CEC                 mov     [ebp+var_18], ecx
.text:00000CEF                 mov     edx, [ebp+var_C]
.text:00000CF2                 rol     edx, 1Eh
.text:00000CF5                 mov     [ebp+var_C], edx
.text:00000CF8                 mov     eax, [ebp+var_164]
.text:00000CFE                 mov     ecx, [ebp+var_164]
.text:00000D04                 mov     edx, [ebp+arg_4]
.text:00000D07                 mov     ecx, [edx+ecx*4+4]
.text:00000D0B                 mov     [ebp+eax*4+var_158], ecx
.text:00000D12                 mov     edx, [ebp+var_18]
.text:00000D15                 rol     edx, 5
.text:00000D18                 mov     eax, [ebp+var_C]
.text:00000D1B                 xor     eax, [ebp+var_10]
.text:00000D1E                 and     eax, [ebp+var_8]
.text:00000D21                 xor     eax, [ebp+var_10]
.text:00000D24                 mov     ecx, [ebp+var_164]
.text:00000D2A                 add     eax, [ebp+ecx*4+var_158]
.text:00000D31                 add     edx, [ebp+var_14]
.text:00000D34                 lea     edx, [edx+eax+5A827999h]
.text:00000D3B                 mov     [ebp+var_14], edx
.text:00000D3E                 mov     eax, [ebp+var_8]
.text:00000D41                 rol     eax, 1Eh
.text:00000D44                 mov     [ebp+var_8], eax
.text:00000D47                 mov     ecx, [ebp+var_164]
.text:00000D4D                 mov     edx, [ebp+var_164]
.text:00000D53                 mov     eax, [ebp+arg_4]
.text:00000D56                 mov     edx, [eax+edx*4+8]
.text:00000D5A                 mov     [ebp+ecx*4+var_154], edx
.text:00000D61                 mov     eax, [ebp+var_14]
.text:00000D64                 rol     eax, 5
.text:00000D67                 mov     ecx, [ebp+var_8]
.text:00000D6A                 xor     ecx, [ebp+var_C]
.text:00000D6D                 and     ecx, [ebp+var_18]
.text:00000D70                 xor     ecx, [ebp+var_C]
.text:00000D73                 mov     edx, [ebp+var_164]
.text:00000D79                 add     ecx, [ebp+edx*4+var_154]
.text:00000D80                 add     eax, [ebp+var_10]
.text:00000D83                 lea     eax, [eax+ecx+5A827999h]
.text:00000D8A                 mov     [ebp+var_10], eax
.text:00000D8D                 mov     ecx, [ebp+var_18]
.text:00000D90                 rol     ecx, 1Eh
.text:00000D93                 mov     [ebp+var_18], ecx
.text:00000D96                 mov     edx, [ebp+var_164]
.text:00000D9C                 mov     eax, [ebp+var_164]
.text:00000DA2                 mov     ecx, [ebp+arg_4]
.text:00000DA5                 mov     eax, [ecx+eax*4+0Ch]
.text:00000DA9                 mov     [ebp+edx*4+var_150], eax
.text:00000DB0                 mov     ecx, [ebp+var_10]
.text:00000DB3                 rol     ecx, 5
.text:00000DB6                 mov     edx, [ebp+var_18]
.text:00000DB9                 xor     edx, [ebp+var_8]
.text:00000DBC                 and     edx, [ebp+var_14]
.text:00000DBF                 xor     edx, [ebp+var_8]
.text:00000DC2                 mov     eax, [ebp+var_164]
.text:00000DC8                 add     edx, [ebp+eax*4+var_150]
.text:00000DCF                 add     ecx, [ebp+var_C]
.text:00000DD2                 lea     ecx, [ecx+edx+5A827999h]
.text:00000DD9                 mov     [ebp+var_C], ecx
.text:00000DDC                 mov     edx, [ebp+var_14]
.text:00000DDF                 rol     edx, 1Eh
.text:00000DE2                 mov     [ebp+var_14], edx
.text:00000DE5                 mov     eax, [ebp+var_164]
.text:00000DEB                 mov     ecx, [ebp+var_164]
.text:00000DF1                 mov     edx, [ebp+arg_4]
.text:00000DF4                 mov     ecx, [edx+ecx*4+10h]
.text:00000DF8                 mov     [ebp+eax*4+var_14C], ecx
.text:00000DFF                 mov     edx, [ebp+var_C]
.text:00000E02                 rol     edx, 5
.text:00000E05                 mov     eax, [ebp+var_14]
.text:00000E08                 xor     eax, [ebp+var_18]
.text:00000E0B                 and     eax, [ebp+var_10]
.text:00000E0E                 xor     eax, [ebp+var_18]
.text:00000E11                 mov     ecx, [ebp+var_164]
.text:00000E17                 add     eax, [ebp+ecx*4+var_14C]
.text:00000E1E                 add     edx, [ebp+var_8]
.text:00000E21                 lea     edx, [edx+eax+5A827999h]
.text:00000E28                 mov     [ebp+var_8], edx
.text:00000E2B                 mov     eax, [ebp+var_10]
.text:00000E2E                 rol     eax, 1Eh
.text:00000E31                 mov     [ebp+var_10], eax
.text:00000E34                 jmp     loc_C8E
.text:00000E39 ; ---------------------------------------------------------------------------
.text:00000E39
.text:00000E39 loc_E39:                                ; CODE XREF: Sha1_UpdateBlock_Rar(x,x,x)+74j
.text:00000E39                 mov     ecx, [ebp+arg_4]
.text:00000E3C                 mov     edx, [ecx+3Ch]
.text:00000E3F                 mov     [ebp+var_120], edx
.text:00000E45                 mov     eax, [ebp+var_8]
.text:00000E48                 rol     eax, 5
.text:00000E4B                 mov     ecx, [ebp+var_10]
.text:00000E4E                 xor     ecx, [ebp+var_14]
.text:00000E51                 and     ecx, [ebp+var_C]
.text:00000E54                 xor     ecx, [ebp+var_14]
.text:00000E57                 add     ecx, [ebp+var_120]
.text:00000E5D                 add     eax, [ebp+var_18]
.text:00000E60                 lea     edx, [eax+ecx+5A827999h]
.text:00000E67                 mov     [ebp+var_18], edx
.text:00000E6A                 mov     eax, [ebp+var_C]
.text:00000E6D                 rol     eax, 1Eh
.text:00000E70                 mov     [ebp+var_C], eax
.text:00000E73                 mov     ecx, [ebp+var_128]
.text:00000E79                 xor     ecx, [ebp+var_13C]
.text:00000E7F                 xor     ecx, [ebp+var_154]
.text:00000E85                 xor     ecx, [ebp+var_15C]
.text:00000E8B                 rol     ecx, 1
.text:00000E8D                 mov     [ebp+var_11C], ecx
.text:00000E93                 mov     edx, [ebp+var_18]
.text:00000E96                 rol     edx, 5
.text:00000E99                 mov     eax, [ebp+var_C]
.text:00000E9C                 xor     eax, [ebp+var_10]
.text:00000E9F                 and     eax, [ebp+var_8]
.text:00000EA2                 xor     eax, [ebp+var_10]
.text:00000EA5                 add     eax, [ebp+var_11C]
.text:00000EAB                 add     edx, [ebp+var_14]
.text:00000EAE                 lea     ecx, [edx+eax+5A827999h]
.text:00000EB5                 mov     [ebp+var_14], ecx
.text:00000EB8                 mov     edx, [ebp+var_8]
.text:00000EBB                 rol     edx, 1Eh
.text:00000EBE                 mov     [ebp+var_8], edx
.text:00000EC1                 mov     eax, [ebp+var_124]
.text:00000EC7                 xor     eax, [ebp+var_138]
.text:00000ECD                 xor     eax, [ebp+var_150]
.text:00000ED3                 xor     eax, [ebp+var_158]
.text:00000ED9                 rol     eax, 1
.text:00000EDB                 mov     [ebp+var_118], eax
.text:00000EE1                 mov     ecx, [ebp+var_14]
.text:00000EE4                 rol     ecx, 5
.text:00000EE7                 mov     edx, [ebp+var_8]
.text:00000EEA                 xor     edx, [ebp+var_C]
.text:00000EED                 and     edx, [ebp+var_18]
.text:00000EF0                 xor     edx, [ebp+var_C]
.text:00000EF3                 add     edx, [ebp+var_118]
.text:00000EF9                 add     ecx, [ebp+var_10]
.text:00000EFC                 lea     eax, [ecx+edx+5A827999h]
.text:00000F03                 mov     [ebp+var_10], eax
.text:00000F06                 mov     ecx, [ebp+var_18]
.text:00000F09                 rol     ecx, 1Eh
.text:00000F0C                 mov     [ebp+var_18], ecx
.text:00000F0F                 mov     edx, [ebp+var_120]
.text:00000F15                 xor     edx, [ebp+var_134]
.text:00000F1B                 xor     edx, [ebp+var_14C]
.text:00000F21                 xor     edx, [ebp+var_154]
.text:00000F27                 rol     edx, 1
.text:00000F29                 mov     [ebp+var_114], edx
.text:00000F2F                 mov     eax, [ebp+var_10]
.text:00000F32                 rol     eax, 5
.text:00000F35                 mov     ecx, [ebp+var_18]
.text:00000F38                 xor     ecx, [ebp+var_8]
.text:00000F3B                 and     ecx, [ebp+var_14]
.text:00000F3E                 xor     ecx, [ebp+var_8]
.text:00000F41                 add     ecx, [ebp+var_114]
.text:00000F47                 add     eax, [ebp+var_C]
.text:00000F4A                 lea     edx, [eax+ecx+5A827999h]
.text:00000F51                 mov     [ebp+var_C], edx
.text:00000F54                 mov     eax, [ebp+var_14]
.text:00000F57                 rol     eax, 1Eh
.text:00000F5A                 mov     [ebp+var_14], eax
.text:00000F5D                 mov     ecx, [ebp+var_11C]
.text:00000F63                 xor     ecx, [ebp+var_130]
.text:00000F69                 xor     ecx, [ebp+var_148]
.text:00000F6F                 xor     ecx, [ebp+var_150]
.text:00000F75                 rol     ecx, 1
.text:00000F77                 mov     [ebp+var_110], ecx
.text:00000F7D                 mov     edx, [ebp+var_C]
.text:00000F80                 rol     edx, 5
.text:00000F83                 mov     eax, [ebp+var_14]
.text:00000F86                 xor     eax, [ebp+var_18]
.text:00000F89                 and     eax, [ebp+var_10]
.text:00000F8C                 xor     eax, [ebp+var_18]
.text:00000F8F                 add     eax, [ebp+var_110]
.text:00000F95                 add     edx, [ebp+var_8]
.text:00000F98                 lea     ecx, [edx+eax+5A827999h]
.text:00000F9F                 mov     [ebp+var_8], ecx
.text:00000FA2                 mov     edx, [ebp+var_10]
.text:00000FA5                 rol     edx, 1Eh
.text:00000FA8                 mov     [ebp+var_10], edx
.text:00000FAB                 mov     [ebp+var_168], 14h
.text:00000FB5                 jmp     short loc_FC6
.text:00000FB7 ; ---------------------------------------------------------------------------
.text:00000FB7
.text:00000FB7 loc_FB7:                                ; CODE XREF: Sha1_UpdateBlock_Rar(x,x,x)+605j
.text:00000FB7                 mov     eax, [ebp+var_168]
.text:00000FBD                 add     eax, 5
.text:00000FC0                 mov     [ebp+var_168], eax
.text:00000FC6
.text:00000FC6 loc_FC6:                                ; CODE XREF: Sha1_UpdateBlock_Rar(x,x,x)+385j
.text:00000FC6                 cmp     [ebp+var_168], 28h ; '('
.text:00000FCD                 jnb     loc_123A
.text:00000FD3                 mov     ecx, [ebp+var_168]
.text:00000FD9                 mov     edx, [ebp+var_168]
.text:00000FDF                 mov     eax, [ebp+ecx*4+var_168]
.text:00000FE6                 xor     eax, [ebp+edx*4+var_17C]
.text:00000FED                 mov     ecx, [ebp+var_168]
.text:00000FF3                 xor     eax, [ebp+ecx*4+var_194]
.text:00000FFA                 mov     edx, [ebp+var_168]
.text:00001000                 xor     eax, [ebp+edx*4+var_19C]
.text:00001007                 rol     eax, 1
.text:00001009                 mov     [ebp+var_178], eax
.text:0000100F                 mov     eax, [ebp+var_168]
.text:00001015                 mov     ecx, [ebp+var_178]
.text:0000101B                 mov     [ebp+eax*4+var_15C], ecx
.text:00001022                 mov     edx, [ebp+var_8]
.text:00001025                 rol     edx, 5
.text:00001028                 mov     eax, [ebp+var_C]
.text:0000102B                 xor     eax, [ebp+var_10]
.text:0000102E                 xor     eax, [ebp+var_14]
.text:00001031                 add     eax, [ebp+var_178]
.text:00001037                 add     edx, [ebp+var_18]
.text:0000103A                 lea     ecx, [edx+eax+6ED9EBA1h]
.text:00001041                 mov     [ebp+var_18], ecx
.text:00001044                 mov     edx, [ebp+var_C]
.text:00001047                 rol     edx, 1Eh
.text:0000104A                 mov     [ebp+var_C], edx
.text:0000104D                 mov     eax, [ebp+var_168]
.text:00001053                 mov     ecx, [ebp+var_168]
.text:00001059                 mov     edx, [ebp+eax*4+var_164]
.text:00001060                 xor     edx, [ebp+ecx*4+var_178]
.text:00001067                 mov     eax, [ebp+var_168]
.text:0000106D                 xor     edx, [ebp+eax*4+var_190]
.text:00001074                 mov     ecx, [ebp+var_168]
.text:0000107A                 xor     edx, [ebp+ecx*4+var_198]
.text:00001081                 rol     edx, 1
.text:00001083                 mov     [ebp+var_17C], edx
.text:00001089                 mov     edx, [ebp+var_168]
.text:0000108F                 mov     eax, [ebp+var_17C]
.text:00001095                 mov     [ebp+edx*4+var_158], eax
.text:0000109C                 mov     ecx, [ebp+var_18]
.text:0000109F                 rol     ecx, 5
.text:000010A2                 mov     edx, [ebp+var_8]
.text:000010A5                 xor     edx, [ebp+var_C]
.text:000010A8                 xor     edx, [ebp+var_10]
.text:000010AB                 add     edx, [ebp+var_17C]
.text:000010B1                 add     ecx, [ebp+var_14]
.text:000010B4                 lea     eax, [ecx+edx+6ED9EBA1h]
.text:000010BB                 mov     [ebp+var_14], eax
.text:000010BE                 mov     ecx, [ebp+var_8]
.text:000010C1                 rol     ecx, 1Eh
.text:000010C4                 mov     [ebp+var_8], ecx
.text:000010C7                 mov     edx, [ebp+var_168]
.text:000010CD                 mov     eax, [ebp+var_168]
.text:000010D3                 mov     ecx, [ebp+edx*4+var_160]
.text:000010DA                 xor     ecx, [ebp+eax*4+var_174]
.text:000010E1                 mov     edx, [ebp+var_168]
.text:000010E7                 xor     ecx, [ebp+edx*4+var_18C]
.text:000010EE                 mov     eax, [ebp+var_168]
.text:000010F4                 xor     ecx, [ebp+eax*4+var_194]
.text:000010FB                 rol     ecx, 1
.text:000010FD                 mov     [ebp+var_180], ecx
.text:00001103                 mov     ecx, [ebp+var_168]
.text:00001109                 mov     edx, [ebp+var_180]
.text:0000110F                 mov     [ebp+ecx*4+var_154], edx
.text:00001116                 mov     eax, [ebp+var_14]
.text:00001119                 rol     eax, 5
.text:0000111C                 mov     ecx, [ebp+var_18]
.text:0000111F                 xor     ecx, [ebp+var_8]
.text:00001122                 xor     ecx, [ebp+var_C]
.text:00001125                 add     ecx, [ebp+var_180]
.text:0000112B                 add     eax, [ebp+var_10]
.text:0000112E                 lea     edx, [eax+ecx+6ED9EBA1h]
.text:00001135                 mov     [ebp+var_10], edx
.text:00001138                 mov     eax, [ebp+var_18]
.text:0000113B                 rol     eax, 1Eh
.text:0000113E                 mov     [ebp+var_18], eax
.text:00001141                 mov     ecx, [ebp+var_168]
.text:00001147                 mov     edx, [ebp+var_168]
.text:0000114D                 mov     eax, [ebp+ecx*4+var_15C]
.text:00001154                 xor     eax, [ebp+edx*4+var_170]
.text:0000115B                 mov     ecx, [ebp+var_168]
.text:00001161                 xor     eax, [ebp+ecx*4+var_188]
.text:00001168                 mov     edx, [ebp+var_168]
.text:0000116E                 xor     eax, [ebp+edx*4+var_190]
.text:00001175                 rol     eax, 1
.text:00001177                 mov     [ebp+var_184], eax
.text:0000117D                 mov     eax, [ebp+var_168]
.text:00001183                 mov     ecx, [ebp+var_184]
.text:00001189                 mov     [ebp+eax*4+var_150], ecx
.text:00001190                 mov     edx, [ebp+var_10]
.text:00001193                 rol     edx, 5
.text:00001196                 mov     eax, [ebp+var_14]
.text:00001199                 xor     eax, [ebp+var_18]
.text:0000119C                 xor     eax, [ebp+var_8]
.text:0000119F                 add     eax, [ebp+var_184]
.text:000011A5                 add     edx, [ebp+var_C]
.text:000011A8                 lea     ecx, [edx+eax+6ED9EBA1h]
.text:000011AF                 mov     [ebp+var_C], ecx
.text:000011B2                 mov     edx, [ebp+var_14]
.text:000011B5                 rol     edx, 1Eh
.text:000011B8                 mov     [ebp+var_14], edx
.text:000011BB                 mov     eax, [ebp+var_168]
.text:000011C1                 mov     ecx, [ebp+var_168]
.text:000011C7                 mov     edx, [ebp+eax*4+var_158]
.text:000011CE                 xor     edx, [ebp+ecx*4+var_16C]
.text:000011D5                 mov     eax, [ebp+var_168]
.text:000011DB                 xor     edx, [ebp+eax*4+var_184]
.text:000011E2                 mov     ecx, [ebp+var_168]
.text:000011E8                 xor     edx, [ebp+ecx*4+var_18C]
.text:000011EF                 rol     edx, 1
.text:000011F1                 mov     [ebp+var_188], edx
.text:000011F7                 mov     edx, [ebp+var_168]
.text:000011FD                 mov     eax, [ebp+var_188]
.text:00001203                 mov     [ebp+edx*4+var_14C], eax
.text:0000120A                 mov     ecx, [ebp+var_C]
.text:0000120D                 rol     ecx, 5
.text:00001210                 mov     edx, [ebp+var_10]
.text:00001213                 xor     edx, [ebp+var_14]
.text:00001216                 xor     edx, [ebp+var_18]
.text:00001219                 add     edx, [ebp+var_188]
.text:0000121F                 add     ecx, [ebp+var_8]
.text:00001222                 lea     eax, [ecx+edx+6ED9EBA1h]
.text:00001229                 mov     [ebp+var_8], eax
.text:0000122C                 mov     ecx, [ebp+var_10]
.text:0000122F                 rol     ecx, 1Eh
.text:00001232                 mov     [ebp+var_10], ecx
.text:00001235                 jmp     loc_FB7
.text:0000123A ; ---------------------------------------------------------------------------
.text:0000123A
.text:0000123A loc_123A:                               ; CODE XREF: Sha1_UpdateBlock_Rar(x,x,x)+39Dj
.text:0000123A                 mov     [ebp+var_16C], 28h ; '('
.text:00001244                 jmp     short loc_1255
.text:00001246 ; ---------------------------------------------------------------------------
.text:00001246
.text:00001246 loc_1246:                               ; CODE XREF: Sha1_UpdateBlock_Rar(x,x,x)+8BCj
.text:00001246                 mov     edx, [ebp+var_16C]
.text:0000124C                 add     edx, 5
.text:0000124F                 mov     [ebp+var_16C], edx
.text:00001255
.text:00001255 loc_1255:                               ; CODE XREF: Sha1_UpdateBlock_Rar(x,x,x)+614j
.text:00001255                 cmp     [ebp+var_16C], 3Ch ; '<'
.text:0000125C                 jnb     loc_14F1
.text:00001262                 mov     eax, [ebp+var_16C]
.text:00001268                 mov     ecx, [ebp+var_16C]
.text:0000126E                 mov     edx, [ebp+eax*4+var_168]
.text:00001275                 xor     edx, [ebp+ecx*4+var_17C]
.text:0000127C                 mov     eax, [ebp+var_16C]
.text:00001282                 xor     edx, [ebp+eax*4+var_194]
.text:00001289                 mov     ecx, [ebp+var_16C]
.text:0000128F                 xor     edx, [ebp+ecx*4+var_19C]
.text:00001296                 rol     edx, 1
.text:00001298                 mov     [ebp+var_18C], edx
.text:0000129E                 mov     edx, [ebp+var_16C]
.text:000012A4                 mov     eax, [ebp+var_18C]
.text:000012AA                 mov     [ebp+edx*4+var_15C], eax
.text:000012B1                 mov     ecx, [ebp+var_8]
.text:000012B4                 rol     ecx, 5
.text:000012B7                 mov     edx, [ebp+var_C]
.text:000012BA                 or      edx, [ebp+var_10]
.text:000012BD                 and     edx, [ebp+var_14]
.text:000012C0                 mov     eax, [ebp+var_C]
.text:000012C3                 and     eax, [ebp+var_10]
.text:000012C6                 or      eax, edx
.text:000012C8                 add     eax, [ebp+var_18C]
.text:000012CE                 add     ecx, [ebp+var_18]
.text:000012D1                 lea     ecx, [ecx+eax-70E44324h]
.text:000012D8                 mov     [ebp+var_18], ecx
.text:000012DB                 mov     edx, [ebp+var_C]
.text:000012DE                 rol     edx, 1Eh
.text:000012E1                 mov     [ebp+var_C], edx
.text:000012E4                 mov     eax, [ebp+var_16C]
.text:000012EA                 mov     ecx, [ebp+var_16C]
.text:000012F0                 mov     edx, [ebp+eax*4+var_164]
.text:000012F7                 xor     edx, [ebp+ecx*4+var_178]
.text:000012FE                 mov     eax, [ebp+var_16C]
.text:00001304                 xor     edx, [ebp+eax*4+var_190]
.text:0000130B                 mov     ecx, [ebp+var_16C]
.text:00001311                 xor     edx, [ebp+ecx*4+var_198]
.text:00001318                 rol     edx, 1
.text:0000131A                 mov     [ebp+var_190], edx
.text:00001320                 mov     edx, [ebp+var_16C]
.text:00001326                 mov     eax, [ebp+var_190]
.text:0000132C                 mov     [ebp+edx*4+var_158], eax
.text:00001333                 mov     ecx, [ebp+var_18]
.text:00001336                 rol     ecx, 5
.text:00001339                 mov     edx, [ebp+var_8]
.text:0000133C                 or      edx, [ebp+var_C]
.text:0000133F                 and     edx, [ebp+var_10]
.text:00001342                 mov     eax, [ebp+var_8]
.text:00001345                 and     eax, [ebp+var_C]
.text:00001348                 or      eax, edx
.text:0000134A                 add     eax, [ebp+var_190]
.text:00001350                 add     ecx, [ebp+var_14]
.text:00001353                 lea     ecx, [ecx+eax-70E44324h]
.text:0000135A                 mov     [ebp+var_14], ecx
.text:0000135D                 mov     edx, [ebp+var_8]
.text:00001360                 rol     edx, 1Eh
.text:00001363                 mov     [ebp+var_8], edx
.text:00001366                 mov     eax, [ebp+var_16C]
.text:0000136C                 mov     ecx, [ebp+var_16C]
.text:00001372                 mov     edx, [ebp+eax*4+var_160]
.text:00001379                 xor     edx, [ebp+ecx*4+var_174]
.text:00001380                 mov     eax, [ebp+var_16C]
.text:00001386                 xor     edx, [ebp+eax*4+var_18C]
.text:0000138D                 mov     ecx, [ebp+var_16C]
.text:00001393                 xor     edx, [ebp+ecx*4+var_194]
.text:0000139A                 rol     edx, 1
.text:0000139C                 mov     [ebp+var_194], edx
.text:000013A2                 mov     edx, [ebp+var_16C]
.text:000013A8                 mov     eax, [ebp+var_194]
.text:000013AE                 mov     [ebp+edx*4+var_154], eax
.text:000013B5                 mov     ecx, [ebp+var_14]
.text:000013B8                 rol     ecx, 5
.text:000013BB                 mov     edx, [ebp+var_18]
.text:000013BE                 or      edx, [ebp+var_8]
.text:000013C1                 and     edx, [ebp+var_C]
.text:000013C4                 mov     eax, [ebp+var_18]
.text:000013C7                 and     eax, [ebp+var_8]
.text:000013CA                 or      eax, edx
.text:000013CC                 add     eax, [ebp+var_194]
.text:000013D2                 add     ecx, [ebp+var_10]
.text:000013D5                 lea     ecx, [ecx+eax-70E44324h]
.text:000013DC                 mov     [ebp+var_10], ecx
.text:000013DF                 mov     edx, [ebp+var_18]
.text:000013E2                 rol     edx, 1Eh
.text:000013E5                 mov     [ebp+var_18], edx
.text:000013E8                 mov     eax, [ebp+var_16C]
.text:000013EE                 mov     ecx, [ebp+var_16C]
.text:000013F4                 mov     edx, [ebp+eax*4+var_15C]
.text:000013FB                 xor     edx, [ebp+ecx*4+var_170]
.text:00001402                 mov     eax, [ebp+var_16C]
.text:00001408                 xor     edx, [ebp+eax*4+var_188]
.text:0000140F                 mov     ecx, [ebp+var_16C]
.text:00001415                 xor     edx, [ebp+ecx*4+var_190]
.text:0000141C                 rol     edx, 1
.text:0000141E                 mov     [ebp+var_198], edx
.text:00001424                 mov     edx, [ebp+var_16C]
.text:0000142A                 mov     eax, [ebp+var_198]
.text:00001430                 mov     [ebp+edx*4+var_150], eax
.text:00001437                 mov     ecx, [ebp+var_10]
.text:0000143A                 rol     ecx, 5
.text:0000143D                 mov     edx, [ebp+var_14]
.text:00001440                 or      edx, [ebp+var_18]
.text:00001443                 and     edx, [ebp+var_8]
.text:00001446                 mov     eax, [ebp+var_14]
.text:00001449                 and     eax, [ebp+var_18]
.text:0000144C                 or      eax, edx
.text:0000144E                 add     eax, [ebp+var_198]
.text:00001454                 add     ecx, [ebp+var_C]
.text:00001457                 lea     ecx, [ecx+eax-70E44324h]
.text:0000145E                 mov     [ebp+var_C], ecx
.text:00001461                 mov     edx, [ebp+var_14]
.text:00001464                 rol     edx, 1Eh
.text:00001467                 mov     [ebp+var_14], edx
.text:0000146A                 mov     eax, [ebp+var_16C]
.text:00001470                 mov     ecx, [ebp+var_16C]
.text:00001476                 mov     edx, [ebp+eax*4+var_158]
.text:0000147D                 xor     edx, [ebp+ecx*4+var_16C]
.text:00001484                 mov     eax, [ebp+var_16C]
.text:0000148A                 xor     edx, [ebp+eax*4+var_184]
.text:00001491                 mov     ecx, [ebp+var_16C]
.text:00001497                 xor     edx, [ebp+ecx*4+var_18C]
.text:0000149E                 rol     edx, 1
.text:000014A0                 mov     [ebp+var_19C], edx
.text:000014A6                 mov     edx, [ebp+var_16C]
.text:000014AC                 mov     eax, [ebp+var_19C]
.text:000014B2                 mov     [ebp+edx*4+var_14C], eax
.text:000014B9                 mov     ecx, [ebp+var_C]
.text:000014BC                 rol     ecx, 5
.text:000014BF                 mov     edx, [ebp+var_10]
.text:000014C2                 or      edx, [ebp+var_14]
.text:000014C5                 and     edx, [ebp+var_18]
.text:000014C8                 mov     eax, [ebp+var_10]
.text:000014CB                 and     eax, [ebp+var_14]
.text:000014CE                 or      eax, edx
.text:000014D0                 add     eax, [ebp+var_19C]
.text:000014D6                 add     ecx, [ebp+var_8]
.text:000014D9                 lea     ecx, [ecx+eax-70E44324h]
.text:000014E0                 mov     [ebp+var_8], ecx
.text:000014E3                 mov     edx, [ebp+var_10]
.text:000014E6                 rol     edx, 1Eh
.text:000014E9                 mov     [ebp+var_10], edx
.text:000014EC                 jmp     loc_1246
.text:000014F1 ; ---------------------------------------------------------------------------
.text:000014F1
.text:000014F1 loc_14F1:                               ; CODE XREF: Sha1_UpdateBlock_Rar(x,x,x)+62Cj
.text:000014F1                 mov     [ebp+var_170], 3Ch ; '<'
.text:000014FB                 jmp     short loc_150C
.text:000014FD ; ---------------------------------------------------------------------------
.text:000014FD
.text:000014FD loc_14FD:                               ; CODE XREF: Sha1_UpdateBlock_Rar(x,x,x)+B4Bj
.text:000014FD                 mov     eax, [ebp+var_170]
.text:00001503                 add     eax, 5
.text:00001506                 mov     [ebp+var_170], eax
.text:0000150C
.text:0000150C loc_150C:                               ; CODE XREF: Sha1_UpdateBlock_Rar(x,x,x)+8CBj
.text:0000150C                 cmp     [ebp+var_170], 50h ; 'P'
.text:00001513                 jnb     loc_1780
.text:00001519                 mov     ecx, [ebp+var_170]
.text:0000151F                 mov     edx, [ebp+var_170]
.text:00001525                 mov     eax, [ebp+ecx*4+var_168]
.text:0000152C                 xor     eax, [ebp+edx*4+var_17C]
.text:00001533                 mov     ecx, [ebp+var_170]
.text:00001539                 xor     eax, [ebp+ecx*4+var_194]
.text:00001540                 mov     edx, [ebp+var_170]
.text:00001546                 xor     eax, [ebp+edx*4+var_19C]
.text:0000154D                 rol     eax, 1
.text:0000154F                 mov     [ebp+var_1A0], eax
.text:00001555                 mov     eax, [ebp+var_170]
.text:0000155B                 mov     ecx, [ebp+var_1A0]
.text:00001561                 mov     [ebp+eax*4+var_15C], ecx
.text:00001568                 mov     edx, [ebp+var_8]
.text:0000156B                 rol     edx, 5
.text:0000156E                 mov     eax, [ebp+var_C]
.text:00001571                 xor     eax, [ebp+var_10]
.text:00001574                 xor     eax, [ebp+var_14]
.text:00001577                 add     eax, [ebp+var_1A0]
.text:0000157D                 add     edx, [ebp+var_18]
.text:00001580                 lea     ecx, [edx+eax-359D3E2Ah]
.text:00001587                 mov     [ebp+var_18], ecx
.text:0000158A                 mov     edx, [ebp+var_C]
.text:0000158D                 rol     edx, 1Eh
.text:00001590                 mov     [ebp+var_C], edx
.text:00001593                 mov     eax, [ebp+var_170]
.text:00001599                 mov     ecx, [ebp+var_170]
.text:0000159F                 mov     edx, [ebp+eax*4+var_164]
.text:000015A6                 xor     edx, [ebp+ecx*4+var_178]
.text:000015AD                 mov     eax, [ebp+var_170]
.text:000015B3                 xor     edx, [ebp+eax*4+var_190]
.text:000015BA                 mov     ecx, [ebp+var_170]
.text:000015C0                 xor     edx, [ebp+ecx*4+var_198]
.text:000015C7                 rol     edx, 1
.text:000015C9                 mov     [ebp+var_1A4], edx
.text:000015CF                 mov     edx, [ebp+var_170]
.text:000015D5                 mov     eax, [ebp+var_1A4]
.text:000015DB                 mov     [ebp+edx*4+var_158], eax
.text:000015E2                 mov     ecx, [ebp+var_18]
.text:000015E5                 rol     ecx, 5
.text:000015E8                 mov     edx, [ebp+var_8]
.text:000015EB                 xor     edx, [ebp+var_C]
.text:000015EE                 xor     edx, [ebp+var_10]
.text:000015F1                 add     edx, [ebp+var_1A4]
.text:000015F7                 add     ecx, [ebp+var_14]
.text:000015FA                 lea     eax, [ecx+edx-359D3E2Ah]
.text:00001601                 mov     [ebp+var_14], eax
.text:00001604                 mov     ecx, [ebp+var_8]
.text:00001607                 rol     ecx, 1Eh
.text:0000160A                 mov     [ebp+var_8], ecx
.text:0000160D                 mov     edx, [ebp+var_170]
.text:00001613                 mov     eax, [ebp+var_170]
.text:00001619                 mov     ecx, [ebp+edx*4+var_160]
.text:00001620                 xor     ecx, [ebp+eax*4+var_174]
.text:00001627                 mov     edx, [ebp+var_170]
.text:0000162D                 xor     ecx, [ebp+edx*4+var_18C]
.text:00001634                 mov     eax, [ebp+var_170]
.text:0000163A                 xor     ecx, [ebp+eax*4+var_194]
.text:00001641                 rol     ecx, 1
.text:00001643                 mov     [ebp+var_1A8], ecx
.text:00001649                 mov     ecx, [ebp+var_170]
.text:0000164F                 mov     edx, [ebp+var_1A8]
.text:00001655                 mov     [ebp+ecx*4+var_154], edx
.text:0000165C                 mov     eax, [ebp+var_14]
.text:0000165F                 rol     eax, 5
.text:00001662                 mov     ecx, [ebp+var_18]
.text:00001665                 xor     ecx, [ebp+var_8]
.text:00001668                 xor     ecx, [ebp+var_C]
.text:0000166B                 add     ecx, [ebp+var_1A8]
.text:00001671                 add     eax, [ebp+var_10]
.text:00001674                 lea     edx, [eax+ecx-359D3E2Ah]
.text:0000167B                 mov     [ebp+var_10], edx
.text:0000167E                 mov     eax, [ebp+var_18]
.text:00001681                 rol     eax, 1Eh
.text:00001684                 mov     [ebp+var_18], eax
.text:00001687                 mov     ecx, [ebp+var_170]
.text:0000168D                 mov     edx, [ebp+var_170]
.text:00001693                 mov     eax, [ebp+ecx*4+var_15C]
.text:0000169A                 xor     eax, [ebp+edx*4+var_170]
.text:000016A1                 mov     ecx, [ebp+var_170]
.text:000016A7                 xor     eax, [ebp+ecx*4+var_188]
.text:000016AE                 mov     edx, [ebp+var_170]
.text:000016B4                 xor     eax, [ebp+edx*4+var_190]
.text:000016BB                 rol     eax, 1
.text:000016BD                 mov     [ebp+var_1AC], eax
.text:000016C3                 mov     eax, [ebp+var_170]
.text:000016C9                 mov     ecx, [ebp+var_1AC]
.text:000016CF                 mov     [ebp+eax*4+var_150], ecx
.text:000016D6                 mov     edx, [ebp+var_10]
.text:000016D9                 rol     edx, 5
.text:000016DC                 mov     eax, [ebp+var_14]
.text:000016DF                 xor     eax, [ebp+var_18]
.text:000016E2                 xor     eax, [ebp+var_8]
.text:000016E5                 add     eax, [ebp+var_1AC]
.text:000016EB                 add     edx, [ebp+var_C]
.text:000016EE                 lea     ecx, [edx+eax-359D3E2Ah]
.text:000016F5                 mov     [ebp+var_C], ecx
.text:000016F8                 mov     edx, [ebp+var_14]
.text:000016FB                 rol     edx, 1Eh
.text:000016FE                 mov     [ebp+var_14], edx
.text:00001701                 mov     eax, [ebp+var_170]
.text:00001707                 mov     ecx, [ebp+var_170]
.text:0000170D                 mov     edx, [ebp+eax*4+var_158]
.text:00001714                 xor     edx, [ebp+ecx*4+var_16C]
.text:0000171B                 mov     eax, [ebp+var_170]
.text:00001721                 xor     edx, [ebp+eax*4+var_184]
.text:00001728                 mov     ecx, [ebp+var_170]
.text:0000172E                 xor     edx, [ebp+ecx*4+var_18C]
.text:00001735                 rol     edx, 1
.text:00001737                 mov     [ebp+var_1B0], edx
.text:0000173D                 mov     edx, [ebp+var_170]
.text:00001743                 mov     eax, [ebp+var_1B0]
.text:00001749                 mov     [ebp+edx*4+var_14C], eax
.text:00001750                 mov     ecx, [ebp+var_C]
.text:00001753                 rol     ecx, 5
.text:00001756                 mov     edx, [ebp+var_10]
.text:00001759                 xor     edx, [ebp+var_14]
.text:0000175C                 xor     edx, [ebp+var_18]
.text:0000175F                 add     edx, [ebp+var_1B0]
.text:00001765                 add     ecx, [ebp+var_8]
.text:00001768                 lea     eax, [ecx+edx-359D3E2Ah]
.text:0000176F                 mov     [ebp+var_8], eax
.text:00001772                 mov     ecx, [ebp+var_10]
.text:00001775                 rol     ecx, 1Eh
.text:00001778                 mov     [ebp+var_10], ecx
.text:0000177B                 jmp     loc_14FD
.text:00001780 ; ---------------------------------------------------------------------------
.text:00001780
.text:00001780 loc_1780:                               ; CODE XREF: Sha1_UpdateBlock_Rar(x,x,x)+8E3j
.text:00001780                 mov     edx, [ebp+arg_0]
.text:00001783                 mov     eax, [edx]
.text:00001785                 add     eax, [ebp+var_8]
.text:00001788                 mov     ecx, [ebp+arg_0]
.text:0000178B                 mov     [ecx], eax
.text:0000178D                 mov     edx, [ebp+arg_0]
.text:00001790                 mov     eax, [edx+4]
.text:00001793                 add     eax, [ebp+var_C]
.text:00001796                 mov     ecx, [ebp+arg_0]
.text:00001799                 mov     [ecx+4], eax
.text:0000179C                 mov     edx, [ebp+arg_0]
.text:0000179F                 mov     eax, [edx+8]
.text:000017A2                 add     eax, [ebp+var_10]
.text:000017A5                 mov     ecx, [ebp+arg_0]
.text:000017A8                 mov     [ecx+8], eax
.text:000017AB                 mov     edx, [ebp+arg_0]
.text:000017AE                 mov     eax, [edx+0Ch]
.text:000017B1                 add     eax, [ebp+var_14]
.text:000017B4                 mov     ecx, [ebp+arg_0]
.text:000017B7                 mov     [ecx+0Ch], eax
.text:000017BA                 mov     edx, [ebp+arg_0]
.text:000017BD                 mov     eax, [edx+10h]
.text:000017C0                 add     eax, [ebp+var_18]
.text:000017C3                 mov     ecx, [ebp+arg_0]
.text:000017C6                 mov     [ecx+10h], eax
.text:000017C9                 cmp     [ebp+arg_8], 0
.text:000017CD                 jz      short loc_180B
.text:000017CF                 mov     [ebp+var_174], 0
.text:000017D9                 jmp     short loc_17EA
.text:000017DB ; ---------------------------------------------------------------------------
.text:000017DB
.text:000017DB loc_17DB:                               ; CODE XREF: Sha1_UpdateBlock_Rar(x,x,x)+BD9j
.text:000017DB                 mov     edx, [ebp+var_174]
.text:000017E1                 add     edx, 1
.text:000017E4                 mov     [ebp+var_174], edx
.text:000017EA
.text:000017EA loc_17EA:                               ; CODE XREF: Sha1_UpdateBlock_Rar(x,x,x)+BA9j
.text:000017EA                 cmp     [ebp+var_174], 10h
.text:000017F1                 jnb     short loc_180B
.text:000017F3                 mov     eax, [ebp+var_174]
.text:000017F9                 mov     ecx, [ebp+arg_4]
.text:000017FC                 mov     edx, [ebp+var_174]
.text:00001802                 mov     edx, [ebp+edx*4+var_5C]
.text:00001806                 mov     [ecx+eax*4], edx
.text:00001809                 jmp     short loc_17DB
.text:0000180B ; ---------------------------------------------------------------------------
.text:0000180B
.text:0000180B loc_180B:                               ; CODE XREF: Sha1_UpdateBlock_Rar(x,x,x)+B9Dj
.text:0000180B                                         ; Sha1_UpdateBlock_Rar(x,x,x)+BC1j
.text:0000180B                 push    edx
.text:0000180C                 mov     ecx, ebp
.text:0000180E                 push    eax
.text:0000180F                 lea     edx, $LN21
.text:00001815                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000181A                 pop     eax
.text:0000181B                 pop     edx
.text:0000181C                 pop     edi
.text:0000181D                 mov     ecx, [ebp+var_4]
.text:00001820                 xor     ecx, ebp
.text:00001822                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001827                 mov     esp, ebp
.text:00001829                 pop     ebp
.text:0000182A                 retn    0Ch
.text:0000182A _Sha1_UpdateBlock_Rar@12 endp
.text:0000182A
.text:0000182A ; ---------------------------------------------------------------------------
.text:0000182D                 align 10h
.text:00001830 $LN21           dd 1                    ; DATA XREF: Sha1_UpdateBlock_Rar(x,x,x)+BDFo
.text:00001834                 dd offset $LN20
.text:00001838 $LN20           dd 0FFFFFEA4h, 140h     ; DATA XREF: .text:00001834o
.text:00001840                 dd offset $LN19
.text:00001844 $LN19           dd 0CCCC0057h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:00001840o
.text:00001850
.text:00001850 ; =============== S U B R O U T I N E =======================================
.text:00001850
.text:00001850 ; Attributes: bp-based frame
.text:00001850
.text:00001850 ; __stdcall Sha1_Update(x, x, x)
.text:00001850                 public _Sha1_Update@12
.text:00001850 _Sha1_Update@12 proc near
.text:00001850
.text:00001850 var_14          = dword ptr -14h
.text:00001850 var_10          = dword ptr -10h
.text:00001850 var_C           = dword ptr -0Ch
.text:00001850 var_8           = dword ptr -8
.text:00001850 var_4           = dword ptr -4
.text:00001850 arg_0           = dword ptr  8
.text:00001850 arg_4           = dword ptr  0Ch
.text:00001850 arg_8           = dword ptr  10h
.text:00001850
.text:00001850                 push    ebp
.text:00001851                 mov     ebp, esp
.text:00001853                 sub     esp, 14h
.text:00001856                 mov     eax, 0CCCCCCCCh
.text:0000185B                 mov     [ebp+var_14], eax
.text:0000185E                 mov     [ebp+var_10], eax
.text:00001861                 mov     [ebp+var_C], eax
.text:00001864                 mov     [ebp+var_8], eax
.text:00001867                 mov     [ebp+var_4], eax
.text:0000186A                 cmp     [ebp+arg_8], 0
.text:0000186E                 jnz     short loc_1875
.text:00001870                 jmp     loc_1A3F
.text:00001875 ; ---------------------------------------------------------------------------
.text:00001875
.text:00001875 loc_1875:                               ; CODE XREF: Sha1_Update(x,x,x)+1Ej
.text:00001875                 mov     eax, [ebp+arg_0]
.text:00001878                 mov     ecx, [eax+18h]
.text:0000187B                 and     ecx, 3Fh
.text:0000187E                 mov     [ebp+var_4], ecx
.text:00001881                 mov     edx, [ebp+arg_8]
.text:00001884                 xor     eax, eax
.text:00001886                 mov     ecx, [ebp+arg_0]
.text:00001889                 add     edx, [ecx+18h]
.text:0000188C                 adc     eax, [ecx+1Ch]
.text:0000188F                 mov     ecx, [ebp+arg_0]
.text:00001892                 mov     [ecx+18h], edx
.text:00001895                 mov     [ecx+1Ch], eax
.text:00001898                 mov     edx, [ebp+var_4]
.text:0000189B                 and     edx, 3
.text:0000189E                 mov     [ebp+var_8], edx
.text:000018A1                 mov     eax, [ebp+var_4]
.text:000018A4                 shr     eax, 2
.text:000018A7                 mov     [ebp+var_4], eax
.text:000018AA                 cmp     [ebp+var_8], 0
.text:000018AE                 jz      loc_1941
.text:000018B4                 mov     ecx, [ebp+arg_4]
.text:000018B7                 movzx   edx, byte ptr [ecx]
.text:000018BA                 shl     edx, 18h
.text:000018BD                 mov     [ebp+var_C], edx
.text:000018C0                 mov     eax, [ebp+arg_8]
.text:000018C3                 sub     eax, 1
.text:000018C6                 mov     [ebp+arg_8], eax
.text:000018C9                 jz      short loc_190B
.text:000018CB                 cmp     [ebp+var_8], 3
.text:000018CF                 jnb     short loc_190B
.text:000018D1                 mov     ecx, [ebp+arg_4]
.text:000018D4                 movzx   edx, byte ptr [ecx+1]
.text:000018D8                 shl     edx, 10h
.text:000018DB                 or      edx, [ebp+var_C]
.text:000018DE                 mov     [ebp+var_C], edx
.text:000018E1                 mov     eax, [ebp+arg_8]
.text:000018E4                 sub     eax, 1
.text:000018E7                 mov     [ebp+arg_8], eax
.text:000018EA                 jz      short loc_190B
.text:000018EC                 cmp     [ebp+var_8], 2
.text:000018F0                 jnb     short loc_190B
.text:000018F2                 mov     ecx, [ebp+arg_4]
.text:000018F5                 movzx   edx, byte ptr [ecx+2]
.text:000018F9                 shl     edx, 8
.text:000018FC                 or      edx, [ebp+var_C]
.text:000018FF                 mov     [ebp+var_C], edx
.text:00001902                 mov     eax, [ebp+arg_8]
.text:00001905                 sub     eax, 1
.text:00001908                 mov     [ebp+arg_8], eax
.text:0000190B
.text:0000190B loc_190B:                               ; CODE XREF: Sha1_Update(x,x,x)+79j
.text:0000190B                                         ; Sha1_Update(x,x,x)+7Fj ...
.text:0000190B                 mov     ecx, 4
.text:00001910                 sub     ecx, [ebp+var_8]
.text:00001913                 add     ecx, [ebp+arg_4]
.text:00001916                 mov     [ebp+arg_4], ecx
.text:00001919                 mov     ecx, [ebp+var_8]
.text:0000191C                 shl     ecx, 3
.text:0000191F                 mov     edx, [ebp+var_C]
.text:00001922                 shr     edx, cl
.text:00001924                 mov     eax, [ebp+var_4]
.text:00001927                 mov     ecx, [ebp+arg_0]
.text:0000192A                 or      edx, [ecx+eax*4+20h]
.text:0000192E                 mov     eax, [ebp+var_4]
.text:00001931                 mov     ecx, [ebp+arg_0]
.text:00001934                 mov     [ecx+eax*4+20h], edx
.text:00001938                 mov     edx, [ebp+var_4]
.text:0000193B                 add     edx, 1
.text:0000193E                 mov     [ebp+var_4], edx
.text:00001941
.text:00001941 loc_1941:                               ; CODE XREF: Sha1_Update(x,x,x)+5Ej
.text:00001941                                         ; Sha1_Update(x,x,x)+19Fj
.text:00001941                 cmp     [ebp+var_4], 10h
.text:00001945                 jnz     short loc_19BB
.text:00001947
.text:00001947 loc_1947:                               ; CODE XREF: Sha1_Update(x,x,x):loc_19B2j
.text:00001947                 mov     eax, [ebp+arg_0]
.text:0000194A                 push    eax
.text:0000194B                 mov     ecx, [ebp+arg_0]
.text:0000194E                 add     ecx, 20h ; ' '
.text:00001951                 push    ecx
.text:00001952                 mov     edx, [ebp+arg_0]
.text:00001955                 push    edx
.text:00001956                 call    _Sha1_GetBlockDigest@12 ; Sha1_GetBlockDigest(x,x,x)
.text:0000195B                 cmp     [ebp+arg_8], 40h ; '@'
.text:0000195F                 jnb     short loc_1963
.text:00001961                 jmp     short loc_19B4
.text:00001963 ; ---------------------------------------------------------------------------
.text:00001963
.text:00001963 loc_1963:                               ; CODE XREF: Sha1_Update(x,x,x)+10Fj
.text:00001963                 mov     eax, [ebp+arg_8]
.text:00001966                 sub     eax, 40h ; '@'
.text:00001969                 mov     [ebp+arg_8], eax
.text:0000196C                 mov     [ebp+var_10], 0
.text:00001973                 jmp     short loc_197E
.text:00001975 ; ---------------------------------------------------------------------------
.text:00001975
.text:00001975 loc_1975:                               ; CODE XREF: Sha1_Update(x,x,x)+160j
.text:00001975                 mov     ecx, [ebp+var_10]
.text:00001978                 add     ecx, 2
.text:0000197B                 mov     [ebp+var_10], ecx
.text:0000197E
.text:0000197E loc_197E:                               ; CODE XREF: Sha1_Update(x,x,x)+123j
.text:0000197E                 cmp     [ebp+var_10], 10h
.text:00001982                 jnb     short loc_19B2
.text:00001984                 mov     edx, [ebp+arg_4]
.text:00001987                 mov     eax, [edx]
.text:00001989                 bswap   eax
.text:0000198B                 mov     ecx, [ebp+var_10]
.text:0000198E                 mov     edx, [ebp+arg_0]
.text:00001991                 mov     [edx+ecx*4+20h], eax
.text:00001995                 mov     eax, [ebp+arg_4]
.text:00001998                 mov     ecx, [eax+4]
.text:0000199B                 bswap   ecx
.text:0000199D                 mov     edx, [ebp+var_10]
.text:000019A0                 mov     eax, [ebp+arg_0]
.text:000019A3                 mov     [eax+edx*4+24h], ecx
.text:000019A7                 mov     ecx, [ebp+arg_4]
.text:000019AA                 add     ecx, 8
.text:000019AD                 mov     [ebp+arg_4], ecx
.text:000019B0                 jmp     short loc_1975
.text:000019B2 ; ---------------------------------------------------------------------------
.text:000019B2
.text:000019B2 loc_19B2:                               ; CODE XREF: Sha1_Update(x,x,x)+132j
.text:000019B2                 jmp     short loc_1947
.text:000019B4 ; ---------------------------------------------------------------------------
.text:000019B4
.text:000019B4 loc_19B4:                               ; CODE XREF: Sha1_Update(x,x,x)+111j
.text:000019B4                 mov     [ebp+var_4], 0
.text:000019BB
.text:000019BB loc_19BB:                               ; CODE XREF: Sha1_Update(x,x,x)+F5j
.text:000019BB                 cmp     [ebp+arg_8], 4
.text:000019BF                 jnb     short loc_19C3
.text:000019C1                 jmp     short loc_19F4
.text:000019C3 ; ---------------------------------------------------------------------------
.text:000019C3
.text:000019C3 loc_19C3:                               ; CODE XREF: Sha1_Update(x,x,x)+16Fj
.text:000019C3                 mov     edx, [ebp+arg_4]
.text:000019C6                 mov     eax, [edx]
.text:000019C8                 bswap   eax
.text:000019CA                 mov     ecx, [ebp+var_4]
.text:000019CD                 mov     edx, [ebp+arg_0]
.text:000019D0                 mov     [edx+ecx*4+20h], eax
.text:000019D4                 mov     eax, [ebp+arg_4]
.text:000019D7                 add     eax, 4
.text:000019DA                 mov     [ebp+arg_4], eax
.text:000019DD                 mov     ecx, [ebp+arg_8]
.text:000019E0                 sub     ecx, 4
.text:000019E3                 mov     [ebp+arg_8], ecx
.text:000019E6                 mov     edx, [ebp+var_4]
.text:000019E9                 add     edx, 1
.text:000019EC                 mov     [ebp+var_4], edx
.text:000019EF                 jmp     loc_1941
.text:000019F4 ; ---------------------------------------------------------------------------
.text:000019F4
.text:000019F4 loc_19F4:                               ; CODE XREF: Sha1_Update(x,x,x)+171j
.text:000019F4                 cmp     [ebp+arg_8], 0
.text:000019F8                 jz      short loc_1A3F
.text:000019FA                 mov     eax, [ebp+arg_4]
.text:000019FD                 movzx   ecx, byte ptr [eax]
.text:00001A00                 shl     ecx, 18h
.text:00001A03                 mov     [ebp+var_14], ecx
.text:00001A06                 cmp     [ebp+arg_8], 1
.text:00001A0A                 jbe     short loc_1A32
.text:00001A0C                 mov     edx, [ebp+arg_4]
.text:00001A0F                 movzx   eax, byte ptr [edx+1]
.text:00001A13                 shl     eax, 10h
.text:00001A16                 or      eax, [ebp+var_14]
.text:00001A19                 mov     [ebp+var_14], eax
.text:00001A1C                 cmp     [ebp+arg_8], 2
.text:00001A20                 jbe     short loc_1A32
.text:00001A22                 mov     ecx, [ebp+arg_4]
.text:00001A25                 movzx   edx, byte ptr [ecx+2]
.text:00001A29                 shl     edx, 8
.text:00001A2C                 or      edx, [ebp+var_14]
.text:00001A2F                 mov     [ebp+var_14], edx
.text:00001A32
.text:00001A32 loc_1A32:                               ; CODE XREF: Sha1_Update(x,x,x)+1BAj
.text:00001A32                                         ; Sha1_Update(x,x,x)+1D0j
.text:00001A32                 mov     eax, [ebp+var_4]
.text:00001A35                 mov     ecx, [ebp+arg_0]
.text:00001A38                 mov     edx, [ebp+var_14]
.text:00001A3B                 mov     [ecx+eax*4+20h], edx
.text:00001A3F
.text:00001A3F loc_1A3F:                               ; CODE XREF: Sha1_Update(x,x,x)+20j
.text:00001A3F                                         ; Sha1_Update(x,x,x)+1A8j
.text:00001A3F                 add     esp, 14h
.text:00001A42                 cmp     ebp, esp
.text:00001A44                 call    __RTC_CheckEsp
.text:00001A49                 mov     esp, ebp
.text:00001A4B                 pop     ebp
.text:00001A4C                 retn    0Ch
.text:00001A4C _Sha1_Update@12 endp
.text:00001A4C
.text:00001A4C ; ---------------------------------------------------------------------------
.text:00001A4F                 align 10h
.text:00001A50
.text:00001A50 ; =============== S U B R O U T I N E =======================================
.text:00001A50
.text:00001A50 ; Attributes: bp-based frame
.text:00001A50
.text:00001A50 ; __stdcall Sha1_Update_Rar(x, x, x, x)
.text:00001A50                 public _Sha1_Update_Rar@16
.text:00001A50 _Sha1_Update_Rar@16 proc near
.text:00001A50
.text:00001A50 var_24          = dword ptr -24h
.text:00001A50 var_20          = dword ptr -20h
.text:00001A50 var_1C          = dword ptr -1Ch
.text:00001A50 var_18          = dword ptr -18h
.text:00001A50 var_14          = dword ptr -14h
.text:00001A50 var_10          = dword ptr -10h
.text:00001A50 var_C           = dword ptr -0Ch
.text:00001A50 var_8           = dword ptr -8
.text:00001A50 var_4           = dword ptr -4
.text:00001A50 arg_0           = dword ptr  8
.text:00001A50 arg_4           = dword ptr  0Ch
.text:00001A50 arg_8           = dword ptr  10h
.text:00001A50 arg_C           = dword ptr  14h
.text:00001A50
.text:00001A50                 push    ebp
.text:00001A51                 mov     ebp, esp
.text:00001A53                 sub     esp, 24h
.text:00001A56                 mov     eax, 0CCCCCCCCh
.text:00001A5B                 mov     [ebp+var_24], eax
.text:00001A5E                 mov     [ebp+var_20], eax
.text:00001A61                 mov     [ebp+var_1C], eax
.text:00001A64                 mov     [ebp+var_18], eax
.text:00001A67                 mov     [ebp+var_14], eax
.text:00001A6A                 mov     [ebp+var_10], eax
.text:00001A6D                 mov     [ebp+var_C], eax
.text:00001A70                 mov     [ebp+var_8], eax
.text:00001A73                 mov     [ebp+var_4], eax
.text:00001A76                 mov     [ebp+var_4], 0
.text:00001A7D                 mov     eax, [ebp+arg_0]
.text:00001A80                 mov     ecx, [eax+18h]
.text:00001A83                 and     ecx, 3Fh
.text:00001A86                 mov     [ebp+var_8], ecx
.text:00001A89                 mov     edx, [ebp+arg_8]
.text:00001A8C                 xor     eax, eax
.text:00001A8E                 mov     ecx, [ebp+arg_0]
.text:00001A91                 add     edx, [ecx+18h]
.text:00001A94                 adc     eax, [ecx+1Ch]
.text:00001A97                 mov     ecx, [ebp+arg_0]
.text:00001A9A                 mov     [ecx+18h], edx
.text:00001A9D                 mov     [ecx+1Ch], eax
.text:00001AA0
.text:00001AA0 loc_1AA0:                               ; CODE XREF: Sha1_Update_Rar(x,x,x,x)+B8j
.text:00001AA0                                         ; Sha1_Update_Rar(x,x,x,x):loc_1B80j
.text:00001AA0                 mov     edx, [ebp+arg_8]
.text:00001AA3                 mov     [ebp+var_24], edx
.text:00001AA6                 mov     eax, [ebp+arg_8]
.text:00001AA9                 sub     eax, 1
.text:00001AAC                 mov     [ebp+arg_8], eax
.text:00001AAF                 cmp     [ebp+var_24], 0
.text:00001AB3                 jz      loc_1B85
.text:00001AB9                 mov     ecx, [ebp+var_8]
.text:00001ABC                 and     ecx, 3
.text:00001ABF                 mov     [ebp+var_C], ecx
.text:00001AC2                 mov     edx, [ebp+arg_4]
.text:00001AC5                 movzx   eax, byte ptr [edx]
.text:00001AC8                 mov     ecx, 3
.text:00001ACD                 sub     ecx, [ebp+var_C]
.text:00001AD0                 shl     ecx, 3
.text:00001AD3                 shl     eax, cl
.text:00001AD5                 mov     [ebp+var_10], eax
.text:00001AD8                 mov     ecx, [ebp+arg_4]
.text:00001ADB                 add     ecx, 1
.text:00001ADE                 mov     [ebp+arg_4], ecx
.text:00001AE1                 mov     edx, [ebp+var_8]
.text:00001AE4                 shr     edx, 2
.text:00001AE7                 mov     eax, [ebp+arg_0]
.text:00001AEA                 lea     ecx, [eax+edx*4+20h]
.text:00001AEE                 mov     [ebp+var_14], ecx
.text:00001AF1                 mov     edx, [ebp+var_8]
.text:00001AF4                 add     edx, 1
.text:00001AF7                 mov     [ebp+var_8], edx
.text:00001AFA                 cmp     [ebp+var_C], 0
.text:00001AFE                 jnz     short loc_1B0A
.text:00001B00                 mov     eax, [ebp+var_14]
.text:00001B03                 mov     ecx, [ebp+var_10]
.text:00001B06                 mov     [eax], ecx
.text:00001B08                 jmp     short loc_1AA0
.text:00001B0A ; ---------------------------------------------------------------------------
.text:00001B0A
.text:00001B0A loc_1B0A:                               ; CODE XREF: Sha1_Update_Rar(x,x,x,x)+AEj
.text:00001B0A                 mov     edx, [ebp+var_14]
.text:00001B0D                 mov     eax, [edx]
.text:00001B0F                 or      eax, [ebp+var_10]
.text:00001B12                 mov     ecx, [ebp+var_14]
.text:00001B15                 mov     [ecx], eax
.text:00001B17                 cmp     [ebp+var_8], 40h ; '@'
.text:00001B1B                 jnz     short loc_1B80
.text:00001B1D                 mov     [ebp+var_8], 0
.text:00001B24                 mov     edx, [ebp+var_4]
.text:00001B27                 push    edx
.text:00001B28                 mov     eax, [ebp+arg_0]
.text:00001B2B                 add     eax, 20h ; ' '
.text:00001B2E                 push    eax
.text:00001B2F                 mov     ecx, [ebp+arg_0]
.text:00001B32                 push    ecx
.text:00001B33                 call    _Sha1_UpdateBlock_Rar@12 ; Sha1_UpdateBlock_Rar(x,x,x)
.text:00001B38                 cmp     [ebp+var_4], 0
.text:00001B3C                 jz      short loc_1B7A
.text:00001B3E                 mov     [ebp+var_18], 0
.text:00001B45                 jmp     short loc_1B50
.text:00001B47 ; ---------------------------------------------------------------------------
.text:00001B47
.text:00001B47 loc_1B47:                               ; CODE XREF: Sha1_Update_Rar(x,x,x,x)+128j
.text:00001B47                 mov     edx, [ebp+var_18]
.text:00001B4A                 add     edx, 1
.text:00001B4D                 mov     [ebp+var_18], edx
.text:00001B50
.text:00001B50 loc_1B50:                               ; CODE XREF: Sha1_Update_Rar(x,x,x,x)+F5j
.text:00001B50                 cmp     [ebp+var_18], 10h
.text:00001B54                 jnb     short loc_1B7A
.text:00001B56                 mov     eax, [ebp+var_18]
.text:00001B59                 mov     ecx, [ebp+arg_0]
.text:00001B5C                 mov     edx, [ecx+eax*4+20h]
.text:00001B60                 mov     [ebp+var_1C], edx
.text:00001B63                 mov     eax, [ebp+var_18]
.text:00001B66                 mov     ecx, [ebp+arg_4]
.text:00001B69                 lea     edx, [ecx+eax*4-40h]
.text:00001B6D                 mov     [ebp+var_20], edx
.text:00001B70                 mov     eax, [ebp+var_20]
.text:00001B73                 mov     ecx, [ebp+var_1C]
.text:00001B76                 mov     [eax], ecx
.text:00001B78                 jmp     short loc_1B47
.text:00001B7A ; ---------------------------------------------------------------------------
.text:00001B7A
.text:00001B7A loc_1B7A:                               ; CODE XREF: Sha1_Update_Rar(x,x,x,x)+ECj
.text:00001B7A                                         ; Sha1_Update_Rar(x,x,x,x)+104j
.text:00001B7A                 mov     edx, [ebp+arg_C]
.text:00001B7D                 mov     [ebp+var_4], edx
.text:00001B80
.text:00001B80 loc_1B80:                               ; CODE XREF: Sha1_Update_Rar(x,x,x,x)+CBj
.text:00001B80                 jmp     loc_1AA0
.text:00001B85 ; ---------------------------------------------------------------------------
.text:00001B85
.text:00001B85 loc_1B85:                               ; CODE XREF: Sha1_Update_Rar(x,x,x,x)+63j
.text:00001B85                 add     esp, 24h
.text:00001B88                 cmp     ebp, esp
.text:00001B8A                 call    __RTC_CheckEsp
.text:00001B8F                 mov     esp, ebp
.text:00001B91                 pop     ebp
.text:00001B92                 retn    10h
.text:00001B92 _Sha1_Update_Rar@16 endp
.text:00001B92
.text:00001B92 ; ---------------------------------------------------------------------------
.text:00001B95                 align 10h
.text:00001BA0
.text:00001BA0 ; =============== S U B R O U T I N E =======================================
.text:00001BA0
.text:00001BA0 ; Attributes: bp-based frame
.text:00001BA0
.text:00001BA0 ; __stdcall Sha1_Final(x, x)
.text:00001BA0                 public _Sha1_Final@8
.text:00001BA0 _Sha1_Final@8   proc near
.text:00001BA0
.text:00001BA0 var_1C          = dword ptr -1Ch
.text:00001BA0 var_18          = dword ptr -18h
.text:00001BA0 var_14          = dword ptr -14h
.text:00001BA0 var_10          = dword ptr -10h
.text:00001BA0 var_C           = dword ptr -0Ch
.text:00001BA0 var_8           = dword ptr -8
.text:00001BA0 var_4           = dword ptr -4
.text:00001BA0 arg_0           = dword ptr  8
.text:00001BA0 arg_4           = dword ptr  0Ch
.text:00001BA0
.text:00001BA0                 push    ebp
.text:00001BA1                 mov     ebp, esp
.text:00001BA3                 sub     esp, 1Ch
.text:00001BA6                 mov     eax, 0CCCCCCCCh
.text:00001BAB                 mov     [ebp+var_1C], eax
.text:00001BAE                 mov     [ebp+var_18], eax
.text:00001BB1                 mov     [ebp+var_14], eax
.text:00001BB4                 mov     [ebp+var_10], eax
.text:00001BB7                 mov     [ebp+var_C], eax
.text:00001BBA                 mov     [ebp+var_8], eax
.text:00001BBD                 mov     [ebp+var_4], eax
.text:00001BC0                 mov     eax, [ebp+arg_0]
.text:00001BC3                 mov     ecx, [eax+18h]
.text:00001BC6                 and     ecx, 3Fh
.text:00001BC9                 mov     [ebp+var_4], ecx
.text:00001BCC                 mov     edx, [ebp+var_4]
.text:00001BCF                 and     edx, 3
.text:00001BD2                 mov     [ebp+var_8], edx
.text:00001BD5                 mov     eax, [ebp+var_4]
.text:00001BD8                 shr     eax, 2
.text:00001BDB                 mov     [ebp+var_4], eax
.text:00001BDE                 mov     [ebp+var_14], 0
.text:00001BE5                 cmp     [ebp+var_8], 0
.text:00001BE9                 jz      short loc_1BF8
.text:00001BEB                 mov     ecx, [ebp+var_4]
.text:00001BEE                 mov     edx, [ebp+arg_0]
.text:00001BF1                 mov     eax, [edx+ecx*4+20h]
.text:00001BF5                 mov     [ebp+var_14], eax
.text:00001BF8
.text:00001BF8 loc_1BF8:                               ; CODE XREF: Sha1_Final(x,x)+49j
.text:00001BF8                 mov     ecx, [ebp+var_8]
.text:00001BFB                 shl     ecx, 3
.text:00001BFE                 mov     edx, 80000000h
.text:00001C03                 shr     edx, cl
.text:00001C05                 or      edx, [ebp+var_14]
.text:00001C08                 mov     eax, [ebp+var_4]
.text:00001C0B                 mov     ecx, [ebp+arg_0]
.text:00001C0E                 mov     [ecx+eax*4+20h], edx
.text:00001C12                 mov     edx, [ebp+var_4]
.text:00001C15                 add     edx, 1
.text:00001C18                 mov     [ebp+var_4], edx
.text:00001C1B
.text:00001C1B loc_1C1B:                               ; CODE XREF: Sha1_Final(x,x)+B7j
.text:00001C1B                 cmp     [ebp+var_4], 0Eh
.text:00001C1F                 jz      short loc_1C59
.text:00001C21                 mov     eax, [ebp+var_4]
.text:00001C24                 and     eax, 0Fh
.text:00001C27                 mov     [ebp+var_4], eax
.text:00001C2A                 jnz     short loc_1C40
.text:00001C2C                 mov     ecx, [ebp+arg_0]
.text:00001C2F                 push    ecx
.text:00001C30                 mov     edx, [ebp+arg_0]
.text:00001C33                 add     edx, 20h ; ' '
.text:00001C36                 push    edx
.text:00001C37                 mov     eax, [ebp+arg_0]
.text:00001C3A                 push    eax
.text:00001C3B                 call    _Sha1_GetBlockDigest@12 ; Sha1_GetBlockDigest(x,x,x)
.text:00001C40
.text:00001C40 loc_1C40:                               ; CODE XREF: Sha1_Final(x,x)+8Aj
.text:00001C40                 mov     ecx, [ebp+var_4]
.text:00001C43                 mov     edx, [ebp+arg_0]
.text:00001C46                 mov     dword ptr [edx+ecx*4+20h], 0
.text:00001C4E                 mov     eax, [ebp+var_4]
.text:00001C51                 add     eax, 1
.text:00001C54                 mov     [ebp+var_4], eax
.text:00001C57                 jmp     short loc_1C1B
.text:00001C59 ; ---------------------------------------------------------------------------
.text:00001C59
.text:00001C59 loc_1C59:                               ; CODE XREF: Sha1_Final(x,x)+7Fj
.text:00001C59                 mov     ecx, [ebp+arg_0]
.text:00001C5C                 mov     eax, [ecx+18h]
.text:00001C5F                 mov     edx, [ecx+1Ch]
.text:00001C62                 mov     cl, 3
.text:00001C64                 call    __allshl
.text:00001C69                 mov     [ebp+var_10], eax
.text:00001C6C                 mov     [ebp+var_C], edx
.text:00001C6F                 mov     eax, [ebp+var_10]
.text:00001C72                 mov     edx, [ebp+var_C]
.text:00001C75                 mov     cl, 20h ; ' '
.text:00001C77                 call    __aullshr
.text:00001C7C                 mov     edx, [ebp+arg_0]
.text:00001C7F                 mov     [edx+58h], eax
.text:00001C82                 mov     eax, [ebp+var_10]
.text:00001C85                 mov     ecx, [ebp+arg_0]
.text:00001C88                 mov     [ecx+5Ch], eax
.text:00001C8B                 mov     edx, [ebp+arg_0]
.text:00001C8E                 push    edx
.text:00001C8F                 mov     eax, [ebp+arg_0]
.text:00001C92                 add     eax, 20h ; ' '
.text:00001C95                 push    eax
.text:00001C96                 mov     ecx, [ebp+arg_0]
.text:00001C99                 push    ecx
.text:00001C9A                 call    _Sha1_GetBlockDigest@12 ; Sha1_GetBlockDigest(x,x,x)
.text:00001C9F                 mov     [ebp+var_18], 0
.text:00001CA6                 jmp     short loc_1CB1
.text:00001CA8 ; ---------------------------------------------------------------------------
.text:00001CA8
.text:00001CA8 loc_1CA8:                               ; CODE XREF: Sha1_Final(x,x)+136j
.text:00001CA8                 mov     edx, [ebp+var_18]
.text:00001CAB                 add     edx, 1
.text:00001CAE                 mov     [ebp+var_18], edx
.text:00001CB1
.text:00001CB1 loc_1CB1:                               ; CODE XREF: Sha1_Final(x,x)+106j
.text:00001CB1                 cmp     [ebp+var_18], 5
.text:00001CB5                 jnb     short loc_1CD8
.text:00001CB7                 mov     eax, [ebp+var_18]
.text:00001CBA                 mov     ecx, [ebp+arg_0]
.text:00001CBD                 mov     edx, [ecx+eax*4]
.text:00001CC0                 mov     [ebp+var_1C], edx
.text:00001CC3                 mov     eax, [ebp+var_1C]
.text:00001CC6                 bswap   eax
.text:00001CC8                 mov     ecx, [ebp+arg_4]
.text:00001CCB                 mov     [ecx], eax
.text:00001CCD                 mov     edx, [ebp+arg_4]
.text:00001CD0                 add     edx, 4
.text:00001CD3                 mov     [ebp+arg_4], edx
.text:00001CD6                 jmp     short loc_1CA8
.text:00001CD8 ; ---------------------------------------------------------------------------
.text:00001CD8
.text:00001CD8 loc_1CD8:                               ; CODE XREF: Sha1_Final(x,x)+115j
.text:00001CD8                 mov     eax, [ebp+arg_0]
.text:00001CDB                 push    eax
.text:00001CDC                 call    _Sha1_Init@4    ; Sha1_Init(x)
.text:00001CE1                 add     esp, 1Ch
.text:00001CE4                 cmp     ebp, esp
.text:00001CE6                 call    __RTC_CheckEsp
.text:00001CEB                 mov     esp, ebp
.text:00001CED                 pop     ebp
.text:00001CEE                 retn    8
.text:00001CEE _Sha1_Final@8   endp
.text:00001CEE
.text:00001CEE ; ---------------------------------------------------------------------------
.text:00001CF1                 align 10h
.text:00001D00
.text:00001D00 ; =============== S U B R O U T I N E =======================================
.text:00001D00
.text:00001D00 ; Attributes: bp-based frame
.text:00001D00
.text:00001D00 ; __stdcall Sha1_32_PrepareBlock(x, x, x)
.text:00001D00                 public _Sha1_32_PrepareBlock@12
.text:00001D00 _Sha1_32_PrepareBlock@12 proc near
.text:00001D00
.text:00001D00 var_8           = dword ptr -8
.text:00001D00 var_4           = dword ptr -4
.text:00001D00 arg_0           = dword ptr  8
.text:00001D00 arg_4           = dword ptr  0Ch
.text:00001D00 arg_8           = dword ptr  10h
.text:00001D00
.text:00001D00                 push    ebp
.text:00001D01                 mov     ebp, esp
.text:00001D03                 sub     esp, 8
.text:00001D06                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001D0D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001D14                 mov     eax, [ebp+arg_8]
.text:00001D17                 xor     edx, edx
.text:00001D19                 mov     ecx, [ebp+arg_0]
.text:00001D1C                 add     eax, [ecx+18h]
.text:00001D1F                 adc     edx, [ecx+1Ch]
.text:00001D22                 mov     cl, 5
.text:00001D24                 call    __allshl
.text:00001D29                 mov     [ebp+var_8], eax
.text:00001D2C                 mov     [ebp+var_4], edx
.text:00001D2F                 mov     eax, [ebp+var_8]
.text:00001D32                 mov     edx, [ebp+var_4]
.text:00001D35                 mov     cl, 20h ; ' '
.text:00001D37                 call    __aullshr
.text:00001D3C                 mov     edx, [ebp+arg_4]
.text:00001D3F                 mov     [edx+38h], eax
.text:00001D42                 mov     eax, [ebp+var_8]
.text:00001D45                 mov     ecx, [ebp+arg_4]
.text:00001D48                 mov     [ecx+3Ch], eax
.text:00001D4B                 mov     edx, [ebp+arg_8]
.text:00001D4E                 mov     eax, [ebp+arg_4]
.text:00001D51                 mov     dword ptr [eax+edx*4], 80000000h
.text:00001D58                 mov     ecx, [ebp+arg_8]
.text:00001D5B                 add     ecx, 1
.text:00001D5E                 mov     [ebp+arg_8], ecx
.text:00001D61
.text:00001D61 loc_1D61:                               ; CODE XREF: Sha1_32_PrepareBlock(x,x,x)+7Dj
.text:00001D61                 cmp     [ebp+arg_8], 0Eh
.text:00001D65                 jz      short loc_1D7F
.text:00001D67                 mov     edx, [ebp+arg_8]
.text:00001D6A                 mov     eax, [ebp+arg_4]
.text:00001D6D                 mov     dword ptr [eax+edx*4], 0
.text:00001D74                 mov     ecx, [ebp+arg_8]
.text:00001D77                 add     ecx, 1
.text:00001D7A                 mov     [ebp+arg_8], ecx
.text:00001D7D                 jmp     short loc_1D61
.text:00001D7F ; ---------------------------------------------------------------------------
.text:00001D7F
.text:00001D7F loc_1D7F:                               ; CODE XREF: Sha1_32_PrepareBlock(x,x,x)+65j
.text:00001D7F                 add     esp, 8
.text:00001D82                 cmp     ebp, esp
.text:00001D84                 call    __RTC_CheckEsp
.text:00001D89                 mov     esp, ebp
.text:00001D8B                 pop     ebp
.text:00001D8C                 retn    0Ch
.text:00001D8C _Sha1_32_PrepareBlock@12 endp
.text:00001D8C
.text:00001D8C ; ---------------------------------------------------------------------------
.text:00001D8F                 align 10h
.text:00001D90
.text:00001D90 ; =============== S U B R O U T I N E =======================================
.text:00001D90
.text:00001D90 ; Attributes: bp-based frame
.text:00001D90
.text:00001D90 ; __stdcall Sha1_32_Update(x, x, x)
.text:00001D90                 public _Sha1_32_Update@12
.text:00001D90 _Sha1_32_Update@12 proc near
.text:00001D90
.text:00001D90 var_8           = dword ptr -8
.text:00001D90 var_4           = dword ptr -4
.text:00001D90 arg_0           = dword ptr  8
.text:00001D90 arg_4           = dword ptr  0Ch
.text:00001D90 arg_8           = dword ptr  10h
.text:00001D90
.text:00001D90                 push    ebp
.text:00001D91                 mov     ebp, esp
.text:00001D93                 sub     esp, 8
.text:00001D96                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001D9D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001DA4                 mov     eax, [ebp+arg_0]
.text:00001DA7                 mov     ecx, [eax+18h]
.text:00001DAA                 and     ecx, 0Fh
.text:00001DAD                 mov     [ebp+var_4], ecx
.text:00001DB0                 mov     edx, [ebp+arg_8]
.text:00001DB3                 xor     eax, eax
.text:00001DB5                 mov     ecx, [ebp+arg_0]
.text:00001DB8                 add     edx, [ecx+18h]
.text:00001DBB                 adc     eax, [ecx+1Ch]
.text:00001DBE                 mov     ecx, [ebp+arg_0]
.text:00001DC1                 mov     [ecx+18h], edx
.text:00001DC4                 mov     [ecx+1Ch], eax
.text:00001DC7
.text:00001DC7 loc_1DC7:                               ; CODE XREF: Sha1_32_Update(x,x,x):loc_1E1Ej
.text:00001DC7                 mov     edx, [ebp+arg_8]
.text:00001DCA                 mov     [ebp+var_8], edx
.text:00001DCD                 mov     eax, [ebp+arg_8]
.text:00001DD0                 sub     eax, 1
.text:00001DD3                 mov     [ebp+arg_8], eax
.text:00001DD6                 cmp     [ebp+var_8], 0
.text:00001DDA                 jz      short loc_1E20
.text:00001DDC                 mov     ecx, [ebp+var_4]
.text:00001DDF                 mov     edx, [ebp+arg_0]
.text:00001DE2                 mov     eax, [ebp+arg_4]
.text:00001DE5                 mov     eax, [eax]
.text:00001DE7                 mov     [edx+ecx*4+20h], eax
.text:00001DEB                 mov     ecx, [ebp+var_4]
.text:00001DEE                 add     ecx, 1
.text:00001DF1                 mov     [ebp+var_4], ecx
.text:00001DF4                 mov     edx, [ebp+arg_4]
.text:00001DF7                 add     edx, 4
.text:00001DFA                 mov     [ebp+arg_4], edx
.text:00001DFD                 cmp     [ebp+var_4], 10h
.text:00001E01                 jnz     short loc_1E1E
.text:00001E03                 mov     [ebp+var_4], 0
.text:00001E0A                 mov     eax, [ebp+arg_0]
.text:00001E0D                 push    eax
.text:00001E0E                 mov     ecx, [ebp+arg_0]
.text:00001E11                 add     ecx, 20h ; ' '
.text:00001E14                 push    ecx
.text:00001E15                 mov     edx, [ebp+arg_0]
.text:00001E18                 push    edx
.text:00001E19                 call    _Sha1_GetBlockDigest@12 ; Sha1_GetBlockDigest(x,x,x)
.text:00001E1E
.text:00001E1E loc_1E1E:                               ; CODE XREF: Sha1_32_Update(x,x,x)+71j
.text:00001E1E                 jmp     short loc_1DC7
.text:00001E20 ; ---------------------------------------------------------------------------
.text:00001E20
.text:00001E20 loc_1E20:                               ; CODE XREF: Sha1_32_Update(x,x,x)+4Aj
.text:00001E20                 add     esp, 8
.text:00001E23                 cmp     ebp, esp
.text:00001E25                 call    __RTC_CheckEsp
.text:00001E2A                 mov     esp, ebp
.text:00001E2C                 pop     ebp
.text:00001E2D                 retn    0Ch
.text:00001E2D _Sha1_32_Update@12 endp
.text:00001E2D
.text:00001E30
.text:00001E30 ; =============== S U B R O U T I N E =======================================
.text:00001E30
.text:00001E30 ; Attributes: bp-based frame
.text:00001E30
.text:00001E30 ; __stdcall Sha1_32_Final(x, x)
.text:00001E30                 public _Sha1_32_Final@8
.text:00001E30 _Sha1_32_Final@8 proc near
.text:00001E30
.text:00001E30 var_C           = dword ptr -0Ch
.text:00001E30 var_8           = dword ptr -8
.text:00001E30 var_4           = dword ptr -4
.text:00001E30 arg_0           = dword ptr  8
.text:00001E30 arg_4           = dword ptr  0Ch
.text:00001E30
.text:00001E30                 push    ebp
.text:00001E31                 mov     ebp, esp
.text:00001E33                 sub     esp, 0Ch
.text:00001E36                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001E3D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001E44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001E4B                 mov     eax, [ebp+arg_0]
.text:00001E4E                 mov     ecx, [eax+18h]
.text:00001E51                 and     ecx, 0Fh
.text:00001E54                 mov     [ebp+var_C], ecx
.text:00001E57                 mov     edx, [ebp+var_C]
.text:00001E5A                 mov     eax, [ebp+arg_0]
.text:00001E5D                 mov     dword ptr [eax+edx*4+20h], 80000000h
.text:00001E65                 mov     ecx, [ebp+var_C]
.text:00001E68                 add     ecx, 1
.text:00001E6B                 mov     [ebp+var_C], ecx
.text:00001E6E
.text:00001E6E loc_1E6E:                               ; CODE XREF: Sha1_32_Final(x,x)+7Aj
.text:00001E6E                 cmp     [ebp+var_C], 0Eh
.text:00001E72                 jz      short loc_1EAC
.text:00001E74                 mov     edx, [ebp+var_C]
.text:00001E77                 and     edx, 0Fh
.text:00001E7A                 mov     [ebp+var_C], edx
.text:00001E7D                 jnz     short loc_1E93
.text:00001E7F                 mov     eax, [ebp+arg_0]
.text:00001E82                 push    eax
.text:00001E83                 mov     ecx, [ebp+arg_0]
.text:00001E86                 add     ecx, 20h ; ' '
.text:00001E89                 push    ecx
.text:00001E8A                 mov     edx, [ebp+arg_0]
.text:00001E8D                 push    edx
.text:00001E8E                 call    _Sha1_GetBlockDigest@12 ; Sha1_GetBlockDigest(x,x,x)
.text:00001E93
.text:00001E93 loc_1E93:                               ; CODE XREF: Sha1_32_Final(x,x)+4Dj
.text:00001E93                 mov     eax, [ebp+var_C]
.text:00001E96                 mov     ecx, [ebp+arg_0]
.text:00001E99                 mov     dword ptr [ecx+eax*4+20h], 0
.text:00001EA1                 mov     edx, [ebp+var_C]
.text:00001EA4                 add     edx, 1
.text:00001EA7                 mov     [ebp+var_C], edx
.text:00001EAA                 jmp     short loc_1E6E
.text:00001EAC ; ---------------------------------------------------------------------------
.text:00001EAC
.text:00001EAC loc_1EAC:                               ; CODE XREF: Sha1_32_Final(x,x)+42j
.text:00001EAC                 mov     ecx, [ebp+arg_0]
.text:00001EAF                 mov     eax, [ecx+18h]
.text:00001EB2                 mov     edx, [ecx+1Ch]
.text:00001EB5                 mov     cl, 5
.text:00001EB7                 call    __allshl
.text:00001EBC                 mov     [ebp+var_8], eax
.text:00001EBF                 mov     [ebp+var_4], edx
.text:00001EC2                 mov     eax, [ebp+var_8]
.text:00001EC5                 mov     edx, [ebp+var_4]
.text:00001EC8                 mov     cl, 20h ; ' '
.text:00001ECA                 call    __aullshr
.text:00001ECF                 mov     edx, [ebp+arg_0]
.text:00001ED2                 mov     [edx+58h], eax
.text:00001ED5                 mov     eax, [ebp+var_8]
.text:00001ED8                 mov     ecx, [ebp+arg_0]
.text:00001EDB                 mov     [ecx+5Ch], eax
.text:00001EDE                 mov     edx, [ebp+arg_4]
.text:00001EE1                 push    edx
.text:00001EE2                 mov     eax, [ebp+arg_0]
.text:00001EE5                 add     eax, 20h ; ' '
.text:00001EE8                 push    eax
.text:00001EE9                 mov     ecx, [ebp+arg_0]
.text:00001EEC                 push    ecx
.text:00001EED                 call    _Sha1_GetBlockDigest@12 ; Sha1_GetBlockDigest(x,x,x)
.text:00001EF2                 mov     edx, [ebp+arg_0]
.text:00001EF5                 push    edx
.text:00001EF6                 call    _Sha1_Init@4    ; Sha1_Init(x)
.text:00001EFB                 add     esp, 0Ch
.text:00001EFE                 cmp     ebp, esp
.text:00001F00                 call    __RTC_CheckEsp
.text:00001F05                 mov     esp, ebp
.text:00001F07                 pop     ebp
.text:00001F08                 retn    8
.text:00001F08 _Sha1_32_Final@8 endp
.text:00001F08
.text:00001F08 ; ---------------------------------------------------------------------------
.text:00001F0B                 align 4
.text:00001F0B _text           ends
.text:00001F0B
.rtc$TMZ:00001F0C ; ===========================================================================
.rtc$TMZ:00001F0C
.rtc$TMZ:00001F0C ; Segment type: Pure data
.rtc$TMZ:00001F0C ; Segment permissions: Read
.rtc$TMZ:00001F0C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00001F0C                 assume cs:_rtc$TMZ
.rtc$TMZ:00001F0C                 ;org 1F0Ch
.rtc$TMZ:00001F0C ; COMDAT (pick any)
.rtc$TMZ:00001F0C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00001F0C _rtc$TMZ        ends
.rtc$TMZ:00001F0C
.rtc$IMZ:00001F10 ; ===========================================================================
.rtc$IMZ:00001F10
.rtc$IMZ:00001F10 ; Segment type: Pure data
.rtc$IMZ:00001F10 ; Segment permissions: Read
.rtc$IMZ:00001F10 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00001F10                 assume cs:_rtc$IMZ
.rtc$IMZ:00001F10                 ;org 1F10h
.rtc$IMZ:00001F10 ; COMDAT (pick any)
.rtc$IMZ:00001F10 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00001F10 _rtc$IMZ        ends
.rtc$IMZ:00001F10
UNDEF:00001F20 ; ===========================================================================
UNDEF:00001F20
UNDEF:00001F20 ; Segment type: Externs
UNDEF:00001F20 ; UNDEF
UNDEF:00001F20                 extrn __RTC_Shutdown:near
UNDEF:00001F20                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001F24                 extrn __RTC_InitBase:near
UNDEF:00001F24                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001F28                 extrn ___security_cookie:near
UNDEF:00001F28                                         ; DATA XREF: Sha1_GetBlockDigest(x,x,x)+1Cr
UNDEF:00001F28                                         ; Sha1_UpdateBlock_Rar(x,x,x)+1Cr
UNDEF:00001F2C ; __fastcall __security_check_cookie(x)
UNDEF:00001F2C                 extrn @__security_check_cookie@4:near
UNDEF:00001F2C                                         ; CODE XREF: Sha1_GetBlockDigest(x,x,x)+BB0p
UNDEF:00001F2C                                         ; Sha1_UpdateBlock_Rar(x,x,x)+BF2p
UNDEF:00001F30 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001F30                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001F30                                         ; CODE XREF: Sha1_GetBlockDigest(x,x,x)+BA3p
UNDEF:00001F30                                         ; Sha1_UpdateBlock_Rar(x,x,x)+BE5p
UNDEF:00001F34                 extrn __RTC_CheckEsp:near
UNDEF:00001F34                                         ; CODE XREF: Sha1_Update(x,x,x)+1F4p
UNDEF:00001F34                                         ; Sha1_Update_Rar(x,x,x,x)+13Ap ...
UNDEF:00001F38                 extrn __aullshr:near    ; CODE XREF: Sha1_Final(x,x)+D7p
UNDEF:00001F38                                         ; Sha1_32_PrepareBlock(x,x,x)+37p ...
UNDEF:00001F3C                 extrn __allshl:near     ; CODE XREF: Sha1_Final(x,x)+C4p
UNDEF:00001F3C                                         ; Sha1_32_PrepareBlock(x,x,x)+24p ...
UNDEF:00001F3C
UNDEF:00001F3C
UNDEF:00001F3C                 end