.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 0C89C80F61EF2E0562581B2E240EA039
.text:00000000 ; Input CRC32 : 6B52A434
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\DefaultName.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; class UString __stdcall GetDefaultName2(class UString const &, class UString const &, class UString const &)
.text:00000000                 public ?GetDefaultName2@@YG?AVUString@@ABV1@00@Z
.text:00000000 ?GetDefaultName2@@YG?AVUString@@ABV1@00@Z proc near
.text:00000000
.text:00000000 var_24          = dword ptr -24h
.text:00000000 var_20          = dword ptr -20h
.text:00000000 var_1C          = dword ptr -1Ch
.text:00000000 var_18          = dword ptr -18h
.text:00000000 var_14          = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_8           = dword ptr  10h
.text:00000000 arg_C           = dword ptr  14h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    0FFFFFFFFh
.text:00000005                 push    offset __ehhandler$?GetDefaultName2@@YG?AVUString@@ABV1@00@Z
.text:0000000A                 mov     eax, large fs:0
.text:00000010                 push    eax
.text:00000011                 sub     esp, 18h
.text:00000014                 mov     eax, 0CCCCCCCCh
.text:00000019                 mov     [ebp+var_24], eax
.text:0000001C                 mov     [ebp+var_20], eax
.text:0000001F                 mov     [ebp+var_1C], eax
.text:00000022                 mov     [ebp+var_18], eax
.text:00000025                 mov     [ebp+var_14], eax
.text:00000028                 mov     [ebp+var_10], eax
.text:0000002B                 mov     eax, dword ptr ds:___security_cookie
.text:00000030                 xor     eax, ebp
.text:00000032                 push    eax
.text:00000033                 lea     eax, [ebp+var_C]
.text:00000036                 mov     large fs:0, eax
.text:0000003C                 mov     [ebp+var_24], 0
.text:00000043                 mov     eax, [ebp+arg_C]
.text:00000046                 push    eax             ; UString *
.text:00000047                 mov     ecx, [ebp+arg_8]
.text:0000004A                 push    ecx             ; UString *
.text:0000004B                 mov     edx, [ebp+arg_4]
.text:0000004E                 push    edx             ; UString *
.text:0000004F                 lea     eax, [ebp+var_1C]
.text:00000052                 push    eax             ; int
.text:00000053                 call    ?GetDefaultName3@@YG?AVUString@@ABV1@00@Z ; GetDefaultName3(UString const &,UString const &,UString const &)
.text:00000058                 mov     [ebp+var_4], 1
.text:0000005F                 lea     ecx, [ebp+var_1C] ; this
.text:00000062                 call    ?TrimRight@UString@@QAEXXZ ; UString::TrimRight(void)
.text:00000067                 lea     ecx, [ebp+var_1C]
.text:0000006A                 push    ecx
.text:0000006B                 mov     ecx, [ebp+arg_0]
.text:0000006E                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00000073                 mov     edx, [ebp+var_24]
.text:00000076                 or      edx, 1
.text:00000079                 mov     [ebp+var_24], edx
.text:0000007C                 mov     byte ptr [ebp+var_4], 0
.text:00000080                 lea     ecx, [ebp+var_1C] ; this
.text:00000083                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000088                 mov     eax, [ebp+arg_0]
.text:0000008B                 push    edx
.text:0000008C                 mov     ecx, ebp
.text:0000008E                 push    eax
.text:0000008F                 lea     edx, $LN9
.text:00000095                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000009A                 pop     eax
.text:0000009B                 pop     edx
.text:0000009C                 mov     ecx, [ebp+var_C]
.text:0000009F                 mov     large fs:0, ecx
.text:000000A6                 pop     ecx
.text:000000A7                 add     esp, 24h
.text:000000AA                 cmp     ebp, esp
.text:000000AC                 call    __RTC_CheckEsp
.text:000000B1                 mov     esp, ebp
.text:000000B3                 pop     ebp
.text:000000B4                 retn    10h
.text:000000B4 ?GetDefaultName2@@YG?AVUString@@ABV1@00@Z endp
.text:000000B4
.text:000000B4 ; ---------------------------------------------------------------------------
.text:000000B7                 align 4
.text:000000B8 $LN9            dd 1                    ; DATA XREF: GetDefaultName2(UString const &,UString const &,UString const &)+8Fo
.text:000000BC                 dd offset $LN8
.text:000000C0 $LN8            dd 0FFFFFFE4h, 0Ch      ; DATA XREF: .text:000000BCo
.text:000000C8                 dd offset $LN6          ; "name"
.text:000000CC $LN6            db 'name',0             ; DATA XREF: .text:000000C8o
.text:000000D1                 align 10h
.text:000000E0
.text:000000E0 ; =============== S U B R O U T I N E =======================================
.text:000000E0
.text:000000E0 ; Attributes: bp-based frame
.text:000000E0
.text:000000E0 ; int __stdcall GetDefaultName3(int, UString *, UString *, UString *)
.text:000000E0 ?GetDefaultName3@@YG?AVUString@@ABV1@00@Z proc near
.text:000000E0                                         ; CODE XREF: GetDefaultName2(UString const &,UString const &,UString const &)+53p
.text:000000E0
.text:000000E0 var_48          = dword ptr -48h
.text:000000E0 var_44          = dword ptr -44h
.text:000000E0 var_40          = dword ptr -40h
.text:000000E0 var_3C          = dword ptr -3Ch
.text:000000E0 var_38          = dword ptr -38h
.text:000000E0 var_34          = byte ptr -34h
.text:000000E0 var_28          = byte ptr -28h
.text:000000E0 var_1C          = dword ptr -1Ch
.text:000000E0 var_18          = dword ptr -18h
.text:000000E0 var_14          = dword ptr -14h
.text:000000E0 var_10          = dword ptr -10h
.text:000000E0 var_C           = dword ptr -0Ch
.text:000000E0 var_4           = dword ptr -4
.text:000000E0 arg_0           = dword ptr  8
.text:000000E0 arg_4           = dword ptr  0Ch
.text:000000E0 arg_8           = dword ptr  10h
.text:000000E0 arg_C           = dword ptr  14h
.text:000000E0
.text:000000E0                 push    ebp
.text:000000E1                 mov     ebp, esp
.text:000000E3                 push    0FFFFFFFFh
.text:000000E5                 push    offset __ehhandler$?GetDefaultName3@@YG?AVUString@@ABV1@00@Z
.text:000000EA                 mov     eax, large fs:0
.text:000000F0                 push    eax
.text:000000F1                 sub     esp, 3Ch
.text:000000F4                 push    edi
.text:000000F5                 lea     edi, [ebp+var_48]
.text:000000F8                 mov     ecx, 0Fh
.text:000000FD                 mov     eax, 0CCCCCCCCh
.text:00000102                 rep stosd
.text:00000104                 mov     eax, dword ptr ds:___security_cookie
.text:00000109                 xor     eax, ebp
.text:0000010B                 push    eax
.text:0000010C                 lea     eax, [ebp+var_C]
.text:0000010F                 mov     large fs:0, eax
.text:00000115                 mov     [ebp+var_38], 0
.text:0000011C                 mov     ecx, [ebp+arg_8] ; this
.text:0000011F                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000124                 mov     [ebp+var_10], eax
.text:00000127                 mov     ecx, [ebp+arg_4] ; this
.text:0000012A                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000012F                 mov     [ebp+var_14], eax
.text:00000132                 mov     eax, [ebp+var_10]
.text:00000135                 add     eax, 1
.text:00000138                 cmp     [ebp+var_14], eax
.text:0000013B                 jbe     loc_1D3
.text:00000141                 mov     ecx, [ebp+var_10]
.text:00000144                 add     ecx, 1
.text:00000147                 mov     edx, [ebp+var_14]
.text:0000014A                 sub     edx, ecx
.text:0000014C                 mov     [ebp+var_18], edx
.text:0000014F                 mov     ecx, [ebp+arg_4]
.text:00000152                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000157                 mov     ecx, [ebp+var_18]
.text:0000015A                 movzx   edx, word ptr [eax+ecx*2]
.text:0000015E                 cmp     edx, 2Eh ; '.'
.text:00000161                 jnz     short loc_1D3
.text:00000163                 mov     eax, [ebp+var_18]
.text:00000166                 add     eax, 1
.text:00000169                 push    eax             ; unsigned int
.text:0000016A                 mov     ecx, [ebp+arg_4] ; this
.text:0000016D                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:00000172                 push    eax             ; wchar_t *
.text:00000173                 mov     ecx, [ebp+arg_8] ; this
.text:00000176                 call    ?IsEqualTo_NoCase@UString@@QBE_NPB_W@Z ; UString::IsEqualTo_NoCase(wchar_t const *)
.text:0000017B                 movzx   ecx, al
.text:0000017E                 test    ecx, ecx
.text:00000180                 jz      short loc_1D3
.text:00000182                 mov     edx, [ebp+arg_C]
.text:00000185                 push    edx
.text:00000186                 mov     eax, [ebp+var_18]
.text:00000189                 push    eax
.text:0000018A                 lea     ecx, [ebp+var_28]
.text:0000018D                 push    ecx
.text:0000018E                 mov     ecx, [ebp+arg_4]
.text:00000191                 call    ?Left@UString@@QBE?AV1@I@Z ; UString::Left(uint)
.text:00000196                 mov     [ebp+var_3C], eax
.text:00000199                 mov     edx, [ebp+var_3C]
.text:0000019C                 mov     [ebp+var_40], edx
.text:0000019F                 mov     [ebp+var_4], 0
.text:000001A6                 mov     eax, [ebp+var_40]
.text:000001A9                 push    eax
.text:000001AA                 mov     ecx, [ebp+arg_0]
.text:000001AD                 push    ecx
.text:000001AE                 call    ??H@YG?AVUString@@ABV0@0@Z ; operator+(UString const &,UString const &)
.text:000001B3                 mov     edx, [ebp+var_38]
.text:000001B6                 or      edx, 1
.text:000001B9                 mov     [ebp+var_38], edx
.text:000001BC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000001C3                 lea     ecx, [ebp+var_28] ; this
.text:000001C6                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000001CB                 mov     eax, [ebp+arg_0]
.text:000001CE                 jmp     loc_27D
.text:000001D3 ; ---------------------------------------------------------------------------
.text:000001D3
.text:000001D3 loc_1D3:                                ; CODE XREF: GetDefaultName3(UString const &,UString const &,UString const &)+5Bj
.text:000001D3                                         ; GetDefaultName3(UString const &,UString const &,UString const &)+81j ...
.text:000001D3                 mov     ecx, [ebp+arg_4] ; this
.text:000001D6                 call    ?ReverseFind_Dot@UString@@QBEHXZ ; UString::ReverseFind_Dot(void)
.text:000001DB                 mov     [ebp+var_1C], eax
.text:000001DE                 cmp     [ebp+var_1C], 0
.text:000001E2                 jle     short loc_232
.text:000001E4                 mov     eax, [ebp+arg_C]
.text:000001E7                 push    eax
.text:000001E8                 mov     ecx, [ebp+var_1C]
.text:000001EB                 push    ecx
.text:000001EC                 lea     edx, [ebp+var_34]
.text:000001EF                 push    edx
.text:000001F0                 mov     ecx, [ebp+arg_4]
.text:000001F3                 call    ?Left@UString@@QBE?AV1@I@Z ; UString::Left(uint)
.text:000001F8                 mov     [ebp+var_44], eax
.text:000001FB                 mov     eax, [ebp+var_44]
.text:000001FE                 mov     [ebp+var_48], eax
.text:00000201                 mov     [ebp+var_4], 1
.text:00000208                 mov     ecx, [ebp+var_48]
.text:0000020B                 push    ecx
.text:0000020C                 mov     edx, [ebp+arg_0]
.text:0000020F                 push    edx
.text:00000210                 call    ??H@YG?AVUString@@ABV0@0@Z ; operator+(UString const &,UString const &)
.text:00000215                 mov     eax, [ebp+var_38]
.text:00000218                 or      eax, 1
.text:0000021B                 mov     [ebp+var_38], eax
.text:0000021E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000225                 lea     ecx, [ebp+var_34] ; this
.text:00000228                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000022D                 mov     eax, [ebp+arg_0]
.text:00000230                 jmp     short loc_27D
.text:00000232 ; ---------------------------------------------------------------------------
.text:00000232
.text:00000232 loc_232:                                ; CODE XREF: GetDefaultName3(UString const &,UString const &,UString const &)+102j
.text:00000232                 mov     ecx, [ebp+arg_C] ; this
.text:00000235                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:0000023A                 movzx   ecx, al
.text:0000023D                 test    ecx, ecx
.text:0000023F                 jz      short loc_260
.text:00000241                 push    7Eh ; '~'
.text:00000243                 mov     edx, [ebp+arg_4]
.text:00000246                 push    edx
.text:00000247                 mov     eax, [ebp+arg_0]
.text:0000024A                 push    eax
.text:0000024B                 call    ??H@YG?AVUString@@ABV0@_W@Z ; operator+(UString const &,wchar_t)
.text:00000250                 mov     ecx, [ebp+var_38]
.text:00000253                 or      ecx, 1
.text:00000256                 mov     [ebp+var_38], ecx
.text:00000259                 mov     eax, [ebp+arg_0]
.text:0000025C                 jmp     short loc_27D
.text:0000025E ; ---------------------------------------------------------------------------
.text:0000025E                 jmp     short loc_27D
.text:00000260 ; ---------------------------------------------------------------------------
.text:00000260
.text:00000260 loc_260:                                ; CODE XREF: GetDefaultName3(UString const &,UString const &,UString const &)+15Fj
.text:00000260                 mov     edx, [ebp+arg_C]
.text:00000263                 push    edx
.text:00000264                 mov     eax, [ebp+arg_4]
.text:00000267                 push    eax
.text:00000268                 mov     ecx, [ebp+arg_0]
.text:0000026B                 push    ecx
.text:0000026C                 call    ??H@YG?AVUString@@ABV0@0@Z ; operator+(UString const &,UString const &)
.text:00000271                 mov     edx, [ebp+var_38]
.text:00000274                 or      edx, 1
.text:00000277                 mov     [ebp+var_38], edx
.text:0000027A                 mov     eax, [ebp+arg_0]
.text:0000027D
.text:0000027D loc_27D:                                ; CODE XREF: GetDefaultName3(UString const &,UString const &,UString const &)+EEj
.text:0000027D                                         ; GetDefaultName3(UString const &,UString const &,UString const &)+150j ...
.text:0000027D                 mov     ecx, [ebp+var_C]
.text:00000280                 mov     large fs:0, ecx
.text:00000287                 pop     ecx
.text:00000288                 pop     edi
.text:00000289                 add     esp, 48h
.text:0000028C                 cmp     ebp, esp
.text:0000028E                 call    __RTC_CheckEsp
.text:00000293                 mov     esp, ebp
.text:00000295                 pop     ebp
.text:00000296                 retn    10h
.text:00000296 ?GetDefaultName3@@YG?AVUString@@ABV1@00@Z endp
.text:00000296
.text:00000296 ; ---------------------------------------------------------------------------
.text:00000299                 align 4
.text:00000299 _text           ends
.text:00000299
.text$x:0000029C ; ===========================================================================
.text$x:0000029C
.text$x:0000029C ; Segment type: Pure code
.text$x:0000029C ; Segment permissions: Read/Execute
.text$x:0000029C _text$x         segment para public 'CODE' use32
.text$x:0000029C                 assume cs:_text$x
.text$x:0000029C                 ;org 29Ch
.text$x:0000029C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:0000029C
.text$x:0000029C ; =============== S U B R O U T I N E =======================================
.text$x:0000029C
.text$x:0000029C
.text$x:0000029C __unwindfunclet$?GetDefaultName2@@YG?AVUString@@ABV1@00@Z$0 proc near
.text$x:0000029C                                         ; DATA XREF: .xdata$x:00000310o
.text$x:0000029C                 lea     ecx, [ebp-1Ch]  ; this
.text$x:0000029F                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000029F __unwindfunclet$?GetDefaultName2@@YG?AVUString@@ABV1@00@Z$0 endp
.text$x:0000029F
.text$x:000002A4
.text$x:000002A4 ; =============== S U B R O U T I N E =======================================
.text$x:000002A4
.text$x:000002A4
.text$x:000002A4 __unwindfunclet$?GetDefaultName2@@YG?AVUString@@ABV1@00@Z$1 proc near
.text$x:000002A4                                         ; DATA XREF: .xdata$x:00000308o
.text$x:000002A4                 mov     eax, [ebp-24h]
.text$x:000002A7                 and     eax, 1
.text$x:000002AA                 jz      locret_2BC
.text$x:000002B0                 and     dword ptr [ebp-24h], 0FFFFFFFEh
.text$x:000002B4                 mov     ecx, [ebp+8]    ; this
.text$x:000002B7                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000002BC ; ---------------------------------------------------------------------------
.text$x:000002BC
.text$x:000002BC locret_2BC:                             ; CODE XREF: __unwindfunclet$?GetDefaultName2@@YG?AVUString@@ABV1@00@Z$1+6j
.text$x:000002BC                 retn
.text$x:000002BC __unwindfunclet$?GetDefaultName2@@YG?AVUString@@ABV1@00@Z$1 endp
.text$x:000002BC
.text$x:000002BD
.text$x:000002BD ; =============== S U B R O U T I N E =======================================
.text$x:000002BD
.text$x:000002BD
.text$x:000002BD __ehhandler$?GetDefaultName2@@YG?AVUString@@ABV1@00@Z proc near
.text$x:000002BD                                         ; DATA XREF: GetDefaultName2(UString const &,UString const &,UString const &)+5o
.text$x:000002BD
.text$x:000002BD arg_4           = dword ptr  8
.text$x:000002BD
.text$x:000002BD                 mov     edx, [esp+arg_4]
.text$x:000002C1                 lea     eax, [edx+0Ch]
.text$x:000002C4                 mov     ecx, [edx-1Ch]
.text$x:000002C7                 xor     ecx, eax
.text$x:000002C9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000002CE                 mov     eax, offset __ehfuncinfo$?GetDefaultName2@@YG?AVUString@@ABV1@00@Z
.text$x:000002D3                 jmp     ___CxxFrameHandler3
.text$x:000002D3 __ehhandler$?GetDefaultName2@@YG?AVUString@@ABV1@00@Z endp
.text$x:000002D3
.text$x:000002D8
.text$x:000002D8 ; =============== S U B R O U T I N E =======================================
.text$x:000002D8
.text$x:000002D8
.text$x:000002D8 __unwindfunclet$?GetDefaultName3@@YG?AVUString@@ABV1@00@Z$0 proc near
.text$x:000002D8                                         ; DATA XREF: .xdata$x:0000033Co
.text$x:000002D8                 lea     ecx, [ebp-28h]  ; this
.text$x:000002DB                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000002DB __unwindfunclet$?GetDefaultName3@@YG?AVUString@@ABV1@00@Z$0 endp
.text$x:000002DB
.text$x:000002E0
.text$x:000002E0 ; =============== S U B R O U T I N E =======================================
.text$x:000002E0
.text$x:000002E0
.text$x:000002E0 __unwindfunclet$?GetDefaultName3@@YG?AVUString@@ABV1@00@Z$2 proc near
.text$x:000002E0                                         ; DATA XREF: .xdata$x:00000344o
.text$x:000002E0                 lea     ecx, [ebp-34h]  ; this
.text$x:000002E3                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000002E3 __unwindfunclet$?GetDefaultName3@@YG?AVUString@@ABV1@00@Z$2 endp
.text$x:000002E3
.text$x:000002E8
.text$x:000002E8 ; =============== S U B R O U T I N E =======================================
.text$x:000002E8
.text$x:000002E8
.text$x:000002E8 __ehhandler$?GetDefaultName3@@YG?AVUString@@ABV1@00@Z proc near
.text$x:000002E8                                         ; DATA XREF: GetDefaultName3(UString const &,UString const &,UString const &)+5o
.text$x:000002E8
.text$x:000002E8 arg_4           = dword ptr  8
.text$x:000002E8
.text$x:000002E8                 mov     edx, [esp+arg_4]
.text$x:000002EC                 lea     eax, [edx+0Ch]
.text$x:000002EF                 mov     ecx, [edx-44h]
.text$x:000002F2                 xor     ecx, eax
.text$x:000002F4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000002F9                 mov     eax, offset __ehfuncinfo$?GetDefaultName3@@YG?AVUString@@ABV1@00@Z
.text$x:000002FE                 jmp     ___CxxFrameHandler3
.text$x:000002FE __ehhandler$?GetDefaultName3@@YG?AVUString@@ABV1@00@Z endp
.text$x:000002FE
.text$x:000002FE ; ---------------------------------------------------------------------------
.text$x:00000303                 align 4
.text$x:00000303 _text$x         ends
.text$x:00000303
.xdata$x:00000304 ; ===========================================================================
.xdata$x:00000304
.xdata$x:00000304 ; Segment type: Pure data
.xdata$x:00000304 ; Segment permissions: Read
.xdata$x:00000304 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000304                 assume cs:_xdata$x
.xdata$x:00000304                 ;org 304h
.xdata$x:00000304 __unwindtable$?GetDefaultName2@@YG?AVUString@@ABV1@00@Z db 0FFh
.xdata$x:00000304                                         ; DATA XREF: .xdata$x:0000031Co
.xdata$x:00000305                 db 0FFh
.xdata$x:00000306                 db 0FFh
.xdata$x:00000307                 db 0FFh
.xdata$x:00000308                 dd offset __unwindfunclet$?GetDefaultName2@@YG?AVUString@@ABV1@00@Z$1
.xdata$x:0000030C                 align 10h
.xdata$x:00000310                 dd offset __unwindfunclet$?GetDefaultName2@@YG?AVUString@@ABV1@00@Z$0
.xdata$x:00000314 __ehfuncinfo$?GetDefaultName2@@YG?AVUString@@ABV1@00@Z db  22h ; "
.xdata$x:00000314                                         ; DATA XREF: __ehhandler$?GetDefaultName2@@YG?AVUString@@ABV1@00@Z+11o
.xdata$x:00000315                 db    5
.xdata$x:00000316                 db  93h ; ô
.xdata$x:00000317                 db  19h
.xdata$x:00000318                 db    2
.xdata$x:00000319                 db    0
.xdata$x:0000031A                 db    0
.xdata$x:0000031B                 db    0
.xdata$x:0000031C                 dd offset __unwindtable$?GetDefaultName2@@YG?AVUString@@ABV1@00@Z
.xdata$x:00000320                 db    0
.xdata$x:00000321                 db    0
.xdata$x:00000322                 db    0
.xdata$x:00000323                 db    0
.xdata$x:00000324                 db    0
.xdata$x:00000325                 db    0
.xdata$x:00000326                 db    0
.xdata$x:00000327                 db    0
.xdata$x:00000328                 db    0
.xdata$x:00000329                 db    0
.xdata$x:0000032A                 db    0
.xdata$x:0000032B                 db    0
.xdata$x:0000032C                 db    0
.xdata$x:0000032D                 db    0
.xdata$x:0000032E                 db    0
.xdata$x:0000032F                 db    0
.xdata$x:00000330                 db    0
.xdata$x:00000331                 db    0
.xdata$x:00000332                 db    0
.xdata$x:00000333                 db    0
.xdata$x:00000334                 db    1
.xdata$x:00000335                 db    0
.xdata$x:00000336                 db    0
.xdata$x:00000337                 db    0
.xdata$x:00000338 __unwindtable$?GetDefaultName3@@YG?AVUString@@ABV1@00@Z db 0FFh
.xdata$x:00000338                                         ; DATA XREF: .xdata$x:00000350o
.xdata$x:00000339                 db 0FFh
.xdata$x:0000033A                 db 0FFh
.xdata$x:0000033B                 db 0FFh
.xdata$x:0000033C                 dd offset __unwindfunclet$?GetDefaultName3@@YG?AVUString@@ABV1@00@Z$0
.xdata$x:00000340                 db 0FFh
.xdata$x:00000341                 db 0FFh
.xdata$x:00000342                 db 0FFh
.xdata$x:00000343                 db 0FFh
.xdata$x:00000344                 dd offset __unwindfunclet$?GetDefaultName3@@YG?AVUString@@ABV1@00@Z$2
.xdata$x:00000348 __ehfuncinfo$?GetDefaultName3@@YG?AVUString@@ABV1@00@Z db  22h ; "
.xdata$x:00000348                                         ; DATA XREF: __ehhandler$?GetDefaultName3@@YG?AVUString@@ABV1@00@Z+11o
.xdata$x:00000349                 db    5
.xdata$x:0000034A                 db  93h ; ô
.xdata$x:0000034B                 db  19h
.xdata$x:0000034C                 db    2
.xdata$x:0000034D                 db    0
.xdata$x:0000034E                 db    0
.xdata$x:0000034F                 db    0
.xdata$x:00000350                 dd offset __unwindtable$?GetDefaultName3@@YG?AVUString@@ABV1@00@Z
.xdata$x:00000354                 db    0
.xdata$x:00000355                 db    0
.xdata$x:00000356                 db    0
.xdata$x:00000357                 db    0
.xdata$x:00000358                 db    0
.xdata$x:00000359                 db    0
.xdata$x:0000035A                 db    0
.xdata$x:0000035B                 db    0
.xdata$x:0000035C                 db    0
.xdata$x:0000035D                 db    0
.xdata$x:0000035E                 db    0
.xdata$x:0000035F                 db    0
.xdata$x:00000360                 db    0
.xdata$x:00000361                 db    0
.xdata$x:00000362                 db    0
.xdata$x:00000363                 db    0
.xdata$x:00000364                 db    0
.xdata$x:00000365                 db    0
.xdata$x:00000366                 db    0
.xdata$x:00000367                 db    0
.xdata$x:00000368                 db    1
.xdata$x:00000369                 db    0
.xdata$x:0000036A                 db    0
.xdata$x:0000036B                 db    0
.xdata$x:0000036B _xdata$x        ends
.xdata$x:0000036B
.rtc$TMZ:0000036C ; ===========================================================================
.rtc$TMZ:0000036C
.rtc$TMZ:0000036C ; Segment type: Pure data
.rtc$TMZ:0000036C ; Segment permissions: Read
.rtc$TMZ:0000036C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000036C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000036C                 ;org 36Ch
.rtc$TMZ:0000036C ; COMDAT (pick any)
.rtc$TMZ:0000036C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000036C _rtc$TMZ        ends
.rtc$TMZ:0000036C
.rtc$IMZ:00000370 ; ===========================================================================
.rtc$IMZ:00000370
.rtc$IMZ:00000370 ; Segment type: Pure data
.rtc$IMZ:00000370 ; Segment permissions: Read
.rtc$IMZ:00000370 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000370                 assume cs:_rtc$IMZ
.rtc$IMZ:00000370                 ;org 370h
.rtc$IMZ:00000370 ; COMDAT (pick any)
.rtc$IMZ:00000370 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000370 _rtc$IMZ        ends
.rtc$IMZ:00000370
.text:00000374 ; ===========================================================================
.text:00000374
.text:00000374 ; Segment type: Pure code
.text:00000374 ; Segment permissions: Read/Execute
.text:00000374 _text           segment para public 'CODE' use32
.text:00000374                 assume cs:_text
.text:00000374                 ;org 374h
.text:00000374 ; COMDAT (pick any)
.text:00000374                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000374
.text:00000374 ; =============== S U B R O U T I N E =======================================
.text:00000374
.text:00000374 ; Attributes: bp-based frame
.text:00000374
.text:00000374 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00000374                 public ??1UString@@QAE@XZ
.text:00000374 ??1UString@@QAE@XZ proc near            ; CODE XREF: GetDefaultName2(UString const &,UString const &,UString const &)+83p
.text:00000374                                         ; GetDefaultName3(UString const &,UString const &,UString const &)+E6p ...
.text:00000374
.text:00000374 var_8           = dword ptr -8
.text:00000374 var_4           = dword ptr -4
.text:00000374
.text:00000374                 push    ebp
.text:00000375                 mov     ebp, esp
.text:00000377                 sub     esp, 8
.text:0000037A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000381                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000388                 mov     [ebp+var_4], ecx
.text:0000038B                 mov     eax, [ebp+var_4]
.text:0000038E                 mov     ecx, [eax]
.text:00000390                 mov     [ebp+var_8], ecx
.text:00000393                 mov     edx, [ebp+var_8]
.text:00000396                 push    edx             ; void *
.text:00000397                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000039C                 add     esp, 4
.text:0000039F                 add     esp, 8
.text:000003A2                 cmp     ebp, esp
.text:000003A4                 call    __RTC_CheckEsp
.text:000003A9                 mov     esp, ebp
.text:000003AB                 pop     ebp
.text:000003AC                 retn
.text:000003AC ??1UString@@QAE@XZ endp
.text:000003AC
.text:000003AC ; ---------------------------------------------------------------------------
.text:000003AD                 align 10h
.text:000003AD _text           ends
.text:000003AD
.text:000003B0 ; ===========================================================================
.text:000003B0
.text:000003B0 ; Segment type: Pure code
.text:000003B0 ; Segment permissions: Read/Execute
.text:000003B0 _text           segment para public 'CODE' use32
.text:000003B0                 assume cs:_text
.text:000003B0                 ;org 3B0h
.text:000003B0 ; COMDAT (pick any)
.text:000003B0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000003B0
.text:000003B0 ; =============== S U B R O U T I N E =======================================
.text:000003B0
.text:000003B0 ; Attributes: bp-based frame
.text:000003B0
.text:000003B0 ; class UString __stdcall operator+(class UString const &, wchar_t)
.text:000003B0                 public ??H@YG?AVUString@@ABV0@_W@Z
.text:000003B0 ??H@YG?AVUString@@ABV0@_W@Z proc near   ; CODE XREF: GetDefaultName3(UString const &,UString const &,UString const &)+16Bp
.text:000003B0
.text:000003B0 var_4           = dword ptr -4
.text:000003B0 arg_0           = dword ptr  8
.text:000003B0 arg_4           = dword ptr  0Ch
.text:000003B0 arg_8           = word ptr  10h
.text:000003B0
.text:000003B0                 push    ebp
.text:000003B1                 mov     ebp, esp
.text:000003B3                 push    ecx
.text:000003B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003BB                 mov     [ebp+var_4], 0
.text:000003C2                 movzx   eax, [ebp+arg_8]
.text:000003C6                 push    eax
.text:000003C7                 mov     ecx, [ebp+arg_4]
.text:000003CA                 push    ecx
.text:000003CB                 mov     ecx, [ebp+arg_0]
.text:000003CE                 call    ??0UString@@AAE@ABV0@_W@Z ; UString::UString(UString const &,wchar_t)
.text:000003D3                 mov     edx, [ebp+var_4]
.text:000003D6                 or      edx, 1
.text:000003D9                 mov     [ebp+var_4], edx
.text:000003DC                 mov     eax, [ebp+arg_0]
.text:000003DF                 add     esp, 4
.text:000003E2                 cmp     ebp, esp
.text:000003E4                 call    __RTC_CheckEsp
.text:000003E9                 mov     esp, ebp
.text:000003EB                 pop     ebp
.text:000003EC                 retn    0Ch
.text:000003EC ??H@YG?AVUString@@ABV0@_W@Z endp
.text:000003EC
.text:000003EC ; ---------------------------------------------------------------------------
.text:000003EF                 align 10h
.text:000003EF _text           ends
.text:000003EF
.text:000003F0 ; ===========================================================================
.text:000003F0
.text:000003F0 ; Segment type: Pure code
.text:000003F0 ; Segment permissions: Read/Execute
.text:000003F0 _text           segment para public 'CODE' use32
.text:000003F0                 assume cs:_text
.text:000003F0                 ;org 3F0h
.text:000003F0 ; COMDAT (pick any)
.text:000003F0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000003F0
.text:000003F0 ; =============== S U B R O U T I N E =======================================
.text:000003F0
.text:000003F0 ; Attributes: bp-based frame
.text:000003F0
.text:000003F0 ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:000003F0                 public ?Len@UString@@QBEIXZ
.text:000003F0 ?Len@UString@@QBEIXZ proc near          ; CODE XREF: GetDefaultName3(UString const &,UString const &,UString const &)+3Fp
.text:000003F0                                         ; GetDefaultName3(UString const &,UString const &,UString const &)+4Ap
.text:000003F0
.text:000003F0 var_4           = dword ptr -4
.text:000003F0
.text:000003F0                 push    ebp
.text:000003F1                 mov     ebp, esp
.text:000003F3                 push    ecx
.text:000003F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003FB                 mov     [ebp+var_4], ecx
.text:000003FE                 mov     eax, [ebp+var_4]
.text:00000401                 mov     eax, [eax+4]
.text:00000404                 mov     esp, ebp
.text:00000406                 pop     ebp
.text:00000407                 retn
.text:00000407 ?Len@UString@@QBEIXZ endp
.text:00000407
.text:00000407 _text           ends
.text:00000407
.text:00000408 ; ===========================================================================
.text:00000408
.text:00000408 ; Segment type: Pure code
.text:00000408 ; Segment permissions: Read/Execute
.text:00000408 _text           segment para public 'CODE' use32
.text:00000408                 assume cs:_text
.text:00000408                 ;org 408h
.text:00000408 ; COMDAT (pick any)
.text:00000408                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000408
.text:00000408 ; =============== S U B R O U T I N E =======================================
.text:00000408
.text:00000408 ; Attributes: bp-based frame
.text:00000408
.text:00000408 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:00000408                 public ?IsEmpty@UString@@QBE_NXZ
.text:00000408 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: GetDefaultName3(UString const &,UString const &,UString const &)+155p
.text:00000408
.text:00000408 var_4           = dword ptr -4
.text:00000408
.text:00000408                 push    ebp
.text:00000409                 mov     ebp, esp
.text:0000040B                 push    ecx
.text:0000040C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000413                 mov     [ebp+var_4], ecx
.text:00000416                 mov     eax, [ebp+var_4]
.text:00000419                 xor     ecx, ecx
.text:0000041B                 cmp     dword ptr [eax+4], 0
.text:0000041F                 setz    cl
.text:00000422                 mov     al, cl
.text:00000424                 mov     esp, ebp
.text:00000426                 pop     ebp
.text:00000427                 retn
.text:00000427 ?IsEmpty@UString@@QBE_NXZ endp
.text:00000427
.text:00000427 _text           ends
.text:00000427
.text:00000428 ; ===========================================================================
.text:00000428
.text:00000428 ; Segment type: Pure code
.text:00000428 ; Segment permissions: Read/Execute
.text:00000428 _text           segment para public 'CODE' use32
.text:00000428                 assume cs:_text
.text:00000428                 ;org 428h
.text:00000428 ; COMDAT (pick any)
.text:00000428                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000428
.text:00000428 ; =============== S U B R O U T I N E =======================================
.text:00000428
.text:00000428 ; Attributes: bp-based frame
.text:00000428
.text:00000428 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00000428                 public ??BUString@@QBEPB_WXZ
.text:00000428 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: GetDefaultName3(UString const &,UString const &,UString const &)+72p
.text:00000428
.text:00000428 var_4           = dword ptr -4
.text:00000428
.text:00000428                 push    ebp
.text:00000429                 mov     ebp, esp
.text:0000042B                 push    ecx
.text:0000042C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000433                 mov     [ebp+var_4], ecx
.text:00000436                 mov     eax, [ebp+var_4]
.text:00000439                 mov     eax, [eax]
.text:0000043B                 mov     esp, ebp
.text:0000043D                 pop     ebp
.text:0000043E                 retn
.text:0000043E ??BUString@@QBEPB_WXZ endp
.text:0000043E
.text:0000043E ; ---------------------------------------------------------------------------
.text:0000043F                 align 10h
.text:0000043F _text           ends
.text:0000043F
.text:00000440 ; ===========================================================================
.text:00000440
.text:00000440 ; Segment type: Pure code
.text:00000440 ; Segment permissions: Read/Execute
.text:00000440 _text           segment para public 'CODE' use32
.text:00000440                 assume cs:_text
.text:00000440                 ;org 440h
.text:00000440 ; COMDAT (pick any)
.text:00000440                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000440
.text:00000440 ; =============== S U B R O U T I N E =======================================
.text:00000440
.text:00000440 ; Attributes: bp-based frame
.text:00000440
.text:00000440 ; const wchar_t *__thiscall UString::Ptr(UString *this, unsigned int)
.text:00000440                 public ?Ptr@UString@@QBEPB_WI@Z
.text:00000440 ?Ptr@UString@@QBEPB_WI@Z proc near      ; CODE XREF: GetDefaultName3(UString const &,UString const &,UString const &)+8Dp
.text:00000440
.text:00000440 var_4           = dword ptr -4
.text:00000440 arg_0           = dword ptr  8
.text:00000440
.text:00000440                 push    ebp
.text:00000441                 mov     ebp, esp
.text:00000443                 push    ecx
.text:00000444                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000044B                 mov     [ebp+var_4], ecx
.text:0000044E                 mov     eax, [ebp+var_4]
.text:00000451                 mov     ecx, [eax]
.text:00000453                 mov     edx, [ebp+arg_0]
.text:00000456                 lea     eax, [ecx+edx*2]
.text:00000459                 mov     esp, ebp
.text:0000045B                 pop     ebp
.text:0000045C                 retn    4
.text:0000045C ?Ptr@UString@@QBEPB_WI@Z endp
.text:0000045C
.text:0000045C ; ---------------------------------------------------------------------------
.text:0000045F                 align 10h
.text:0000045F _text           ends
.text:0000045F
.text:00000460 ; ===========================================================================
.text:00000460
.text:00000460 ; Segment type: Pure code
.text:00000460 ; Segment permissions: Read/Execute
.text:00000460 _text           segment para public 'CODE' use32
.text:00000460                 assume cs:_text
.text:00000460                 ;org 460h
.text:00000460 ; COMDAT (pick any)
.text:00000460                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000460
.text:00000460 ; =============== S U B R O U T I N E =======================================
.text:00000460
.text:00000460 ; Attributes: bp-based frame
.text:00000460
.text:00000460 ; public: class UString __thiscall UString::Left(unsigned int)const
.text:00000460                 public ?Left@UString@@QBE?AV1@I@Z
.text:00000460 ?Left@UString@@QBE?AV1@I@Z proc near    ; CODE XREF: GetDefaultName3(UString const &,UString const &,UString const &)+B1p
.text:00000460                                         ; GetDefaultName3(UString const &,UString const &,UString const &)+113p
.text:00000460
.text:00000460 var_8           = dword ptr -8
.text:00000460 var_4           = dword ptr -4
.text:00000460 arg_0           = dword ptr  8
.text:00000460 arg_4           = dword ptr  0Ch
.text:00000460
.text:00000460                 push    ebp
.text:00000461                 mov     ebp, esp
.text:00000463                 sub     esp, 8
.text:00000466                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000046D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000474                 mov     [ebp+var_4], ecx
.text:00000477                 mov     [ebp+var_8], 0
.text:0000047E                 mov     eax, [ebp+var_4]
.text:00000481                 push    eax
.text:00000482                 mov     ecx, [ebp+arg_4]
.text:00000485                 push    ecx
.text:00000486                 mov     ecx, [ebp+arg_0]
.text:00000489                 call    ??0UString@@AAE@IABV0@@Z ; UString::UString(uint,UString const &)
.text:0000048E                 mov     edx, [ebp+var_8]
.text:00000491                 or      edx, 1
.text:00000494                 mov     [ebp+var_8], edx
.text:00000497                 mov     eax, [ebp+arg_0]
.text:0000049A                 add     esp, 8
.text:0000049D                 cmp     ebp, esp
.text:0000049F                 call    __RTC_CheckEsp
.text:000004A4                 mov     esp, ebp
.text:000004A6                 pop     ebp
.text:000004A7                 retn    8
.text:000004A7 ?Left@UString@@QBE?AV1@I@Z endp
.text:000004A7
.text:000004A7 ; ---------------------------------------------------------------------------
.text:000004AA                 align 4
.text:000004AA _text           ends
.text:000004AA
.text:000004AC ; ===========================================================================
.text:000004AC
.text:000004AC ; Segment type: Pure code
.text:000004AC ; Segment permissions: Read/Execute
.text:000004AC _text           segment para public 'CODE' use32
.text:000004AC                 assume cs:_text
.text:000004AC                 ;org 4ACh
.text:000004AC ; COMDAT (pick any)
.text:000004AC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000004AC
.text:000004AC ; =============== S U B R O U T I N E =======================================
.text:000004AC
.text:000004AC ; Attributes: bp-based frame
.text:000004AC
.text:000004AC ; bool __thiscall UString::IsEqualTo_NoCase(UString *this, const wchar_t *)
.text:000004AC                 public ?IsEqualTo_NoCase@UString@@QBE_NPB_W@Z
.text:000004AC ?IsEqualTo_NoCase@UString@@QBE_NPB_W@Z proc near
.text:000004AC                                         ; CODE XREF: GetDefaultName3(UString const &,UString const &,UString const &)+96p
.text:000004AC
.text:000004AC var_4           = dword ptr -4
.text:000004AC arg_0           = dword ptr  8
.text:000004AC
.text:000004AC                 push    ebp
.text:000004AD                 mov     ebp, esp
.text:000004AF                 push    ecx
.text:000004B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004B7                 mov     [ebp+var_4], ecx
.text:000004BA                 mov     eax, [ebp+arg_0]
.text:000004BD                 push    eax             ; wchar_t *
.text:000004BE                 mov     ecx, [ebp+var_4]
.text:000004C1                 mov     edx, [ecx]
.text:000004C3                 push    edx             ; wchar_t *
.text:000004C4                 call    ?StringsAreEqualNoCase@@YG_NPB_W0@Z ; StringsAreEqualNoCase(wchar_t const *,wchar_t const *)
.text:000004C9                 add     esp, 4
.text:000004CC                 cmp     ebp, esp
.text:000004CE                 call    __RTC_CheckEsp
.text:000004D3                 mov     esp, ebp
.text:000004D5                 pop     ebp
.text:000004D6                 retn    4
.text:000004D6 ?IsEqualTo_NoCase@UString@@QBE_NPB_W@Z endp
.text:000004D6
.text:000004D6 ; ---------------------------------------------------------------------------
.text:000004D9                 align 4
.text:000004D9 _text           ends
.text:000004D9
.text:000004DC ; ===========================================================================
.text:000004DC
.text:000004DC ; Segment type: Pure code
.text:000004DC ; Segment permissions: Read/Execute
.text:000004DC _text           segment para public 'CODE' use32
.text:000004DC                 assume cs:_text
.text:000004DC                 ;org 4DCh
.text:000004DC ; COMDAT (pick any)
.text:000004DC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000004DC
.text:000004DC ; =============== S U B R O U T I N E =======================================
.text:000004DC
.text:000004DC ; Attributes: bp-based frame
.text:000004DC
.text:000004DC ; int __thiscall UString::ReverseFind_Dot(UString *__hidden this)
.text:000004DC                 public ?ReverseFind_Dot@UString@@QBEHXZ
.text:000004DC ?ReverseFind_Dot@UString@@QBEHXZ proc near
.text:000004DC                                         ; CODE XREF: GetDefaultName3(UString const &,UString const &,UString const &)+F6p
.text:000004DC
.text:000004DC var_4           = dword ptr -4
.text:000004DC
.text:000004DC                 push    ebp
.text:000004DD                 mov     ebp, esp
.text:000004DF                 push    ecx
.text:000004E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004E7                 mov     [ebp+var_4], ecx
.text:000004EA                 push    2Eh ; '.'       ; wchar_t
.text:000004EC                 mov     ecx, [ebp+var_4] ; this
.text:000004EF                 call    ?ReverseFind@UString@@QBEH_W@Z ; UString::ReverseFind(wchar_t)
.text:000004F4                 add     esp, 4
.text:000004F7                 cmp     ebp, esp
.text:000004F9                 call    __RTC_CheckEsp
.text:000004FE                 mov     esp, ebp
.text:00000500                 pop     ebp
.text:00000501                 retn
.text:00000501 ?ReverseFind_Dot@UString@@QBEHXZ endp
.text:00000501
.text:00000501 _text           ends
.text:00000501
UNDEF:00000510 ; ===========================================================================
UNDEF:00000510
UNDEF:00000510 ; Segment type: Externs
UNDEF:00000510 ; UNDEF
UNDEF:00000510 ; public: __thiscall UString::UString(class UString const &)
UNDEF:00000510                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:00000510                                         ; CODE XREF: GetDefaultName2(UString const &,UString const &,UString const &)+6Ep
UNDEF:00000514 ; void __thiscall UString::TrimRight(UString *__hidden this)
UNDEF:00000514                 extrn ?TrimRight@UString@@QAEXXZ:near
UNDEF:00000514                                         ; CODE XREF: GetDefaultName2(UString const &,UString const &,UString const &)+62p
UNDEF:00000518                 extrn ___security_cookie:near
UNDEF:00000518                                         ; DATA XREF: GetDefaultName2(UString const &,UString const &,UString const &)+2Br
UNDEF:00000518                                         ; GetDefaultName3(UString const &,UString const &,UString const &)+24r
UNDEF:0000051C                 extrn ___CxxFrameHandler3:near
UNDEF:0000051C                                         ; CODE XREF: __ehhandler$?GetDefaultName2@@YG?AVUString@@ABV1@00@Z+16j
UNDEF:0000051C                                         ; __ehhandler$?GetDefaultName3@@YG?AVUString@@ABV1@00@Z+16j
UNDEF:00000520 ; __fastcall __security_check_cookie(x)
UNDEF:00000520                 extrn @__security_check_cookie@4:near
UNDEF:00000520                                         ; CODE XREF: __ehhandler$?GetDefaultName2@@YG?AVUString@@ABV1@00@Z+Cp
UNDEF:00000520                                         ; __ehhandler$?GetDefaultName3@@YG?AVUString@@ABV1@00@Z+Cp
UNDEF:00000524                 extrn __RTC_CheckEsp:near
UNDEF:00000524                                         ; CODE XREF: GetDefaultName2(UString const &,UString const &,UString const &)+ACp
UNDEF:00000524                                         ; GetDefaultName3(UString const &,UString const &,UString const &)+1AEp ...
UNDEF:00000528 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000528                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000528                                         ; CODE XREF: GetDefaultName2(UString const &,UString const &,UString const &)+95p
UNDEF:0000052C                 extrn __RTC_Shutdown:near
UNDEF:0000052C                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000530                 extrn __RTC_InitBase:near
UNDEF:00000530                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000534 ; void __cdecl operator delete(void *)
UNDEF:00000534                 extrn ??3@YAXPAX@Z:near ; CODE XREF: UString::~UString(void)+23p
UNDEF:00000538 ; class UString __stdcall operator+(class UString const &, class UString const &)
UNDEF:00000538                 extrn ??H@YG?AVUString@@ABV0@0@Z:near
UNDEF:00000538                                         ; CODE XREF: GetDefaultName3(UString const &,UString const &,UString const &)+CEp
UNDEF:00000538                                         ; GetDefaultName3(UString const &,UString const &,UString const &)+130p ...
UNDEF:0000053C ; private: __thiscall UString::UString(class UString const &, wchar_t)
UNDEF:0000053C                 extrn ??0UString@@AAE@ABV0@_W@Z:near
UNDEF:0000053C                                         ; CODE XREF: operator+(UString const &,wchar_t)+1Ep
UNDEF:00000540 ; private: __thiscall UString::UString(unsigned int, class UString const &)
UNDEF:00000540                 extrn ??0UString@@AAE@IABV0@@Z:near
UNDEF:00000540                                         ; CODE XREF: UString::Left(uint)+29p
UNDEF:00000544 ; bool __stdcall StringsAreEqualNoCase(const wchar_t *, const wchar_t *)
UNDEF:00000544                 extrn ?StringsAreEqualNoCase@@YG_NPB_W0@Z:near
UNDEF:00000544                                         ; CODE XREF: UString::IsEqualTo_NoCase(wchar_t const *)+18p
UNDEF:00000548 ; int __thiscall UString::ReverseFind(UString *__hidden this, wchar_t)
UNDEF:00000548                 extrn ?ReverseFind@UString@@QBEH_W@Z:near
UNDEF:00000548                                         ; CODE XREF: UString::ReverseFind_Dot(void)+13p
UNDEF:00000548
UNDEF:00000548
UNDEF:00000548                 end