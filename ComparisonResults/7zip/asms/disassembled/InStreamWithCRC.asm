.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 4AE8CE554EAA0BC0BB5745C5ABD97BEA
.text:00000000 ; Input CRC32 : 3931FF98
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\InStreamWithCRC.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __stdcall CSequentialInStreamWithCRC::Read(CSequentialInStreamWithCRC *this, void *, unsigned int, unsigned int *)
.text:00000000                 public ?Read@CSequentialInStreamWithCRC@@UAGJPAXIPAI@Z
.text:00000000 ?Read@CSequentialInStreamWithCRC@@UAGJPAXIPAI@Z proc near
.text:00000000
.text:00000000 var_14          = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 this            = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_8           = dword ptr  10h
.text:00000000 arg_C           = dword ptr  14h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 14h
.text:00000006                 push    esi
.text:00000007                 mov     eax, 0CCCCCCCCh
.text:0000000C                 mov     [ebp+var_14], eax
.text:0000000F                 mov     [ebp+var_10], eax
.text:00000012                 mov     [ebp+var_C], eax
.text:00000015                 mov     [ebp+var_8], eax
.text:00000018                 mov     [ebp+var_4], eax
.text:0000001B                 mov     [ebp+var_8], 0
.text:00000022                 mov     [ebp+var_10], 0
.text:00000029                 mov     ecx, [ebp+this]
.text:0000002C                 add     ecx, 8
.text:0000002F                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00000034                 test    eax, eax
.text:00000036                 jz      short loc_6C
.text:00000038                 mov     ecx, [ebp+this]
.text:0000003B                 add     ecx, 8
.text:0000003E                 call    ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->(void)
.text:00000043                 mov     [ebp+var_14], eax
.text:00000046                 mov     esi, esp
.text:00000048                 lea     eax, [ebp+var_8]
.text:0000004B                 push    eax
.text:0000004C                 mov     ecx, [ebp+arg_8]
.text:0000004F                 push    ecx
.text:00000050                 mov     edx, [ebp+arg_4]
.text:00000053                 push    edx
.text:00000054                 mov     eax, [ebp+var_14]
.text:00000057                 push    eax
.text:00000058                 mov     ecx, [ebp+var_14]
.text:0000005B                 mov     edx, [ecx]
.text:0000005D                 mov     eax, [edx+0Ch]
.text:00000060                 call    eax
.text:00000062                 cmp     esi, esp
.text:00000064                 call    __RTC_CheckEsp
.text:00000069                 mov     [ebp+var_10], eax
.text:0000006C
.text:0000006C loc_6C:                                 ; CODE XREF: CSequentialInStreamWithCRC::Read(void *,uint,uint *)+36j
.text:0000006C                 mov     ecx, [ebp+var_8]
.text:0000006F                 xor     edx, edx
.text:00000071                 mov     eax, [ebp+this]
.text:00000074                 add     ecx, [eax+10h]
.text:00000077                 adc     edx, [eax+14h]
.text:0000007A                 mov     eax, [ebp+this]
.text:0000007D                 mov     [eax+10h], ecx
.text:00000080                 mov     [eax+14h], edx
.text:00000083                 cmp     [ebp+arg_8], 0
.text:00000087                 jz      short loc_96
.text:00000089                 cmp     [ebp+var_8], 0
.text:0000008D                 jnz     short loc_96
.text:0000008F                 mov     ecx, [ebp+this]
.text:00000092                 mov     byte ptr [ecx+1Ch], 1
.text:00000096
.text:00000096 loc_96:                                 ; CODE XREF: CSequentialInStreamWithCRC::Read(void *,uint,uint *)+87j
.text:00000096                                         ; CSequentialInStreamWithCRC::Read(void *,uint,uint *)+8Dj
.text:00000096                 mov     edx, [ebp+var_8]
.text:00000099                 push    edx
.text:0000009A                 mov     edx, [ebp+arg_4]
.text:0000009D                 mov     eax, [ebp+this]
.text:000000A0                 mov     ecx, [eax+18h]
.text:000000A3                 call    @CrcUpdate@12   ; CrcUpdate(x,x,x)
.text:000000A8                 mov     ecx, [ebp+this]
.text:000000AB                 mov     [ecx+18h], eax
.text:000000AE                 cmp     [ebp+arg_C], 0
.text:000000B2                 jz      short loc_BC
.text:000000B4                 mov     edx, [ebp+arg_C]
.text:000000B7                 mov     eax, [ebp+var_8]
.text:000000BA                 mov     [edx], eax
.text:000000BC
.text:000000BC loc_BC:                                 ; CODE XREF: CSequentialInStreamWithCRC::Read(void *,uint,uint *)+B2j
.text:000000BC                 mov     eax, [ebp+var_10]
.text:000000BF                 push    edx
.text:000000C0                 mov     ecx, ebp
.text:000000C2                 push    eax
.text:000000C3                 lea     edx, $LN8
.text:000000C9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000000CE                 pop     eax
.text:000000CF                 pop     edx
.text:000000D0                 pop     esi
.text:000000D1                 add     esp, 14h
.text:000000D4                 cmp     ebp, esp
.text:000000D6                 call    __RTC_CheckEsp
.text:000000DB                 mov     esp, ebp
.text:000000DD                 pop     ebp
.text:000000DE                 retn    10h
.text:000000DE ?Read@CSequentialInStreamWithCRC@@UAGJPAXIPAI@Z endp
.text:000000DE
.text:000000DE ; ---------------------------------------------------------------------------
.text:000000E1                 align 4
.text:000000E4 $LN8            dd 1                    ; DATA XREF: CSequentialInStreamWithCRC::Read(void *,uint,uint *)+C3o
.text:000000E8                 dd offset $LN7
.text:000000EC $LN7            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000000E8o
.text:000000F4                 dd offset $LN6          ; "realProcessed"
.text:000000F8 $LN6            db 'realProcessed',0    ; DATA XREF: .text:000000F4o
.text:00000106                 align 10h
.text:00000110
.text:00000110 ; =============== S U B R O U T I N E =======================================
.text:00000110
.text:00000110 ; Attributes: bp-based frame
.text:00000110
.text:00000110 ; __int32 __stdcall CInStreamWithCRC::Read(CInStreamWithCRC *this, void *, unsigned int, unsigned int *)
.text:00000110                 public ?Read@CInStreamWithCRC@@UAGJPAXIPAI@Z
.text:00000110 ?Read@CInStreamWithCRC@@UAGJPAXIPAI@Z proc near
.text:00000110
.text:00000110 var_14          = dword ptr -14h
.text:00000110 var_10          = dword ptr -10h
.text:00000110 var_C           = dword ptr -0Ch
.text:00000110 var_8           = dword ptr -8
.text:00000110 var_4           = dword ptr -4
.text:00000110 this            = dword ptr  8
.text:00000110 arg_4           = dword ptr  0Ch
.text:00000110 arg_8           = dword ptr  10h
.text:00000110 arg_C           = dword ptr  14h
.text:00000110
.text:00000110                 push    ebp
.text:00000111                 mov     ebp, esp
.text:00000113                 sub     esp, 14h
.text:00000116                 push    esi
.text:00000117                 mov     eax, 0CCCCCCCCh
.text:0000011C                 mov     [ebp+var_14], eax
.text:0000011F                 mov     [ebp+var_10], eax
.text:00000122                 mov     [ebp+var_C], eax
.text:00000125                 mov     [ebp+var_8], eax
.text:00000128                 mov     [ebp+var_4], eax
.text:0000012B                 mov     [ebp+var_8], 0
.text:00000132                 mov     [ebp+var_10], 0
.text:00000139                 mov     ecx, [ebp+this]
.text:0000013C                 add     ecx, 8
.text:0000013F                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00000144                 test    eax, eax
.text:00000146                 jz      short loc_17C
.text:00000148                 mov     ecx, [ebp+this]
.text:0000014B                 add     ecx, 8
.text:0000014E                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00000153                 mov     [ebp+var_14], eax
.text:00000156                 mov     esi, esp
.text:00000158                 lea     eax, [ebp+var_8]
.text:0000015B                 push    eax
.text:0000015C                 mov     ecx, [ebp+arg_8]
.text:0000015F                 push    ecx
.text:00000160                 mov     edx, [ebp+arg_4]
.text:00000163                 push    edx
.text:00000164                 mov     eax, [ebp+var_14]
.text:00000167                 push    eax
.text:00000168                 mov     ecx, [ebp+var_14]
.text:0000016B                 mov     edx, [ecx]
.text:0000016D                 mov     eax, [edx+0Ch]
.text:00000170                 call    eax
.text:00000172                 cmp     esi, esp
.text:00000174                 call    __RTC_CheckEsp
.text:00000179                 mov     [ebp+var_10], eax
.text:0000017C
.text:0000017C loc_17C:                                ; CODE XREF: CInStreamWithCRC::Read(void *,uint,uint *)+36j
.text:0000017C                 mov     ecx, [ebp+var_8]
.text:0000017F                 xor     edx, edx
.text:00000181                 mov     eax, [ebp+this]
.text:00000184                 add     ecx, [eax+10h]
.text:00000187                 adc     edx, [eax+14h]
.text:0000018A                 mov     eax, [ebp+this]
.text:0000018D                 mov     [eax+10h], ecx
.text:00000190                 mov     [eax+14h], edx
.text:00000193                 mov     ecx, [ebp+var_8]
.text:00000196                 push    ecx
.text:00000197                 mov     edx, [ebp+arg_4]
.text:0000019A                 mov     eax, [ebp+this]
.text:0000019D                 mov     ecx, [eax+18h]
.text:000001A0                 call    @CrcUpdate@12   ; CrcUpdate(x,x,x)
.text:000001A5                 mov     ecx, [ebp+this]
.text:000001A8                 mov     [ecx+18h], eax
.text:000001AB                 cmp     [ebp+arg_C], 0
.text:000001AF                 jz      short loc_1B9
.text:000001B1                 mov     edx, [ebp+arg_C]
.text:000001B4                 mov     eax, [ebp+var_8]
.text:000001B7                 mov     [edx], eax
.text:000001B9
.text:000001B9 loc_1B9:                                ; CODE XREF: CInStreamWithCRC::Read(void *,uint,uint *)+9Fj
.text:000001B9                 mov     eax, [ebp+var_10]
.text:000001BC                 push    edx
.text:000001BD                 mov     ecx, ebp
.text:000001BF                 push    eax
.text:000001C0                 lea     edx, $LN7_0
.text:000001C6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000001CB                 pop     eax
.text:000001CC                 pop     edx
.text:000001CD                 pop     esi
.text:000001CE                 add     esp, 14h
.text:000001D1                 cmp     ebp, esp
.text:000001D3                 call    __RTC_CheckEsp
.text:000001D8                 mov     esp, ebp
.text:000001DA                 pop     ebp
.text:000001DB                 retn    10h
.text:000001DB ?Read@CInStreamWithCRC@@UAGJPAXIPAI@Z endp
.text:000001DB
.text:000001DB ; ---------------------------------------------------------------------------
.text:000001DE                 align 10h
.text:000001E0 $LN7_0          dd 1                    ; DATA XREF: CInStreamWithCRC::Read(void *,uint,uint *)+B0o
.text:000001E4                 dd offset $LN6_0
.text:000001E8 $LN6_0          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000001E4o
.text:000001F0                 dd offset $LN5          ; "realProcessed"
.text:000001F4 $LN5            db 'realProcessed',0    ; DATA XREF: .text:000001F0o
.text:00000202                 align 10h
.text:00000210
.text:00000210 ; =============== S U B R O U T I N E =======================================
.text:00000210
.text:00000210 ; Attributes: bp-based frame
.text:00000210
.text:00000210 ; __int32 __stdcall CInStreamWithCRC::Seek(CInStreamWithCRC *this, __int64, unsigned int, unsigned __int64 *)
.text:00000210                 public ?Seek@CInStreamWithCRC@@UAGJ_JIPA_K@Z
.text:00000210 ?Seek@CInStreamWithCRC@@UAGJ_JIPA_K@Z proc near
.text:00000210
.text:00000210 var_4           = dword ptr -4
.text:00000210 this            = dword ptr  8
.text:00000210 arg_4           = qword ptr  0Ch
.text:00000210 arg_C           = dword ptr  14h
.text:00000210 arg_10          = dword ptr  18h
.text:00000210
.text:00000210                 push    ebp
.text:00000211                 mov     ebp, esp
.text:00000213                 push    ecx
.text:00000214                 push    esi
.text:00000215                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000021C                 cmp     [ebp+arg_C], 0
.text:00000220                 jnz     short loc_22A
.text:00000222                 mov     eax, dword ptr [ebp+arg_4]
.text:00000225                 or      eax, dword ptr [ebp+arg_4+4]
.text:00000228                 jz      short loc_231
.text:0000022A
.text:0000022A loc_22A:                                ; CODE XREF: CInStreamWithCRC::Seek(__int64,uint,unsigned __int64 *)+10j
.text:0000022A                 mov     eax, 80004005h
.text:0000022F                 jmp     short loc_281
.text:00000231 ; ---------------------------------------------------------------------------
.text:00000231
.text:00000231 loc_231:                                ; CODE XREF: CInStreamWithCRC::Seek(__int64,uint,unsigned __int64 *)+18j
.text:00000231                 mov     ecx, [ebp+this]
.text:00000234                 mov     dword ptr [ecx+10h], 0
.text:0000023B                 mov     dword ptr [ecx+14h], 0
.text:00000242                 mov     edx, [ebp+this]
.text:00000245                 mov     dword ptr [edx+18h], 0FFFFFFFFh
.text:0000024C                 mov     ecx, [ebp+this]
.text:0000024F                 add     ecx, 8
.text:00000252                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00000257                 mov     [ebp+var_4], eax
.text:0000025A                 mov     esi, esp
.text:0000025C                 mov     eax, [ebp+arg_10]
.text:0000025F                 push    eax
.text:00000260                 mov     ecx, [ebp+arg_C]
.text:00000263                 push    ecx
.text:00000264                 mov     edx, dword ptr [ebp+arg_4+4]
.text:00000267                 push    edx
.text:00000268                 mov     eax, dword ptr [ebp+arg_4]
.text:0000026B                 push    eax
.text:0000026C                 mov     ecx, [ebp+var_4]
.text:0000026F                 push    ecx
.text:00000270                 mov     edx, [ebp+var_4]
.text:00000273                 mov     eax, [edx]
.text:00000275                 mov     ecx, [eax+10h]
.text:00000278                 call    ecx
.text:0000027A                 cmp     esi, esp
.text:0000027C                 call    __RTC_CheckEsp
.text:00000281
.text:00000281 loc_281:                                ; CODE XREF: CInStreamWithCRC::Seek(__int64,uint,unsigned __int64 *)+1Fj
.text:00000281                 pop     esi
.text:00000282                 add     esp, 4
.text:00000285                 cmp     ebp, esp
.text:00000287                 call    __RTC_CheckEsp
.text:0000028C                 mov     esp, ebp
.text:0000028E                 pop     ebp
.text:0000028F                 retn    14h
.text:0000028F ?Seek@CInStreamWithCRC@@UAGJ_JIPA_K@Z endp
.text:0000028F
.text:0000028F ; ---------------------------------------------------------------------------
.text:00000292                 align 4
.text:00000292 _text           ends
.text:00000292
.rtc$TMZ:00000294 ; ===========================================================================
.rtc$TMZ:00000294
.rtc$TMZ:00000294 ; Segment type: Pure data
.rtc$TMZ:00000294 ; Segment permissions: Read
.rtc$TMZ:00000294 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000294                 assume cs:_rtc$TMZ
.rtc$TMZ:00000294                 ;org 294h
.rtc$TMZ:00000294 ; COMDAT (pick any)
.rtc$TMZ:00000294 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000294 _rtc$TMZ        ends
.rtc$TMZ:00000294
.rtc$IMZ:00000298 ; ===========================================================================
.rtc$IMZ:00000298
.rtc$IMZ:00000298 ; Segment type: Pure data
.rtc$IMZ:00000298 ; Segment permissions: Read
.rtc$IMZ:00000298 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000298                 assume cs:_rtc$IMZ
.rtc$IMZ:00000298                 ;org 298h
.rtc$IMZ:00000298 ; COMDAT (pick any)
.rtc$IMZ:00000298 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000298 _rtc$IMZ        ends
.rtc$IMZ:00000298
.text:0000029C ; ===========================================================================
.text:0000029C
.text:0000029C ; Segment type: Pure code
.text:0000029C ; Segment permissions: Read/Execute
.text:0000029C _text           segment para public 'CODE' use32
.text:0000029C                 assume cs:_text
.text:0000029C                 ;org 29Ch
.text:0000029C ; COMDAT (pick any)
.text:0000029C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000029C
.text:0000029C ; =============== S U B R O U T I N E =======================================
.text:0000029C
.text:0000029C ; Attributes: bp-based frame
.text:0000029C
.text:0000029C ; public: __thiscall CMyComPtr<struct ISequentialInStream>::operator struct ISequentialInStream *(void)const
.text:0000029C                 public ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:0000029C ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:0000029C                                         ; CODE XREF: CSequentialInStreamWithCRC::Read(void *,uint,uint *)+2Fp
.text:0000029C
.text:0000029C var_4           = dword ptr -4
.text:0000029C
.text:0000029C                 push    ebp
.text:0000029D                 mov     ebp, esp
.text:0000029F                 push    ecx
.text:000002A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002A7                 mov     [ebp+var_4], ecx
.text:000002AA                 mov     eax, [ebp+var_4]
.text:000002AD                 mov     eax, [eax]
.text:000002AF                 mov     esp, ebp
.text:000002B1                 pop     ebp
.text:000002B2                 retn
.text:000002B2 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:000002B2
.text:000002B2 ; ---------------------------------------------------------------------------
.text:000002B3                 align 4
.text:000002B3 _text           ends
.text:000002B3
.text:000002B4 ; ===========================================================================
.text:000002B4
.text:000002B4 ; Segment type: Pure code
.text:000002B4 ; Segment permissions: Read/Execute
.text:000002B4 _text           segment para public 'CODE' use32
.text:000002B4                 assume cs:_text
.text:000002B4                 ;org 2B4h
.text:000002B4 ; COMDAT (pick any)
.text:000002B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000002B4
.text:000002B4 ; =============== S U B R O U T I N E =======================================
.text:000002B4
.text:000002B4 ; Attributes: bp-based frame
.text:000002B4
.text:000002B4 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator->(void)const
.text:000002B4                 public ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:000002B4 ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:000002B4                                         ; CODE XREF: CSequentialInStreamWithCRC::Read(void *,uint,uint *)+3Ep
.text:000002B4
.text:000002B4 var_4           = dword ptr -4
.text:000002B4
.text:000002B4                 push    ebp
.text:000002B5                 mov     ebp, esp
.text:000002B7                 push    ecx
.text:000002B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002BF                 mov     [ebp+var_4], ecx
.text:000002C2                 mov     eax, [ebp+var_4]
.text:000002C5                 mov     eax, [eax]
.text:000002C7                 mov     esp, ebp
.text:000002C9                 pop     ebp
.text:000002CA                 retn
.text:000002CA ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:000002CA
.text:000002CA ; ---------------------------------------------------------------------------
.text:000002CB                 align 4
.text:000002CB _text           ends
.text:000002CB
.text:000002CC ; ===========================================================================
.text:000002CC
.text:000002CC ; Segment type: Pure code
.text:000002CC ; Segment permissions: Read/Execute
.text:000002CC _text           segment para public 'CODE' use32
.text:000002CC                 assume cs:_text
.text:000002CC                 ;org 2CCh
.text:000002CC ; COMDAT (pick any)
.text:000002CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000002CC
.text:000002CC ; =============== S U B R O U T I N E =======================================
.text:000002CC
.text:000002CC ; Attributes: bp-based frame
.text:000002CC
.text:000002CC ; public: __thiscall CMyComPtr<struct IInStream>::operator struct IInStream *(void)const
.text:000002CC                 public ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:000002CC ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:000002CC                                         ; CODE XREF: CInStreamWithCRC::Read(void *,uint,uint *)+2Fp
.text:000002CC
.text:000002CC var_4           = dword ptr -4
.text:000002CC
.text:000002CC                 push    ebp
.text:000002CD                 mov     ebp, esp
.text:000002CF                 push    ecx
.text:000002D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002D7                 mov     [ebp+var_4], ecx
.text:000002DA                 mov     eax, [ebp+var_4]
.text:000002DD                 mov     eax, [eax]
.text:000002DF                 mov     esp, ebp
.text:000002E1                 pop     ebp
.text:000002E2                 retn
.text:000002E2 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:000002E2
.text:000002E2 ; ---------------------------------------------------------------------------
.text:000002E3                 align 4
.text:000002E3 _text           ends
.text:000002E3
.text:000002E4 ; ===========================================================================
.text:000002E4
.text:000002E4 ; Segment type: Pure code
.text:000002E4 ; Segment permissions: Read/Execute
.text:000002E4 _text           segment para public 'CODE' use32
.text:000002E4                 assume cs:_text
.text:000002E4                 ;org 2E4h
.text:000002E4 ; COMDAT (pick any)
.text:000002E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000002E4
.text:000002E4 ; =============== S U B R O U T I N E =======================================
.text:000002E4
.text:000002E4 ; Attributes: bp-based frame
.text:000002E4
.text:000002E4 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator->(void)const
.text:000002E4                 public ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:000002E4 ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:000002E4                                         ; CODE XREF: CInStreamWithCRC::Read(void *,uint,uint *)+3Ep
.text:000002E4                                         ; CInStreamWithCRC::Seek(__int64,uint,unsigned __int64 *)+42p
.text:000002E4
.text:000002E4 var_4           = dword ptr -4
.text:000002E4
.text:000002E4                 push    ebp
.text:000002E5                 mov     ebp, esp
.text:000002E7                 push    ecx
.text:000002E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002EF                 mov     [ebp+var_4], ecx
.text:000002F2                 mov     eax, [ebp+var_4]
.text:000002F5                 mov     eax, [eax]
.text:000002F7                 mov     esp, ebp
.text:000002F9                 pop     ebp
.text:000002FA                 retn
.text:000002FA ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:000002FA
.text:000002FA _text           ends
.text:000002FA
UNDEF:00000300 ; ===========================================================================
UNDEF:00000300
UNDEF:00000300 ; Segment type: Externs
UNDEF:00000300 ; UNDEF
UNDEF:00000300 ; __fastcall CrcUpdate(x, x, x)
UNDEF:00000300                 extrn @CrcUpdate@12:near
UNDEF:00000300                                         ; CODE XREF: CSequentialInStreamWithCRC::Read(void *,uint,uint *)+A3p
UNDEF:00000300                                         ; CInStreamWithCRC::Read(void *,uint,uint *)+90p
UNDEF:00000304 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000304                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000304                                         ; CODE XREF: CSequentialInStreamWithCRC::Read(void *,uint,uint *)+C9p
UNDEF:00000304                                         ; CInStreamWithCRC::Read(void *,uint,uint *)+B6p
UNDEF:00000308                 extrn __RTC_CheckEsp:near
UNDEF:00000308                                         ; CODE XREF: CSequentialInStreamWithCRC::Read(void *,uint,uint *)+64p
UNDEF:00000308                                         ; CSequentialInStreamWithCRC::Read(void *,uint,uint *)+D6p ...
UNDEF:0000030C                 extrn __RTC_Shutdown:near
UNDEF:0000030C                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000310                 extrn __RTC_InitBase:near
UNDEF:00000310                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000310
UNDEF:00000310
UNDEF:00000310                 end