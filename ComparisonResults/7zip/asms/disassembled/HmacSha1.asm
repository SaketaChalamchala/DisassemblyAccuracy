.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : BD9219017F36F619915C12721914939D
.text:00000000 ; Input CRC32 : FB07C97C
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\HmacSha1.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; void __thiscall NCrypto::NSha1::CHmac::SetKey(NCrypto::NSha1::CHmac *this, const unsigned __int8 *, unsigned int)
.text:00000000                 public ?SetKey@CHmac@NSha1@NCrypto@@QAEXPBEI@Z
.text:00000000 ?SetKey@CHmac@NSha1@NCrypto@@QAEXPBEI@Z proc near
.text:00000000
.text:00000000 var_54          = dword ptr -54h
.text:00000000 var_4C          = byte ptr -4Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 54h
.text:00000006                 push    edi
.text:00000007                 push    ecx
.text:00000008                 lea     edi, [ebp+var_54]
.text:0000000B                 mov     ecx, 15h
.text:00000010                 mov     eax, 0CCCCCCCCh
.text:00000015                 rep stosd
.text:00000017                 pop     ecx
.text:00000018                 mov     eax, dword ptr ds:___security_cookie
.text:0000001D                 xor     eax, ebp
.text:0000001F                 mov     [ebp+var_4], eax
.text:00000022                 mov     [ebp+var_8], ecx
.text:00000025                 mov     [ebp+var_54], 0
.text:0000002C                 jmp     short loc_37
.text:0000002E ; ---------------------------------------------------------------------------
.text:0000002E
.text:0000002E loc_2E:                                 ; CODE XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+45j
.text:0000002E                 mov     eax, [ebp+var_54]
.text:00000031                 add     eax, 1
.text:00000034                 mov     [ebp+var_54], eax
.text:00000037
.text:00000037 loc_37:                                 ; CODE XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+2Cj
.text:00000037                 cmp     [ebp+var_54], 40h ; '@'
.text:0000003B                 jnb     short loc_47
.text:0000003D                 mov     ecx, [ebp+var_54]
.text:00000040                 mov     [ebp+ecx+var_4C], 0
.text:00000045                 jmp     short loc_2E
.text:00000047 ; ---------------------------------------------------------------------------
.text:00000047
.text:00000047 loc_47:                                 ; CODE XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+3Bj
.text:00000047                 cmp     [ebp+arg_4], 40h ; '@'
.text:0000004B                 jbe     short loc_73
.text:0000004D                 mov     ecx, [ebp+var_8] ; this
.text:00000050                 call    ?Init@CContextBase@NSha1@NCrypto@@QAEXXZ ; NCrypto::NSha1::CContextBase::Init(void)
.text:00000055                 mov     edx, [ebp+arg_4]
.text:00000058                 push    edx             ; unsigned int
.text:00000059                 mov     eax, [ebp+arg_0]
.text:0000005C                 push    eax             ; unsigned __int8 *
.text:0000005D                 mov     ecx, [ebp+var_8] ; this
.text:00000060                 call    ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CContext::Update(uchar const *,uint)
.text:00000065                 lea     ecx, [ebp+var_4C]
.text:00000068                 push    ecx             ; unsigned __int8 *
.text:00000069                 mov     ecx, [ebp+var_8] ; this
.text:0000006C                 call    ?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z ; NCrypto::NSha1::CContext::Final(uchar *)
.text:00000071                 jmp     short loc_9E
.text:00000073 ; ---------------------------------------------------------------------------
.text:00000073
.text:00000073 loc_73:                                 ; CODE XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+4Bj
.text:00000073                 mov     [ebp+var_54], 0
.text:0000007A                 jmp     short loc_85
.text:0000007C ; ---------------------------------------------------------------------------
.text:0000007C
.text:0000007C loc_7C:                                 ; CODE XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+9Cj
.text:0000007C                 mov     edx, [ebp+var_54]
.text:0000007F                 add     edx, 1
.text:00000082                 mov     [ebp+var_54], edx
.text:00000085
.text:00000085 loc_85:                                 ; CODE XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+7Aj
.text:00000085                 mov     eax, [ebp+var_54]
.text:00000088                 cmp     eax, [ebp+arg_4]
.text:0000008B                 jnb     short loc_9E
.text:0000008D                 mov     ecx, [ebp+arg_0]
.text:00000090                 add     ecx, [ebp+var_54]
.text:00000093                 mov     edx, [ebp+var_54]
.text:00000096                 mov     al, [ecx]
.text:00000098                 mov     [ebp+edx+var_4C], al
.text:0000009C                 jmp     short loc_7C
.text:0000009E ; ---------------------------------------------------------------------------
.text:0000009E
.text:0000009E loc_9E:                                 ; CODE XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+71j
.text:0000009E                                         ; NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+8Bj
.text:0000009E                 mov     [ebp+var_54], 0
.text:000000A5                 jmp     short loc_B0
.text:000000A7 ; ---------------------------------------------------------------------------
.text:000000A7
.text:000000A7 loc_A7:                                 ; CODE XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+C8j
.text:000000A7                 mov     ecx, [ebp+var_54]
.text:000000AA                 add     ecx, 1
.text:000000AD                 mov     [ebp+var_54], ecx
.text:000000B0
.text:000000B0 loc_B0:                                 ; CODE XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+A5j
.text:000000B0                 cmp     [ebp+var_54], 40h ; '@'
.text:000000B4                 jnb     short loc_CA
.text:000000B6                 mov     edx, [ebp+var_54]
.text:000000B9                 movzx   eax, [ebp+edx+var_4C]
.text:000000BE                 xor     eax, 36h
.text:000000C1                 mov     ecx, [ebp+var_54]
.text:000000C4                 mov     [ebp+ecx+var_4C], al
.text:000000C8                 jmp     short loc_A7
.text:000000CA ; ---------------------------------------------------------------------------
.text:000000CA
.text:000000CA loc_CA:                                 ; CODE XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+B4j
.text:000000CA                 mov     ecx, [ebp+var_8] ; this
.text:000000CD                 call    ?Init@CContextBase@NSha1@NCrypto@@QAEXXZ ; NCrypto::NSha1::CContextBase::Init(void)
.text:000000D2                 push    40h ; '@'       ; unsigned int
.text:000000D4                 lea     edx, [ebp+var_4C]
.text:000000D7                 push    edx             ; unsigned __int8 *
.text:000000D8                 mov     ecx, [ebp+var_8] ; this
.text:000000DB                 call    ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CContext::Update(uchar const *,uint)
.text:000000E0                 mov     [ebp+var_54], 0
.text:000000E7                 jmp     short loc_F2
.text:000000E9 ; ---------------------------------------------------------------------------
.text:000000E9
.text:000000E9 loc_E9:                                 ; CODE XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+10Aj
.text:000000E9                 mov     eax, [ebp+var_54]
.text:000000EC                 add     eax, 1
.text:000000EF                 mov     [ebp+var_54], eax
.text:000000F2
.text:000000F2 loc_F2:                                 ; CODE XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+E7j
.text:000000F2                 cmp     [ebp+var_54], 40h ; '@'
.text:000000F6                 jnb     short loc_10C
.text:000000F8                 mov     ecx, [ebp+var_54]
.text:000000FB                 movzx   edx, [ebp+ecx+var_4C]
.text:00000100                 xor     edx, 6Ah
.text:00000103                 mov     eax, [ebp+var_54]
.text:00000106                 mov     [ebp+eax+var_4C], dl
.text:0000010A                 jmp     short loc_E9
.text:0000010C ; ---------------------------------------------------------------------------
.text:0000010C
.text:0000010C loc_10C:                                ; CODE XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+F6j
.text:0000010C                 mov     ecx, [ebp+var_8]
.text:0000010F                 add     ecx, 60h ; '`'  ; this
.text:00000112                 call    ?Init@CContextBase@NSha1@NCrypto@@QAEXXZ ; NCrypto::NSha1::CContextBase::Init(void)
.text:00000117                 push    40h ; '@'       ; unsigned int
.text:00000119                 lea     ecx, [ebp+var_4C]
.text:0000011C                 push    ecx             ; unsigned __int8 *
.text:0000011D                 mov     ecx, [ebp+var_8]
.text:00000120                 add     ecx, 60h ; '`'  ; this
.text:00000123                 call    ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CContext::Update(uchar const *,uint)
.text:00000128                 push    edx
.text:00000129                 mov     ecx, ebp
.text:0000012B                 push    eax
.text:0000012C                 lea     edx, $LN19
.text:00000132                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000137                 pop     eax
.text:00000138                 pop     edx
.text:00000139                 pop     edi
.text:0000013A                 mov     ecx, [ebp+var_4]
.text:0000013D                 xor     ecx, ebp
.text:0000013F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000144                 add     esp, 54h
.text:00000147                 cmp     ebp, esp
.text:00000149                 call    __RTC_CheckEsp
.text:0000014E                 mov     esp, ebp
.text:00000150                 pop     ebp
.text:00000151                 retn    8
.text:00000151 ?SetKey@CHmac@NSha1@NCrypto@@QAEXPBEI@Z endp
.text:00000151
.text:00000151 ; ---------------------------------------------------------------------------
.text:00000154 $LN19           dd 1                    ; DATA XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+12Co
.text:00000158                 dd offset $LN18
.text:0000015C $LN18           dd 0FFFFFFB4h, 40h      ; DATA XREF: .text:00000158o
.text:00000164                 dd offset $LN17         ; "keyTemp"
.text:00000168 $LN17           db 'keyTemp',0          ; DATA XREF: .text:00000164o
.text:00000170
.text:00000170 ; =============== S U B R O U T I N E =======================================
.text:00000170
.text:00000170 ; Attributes: bp-based frame
.text:00000170
.text:00000170 ; void __thiscall NCrypto::NSha1::CHmac::Final(NCrypto::NSha1::CHmac *this, unsigned __int8 *, unsigned int)
.text:00000170                 public ?Final@CHmac@NSha1@NCrypto@@QAEXPAEI@Z
.text:00000170 ?Final@CHmac@NSha1@NCrypto@@QAEXPAEI@Z proc near
.text:00000170
.text:00000170 var_28          = dword ptr -28h
.text:00000170 var_20          = byte ptr -20h
.text:00000170 var_8           = dword ptr -8
.text:00000170 var_4           = dword ptr -4
.text:00000170 arg_0           = dword ptr  8
.text:00000170 arg_4           = dword ptr  0Ch
.text:00000170
.text:00000170                 push    ebp
.text:00000171                 mov     ebp, esp
.text:00000173                 sub     esp, 28h
.text:00000176                 push    edi
.text:00000177                 push    ecx
.text:00000178                 lea     edi, [ebp+var_28]
.text:0000017B                 mov     ecx, 0Ah
.text:00000180                 mov     eax, 0CCCCCCCCh
.text:00000185                 rep stosd
.text:00000187                 pop     ecx
.text:00000188                 mov     eax, dword ptr ds:___security_cookie
.text:0000018D                 xor     eax, ebp
.text:0000018F                 mov     [ebp+var_4], eax
.text:00000192                 mov     [ebp+var_8], ecx
.text:00000195                 lea     eax, [ebp+var_20]
.text:00000198                 push    eax             ; unsigned __int8 *
.text:00000199                 mov     ecx, [ebp+var_8] ; this
.text:0000019C                 call    ?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z ; NCrypto::NSha1::CContext::Final(uchar *)
.text:000001A1                 push    14h             ; unsigned int
.text:000001A3                 lea     ecx, [ebp+var_20]
.text:000001A6                 push    ecx             ; unsigned __int8 *
.text:000001A7                 mov     ecx, [ebp+var_8]
.text:000001AA                 add     ecx, 60h ; '`'  ; this
.text:000001AD                 call    ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CContext::Update(uchar const *,uint)
.text:000001B2                 lea     edx, [ebp+var_20]
.text:000001B5                 push    edx             ; unsigned __int8 *
.text:000001B6                 mov     ecx, [ebp+var_8]
.text:000001B9                 add     ecx, 60h ; '`'  ; this
.text:000001BC                 call    ?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z ; NCrypto::NSha1::CContext::Final(uchar *)
.text:000001C1                 mov     [ebp+var_28], 0
.text:000001C8                 jmp     short loc_1D3
.text:000001CA ; ---------------------------------------------------------------------------
.text:000001CA
.text:000001CA loc_1CA:                                ; CODE XREF: NCrypto::NSha1::CHmac::Final(uchar *,uint)+7Aj
.text:000001CA                 mov     eax, [ebp+var_28]
.text:000001CD                 add     eax, 1
.text:000001D0                 mov     [ebp+var_28], eax
.text:000001D3
.text:000001D3 loc_1D3:                                ; CODE XREF: NCrypto::NSha1::CHmac::Final(uchar *,uint)+58j
.text:000001D3                 mov     ecx, [ebp+var_28]
.text:000001D6                 cmp     ecx, [ebp+arg_4]
.text:000001D9                 jnb     short loc_1EC
.text:000001DB                 mov     edx, [ebp+arg_0]
.text:000001DE                 add     edx, [ebp+var_28]
.text:000001E1                 mov     eax, [ebp+var_28]
.text:000001E4                 mov     cl, [ebp+eax+var_20]
.text:000001E8                 mov     [edx], cl
.text:000001EA                 jmp     short loc_1CA
.text:000001EC ; ---------------------------------------------------------------------------
.text:000001EC
.text:000001EC loc_1EC:                                ; CODE XREF: NCrypto::NSha1::CHmac::Final(uchar *,uint)+69j
.text:000001EC                 push    edx
.text:000001ED                 mov     ecx, ebp
.text:000001EF                 push    eax
.text:000001F0                 lea     edx, $LN8
.text:000001F6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000001FB                 pop     eax
.text:000001FC                 pop     edx
.text:000001FD                 pop     edi
.text:000001FE                 mov     ecx, [ebp+var_4]
.text:00000201                 xor     ecx, ebp
.text:00000203                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000208                 add     esp, 28h
.text:0000020B                 cmp     ebp, esp
.text:0000020D                 call    __RTC_CheckEsp
.text:00000212                 mov     esp, ebp
.text:00000214                 pop     ebp
.text:00000215                 retn    8
.text:00000215 ?Final@CHmac@NSha1@NCrypto@@QAEXPAEI@Z endp
.text:00000215
.text:00000215 ; ---------------------------------------------------------------------------
.text:00000218 $LN8            dd 1                    ; DATA XREF: NCrypto::NSha1::CHmac::Final(uchar *,uint)+80o
.text:0000021C                 dd offset $LN7
.text:00000220 $LN7            dd 0FFFFFFE0h, 14h      ; DATA XREF: .text:0000021Co
.text:00000228                 dd offset $LN6          ; "digest"
.text:0000022C $LN6            db 'digest',0           ; DATA XREF: .text:00000228o
.text:00000233                 align 10h
.text:00000240
.text:00000240 ; =============== S U B R O U T I N E =======================================
.text:00000240
.text:00000240 ; Attributes: bp-based frame
.text:00000240
.text:00000240 ; void __thiscall NCrypto::NSha1::CHmac32::SetKey(NCrypto::NSha1::CHmac32 *this, const unsigned __int8 *, unsigned int)
.text:00000240                 public ?SetKey@CHmac32@NSha1@NCrypto@@QAEXPBEI@Z
.text:00000240 ?SetKey@CHmac32@NSha1@NCrypto@@QAEXPBEI@Z proc near
.text:00000240
.text:00000240 var_D8          = byte ptr -0D8h
.text:00000240 var_D4          = byte ptr -0D4h
.text:00000240 var_B8          = byte ptr -0B8h
.text:00000240 var_54          = dword ptr -54h
.text:00000240 var_4C          = dword ptr -4Ch
.text:00000240 var_8           = dword ptr -8
.text:00000240 var_4           = dword ptr -4
.text:00000240 arg_0           = dword ptr  8
.text:00000240 arg_4           = dword ptr  0Ch
.text:00000240
.text:00000240                 push    ebp
.text:00000241                 mov     ebp, esp
.text:00000243                 sub     esp, 0D8h
.text:00000249                 push    esi
.text:0000024A                 push    edi
.text:0000024B                 push    ecx
.text:0000024C                 lea     edi, [ebp+var_D8]
.text:00000252                 mov     ecx, 36h ; '6'
.text:00000257                 mov     eax, 0CCCCCCCCh
.text:0000025C                 rep stosd
.text:0000025E                 pop     ecx
.text:0000025F                 mov     eax, dword ptr ds:___security_cookie
.text:00000264                 xor     eax, ebp
.text:00000266                 mov     [ebp+var_4], eax
.text:00000269                 mov     [ebp+var_8], ecx
.text:0000026C                 mov     [ebp+var_54], 0
.text:00000273                 jmp     short loc_27E
.text:00000275 ; ---------------------------------------------------------------------------
.text:00000275
.text:00000275 loc_275:                                ; CODE XREF: NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint)+4Fj
.text:00000275                 mov     eax, [ebp+var_54]
.text:00000278                 add     eax, 1
.text:0000027B                 mov     [ebp+var_54], eax
.text:0000027E
.text:0000027E loc_27E:                                ; CODE XREF: NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint)+33j
.text:0000027E                 cmp     [ebp+var_54], 10h
.text:00000282                 jnb     short loc_291
.text:00000284                 mov     ecx, [ebp+var_54]
.text:00000287                 mov     [ebp+ecx*4+var_4C], 0
.text:0000028F                 jmp     short loc_275
.text:00000291 ; ---------------------------------------------------------------------------
.text:00000291
.text:00000291 loc_291:                                ; CODE XREF: NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint)+42j
.text:00000291                 cmp     [ebp+arg_4], 40h ; '@'
.text:00000295                 jbe     short loc_2F6
.text:00000297                 lea     ecx, [ebp+var_B8] ; this
.text:0000029D                 call    ?Init@CContextBase@NSha1@NCrypto@@QAEXXZ ; NCrypto::NSha1::CContextBase::Init(void)
.text:000002A2                 mov     edx, [ebp+arg_4]
.text:000002A5                 push    edx             ; unsigned int
.text:000002A6                 mov     eax, [ebp+arg_0]
.text:000002A9                 push    eax             ; unsigned __int8 *
.text:000002AA                 lea     ecx, [ebp+var_B8] ; this
.text:000002B0                 call    ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CContext::Update(uchar const *,uint)
.text:000002B5                 lea     ecx, [ebp+var_D4]
.text:000002BB                 push    ecx             ; unsigned __int8 *
.text:000002BC                 lea     ecx, [ebp+var_B8] ; this
.text:000002C2                 call    ?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z ; NCrypto::NSha1::CContext::Final(uchar *)
.text:000002C7                 mov     [ebp+var_54], 0
.text:000002CE                 jmp     short loc_2D9
.text:000002D0 ; ---------------------------------------------------------------------------
.text:000002D0
.text:000002D0 loc_2D0:                                ; CODE XREF: NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint)+B2j
.text:000002D0                 mov     edx, [ebp+var_54]
.text:000002D3                 add     edx, 1
.text:000002D6                 mov     [ebp+var_54], edx
.text:000002D9
.text:000002D9 loc_2D9:                                ; CODE XREF: NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint)+8Ej
.text:000002D9                 cmp     [ebp+var_54], 5
.text:000002DD                 jnb     short loc_2F4
.text:000002DF                 mov     eax, [ebp+var_54]
.text:000002E2                 mov     ecx, dword ptr [ebp+eax*4+var_D4]
.text:000002E9                 bswap   ecx
.text:000002EB                 mov     edx, [ebp+var_54]
.text:000002EE                 mov     [ebp+edx*4+var_4C], ecx
.text:000002F2                 jmp     short loc_2D0
.text:000002F4 ; ---------------------------------------------------------------------------
.text:000002F4
.text:000002F4 loc_2F4:                                ; CODE XREF: NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint)+9Dj
.text:000002F4                 jmp     short loc_343
.text:000002F6 ; ---------------------------------------------------------------------------
.text:000002F6
.text:000002F6 loc_2F6:                                ; CODE XREF: NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint)+55j
.text:000002F6                 mov     [ebp+var_54], 0
.text:000002FD                 jmp     short loc_308
.text:000002FF ; ---------------------------------------------------------------------------
.text:000002FF
.text:000002FF loc_2FF:                                ; CODE XREF: NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint)+101j
.text:000002FF                 mov     eax, [ebp+var_54]
.text:00000302                 add     eax, 1
.text:00000305                 mov     [ebp+var_54], eax
.text:00000308
.text:00000308 loc_308:                                ; CODE XREF: NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint)+BDj
.text:00000308                 mov     ecx, [ebp+var_54]
.text:0000030B                 cmp     ecx, [ebp+arg_4]
.text:0000030E                 jnb     short loc_343
.text:00000310                 mov     edx, [ebp+var_54]
.text:00000313                 shr     edx, 2
.text:00000316                 mov     eax, [ebp+arg_0]
.text:00000319                 add     eax, [ebp+var_54]
.text:0000031C                 movzx   eax, byte ptr [eax]
.text:0000031F                 mov     ecx, [ebp+var_54]
.text:00000322                 and     ecx, 3
.text:00000325                 shl     ecx, 3
.text:00000328                 mov     esi, 18h
.text:0000032D                 sub     esi, ecx
.text:0000032F                 mov     ecx, esi
.text:00000331                 shl     eax, cl
.text:00000333                 or      eax, [ebp+edx*4+var_4C]
.text:00000337                 mov     edx, [ebp+var_54]
.text:0000033A                 shr     edx, 2
.text:0000033D                 mov     [ebp+edx*4+var_4C], eax
.text:00000341                 jmp     short loc_2FF
.text:00000343 ; ---------------------------------------------------------------------------
.text:00000343
.text:00000343 loc_343:                                ; CODE XREF: NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint):loc_2F4j
.text:00000343                                         ; NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint)+CEj
.text:00000343                 mov     [ebp+var_54], 0
.text:0000034A                 jmp     short loc_355
.text:0000034C ; ---------------------------------------------------------------------------
.text:0000034C
.text:0000034C loc_34C:                                ; CODE XREF: NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint)+12Fj
.text:0000034C                 mov     eax, [ebp+var_54]
.text:0000034F                 add     eax, 1
.text:00000352                 mov     [ebp+var_54], eax
.text:00000355
.text:00000355 loc_355:                                ; CODE XREF: NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint)+10Aj
.text:00000355                 cmp     [ebp+var_54], 10h
.text:00000359                 jnb     short loc_371
.text:0000035B                 mov     ecx, [ebp+var_54]
.text:0000035E                 mov     edx, [ebp+ecx*4+var_4C]
.text:00000362                 xor     edx, 36363636h
.text:00000368                 mov     eax, [ebp+var_54]
.text:0000036B                 mov     [ebp+eax*4+var_4C], edx
.text:0000036F                 jmp     short loc_34C
.text:00000371 ; ---------------------------------------------------------------------------
.text:00000371
.text:00000371 loc_371:                                ; CODE XREF: NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint)+119j
.text:00000371                 mov     ecx, [ebp+var_8] ; this
.text:00000374                 call    ?Init@CContextBase@NSha1@NCrypto@@QAEXXZ ; NCrypto::NSha1::CContextBase::Init(void)
.text:00000379                 push    10h             ; unsigned int
.text:0000037B                 lea     ecx, [ebp+var_4C]
.text:0000037E                 push    ecx             ; unsigned int *
.text:0000037F                 mov     ecx, [ebp+var_8] ; this
.text:00000382                 call    ?Update@CContext32@NSha1@NCrypto@@QAEXPBII@Z ; NCrypto::NSha1::CContext32::Update(uint const *,uint)
.text:00000387                 mov     [ebp+var_54], 0
.text:0000038E                 jmp     short loc_399
.text:00000390 ; ---------------------------------------------------------------------------
.text:00000390
.text:00000390 loc_390:                                ; CODE XREF: NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint)+173j
.text:00000390                 mov     edx, [ebp+var_54]
.text:00000393                 add     edx, 1
.text:00000396                 mov     [ebp+var_54], edx
.text:00000399
.text:00000399 loc_399:                                ; CODE XREF: NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint)+14Ej
.text:00000399                 cmp     [ebp+var_54], 10h
.text:0000039D                 jnb     short loc_3B5
.text:0000039F                 mov     eax, [ebp+var_54]
.text:000003A2                 mov     ecx, [ebp+eax*4+var_4C]
.text:000003A6                 xor     ecx, 6A6A6A6Ah
.text:000003AC                 mov     edx, [ebp+var_54]
.text:000003AF                 mov     [ebp+edx*4+var_4C], ecx
.text:000003B3                 jmp     short loc_390
.text:000003B5 ; ---------------------------------------------------------------------------
.text:000003B5
.text:000003B5 loc_3B5:                                ; CODE XREF: NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint)+15Dj
.text:000003B5                 mov     ecx, [ebp+var_8]
.text:000003B8                 add     ecx, 60h ; '`'  ; this
.text:000003BB                 call    ?Init@CContextBase@NSha1@NCrypto@@QAEXXZ ; NCrypto::NSha1::CContextBase::Init(void)
.text:000003C0                 push    10h             ; unsigned int
.text:000003C2                 lea     eax, [ebp+var_4C]
.text:000003C5                 push    eax             ; unsigned int *
.text:000003C6                 mov     ecx, [ebp+var_8]
.text:000003C9                 add     ecx, 60h ; '`'  ; this
.text:000003CC                 call    ?Update@CContext32@NSha1@NCrypto@@QAEXPBII@Z ; NCrypto::NSha1::CContext32::Update(uint const *,uint)
.text:000003D1                 push    edx
.text:000003D2                 mov     ecx, ebp
.text:000003D4                 push    eax
.text:000003D5                 lea     edx, $LN24
.text:000003DB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000003E0                 pop     eax
.text:000003E1                 pop     edx
.text:000003E2                 pop     edi
.text:000003E3                 pop     esi
.text:000003E4                 mov     ecx, [ebp+var_4]
.text:000003E7                 xor     ecx, ebp
.text:000003E9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000003EE                 add     esp, 0D8h
.text:000003F4                 cmp     ebp, esp
.text:000003F6                 call    __RTC_CheckEsp
.text:000003FB                 mov     esp, ebp
.text:000003FD                 pop     ebp
.text:000003FE                 retn    8
.text:000003FE ?SetKey@CHmac32@NSha1@NCrypto@@QAEXPBEI@Z endp
.text:000003FE
.text:000003FE ; ---------------------------------------------------------------------------
.text:00000401                 align 4
.text:00000404 $LN24           dd 3                    ; DATA XREF: NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint)+195o
.text:00000408                 dd offset $LN23
.text:0000040C $LN23           dd 0FFFFFFB4h, 40h      ; DATA XREF: .text:00000408o
.text:00000414                 dd offset $LN20         ; "keyTemp"
.text:00000418                 dd 0FFFFFF48h, 60h
.text:00000420                 dd offset $LN21         ; "sha"
.text:00000424                 dd 0FFFFFF2Ch, 14h
.text:0000042C                 dd offset $LN22         ; "digest"
.text:00000430 $LN22           db 'digest',0           ; DATA XREF: .text:0000042Co
.text:00000437 $LN21           db 'sha',0              ; DATA XREF: .text:00000420o
.text:0000043B $LN20           db 'keyTemp',0          ; DATA XREF: .text:00000414o
.text:00000443                 align 10h
.text:00000450
.text:00000450 ; =============== S U B R O U T I N E =======================================
.text:00000450
.text:00000450 ; Attributes: bp-based frame
.text:00000450
.text:00000450 ; void __thiscall NCrypto::NSha1::CHmac32::Final(NCrypto::NSha1::CHmac32 *this, unsigned int *, unsigned int)
.text:00000450                 public ?Final@CHmac32@NSha1@NCrypto@@QAEXPAII@Z
.text:00000450 ?Final@CHmac32@NSha1@NCrypto@@QAEXPAII@Z proc near
.text:00000450
.text:00000450 var_28          = dword ptr -28h
.text:00000450 var_20          = dword ptr -20h
.text:00000450 var_8           = dword ptr -8
.text:00000450 var_4           = dword ptr -4
.text:00000450 arg_0           = dword ptr  8
.text:00000450 arg_4           = dword ptr  0Ch
.text:00000450
.text:00000450                 push    ebp
.text:00000451                 mov     ebp, esp
.text:00000453                 sub     esp, 28h
.text:00000456                 push    edi
.text:00000457                 push    ecx
.text:00000458                 lea     edi, [ebp+var_28]
.text:0000045B                 mov     ecx, 0Ah
.text:00000460                 mov     eax, 0CCCCCCCCh
.text:00000465                 rep stosd
.text:00000467                 pop     ecx
.text:00000468                 mov     eax, dword ptr ds:___security_cookie
.text:0000046D                 xor     eax, ebp
.text:0000046F                 mov     [ebp+var_4], eax
.text:00000472                 mov     [ebp+var_8], ecx
.text:00000475                 lea     eax, [ebp+var_20]
.text:00000478                 push    eax             ; unsigned int *
.text:00000479                 mov     ecx, [ebp+var_8] ; this
.text:0000047C                 call    ?Final@CContext32@NSha1@NCrypto@@QAEXPAI@Z ; NCrypto::NSha1::CContext32::Final(uint *)
.text:00000481                 push    5               ; unsigned int
.text:00000483                 lea     ecx, [ebp+var_20]
.text:00000486                 push    ecx             ; unsigned int *
.text:00000487                 mov     ecx, [ebp+var_8]
.text:0000048A                 add     ecx, 60h ; '`'  ; this
.text:0000048D                 call    ?Update@CContext32@NSha1@NCrypto@@QAEXPBII@Z ; NCrypto::NSha1::CContext32::Update(uint const *,uint)
.text:00000492                 lea     edx, [ebp+var_20]
.text:00000495                 push    edx             ; unsigned int *
.text:00000496                 mov     ecx, [ebp+var_8]
.text:00000499                 add     ecx, 60h ; '`'  ; this
.text:0000049C                 call    ?Final@CContext32@NSha1@NCrypto@@QAEXPAI@Z ; NCrypto::NSha1::CContext32::Final(uint *)
.text:000004A1                 mov     [ebp+var_28], 0
.text:000004A8                 jmp     short loc_4B3
.text:000004AA ; ---------------------------------------------------------------------------
.text:000004AA
.text:000004AA loc_4AA:                                ; CODE XREF: NCrypto::NSha1::CHmac32::Final(uint *,uint)+7Bj
.text:000004AA                 mov     eax, [ebp+var_28]
.text:000004AD                 add     eax, 1
.text:000004B0                 mov     [ebp+var_28], eax
.text:000004B3
.text:000004B3 loc_4B3:                                ; CODE XREF: NCrypto::NSha1::CHmac32::Final(uint *,uint)+58j
.text:000004B3                 mov     ecx, [ebp+var_28]
.text:000004B6                 cmp     ecx, [ebp+arg_4]
.text:000004B9                 jnb     short loc_4CD
.text:000004BB                 mov     edx, [ebp+var_28]
.text:000004BE                 mov     eax, [ebp+arg_0]
.text:000004C1                 mov     ecx, [ebp+var_28]
.text:000004C4                 mov     ecx, [ebp+ecx*4+var_20]
.text:000004C8                 mov     [eax+edx*4], ecx
.text:000004CB                 jmp     short loc_4AA
.text:000004CD ; ---------------------------------------------------------------------------
.text:000004CD
.text:000004CD loc_4CD:                                ; CODE XREF: NCrypto::NSha1::CHmac32::Final(uint *,uint)+69j
.text:000004CD                 push    edx
.text:000004CE                 mov     ecx, ebp
.text:000004D0                 push    eax
.text:000004D1                 lea     edx, $LN8_0
.text:000004D7                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000004DC                 pop     eax
.text:000004DD                 pop     edx
.text:000004DE                 pop     edi
.text:000004DF                 mov     ecx, [ebp+var_4]
.text:000004E2                 xor     ecx, ebp
.text:000004E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000004E9                 add     esp, 28h
.text:000004EC                 cmp     ebp, esp
.text:000004EE                 call    __RTC_CheckEsp
.text:000004F3                 mov     esp, ebp
.text:000004F5                 pop     ebp
.text:000004F6                 retn    8
.text:000004F6 ?Final@CHmac32@NSha1@NCrypto@@QAEXPAII@Z endp
.text:000004F6
.text:000004F6 ; ---------------------------------------------------------------------------
.text:000004F9                 align 4
.text:000004FC $LN8_0          dd 1                    ; DATA XREF: NCrypto::NSha1::CHmac32::Final(uint *,uint)+81o
.text:00000500                 dd offset $LN7_0
.text:00000504 $LN7_0          dd 0FFFFFFE0h, 14h      ; DATA XREF: .text:00000500o
.text:0000050C                 dd offset $LN6_0        ; "digest"
.text:00000510 $LN6_0          db 'digest',0           ; DATA XREF: .text:0000050Co
.text:00000517                 align 10h
.text:00000520
.text:00000520 ; =============== S U B R O U T I N E =======================================
.text:00000520
.text:00000520 ; Attributes: bp-based frame
.text:00000520
.text:00000520 ; void __thiscall NCrypto::NSha1::CHmac32::GetLoopXorDigest(NCrypto::NSha1::CHmac32 *this, unsigned int *, unsigned int)
.text:00000520                 public ?GetLoopXorDigest@CHmac32@NSha1@NCrypto@@QAEXPAII@Z
.text:00000520 ?GetLoopXorDigest@CHmac32@NSha1@NCrypto@@QAEXPAII@Z proc near
.text:00000520
.text:00000520 var_A4          = dword ptr -0A4h
.text:00000520 var_A0          = dword ptr -0A0h
.text:00000520 var_9C          = dword ptr -9Ch
.text:00000520 var_94          = dword ptr -94h
.text:00000520 var_4C          = dword ptr -4Ch
.text:00000520 var_8           = dword ptr -8
.text:00000520 var_4           = dword ptr -4
.text:00000520 arg_0           = dword ptr  8
.text:00000520 arg_4           = dword ptr  0Ch
.text:00000520
.text:00000520                 push    ebp
.text:00000521                 mov     ebp, esp
.text:00000523                 sub     esp, 0A4h
.text:00000529                 push    edi
.text:0000052A                 push    ecx
.text:0000052B                 lea     edi, [ebp+var_A4]
.text:00000531                 mov     ecx, 29h ; ')'
.text:00000536                 mov     eax, 0CCCCCCCCh
.text:0000053B                 rep stosd
.text:0000053D                 pop     ecx
.text:0000053E                 mov     eax, dword ptr ds:___security_cookie
.text:00000543                 xor     eax, ebp
.text:00000545                 mov     [ebp+var_4], eax
.text:00000548                 mov     [ebp+var_8], ecx
.text:0000054B                 push    5               ; unsigned int
.text:0000054D                 lea     eax, [ebp+var_4C]
.text:00000550                 push    eax             ; unsigned int *
.text:00000551                 mov     ecx, [ebp+var_8] ; this
.text:00000554                 call    ?PrepareBlock@CContext32@NSha1@NCrypto@@QBEXPAII@Z ; NCrypto::NSha1::CContext32::PrepareBlock(uint *,uint)
.text:00000559                 push    5               ; unsigned int
.text:0000055B                 lea     ecx, [ebp+var_94]
.text:00000561                 push    ecx             ; unsigned int *
.text:00000562                 mov     ecx, [ebp+var_8]
.text:00000565                 add     ecx, 60h ; '`'  ; this
.text:00000568                 call    ?PrepareBlock@CContext32@NSha1@NCrypto@@QBEXPAII@Z ; NCrypto::NSha1::CContext32::PrepareBlock(uint *,uint)
.text:0000056D                 mov     [ebp+var_9C], 0
.text:00000577                 jmp     short loc_588
.text:00000579 ; ---------------------------------------------------------------------------
.text:00000579
.text:00000579 loc_579:                                ; CODE XREF: NCrypto::NSha1::CHmac32::GetLoopXorDigest(uint *,uint)+87j
.text:00000579                 mov     edx, [ebp+var_9C]
.text:0000057F                 add     edx, 1
.text:00000582                 mov     [ebp+var_9C], edx
.text:00000588
.text:00000588 loc_588:                                ; CODE XREF: NCrypto::NSha1::CHmac32::GetLoopXorDigest(uint *,uint)+57j
.text:00000588                 cmp     [ebp+var_9C], 5
.text:0000058F                 jnb     short loc_5A9
.text:00000591                 mov     eax, [ebp+var_9C]
.text:00000597                 mov     ecx, [ebp+var_9C]
.text:0000059D                 mov     edx, [ebp+arg_0]
.text:000005A0                 mov     ecx, [edx+ecx*4]
.text:000005A3                 mov     [ebp+eax*4+var_4C], ecx
.text:000005A7                 jmp     short loc_579
.text:000005A9 ; ---------------------------------------------------------------------------
.text:000005A9
.text:000005A9 loc_5A9:                                ; CODE XREF: NCrypto::NSha1::CHmac32::GetLoopXorDigest(uint *,uint)+6Fj
.text:000005A9                 mov     [ebp+var_A0], 0
.text:000005B3                 jmp     short loc_5C4
.text:000005B5 ; ---------------------------------------------------------------------------
.text:000005B5
.text:000005B5 loc_5B5:                                ; CODE XREF: NCrypto::NSha1::CHmac32::GetLoopXorDigest(uint *,uint):loc_640j
.text:000005B5                 mov     edx, [ebp+var_A0]
.text:000005BB                 add     edx, 1
.text:000005BE                 mov     [ebp+var_A0], edx
.text:000005C4
.text:000005C4 loc_5C4:                                ; CODE XREF: NCrypto::NSha1::CHmac32::GetLoopXorDigest(uint *,uint)+93j
.text:000005C4                 mov     eax, [ebp+var_A0]
.text:000005CA                 cmp     eax, [ebp+arg_4]
.text:000005CD                 jnb     short loc_645
.text:000005CF                 lea     ecx, [ebp+var_94]
.text:000005D5                 push    ecx             ; unsigned int *
.text:000005D6                 lea     edx, [ebp+var_4C]
.text:000005D9                 push    edx             ; unsigned int *
.text:000005DA                 mov     ecx, [ebp+var_8] ; this
.text:000005DD                 call    ?GetBlockDigest@CContextBase@NSha1@NCrypto@@QAEXPBIPAI@Z ; NCrypto::NSha1::CContextBase::GetBlockDigest(uint const *,uint *)
.text:000005E2                 lea     eax, [ebp+var_4C]
.text:000005E5                 push    eax             ; unsigned int *
.text:000005E6                 lea     ecx, [ebp+var_94]
.text:000005EC                 push    ecx             ; unsigned int *
.text:000005ED                 mov     ecx, [ebp+var_8]
.text:000005F0                 add     ecx, 60h ; '`'  ; this
.text:000005F3                 call    ?GetBlockDigest@CContextBase@NSha1@NCrypto@@QAEXPBIPAI@Z ; NCrypto::NSha1::CContextBase::GetBlockDigest(uint const *,uint *)
.text:000005F8                 mov     [ebp+var_A4], 0
.text:00000602                 jmp     short loc_613
.text:00000604 ; ---------------------------------------------------------------------------
.text:00000604
.text:00000604 loc_604:                                ; CODE XREF: NCrypto::NSha1::CHmac32::GetLoopXorDigest(uint *,uint)+11Ej
.text:00000604                 mov     edx, [ebp+var_A4]
.text:0000060A                 add     edx, 1
.text:0000060D                 mov     [ebp+var_A4], edx
.text:00000613
.text:00000613 loc_613:                                ; CODE XREF: NCrypto::NSha1::CHmac32::GetLoopXorDigest(uint *,uint)+E2j
.text:00000613                 cmp     [ebp+var_A4], 5
.text:0000061A                 jnb     short loc_640
.text:0000061C                 mov     eax, [ebp+var_A4]
.text:00000622                 mov     ecx, [ebp+arg_0]
.text:00000625                 mov     edx, [ebp+var_A4]
.text:0000062B                 mov     eax, [ecx+eax*4]
.text:0000062E                 xor     eax, [ebp+edx*4+var_4C]
.text:00000632                 mov     ecx, [ebp+var_A4]
.text:00000638                 mov     edx, [ebp+arg_0]
.text:0000063B                 mov     [edx+ecx*4], eax
.text:0000063E                 jmp     short loc_604
.text:00000640 ; ---------------------------------------------------------------------------
.text:00000640
.text:00000640 loc_640:                                ; CODE XREF: NCrypto::NSha1::CHmac32::GetLoopXorDigest(uint *,uint)+FAj
.text:00000640                 jmp     loc_5B5
.text:00000645 ; ---------------------------------------------------------------------------
.text:00000645
.text:00000645 loc_645:                                ; CODE XREF: NCrypto::NSha1::CHmac32::GetLoopXorDigest(uint *,uint)+ADj
.text:00000645                 push    edx
.text:00000646                 mov     ecx, ebp
.text:00000648                 push    eax
.text:00000649                 lea     edx, $LN15
.text:0000064F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000654                 pop     eax
.text:00000655                 pop     edx
.text:00000656                 pop     edi
.text:00000657                 mov     ecx, [ebp+var_4]
.text:0000065A                 xor     ecx, ebp
.text:0000065C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000661                 add     esp, 0A4h
.text:00000667                 cmp     ebp, esp
.text:00000669                 call    __RTC_CheckEsp
.text:0000066E                 mov     esp, ebp
.text:00000670                 pop     ebp
.text:00000671                 retn    8
.text:00000671 ?GetLoopXorDigest@CHmac32@NSha1@NCrypto@@QAEXPAII@Z endp
.text:00000671
.text:00000671 ; ---------------------------------------------------------------------------
.text:00000674 $LN15           dd 2                    ; DATA XREF: NCrypto::NSha1::CHmac32::GetLoopXorDigest(uint *,uint)+129o
.text:00000678                 dd offset $LN14
.text:0000067C $LN14           dd 0FFFFFFB4h, 40h      ; DATA XREF: .text:00000678o
.text:00000684                 dd offset $LN12         ; "block"
.text:00000688                 dd 0FFFFFF6Ch, 40h
.text:00000690                 dd offset $LN13         ; "block2"
.text:00000694 $LN13           db 'block2',0           ; DATA XREF: .text:00000690o
.text:0000069B $LN12           db 'block',0            ; DATA XREF: .text:00000684o
.text:000006A1                 align 4
.text:000006A1 _text           ends
.text:000006A1
.rtc$TMZ:000006A4 ; ===========================================================================
.rtc$TMZ:000006A4
.rtc$TMZ:000006A4 ; Segment type: Pure data
.rtc$TMZ:000006A4 ; Segment permissions: Read
.rtc$TMZ:000006A4 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000006A4                 assume cs:_rtc$TMZ
.rtc$TMZ:000006A4                 ;org 6A4h
.rtc$TMZ:000006A4 ; COMDAT (pick any)
.rtc$TMZ:000006A4 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000006A4 _rtc$TMZ        ends
.rtc$TMZ:000006A4
.rtc$IMZ:000006A8 ; ===========================================================================
.rtc$IMZ:000006A8
.rtc$IMZ:000006A8 ; Segment type: Pure data
.rtc$IMZ:000006A8 ; Segment permissions: Read
.rtc$IMZ:000006A8 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000006A8                 assume cs:_rtc$IMZ
.rtc$IMZ:000006A8                 ;org 6A8h
.rtc$IMZ:000006A8 ; COMDAT (pick any)
.rtc$IMZ:000006A8 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000006A8 _rtc$IMZ        ends
.rtc$IMZ:000006A8
.text:000006AC ; ===========================================================================
.text:000006AC
.text:000006AC ; Segment type: Pure code
.text:000006AC ; Segment permissions: Read/Execute
.text:000006AC _text           segment para public 'CODE' use32
.text:000006AC                 assume cs:_text
.text:000006AC                 ;org 6ACh
.text:000006AC ; COMDAT (pick any)
.text:000006AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000006AC
.text:000006AC ; =============== S U B R O U T I N E =======================================
.text:000006AC
.text:000006AC ; Attributes: bp-based frame
.text:000006AC
.text:000006AC ; void __thiscall NCrypto::NSha1::CContextBase::Init(NCrypto::NSha1::CContextBase *__hidden this)
.text:000006AC                 public ?Init@CContextBase@NSha1@NCrypto@@QAEXXZ
.text:000006AC ?Init@CContextBase@NSha1@NCrypto@@QAEXXZ proc near
.text:000006AC                                         ; CODE XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+50p
.text:000006AC                                         ; NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+CDp ...
.text:000006AC
.text:000006AC var_4           = dword ptr -4
.text:000006AC
.text:000006AC                 push    ebp
.text:000006AD                 mov     ebp, esp
.text:000006AF                 push    ecx
.text:000006B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006B7                 mov     [ebp+var_4], ecx
.text:000006BA                 mov     eax, [ebp+var_4]
.text:000006BD                 push    eax
.text:000006BE                 call    _Sha1_Init@4    ; Sha1_Init(x)
.text:000006C3                 add     esp, 4
.text:000006C6                 cmp     ebp, esp
.text:000006C8                 call    __RTC_CheckEsp
.text:000006CD                 mov     esp, ebp
.text:000006CF                 pop     ebp
.text:000006D0                 retn
.text:000006D0 ?Init@CContextBase@NSha1@NCrypto@@QAEXXZ endp
.text:000006D0
.text:000006D0 ; ---------------------------------------------------------------------------
.text:000006D1                 align 4
.text:000006D1 _text           ends
.text:000006D1
.text:000006D4 ; ===========================================================================
.text:000006D4
.text:000006D4 ; Segment type: Pure code
.text:000006D4 ; Segment permissions: Read/Execute
.text:000006D4 _text           segment para public 'CODE' use32
.text:000006D4                 assume cs:_text
.text:000006D4                 ;org 6D4h
.text:000006D4 ; COMDAT (pick any)
.text:000006D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000006D4
.text:000006D4 ; =============== S U B R O U T I N E =======================================
.text:000006D4
.text:000006D4 ; Attributes: bp-based frame
.text:000006D4
.text:000006D4 ; void __thiscall NCrypto::NSha1::CContext::Update(NCrypto::NSha1::CContext *this, const unsigned __int8 *, unsigned int)
.text:000006D4                 public ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z
.text:000006D4 ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z proc near
.text:000006D4                                         ; CODE XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+60p
.text:000006D4                                         ; NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+DBp ...
.text:000006D4
.text:000006D4 var_4           = dword ptr -4
.text:000006D4 arg_0           = dword ptr  8
.text:000006D4 arg_4           = dword ptr  0Ch
.text:000006D4
.text:000006D4                 push    ebp
.text:000006D5                 mov     ebp, esp
.text:000006D7                 push    ecx
.text:000006D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006DF                 mov     [ebp+var_4], ecx
.text:000006E2                 mov     eax, [ebp+arg_4]
.text:000006E5                 push    eax
.text:000006E6                 mov     ecx, [ebp+arg_0]
.text:000006E9                 push    ecx
.text:000006EA                 mov     edx, [ebp+var_4]
.text:000006ED                 push    edx
.text:000006EE                 call    _Sha1_Update@12 ; Sha1_Update(x,x,x)
.text:000006F3                 add     esp, 4
.text:000006F6                 cmp     ebp, esp
.text:000006F8                 call    __RTC_CheckEsp
.text:000006FD                 mov     esp, ebp
.text:000006FF                 pop     ebp
.text:00000700                 retn    8
.text:00000700 ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z endp
.text:00000700
.text:00000700 ; ---------------------------------------------------------------------------
.text:00000703                 align 4
.text:00000703 _text           ends
.text:00000703
.text:00000704 ; ===========================================================================
.text:00000704
.text:00000704 ; Segment type: Pure code
.text:00000704 ; Segment permissions: Read/Execute
.text:00000704 _text           segment para public 'CODE' use32
.text:00000704                 assume cs:_text
.text:00000704                 ;org 704h
.text:00000704 ; COMDAT (pick any)
.text:00000704                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000704
.text:00000704 ; =============== S U B R O U T I N E =======================================
.text:00000704
.text:00000704 ; Attributes: bp-based frame
.text:00000704
.text:00000704 ; void __thiscall NCrypto::NSha1::CContext::Final(NCrypto::NSha1::CContext *this, unsigned __int8 *)
.text:00000704                 public ?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z
.text:00000704 ?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z proc near
.text:00000704                                         ; CODE XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+6Cp
.text:00000704                                         ; NCrypto::NSha1::CHmac::Final(uchar *,uint)+2Cp ...
.text:00000704
.text:00000704 var_4           = dword ptr -4
.text:00000704 arg_0           = dword ptr  8
.text:00000704
.text:00000704                 push    ebp
.text:00000705                 mov     ebp, esp
.text:00000707                 push    ecx
.text:00000708                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000070F                 mov     [ebp+var_4], ecx
.text:00000712                 mov     eax, [ebp+arg_0]
.text:00000715                 push    eax
.text:00000716                 mov     ecx, [ebp+var_4]
.text:00000719                 push    ecx
.text:0000071A                 call    _Sha1_Final@8   ; Sha1_Final(x,x)
.text:0000071F                 add     esp, 4
.text:00000722                 cmp     ebp, esp
.text:00000724                 call    __RTC_CheckEsp
.text:00000729                 mov     esp, ebp
.text:0000072B                 pop     ebp
.text:0000072C                 retn    4
.text:0000072C ?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z endp
.text:0000072C
.text:0000072C ; ---------------------------------------------------------------------------
.text:0000072F                 align 10h
.text:0000072F _text           ends
.text:0000072F
.text:00000730 ; ===========================================================================
.text:00000730
.text:00000730 ; Segment type: Pure code
.text:00000730 ; Segment permissions: Read/Execute
.text:00000730 _text           segment para public 'CODE' use32
.text:00000730                 assume cs:_text
.text:00000730                 ;org 730h
.text:00000730 ; COMDAT (pick any)
.text:00000730                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000730
.text:00000730 ; =============== S U B R O U T I N E =======================================
.text:00000730
.text:00000730 ; Attributes: bp-based frame
.text:00000730
.text:00000730 ; void __thiscall NCrypto::NSha1::CContext32::Update(NCrypto::NSha1::CContext32 *this, const unsigned int *, unsigned int)
.text:00000730                 public ?Update@CContext32@NSha1@NCrypto@@QAEXPBII@Z
.text:00000730 ?Update@CContext32@NSha1@NCrypto@@QAEXPBII@Z proc near
.text:00000730                                         ; CODE XREF: NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint)+142p
.text:00000730                                         ; NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint)+18Cp ...
.text:00000730
.text:00000730 var_4           = dword ptr -4
.text:00000730 arg_0           = dword ptr  8
.text:00000730 arg_4           = dword ptr  0Ch
.text:00000730
.text:00000730                 push    ebp
.text:00000731                 mov     ebp, esp
.text:00000733                 push    ecx
.text:00000734                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000073B                 mov     [ebp+var_4], ecx
.text:0000073E                 mov     eax, [ebp+arg_4]
.text:00000741                 push    eax
.text:00000742                 mov     ecx, [ebp+arg_0]
.text:00000745                 push    ecx
.text:00000746                 mov     edx, [ebp+var_4]
.text:00000749                 push    edx
.text:0000074A                 call    _Sha1_32_Update@12 ; Sha1_32_Update(x,x,x)
.text:0000074F                 add     esp, 4
.text:00000752                 cmp     ebp, esp
.text:00000754                 call    __RTC_CheckEsp
.text:00000759                 mov     esp, ebp
.text:0000075B                 pop     ebp
.text:0000075C                 retn    8
.text:0000075C ?Update@CContext32@NSha1@NCrypto@@QAEXPBII@Z endp
.text:0000075C
.text:0000075C ; ---------------------------------------------------------------------------
.text:0000075F                 align 10h
.text:0000075F _text           ends
.text:0000075F
.text:00000760 ; ===========================================================================
.text:00000760
.text:00000760 ; Segment type: Pure code
.text:00000760 ; Segment permissions: Read/Execute
.text:00000760 _text           segment para public 'CODE' use32
.text:00000760                 assume cs:_text
.text:00000760                 ;org 760h
.text:00000760 ; COMDAT (pick any)
.text:00000760                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000760
.text:00000760 ; =============== S U B R O U T I N E =======================================
.text:00000760
.text:00000760 ; Attributes: bp-based frame
.text:00000760
.text:00000760 ; void __thiscall NCrypto::NSha1::CContext32::Final(NCrypto::NSha1::CContext32 *this, unsigned int *)
.text:00000760                 public ?Final@CContext32@NSha1@NCrypto@@QAEXPAI@Z
.text:00000760 ?Final@CContext32@NSha1@NCrypto@@QAEXPAI@Z proc near
.text:00000760                                         ; CODE XREF: NCrypto::NSha1::CHmac32::Final(uint *,uint)+2Cp
.text:00000760                                         ; NCrypto::NSha1::CHmac32::Final(uint *,uint)+4Cp
.text:00000760
.text:00000760 var_4           = dword ptr -4
.text:00000760 arg_0           = dword ptr  8
.text:00000760
.text:00000760                 push    ebp
.text:00000761                 mov     ebp, esp
.text:00000763                 push    ecx
.text:00000764                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000076B                 mov     [ebp+var_4], ecx
.text:0000076E                 mov     eax, [ebp+arg_0]
.text:00000771                 push    eax
.text:00000772                 mov     ecx, [ebp+var_4]
.text:00000775                 push    ecx
.text:00000776                 call    _Sha1_32_Final@8 ; Sha1_32_Final(x,x)
.text:0000077B                 add     esp, 4
.text:0000077E                 cmp     ebp, esp
.text:00000780                 call    __RTC_CheckEsp
.text:00000785                 mov     esp, ebp
.text:00000787                 pop     ebp
.text:00000788                 retn    4
.text:00000788 ?Final@CContext32@NSha1@NCrypto@@QAEXPAI@Z endp
.text:00000788
.text:00000788 ; ---------------------------------------------------------------------------
.text:0000078B                 align 4
.text:0000078B _text           ends
.text:0000078B
.text:0000078C ; ===========================================================================
.text:0000078C
.text:0000078C ; Segment type: Pure code
.text:0000078C ; Segment permissions: Read/Execute
.text:0000078C _text           segment para public 'CODE' use32
.text:0000078C                 assume cs:_text
.text:0000078C                 ;org 78Ch
.text:0000078C ; COMDAT (pick any)
.text:0000078C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000078C
.text:0000078C ; =============== S U B R O U T I N E =======================================
.text:0000078C
.text:0000078C ; Attributes: bp-based frame
.text:0000078C
.text:0000078C ; void __thiscall NCrypto::NSha1::CContextBase::GetBlockDigest(NCrypto::NSha1::CContextBase *this, const unsigned int *, unsigned int *)
.text:0000078C                 public ?GetBlockDigest@CContextBase@NSha1@NCrypto@@QAEXPBIPAI@Z
.text:0000078C ?GetBlockDigest@CContextBase@NSha1@NCrypto@@QAEXPBIPAI@Z proc near
.text:0000078C                                         ; CODE XREF: NCrypto::NSha1::CHmac32::GetLoopXorDigest(uint *,uint)+BDp
.text:0000078C                                         ; NCrypto::NSha1::CHmac32::GetLoopXorDigest(uint *,uint)+D3p
.text:0000078C
.text:0000078C var_4           = dword ptr -4
.text:0000078C arg_0           = dword ptr  8
.text:0000078C arg_4           = dword ptr  0Ch
.text:0000078C
.text:0000078C                 push    ebp
.text:0000078D                 mov     ebp, esp
.text:0000078F                 push    ecx
.text:00000790                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000797                 mov     [ebp+var_4], ecx
.text:0000079A                 mov     eax, [ebp+arg_4]
.text:0000079D                 push    eax
.text:0000079E                 mov     ecx, [ebp+arg_0]
.text:000007A1                 push    ecx
.text:000007A2                 mov     edx, [ebp+var_4]
.text:000007A5                 push    edx
.text:000007A6                 call    _Sha1_GetBlockDigest@12 ; Sha1_GetBlockDigest(x,x,x)
.text:000007AB                 add     esp, 4
.text:000007AE                 cmp     ebp, esp
.text:000007B0                 call    __RTC_CheckEsp
.text:000007B5                 mov     esp, ebp
.text:000007B7                 pop     ebp
.text:000007B8                 retn    8
.text:000007B8 ?GetBlockDigest@CContextBase@NSha1@NCrypto@@QAEXPBIPAI@Z endp
.text:000007B8
.text:000007B8 ; ---------------------------------------------------------------------------
.text:000007BB                 align 4
.text:000007BB _text           ends
.text:000007BB
.text:000007BC ; ===========================================================================
.text:000007BC
.text:000007BC ; Segment type: Pure code
.text:000007BC ; Segment permissions: Read/Execute
.text:000007BC _text           segment para public 'CODE' use32
.text:000007BC                 assume cs:_text
.text:000007BC                 ;org 7BCh
.text:000007BC ; COMDAT (pick any)
.text:000007BC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000007BC
.text:000007BC ; =============== S U B R O U T I N E =======================================
.text:000007BC
.text:000007BC ; Attributes: bp-based frame
.text:000007BC
.text:000007BC ; void __thiscall NCrypto::NSha1::CContext32::PrepareBlock(NCrypto::NSha1::CContext32 *this, unsigned int *, unsigned int)
.text:000007BC                 public ?PrepareBlock@CContext32@NSha1@NCrypto@@QBEXPAII@Z
.text:000007BC ?PrepareBlock@CContext32@NSha1@NCrypto@@QBEXPAII@Z proc near
.text:000007BC                                         ; CODE XREF: NCrypto::NSha1::CHmac32::GetLoopXorDigest(uint *,uint)+34p
.text:000007BC                                         ; NCrypto::NSha1::CHmac32::GetLoopXorDigest(uint *,uint)+48p
.text:000007BC
.text:000007BC var_4           = dword ptr -4
.text:000007BC arg_0           = dword ptr  8
.text:000007BC arg_4           = dword ptr  0Ch
.text:000007BC
.text:000007BC                 push    ebp
.text:000007BD                 mov     ebp, esp
.text:000007BF                 push    ecx
.text:000007C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007C7                 mov     [ebp+var_4], ecx
.text:000007CA                 mov     eax, [ebp+arg_4]
.text:000007CD                 push    eax
.text:000007CE                 mov     ecx, [ebp+arg_0]
.text:000007D1                 push    ecx
.text:000007D2                 mov     edx, [ebp+var_4]
.text:000007D5                 push    edx
.text:000007D6                 call    _Sha1_32_PrepareBlock@12 ; Sha1_32_PrepareBlock(x,x,x)
.text:000007DB                 add     esp, 4
.text:000007DE                 cmp     ebp, esp
.text:000007E0                 call    __RTC_CheckEsp
.text:000007E5                 mov     esp, ebp
.text:000007E7                 pop     ebp
.text:000007E8                 retn    8
.text:000007E8 ?PrepareBlock@CContext32@NSha1@NCrypto@@QBEXPAII@Z endp
.text:000007E8
.text:000007E8 _text           ends
.text:000007E8
UNDEF:000007F0 ; ===========================================================================
UNDEF:000007F0
UNDEF:000007F0 ; Segment type: Externs
UNDEF:000007F0 ; UNDEF
UNDEF:000007F0                 extrn ___security_cookie:near
UNDEF:000007F0                                         ; DATA XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+18r
UNDEF:000007F0                                         ; NCrypto::NSha1::CHmac::Final(uchar *,uint)+18r ...
UNDEF:000007F4                 extrn __RTC_CheckEsp:near
UNDEF:000007F4                                         ; CODE XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+149p
UNDEF:000007F4                                         ; NCrypto::NSha1::CHmac::Final(uchar *,uint)+9Dp ...
UNDEF:000007F8 ; __fastcall __security_check_cookie(x)
UNDEF:000007F8                 extrn @__security_check_cookie@4:near
UNDEF:000007F8                                         ; CODE XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+13Fp
UNDEF:000007F8                                         ; NCrypto::NSha1::CHmac::Final(uchar *,uint)+93p ...
UNDEF:000007FC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000007FC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000007FC                                         ; CODE XREF: NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)+132p
UNDEF:000007FC                                         ; NCrypto::NSha1::CHmac::Final(uchar *,uint)+86p ...
UNDEF:00000800                 extrn __RTC_Shutdown:near
UNDEF:00000800                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000804                 extrn __RTC_InitBase:near
UNDEF:00000804                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000808 ; __stdcall Sha1_Init(x)
UNDEF:00000808                 extrn _Sha1_Init@4:near ; CODE XREF: NCrypto::NSha1::CContextBase::Init(void)+12p
UNDEF:0000080C ; __stdcall Sha1_Update(x, x, x)
UNDEF:0000080C                 extrn _Sha1_Update@12:near
UNDEF:0000080C                                         ; CODE XREF: NCrypto::NSha1::CContext::Update(uchar const *,uint)+1Ap
UNDEF:00000810 ; __stdcall Sha1_Final(x, x)
UNDEF:00000810                 extrn _Sha1_Final@8:near
UNDEF:00000810                                         ; CODE XREF: NCrypto::NSha1::CContext::Final(uchar *)+16p
UNDEF:00000814 ; __stdcall Sha1_32_Update(x, x, x)
UNDEF:00000814                 extrn _Sha1_32_Update@12:near
UNDEF:00000814                                         ; CODE XREF: NCrypto::NSha1::CContext32::Update(uint const *,uint)+1Ap
UNDEF:00000818 ; __stdcall Sha1_32_Final(x, x)
UNDEF:00000818                 extrn _Sha1_32_Final@8:near
UNDEF:00000818                                         ; CODE XREF: NCrypto::NSha1::CContext32::Final(uint *)+16p
UNDEF:0000081C ; __stdcall Sha1_GetBlockDigest(x, x, x)
UNDEF:0000081C                 extrn _Sha1_GetBlockDigest@12:near
UNDEF:0000081C                                         ; CODE XREF: NCrypto::NSha1::CContextBase::GetBlockDigest(uint const *,uint *)+1Ap
UNDEF:00000820 ; __stdcall Sha1_32_PrepareBlock(x, x, x)
UNDEF:00000820                 extrn _Sha1_32_PrepareBlock@12:near
UNDEF:00000820                                         ; CODE XREF: NCrypto::NSha1::CContext32::PrepareBlock(uint *,uint)+1Ap
UNDEF:00000820
UNDEF:00000820
UNDEF:00000820                 end