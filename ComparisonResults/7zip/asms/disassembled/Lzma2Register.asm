.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 821652EA571F74183643D62782F8FA6B
.rdata:00000000 ; Input CRC32 : 06A98670
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Lzma2Register.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG66920        db 'LZMA2',0            ; DATA XREF: .rdata:00000018o
.rdata:00000006                 align 4
.rdata:00000008 ; struct CCodecInfo off_8
.rdata:00000008 off_8           dd offset sub_28        ; DATA XREF: sub_220+Eo
.rdata:0000000C                 dd offset sub_C8
.rdata:00000010                 dd offset unk_21
.rdata:00000014                 db    0
.rdata:00000015                 db    0
.rdata:00000016                 db    0
.rdata:00000017                 db    0
.rdata:00000018                 dd offset $SG66920      ; "LZMA2"
.rdata:0000001C                 db    1
.rdata:0000001D                 db    0
.rdata:0000001E                 db    0
.rdata:0000001F                 db    0
.rdata:00000020                 db    0
.rdata:00000021 unk_21          db    0                 ; DATA XREF: .rdata:00000010o
.rdata:00000022                 db    0
.rdata:00000023                 db    0
.rdata:00000024                 db    0
.rdata:00000025                 db    0
.rdata:00000026                 db    0
.rdata:00000027                 db    0
.rdata:00000027 _rdata          ends
.rdata:00000027
.text:00000028 ; ===========================================================================
.text:00000028
.text:00000028 ; Segment type: Pure code
.text:00000028 ; Segment permissions: Read/Execute
.text:00000028 _text           segment para public 'CODE' use32
.text:00000028                 assume cs:_text
.text:00000028                 ;org 28h
.text:00000028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000028
.text:00000028 ; =============== S U B R O U T I N E =======================================
.text:00000028
.text:00000028 ; Attributes: bp-based frame
.text:00000028
.text:00000028 sub_28          proc near               ; DATA XREF: .rdata:off_8o
.text:00000028
.text:00000028 var_18          = dword ptr -18h
.text:00000028 var_14          = dword ptr -14h
.text:00000028 var_10          = dword ptr -10h
.text:00000028 var_C           = dword ptr -0Ch
.text:00000028 var_4           = dword ptr -4
.text:00000028
.text:00000028                 push    ebp
.text:00000029                 mov     ebp, esp
.text:0000002B                 push    0FFFFFFFFh
.text:0000002D                 push    offset loc_167
.text:00000032                 mov     eax, large fs:0
.text:00000038                 push    eax
.text:00000039                 sub     esp, 0Ch
.text:0000003C                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00000043                 mov     [ebp+var_14], 0CCCCCCCCh
.text:0000004A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000051                 mov     eax, ds:dword_26C
.text:00000056                 xor     eax, ebp
.text:00000058                 push    eax
.text:00000059                 lea     eax, [ebp+var_C]
.text:0000005C                 mov     large fs:0, eax
.text:00000062                 push    0E8h ; 'F'      ; unsigned int
.text:00000067                 call    nullsub_2
.text:0000006C                 add     esp, 4
.text:0000006F                 mov     [ebp+var_14], eax
.text:00000072                 mov     [ebp+var_4], 0
.text:00000079                 cmp     [ebp+var_14], 0
.text:0000007D                 jz      short loc_8C
.text:0000007F                 mov     ecx, [ebp+var_14] ; this
.text:00000082                 call    nullsub_1
.text:00000087                 mov     [ebp+var_18], eax
.text:0000008A                 jmp     short loc_93
.text:0000008C ; ---------------------------------------------------------------------------
.text:0000008C
.text:0000008C loc_8C:                                 ; CODE XREF: sub_28+55j
.text:0000008C                 mov     [ebp+var_18], 0
.text:00000093
.text:00000093 loc_93:                                 ; CODE XREF: sub_28+62j
.text:00000093                 mov     eax, [ebp+var_18]
.text:00000096                 mov     [ebp+var_10], eax
.text:00000099                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000000A0                 mov     eax, [ebp+var_10]
.text:000000A3                 mov     ecx, [ebp+var_C]
.text:000000A6                 mov     large fs:0, ecx
.text:000000AD                 pop     ecx
.text:000000AE                 add     esp, 18h
.text:000000B1                 cmp     ebp, esp
.text:000000B3                 call    nullsub_3
.text:000000B8                 mov     esp, ebp
.text:000000BA                 pop     ebp
.text:000000BB                 retn
.text:000000BB sub_28          endp
.text:000000BB
.text:000000BB ; ---------------------------------------------------------------------------
.text:000000BC                 db 0Ch dup(0CCh)
.text:000000C8
.text:000000C8 ; =============== S U B R O U T I N E =======================================
.text:000000C8
.text:000000C8 ; Attributes: bp-based frame
.text:000000C8
.text:000000C8 sub_C8          proc near               ; DATA XREF: .rdata:0000000Co
.text:000000C8
.text:000000C8 var_18          = dword ptr -18h
.text:000000C8 var_14          = dword ptr -14h
.text:000000C8 var_10          = dword ptr -10h
.text:000000C8 var_C           = dword ptr -0Ch
.text:000000C8 var_4           = dword ptr -4
.text:000000C8
.text:000000C8                 push    ebp
.text:000000C9                 mov     ebp, esp
.text:000000CB                 push    0FFFFFFFFh
.text:000000CD                 push    offset loc_18D
.text:000000D2                 mov     eax, large fs:0
.text:000000D8                 push    eax
.text:000000D9                 sub     esp, 0Ch
.text:000000DC                 mov     [ebp+var_18], 0CCCCCCCCh
.text:000000E3                 mov     [ebp+var_14], 0CCCCCCCCh
.text:000000EA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000000F1                 mov     eax, ds:dword_26C
.text:000000F6                 xor     eax, ebp
.text:000000F8                 push    eax
.text:000000F9                 lea     eax, [ebp+var_C]
.text:000000FC                 mov     large fs:0, eax
.text:00000102                 push    14h             ; unsigned int
.text:00000104                 call    nullsub_2
.text:00000109                 add     esp, 4
.text:0000010C                 mov     [ebp+var_14], eax
.text:0000010F                 mov     [ebp+var_4], 0
.text:00000116                 cmp     [ebp+var_14], 0
.text:0000011A                 jz      short loc_129
.text:0000011C                 mov     ecx, [ebp+var_14] ; this
.text:0000011F                 call    nullsub_4
.text:00000124                 mov     [ebp+var_18], eax
.text:00000127                 jmp     short loc_130
.text:00000129 ; ---------------------------------------------------------------------------
.text:00000129
.text:00000129 loc_129:                                ; CODE XREF: sub_C8+52j
.text:00000129                 mov     [ebp+var_18], 0
.text:00000130
.text:00000130 loc_130:                                ; CODE XREF: sub_C8+5Fj
.text:00000130                 mov     eax, [ebp+var_18]
.text:00000133                 mov     [ebp+var_10], eax
.text:00000136                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000013D                 mov     eax, [ebp+var_10]
.text:00000140                 mov     ecx, [ebp+var_C]
.text:00000143                 mov     large fs:0, ecx
.text:0000014A                 pop     ecx
.text:0000014B                 add     esp, 18h
.text:0000014E                 cmp     ebp, esp
.text:00000150                 call    nullsub_3
.text:00000155                 mov     esp, ebp
.text:00000157                 pop     ebp
.text:00000158                 retn
.text:00000158 sub_C8          endp
.text:00000158
.text:00000158 ; ---------------------------------------------------------------------------
.text:00000159                 db 3 dup(?)
.text:00000159 _text           ends
.text:00000159
.text$x:0000015C ; ===========================================================================
.text$x:0000015C
.text$x:0000015C ; Segment type: Pure code
.text$x:0000015C ; Segment permissions: Read/Execute
.text$x:0000015C _text$x         segment para public 'CODE' use32
.text$x:0000015C                 assume cs:_text$x
.text$x:0000015C                 ;org 15Ch
.text$x:0000015C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000015C
.text$x:0000015C ; =============== S U B R O U T I N E =======================================
.text$x:0000015C
.text$x:0000015C
.text$x:0000015C sub_15C         proc near               ; DATA XREF: .xdata$x:000001ACo
.text$x:0000015C                 mov     eax, [ebp-14h]
.text$x:0000015F                 push    eax             ; void *
.text$x:00000160                 call    nullsub_5
.text$x:00000165                 pop     ecx
.text$x:00000166                 retn
.text$x:00000166 sub_15C         endp
.text$x:00000166
.text$x:00000167 ; ---------------------------------------------------------------------------
.text$x:00000167
.text$x:00000167 loc_167:                                ; DATA XREF: sub_28+5o
.text$x:00000167                 mov     edx, [esp+8]
.text$x:0000016B                 lea     eax, [edx+0Ch]
.text$x:0000016E                 mov     ecx, [edx-10h]
.text$x:00000171                 xor     ecx, eax
.text$x:00000173                 call    nullsub_6
.text$x:00000178                 mov     eax, offset unk_1B0
.text$x:0000017D                 jmp     locret_270
.text$x:00000182
.text$x:00000182 ; =============== S U B R O U T I N E =======================================
.text$x:00000182
.text$x:00000182
.text$x:00000182 sub_182         proc near               ; DATA XREF: .xdata$x:000001D8o
.text$x:00000182                 mov     eax, [ebp-14h]
.text$x:00000185                 push    eax             ; void *
.text$x:00000186                 call    nullsub_5
.text$x:0000018B                 pop     ecx
.text$x:0000018C                 retn
.text$x:0000018C sub_182         endp
.text$x:0000018C
.text$x:0000018D ; ---------------------------------------------------------------------------
.text$x:0000018D
.text$x:0000018D loc_18D:                                ; DATA XREF: sub_C8+5o
.text$x:0000018D                 mov     edx, [esp+8]
.text$x:00000191                 lea     eax, [edx+0Ch]
.text$x:00000194                 mov     ecx, [edx-10h]
.text$x:00000197                 xor     ecx, eax
.text$x:00000199                 call    nullsub_6
.text$x:0000019E                 mov     eax, offset unk_1DC
.text$x:000001A3                 jmp     locret_270
.text$x:000001A3 _text$x         ends
.text$x:000001A3
.xdata$x:000001A8 ; ===========================================================================
.xdata$x:000001A8
.xdata$x:000001A8 ; Segment type: Pure data
.xdata$x:000001A8 ; Segment permissions: Read
.xdata$x:000001A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000001A8                 assume cs:_xdata$x
.xdata$x:000001A8                 ;org 1A8h
.xdata$x:000001A8 unk_1A8         db 0FFh                 ; DATA XREF: .xdata$x:000001B8o
.xdata$x:000001A9                 db 0FFh
.xdata$x:000001AA                 db 0FFh
.xdata$x:000001AB                 db 0FFh
.xdata$x:000001AC                 dd offset sub_15C
.xdata$x:000001B0 unk_1B0         db  22h ; "             ; DATA XREF: .text$x:00000178o
.xdata$x:000001B1                 db    5
.xdata$x:000001B2                 db  93h ; ô
.xdata$x:000001B3                 db  19h
.xdata$x:000001B4                 db    1
.xdata$x:000001B5                 db    0
.xdata$x:000001B6                 db    0
.xdata$x:000001B7                 db    0
.xdata$x:000001B8                 dd offset unk_1A8
.xdata$x:000001BC                 db    0
.xdata$x:000001BD                 db    0
.xdata$x:000001BE                 db    0
.xdata$x:000001BF                 db    0
.xdata$x:000001C0                 db    0
.xdata$x:000001C1                 db    0
.xdata$x:000001C2                 db    0
.xdata$x:000001C3                 db    0
.xdata$x:000001C4                 db    0
.xdata$x:000001C5                 db    0
.xdata$x:000001C6                 db    0
.xdata$x:000001C7                 db    0
.xdata$x:000001C8                 db    0
.xdata$x:000001C9                 db    0
.xdata$x:000001CA                 db    0
.xdata$x:000001CB                 db    0
.xdata$x:000001CC                 db    0
.xdata$x:000001CD                 db    0
.xdata$x:000001CE                 db    0
.xdata$x:000001CF                 db    0
.xdata$x:000001D0                 db    1
.xdata$x:000001D1                 db    0
.xdata$x:000001D2                 db    0
.xdata$x:000001D3                 db    0
.xdata$x:000001D4 unk_1D4         db 0FFh                 ; DATA XREF: .xdata$x:000001E4o
.xdata$x:000001D5                 db 0FFh
.xdata$x:000001D6                 db 0FFh
.xdata$x:000001D7                 db 0FFh
.xdata$x:000001D8                 dd offset sub_182
.xdata$x:000001DC unk_1DC         db  22h ; "             ; DATA XREF: .text$x:0000019Eo
.xdata$x:000001DD                 db    5
.xdata$x:000001DE                 db  93h ; ô
.xdata$x:000001DF                 db  19h
.xdata$x:000001E0                 db    1
.xdata$x:000001E1                 db    0
.xdata$x:000001E2                 db    0
.xdata$x:000001E3                 db    0
.xdata$x:000001E4                 dd offset unk_1D4
.xdata$x:000001E8                 db    0
.xdata$x:000001E9                 db    0
.xdata$x:000001EA                 db    0
.xdata$x:000001EB                 db    0
.xdata$x:000001EC                 db    0
.xdata$x:000001ED                 db    0
.xdata$x:000001EE                 db    0
.xdata$x:000001EF                 db    0
.xdata$x:000001F0                 db    0
.xdata$x:000001F1                 db    0
.xdata$x:000001F2                 db    0
.xdata$x:000001F3                 db    0
.xdata$x:000001F4                 db    0
.xdata$x:000001F5                 db    0
.xdata$x:000001F6                 db    0
.xdata$x:000001F7                 db    0
.xdata$x:000001F8                 db    0
.xdata$x:000001F9                 db    0
.xdata$x:000001FA                 db    0
.xdata$x:000001FB                 db    0
.xdata$x:000001FC                 db    1
.xdata$x:000001FD                 db    0
.xdata$x:000001FE                 db    0
.xdata$x:000001FF                 db    0
.xdata$x:000001FF _xdata$x        ends
.xdata$x:000001FF
.rtc$TMZ:00000200 ; ===========================================================================
.rtc$TMZ:00000200
.rtc$TMZ:00000200 ; Segment type: Pure data
.rtc$TMZ:00000200 ; Segment permissions: Read
.rtc$TMZ:00000200 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000200                 assume cs:_rtc$TMZ
.rtc$TMZ:00000200                 ;org 200h
.rtc$TMZ:00000200 ; COMDAT (pick any)
.rtc$TMZ:00000200                 dd offset unk_27C
.rtc$TMZ:00000200 _rtc$TMZ        ends
.rtc$TMZ:00000200
.rtc$IMZ:00000204 ; ===========================================================================
.rtc$IMZ:00000204
.rtc$IMZ:00000204 ; Segment type: Pure data
.rtc$IMZ:00000204 ; Segment permissions: Read
.rtc$IMZ:00000204 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000204                 assume cs:_rtc$IMZ
.rtc$IMZ:00000204                 ;org 204h
.rtc$IMZ:00000204 ; COMDAT (pick any)
.rtc$IMZ:00000204                 dd offset unk_280
.rtc$IMZ:00000204 _rtc$IMZ        ends
.rtc$IMZ:00000204
.text$yc:00000208 ; ===========================================================================
.text$yc:00000208
.text$yc:00000208 ; Segment type: Pure code
.text$yc:00000208 ; Segment permissions: Read/Execute
.text$yc:00000208 _text$yc        segment para public 'CODE' use32
.text$yc:00000208                 assume cs:_text$yc
.text$yc:00000208                 ;org 208h
.text$yc:00000208 ; COMDAT (pick any)
.text$yc:00000208                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:00000208
.text$yc:00000208 ; =============== S U B R O U T I N E =======================================
.text$yc:00000208
.text$yc:00000208 ; Attributes: bp-based frame
.text$yc:00000208
.text$yc:00000208 sub_208         proc near               ; DATA XREF: .CRT$XCU:00000250o
.text$yc:00000208                 push    ebp
.text$yc:00000209                 mov     ebp, esp
.text$yc:0000020B                 mov     ecx, offset unk_24C ; this
.text$yc:00000210                 call    sub_220
.text$yc:00000215                 cmp     ebp, esp
.text$yc:00000217                 call    nullsub_3
.text$yc:0000021C                 pop     ebp
.text$yc:0000021D                 retn
.text$yc:0000021D sub_208         endp
.text$yc:0000021D
.text$yc:0000021D ; ---------------------------------------------------------------------------
.text$yc:0000021E                 dw ?
.text$yc:0000021E _text$yc        ends
.text$yc:0000021E
.text:00000220 ; ===========================================================================
.text:00000220
.text:00000220 ; Segment type: Pure code
.text:00000220 ; Segment permissions: Read/Execute
.text:00000220 _text           segment para public 'CODE' use32
.text:00000220                 assume cs:_text
.text:00000220                 ;org 220h
.text:00000220 ; COMDAT (pick any)
.text:00000220                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000220
.text:00000220 ; =============== S U B R O U T I N E =======================================
.text:00000220
.text:00000220 ; Attributes: bp-based frame
.text:00000220
.text:00000220 ; _DWORD __thiscall sub_220(CRegisterCodecLZMA2 *__hidden this)
.text:00000220 sub_220         proc near               ; CODE XREF: sub_208+8p
.text:00000220
.text:00000220 var_4           = dword ptr -4
.text:00000220
.text:00000220                 push    ebp
.text:00000221                 mov     ebp, esp
.text:00000223                 push    ecx
.text:00000224                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000022B                 mov     [ebp+var_4], ecx
.text:0000022E                 push    offset off_8    ; struct CCodecInfo *
.text:00000233                 call    nullsub_7
.text:00000238                 mov     eax, [ebp+var_4]
.text:0000023B                 add     esp, 4
.text:0000023E                 cmp     ebp, esp
.text:00000240                 call    nullsub_3
.text:00000245                 mov     esp, ebp
.text:00000247                 pop     ebp
.text:00000248                 retn
.text:00000248 sub_220         endp
.text:00000248
.text:00000248 ; ---------------------------------------------------------------------------
.text:00000249                 db 3 dup(?)
.text:00000249 _text           ends
.text:00000249
.bss:0000024C ; ===========================================================================
.bss:0000024C
.bss:0000024C ; Segment type: Uninitialized
.bss:0000024C ; Segment permissions: Read/Write
.bss:0000024C _bss            segment byte public 'BSS' use32
.bss:0000024C                 assume cs:_bss
.bss:0000024C                 ;org 24Ch
.bss:0000024C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000024C ; CRegisterCodecLZMA2 unk_24C
.bss:0000024C unk_24C         db    ? ;               ; DATA XREF: sub_208+3o
.bss:0000024D                 db    ? ;
.bss:0000024E                 db    ? ;
.bss:0000024F                 db    ? ;
.bss:0000024F _bss            ends
.bss:0000024F
.CRT$XCU:00000250 ; ===========================================================================
.CRT$XCU:00000250
.CRT$XCU:00000250 ; Segment type: Pure data
.CRT$XCU:00000250 ; Segment permissions: Read
.CRT$XCU:00000250 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00000250                 assume cs:_CRT$XCU
.CRT$XCU:00000250                 ;org 250h
.CRT$XCU:00000250                 dd offset sub_208
.CRT$XCU:00000250 _CRT$XCU        ends
.CRT$XCU:00000250
UNDEF:00000260 ; ===========================================================================
UNDEF:00000260
UNDEF:00000260 ; Segment type: Externs
UNDEF:00000260 ; UNDEF
UNDEF:00000260 ; [00000004 BYTES: COLLAPSED FUNCTION nullsub_5. PRESS CTRL-NUMPAD+ TO EXPAND]
UNDEF:00000264 ; [00000004 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS CTRL-NUMPAD+ TO EXPAND]
UNDEF:00000268 ; [00000004 BYTES: COLLAPSED FUNCTION nullsub_2. PRESS CTRL-NUMPAD+ TO EXPAND]
UNDEF:0000026C                 extrn dword_26C:dword   ; DATA XREF: sub_28+29r
UNDEF:0000026C                                         ; sub_C8+29r
UNDEF:00000270                 extrn locret_270:near   ; CODE XREF: .text$x:0000017Dj
UNDEF:00000270                                         ; .text$x:000001A3j
UNDEF:00000274 ; [00000004 BYTES: COLLAPSED FUNCTION nullsub_6. PRESS CTRL-NUMPAD+ TO EXPAND]
UNDEF:00000278 ; [00000004 BYTES: COLLAPSED FUNCTION nullsub_3. PRESS CTRL-NUMPAD+ TO EXPAND]
UNDEF:0000027C                 extrn unk_27C           ; DATA XREF: .rtc$TMZ:00000200o
UNDEF:00000280                 extrn unk_280           ; DATA XREF: .rtc$IMZ:00000204o
UNDEF:00000284 ; [00000004 BYTES: COLLAPSED FUNCTION nullsub_4. PRESS CTRL-NUMPAD+ TO EXPAND]
UNDEF:00000288 ; [00000004 BYTES: COLLAPSED FUNCTION nullsub_7. PRESS CTRL-NUMPAD+ TO EXPAND]