.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 9425FA0113ED648ED62BB63EE3F9CF43
.text:00000000 ; Input CRC32 : E24AEACD
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\VirtThread.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; unsigned int __thiscall CVirtThread::Create(CVirtThread *__hidden this)
.text:00000000                 public ?Create@CVirtThread@@QAEIXZ
.text:00000000 ?Create@CVirtThread@@QAEIXZ proc near
.text:00000000
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 0Ch
.text:00000006                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000000D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000014                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000001B                 mov     [ebp+var_4], ecx
.text:0000001E                 mov     ecx, [ebp+var_4]
.text:00000021                 add     ecx, 4          ; this
.text:00000024                 call    ?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)
.text:00000029                 mov     [ebp+var_8], eax
.text:0000002C                 cmp     [ebp+var_8], 0
.text:00000030                 jz      short loc_37
.text:00000032                 mov     eax, [ebp+var_8]
.text:00000035                 jmp     short loc_97
.text:00000037 ; ---------------------------------------------------------------------------
.text:00000037
.text:00000037 loc_37:                                 ; CODE XREF: CVirtThread::Create(void)+30j
.text:00000037                 mov     ecx, [ebp+var_4]
.text:0000003A                 add     ecx, 8          ; this
.text:0000003D                 call    ?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)
.text:00000042                 mov     [ebp+var_C], eax
.text:00000045                 cmp     [ebp+var_C], 0
.text:00000049                 jz      short loc_50
.text:0000004B                 mov     eax, [ebp+var_C]
.text:0000004E                 jmp     short loc_97
.text:00000050 ; ---------------------------------------------------------------------------
.text:00000050
.text:00000050 loc_50:                                 ; CODE XREF: CVirtThread::Create(void)+49j
.text:00000050                 mov     ecx, [ebp+var_4]
.text:00000053                 add     ecx, 4          ; this
.text:00000056                 call    ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Reset(void)
.text:0000005B                 mov     ecx, [ebp+var_4]
.text:0000005E                 add     ecx, 8          ; this
.text:00000061                 call    ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Reset(void)
.text:00000066                 mov     eax, [ebp+var_4]
.text:00000069                 mov     byte ptr [eax+10h], 0
.text:0000006D                 mov     ecx, [ebp+var_4]
.text:00000070                 add     ecx, 0Ch        ; this
.text:00000073                 call    ?IsCreated@CThread@NWindows@@QAE_NXZ ; NWindows::CThread::IsCreated(void)
.text:00000078                 movzx   ecx, al
.text:0000007B                 test    ecx, ecx
.text:0000007D                 jz      short loc_83
.text:0000007F                 xor     eax, eax
.text:00000081                 jmp     short loc_97
.text:00000083 ; ---------------------------------------------------------------------------
.text:00000083
.text:00000083 loc_83:                                 ; CODE XREF: CVirtThread::Create(void)+7Dj
.text:00000083                 mov     edx, [ebp+var_4]
.text:00000086                 push    edx             ; void *
.text:00000087                 push    offset ?CoderThread@@YGIPAX@Z ; unsigned int (__stdcall *)(void *)
.text:0000008C                 mov     ecx, [ebp+var_4]
.text:0000008F                 add     ecx, 0Ch        ; this
.text:00000092                 call    ?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z ; NWindows::CThread::Create(uint (*)(void *),void *)
.text:00000097
.text:00000097 loc_97:                                 ; CODE XREF: CVirtThread::Create(void)+35j
.text:00000097                                         ; CVirtThread::Create(void)+4Ej ...
.text:00000097                 add     esp, 0Ch
.text:0000009A                 cmp     ebp, esp
.text:0000009C                 call    __RTC_CheckEsp
.text:000000A1                 mov     esp, ebp
.text:000000A3                 pop     ebp
.text:000000A4                 retn
.text:000000A4 ?Create@CVirtThread@@QAEIXZ endp
.text:000000A4
.text:000000A4 ; ---------------------------------------------------------------------------
.text:000000A5                 align 10h
.text:000000B0
.text:000000B0 ; =============== S U B R O U T I N E =======================================
.text:000000B0
.text:000000B0 ; Attributes: bp-based frame
.text:000000B0
.text:000000B0 ; int __stdcall CoderThread(void *)
.text:000000B0 ?CoderThread@@YGIPAX@Z proc near        ; DATA XREF: CVirtThread::Create(void)+87o
.text:000000B0
.text:000000B0 var_4           = dword ptr -4
.text:000000B0 arg_0           = dword ptr  8
.text:000000B0
.text:000000B0                 push    ebp
.text:000000B1                 mov     ebp, esp
.text:000000B3                 push    ecx
.text:000000B4                 push    esi
.text:000000B5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000BC
.text:000000BC loc_BC:                                 ; CODE XREF: CoderThread(void *)+4Cj
.text:000000BC                 mov     eax, [ebp+arg_0]
.text:000000BF                 mov     [ebp+var_4], eax
.text:000000C2                 mov     ecx, [ebp+var_4]
.text:000000C5                 add     ecx, 4          ; this
.text:000000C8                 call    ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock(void)
.text:000000CD                 mov     ecx, [ebp+var_4]
.text:000000D0                 movzx   edx, byte ptr [ecx+10h]
.text:000000D4                 test    edx, edx
.text:000000D6                 jz      short loc_DC
.text:000000D8                 xor     eax, eax
.text:000000DA                 jmp     short loc_FE
.text:000000DC ; ---------------------------------------------------------------------------
.text:000000DC
.text:000000DC loc_DC:                                 ; CODE XREF: CoderThread(void *)+26j
.text:000000DC                 mov     eax, [ebp+var_4]
.text:000000DF                 mov     edx, [eax]
.text:000000E1                 mov     esi, esp
.text:000000E3                 mov     ecx, [ebp+var_4]
.text:000000E6                 mov     eax, [edx]
.text:000000E8                 call    eax
.text:000000EA                 cmp     esi, esp
.text:000000EC                 call    __RTC_CheckEsp
.text:000000F1                 mov     ecx, [ebp+var_4]
.text:000000F4                 add     ecx, 8          ; this
.text:000000F7                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:000000FC                 jmp     short loc_BC
.text:000000FE ; ---------------------------------------------------------------------------
.text:000000FE
.text:000000FE loc_FE:                                 ; CODE XREF: CoderThread(void *)+2Aj
.text:000000FE                 pop     esi
.text:000000FF                 add     esp, 4
.text:00000102                 cmp     ebp, esp
.text:00000104                 call    __RTC_CheckEsp
.text:00000109                 mov     esp, ebp
.text:0000010B                 pop     ebp
.text:0000010C                 retn    4
.text:0000010C ?CoderThread@@YGIPAX@Z endp
.text:0000010C
.text:0000010C ; ---------------------------------------------------------------------------
.text:0000010F                 align 10h
.text:00000110
.text:00000110 ; =============== S U B R O U T I N E =======================================
.text:00000110
.text:00000110 ; Attributes: bp-based frame
.text:00000110
.text:00000110 ; void __thiscall CVirtThread::Start(CVirtThread *__hidden this)
.text:00000110                 public ?Start@CVirtThread@@QAEXXZ
.text:00000110 ?Start@CVirtThread@@QAEXXZ proc near
.text:00000110
.text:00000110 var_4           = dword ptr -4
.text:00000110
.text:00000110                 push    ebp
.text:00000111                 mov     ebp, esp
.text:00000113                 push    ecx
.text:00000114                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000011B                 mov     [ebp+var_4], ecx
.text:0000011E                 mov     eax, [ebp+var_4]
.text:00000121                 mov     byte ptr [eax+10h], 0
.text:00000125                 mov     ecx, [ebp+var_4]
.text:00000128                 add     ecx, 4          ; this
.text:0000012B                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:00000130                 add     esp, 4
.text:00000133                 cmp     ebp, esp
.text:00000135                 call    __RTC_CheckEsp
.text:0000013A                 mov     esp, ebp
.text:0000013C                 pop     ebp
.text:0000013D                 retn
.text:0000013D ?Start@CVirtThread@@QAEXXZ endp
.text:0000013D
.text:0000013D ; ---------------------------------------------------------------------------
.text:0000013E                 align 10h
.text:00000140
.text:00000140 ; =============== S U B R O U T I N E =======================================
.text:00000140
.text:00000140 ; Attributes: bp-based frame
.text:00000140
.text:00000140 ; void __thiscall CVirtThread::WaitThreadFinish(CVirtThread *__hidden this)
.text:00000140                 public ?WaitThreadFinish@CVirtThread@@QAEXXZ
.text:00000140 ?WaitThreadFinish@CVirtThread@@QAEXXZ proc near
.text:00000140
.text:00000140 var_4           = dword ptr -4
.text:00000140
.text:00000140                 push    ebp
.text:00000141                 mov     ebp, esp
.text:00000143                 push    ecx
.text:00000144                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000014B                 mov     [ebp+var_4], ecx
.text:0000014E                 mov     eax, [ebp+var_4]
.text:00000151                 mov     byte ptr [eax+10h], 1
.text:00000155                 mov     ecx, [ebp+var_4]
.text:00000158                 add     ecx, 4          ; this
.text:0000015B                 call    ?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ ; NWindows::NSynchronization::CBaseEvent::IsCreated(void)
.text:00000160                 movzx   ecx, al
.text:00000163                 test    ecx, ecx
.text:00000165                 jz      short loc_172
.text:00000167                 mov     ecx, [ebp+var_4]
.text:0000016A                 add     ecx, 4          ; this
.text:0000016D                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:00000172
.text:00000172 loc_172:                                ; CODE XREF: CVirtThread::WaitThreadFinish(void)+25j
.text:00000172                 mov     ecx, [ebp+var_4]
.text:00000175                 add     ecx, 0Ch        ; this
.text:00000178                 call    ?IsCreated@CThread@NWindows@@QAE_NXZ ; NWindows::CThread::IsCreated(void)
.text:0000017D                 movzx   edx, al
.text:00000180                 test    edx, edx
.text:00000182                 jz      short loc_19A
.text:00000184                 mov     ecx, [ebp+var_4]
.text:00000187                 add     ecx, 0Ch        ; this
.text:0000018A                 call    ?Wait@CThread@NWindows@@QAEIXZ ; NWindows::CThread::Wait(void)
.text:0000018F                 mov     ecx, [ebp+var_4]
.text:00000192                 add     ecx, 0Ch        ; this
.text:00000195                 call    ?Close@CThread@NWindows@@QAEIXZ ; NWindows::CThread::Close(void)
.text:0000019A
.text:0000019A loc_19A:                                ; CODE XREF: CVirtThread::WaitThreadFinish(void)+42j
.text:0000019A                 add     esp, 4
.text:0000019D                 cmp     ebp, esp
.text:0000019F                 call    __RTC_CheckEsp
.text:000001A4                 mov     esp, ebp
.text:000001A6                 pop     ebp
.text:000001A7                 retn
.text:000001A7 ?WaitThreadFinish@CVirtThread@@QAEXXZ endp
.text:000001A7
.text:000001A7 _text           ends
.text:000001A7
.rtc$TMZ:000001A8 ; ===========================================================================
.rtc$TMZ:000001A8
.rtc$TMZ:000001A8 ; Segment type: Pure data
.rtc$TMZ:000001A8 ; Segment permissions: Read
.rtc$TMZ:000001A8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000001A8                 assume cs:_rtc$TMZ
.rtc$TMZ:000001A8                 ;org 1A8h
.rtc$TMZ:000001A8 ; COMDAT (pick any)
.rtc$TMZ:000001A8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000001A8 _rtc$TMZ        ends
.rtc$TMZ:000001A8
.rtc$IMZ:000001AC ; ===========================================================================
.rtc$IMZ:000001AC
.rtc$IMZ:000001AC ; Segment type: Pure data
.rtc$IMZ:000001AC ; Segment permissions: Read
.rtc$IMZ:000001AC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000001AC                 assume cs:_rtc$IMZ
.rtc$IMZ:000001AC                 ;org 1ACh
.rtc$IMZ:000001AC ; COMDAT (pick any)
.rtc$IMZ:000001AC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000001AC _rtc$IMZ        ends
.rtc$IMZ:000001AC
.text:000001B0 ; ===========================================================================
.text:000001B0
.text:000001B0 ; Segment type: Pure code
.text:000001B0 ; Segment permissions: Read/Execute
.text:000001B0 _text           segment para public 'CODE' use32
.text:000001B0                 assume cs:_text
.text:000001B0                 ;org 1B0h
.text:000001B0 ; COMDAT (pick any)
.text:000001B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000001B0
.text:000001B0 ; =============== S U B R O U T I N E =======================================
.text:000001B0
.text:000001B0 ; Attributes: bp-based frame
.text:000001B0
.text:000001B0 ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Reset(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:000001B0                 public ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:000001B0 ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:000001B0                                         ; CODE XREF: CVirtThread::Create(void)+56p
.text:000001B0                                         ; CVirtThread::Create(void)+61p
.text:000001B0
.text:000001B0 var_4           = dword ptr -4
.text:000001B0
.text:000001B0                 push    ebp
.text:000001B1                 mov     ebp, esp
.text:000001B3                 push    ecx
.text:000001B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001BB                 mov     [ebp+var_4], ecx
.text:000001BE                 mov     eax, [ebp+var_4]
.text:000001C1                 push    eax
.text:000001C2                 call    _Event_Reset@4  ; Event_Reset(x)
.text:000001C7                 add     esp, 4
.text:000001CA                 cmp     ebp, esp
.text:000001CC                 call    __RTC_CheckEsp
.text:000001D1                 mov     esp, ebp
.text:000001D3                 pop     ebp
.text:000001D4                 retn
.text:000001D4 ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:000001D4
.text:000001D4 ; ---------------------------------------------------------------------------
.text:000001D5                 align 4
.text:000001D5 _text           ends
.text:000001D5
.text:000001D8 ; ===========================================================================
.text:000001D8
.text:000001D8 ; Segment type: Pure code
.text:000001D8 ; Segment permissions: Read/Execute
.text:000001D8 _text           segment para public 'CODE' use32
.text:000001D8                 assume cs:_text
.text:000001D8                 ;org 1D8h
.text:000001D8 ; COMDAT (pick any)
.text:000001D8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000001D8
.text:000001D8 ; =============== S U B R O U T I N E =======================================
.text:000001D8
.text:000001D8 ; Attributes: bp-based frame
.text:000001D8
.text:000001D8 ; unsigned int __thiscall NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(NWindows::NSynchronization::CAutoResetEvent *__hidden this)
.text:000001D8                 public ?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ
.text:000001D8 ?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:000001D8                                         ; CODE XREF: CVirtThread::Create(void)+24p
.text:000001D8                                         ; CVirtThread::Create(void)+3Dp
.text:000001D8
.text:000001D8 var_4           = dword ptr -4
.text:000001D8
.text:000001D8                 push    ebp
.text:000001D9                 mov     ebp, esp
.text:000001DB                 push    ecx
.text:000001DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001E3                 mov     [ebp+var_4], ecx
.text:000001E6                 mov     ecx, [ebp+var_4] ; this
.text:000001E9                 call    ?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ ; NWindows::NSynchronization::CBaseEvent::IsCreated(void)
.text:000001EE                 movzx   eax, al
.text:000001F1                 test    eax, eax
.text:000001F3                 jz      short loc_1F9
.text:000001F5                 xor     eax, eax
.text:000001F7                 jmp     short loc_202
.text:000001F9 ; ---------------------------------------------------------------------------
.text:000001F9
.text:000001F9 loc_1F9:                                ; CODE XREF: NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)+1Bj
.text:000001F9                 mov     ecx, [ebp+var_4]
.text:000001FC                 push    ecx
.text:000001FD                 call    _AutoResetEvent_CreateNotSignaled@4 ; AutoResetEvent_CreateNotSignaled(x)
.text:00000202
.text:00000202 loc_202:                                ; CODE XREF: NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)+1Fj
.text:00000202                 add     esp, 4
.text:00000205                 cmp     ebp, esp
.text:00000207                 call    __RTC_CheckEsp
.text:0000020C                 mov     esp, ebp
.text:0000020E                 pop     ebp
.text:0000020F                 retn
.text:0000020F ?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:0000020F
.text:0000020F _text           ends
.text:0000020F
.text:00000210 ; ===========================================================================
.text:00000210
.text:00000210 ; Segment type: Pure code
.text:00000210 ; Segment permissions: Read/Execute
.text:00000210 _text           segment para public 'CODE' use32
.text:00000210                 assume cs:_text
.text:00000210                 ;org 210h
.text:00000210 ; COMDAT (pick any)
.text:00000210                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000210
.text:00000210 ; =============== S U B R O U T I N E =======================================
.text:00000210
.text:00000210 ; Attributes: bp-based frame
.text:00000210
.text:00000210 ; bool __thiscall NWindows::NSynchronization::CBaseEvent::IsCreated(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00000210                 public ?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ
.text:00000210 ?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ proc near
.text:00000210                                         ; CODE XREF: CVirtThread::WaitThreadFinish(void)+1Bp
.text:00000210                                         ; NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)+11p
.text:00000210
.text:00000210 var_4           = dword ptr -4
.text:00000210
.text:00000210                 push    ebp
.text:00000211                 mov     ebp, esp
.text:00000213                 push    ecx
.text:00000214                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000021B                 mov     [ebp+var_4], ecx
.text:0000021E                 mov     eax, [ebp+var_4]
.text:00000221                 xor     ecx, ecx
.text:00000223                 cmp     dword ptr [eax], 0
.text:00000226                 setnz   cl
.text:00000229                 neg     ecx
.text:0000022B                 sbb     ecx, ecx
.text:0000022D                 neg     ecx
.text:0000022F                 mov     al, cl
.text:00000231                 mov     esp, ebp
.text:00000233                 pop     ebp
.text:00000234                 retn
.text:00000234 ?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ endp
.text:00000234
.text:00000234 ; ---------------------------------------------------------------------------
.text:00000235                 align 4
.text:00000235 _text           ends
.text:00000235
.text:00000238 ; ===========================================================================
.text:00000238
.text:00000238 ; Segment type: Pure code
.text:00000238 ; Segment permissions: Read/Execute
.text:00000238 _text           segment para public 'CODE' use32
.text:00000238                 assume cs:_text
.text:00000238                 ;org 238h
.text:00000238 ; COMDAT (pick any)
.text:00000238                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000238
.text:00000238 ; =============== S U B R O U T I N E =======================================
.text:00000238
.text:00000238 ; Attributes: bp-based frame
.text:00000238
.text:00000238 ; bool __thiscall NWindows::CThread::IsCreated(NWindows::CThread *__hidden this)
.text:00000238                 public ?IsCreated@CThread@NWindows@@QAE_NXZ
.text:00000238 ?IsCreated@CThread@NWindows@@QAE_NXZ proc near
.text:00000238                                         ; CODE XREF: CVirtThread::Create(void)+73p
.text:00000238                                         ; CVirtThread::WaitThreadFinish(void)+38p
.text:00000238
.text:00000238 var_4           = dword ptr -4
.text:00000238
.text:00000238                 push    ebp
.text:00000239                 mov     ebp, esp
.text:0000023B                 push    ecx
.text:0000023C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000243                 mov     [ebp+var_4], ecx
.text:00000246                 mov     eax, [ebp+var_4]
.text:00000249                 xor     ecx, ecx
.text:0000024B                 cmp     dword ptr [eax], 0
.text:0000024E                 setnz   cl
.text:00000251                 neg     ecx
.text:00000253                 sbb     ecx, ecx
.text:00000255                 neg     ecx
.text:00000257                 mov     al, cl
.text:00000259                 mov     esp, ebp
.text:0000025B                 pop     ebp
.text:0000025C                 retn
.text:0000025C ?IsCreated@CThread@NWindows@@QAE_NXZ endp
.text:0000025C
.text:0000025C ; ---------------------------------------------------------------------------
.text:0000025D                 align 10h
.text:0000025D _text           ends
.text:0000025D
.text:00000260 ; ===========================================================================
.text:00000260
.text:00000260 ; Segment type: Pure code
.text:00000260 ; Segment permissions: Read/Execute
.text:00000260 _text           segment para public 'CODE' use32
.text:00000260                 assume cs:_text
.text:00000260                 ;org 260h
.text:00000260 ; COMDAT (pick any)
.text:00000260                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000260
.text:00000260 ; =============== S U B R O U T I N E =======================================
.text:00000260
.text:00000260 ; Attributes: bp-based frame
.text:00000260
.text:00000260 ; unsigned int __thiscall NWindows::CThread::Create(NWindows::CThread *this, unsigned int (__stdcall *)(void *), void *)
.text:00000260                 public ?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z
.text:00000260 ?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z proc near
.text:00000260                                         ; CODE XREF: CVirtThread::Create(void)+92p
.text:00000260
.text:00000260 var_4           = dword ptr -4
.text:00000260 arg_0           = dword ptr  8
.text:00000260 arg_4           = dword ptr  0Ch
.text:00000260
.text:00000260                 push    ebp
.text:00000261                 mov     ebp, esp
.text:00000263                 push    ecx
.text:00000264                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000026B                 mov     [ebp+var_4], ecx
.text:0000026E                 mov     eax, [ebp+arg_4]
.text:00000271                 push    eax
.text:00000272                 mov     ecx, [ebp+arg_0]
.text:00000275                 push    ecx
.text:00000276                 mov     edx, [ebp+var_4]
.text:00000279                 push    edx
.text:0000027A                 call    _Thread_Create@12 ; Thread_Create(x,x,x)
.text:0000027F                 add     esp, 4
.text:00000282                 cmp     ebp, esp
.text:00000284                 call    __RTC_CheckEsp
.text:00000289                 mov     esp, ebp
.text:0000028B                 pop     ebp
.text:0000028C                 retn    8
.text:0000028C ?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z endp
.text:0000028C
.text:0000028C ; ---------------------------------------------------------------------------
.text:0000028F                 align 10h
.text:0000028F _text           ends
.text:0000028F
.text:00000290 ; ===========================================================================
.text:00000290
.text:00000290 ; Segment type: Pure code
.text:00000290 ; Segment permissions: Read/Execute
.text:00000290 _text           segment para public 'CODE' use32
.text:00000290                 assume cs:_text
.text:00000290                 ;org 290h
.text:00000290 ; COMDAT (pick any)
.text:00000290                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000290
.text:00000290 ; =============== S U B R O U T I N E =======================================
.text:00000290
.text:00000290 ; Attributes: bp-based frame
.text:00000290
.text:00000290 ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Set(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00000290                 public ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:00000290 ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:00000290                                         ; CODE XREF: CoderThread(void *)+47p
.text:00000290                                         ; CVirtThread::Start(void)+1Bp ...
.text:00000290
.text:00000290 var_4           = dword ptr -4
.text:00000290
.text:00000290                 push    ebp
.text:00000291                 mov     ebp, esp
.text:00000293                 push    ecx
.text:00000294                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000029B                 mov     [ebp+var_4], ecx
.text:0000029E                 mov     eax, [ebp+var_4]
.text:000002A1                 push    eax
.text:000002A2                 call    _Event_Set@4    ; Event_Set(x)
.text:000002A7                 add     esp, 4
.text:000002AA                 cmp     ebp, esp
.text:000002AC                 call    __RTC_CheckEsp
.text:000002B1                 mov     esp, ebp
.text:000002B3                 pop     ebp
.text:000002B4                 retn
.text:000002B4 ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:000002B4
.text:000002B4 ; ---------------------------------------------------------------------------
.text:000002B5                 align 4
.text:000002B5 _text           ends
.text:000002B5
.text:000002B8 ; ===========================================================================
.text:000002B8
.text:000002B8 ; Segment type: Pure code
.text:000002B8 ; Segment permissions: Read/Execute
.text:000002B8 _text           segment para public 'CODE' use32
.text:000002B8                 assume cs:_text
.text:000002B8                 ;org 2B8h
.text:000002B8 ; COMDAT (pick any)
.text:000002B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000002B8
.text:000002B8 ; =============== S U B R O U T I N E =======================================
.text:000002B8
.text:000002B8 ; Attributes: bp-based frame
.text:000002B8
.text:000002B8 ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Lock(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:000002B8                 public ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:000002B8 ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:000002B8                                         ; CODE XREF: CoderThread(void *)+18p
.text:000002B8
.text:000002B8 var_4           = dword ptr -4
.text:000002B8
.text:000002B8                 push    ebp
.text:000002B9                 mov     ebp, esp
.text:000002BB                 push    ecx
.text:000002BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002C3                 mov     [ebp+var_4], ecx
.text:000002C6                 mov     eax, [ebp+var_4]
.text:000002C9                 mov     ecx, [eax]
.text:000002CB                 push    ecx
.text:000002CC                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:000002D1                 add     esp, 4
.text:000002D4                 cmp     ebp, esp
.text:000002D6                 call    __RTC_CheckEsp
.text:000002DB                 mov     esp, ebp
.text:000002DD                 pop     ebp
.text:000002DE                 retn
.text:000002DE ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:000002DE
.text:000002DE ; ---------------------------------------------------------------------------
.text:000002DF                 align 10h
.text:000002DF _text           ends
.text:000002DF
.text:000002E0 ; ===========================================================================
.text:000002E0
.text:000002E0 ; Segment type: Pure code
.text:000002E0 ; Segment permissions: Read/Execute
.text:000002E0 _text           segment para public 'CODE' use32
.text:000002E0                 assume cs:_text
.text:000002E0                 ;org 2E0h
.text:000002E0 ; COMDAT (pick any)
.text:000002E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000002E0
.text:000002E0 ; =============== S U B R O U T I N E =======================================
.text:000002E0
.text:000002E0 ; Attributes: bp-based frame
.text:000002E0
.text:000002E0 ; unsigned int __thiscall NWindows::CThread::Close(NWindows::CThread *__hidden this)
.text:000002E0                 public ?Close@CThread@NWindows@@QAEIXZ
.text:000002E0 ?Close@CThread@NWindows@@QAEIXZ proc near
.text:000002E0                                         ; CODE XREF: CVirtThread::WaitThreadFinish(void)+55p
.text:000002E0
.text:000002E0 var_4           = dword ptr -4
.text:000002E0
.text:000002E0                 push    ebp
.text:000002E1                 mov     ebp, esp
.text:000002E3                 push    ecx
.text:000002E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002EB                 mov     [ebp+var_4], ecx
.text:000002EE                 mov     eax, [ebp+var_4]
.text:000002F1                 push    eax
.text:000002F2                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:000002F7                 add     esp, 4
.text:000002FA                 cmp     ebp, esp
.text:000002FC                 call    __RTC_CheckEsp
.text:00000301                 mov     esp, ebp
.text:00000303                 pop     ebp
.text:00000304                 retn
.text:00000304 ?Close@CThread@NWindows@@QAEIXZ endp
.text:00000304
.text:00000304 ; ---------------------------------------------------------------------------
.text:00000305                 align 4
.text:00000305 _text           ends
.text:00000305
.text:00000308 ; ===========================================================================
.text:00000308
.text:00000308 ; Segment type: Pure code
.text:00000308 ; Segment permissions: Read/Execute
.text:00000308 _text           segment para public 'CODE' use32
.text:00000308                 assume cs:_text
.text:00000308                 ;org 308h
.text:00000308 ; COMDAT (pick any)
.text:00000308                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000308
.text:00000308 ; =============== S U B R O U T I N E =======================================
.text:00000308
.text:00000308 ; Attributes: bp-based frame
.text:00000308
.text:00000308 ; unsigned int __thiscall NWindows::CThread::Wait(NWindows::CThread *__hidden this)
.text:00000308                 public ?Wait@CThread@NWindows@@QAEIXZ
.text:00000308 ?Wait@CThread@NWindows@@QAEIXZ proc near
.text:00000308                                         ; CODE XREF: CVirtThread::WaitThreadFinish(void)+4Ap
.text:00000308
.text:00000308 var_4           = dword ptr -4
.text:00000308
.text:00000308                 push    ebp
.text:00000309                 mov     ebp, esp
.text:0000030B                 push    ecx
.text:0000030C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000313                 mov     [ebp+var_4], ecx
.text:00000316                 mov     eax, [ebp+var_4]
.text:00000319                 mov     ecx, [eax]
.text:0000031B                 push    ecx
.text:0000031C                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:00000321                 add     esp, 4
.text:00000324                 cmp     ebp, esp
.text:00000326                 call    __RTC_CheckEsp
.text:0000032B                 mov     esp, ebp
.text:0000032D                 pop     ebp
.text:0000032E                 retn
.text:0000032E ?Wait@CThread@NWindows@@QAEIXZ endp
.text:0000032E
.text:0000032E _text           ends
.text:0000032E
UNDEF:00000330 ; ===========================================================================
UNDEF:00000330
UNDEF:00000330 ; Segment type: Externs
UNDEF:00000330 ; UNDEF
UNDEF:00000330                 extrn __RTC_CheckEsp:near
UNDEF:00000330                                         ; CODE XREF: CVirtThread::Create(void)+9Cp
UNDEF:00000330                                         ; CoderThread(void *)+3Cp ...
UNDEF:00000334                 extrn __RTC_Shutdown:near
UNDEF:00000334                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000338                 extrn __RTC_InitBase:near
UNDEF:00000338                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000033C ; __stdcall Event_Reset(x)
UNDEF:0000033C                 extrn _Event_Reset@4:near
UNDEF:0000033C                                         ; CODE XREF: NWindows::NSynchronization::CBaseEvent::Reset(void)+12p
UNDEF:00000340 ; __stdcall AutoResetEvent_CreateNotSignaled(x)
UNDEF:00000340                 extrn _AutoResetEvent_CreateNotSignaled@4:near
UNDEF:00000340                                         ; CODE XREF: NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)+25p
UNDEF:00000344 ; __stdcall Thread_Create(x, x, x)
UNDEF:00000344                 extrn _Thread_Create@12:near
UNDEF:00000344                                         ; CODE XREF: NWindows::CThread::Create(uint (*)(void *),void *)+1Ap
UNDEF:00000348 ; __stdcall Event_Set(x)
UNDEF:00000348                 extrn _Event_Set@4:near ; CODE XREF: NWindows::NSynchronization::CBaseEvent::Set(void)+12p
UNDEF:0000034C ; __stdcall Handle_WaitObject(x)
UNDEF:0000034C                 extrn _Handle_WaitObject@4:near
UNDEF:0000034C                                         ; CODE XREF: NWindows::NSynchronization::CBaseEvent::Lock(void)+14p
UNDEF:0000034C                                         ; NWindows::CThread::Wait(void)+14p
UNDEF:00000350 ; __stdcall HandlePtr_Close(x)
UNDEF:00000350                 extrn _HandlePtr_Close@4:near
UNDEF:00000350                                         ; CODE XREF: NWindows::CThread::Close(void)+12p
UNDEF:00000350
UNDEF:00000350
UNDEF:00000350                 end