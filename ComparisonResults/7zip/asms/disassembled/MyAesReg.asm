.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 39E188B990186675CDCB68875BEEE02D
.rdata:00000000 ; Input CRC32 : 3AD4021B
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\MyAesReg.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG66573        db 'AES256CBC',0        ; DATA XREF: .rdata:00000020o
.rdata:0000000A                 align 10h
.rdata:00000010 ; struct CCodecInfo g_CodecInfo
.rdata:00000010 _g_CodecInfo    dd offset ?CreateDec@@YGPAXXZ
.rdata:00000010                                         ; DATA XREF: CRegisterCodecAES256CBC::CRegisterCodecAES256CBC(void)+Eo
.rdata:00000010                                         ; CreateDec(void)
.rdata:00000014                 dd offset ?CreateEnc@@YGPAXXZ ; CreateEnc(void)
.rdata:00000018                 db  81h ; Ã¼
.rdata:00000019                 db    1
.rdata:0000001A                 db 0F0h ; =
.rdata:0000001B                 db    6
.rdata:0000001C                 db    0
.rdata:0000001D                 db    0
.rdata:0000001E                 db    0
.rdata:0000001F                 db    0
.rdata:00000020                 dd offset $SG66573      ; "AES256CBC"
.rdata:00000024                 db    1
.rdata:00000025                 db    0
.rdata:00000026                 db    0
.rdata:00000027                 db    0
.rdata:00000028                 db    1
.rdata:00000029                 db    0
.rdata:0000002A                 db    0
.rdata:0000002B                 db    0
.rdata:0000002C                 db    0
.rdata:0000002D                 db    0
.rdata:0000002E                 db    0
.rdata:0000002F                 db    0
.rdata:0000002F _rdata          ends
.rdata:0000002F
.text:00000030 ; ===========================================================================
.text:00000030
.text:00000030 ; Segment type: Pure code
.text:00000030 ; Segment permissions: Read/Execute
.text:00000030 _text           segment para public 'CODE' use32
.text:00000030                 assume cs:_text
.text:00000030                 ;org 30h
.text:00000030                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000030
.text:00000030 ; =============== S U B R O U T I N E =======================================
.text:00000030
.text:00000030 ; Attributes: bp-based frame
.text:00000030
.text:00000030 ; void * __stdcall CreateDec(void)
.text:00000030 ?CreateDec@@YGPAXXZ proc near           ; DATA XREF: .rdata:_g_CodecInfoo
.text:00000030
.text:00000030 var_18          = dword ptr -18h
.text:00000030 var_14          = dword ptr -14h
.text:00000030 var_10          = dword ptr -10h
.text:00000030 var_C           = dword ptr -0Ch
.text:00000030 var_4           = dword ptr -4
.text:00000030
.text:00000030                 push    ebp
.text:00000031                 mov     ebp, esp
.text:00000033                 push    0FFFFFFFFh
.text:00000035                 push    offset __ehhandler$?CreateDec@@YGPAXXZ
.text:0000003A                 mov     eax, large fs:0
.text:00000040                 push    eax
.text:00000041                 sub     esp, 0Ch
.text:00000044                 mov     [ebp+var_18], 0CCCCCCCCh
.text:0000004B                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00000052                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000059                 mov     eax, dword ptr ds:___security_cookie
.text:0000005E                 xor     eax, ebp
.text:00000060                 push    eax
.text:00000061                 lea     eax, [ebp+var_C]
.text:00000064                 mov     large fs:0, eax
.text:0000006A                 push    14Ch            ; unsigned int
.text:0000006F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000074                 add     esp, 4
.text:00000077                 mov     [ebp+var_14], eax
.text:0000007A                 mov     [ebp+var_4], 0
.text:00000081                 cmp     [ebp+var_14], 0
.text:00000085                 jz      short loc_96
.text:00000087                 push    20h ; ' '       ; unsigned int
.text:00000089                 mov     ecx, [ebp+var_14] ; this
.text:0000008C                 call    ??0CAesCbcDecoder@NCrypto@@QAE@I@Z ; NCrypto::CAesCbcDecoder::CAesCbcDecoder(uint)
.text:00000091                 mov     [ebp+var_18], eax
.text:00000094                 jmp     short loc_9D
.text:00000096 ; ---------------------------------------------------------------------------
.text:00000096
.text:00000096 loc_96:                                 ; CODE XREF: CreateDec(void)+55j
.text:00000096                 mov     [ebp+var_18], 0
.text:0000009D
.text:0000009D loc_9D:                                 ; CODE XREF: CreateDec(void)+64j
.text:0000009D                 mov     eax, [ebp+var_18]
.text:000000A0                 mov     [ebp+var_10], eax
.text:000000A3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000000AA                 mov     eax, [ebp+var_10]
.text:000000AD                 mov     ecx, [ebp+var_C]
.text:000000B0                 mov     large fs:0, ecx
.text:000000B7                 pop     ecx
.text:000000B8                 add     esp, 18h
.text:000000BB                 cmp     ebp, esp
.text:000000BD                 call    __RTC_CheckEsp
.text:000000C2                 mov     esp, ebp
.text:000000C4                 pop     ebp
.text:000000C5                 retn
.text:000000C5 ?CreateDec@@YGPAXXZ endp
.text:000000C5
.text:000000C5 ; ---------------------------------------------------------------------------
.text:000000C6                 align 10h
.text:000000D0
.text:000000D0 ; =============== S U B R O U T I N E =======================================
.text:000000D0
.text:000000D0 ; Attributes: bp-based frame
.text:000000D0
.text:000000D0 ; void * __stdcall CreateEnc(void)
.text:000000D0 ?CreateEnc@@YGPAXXZ proc near           ; DATA XREF: .rdata:00000014o
.text:000000D0
.text:000000D0 var_18          = dword ptr -18h
.text:000000D0 var_14          = dword ptr -14h
.text:000000D0 var_10          = dword ptr -10h
.text:000000D0 var_C           = dword ptr -0Ch
.text:000000D0 var_4           = dword ptr -4
.text:000000D0
.text:000000D0                 push    ebp
.text:000000D1                 mov     ebp, esp
.text:000000D3                 push    0FFFFFFFFh
.text:000000D5                 push    offset __ehhandler$?CreateEnc@@YGPAXXZ
.text:000000DA                 mov     eax, large fs:0
.text:000000E0                 push    eax
.text:000000E1                 sub     esp, 0Ch
.text:000000E4                 mov     [ebp+var_18], 0CCCCCCCCh
.text:000000EB                 mov     [ebp+var_14], 0CCCCCCCCh
.text:000000F2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000000F9                 mov     eax, dword ptr ds:___security_cookie
.text:000000FE                 xor     eax, ebp
.text:00000100                 push    eax
.text:00000101                 lea     eax, [ebp+var_C]
.text:00000104                 mov     large fs:0, eax
.text:0000010A                 push    14Ch            ; unsigned int
.text:0000010F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000114                 add     esp, 4
.text:00000117                 mov     [ebp+var_14], eax
.text:0000011A                 mov     [ebp+var_4], 0
.text:00000121                 cmp     [ebp+var_14], 0
.text:00000125                 jz      short loc_136
.text:00000127                 push    20h ; ' '       ; unsigned int
.text:00000129                 mov     ecx, [ebp+var_14] ; this
.text:0000012C                 call    ??0CAesCbcEncoder@NCrypto@@QAE@I@Z ; NCrypto::CAesCbcEncoder::CAesCbcEncoder(uint)
.text:00000131                 mov     [ebp+var_18], eax
.text:00000134                 jmp     short loc_13D
.text:00000136 ; ---------------------------------------------------------------------------
.text:00000136
.text:00000136 loc_136:                                ; CODE XREF: CreateEnc(void)+55j
.text:00000136                 mov     [ebp+var_18], 0
.text:0000013D
.text:0000013D loc_13D:                                ; CODE XREF: CreateEnc(void)+64j
.text:0000013D                 mov     eax, [ebp+var_18]
.text:00000140                 mov     [ebp+var_10], eax
.text:00000143                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000014A                 mov     eax, [ebp+var_10]
.text:0000014D                 mov     ecx, [ebp+var_C]
.text:00000150                 mov     large fs:0, ecx
.text:00000157                 pop     ecx
.text:00000158                 add     esp, 18h
.text:0000015B                 cmp     ebp, esp
.text:0000015D                 call    __RTC_CheckEsp
.text:00000162                 mov     esp, ebp
.text:00000164                 pop     ebp
.text:00000165                 retn
.text:00000165 ?CreateEnc@@YGPAXXZ endp
.text:00000165
.text:00000165 ; ---------------------------------------------------------------------------
.text:00000166                 align 4
.text:00000166 _text           ends
.text:00000166
.text$x:00000168 ; ===========================================================================
.text$x:00000168
.text$x:00000168 ; Segment type: Pure code
.text$x:00000168 ; Segment permissions: Read/Execute
.text$x:00000168 _text$x         segment para public 'CODE' use32
.text$x:00000168                 assume cs:_text$x
.text$x:00000168                 ;org 168h
.text$x:00000168                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000168
.text$x:00000168 ; =============== S U B R O U T I N E =======================================
.text$x:00000168
.text$x:00000168
.text$x:00000168 __unwindfunclet$?CreateDec@@YGPAXXZ$0 proc near
.text$x:00000168                                         ; DATA XREF: .xdata$x:000001B8o
.text$x:00000168                 mov     eax, [ebp-14h]
.text$x:0000016B                 push    eax             ; void *
.text$x:0000016C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000171                 pop     ecx
.text$x:00000172                 retn
.text$x:00000172 __unwindfunclet$?CreateDec@@YGPAXXZ$0 endp
.text$x:00000172
.text$x:00000173
.text$x:00000173 ; =============== S U B R O U T I N E =======================================
.text$x:00000173
.text$x:00000173
.text$x:00000173 __ehhandler$?CreateDec@@YGPAXXZ proc near ; DATA XREF: CreateDec(void)+5o
.text$x:00000173
.text$x:00000173 arg_4           = dword ptr  8
.text$x:00000173
.text$x:00000173                 mov     edx, [esp+arg_4]
.text$x:00000177                 lea     eax, [edx+0Ch]
.text$x:0000017A                 mov     ecx, [edx-10h]
.text$x:0000017D                 xor     ecx, eax
.text$x:0000017F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000184                 mov     eax, offset __ehfuncinfo$?CreateDec@@YGPAXXZ
.text$x:00000189                 jmp     ___CxxFrameHandler3
.text$x:00000189 __ehhandler$?CreateDec@@YGPAXXZ endp
.text$x:00000189
.text$x:0000018E
.text$x:0000018E ; =============== S U B R O U T I N E =======================================
.text$x:0000018E
.text$x:0000018E
.text$x:0000018E __unwindfunclet$?CreateEnc@@YGPAXXZ$0 proc near
.text$x:0000018E                                         ; DATA XREF: .xdata$x:000001E4o
.text$x:0000018E                 mov     eax, [ebp-14h]
.text$x:00000191                 push    eax             ; void *
.text$x:00000192                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000197                 pop     ecx
.text$x:00000198                 retn
.text$x:00000198 __unwindfunclet$?CreateEnc@@YGPAXXZ$0 endp
.text$x:00000198
.text$x:00000199
.text$x:00000199 ; =============== S U B R O U T I N E =======================================
.text$x:00000199
.text$x:00000199
.text$x:00000199 __ehhandler$?CreateEnc@@YGPAXXZ proc near ; DATA XREF: CreateEnc(void)+5o
.text$x:00000199
.text$x:00000199 arg_4           = dword ptr  8
.text$x:00000199
.text$x:00000199                 mov     edx, [esp+arg_4]
.text$x:0000019D                 lea     eax, [edx+0Ch]
.text$x:000001A0                 mov     ecx, [edx-10h]
.text$x:000001A3                 xor     ecx, eax
.text$x:000001A5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000001AA                 mov     eax, offset __ehfuncinfo$?CreateEnc@@YGPAXXZ
.text$x:000001AF                 jmp     ___CxxFrameHandler3
.text$x:000001AF __ehhandler$?CreateEnc@@YGPAXXZ endp
.text$x:000001AF
.text$x:000001AF _text$x         ends
.text$x:000001AF
.xdata$x:000001B4 ; ===========================================================================
.xdata$x:000001B4
.xdata$x:000001B4 ; Segment type: Pure data
.xdata$x:000001B4 ; Segment permissions: Read
.xdata$x:000001B4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000001B4                 assume cs:_xdata$x
.xdata$x:000001B4                 ;org 1B4h
.xdata$x:000001B4 __unwindtable$?CreateDec@@YGPAXXZ db 0FFh ; DATA XREF: .xdata$x:000001C4o
.xdata$x:000001B5                 db 0FFh
.xdata$x:000001B6                 db 0FFh
.xdata$x:000001B7                 db 0FFh
.xdata$x:000001B8                 dd offset __unwindfunclet$?CreateDec@@YGPAXXZ$0
.xdata$x:000001BC __ehfuncinfo$?CreateDec@@YGPAXXZ db  22h ; "
.xdata$x:000001BC                                         ; DATA XREF: __ehhandler$?CreateDec@@YGPAXXZ+11o
.xdata$x:000001BD                 db    5
.xdata$x:000001BE                 db  93h ; Ã´
.xdata$x:000001BF                 db  19h
.xdata$x:000001C0                 db    1
.xdata$x:000001C1                 db    0
.xdata$x:000001C2                 db    0
.xdata$x:000001C3                 db    0
.xdata$x:000001C4                 dd offset __unwindtable$?CreateDec@@YGPAXXZ
.xdata$x:000001C8                 db    0
.xdata$x:000001C9                 db    0
.xdata$x:000001CA                 db    0
.xdata$x:000001CB                 db    0
.xdata$x:000001CC                 db    0
.xdata$x:000001CD                 db    0
.xdata$x:000001CE                 db    0
.xdata$x:000001CF                 db    0
.xdata$x:000001D0                 db    0
.xdata$x:000001D1                 db    0
.xdata$x:000001D2                 db    0
.xdata$x:000001D3                 db    0
.xdata$x:000001D4                 db    0
.xdata$x:000001D5                 db    0
.xdata$x:000001D6                 db    0
.xdata$x:000001D7                 db    0
.xdata$x:000001D8                 db    0
.xdata$x:000001D9                 db    0
.xdata$x:000001DA                 db    0
.xdata$x:000001DB                 db    0
.xdata$x:000001DC                 db    1
.xdata$x:000001DD                 db    0
.xdata$x:000001DE                 db    0
.xdata$x:000001DF                 db    0
.xdata$x:000001E0 __unwindtable$?CreateEnc@@YGPAXXZ db 0FFh ; DATA XREF: .xdata$x:000001F0o
.xdata$x:000001E1                 db 0FFh
.xdata$x:000001E2                 db 0FFh
.xdata$x:000001E3                 db 0FFh
.xdata$x:000001E4                 dd offset __unwindfunclet$?CreateEnc@@YGPAXXZ$0
.xdata$x:000001E8 __ehfuncinfo$?CreateEnc@@YGPAXXZ db  22h ; "
.xdata$x:000001E8                                         ; DATA XREF: __ehhandler$?CreateEnc@@YGPAXXZ+11o
.xdata$x:000001E9                 db    5
.xdata$x:000001EA                 db  93h ; Ã´
.xdata$x:000001EB                 db  19h
.xdata$x:000001EC                 db    1
.xdata$x:000001ED                 db    0
.xdata$x:000001EE                 db    0
.xdata$x:000001EF                 db    0
.xdata$x:000001F0                 dd offset __unwindtable$?CreateEnc@@YGPAXXZ
.xdata$x:000001F4                 db    0
.xdata$x:000001F5                 db    0
.xdata$x:000001F6                 db    0
.xdata$x:000001F7                 db    0
.xdata$x:000001F8                 db    0
.xdata$x:000001F9                 db    0
.xdata$x:000001FA                 db    0
.xdata$x:000001FB                 db    0
.xdata$x:000001FC                 db    0
.xdata$x:000001FD                 db    0
.xdata$x:000001FE                 db    0
.xdata$x:000001FF                 db    0
.xdata$x:00000200                 db    0
.xdata$x:00000201                 db    0
.xdata$x:00000202                 db    0
.xdata$x:00000203                 db    0
.xdata$x:00000204                 db    0
.xdata$x:00000205                 db    0
.xdata$x:00000206                 db    0
.xdata$x:00000207                 db    0
.xdata$x:00000208                 db    1
.xdata$x:00000209                 db    0
.xdata$x:0000020A                 db    0
.xdata$x:0000020B                 db    0
.xdata$x:0000020B _xdata$x        ends
.xdata$x:0000020B
.rtc$TMZ:0000020C ; ===========================================================================
.rtc$TMZ:0000020C
.rtc$TMZ:0000020C ; Segment type: Pure data
.rtc$TMZ:0000020C ; Segment permissions: Read
.rtc$TMZ:0000020C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000020C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000020C                 ;org 20Ch
.rtc$TMZ:0000020C ; COMDAT (pick any)
.rtc$TMZ:0000020C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000020C _rtc$TMZ        ends
.rtc$TMZ:0000020C
.rtc$IMZ:00000210 ; ===========================================================================
.rtc$IMZ:00000210
.rtc$IMZ:00000210 ; Segment type: Pure data
.rtc$IMZ:00000210 ; Segment permissions: Read
.rtc$IMZ:00000210 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000210                 assume cs:_rtc$IMZ
.rtc$IMZ:00000210                 ;org 210h
.rtc$IMZ:00000210 ; COMDAT (pick any)
.rtc$IMZ:00000210 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000210 _rtc$IMZ        ends
.rtc$IMZ:00000210
.text:00000214 ; ===========================================================================
.text:00000214
.text:00000214 ; Segment type: Pure code
.text:00000214 ; Segment permissions: Read/Execute
.text:00000214 _text           segment para public 'CODE' use32
.text:00000214                 assume cs:_text
.text:00000214                 ;org 214h
.text:00000214 ; COMDAT (pick any)
.text:00000214                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000214
.text:00000214 ; =============== S U B R O U T I N E =======================================
.text:00000214
.text:00000214 ; Attributes: bp-based frame
.text:00000214
.text:00000214 ; _DWORD __thiscall NCrypto::CAesCbcDecoder::CAesCbcDecoder(NCrypto::CAesCbcDecoder *this, unsigned int)
.text:00000214                 public ??0CAesCbcDecoder@NCrypto@@QAE@I@Z
.text:00000214 ??0CAesCbcDecoder@NCrypto@@QAE@I@Z proc near ; CODE XREF: CreateDec(void)+5Cp
.text:00000214
.text:00000214 var_4           = dword ptr -4
.text:00000214 arg_0           = dword ptr  8
.text:00000214
.text:00000214                 push    ebp
.text:00000215                 mov     ebp, esp
.text:00000217                 push    ecx
.text:00000218                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000021F                 mov     [ebp+var_4], ecx
.text:00000222                 mov     eax, [ebp+arg_0]
.text:00000225                 push    eax             ; unsigned int
.text:00000226                 push    0               ; bool
.text:00000228                 mov     ecx, [ebp+var_4] ; this
.text:0000022B                 call    ??0CAesCbcCoder@NCrypto@@QAE@_NI@Z ; NCrypto::CAesCbcCoder::CAesCbcCoder(bool,uint)
.text:00000230                 mov     ecx, [ebp+var_4]
.text:00000233                 mov     dword ptr [ecx], offset ??_7CAesCbcDecoder@NCrypto@@6BICompressFilter@@@ ; const NCrypto::CAesCbcDecoder::`vftable'{for `ICompressFilter'}
.text:00000239                 mov     edx, [ebp+var_4]
.text:0000023C                 mov     dword ptr [edx+4], offset ??_7CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@ ; const NCrypto::CAesCbcDecoder::`vftable'{for `ICryptoProperties'}
.text:00000243                 mov     eax, [ebp+var_4]
.text:00000246                 mov     dword ptr [eax+8], offset ??_7CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@ ; const NCrypto::CAesCbcDecoder::`vftable'{for `ICompressSetCoderProperties'}
.text:0000024D                 mov     eax, [ebp+var_4]
.text:00000250                 add     esp, 4
.text:00000253                 cmp     ebp, esp
.text:00000255                 call    __RTC_CheckEsp
.text:0000025A                 mov     esp, ebp
.text:0000025C                 pop     ebp
.text:0000025D                 retn    4
.text:0000025D ??0CAesCbcDecoder@NCrypto@@QAE@I@Z endp
.text:0000025D
.text:0000025D _text           ends
.text:0000025D
.rdata:00000260 ; ===========================================================================
.rdata:00000260
.rdata:00000260 ; Segment type: Pure data
.rdata:00000260 ; Segment permissions: Read
.rdata:00000260 _rdata          segment dword public 'DATA' use32
.rdata:00000260                 assume cs:_rdata
.rdata:00000260                 ;org 260h
.rdata:00000260 ; COMDAT (pick largest)
.rdata:00000260                 dd offset ??_R4CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@ ; const NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:00000264                 public ??_7CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@
.rdata:00000264 ; const NCrypto::CAesCbcDecoder::`vftable'{for `ICompressSetCoderProperties'}
.rdata:00000264 ??_7CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00000264                                         ; DATA XREF: NCrypto::CAesCbcDecoder::CAesCbcDecoder(uint)+32o
.rdata:00000264                                         ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00000268                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{8}' (void)
.rdata:0000026C                 dd offset ?Release@CAesCbcCoder@NCrypto@@W7AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{8}' (void)
.rdata:00000270                 dd offset ?SetCoderProperties@CAesCbcCoder@NCrypto@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; NCrypto::CAesCbcCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:00000270 _rdata          ends
.rdata:00000270
.rdata:00000274 ; ===========================================================================
.rdata:00000274
.rdata:00000274 ; Segment type: Pure data
.rdata:00000274 ; Segment permissions: Read
.rdata:00000274 _rdata          segment dword public 'DATA' use32
.rdata:00000274                 assume cs:_rdata
.rdata:00000274                 ;org 274h
.rdata:00000274 ; COMDAT (pick largest)
.rdata:00000274                 dd offset ??_R4CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@ ; const NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'{for `ICryptoProperties'}
.rdata:00000278                 public ??_7CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@
.rdata:00000278 ; const NCrypto::CAesCbcDecoder::`vftable'{for `ICryptoProperties'}
.rdata:00000278 ??_7CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00000278                                         ; DATA XREF: NCrypto::CAesCbcDecoder::CAesCbcDecoder(uint)+28o
.rdata:00000278                                         ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:0000027C                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{4}' (void)
.rdata:00000280                 dd offset ?Release@CAesCbcCoder@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{4}' (void)
.rdata:00000284                 dd offset ?SetKey@CAesCbcCoder@NCrypto@@UAGJPBEI@Z ; NCrypto::CAesCbcCoder::SetKey(uchar const *,uint)
.rdata:00000288                 dd offset ?SetInitVector@CAesCbcCoder@NCrypto@@UAGJPBEI@Z ; NCrypto::CAesCbcCoder::SetInitVector(uchar const *,uint)
.rdata:00000288 _rdata          ends
.rdata:00000288
.rdata:0000028C ; ===========================================================================
.rdata:0000028C
.rdata:0000028C ; Segment type: Pure data
.rdata:0000028C ; Segment permissions: Read
.rdata:0000028C _rdata          segment dword public 'DATA' use32
.rdata:0000028C                 assume cs:_rdata
.rdata:0000028C                 ;org 28Ch
.rdata:0000028C ; COMDAT (pick largest)
.rdata:0000028C                 dd offset ??_R4CAesCbcDecoder@NCrypto@@6BICompressFilter@@@ ; const NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:00000290                 public ??_7CAesCbcDecoder@NCrypto@@6BICompressFilter@@@
.rdata:00000290 ; const NCrypto::CAesCbcDecoder::`vftable'{for `ICompressFilter'}
.rdata:00000290 ??_7CAesCbcDecoder@NCrypto@@6BICompressFilter@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000290                                         ; DATA XREF: NCrypto::CAesCbcDecoder::CAesCbcDecoder(uint)+1Fo
.rdata:00000290                                         ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)
.rdata:00000294                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::AddRef(void)
.rdata:00000298                 dd offset ?Release@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::Release(void)
.rdata:0000029C                 dd offset ?Init@CAesCbcCoder@NCrypto@@UAGJXZ ; NCrypto::CAesCbcCoder::Init(void)
.rdata:000002A0                 dd offset ?Filter@CAesCbcCoder@NCrypto@@UAGIPAEI@Z ; NCrypto::CAesCbcCoder::Filter(uchar *,uint)
.rdata:000002A0 _rdata          ends
.rdata:000002A0
.rdata$r:000002A4 ; ===========================================================================
.rdata$r:000002A4
.rdata$r:000002A4 ; Segment type: Pure data
.rdata$r:000002A4 ; Segment permissions: Read
.rdata$r:000002A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002A4                 assume cs:_rdata$r
.rdata$r:000002A4                 ;org 2A4h
.rdata$r:000002A4 ; COMDAT (pick any)
.rdata$r:000002A4                 public ??_R4CAesCbcDecoder@NCrypto@@6BICompressFilter@@@
.rdata$r:000002A4 ; const NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:000002A4 ??_R4CAesCbcDecoder@NCrypto@@6BICompressFilter@@@ db    0
.rdata$r:000002A4                                         ; DATA XREF: .rdata:0000028Co
.rdata$r:000002A5                 db    0
.rdata$r:000002A6                 db    0
.rdata$r:000002A7                 db    0
.rdata$r:000002A8                 db    0
.rdata$r:000002A9                 db    0
.rdata$r:000002AA                 db    0
.rdata$r:000002AB                 db    0
.rdata$r:000002AC                 db    0
.rdata$r:000002AD                 db    0
.rdata$r:000002AE                 db    0
.rdata$r:000002AF                 db    0
.rdata$r:000002B0                 dd offset ??_R0?AUCAesCbcDecoder@NCrypto@@@8 ; NCrypto::CAesCbcDecoder `RTTI Type Descriptor'
.rdata$r:000002B4                 dd offset ??_R3CAesCbcDecoder@NCrypto@@8 ; NCrypto::CAesCbcDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000002B4 _rdata$r        ends
.rdata$r:000002B4
.data:000002B8 ; ===========================================================================
.data:000002B8
.data:000002B8 ; Segment type: Pure data
.data:000002B8 ; Segment permissions: Read/Write
.data:000002B8 _data           segment dword public 'DATA' use32
.data:000002B8                 assume cs:_data
.data:000002B8                 ;org 2B8h
.data:000002B8 ; COMDAT (pick any)
.data:000002B8                 public ??_R0?AUCAesCbcDecoder@NCrypto@@@8
.data:000002B8 ; struct NCrypto::CAesCbcDecoder `RTTI Type Descriptor'
.data:000002B8 ??_R0?AUCAesCbcDecoder@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:000002B8                                         ; DATA XREF: .rdata$r:000002B0o
.data:000002B8                                         ; .rdata$r:NCrypto::CAesCbcDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000002B8                                         ; const type_info::`vftable'
.data:000002BC                 align 10h
.data:000002C0 a_?aucaescbcdec db '.?AUCAesCbcDecoder@NCrypto@@',0
.data:000002DD                 align 10h
.data:000002DD _data           ends
.data:000002DD
.rdata$r:000002E0 ; ===========================================================================
.rdata$r:000002E0
.rdata$r:000002E0 ; Segment type: Pure data
.rdata$r:000002E0 ; Segment permissions: Read
.rdata$r:000002E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002E0                 assume cs:_rdata$r
.rdata$r:000002E0                 ;org 2E0h
.rdata$r:000002E0 ; COMDAT (pick any)
.rdata$r:000002E0                 public ??_R3CAesCbcDecoder@NCrypto@@8
.rdata$r:000002E0 ; NCrypto::CAesCbcDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000002E0 ??_R3CAesCbcDecoder@NCrypto@@8 db    0  ; DATA XREF: .rdata$r:000002B4o
.rdata$r:000002E0                                         ; .rdata$r:00000330o ...
.rdata$r:000002E1                 db    0
.rdata$r:000002E2                 db    0
.rdata$r:000002E3                 db    0
.rdata$r:000002E4                 db    1
.rdata$r:000002E5                 db    0
.rdata$r:000002E6                 db    0
.rdata$r:000002E7                 db    0
.rdata$r:000002E8                 db    9
.rdata$r:000002E9                 db    0
.rdata$r:000002EA                 db    0
.rdata$r:000002EB                 db    0
.rdata$r:000002EC                 dd offset ??_R2CAesCbcDecoder@NCrypto@@8 ; NCrypto::CAesCbcDecoder::`RTTI Base Class Array'
.rdata$r:000002EC _rdata$r        ends
.rdata$r:000002EC
.rdata$r:000002F0 ; ===========================================================================
.rdata$r:000002F0
.rdata$r:000002F0 ; Segment type: Pure data
.rdata$r:000002F0 ; Segment permissions: Read
.rdata$r:000002F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000002F0                 assume cs:_rdata$r
.rdata$r:000002F0                 ;org 2F0h
.rdata$r:000002F0 ; COMDAT (pick any)
.rdata$r:000002F0                 public ??_R2CAesCbcDecoder@NCrypto@@8
.rdata$r:000002F0 ; NCrypto::CAesCbcDecoder::`RTTI Base Class Array'
.rdata$r:000002F0 ??_R2CAesCbcDecoder@NCrypto@@8 dd offset ??_R1A@?0A@EA@CAesCbcDecoder@NCrypto@@8
.rdata$r:000002F0                                         ; DATA XREF: .rdata$r:000002ECo
.rdata$r:000002F0                                         ; NCrypto::CAesCbcDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000002F4                 dd offset ??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8 ; NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000002F8                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000002FC                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00000300                 dd offset ??_R13?0A@EA@ICryptoProperties@@8 ; ICryptoProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000304                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00000308                 dd offset ??_R17?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:0000030C                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00000310                 dd offset ??_R1M@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00000314                 db    0
.rdata$r:00000315                 align 4
.rdata$r:00000315 _rdata$r        ends
.rdata$r:00000315
.rdata$r:00000318 ; ===========================================================================
.rdata$r:00000318
.rdata$r:00000318 ; Segment type: Pure data
.rdata$r:00000318 ; Segment permissions: Read
.rdata$r:00000318 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000318                 assume cs:_rdata$r
.rdata$r:00000318                 ;org 318h
.rdata$r:00000318 ; COMDAT (pick any)
.rdata$r:00000318                 public ??_R1A@?0A@EA@CAesCbcDecoder@NCrypto@@8
.rdata$r:00000318 ; NCrypto::CAesCbcDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000318 ??_R1A@?0A@EA@CAesCbcDecoder@NCrypto@@8 dd offset ??_R0?AUCAesCbcDecoder@NCrypto@@@8
.rdata$r:00000318                                         ; DATA XREF: .rdata$r:NCrypto::CAesCbcDecoder::`RTTI Base Class Array'o
.rdata$r:00000318                                         ; NCrypto::CAesCbcDecoder `RTTI Type Descriptor'
.rdata$r:0000031C                 db    8
.rdata$r:0000031D                 db    0
.rdata$r:0000031E                 db    0
.rdata$r:0000031F                 db    0
.rdata$r:00000320                 db    0
.rdata$r:00000321                 db    0
.rdata$r:00000322                 db    0
.rdata$r:00000323                 db    0
.rdata$r:00000324                 db 0FFh
.rdata$r:00000325                 db 0FFh
.rdata$r:00000326                 db 0FFh
.rdata$r:00000327                 db 0FFh
.rdata$r:00000328                 db    0
.rdata$r:00000329                 db    0
.rdata$r:0000032A                 db    0
.rdata$r:0000032B                 db    0
.rdata$r:0000032C                 db  40h ; @
.rdata$r:0000032D                 db    0
.rdata$r:0000032E                 db    0
.rdata$r:0000032F                 db    0
.rdata$r:00000330                 dd offset ??_R3CAesCbcDecoder@NCrypto@@8 ; NCrypto::CAesCbcDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000330 _rdata$r        ends
.rdata$r:00000330
.rdata$r:00000334 ; ===========================================================================
.rdata$r:00000334
.rdata$r:00000334 ; Segment type: Pure data
.rdata$r:00000334 ; Segment permissions: Read
.rdata$r:00000334 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000334                 assume cs:_rdata$r
.rdata$r:00000334                 ;org 334h
.rdata$r:00000334 ; COMDAT (pick any)
.rdata$r:00000334                 public ??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8
.rdata$r:00000334 ; NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000334 ??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8 dd offset ??_R0?AVCAesCbcCoder@NCrypto@@@8
.rdata$r:00000334                                         ; DATA XREF: .rdata$r:000002F4o
.rdata$r:00000334                                         ; .rdata$r:NCrypto::CAesCbcCoder::`RTTI Base Class Array'o ...
.rdata$r:00000334                                         ; NCrypto::CAesCbcCoder `RTTI Type Descriptor'
.rdata$r:00000338                 db    7
.rdata$r:00000339                 db    0
.rdata$r:0000033A                 db    0
.rdata$r:0000033B                 db    0
.rdata$r:0000033C                 db    0
.rdata$r:0000033D                 db    0
.rdata$r:0000033E                 db    0
.rdata$r:0000033F                 db    0
.rdata$r:00000340                 db 0FFh
.rdata$r:00000341                 db 0FFh
.rdata$r:00000342                 db 0FFh
.rdata$r:00000343                 db 0FFh
.rdata$r:00000344                 db    0
.rdata$r:00000345                 db    0
.rdata$r:00000346                 db    0
.rdata$r:00000347                 db    0
.rdata$r:00000348                 db  40h ; @
.rdata$r:00000349                 db    0
.rdata$r:0000034A                 db    0
.rdata$r:0000034B                 db    0
.rdata$r:0000034C                 dd offset ??_R3CAesCbcCoder@NCrypto@@8 ; NCrypto::CAesCbcCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000034C _rdata$r        ends
.rdata$r:0000034C
.data:00000350 ; ===========================================================================
.data:00000350
.data:00000350 ; Segment type: Pure data
.data:00000350 ; Segment permissions: Read/Write
.data:00000350 _data           segment dword public 'DATA' use32
.data:00000350                 assume cs:_data
.data:00000350                 ;org 350h
.data:00000350 ; COMDAT (pick any)
.data:00000350                 public ??_R0?AVCAesCbcCoder@NCrypto@@@8
.data:00000350 ; class NCrypto::CAesCbcCoder `RTTI Type Descriptor'
.data:00000350 ??_R0?AVCAesCbcCoder@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:00000350                                         ; DATA XREF: .rdata$r:NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000350                                         ; const type_info::`vftable'
.data:00000354                 align 8
.data:00000358 a_?avcaescbccod db '.?AVCAesCbcCoder@NCrypto@@',0
.data:00000373                 align 4
.data:00000373 _data           ends
.data:00000373
.rdata$r:00000374 ; ===========================================================================
.rdata$r:00000374
.rdata$r:00000374 ; Segment type: Pure data
.rdata$r:00000374 ; Segment permissions: Read
.rdata$r:00000374 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000374                 assume cs:_rdata$r
.rdata$r:00000374                 ;org 374h
.rdata$r:00000374 ; COMDAT (pick any)
.rdata$r:00000374                 public ??_R3CAesCbcCoder@NCrypto@@8
.rdata$r:00000374 ; NCrypto::CAesCbcCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000374 ??_R3CAesCbcCoder@NCrypto@@8 db    0    ; DATA XREF: .rdata$r:0000034Co
.rdata$r:00000375                 db    0
.rdata$r:00000376                 db    0
.rdata$r:00000377                 db    0
.rdata$r:00000378                 db    5
.rdata$r:00000379                 db    0
.rdata$r:0000037A                 db    0
.rdata$r:0000037B                 db    0
.rdata$r:0000037C                 db    8
.rdata$r:0000037D                 db    0
.rdata$r:0000037E                 db    0
.rdata$r:0000037F                 db    0
.rdata$r:00000380                 dd offset ??_R2CAesCbcCoder@NCrypto@@8 ; NCrypto::CAesCbcCoder::`RTTI Base Class Array'
.rdata$r:00000380 _rdata$r        ends
.rdata$r:00000380
.rdata$r:00000384 ; ===========================================================================
.rdata$r:00000384
.rdata$r:00000384 ; Segment type: Pure data
.rdata$r:00000384 ; Segment permissions: Read
.rdata$r:00000384 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000384                 assume cs:_rdata$r
.rdata$r:00000384                 ;org 384h
.rdata$r:00000384 ; COMDAT (pick any)
.rdata$r:00000384                 public ??_R2CAesCbcCoder@NCrypto@@8
.rdata$r:00000384 ; NCrypto::CAesCbcCoder::`RTTI Base Class Array'
.rdata$r:00000384 ??_R2CAesCbcCoder@NCrypto@@8 dd offset ??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8
.rdata$r:00000384                                         ; DATA XREF: .rdata$r:00000380o
.rdata$r:00000384                                         ; NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000388                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000038C                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00000390                 dd offset ??_R13?0A@EA@ICryptoProperties@@8 ; ICryptoProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000394                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00000398                 dd offset ??_R17?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:0000039C                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:000003A0                 dd offset ??_R1M@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:000003A4                 db    0
.rdata$r:000003A5                 align 4
.rdata$r:000003A5 _rdata$r        ends
.rdata$r:000003A5
.rdata$r:000003A8 ; ===========================================================================
.rdata$r:000003A8
.rdata$r:000003A8 ; Segment type: Pure data
.rdata$r:000003A8 ; Segment permissions: Read
.rdata$r:000003A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003A8                 assume cs:_rdata$r
.rdata$r:000003A8                 ;org 3A8h
.rdata$r:000003A8 ; COMDAT (pick any)
.rdata$r:000003A8                 public ??_R1A@?0A@EA@ICompressFilter@@8
.rdata$r:000003A8 ; ICompressFilter::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000003A8 ??_R1A@?0A@EA@ICompressFilter@@8 dd offset ??_R0?AUICompressFilter@@@8
.rdata$r:000003A8                                         ; DATA XREF: .rdata$r:000002F8o
.rdata$r:000003A8                                         ; .rdata$r:00000388o ...
.rdata$r:000003A8                                         ; ICompressFilter `RTTI Type Descriptor'
.rdata$r:000003AC                 db    1
.rdata$r:000003AD                 db    0
.rdata$r:000003AE                 db    0
.rdata$r:000003AF                 db    0
.rdata$r:000003B0                 db    0
.rdata$r:000003B1                 db    0
.rdata$r:000003B2                 db    0
.rdata$r:000003B3                 db    0
.rdata$r:000003B4                 db 0FFh
.rdata$r:000003B5                 db 0FFh
.rdata$r:000003B6                 db 0FFh
.rdata$r:000003B7                 db 0FFh
.rdata$r:000003B8                 db    0
.rdata$r:000003B9                 db    0
.rdata$r:000003BA                 db    0
.rdata$r:000003BB                 db    0
.rdata$r:000003BC                 db  40h ; @
.rdata$r:000003BD                 db    0
.rdata$r:000003BE                 db    0
.rdata$r:000003BF                 db    0
.rdata$r:000003C0                 dd offset ??_R3ICompressFilter@@8 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003C0 _rdata$r        ends
.rdata$r:000003C0
.data:000003C4 ; ===========================================================================
.data:000003C4
.data:000003C4 ; Segment type: Pure data
.data:000003C4 ; Segment permissions: Read/Write
.data:000003C4 _data           segment dword public 'DATA' use32
.data:000003C4                 assume cs:_data
.data:000003C4                 ;org 3C4h
.data:000003C4 ; COMDAT (pick any)
.data:000003C4                 public ??_R0?AUICompressFilter@@@8
.data:000003C4 ; struct ICompressFilter `RTTI Type Descriptor'
.data:000003C4 ??_R0?AUICompressFilter@@@8 dd offset ??_7type_info@@6B@
.data:000003C4                                         ; DATA XREF: .rdata$r:ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000003C4                                         ; const type_info::`vftable'
.data:000003C8                 db    0
.data:000003C9                 db    0
.data:000003CA                 db    0
.data:000003CB                 db    0
.data:000003CC                 db  2Eh ; .
.data:000003CD                 db  3Fh ; ?
.data:000003CE                 db  41h ; A
.data:000003CF                 db  55h ; U
.data:000003D0                 db  49h ; I
.data:000003D1                 db  43h ; C
.data:000003D2                 db  6Fh ; o
.data:000003D3                 db  6Dh ; m
.data:000003D4                 db  70h ; p
.data:000003D5                 db  72h ; r
.data:000003D6                 db  65h ; e
.data:000003D7                 db  73h ; s
.data:000003D8                 db  73h ; s
.data:000003D9                 db  46h ; F
.data:000003DA                 db  69h ; i
.data:000003DB                 db  6Ch ; l
.data:000003DC                 db  74h ; t
.data:000003DD                 db  65h ; e
.data:000003DE                 db  72h ; r
.data:000003DF                 db  40h ; @
.data:000003E0                 db  40h ; @
.data:000003E1                 db    0
.data:000003E2                 align 4
.data:000003E2 _data           ends
.data:000003E2
.rdata$r:000003E4 ; ===========================================================================
.rdata$r:000003E4
.rdata$r:000003E4 ; Segment type: Pure data
.rdata$r:000003E4 ; Segment permissions: Read
.rdata$r:000003E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003E4                 assume cs:_rdata$r
.rdata$r:000003E4                 ;org 3E4h
.rdata$r:000003E4 ; COMDAT (pick any)
.rdata$r:000003E4                 public ??_R3ICompressFilter@@8
.rdata$r:000003E4 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003E4 ??_R3ICompressFilter@@8 db    0         ; DATA XREF: .rdata$r:000003C0o
.rdata$r:000003E5                 db    0
.rdata$r:000003E6                 db    0
.rdata$r:000003E7                 db    0
.rdata$r:000003E8                 db    0
.rdata$r:000003E9                 db    0
.rdata$r:000003EA                 db    0
.rdata$r:000003EB                 db    0
.rdata$r:000003EC                 db    2
.rdata$r:000003ED                 db    0
.rdata$r:000003EE                 db    0
.rdata$r:000003EF                 db    0
.rdata$r:000003F0                 dd offset ??_R2ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Array'
.rdata$r:000003F0 _rdata$r        ends
.rdata$r:000003F0
.rdata$r:000003F4 ; ===========================================================================
.rdata$r:000003F4
.rdata$r:000003F4 ; Segment type: Pure data
.rdata$r:000003F4 ; Segment permissions: Read
.rdata$r:000003F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003F4                 assume cs:_rdata$r
.rdata$r:000003F4                 ;org 3F4h
.rdata$r:000003F4 ; COMDAT (pick any)
.rdata$r:000003F4                 public ??_R2ICompressFilter@@8
.rdata$r:000003F4 ; ICompressFilter::`RTTI Base Class Array'
.rdata$r:000003F4 ??_R2ICompressFilter@@8 dd offset ??_R1A@?0A@EA@ICompressFilter@@8
.rdata$r:000003F4                                         ; DATA XREF: .rdata$r:000003F0o
.rdata$r:000003F4                                         ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000003F8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000003FC                 db    0
.rdata$r:000003FD                 align 10h
.rdata$r:000003FD _rdata$r        ends
.rdata$r:000003FD
.rdata$r:00000400 ; ===========================================================================
.rdata$r:00000400
.rdata$r:00000400 ; Segment type: Pure data
.rdata$r:00000400 ; Segment permissions: Read
.rdata$r:00000400 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000400                 assume cs:_rdata$r
.rdata$r:00000400                 ;org 400h
.rdata$r:00000400 ; COMDAT (pick any)
.rdata$r:00000400                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000400 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000400 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000400                                         ; DATA XREF: .rdata$r:000003F8o
.rdata$r:00000400                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:00000400                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000404                 db    0
.rdata$r:00000405                 db    0
.rdata$r:00000406                 db    0
.rdata$r:00000407                 db    0
.rdata$r:00000408                 db    0
.rdata$r:00000409                 db    0
.rdata$r:0000040A                 db    0
.rdata$r:0000040B                 db    0
.rdata$r:0000040C                 db 0FFh
.rdata$r:0000040D                 db 0FFh
.rdata$r:0000040E                 db 0FFh
.rdata$r:0000040F                 db 0FFh
.rdata$r:00000410                 db    0
.rdata$r:00000411                 db    0
.rdata$r:00000412                 db    0
.rdata$r:00000413                 db    0
.rdata$r:00000414                 db  40h ; @
.rdata$r:00000415                 db    0
.rdata$r:00000416                 db    0
.rdata$r:00000417                 db    0
.rdata$r:00000418                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000418 _rdata$r        ends
.rdata$r:00000418
.data:0000041C ; ===========================================================================
.data:0000041C
.data:0000041C ; Segment type: Pure data
.data:0000041C ; Segment permissions: Read/Write
.data:0000041C _data           segment dword public 'DATA' use32
.data:0000041C                 assume cs:_data
.data:0000041C                 ;org 41Ch
.data:0000041C ; COMDAT (pick any)
.data:0000041C                 public ??_R0?AUIUnknown@@@8
.data:0000041C ; struct IUnknown `RTTI Type Descriptor'
.data:0000041C ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:0000041C                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000041C                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:0000041C                                         ; const type_info::`vftable'
.data:00000420                 db    0
.data:00000421                 db    0
.data:00000422                 db    0
.data:00000423                 db    0
.data:00000424                 db  2Eh ; .
.data:00000425                 db  3Fh ; ?
.data:00000426                 db  41h ; A
.data:00000427                 db  55h ; U
.data:00000428                 db  49h ; I
.data:00000429                 db  55h ; U
.data:0000042A                 db  6Eh ; n
.data:0000042B                 db  6Bh ; k
.data:0000042C                 db  6Eh ; n
.data:0000042D                 db  6Fh ; o
.data:0000042E                 db  77h ; w
.data:0000042F                 db  6Eh ; n
.data:00000430                 db  40h ; @
.data:00000431                 db  40h ; @
.data:00000432                 db    0
.data:00000433                 align 4
.data:00000433 _data           ends
.data:00000433
.rdata$r:00000434 ; ===========================================================================
.rdata$r:00000434
.rdata$r:00000434 ; Segment type: Pure data
.rdata$r:00000434 ; Segment permissions: Read
.rdata$r:00000434 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000434                 assume cs:_rdata$r
.rdata$r:00000434                 ;org 434h
.rdata$r:00000434 ; COMDAT (pick any)
.rdata$r:00000434                 public ??_R3IUnknown@@8
.rdata$r:00000434 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000434 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00000418o
.rdata$r:00000434                                         ; .rdata$r:00000464o ...
.rdata$r:00000435                 db    0
.rdata$r:00000436                 db    0
.rdata$r:00000437                 db    0
.rdata$r:00000438                 db    0
.rdata$r:00000439                 db    0
.rdata$r:0000043A                 db    0
.rdata$r:0000043B                 db    0
.rdata$r:0000043C                 db    1
.rdata$r:0000043D                 db    0
.rdata$r:0000043E                 db    0
.rdata$r:0000043F                 db    0
.rdata$r:00000440                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000440 _rdata$r        ends
.rdata$r:00000440
.rdata$r:00000444 ; ===========================================================================
.rdata$r:00000444
.rdata$r:00000444 ; Segment type: Pure data
.rdata$r:00000444 ; Segment permissions: Read
.rdata$r:00000444 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000444                 assume cs:_rdata$r
.rdata$r:00000444                 ;org 444h
.rdata$r:00000444 ; COMDAT (pick any)
.rdata$r:00000444                 public ??_R2IUnknown@@8
.rdata$r:00000444 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000444 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000444                                         ; DATA XREF: .rdata$r:00000440o
.rdata$r:00000444                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000448                 db    0
.rdata$r:00000449                 align 4
.rdata$r:00000449 _rdata$r        ends
.rdata$r:00000449
.rdata$r:0000044C ; ===========================================================================
.rdata$r:0000044C
.rdata$r:0000044C ; Segment type: Pure data
.rdata$r:0000044C ; Segment permissions: Read
.rdata$r:0000044C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000044C                 assume cs:_rdata$r
.rdata$r:0000044C                 ;org 44Ch
.rdata$r:0000044C ; COMDAT (pick any)
.rdata$r:0000044C                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:0000044C ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:0000044C ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000044C                                         ; DATA XREF: .rdata$r:000002FCo
.rdata$r:0000044C                                         ; .rdata$r:0000038Co ...
.rdata$r:0000044C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000450                 db    0
.rdata$r:00000451                 db    0
.rdata$r:00000452                 db    0
.rdata$r:00000453                 db    0
.rdata$r:00000454                 db    0
.rdata$r:00000455                 db    0
.rdata$r:00000456                 db    0
.rdata$r:00000457                 db    0
.rdata$r:00000458                 db 0FFh
.rdata$r:00000459                 db 0FFh
.rdata$r:0000045A                 db 0FFh
.rdata$r:0000045B                 db 0FFh
.rdata$r:0000045C                 db    0
.rdata$r:0000045D                 db    0
.rdata$r:0000045E                 db    0
.rdata$r:0000045F                 db    0
.rdata$r:00000460                 db  42h ; B
.rdata$r:00000461                 db    0
.rdata$r:00000462                 db    0
.rdata$r:00000463                 db    0
.rdata$r:00000464                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000464 _rdata$r        ends
.rdata$r:00000464
.rdata$r:00000468 ; ===========================================================================
.rdata$r:00000468
.rdata$r:00000468 ; Segment type: Pure data
.rdata$r:00000468 ; Segment permissions: Read
.rdata$r:00000468 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000468                 assume cs:_rdata$r
.rdata$r:00000468                 ;org 468h
.rdata$r:00000468 ; COMDAT (pick any)
.rdata$r:00000468                 public ??_R13?0A@EA@ICryptoProperties@@8
.rdata$r:00000468 ; ICryptoProperties::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00000468 ??_R13?0A@EA@ICryptoProperties@@8 dd offset ??_R0?AUICryptoProperties@@@8
.rdata$r:00000468                                         ; DATA XREF: .rdata$r:00000300o
.rdata$r:00000468                                         ; .rdata$r:00000390o ...
.rdata$r:00000468                                         ; ICryptoProperties `RTTI Type Descriptor'
.rdata$r:0000046C                 db    1
.rdata$r:0000046D                 db    0
.rdata$r:0000046E                 db    0
.rdata$r:0000046F                 db    0
.rdata$r:00000470                 db    4
.rdata$r:00000471                 db    0
.rdata$r:00000472                 db    0
.rdata$r:00000473                 db    0
.rdata$r:00000474                 db 0FFh
.rdata$r:00000475                 db 0FFh
.rdata$r:00000476                 db 0FFh
.rdata$r:00000477                 db 0FFh
.rdata$r:00000478                 db    0
.rdata$r:00000479                 db    0
.rdata$r:0000047A                 db    0
.rdata$r:0000047B                 db    0
.rdata$r:0000047C                 db  40h ; @
.rdata$r:0000047D                 db    0
.rdata$r:0000047E                 db    0
.rdata$r:0000047F                 db    0
.rdata$r:00000480                 dd offset ??_R3ICryptoProperties@@8 ; ICryptoProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000480 _rdata$r        ends
.rdata$r:00000480
.data:00000484 ; ===========================================================================
.data:00000484
.data:00000484 ; Segment type: Pure data
.data:00000484 ; Segment permissions: Read/Write
.data:00000484 _data           segment dword public 'DATA' use32
.data:00000484                 assume cs:_data
.data:00000484                 ;org 484h
.data:00000484 ; COMDAT (pick any)
.data:00000484                 public ??_R0?AUICryptoProperties@@@8
.data:00000484 ; struct ICryptoProperties `RTTI Type Descriptor'
.data:00000484 ??_R0?AUICryptoProperties@@@8 dd offset ??_7type_info@@6B@
.data:00000484                                         ; DATA XREF: .rdata$r:ICryptoProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00000484                                         ; .rdata$r:ICryptoProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000484                                         ; const type_info::`vftable'
.data:00000488                 db    0
.data:00000489                 db    0
.data:0000048A                 db    0
.data:0000048B                 db    0
.data:0000048C                 db  2Eh ; .
.data:0000048D                 db  3Fh ; ?
.data:0000048E                 db  41h ; A
.data:0000048F                 db  55h ; U
.data:00000490                 db  49h ; I
.data:00000491                 db  43h ; C
.data:00000492                 db  72h ; r
.data:00000493                 db  79h ; y
.data:00000494                 db  70h ; p
.data:00000495                 db  74h ; t
.data:00000496                 db  6Fh ; o
.data:00000497                 db  50h ; P
.data:00000498                 db  72h ; r
.data:00000499                 db  6Fh ; o
.data:0000049A                 db  70h ; p
.data:0000049B                 db  65h ; e
.data:0000049C                 db  72h ; r
.data:0000049D                 db  74h ; t
.data:0000049E                 db  69h ; i
.data:0000049F                 db  65h ; e
.data:000004A0                 db  73h ; s
.data:000004A1                 db  40h ; @
.data:000004A2                 db  40h ; @
.data:000004A3                 db    0
.data:000004A3 _data           ends
.data:000004A3
.rdata$r:000004A4 ; ===========================================================================
.rdata$r:000004A4
.rdata$r:000004A4 ; Segment type: Pure data
.rdata$r:000004A4 ; Segment permissions: Read
.rdata$r:000004A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004A4                 assume cs:_rdata$r
.rdata$r:000004A4                 ;org 4A4h
.rdata$r:000004A4 ; COMDAT (pick any)
.rdata$r:000004A4                 public ??_R3ICryptoProperties@@8
.rdata$r:000004A4 ; ICryptoProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004A4 ??_R3ICryptoProperties@@8 db    0       ; DATA XREF: .rdata$r:00000480o
.rdata$r:000004A4                                         ; .rdata$r:000004D8o
.rdata$r:000004A5                 db    0
.rdata$r:000004A6                 db    0
.rdata$r:000004A7                 db    0
.rdata$r:000004A8                 db    0
.rdata$r:000004A9                 db    0
.rdata$r:000004AA                 db    0
.rdata$r:000004AB                 db    0
.rdata$r:000004AC                 db    2
.rdata$r:000004AD                 db    0
.rdata$r:000004AE                 db    0
.rdata$r:000004AF                 db    0
.rdata$r:000004B0                 dd offset ??_R2ICryptoProperties@@8 ; ICryptoProperties::`RTTI Base Class Array'
.rdata$r:000004B0 _rdata$r        ends
.rdata$r:000004B0
.rdata$r:000004B4 ; ===========================================================================
.rdata$r:000004B4
.rdata$r:000004B4 ; Segment type: Pure data
.rdata$r:000004B4 ; Segment permissions: Read
.rdata$r:000004B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004B4                 assume cs:_rdata$r
.rdata$r:000004B4                 ;org 4B4h
.rdata$r:000004B4 ; COMDAT (pick any)
.rdata$r:000004B4                 public ??_R2ICryptoProperties@@8
.rdata$r:000004B4 ; ICryptoProperties::`RTTI Base Class Array'
.rdata$r:000004B4 ??_R2ICryptoProperties@@8 dd offset ??_R1A@?0A@EA@ICryptoProperties@@8
.rdata$r:000004B4                                         ; DATA XREF: .rdata$r:000004B0o
.rdata$r:000004B4                                         ; ICryptoProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000004B8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000004BC                 db    0
.rdata$r:000004BD                 align 10h
.rdata$r:000004BD _rdata$r        ends
.rdata$r:000004BD
.rdata$r:000004C0 ; ===========================================================================
.rdata$r:000004C0
.rdata$r:000004C0 ; Segment type: Pure data
.rdata$r:000004C0 ; Segment permissions: Read
.rdata$r:000004C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004C0                 assume cs:_rdata$r
.rdata$r:000004C0                 ;org 4C0h
.rdata$r:000004C0 ; COMDAT (pick any)
.rdata$r:000004C0                 public ??_R1A@?0A@EA@ICryptoProperties@@8
.rdata$r:000004C0 ; ICryptoProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000004C0 ??_R1A@?0A@EA@ICryptoProperties@@8 dd offset ??_R0?AUICryptoProperties@@@8
.rdata$r:000004C0                                         ; DATA XREF: .rdata$r:ICryptoProperties::`RTTI Base Class Array'o
.rdata$r:000004C0                                         ; ICryptoProperties `RTTI Type Descriptor'
.rdata$r:000004C4                 db    1
.rdata$r:000004C5                 db    0
.rdata$r:000004C6                 db    0
.rdata$r:000004C7                 db    0
.rdata$r:000004C8                 db    0
.rdata$r:000004C9                 db    0
.rdata$r:000004CA                 db    0
.rdata$r:000004CB                 db    0
.rdata$r:000004CC                 db 0FFh
.rdata$r:000004CD                 db 0FFh
.rdata$r:000004CE                 db 0FFh
.rdata$r:000004CF                 db 0FFh
.rdata$r:000004D0                 db    0
.rdata$r:000004D1                 db    0
.rdata$r:000004D2                 db    0
.rdata$r:000004D3                 db    0
.rdata$r:000004D4                 db  40h ; @
.rdata$r:000004D5                 db    0
.rdata$r:000004D6                 db    0
.rdata$r:000004D7                 db    0
.rdata$r:000004D8                 dd offset ??_R3ICryptoProperties@@8 ; ICryptoProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004D8 _rdata$r        ends
.rdata$r:000004D8
.rdata$r:000004DC ; ===========================================================================
.rdata$r:000004DC
.rdata$r:000004DC ; Segment type: Pure data
.rdata$r:000004DC ; Segment permissions: Read
.rdata$r:000004DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004DC                 assume cs:_rdata$r
.rdata$r:000004DC                 ;org 4DCh
.rdata$r:000004DC ; COMDAT (pick any)
.rdata$r:000004DC                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:000004DC ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:000004DC ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000004DC                                         ; DATA XREF: .rdata$r:00000304o
.rdata$r:000004DC                                         ; .rdata$r:00000394o ...
.rdata$r:000004DC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000004E0                 db    0
.rdata$r:000004E1                 db    0
.rdata$r:000004E2                 db    0
.rdata$r:000004E3                 db    0
.rdata$r:000004E4                 db    4
.rdata$r:000004E5                 db    0
.rdata$r:000004E6                 db    0
.rdata$r:000004E7                 db    0
.rdata$r:000004E8                 db 0FFh
.rdata$r:000004E9                 db 0FFh
.rdata$r:000004EA                 db 0FFh
.rdata$r:000004EB                 db 0FFh
.rdata$r:000004EC                 db    0
.rdata$r:000004ED                 db    0
.rdata$r:000004EE                 db    0
.rdata$r:000004EF                 db    0
.rdata$r:000004F0                 db  42h ; B
.rdata$r:000004F1                 db    0
.rdata$r:000004F2                 db    0
.rdata$r:000004F3                 db    0
.rdata$r:000004F4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004F4 _rdata$r        ends
.rdata$r:000004F4
.rdata$r:000004F8 ; ===========================================================================
.rdata$r:000004F8
.rdata$r:000004F8 ; Segment type: Pure data
.rdata$r:000004F8 ; Segment permissions: Read
.rdata$r:000004F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004F8                 assume cs:_rdata$r
.rdata$r:000004F8                 ;org 4F8h
.rdata$r:000004F8 ; COMDAT (pick any)
.rdata$r:000004F8                 public ??_R17?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:000004F8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:000004F8 ??_R17?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:000004F8                                         ; DATA XREF: .rdata$r:00000308o
.rdata$r:000004F8                                         ; .rdata$r:00000398o ...
.rdata$r:000004F8                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:000004FC                 db    1
.rdata$r:000004FD                 db    0
.rdata$r:000004FE                 db    0
.rdata$r:000004FF                 db    0
.rdata$r:00000500                 db    8
.rdata$r:00000501                 db    0
.rdata$r:00000502                 db    0
.rdata$r:00000503                 db    0
.rdata$r:00000504                 db 0FFh
.rdata$r:00000505                 db 0FFh
.rdata$r:00000506                 db 0FFh
.rdata$r:00000507                 db 0FFh
.rdata$r:00000508                 db    0
.rdata$r:00000509                 db    0
.rdata$r:0000050A                 db    0
.rdata$r:0000050B                 db    0
.rdata$r:0000050C                 db  40h ; @
.rdata$r:0000050D                 db    0
.rdata$r:0000050E                 db    0
.rdata$r:0000050F                 db    0
.rdata$r:00000510                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000510 _rdata$r        ends
.rdata$r:00000510
.data:00000514 ; ===========================================================================
.data:00000514
.data:00000514 ; Segment type: Pure data
.data:00000514 ; Segment permissions: Read/Write
.data:00000514 _data           segment dword public 'DATA' use32
.data:00000514                 assume cs:_data
.data:00000514                 ;org 514h
.data:00000514 ; COMDAT (pick any)
.data:00000514                 public ??_R0?AUICompressSetCoderProperties@@@8
.data:00000514 ; struct ICompressSetCoderProperties `RTTI Type Descriptor'
.data:00000514 ??_R0?AUICompressSetCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:00000514                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00000514                                         ; .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000514                                         ; const type_info::`vftable'
.data:00000518                 db    0
.data:00000519                 db    0
.data:0000051A                 db    0
.data:0000051B                 db    0
.data:0000051C                 db  2Eh ; .
.data:0000051D                 db  3Fh ; ?
.data:0000051E                 db  41h ; A
.data:0000051F                 db  55h ; U
.data:00000520                 db  49h ; I
.data:00000521                 db  43h ; C
.data:00000522                 db  6Fh ; o
.data:00000523                 db  6Dh ; m
.data:00000524                 db  70h ; p
.data:00000525                 db  72h ; r
.data:00000526                 db  65h ; e
.data:00000527                 db  73h ; s
.data:00000528                 db  73h ; s
.data:00000529                 db  53h ; S
.data:0000052A                 db  65h ; e
.data:0000052B                 db  74h ; t
.data:0000052C                 db  43h ; C
.data:0000052D                 db  6Fh ; o
.data:0000052E                 db  64h ; d
.data:0000052F                 db  65h ; e
.data:00000530                 db  72h ; r
.data:00000531                 db  50h ; P
.data:00000532                 db  72h ; r
.data:00000533                 db  6Fh ; o
.data:00000534                 db  70h ; p
.data:00000535                 db  65h ; e
.data:00000536                 db  72h ; r
.data:00000537                 db  74h ; t
.data:00000538                 db  69h ; i
.data:00000539                 db  65h ; e
.data:0000053A                 db  73h ; s
.data:0000053B                 db  40h ; @
.data:0000053C                 db  40h ; @
.data:0000053D                 db    0
.data:0000053E                 align 10h
.data:0000053E _data           ends
.data:0000053E
.rdata$r:00000540 ; ===========================================================================
.rdata$r:00000540
.rdata$r:00000540 ; Segment type: Pure data
.rdata$r:00000540 ; Segment permissions: Read
.rdata$r:00000540 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000540                 assume cs:_rdata$r
.rdata$r:00000540                 ;org 540h
.rdata$r:00000540 ; COMDAT (pick any)
.rdata$r:00000540                 public ??_R3ICompressSetCoderProperties@@8
.rdata$r:00000540 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000540 ??_R3ICompressSetCoderProperties@@8 db    0
.rdata$r:00000540                                         ; DATA XREF: .rdata$r:00000510o
.rdata$r:00000540                                         ; .rdata$r:00000574o
.rdata$r:00000541                 db    0
.rdata$r:00000542                 db    0
.rdata$r:00000543                 db    0
.rdata$r:00000544                 db    0
.rdata$r:00000545                 db    0
.rdata$r:00000546                 db    0
.rdata$r:00000547                 db    0
.rdata$r:00000548                 db    2
.rdata$r:00000549                 db    0
.rdata$r:0000054A                 db    0
.rdata$r:0000054B                 db    0
.rdata$r:0000054C                 dd offset ??_R2ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:0000054C _rdata$r        ends
.rdata$r:0000054C
.rdata$r:00000550 ; ===========================================================================
.rdata$r:00000550
.rdata$r:00000550 ; Segment type: Pure data
.rdata$r:00000550 ; Segment permissions: Read
.rdata$r:00000550 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000550                 assume cs:_rdata$r
.rdata$r:00000550                 ;org 550h
.rdata$r:00000550 ; COMDAT (pick any)
.rdata$r:00000550                 public ??_R2ICompressSetCoderProperties@@8
.rdata$r:00000550 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00000550 ??_R2ICompressSetCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00000550                                         ; DATA XREF: .rdata$r:0000054Co
.rdata$r:00000550                                         ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000554                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000558                 db    0
.rdata$r:00000559                 align 4
.rdata$r:00000559 _rdata$r        ends
.rdata$r:00000559
.rdata$r:0000055C ; ===========================================================================
.rdata$r:0000055C
.rdata$r:0000055C ; Segment type: Pure data
.rdata$r:0000055C ; Segment permissions: Read
.rdata$r:0000055C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000055C                 assume cs:_rdata$r
.rdata$r:0000055C                 ;org 55Ch
.rdata$r:0000055C ; COMDAT (pick any)
.rdata$r:0000055C                 public ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:0000055C ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000055C ??_R1A@?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:0000055C                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Array'o
.rdata$r:0000055C                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00000560                 db    1
.rdata$r:00000561                 db    0
.rdata$r:00000562                 db    0
.rdata$r:00000563                 db    0
.rdata$r:00000564                 db    0
.rdata$r:00000565                 db    0
.rdata$r:00000566                 db    0
.rdata$r:00000567                 db    0
.rdata$r:00000568                 db 0FFh
.rdata$r:00000569                 db 0FFh
.rdata$r:0000056A                 db 0FFh
.rdata$r:0000056B                 db 0FFh
.rdata$r:0000056C                 db    0
.rdata$r:0000056D                 db    0
.rdata$r:0000056E                 db    0
.rdata$r:0000056F                 db    0
.rdata$r:00000570                 db  40h ; @
.rdata$r:00000571                 db    0
.rdata$r:00000572                 db    0
.rdata$r:00000573                 db    0
.rdata$r:00000574                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000574 _rdata$r        ends
.rdata$r:00000574
.rdata$r:00000578 ; ===========================================================================
.rdata$r:00000578
.rdata$r:00000578 ; Segment type: Pure data
.rdata$r:00000578 ; Segment permissions: Read
.rdata$r:00000578 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000578                 assume cs:_rdata$r
.rdata$r:00000578                 ;org 578h
.rdata$r:00000578 ; COMDAT (pick any)
.rdata$r:00000578                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:00000578 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:00000578 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000578                                         ; DATA XREF: .rdata$r:0000030Co
.rdata$r:00000578                                         ; .rdata$r:0000039Co ...
.rdata$r:00000578                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000057C                 align 10h
.rdata$r:00000580                 db    8
.rdata$r:00000581                 db    0
.rdata$r:00000582                 db    0
.rdata$r:00000583                 db    0
.rdata$r:00000584                 db 0FFh
.rdata$r:00000585                 db 0FFh
.rdata$r:00000586                 db 0FFh
.rdata$r:00000587                 db 0FFh
.rdata$r:00000588                 db    0
.rdata$r:00000589                 db    0
.rdata$r:0000058A                 db    0
.rdata$r:0000058B                 db    0
.rdata$r:0000058C                 db  42h ; B
.rdata$r:0000058D                 db    0
.rdata$r:0000058E                 db    0
.rdata$r:0000058F                 db    0
.rdata$r:00000590                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000590 _rdata$r        ends
.rdata$r:00000590
.rdata$r:00000594 ; ===========================================================================
.rdata$r:00000594
.rdata$r:00000594 ; Segment type: Pure data
.rdata$r:00000594 ; Segment permissions: Read
.rdata$r:00000594 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000594                 assume cs:_rdata$r
.rdata$r:00000594                 ;org 594h
.rdata$r:00000594 ; COMDAT (pick any)
.rdata$r:00000594                 public ??_R1M@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000594 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00000594 ??_R1M@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000594                                         ; DATA XREF: .rdata$r:00000310o
.rdata$r:00000594                                         ; .rdata$r:000003A0o ...
.rdata$r:00000594                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000598                 db    0
.rdata$r:00000599                 db    0
.rdata$r:0000059A                 db    0
.rdata$r:0000059B                 db    0
.rdata$r:0000059C                 db  0Ch
.rdata$r:0000059D                 db    0
.rdata$r:0000059E                 db    0
.rdata$r:0000059F                 db    0
.rdata$r:000005A0                 db 0FFh
.rdata$r:000005A1                 db 0FFh
.rdata$r:000005A2                 db 0FFh
.rdata$r:000005A3                 db 0FFh
.rdata$r:000005A4                 db    0
.rdata$r:000005A5                 db    0
.rdata$r:000005A6                 db    0
.rdata$r:000005A7                 db    0
.rdata$r:000005A8                 db  40h ; @
.rdata$r:000005A9                 db    0
.rdata$r:000005AA                 db    0
.rdata$r:000005AB                 db    0
.rdata$r:000005AC                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005AC _rdata$r        ends
.rdata$r:000005AC
.data:000005B0 ; ===========================================================================
.data:000005B0
.data:000005B0 ; Segment type: Pure data
.data:000005B0 ; Segment permissions: Read/Write
.data:000005B0 _data           segment dword public 'DATA' use32
.data:000005B0                 assume cs:_data
.data:000005B0                 ;org 5B0h
.data:000005B0 ; COMDAT (pick any)
.data:000005B0                 public ??_R0?AVCMyUnknownImp@@@8
.data:000005B0 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:000005B0 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:000005B0                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:000005B0                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000005B0                                         ; const type_info::`vftable'
.data:000005B4                 align 8
.data:000005B8 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:000005B8 _data           ends
.data:000005B8
.rdata$r:000005CC ; ===========================================================================
.rdata$r:000005CC
.rdata$r:000005CC ; Segment type: Pure data
.rdata$r:000005CC ; Segment permissions: Read
.rdata$r:000005CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005CC                 assume cs:_rdata$r
.rdata$r:000005CC                 ;org 5CCh
.rdata$r:000005CC ; COMDAT (pick any)
.rdata$r:000005CC                 public ??_R3CMyUnknownImp@@8
.rdata$r:000005CC ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005CC ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:000005ACo
.rdata$r:000005CC                                         ; .rdata$r:000005FCo
.rdata$r:000005CD                 db    0
.rdata$r:000005CE                 db    0
.rdata$r:000005CF                 db    0
.rdata$r:000005D0                 db    0
.rdata$r:000005D1                 db    0
.rdata$r:000005D2                 db    0
.rdata$r:000005D3                 db    0
.rdata$r:000005D4                 db    1
.rdata$r:000005D5                 db    0
.rdata$r:000005D6                 db    0
.rdata$r:000005D7                 db    0
.rdata$r:000005D8                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000005D8 _rdata$r        ends
.rdata$r:000005D8
.rdata$r:000005DC ; ===========================================================================
.rdata$r:000005DC
.rdata$r:000005DC ; Segment type: Pure data
.rdata$r:000005DC ; Segment permissions: Read
.rdata$r:000005DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005DC                 assume cs:_rdata$r
.rdata$r:000005DC                 ;org 5DCh
.rdata$r:000005DC ; COMDAT (pick any)
.rdata$r:000005DC                 public ??_R2CMyUnknownImp@@8
.rdata$r:000005DC ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000005DC ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000005DC                                         ; DATA XREF: .rdata$r:000005D8o
.rdata$r:000005DC                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000005E0                 db    0
.rdata$r:000005E1                 align 4
.rdata$r:000005E1 _rdata$r        ends
.rdata$r:000005E1
.rdata$r:000005E4 ; ===========================================================================
.rdata$r:000005E4
.rdata$r:000005E4 ; Segment type: Pure data
.rdata$r:000005E4 ; Segment permissions: Read
.rdata$r:000005E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005E4                 assume cs:_rdata$r
.rdata$r:000005E4                 ;org 5E4h
.rdata$r:000005E4 ; COMDAT (pick any)
.rdata$r:000005E4                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000005E4 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000005E4 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000005E4                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:000005E4                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000005E8                 align 10h
.rdata$r:000005F0                 db 0FFh
.rdata$r:000005F1                 db 0FFh
.rdata$r:000005F2                 db 0FFh
.rdata$r:000005F3                 db 0FFh
.rdata$r:000005F4                 db    0
.rdata$r:000005F5                 db    0
.rdata$r:000005F6                 db    0
.rdata$r:000005F7                 db    0
.rdata$r:000005F8                 db  40h ; @
.rdata$r:000005F9                 db    0
.rdata$r:000005FA                 db    0
.rdata$r:000005FB                 db    0
.rdata$r:000005FC                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005FC _rdata$r        ends
.rdata$r:000005FC
.rdata$r:00000600 ; ===========================================================================
.rdata$r:00000600
.rdata$r:00000600 ; Segment type: Pure data
.rdata$r:00000600 ; Segment permissions: Read
.rdata$r:00000600 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000600                 assume cs:_rdata$r
.rdata$r:00000600                 ;org 600h
.rdata$r:00000600 ; COMDAT (pick any)
.rdata$r:00000600                 public ??_R4CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@
.rdata$r:00000600 ; const NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'{for `ICryptoProperties'}
.rdata$r:00000600 ??_R4CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@ db    0
.rdata$r:00000600                                         ; DATA XREF: .rdata:00000274o
.rdata$r:00000601                 db    0
.rdata$r:00000602                 db    0
.rdata$r:00000603                 db    0
.rdata$r:00000604                 db    4
.rdata$r:00000605                 db    0
.rdata$r:00000606                 db    0
.rdata$r:00000607                 db    0
.rdata$r:00000608                 db    0
.rdata$r:00000609                 db    0
.rdata$r:0000060A                 db    0
.rdata$r:0000060B                 db    0
.rdata$r:0000060C                 dd offset ??_R0?AUCAesCbcDecoder@NCrypto@@@8 ; NCrypto::CAesCbcDecoder `RTTI Type Descriptor'
.rdata$r:00000610                 dd offset ??_R3CAesCbcDecoder@NCrypto@@8 ; NCrypto::CAesCbcDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000610 _rdata$r        ends
.rdata$r:00000610
.rdata$r:00000614 ; ===========================================================================
.rdata$r:00000614
.rdata$r:00000614 ; Segment type: Pure data
.rdata$r:00000614 ; Segment permissions: Read
.rdata$r:00000614 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000614                 assume cs:_rdata$r
.rdata$r:00000614                 ;org 614h
.rdata$r:00000614 ; COMDAT (pick any)
.rdata$r:00000614                 public ??_R4CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@
.rdata$r:00000614 ; const NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:00000614 ??_R4CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:00000614                                         ; DATA XREF: .rdata:00000260o
.rdata$r:00000615                 db    0
.rdata$r:00000616                 db    0
.rdata$r:00000617                 db    0
.rdata$r:00000618                 db    8
.rdata$r:00000619                 db    0
.rdata$r:0000061A                 db    0
.rdata$r:0000061B                 db    0
.rdata$r:0000061C                 db    0
.rdata$r:0000061D                 db    0
.rdata$r:0000061E                 db    0
.rdata$r:0000061F                 db    0
.rdata$r:00000620                 dd offset ??_R0?AUCAesCbcDecoder@NCrypto@@@8 ; NCrypto::CAesCbcDecoder `RTTI Type Descriptor'
.rdata$r:00000624                 dd offset ??_R3CAesCbcDecoder@NCrypto@@8 ; NCrypto::CAesCbcDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000624 _rdata$r        ends
.rdata$r:00000624
.text:00000628 ; ===========================================================================
.text:00000628
.text:00000628 ; Segment type: Pure code
.text:00000628 ; Segment permissions: Read/Execute
.text:00000628 _text           segment para public 'CODE' use32
.text:00000628                 assume cs:_text
.text:00000628                 ;org 628h
.text:00000628 ; COMDAT (pick any)
.text:00000628                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000628
.text:00000628 ; =============== S U B R O U T I N E =======================================
.text:00000628
.text:00000628 ; Attributes: bp-based frame
.text:00000628
.text:00000628 ; __int32 __stdcall NCrypto::CAesCbcCoder::QueryInterface(NCrypto::CAesCbcCoder *this, const struct _GUID *Buf1, void **)
.text:00000628                 public ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.text:00000628 ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000628                                         ; CODE XREF: [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00000628                                         ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j
.text:00000628                                         ; DATA XREF: ...
.text:00000628
.text:00000628 var_C           = dword ptr -0Ch
.text:00000628 var_8           = dword ptr -8
.text:00000628 var_4           = dword ptr -4
.text:00000628 this            = dword ptr  8
.text:00000628 Buf1            = dword ptr  0Ch
.text:00000628 arg_8           = dword ptr  10h
.text:00000628
.text:00000628                 push    ebp
.text:00000629                 mov     ebp, esp
.text:0000062B                 sub     esp, 0Ch
.text:0000062E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000635                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000063C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000643                 mov     eax, [ebp+arg_8]
.text:00000646                 mov     dword ptr [eax], 0
.text:0000064C                 push    offset _IID_IUnknown ; Buf2
.text:00000651                 mov     ecx, [ebp+Buf1]
.text:00000654                 push    ecx             ; Buf1
.text:00000655                 call    ___@8           ; __(x,x)
.text:0000065A                 test    eax, eax
.text:0000065C                 jz      short loc_680
.text:0000065E                 cmp     [ebp+this], 0
.text:00000662                 jz      short loc_66F
.text:00000664                 mov     edx, [ebp+this]
.text:00000667                 add     edx, 4
.text:0000066A                 mov     [ebp+var_4], edx
.text:0000066D                 jmp     short loc_676
.text:0000066F ; ---------------------------------------------------------------------------
.text:0000066F
.text:0000066F loc_66F:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+3Aj
.text:0000066F                 mov     [ebp+var_4], 0
.text:00000676
.text:00000676 loc_676:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+45j
.text:00000676                 mov     eax, [ebp+arg_8]
.text:00000679                 mov     ecx, [ebp+var_4]
.text:0000067C                 mov     [eax], ecx
.text:0000067E                 jmp     short loc_6EF
.text:00000680 ; ---------------------------------------------------------------------------
.text:00000680
.text:00000680 loc_680:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+34j
.text:00000680                 push    offset _IID_ICryptoProperties ; Buf2
.text:00000685                 mov     edx, [ebp+Buf1]
.text:00000688                 push    edx             ; Buf1
.text:00000689                 call    ___@8           ; __(x,x)
.text:0000068E                 test    eax, eax
.text:00000690                 jz      short loc_6B4
.text:00000692                 cmp     [ebp+this], 0
.text:00000696                 jz      short loc_6A3
.text:00000698                 mov     eax, [ebp+this]
.text:0000069B                 add     eax, 4
.text:0000069E                 mov     [ebp+var_8], eax
.text:000006A1                 jmp     short loc_6AA
.text:000006A3 ; ---------------------------------------------------------------------------
.text:000006A3
.text:000006A3 loc_6A3:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+6Ej
.text:000006A3                 mov     [ebp+var_8], 0
.text:000006AA
.text:000006AA loc_6AA:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+79j
.text:000006AA                 mov     ecx, [ebp+arg_8]
.text:000006AD                 mov     edx, [ebp+var_8]
.text:000006B0                 mov     [ecx], edx
.text:000006B2                 jmp     short loc_6EF
.text:000006B4 ; ---------------------------------------------------------------------------
.text:000006B4
.text:000006B4 loc_6B4:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+68j
.text:000006B4                 push    offset _IID_ICompressSetCoderProperties ; Buf2
.text:000006B9                 mov     eax, [ebp+Buf1]
.text:000006BC                 push    eax             ; Buf1
.text:000006BD                 call    ___@8           ; __(x,x)
.text:000006C2                 test    eax, eax
.text:000006C4                 jz      short loc_6E8
.text:000006C6                 cmp     [ebp+this], 0
.text:000006CA                 jz      short loc_6D7
.text:000006CC                 mov     ecx, [ebp+this]
.text:000006CF                 add     ecx, 8
.text:000006D2                 mov     [ebp+var_C], ecx
.text:000006D5                 jmp     short loc_6DE
.text:000006D7 ; ---------------------------------------------------------------------------
.text:000006D7
.text:000006D7 loc_6D7:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+A2j
.text:000006D7                 mov     [ebp+var_C], 0
.text:000006DE
.text:000006DE loc_6DE:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+ADj
.text:000006DE                 mov     edx, [ebp+arg_8]
.text:000006E1                 mov     eax, [ebp+var_C]
.text:000006E4                 mov     [edx], eax
.text:000006E6                 jmp     short loc_6EF
.text:000006E8 ; ---------------------------------------------------------------------------
.text:000006E8
.text:000006E8 loc_6E8:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+9Cj
.text:000006E8                 mov     eax, 80004002h
.text:000006ED                 jmp     short loc_700
.text:000006EF ; ---------------------------------------------------------------------------
.text:000006EF
.text:000006EF loc_6EF:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+56j
.text:000006EF                                         ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+8Aj ...
.text:000006EF                 mov     ecx, [ebp+this]
.text:000006F2                 mov     edx, [ecx+0Ch]
.text:000006F5                 add     edx, 1
.text:000006F8                 mov     eax, [ebp+this]
.text:000006FB                 mov     [eax+0Ch], edx
.text:000006FE                 xor     eax, eax
.text:00000700
.text:00000700 loc_700:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+C5j
.text:00000700                 add     esp, 0Ch
.text:00000703                 cmp     ebp, esp
.text:00000705                 call    __RTC_CheckEsp
.text:0000070A                 mov     esp, ebp
.text:0000070C                 pop     ebp
.text:0000070D                 retn    0Ch
.text:0000070D ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000070D
.text:0000070D _text           ends
.text:0000070D
.text:00000710 ; ===========================================================================
.text:00000710
.text:00000710 ; Segment type: Pure code
.text:00000710 ; Segment permissions: Read/Execute
.text:00000710 _text           segment para public 'CODE' use32
.text:00000710                 assume cs:_text
.text:00000710                 ;org 710h
.text:00000710 ; COMDAT (pick any)
.text:00000710                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000710
.text:00000710 ; =============== S U B R O U T I N E =======================================
.text:00000710
.text:00000710 ; Attributes: bp-based frame
.text:00000710
.text:00000710 ; unsigned __int32 __stdcall NCrypto::CAesCbcCoder::AddRef(NCrypto::CAesCbcCoder *this)
.text:00000710                 public ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ
.text:00000710 ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ proc near
.text:00000710                                         ; CODE XREF: [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{4}' (void)+5j
.text:00000710                                         ; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{8}' (void)+5j
.text:00000710                                         ; DATA XREF: ...
.text:00000710
.text:00000710 var_4           = dword ptr -4
.text:00000710 this            = dword ptr  8
.text:00000710
.text:00000710                 push    ebp
.text:00000711                 mov     ebp, esp
.text:00000713                 push    ecx
.text:00000714                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000071B                 mov     eax, [ebp+this]
.text:0000071E                 mov     ecx, [eax+0Ch]
.text:00000721                 add     ecx, 1
.text:00000724                 mov     [ebp+var_4], ecx
.text:00000727                 mov     edx, [ebp+this]
.text:0000072A                 mov     eax, [ebp+var_4]
.text:0000072D                 mov     [edx+0Ch], eax
.text:00000730                 mov     eax, [ebp+var_4]
.text:00000733                 mov     esp, ebp
.text:00000735                 pop     ebp
.text:00000736                 retn    4
.text:00000736 ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ endp
.text:00000736
.text:00000736 ; ---------------------------------------------------------------------------
.text:00000739                 align 4
.text:00000739 _text           ends
.text:00000739
.text:0000073C ; ===========================================================================
.text:0000073C
.text:0000073C ; Segment type: Pure code
.text:0000073C ; Segment permissions: Read/Execute
.text:0000073C _text           segment para public 'CODE' use32
.text:0000073C                 assume cs:_text
.text:0000073C                 ;org 73Ch
.text:0000073C ; COMDAT (pick any)
.text:0000073C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000073C
.text:0000073C ; =============== S U B R O U T I N E =======================================
.text:0000073C
.text:0000073C ; Attributes: bp-based frame
.text:0000073C
.text:0000073C ; unsigned __int32 __stdcall NCrypto::CAesCbcCoder::Release(NCrypto::CAesCbcCoder *this)
.text:0000073C                 public ?Release@CAesCbcCoder@NCrypto@@UAGKXZ
.text:0000073C ?Release@CAesCbcCoder@NCrypto@@UAGKXZ proc near
.text:0000073C                                         ; CODE XREF: [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{4}' (void)+5j
.text:0000073C                                         ; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{8}' (void)+5j
.text:0000073C                                         ; DATA XREF: ...
.text:0000073C
.text:0000073C var_8           = dword ptr -8
.text:0000073C var_4           = dword ptr -4
.text:0000073C this            = dword ptr  8
.text:0000073C
.text:0000073C                 push    ebp
.text:0000073D                 mov     ebp, esp
.text:0000073F                 sub     esp, 8
.text:00000742                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000749                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000750                 mov     eax, [ebp+this]
.text:00000753                 mov     ecx, [eax+0Ch]
.text:00000756                 sub     ecx, 1
.text:00000759                 mov     [ebp+var_8], ecx
.text:0000075C                 mov     edx, [ebp+this]
.text:0000075F                 mov     eax, [ebp+var_8]
.text:00000762                 mov     [edx+0Ch], eax
.text:00000765                 cmp     [ebp+var_8], 0
.text:00000769                 jz      short loc_773
.text:0000076B                 mov     ecx, [ebp+this]
.text:0000076E                 mov     eax, [ecx+0Ch]
.text:00000771                 jmp     short loc_787
.text:00000773 ; ---------------------------------------------------------------------------
.text:00000773
.text:00000773 loc_773:                                ; CODE XREF: NCrypto::CAesCbcCoder::Release(void)+2Dj
.text:00000773                 mov     edx, [ebp+this]
.text:00000776                 mov     [ebp+var_4], edx
.text:00000779                 mov     eax, [ebp+var_4]
.text:0000077C                 push    eax             ; void *
.text:0000077D                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000782                 add     esp, 4
.text:00000785                 xor     eax, eax
.text:00000787
.text:00000787 loc_787:                                ; CODE XREF: NCrypto::CAesCbcCoder::Release(void)+35j
.text:00000787                 add     esp, 8
.text:0000078A                 cmp     ebp, esp
.text:0000078C                 call    __RTC_CheckEsp
.text:00000791                 mov     esp, ebp
.text:00000793                 pop     ebp
.text:00000794                 retn    4
.text:00000794 ?Release@CAesCbcCoder@NCrypto@@UAGKXZ endp
.text:00000794
.text:00000794 ; ---------------------------------------------------------------------------
.text:00000797                 align 4
.text:00000797 _text           ends
.text:00000797
.text:00000798 ; ===========================================================================
.text:00000798
.text:00000798 ; Segment type: Pure code
.text:00000798 ; Segment permissions: Read/Execute
.text:00000798 _text           segment para public 'CODE' use32
.text:00000798                 assume cs:_text
.text:00000798                 ;org 798h
.text:00000798 ; COMDAT (pick any)
.text:00000798                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000798
.text:00000798 ; =============== S U B R O U T I N E =======================================
.text:00000798
.text:00000798 ; Attributes: bp-based frame
.text:00000798
.text:00000798 ; _DWORD __thiscall NCrypto::CAesCbcEncoder::CAesCbcEncoder(NCrypto::CAesCbcEncoder *this, unsigned int)
.text:00000798                 public ??0CAesCbcEncoder@NCrypto@@QAE@I@Z
.text:00000798 ??0CAesCbcEncoder@NCrypto@@QAE@I@Z proc near ; CODE XREF: CreateEnc(void)+5Cp
.text:00000798
.text:00000798 var_4           = dword ptr -4
.text:00000798 arg_0           = dword ptr  8
.text:00000798
.text:00000798                 push    ebp
.text:00000799                 mov     ebp, esp
.text:0000079B                 push    ecx
.text:0000079C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007A3                 mov     [ebp+var_4], ecx
.text:000007A6                 mov     eax, [ebp+arg_0]
.text:000007A9                 push    eax             ; unsigned int
.text:000007AA                 push    1               ; bool
.text:000007AC                 mov     ecx, [ebp+var_4] ; this
.text:000007AF                 call    ??0CAesCbcCoder@NCrypto@@QAE@_NI@Z ; NCrypto::CAesCbcCoder::CAesCbcCoder(bool,uint)
.text:000007B4                 mov     ecx, [ebp+var_4]
.text:000007B7                 mov     dword ptr [ecx], offset ??_7CAesCbcEncoder@NCrypto@@6BICompressFilter@@@ ; const NCrypto::CAesCbcEncoder::`vftable'{for `ICompressFilter'}
.text:000007BD                 mov     edx, [ebp+var_4]
.text:000007C0                 mov     dword ptr [edx+4], offset ??_7CAesCbcEncoder@NCrypto@@6BICryptoProperties@@@ ; const NCrypto::CAesCbcEncoder::`vftable'{for `ICryptoProperties'}
.text:000007C7                 mov     eax, [ebp+var_4]
.text:000007CA                 mov     dword ptr [eax+8], offset ??_7CAesCbcEncoder@NCrypto@@6BICompressSetCoderProperties@@@ ; const NCrypto::CAesCbcEncoder::`vftable'{for `ICompressSetCoderProperties'}
.text:000007D1                 mov     eax, [ebp+var_4]
.text:000007D4                 add     esp, 4
.text:000007D7                 cmp     ebp, esp
.text:000007D9                 call    __RTC_CheckEsp
.text:000007DE                 mov     esp, ebp
.text:000007E0                 pop     ebp
.text:000007E1                 retn    4
.text:000007E1 ??0CAesCbcEncoder@NCrypto@@QAE@I@Z endp
.text:000007E1
.text:000007E1 _text           ends
.text:000007E1
.rdata:000007E4 ; ===========================================================================
.rdata:000007E4
.rdata:000007E4 ; Segment type: Pure data
.rdata:000007E4 ; Segment permissions: Read
.rdata:000007E4 _rdata          segment dword public 'DATA' use32
.rdata:000007E4                 assume cs:_rdata
.rdata:000007E4                 ;org 7E4h
.rdata:000007E4 ; COMDAT (pick largest)
.rdata:000007E4                 dd offset ??_R4CAesCbcEncoder@NCrypto@@6BICompressSetCoderProperties@@@ ; const NCrypto::CAesCbcEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:000007E8                 public ??_7CAesCbcEncoder@NCrypto@@6BICompressSetCoderProperties@@@
.rdata:000007E8 ; const NCrypto::CAesCbcEncoder::`vftable'{for `ICompressSetCoderProperties'}
.rdata:000007E8 ??_7CAesCbcEncoder@NCrypto@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z
.rdata:000007E8                                         ; DATA XREF: NCrypto::CAesCbcEncoder::CAesCbcEncoder(uint)+32o
.rdata:000007E8                                         ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:000007EC                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{8}' (void)
.rdata:000007F0                 dd offset ?Release@CAesCbcCoder@NCrypto@@W7AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{8}' (void)
.rdata:000007F4                 dd offset ?SetCoderProperties@CAesCbcCoder@NCrypto@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; NCrypto::CAesCbcCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:000007F4 _rdata          ends
.rdata:000007F4
.rdata:000007F8 ; ===========================================================================
.rdata:000007F8
.rdata:000007F8 ; Segment type: Pure data
.rdata:000007F8 ; Segment permissions: Read
.rdata:000007F8 _rdata          segment dword public 'DATA' use32
.rdata:000007F8                 assume cs:_rdata
.rdata:000007F8                 ;org 7F8h
.rdata:000007F8 ; COMDAT (pick largest)
.rdata:000007F8                 dd offset ??_R4CAesCbcEncoder@NCrypto@@6BICryptoProperties@@@ ; const NCrypto::CAesCbcEncoder::`RTTI Complete Object Locator'{for `ICryptoProperties'}
.rdata:000007FC                 public ??_7CAesCbcEncoder@NCrypto@@6BICryptoProperties@@@
.rdata:000007FC ; const NCrypto::CAesCbcEncoder::`vftable'{for `ICryptoProperties'}
.rdata:000007FC ??_7CAesCbcEncoder@NCrypto@@6BICryptoProperties@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.rdata:000007FC                                         ; DATA XREF: NCrypto::CAesCbcEncoder::CAesCbcEncoder(uint)+28o
.rdata:000007FC                                         ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00000800                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{4}' (void)
.rdata:00000804                 dd offset ?Release@CAesCbcCoder@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{4}' (void)
.rdata:00000808                 dd offset ?SetKey@CAesCbcCoder@NCrypto@@UAGJPBEI@Z ; NCrypto::CAesCbcCoder::SetKey(uchar const *,uint)
.rdata:0000080C                 dd offset ?SetInitVector@CAesCbcCoder@NCrypto@@UAGJPBEI@Z ; NCrypto::CAesCbcCoder::SetInitVector(uchar const *,uint)
.rdata:0000080C _rdata          ends
.rdata:0000080C
.rdata:00000810 ; ===========================================================================
.rdata:00000810
.rdata:00000810 ; Segment type: Pure data
.rdata:00000810 ; Segment permissions: Read
.rdata:00000810 _rdata          segment dword public 'DATA' use32
.rdata:00000810                 assume cs:_rdata
.rdata:00000810                 ;org 810h
.rdata:00000810 ; COMDAT (pick largest)
.rdata:00000810                 dd offset ??_R4CAesCbcEncoder@NCrypto@@6BICompressFilter@@@ ; const NCrypto::CAesCbcEncoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:00000814                 public ??_7CAesCbcEncoder@NCrypto@@6BICompressFilter@@@
.rdata:00000814 ; const NCrypto::CAesCbcEncoder::`vftable'{for `ICompressFilter'}
.rdata:00000814 ??_7CAesCbcEncoder@NCrypto@@6BICompressFilter@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000814                                         ; DATA XREF: NCrypto::CAesCbcEncoder::CAesCbcEncoder(uint)+1Fo
.rdata:00000814                                         ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)
.rdata:00000818                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::AddRef(void)
.rdata:0000081C                 dd offset ?Release@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::Release(void)
.rdata:00000820                 dd offset ?Init@CAesCbcCoder@NCrypto@@UAGJXZ ; NCrypto::CAesCbcCoder::Init(void)
.rdata:00000824                 dd offset ?Filter@CAesCbcCoder@NCrypto@@UAGIPAEI@Z ; NCrypto::CAesCbcCoder::Filter(uchar *,uint)
.rdata:00000824 _rdata          ends
.rdata:00000824
.rdata$r:00000828 ; ===========================================================================
.rdata$r:00000828
.rdata$r:00000828 ; Segment type: Pure data
.rdata$r:00000828 ; Segment permissions: Read
.rdata$r:00000828 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000828                 assume cs:_rdata$r
.rdata$r:00000828                 ;org 828h
.rdata$r:00000828 ; COMDAT (pick any)
.rdata$r:00000828                 public ??_R4CAesCbcEncoder@NCrypto@@6BICompressFilter@@@
.rdata$r:00000828 ; const NCrypto::CAesCbcEncoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:00000828 ??_R4CAesCbcEncoder@NCrypto@@6BICompressFilter@@@ db    0
.rdata$r:00000828                                         ; DATA XREF: .rdata:00000810o
.rdata$r:00000829                 db    0
.rdata$r:0000082A                 db    0
.rdata$r:0000082B                 db    0
.rdata$r:0000082C                 db    0
.rdata$r:0000082D                 db    0
.rdata$r:0000082E                 db    0
.rdata$r:0000082F                 db    0
.rdata$r:00000830                 db    0
.rdata$r:00000831                 db    0
.rdata$r:00000832                 db    0
.rdata$r:00000833                 db    0
.rdata$r:00000834                 dd offset ??_R0?AUCAesCbcEncoder@NCrypto@@@8 ; NCrypto::CAesCbcEncoder `RTTI Type Descriptor'
.rdata$r:00000838                 dd offset ??_R3CAesCbcEncoder@NCrypto@@8 ; NCrypto::CAesCbcEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000838 _rdata$r        ends
.rdata$r:00000838
.data:0000083C ; ===========================================================================
.data:0000083C
.data:0000083C ; Segment type: Pure data
.data:0000083C ; Segment permissions: Read/Write
.data:0000083C _data           segment dword public 'DATA' use32
.data:0000083C                 assume cs:_data
.data:0000083C                 ;org 83Ch
.data:0000083C ; COMDAT (pick any)
.data:0000083C                 public ??_R0?AUCAesCbcEncoder@NCrypto@@@8
.data:0000083C ; struct NCrypto::CAesCbcEncoder `RTTI Type Descriptor'
.data:0000083C ??_R0?AUCAesCbcEncoder@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:0000083C                                         ; DATA XREF: .rdata$r:00000834o
.data:0000083C                                         ; .rdata$r:NCrypto::CAesCbcEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000083C                                         ; const type_info::`vftable'
.data:00000840                 db    0
.data:00000841                 db    0
.data:00000842                 db    0
.data:00000843                 db    0
.data:00000844                 db  2Eh ; .
.data:00000845                 db  3Fh ; ?
.data:00000846                 db  41h ; A
.data:00000847                 db  55h ; U
.data:00000848                 db  43h ; C
.data:00000849                 db  41h ; A
.data:0000084A                 db  65h ; e
.data:0000084B                 db  73h ; s
.data:0000084C                 db  43h ; C
.data:0000084D                 db  62h ; b
.data:0000084E                 db  63h ; c
.data:0000084F                 db  45h ; E
.data:00000850                 db  6Eh ; n
.data:00000851                 db  63h ; c
.data:00000852                 db  6Fh ; o
.data:00000853                 db  64h ; d
.data:00000854                 db  65h ; e
.data:00000855                 db  72h ; r
.data:00000856                 db  40h ; @
.data:00000857                 db  4Eh ; N
.data:00000858                 db  43h ; C
.data:00000859                 db  72h ; r
.data:0000085A                 db  79h ; y
.data:0000085B                 db  70h ; p
.data:0000085C                 db  74h ; t
.data:0000085D                 db  6Fh ; o
.data:0000085E                 db  40h ; @
.data:0000085F                 db  40h ; @
.data:00000860                 db    0
.data:00000861                 align 4
.data:00000861 _data           ends
.data:00000861
.rdata$r:00000864 ; ===========================================================================
.rdata$r:00000864
.rdata$r:00000864 ; Segment type: Pure data
.rdata$r:00000864 ; Segment permissions: Read
.rdata$r:00000864 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000864                 assume cs:_rdata$r
.rdata$r:00000864                 ;org 864h
.rdata$r:00000864 ; COMDAT (pick any)
.rdata$r:00000864                 public ??_R3CAesCbcEncoder@NCrypto@@8
.rdata$r:00000864 ; NCrypto::CAesCbcEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000864 ??_R3CAesCbcEncoder@NCrypto@@8 db    0  ; DATA XREF: .rdata$r:00000838o
.rdata$r:00000864                                         ; .rdata$r:000008B4o ...
.rdata$r:00000865                 db    0
.rdata$r:00000866                 db    0
.rdata$r:00000867                 db    0
.rdata$r:00000868                 db    1
.rdata$r:00000869                 db    0
.rdata$r:0000086A                 db    0
.rdata$r:0000086B                 db    0
.rdata$r:0000086C                 db    9
.rdata$r:0000086D                 db    0
.rdata$r:0000086E                 db    0
.rdata$r:0000086F                 db    0
.rdata$r:00000870                 dd offset ??_R2CAesCbcEncoder@NCrypto@@8 ; NCrypto::CAesCbcEncoder::`RTTI Base Class Array'
.rdata$r:00000870 _rdata$r        ends
.rdata$r:00000870
.rdata$r:00000874 ; ===========================================================================
.rdata$r:00000874
.rdata$r:00000874 ; Segment type: Pure data
.rdata$r:00000874 ; Segment permissions: Read
.rdata$r:00000874 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000874                 assume cs:_rdata$r
.rdata$r:00000874                 ;org 874h
.rdata$r:00000874 ; COMDAT (pick any)
.rdata$r:00000874                 public ??_R2CAesCbcEncoder@NCrypto@@8
.rdata$r:00000874 ; NCrypto::CAesCbcEncoder::`RTTI Base Class Array'
.rdata$r:00000874 ??_R2CAesCbcEncoder@NCrypto@@8 dd offset ??_R1A@?0A@EA@CAesCbcEncoder@NCrypto@@8
.rdata$r:00000874                                         ; DATA XREF: .rdata$r:00000870o
.rdata$r:00000874                                         ; NCrypto::CAesCbcEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000878                 dd offset ??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8 ; NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000087C                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000880                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00000884                 dd offset ??_R13?0A@EA@ICryptoProperties@@8 ; ICryptoProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000888                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:0000088C                 dd offset ??_R17?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00000890                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00000894                 dd offset ??_R1M@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00000898                 db    0
.rdata$r:00000899                 align 4
.rdata$r:00000899 _rdata$r        ends
.rdata$r:00000899
.rdata$r:0000089C ; ===========================================================================
.rdata$r:0000089C
.rdata$r:0000089C ; Segment type: Pure data
.rdata$r:0000089C ; Segment permissions: Read
.rdata$r:0000089C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000089C                 assume cs:_rdata$r
.rdata$r:0000089C                 ;org 89Ch
.rdata$r:0000089C ; COMDAT (pick any)
.rdata$r:0000089C                 public ??_R1A@?0A@EA@CAesCbcEncoder@NCrypto@@8
.rdata$r:0000089C ; NCrypto::CAesCbcEncoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000089C ??_R1A@?0A@EA@CAesCbcEncoder@NCrypto@@8 dd offset ??_R0?AUCAesCbcEncoder@NCrypto@@@8
.rdata$r:0000089C                                         ; DATA XREF: .rdata$r:NCrypto::CAesCbcEncoder::`RTTI Base Class Array'o
.rdata$r:0000089C                                         ; NCrypto::CAesCbcEncoder `RTTI Type Descriptor'
.rdata$r:000008A0                 db    8
.rdata$r:000008A1                 db    0
.rdata$r:000008A2                 db    0
.rdata$r:000008A3                 db    0
.rdata$r:000008A4                 db    0
.rdata$r:000008A5                 db    0
.rdata$r:000008A6                 db    0
.rdata$r:000008A7                 db    0
.rdata$r:000008A8                 db 0FFh
.rdata$r:000008A9                 db 0FFh
.rdata$r:000008AA                 db 0FFh
.rdata$r:000008AB                 db 0FFh
.rdata$r:000008AC                 db    0
.rdata$r:000008AD                 db    0
.rdata$r:000008AE                 db    0
.rdata$r:000008AF                 db    0
.rdata$r:000008B0                 db  40h ; @
.rdata$r:000008B1                 db    0
.rdata$r:000008B2                 db    0
.rdata$r:000008B3                 db    0
.rdata$r:000008B4                 dd offset ??_R3CAesCbcEncoder@NCrypto@@8 ; NCrypto::CAesCbcEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000008B4 _rdata$r        ends
.rdata$r:000008B4
.rdata$r:000008B8 ; ===========================================================================
.rdata$r:000008B8
.rdata$r:000008B8 ; Segment type: Pure data
.rdata$r:000008B8 ; Segment permissions: Read
.rdata$r:000008B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000008B8                 assume cs:_rdata$r
.rdata$r:000008B8                 ;org 8B8h
.rdata$r:000008B8 ; COMDAT (pick any)
.rdata$r:000008B8                 public ??_R4CAesCbcEncoder@NCrypto@@6BICryptoProperties@@@
.rdata$r:000008B8 ; const NCrypto::CAesCbcEncoder::`RTTI Complete Object Locator'{for `ICryptoProperties'}
.rdata$r:000008B8 ??_R4CAesCbcEncoder@NCrypto@@6BICryptoProperties@@@ db    0
.rdata$r:000008B8                                         ; DATA XREF: .rdata:000007F8o
.rdata$r:000008B9                 db    0
.rdata$r:000008BA                 db    0
.rdata$r:000008BB                 db    0
.rdata$r:000008BC                 db    4
.rdata$r:000008BD                 db    0
.rdata$r:000008BE                 db    0
.rdata$r:000008BF                 db    0
.rdata$r:000008C0                 db    0
.rdata$r:000008C1                 db    0
.rdata$r:000008C2                 db    0
.rdata$r:000008C3                 db    0
.rdata$r:000008C4                 dd offset ??_R0?AUCAesCbcEncoder@NCrypto@@@8 ; NCrypto::CAesCbcEncoder `RTTI Type Descriptor'
.rdata$r:000008C8                 dd offset ??_R3CAesCbcEncoder@NCrypto@@8 ; NCrypto::CAesCbcEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000008C8 _rdata$r        ends
.rdata$r:000008C8
.rdata$r:000008CC ; ===========================================================================
.rdata$r:000008CC
.rdata$r:000008CC ; Segment type: Pure data
.rdata$r:000008CC ; Segment permissions: Read
.rdata$r:000008CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000008CC                 assume cs:_rdata$r
.rdata$r:000008CC                 ;org 8CCh
.rdata$r:000008CC ; COMDAT (pick any)
.rdata$r:000008CC                 public ??_R4CAesCbcEncoder@NCrypto@@6BICompressSetCoderProperties@@@
.rdata$r:000008CC ; const NCrypto::CAesCbcEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:000008CC ??_R4CAesCbcEncoder@NCrypto@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:000008CC                                         ; DATA XREF: .rdata:000007E4o
.rdata$r:000008CD                 db    0
.rdata$r:000008CE                 db    0
.rdata$r:000008CF                 db    0
.rdata$r:000008D0                 db    8
.rdata$r:000008D1                 db    0
.rdata$r:000008D2                 db    0
.rdata$r:000008D3                 db    0
.rdata$r:000008D4                 db    0
.rdata$r:000008D5                 db    0
.rdata$r:000008D6                 db    0
.rdata$r:000008D7                 db    0
.rdata$r:000008D8                 dd offset ??_R0?AUCAesCbcEncoder@NCrypto@@@8 ; NCrypto::CAesCbcEncoder `RTTI Type Descriptor'
.rdata$r:000008DC                 dd offset ??_R3CAesCbcEncoder@NCrypto@@8 ; NCrypto::CAesCbcEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000008DC _rdata$r        ends
.rdata$r:000008DC
.text:000008E0 ; ===========================================================================
.text:000008E0
.text:000008E0 ; Segment type: Pure code
.text:000008E0 ; Segment permissions: Read/Execute
.text:000008E0 _text           segment para public 'CODE' use32
.text:000008E0                 assume cs:_text
.text:000008E0                 ;org 8E0h
.text:000008E0 ; COMDAT (pick any)
.text:000008E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000008E0
.text:000008E0 ; =============== S U B R O U T I N E =======================================
.text:000008E0
.text:000008E0 ; Attributes: bp-based frame
.text:000008E0
.text:000008E0 ; int __stdcall __(void *Buf1, void *Buf2)
.text:000008E0                 public ___@8
.text:000008E0 ___@8           proc near               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+2Dp
.text:000008E0                                         ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+61p ...
.text:000008E0
.text:000008E0 Buf1            = dword ptr  8
.text:000008E0 Buf2            = dword ptr  0Ch
.text:000008E0
.text:000008E0                 push    ebp
.text:000008E1                 mov     ebp, esp
.text:000008E3                 mov     eax, [ebp+Buf2]
.text:000008E6                 push    eax             ; Buf2
.text:000008E7                 mov     ecx, [ebp+Buf1]
.text:000008EA                 push    ecx             ; Buf1
.text:000008EB                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:000008F0                 cmp     ebp, esp
.text:000008F2                 call    __RTC_CheckEsp
.text:000008F7                 pop     ebp
.text:000008F8                 retn    8
.text:000008F8 ___@8           endp
.text:000008F8
.text:000008F8 ; ---------------------------------------------------------------------------
.text:000008FB                 align 4
.text:000008FB _text           ends
.text:000008FB
.text:000008FC ; ===========================================================================
.text:000008FC
.text:000008FC ; Segment type: Pure code
.text:000008FC ; Segment permissions: Read/Execute
.text:000008FC _text           segment para public 'CODE' use32
.text:000008FC                 assume cs:_text
.text:000008FC                 ;org 8FCh
.text:000008FC ; COMDAT (pick any)
.text:000008FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000008FC
.text:000008FC ; =============== S U B R O U T I N E =======================================
.text:000008FC
.text:000008FC ; Attributes: bp-based frame
.text:000008FC
.text:000008FC ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:000008FC                 public _IsEqualGUID@8
.text:000008FC _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:000008FC
.text:000008FC Buf1            = dword ptr  8
.text:000008FC Buf2            = dword ptr  0Ch
.text:000008FC
.text:000008FC                 push    ebp
.text:000008FD                 mov     ebp, esp
.text:000008FF                 push    10h             ; Size
.text:00000901                 mov     eax, [ebp+Buf2]
.text:00000904                 push    eax             ; Buf2
.text:00000905                 mov     ecx, [ebp+Buf1]
.text:00000908                 push    ecx             ; Buf1
.text:00000909                 call    _memcmp
.text:0000090E                 add     esp, 0Ch
.text:00000911                 neg     eax
.text:00000913                 sbb     eax, eax
.text:00000915                 add     eax, 1
.text:00000918                 cmp     ebp, esp
.text:0000091A                 call    __RTC_CheckEsp
.text:0000091F                 pop     ebp
.text:00000920                 retn    8
.text:00000920 _IsEqualGUID@8  endp
.text:00000920
.text:00000920 ; ---------------------------------------------------------------------------
.text:00000923                 align 4
.text:00000923 _text           ends
.text:00000923
.text:00000924 ; ===========================================================================
.text:00000924
.text:00000924 ; Segment type: Pure code
.text:00000924 ; Segment permissions: Read/Execute
.text:00000924 _text           segment para public 'CODE' use32
.text:00000924                 assume cs:_text
.text:00000924                 ;org 924h
.text:00000924 ; COMDAT (pick any)
.text:00000924                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000924
.text:00000924 ; =============== S U B R O U T I N E =======================================
.text:00000924
.text:00000924
.text:00000924 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::CAesCbcCoder::Release`adjustor{4}' (void)
.text:00000924                 public ?Release@CAesCbcCoder@NCrypto@@W3AGKXZ
.text:00000924 ?Release@CAesCbcCoder@NCrypto@@W3AGKXZ proc near
.text:00000924                                         ; DATA XREF: .rdata:00000280o
.text:00000924                                         ; .rdata:00000804o
.text:00000924
.text:00000924 arg_0           = dword ptr  4
.text:00000924
.text:00000924                 sub     [esp+arg_0], 4
.text:00000929                 jmp     ?Release@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::Release(void)
.text:00000929 ?Release@CAesCbcCoder@NCrypto@@W3AGKXZ endp
.text:00000929
.text:00000929 ; ---------------------------------------------------------------------------
.text:0000092E                 align 10h
.text:0000092E _text           ends
.text:0000092E
.text:00000930 ; ===========================================================================
.text:00000930
.text:00000930 ; Segment type: Pure code
.text:00000930 ; Segment permissions: Read/Execute
.text:00000930 _text           segment para public 'CODE' use32
.text:00000930                 assume cs:_text
.text:00000930                 ;org 930h
.text:00000930 ; COMDAT (pick any)
.text:00000930                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000930
.text:00000930 ; =============== S U B R O U T I N E =======================================
.text:00000930
.text:00000930
.text:00000930 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::CAesCbcCoder::Release`adjustor{8}' (void)
.text:00000930                 public ?Release@CAesCbcCoder@NCrypto@@W7AGKXZ
.text:00000930 ?Release@CAesCbcCoder@NCrypto@@W7AGKXZ proc near
.text:00000930                                         ; DATA XREF: .rdata:0000026Co
.text:00000930                                         ; .rdata:000007F0o
.text:00000930
.text:00000930 arg_0           = dword ptr  4
.text:00000930
.text:00000930                 sub     [esp+arg_0], 8
.text:00000935                 jmp     ?Release@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::Release(void)
.text:00000935 ?Release@CAesCbcCoder@NCrypto@@W7AGKXZ endp
.text:00000935
.text:00000935 ; ---------------------------------------------------------------------------
.text:0000093A                 align 4
.text:0000093A _text           ends
.text:0000093A
.text:0000093C ; ===========================================================================
.text:0000093C
.text:0000093C ; Segment type: Pure code
.text:0000093C ; Segment permissions: Read/Execute
.text:0000093C _text           segment para public 'CODE' use32
.text:0000093C                 assume cs:_text
.text:0000093C                 ;org 93Ch
.text:0000093C ; COMDAT (pick any)
.text:0000093C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000093C
.text:0000093C ; =============== S U B R O U T I N E =======================================
.text:0000093C
.text:0000093C
.text:0000093C ; [thunk]:public: virtual unsigned long __stdcall NCrypto::CAesCbcCoder::AddRef`adjustor{4}' (void)
.text:0000093C                 public ?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ
.text:0000093C ?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ proc near ; DATA XREF: .rdata:0000027Co
.text:0000093C                                         ; .rdata:00000800o
.text:0000093C
.text:0000093C arg_0           = dword ptr  4
.text:0000093C
.text:0000093C                 sub     [esp+arg_0], 4
.text:00000941                 jmp     ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::AddRef(void)
.text:00000941 ?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ endp
.text:00000941
.text:00000941 ; ---------------------------------------------------------------------------
.text:00000946                 align 4
.text:00000946 _text           ends
.text:00000946
.text:00000948 ; ===========================================================================
.text:00000948
.text:00000948 ; Segment type: Pure code
.text:00000948 ; Segment permissions: Read/Execute
.text:00000948 _text           segment para public 'CODE' use32
.text:00000948                 assume cs:_text
.text:00000948                 ;org 948h
.text:00000948 ; COMDAT (pick any)
.text:00000948                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000948
.text:00000948 ; =============== S U B R O U T I N E =======================================
.text:00000948
.text:00000948
.text:00000948 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::CAesCbcCoder::AddRef`adjustor{8}' (void)
.text:00000948                 public ?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ
.text:00000948 ?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ proc near ; DATA XREF: .rdata:00000268o
.text:00000948                                         ; .rdata:000007ECo
.text:00000948
.text:00000948 arg_0           = dword ptr  4
.text:00000948
.text:00000948                 sub     [esp+arg_0], 8
.text:0000094D                 jmp     ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::AddRef(void)
.text:0000094D ?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ endp
.text:0000094D
.text:0000094D ; ---------------------------------------------------------------------------
.text:00000952                 align 4
.text:00000952 _text           ends
.text:00000952
.text:00000954 ; ===========================================================================
.text:00000954
.text:00000954 ; Segment type: Pure code
.text:00000954 ; Segment permissions: Read/Execute
.text:00000954 _text           segment para public 'CODE' use32
.text:00000954                 assume cs:_text
.text:00000954                 ;org 954h
.text:00000954 ; COMDAT (pick any)
.text:00000954                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000954
.text:00000954 ; =============== S U B R O U T I N E =======================================
.text:00000954
.text:00000954
.text:00000954 ; [thunk]:public: virtual long __stdcall NCrypto::CAesCbcCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00000954                 public ?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.text:00000954 ?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00000954                                         ; DATA XREF: .rdata:const NCrypto::CAesCbcDecoder::`vftable'{for `ICryptoProperties'}o
.text:00000954                                         ; .rdata:const NCrypto::CAesCbcEncoder::`vftable'{for `ICryptoProperties'}o
.text:00000954
.text:00000954 arg_0           = dword ptr  4
.text:00000954
.text:00000954                 sub     [esp+arg_0], 4
.text:00000959                 jmp     ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)
.text:00000959 ?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00000959
.text:00000959 ; ---------------------------------------------------------------------------
.text:0000095E                 align 10h
.text:0000095E _text           ends
.text:0000095E
.text:00000960 ; ===========================================================================
.text:00000960
.text:00000960 ; Segment type: Pure code
.text:00000960 ; Segment permissions: Read/Execute
.text:00000960 _text           segment para public 'CODE' use32
.text:00000960                 assume cs:_text
.text:00000960                 ;org 960h
.text:00000960 ; COMDAT (pick any)
.text:00000960                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000960
.text:00000960 ; =============== S U B R O U T I N E =======================================
.text:00000960
.text:00000960
.text:00000960 ; [thunk]:public: virtual long __stdcall NCrypto::CAesCbcCoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00000960                 public ?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z
.text:00000960 ?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00000960                                         ; DATA XREF: .rdata:const NCrypto::CAesCbcDecoder::`vftable'{for `ICompressSetCoderProperties'}o
.text:00000960                                         ; .rdata:const NCrypto::CAesCbcEncoder::`vftable'{for `ICompressSetCoderProperties'}o
.text:00000960
.text:00000960 arg_0           = dword ptr  4
.text:00000960
.text:00000960                 sub     [esp+arg_0], 8
.text:00000965                 jmp     ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)
.text:00000965 ?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00000965
.text:00000965 ; ---------------------------------------------------------------------------
.text:0000096A                 align 4
.text:0000096A _text           ends
.text:0000096A
.text$yc:0000096C ; ===========================================================================
.text$yc:0000096C
.text$yc:0000096C ; Segment type: Pure code
.text$yc:0000096C ; Segment permissions: Read/Execute
.text$yc:0000096C _text$yc        segment para public 'CODE' use32
.text$yc:0000096C                 assume cs:_text$yc
.text$yc:0000096C                 ;org 96Ch
.text$yc:0000096C ; COMDAT (pick any)
.text$yc:0000096C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:0000096C
.text$yc:0000096C ; =============== S U B R O U T I N E =======================================
.text$yc:0000096C
.text$yc:0000096C ; Attributes: bp-based frame
.text$yc:0000096C
.text$yc:0000096C ; void __cdecl `dynamic initializer for 'g_RegisterCodec''(void)
.text$yc:0000096C ??__Eg_RegisterCodec@@YAXXZ proc near   ; DATA XREF: .CRT$XCU:_g_RegisterCodec$initializer$o
.text$yc:0000096C                 push    ebp
.text$yc:0000096D                 mov     ebp, esp
.text$yc:0000096F                 mov     ecx, offset _g_RegisterCodec ; this
.text$yc:00000974                 call    ??0CRegisterCodecAES256CBC@@QAE@XZ ; CRegisterCodecAES256CBC::CRegisterCodecAES256CBC(void)
.text$yc:00000979                 cmp     ebp, esp
.text$yc:0000097B                 call    __RTC_CheckEsp
.text$yc:00000980                 pop     ebp
.text$yc:00000981                 retn
.text$yc:00000981 ??__Eg_RegisterCodec@@YAXXZ endp
.text$yc:00000981
.text$yc:00000981 ; ---------------------------------------------------------------------------
.text$yc:00000982                 align 4
.text$yc:00000982 _text$yc        ends
.text$yc:00000982
.text:00000984 ; ===========================================================================
.text:00000984
.text:00000984 ; Segment type: Pure code
.text:00000984 ; Segment permissions: Read/Execute
.text:00000984 _text           segment para public 'CODE' use32
.text:00000984                 assume cs:_text
.text:00000984                 ;org 984h
.text:00000984 ; COMDAT (pick any)
.text:00000984                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000984
.text:00000984 ; =============== S U B R O U T I N E =======================================
.text:00000984
.text:00000984 ; Attributes: bp-based frame
.text:00000984
.text:00000984 ; _DWORD __thiscall CRegisterCodecAES256CBC::CRegisterCodecAES256CBC(CRegisterCodecAES256CBC *__hidden this)
.text:00000984                 public ??0CRegisterCodecAES256CBC@@QAE@XZ
.text:00000984 ??0CRegisterCodecAES256CBC@@QAE@XZ proc near
.text:00000984                                         ; CODE XREF: `dynamic initializer for 'g_RegisterCodec''(void)+8p
.text:00000984
.text:00000984 var_4           = dword ptr -4
.text:00000984
.text:00000984                 push    ebp
.text:00000985                 mov     ebp, esp
.text:00000987                 push    ecx
.text:00000988                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000098F                 mov     [ebp+var_4], ecx
.text:00000992                 push    offset _g_CodecInfo ; struct CCodecInfo *
.text:00000997                 call    ?RegisterCodec@@YGXPBUCCodecInfo@@@Z ; RegisterCodec(CCodecInfo const *)
.text:0000099C                 mov     eax, [ebp+var_4]
.text:0000099F                 add     esp, 4
.text:000009A2                 cmp     ebp, esp
.text:000009A4                 call    __RTC_CheckEsp
.text:000009A9                 mov     esp, ebp
.text:000009AB                 pop     ebp
.text:000009AC                 retn
.text:000009AC ??0CRegisterCodecAES256CBC@@QAE@XZ endp
.text:000009AC
.text:000009AC ; ---------------------------------------------------------------------------
.text:000009AD                 align 10h
.text:000009AD _text           ends
.text:000009AD
.bss:000009B0 ; ===========================================================================
.bss:000009B0
.bss:000009B0 ; Segment type: Uninitialized
.bss:000009B0 ; Segment permissions: Read/Write
.bss:000009B0 _bss            segment byte public 'BSS' use32
.bss:000009B0                 assume cs:_bss
.bss:000009B0                 ;org 9B0h
.bss:000009B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000009B0 ; CRegisterCodecAES256CBC g_RegisterCodec
.bss:000009B0 _g_RegisterCodec db    ? ;              ; DATA XREF: `dynamic initializer for 'g_RegisterCodec''(void)+3o
.bss:000009B1                 align 4
.bss:000009B1 _bss            ends
.bss:000009B1
.CRT$XCU:000009B4 ; ===========================================================================
.CRT$XCU:000009B4
.CRT$XCU:000009B4 ; Segment type: Pure data
.CRT$XCU:000009B4 ; Segment permissions: Read
.CRT$XCU:000009B4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000009B4                 assume cs:_CRT$XCU
.CRT$XCU:000009B4                 ;org 9B4h
.CRT$XCU:000009B4 _g_RegisterCodec$initializer$ dd offset ??__Eg_RegisterCodec@@YAXXZ ; `dynamic initializer for 'g_RegisterCodec''(void)
.CRT$XCU:000009B4 _CRT$XCU        ends
.CRT$XCU:000009B4
UNDEF:000009C0 ; ===========================================================================
UNDEF:000009C0
UNDEF:000009C0 ; Segment type: Externs
UNDEF:000009C0 ; UNDEF
UNDEF:000009C0 ; void __cdecl operator delete(void *)
UNDEF:000009C0                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?CreateDec@@YGPAXXZ$0+4p
UNDEF:000009C0                                         ; __unwindfunclet$?CreateEnc@@YGPAXXZ$0+4p ...
UNDEF:000009C4 ; void *__cdecl operator new(unsigned int)
UNDEF:000009C4                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CreateDec(void)+3Fp
UNDEF:000009C4                                         ; CreateEnc(void)+3Fp
UNDEF:000009C8                 extrn ___security_cookie:near
UNDEF:000009C8                                         ; DATA XREF: CreateDec(void)+29r
UNDEF:000009C8                                         ; CreateEnc(void)+29r
UNDEF:000009CC                 extrn ___CxxFrameHandler3:near
UNDEF:000009CC                                         ; CODE XREF: __ehhandler$?CreateDec@@YGPAXXZ+16j
UNDEF:000009CC                                         ; __ehhandler$?CreateEnc@@YGPAXXZ+16j
UNDEF:000009D0 ; __fastcall __security_check_cookie(x)
UNDEF:000009D0                 extrn @__security_check_cookie@4:near
UNDEF:000009D0                                         ; CODE XREF: __ehhandler$?CreateDec@@YGPAXXZ+Cp
UNDEF:000009D0                                         ; __ehhandler$?CreateEnc@@YGPAXXZ+Cp
UNDEF:000009D4                 extrn __RTC_CheckEsp:near ; CODE XREF: CreateDec(void)+8Dp
UNDEF:000009D4                                         ; CreateEnc(void)+8Dp ...
UNDEF:000009D8                 extrn __RTC_Shutdown:near
UNDEF:000009D8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000009DC                 extrn __RTC_InitBase:near
UNDEF:000009DC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000009E0 ; _DWORD __thiscall NCrypto::CAesCbcCoder::CAesCbcCoder(NCrypto::CAesCbcCoder *__hidden this, bool, unsigned int)
UNDEF:000009E0                 extrn ??0CAesCbcCoder@NCrypto@@QAE@_NI@Z:near
UNDEF:000009E0                                         ; CODE XREF: NCrypto::CAesCbcDecoder::CAesCbcDecoder(uint)+17p
UNDEF:000009E0                                         ; NCrypto::CAesCbcEncoder::CAesCbcEncoder(uint)+17p
UNDEF:000009E4 ; const type_info::`vftable'
UNDEF:000009E4                 extrn ??_7type_info@@6B@:near
UNDEF:000009E4                                         ; DATA XREF: .data:NCrypto::CAesCbcDecoder `RTTI Type Descriptor'o
UNDEF:000009E4                                         ; .data:NCrypto::CAesCbcCoder `RTTI Type Descriptor'o ...
UNDEF:000009E8 ; public: virtual long __stdcall NCrypto::CAesCbcCoder::Init(void)
UNDEF:000009E8                 extrn ?Init@CAesCbcCoder@NCrypto@@UAGJXZ:near
UNDEF:000009E8                                         ; DATA XREF: .rdata:0000029Co
UNDEF:000009E8                                         ; .rdata:00000820o
UNDEF:000009EC ; public: virtual unsigned int __stdcall NCrypto::CAesCbcCoder::Filter(unsigned char *, unsigned int)
UNDEF:000009EC                 extrn ?Filter@CAesCbcCoder@NCrypto@@UAGIPAEI@Z:near
UNDEF:000009EC                                         ; DATA XREF: .rdata:000002A0o
UNDEF:000009EC                                         ; .rdata:00000824o
UNDEF:000009F0 ; public: virtual long __stdcall NCrypto::CAesCbcCoder::SetKey(unsigned char const *, unsigned int)
UNDEF:000009F0                 extrn ?SetKey@CAesCbcCoder@NCrypto@@UAGJPBEI@Z:near
UNDEF:000009F0                                         ; DATA XREF: .rdata:00000284o
UNDEF:000009F0                                         ; .rdata:00000808o
UNDEF:000009F4 ; public: virtual long __stdcall NCrypto::CAesCbcCoder::SetInitVector(unsigned char const *, unsigned int)
UNDEF:000009F4                 extrn ?SetInitVector@CAesCbcCoder@NCrypto@@UAGJPBEI@Z:near
UNDEF:000009F4                                         ; DATA XREF: .rdata:00000288o
UNDEF:000009F4                                         ; .rdata:0000080Co
UNDEF:000009F8 ; public: virtual long __stdcall NCrypto::CAesCbcCoder::SetCoderProperties(unsigned long const *, struct tagPROPVARIANT const *, unsigned int)
UNDEF:000009F8                 extrn ?SetCoderProperties@CAesCbcCoder@NCrypto@@UAGJPBKPBUtagPROPVARIANT@@I@Z:near
UNDEF:000009F8                                         ; DATA XREF: .rdata:00000270o
UNDEF:000009F8                                         ; .rdata:000007F4o
UNDEF:000009FC                 extrn _IID_ICompressSetCoderProperties:near
UNDEF:000009FC                                         ; DATA XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *):loc_6B4o
UNDEF:00000A00                 extrn _IID_ICryptoProperties:near
UNDEF:00000A00                                         ; DATA XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *):loc_680o
UNDEF:00000A04 ; const IID IID_IUnknown
UNDEF:00000A04                 extrn _IID_IUnknown:near
UNDEF:00000A04                                         ; DATA XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+24o
UNDEF:00000A08 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00000A08                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00000A0C ; void __stdcall RegisterCodec(const struct CCodecInfo *)
UNDEF:00000A0C                 extrn ?RegisterCodec@@YGXPBUCCodecInfo@@@Z:near
UNDEF:00000A0C                                         ; CODE XREF: CRegisterCodecAES256CBC::CRegisterCodecAES256CBC(void)+13p
UNDEF:00000A0C
UNDEF:00000A0C