.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 4B9833DCB53662A6772CF78658FF2FD2
.text:00000000 ; Input CRC32 : 5C505F78
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Lzma2Enc.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __stdcall Lzma2EncProps_Init(x)
.text:00000000                 public _Lzma2EncProps_Init@4
.text:00000000 _Lzma2EncProps_Init@4 proc near         ; CODE XREF: Lzma2Enc_Create(x,x)+42p
.text:00000000
.text:00000000 arg_0           = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 mov     eax, [ebp+arg_0]
.text:00000006                 push    eax
.text:00000007                 call    _LzmaEncProps_Init@4 ; LzmaEncProps_Init(x)
.text:0000000C                 mov     ecx, [ebp+arg_0]
.text:0000000F                 mov     dword ptr [ecx+40h], 0FFFFFFFFh
.text:00000016                 mov     edx, [ebp+arg_0]
.text:00000019                 mov     dword ptr [edx+3Ch], 0FFFFFFFFh
.text:00000020                 mov     eax, [ebp+arg_0]
.text:00000023                 mov     dword ptr [eax+38h], 0
.text:0000002A                 cmp     ebp, esp
.text:0000002C                 call    __RTC_CheckEsp
.text:00000031                 pop     ebp
.text:00000032                 retn    4
.text:00000032 _Lzma2EncProps_Init@4 endp
.text:00000032
.text:00000032 ; ---------------------------------------------------------------------------
.text:00000035                 align 10h
.text:00000040
.text:00000040 ; =============== S U B R O U T I N E =======================================
.text:00000040
.text:00000040 ; Attributes: bp-based frame
.text:00000040
.text:00000040 ; __stdcall Lzma2EncProps_Normalize(x)
.text:00000040                 public _Lzma2EncProps_Normalize@4
.text:00000040 _Lzma2EncProps_Normalize@4 proc near    ; CODE XREF: Lzma2Enc_Create(x,x)+4Ep
.text:00000040                                         ; Lzma2Enc_SetProps(x,x)+66p
.text:00000040
.text:00000040 var_9C          = dword ptr -9Ch
.text:00000040 var_98          = dword ptr -98h
.text:00000040 var_94          = dword ptr -94h
.text:00000040 var_90          = dword ptr -90h
.text:00000040 var_8C          = dword ptr -8Ch
.text:00000040 var_88          = dword ptr -88h
.text:00000040 var_84          = dword ptr -84h
.text:00000040 var_80          = dword ptr -80h
.text:00000040 var_7C          = dword ptr -7Ch
.text:00000040 var_78          = dword ptr -78h
.text:00000040 var_74          = dword ptr -74h
.text:00000040 var_70          = dword ptr -70h
.text:00000040 var_6C          = dword ptr -6Ch
.text:00000040 var_68          = dword ptr -68h
.text:00000040 var_64          = dword ptr -64h
.text:00000040 var_60          = dword ptr -60h
.text:00000040 var_5C          = dword ptr -5Ch
.text:00000040 var_58          = dword ptr -58h
.text:00000040 var_50          = byte ptr -50h
.text:00000040 var_1C          = dword ptr -1Ch
.text:00000040 var_14          = dword ptr -14h
.text:00000040 var_10          = dword ptr -10h
.text:00000040 var_C           = dword ptr -0Ch
.text:00000040 var_8           = dword ptr -8
.text:00000040 var_4           = dword ptr -4
.text:00000040 arg_0           = dword ptr  8
.text:00000040
.text:00000040                 push    ebp
.text:00000041                 mov     ebp, esp
.text:00000043                 sub     esp, 9Ch
.text:00000049                 push    esi
.text:0000004A                 push    edi
.text:0000004B                 lea     edi, [ebp+var_9C]
.text:00000051                 mov     ecx, 27h ; '''
.text:00000056                 mov     eax, 0CCCCCCCCh
.text:0000005B                 rep stosd
.text:0000005D                 mov     eax, dword ptr ds:___security_cookie
.text:00000062                 xor     eax, ebp
.text:00000064                 mov     [ebp+var_4], eax
.text:00000067                 mov     esi, [ebp+arg_0]
.text:0000006A                 mov     ecx, 0Eh
.text:0000006F                 lea     edi, [ebp+var_50]
.text:00000072                 rep movsd
.text:00000074                 lea     eax, [ebp+var_50]
.text:00000077                 push    eax
.text:00000078                 call    _LzmaEncProps_Normalize@4 ; LzmaEncProps_Normalize(x)
.text:0000007D                 mov     ecx, [ebp+var_1C]
.text:00000080                 mov     [ebp+var_C], ecx
.text:00000083                 mov     edx, [ebp+arg_0]
.text:00000086                 mov     eax, [edx+34h]
.text:00000089                 mov     [ebp+var_8], eax
.text:0000008C                 mov     ecx, [ebp+arg_0]
.text:0000008F                 mov     edx, [ecx+3Ch]
.text:00000092                 mov     [ebp+var_10], edx
.text:00000095                 mov     eax, [ebp+arg_0]
.text:00000098                 mov     ecx, [eax+40h]
.text:0000009B                 mov     [ebp+var_14], ecx
.text:0000009E                 cmp     [ebp+var_10], 20h ; ' '
.text:000000A2                 jle     short loc_AB
.text:000000A4                 mov     [ebp+var_10], 20h ; ' '
.text:000000AB
.text:000000AB loc_AB:                                 ; CODE XREF: Lzma2EncProps_Normalize(x)+62j
.text:000000AB                 cmp     [ebp+var_14], 0
.text:000000AF                 jg      short loc_CA
.text:000000B1                 cmp     [ebp+var_10], 0
.text:000000B5                 jg      short loc_BE
.text:000000B7                 mov     [ebp+var_10], 1
.text:000000BE
.text:000000BE loc_BE:                                 ; CODE XREF: Lzma2EncProps_Normalize(x)+75j
.text:000000BE                 mov     edx, [ebp+var_C]
.text:000000C1                 imul    edx, [ebp+var_10]
.text:000000C5                 mov     [ebp+var_14], edx
.text:000000C8                 jmp     short loc_125
.text:000000CA ; ---------------------------------------------------------------------------
.text:000000CA
.text:000000CA loc_CA:                                 ; CODE XREF: Lzma2EncProps_Normalize(x)+6Fj
.text:000000CA                 cmp     [ebp+var_10], 0
.text:000000CE                 jg      short loc_FC
.text:000000D0                 mov     eax, [ebp+var_14]
.text:000000D3                 cdq
.text:000000D4                 idiv    [ebp+var_C]
.text:000000D7                 mov     [ebp+var_10], eax
.text:000000DA                 cmp     [ebp+var_10], 0
.text:000000DE                 jnz     short loc_ED
.text:000000E0                 mov     [ebp+var_8], 1
.text:000000E7                 mov     eax, [ebp+var_14]
.text:000000EA                 mov     [ebp+var_10], eax
.text:000000ED
.text:000000ED loc_ED:                                 ; CODE XREF: Lzma2EncProps_Normalize(x)+9Ej
.text:000000ED                 cmp     [ebp+var_10], 20h ; ' '
.text:000000F1                 jle     short loc_FA
.text:000000F3                 mov     [ebp+var_10], 20h ; ' '
.text:000000FA
.text:000000FA loc_FA:                                 ; CODE XREF: Lzma2EncProps_Normalize(x)+B1j
.text:000000FA                 jmp     short loc_125
.text:000000FC ; ---------------------------------------------------------------------------
.text:000000FC
.text:000000FC loc_FC:                                 ; CODE XREF: Lzma2EncProps_Normalize(x)+8Ej
.text:000000FC                 cmp     [ebp+var_8], 0
.text:00000100                 jg      short loc_11B
.text:00000102                 mov     eax, [ebp+var_14]
.text:00000105                 cdq
.text:00000106                 idiv    [ebp+var_10]
.text:00000109                 mov     [ebp+var_8], eax
.text:0000010C                 cmp     [ebp+var_8], 0
.text:00000110                 jnz     short loc_119
.text:00000112                 mov     [ebp+var_8], 1
.text:00000119
.text:00000119 loc_119:                                ; CODE XREF: Lzma2EncProps_Normalize(x)+D0j
.text:00000119                 jmp     short loc_125
.text:0000011B ; ---------------------------------------------------------------------------
.text:0000011B
.text:0000011B loc_11B:                                ; CODE XREF: Lzma2EncProps_Normalize(x)+C0j
.text:0000011B                 mov     ecx, [ebp+var_C]
.text:0000011E                 imul    ecx, [ebp+var_10]
.text:00000122                 mov     [ebp+var_14], ecx
.text:00000125
.text:00000125 loc_125:                                ; CODE XREF: Lzma2EncProps_Normalize(x)+88j
.text:00000125                                         ; Lzma2EncProps_Normalize(x):loc_FAj ...
.text:00000125                 mov     edx, [ebp+arg_0]
.text:00000128                 mov     eax, [ebp+var_8]
.text:0000012B                 mov     [edx+34h], eax
.text:0000012E                 mov     ecx, [ebp+arg_0]
.text:00000131                 push    ecx
.text:00000132                 call    _LzmaEncProps_Normalize@4 ; LzmaEncProps_Normalize(x)
.text:00000137                 mov     edx, [ebp+arg_0]
.text:0000013A                 cmp     dword ptr [edx+38h], 0
.text:0000013E                 jnz     loc_206
.text:00000144                 mov     eax, [ebp+arg_0]
.text:00000147                 mov     ecx, [eax+4]
.text:0000014A                 mov     [ebp+var_58], ecx
.text:0000014D                 mov     eax, [ebp+var_58]
.text:00000150                 xor     edx, edx
.text:00000152                 mov     cl, 2
.text:00000154                 call    __allshl
.text:00000159                 mov     [ebp+var_60], eax
.text:0000015C                 mov     [ebp+var_5C], edx
.text:0000015F                 mov     [ebp+var_64], 100000h
.text:00000166                 mov     [ebp+var_68], 10000000h
.text:0000016D                 mov     edx, [ebp+var_64]
.text:00000170                 xor     eax, eax
.text:00000172                 mov     [ebp+var_80], edx
.text:00000175                 mov     [ebp+var_7C], eax
.text:00000178                 mov     ecx, [ebp+var_5C]
.text:0000017B                 cmp     ecx, [ebp+var_7C]
.text:0000017E                 ja      short loc_195
.text:00000180                 jb      short loc_18A
.text:00000182                 mov     edx, [ebp+var_60]
.text:00000185                 cmp     edx, [ebp+var_80]
.text:00000188                 jnb     short loc_195
.text:0000018A
.text:0000018A loc_18A:                                ; CODE XREF: Lzma2EncProps_Normalize(x)+140j
.text:0000018A                 mov     eax, [ebp+var_64]
.text:0000018D                 xor     ecx, ecx
.text:0000018F                 mov     [ebp+var_60], eax
.text:00000192                 mov     [ebp+var_5C], ecx
.text:00000195
.text:00000195 loc_195:                                ; CODE XREF: Lzma2EncProps_Normalize(x)+13Ej
.text:00000195                                         ; Lzma2EncProps_Normalize(x)+148j
.text:00000195                 mov     edx, [ebp+var_68]
.text:00000198                 xor     eax, eax
.text:0000019A                 mov     [ebp+var_88], edx
.text:000001A0                 mov     [ebp+var_84], eax
.text:000001A6                 mov     ecx, [ebp+var_5C]
.text:000001A9                 cmp     ecx, [ebp+var_84]
.text:000001AF                 jb      short loc_1C9
.text:000001B1                 ja      short loc_1BE
.text:000001B3                 mov     edx, [ebp+var_60]
.text:000001B6                 cmp     edx, [ebp+var_88]
.text:000001BC                 jbe     short loc_1C9
.text:000001BE
.text:000001BE loc_1BE:                                ; CODE XREF: Lzma2EncProps_Normalize(x)+171j
.text:000001BE                 mov     eax, [ebp+var_68]
.text:000001C1                 xor     ecx, ecx
.text:000001C3                 mov     [ebp+var_60], eax
.text:000001C6                 mov     [ebp+var_5C], ecx
.text:000001C9
.text:000001C9 loc_1C9:                                ; CODE XREF: Lzma2EncProps_Normalize(x)+16Fj
.text:000001C9                                         ; Lzma2EncProps_Normalize(x)+17Cj
.text:000001C9                 mov     edx, [ebp+var_58]
.text:000001CC                 xor     eax, eax
.text:000001CE                 mov     [ebp+var_90], edx
.text:000001D4                 mov     [ebp+var_8C], eax
.text:000001DA                 mov     ecx, [ebp+var_5C]
.text:000001DD                 cmp     ecx, [ebp+var_8C]
.text:000001E3                 ja      short loc_1FD
.text:000001E5                 jb      short loc_1F2
.text:000001E7                 mov     edx, [ebp+var_60]
.text:000001EA                 cmp     edx, [ebp+var_90]
.text:000001F0                 jnb     short loc_1FD
.text:000001F2
.text:000001F2 loc_1F2:                                ; CODE XREF: Lzma2EncProps_Normalize(x)+1A5j
.text:000001F2                 mov     eax, [ebp+var_58]
.text:000001F5                 xor     ecx, ecx
.text:000001F7                 mov     [ebp+var_60], eax
.text:000001FA                 mov     [ebp+var_5C], ecx
.text:000001FD
.text:000001FD loc_1FD:                                ; CODE XREF: Lzma2EncProps_Normalize(x)+1A3j
.text:000001FD                                         ; Lzma2EncProps_Normalize(x)+1B0j
.text:000001FD                 mov     edx, [ebp+var_60]
.text:00000200                 mov     eax, [ebp+arg_0]
.text:00000203                 mov     [eax+38h], edx
.text:00000206
.text:00000206 loc_206:                                ; CODE XREF: Lzma2EncProps_Normalize(x)+FEj
.text:00000206                 cmp     [ebp+var_10], 1
.text:0000020A                 jle     loc_2AA
.text:00000210                 mov     ecx, [ebp+arg_0]
.text:00000213                 mov     edx, [ecx+38h]
.text:00000216                 xor     eax, eax
.text:00000218                 mov     ecx, [ebp+arg_0]
.text:0000021B                 add     edx, [ecx+8]
.text:0000021E                 adc     eax, [ecx+0Ch]
.text:00000221                 sub     edx, 1
.text:00000224                 sbb     eax, 0
.text:00000227                 mov     [ebp+var_70], edx
.text:0000022A                 mov     [ebp+var_6C], eax
.text:0000022D                 mov     edx, [ebp+arg_0]
.text:00000230                 mov     [ebp+var_94], edx
.text:00000236                 mov     eax, [ebp+var_94]
.text:0000023C                 mov     ecx, [ebp+var_6C]
.text:0000023F                 cmp     ecx, [eax+0Ch]
.text:00000242                 jb      short loc_2AA
.text:00000244                 ja      short loc_254
.text:00000246                 mov     edx, [ebp+var_94]
.text:0000024C                 mov     eax, [ebp+var_70]
.text:0000024F                 cmp     eax, [edx+8]
.text:00000252                 jbe     short loc_2AA
.text:00000254
.text:00000254 loc_254:                                ; CODE XREF: Lzma2EncProps_Normalize(x)+204j
.text:00000254                 mov     ecx, [ebp+arg_0]
.text:00000257                 mov     edx, [ecx+38h]
.text:0000025A                 xor     eax, eax
.text:0000025C                 push    eax
.text:0000025D                 push    edx
.text:0000025E                 mov     ecx, [ebp+var_6C]
.text:00000261                 push    ecx
.text:00000262                 mov     edx, [ebp+var_70]
.text:00000265                 push    edx
.text:00000266                 call    __aulldiv
.text:0000026B                 mov     [ebp+var_78], eax
.text:0000026E                 mov     [ebp+var_74], edx
.text:00000271                 mov     eax, [ebp+var_10]
.text:00000274                 xor     ecx, ecx
.text:00000276                 mov     [ebp+var_9C], eax
.text:0000027C                 mov     [ebp+var_98], ecx
.text:00000282                 mov     edx, [ebp+var_74]
.text:00000285                 cmp     edx, [ebp+var_98]
.text:0000028B                 ja      short loc_2AA
.text:0000028D                 jb      short loc_29A
.text:0000028F                 mov     eax, [ebp+var_78]
.text:00000292                 cmp     eax, [ebp+var_9C]
.text:00000298                 jnb     short loc_2AA
.text:0000029A
.text:0000029A loc_29A:                                ; CODE XREF: Lzma2EncProps_Normalize(x)+24Dj
.text:0000029A                 mov     ecx, [ebp+var_78]
.text:0000029D                 mov     [ebp+var_10], ecx
.text:000002A0                 mov     edx, [ebp+var_8]
.text:000002A3                 imul    edx, [ebp+var_10]
.text:000002A7                 mov     [ebp+var_14], edx
.text:000002AA
.text:000002AA loc_2AA:                                ; CODE XREF: Lzma2EncProps_Normalize(x)+1CAj
.text:000002AA                                         ; Lzma2EncProps_Normalize(x)+202j ...
.text:000002AA                 mov     eax, [ebp+arg_0]
.text:000002AD                 mov     ecx, [ebp+var_10]
.text:000002B0                 mov     [eax+3Ch], ecx
.text:000002B3                 mov     edx, [ebp+arg_0]
.text:000002B6                 mov     eax, [ebp+var_14]
.text:000002B9                 mov     [edx+40h], eax
.text:000002BC                 push    edx
.text:000002BD                 mov     ecx, ebp
.text:000002BF                 push    eax
.text:000002C0                 lea     edx, $LN28
.text:000002C6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000002CB                 pop     eax
.text:000002CC                 pop     edx
.text:000002CD                 pop     edi
.text:000002CE                 pop     esi
.text:000002CF                 mov     ecx, [ebp+var_4]
.text:000002D2                 xor     ecx, ebp
.text:000002D4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000002D9                 add     esp, 9Ch
.text:000002DF                 cmp     ebp, esp
.text:000002E1                 call    __RTC_CheckEsp
.text:000002E6                 mov     esp, ebp
.text:000002E8                 pop     ebp
.text:000002E9                 retn    4
.text:000002E9 _Lzma2EncProps_Normalize@4 endp
.text:000002E9
.text:000002E9 ; ---------------------------------------------------------------------------
.text:000002EC $LN28           dd 1                    ; DATA XREF: Lzma2EncProps_Normalize(x)+280o
.text:000002F0                 dd offset $LN27
.text:000002F4 $LN27           dd 0FFFFFFB0h, 38h      ; DATA XREF: .text:000002F0o
.text:000002FC                 dd offset $LN26         ; "lzmaProps"
.text:00000300 $LN26           db 'lzmaProps',0        ; DATA XREF: .text:000002FCo
.text:0000030A                 align 10h
.text:00000310
.text:00000310 ; =============== S U B R O U T I N E =======================================
.text:00000310
.text:00000310 ; Attributes: bp-based frame
.text:00000310
.text:00000310 ; __stdcall Lzma2Enc_Create(x, x)
.text:00000310                 public _Lzma2Enc_Create@8
.text:00000310 _Lzma2Enc_Create@8 proc near
.text:00000310
.text:00000310 var_8           = dword ptr -8
.text:00000310 var_4           = dword ptr -4
.text:00000310 arg_0           = dword ptr  8
.text:00000310 arg_4           = dword ptr  0Ch
.text:00000310
.text:00000310                 push    ebp
.text:00000311                 mov     ebp, esp
.text:00000313                 sub     esp, 8
.text:00000316                 push    esi
.text:00000317                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000031E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000325                 mov     esi, esp
.text:00000327                 push    0F50h
.text:0000032C                 mov     eax, [ebp+arg_0]
.text:0000032F                 push    eax
.text:00000330                 mov     ecx, [ebp+arg_0]
.text:00000333                 mov     edx, [ecx]
.text:00000335                 call    edx
.text:00000337                 cmp     esi, esp
.text:00000339                 call    __RTC_CheckEsp
.text:0000033E                 mov     [ebp+var_4], eax
.text:00000341                 cmp     [ebp+var_4], 0
.text:00000345                 jnz     short loc_34B
.text:00000347                 xor     eax, eax
.text:00000349                 jmp     short loc_3BC
.text:0000034B ; ---------------------------------------------------------------------------
.text:0000034B
.text:0000034B loc_34B:                                ; CODE XREF: Lzma2Enc_Create(x,x)+35j
.text:0000034B                 mov     eax, [ebp+var_4]
.text:0000034E                 add     eax, 8
.text:00000351                 push    eax
.text:00000352                 call    _Lzma2EncProps_Init@4 ; Lzma2EncProps_Init(x)
.text:00000357                 mov     ecx, [ebp+var_4]
.text:0000035A                 add     ecx, 8
.text:0000035D                 push    ecx
.text:0000035E                 call    _Lzma2EncProps_Normalize@4 ; Lzma2EncProps_Normalize(x)
.text:00000363                 mov     edx, [ebp+var_4]
.text:00000366                 mov     dword ptr [edx+50h], 0
.text:0000036D                 mov     eax, [ebp+var_4]
.text:00000370                 mov     ecx, [ebp+arg_0]
.text:00000373                 mov     [eax+54h], ecx
.text:00000376                 mov     edx, [ebp+var_4]
.text:00000379                 mov     eax, [ebp+arg_4]
.text:0000037C                 mov     [edx+58h], eax
.text:0000037F                 mov     [ebp+var_8], 0
.text:00000386                 jmp     short loc_391
.text:00000388 ; ---------------------------------------------------------------------------
.text:00000388
.text:00000388 loc_388:                                ; CODE XREF: Lzma2Enc_Create(x,x)+98j
.text:00000388                 mov     ecx, [ebp+var_8]
.text:0000038B                 add     ecx, 1
.text:0000038E                 mov     [ebp+var_8], ecx
.text:00000391
.text:00000391 loc_391:                                ; CODE XREF: Lzma2Enc_Create(x,x)+76j
.text:00000391                 cmp     [ebp+var_8], 20h ; ' '
.text:00000395                 jnb     short loc_3AA
.text:00000397                 mov     edx, [ebp+var_8]
.text:0000039A                 shl     edx, 5
.text:0000039D                 mov     eax, [ebp+var_4]
.text:000003A0                 mov     dword ptr [eax+edx+60h], 0
.text:000003A8                 jmp     short loc_388
.text:000003AA ; ---------------------------------------------------------------------------
.text:000003AA
.text:000003AA loc_3AA:                                ; CODE XREF: Lzma2Enc_Create(x,x)+85j
.text:000003AA                 mov     ecx, [ebp+var_4]
.text:000003AD                 add     ecx, 460h
.text:000003B3                 push    ecx
.text:000003B4                 call    _MtCoder_Construct@4 ; MtCoder_Construct(x)
.text:000003B9                 mov     eax, [ebp+var_4]
.text:000003BC
.text:000003BC loc_3BC:                                ; CODE XREF: Lzma2Enc_Create(x,x)+39j
.text:000003BC                 pop     esi
.text:000003BD                 add     esp, 8
.text:000003C0                 cmp     ebp, esp
.text:000003C2                 call    __RTC_CheckEsp
.text:000003C7                 mov     esp, ebp
.text:000003C9                 pop     ebp
.text:000003CA                 retn    8
.text:000003CA _Lzma2Enc_Create@8 endp
.text:000003CA
.text:000003CA ; ---------------------------------------------------------------------------
.text:000003CD                 align 10h
.text:000003D0
.text:000003D0 ; =============== S U B R O U T I N E =======================================
.text:000003D0
.text:000003D0 ; Attributes: bp-based frame
.text:000003D0
.text:000003D0 ; __stdcall Lzma2Enc_Destroy(x)
.text:000003D0                 public _Lzma2Enc_Destroy@4
.text:000003D0 _Lzma2Enc_Destroy@4 proc near
.text:000003D0
.text:000003D0 var_C           = dword ptr -0Ch
.text:000003D0 var_8           = dword ptr -8
.text:000003D0 var_4           = dword ptr -4
.text:000003D0 arg_0           = dword ptr  8
.text:000003D0
.text:000003D0                 push    ebp
.text:000003D1                 mov     ebp, esp
.text:000003D3                 sub     esp, 0Ch
.text:000003D6                 push    esi
.text:000003D7                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000003DE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000003E5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003EC                 mov     eax, [ebp+arg_0]
.text:000003EF                 mov     [ebp+var_4], eax
.text:000003F2                 mov     [ebp+var_8], 0
.text:000003F9                 jmp     short loc_404
.text:000003FB ; ---------------------------------------------------------------------------
.text:000003FB
.text:000003FB loc_3FB:                                ; CODE XREF: Lzma2Enc_Destroy(x):loc_444j
.text:000003FB                 mov     ecx, [ebp+var_8]
.text:000003FE                 add     ecx, 1
.text:00000401                 mov     [ebp+var_8], ecx
.text:00000404
.text:00000404 loc_404:                                ; CODE XREF: Lzma2Enc_Destroy(x)+29j
.text:00000404                 cmp     [ebp+var_8], 20h ; ' '
.text:00000408                 jnb     short loc_446
.text:0000040A                 mov     edx, [ebp+var_8]
.text:0000040D                 shl     edx, 5
.text:00000410                 mov     eax, [ebp+var_4]
.text:00000413                 lea     ecx, [eax+edx+60h]
.text:00000417                 mov     [ebp+var_C], ecx
.text:0000041A                 mov     edx, [ebp+var_C]
.text:0000041D                 cmp     dword ptr [edx], 0
.text:00000420                 jz      short loc_444
.text:00000422                 mov     eax, [ebp+var_4]
.text:00000425                 mov     ecx, [eax+58h]
.text:00000428                 push    ecx
.text:00000429                 mov     edx, [ebp+var_4]
.text:0000042C                 mov     eax, [edx+54h]
.text:0000042F                 push    eax
.text:00000430                 mov     ecx, [ebp+var_C]
.text:00000433                 mov     edx, [ecx]
.text:00000435                 push    edx
.text:00000436                 call    _LzmaEnc_Destroy@12 ; LzmaEnc_Destroy(x,x,x)
.text:0000043B                 mov     eax, [ebp+var_C]
.text:0000043E                 mov     dword ptr [eax], 0
.text:00000444
.text:00000444 loc_444:                                ; CODE XREF: Lzma2Enc_Destroy(x)+50j
.text:00000444                 jmp     short loc_3FB
.text:00000446 ; ---------------------------------------------------------------------------
.text:00000446
.text:00000446 loc_446:                                ; CODE XREF: Lzma2Enc_Destroy(x)+38j
.text:00000446                 mov     ecx, [ebp+var_4]
.text:00000449                 add     ecx, 460h
.text:0000044F                 push    ecx
.text:00000450                 call    _MtCoder_Destruct@4 ; MtCoder_Destruct(x)
.text:00000455                 mov     esi, esp
.text:00000457                 mov     edx, [ebp+var_4]
.text:0000045A                 mov     eax, [edx+50h]
.text:0000045D                 push    eax
.text:0000045E                 mov     ecx, [ebp+var_4]
.text:00000461                 mov     edx, [ecx+54h]
.text:00000464                 push    edx
.text:00000465                 mov     eax, [ebp+var_4]
.text:00000468                 mov     ecx, [eax+54h]
.text:0000046B                 mov     edx, [ecx+4]
.text:0000046E                 call    edx
.text:00000470                 cmp     esi, esp
.text:00000472                 call    __RTC_CheckEsp
.text:00000477                 mov     esi, esp
.text:00000479                 mov     eax, [ebp+arg_0]
.text:0000047C                 push    eax
.text:0000047D                 mov     ecx, [ebp+var_4]
.text:00000480                 mov     edx, [ecx+54h]
.text:00000483                 push    edx
.text:00000484                 mov     eax, [ebp+var_4]
.text:00000487                 mov     ecx, [eax+54h]
.text:0000048A                 mov     edx, [ecx+4]
.text:0000048D                 call    edx
.text:0000048F                 cmp     esi, esp
.text:00000491                 call    __RTC_CheckEsp
.text:00000496                 pop     esi
.text:00000497                 add     esp, 0Ch
.text:0000049A                 cmp     ebp, esp
.text:0000049C                 call    __RTC_CheckEsp
.text:000004A1                 mov     esp, ebp
.text:000004A3                 pop     ebp
.text:000004A4                 retn    4
.text:000004A4 _Lzma2Enc_Destroy@4 endp
.text:000004A4
.text:000004A4 ; ---------------------------------------------------------------------------
.text:000004A7                 align 10h
.text:000004B0
.text:000004B0 ; =============== S U B R O U T I N E =======================================
.text:000004B0
.text:000004B0 ; Attributes: bp-based frame
.text:000004B0
.text:000004B0 ; __stdcall Lzma2Enc_SetProps(x, x)
.text:000004B0                 public _Lzma2Enc_SetProps@8
.text:000004B0 _Lzma2Enc_SetProps@8 proc near
.text:000004B0
.text:000004B0 var_48          = byte ptr -48h
.text:000004B0 var_44          = byte ptr -44h
.text:000004B0 var_34          = dword ptr -34h
.text:000004B0 var_30          = dword ptr -30h
.text:000004B0 var_8           = dword ptr -8
.text:000004B0 var_4           = dword ptr -4
.text:000004B0 arg_0           = dword ptr  8
.text:000004B0 arg_4           = dword ptr  0Ch
.text:000004B0
.text:000004B0                 push    ebp
.text:000004B1                 mov     ebp, esp
.text:000004B3                 sub     esp, 48h
.text:000004B6                 push    esi
.text:000004B7                 push    edi
.text:000004B8                 lea     edi, [ebp+var_48]
.text:000004BB                 mov     ecx, 12h
.text:000004C0                 mov     eax, 0CCCCCCCCh
.text:000004C5                 rep stosd
.text:000004C7                 mov     eax, dword ptr ds:___security_cookie
.text:000004CC                 xor     eax, ebp
.text:000004CE                 mov     [ebp+var_4], eax
.text:000004D1                 mov     eax, [ebp+arg_0]
.text:000004D4                 mov     [ebp+var_8], eax
.text:000004D7                 mov     esi, [ebp+arg_4]
.text:000004DA                 mov     ecx, 0Eh
.text:000004DF                 lea     edi, [ebp+var_44]
.text:000004E2                 rep movsd
.text:000004E4                 lea     ecx, [ebp+var_44]
.text:000004E7                 push    ecx
.text:000004E8                 call    _LzmaEncProps_Normalize@4 ; LzmaEncProps_Normalize(x)
.text:000004ED                 mov     edx, [ebp+var_34]
.text:000004F0                 add     edx, [ebp+var_30]
.text:000004F3                 cmp     edx, 4
.text:000004F6                 jle     short loc_4FF
.text:000004F8                 mov     eax, 5
.text:000004FD                 jmp     short loc_51D
.text:000004FF ; ---------------------------------------------------------------------------
.text:000004FF
.text:000004FF loc_4FF:                                ; CODE XREF: Lzma2Enc_SetProps(x,x)+46j
.text:000004FF                 mov     esi, [ebp+arg_4]
.text:00000502                 mov     edi, [ebp+var_8]
.text:00000505                 add     edi, 8
.text:00000508                 mov     ecx, 12h
.text:0000050D                 rep movsd
.text:0000050F                 mov     eax, [ebp+var_8]
.text:00000512                 add     eax, 8
.text:00000515                 push    eax
.text:00000516                 call    _Lzma2EncProps_Normalize@4 ; Lzma2EncProps_Normalize(x)
.text:0000051B                 xor     eax, eax
.text:0000051D
.text:0000051D loc_51D:                                ; CODE XREF: Lzma2Enc_SetProps(x,x)+4Dj
.text:0000051D                 push    edx
.text:0000051E                 mov     ecx, ebp
.text:00000520                 push    eax
.text:00000521                 lea     edx, $LN6
.text:00000527                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000052C                 pop     eax
.text:0000052D                 pop     edx
.text:0000052E                 pop     edi
.text:0000052F                 pop     esi
.text:00000530                 mov     ecx, [ebp+var_4]
.text:00000533                 xor     ecx, ebp
.text:00000535                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000053A                 add     esp, 48h
.text:0000053D                 cmp     ebp, esp
.text:0000053F                 call    __RTC_CheckEsp
.text:00000544                 mov     esp, ebp
.text:00000546                 pop     ebp
.text:00000547                 retn    8
.text:00000547 _Lzma2Enc_SetProps@8 endp
.text:00000547
.text:00000547 ; ---------------------------------------------------------------------------
.text:0000054A                 align 4
.text:0000054C $LN6            dd 1                    ; DATA XREF: Lzma2Enc_SetProps(x,x)+71o
.text:00000550                 dd offset $LN5
.text:00000554 $LN5            dd 0FFFFFFBCh, 38h      ; DATA XREF: .text:00000550o
.text:0000055C                 dd offset $LN4          ; "lzmaProps"
.text:00000560 $LN4            db 'lzmaProps',0        ; DATA XREF: .text:0000055Co
.text:0000056A                 align 10h
.text:00000570
.text:00000570 ; =============== S U B R O U T I N E =======================================
.text:00000570
.text:00000570 ; Attributes: bp-based frame
.text:00000570
.text:00000570 ; __stdcall Lzma2Enc_WriteProperties(x)
.text:00000570                 public _Lzma2Enc_WriteProperties@4
.text:00000570 _Lzma2Enc_WriteProperties@4 proc near
.text:00000570
.text:00000570 var_C           = dword ptr -0Ch
.text:00000570 var_8           = dword ptr -8
.text:00000570 var_4           = dword ptr -4
.text:00000570 arg_0           = dword ptr  8
.text:00000570
.text:00000570                 push    ebp
.text:00000571                 mov     ebp, esp
.text:00000573                 sub     esp, 0Ch
.text:00000576                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000057D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000584                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000058B                 mov     eax, [ebp+arg_0]
.text:0000058E                 mov     [ebp+var_4], eax
.text:00000591                 mov     ecx, [ebp+var_4]
.text:00000594                 add     ecx, 8
.text:00000597                 push    ecx
.text:00000598                 call    _LzmaEncProps_GetDictSize@4 ; LzmaEncProps_GetDictSize(x)
.text:0000059D                 mov     [ebp+var_C], eax
.text:000005A0                 mov     [ebp+var_8], 0
.text:000005A7                 jmp     short loc_5B2
.text:000005A9 ; ---------------------------------------------------------------------------
.text:000005A9
.text:000005A9 loc_5A9:                                ; CODE XREF: Lzma2Enc_WriteProperties(x):loc_5D2j
.text:000005A9                 mov     edx, [ebp+var_8]
.text:000005AC                 add     edx, 1
.text:000005AF                 mov     [ebp+var_8], edx
.text:000005B2
.text:000005B2 loc_5B2:                                ; CODE XREF: Lzma2Enc_WriteProperties(x)+37j
.text:000005B2                 cmp     [ebp+var_8], 28h ; '('
.text:000005B6                 jnb     short loc_5D4
.text:000005B8                 mov     eax, [ebp+var_8]
.text:000005BB                 and     eax, 1
.text:000005BE                 or      eax, 2
.text:000005C1                 mov     ecx, [ebp+var_8]
.text:000005C4                 shr     ecx, 1
.text:000005C6                 add     ecx, 0Bh
.text:000005C9                 shl     eax, cl
.text:000005CB                 cmp     [ebp+var_C], eax
.text:000005CE                 ja      short loc_5D2
.text:000005D0                 jmp     short loc_5D4
.text:000005D2 ; ---------------------------------------------------------------------------
.text:000005D2
.text:000005D2 loc_5D2:                                ; CODE XREF: Lzma2Enc_WriteProperties(x)+5Ej
.text:000005D2                 jmp     short loc_5A9
.text:000005D4 ; ---------------------------------------------------------------------------
.text:000005D4
.text:000005D4 loc_5D4:                                ; CODE XREF: Lzma2Enc_WriteProperties(x)+46j
.text:000005D4                                         ; Lzma2Enc_WriteProperties(x)+60j
.text:000005D4                 mov     al, byte ptr [ebp+var_8]
.text:000005D7                 add     esp, 0Ch
.text:000005DA                 cmp     ebp, esp
.text:000005DC                 call    __RTC_CheckEsp
.text:000005E1                 mov     esp, ebp
.text:000005E3                 pop     ebp
.text:000005E4                 retn    4
.text:000005E4 _Lzma2Enc_WriteProperties@4 endp
.text:000005E4
.text:000005E4 ; ---------------------------------------------------------------------------
.text:000005E7                 align 10h
.text:000005F0
.text:000005F0 ; =============== S U B R O U T I N E =======================================
.text:000005F0
.text:000005F0 ; Attributes: bp-based frame
.text:000005F0
.text:000005F0 ; __stdcall Lzma2Enc_Encode(x, x, x, x)
.text:000005F0                 public _Lzma2Enc_Encode@16
.text:000005F0 _Lzma2Enc_Encode@16 proc near
.text:000005F0
.text:000005F0 var_1C          = dword ptr -1Ch
.text:000005F0 var_18          = dword ptr -18h
.text:000005F0 var_14          = dword ptr -14h
.text:000005F0 var_10          = dword ptr -10h
.text:000005F0 var_C           = dword ptr -0Ch
.text:000005F0 var_8           = dword ptr -8
.text:000005F0 var_4           = dword ptr -4
.text:000005F0 arg_0           = dword ptr  8
.text:000005F0 arg_4           = dword ptr  0Ch
.text:000005F0 arg_8           = dword ptr  10h
.text:000005F0 arg_C           = dword ptr  14h
.text:000005F0
.text:000005F0                 push    ebp
.text:000005F1                 mov     ebp, esp
.text:000005F3                 sub     esp, 1Ch
.text:000005F6                 mov     eax, 0CCCCCCCCh
.text:000005FB                 mov     [ebp+var_1C], eax
.text:000005FE                 mov     [ebp+var_18], eax
.text:00000601                 mov     [ebp+var_14], eax
.text:00000604                 mov     [ebp+var_10], eax
.text:00000607                 mov     [ebp+var_C], eax
.text:0000060A                 mov     [ebp+var_8], eax
.text:0000060D                 mov     [ebp+var_4], eax
.text:00000610                 mov     eax, [ebp+arg_0]
.text:00000613                 mov     [ebp+var_4], eax
.text:00000616                 mov     [ebp+var_8], 0
.text:0000061D                 jmp     short loc_628
.text:0000061F ; ---------------------------------------------------------------------------
.text:0000061F
.text:0000061F loc_61F:                                ; CODE XREF: Lzma2Enc_Encode(x,x,x,x):loc_66Ej
.text:0000061F                 mov     ecx, [ebp+var_8]
.text:00000622                 add     ecx, 1
.text:00000625                 mov     [ebp+var_8], ecx
.text:00000628
.text:00000628 loc_628:                                ; CODE XREF: Lzma2Enc_Encode(x,x,x,x)+2Dj
.text:00000628                 mov     edx, [ebp+var_4]
.text:0000062B                 mov     eax, [ebp+var_8]
.text:0000062E                 cmp     eax, [edx+44h]
.text:00000631                 jge     short loc_670
.text:00000633                 mov     ecx, [ebp+var_8]
.text:00000636                 shl     ecx, 5
.text:00000639                 mov     edx, [ebp+var_4]
.text:0000063C                 lea     eax, [edx+ecx+60h]
.text:00000640                 mov     [ebp+var_C], eax
.text:00000643                 mov     ecx, [ebp+var_C]
.text:00000646                 cmp     dword ptr [ecx], 0
.text:00000649                 jnz     short loc_66E
.text:0000064B                 mov     edx, [ebp+var_4]
.text:0000064E                 mov     eax, [edx+54h]
.text:00000651                 push    eax
.text:00000652                 call    _LzmaEnc_Create@4 ; LzmaEnc_Create(x)
.text:00000657                 mov     ecx, [ebp+var_C]
.text:0000065A                 mov     [ecx], eax
.text:0000065C                 mov     edx, [ebp+var_C]
.text:0000065F                 cmp     dword ptr [edx], 0
.text:00000662                 jnz     short loc_66E
.text:00000664                 mov     eax, 2
.text:00000669                 jmp     loc_72E
.text:0000066E ; ---------------------------------------------------------------------------
.text:0000066E
.text:0000066E loc_66E:                                ; CODE XREF: Lzma2Enc_Encode(x,x,x,x)+59j
.text:0000066E                                         ; Lzma2Enc_Encode(x,x,x,x)+72j
.text:0000066E                 jmp     short loc_61F
.text:00000670 ; ---------------------------------------------------------------------------
.text:00000670
.text:00000670 loc_670:                                ; CODE XREF: Lzma2Enc_Encode(x,x,x,x)+41j
.text:00000670                 mov     eax, [ebp+var_4]
.text:00000673                 cmp     dword ptr [eax+44h], 1
.text:00000677                 jg      short loc_69A
.text:00000679                 mov     ecx, [ebp+arg_C]
.text:0000067C                 push    ecx
.text:0000067D                 mov     edx, [ebp+arg_8]
.text:00000680                 push    edx
.text:00000681                 mov     eax, [ebp+arg_4]
.text:00000684                 push    eax
.text:00000685                 mov     ecx, [ebp+var_4]
.text:00000688                 push    ecx
.text:00000689                 mov     edx, [ebp+var_4]
.text:0000068C                 add     edx, 60h ; '`'
.text:0000068F                 push    edx
.text:00000690                 call    _Lzma2Enc_EncodeMt1@20 ; Lzma2Enc_EncodeMt1(x,x,x,x,x)
.text:00000695                 jmp     loc_72E
.text:0000069A ; ---------------------------------------------------------------------------
.text:0000069A
.text:0000069A loc_69A:                                ; CODE XREF: Lzma2Enc_Encode(x,x,x,x)+87j
.text:0000069A                 mov     [ebp+var_18], offset _MtCallbackImp_Code@28 ; MtCallbackImp_Code(x,x,x,x,x,x,x)
.text:000006A1                 mov     eax, [ebp+var_4]
.text:000006A4                 mov     [ebp+var_14], eax
.text:000006A7                 mov     ecx, [ebp+var_4]
.text:000006AA                 mov     edx, [ebp+arg_C]
.text:000006AD                 mov     [ecx+474h], edx
.text:000006B3                 mov     eax, [ebp+var_4]
.text:000006B6                 mov     ecx, [ebp+arg_8]
.text:000006B9                 mov     [eax+46Ch], ecx
.text:000006BF                 mov     edx, [ebp+var_4]
.text:000006C2                 mov     eax, [ebp+arg_4]
.text:000006C5                 mov     [edx+470h], eax
.text:000006CB                 mov     ecx, [ebp+var_4]
.text:000006CE                 mov     edx, [ebp+var_4]
.text:000006D1                 mov     eax, [edx+54h]
.text:000006D4                 mov     [ecx+478h], eax
.text:000006DA                 mov     ecx, [ebp+var_4]
.text:000006DD                 lea     edx, [ebp+var_18]
.text:000006E0                 mov     [ecx+47Ch], edx
.text:000006E6                 mov     eax, [ebp+var_4]
.text:000006E9                 mov     ecx, [ebp+var_4]
.text:000006EC                 mov     edx, [ecx+40h]
.text:000006EF                 mov     [eax+460h], edx
.text:000006F5                 mov     eax, [ebp+var_4]
.text:000006F8                 mov     ecx, [eax+40h]
.text:000006FB                 shr     ecx, 0Ah
.text:000006FE                 mov     edx, [ebp+var_4]
.text:00000701                 mov     eax, [edx+40h]
.text:00000704                 lea     ecx, [eax+ecx+10h]
.text:00000708                 mov     edx, [ebp+var_4]
.text:0000070B                 mov     [edx+464h], ecx
.text:00000711                 mov     eax, [ebp+var_4]
.text:00000714                 mov     ecx, [ebp+var_4]
.text:00000717                 mov     edx, [ecx+44h]
.text:0000071A                 mov     [eax+468h], edx
.text:00000720                 mov     eax, [ebp+var_4]
.text:00000723                 add     eax, 460h
.text:00000728                 push    eax
.text:00000729                 call    _MtCoder_Code@4 ; MtCoder_Code(x)
.text:0000072E
.text:0000072E loc_72E:                                ; CODE XREF: Lzma2Enc_Encode(x,x,x,x)+79j
.text:0000072E                                         ; Lzma2Enc_Encode(x,x,x,x)+A5j
.text:0000072E                 push    edx
.text:0000072F                 mov     ecx, ebp
.text:00000731                 push    eax
.text:00000732                 lea     edx, $LN11
.text:00000738                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000073D                 pop     eax
.text:0000073E                 pop     edx
.text:0000073F                 add     esp, 1Ch
.text:00000742                 cmp     ebp, esp
.text:00000744                 call    __RTC_CheckEsp
.text:00000749                 mov     esp, ebp
.text:0000074B                 pop     ebp
.text:0000074C                 retn    10h
.text:0000074C _Lzma2Enc_Encode@16 endp
.text:0000074C
.text:0000074C ; ---------------------------------------------------------------------------
.text:0000074F                 align 10h
.text:00000750 $LN11           dd 1                    ; DATA XREF: Lzma2Enc_Encode(x,x,x,x)+142o
.text:00000754                 dd offset $LN10
.text:00000758 $LN10           dd 0FFFFFFE8h, 8        ; DATA XREF: .text:00000754o
.text:00000760                 dd offset $LN9          ; "mtCallback"
.text:00000764 $LN9            db 'mtCallback',0       ; DATA XREF: .text:00000760o
.text:0000076F                 align 10h
.text:00000770
.text:00000770 ; =============== S U B R O U T I N E =======================================
.text:00000770
.text:00000770 ; Attributes: bp-based frame
.text:00000770
.text:00000770 ; __stdcall Lzma2Enc_EncodeMt1(x, x, x, x, x)
.text:00000770 _Lzma2Enc_EncodeMt1@20 proc near        ; CODE XREF: Lzma2Enc_Encode(x,x,x,x)+A0p
.text:00000770
.text:00000770 var_2C          = byte ptr -2Ch
.text:00000770 var_25          = byte ptr -25h
.text:00000770 var_1C          = dword ptr -1Ch
.text:00000770 var_14          = dword ptr -14h
.text:00000770 var_10          = dword ptr -10h
.text:00000770 var_C           = dword ptr -0Ch
.text:00000770 var_8           = dword ptr -8
.text:00000770 var_4           = dword ptr -4
.text:00000770 arg_0           = dword ptr  8
.text:00000770 arg_4           = dword ptr  0Ch
.text:00000770 arg_8           = dword ptr  10h
.text:00000770 arg_C           = dword ptr  14h
.text:00000770 arg_10          = dword ptr  18h
.text:00000770
.text:00000770                 push    ebp
.text:00000771                 mov     ebp, esp
.text:00000773                 sub     esp, 2Ch
.text:00000776                 push    esi
.text:00000777                 push    edi
.text:00000778                 lea     edi, [ebp+var_2C]
.text:0000077B                 mov     ecx, 0Bh
.text:00000780                 mov     eax, 0CCCCCCCCh
.text:00000785                 rep stosd
.text:00000787                 mov     [ebp+var_8], 0
.text:0000078E                 mov     [ebp+var_4], 0
.text:00000795                 mov     [ebp+var_C], 0
.text:0000079C                 mov     eax, [ebp+arg_4]
.text:0000079F                 cmp     dword ptr [eax+50h], 0
.text:000007A3                 jnz     short loc_7DD
.text:000007A5                 mov     esi, esp
.text:000007A7                 push    10010h
.text:000007AC                 mov     ecx, [ebp+arg_4]
.text:000007AF                 mov     edx, [ecx+54h]
.text:000007B2                 push    edx
.text:000007B3                 mov     eax, [ebp+arg_4]
.text:000007B6                 mov     ecx, [eax+54h]
.text:000007B9                 mov     edx, [ecx]
.text:000007BB                 call    edx
.text:000007BD                 cmp     esi, esp
.text:000007BF                 call    __RTC_CheckEsp
.text:000007C4                 mov     ecx, [ebp+arg_4]
.text:000007C7                 mov     [ecx+50h], eax
.text:000007CA                 mov     edx, [ebp+arg_4]
.text:000007CD                 cmp     dword ptr [edx+50h], 0
.text:000007D1                 jnz     short loc_7DD
.text:000007D3                 mov     eax, 2
.text:000007D8                 jmp     loc_8DB
.text:000007DD ; ---------------------------------------------------------------------------
.text:000007DD
.text:000007DD loc_7DD:                                ; CODE XREF: Lzma2Enc_EncodeMt1(x,x,x,x,x)+33j
.text:000007DD                                         ; Lzma2Enc_EncodeMt1(x,x,x,x,x)+61j
.text:000007DD                 mov     eax, [ebp+arg_4]
.text:000007E0                 add     eax, 8
.text:000007E3                 push    eax
.text:000007E4                 mov     ecx, [ebp+arg_0]
.text:000007E7                 push    ecx
.text:000007E8                 call    _Lzma2EncInt_Init@8 ; Lzma2EncInt_Init(x,x)
.text:000007ED                 mov     [ebp+var_10], eax
.text:000007F0                 cmp     [ebp+var_10], 0
.text:000007F4                 jz      short loc_7FE
.text:000007F6                 mov     eax, [ebp+var_10]
.text:000007F9                 jmp     loc_8DB
.text:000007FE ; ---------------------------------------------------------------------------
.text:000007FE
.text:000007FE loc_7FE:                                ; CODE XREF: Lzma2Enc_EncodeMt1(x,x,x,x,x)+84j
.text:000007FE                 mov     edx, [ebp+arg_4]
.text:00000801                 mov     eax, [edx+58h]
.text:00000804                 push    eax
.text:00000805                 mov     ecx, [ebp+arg_4]
.text:00000808                 mov     edx, [ecx+54h]
.text:0000080B                 push    edx
.text:0000080C                 push    200000h
.text:00000811                 mov     eax, [ebp+arg_C]
.text:00000814                 push    eax
.text:00000815                 mov     ecx, [ebp+arg_0]
.text:00000818                 mov     edx, [ecx]
.text:0000081A                 push    edx
.text:0000081B                 call    _LzmaEnc_PrepareForLzma2@20 ; LzmaEnc_PrepareForLzma2(x,x,x,x,x)
.text:00000820                 mov     [ebp+var_14], eax
.text:00000823                 cmp     [ebp+var_14], 0
.text:00000827                 jz      short loc_831
.text:00000829                 mov     eax, [ebp+var_14]
.text:0000082C                 jmp     loc_8DB
.text:00000831 ; ---------------------------------------------------------------------------
.text:00000831
.text:00000831 loc_831:                                ; CODE XREF: Lzma2Enc_EncodeMt1(x,x,x,x,x)+B7j
.text:00000831                                         ; Lzma2Enc_EncodeMt1(x,x,x,x,x):loc_89Bj
.text:00000831                 mov     [ebp+var_1C], 10010h
.text:00000838                 mov     eax, [ebp+arg_8]
.text:0000083B                 push    eax
.text:0000083C                 lea     ecx, [ebp+var_1C]
.text:0000083F                 push    ecx
.text:00000840                 mov     edx, [ebp+arg_4]
.text:00000843                 mov     eax, [edx+50h]
.text:00000846                 push    eax
.text:00000847                 mov     ecx, [ebp+arg_0]
.text:0000084A                 push    ecx
.text:0000084B                 call    _Lzma2EncInt_EncodeSubblock@16 ; Lzma2EncInt_EncodeSubblock(x,x,x,x)
.text:00000850                 mov     [ebp+var_C], eax
.text:00000853                 cmp     [ebp+var_C], 0
.text:00000857                 jz      short loc_85B
.text:00000859                 jmp     short loc_89D
.text:0000085B ; ---------------------------------------------------------------------------
.text:0000085B
.text:0000085B loc_85B:                                ; CODE XREF: Lzma2Enc_EncodeMt1(x,x,x,x,x)+E7j
.text:0000085B                 mov     edx, [ebp+var_1C]
.text:0000085E                 xor     eax, eax
.text:00000860                 add     edx, [ebp+var_8]
.text:00000863                 adc     eax, [ebp+var_4]
.text:00000866                 mov     [ebp+var_8], edx
.text:00000869                 mov     [ebp+var_4], eax
.text:0000086C                 mov     ecx, [ebp+var_4]
.text:0000086F                 push    ecx
.text:00000870                 mov     edx, [ebp+var_8]
.text:00000873                 push    edx
.text:00000874                 mov     eax, [ebp+arg_0]
.text:00000877                 mov     ecx, [eax+0Ch]
.text:0000087A                 push    ecx
.text:0000087B                 mov     edx, [eax+8]
.text:0000087E                 push    edx
.text:0000087F                 mov     eax, [ebp+arg_10]
.text:00000882                 push    eax
.text:00000883                 call    _Progress@20    ; Progress(x,x,x,x,x)
.text:00000888                 mov     [ebp+var_C], eax
.text:0000088B                 cmp     [ebp+var_C], 0
.text:0000088F                 jz      short loc_893
.text:00000891                 jmp     short loc_89D
.text:00000893 ; ---------------------------------------------------------------------------
.text:00000893
.text:00000893 loc_893:                                ; CODE XREF: Lzma2Enc_EncodeMt1(x,x,x,x,x)+11Fj
.text:00000893                 cmp     [ebp+var_1C], 0
.text:00000897                 jnz     short loc_89B
.text:00000899                 jmp     short loc_89D
.text:0000089B ; ---------------------------------------------------------------------------
.text:0000089B
.text:0000089B loc_89B:                                ; CODE XREF: Lzma2Enc_EncodeMt1(x,x,x,x,x)+127j
.text:0000089B                 jmp     short loc_831
.text:0000089D ; ---------------------------------------------------------------------------
.text:0000089D
.text:0000089D loc_89D:                                ; CODE XREF: Lzma2Enc_EncodeMt1(x,x,x,x,x)+E9j
.text:0000089D                                         ; Lzma2Enc_EncodeMt1(x,x,x,x,x)+121j ...
.text:0000089D                 mov     ecx, [ebp+arg_0]
.text:000008A0                 mov     edx, [ecx]
.text:000008A2                 push    edx
.text:000008A3                 call    _LzmaEnc_Finish@4 ; LzmaEnc_Finish(x)
.text:000008A8                 cmp     [ebp+var_C], 0
.text:000008AC                 jnz     short loc_8D8
.text:000008AE                 mov     [ebp+var_25], 0
.text:000008B2                 mov     esi, esp
.text:000008B4                 push    1
.text:000008B6                 lea     eax, [ebp+var_25]
.text:000008B9                 push    eax
.text:000008BA                 mov     ecx, [ebp+arg_8]
.text:000008BD                 push    ecx
.text:000008BE                 mov     edx, [ebp+arg_8]
.text:000008C1                 mov     eax, [edx]
.text:000008C3                 call    eax
.text:000008C5                 cmp     esi, esp
.text:000008C7                 call    __RTC_CheckEsp
.text:000008CC                 cmp     eax, 1
.text:000008CF                 jz      short loc_8D8
.text:000008D1                 mov     eax, 9
.text:000008D6                 jmp     short loc_8DB
.text:000008D8 ; ---------------------------------------------------------------------------
.text:000008D8
.text:000008D8 loc_8D8:                                ; CODE XREF: Lzma2Enc_EncodeMt1(x,x,x,x,x)+13Cj
.text:000008D8                                         ; Lzma2Enc_EncodeMt1(x,x,x,x,x)+15Fj
.text:000008D8                 mov     eax, [ebp+var_C]
.text:000008DB
.text:000008DB loc_8DB:                                ; CODE XREF: Lzma2Enc_EncodeMt1(x,x,x,x,x)+68j
.text:000008DB                                         ; Lzma2Enc_EncodeMt1(x,x,x,x,x)+89j ...
.text:000008DB                 push    edx
.text:000008DC                 mov     ecx, ebp
.text:000008DE                 push    eax
.text:000008DF                 lea     edx, $LN17
.text:000008E5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000008EA                 pop     eax
.text:000008EB                 pop     edx
.text:000008EC                 pop     edi
.text:000008ED                 pop     esi
.text:000008EE                 add     esp, 2Ch
.text:000008F1                 cmp     ebp, esp
.text:000008F3                 call    __RTC_CheckEsp
.text:000008F8                 mov     esp, ebp
.text:000008FA                 pop     ebp
.text:000008FB                 retn    14h
.text:000008FB _Lzma2Enc_EncodeMt1@20 endp
.text:000008FB
.text:000008FB ; ---------------------------------------------------------------------------
.text:000008FE                 align 10h
.text:00000900 $LN17           dd 2                    ; DATA XREF: Lzma2Enc_EncodeMt1(x,x,x,x,x)+16Fo
.text:00000904                 dd offset $LN16
.text:00000908 $LN16           dd 0FFFFFFE4h, 4        ; DATA XREF: .text:00000904o
.text:00000910                 dd offset $LN14         ; "packSize"
.text:00000914                 dd 0FFFFFFDBh, 1
.text:0000091C                 dd offset $LN15
.text:00000920 $LN15           db 62h, 0               ; DATA XREF: .text:0000091Co
.text:00000922 $LN14           db 'packSize',0         ; DATA XREF: .text:00000910o
.text:0000092B                 align 10h
.text:00000930
.text:00000930 ; =============== S U B R O U T I N E =======================================
.text:00000930
.text:00000930 ; Attributes: bp-based frame
.text:00000930
.text:00000930 ; __stdcall Lzma2EncInt_Init(x, x)
.text:00000930 _Lzma2EncInt_Init@8 proc near           ; CODE XREF: Lzma2Enc_EncodeMt1(x,x,x,x,x)+78p
.text:00000930                                         ; MtCallbackImp_Code(x,x,x,x,x,x,x)+62p
.text:00000930
.text:00000930 var_28          = dword ptr -28h
.text:00000930 var_24          = dword ptr -24h
.text:00000930 var_1C          = dword ptr -1Ch
.text:00000930 var_10          = byte ptr -10h
.text:00000930 var_4           = dword ptr -4
.text:00000930 arg_0           = dword ptr  8
.text:00000930 arg_4           = dword ptr  0Ch
.text:00000930
.text:00000930                 push    ebp
.text:00000931                 mov     ebp, esp
.text:00000933                 sub     esp, 28h
.text:00000936                 push    edi
.text:00000937                 lea     edi, [ebp+var_28]
.text:0000093A                 mov     ecx, 0Ah
.text:0000093F                 mov     eax, 0CCCCCCCCh
.text:00000944                 rep stosd
.text:00000946                 mov     eax, dword ptr ds:___security_cookie
.text:0000094B                 xor     eax, ebp
.text:0000094D                 mov     [ebp+var_4], eax
.text:00000950                 mov     [ebp+var_1C], 5
.text:00000957                 mov     eax, [ebp+arg_4]
.text:0000095A                 push    eax
.text:0000095B                 mov     ecx, [ebp+arg_0]
.text:0000095E                 mov     edx, [ecx]
.text:00000960                 push    edx
.text:00000961                 call    _LzmaEnc_SetProps@8 ; LzmaEnc_SetProps(x,x)
.text:00000966                 mov     [ebp+var_24], eax
.text:00000969                 cmp     [ebp+var_24], 0
.text:0000096D                 jz      short loc_974
.text:0000096F                 mov     eax, [ebp+var_24]
.text:00000972                 jmp     short loc_9C5
.text:00000974 ; ---------------------------------------------------------------------------
.text:00000974
.text:00000974 loc_974:                                ; CODE XREF: Lzma2EncInt_Init(x,x)+3Dj
.text:00000974                 lea     eax, [ebp+var_1C]
.text:00000977                 push    eax
.text:00000978                 lea     ecx, [ebp+var_10]
.text:0000097B                 push    ecx
.text:0000097C                 mov     edx, [ebp+arg_0]
.text:0000097F                 mov     eax, [edx]
.text:00000981                 push    eax
.text:00000982                 call    _LzmaEnc_WriteProperties@12 ; LzmaEnc_WriteProperties(x,x,x)
.text:00000987                 mov     [ebp+var_28], eax
.text:0000098A                 cmp     [ebp+var_28], 0
.text:0000098E                 jz      short loc_995
.text:00000990                 mov     eax, [ebp+var_28]
.text:00000993                 jmp     short loc_9C5
.text:00000995 ; ---------------------------------------------------------------------------
.text:00000995
.text:00000995 loc_995:                                ; CODE XREF: Lzma2EncInt_Init(x,x)+5Ej
.text:00000995                 mov     ecx, [ebp+arg_0]
.text:00000998                 mov     dword ptr [ecx+8], 0
.text:0000099F                 mov     dword ptr [ecx+0Ch], 0
.text:000009A6                 mov     edx, [ebp+arg_0]
.text:000009A9                 mov     al, [ebp+var_10]
.text:000009AC                 mov     [edx+10h], al
.text:000009AF                 mov     ecx, [ebp+arg_0]
.text:000009B2                 mov     dword ptr [ecx+14h], 1
.text:000009B9                 mov     edx, [ebp+arg_0]
.text:000009BC                 mov     dword ptr [edx+18h], 1
.text:000009C3                 xor     eax, eax
.text:000009C5
.text:000009C5 loc_9C5:                                ; CODE XREF: Lzma2EncInt_Init(x,x)+42j
.text:000009C5                                         ; Lzma2EncInt_Init(x,x)+63j
.text:000009C5                 push    edx
.text:000009C6                 mov     ecx, ebp
.text:000009C8                 push    eax
.text:000009C9                 lea     edx, $LN8
.text:000009CF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000009D4                 pop     eax
.text:000009D5                 pop     edx
.text:000009D6                 pop     edi
.text:000009D7                 mov     ecx, [ebp+var_4]
.text:000009DA                 xor     ecx, ebp
.text:000009DC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000009E1                 add     esp, 28h
.text:000009E4                 cmp     ebp, esp
.text:000009E6                 call    __RTC_CheckEsp
.text:000009EB                 mov     esp, ebp
.text:000009ED                 pop     ebp
.text:000009EE                 retn    8
.text:000009EE _Lzma2EncInt_Init@8 endp
.text:000009EE
.text:000009EE ; ---------------------------------------------------------------------------
.text:000009F1                 align 4
.text:000009F4 $LN8            dd 2                    ; DATA XREF: Lzma2EncInt_Init(x,x)+99o
.text:000009F8                 dd offset $LN7
.text:000009FC $LN7            dd 0FFFFFFF0h, 5        ; DATA XREF: .text:000009F8o
.text:00000A04                 dd offset $LN5_0        ; "propsEncoded"
.text:00000A08                 dd 0FFFFFFE4h, 4
.text:00000A10                 dd offset $LN6_0        ; "propsSize"
.text:00000A14 $LN6_0          db 'propsSize',0        ; DATA XREF: .text:00000A10o
.text:00000A1E $LN5_0          db 'propsEncoded',0     ; DATA XREF: .text:00000A04o
.text:00000A2B                 align 10h
.text:00000A30
.text:00000A30 ; =============== S U B R O U T I N E =======================================
.text:00000A30
.text:00000A30 ; Attributes: bp-based frame
.text:00000A30
.text:00000A30 ; __stdcall Lzma2EncInt_EncodeSubblock(x, x, x, x)
.text:00000A30 _Lzma2EncInt_EncodeSubblock@16 proc near
.text:00000A30                                         ; CODE XREF: Lzma2Enc_EncodeMt1(x,x,x,x,x)+DBp
.text:00000A30                                         ; MtCallbackImp_Code(x,x,x,x,x,x,x)+FEp
.text:00000A30
.text:00000A30 var_5C          = dword ptr -5Ch
.text:00000A30 var_58          = dword ptr -58h
.text:00000A30 var_54          = dword ptr -54h
.text:00000A30 var_50          = dword ptr -50h
.text:00000A30 var_4C          = dword ptr -4Ch
.text:00000A30 var_48          = dword ptr -48h
.text:00000A30 var_44          = dword ptr -44h
.text:00000A30 var_40          = dword ptr -40h
.text:00000A30 var_3C          = dword ptr -3Ch
.text:00000A30 var_38          = dword ptr -38h
.text:00000A30 var_34          = dword ptr -34h
.text:00000A30 Size            = dword ptr -30h
.text:00000A30 var_2C          = dword ptr -2Ch
.text:00000A30 var_28          = dword ptr -28h
.text:00000A30 var_24          = dword ptr -24h
.text:00000A30 var_20          = dword ptr -20h
.text:00000A30 var_18          = dword ptr -18h
.text:00000A30 var_C           = dword ptr -0Ch
.text:00000A30 var_4           = dword ptr -4
.text:00000A30 arg_0           = dword ptr  8
.text:00000A30 arg_4           = dword ptr  0Ch
.text:00000A30 arg_8           = dword ptr  10h
.text:00000A30 arg_C           = dword ptr  14h
.text:00000A30
.text:00000A30                 push    ebp
.text:00000A31                 mov     ebp, esp
.text:00000A33                 sub     esp, 5Ch
.text:00000A36                 push    esi
.text:00000A37                 push    edi
.text:00000A38                 lea     edi, [ebp+var_5C]
.text:00000A3B                 mov     ecx, 17h
.text:00000A40                 mov     eax, 0CCCCCCCCh
.text:00000A45                 rep stosd
.text:00000A47                 mov     eax, [ebp+arg_8]
.text:00000A4A                 mov     ecx, [eax]
.text:00000A4C                 mov     [ebp+var_4], ecx
.text:00000A4F                 mov     edx, [ebp+var_4]
.text:00000A52                 mov     [ebp+var_C], edx
.text:00000A55                 mov     [ebp+var_18], 200000h
.text:00000A5C                 mov     eax, [ebp+arg_0]
.text:00000A5F                 xor     ecx, ecx
.text:00000A61                 cmp     dword ptr [eax+18h], 0
.text:00000A65                 setnz   cl
.text:00000A68                 add     ecx, 5
.text:00000A6B                 mov     [ebp+var_20], ecx
.text:00000A6E                 mov     edx, [ebp+arg_8]
.text:00000A71                 mov     dword ptr [edx], 0
.text:00000A77                 mov     eax, [ebp+var_C]
.text:00000A7A                 cmp     eax, [ebp+var_20]
.text:00000A7D                 jnb     short loc_A89
.text:00000A7F                 mov     eax, 7
.text:00000A84                 jmp     loc_DFF
.text:00000A89 ; ---------------------------------------------------------------------------
.text:00000A89
.text:00000A89 loc_A89:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+4Dj
.text:00000A89                 mov     ecx, [ebp+var_C]
.text:00000A8C                 sub     ecx, [ebp+var_20]
.text:00000A8F                 mov     [ebp+var_C], ecx
.text:00000A92                 mov     edx, [ebp+arg_0]
.text:00000A95                 mov     eax, [edx]
.text:00000A97                 push    eax
.text:00000A98                 call    _LzmaEnc_SaveState@4 ; LzmaEnc_SaveState(x)
.text:00000A9D                 lea     ecx, [ebp+var_18]
.text:00000AA0                 push    ecx
.text:00000AA1                 push    10000h
.text:00000AA6                 lea     edx, [ebp+var_C]
.text:00000AA9                 push    edx
.text:00000AAA                 mov     eax, [ebp+arg_4]
.text:00000AAD                 add     eax, [ebp+var_20]
.text:00000AB0                 push    eax
.text:00000AB1                 mov     ecx, [ebp+arg_0]
.text:00000AB4                 mov     edx, [ecx+14h]
.text:00000AB7                 push    edx
.text:00000AB8                 mov     eax, [ebp+arg_0]
.text:00000ABB                 mov     ecx, [eax]
.text:00000ABD                 push    ecx
.text:00000ABE                 call    _LzmaEnc_CodeOneMemBlock@24 ; LzmaEnc_CodeOneMemBlock(x,x,x,x,x,x)
.text:00000AC3                 mov     [ebp+var_28], eax
.text:00000AC6                 cmp     [ebp+var_18], 0
.text:00000ACA                 jnz     short loc_AD4
.text:00000ACC                 mov     eax, [ebp+var_28]
.text:00000ACF                 jmp     loc_DFF
.text:00000AD4 ; ---------------------------------------------------------------------------
.text:00000AD4
.text:00000AD4 loc_AD4:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+9Aj
.text:00000AD4                 cmp     [ebp+var_28], 0
.text:00000AD8                 jnz     short loc_B06
.text:00000ADA                 mov     edx, [ebp+var_C]
.text:00000ADD                 add     edx, 2
.text:00000AE0                 cmp     edx, [ebp+var_18]
.text:00000AE3                 jnb     short loc_AF7
.text:00000AE5                 cmp     [ebp+var_C], 10000h
.text:00000AEC                 ja      short loc_AF7
.text:00000AEE                 mov     [ebp+var_44], 0
.text:00000AF5                 jmp     short loc_AFE
.text:00000AF7 ; ---------------------------------------------------------------------------
.text:00000AF7
.text:00000AF7 loc_AF7:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+B3j
.text:00000AF7                                         ; Lzma2EncInt_EncodeSubblock(x,x,x,x)+BCj
.text:00000AF7                 mov     [ebp+var_44], 1
.text:00000AFE
.text:00000AFE loc_AFE:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+C5j
.text:00000AFE                 mov     eax, [ebp+var_44]
.text:00000B01                 mov     [ebp+var_24], eax
.text:00000B04                 jmp     short loc_B22
.text:00000B06 ; ---------------------------------------------------------------------------
.text:00000B06
.text:00000B06 loc_B06:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+A8j
.text:00000B06                 cmp     [ebp+var_28], 7
.text:00000B0A                 jz      short loc_B14
.text:00000B0C                 mov     eax, [ebp+var_28]
.text:00000B0F                 jmp     loc_DFF
.text:00000B14 ; ---------------------------------------------------------------------------
.text:00000B14
.text:00000B14 loc_B14:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+DAj
.text:00000B14                 mov     [ebp+var_28], 0
.text:00000B1B                 mov     [ebp+var_24], 1
.text:00000B22
.text:00000B22 loc_B22:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+D4j
.text:00000B22                 cmp     [ebp+var_24], 0
.text:00000B26                 jz      loc_C8F
.text:00000B2C                 mov     [ebp+var_2C], 0
.text:00000B33
.text:00000B33 loc_B33:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x):loc_C78j
.text:00000B33                 cmp     [ebp+var_18], 0
.text:00000B37                 jbe     loc_C7D
.text:00000B3D                 cmp     [ebp+var_18], 10000h
.text:00000B44                 jnb     short loc_B4E
.text:00000B46                 mov     ecx, [ebp+var_18]
.text:00000B49                 mov     [ebp+var_48], ecx
.text:00000B4C                 jmp     short loc_B55
.text:00000B4E ; ---------------------------------------------------------------------------
.text:00000B4E
.text:00000B4E loc_B4E:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+114j
.text:00000B4E                 mov     [ebp+var_48], 10000h
.text:00000B55
.text:00000B55 loc_B55:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+11Cj
.text:00000B55                 mov     edx, [ebp+var_48]
.text:00000B58                 mov     [ebp+Size], edx
.text:00000B5B                 mov     eax, [ebp+var_4]
.text:00000B5E                 sub     eax, [ebp+var_2C]
.text:00000B61                 mov     ecx, [ebp+Size]
.text:00000B64                 add     ecx, 3
.text:00000B67                 cmp     eax, ecx
.text:00000B69                 jnb     short loc_B75
.text:00000B6B                 mov     eax, 7
.text:00000B70                 jmp     loc_DFF
.text:00000B75 ; ---------------------------------------------------------------------------
.text:00000B75
.text:00000B75 loc_B75:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+139j
.text:00000B75                 mov     edx, [ebp+arg_0]
.text:00000B78                 mov     [ebp+var_4C], edx
.text:00000B7B                 mov     eax, [ebp+var_4C]
.text:00000B7E                 mov     ecx, [ebp+var_4C]
.text:00000B81                 mov     edx, [eax+8]
.text:00000B84                 or      edx, [ecx+0Ch]
.text:00000B87                 jnz     short loc_B92
.text:00000B89                 mov     [ebp+var_50], 1
.text:00000B90                 jmp     short loc_B99
.text:00000B92 ; ---------------------------------------------------------------------------
.text:00000B92
.text:00000B92 loc_B92:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+157j
.text:00000B92                 mov     [ebp+var_50], 2
.text:00000B99
.text:00000B99 loc_B99:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+160j
.text:00000B99                 mov     eax, [ebp+arg_4]
.text:00000B9C                 add     eax, [ebp+var_2C]
.text:00000B9F                 mov     cl, byte ptr [ebp+var_50]
.text:00000BA2                 mov     [eax], cl
.text:00000BA4                 mov     edx, [ebp+var_2C]
.text:00000BA7                 add     edx, 1
.text:00000BAA                 mov     [ebp+var_2C], edx
.text:00000BAD                 mov     eax, [ebp+Size]
.text:00000BB0                 sub     eax, 1
.text:00000BB3                 shr     eax, 8
.text:00000BB6                 mov     ecx, [ebp+arg_4]
.text:00000BB9                 add     ecx, [ebp+var_2C]
.text:00000BBC                 mov     [ecx], al
.text:00000BBE                 mov     edx, [ebp+var_2C]
.text:00000BC1                 add     edx, 1
.text:00000BC4                 mov     [ebp+var_2C], edx
.text:00000BC7                 mov     eax, [ebp+Size]
.text:00000BCA                 sub     eax, 1
.text:00000BCD                 mov     ecx, [ebp+arg_4]
.text:00000BD0                 add     ecx, [ebp+var_2C]
.text:00000BD3                 mov     [ecx], al
.text:00000BD5                 mov     edx, [ebp+var_2C]
.text:00000BD8                 add     edx, 1
.text:00000BDB                 mov     [ebp+var_2C], edx
.text:00000BDE                 mov     eax, [ebp+Size]
.text:00000BE1                 push    eax             ; Size
.text:00000BE2                 mov     ecx, [ebp+arg_0]
.text:00000BE5                 mov     edx, [ecx]
.text:00000BE7                 push    edx
.text:00000BE8                 call    _LzmaEnc_GetCurBuf@4 ; LzmaEnc_GetCurBuf(x)
.text:00000BED                 sub     eax, [ebp+var_18]
.text:00000BF0                 push    eax             ; Src
.text:00000BF1                 mov     eax, [ebp+arg_4]
.text:00000BF4                 add     eax, [ebp+var_2C]
.text:00000BF7                 push    eax             ; Dst
.text:00000BF8                 call    _memcpy
.text:00000BFD                 add     esp, 0Ch
.text:00000C00                 mov     ecx, [ebp+var_18]
.text:00000C03                 sub     ecx, [ebp+Size]
.text:00000C06                 mov     [ebp+var_18], ecx
.text:00000C09                 mov     edx, [ebp+var_2C]
.text:00000C0C                 add     edx, [ebp+Size]
.text:00000C0F                 mov     [ebp+var_2C], edx
.text:00000C12                 mov     eax, [ebp+Size]
.text:00000C15                 xor     ecx, ecx
.text:00000C17                 mov     edx, [ebp+arg_0]
.text:00000C1A                 add     eax, [edx+8]
.text:00000C1D                 adc     ecx, [edx+0Ch]
.text:00000C20                 mov     edx, [ebp+arg_0]
.text:00000C23                 mov     [edx+8], eax
.text:00000C26                 mov     [edx+0Ch], ecx
.text:00000C29                 cmp     [ebp+arg_C], 0
.text:00000C2D                 jz      short loc_C70
.text:00000C2F                 mov     eax, [ebp+arg_8]
.text:00000C32                 mov     ecx, [eax]
.text:00000C34                 add     ecx, [ebp+var_2C]
.text:00000C37                 mov     edx, [ebp+arg_8]
.text:00000C3A                 mov     [edx], ecx
.text:00000C3C                 mov     esi, esp
.text:00000C3E                 mov     eax, [ebp+var_2C]
.text:00000C41                 push    eax
.text:00000C42                 mov     ecx, [ebp+arg_4]
.text:00000C45                 push    ecx
.text:00000C46                 mov     edx, [ebp+arg_C]
.text:00000C49                 push    edx
.text:00000C4A                 mov     eax, [ebp+arg_C]
.text:00000C4D                 mov     ecx, [eax]
.text:00000C4F                 call    ecx
.text:00000C51                 cmp     esi, esp
.text:00000C53                 call    __RTC_CheckEsp
.text:00000C58                 cmp     eax, [ebp+var_2C]
.text:00000C5B                 jz      short loc_C67
.text:00000C5D                 mov     eax, 9
.text:00000C62                 jmp     loc_DFF
.text:00000C67 ; ---------------------------------------------------------------------------
.text:00000C67
.text:00000C67 loc_C67:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+22Bj
.text:00000C67                 mov     [ebp+var_2C], 0
.text:00000C6E                 jmp     short loc_C78
.text:00000C70 ; ---------------------------------------------------------------------------
.text:00000C70
.text:00000C70 loc_C70:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+1FDj
.text:00000C70                 mov     edx, [ebp+arg_8]
.text:00000C73                 mov     eax, [ebp+var_2C]
.text:00000C76                 mov     [edx], eax
.text:00000C78
.text:00000C78 loc_C78:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+23Ej
.text:00000C78                 jmp     loc_B33
.text:00000C7D ; ---------------------------------------------------------------------------
.text:00000C7D
.text:00000C7D loc_C7D:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+107j
.text:00000C7D                 mov     ecx, [ebp+arg_0]
.text:00000C80                 mov     edx, [ecx]
.text:00000C82                 push    edx
.text:00000C83                 call    _LzmaEnc_RestoreState@4 ; LzmaEnc_RestoreState(x)
.text:00000C88                 xor     eax, eax
.text:00000C8A                 jmp     loc_DFF
.text:00000C8F ; ---------------------------------------------------------------------------
.text:00000C8F
.text:00000C8F loc_C8F:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+F6j
.text:00000C8F                 mov     [ebp+var_34], 0
.text:00000C96                 mov     eax, [ebp+var_18]
.text:00000C99                 sub     eax, 1
.text:00000C9C                 mov     [ebp+var_38], eax
.text:00000C9F                 mov     ecx, [ebp+var_C]
.text:00000CA2                 sub     ecx, 1
.text:00000CA5                 mov     [ebp+var_3C], ecx
.text:00000CA8                 mov     edx, [ebp+arg_0]
.text:00000CAB                 mov     [ebp+var_54], edx
.text:00000CAE                 mov     eax, [ebp+var_54]
.text:00000CB1                 mov     ecx, [ebp+var_54]
.text:00000CB4                 mov     edx, [eax+8]
.text:00000CB7                 or      edx, [ecx+0Ch]
.text:00000CBA                 jnz     short loc_CC5
.text:00000CBC                 mov     [ebp+var_58], 3
.text:00000CC3                 jmp     short loc_CEF
.text:00000CC5 ; ---------------------------------------------------------------------------
.text:00000CC5
.text:00000CC5 loc_CC5:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+28Aj
.text:00000CC5                 mov     eax, [ebp+arg_0]
.text:00000CC8                 cmp     dword ptr [eax+14h], 0
.text:00000CCC                 jz      short loc_CE2
.text:00000CCE                 mov     ecx, [ebp+arg_0]
.text:00000CD1                 xor     edx, edx
.text:00000CD3                 cmp     dword ptr [ecx+18h], 0
.text:00000CD7                 setnz   dl
.text:00000CDA                 add     edx, 1
.text:00000CDD                 mov     [ebp+var_5C], edx
.text:00000CE0                 jmp     short loc_CE9
.text:00000CE2 ; ---------------------------------------------------------------------------
.text:00000CE2
.text:00000CE2 loc_CE2:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+29Cj
.text:00000CE2                 mov     [ebp+var_5C], 0
.text:00000CE9
.text:00000CE9 loc_CE9:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+2B0j
.text:00000CE9                 mov     eax, [ebp+var_5C]
.text:00000CEC                 mov     [ebp+var_58], eax
.text:00000CEF
.text:00000CEF loc_CEF:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+293j
.text:00000CEF                 mov     ecx, [ebp+var_58]
.text:00000CF2                 mov     [ebp+var_40], ecx
.text:00000CF5                 mov     edx, [ebp+var_40]
.text:00000CF8                 shl     edx, 5
.text:00000CFB                 or      edx, 80h
.text:00000D01                 mov     eax, [ebp+var_38]
.text:00000D04                 shr     eax, 10h
.text:00000D07                 and     eax, 1Fh
.text:00000D0A                 or      edx, eax
.text:00000D0C                 mov     ecx, [ebp+arg_4]
.text:00000D0F                 add     ecx, [ebp+var_34]
.text:00000D12                 mov     [ecx], dl
.text:00000D14                 mov     edx, [ebp+var_34]
.text:00000D17                 add     edx, 1
.text:00000D1A                 mov     [ebp+var_34], edx
.text:00000D1D                 mov     eax, [ebp+var_38]
.text:00000D20                 shr     eax, 8
.text:00000D23                 mov     ecx, [ebp+arg_4]
.text:00000D26                 add     ecx, [ebp+var_34]
.text:00000D29                 mov     [ecx], al
.text:00000D2B                 mov     edx, [ebp+var_34]
.text:00000D2E                 add     edx, 1
.text:00000D31                 mov     [ebp+var_34], edx
.text:00000D34                 mov     eax, [ebp+arg_4]
.text:00000D37                 add     eax, [ebp+var_34]
.text:00000D3A                 mov     cl, byte ptr [ebp+var_38]
.text:00000D3D                 mov     [eax], cl
.text:00000D3F                 mov     edx, [ebp+var_34]
.text:00000D42                 add     edx, 1
.text:00000D45                 mov     [ebp+var_34], edx
.text:00000D48                 mov     eax, [ebp+var_3C]
.text:00000D4B                 shr     eax, 8
.text:00000D4E                 mov     ecx, [ebp+arg_4]
.text:00000D51                 add     ecx, [ebp+var_34]
.text:00000D54                 mov     [ecx], al
.text:00000D56                 mov     edx, [ebp+var_34]
.text:00000D59                 add     edx, 1
.text:00000D5C                 mov     [ebp+var_34], edx
.text:00000D5F                 mov     eax, [ebp+arg_4]
.text:00000D62                 add     eax, [ebp+var_34]
.text:00000D65                 mov     cl, byte ptr [ebp+var_3C]
.text:00000D68                 mov     [eax], cl
.text:00000D6A                 mov     edx, [ebp+var_34]
.text:00000D6D                 add     edx, 1
.text:00000D70                 mov     [ebp+var_34], edx
.text:00000D73                 mov     eax, [ebp+arg_0]
.text:00000D76                 cmp     dword ptr [eax+18h], 0
.text:00000D7A                 jz      short loc_D93
.text:00000D7C                 mov     ecx, [ebp+arg_4]
.text:00000D7F                 add     ecx, [ebp+var_34]
.text:00000D82                 mov     edx, [ebp+arg_0]
.text:00000D85                 mov     al, [edx+10h]
.text:00000D88                 mov     [ecx], al
.text:00000D8A                 mov     ecx, [ebp+var_34]
.text:00000D8D                 add     ecx, 1
.text:00000D90                 mov     [ebp+var_34], ecx
.text:00000D93
.text:00000D93 loc_D93:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+34Aj
.text:00000D93                 mov     edx, [ebp+arg_0]
.text:00000D96                 mov     dword ptr [edx+18h], 0
.text:00000D9D                 mov     eax, [ebp+arg_0]
.text:00000DA0                 mov     dword ptr [eax+14h], 0
.text:00000DA7                 mov     ecx, [ebp+var_34]
.text:00000DAA                 add     ecx, [ebp+var_C]
.text:00000DAD                 mov     [ebp+var_34], ecx
.text:00000DB0                 mov     edx, [ebp+var_18]
.text:00000DB3                 xor     eax, eax
.text:00000DB5                 mov     ecx, [ebp+arg_0]
.text:00000DB8                 add     edx, [ecx+8]
.text:00000DBB                 adc     eax, [ecx+0Ch]
.text:00000DBE                 mov     ecx, [ebp+arg_0]
.text:00000DC1                 mov     [ecx+8], edx
.text:00000DC4                 mov     [ecx+0Ch], eax
.text:00000DC7                 cmp     [ebp+arg_C], 0
.text:00000DCB                 jz      short loc_DF5
.text:00000DCD                 mov     esi, esp
.text:00000DCF                 mov     edx, [ebp+var_34]
.text:00000DD2                 push    edx
.text:00000DD3                 mov     eax, [ebp+arg_4]
.text:00000DD6                 push    eax
.text:00000DD7                 mov     ecx, [ebp+arg_C]
.text:00000DDA                 push    ecx
.text:00000DDB                 mov     edx, [ebp+arg_C]
.text:00000DDE                 mov     eax, [edx]
.text:00000DE0                 call    eax
.text:00000DE2                 cmp     esi, esp
.text:00000DE4                 call    __RTC_CheckEsp
.text:00000DE9                 cmp     eax, [ebp+var_34]
.text:00000DEC                 jz      short loc_DF5
.text:00000DEE                 mov     eax, 9
.text:00000DF3                 jmp     short loc_DFF
.text:00000DF5 ; ---------------------------------------------------------------------------
.text:00000DF5
.text:00000DF5 loc_DF5:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+39Bj
.text:00000DF5                                         ; Lzma2EncInt_EncodeSubblock(x,x,x,x)+3BCj
.text:00000DF5                 mov     ecx, [ebp+arg_8]
.text:00000DF8                 mov     edx, [ebp+var_34]
.text:00000DFB                 mov     [ecx], edx
.text:00000DFD                 xor     eax, eax
.text:00000DFF
.text:00000DFF loc_DFF:                                ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+54j
.text:00000DFF                                         ; Lzma2EncInt_EncodeSubblock(x,x,x,x)+9Fj ...
.text:00000DFF                 push    edx
.text:00000E00                 mov     ecx, ebp
.text:00000E02                 push    eax
.text:00000E03                 lea     edx, $LN31
.text:00000E09                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000E0E                 pop     eax
.text:00000E0F                 pop     edx
.text:00000E10                 pop     edi
.text:00000E11                 pop     esi
.text:00000E12                 add     esp, 5Ch
.text:00000E15                 cmp     ebp, esp
.text:00000E17                 call    __RTC_CheckEsp
.text:00000E1C                 mov     esp, ebp
.text:00000E1E                 pop     ebp
.text:00000E1F                 retn    10h
.text:00000E1F _Lzma2EncInt_EncodeSubblock@16 endp
.text:00000E1F
.text:00000E1F ; ---------------------------------------------------------------------------
.text:00000E22                 align 4
.text:00000E24 $LN31           dd 2                    ; DATA XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+3D3o
.text:00000E28                 dd offset $LN30
.text:00000E2C $LN30           dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000E28o
.text:00000E34                 dd offset $LN28_0       ; "packSize"
.text:00000E38                 dd 0FFFFFFE8h, 4
.text:00000E40                 dd offset $LN29         ; "unpackSize"
.text:00000E44 $LN29           db 'unpackSize',0       ; DATA XREF: .text:00000E40o
.text:00000E4F $LN28_0         db 'packSize',0         ; DATA XREF: .text:00000E34o
.text:00000E58                 align 10h
.text:00000E60
.text:00000E60 ; =============== S U B R O U T I N E =======================================
.text:00000E60
.text:00000E60 ; Attributes: bp-based frame
.text:00000E60
.text:00000E60 ; __stdcall Progress(x, x, x, x, x)
.text:00000E60 _Progress@20    proc near               ; CODE XREF: Lzma2Enc_EncodeMt1(x,x,x,x,x)+113p
.text:00000E60
.text:00000E60 var_4           = dword ptr -4
.text:00000E60 arg_0           = dword ptr  8
.text:00000E60 arg_4           = dword ptr  0Ch
.text:00000E60 arg_8           = dword ptr  10h
.text:00000E60 arg_C           = dword ptr  14h
.text:00000E60 arg_10          = dword ptr  18h
.text:00000E60
.text:00000E60                 push    ebp
.text:00000E61                 mov     ebp, esp
.text:00000E63                 push    ecx
.text:00000E64                 push    esi
.text:00000E65                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E6C                 cmp     [ebp+arg_0], 0
.text:00000E70                 jz      short loc_EA3
.text:00000E72                 mov     esi, esp
.text:00000E74                 mov     eax, [ebp+arg_10]
.text:00000E77                 push    eax
.text:00000E78                 mov     ecx, [ebp+arg_C]
.text:00000E7B                 push    ecx
.text:00000E7C                 mov     edx, [ebp+arg_8]
.text:00000E7F                 push    edx
.text:00000E80                 mov     eax, [ebp+arg_4]
.text:00000E83                 push    eax
.text:00000E84                 mov     ecx, [ebp+arg_0]
.text:00000E87                 push    ecx
.text:00000E88                 mov     edx, [ebp+arg_0]
.text:00000E8B                 mov     eax, [edx]
.text:00000E8D                 call    eax
.text:00000E8F                 cmp     esi, esp
.text:00000E91                 call    __RTC_CheckEsp
.text:00000E96                 test    eax, eax
.text:00000E98                 jz      short loc_EA3
.text:00000E9A                 mov     [ebp+var_4], 0Ah
.text:00000EA1                 jmp     short loc_EAA
.text:00000EA3 ; ---------------------------------------------------------------------------
.text:00000EA3
.text:00000EA3 loc_EA3:                                ; CODE XREF: Progress(x,x,x,x,x)+10j
.text:00000EA3                                         ; Progress(x,x,x,x,x)+38j
.text:00000EA3                 mov     [ebp+var_4], 0
.text:00000EAA
.text:00000EAA loc_EAA:                                ; CODE XREF: Progress(x,x,x,x,x)+41j
.text:00000EAA                 mov     eax, [ebp+var_4]
.text:00000EAD                 pop     esi
.text:00000EAE                 add     esp, 4
.text:00000EB1                 cmp     ebp, esp
.text:00000EB3                 call    __RTC_CheckEsp
.text:00000EB8                 mov     esp, ebp
.text:00000EBA                 pop     ebp
.text:00000EBB                 retn    14h
.text:00000EBB _Progress@20    endp
.text:00000EBB
.text:00000EBB ; ---------------------------------------------------------------------------
.text:00000EBE                 align 10h
.text:00000EC0
.text:00000EC0 ; =============== S U B R O U T I N E =======================================
.text:00000EC0
.text:00000EC0 ; Attributes: bp-based frame
.text:00000EC0
.text:00000EC0 ; __stdcall MtCallbackImp_Code(x, x, x, x, x, x, x)
.text:00000EC0 _MtCallbackImp_Code@28 proc near        ; DATA XREF: Lzma2Enc_Encode(x,x,x,x):loc_69Ao
.text:00000EC0
.text:00000EC0 var_34          = dword ptr -34h
.text:00000EC0 var_30          = dword ptr -30h
.text:00000EC0 var_2C          = dword ptr -2Ch
.text:00000EC0 var_24          = dword ptr -24h
.text:00000EC0 var_1C          = dword ptr -1Ch
.text:00000EC0 var_18          = dword ptr -18h
.text:00000EC0 var_14          = dword ptr -14h
.text:00000EC0 var_10          = dword ptr -10h
.text:00000EC0 var_C           = dword ptr -0Ch
.text:00000EC0 var_8           = dword ptr -8
.text:00000EC0 var_4           = dword ptr -4
.text:00000EC0 arg_0           = dword ptr  8
.text:00000EC0 arg_4           = dword ptr  0Ch
.text:00000EC0 arg_8           = dword ptr  10h
.text:00000EC0 arg_C           = dword ptr  14h
.text:00000EC0 arg_10          = dword ptr  18h
.text:00000EC0 arg_14          = dword ptr  1Ch
.text:00000EC0 arg_18          = dword ptr  20h
.text:00000EC0
.text:00000EC0                 push    ebp
.text:00000EC1                 mov     ebp, esp
.text:00000EC3                 sub     esp, 34h
.text:00000EC6                 push    edi
.text:00000EC7                 lea     edi, [ebp+var_34]
.text:00000ECA                 mov     ecx, 0Dh
.text:00000ECF                 mov     eax, 0CCCCCCCCh
.text:00000ED4                 rep stosd
.text:00000ED6                 mov     eax, [ebp+arg_0]
.text:00000ED9                 mov     [ebp+var_4], eax
.text:00000EDC                 mov     ecx, [ebp+var_4]
.text:00000EDF                 mov     edx, [ecx+4]
.text:00000EE2                 mov     [ebp+var_8], edx
.text:00000EE5                 mov     eax, [ebp+arg_4]
.text:00000EE8                 shl     eax, 5
.text:00000EEB                 mov     ecx, [ebp+var_8]
.text:00000EEE                 lea     edx, [ecx+eax+60h]
.text:00000EF2                 mov     [ebp+var_C], edx
.text:00000EF5                 mov     [ebp+var_10], 0
.text:00000EFC                 mov     eax, [ebp+arg_C]
.text:00000EFF                 mov     ecx, [eax]
.text:00000F01                 mov     [ebp+var_14], ecx
.text:00000F04                 mov     edx, [ebp+arg_C]
.text:00000F07                 mov     dword ptr [edx], 0
.text:00000F0D                 cmp     [ebp+arg_14], 0
.text:00000F11                 jz      loc_1038
.text:00000F17                 mov     eax, [ebp+var_8]
.text:00000F1A                 add     eax, 8
.text:00000F1D                 push    eax
.text:00000F1E                 mov     ecx, [ebp+var_C]
.text:00000F21                 push    ecx
.text:00000F22                 call    _Lzma2EncInt_Init@8 ; Lzma2EncInt_Init(x,x)
.text:00000F27                 mov     [ebp+var_18], eax
.text:00000F2A                 cmp     [ebp+var_18], 0
.text:00000F2E                 jz      short loc_F38
.text:00000F30                 mov     eax, [ebp+var_18]
.text:00000F33                 jmp     loc_106B
.text:00000F38 ; ---------------------------------------------------------------------------
.text:00000F38
.text:00000F38 loc_F38:                                ; CODE XREF: MtCallbackImp_Code(x,x,x,x,x,x,x)+6Ej
.text:00000F38                 mov     edx, [ebp+var_8]
.text:00000F3B                 mov     eax, [edx+58h]
.text:00000F3E                 push    eax
.text:00000F3F                 mov     ecx, [ebp+var_8]
.text:00000F42                 mov     edx, [ecx+54h]
.text:00000F45                 push    edx
.text:00000F46                 push    200000h
.text:00000F4B                 mov     eax, [ebp+arg_14]
.text:00000F4E                 push    eax
.text:00000F4F                 mov     ecx, [ebp+arg_10]
.text:00000F52                 push    ecx
.text:00000F53                 mov     edx, [ebp+var_C]
.text:00000F56                 mov     eax, [edx]
.text:00000F58                 push    eax
.text:00000F59                 call    _LzmaEnc_MemPrepare@24 ; LzmaEnc_MemPrepare(x,x,x,x,x,x)
.text:00000F5E                 mov     [ebp+var_1C], eax
.text:00000F61                 cmp     [ebp+var_1C], 0
.text:00000F65                 jz      short loc_F6F
.text:00000F67                 mov     eax, [ebp+var_1C]
.text:00000F6A                 jmp     loc_106B
.text:00000F6F ; ---------------------------------------------------------------------------
.text:00000F6F
.text:00000F6F loc_F6F:                                ; CODE XREF: MtCallbackImp_Code(x,x,x,x,x,x,x)+A5j
.text:00000F6F                                         ; MtCallbackImp_Code(x,x,x,x,x,x,x):loc_101Dj
.text:00000F6F                 mov     ecx, [ebp+arg_14]
.text:00000F72                 xor     edx, edx
.text:00000F74                 mov     eax, [ebp+var_C]
.text:00000F77                 mov     [ebp+var_2C], eax
.text:00000F7A                 mov     [ebp+var_34], ecx
.text:00000F7D                 mov     [ebp+var_30], edx
.text:00000F80                 mov     ecx, [ebp+var_2C]
.text:00000F83                 mov     edx, [ecx+0Ch]
.text:00000F86                 cmp     edx, [ebp+var_30]
.text:00000F89                 ja      loc_1022
.text:00000F8F                 jb      short loc_FA0
.text:00000F91                 mov     eax, [ebp+var_2C]
.text:00000F94                 mov     ecx, [eax+8]
.text:00000F97                 cmp     ecx, [ebp+var_34]
.text:00000F9A                 jnb     loc_1022
.text:00000FA0
.text:00000FA0 loc_FA0:                                ; CODE XREF: MtCallbackImp_Code(x,x,x,x,x,x,x)+CFj
.text:00000FA0                 mov     edx, [ebp+arg_C]
.text:00000FA3                 mov     eax, [ebp+var_14]
.text:00000FA6                 sub     eax, [edx]
.text:00000FA8                 mov     [ebp+var_24], eax
.text:00000FAB                 push    0
.text:00000FAD                 lea     ecx, [ebp+var_24]
.text:00000FB0                 push    ecx
.text:00000FB1                 mov     edx, [ebp+arg_C]
.text:00000FB4                 mov     eax, [ebp+arg_8]
.text:00000FB7                 add     eax, [edx]
.text:00000FB9                 push    eax
.text:00000FBA                 mov     ecx, [ebp+var_C]
.text:00000FBD                 push    ecx
.text:00000FBE                 call    _Lzma2EncInt_EncodeSubblock@16 ; Lzma2EncInt_EncodeSubblock(x,x,x,x)
.text:00000FC3                 mov     [ebp+var_10], eax
.text:00000FC6                 cmp     [ebp+var_10], 0
.text:00000FCA                 jz      short loc_FCE
.text:00000FCC                 jmp     short loc_1022
.text:00000FCE ; ---------------------------------------------------------------------------
.text:00000FCE
.text:00000FCE loc_FCE:                                ; CODE XREF: MtCallbackImp_Code(x,x,x,x,x,x,x)+10Aj
.text:00000FCE                 mov     edx, [ebp+arg_C]
.text:00000FD1                 mov     eax, [edx]
.text:00000FD3                 add     eax, [ebp+var_24]
.text:00000FD6                 mov     ecx, [ebp+arg_C]
.text:00000FD9                 mov     [ecx], eax
.text:00000FDB                 cmp     [ebp+var_24], 0
.text:00000FDF                 jnz     short loc_FEA
.text:00000FE1                 mov     [ebp+var_10], 0Bh
.text:00000FE8                 jmp     short loc_1022
.text:00000FEA ; ---------------------------------------------------------------------------
.text:00000FEA
.text:00000FEA loc_FEA:                                ; CODE XREF: MtCallbackImp_Code(x,x,x,x,x,x,x)+11Fj
.text:00000FEA                 mov     edx, [ebp+arg_C]
.text:00000FED                 mov     eax, [edx]
.text:00000FEF                 xor     ecx, ecx
.text:00000FF1                 push    ecx
.text:00000FF2                 push    eax
.text:00000FF3                 mov     edx, [ebp+var_C]
.text:00000FF6                 mov     eax, [edx+0Ch]
.text:00000FF9                 push    eax
.text:00000FFA                 mov     ecx, [edx+8]
.text:00000FFD                 push    ecx
.text:00000FFE                 mov     edx, [ebp+arg_4]
.text:00001001                 push    edx
.text:00001002                 mov     eax, [ebp+var_8]
.text:00001005                 add     eax, 4A0h
.text:0000100A                 push    eax
.text:0000100B                 call    _MtProgress_Set@24 ; MtProgress_Set(x,x,x,x,x,x)
.text:00001010                 test    eax, eax
.text:00001012                 jz      short loc_101D
.text:00001014                 mov     [ebp+var_10], 0Ah
.text:0000101B                 jmp     short loc_1022
.text:0000101D ; ---------------------------------------------------------------------------
.text:0000101D
.text:0000101D loc_101D:                               ; CODE XREF: MtCallbackImp_Code(x,x,x,x,x,x,x)+152j
.text:0000101D                 jmp     loc_F6F
.text:00001022 ; ---------------------------------------------------------------------------
.text:00001022
.text:00001022 loc_1022:                               ; CODE XREF: MtCallbackImp_Code(x,x,x,x,x,x,x)+C9j
.text:00001022                                         ; MtCallbackImp_Code(x,x,x,x,x,x,x)+DAj ...
.text:00001022                 mov     ecx, [ebp+var_C]
.text:00001025                 mov     edx, [ecx]
.text:00001027                 push    edx
.text:00001028                 call    _LzmaEnc_Finish@4 ; LzmaEnc_Finish(x)
.text:0000102D                 cmp     [ebp+var_10], 0
.text:00001031                 jz      short loc_1038
.text:00001033                 mov     eax, [ebp+var_10]
.text:00001036                 jmp     short loc_106B
.text:00001038 ; ---------------------------------------------------------------------------
.text:00001038
.text:00001038 loc_1038:                               ; CODE XREF: MtCallbackImp_Code(x,x,x,x,x,x,x)+51j
.text:00001038                                         ; MtCallbackImp_Code(x,x,x,x,x,x,x)+171j
.text:00001038                 cmp     [ebp+arg_18], 0
.text:0000103C                 jz      short loc_1068
.text:0000103E                 mov     eax, [ebp+arg_C]
.text:00001041                 mov     ecx, [eax]
.text:00001043                 cmp     ecx, [ebp+var_14]
.text:00001046                 jnz     short loc_104F
.text:00001048                 mov     eax, 7
.text:0000104D                 jmp     short loc_106B
.text:0000104F ; ---------------------------------------------------------------------------
.text:0000104F
.text:0000104F loc_104F:                               ; CODE XREF: MtCallbackImp_Code(x,x,x,x,x,x,x)+186j
.text:0000104F                 mov     edx, [ebp+arg_C]
.text:00001052                 mov     eax, [edx]
.text:00001054                 mov     ecx, [ebp+arg_8]
.text:00001057                 mov     byte ptr [ecx+eax], 0
.text:0000105B                 mov     edx, [ebp+arg_C]
.text:0000105E                 mov     eax, [edx]
.text:00001060                 add     eax, 1
.text:00001063                 mov     ecx, [ebp+arg_C]
.text:00001066                 mov     [ecx], eax
.text:00001068
.text:00001068 loc_1068:                               ; CODE XREF: MtCallbackImp_Code(x,x,x,x,x,x,x)+17Cj
.text:00001068                 mov     eax, [ebp+var_10]
.text:0000106B
.text:0000106B loc_106B:                               ; CODE XREF: MtCallbackImp_Code(x,x,x,x,x,x,x)+73j
.text:0000106B                                         ; MtCallbackImp_Code(x,x,x,x,x,x,x)+AAj ...
.text:0000106B                 push    edx
.text:0000106C                 mov     ecx, ebp
.text:0000106E                 push    eax
.text:0000106F                 lea     edx, $LN17_0
.text:00001075                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000107A                 pop     eax
.text:0000107B                 pop     edx
.text:0000107C                 pop     edi
.text:0000107D                 add     esp, 34h
.text:00001080                 cmp     ebp, esp
.text:00001082                 call    __RTC_CheckEsp
.text:00001087                 mov     esp, ebp
.text:00001089                 pop     ebp
.text:0000108A                 retn    1Ch
.text:0000108A _MtCallbackImp_Code@28 endp
.text:0000108A
.text:0000108A ; ---------------------------------------------------------------------------
.text:0000108D                 align 10h
.text:00001090 $LN17_0         dd 1                    ; DATA XREF: MtCallbackImp_Code(x,x,x,x,x,x,x)+1AFo
.text:00001094                 dd offset $LN16_0
.text:00001098 $LN16_0         dd 0FFFFFFDCh, 4        ; DATA XREF: .text:00001094o
.text:000010A0                 dd offset $LN15_0       ; "packSize"
.text:000010A4 $LN15_0         db 'packSize',0         ; DATA XREF: .text:000010A0o
.text:000010AD                 align 10h
.text:000010AD _text           ends
.text:000010AD
.rtc$TMZ:000010B0 ; ===========================================================================
.rtc$TMZ:000010B0
.rtc$TMZ:000010B0 ; Segment type: Pure data
.rtc$TMZ:000010B0 ; Segment permissions: Read
.rtc$TMZ:000010B0 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000010B0                 assume cs:_rtc$TMZ
.rtc$TMZ:000010B0                 ;org 10B0h
.rtc$TMZ:000010B0 ; COMDAT (pick any)
.rtc$TMZ:000010B0 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000010B0 _rtc$TMZ        ends
.rtc$TMZ:000010B0
.rtc$IMZ:000010B4 ; ===========================================================================
.rtc$IMZ:000010B4
.rtc$IMZ:000010B4 ; Segment type: Pure data
.rtc$IMZ:000010B4 ; Segment permissions: Read
.rtc$IMZ:000010B4 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000010B4                 assume cs:_rtc$IMZ
.rtc$IMZ:000010B4                 ;org 10B4h
.rtc$IMZ:000010B4 ; COMDAT (pick any)
.rtc$IMZ:000010B4 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000010B4 _rtc$IMZ        ends
.rtc$IMZ:000010B4
UNDEF:000010C0 ; ===========================================================================
UNDEF:000010C0
UNDEF:000010C0 ; Segment type: Externs
UNDEF:000010C0 ; UNDEF
UNDEF:000010C0 ; __stdcall LzmaEncProps_Init(x)
UNDEF:000010C0                 extrn _LzmaEncProps_Init@4:near
UNDEF:000010C0                                         ; CODE XREF: Lzma2EncProps_Init(x)+7p
UNDEF:000010C4                 extrn __RTC_CheckEsp:near
UNDEF:000010C4                                         ; CODE XREF: Lzma2EncProps_Init(x)+2Cp
UNDEF:000010C4                                         ; Lzma2EncProps_Normalize(x)+2A1p ...
UNDEF:000010C8                 extrn __RTC_Shutdown:near
UNDEF:000010C8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000010CC                 extrn __RTC_InitBase:near
UNDEF:000010CC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000010D0 ; __stdcall LzmaEncProps_Normalize(x)
UNDEF:000010D0                 extrn _LzmaEncProps_Normalize@4:near
UNDEF:000010D0                                         ; CODE XREF: Lzma2EncProps_Normalize(x)+38p
UNDEF:000010D0                                         ; Lzma2EncProps_Normalize(x)+F2p ...
UNDEF:000010D4                 extrn ___security_cookie:near
UNDEF:000010D4                                         ; DATA XREF: Lzma2EncProps_Normalize(x)+1Dr
UNDEF:000010D4                                         ; Lzma2Enc_SetProps(x,x)+17r ...
UNDEF:000010D8 ; __fastcall __security_check_cookie(x)
UNDEF:000010D8                 extrn @__security_check_cookie@4:near
UNDEF:000010D8                                         ; CODE XREF: Lzma2EncProps_Normalize(x)+294p
UNDEF:000010D8                                         ; Lzma2Enc_SetProps(x,x)+85p ...
UNDEF:000010DC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000010DC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000010DC                                         ; CODE XREF: Lzma2EncProps_Normalize(x)+286p
UNDEF:000010DC                                         ; Lzma2Enc_SetProps(x,x)+77p ...
UNDEF:000010E0                 extrn __aulldiv:near    ; CODE XREF: Lzma2EncProps_Normalize(x)+226p
UNDEF:000010E4                 extrn __allshl:near     ; CODE XREF: Lzma2EncProps_Normalize(x)+114p
UNDEF:000010E8 ; __stdcall MtCoder_Construct(x)
UNDEF:000010E8                 extrn _MtCoder_Construct@4:near
UNDEF:000010E8                                         ; CODE XREF: Lzma2Enc_Create(x,x)+A4p
UNDEF:000010EC ; __stdcall MtCoder_Destruct(x)
UNDEF:000010EC                 extrn _MtCoder_Destruct@4:near
UNDEF:000010EC                                         ; CODE XREF: Lzma2Enc_Destroy(x)+80p
UNDEF:000010F0 ; __stdcall LzmaEnc_Destroy(x, x, x)
UNDEF:000010F0                 extrn _LzmaEnc_Destroy@12:near
UNDEF:000010F0                                         ; CODE XREF: Lzma2Enc_Destroy(x)+66p
UNDEF:000010F4 ; __stdcall LzmaEncProps_GetDictSize(x)
UNDEF:000010F4                 extrn _LzmaEncProps_GetDictSize@4:near
UNDEF:000010F4                                         ; CODE XREF: Lzma2Enc_WriteProperties(x)+28p
UNDEF:000010F8 ; __stdcall MtCoder_Code(x)
UNDEF:000010F8                 extrn _MtCoder_Code@4:near
UNDEF:000010F8                                         ; CODE XREF: Lzma2Enc_Encode(x,x,x,x)+139p
UNDEF:000010FC ; __stdcall LzmaEnc_Create(x)
UNDEF:000010FC                 extrn _LzmaEnc_Create@4:near
UNDEF:000010FC                                         ; CODE XREF: Lzma2Enc_Encode(x,x,x,x)+62p
UNDEF:00001100 ; __stdcall LzmaEnc_Finish(x)
UNDEF:00001100                 extrn _LzmaEnc_Finish@4:near
UNDEF:00001100                                         ; CODE XREF: Lzma2Enc_EncodeMt1(x,x,x,x,x)+133p
UNDEF:00001100                                         ; MtCallbackImp_Code(x,x,x,x,x,x,x)+168p
UNDEF:00001104 ; __stdcall LzmaEnc_PrepareForLzma2(x, x, x, x, x)
UNDEF:00001104                 extrn _LzmaEnc_PrepareForLzma2@20:near
UNDEF:00001104                                         ; CODE XREF: Lzma2Enc_EncodeMt1(x,x,x,x,x)+ABp
UNDEF:00001108 ; __stdcall LzmaEnc_WriteProperties(x, x, x)
UNDEF:00001108                 extrn _LzmaEnc_WriteProperties@12:near
UNDEF:00001108                                         ; CODE XREF: Lzma2EncInt_Init(x,x)+52p
UNDEF:0000110C ; __stdcall LzmaEnc_SetProps(x, x)
UNDEF:0000110C                 extrn _LzmaEnc_SetProps@8:near
UNDEF:0000110C                                         ; CODE XREF: Lzma2EncInt_Init(x,x)+31p
UNDEF:00001110 ; __stdcall LzmaEnc_RestoreState(x)
UNDEF:00001110                 extrn _LzmaEnc_RestoreState@4:near
UNDEF:00001110                                         ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+253p
UNDEF:00001114 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00001114                 extrn _memcpy:near      ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+1C8p
UNDEF:00001118 ; __stdcall LzmaEnc_GetCurBuf(x)
UNDEF:00001118                 extrn _LzmaEnc_GetCurBuf@4:near
UNDEF:00001118                                         ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+1B8p
UNDEF:0000111C ; __stdcall LzmaEnc_CodeOneMemBlock(x, x, x, x, x, x)
UNDEF:0000111C                 extrn _LzmaEnc_CodeOneMemBlock@24:near
UNDEF:0000111C                                         ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+8Ep
UNDEF:00001120 ; __stdcall LzmaEnc_SaveState(x)
UNDEF:00001120                 extrn _LzmaEnc_SaveState@4:near
UNDEF:00001120                                         ; CODE XREF: Lzma2EncInt_EncodeSubblock(x,x,x,x)+68p
UNDEF:00001124 ; __stdcall MtProgress_Set(x, x, x, x, x, x)
UNDEF:00001124                 extrn _MtProgress_Set@24:near
UNDEF:00001124                                         ; CODE XREF: MtCallbackImp_Code(x,x,x,x,x,x,x)+14Bp
UNDEF:00001128 ; __stdcall LzmaEnc_MemPrepare(x, x, x, x, x, x)
UNDEF:00001128                 extrn _LzmaEnc_MemPrepare@24:near
UNDEF:00001128                                         ; CODE XREF: MtCallbackImp_Code(x,x,x,x,x,x,x)+99p
UNDEF:00001128
UNDEF:00001128
UNDEF:00001128                 end