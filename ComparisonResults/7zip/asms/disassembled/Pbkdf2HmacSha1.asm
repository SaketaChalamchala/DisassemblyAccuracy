.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 24457D7D4EC0DE6FF45A905C2A7F4A69
.text:00000000 ; Input CRC32 : D97F3CDD
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Pbkdf2HmacSha1.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; void __stdcall NCrypto::NSha1::Pbkdf2Hmac(NCrypto::NSha1 *this, const unsigned __int8 *, unsigned __int8 *, const unsigned __int8 *, unsigned int, unsigned int, unsigned __int8 *, unsigned int)
.text:00000000                 public ?Pbkdf2Hmac@NSha1@NCrypto@@YGXPBEI0IIPAEI@Z
.text:00000000 ?Pbkdf2Hmac@NSha1@NCrypto@@YGXPBEI0IIPAEI@Z proc near
.text:00000000
.text:00000000 var_1C4         = dword ptr -1C4h
.text:00000000 var_1C0         = dword ptr -1C0h
.text:00000000 var_1BC         = dword ptr -1BCh
.text:00000000 var_1B8         = dword ptr -1B8h
.text:00000000 var_1B0         = byte ptr -1B0h
.text:00000000 var_194         = byte ptr -194h
.text:00000000 var_D0          = dword ptr -0D0h
.text:00000000 var_C8          = byte ptr -0C8h
.text:00000000 var_4           = dword ptr -4
.text:00000000 this            = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_8           = dword ptr  10h
.text:00000000 arg_C           = dword ptr  14h
.text:00000000 arg_10          = dword ptr  18h
.text:00000000 arg_14          = dword ptr  1Ch
.text:00000000 arg_18          = dword ptr  20h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 1C4h
.text:00000009                 push    esi
.text:0000000A                 push    edi
.text:0000000B                 lea     edi, [ebp+var_1C4]
.text:00000011                 mov     ecx, 71h ; 'q'
.text:00000016                 mov     eax, 0CCCCCCCCh
.text:0000001B                 rep stosd
.text:0000001D                 mov     eax, dword ptr ds:___security_cookie
.text:00000022                 xor     eax, ebp
.text:00000024                 mov     [ebp+var_4], eax
.text:00000027                 mov     eax, [ebp+arg_4]
.text:0000002A                 push    eax             ; unsigned int
.text:0000002B                 mov     ecx, [ebp+this]
.text:0000002E                 push    ecx             ; unsigned __int8 *
.text:0000002F                 lea     ecx, [ebp+var_C8] ; this
.text:00000035                 call    ?SetKey@CHmac@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CHmac::SetKey(uchar const *,uint)
.text:0000003A                 mov     [ebp+var_D0], 1
.text:00000044                 jmp     short loc_55
.text:00000046 ; ---------------------------------------------------------------------------
.text:00000046
.text:00000046 loc_46:                                 ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+1F6j
.text:00000046                 mov     edx, [ebp+var_D0]
.text:0000004C                 add     edx, 1
.text:0000004F                 mov     [ebp+var_D0], edx
.text:00000055
.text:00000055 loc_55:                                 ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+44j
.text:00000055                 cmp     [ebp+arg_18], 0
.text:00000059                 jz      loc_1FB
.text:0000005F                 mov     ecx, 30h ; '0'
.text:00000064                 lea     esi, [ebp+var_C8]
.text:0000006A                 lea     edi, [ebp+var_194]
.text:00000070                 rep movsd
.text:00000072                 mov     eax, [ebp+arg_C]
.text:00000075                 push    eax             ; unsigned int
.text:00000076                 mov     ecx, [ebp+arg_8]
.text:00000079                 push    ecx             ; unsigned __int8 *
.text:0000007A                 lea     ecx, [ebp+var_194] ; this
.text:00000080                 call    ?Update@CHmac@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CHmac::Update(uchar const *,uint)
.text:00000085                 mov     edx, [ebp+var_D0]
.text:0000008B                 bswap   edx
.text:0000008D                 mov     dword ptr [ebp+var_1B0], edx
.text:00000093                 push    4               ; unsigned int
.text:00000095                 lea     eax, [ebp+var_1B0]
.text:0000009B                 push    eax             ; unsigned __int8 *
.text:0000009C                 lea     ecx, [ebp+var_194] ; this
.text:000000A2                 call    ?Update@CHmac@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CHmac::Update(uchar const *,uint)
.text:000000A7                 push    14h             ; unsigned int
.text:000000A9                 lea     ecx, [ebp+var_1B0]
.text:000000AF                 push    ecx             ; unsigned __int8 *
.text:000000B0                 lea     ecx, [ebp+var_194] ; this
.text:000000B6                 call    ?Final@CHmac@NSha1@NCrypto@@QAEXPAEI@Z ; NCrypto::NSha1::CHmac::Final(uchar *,uint)
.text:000000BB                 cmp     [ebp+arg_18], 14h
.text:000000BF                 jnb     short loc_CC
.text:000000C1                 mov     edx, [ebp+arg_18]
.text:000000C4                 mov     [ebp+var_1C4], edx
.text:000000CA                 jmp     short loc_D6
.text:000000CC ; ---------------------------------------------------------------------------
.text:000000CC
.text:000000CC loc_CC:                                 ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+BFj
.text:000000CC                 mov     [ebp+var_1C4], 14h
.text:000000D6
.text:000000D6 loc_D6:                                 ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+CAj
.text:000000D6                 mov     eax, [ebp+var_1C4]
.text:000000DC                 mov     [ebp+var_1B8], eax
.text:000000E2                 mov     [ebp+var_1BC], 0
.text:000000EC                 jmp     short loc_FD
.text:000000EE ; ---------------------------------------------------------------------------
.text:000000EE
.text:000000EE loc_EE:                                 ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+123j
.text:000000EE                 mov     ecx, [ebp+var_1BC]
.text:000000F4                 add     ecx, 1
.text:000000F7                 mov     [ebp+var_1BC], ecx
.text:000000FD
.text:000000FD loc_FD:                                 ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+ECj
.text:000000FD                 mov     edx, [ebp+var_1BC]
.text:00000103                 cmp     edx, [ebp+var_1B8]
.text:00000109                 jnb     short loc_125
.text:0000010B                 mov     eax, [ebp+arg_14]
.text:0000010E                 add     eax, [ebp+var_1BC]
.text:00000114                 mov     ecx, [ebp+var_1BC]
.text:0000011A                 mov     dl, [ebp+ecx+var_1B0]
.text:00000121                 mov     [eax], dl
.text:00000123                 jmp     short loc_EE
.text:00000125 ; ---------------------------------------------------------------------------
.text:00000125
.text:00000125 loc_125:                                ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+109j
.text:00000125                 mov     eax, [ebp+arg_10]
.text:00000128                 mov     [ebp+var_1C0], eax
.text:0000012E                 jmp     short loc_13F
.text:00000130 ; ---------------------------------------------------------------------------
.text:00000130
.text:00000130 loc_130:                                ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint):loc_1D9j
.text:00000130                 mov     ecx, [ebp+var_1C0]
.text:00000136                 sub     ecx, 1
.text:00000139                 mov     [ebp+var_1C0], ecx
.text:0000013F
.text:0000013F loc_13F:                                ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+12Ej
.text:0000013F                 cmp     [ebp+var_1C0], 1
.text:00000146                 jbe     loc_1DE
.text:0000014C                 mov     ecx, 30h ; '0'
.text:00000151                 lea     esi, [ebp+var_C8]
.text:00000157                 lea     edi, [ebp+var_194]
.text:0000015D                 rep movsd
.text:0000015F                 push    14h             ; unsigned int
.text:00000161                 lea     edx, [ebp+var_1B0]
.text:00000167                 push    edx             ; unsigned __int8 *
.text:00000168                 lea     ecx, [ebp+var_194] ; this
.text:0000016E                 call    ?Update@CHmac@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CHmac::Update(uchar const *,uint)
.text:00000173                 push    14h             ; unsigned int
.text:00000175                 lea     eax, [ebp+var_1B0]
.text:0000017B                 push    eax             ; unsigned __int8 *
.text:0000017C                 lea     ecx, [ebp+var_194] ; this
.text:00000182                 call    ?Final@CHmac@NSha1@NCrypto@@QAEXPAEI@Z ; NCrypto::NSha1::CHmac::Final(uchar *,uint)
.text:00000187                 mov     [ebp+var_1BC], 0
.text:00000191                 jmp     short loc_1A2
.text:00000193 ; ---------------------------------------------------------------------------
.text:00000193
.text:00000193 loc_193:                                ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+1D7j
.text:00000193                 mov     ecx, [ebp+var_1BC]
.text:00000199                 add     ecx, 1
.text:0000019C                 mov     [ebp+var_1BC], ecx
.text:000001A2
.text:000001A2 loc_1A2:                                ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+191j
.text:000001A2                 mov     edx, [ebp+var_1BC]
.text:000001A8                 cmp     edx, [ebp+var_1B8]
.text:000001AE                 jnb     short loc_1D9
.text:000001B0                 mov     eax, [ebp+var_1BC]
.text:000001B6                 movzx   ecx, [ebp+eax+var_1B0]
.text:000001BE                 mov     edx, [ebp+arg_14]
.text:000001C1                 add     edx, [ebp+var_1BC]
.text:000001C7                 movzx   eax, byte ptr [edx]
.text:000001CA                 xor     eax, ecx
.text:000001CC                 mov     ecx, [ebp+arg_14]
.text:000001CF                 add     ecx, [ebp+var_1BC]
.text:000001D5                 mov     [ecx], al
.text:000001D7                 jmp     short loc_193
.text:000001D9 ; ---------------------------------------------------------------------------
.text:000001D9
.text:000001D9 loc_1D9:                                ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+1AEj
.text:000001D9                 jmp     loc_130
.text:000001DE ; ---------------------------------------------------------------------------
.text:000001DE
.text:000001DE loc_1DE:                                ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+146j
.text:000001DE                 mov     edx, [ebp+arg_14]
.text:000001E1                 add     edx, [ebp+var_1B8]
.text:000001E7                 mov     [ebp+arg_14], edx
.text:000001EA                 mov     eax, [ebp+arg_18]
.text:000001ED                 sub     eax, [ebp+var_1B8]
.text:000001F3                 mov     [ebp+arg_18], eax
.text:000001F6                 jmp     loc_46
.text:000001FB ; ---------------------------------------------------------------------------
.text:000001FB
.text:000001FB loc_1FB:                                ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+59j
.text:000001FB                 push    edx
.text:000001FC                 mov     ecx, ebp
.text:000001FE                 push    eax
.text:000001FF                 lea     edx, $LN21
.text:00000205                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000020A                 pop     eax
.text:0000020B                 pop     edx
.text:0000020C                 pop     edi
.text:0000020D                 pop     esi
.text:0000020E                 mov     ecx, [ebp+var_4]
.text:00000211                 xor     ecx, ebp
.text:00000213                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000218                 add     esp, 1C4h
.text:0000021E                 cmp     ebp, esp
.text:00000220                 call    __RTC_CheckEsp
.text:00000225                 mov     esp, ebp
.text:00000227                 pop     ebp
.text:00000228                 retn    1Ch
.text:00000228 ?Pbkdf2Hmac@NSha1@NCrypto@@YGXPBEI0IIPAEI@Z endp
.text:00000228
.text:00000228 ; ---------------------------------------------------------------------------
.text:0000022B                 align 4
.text:0000022C $LN21           dd 3                    ; DATA XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+1FFo
.text:00000230                 dd offset $LN20
.text:00000234 $LN20           dd 0FFFFFF38h, 0C0h     ; DATA XREF: .text:00000230o
.text:0000023C                 dd offset $LN17         ; "baseCtx"
.text:00000240                 dd 0FFFFFE6Ch, 0C0h
.text:00000248                 dd offset $LN18
.text:0000024C                 dd 0FFFFFE50h, 14h
.text:00000254                 dd offset $LN19
.text:00000258 $LN19           db 75h, 0               ; DATA XREF: .text:00000254o
.text:0000025A $LN18           dw 7463h                ; DATA XREF: .text:00000248o
.text:0000025C                 db 78h, 0
.text:0000025E $LN17           db 'baseCtx',0          ; DATA XREF: .text:0000023Co
.text:00000266                 align 10h
.text:00000270
.text:00000270 ; =============== S U B R O U T I N E =======================================
.text:00000270
.text:00000270 ; Attributes: bp-based frame
.text:00000270
.text:00000270 ; void __stdcall NCrypto::NSha1::Pbkdf2Hmac32(NCrypto::NSha1 *this, const unsigned __int8 *, unsigned int *, const unsigned int *, unsigned int, unsigned int, unsigned int *, unsigned int)
.text:00000270                 public ?Pbkdf2Hmac32@NSha1@NCrypto@@YGXPBEIPBIIIPAII@Z
.text:00000270 ?Pbkdf2Hmac32@NSha1@NCrypto@@YGXPBEIPBIIIPAII@Z proc near
.text:00000270
.text:00000270 var_1C0         = dword ptr -1C0h
.text:00000270 var_1BC         = dword ptr -1BCh
.text:00000270 var_1B8         = dword ptr -1B8h
.text:00000270 var_1B0         = dword ptr -1B0h
.text:00000270 var_194         = byte ptr -194h
.text:00000270 var_D0          = dword ptr -0D0h
.text:00000270 var_C8          = byte ptr -0C8h
.text:00000270 var_4           = dword ptr -4
.text:00000270 this            = dword ptr  8
.text:00000270 arg_4           = dword ptr  0Ch
.text:00000270 arg_8           = dword ptr  10h
.text:00000270 arg_C           = dword ptr  14h
.text:00000270 arg_10          = dword ptr  18h
.text:00000270 arg_14          = dword ptr  1Ch
.text:00000270 arg_18          = dword ptr  20h
.text:00000270
.text:00000270                 push    ebp
.text:00000271                 mov     ebp, esp
.text:00000273                 sub     esp, 1C0h
.text:00000279                 push    esi
.text:0000027A                 push    edi
.text:0000027B                 lea     edi, [ebp+var_1C0]
.text:00000281                 mov     ecx, 70h ; 'p'
.text:00000286                 mov     eax, 0CCCCCCCCh
.text:0000028B                 rep stosd
.text:0000028D                 mov     eax, dword ptr ds:___security_cookie
.text:00000292                 xor     eax, ebp
.text:00000294                 mov     [ebp+var_4], eax
.text:00000297                 mov     eax, [ebp+arg_4]
.text:0000029A                 push    eax             ; unsigned int
.text:0000029B                 mov     ecx, [ebp+this]
.text:0000029E                 push    ecx             ; unsigned __int8 *
.text:0000029F                 lea     ecx, [ebp+var_C8] ; this
.text:000002A5                 call    ?SetKey@CHmac32@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CHmac32::SetKey(uchar const *,uint)
.text:000002AA                 mov     [ebp+var_D0], 1
.text:000002B4                 jmp     short loc_2C5
.text:000002B6 ; ---------------------------------------------------------------------------
.text:000002B6
.text:000002B6 loc_2B6:                                ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac32(uchar const *,uint,uint const *,uint,uint,uint *,uint)+16Bj
.text:000002B6                 mov     edx, [ebp+var_D0]
.text:000002BC                 add     edx, 1
.text:000002BF                 mov     [ebp+var_D0], edx
.text:000002C5
.text:000002C5 loc_2C5:                                ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac32(uchar const *,uint,uint const *,uint,uint,uint *,uint)+44j
.text:000002C5                 cmp     [ebp+arg_18], 0
.text:000002C9                 jz      loc_3E0
.text:000002CF                 mov     ecx, 30h ; '0'
.text:000002D4                 lea     esi, [ebp+var_C8]
.text:000002DA                 lea     edi, [ebp+var_194]
.text:000002E0                 rep movsd
.text:000002E2                 mov     eax, [ebp+arg_C]
.text:000002E5                 push    eax             ; unsigned int
.text:000002E6                 mov     ecx, [ebp+arg_8]
.text:000002E9                 push    ecx             ; unsigned int *
.text:000002EA                 lea     ecx, [ebp+var_194] ; this
.text:000002F0                 call    ?Update@CHmac32@NSha1@NCrypto@@QAEXPBII@Z ; NCrypto::NSha1::CHmac32::Update(uint const *,uint)
.text:000002F5                 mov     edx, [ebp+var_D0]
.text:000002FB                 mov     [ebp+var_1B0], edx
.text:00000301                 push    1               ; unsigned int
.text:00000303                 lea     eax, [ebp+var_1B0]
.text:00000309                 push    eax             ; unsigned int *
.text:0000030A                 lea     ecx, [ebp+var_194] ; this
.text:00000310                 call    ?Update@CHmac32@NSha1@NCrypto@@QAEXPBII@Z ; NCrypto::NSha1::CHmac32::Update(uint const *,uint)
.text:00000315                 push    5               ; unsigned int
.text:00000317                 lea     ecx, [ebp+var_1B0]
.text:0000031D                 push    ecx             ; unsigned int *
.text:0000031E                 lea     ecx, [ebp+var_194] ; this
.text:00000324                 call    ?Final@CHmac32@NSha1@NCrypto@@QAEXPAII@Z ; NCrypto::NSha1::CHmac32::Final(uint *,uint)
.text:00000329                 mov     ecx, 30h ; '0'
.text:0000032E                 lea     esi, [ebp+var_C8]
.text:00000334                 lea     edi, [ebp+var_194]
.text:0000033A                 rep movsd
.text:0000033C                 mov     edx, [ebp+arg_10]
.text:0000033F                 sub     edx, 1
.text:00000342                 push    edx             ; unsigned int
.text:00000343                 lea     eax, [ebp+var_1B0]
.text:00000349                 push    eax             ; unsigned int *
.text:0000034A                 lea     ecx, [ebp+var_194] ; this
.text:00000350                 call    ?GetLoopXorDigest@CHmac32@NSha1@NCrypto@@QAEXPAII@Z ; NCrypto::NSha1::CHmac32::GetLoopXorDigest(uint *,uint)
.text:00000355                 cmp     [ebp+arg_18], 5
.text:00000359                 jnb     short loc_366
.text:0000035B                 mov     ecx, [ebp+arg_18]
.text:0000035E                 mov     [ebp+var_1C0], ecx
.text:00000364                 jmp     short loc_370
.text:00000366 ; ---------------------------------------------------------------------------
.text:00000366
.text:00000366 loc_366:                                ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac32(uchar const *,uint,uint const *,uint,uint,uint *,uint)+E9j
.text:00000366                 mov     [ebp+var_1C0], 5
.text:00000370
.text:00000370 loc_370:                                ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac32(uchar const *,uint,uint const *,uint,uint,uint *,uint)+F4j
.text:00000370                 mov     edx, [ebp+var_1C0]
.text:00000376                 mov     [ebp+var_1B8], edx
.text:0000037C                 mov     [ebp+var_1BC], 0
.text:00000386                 jmp     short loc_397
.text:00000388 ; ---------------------------------------------------------------------------
.text:00000388
.text:00000388 loc_388:                                ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac32(uchar const *,uint,uint const *,uint,uint,uint *,uint)+14Ej
.text:00000388                 mov     eax, [ebp+var_1BC]
.text:0000038E                 add     eax, 1
.text:00000391                 mov     [ebp+var_1BC], eax
.text:00000397
.text:00000397 loc_397:                                ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac32(uchar const *,uint,uint const *,uint,uint,uint *,uint)+116j
.text:00000397                 mov     ecx, [ebp+var_1BC]
.text:0000039D                 cmp     ecx, [ebp+var_1B8]
.text:000003A3                 jnb     short loc_3C0
.text:000003A5                 mov     edx, [ebp+var_1BC]
.text:000003AB                 mov     eax, [ebp+arg_14]
.text:000003AE                 mov     ecx, [ebp+var_1BC]
.text:000003B4                 mov     ecx, [ebp+ecx*4+var_1B0]
.text:000003BB                 mov     [eax+edx*4], ecx
.text:000003BE                 jmp     short loc_388
.text:000003C0 ; ---------------------------------------------------------------------------
.text:000003C0
.text:000003C0 loc_3C0:                                ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac32(uchar const *,uint,uint const *,uint,uint,uint *,uint)+133j
.text:000003C0                 mov     edx, [ebp+var_1B8]
.text:000003C6                 mov     eax, [ebp+arg_14]
.text:000003C9                 lea     ecx, [eax+edx*4]
.text:000003CC                 mov     [ebp+arg_14], ecx
.text:000003CF                 mov     edx, [ebp+arg_18]
.text:000003D2                 sub     edx, [ebp+var_1B8]
.text:000003D8                 mov     [ebp+arg_18], edx
.text:000003DB                 jmp     loc_2B6
.text:000003E0 ; ---------------------------------------------------------------------------
.text:000003E0
.text:000003E0 loc_3E0:                                ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac32(uchar const *,uint,uint const *,uint,uint,uint *,uint)+59j
.text:000003E0                 push    edx
.text:000003E1                 mov     ecx, ebp
.text:000003E3                 push    eax
.text:000003E4                 lea     edx, $LN15
.text:000003EA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000003EF                 pop     eax
.text:000003F0                 pop     edx
.text:000003F1                 pop     edi
.text:000003F2                 pop     esi
.text:000003F3                 mov     ecx, [ebp+var_4]
.text:000003F6                 xor     ecx, ebp
.text:000003F8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000003FD                 add     esp, 1C0h
.text:00000403                 cmp     ebp, esp
.text:00000405                 call    __RTC_CheckEsp
.text:0000040A                 mov     esp, ebp
.text:0000040C                 pop     ebp
.text:0000040D                 retn    1Ch
.text:0000040D ?Pbkdf2Hmac32@NSha1@NCrypto@@YGXPBEIPBIIIPAII@Z endp
.text:0000040D
.text:0000040D ; ---------------------------------------------------------------------------
.text:00000410 $LN15           dd 3                    ; DATA XREF: NCrypto::NSha1::Pbkdf2Hmac32(uchar const *,uint,uint const *,uint,uint,uint *,uint)+174o
.text:00000414                 dd offset $LN14
.text:00000418 $LN14           dd 0FFFFFF38h, 0C0h     ; DATA XREF: .text:00000414o
.text:00000420                 dd offset $LN11         ; "baseCtx"
.text:00000424                 dd 0FFFFFE6Ch, 0C0h
.text:0000042C                 dd offset $LN12
.text:00000430                 dd 0FFFFFE50h, 14h
.text:00000438                 dd offset $LN13
.text:0000043C $LN13           db 75h, 0               ; DATA XREF: .text:00000438o
.text:0000043E $LN12           dw 7463h                ; DATA XREF: .text:0000042Co
.text:00000440                 db 78h, 0
.text:00000442 $LN11           db 'baseCtx',0          ; DATA XREF: .text:00000420o
.text:0000044A                 align 4
.text:0000044A _text           ends
.text:0000044A
.rtc$TMZ:0000044C ; ===========================================================================
.rtc$TMZ:0000044C
.rtc$TMZ:0000044C ; Segment type: Pure data
.rtc$TMZ:0000044C ; Segment permissions: Read
.rtc$TMZ:0000044C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000044C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000044C                 ;org 44Ch
.rtc$TMZ:0000044C ; COMDAT (pick any)
.rtc$TMZ:0000044C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000044C _rtc$TMZ        ends
.rtc$TMZ:0000044C
.rtc$IMZ:00000450 ; ===========================================================================
.rtc$IMZ:00000450
.rtc$IMZ:00000450 ; Segment type: Pure data
.rtc$IMZ:00000450 ; Segment permissions: Read
.rtc$IMZ:00000450 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000450                 assume cs:_rtc$IMZ
.rtc$IMZ:00000450                 ;org 450h
.rtc$IMZ:00000450 ; COMDAT (pick any)
.rtc$IMZ:00000450 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000450 _rtc$IMZ        ends
.rtc$IMZ:00000450
.text:00000454 ; ===========================================================================
.text:00000454
.text:00000454 ; Segment type: Pure code
.text:00000454 ; Segment permissions: Read/Execute
.text:00000454 _text           segment para public 'CODE' use32
.text:00000454                 assume cs:_text
.text:00000454                 ;org 454h
.text:00000454 ; COMDAT (pick any)
.text:00000454                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000454
.text:00000454 ; =============== S U B R O U T I N E =======================================
.text:00000454
.text:00000454 ; Attributes: bp-based frame
.text:00000454
.text:00000454 ; void __thiscall NCrypto::NSha1::CHmac::Update(NCrypto::NSha1::CHmac *this, const unsigned __int8 *, unsigned int)
.text:00000454                 public ?Update@CHmac@NSha1@NCrypto@@QAEXPBEI@Z
.text:00000454 ?Update@CHmac@NSha1@NCrypto@@QAEXPBEI@Z proc near
.text:00000454                                         ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+80p
.text:00000454                                         ; NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+A2p ...
.text:00000454
.text:00000454 var_4           = dword ptr -4
.text:00000454 arg_0           = dword ptr  8
.text:00000454 arg_4           = dword ptr  0Ch
.text:00000454
.text:00000454                 push    ebp
.text:00000455                 mov     ebp, esp
.text:00000457                 push    ecx
.text:00000458                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000045F                 mov     [ebp+var_4], ecx
.text:00000462                 mov     eax, [ebp+arg_4]
.text:00000465                 push    eax             ; unsigned int
.text:00000466                 mov     ecx, [ebp+arg_0]
.text:00000469                 push    ecx             ; unsigned __int8 *
.text:0000046A                 mov     ecx, [ebp+var_4] ; this
.text:0000046D                 call    ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CContext::Update(uchar const *,uint)
.text:00000472                 add     esp, 4
.text:00000475                 cmp     ebp, esp
.text:00000477                 call    __RTC_CheckEsp
.text:0000047C                 mov     esp, ebp
.text:0000047E                 pop     ebp
.text:0000047F                 retn    8
.text:0000047F ?Update@CHmac@NSha1@NCrypto@@QAEXPBEI@Z endp
.text:0000047F
.text:0000047F ; ---------------------------------------------------------------------------
.text:00000482                 align 4
.text:00000482 _text           ends
.text:00000482
.text:00000484 ; ===========================================================================
.text:00000484
.text:00000484 ; Segment type: Pure code
.text:00000484 ; Segment permissions: Read/Execute
.text:00000484 _text           segment para public 'CODE' use32
.text:00000484                 assume cs:_text
.text:00000484                 ;org 484h
.text:00000484 ; COMDAT (pick any)
.text:00000484                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000484
.text:00000484 ; =============== S U B R O U T I N E =======================================
.text:00000484
.text:00000484 ; Attributes: bp-based frame
.text:00000484
.text:00000484 ; void __thiscall NCrypto::NSha1::CContext::Update(NCrypto::NSha1::CContext *this, const unsigned __int8 *, unsigned int)
.text:00000484                 public ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z
.text:00000484 ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z proc near
.text:00000484                                         ; CODE XREF: NCrypto::NSha1::CHmac::Update(uchar const *,uint)+19p
.text:00000484
.text:00000484 var_4           = dword ptr -4
.text:00000484 arg_0           = dword ptr  8
.text:00000484 arg_4           = dword ptr  0Ch
.text:00000484
.text:00000484                 push    ebp
.text:00000485                 mov     ebp, esp
.text:00000487                 push    ecx
.text:00000488                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000048F                 mov     [ebp+var_4], ecx
.text:00000492                 mov     eax, [ebp+arg_4]
.text:00000495                 push    eax
.text:00000496                 mov     ecx, [ebp+arg_0]
.text:00000499                 push    ecx
.text:0000049A                 mov     edx, [ebp+var_4]
.text:0000049D                 push    edx
.text:0000049E                 call    _Sha1_Update@12 ; Sha1_Update(x,x,x)
.text:000004A3                 add     esp, 4
.text:000004A6                 cmp     ebp, esp
.text:000004A8                 call    __RTC_CheckEsp
.text:000004AD                 mov     esp, ebp
.text:000004AF                 pop     ebp
.text:000004B0                 retn    8
.text:000004B0 ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z endp
.text:000004B0
.text:000004B0 ; ---------------------------------------------------------------------------
.text:000004B3                 align 4
.text:000004B3 _text           ends
.text:000004B3
.text:000004B4 ; ===========================================================================
.text:000004B4
.text:000004B4 ; Segment type: Pure code
.text:000004B4 ; Segment permissions: Read/Execute
.text:000004B4 _text           segment para public 'CODE' use32
.text:000004B4                 assume cs:_text
.text:000004B4                 ;org 4B4h
.text:000004B4 ; COMDAT (pick any)
.text:000004B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000004B4
.text:000004B4 ; =============== S U B R O U T I N E =======================================
.text:000004B4
.text:000004B4 ; Attributes: bp-based frame
.text:000004B4
.text:000004B4 ; void __thiscall NCrypto::NSha1::CHmac32::Update(NCrypto::NSha1::CHmac32 *this, const unsigned int *, unsigned int)
.text:000004B4                 public ?Update@CHmac32@NSha1@NCrypto@@QAEXPBII@Z
.text:000004B4 ?Update@CHmac32@NSha1@NCrypto@@QAEXPBII@Z proc near
.text:000004B4                                         ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac32(uchar const *,uint,uint const *,uint,uint,uint *,uint)+80p
.text:000004B4                                         ; NCrypto::NSha1::Pbkdf2Hmac32(uchar const *,uint,uint const *,uint,uint,uint *,uint)+A0p
.text:000004B4
.text:000004B4 var_4           = dword ptr -4
.text:000004B4 arg_0           = dword ptr  8
.text:000004B4 arg_4           = dword ptr  0Ch
.text:000004B4
.text:000004B4                 push    ebp
.text:000004B5                 mov     ebp, esp
.text:000004B7                 push    ecx
.text:000004B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004BF                 mov     [ebp+var_4], ecx
.text:000004C2                 mov     eax, [ebp+arg_4]
.text:000004C5                 push    eax             ; unsigned int
.text:000004C6                 mov     ecx, [ebp+arg_0]
.text:000004C9                 push    ecx             ; unsigned int *
.text:000004CA                 mov     ecx, [ebp+var_4] ; this
.text:000004CD                 call    ?Update@CContext32@NSha1@NCrypto@@QAEXPBII@Z ; NCrypto::NSha1::CContext32::Update(uint const *,uint)
.text:000004D2                 add     esp, 4
.text:000004D5                 cmp     ebp, esp
.text:000004D7                 call    __RTC_CheckEsp
.text:000004DC                 mov     esp, ebp
.text:000004DE                 pop     ebp
.text:000004DF                 retn    8
.text:000004DF ?Update@CHmac32@NSha1@NCrypto@@QAEXPBII@Z endp
.text:000004DF
.text:000004DF ; ---------------------------------------------------------------------------
.text:000004E2                 align 4
.text:000004E2 _text           ends
.text:000004E2
.text:000004E4 ; ===========================================================================
.text:000004E4
.text:000004E4 ; Segment type: Pure code
.text:000004E4 ; Segment permissions: Read/Execute
.text:000004E4 _text           segment para public 'CODE' use32
.text:000004E4                 assume cs:_text
.text:000004E4                 ;org 4E4h
.text:000004E4 ; COMDAT (pick any)
.text:000004E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000004E4
.text:000004E4 ; =============== S U B R O U T I N E =======================================
.text:000004E4
.text:000004E4 ; Attributes: bp-based frame
.text:000004E4
.text:000004E4 ; void __thiscall NCrypto::NSha1::CContext32::Update(NCrypto::NSha1::CContext32 *this, const unsigned int *, unsigned int)
.text:000004E4                 public ?Update@CContext32@NSha1@NCrypto@@QAEXPBII@Z
.text:000004E4 ?Update@CContext32@NSha1@NCrypto@@QAEXPBII@Z proc near
.text:000004E4                                         ; CODE XREF: NCrypto::NSha1::CHmac32::Update(uint const *,uint)+19p
.text:000004E4
.text:000004E4 var_4           = dword ptr -4
.text:000004E4 arg_0           = dword ptr  8
.text:000004E4 arg_4           = dword ptr  0Ch
.text:000004E4
.text:000004E4                 push    ebp
.text:000004E5                 mov     ebp, esp
.text:000004E7                 push    ecx
.text:000004E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004EF                 mov     [ebp+var_4], ecx
.text:000004F2                 mov     eax, [ebp+arg_4]
.text:000004F5                 push    eax
.text:000004F6                 mov     ecx, [ebp+arg_0]
.text:000004F9                 push    ecx
.text:000004FA                 mov     edx, [ebp+var_4]
.text:000004FD                 push    edx
.text:000004FE                 call    _Sha1_32_Update@12 ; Sha1_32_Update(x,x,x)
.text:00000503                 add     esp, 4
.text:00000506                 cmp     ebp, esp
.text:00000508                 call    __RTC_CheckEsp
.text:0000050D                 mov     esp, ebp
.text:0000050F                 pop     ebp
.text:00000510                 retn    8
.text:00000510 ?Update@CContext32@NSha1@NCrypto@@QAEXPBII@Z endp
.text:00000510
.text:00000510 _text           ends
.text:00000510
UNDEF:00000520 ; ===========================================================================
UNDEF:00000520
UNDEF:00000520 ; Segment type: Externs
UNDEF:00000520 ; UNDEF
UNDEF:00000520 ; void __thiscall NCrypto::NSha1::CHmac::Final(NCrypto::NSha1::CHmac *__hidden this, unsigned __int8 *, unsigned int)
UNDEF:00000520                 extrn ?Final@CHmac@NSha1@NCrypto@@QAEXPAEI@Z:near
UNDEF:00000520                                         ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+B6p
UNDEF:00000520                                         ; NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+182p
UNDEF:00000524 ; void __thiscall NCrypto::NSha1::CHmac::SetKey(NCrypto::NSha1::CHmac *__hidden this, const unsigned __int8 *, unsigned int)
UNDEF:00000524                 extrn ?SetKey@CHmac@NSha1@NCrypto@@QAEXPBEI@Z:near
UNDEF:00000524                                         ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+35p
UNDEF:00000528                 extrn ___security_cookie:near
UNDEF:00000528                                         ; DATA XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+1Dr
UNDEF:00000528                                         ; NCrypto::NSha1::Pbkdf2Hmac32(uchar const *,uint,uint const *,uint,uint,uint *,uint)+1Dr
UNDEF:0000052C                 extrn __RTC_CheckEsp:near
UNDEF:0000052C                                         ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+220p
UNDEF:0000052C                                         ; NCrypto::NSha1::Pbkdf2Hmac32(uchar const *,uint,uint const *,uint,uint,uint *,uint)+195p ...
UNDEF:00000530 ; __fastcall __security_check_cookie(x)
UNDEF:00000530                 extrn @__security_check_cookie@4:near
UNDEF:00000530                                         ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+213p
UNDEF:00000530                                         ; NCrypto::NSha1::Pbkdf2Hmac32(uchar const *,uint,uint const *,uint,uint,uint *,uint)+188p
UNDEF:00000534 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000534                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000534                                         ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac(uchar const *,uint,uchar const *,uint,uint,uchar *,uint)+205p
UNDEF:00000534                                         ; NCrypto::NSha1::Pbkdf2Hmac32(uchar const *,uint,uint const *,uint,uint,uint *,uint)+17Ap
UNDEF:00000538                 extrn __RTC_Shutdown:near
UNDEF:00000538                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000053C                 extrn __RTC_InitBase:near
UNDEF:0000053C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000540 ; __stdcall Sha1_Update(x, x, x)
UNDEF:00000540                 extrn _Sha1_Update@12:near
UNDEF:00000540                                         ; CODE XREF: NCrypto::NSha1::CContext::Update(uchar const *,uint)+1Ap
UNDEF:00000544 ; void __thiscall NCrypto::NSha1::CHmac32::GetLoopXorDigest(NCrypto::NSha1::CHmac32 *__hidden this, unsigned int *, unsigned int)
UNDEF:00000544                 extrn ?GetLoopXorDigest@CHmac32@NSha1@NCrypto@@QAEXPAII@Z:near
UNDEF:00000544                                         ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac32(uchar const *,uint,uint const *,uint,uint,uint *,uint)+E0p
UNDEF:00000548 ; void __thiscall NCrypto::NSha1::CHmac32::Final(NCrypto::NSha1::CHmac32 *__hidden this, unsigned int *, unsigned int)
UNDEF:00000548                 extrn ?Final@CHmac32@NSha1@NCrypto@@QAEXPAII@Z:near
UNDEF:00000548                                         ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac32(uchar const *,uint,uint const *,uint,uint,uint *,uint)+B4p
UNDEF:0000054C ; void __thiscall NCrypto::NSha1::CHmac32::SetKey(NCrypto::NSha1::CHmac32 *__hidden this, const unsigned __int8 *, unsigned int)
UNDEF:0000054C                 extrn ?SetKey@CHmac32@NSha1@NCrypto@@QAEXPBEI@Z:near
UNDEF:0000054C                                         ; CODE XREF: NCrypto::NSha1::Pbkdf2Hmac32(uchar const *,uint,uint const *,uint,uint,uint *,uint)+35p
UNDEF:00000550 ; __stdcall Sha1_32_Update(x, x, x)
UNDEF:00000550                 extrn _Sha1_32_Update@12:near
UNDEF:00000550                                         ; CODE XREF: NCrypto::NSha1::CContext32::Update(uint const *,uint)+1Ap
UNDEF:00000550
UNDEF:00000550
UNDEF:00000550                 end