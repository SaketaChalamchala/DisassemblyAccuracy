.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 62CB42ABDF4649CAA0159D250979373B
.text:00000000 ; Input CRC32 : A5FB735A
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\7zDecode.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __stdcall NArchive::N7z::CDecProgress::SetRatioInfo(NArchive::N7z::CDecProgress *this, const unsigned __int64 *, const unsigned __int64 *)
.text:00000000                 public ?SetRatioInfo@CDecProgress@N7z@NArchive@@UAGJPB_K0@Z
.text:00000000 ?SetRatioInfo@CDecProgress@N7z@NArchive@@UAGJPB_K0@Z proc near
.text:00000000                                         ; DATA XREF: .rdata:0000336Co
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000 this            = dword ptr  8
.text:00000000 arg_8           = dword ptr  10h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 push    esi
.text:00000005                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000C                 mov     ecx, [ebp+this]
.text:0000000F                 add     ecx, 8
.text:00000012                 call    ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator->(void)
.text:00000017                 mov     [ebp+var_4], eax
.text:0000001A                 mov     esi, esp
.text:0000001C                 mov     eax, [ebp+arg_8]
.text:0000001F                 push    eax
.text:00000020                 push    0
.text:00000022                 mov     ecx, [ebp+var_4]
.text:00000025                 push    ecx
.text:00000026                 mov     edx, [ebp+var_4]
.text:00000029                 mov     eax, [edx]
.text:0000002B                 mov     ecx, [eax+0Ch]
.text:0000002E                 call    ecx
.text:00000030                 cmp     esi, esp
.text:00000032                 call    __RTC_CheckEsp
.text:00000037                 pop     esi
.text:00000038                 add     esp, 4
.text:0000003B                 cmp     ebp, esp
.text:0000003D                 call    __RTC_CheckEsp
.text:00000042                 mov     esp, ebp
.text:00000044                 pop     ebp
.text:00000045                 retn    0Ch
.text:00000045 ?SetRatioInfo@CDecProgress@N7z@NArchive@@UAGJPB_K0@Z endp
.text:00000045
.text:00000045 ; ---------------------------------------------------------------------------
.text:00000048                 align 10h
.text:00000050
.text:00000050 ; =============== S U B R O U T I N E =======================================
.text:00000050
.text:00000050 ; Attributes: bp-based frame
.text:00000050
.text:00000050 ; _DWORD __thiscall NArchive::N7z::CDecoder::CDecoder(NArchive::N7z::CDecoder *this, bool)
.text:00000050                 public ??0CDecoder@N7z@NArchive@@QAE@_N@Z
.text:00000050 ??0CDecoder@N7z@NArchive@@QAE@_N@Z proc near
.text:00000050
.text:00000050 var_10          = dword ptr -10h
.text:00000050 var_C           = dword ptr -0Ch
.text:00000050 var_4           = dword ptr -4
.text:00000050 arg_0           = byte ptr  8
.text:00000050
.text:00000050                 push    ebp
.text:00000051                 mov     ebp, esp
.text:00000053                 push    0FFFFFFFFh
.text:00000055                 push    offset __ehhandler$??0CDecoder@N7z@NArchive@@QAE@_N@Z
.text:0000005A                 mov     eax, large fs:0
.text:00000060                 push    eax
.text:00000061                 push    ecx
.text:00000062
.text:00000062 loc_62:                                 ; DATA XREF: .rdata$r:00002B18o
.text:00000062                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000069                 mov     eax, dword ptr ds:___security_cookie
.text:0000006E                 xor     eax, ebp
.text:00000070                 push    eax
.text:00000071                 lea     eax, [ebp+var_C]
.text:00000074                 mov     large fs:0, eax
.text:0000007A                 mov     [ebp+var_10], ecx
.text:0000007D                 mov     eax, [ebp+var_10]
.text:00000080                 mov     byte ptr [eax], 0
.text:00000083                 mov     ecx, [ebp+var_10]
.text:00000086                 add     ecx, 4          ; this
.text:00000089                 call    ??0CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::CBindInfoEx(void)
.text:0000008E                 mov     [ebp+var_4], 0
.text:00000095                 mov     ecx, [ebp+var_10]
.text:00000098                 mov     dl, [ebp+arg_0]
.text:0000009B                 mov     [ecx+50h], dl
.text:0000009E                 mov     ecx, [ebp+var_10]
.text:000000A1                 add     ecx, 60h ; '`'
.text:000000A4                 call    ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>(void)
.text:000000A9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000000B0                 mov     eax, [ebp+var_10]
.text:000000B3                 mov     ecx, [ebp+var_C]
.text:000000B6                 mov     large fs:0, ecx
.text:000000BD                 pop     ecx
.text:000000BE                 add     esp, 10h
.text:000000C1                 cmp     ebp, esp
.text:000000C3                 call    __RTC_CheckEsp
.text:000000C8                 mov     esp, ebp
.text:000000CA                 pop     ebp
.text:000000CB                 retn    4
.text:000000CB ??0CDecoder@N7z@NArchive@@QAE@_N@Z endp
.text:000000CB
.text:000000CB ; ---------------------------------------------------------------------------
.text:000000CE                 align 10h
.text:000000D0
.text:000000D0 ; =============== S U B R O U T I N E =======================================
.text:000000D0
.text:000000D0 ; Attributes: bp-based frame
.text:000000D0
.text:000000D0 ; __int32 __stdcall NArchive::N7z::CLockedSequentialInStreamMT::Read(NArchive::N7z::CLockedSequentialInStreamMT *this, void *, unsigned int, unsigned int *)
.text:000000D0                 public ?Read@CLockedSequentialInStreamMT@N7z@NArchive@@UAGJPAXIPAI@Z
.text:000000D0 ?Read@CLockedSequentialInStreamMT@N7z@NArchive@@UAGJPAXIPAI@Z proc near
.text:000000D0                                         ; DATA XREF: .rdata:00003E1Co
.text:000000D0
.text:000000D0 var_38          = dword ptr -38h
.text:000000D0 var_34          = dword ptr -34h
.text:000000D0 var_30          = dword ptr -30h
.text:000000D0 var_2C          = dword ptr -2Ch
.text:000000D0 var_28          = dword ptr -28h
.text:000000D0 var_24          = dword ptr -24h
.text:000000D0 var_20          = dword ptr -20h
.text:000000D0 var_18          = dword ptr -18h
.text:000000D0 var_10          = dword ptr -10h
.text:000000D0 var_8           = byte ptr -8
.text:000000D0 this            = dword ptr  8
.text:000000D0 arg_4           = dword ptr  0Ch
.text:000000D0 arg_8           = dword ptr  10h
.text:000000D0 arg_C           = dword ptr  14h
.text:000000D0
.text:000000D0                 push    ebp
.text:000000D1                 mov     ebp, esp
.text:000000D3                 sub     esp, 38h
.text:000000D6                 push    esi
.text:000000D7                 push    edi
.text:000000D8                 lea     edi, [ebp+var_38]
.text:000000DB                 mov     ecx, 0Eh
.text:000000E0                 mov     eax, 0CCCCCCCCh
.text:000000E5                 rep stosd
.text:000000E7                 mov     eax, [ebp+this]
.text:000000EA                 mov     ecx, [eax+8]
.text:000000ED                 add     ecx, 18h
.text:000000F0                 push    ecx             ; struct NWindows::NSynchronization::CCriticalSection *
.text:000000F1                 lea     ecx, [ebp+var_8] ; this
.text:000000F4                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:000000F9                 mov     edx, [ebp+this]
.text:000000FC                 mov     eax, [edx+8]
.text:000000FF                 mov     ecx, [ebp+this]
.text:00000102                 mov     [ebp+var_2C], ecx
.text:00000105                 mov     [ebp+var_30], eax
.text:00000108                 mov     edx, [ebp+var_2C]
.text:0000010B                 mov     eax, [ebp+var_30]
.text:0000010E                 mov     ecx, [edx+10h]
.text:00000111                 cmp     ecx, [eax+10h]
.text:00000114                 jnz     short loc_124
.text:00000116                 mov     edx, [ebp+var_2C]
.text:00000119                 mov     eax, [ebp+var_30]
.text:0000011C                 mov     ecx, [edx+14h]
.text:0000011F                 cmp     ecx, [eax+14h]
.text:00000122                 jz      short loc_18F
.text:00000124
.text:00000124 loc_124:                                ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::Read(void *,uint,uint *)+44j
.text:00000124                 mov     edx, [ebp+this]
.text:00000127                 mov     ecx, [edx+8]
.text:0000012A                 add     ecx, 8
.text:0000012D                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00000132                 mov     [ebp+var_34], eax
.text:00000135                 mov     esi, esp
.text:00000137                 push    0
.text:00000139                 push    0
.text:0000013B                 mov     eax, [ebp+this]
.text:0000013E                 mov     ecx, [eax+14h]
.text:00000141                 push    ecx
.text:00000142                 mov     edx, [eax+10h]
.text:00000145                 push    edx
.text:00000146                 mov     eax, [ebp+var_34]
.text:00000149                 push    eax
.text:0000014A                 mov     ecx, [ebp+var_34]
.text:0000014D                 mov     edx, [ecx]
.text:0000014F                 mov     eax, [edx+10h]
.text:00000152                 call    eax
.text:00000154                 cmp     esi, esp
.text:00000156                 call    __RTC_CheckEsp
.text:0000015B                 mov     [ebp+var_10], eax
.text:0000015E                 cmp     [ebp+var_10], 0
.text:00000162                 jz      short loc_17A
.text:00000164                 mov     ecx, [ebp+var_10]
.text:00000167                 mov     [ebp+var_24], ecx
.text:0000016A                 lea     ecx, [ebp+var_8] ; this
.text:0000016D                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00000172                 mov     eax, [ebp+var_24]
.text:00000175                 jmp     loc_218
.text:0000017A ; ---------------------------------------------------------------------------
.text:0000017A
.text:0000017A loc_17A:                                ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::Read(void *,uint,uint *)+92j
.text:0000017A                 mov     edx, [ebp+this]
.text:0000017D                 mov     eax, [edx+8]
.text:00000180                 mov     ecx, [ebp+this]
.text:00000183                 mov     edx, [ecx+10h]
.text:00000186                 mov     [eax+10h], edx
.text:00000189                 mov     ecx, [ecx+14h]
.text:0000018C                 mov     [eax+14h], ecx
.text:0000018F
.text:0000018F loc_18F:                                ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::Read(void *,uint,uint *)+52j
.text:0000018F                 mov     [ebp+var_18], 0
.text:00000196                 mov     edx, [ebp+this]
.text:00000199                 mov     ecx, [edx+8]
.text:0000019C                 add     ecx, 8
.text:0000019F                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:000001A4                 mov     [ebp+var_38], eax
.text:000001A7                 mov     esi, esp
.text:000001A9                 lea     eax, [ebp+var_18]
.text:000001AC                 push    eax
.text:000001AD                 mov     ecx, [ebp+arg_8]
.text:000001B0                 push    ecx
.text:000001B1                 mov     edx, [ebp+arg_4]
.text:000001B4                 push    edx
.text:000001B5                 mov     eax, [ebp+var_38]
.text:000001B8                 push    eax
.text:000001B9                 mov     ecx, [ebp+var_38]
.text:000001BC                 mov     edx, [ecx]
.text:000001BE                 mov     eax, [edx+0Ch]
.text:000001C1                 call    eax
.text:000001C3                 cmp     esi, esp
.text:000001C5                 call    __RTC_CheckEsp
.text:000001CA                 mov     [ebp+var_20], eax
.text:000001CD                 mov     ecx, [ebp+var_18]
.text:000001D0                 xor     edx, edx
.text:000001D2                 mov     eax, [ebp+this]
.text:000001D5                 add     ecx, [eax+10h]
.text:000001D8                 adc     edx, [eax+14h]
.text:000001DB                 mov     eax, [ebp+this]
.text:000001DE                 mov     [eax+10h], ecx
.text:000001E1                 mov     [eax+14h], edx
.text:000001E4                 mov     ecx, [ebp+this]
.text:000001E7                 mov     edx, [ecx+8]
.text:000001EA                 mov     eax, [ebp+this]
.text:000001ED                 mov     ecx, [eax+10h]
.text:000001F0                 mov     [edx+10h], ecx
.text:000001F3                 mov     eax, [eax+14h]
.text:000001F6                 mov     [edx+14h], eax
.text:000001F9                 cmp     [ebp+arg_C], 0
.text:000001FD                 jz      short loc_207
.text:000001FF                 mov     ecx, [ebp+arg_C]
.text:00000202                 mov     edx, [ebp+var_18]
.text:00000205                 mov     [ecx], edx
.text:00000207
.text:00000207 loc_207:                                ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::Read(void *,uint,uint *)+12Dj
.text:00000207                 mov     eax, [ebp+var_20]
.text:0000020A                 mov     [ebp+var_28], eax
.text:0000020D                 lea     ecx, [ebp+var_8] ; this
.text:00000210                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00000215                 mov     eax, [ebp+var_28]
.text:00000218
.text:00000218 loc_218:                                ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::Read(void *,uint,uint *)+A5j
.text:00000218                 push    edx
.text:00000219                 mov     ecx, ebp
.text:0000021B                 push    eax
.text:0000021C                 lea     edx, $LN10
.text:00000222                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000227                 pop     eax
.text:00000228                 pop     edx
.text:00000229                 pop     edi
.text:0000022A                 pop     esi
.text:0000022B                 add     esp, 38h
.text:0000022E                 cmp     ebp, esp
.text:00000230                 call    __RTC_CheckEsp
.text:00000235                 mov     esp, ebp
.text:00000237                 pop     ebp
.text:00000238                 retn    10h
.text:00000238 ?Read@CLockedSequentialInStreamMT@N7z@NArchive@@UAGJPAXIPAI@Z endp
.text:00000238
.text:00000238 ; ---------------------------------------------------------------------------
.text:0000023B                 align 4
.text:0000023C $LN10           dd 2                    ; DATA XREF: NArchive::N7z::CLockedSequentialInStreamMT::Read(void *,uint,uint *)+14Co
.text:00000240                 dd offset $LN9
.text:00000244 $LN9            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000240o
.text:0000024C                 dd offset $LN7          ; "lock"
.text:00000250                 dd 0FFFFFFE8h, 4
.text:00000258                 dd offset $LN8          ; "realProcessedSize"
.text:0000025C $LN8            db 'realProcessedSize',0 ; DATA XREF: .text:00000258o
.text:0000026E $LN7            db 'lock',0             ; DATA XREF: .text:0000024Co
.text:00000273                 align 10h
.text:00000280
.text:00000280 ; =============== S U B R O U T I N E =======================================
.text:00000280
.text:00000280 ; Attributes: bp-based frame
.text:00000280
.text:00000280 ; __int32 __stdcall NArchive::N7z::CLockedSequentialInStreamST::Read(NArchive::N7z::CLockedSequentialInStreamST *this, void *, unsigned int, unsigned int *)
.text:00000280                 public ?Read@CLockedSequentialInStreamST@N7z@NArchive@@UAGJPAXIPAI@Z
.text:00000280 ?Read@CLockedSequentialInStreamST@N7z@NArchive@@UAGJPAXIPAI@Z proc near
.text:00000280                                         ; DATA XREF: .rdata:00004128o
.text:00000280
.text:00000280 var_24          = dword ptr -24h
.text:00000280 var_20          = dword ptr -20h
.text:00000280 var_1C          = dword ptr -1Ch
.text:00000280 var_18          = dword ptr -18h
.text:00000280 var_14          = dword ptr -14h
.text:00000280 var_10          = dword ptr -10h
.text:00000280 var_C           = dword ptr -0Ch
.text:00000280 var_8           = dword ptr -8
.text:00000280 var_4           = dword ptr -4
.text:00000280 this            = dword ptr  8
.text:00000280 arg_4           = dword ptr  0Ch
.text:00000280 arg_8           = dword ptr  10h
.text:00000280 arg_C           = dword ptr  14h
.text:00000280
.text:00000280                 push    ebp
.text:00000281                 mov     ebp, esp
.text:00000283                 sub     esp, 24h
.text:00000286                 push    esi
.text:00000287                 mov     eax, 0CCCCCCCCh
.text:0000028C                 mov     [ebp+var_24], eax
.text:0000028F                 mov     [ebp+var_20], eax
.text:00000292                 mov     [ebp+var_1C], eax
.text:00000295                 mov     [ebp+var_18], eax
.text:00000298                 mov     [ebp+var_14], eax
.text:0000029B                 mov     [ebp+var_10], eax
.text:0000029E                 mov     [ebp+var_C], eax
.text:000002A1                 mov     [ebp+var_8], eax
.text:000002A4                 mov     [ebp+var_4], eax
.text:000002A7                 mov     eax, [ebp+this]
.text:000002AA                 mov     ecx, [eax+8]
.text:000002AD                 mov     edx, [ebp+this]
.text:000002B0                 mov     [ebp+var_18], edx
.text:000002B3                 mov     [ebp+var_1C], ecx
.text:000002B6                 mov     eax, [ebp+var_18]
.text:000002B9                 mov     ecx, [ebp+var_1C]
.text:000002BC                 mov     edx, [eax+10h]
.text:000002BF                 cmp     edx, [ecx+10h]
.text:000002C2                 jnz     short loc_2D2
.text:000002C4                 mov     eax, [ebp+var_18]
.text:000002C7                 mov     ecx, [ebp+var_1C]
.text:000002CA                 mov     edx, [eax+14h]
.text:000002CD                 cmp     edx, [ecx+14h]
.text:000002D0                 jz      short loc_32F
.text:000002D2
.text:000002D2 loc_2D2:                                ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamST::Read(void *,uint,uint *)+42j
.text:000002D2                 mov     eax, [ebp+this]
.text:000002D5                 mov     ecx, [eax+8]
.text:000002D8                 add     ecx, 8
.text:000002DB                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:000002E0                 mov     [ebp+var_20], eax
.text:000002E3                 mov     esi, esp
.text:000002E5                 push    0
.text:000002E7                 push    0
.text:000002E9                 mov     ecx, [ebp+this]
.text:000002EC                 mov     edx, [ecx+14h]
.text:000002EF                 push    edx
.text:000002F0                 mov     eax, [ecx+10h]
.text:000002F3                 push    eax
.text:000002F4                 mov     ecx, [ebp+var_20]
.text:000002F7                 push    ecx
.text:000002F8                 mov     edx, [ebp+var_20]
.text:000002FB                 mov     eax, [edx]
.text:000002FD                 mov     ecx, [eax+10h]
.text:00000300                 call    ecx
.text:00000302                 cmp     esi, esp
.text:00000304                 call    __RTC_CheckEsp
.text:00000309                 mov     [ebp+var_4], eax
.text:0000030C                 cmp     [ebp+var_4], 0
.text:00000310                 jz      short loc_31A
.text:00000312                 mov     eax, [ebp+var_4]
.text:00000315                 jmp     loc_3AA
.text:0000031A ; ---------------------------------------------------------------------------
.text:0000031A
.text:0000031A loc_31A:                                ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamST::Read(void *,uint,uint *)+90j
.text:0000031A                 mov     edx, [ebp+this]
.text:0000031D                 mov     eax, [edx+8]
.text:00000320                 mov     ecx, [ebp+this]
.text:00000323                 mov     edx, [ecx+10h]
.text:00000326                 mov     [eax+10h], edx
.text:00000329                 mov     ecx, [ecx+14h]
.text:0000032C                 mov     [eax+14h], ecx
.text:0000032F
.text:0000032F loc_32F:                                ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamST::Read(void *,uint,uint *)+50j
.text:0000032F                 mov     [ebp+var_C], 0
.text:00000336                 mov     edx, [ebp+this]
.text:00000339                 mov     ecx, [edx+8]
.text:0000033C                 add     ecx, 8
.text:0000033F                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00000344                 mov     [ebp+var_24], eax
.text:00000347                 mov     esi, esp
.text:00000349                 lea     eax, [ebp+var_C]
.text:0000034C                 push    eax
.text:0000034D                 mov     ecx, [ebp+arg_8]
.text:00000350                 push    ecx
.text:00000351                 mov     edx, [ebp+arg_4]
.text:00000354                 push    edx
.text:00000355                 mov     eax, [ebp+var_24]
.text:00000358                 push    eax
.text:00000359                 mov     ecx, [ebp+var_24]
.text:0000035C                 mov     edx, [ecx]
.text:0000035E                 mov     eax, [edx+0Ch]
.text:00000361                 call    eax
.text:00000363                 cmp     esi, esp
.text:00000365                 call    __RTC_CheckEsp
.text:0000036A                 mov     [ebp+var_14], eax
.text:0000036D                 mov     ecx, [ebp+var_C]
.text:00000370                 xor     edx, edx
.text:00000372                 mov     eax, [ebp+this]
.text:00000375                 add     ecx, [eax+10h]
.text:00000378                 adc     edx, [eax+14h]
.text:0000037B                 mov     eax, [ebp+this]
.text:0000037E                 mov     [eax+10h], ecx
.text:00000381                 mov     [eax+14h], edx
.text:00000384                 mov     ecx, [ebp+this]
.text:00000387                 mov     edx, [ecx+8]
.text:0000038A                 mov     eax, [ebp+this]
.text:0000038D                 mov     ecx, [eax+10h]
.text:00000390                 mov     [edx+10h], ecx
.text:00000393                 mov     eax, [eax+14h]
.text:00000396                 mov     [edx+14h], eax
.text:00000399                 cmp     [ebp+arg_C], 0
.text:0000039D                 jz      short loc_3A7
.text:0000039F                 mov     ecx, [ebp+arg_C]
.text:000003A2                 mov     edx, [ebp+var_C]
.text:000003A5                 mov     [ecx], edx
.text:000003A7
.text:000003A7 loc_3A7:                                ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamST::Read(void *,uint,uint *)+11Dj
.text:000003A7                 mov     eax, [ebp+var_14]
.text:000003AA
.text:000003AA loc_3AA:                                ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamST::Read(void *,uint,uint *)+95j
.text:000003AA                 push    edx
.text:000003AB                 mov     ecx, ebp
.text:000003AD                 push    eax
.text:000003AE                 lea     edx, $LN9_0
.text:000003B4                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000003B9                 pop     eax
.text:000003BA                 pop     edx
.text:000003BB                 pop     esi
.text:000003BC                 add     esp, 24h
.text:000003BF                 cmp     ebp, esp
.text:000003C1                 call    __RTC_CheckEsp
.text:000003C6                 mov     esp, ebp
.text:000003C8                 pop     ebp
.text:000003C9                 retn    10h
.text:000003C9 ?Read@CLockedSequentialInStreamST@N7z@NArchive@@UAGJPAXIPAI@Z endp
.text:000003C9
.text:000003C9 ; ---------------------------------------------------------------------------
.text:000003CC $LN9_0          dd 1                    ; DATA XREF: NArchive::N7z::CLockedSequentialInStreamST::Read(void *,uint,uint *)+12Eo
.text:000003D0                 dd offset $LN8_0
.text:000003D4 $LN8_0          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:000003D0o
.text:000003DC                 dd offset $LN7_0        ; "realProcessedSize"
.text:000003E0 $LN7_0          db 'realProcessedSize',0 ; DATA XREF: .text:000003DCo
.text:000003F2                 align 10h
.text:00000400
.text:00000400 ; =============== S U B R O U T I N E =======================================
.text:00000400
.text:00000400 ; Attributes: bp-based frame
.text:00000400
.text:00000400 ; __int32 __thiscall NArchive::N7z::CDecoder::Decode(NArchive::N7z::CDecoder *this, struct IInStream *, unsigned __int64, const struct NArchive::N7z::CFolders *, unsigned int, const unsigned __int64 *, struct ISequentialOutStream *, struct ICompressProgressInfo *, struct ISequentialInStream **, struct ICryptoGetTextPassword *, bool *, bool *, struct UString *, bool, unsigned int)
.text:00000400                 public ?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z
.text:00000400 ?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z proc near
.text:00000400
.text:00000400 var_2C8         = dword ptr -2C8h
.text:00000400 var_2C4         = dword ptr -2C4h
.text:00000400 var_2C0         = dword ptr -2C0h
.text:00000400 var_2BC         = dword ptr -2BCh
.text:00000400 var_2B8         = dword ptr -2B8h
.text:00000400 var_2B4         = dword ptr -2B4h
.text:00000400 var_2B0         = dword ptr -2B0h
.text:00000400 var_2AC         = dword ptr -2ACh
.text:00000400 var_2A8         = dword ptr -2A8h
.text:00000400 var_2A4         = dword ptr -2A4h
.text:00000400 var_2A0         = dword ptr -2A0h
.text:00000400 var_29C         = dword ptr -29Ch
.text:00000400 var_298         = dword ptr -298h
.text:00000400 var_294         = dword ptr -294h
.text:00000400 var_290         = dword ptr -290h
.text:00000400 var_28C         = dword ptr -28Ch
.text:00000400 var_288         = dword ptr -288h
.text:00000400 var_284         = dword ptr -284h
.text:00000400 var_280         = dword ptr -280h
.text:00000400 var_27C         = dword ptr -27Ch
.text:00000400 var_278         = dword ptr -278h
.text:00000400 var_274         = dword ptr -274h
.text:00000400 var_270         = dword ptr -270h
.text:00000400 var_26C         = dword ptr -26Ch
.text:00000400 var_268         = dword ptr -268h
.text:00000400 var_264         = dword ptr -264h
.text:00000400 var_260         = dword ptr -260h
.text:00000400 var_25C         = dword ptr -25Ch
.text:00000400 var_258         = dword ptr -258h
.text:00000400 var_254         = dword ptr -254h
.text:00000400 var_250         = dword ptr -250h
.text:00000400 var_24C         = dword ptr -24Ch
.text:00000400 var_248         = dword ptr -248h
.text:00000400 var_244         = dword ptr -244h
.text:00000400 var_240         = dword ptr -240h
.text:00000400 var_23C         = dword ptr -23Ch
.text:00000400 var_238         = dword ptr -238h
.text:00000400 var_234         = dword ptr -234h
.text:00000400 var_230         = dword ptr -230h
.text:00000400 var_22C         = dword ptr -22Ch
.text:00000400 var_228         = dword ptr -228h
.text:00000400 var_224         = dword ptr -224h
.text:00000400 var_220         = dword ptr -220h
.text:00000400 var_21C         = dword ptr -21Ch
.text:00000400 var_218         = dword ptr -218h
.text:00000400 var_214         = dword ptr -214h
.text:00000400 var_210         = dword ptr -210h
.text:00000400 var_20C         = dword ptr -20Ch
.text:00000400 var_208         = dword ptr -208h
.text:00000400 var_204         = dword ptr -204h
.text:00000400 var_200         = dword ptr -200h
.text:00000400 var_1FC         = dword ptr -1FCh
.text:00000400 var_1F8         = dword ptr -1F8h
.text:00000400 var_1F0         = dword ptr -1F0h
.text:00000400 var_1E4         = byte ptr -1E4h
.text:00000400 var_1D8         = byte ptr -1D8h
.text:00000400 var_1D0         = dword ptr -1D0h
.text:00000400 var_1CC         = dword ptr -1CCh
.text:00000400 var_1C8         = dword ptr -1C8h
.text:00000400 var_1C4         = dword ptr -1C4h
.text:00000400 var_1C0         = dword ptr -1C0h
.text:00000400 var_1BC         = qword ptr -1BCh
.text:00000400 var_1B0         = byte ptr -1B0h
.text:00000400 var_1A8         = dword ptr -1A8h
.text:00000400 var_1A4         = dword ptr -1A4h
.text:00000400 var_19D         = byte ptr -19Dh
.text:00000400 var_198         = byte ptr -198h
.text:00000400 var_190         = dword ptr -190h
.text:00000400 var_188         = byte ptr -188h
.text:00000400 var_178         = dword ptr -178h
.text:00000400 var_174         = dword ptr -174h
.text:00000400 var_170         = dword ptr -170h
.text:00000400 var_16C         = dword ptr -16Ch
.text:00000400 var_164         = byte ptr -164h
.text:00000400 var_158         = byte ptr -158h
.text:00000400 var_150         = dword ptr -150h
.text:00000400 var_14C         = dword ptr -14Ch
.text:00000400 var_144         = byte ptr -144h
.text:00000400 var_13C         = dword ptr -13Ch
.text:00000400 var_138         = word ptr -138h
.text:00000400 var_134         = dword ptr -134h
.text:00000400 var_12C         = byte ptr -12Ch
.text:00000400 var_120         = dword ptr -120h
.text:00000400 var_11C         = dword ptr -11Ch
.text:00000400 var_114         = byte ptr -114h
.text:00000400 var_108         = byte ptr -108h
.text:00000400 var_100         = dword ptr -100h
.text:00000400 var_F8          = byte ptr -0F8h
.text:00000400 var_F0          = dword ptr -0F0h
.text:00000400 var_EC          = dword ptr -0ECh
.text:00000400 var_E8          = dword ptr -0E8h
.text:00000400 var_E4          = dword ptr -0E4h
.text:00000400 var_DC          = byte ptr -0DCh
.text:00000400 var_D4          = dword ptr -0D4h
.text:00000400 var_D0          = dword ptr -0D0h
.text:00000400 var_CC          = dword ptr -0CCh
.text:00000400 var_C8          = dword ptr -0C8h
.text:00000400 var_C4          = dword ptr -0C4h
.text:00000400 var_C0          = dword ptr -0C0h
.text:00000400 var_B8          = byte ptr -0B8h
.text:00000400 var_B4          = byte ptr -0B4h
.text:00000400 var_AC          = dword ptr -0ACh
.text:00000400 var_A4          = dword ptr -0A4h
.text:00000400 var_A0          = dword ptr -0A0h
.text:00000400 var_9C          = dword ptr -9Ch
.text:00000400 var_95          = byte ptr -95h
.text:00000400 var_94          = dword ptr -94h
.text:00000400 var_90          = dword ptr -90h
.text:00000400 var_88          = byte ptr -88h
.text:00000400 var_64          = dword ptr -64h
.text:00000400 var_34          = dword ptr -34h
.text:00000400 var_2C          = byte ptr -2Ch
.text:00000400 var_24          = byte ptr -24h
.text:00000400 var_14          = dword ptr -14h
.text:00000400 var_10          = dword ptr -10h
.text:00000400 var_C           = dword ptr -0Ch
.text:00000400 var_4           = dword ptr -4
.text:00000400 arg_0           = dword ptr  8
.text:00000400 arg_4           = qword ptr  0Ch
.text:00000400 arg_C           = dword ptr  14h
.text:00000400 arg_10          = dword ptr  18h
.text:00000400 arg_14          = dword ptr  1Ch
.text:00000400 arg_18          = dword ptr  20h
.text:00000400 arg_1C          = dword ptr  24h
.text:00000400 arg_20          = dword ptr  28h
.text:00000400 arg_24          = dword ptr  2Ch
.text:00000400 arg_28          = dword ptr  30h
.text:00000400 arg_2C          = dword ptr  34h
.text:00000400 arg_30          = dword ptr  38h
.text:00000400 arg_34          = byte ptr  3Ch
.text:00000400 arg_38          = dword ptr  40h
.text:00000400
.text:00000400                 push    ebp
.text:00000401                 mov     ebp, esp
.text:00000403                 push    0FFFFFFFFh
.text:00000405                 push    offset __ehhandler$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z
.text:0000040A                 mov     eax, large fs:0
.text:00000410                 push    eax
.text:00000411                 sub     esp, 2BCh
.text:00000417                 push    ebx
.text:00000418                 push    esi
.text:00000419                 push    edi
.text:0000041A                 push    ecx
.text:0000041B                 lea     edi, [ebp+var_2C8]
.text:00000421                 mov     ecx, 0AFh ; '»'
.text:00000426                 mov     eax, 0CCCCCCCCh
.text:0000042B                 rep stosd
.text:0000042D                 pop     ecx
.text:0000042E                 mov     eax, dword ptr ds:___security_cookie
.text:00000433                 xor     eax, ebp
.text:00000435                 push    eax
.text:00000436                 lea     eax, [ebp+var_C]
.text:00000439                 mov     large fs:0, eax
.text:0000043F                 mov     [ebp+var_10], ecx
.text:00000442                 mov     ecx, [ebp+arg_C]
.text:00000445                 add     ecx, 8
.text:00000448                 call    ??B?$CObjArray@_K@@QBEPB_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 const *(void)
.text:0000044D                 mov     esi, eax
.text:0000044F                 mov     ecx, [ebp+arg_C]
.text:00000452                 add     ecx, 30h ; '0'
.text:00000455                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:0000045A                 mov     ecx, [ebp+arg_10]
.text:0000045D                 mov     edx, [eax+ecx*4]
.text:00000460                 lea     eax, [esi+edx*8]
.text:00000463                 mov     [ebp+var_14], eax
.text:00000466                 lea     ecx, [ebp+var_34] ; this
.text:00000469                 call    ??0CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::CFolderEx(void)
.text:0000046E                 mov     [ebp+var_4], 0
.text:00000475                 lea     ecx, [ebp+var_34]
.text:00000478                 push    ecx             ; struct NArchive::N7z::CFolderEx *
.text:00000479                 mov     edx, [ebp+arg_10]
.text:0000047C                 push    edx             ; unsigned int
.text:0000047D                 mov     ecx, [ebp+arg_C] ; this
.text:00000480                 call    ?ParseFolderEx@CFolders@N7z@NArchive@@QBEXIAAUCFolderEx@23@@Z ; NArchive::N7z::CFolders::ParseFolderEx(uint,NArchive::N7z::CFolderEx &)
.text:00000485                 lea     ecx, [ebp+var_34] ; this
.text:00000488                 call    ?IsDecodingSupported@CFolder@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CFolder::IsDecodingSupported(void)
.text:0000048D                 movzx   eax, al
.text:00000490                 test    eax, eax
.text:00000492                 jnz     short loc_4B8
.text:00000494                 mov     [ebp+var_1F8], 80004001h
.text:0000049E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000004A5                 lea     ecx, [ebp+var_34] ; this
.text:000004A8                 call    ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text:000004AD                 mov     eax, [ebp+var_1F8]
.text:000004B3                 jmp     loc_1A2D
.text:000004B8 ; ---------------------------------------------------------------------------
.text:000004B8
.text:000004B8 loc_4B8:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+92j
.text:000004B8                 lea     ecx, [ebp+var_88] ; this
.text:000004BE                 call    ??0CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::CBindInfoEx(void)
.text:000004C3                 mov     byte ptr [ebp+var_4], 1
.text:000004C7                 lea     ecx, [ebp+var_88]
.text:000004CD                 push    ecx             ; NArchive::N7z::CBindInfoEx *
.text:000004CE                 lea     edx, [ebp+var_34]
.text:000004D1                 push    edx             ; int
.text:000004D2                 call    ?Convert_FolderInfo_to_BindInfo@N7z@NArchive@@YGXABUCFolderEx@12@AAUCBindInfoEx@12@@Z ; NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)
.text:000004D7                 lea     ecx, [ebp+var_88] ; this
.text:000004DD                 call    ?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ ; NCoderMixer2::CBindInfo::CalcMapsAndCheck(void)
.text:000004E2                 movzx   eax, al
.text:000004E5                 test    eax, eax
.text:000004E7                 jnz     short loc_51C
.text:000004E9                 mov     [ebp+var_1FC], 80004001h
.text:000004F3                 mov     byte ptr [ebp+var_4], 0
.text:000004F7                 lea     ecx, [ebp+var_88] ; this
.text:000004FD                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:00000502                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000509                 lea     ecx, [ebp+var_34] ; this
.text:0000050C                 call    ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text:00000511                 mov     eax, [ebp+var_1FC]
.text:00000517                 jmp     loc_1A2D
.text:0000051C ; ---------------------------------------------------------------------------
.text:0000051C
.text:0000051C loc_51C:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+E7j
.text:0000051C                 mov     ecx, [ebp+arg_10]
.text:0000051F                 push    ecx             ; unsigned int
.text:00000520                 mov     ecx, [ebp+arg_C] ; this
.text:00000523                 call    ?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CFolders::GetFolderUnpackSize(uint)
.text:00000528                 mov     [ebp+var_94], eax
.text:0000052E                 mov     [ebp+var_90], edx
.text:00000534                 mov     [ebp+var_95], 1
.text:0000053B                 cmp     [ebp+arg_14], 0
.text:0000053F                 jz      loc_5F0
.text:00000545                 mov     edx, [ebp+arg_14]
.text:00000548                 mov     [ebp+var_27C], edx
.text:0000054E                 mov     eax, [ebp+var_27C]
.text:00000554                 mov     ecx, [eax+4]
.text:00000557                 cmp     ecx, [ebp+var_90]
.text:0000055D                 jb      short loc_5A4
.text:0000055F                 ja      short loc_571
.text:00000561                 mov     edx, [ebp+var_27C]
.text:00000567                 mov     eax, [edx]
.text:00000569                 cmp     eax, [ebp+var_94]
.text:0000056F                 jbe     short loc_5A4
.text:00000571
.text:00000571 loc_571:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+15Fj
.text:00000571                 mov     [ebp+var_200], 80004005h
.text:0000057B                 mov     byte ptr [ebp+var_4], 0
.text:0000057F                 lea     ecx, [ebp+var_88] ; this
.text:00000585                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:0000058A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000591                 lea     ecx, [ebp+var_34] ; this
.text:00000594                 call    ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text:00000599                 mov     eax, [ebp+var_200]
.text:0000059F                 jmp     loc_1A2D
.text:000005A4 ; ---------------------------------------------------------------------------
.text:000005A4
.text:000005A4 loc_5A4:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+15Dj
.text:000005A4                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+16Fj
.text:000005A4                 mov     ecx, [ebp+arg_14]
.text:000005A7                 mov     [ebp+var_280], ecx
.text:000005AD                 mov     edx, [ebp+var_280]
.text:000005B3                 mov     eax, [edx]
.text:000005B5                 cmp     eax, [ebp+var_94]
.text:000005BB                 jnz     short loc_5DA
.text:000005BD                 mov     ecx, [ebp+var_280]
.text:000005C3                 mov     edx, [ecx+4]
.text:000005C6                 cmp     edx, [ebp+var_90]
.text:000005CC                 jnz     short loc_5DA
.text:000005CE                 mov     [ebp+var_284], 1
.text:000005D8                 jmp     short loc_5E4
.text:000005DA ; ---------------------------------------------------------------------------
.text:000005DA
.text:000005DA loc_5DA:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1BBj
.text:000005DA                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1CCj
.text:000005DA                 mov     [ebp+var_284], 0
.text:000005E4
.text:000005E4 loc_5E4:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1D8j
.text:000005E4                 mov     al, byte ptr [ebp+var_284]
.text:000005EA                 mov     [ebp+var_95], al
.text:000005F0
.text:000005F0 loc_5F0:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+13Fj
.text:000005F0                 mov     ecx, [ebp+var_10]
.text:000005F3                 movzx   edx, byte ptr [ecx]
.text:000005F6                 test    edx, edx
.text:000005F8                 jz      short loc_618
.text:000005FA                 mov     eax, [ebp+var_10]
.text:000005FD                 add     eax, 4
.text:00000600                 push    eax
.text:00000601                 lea     ecx, [ebp+var_88]
.text:00000607                 push    ecx
.text:00000608                 call    ?AreBindInfoExEqual@N7z@NArchive@@YG_NABUCBindInfoEx@12@0@Z ; NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)
.text:0000060D                 movzx   edx, al
.text:00000610                 test    edx, edx
.text:00000612                 jnz     loc_9D0
.text:00000618
.text:00000618 loc_618:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1F8j
.text:00000618                 mov     ecx, [ebp+var_10]
.text:0000061B                 add     ecx, 60h ; '`'
.text:0000061E                 call    ?Release@?$CMyComPtr@UIUnknown@@@@QAEXXZ ; CMyComPtr<IUnknown>::Release(void)
.text:00000623                 mov     eax, [ebp+var_10]
.text:00000626                 movzx   ecx, byte ptr [eax+50h]
.text:0000062A                 test    ecx, ecx
.text:0000062C                 jz      loc_6E0
.text:00000632                 push    84h ; 'ä'       ; unsigned int
.text:00000637                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000063C                 add     esp, 4
.text:0000063F                 mov     [ebp+var_208], eax
.text:00000645                 mov     byte ptr [ebp+var_4], 2
.text:00000649                 cmp     [ebp+var_208], 0
.text:00000650                 jz      short loc_667
.text:00000652                 push    0               ; bool
.text:00000654                 mov     ecx, [ebp+var_208] ; this
.text:0000065A                 call    ??0CMixerMT@NCoderMixer2@@QAE@_N@Z ; NCoderMixer2::CMixerMT::CMixerMT(bool)
.text:0000065F                 mov     [ebp+var_288], eax
.text:00000665                 jmp     short loc_671
.text:00000667 ; ---------------------------------------------------------------------------
.text:00000667
.text:00000667 loc_667:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+250j
.text:00000667                 mov     [ebp+var_288], 0
.text:00000671
.text:00000671 loc_671:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+265j
.text:00000671                 mov     edx, [ebp+var_288]
.text:00000677                 mov     [ebp+var_204], edx
.text:0000067D                 mov     byte ptr [ebp+var_4], 1
.text:00000681                 mov     eax, [ebp+var_10]
.text:00000684                 mov     ecx, [ebp+var_204]
.text:0000068A                 mov     [eax+58h], ecx
.text:0000068D                 mov     edx, [ebp+var_10]
.text:00000690                 mov     eax, [edx+58h]
.text:00000693                 push    eax
.text:00000694                 mov     ecx, [ebp+var_10]
.text:00000697                 add     ecx, 60h ; '`'
.text:0000069A                 call    ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=(IUnknown *)
.text:0000069F                 mov     ecx, [ebp+var_10]
.text:000006A2                 mov     edx, [ecx+58h]
.text:000006A5                 mov     [ebp+var_28C], edx
.text:000006AB                 cmp     [ebp+var_28C], 0
.text:000006B2                 jz      short loc_6C5
.text:000006B4                 mov     eax, [ebp+var_28C]
.text:000006BA                 add     eax, 4
.text:000006BD                 mov     [ebp+var_290], eax
.text:000006C3                 jmp     short loc_6CF
.text:000006C5 ; ---------------------------------------------------------------------------
.text:000006C5
.text:000006C5 loc_6C5:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+2B2j
.text:000006C5                 mov     [ebp+var_290], 0
.text:000006CF
.text:000006CF loc_6CF:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+2C3j
.text:000006CF                 mov     ecx, [ebp+var_10]
.text:000006D2                 mov     edx, [ebp+var_290]
.text:000006D8                 mov     [ecx+5Ch], edx
.text:000006DB                 jmp     loc_789
.text:000006E0 ; ---------------------------------------------------------------------------
.text:000006E0
.text:000006E0 loc_6E0:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+22Cj
.text:000006E0                 push    84h ; 'ä'       ; unsigned int
.text:000006E5                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000006EA                 add     esp, 4
.text:000006ED                 mov     [ebp+var_210], eax
.text:000006F3                 mov     byte ptr [ebp+var_4], 3
.text:000006F7                 cmp     [ebp+var_210], 0
.text:000006FE                 jz      short loc_715
.text:00000700                 push    0               ; bool
.text:00000702                 mov     ecx, [ebp+var_210] ; this
.text:00000708                 call    ??0CMixerST@NCoderMixer2@@QAE@_N@Z ; NCoderMixer2::CMixerST::CMixerST(bool)
.text:0000070D                 mov     [ebp+var_294], eax
.text:00000713                 jmp     short loc_71F
.text:00000715 ; ---------------------------------------------------------------------------
.text:00000715
.text:00000715 loc_715:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+2FEj
.text:00000715                 mov     [ebp+var_294], 0
.text:0000071F
.text:0000071F loc_71F:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+313j
.text:0000071F                 mov     eax, [ebp+var_294]
.text:00000725                 mov     [ebp+var_20C], eax
.text:0000072B                 mov     byte ptr [ebp+var_4], 1
.text:0000072F                 mov     ecx, [ebp+var_10]
.text:00000732                 mov     edx, [ebp+var_20C]
.text:00000738                 mov     [ecx+54h], edx
.text:0000073B                 mov     eax, [ebp+var_10]
.text:0000073E                 mov     ecx, [eax+54h]
.text:00000741                 push    ecx
.text:00000742                 mov     ecx, [ebp+var_10]
.text:00000745                 add     ecx, 60h ; '`'
.text:00000748                 call    ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=(IUnknown *)
.text:0000074D                 mov     edx, [ebp+var_10]
.text:00000750                 mov     eax, [edx+54h]
.text:00000753                 mov     [ebp+var_298], eax
.text:00000759                 cmp     [ebp+var_298], 0
.text:00000760                 jz      short loc_773
.text:00000762                 mov     ecx, [ebp+var_298]
.text:00000768                 add     ecx, 4
.text:0000076B                 mov     [ebp+var_29C], ecx
.text:00000771                 jmp     short loc_77D
.text:00000773 ; ---------------------------------------------------------------------------
.text:00000773
.text:00000773 loc_773:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+360j
.text:00000773                 mov     [ebp+var_29C], 0
.text:0000077D
.text:0000077D loc_77D:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+371j
.text:0000077D                 mov     edx, [ebp+var_10]
.text:00000780                 mov     eax, [ebp+var_29C]
.text:00000786                 mov     [edx+5Ch], eax
.text:00000789
.text:00000789 loc_789:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+2DBj
.text:00000789                 mov     esi, esp
.text:0000078B                 lea     ecx, [ebp+var_88]
.text:00000791                 push    ecx
.text:00000792                 mov     edx, [ebp+var_10]
.text:00000795                 mov     eax, [edx+5Ch]
.text:00000798                 mov     ecx, [ebp+var_10]
.text:0000079B                 mov     ecx, [ecx+5Ch]
.text:0000079E                 mov     edx, [eax]
.text:000007A0                 mov     eax, [edx]
.text:000007A2                 call    eax
.text:000007A4                 cmp     esi, esp
.text:000007A6                 call    __RTC_CheckEsp
.text:000007AB                 mov     [ebp+var_9C], eax
.text:000007B1                 cmp     [ebp+var_9C], 0
.text:000007B8                 jz      short loc_7EF
.text:000007BA                 mov     ecx, [ebp+var_9C]
.text:000007C0                 mov     [ebp+var_214], ecx
.text:000007C6                 mov     byte ptr [ebp+var_4], 0
.text:000007CA                 lea     ecx, [ebp+var_88] ; this
.text:000007D0                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:000007D5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000007DC                 lea     ecx, [ebp+var_34] ; this
.text:000007DF                 call    ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text:000007E4                 mov     eax, [ebp+var_214]
.text:000007EA                 jmp     loc_1A2D
.text:000007EF ; ---------------------------------------------------------------------------
.text:000007EF
.text:000007EF loc_7EF:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+3B8j
.text:000007EF                 mov     [ebp+var_A0], 0
.text:000007F9                 jmp     short loc_80A
.text:000007FB ; ---------------------------------------------------------------------------
.text:000007FB
.text:000007FB loc_7FB:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+5B3j
.text:000007FB                 mov     edx, [ebp+var_A0]
.text:00000801                 add     edx, 1
.text:00000804                 mov     [ebp+var_A0], edx
.text:0000080A
.text:0000080A loc_80A:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+3F9j
.text:0000080A                 lea     ecx, [ebp+var_34]
.text:0000080D                 call    ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size(void)
.text:00000812                 cmp     [ebp+var_A0], eax
.text:00000818                 jnb     loc_9B8
.text:0000081E                 lea     ecx, [ebp+var_34]
.text:00000821                 call    ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo *(void)
.text:00000826                 mov     ecx, [ebp+var_A0]
.text:0000082C                 imul    ecx, 18h
.text:0000082F                 add     eax, ecx
.text:00000831                 mov     [ebp+var_A4], eax
.text:00000837                 lea     ecx, [ebp+var_B8] ; this
.text:0000083D                 call    ??0CCreatedCoder@@QAE@XZ ; CCreatedCoder::CCreatedCoder(void)
.text:00000842                 mov     byte ptr [ebp+var_4], 4
.text:00000846                 lea     edx, [ebp+var_B8]
.text:0000084C                 push    edx             ; struct CCreatedCoder *
.text:0000084D                 push    0               ; bool
.text:0000084F                 mov     eax, [ebp+var_A4]
.text:00000855                 mov     ecx, [eax+4]
.text:00000858                 push    ecx
.text:00000859                 mov     edx, [eax]
.text:0000085B                 push    edx             ; unsigned __int64
.text:0000085C                 call    ?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z ; CreateCoder(unsigned __int64,bool,CCreatedCoder &)
.text:00000861                 mov     [ebp+var_C0], eax
.text:00000867                 cmp     [ebp+var_C0], 0
.text:0000086E                 jz      short loc_8B4
.text:00000870                 mov     eax, [ebp+var_C0]
.text:00000876                 mov     [ebp+var_218], eax
.text:0000087C                 mov     byte ptr [ebp+var_4], 1
.text:00000880                 lea     ecx, [ebp+var_B8] ; this
.text:00000886                 call    ??1CCreatedCoder@@QAE@XZ ; CCreatedCoder::~CCreatedCoder(void)
.text:0000088B                 mov     byte ptr [ebp+var_4], 0
.text:0000088F                 lea     ecx, [ebp+var_88] ; this
.text:00000895                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:0000089A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000008A1                 lea     ecx, [ebp+var_34] ; this
.text:000008A4                 call    ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text:000008A9                 mov     eax, [ebp+var_218]
.text:000008AF                 jmp     loc_1A2D
.text:000008B4 ; ---------------------------------------------------------------------------
.text:000008B4
.text:000008B4 loc_8B4:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+46Ej
.text:000008B4                 mov     ecx, [ebp+var_A4] ; this
.text:000008BA                 call    ?IsSimpleCoder@CCoderInfo@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CCoderInfo::IsSimpleCoder(void)
.text:000008BF                 movzx   ecx, al
.text:000008C2                 test    ecx, ecx
.text:000008C4                 jz      short loc_91C
.text:000008C6                 lea     ecx, [ebp+var_B8]
.text:000008CC                 call    ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ; CMyComPtr<ICompressCoder>::operator!(void)
.text:000008D1                 movzx   edx, al
.text:000008D4                 test    edx, edx
.text:000008D6                 jz      short loc_91A
.text:000008D8                 mov     [ebp+var_21C], 80004001h
.text:000008E2                 mov     byte ptr [ebp+var_4], 1
.text:000008E6                 lea     ecx, [ebp+var_B8] ; this
.text:000008EC                 call    ??1CCreatedCoder@@QAE@XZ ; CCreatedCoder::~CCreatedCoder(void)
.text:000008F1                 mov     byte ptr [ebp+var_4], 0
.text:000008F5                 lea     ecx, [ebp+var_88] ; this
.text:000008FB                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:00000900                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000907                 lea     ecx, [ebp+var_34] ; this
.text:0000090A                 call    ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text:0000090F                 mov     eax, [ebp+var_21C]
.text:00000915                 jmp     loc_1A2D
.text:0000091A ; ---------------------------------------------------------------------------
.text:0000091A
.text:0000091A loc_91A:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+4D6j
.text:0000091A                 jmp     short loc_981
.text:0000091C ; ---------------------------------------------------------------------------
.text:0000091C
.text:0000091C loc_91C:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+4C4j
.text:0000091C                 lea     ecx, [ebp+var_B4]
.text:00000922                 call    ??7?$CMyComPtr@UICompressCoder2@@@@QBE_NXZ ; CMyComPtr<ICompressCoder2>::operator!(void)
.text:00000927                 movzx   eax, al
.text:0000092A                 test    eax, eax
.text:0000092C                 jnz     short loc_93F
.text:0000092E                 mov     ecx, [ebp+var_A4]
.text:00000934                 mov     edx, [ebp+var_AC]
.text:0000093A                 cmp     edx, [ecx+10h]
.text:0000093D                 jz      short loc_981
.text:0000093F
.text:0000093F loc_93F:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+52Cj
.text:0000093F                 mov     [ebp+var_220], 80004001h
.text:00000949                 mov     byte ptr [ebp+var_4], 1
.text:0000094D                 lea     ecx, [ebp+var_B8] ; this
.text:00000953                 call    ??1CCreatedCoder@@QAE@XZ ; CCreatedCoder::~CCreatedCoder(void)
.text:00000958                 mov     byte ptr [ebp+var_4], 0
.text:0000095C                 lea     ecx, [ebp+var_88] ; this
.text:00000962                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:00000967                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000096E                 lea     ecx, [ebp+var_34] ; this
.text:00000971                 call    ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text:00000976                 mov     eax, [ebp+var_220]
.text:0000097C                 jmp     loc_1A2D
.text:00000981 ; ---------------------------------------------------------------------------
.text:00000981
.text:00000981 loc_981:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint):loc_91Aj
.text:00000981                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+53Dj
.text:00000981                 mov     esi, esp
.text:00000983                 lea     eax, [ebp+var_B8]
.text:00000989                 push    eax
.text:0000098A                 mov     ecx, [ebp+var_10]
.text:0000098D                 mov     edx, [ecx+5Ch]
.text:00000990                 mov     eax, [ebp+var_10]
.text:00000993                 mov     ecx, [eax+5Ch]
.text:00000996                 mov     edx, [edx]
.text:00000998                 mov     eax, [edx+4]
.text:0000099B                 call    eax
.text:0000099D                 cmp     esi, esp
.text:0000099F                 call    __RTC_CheckEsp
.text:000009A4                 mov     byte ptr [ebp+var_4], 1
.text:000009A8                 lea     ecx, [ebp+var_B8] ; this
.text:000009AE                 call    ??1CCreatedCoder@@QAE@XZ ; CCreatedCoder::~CCreatedCoder(void)
.text:000009B3                 jmp     loc_7FB
.text:000009B8 ; ---------------------------------------------------------------------------
.text:000009B8
.text:000009B8 loc_9B8:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+418j
.text:000009B8                 lea     ecx, [ebp+var_88]
.text:000009BE                 push    ecx
.text:000009BF                 mov     ecx, [ebp+var_10]
.text:000009C2                 add     ecx, 4
.text:000009C5                 call    ??4CBindInfoEx@N7z@NArchive@@QAEAAU012@ABU012@@Z ; NArchive::N7z::CBindInfoEx::operator=(NArchive::N7z::CBindInfoEx const &)
.text:000009CA                 mov     edx, [ebp+var_10]
.text:000009CD                 mov     byte ptr [edx], 1
.text:000009D0
.text:000009D0 loc_9D0:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+212j
.text:000009D0                 mov     eax, [ebp+var_10]
.text:000009D3                 mov     ecx, [eax+5Ch]
.text:000009D6                 mov     edx, [ebp+var_10]
.text:000009D9                 mov     eax, [edx+5Ch]
.text:000009DC                 mov     edx, [ecx]
.text:000009DE                 mov     esi, esp
.text:000009E0                 mov     ecx, eax
.text:000009E2                 mov     eax, [edx+10h]
.text:000009E5                 call    eax
.text:000009E7                 cmp     esi, esp
.text:000009E9                 call    __RTC_CheckEsp
.text:000009EE                 mov     [ebp+var_C4], 0
.text:000009F8                 mov     ecx, [ebp+arg_C]
.text:000009FB                 add     ecx, 2Ch ; ','
.text:000009FE                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:00000A03                 mov     ecx, [ebp+arg_10]
.text:00000A06                 mov     edx, [eax+ecx*4]
.text:00000A09                 mov     [ebp+var_C8], edx
.text:00000A0F                 mov     [ebp+var_CC], 0
.text:00000A19                 jmp     short loc_A2A
.text:00000A1B ; ---------------------------------------------------------------------------
.text:00000A1B
.text:00000A1B loc_A1B:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+F23j
.text:00000A1B                 mov     eax, [ebp+var_CC]
.text:00000A21                 add     eax, 1
.text:00000A24                 mov     [ebp+var_CC], eax
.text:00000A2A
.text:00000A2A loc_A2A:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+619j
.text:00000A2A                 lea     ecx, [ebp+var_34]
.text:00000A2D                 call    ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size(void)
.text:00000A32                 cmp     [ebp+var_CC], eax
.text:00000A38                 jnb     loc_1328
.text:00000A3E                 lea     ecx, [ebp+var_34]
.text:00000A41                 call    ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo *(void)
.text:00000A46                 mov     ecx, [ebp+var_CC]
.text:00000A4C                 imul    ecx, 18h
.text:00000A4F                 add     eax, ecx
.text:00000A51                 mov     [ebp+var_D0], eax
.text:00000A57                 mov     esi, esp
.text:00000A59                 mov     edx, [ebp+var_CC]
.text:00000A5F                 push    edx
.text:00000A60                 mov     eax, [ebp+var_10]
.text:00000A63                 mov     ecx, [eax+5Ch]
.text:00000A66                 mov     edx, [ebp+var_10]
.text:00000A69                 mov     eax, [edx+5Ch]
.text:00000A6C                 mov     edx, [ecx]
.text:00000A6E                 mov     ecx, eax
.text:00000A70                 mov     eax, [edx+8]
.text:00000A73                 call    eax
.text:00000A75                 cmp     esi, esp
.text:00000A77                 call    __RTC_CheckEsp
.text:00000A7C                 mov     ecx, eax        ; this
.text:00000A7E                 call    ?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ ; NCoderMixer2::CCoder::GetUnknown(void)
.text:00000A83                 mov     [ebp+var_D4], eax
.text:00000A89                 lea     ecx, [ebp+var_DC]
.text:00000A8F                 call    ??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::CMyComPtr<ICompressSetDecoderProperties2>(void)
.text:00000A94                 mov     byte ptr [ebp+var_4], 5
.text:00000A98                 lea     ecx, [ebp+var_DC]
.text:00000A9E                 call    ??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator&(void)
.text:00000AA3                 mov     esi, esp
.text:00000AA5                 push    eax
.text:00000AA6                 push    offset _IID_ICompressSetDecoderProperties2
.text:00000AAB                 mov     ecx, [ebp+var_D4]
.text:00000AB1                 mov     edx, [ecx]
.text:00000AB3                 mov     eax, [ebp+var_D4]
.text:00000AB9                 push    eax
.text:00000ABA                 mov     ecx, [edx]
.text:00000ABC                 call    ecx
.text:00000ABE                 cmp     esi, esp
.text:00000AC0                 call    __RTC_CheckEsp
.text:00000AC5                 lea     ecx, [ebp+var_DC]
.text:00000ACB                 call    ??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator ICompressSetDecoderProperties2 *(void)
.text:00000AD0                 test    eax, eax
.text:00000AD2                 jz      loc_BF9
.text:00000AD8                 mov     edx, [ebp+var_D0]
.text:00000ADE                 add     edx, 8
.text:00000AE1                 mov     [ebp+var_E4], edx
.text:00000AE7                 mov     ecx, [ebp+var_E4]
.text:00000AED                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00000AF2                 mov     [ebp+var_E8], eax
.text:00000AF8                 cmp     [ebp+var_E8], 0FFFFFFFFh
.text:00000AFF                 jbe     short loc_B43
.text:00000B01                 mov     [ebp+var_224], 80004001h
.text:00000B0B                 mov     byte ptr [ebp+var_4], 1
.text:00000B0F                 lea     ecx, [ebp+var_DC]
.text:00000B15                 call    ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>(void)
.text:00000B1A                 mov     byte ptr [ebp+var_4], 0
.text:00000B1E                 lea     ecx, [ebp+var_88] ; this
.text:00000B24                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:00000B29                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000B30                 lea     ecx, [ebp+var_34] ; this
.text:00000B33                 call    ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text:00000B38                 mov     eax, [ebp+var_224]
.text:00000B3E                 jmp     loc_1A2D
.text:00000B43 ; ---------------------------------------------------------------------------
.text:00000B43
.text:00000B43 loc_B43:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+6FFj
.text:00000B43                 lea     ecx, [ebp+var_DC]
.text:00000B49                 call    ??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator->(void)
.text:00000B4E                 mov     [ebp+var_2A0], eax
.text:00000B54                 mov     esi, esp
.text:00000B56                 mov     eax, [ebp+var_E8]
.text:00000B5C                 push    eax
.text:00000B5D                 mov     ecx, [ebp+var_E4]
.text:00000B63                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00000B68                 push    eax
.text:00000B69                 mov     ecx, [ebp+var_2A0]
.text:00000B6F                 push    ecx
.text:00000B70                 mov     edx, [ebp+var_2A0]
.text:00000B76                 mov     eax, [edx]
.text:00000B78                 mov     ecx, [eax+0Ch]
.text:00000B7B                 call    ecx
.text:00000B7D                 cmp     esi, esp
.text:00000B7F                 call    __RTC_CheckEsp
.text:00000B84                 mov     [ebp+var_EC], eax
.text:00000B8A                 cmp     [ebp+var_EC], 80070057h
.text:00000B94                 jnz     short loc_BA0
.text:00000B96                 mov     [ebp+var_EC], 80004001h
.text:00000BA0
.text:00000BA0 loc_BA0:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+794j
.text:00000BA0                 mov     edx, [ebp+var_EC]
.text:00000BA6                 mov     [ebp+var_F0], edx
.text:00000BAC                 cmp     [ebp+var_F0], 0
.text:00000BB3                 jz      short loc_BF9
.text:00000BB5                 mov     eax, [ebp+var_F0]
.text:00000BBB                 mov     [ebp+var_228], eax
.text:00000BC1                 mov     byte ptr [ebp+var_4], 1
.text:00000BC5                 lea     ecx, [ebp+var_DC]
.text:00000BCB                 call    ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>(void)
.text:00000BD0                 mov     byte ptr [ebp+var_4], 0
.text:00000BD4                 lea     ecx, [ebp+var_88] ; this
.text:00000BDA                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:00000BDF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000BE6                 lea     ecx, [ebp+var_34] ; this
.text:00000BE9                 call    ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text:00000BEE                 mov     eax, [ebp+var_228]
.text:00000BF4                 jmp     loc_1A2D
.text:00000BF9 ; ---------------------------------------------------------------------------
.text:00000BF9
.text:00000BF9 loc_BF9:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+6D2j
.text:00000BF9                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+7B3j
.text:00000BF9                 mov     byte ptr [ebp+var_4], 1
.text:00000BFD                 lea     ecx, [ebp+var_DC]
.text:00000C03                 call    ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>(void)
.text:00000C08                 movzx   ecx, [ebp+arg_34]
.text:00000C0C                 test    ecx, ecx
.text:00000C0E                 jz      loc_CF7
.text:00000C14                 lea     ecx, [ebp+var_F8]
.text:00000C1A                 call    ??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::CMyComPtr<ICompressSetCoderMt>(void)
.text:00000C1F                 mov     byte ptr [ebp+var_4], 6
.text:00000C23                 lea     ecx, [ebp+var_F8]
.text:00000C29                 call    ??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator&(void)
.text:00000C2E                 mov     esi, esp
.text:00000C30                 push    eax
.text:00000C31                 push    offset _IID_ICompressSetCoderMt
.text:00000C36                 mov     edx, [ebp+var_D4]
.text:00000C3C                 mov     eax, [edx]
.text:00000C3E                 mov     ecx, [ebp+var_D4]
.text:00000C44                 push    ecx
.text:00000C45                 mov     edx, [eax]
.text:00000C47                 call    edx
.text:00000C49                 cmp     esi, esp
.text:00000C4B                 call    __RTC_CheckEsp
.text:00000C50                 lea     ecx, [ebp+var_F8]
.text:00000C56                 call    ??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator ICompressSetCoderMt *(void)
.text:00000C5B                 test    eax, eax
.text:00000C5D                 jz      loc_CE8
.text:00000C63                 lea     ecx, [ebp+var_F8]
.text:00000C69                 call    ??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator->(void)
.text:00000C6E                 mov     [ebp+var_2A4], eax
.text:00000C74                 mov     esi, esp
.text:00000C76                 mov     eax, [ebp+arg_38]
.text:00000C79                 push    eax
.text:00000C7A                 mov     ecx, [ebp+var_2A4]
.text:00000C80                 push    ecx
.text:00000C81                 mov     edx, [ebp+var_2A4]
.text:00000C87                 mov     eax, [edx]
.text:00000C89                 mov     ecx, [eax+0Ch]
.text:00000C8C                 call    ecx
.text:00000C8E                 cmp     esi, esp
.text:00000C90                 call    __RTC_CheckEsp
.text:00000C95                 mov     [ebp+var_100], eax
.text:00000C9B                 cmp     [ebp+var_100], 0
.text:00000CA2                 jz      short loc_CE8
.text:00000CA4                 mov     edx, [ebp+var_100]
.text:00000CAA                 mov     [ebp+var_22C], edx
.text:00000CB0                 mov     byte ptr [ebp+var_4], 1
.text:00000CB4                 lea     ecx, [ebp+var_F8]
.text:00000CBA                 call    ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>(void)
.text:00000CBF                 mov     byte ptr [ebp+var_4], 0
.text:00000CC3                 lea     ecx, [ebp+var_88] ; this
.text:00000CC9                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:00000CCE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000CD5                 lea     ecx, [ebp+var_34] ; this
.text:00000CD8                 call    ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text:00000CDD                 mov     eax, [ebp+var_22C]
.text:00000CE3                 jmp     loc_1A2D
.text:00000CE8 ; ---------------------------------------------------------------------------
.text:00000CE8
.text:00000CE8 loc_CE8:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+85Dj
.text:00000CE8                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+8A2j
.text:00000CE8                 mov     byte ptr [ebp+var_4], 1
.text:00000CEC                 lea     ecx, [ebp+var_F8]
.text:00000CF2                 call    ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>(void)
.text:00000CF7
.text:00000CF7 loc_CF7:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+80Ej
.text:00000CF7                 lea     ecx, [ebp+var_108]
.text:00000CFD                 call    ??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>(void)
.text:00000D02                 mov     byte ptr [ebp+var_4], 7
.text:00000D06                 lea     ecx, [ebp+var_108]
.text:00000D0C                 call    ??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator&(void)
.text:00000D11                 mov     esi, esp
.text:00000D13                 push    eax
.text:00000D14                 push    offset _IID_ICryptoSetPassword
.text:00000D19                 mov     eax, [ebp+var_D4]
.text:00000D1F                 mov     ecx, [eax]
.text:00000D21                 mov     edx, [ebp+var_D4]
.text:00000D27                 push    edx
.text:00000D28                 mov     eax, [ecx]
.text:00000D2A                 call    eax
.text:00000D2C                 cmp     esi, esp
.text:00000D2E                 call    __RTC_CheckEsp
.text:00000D33                 lea     ecx, [ebp+var_108]
.text:00000D39                 call    ??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator ICryptoSetPassword *(void)
.text:00000D3E                 test    eax, eax
.text:00000D40                 jz      loc_FDE
.text:00000D46                 mov     ecx, [ebp+arg_28]
.text:00000D49                 mov     byte ptr [ecx], 1
.text:00000D4C                 cmp     [ebp+arg_24], 0
.text:00000D50                 jnz     short loc_D94
.text:00000D52                 mov     [ebp+var_230], 80004001h
.text:00000D5C                 mov     byte ptr [ebp+var_4], 1
.text:00000D60                 lea     ecx, [ebp+var_108]
.text:00000D66                 call    ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)
.text:00000D6B                 mov     byte ptr [ebp+var_4], 0
.text:00000D6F                 lea     ecx, [ebp+var_88] ; this
.text:00000D75                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:00000D7A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000D81                 lea     ecx, [ebp+var_34] ; this
.text:00000D84                 call    ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text:00000D89                 mov     eax, [ebp+var_230]
.text:00000D8F                 jmp     loc_1A2D
.text:00000D94 ; ---------------------------------------------------------------------------
.text:00000D94
.text:00000D94 loc_D94:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+950j
.text:00000D94                 lea     ecx, [ebp+var_114] ; this
.text:00000D9A                 call    ??0CMyComBSTR@@QAE@XZ ; CMyComBSTR::CMyComBSTR(void)
.text:00000D9F                 mov     byte ptr [ebp+var_4], 8
.text:00000DA3                 lea     ecx, [ebp+var_114]
.text:00000DA9                 call    ??ICMyComBSTR@@QAEPAPA_WXZ ; CMyComBSTR::operator&(void)
.text:00000DAE                 mov     esi, esp
.text:00000DB0                 push    eax
.text:00000DB1                 mov     edx, [ebp+arg_24]
.text:00000DB4                 mov     eax, [edx]
.text:00000DB6                 mov     ecx, [ebp+arg_24]
.text:00000DB9                 push    ecx
.text:00000DBA                 mov     edx, [eax+0Ch]
.text:00000DBD                 call    edx
.text:00000DBF                 cmp     esi, esp
.text:00000DC1                 call    __RTC_CheckEsp
.text:00000DC6                 mov     [ebp+var_11C], eax
.text:00000DCC                 cmp     [ebp+var_11C], 0
.text:00000DD3                 jz      short loc_E28
.text:00000DD5                 mov     eax, [ebp+var_11C]
.text:00000DDB                 mov     [ebp+var_234], eax
.text:00000DE1                 mov     byte ptr [ebp+var_4], 7
.text:00000DE5                 lea     ecx, [ebp+var_114] ; this
.text:00000DEB                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:00000DF0                 mov     byte ptr [ebp+var_4], 1
.text:00000DF4                 lea     ecx, [ebp+var_108]
.text:00000DFA                 call    ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)
.text:00000DFF                 mov     byte ptr [ebp+var_4], 0
.text:00000E03                 lea     ecx, [ebp+var_88] ; this
.text:00000E09                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:00000E0E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000E15                 lea     ecx, [ebp+var_34] ; this
.text:00000E18                 call    ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text:00000E1D                 mov     eax, [ebp+var_234]
.text:00000E23                 jmp     loc_1A2D
.text:00000E28 ; ---------------------------------------------------------------------------
.text:00000E28
.text:00000E28 loc_E28:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+9D3j
.text:00000E28                 mov     ecx, [ebp+arg_2C]
.text:00000E2B                 mov     byte ptr [ecx], 1
.text:00000E2E                 mov     ecx, [ebp+arg_30] ; this
.text:00000E31                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00000E36                 mov     [ebp+var_120], 0
.text:00000E40                 lea     ecx, [ebp+var_114]
.text:00000E46                 call    ??BCMyComBSTR@@QBEPB_WXZ ; CMyComBSTR::operator wchar_t const *(void)
.text:00000E4B                 test    eax, eax
.text:00000E4D                 jz      short loc_E71
.text:00000E4F                 lea     ecx, [ebp+var_114]
.text:00000E55                 call    ??BCMyComBSTR@@QBEPB_WXZ ; CMyComBSTR::operator wchar_t const *(void)
.text:00000E5A                 push    eax
.text:00000E5B                 mov     ecx, [ebp+arg_30]
.text:00000E5E                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00000E63                 mov     ecx, [ebp+arg_30] ; this
.text:00000E66                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000E6B                 mov     [ebp+var_120], eax
.text:00000E71
.text:00000E71 loc_E71:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+A4Dj
.text:00000E71                 mov     edx, [ebp+var_120]
.text:00000E77                 shl     edx, 1
.text:00000E79                 push    edx
.text:00000E7A                 lea     ecx, [ebp+var_12C]
.text:00000E80                 call    ??0?$CBuffer@E@@QAE@I@Z ; CBuffer<uchar>::CBuffer<uchar>(uint)
.text:00000E85                 mov     byte ptr [ebp+var_4], 9
.text:00000E89                 mov     [ebp+var_134], 0
.text:00000E93                 jmp     short loc_EA4
.text:00000E95 ; ---------------------------------------------------------------------------
.text:00000E95
.text:00000E95 loc_E95:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+B07j
.text:00000E95                 mov     eax, [ebp+var_134]
.text:00000E9B                 add     eax, 1
.text:00000E9E                 mov     [ebp+var_134], eax
.text:00000EA4
.text:00000EA4 loc_EA4:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+A93j
.text:00000EA4                 mov     ecx, [ebp+var_134]
.text:00000EAA                 cmp     ecx, [ebp+var_120]
.text:00000EB0                 jnb     short loc_F09
.text:00000EB2                 lea     ecx, [ebp+var_114]
.text:00000EB8                 call    ??BCMyComBSTR@@QBEPB_WXZ ; CMyComBSTR::operator wchar_t const *(void)
.text:00000EBD                 mov     edx, [ebp+var_134]
.text:00000EC3                 mov     ax, [eax+edx*2]
.text:00000EC7                 mov     [ebp+var_138], ax
.text:00000ECE                 lea     ecx, [ebp+var_12C]
.text:00000ED4                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00000ED9                 mov     ecx, [ebp+var_134]
.text:00000EDF                 mov     dl, byte ptr [ebp+var_138]
.text:00000EE5                 mov     [eax+ecx*2], dl
.text:00000EE8                 movzx   ebx, [ebp+var_138]
.text:00000EEF                 sar     ebx, 8
.text:00000EF2                 lea     ecx, [ebp+var_12C]
.text:00000EF8                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00000EFD                 mov     ecx, [ebp+var_134]
.text:00000F03                 mov     [eax+ecx*2+1], bl
.text:00000F07                 jmp     short loc_E95
.text:00000F09 ; ---------------------------------------------------------------------------
.text:00000F09
.text:00000F09 loc_F09:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+AB0j
.text:00000F09                 lea     ecx, [ebp+var_108]
.text:00000F0F                 call    ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator->(void)
.text:00000F14                 mov     [ebp+var_2A8], eax
.text:00000F1A                 lea     ecx, [ebp+var_12C]
.text:00000F20                 call    ?Size@?$CBuffer@E@@QBEIXZ ; CBuffer<uchar>::Size(void)
.text:00000F25                 mov     esi, esp
.text:00000F27                 push    eax
.text:00000F28                 lea     ecx, [ebp+var_12C]
.text:00000F2E                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00000F33                 push    eax
.text:00000F34                 mov     edx, [ebp+var_2A8]
.text:00000F3A                 push    edx
.text:00000F3B                 mov     eax, [ebp+var_2A8]
.text:00000F41                 mov     ecx, [eax]
.text:00000F43                 mov     edx, [ecx+0Ch]
.text:00000F46                 call    edx
.text:00000F48                 cmp     esi, esp
.text:00000F4A                 call    __RTC_CheckEsp
.text:00000F4F                 mov     [ebp+var_13C], eax
.text:00000F55                 cmp     [ebp+var_13C], 0
.text:00000F5C                 jz      short loc_FC0
.text:00000F5E                 mov     eax, [ebp+var_13C]
.text:00000F64                 mov     [ebp+var_238], eax
.text:00000F6A                 mov     byte ptr [ebp+var_4], 8
.text:00000F6E                 lea     ecx, [ebp+var_12C]
.text:00000F74                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00000F79                 mov     byte ptr [ebp+var_4], 7
.text:00000F7D                 lea     ecx, [ebp+var_114] ; this
.text:00000F83                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:00000F88                 mov     byte ptr [ebp+var_4], 1
.text:00000F8C                 lea     ecx, [ebp+var_108]
.text:00000F92                 call    ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)
.text:00000F97                 mov     byte ptr [ebp+var_4], 0
.text:00000F9B                 lea     ecx, [ebp+var_88] ; this
.text:00000FA1                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:00000FA6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000FAD                 lea     ecx, [ebp+var_34] ; this
.text:00000FB0                 call    ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text:00000FB5                 mov     eax, [ebp+var_238]
.text:00000FBB                 jmp     loc_1A2D
.text:00000FC0 ; ---------------------------------------------------------------------------
.text:00000FC0
.text:00000FC0 loc_FC0:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+B5Cj
.text:00000FC0                 mov     byte ptr [ebp+var_4], 8
.text:00000FC4                 lea     ecx, [ebp+var_12C]
.text:00000FCA                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00000FCF                 mov     byte ptr [ebp+var_4], 7
.text:00000FD3                 lea     ecx, [ebp+var_114] ; this
.text:00000FD9                 call    ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text:00000FDE
.text:00000FDE loc_FDE:                                ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+940j
.text:00000FDE                 mov     byte ptr [ebp+var_4], 1
.text:00000FE2                 lea     ecx, [ebp+var_108]
.text:00000FE8                 call    ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)
.text:00000FED                 lea     ecx, [ebp+var_144]
.text:00000FF3                 call    ??0?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ ; CMyComPtr<ICompressSetFinishMode>::CMyComPtr<ICompressSetFinishMode>(void)
.text:00000FF8                 mov     byte ptr [ebp+var_4], 0Ah
.text:00000FFC                 lea     ecx, [ebp+var_144]
.text:00001002                 call    ??I?$CMyComPtr@UICompressSetFinishMode@@@@QAEPAPAUICompressSetFinishMode@@XZ ; CMyComPtr<ICompressSetFinishMode>::operator&(void)
.text:00001007                 mov     esi, esp
.text:00001009                 push    eax
.text:0000100A                 push    offset _IID_ICompressSetFinishMode
.text:0000100F                 mov     ecx, [ebp+var_D4]
.text:00001015                 mov     edx, [ecx]
.text:00001017                 mov     eax, [ebp+var_D4]
.text:0000101D                 push    eax
.text:0000101E                 mov     ecx, [edx]
.text:00001020                 call    ecx
.text:00001022                 cmp     esi, esp
.text:00001024                 call    __RTC_CheckEsp
.text:00001029                 lea     ecx, [ebp+var_144]
.text:0000102F                 call    ??B?$CMyComPtr@UICompressSetFinishMode@@@@QBEPAUICompressSetFinishMode@@XZ ; CMyComPtr<ICompressSetFinishMode>::operator ICompressSetFinishMode *(void)
.text:00001034                 test    eax, eax
.text:00001036                 jz      loc_10CB
.text:0000103C                 lea     ecx, [ebp+var_144]
.text:00001042                 call    ??C?$CMyComPtr@UICompressSetFinishMode@@@@QBEPAUICompressSetFinishMode@@XZ ; CMyComPtr<ICompressSetFinishMode>::operator->(void)
.text:00001047                 mov     [ebp+var_2AC], eax
.text:0000104D                 movzx   edx, [ebp+var_95]
.text:00001054                 push    edx             ; bool
.text:00001055                 call    ?BoolToInt@@YGH_N@Z ; BoolToInt(bool)
.text:0000105A                 mov     esi, esp
.text:0000105C                 push    eax
.text:0000105D                 mov     eax, [ebp+var_2AC]
.text:00001063                 push    eax
.text:00001064                 mov     ecx, [ebp+var_2AC]
.text:0000106A                 mov     edx, [ecx]
.text:0000106C                 mov     eax, [edx+0Ch]
.text:0000106F                 call    eax
.text:00001071                 cmp     esi, esp
.text:00001073                 call    __RTC_CheckEsp
.text:00001078                 mov     [ebp+var_14C], eax
.text:0000107E                 cmp     [ebp+var_14C], 0
.text:00001085                 jz      short loc_10CB
.text:00001087                 mov     ecx, [ebp+var_14C]
.text:0000108D                 mov     [ebp+var_23C], ecx
.text:00001093                 mov     byte ptr [ebp+var_4], 1
.text:00001097                 lea     ecx, [ebp+var_144]
.text:0000109D                 call    ??1?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ ; CMyComPtr<ICompressSetFinishMode>::~CMyComPtr<ICompressSetFinishMode>(void)
.text:000010A2                 mov     byte ptr [ebp+var_4], 0
.text:000010A6                 lea     ecx, [ebp+var_88] ; this
.text:000010AC                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:000010B1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000010B8                 lea     ecx, [ebp+var_34] ; this
.text:000010BB                 call    ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text:000010C0                 mov     eax, [ebp+var_23C]
.text:000010C6                 jmp     loc_1A2D
.text:000010CB ; ---------------------------------------------------------------------------
.text:000010CB
.text:000010CB loc_10CB:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+C36j
.text:000010CB                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+C85j
.text:000010CB                 mov     byte ptr [ebp+var_4], 1
.text:000010CF                 lea     ecx, [ebp+var_144]
.text:000010D5                 call    ??1?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ ; CMyComPtr<ICompressSetFinishMode>::~CMyComPtr<ICompressSetFinishMode>(void)
.text:000010DA                 mov     edx, [ebp+var_D0]
.text:000010E0                 mov     eax, [edx+10h]
.text:000010E3                 mov     [ebp+var_150], eax
.text:000010E9                 mov     ecx, [ebp+var_150]
.text:000010EF                 push    ecx
.text:000010F0                 lea     ecx, [ebp+var_158]
.text:000010F6                 call    ??0?$CObjArray@_K@@QAE@I@Z ; CObjArray<unsigned __int64>::CObjArray<unsigned __int64>(uint)
.text:000010FB                 mov     byte ptr [ebp+var_4], 0Bh
.text:000010FF                 mov     edx, [ebp+var_150]
.text:00001105                 push    edx
.text:00001106                 lea     ecx, [ebp+var_164]
.text:0000110C                 call    ??0?$CObjArray@PB_K@@QAE@I@Z ; CObjArray<unsigned __int64 const *>::CObjArray<unsigned __int64 const *>(uint)
.text:00001111                 mov     byte ptr [ebp+var_4], 0Ch
.text:00001115                 mov     [ebp+var_16C], 0
.text:0000111F                 jmp     short loc_113F
.text:00001121 ; ---------------------------------------------------------------------------
.text:00001121
.text:00001121 loc_1121:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint):loc_1280j
.text:00001121                 mov     eax, [ebp+var_16C]
.text:00001127                 add     eax, 1
.text:0000112A                 mov     [ebp+var_16C], eax
.text:00001130                 mov     ecx, [ebp+var_C4]
.text:00001136                 add     ecx, 1
.text:00001139                 mov     [ebp+var_C4], ecx
.text:0000113F
.text:0000113F loc_113F:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+D1Fj
.text:0000113F                 mov     edx, [ebp+var_16C]
.text:00001145                 cmp     edx, [ebp+var_150]
.text:0000114B                 jnb     loc_1285
.text:00001151                 mov     eax, [ebp+var_C4]
.text:00001157                 push    eax             ; unsigned int
.text:00001158                 lea     ecx, [ebp+var_34] ; this
.text:0000115B                 call    ?FindBond_for_PackStream@CFolder@N7z@NArchive@@QBEHI@Z ; NArchive::N7z::CFolder::FindBond_for_PackStream(uint)
.text:00001160                 mov     [ebp+var_170], eax
.text:00001166                 cmp     [ebp+var_170], 0
.text:0000116D                 jl      short loc_11B0
.text:0000116F                 mov     ecx, [ebp+arg_C]
.text:00001172                 add     ecx, 28h ; '('
.text:00001175                 call    ??B?$CObjArray@_K@@QBEPB_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 const *(void)
.text:0000117A                 mov     esi, eax
.text:0000117C                 lea     ecx, [ebp+var_2C]
.text:0000117F                 call    ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond *(void)
.text:00001184                 mov     ecx, [ebp+var_170]
.text:0000118A                 mov     edx, [ebp+var_C8]
.text:00001190                 add     edx, [eax+ecx*8+4]
.text:00001194                 lea     esi, [esi+edx*8]
.text:00001197                 lea     ecx, [ebp+var_164]
.text:0000119D                 call    ??B?$CObjArray@PB_K@@QAEPAPB_KXZ ; CObjArray<unsigned __int64 const *>::operator unsigned __int64 const * *(void)
.text:000011A2                 mov     ecx, [ebp+var_16C]
.text:000011A8                 mov     [eax+ecx*4], esi
.text:000011AB                 jmp     loc_1280
.text:000011B0 ; ---------------------------------------------------------------------------
.text:000011B0
.text:000011B0 loc_11B0:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+D6Dj
.text:000011B0                 mov     edx, [ebp+var_C4]
.text:000011B6                 push    edx             ; unsigned int
.text:000011B7                 lea     ecx, [ebp+var_34] ; this
.text:000011BA                 call    ?Find_in_PackStreams@CFolder@N7z@NArchive@@QBEHI@Z ; NArchive::N7z::CFolder::Find_in_PackStreams(uint)
.text:000011BF                 mov     [ebp+var_174], eax
.text:000011C5                 cmp     [ebp+var_174], 0
.text:000011CC                 jge     short loc_121F
.text:000011CE                 mov     [ebp+var_240], 80004001h
.text:000011D8                 mov     byte ptr [ebp+var_4], 0Bh
.text:000011DC                 lea     ecx, [ebp+var_164]
.text:000011E2                 call    ??1?$CObjArray@PB_K@@QAE@XZ ; CObjArray<unsigned __int64 const *>::~CObjArray<unsigned __int64 const *>(void)
.text:000011E7                 mov     byte ptr [ebp+var_4], 1
.text:000011EB                 lea     ecx, [ebp+var_158]
.text:000011F1                 call    ??1?$CObjArray@_K@@QAE@XZ ; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>(void)
.text:000011F6                 mov     byte ptr [ebp+var_4], 0
.text:000011FA                 lea     ecx, [ebp+var_88] ; this
.text:00001200                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:00001205                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000120C                 lea     ecx, [ebp+var_34] ; this
.text:0000120F                 call    ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text:00001214                 mov     eax, [ebp+var_240]
.text:0000121A                 jmp     loc_1A2D
.text:0000121F ; ---------------------------------------------------------------------------
.text:0000121F
.text:0000121F loc_121F:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+DCCj
.text:0000121F                 mov     eax, [ebp+var_174]
.text:00001225                 mov     ecx, [ebp+var_14]
.text:00001228                 mov     edx, [ebp+var_174]
.text:0000122E                 mov     esi, [ebp+var_14]
.text:00001231                 mov     edi, [ecx+eax*8+8]
.text:00001235                 sub     edi, [esi+edx*8]
.text:00001238                 mov     ebx, [ecx+eax*8+0Ch]
.text:0000123C                 sbb     ebx, [esi+edx*8+4]
.text:00001240                 lea     ecx, [ebp+var_158]
.text:00001246                 call    ??B?$CObjArray@_K@@QAEPA_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 *(void)
.text:0000124B                 mov     ecx, [ebp+var_16C]
.text:00001251                 mov     [eax+ecx*8], edi
.text:00001254                 mov     [eax+ecx*8+4], ebx
.text:00001258                 lea     ecx, [ebp+var_158]
.text:0000125E                 call    ??B?$CObjArray@_K@@QAEPA_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 *(void)
.text:00001263                 mov     edx, [ebp+var_16C]
.text:00001269                 lea     esi, [eax+edx*8]
.text:0000126C                 lea     ecx, [ebp+var_164]
.text:00001272                 call    ??B?$CObjArray@PB_K@@QAEPAPB_KXZ ; CObjArray<unsigned __int64 const *>::operator unsigned __int64 const * *(void)
.text:00001277                 mov     ecx, [ebp+var_16C]
.text:0000127D                 mov     [eax+ecx*4], esi
.text:00001280
.text:00001280 loc_1280:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+DABj
.text:00001280                 jmp     loc_1121
.text:00001285 ; ---------------------------------------------------------------------------
.text:00001285
.text:00001285 loc_1285:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+D4Bj
.text:00001285                 cmp     [ebp+arg_14], 0
.text:00001289                 jz      short loc_12A1
.text:0000128B                 mov     edx, [ebp+var_CC]
.text:00001291                 cmp     edx, [ebp+var_64]
.text:00001294                 jnz     short loc_12A1
.text:00001296                 mov     eax, [ebp+arg_14]
.text:00001299                 mov     [ebp+var_2B0], eax
.text:0000129F                 jmp     short loc_12C1
.text:000012A1 ; ---------------------------------------------------------------------------
.text:000012A1
.text:000012A1 loc_12A1:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+E89j
.text:000012A1                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+E94j
.text:000012A1                 mov     ecx, [ebp+arg_C]
.text:000012A4                 add     ecx, 28h ; '('
.text:000012A7                 call    ??B?$CObjArray@_K@@QBEPB_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 const *(void)
.text:000012AC                 mov     ecx, [ebp+var_C8]
.text:000012B2                 add     ecx, [ebp+var_CC]
.text:000012B8                 lea     edx, [eax+ecx*8]
.text:000012BB                 mov     [ebp+var_2B0], edx
.text:000012C1
.text:000012C1 loc_12C1:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+E9Fj
.text:000012C1                 mov     eax, [ebp+var_2B0]
.text:000012C7                 mov     [ebp+var_178], eax
.text:000012CD                 lea     ecx, [ebp+var_164]
.text:000012D3                 call    ??B?$CObjArray@PB_K@@QAEPAPB_KXZ ; CObjArray<unsigned __int64 const *>::operator unsigned __int64 const * *(void)
.text:000012D8                 mov     esi, esp
.text:000012DA                 push    eax
.text:000012DB                 mov     ecx, [ebp+var_178]
.text:000012E1                 push    ecx
.text:000012E2                 mov     edx, [ebp+var_CC]
.text:000012E8                 push    edx
.text:000012E9                 mov     eax, [ebp+var_10]
.text:000012EC                 mov     ecx, [eax+5Ch]
.text:000012EF                 mov     edx, [ebp+var_10]
.text:000012F2                 mov     eax, [edx+5Ch]
.text:000012F5                 mov     edx, [ecx]
.text:000012F7                 mov     ecx, eax
.text:000012F9                 mov     eax, [edx+14h]
.text:000012FC                 call    eax
.text:000012FE                 cmp     esi, esp
.text:00001300                 call    __RTC_CheckEsp
.text:00001305                 mov     byte ptr [ebp+var_4], 0Bh
.text:00001309                 lea     ecx, [ebp+var_164]
.text:0000130F                 call    ??1?$CObjArray@PB_K@@QAE@XZ ; CObjArray<unsigned __int64 const *>::~CObjArray<unsigned __int64 const *>(void)
.text:00001314                 mov     byte ptr [ebp+var_4], 1
.text:00001318                 lea     ecx, [ebp+var_158]
.text:0000131E                 call    ??1?$CObjArray@_K@@QAE@XZ ; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>(void)
.text:00001323                 jmp     loc_A1B
.text:00001328 ; ---------------------------------------------------------------------------
.text:00001328
.text:00001328 loc_1328:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+638j
.text:00001328                 cmp     [ebp+arg_18], 0
.text:0000132C                 jz      short loc_135A
.text:0000132E                 movzx   ecx, [ebp+var_95]
.text:00001335                 test    ecx, ecx
.text:00001337                 setz    dl
.text:0000133A                 mov     esi, esp
.text:0000133C                 movzx   eax, dl
.text:0000133F                 push    eax
.text:00001340                 mov     ecx, [ebp+var_10]
.text:00001343                 mov     edx, [ecx+5Ch]
.text:00001346                 mov     eax, [ebp+var_10]
.text:00001349                 mov     ecx, [eax+5Ch]
.text:0000134C                 mov     edx, [edx]
.text:0000134E                 mov     eax, [edx+0Ch]
.text:00001351                 call    eax
.text:00001353                 cmp     esi, esp
.text:00001355                 call    __RTC_CheckEsp
.text:0000135A
.text:0000135A loc_135A:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+F2Cj
.text:0000135A                 lea     ecx, [ebp+var_188]
.text:00001360                 call    ??0?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::CObjectVector<CMyComPtr<ISequentialInStream>>(void)
.text:00001365                 mov     byte ptr [ebp+var_4], 0Dh
.text:00001369                 push    30h ; '0'       ; unsigned int
.text:0000136B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001370                 add     esp, 4
.text:00001373                 mov     [ebp+var_248], eax
.text:00001379                 mov     byte ptr [ebp+var_4], 0Eh
.text:0000137D                 cmp     [ebp+var_248], 0
.text:00001384                 jz      short loc_1399
.text:00001386                 mov     ecx, [ebp+var_248] ; this
.text:0000138C                 call    ??0CLockedInStream@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CLockedInStream::CLockedInStream(void)
.text:00001391                 mov     [ebp+var_2B4], eax
.text:00001397                 jmp     short loc_13A3
.text:00001399 ; ---------------------------------------------------------------------------
.text:00001399
.text:00001399 loc_1399:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+F84j
.text:00001399                 mov     [ebp+var_2B4], 0
.text:000013A3
.text:000013A3 loc_13A3:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+F97j
.text:000013A3                 mov     ecx, [ebp+var_2B4]
.text:000013A9                 mov     [ebp+var_244], ecx
.text:000013AF                 mov     byte ptr [ebp+var_4], 0Dh
.text:000013B3                 mov     edx, [ebp+var_244]
.text:000013B9                 mov     [ebp+var_190], edx
.text:000013BF                 mov     eax, [ebp+var_190]
.text:000013C5                 push    eax
.text:000013C6                 lea     ecx, [ebp+var_198]
.text:000013CC                 call    ??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z ; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>(IUnknown *)
.text:000013D1                 mov     byte ptr [ebp+var_4], 0Fh
.text:000013D5                 mov     [ebp+var_19D], 0
.text:000013DC                 lea     ecx, [ebp+var_24]
.text:000013DF                 call    ?Size@?$CObjArray2@I@@QBEIXZ ; CObjArray2<uint>::Size(void)
.text:000013E4                 cmp     eax, 1
.text:000013E7                 jbe     loc_14B7
.text:000013ED                 mov     ecx, [ebp+var_190]
.text:000013F3                 add     ecx, 10h
.text:000013F6                 mov     esi, esp
.text:000013F8                 push    ecx
.text:000013F9                 push    0
.text:000013FB                 mov     edx, [ebp+var_14]
.text:000013FE                 mov     eax, dword ptr [ebp+arg_4]
.text:00001401                 add     eax, [edx]
.text:00001403                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:00001406                 adc     ecx, [edx+4]
.text:00001409                 push    ecx
.text:0000140A                 push    eax
.text:0000140B                 mov     edx, [ebp+arg_0]
.text:0000140E                 mov     eax, [edx]
.text:00001410                 mov     ecx, [ebp+arg_0]
.text:00001413                 push    ecx
.text:00001414                 mov     edx, [eax+10h]
.text:00001417                 call    edx
.text:00001419                 cmp     esi, esp
.text:0000141B                 call    __RTC_CheckEsp
.text:00001420                 mov     [ebp+var_1A4], eax
.text:00001426                 cmp     [ebp+var_1A4], 0
.text:0000142D                 jz      short loc_1482
.text:0000142F                 mov     eax, [ebp+var_1A4]
.text:00001435                 mov     [ebp+var_24C], eax
.text:0000143B                 mov     byte ptr [ebp+var_4], 0Dh
.text:0000143F                 lea     ecx, [ebp+var_198]
.text:00001445                 call    ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text:0000144A                 mov     byte ptr [ebp+var_4], 1
.text:0000144E                 lea     ecx, [ebp+var_188]
.text:00001454                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)
.text:00001459                 mov     byte ptr [ebp+var_4], 0
.text:0000145D                 lea     ecx, [ebp+var_88] ; this
.text:00001463                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:00001468                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000146F                 lea     ecx, [ebp+var_34] ; this
.text:00001472                 call    ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text:00001477                 mov     eax, [ebp+var_24C]
.text:0000147D                 jmp     loc_1A2D
.text:00001482 ; ---------------------------------------------------------------------------
.text:00001482
.text:00001482 loc_1482:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+102Dj
.text:00001482                 mov     ecx, [ebp+arg_0]
.text:00001485                 push    ecx
.text:00001486                 mov     ecx, [ebp+var_190]
.text:0000148C                 add     ecx, 8
.text:0000148F                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:00001494                 mov     edx, [ebp+var_10]
.text:00001497                 mov     eax, [edx+5Ch]
.text:0000149A                 mov     ecx, [eax+60h]
.text:0000149D                 push    ecx             ; unsigned int
.text:0000149E                 mov     edx, [ebp+var_10]
.text:000014A1                 mov     ecx, [edx+5Ch]  ; this
.text:000014A4                 call    ?IsThere_ExternalCoder_in_PackTree@CMixer@NCoderMixer2@@QAE_NI@Z ; NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree(uint)
.text:000014A9                 movzx   eax, al
.text:000014AC                 test    eax, eax
.text:000014AE                 jz      short loc_14B7
.text:000014B0                 mov     [ebp+var_19D], 1
.text:000014B7
.text:000014B7 loc_14B7:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+FE7j
.text:000014B7                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+10AEj
.text:000014B7                 mov     [ebp+var_1A8], 0
.text:000014C1                 jmp     short loc_14D2
.text:000014C3 ; ---------------------------------------------------------------------------
.text:000014C3
.text:000014C3 loc_14C3:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+13C8j
.text:000014C3                 mov     ecx, [ebp+var_1A8]
.text:000014C9                 add     ecx, 1
.text:000014CC                 mov     [ebp+var_1A8], ecx
.text:000014D2
.text:000014D2 loc_14D2:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+10C1j
.text:000014D2                 lea     ecx, [ebp+var_24]
.text:000014D5                 call    ?Size@?$CObjArray2@I@@QBEIXZ ; CObjArray2<uint>::Size(void)
.text:000014DA                 cmp     [ebp+var_1A8], eax
.text:000014E0                 jnb     loc_17CD
.text:000014E6                 lea     ecx, [ebp+var_1B0]
.text:000014EC                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:000014F1                 mov     byte ptr [ebp+var_4], 10h
.text:000014F5                 mov     edx, [ebp+var_1A8]
.text:000014FB                 mov     eax, [ebp+var_14]
.text:000014FE                 mov     ecx, dword ptr [ebp+arg_4]
.text:00001501                 add     ecx, [eax+edx*8]
.text:00001504                 mov     esi, dword ptr [ebp+arg_4+4]
.text:00001507                 adc     esi, [eax+edx*8+4]
.text:0000150B                 mov     dword ptr [ebp+var_1BC], ecx
.text:00001511                 mov     dword ptr [ebp+var_1BC+4], esi
.text:00001517                 lea     ecx, [ebp+var_24]
.text:0000151A                 call    ?Size@?$CObjArray2@I@@QBEIXZ ; CObjArray2<uint>::Size(void)
.text:0000151F                 cmp     eax, 1
.text:00001522                 jnz     loc_15D6
.text:00001528                 mov     esi, esp
.text:0000152A                 push    0
.text:0000152C                 push    0
.text:0000152E                 mov     edx, dword ptr [ebp+var_1BC+4]
.text:00001534                 push    edx
.text:00001535                 mov     eax, dword ptr [ebp+var_1BC]
.text:0000153B                 push    eax
.text:0000153C                 mov     ecx, [ebp+arg_0]
.text:0000153F                 mov     edx, [ecx]
.text:00001541                 mov     eax, [ebp+arg_0]
.text:00001544                 push    eax
.text:00001545                 mov     ecx, [edx+10h]
.text:00001548                 call    ecx
.text:0000154A                 cmp     esi, esp
.text:0000154C                 call    __RTC_CheckEsp
.text:00001551                 mov     [ebp+var_1C0], eax
.text:00001557                 cmp     [ebp+var_1C0], 0
.text:0000155E                 jz      short loc_15C2
.text:00001560                 mov     edx, [ebp+var_1C0]
.text:00001566                 mov     [ebp+var_250], edx
.text:0000156C                 mov     byte ptr [ebp+var_4], 0Fh
.text:00001570                 lea     ecx, [ebp+var_1B0]
.text:00001576                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000157B                 mov     byte ptr [ebp+var_4], 0Dh
.text:0000157F                 lea     ecx, [ebp+var_198]
.text:00001585                 call    ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text:0000158A                 mov     byte ptr [ebp+var_4], 1
.text:0000158E                 lea     ecx, [ebp+var_188]
.text:00001594                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)
.text:00001599                 mov     byte ptr [ebp+var_4], 0
.text:0000159D                 lea     ecx, [ebp+var_88] ; this
.text:000015A3                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:000015A8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000015AF                 lea     ecx, [ebp+var_34] ; this
.text:000015B2                 call    ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text:000015B7                 mov     eax, [ebp+var_250]
.text:000015BD                 jmp     loc_1A2D
.text:000015C2 ; ---------------------------------------------------------------------------
.text:000015C2
.text:000015C2 loc_15C2:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+115Ej
.text:000015C2                 mov     eax, [ebp+arg_0]
.text:000015C5                 push    eax
.text:000015C6                 lea     ecx, [ebp+var_1B0]
.text:000015CC                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:000015D1                 jmp     loc_1705
.text:000015D6 ; ---------------------------------------------------------------------------
.text:000015D6
.text:000015D6 loc_15D6:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1122j
.text:000015D6                 mov     ecx, [ebp+var_10]
.text:000015D9                 movzx   edx, byte ptr [ecx+50h]
.text:000015DD                 test    edx, edx
.text:000015DF                 jnz     short loc_15F0
.text:000015E1                 movzx   eax, [ebp+var_19D]
.text:000015E8                 test    eax, eax
.text:000015EA                 jz      loc_167D
.text:000015F0
.text:000015F0 loc_15F0:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+11DFj
.text:000015F0                 push    20h ; ' '       ; unsigned int
.text:000015F2                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000015F7                 add     esp, 4
.text:000015FA                 mov     [ebp+var_258], eax
.text:00001600                 mov     byte ptr [ebp+var_4], 11h
.text:00001604                 cmp     [ebp+var_258], 0
.text:0000160B                 jz      short loc_1620
.text:0000160D                 mov     ecx, [ebp+var_258] ; this
.text:00001613                 call    ??0CLockedSequentialInStreamMT@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CLockedSequentialInStreamMT::CLockedSequentialInStreamMT(void)
.text:00001618                 mov     [ebp+var_2B8], eax
.text:0000161E                 jmp     short loc_162A
.text:00001620 ; ---------------------------------------------------------------------------
.text:00001620
.text:00001620 loc_1620:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+120Bj
.text:00001620                 mov     [ebp+var_2B8], 0
.text:0000162A
.text:0000162A loc_162A:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+121Ej
.text:0000162A                 mov     ecx, [ebp+var_2B8]
.text:00001630                 mov     [ebp+var_254], ecx
.text:00001636                 mov     byte ptr [ebp+var_4], 10h
.text:0000163A                 mov     edx, [ebp+var_254]
.text:00001640                 mov     [ebp+var_1C4], edx
.text:00001646                 mov     eax, [ebp+var_1C4]
.text:0000164C                 push    eax
.text:0000164D                 lea     ecx, [ebp+var_1B0]
.text:00001653                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00001658                 mov     ecx, dword ptr [ebp+var_1BC+4]
.text:0000165E                 push    ecx
.text:0000165F                 mov     edx, dword ptr [ebp+var_1BC]
.text:00001665                 push    edx             ; unsigned __int64
.text:00001666                 mov     eax, [ebp+var_190]
.text:0000166C                 push    eax             ; struct NArchive::N7z::CLockedInStream *
.text:0000166D                 mov     ecx, [ebp+var_1C4] ; this
.text:00001673                 call    ?Init@CLockedSequentialInStreamMT@N7z@NArchive@@QAEXPAUCLockedInStream@23@_K@Z ; NArchive::N7z::CLockedSequentialInStreamMT::Init(NArchive::N7z::CLockedInStream *,unsigned __int64)
.text:00001678                 jmp     loc_1705
.text:0000167D ; ---------------------------------------------------------------------------
.text:0000167D
.text:0000167D loc_167D:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+11EAj
.text:0000167D                 push    20h ; ' '       ; unsigned int
.text:0000167F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001684                 add     esp, 4
.text:00001687                 mov     [ebp+var_260], eax
.text:0000168D                 mov     byte ptr [ebp+var_4], 12h
.text:00001691                 cmp     [ebp+var_260], 0
.text:00001698                 jz      short loc_16AD
.text:0000169A                 mov     ecx, [ebp+var_260] ; this
.text:000016A0                 call    ??0CLockedSequentialInStreamST@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CLockedSequentialInStreamST::CLockedSequentialInStreamST(void)
.text:000016A5                 mov     [ebp+var_2BC], eax
.text:000016AB                 jmp     short loc_16B7
.text:000016AD ; ---------------------------------------------------------------------------
.text:000016AD
.text:000016AD loc_16AD:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1298j
.text:000016AD                 mov     [ebp+var_2BC], 0
.text:000016B7
.text:000016B7 loc_16B7:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+12ABj
.text:000016B7                 mov     ecx, [ebp+var_2BC]
.text:000016BD                 mov     [ebp+var_25C], ecx
.text:000016C3                 mov     byte ptr [ebp+var_4], 10h
.text:000016C7                 mov     edx, [ebp+var_25C]
.text:000016CD                 mov     [ebp+var_1C8], edx
.text:000016D3                 mov     eax, [ebp+var_1C8]
.text:000016D9                 push    eax
.text:000016DA                 lea     ecx, [ebp+var_1B0]
.text:000016E0                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:000016E5                 mov     ecx, dword ptr [ebp+var_1BC+4]
.text:000016EB                 push    ecx
.text:000016EC                 mov     edx, dword ptr [ebp+var_1BC]
.text:000016F2                 push    edx             ; unsigned __int64
.text:000016F3                 mov     eax, [ebp+var_190]
.text:000016F9                 push    eax             ; struct NArchive::N7z::CLockedInStream *
.text:000016FA                 mov     ecx, [ebp+var_1C8] ; this
.text:00001700                 call    ?Init@CLockedSequentialInStreamST@N7z@NArchive@@QAEXPAUCLockedInStream@23@_K@Z ; NArchive::N7z::CLockedSequentialInStreamST::Init(NArchive::N7z::CLockedInStream *,unsigned __int64)
.text:00001705
.text:00001705 loc_1705:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+11D1j
.text:00001705                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1278j
.text:00001705                 push    28h ; '('       ; unsigned int
.text:00001707                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000170C                 add     esp, 4
.text:0000170F                 mov     [ebp+var_268], eax
.text:00001715                 mov     byte ptr [ebp+var_4], 13h
.text:00001719                 cmp     [ebp+var_268], 0
.text:00001720                 jz      short loc_1735
.text:00001722                 mov     ecx, [ebp+var_268]
.text:00001728                 call    ??0CLimitedSequentialInStream@@QAE@XZ ; CLimitedSequentialInStream::CLimitedSequentialInStream(void)
.text:0000172D                 mov     [ebp+var_2C0], eax
.text:00001733                 jmp     short loc_173F
.text:00001735 ; ---------------------------------------------------------------------------
.text:00001735
.text:00001735 loc_1735:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1320j
.text:00001735                 mov     [ebp+var_2C0], 0
.text:0000173F
.text:0000173F loc_173F:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1333j
.text:0000173F                 mov     ecx, [ebp+var_2C0]
.text:00001745                 mov     [ebp+var_264], ecx
.text:0000174B                 mov     byte ptr [ebp+var_4], 10h
.text:0000174F                 mov     edx, [ebp+var_264]
.text:00001755                 mov     [ebp+var_1CC], edx
.text:0000175B                 mov     eax, [ebp+var_1CC]
.text:00001761                 push    eax
.text:00001762                 lea     ecx, [ebp+var_188]
.text:00001768                 call    ?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::AddNew(void)
.text:0000176D                 mov     ecx, eax
.text:0000176F                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00001774                 lea     ecx, [ebp+var_1B0]
.text:0000177A                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:0000177F                 push    eax             ; struct ISequentialInStream *
.text:00001780                 mov     ecx, [ebp+var_1CC] ; this
.text:00001786                 call    ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ; CLimitedSequentialInStream::SetStream(ISequentialInStream *)
.text:0000178B                 mov     ecx, [ebp+var_1A8]
.text:00001791                 mov     edx, [ebp+var_14]
.text:00001794                 mov     eax, [ebp+var_1A8]
.text:0000179A                 mov     esi, [ebp+var_14]
.text:0000179D                 mov     edi, [edx+ecx*8+8]
.text:000017A1                 sub     edi, [esi+eax*8]
.text:000017A4                 mov     ecx, [edx+ecx*8+0Ch]
.text:000017A8                 sbb     ecx, [esi+eax*8+4]
.text:000017AC                 push    ecx
.text:000017AD                 push    edi             ; unsigned __int64
.text:000017AE                 mov     ecx, [ebp+var_1CC] ; this
.text:000017B4                 call    ?Init@CLimitedSequentialInStream@@QAEX_K@Z ; CLimitedSequentialInStream::Init(unsigned __int64)
.text:000017B9                 mov     byte ptr [ebp+var_4], 0Fh
.text:000017BD                 lea     ecx, [ebp+var_1B0]
.text:000017C3                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000017C8                 jmp     loc_14C3
.text:000017CD ; ---------------------------------------------------------------------------
.text:000017CD
.text:000017CD loc_17CD:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+10E0j
.text:000017CD                 lea     ecx, [ebp+var_188]
.text:000017D3                 call    ?Size@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QBEIXZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::Size(void)
.text:000017D8                 mov     [ebp+var_1D0], eax
.text:000017DE                 mov     edx, [ebp+var_1D0]
.text:000017E4                 push    edx
.text:000017E5                 lea     ecx, [ebp+var_1D8]
.text:000017EB                 call    ??0?$CObjArray@PAUISequentialInStream@@@@QAE@I@Z ; CObjArray<ISequentialInStream *>::CObjArray<ISequentialInStream *>(uint)
.text:000017F0                 mov     byte ptr [ebp+var_4], 14h
.text:000017F4                 mov     [ebp+var_CC], 0
.text:000017FE                 jmp     short loc_180F
.text:00001800 ; ---------------------------------------------------------------------------
.text:00001800
.text:00001800 loc_1800:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+144Cj
.text:00001800                 mov     eax, [ebp+var_CC]
.text:00001806                 add     eax, 1
.text:00001809                 mov     [ebp+var_CC], eax
.text:0000180F
.text:0000180F loc_180F:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+13FEj
.text:0000180F                 mov     ecx, [ebp+var_CC]
.text:00001815                 cmp     ecx, [ebp+var_1D0]
.text:0000181B                 jnb     short loc_184E
.text:0000181D                 mov     edx, [ebp+var_CC]
.text:00001823                 push    edx
.text:00001824                 lea     ecx, [ebp+var_188]
.text:0000182A                 call    ??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialInStream>>::operator[](uint)
.text:0000182F                 mov     ecx, eax
.text:00001831                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00001836                 mov     esi, eax
.text:00001838                 lea     ecx, [ebp+var_1D8]
.text:0000183E                 call    ??B?$CObjArray@PAUISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CObjArray<ISequentialInStream *>::operator ISequentialInStream * *(void)
.text:00001843                 mov     ecx, [ebp+var_CC]
.text:00001849                 mov     [eax+ecx*4], esi
.text:0000184C                 jmp     short loc_1800
.text:0000184E ; ---------------------------------------------------------------------------
.text:0000184E
.text:0000184E loc_184E:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+141Bj
.text:0000184E                 cmp     [ebp+arg_18], 0
.text:00001852                 jz      loc_19BB
.text:00001858                 lea     ecx, [ebp+var_1E4]
.text:0000185E                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(void)
.text:00001863                 mov     byte ptr [ebp+var_4], 15h
.text:00001867                 cmp     [ebp+arg_1C], 0
.text:0000186B                 jz      short loc_18E9
.text:0000186D                 mov     edx, [ebp+var_10]
.text:00001870                 mov     eax, [edx+5Ch]
.text:00001873                 mov     ecx, [eax+60h]
.text:00001876                 push    ecx             ; unsigned int
.text:00001877                 mov     edx, [ebp+var_10]
.text:0000187A                 mov     ecx, [edx+5Ch]  ; this
.text:0000187D                 call    ?Is_PackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder(uint)
.text:00001882                 movzx   eax, al
.text:00001885                 test    eax, eax
.text:00001887                 jnz     short loc_18E9
.text:00001889                 push    0Ch             ; unsigned int
.text:0000188B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001890                 add     esp, 4
.text:00001893                 mov     [ebp+var_270], eax
.text:00001899                 mov     byte ptr [ebp+var_4], 16h
.text:0000189D                 cmp     [ebp+var_270], 0
.text:000018A4                 jz      short loc_18BD
.text:000018A6                 mov     ecx, [ebp+arg_1C]
.text:000018A9                 push    ecx             ; struct ICompressProgressInfo *
.text:000018AA                 mov     ecx, [ebp+var_270] ; this
.text:000018B0                 call    ??0CDecProgress@N7z@NArchive@@QAE@PAUICompressProgressInfo@@@Z ; NArchive::N7z::CDecProgress::CDecProgress(ICompressProgressInfo *)
.text:000018B5                 mov     [ebp+var_2C4], eax
.text:000018BB                 jmp     short loc_18C7
.text:000018BD ; ---------------------------------------------------------------------------
.text:000018BD
.text:000018BD loc_18BD:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+14A4j
.text:000018BD                 mov     [ebp+var_2C4], 0
.text:000018C7
.text:000018C7 loc_18C7:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+14BBj
.text:000018C7                 mov     edx, [ebp+var_2C4]
.text:000018CD                 mov     [ebp+var_26C], edx
.text:000018D3                 mov     byte ptr [ebp+var_4], 15h
.text:000018D7                 mov     eax, [ebp+var_26C]
.text:000018DD                 push    eax
.text:000018DE                 lea     ecx, [ebp+var_1E4]
.text:000018E4                 call    ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ; CMyComPtr<ICompressProgressInfo>::operator=(ICompressProgressInfo *)
.text:000018E9
.text:000018E9 loc_18E9:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+146Bj
.text:000018E9                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1487j
.text:000018E9                 mov     ecx, [ebp+arg_18]
.text:000018EC                 mov     [ebp+var_1F0], ecx
.text:000018F2                 lea     ecx, [ebp+var_1E4]
.text:000018F8                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:000018FD                 test    eax, eax
.text:000018FF                 jz      short loc_1914
.text:00001901                 lea     ecx, [ebp+var_1E4]
.text:00001907                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:0000190C                 mov     [ebp+var_2C8], eax
.text:00001912                 jmp     short loc_191D
.text:00001914 ; ---------------------------------------------------------------------------
.text:00001914
.text:00001914 loc_1914:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+14FFj
.text:00001914                 mov     edx, [ebp+arg_1C]
.text:00001917                 mov     [ebp+var_2C8], edx
.text:0000191D
.text:0000191D loc_191D:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1512j
.text:0000191D                 mov     esi, esp
.text:0000191F                 mov     eax, [ebp+var_2C8]
.text:00001925                 push    eax
.text:00001926                 lea     ecx, [ebp+var_1F0]
.text:0000192C                 push    ecx
.text:0000192D                 lea     ecx, [ebp+var_1D8]
.text:00001933                 call    ??B?$CObjArray@PAUISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CObjArray<ISequentialInStream *>::operator ISequentialInStream * *(void)
.text:00001938                 push    eax
.text:00001939                 mov     edx, [ebp+var_10]
.text:0000193C                 mov     eax, [edx+5Ch]
.text:0000193F                 mov     ecx, [ebp+var_10]
.text:00001942                 mov     ecx, [ecx+5Ch]
.text:00001945                 mov     edx, [eax]
.text:00001947                 mov     eax, [edx+18h]
.text:0000194A                 call    eax
.text:0000194C                 cmp     esi, esp
.text:0000194E                 call    __RTC_CheckEsp
.text:00001953                 mov     [ebp+var_274], eax
.text:00001959                 mov     byte ptr [ebp+var_4], 14h
.text:0000195D                 lea     ecx, [ebp+var_1E4]
.text:00001963                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001968                 mov     byte ptr [ebp+var_4], 0Fh
.text:0000196C                 lea     ecx, [ebp+var_1D8]
.text:00001972                 call    ??1?$CObjArray@PAUISequentialInStream@@@@QAE@XZ ; CObjArray<ISequentialInStream *>::~CObjArray<ISequentialInStream *>(void)
.text:00001977                 mov     byte ptr [ebp+var_4], 0Dh
.text:0000197B                 lea     ecx, [ebp+var_198]
.text:00001981                 call    ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text:00001986                 mov     byte ptr [ebp+var_4], 1
.text:0000198A                 lea     ecx, [ebp+var_188]
.text:00001990                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)
.text:00001995                 mov     byte ptr [ebp+var_4], 0
.text:00001999                 lea     ecx, [ebp+var_88] ; this
.text:0000199F                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:000019A4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000019AB                 lea     ecx, [ebp+var_34] ; this
.text:000019AE                 call    ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text:000019B3                 mov     eax, [ebp+var_274]
.text:000019B9                 jmp     short loc_1A2D
.text:000019BB ; ---------------------------------------------------------------------------
.text:000019BB
.text:000019BB loc_19BB:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1452j
.text:000019BB                 mov     ecx, [ebp+arg_20]
.text:000019BE                 push    ecx             ; struct ISequentialInStream **
.text:000019BF                 lea     ecx, [ebp+var_1D8]
.text:000019C5                 call    ??B?$CObjArray@PAUISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CObjArray<ISequentialInStream *>::operator ISequentialInStream * *(void)
.text:000019CA                 push    eax             ; struct ISequentialInStream **
.text:000019CB                 mov     edx, [ebp+var_10]
.text:000019CE                 mov     ecx, [edx+54h]  ; this
.text:000019D1                 call    ?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z ; NCoderMixer2::CMixerST::GetMainUnpackStream(ISequentialInStream * const *,ISequentialInStream * *)
.text:000019D6                 mov     [ebp+var_278], eax
.text:000019DC                 mov     byte ptr [ebp+var_4], 0Fh
.text:000019E0                 lea     ecx, [ebp+var_1D8]
.text:000019E6                 call    ??1?$CObjArray@PAUISequentialInStream@@@@QAE@XZ ; CObjArray<ISequentialInStream *>::~CObjArray<ISequentialInStream *>(void)
.text:000019EB                 mov     byte ptr [ebp+var_4], 0Dh
.text:000019EF                 lea     ecx, [ebp+var_198]
.text:000019F5                 call    ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text:000019FA                 mov     byte ptr [ebp+var_4], 1
.text:000019FE                 lea     ecx, [ebp+var_188]
.text:00001A04                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)
.text:00001A09                 mov     byte ptr [ebp+var_4], 0
.text:00001A0D                 lea     ecx, [ebp+var_88] ; this
.text:00001A13                 call    ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text:00001A18                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001A1F                 lea     ecx, [ebp+var_34] ; this
.text:00001A22                 call    ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text:00001A27                 mov     eax, [ebp+var_278]
.text:00001A2D
.text:00001A2D loc_1A2D:                               ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+B3j
.text:00001A2D                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+117j ...
.text:00001A2D                 push    edx
.text:00001A2E                 mov     ecx, ebp
.text:00001A30                 push    eax
.text:00001A31                 lea     edx, $LN132
.text:00001A37                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001A3C                 pop     eax
.text:00001A3D                 pop     edx
.text:00001A3E                 mov     ecx, [ebp+var_C]
.text:00001A41                 mov     large fs:0, ecx
.text:00001A48                 pop     ecx
.text:00001A49                 pop     edi
.text:00001A4A                 pop     esi
.text:00001A4B                 pop     ebx
.text:00001A4C                 add     esp, 2C8h
.text:00001A52                 cmp     ebp, esp
.text:00001A54                 call    __RTC_CheckEsp
.text:00001A59                 mov     esp, ebp
.text:00001A5B                 pop     ebp
.text:00001A5C                 retn    3Ch
.text:00001A5C ?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z endp
.text:00001A5C
.text:00001A5C ; ---------------------------------------------------------------------------
.text:00001A5F                 align 10h
.text:00001A60 $LN132          dd 11h                  ; DATA XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1631o
.text:00001A64                 dd offset $LN131
.text:00001A68 $LN131          db 0CCh                 ; DATA XREF: .text:00001A64o
.text:00001A69                 db 3 dup(0FFh)
.text:00001A6C                 dd 1Ch
.text:00001A70                 dd offset $LN113        ; "folderInfo"
.text:00001A74                 dd 0FFFFFF78h, 4Ch
.text:00001A7C                 dd offset $LN114        ; "bindInfo"
.text:00001A80                 dd 0FFFFFF48h, 10h
.text:00001A88                 dd offset $LN115        ; "cod"
.text:00001A8C                 dd 0FFFFFF24h, 4
.text:00001A94                 dd offset $LN116        ; "setDecoderProperties"
.text:00001A98                 db 8, 0FFh
.text:00001A9A                 dw 0FFFFh
.text:00001A9C                 dd 4
.text:00001AA0                 dd offset $LN117        ; "setCoderMt"
.text:00001AA4                 dd 0FFFFFEF8h, 4
.text:00001AAC                 dd offset $LN118        ; "cryptoSetPassword"
.text:00001AB0                 dd 0FFFFFEECh, 4
.text:00001AB8                 dd offset $LN119        ; "passwordBSTR"
.text:00001ABC                 dd 0FFFFFED4h, 8
.text:00001AC4                 dd offset $LN120        ; "buffer"
.text:00001AC8                 dd 0FFFFFEBCh, 4
.text:00001AD0                 dd offset $LN121        ; "setFinishMode"
.text:00001AD4                 dd 0FFFFFEA8h, 4
.text:00001ADC                 dd offset $LN122        ; "packSizes"
.text:00001AE0                 dd 0FFFFFE9Ch, 4
.text:00001AE8                 dd offset $LN123        ; "packSizesPointers"
.text:00001AEC                 dd 0FFFFFE78h, 0Ch
.text:00001AF4                 dd offset $LN124        ; "inStreams"
.text:00001AF8                 dd 0FFFFFE68h, 4
.text:00001B00                 dd offset $LN125        ; "lockedInStream"
.text:00001B04                 dd 0FFFFFE50h, 4
.text:00001B0C                 dd offset $LN126        ; "packStream"
.text:00001B10                 dd 0FFFFFE28h, 4
.text:00001B18                 dd offset $LN127        ; "inStreamPointers"
.text:00001B1C                 dd 0FFFFFE1Ch, 4
.text:00001B24                 dd offset $LN128        ; "progress2"
.text:00001B28                 dd 0FFFFFE10h, 4
.text:00001B30                 dd offset $LN129        ; "outStreamPointer"
.text:00001B34 $LN129          db 'outStreamPointer',0 ; DATA XREF: .text:00001B30o
.text:00001B45 $LN128          db 'progress2',0        ; DATA XREF: .text:00001B24o
.text:00001B4F $LN127          db 'inStreamPointers',0 ; DATA XREF: .text:00001B18o
.text:00001B60 $LN126          db 'packStream',0       ; DATA XREF: .text:00001B0Co
.text:00001B6B $LN125          db 'lockedInStream',0   ; DATA XREF: .text:00001B00o
.text:00001B7A $LN124          db 'inStreams',0        ; DATA XREF: .text:00001AF4o
.text:00001B84 $LN123          db 'packSizesPointers',0 ; DATA XREF: .text:00001AE8o
.text:00001B96 $LN122          db 'packSizes',0        ; DATA XREF: .text:00001ADCo
.text:00001BA0 $LN121          db 'setFinishMode',0    ; DATA XREF: .text:00001AD0o
.text:00001BAE $LN120          db 'buffer',0           ; DATA XREF: .text:00001AC4o
.text:00001BB5 $LN119          db 'passwordBSTR',0     ; DATA XREF: .text:00001AB8o
.text:00001BC2 $LN118          db 'cryptoSetPassword',0 ; DATA XREF: .text:00001AACo
.text:00001BD4 $LN117          db 'setCoderMt',0       ; DATA XREF: .text:00001AA0o
.text:00001BDF $LN116          db 'setDecoderProperties',0 ; DATA XREF: .text:00001A94o
.text:00001BF4 $LN115          db 'cod',0              ; DATA XREF: .text:00001A88o
.text:00001BF8 $LN114          db 'bindInfo',0         ; DATA XREF: .text:00001A7Co
.text:00001C01 $LN113          db 'folderInfo',0       ; DATA XREF: .text:00001A70o
.text:00001C0C                 align 10h
.text:00001C10
.text:00001C10 ; =============== S U B R O U T I N E =======================================
.text:00001C10
.text:00001C10 ; Attributes: bp-based frame
.text:00001C10
.text:00001C10 ; int __stdcall NArchive::N7z::Convert_FolderInfo_to_BindInfo(int, NArchive::N7z::CBindInfoEx *)
.text:00001C10 ?Convert_FolderInfo_to_BindInfo@N7z@NArchive@@YGXABUCFolderEx@12@AAUCBindInfoEx@12@@Z proc near
.text:00001C10                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+D2p
.text:00001C10
.text:00001C10 var_10          = dword ptr -10h
.text:00001C10 var_C           = dword ptr -0Ch
.text:00001C10 var_8           = dword ptr -8
.text:00001C10 var_4           = dword ptr -4
.text:00001C10 arg_0           = dword ptr  8
.text:00001C10 arg_4           = dword ptr  0Ch
.text:00001C10
.text:00001C10                 push    ebp
.text:00001C11                 mov     ebp, esp
.text:00001C13                 sub     esp, 10h
.text:00001C16                 push    esi
.text:00001C17                 mov     eax, 0CCCCCCCCh
.text:00001C1C                 mov     [ebp+var_10], eax
.text:00001C1F                 mov     [ebp+var_C], eax
.text:00001C22                 mov     [ebp+var_8], eax
.text:00001C25                 mov     [ebp+var_4], eax
.text:00001C28                 mov     ecx, [ebp+arg_4] ; this
.text:00001C2B                 call    ?Clear@CBindInfoEx@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CBindInfoEx::Clear(void)
.text:00001C30                 mov     ecx, [ebp+arg_0]
.text:00001C33                 add     ecx, 8
.text:00001C36                 call    ?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CBond>::Size(void)
.text:00001C3B                 push    eax
.text:00001C3C                 mov     ecx, [ebp+arg_4]
.text:00001C3F                 add     ecx, 0Ch
.text:00001C42                 call    ?ClearAndSetSize@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXI@Z ; CRecordVector<NCoderMixer2::CBond>::ClearAndSetSize(uint)
.text:00001C47                 mov     [ebp+var_4], 0
.text:00001C4E                 jmp     short loc_1C59
.text:00001C50 ; ---------------------------------------------------------------------------
.text:00001C50
.text:00001C50 loc_1C50:                               ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+95j
.text:00001C50                 mov     eax, [ebp+var_4]
.text:00001C53                 add     eax, 1
.text:00001C56                 mov     [ebp+var_4], eax
.text:00001C59
.text:00001C59 loc_1C59:                               ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+3Ej
.text:00001C59                 mov     ecx, [ebp+arg_0]
.text:00001C5C                 add     ecx, 8
.text:00001C5F                 call    ?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CBond>::Size(void)
.text:00001C64                 cmp     [ebp+var_4], eax
.text:00001C67                 jnb     short loc_1CA7
.text:00001C69                 mov     ecx, [ebp+var_4]
.text:00001C6C                 push    ecx
.text:00001C6D                 mov     ecx, [ebp+arg_4]
.text:00001C70                 add     ecx, 0Ch
.text:00001C73                 call    ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[](uint)
.text:00001C78                 mov     [ebp+var_8], eax
.text:00001C7B                 mov     ecx, [ebp+arg_0]
.text:00001C7E                 add     ecx, 8
.text:00001C81                 call    ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond const *(void)
.text:00001C86                 mov     edx, [ebp+var_4]
.text:00001C89                 lea     eax, [eax+edx*8]
.text:00001C8C                 mov     [ebp+var_C], eax
.text:00001C8F                 mov     ecx, [ebp+var_8]
.text:00001C92                 mov     edx, [ebp+var_C]
.text:00001C95                 mov     eax, [edx]
.text:00001C97                 mov     [ecx], eax
.text:00001C99                 mov     ecx, [ebp+var_8]
.text:00001C9C                 mov     edx, [ebp+var_C]
.text:00001C9F                 mov     eax, [edx+4]
.text:00001CA2                 mov     [ecx+4], eax
.text:00001CA5                 jmp     short loc_1C50
.text:00001CA7 ; ---------------------------------------------------------------------------
.text:00001CA7
.text:00001CA7 loc_1CA7:                               ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+57j
.text:00001CA7                 mov     ecx, [ebp+arg_0]
.text:00001CAA                 call    ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size(void)
.text:00001CAF                 push    eax
.text:00001CB0                 mov     ecx, [ebp+arg_4]
.text:00001CB3                 call    ?ClearAndSetSize@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXI@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::ClearAndSetSize(uint)
.text:00001CB8                 mov     ecx, [ebp+arg_0]
.text:00001CBB                 call    ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size(void)
.text:00001CC0                 push    eax
.text:00001CC1                 mov     ecx, [ebp+arg_4]
.text:00001CC4                 add     ecx, 40h ; '@'
.text:00001CC7                 call    ?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::ClearAndSetSize(uint)
.text:00001CCC                 mov     [ebp+var_4], 0
.text:00001CD3                 jmp     short loc_1CDE
.text:00001CD5 ; ---------------------------------------------------------------------------
.text:00001CD5
.text:00001CD5 loc_1CD5:                               ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+11Ej
.text:00001CD5                 mov     ecx, [ebp+var_4]
.text:00001CD8                 add     ecx, 1
.text:00001CDB                 mov     [ebp+var_4], ecx
.text:00001CDE
.text:00001CDE loc_1CDE:                               ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+C3j
.text:00001CDE                 mov     ecx, [ebp+arg_0]
.text:00001CE1                 call    ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size(void)
.text:00001CE6                 cmp     [ebp+var_4], eax
.text:00001CE9                 jnb     short loc_1D30
.text:00001CEB                 mov     ecx, [ebp+arg_0]
.text:00001CEE                 call    ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo const *(void)
.text:00001CF3                 mov     edx, [ebp+var_4]
.text:00001CF6                 imul    edx, 18h
.text:00001CF9                 add     eax, edx
.text:00001CFB                 mov     [ebp+var_10], eax
.text:00001CFE                 mov     eax, [ebp+var_4]
.text:00001D01                 push    eax
.text:00001D02                 mov     ecx, [ebp+arg_4]
.text:00001D05                 call    ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[](uint)
.text:00001D0A                 mov     ecx, [ebp+var_10]
.text:00001D0D                 mov     edx, [ecx+10h]
.text:00001D10                 mov     [eax], edx
.text:00001D12                 mov     eax, [ebp+var_4]
.text:00001D15                 push    eax
.text:00001D16                 mov     ecx, [ebp+arg_4]
.text:00001D19                 add     ecx, 40h ; '@'
.text:00001D1C                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00001D21                 mov     ecx, [ebp+var_10]
.text:00001D24                 mov     edx, [ecx]
.text:00001D26                 mov     [eax], edx
.text:00001D28                 mov     ecx, [ecx+4]
.text:00001D2B                 mov     [eax+4], ecx
.text:00001D2E                 jmp     short loc_1CD5
.text:00001D30 ; ---------------------------------------------------------------------------
.text:00001D30
.text:00001D30 loc_1D30:                               ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+D9j
.text:00001D30                 mov     edx, [ebp+arg_4]
.text:00001D33                 mov     eax, [ebp+arg_0]
.text:00001D36                 mov     ecx, [eax+18h]
.text:00001D39                 mov     [edx+24h], ecx
.text:00001D3C                 mov     ecx, [ebp+arg_0]
.text:00001D3F                 add     ecx, 10h
.text:00001D42                 call    ?Size@?$CObjArray2@I@@QBEIXZ ; CObjArray2<uint>::Size(void)
.text:00001D47                 push    eax
.text:00001D48                 mov     ecx, [ebp+arg_4]
.text:00001D4B                 add     ecx, 18h
.text:00001D4E                 call    ?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<uint>::ClearAndSetSize(uint)
.text:00001D53                 mov     [ebp+var_4], 0
.text:00001D5A                 jmp     short loc_1D65
.text:00001D5C ; ---------------------------------------------------------------------------
.text:00001D5C
.text:00001D5C loc_1D5C:                               ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+189j
.text:00001D5C                 mov     edx, [ebp+var_4]
.text:00001D5F                 add     edx, 1
.text:00001D62                 mov     [ebp+var_4], edx
.text:00001D65
.text:00001D65 loc_1D65:                               ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+14Aj
.text:00001D65                 mov     ecx, [ebp+arg_0]
.text:00001D68                 add     ecx, 10h
.text:00001D6B                 call    ?Size@?$CObjArray2@I@@QBEIXZ ; CObjArray2<uint>::Size(void)
.text:00001D70                 cmp     [ebp+var_4], eax
.text:00001D73                 jnb     short loc_1D9B
.text:00001D75                 mov     ecx, [ebp+arg_0]
.text:00001D78                 add     ecx, 10h
.text:00001D7B                 call    ??B?$CObjArray2@I@@QBEPBIXZ ; CObjArray2<uint>::operator uint const *(void)
.text:00001D80                 mov     esi, eax
.text:00001D82                 mov     eax, [ebp+var_4]
.text:00001D85                 push    eax
.text:00001D86                 mov     ecx, [ebp+arg_4]
.text:00001D89                 add     ecx, 18h
.text:00001D8C                 call    ??A?$CRecordVector@I@@QAEAAII@Z ; CRecordVector<uint>::operator[](uint)
.text:00001D91                 mov     ecx, [ebp+var_4]
.text:00001D94                 mov     edx, [esi+ecx*4]
.text:00001D97                 mov     [eax], edx
.text:00001D99                 jmp     short loc_1D5C
.text:00001D9B ; ---------------------------------------------------------------------------
.text:00001D9B
.text:00001D9B loc_1D9B:                               ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+163j
.text:00001D9B                 pop     esi
.text:00001D9C                 add     esp, 10h
.text:00001D9F                 cmp     ebp, esp
.text:00001DA1                 call    __RTC_CheckEsp
.text:00001DA6                 mov     esp, ebp
.text:00001DA8                 pop     ebp
.text:00001DA9                 retn    8
.text:00001DA9 ?Convert_FolderInfo_to_BindInfo@N7z@NArchive@@YGXABUCFolderEx@12@AAUCBindInfoEx@12@@Z endp
.text:00001DA9
.text:00001DA9 ; ---------------------------------------------------------------------------
.text:00001DAC                 align 10h
.text:00001DB0
.text:00001DB0 ; =============== S U B R O U T I N E =======================================
.text:00001DB0
.text:00001DB0 ; Attributes: bp-based frame
.text:00001DB0
.text:00001DB0 ; bool __stdcall NArchive::N7z::AreBindInfoExEqual(struct NArchive::N7z::CBindInfoEx const &, struct NArchive::N7z::CBindInfoEx const &)
.text:00001DB0 ?AreBindInfoExEqual@N7z@NArchive@@YG_NABUCBindInfoEx@12@0@Z proc near
.text:00001DB0                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+208p
.text:00001DB0
.text:00001DB0 var_C           = dword ptr -0Ch
.text:00001DB0 var_8           = dword ptr -8
.text:00001DB0 var_4           = dword ptr -4
.text:00001DB0 arg_0           = dword ptr  8
.text:00001DB0 arg_4           = dword ptr  0Ch
.text:00001DB0
.text:00001DB0                 push    ebp
.text:00001DB1                 mov     ebp, esp
.text:00001DB3                 sub     esp, 0Ch
.text:00001DB6                 push    esi
.text:00001DB7                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001DBE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001DC5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001DCC                 mov     ecx, [ebp+arg_0]
.text:00001DCF                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:00001DD4                 mov     esi, eax
.text:00001DD6                 mov     ecx, [ebp+arg_4]
.text:00001DD9                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:00001DDE                 cmp     esi, eax
.text:00001DE0                 jz      short loc_1DE9
.text:00001DE2                 xor     al, al
.text:00001DE4                 jmp     loc_1F89
.text:00001DE9 ; ---------------------------------------------------------------------------
.text:00001DE9
.text:00001DE9 loc_1DE9:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+30j
.text:00001DE9                 mov     [ebp+var_4], 0
.text:00001DF0                 jmp     short loc_1DFB
.text:00001DF2 ; ---------------------------------------------------------------------------
.text:00001DF2
.text:00001DF2 loc_1DF2:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &):loc_1E35j
.text:00001DF2                 mov     eax, [ebp+var_4]
.text:00001DF5                 add     eax, 1
.text:00001DF8                 mov     [ebp+var_4], eax
.text:00001DFB
.text:00001DFB loc_1DFB:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+40j
.text:00001DFB                 mov     ecx, [ebp+arg_0]
.text:00001DFE                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:00001E03                 cmp     [ebp+var_4], eax
.text:00001E06                 jnb     short loc_1E37
.text:00001E08                 mov     ecx, [ebp+var_4]
.text:00001E0B                 push    ecx
.text:00001E0C                 mov     ecx, [ebp+arg_4]
.text:00001E0F                 call    ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[](uint)
.text:00001E14                 push    eax
.text:00001E15                 mov     edx, [ebp+var_4]
.text:00001E18                 push    edx
.text:00001E19                 mov     ecx, [ebp+arg_0]
.text:00001E1C                 call    ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[](uint)
.text:00001E21                 push    eax
.text:00001E22                 call    ?AreCodersEqual@N7z@NArchive@@YG_NABUCCoderStreamsInfo@NCoderMixer2@@0@Z ; NArchive::N7z::AreCodersEqual(NCoderMixer2::CCoderStreamsInfo const &,NCoderMixer2::CCoderStreamsInfo const &)
.text:00001E27                 movzx   eax, al
.text:00001E2A                 test    eax, eax
.text:00001E2C                 jnz     short loc_1E35
.text:00001E2E                 xor     al, al
.text:00001E30                 jmp     loc_1F89
.text:00001E35 ; ---------------------------------------------------------------------------
.text:00001E35
.text:00001E35 loc_1E35:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+7Cj
.text:00001E35                 jmp     short loc_1DF2
.text:00001E37 ; ---------------------------------------------------------------------------
.text:00001E37
.text:00001E37 loc_1E37:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+56j
.text:00001E37                 mov     ecx, [ebp+arg_0]
.text:00001E3A                 add     ecx, 0Ch
.text:00001E3D                 call    ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size(void)
.text:00001E42                 mov     esi, eax
.text:00001E44                 mov     ecx, [ebp+arg_4]
.text:00001E47                 add     ecx, 0Ch
.text:00001E4A                 call    ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size(void)
.text:00001E4F                 cmp     esi, eax
.text:00001E51                 jz      short loc_1E5A
.text:00001E53                 xor     al, al
.text:00001E55                 jmp     loc_1F89
.text:00001E5A ; ---------------------------------------------------------------------------
.text:00001E5A
.text:00001E5A loc_1E5A:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+A1j
.text:00001E5A                 mov     [ebp+var_4], 0
.text:00001E61                 jmp     short loc_1E6C
.text:00001E63 ; ---------------------------------------------------------------------------
.text:00001E63
.text:00001E63 loc_1E63:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &):loc_1EAFj
.text:00001E63                 mov     ecx, [ebp+var_4]
.text:00001E66                 add     ecx, 1
.text:00001E69                 mov     [ebp+var_4], ecx
.text:00001E6C
.text:00001E6C loc_1E6C:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+B1j
.text:00001E6C                 mov     ecx, [ebp+arg_0]
.text:00001E6F                 add     ecx, 0Ch
.text:00001E72                 call    ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size(void)
.text:00001E77                 cmp     [ebp+var_4], eax
.text:00001E7A                 jnb     short loc_1EB1
.text:00001E7C                 mov     edx, [ebp+var_4]
.text:00001E7F                 push    edx
.text:00001E80                 mov     ecx, [ebp+arg_4]
.text:00001E83                 add     ecx, 0Ch
.text:00001E86                 call    ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[](uint)
.text:00001E8B                 push    eax
.text:00001E8C                 mov     eax, [ebp+var_4]
.text:00001E8F                 push    eax
.text:00001E90                 mov     ecx, [ebp+arg_0]
.text:00001E93                 add     ecx, 0Ch
.text:00001E96                 call    ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[](uint)
.text:00001E9B                 push    eax
.text:00001E9C                 call    ?AreBondsEqual@N7z@NArchive@@YG_NABUCBond@NCoderMixer2@@0@Z ; NArchive::N7z::AreBondsEqual(NCoderMixer2::CBond const &,NCoderMixer2::CBond const &)
.text:00001EA1                 movzx   ecx, al
.text:00001EA4                 test    ecx, ecx
.text:00001EA6                 jnz     short loc_1EAF
.text:00001EA8                 xor     al, al
.text:00001EAA                 jmp     loc_1F89
.text:00001EAF ; ---------------------------------------------------------------------------
.text:00001EAF
.text:00001EAF loc_1EAF:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+F6j
.text:00001EAF                 jmp     short loc_1E63
.text:00001EB1 ; ---------------------------------------------------------------------------
.text:00001EB1
.text:00001EB1 loc_1EB1:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+CAj
.text:00001EB1                 mov     [ebp+var_4], 0
.text:00001EB8                 jmp     short loc_1EC3
.text:00001EBA ; ---------------------------------------------------------------------------
.text:00001EBA
.text:00001EBA loc_1EBA:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &):loc_1F17j
.text:00001EBA                 mov     edx, [ebp+var_4]
.text:00001EBD                 add     edx, 1
.text:00001EC0                 mov     [ebp+var_4], edx
.text:00001EC3
.text:00001EC3 loc_1EC3:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+108j
.text:00001EC3                 mov     ecx, [ebp+arg_0]
.text:00001EC6                 add     ecx, 40h ; '@'
.text:00001EC9                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:00001ECE                 cmp     [ebp+var_4], eax
.text:00001ED1                 jnb     short loc_1F19
.text:00001ED3                 mov     eax, [ebp+var_4]
.text:00001ED6                 push    eax
.text:00001ED7                 mov     ecx, [ebp+arg_0]
.text:00001EDA                 add     ecx, 40h ; '@'
.text:00001EDD                 call    ??A?$CRecordVector@_K@@QBEAB_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00001EE2                 mov     esi, eax
.text:00001EE4                 mov     ecx, [ebp+var_4]
.text:00001EE7                 push    ecx
.text:00001EE8                 mov     ecx, [ebp+arg_4]
.text:00001EEB                 add     ecx, 40h ; '@'
.text:00001EEE                 call    ??A?$CRecordVector@_K@@QBEAB_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00001EF3                 mov     [ebp+var_8], esi
.text:00001EF6                 mov     [ebp+var_C], eax
.text:00001EF9                 mov     edx, [ebp+var_8]
.text:00001EFC                 mov     eax, [ebp+var_C]
.text:00001EFF                 mov     ecx, [edx]
.text:00001F01                 cmp     ecx, [eax]
.text:00001F03                 jnz     short loc_1F13
.text:00001F05                 mov     edx, [ebp+var_8]
.text:00001F08                 mov     eax, [ebp+var_C]
.text:00001F0B                 mov     ecx, [edx+4]
.text:00001F0E                 cmp     ecx, [eax+4]
.text:00001F11                 jz      short loc_1F17
.text:00001F13
.text:00001F13 loc_1F13:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+153j
.text:00001F13                 xor     al, al
.text:00001F15                 jmp     short loc_1F89
.text:00001F17 ; ---------------------------------------------------------------------------
.text:00001F17
.text:00001F17 loc_1F17:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+161j
.text:00001F17                 jmp     short loc_1EBA
.text:00001F19 ; ---------------------------------------------------------------------------
.text:00001F19
.text:00001F19 loc_1F19:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+121j
.text:00001F19                 mov     ecx, [ebp+arg_0]
.text:00001F1C                 add     ecx, 18h
.text:00001F1F                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00001F24                 mov     esi, eax
.text:00001F26                 mov     ecx, [ebp+arg_4]
.text:00001F29                 add     ecx, 18h
.text:00001F2C                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00001F31                 cmp     esi, eax
.text:00001F33                 jz      short loc_1F39
.text:00001F35                 xor     al, al
.text:00001F37                 jmp     short loc_1F89
.text:00001F39 ; ---------------------------------------------------------------------------
.text:00001F39
.text:00001F39 loc_1F39:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+183j
.text:00001F39                 mov     [ebp+var_4], 0
.text:00001F40                 jmp     short loc_1F4B
.text:00001F42 ; ---------------------------------------------------------------------------
.text:00001F42
.text:00001F42 loc_1F42:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &):loc_1F85j
.text:00001F42                 mov     edx, [ebp+var_4]
.text:00001F45                 add     edx, 1
.text:00001F48                 mov     [ebp+var_4], edx
.text:00001F4B
.text:00001F4B loc_1F4B:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+190j
.text:00001F4B                 mov     ecx, [ebp+arg_0]
.text:00001F4E                 add     ecx, 18h
.text:00001F51                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:00001F56                 cmp     [ebp+var_4], eax
.text:00001F59                 jnb     short loc_1F87
.text:00001F5B                 mov     eax, [ebp+var_4]
.text:00001F5E                 push    eax
.text:00001F5F                 mov     ecx, [ebp+arg_0]
.text:00001F62                 add     ecx, 18h
.text:00001F65                 call    ??A?$CRecordVector@I@@QBEABII@Z ; CRecordVector<uint>::operator[](uint)
.text:00001F6A                 mov     esi, eax
.text:00001F6C                 mov     ecx, [ebp+var_4]
.text:00001F6F                 push    ecx
.text:00001F70                 mov     ecx, [ebp+arg_4]
.text:00001F73                 add     ecx, 18h
.text:00001F76                 call    ??A?$CRecordVector@I@@QBEABII@Z ; CRecordVector<uint>::operator[](uint)
.text:00001F7B                 mov     edx, [esi]
.text:00001F7D                 cmp     edx, [eax]
.text:00001F7F                 jz      short loc_1F85
.text:00001F81                 xor     al, al
.text:00001F83                 jmp     short loc_1F89
.text:00001F85 ; ---------------------------------------------------------------------------
.text:00001F85
.text:00001F85 loc_1F85:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+1CFj
.text:00001F85                 jmp     short loc_1F42
.text:00001F87 ; ---------------------------------------------------------------------------
.text:00001F87
.text:00001F87 loc_1F87:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+1A9j
.text:00001F87                 mov     al, 1
.text:00001F89
.text:00001F89 loc_1F89:                               ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+34j
.text:00001F89                                         ; NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+80j ...
.text:00001F89                 pop     esi
.text:00001F8A                 add     esp, 0Ch
.text:00001F8D                 cmp     ebp, esp
.text:00001F8F                 call    __RTC_CheckEsp
.text:00001F94                 mov     esp, ebp
.text:00001F96                 pop     ebp
.text:00001F97                 retn    8
.text:00001F97 ?AreBindInfoExEqual@N7z@NArchive@@YG_NABUCBindInfoEx@12@0@Z endp
.text:00001F97
.text:00001F97 ; ---------------------------------------------------------------------------
.text:00001F9A                 align 10h
.text:00001FA0
.text:00001FA0 ; =============== S U B R O U T I N E =======================================
.text:00001FA0
.text:00001FA0 ; Attributes: bp-based frame
.text:00001FA0
.text:00001FA0 ; bool __stdcall NArchive::N7z::AreCodersEqual(struct NCoderMixer2::CCoderStreamsInfo const &, struct NCoderMixer2::CCoderStreamsInfo const &)
.text:00001FA0 ?AreCodersEqual@N7z@NArchive@@YG_NABUCCoderStreamsInfo@NCoderMixer2@@0@Z proc near
.text:00001FA0                                         ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+72p
.text:00001FA0
.text:00001FA0 arg_0           = dword ptr  8
.text:00001FA0 arg_4           = dword ptr  0Ch
.text:00001FA0
.text:00001FA0                 push    ebp
.text:00001FA1                 mov     ebp, esp
.text:00001FA3                 mov     eax, [ebp+arg_0]
.text:00001FA6                 mov     ecx, [ebp+arg_4]
.text:00001FA9                 mov     edx, [eax]
.text:00001FAB                 xor     eax, eax
.text:00001FAD                 cmp     edx, [ecx]
.text:00001FAF                 setz    al
.text:00001FB2                 pop     ebp
.text:00001FB3                 retn    8
.text:00001FB3 ?AreCodersEqual@N7z@NArchive@@YG_NABUCCoderStreamsInfo@NCoderMixer2@@0@Z endp
.text:00001FB3
.text:00001FB3 ; ---------------------------------------------------------------------------
.text:00001FB6                 align 10h
.text:00001FC0
.text:00001FC0 ; =============== S U B R O U T I N E =======================================
.text:00001FC0
.text:00001FC0 ; Attributes: bp-based frame
.text:00001FC0
.text:00001FC0 ; bool __stdcall NArchive::N7z::AreBondsEqual(struct NCoderMixer2::CBond const &, struct NCoderMixer2::CBond const &)
.text:00001FC0 ?AreBondsEqual@N7z@NArchive@@YG_NABUCBond@NCoderMixer2@@0@Z proc near
.text:00001FC0                                         ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+ECp
.text:00001FC0
.text:00001FC0 var_4           = dword ptr -4
.text:00001FC0 arg_0           = dword ptr  8
.text:00001FC0 arg_4           = dword ptr  0Ch
.text:00001FC0
.text:00001FC0                 push    ebp
.text:00001FC1                 mov     ebp, esp
.text:00001FC3                 push    ecx
.text:00001FC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001FCB                 mov     eax, [ebp+arg_0]
.text:00001FCE                 mov     ecx, [ebp+arg_4]
.text:00001FD1                 mov     edx, [eax]
.text:00001FD3                 cmp     edx, [ecx]
.text:00001FD5                 jnz     short loc_1FEE
.text:00001FD7                 mov     eax, [ebp+arg_0]
.text:00001FDA                 mov     ecx, [ebp+arg_4]
.text:00001FDD                 mov     edx, [eax+4]
.text:00001FE0                 cmp     edx, [ecx+4]
.text:00001FE3                 jnz     short loc_1FEE
.text:00001FE5                 mov     [ebp+var_4], 1
.text:00001FEC                 jmp     short loc_1FF5
.text:00001FEE ; ---------------------------------------------------------------------------
.text:00001FEE
.text:00001FEE loc_1FEE:                               ; CODE XREF: NArchive::N7z::AreBondsEqual(NCoderMixer2::CBond const &,NCoderMixer2::CBond const &)+15j
.text:00001FEE                                         ; NArchive::N7z::AreBondsEqual(NCoderMixer2::CBond const &,NCoderMixer2::CBond const &)+23j
.text:00001FEE                 mov     [ebp+var_4], 0
.text:00001FF5
.text:00001FF5 loc_1FF5:                               ; CODE XREF: NArchive::N7z::AreBondsEqual(NCoderMixer2::CBond const &,NCoderMixer2::CBond const &)+2Cj
.text:00001FF5                 mov     al, byte ptr [ebp+var_4]
.text:00001FF8                 mov     esp, ebp
.text:00001FFA                 pop     ebp
.text:00001FFB                 retn    8
.text:00001FFB ?AreBondsEqual@N7z@NArchive@@YG_NABUCBond@NCoderMixer2@@0@Z endp
.text:00001FFB
.text:00001FFB ; ---------------------------------------------------------------------------
.text:00001FFE                 align 10h
.text:00001FFE _text           ends
.text:00001FFE
.rtc$TMZ:00002000 ; ===========================================================================
.rtc$TMZ:00002000
.rtc$TMZ:00002000 ; Segment type: Pure data
.rtc$TMZ:00002000 ; Segment permissions: Read
.rtc$TMZ:00002000 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00002000                 assume cs:_rtc$TMZ
.rtc$TMZ:00002000                 ;org 2000h
.rtc$TMZ:00002000 ; COMDAT (pick any)
.rtc$TMZ:00002000 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00002000 _rtc$TMZ        ends
.rtc$TMZ:00002000
.rtc$IMZ:00002004 ; ===========================================================================
.rtc$IMZ:00002004
.rtc$IMZ:00002004 ; Segment type: Pure data
.rtc$IMZ:00002004 ; Segment permissions: Read
.rtc$IMZ:00002004 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00002004                 assume cs:_rtc$IMZ
.rtc$IMZ:00002004                 ;org 2004h
.rtc$IMZ:00002004 ; COMDAT (pick any)
.rtc$IMZ:00002004 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00002004 _rtc$IMZ        ends
.rtc$IMZ:00002004
.text$x:00002008 ; ===========================================================================
.text$x:00002008
.text$x:00002008 ; Segment type: Pure code
.text$x:00002008 ; Segment permissions: Read/Execute
.text$x:00002008 _text$x         segment para public 'CODE' use32
.text$x:00002008                 assume cs:_text$x
.text$x:00002008                 ;org 2008h
.text$x:00002008                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00002008
.text$x:00002008 ; =============== S U B R O U T I N E =======================================
.text$x:00002008
.text$x:00002008
.text$x:00002008 __unwindfunclet$??0CDecoder@N7z@NArchive@@QAE@_N@Z$0 proc near
.text$x:00002008                                         ; DATA XREF: .xdata$x:00002160o
.text$x:00002008                 mov     ecx, [ebp-10h]
.text$x:0000200B                 add     ecx, 4          ; this
.text$x:0000200E                 jmp     ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text$x:0000200E __unwindfunclet$??0CDecoder@N7z@NArchive@@QAE@_N@Z$0 endp
.text$x:0000200E
.text$x:00002013
.text$x:00002013 ; =============== S U B R O U T I N E =======================================
.text$x:00002013
.text$x:00002013
.text$x:00002013 __ehhandler$??0CDecoder@N7z@NArchive@@QAE@_N@Z proc near
.text$x:00002013                                         ; DATA XREF: NArchive::N7z::CDecoder::CDecoder(bool)+5o
.text$x:00002013
.text$x:00002013 arg_4           = dword ptr  8
.text$x:00002013
.text$x:00002013                 mov     edx, [esp+arg_4]
.text$x:00002017                 lea     eax, [edx+0Ch]
.text$x:0000201A                 mov     ecx, [edx-8]
.text$x:0000201D                 xor     ecx, eax
.text$x:0000201F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002024                 mov     eax, offset __ehfuncinfo$??0CDecoder@N7z@NArchive@@QAE@_N@Z
.text$x:00002029                 jmp     ___CxxFrameHandler3
.text$x:00002029 __ehhandler$??0CDecoder@N7z@NArchive@@QAE@_N@Z endp
.text$x:00002029
.text$x:0000202E
.text$x:0000202E ; =============== S U B R O U T I N E =======================================
.text$x:0000202E
.text$x:0000202E
.text$x:0000202E __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$0 proc near
.text$x:0000202E                                         ; DATA XREF: .xdata$x:000021B0o
.text$x:0000202E                 lea     ecx, [ebp-34h]  ; this
.text$x:00002031                 jmp     ??1CFolderEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderEx::~CFolderEx(void)
.text$x:00002031 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$0 endp
.text$x:00002031
.text$x:00002036
.text$x:00002036 ; =============== S U B R O U T I N E =======================================
.text$x:00002036
.text$x:00002036
.text$x:00002036 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$1 proc near
.text$x:00002036                                         ; DATA XREF: .xdata$x:000021B8o
.text$x:00002036                 lea     ecx, [ebp-88h]  ; this
.text$x:0000203C                 jmp     ??1CBindInfoEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)
.text$x:0000203C __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$1 endp
.text$x:0000203C
.text$x:00002041
.text$x:00002041 ; =============== S U B R O U T I N E =======================================
.text$x:00002041
.text$x:00002041
.text$x:00002041 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$2 proc near
.text$x:00002041                                         ; DATA XREF: .xdata$x:000021C0o
.text$x:00002041                 mov     eax, [ebp-208h]
.text$x:00002047                 push    eax             ; void *
.text$x:00002048                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000204D                 pop     ecx
.text$x:0000204E                 retn
.text$x:0000204E __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$2 endp
.text$x:0000204E
.text$x:0000204F
.text$x:0000204F ; =============== S U B R O U T I N E =======================================
.text$x:0000204F
.text$x:0000204F
.text$x:0000204F __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$3 proc near
.text$x:0000204F                                         ; DATA XREF: .xdata$x:000021C8o
.text$x:0000204F                 mov     eax, [ebp-210h]
.text$x:00002055                 push    eax             ; void *
.text$x:00002056                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000205B                 pop     ecx
.text$x:0000205C                 retn
.text$x:0000205C __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$3 endp
.text$x:0000205C
.text$x:0000205D
.text$x:0000205D ; =============== S U B R O U T I N E =======================================
.text$x:0000205D
.text$x:0000205D
.text$x:0000205D __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$4 proc near
.text$x:0000205D                                         ; DATA XREF: .xdata$x:000021D0o
.text$x:0000205D                 lea     ecx, [ebp-0B8h] ; this
.text$x:00002063                 jmp     ??1CCreatedCoder@@QAE@XZ ; CCreatedCoder::~CCreatedCoder(void)
.text$x:00002063 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$4 endp
.text$x:00002063
.text$x:00002068
.text$x:00002068 ; =============== S U B R O U T I N E =======================================
.text$x:00002068
.text$x:00002068
.text$x:00002068 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$5 proc near
.text$x:00002068                                         ; DATA XREF: .xdata$x:000021D8o
.text$x:00002068                 lea     ecx, [ebp-0DCh]
.text$x:0000206E                 jmp     ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>(void)
.text$x:0000206E __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$5 endp
.text$x:0000206E
.text$x:00002073
.text$x:00002073 ; =============== S U B R O U T I N E =======================================
.text$x:00002073
.text$x:00002073
.text$x:00002073 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$6 proc near
.text$x:00002073                                         ; DATA XREF: .xdata$x:000021E0o
.text$x:00002073                 lea     ecx, [ebp-0F8h]
.text$x:00002079                 jmp     ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>(void)
.text$x:00002079 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$6 endp
.text$x:00002079
.text$x:0000207E
.text$x:0000207E ; =============== S U B R O U T I N E =======================================
.text$x:0000207E
.text$x:0000207E
.text$x:0000207E __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$7 proc near
.text$x:0000207E                                         ; DATA XREF: .xdata$x:000021E8o
.text$x:0000207E                 lea     ecx, [ebp-108h]
.text$x:00002084                 jmp     ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)
.text$x:00002084 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$7 endp
.text$x:00002084
.text$x:00002089
.text$x:00002089 ; =============== S U B R O U T I N E =======================================
.text$x:00002089
.text$x:00002089
.text$x:00002089 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$8 proc near
.text$x:00002089                                         ; DATA XREF: .xdata$x:000021F0o
.text$x:00002089                 lea     ecx, [ebp-114h] ; this
.text$x:0000208F                 jmp     ??1CMyComBSTR@@QAE@XZ ; CMyComBSTR::~CMyComBSTR(void)
.text$x:0000208F __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$8 endp
.text$x:0000208F
.text$x:00002094
.text$x:00002094 ; =============== S U B R O U T I N E =======================================
.text$x:00002094
.text$x:00002094
.text$x:00002094 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$9 proc near
.text$x:00002094                                         ; DATA XREF: .xdata$x:000021F8o
.text$x:00002094                 lea     ecx, [ebp-12Ch]
.text$x:0000209A                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:0000209A __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$9 endp
.text$x:0000209A
.text$x:0000209F
.text$x:0000209F ; =============== S U B R O U T I N E =======================================
.text$x:0000209F
.text$x:0000209F
.text$x:0000209F __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$10 proc near
.text$x:0000209F                                         ; DATA XREF: .xdata$x:00002200o
.text$x:0000209F                 lea     ecx, [ebp-144h]
.text$x:000020A5                 jmp     ??1?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ ; CMyComPtr<ICompressSetFinishMode>::~CMyComPtr<ICompressSetFinishMode>(void)
.text$x:000020A5 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$10 endp
.text$x:000020A5
.text$x:000020AA
.text$x:000020AA ; =============== S U B R O U T I N E =======================================
.text$x:000020AA
.text$x:000020AA
.text$x:000020AA __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$11 proc near
.text$x:000020AA                                         ; DATA XREF: .xdata$x:00002208o
.text$x:000020AA                 lea     ecx, [ebp-158h]
.text$x:000020B0                 jmp     ??1?$CObjArray@_K@@QAE@XZ ; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>(void)
.text$x:000020B0 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$11 endp
.text$x:000020B0
.text$x:000020B5
.text$x:000020B5 ; =============== S U B R O U T I N E =======================================
.text$x:000020B5
.text$x:000020B5
.text$x:000020B5 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$12 proc near
.text$x:000020B5                                         ; DATA XREF: .xdata$x:00002210o
.text$x:000020B5                 lea     ecx, [ebp-164h]
.text$x:000020BB                 jmp     ??1?$CObjArray@PB_K@@QAE@XZ ; CObjArray<unsigned __int64 const *>::~CObjArray<unsigned __int64 const *>(void)
.text$x:000020BB __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$12 endp
.text$x:000020BB
.text$x:000020C0
.text$x:000020C0 ; =============== S U B R O U T I N E =======================================
.text$x:000020C0
.text$x:000020C0
.text$x:000020C0 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$13 proc near
.text$x:000020C0                                         ; DATA XREF: .xdata$x:00002218o
.text$x:000020C0                 lea     ecx, [ebp-188h]
.text$x:000020C6                 jmp     ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)
.text$x:000020C6 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$13 endp
.text$x:000020C6
.text$x:000020CB
.text$x:000020CB ; =============== S U B R O U T I N E =======================================
.text$x:000020CB
.text$x:000020CB
.text$x:000020CB __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$14 proc near
.text$x:000020CB                                         ; DATA XREF: .xdata$x:00002220o
.text$x:000020CB                 mov     eax, [ebp-248h]
.text$x:000020D1                 push    eax             ; void *
.text$x:000020D2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000020D7                 pop     ecx
.text$x:000020D8                 retn
.text$x:000020D8 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$14 endp
.text$x:000020D8
.text$x:000020D9
.text$x:000020D9 ; =============== S U B R O U T I N E =======================================
.text$x:000020D9
.text$x:000020D9
.text$x:000020D9 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$15 proc near
.text$x:000020D9                                         ; DATA XREF: .xdata$x:00002228o
.text$x:000020D9                 lea     ecx, [ebp-198h]
.text$x:000020DF                 jmp     ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text$x:000020DF __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$15 endp
.text$x:000020DF
.text$x:000020E4
.text$x:000020E4 ; =============== S U B R O U T I N E =======================================
.text$x:000020E4
.text$x:000020E4
.text$x:000020E4 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$16 proc near
.text$x:000020E4                                         ; DATA XREF: .xdata$x:00002230o
.text$x:000020E4                 lea     ecx, [ebp-1B0h]
.text$x:000020EA                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:000020EA __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$16 endp
.text$x:000020EA
.text$x:000020EF
.text$x:000020EF ; =============== S U B R O U T I N E =======================================
.text$x:000020EF
.text$x:000020EF
.text$x:000020EF __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$17 proc near
.text$x:000020EF                                         ; DATA XREF: .xdata$x:00002238o
.text$x:000020EF                 mov     eax, [ebp-258h]
.text$x:000020F5                 push    eax             ; void *
.text$x:000020F6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000020FB                 pop     ecx
.text$x:000020FC                 retn
.text$x:000020FC __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$17 endp
.text$x:000020FC
.text$x:000020FD
.text$x:000020FD ; =============== S U B R O U T I N E =======================================
.text$x:000020FD
.text$x:000020FD
.text$x:000020FD __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$18 proc near
.text$x:000020FD                                         ; DATA XREF: .xdata$x:00002240o
.text$x:000020FD                 mov     eax, [ebp-260h]
.text$x:00002103                 push    eax             ; void *
.text$x:00002104                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00002109                 pop     ecx
.text$x:0000210A                 retn
.text$x:0000210A __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$18 endp
.text$x:0000210A
.text$x:0000210B
.text$x:0000210B ; =============== S U B R O U T I N E =======================================
.text$x:0000210B
.text$x:0000210B
.text$x:0000210B __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$19 proc near
.text$x:0000210B                                         ; DATA XREF: .xdata$x:00002248o
.text$x:0000210B                 mov     eax, [ebp-268h]
.text$x:00002111                 push    eax             ; void *
.text$x:00002112                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00002117                 pop     ecx
.text$x:00002118                 retn
.text$x:00002118 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$19 endp
.text$x:00002118
.text$x:00002119
.text$x:00002119 ; =============== S U B R O U T I N E =======================================
.text$x:00002119
.text$x:00002119
.text$x:00002119 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$20 proc near
.text$x:00002119                                         ; DATA XREF: .xdata$x:00002250o
.text$x:00002119                 lea     ecx, [ebp-1D8h]
.text$x:0000211F                 jmp     ??1?$CObjArray@PAUISequentialInStream@@@@QAE@XZ ; CObjArray<ISequentialInStream *>::~CObjArray<ISequentialInStream *>(void)
.text$x:0000211F __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$20 endp
.text$x:0000211F
.text$x:00002124
.text$x:00002124 ; =============== S U B R O U T I N E =======================================
.text$x:00002124
.text$x:00002124
.text$x:00002124 __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$21 proc near
.text$x:00002124                                         ; DATA XREF: .xdata$x:00002258o
.text$x:00002124                 lea     ecx, [ebp-1E4h]
.text$x:0000212A                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:0000212A __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$21 endp
.text$x:0000212A
.text$x:0000212F
.text$x:0000212F ; =============== S U B R O U T I N E =======================================
.text$x:0000212F
.text$x:0000212F
.text$x:0000212F __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$22 proc near
.text$x:0000212F                                         ; DATA XREF: .xdata$x:00002260o
.text$x:0000212F                 mov     eax, [ebp-270h]
.text$x:00002135                 push    eax             ; void *
.text$x:00002136                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000213B                 pop     ecx
.text$x:0000213C                 retn
.text$x:0000213C __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$22 endp
.text$x:0000213C
.text$x:0000213D
.text$x:0000213D ; =============== S U B R O U T I N E =======================================
.text$x:0000213D
.text$x:0000213D
.text$x:0000213D __ehhandler$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z proc near
.text$x:0000213D                                         ; DATA XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+5o
.text$x:0000213D
.text$x:0000213D arg_4           = dword ptr  8
.text$x:0000213D
.text$x:0000213D                 mov     edx, [esp+arg_4]
.text$x:00002141                 lea     eax, [edx+0Ch]
.text$x:00002144                 mov     ecx, [edx-2CCh]
.text$x:0000214A                 xor     ecx, eax
.text$x:0000214C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002151                 mov     eax, offset __ehfuncinfo$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z
.text$x:00002156                 jmp     ___CxxFrameHandler3
.text$x:00002156 __ehhandler$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z endp
.text$x:00002156
.text$x:00002156 ; ---------------------------------------------------------------------------
.text$x:0000215B                 align 4
.text$x:0000215B _text$x         ends
.text$x:0000215B
.xdata$x:0000215C ; ===========================================================================
.xdata$x:0000215C
.xdata$x:0000215C ; Segment type: Pure data
.xdata$x:0000215C ; Segment permissions: Read
.xdata$x:0000215C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000215C                 assume cs:_xdata$x
.xdata$x:0000215C                 ;org 215Ch
.xdata$x:0000215C __unwindtable$??0CDecoder@N7z@NArchive@@QAE@_N@Z db 0FFh
.xdata$x:0000215C                                         ; DATA XREF: .xdata$x:0000216Co
.xdata$x:0000215D                 db 0FFh
.xdata$x:0000215E                 db 0FFh
.xdata$x:0000215F                 db 0FFh
.xdata$x:00002160                 dd offset __unwindfunclet$??0CDecoder@N7z@NArchive@@QAE@_N@Z$0
.xdata$x:00002164 __ehfuncinfo$??0CDecoder@N7z@NArchive@@QAE@_N@Z db  22h ; "
.xdata$x:00002164                                         ; DATA XREF: __ehhandler$??0CDecoder@N7z@NArchive@@QAE@_N@Z+11o
.xdata$x:00002165                 db    5
.xdata$x:00002166                 db  93h ; ô
.xdata$x:00002167                 db  19h
.xdata$x:00002168                 db    1
.xdata$x:00002169                 db    0
.xdata$x:0000216A                 db    0
.xdata$x:0000216B                 db    0
.xdata$x:0000216C                 dd offset __unwindtable$??0CDecoder@N7z@NArchive@@QAE@_N@Z
.xdata$x:00002170                 db    0
.xdata$x:00002171                 db    0
.xdata$x:00002172                 db    0
.xdata$x:00002173                 db    0
.xdata$x:00002174                 db    0
.xdata$x:00002175                 db    0
.xdata$x:00002176                 db    0
.xdata$x:00002177                 db    0
.xdata$x:00002178                 db    0
.xdata$x:00002179                 db    0
.xdata$x:0000217A                 db    0
.xdata$x:0000217B                 db    0
.xdata$x:0000217C                 db    0
.xdata$x:0000217D                 db    0
.xdata$x:0000217E                 db    0
.xdata$x:0000217F                 db    0
.xdata$x:00002180                 db    0
.xdata$x:00002181                 db    0
.xdata$x:00002182                 db    0
.xdata$x:00002183                 db    0
.xdata$x:00002184                 db    1
.xdata$x:00002185                 db    0
.xdata$x:00002186                 db    0
.xdata$x:00002187                 db    0
.xdata$x:00002188 __ehfuncinfo$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z db  22h ; "
.xdata$x:00002188                                         ; DATA XREF: __ehhandler$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z+14o
.xdata$x:00002189                 db    5
.xdata$x:0000218A                 db  93h ; ô
.xdata$x:0000218B                 db  19h
.xdata$x:0000218C                 db  17h
.xdata$x:0000218D                 db    0
.xdata$x:0000218E                 db    0
.xdata$x:0000218F                 db    0
.xdata$x:00002190                 dd offset __unwindtable$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z
.xdata$x:00002194                 db    0
.xdata$x:00002195                 db    0
.xdata$x:00002196                 db    0
.xdata$x:00002197                 db    0
.xdata$x:00002198                 db    0
.xdata$x:00002199                 db    0
.xdata$x:0000219A                 db    0
.xdata$x:0000219B                 db    0
.xdata$x:0000219C                 db    0
.xdata$x:0000219D                 db    0
.xdata$x:0000219E                 db    0
.xdata$x:0000219F                 db    0
.xdata$x:000021A0                 db    0
.xdata$x:000021A1                 db    0
.xdata$x:000021A2                 db    0
.xdata$x:000021A3                 db    0
.xdata$x:000021A4                 db    0
.xdata$x:000021A5                 db    0
.xdata$x:000021A6                 db    0
.xdata$x:000021A7                 db    0
.xdata$x:000021A8                 db    1
.xdata$x:000021A9                 db    0
.xdata$x:000021AA                 db    0
.xdata$x:000021AB                 db    0
.xdata$x:000021AC __unwindtable$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z db 0FFh
.xdata$x:000021AC                                         ; DATA XREF: .xdata$x:00002190o
.xdata$x:000021AD                 db 0FFh
.xdata$x:000021AE                 db 0FFh
.xdata$x:000021AF                 db 0FFh
.xdata$x:000021B0                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$0
.xdata$x:000021B4                 align 8
.xdata$x:000021B8                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$1
.xdata$x:000021BC                 db    1
.xdata$x:000021BD                 db    0
.xdata$x:000021BE                 db    0
.xdata$x:000021BF                 db    0
.xdata$x:000021C0                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$2
.xdata$x:000021C4                 db    1
.xdata$x:000021C5                 db    0
.xdata$x:000021C6                 db    0
.xdata$x:000021C7                 db    0
.xdata$x:000021C8                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$3
.xdata$x:000021CC                 db    1
.xdata$x:000021CD                 db    0
.xdata$x:000021CE                 db    0
.xdata$x:000021CF                 db    0
.xdata$x:000021D0                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$4
.xdata$x:000021D4                 db    1
.xdata$x:000021D5                 db    0
.xdata$x:000021D6                 db    0
.xdata$x:000021D7                 db    0
.xdata$x:000021D8                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$5
.xdata$x:000021DC                 db    1
.xdata$x:000021DD                 db    0
.xdata$x:000021DE                 db    0
.xdata$x:000021DF                 db    0
.xdata$x:000021E0                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$6
.xdata$x:000021E4                 db    1
.xdata$x:000021E5                 db    0
.xdata$x:000021E6                 db    0
.xdata$x:000021E7                 db    0
.xdata$x:000021E8                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$7
.xdata$x:000021EC                 db    7
.xdata$x:000021ED                 db    0
.xdata$x:000021EE                 db    0
.xdata$x:000021EF                 db    0
.xdata$x:000021F0                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$8
.xdata$x:000021F4                 db    8
.xdata$x:000021F5                 db    0
.xdata$x:000021F6                 db    0
.xdata$x:000021F7                 db    0
.xdata$x:000021F8                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$9
.xdata$x:000021FC                 db    1
.xdata$x:000021FD                 db    0
.xdata$x:000021FE                 db    0
.xdata$x:000021FF                 db    0
.xdata$x:00002200                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$10
.xdata$x:00002204                 db    1
.xdata$x:00002205                 db    0
.xdata$x:00002206                 db    0
.xdata$x:00002207                 db    0
.xdata$x:00002208                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$11
.xdata$x:0000220C                 db  0Bh
.xdata$x:0000220D                 db    0
.xdata$x:0000220E                 db    0
.xdata$x:0000220F                 db    0
.xdata$x:00002210                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$12
.xdata$x:00002214                 db    1
.xdata$x:00002215                 db    0
.xdata$x:00002216                 db    0
.xdata$x:00002217                 db    0
.xdata$x:00002218                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$13
.xdata$x:0000221C                 db  0Dh
.xdata$x:0000221D                 db    0
.xdata$x:0000221E                 db    0
.xdata$x:0000221F                 db    0
.xdata$x:00002220                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$14
.xdata$x:00002224                 db  0Dh
.xdata$x:00002225                 db    0
.xdata$x:00002226                 db    0
.xdata$x:00002227                 db    0
.xdata$x:00002228                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$15
.xdata$x:0000222C                 db  0Fh
.xdata$x:0000222D                 db    0
.xdata$x:0000222E                 db    0
.xdata$x:0000222F                 db    0
.xdata$x:00002230                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$16
.xdata$x:00002234                 db  10h
.xdata$x:00002235                 db    0
.xdata$x:00002236                 db    0
.xdata$x:00002237                 db    0
.xdata$x:00002238                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$17
.xdata$x:0000223C                 db  10h
.xdata$x:0000223D                 db    0
.xdata$x:0000223E                 db    0
.xdata$x:0000223F                 db    0
.xdata$x:00002240                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$18
.xdata$x:00002244                 db  10h
.xdata$x:00002245                 db    0
.xdata$x:00002246                 db    0
.xdata$x:00002247                 db    0
.xdata$x:00002248                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$19
.xdata$x:0000224C                 db  0Fh
.xdata$x:0000224D                 db    0
.xdata$x:0000224E                 db    0
.xdata$x:0000224F                 db    0
.xdata$x:00002250                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$20
.xdata$x:00002254                 db  14h
.xdata$x:00002255                 db    0
.xdata$x:00002256                 db    0
.xdata$x:00002257                 db    0
.xdata$x:00002258                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$21
.xdata$x:0000225C                 db  15h
.xdata$x:0000225D                 db    0
.xdata$x:0000225E                 db    0
.xdata$x:0000225F                 db    0
.xdata$x:00002260                 dd offset __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$22
.xdata$x:00002260 _xdata$x        ends
.xdata$x:00002260
.text:00002264 ; ===========================================================================
.text:00002264
.text:00002264 ; Segment type: Pure code
.text:00002264 ; Segment permissions: Read/Execute
.text:00002264 _text           segment para public 'CODE' use32
.text:00002264                 assume cs:_text
.text:00002264                 ;org 2264h
.text:00002264 ; COMDAT (pick any)
.text:00002264                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002264
.text:00002264 ; =============== S U B R O U T I N E =======================================
.text:00002264
.text:00002264 ; Attributes: bp-based frame
.text:00002264
.text:00002264 ; _DWORD __thiscall NArchive::N7z::CBindInfoEx::CBindInfoEx(NArchive::N7z::CBindInfoEx *__hidden this)
.text:00002264                 public ??0CBindInfoEx@N7z@NArchive@@QAE@XZ
.text:00002264 ??0CBindInfoEx@N7z@NArchive@@QAE@XZ proc near
.text:00002264                                         ; CODE XREF: NArchive::N7z::CDecoder::CDecoder(bool)+39p
.text:00002264                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+BEp
.text:00002264
.text:00002264 var_10          = dword ptr -10h
.text:00002264 var_C           = dword ptr -0Ch
.text:00002264 var_4           = dword ptr -4
.text:00002264
.text:00002264                 push    ebp
.text:00002265                 mov     ebp, esp
.text:00002267                 push    0FFFFFFFFh
.text:00002269                 push    offset __ehhandler$??0CBindInfoEx@N7z@NArchive@@QAE@XZ
.text:0000226E                 mov     eax, large fs:0
.text:00002274                 push    eax
.text:00002275                 push    ecx
.text:00002276                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000227D                 mov     eax, dword ptr ds:___security_cookie
.text:00002282                 xor     eax, ebp
.text:00002284                 push    eax
.text:00002285                 lea     eax, [ebp+var_C]
.text:00002288                 mov     large fs:0, eax
.text:0000228E                 mov     [ebp+var_10], ecx
.text:00002291                 mov     ecx, [ebp+var_10] ; this
.text:00002294                 call    ??0CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::CBindInfo(void)
.text:00002299                 mov     [ebp+var_4], 0
.text:000022A0                 mov     ecx, [ebp+var_10]
.text:000022A3                 add     ecx, 40h ; '@'
.text:000022A6                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:000022AB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000022B2                 mov     eax, [ebp+var_10]
.text:000022B5                 mov     ecx, [ebp+var_C]
.text:000022B8                 mov     large fs:0, ecx
.text:000022BF                 pop     ecx
.text:000022C0                 add     esp, 10h
.text:000022C3                 cmp     ebp, esp
.text:000022C5                 call    __RTC_CheckEsp
.text:000022CA                 mov     esp, ebp
.text:000022CC                 pop     ebp
.text:000022CD                 retn
.text:000022CD ??0CBindInfoEx@N7z@NArchive@@QAE@XZ endp
.text:000022CD
.text:000022CD ; ---------------------------------------------------------------------------
.text:000022CE                 align 10h
.text:000022CE _text           ends
.text:000022CE
.text$x:000022D0 ; ===========================================================================
.text$x:000022D0
.text$x:000022D0 ; Segment type: Pure code
.text$x:000022D0 ; Segment permissions: Read/Execute
.text$x:000022D0 _text$x         segment para public 'CODE' use32
.text$x:000022D0                 assume cs:_text$x
.text$x:000022D0                 ;org 22D0h
.text$x:000022D0 ; COMDAT (pick associative to section at 2264)
.text$x:000022D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000022D0
.text$x:000022D0 ; =============== S U B R O U T I N E =======================================
.text$x:000022D0
.text$x:000022D0
.text$x:000022D0 __unwindfunclet$??0CBindInfoEx@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:000022D0                                         ; DATA XREF: .xdata$x:000022F8o
.text$x:000022D0                 mov     ecx, [ebp-10h]  ; this
.text$x:000022D3                 jmp     ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text$x:000022D3 __unwindfunclet$??0CBindInfoEx@N7z@NArchive@@QAE@XZ$0 endp
.text$x:000022D3
.text$x:000022D8
.text$x:000022D8 ; =============== S U B R O U T I N E =======================================
.text$x:000022D8
.text$x:000022D8
.text$x:000022D8 __ehhandler$??0CBindInfoEx@N7z@NArchive@@QAE@XZ proc near
.text$x:000022D8                                         ; DATA XREF: NArchive::N7z::CBindInfoEx::CBindInfoEx(void)+5o
.text$x:000022D8
.text$x:000022D8 arg_4           = dword ptr  8
.text$x:000022D8
.text$x:000022D8                 mov     edx, [esp+arg_4]
.text$x:000022DC                 lea     eax, [edx+0Ch]
.text$x:000022DF                 mov     ecx, [edx-8]
.text$x:000022E2                 xor     ecx, eax
.text$x:000022E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000022E9                 mov     eax, offset __ehfuncinfo$??0CBindInfoEx@N7z@NArchive@@QAE@XZ
.text$x:000022EE                 jmp     ___CxxFrameHandler3
.text$x:000022EE __ehhandler$??0CBindInfoEx@N7z@NArchive@@QAE@XZ endp
.text$x:000022EE
.text$x:000022EE ; ---------------------------------------------------------------------------
.text$x:000022F3                 align 4
.text$x:000022F3 _text$x         ends
.text$x:000022F3
.xdata$x:000022F4 ; ===========================================================================
.xdata$x:000022F4
.xdata$x:000022F4 ; Segment type: Pure data
.xdata$x:000022F4 ; Segment permissions: Read
.xdata$x:000022F4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000022F4                 assume cs:_xdata$x
.xdata$x:000022F4                 ;org 22F4h
.xdata$x:000022F4 ; COMDAT (pick associative to section at 2264)
.xdata$x:000022F4 __unwindtable$??0CBindInfoEx@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:000022F4                                         ; DATA XREF: .xdata$x:00002304o
.xdata$x:000022F5                 db 0FFh
.xdata$x:000022F6                 db 0FFh
.xdata$x:000022F7                 db 0FFh
.xdata$x:000022F8                 dd offset __unwindfunclet$??0CBindInfoEx@N7z@NArchive@@QAE@XZ$0
.xdata$x:000022FC __ehfuncinfo$??0CBindInfoEx@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000022FC                                         ; DATA XREF: __ehhandler$??0CBindInfoEx@N7z@NArchive@@QAE@XZ+11o
.xdata$x:000022FD                 db    5
.xdata$x:000022FE                 db  93h ; ô
.xdata$x:000022FF                 db  19h
.xdata$x:00002300                 db    1
.xdata$x:00002301                 db    0
.xdata$x:00002302                 db    0
.xdata$x:00002303                 db    0
.xdata$x:00002304                 dd offset __unwindtable$??0CBindInfoEx@N7z@NArchive@@QAE@XZ
.xdata$x:00002308                 db    0
.xdata$x:00002309                 db    0
.xdata$x:0000230A                 db    0
.xdata$x:0000230B                 db    0
.xdata$x:0000230C                 db    0
.xdata$x:0000230D                 db    0
.xdata$x:0000230E                 db    0
.xdata$x:0000230F                 db    0
.xdata$x:00002310                 db    0
.xdata$x:00002311                 db    0
.xdata$x:00002312                 db    0
.xdata$x:00002313                 db    0
.xdata$x:00002314                 db    0
.xdata$x:00002315                 db    0
.xdata$x:00002316                 db    0
.xdata$x:00002317                 db    0
.xdata$x:00002318                 db    0
.xdata$x:00002319                 db    0
.xdata$x:0000231A                 db    0
.xdata$x:0000231B                 db    0
.xdata$x:0000231C                 db    1
.xdata$x:0000231D                 db    0
.xdata$x:0000231E                 db    0
.xdata$x:0000231F                 db    0
.xdata$x:0000231F _xdata$x        ends
.xdata$x:0000231F
.text:00002320 ; ===========================================================================
.text:00002320
.text:00002320 ; Segment type: Pure code
.text:00002320 ; Segment permissions: Read/Execute
.text:00002320 _text           segment para public 'CODE' use32
.text:00002320                 assume cs:_text
.text:00002320                 ;org 2320h
.text:00002320 ; COMDAT (pick any)
.text:00002320                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002320
.text:00002320 ; =============== S U B R O U T I N E =======================================
.text:00002320
.text:00002320 ; Attributes: bp-based frame
.text:00002320
.text:00002320 ; _DWORD __thiscall NCoderMixer2::CBindInfo::CBindInfo(NCoderMixer2::CBindInfo *__hidden this)
.text:00002320                 public ??0CBindInfo@NCoderMixer2@@QAE@XZ
.text:00002320 ??0CBindInfo@NCoderMixer2@@QAE@XZ proc near
.text:00002320                                         ; CODE XREF: NArchive::N7z::CBindInfoEx::CBindInfoEx(void)+30p
.text:00002320                                         ; NCoderMixer2::CMixer::CMixer(bool)+3Cp
.text:00002320
.text:00002320 var_10          = dword ptr -10h
.text:00002320 var_C           = dword ptr -0Ch
.text:00002320 var_4           = dword ptr -4
.text:00002320
.text:00002320                 push    ebp
.text:00002321                 mov     ebp, esp
.text:00002323                 push    0FFFFFFFFh
.text:00002325                 push    offset __ehhandler$??0CBindInfo@NCoderMixer2@@QAE@XZ
.text:0000232A                 mov     eax, large fs:0
.text:00002330                 push    eax
.text:00002331                 push    ecx
.text:00002332                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002339                 mov     eax, dword ptr ds:___security_cookie
.text:0000233E                 xor     eax, ebp
.text:00002340                 push    eax
.text:00002341                 lea     eax, [ebp+var_C]
.text:00002344                 mov     large fs:0, eax
.text:0000234A                 mov     [ebp+var_10], ecx
.text:0000234D                 mov     ecx, [ebp+var_10]
.text:00002350                 call    ??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::CRecordVector<NCoderMixer2::CCoderStreamsInfo>(void)
.text:00002355                 mov     [ebp+var_4], 0
.text:0000235C                 mov     ecx, [ebp+var_10]
.text:0000235F                 add     ecx, 0Ch
.text:00002362                 call    ??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::CRecordVector<NCoderMixer2::CBond>(void)
.text:00002367                 mov     byte ptr [ebp+var_4], 1
.text:0000236B                 mov     ecx, [ebp+var_10]
.text:0000236E                 add     ecx, 18h
.text:00002371                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00002376                 mov     byte ptr [ebp+var_4], 2
.text:0000237A                 mov     ecx, [ebp+var_10]
.text:0000237D                 add     ecx, 28h ; '('
.text:00002380                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00002385                 mov     byte ptr [ebp+var_4], 3
.text:00002389                 mov     ecx, [ebp+var_10]
.text:0000238C                 add     ecx, 34h ; '4'
.text:0000238F                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00002394                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000239B                 mov     eax, [ebp+var_10]
.text:0000239E                 mov     ecx, [ebp+var_C]
.text:000023A1                 mov     large fs:0, ecx
.text:000023A8                 pop     ecx
.text:000023A9                 add     esp, 10h
.text:000023AC                 cmp     ebp, esp
.text:000023AE                 call    __RTC_CheckEsp
.text:000023B3                 mov     esp, ebp
.text:000023B5                 pop     ebp
.text:000023B6                 retn
.text:000023B6 ??0CBindInfo@NCoderMixer2@@QAE@XZ endp
.text:000023B6
.text:000023B6 ; ---------------------------------------------------------------------------
.text:000023B7                 align 4
.text:000023B7 _text           ends
.text:000023B7
.text$x:000023B8 ; ===========================================================================
.text$x:000023B8
.text$x:000023B8 ; Segment type: Pure code
.text$x:000023B8 ; Segment permissions: Read/Execute
.text$x:000023B8 _text$x         segment para public 'CODE' use32
.text$x:000023B8                 assume cs:_text$x
.text$x:000023B8                 ;org 23B8h
.text$x:000023B8 ; COMDAT (pick associative to section at 2320)
.text$x:000023B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000023B8
.text$x:000023B8 ; =============== S U B R O U T I N E =======================================
.text$x:000023B8
.text$x:000023B8
.text$x:000023B8 __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:000023B8                                         ; DATA XREF: .xdata$x:00002400o
.text$x:000023B8                 mov     ecx, [ebp-10h]
.text$x:000023BB                 jmp     ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>(void)
.text$x:000023BB __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$0 endp
.text$x:000023BB
.text$x:000023C0
.text$x:000023C0 ; =============== S U B R O U T I N E =======================================
.text$x:000023C0
.text$x:000023C0
.text$x:000023C0 __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:000023C0                                         ; DATA XREF: .xdata$x:00002408o
.text$x:000023C0                 mov     ecx, [ebp-10h]
.text$x:000023C3                 add     ecx, 0Ch
.text$x:000023C6                 jmp     ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>(void)
.text$x:000023C6 __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$1 endp
.text$x:000023C6
.text$x:000023CB
.text$x:000023CB ; =============== S U B R O U T I N E =======================================
.text$x:000023CB
.text$x:000023CB
.text$x:000023CB __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$2 proc near
.text$x:000023CB                                         ; DATA XREF: .xdata$x:00002410o
.text$x:000023CB                 mov     ecx, [ebp-10h]
.text$x:000023CE                 add     ecx, 18h
.text$x:000023D1                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:000023D1 __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$2 endp
.text$x:000023D1
.text$x:000023D6
.text$x:000023D6 ; =============== S U B R O U T I N E =======================================
.text$x:000023D6
.text$x:000023D6
.text$x:000023D6 __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$3 proc near
.text$x:000023D6                                         ; DATA XREF: .xdata$x:00002418o
.text$x:000023D6                 mov     ecx, [ebp-10h]
.text$x:000023D9                 add     ecx, 28h ; '('
.text$x:000023DC                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:000023DC __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$3 endp
.text$x:000023DC
.text$x:000023E1
.text$x:000023E1 ; =============== S U B R O U T I N E =======================================
.text$x:000023E1
.text$x:000023E1
.text$x:000023E1 __ehhandler$??0CBindInfo@NCoderMixer2@@QAE@XZ proc near
.text$x:000023E1                                         ; DATA XREF: NCoderMixer2::CBindInfo::CBindInfo(void)+5o
.text$x:000023E1
.text$x:000023E1 arg_4           = dword ptr  8
.text$x:000023E1
.text$x:000023E1                 mov     edx, [esp+arg_4]
.text$x:000023E5                 lea     eax, [edx+0Ch]
.text$x:000023E8                 mov     ecx, [edx-8]
.text$x:000023EB                 xor     ecx, eax
.text$x:000023ED                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000023F2                 mov     eax, offset __ehfuncinfo$??0CBindInfo@NCoderMixer2@@QAE@XZ
.text$x:000023F7                 jmp     ___CxxFrameHandler3
.text$x:000023F7 __ehhandler$??0CBindInfo@NCoderMixer2@@QAE@XZ endp
.text$x:000023F7
.text$x:000023F7 _text$x         ends
.text$x:000023F7
.xdata$x:000023FC ; ===========================================================================
.xdata$x:000023FC
.xdata$x:000023FC ; Segment type: Pure data
.xdata$x:000023FC ; Segment permissions: Read
.xdata$x:000023FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000023FC                 assume cs:_xdata$x
.xdata$x:000023FC                 ;org 23FCh
.xdata$x:000023FC ; COMDAT (pick associative to section at 2320)
.xdata$x:000023FC __unwindtable$??0CBindInfo@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:000023FC                                         ; DATA XREF: .xdata$x:00002424o
.xdata$x:000023FD                 db 0FFh
.xdata$x:000023FE                 db 0FFh
.xdata$x:000023FF                 db 0FFh
.xdata$x:00002400                 dd offset __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$0
.xdata$x:00002404                 align 8
.xdata$x:00002408                 dd offset __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$1
.xdata$x:0000240C                 db    1
.xdata$x:0000240D                 db    0
.xdata$x:0000240E                 db    0
.xdata$x:0000240F                 db    0
.xdata$x:00002410                 dd offset __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$2
.xdata$x:00002414                 db    2
.xdata$x:00002415                 db    0
.xdata$x:00002416                 db    0
.xdata$x:00002417                 db    0
.xdata$x:00002418                 dd offset __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$3
.xdata$x:0000241C __ehfuncinfo$??0CBindInfo@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:0000241C                                         ; DATA XREF: __ehhandler$??0CBindInfo@NCoderMixer2@@QAE@XZ+11o
.xdata$x:0000241D                 db    5
.xdata$x:0000241E                 db  93h ; ô
.xdata$x:0000241F                 db  19h
.xdata$x:00002420                 db    4
.xdata$x:00002421                 db    0
.xdata$x:00002422                 db    0
.xdata$x:00002423                 db    0
.xdata$x:00002424                 dd offset __unwindtable$??0CBindInfo@NCoderMixer2@@QAE@XZ
.xdata$x:00002428                 db    0
.xdata$x:00002429                 db    0
.xdata$x:0000242A                 db    0
.xdata$x:0000242B                 db    0
.xdata$x:0000242C                 db    0
.xdata$x:0000242D                 db    0
.xdata$x:0000242E                 db    0
.xdata$x:0000242F                 db    0
.xdata$x:00002430                 db    0
.xdata$x:00002431                 db    0
.xdata$x:00002432                 db    0
.xdata$x:00002433                 db    0
.xdata$x:00002434                 db    0
.xdata$x:00002435                 db    0
.xdata$x:00002436                 db    0
.xdata$x:00002437                 db    0
.xdata$x:00002438                 db    0
.xdata$x:00002439                 db    0
.xdata$x:0000243A                 db    0
.xdata$x:0000243B                 db    0
.xdata$x:0000243C                 db    1
.xdata$x:0000243D                 db    0
.xdata$x:0000243E                 db    0
.xdata$x:0000243F                 db    0
.xdata$x:0000243F _xdata$x        ends
.xdata$x:0000243F
.text:00002440 ; ===========================================================================
.text:00002440
.text:00002440 ; Segment type: Pure code
.text:00002440 ; Segment permissions: Read/Execute
.text:00002440 _text           segment para public 'CODE' use32
.text:00002440                 assume cs:_text
.text:00002440                 ;org 2440h
.text:00002440 ; COMDAT (pick any)
.text:00002440                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002440
.text:00002440 ; =============== S U B R O U T I N E =======================================
.text:00002440
.text:00002440 ; Attributes: bp-based frame
.text:00002440
.text:00002440 ; _DWORD __thiscall NCoderMixer2::CBindInfo::~CBindInfo(NCoderMixer2::CBindInfo *__hidden this)
.text:00002440                 public ??1CBindInfo@NCoderMixer2@@QAE@XZ
.text:00002440 ??1CBindInfo@NCoderMixer2@@QAE@XZ proc near
.text:00002440                                         ; CODE XREF: __unwindfunclet$??0CBindInfoEx@N7z@NArchive@@QAE@XZ$0+3j
.text:00002440                                         ; NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)+49p ...
.text:00002440
.text:00002440 var_10          = dword ptr -10h
.text:00002440 var_C           = dword ptr -0Ch
.text:00002440 var_4           = dword ptr -4
.text:00002440
.text:00002440                 push    ebp
.text:00002441                 mov     ebp, esp
.text:00002443                 push    0FFFFFFFFh
.text:00002445                 push    offset __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ
.text:0000244A                 mov     eax, large fs:0
.text:00002450                 push    eax
.text:00002451                 push    ecx
.text:00002452                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002459                 mov     eax, dword ptr ds:___security_cookie
.text:0000245E                 xor     eax, ebp
.text:00002460                 push    eax
.text:00002461                 lea     eax, [ebp+var_C]
.text:00002464                 mov     large fs:0, eax
.text:0000246A                 mov     [ebp+var_10], ecx
.text:0000246D                 mov     [ebp+var_4], 3
.text:00002474                 mov     ecx, [ebp+var_10]
.text:00002477                 add     ecx, 34h ; '4'
.text:0000247A                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000247F                 mov     byte ptr [ebp+var_4], 2
.text:00002483                 mov     ecx, [ebp+var_10]
.text:00002486                 add     ecx, 28h ; '('
.text:00002489                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000248E                 mov     byte ptr [ebp+var_4], 1
.text:00002492                 mov     ecx, [ebp+var_10]
.text:00002495                 add     ecx, 18h
.text:00002498                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000249D                 mov     byte ptr [ebp+var_4], 0
.text:000024A1                 mov     ecx, [ebp+var_10]
.text:000024A4                 add     ecx, 0Ch
.text:000024A7                 call    ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>(void)
.text:000024AC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000024B3                 mov     ecx, [ebp+var_10]
.text:000024B6                 call    ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>(void)
.text:000024BB                 mov     ecx, [ebp+var_C]
.text:000024BE                 mov     large fs:0, ecx
.text:000024C5                 pop     ecx
.text:000024C6                 add     esp, 10h
.text:000024C9                 cmp     ebp, esp
.text:000024CB                 call    __RTC_CheckEsp
.text:000024D0                 mov     esp, ebp
.text:000024D2                 pop     ebp
.text:000024D3                 retn
.text:000024D3 ??1CBindInfo@NCoderMixer2@@QAE@XZ endp
.text:000024D3
.text:000024D3 _text           ends
.text:000024D3
.text$x:000024D4 ; ===========================================================================
.text$x:000024D4
.text$x:000024D4 ; Segment type: Pure code
.text$x:000024D4 ; Segment permissions: Read/Execute
.text$x:000024D4 _text$x         segment para public 'CODE' use32
.text$x:000024D4                 assume cs:_text$x
.text$x:000024D4                 ;org 24D4h
.text$x:000024D4 ; COMDAT (pick associative to section at 2440)
.text$x:000024D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000024D4
.text$x:000024D4 ; =============== S U B R O U T I N E =======================================
.text$x:000024D4
.text$x:000024D4
.text$x:000024D4 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:000024D4                                         ; DATA XREF: .xdata$x:0000251Co
.text$x:000024D4                 mov     ecx, [ebp-10h]
.text$x:000024D7                 jmp     ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>(void)
.text$x:000024D7 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0 endp
.text$x:000024D7
.text$x:000024DC
.text$x:000024DC ; =============== S U B R O U T I N E =======================================
.text$x:000024DC
.text$x:000024DC
.text$x:000024DC __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:000024DC                                         ; DATA XREF: .xdata$x:00002524o
.text$x:000024DC                 mov     ecx, [ebp-10h]
.text$x:000024DF                 add     ecx, 0Ch
.text$x:000024E2                 jmp     ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>(void)
.text$x:000024E2 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1 endp
.text$x:000024E2
.text$x:000024E7
.text$x:000024E7 ; =============== S U B R O U T I N E =======================================
.text$x:000024E7
.text$x:000024E7
.text$x:000024E7 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2 proc near
.text$x:000024E7                                         ; DATA XREF: .xdata$x:0000252Co
.text$x:000024E7                 mov     ecx, [ebp-10h]
.text$x:000024EA                 add     ecx, 18h
.text$x:000024ED                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:000024ED __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2 endp
.text$x:000024ED
.text$x:000024F2
.text$x:000024F2 ; =============== S U B R O U T I N E =======================================
.text$x:000024F2
.text$x:000024F2
.text$x:000024F2 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3 proc near
.text$x:000024F2                                         ; DATA XREF: .xdata$x:00002534o
.text$x:000024F2                 mov     ecx, [ebp-10h]
.text$x:000024F5                 add     ecx, 28h ; '('
.text$x:000024F8                 jmp     ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text$x:000024F8 __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3 endp
.text$x:000024F8
.text$x:000024FD
.text$x:000024FD ; =============== S U B R O U T I N E =======================================
.text$x:000024FD
.text$x:000024FD
.text$x:000024FD __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ proc near
.text$x:000024FD                                         ; DATA XREF: NCoderMixer2::CBindInfo::~CBindInfo(void)+5o
.text$x:000024FD
.text$x:000024FD arg_4           = dword ptr  8
.text$x:000024FD
.text$x:000024FD                 mov     edx, [esp+arg_4]
.text$x:00002501                 lea     eax, [edx+0Ch]
.text$x:00002504                 mov     ecx, [edx-8]
.text$x:00002507                 xor     ecx, eax
.text$x:00002509                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000250E                 mov     eax, offset __ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ
.text$x:00002513                 jmp     ___CxxFrameHandler3
.text$x:00002513 __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ endp
.text$x:00002513
.text$x:00002513 _text$x         ends
.text$x:00002513
.xdata$x:00002518 ; ===========================================================================
.xdata$x:00002518
.xdata$x:00002518 ; Segment type: Pure data
.xdata$x:00002518 ; Segment permissions: Read
.xdata$x:00002518 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002518                 assume cs:_xdata$x
.xdata$x:00002518                 ;org 2518h
.xdata$x:00002518 ; COMDAT (pick associative to section at 2440)
.xdata$x:00002518 __unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:00002518                                         ; DATA XREF: .xdata$x:00002540o
.xdata$x:00002519                 db 0FFh
.xdata$x:0000251A                 db 0FFh
.xdata$x:0000251B                 db 0FFh
.xdata$x:0000251C                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0
.xdata$x:00002520                 db    0
.xdata$x:00002521                 db    0
.xdata$x:00002522                 db    0
.xdata$x:00002523                 db    0
.xdata$x:00002524                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1
.xdata$x:00002528                 db    1
.xdata$x:00002529                 db    0
.xdata$x:0000252A                 db    0
.xdata$x:0000252B                 db    0
.xdata$x:0000252C                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2
.xdata$x:00002530                 db    2
.xdata$x:00002531                 db    0
.xdata$x:00002532                 db    0
.xdata$x:00002533                 db    0
.xdata$x:00002534                 dd offset __unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3
.xdata$x:00002538 __ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:00002538                                         ; DATA XREF: __ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ+11o
.xdata$x:00002539                 db    5
.xdata$x:0000253A                 db  93h ; ô
.xdata$x:0000253B                 db  19h
.xdata$x:0000253C                 db    4
.xdata$x:0000253D                 db    0
.xdata$x:0000253E                 db    0
.xdata$x:0000253F                 db    0
.xdata$x:00002540                 dd offset __unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ
.xdata$x:00002544                 db    0
.xdata$x:00002545                 db    0
.xdata$x:00002546                 db    0
.xdata$x:00002547                 db    0
.xdata$x:00002548                 db    0
.xdata$x:00002549                 db    0
.xdata$x:0000254A                 db    0
.xdata$x:0000254B                 db    0
.xdata$x:0000254C                 db    0
.xdata$x:0000254D                 db    0
.xdata$x:0000254E                 db    0
.xdata$x:0000254F                 db    0
.xdata$x:00002550                 db    0
.xdata$x:00002551                 db    0
.xdata$x:00002552                 db    0
.xdata$x:00002553                 db    0
.xdata$x:00002554                 db    0
.xdata$x:00002555                 db    0
.xdata$x:00002556                 db    0
.xdata$x:00002557                 db    0
.xdata$x:00002558                 db    1
.xdata$x:00002559                 db    0
.xdata$x:0000255A                 db    0
.xdata$x:0000255B                 db    0
.xdata$x:0000255B _xdata$x        ends
.xdata$x:0000255B
.text:0000255C ; ===========================================================================
.text:0000255C
.text:0000255C ; Segment type: Pure code
.text:0000255C ; Segment permissions: Read/Execute
.text:0000255C _text           segment para public 'CODE' use32
.text:0000255C                 assume cs:_text
.text:0000255C                 ;org 255Ch
.text:0000255C ; COMDAT (pick any)
.text:0000255C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000255C
.text:0000255C ; =============== S U B R O U T I N E =======================================
.text:0000255C
.text:0000255C ; Attributes: bp-based frame
.text:0000255C
.text:0000255C ; _DWORD __thiscall NArchive::N7z::CBindInfoEx::~CBindInfoEx(NArchive::N7z::CBindInfoEx *__hidden this)
.text:0000255C                 public ??1CBindInfoEx@N7z@NArchive@@QAE@XZ
.text:0000255C ??1CBindInfoEx@N7z@NArchive@@QAE@XZ proc near
.text:0000255C                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+FDp
.text:0000255C                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+185p ...
.text:0000255C
.text:0000255C var_10          = dword ptr -10h
.text:0000255C var_C           = dword ptr -0Ch
.text:0000255C var_4           = dword ptr -4
.text:0000255C
.text:0000255C                 push    ebp
.text:0000255D                 mov     ebp, esp
.text:0000255F                 push    0FFFFFFFFh
.text:00002561                 push    offset __ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
.text:00002566                 mov     eax, large fs:0
.text:0000256C                 push    eax
.text:0000256D                 push    ecx
.text:0000256E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002575                 mov     eax, dword ptr ds:___security_cookie
.text:0000257A                 xor     eax, ebp
.text:0000257C                 push    eax
.text:0000257D                 lea     eax, [ebp+var_C]
.text:00002580                 mov     large fs:0, eax
.text:00002586                 mov     [ebp+var_10], ecx
.text:00002589                 mov     [ebp+var_4], 0
.text:00002590                 mov     ecx, [ebp+var_10]
.text:00002593                 add     ecx, 40h ; '@'
.text:00002596                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:0000259B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000025A2                 mov     ecx, [ebp+var_10] ; this
.text:000025A5                 call    ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text:000025AA                 mov     ecx, [ebp+var_C]
.text:000025AD                 mov     large fs:0, ecx
.text:000025B4                 pop     ecx
.text:000025B5                 add     esp, 10h
.text:000025B8                 cmp     ebp, esp
.text:000025BA                 call    __RTC_CheckEsp
.text:000025BF                 mov     esp, ebp
.text:000025C1                 pop     ebp
.text:000025C2                 retn
.text:000025C2 ??1CBindInfoEx@N7z@NArchive@@QAE@XZ endp
.text:000025C2
.text:000025C2 ; ---------------------------------------------------------------------------
.text:000025C3                 align 4
.text:000025C3 _text           ends
.text:000025C3
.text$x:000025C4 ; ===========================================================================
.text$x:000025C4
.text$x:000025C4 ; Segment type: Pure code
.text$x:000025C4 ; Segment permissions: Read/Execute
.text$x:000025C4 _text$x         segment para public 'CODE' use32
.text$x:000025C4                 assume cs:_text$x
.text$x:000025C4                 ;org 25C4h
.text$x:000025C4 ; COMDAT (pick associative to section at 255C)
.text$x:000025C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000025C4
.text$x:000025C4 ; =============== S U B R O U T I N E =======================================
.text$x:000025C4
.text$x:000025C4
.text$x:000025C4 __unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:000025C4                                         ; DATA XREF: .xdata$x:000025ECo
.text$x:000025C4                 mov     ecx, [ebp-10h]  ; this
.text$x:000025C7                 jmp     ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text$x:000025C7 __unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0 endp
.text$x:000025C7
.text$x:000025CC
.text$x:000025CC ; =============== S U B R O U T I N E =======================================
.text$x:000025CC
.text$x:000025CC
.text$x:000025CC __ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ proc near
.text$x:000025CC                                         ; DATA XREF: NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)+5o
.text$x:000025CC
.text$x:000025CC arg_4           = dword ptr  8
.text$x:000025CC
.text$x:000025CC                 mov     edx, [esp+arg_4]
.text$x:000025D0                 lea     eax, [edx+0Ch]
.text$x:000025D3                 mov     ecx, [edx-8]
.text$x:000025D6                 xor     ecx, eax
.text$x:000025D8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000025DD                 mov     eax, offset __ehfuncinfo$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
.text$x:000025E2                 jmp     ___CxxFrameHandler3
.text$x:000025E2 __ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ endp
.text$x:000025E2
.text$x:000025E2 ; ---------------------------------------------------------------------------
.text$x:000025E7                 align 4
.text$x:000025E7 _text$x         ends
.text$x:000025E7
.xdata$x:000025E8 ; ===========================================================================
.xdata$x:000025E8
.xdata$x:000025E8 ; Segment type: Pure data
.xdata$x:000025E8 ; Segment permissions: Read
.xdata$x:000025E8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000025E8                 assume cs:_xdata$x
.xdata$x:000025E8                 ;org 25E8h
.xdata$x:000025E8 ; COMDAT (pick associative to section at 255C)
.xdata$x:000025E8 __unwindtable$??1CBindInfoEx@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:000025E8                                         ; DATA XREF: .xdata$x:000025F8o
.xdata$x:000025E9                 db 0FFh
.xdata$x:000025EA                 db 0FFh
.xdata$x:000025EB                 db 0FFh
.xdata$x:000025EC                 dd offset __unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0
.xdata$x:000025F0 __ehfuncinfo$??1CBindInfoEx@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000025F0                                         ; DATA XREF: __ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ+11o
.xdata$x:000025F1                 db    5
.xdata$x:000025F2                 db  93h ; ô
.xdata$x:000025F3                 db  19h
.xdata$x:000025F4                 db    1
.xdata$x:000025F5                 db    0
.xdata$x:000025F6                 db    0
.xdata$x:000025F7                 db    0
.xdata$x:000025F8                 dd offset __unwindtable$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
.xdata$x:000025FC                 db    0
.xdata$x:000025FD                 db    0
.xdata$x:000025FE                 db    0
.xdata$x:000025FF                 db    0
.xdata$x:00002600                 db    0
.xdata$x:00002601                 db    0
.xdata$x:00002602                 db    0
.xdata$x:00002603                 db    0
.xdata$x:00002604                 db    0
.xdata$x:00002605                 db    0
.xdata$x:00002606                 db    0
.xdata$x:00002607                 db    0
.xdata$x:00002608                 db    0
.xdata$x:00002609                 db    0
.xdata$x:0000260A                 db    0
.xdata$x:0000260B                 db    0
.xdata$x:0000260C                 db    0
.xdata$x:0000260D                 db    0
.xdata$x:0000260E                 db    0
.xdata$x:0000260F                 db    0
.xdata$x:00002610                 db    1
.xdata$x:00002611                 db    0
.xdata$x:00002612                 db    0
.xdata$x:00002613                 db    0
.xdata$x:00002613 _xdata$x        ends
.xdata$x:00002613
.text:00002614 ; ===========================================================================
.text:00002614
.text:00002614 ; Segment type: Pure code
.text:00002614 ; Segment permissions: Read/Execute
.text:00002614 _text           segment para public 'CODE' use32
.text:00002614                 assume cs:_text
.text:00002614                 ;org 2614h
.text:00002614 ; COMDAT (pick any)
.text:00002614                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002614
.text:00002614 ; =============== S U B R O U T I N E =======================================
.text:00002614
.text:00002614 ; Attributes: bp-based frame
.text:00002614
.text:00002614 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSectionLock *this, struct NWindows::NSynchronization::CCriticalSection *)
.text:00002614                 public ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z
.text:00002614 ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z proc near
.text:00002614                                         ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::Read(void *,uint,uint *)+24p
.text:00002614
.text:00002614 var_4           = dword ptr -4
.text:00002614 arg_0           = dword ptr  8
.text:00002614
.text:00002614                 push    ebp
.text:00002615                 mov     ebp, esp
.text:00002617                 push    ecx
.text:00002618                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000261F                 mov     [ebp+var_4], ecx
.text:00002622                 mov     eax, [ebp+var_4]
.text:00002625                 mov     ecx, [ebp+arg_0]
.text:00002628                 mov     [eax], ecx
.text:0000262A                 mov     edx, [ebp+var_4]
.text:0000262D                 mov     ecx, [edx]      ; this
.text:0000262F                 call    ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter(void)
.text:00002634                 mov     eax, [ebp+var_4]
.text:00002637                 add     esp, 4
.text:0000263A                 cmp     ebp, esp
.text:0000263C                 call    __RTC_CheckEsp
.text:00002641                 mov     esp, ebp
.text:00002643                 pop     ebp
.text:00002644                 retn    4
.text:00002644 ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z endp
.text:00002644
.text:00002644 ; ---------------------------------------------------------------------------
.text:00002647                 align 4
.text:00002647 _text           ends
.text:00002647
.text:00002648 ; ===========================================================================
.text:00002648
.text:00002648 ; Segment type: Pure code
.text:00002648 ; Segment permissions: Read/Execute
.text:00002648 _text           segment para public 'CODE' use32
.text:00002648                 assume cs:_text
.text:00002648                 ;org 2648h
.text:00002648 ; COMDAT (pick any)
.text:00002648                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002648
.text:00002648 ; =============== S U B R O U T I N E =======================================
.text:00002648
.text:00002648 ; Attributes: bp-based frame
.text:00002648
.text:00002648 ; void __thiscall NWindows::NSynchronization::CCriticalSection::Enter(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00002648                 public ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:00002648 ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:00002648                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)+1Bp
.text:00002648
.text:00002648 lpCriticalSection= dword ptr -4
.text:00002648
.text:00002648                 push    ebp
.text:00002649                 mov     ebp, esp
.text:0000264B                 push    ecx
.text:0000264C                 push    esi
.text:0000264D                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00002654                 mov     [ebp+lpCriticalSection], ecx
.text:00002657                 mov     esi, esp
.text:00002659                 mov     eax, [ebp+lpCriticalSection]
.text:0000265C                 push    eax             ; lpCriticalSection
.text:0000265D                 call    dword ptr ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:00002663                 cmp     esi, esp
.text:00002665                 call    __RTC_CheckEsp
.text:0000266A                 pop     esi
.text:0000266B                 add     esp, 4
.text:0000266E                 cmp     ebp, esp
.text:00002670                 call    __RTC_CheckEsp
.text:00002675                 mov     esp, ebp
.text:00002677                 pop     ebp
.text:00002678                 retn
.text:00002678 ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:00002678
.text:00002678 ; ---------------------------------------------------------------------------
.text:00002679                 align 4
.text:00002679 _text           ends
.text:00002679
.text:0000267C ; ===========================================================================
.text:0000267C
.text:0000267C ; Segment type: Pure code
.text:0000267C ; Segment permissions: Read/Execute
.text:0000267C _text           segment para public 'CODE' use32
.text:0000267C                 assume cs:_text
.text:0000267C                 ;org 267Ch
.text:0000267C ; COMDAT (pick any)
.text:0000267C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000267C
.text:0000267C ; =============== S U B R O U T I N E =======================================
.text:0000267C
.text:0000267C ; Attributes: bp-based frame
.text:0000267C
.text:0000267C ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(NWindows::NSynchronization::CCriticalSectionLock *__hidden this)
.text:0000267C                 public ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ
.text:0000267C ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ proc near
.text:0000267C                                         ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::Read(void *,uint,uint *)+9Dp
.text:0000267C                                         ; NArchive::N7z::CLockedSequentialInStreamMT::Read(void *,uint,uint *)+140p
.text:0000267C
.text:0000267C var_4           = dword ptr -4
.text:0000267C
.text:0000267C                 push    ebp
.text:0000267D                 mov     ebp, esp
.text:0000267F                 push    ecx
.text:00002680                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002687                 mov     [ebp+var_4], ecx
.text:0000268A                 mov     ecx, [ebp+var_4] ; this
.text:0000268D                 call    ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock(void)
.text:00002692                 add     esp, 4
.text:00002695                 cmp     ebp, esp
.text:00002697                 call    __RTC_CheckEsp
.text:0000269C                 mov     esp, ebp
.text:0000269E                 pop     ebp
.text:0000269F                 retn
.text:0000269F ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ endp
.text:0000269F
.text:0000269F _text           ends
.text:0000269F
.text:000026A0 ; ===========================================================================
.text:000026A0
.text:000026A0 ; Segment type: Pure code
.text:000026A0 ; Segment permissions: Read/Execute
.text:000026A0 _text           segment para public 'CODE' use32
.text:000026A0                 assume cs:_text
.text:000026A0                 ;org 26A0h
.text:000026A0 ; COMDAT (pick any)
.text:000026A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000026A0
.text:000026A0 ; =============== S U B R O U T I N E =======================================
.text:000026A0
.text:000026A0 ; Attributes: bp-based frame
.text:000026A0
.text:000026A0 ; void __thiscall NWindows::NSynchronization::CCriticalSectionLock::Unlock(NWindows::NSynchronization::CCriticalSectionLock *__hidden this)
.text:000026A0                 public ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ
.text:000026A0 ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ proc near
.text:000026A0                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)+11p
.text:000026A0
.text:000026A0 var_4           = dword ptr -4
.text:000026A0
.text:000026A0                 push    ebp
.text:000026A1                 mov     ebp, esp
.text:000026A3                 push    ecx
.text:000026A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000026AB                 mov     [ebp+var_4], ecx
.text:000026AE                 mov     eax, [ebp+var_4]
.text:000026B1                 mov     ecx, [eax]      ; this
.text:000026B3                 call    ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave(void)
.text:000026B8                 add     esp, 4
.text:000026BB                 cmp     ebp, esp
.text:000026BD                 call    __RTC_CheckEsp
.text:000026C2                 mov     esp, ebp
.text:000026C4                 pop     ebp
.text:000026C5                 retn
.text:000026C5 ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ endp
.text:000026C5
.text:000026C5 ; ---------------------------------------------------------------------------
.text:000026C6                 align 4
.text:000026C6 _text           ends
.text:000026C6
.text:000026C8 ; ===========================================================================
.text:000026C8
.text:000026C8 ; Segment type: Pure code
.text:000026C8 ; Segment permissions: Read/Execute
.text:000026C8 _text           segment para public 'CODE' use32
.text:000026C8                 assume cs:_text
.text:000026C8                 ;org 26C8h
.text:000026C8 ; COMDAT (pick any)
.text:000026C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000026C8
.text:000026C8 ; =============== S U B R O U T I N E =======================================
.text:000026C8
.text:000026C8 ; Attributes: bp-based frame
.text:000026C8
.text:000026C8 ; void __thiscall NWindows::NSynchronization::CCriticalSection::Leave(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:000026C8                 public ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:000026C8 ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:000026C8                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::Unlock(void)+13p
.text:000026C8
.text:000026C8 lpCriticalSection= dword ptr -4
.text:000026C8
.text:000026C8                 push    ebp
.text:000026C9                 mov     ebp, esp
.text:000026CB                 push    ecx
.text:000026CC                 push    esi
.text:000026CD                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:000026D4                 mov     [ebp+lpCriticalSection], ecx
.text:000026D7                 mov     esi, esp
.text:000026D9                 mov     eax, [ebp+lpCriticalSection]
.text:000026DC                 push    eax             ; lpCriticalSection
.text:000026DD                 call    dword ptr ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:000026E3                 cmp     esi, esp
.text:000026E5                 call    __RTC_CheckEsp
.text:000026EA                 pop     esi
.text:000026EB                 add     esp, 4
.text:000026EE                 cmp     ebp, esp
.text:000026F0                 call    __RTC_CheckEsp
.text:000026F5                 mov     esp, ebp
.text:000026F7                 pop     ebp
.text:000026F8                 retn
.text:000026F8 ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:000026F8
.text:000026F8 ; ---------------------------------------------------------------------------
.text:000026F9                 align 4
.text:000026F9 _text           ends
.text:000026F9
.text:000026FC ; ===========================================================================
.text:000026FC
.text:000026FC ; Segment type: Pure code
.text:000026FC ; Segment permissions: Read/Execute
.text:000026FC _text           segment para public 'CODE' use32
.text:000026FC                 assume cs:_text
.text:000026FC                 ;org 26FCh
.text:000026FC ; COMDAT (pick any)
.text:000026FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000026FC
.text:000026FC ; =============== S U B R O U T I N E =======================================
.text:000026FC
.text:000026FC ; Attributes: bp-based frame
.text:000026FC
.text:000026FC ; int __stdcall BoolToInt(bool)
.text:000026FC                 public ?BoolToInt@@YGH_N@Z
.text:000026FC ?BoolToInt@@YGH_N@Z proc near           ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+C55p
.text:000026FC
.text:000026FC arg_0           = byte ptr  8
.text:000026FC
.text:000026FC                 push    ebp
.text:000026FD                 mov     ebp, esp
.text:000026FF                 movzx   eax, [ebp+arg_0]
.text:00002703                 neg     eax
.text:00002705                 sbb     eax, eax
.text:00002707                 neg     eax
.text:00002709                 pop     ebp
.text:0000270A                 retn    4
.text:0000270A ?BoolToInt@@YGH_N@Z endp
.text:0000270A
.text:0000270A ; ---------------------------------------------------------------------------
.text:0000270D                 align 10h
.text:0000270D _text           ends
.text:0000270D
.text:00002710 ; ===========================================================================
.text:00002710
.text:00002710 ; Segment type: Pure code
.text:00002710 ; Segment permissions: Read/Execute
.text:00002710 _text           segment para public 'CODE' use32
.text:00002710                 assume cs:_text
.text:00002710                 ;org 2710h
.text:00002710 ; COMDAT (pick any)
.text:00002710                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002710
.text:00002710 ; =============== S U B R O U T I N E =======================================
.text:00002710
.text:00002710 ; Attributes: bp-based frame
.text:00002710
.text:00002710 ; _DWORD __thiscall CMyComBSTR::CMyComBSTR(CMyComBSTR *__hidden this)
.text:00002710                 public ??0CMyComBSTR@@QAE@XZ
.text:00002710 ??0CMyComBSTR@@QAE@XZ proc near         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+99Ap
.text:00002710
.text:00002710 var_4           = dword ptr -4
.text:00002710
.text:00002710                 push    ebp
.text:00002711                 mov     ebp, esp
.text:00002713                 push    ecx
.text:00002714                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000271B                 mov     [ebp+var_4], ecx
.text:0000271E                 mov     eax, [ebp+var_4]
.text:00002721                 mov     dword ptr [eax], 0
.text:00002727                 mov     eax, [ebp+var_4]
.text:0000272A                 mov     esp, ebp
.text:0000272C                 pop     ebp
.text:0000272D                 retn
.text:0000272D ??0CMyComBSTR@@QAE@XZ endp
.text:0000272D
.text:0000272D ; ---------------------------------------------------------------------------
.text:0000272E                 align 10h
.text:0000272E _text           ends
.text:0000272E
.text:00002730 ; ===========================================================================
.text:00002730
.text:00002730 ; Segment type: Pure code
.text:00002730 ; Segment permissions: Read/Execute
.text:00002730 _text           segment para public 'CODE' use32
.text:00002730                 assume cs:_text
.text:00002730                 ;org 2730h
.text:00002730 ; COMDAT (pick any)
.text:00002730                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002730
.text:00002730 ; =============== S U B R O U T I N E =======================================
.text:00002730
.text:00002730 ; Attributes: bp-based frame
.text:00002730
.text:00002730 ; _DWORD __thiscall CMyComBSTR::~CMyComBSTR(CMyComBSTR *__hidden this)
.text:00002730                 public ??1CMyComBSTR@@QAE@XZ
.text:00002730 ??1CMyComBSTR@@QAE@XZ proc near         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+9EBp
.text:00002730                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+B83p ...
.text:00002730
.text:00002730 var_4           = dword ptr -4
.text:00002730
.text:00002730                 push    ebp
.text:00002731                 mov     ebp, esp
.text:00002733                 push    ecx
.text:00002734                 push    esi
.text:00002735                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000273C                 mov     [ebp+var_4], ecx
.text:0000273F                 mov     esi, esp
.text:00002741                 mov     eax, [ebp+var_4]
.text:00002744                 mov     ecx, [eax]
.text:00002746                 push    ecx             ; bstrString
.text:00002747                 call    dword ptr ds:__imp__SysFreeString@4 ; SysFreeString(x)
.text:0000274D                 cmp     esi, esp
.text:0000274F                 call    __RTC_CheckEsp
.text:00002754                 pop     esi
.text:00002755                 add     esp, 4
.text:00002758                 cmp     ebp, esp
.text:0000275A                 call    __RTC_CheckEsp
.text:0000275F                 mov     esp, ebp
.text:00002761                 pop     ebp
.text:00002762                 retn
.text:00002762 ??1CMyComBSTR@@QAE@XZ endp
.text:00002762
.text:00002762 ; ---------------------------------------------------------------------------
.text:00002763                 align 4
.text:00002763 _text           ends
.text:00002763
.text:00002764 ; ===========================================================================
.text:00002764
.text:00002764 ; Segment type: Pure code
.text:00002764 ; Segment permissions: Read/Execute
.text:00002764 _text           segment para public 'CODE' use32
.text:00002764                 assume cs:_text
.text:00002764                 ;org 2764h
.text:00002764 ; COMDAT (pick any)
.text:00002764                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002764
.text:00002764 ; =============== S U B R O U T I N E =======================================
.text:00002764
.text:00002764 ; Attributes: bp-based frame
.text:00002764
.text:00002764 ; public: wchar_t * * __thiscall CMyComBSTR::operator&(void)
.text:00002764                 public ??ICMyComBSTR@@QAEPAPA_WXZ
.text:00002764 ??ICMyComBSTR@@QAEPAPA_WXZ proc near    ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+9A9p
.text:00002764
.text:00002764 var_4           = dword ptr -4
.text:00002764
.text:00002764                 push    ebp
.text:00002765                 mov     ebp, esp
.text:00002767                 push    ecx
.text:00002768                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000276F                 mov     [ebp+var_4], ecx
.text:00002772                 mov     eax, [ebp+var_4]
.text:00002775                 mov     esp, ebp
.text:00002777                 pop     ebp
.text:00002778                 retn
.text:00002778 ??ICMyComBSTR@@QAEPAPA_WXZ endp
.text:00002778
.text:00002778 ; ---------------------------------------------------------------------------
.text:00002779                 align 4
.text:00002779 _text           ends
.text:00002779
.text:0000277C ; ===========================================================================
.text:0000277C
.text:0000277C ; Segment type: Pure code
.text:0000277C ; Segment permissions: Read/Execute
.text:0000277C _text           segment para public 'CODE' use32
.text:0000277C                 assume cs:_text
.text:0000277C                 ;org 277Ch
.text:0000277C ; COMDAT (pick any)
.text:0000277C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000277C
.text:0000277C ; =============== S U B R O U T I N E =======================================
.text:0000277C
.text:0000277C ; Attributes: bp-based frame
.text:0000277C
.text:0000277C ; public: __thiscall CMyComBSTR::operator wchar_t const *(void)const
.text:0000277C                 public ??BCMyComBSTR@@QBEPB_WXZ
.text:0000277C ??BCMyComBSTR@@QBEPB_WXZ proc near      ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+A46p
.text:0000277C                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+A55p ...
.text:0000277C
.text:0000277C var_4           = dword ptr -4
.text:0000277C
.text:0000277C                 push    ebp
.text:0000277D                 mov     ebp, esp
.text:0000277F                 push    ecx
.text:00002780                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002787                 mov     [ebp+var_4], ecx
.text:0000278A                 mov     eax, [ebp+var_4]
.text:0000278D                 mov     eax, [eax]
.text:0000278F                 mov     esp, ebp
.text:00002791                 pop     ebp
.text:00002792                 retn
.text:00002792 ??BCMyComBSTR@@QBEPB_WXZ endp
.text:00002792
.text:00002792 ; ---------------------------------------------------------------------------
.text:00002793                 align 4
.text:00002793 _text           ends
.text:00002793
.text:00002794 ; ===========================================================================
.text:00002794
.text:00002794 ; Segment type: Pure code
.text:00002794 ; Segment permissions: Read/Execute
.text:00002794 _text           segment para public 'CODE' use32
.text:00002794                 assume cs:_text
.text:00002794                 ;org 2794h
.text:00002794 ; COMDAT (pick any)
.text:00002794                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002794
.text:00002794 ; =============== S U B R O U T I N E =======================================
.text:00002794
.text:00002794 ; Attributes: bp-based frame
.text:00002794
.text:00002794 ; void __thiscall CLimitedSequentialInStream::SetStream(CLimitedSequentialInStream *this, struct ISequentialInStream *)
.text:00002794                 public ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z
.text:00002794 ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z proc near
.text:00002794                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1386p
.text:00002794
.text:00002794 var_4           = dword ptr -4
.text:00002794 arg_0           = dword ptr  8
.text:00002794
.text:00002794                 push    ebp
.text:00002795                 mov     ebp, esp
.text:00002797                 push    ecx
.text:00002798                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000279F                 mov     [ebp+var_4], ecx
.text:000027A2                 mov     eax, [ebp+arg_0]
.text:000027A5                 push    eax
.text:000027A6                 mov     ecx, [ebp+var_4]
.text:000027A9                 add     ecx, 8
.text:000027AC                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:000027B1                 add     esp, 4
.text:000027B4                 cmp     ebp, esp
.text:000027B6                 call    __RTC_CheckEsp
.text:000027BB                 mov     esp, ebp
.text:000027BD                 pop     ebp
.text:000027BE                 retn    4
.text:000027BE ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z endp
.text:000027BE
.text:000027BE ; ---------------------------------------------------------------------------
.text:000027C1                 align 4
.text:000027C1 _text           ends
.text:000027C1
.text:000027C4 ; ===========================================================================
.text:000027C4
.text:000027C4 ; Segment type: Pure code
.text:000027C4 ; Segment permissions: Read/Execute
.text:000027C4 _text           segment para public 'CODE' use32
.text:000027C4                 assume cs:_text
.text:000027C4                 ;org 27C4h
.text:000027C4 ; COMDAT (pick any)
.text:000027C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000027C4
.text:000027C4 ; =============== S U B R O U T I N E =======================================
.text:000027C4
.text:000027C4 ; Attributes: bp-based frame
.text:000027C4
.text:000027C4 ; void __thiscall CLimitedSequentialInStream::Init(CLimitedSequentialInStream *this, unsigned __int64)
.text:000027C4                 public ?Init@CLimitedSequentialInStream@@QAEX_K@Z
.text:000027C4 ?Init@CLimitedSequentialInStream@@QAEX_K@Z proc near
.text:000027C4                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+13B4p
.text:000027C4
.text:000027C4 var_4           = dword ptr -4
.text:000027C4 arg_0           = qword ptr  8
.text:000027C4
.text:000027C4                 push    ebp
.text:000027C5                 mov     ebp, esp
.text:000027C7                 push    ecx
.text:000027C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000027CF                 mov     [ebp+var_4], ecx
.text:000027D2                 mov     eax, [ebp+var_4]
.text:000027D5                 mov     ecx, dword ptr [ebp+arg_0]
.text:000027D8                 mov     [eax+10h], ecx
.text:000027DB                 mov     edx, dword ptr [ebp+arg_0+4]
.text:000027DE                 mov     [eax+14h], edx
.text:000027E1                 mov     eax, [ebp+var_4]
.text:000027E4                 mov     dword ptr [eax+18h], 0
.text:000027EB                 mov     dword ptr [eax+1Ch], 0
.text:000027F2                 mov     ecx, [ebp+var_4]
.text:000027F5                 mov     byte ptr [ecx+20h], 0
.text:000027F9                 mov     esp, ebp
.text:000027FB                 pop     ebp
.text:000027FC                 retn    8
.text:000027FC ?Init@CLimitedSequentialInStream@@QAEX_K@Z endp
.text:000027FC
.text:000027FC ; ---------------------------------------------------------------------------
.text:000027FF                 align 10h
.text:000027FF _text           ends
.text:000027FF
.text:00002800 ; ===========================================================================
.text:00002800
.text:00002800 ; Segment type: Pure code
.text:00002800 ; Segment permissions: Read/Execute
.text:00002800 _text           segment para public 'CODE' use32
.text:00002800                 assume cs:_text
.text:00002800                 ;org 2800h
.text:00002800 ; COMDAT (pick any)
.text:00002800                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002800
.text:00002800 ; =============== S U B R O U T I N E =======================================
.text:00002800
.text:00002800 ; Attributes: bp-based frame
.text:00002800
.text:00002800 ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:00002800                 public ?Len@UString@@QBEIXZ
.text:00002800 ?Len@UString@@QBEIXZ proc near          ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+A66p
.text:00002800
.text:00002800 var_4           = dword ptr -4
.text:00002800
.text:00002800                 push    ebp
.text:00002801                 mov     ebp, esp
.text:00002803                 push    ecx
.text:00002804                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000280B                 mov     [ebp+var_4], ecx
.text:0000280E                 mov     eax, [ebp+var_4]
.text:00002811                 mov     eax, [eax+4]
.text:00002814                 mov     esp, ebp
.text:00002816                 pop     ebp
.text:00002817                 retn
.text:00002817 ?Len@UString@@QBEIXZ endp
.text:00002817
.text:00002817 _text           ends
.text:00002817
.text:00002818 ; ===========================================================================
.text:00002818
.text:00002818 ; Segment type: Pure code
.text:00002818 ; Segment permissions: Read/Execute
.text:00002818 _text           segment para public 'CODE' use32
.text:00002818                 assume cs:_text
.text:00002818                 ;org 2818h
.text:00002818 ; COMDAT (pick any)
.text:00002818                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002818
.text:00002818 ; =============== S U B R O U T I N E =======================================
.text:00002818
.text:00002818 ; Attributes: bp-based frame
.text:00002818
.text:00002818 ; void __thiscall UString::Empty(UString *__hidden this)
.text:00002818                 public ?Empty@UString@@QAEXXZ
.text:00002818 ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+A31p
.text:00002818
.text:00002818 var_4           = dword ptr -4
.text:00002818
.text:00002818                 push    ebp
.text:00002819                 mov     ebp, esp
.text:0000281B                 push    ecx
.text:0000281C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002823                 mov     [ebp+var_4], ecx
.text:00002826                 mov     eax, [ebp+var_4]
.text:00002829                 mov     dword ptr [eax+4], 0
.text:00002830                 mov     ecx, [ebp+var_4]
.text:00002833                 mov     edx, [ecx]
.text:00002835                 xor     eax, eax
.text:00002837                 mov     [edx], ax
.text:0000283A                 mov     esp, ebp
.text:0000283C                 pop     ebp
.text:0000283D                 retn
.text:0000283D ?Empty@UString@@QAEXXZ endp
.text:0000283D
.text:0000283D ; ---------------------------------------------------------------------------
.text:0000283E                 align 10h
.text:0000283E _text           ends
.text:0000283E
.text:00002840 ; ===========================================================================
.text:00002840
.text:00002840 ; Segment type: Pure code
.text:00002840 ; Segment permissions: Read/Execute
.text:00002840 _text           segment para public 'CODE' use32
.text:00002840                 assume cs:_text
.text:00002840                 ;org 2840h
.text:00002840 ; COMDAT (pick any)
.text:00002840                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002840
.text:00002840 ; =============== S U B R O U T I N E =======================================
.text:00002840
.text:00002840 ; Attributes: bp-based frame
.text:00002840
.text:00002840 ; struct IUnknown *__thiscall NCoderMixer2::CCoder::GetUnknown(NCoderMixer2::CCoder *__hidden this)
.text:00002840                 public ?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ
.text:00002840 ?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ proc near
.text:00002840                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+67Ep
.text:00002840
.text:00002840 var_8           = dword ptr -8
.text:00002840 var_4           = dword ptr -4
.text:00002840
.text:00002840                 push    ebp
.text:00002841                 mov     ebp, esp
.text:00002843                 sub     esp, 8
.text:00002846                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000284D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002854                 mov     [ebp+var_4], ecx
.text:00002857                 mov     ecx, [ebp+var_4]
.text:0000285A                 call    ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *(void)
.text:0000285F                 test    eax, eax
.text:00002861                 jz      short loc_2870
.text:00002863                 mov     ecx, [ebp+var_4]
.text:00002866                 call    ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *(void)
.text:0000286B                 mov     [ebp+var_8], eax
.text:0000286E                 jmp     short loc_287E
.text:00002870 ; ---------------------------------------------------------------------------
.text:00002870
.text:00002870 loc_2870:                               ; CODE XREF: NCoderMixer2::CCoder::GetUnknown(void)+21j
.text:00002870                 mov     ecx, [ebp+var_4]
.text:00002873                 add     ecx, 4
.text:00002876                 call    ??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ; CMyComPtr<ICompressCoder2>::operator ICompressCoder2 *(void)
.text:0000287B                 mov     [ebp+var_8], eax
.text:0000287E
.text:0000287E loc_287E:                               ; CODE XREF: NCoderMixer2::CCoder::GetUnknown(void)+2Ej
.text:0000287E                 mov     eax, [ebp+var_8]
.text:00002881                 add     esp, 8
.text:00002884                 cmp     ebp, esp
.text:00002886                 call    __RTC_CheckEsp
.text:0000288B                 mov     esp, ebp
.text:0000288D                 pop     ebp
.text:0000288E                 retn
.text:0000288E ?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ endp
.text:0000288E
.text:0000288E ; ---------------------------------------------------------------------------
.text:0000288F                 align 10h
.text:0000288F _text           ends
.text:0000288F
.text:00002890 ; ===========================================================================
.text:00002890
.text:00002890 ; Segment type: Pure code
.text:00002890 ; Segment permissions: Read/Execute
.text:00002890 _text           segment para public 'CODE' use32
.text:00002890                 assume cs:_text
.text:00002890                 ;org 2890h
.text:00002890 ; COMDAT (pick any)
.text:00002890                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002890
.text:00002890 ; =============== S U B R O U T I N E =======================================
.text:00002890
.text:00002890 ; Attributes: bp-based frame
.text:00002890
.text:00002890 ; _DWORD __thiscall NCoderMixer2::CMixerMT::CMixerMT(NCoderMixer2::CMixerMT *this, bool)
.text:00002890                 public ??0CMixerMT@NCoderMixer2@@QAE@_N@Z
.text:00002890 ??0CMixerMT@NCoderMixer2@@QAE@_N@Z proc near
.text:00002890                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+25Ap
.text:00002890
.text:00002890 var_10          = dword ptr -10h
.text:00002890 var_C           = dword ptr -0Ch
.text:00002890 var_4           = dword ptr -4
.text:00002890 arg_0           = byte ptr  8
.text:00002890
.text:00002890                 push    ebp
.text:00002891                 mov     ebp, esp
.text:00002893                 push    0FFFFFFFFh
.text:00002895                 push    offset __ehhandler$??0CMixerMT@NCoderMixer2@@QAE@_N@Z
.text:0000289A                 mov     eax, large fs:0
.text:000028A0                 push    eax
.text:000028A1                 push    ecx
.text:000028A2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000028A9                 mov     eax, dword ptr ds:___security_cookie
.text:000028AE                 xor     eax, ebp
.text:000028B0                 push    eax
.text:000028B1                 lea     eax, [ebp+var_C]
.text:000028B4                 mov     large fs:0, eax
.text:000028BA                 mov     [ebp+var_10], ecx
.text:000028BD                 mov     ecx, [ebp+var_10]
.text:000028C0                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000028C5                 movzx   eax, [ebp+arg_0]
.text:000028C9                 push    eax             ; bool
.text:000028CA                 mov     ecx, [ebp+var_10]
.text:000028CD                 add     ecx, 4          ; this
.text:000028D0                 call    ??0CMixer@NCoderMixer2@@QAE@_N@Z ; NCoderMixer2::CMixer::CMixer(bool)
.text:000028D5                 mov     [ebp+var_4], 0
.text:000028DC                 mov     ecx, [ebp+var_10]
.text:000028DF                 add     ecx, 68h ; 'h'  ; this
.text:000028E2                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000028E7                 mov     ecx, [ebp+var_10]
.text:000028EA                 mov     dword ptr [ecx], offset ??_7CMixerMT@NCoderMixer2@@6BIUnknown@@@ ; const NCoderMixer2::CMixerMT::`vftable'{for `IUnknown'}
.text:000028F0                 mov     edx, [ebp+var_10]
.text:000028F3                 mov     dword ptr [edx+4], offset ??_7CMixerMT@NCoderMixer2@@6BCMixer@1@@ ; const NCoderMixer2::CMixerMT::`vftable'{for `NCoderMixer2::CMixer'}
.text:000028FA                 mov     ecx, [ebp+var_10]
.text:000028FD                 add     ecx, 6Ch ; 'l'
.text:00002900                 call    ??0?$CObjectVector@VCStreamBinder@@@@QAE@XZ ; CObjectVector<CStreamBinder>::CObjectVector<CStreamBinder>(void)
.text:00002905                 mov     byte ptr [ebp+var_4], 1
.text:00002909                 mov     ecx, [ebp+var_10]
.text:0000290C                 add     ecx, 78h ; 'x'
.text:0000290F                 call    ??0?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderMT>::CObjectVector<NCoderMixer2::CCoderMT>(void)
.text:00002914                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000291B                 mov     eax, [ebp+var_10]
.text:0000291E                 mov     ecx, [ebp+var_C]
.text:00002921                 mov     large fs:0, ecx
.text:00002928                 pop     ecx
.text:00002929                 add     esp, 10h
.text:0000292C                 cmp     ebp, esp
.text:0000292E                 call    __RTC_CheckEsp
.text:00002933                 mov     esp, ebp
.text:00002935                 pop     ebp
.text:00002936                 retn    4
.text:00002936 ??0CMixerMT@NCoderMixer2@@QAE@_N@Z endp
.text:00002936
.text:00002936 ; ---------------------------------------------------------------------------
.text:00002939                 align 4
.text:00002939 _text           ends
.text:00002939
.text$x:0000293C ; ===========================================================================
.text$x:0000293C
.text$x:0000293C ; Segment type: Pure code
.text$x:0000293C ; Segment permissions: Read/Execute
.text$x:0000293C _text$x         segment para public 'CODE' use32
.text$x:0000293C                 assume cs:_text$x
.text$x:0000293C                 ;org 293Ch
.text$x:0000293C ; COMDAT (pick associative to section at 2890)
.text$x:0000293C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:0000293C
.text$x:0000293C ; =============== S U B R O U T I N E =======================================
.text$x:0000293C
.text$x:0000293C
.text$x:0000293C __unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$0 proc near
.text$x:0000293C                                         ; DATA XREF: .xdata$x:000029A8o
.text$x:0000293C                 mov     ecx, [ebp-10h]
.text$x:0000293F                 add     ecx, 4          ; this
.text$x:00002942                 jmp     ??1CMixer@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CMixer::~CMixer(void)
.text$x:00002942 __unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$0 endp
.text$x:00002942
.text$x:00002947
.text$x:00002947 ; =============== S U B R O U T I N E =======================================
.text$x:00002947
.text$x:00002947
.text$x:00002947 __unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$1 proc near
.text$x:00002947                                         ; DATA XREF: .xdata$x:000029B0o
.text$x:00002947                 mov     ecx, [ebp-10h]
.text$x:0000294A                 add     ecx, 6Ch ; 'l'
.text$x:0000294D                 jmp     ??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ ; CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>(void)
.text$x:0000294D __unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$1 endp
.text$x:0000294D
.text$x:00002952
.text$x:00002952 ; =============== S U B R O U T I N E =======================================
.text$x:00002952
.text$x:00002952
.text$x:00002952 __ehhandler$??0CMixerMT@NCoderMixer2@@QAE@_N@Z proc near
.text$x:00002952                                         ; DATA XREF: NCoderMixer2::CMixerMT::CMixerMT(bool)+5o
.text$x:00002952
.text$x:00002952 arg_4           = dword ptr  8
.text$x:00002952
.text$x:00002952                 mov     edx, [esp+arg_4]
.text$x:00002956                 lea     eax, [edx+0Ch]
.text$x:00002959                 mov     ecx, [edx-8]
.text$x:0000295C                 xor     ecx, eax
.text$x:0000295E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002963                 mov     eax, offset __ehfuncinfo$??0CMixerMT@NCoderMixer2@@QAE@_N@Z
.text$x:00002968                 jmp     ___CxxFrameHandler3
.text$x:00002968 __ehhandler$??0CMixerMT@NCoderMixer2@@QAE@_N@Z endp
.text$x:00002968
.text$x:00002968 ; ---------------------------------------------------------------------------
.text$x:0000296D                 align 10h
.text$x:0000296D _text$x         ends
.text$x:0000296D
.rdata:00002970 ; ===========================================================================
.rdata:00002970
.rdata:00002970 ; Segment type: Pure data
.rdata:00002970 ; Segment permissions: Read
.rdata:00002970 _rdata          segment dword public 'DATA' use32
.rdata:00002970                 assume cs:_rdata
.rdata:00002970                 ;org 2970h
.rdata:00002970 ; COMDAT (pick largest)
.rdata:00002970                 dd offset ??_R4CMixerMT@NCoderMixer2@@6BCMixer@1@@ ; const NCoderMixer2::CMixerMT::`RTTI Complete Object Locator'{for `NCoderMixer2::CMixer'}
.rdata:00002974                 public ??_7CMixerMT@NCoderMixer2@@6BCMixer@1@@
.rdata:00002974 ; const NCoderMixer2::CMixerMT::`vftable'{for `NCoderMixer2::CMixer'}
.rdata:00002974 ??_7CMixerMT@NCoderMixer2@@6BCMixer@1@@ dd offset ?SetBindInfo@CMixerMT@NCoderMixer2@@UAEJABUCBindInfo@2@@Z
.rdata:00002974                                         ; DATA XREF: NCoderMixer2::CMixerMT::CMixerMT(bool)+63o
.rdata:00002974                                         ; NCoderMixer2::CMixerMT::SetBindInfo(NCoderMixer2::CBindInfo const &)
.rdata:00002978                 dd offset ?AddCoder@CMixerMT@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z ; NCoderMixer2::CMixerMT::AddCoder(CCreatedCoder const &)
.rdata:0000297C                 dd offset ?GetCoder@CMixerMT@NCoderMixer2@@UAEAAVCCoder@2@I@Z ; NCoderMixer2::CMixerMT::GetCoder(uint)
.rdata:00002980                 dd offset ?SelectMainCoder@CMixerMT@NCoderMixer2@@UAEX_N@Z ; NCoderMixer2::CMixerMT::SelectMainCoder(bool)
.rdata:00002984                 dd offset ?ReInit@CMixerMT@NCoderMixer2@@UAEXXZ ; NCoderMixer2::CMixerMT::ReInit(void)
.rdata:00002988                 dd offset ?SetCoderInfo@CMixerMT@NCoderMixer2@@UAEXIPB_KPBQB_K@Z ; NCoderMixer2::CMixerMT::SetCoderInfo(uint,unsigned __int64 const *,unsigned __int64 const * const *)
.rdata:0000298C                 dd offset ?Code@CMixerMT@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NCoderMixer2::CMixerMT::Code(ISequentialInStream * const *,ISequentialOutStream * const *,ICompressProgressInfo *)
.rdata:00002990                 dd offset ?GetBondStreamSize@CMixerMT@NCoderMixer2@@UBE_KI@Z ; NCoderMixer2::CMixerMT::GetBondStreamSize(uint)
.rdata:00002990 _rdata          ends
.rdata:00002990
.rdata:00002994 ; ===========================================================================
.rdata:00002994
.rdata:00002994 ; Segment type: Pure data
.rdata:00002994 ; Segment permissions: Read
.rdata:00002994 _rdata          segment dword public 'DATA' use32
.rdata:00002994                 assume cs:_rdata
.rdata:00002994                 ;org 2994h
.rdata:00002994 ; COMDAT (pick largest)
.rdata:00002994                 dd offset ??_R4CMixerMT@NCoderMixer2@@6BIUnknown@@@ ; const NCoderMixer2::CMixerMT::`RTTI Complete Object Locator'{for `IUnknown'}
.rdata:00002998                 public ??_7CMixerMT@NCoderMixer2@@6BIUnknown@@@
.rdata:00002998 ; const NCoderMixer2::CMixerMT::`vftable'{for `IUnknown'}
.rdata:00002998 ??_7CMixerMT@NCoderMixer2@@6BIUnknown@@@ dd offset ?QueryInterface@CMixerMT@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z
.rdata:00002998                                         ; DATA XREF: NCoderMixer2::CMixerMT::CMixerMT(bool)+5Ao
.rdata:00002998                                         ; NCoderMixer2::CMixerMT::QueryInterface(_GUID const &,void * *)
.rdata:0000299C                 dd offset ?AddRef@CMixerMT@NCoderMixer2@@UAGKXZ ; NCoderMixer2::CMixerMT::AddRef(void)
.rdata:000029A0                 dd offset ?Release@CMixerMT@NCoderMixer2@@UAGKXZ ; NCoderMixer2::CMixerMT::Release(void)
.rdata:000029A0 _rdata          ends
.rdata:000029A0
.xdata$x:000029A4 ; ===========================================================================
.xdata$x:000029A4
.xdata$x:000029A4 ; Segment type: Pure data
.xdata$x:000029A4 ; Segment permissions: Read
.xdata$x:000029A4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000029A4                 assume cs:_xdata$x
.xdata$x:000029A4                 ;org 29A4h
.xdata$x:000029A4 ; COMDAT (pick associative to section at 2890)
.xdata$x:000029A4 __unwindtable$??0CMixerMT@NCoderMixer2@@QAE@_N@Z db 0FFh
.xdata$x:000029A4                                         ; DATA XREF: .xdata$x:000029BCo
.xdata$x:000029A5                 db 0FFh
.xdata$x:000029A6                 db 0FFh
.xdata$x:000029A7                 db 0FFh
.xdata$x:000029A8                 dd offset __unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$0
.xdata$x:000029AC                 align 10h
.xdata$x:000029B0                 dd offset __unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$1
.xdata$x:000029B4 __ehfuncinfo$??0CMixerMT@NCoderMixer2@@QAE@_N@Z db  22h ; "
.xdata$x:000029B4                                         ; DATA XREF: __ehhandler$??0CMixerMT@NCoderMixer2@@QAE@_N@Z+11o
.xdata$x:000029B5                 db    5
.xdata$x:000029B6                 db  93h ; ô
.xdata$x:000029B7                 db  19h
.xdata$x:000029B8                 db    2
.xdata$x:000029B9                 db    0
.xdata$x:000029BA                 db    0
.xdata$x:000029BB                 db    0
.xdata$x:000029BC                 dd offset __unwindtable$??0CMixerMT@NCoderMixer2@@QAE@_N@Z
.xdata$x:000029C0                 db    0
.xdata$x:000029C1                 db    0
.xdata$x:000029C2                 db    0
.xdata$x:000029C3                 db    0
.xdata$x:000029C4                 db    0
.xdata$x:000029C5                 db    0
.xdata$x:000029C6                 db    0
.xdata$x:000029C7                 db    0
.xdata$x:000029C8                 db    0
.xdata$x:000029C9                 db    0
.xdata$x:000029CA                 db    0
.xdata$x:000029CB                 db    0
.xdata$x:000029CC                 db    0
.xdata$x:000029CD                 db    0
.xdata$x:000029CE                 db    0
.xdata$x:000029CF                 db    0
.xdata$x:000029D0                 db    0
.xdata$x:000029D1                 db    0
.xdata$x:000029D2                 db    0
.xdata$x:000029D3                 db    0
.xdata$x:000029D4                 db    1
.xdata$x:000029D5                 db    0
.xdata$x:000029D6                 db    0
.xdata$x:000029D7                 db    0
.xdata$x:000029D7 _xdata$x        ends
.xdata$x:000029D7
.rdata$r:000029D8 ; ===========================================================================
.rdata$r:000029D8
.rdata$r:000029D8 ; Segment type: Pure data
.rdata$r:000029D8 ; Segment permissions: Read
.rdata$r:000029D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000029D8                 assume cs:_rdata$r
.rdata$r:000029D8                 ;org 29D8h
.rdata$r:000029D8 ; COMDAT (pick any)
.rdata$r:000029D8                 public ??_R4CMixerMT@NCoderMixer2@@6BIUnknown@@@
.rdata$r:000029D8 ; const NCoderMixer2::CMixerMT::`RTTI Complete Object Locator'{for `IUnknown'}
.rdata$r:000029D8 ??_R4CMixerMT@NCoderMixer2@@6BIUnknown@@@ db    0
.rdata$r:000029D8                                         ; DATA XREF: .rdata:00002994o
.rdata$r:000029D9                 db    0
.rdata$r:000029DA                 db    0
.rdata$r:000029DB                 db    0
.rdata$r:000029DC                 db    0
.rdata$r:000029DD                 db    0
.rdata$r:000029DE                 db    0
.rdata$r:000029DF                 db    0
.rdata$r:000029E0                 db    0
.rdata$r:000029E1                 db    0
.rdata$r:000029E2                 db    0
.rdata$r:000029E3                 db    0
.rdata$r:000029E4                 dd offset ??_R0?AVCMixerMT@NCoderMixer2@@@8 ; NCoderMixer2::CMixerMT `RTTI Type Descriptor'
.rdata$r:000029E8                 dd offset ??_R3CMixerMT@NCoderMixer2@@8 ; NCoderMixer2::CMixerMT::`RTTI Class Hierarchy Descriptor'
.rdata$r:000029E8 _rdata$r        ends
.rdata$r:000029E8
.data:000029EC ; ===========================================================================
.data:000029EC
.data:000029EC ; Segment type: Pure data
.data:000029EC ; Segment permissions: Read/Write
.data:000029EC _data           segment dword public 'DATA' use32
.data:000029EC                 assume cs:_data
.data:000029EC                 ;org 29ECh
.data:000029EC ; COMDAT (pick any)
.data:000029EC                 public ??_R0?AVCMixerMT@NCoderMixer2@@@8
.data:000029EC ; class NCoderMixer2::CMixerMT `RTTI Type Descriptor'
.data:000029EC ??_R0?AVCMixerMT@NCoderMixer2@@@8 dd offset ??_7type_info@@6B@
.data:000029EC                                         ; DATA XREF: .rdata$r:000029E4o
.data:000029EC                                         ; .rdata$r:NCoderMixer2::CMixerMT::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000029EC                                         ; const type_info::`vftable'
.data:000029F0                 db    0
.data:000029F1                 db    0
.data:000029F2                 db    0
.data:000029F3                 db    0
.data:000029F4                 db  2Eh ; .
.data:000029F5                 db  3Fh ; ?
.data:000029F6                 db  41h ; A
.data:000029F7                 db  56h ; V
.data:000029F8                 db  43h ; C
.data:000029F9                 db  4Dh ; M
.data:000029FA                 db  69h ; i
.data:000029FB                 db  78h ; x
.data:000029FC                 db  65h ; e
.data:000029FD                 db  72h ; r
.data:000029FE                 db  4Dh ; M
.data:000029FF                 db  54h ; T
.data:00002A00                 db  40h ; @
.data:00002A01                 db  4Eh ; N
.data:00002A02                 db  43h ; C
.data:00002A03                 db  6Fh ; o
.data:00002A04                 db  64h ; d
.data:00002A05                 db  65h ; e
.data:00002A06                 db  72h ; r
.data:00002A07                 db  4Dh ; M
.data:00002A08                 db  69h ; i
.data:00002A09                 db  78h ; x
.data:00002A0A                 db  65h ; e
.data:00002A0B                 db  72h ; r
.data:00002A0C                 db  32h ; 2
.data:00002A0D                 db  40h ; @
.data:00002A0E                 db  40h ; @
.data:00002A0F                 db    0
.data:00002A0F _data           ends
.data:00002A0F
.rdata$r:00002A10 ; ===========================================================================
.rdata$r:00002A10
.rdata$r:00002A10 ; Segment type: Pure data
.rdata$r:00002A10 ; Segment permissions: Read
.rdata$r:00002A10 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002A10                 assume cs:_rdata$r
.rdata$r:00002A10                 ;org 2A10h
.rdata$r:00002A10 ; COMDAT (pick any)
.rdata$r:00002A10                 public ??_R3CMixerMT@NCoderMixer2@@8
.rdata$r:00002A10 ; NCoderMixer2::CMixerMT::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002A10 ??_R3CMixerMT@NCoderMixer2@@8 db    0   ; DATA XREF: .rdata$r:000029E8o
.rdata$r:00002A10                                         ; .rdata$r:00002A4Co ...
.rdata$r:00002A11                 db    0
.rdata$r:00002A12                 db    0
.rdata$r:00002A13                 db    0
.rdata$r:00002A14                 db    1
.rdata$r:00002A15                 db    0
.rdata$r:00002A16                 db    0
.rdata$r:00002A17                 db    0
.rdata$r:00002A18                 db    4
.rdata$r:00002A19                 db    0
.rdata$r:00002A1A                 db    0
.rdata$r:00002A1B                 db    0
.rdata$r:00002A1C                 dd offset ??_R2CMixerMT@NCoderMixer2@@8 ; NCoderMixer2::CMixerMT::`RTTI Base Class Array'
.rdata$r:00002A1C _rdata$r        ends
.rdata$r:00002A1C
.rdata$r:00002A20 ; ===========================================================================
.rdata$r:00002A20
.rdata$r:00002A20 ; Segment type: Pure data
.rdata$r:00002A20 ; Segment permissions: Read
.rdata$r:00002A20 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002A20                 assume cs:_rdata$r
.rdata$r:00002A20                 ;org 2A20h
.rdata$r:00002A20 ; COMDAT (pick any)
.rdata$r:00002A20                 public ??_R2CMixerMT@NCoderMixer2@@8
.rdata$r:00002A20 ; NCoderMixer2::CMixerMT::`RTTI Base Class Array'
.rdata$r:00002A20 ??_R2CMixerMT@NCoderMixer2@@8 dd offset ??_R1A@?0A@EA@CMixerMT@NCoderMixer2@@8
.rdata$r:00002A20                                         ; DATA XREF: .rdata$r:00002A1Co
.rdata$r:00002A20                                         ; NCoderMixer2::CMixerMT::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002A24                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002A28                 dd offset ??_R13?0A@EA@CMixer@NCoderMixer2@@8 ; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00002A2C                 dd offset ??_R1GI@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (104,-1,0,64)'
.rdata$r:00002A30                 db    0
.rdata$r:00002A31                 align 4
.rdata$r:00002A31 _rdata$r        ends
.rdata$r:00002A31
.rdata$r:00002A34 ; ===========================================================================
.rdata$r:00002A34
.rdata$r:00002A34 ; Segment type: Pure data
.rdata$r:00002A34 ; Segment permissions: Read
.rdata$r:00002A34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002A34                 assume cs:_rdata$r
.rdata$r:00002A34                 ;org 2A34h
.rdata$r:00002A34 ; COMDAT (pick any)
.rdata$r:00002A34                 public ??_R1A@?0A@EA@CMixerMT@NCoderMixer2@@8
.rdata$r:00002A34 ; NCoderMixer2::CMixerMT::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002A34 ??_R1A@?0A@EA@CMixerMT@NCoderMixer2@@8 dd offset ??_R0?AVCMixerMT@NCoderMixer2@@@8
.rdata$r:00002A34                                         ; DATA XREF: .rdata$r:NCoderMixer2::CMixerMT::`RTTI Base Class Array'o
.rdata$r:00002A34                                         ; NCoderMixer2::CMixerMT `RTTI Type Descriptor'
.rdata$r:00002A38                 db    3
.rdata$r:00002A39                 db    0
.rdata$r:00002A3A                 db    0
.rdata$r:00002A3B                 db    0
.rdata$r:00002A3C                 db    0
.rdata$r:00002A3D                 db    0
.rdata$r:00002A3E                 db    0
.rdata$r:00002A3F                 db    0
.rdata$r:00002A40                 db 0FFh
.rdata$r:00002A41                 db 0FFh
.rdata$r:00002A42                 db 0FFh
.rdata$r:00002A43                 db 0FFh
.rdata$r:00002A44                 db    0
.rdata$r:00002A45                 db    0
.rdata$r:00002A46                 db    0
.rdata$r:00002A47                 db    0
.rdata$r:00002A48                 db  40h ; @
.rdata$r:00002A49                 db    0
.rdata$r:00002A4A                 db    0
.rdata$r:00002A4B                 db    0
.rdata$r:00002A4C                 dd offset ??_R3CMixerMT@NCoderMixer2@@8 ; NCoderMixer2::CMixerMT::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002A4C _rdata$r        ends
.rdata$r:00002A4C
.rdata$r:00002A50 ; ===========================================================================
.rdata$r:00002A50
.rdata$r:00002A50 ; Segment type: Pure data
.rdata$r:00002A50 ; Segment permissions: Read
.rdata$r:00002A50 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002A50                 assume cs:_rdata$r
.rdata$r:00002A50                 ;org 2A50h
.rdata$r:00002A50 ; COMDAT (pick any)
.rdata$r:00002A50                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00002A50 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002A50 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002A50                                         ; DATA XREF: .rdata$r:00002A24o
.rdata$r:00002A50                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:00002A50                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00002A54                 db    0
.rdata$r:00002A55                 db    0
.rdata$r:00002A56                 db    0
.rdata$r:00002A57                 db    0
.rdata$r:00002A58                 db    0
.rdata$r:00002A59                 db    0
.rdata$r:00002A5A                 db    0
.rdata$r:00002A5B                 db    0
.rdata$r:00002A5C                 db 0FFh
.rdata$r:00002A5D                 db 0FFh
.rdata$r:00002A5E                 db 0FFh
.rdata$r:00002A5F                 db 0FFh
.rdata$r:00002A60                 db    0
.rdata$r:00002A61                 db    0
.rdata$r:00002A62                 db    0
.rdata$r:00002A63                 db    0
.rdata$r:00002A64                 db  40h ; @
.rdata$r:00002A65                 db    0
.rdata$r:00002A66                 db    0
.rdata$r:00002A67                 db    0
.rdata$r:00002A68                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002A68 _rdata$r        ends
.rdata$r:00002A68
.data:00002A6C ; ===========================================================================
.data:00002A6C
.data:00002A6C ; Segment type: Pure data
.data:00002A6C ; Segment permissions: Read/Write
.data:00002A6C _data           segment dword public 'DATA' use32
.data:00002A6C                 assume cs:_data
.data:00002A6C                 ;org 2A6Ch
.data:00002A6C ; COMDAT (pick any)
.data:00002A6C                 public ??_R0?AUIUnknown@@@8
.data:00002A6C ; struct IUnknown `RTTI Type Descriptor'
.data:00002A6C ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00002A6C                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00002A6C                                         ; const type_info::`vftable'
.data:00002A70                 db    0
.data:00002A71                 db    0
.data:00002A72                 db    0
.data:00002A73                 db    0
.data:00002A74                 db  2Eh ; .
.data:00002A75                 db  3Fh ; ?
.data:00002A76                 db  41h ; A
.data:00002A77                 db  55h ; U
.data:00002A78                 db  49h ; I
.data:00002A79                 db  55h ; U
.data:00002A7A                 db  6Eh ; n
.data:00002A7B                 db  6Bh ; k
.data:00002A7C                 db  6Eh ; n
.data:00002A7D                 db  6Fh ; o
.data:00002A7E                 db  77h ; w
.data:00002A7F                 db  6Eh ; n
.data:00002A80                 db  40h ; @
.data:00002A81                 db  40h ; @
.data:00002A82                 db    0
.data:00002A83                 align 4
.data:00002A83 _data           ends
.data:00002A83
.rdata$r:00002A84 ; ===========================================================================
.rdata$r:00002A84
.rdata$r:00002A84 ; Segment type: Pure data
.rdata$r:00002A84 ; Segment permissions: Read
.rdata$r:00002A84 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002A84                 assume cs:_rdata$r
.rdata$r:00002A84                 ;org 2A84h
.rdata$r:00002A84 ; COMDAT (pick any)
.rdata$r:00002A84                 public ??_R3IUnknown@@8
.rdata$r:00002A84 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002A84 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00002A68o
.rdata$r:00002A85                 db    0
.rdata$r:00002A86                 db    0
.rdata$r:00002A87                 db    0
.rdata$r:00002A88                 db    0
.rdata$r:00002A89                 db    0
.rdata$r:00002A8A                 db    0
.rdata$r:00002A8B                 db    0
.rdata$r:00002A8C                 db    1
.rdata$r:00002A8D                 db    0
.rdata$r:00002A8E                 db    0
.rdata$r:00002A8F                 db    0
.rdata$r:00002A90                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00002A90 _rdata$r        ends
.rdata$r:00002A90
.rdata$r:00002A94 ; ===========================================================================
.rdata$r:00002A94
.rdata$r:00002A94 ; Segment type: Pure data
.rdata$r:00002A94 ; Segment permissions: Read
.rdata$r:00002A94 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002A94                 assume cs:_rdata$r
.rdata$r:00002A94                 ;org 2A94h
.rdata$r:00002A94 ; COMDAT (pick any)
.rdata$r:00002A94                 public ??_R2IUnknown@@8
.rdata$r:00002A94 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00002A94 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00002A94                                         ; DATA XREF: .rdata$r:00002A90o
.rdata$r:00002A94                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002A98                 db    0
.rdata$r:00002A99                 align 4
.rdata$r:00002A99 _rdata$r        ends
.rdata$r:00002A99
.rdata$r:00002A9C ; ===========================================================================
.rdata$r:00002A9C
.rdata$r:00002A9C ; Segment type: Pure data
.rdata$r:00002A9C ; Segment permissions: Read
.rdata$r:00002A9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002A9C                 assume cs:_rdata$r
.rdata$r:00002A9C                 ;org 2A9Ch
.rdata$r:00002A9C ; COMDAT (pick any)
.rdata$r:00002A9C                 public ??_R13?0A@EA@CMixer@NCoderMixer2@@8
.rdata$r:00002A9C ; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00002A9C ??_R13?0A@EA@CMixer@NCoderMixer2@@8 dd offset ??_R0?AVCMixer@NCoderMixer2@@@8
.rdata$r:00002A9C                                         ; DATA XREF: .rdata$r:00002A28o
.rdata$r:00002A9C                                         ; NCoderMixer2::CMixer `RTTI Type Descriptor'
.rdata$r:00002AA0                 db    0
.rdata$r:00002AA1                 db    0
.rdata$r:00002AA2                 db    0
.rdata$r:00002AA3                 db    0
.rdata$r:00002AA4                 db    4
.rdata$r:00002AA5                 db    0
.rdata$r:00002AA6                 db    0
.rdata$r:00002AA7                 db    0
.rdata$r:00002AA8                 db 0FFh
.rdata$r:00002AA9                 db 0FFh
.rdata$r:00002AAA                 db 0FFh
.rdata$r:00002AAB                 db 0FFh
.rdata$r:00002AAC                 db    0
.rdata$r:00002AAD                 db    0
.rdata$r:00002AAE                 db    0
.rdata$r:00002AAF                 db    0
.rdata$r:00002AB0                 db  40h ; @
.rdata$r:00002AB1                 db    0
.rdata$r:00002AB2                 db    0
.rdata$r:00002AB3                 db    0
.rdata$r:00002AB4                 dd offset ??_R3CMixer@NCoderMixer2@@8 ; NCoderMixer2::CMixer::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002AB4 _rdata$r        ends
.rdata$r:00002AB4
.data:00002AB8 ; ===========================================================================
.data:00002AB8
.data:00002AB8 ; Segment type: Pure data
.data:00002AB8 ; Segment permissions: Read/Write
.data:00002AB8 _data           segment dword public 'DATA' use32
.data:00002AB8                 assume cs:_data
.data:00002AB8                 ;org 2AB8h
.data:00002AB8 ; COMDAT (pick any)
.data:00002AB8                 public ??_R0?AVCMixer@NCoderMixer2@@@8
.data:00002AB8 ; class NCoderMixer2::CMixer `RTTI Type Descriptor'
.data:00002AB8 ??_R0?AVCMixer@NCoderMixer2@@@8 dd offset ??_7type_info@@6B@
.data:00002AB8                                         ; DATA XREF: .rdata$r:NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00002AB8                                         ; .rdata$r:NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002AB8                                         ; const type_info::`vftable'
.data:00002ABC                 align 10h
.data:00002AC0 a_?avcmixer@nco db '.?AVCMixer@NCoderMixer2@@',0
.data:00002ADA                 align 4
.data:00002ADA _data           ends
.data:00002ADA
.rdata$r:00002ADC ; ===========================================================================
.rdata$r:00002ADC
.rdata$r:00002ADC ; Segment type: Pure data
.rdata$r:00002ADC ; Segment permissions: Read
.rdata$r:00002ADC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002ADC                 assume cs:_rdata$r
.rdata$r:00002ADC                 ;org 2ADCh
.rdata$r:00002ADC ; COMDAT (pick any)
.rdata$r:00002ADC                 public ??_R3CMixer@NCoderMixer2@@8
.rdata$r:00002ADC ; NCoderMixer2::CMixer::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002ADC ??_R3CMixer@NCoderMixer2@@8 db    0     ; DATA XREF: .rdata$r:00002AB4o
.rdata$r:00002ADC                                         ; .rdata$r:00002B0Co ...
.rdata$r:00002ADD                 db    0
.rdata$r:00002ADE                 db    0
.rdata$r:00002ADF                 db    0
.rdata$r:00002AE0                 db    0
.rdata$r:00002AE1                 db    0
.rdata$r:00002AE2                 db    0
.rdata$r:00002AE3                 db    0
.rdata$r:00002AE4                 db    1
.rdata$r:00002AE5                 db    0
.rdata$r:00002AE6                 db    0
.rdata$r:00002AE7                 db    0
.rdata$r:00002AE8                 dd offset ??_R2CMixer@NCoderMixer2@@8 ; NCoderMixer2::CMixer::`RTTI Base Class Array'
.rdata$r:00002AE8 _rdata$r        ends
.rdata$r:00002AE8
.rdata$r:00002AEC ; ===========================================================================
.rdata$r:00002AEC
.rdata$r:00002AEC ; Segment type: Pure data
.rdata$r:00002AEC ; Segment permissions: Read
.rdata$r:00002AEC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002AEC                 assume cs:_rdata$r
.rdata$r:00002AEC                 ;org 2AECh
.rdata$r:00002AEC ; COMDAT (pick any)
.rdata$r:00002AEC                 public ??_R2CMixer@NCoderMixer2@@8
.rdata$r:00002AEC ; NCoderMixer2::CMixer::`RTTI Base Class Array'
.rdata$r:00002AEC ??_R2CMixer@NCoderMixer2@@8 dd offset ??_R1A@?0A@EA@CMixer@NCoderMixer2@@8
.rdata$r:00002AEC                                         ; DATA XREF: .rdata$r:00002AE8o
.rdata$r:00002AEC                                         ; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002AF0                 db    0
.rdata$r:00002AF1                 align 4
.rdata$r:00002AF1 _rdata$r        ends
.rdata$r:00002AF1
.rdata$r:00002AF4 ; ===========================================================================
.rdata$r:00002AF4
.rdata$r:00002AF4 ; Segment type: Pure data
.rdata$r:00002AF4 ; Segment permissions: Read
.rdata$r:00002AF4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002AF4                 assume cs:_rdata$r
.rdata$r:00002AF4                 ;org 2AF4h
.rdata$r:00002AF4 ; COMDAT (pick any)
.rdata$r:00002AF4                 public ??_R1A@?0A@EA@CMixer@NCoderMixer2@@8
.rdata$r:00002AF4 ; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002AF4 ??_R1A@?0A@EA@CMixer@NCoderMixer2@@8 dd offset ??_R0?AVCMixer@NCoderMixer2@@@8
.rdata$r:00002AF4                                         ; DATA XREF: .rdata$r:NCoderMixer2::CMixer::`RTTI Base Class Array'o
.rdata$r:00002AF4                                         ; NCoderMixer2::CMixer `RTTI Type Descriptor'
.rdata$r:00002AF8                 align 10h
.rdata$r:00002B00                 db 0FFh
.rdata$r:00002B01                 db 0FFh
.rdata$r:00002B02                 db 0FFh
.rdata$r:00002B03                 db 0FFh
.rdata$r:00002B04                 db    0
.rdata$r:00002B05                 db    0
.rdata$r:00002B06                 db    0
.rdata$r:00002B07                 db    0
.rdata$r:00002B08                 db  40h ; @
.rdata$r:00002B09                 db    0
.rdata$r:00002B0A                 db    0
.rdata$r:00002B0B                 db    0
.rdata$r:00002B0C                 dd offset ??_R3CMixer@NCoderMixer2@@8 ; NCoderMixer2::CMixer::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002B0C _rdata$r        ends
.rdata$r:00002B0C
.rdata$r:00002B10 ; ===========================================================================
.rdata$r:00002B10
.rdata$r:00002B10 ; Segment type: Pure data
.rdata$r:00002B10 ; Segment permissions: Read
.rdata$r:00002B10 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002B10                 assume cs:_rdata$r
.rdata$r:00002B10                 ;org 2B10h
.rdata$r:00002B10 ; COMDAT (pick any)
.rdata$r:00002B10                 public ??_R1GI@?0A@EA@CMyUnknownImp@@8
.rdata$r:00002B10 ; CMyUnknownImp::`RTTI Base Class Descriptor at (104, -1, 0, 64)'
.rdata$r:00002B10 ??_R1GI@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00002B10                                         ; DATA XREF: .rdata$r:00002A2Co
.rdata$r:00002B10                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00002B14                 align 8
.rdata$r:00002B18                 dd offset loc_62+6
.rdata$r:00002B1C                 db 0FFh
.rdata$r:00002B1D                 db 0FFh
.rdata$r:00002B1E                 db 0FFh
.rdata$r:00002B1F                 db 0FFh
.rdata$r:00002B20                 db    0
.rdata$r:00002B21                 db    0
.rdata$r:00002B22                 db    0
.rdata$r:00002B23                 db    0
.rdata$r:00002B24                 db  40h ; @
.rdata$r:00002B25                 db    0
.rdata$r:00002B26                 db    0
.rdata$r:00002B27                 db    0
.rdata$r:00002B28                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002B28 _rdata$r        ends
.rdata$r:00002B28
.data:00002B2C ; ===========================================================================
.data:00002B2C
.data:00002B2C ; Segment type: Pure data
.data:00002B2C ; Segment permissions: Read/Write
.data:00002B2C _data           segment dword public 'DATA' use32
.data:00002B2C                 assume cs:_data
.data:00002B2C                 ;org 2B2Ch
.data:00002B2C ; COMDAT (pick any)
.data:00002B2C                 public ??_R0?AVCMyUnknownImp@@@8
.data:00002B2C ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00002B2C ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00002B2C                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (104,-1,0,64)'o
.data:00002B2C                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002B2C                                         ; const type_info::`vftable'
.data:00002B30                 db    0
.data:00002B31                 db    0
.data:00002B32                 db    0
.data:00002B33                 db    0
.data:00002B34                 db  2Eh ; .
.data:00002B35                 db  3Fh ; ?
.data:00002B36                 db  41h ; A
.data:00002B37                 db  56h ; V
.data:00002B38                 db  43h ; C
.data:00002B39                 db  4Dh ; M
.data:00002B3A                 db  79h ; y
.data:00002B3B                 db  55h ; U
.data:00002B3C                 db  6Eh ; n
.data:00002B3D                 db  6Bh ; k
.data:00002B3E                 db  6Eh ; n
.data:00002B3F                 db  6Fh ; o
.data:00002B40                 db  77h ; w
.data:00002B41                 db  6Eh ; n
.data:00002B42                 db  49h ; I
.data:00002B43                 db  6Dh ; m
.data:00002B44                 db  70h ; p
.data:00002B45                 db  40h ; @
.data:00002B46                 db  40h ; @
.data:00002B47                 db    0
.data:00002B47 _data           ends
.data:00002B47
.rdata$r:00002B48 ; ===========================================================================
.rdata$r:00002B48
.rdata$r:00002B48 ; Segment type: Pure data
.rdata$r:00002B48 ; Segment permissions: Read
.rdata$r:00002B48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002B48                 assume cs:_rdata$r
.rdata$r:00002B48                 ;org 2B48h
.rdata$r:00002B48 ; COMDAT (pick any)
.rdata$r:00002B48                 public ??_R3CMyUnknownImp@@8
.rdata$r:00002B48 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002B48 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00002B28o
.rdata$r:00002B48                                         ; .rdata$r:00002B78o ...
.rdata$r:00002B49                 db    0
.rdata$r:00002B4A                 db    0
.rdata$r:00002B4B                 db    0
.rdata$r:00002B4C                 db    0
.rdata$r:00002B4D                 db    0
.rdata$r:00002B4E                 db    0
.rdata$r:00002B4F                 db    0
.rdata$r:00002B50                 db    1
.rdata$r:00002B51                 db    0
.rdata$r:00002B52                 db    0
.rdata$r:00002B53                 db    0
.rdata$r:00002B54                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00002B54 _rdata$r        ends
.rdata$r:00002B54
.rdata$r:00002B58 ; ===========================================================================
.rdata$r:00002B58
.rdata$r:00002B58 ; Segment type: Pure data
.rdata$r:00002B58 ; Segment permissions: Read
.rdata$r:00002B58 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002B58                 assume cs:_rdata$r
.rdata$r:00002B58                 ;org 2B58h
.rdata$r:00002B58 ; COMDAT (pick any)
.rdata$r:00002B58                 public ??_R2CMyUnknownImp@@8
.rdata$r:00002B58 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00002B58 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00002B58                                         ; DATA XREF: .rdata$r:00002B54o
.rdata$r:00002B58                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002B5C                 db    0
.rdata$r:00002B5D                 align 10h
.rdata$r:00002B5D _rdata$r        ends
.rdata$r:00002B5D
.rdata$r:00002B60 ; ===========================================================================
.rdata$r:00002B60
.rdata$r:00002B60 ; Segment type: Pure data
.rdata$r:00002B60 ; Segment permissions: Read
.rdata$r:00002B60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002B60                 assume cs:_rdata$r
.rdata$r:00002B60                 ;org 2B60h
.rdata$r:00002B60 ; COMDAT (pick any)
.rdata$r:00002B60                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00002B60 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002B60 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00002B60                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00002B60                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00002B64                 db    0
.rdata$r:00002B65                 db    0
.rdata$r:00002B66                 db    0
.rdata$r:00002B67                 db    0
.rdata$r:00002B68                 db    0
.rdata$r:00002B69                 db    0
.rdata$r:00002B6A                 db    0
.rdata$r:00002B6B                 db    0
.rdata$r:00002B6C                 db 0FFh
.rdata$r:00002B6D                 db 0FFh
.rdata$r:00002B6E                 db 0FFh
.rdata$r:00002B6F                 db 0FFh
.rdata$r:00002B70                 db    0
.rdata$r:00002B71                 db    0
.rdata$r:00002B72                 db    0
.rdata$r:00002B73                 db    0
.rdata$r:00002B74                 db  40h ; @
.rdata$r:00002B75                 db    0
.rdata$r:00002B76                 db    0
.rdata$r:00002B77                 db    0
.rdata$r:00002B78                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002B78 _rdata$r        ends
.rdata$r:00002B78
.rdata$r:00002B7C ; ===========================================================================
.rdata$r:00002B7C
.rdata$r:00002B7C ; Segment type: Pure data
.rdata$r:00002B7C ; Segment permissions: Read
.rdata$r:00002B7C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002B7C                 assume cs:_rdata$r
.rdata$r:00002B7C                 ;org 2B7Ch
.rdata$r:00002B7C ; COMDAT (pick any)
.rdata$r:00002B7C                 public ??_R4CMixerMT@NCoderMixer2@@6BCMixer@1@@
.rdata$r:00002B7C ; const NCoderMixer2::CMixerMT::`RTTI Complete Object Locator'{for `NCoderMixer2::CMixer'}
.rdata$r:00002B7C ??_R4CMixerMT@NCoderMixer2@@6BCMixer@1@@ db    0
.rdata$r:00002B7C                                         ; DATA XREF: .rdata:00002970o
.rdata$r:00002B7D                 db    0
.rdata$r:00002B7E                 db    0
.rdata$r:00002B7F                 db    0
.rdata$r:00002B80                 db    4
.rdata$r:00002B81                 db    0
.rdata$r:00002B82                 db    0
.rdata$r:00002B83                 db    0
.rdata$r:00002B84                 db    0
.rdata$r:00002B85                 db    0
.rdata$r:00002B86                 db    0
.rdata$r:00002B87                 db    0
.rdata$r:00002B88                 dd offset ??_R0?AVCMixerMT@NCoderMixer2@@@8 ; NCoderMixer2::CMixerMT `RTTI Type Descriptor'
.rdata$r:00002B8C                 dd offset ??_R3CMixerMT@NCoderMixer2@@8 ; NCoderMixer2::CMixerMT::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002B8C _rdata$r        ends
.rdata$r:00002B8C
.text:00002B90 ; ===========================================================================
.text:00002B90
.text:00002B90 ; Segment type: Pure code
.text:00002B90 ; Segment permissions: Read/Execute
.text:00002B90 _text           segment para public 'CODE' use32
.text:00002B90                 assume cs:_text
.text:00002B90                 ;org 2B90h
.text:00002B90 ; COMDAT (pick any)
.text:00002B90                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002B90
.text:00002B90 ; =============== S U B R O U T I N E =======================================
.text:00002B90
.text:00002B90 ; Attributes: bp-based frame
.text:00002B90
.text:00002B90 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00002B90                 public ??0CMyUnknownImp@@QAE@XZ
.text:00002B90 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCoderMixer2::CMixerMT::CMixerMT(bool)+52p
.text:00002B90                                         ; NArchive::N7z::CDecProgress::CDecProgress(ICompressProgressInfo *)+1Cp ...
.text:00002B90
.text:00002B90 var_4           = dword ptr -4
.text:00002B90
.text:00002B90                 push    ebp
.text:00002B91                 mov     ebp, esp
.text:00002B93                 push    ecx
.text:00002B94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002B9B                 mov     [ebp+var_4], ecx
.text:00002B9E                 mov     eax, [ebp+var_4]
.text:00002BA1                 mov     dword ptr [eax], 0
.text:00002BA7                 mov     eax, [ebp+var_4]
.text:00002BAA                 mov     esp, ebp
.text:00002BAC                 pop     ebp
.text:00002BAD                 retn
.text:00002BAD ??0CMyUnknownImp@@QAE@XZ endp
.text:00002BAD
.text:00002BAD ; ---------------------------------------------------------------------------
.text:00002BAE                 align 10h
.text:00002BAE _text           ends
.text:00002BAE
.text:00002BB0 ; ===========================================================================
.text:00002BB0
.text:00002BB0 ; Segment type: Pure code
.text:00002BB0 ; Segment permissions: Read/Execute
.text:00002BB0 _text           segment para public 'CODE' use32
.text:00002BB0                 assume cs:_text
.text:00002BB0                 ;org 2BB0h
.text:00002BB0 ; COMDAT (pick any)
.text:00002BB0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002BB0
.text:00002BB0 ; =============== S U B R O U T I N E =======================================
.text:00002BB0
.text:00002BB0 ; Attributes: bp-based frame
.text:00002BB0
.text:00002BB0 ; public: __thiscall IUnknown::IUnknown(void)
.text:00002BB0                 public ??0IUnknown@@QAE@XZ
.text:00002BB0 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: NCoderMixer2::CMixerMT::CMixerMT(bool)+30p
.text:00002BB0                                         ; ICompressProgressInfo::ICompressProgressInfo(void)+11p ...
.text:00002BB0
.text:00002BB0 var_4           = dword ptr -4
.text:00002BB0
.text:00002BB0                 push    ebp
.text:00002BB1                 mov     ebp, esp
.text:00002BB3                 push    ecx
.text:00002BB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002BBB                 mov     [ebp+var_4], ecx
.text:00002BBE                 mov     eax, [ebp+var_4]
.text:00002BC1                 mov     esp, ebp
.text:00002BC3                 pop     ebp
.text:00002BC4                 retn
.text:00002BC4 ??0IUnknown@@QAE@XZ endp
.text:00002BC4
.text:00002BC4 ; ---------------------------------------------------------------------------
.text:00002BC5                 align 4
.text:00002BC5 _text           ends
.text:00002BC5
.text:00002BC8 ; ===========================================================================
.text:00002BC8
.text:00002BC8 ; Segment type: Pure code
.text:00002BC8 ; Segment permissions: Read/Execute
.text:00002BC8 _text           segment para public 'CODE' use32
.text:00002BC8                 assume cs:_text
.text:00002BC8                 ;org 2BC8h
.text:00002BC8 ; COMDAT (pick any)
.text:00002BC8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002BC8
.text:00002BC8 ; =============== S U B R O U T I N E =======================================
.text:00002BC8
.text:00002BC8 ; Attributes: bp-based frame
.text:00002BC8
.text:00002BC8 ; _DWORD __thiscall NCoderMixer2::CMixer::CMixer(NCoderMixer2::CMixer *this, bool)
.text:00002BC8                 public ??0CMixer@NCoderMixer2@@QAE@_N@Z
.text:00002BC8 ??0CMixer@NCoderMixer2@@QAE@_N@Z proc near
.text:00002BC8                                         ; CODE XREF: NCoderMixer2::CMixerMT::CMixerMT(bool)+40p
.text:00002BC8
.text:00002BC8 var_10          = dword ptr -10h
.text:00002BC8 var_C           = dword ptr -0Ch
.text:00002BC8 var_4           = dword ptr -4
.text:00002BC8 arg_0           = byte ptr  8
.text:00002BC8
.text:00002BC8                 push    ebp
.text:00002BC9                 mov     ebp, esp
.text:00002BCB                 push    0FFFFFFFFh
.text:00002BCD                 push    offset __ehhandler$??0CMixer@NCoderMixer2@@QAE@_N@Z
.text:00002BD2                 mov     eax, large fs:0
.text:00002BD8                 push    eax
.text:00002BD9                 push    ecx
.text:00002BDA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002BE1                 mov     eax, dword ptr ds:___security_cookie
.text:00002BE6                 xor     eax, ebp
.text:00002BE8                 push    eax
.text:00002BE9                 lea     eax, [ebp+var_C]
.text:00002BEC                 mov     large fs:0, eax
.text:00002BF2                 mov     [ebp+var_10], ecx
.text:00002BF5                 mov     eax, [ebp+var_10]
.text:00002BF8                 mov     dword ptr [eax], offset ??_7CMixer@NCoderMixer2@@6B@ ; const NCoderMixer2::CMixer::`vftable'
.text:00002BFE                 mov     ecx, [ebp+var_10]
.text:00002C01                 add     ecx, 4          ; this
.text:00002C04                 call    ??0CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::CBindInfo(void)
.text:00002C09                 mov     [ebp+var_4], 0
.text:00002C10                 mov     ecx, [ebp+var_10]
.text:00002C13                 add     ecx, 44h ; 'D'
.text:00002C16                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:00002C1B                 mov     byte ptr [ebp+var_4], 1
.text:00002C1F                 mov     ecx, [ebp+var_10]
.text:00002C22                 add     ecx, 50h ; 'P'
.text:00002C25                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:00002C2A                 mov     ecx, [ebp+var_10]
.text:00002C2D                 mov     dl, [ebp+arg_0]
.text:00002C30                 mov     [ecx+5Ch], dl
.text:00002C33                 mov     eax, [ebp+var_10]
.text:00002C36                 mov     dword ptr [eax+60h], 0
.text:00002C3D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002C44                 mov     eax, [ebp+var_10]
.text:00002C47                 mov     ecx, [ebp+var_C]
.text:00002C4A                 mov     large fs:0, ecx
.text:00002C51                 pop     ecx
.text:00002C52                 add     esp, 10h
.text:00002C55                 cmp     ebp, esp
.text:00002C57                 call    __RTC_CheckEsp
.text:00002C5C                 mov     esp, ebp
.text:00002C5E                 pop     ebp
.text:00002C5F                 retn    4
.text:00002C5F ??0CMixer@NCoderMixer2@@QAE@_N@Z endp
.text:00002C5F
.text:00002C5F ; ---------------------------------------------------------------------------
.text:00002C62                 align 4
.text:00002C62 _text           ends
.text:00002C62
.text$x:00002C64 ; ===========================================================================
.text$x:00002C64
.text$x:00002C64 ; Segment type: Pure code
.text$x:00002C64 ; Segment permissions: Read/Execute
.text$x:00002C64 _text$x         segment para public 'CODE' use32
.text$x:00002C64                 assume cs:_text$x
.text$x:00002C64                 ;org 2C64h
.text$x:00002C64 ; COMDAT (pick associative to section at 2BC8)
.text$x:00002C64                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00002C64
.text$x:00002C64 ; =============== S U B R O U T I N E =======================================
.text$x:00002C64
.text$x:00002C64
.text$x:00002C64 __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$0 proc near
.text$x:00002C64                                         ; DATA XREF: .xdata$x:00002CC0o
.text$x:00002C64                 mov     ecx, [ebp-10h]
.text$x:00002C67                 add     ecx, 4          ; this
.text$x:00002C6A                 jmp     ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text$x:00002C6A __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$0 endp
.text$x:00002C6A
.text$x:00002C6F
.text$x:00002C6F ; =============== S U B R O U T I N E =======================================
.text$x:00002C6F
.text$x:00002C6F
.text$x:00002C6F __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$1 proc near
.text$x:00002C6F                                         ; DATA XREF: .xdata$x:00002CC8o
.text$x:00002C6F                 mov     ecx, [ebp-10h]
.text$x:00002C72                 add     ecx, 44h ; 'D'
.text$x:00002C75                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:00002C75 __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$1 endp
.text$x:00002C75
.text$x:00002C7A
.text$x:00002C7A ; =============== S U B R O U T I N E =======================================
.text$x:00002C7A
.text$x:00002C7A
.text$x:00002C7A __ehhandler$??0CMixer@NCoderMixer2@@QAE@_N@Z proc near
.text$x:00002C7A                                         ; DATA XREF: NCoderMixer2::CMixer::CMixer(bool)+5o
.text$x:00002C7A
.text$x:00002C7A arg_4           = dword ptr  8
.text$x:00002C7A
.text$x:00002C7A                 mov     edx, [esp+arg_4]
.text$x:00002C7E                 lea     eax, [edx+0Ch]
.text$x:00002C81                 mov     ecx, [edx-8]
.text$x:00002C84                 xor     ecx, eax
.text$x:00002C86                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002C8B                 mov     eax, offset __ehfuncinfo$??0CMixer@NCoderMixer2@@QAE@_N@Z
.text$x:00002C90                 jmp     ___CxxFrameHandler3
.text$x:00002C90 __ehhandler$??0CMixer@NCoderMixer2@@QAE@_N@Z endp
.text$x:00002C90
.text$x:00002C90 ; ---------------------------------------------------------------------------
.text$x:00002C95                 align 4
.text$x:00002C95 _text$x         ends
.text$x:00002C95
.rdata:00002C98 ; ===========================================================================
.rdata:00002C98
.rdata:00002C98 ; Segment type: Pure data
.rdata:00002C98 ; Segment permissions: Read
.rdata:00002C98 _rdata          segment dword public 'DATA' use32
.rdata:00002C98                 assume cs:_rdata
.rdata:00002C98                 ;org 2C98h
.rdata:00002C98 ; COMDAT (pick largest)
.rdata:00002C98                 dd offset ??_R4CMixer@NCoderMixer2@@6B@ ; const NCoderMixer2::CMixer::`RTTI Complete Object Locator'
.rdata:00002C9C                 public ??_7CMixer@NCoderMixer2@@6B@
.rdata:00002C9C ; const NCoderMixer2::CMixer::`vftable'
.rdata:00002C9C ??_7CMixer@NCoderMixer2@@6B@ dd offset ?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z
.rdata:00002C9C                                         ; DATA XREF: NCoderMixer2::CMixer::CMixer(bool)+30o
.rdata:00002C9C                                         ; NCoderMixer2::CMixer::SetBindInfo(NCoderMixer2::CBindInfo const &)
.rdata:00002CA0                 dd offset __purecall
.rdata:00002CA4                 dd offset __purecall
.rdata:00002CA8                 dd offset __purecall
.rdata:00002CAC                 dd offset __purecall
.rdata:00002CB0                 dd offset __purecall
.rdata:00002CB4                 dd offset __purecall
.rdata:00002CB8                 dd offset __purecall
.rdata:00002CB8 _rdata          ends
.rdata:00002CB8
.xdata$x:00002CBC ; ===========================================================================
.xdata$x:00002CBC
.xdata$x:00002CBC ; Segment type: Pure data
.xdata$x:00002CBC ; Segment permissions: Read
.xdata$x:00002CBC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002CBC                 assume cs:_xdata$x
.xdata$x:00002CBC                 ;org 2CBCh
.xdata$x:00002CBC ; COMDAT (pick associative to section at 2BC8)
.xdata$x:00002CBC __unwindtable$??0CMixer@NCoderMixer2@@QAE@_N@Z db 0FFh
.xdata$x:00002CBC                                         ; DATA XREF: .xdata$x:00002CD4o
.xdata$x:00002CBD                 db 0FFh
.xdata$x:00002CBE                 db 0FFh
.xdata$x:00002CBF                 db 0FFh
.xdata$x:00002CC0                 dd offset __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$0
.xdata$x:00002CC4                 align 8
.xdata$x:00002CC8                 dd offset __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$1
.xdata$x:00002CCC __ehfuncinfo$??0CMixer@NCoderMixer2@@QAE@_N@Z db  22h ; "
.xdata$x:00002CCC                                         ; DATA XREF: __ehhandler$??0CMixer@NCoderMixer2@@QAE@_N@Z+11o
.xdata$x:00002CCD                 db    5
.xdata$x:00002CCE                 db  93h ; ô
.xdata$x:00002CCF                 db  19h
.xdata$x:00002CD0                 db    2
.xdata$x:00002CD1                 db    0
.xdata$x:00002CD2                 db    0
.xdata$x:00002CD3                 db    0
.xdata$x:00002CD4                 dd offset __unwindtable$??0CMixer@NCoderMixer2@@QAE@_N@Z
.xdata$x:00002CD8                 db    0
.xdata$x:00002CD9                 db    0
.xdata$x:00002CDA                 db    0
.xdata$x:00002CDB                 db    0
.xdata$x:00002CDC                 db    0
.xdata$x:00002CDD                 db    0
.xdata$x:00002CDE                 db    0
.xdata$x:00002CDF                 db    0
.xdata$x:00002CE0                 db    0
.xdata$x:00002CE1                 db    0
.xdata$x:00002CE2                 db    0
.xdata$x:00002CE3                 db    0
.xdata$x:00002CE4                 db    0
.xdata$x:00002CE5                 db    0
.xdata$x:00002CE6                 db    0
.xdata$x:00002CE7                 db    0
.xdata$x:00002CE8                 db    0
.xdata$x:00002CE9                 db    0
.xdata$x:00002CEA                 db    0
.xdata$x:00002CEB                 db    0
.xdata$x:00002CEC                 db    1
.xdata$x:00002CED                 db    0
.xdata$x:00002CEE                 db    0
.xdata$x:00002CEF                 db    0
.xdata$x:00002CEF _xdata$x        ends
.xdata$x:00002CEF
.rdata$r:00002CF0 ; ===========================================================================
.rdata$r:00002CF0
.rdata$r:00002CF0 ; Segment type: Pure data
.rdata$r:00002CF0 ; Segment permissions: Read
.rdata$r:00002CF0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002CF0                 assume cs:_rdata$r
.rdata$r:00002CF0                 ;org 2CF0h
.rdata$r:00002CF0 ; COMDAT (pick any)
.rdata$r:00002CF0                 public ??_R4CMixer@NCoderMixer2@@6B@
.rdata$r:00002CF0 ; const NCoderMixer2::CMixer::`RTTI Complete Object Locator'
.rdata$r:00002CF0 ??_R4CMixer@NCoderMixer2@@6B@ db    0   ; DATA XREF: .rdata:00002C98o
.rdata$r:00002CF1                 db    0
.rdata$r:00002CF2                 db    0
.rdata$r:00002CF3                 db    0
.rdata$r:00002CF4                 db    0
.rdata$r:00002CF5                 db    0
.rdata$r:00002CF6                 db    0
.rdata$r:00002CF7                 db    0
.rdata$r:00002CF8                 db    0
.rdata$r:00002CF9                 db    0
.rdata$r:00002CFA                 db    0
.rdata$r:00002CFB                 db    0
.rdata$r:00002CFC                 dd offset ??_R0?AVCMixer@NCoderMixer2@@@8 ; NCoderMixer2::CMixer `RTTI Type Descriptor'
.rdata$r:00002D00                 dd offset ??_R3CMixer@NCoderMixer2@@8 ; NCoderMixer2::CMixer::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002D00 _rdata$r        ends
.rdata$r:00002D00
.text:00002D04 ; ===========================================================================
.text:00002D04
.text:00002D04 ; Segment type: Pure code
.text:00002D04 ; Segment permissions: Read/Execute
.text:00002D04 _text           segment para public 'CODE' use32
.text:00002D04                 assume cs:_text
.text:00002D04                 ;org 2D04h
.text:00002D04 ; COMDAT (pick any)
.text:00002D04                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002D04
.text:00002D04 ; =============== S U B R O U T I N E =======================================
.text:00002D04
.text:00002D04 ; Attributes: bp-based frame
.text:00002D04
.text:00002D04 ; __int32 __thiscall NCoderMixer2::CMixer::SetBindInfo(NCoderMixer2::CMixer *this, const struct NCoderMixer2::CBindInfo *)
.text:00002D04                 public ?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z
.text:00002D04 ?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z proc near
.text:00002D04                                         ; DATA XREF: .rdata:const NCoderMixer2::CMixer::`vftable'o
.text:00002D04
.text:00002D04 var_4           = dword ptr -4
.text:00002D04 arg_0           = dword ptr  8
.text:00002D04
.text:00002D04                 push    ebp
.text:00002D05                 mov     ebp, esp
.text:00002D07                 push    ecx
.text:00002D08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D0F                 mov     [ebp+var_4], ecx
.text:00002D12                 mov     eax, [ebp+arg_0]
.text:00002D15                 push    eax
.text:00002D16                 mov     ecx, [ebp+var_4]
.text:00002D19                 add     ecx, 4
.text:00002D1C                 call    ??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z ; NCoderMixer2::CBindInfo::operator=(NCoderMixer2::CBindInfo const &)
.text:00002D21                 mov     ecx, [ebp+var_4]
.text:00002D24                 add     ecx, 44h ; 'D'
.text:00002D27                 call    ?Clear@?$CRecordVector@_N@@QAEXXZ ; CRecordVector<bool>::Clear(void)
.text:00002D2C                 mov     ecx, [ebp+var_4]
.text:00002D2F                 mov     dword ptr [ecx+60h], 0
.text:00002D36                 xor     eax, eax
.text:00002D38                 add     esp, 4
.text:00002D3B                 cmp     ebp, esp
.text:00002D3D                 call    __RTC_CheckEsp
.text:00002D42                 mov     esp, ebp
.text:00002D44                 pop     ebp
.text:00002D45                 retn    4
.text:00002D45 ?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z endp
.text:00002D45
.text:00002D45 _text           ends
.text:00002D45
.text:00002D48 ; ===========================================================================
.text:00002D48
.text:00002D48 ; Segment type: Pure code
.text:00002D48 ; Segment permissions: Read/Execute
.text:00002D48 _text           segment para public 'CODE' use32
.text:00002D48                 assume cs:_text
.text:00002D48                 ;org 2D48h
.text:00002D48 ; COMDAT (pick any)
.text:00002D48                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002D48
.text:00002D48 ; =============== S U B R O U T I N E =======================================
.text:00002D48
.text:00002D48 ; Attributes: bp-based frame
.text:00002D48
.text:00002D48 ; public: struct NCoderMixer2::CBindInfo & __thiscall NCoderMixer2::CBindInfo::operator=(struct NCoderMixer2::CBindInfo const &)
.text:00002D48                 public ??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z
.text:00002D48 ??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z proc near
.text:00002D48                                         ; CODE XREF: NCoderMixer2::CMixer::SetBindInfo(NCoderMixer2::CBindInfo const &)+18p
.text:00002D48                                         ; NArchive::N7z::CBindInfoEx::operator=(NArchive::N7z::CBindInfoEx const &)+15p
.text:00002D48
.text:00002D48 var_4           = dword ptr -4
.text:00002D48 arg_0           = dword ptr  8
.text:00002D48
.text:00002D48                 push    ebp
.text:00002D49                 mov     ebp, esp
.text:00002D4B                 push    ecx
.text:00002D4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D53                 mov     [ebp+var_4], ecx
.text:00002D56                 mov     eax, [ebp+arg_0]
.text:00002D59                 push    eax
.text:00002D5A                 mov     ecx, [ebp+var_4]
.text:00002D5D                 call    ??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=(CRecordVector<NCoderMixer2::CCoderStreamsInfo> const &)
.text:00002D62                 mov     ecx, [ebp+arg_0]
.text:00002D65                 add     ecx, 0Ch
.text:00002D68                 push    ecx
.text:00002D69                 mov     ecx, [ebp+var_4]
.text:00002D6C                 add     ecx, 0Ch
.text:00002D6F                 call    ??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NCoderMixer2::CBond>::operator=(CRecordVector<NCoderMixer2::CBond> const &)
.text:00002D74                 mov     edx, [ebp+arg_0]
.text:00002D77                 add     edx, 18h
.text:00002D7A                 push    edx
.text:00002D7B                 mov     ecx, [ebp+var_4]
.text:00002D7E                 add     ecx, 18h
.text:00002D81                 call    ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z ; CRecordVector<uint>::operator=(CRecordVector<uint> const &)
.text:00002D86                 mov     eax, [ebp+var_4]
.text:00002D89                 mov     ecx, [ebp+arg_0]
.text:00002D8C                 mov     edx, [ecx+24h]
.text:00002D8F                 mov     [eax+24h], edx
.text:00002D92                 mov     eax, [ebp+arg_0]
.text:00002D95                 add     eax, 28h ; '('
.text:00002D98                 push    eax
.text:00002D99                 mov     ecx, [ebp+var_4]
.text:00002D9C                 add     ecx, 28h ; '('
.text:00002D9F                 call    ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z ; CRecordVector<uint>::operator=(CRecordVector<uint> const &)
.text:00002DA4                 mov     ecx, [ebp+arg_0]
.text:00002DA7                 add     ecx, 34h ; '4'
.text:00002DAA                 push    ecx
.text:00002DAB                 mov     ecx, [ebp+var_4]
.text:00002DAE                 add     ecx, 34h ; '4'
.text:00002DB1                 call    ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z ; CRecordVector<uint>::operator=(CRecordVector<uint> const &)
.text:00002DB6                 mov     eax, [ebp+var_4]
.text:00002DB9                 add     esp, 4
.text:00002DBC                 cmp     ebp, esp
.text:00002DBE                 call    __RTC_CheckEsp
.text:00002DC3                 mov     esp, ebp
.text:00002DC5                 pop     ebp
.text:00002DC6                 retn    4
.text:00002DC6 ??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z endp
.text:00002DC6
.text:00002DC6 ; ---------------------------------------------------------------------------
.text:00002DC9                 align 4
.text:00002DC9 _text           ends
.text:00002DC9
.text:00002DCC ; ===========================================================================
.text:00002DCC
.text:00002DCC ; Segment type: Pure code
.text:00002DCC ; Segment permissions: Read/Execute
.text:00002DCC _text           segment para public 'CODE' use32
.text:00002DCC                 assume cs:_text
.text:00002DCC                 ;org 2DCCh
.text:00002DCC ; COMDAT (pick any)
.text:00002DCC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002DCC
.text:00002DCC ; =============== S U B R O U T I N E =======================================
.text:00002DCC
.text:00002DCC ; Attributes: bp-based frame
.text:00002DCC
.text:00002DCC ; __int32 __stdcall NCoderMixer2::CMixerMT::QueryInterface(NCoderMixer2::CMixerMT *this, const struct _GUID *Buf1, void **)
.text:00002DCC                 public ?QueryInterface@CMixerMT@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z
.text:00002DCC ?QueryInterface@CMixerMT@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00002DCC                                         ; DATA XREF: .rdata:const NCoderMixer2::CMixerMT::`vftable'{for `IUnknown'}o
.text:00002DCC
.text:00002DCC this            = dword ptr  8
.text:00002DCC Buf1            = dword ptr  0Ch
.text:00002DCC arg_8           = dword ptr  10h
.text:00002DCC
.text:00002DCC                 push    ebp
.text:00002DCD                 mov     ebp, esp
.text:00002DCF                 mov     eax, [ebp+arg_8]
.text:00002DD2                 mov     dword ptr [eax], 0
.text:00002DD8                 push    offset _IID_IUnknown ; Buf2
.text:00002DDD                 mov     ecx, [ebp+Buf1]
.text:00002DE0                 push    ecx             ; Buf1
.text:00002DE1                 call    ___@8           ; __(x,x)
.text:00002DE6                 test    eax, eax
.text:00002DE8                 jz      short loc_2DF4
.text:00002DEA                 mov     edx, [ebp+arg_8]
.text:00002DED                 mov     eax, [ebp+this]
.text:00002DF0                 mov     [edx], eax
.text:00002DF2                 jmp     short loc_2DFB
.text:00002DF4 ; ---------------------------------------------------------------------------
.text:00002DF4
.text:00002DF4 loc_2DF4:                               ; CODE XREF: NCoderMixer2::CMixerMT::QueryInterface(_GUID const &,void * *)+1Cj
.text:00002DF4                 mov     eax, 80004002h
.text:00002DF9                 jmp     short loc_2E0C
.text:00002DFB ; ---------------------------------------------------------------------------
.text:00002DFB
.text:00002DFB loc_2DFB:                               ; CODE XREF: NCoderMixer2::CMixerMT::QueryInterface(_GUID const &,void * *)+26j
.text:00002DFB                 mov     ecx, [ebp+this]
.text:00002DFE                 mov     edx, [ecx+68h]
.text:00002E01                 add     edx, 1
.text:00002E04                 mov     eax, [ebp+this]
.text:00002E07                 mov     [eax+68h], edx
.text:00002E0A                 xor     eax, eax
.text:00002E0C
.text:00002E0C loc_2E0C:                               ; CODE XREF: NCoderMixer2::CMixerMT::QueryInterface(_GUID const &,void * *)+2Dj
.text:00002E0C                 cmp     ebp, esp
.text:00002E0E                 call    __RTC_CheckEsp
.text:00002E13                 pop     ebp
.text:00002E14                 retn    0Ch
.text:00002E14 ?QueryInterface@CMixerMT@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z endp
.text:00002E14
.text:00002E14 ; ---------------------------------------------------------------------------
.text:00002E17                 align 4
.text:00002E17 _text           ends
.text:00002E17
.text:00002E18 ; ===========================================================================
.text:00002E18
.text:00002E18 ; Segment type: Pure code
.text:00002E18 ; Segment permissions: Read/Execute
.text:00002E18 _text           segment para public 'CODE' use32
.text:00002E18                 assume cs:_text
.text:00002E18                 ;org 2E18h
.text:00002E18 ; COMDAT (pick any)
.text:00002E18                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002E18
.text:00002E18 ; =============== S U B R O U T I N E =======================================
.text:00002E18
.text:00002E18 ; Attributes: bp-based frame
.text:00002E18
.text:00002E18 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00002E18                 public ___@8
.text:00002E18 ___@8           proc near               ; CODE XREF: NCoderMixer2::CMixerMT::QueryInterface(_GUID const &,void * *)+15p
.text:00002E18                                         ; NArchive::N7z::CDecProgress::QueryInterface(_GUID const &,void * *)+15p ...
.text:00002E18
.text:00002E18 Buf1            = dword ptr  8
.text:00002E18 Buf2            = dword ptr  0Ch
.text:00002E18
.text:00002E18                 push    ebp
.text:00002E19                 mov     ebp, esp
.text:00002E1B                 mov     eax, [ebp+Buf2]
.text:00002E1E                 push    eax             ; Buf2
.text:00002E1F                 mov     ecx, [ebp+Buf1]
.text:00002E22                 push    ecx             ; Buf1
.text:00002E23                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00002E28                 cmp     ebp, esp
.text:00002E2A                 call    __RTC_CheckEsp
.text:00002E2F                 pop     ebp
.text:00002E30                 retn    8
.text:00002E30 ___@8           endp
.text:00002E30
.text:00002E30 ; ---------------------------------------------------------------------------
.text:00002E33                 align 4
.text:00002E33 _text           ends
.text:00002E33
.text:00002E34 ; ===========================================================================
.text:00002E34
.text:00002E34 ; Segment type: Pure code
.text:00002E34 ; Segment permissions: Read/Execute
.text:00002E34 _text           segment para public 'CODE' use32
.text:00002E34                 assume cs:_text
.text:00002E34                 ;org 2E34h
.text:00002E34 ; COMDAT (pick any)
.text:00002E34                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002E34
.text:00002E34 ; =============== S U B R O U T I N E =======================================
.text:00002E34
.text:00002E34 ; Attributes: bp-based frame
.text:00002E34
.text:00002E34 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00002E34                 public _IsEqualGUID@8
.text:00002E34 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00002E34
.text:00002E34 Buf1            = dword ptr  8
.text:00002E34 Buf2            = dword ptr  0Ch
.text:00002E34
.text:00002E34                 push    ebp
.text:00002E35                 mov     ebp, esp
.text:00002E37                 push    10h             ; Size
.text:00002E39                 mov     eax, [ebp+Buf2]
.text:00002E3C                 push    eax             ; Buf2
.text:00002E3D                 mov     ecx, [ebp+Buf1]
.text:00002E40                 push    ecx             ; Buf1
.text:00002E41                 call    _memcmp
.text:00002E46                 add     esp, 0Ch
.text:00002E49                 neg     eax
.text:00002E4B                 sbb     eax, eax
.text:00002E4D                 add     eax, 1
.text:00002E50                 cmp     ebp, esp
.text:00002E52                 call    __RTC_CheckEsp
.text:00002E57                 pop     ebp
.text:00002E58                 retn    8
.text:00002E58 _IsEqualGUID@8  endp
.text:00002E58
.text:00002E58 ; ---------------------------------------------------------------------------
.text:00002E5B                 align 4
.text:00002E5B _text           ends
.text:00002E5B
.text:00002E5C ; ===========================================================================
.text:00002E5C
.text:00002E5C ; Segment type: Pure code
.text:00002E5C ; Segment permissions: Read/Execute
.text:00002E5C _text           segment para public 'CODE' use32
.text:00002E5C                 assume cs:_text
.text:00002E5C                 ;org 2E5Ch
.text:00002E5C ; COMDAT (pick any)
.text:00002E5C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002E5C
.text:00002E5C ; =============== S U B R O U T I N E =======================================
.text:00002E5C
.text:00002E5C ; Attributes: bp-based frame
.text:00002E5C
.text:00002E5C ; unsigned __int32 __stdcall NCoderMixer2::CMixerMT::AddRef(NCoderMixer2::CMixerMT *this)
.text:00002E5C                 public ?AddRef@CMixerMT@NCoderMixer2@@UAGKXZ
.text:00002E5C ?AddRef@CMixerMT@NCoderMixer2@@UAGKXZ proc near ; DATA XREF: .rdata:0000299Co
.text:00002E5C
.text:00002E5C var_4           = dword ptr -4
.text:00002E5C this            = dword ptr  8
.text:00002E5C
.text:00002E5C                 push    ebp
.text:00002E5D                 mov     ebp, esp
.text:00002E5F                 push    ecx
.text:00002E60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E67                 mov     eax, [ebp+this]
.text:00002E6A                 mov     ecx, [eax+68h]
.text:00002E6D                 add     ecx, 1
.text:00002E70                 mov     [ebp+var_4], ecx
.text:00002E73                 mov     edx, [ebp+this]
.text:00002E76                 mov     eax, [ebp+var_4]
.text:00002E79                 mov     [edx+68h], eax
.text:00002E7C                 mov     eax, [ebp+var_4]
.text:00002E7F                 mov     esp, ebp
.text:00002E81                 pop     ebp
.text:00002E82                 retn    4
.text:00002E82 ?AddRef@CMixerMT@NCoderMixer2@@UAGKXZ endp
.text:00002E82
.text:00002E82 ; ---------------------------------------------------------------------------
.text:00002E85                 align 4
.text:00002E85 _text           ends
.text:00002E85
.text:00002E88 ; ===========================================================================
.text:00002E88
.text:00002E88 ; Segment type: Pure code
.text:00002E88 ; Segment permissions: Read/Execute
.text:00002E88 _text           segment para public 'CODE' use32
.text:00002E88                 assume cs:_text
.text:00002E88                 ;org 2E88h
.text:00002E88 ; COMDAT (pick any)
.text:00002E88                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002E88
.text:00002E88 ; =============== S U B R O U T I N E =======================================
.text:00002E88
.text:00002E88 ; Attributes: bp-based frame
.text:00002E88
.text:00002E88 ; unsigned __int32 __stdcall NCoderMixer2::CMixerMT::Release(NCoderMixer2::CMixerMT *this)
.text:00002E88                 public ?Release@CMixerMT@NCoderMixer2@@UAGKXZ
.text:00002E88 ?Release@CMixerMT@NCoderMixer2@@UAGKXZ proc near
.text:00002E88                                         ; DATA XREF: .rdata:000029A0o
.text:00002E88
.text:00002E88 var_10          = dword ptr -10h
.text:00002E88 var_C           = dword ptr -0Ch
.text:00002E88 var_8           = dword ptr -8
.text:00002E88 var_4           = dword ptr -4
.text:00002E88 this            = dword ptr  8
.text:00002E88
.text:00002E88                 push    ebp
.text:00002E89                 mov     ebp, esp
.text:00002E8B                 sub     esp, 10h
.text:00002E8E                 mov     eax, 0CCCCCCCCh
.text:00002E93                 mov     [ebp+var_10], eax
.text:00002E96                 mov     [ebp+var_C], eax
.text:00002E99                 mov     [ebp+var_8], eax
.text:00002E9C                 mov     [ebp+var_4], eax
.text:00002E9F                 mov     eax, [ebp+this]
.text:00002EA2                 mov     ecx, [eax+68h]
.text:00002EA5                 sub     ecx, 1
.text:00002EA8                 mov     [ebp+var_C], ecx
.text:00002EAB                 mov     edx, [ebp+this]
.text:00002EAE                 mov     eax, [ebp+var_C]
.text:00002EB1                 mov     [edx+68h], eax
.text:00002EB4                 cmp     [ebp+var_C], 0
.text:00002EB8                 jz      short loc_2EC2
.text:00002EBA                 mov     ecx, [ebp+this]
.text:00002EBD                 mov     eax, [ecx+68h]
.text:00002EC0                 jmp     short loc_2EEC
.text:00002EC2 ; ---------------------------------------------------------------------------
.text:00002EC2
.text:00002EC2 loc_2EC2:                               ; CODE XREF: NCoderMixer2::CMixerMT::Release(void)+30j
.text:00002EC2                 mov     edx, [ebp+this]
.text:00002EC5                 mov     [ebp+var_8], edx
.text:00002EC8                 mov     eax, [ebp+var_8]
.text:00002ECB                 mov     [ebp+var_4], eax
.text:00002ECE                 cmp     [ebp+var_4], 0
.text:00002ED2                 jz      short loc_2EE3
.text:00002ED4                 push    1
.text:00002ED6                 mov     ecx, [ebp+var_4]
.text:00002ED9                 call    ??_GCMixerMT@NCoderMixer2@@QAEPAXI@Z ; NCoderMixer2::CMixerMT::`scalar deleting destructor'(uint)
.text:00002EDE                 mov     [ebp+var_10], eax
.text:00002EE1                 jmp     short loc_2EEA
.text:00002EE3 ; ---------------------------------------------------------------------------
.text:00002EE3
.text:00002EE3 loc_2EE3:                               ; CODE XREF: NCoderMixer2::CMixerMT::Release(void)+4Aj
.text:00002EE3                 mov     [ebp+var_10], 0
.text:00002EEA
.text:00002EEA loc_2EEA:                               ; CODE XREF: NCoderMixer2::CMixerMT::Release(void)+59j
.text:00002EEA                 xor     eax, eax
.text:00002EEC
.text:00002EEC loc_2EEC:                               ; CODE XREF: NCoderMixer2::CMixerMT::Release(void)+38j
.text:00002EEC                 add     esp, 10h
.text:00002EEF                 cmp     ebp, esp
.text:00002EF1                 call    __RTC_CheckEsp
.text:00002EF6                 mov     esp, ebp
.text:00002EF8                 pop     ebp
.text:00002EF9                 retn    4
.text:00002EF9 ?Release@CMixerMT@NCoderMixer2@@UAGKXZ endp
.text:00002EF9
.text:00002EF9 _text           ends
.text:00002EF9
.text:00002EFC ; ===========================================================================
.text:00002EFC
.text:00002EFC ; Segment type: Pure code
.text:00002EFC ; Segment permissions: Read/Execute
.text:00002EFC _text           segment para public 'CODE' use32
.text:00002EFC                 assume cs:_text
.text:00002EFC                 ;org 2EFCh
.text:00002EFC ; COMDAT (pick any)
.text:00002EFC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002EFC
.text:00002EFC ; =============== S U B R O U T I N E =======================================
.text:00002EFC
.text:00002EFC ; Attributes: bp-based frame
.text:00002EFC
.text:00002EFC ; void __thiscall NCoderMixer2::CMixerMT::SetCoderInfo(NCoderMixer2::CMixerMT *this, unsigned int, const unsigned __int64 *, const unsigned __int64 *const *)
.text:00002EFC                 public ?SetCoderInfo@CMixerMT@NCoderMixer2@@UAEXIPB_KPBQB_K@Z
.text:00002EFC ?SetCoderInfo@CMixerMT@NCoderMixer2@@UAEXIPB_KPBQB_K@Z proc near
.text:00002EFC                                         ; DATA XREF: .rdata:00002988o
.text:00002EFC
.text:00002EFC var_4           = dword ptr -4
.text:00002EFC arg_0           = dword ptr  8
.text:00002EFC arg_4           = dword ptr  0Ch
.text:00002EFC arg_8           = dword ptr  10h
.text:00002EFC
.text:00002EFC                 push    ebp
.text:00002EFD                 mov     ebp, esp
.text:00002EFF                 push    ecx
.text:00002F00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F07                 mov     [ebp+var_4], ecx
.text:00002F0A                 mov     eax, [ebp+arg_8]
.text:00002F0D                 push    eax             ; unsigned __int64 **
.text:00002F0E                 mov     ecx, [ebp+arg_4]
.text:00002F11                 push    ecx             ; unsigned __int64 *
.text:00002F12                 mov     edx, [ebp+arg_0]
.text:00002F15                 push    edx
.text:00002F16                 mov     ecx, [ebp+var_4]
.text:00002F19                 add     ecx, 74h ; 't'
.text:00002F1C                 call    ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[](uint)
.text:00002F21                 add     eax, 18h
.text:00002F24                 mov     ecx, eax        ; this
.text:00002F26                 call    ?SetCoderInfo@CCoder@NCoderMixer2@@QAEXPB_KPBQB_K@Z ; NCoderMixer2::CCoder::SetCoderInfo(unsigned __int64 const *,unsigned __int64 const * const *)
.text:00002F2B                 add     esp, 4
.text:00002F2E                 cmp     ebp, esp
.text:00002F30                 call    __RTC_CheckEsp
.text:00002F35                 mov     esp, ebp
.text:00002F37                 pop     ebp
.text:00002F38                 retn    0Ch
.text:00002F38 ?SetCoderInfo@CMixerMT@NCoderMixer2@@UAEXIPB_KPBQB_K@Z endp
.text:00002F38
.text:00002F38 ; ---------------------------------------------------------------------------
.text:00002F3B                 align 4
.text:00002F3B _text           ends
.text:00002F3B
.text:00002F3C ; ===========================================================================
.text:00002F3C
.text:00002F3C ; Segment type: Pure code
.text:00002F3C ; Segment permissions: Read/Execute
.text:00002F3C _text           segment para public 'CODE' use32
.text:00002F3C                 assume cs:_text
.text:00002F3C                 ;org 2F3Ch
.text:00002F3C ; COMDAT (pick any)
.text:00002F3C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002F3C
.text:00002F3C ; =============== S U B R O U T I N E =======================================
.text:00002F3C
.text:00002F3C ; Attributes: bp-based frame
.text:00002F3C
.text:00002F3C ; public: void * __thiscall NCoderMixer2::CMixerMT::`scalar deleting destructor'(unsigned int)
.text:00002F3C                 public ??_GCMixerMT@NCoderMixer2@@QAEPAXI@Z
.text:00002F3C ??_GCMixerMT@NCoderMixer2@@QAEPAXI@Z proc near
.text:00002F3C                                         ; CODE XREF: NCoderMixer2::CMixerMT::Release(void)+51p
.text:00002F3C
.text:00002F3C var_4           = dword ptr -4
.text:00002F3C arg_0           = dword ptr  8
.text:00002F3C
.text:00002F3C                 push    ebp
.text:00002F3D                 mov     ebp, esp
.text:00002F3F                 push    ecx
.text:00002F40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002F47                 mov     [ebp+var_4], ecx
.text:00002F4A                 mov     ecx, [ebp+var_4] ; this
.text:00002F4D                 call    ??1CMixerMT@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CMixerMT::~CMixerMT(void)
.text:00002F52                 mov     eax, [ebp+arg_0]
.text:00002F55                 and     eax, 1
.text:00002F58                 jz      short loc_2F66
.text:00002F5A                 mov     ecx, [ebp+var_4]
.text:00002F5D                 push    ecx             ; void *
.text:00002F5E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002F63                 add     esp, 4
.text:00002F66
.text:00002F66 loc_2F66:                               ; CODE XREF: NCoderMixer2::CMixerMT::`scalar deleting destructor'(uint)+1Cj
.text:00002F66                 mov     eax, [ebp+var_4]
.text:00002F69                 add     esp, 4
.text:00002F6C                 cmp     ebp, esp
.text:00002F6E                 call    __RTC_CheckEsp
.text:00002F73                 mov     esp, ebp
.text:00002F75                 pop     ebp
.text:00002F76                 retn    4
.text:00002F76 ??_GCMixerMT@NCoderMixer2@@QAEPAXI@Z endp
.text:00002F76
.text:00002F76 ; ---------------------------------------------------------------------------
.text:00002F79                 align 4
.text:00002F79 _text           ends
.text:00002F79
.text:00002F7C ; ===========================================================================
.text:00002F7C
.text:00002F7C ; Segment type: Pure code
.text:00002F7C ; Segment permissions: Read/Execute
.text:00002F7C _text           segment para public 'CODE' use32
.text:00002F7C                 assume cs:_text
.text:00002F7C                 ;org 2F7Ch
.text:00002F7C ; COMDAT (pick any)
.text:00002F7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002F7C
.text:00002F7C ; =============== S U B R O U T I N E =======================================
.text:00002F7C
.text:00002F7C ; Attributes: bp-based frame
.text:00002F7C
.text:00002F7C ; _DWORD __thiscall NCoderMixer2::CMixer::~CMixer(NCoderMixer2::CMixer *__hidden this)
.text:00002F7C                 public ??1CMixer@NCoderMixer2@@QAE@XZ
.text:00002F7C ??1CMixer@NCoderMixer2@@QAE@XZ proc near
.text:00002F7C                                         ; CODE XREF: __unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$0+6j
.text:00002F7C                                         ; NCoderMixer2::CMixerMT::~CMixerMT(void)+5Bp ...
.text:00002F7C
.text:00002F7C var_10          = dword ptr -10h
.text:00002F7C var_C           = dword ptr -0Ch
.text:00002F7C var_4           = dword ptr -4
.text:00002F7C
.text:00002F7C                 push    ebp
.text:00002F7D                 mov     ebp, esp
.text:00002F7F                 push    0FFFFFFFFh
.text:00002F81                 push    offset __ehhandler$??1CMixer@NCoderMixer2@@QAE@XZ
.text:00002F86                 mov     eax, large fs:0
.text:00002F8C                 push    eax
.text:00002F8D                 push    ecx
.text:00002F8E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002F95                 mov     eax, dword ptr ds:___security_cookie
.text:00002F9A                 xor     eax, ebp
.text:00002F9C                 push    eax
.text:00002F9D                 lea     eax, [ebp+var_C]
.text:00002FA0                 mov     large fs:0, eax
.text:00002FA6                 mov     [ebp+var_10], ecx
.text:00002FA9                 mov     [ebp+var_4], 1
.text:00002FB0                 mov     ecx, [ebp+var_10]
.text:00002FB3                 add     ecx, 50h ; 'P'
.text:00002FB6                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00002FBB                 mov     byte ptr [ebp+var_4], 0
.text:00002FBF                 mov     ecx, [ebp+var_10]
.text:00002FC2                 add     ecx, 44h ; 'D'
.text:00002FC5                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00002FCA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002FD1                 mov     ecx, [ebp+var_10]
.text:00002FD4                 add     ecx, 4          ; this
.text:00002FD7                 call    ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text:00002FDC                 mov     ecx, [ebp+var_C]
.text:00002FDF                 mov     large fs:0, ecx
.text:00002FE6                 pop     ecx
.text:00002FE7                 add     esp, 10h
.text:00002FEA                 cmp     ebp, esp
.text:00002FEC                 call    __RTC_CheckEsp
.text:00002FF1                 mov     esp, ebp
.text:00002FF3                 pop     ebp
.text:00002FF4                 retn
.text:00002FF4 ??1CMixer@NCoderMixer2@@QAE@XZ endp
.text:00002FF4
.text:00002FF4 ; ---------------------------------------------------------------------------
.text:00002FF5                 align 4
.text:00002FF5 _text           ends
.text:00002FF5
.text$x:00002FF8 ; ===========================================================================
.text$x:00002FF8
.text$x:00002FF8 ; Segment type: Pure code
.text$x:00002FF8 ; Segment permissions: Read/Execute
.text$x:00002FF8 _text$x         segment para public 'CODE' use32
.text$x:00002FF8                 assume cs:_text$x
.text$x:00002FF8                 ;org 2FF8h
.text$x:00002FF8 ; COMDAT (pick associative to section at 2F7C)
.text$x:00002FF8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00002FF8
.text$x:00002FF8 ; =============== S U B R O U T I N E =======================================
.text$x:00002FF8
.text$x:00002FF8
.text$x:00002FF8 __unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:00002FF8                                         ; DATA XREF: .xdata$x:00003030o
.text$x:00002FF8                 mov     ecx, [ebp-10h]
.text$x:00002FFB                 add     ecx, 4          ; this
.text$x:00002FFE                 jmp     ??1CBindInfo@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CBindInfo::~CBindInfo(void)
.text$x:00002FFE __unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$0 endp
.text$x:00002FFE
.text$x:00003003
.text$x:00003003 ; =============== S U B R O U T I N E =======================================
.text$x:00003003
.text$x:00003003
.text$x:00003003 __unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:00003003                                         ; DATA XREF: .xdata$x:00003038o
.text$x:00003003                 mov     ecx, [ebp-10h]
.text$x:00003006                 add     ecx, 44h ; 'D'
.text$x:00003009                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:00003009 __unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$1 endp
.text$x:00003009
.text$x:0000300E
.text$x:0000300E ; =============== S U B R O U T I N E =======================================
.text$x:0000300E
.text$x:0000300E
.text$x:0000300E __ehhandler$??1CMixer@NCoderMixer2@@QAE@XZ proc near
.text$x:0000300E                                         ; DATA XREF: NCoderMixer2::CMixer::~CMixer(void)+5o
.text$x:0000300E
.text$x:0000300E arg_4           = dword ptr  8
.text$x:0000300E
.text$x:0000300E                 mov     edx, [esp+arg_4]
.text$x:00003012                 lea     eax, [edx+0Ch]
.text$x:00003015                 mov     ecx, [edx-8]
.text$x:00003018                 xor     ecx, eax
.text$x:0000301A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000301F                 mov     eax, offset __ehfuncinfo$??1CMixer@NCoderMixer2@@QAE@XZ
.text$x:00003024                 jmp     ___CxxFrameHandler3
.text$x:00003024 __ehhandler$??1CMixer@NCoderMixer2@@QAE@XZ endp
.text$x:00003024
.text$x:00003024 ; ---------------------------------------------------------------------------
.text$x:00003029                 align 4
.text$x:00003029 _text$x         ends
.text$x:00003029
.xdata$x:0000302C ; ===========================================================================
.xdata$x:0000302C
.xdata$x:0000302C ; Segment type: Pure data
.xdata$x:0000302C ; Segment permissions: Read
.xdata$x:0000302C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000302C                 assume cs:_xdata$x
.xdata$x:0000302C                 ;org 302Ch
.xdata$x:0000302C ; COMDAT (pick associative to section at 2F7C)
.xdata$x:0000302C __unwindtable$??1CMixer@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:0000302C                                         ; DATA XREF: .xdata$x:00003044o
.xdata$x:0000302D                 db 0FFh
.xdata$x:0000302E                 db 0FFh
.xdata$x:0000302F                 db 0FFh
.xdata$x:00003030                 dd offset __unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$0
.xdata$x:00003034                 align 8
.xdata$x:00003038                 dd offset __unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$1
.xdata$x:0000303C __ehfuncinfo$??1CMixer@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:0000303C                                         ; DATA XREF: __ehhandler$??1CMixer@NCoderMixer2@@QAE@XZ+11o
.xdata$x:0000303D                 db    5
.xdata$x:0000303E                 db  93h ; ô
.xdata$x:0000303F                 db  19h
.xdata$x:00003040                 db    2
.xdata$x:00003041                 db    0
.xdata$x:00003042                 db    0
.xdata$x:00003043                 db    0
.xdata$x:00003044                 dd offset __unwindtable$??1CMixer@NCoderMixer2@@QAE@XZ
.xdata$x:00003048                 db    0
.xdata$x:00003049                 db    0
.xdata$x:0000304A                 db    0
.xdata$x:0000304B                 db    0
.xdata$x:0000304C                 db    0
.xdata$x:0000304D                 db    0
.xdata$x:0000304E                 db    0
.xdata$x:0000304F                 db    0
.xdata$x:00003050                 db    0
.xdata$x:00003051                 db    0
.xdata$x:00003052                 db    0
.xdata$x:00003053                 db    0
.xdata$x:00003054                 db    0
.xdata$x:00003055                 db    0
.xdata$x:00003056                 db    0
.xdata$x:00003057                 db    0
.xdata$x:00003058                 db    0
.xdata$x:00003059                 db    0
.xdata$x:0000305A                 db    0
.xdata$x:0000305B                 db    0
.xdata$x:0000305C                 db    1
.xdata$x:0000305D                 db    0
.xdata$x:0000305E                 db    0
.xdata$x:0000305F                 db    0
.xdata$x:0000305F _xdata$x        ends
.xdata$x:0000305F
.text:00003060 ; ===========================================================================
.text:00003060
.text:00003060 ; Segment type: Pure code
.text:00003060 ; Segment permissions: Read/Execute
.text:00003060 _text           segment para public 'CODE' use32
.text:00003060                 assume cs:_text
.text:00003060                 ;org 3060h
.text:00003060 ; COMDAT (pick any)
.text:00003060                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003060
.text:00003060 ; =============== S U B R O U T I N E =======================================
.text:00003060
.text:00003060 ; Attributes: bp-based frame
.text:00003060
.text:00003060 ; _DWORD __thiscall NCoderMixer2::CMixerMT::~CMixerMT(NCoderMixer2::CMixerMT *__hidden this)
.text:00003060                 public ??1CMixerMT@NCoderMixer2@@QAE@XZ
.text:00003060 ??1CMixerMT@NCoderMixer2@@QAE@XZ proc near
.text:00003060                                         ; CODE XREF: NCoderMixer2::CMixerMT::`scalar deleting destructor'(uint)+11p
.text:00003060
.text:00003060 var_10          = dword ptr -10h
.text:00003060 var_C           = dword ptr -0Ch
.text:00003060 var_4           = dword ptr -4
.text:00003060
.text:00003060                 push    ebp
.text:00003061                 mov     ebp, esp
.text:00003063                 push    0FFFFFFFFh
.text:00003065                 push    offset __ehhandler$??1CMixerMT@NCoderMixer2@@QAE@XZ
.text:0000306A                 mov     eax, large fs:0
.text:00003070                 push    eax
.text:00003071                 push    ecx
.text:00003072                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003079                 mov     eax, dword ptr ds:___security_cookie
.text:0000307E                 xor     eax, ebp
.text:00003080                 push    eax
.text:00003081                 lea     eax, [ebp+var_C]
.text:00003084                 mov     large fs:0, eax
.text:0000308A                 mov     [ebp+var_10], ecx
.text:0000308D                 mov     [ebp+var_4], 1
.text:00003094                 mov     ecx, [ebp+var_10]
.text:00003097                 add     ecx, 78h ; 'x'
.text:0000309A                 call    ??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>(void)
.text:0000309F                 mov     byte ptr [ebp+var_4], 0
.text:000030A3                 mov     ecx, [ebp+var_10]
.text:000030A6                 add     ecx, 6Ch ; 'l'
.text:000030A9                 call    ??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ ; CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>(void)
.text:000030AE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000030B5                 mov     ecx, [ebp+var_10]
.text:000030B8                 add     ecx, 4          ; this
.text:000030BB                 call    ??1CMixer@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CMixer::~CMixer(void)
.text:000030C0                 mov     ecx, [ebp+var_C]
.text:000030C3                 mov     large fs:0, ecx
.text:000030CA                 pop     ecx
.text:000030CB                 add     esp, 10h
.text:000030CE                 cmp     ebp, esp
.text:000030D0                 call    __RTC_CheckEsp
.text:000030D5                 mov     esp, ebp
.text:000030D7                 pop     ebp
.text:000030D8                 retn
.text:000030D8 ??1CMixerMT@NCoderMixer2@@QAE@XZ endp
.text:000030D8
.text:000030D8 ; ---------------------------------------------------------------------------
.text:000030D9                 align 4
.text:000030D9 _text           ends
.text:000030D9
.text$x:000030DC ; ===========================================================================
.text$x:000030DC
.text$x:000030DC ; Segment type: Pure code
.text$x:000030DC ; Segment permissions: Read/Execute
.text$x:000030DC _text$x         segment para public 'CODE' use32
.text$x:000030DC                 assume cs:_text$x
.text$x:000030DC                 ;org 30DCh
.text$x:000030DC ; COMDAT (pick associative to section at 3060)
.text$x:000030DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000030DC
.text$x:000030DC ; =============== S U B R O U T I N E =======================================
.text$x:000030DC
.text$x:000030DC
.text$x:000030DC __unwindfunclet$??1CMixerMT@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:000030DC                                         ; DATA XREF: .xdata$x:00003114o
.text$x:000030DC                 mov     ecx, [ebp-10h]
.text$x:000030DF                 add     ecx, 4          ; this
.text$x:000030E2                 jmp     ??1CMixer@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CMixer::~CMixer(void)
.text$x:000030E2 __unwindfunclet$??1CMixerMT@NCoderMixer2@@QAE@XZ$0 endp
.text$x:000030E2
.text$x:000030E7
.text$x:000030E7 ; =============== S U B R O U T I N E =======================================
.text$x:000030E7
.text$x:000030E7
.text$x:000030E7 __unwindfunclet$??1CMixerMT@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:000030E7                                         ; DATA XREF: .xdata$x:0000311Co
.text$x:000030E7                 mov     ecx, [ebp-10h]
.text$x:000030EA                 add     ecx, 6Ch ; 'l'
.text$x:000030ED                 jmp     ??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ ; CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>(void)
.text$x:000030ED __unwindfunclet$??1CMixerMT@NCoderMixer2@@QAE@XZ$1 endp
.text$x:000030ED
.text$x:000030F2
.text$x:000030F2 ; =============== S U B R O U T I N E =======================================
.text$x:000030F2
.text$x:000030F2
.text$x:000030F2 __ehhandler$??1CMixerMT@NCoderMixer2@@QAE@XZ proc near
.text$x:000030F2                                         ; DATA XREF: NCoderMixer2::CMixerMT::~CMixerMT(void)+5o
.text$x:000030F2
.text$x:000030F2 arg_4           = dword ptr  8
.text$x:000030F2
.text$x:000030F2                 mov     edx, [esp+arg_4]
.text$x:000030F6                 lea     eax, [edx+0Ch]
.text$x:000030F9                 mov     ecx, [edx-8]
.text$x:000030FC                 xor     ecx, eax
.text$x:000030FE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003103                 mov     eax, offset __ehfuncinfo$??1CMixerMT@NCoderMixer2@@QAE@XZ
.text$x:00003108                 jmp     ___CxxFrameHandler3
.text$x:00003108 __ehhandler$??1CMixerMT@NCoderMixer2@@QAE@XZ endp
.text$x:00003108
.text$x:00003108 ; ---------------------------------------------------------------------------
.text$x:0000310D                 align 10h
.text$x:0000310D _text$x         ends
.text$x:0000310D
.xdata$x:00003110 ; ===========================================================================
.xdata$x:00003110
.xdata$x:00003110 ; Segment type: Pure data
.xdata$x:00003110 ; Segment permissions: Read
.xdata$x:00003110 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003110                 assume cs:_xdata$x
.xdata$x:00003110                 ;org 3110h
.xdata$x:00003110 ; COMDAT (pick associative to section at 3060)
.xdata$x:00003110 __unwindtable$??1CMixerMT@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:00003110                                         ; DATA XREF: .xdata$x:00003128o
.xdata$x:00003111                 db 0FFh
.xdata$x:00003112                 db 0FFh
.xdata$x:00003113                 db 0FFh
.xdata$x:00003114                 dd offset __unwindfunclet$??1CMixerMT@NCoderMixer2@@QAE@XZ$0
.xdata$x:00003118                 db    0
.xdata$x:00003119                 db    0
.xdata$x:0000311A                 db    0
.xdata$x:0000311B                 db    0
.xdata$x:0000311C                 dd offset __unwindfunclet$??1CMixerMT@NCoderMixer2@@QAE@XZ$1
.xdata$x:00003120 __ehfuncinfo$??1CMixerMT@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:00003120                                         ; DATA XREF: __ehhandler$??1CMixerMT@NCoderMixer2@@QAE@XZ+11o
.xdata$x:00003121                 db    5
.xdata$x:00003122                 db  93h ; ô
.xdata$x:00003123                 db  19h
.xdata$x:00003124                 db    2
.xdata$x:00003125                 db    0
.xdata$x:00003126                 db    0
.xdata$x:00003127                 db    0
.xdata$x:00003128                 dd offset __unwindtable$??1CMixerMT@NCoderMixer2@@QAE@XZ
.xdata$x:0000312C                 align 20h
.xdata$x:00003140                 db    1
.xdata$x:00003141                 db    0
.xdata$x:00003142                 db    0
.xdata$x:00003143                 db    0
.xdata$x:00003143 _xdata$x        ends
.xdata$x:00003143
.text:00003144 ; ===========================================================================
.text:00003144
.text:00003144 ; Segment type: Pure code
.text:00003144 ; Segment permissions: Read/Execute
.text:00003144 _text           segment para public 'CODE' use32
.text:00003144                 assume cs:_text
.text:00003144                 ;org 3144h
.text:00003144 ; COMDAT (pick any)
.text:00003144                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003144
.text:00003144 ; =============== S U B R O U T I N E =======================================
.text:00003144
.text:00003144 ; Attributes: bp-based frame
.text:00003144
.text:00003144 ; bool __thiscall NArchive::N7z::CCoderInfo::IsSimpleCoder(NArchive::N7z::CCoderInfo *__hidden this)
.text:00003144                 public ?IsSimpleCoder@CCoderInfo@N7z@NArchive@@QBE_NXZ
.text:00003144 ?IsSimpleCoder@CCoderInfo@N7z@NArchive@@QBE_NXZ proc near
.text:00003144                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+4BAp
.text:00003144
.text:00003144 var_4           = dword ptr -4
.text:00003144
.text:00003144                 push    ebp
.text:00003145                 mov     ebp, esp
.text:00003147                 push    ecx
.text:00003148                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000314F                 mov     [ebp+var_4], ecx
.text:00003152                 mov     eax, [ebp+var_4]
.text:00003155                 xor     ecx, ecx
.text:00003157                 cmp     dword ptr [eax+10h], 1
.text:0000315B                 setz    cl
.text:0000315E                 mov     al, cl
.text:00003160                 mov     esp, ebp
.text:00003162                 pop     ebp
.text:00003163                 retn
.text:00003163 ?IsSimpleCoder@CCoderInfo@N7z@NArchive@@QBE_NXZ endp
.text:00003163
.text:00003163 _text           ends
.text:00003163
.text:00003164 ; ===========================================================================
.text:00003164
.text:00003164 ; Segment type: Pure code
.text:00003164 ; Segment permissions: Read/Execute
.text:00003164 _text           segment para public 'CODE' use32
.text:00003164                 assume cs:_text
.text:00003164                 ;org 3164h
.text:00003164 ; COMDAT (pick any)
.text:00003164                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003164
.text:00003164 ; =============== S U B R O U T I N E =======================================
.text:00003164
.text:00003164 ; Attributes: bp-based frame
.text:00003164
.text:00003164 ; bool __thiscall NArchive::N7z::CFolder::IsDecodingSupported(NArchive::N7z::CFolder *__hidden this)
.text:00003164                 public ?IsDecodingSupported@CFolder@N7z@NArchive@@QBE_NXZ
.text:00003164 ?IsDecodingSupported@CFolder@N7z@NArchive@@QBE_NXZ proc near
.text:00003164                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+88p
.text:00003164
.text:00003164 var_4           = dword ptr -4
.text:00003164
.text:00003164                 push    ebp
.text:00003165                 mov     ebp, esp
.text:00003167                 push    ecx
.text:00003168                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000316F                 mov     [ebp+var_4], ecx
.text:00003172                 mov     ecx, [ebp+var_4]
.text:00003175                 call    ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size(void)
.text:0000317A                 mov     ecx, 20h ; ' '
.text:0000317F                 cmp     ecx, eax
.text:00003181                 sbb     eax, eax
.text:00003183                 add     eax, 1
.text:00003186                 add     esp, 4
.text:00003189                 cmp     ebp, esp
.text:0000318B                 call    __RTC_CheckEsp
.text:00003190                 mov     esp, ebp
.text:00003192                 pop     ebp
.text:00003193                 retn
.text:00003193 ?IsDecodingSupported@CFolder@N7z@NArchive@@QBE_NXZ endp
.text:00003193
.text:00003193 _text           ends
.text:00003193
.text:00003194 ; ===========================================================================
.text:00003194
.text:00003194 ; Segment type: Pure code
.text:00003194 ; Segment permissions: Read/Execute
.text:00003194 _text           segment para public 'CODE' use32
.text:00003194                 assume cs:_text
.text:00003194                 ;org 3194h
.text:00003194 ; COMDAT (pick any)
.text:00003194                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003194
.text:00003194 ; =============== S U B R O U T I N E =======================================
.text:00003194
.text:00003194 ; Attributes: bp-based frame
.text:00003194
.text:00003194 ; int __thiscall NArchive::N7z::CFolder::Find_in_PackStreams(NArchive::N7z::CFolder *this, unsigned int)
.text:00003194                 public ?Find_in_PackStreams@CFolder@N7z@NArchive@@QBEHI@Z
.text:00003194 ?Find_in_PackStreams@CFolder@N7z@NArchive@@QBEHI@Z proc near
.text:00003194                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+DBAp
.text:00003194
.text:00003194 var_8           = dword ptr -8
.text:00003194 var_4           = dword ptr -4
.text:00003194 arg_0           = dword ptr  8
.text:00003194
.text:00003194                 push    ebp
.text:00003195                 mov     ebp, esp
.text:00003197                 sub     esp, 8
.text:0000319A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000031A1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000031A8                 mov     [ebp+var_4], ecx
.text:000031AB                 mov     [ebp+var_8], 0
.text:000031B2                 jmp     short loc_31BD
.text:000031B4 ; ---------------------------------------------------------------------------
.text:000031B4
.text:000031B4 loc_31B4:                               ; CODE XREF: NArchive::N7z::CFolder::Find_in_PackStreams(uint):loc_31E8j
.text:000031B4                 mov     eax, [ebp+var_8]
.text:000031B7                 add     eax, 1
.text:000031BA                 mov     [ebp+var_8], eax
.text:000031BD
.text:000031BD loc_31BD:                               ; CODE XREF: NArchive::N7z::CFolder::Find_in_PackStreams(uint)+1Ej
.text:000031BD                 mov     ecx, [ebp+var_4]
.text:000031C0                 add     ecx, 10h
.text:000031C3                 call    ?Size@?$CObjArray2@I@@QBEIXZ ; CObjArray2<uint>::Size(void)
.text:000031C8                 cmp     [ebp+var_8], eax
.text:000031CB                 jnb     short loc_31EA
.text:000031CD                 mov     ecx, [ebp+var_4]
.text:000031D0                 add     ecx, 10h
.text:000031D3                 call    ??B?$CObjArray2@I@@QBEPBIXZ ; CObjArray2<uint>::operator uint const *(void)
.text:000031D8                 mov     ecx, [ebp+var_8]
.text:000031DB                 mov     edx, [eax+ecx*4]
.text:000031DE                 cmp     edx, [ebp+arg_0]
.text:000031E1                 jnz     short loc_31E8
.text:000031E3                 mov     eax, [ebp+var_8]
.text:000031E6                 jmp     short loc_31ED
.text:000031E8 ; ---------------------------------------------------------------------------
.text:000031E8
.text:000031E8 loc_31E8:                               ; CODE XREF: NArchive::N7z::CFolder::Find_in_PackStreams(uint)+4Dj
.text:000031E8                 jmp     short loc_31B4
.text:000031EA ; ---------------------------------------------------------------------------
.text:000031EA
.text:000031EA loc_31EA:                               ; CODE XREF: NArchive::N7z::CFolder::Find_in_PackStreams(uint)+37j
.text:000031EA                 or      eax, 0FFFFFFFFh
.text:000031ED
.text:000031ED loc_31ED:                               ; CODE XREF: NArchive::N7z::CFolder::Find_in_PackStreams(uint)+52j
.text:000031ED                 add     esp, 8
.text:000031F0                 cmp     ebp, esp
.text:000031F2                 call    __RTC_CheckEsp
.text:000031F7                 mov     esp, ebp
.text:000031F9                 pop     ebp
.text:000031FA                 retn    4
.text:000031FA ?Find_in_PackStreams@CFolder@N7z@NArchive@@QBEHI@Z endp
.text:000031FA
.text:000031FA ; ---------------------------------------------------------------------------
.text:000031FD                 align 10h
.text:000031FD _text           ends
.text:000031FD
.text:00003200 ; ===========================================================================
.text:00003200
.text:00003200 ; Segment type: Pure code
.text:00003200 ; Segment permissions: Read/Execute
.text:00003200 _text           segment para public 'CODE' use32
.text:00003200                 assume cs:_text
.text:00003200                 ;org 3200h
.text:00003200 ; COMDAT (pick any)
.text:00003200                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003200
.text:00003200 ; =============== S U B R O U T I N E =======================================
.text:00003200
.text:00003200 ; Attributes: bp-based frame
.text:00003200
.text:00003200 ; int __thiscall NArchive::N7z::CFolder::FindBond_for_PackStream(NArchive::N7z::CFolder *this, unsigned int)
.text:00003200                 public ?FindBond_for_PackStream@CFolder@N7z@NArchive@@QBEHI@Z
.text:00003200 ?FindBond_for_PackStream@CFolder@N7z@NArchive@@QBEHI@Z proc near
.text:00003200                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+D5Bp
.text:00003200
.text:00003200 var_8           = dword ptr -8
.text:00003200 var_4           = dword ptr -4
.text:00003200 arg_0           = dword ptr  8
.text:00003200
.text:00003200                 push    ebp
.text:00003201                 mov     ebp, esp
.text:00003203                 sub     esp, 8
.text:00003206                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000320D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003214                 mov     [ebp+var_4], ecx
.text:00003217                 mov     [ebp+var_8], 0
.text:0000321E                 jmp     short loc_3229
.text:00003220 ; ---------------------------------------------------------------------------
.text:00003220
.text:00003220 loc_3220:                               ; CODE XREF: NArchive::N7z::CFolder::FindBond_for_PackStream(uint):loc_3254j
.text:00003220                 mov     eax, [ebp+var_8]
.text:00003223                 add     eax, 1
.text:00003226                 mov     [ebp+var_8], eax
.text:00003229
.text:00003229 loc_3229:                               ; CODE XREF: NArchive::N7z::CFolder::FindBond_for_PackStream(uint)+1Ej
.text:00003229                 mov     ecx, [ebp+var_4]
.text:0000322C                 add     ecx, 8
.text:0000322F                 call    ?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CBond>::Size(void)
.text:00003234                 cmp     [ebp+var_8], eax
.text:00003237                 jnb     short loc_3256
.text:00003239                 mov     ecx, [ebp+var_4]
.text:0000323C                 add     ecx, 8
.text:0000323F                 call    ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond const *(void)
.text:00003244                 mov     ecx, [ebp+var_8]
.text:00003247                 mov     edx, [eax+ecx*8]
.text:0000324A                 cmp     edx, [ebp+arg_0]
.text:0000324D                 jnz     short loc_3254
.text:0000324F                 mov     eax, [ebp+var_8]
.text:00003252                 jmp     short loc_3259
.text:00003254 ; ---------------------------------------------------------------------------
.text:00003254
.text:00003254 loc_3254:                               ; CODE XREF: NArchive::N7z::CFolder::FindBond_for_PackStream(uint)+4Dj
.text:00003254                 jmp     short loc_3220
.text:00003256 ; ---------------------------------------------------------------------------
.text:00003256
.text:00003256 loc_3256:                               ; CODE XREF: NArchive::N7z::CFolder::FindBond_for_PackStream(uint)+37j
.text:00003256                 or      eax, 0FFFFFFFFh
.text:00003259
.text:00003259 loc_3259:                               ; CODE XREF: NArchive::N7z::CFolder::FindBond_for_PackStream(uint)+52j
.text:00003259                 add     esp, 8
.text:0000325C                 cmp     ebp, esp
.text:0000325E                 call    __RTC_CheckEsp
.text:00003263                 mov     esp, ebp
.text:00003265                 pop     ebp
.text:00003266                 retn    4
.text:00003266 ?FindBond_for_PackStream@CFolder@N7z@NArchive@@QBEHI@Z endp
.text:00003266
.text:00003266 ; ---------------------------------------------------------------------------
.text:00003269                 align 4
.text:00003269 _text           ends
.text:00003269
.text:0000326C ; ===========================================================================
.text:0000326C
.text:0000326C ; Segment type: Pure code
.text:0000326C ; Segment permissions: Read/Execute
.text:0000326C _text           segment para public 'CODE' use32
.text:0000326C                 assume cs:_text
.text:0000326C                 ;org 326Ch
.text:0000326C ; COMDAT (pick any)
.text:0000326C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000326C
.text:0000326C ; =============== S U B R O U T I N E =======================================
.text:0000326C
.text:0000326C ; Attributes: bp-based frame
.text:0000326C
.text:0000326C ; void __thiscall NArchive::N7z::CFolders::ParseFolderEx(NArchive::N7z::CFolders *this, unsigned int, struct NArchive::N7z::CFolderEx *)
.text:0000326C                 public ?ParseFolderEx@CFolders@N7z@NArchive@@QBEXIAAUCFolderEx@23@@Z
.text:0000326C ?ParseFolderEx@CFolders@N7z@NArchive@@QBEXIAAUCFolderEx@23@@Z proc near
.text:0000326C                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+80p
.text:0000326C
.text:0000326C var_4           = dword ptr -4
.text:0000326C arg_0           = dword ptr  8
.text:0000326C arg_4           = dword ptr  0Ch
.text:0000326C
.text:0000326C                 push    ebp
.text:0000326D                 mov     ebp, esp
.text:0000326F                 push    ecx
.text:00003270                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003277                 mov     [ebp+var_4], ecx
.text:0000327A                 mov     eax, [ebp+arg_4]
.text:0000327D                 push    eax             ; struct NArchive::N7z::CFolder *
.text:0000327E                 mov     ecx, [ebp+arg_0]
.text:00003281                 push    ecx             ; unsigned int
.text:00003282                 mov     ecx, [ebp+var_4] ; this
.text:00003285                 call    ?ParseFolderInfo@CFolders@N7z@NArchive@@QBEXIAAUCFolder@23@@Z ; NArchive::N7z::CFolders::ParseFolderInfo(uint,NArchive::N7z::CFolder &)
.text:0000328A                 mov     ecx, [ebp+var_4]
.text:0000328D                 add     ecx, 34h ; '4'
.text:00003290                 call    ??B?$CObjArray@E@@QBEPBEXZ ; CObjArray<uchar>::operator uchar const *(void)
.text:00003295                 mov     edx, [ebp+arg_0]
.text:00003298                 movzx   eax, byte ptr [eax+edx]
.text:0000329C                 mov     ecx, [ebp+arg_4]
.text:0000329F                 mov     [ecx+18h], eax
.text:000032A2                 add     esp, 4
.text:000032A5                 cmp     ebp, esp
.text:000032A7                 call    __RTC_CheckEsp
.text:000032AC                 mov     esp, ebp
.text:000032AE                 pop     ebp
.text:000032AF                 retn    8
.text:000032AF ?ParseFolderEx@CFolders@N7z@NArchive@@QBEXIAAUCFolderEx@23@@Z endp
.text:000032AF
.text:000032AF ; ---------------------------------------------------------------------------
.text:000032B2                 align 4
.text:000032B2 _text           ends
.text:000032B2
.text:000032B4 ; ===========================================================================
.text:000032B4
.text:000032B4 ; Segment type: Pure code
.text:000032B4 ; Segment permissions: Read/Execute
.text:000032B4 _text           segment para public 'CODE' use32
.text:000032B4                 assume cs:_text
.text:000032B4                 ;org 32B4h
.text:000032B4 ; COMDAT (pick any)
.text:000032B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000032B4
.text:000032B4 ; =============== S U B R O U T I N E =======================================
.text:000032B4
.text:000032B4 ; Attributes: bp-based frame
.text:000032B4
.text:000032B4 ; unsigned __int64 __thiscall NArchive::N7z::CFolders::GetFolderUnpackSize(NArchive::N7z::CFolders *this, unsigned int)
.text:000032B4                 public ?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z
.text:000032B4 ?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z proc near
.text:000032B4                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+123p
.text:000032B4
.text:000032B4 var_4           = dword ptr -4
.text:000032B4 arg_0           = dword ptr  8
.text:000032B4
.text:000032B4                 push    ebp
.text:000032B5                 mov     ebp, esp
.text:000032B7                 push    ecx
.text:000032B8                 push    esi
.text:000032B9                 push    edi
.text:000032BA                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000032C1                 mov     [ebp+var_4], ecx
.text:000032C4                 mov     ecx, [ebp+var_4]
.text:000032C7                 add     ecx, 28h ; '('
.text:000032CA                 call    ??B?$CObjArray@_K@@QBEPB_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 const *(void)
.text:000032CF                 mov     esi, eax
.text:000032D1                 mov     ecx, [ebp+var_4]
.text:000032D4                 add     ecx, 2Ch ; ','
.text:000032D7                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:000032DC                 mov     edi, eax
.text:000032DE                 mov     ecx, [ebp+var_4]
.text:000032E1                 add     ecx, 34h ; '4'
.text:000032E4                 call    ??B?$CObjArray@E@@QBEPBEXZ ; CObjArray<uchar>::operator uchar const *(void)
.text:000032E9                 mov     ecx, [ebp+arg_0]
.text:000032EC                 movzx   edx, byte ptr [eax+ecx]
.text:000032F0                 mov     eax, [ebp+arg_0]
.text:000032F3                 add     edx, [edi+eax*4]
.text:000032F6                 mov     eax, [esi+edx*8]
.text:000032F9                 mov     edx, [esi+edx*8+4]
.text:000032FD                 pop     edi
.text:000032FE                 pop     esi
.text:000032FF                 add     esp, 4
.text:00003302                 cmp     ebp, esp
.text:00003304                 call    __RTC_CheckEsp
.text:00003309                 mov     esp, ebp
.text:0000330B                 pop     ebp
.text:0000330C                 retn    4
.text:0000330C ?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z endp
.text:0000330C
.text:0000330C ; ---------------------------------------------------------------------------
.text:0000330F                 align 10h
.text:0000330F _text           ends
.text:0000330F
.text:00003310 ; ===========================================================================
.text:00003310
.text:00003310 ; Segment type: Pure code
.text:00003310 ; Segment permissions: Read/Execute
.text:00003310 _text           segment para public 'CODE' use32
.text:00003310                 assume cs:_text
.text:00003310                 ;org 3310h
.text:00003310 ; COMDAT (pick any)
.text:00003310                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003310
.text:00003310 ; =============== S U B R O U T I N E =======================================
.text:00003310
.text:00003310 ; Attributes: bp-based frame
.text:00003310
.text:00003310 ; _DWORD __thiscall NArchive::N7z::CDecProgress::CDecProgress(NArchive::N7z::CDecProgress *this, struct ICompressProgressInfo *)
.text:00003310                 public ??0CDecProgress@N7z@NArchive@@QAE@PAUICompressProgressInfo@@@Z
.text:00003310 ??0CDecProgress@N7z@NArchive@@QAE@PAUICompressProgressInfo@@@Z proc near
.text:00003310                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+14B0p
.text:00003310
.text:00003310 var_4           = dword ptr -4
.text:00003310 arg_0           = dword ptr  8
.text:00003310
.text:00003310                 push    ebp
.text:00003311                 mov     ebp, esp
.text:00003313                 push    ecx
.text:00003314                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000331B                 mov     [ebp+var_4], ecx
.text:0000331E                 mov     ecx, [ebp+var_4] ; this
.text:00003321                 call    ??0ICompressProgressInfo@@QAE@XZ ; ICompressProgressInfo::ICompressProgressInfo(void)
.text:00003326                 mov     ecx, [ebp+var_4]
.text:00003329                 add     ecx, 4          ; this
.text:0000332C                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00003331                 mov     eax, [ebp+var_4]
.text:00003334                 mov     dword ptr [eax], offset ??_7CDecProgress@N7z@NArchive@@6B@ ; const NArchive::N7z::CDecProgress::`vftable'
.text:0000333A                 mov     ecx, [ebp+arg_0]
.text:0000333D                 push    ecx
.text:0000333E                 mov     ecx, [ebp+var_4]
.text:00003341                 add     ecx, 8
.text:00003344                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)
.text:00003349                 mov     eax, [ebp+var_4]
.text:0000334C                 add     esp, 4
.text:0000334F                 cmp     ebp, esp
.text:00003351                 call    __RTC_CheckEsp
.text:00003356                 mov     esp, ebp
.text:00003358                 pop     ebp
.text:00003359                 retn    4
.text:00003359 ??0CDecProgress@N7z@NArchive@@QAE@PAUICompressProgressInfo@@@Z endp
.text:00003359
.text:00003359 _text           ends
.text:00003359
.rdata:0000335C ; ===========================================================================
.rdata:0000335C
.rdata:0000335C ; Segment type: Pure data
.rdata:0000335C ; Segment permissions: Read
.rdata:0000335C _rdata          segment dword public 'DATA' use32
.rdata:0000335C                 assume cs:_rdata
.rdata:0000335C                 ;org 335Ch
.rdata:0000335C ; COMDAT (pick largest)
.rdata:0000335C                 dd offset ??_R4CDecProgress@N7z@NArchive@@6B@ ; const NArchive::N7z::CDecProgress::`RTTI Complete Object Locator'
.rdata:00003360                 public ??_7CDecProgress@N7z@NArchive@@6B@
.rdata:00003360 ; const NArchive::N7z::CDecProgress::`vftable'
.rdata:00003360 ??_7CDecProgress@N7z@NArchive@@6B@ dd offset ?QueryInterface@CDecProgress@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:00003360                                         ; DATA XREF: NArchive::N7z::CDecProgress::CDecProgress(ICompressProgressInfo *)+24o
.rdata:00003360                                         ; NArchive::N7z::CDecProgress::QueryInterface(_GUID const &,void * *)
.rdata:00003364                 dd offset ?AddRef@CDecProgress@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CDecProgress::AddRef(void)
.rdata:00003368                 dd offset ?Release@CDecProgress@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CDecProgress::Release(void)
.rdata:0000336C                 dd offset ?SetRatioInfo@CDecProgress@N7z@NArchive@@UAGJPB_K0@Z ; NArchive::N7z::CDecProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)
.rdata:0000336C _rdata          ends
.rdata:0000336C
.rdata$r:00003370 ; ===========================================================================
.rdata$r:00003370
.rdata$r:00003370 ; Segment type: Pure data
.rdata$r:00003370 ; Segment permissions: Read
.rdata$r:00003370 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003370                 assume cs:_rdata$r
.rdata$r:00003370                 ;org 3370h
.rdata$r:00003370 ; COMDAT (pick any)
.rdata$r:00003370                 public ??_R4CDecProgress@N7z@NArchive@@6B@
.rdata$r:00003370 ; const NArchive::N7z::CDecProgress::`RTTI Complete Object Locator'
.rdata$r:00003370 ??_R4CDecProgress@N7z@NArchive@@6B@ db    0 ; DATA XREF: .rdata:0000335Co
.rdata$r:00003371                 db    0
.rdata$r:00003372                 db    0
.rdata$r:00003373                 db    0
.rdata$r:00003374                 db    0
.rdata$r:00003375                 db    0
.rdata$r:00003376                 db    0
.rdata$r:00003377                 db    0
.rdata$r:00003378                 db    0
.rdata$r:00003379                 db    0
.rdata$r:0000337A                 db    0
.rdata$r:0000337B                 db    0
.rdata$r:0000337C                 dd offset ??_R0?AVCDecProgress@N7z@NArchive@@@8 ; NArchive::N7z::CDecProgress `RTTI Type Descriptor'
.rdata$r:00003380                 dd offset ??_R3CDecProgress@N7z@NArchive@@8 ; NArchive::N7z::CDecProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003380 _rdata$r        ends
.rdata$r:00003380
.data:00003384 ; ===========================================================================
.data:00003384
.data:00003384 ; Segment type: Pure data
.data:00003384 ; Segment permissions: Read/Write
.data:00003384 _data           segment dword public 'DATA' use32
.data:00003384                 assume cs:_data
.data:00003384                 ;org 3384h
.data:00003384 ; COMDAT (pick any)
.data:00003384                 public ??_R0?AVCDecProgress@N7z@NArchive@@@8
.data:00003384 ; class NArchive::N7z::CDecProgress `RTTI Type Descriptor'
.data:00003384 ??_R0?AVCDecProgress@N7z@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00003384                                         ; DATA XREF: .rdata$r:0000337Co
.data:00003384                                         ; .rdata$r:NArchive::N7z::CDecProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003384                                         ; const type_info::`vftable'
.data:00003388                 db    0
.data:00003389                 db    0
.data:0000338A                 db    0
.data:0000338B                 db    0
.data:0000338C                 db  2Eh ; .
.data:0000338D                 db  3Fh ; ?
.data:0000338E                 db  41h ; A
.data:0000338F                 db  56h ; V
.data:00003390                 db  43h ; C
.data:00003391                 db  44h ; D
.data:00003392                 db  65h ; e
.data:00003393                 db  63h ; c
.data:00003394                 db  50h ; P
.data:00003395                 db  72h ; r
.data:00003396                 db  6Fh ; o
.data:00003397                 db  67h ; g
.data:00003398                 db  72h ; r
.data:00003399                 db  65h ; e
.data:0000339A                 db  73h ; s
.data:0000339B                 db  73h ; s
.data:0000339C                 db  40h ; @
.data:0000339D                 db  4Eh ; N
.data:0000339E                 db  37h ; 7
.data:0000339F                 db  7Ah ; z
.data:000033A0                 db  40h ; @
.data:000033A1                 db  4Eh ; N
.data:000033A2                 db  41h ; A
.data:000033A3                 db  72h ; r
.data:000033A4                 db  63h ; c
.data:000033A5                 db  68h ; h
.data:000033A6                 db  69h ; i
.data:000033A7                 db  76h ; v
.data:000033A8                 db  65h ; e
.data:000033A9                 db  40h ; @
.data:000033AA                 db  40h ; @
.data:000033AB                 db    0
.data:000033AB _data           ends
.data:000033AB
.rdata$r:000033AC ; ===========================================================================
.rdata$r:000033AC
.rdata$r:000033AC ; Segment type: Pure data
.rdata$r:000033AC ; Segment permissions: Read
.rdata$r:000033AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000033AC                 assume cs:_rdata$r
.rdata$r:000033AC                 ;org 33ACh
.rdata$r:000033AC ; COMDAT (pick any)
.rdata$r:000033AC                 public ??_R3CDecProgress@N7z@NArchive@@8
.rdata$r:000033AC ; NArchive::N7z::CDecProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:000033AC ??_R3CDecProgress@N7z@NArchive@@8 db    0 ; DATA XREF: .rdata$r:00003380o
.rdata$r:000033AC                                         ; .rdata$r:000033E8o
.rdata$r:000033AD                 db    0
.rdata$r:000033AE                 db    0
.rdata$r:000033AF                 db    0
.rdata$r:000033B0                 db    1
.rdata$r:000033B1                 db    0
.rdata$r:000033B2                 db    0
.rdata$r:000033B3                 db    0
.rdata$r:000033B4                 db    4
.rdata$r:000033B5                 db    0
.rdata$r:000033B6                 db    0
.rdata$r:000033B7                 db    0
.rdata$r:000033B8                 dd offset ??_R2CDecProgress@N7z@NArchive@@8 ; NArchive::N7z::CDecProgress::`RTTI Base Class Array'
.rdata$r:000033B8 _rdata$r        ends
.rdata$r:000033B8
.rdata$r:000033BC ; ===========================================================================
.rdata$r:000033BC
.rdata$r:000033BC ; Segment type: Pure data
.rdata$r:000033BC ; Segment permissions: Read
.rdata$r:000033BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000033BC                 assume cs:_rdata$r
.rdata$r:000033BC                 ;org 33BCh
.rdata$r:000033BC ; COMDAT (pick any)
.rdata$r:000033BC                 public ??_R2CDecProgress@N7z@NArchive@@8
.rdata$r:000033BC ; NArchive::N7z::CDecProgress::`RTTI Base Class Array'
.rdata$r:000033BC ??_R2CDecProgress@N7z@NArchive@@8 dd offset ??_R1A@?0A@EA@CDecProgress@N7z@NArchive@@8
.rdata$r:000033BC                                         ; DATA XREF: .rdata$r:000033B8o
.rdata$r:000033BC                                         ; NArchive::N7z::CDecProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000033C0                 dd offset ??_R1A@?0A@EA@ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000033C4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000033C8                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000033CC                 db    0
.rdata$r:000033CD                 align 10h
.rdata$r:000033CD _rdata$r        ends
.rdata$r:000033CD
.rdata$r:000033D0 ; ===========================================================================
.rdata$r:000033D0
.rdata$r:000033D0 ; Segment type: Pure data
.rdata$r:000033D0 ; Segment permissions: Read
.rdata$r:000033D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000033D0                 assume cs:_rdata$r
.rdata$r:000033D0                 ;org 33D0h
.rdata$r:000033D0 ; COMDAT (pick any)
.rdata$r:000033D0                 public ??_R1A@?0A@EA@CDecProgress@N7z@NArchive@@8
.rdata$r:000033D0 ; NArchive::N7z::CDecProgress::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000033D0 ??_R1A@?0A@EA@CDecProgress@N7z@NArchive@@8 dd offset ??_R0?AVCDecProgress@N7z@NArchive@@@8
.rdata$r:000033D0                                         ; DATA XREF: .rdata$r:NArchive::N7z::CDecProgress::`RTTI Base Class Array'o
.rdata$r:000033D0                                         ; NArchive::N7z::CDecProgress `RTTI Type Descriptor'
.rdata$r:000033D4                 db    3
.rdata$r:000033D5                 db    0
.rdata$r:000033D6                 db    0
.rdata$r:000033D7                 db    0
.rdata$r:000033D8                 db    0
.rdata$r:000033D9                 db    0
.rdata$r:000033DA                 db    0
.rdata$r:000033DB                 db    0
.rdata$r:000033DC                 db 0FFh
.rdata$r:000033DD                 db 0FFh
.rdata$r:000033DE                 db 0FFh
.rdata$r:000033DF                 db 0FFh
.rdata$r:000033E0                 db    0
.rdata$r:000033E1                 db    0
.rdata$r:000033E2                 db    0
.rdata$r:000033E3                 db    0
.rdata$r:000033E4                 db  40h ; @
.rdata$r:000033E5                 db    0
.rdata$r:000033E6                 db    0
.rdata$r:000033E7                 db    0
.rdata$r:000033E8                 dd offset ??_R3CDecProgress@N7z@NArchive@@8 ; NArchive::N7z::CDecProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:000033E8 _rdata$r        ends
.rdata$r:000033E8
.rdata$r:000033EC ; ===========================================================================
.rdata$r:000033EC
.rdata$r:000033EC ; Segment type: Pure data
.rdata$r:000033EC ; Segment permissions: Read
.rdata$r:000033EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000033EC                 assume cs:_rdata$r
.rdata$r:000033EC                 ;org 33ECh
.rdata$r:000033EC ; COMDAT (pick any)
.rdata$r:000033EC                 public ??_R1A@?0A@EA@ICompressProgressInfo@@8
.rdata$r:000033EC ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000033EC ??_R1A@?0A@EA@ICompressProgressInfo@@8 dd offset ??_R0?AUICompressProgressInfo@@@8
.rdata$r:000033EC                                         ; DATA XREF: .rdata$r:000033C0o
.rdata$r:000033EC                                         ; .rdata$r:ICompressProgressInfo::`RTTI Base Class Array'o
.rdata$r:000033EC                                         ; ICompressProgressInfo `RTTI Type Descriptor'
.rdata$r:000033F0                 db    1
.rdata$r:000033F1                 db    0
.rdata$r:000033F2                 db    0
.rdata$r:000033F3                 db    0
.rdata$r:000033F4                 db    0
.rdata$r:000033F5                 db    0
.rdata$r:000033F6                 db    0
.rdata$r:000033F7                 db    0
.rdata$r:000033F8                 db 0FFh
.rdata$r:000033F9                 db 0FFh
.rdata$r:000033FA                 db 0FFh
.rdata$r:000033FB                 db 0FFh
.rdata$r:000033FC                 db    0
.rdata$r:000033FD                 db    0
.rdata$r:000033FE                 db    0
.rdata$r:000033FF                 db    0
.rdata$r:00003400                 db  40h ; @
.rdata$r:00003401                 db    0
.rdata$r:00003402                 db    0
.rdata$r:00003403                 db    0
.rdata$r:00003404                 dd offset ??_R3ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003404 _rdata$r        ends
.rdata$r:00003404
.data:00003408 ; ===========================================================================
.data:00003408
.data:00003408 ; Segment type: Pure data
.data:00003408 ; Segment permissions: Read/Write
.data:00003408 _data           segment dword public 'DATA' use32
.data:00003408                 assume cs:_data
.data:00003408                 ;org 3408h
.data:00003408 ; COMDAT (pick any)
.data:00003408                 public ??_R0?AUICompressProgressInfo@@@8
.data:00003408 ; struct ICompressProgressInfo `RTTI Type Descriptor'
.data:00003408 ??_R0?AUICompressProgressInfo@@@8 dd offset ??_7type_info@@6B@
.data:00003408                                         ; DATA XREF: .rdata$r:ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003408                                         ; .rdata$r:000035BCo
.data:00003408                                         ; const type_info::`vftable'
.data:0000340C                 align 10h
.data:00003410 a_?auicompressp db '.?AUICompressProgressInfo@@',0
.data:00003410 _data           ends
.data:00003410
.rdata$r:0000342C ; ===========================================================================
.rdata$r:0000342C
.rdata$r:0000342C ; Segment type: Pure data
.rdata$r:0000342C ; Segment permissions: Read
.rdata$r:0000342C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000342C                 assume cs:_rdata$r
.rdata$r:0000342C                 ;org 342Ch
.rdata$r:0000342C ; COMDAT (pick any)
.rdata$r:0000342C                 public ??_R3ICompressProgressInfo@@8
.rdata$r:0000342C ; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000342C ??_R3ICompressProgressInfo@@8 db    0   ; DATA XREF: .rdata$r:00003404o
.rdata$r:0000342C                                         ; .rdata$r:000035C0o
.rdata$r:0000342D                 db    0
.rdata$r:0000342E                 db    0
.rdata$r:0000342F                 db    0
.rdata$r:00003430                 db    0
.rdata$r:00003431                 db    0
.rdata$r:00003432                 db    0
.rdata$r:00003433                 db    0
.rdata$r:00003434                 db    2
.rdata$r:00003435                 db    0
.rdata$r:00003436                 db    0
.rdata$r:00003437                 db    0
.rdata$r:00003438                 dd offset ??_R2ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Base Class Array'
.rdata$r:00003438 _rdata$r        ends
.rdata$r:00003438
.rdata$r:0000343C ; ===========================================================================
.rdata$r:0000343C
.rdata$r:0000343C ; Segment type: Pure data
.rdata$r:0000343C ; Segment permissions: Read
.rdata$r:0000343C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000343C                 assume cs:_rdata$r
.rdata$r:0000343C                 ;org 343Ch
.rdata$r:0000343C ; COMDAT (pick any)
.rdata$r:0000343C                 public ??_R2ICompressProgressInfo@@8
.rdata$r:0000343C ; ICompressProgressInfo::`RTTI Base Class Array'
.rdata$r:0000343C ??_R2ICompressProgressInfo@@8 dd offset ??_R1A@?0A@EA@ICompressProgressInfo@@8
.rdata$r:0000343C                                         ; DATA XREF: .rdata$r:00003438o
.rdata$r:0000343C                                         ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003440                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003444                 db    0
.rdata$r:00003445                 align 4
.rdata$r:00003445 _rdata$r        ends
.rdata$r:00003445
.rdata$r:00003448 ; ===========================================================================
.rdata$r:00003448
.rdata$r:00003448 ; Segment type: Pure data
.rdata$r:00003448 ; Segment permissions: Read
.rdata$r:00003448 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003448                 assume cs:_rdata$r
.rdata$r:00003448                 ;org 3448h
.rdata$r:00003448 ; COMDAT (pick any)
.rdata$r:00003448                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00003448 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00003448 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00003448                                         ; DATA XREF: .rdata$r:000033C8o
.rdata$r:00003448                                         ; .rdata$r:00003B58o ...
.rdata$r:00003448                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:0000344C                 align 10h
.rdata$r:00003450                 db    4
.rdata$r:00003451                 db    0
.rdata$r:00003452                 db    0
.rdata$r:00003453                 db    0
.rdata$r:00003454                 db 0FFh
.rdata$r:00003455                 db 0FFh
.rdata$r:00003456                 db 0FFh
.rdata$r:00003457                 db 0FFh
.rdata$r:00003458                 db    0
.rdata$r:00003459                 db    0
.rdata$r:0000345A                 db    0
.rdata$r:0000345B                 db    0
.rdata$r:0000345C                 db  40h ; @
.rdata$r:0000345D                 db    0
.rdata$r:0000345E                 db    0
.rdata$r:0000345F                 db    0
.rdata$r:00003460                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003460 _rdata$r        ends
.rdata$r:00003460
.text:00003464 ; ===========================================================================
.text:00003464
.text:00003464 ; Segment type: Pure code
.text:00003464 ; Segment permissions: Read/Execute
.text:00003464 _text           segment para public 'CODE' use32
.text:00003464                 assume cs:_text
.text:00003464                 ;org 3464h
.text:00003464 ; COMDAT (pick any)
.text:00003464                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003464
.text:00003464 ; =============== S U B R O U T I N E =======================================
.text:00003464
.text:00003464 ; Attributes: bp-based frame
.text:00003464
.text:00003464 ; __int32 __stdcall NArchive::N7z::CDecProgress::QueryInterface(NArchive::N7z::CDecProgress *this, const struct _GUID *Buf1, void **)
.text:00003464                 public ?QueryInterface@CDecProgress@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00003464 ?QueryInterface@CDecProgress@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00003464                                         ; DATA XREF: .rdata:const NArchive::N7z::CDecProgress::`vftable'o
.text:00003464
.text:00003464 this            = dword ptr  8
.text:00003464 Buf1            = dword ptr  0Ch
.text:00003464 arg_8           = dword ptr  10h
.text:00003464
.text:00003464                 push    ebp
.text:00003465                 mov     ebp, esp
.text:00003467                 mov     eax, [ebp+arg_8]
.text:0000346A                 mov     dword ptr [eax], 0
.text:00003470                 push    offset _IID_IUnknown ; Buf2
.text:00003475                 mov     ecx, [ebp+Buf1]
.text:00003478                 push    ecx             ; Buf1
.text:00003479                 call    ___@8           ; __(x,x)
.text:0000347E                 test    eax, eax
.text:00003480                 jz      short loc_348C
.text:00003482                 mov     edx, [ebp+arg_8]
.text:00003485                 mov     eax, [ebp+this]
.text:00003488                 mov     [edx], eax
.text:0000348A                 jmp     short loc_34AF
.text:0000348C ; ---------------------------------------------------------------------------
.text:0000348C
.text:0000348C loc_348C:                               ; CODE XREF: NArchive::N7z::CDecProgress::QueryInterface(_GUID const &,void * *)+1Cj
.text:0000348C                 push    offset _IID_ICompressProgressInfo ; Buf2
.text:00003491                 mov     ecx, [ebp+Buf1]
.text:00003494                 push    ecx             ; Buf1
.text:00003495                 call    ___@8           ; __(x,x)
.text:0000349A                 test    eax, eax
.text:0000349C                 jz      short loc_34A8
.text:0000349E                 mov     edx, [ebp+arg_8]
.text:000034A1                 mov     eax, [ebp+this]
.text:000034A4                 mov     [edx], eax
.text:000034A6                 jmp     short loc_34AF
.text:000034A8 ; ---------------------------------------------------------------------------
.text:000034A8
.text:000034A8 loc_34A8:                               ; CODE XREF: NArchive::N7z::CDecProgress::QueryInterface(_GUID const &,void * *)+38j
.text:000034A8                 mov     eax, 80004002h
.text:000034AD                 jmp     short loc_34C0
.text:000034AF ; ---------------------------------------------------------------------------
.text:000034AF
.text:000034AF loc_34AF:                               ; CODE XREF: NArchive::N7z::CDecProgress::QueryInterface(_GUID const &,void * *)+26j
.text:000034AF                                         ; NArchive::N7z::CDecProgress::QueryInterface(_GUID const &,void * *)+42j
.text:000034AF                 mov     ecx, [ebp+this]
.text:000034B2                 mov     edx, [ecx+4]
.text:000034B5                 add     edx, 1
.text:000034B8                 mov     eax, [ebp+this]
.text:000034BB                 mov     [eax+4], edx
.text:000034BE                 xor     eax, eax
.text:000034C0
.text:000034C0 loc_34C0:                               ; CODE XREF: NArchive::N7z::CDecProgress::QueryInterface(_GUID const &,void * *)+49j
.text:000034C0                 cmp     ebp, esp
.text:000034C2                 call    __RTC_CheckEsp
.text:000034C7                 pop     ebp
.text:000034C8                 retn    0Ch
.text:000034C8 ?QueryInterface@CDecProgress@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:000034C8
.text:000034C8 ; ---------------------------------------------------------------------------
.text:000034CB                 align 4
.text:000034CB _text           ends
.text:000034CB
.text:000034CC ; ===========================================================================
.text:000034CC
.text:000034CC ; Segment type: Pure code
.text:000034CC ; Segment permissions: Read/Execute
.text:000034CC _text           segment para public 'CODE' use32
.text:000034CC                 assume cs:_text
.text:000034CC                 ;org 34CCh
.text:000034CC ; COMDAT (pick any)
.text:000034CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000034CC
.text:000034CC ; =============== S U B R O U T I N E =======================================
.text:000034CC
.text:000034CC ; Attributes: bp-based frame
.text:000034CC
.text:000034CC ; unsigned __int32 __stdcall NArchive::N7z::CDecProgress::AddRef(NArchive::N7z::CDecProgress *this)
.text:000034CC                 public ?AddRef@CDecProgress@N7z@NArchive@@UAGKXZ
.text:000034CC ?AddRef@CDecProgress@N7z@NArchive@@UAGKXZ proc near
.text:000034CC                                         ; DATA XREF: .rdata:00003364o
.text:000034CC
.text:000034CC var_4           = dword ptr -4
.text:000034CC this            = dword ptr  8
.text:000034CC
.text:000034CC                 push    ebp
.text:000034CD                 mov     ebp, esp
.text:000034CF                 push    ecx
.text:000034D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034D7                 mov     eax, [ebp+this]
.text:000034DA                 mov     ecx, [eax+4]
.text:000034DD                 add     ecx, 1
.text:000034E0                 mov     [ebp+var_4], ecx
.text:000034E3                 mov     edx, [ebp+this]
.text:000034E6                 mov     eax, [ebp+var_4]
.text:000034E9                 mov     [edx+4], eax
.text:000034EC                 mov     eax, [ebp+var_4]
.text:000034EF                 mov     esp, ebp
.text:000034F1                 pop     ebp
.text:000034F2                 retn    4
.text:000034F2 ?AddRef@CDecProgress@N7z@NArchive@@UAGKXZ endp
.text:000034F2
.text:000034F2 ; ---------------------------------------------------------------------------
.text:000034F5                 align 4
.text:000034F5 _text           ends
.text:000034F5
.text:000034F8 ; ===========================================================================
.text:000034F8
.text:000034F8 ; Segment type: Pure code
.text:000034F8 ; Segment permissions: Read/Execute
.text:000034F8 _text           segment para public 'CODE' use32
.text:000034F8                 assume cs:_text
.text:000034F8                 ;org 34F8h
.text:000034F8 ; COMDAT (pick any)
.text:000034F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000034F8
.text:000034F8 ; =============== S U B R O U T I N E =======================================
.text:000034F8
.text:000034F8 ; Attributes: bp-based frame
.text:000034F8
.text:000034F8 ; unsigned __int32 __stdcall NArchive::N7z::CDecProgress::Release(NArchive::N7z::CDecProgress *this)
.text:000034F8                 public ?Release@CDecProgress@N7z@NArchive@@UAGKXZ
.text:000034F8 ?Release@CDecProgress@N7z@NArchive@@UAGKXZ proc near
.text:000034F8                                         ; DATA XREF: .rdata:00003368o
.text:000034F8
.text:000034F8 var_10          = dword ptr -10h
.text:000034F8 var_C           = dword ptr -0Ch
.text:000034F8 var_8           = dword ptr -8
.text:000034F8 var_4           = dword ptr -4
.text:000034F8 this            = dword ptr  8
.text:000034F8
.text:000034F8                 push    ebp
.text:000034F9                 mov     ebp, esp
.text:000034FB                 sub     esp, 10h
.text:000034FE                 mov     eax, 0CCCCCCCCh
.text:00003503                 mov     [ebp+var_10], eax
.text:00003506                 mov     [ebp+var_C], eax
.text:00003509                 mov     [ebp+var_8], eax
.text:0000350C                 mov     [ebp+var_4], eax
.text:0000350F                 mov     eax, [ebp+this]
.text:00003512                 mov     ecx, [eax+4]
.text:00003515                 sub     ecx, 1
.text:00003518                 mov     [ebp+var_C], ecx
.text:0000351B                 mov     edx, [ebp+this]
.text:0000351E                 mov     eax, [ebp+var_C]
.text:00003521                 mov     [edx+4], eax
.text:00003524                 cmp     [ebp+var_C], 0
.text:00003528                 jz      short loc_3532
.text:0000352A                 mov     ecx, [ebp+this]
.text:0000352D                 mov     eax, [ecx+4]
.text:00003530                 jmp     short loc_355C
.text:00003532 ; ---------------------------------------------------------------------------
.text:00003532
.text:00003532 loc_3532:                               ; CODE XREF: NArchive::N7z::CDecProgress::Release(void)+30j
.text:00003532                 mov     edx, [ebp+this]
.text:00003535                 mov     [ebp+var_8], edx
.text:00003538                 mov     eax, [ebp+var_8]
.text:0000353B                 mov     [ebp+var_4], eax
.text:0000353E                 cmp     [ebp+var_4], 0
.text:00003542                 jz      short loc_3553
.text:00003544                 push    1
.text:00003546                 mov     ecx, [ebp+var_4]
.text:00003549                 call    ??_GCDecProgress@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CDecProgress::`scalar deleting destructor'(uint)
.text:0000354E                 mov     [ebp+var_10], eax
.text:00003551                 jmp     short loc_355A
.text:00003553 ; ---------------------------------------------------------------------------
.text:00003553
.text:00003553 loc_3553:                               ; CODE XREF: NArchive::N7z::CDecProgress::Release(void)+4Aj
.text:00003553                 mov     [ebp+var_10], 0
.text:0000355A
.text:0000355A loc_355A:                               ; CODE XREF: NArchive::N7z::CDecProgress::Release(void)+59j
.text:0000355A                 xor     eax, eax
.text:0000355C
.text:0000355C loc_355C:                               ; CODE XREF: NArchive::N7z::CDecProgress::Release(void)+38j
.text:0000355C                 add     esp, 10h
.text:0000355F                 cmp     ebp, esp
.text:00003561                 call    __RTC_CheckEsp
.text:00003566                 mov     esp, ebp
.text:00003568                 pop     ebp
.text:00003569                 retn    4
.text:00003569 ?Release@CDecProgress@N7z@NArchive@@UAGKXZ endp
.text:00003569
.text:00003569 _text           ends
.text:00003569
.text:0000356C ; ===========================================================================
.text:0000356C
.text:0000356C ; Segment type: Pure code
.text:0000356C ; Segment permissions: Read/Execute
.text:0000356C _text           segment para public 'CODE' use32
.text:0000356C                 assume cs:_text
.text:0000356C                 ;org 356Ch
.text:0000356C ; COMDAT (pick any)
.text:0000356C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000356C
.text:0000356C ; =============== S U B R O U T I N E =======================================
.text:0000356C
.text:0000356C ; Attributes: bp-based frame
.text:0000356C
.text:0000356C ; _DWORD __thiscall ICompressProgressInfo::ICompressProgressInfo(ICompressProgressInfo *__hidden this)
.text:0000356C                 public ??0ICompressProgressInfo@@QAE@XZ
.text:0000356C ??0ICompressProgressInfo@@QAE@XZ proc near
.text:0000356C                                         ; CODE XREF: NArchive::N7z::CDecProgress::CDecProgress(ICompressProgressInfo *)+11p
.text:0000356C
.text:0000356C var_4           = dword ptr -4
.text:0000356C
.text:0000356C                 push    ebp
.text:0000356D                 mov     ebp, esp
.text:0000356F                 push    ecx
.text:00003570                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003577                 mov     [ebp+var_4], ecx
.text:0000357A                 mov     ecx, [ebp+var_4]
.text:0000357D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00003582                 mov     eax, [ebp+var_4]
.text:00003585                 mov     dword ptr [eax], offset ??_7ICompressProgressInfo@@6B@ ; const ICompressProgressInfo::`vftable'
.text:0000358B                 mov     eax, [ebp+var_4]
.text:0000358E                 add     esp, 4
.text:00003591                 cmp     ebp, esp
.text:00003593                 call    __RTC_CheckEsp
.text:00003598                 mov     esp, ebp
.text:0000359A                 pop     ebp
.text:0000359B                 retn
.text:0000359B ??0ICompressProgressInfo@@QAE@XZ endp
.text:0000359B
.text:0000359B _text           ends
.text:0000359B
.rdata:0000359C ; ===========================================================================
.rdata:0000359C
.rdata:0000359C ; Segment type: Pure data
.rdata:0000359C ; Segment permissions: Read
.rdata:0000359C _rdata          segment dword public 'DATA' use32
.rdata:0000359C                 assume cs:_rdata
.rdata:0000359C                 ;org 359Ch
.rdata:0000359C ; COMDAT (pick largest)
.rdata:0000359C                 dd offset ??_R4ICompressProgressInfo@@6B@ ; const ICompressProgressInfo::`RTTI Complete Object Locator'
.rdata:000035A0                 public ??_7ICompressProgressInfo@@6B@
.rdata:000035A0 ; const ICompressProgressInfo::`vftable'
.rdata:000035A0 ??_7ICompressProgressInfo@@6B@ dd offset __purecall
.rdata:000035A0                                         ; DATA XREF: ICompressProgressInfo::ICompressProgressInfo(void)+19o
.rdata:000035A4                 dd offset __purecall
.rdata:000035A8                 dd offset __purecall
.rdata:000035AC                 dd offset __purecall
.rdata:000035AC _rdata          ends
.rdata:000035AC
.rdata$r:000035B0 ; ===========================================================================
.rdata$r:000035B0
.rdata$r:000035B0 ; Segment type: Pure data
.rdata$r:000035B0 ; Segment permissions: Read
.rdata$r:000035B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000035B0                 assume cs:_rdata$r
.rdata$r:000035B0                 ;org 35B0h
.rdata$r:000035B0 ; COMDAT (pick any)
.rdata$r:000035B0                 public ??_R4ICompressProgressInfo@@6B@
.rdata$r:000035B0 ; const ICompressProgressInfo::`RTTI Complete Object Locator'
.rdata$r:000035B0 ??_R4ICompressProgressInfo@@6B@ db    0 ; DATA XREF: .rdata:0000359Co
.rdata$r:000035B1                 db    0
.rdata$r:000035B2                 db    0
.rdata$r:000035B3                 db    0
.rdata$r:000035B4                 db    0
.rdata$r:000035B5                 db    0
.rdata$r:000035B6                 db    0
.rdata$r:000035B7                 db    0
.rdata$r:000035B8                 db    0
.rdata$r:000035B9                 db    0
.rdata$r:000035BA                 db    0
.rdata$r:000035BB                 db    0
.rdata$r:000035BC                 dd offset ??_R0?AUICompressProgressInfo@@@8 ; ICompressProgressInfo `RTTI Type Descriptor'
.rdata$r:000035C0                 dd offset ??_R3ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
.rdata$r:000035C0 _rdata$r        ends
.rdata$r:000035C0
.text:000035C4 ; ===========================================================================
.text:000035C4
.text:000035C4 ; Segment type: Pure code
.text:000035C4 ; Segment permissions: Read/Execute
.text:000035C4 _text           segment para public 'CODE' use32
.text:000035C4                 assume cs:_text
.text:000035C4                 ;org 35C4h
.text:000035C4 ; COMDAT (pick any)
.text:000035C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000035C4
.text:000035C4 ; =============== S U B R O U T I N E =======================================
.text:000035C4
.text:000035C4 ; Attributes: bp-based frame
.text:000035C4
.text:000035C4 ; public: void * __thiscall NArchive::N7z::CDecProgress::`scalar deleting destructor'(unsigned int)
.text:000035C4                 public ??_GCDecProgress@N7z@NArchive@@QAEPAXI@Z
.text:000035C4 ??_GCDecProgress@N7z@NArchive@@QAEPAXI@Z proc near
.text:000035C4                                         ; CODE XREF: NArchive::N7z::CDecProgress::Release(void)+51p
.text:000035C4
.text:000035C4 var_4           = dword ptr -4
.text:000035C4 arg_0           = dword ptr  8
.text:000035C4
.text:000035C4                 push    ebp
.text:000035C5                 mov     ebp, esp
.text:000035C7                 push    ecx
.text:000035C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000035CF                 mov     [ebp+var_4], ecx
.text:000035D2                 mov     ecx, [ebp+var_4] ; this
.text:000035D5                 call    ??1CDecProgress@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDecProgress::~CDecProgress(void)
.text:000035DA                 mov     eax, [ebp+arg_0]
.text:000035DD                 and     eax, 1
.text:000035E0                 jz      short loc_35EE
.text:000035E2                 mov     ecx, [ebp+var_4]
.text:000035E5                 push    ecx             ; void *
.text:000035E6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000035EB                 add     esp, 4
.text:000035EE
.text:000035EE loc_35EE:                               ; CODE XREF: NArchive::N7z::CDecProgress::`scalar deleting destructor'(uint)+1Cj
.text:000035EE                 mov     eax, [ebp+var_4]
.text:000035F1                 add     esp, 4
.text:000035F4                 cmp     ebp, esp
.text:000035F6                 call    __RTC_CheckEsp
.text:000035FB                 mov     esp, ebp
.text:000035FD                 pop     ebp
.text:000035FE                 retn    4
.text:000035FE ??_GCDecProgress@N7z@NArchive@@QAEPAXI@Z endp
.text:000035FE
.text:000035FE ; ---------------------------------------------------------------------------
.text:00003601                 align 4
.text:00003601 _text           ends
.text:00003601
.text:00003604 ; ===========================================================================
.text:00003604
.text:00003604 ; Segment type: Pure code
.text:00003604 ; Segment permissions: Read/Execute
.text:00003604 _text           segment para public 'CODE' use32
.text:00003604                 assume cs:_text
.text:00003604                 ;org 3604h
.text:00003604 ; COMDAT (pick any)
.text:00003604                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003604
.text:00003604 ; =============== S U B R O U T I N E =======================================
.text:00003604
.text:00003604 ; Attributes: bp-based frame
.text:00003604
.text:00003604 ; _DWORD __thiscall NArchive::N7z::CDecProgress::~CDecProgress(NArchive::N7z::CDecProgress *__hidden this)
.text:00003604                 public ??1CDecProgress@N7z@NArchive@@QAE@XZ
.text:00003604 ??1CDecProgress@N7z@NArchive@@QAE@XZ proc near
.text:00003604                                         ; CODE XREF: NArchive::N7z::CDecProgress::`scalar deleting destructor'(uint)+11p
.text:00003604
.text:00003604 var_4           = dword ptr -4
.text:00003604
.text:00003604                 push    ebp
.text:00003605                 mov     ebp, esp
.text:00003607                 push    ecx
.text:00003608                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000360F                 mov     [ebp+var_4], ecx
.text:00003612                 mov     ecx, [ebp+var_4]
.text:00003615                 add     ecx, 8
.text:00003618                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000361D                 add     esp, 4
.text:00003620                 cmp     ebp, esp
.text:00003622                 call    __RTC_CheckEsp
.text:00003627                 mov     esp, ebp
.text:00003629                 pop     ebp
.text:0000362A                 retn
.text:0000362A ??1CDecProgress@N7z@NArchive@@QAE@XZ endp
.text:0000362A
.text:0000362A ; ---------------------------------------------------------------------------
.text:0000362B                 align 4
.text:0000362B _text           ends
.text:0000362B
.text:0000362C ; ===========================================================================
.text:0000362C
.text:0000362C ; Segment type: Pure code
.text:0000362C ; Segment permissions: Read/Execute
.text:0000362C _text           segment para public 'CODE' use32
.text:0000362C                 assume cs:_text
.text:0000362C                 ;org 362Ch
.text:0000362C ; COMDAT (pick any)
.text:0000362C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000362C
.text:0000362C ; =============== S U B R O U T I N E =======================================
.text:0000362C
.text:0000362C ; Attributes: bp-based frame
.text:0000362C
.text:0000362C ; void __thiscall NArchive::N7z::CBindInfoEx::Clear(NArchive::N7z::CBindInfoEx *__hidden this)
.text:0000362C                 public ?Clear@CBindInfoEx@N7z@NArchive@@QAEXXZ
.text:0000362C ?Clear@CBindInfoEx@N7z@NArchive@@QAEXXZ proc near
.text:0000362C                                         ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+1Bp
.text:0000362C
.text:0000362C var_4           = dword ptr -4
.text:0000362C
.text:0000362C                 push    ebp
.text:0000362D                 mov     ebp, esp
.text:0000362F                 push    ecx
.text:00003630                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003637                 mov     [ebp+var_4], ecx
.text:0000363A                 mov     ecx, [ebp+var_4] ; this
.text:0000363D                 call    ?Clear@CBindInfo@NCoderMixer2@@QAEXXZ ; NCoderMixer2::CBindInfo::Clear(void)
.text:00003642                 mov     ecx, [ebp+var_4]
.text:00003645                 add     ecx, 40h ; '@'
.text:00003648                 call    ?Clear@?$CRecordVector@_K@@QAEXXZ ; CRecordVector<unsigned __int64>::Clear(void)
.text:0000364D                 add     esp, 4
.text:00003650                 cmp     ebp, esp
.text:00003652                 call    __RTC_CheckEsp
.text:00003657                 mov     esp, ebp
.text:00003659                 pop     ebp
.text:0000365A                 retn
.text:0000365A ?Clear@CBindInfoEx@N7z@NArchive@@QAEXXZ endp
.text:0000365A
.text:0000365A ; ---------------------------------------------------------------------------
.text:0000365B                 align 4
.text:0000365B _text           ends
.text:0000365B
.text:0000365C ; ===========================================================================
.text:0000365C
.text:0000365C ; Segment type: Pure code
.text:0000365C ; Segment permissions: Read/Execute
.text:0000365C _text           segment para public 'CODE' use32
.text:0000365C                 assume cs:_text
.text:0000365C                 ;org 365Ch
.text:0000365C ; COMDAT (pick any)
.text:0000365C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000365C
.text:0000365C ; =============== S U B R O U T I N E =======================================
.text:0000365C
.text:0000365C ; Attributes: bp-based frame
.text:0000365C
.text:0000365C ; void __thiscall NCoderMixer2::CBindInfo::Clear(NCoderMixer2::CBindInfo *__hidden this)
.text:0000365C                 public ?Clear@CBindInfo@NCoderMixer2@@QAEXXZ
.text:0000365C ?Clear@CBindInfo@NCoderMixer2@@QAEXXZ proc near
.text:0000365C                                         ; CODE XREF: NArchive::N7z::CBindInfoEx::Clear(void)+11p
.text:0000365C
.text:0000365C var_4           = dword ptr -4
.text:0000365C
.text:0000365C                 push    ebp
.text:0000365D                 mov     ebp, esp
.text:0000365F                 push    ecx
.text:00003660                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003667                 mov     [ebp+var_4], ecx
.text:0000366A                 mov     ecx, [ebp+var_4]
.text:0000366D                 call    ?Clear@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Clear(void)
.text:00003672                 mov     ecx, [ebp+var_4]
.text:00003675                 add     ecx, 0Ch
.text:00003678                 call    ?Clear@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXXZ ; CRecordVector<NCoderMixer2::CBond>::Clear(void)
.text:0000367D                 mov     ecx, [ebp+var_4]
.text:00003680                 add     ecx, 18h
.text:00003683                 call    ?Clear@?$CRecordVector@I@@QAEXXZ ; CRecordVector<uint>::Clear(void)
.text:00003688                 mov     ecx, [ebp+var_4] ; this
.text:0000368B                 call    ?ClearMaps@CBindInfo@NCoderMixer2@@QAEXXZ ; NCoderMixer2::CBindInfo::ClearMaps(void)
.text:00003690                 add     esp, 4
.text:00003693                 cmp     ebp, esp
.text:00003695                 call    __RTC_CheckEsp
.text:0000369A                 mov     esp, ebp
.text:0000369C                 pop     ebp
.text:0000369D                 retn
.text:0000369D ?Clear@CBindInfo@NCoderMixer2@@QAEXXZ endp
.text:0000369D
.text:0000369D ; ---------------------------------------------------------------------------
.text:0000369E                 align 10h
.text:0000369E _text           ends
.text:0000369E
.text:000036A0 ; ===========================================================================
.text:000036A0
.text:000036A0 ; Segment type: Pure code
.text:000036A0 ; Segment permissions: Read/Execute
.text:000036A0 _text           segment para public 'CODE' use32
.text:000036A0                 assume cs:_text
.text:000036A0                 ;org 36A0h
.text:000036A0 ; COMDAT (pick any)
.text:000036A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000036A0
.text:000036A0 ; =============== S U B R O U T I N E =======================================
.text:000036A0
.text:000036A0 ; Attributes: bp-based frame
.text:000036A0
.text:000036A0 ; void __thiscall NArchive::N7z::CLockedSequentialInStreamMT::Init(NArchive::N7z::CLockedSequentialInStreamMT *this, struct NArchive::N7z::CLockedInStream *, unsigned __int64)
.text:000036A0                 public ?Init@CLockedSequentialInStreamMT@N7z@NArchive@@QAEXPAUCLockedInStream@23@_K@Z
.text:000036A0 ?Init@CLockedSequentialInStreamMT@N7z@NArchive@@QAEXPAUCLockedInStream@23@_K@Z proc near
.text:000036A0                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1273p
.text:000036A0
.text:000036A0 var_4           = dword ptr -4
.text:000036A0 arg_0           = dword ptr  8
.text:000036A0 arg_4           = qword ptr  0Ch
.text:000036A0
.text:000036A0                 push    ebp
.text:000036A1                 mov     ebp, esp
.text:000036A3                 push    ecx
.text:000036A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000036AB                 mov     [ebp+var_4], ecx
.text:000036AE                 mov     eax, [ebp+arg_0]
.text:000036B1                 push    eax
.text:000036B2                 mov     ecx, [ebp+var_4]
.text:000036B5                 add     ecx, 18h
.text:000036B8                 call    ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=(IUnknown *)
.text:000036BD                 mov     ecx, [ebp+var_4]
.text:000036C0                 mov     edx, [ebp+arg_0]
.text:000036C3                 mov     [ecx+8], edx
.text:000036C6                 mov     eax, [ebp+var_4]
.text:000036C9                 mov     ecx, dword ptr [ebp+arg_4]
.text:000036CC                 mov     [eax+10h], ecx
.text:000036CF                 mov     edx, dword ptr [ebp+arg_4+4]
.text:000036D2                 mov     [eax+14h], edx
.text:000036D5                 add     esp, 4
.text:000036D8                 cmp     ebp, esp
.text:000036DA                 call    __RTC_CheckEsp
.text:000036DF                 mov     esp, ebp
.text:000036E1                 pop     ebp
.text:000036E2                 retn    0Ch
.text:000036E2 ?Init@CLockedSequentialInStreamMT@N7z@NArchive@@QAEXPAUCLockedInStream@23@_K@Z endp
.text:000036E2
.text:000036E2 ; ---------------------------------------------------------------------------
.text:000036E5                 align 4
.text:000036E5 _text           ends
.text:000036E5
.text:000036E8 ; ===========================================================================
.text:000036E8
.text:000036E8 ; Segment type: Pure code
.text:000036E8 ; Segment permissions: Read/Execute
.text:000036E8 _text           segment para public 'CODE' use32
.text:000036E8                 assume cs:_text
.text:000036E8                 ;org 36E8h
.text:000036E8 ; COMDAT (pick any)
.text:000036E8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000036E8
.text:000036E8 ; =============== S U B R O U T I N E =======================================
.text:000036E8
.text:000036E8 ; Attributes: bp-based frame
.text:000036E8
.text:000036E8 ; void __thiscall NArchive::N7z::CLockedSequentialInStreamST::Init(NArchive::N7z::CLockedSequentialInStreamST *this, struct NArchive::N7z::CLockedInStream *, unsigned __int64)
.text:000036E8                 public ?Init@CLockedSequentialInStreamST@N7z@NArchive@@QAEXPAUCLockedInStream@23@_K@Z
.text:000036E8 ?Init@CLockedSequentialInStreamST@N7z@NArchive@@QAEXPAUCLockedInStream@23@_K@Z proc near
.text:000036E8                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1300p
.text:000036E8
.text:000036E8 var_4           = dword ptr -4
.text:000036E8 arg_0           = dword ptr  8
.text:000036E8 arg_4           = qword ptr  0Ch
.text:000036E8
.text:000036E8                 push    ebp
.text:000036E9                 mov     ebp, esp
.text:000036EB                 push    ecx
.text:000036EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000036F3                 mov     [ebp+var_4], ecx
.text:000036F6                 mov     eax, [ebp+arg_0]
.text:000036F9                 push    eax
.text:000036FA                 mov     ecx, [ebp+var_4]
.text:000036FD                 add     ecx, 18h
.text:00003700                 call    ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=(IUnknown *)
.text:00003705                 mov     ecx, [ebp+var_4]
.text:00003708                 mov     edx, [ebp+arg_0]
.text:0000370B                 mov     [ecx+8], edx
.text:0000370E                 mov     eax, [ebp+var_4]
.text:00003711                 mov     ecx, dword ptr [ebp+arg_4]
.text:00003714                 mov     [eax+10h], ecx
.text:00003717                 mov     edx, dword ptr [ebp+arg_4+4]
.text:0000371A                 mov     [eax+14h], edx
.text:0000371D                 add     esp, 4
.text:00003720                 cmp     ebp, esp
.text:00003722                 call    __RTC_CheckEsp
.text:00003727                 mov     esp, ebp
.text:00003729                 pop     ebp
.text:0000372A                 retn    0Ch
.text:0000372A ?Init@CLockedSequentialInStreamST@N7z@NArchive@@QAEXPAUCLockedInStream@23@_K@Z endp
.text:0000372A
.text:0000372A ; ---------------------------------------------------------------------------
.text:0000372D                 align 10h
.text:0000372D _text           ends
.text:0000372D
.text:00003730 ; ===========================================================================
.text:00003730
.text:00003730 ; Segment type: Pure code
.text:00003730 ; Segment permissions: Read/Execute
.text:00003730 _text           segment para public 'CODE' use32
.text:00003730                 assume cs:_text
.text:00003730                 ;org 3730h
.text:00003730 ; COMDAT (pick any)
.text:00003730                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003730
.text:00003730 ; =============== S U B R O U T I N E =======================================
.text:00003730
.text:00003730 ; Attributes: bp-based frame
.text:00003730
.text:00003730 ; _DWORD __thiscall NArchive::N7z::CFolderEx::CFolderEx(NArchive::N7z::CFolderEx *__hidden this)
.text:00003730                 public ??0CFolderEx@N7z@NArchive@@QAE@XZ
.text:00003730 ??0CFolderEx@N7z@NArchive@@QAE@XZ proc near
.text:00003730                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+69p
.text:00003730
.text:00003730 var_4           = dword ptr -4
.text:00003730
.text:00003730                 push    ebp
.text:00003731                 mov     ebp, esp
.text:00003733                 push    ecx
.text:00003734                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000373B                 mov     [ebp+var_4], ecx
.text:0000373E                 mov     ecx, [ebp+var_4] ; this
.text:00003741                 call    ??0CFolder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolder::CFolder(void)
.text:00003746                 mov     eax, [ebp+var_4]
.text:00003749                 add     esp, 4
.text:0000374C                 cmp     ebp, esp
.text:0000374E                 call    __RTC_CheckEsp
.text:00003753                 mov     esp, ebp
.text:00003755                 pop     ebp
.text:00003756                 retn
.text:00003756 ??0CFolderEx@N7z@NArchive@@QAE@XZ endp
.text:00003756
.text:00003756 ; ---------------------------------------------------------------------------
.text:00003757                 align 4
.text:00003757 _text           ends
.text:00003757
.text:00003758 ; ===========================================================================
.text:00003758
.text:00003758 ; Segment type: Pure code
.text:00003758 ; Segment permissions: Read/Execute
.text:00003758 _text           segment para public 'CODE' use32
.text:00003758                 assume cs:_text
.text:00003758                 ;org 3758h
.text:00003758 ; COMDAT (pick any)
.text:00003758                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003758
.text:00003758 ; =============== S U B R O U T I N E =======================================
.text:00003758
.text:00003758 ; Attributes: bp-based frame
.text:00003758
.text:00003758 ; _DWORD __thiscall NArchive::N7z::CFolder::CFolder(NArchive::N7z::CFolder *__hidden this)
.text:00003758                 public ??0CFolder@N7z@NArchive@@QAE@XZ
.text:00003758 ??0CFolder@N7z@NArchive@@QAE@XZ proc near
.text:00003758                                         ; CODE XREF: NArchive::N7z::CFolderEx::CFolderEx(void)+11p
.text:00003758
.text:00003758 var_10          = dword ptr -10h
.text:00003758 var_C           = dword ptr -0Ch
.text:00003758 var_4           = dword ptr -4
.text:00003758
.text:00003758                 push    ebp
.text:00003759                 mov     ebp, esp
.text:0000375B                 push    0FFFFFFFFh
.text:0000375D                 push    offset __ehhandler$??0CFolder@N7z@NArchive@@QAE@XZ
.text:00003762                 mov     eax, large fs:0
.text:00003768                 push    eax
.text:00003769                 push    ecx
.text:0000376A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003771                 mov     eax, dword ptr ds:___security_cookie
.text:00003776                 xor     eax, ebp
.text:00003778                 push    eax
.text:00003779                 lea     eax, [ebp+var_C]
.text:0000377C                 mov     large fs:0, eax
.text:00003782                 mov     [ebp+var_10], ecx
.text:00003785                 mov     ecx, [ebp+var_10]
.text:00003788                 call    ??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::CObjArray2<NArchive::N7z::CCoderInfo>(void)
.text:0000378D                 mov     [ebp+var_4], 0
.text:00003794                 mov     ecx, [ebp+var_10]
.text:00003797                 add     ecx, 8
.text:0000379A                 call    ??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::CObjArray2<NArchive::N7z::CBond>(void)
.text:0000379F                 mov     byte ptr [ebp+var_4], 1
.text:000037A3                 mov     ecx, [ebp+var_10]
.text:000037A6                 add     ecx, 10h
.text:000037A9                 call    ??0?$CObjArray2@I@@QAE@XZ ; CObjArray2<uint>::CObjArray2<uint>(void)
.text:000037AE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000037B5                 mov     eax, [ebp+var_10]
.text:000037B8                 mov     ecx, [ebp+var_C]
.text:000037BB                 mov     large fs:0, ecx
.text:000037C2                 pop     ecx
.text:000037C3                 add     esp, 10h
.text:000037C6                 cmp     ebp, esp
.text:000037C8                 call    __RTC_CheckEsp
.text:000037CD                 mov     esp, ebp
.text:000037CF                 pop     ebp
.text:000037D0                 retn
.text:000037D0 ??0CFolder@N7z@NArchive@@QAE@XZ endp
.text:000037D0
.text:000037D0 ; ---------------------------------------------------------------------------
.text:000037D1                 align 4
.text:000037D1 _text           ends
.text:000037D1
.text$x:000037D4 ; ===========================================================================
.text$x:000037D4
.text$x:000037D4 ; Segment type: Pure code
.text$x:000037D4 ; Segment permissions: Read/Execute
.text$x:000037D4 _text$x         segment para public 'CODE' use32
.text$x:000037D4                 assume cs:_text$x
.text$x:000037D4                 ;org 37D4h
.text$x:000037D4 ; COMDAT (pick associative to section at 3758)
.text$x:000037D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000037D4
.text$x:000037D4 ; =============== S U B R O U T I N E =======================================
.text$x:000037D4
.text$x:000037D4
.text$x:000037D4 __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:000037D4                                         ; DATA XREF: .xdata$x:00003808o
.text$x:000037D4                 mov     ecx, [ebp-10h]
.text$x:000037D7                 jmp     ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)
.text$x:000037D7 __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$0 endp
.text$x:000037D7
.text$x:000037DC
.text$x:000037DC ; =============== S U B R O U T I N E =======================================
.text$x:000037DC
.text$x:000037DC
.text$x:000037DC __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:000037DC                                         ; DATA XREF: .xdata$x:00003810o
.text$x:000037DC                 mov     ecx, [ebp-10h]
.text$x:000037DF                 add     ecx, 8
.text$x:000037E2                 jmp     ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>(void)
.text$x:000037E2 __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$1 endp
.text$x:000037E2
.text$x:000037E7
.text$x:000037E7 ; =============== S U B R O U T I N E =======================================
.text$x:000037E7
.text$x:000037E7
.text$x:000037E7 __ehhandler$??0CFolder@N7z@NArchive@@QAE@XZ proc near
.text$x:000037E7                                         ; DATA XREF: NArchive::N7z::CFolder::CFolder(void)+5o
.text$x:000037E7
.text$x:000037E7 arg_4           = dword ptr  8
.text$x:000037E7
.text$x:000037E7                 mov     edx, [esp+arg_4]
.text$x:000037EB                 lea     eax, [edx+0Ch]
.text$x:000037EE                 mov     ecx, [edx-8]
.text$x:000037F1                 xor     ecx, eax
.text$x:000037F3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000037F8                 mov     eax, offset __ehfuncinfo$??0CFolder@N7z@NArchive@@QAE@XZ
.text$x:000037FD                 jmp     ___CxxFrameHandler3
.text$x:000037FD __ehhandler$??0CFolder@N7z@NArchive@@QAE@XZ endp
.text$x:000037FD
.text$x:000037FD ; ---------------------------------------------------------------------------
.text$x:00003802                 align 4
.text$x:00003802 _text$x         ends
.text$x:00003802
.xdata$x:00003804 ; ===========================================================================
.xdata$x:00003804
.xdata$x:00003804 ; Segment type: Pure data
.xdata$x:00003804 ; Segment permissions: Read
.xdata$x:00003804 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003804                 assume cs:_xdata$x
.xdata$x:00003804                 ;org 3804h
.xdata$x:00003804 ; COMDAT (pick associative to section at 3758)
.xdata$x:00003804 __unwindtable$??0CFolder@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003804                                         ; DATA XREF: .xdata$x:0000381Co
.xdata$x:00003805                 db 0FFh
.xdata$x:00003806                 db 0FFh
.xdata$x:00003807                 db 0FFh
.xdata$x:00003808                 dd offset __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$0
.xdata$x:0000380C                 align 10h
.xdata$x:00003810                 dd offset __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$1
.xdata$x:00003814 __ehfuncinfo$??0CFolder@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003814                                         ; DATA XREF: __ehhandler$??0CFolder@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00003815                 db    5
.xdata$x:00003816                 db  93h ; ô
.xdata$x:00003817                 db  19h
.xdata$x:00003818                 db    2
.xdata$x:00003819                 db    0
.xdata$x:0000381A                 db    0
.xdata$x:0000381B                 db    0
.xdata$x:0000381C                 dd offset __unwindtable$??0CFolder@N7z@NArchive@@QAE@XZ
.xdata$x:00003820                 db    0
.xdata$x:00003821                 db    0
.xdata$x:00003822                 db    0
.xdata$x:00003823                 db    0
.xdata$x:00003824                 db    0
.xdata$x:00003825                 db    0
.xdata$x:00003826                 db    0
.xdata$x:00003827                 db    0
.xdata$x:00003828                 db    0
.xdata$x:00003829                 db    0
.xdata$x:0000382A                 db    0
.xdata$x:0000382B                 db    0
.xdata$x:0000382C                 db    0
.xdata$x:0000382D                 db    0
.xdata$x:0000382E                 db    0
.xdata$x:0000382F                 db    0
.xdata$x:00003830                 db    0
.xdata$x:00003831                 db    0
.xdata$x:00003832                 db    0
.xdata$x:00003833                 db    0
.xdata$x:00003834                 db    1
.xdata$x:00003835                 db    0
.xdata$x:00003836                 db    0
.xdata$x:00003837                 db    0
.xdata$x:00003837 _xdata$x        ends
.xdata$x:00003837
.text:00003838 ; ===========================================================================
.text:00003838
.text:00003838 ; Segment type: Pure code
.text:00003838 ; Segment permissions: Read/Execute
.text:00003838 _text           segment para public 'CODE' use32
.text:00003838                 assume cs:_text
.text:00003838                 ;org 3838h
.text:00003838 ; COMDAT (pick any)
.text:00003838                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003838
.text:00003838 ; =============== S U B R O U T I N E =======================================
.text:00003838
.text:00003838 ; Attributes: bp-based frame
.text:00003838
.text:00003838 ; _DWORD __thiscall NArchive::N7z::CFolderEx::~CFolderEx(NArchive::N7z::CFolderEx *__hidden this)
.text:00003838                 public ??1CFolderEx@N7z@NArchive@@QAE@XZ
.text:00003838 ??1CFolderEx@N7z@NArchive@@QAE@XZ proc near
.text:00003838                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+A8p
.text:00003838                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+10Cp ...
.text:00003838
.text:00003838 var_4           = dword ptr -4
.text:00003838
.text:00003838                 push    ebp
.text:00003839                 mov     ebp, esp
.text:0000383B                 push    ecx
.text:0000383C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003843                 mov     [ebp+var_4], ecx
.text:00003846                 mov     ecx, [ebp+var_4] ; this
.text:00003849                 call    ??1CFolder@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolder::~CFolder(void)
.text:0000384E                 add     esp, 4
.text:00003851                 cmp     ebp, esp
.text:00003853                 call    __RTC_CheckEsp
.text:00003858                 mov     esp, ebp
.text:0000385A                 pop     ebp
.text:0000385B                 retn
.text:0000385B ??1CFolderEx@N7z@NArchive@@QAE@XZ endp
.text:0000385B
.text:0000385B _text           ends
.text:0000385B
.text:0000385C ; ===========================================================================
.text:0000385C
.text:0000385C ; Segment type: Pure code
.text:0000385C ; Segment permissions: Read/Execute
.text:0000385C _text           segment para public 'CODE' use32
.text:0000385C                 assume cs:_text
.text:0000385C                 ;org 385Ch
.text:0000385C ; COMDAT (pick any)
.text:0000385C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000385C
.text:0000385C ; =============== S U B R O U T I N E =======================================
.text:0000385C
.text:0000385C ; Attributes: bp-based frame
.text:0000385C
.text:0000385C ; _DWORD __thiscall CCreatedCoder::CCreatedCoder(CCreatedCoder *__hidden this)
.text:0000385C                 public ??0CCreatedCoder@@QAE@XZ
.text:0000385C ??0CCreatedCoder@@QAE@XZ proc near      ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+43Dp
.text:0000385C
.text:0000385C var_10          = dword ptr -10h
.text:0000385C var_C           = dword ptr -0Ch
.text:0000385C var_4           = dword ptr -4
.text:0000385C
.text:0000385C                 push    ebp
.text:0000385D                 mov     ebp, esp
.text:0000385F                 push    0FFFFFFFFh
.text:00003861                 push    offset __ehhandler$??0CCreatedCoder@@QAE@XZ
.text:00003866                 mov     eax, large fs:0
.text:0000386C                 push    eax
.text:0000386D                 push    ecx
.text:0000386E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003875                 mov     eax, dword ptr ds:___security_cookie
.text:0000387A                 xor     eax, ebp
.text:0000387C                 push    eax
.text:0000387D                 lea     eax, [ebp+var_C]
.text:00003880                 mov     large fs:0, eax
.text:00003886                 mov     [ebp+var_10], ecx
.text:00003889                 mov     ecx, [ebp+var_10]
.text:0000388C                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(void)
.text:00003891                 mov     [ebp+var_4], 0
.text:00003898                 mov     ecx, [ebp+var_10]
.text:0000389B                 add     ecx, 4
.text:0000389E                 call    ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>(void)
.text:000038A3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000038AA                 mov     eax, [ebp+var_10]
.text:000038AD                 mov     ecx, [ebp+var_C]
.text:000038B0                 mov     large fs:0, ecx
.text:000038B7                 pop     ecx
.text:000038B8                 add     esp, 10h
.text:000038BB                 cmp     ebp, esp
.text:000038BD                 call    __RTC_CheckEsp
.text:000038C2                 mov     esp, ebp
.text:000038C4                 pop     ebp
.text:000038C5                 retn
.text:000038C5 ??0CCreatedCoder@@QAE@XZ endp
.text:000038C5
.text:000038C5 ; ---------------------------------------------------------------------------
.text:000038C6                 align 4
.text:000038C6 _text           ends
.text:000038C6
.text$x:000038C8 ; ===========================================================================
.text$x:000038C8
.text$x:000038C8 ; Segment type: Pure code
.text$x:000038C8 ; Segment permissions: Read/Execute
.text$x:000038C8 _text$x         segment para public 'CODE' use32
.text$x:000038C8                 assume cs:_text$x
.text$x:000038C8                 ;org 38C8h
.text$x:000038C8 ; COMDAT (pick associative to section at 385C)
.text$x:000038C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000038C8
.text$x:000038C8 ; =============== S U B R O U T I N E =======================================
.text$x:000038C8
.text$x:000038C8
.text$x:000038C8 __unwindfunclet$??0CCreatedCoder@@QAE@XZ$0 proc near
.text$x:000038C8                                         ; DATA XREF: .xdata$x:000038F0o
.text$x:000038C8                 mov     ecx, [ebp-10h]
.text$x:000038CB                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:000038CB __unwindfunclet$??0CCreatedCoder@@QAE@XZ$0 endp
.text$x:000038CB
.text$x:000038D0
.text$x:000038D0 ; =============== S U B R O U T I N E =======================================
.text$x:000038D0
.text$x:000038D0
.text$x:000038D0 __ehhandler$??0CCreatedCoder@@QAE@XZ proc near
.text$x:000038D0                                         ; DATA XREF: CCreatedCoder::CCreatedCoder(void)+5o
.text$x:000038D0
.text$x:000038D0 arg_4           = dword ptr  8
.text$x:000038D0
.text$x:000038D0                 mov     edx, [esp+arg_4]
.text$x:000038D4                 lea     eax, [edx+0Ch]
.text$x:000038D7                 mov     ecx, [edx-8]
.text$x:000038DA                 xor     ecx, eax
.text$x:000038DC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000038E1                 mov     eax, offset __ehfuncinfo$??0CCreatedCoder@@QAE@XZ
.text$x:000038E6                 jmp     ___CxxFrameHandler3
.text$x:000038E6 __ehhandler$??0CCreatedCoder@@QAE@XZ endp
.text$x:000038E6
.text$x:000038E6 ; ---------------------------------------------------------------------------
.text$x:000038EB                 align 4
.text$x:000038EB _text$x         ends
.text$x:000038EB
.xdata$x:000038EC ; ===========================================================================
.xdata$x:000038EC
.xdata$x:000038EC ; Segment type: Pure data
.xdata$x:000038EC ; Segment permissions: Read
.xdata$x:000038EC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000038EC                 assume cs:_xdata$x
.xdata$x:000038EC                 ;org 38ECh
.xdata$x:000038EC ; COMDAT (pick associative to section at 385C)
.xdata$x:000038EC __unwindtable$??0CCreatedCoder@@QAE@XZ db 0FFh
.xdata$x:000038EC                                         ; DATA XREF: .xdata$x:000038FCo
.xdata$x:000038ED                 db 0FFh
.xdata$x:000038EE                 db 0FFh
.xdata$x:000038EF                 db 0FFh
.xdata$x:000038F0                 dd offset __unwindfunclet$??0CCreatedCoder@@QAE@XZ$0
.xdata$x:000038F4 __ehfuncinfo$??0CCreatedCoder@@QAE@XZ db  22h ; "
.xdata$x:000038F4                                         ; DATA XREF: __ehhandler$??0CCreatedCoder@@QAE@XZ+11o
.xdata$x:000038F5                 db    5
.xdata$x:000038F6                 db  93h ; ô
.xdata$x:000038F7                 db  19h
.xdata$x:000038F8                 db    1
.xdata$x:000038F9                 db    0
.xdata$x:000038FA                 db    0
.xdata$x:000038FB                 db    0
.xdata$x:000038FC                 dd offset __unwindtable$??0CCreatedCoder@@QAE@XZ
.xdata$x:00003900                 db    0
.xdata$x:00003901                 db    0
.xdata$x:00003902                 db    0
.xdata$x:00003903                 db    0
.xdata$x:00003904                 db    0
.xdata$x:00003905                 db    0
.xdata$x:00003906                 db    0
.xdata$x:00003907                 db    0
.xdata$x:00003908                 db    0
.xdata$x:00003909                 db    0
.xdata$x:0000390A                 db    0
.xdata$x:0000390B                 db    0
.xdata$x:0000390C                 db    0
.xdata$x:0000390D                 db    0
.xdata$x:0000390E                 db    0
.xdata$x:0000390F                 db    0
.xdata$x:00003910                 db    0
.xdata$x:00003911                 db    0
.xdata$x:00003912                 db    0
.xdata$x:00003913                 db    0
.xdata$x:00003914                 db    1
.xdata$x:00003915                 db    0
.xdata$x:00003916                 db    0
.xdata$x:00003917                 db    0
.xdata$x:00003917 _xdata$x        ends
.xdata$x:00003917
.text:00003918 ; ===========================================================================
.text:00003918
.text:00003918 ; Segment type: Pure code
.text:00003918 ; Segment permissions: Read/Execute
.text:00003918 _text           segment para public 'CODE' use32
.text:00003918                 assume cs:_text
.text:00003918                 ;org 3918h
.text:00003918 ; COMDAT (pick any)
.text:00003918                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003918
.text:00003918 ; =============== S U B R O U T I N E =======================================
.text:00003918
.text:00003918 ; Attributes: bp-based frame
.text:00003918
.text:00003918 ; _DWORD __thiscall CCreatedCoder::~CCreatedCoder(CCreatedCoder *__hidden this)
.text:00003918                 public ??1CCreatedCoder@@QAE@XZ
.text:00003918 ??1CCreatedCoder@@QAE@XZ proc near      ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+486p
.text:00003918                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+4ECp ...
.text:00003918
.text:00003918 var_10          = dword ptr -10h
.text:00003918 var_C           = dword ptr -0Ch
.text:00003918 var_4           = dword ptr -4
.text:00003918
.text:00003918                 push    ebp
.text:00003919                 mov     ebp, esp
.text:0000391B                 push    0FFFFFFFFh
.text:0000391D                 push    offset __ehhandler$??1CCreatedCoder@@QAE@XZ
.text:00003922                 mov     eax, large fs:0
.text:00003928                 push    eax
.text:00003929                 push    ecx
.text:0000392A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003931                 mov     eax, dword ptr ds:___security_cookie
.text:00003936                 xor     eax, ebp
.text:00003938                 push    eax
.text:00003939                 lea     eax, [ebp+var_C]
.text:0000393C                 mov     large fs:0, eax
.text:00003942                 mov     [ebp+var_10], ecx
.text:00003945                 mov     [ebp+var_4], 0
.text:0000394C                 mov     ecx, [ebp+var_10]
.text:0000394F                 add     ecx, 4
.text:00003952                 call    ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>(void)
.text:00003957                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000395E                 mov     ecx, [ebp+var_10]
.text:00003961                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003966                 mov     ecx, [ebp+var_C]
.text:00003969                 mov     large fs:0, ecx
.text:00003970                 pop     ecx
.text:00003971                 add     esp, 10h
.text:00003974                 cmp     ebp, esp
.text:00003976                 call    __RTC_CheckEsp
.text:0000397B                 mov     esp, ebp
.text:0000397D                 pop     ebp
.text:0000397E                 retn
.text:0000397E ??1CCreatedCoder@@QAE@XZ endp
.text:0000397E
.text:0000397E ; ---------------------------------------------------------------------------
.text:0000397F                 align 10h
.text:0000397F _text           ends
.text:0000397F
.text$x:00003980 ; ===========================================================================
.text$x:00003980
.text$x:00003980 ; Segment type: Pure code
.text$x:00003980 ; Segment permissions: Read/Execute
.text$x:00003980 _text$x         segment para public 'CODE' use32
.text$x:00003980                 assume cs:_text$x
.text$x:00003980                 ;org 3980h
.text$x:00003980 ; COMDAT (pick associative to section at 3918)
.text$x:00003980                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00003980
.text$x:00003980 ; =============== S U B R O U T I N E =======================================
.text$x:00003980
.text$x:00003980
.text$x:00003980 __unwindfunclet$??1CCreatedCoder@@QAE@XZ$0 proc near
.text$x:00003980                                         ; DATA XREF: .xdata$x:000039A8o
.text$x:00003980                 mov     ecx, [ebp-10h]
.text$x:00003983                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00003983 __unwindfunclet$??1CCreatedCoder@@QAE@XZ$0 endp
.text$x:00003983
.text$x:00003988
.text$x:00003988 ; =============== S U B R O U T I N E =======================================
.text$x:00003988
.text$x:00003988
.text$x:00003988 __ehhandler$??1CCreatedCoder@@QAE@XZ proc near
.text$x:00003988                                         ; DATA XREF: CCreatedCoder::~CCreatedCoder(void)+5o
.text$x:00003988
.text$x:00003988 arg_4           = dword ptr  8
.text$x:00003988
.text$x:00003988                 mov     edx, [esp+arg_4]
.text$x:0000398C                 lea     eax, [edx+0Ch]
.text$x:0000398F                 mov     ecx, [edx-8]
.text$x:00003992                 xor     ecx, eax
.text$x:00003994                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003999                 mov     eax, offset __ehfuncinfo$??1CCreatedCoder@@QAE@XZ
.text$x:0000399E                 jmp     ___CxxFrameHandler3
.text$x:0000399E __ehhandler$??1CCreatedCoder@@QAE@XZ endp
.text$x:0000399E
.text$x:0000399E ; ---------------------------------------------------------------------------
.text$x:000039A3                 align 4
.text$x:000039A3 _text$x         ends
.text$x:000039A3
.xdata$x:000039A4 ; ===========================================================================
.xdata$x:000039A4
.xdata$x:000039A4 ; Segment type: Pure data
.xdata$x:000039A4 ; Segment permissions: Read
.xdata$x:000039A4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000039A4                 assume cs:_xdata$x
.xdata$x:000039A4                 ;org 39A4h
.xdata$x:000039A4 ; COMDAT (pick associative to section at 3918)
.xdata$x:000039A4 __unwindtable$??1CCreatedCoder@@QAE@XZ db 0FFh
.xdata$x:000039A4                                         ; DATA XREF: .xdata$x:000039B4o
.xdata$x:000039A5                 db 0FFh
.xdata$x:000039A6                 db 0FFh
.xdata$x:000039A7                 db 0FFh
.xdata$x:000039A8                 dd offset __unwindfunclet$??1CCreatedCoder@@QAE@XZ$0
.xdata$x:000039AC __ehfuncinfo$??1CCreatedCoder@@QAE@XZ db  22h ; "
.xdata$x:000039AC                                         ; DATA XREF: __ehhandler$??1CCreatedCoder@@QAE@XZ+11o
.xdata$x:000039AD                 db    5
.xdata$x:000039AE                 db  93h ; ô
.xdata$x:000039AF                 db  19h
.xdata$x:000039B0                 db    1
.xdata$x:000039B1                 db    0
.xdata$x:000039B2                 db    0
.xdata$x:000039B3                 db    0
.xdata$x:000039B4                 dd offset __unwindtable$??1CCreatedCoder@@QAE@XZ
.xdata$x:000039B8                 db    0
.xdata$x:000039B9                 db    0
.xdata$x:000039BA                 db    0
.xdata$x:000039BB                 db    0
.xdata$x:000039BC                 db    0
.xdata$x:000039BD                 db    0
.xdata$x:000039BE                 db    0
.xdata$x:000039BF                 db    0
.xdata$x:000039C0                 db    0
.xdata$x:000039C1                 db    0
.xdata$x:000039C2                 db    0
.xdata$x:000039C3                 db    0
.xdata$x:000039C4                 db    0
.xdata$x:000039C5                 db    0
.xdata$x:000039C6                 db    0
.xdata$x:000039C7                 db    0
.xdata$x:000039C8                 db    0
.xdata$x:000039C9                 db    0
.xdata$x:000039CA                 db    0
.xdata$x:000039CB                 db    0
.xdata$x:000039CC                 db    1
.xdata$x:000039CD                 db    0
.xdata$x:000039CE                 db    0
.xdata$x:000039CF                 db    0
.xdata$x:000039CF _xdata$x        ends
.xdata$x:000039CF
.text:000039D0 ; ===========================================================================
.text:000039D0
.text:000039D0 ; Segment type: Pure code
.text:000039D0 ; Segment permissions: Read/Execute
.text:000039D0 _text           segment para public 'CODE' use32
.text:000039D0                 assume cs:_text
.text:000039D0                 ;org 39D0h
.text:000039D0 ; COMDAT (pick any)
.text:000039D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000039D0
.text:000039D0 ; =============== S U B R O U T I N E =======================================
.text:000039D0
.text:000039D0 ; Attributes: bp-based frame
.text:000039D0
.text:000039D0 ; public: struct NArchive::N7z::CBindInfoEx & __thiscall NArchive::N7z::CBindInfoEx::operator=(struct NArchive::N7z::CBindInfoEx const &)
.text:000039D0                 public ??4CBindInfoEx@N7z@NArchive@@QAEAAU012@ABU012@@Z
.text:000039D0 ??4CBindInfoEx@N7z@NArchive@@QAEAAU012@ABU012@@Z proc near
.text:000039D0                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+5C5p
.text:000039D0
.text:000039D0 var_4           = dword ptr -4
.text:000039D0 arg_0           = dword ptr  8
.text:000039D0
.text:000039D0                 push    ebp
.text:000039D1                 mov     ebp, esp
.text:000039D3                 push    ecx
.text:000039D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000039DB                 mov     [ebp+var_4], ecx
.text:000039DE                 mov     eax, [ebp+arg_0]
.text:000039E1                 push    eax
.text:000039E2                 mov     ecx, [ebp+var_4]
.text:000039E5                 call    ??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z ; NCoderMixer2::CBindInfo::operator=(NCoderMixer2::CBindInfo const &)
.text:000039EA                 mov     ecx, [ebp+arg_0]
.text:000039ED                 add     ecx, 40h ; '@'
.text:000039F0                 push    ecx
.text:000039F1                 mov     ecx, [ebp+var_4]
.text:000039F4                 add     ecx, 40h ; '@'
.text:000039F7                 call    ??4?$CRecordVector@_K@@QAEAAV0@ABV0@@Z ; CRecordVector<unsigned __int64>::operator=(CRecordVector<unsigned __int64> const &)
.text:000039FC                 mov     eax, [ebp+var_4]
.text:000039FF                 add     esp, 4
.text:00003A02                 cmp     ebp, esp
.text:00003A04                 call    __RTC_CheckEsp
.text:00003A09                 mov     esp, ebp
.text:00003A0B                 pop     ebp
.text:00003A0C                 retn    4
.text:00003A0C ??4CBindInfoEx@N7z@NArchive@@QAEAAU012@ABU012@@Z endp
.text:00003A0C
.text:00003A0C ; ---------------------------------------------------------------------------
.text:00003A0F                 align 10h
.text:00003A0F _text           ends
.text:00003A0F
.text:00003A10 ; ===========================================================================
.text:00003A10
.text:00003A10 ; Segment type: Pure code
.text:00003A10 ; Segment permissions: Read/Execute
.text:00003A10 _text           segment para public 'CODE' use32
.text:00003A10                 assume cs:_text
.text:00003A10                 ;org 3A10h
.text:00003A10 ; COMDAT (pick any)
.text:00003A10                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A10
.text:00003A10 ; =============== S U B R O U T I N E =======================================
.text:00003A10
.text:00003A10 ; Attributes: bp-based frame
.text:00003A10
.text:00003A10 ; _DWORD __thiscall NArchive::N7z::CLockedInStream::CLockedInStream(NArchive::N7z::CLockedInStream *__hidden this)
.text:00003A10                 public ??0CLockedInStream@N7z@NArchive@@QAE@XZ
.text:00003A10 ??0CLockedInStream@N7z@NArchive@@QAE@XZ proc near
.text:00003A10                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+F8Cp
.text:00003A10
.text:00003A10 var_10          = dword ptr -10h
.text:00003A10 var_C           = dword ptr -0Ch
.text:00003A10 var_4           = dword ptr -4
.text:00003A10
.text:00003A10                 push    ebp
.text:00003A11                 mov     ebp, esp
.text:00003A13                 push    0FFFFFFFFh
.text:00003A15                 push    offset __ehhandler$??0CLockedInStream@N7z@NArchive@@QAE@XZ
.text:00003A1A                 mov     eax, large fs:0
.text:00003A20                 push    eax
.text:00003A21                 push    ecx
.text:00003A22                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003A29                 mov     eax, dword ptr ds:___security_cookie
.text:00003A2E                 xor     eax, ebp
.text:00003A30                 push    eax
.text:00003A31                 lea     eax, [ebp+var_C]
.text:00003A34                 mov     large fs:0, eax
.text:00003A3A                 mov     [ebp+var_10], ecx
.text:00003A3D                 mov     ecx, [ebp+var_10]
.text:00003A40                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00003A45                 mov     ecx, [ebp+var_10]
.text:00003A48                 add     ecx, 4          ; this
.text:00003A4B                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00003A50                 mov     eax, [ebp+var_10]
.text:00003A53                 mov     dword ptr [eax], offset ??_7CLockedInStream@N7z@NArchive@@6B@ ; const NArchive::N7z::CLockedInStream::`vftable'
.text:00003A59                 mov     ecx, [ebp+var_10]
.text:00003A5C                 add     ecx, 8
.text:00003A5F                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:00003A64                 mov     [ebp+var_4], 0
.text:00003A6B                 mov     ecx, [ebp+var_10]
.text:00003A6E                 add     ecx, 18h        ; this
.text:00003A71                 call    ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)
.text:00003A76                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003A7D                 mov     eax, [ebp+var_10]
.text:00003A80                 mov     ecx, [ebp+var_C]
.text:00003A83                 mov     large fs:0, ecx
.text:00003A8A                 pop     ecx
.text:00003A8B                 add     esp, 10h
.text:00003A8E                 cmp     ebp, esp
.text:00003A90                 call    __RTC_CheckEsp
.text:00003A95                 mov     esp, ebp
.text:00003A97                 pop     ebp
.text:00003A98                 retn
.text:00003A98 ??0CLockedInStream@N7z@NArchive@@QAE@XZ endp
.text:00003A98
.text:00003A98 ; ---------------------------------------------------------------------------
.text:00003A99                 align 4
.text:00003A99 _text           ends
.text:00003A99
.text$x:00003A9C ; ===========================================================================
.text$x:00003A9C
.text$x:00003A9C ; Segment type: Pure code
.text$x:00003A9C ; Segment permissions: Read/Execute
.text$x:00003A9C _text$x         segment para public 'CODE' use32
.text$x:00003A9C                 assume cs:_text$x
.text$x:00003A9C                 ;org 3A9Ch
.text$x:00003A9C ; COMDAT (pick associative to section at 3A10)
.text$x:00003A9C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00003A9C
.text$x:00003A9C ; =============== S U B R O U T I N E =======================================
.text$x:00003A9C
.text$x:00003A9C
.text$x:00003A9C __unwindfunclet$??0CLockedInStream@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00003A9C                                         ; DATA XREF: .xdata$x:00003AD8o
.text$x:00003A9C                 mov     ecx, [ebp-10h]
.text$x:00003A9F                 add     ecx, 8
.text$x:00003AA2                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:00003AA2 __unwindfunclet$??0CLockedInStream@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00003AA2
.text$x:00003AA7
.text$x:00003AA7 ; =============== S U B R O U T I N E =======================================
.text$x:00003AA7
.text$x:00003AA7
.text$x:00003AA7 __ehhandler$??0CLockedInStream@N7z@NArchive@@QAE@XZ proc near
.text$x:00003AA7                                         ; DATA XREF: NArchive::N7z::CLockedInStream::CLockedInStream(void)+5o
.text$x:00003AA7
.text$x:00003AA7 arg_4           = dword ptr  8
.text$x:00003AA7
.text$x:00003AA7                 mov     edx, [esp+arg_4]
.text$x:00003AAB                 lea     eax, [edx+0Ch]
.text$x:00003AAE                 mov     ecx, [edx-8]
.text$x:00003AB1                 xor     ecx, eax
.text$x:00003AB3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003AB8                 mov     eax, offset __ehfuncinfo$??0CLockedInStream@N7z@NArchive@@QAE@XZ
.text$x:00003ABD                 jmp     ___CxxFrameHandler3
.text$x:00003ABD __ehhandler$??0CLockedInStream@N7z@NArchive@@QAE@XZ endp
.text$x:00003ABD
.text$x:00003ABD ; ---------------------------------------------------------------------------
.text$x:00003AC2                 align 4
.text$x:00003AC2 _text$x         ends
.text$x:00003AC2
.rdata:00003AC4 ; ===========================================================================
.rdata:00003AC4
.rdata:00003AC4 ; Segment type: Pure data
.rdata:00003AC4 ; Segment permissions: Read
.rdata:00003AC4 _rdata          segment dword public 'DATA' use32
.rdata:00003AC4                 assume cs:_rdata
.rdata:00003AC4                 ;org 3AC4h
.rdata:00003AC4 ; COMDAT (pick largest)
.rdata:00003AC4                 dd offset ??_R4CLockedInStream@N7z@NArchive@@6B@ ; const NArchive::N7z::CLockedInStream::`RTTI Complete Object Locator'
.rdata:00003AC8                 public ??_7CLockedInStream@N7z@NArchive@@6B@
.rdata:00003AC8 ; const NArchive::N7z::CLockedInStream::`vftable'
.rdata:00003AC8 ??_7CLockedInStream@N7z@NArchive@@6B@ dd offset ?QueryInterface@CLockedInStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:00003AC8                                         ; DATA XREF: NArchive::N7z::CLockedInStream::CLockedInStream(void)+43o
.rdata:00003AC8                                         ; NArchive::N7z::CLockedInStream::QueryInterface(_GUID const &,void * *)
.rdata:00003ACC                 dd offset ?AddRef@CLockedInStream@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CLockedInStream::AddRef(void)
.rdata:00003AD0                 dd offset ?Release@CLockedInStream@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CLockedInStream::Release(void)
.rdata:00003AD0 _rdata          ends
.rdata:00003AD0
.xdata$x:00003AD4 ; ===========================================================================
.xdata$x:00003AD4
.xdata$x:00003AD4 ; Segment type: Pure data
.xdata$x:00003AD4 ; Segment permissions: Read
.xdata$x:00003AD4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003AD4                 assume cs:_xdata$x
.xdata$x:00003AD4                 ;org 3AD4h
.xdata$x:00003AD4 ; COMDAT (pick associative to section at 3A10)
.xdata$x:00003AD4 __unwindtable$??0CLockedInStream@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003AD4                                         ; DATA XREF: .xdata$x:00003AE4o
.xdata$x:00003AD5                 db 0FFh
.xdata$x:00003AD6                 db 0FFh
.xdata$x:00003AD7                 db 0FFh
.xdata$x:00003AD8                 dd offset __unwindfunclet$??0CLockedInStream@N7z@NArchive@@QAE@XZ$0
.xdata$x:00003ADC __ehfuncinfo$??0CLockedInStream@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003ADC                                         ; DATA XREF: __ehhandler$??0CLockedInStream@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00003ADD                 db    5
.xdata$x:00003ADE                 db  93h ; ô
.xdata$x:00003ADF                 db  19h
.xdata$x:00003AE0                 db    1
.xdata$x:00003AE1                 db    0
.xdata$x:00003AE2                 db    0
.xdata$x:00003AE3                 db    0
.xdata$x:00003AE4                 dd offset __unwindtable$??0CLockedInStream@N7z@NArchive@@QAE@XZ
.xdata$x:00003AE8                 db    0
.xdata$x:00003AE9                 db    0
.xdata$x:00003AEA                 db    0
.xdata$x:00003AEB                 db    0
.xdata$x:00003AEC                 db    0
.xdata$x:00003AED                 db    0
.xdata$x:00003AEE                 db    0
.xdata$x:00003AEF                 db    0
.xdata$x:00003AF0                 db    0
.xdata$x:00003AF1                 db    0
.xdata$x:00003AF2                 db    0
.xdata$x:00003AF3                 db    0
.xdata$x:00003AF4                 db    0
.xdata$x:00003AF5                 db    0
.xdata$x:00003AF6                 db    0
.xdata$x:00003AF7                 db    0
.xdata$x:00003AF8                 db    0
.xdata$x:00003AF9                 db    0
.xdata$x:00003AFA                 db    0
.xdata$x:00003AFB                 db    0
.xdata$x:00003AFC                 db    1
.xdata$x:00003AFD                 db    0
.xdata$x:00003AFE                 db    0
.xdata$x:00003AFF                 db    0
.xdata$x:00003AFF _xdata$x        ends
.xdata$x:00003AFF
.rdata$r:00003B00 ; ===========================================================================
.rdata$r:00003B00
.rdata$r:00003B00 ; Segment type: Pure data
.rdata$r:00003B00 ; Segment permissions: Read
.rdata$r:00003B00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003B00                 assume cs:_rdata$r
.rdata$r:00003B00                 ;org 3B00h
.rdata$r:00003B00 ; COMDAT (pick any)
.rdata$r:00003B00                 public ??_R4CLockedInStream@N7z@NArchive@@6B@
.rdata$r:00003B00 ; const NArchive::N7z::CLockedInStream::`RTTI Complete Object Locator'
.rdata$r:00003B00 ??_R4CLockedInStream@N7z@NArchive@@6B@ db    0
.rdata$r:00003B00                                         ; DATA XREF: .rdata:00003AC4o
.rdata$r:00003B01                 db    0
.rdata$r:00003B02                 db    0
.rdata$r:00003B03                 db    0
.rdata$r:00003B04                 db    0
.rdata$r:00003B05                 db    0
.rdata$r:00003B06                 db    0
.rdata$r:00003B07                 db    0
.rdata$r:00003B08                 db    0
.rdata$r:00003B09                 db    0
.rdata$r:00003B0A                 db    0
.rdata$r:00003B0B                 db    0
.rdata$r:00003B0C                 dd offset ??_R0?AUCLockedInStream@N7z@NArchive@@@8 ; NArchive::N7z::CLockedInStream `RTTI Type Descriptor'
.rdata$r:00003B10                 dd offset ??_R3CLockedInStream@N7z@NArchive@@8 ; NArchive::N7z::CLockedInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003B10 _rdata$r        ends
.rdata$r:00003B10
.data:00003B14 ; ===========================================================================
.data:00003B14
.data:00003B14 ; Segment type: Pure data
.data:00003B14 ; Segment permissions: Read/Write
.data:00003B14 _data           segment dword public 'DATA' use32
.data:00003B14                 assume cs:_data
.data:00003B14                 ;org 3B14h
.data:00003B14 ; COMDAT (pick any)
.data:00003B14                 public ??_R0?AUCLockedInStream@N7z@NArchive@@@8
.data:00003B14 ; struct NArchive::N7z::CLockedInStream `RTTI Type Descriptor'
.data:00003B14 ??_R0?AUCLockedInStream@N7z@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00003B14                                         ; DATA XREF: .rdata$r:00003B0Co
.data:00003B14                                         ; .rdata$r:NArchive::N7z::CLockedInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003B14                                         ; const type_info::`vftable'
.data:00003B18                 db    0
.data:00003B19                 db    0
.data:00003B1A                 db    0
.data:00003B1B                 db    0
.data:00003B1C                 db  2Eh ; .
.data:00003B1D                 db  3Fh ; ?
.data:00003B1E                 db  41h ; A
.data:00003B1F                 db  55h ; U
.data:00003B20                 db  43h ; C
.data:00003B21                 db  4Ch ; L
.data:00003B22                 db  6Fh ; o
.data:00003B23                 db  63h ; c
.data:00003B24                 db  6Bh ; k
.data:00003B25                 db  65h ; e
.data:00003B26                 db  64h ; d
.data:00003B27                 db  49h ; I
.data:00003B28                 db  6Eh ; n
.data:00003B29                 db  53h ; S
.data:00003B2A                 db  74h ; t
.data:00003B2B                 db  72h ; r
.data:00003B2C                 db  65h ; e
.data:00003B2D                 db  61h ; a
.data:00003B2E                 db  6Dh ; m
.data:00003B2F                 db  40h ; @
.data:00003B30                 db  4Eh ; N
.data:00003B31                 db  37h ; 7
.data:00003B32                 db  7Ah ; z
.data:00003B33                 db  40h ; @
.data:00003B34                 db  4Eh ; N
.data:00003B35                 db  41h ; A
.data:00003B36                 db  72h ; r
.data:00003B37                 db  63h ; c
.data:00003B38                 db  68h ; h
.data:00003B39                 db  69h ; i
.data:00003B3A                 db  76h ; v
.data:00003B3B                 db  65h ; e
.data:00003B3C                 db  40h ; @
.data:00003B3D                 db  40h ; @
.data:00003B3E                 db    0
.data:00003B3F                 align 10h
.data:00003B3F _data           ends
.data:00003B3F
.rdata$r:00003B40 ; ===========================================================================
.rdata$r:00003B40
.rdata$r:00003B40 ; Segment type: Pure data
.rdata$r:00003B40 ; Segment permissions: Read
.rdata$r:00003B40 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003B40                 assume cs:_rdata$r
.rdata$r:00003B40                 ;org 3B40h
.rdata$r:00003B40 ; COMDAT (pick any)
.rdata$r:00003B40                 public ??_R3CLockedInStream@N7z@NArchive@@8
.rdata$r:00003B40 ; NArchive::N7z::CLockedInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003B40 ??_R3CLockedInStream@N7z@NArchive@@8 db    0
.rdata$r:00003B40                                         ; DATA XREF: .rdata$r:00003B10o
.rdata$r:00003B40                                         ; .rdata$r:00003B78o
.rdata$r:00003B41                 db    0
.rdata$r:00003B42                 db    0
.rdata$r:00003B43                 db    0
.rdata$r:00003B44                 db    1
.rdata$r:00003B45                 db    0
.rdata$r:00003B46                 db    0
.rdata$r:00003B47                 db    0
.rdata$r:00003B48                 db    3
.rdata$r:00003B49                 db    0
.rdata$r:00003B4A                 db    0
.rdata$r:00003B4B                 db    0
.rdata$r:00003B4C                 dd offset ??_R2CLockedInStream@N7z@NArchive@@8 ; NArchive::N7z::CLockedInStream::`RTTI Base Class Array'
.rdata$r:00003B4C _rdata$r        ends
.rdata$r:00003B4C
.rdata$r:00003B50 ; ===========================================================================
.rdata$r:00003B50
.rdata$r:00003B50 ; Segment type: Pure data
.rdata$r:00003B50 ; Segment permissions: Read
.rdata$r:00003B50 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003B50                 assume cs:_rdata$r
.rdata$r:00003B50                 ;org 3B50h
.rdata$r:00003B50 ; COMDAT (pick any)
.rdata$r:00003B50                 public ??_R2CLockedInStream@N7z@NArchive@@8
.rdata$r:00003B50 ; NArchive::N7z::CLockedInStream::`RTTI Base Class Array'
.rdata$r:00003B50 ??_R2CLockedInStream@N7z@NArchive@@8 dd offset ??_R1A@?0A@EA@CLockedInStream@N7z@NArchive@@8
.rdata$r:00003B50                                         ; DATA XREF: .rdata$r:00003B4Co
.rdata$r:00003B50                                         ; NArchive::N7z::CLockedInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003B54                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003B58                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00003B5C                 db    0
.rdata$r:00003B5D                 align 10h
.rdata$r:00003B5D _rdata$r        ends
.rdata$r:00003B5D
.rdata$r:00003B60 ; ===========================================================================
.rdata$r:00003B60
.rdata$r:00003B60 ; Segment type: Pure data
.rdata$r:00003B60 ; Segment permissions: Read
.rdata$r:00003B60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003B60                 assume cs:_rdata$r
.rdata$r:00003B60                 ;org 3B60h
.rdata$r:00003B60 ; COMDAT (pick any)
.rdata$r:00003B60                 public ??_R1A@?0A@EA@CLockedInStream@N7z@NArchive@@8
.rdata$r:00003B60 ; NArchive::N7z::CLockedInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003B60 ??_R1A@?0A@EA@CLockedInStream@N7z@NArchive@@8 dd offset ??_R0?AUCLockedInStream@N7z@NArchive@@@8
.rdata$r:00003B60                                         ; DATA XREF: .rdata$r:NArchive::N7z::CLockedInStream::`RTTI Base Class Array'o
.rdata$r:00003B60                                         ; NArchive::N7z::CLockedInStream `RTTI Type Descriptor'
.rdata$r:00003B64                 db    2
.rdata$r:00003B65                 db    0
.rdata$r:00003B66                 db    0
.rdata$r:00003B67                 db    0
.rdata$r:00003B68                 db    0
.rdata$r:00003B69                 db    0
.rdata$r:00003B6A                 db    0
.rdata$r:00003B6B                 db    0
.rdata$r:00003B6C                 db 0FFh
.rdata$r:00003B6D                 db 0FFh
.rdata$r:00003B6E                 db 0FFh
.rdata$r:00003B6F                 db 0FFh
.rdata$r:00003B70                 db    0
.rdata$r:00003B71                 db    0
.rdata$r:00003B72                 db    0
.rdata$r:00003B73                 db    0
.rdata$r:00003B74                 db  40h ; @
.rdata$r:00003B75                 db    0
.rdata$r:00003B76                 db    0
.rdata$r:00003B77                 db    0
.rdata$r:00003B78                 dd offset ??_R3CLockedInStream@N7z@NArchive@@8 ; NArchive::N7z::CLockedInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003B78 _rdata$r        ends
.rdata$r:00003B78
.text:00003B7C ; ===========================================================================
.text:00003B7C
.text:00003B7C ; Segment type: Pure code
.text:00003B7C ; Segment permissions: Read/Execute
.text:00003B7C _text           segment para public 'CODE' use32
.text:00003B7C                 assume cs:_text
.text:00003B7C                 ;org 3B7Ch
.text:00003B7C ; COMDAT (pick any)
.text:00003B7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B7C
.text:00003B7C ; =============== S U B R O U T I N E =======================================
.text:00003B7C
.text:00003B7C ; Attributes: bp-based frame
.text:00003B7C
.text:00003B7C ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSection::CCriticalSection(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00003B7C                 public ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ
.text:00003B7C ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
.text:00003B7C                                         ; CODE XREF: NArchive::N7z::CLockedInStream::CLockedInStream(void)+61p
.text:00003B7C
.text:00003B7C var_4           = dword ptr -4
.text:00003B7C
.text:00003B7C                 push    ebp
.text:00003B7D                 mov     ebp, esp
.text:00003B7F                 push    ecx
.text:00003B80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B87                 mov     [ebp+var_4], ecx
.text:00003B8A                 mov     eax, [ebp+var_4]
.text:00003B8D                 push    eax
.text:00003B8E                 call    _CriticalSection_Init@4 ; CriticalSection_Init(x)
.text:00003B93                 mov     eax, [ebp+var_4]
.text:00003B96                 add     esp, 4
.text:00003B99                 cmp     ebp, esp
.text:00003B9B                 call    __RTC_CheckEsp
.text:00003BA0                 mov     esp, ebp
.text:00003BA2                 pop     ebp
.text:00003BA3                 retn
.text:00003BA3 ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ endp
.text:00003BA3
.text:00003BA3 _text           ends
.text:00003BA3
.text:00003BA4 ; ===========================================================================
.text:00003BA4
.text:00003BA4 ; Segment type: Pure code
.text:00003BA4 ; Segment permissions: Read/Execute
.text:00003BA4 _text           segment para public 'CODE' use32
.text:00003BA4                 assume cs:_text
.text:00003BA4                 ;org 3BA4h
.text:00003BA4 ; COMDAT (pick any)
.text:00003BA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003BA4
.text:00003BA4 ; =============== S U B R O U T I N E =======================================
.text:00003BA4
.text:00003BA4 ; Attributes: bp-based frame
.text:00003BA4
.text:00003BA4 ; __int32 __stdcall NArchive::N7z::CLockedInStream::QueryInterface(NArchive::N7z::CLockedInStream *this, const struct _GUID *Buf1, void **)
.text:00003BA4                 public ?QueryInterface@CLockedInStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00003BA4 ?QueryInterface@CLockedInStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00003BA4                                         ; DATA XREF: .rdata:const NArchive::N7z::CLockedInStream::`vftable'o
.text:00003BA4
.text:00003BA4 this            = dword ptr  8
.text:00003BA4 Buf1            = dword ptr  0Ch
.text:00003BA4 arg_8           = dword ptr  10h
.text:00003BA4
.text:00003BA4                 push    ebp
.text:00003BA5                 mov     ebp, esp
.text:00003BA7                 mov     eax, [ebp+arg_8]
.text:00003BAA                 mov     dword ptr [eax], 0
.text:00003BB0                 push    offset _IID_IUnknown ; Buf2
.text:00003BB5                 mov     ecx, [ebp+Buf1]
.text:00003BB8                 push    ecx             ; Buf1
.text:00003BB9                 call    ___@8           ; __(x,x)
.text:00003BBE                 test    eax, eax
.text:00003BC0                 jz      short loc_3BCC
.text:00003BC2                 mov     edx, [ebp+arg_8]
.text:00003BC5                 mov     eax, [ebp+this]
.text:00003BC8                 mov     [edx], eax
.text:00003BCA                 jmp     short loc_3BD3
.text:00003BCC ; ---------------------------------------------------------------------------
.text:00003BCC
.text:00003BCC loc_3BCC:                               ; CODE XREF: NArchive::N7z::CLockedInStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00003BCC                 mov     eax, 80004002h
.text:00003BD1                 jmp     short loc_3BE4
.text:00003BD3 ; ---------------------------------------------------------------------------
.text:00003BD3
.text:00003BD3 loc_3BD3:                               ; CODE XREF: NArchive::N7z::CLockedInStream::QueryInterface(_GUID const &,void * *)+26j
.text:00003BD3                 mov     ecx, [ebp+this]
.text:00003BD6                 mov     edx, [ecx+4]
.text:00003BD9                 add     edx, 1
.text:00003BDC                 mov     eax, [ebp+this]
.text:00003BDF                 mov     [eax+4], edx
.text:00003BE2                 xor     eax, eax
.text:00003BE4
.text:00003BE4 loc_3BE4:                               ; CODE XREF: NArchive::N7z::CLockedInStream::QueryInterface(_GUID const &,void * *)+2Dj
.text:00003BE4                 cmp     ebp, esp
.text:00003BE6                 call    __RTC_CheckEsp
.text:00003BEB                 pop     ebp
.text:00003BEC                 retn    0Ch
.text:00003BEC ?QueryInterface@CLockedInStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:00003BEC
.text:00003BEC ; ---------------------------------------------------------------------------
.text:00003BEF                 align 10h
.text:00003BEF _text           ends
.text:00003BEF
.text:00003BF0 ; ===========================================================================
.text:00003BF0
.text:00003BF0 ; Segment type: Pure code
.text:00003BF0 ; Segment permissions: Read/Execute
.text:00003BF0 _text           segment para public 'CODE' use32
.text:00003BF0                 assume cs:_text
.text:00003BF0                 ;org 3BF0h
.text:00003BF0 ; COMDAT (pick any)
.text:00003BF0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003BF0
.text:00003BF0 ; =============== S U B R O U T I N E =======================================
.text:00003BF0
.text:00003BF0 ; Attributes: bp-based frame
.text:00003BF0
.text:00003BF0 ; unsigned __int32 __stdcall NArchive::N7z::CLockedInStream::AddRef(NArchive::N7z::CLockedInStream *this)
.text:00003BF0                 public ?AddRef@CLockedInStream@N7z@NArchive@@UAGKXZ
.text:00003BF0 ?AddRef@CLockedInStream@N7z@NArchive@@UAGKXZ proc near
.text:00003BF0                                         ; DATA XREF: .rdata:00003ACCo
.text:00003BF0
.text:00003BF0 var_4           = dword ptr -4
.text:00003BF0 this            = dword ptr  8
.text:00003BF0
.text:00003BF0                 push    ebp
.text:00003BF1                 mov     ebp, esp
.text:00003BF3                 push    ecx
.text:00003BF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003BFB                 mov     eax, [ebp+this]
.text:00003BFE                 mov     ecx, [eax+4]
.text:00003C01                 add     ecx, 1
.text:00003C04                 mov     [ebp+var_4], ecx
.text:00003C07                 mov     edx, [ebp+this]
.text:00003C0A                 mov     eax, [ebp+var_4]
.text:00003C0D                 mov     [edx+4], eax
.text:00003C10                 mov     eax, [ebp+var_4]
.text:00003C13                 mov     esp, ebp
.text:00003C15                 pop     ebp
.text:00003C16                 retn    4
.text:00003C16 ?AddRef@CLockedInStream@N7z@NArchive@@UAGKXZ endp
.text:00003C16
.text:00003C16 ; ---------------------------------------------------------------------------
.text:00003C19                 align 4
.text:00003C19 _text           ends
.text:00003C19
.text:00003C1C ; ===========================================================================
.text:00003C1C
.text:00003C1C ; Segment type: Pure code
.text:00003C1C ; Segment permissions: Read/Execute
.text:00003C1C _text           segment para public 'CODE' use32
.text:00003C1C                 assume cs:_text
.text:00003C1C                 ;org 3C1Ch
.text:00003C1C ; COMDAT (pick any)
.text:00003C1C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003C1C
.text:00003C1C ; =============== S U B R O U T I N E =======================================
.text:00003C1C
.text:00003C1C ; Attributes: bp-based frame
.text:00003C1C
.text:00003C1C ; unsigned __int32 __stdcall NArchive::N7z::CLockedInStream::Release(NArchive::N7z::CLockedInStream *this)
.text:00003C1C                 public ?Release@CLockedInStream@N7z@NArchive@@UAGKXZ
.text:00003C1C ?Release@CLockedInStream@N7z@NArchive@@UAGKXZ proc near
.text:00003C1C                                         ; DATA XREF: .rdata:00003AD0o
.text:00003C1C
.text:00003C1C var_10          = dword ptr -10h
.text:00003C1C var_C           = dword ptr -0Ch
.text:00003C1C var_8           = dword ptr -8
.text:00003C1C var_4           = dword ptr -4
.text:00003C1C this            = dword ptr  8
.text:00003C1C
.text:00003C1C                 push    ebp
.text:00003C1D                 mov     ebp, esp
.text:00003C1F                 sub     esp, 10h
.text:00003C22                 mov     eax, 0CCCCCCCCh
.text:00003C27                 mov     [ebp+var_10], eax
.text:00003C2A                 mov     [ebp+var_C], eax
.text:00003C2D                 mov     [ebp+var_8], eax
.text:00003C30                 mov     [ebp+var_4], eax
.text:00003C33                 mov     eax, [ebp+this]
.text:00003C36                 mov     ecx, [eax+4]
.text:00003C39                 sub     ecx, 1
.text:00003C3C                 mov     [ebp+var_C], ecx
.text:00003C3F                 mov     edx, [ebp+this]
.text:00003C42                 mov     eax, [ebp+var_C]
.text:00003C45                 mov     [edx+4], eax
.text:00003C48                 cmp     [ebp+var_C], 0
.text:00003C4C                 jz      short loc_3C56
.text:00003C4E                 mov     ecx, [ebp+this]
.text:00003C51                 mov     eax, [ecx+4]
.text:00003C54                 jmp     short loc_3C80
.text:00003C56 ; ---------------------------------------------------------------------------
.text:00003C56
.text:00003C56 loc_3C56:                               ; CODE XREF: NArchive::N7z::CLockedInStream::Release(void)+30j
.text:00003C56                 mov     edx, [ebp+this]
.text:00003C59                 mov     [ebp+var_8], edx
.text:00003C5C                 mov     eax, [ebp+var_8]
.text:00003C5F                 mov     [ebp+var_4], eax
.text:00003C62                 cmp     [ebp+var_4], 0
.text:00003C66                 jz      short loc_3C77
.text:00003C68                 push    1
.text:00003C6A                 mov     ecx, [ebp+var_4]
.text:00003C6D                 call    ??_GCLockedInStream@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CLockedInStream::`scalar deleting destructor'(uint)
.text:00003C72                 mov     [ebp+var_10], eax
.text:00003C75                 jmp     short loc_3C7E
.text:00003C77 ; ---------------------------------------------------------------------------
.text:00003C77
.text:00003C77 loc_3C77:                               ; CODE XREF: NArchive::N7z::CLockedInStream::Release(void)+4Aj
.text:00003C77                 mov     [ebp+var_10], 0
.text:00003C7E
.text:00003C7E loc_3C7E:                               ; CODE XREF: NArchive::N7z::CLockedInStream::Release(void)+59j
.text:00003C7E                 xor     eax, eax
.text:00003C80
.text:00003C80 loc_3C80:                               ; CODE XREF: NArchive::N7z::CLockedInStream::Release(void)+38j
.text:00003C80                 add     esp, 10h
.text:00003C83                 cmp     ebp, esp
.text:00003C85                 call    __RTC_CheckEsp
.text:00003C8A                 mov     esp, ebp
.text:00003C8C                 pop     ebp
.text:00003C8D                 retn    4
.text:00003C8D ?Release@CLockedInStream@N7z@NArchive@@UAGKXZ endp
.text:00003C8D
.text:00003C8D _text           ends
.text:00003C8D
.text:00003C90 ; ===========================================================================
.text:00003C90
.text:00003C90 ; Segment type: Pure code
.text:00003C90 ; Segment permissions: Read/Execute
.text:00003C90 _text           segment para public 'CODE' use32
.text:00003C90                 assume cs:_text
.text:00003C90                 ;org 3C90h
.text:00003C90 ; COMDAT (pick any)
.text:00003C90                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003C90
.text:00003C90 ; =============== S U B R O U T I N E =======================================
.text:00003C90
.text:00003C90 ; Attributes: bp-based frame
.text:00003C90
.text:00003C90 ; public: void * __thiscall NArchive::N7z::CLockedInStream::`scalar deleting destructor'(unsigned int)
.text:00003C90                 public ??_GCLockedInStream@N7z@NArchive@@QAEPAXI@Z
.text:00003C90 ??_GCLockedInStream@N7z@NArchive@@QAEPAXI@Z proc near
.text:00003C90                                         ; CODE XREF: NArchive::N7z::CLockedInStream::Release(void)+51p
.text:00003C90
.text:00003C90 var_4           = dword ptr -4
.text:00003C90 arg_0           = dword ptr  8
.text:00003C90
.text:00003C90                 push    ebp
.text:00003C91                 mov     ebp, esp
.text:00003C93                 push    ecx
.text:00003C94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003C9B                 mov     [ebp+var_4], ecx
.text:00003C9E                 mov     ecx, [ebp+var_4] ; this
.text:00003CA1                 call    ??1CLockedInStream@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CLockedInStream::~CLockedInStream(void)
.text:00003CA6                 mov     eax, [ebp+arg_0]
.text:00003CA9                 and     eax, 1
.text:00003CAC                 jz      short loc_3CBA
.text:00003CAE                 mov     ecx, [ebp+var_4]
.text:00003CB1                 push    ecx             ; void *
.text:00003CB2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003CB7                 add     esp, 4
.text:00003CBA
.text:00003CBA loc_3CBA:                               ; CODE XREF: NArchive::N7z::CLockedInStream::`scalar deleting destructor'(uint)+1Cj
.text:00003CBA                 mov     eax, [ebp+var_4]
.text:00003CBD                 add     esp, 4
.text:00003CC0                 cmp     ebp, esp
.text:00003CC2                 call    __RTC_CheckEsp
.text:00003CC7                 mov     esp, ebp
.text:00003CC9                 pop     ebp
.text:00003CCA                 retn    4
.text:00003CCA ??_GCLockedInStream@N7z@NArchive@@QAEPAXI@Z endp
.text:00003CCA
.text:00003CCA ; ---------------------------------------------------------------------------
.text:00003CCD                 align 10h
.text:00003CCD _text           ends
.text:00003CCD
.text:00003CD0 ; ===========================================================================
.text:00003CD0
.text:00003CD0 ; Segment type: Pure code
.text:00003CD0 ; Segment permissions: Read/Execute
.text:00003CD0 _text           segment para public 'CODE' use32
.text:00003CD0                 assume cs:_text
.text:00003CD0                 ;org 3CD0h
.text:00003CD0 ; COMDAT (pick any)
.text:00003CD0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003CD0
.text:00003CD0 ; =============== S U B R O U T I N E =======================================
.text:00003CD0
.text:00003CD0 ; Attributes: bp-based frame
.text:00003CD0
.text:00003CD0 ; _DWORD __thiscall NArchive::N7z::CLockedInStream::~CLockedInStream(NArchive::N7z::CLockedInStream *__hidden this)
.text:00003CD0                 public ??1CLockedInStream@N7z@NArchive@@QAE@XZ
.text:00003CD0 ??1CLockedInStream@N7z@NArchive@@QAE@XZ proc near
.text:00003CD0                                         ; CODE XREF: NArchive::N7z::CLockedInStream::`scalar deleting destructor'(uint)+11p
.text:00003CD0
.text:00003CD0 var_10          = dword ptr -10h
.text:00003CD0 var_C           = dword ptr -0Ch
.text:00003CD0 var_4           = dword ptr -4
.text:00003CD0
.text:00003CD0                 push    ebp
.text:00003CD1                 mov     ebp, esp
.text:00003CD3                 push    0FFFFFFFFh
.text:00003CD5                 push    offset __ehhandler$??1CLockedInStream@N7z@NArchive@@QAE@XZ
.text:00003CDA                 mov     eax, large fs:0
.text:00003CE0                 push    eax
.text:00003CE1                 push    ecx
.text:00003CE2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003CE9                 mov     eax, dword ptr ds:___security_cookie
.text:00003CEE                 xor     eax, ebp
.text:00003CF0                 push    eax
.text:00003CF1                 lea     eax, [ebp+var_C]
.text:00003CF4                 mov     large fs:0, eax
.text:00003CFA                 mov     [ebp+var_10], ecx
.text:00003CFD                 mov     [ebp+var_4], 0
.text:00003D04                 mov     ecx, [ebp+var_10]
.text:00003D07                 add     ecx, 18h        ; this
.text:00003D0A                 call    ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)
.text:00003D0F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003D16                 mov     ecx, [ebp+var_10]
.text:00003D19                 add     ecx, 8
.text:00003D1C                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00003D21                 mov     ecx, [ebp+var_C]
.text:00003D24                 mov     large fs:0, ecx
.text:00003D2B                 pop     ecx
.text:00003D2C                 add     esp, 10h
.text:00003D2F                 cmp     ebp, esp
.text:00003D31                 call    __RTC_CheckEsp
.text:00003D36                 mov     esp, ebp
.text:00003D38                 pop     ebp
.text:00003D39                 retn
.text:00003D39 ??1CLockedInStream@N7z@NArchive@@QAE@XZ endp
.text:00003D39
.text:00003D39 ; ---------------------------------------------------------------------------
.text:00003D3A                 align 4
.text:00003D3A _text           ends
.text:00003D3A
.text$x:00003D3C ; ===========================================================================
.text$x:00003D3C
.text$x:00003D3C ; Segment type: Pure code
.text$x:00003D3C ; Segment permissions: Read/Execute
.text$x:00003D3C _text$x         segment para public 'CODE' use32
.text$x:00003D3C                 assume cs:_text$x
.text$x:00003D3C                 ;org 3D3Ch
.text$x:00003D3C ; COMDAT (pick associative to section at 3CD0)
.text$x:00003D3C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00003D3C
.text$x:00003D3C ; =============== S U B R O U T I N E =======================================
.text$x:00003D3C
.text$x:00003D3C
.text$x:00003D3C __unwindfunclet$??1CLockedInStream@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00003D3C                                         ; DATA XREF: .xdata$x:00003D68o
.text$x:00003D3C                 mov     ecx, [ebp-10h]
.text$x:00003D3F                 add     ecx, 8
.text$x:00003D42                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:00003D42 __unwindfunclet$??1CLockedInStream@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00003D42
.text$x:00003D47
.text$x:00003D47 ; =============== S U B R O U T I N E =======================================
.text$x:00003D47
.text$x:00003D47
.text$x:00003D47 __ehhandler$??1CLockedInStream@N7z@NArchive@@QAE@XZ proc near
.text$x:00003D47                                         ; DATA XREF: NArchive::N7z::CLockedInStream::~CLockedInStream(void)+5o
.text$x:00003D47
.text$x:00003D47 arg_4           = dword ptr  8
.text$x:00003D47
.text$x:00003D47                 mov     edx, [esp+arg_4]
.text$x:00003D4B                 lea     eax, [edx+0Ch]
.text$x:00003D4E                 mov     ecx, [edx-8]
.text$x:00003D51                 xor     ecx, eax
.text$x:00003D53                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D58                 mov     eax, offset __ehfuncinfo$??1CLockedInStream@N7z@NArchive@@QAE@XZ
.text$x:00003D5D                 jmp     ___CxxFrameHandler3
.text$x:00003D5D __ehhandler$??1CLockedInStream@N7z@NArchive@@QAE@XZ endp
.text$x:00003D5D
.text$x:00003D5D ; ---------------------------------------------------------------------------
.text$x:00003D62                 align 4
.text$x:00003D62 _text$x         ends
.text$x:00003D62
.xdata$x:00003D64 ; ===========================================================================
.xdata$x:00003D64
.xdata$x:00003D64 ; Segment type: Pure data
.xdata$x:00003D64 ; Segment permissions: Read
.xdata$x:00003D64 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003D64                 assume cs:_xdata$x
.xdata$x:00003D64                 ;org 3D64h
.xdata$x:00003D64 ; COMDAT (pick associative to section at 3CD0)
.xdata$x:00003D64 __unwindtable$??1CLockedInStream@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003D64                                         ; DATA XREF: .xdata$x:00003D74o
.xdata$x:00003D65                 db 0FFh
.xdata$x:00003D66                 db 0FFh
.xdata$x:00003D67                 db 0FFh
.xdata$x:00003D68                 dd offset __unwindfunclet$??1CLockedInStream@N7z@NArchive@@QAE@XZ$0
.xdata$x:00003D6C __ehfuncinfo$??1CLockedInStream@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003D6C                                         ; DATA XREF: __ehhandler$??1CLockedInStream@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00003D6D                 db    5
.xdata$x:00003D6E                 db  93h ; ô
.xdata$x:00003D6F                 db  19h
.xdata$x:00003D70                 db    1
.xdata$x:00003D71                 db    0
.xdata$x:00003D72                 db    0
.xdata$x:00003D73                 db    0
.xdata$x:00003D74                 dd offset __unwindtable$??1CLockedInStream@N7z@NArchive@@QAE@XZ
.xdata$x:00003D78                 db    0
.xdata$x:00003D79                 db    0
.xdata$x:00003D7A                 db    0
.xdata$x:00003D7B                 db    0
.xdata$x:00003D7C                 db    0
.xdata$x:00003D7D                 db    0
.xdata$x:00003D7E                 db    0
.xdata$x:00003D7F                 db    0
.xdata$x:00003D80                 db    0
.xdata$x:00003D81                 db    0
.xdata$x:00003D82                 db    0
.xdata$x:00003D83                 db    0
.xdata$x:00003D84                 db    0
.xdata$x:00003D85                 db    0
.xdata$x:00003D86                 db    0
.xdata$x:00003D87                 db    0
.xdata$x:00003D88                 db    0
.xdata$x:00003D89                 db    0
.xdata$x:00003D8A                 db    0
.xdata$x:00003D8B                 db    0
.xdata$x:00003D8C                 db    1
.xdata$x:00003D8D                 db    0
.xdata$x:00003D8E                 db    0
.xdata$x:00003D8F                 db    0
.xdata$x:00003D8F _xdata$x        ends
.xdata$x:00003D8F
.text:00003D90 ; ===========================================================================
.text:00003D90
.text:00003D90 ; Segment type: Pure code
.text:00003D90 ; Segment permissions: Read/Execute
.text:00003D90 _text           segment para public 'CODE' use32
.text:00003D90                 assume cs:_text
.text:00003D90                 ;org 3D90h
.text:00003D90 ; COMDAT (pick any)
.text:00003D90                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003D90
.text:00003D90 ; =============== S U B R O U T I N E =======================================
.text:00003D90
.text:00003D90 ; Attributes: bp-based frame
.text:00003D90
.text:00003D90 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSection::~CCriticalSection(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00003D90                 public ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ
.text:00003D90 ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
.text:00003D90                                         ; CODE XREF: NArchive::N7z::CLockedInStream::~CLockedInStream(void)+3Ap
.text:00003D90
.text:00003D90 lpCriticalSection= dword ptr -4
.text:00003D90
.text:00003D90                 push    ebp
.text:00003D91                 mov     ebp, esp
.text:00003D93                 push    ecx
.text:00003D94                 push    esi
.text:00003D95                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00003D9C                 mov     [ebp+lpCriticalSection], ecx
.text:00003D9F                 mov     esi, esp
.text:00003DA1                 mov     eax, [ebp+lpCriticalSection]
.text:00003DA4                 push    eax             ; lpCriticalSection
.text:00003DA5                 call    dword ptr ds:__imp__DeleteCriticalSection@4 ; DeleteCriticalSection(x)
.text:00003DAB                 cmp     esi, esp
.text:00003DAD                 call    __RTC_CheckEsp
.text:00003DB2                 pop     esi
.text:00003DB3                 add     esp, 4
.text:00003DB6                 cmp     ebp, esp
.text:00003DB8                 call    __RTC_CheckEsp
.text:00003DBD                 mov     esp, ebp
.text:00003DBF                 pop     ebp
.text:00003DC0                 retn
.text:00003DC0 ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ endp
.text:00003DC0
.text:00003DC0 ; ---------------------------------------------------------------------------
.text:00003DC1                 align 4
.text:00003DC1 _text           ends
.text:00003DC1
.text:00003DC4 ; ===========================================================================
.text:00003DC4
.text:00003DC4 ; Segment type: Pure code
.text:00003DC4 ; Segment permissions: Read/Execute
.text:00003DC4 _text           segment para public 'CODE' use32
.text:00003DC4                 assume cs:_text
.text:00003DC4                 ;org 3DC4h
.text:00003DC4 ; COMDAT (pick any)
.text:00003DC4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003DC4
.text:00003DC4 ; =============== S U B R O U T I N E =======================================
.text:00003DC4
.text:00003DC4 ; Attributes: bp-based frame
.text:00003DC4
.text:00003DC4 ; _DWORD __thiscall NArchive::N7z::CLockedSequentialInStreamMT::CLockedSequentialInStreamMT(NArchive::N7z::CLockedSequentialInStreamMT *__hidden this)
.text:00003DC4                 public ??0CLockedSequentialInStreamMT@N7z@NArchive@@QAE@XZ
.text:00003DC4 ??0CLockedSequentialInStreamMT@N7z@NArchive@@QAE@XZ proc near
.text:00003DC4                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1213p
.text:00003DC4
.text:00003DC4 var_4           = dword ptr -4
.text:00003DC4
.text:00003DC4                 push    ebp
.text:00003DC5                 mov     ebp, esp
.text:00003DC7                 push    ecx
.text:00003DC8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003DCF                 mov     [ebp+var_4], ecx
.text:00003DD2                 mov     ecx, [ebp+var_4] ; this
.text:00003DD5                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00003DDA                 mov     ecx, [ebp+var_4]
.text:00003DDD                 add     ecx, 4          ; this
.text:00003DE0                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00003DE5                 mov     eax, [ebp+var_4]
.text:00003DE8                 mov     dword ptr [eax], offset ??_7CLockedSequentialInStreamMT@N7z@NArchive@@6B@ ; const NArchive::N7z::CLockedSequentialInStreamMT::`vftable'
.text:00003DEE                 mov     ecx, [ebp+var_4]
.text:00003DF1                 add     ecx, 18h
.text:00003DF4                 call    ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>(void)
.text:00003DF9                 mov     eax, [ebp+var_4]
.text:00003DFC                 add     esp, 4
.text:00003DFF                 cmp     ebp, esp
.text:00003E01                 call    __RTC_CheckEsp
.text:00003E06                 mov     esp, ebp
.text:00003E08                 pop     ebp
.text:00003E09                 retn
.text:00003E09 ??0CLockedSequentialInStreamMT@N7z@NArchive@@QAE@XZ endp
.text:00003E09
.text:00003E09 ; ---------------------------------------------------------------------------
.text:00003E0A                 align 4
.text:00003E0A _text           ends
.text:00003E0A
.rdata:00003E0C ; ===========================================================================
.rdata:00003E0C
.rdata:00003E0C ; Segment type: Pure data
.rdata:00003E0C ; Segment permissions: Read
.rdata:00003E0C _rdata          segment dword public 'DATA' use32
.rdata:00003E0C                 assume cs:_rdata
.rdata:00003E0C                 ;org 3E0Ch
.rdata:00003E0C ; COMDAT (pick largest)
.rdata:00003E0C                 dd offset ??_R4CLockedSequentialInStreamMT@N7z@NArchive@@6B@ ; const NArchive::N7z::CLockedSequentialInStreamMT::`RTTI Complete Object Locator'
.rdata:00003E10                 public ??_7CLockedSequentialInStreamMT@N7z@NArchive@@6B@
.rdata:00003E10 ; const NArchive::N7z::CLockedSequentialInStreamMT::`vftable'
.rdata:00003E10 ??_7CLockedSequentialInStreamMT@N7z@NArchive@@6B@ dd offset ?QueryInterface@CLockedSequentialInStreamMT@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:00003E10                                         ; DATA XREF: NArchive::N7z::CLockedSequentialInStreamMT::CLockedSequentialInStreamMT(void)+24o
.rdata:00003E10                                         ; NArchive::N7z::CLockedSequentialInStreamMT::QueryInterface(_GUID const &,void * *)
.rdata:00003E14                 dd offset ?AddRef@CLockedSequentialInStreamMT@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CLockedSequentialInStreamMT::AddRef(void)
.rdata:00003E18                 dd offset ?Release@CLockedSequentialInStreamMT@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CLockedSequentialInStreamMT::Release(void)
.rdata:00003E1C                 dd offset ?Read@CLockedSequentialInStreamMT@N7z@NArchive@@UAGJPAXIPAI@Z ; NArchive::N7z::CLockedSequentialInStreamMT::Read(void *,uint,uint *)
.rdata:00003E1C _rdata          ends
.rdata:00003E1C
.rdata$r:00003E20 ; ===========================================================================
.rdata$r:00003E20
.rdata$r:00003E20 ; Segment type: Pure data
.rdata$r:00003E20 ; Segment permissions: Read
.rdata$r:00003E20 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003E20                 assume cs:_rdata$r
.rdata$r:00003E20                 ;org 3E20h
.rdata$r:00003E20 ; COMDAT (pick any)
.rdata$r:00003E20                 public ??_R4CLockedSequentialInStreamMT@N7z@NArchive@@6B@
.rdata$r:00003E20 ; const NArchive::N7z::CLockedSequentialInStreamMT::`RTTI Complete Object Locator'
.rdata$r:00003E20 ??_R4CLockedSequentialInStreamMT@N7z@NArchive@@6B@ db    0
.rdata$r:00003E20                                         ; DATA XREF: .rdata:00003E0Co
.rdata$r:00003E21                 db    0
.rdata$r:00003E22                 db    0
.rdata$r:00003E23                 db    0
.rdata$r:00003E24                 db    0
.rdata$r:00003E25                 db    0
.rdata$r:00003E26                 db    0
.rdata$r:00003E27                 db    0
.rdata$r:00003E28                 db    0
.rdata$r:00003E29                 db    0
.rdata$r:00003E2A                 db    0
.rdata$r:00003E2B                 db    0
.rdata$r:00003E2C                 dd offset ??_R0?AVCLockedSequentialInStreamMT@N7z@NArchive@@@8 ; NArchive::N7z::CLockedSequentialInStreamMT `RTTI Type Descriptor'
.rdata$r:00003E30                 dd offset ??_R3CLockedSequentialInStreamMT@N7z@NArchive@@8 ; NArchive::N7z::CLockedSequentialInStreamMT::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003E30 _rdata$r        ends
.rdata$r:00003E30
.data:00003E34 ; ===========================================================================
.data:00003E34
.data:00003E34 ; Segment type: Pure data
.data:00003E34 ; Segment permissions: Read/Write
.data:00003E34 _data           segment dword public 'DATA' use32
.data:00003E34                 assume cs:_data
.data:00003E34                 ;org 3E34h
.data:00003E34 ; COMDAT (pick any)
.data:00003E34                 public ??_R0?AVCLockedSequentialInStreamMT@N7z@NArchive@@@8
.data:00003E34 ; class NArchive::N7z::CLockedSequentialInStreamMT `RTTI Type Descriptor'
.data:00003E34 ??_R0?AVCLockedSequentialInStreamMT@N7z@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00003E34                                         ; DATA XREF: .rdata$r:00003E2Co
.data:00003E34                                         ; .rdata$r:NArchive::N7z::CLockedSequentialInStreamMT::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003E34                                         ; const type_info::`vftable'
.data:00003E38                 db    0
.data:00003E39                 db    0
.data:00003E3A                 db    0
.data:00003E3B                 db    0
.data:00003E3C                 db  2Eh ; .
.data:00003E3D                 db  3Fh ; ?
.data:00003E3E                 db  41h ; A
.data:00003E3F                 db  56h ; V
.data:00003E40                 db  43h ; C
.data:00003E41                 db  4Ch ; L
.data:00003E42                 db  6Fh ; o
.data:00003E43                 db  63h ; c
.data:00003E44                 db  6Bh ; k
.data:00003E45                 db  65h ; e
.data:00003E46                 db  64h ; d
.data:00003E47                 db  53h ; S
.data:00003E48                 db  65h ; e
.data:00003E49                 db  71h ; q
.data:00003E4A                 db  75h ; u
.data:00003E4B                 db  65h ; e
.data:00003E4C                 db  6Eh ; n
.data:00003E4D                 db  74h ; t
.data:00003E4E                 db  69h ; i
.data:00003E4F                 db  61h ; a
.data:00003E50                 db  6Ch ; l
.data:00003E51                 db  49h ; I
.data:00003E52                 db  6Eh ; n
.data:00003E53                 db  53h ; S
.data:00003E54                 db  74h ; t
.data:00003E55                 db  72h ; r
.data:00003E56                 db  65h ; e
.data:00003E57                 db  61h ; a
.data:00003E58                 db  6Dh ; m
.data:00003E59                 db  4Dh ; M
.data:00003E5A                 db  54h ; T
.data:00003E5B                 db  40h ; @
.data:00003E5C                 db  4Eh ; N
.data:00003E5D                 db  37h ; 7
.data:00003E5E                 db  7Ah ; z
.data:00003E5F                 db  40h ; @
.data:00003E60                 db  4Eh ; N
.data:00003E61                 db  41h ; A
.data:00003E62                 db  72h ; r
.data:00003E63                 db  63h ; c
.data:00003E64                 db  68h ; h
.data:00003E65                 db  69h ; i
.data:00003E66                 db  76h ; v
.data:00003E67                 db  65h ; e
.data:00003E68                 db  40h ; @
.data:00003E69                 db  40h ; @
.data:00003E6A                 db    0
.data:00003E6B                 align 4
.data:00003E6B _data           ends
.data:00003E6B
.rdata$r:00003E6C ; ===========================================================================
.rdata$r:00003E6C
.rdata$r:00003E6C ; Segment type: Pure data
.rdata$r:00003E6C ; Segment permissions: Read
.rdata$r:00003E6C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003E6C                 assume cs:_rdata$r
.rdata$r:00003E6C                 ;org 3E6Ch
.rdata$r:00003E6C ; COMDAT (pick any)
.rdata$r:00003E6C                 public ??_R3CLockedSequentialInStreamMT@N7z@NArchive@@8
.rdata$r:00003E6C ; NArchive::N7z::CLockedSequentialInStreamMT::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003E6C ??_R3CLockedSequentialInStreamMT@N7z@NArchive@@8 db    0
.rdata$r:00003E6C                                         ; DATA XREF: .rdata$r:00003E30o
.rdata$r:00003E6C                                         ; .rdata$r:00003EA8o
.rdata$r:00003E6D                 db    0
.rdata$r:00003E6E                 db    0
.rdata$r:00003E6F                 db    0
.rdata$r:00003E70                 db    1
.rdata$r:00003E71                 db    0
.rdata$r:00003E72                 db    0
.rdata$r:00003E73                 db    0
.rdata$r:00003E74                 db    4
.rdata$r:00003E75                 db    0
.rdata$r:00003E76                 db    0
.rdata$r:00003E77                 db    0
.rdata$r:00003E78                 dd offset ??_R2CLockedSequentialInStreamMT@N7z@NArchive@@8 ; NArchive::N7z::CLockedSequentialInStreamMT::`RTTI Base Class Array'
.rdata$r:00003E78 _rdata$r        ends
.rdata$r:00003E78
.rdata$r:00003E7C ; ===========================================================================
.rdata$r:00003E7C
.rdata$r:00003E7C ; Segment type: Pure data
.rdata$r:00003E7C ; Segment permissions: Read
.rdata$r:00003E7C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003E7C                 assume cs:_rdata$r
.rdata$r:00003E7C                 ;org 3E7Ch
.rdata$r:00003E7C ; COMDAT (pick any)
.rdata$r:00003E7C                 public ??_R2CLockedSequentialInStreamMT@N7z@NArchive@@8
.rdata$r:00003E7C ; NArchive::N7z::CLockedSequentialInStreamMT::`RTTI Base Class Array'
.rdata$r:00003E7C ??_R2CLockedSequentialInStreamMT@N7z@NArchive@@8 dd offset ??_R1A@?0A@EA@CLockedSequentialInStreamMT@N7z@NArchive@@8
.rdata$r:00003E7C                                         ; DATA XREF: .rdata$r:00003E78o
.rdata$r:00003E7C                                         ; NArchive::N7z::CLockedSequentialInStreamMT::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003E80                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003E84                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003E88                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00003E8C                 db    0
.rdata$r:00003E8D                 align 10h
.rdata$r:00003E8D _rdata$r        ends
.rdata$r:00003E8D
.rdata$r:00003E90 ; ===========================================================================
.rdata$r:00003E90
.rdata$r:00003E90 ; Segment type: Pure data
.rdata$r:00003E90 ; Segment permissions: Read
.rdata$r:00003E90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003E90                 assume cs:_rdata$r
.rdata$r:00003E90                 ;org 3E90h
.rdata$r:00003E90 ; COMDAT (pick any)
.rdata$r:00003E90                 public ??_R1A@?0A@EA@CLockedSequentialInStreamMT@N7z@NArchive@@8
.rdata$r:00003E90 ; NArchive::N7z::CLockedSequentialInStreamMT::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003E90 ??_R1A@?0A@EA@CLockedSequentialInStreamMT@N7z@NArchive@@8 dd offset ??_R0?AVCLockedSequentialInStreamMT@N7z@NArchive@@@8
.rdata$r:00003E90                                         ; DATA XREF: .rdata$r:NArchive::N7z::CLockedSequentialInStreamMT::`RTTI Base Class Array'o
.rdata$r:00003E90                                         ; NArchive::N7z::CLockedSequentialInStreamMT `RTTI Type Descriptor'
.rdata$r:00003E94                 db    3
.rdata$r:00003E95                 db    0
.rdata$r:00003E96                 db    0
.rdata$r:00003E97                 db    0
.rdata$r:00003E98                 db    0
.rdata$r:00003E99                 db    0
.rdata$r:00003E9A                 db    0
.rdata$r:00003E9B                 db    0
.rdata$r:00003E9C                 db 0FFh
.rdata$r:00003E9D                 db 0FFh
.rdata$r:00003E9E                 db 0FFh
.rdata$r:00003E9F                 db 0FFh
.rdata$r:00003EA0                 db    0
.rdata$r:00003EA1                 db    0
.rdata$r:00003EA2                 db    0
.rdata$r:00003EA3                 db    0
.rdata$r:00003EA4                 db  40h ; @
.rdata$r:00003EA5                 db    0
.rdata$r:00003EA6                 db    0
.rdata$r:00003EA7                 db    0
.rdata$r:00003EA8                 dd offset ??_R3CLockedSequentialInStreamMT@N7z@NArchive@@8 ; NArchive::N7z::CLockedSequentialInStreamMT::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003EA8 _rdata$r        ends
.rdata$r:00003EA8
.rdata$r:00003EAC ; ===========================================================================
.rdata$r:00003EAC
.rdata$r:00003EAC ; Segment type: Pure data
.rdata$r:00003EAC ; Segment permissions: Read
.rdata$r:00003EAC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003EAC                 assume cs:_rdata$r
.rdata$r:00003EAC                 ;org 3EACh
.rdata$r:00003EAC ; COMDAT (pick any)
.rdata$r:00003EAC                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00003EAC ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003EAC ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00003EAC                                         ; DATA XREF: .rdata$r:00003E80o
.rdata$r:00003EAC                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Array'o ...
.rdata$r:00003EAC                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00003EB0                 db    1
.rdata$r:00003EB1                 db    0
.rdata$r:00003EB2                 db    0
.rdata$r:00003EB3                 db    0
.rdata$r:00003EB4                 db    0
.rdata$r:00003EB5                 db    0
.rdata$r:00003EB6                 db    0
.rdata$r:00003EB7                 db    0
.rdata$r:00003EB8                 db 0FFh
.rdata$r:00003EB9                 db 0FFh
.rdata$r:00003EBA                 db 0FFh
.rdata$r:00003EBB                 db 0FFh
.rdata$r:00003EBC                 db    0
.rdata$r:00003EBD                 db    0
.rdata$r:00003EBE                 db    0
.rdata$r:00003EBF                 db    0
.rdata$r:00003EC0                 db  40h ; @
.rdata$r:00003EC1                 db    0
.rdata$r:00003EC2                 db    0
.rdata$r:00003EC3                 db    0
.rdata$r:00003EC4                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003EC4 _rdata$r        ends
.rdata$r:00003EC4
.data:00003EC8 ; ===========================================================================
.data:00003EC8
.data:00003EC8 ; Segment type: Pure data
.data:00003EC8 ; Segment permissions: Read/Write
.data:00003EC8 _data           segment dword public 'DATA' use32
.data:00003EC8                 assume cs:_data
.data:00003EC8                 ;org 3EC8h
.data:00003EC8 ; COMDAT (pick any)
.data:00003EC8                 public ??_R0?AUISequentialInStream@@@8
.data:00003EC8 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:00003EC8 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00003EC8                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003EC8                                         ; .rdata$r:00003F58o
.data:00003EC8                                         ; const type_info::`vftable'
.data:00003ECC                 align 10h
.data:00003ED0 a_?auisequentia db '.?AUISequentialInStream@@',0
.data:00003EEA                 align 4
.data:00003EEA _data           ends
.data:00003EEA
.rdata$r:00003EEC ; ===========================================================================
.rdata$r:00003EEC
.rdata$r:00003EEC ; Segment type: Pure data
.rdata$r:00003EEC ; Segment permissions: Read
.rdata$r:00003EEC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003EEC                 assume cs:_rdata$r
.rdata$r:00003EEC                 ;org 3EECh
.rdata$r:00003EEC ; COMDAT (pick any)
.rdata$r:00003EEC                 public ??_R3ISequentialInStream@@8
.rdata$r:00003EEC ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003EEC ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00003EC4o
.rdata$r:00003EEC                                         ; .rdata$r:00003F5Co
.rdata$r:00003EED                 db    0
.rdata$r:00003EEE                 db    0
.rdata$r:00003EEF                 db    0
.rdata$r:00003EF0                 db    0
.rdata$r:00003EF1                 db    0
.rdata$r:00003EF2                 db    0
.rdata$r:00003EF3                 db    0
.rdata$r:00003EF4                 db    2
.rdata$r:00003EF5                 db    0
.rdata$r:00003EF6                 db    0
.rdata$r:00003EF7                 db    0
.rdata$r:00003EF8                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00003EF8 _rdata$r        ends
.rdata$r:00003EF8
.rdata$r:00003EFC ; ===========================================================================
.rdata$r:00003EFC
.rdata$r:00003EFC ; Segment type: Pure data
.rdata$r:00003EFC ; Segment permissions: Read
.rdata$r:00003EFC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003EFC                 assume cs:_rdata$r
.rdata$r:00003EFC                 ;org 3EFCh
.rdata$r:00003EFC ; COMDAT (pick any)
.rdata$r:00003EFC                 public ??_R2ISequentialInStream@@8
.rdata$r:00003EFC ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00003EFC ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00003EFC                                         ; DATA XREF: .rdata$r:00003EF8o
.rdata$r:00003EFC                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003F00                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003F04                 db    0
.rdata$r:00003F05                 align 4
.rdata$r:00003F05 _rdata$r        ends
.rdata$r:00003F05
.text:00003F08 ; ===========================================================================
.text:00003F08
.text:00003F08 ; Segment type: Pure code
.text:00003F08 ; Segment permissions: Read/Execute
.text:00003F08 _text           segment para public 'CODE' use32
.text:00003F08                 assume cs:_text
.text:00003F08                 ;org 3F08h
.text:00003F08 ; COMDAT (pick any)
.text:00003F08                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003F08
.text:00003F08 ; =============== S U B R O U T I N E =======================================
.text:00003F08
.text:00003F08 ; Attributes: bp-based frame
.text:00003F08
.text:00003F08 ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:00003F08                 public ??0ISequentialInStream@@QAE@XZ
.text:00003F08 ??0ISequentialInStream@@QAE@XZ proc near
.text:00003F08                                         ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::CLockedSequentialInStreamMT(void)+11p
.text:00003F08                                         ; NArchive::N7z::CLockedSequentialInStreamST::CLockedSequentialInStreamST(void)+11p ...
.text:00003F08
.text:00003F08 var_4           = dword ptr -4
.text:00003F08
.text:00003F08                 push    ebp
.text:00003F09                 mov     ebp, esp
.text:00003F0B                 push    ecx
.text:00003F0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003F13                 mov     [ebp+var_4], ecx
.text:00003F16                 mov     ecx, [ebp+var_4]
.text:00003F19                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00003F1E                 mov     eax, [ebp+var_4]
.text:00003F21                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:00003F27                 mov     eax, [ebp+var_4]
.text:00003F2A                 add     esp, 4
.text:00003F2D                 cmp     ebp, esp
.text:00003F2F                 call    __RTC_CheckEsp
.text:00003F34                 mov     esp, ebp
.text:00003F36                 pop     ebp
.text:00003F37                 retn
.text:00003F37 ??0ISequentialInStream@@QAE@XZ endp
.text:00003F37
.text:00003F37 _text           ends
.text:00003F37
.rdata:00003F38 ; ===========================================================================
.rdata:00003F38
.rdata:00003F38 ; Segment type: Pure data
.rdata:00003F38 ; Segment permissions: Read
.rdata:00003F38 _rdata          segment dword public 'DATA' use32
.rdata:00003F38                 assume cs:_rdata
.rdata:00003F38                 ;org 3F38h
.rdata:00003F38 ; COMDAT (pick largest)
.rdata:00003F38                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:00003F3C                 public ??_7ISequentialInStream@@6B@
.rdata:00003F3C ; const ISequentialInStream::`vftable'
.rdata:00003F3C ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:00003F3C                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:00003F40                 dd offset __purecall
.rdata:00003F44                 dd offset __purecall
.rdata:00003F48                 dd offset __purecall
.rdata:00003F48 _rdata          ends
.rdata:00003F48
.rdata$r:00003F4C ; ===========================================================================
.rdata$r:00003F4C
.rdata$r:00003F4C ; Segment type: Pure data
.rdata$r:00003F4C ; Segment permissions: Read
.rdata$r:00003F4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003F4C                 assume cs:_rdata$r
.rdata$r:00003F4C                 ;org 3F4Ch
.rdata$r:00003F4C ; COMDAT (pick any)
.rdata$r:00003F4C                 public ??_R4ISequentialInStream@@6B@
.rdata$r:00003F4C ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:00003F4C ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:00003F38o
.rdata$r:00003F4D                 db    0
.rdata$r:00003F4E                 db    0
.rdata$r:00003F4F                 db    0
.rdata$r:00003F50                 db    0
.rdata$r:00003F51                 db    0
.rdata$r:00003F52                 db    0
.rdata$r:00003F53                 db    0
.rdata$r:00003F54                 db    0
.rdata$r:00003F55                 db    0
.rdata$r:00003F56                 db    0
.rdata$r:00003F57                 db    0
.rdata$r:00003F58                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00003F5C                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003F5C _rdata$r        ends
.rdata$r:00003F5C
.text:00003F60 ; ===========================================================================
.text:00003F60
.text:00003F60 ; Segment type: Pure code
.text:00003F60 ; Segment permissions: Read/Execute
.text:00003F60 _text           segment para public 'CODE' use32
.text:00003F60                 assume cs:_text
.text:00003F60                 ;org 3F60h
.text:00003F60 ; COMDAT (pick any)
.text:00003F60                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003F60
.text:00003F60 ; =============== S U B R O U T I N E =======================================
.text:00003F60
.text:00003F60 ; Attributes: bp-based frame
.text:00003F60
.text:00003F60 ; __int32 __stdcall NArchive::N7z::CLockedSequentialInStreamMT::QueryInterface(NArchive::N7z::CLockedSequentialInStreamMT *this, const struct _GUID *Buf1, void **)
.text:00003F60                 public ?QueryInterface@CLockedSequentialInStreamMT@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00003F60 ?QueryInterface@CLockedSequentialInStreamMT@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00003F60                                         ; DATA XREF: .rdata:const NArchive::N7z::CLockedSequentialInStreamMT::`vftable'o
.text:00003F60
.text:00003F60 this            = dword ptr  8
.text:00003F60 Buf1            = dword ptr  0Ch
.text:00003F60 arg_8           = dword ptr  10h
.text:00003F60
.text:00003F60                 push    ebp
.text:00003F61                 mov     ebp, esp
.text:00003F63                 mov     eax, [ebp+arg_8]
.text:00003F66                 mov     dword ptr [eax], 0
.text:00003F6C                 push    offset _IID_IUnknown ; Buf2
.text:00003F71                 mov     ecx, [ebp+Buf1]
.text:00003F74                 push    ecx             ; Buf1
.text:00003F75                 call    ___@8           ; __(x,x)
.text:00003F7A                 test    eax, eax
.text:00003F7C                 jz      short loc_3F88
.text:00003F7E                 mov     edx, [ebp+arg_8]
.text:00003F81                 mov     eax, [ebp+this]
.text:00003F84                 mov     [edx], eax
.text:00003F86                 jmp     short loc_3FAB
.text:00003F88 ; ---------------------------------------------------------------------------
.text:00003F88
.text:00003F88 loc_3F88:                               ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::QueryInterface(_GUID const &,void * *)+1Cj
.text:00003F88                 push    offset _IID_ISequentialInStream ; Buf2
.text:00003F8D                 mov     ecx, [ebp+Buf1]
.text:00003F90                 push    ecx             ; Buf1
.text:00003F91                 call    ___@8           ; __(x,x)
.text:00003F96                 test    eax, eax
.text:00003F98                 jz      short loc_3FA4
.text:00003F9A                 mov     edx, [ebp+arg_8]
.text:00003F9D                 mov     eax, [ebp+this]
.text:00003FA0                 mov     [edx], eax
.text:00003FA2                 jmp     short loc_3FAB
.text:00003FA4 ; ---------------------------------------------------------------------------
.text:00003FA4
.text:00003FA4 loc_3FA4:                               ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::QueryInterface(_GUID const &,void * *)+38j
.text:00003FA4                 mov     eax, 80004002h
.text:00003FA9                 jmp     short loc_3FBC
.text:00003FAB ; ---------------------------------------------------------------------------
.text:00003FAB
.text:00003FAB loc_3FAB:                               ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::QueryInterface(_GUID const &,void * *)+26j
.text:00003FAB                                         ; NArchive::N7z::CLockedSequentialInStreamMT::QueryInterface(_GUID const &,void * *)+42j
.text:00003FAB                 mov     ecx, [ebp+this]
.text:00003FAE                 mov     edx, [ecx+4]
.text:00003FB1                 add     edx, 1
.text:00003FB4                 mov     eax, [ebp+this]
.text:00003FB7                 mov     [eax+4], edx
.text:00003FBA                 xor     eax, eax
.text:00003FBC
.text:00003FBC loc_3FBC:                               ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::QueryInterface(_GUID const &,void * *)+49j
.text:00003FBC                 cmp     ebp, esp
.text:00003FBE                 call    __RTC_CheckEsp
.text:00003FC3                 pop     ebp
.text:00003FC4                 retn    0Ch
.text:00003FC4 ?QueryInterface@CLockedSequentialInStreamMT@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:00003FC4
.text:00003FC4 ; ---------------------------------------------------------------------------
.text:00003FC7                 align 4
.text:00003FC7 _text           ends
.text:00003FC7
.text:00003FC8 ; ===========================================================================
.text:00003FC8
.text:00003FC8 ; Segment type: Pure code
.text:00003FC8 ; Segment permissions: Read/Execute
.text:00003FC8 _text           segment para public 'CODE' use32
.text:00003FC8                 assume cs:_text
.text:00003FC8                 ;org 3FC8h
.text:00003FC8 ; COMDAT (pick any)
.text:00003FC8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003FC8
.text:00003FC8 ; =============== S U B R O U T I N E =======================================
.text:00003FC8
.text:00003FC8 ; Attributes: bp-based frame
.text:00003FC8
.text:00003FC8 ; unsigned __int32 __stdcall NArchive::N7z::CLockedSequentialInStreamMT::AddRef(NArchive::N7z::CLockedSequentialInStreamMT *this)
.text:00003FC8                 public ?AddRef@CLockedSequentialInStreamMT@N7z@NArchive@@UAGKXZ
.text:00003FC8 ?AddRef@CLockedSequentialInStreamMT@N7z@NArchive@@UAGKXZ proc near
.text:00003FC8                                         ; DATA XREF: .rdata:00003E14o
.text:00003FC8
.text:00003FC8 var_4           = dword ptr -4
.text:00003FC8 this            = dword ptr  8
.text:00003FC8
.text:00003FC8                 push    ebp
.text:00003FC9                 mov     ebp, esp
.text:00003FCB                 push    ecx
.text:00003FCC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003FD3                 mov     eax, [ebp+this]
.text:00003FD6                 mov     ecx, [eax+4]
.text:00003FD9                 add     ecx, 1
.text:00003FDC                 mov     [ebp+var_4], ecx
.text:00003FDF                 mov     edx, [ebp+this]
.text:00003FE2                 mov     eax, [ebp+var_4]
.text:00003FE5                 mov     [edx+4], eax
.text:00003FE8                 mov     eax, [ebp+var_4]
.text:00003FEB                 mov     esp, ebp
.text:00003FED                 pop     ebp
.text:00003FEE                 retn    4
.text:00003FEE ?AddRef@CLockedSequentialInStreamMT@N7z@NArchive@@UAGKXZ endp
.text:00003FEE
.text:00003FEE ; ---------------------------------------------------------------------------
.text:00003FF1                 align 4
.text:00003FF1 _text           ends
.text:00003FF1
.text:00003FF4 ; ===========================================================================
.text:00003FF4
.text:00003FF4 ; Segment type: Pure code
.text:00003FF4 ; Segment permissions: Read/Execute
.text:00003FF4 _text           segment para public 'CODE' use32
.text:00003FF4                 assume cs:_text
.text:00003FF4                 ;org 3FF4h
.text:00003FF4 ; COMDAT (pick any)
.text:00003FF4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003FF4
.text:00003FF4 ; =============== S U B R O U T I N E =======================================
.text:00003FF4
.text:00003FF4 ; Attributes: bp-based frame
.text:00003FF4
.text:00003FF4 ; unsigned __int32 __stdcall NArchive::N7z::CLockedSequentialInStreamMT::Release(NArchive::N7z::CLockedSequentialInStreamMT *this)
.text:00003FF4                 public ?Release@CLockedSequentialInStreamMT@N7z@NArchive@@UAGKXZ
.text:00003FF4 ?Release@CLockedSequentialInStreamMT@N7z@NArchive@@UAGKXZ proc near
.text:00003FF4                                         ; DATA XREF: .rdata:00003E18o
.text:00003FF4
.text:00003FF4 var_10          = dword ptr -10h
.text:00003FF4 var_C           = dword ptr -0Ch
.text:00003FF4 var_8           = dword ptr -8
.text:00003FF4 var_4           = dword ptr -4
.text:00003FF4 this            = dword ptr  8
.text:00003FF4
.text:00003FF4                 push    ebp
.text:00003FF5                 mov     ebp, esp
.text:00003FF7                 sub     esp, 10h
.text:00003FFA                 mov     eax, 0CCCCCCCCh
.text:00003FFF                 mov     [ebp+var_10], eax
.text:00004002                 mov     [ebp+var_C], eax
.text:00004005                 mov     [ebp+var_8], eax
.text:00004008                 mov     [ebp+var_4], eax
.text:0000400B                 mov     eax, [ebp+this]
.text:0000400E                 mov     ecx, [eax+4]
.text:00004011                 sub     ecx, 1
.text:00004014                 mov     [ebp+var_C], ecx
.text:00004017                 mov     edx, [ebp+this]
.text:0000401A                 mov     eax, [ebp+var_C]
.text:0000401D                 mov     [edx+4], eax
.text:00004020                 cmp     [ebp+var_C], 0
.text:00004024                 jz      short loc_402E
.text:00004026                 mov     ecx, [ebp+this]
.text:00004029                 mov     eax, [ecx+4]
.text:0000402C                 jmp     short loc_4058
.text:0000402E ; ---------------------------------------------------------------------------
.text:0000402E
.text:0000402E loc_402E:                               ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::Release(void)+30j
.text:0000402E                 mov     edx, [ebp+this]
.text:00004031                 mov     [ebp+var_8], edx
.text:00004034                 mov     eax, [ebp+var_8]
.text:00004037                 mov     [ebp+var_4], eax
.text:0000403A                 cmp     [ebp+var_4], 0
.text:0000403E                 jz      short loc_404F
.text:00004040                 push    1
.text:00004042                 mov     ecx, [ebp+var_4]
.text:00004045                 call    ??_GCLockedSequentialInStreamMT@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CLockedSequentialInStreamMT::`scalar deleting destructor'(uint)
.text:0000404A                 mov     [ebp+var_10], eax
.text:0000404D                 jmp     short loc_4056
.text:0000404F ; ---------------------------------------------------------------------------
.text:0000404F
.text:0000404F loc_404F:                               ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::Release(void)+4Aj
.text:0000404F                 mov     [ebp+var_10], 0
.text:00004056
.text:00004056 loc_4056:                               ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::Release(void)+59j
.text:00004056                 xor     eax, eax
.text:00004058
.text:00004058 loc_4058:                               ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::Release(void)+38j
.text:00004058                 add     esp, 10h
.text:0000405B                 cmp     ebp, esp
.text:0000405D                 call    __RTC_CheckEsp
.text:00004062                 mov     esp, ebp
.text:00004064                 pop     ebp
.text:00004065                 retn    4
.text:00004065 ?Release@CLockedSequentialInStreamMT@N7z@NArchive@@UAGKXZ endp
.text:00004065
.text:00004065 _text           ends
.text:00004065
.text:00004068 ; ===========================================================================
.text:00004068
.text:00004068 ; Segment type: Pure code
.text:00004068 ; Segment permissions: Read/Execute
.text:00004068 _text           segment para public 'CODE' use32
.text:00004068                 assume cs:_text
.text:00004068                 ;org 4068h
.text:00004068 ; COMDAT (pick any)
.text:00004068                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004068
.text:00004068 ; =============== S U B R O U T I N E =======================================
.text:00004068
.text:00004068 ; Attributes: bp-based frame
.text:00004068
.text:00004068 ; public: void * __thiscall NArchive::N7z::CLockedSequentialInStreamMT::`scalar deleting destructor'(unsigned int)
.text:00004068                 public ??_GCLockedSequentialInStreamMT@N7z@NArchive@@QAEPAXI@Z
.text:00004068 ??_GCLockedSequentialInStreamMT@N7z@NArchive@@QAEPAXI@Z proc near
.text:00004068                                         ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::Release(void)+51p
.text:00004068
.text:00004068 var_4           = dword ptr -4
.text:00004068 arg_0           = dword ptr  8
.text:00004068
.text:00004068                 push    ebp
.text:00004069                 mov     ebp, esp
.text:0000406B                 push    ecx
.text:0000406C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004073                 mov     [ebp+var_4], ecx
.text:00004076                 mov     ecx, [ebp+var_4] ; this
.text:00004079                 call    ??1CLockedSequentialInStreamMT@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CLockedSequentialInStreamMT::~CLockedSequentialInStreamMT(void)
.text:0000407E                 mov     eax, [ebp+arg_0]
.text:00004081                 and     eax, 1
.text:00004084                 jz      short loc_4092
.text:00004086                 mov     ecx, [ebp+var_4]
.text:00004089                 push    ecx             ; void *
.text:0000408A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000408F                 add     esp, 4
.text:00004092
.text:00004092 loc_4092:                               ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::`scalar deleting destructor'(uint)+1Cj
.text:00004092                 mov     eax, [ebp+var_4]
.text:00004095                 add     esp, 4
.text:00004098                 cmp     ebp, esp
.text:0000409A                 call    __RTC_CheckEsp
.text:0000409F                 mov     esp, ebp
.text:000040A1                 pop     ebp
.text:000040A2                 retn    4
.text:000040A2 ??_GCLockedSequentialInStreamMT@N7z@NArchive@@QAEPAXI@Z endp
.text:000040A2
.text:000040A2 ; ---------------------------------------------------------------------------
.text:000040A5                 align 4
.text:000040A5 _text           ends
.text:000040A5
.text:000040A8 ; ===========================================================================
.text:000040A8
.text:000040A8 ; Segment type: Pure code
.text:000040A8 ; Segment permissions: Read/Execute
.text:000040A8 _text           segment para public 'CODE' use32
.text:000040A8                 assume cs:_text
.text:000040A8                 ;org 40A8h
.text:000040A8 ; COMDAT (pick any)
.text:000040A8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000040A8
.text:000040A8 ; =============== S U B R O U T I N E =======================================
.text:000040A8
.text:000040A8 ; Attributes: bp-based frame
.text:000040A8
.text:000040A8 ; _DWORD __thiscall NArchive::N7z::CLockedSequentialInStreamMT::~CLockedSequentialInStreamMT(NArchive::N7z::CLockedSequentialInStreamMT *__hidden this)
.text:000040A8                 public ??1CLockedSequentialInStreamMT@N7z@NArchive@@QAE@XZ
.text:000040A8 ??1CLockedSequentialInStreamMT@N7z@NArchive@@QAE@XZ proc near
.text:000040A8                                         ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::`scalar deleting destructor'(uint)+11p
.text:000040A8
.text:000040A8 var_4           = dword ptr -4
.text:000040A8
.text:000040A8                 push    ebp
.text:000040A9                 mov     ebp, esp
.text:000040AB                 push    ecx
.text:000040AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000040B3                 mov     [ebp+var_4], ecx
.text:000040B6                 mov     ecx, [ebp+var_4]
.text:000040B9                 add     ecx, 18h
.text:000040BC                 call    ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text:000040C1                 add     esp, 4
.text:000040C4                 cmp     ebp, esp
.text:000040C6                 call    __RTC_CheckEsp
.text:000040CB                 mov     esp, ebp
.text:000040CD                 pop     ebp
.text:000040CE                 retn
.text:000040CE ??1CLockedSequentialInStreamMT@N7z@NArchive@@QAE@XZ endp
.text:000040CE
.text:000040CE ; ---------------------------------------------------------------------------
.text:000040CF                 align 10h
.text:000040CF _text           ends
.text:000040CF
.text:000040D0 ; ===========================================================================
.text:000040D0
.text:000040D0 ; Segment type: Pure code
.text:000040D0 ; Segment permissions: Read/Execute
.text:000040D0 _text           segment para public 'CODE' use32
.text:000040D0                 assume cs:_text
.text:000040D0                 ;org 40D0h
.text:000040D0 ; COMDAT (pick any)
.text:000040D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000040D0
.text:000040D0 ; =============== S U B R O U T I N E =======================================
.text:000040D0
.text:000040D0 ; Attributes: bp-based frame
.text:000040D0
.text:000040D0 ; _DWORD __thiscall NArchive::N7z::CLockedSequentialInStreamST::CLockedSequentialInStreamST(NArchive::N7z::CLockedSequentialInStreamST *__hidden this)
.text:000040D0                 public ??0CLockedSequentialInStreamST@N7z@NArchive@@QAE@XZ
.text:000040D0 ??0CLockedSequentialInStreamST@N7z@NArchive@@QAE@XZ proc near
.text:000040D0                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+12A0p
.text:000040D0
.text:000040D0 var_4           = dword ptr -4
.text:000040D0
.text:000040D0                 push    ebp
.text:000040D1                 mov     ebp, esp
.text:000040D3                 push    ecx
.text:000040D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000040DB                 mov     [ebp+var_4], ecx
.text:000040DE                 mov     ecx, [ebp+var_4] ; this
.text:000040E1                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:000040E6                 mov     ecx, [ebp+var_4]
.text:000040E9                 add     ecx, 4          ; this
.text:000040EC                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000040F1                 mov     eax, [ebp+var_4]
.text:000040F4                 mov     dword ptr [eax], offset ??_7CLockedSequentialInStreamST@N7z@NArchive@@6B@ ; const NArchive::N7z::CLockedSequentialInStreamST::`vftable'
.text:000040FA                 mov     ecx, [ebp+var_4]
.text:000040FD                 add     ecx, 18h
.text:00004100                 call    ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>(void)
.text:00004105                 mov     eax, [ebp+var_4]
.text:00004108                 add     esp, 4
.text:0000410B                 cmp     ebp, esp
.text:0000410D                 call    __RTC_CheckEsp
.text:00004112                 mov     esp, ebp
.text:00004114                 pop     ebp
.text:00004115                 retn
.text:00004115 ??0CLockedSequentialInStreamST@N7z@NArchive@@QAE@XZ endp
.text:00004115
.text:00004115 ; ---------------------------------------------------------------------------
.text:00004116                 align 4
.text:00004116 _text           ends
.text:00004116
.rdata:00004118 ; ===========================================================================
.rdata:00004118
.rdata:00004118 ; Segment type: Pure data
.rdata:00004118 ; Segment permissions: Read
.rdata:00004118 _rdata          segment dword public 'DATA' use32
.rdata:00004118                 assume cs:_rdata
.rdata:00004118                 ;org 4118h
.rdata:00004118 ; COMDAT (pick largest)
.rdata:00004118                 dd offset ??_R4CLockedSequentialInStreamST@N7z@NArchive@@6B@ ; const NArchive::N7z::CLockedSequentialInStreamST::`RTTI Complete Object Locator'
.rdata:0000411C                 public ??_7CLockedSequentialInStreamST@N7z@NArchive@@6B@
.rdata:0000411C ; const NArchive::N7z::CLockedSequentialInStreamST::`vftable'
.rdata:0000411C ??_7CLockedSequentialInStreamST@N7z@NArchive@@6B@ dd offset ?QueryInterface@CLockedSequentialInStreamST@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:0000411C                                         ; DATA XREF: NArchive::N7z::CLockedSequentialInStreamST::CLockedSequentialInStreamST(void)+24o
.rdata:0000411C                                         ; NArchive::N7z::CLockedSequentialInStreamST::QueryInterface(_GUID const &,void * *)
.rdata:00004120                 dd offset ?AddRef@CLockedSequentialInStreamST@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CLockedSequentialInStreamST::AddRef(void)
.rdata:00004124                 dd offset ?Release@CLockedSequentialInStreamST@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CLockedSequentialInStreamST::Release(void)
.rdata:00004128                 dd offset ?Read@CLockedSequentialInStreamST@N7z@NArchive@@UAGJPAXIPAI@Z ; NArchive::N7z::CLockedSequentialInStreamST::Read(void *,uint,uint *)
.rdata:00004128 _rdata          ends
.rdata:00004128
.rdata$r:0000412C ; ===========================================================================
.rdata$r:0000412C
.rdata$r:0000412C ; Segment type: Pure data
.rdata$r:0000412C ; Segment permissions: Read
.rdata$r:0000412C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000412C                 assume cs:_rdata$r
.rdata$r:0000412C                 ;org 412Ch
.rdata$r:0000412C ; COMDAT (pick any)
.rdata$r:0000412C                 public ??_R4CLockedSequentialInStreamST@N7z@NArchive@@6B@
.rdata$r:0000412C ; const NArchive::N7z::CLockedSequentialInStreamST::`RTTI Complete Object Locator'
.rdata$r:0000412C ??_R4CLockedSequentialInStreamST@N7z@NArchive@@6B@ db    0
.rdata$r:0000412C                                         ; DATA XREF: .rdata:00004118o
.rdata$r:0000412D                 db    0
.rdata$r:0000412E                 db    0
.rdata$r:0000412F                 db    0
.rdata$r:00004130                 db    0
.rdata$r:00004131                 db    0
.rdata$r:00004132                 db    0
.rdata$r:00004133                 db    0
.rdata$r:00004134                 db    0
.rdata$r:00004135                 db    0
.rdata$r:00004136                 db    0
.rdata$r:00004137                 db    0
.rdata$r:00004138                 dd offset ??_R0?AVCLockedSequentialInStreamST@N7z@NArchive@@@8 ; NArchive::N7z::CLockedSequentialInStreamST `RTTI Type Descriptor'
.rdata$r:0000413C                 dd offset ??_R3CLockedSequentialInStreamST@N7z@NArchive@@8 ; NArchive::N7z::CLockedSequentialInStreamST::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000413C _rdata$r        ends
.rdata$r:0000413C
.data:00004140 ; ===========================================================================
.data:00004140
.data:00004140 ; Segment type: Pure data
.data:00004140 ; Segment permissions: Read/Write
.data:00004140 _data           segment dword public 'DATA' use32
.data:00004140                 assume cs:_data
.data:00004140                 ;org 4140h
.data:00004140 ; COMDAT (pick any)
.data:00004140                 public ??_R0?AVCLockedSequentialInStreamST@N7z@NArchive@@@8
.data:00004140 ; class NArchive::N7z::CLockedSequentialInStreamST `RTTI Type Descriptor'
.data:00004140 ??_R0?AVCLockedSequentialInStreamST@N7z@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00004140                                         ; DATA XREF: .rdata$r:00004138o
.data:00004140                                         ; .rdata$r:NArchive::N7z::CLockedSequentialInStreamST::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00004140                                         ; const type_info::`vftable'
.data:00004144                 align 8
.data:00004148 a_?avclockedseq db '.?AVCLockedSequentialInStreamST@N7z@NArchive@@',0
.data:00004177                 align 4
.data:00004177 _data           ends
.data:00004177
.rdata$r:00004178 ; ===========================================================================
.rdata$r:00004178
.rdata$r:00004178 ; Segment type: Pure data
.rdata$r:00004178 ; Segment permissions: Read
.rdata$r:00004178 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004178                 assume cs:_rdata$r
.rdata$r:00004178                 ;org 4178h
.rdata$r:00004178 ; COMDAT (pick any)
.rdata$r:00004178                 public ??_R3CLockedSequentialInStreamST@N7z@NArchive@@8
.rdata$r:00004178 ; NArchive::N7z::CLockedSequentialInStreamST::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004178 ??_R3CLockedSequentialInStreamST@N7z@NArchive@@8 db    0
.rdata$r:00004178                                         ; DATA XREF: .rdata$r:0000413Co
.rdata$r:00004178                                         ; .rdata$r:000041B4o
.rdata$r:00004179                 db    0
.rdata$r:0000417A                 db    0
.rdata$r:0000417B                 db    0
.rdata$r:0000417C                 db    1
.rdata$r:0000417D                 db    0
.rdata$r:0000417E                 db    0
.rdata$r:0000417F                 db    0
.rdata$r:00004180                 db    4
.rdata$r:00004181                 db    0
.rdata$r:00004182                 db    0
.rdata$r:00004183                 db    0
.rdata$r:00004184                 dd offset ??_R2CLockedSequentialInStreamST@N7z@NArchive@@8 ; NArchive::N7z::CLockedSequentialInStreamST::`RTTI Base Class Array'
.rdata$r:00004184 _rdata$r        ends
.rdata$r:00004184
.rdata$r:00004188 ; ===========================================================================
.rdata$r:00004188
.rdata$r:00004188 ; Segment type: Pure data
.rdata$r:00004188 ; Segment permissions: Read
.rdata$r:00004188 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004188                 assume cs:_rdata$r
.rdata$r:00004188                 ;org 4188h
.rdata$r:00004188 ; COMDAT (pick any)
.rdata$r:00004188                 public ??_R2CLockedSequentialInStreamST@N7z@NArchive@@8
.rdata$r:00004188 ; NArchive::N7z::CLockedSequentialInStreamST::`RTTI Base Class Array'
.rdata$r:00004188 ??_R2CLockedSequentialInStreamST@N7z@NArchive@@8 dd offset ??_R1A@?0A@EA@CLockedSequentialInStreamST@N7z@NArchive@@8
.rdata$r:00004188                                         ; DATA XREF: .rdata$r:00004184o
.rdata$r:00004188                                         ; NArchive::N7z::CLockedSequentialInStreamST::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000418C                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004190                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004194                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00004198                 db    0
.rdata$r:00004199                 align 4
.rdata$r:00004199 _rdata$r        ends
.rdata$r:00004199
.rdata$r:0000419C ; ===========================================================================
.rdata$r:0000419C
.rdata$r:0000419C ; Segment type: Pure data
.rdata$r:0000419C ; Segment permissions: Read
.rdata$r:0000419C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000419C                 assume cs:_rdata$r
.rdata$r:0000419C                 ;org 419Ch
.rdata$r:0000419C ; COMDAT (pick any)
.rdata$r:0000419C                 public ??_R1A@?0A@EA@CLockedSequentialInStreamST@N7z@NArchive@@8
.rdata$r:0000419C ; NArchive::N7z::CLockedSequentialInStreamST::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000419C ??_R1A@?0A@EA@CLockedSequentialInStreamST@N7z@NArchive@@8 dd offset ??_R0?AVCLockedSequentialInStreamST@N7z@NArchive@@@8
.rdata$r:0000419C                                         ; DATA XREF: .rdata$r:NArchive::N7z::CLockedSequentialInStreamST::`RTTI Base Class Array'o
.rdata$r:0000419C                                         ; NArchive::N7z::CLockedSequentialInStreamST `RTTI Type Descriptor'
.rdata$r:000041A0                 db    3
.rdata$r:000041A1                 db    0
.rdata$r:000041A2                 db    0
.rdata$r:000041A3                 db    0
.rdata$r:000041A4                 db    0
.rdata$r:000041A5                 db    0
.rdata$r:000041A6                 db    0
.rdata$r:000041A7                 db    0
.rdata$r:000041A8                 db 0FFh
.rdata$r:000041A9                 db 0FFh
.rdata$r:000041AA                 db 0FFh
.rdata$r:000041AB                 db 0FFh
.rdata$r:000041AC                 db    0
.rdata$r:000041AD                 db    0
.rdata$r:000041AE                 db    0
.rdata$r:000041AF                 db    0
.rdata$r:000041B0                 db  40h ; @
.rdata$r:000041B1                 db    0
.rdata$r:000041B2                 db    0
.rdata$r:000041B3                 db    0
.rdata$r:000041B4                 dd offset ??_R3CLockedSequentialInStreamST@N7z@NArchive@@8 ; NArchive::N7z::CLockedSequentialInStreamST::`RTTI Class Hierarchy Descriptor'
.rdata$r:000041B4 _rdata$r        ends
.rdata$r:000041B4
.text:000041B8 ; ===========================================================================
.text:000041B8
.text:000041B8 ; Segment type: Pure code
.text:000041B8 ; Segment permissions: Read/Execute
.text:000041B8 _text           segment para public 'CODE' use32
.text:000041B8                 assume cs:_text
.text:000041B8                 ;org 41B8h
.text:000041B8 ; COMDAT (pick any)
.text:000041B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000041B8
.text:000041B8 ; =============== S U B R O U T I N E =======================================
.text:000041B8
.text:000041B8 ; Attributes: bp-based frame
.text:000041B8
.text:000041B8 ; __int32 __stdcall NArchive::N7z::CLockedSequentialInStreamST::QueryInterface(NArchive::N7z::CLockedSequentialInStreamST *this, const struct _GUID *Buf1, void **)
.text:000041B8                 public ?QueryInterface@CLockedSequentialInStreamST@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:000041B8 ?QueryInterface@CLockedSequentialInStreamST@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000041B8                                         ; DATA XREF: .rdata:const NArchive::N7z::CLockedSequentialInStreamST::`vftable'o
.text:000041B8
.text:000041B8 this            = dword ptr  8
.text:000041B8 Buf1            = dword ptr  0Ch
.text:000041B8 arg_8           = dword ptr  10h
.text:000041B8
.text:000041B8                 push    ebp
.text:000041B9                 mov     ebp, esp
.text:000041BB                 mov     eax, [ebp+arg_8]
.text:000041BE                 mov     dword ptr [eax], 0
.text:000041C4                 push    offset _IID_IUnknown ; Buf2
.text:000041C9                 mov     ecx, [ebp+Buf1]
.text:000041CC                 push    ecx             ; Buf1
.text:000041CD                 call    ___@8           ; __(x,x)
.text:000041D2                 test    eax, eax
.text:000041D4                 jz      short loc_41E0
.text:000041D6                 mov     edx, [ebp+arg_8]
.text:000041D9                 mov     eax, [ebp+this]
.text:000041DC                 mov     [edx], eax
.text:000041DE                 jmp     short loc_4203
.text:000041E0 ; ---------------------------------------------------------------------------
.text:000041E0
.text:000041E0 loc_41E0:                               ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamST::QueryInterface(_GUID const &,void * *)+1Cj
.text:000041E0                 push    offset _IID_ISequentialInStream ; Buf2
.text:000041E5                 mov     ecx, [ebp+Buf1]
.text:000041E8                 push    ecx             ; Buf1
.text:000041E9                 call    ___@8           ; __(x,x)
.text:000041EE                 test    eax, eax
.text:000041F0                 jz      short loc_41FC
.text:000041F2                 mov     edx, [ebp+arg_8]
.text:000041F5                 mov     eax, [ebp+this]
.text:000041F8                 mov     [edx], eax
.text:000041FA                 jmp     short loc_4203
.text:000041FC ; ---------------------------------------------------------------------------
.text:000041FC
.text:000041FC loc_41FC:                               ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamST::QueryInterface(_GUID const &,void * *)+38j
.text:000041FC                 mov     eax, 80004002h
.text:00004201                 jmp     short loc_4214
.text:00004203 ; ---------------------------------------------------------------------------
.text:00004203
.text:00004203 loc_4203:                               ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamST::QueryInterface(_GUID const &,void * *)+26j
.text:00004203                                         ; NArchive::N7z::CLockedSequentialInStreamST::QueryInterface(_GUID const &,void * *)+42j
.text:00004203                 mov     ecx, [ebp+this]
.text:00004206                 mov     edx, [ecx+4]
.text:00004209                 add     edx, 1
.text:0000420C                 mov     eax, [ebp+this]
.text:0000420F                 mov     [eax+4], edx
.text:00004212                 xor     eax, eax
.text:00004214
.text:00004214 loc_4214:                               ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamST::QueryInterface(_GUID const &,void * *)+49j
.text:00004214                 cmp     ebp, esp
.text:00004216                 call    __RTC_CheckEsp
.text:0000421B                 pop     ebp
.text:0000421C                 retn    0Ch
.text:0000421C ?QueryInterface@CLockedSequentialInStreamST@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000421C
.text:0000421C ; ---------------------------------------------------------------------------
.text:0000421F                 align 10h
.text:0000421F _text           ends
.text:0000421F
.text:00004220 ; ===========================================================================
.text:00004220
.text:00004220 ; Segment type: Pure code
.text:00004220 ; Segment permissions: Read/Execute
.text:00004220 _text           segment para public 'CODE' use32
.text:00004220                 assume cs:_text
.text:00004220                 ;org 4220h
.text:00004220 ; COMDAT (pick any)
.text:00004220                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004220
.text:00004220 ; =============== S U B R O U T I N E =======================================
.text:00004220
.text:00004220 ; Attributes: bp-based frame
.text:00004220
.text:00004220 ; unsigned __int32 __stdcall NArchive::N7z::CLockedSequentialInStreamST::AddRef(NArchive::N7z::CLockedSequentialInStreamST *this)
.text:00004220                 public ?AddRef@CLockedSequentialInStreamST@N7z@NArchive@@UAGKXZ
.text:00004220 ?AddRef@CLockedSequentialInStreamST@N7z@NArchive@@UAGKXZ proc near
.text:00004220                                         ; DATA XREF: .rdata:00004120o
.text:00004220
.text:00004220 var_4           = dword ptr -4
.text:00004220 this            = dword ptr  8
.text:00004220
.text:00004220                 push    ebp
.text:00004221                 mov     ebp, esp
.text:00004223                 push    ecx
.text:00004224                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000422B                 mov     eax, [ebp+this]
.text:0000422E                 mov     ecx, [eax+4]
.text:00004231                 add     ecx, 1
.text:00004234                 mov     [ebp+var_4], ecx
.text:00004237                 mov     edx, [ebp+this]
.text:0000423A                 mov     eax, [ebp+var_4]
.text:0000423D                 mov     [edx+4], eax
.text:00004240                 mov     eax, [ebp+var_4]
.text:00004243                 mov     esp, ebp
.text:00004245                 pop     ebp
.text:00004246                 retn    4
.text:00004246 ?AddRef@CLockedSequentialInStreamST@N7z@NArchive@@UAGKXZ endp
.text:00004246
.text:00004246 ; ---------------------------------------------------------------------------
.text:00004249                 align 4
.text:00004249 _text           ends
.text:00004249
.text:0000424C ; ===========================================================================
.text:0000424C
.text:0000424C ; Segment type: Pure code
.text:0000424C ; Segment permissions: Read/Execute
.text:0000424C _text           segment para public 'CODE' use32
.text:0000424C                 assume cs:_text
.text:0000424C                 ;org 424Ch
.text:0000424C ; COMDAT (pick any)
.text:0000424C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000424C
.text:0000424C ; =============== S U B R O U T I N E =======================================
.text:0000424C
.text:0000424C ; Attributes: bp-based frame
.text:0000424C
.text:0000424C ; unsigned __int32 __stdcall NArchive::N7z::CLockedSequentialInStreamST::Release(NArchive::N7z::CLockedSequentialInStreamST *this)
.text:0000424C                 public ?Release@CLockedSequentialInStreamST@N7z@NArchive@@UAGKXZ
.text:0000424C ?Release@CLockedSequentialInStreamST@N7z@NArchive@@UAGKXZ proc near
.text:0000424C                                         ; DATA XREF: .rdata:00004124o
.text:0000424C
.text:0000424C var_10          = dword ptr -10h
.text:0000424C var_C           = dword ptr -0Ch
.text:0000424C var_8           = dword ptr -8
.text:0000424C var_4           = dword ptr -4
.text:0000424C this            = dword ptr  8
.text:0000424C
.text:0000424C                 push    ebp
.text:0000424D                 mov     ebp, esp
.text:0000424F                 sub     esp, 10h
.text:00004252                 mov     eax, 0CCCCCCCCh
.text:00004257                 mov     [ebp+var_10], eax
.text:0000425A                 mov     [ebp+var_C], eax
.text:0000425D                 mov     [ebp+var_8], eax
.text:00004260                 mov     [ebp+var_4], eax
.text:00004263                 mov     eax, [ebp+this]
.text:00004266                 mov     ecx, [eax+4]
.text:00004269                 sub     ecx, 1
.text:0000426C                 mov     [ebp+var_C], ecx
.text:0000426F                 mov     edx, [ebp+this]
.text:00004272                 mov     eax, [ebp+var_C]
.text:00004275                 mov     [edx+4], eax
.text:00004278                 cmp     [ebp+var_C], 0
.text:0000427C                 jz      short loc_4286
.text:0000427E                 mov     ecx, [ebp+this]
.text:00004281                 mov     eax, [ecx+4]
.text:00004284                 jmp     short loc_42B0
.text:00004286 ; ---------------------------------------------------------------------------
.text:00004286
.text:00004286 loc_4286:                               ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamST::Release(void)+30j
.text:00004286                 mov     edx, [ebp+this]
.text:00004289                 mov     [ebp+var_8], edx
.text:0000428C                 mov     eax, [ebp+var_8]
.text:0000428F                 mov     [ebp+var_4], eax
.text:00004292                 cmp     [ebp+var_4], 0
.text:00004296                 jz      short loc_42A7
.text:00004298                 push    1
.text:0000429A                 mov     ecx, [ebp+var_4]
.text:0000429D                 call    ??_GCLockedSequentialInStreamST@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CLockedSequentialInStreamST::`scalar deleting destructor'(uint)
.text:000042A2                 mov     [ebp+var_10], eax
.text:000042A5                 jmp     short loc_42AE
.text:000042A7 ; ---------------------------------------------------------------------------
.text:000042A7
.text:000042A7 loc_42A7:                               ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamST::Release(void)+4Aj
.text:000042A7                 mov     [ebp+var_10], 0
.text:000042AE
.text:000042AE loc_42AE:                               ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamST::Release(void)+59j
.text:000042AE                 xor     eax, eax
.text:000042B0
.text:000042B0 loc_42B0:                               ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamST::Release(void)+38j
.text:000042B0                 add     esp, 10h
.text:000042B3                 cmp     ebp, esp
.text:000042B5                 call    __RTC_CheckEsp
.text:000042BA                 mov     esp, ebp
.text:000042BC                 pop     ebp
.text:000042BD                 retn    4
.text:000042BD ?Release@CLockedSequentialInStreamST@N7z@NArchive@@UAGKXZ endp
.text:000042BD
.text:000042BD _text           ends
.text:000042BD
.text:000042C0 ; ===========================================================================
.text:000042C0
.text:000042C0 ; Segment type: Pure code
.text:000042C0 ; Segment permissions: Read/Execute
.text:000042C0 _text           segment para public 'CODE' use32
.text:000042C0                 assume cs:_text
.text:000042C0                 ;org 42C0h
.text:000042C0 ; COMDAT (pick any)
.text:000042C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000042C0
.text:000042C0 ; =============== S U B R O U T I N E =======================================
.text:000042C0
.text:000042C0 ; Attributes: bp-based frame
.text:000042C0
.text:000042C0 ; public: void * __thiscall NArchive::N7z::CLockedSequentialInStreamST::`scalar deleting destructor'(unsigned int)
.text:000042C0                 public ??_GCLockedSequentialInStreamST@N7z@NArchive@@QAEPAXI@Z
.text:000042C0 ??_GCLockedSequentialInStreamST@N7z@NArchive@@QAEPAXI@Z proc near
.text:000042C0                                         ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamST::Release(void)+51p
.text:000042C0
.text:000042C0 var_4           = dword ptr -4
.text:000042C0 arg_0           = dword ptr  8
.text:000042C0
.text:000042C0                 push    ebp
.text:000042C1                 mov     ebp, esp
.text:000042C3                 push    ecx
.text:000042C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000042CB                 mov     [ebp+var_4], ecx
.text:000042CE                 mov     ecx, [ebp+var_4] ; this
.text:000042D1                 call    ??1CLockedSequentialInStreamST@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CLockedSequentialInStreamST::~CLockedSequentialInStreamST(void)
.text:000042D6                 mov     eax, [ebp+arg_0]
.text:000042D9                 and     eax, 1
.text:000042DC                 jz      short loc_42EA
.text:000042DE                 mov     ecx, [ebp+var_4]
.text:000042E1                 push    ecx             ; void *
.text:000042E2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000042E7                 add     esp, 4
.text:000042EA
.text:000042EA loc_42EA:                               ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamST::`scalar deleting destructor'(uint)+1Cj
.text:000042EA                 mov     eax, [ebp+var_4]
.text:000042ED                 add     esp, 4
.text:000042F0                 cmp     ebp, esp
.text:000042F2                 call    __RTC_CheckEsp
.text:000042F7                 mov     esp, ebp
.text:000042F9                 pop     ebp
.text:000042FA                 retn    4
.text:000042FA ??_GCLockedSequentialInStreamST@N7z@NArchive@@QAEPAXI@Z endp
.text:000042FA
.text:000042FA ; ---------------------------------------------------------------------------
.text:000042FD                 align 10h
.text:000042FD _text           ends
.text:000042FD
.text:00004300 ; ===========================================================================
.text:00004300
.text:00004300 ; Segment type: Pure code
.text:00004300 ; Segment permissions: Read/Execute
.text:00004300 _text           segment para public 'CODE' use32
.text:00004300                 assume cs:_text
.text:00004300                 ;org 4300h
.text:00004300 ; COMDAT (pick any)
.text:00004300                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004300
.text:00004300 ; =============== S U B R O U T I N E =======================================
.text:00004300
.text:00004300 ; Attributes: bp-based frame
.text:00004300
.text:00004300 ; _DWORD __thiscall NArchive::N7z::CLockedSequentialInStreamST::~CLockedSequentialInStreamST(NArchive::N7z::CLockedSequentialInStreamST *__hidden this)
.text:00004300                 public ??1CLockedSequentialInStreamST@N7z@NArchive@@QAE@XZ
.text:00004300 ??1CLockedSequentialInStreamST@N7z@NArchive@@QAE@XZ proc near
.text:00004300                                         ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamST::`scalar deleting destructor'(uint)+11p
.text:00004300
.text:00004300 var_4           = dword ptr -4
.text:00004300
.text:00004300                 push    ebp
.text:00004301                 mov     ebp, esp
.text:00004303                 push    ecx
.text:00004304                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000430B                 mov     [ebp+var_4], ecx
.text:0000430E                 mov     ecx, [ebp+var_4]
.text:00004311                 add     ecx, 18h
.text:00004314                 call    ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text:00004319                 add     esp, 4
.text:0000431C                 cmp     ebp, esp
.text:0000431E                 call    __RTC_CheckEsp
.text:00004323                 mov     esp, ebp
.text:00004325                 pop     ebp
.text:00004326                 retn
.text:00004326 ??1CLockedSequentialInStreamST@N7z@NArchive@@QAE@XZ endp
.text:00004326
.text:00004326 ; ---------------------------------------------------------------------------
.text:00004327                 align 4
.text:00004327 _text           ends
.text:00004327
.text:00004328 ; ===========================================================================
.text:00004328
.text:00004328 ; Segment type: Pure code
.text:00004328 ; Segment permissions: Read/Execute
.text:00004328 _text           segment para public 'CODE' use32
.text:00004328                 assume cs:_text
.text:00004328                 ;org 4328h
.text:00004328 ; COMDAT (pick any)
.text:00004328                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004328
.text:00004328 ; =============== S U B R O U T I N E =======================================
.text:00004328
.text:00004328 ; Attributes: bp-based frame
.text:00004328
.text:00004328 ; public: __thiscall CLimitedSequentialInStream::CLimitedSequentialInStream(void)
.text:00004328                 public ??0CLimitedSequentialInStream@@QAE@XZ
.text:00004328 ??0CLimitedSequentialInStream@@QAE@XZ proc near
.text:00004328                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1328p
.text:00004328
.text:00004328 var_4           = dword ptr -4
.text:00004328
.text:00004328                 push    ebp
.text:00004329                 mov     ebp, esp
.text:0000432B                 push    ecx
.text:0000432C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004333                 mov     [ebp+var_4], ecx
.text:00004336                 mov     ecx, [ebp+var_4] ; this
.text:00004339                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:0000433E                 mov     ecx, [ebp+var_4]
.text:00004341                 add     ecx, 4          ; this
.text:00004344                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00004349                 mov     eax, [ebp+var_4]
.text:0000434C                 mov     dword ptr [eax], offset ??_7CLimitedSequentialInStream@@6B@ ; const CLimitedSequentialInStream::`vftable'
.text:00004352                 mov     ecx, [ebp+var_4]
.text:00004355                 add     ecx, 8
.text:00004358                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:0000435D                 mov     eax, [ebp+var_4]
.text:00004360                 add     esp, 4
.text:00004363                 cmp     ebp, esp
.text:00004365                 call    __RTC_CheckEsp
.text:0000436A                 mov     esp, ebp
.text:0000436C                 pop     ebp
.text:0000436D                 retn
.text:0000436D ??0CLimitedSequentialInStream@@QAE@XZ endp
.text:0000436D
.text:0000436D ; ---------------------------------------------------------------------------
.text:0000436E                 align 10h
.text:0000436E _text           ends
.text:0000436E
.rdata:00004370 ; ===========================================================================
.rdata:00004370
.rdata:00004370 ; Segment type: Pure data
.rdata:00004370 ; Segment permissions: Read
.rdata:00004370 _rdata          segment dword public 'DATA' use32
.rdata:00004370                 assume cs:_rdata
.rdata:00004370                 ;org 4370h
.rdata:00004370 ; COMDAT (pick largest)
.rdata:00004370                 dd offset ??_R4CLimitedSequentialInStream@@6B@ ; const CLimitedSequentialInStream::`RTTI Complete Object Locator'
.rdata:00004374                 public ??_7CLimitedSequentialInStream@@6B@
.rdata:00004374 ; const CLimitedSequentialInStream::`vftable'
.rdata:00004374 ??_7CLimitedSequentialInStream@@6B@ dd offset ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:00004374                                         ; DATA XREF: CLimitedSequentialInStream::CLimitedSequentialInStream(void)+24o
.rdata:00004374                                         ; CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)
.rdata:00004378                 dd offset ?AddRef@CLimitedSequentialInStream@@UAGKXZ ; CLimitedSequentialInStream::AddRef(void)
.rdata:0000437C                 dd offset ?Release@CLimitedSequentialInStream@@UAGKXZ ; CLimitedSequentialInStream::Release(void)
.rdata:00004380                 dd offset ?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z ; CLimitedSequentialInStream::Read(void *,uint,uint *)
.rdata:00004380 _rdata          ends
.rdata:00004380
.rdata$r:00004384 ; ===========================================================================
.rdata$r:00004384
.rdata$r:00004384 ; Segment type: Pure data
.rdata$r:00004384 ; Segment permissions: Read
.rdata$r:00004384 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004384                 assume cs:_rdata$r
.rdata$r:00004384                 ;org 4384h
.rdata$r:00004384 ; COMDAT (pick any)
.rdata$r:00004384                 public ??_R4CLimitedSequentialInStream@@6B@
.rdata$r:00004384 ; const CLimitedSequentialInStream::`RTTI Complete Object Locator'
.rdata$r:00004384 ??_R4CLimitedSequentialInStream@@6B@ db    0 ; DATA XREF: .rdata:00004370o
.rdata$r:00004385                 db    0
.rdata$r:00004386                 db    0
.rdata$r:00004387                 db    0
.rdata$r:00004388                 db    0
.rdata$r:00004389                 db    0
.rdata$r:0000438A                 db    0
.rdata$r:0000438B                 db    0
.rdata$r:0000438C                 db    0
.rdata$r:0000438D                 db    0
.rdata$r:0000438E                 db    0
.rdata$r:0000438F                 db    0
.rdata$r:00004390                 dd offset ??_R0?AVCLimitedSequentialInStream@@@8 ; CLimitedSequentialInStream `RTTI Type Descriptor'
.rdata$r:00004394                 dd offset ??_R3CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004394 _rdata$r        ends
.rdata$r:00004394
.data:00004398 ; ===========================================================================
.data:00004398
.data:00004398 ; Segment type: Pure data
.data:00004398 ; Segment permissions: Read/Write
.data:00004398 _data           segment dword public 'DATA' use32
.data:00004398                 assume cs:_data
.data:00004398                 ;org 4398h
.data:00004398 ; COMDAT (pick any)
.data:00004398                 public ??_R0?AVCLimitedSequentialInStream@@@8
.data:00004398 ; class CLimitedSequentialInStream `RTTI Type Descriptor'
.data:00004398 ??_R0?AVCLimitedSequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00004398                                         ; DATA XREF: .rdata$r:00004390o
.data:00004398                                         ; .rdata$r:CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00004398                                         ; const type_info::`vftable'
.data:0000439C                 align 10h
.data:000043A0 a_?avclimitedse db '.?AVCLimitedSequentialInStream@@',0
.data:000043C1                 align 4
.data:000043C1 _data           ends
.data:000043C1
.rdata$r:000043C4 ; ===========================================================================
.rdata$r:000043C4
.rdata$r:000043C4 ; Segment type: Pure data
.rdata$r:000043C4 ; Segment permissions: Read
.rdata$r:000043C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000043C4                 assume cs:_rdata$r
.rdata$r:000043C4                 ;org 43C4h
.rdata$r:000043C4 ; COMDAT (pick any)
.rdata$r:000043C4                 public ??_R3CLimitedSequentialInStream@@8
.rdata$r:000043C4 ; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000043C4 ??_R3CLimitedSequentialInStream@@8 db    0 ; DATA XREF: .rdata$r:00004394o
.rdata$r:000043C4                                         ; .rdata$r:00004400o
.rdata$r:000043C5                 db    0
.rdata$r:000043C6                 db    0
.rdata$r:000043C7                 db    0
.rdata$r:000043C8                 db    1
.rdata$r:000043C9                 db    0
.rdata$r:000043CA                 db    0
.rdata$r:000043CB                 db    0
.rdata$r:000043CC                 db    4
.rdata$r:000043CD                 db    0
.rdata$r:000043CE                 db    0
.rdata$r:000043CF                 db    0
.rdata$r:000043D0                 dd offset ??_R2CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Base Class Array'
.rdata$r:000043D0 _rdata$r        ends
.rdata$r:000043D0
.rdata$r:000043D4 ; ===========================================================================
.rdata$r:000043D4
.rdata$r:000043D4 ; Segment type: Pure data
.rdata$r:000043D4 ; Segment permissions: Read
.rdata$r:000043D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000043D4                 assume cs:_rdata$r
.rdata$r:000043D4                 ;org 43D4h
.rdata$r:000043D4 ; COMDAT (pick any)
.rdata$r:000043D4                 public ??_R2CLimitedSequentialInStream@@8
.rdata$r:000043D4 ; CLimitedSequentialInStream::`RTTI Base Class Array'
.rdata$r:000043D4 ??_R2CLimitedSequentialInStream@@8 dd offset ??_R1A@?0A@EA@CLimitedSequentialInStream@@8
.rdata$r:000043D4                                         ; DATA XREF: .rdata$r:000043D0o
.rdata$r:000043D4                                         ; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000043D8                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000043DC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000043E0                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000043E4                 db    0
.rdata$r:000043E5                 align 4
.rdata$r:000043E5 _rdata$r        ends
.rdata$r:000043E5
.rdata$r:000043E8 ; ===========================================================================
.rdata$r:000043E8
.rdata$r:000043E8 ; Segment type: Pure data
.rdata$r:000043E8 ; Segment permissions: Read
.rdata$r:000043E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000043E8                 assume cs:_rdata$r
.rdata$r:000043E8                 ;org 43E8h
.rdata$r:000043E8 ; COMDAT (pick any)
.rdata$r:000043E8                 public ??_R1A@?0A@EA@CLimitedSequentialInStream@@8
.rdata$r:000043E8 ; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000043E8 ??_R1A@?0A@EA@CLimitedSequentialInStream@@8 dd offset ??_R0?AVCLimitedSequentialInStream@@@8
.rdata$r:000043E8                                         ; DATA XREF: .rdata$r:CLimitedSequentialInStream::`RTTI Base Class Array'o
.rdata$r:000043E8                                         ; CLimitedSequentialInStream `RTTI Type Descriptor'
.rdata$r:000043EC                 db    3
.rdata$r:000043ED                 db    0
.rdata$r:000043EE                 db    0
.rdata$r:000043EF                 db    0
.rdata$r:000043F0                 db    0
.rdata$r:000043F1                 db    0
.rdata$r:000043F2                 db    0
.rdata$r:000043F3                 db    0
.rdata$r:000043F4                 db 0FFh
.rdata$r:000043F5                 db 0FFh
.rdata$r:000043F6                 db 0FFh
.rdata$r:000043F7                 db 0FFh
.rdata$r:000043F8                 db    0
.rdata$r:000043F9                 db    0
.rdata$r:000043FA                 db    0
.rdata$r:000043FB                 db    0
.rdata$r:000043FC                 db  40h ; @
.rdata$r:000043FD                 db    0
.rdata$r:000043FE                 db    0
.rdata$r:000043FF                 db    0
.rdata$r:00004400                 dd offset ??_R3CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004400 _rdata$r        ends
.rdata$r:00004400
.text:00004404 ; ===========================================================================
.text:00004404
.text:00004404 ; Segment type: Pure code
.text:00004404 ; Segment permissions: Read/Execute
.text:00004404 _text           segment para public 'CODE' use32
.text:00004404                 assume cs:_text
.text:00004404                 ;org 4404h
.text:00004404 ; COMDAT (pick any)
.text:00004404                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004404
.text:00004404 ; =============== S U B R O U T I N E =======================================
.text:00004404
.text:00004404 ; Attributes: bp-based frame
.text:00004404
.text:00004404 ; __int32 __stdcall CLimitedSequentialInStream::QueryInterface(CLimitedSequentialInStream *this, const struct _GUID *Buf1, void **)
.text:00004404                 public ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
.text:00004404 ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00004404                                         ; DATA XREF: .rdata:const CLimitedSequentialInStream::`vftable'o
.text:00004404
.text:00004404 this            = dword ptr  8
.text:00004404 Buf1            = dword ptr  0Ch
.text:00004404 arg_8           = dword ptr  10h
.text:00004404
.text:00004404                 push    ebp
.text:00004405                 mov     ebp, esp
.text:00004407                 mov     eax, [ebp+arg_8]
.text:0000440A                 mov     dword ptr [eax], 0
.text:00004410                 push    offset _IID_IUnknown ; Buf2
.text:00004415                 mov     ecx, [ebp+Buf1]
.text:00004418                 push    ecx             ; Buf1
.text:00004419                 call    ___@8           ; __(x,x)
.text:0000441E                 test    eax, eax
.text:00004420                 jz      short loc_442C
.text:00004422                 mov     edx, [ebp+arg_8]
.text:00004425                 mov     eax, [ebp+this]
.text:00004428                 mov     [edx], eax
.text:0000442A                 jmp     short loc_444F
.text:0000442C ; ---------------------------------------------------------------------------
.text:0000442C
.text:0000442C loc_442C:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:0000442C                 push    offset _IID_ISequentialInStream ; Buf2
.text:00004431                 mov     ecx, [ebp+Buf1]
.text:00004434                 push    ecx             ; Buf1
.text:00004435                 call    ___@8           ; __(x,x)
.text:0000443A                 test    eax, eax
.text:0000443C                 jz      short loc_4448
.text:0000443E                 mov     edx, [ebp+arg_8]
.text:00004441                 mov     eax, [ebp+this]
.text:00004444                 mov     [edx], eax
.text:00004446                 jmp     short loc_444F
.text:00004448 ; ---------------------------------------------------------------------------
.text:00004448
.text:00004448 loc_4448:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+38j
.text:00004448                 mov     eax, 80004002h
.text:0000444D                 jmp     short loc_4460
.text:0000444F ; ---------------------------------------------------------------------------
.text:0000444F
.text:0000444F loc_444F:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+26j
.text:0000444F                                         ; CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+42j
.text:0000444F                 mov     ecx, [ebp+this]
.text:00004452                 mov     edx, [ecx+4]
.text:00004455                 add     edx, 1
.text:00004458                 mov     eax, [ebp+this]
.text:0000445B                 mov     [eax+4], edx
.text:0000445E                 xor     eax, eax
.text:00004460
.text:00004460 loc_4460:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+49j
.text:00004460                 cmp     ebp, esp
.text:00004462                 call    __RTC_CheckEsp
.text:00004467                 pop     ebp
.text:00004468                 retn    0Ch
.text:00004468 ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:00004468
.text:00004468 ; ---------------------------------------------------------------------------
.text:0000446B                 align 4
.text:0000446B _text           ends
.text:0000446B
.text:0000446C ; ===========================================================================
.text:0000446C
.text:0000446C ; Segment type: Pure code
.text:0000446C ; Segment permissions: Read/Execute
.text:0000446C _text           segment para public 'CODE' use32
.text:0000446C                 assume cs:_text
.text:0000446C                 ;org 446Ch
.text:0000446C ; COMDAT (pick any)
.text:0000446C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000446C
.text:0000446C ; =============== S U B R O U T I N E =======================================
.text:0000446C
.text:0000446C ; Attributes: bp-based frame
.text:0000446C
.text:0000446C ; unsigned __int32 __stdcall CLimitedSequentialInStream::AddRef(CLimitedSequentialInStream *this)
.text:0000446C                 public ?AddRef@CLimitedSequentialInStream@@UAGKXZ
.text:0000446C ?AddRef@CLimitedSequentialInStream@@UAGKXZ proc near
.text:0000446C                                         ; DATA XREF: .rdata:00004378o
.text:0000446C
.text:0000446C var_4           = dword ptr -4
.text:0000446C this            = dword ptr  8
.text:0000446C
.text:0000446C                 push    ebp
.text:0000446D                 mov     ebp, esp
.text:0000446F                 push    ecx
.text:00004470                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004477                 mov     eax, [ebp+this]
.text:0000447A                 mov     ecx, [eax+4]
.text:0000447D                 add     ecx, 1
.text:00004480                 mov     [ebp+var_4], ecx
.text:00004483                 mov     edx, [ebp+this]
.text:00004486                 mov     eax, [ebp+var_4]
.text:00004489                 mov     [edx+4], eax
.text:0000448C                 mov     eax, [ebp+var_4]
.text:0000448F                 mov     esp, ebp
.text:00004491                 pop     ebp
.text:00004492                 retn    4
.text:00004492 ?AddRef@CLimitedSequentialInStream@@UAGKXZ endp
.text:00004492
.text:00004492 ; ---------------------------------------------------------------------------
.text:00004495                 align 4
.text:00004495 _text           ends
.text:00004495
.text:00004498 ; ===========================================================================
.text:00004498
.text:00004498 ; Segment type: Pure code
.text:00004498 ; Segment permissions: Read/Execute
.text:00004498 _text           segment para public 'CODE' use32
.text:00004498                 assume cs:_text
.text:00004498                 ;org 4498h
.text:00004498 ; COMDAT (pick any)
.text:00004498                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004498
.text:00004498 ; =============== S U B R O U T I N E =======================================
.text:00004498
.text:00004498 ; Attributes: bp-based frame
.text:00004498
.text:00004498 ; unsigned __int32 __stdcall CLimitedSequentialInStream::Release(CLimitedSequentialInStream *this)
.text:00004498                 public ?Release@CLimitedSequentialInStream@@UAGKXZ
.text:00004498 ?Release@CLimitedSequentialInStream@@UAGKXZ proc near
.text:00004498                                         ; DATA XREF: .rdata:0000437Co
.text:00004498
.text:00004498 var_10          = dword ptr -10h
.text:00004498 var_C           = dword ptr -0Ch
.text:00004498 var_8           = dword ptr -8
.text:00004498 var_4           = dword ptr -4
.text:00004498 this            = dword ptr  8
.text:00004498
.text:00004498                 push    ebp
.text:00004499                 mov     ebp, esp
.text:0000449B                 sub     esp, 10h
.text:0000449E                 mov     eax, 0CCCCCCCCh
.text:000044A3                 mov     [ebp+var_10], eax
.text:000044A6                 mov     [ebp+var_C], eax
.text:000044A9                 mov     [ebp+var_8], eax
.text:000044AC                 mov     [ebp+var_4], eax
.text:000044AF                 mov     eax, [ebp+this]
.text:000044B2                 mov     ecx, [eax+4]
.text:000044B5                 sub     ecx, 1
.text:000044B8                 mov     [ebp+var_C], ecx
.text:000044BB                 mov     edx, [ebp+this]
.text:000044BE                 mov     eax, [ebp+var_C]
.text:000044C1                 mov     [edx+4], eax
.text:000044C4                 cmp     [ebp+var_C], 0
.text:000044C8                 jz      short loc_44D2
.text:000044CA                 mov     ecx, [ebp+this]
.text:000044CD                 mov     eax, [ecx+4]
.text:000044D0                 jmp     short loc_44FC
.text:000044D2 ; ---------------------------------------------------------------------------
.text:000044D2
.text:000044D2 loc_44D2:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+30j
.text:000044D2                 mov     edx, [ebp+this]
.text:000044D5                 mov     [ebp+var_8], edx
.text:000044D8                 mov     eax, [ebp+var_8]
.text:000044DB                 mov     [ebp+var_4], eax
.text:000044DE                 cmp     [ebp+var_4], 0
.text:000044E2                 jz      short loc_44F3
.text:000044E4                 push    1
.text:000044E6                 mov     ecx, [ebp+var_4]
.text:000044E9                 call    ??_GCLimitedSequentialInStream@@QAEPAXI@Z ; CLimitedSequentialInStream::`scalar deleting destructor'(uint)
.text:000044EE                 mov     [ebp+var_10], eax
.text:000044F1                 jmp     short loc_44FA
.text:000044F3 ; ---------------------------------------------------------------------------
.text:000044F3
.text:000044F3 loc_44F3:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+4Aj
.text:000044F3                 mov     [ebp+var_10], 0
.text:000044FA
.text:000044FA loc_44FA:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+59j
.text:000044FA                 xor     eax, eax
.text:000044FC
.text:000044FC loc_44FC:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+38j
.text:000044FC                 add     esp, 10h
.text:000044FF                 cmp     ebp, esp
.text:00004501                 call    __RTC_CheckEsp
.text:00004506                 mov     esp, ebp
.text:00004508                 pop     ebp
.text:00004509                 retn    4
.text:00004509 ?Release@CLimitedSequentialInStream@@UAGKXZ endp
.text:00004509
.text:00004509 _text           ends
.text:00004509
.text:0000450C ; ===========================================================================
.text:0000450C
.text:0000450C ; Segment type: Pure code
.text:0000450C ; Segment permissions: Read/Execute
.text:0000450C _text           segment para public 'CODE' use32
.text:0000450C                 assume cs:_text
.text:0000450C                 ;org 450Ch
.text:0000450C ; COMDAT (pick any)
.text:0000450C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000450C
.text:0000450C ; =============== S U B R O U T I N E =======================================
.text:0000450C
.text:0000450C ; Attributes: bp-based frame
.text:0000450C
.text:0000450C ; public: void * __thiscall CLimitedSequentialInStream::`scalar deleting destructor'(unsigned int)
.text:0000450C                 public ??_GCLimitedSequentialInStream@@QAEPAXI@Z
.text:0000450C ??_GCLimitedSequentialInStream@@QAEPAXI@Z proc near
.text:0000450C                                         ; CODE XREF: CLimitedSequentialInStream::Release(void)+51p
.text:0000450C
.text:0000450C var_4           = dword ptr -4
.text:0000450C arg_0           = dword ptr  8
.text:0000450C
.text:0000450C                 push    ebp
.text:0000450D                 mov     ebp, esp
.text:0000450F                 push    ecx
.text:00004510                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004517                 mov     [ebp+var_4], ecx
.text:0000451A                 mov     ecx, [ebp+var_4] ; this
.text:0000451D                 call    ??1CLimitedSequentialInStream@@QAE@XZ ; CLimitedSequentialInStream::~CLimitedSequentialInStream(void)
.text:00004522                 mov     eax, [ebp+arg_0]
.text:00004525                 and     eax, 1
.text:00004528                 jz      short loc_4536
.text:0000452A                 mov     ecx, [ebp+var_4]
.text:0000452D                 push    ecx             ; void *
.text:0000452E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004533                 add     esp, 4
.text:00004536
.text:00004536 loc_4536:                               ; CODE XREF: CLimitedSequentialInStream::`scalar deleting destructor'(uint)+1Cj
.text:00004536                 mov     eax, [ebp+var_4]
.text:00004539                 add     esp, 4
.text:0000453C                 cmp     ebp, esp
.text:0000453E                 call    __RTC_CheckEsp
.text:00004543                 mov     esp, ebp
.text:00004545                 pop     ebp
.text:00004546                 retn    4
.text:00004546 ??_GCLimitedSequentialInStream@@QAEPAXI@Z endp
.text:00004546
.text:00004546 ; ---------------------------------------------------------------------------
.text:00004549                 align 4
.text:00004549 _text           ends
.text:00004549
.text:0000454C ; ===========================================================================
.text:0000454C
.text:0000454C ; Segment type: Pure code
.text:0000454C ; Segment permissions: Read/Execute
.text:0000454C _text           segment para public 'CODE' use32
.text:0000454C                 assume cs:_text
.text:0000454C                 ;org 454Ch
.text:0000454C ; COMDAT (pick any)
.text:0000454C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000454C
.text:0000454C ; =============== S U B R O U T I N E =======================================
.text:0000454C
.text:0000454C ; Attributes: bp-based frame
.text:0000454C
.text:0000454C ; _DWORD __thiscall CLimitedSequentialInStream::~CLimitedSequentialInStream(CLimitedSequentialInStream *__hidden this)
.text:0000454C                 public ??1CLimitedSequentialInStream@@QAE@XZ
.text:0000454C ??1CLimitedSequentialInStream@@QAE@XZ proc near
.text:0000454C                                         ; CODE XREF: CLimitedSequentialInStream::`scalar deleting destructor'(uint)+11p
.text:0000454C
.text:0000454C var_4           = dword ptr -4
.text:0000454C
.text:0000454C                 push    ebp
.text:0000454D                 mov     ebp, esp
.text:0000454F                 push    ecx
.text:00004550                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004557                 mov     [ebp+var_4], ecx
.text:0000455A                 mov     ecx, [ebp+var_4]
.text:0000455D                 add     ecx, 8
.text:00004560                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00004565                 add     esp, 4
.text:00004568                 cmp     ebp, esp
.text:0000456A                 call    __RTC_CheckEsp
.text:0000456F                 mov     esp, ebp
.text:00004571                 pop     ebp
.text:00004572                 retn
.text:00004572 ??1CLimitedSequentialInStream@@QAE@XZ endp
.text:00004572
.text:00004572 ; ---------------------------------------------------------------------------
.text:00004573                 align 4
.text:00004573 _text           ends
.text:00004573
.text:00004574 ; ===========================================================================
.text:00004574
.text:00004574 ; Segment type: Pure code
.text:00004574 ; Segment permissions: Read/Execute
.text:00004574 _text           segment para public 'CODE' use32
.text:00004574                 assume cs:_text
.text:00004574                 ;org 4574h
.text:00004574 ; COMDAT (pick any)
.text:00004574                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004574
.text:00004574 ; =============== S U B R O U T I N E =======================================
.text:00004574
.text:00004574 ; Attributes: bp-based frame
.text:00004574
.text:00004574 ; _DWORD __thiscall NArchive::N7z::CFolder::~CFolder(NArchive::N7z::CFolder *__hidden this)
.text:00004574                 public ??1CFolder@N7z@NArchive@@QAE@XZ
.text:00004574 ??1CFolder@N7z@NArchive@@QAE@XZ proc near
.text:00004574                                         ; CODE XREF: NArchive::N7z::CFolderEx::~CFolderEx(void)+11p
.text:00004574
.text:00004574 var_10          = dword ptr -10h
.text:00004574 var_C           = dword ptr -0Ch
.text:00004574 var_4           = dword ptr -4
.text:00004574
.text:00004574                 push    ebp
.text:00004575                 mov     ebp, esp
.text:00004577                 push    0FFFFFFFFh
.text:00004579                 push    offset __ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ
.text:0000457E                 mov     eax, large fs:0
.text:00004584                 push    eax
.text:00004585                 push    ecx
.text:00004586                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000458D                 mov     eax, dword ptr ds:___security_cookie
.text:00004592                 xor     eax, ebp
.text:00004594                 push    eax
.text:00004595                 lea     eax, [ebp+var_C]
.text:00004598                 mov     large fs:0, eax
.text:0000459E                 mov     [ebp+var_10], ecx
.text:000045A1                 mov     [ebp+var_4], 1
.text:000045A8                 mov     ecx, [ebp+var_10]
.text:000045AB                 add     ecx, 10h
.text:000045AE                 call    ??1?$CObjArray2@I@@QAE@XZ ; CObjArray2<uint>::~CObjArray2<uint>(void)
.text:000045B3                 mov     byte ptr [ebp+var_4], 0
.text:000045B7                 mov     ecx, [ebp+var_10]
.text:000045BA                 add     ecx, 8
.text:000045BD                 call    ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>(void)
.text:000045C2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000045C9                 mov     ecx, [ebp+var_10]
.text:000045CC                 call    ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)
.text:000045D1                 mov     ecx, [ebp+var_C]
.text:000045D4                 mov     large fs:0, ecx
.text:000045DB                 pop     ecx
.text:000045DC                 add     esp, 10h
.text:000045DF                 cmp     ebp, esp
.text:000045E1                 call    __RTC_CheckEsp
.text:000045E6                 mov     esp, ebp
.text:000045E8                 pop     ebp
.text:000045E9                 retn
.text:000045E9 ??1CFolder@N7z@NArchive@@QAE@XZ endp
.text:000045E9
.text:000045E9 ; ---------------------------------------------------------------------------
.text:000045EA                 align 4
.text:000045EA _text           ends
.text:000045EA
.text$x:000045EC ; ===========================================================================
.text$x:000045EC
.text$x:000045EC ; Segment type: Pure code
.text$x:000045EC ; Segment permissions: Read/Execute
.text$x:000045EC _text$x         segment para public 'CODE' use32
.text$x:000045EC                 assume cs:_text$x
.text$x:000045EC                 ;org 45ECh
.text$x:000045EC ; COMDAT (pick associative to section at 4574)
.text$x:000045EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000045EC
.text$x:000045EC ; =============== S U B R O U T I N E =======================================
.text$x:000045EC
.text$x:000045EC
.text$x:000045EC __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:000045EC                                         ; DATA XREF: .xdata$x:00004620o
.text$x:000045EC                 mov     ecx, [ebp-10h]
.text$x:000045EF                 jmp     ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)
.text$x:000045EF __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0 endp
.text$x:000045EF
.text$x:000045F4
.text$x:000045F4 ; =============== S U B R O U T I N E =======================================
.text$x:000045F4
.text$x:000045F4
.text$x:000045F4 __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:000045F4                                         ; DATA XREF: .xdata$x:00004628o
.text$x:000045F4                 mov     ecx, [ebp-10h]
.text$x:000045F7                 add     ecx, 8
.text$x:000045FA                 jmp     ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>(void)
.text$x:000045FA __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1 endp
.text$x:000045FA
.text$x:000045FF
.text$x:000045FF ; =============== S U B R O U T I N E =======================================
.text$x:000045FF
.text$x:000045FF
.text$x:000045FF __ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ proc near
.text$x:000045FF                                         ; DATA XREF: NArchive::N7z::CFolder::~CFolder(void)+5o
.text$x:000045FF
.text$x:000045FF arg_4           = dword ptr  8
.text$x:000045FF
.text$x:000045FF                 mov     edx, [esp+arg_4]
.text$x:00004603                 lea     eax, [edx+0Ch]
.text$x:00004606                 mov     ecx, [edx-8]
.text$x:00004609                 xor     ecx, eax
.text$x:0000460B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004610                 mov     eax, offset __ehfuncinfo$??1CFolder@N7z@NArchive@@QAE@XZ
.text$x:00004615                 jmp     ___CxxFrameHandler3
.text$x:00004615 __ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ endp
.text$x:00004615
.text$x:00004615 ; ---------------------------------------------------------------------------
.text$x:0000461A                 align 4
.text$x:0000461A _text$x         ends
.text$x:0000461A
.xdata$x:0000461C ; ===========================================================================
.xdata$x:0000461C
.xdata$x:0000461C ; Segment type: Pure data
.xdata$x:0000461C ; Segment permissions: Read
.xdata$x:0000461C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000461C                 assume cs:_xdata$x
.xdata$x:0000461C                 ;org 461Ch
.xdata$x:0000461C ; COMDAT (pick associative to section at 4574)
.xdata$x:0000461C __unwindtable$??1CFolder@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000461C                                         ; DATA XREF: .xdata$x:00004634o
.xdata$x:0000461D                 db 0FFh
.xdata$x:0000461E                 db 0FFh
.xdata$x:0000461F                 db 0FFh
.xdata$x:00004620                 dd offset __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0
.xdata$x:00004624                 align 8
.xdata$x:00004628                 dd offset __unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1
.xdata$x:0000462C __ehfuncinfo$??1CFolder@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000462C                                         ; DATA XREF: __ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ+11o
.xdata$x:0000462D                 db    5
.xdata$x:0000462E                 db  93h ; ô
.xdata$x:0000462F                 db  19h
.xdata$x:00004630                 db    2
.xdata$x:00004631                 db    0
.xdata$x:00004632                 db    0
.xdata$x:00004633                 db    0
.xdata$x:00004634                 dd offset __unwindtable$??1CFolder@N7z@NArchive@@QAE@XZ
.xdata$x:00004638                 db    0
.xdata$x:00004639                 db    0
.xdata$x:0000463A                 db    0
.xdata$x:0000463B                 db    0
.xdata$x:0000463C                 db    0
.xdata$x:0000463D                 db    0
.xdata$x:0000463E                 db    0
.xdata$x:0000463F                 db    0
.xdata$x:00004640                 db    0
.xdata$x:00004641                 db    0
.xdata$x:00004642                 db    0
.xdata$x:00004643                 db    0
.xdata$x:00004644                 db    0
.xdata$x:00004645                 db    0
.xdata$x:00004646                 db    0
.xdata$x:00004647                 db    0
.xdata$x:00004648                 db    0
.xdata$x:00004649                 db    0
.xdata$x:0000464A                 db    0
.xdata$x:0000464B                 db    0
.xdata$x:0000464C                 db    1
.xdata$x:0000464D                 db    0
.xdata$x:0000464E                 db    0
.xdata$x:0000464F                 db    0
.xdata$x:0000464F _xdata$x        ends
.xdata$x:0000464F
.text:00004650 ; ===========================================================================
.text:00004650
.text:00004650 ; Segment type: Pure code
.text:00004650 ; Segment permissions: Read/Execute
.text:00004650 _text           segment para public 'CODE' use32
.text:00004650                 assume cs:_text
.text:00004650                 ;org 4650h
.text:00004650 ; COMDAT (pick any)
.text:00004650                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004650
.text:00004650 ; =============== S U B R O U T I N E =======================================
.text:00004650
.text:00004650 ; Attributes: bp-based frame
.text:00004650
.text:00004650 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:00004650                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00004650 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00004650                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+10ECp
.text:00004650                                         ; CLimitedSequentialInStream::CLimitedSequentialInStream(void)+30p ...
.text:00004650
.text:00004650 var_4           = dword ptr -4
.text:00004650
.text:00004650                 push    ebp
.text:00004651                 mov     ebp, esp
.text:00004653                 push    ecx
.text:00004654                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000465B                 mov     [ebp+var_4], ecx
.text:0000465E                 mov     eax, [ebp+var_4]
.text:00004661                 mov     dword ptr [eax], 0
.text:00004667                 mov     eax, [ebp+var_4]
.text:0000466A                 mov     esp, ebp
.text:0000466C                 pop     ebp
.text:0000466D                 retn
.text:0000466D ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:0000466D
.text:0000466D ; ---------------------------------------------------------------------------
.text:0000466E                 align 10h
.text:0000466E _text           ends
.text:0000466E
.text:00004670 ; ===========================================================================
.text:00004670
.text:00004670 ; Segment type: Pure code
.text:00004670 ; Segment permissions: Read/Execute
.text:00004670 _text           segment para public 'CODE' use32
.text:00004670                 assume cs:_text
.text:00004670                 ;org 4670h
.text:00004670 ; COMDAT (pick any)
.text:00004670                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004670
.text:00004670 ; =============== S U B R O U T I N E =======================================
.text:00004670
.text:00004670 ; Attributes: bp-based frame
.text:00004670
.text:00004670 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00004670                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00004670 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00004670                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1176p
.text:00004670                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+13C3p ...
.text:00004670
.text:00004670 var_4           = dword ptr -4
.text:00004670
.text:00004670                 push    ebp
.text:00004671                 mov     ebp, esp
.text:00004673                 push    ecx
.text:00004674                 push    esi
.text:00004675                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000467C                 mov     [ebp+var_4], ecx
.text:0000467F                 mov     eax, [ebp+var_4]
.text:00004682                 cmp     dword ptr [eax], 0
.text:00004685                 jz      short loc_46A2
.text:00004687                 mov     ecx, [ebp+var_4]
.text:0000468A                 mov     edx, [ecx]
.text:0000468C                 mov     eax, [ebp+var_4]
.text:0000468F                 mov     ecx, [eax]
.text:00004691                 mov     edx, [edx]
.text:00004693                 mov     esi, esp
.text:00004695                 push    ecx
.text:00004696                 mov     eax, [edx+8]
.text:00004699                 call    eax
.text:0000469B                 cmp     esi, esp
.text:0000469D                 call    __RTC_CheckEsp
.text:000046A2
.text:000046A2 loc_46A2:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:000046A2                 pop     esi
.text:000046A3                 add     esp, 4
.text:000046A6                 cmp     ebp, esp
.text:000046A8                 call    __RTC_CheckEsp
.text:000046AD                 mov     esp, ebp
.text:000046AF                 pop     ebp
.text:000046B0                 retn
.text:000046B0 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:000046B0
.text:000046B0 ; ---------------------------------------------------------------------------
.text:000046B1                 align 4
.text:000046B1 _text           ends
.text:000046B1
.text:000046B4 ; ===========================================================================
.text:000046B4
.text:000046B4 ; Segment type: Pure code
.text:000046B4 ; Segment permissions: Read/Execute
.text:000046B4 _text           segment para public 'CODE' use32
.text:000046B4                 assume cs:_text
.text:000046B4                 ;org 46B4h
.text:000046B4 ; COMDAT (pick any)
.text:000046B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000046B4
.text:000046B4 ; =============== S U B R O U T I N E =======================================
.text:000046B4
.text:000046B4 ; Attributes: bp-based frame
.text:000046B4
.text:000046B4 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::operator struct ISequentialInStream *(void)const
.text:000046B4                 public ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:000046B4 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:000046B4                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+137Ap
.text:000046B4                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1431p
.text:000046B4
.text:000046B4 var_4           = dword ptr -4
.text:000046B4
.text:000046B4                 push    ebp
.text:000046B5                 mov     ebp, esp
.text:000046B7                 push    ecx
.text:000046B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000046BF                 mov     [ebp+var_4], ecx
.text:000046C2                 mov     eax, [ebp+var_4]
.text:000046C5                 mov     eax, [eax]
.text:000046C7                 mov     esp, ebp
.text:000046C9                 pop     ebp
.text:000046CA                 retn
.text:000046CA ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:000046CA
.text:000046CA ; ---------------------------------------------------------------------------
.text:000046CB                 align 4
.text:000046CB _text           ends
.text:000046CB
.text:000046CC ; ===========================================================================
.text:000046CC
.text:000046CC ; Segment type: Pure code
.text:000046CC ; Segment permissions: Read/Execute
.text:000046CC _text           segment para public 'CODE' use32
.text:000046CC                 assume cs:_text
.text:000046CC                 ;org 46CCh
.text:000046CC ; COMDAT (pick any)
.text:000046CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000046CC
.text:000046CC ; =============== S U B R O U T I N E =======================================
.text:000046CC
.text:000046CC ; Attributes: bp-based frame
.text:000046CC
.text:000046CC ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:000046CC                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:000046CC ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:000046CC                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+11CCp
.text:000046CC                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1253p ...
.text:000046CC
.text:000046CC var_4           = dword ptr -4
.text:000046CC arg_0           = dword ptr  8
.text:000046CC
.text:000046CC                 push    ebp
.text:000046CD                 mov     ebp, esp
.text:000046CF                 push    ecx
.text:000046D0                 push    esi
.text:000046D1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000046D8                 mov     [ebp+var_4], ecx
.text:000046DB                 cmp     [ebp+arg_0], 0
.text:000046DF                 jz      short loc_46F8
.text:000046E1                 mov     eax, [ebp+arg_0]
.text:000046E4                 mov     ecx, [eax]
.text:000046E6                 mov     esi, esp
.text:000046E8                 mov     edx, [ebp+arg_0]
.text:000046EB                 push    edx
.text:000046EC                 mov     eax, [ecx+4]
.text:000046EF                 call    eax
.text:000046F1                 cmp     esi, esp
.text:000046F3                 call    __RTC_CheckEsp
.text:000046F8
.text:000046F8 loc_46F8:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:000046F8                 mov     ecx, [ebp+var_4]
.text:000046FB                 cmp     dword ptr [ecx], 0
.text:000046FE                 jz      short loc_471B
.text:00004700                 mov     edx, [ebp+var_4]
.text:00004703                 mov     eax, [edx]
.text:00004705                 mov     ecx, [ebp+var_4]
.text:00004708                 mov     edx, [ecx]
.text:0000470A                 mov     eax, [eax]
.text:0000470C                 mov     esi, esp
.text:0000470E                 push    edx
.text:0000470F                 mov     ecx, [eax+8]
.text:00004712                 call    ecx
.text:00004714                 cmp     esi, esp
.text:00004716                 call    __RTC_CheckEsp
.text:0000471B
.text:0000471B loc_471B:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:0000471B                 mov     edx, [ebp+var_4]
.text:0000471E                 mov     eax, [ebp+arg_0]
.text:00004721                 mov     [edx], eax
.text:00004723                 mov     eax, [ebp+arg_0]
.text:00004726                 pop     esi
.text:00004727                 add     esp, 4
.text:0000472A                 cmp     ebp, esp
.text:0000472C                 call    __RTC_CheckEsp
.text:00004731                 mov     esp, ebp
.text:00004733                 pop     ebp
.text:00004734                 retn    4
.text:00004734 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:00004734
.text:00004734 ; ---------------------------------------------------------------------------
.text:00004737                 align 4
.text:00004737 _text           ends
.text:00004737
.text:00004738 ; ===========================================================================
.text:00004738
.text:00004738 ; Segment type: Pure code
.text:00004738 ; Segment permissions: Read/Execute
.text:00004738 _text           segment para public 'CODE' use32
.text:00004738                 assume cs:_text
.text:00004738                 ;org 4738h
.text:00004738 ; COMDAT (pick any)
.text:00004738                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004738
.text:00004738 ; =============== S U B R O U T I N E =======================================
.text:00004738
.text:00004738 ; Attributes: bp-based frame
.text:00004738
.text:00004738 ; public: __thiscall CMyComPtr<struct IInStream>::CMyComPtr<struct IInStream>(void)
.text:00004738                 public ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:00004738 ??0?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:00004738                                         ; CODE XREF: NArchive::N7z::CLockedInStream::CLockedInStream(void)+4Fp
.text:00004738
.text:00004738 var_4           = dword ptr -4
.text:00004738
.text:00004738                 push    ebp
.text:00004739                 mov     ebp, esp
.text:0000473B                 push    ecx
.text:0000473C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004743                 mov     [ebp+var_4], ecx
.text:00004746                 mov     eax, [ebp+var_4]
.text:00004749                 mov     dword ptr [eax], 0
.text:0000474F                 mov     eax, [ebp+var_4]
.text:00004752                 mov     esp, ebp
.text:00004754                 pop     ebp
.text:00004755                 retn
.text:00004755 ??0?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:00004755
.text:00004755 ; ---------------------------------------------------------------------------
.text:00004756                 align 4
.text:00004756 _text           ends
.text:00004756
.text:00004758 ; ===========================================================================
.text:00004758
.text:00004758 ; Segment type: Pure code
.text:00004758 ; Segment permissions: Read/Execute
.text:00004758 _text           segment para public 'CODE' use32
.text:00004758                 assume cs:_text
.text:00004758                 ;org 4758h
.text:00004758 ; COMDAT (pick any)
.text:00004758                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004758
.text:00004758 ; =============== S U B R O U T I N E =======================================
.text:00004758
.text:00004758 ; Attributes: bp-based frame
.text:00004758
.text:00004758 ; public: __thiscall CMyComPtr<struct IInStream>::~CMyComPtr<struct IInStream>(void)
.text:00004758                 public ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:00004758 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:00004758                                         ; CODE XREF: __unwindfunclet$??0CLockedInStream@N7z@NArchive@@QAE@XZ$0+6j
.text:00004758                                         ; NArchive::N7z::CLockedInStream::~CLockedInStream(void)+4Cp ...
.text:00004758
.text:00004758 var_4           = dword ptr -4
.text:00004758
.text:00004758                 push    ebp
.text:00004759                 mov     ebp, esp
.text:0000475B                 push    ecx
.text:0000475C                 push    esi
.text:0000475D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004764                 mov     [ebp+var_4], ecx
.text:00004767                 mov     eax, [ebp+var_4]
.text:0000476A                 cmp     dword ptr [eax], 0
.text:0000476D                 jz      short loc_478A
.text:0000476F                 mov     ecx, [ebp+var_4]
.text:00004772                 mov     edx, [ecx]
.text:00004774                 mov     eax, [ebp+var_4]
.text:00004777                 mov     ecx, [eax]
.text:00004779                 mov     edx, [edx]
.text:0000477B                 mov     esi, esp
.text:0000477D                 push    ecx
.text:0000477E                 mov     eax, [edx+8]
.text:00004781                 call    eax
.text:00004783                 cmp     esi, esp
.text:00004785                 call    __RTC_CheckEsp
.text:0000478A
.text:0000478A loc_478A:                               ; CODE XREF: CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)+15j
.text:0000478A                 pop     esi
.text:0000478B                 add     esp, 4
.text:0000478E                 cmp     ebp, esp
.text:00004790                 call    __RTC_CheckEsp
.text:00004795                 mov     esp, ebp
.text:00004797                 pop     ebp
.text:00004798                 retn
.text:00004798 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:00004798
.text:00004798 ; ---------------------------------------------------------------------------
.text:00004799                 align 4
.text:00004799 _text           ends
.text:00004799
.text:0000479C ; ===========================================================================
.text:0000479C
.text:0000479C ; Segment type: Pure code
.text:0000479C ; Segment permissions: Read/Execute
.text:0000479C _text           segment para public 'CODE' use32
.text:0000479C                 assume cs:_text
.text:0000479C                 ;org 479Ch
.text:0000479C ; COMDAT (pick any)
.text:0000479C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000479C
.text:0000479C ; =============== S U B R O U T I N E =======================================
.text:0000479C
.text:0000479C ; Attributes: bp-based frame
.text:0000479C
.text:0000479C ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator->(void)const
.text:0000479C                 public ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:0000479C ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:0000479C                                         ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::Read(void *,uint,uint *)+5Dp
.text:0000479C                                         ; NArchive::N7z::CLockedSequentialInStreamMT::Read(void *,uint,uint *)+CFp ...
.text:0000479C
.text:0000479C var_4           = dword ptr -4
.text:0000479C
.text:0000479C                 push    ebp
.text:0000479D                 mov     ebp, esp
.text:0000479F                 push    ecx
.text:000047A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000047A7                 mov     [ebp+var_4], ecx
.text:000047AA                 mov     eax, [ebp+var_4]
.text:000047AD                 mov     eax, [eax]
.text:000047AF                 mov     esp, ebp
.text:000047B1                 pop     ebp
.text:000047B2                 retn
.text:000047B2 ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:000047B2
.text:000047B2 ; ---------------------------------------------------------------------------
.text:000047B3                 align 4
.text:000047B3 _text           ends
.text:000047B3
.text:000047B4 ; ===========================================================================
.text:000047B4
.text:000047B4 ; Segment type: Pure code
.text:000047B4 ; Segment permissions: Read/Execute
.text:000047B4 _text           segment para public 'CODE' use32
.text:000047B4                 assume cs:_text
.text:000047B4                 ;org 47B4h
.text:000047B4 ; COMDAT (pick any)
.text:000047B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000047B4
.text:000047B4 ; =============== S U B R O U T I N E =======================================
.text:000047B4
.text:000047B4 ; Attributes: bp-based frame
.text:000047B4
.text:000047B4 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator=(struct IInStream *)
.text:000047B4                 public ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
.text:000047B4 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z proc near
.text:000047B4                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+108Fp
.text:000047B4
.text:000047B4 var_4           = dword ptr -4
.text:000047B4 arg_0           = dword ptr  8
.text:000047B4
.text:000047B4                 push    ebp
.text:000047B5                 mov     ebp, esp
.text:000047B7                 push    ecx
.text:000047B8                 push    esi
.text:000047B9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000047C0                 mov     [ebp+var_4], ecx
.text:000047C3                 cmp     [ebp+arg_0], 0
.text:000047C7                 jz      short loc_47E0
.text:000047C9                 mov     eax, [ebp+arg_0]
.text:000047CC                 mov     ecx, [eax]
.text:000047CE                 mov     esi, esp
.text:000047D0                 mov     edx, [ebp+arg_0]
.text:000047D3                 push    edx
.text:000047D4                 mov     eax, [ecx+4]
.text:000047D7                 call    eax
.text:000047D9                 cmp     esi, esp
.text:000047DB                 call    __RTC_CheckEsp
.text:000047E0
.text:000047E0 loc_47E0:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+13j
.text:000047E0                 mov     ecx, [ebp+var_4]
.text:000047E3                 cmp     dword ptr [ecx], 0
.text:000047E6                 jz      short loc_4803
.text:000047E8                 mov     edx, [ebp+var_4]
.text:000047EB                 mov     eax, [edx]
.text:000047ED                 mov     ecx, [ebp+var_4]
.text:000047F0                 mov     edx, [ecx]
.text:000047F2                 mov     eax, [eax]
.text:000047F4                 mov     esi, esp
.text:000047F6                 push    edx
.text:000047F7                 mov     ecx, [eax+8]
.text:000047FA                 call    ecx
.text:000047FC                 cmp     esi, esp
.text:000047FE                 call    __RTC_CheckEsp
.text:00004803
.text:00004803 loc_4803:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+32j
.text:00004803                 mov     edx, [ebp+var_4]
.text:00004806                 mov     eax, [ebp+arg_0]
.text:00004809                 mov     [edx], eax
.text:0000480B                 mov     eax, [ebp+arg_0]
.text:0000480E                 pop     esi
.text:0000480F                 add     esp, 4
.text:00004812                 cmp     ebp, esp
.text:00004814                 call    __RTC_CheckEsp
.text:00004819                 mov     esp, ebp
.text:0000481B                 pop     ebp
.text:0000481C                 retn    4
.text:0000481C ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z endp
.text:0000481C
.text:0000481C ; ---------------------------------------------------------------------------
.text:0000481F                 align 10h
.text:0000481F _text           ends
.text:0000481F
.text:00004820 ; ===========================================================================
.text:00004820
.text:00004820 ; Segment type: Pure code
.text:00004820 ; Segment permissions: Read/Execute
.text:00004820 _text           segment para public 'CODE' use32
.text:00004820                 assume cs:_text
.text:00004820                 ;org 4820h
.text:00004820 ; COMDAT (pick any)
.text:00004820                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004820
.text:00004820 ; =============== S U B R O U T I N E =======================================
.text:00004820
.text:00004820 ; Attributes: bp-based frame
.text:00004820
.text:00004820 ; public: __thiscall CRecordVector<unsigned int>::CRecordVector<unsigned int>(void)
.text:00004820                 public ??0?$CRecordVector@I@@QAE@XZ
.text:00004820 ??0?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: NCoderMixer2::CBindInfo::CBindInfo(void)+51p
.text:00004820                                         ; NCoderMixer2::CBindInfo::CBindInfo(void)+60p ...
.text:00004820
.text:00004820 var_4           = dword ptr -4
.text:00004820
.text:00004820                 push    ebp
.text:00004821                 mov     ebp, esp
.text:00004823                 push    ecx
.text:00004824                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000482B                 mov     [ebp+var_4], ecx
.text:0000482E                 mov     eax, [ebp+var_4]
.text:00004831                 mov     dword ptr [eax], 0
.text:00004837                 mov     ecx, [ebp+var_4]
.text:0000483A                 mov     dword ptr [ecx+4], 0
.text:00004841                 mov     edx, [ebp+var_4]
.text:00004844                 mov     dword ptr [edx+8], 0
.text:0000484B                 mov     eax, [ebp+var_4]
.text:0000484E                 mov     esp, ebp
.text:00004850                 pop     ebp
.text:00004851                 retn
.text:00004851 ??0?$CRecordVector@I@@QAE@XZ endp
.text:00004851
.text:00004851 ; ---------------------------------------------------------------------------
.text:00004852                 align 4
.text:00004852 _text           ends
.text:00004852
.text:00004854 ; ===========================================================================
.text:00004854
.text:00004854 ; Segment type: Pure code
.text:00004854 ; Segment permissions: Read/Execute
.text:00004854 _text           segment para public 'CODE' use32
.text:00004854                 assume cs:_text
.text:00004854                 ;org 4854h
.text:00004854 ; COMDAT (pick any)
.text:00004854                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004854
.text:00004854 ; =============== S U B R O U T I N E =======================================
.text:00004854
.text:00004854 ; Attributes: bp-based frame
.text:00004854
.text:00004854 ; public: unsigned int __thiscall CRecordVector<unsigned int>::Size(void)const
.text:00004854                 public ?Size@?$CRecordVector@I@@QBEIXZ
.text:00004854 ?Size@?$CRecordVector@I@@QBEIXZ proc near
.text:00004854                                         ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+16Fp
.text:00004854                                         ; NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+17Cp ...
.text:00004854
.text:00004854 var_4           = dword ptr -4
.text:00004854
.text:00004854                 push    ebp
.text:00004855                 mov     ebp, esp
.text:00004857                 push    ecx
.text:00004858                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000485F                 mov     [ebp+var_4], ecx
.text:00004862                 mov     eax, [ebp+var_4]
.text:00004865                 mov     eax, [eax+4]
.text:00004868                 mov     esp, ebp
.text:0000486A                 pop     ebp
.text:0000486B                 retn
.text:0000486B ?Size@?$CRecordVector@I@@QBEIXZ endp
.text:0000486B
.text:0000486B _text           ends
.text:0000486B
.text:0000486C ; ===========================================================================
.text:0000486C
.text:0000486C ; Segment type: Pure code
.text:0000486C ; Segment permissions: Read/Execute
.text:0000486C _text           segment para public 'CODE' use32
.text:0000486C                 assume cs:_text
.text:0000486C                 ;org 486Ch
.text:0000486C ; COMDAT (pick any)
.text:0000486C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000486C
.text:0000486C ; =============== S U B R O U T I N E =======================================
.text:0000486C
.text:0000486C ; Attributes: bp-based frame
.text:0000486C
.text:0000486C ; public: void __thiscall CRecordVector<unsigned int>::ClearAndSetSize(unsigned int)
.text:0000486C                 public ?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z
.text:0000486C ?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z proc near
.text:0000486C                                         ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+13Ep
.text:0000486C
.text:0000486C var_4           = dword ptr -4
.text:0000486C arg_0           = dword ptr  8
.text:0000486C
.text:0000486C                 push    ebp
.text:0000486D                 mov     ebp, esp
.text:0000486F                 push    ecx
.text:00004870                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004877                 mov     [ebp+var_4], ecx
.text:0000487A                 mov     eax, [ebp+arg_0]
.text:0000487D                 push    eax
.text:0000487E                 mov     ecx, [ebp+var_4]
.text:00004881                 call    ?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<uint>::ClearAndReserve(uint)
.text:00004886                 mov     ecx, [ebp+var_4]
.text:00004889                 mov     edx, [ebp+arg_0]
.text:0000488C                 mov     [ecx+4], edx
.text:0000488F                 add     esp, 4
.text:00004892                 cmp     ebp, esp
.text:00004894                 call    __RTC_CheckEsp
.text:00004899                 mov     esp, ebp
.text:0000489B                 pop     ebp
.text:0000489C                 retn    4
.text:0000489C ?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z endp
.text:0000489C
.text:0000489C ; ---------------------------------------------------------------------------
.text:0000489F                 align 10h
.text:0000489F _text           ends
.text:0000489F
.text:000048A0 ; ===========================================================================
.text:000048A0
.text:000048A0 ; Segment type: Pure code
.text:000048A0 ; Segment permissions: Read/Execute
.text:000048A0 _text           segment para public 'CODE' use32
.text:000048A0                 assume cs:_text
.text:000048A0                 ;org 48A0h
.text:000048A0 ; COMDAT (pick any)
.text:000048A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000048A0
.text:000048A0 ; =============== S U B R O U T I N E =======================================
.text:000048A0
.text:000048A0 ; Attributes: bp-based frame
.text:000048A0
.text:000048A0 ; public: __thiscall CRecordVector<unsigned int>::~CRecordVector<unsigned int>(void)
.text:000048A0                 public ??1?$CRecordVector@I@@QAE@XZ
.text:000048A0 ??1?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$2+6j
.text:000048A0                                         ; __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$3+6j ...
.text:000048A0
.text:000048A0 var_8           = dword ptr -8
.text:000048A0 var_4           = dword ptr -4
.text:000048A0
.text:000048A0                 push    ebp
.text:000048A1                 mov     ebp, esp
.text:000048A3                 sub     esp, 8
.text:000048A6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000048AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000048B4                 mov     [ebp+var_4], ecx
.text:000048B7                 mov     eax, [ebp+var_4]
.text:000048BA                 mov     ecx, [eax]
.text:000048BC                 mov     [ebp+var_8], ecx
.text:000048BF                 mov     edx, [ebp+var_8]
.text:000048C2                 push    edx             ; void *
.text:000048C3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000048C8                 add     esp, 4
.text:000048CB                 add     esp, 8
.text:000048CE                 cmp     ebp, esp
.text:000048D0                 call    __RTC_CheckEsp
.text:000048D5                 mov     esp, ebp
.text:000048D7                 pop     ebp
.text:000048D8                 retn
.text:000048D8 ??1?$CRecordVector@I@@QAE@XZ endp
.text:000048D8
.text:000048D8 ; ---------------------------------------------------------------------------
.text:000048D9                 align 4
.text:000048D9 _text           ends
.text:000048D9
.text:000048DC ; ===========================================================================
.text:000048DC
.text:000048DC ; Segment type: Pure code
.text:000048DC ; Segment permissions: Read/Execute
.text:000048DC _text           segment para public 'CODE' use32
.text:000048DC                 assume cs:_text
.text:000048DC                 ;org 48DCh
.text:000048DC ; COMDAT (pick any)
.text:000048DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000048DC
.text:000048DC ; =============== S U B R O U T I N E =======================================
.text:000048DC
.text:000048DC ; Attributes: bp-based frame
.text:000048DC
.text:000048DC ; public: void __thiscall CRecordVector<unsigned int>::Clear(void)
.text:000048DC                 public ?Clear@?$CRecordVector@I@@QAEXXZ
.text:000048DC ?Clear@?$CRecordVector@I@@QAEXXZ proc near
.text:000048DC                                         ; CODE XREF: NCoderMixer2::CBindInfo::Clear(void)+27p
.text:000048DC                                         ; CRecordVector<uint>::ClearAndReserve(uint)+21p
.text:000048DC
.text:000048DC var_4           = dword ptr -4
.text:000048DC
.text:000048DC                 push    ebp
.text:000048DD                 mov     ebp, esp
.text:000048DF                 push    ecx
.text:000048E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000048E7                 mov     [ebp+var_4], ecx
.text:000048EA                 mov     eax, [ebp+var_4]
.text:000048ED                 mov     dword ptr [eax+4], 0
.text:000048F4                 mov     esp, ebp
.text:000048F6                 pop     ebp
.text:000048F7                 retn
.text:000048F7 ?Clear@?$CRecordVector@I@@QAEXXZ endp
.text:000048F7
.text:000048F7 _text           ends
.text:000048F7
.text:000048F8 ; ===========================================================================
.text:000048F8
.text:000048F8 ; Segment type: Pure code
.text:000048F8 ; Segment permissions: Read/Execute
.text:000048F8 _text           segment para public 'CODE' use32
.text:000048F8                 assume cs:_text
.text:000048F8                 ;org 48F8h
.text:000048F8 ; COMDAT (pick any)
.text:000048F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000048F8
.text:000048F8 ; =============== S U B R O U T I N E =======================================
.text:000048F8
.text:000048F8 ; Attributes: bp-based frame
.text:000048F8
.text:000048F8 ; public: class CRecordVector<unsigned int> & __thiscall CRecordVector<unsigned int>::operator=(class CRecordVector<unsigned int> const &)
.text:000048F8                 public ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z
.text:000048F8 ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z proc near
.text:000048F8                                         ; CODE XREF: NCoderMixer2::CBindInfo::operator=(NCoderMixer2::CBindInfo const &)+39p
.text:000048F8                                         ; NCoderMixer2::CBindInfo::operator=(NCoderMixer2::CBindInfo const &)+57p ...
.text:000048F8
.text:000048F8 var_10          = dword ptr -10h
.text:000048F8 var_C           = dword ptr -0Ch
.text:000048F8 var_8           = dword ptr -8
.text:000048F8 var_4           = dword ptr -4
.text:000048F8 arg_0           = dword ptr  8
.text:000048F8
.text:000048F8                 push    ebp
.text:000048F9                 mov     ebp, esp
.text:000048FB                 sub     esp, 10h
.text:000048FE                 mov     eax, 0CCCCCCCCh
.text:00004903                 mov     [ebp+var_10], eax
.text:00004906                 mov     [ebp+var_C], eax
.text:00004909                 mov     [ebp+var_8], eax
.text:0000490C                 mov     [ebp+var_4], eax
.text:0000490F                 mov     [ebp+var_4], ecx
.text:00004912                 mov     eax, [ebp+arg_0]
.text:00004915                 cmp     eax, [ebp+var_4]
.text:00004918                 jnz     short loc_4922
.text:0000491A                 mov     eax, [ebp+var_4]
.text:0000491D                 jmp     loc_49C6
.text:00004922 ; ---------------------------------------------------------------------------
.text:00004922
.text:00004922 loc_4922:                               ; CODE XREF: CRecordVector<uint>::operator=(CRecordVector<uint> const &)+20j
.text:00004922                 mov     ecx, [ebp+arg_0]
.text:00004925                 call    ?Size@?$CRecordVector@I@@QBEIXZ ; CRecordVector<uint>::Size(void)
.text:0000492A                 mov     [ebp+var_8], eax
.text:0000492D                 mov     ecx, [ebp+var_4]
.text:00004930                 mov     edx, [ebp+var_8]
.text:00004933                 cmp     edx, [ecx+8]
.text:00004936                 jbe     short loc_4999
.text:00004938                 mov     eax, [ebp+var_4]
.text:0000493B                 mov     ecx, [eax]
.text:0000493D                 mov     [ebp+var_C], ecx
.text:00004940                 mov     edx, [ebp+var_C]
.text:00004943                 push    edx             ; void *
.text:00004944                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004949                 add     esp, 4
.text:0000494C                 mov     eax, [ebp+var_4]
.text:0000494F                 mov     dword ptr [eax+8], 0
.text:00004956                 mov     ecx, [ebp+var_4]
.text:00004959                 mov     dword ptr [ecx+4], 0
.text:00004960                 mov     edx, [ebp+var_4]
.text:00004963                 mov     dword ptr [edx], 0
.text:00004969                 xor     ecx, ecx
.text:0000496B                 mov     eax, [ebp+var_8]
.text:0000496E                 mov     edx, 4
.text:00004973                 mul     edx
.text:00004975                 seto    cl
.text:00004978                 neg     ecx
.text:0000497A                 or      ecx, eax
.text:0000497C                 push    ecx             ; unsigned int
.text:0000497D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00004982                 add     esp, 4
.text:00004985                 mov     [ebp+var_10], eax
.text:00004988                 mov     eax, [ebp+var_4]
.text:0000498B                 mov     ecx, [ebp+var_10]
.text:0000498E                 mov     [eax], ecx
.text:00004990                 mov     edx, [ebp+var_4]
.text:00004993                 mov     eax, [ebp+var_8]
.text:00004996                 mov     [edx+8], eax
.text:00004999
.text:00004999 loc_4999:                               ; CODE XREF: CRecordVector<uint>::operator=(CRecordVector<uint> const &)+3Ej
.text:00004999                 mov     ecx, [ebp+var_4]
.text:0000499C                 mov     edx, [ebp+var_8]
.text:0000499F                 mov     [ecx+4], edx
.text:000049A2                 cmp     [ebp+var_8], 0
.text:000049A6                 jz      short loc_49C3
.text:000049A8                 mov     eax, [ebp+var_8]
.text:000049AB                 shl     eax, 2
.text:000049AE                 push    eax             ; Size
.text:000049AF                 mov     ecx, [ebp+arg_0]
.text:000049B2                 mov     edx, [ecx]
.text:000049B4                 push    edx             ; Src
.text:000049B5                 mov     eax, [ebp+var_4]
.text:000049B8                 mov     ecx, [eax]
.text:000049BA                 push    ecx             ; Dst
.text:000049BB                 call    _memcpy
.text:000049C0                 add     esp, 0Ch
.text:000049C3
.text:000049C3 loc_49C3:                               ; CODE XREF: CRecordVector<uint>::operator=(CRecordVector<uint> const &)+AEj
.text:000049C3                 mov     eax, [ebp+var_4]
.text:000049C6
.text:000049C6 loc_49C6:                               ; CODE XREF: CRecordVector<uint>::operator=(CRecordVector<uint> const &)+25j
.text:000049C6                 add     esp, 10h
.text:000049C9                 cmp     ebp, esp
.text:000049CB                 call    __RTC_CheckEsp
.text:000049D0                 mov     esp, ebp
.text:000049D2                 pop     ebp
.text:000049D3                 retn    4
.text:000049D3 ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z endp
.text:000049D3
.text:000049D3 ; ---------------------------------------------------------------------------
.text:000049D6                 align 4
.text:000049D6 _text           ends
.text:000049D6
.text:000049D8 ; ===========================================================================
.text:000049D8
.text:000049D8 ; Segment type: Pure code
.text:000049D8 ; Segment permissions: Read/Execute
.text:000049D8 _text           segment para public 'CODE' use32
.text:000049D8                 assume cs:_text
.text:000049D8                 ;org 49D8h
.text:000049D8 ; COMDAT (pick any)
.text:000049D8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000049D8
.text:000049D8 ; =============== S U B R O U T I N E =======================================
.text:000049D8
.text:000049D8 ; Attributes: bp-based frame
.text:000049D8
.text:000049D8 ; public: unsigned int const & __thiscall CRecordVector<unsigned int>::operator[](unsigned int)const
.text:000049D8                 public ??A?$CRecordVector@I@@QBEABII@Z
.text:000049D8 ??A?$CRecordVector@I@@QBEABII@Z proc near
.text:000049D8                                         ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+1B5p
.text:000049D8                                         ; NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+1C6p
.text:000049D8
.text:000049D8 var_4           = dword ptr -4
.text:000049D8 arg_0           = dword ptr  8
.text:000049D8
.text:000049D8                 push    ebp
.text:000049D9                 mov     ebp, esp
.text:000049DB                 push    ecx
.text:000049DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000049E3                 mov     [ebp+var_4], ecx
.text:000049E6                 mov     eax, [ebp+var_4]
.text:000049E9                 mov     ecx, [eax]
.text:000049EB                 mov     edx, [ebp+arg_0]
.text:000049EE                 lea     eax, [ecx+edx*4]
.text:000049F1                 mov     esp, ebp
.text:000049F3                 pop     ebp
.text:000049F4                 retn    4
.text:000049F4 ??A?$CRecordVector@I@@QBEABII@Z endp
.text:000049F4
.text:000049F4 ; ---------------------------------------------------------------------------
.text:000049F7                 align 4
.text:000049F7 _text           ends
.text:000049F7
.text:000049F8 ; ===========================================================================
.text:000049F8
.text:000049F8 ; Segment type: Pure code
.text:000049F8 ; Segment permissions: Read/Execute
.text:000049F8 _text           segment para public 'CODE' use32
.text:000049F8                 assume cs:_text
.text:000049F8                 ;org 49F8h
.text:000049F8 ; COMDAT (pick any)
.text:000049F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000049F8
.text:000049F8 ; =============== S U B R O U T I N E =======================================
.text:000049F8
.text:000049F8 ; Attributes: bp-based frame
.text:000049F8
.text:000049F8 ; public: unsigned int & __thiscall CRecordVector<unsigned int>::operator[](unsigned int)
.text:000049F8                 public ??A?$CRecordVector@I@@QAEAAII@Z
.text:000049F8 ??A?$CRecordVector@I@@QAEAAII@Z proc near
.text:000049F8                                         ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+17Cp
.text:000049F8
.text:000049F8 var_4           = dword ptr -4
.text:000049F8 arg_0           = dword ptr  8
.text:000049F8
.text:000049F8                 push    ebp
.text:000049F9                 mov     ebp, esp
.text:000049FB                 push    ecx
.text:000049FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A03                 mov     [ebp+var_4], ecx
.text:00004A06                 mov     eax, [ebp+var_4]
.text:00004A09                 mov     ecx, [eax]
.text:00004A0B                 mov     edx, [ebp+arg_0]
.text:00004A0E                 lea     eax, [ecx+edx*4]
.text:00004A11                 mov     esp, ebp
.text:00004A13                 pop     ebp
.text:00004A14                 retn    4
.text:00004A14 ??A?$CRecordVector@I@@QAEAAII@Z endp
.text:00004A14
.text:00004A14 ; ---------------------------------------------------------------------------
.text:00004A17                 align 4
.text:00004A17 _text           ends
.text:00004A17
.text:00004A18 ; ===========================================================================
.text:00004A18
.text:00004A18 ; Segment type: Pure code
.text:00004A18 ; Segment permissions: Read/Execute
.text:00004A18 _text           segment para public 'CODE' use32
.text:00004A18                 assume cs:_text
.text:00004A18                 ;org 4A18h
.text:00004A18 ; COMDAT (pick any)
.text:00004A18                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004A18
.text:00004A18 ; =============== S U B R O U T I N E =======================================
.text:00004A18
.text:00004A18 ; Attributes: bp-based frame
.text:00004A18
.text:00004A18 ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(unsigned int)
.text:00004A18                 public ??0?$CBuffer@E@@QAE@I@Z
.text:00004A18 ??0?$CBuffer@E@@QAE@I@Z proc near       ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+A80p
.text:00004A18
.text:00004A18 var_8           = dword ptr -8
.text:00004A18 var_4           = dword ptr -4
.text:00004A18 arg_0           = dword ptr  8
.text:00004A18
.text:00004A18                 push    ebp
.text:00004A19                 mov     ebp, esp
.text:00004A1B                 sub     esp, 8
.text:00004A1E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004A25                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A2C                 mov     [ebp+var_4], ecx
.text:00004A2F                 mov     eax, [ebp+var_4]
.text:00004A32                 mov     dword ptr [eax], 0
.text:00004A38                 mov     ecx, [ebp+var_4]
.text:00004A3B                 mov     dword ptr [ecx+4], 0
.text:00004A42                 mov     edx, [ebp+arg_0]
.text:00004A45                 push    edx             ; unsigned int
.text:00004A46                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00004A4B                 add     esp, 4
.text:00004A4E                 mov     [ebp+var_8], eax
.text:00004A51                 mov     eax, [ebp+var_4]
.text:00004A54                 mov     ecx, [ebp+var_8]
.text:00004A57                 mov     [eax], ecx
.text:00004A59                 mov     edx, [ebp+var_4]
.text:00004A5C                 mov     eax, [ebp+arg_0]
.text:00004A5F                 mov     [edx+4], eax
.text:00004A62                 mov     eax, [ebp+var_4]
.text:00004A65                 add     esp, 8
.text:00004A68                 cmp     ebp, esp
.text:00004A6A                 call    __RTC_CheckEsp
.text:00004A6F                 mov     esp, ebp
.text:00004A71                 pop     ebp
.text:00004A72                 retn    4
.text:00004A72 ??0?$CBuffer@E@@QAE@I@Z endp
.text:00004A72
.text:00004A72 ; ---------------------------------------------------------------------------
.text:00004A75                 align 4
.text:00004A75 _text           ends
.text:00004A75
.text:00004A78 ; ===========================================================================
.text:00004A78
.text:00004A78 ; Segment type: Pure code
.text:00004A78 ; Segment permissions: Read/Execute
.text:00004A78 _text           segment para public 'CODE' use32
.text:00004A78                 assume cs:_text
.text:00004A78                 ;org 4A78h
.text:00004A78 ; COMDAT (pick any)
.text:00004A78                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004A78
.text:00004A78 ; =============== S U B R O U T I N E =======================================
.text:00004A78
.text:00004A78 ; Attributes: bp-based frame
.text:00004A78
.text:00004A78 ; public: __thiscall CBuffer<unsigned char>::~CBuffer<unsigned char>(void)
.text:00004A78                 public ??1?$CBuffer@E@@QAE@XZ
.text:00004A78 ??1?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+B74p
.text:00004A78                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+BCAp ...
.text:00004A78
.text:00004A78 var_8           = dword ptr -8
.text:00004A78 var_4           = dword ptr -4
.text:00004A78
.text:00004A78                 push    ebp
.text:00004A79                 mov     ebp, esp
.text:00004A7B                 sub     esp, 8
.text:00004A7E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004A85                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A8C                 mov     [ebp+var_4], ecx
.text:00004A8F                 mov     eax, [ebp+var_4]
.text:00004A92                 mov     ecx, [eax]
.text:00004A94                 mov     [ebp+var_8], ecx
.text:00004A97                 mov     edx, [ebp+var_8]
.text:00004A9A                 push    edx             ; void *
.text:00004A9B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004AA0                 add     esp, 4
.text:00004AA3                 add     esp, 8
.text:00004AA6                 cmp     ebp, esp
.text:00004AA8                 call    __RTC_CheckEsp
.text:00004AAD                 mov     esp, ebp
.text:00004AAF                 pop     ebp
.text:00004AB0                 retn
.text:00004AB0 ??1?$CBuffer@E@@QAE@XZ endp
.text:00004AB0
.text:00004AB0 ; ---------------------------------------------------------------------------
.text:00004AB1                 align 4
.text:00004AB1 _text           ends
.text:00004AB1
.text:00004AB4 ; ===========================================================================
.text:00004AB4
.text:00004AB4 ; Segment type: Pure code
.text:00004AB4 ; Segment permissions: Read/Execute
.text:00004AB4 _text           segment para public 'CODE' use32
.text:00004AB4                 assume cs:_text
.text:00004AB4                 ;org 4AB4h
.text:00004AB4 ; COMDAT (pick any)
.text:00004AB4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004AB4
.text:00004AB4 ; =============== S U B R O U T I N E =======================================
.text:00004AB4
.text:00004AB4 ; Attributes: bp-based frame
.text:00004AB4
.text:00004AB4 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char *(void)
.text:00004AB4                 public ??B?$CBuffer@E@@QAEPAEXZ
.text:00004AB4 ??B?$CBuffer@E@@QAEPAEXZ proc near      ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+AD4p
.text:00004AB4                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+AF8p ...
.text:00004AB4
.text:00004AB4 var_4           = dword ptr -4
.text:00004AB4
.text:00004AB4                 push    ebp
.text:00004AB5                 mov     ebp, esp
.text:00004AB7                 push    ecx
.text:00004AB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004ABF                 mov     [ebp+var_4], ecx
.text:00004AC2                 mov     eax, [ebp+var_4]
.text:00004AC5                 mov     eax, [eax]
.text:00004AC7                 mov     esp, ebp
.text:00004AC9                 pop     ebp
.text:00004ACA                 retn
.text:00004ACA ??B?$CBuffer@E@@QAEPAEXZ endp
.text:00004ACA
.text:00004ACA ; ---------------------------------------------------------------------------
.text:00004ACB                 align 4
.text:00004ACB _text           ends
.text:00004ACB
.text:00004ACC ; ===========================================================================
.text:00004ACC
.text:00004ACC ; Segment type: Pure code
.text:00004ACC ; Segment permissions: Read/Execute
.text:00004ACC _text           segment para public 'CODE' use32
.text:00004ACC                 assume cs:_text
.text:00004ACC                 ;org 4ACCh
.text:00004ACC ; COMDAT (pick any)
.text:00004ACC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004ACC
.text:00004ACC ; =============== S U B R O U T I N E =======================================
.text:00004ACC
.text:00004ACC ; Attributes: bp-based frame
.text:00004ACC
.text:00004ACC ; public: __thiscall CBuffer<unsigned char>::operator unsigned char const *(void)const
.text:00004ACC                 public ??B?$CBuffer@E@@QBEPBEXZ
.text:00004ACC ??B?$CBuffer@E@@QBEPBEXZ proc near      ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+763p
.text:00004ACC
.text:00004ACC var_4           = dword ptr -4
.text:00004ACC
.text:00004ACC                 push    ebp
.text:00004ACD                 mov     ebp, esp
.text:00004ACF                 push    ecx
.text:00004AD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004AD7                 mov     [ebp+var_4], ecx
.text:00004ADA                 mov     eax, [ebp+var_4]
.text:00004ADD                 mov     eax, [eax]
.text:00004ADF                 mov     esp, ebp
.text:00004AE1                 pop     ebp
.text:00004AE2                 retn
.text:00004AE2 ??B?$CBuffer@E@@QBEPBEXZ endp
.text:00004AE2
.text:00004AE2 ; ---------------------------------------------------------------------------
.text:00004AE3                 align 4
.text:00004AE3 _text           ends
.text:00004AE3
.text:00004AE4 ; ===========================================================================
.text:00004AE4
.text:00004AE4 ; Segment type: Pure code
.text:00004AE4 ; Segment permissions: Read/Execute
.text:00004AE4 _text           segment para public 'CODE' use32
.text:00004AE4                 assume cs:_text
.text:00004AE4                 ;org 4AE4h
.text:00004AE4 ; COMDAT (pick any)
.text:00004AE4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004AE4
.text:00004AE4 ; =============== S U B R O U T I N E =======================================
.text:00004AE4
.text:00004AE4 ; Attributes: bp-based frame
.text:00004AE4
.text:00004AE4 ; public: unsigned int __thiscall CBuffer<unsigned char>::Size(void)const
.text:00004AE4                 public ?Size@?$CBuffer@E@@QBEIXZ
.text:00004AE4 ?Size@?$CBuffer@E@@QBEIXZ proc near     ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+6EDp
.text:00004AE4                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+B20p
.text:00004AE4
.text:00004AE4 var_4           = dword ptr -4
.text:00004AE4
.text:00004AE4                 push    ebp
.text:00004AE5                 mov     ebp, esp
.text:00004AE7                 push    ecx
.text:00004AE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004AEF                 mov     [ebp+var_4], ecx
.text:00004AF2                 mov     eax, [ebp+var_4]
.text:00004AF5                 mov     eax, [eax+4]
.text:00004AF8                 mov     esp, ebp
.text:00004AFA                 pop     ebp
.text:00004AFB                 retn
.text:00004AFB ?Size@?$CBuffer@E@@QBEIXZ endp
.text:00004AFB
.text:00004AFB _text           ends
.text:00004AFB
.text:00004AFC ; ===========================================================================
.text:00004AFC
.text:00004AFC ; Segment type: Pure code
.text:00004AFC ; Segment permissions: Read/Execute
.text:00004AFC _text           segment para public 'CODE' use32
.text:00004AFC                 assume cs:_text
.text:00004AFC                 ;org 4AFCh
.text:00004AFC ; COMDAT (pick any)
.text:00004AFC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004AFC
.text:00004AFC ; =============== S U B R O U T I N E =======================================
.text:00004AFC
.text:00004AFC ; Attributes: bp-based frame
.text:00004AFC
.text:00004AFC ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::CMyComPtr<struct ICompressProgressInfo>(void)
.text:00004AFC                 public ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
.text:00004AFC ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
.text:00004AFC                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+145Ep
.text:00004AFC
.text:00004AFC var_4           = dword ptr -4
.text:00004AFC
.text:00004AFC                 push    ebp
.text:00004AFD                 mov     ebp, esp
.text:00004AFF                 push    ecx
.text:00004B00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B07                 mov     [ebp+var_4], ecx
.text:00004B0A                 mov     eax, [ebp+var_4]
.text:00004B0D                 mov     dword ptr [eax], 0
.text:00004B13                 mov     eax, [ebp+var_4]
.text:00004B16                 mov     esp, ebp
.text:00004B18                 pop     ebp
.text:00004B19                 retn
.text:00004B19 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ endp
.text:00004B19
.text:00004B19 ; ---------------------------------------------------------------------------
.text:00004B1A                 align 4
.text:00004B1A _text           ends
.text:00004B1A
.text:00004B1C ; ===========================================================================
.text:00004B1C
.text:00004B1C ; Segment type: Pure code
.text:00004B1C ; Segment permissions: Read/Execute
.text:00004B1C _text           segment para public 'CODE' use32
.text:00004B1C                 assume cs:_text
.text:00004B1C                 ;org 4B1Ch
.text:00004B1C ; COMDAT (pick any)
.text:00004B1C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004B1C
.text:00004B1C ; =============== S U B R O U T I N E =======================================
.text:00004B1C
.text:00004B1C ; Attributes: bp-based frame
.text:00004B1C
.text:00004B1C ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::CMyComPtr<struct ICompressProgressInfo>(struct ICompressProgressInfo *)
.text:00004B1C                 public ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
.text:00004B1C ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z proc near
.text:00004B1C                                         ; CODE XREF: NArchive::N7z::CDecProgress::CDecProgress(ICompressProgressInfo *)+34p
.text:00004B1C
.text:00004B1C var_4           = dword ptr -4
.text:00004B1C arg_0           = dword ptr  8
.text:00004B1C
.text:00004B1C                 push    ebp
.text:00004B1D                 mov     ebp, esp
.text:00004B1F                 push    ecx
.text:00004B20                 push    esi
.text:00004B21                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B28                 mov     [ebp+var_4], ecx
.text:00004B2B                 mov     eax, [ebp+var_4]
.text:00004B2E                 mov     ecx, [ebp+arg_0]
.text:00004B31                 mov     [eax], ecx
.text:00004B33                 cmp     [ebp+arg_0], 0
.text:00004B37                 jz      short loc_4B50
.text:00004B39                 mov     edx, [ebp+arg_0]
.text:00004B3C                 mov     eax, [edx]
.text:00004B3E                 mov     esi, esp
.text:00004B40                 mov     ecx, [ebp+arg_0]
.text:00004B43                 push    ecx
.text:00004B44                 mov     edx, [eax+4]
.text:00004B47                 call    edx
.text:00004B49                 cmp     esi, esp
.text:00004B4B                 call    __RTC_CheckEsp
.text:00004B50
.text:00004B50 loc_4B50:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)+1Bj
.text:00004B50                 mov     eax, [ebp+var_4]
.text:00004B53                 pop     esi
.text:00004B54                 add     esp, 4
.text:00004B57                 cmp     ebp, esp
.text:00004B59                 call    __RTC_CheckEsp
.text:00004B5E                 mov     esp, ebp
.text:00004B60                 pop     ebp
.text:00004B61                 retn    4
.text:00004B61 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z endp
.text:00004B61
.text:00004B61 _text           ends
.text:00004B61
.text:00004B64 ; ===========================================================================
.text:00004B64
.text:00004B64 ; Segment type: Pure code
.text:00004B64 ; Segment permissions: Read/Execute
.text:00004B64 _text           segment para public 'CODE' use32
.text:00004B64                 assume cs:_text
.text:00004B64                 ;org 4B64h
.text:00004B64 ; COMDAT (pick any)
.text:00004B64                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004B64
.text:00004B64 ; =============== S U B R O U T I N E =======================================
.text:00004B64
.text:00004B64 ; Attributes: bp-based frame
.text:00004B64
.text:00004B64 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::~CMyComPtr<struct ICompressProgressInfo>(void)
.text:00004B64                 public ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
.text:00004B64 ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
.text:00004B64                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1563p
.text:00004B64                                         ; __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$21+6j ...
.text:00004B64
.text:00004B64 var_4           = dword ptr -4
.text:00004B64
.text:00004B64                 push    ebp
.text:00004B65                 mov     ebp, esp
.text:00004B67                 push    ecx
.text:00004B68                 push    esi
.text:00004B69                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B70                 mov     [ebp+var_4], ecx
.text:00004B73                 mov     eax, [ebp+var_4]
.text:00004B76                 cmp     dword ptr [eax], 0
.text:00004B79                 jz      short loc_4B96
.text:00004B7B                 mov     ecx, [ebp+var_4]
.text:00004B7E                 mov     edx, [ecx]
.text:00004B80                 mov     eax, [ebp+var_4]
.text:00004B83                 mov     ecx, [eax]
.text:00004B85                 mov     edx, [edx]
.text:00004B87                 mov     esi, esp
.text:00004B89                 push    ecx
.text:00004B8A                 mov     eax, [edx+8]
.text:00004B8D                 call    eax
.text:00004B8F                 cmp     esi, esp
.text:00004B91                 call    __RTC_CheckEsp
.text:00004B96
.text:00004B96 loc_4B96:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)+15j
.text:00004B96                 pop     esi
.text:00004B97                 add     esp, 4
.text:00004B9A                 cmp     ebp, esp
.text:00004B9C                 call    __RTC_CheckEsp
.text:00004BA1                 mov     esp, ebp
.text:00004BA3                 pop     ebp
.text:00004BA4                 retn
.text:00004BA4 ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ endp
.text:00004BA4
.text:00004BA4 ; ---------------------------------------------------------------------------
.text:00004BA5                 align 4
.text:00004BA5 _text           ends
.text:00004BA5
.text:00004BA8 ; ===========================================================================
.text:00004BA8
.text:00004BA8 ; Segment type: Pure code
.text:00004BA8 ; Segment permissions: Read/Execute
.text:00004BA8 _text           segment para public 'CODE' use32
.text:00004BA8                 assume cs:_text
.text:00004BA8                 ;org 4BA8h
.text:00004BA8 ; COMDAT (pick any)
.text:00004BA8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004BA8
.text:00004BA8 ; =============== S U B R O U T I N E =======================================
.text:00004BA8
.text:00004BA8 ; Attributes: bp-based frame
.text:00004BA8
.text:00004BA8 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::operator struct ICompressProgressInfo *(void)const
.text:00004BA8                 public ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
.text:00004BA8 ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
.text:00004BA8                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+14F8p
.text:00004BA8                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1507p
.text:00004BA8
.text:00004BA8 var_4           = dword ptr -4
.text:00004BA8
.text:00004BA8                 push    ebp
.text:00004BA9                 mov     ebp, esp
.text:00004BAB                 push    ecx
.text:00004BAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004BB3                 mov     [ebp+var_4], ecx
.text:00004BB6                 mov     eax, [ebp+var_4]
.text:00004BB9                 mov     eax, [eax]
.text:00004BBB                 mov     esp, ebp
.text:00004BBD                 pop     ebp
.text:00004BBE                 retn
.text:00004BBE ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ endp
.text:00004BBE
.text:00004BBE ; ---------------------------------------------------------------------------
.text:00004BBF                 align 10h
.text:00004BBF _text           ends
.text:00004BBF
.text:00004BC0 ; ===========================================================================
.text:00004BC0
.text:00004BC0 ; Segment type: Pure code
.text:00004BC0 ; Segment permissions: Read/Execute
.text:00004BC0 _text           segment para public 'CODE' use32
.text:00004BC0                 assume cs:_text
.text:00004BC0                 ;org 4BC0h
.text:00004BC0 ; COMDAT (pick any)
.text:00004BC0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004BC0
.text:00004BC0 ; =============== S U B R O U T I N E =======================================
.text:00004BC0
.text:00004BC0 ; Attributes: bp-based frame
.text:00004BC0
.text:00004BC0 ; public: struct ICompressProgressInfo * __thiscall CMyComPtr<struct ICompressProgressInfo>::operator->(void)const
.text:00004BC0                 public ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
.text:00004BC0 ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
.text:00004BC0                                         ; CODE XREF: NArchive::N7z::CDecProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+12p
.text:00004BC0
.text:00004BC0 var_4           = dword ptr -4
.text:00004BC0
.text:00004BC0                 push    ebp
.text:00004BC1                 mov     ebp, esp
.text:00004BC3                 push    ecx
.text:00004BC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004BCB                 mov     [ebp+var_4], ecx
.text:00004BCE                 mov     eax, [ebp+var_4]
.text:00004BD1                 mov     eax, [eax]
.text:00004BD3                 mov     esp, ebp
.text:00004BD5                 pop     ebp
.text:00004BD6                 retn
.text:00004BD6 ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ endp
.text:00004BD6
.text:00004BD6 ; ---------------------------------------------------------------------------
.text:00004BD7                 align 4
.text:00004BD7 _text           ends
.text:00004BD7
.text:00004BD8 ; ===========================================================================
.text:00004BD8
.text:00004BD8 ; Segment type: Pure code
.text:00004BD8 ; Segment permissions: Read/Execute
.text:00004BD8 _text           segment para public 'CODE' use32
.text:00004BD8                 assume cs:_text
.text:00004BD8                 ;org 4BD8h
.text:00004BD8 ; COMDAT (pick any)
.text:00004BD8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004BD8
.text:00004BD8 ; =============== S U B R O U T I N E =======================================
.text:00004BD8
.text:00004BD8 ; Attributes: bp-based frame
.text:00004BD8
.text:00004BD8 ; public: struct ICompressProgressInfo * __thiscall CMyComPtr<struct ICompressProgressInfo>::operator=(struct ICompressProgressInfo *)
.text:00004BD8                 public ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z
.text:00004BD8 ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z proc near
.text:00004BD8                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+14E4p
.text:00004BD8
.text:00004BD8 var_4           = dword ptr -4
.text:00004BD8 arg_0           = dword ptr  8
.text:00004BD8
.text:00004BD8                 push    ebp
.text:00004BD9                 mov     ebp, esp
.text:00004BDB                 push    ecx
.text:00004BDC                 push    esi
.text:00004BDD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004BE4                 mov     [ebp+var_4], ecx
.text:00004BE7                 cmp     [ebp+arg_0], 0
.text:00004BEB                 jz      short loc_4C04
.text:00004BED                 mov     eax, [ebp+arg_0]
.text:00004BF0                 mov     ecx, [eax]
.text:00004BF2                 mov     esi, esp
.text:00004BF4                 mov     edx, [ebp+arg_0]
.text:00004BF7                 push    edx
.text:00004BF8                 mov     eax, [ecx+4]
.text:00004BFB                 call    eax
.text:00004BFD                 cmp     esi, esp
.text:00004BFF                 call    __RTC_CheckEsp
.text:00004C04
.text:00004C04 loc_4C04:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::operator=(ICompressProgressInfo *)+13j
.text:00004C04                 mov     ecx, [ebp+var_4]
.text:00004C07                 cmp     dword ptr [ecx], 0
.text:00004C0A                 jz      short loc_4C27
.text:00004C0C                 mov     edx, [ebp+var_4]
.text:00004C0F                 mov     eax, [edx]
.text:00004C11                 mov     ecx, [ebp+var_4]
.text:00004C14                 mov     edx, [ecx]
.text:00004C16                 mov     eax, [eax]
.text:00004C18                 mov     esi, esp
.text:00004C1A                 push    edx
.text:00004C1B                 mov     ecx, [eax+8]
.text:00004C1E                 call    ecx
.text:00004C20                 cmp     esi, esp
.text:00004C22                 call    __RTC_CheckEsp
.text:00004C27
.text:00004C27 loc_4C27:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::operator=(ICompressProgressInfo *)+32j
.text:00004C27                 mov     edx, [ebp+var_4]
.text:00004C2A                 mov     eax, [ebp+arg_0]
.text:00004C2D                 mov     [edx], eax
.text:00004C2F                 mov     eax, [ebp+arg_0]
.text:00004C32                 pop     esi
.text:00004C33                 add     esp, 4
.text:00004C36                 cmp     ebp, esp
.text:00004C38                 call    __RTC_CheckEsp
.text:00004C3D                 mov     esp, ebp
.text:00004C3F                 pop     ebp
.text:00004C40                 retn    4
.text:00004C40 ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z endp
.text:00004C40
.text:00004C40 ; ---------------------------------------------------------------------------
.text:00004C43                 align 4
.text:00004C43 _text           ends
.text:00004C43
.text:00004C44 ; ===========================================================================
.text:00004C44
.text:00004C44 ; Segment type: Pure code
.text:00004C44 ; Segment permissions: Read/Execute
.text:00004C44 _text           segment para public 'CODE' use32
.text:00004C44                 assume cs:_text
.text:00004C44                 ;org 4C44h
.text:00004C44 ; COMDAT (pick any)
.text:00004C44                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004C44
.text:00004C44 ; =============== S U B R O U T I N E =======================================
.text:00004C44
.text:00004C44 ; Attributes: bp-based frame
.text:00004C44
.text:00004C44 ; public: __thiscall CMyComPtr<struct IUnknown>::CMyComPtr<struct IUnknown>(void)
.text:00004C44                 public ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ
.text:00004C44 ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ proc near
.text:00004C44                                         ; CODE XREF: NArchive::N7z::CDecoder::CDecoder(bool)+54p
.text:00004C44                                         ; NArchive::N7z::CLockedSequentialInStreamMT::CLockedSequentialInStreamMT(void)+30p ...
.text:00004C44
.text:00004C44 var_4           = dword ptr -4
.text:00004C44
.text:00004C44                 push    ebp
.text:00004C45                 mov     ebp, esp
.text:00004C47                 push    ecx
.text:00004C48                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C4F                 mov     [ebp+var_4], ecx
.text:00004C52                 mov     eax, [ebp+var_4]
.text:00004C55                 mov     dword ptr [eax], 0
.text:00004C5B                 mov     eax, [ebp+var_4]
.text:00004C5E                 mov     esp, ebp
.text:00004C60                 pop     ebp
.text:00004C61                 retn
.text:00004C61 ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ endp
.text:00004C61
.text:00004C61 ; ---------------------------------------------------------------------------
.text:00004C62                 align 4
.text:00004C62 _text           ends
.text:00004C62
.text:00004C64 ; ===========================================================================
.text:00004C64
.text:00004C64 ; Segment type: Pure code
.text:00004C64 ; Segment permissions: Read/Execute
.text:00004C64 _text           segment para public 'CODE' use32
.text:00004C64                 assume cs:_text
.text:00004C64                 ;org 4C64h
.text:00004C64 ; COMDAT (pick any)
.text:00004C64                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004C64
.text:00004C64 ; =============== S U B R O U T I N E =======================================
.text:00004C64
.text:00004C64 ; Attributes: bp-based frame
.text:00004C64
.text:00004C64 ; public: __thiscall CMyComPtr<struct IUnknown>::CMyComPtr<struct IUnknown>(struct IUnknown *)
.text:00004C64                 public ??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z
.text:00004C64 ??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z proc near
.text:00004C64                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+FCCp
.text:00004C64
.text:00004C64 var_4           = dword ptr -4
.text:00004C64 arg_0           = dword ptr  8
.text:00004C64
.text:00004C64                 push    ebp
.text:00004C65                 mov     ebp, esp
.text:00004C67                 push    ecx
.text:00004C68                 push    esi
.text:00004C69                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C70                 mov     [ebp+var_4], ecx
.text:00004C73                 mov     eax, [ebp+var_4]
.text:00004C76                 mov     ecx, [ebp+arg_0]
.text:00004C79                 mov     [eax], ecx
.text:00004C7B                 cmp     [ebp+arg_0], 0
.text:00004C7F                 jz      short loc_4C98
.text:00004C81                 mov     edx, [ebp+arg_0]
.text:00004C84                 mov     eax, [edx]
.text:00004C86                 mov     esi, esp
.text:00004C88                 mov     ecx, [ebp+arg_0]
.text:00004C8B                 push    ecx
.text:00004C8C                 mov     edx, [eax+4]
.text:00004C8F                 call    edx
.text:00004C91                 cmp     esi, esp
.text:00004C93                 call    __RTC_CheckEsp
.text:00004C98
.text:00004C98 loc_4C98:                               ; CODE XREF: CMyComPtr<IUnknown>::CMyComPtr<IUnknown>(IUnknown *)+1Bj
.text:00004C98                 mov     eax, [ebp+var_4]
.text:00004C9B                 pop     esi
.text:00004C9C                 add     esp, 4
.text:00004C9F                 cmp     ebp, esp
.text:00004CA1                 call    __RTC_CheckEsp
.text:00004CA6                 mov     esp, ebp
.text:00004CA8                 pop     ebp
.text:00004CA9                 retn    4
.text:00004CA9 ??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z endp
.text:00004CA9
.text:00004CA9 _text           ends
.text:00004CA9
.text:00004CAC ; ===========================================================================
.text:00004CAC
.text:00004CAC ; Segment type: Pure code
.text:00004CAC ; Segment permissions: Read/Execute
.text:00004CAC _text           segment para public 'CODE' use32
.text:00004CAC                 assume cs:_text
.text:00004CAC                 ;org 4CACh
.text:00004CAC ; COMDAT (pick any)
.text:00004CAC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004CAC
.text:00004CAC ; =============== S U B R O U T I N E =======================================
.text:00004CAC
.text:00004CAC ; Attributes: bp-based frame
.text:00004CAC
.text:00004CAC ; public: __thiscall CMyComPtr<struct IUnknown>::~CMyComPtr<struct IUnknown>(void)
.text:00004CAC                 public ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
.text:00004CAC ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ proc near
.text:00004CAC                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1045p
.text:00004CAC                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1185p ...
.text:00004CAC
.text:00004CAC var_4           = dword ptr -4
.text:00004CAC
.text:00004CAC                 push    ebp
.text:00004CAD                 mov     ebp, esp
.text:00004CAF                 push    ecx
.text:00004CB0                 push    esi
.text:00004CB1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CB8                 mov     [ebp+var_4], ecx
.text:00004CBB                 mov     eax, [ebp+var_4]
.text:00004CBE                 cmp     dword ptr [eax], 0
.text:00004CC1                 jz      short loc_4CDE
.text:00004CC3                 mov     ecx, [ebp+var_4]
.text:00004CC6                 mov     edx, [ecx]
.text:00004CC8                 mov     eax, [ebp+var_4]
.text:00004CCB                 mov     ecx, [eax]
.text:00004CCD                 mov     edx, [edx]
.text:00004CCF                 mov     esi, esp
.text:00004CD1                 push    ecx
.text:00004CD2                 mov     eax, [edx+8]
.text:00004CD5                 call    eax
.text:00004CD7                 cmp     esi, esp
.text:00004CD9                 call    __RTC_CheckEsp
.text:00004CDE
.text:00004CDE loc_4CDE:                               ; CODE XREF: CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)+15j
.text:00004CDE                 pop     esi
.text:00004CDF                 add     esp, 4
.text:00004CE2                 cmp     ebp, esp
.text:00004CE4                 call    __RTC_CheckEsp
.text:00004CE9                 mov     esp, ebp
.text:00004CEB                 pop     ebp
.text:00004CEC                 retn
.text:00004CEC ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ endp
.text:00004CEC
.text:00004CEC ; ---------------------------------------------------------------------------
.text:00004CED                 align 10h
.text:00004CED _text           ends
.text:00004CED
.text:00004CF0 ; ===========================================================================
.text:00004CF0
.text:00004CF0 ; Segment type: Pure code
.text:00004CF0 ; Segment permissions: Read/Execute
.text:00004CF0 _text           segment para public 'CODE' use32
.text:00004CF0                 assume cs:_text
.text:00004CF0                 ;org 4CF0h
.text:00004CF0 ; COMDAT (pick any)
.text:00004CF0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004CF0
.text:00004CF0 ; =============== S U B R O U T I N E =======================================
.text:00004CF0
.text:00004CF0 ; Attributes: bp-based frame
.text:00004CF0
.text:00004CF0 ; public: void __thiscall CMyComPtr<struct IUnknown>::Release(void)
.text:00004CF0                 public ?Release@?$CMyComPtr@UIUnknown@@@@QAEXXZ
.text:00004CF0 ?Release@?$CMyComPtr@UIUnknown@@@@QAEXXZ proc near
.text:00004CF0                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+21Ep
.text:00004CF0
.text:00004CF0 var_4           = dword ptr -4
.text:00004CF0
.text:00004CF0                 push    ebp
.text:00004CF1                 mov     ebp, esp
.text:00004CF3                 push    ecx
.text:00004CF4                 push    esi
.text:00004CF5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CFC                 mov     [ebp+var_4], ecx
.text:00004CFF                 mov     eax, [ebp+var_4]
.text:00004D02                 cmp     dword ptr [eax], 0
.text:00004D05                 jz      short loc_4D2B
.text:00004D07                 mov     ecx, [ebp+var_4]
.text:00004D0A                 mov     edx, [ecx]
.text:00004D0C                 mov     eax, [ebp+var_4]
.text:00004D0F                 mov     ecx, [eax]
.text:00004D11                 mov     edx, [edx]
.text:00004D13                 mov     esi, esp
.text:00004D15                 push    ecx
.text:00004D16                 mov     eax, [edx+8]
.text:00004D19                 call    eax
.text:00004D1B                 cmp     esi, esp
.text:00004D1D                 call    __RTC_CheckEsp
.text:00004D22                 mov     ecx, [ebp+var_4]
.text:00004D25                 mov     dword ptr [ecx], 0
.text:00004D2B
.text:00004D2B loc_4D2B:                               ; CODE XREF: CMyComPtr<IUnknown>::Release(void)+15j
.text:00004D2B                 pop     esi
.text:00004D2C                 add     esp, 4
.text:00004D2F                 cmp     ebp, esp
.text:00004D31                 call    __RTC_CheckEsp
.text:00004D36                 mov     esp, ebp
.text:00004D38                 pop     ebp
.text:00004D39                 retn
.text:00004D39 ?Release@?$CMyComPtr@UIUnknown@@@@QAEXXZ endp
.text:00004D39
.text:00004D39 ; ---------------------------------------------------------------------------
.text:00004D3A                 align 4
.text:00004D3A _text           ends
.text:00004D3A
.text:00004D3C ; ===========================================================================
.text:00004D3C
.text:00004D3C ; Segment type: Pure code
.text:00004D3C ; Segment permissions: Read/Execute
.text:00004D3C _text           segment para public 'CODE' use32
.text:00004D3C                 assume cs:_text
.text:00004D3C                 ;org 4D3Ch
.text:00004D3C ; COMDAT (pick any)
.text:00004D3C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004D3C
.text:00004D3C ; =============== S U B R O U T I N E =======================================
.text:00004D3C
.text:00004D3C ; Attributes: bp-based frame
.text:00004D3C
.text:00004D3C ; public: struct IUnknown * __thiscall CMyComPtr<struct IUnknown>::operator=(struct IUnknown *)
.text:00004D3C                 public ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z
.text:00004D3C ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z proc near
.text:00004D3C                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+29Ap
.text:00004D3C                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+348p ...
.text:00004D3C
.text:00004D3C var_4           = dword ptr -4
.text:00004D3C arg_0           = dword ptr  8
.text:00004D3C
.text:00004D3C                 push    ebp
.text:00004D3D                 mov     ebp, esp
.text:00004D3F                 push    ecx
.text:00004D40                 push    esi
.text:00004D41                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D48                 mov     [ebp+var_4], ecx
.text:00004D4B                 cmp     [ebp+arg_0], 0
.text:00004D4F                 jz      short loc_4D68
.text:00004D51                 mov     eax, [ebp+arg_0]
.text:00004D54                 mov     ecx, [eax]
.text:00004D56                 mov     esi, esp
.text:00004D58                 mov     edx, [ebp+arg_0]
.text:00004D5B                 push    edx
.text:00004D5C                 mov     eax, [ecx+4]
.text:00004D5F                 call    eax
.text:00004D61                 cmp     esi, esp
.text:00004D63                 call    __RTC_CheckEsp
.text:00004D68
.text:00004D68 loc_4D68:                               ; CODE XREF: CMyComPtr<IUnknown>::operator=(IUnknown *)+13j
.text:00004D68                 mov     ecx, [ebp+var_4]
.text:00004D6B                 cmp     dword ptr [ecx], 0
.text:00004D6E                 jz      short loc_4D8B
.text:00004D70                 mov     edx, [ebp+var_4]
.text:00004D73                 mov     eax, [edx]
.text:00004D75                 mov     ecx, [ebp+var_4]
.text:00004D78                 mov     edx, [ecx]
.text:00004D7A                 mov     eax, [eax]
.text:00004D7C                 mov     esi, esp
.text:00004D7E                 push    edx
.text:00004D7F                 mov     ecx, [eax+8]
.text:00004D82                 call    ecx
.text:00004D84                 cmp     esi, esp
.text:00004D86                 call    __RTC_CheckEsp
.text:00004D8B
.text:00004D8B loc_4D8B:                               ; CODE XREF: CMyComPtr<IUnknown>::operator=(IUnknown *)+32j
.text:00004D8B                 mov     edx, [ebp+var_4]
.text:00004D8E                 mov     eax, [ebp+arg_0]
.text:00004D91                 mov     [edx], eax
.text:00004D93                 mov     eax, [ebp+arg_0]
.text:00004D96                 pop     esi
.text:00004D97                 add     esp, 4
.text:00004D9A                 cmp     ebp, esp
.text:00004D9C                 call    __RTC_CheckEsp
.text:00004DA1                 mov     esp, ebp
.text:00004DA3                 pop     ebp
.text:00004DA4                 retn    4
.text:00004DA4 ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z endp
.text:00004DA4
.text:00004DA4 ; ---------------------------------------------------------------------------
.text:00004DA7                 align 4
.text:00004DA7 _text           ends
.text:00004DA7
.text:00004DA8 ; ===========================================================================
.text:00004DA8
.text:00004DA8 ; Segment type: Pure code
.text:00004DA8 ; Segment permissions: Read/Execute
.text:00004DA8 _text           segment para public 'CODE' use32
.text:00004DA8                 assume cs:_text
.text:00004DA8                 ;org 4DA8h
.text:00004DA8 ; COMDAT (pick any)
.text:00004DA8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004DA8
.text:00004DA8 ; =============== S U B R O U T I N E =======================================
.text:00004DA8
.text:00004DA8 ; Attributes: bp-based frame
.text:00004DA8
.text:00004DA8 ; public: __thiscall CMyComPtr<struct ICompressCoder>::CMyComPtr<struct ICompressCoder>(void)
.text:00004DA8                 public ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:00004DA8 ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:00004DA8                                         ; CODE XREF: CCreatedCoder::CCreatedCoder(void)+30p
.text:00004DA8
.text:00004DA8 var_4           = dword ptr -4
.text:00004DA8
.text:00004DA8                 push    ebp
.text:00004DA9                 mov     ebp, esp
.text:00004DAB                 push    ecx
.text:00004DAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004DB3                 mov     [ebp+var_4], ecx
.text:00004DB6                 mov     eax, [ebp+var_4]
.text:00004DB9                 mov     dword ptr [eax], 0
.text:00004DBF                 mov     eax, [ebp+var_4]
.text:00004DC2                 mov     esp, ebp
.text:00004DC4                 pop     ebp
.text:00004DC5                 retn
.text:00004DC5 ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:00004DC5
.text:00004DC5 ; ---------------------------------------------------------------------------
.text:00004DC6                 align 4
.text:00004DC6 _text           ends
.text:00004DC6
.text:00004DC8 ; ===========================================================================
.text:00004DC8
.text:00004DC8 ; Segment type: Pure code
.text:00004DC8 ; Segment permissions: Read/Execute
.text:00004DC8 _text           segment para public 'CODE' use32
.text:00004DC8                 assume cs:_text
.text:00004DC8                 ;org 4DC8h
.text:00004DC8 ; COMDAT (pick any)
.text:00004DC8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004DC8
.text:00004DC8 ; =============== S U B R O U T I N E =======================================
.text:00004DC8
.text:00004DC8 ; Attributes: bp-based frame
.text:00004DC8
.text:00004DC8 ; public: __thiscall CMyComPtr<struct ICompressCoder>::~CMyComPtr<struct ICompressCoder>(void)
.text:00004DC8                 public ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:00004DC8 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:00004DC8                                         ; CODE XREF: __unwindfunclet$??0CCreatedCoder@@QAE@XZ$0+3j
.text:00004DC8                                         ; CCreatedCoder::~CCreatedCoder(void)+49p ...
.text:00004DC8
.text:00004DC8 var_4           = dword ptr -4
.text:00004DC8
.text:00004DC8                 push    ebp
.text:00004DC9                 mov     ebp, esp
.text:00004DCB                 push    ecx
.text:00004DCC                 push    esi
.text:00004DCD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004DD4                 mov     [ebp+var_4], ecx
.text:00004DD7                 mov     eax, [ebp+var_4]
.text:00004DDA                 cmp     dword ptr [eax], 0
.text:00004DDD                 jz      short loc_4DFA
.text:00004DDF                 mov     ecx, [ebp+var_4]
.text:00004DE2                 mov     edx, [ecx]
.text:00004DE4                 mov     eax, [ebp+var_4]
.text:00004DE7                 mov     ecx, [eax]
.text:00004DE9                 mov     edx, [edx]
.text:00004DEB                 mov     esi, esp
.text:00004DED                 push    ecx
.text:00004DEE                 mov     eax, [edx+8]
.text:00004DF1                 call    eax
.text:00004DF3                 cmp     esi, esp
.text:00004DF5                 call    __RTC_CheckEsp
.text:00004DFA
.text:00004DFA loc_4DFA:                               ; CODE XREF: CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)+15j
.text:00004DFA                 pop     esi
.text:00004DFB                 add     esp, 4
.text:00004DFE                 cmp     ebp, esp
.text:00004E00                 call    __RTC_CheckEsp
.text:00004E05                 mov     esp, ebp
.text:00004E07                 pop     ebp
.text:00004E08                 retn
.text:00004E08 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:00004E08
.text:00004E08 ; ---------------------------------------------------------------------------
.text:00004E09                 align 4
.text:00004E09 _text           ends
.text:00004E09
.text:00004E0C ; ===========================================================================
.text:00004E0C
.text:00004E0C ; Segment type: Pure code
.text:00004E0C ; Segment permissions: Read/Execute
.text:00004E0C _text           segment para public 'CODE' use32
.text:00004E0C                 assume cs:_text
.text:00004E0C                 ;org 4E0Ch
.text:00004E0C ; COMDAT (pick any)
.text:00004E0C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004E0C
.text:00004E0C ; =============== S U B R O U T I N E =======================================
.text:00004E0C
.text:00004E0C ; Attributes: bp-based frame
.text:00004E0C
.text:00004E0C ; public: __thiscall CMyComPtr<struct ICompressCoder>::operator struct ICompressCoder *(void)const
.text:00004E0C                 public ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
.text:00004E0C ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ proc near
.text:00004E0C                                         ; CODE XREF: NCoderMixer2::CCoder::GetUnknown(void)+1Ap
.text:00004E0C                                         ; NCoderMixer2::CCoder::GetUnknown(void)+26p
.text:00004E0C
.text:00004E0C var_4           = dword ptr -4
.text:00004E0C
.text:00004E0C                 push    ebp
.text:00004E0D                 mov     ebp, esp
.text:00004E0F                 push    ecx
.text:00004E10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E17                 mov     [ebp+var_4], ecx
.text:00004E1A                 mov     eax, [ebp+var_4]
.text:00004E1D                 mov     eax, [eax]
.text:00004E1F                 mov     esp, ebp
.text:00004E21                 pop     ebp
.text:00004E22                 retn
.text:00004E22 ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ endp
.text:00004E22
.text:00004E22 ; ---------------------------------------------------------------------------
.text:00004E23                 align 4
.text:00004E23 _text           ends
.text:00004E23
.text:00004E24 ; ===========================================================================
.text:00004E24
.text:00004E24 ; Segment type: Pure code
.text:00004E24 ; Segment permissions: Read/Execute
.text:00004E24 _text           segment para public 'CODE' use32
.text:00004E24                 assume cs:_text
.text:00004E24                 ;org 4E24h
.text:00004E24 ; COMDAT (pick any)
.text:00004E24                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004E24
.text:00004E24 ; =============== S U B R O U T I N E =======================================
.text:00004E24
.text:00004E24 ; Attributes: bp-based frame
.text:00004E24
.text:00004E24 ; public: bool __thiscall CMyComPtr<struct ICompressCoder>::operator!(void)const
.text:00004E24                 public ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ
.text:00004E24 ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ proc near
.text:00004E24                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+4CCp
.text:00004E24
.text:00004E24 var_4           = dword ptr -4
.text:00004E24
.text:00004E24                 push    ebp
.text:00004E25                 mov     ebp, esp
.text:00004E27                 push    ecx
.text:00004E28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E2F                 mov     [ebp+var_4], ecx
.text:00004E32                 mov     eax, [ebp+var_4]
.text:00004E35                 xor     ecx, ecx
.text:00004E37                 cmp     dword ptr [eax], 0
.text:00004E3A                 setz    cl
.text:00004E3D                 mov     al, cl
.text:00004E3F                 mov     esp, ebp
.text:00004E41                 pop     ebp
.text:00004E42                 retn
.text:00004E42 ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ endp
.text:00004E42
.text:00004E42 ; ---------------------------------------------------------------------------
.text:00004E43                 align 4
.text:00004E43 _text           ends
.text:00004E43
.text:00004E44 ; ===========================================================================
.text:00004E44
.text:00004E44 ; Segment type: Pure code
.text:00004E44 ; Segment permissions: Read/Execute
.text:00004E44 _text           segment para public 'CODE' use32
.text:00004E44                 assume cs:_text
.text:00004E44                 ;org 4E44h
.text:00004E44 ; COMDAT (pick any)
.text:00004E44                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004E44
.text:00004E44 ; =============== S U B R O U T I N E =======================================
.text:00004E44
.text:00004E44 ; Attributes: bp-based frame
.text:00004E44
.text:00004E44 ; public: __thiscall CMyComPtr<struct ICompressCoder2>::CMyComPtr<struct ICompressCoder2>(void)
.text:00004E44                 public ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ
.text:00004E44 ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ proc near
.text:00004E44                                         ; CODE XREF: CCreatedCoder::CCreatedCoder(void)+42p
.text:00004E44
.text:00004E44 var_4           = dword ptr -4
.text:00004E44
.text:00004E44                 push    ebp
.text:00004E45                 mov     ebp, esp
.text:00004E47                 push    ecx
.text:00004E48                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E4F                 mov     [ebp+var_4], ecx
.text:00004E52                 mov     eax, [ebp+var_4]
.text:00004E55                 mov     dword ptr [eax], 0
.text:00004E5B                 mov     eax, [ebp+var_4]
.text:00004E5E                 mov     esp, ebp
.text:00004E60                 pop     ebp
.text:00004E61                 retn
.text:00004E61 ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ endp
.text:00004E61
.text:00004E61 ; ---------------------------------------------------------------------------
.text:00004E62                 align 4
.text:00004E62 _text           ends
.text:00004E62
.text:00004E64 ; ===========================================================================
.text:00004E64
.text:00004E64 ; Segment type: Pure code
.text:00004E64 ; Segment permissions: Read/Execute
.text:00004E64 _text           segment para public 'CODE' use32
.text:00004E64                 assume cs:_text
.text:00004E64                 ;org 4E64h
.text:00004E64 ; COMDAT (pick any)
.text:00004E64                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004E64
.text:00004E64 ; =============== S U B R O U T I N E =======================================
.text:00004E64
.text:00004E64 ; Attributes: bp-based frame
.text:00004E64
.text:00004E64 ; public: __thiscall CMyComPtr<struct ICompressCoder2>::~CMyComPtr<struct ICompressCoder2>(void)
.text:00004E64                 public ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ
.text:00004E64 ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ proc near
.text:00004E64                                         ; CODE XREF: CCreatedCoder::~CCreatedCoder(void)+3Ap
.text:00004E64                                         ; NCoderMixer2::CCoder::~CCoder(void)+58p ...
.text:00004E64
.text:00004E64 var_4           = dword ptr -4
.text:00004E64
.text:00004E64                 push    ebp
.text:00004E65                 mov     ebp, esp
.text:00004E67                 push    ecx
.text:00004E68                 push    esi
.text:00004E69                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E70                 mov     [ebp+var_4], ecx
.text:00004E73                 mov     eax, [ebp+var_4]
.text:00004E76                 cmp     dword ptr [eax], 0
.text:00004E79                 jz      short loc_4E96
.text:00004E7B                 mov     ecx, [ebp+var_4]
.text:00004E7E                 mov     edx, [ecx]
.text:00004E80                 mov     eax, [ebp+var_4]
.text:00004E83                 mov     ecx, [eax]
.text:00004E85                 mov     edx, [edx]
.text:00004E87                 mov     esi, esp
.text:00004E89                 push    ecx
.text:00004E8A                 mov     eax, [edx+8]
.text:00004E8D                 call    eax
.text:00004E8F                 cmp     esi, esp
.text:00004E91                 call    __RTC_CheckEsp
.text:00004E96
.text:00004E96 loc_4E96:                               ; CODE XREF: CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>(void)+15j
.text:00004E96                 pop     esi
.text:00004E97                 add     esp, 4
.text:00004E9A                 cmp     ebp, esp
.text:00004E9C                 call    __RTC_CheckEsp
.text:00004EA1                 mov     esp, ebp
.text:00004EA3                 pop     ebp
.text:00004EA4                 retn
.text:00004EA4 ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ endp
.text:00004EA4
.text:00004EA4 ; ---------------------------------------------------------------------------
.text:00004EA5                 align 4
.text:00004EA5 _text           ends
.text:00004EA5
.text:00004EA8 ; ===========================================================================
.text:00004EA8
.text:00004EA8 ; Segment type: Pure code
.text:00004EA8 ; Segment permissions: Read/Execute
.text:00004EA8 _text           segment para public 'CODE' use32
.text:00004EA8                 assume cs:_text
.text:00004EA8                 ;org 4EA8h
.text:00004EA8 ; COMDAT (pick any)
.text:00004EA8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004EA8
.text:00004EA8 ; =============== S U B R O U T I N E =======================================
.text:00004EA8
.text:00004EA8 ; Attributes: bp-based frame
.text:00004EA8
.text:00004EA8 ; public: __thiscall CMyComPtr<struct ICompressCoder2>::operator struct ICompressCoder2 *(void)const
.text:00004EA8                 public ??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ
.text:00004EA8 ??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ proc near
.text:00004EA8                                         ; CODE XREF: NCoderMixer2::CCoder::GetUnknown(void)+36p
.text:00004EA8
.text:00004EA8 var_4           = dword ptr -4
.text:00004EA8
.text:00004EA8                 push    ebp
.text:00004EA9                 mov     ebp, esp
.text:00004EAB                 push    ecx
.text:00004EAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004EB3                 mov     [ebp+var_4], ecx
.text:00004EB6                 mov     eax, [ebp+var_4]
.text:00004EB9                 mov     eax, [eax]
.text:00004EBB                 mov     esp, ebp
.text:00004EBD                 pop     ebp
.text:00004EBE                 retn
.text:00004EBE ??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ endp
.text:00004EBE
.text:00004EBE ; ---------------------------------------------------------------------------
.text:00004EBF                 align 10h
.text:00004EBF _text           ends
.text:00004EBF
.text:00004EC0 ; ===========================================================================
.text:00004EC0
.text:00004EC0 ; Segment type: Pure code
.text:00004EC0 ; Segment permissions: Read/Execute
.text:00004EC0 _text           segment para public 'CODE' use32
.text:00004EC0                 assume cs:_text
.text:00004EC0                 ;org 4EC0h
.text:00004EC0 ; COMDAT (pick any)
.text:00004EC0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004EC0
.text:00004EC0 ; =============== S U B R O U T I N E =======================================
.text:00004EC0
.text:00004EC0 ; Attributes: bp-based frame
.text:00004EC0
.text:00004EC0 ; public: bool __thiscall CMyComPtr<struct ICompressCoder2>::operator!(void)const
.text:00004EC0                 public ??7?$CMyComPtr@UICompressCoder2@@@@QBE_NXZ
.text:00004EC0 ??7?$CMyComPtr@UICompressCoder2@@@@QBE_NXZ proc near
.text:00004EC0                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+522p
.text:00004EC0
.text:00004EC0 var_4           = dword ptr -4
.text:00004EC0
.text:00004EC0                 push    ebp
.text:00004EC1                 mov     ebp, esp
.text:00004EC3                 push    ecx
.text:00004EC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004ECB                 mov     [ebp+var_4], ecx
.text:00004ECE                 mov     eax, [ebp+var_4]
.text:00004ED1                 xor     ecx, ecx
.text:00004ED3                 cmp     dword ptr [eax], 0
.text:00004ED6                 setz    cl
.text:00004ED9                 mov     al, cl
.text:00004EDB                 mov     esp, ebp
.text:00004EDD                 pop     ebp
.text:00004EDE                 retn
.text:00004EDE ??7?$CMyComPtr@UICompressCoder2@@@@QBE_NXZ endp
.text:00004EDE
.text:00004EDE ; ---------------------------------------------------------------------------
.text:00004EDF                 align 10h
.text:00004EDF _text           ends
.text:00004EDF
.text:00004EE0 ; ===========================================================================
.text:00004EE0
.text:00004EE0 ; Segment type: Pure code
.text:00004EE0 ; Segment permissions: Read/Execute
.text:00004EE0 _text           segment para public 'CODE' use32
.text:00004EE0                 assume cs:_text
.text:00004EE0                 ;org 4EE0h
.text:00004EE0 ; COMDAT (pick any)
.text:00004EE0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004EE0
.text:00004EE0 ; =============== S U B R O U T I N E =======================================
.text:00004EE0
.text:00004EE0 ; Attributes: bp-based frame
.text:00004EE0
.text:00004EE0 ; public: __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>(void)
.text:00004EE0                 public ??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ
.text:00004EE0 ??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ proc near
.text:00004EE0                                         ; CODE XREF: NCoderMixer2::CBindInfo::CBindInfo(void)+30p
.text:00004EE0
.text:00004EE0 var_4           = dword ptr -4
.text:00004EE0
.text:00004EE0                 push    ebp
.text:00004EE1                 mov     ebp, esp
.text:00004EE3                 push    ecx
.text:00004EE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004EEB                 mov     [ebp+var_4], ecx
.text:00004EEE                 mov     eax, [ebp+var_4]
.text:00004EF1                 mov     dword ptr [eax], 0
.text:00004EF7                 mov     ecx, [ebp+var_4]
.text:00004EFA                 mov     dword ptr [ecx+4], 0
.text:00004F01                 mov     edx, [ebp+var_4]
.text:00004F04                 mov     dword ptr [edx+8], 0
.text:00004F0B                 mov     eax, [ebp+var_4]
.text:00004F0E                 mov     esp, ebp
.text:00004F10                 pop     ebp
.text:00004F11                 retn
.text:00004F11 ??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ endp
.text:00004F11
.text:00004F11 ; ---------------------------------------------------------------------------
.text:00004F12                 align 4
.text:00004F12 _text           ends
.text:00004F12
.text:00004F14 ; ===========================================================================
.text:00004F14
.text:00004F14 ; Segment type: Pure code
.text:00004F14 ; Segment permissions: Read/Execute
.text:00004F14 _text           segment para public 'CODE' use32
.text:00004F14                 assume cs:_text
.text:00004F14                 ;org 4F14h
.text:00004F14 ; COMDAT (pick any)
.text:00004F14                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004F14
.text:00004F14 ; =============== S U B R O U T I N E =======================================
.text:00004F14
.text:00004F14 ; Attributes: bp-based frame
.text:00004F14
.text:00004F14 ; public: unsigned int __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::Size(void)const
.text:00004F14                 public ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ
.text:00004F14 ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ proc near
.text:00004F14                                         ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+1Fp
.text:00004F14                                         ; NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+29p ...
.text:00004F14
.text:00004F14 var_4           = dword ptr -4
.text:00004F14
.text:00004F14                 push    ebp
.text:00004F15                 mov     ebp, esp
.text:00004F17                 push    ecx
.text:00004F18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F1F                 mov     [ebp+var_4], ecx
.text:00004F22                 mov     eax, [ebp+var_4]
.text:00004F25                 mov     eax, [eax+4]
.text:00004F28                 mov     esp, ebp
.text:00004F2A                 pop     ebp
.text:00004F2B                 retn
.text:00004F2B ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ endp
.text:00004F2B
.text:00004F2B _text           ends
.text:00004F2B
.text:00004F2C ; ===========================================================================
.text:00004F2C
.text:00004F2C ; Segment type: Pure code
.text:00004F2C ; Segment permissions: Read/Execute
.text:00004F2C _text           segment para public 'CODE' use32
.text:00004F2C                 assume cs:_text
.text:00004F2C                 ;org 4F2Ch
.text:00004F2C ; COMDAT (pick any)
.text:00004F2C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004F2C
.text:00004F2C ; =============== S U B R O U T I N E =======================================
.text:00004F2C
.text:00004F2C ; Attributes: bp-based frame
.text:00004F2C
.text:00004F2C ; public: void __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::ClearAndSetSize(unsigned int)
.text:00004F2C                 public ?ClearAndSetSize@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXI@Z
.text:00004F2C ?ClearAndSetSize@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXI@Z proc near
.text:00004F2C                                         ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+A3p
.text:00004F2C
.text:00004F2C var_4           = dword ptr -4
.text:00004F2C arg_0           = dword ptr  8
.text:00004F2C
.text:00004F2C                 push    ebp
.text:00004F2D                 mov     ebp, esp
.text:00004F2F                 push    ecx
.text:00004F30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F37                 mov     [ebp+var_4], ecx
.text:00004F3A                 mov     eax, [ebp+arg_0]
.text:00004F3D                 push    eax
.text:00004F3E                 mov     ecx, [ebp+var_4]
.text:00004F41                 call    ?ClearAndReserve@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXI@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::ClearAndReserve(uint)
.text:00004F46                 mov     ecx, [ebp+var_4]
.text:00004F49                 mov     edx, [ebp+arg_0]
.text:00004F4C                 mov     [ecx+4], edx
.text:00004F4F                 add     esp, 4
.text:00004F52                 cmp     ebp, esp
.text:00004F54                 call    __RTC_CheckEsp
.text:00004F59                 mov     esp, ebp
.text:00004F5B                 pop     ebp
.text:00004F5C                 retn    4
.text:00004F5C ?ClearAndSetSize@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXI@Z endp
.text:00004F5C
.text:00004F5C ; ---------------------------------------------------------------------------
.text:00004F5F                 align 10h
.text:00004F5F _text           ends
.text:00004F5F
.text:00004F60 ; ===========================================================================
.text:00004F60
.text:00004F60 ; Segment type: Pure code
.text:00004F60 ; Segment permissions: Read/Execute
.text:00004F60 _text           segment para public 'CODE' use32
.text:00004F60                 assume cs:_text
.text:00004F60                 ;org 4F60h
.text:00004F60 ; COMDAT (pick any)
.text:00004F60                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004F60
.text:00004F60 ; =============== S U B R O U T I N E =======================================
.text:00004F60
.text:00004F60 ; Attributes: bp-based frame
.text:00004F60
.text:00004F60 ; public: __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>(void)
.text:00004F60                 public ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ
.text:00004F60 ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ proc near
.text:00004F60                                         ; CODE XREF: __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$0+3j
.text:00004F60                                         ; NCoderMixer2::CBindInfo::~CBindInfo(void)+76p ...
.text:00004F60
.text:00004F60 var_8           = dword ptr -8
.text:00004F60 var_4           = dword ptr -4
.text:00004F60
.text:00004F60                 push    ebp
.text:00004F61                 mov     ebp, esp
.text:00004F63                 sub     esp, 8
.text:00004F66                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004F6D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F74                 mov     [ebp+var_4], ecx
.text:00004F77                 mov     eax, [ebp+var_4]
.text:00004F7A                 mov     ecx, [eax]
.text:00004F7C                 mov     [ebp+var_8], ecx
.text:00004F7F                 mov     edx, [ebp+var_8]
.text:00004F82                 push    edx             ; void *
.text:00004F83                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004F88                 add     esp, 4
.text:00004F8B                 add     esp, 8
.text:00004F8E                 cmp     ebp, esp
.text:00004F90                 call    __RTC_CheckEsp
.text:00004F95                 mov     esp, ebp
.text:00004F97                 pop     ebp
.text:00004F98                 retn
.text:00004F98 ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ endp
.text:00004F98
.text:00004F98 ; ---------------------------------------------------------------------------
.text:00004F99                 align 4
.text:00004F99 _text           ends
.text:00004F99
.text:00004F9C ; ===========================================================================
.text:00004F9C
.text:00004F9C ; Segment type: Pure code
.text:00004F9C ; Segment permissions: Read/Execute
.text:00004F9C _text           segment para public 'CODE' use32
.text:00004F9C                 assume cs:_text
.text:00004F9C                 ;org 4F9Ch
.text:00004F9C ; COMDAT (pick any)
.text:00004F9C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004F9C
.text:00004F9C ; =============== S U B R O U T I N E =======================================
.text:00004F9C
.text:00004F9C ; Attributes: bp-based frame
.text:00004F9C
.text:00004F9C ; public: void __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::Clear(void)
.text:00004F9C                 public ?Clear@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXXZ
.text:00004F9C ?Clear@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXXZ proc near
.text:00004F9C                                         ; CODE XREF: NCoderMixer2::CBindInfo::Clear(void)+11p
.text:00004F9C                                         ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::ClearAndReserve(uint)+21p
.text:00004F9C
.text:00004F9C var_4           = dword ptr -4
.text:00004F9C
.text:00004F9C                 push    ebp
.text:00004F9D                 mov     ebp, esp
.text:00004F9F                 push    ecx
.text:00004FA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004FA7                 mov     [ebp+var_4], ecx
.text:00004FAA                 mov     eax, [ebp+var_4]
.text:00004FAD                 mov     dword ptr [eax+4], 0
.text:00004FB4                 mov     esp, ebp
.text:00004FB6                 pop     ebp
.text:00004FB7                 retn
.text:00004FB7 ?Clear@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXXZ endp
.text:00004FB7
.text:00004FB7 _text           ends
.text:00004FB7
.text:00004FB8 ; ===========================================================================
.text:00004FB8
.text:00004FB8 ; Segment type: Pure code
.text:00004FB8 ; Segment permissions: Read/Execute
.text:00004FB8 _text           segment para public 'CODE' use32
.text:00004FB8                 assume cs:_text
.text:00004FB8                 ;org 4FB8h
.text:00004FB8 ; COMDAT (pick any)
.text:00004FB8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004FB8
.text:00004FB8 ; =============== S U B R O U T I N E =======================================
.text:00004FB8
.text:00004FB8 ; Attributes: bp-based frame
.text:00004FB8
.text:00004FB8 ; public: class CRecordVector<struct NCoderMixer2::CCoderStreamsInfo> & __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::operator=(class CRecordVector<struct NCoderMixer2::CCoderStreamsInfo> const &)
.text:00004FB8                 public ??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z
.text:00004FB8 ??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z proc near
.text:00004FB8                                         ; CODE XREF: NCoderMixer2::CBindInfo::operator=(NCoderMixer2::CBindInfo const &)+15p
.text:00004FB8
.text:00004FB8 var_10          = dword ptr -10h
.text:00004FB8 var_C           = dword ptr -0Ch
.text:00004FB8 var_8           = dword ptr -8
.text:00004FB8 var_4           = dword ptr -4
.text:00004FB8 arg_0           = dword ptr  8
.text:00004FB8
.text:00004FB8                 push    ebp
.text:00004FB9                 mov     ebp, esp
.text:00004FBB                 sub     esp, 10h
.text:00004FBE                 mov     eax, 0CCCCCCCCh
.text:00004FC3                 mov     [ebp+var_10], eax
.text:00004FC6                 mov     [ebp+var_C], eax
.text:00004FC9                 mov     [ebp+var_8], eax
.text:00004FCC                 mov     [ebp+var_4], eax
.text:00004FCF                 mov     [ebp+var_4], ecx
.text:00004FD2                 mov     eax, [ebp+arg_0]
.text:00004FD5                 cmp     eax, [ebp+var_4]
.text:00004FD8                 jnz     short loc_4FE2
.text:00004FDA                 mov     eax, [ebp+var_4]
.text:00004FDD                 jmp     loc_5086
.text:00004FE2 ; ---------------------------------------------------------------------------
.text:00004FE2
.text:00004FE2 loc_4FE2:                               ; CODE XREF: CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=(CRecordVector<NCoderMixer2::CCoderStreamsInfo> const &)+20j
.text:00004FE2                 mov     ecx, [ebp+arg_0]
.text:00004FE5                 call    ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size(void)
.text:00004FEA                 mov     [ebp+var_8], eax
.text:00004FED                 mov     ecx, [ebp+var_4]
.text:00004FF0                 mov     edx, [ebp+var_8]
.text:00004FF3                 cmp     edx, [ecx+8]
.text:00004FF6                 jbe     short loc_5059
.text:00004FF8                 mov     eax, [ebp+var_4]
.text:00004FFB                 mov     ecx, [eax]
.text:00004FFD                 mov     [ebp+var_C], ecx
.text:00005000                 mov     edx, [ebp+var_C]
.text:00005003                 push    edx             ; void *
.text:00005004                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005009                 add     esp, 4
.text:0000500C                 mov     eax, [ebp+var_4]
.text:0000500F                 mov     dword ptr [eax+8], 0
.text:00005016                 mov     ecx, [ebp+var_4]
.text:00005019                 mov     dword ptr [ecx+4], 0
.text:00005020                 mov     edx, [ebp+var_4]
.text:00005023                 mov     dword ptr [edx], 0
.text:00005029                 xor     ecx, ecx
.text:0000502B                 mov     eax, [ebp+var_8]
.text:0000502E                 mov     edx, 4
.text:00005033                 mul     edx
.text:00005035                 seto    cl
.text:00005038                 neg     ecx
.text:0000503A                 or      ecx, eax
.text:0000503C                 push    ecx             ; unsigned int
.text:0000503D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005042                 add     esp, 4
.text:00005045                 mov     [ebp+var_10], eax
.text:00005048                 mov     eax, [ebp+var_4]
.text:0000504B                 mov     ecx, [ebp+var_10]
.text:0000504E                 mov     [eax], ecx
.text:00005050                 mov     edx, [ebp+var_4]
.text:00005053                 mov     eax, [ebp+var_8]
.text:00005056                 mov     [edx+8], eax
.text:00005059
.text:00005059 loc_5059:                               ; CODE XREF: CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=(CRecordVector<NCoderMixer2::CCoderStreamsInfo> const &)+3Ej
.text:00005059                 mov     ecx, [ebp+var_4]
.text:0000505C                 mov     edx, [ebp+var_8]
.text:0000505F                 mov     [ecx+4], edx
.text:00005062                 cmp     [ebp+var_8], 0
.text:00005066                 jz      short loc_5083
.text:00005068                 mov     eax, [ebp+var_8]
.text:0000506B                 shl     eax, 2
.text:0000506E                 push    eax             ; Size
.text:0000506F                 mov     ecx, [ebp+arg_0]
.text:00005072                 mov     edx, [ecx]
.text:00005074                 push    edx             ; Src
.text:00005075                 mov     eax, [ebp+var_4]
.text:00005078                 mov     ecx, [eax]
.text:0000507A                 push    ecx             ; Dst
.text:0000507B                 call    _memcpy
.text:00005080                 add     esp, 0Ch
.text:00005083
.text:00005083 loc_5083:                               ; CODE XREF: CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=(CRecordVector<NCoderMixer2::CCoderStreamsInfo> const &)+AEj
.text:00005083                 mov     eax, [ebp+var_4]
.text:00005086
.text:00005086 loc_5086:                               ; CODE XREF: CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=(CRecordVector<NCoderMixer2::CCoderStreamsInfo> const &)+25j
.text:00005086                 add     esp, 10h
.text:00005089                 cmp     ebp, esp
.text:0000508B                 call    __RTC_CheckEsp
.text:00005090                 mov     esp, ebp
.text:00005092                 pop     ebp
.text:00005093                 retn    4
.text:00005093 ??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z endp
.text:00005093
.text:00005093 ; ---------------------------------------------------------------------------
.text:00005096                 align 4
.text:00005096 _text           ends
.text:00005096
.text:00005098 ; ===========================================================================
.text:00005098
.text:00005098 ; Segment type: Pure code
.text:00005098 ; Segment permissions: Read/Execute
.text:00005098 _text           segment para public 'CODE' use32
.text:00005098                 assume cs:_text
.text:00005098                 ;org 5098h
.text:00005098 ; COMDAT (pick any)
.text:00005098                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005098
.text:00005098 ; =============== S U B R O U T I N E =======================================
.text:00005098
.text:00005098 ; Attributes: bp-based frame
.text:00005098
.text:00005098 ; public: struct NCoderMixer2::CCoderStreamsInfo const & __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::operator[](unsigned int)const
.text:00005098                 public ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z
.text:00005098 ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z proc near
.text:00005098                                         ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+5Fp
.text:00005098                                         ; NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+6Cp
.text:00005098
.text:00005098 var_4           = dword ptr -4
.text:00005098 arg_0           = dword ptr  8
.text:00005098
.text:00005098                 push    ebp
.text:00005099                 mov     ebp, esp
.text:0000509B                 push    ecx
.text:0000509C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050A3                 mov     [ebp+var_4], ecx
.text:000050A6                 mov     eax, [ebp+var_4]
.text:000050A9                 mov     ecx, [eax]
.text:000050AB                 mov     edx, [ebp+arg_0]
.text:000050AE                 lea     eax, [ecx+edx*4]
.text:000050B1                 mov     esp, ebp
.text:000050B3                 pop     ebp
.text:000050B4                 retn    4
.text:000050B4 ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z endp
.text:000050B4
.text:000050B4 ; ---------------------------------------------------------------------------
.text:000050B7                 align 4
.text:000050B7 _text           ends
.text:000050B7
.text:000050B8 ; ===========================================================================
.text:000050B8
.text:000050B8 ; Segment type: Pure code
.text:000050B8 ; Segment permissions: Read/Execute
.text:000050B8 _text           segment para public 'CODE' use32
.text:000050B8                 assume cs:_text
.text:000050B8                 ;org 50B8h
.text:000050B8 ; COMDAT (pick any)
.text:000050B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000050B8
.text:000050B8 ; =============== S U B R O U T I N E =======================================
.text:000050B8
.text:000050B8 ; Attributes: bp-based frame
.text:000050B8
.text:000050B8 ; public: struct NCoderMixer2::CCoderStreamsInfo & __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::operator[](unsigned int)
.text:000050B8                 public ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z
.text:000050B8 ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z proc near
.text:000050B8                                         ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+F5p
.text:000050B8
.text:000050B8 var_4           = dword ptr -4
.text:000050B8 arg_0           = dword ptr  8
.text:000050B8
.text:000050B8                 push    ebp
.text:000050B9                 mov     ebp, esp
.text:000050BB                 push    ecx
.text:000050BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050C3                 mov     [ebp+var_4], ecx
.text:000050C6                 mov     eax, [ebp+var_4]
.text:000050C9                 mov     ecx, [eax]
.text:000050CB                 mov     edx, [ebp+arg_0]
.text:000050CE                 lea     eax, [ecx+edx*4]
.text:000050D1                 mov     esp, ebp
.text:000050D3                 pop     ebp
.text:000050D4                 retn    4
.text:000050D4 ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z endp
.text:000050D4
.text:000050D4 ; ---------------------------------------------------------------------------
.text:000050D7                 align 4
.text:000050D7 _text           ends
.text:000050D7
.text:000050D8 ; ===========================================================================
.text:000050D8
.text:000050D8 ; Segment type: Pure code
.text:000050D8 ; Segment permissions: Read/Execute
.text:000050D8 _text           segment para public 'CODE' use32
.text:000050D8                 assume cs:_text
.text:000050D8                 ;org 50D8h
.text:000050D8 ; COMDAT (pick any)
.text:000050D8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000050D8
.text:000050D8 ; =============== S U B R O U T I N E =======================================
.text:000050D8
.text:000050D8 ; Attributes: bp-based frame
.text:000050D8
.text:000050D8 ; public: __thiscall CRecordVector<struct NCoderMixer2::CBond>::CRecordVector<struct NCoderMixer2::CBond>(void)
.text:000050D8                 public ??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ
.text:000050D8 ??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ proc near
.text:000050D8                                         ; CODE XREF: NCoderMixer2::CBindInfo::CBindInfo(void)+42p
.text:000050D8
.text:000050D8 var_4           = dword ptr -4
.text:000050D8
.text:000050D8                 push    ebp
.text:000050D9                 mov     ebp, esp
.text:000050DB                 push    ecx
.text:000050DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050E3                 mov     [ebp+var_4], ecx
.text:000050E6                 mov     eax, [ebp+var_4]
.text:000050E9                 mov     dword ptr [eax], 0
.text:000050EF                 mov     ecx, [ebp+var_4]
.text:000050F2                 mov     dword ptr [ecx+4], 0
.text:000050F9                 mov     edx, [ebp+var_4]
.text:000050FC                 mov     dword ptr [edx+8], 0
.text:00005103                 mov     eax, [ebp+var_4]
.text:00005106                 mov     esp, ebp
.text:00005108                 pop     ebp
.text:00005109                 retn
.text:00005109 ??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ endp
.text:00005109
.text:00005109 ; ---------------------------------------------------------------------------
.text:0000510A                 align 4
.text:0000510A _text           ends
.text:0000510A
.text:0000510C ; ===========================================================================
.text:0000510C
.text:0000510C ; Segment type: Pure code
.text:0000510C ; Segment permissions: Read/Execute
.text:0000510C _text           segment para public 'CODE' use32
.text:0000510C                 assume cs:_text
.text:0000510C                 ;org 510Ch
.text:0000510C ; COMDAT (pick any)
.text:0000510C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000510C
.text:0000510C ; =============== S U B R O U T I N E =======================================
.text:0000510C
.text:0000510C ; Attributes: bp-based frame
.text:0000510C
.text:0000510C ; public: unsigned int __thiscall CRecordVector<struct NCoderMixer2::CBond>::Size(void)const
.text:0000510C                 public ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ
.text:0000510C ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ proc near
.text:0000510C                                         ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+8Dp
.text:0000510C                                         ; NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+9Ap ...
.text:0000510C
.text:0000510C var_4           = dword ptr -4
.text:0000510C
.text:0000510C                 push    ebp
.text:0000510D                 mov     ebp, esp
.text:0000510F                 push    ecx
.text:00005110                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005117                 mov     [ebp+var_4], ecx
.text:0000511A                 mov     eax, [ebp+var_4]
.text:0000511D                 mov     eax, [eax+4]
.text:00005120                 mov     esp, ebp
.text:00005122                 pop     ebp
.text:00005123                 retn
.text:00005123 ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ endp
.text:00005123
.text:00005123 _text           ends
.text:00005123
.text:00005124 ; ===========================================================================
.text:00005124
.text:00005124 ; Segment type: Pure code
.text:00005124 ; Segment permissions: Read/Execute
.text:00005124 _text           segment para public 'CODE' use32
.text:00005124                 assume cs:_text
.text:00005124                 ;org 5124h
.text:00005124 ; COMDAT (pick any)
.text:00005124                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005124
.text:00005124 ; =============== S U B R O U T I N E =======================================
.text:00005124
.text:00005124 ; Attributes: bp-based frame
.text:00005124
.text:00005124 ; public: void __thiscall CRecordVector<struct NCoderMixer2::CBond>::ClearAndSetSize(unsigned int)
.text:00005124                 public ?ClearAndSetSize@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXI@Z
.text:00005124 ?ClearAndSetSize@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXI@Z proc near
.text:00005124                                         ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+32p
.text:00005124
.text:00005124 var_4           = dword ptr -4
.text:00005124 arg_0           = dword ptr  8
.text:00005124
.text:00005124                 push    ebp
.text:00005125                 mov     ebp, esp
.text:00005127                 push    ecx
.text:00005128                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000512F                 mov     [ebp+var_4], ecx
.text:00005132                 mov     eax, [ebp+arg_0]
.text:00005135                 push    eax
.text:00005136                 mov     ecx, [ebp+var_4]
.text:00005139                 call    ?ClearAndReserve@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXI@Z ; CRecordVector<NCoderMixer2::CBond>::ClearAndReserve(uint)
.text:0000513E                 mov     ecx, [ebp+var_4]
.text:00005141                 mov     edx, [ebp+arg_0]
.text:00005144                 mov     [ecx+4], edx
.text:00005147                 add     esp, 4
.text:0000514A                 cmp     ebp, esp
.text:0000514C                 call    __RTC_CheckEsp
.text:00005151                 mov     esp, ebp
.text:00005153                 pop     ebp
.text:00005154                 retn    4
.text:00005154 ?ClearAndSetSize@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXI@Z endp
.text:00005154
.text:00005154 ; ---------------------------------------------------------------------------
.text:00005157                 align 4
.text:00005157 _text           ends
.text:00005157
.text:00005158 ; ===========================================================================
.text:00005158
.text:00005158 ; Segment type: Pure code
.text:00005158 ; Segment permissions: Read/Execute
.text:00005158 _text           segment para public 'CODE' use32
.text:00005158                 assume cs:_text
.text:00005158                 ;org 5158h
.text:00005158 ; COMDAT (pick any)
.text:00005158                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005158
.text:00005158 ; =============== S U B R O U T I N E =======================================
.text:00005158
.text:00005158 ; Attributes: bp-based frame
.text:00005158
.text:00005158 ; public: __thiscall CRecordVector<struct NCoderMixer2::CBond>::~CRecordVector<struct NCoderMixer2::CBond>(void)
.text:00005158                 public ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ
.text:00005158 ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ proc near
.text:00005158                                         ; CODE XREF: __unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$1+6j
.text:00005158                                         ; NCoderMixer2::CBindInfo::~CBindInfo(void)+67p ...
.text:00005158
.text:00005158 var_8           = dword ptr -8
.text:00005158 var_4           = dword ptr -4
.text:00005158
.text:00005158                 push    ebp
.text:00005159                 mov     ebp, esp
.text:0000515B                 sub     esp, 8
.text:0000515E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005165                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000516C                 mov     [ebp+var_4], ecx
.text:0000516F                 mov     eax, [ebp+var_4]
.text:00005172                 mov     ecx, [eax]
.text:00005174                 mov     [ebp+var_8], ecx
.text:00005177                 mov     edx, [ebp+var_8]
.text:0000517A                 push    edx             ; void *
.text:0000517B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005180                 add     esp, 4
.text:00005183                 add     esp, 8
.text:00005186                 cmp     ebp, esp
.text:00005188                 call    __RTC_CheckEsp
.text:0000518D                 mov     esp, ebp
.text:0000518F                 pop     ebp
.text:00005190                 retn
.text:00005190 ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ endp
.text:00005190
.text:00005190 ; ---------------------------------------------------------------------------
.text:00005191                 align 4
.text:00005191 _text           ends
.text:00005191
.text:00005194 ; ===========================================================================
.text:00005194
.text:00005194 ; Segment type: Pure code
.text:00005194 ; Segment permissions: Read/Execute
.text:00005194 _text           segment para public 'CODE' use32
.text:00005194                 assume cs:_text
.text:00005194                 ;org 5194h
.text:00005194 ; COMDAT (pick any)
.text:00005194                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005194
.text:00005194 ; =============== S U B R O U T I N E =======================================
.text:00005194
.text:00005194 ; Attributes: bp-based frame
.text:00005194
.text:00005194 ; public: void __thiscall CRecordVector<struct NCoderMixer2::CBond>::Clear(void)
.text:00005194                 public ?Clear@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXXZ
.text:00005194 ?Clear@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXXZ proc near
.text:00005194                                         ; CODE XREF: NCoderMixer2::CBindInfo::Clear(void)+1Cp
.text:00005194                                         ; CRecordVector<NCoderMixer2::CBond>::ClearAndReserve(uint)+21p
.text:00005194
.text:00005194 var_4           = dword ptr -4
.text:00005194
.text:00005194                 push    ebp
.text:00005195                 mov     ebp, esp
.text:00005197                 push    ecx
.text:00005198                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000519F                 mov     [ebp+var_4], ecx
.text:000051A2                 mov     eax, [ebp+var_4]
.text:000051A5                 mov     dword ptr [eax+4], 0
.text:000051AC                 mov     esp, ebp
.text:000051AE                 pop     ebp
.text:000051AF                 retn
.text:000051AF ?Clear@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXXZ endp
.text:000051AF
.text:000051AF _text           ends
.text:000051AF
.text:000051B0 ; ===========================================================================
.text:000051B0
.text:000051B0 ; Segment type: Pure code
.text:000051B0 ; Segment permissions: Read/Execute
.text:000051B0 _text           segment para public 'CODE' use32
.text:000051B0                 assume cs:_text
.text:000051B0                 ;org 51B0h
.text:000051B0 ; COMDAT (pick any)
.text:000051B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000051B0
.text:000051B0 ; =============== S U B R O U T I N E =======================================
.text:000051B0
.text:000051B0 ; Attributes: bp-based frame
.text:000051B0
.text:000051B0 ; public: class CRecordVector<struct NCoderMixer2::CBond> & __thiscall CRecordVector<struct NCoderMixer2::CBond>::operator=(class CRecordVector<struct NCoderMixer2::CBond> const &)
.text:000051B0                 public ??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z
.text:000051B0 ??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z proc near
.text:000051B0                                         ; CODE XREF: NCoderMixer2::CBindInfo::operator=(NCoderMixer2::CBindInfo const &)+27p
.text:000051B0
.text:000051B0 var_10          = dword ptr -10h
.text:000051B0 var_C           = dword ptr -0Ch
.text:000051B0 var_8           = dword ptr -8
.text:000051B0 var_4           = dword ptr -4
.text:000051B0 arg_0           = dword ptr  8
.text:000051B0
.text:000051B0                 push    ebp
.text:000051B1                 mov     ebp, esp
.text:000051B3                 sub     esp, 10h
.text:000051B6                 mov     eax, 0CCCCCCCCh
.text:000051BB                 mov     [ebp+var_10], eax
.text:000051BE                 mov     [ebp+var_C], eax
.text:000051C1                 mov     [ebp+var_8], eax
.text:000051C4                 mov     [ebp+var_4], eax
.text:000051C7                 mov     [ebp+var_4], ecx
.text:000051CA                 mov     eax, [ebp+arg_0]
.text:000051CD                 cmp     eax, [ebp+var_4]
.text:000051D0                 jnz     short loc_51DA
.text:000051D2                 mov     eax, [ebp+var_4]
.text:000051D5                 jmp     loc_527E
.text:000051DA ; ---------------------------------------------------------------------------
.text:000051DA
.text:000051DA loc_51DA:                               ; CODE XREF: CRecordVector<NCoderMixer2::CBond>::operator=(CRecordVector<NCoderMixer2::CBond> const &)+20j
.text:000051DA                 mov     ecx, [ebp+arg_0]
.text:000051DD                 call    ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size(void)
.text:000051E2                 mov     [ebp+var_8], eax
.text:000051E5                 mov     ecx, [ebp+var_4]
.text:000051E8                 mov     edx, [ebp+var_8]
.text:000051EB                 cmp     edx, [ecx+8]
.text:000051EE                 jbe     short loc_5251
.text:000051F0                 mov     eax, [ebp+var_4]
.text:000051F3                 mov     ecx, [eax]
.text:000051F5                 mov     [ebp+var_C], ecx
.text:000051F8                 mov     edx, [ebp+var_C]
.text:000051FB                 push    edx             ; void *
.text:000051FC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005201                 add     esp, 4
.text:00005204                 mov     eax, [ebp+var_4]
.text:00005207                 mov     dword ptr [eax+8], 0
.text:0000520E                 mov     ecx, [ebp+var_4]
.text:00005211                 mov     dword ptr [ecx+4], 0
.text:00005218                 mov     edx, [ebp+var_4]
.text:0000521B                 mov     dword ptr [edx], 0
.text:00005221                 xor     ecx, ecx
.text:00005223                 mov     eax, [ebp+var_8]
.text:00005226                 mov     edx, 8
.text:0000522B                 mul     edx
.text:0000522D                 seto    cl
.text:00005230                 neg     ecx
.text:00005232                 or      ecx, eax
.text:00005234                 push    ecx             ; unsigned int
.text:00005235                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000523A                 add     esp, 4
.text:0000523D                 mov     [ebp+var_10], eax
.text:00005240                 mov     eax, [ebp+var_4]
.text:00005243                 mov     ecx, [ebp+var_10]
.text:00005246                 mov     [eax], ecx
.text:00005248                 mov     edx, [ebp+var_4]
.text:0000524B                 mov     eax, [ebp+var_8]
.text:0000524E                 mov     [edx+8], eax
.text:00005251
.text:00005251 loc_5251:                               ; CODE XREF: CRecordVector<NCoderMixer2::CBond>::operator=(CRecordVector<NCoderMixer2::CBond> const &)+3Ej
.text:00005251                 mov     ecx, [ebp+var_4]
.text:00005254                 mov     edx, [ebp+var_8]
.text:00005257                 mov     [ecx+4], edx
.text:0000525A                 cmp     [ebp+var_8], 0
.text:0000525E                 jz      short loc_527B
.text:00005260                 mov     eax, [ebp+var_8]
.text:00005263                 shl     eax, 3
.text:00005266                 push    eax             ; Size
.text:00005267                 mov     ecx, [ebp+arg_0]
.text:0000526A                 mov     edx, [ecx]
.text:0000526C                 push    edx             ; Src
.text:0000526D                 mov     eax, [ebp+var_4]
.text:00005270                 mov     ecx, [eax]
.text:00005272                 push    ecx             ; Dst
.text:00005273                 call    _memcpy
.text:00005278                 add     esp, 0Ch
.text:0000527B
.text:0000527B loc_527B:                               ; CODE XREF: CRecordVector<NCoderMixer2::CBond>::operator=(CRecordVector<NCoderMixer2::CBond> const &)+AEj
.text:0000527B                 mov     eax, [ebp+var_4]
.text:0000527E
.text:0000527E loc_527E:                               ; CODE XREF: CRecordVector<NCoderMixer2::CBond>::operator=(CRecordVector<NCoderMixer2::CBond> const &)+25j
.text:0000527E                 add     esp, 10h
.text:00005281                 cmp     ebp, esp
.text:00005283                 call    __RTC_CheckEsp
.text:00005288                 mov     esp, ebp
.text:0000528A                 pop     ebp
.text:0000528B                 retn    4
.text:0000528B ??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z endp
.text:0000528B
.text:0000528B ; ---------------------------------------------------------------------------
.text:0000528E                 align 10h
.text:0000528E _text           ends
.text:0000528E
.text:00005290 ; ===========================================================================
.text:00005290
.text:00005290 ; Segment type: Pure code
.text:00005290 ; Segment permissions: Read/Execute
.text:00005290 _text           segment para public 'CODE' use32
.text:00005290                 assume cs:_text
.text:00005290                 ;org 5290h
.text:00005290 ; COMDAT (pick any)
.text:00005290                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005290
.text:00005290 ; =============== S U B R O U T I N E =======================================
.text:00005290
.text:00005290 ; Attributes: bp-based frame
.text:00005290
.text:00005290 ; public: struct NCoderMixer2::CBond const & __thiscall CRecordVector<struct NCoderMixer2::CBond>::operator[](unsigned int)const
.text:00005290                 public ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z
.text:00005290 ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z proc near
.text:00005290                                         ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+D6p
.text:00005290                                         ; NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+E6p
.text:00005290
.text:00005290 var_4           = dword ptr -4
.text:00005290 arg_0           = dword ptr  8
.text:00005290
.text:00005290                 push    ebp
.text:00005291                 mov     ebp, esp
.text:00005293                 push    ecx
.text:00005294                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000529B                 mov     [ebp+var_4], ecx
.text:0000529E                 mov     eax, [ebp+var_4]
.text:000052A1                 mov     ecx, [eax]
.text:000052A3                 mov     edx, [ebp+arg_0]
.text:000052A6                 lea     eax, [ecx+edx*8]
.text:000052A9                 mov     esp, ebp
.text:000052AB                 pop     ebp
.text:000052AC                 retn    4
.text:000052AC ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z endp
.text:000052AC
.text:000052AC ; ---------------------------------------------------------------------------
.text:000052AF                 align 10h
.text:000052AF _text           ends
.text:000052AF
.text:000052B0 ; ===========================================================================
.text:000052B0
.text:000052B0 ; Segment type: Pure code
.text:000052B0 ; Segment permissions: Read/Execute
.text:000052B0 _text           segment para public 'CODE' use32
.text:000052B0                 assume cs:_text
.text:000052B0                 ;org 52B0h
.text:000052B0 ; COMDAT (pick any)
.text:000052B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000052B0
.text:000052B0 ; =============== S U B R O U T I N E =======================================
.text:000052B0
.text:000052B0 ; Attributes: bp-based frame
.text:000052B0
.text:000052B0 ; public: struct NCoderMixer2::CBond & __thiscall CRecordVector<struct NCoderMixer2::CBond>::operator[](unsigned int)
.text:000052B0                 public ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z
.text:000052B0 ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z proc near
.text:000052B0                                         ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+63p
.text:000052B0
.text:000052B0 var_4           = dword ptr -4
.text:000052B0 arg_0           = dword ptr  8
.text:000052B0
.text:000052B0                 push    ebp
.text:000052B1                 mov     ebp, esp
.text:000052B3                 push    ecx
.text:000052B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000052BB                 mov     [ebp+var_4], ecx
.text:000052BE                 mov     eax, [ebp+var_4]
.text:000052C1                 mov     ecx, [eax]
.text:000052C3                 mov     edx, [ebp+arg_0]
.text:000052C6                 lea     eax, [ecx+edx*8]
.text:000052C9                 mov     esp, ebp
.text:000052CB                 pop     ebp
.text:000052CC                 retn    4
.text:000052CC ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z endp
.text:000052CC
.text:000052CC ; ---------------------------------------------------------------------------
.text:000052CF                 align 10h
.text:000052CF _text           ends
.text:000052CF
.text:000052D0 ; ===========================================================================
.text:000052D0
.text:000052D0 ; Segment type: Pure code
.text:000052D0 ; Segment permissions: Read/Execute
.text:000052D0 _text           segment para public 'CODE' use32
.text:000052D0                 assume cs:_text
.text:000052D0                 ;org 52D0h
.text:000052D0 ; COMDAT (pick any)
.text:000052D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000052D0
.text:000052D0 ; =============== S U B R O U T I N E =======================================
.text:000052D0
.text:000052D0 ; Attributes: bp-based frame
.text:000052D0
.text:000052D0 ; public: __thiscall CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:000052D0                 public ??0?$CRecordVector@_K@@QAE@XZ
.text:000052D0 ??0?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::CBindInfoEx::CBindInfoEx(void)+42p
.text:000052D0
.text:000052D0 var_4           = dword ptr -4
.text:000052D0
.text:000052D0                 push    ebp
.text:000052D1                 mov     ebp, esp
.text:000052D3                 push    ecx
.text:000052D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000052DB                 mov     [ebp+var_4], ecx
.text:000052DE                 mov     eax, [ebp+var_4]
.text:000052E1                 mov     dword ptr [eax], 0
.text:000052E7                 mov     ecx, [ebp+var_4]
.text:000052EA                 mov     dword ptr [ecx+4], 0
.text:000052F1                 mov     edx, [ebp+var_4]
.text:000052F4                 mov     dword ptr [edx+8], 0
.text:000052FB                 mov     eax, [ebp+var_4]
.text:000052FE                 mov     esp, ebp
.text:00005300                 pop     ebp
.text:00005301                 retn
.text:00005301 ??0?$CRecordVector@_K@@QAE@XZ endp
.text:00005301
.text:00005301 ; ---------------------------------------------------------------------------
.text:00005302                 align 4
.text:00005302 _text           ends
.text:00005302
.text:00005304 ; ===========================================================================
.text:00005304
.text:00005304 ; Segment type: Pure code
.text:00005304 ; Segment permissions: Read/Execute
.text:00005304 _text           segment para public 'CODE' use32
.text:00005304                 assume cs:_text
.text:00005304                 ;org 5304h
.text:00005304 ; COMDAT (pick any)
.text:00005304                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005304
.text:00005304 ; =============== S U B R O U T I N E =======================================
.text:00005304
.text:00005304 ; Attributes: bp-based frame
.text:00005304
.text:00005304 ; public: unsigned int __thiscall CRecordVector<unsigned __int64>::Size(void)const
.text:00005304                 public ?Size@?$CRecordVector@_K@@QBEIXZ
.text:00005304 ?Size@?$CRecordVector@_K@@QBEIXZ proc near
.text:00005304                                         ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+119p
.text:00005304                                         ; CRecordVector<unsigned __int64>::operator=(CRecordVector<unsigned __int64> const &)+2Dp
.text:00005304
.text:00005304 var_4           = dword ptr -4
.text:00005304
.text:00005304                 push    ebp
.text:00005305                 mov     ebp, esp
.text:00005307                 push    ecx
.text:00005308                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000530F                 mov     [ebp+var_4], ecx
.text:00005312                 mov     eax, [ebp+var_4]
.text:00005315                 mov     eax, [eax+4]
.text:00005318                 mov     esp, ebp
.text:0000531A                 pop     ebp
.text:0000531B                 retn
.text:0000531B ?Size@?$CRecordVector@_K@@QBEIXZ endp
.text:0000531B
.text:0000531B _text           ends
.text:0000531B
.text:0000531C ; ===========================================================================
.text:0000531C
.text:0000531C ; Segment type: Pure code
.text:0000531C ; Segment permissions: Read/Execute
.text:0000531C _text           segment para public 'CODE' use32
.text:0000531C                 assume cs:_text
.text:0000531C                 ;org 531Ch
.text:0000531C ; COMDAT (pick any)
.text:0000531C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000531C
.text:0000531C ; =============== S U B R O U T I N E =======================================
.text:0000531C
.text:0000531C ; Attributes: bp-based frame
.text:0000531C
.text:0000531C ; public: void __thiscall CRecordVector<unsigned __int64>::ClearAndSetSize(unsigned int)
.text:0000531C                 public ?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z
.text:0000531C ?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z proc near
.text:0000531C                                         ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+B7p
.text:0000531C
.text:0000531C var_4           = dword ptr -4
.text:0000531C arg_0           = dword ptr  8
.text:0000531C
.text:0000531C                 push    ebp
.text:0000531D                 mov     ebp, esp
.text:0000531F                 push    ecx
.text:00005320                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005327                 mov     [ebp+var_4], ecx
.text:0000532A                 mov     eax, [ebp+arg_0]
.text:0000532D                 push    eax
.text:0000532E                 mov     ecx, [ebp+var_4]
.text:00005331                 call    ?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::ClearAndReserve(uint)
.text:00005336                 mov     ecx, [ebp+var_4]
.text:00005339                 mov     edx, [ebp+arg_0]
.text:0000533C                 mov     [ecx+4], edx
.text:0000533F                 add     esp, 4
.text:00005342                 cmp     ebp, esp
.text:00005344                 call    __RTC_CheckEsp
.text:00005349                 mov     esp, ebp
.text:0000534B                 pop     ebp
.text:0000534C                 retn    4
.text:0000534C ?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z endp
.text:0000534C
.text:0000534C ; ---------------------------------------------------------------------------
.text:0000534F                 align 10h
.text:0000534F _text           ends
.text:0000534F
.text:00005350 ; ===========================================================================
.text:00005350
.text:00005350 ; Segment type: Pure code
.text:00005350 ; Segment permissions: Read/Execute
.text:00005350 _text           segment para public 'CODE' use32
.text:00005350                 assume cs:_text
.text:00005350                 ;org 5350h
.text:00005350 ; COMDAT (pick any)
.text:00005350                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005350
.text:00005350 ; =============== S U B R O U T I N E =======================================
.text:00005350
.text:00005350 ; Attributes: bp-based frame
.text:00005350
.text:00005350 ; public: __thiscall CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00005350                 public ??1?$CRecordVector@_K@@QAE@XZ
.text:00005350 ??1?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::CBindInfoEx::~CBindInfoEx(void)+3Ap
.text:00005350                                         ; NCoderMixer2::CCoder::~CCoder(void)+49p ...
.text:00005350
.text:00005350 var_8           = dword ptr -8
.text:00005350 var_4           = dword ptr -4
.text:00005350
.text:00005350                 push    ebp
.text:00005351                 mov     ebp, esp
.text:00005353                 sub     esp, 8
.text:00005356                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000535D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005364                 mov     [ebp+var_4], ecx
.text:00005367                 mov     eax, [ebp+var_4]
.text:0000536A                 mov     ecx, [eax]
.text:0000536C                 mov     [ebp+var_8], ecx
.text:0000536F                 mov     edx, [ebp+var_8]
.text:00005372                 push    edx             ; void *
.text:00005373                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005378                 add     esp, 4
.text:0000537B                 add     esp, 8
.text:0000537E                 cmp     ebp, esp
.text:00005380                 call    __RTC_CheckEsp
.text:00005385                 mov     esp, ebp
.text:00005387                 pop     ebp
.text:00005388                 retn
.text:00005388 ??1?$CRecordVector@_K@@QAE@XZ endp
.text:00005388
.text:00005388 ; ---------------------------------------------------------------------------
.text:00005389                 align 4
.text:00005389 _text           ends
.text:00005389
.text:0000538C ; ===========================================================================
.text:0000538C
.text:0000538C ; Segment type: Pure code
.text:0000538C ; Segment permissions: Read/Execute
.text:0000538C _text           segment para public 'CODE' use32
.text:0000538C                 assume cs:_text
.text:0000538C                 ;org 538Ch
.text:0000538C ; COMDAT (pick any)
.text:0000538C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000538C
.text:0000538C ; =============== S U B R O U T I N E =======================================
.text:0000538C
.text:0000538C ; Attributes: bp-based frame
.text:0000538C
.text:0000538C ; public: void __thiscall CRecordVector<unsigned __int64>::Clear(void)
.text:0000538C                 public ?Clear@?$CRecordVector@_K@@QAEXXZ
.text:0000538C ?Clear@?$CRecordVector@_K@@QAEXXZ proc near
.text:0000538C                                         ; CODE XREF: NArchive::N7z::CBindInfoEx::Clear(void)+1Cp
.text:0000538C                                         ; CRecordVector<unsigned __int64>::ClearAndReserve(uint)+21p
.text:0000538C
.text:0000538C var_4           = dword ptr -4
.text:0000538C
.text:0000538C                 push    ebp
.text:0000538D                 mov     ebp, esp
.text:0000538F                 push    ecx
.text:00005390                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005397                 mov     [ebp+var_4], ecx
.text:0000539A                 mov     eax, [ebp+var_4]
.text:0000539D                 mov     dword ptr [eax+4], 0
.text:000053A4                 mov     esp, ebp
.text:000053A6                 pop     ebp
.text:000053A7                 retn
.text:000053A7 ?Clear@?$CRecordVector@_K@@QAEXXZ endp
.text:000053A7
.text:000053A7 _text           ends
.text:000053A7
.text:000053A8 ; ===========================================================================
.text:000053A8
.text:000053A8 ; Segment type: Pure code
.text:000053A8 ; Segment permissions: Read/Execute
.text:000053A8 _text           segment para public 'CODE' use32
.text:000053A8                 assume cs:_text
.text:000053A8                 ;org 53A8h
.text:000053A8 ; COMDAT (pick any)
.text:000053A8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000053A8
.text:000053A8 ; =============== S U B R O U T I N E =======================================
.text:000053A8
.text:000053A8 ; Attributes: bp-based frame
.text:000053A8
.text:000053A8 ; public: class CRecordVector<unsigned __int64> & __thiscall CRecordVector<unsigned __int64>::operator=(class CRecordVector<unsigned __int64> const &)
.text:000053A8                 public ??4?$CRecordVector@_K@@QAEAAV0@ABV0@@Z
.text:000053A8 ??4?$CRecordVector@_K@@QAEAAV0@ABV0@@Z proc near
.text:000053A8                                         ; CODE XREF: NArchive::N7z::CBindInfoEx::operator=(NArchive::N7z::CBindInfoEx const &)+27p
.text:000053A8
.text:000053A8 var_10          = dword ptr -10h
.text:000053A8 var_C           = dword ptr -0Ch
.text:000053A8 var_8           = dword ptr -8
.text:000053A8 var_4           = dword ptr -4
.text:000053A8 arg_0           = dword ptr  8
.text:000053A8
.text:000053A8                 push    ebp
.text:000053A9                 mov     ebp, esp
.text:000053AB                 sub     esp, 10h
.text:000053AE                 mov     eax, 0CCCCCCCCh
.text:000053B3                 mov     [ebp+var_10], eax
.text:000053B6                 mov     [ebp+var_C], eax
.text:000053B9                 mov     [ebp+var_8], eax
.text:000053BC                 mov     [ebp+var_4], eax
.text:000053BF                 mov     [ebp+var_4], ecx
.text:000053C2                 mov     eax, [ebp+arg_0]
.text:000053C5                 cmp     eax, [ebp+var_4]
.text:000053C8                 jnz     short loc_53D2
.text:000053CA                 mov     eax, [ebp+var_4]
.text:000053CD                 jmp     loc_5476
.text:000053D2 ; ---------------------------------------------------------------------------
.text:000053D2
.text:000053D2 loc_53D2:                               ; CODE XREF: CRecordVector<unsigned __int64>::operator=(CRecordVector<unsigned __int64> const &)+20j
.text:000053D2                 mov     ecx, [ebp+arg_0]
.text:000053D5                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:000053DA                 mov     [ebp+var_8], eax
.text:000053DD                 mov     ecx, [ebp+var_4]
.text:000053E0                 mov     edx, [ebp+var_8]
.text:000053E3                 cmp     edx, [ecx+8]
.text:000053E6                 jbe     short loc_5449
.text:000053E8                 mov     eax, [ebp+var_4]
.text:000053EB                 mov     ecx, [eax]
.text:000053ED                 mov     [ebp+var_C], ecx
.text:000053F0                 mov     edx, [ebp+var_C]
.text:000053F3                 push    edx             ; void *
.text:000053F4                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000053F9                 add     esp, 4
.text:000053FC                 mov     eax, [ebp+var_4]
.text:000053FF                 mov     dword ptr [eax+8], 0
.text:00005406                 mov     ecx, [ebp+var_4]
.text:00005409                 mov     dword ptr [ecx+4], 0
.text:00005410                 mov     edx, [ebp+var_4]
.text:00005413                 mov     dword ptr [edx], 0
.text:00005419                 xor     ecx, ecx
.text:0000541B                 mov     eax, [ebp+var_8]
.text:0000541E                 mov     edx, 8
.text:00005423                 mul     edx
.text:00005425                 seto    cl
.text:00005428                 neg     ecx
.text:0000542A                 or      ecx, eax
.text:0000542C                 push    ecx             ; unsigned int
.text:0000542D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005432                 add     esp, 4
.text:00005435                 mov     [ebp+var_10], eax
.text:00005438                 mov     eax, [ebp+var_4]
.text:0000543B                 mov     ecx, [ebp+var_10]
.text:0000543E                 mov     [eax], ecx
.text:00005440                 mov     edx, [ebp+var_4]
.text:00005443                 mov     eax, [ebp+var_8]
.text:00005446                 mov     [edx+8], eax
.text:00005449
.text:00005449 loc_5449:                               ; CODE XREF: CRecordVector<unsigned __int64>::operator=(CRecordVector<unsigned __int64> const &)+3Ej
.text:00005449                 mov     ecx, [ebp+var_4]
.text:0000544C                 mov     edx, [ebp+var_8]
.text:0000544F                 mov     [ecx+4], edx
.text:00005452                 cmp     [ebp+var_8], 0
.text:00005456                 jz      short loc_5473
.text:00005458                 mov     eax, [ebp+var_8]
.text:0000545B                 shl     eax, 3
.text:0000545E                 push    eax             ; Size
.text:0000545F                 mov     ecx, [ebp+arg_0]
.text:00005462                 mov     edx, [ecx]
.text:00005464                 push    edx             ; Src
.text:00005465                 mov     eax, [ebp+var_4]
.text:00005468                 mov     ecx, [eax]
.text:0000546A                 push    ecx             ; Dst
.text:0000546B                 call    _memcpy
.text:00005470                 add     esp, 0Ch
.text:00005473
.text:00005473 loc_5473:                               ; CODE XREF: CRecordVector<unsigned __int64>::operator=(CRecordVector<unsigned __int64> const &)+AEj
.text:00005473                 mov     eax, [ebp+var_4]
.text:00005476
.text:00005476 loc_5476:                               ; CODE XREF: CRecordVector<unsigned __int64>::operator=(CRecordVector<unsigned __int64> const &)+25j
.text:00005476                 add     esp, 10h
.text:00005479                 cmp     ebp, esp
.text:0000547B                 call    __RTC_CheckEsp
.text:00005480                 mov     esp, ebp
.text:00005482                 pop     ebp
.text:00005483                 retn    4
.text:00005483 ??4?$CRecordVector@_K@@QAEAAV0@ABV0@@Z endp
.text:00005483
.text:00005483 ; ---------------------------------------------------------------------------
.text:00005486                 align 4
.text:00005486 _text           ends
.text:00005486
.text:00005488 ; ===========================================================================
.text:00005488
.text:00005488 ; Segment type: Pure code
.text:00005488 ; Segment permissions: Read/Execute
.text:00005488 _text           segment para public 'CODE' use32
.text:00005488                 assume cs:_text
.text:00005488                 ;org 5488h
.text:00005488 ; COMDAT (pick any)
.text:00005488                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005488
.text:00005488 ; =============== S U B R O U T I N E =======================================
.text:00005488
.text:00005488 ; Attributes: bp-based frame
.text:00005488
.text:00005488 ; public: unsigned __int64 const & __thiscall CRecordVector<unsigned __int64>::operator[](unsigned int)const
.text:00005488                 public ??A?$CRecordVector@_K@@QBEAB_KI@Z
.text:00005488 ??A?$CRecordVector@_K@@QBEAB_KI@Z proc near
.text:00005488                                         ; CODE XREF: NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+12Dp
.text:00005488                                         ; NArchive::N7z::AreBindInfoExEqual(NArchive::N7z::CBindInfoEx const &,NArchive::N7z::CBindInfoEx const &)+13Ep
.text:00005488
.text:00005488 var_4           = dword ptr -4
.text:00005488 arg_0           = dword ptr  8
.text:00005488
.text:00005488                 push    ebp
.text:00005489                 mov     ebp, esp
.text:0000548B                 push    ecx
.text:0000548C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005493                 mov     [ebp+var_4], ecx
.text:00005496                 mov     eax, [ebp+var_4]
.text:00005499                 mov     ecx, [eax]
.text:0000549B                 mov     edx, [ebp+arg_0]
.text:0000549E                 lea     eax, [ecx+edx*8]
.text:000054A1                 mov     esp, ebp
.text:000054A3                 pop     ebp
.text:000054A4                 retn    4
.text:000054A4 ??A?$CRecordVector@_K@@QBEAB_KI@Z endp
.text:000054A4
.text:000054A4 ; ---------------------------------------------------------------------------
.text:000054A7                 align 4
.text:000054A7 _text           ends
.text:000054A7
.text:000054A8 ; ===========================================================================
.text:000054A8
.text:000054A8 ; Segment type: Pure code
.text:000054A8 ; Segment permissions: Read/Execute
.text:000054A8 _text           segment para public 'CODE' use32
.text:000054A8                 assume cs:_text
.text:000054A8                 ;org 54A8h
.text:000054A8 ; COMDAT (pick any)
.text:000054A8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000054A8
.text:000054A8 ; =============== S U B R O U T I N E =======================================
.text:000054A8
.text:000054A8 ; Attributes: bp-based frame
.text:000054A8
.text:000054A8 ; public: unsigned __int64 & __thiscall CRecordVector<unsigned __int64>::operator[](unsigned int)
.text:000054A8                 public ??A?$CRecordVector@_K@@QAEAA_KI@Z
.text:000054A8 ??A?$CRecordVector@_K@@QAEAA_KI@Z proc near
.text:000054A8                                         ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+10Cp
.text:000054A8
.text:000054A8 var_4           = dword ptr -4
.text:000054A8 arg_0           = dword ptr  8
.text:000054A8
.text:000054A8                 push    ebp
.text:000054A9                 mov     ebp, esp
.text:000054AB                 push    ecx
.text:000054AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000054B3                 mov     [ebp+var_4], ecx
.text:000054B6                 mov     eax, [ebp+var_4]
.text:000054B9                 mov     ecx, [eax]
.text:000054BB                 mov     edx, [ebp+arg_0]
.text:000054BE                 lea     eax, [ecx+edx*8]
.text:000054C1                 mov     esp, ebp
.text:000054C3                 pop     ebp
.text:000054C4                 retn    4
.text:000054C4 ??A?$CRecordVector@_K@@QAEAA_KI@Z endp
.text:000054C4
.text:000054C4 ; ---------------------------------------------------------------------------
.text:000054C7                 align 4
.text:000054C7 _text           ends
.text:000054C7
.text:000054C8 ; ===========================================================================
.text:000054C8
.text:000054C8 ; Segment type: Pure code
.text:000054C8 ; Segment permissions: Read/Execute
.text:000054C8 _text           segment para public 'CODE' use32
.text:000054C8                 assume cs:_text
.text:000054C8                 ;org 54C8h
.text:000054C8 ; COMDAT (pick any)
.text:000054C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000054C8
.text:000054C8 ; =============== S U B R O U T I N E =======================================
.text:000054C8
.text:000054C8 ; Attributes: bp-based frame
.text:000054C8
.text:000054C8 ; public: __thiscall CRecordVector<bool>::CRecordVector<bool>(void)
.text:000054C8                 public ??0?$CRecordVector@_N@@QAE@XZ
.text:000054C8 ??0?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: NCoderMixer2::CMixer::CMixer(bool)+4Ep
.text:000054C8                                         ; NCoderMixer2::CMixer::CMixer(bool)+5Dp
.text:000054C8
.text:000054C8 var_4           = dword ptr -4
.text:000054C8
.text:000054C8                 push    ebp
.text:000054C9                 mov     ebp, esp
.text:000054CB                 push    ecx
.text:000054CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000054D3                 mov     [ebp+var_4], ecx
.text:000054D6                 mov     eax, [ebp+var_4]
.text:000054D9                 mov     dword ptr [eax], 0
.text:000054DF                 mov     ecx, [ebp+var_4]
.text:000054E2                 mov     dword ptr [ecx+4], 0
.text:000054E9                 mov     edx, [ebp+var_4]
.text:000054EC                 mov     dword ptr [edx+8], 0
.text:000054F3                 mov     eax, [ebp+var_4]
.text:000054F6                 mov     esp, ebp
.text:000054F8                 pop     ebp
.text:000054F9                 retn
.text:000054F9 ??0?$CRecordVector@_N@@QAE@XZ endp
.text:000054F9
.text:000054F9 ; ---------------------------------------------------------------------------
.text:000054FA                 align 4
.text:000054FA _text           ends
.text:000054FA
.text:000054FC ; ===========================================================================
.text:000054FC
.text:000054FC ; Segment type: Pure code
.text:000054FC ; Segment permissions: Read/Execute
.text:000054FC _text           segment para public 'CODE' use32
.text:000054FC                 assume cs:_text
.text:000054FC                 ;org 54FCh
.text:000054FC ; COMDAT (pick any)
.text:000054FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000054FC
.text:000054FC ; =============== S U B R O U T I N E =======================================
.text:000054FC
.text:000054FC ; Attributes: bp-based frame
.text:000054FC
.text:000054FC ; public: __thiscall CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000054FC                 public ??1?$CRecordVector@_N@@QAE@XZ
.text:000054FC ??1?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: __unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$1+6j
.text:000054FC                                         ; NCoderMixer2::CMixer::~CMixer(void)+3Ap ...
.text:000054FC
.text:000054FC var_8           = dword ptr -8
.text:000054FC var_4           = dword ptr -4
.text:000054FC
.text:000054FC                 push    ebp
.text:000054FD                 mov     ebp, esp
.text:000054FF                 sub     esp, 8
.text:00005502                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005509                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005510                 mov     [ebp+var_4], ecx
.text:00005513                 mov     eax, [ebp+var_4]
.text:00005516                 mov     ecx, [eax]
.text:00005518                 mov     [ebp+var_8], ecx
.text:0000551B                 mov     edx, [ebp+var_8]
.text:0000551E                 push    edx             ; void *
.text:0000551F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005524                 add     esp, 4
.text:00005527                 add     esp, 8
.text:0000552A                 cmp     ebp, esp
.text:0000552C                 call    __RTC_CheckEsp
.text:00005531                 mov     esp, ebp
.text:00005533                 pop     ebp
.text:00005534                 retn
.text:00005534 ??1?$CRecordVector@_N@@QAE@XZ endp
.text:00005534
.text:00005534 ; ---------------------------------------------------------------------------
.text:00005535                 align 4
.text:00005535 _text           ends
.text:00005535
.text:00005538 ; ===========================================================================
.text:00005538
.text:00005538 ; Segment type: Pure code
.text:00005538 ; Segment permissions: Read/Execute
.text:00005538 _text           segment para public 'CODE' use32
.text:00005538                 assume cs:_text
.text:00005538                 ;org 5538h
.text:00005538 ; COMDAT (pick any)
.text:00005538                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005538
.text:00005538 ; =============== S U B R O U T I N E =======================================
.text:00005538
.text:00005538 ; Attributes: bp-based frame
.text:00005538
.text:00005538 ; public: void __thiscall CRecordVector<bool>::Clear(void)
.text:00005538                 public ?Clear@?$CRecordVector@_N@@QAEXXZ
.text:00005538 ?Clear@?$CRecordVector@_N@@QAEXXZ proc near
.text:00005538                                         ; CODE XREF: NCoderMixer2::CMixer::SetBindInfo(NCoderMixer2::CBindInfo const &)+23p
.text:00005538
.text:00005538 var_4           = dword ptr -4
.text:00005538
.text:00005538                 push    ebp
.text:00005539                 mov     ebp, esp
.text:0000553B                 push    ecx
.text:0000553C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005543                 mov     [ebp+var_4], ecx
.text:00005546                 mov     eax, [ebp+var_4]
.text:00005549                 mov     dword ptr [eax+4], 0
.text:00005550                 mov     esp, ebp
.text:00005552                 pop     ebp
.text:00005553                 retn
.text:00005553 ?Clear@?$CRecordVector@_N@@QAEXXZ endp
.text:00005553
.text:00005553 _text           ends
.text:00005553
.text:00005554 ; ===========================================================================
.text:00005554
.text:00005554 ; Segment type: Pure code
.text:00005554 ; Segment permissions: Read/Execute
.text:00005554 _text           segment para public 'CODE' use32
.text:00005554                 assume cs:_text
.text:00005554                 ;org 5554h
.text:00005554 ; COMDAT (pick any)
.text:00005554                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005554
.text:00005554 ; =============== S U B R O U T I N E =======================================
.text:00005554
.text:00005554 ; Attributes: bp-based frame
.text:00005554
.text:00005554 ; public: unsigned int __thiscall CObjectVector<class CMyComPtr<struct ISequentialInStream>>::Size(void)const
.text:00005554                 public ?Size@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QBEIXZ
.text:00005554 ?Size@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QBEIXZ proc near
.text:00005554                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+13D3p
.text:00005554
.text:00005554 var_4           = dword ptr -4
.text:00005554
.text:00005554                 push    ebp
.text:00005555                 mov     ebp, esp
.text:00005557                 push    ecx
.text:00005558                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000555F                 mov     [ebp+var_4], ecx
.text:00005562                 mov     ecx, [ebp+var_4]
.text:00005565                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000556A                 add     esp, 4
.text:0000556D                 cmp     ebp, esp
.text:0000556F                 call    __RTC_CheckEsp
.text:00005574                 mov     esp, ebp
.text:00005576                 pop     ebp
.text:00005577                 retn
.text:00005577 ?Size@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QBEIXZ endp
.text:00005577
.text:00005577 _text           ends
.text:00005577
.text:00005578 ; ===========================================================================
.text:00005578
.text:00005578 ; Segment type: Pure code
.text:00005578 ; Segment permissions: Read/Execute
.text:00005578 _text           segment para public 'CODE' use32
.text:00005578                 assume cs:_text
.text:00005578                 ;org 5578h
.text:00005578 ; COMDAT (pick any)
.text:00005578                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005578
.text:00005578 ; =============== S U B R O U T I N E =======================================
.text:00005578
.text:00005578 ; Attributes: bp-based frame
.text:00005578
.text:00005578 ; public: __thiscall CObjectVector<class CMyComPtr<struct ISequentialInStream>>::CObjectVector<class CMyComPtr<struct ISequentialInStream>>(void)
.text:00005578                 public ??0?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
.text:00005578 ??0?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ proc near
.text:00005578                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+F60p
.text:00005578
.text:00005578 var_4           = dword ptr -4
.text:00005578
.text:00005578                 push    ebp
.text:00005579                 mov     ebp, esp
.text:0000557B                 push    ecx
.text:0000557C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005583                 mov     [ebp+var_4], ecx
.text:00005586                 mov     ecx, [ebp+var_4]
.text:00005589                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000558E                 mov     eax, [ebp+var_4]
.text:00005591                 add     esp, 4
.text:00005594                 cmp     ebp, esp
.text:00005596                 call    __RTC_CheckEsp
.text:0000559B                 mov     esp, ebp
.text:0000559D                 pop     ebp
.text:0000559E                 retn
.text:0000559E ??0?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ endp
.text:0000559E
.text:0000559E ; ---------------------------------------------------------------------------
.text:0000559F                 align 10h
.text:0000559F _text           ends
.text:0000559F
.text:000055A0 ; ===========================================================================
.text:000055A0
.text:000055A0 ; Segment type: Pure code
.text:000055A0 ; Segment permissions: Read/Execute
.text:000055A0 _text           segment para public 'CODE' use32
.text:000055A0                 assume cs:_text
.text:000055A0                 ;org 55A0h
.text:000055A0 ; COMDAT (pick any)
.text:000055A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000055A0
.text:000055A0 ; =============== S U B R O U T I N E =======================================
.text:000055A0
.text:000055A0 ; Attributes: bp-based frame
.text:000055A0
.text:000055A0 ; public: class CMyComPtr<struct ISequentialInStream> & __thiscall CObjectVector<class CMyComPtr<struct ISequentialInStream>>::operator[](unsigned int)
.text:000055A0                 public ??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z
.text:000055A0 ??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z proc near
.text:000055A0                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+142Ap
.text:000055A0
.text:000055A0 var_4           = dword ptr -4
.text:000055A0 arg_0           = dword ptr  8
.text:000055A0
.text:000055A0                 push    ebp
.text:000055A1                 mov     ebp, esp
.text:000055A3                 push    ecx
.text:000055A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000055AB                 mov     [ebp+var_4], ecx
.text:000055AE                 mov     eax, [ebp+arg_0]
.text:000055B1                 push    eax
.text:000055B2                 mov     ecx, [ebp+var_4]
.text:000055B5                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000055BA                 mov     eax, [eax]
.text:000055BC                 add     esp, 4
.text:000055BF                 cmp     ebp, esp
.text:000055C1                 call    __RTC_CheckEsp
.text:000055C6                 mov     esp, ebp
.text:000055C8                 pop     ebp
.text:000055C9                 retn    4
.text:000055C9 ??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z endp
.text:000055C9
.text:000055C9 _text           ends
.text:000055C9
.text:000055CC ; ===========================================================================
.text:000055CC
.text:000055CC ; Segment type: Pure code
.text:000055CC ; Segment permissions: Read/Execute
.text:000055CC _text           segment para public 'CODE' use32
.text:000055CC                 assume cs:_text
.text:000055CC                 ;org 55CCh
.text:000055CC ; COMDAT (pick any)
.text:000055CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000055CC
.text:000055CC ; =============== S U B R O U T I N E =======================================
.text:000055CC
.text:000055CC ; Attributes: bp-based frame
.text:000055CC
.text:000055CC ; public: class CMyComPtr<struct ISequentialInStream> & __thiscall CObjectVector<class CMyComPtr<struct ISequentialInStream>>::AddNew(void)
.text:000055CC                 public ?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ
.text:000055CC ?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ proc near
.text:000055CC                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1368p
.text:000055CC
.text:000055CC var_20          = dword ptr -20h
.text:000055CC var_1C          = dword ptr -1Ch
.text:000055CC var_18          = dword ptr -18h
.text:000055CC var_14          = dword ptr -14h
.text:000055CC var_10          = dword ptr -10h
.text:000055CC var_C           = dword ptr -0Ch
.text:000055CC var_4           = dword ptr -4
.text:000055CC
.text:000055CC                 push    ebp
.text:000055CD                 mov     ebp, esp
.text:000055CF                 push    0FFFFFFFFh
.text:000055D1                 push    offset __ehhandler$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ
.text:000055D6                 mov     eax, large fs:0
.text:000055DC                 push    eax
.text:000055DD                 sub     esp, 14h
.text:000055E0                 mov     eax, 0CCCCCCCCh
.text:000055E5                 mov     [ebp+var_20], eax
.text:000055E8                 mov     [ebp+var_1C], eax
.text:000055EB                 mov     [ebp+var_18], eax
.text:000055EE                 mov     [ebp+var_14], eax
.text:000055F1                 mov     [ebp+var_10], eax
.text:000055F4                 mov     eax, dword ptr ds:___security_cookie
.text:000055F9                 xor     eax, ebp
.text:000055FB                 push    eax
.text:000055FC                 lea     eax, [ebp+var_C]
.text:000055FF                 mov     large fs:0, eax
.text:00005605                 mov     [ebp+var_10], ecx
.text:00005608                 push    4               ; unsigned int
.text:0000560A                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000560F                 add     esp, 4
.text:00005612                 mov     [ebp+var_1C], eax
.text:00005615                 mov     [ebp+var_4], 0
.text:0000561C                 cmp     [ebp+var_1C], 0
.text:00005620                 jz      short loc_562F
.text:00005622                 mov     ecx, [ebp+var_1C]
.text:00005625                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:0000562A                 mov     [ebp+var_20], eax
.text:0000562D                 jmp     short loc_5636
.text:0000562F ; ---------------------------------------------------------------------------
.text:0000562F
.text:0000562F loc_562F:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::AddNew(void)+54j
.text:0000562F                 mov     [ebp+var_20], 0
.text:00005636
.text:00005636 loc_5636:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::AddNew(void)+61j
.text:00005636                 mov     eax, [ebp+var_20]
.text:00005639                 mov     [ebp+var_18], eax
.text:0000563C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005643                 mov     ecx, [ebp+var_18]
.text:00005646                 mov     [ebp+var_14], ecx
.text:00005649                 mov     edx, [ebp+var_14]
.text:0000564C                 push    edx
.text:0000564D                 mov     ecx, [ebp+var_10]
.text:00005650                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00005655                 mov     eax, [ebp+var_14]
.text:00005658                 mov     ecx, [ebp+var_C]
.text:0000565B                 mov     large fs:0, ecx
.text:00005662                 pop     ecx
.text:00005663                 add     esp, 20h
.text:00005666                 cmp     ebp, esp
.text:00005668                 call    __RTC_CheckEsp
.text:0000566D                 mov     esp, ebp
.text:0000566F                 pop     ebp
.text:00005670                 retn
.text:00005670 ?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ endp
.text:00005670
.text:00005670 ; ---------------------------------------------------------------------------
.text:00005671                 align 4
.text:00005671 _text           ends
.text:00005671
.text$x:00005674 ; ===========================================================================
.text$x:00005674
.text$x:00005674 ; Segment type: Pure code
.text$x:00005674 ; Segment permissions: Read/Execute
.text$x:00005674 _text$x         segment para public 'CODE' use32
.text$x:00005674                 assume cs:_text$x
.text$x:00005674                 ;org 5674h
.text$x:00005674 ; COMDAT (pick associative to section at 55CC)
.text$x:00005674                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00005674
.text$x:00005674 ; =============== S U B R O U T I N E =======================================
.text$x:00005674
.text$x:00005674
.text$x:00005674 __unwindfunclet$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ$0 proc near
.text$x:00005674                                         ; DATA XREF: .xdata$x:000056A0o
.text$x:00005674                 mov     eax, [ebp-1Ch]
.text$x:00005677                 push    eax             ; void *
.text$x:00005678                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000567D                 pop     ecx
.text$x:0000567E                 retn
.text$x:0000567E __unwindfunclet$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ$0 endp
.text$x:0000567E
.text$x:0000567F
.text$x:0000567F ; =============== S U B R O U T I N E =======================================
.text$x:0000567F
.text$x:0000567F
.text$x:0000567F __ehhandler$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ proc near
.text$x:0000567F                                         ; DATA XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::AddNew(void)+5o
.text$x:0000567F
.text$x:0000567F arg_4           = dword ptr  8
.text$x:0000567F
.text$x:0000567F                 mov     edx, [esp+arg_4]
.text$x:00005683                 lea     eax, [edx+0Ch]
.text$x:00005686                 mov     ecx, [edx-18h]
.text$x:00005689                 xor     ecx, eax
.text$x:0000568B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005690                 mov     eax, offset __ehfuncinfo$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ
.text$x:00005695                 jmp     ___CxxFrameHandler3
.text$x:00005695 __ehhandler$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ endp
.text$x:00005695
.text$x:00005695 ; ---------------------------------------------------------------------------
.text$x:0000569A                 align 4
.text$x:0000569A _text$x         ends
.text$x:0000569A
.xdata$x:0000569C ; ===========================================================================
.xdata$x:0000569C
.xdata$x:0000569C ; Segment type: Pure data
.xdata$x:0000569C ; Segment permissions: Read
.xdata$x:0000569C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000569C                 assume cs:_xdata$x
.xdata$x:0000569C                 ;org 569Ch
.xdata$x:0000569C ; COMDAT (pick associative to section at 55CC)
.xdata$x:0000569C __unwindtable$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ db 0FFh
.xdata$x:0000569C                                         ; DATA XREF: .xdata$x:000056ACo
.xdata$x:0000569D                 db 0FFh
.xdata$x:0000569E                 db 0FFh
.xdata$x:0000569F                 db 0FFh
.xdata$x:000056A0                 dd offset __unwindfunclet$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ$0
.xdata$x:000056A4 __ehfuncinfo$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ db  22h ; "
.xdata$x:000056A4                                         ; DATA XREF: __ehhandler$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ+11o
.xdata$x:000056A5                 db    5
.xdata$x:000056A6                 db  93h ; ô
.xdata$x:000056A7                 db  19h
.xdata$x:000056A8                 db    1
.xdata$x:000056A9                 db    0
.xdata$x:000056AA                 db    0
.xdata$x:000056AB                 db    0
.xdata$x:000056AC                 dd offset __unwindtable$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ
.xdata$x:000056B0                 db    0
.xdata$x:000056B1                 db    0
.xdata$x:000056B2                 db    0
.xdata$x:000056B3                 db    0
.xdata$x:000056B4                 db    0
.xdata$x:000056B5                 db    0
.xdata$x:000056B6                 db    0
.xdata$x:000056B7                 db    0
.xdata$x:000056B8                 db    0
.xdata$x:000056B9                 db    0
.xdata$x:000056BA                 db    0
.xdata$x:000056BB                 db    0
.xdata$x:000056BC                 db    0
.xdata$x:000056BD                 db    0
.xdata$x:000056BE                 db    0
.xdata$x:000056BF                 db    0
.xdata$x:000056C0                 db    0
.xdata$x:000056C1                 db    0
.xdata$x:000056C2                 db    0
.xdata$x:000056C3                 db    0
.xdata$x:000056C4                 db    1
.xdata$x:000056C5                 db    0
.xdata$x:000056C6                 db    0
.xdata$x:000056C7                 db    0
.xdata$x:000056C7 _xdata$x        ends
.xdata$x:000056C7
.text:000056C8 ; ===========================================================================
.text:000056C8
.text:000056C8 ; Segment type: Pure code
.text:000056C8 ; Segment permissions: Read/Execute
.text:000056C8 _text           segment para public 'CODE' use32
.text:000056C8                 assume cs:_text
.text:000056C8                 ;org 56C8h
.text:000056C8 ; COMDAT (pick any)
.text:000056C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000056C8
.text:000056C8 ; =============== S U B R O U T I N E =======================================
.text:000056C8
.text:000056C8 ; Attributes: bp-based frame
.text:000056C8
.text:000056C8 ; public: __thiscall CObjectVector<class CMyComPtr<struct ISequentialInStream>>::~CObjectVector<class CMyComPtr<struct ISequentialInStream>>(void)
.text:000056C8                 public ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
.text:000056C8 ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ proc near
.text:000056C8                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1054p
.text:000056C8                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1194p ...
.text:000056C8
.text:000056C8 var_20          = dword ptr -20h
.text:000056C8 var_1C          = dword ptr -1Ch
.text:000056C8 var_18          = dword ptr -18h
.text:000056C8 var_14          = dword ptr -14h
.text:000056C8 var_10          = dword ptr -10h
.text:000056C8 var_C           = dword ptr -0Ch
.text:000056C8 var_4           = dword ptr -4
.text:000056C8
.text:000056C8                 push    ebp
.text:000056C9                 mov     ebp, esp
.text:000056CB                 push    0FFFFFFFFh
.text:000056CD                 push    offset __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
.text:000056D2                 mov     eax, large fs:0
.text:000056D8                 push    eax
.text:000056D9                 sub     esp, 14h
.text:000056DC                 mov     eax, 0CCCCCCCCh
.text:000056E1                 mov     [ebp+var_20], eax
.text:000056E4                 mov     [ebp+var_1C], eax
.text:000056E7                 mov     [ebp+var_18], eax
.text:000056EA                 mov     [ebp+var_14], eax
.text:000056ED                 mov     [ebp+var_10], eax
.text:000056F0                 mov     eax, dword ptr ds:___security_cookie
.text:000056F5                 xor     eax, ebp
.text:000056F7                 push    eax
.text:000056F8                 lea     eax, [ebp+var_C]
.text:000056FB                 mov     large fs:0, eax
.text:00005701                 mov     [ebp+var_10], ecx
.text:00005704                 mov     [ebp+var_4], 0
.text:0000570B                 mov     ecx, [ebp+var_10]
.text:0000570E                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005713                 mov     [ebp+var_14], eax
.text:00005716
.text:00005716 loc_5716:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void):loc_5758j
.text:00005716                 cmp     [ebp+var_14], 0
.text:0000571A                 jz      short loc_575A
.text:0000571C                 mov     eax, [ebp+var_14]
.text:0000571F                 sub     eax, 1
.text:00005722                 mov     [ebp+var_14], eax
.text:00005725                 mov     ecx, [ebp+var_14]
.text:00005728                 push    ecx
.text:00005729                 mov     ecx, [ebp+var_10]
.text:0000572C                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00005731                 mov     edx, [eax]
.text:00005733                 mov     [ebp+var_1C], edx
.text:00005736                 mov     eax, [ebp+var_1C]
.text:00005739                 mov     [ebp+var_18], eax
.text:0000573C                 cmp     [ebp+var_18], 0
.text:00005740                 jz      short loc_5751
.text:00005742                 push    1
.text:00005744                 mov     ecx, [ebp+var_18]
.text:00005747                 call    ??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z ; CMyComPtr<ISequentialInStream>::`scalar deleting destructor'(uint)
.text:0000574C                 mov     [ebp+var_20], eax
.text:0000574F                 jmp     short loc_5758
.text:00005751 ; ---------------------------------------------------------------------------
.text:00005751
.text:00005751 loc_5751:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)+78j
.text:00005751                 mov     [ebp+var_20], 0
.text:00005758
.text:00005758 loc_5758:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)+87j
.text:00005758                 jmp     short loc_5716
.text:0000575A ; ---------------------------------------------------------------------------
.text:0000575A
.text:0000575A loc_575A:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)+52j
.text:0000575A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005761                 mov     ecx, [ebp+var_10]
.text:00005764                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00005769                 mov     ecx, [ebp+var_C]
.text:0000576C                 mov     large fs:0, ecx
.text:00005773                 pop     ecx
.text:00005774                 add     esp, 20h
.text:00005777                 cmp     ebp, esp
.text:00005779                 call    __RTC_CheckEsp
.text:0000577E                 mov     esp, ebp
.text:00005780                 pop     ebp
.text:00005781                 retn
.text:00005781 ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ endp
.text:00005781
.text:00005781 ; ---------------------------------------------------------------------------
.text:00005782                 align 4
.text:00005782 _text           ends
.text:00005782
.text$x:00005784 ; ===========================================================================
.text$x:00005784
.text$x:00005784 ; Segment type: Pure code
.text$x:00005784 ; Segment permissions: Read/Execute
.text$x:00005784 _text$x         segment para public 'CODE' use32
.text$x:00005784                 assume cs:_text$x
.text$x:00005784                 ;org 5784h
.text$x:00005784 ; COMDAT (pick associative to section at 56C8)
.text$x:00005784                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00005784
.text$x:00005784 ; =============== S U B R O U T I N E =======================================
.text$x:00005784
.text$x:00005784
.text$x:00005784 __unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ$0 proc near
.text$x:00005784                                         ; DATA XREF: .xdata$x:000057ACo
.text$x:00005784                 mov     ecx, [ebp-10h]
.text$x:00005787                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00005787 __unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ$0 endp
.text$x:00005787
.text$x:0000578C
.text$x:0000578C ; =============== S U B R O U T I N E =======================================
.text$x:0000578C
.text$x:0000578C
.text$x:0000578C __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ proc near
.text$x:0000578C                                         ; DATA XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)+5o
.text$x:0000578C
.text$x:0000578C arg_4           = dword ptr  8
.text$x:0000578C
.text$x:0000578C                 mov     edx, [esp+arg_4]
.text$x:00005790                 lea     eax, [edx+0Ch]
.text$x:00005793                 mov     ecx, [edx-18h]
.text$x:00005796                 xor     ecx, eax
.text$x:00005798                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000579D                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
.text$x:000057A2                 jmp     ___CxxFrameHandler3
.text$x:000057A2 __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ endp
.text$x:000057A2
.text$x:000057A2 ; ---------------------------------------------------------------------------
.text$x:000057A7                 align 4
.text$x:000057A7 _text$x         ends
.text$x:000057A7
.xdata$x:000057A8 ; ===========================================================================
.xdata$x:000057A8
.xdata$x:000057A8 ; Segment type: Pure data
.xdata$x:000057A8 ; Segment permissions: Read
.xdata$x:000057A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000057A8                 assume cs:_xdata$x
.xdata$x:000057A8                 ;org 57A8h
.xdata$x:000057A8 ; COMDAT (pick associative to section at 56C8)
.xdata$x:000057A8 __unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ db 0FFh
.xdata$x:000057A8                                         ; DATA XREF: .xdata$x:000057B8o
.xdata$x:000057A9                 db 0FFh
.xdata$x:000057AA                 db 0FFh
.xdata$x:000057AB                 db 0FFh
.xdata$x:000057AC                 dd offset __unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ$0
.xdata$x:000057B0 __ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ db  22h ; "
.xdata$x:000057B0                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ+11o
.xdata$x:000057B1                 db    5
.xdata$x:000057B2                 db  93h ; ô
.xdata$x:000057B3                 db  19h
.xdata$x:000057B4                 db    1
.xdata$x:000057B5                 db    0
.xdata$x:000057B6                 db    0
.xdata$x:000057B7                 db    0
.xdata$x:000057B8                 dd offset __unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
.xdata$x:000057BC                 db    0
.xdata$x:000057BD                 db    0
.xdata$x:000057BE                 db    0
.xdata$x:000057BF                 db    0
.xdata$x:000057C0                 db    0
.xdata$x:000057C1                 db    0
.xdata$x:000057C2                 db    0
.xdata$x:000057C3                 db    0
.xdata$x:000057C4                 db    0
.xdata$x:000057C5                 db    0
.xdata$x:000057C6                 db    0
.xdata$x:000057C7                 db    0
.xdata$x:000057C8                 db    0
.xdata$x:000057C9                 db    0
.xdata$x:000057CA                 db    0
.xdata$x:000057CB                 db    0
.xdata$x:000057CC                 db    0
.xdata$x:000057CD                 db    0
.xdata$x:000057CE                 db    0
.xdata$x:000057CF                 db    0
.xdata$x:000057D0                 db    1
.xdata$x:000057D1                 db    0
.xdata$x:000057D2                 db    0
.xdata$x:000057D3                 db    0
.xdata$x:000057D3 _xdata$x        ends
.xdata$x:000057D3
.text:000057D4 ; ===========================================================================
.text:000057D4
.text:000057D4 ; Segment type: Pure code
.text:000057D4 ; Segment permissions: Read/Execute
.text:000057D4 _text           segment para public 'CODE' use32
.text:000057D4                 assume cs:_text
.text:000057D4                 ;org 57D4h
.text:000057D4 ; COMDAT (pick any)
.text:000057D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000057D4
.text:000057D4 ; =============== S U B R O U T I N E =======================================
.text:000057D4
.text:000057D4 ; Attributes: bp-based frame
.text:000057D4
.text:000057D4 ; public: __thiscall CObjectVector<class CStreamBinder>::CObjectVector<class CStreamBinder>(void)
.text:000057D4                 public ??0?$CObjectVector@VCStreamBinder@@@@QAE@XZ
.text:000057D4 ??0?$CObjectVector@VCStreamBinder@@@@QAE@XZ proc near
.text:000057D4                                         ; CODE XREF: NCoderMixer2::CMixerMT::CMixerMT(bool)+70p
.text:000057D4
.text:000057D4 var_4           = dword ptr -4
.text:000057D4
.text:000057D4                 push    ebp
.text:000057D5                 mov     ebp, esp
.text:000057D7                 push    ecx
.text:000057D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000057DF                 mov     [ebp+var_4], ecx
.text:000057E2                 mov     ecx, [ebp+var_4]
.text:000057E5                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:000057EA                 mov     eax, [ebp+var_4]
.text:000057ED                 add     esp, 4
.text:000057F0                 cmp     ebp, esp
.text:000057F2                 call    __RTC_CheckEsp
.text:000057F7                 mov     esp, ebp
.text:000057F9                 pop     ebp
.text:000057FA                 retn
.text:000057FA ??0?$CObjectVector@VCStreamBinder@@@@QAE@XZ endp
.text:000057FA
.text:000057FA ; ---------------------------------------------------------------------------
.text:000057FB                 align 4
.text:000057FB _text           ends
.text:000057FB
.text:000057FC ; ===========================================================================
.text:000057FC
.text:000057FC ; Segment type: Pure code
.text:000057FC ; Segment permissions: Read/Execute
.text:000057FC _text           segment para public 'CODE' use32
.text:000057FC                 assume cs:_text
.text:000057FC                 ;org 57FCh
.text:000057FC ; COMDAT (pick any)
.text:000057FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000057FC
.text:000057FC ; =============== S U B R O U T I N E =======================================
.text:000057FC
.text:000057FC ; Attributes: bp-based frame
.text:000057FC
.text:000057FC ; public: __thiscall CObjectVector<class CStreamBinder>::~CObjectVector<class CStreamBinder>(void)
.text:000057FC                 public ??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ
.text:000057FC ??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ proc near
.text:000057FC                                         ; CODE XREF: __unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$1+6j
.text:000057FC                                         ; NCoderMixer2::CMixerMT::~CMixerMT(void)+49p ...
.text:000057FC
.text:000057FC var_20          = dword ptr -20h
.text:000057FC var_1C          = dword ptr -1Ch
.text:000057FC var_18          = dword ptr -18h
.text:000057FC var_14          = dword ptr -14h
.text:000057FC var_10          = dword ptr -10h
.text:000057FC var_C           = dword ptr -0Ch
.text:000057FC var_4           = dword ptr -4
.text:000057FC
.text:000057FC                 push    ebp
.text:000057FD                 mov     ebp, esp
.text:000057FF                 push    0FFFFFFFFh
.text:00005801                 push    offset __ehhandler$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ
.text:00005806                 mov     eax, large fs:0
.text:0000580C                 push    eax
.text:0000580D                 sub     esp, 14h
.text:00005810                 mov     eax, 0CCCCCCCCh
.text:00005815                 mov     [ebp+var_20], eax
.text:00005818                 mov     [ebp+var_1C], eax
.text:0000581B                 mov     [ebp+var_18], eax
.text:0000581E                 mov     [ebp+var_14], eax
.text:00005821                 mov     [ebp+var_10], eax
.text:00005824                 mov     eax, dword ptr ds:___security_cookie
.text:00005829                 xor     eax, ebp
.text:0000582B                 push    eax
.text:0000582C                 lea     eax, [ebp+var_C]
.text:0000582F                 mov     large fs:0, eax
.text:00005835                 mov     [ebp+var_10], ecx
.text:00005838                 mov     [ebp+var_4], 0
.text:0000583F                 mov     ecx, [ebp+var_10]
.text:00005842                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005847                 mov     [ebp+var_14], eax
.text:0000584A
.text:0000584A loc_584A:                               ; CODE XREF: CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>(void):loc_588Cj
.text:0000584A                 cmp     [ebp+var_14], 0
.text:0000584E                 jz      short loc_588E
.text:00005850                 mov     eax, [ebp+var_14]
.text:00005853                 sub     eax, 1
.text:00005856                 mov     [ebp+var_14], eax
.text:00005859                 mov     ecx, [ebp+var_14]
.text:0000585C                 push    ecx
.text:0000585D                 mov     ecx, [ebp+var_10]
.text:00005860                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00005865                 mov     edx, [eax]
.text:00005867                 mov     [ebp+var_1C], edx
.text:0000586A                 mov     eax, [ebp+var_1C]
.text:0000586D                 mov     [ebp+var_18], eax
.text:00005870                 cmp     [ebp+var_18], 0
.text:00005874                 jz      short loc_5885
.text:00005876                 push    1
.text:00005878                 mov     ecx, [ebp+var_18]
.text:0000587B                 call    ??_GCStreamBinder@@QAEPAXI@Z ; CStreamBinder::`scalar deleting destructor'(uint)
.text:00005880                 mov     [ebp+var_20], eax
.text:00005883                 jmp     short loc_588C
.text:00005885 ; ---------------------------------------------------------------------------
.text:00005885
.text:00005885 loc_5885:                               ; CODE XREF: CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>(void)+78j
.text:00005885                 mov     [ebp+var_20], 0
.text:0000588C
.text:0000588C loc_588C:                               ; CODE XREF: CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>(void)+87j
.text:0000588C                 jmp     short loc_584A
.text:0000588E ; ---------------------------------------------------------------------------
.text:0000588E
.text:0000588E loc_588E:                               ; CODE XREF: CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>(void)+52j
.text:0000588E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005895                 mov     ecx, [ebp+var_10]
.text:00005898                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000589D                 mov     ecx, [ebp+var_C]
.text:000058A0                 mov     large fs:0, ecx
.text:000058A7                 pop     ecx
.text:000058A8                 add     esp, 20h
.text:000058AB                 cmp     ebp, esp
.text:000058AD                 call    __RTC_CheckEsp
.text:000058B2                 mov     esp, ebp
.text:000058B4                 pop     ebp
.text:000058B5                 retn
.text:000058B5 ??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ endp
.text:000058B5
.text:000058B5 ; ---------------------------------------------------------------------------
.text:000058B6                 align 4
.text:000058B6 _text           ends
.text:000058B6
.text$x:000058B8 ; ===========================================================================
.text$x:000058B8
.text$x:000058B8 ; Segment type: Pure code
.text$x:000058B8 ; Segment permissions: Read/Execute
.text$x:000058B8 _text$x         segment para public 'CODE' use32
.text$x:000058B8                 assume cs:_text$x
.text$x:000058B8                 ;org 58B8h
.text$x:000058B8 ; COMDAT (pick associative to section at 57FC)
.text$x:000058B8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000058B8
.text$x:000058B8 ; =============== S U B R O U T I N E =======================================
.text$x:000058B8
.text$x:000058B8
.text$x:000058B8 __unwindfunclet$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ$0 proc near
.text$x:000058B8                                         ; DATA XREF: .xdata$x:000058E0o
.text$x:000058B8                 mov     ecx, [ebp-10h]
.text$x:000058BB                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:000058BB __unwindfunclet$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ$0 endp
.text$x:000058BB
.text$x:000058C0
.text$x:000058C0 ; =============== S U B R O U T I N E =======================================
.text$x:000058C0
.text$x:000058C0
.text$x:000058C0 __ehhandler$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ proc near
.text$x:000058C0                                         ; DATA XREF: CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>(void)+5o
.text$x:000058C0
.text$x:000058C0 arg_4           = dword ptr  8
.text$x:000058C0
.text$x:000058C0                 mov     edx, [esp+arg_4]
.text$x:000058C4                 lea     eax, [edx+0Ch]
.text$x:000058C7                 mov     ecx, [edx-18h]
.text$x:000058CA                 xor     ecx, eax
.text$x:000058CC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000058D1                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ
.text$x:000058D6                 jmp     ___CxxFrameHandler3
.text$x:000058D6 __ehhandler$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ endp
.text$x:000058D6
.text$x:000058D6 ; ---------------------------------------------------------------------------
.text$x:000058DB                 align 4
.text$x:000058DB _text$x         ends
.text$x:000058DB
.xdata$x:000058DC ; ===========================================================================
.xdata$x:000058DC
.xdata$x:000058DC ; Segment type: Pure data
.xdata$x:000058DC ; Segment permissions: Read
.xdata$x:000058DC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000058DC                 assume cs:_xdata$x
.xdata$x:000058DC                 ;org 58DCh
.xdata$x:000058DC ; COMDAT (pick associative to section at 57FC)
.xdata$x:000058DC __unwindtable$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ db 0FFh
.xdata$x:000058DC                                         ; DATA XREF: .xdata$x:000058ECo
.xdata$x:000058DD                 db 0FFh
.xdata$x:000058DE                 db 0FFh
.xdata$x:000058DF                 db 0FFh
.xdata$x:000058E0                 dd offset __unwindfunclet$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ$0
.xdata$x:000058E4 __ehfuncinfo$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ db  22h ; "
.xdata$x:000058E4                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ+11o
.xdata$x:000058E5                 db    5
.xdata$x:000058E6                 db  93h ; ô
.xdata$x:000058E7                 db  19h
.xdata$x:000058E8                 db    1
.xdata$x:000058E9                 db    0
.xdata$x:000058EA                 db    0
.xdata$x:000058EB                 db    0
.xdata$x:000058EC                 dd offset __unwindtable$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ
.xdata$x:000058F0                 db    0
.xdata$x:000058F1                 db    0
.xdata$x:000058F2                 db    0
.xdata$x:000058F3                 db    0
.xdata$x:000058F4                 db    0
.xdata$x:000058F5                 db    0
.xdata$x:000058F6                 db    0
.xdata$x:000058F7                 db    0
.xdata$x:000058F8                 db    0
.xdata$x:000058F9                 db    0
.xdata$x:000058FA                 db    0
.xdata$x:000058FB                 db    0
.xdata$x:000058FC                 db    0
.xdata$x:000058FD                 db    0
.xdata$x:000058FE                 db    0
.xdata$x:000058FF                 db    0
.xdata$x:00005900                 db    0
.xdata$x:00005901                 db    0
.xdata$x:00005902                 db    0
.xdata$x:00005903                 db    0
.xdata$x:00005904                 db    1
.xdata$x:00005905                 db    0
.xdata$x:00005906                 db    0
.xdata$x:00005907                 db    0
.xdata$x:00005907 _xdata$x        ends
.xdata$x:00005907
.text:00005908 ; ===========================================================================
.text:00005908
.text:00005908 ; Segment type: Pure code
.text:00005908 ; Segment permissions: Read/Execute
.text:00005908 _text           segment para public 'CODE' use32
.text:00005908                 assume cs:_text
.text:00005908                 ;org 5908h
.text:00005908 ; COMDAT (pick any)
.text:00005908                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005908
.text:00005908 ; =============== S U B R O U T I N E =======================================
.text:00005908
.text:00005908 ; Attributes: bp-based frame
.text:00005908
.text:00005908 ; public: __thiscall CObjectVector<class NCoderMixer2::CCoderMT>::CObjectVector<class NCoderMixer2::CCoderMT>(void)
.text:00005908                 public ??0?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ
.text:00005908 ??0?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ proc near
.text:00005908                                         ; CODE XREF: NCoderMixer2::CMixerMT::CMixerMT(bool)+7Fp
.text:00005908
.text:00005908 var_4           = dword ptr -4
.text:00005908
.text:00005908                 push    ebp
.text:00005909                 mov     ebp, esp
.text:0000590B                 push    ecx
.text:0000590C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005913                 mov     [ebp+var_4], ecx
.text:00005916                 mov     ecx, [ebp+var_4]
.text:00005919                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:0000591E                 mov     eax, [ebp+var_4]
.text:00005921                 add     esp, 4
.text:00005924                 cmp     ebp, esp
.text:00005926                 call    __RTC_CheckEsp
.text:0000592B                 mov     esp, ebp
.text:0000592D                 pop     ebp
.text:0000592E                 retn
.text:0000592E ??0?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ endp
.text:0000592E
.text:0000592E ; ---------------------------------------------------------------------------
.text:0000592F                 align 10h
.text:0000592F _text           ends
.text:0000592F
.text:00005930 ; ===========================================================================
.text:00005930
.text:00005930 ; Segment type: Pure code
.text:00005930 ; Segment permissions: Read/Execute
.text:00005930 _text           segment para public 'CODE' use32
.text:00005930                 assume cs:_text
.text:00005930                 ;org 5930h
.text:00005930 ; COMDAT (pick any)
.text:00005930                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005930
.text:00005930 ; =============== S U B R O U T I N E =======================================
.text:00005930
.text:00005930 ; Attributes: bp-based frame
.text:00005930
.text:00005930 ; public: class NCoderMixer2::CCoderMT & __thiscall CObjectVector<class NCoderMixer2::CCoderMT>::operator[](unsigned int)
.text:00005930                 public ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z
.text:00005930 ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z proc near
.text:00005930                                         ; CODE XREF: NCoderMixer2::CMixerMT::SetCoderInfo(uint,unsigned __int64 const *,unsigned __int64 const * const *)+20p
.text:00005930
.text:00005930 var_4           = dword ptr -4
.text:00005930 arg_0           = dword ptr  8
.text:00005930
.text:00005930                 push    ebp
.text:00005931                 mov     ebp, esp
.text:00005933                 push    ecx
.text:00005934                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000593B                 mov     [ebp+var_4], ecx
.text:0000593E                 mov     eax, [ebp+arg_0]
.text:00005941                 push    eax
.text:00005942                 mov     ecx, [ebp+var_4]
.text:00005945                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000594A                 mov     eax, [eax]
.text:0000594C                 add     esp, 4
.text:0000594F                 cmp     ebp, esp
.text:00005951                 call    __RTC_CheckEsp
.text:00005956                 mov     esp, ebp
.text:00005958                 pop     ebp
.text:00005959                 retn    4
.text:00005959 ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z endp
.text:00005959
.text:00005959 _text           ends
.text:00005959
.text:0000595C ; ===========================================================================
.text:0000595C
.text:0000595C ; Segment type: Pure code
.text:0000595C ; Segment permissions: Read/Execute
.text:0000595C _text           segment para public 'CODE' use32
.text:0000595C                 assume cs:_text
.text:0000595C                 ;org 595Ch
.text:0000595C ; COMDAT (pick any)
.text:0000595C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000595C
.text:0000595C ; =============== S U B R O U T I N E =======================================
.text:0000595C
.text:0000595C ; Attributes: bp-based frame
.text:0000595C
.text:0000595C ; public: __thiscall CObjectVector<class NCoderMixer2::CCoderMT>::~CObjectVector<class NCoderMixer2::CCoderMT>(void)
.text:0000595C                 public ??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ
.text:0000595C ??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ proc near
.text:0000595C                                         ; CODE XREF: NCoderMixer2::CMixerMT::~CMixerMT(void)+3Ap
.text:0000595C
.text:0000595C var_20          = dword ptr -20h
.text:0000595C var_1C          = dword ptr -1Ch
.text:0000595C var_18          = dword ptr -18h
.text:0000595C var_14          = dword ptr -14h
.text:0000595C var_10          = dword ptr -10h
.text:0000595C var_C           = dword ptr -0Ch
.text:0000595C var_4           = dword ptr -4
.text:0000595C
.text:0000595C                 push    ebp
.text:0000595D                 mov     ebp, esp
.text:0000595F                 push    0FFFFFFFFh
.text:00005961                 push    offset __ehhandler$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ
.text:00005966                 mov     eax, large fs:0
.text:0000596C                 push    eax
.text:0000596D                 sub     esp, 14h
.text:00005970                 mov     eax, 0CCCCCCCCh
.text:00005975                 mov     [ebp+var_20], eax
.text:00005978                 mov     [ebp+var_1C], eax
.text:0000597B                 mov     [ebp+var_18], eax
.text:0000597E                 mov     [ebp+var_14], eax
.text:00005981                 mov     [ebp+var_10], eax
.text:00005984                 mov     eax, dword ptr ds:___security_cookie
.text:00005989                 xor     eax, ebp
.text:0000598B                 push    eax
.text:0000598C                 lea     eax, [ebp+var_C]
.text:0000598F                 mov     large fs:0, eax
.text:00005995                 mov     [ebp+var_10], ecx
.text:00005998                 mov     [ebp+var_4], 0
.text:0000599F                 mov     ecx, [ebp+var_10]
.text:000059A2                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000059A7                 mov     [ebp+var_14], eax
.text:000059AA
.text:000059AA loc_59AA:                               ; CODE XREF: CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>(void):loc_59ECj
.text:000059AA                 cmp     [ebp+var_14], 0
.text:000059AE                 jz      short loc_59EE
.text:000059B0                 mov     eax, [ebp+var_14]
.text:000059B3                 sub     eax, 1
.text:000059B6                 mov     [ebp+var_14], eax
.text:000059B9                 mov     ecx, [ebp+var_14]
.text:000059BC                 push    ecx
.text:000059BD                 mov     ecx, [ebp+var_10]
.text:000059C0                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000059C5                 mov     edx, [eax]
.text:000059C7                 mov     [ebp+var_1C], edx
.text:000059CA                 mov     eax, [ebp+var_1C]
.text:000059CD                 mov     [ebp+var_18], eax
.text:000059D0                 cmp     [ebp+var_18], 0
.text:000059D4                 jz      short loc_59E5
.text:000059D6                 push    1
.text:000059D8                 mov     ecx, [ebp+var_18]
.text:000059DB                 call    ??_GCCoderMT@NCoderMixer2@@QAEPAXI@Z ; NCoderMixer2::CCoderMT::`scalar deleting destructor'(uint)
.text:000059E0                 mov     [ebp+var_20], eax
.text:000059E3                 jmp     short loc_59EC
.text:000059E5 ; ---------------------------------------------------------------------------
.text:000059E5
.text:000059E5 loc_59E5:                               ; CODE XREF: CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>(void)+78j
.text:000059E5                 mov     [ebp+var_20], 0
.text:000059EC
.text:000059EC loc_59EC:                               ; CODE XREF: CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>(void)+87j
.text:000059EC                 jmp     short loc_59AA
.text:000059EE ; ---------------------------------------------------------------------------
.text:000059EE
.text:000059EE loc_59EE:                               ; CODE XREF: CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>(void)+52j
.text:000059EE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000059F5                 mov     ecx, [ebp+var_10]
.text:000059F8                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000059FD                 mov     ecx, [ebp+var_C]
.text:00005A00                 mov     large fs:0, ecx
.text:00005A07                 pop     ecx
.text:00005A08                 add     esp, 20h
.text:00005A0B                 cmp     ebp, esp
.text:00005A0D                 call    __RTC_CheckEsp
.text:00005A12                 mov     esp, ebp
.text:00005A14                 pop     ebp
.text:00005A15                 retn
.text:00005A15 ??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ endp
.text:00005A15
.text:00005A15 ; ---------------------------------------------------------------------------
.text:00005A16                 align 4
.text:00005A16 _text           ends
.text:00005A16
.text$x:00005A18 ; ===========================================================================
.text$x:00005A18
.text$x:00005A18 ; Segment type: Pure code
.text$x:00005A18 ; Segment permissions: Read/Execute
.text$x:00005A18 _text$x         segment para public 'CODE' use32
.text$x:00005A18                 assume cs:_text$x
.text$x:00005A18                 ;org 5A18h
.text$x:00005A18 ; COMDAT (pick associative to section at 595C)
.text$x:00005A18                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00005A18
.text$x:00005A18 ; =============== S U B R O U T I N E =======================================
.text$x:00005A18
.text$x:00005A18
.text$x:00005A18 __unwindfunclet$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ$0 proc near
.text$x:00005A18                                         ; DATA XREF: .xdata$x:00005A40o
.text$x:00005A18                 mov     ecx, [ebp-10h]
.text$x:00005A1B                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00005A1B __unwindfunclet$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ$0 endp
.text$x:00005A1B
.text$x:00005A20
.text$x:00005A20 ; =============== S U B R O U T I N E =======================================
.text$x:00005A20
.text$x:00005A20
.text$x:00005A20 __ehhandler$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ proc near
.text$x:00005A20                                         ; DATA XREF: CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>(void)+5o
.text$x:00005A20
.text$x:00005A20 arg_4           = dword ptr  8
.text$x:00005A20
.text$x:00005A20                 mov     edx, [esp+arg_4]
.text$x:00005A24                 lea     eax, [edx+0Ch]
.text$x:00005A27                 mov     ecx, [edx-18h]
.text$x:00005A2A                 xor     ecx, eax
.text$x:00005A2C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005A31                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ
.text$x:00005A36                 jmp     ___CxxFrameHandler3
.text$x:00005A36 __ehhandler$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ endp
.text$x:00005A36
.text$x:00005A36 ; ---------------------------------------------------------------------------
.text$x:00005A3B                 align 4
.text$x:00005A3B _text$x         ends
.text$x:00005A3B
.xdata$x:00005A3C ; ===========================================================================
.xdata$x:00005A3C
.xdata$x:00005A3C ; Segment type: Pure data
.xdata$x:00005A3C ; Segment permissions: Read
.xdata$x:00005A3C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005A3C                 assume cs:_xdata$x
.xdata$x:00005A3C                 ;org 5A3Ch
.xdata$x:00005A3C ; COMDAT (pick associative to section at 595C)
.xdata$x:00005A3C __unwindtable$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ db 0FFh
.xdata$x:00005A3C                                         ; DATA XREF: .xdata$x:00005A4Co
.xdata$x:00005A3D                 db 0FFh
.xdata$x:00005A3E                 db 0FFh
.xdata$x:00005A3F                 db 0FFh
.xdata$x:00005A40                 dd offset __unwindfunclet$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ$0
.xdata$x:00005A44 __ehfuncinfo$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ db  22h ; "
.xdata$x:00005A44                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ+11o
.xdata$x:00005A45                 db    5
.xdata$x:00005A46                 db  93h ; ô
.xdata$x:00005A47                 db  19h
.xdata$x:00005A48                 db    1
.xdata$x:00005A49                 db    0
.xdata$x:00005A4A                 db    0
.xdata$x:00005A4B                 db    0
.xdata$x:00005A4C                 dd offset __unwindtable$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ
.xdata$x:00005A50                 db    0
.xdata$x:00005A51                 db    0
.xdata$x:00005A52                 db    0
.xdata$x:00005A53                 db    0
.xdata$x:00005A54                 db    0
.xdata$x:00005A55                 db    0
.xdata$x:00005A56                 db    0
.xdata$x:00005A57                 db    0
.xdata$x:00005A58                 db    0
.xdata$x:00005A59                 db    0
.xdata$x:00005A5A                 db    0
.xdata$x:00005A5B                 db    0
.xdata$x:00005A5C                 db    0
.xdata$x:00005A5D                 db    0
.xdata$x:00005A5E                 db    0
.xdata$x:00005A5F                 db    0
.xdata$x:00005A60                 db    0
.xdata$x:00005A61                 db    0
.xdata$x:00005A62                 db    0
.xdata$x:00005A63                 db    0
.xdata$x:00005A64                 db    1
.xdata$x:00005A65                 db    0
.xdata$x:00005A66                 db    0
.xdata$x:00005A67                 db    0
.xdata$x:00005A67 _xdata$x        ends
.xdata$x:00005A67
.text:00005A68 ; ===========================================================================
.text:00005A68
.text:00005A68 ; Segment type: Pure code
.text:00005A68 ; Segment permissions: Read/Execute
.text:00005A68 _text           segment para public 'CODE' use32
.text:00005A68                 assume cs:_text
.text:00005A68                 ;org 5A68h
.text:00005A68 ; COMDAT (pick any)
.text:00005A68                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005A68
.text:00005A68 ; =============== S U B R O U T I N E =======================================
.text:00005A68
.text:00005A68 ; Attributes: bp-based frame
.text:00005A68
.text:00005A68 ; public: __thiscall CObjArray2<struct NArchive::N7z::CCoderInfo>::CObjArray2<struct NArchive::N7z::CCoderInfo>(void)
.text:00005A68                 public ??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ
.text:00005A68 ??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ proc near
.text:00005A68                                         ; CODE XREF: NArchive::N7z::CFolder::CFolder(void)+30p
.text:00005A68
.text:00005A68 var_4           = dword ptr -4
.text:00005A68
.text:00005A68                 push    ebp
.text:00005A69                 mov     ebp, esp
.text:00005A6B                 push    ecx
.text:00005A6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005A73                 mov     [ebp+var_4], ecx
.text:00005A76                 mov     eax, [ebp+var_4]
.text:00005A79                 mov     dword ptr [eax], 0
.text:00005A7F                 mov     ecx, [ebp+var_4]
.text:00005A82                 mov     dword ptr [ecx+4], 0
.text:00005A89                 mov     eax, [ebp+var_4]
.text:00005A8C                 mov     esp, ebp
.text:00005A8E                 pop     ebp
.text:00005A8F                 retn
.text:00005A8F ??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ endp
.text:00005A8F
.text:00005A8F _text           ends
.text:00005A8F
.text:00005A90 ; ===========================================================================
.text:00005A90
.text:00005A90 ; Segment type: Pure code
.text:00005A90 ; Segment permissions: Read/Execute
.text:00005A90 _text           segment para public 'CODE' use32
.text:00005A90                 assume cs:_text
.text:00005A90                 ;org 5A90h
.text:00005A90 ; COMDAT (pick any)
.text:00005A90                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005A90
.text:00005A90 ; =============== S U B R O U T I N E =======================================
.text:00005A90
.text:00005A90 ; Attributes: bp-based frame
.text:00005A90
.text:00005A90 ; public: __thiscall CObjArray2<struct NArchive::N7z::CCoderInfo>::~CObjArray2<struct NArchive::N7z::CCoderInfo>(void)
.text:00005A90                 public ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ
.text:00005A90 ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ proc near
.text:00005A90                                         ; CODE XREF: __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$0+3j
.text:00005A90                                         ; NArchive::N7z::CFolder::~CFolder(void)+58p ...
.text:00005A90
.text:00005A90 var_10          = dword ptr -10h
.text:00005A90 var_C           = dword ptr -0Ch
.text:00005A90 var_8           = dword ptr -8
.text:00005A90 var_4           = dword ptr -4
.text:00005A90
.text:00005A90                 push    ebp
.text:00005A91                 mov     ebp, esp
.text:00005A93                 sub     esp, 10h
.text:00005A96                 mov     eax, 0CCCCCCCCh
.text:00005A9B                 mov     [ebp+var_10], eax
.text:00005A9E                 mov     [ebp+var_C], eax
.text:00005AA1                 mov     [ebp+var_8], eax
.text:00005AA4                 mov     [ebp+var_4], eax
.text:00005AA7                 mov     [ebp+var_4], ecx
.text:00005AAA                 mov     eax, [ebp+var_4]
.text:00005AAD                 mov     ecx, [eax]
.text:00005AAF                 mov     [ebp+var_C], ecx
.text:00005AB2                 mov     edx, [ebp+var_C]
.text:00005AB5                 mov     [ebp+var_8], edx
.text:00005AB8                 cmp     [ebp+var_8], 0
.text:00005ABC                 jz      short loc_5ACD
.text:00005ABE                 push    3
.text:00005AC0                 mov     ecx, [ebp+var_8]
.text:00005AC3                 call    ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)
.text:00005AC8                 mov     [ebp+var_10], eax
.text:00005ACB                 jmp     short loc_5AD4
.text:00005ACD ; ---------------------------------------------------------------------------
.text:00005ACD
.text:00005ACD loc_5ACD:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)+2Cj
.text:00005ACD                 mov     [ebp+var_10], 0
.text:00005AD4
.text:00005AD4 loc_5AD4:                               ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)+3Bj
.text:00005AD4                 add     esp, 10h
.text:00005AD7                 cmp     ebp, esp
.text:00005AD9                 call    __RTC_CheckEsp
.text:00005ADE                 mov     esp, ebp
.text:00005AE0                 pop     ebp
.text:00005AE1                 retn
.text:00005AE1 ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ endp
.text:00005AE1
.text:00005AE1 ; ---------------------------------------------------------------------------
.text:00005AE2                 align 4
.text:00005AE2 _text           ends
.text:00005AE2
.text:00005AE4 ; ===========================================================================
.text:00005AE4
.text:00005AE4 ; Segment type: Pure code
.text:00005AE4 ; Segment permissions: Read/Execute
.text:00005AE4 _text           segment para public 'CODE' use32
.text:00005AE4                 assume cs:_text
.text:00005AE4                 ;org 5AE4h
.text:00005AE4 ; COMDAT (pick any)
.text:00005AE4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005AE4
.text:00005AE4 ; =============== S U B R O U T I N E =======================================
.text:00005AE4
.text:00005AE4 ; Attributes: bp-based frame
.text:00005AE4
.text:00005AE4 ; public: __thiscall CObjArray2<struct NArchive::N7z::CCoderInfo>::operator struct NArchive::N7z::CCoderInfo *(void)
.text:00005AE4                 public ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ
.text:00005AE4 ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ proc near
.text:00005AE4                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+421p
.text:00005AE4                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+641p
.text:00005AE4
.text:00005AE4 var_4           = dword ptr -4
.text:00005AE4
.text:00005AE4                 push    ebp
.text:00005AE5                 mov     ebp, esp
.text:00005AE7                 push    ecx
.text:00005AE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005AEF                 mov     [ebp+var_4], ecx
.text:00005AF2                 mov     eax, [ebp+var_4]
.text:00005AF5                 mov     eax, [eax]
.text:00005AF7                 mov     esp, ebp
.text:00005AF9                 pop     ebp
.text:00005AFA                 retn
.text:00005AFA ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ endp
.text:00005AFA
.text:00005AFA ; ---------------------------------------------------------------------------
.text:00005AFB                 align 4
.text:00005AFB _text           ends
.text:00005AFB
.text:00005AFC ; ===========================================================================
.text:00005AFC
.text:00005AFC ; Segment type: Pure code
.text:00005AFC ; Segment permissions: Read/Execute
.text:00005AFC _text           segment para public 'CODE' use32
.text:00005AFC                 assume cs:_text
.text:00005AFC                 ;org 5AFCh
.text:00005AFC ; COMDAT (pick any)
.text:00005AFC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005AFC
.text:00005AFC ; =============== S U B R O U T I N E =======================================
.text:00005AFC
.text:00005AFC ; Attributes: bp-based frame
.text:00005AFC
.text:00005AFC ; public: __thiscall CObjArray2<struct NArchive::N7z::CCoderInfo>::operator struct NArchive::N7z::CCoderInfo const *(void)const
.text:00005AFC                 public ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ
.text:00005AFC ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ proc near
.text:00005AFC                                         ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+DEp
.text:00005AFC
.text:00005AFC var_4           = dword ptr -4
.text:00005AFC
.text:00005AFC                 push    ebp
.text:00005AFD                 mov     ebp, esp
.text:00005AFF                 push    ecx
.text:00005B00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B07                 mov     [ebp+var_4], ecx
.text:00005B0A                 mov     eax, [ebp+var_4]
.text:00005B0D                 mov     eax, [eax]
.text:00005B0F                 mov     esp, ebp
.text:00005B11                 pop     ebp
.text:00005B12                 retn
.text:00005B12 ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ endp
.text:00005B12
.text:00005B12 ; ---------------------------------------------------------------------------
.text:00005B13                 align 4
.text:00005B13 _text           ends
.text:00005B13
.text:00005B14 ; ===========================================================================
.text:00005B14
.text:00005B14 ; Segment type: Pure code
.text:00005B14 ; Segment permissions: Read/Execute
.text:00005B14 _text           segment para public 'CODE' use32
.text:00005B14                 assume cs:_text
.text:00005B14                 ;org 5B14h
.text:00005B14 ; COMDAT (pick any)
.text:00005B14                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005B14
.text:00005B14 ; =============== S U B R O U T I N E =======================================
.text:00005B14
.text:00005B14 ; Attributes: bp-based frame
.text:00005B14
.text:00005B14 ; public: unsigned int __thiscall CObjArray2<struct NArchive::N7z::CCoderInfo>::Size(void)const
.text:00005B14                 public ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ
.text:00005B14 ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ proc near
.text:00005B14                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+40Dp
.text:00005B14                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+62Dp ...
.text:00005B14
.text:00005B14 var_4           = dword ptr -4
.text:00005B14
.text:00005B14                 push    ebp
.text:00005B15                 mov     ebp, esp
.text:00005B17                 push    ecx
.text:00005B18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B1F                 mov     [ebp+var_4], ecx
.text:00005B22                 mov     eax, [ebp+var_4]
.text:00005B25                 mov     eax, [eax+4]
.text:00005B28                 mov     esp, ebp
.text:00005B2A                 pop     ebp
.text:00005B2B                 retn
.text:00005B2B ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ endp
.text:00005B2B
.text:00005B2B _text           ends
.text:00005B2B
.text:00005B2C ; ===========================================================================
.text:00005B2C
.text:00005B2C ; Segment type: Pure code
.text:00005B2C ; Segment permissions: Read/Execute
.text:00005B2C _text           segment para public 'CODE' use32
.text:00005B2C                 assume cs:_text
.text:00005B2C                 ;org 5B2Ch
.text:00005B2C ; COMDAT (pick any)
.text:00005B2C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005B2C
.text:00005B2C ; =============== S U B R O U T I N E =======================================
.text:00005B2C
.text:00005B2C ; Attributes: bp-based frame
.text:00005B2C
.text:00005B2C ; public: __thiscall CObjArray2<struct NArchive::N7z::CBond>::CObjArray2<struct NArchive::N7z::CBond>(void)
.text:00005B2C                 public ??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ
.text:00005B2C ??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ proc near
.text:00005B2C                                         ; CODE XREF: NArchive::N7z::CFolder::CFolder(void)+42p
.text:00005B2C
.text:00005B2C var_4           = dword ptr -4
.text:00005B2C
.text:00005B2C                 push    ebp
.text:00005B2D                 mov     ebp, esp
.text:00005B2F                 push    ecx
.text:00005B30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B37                 mov     [ebp+var_4], ecx
.text:00005B3A                 mov     eax, [ebp+var_4]
.text:00005B3D                 mov     dword ptr [eax], 0
.text:00005B43                 mov     ecx, [ebp+var_4]
.text:00005B46                 mov     dword ptr [ecx+4], 0
.text:00005B4D                 mov     eax, [ebp+var_4]
.text:00005B50                 mov     esp, ebp
.text:00005B52                 pop     ebp
.text:00005B53                 retn
.text:00005B53 ??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ endp
.text:00005B53
.text:00005B53 _text           ends
.text:00005B53
.text:00005B54 ; ===========================================================================
.text:00005B54
.text:00005B54 ; Segment type: Pure code
.text:00005B54 ; Segment permissions: Read/Execute
.text:00005B54 _text           segment para public 'CODE' use32
.text:00005B54                 assume cs:_text
.text:00005B54                 ;org 5B54h
.text:00005B54 ; COMDAT (pick any)
.text:00005B54                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005B54
.text:00005B54 ; =============== S U B R O U T I N E =======================================
.text:00005B54
.text:00005B54 ; Attributes: bp-based frame
.text:00005B54
.text:00005B54 ; public: __thiscall CObjArray2<struct NArchive::N7z::CBond>::~CObjArray2<struct NArchive::N7z::CBond>(void)
.text:00005B54                 public ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ
.text:00005B54 ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ proc near
.text:00005B54                                         ; CODE XREF: __unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$1+6j
.text:00005B54                                         ; NArchive::N7z::CFolder::~CFolder(void)+49p ...
.text:00005B54
.text:00005B54 var_8           = dword ptr -8
.text:00005B54 var_4           = dword ptr -4
.text:00005B54
.text:00005B54                 push    ebp
.text:00005B55                 mov     ebp, esp
.text:00005B57                 sub     esp, 8
.text:00005B5A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005B61                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B68                 mov     [ebp+var_4], ecx
.text:00005B6B                 mov     eax, [ebp+var_4]
.text:00005B6E                 mov     ecx, [eax]
.text:00005B70                 mov     [ebp+var_8], ecx
.text:00005B73                 mov     edx, [ebp+var_8]
.text:00005B76                 push    edx             ; void *
.text:00005B77                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005B7C                 add     esp, 4
.text:00005B7F                 add     esp, 8
.text:00005B82                 cmp     ebp, esp
.text:00005B84                 call    __RTC_CheckEsp
.text:00005B89                 mov     esp, ebp
.text:00005B8B                 pop     ebp
.text:00005B8C                 retn
.text:00005B8C ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ endp
.text:00005B8C
.text:00005B8C ; ---------------------------------------------------------------------------
.text:00005B8D                 align 10h
.text:00005B8D _text           ends
.text:00005B8D
.text:00005B90 ; ===========================================================================
.text:00005B90
.text:00005B90 ; Segment type: Pure code
.text:00005B90 ; Segment permissions: Read/Execute
.text:00005B90 _text           segment para public 'CODE' use32
.text:00005B90                 assume cs:_text
.text:00005B90                 ;org 5B90h
.text:00005B90 ; COMDAT (pick any)
.text:00005B90                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005B90
.text:00005B90 ; =============== S U B R O U T I N E =======================================
.text:00005B90
.text:00005B90 ; Attributes: bp-based frame
.text:00005B90
.text:00005B90 ; public: __thiscall CObjArray2<struct NArchive::N7z::CBond>::operator struct NArchive::N7z::CBond *(void)
.text:00005B90                 public ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ
.text:00005B90 ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ proc near
.text:00005B90                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+D7Fp
.text:00005B90
.text:00005B90 var_4           = dword ptr -4
.text:00005B90
.text:00005B90                 push    ebp
.text:00005B91                 mov     ebp, esp
.text:00005B93                 push    ecx
.text:00005B94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B9B                 mov     [ebp+var_4], ecx
.text:00005B9E                 mov     eax, [ebp+var_4]
.text:00005BA1                 mov     eax, [eax]
.text:00005BA3                 mov     esp, ebp
.text:00005BA5                 pop     ebp
.text:00005BA6                 retn
.text:00005BA6 ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ endp
.text:00005BA6
.text:00005BA6 ; ---------------------------------------------------------------------------
.text:00005BA7                 align 4
.text:00005BA7 _text           ends
.text:00005BA7
.text:00005BA8 ; ===========================================================================
.text:00005BA8
.text:00005BA8 ; Segment type: Pure code
.text:00005BA8 ; Segment permissions: Read/Execute
.text:00005BA8 _text           segment para public 'CODE' use32
.text:00005BA8                 assume cs:_text
.text:00005BA8                 ;org 5BA8h
.text:00005BA8 ; COMDAT (pick any)
.text:00005BA8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005BA8
.text:00005BA8 ; =============== S U B R O U T I N E =======================================
.text:00005BA8
.text:00005BA8 ; Attributes: bp-based frame
.text:00005BA8
.text:00005BA8 ; public: __thiscall CObjArray2<struct NArchive::N7z::CBond>::operator struct NArchive::N7z::CBond const *(void)const
.text:00005BA8                 public ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ
.text:00005BA8 ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ proc near
.text:00005BA8                                         ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+71p
.text:00005BA8                                         ; NArchive::N7z::CFolder::FindBond_for_PackStream(uint)+3Fp
.text:00005BA8
.text:00005BA8 var_4           = dword ptr -4
.text:00005BA8
.text:00005BA8                 push    ebp
.text:00005BA9                 mov     ebp, esp
.text:00005BAB                 push    ecx
.text:00005BAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005BB3                 mov     [ebp+var_4], ecx
.text:00005BB6                 mov     eax, [ebp+var_4]
.text:00005BB9                 mov     eax, [eax]
.text:00005BBB                 mov     esp, ebp
.text:00005BBD                 pop     ebp
.text:00005BBE                 retn
.text:00005BBE ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ endp
.text:00005BBE
.text:00005BBE ; ---------------------------------------------------------------------------
.text:00005BBF                 align 10h
.text:00005BBF _text           ends
.text:00005BBF
.text:00005BC0 ; ===========================================================================
.text:00005BC0
.text:00005BC0 ; Segment type: Pure code
.text:00005BC0 ; Segment permissions: Read/Execute
.text:00005BC0 _text           segment para public 'CODE' use32
.text:00005BC0                 assume cs:_text
.text:00005BC0                 ;org 5BC0h
.text:00005BC0 ; COMDAT (pick any)
.text:00005BC0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005BC0
.text:00005BC0 ; =============== S U B R O U T I N E =======================================
.text:00005BC0
.text:00005BC0 ; Attributes: bp-based frame
.text:00005BC0
.text:00005BC0 ; public: unsigned int __thiscall CObjArray2<struct NArchive::N7z::CBond>::Size(void)const
.text:00005BC0                 public ?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ
.text:00005BC0 ?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ proc near
.text:00005BC0                                         ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+26p
.text:00005BC0                                         ; NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+4Fp ...
.text:00005BC0
.text:00005BC0 var_4           = dword ptr -4
.text:00005BC0
.text:00005BC0                 push    ebp
.text:00005BC1                 mov     ebp, esp
.text:00005BC3                 push    ecx
.text:00005BC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005BCB                 mov     [ebp+var_4], ecx
.text:00005BCE                 mov     eax, [ebp+var_4]
.text:00005BD1                 mov     eax, [eax+4]
.text:00005BD4                 mov     esp, ebp
.text:00005BD6                 pop     ebp
.text:00005BD7                 retn
.text:00005BD7 ?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ endp
.text:00005BD7
.text:00005BD7 _text           ends
.text:00005BD7
.text:00005BD8 ; ===========================================================================
.text:00005BD8
.text:00005BD8 ; Segment type: Pure code
.text:00005BD8 ; Segment permissions: Read/Execute
.text:00005BD8 _text           segment para public 'CODE' use32
.text:00005BD8                 assume cs:_text
.text:00005BD8                 ;org 5BD8h
.text:00005BD8 ; COMDAT (pick any)
.text:00005BD8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005BD8
.text:00005BD8 ; =============== S U B R O U T I N E =======================================
.text:00005BD8
.text:00005BD8 ; Attributes: bp-based frame
.text:00005BD8
.text:00005BD8 ; public: __thiscall CObjArray2<unsigned int>::CObjArray2<unsigned int>(void)
.text:00005BD8                 public ??0?$CObjArray2@I@@QAE@XZ
.text:00005BD8 ??0?$CObjArray2@I@@QAE@XZ proc near     ; CODE XREF: NArchive::N7z::CFolder::CFolder(void)+51p
.text:00005BD8
.text:00005BD8 var_4           = dword ptr -4
.text:00005BD8
.text:00005BD8                 push    ebp
.text:00005BD9                 mov     ebp, esp
.text:00005BDB                 push    ecx
.text:00005BDC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005BE3                 mov     [ebp+var_4], ecx
.text:00005BE6                 mov     eax, [ebp+var_4]
.text:00005BE9                 mov     dword ptr [eax], 0
.text:00005BEF                 mov     ecx, [ebp+var_4]
.text:00005BF2                 mov     dword ptr [ecx+4], 0
.text:00005BF9                 mov     eax, [ebp+var_4]
.text:00005BFC                 mov     esp, ebp
.text:00005BFE                 pop     ebp
.text:00005BFF                 retn
.text:00005BFF ??0?$CObjArray2@I@@QAE@XZ endp
.text:00005BFF
.text:00005BFF _text           ends
.text:00005BFF
.text:00005C00 ; ===========================================================================
.text:00005C00
.text:00005C00 ; Segment type: Pure code
.text:00005C00 ; Segment permissions: Read/Execute
.text:00005C00 _text           segment para public 'CODE' use32
.text:00005C00                 assume cs:_text
.text:00005C00                 ;org 5C00h
.text:00005C00 ; COMDAT (pick any)
.text:00005C00                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005C00
.text:00005C00 ; =============== S U B R O U T I N E =======================================
.text:00005C00
.text:00005C00 ; Attributes: bp-based frame
.text:00005C00
.text:00005C00 ; public: __thiscall CObjArray2<unsigned int>::~CObjArray2<unsigned int>(void)
.text:00005C00                 public ??1?$CObjArray2@I@@QAE@XZ
.text:00005C00 ??1?$CObjArray2@I@@QAE@XZ proc near     ; CODE XREF: NArchive::N7z::CFolder::~CFolder(void)+3Ap
.text:00005C00
.text:00005C00 var_8           = dword ptr -8
.text:00005C00 var_4           = dword ptr -4
.text:00005C00
.text:00005C00                 push    ebp
.text:00005C01                 mov     ebp, esp
.text:00005C03                 sub     esp, 8
.text:00005C06                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005C0D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C14                 mov     [ebp+var_4], ecx
.text:00005C17                 mov     eax, [ebp+var_4]
.text:00005C1A                 mov     ecx, [eax]
.text:00005C1C                 mov     [ebp+var_8], ecx
.text:00005C1F                 mov     edx, [ebp+var_8]
.text:00005C22                 push    edx             ; void *
.text:00005C23                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005C28                 add     esp, 4
.text:00005C2B                 add     esp, 8
.text:00005C2E                 cmp     ebp, esp
.text:00005C30                 call    __RTC_CheckEsp
.text:00005C35                 mov     esp, ebp
.text:00005C37                 pop     ebp
.text:00005C38                 retn
.text:00005C38 ??1?$CObjArray2@I@@QAE@XZ endp
.text:00005C38
.text:00005C38 ; ---------------------------------------------------------------------------
.text:00005C39                 align 4
.text:00005C39 _text           ends
.text:00005C39
.text:00005C3C ; ===========================================================================
.text:00005C3C
.text:00005C3C ; Segment type: Pure code
.text:00005C3C ; Segment permissions: Read/Execute
.text:00005C3C _text           segment para public 'CODE' use32
.text:00005C3C                 assume cs:_text
.text:00005C3C                 ;org 5C3Ch
.text:00005C3C ; COMDAT (pick any)
.text:00005C3C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005C3C
.text:00005C3C ; =============== S U B R O U T I N E =======================================
.text:00005C3C
.text:00005C3C ; Attributes: bp-based frame
.text:00005C3C
.text:00005C3C ; public: __thiscall CObjArray2<unsigned int>::operator unsigned int const *(void)const
.text:00005C3C                 public ??B?$CObjArray2@I@@QBEPBIXZ
.text:00005C3C ??B?$CObjArray2@I@@QBEPBIXZ proc near   ; CODE XREF: NArchive::N7z::Convert_FolderInfo_to_BindInfo(NArchive::N7z::CFolderEx const &,NArchive::N7z::CBindInfoEx &)+16Bp
.text:00005C3C                                         ; NArchive::N7z::CFolder::Find_in_PackStreams(uint)+3Fp
.text:00005C3C
.text:00005C3C var_4           = dword ptr -4
.text:00005C3C
.text:00005C3C                 push    ebp
.text:00005C3D                 mov     ebp, esp
.text:00005C3F                 push    ecx
.text:00005C40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C47                 mov     [ebp+var_4], ecx
.text:00005C4A                 mov     eax, [ebp+var_4]
.text:00005C4D                 mov     eax, [eax]
.text:00005C4F                 mov     esp, ebp
.text:00005C51                 pop     ebp
.text:00005C52                 retn
.text:00005C52 ??B?$CObjArray2@I@@QBEPBIXZ endp
.text:00005C52
.text:00005C52 ; ---------------------------------------------------------------------------
.text:00005C53                 align 4
.text:00005C53 _text           ends
.text:00005C53
.text:00005C54 ; ===========================================================================
.text:00005C54
.text:00005C54 ; Segment type: Pure code
.text:00005C54 ; Segment permissions: Read/Execute
.text:00005C54 _text           segment para public 'CODE' use32
.text:00005C54                 assume cs:_text
.text:00005C54                 ;org 5C54h
.text:00005C54 ; COMDAT (pick any)
.text:00005C54                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005C54
.text:00005C54 ; =============== S U B R O U T I N E =======================================
.text:00005C54
.text:00005C54 ; Attributes: bp-based frame
.text:00005C54
.text:00005C54 ; public: unsigned int __thiscall CObjArray2<unsigned int>::Size(void)const
.text:00005C54                 public ?Size@?$CObjArray2@I@@QBEIXZ
.text:00005C54 ?Size@?$CObjArray2@I@@QBEIXZ proc near  ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+FDFp
.text:00005C54                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+10D5p ...
.text:00005C54
.text:00005C54 var_4           = dword ptr -4
.text:00005C54
.text:00005C54                 push    ebp
.text:00005C55                 mov     ebp, esp
.text:00005C57                 push    ecx
.text:00005C58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C5F                 mov     [ebp+var_4], ecx
.text:00005C62                 mov     eax, [ebp+var_4]
.text:00005C65                 mov     eax, [eax+4]
.text:00005C68                 mov     esp, ebp
.text:00005C6A                 pop     ebp
.text:00005C6B                 retn
.text:00005C6B ?Size@?$CObjArray2@I@@QBEIXZ endp
.text:00005C6B
.text:00005C6B _text           ends
.text:00005C6B
.text:00005C6C ; ===========================================================================
.text:00005C6C
.text:00005C6C ; Segment type: Pure code
.text:00005C6C ; Segment permissions: Read/Execute
.text:00005C6C _text           segment para public 'CODE' use32
.text:00005C6C                 assume cs:_text
.text:00005C6C                 ;org 5C6Ch
.text:00005C6C ; COMDAT (pick any)
.text:00005C6C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005C6C
.text:00005C6C ; =============== S U B R O U T I N E =======================================
.text:00005C6C
.text:00005C6C ; Attributes: bp-based frame
.text:00005C6C
.text:00005C6C ; public: __thiscall CObjArray<unsigned __int64>::CObjArray<unsigned __int64>(unsigned int)
.text:00005C6C                 public ??0?$CObjArray@_K@@QAE@I@Z
.text:00005C6C ??0?$CObjArray@_K@@QAE@I@Z proc near    ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+CF6p
.text:00005C6C
.text:00005C6C var_8           = dword ptr -8
.text:00005C6C var_4           = dword ptr -4
.text:00005C6C arg_0           = dword ptr  8
.text:00005C6C
.text:00005C6C                 push    ebp
.text:00005C6D                 mov     ebp, esp
.text:00005C6F                 sub     esp, 8
.text:00005C72                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005C79                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C80                 mov     [ebp+var_4], ecx
.text:00005C83                 mov     eax, [ebp+var_4]
.text:00005C86                 mov     dword ptr [eax], 0
.text:00005C8C                 cmp     [ebp+arg_0], 0
.text:00005C90                 jz      short loc_5CB9
.text:00005C92                 xor     ecx, ecx
.text:00005C94                 mov     eax, [ebp+arg_0]
.text:00005C97                 mov     edx, 8
.text:00005C9C                 mul     edx
.text:00005C9E                 seto    cl
.text:00005CA1                 neg     ecx
.text:00005CA3                 or      ecx, eax
.text:00005CA5                 push    ecx             ; unsigned int
.text:00005CA6                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005CAB                 add     esp, 4
.text:00005CAE                 mov     [ebp+var_8], eax
.text:00005CB1                 mov     eax, [ebp+var_4]
.text:00005CB4                 mov     ecx, [ebp+var_8]
.text:00005CB7                 mov     [eax], ecx
.text:00005CB9
.text:00005CB9 loc_5CB9:                               ; CODE XREF: CObjArray<unsigned __int64>::CObjArray<unsigned __int64>(uint)+24j
.text:00005CB9                 mov     eax, [ebp+var_4]
.text:00005CBC                 add     esp, 8
.text:00005CBF                 cmp     ebp, esp
.text:00005CC1                 call    __RTC_CheckEsp
.text:00005CC6                 mov     esp, ebp
.text:00005CC8                 pop     ebp
.text:00005CC9                 retn    4
.text:00005CC9 ??0?$CObjArray@_K@@QAE@I@Z endp
.text:00005CC9
.text:00005CC9 _text           ends
.text:00005CC9
.text:00005CCC ; ===========================================================================
.text:00005CCC
.text:00005CCC ; Segment type: Pure code
.text:00005CCC ; Segment permissions: Read/Execute
.text:00005CCC _text           segment para public 'CODE' use32
.text:00005CCC                 assume cs:_text
.text:00005CCC                 ;org 5CCCh
.text:00005CCC ; COMDAT (pick any)
.text:00005CCC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005CCC
.text:00005CCC ; =============== S U B R O U T I N E =======================================
.text:00005CCC
.text:00005CCC ; Attributes: bp-based frame
.text:00005CCC
.text:00005CCC ; public: __thiscall CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>(void)
.text:00005CCC                 public ??1?$CObjArray@_K@@QAE@XZ
.text:00005CCC ??1?$CObjArray@_K@@QAE@XZ proc near     ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+DF1p
.text:00005CCC                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+F1Ep ...
.text:00005CCC
.text:00005CCC var_8           = dword ptr -8
.text:00005CCC var_4           = dword ptr -4
.text:00005CCC
.text:00005CCC                 push    ebp
.text:00005CCD                 mov     ebp, esp
.text:00005CCF                 sub     esp, 8
.text:00005CD2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005CD9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005CE0                 mov     [ebp+var_4], ecx
.text:00005CE3                 mov     eax, [ebp+var_4]
.text:00005CE6                 mov     ecx, [eax]
.text:00005CE8                 mov     [ebp+var_8], ecx
.text:00005CEB                 mov     edx, [ebp+var_8]
.text:00005CEE                 push    edx             ; void *
.text:00005CEF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005CF4                 add     esp, 4
.text:00005CF7                 add     esp, 8
.text:00005CFA                 cmp     ebp, esp
.text:00005CFC                 call    __RTC_CheckEsp
.text:00005D01                 mov     esp, ebp
.text:00005D03                 pop     ebp
.text:00005D04                 retn
.text:00005D04 ??1?$CObjArray@_K@@QAE@XZ endp
.text:00005D04
.text:00005D04 ; ---------------------------------------------------------------------------
.text:00005D05                 align 4
.text:00005D05 _text           ends
.text:00005D05
.text:00005D08 ; ===========================================================================
.text:00005D08
.text:00005D08 ; Segment type: Pure code
.text:00005D08 ; Segment permissions: Read/Execute
.text:00005D08 _text           segment para public 'CODE' use32
.text:00005D08                 assume cs:_text
.text:00005D08                 ;org 5D08h
.text:00005D08 ; COMDAT (pick any)
.text:00005D08                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005D08
.text:00005D08 ; =============== S U B R O U T I N E =======================================
.text:00005D08
.text:00005D08 ; Attributes: bp-based frame
.text:00005D08
.text:00005D08 ; public: __thiscall CObjArray<unsigned __int64>::operator unsigned __int64 *(void)
.text:00005D08                 public ??B?$CObjArray@_K@@QAEPA_KXZ
.text:00005D08 ??B?$CObjArray@_K@@QAEPA_KXZ proc near  ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+E46p
.text:00005D08                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+E5Ep
.text:00005D08
.text:00005D08 var_4           = dword ptr -4
.text:00005D08
.text:00005D08                 push    ebp
.text:00005D09                 mov     ebp, esp
.text:00005D0B                 push    ecx
.text:00005D0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D13                 mov     [ebp+var_4], ecx
.text:00005D16                 mov     eax, [ebp+var_4]
.text:00005D19                 mov     eax, [eax]
.text:00005D1B                 mov     esp, ebp
.text:00005D1D                 pop     ebp
.text:00005D1E                 retn
.text:00005D1E ??B?$CObjArray@_K@@QAEPA_KXZ endp
.text:00005D1E
.text:00005D1E ; ---------------------------------------------------------------------------
.text:00005D1F                 align 10h
.text:00005D1F _text           ends
.text:00005D1F
.text:00005D20 ; ===========================================================================
.text:00005D20
.text:00005D20 ; Segment type: Pure code
.text:00005D20 ; Segment permissions: Read/Execute
.text:00005D20 _text           segment para public 'CODE' use32
.text:00005D20                 assume cs:_text
.text:00005D20                 ;org 5D20h
.text:00005D20 ; COMDAT (pick any)
.text:00005D20                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005D20
.text:00005D20 ; =============== S U B R O U T I N E =======================================
.text:00005D20
.text:00005D20 ; Attributes: bp-based frame
.text:00005D20
.text:00005D20 ; public: __thiscall CObjArray<unsigned __int64>::operator unsigned __int64 const *(void)const
.text:00005D20                 public ??B?$CObjArray@_K@@QBEPB_KXZ
.text:00005D20 ??B?$CObjArray@_K@@QBEPB_KXZ proc near  ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+48p
.text:00005D20                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+D75p ...
.text:00005D20
.text:00005D20 var_4           = dword ptr -4
.text:00005D20
.text:00005D20                 push    ebp
.text:00005D21                 mov     ebp, esp
.text:00005D23                 push    ecx
.text:00005D24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D2B                 mov     [ebp+var_4], ecx
.text:00005D2E                 mov     eax, [ebp+var_4]
.text:00005D31                 mov     eax, [eax]
.text:00005D33                 mov     esp, ebp
.text:00005D35                 pop     ebp
.text:00005D36                 retn
.text:00005D36 ??B?$CObjArray@_K@@QBEPB_KXZ endp
.text:00005D36
.text:00005D36 ; ---------------------------------------------------------------------------
.text:00005D37                 align 4
.text:00005D37 _text           ends
.text:00005D37
.text:00005D38 ; ===========================================================================
.text:00005D38
.text:00005D38 ; Segment type: Pure code
.text:00005D38 ; Segment permissions: Read/Execute
.text:00005D38 _text           segment para public 'CODE' use32
.text:00005D38                 assume cs:_text
.text:00005D38                 ;org 5D38h
.text:00005D38 ; COMDAT (pick any)
.text:00005D38                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005D38
.text:00005D38 ; =============== S U B R O U T I N E =======================================
.text:00005D38
.text:00005D38 ; Attributes: bp-based frame
.text:00005D38
.text:00005D38 ; public: __thiscall CObjArray<unsigned int>::operator unsigned int const *(void)const
.text:00005D38                 public ??B?$CObjArray@I@@QBEPBIXZ
.text:00005D38 ??B?$CObjArray@I@@QBEPBIXZ proc near    ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+55p
.text:00005D38                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+5FEp ...
.text:00005D38
.text:00005D38 var_4           = dword ptr -4
.text:00005D38
.text:00005D38                 push    ebp
.text:00005D39                 mov     ebp, esp
.text:00005D3B                 push    ecx
.text:00005D3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D43                 mov     [ebp+var_4], ecx
.text:00005D46                 mov     eax, [ebp+var_4]
.text:00005D49                 mov     eax, [eax]
.text:00005D4B                 mov     esp, ebp
.text:00005D4D                 pop     ebp
.text:00005D4E                 retn
.text:00005D4E ??B?$CObjArray@I@@QBEPBIXZ endp
.text:00005D4E
.text:00005D4E ; ---------------------------------------------------------------------------
.text:00005D4F                 align 10h
.text:00005D4F _text           ends
.text:00005D4F
.text:00005D50 ; ===========================================================================
.text:00005D50
.text:00005D50 ; Segment type: Pure code
.text:00005D50 ; Segment permissions: Read/Execute
.text:00005D50 _text           segment para public 'CODE' use32
.text:00005D50                 assume cs:_text
.text:00005D50                 ;org 5D50h
.text:00005D50 ; COMDAT (pick any)
.text:00005D50                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005D50
.text:00005D50 ; =============== S U B R O U T I N E =======================================
.text:00005D50
.text:00005D50 ; Attributes: bp-based frame
.text:00005D50
.text:00005D50 ; public: __thiscall CObjArray<unsigned char>::operator unsigned char const *(void)const
.text:00005D50                 public ??B?$CObjArray@E@@QBEPBEXZ
.text:00005D50 ??B?$CObjArray@E@@QBEPBEXZ proc near    ; CODE XREF: NArchive::N7z::CFolders::ParseFolderEx(uint,NArchive::N7z::CFolderEx &)+24p
.text:00005D50                                         ; NArchive::N7z::CFolders::GetFolderUnpackSize(uint)+30p
.text:00005D50
.text:00005D50 var_4           = dword ptr -4
.text:00005D50
.text:00005D50                 push    ebp
.text:00005D51                 mov     ebp, esp
.text:00005D53                 push    ecx
.text:00005D54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D5B                 mov     [ebp+var_4], ecx
.text:00005D5E                 mov     eax, [ebp+var_4]
.text:00005D61                 mov     eax, [eax]
.text:00005D63                 mov     esp, ebp
.text:00005D65                 pop     ebp
.text:00005D66                 retn
.text:00005D66 ??B?$CObjArray@E@@QBEPBEXZ endp
.text:00005D66
.text:00005D66 ; ---------------------------------------------------------------------------
.text:00005D67                 align 4
.text:00005D67 _text           ends
.text:00005D67
.text:00005D68 ; ===========================================================================
.text:00005D68
.text:00005D68 ; Segment type: Pure code
.text:00005D68 ; Segment permissions: Read/Execute
.text:00005D68 _text           segment para public 'CODE' use32
.text:00005D68                 assume cs:_text
.text:00005D68                 ;org 5D68h
.text:00005D68 ; COMDAT (pick any)
.text:00005D68                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005D68
.text:00005D68 ; =============== S U B R O U T I N E =======================================
.text:00005D68
.text:00005D68 ; Attributes: bp-based frame
.text:00005D68
.text:00005D68 ; public: __thiscall CMyComPtr<struct ICompressSetDecoderProperties2>::CMyComPtr<struct ICompressSetDecoderProperties2>(void)
.text:00005D68                 public ??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ
.text:00005D68 ??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ proc near
.text:00005D68                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+68Fp
.text:00005D68
.text:00005D68 var_4           = dword ptr -4
.text:00005D68
.text:00005D68                 push    ebp
.text:00005D69                 mov     ebp, esp
.text:00005D6B                 push    ecx
.text:00005D6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D73                 mov     [ebp+var_4], ecx
.text:00005D76                 mov     eax, [ebp+var_4]
.text:00005D79                 mov     dword ptr [eax], 0
.text:00005D7F                 mov     eax, [ebp+var_4]
.text:00005D82                 mov     esp, ebp
.text:00005D84                 pop     ebp
.text:00005D85                 retn
.text:00005D85 ??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ endp
.text:00005D85
.text:00005D85 ; ---------------------------------------------------------------------------
.text:00005D86                 align 4
.text:00005D86 _text           ends
.text:00005D86
.text:00005D88 ; ===========================================================================
.text:00005D88
.text:00005D88 ; Segment type: Pure code
.text:00005D88 ; Segment permissions: Read/Execute
.text:00005D88 _text           segment para public 'CODE' use32
.text:00005D88                 assume cs:_text
.text:00005D88                 ;org 5D88h
.text:00005D88 ; COMDAT (pick any)
.text:00005D88                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005D88
.text:00005D88 ; =============== S U B R O U T I N E =======================================
.text:00005D88
.text:00005D88 ; Attributes: bp-based frame
.text:00005D88
.text:00005D88 ; public: __thiscall CMyComPtr<struct ICompressSetDecoderProperties2>::~CMyComPtr<struct ICompressSetDecoderProperties2>(void)
.text:00005D88                 public ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ
.text:00005D88 ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ proc near
.text:00005D88                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+715p
.text:00005D88                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+7CBp ...
.text:00005D88
.text:00005D88 var_4           = dword ptr -4
.text:00005D88
.text:00005D88                 push    ebp
.text:00005D89                 mov     ebp, esp
.text:00005D8B                 push    ecx
.text:00005D8C                 push    esi
.text:00005D8D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005D94                 mov     [ebp+var_4], ecx
.text:00005D97                 mov     eax, [ebp+var_4]
.text:00005D9A                 cmp     dword ptr [eax], 0
.text:00005D9D                 jz      short loc_5DBA
.text:00005D9F                 mov     ecx, [ebp+var_4]
.text:00005DA2                 mov     edx, [ecx]
.text:00005DA4                 mov     eax, [ebp+var_4]
.text:00005DA7                 mov     ecx, [eax]
.text:00005DA9                 mov     edx, [edx]
.text:00005DAB                 mov     esi, esp
.text:00005DAD                 push    ecx
.text:00005DAE                 mov     eax, [edx+8]
.text:00005DB1                 call    eax
.text:00005DB3                 cmp     esi, esp
.text:00005DB5                 call    __RTC_CheckEsp
.text:00005DBA
.text:00005DBA loc_5DBA:                               ; CODE XREF: CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>(void)+15j
.text:00005DBA                 pop     esi
.text:00005DBB                 add     esp, 4
.text:00005DBE                 cmp     ebp, esp
.text:00005DC0                 call    __RTC_CheckEsp
.text:00005DC5                 mov     esp, ebp
.text:00005DC7                 pop     ebp
.text:00005DC8                 retn
.text:00005DC8 ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ endp
.text:00005DC8
.text:00005DC8 ; ---------------------------------------------------------------------------
.text:00005DC9                 align 4
.text:00005DC9 _text           ends
.text:00005DC9
.text:00005DCC ; ===========================================================================
.text:00005DCC
.text:00005DCC ; Segment type: Pure code
.text:00005DCC ; Segment permissions: Read/Execute
.text:00005DCC _text           segment para public 'CODE' use32
.text:00005DCC                 assume cs:_text
.text:00005DCC                 ;org 5DCCh
.text:00005DCC ; COMDAT (pick any)
.text:00005DCC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005DCC
.text:00005DCC ; =============== S U B R O U T I N E =======================================
.text:00005DCC
.text:00005DCC ; Attributes: bp-based frame
.text:00005DCC
.text:00005DCC ; public: __thiscall CMyComPtr<struct ICompressSetDecoderProperties2>::operator struct ICompressSetDecoderProperties2 *(void)const
.text:00005DCC                 public ??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ
.text:00005DCC ??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ proc near
.text:00005DCC                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+6CBp
.text:00005DCC
.text:00005DCC var_4           = dword ptr -4
.text:00005DCC
.text:00005DCC                 push    ebp
.text:00005DCD                 mov     ebp, esp
.text:00005DCF                 push    ecx
.text:00005DD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005DD7                 mov     [ebp+var_4], ecx
.text:00005DDA                 mov     eax, [ebp+var_4]
.text:00005DDD                 mov     eax, [eax]
.text:00005DDF                 mov     esp, ebp
.text:00005DE1                 pop     ebp
.text:00005DE2                 retn
.text:00005DE2 ??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ endp
.text:00005DE2
.text:00005DE2 ; ---------------------------------------------------------------------------
.text:00005DE3                 align 4
.text:00005DE3 _text           ends
.text:00005DE3
.text:00005DE4 ; ===========================================================================
.text:00005DE4
.text:00005DE4 ; Segment type: Pure code
.text:00005DE4 ; Segment permissions: Read/Execute
.text:00005DE4 _text           segment para public 'CODE' use32
.text:00005DE4                 assume cs:_text
.text:00005DE4                 ;org 5DE4h
.text:00005DE4 ; COMDAT (pick any)
.text:00005DE4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005DE4
.text:00005DE4 ; =============== S U B R O U T I N E =======================================
.text:00005DE4
.text:00005DE4 ; Attributes: bp-based frame
.text:00005DE4
.text:00005DE4 ; public: struct ICompressSetDecoderProperties2 * * __thiscall CMyComPtr<struct ICompressSetDecoderProperties2>::operator&(void)
.text:00005DE4                 public ??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ
.text:00005DE4 ??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ proc near
.text:00005DE4                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+69Ep
.text:00005DE4
.text:00005DE4 var_4           = dword ptr -4
.text:00005DE4
.text:00005DE4                 push    ebp
.text:00005DE5                 mov     ebp, esp
.text:00005DE7                 push    ecx
.text:00005DE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005DEF                 mov     [ebp+var_4], ecx
.text:00005DF2                 mov     eax, [ebp+var_4]
.text:00005DF5                 mov     esp, ebp
.text:00005DF7                 pop     ebp
.text:00005DF8                 retn
.text:00005DF8 ??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ endp
.text:00005DF8
.text:00005DF8 ; ---------------------------------------------------------------------------
.text:00005DF9                 align 4
.text:00005DF9 _text           ends
.text:00005DF9
.text:00005DFC ; ===========================================================================
.text:00005DFC
.text:00005DFC ; Segment type: Pure code
.text:00005DFC ; Segment permissions: Read/Execute
.text:00005DFC _text           segment para public 'CODE' use32
.text:00005DFC                 assume cs:_text
.text:00005DFC                 ;org 5DFCh
.text:00005DFC ; COMDAT (pick any)
.text:00005DFC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005DFC
.text:00005DFC ; =============== S U B R O U T I N E =======================================
.text:00005DFC
.text:00005DFC ; Attributes: bp-based frame
.text:00005DFC
.text:00005DFC ; public: struct ICompressSetDecoderProperties2 * __thiscall CMyComPtr<struct ICompressSetDecoderProperties2>::operator->(void)const
.text:00005DFC                 public ??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ
.text:00005DFC ??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ proc near
.text:00005DFC                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+749p
.text:00005DFC
.text:00005DFC var_4           = dword ptr -4
.text:00005DFC
.text:00005DFC                 push    ebp
.text:00005DFD                 mov     ebp, esp
.text:00005DFF                 push    ecx
.text:00005E00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005E07                 mov     [ebp+var_4], ecx
.text:00005E0A                 mov     eax, [ebp+var_4]
.text:00005E0D                 mov     eax, [eax]
.text:00005E0F                 mov     esp, ebp
.text:00005E11                 pop     ebp
.text:00005E12                 retn
.text:00005E12 ??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ endp
.text:00005E12
.text:00005E12 ; ---------------------------------------------------------------------------
.text:00005E13                 align 4
.text:00005E13 _text           ends
.text:00005E13
.text:00005E14 ; ===========================================================================
.text:00005E14
.text:00005E14 ; Segment type: Pure code
.text:00005E14 ; Segment permissions: Read/Execute
.text:00005E14 _text           segment para public 'CODE' use32
.text:00005E14                 assume cs:_text
.text:00005E14                 ;org 5E14h
.text:00005E14 ; COMDAT (pick any)
.text:00005E14                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005E14
.text:00005E14 ; =============== S U B R O U T I N E =======================================
.text:00005E14
.text:00005E14 ; Attributes: bp-based frame
.text:00005E14
.text:00005E14 ; public: __thiscall CMyComPtr<struct ICompressSetCoderMt>::CMyComPtr<struct ICompressSetCoderMt>(void)
.text:00005E14                 public ??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ
.text:00005E14 ??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ proc near
.text:00005E14                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+81Ap
.text:00005E14
.text:00005E14 var_4           = dword ptr -4
.text:00005E14
.text:00005E14                 push    ebp
.text:00005E15                 mov     ebp, esp
.text:00005E17                 push    ecx
.text:00005E18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005E1F                 mov     [ebp+var_4], ecx
.text:00005E22                 mov     eax, [ebp+var_4]
.text:00005E25                 mov     dword ptr [eax], 0
.text:00005E2B                 mov     eax, [ebp+var_4]
.text:00005E2E                 mov     esp, ebp
.text:00005E30                 pop     ebp
.text:00005E31                 retn
.text:00005E31 ??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ endp
.text:00005E31
.text:00005E31 ; ---------------------------------------------------------------------------
.text:00005E32                 align 4
.text:00005E32 _text           ends
.text:00005E32
.text:00005E34 ; ===========================================================================
.text:00005E34
.text:00005E34 ; Segment type: Pure code
.text:00005E34 ; Segment permissions: Read/Execute
.text:00005E34 _text           segment para public 'CODE' use32
.text:00005E34                 assume cs:_text
.text:00005E34                 ;org 5E34h
.text:00005E34 ; COMDAT (pick any)
.text:00005E34                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005E34
.text:00005E34 ; =============== S U B R O U T I N E =======================================
.text:00005E34
.text:00005E34 ; Attributes: bp-based frame
.text:00005E34
.text:00005E34 ; public: __thiscall CMyComPtr<struct ICompressSetCoderMt>::~CMyComPtr<struct ICompressSetCoderMt>(void)
.text:00005E34                 public ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ
.text:00005E34 ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ proc near
.text:00005E34                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+8BAp
.text:00005E34                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+8F2p ...
.text:00005E34
.text:00005E34 var_4           = dword ptr -4
.text:00005E34
.text:00005E34                 push    ebp
.text:00005E35                 mov     ebp, esp
.text:00005E37                 push    ecx
.text:00005E38                 push    esi
.text:00005E39                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005E40                 mov     [ebp+var_4], ecx
.text:00005E43                 mov     eax, [ebp+var_4]
.text:00005E46                 cmp     dword ptr [eax], 0
.text:00005E49                 jz      short loc_5E66
.text:00005E4B                 mov     ecx, [ebp+var_4]
.text:00005E4E                 mov     edx, [ecx]
.text:00005E50                 mov     eax, [ebp+var_4]
.text:00005E53                 mov     ecx, [eax]
.text:00005E55                 mov     edx, [edx]
.text:00005E57                 mov     esi, esp
.text:00005E59                 push    ecx
.text:00005E5A                 mov     eax, [edx+8]
.text:00005E5D                 call    eax
.text:00005E5F                 cmp     esi, esp
.text:00005E61                 call    __RTC_CheckEsp
.text:00005E66
.text:00005E66 loc_5E66:                               ; CODE XREF: CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>(void)+15j
.text:00005E66                 pop     esi
.text:00005E67                 add     esp, 4
.text:00005E6A                 cmp     ebp, esp
.text:00005E6C                 call    __RTC_CheckEsp
.text:00005E71                 mov     esp, ebp
.text:00005E73                 pop     ebp
.text:00005E74                 retn
.text:00005E74 ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ endp
.text:00005E74
.text:00005E74 ; ---------------------------------------------------------------------------
.text:00005E75                 align 4
.text:00005E75 _text           ends
.text:00005E75
.text:00005E78 ; ===========================================================================
.text:00005E78
.text:00005E78 ; Segment type: Pure code
.text:00005E78 ; Segment permissions: Read/Execute
.text:00005E78 _text           segment para public 'CODE' use32
.text:00005E78                 assume cs:_text
.text:00005E78                 ;org 5E78h
.text:00005E78 ; COMDAT (pick any)
.text:00005E78                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005E78
.text:00005E78 ; =============== S U B R O U T I N E =======================================
.text:00005E78
.text:00005E78 ; Attributes: bp-based frame
.text:00005E78
.text:00005E78 ; public: __thiscall CMyComPtr<struct ICompressSetCoderMt>::operator struct ICompressSetCoderMt *(void)const
.text:00005E78                 public ??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ
.text:00005E78 ??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ proc near
.text:00005E78                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+856p
.text:00005E78
.text:00005E78 var_4           = dword ptr -4
.text:00005E78
.text:00005E78                 push    ebp
.text:00005E79                 mov     ebp, esp
.text:00005E7B                 push    ecx
.text:00005E7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005E83                 mov     [ebp+var_4], ecx
.text:00005E86                 mov     eax, [ebp+var_4]
.text:00005E89                 mov     eax, [eax]
.text:00005E8B                 mov     esp, ebp
.text:00005E8D                 pop     ebp
.text:00005E8E                 retn
.text:00005E8E ??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ endp
.text:00005E8E
.text:00005E8E ; ---------------------------------------------------------------------------
.text:00005E8F                 align 10h
.text:00005E8F _text           ends
.text:00005E8F
.text:00005E90 ; ===========================================================================
.text:00005E90
.text:00005E90 ; Segment type: Pure code
.text:00005E90 ; Segment permissions: Read/Execute
.text:00005E90 _text           segment para public 'CODE' use32
.text:00005E90                 assume cs:_text
.text:00005E90                 ;org 5E90h
.text:00005E90 ; COMDAT (pick any)
.text:00005E90                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005E90
.text:00005E90 ; =============== S U B R O U T I N E =======================================
.text:00005E90
.text:00005E90 ; Attributes: bp-based frame
.text:00005E90
.text:00005E90 ; public: struct ICompressSetCoderMt * * __thiscall CMyComPtr<struct ICompressSetCoderMt>::operator&(void)
.text:00005E90                 public ??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ
.text:00005E90 ??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ proc near
.text:00005E90                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+829p
.text:00005E90
.text:00005E90 var_4           = dword ptr -4
.text:00005E90
.text:00005E90                 push    ebp
.text:00005E91                 mov     ebp, esp
.text:00005E93                 push    ecx
.text:00005E94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005E9B                 mov     [ebp+var_4], ecx
.text:00005E9E                 mov     eax, [ebp+var_4]
.text:00005EA1                 mov     esp, ebp
.text:00005EA3                 pop     ebp
.text:00005EA4                 retn
.text:00005EA4 ??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ endp
.text:00005EA4
.text:00005EA4 ; ---------------------------------------------------------------------------
.text:00005EA5                 align 4
.text:00005EA5 _text           ends
.text:00005EA5
.text:00005EA8 ; ===========================================================================
.text:00005EA8
.text:00005EA8 ; Segment type: Pure code
.text:00005EA8 ; Segment permissions: Read/Execute
.text:00005EA8 _text           segment para public 'CODE' use32
.text:00005EA8                 assume cs:_text
.text:00005EA8                 ;org 5EA8h
.text:00005EA8 ; COMDAT (pick any)
.text:00005EA8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005EA8
.text:00005EA8 ; =============== S U B R O U T I N E =======================================
.text:00005EA8
.text:00005EA8 ; Attributes: bp-based frame
.text:00005EA8
.text:00005EA8 ; public: struct ICompressSetCoderMt * __thiscall CMyComPtr<struct ICompressSetCoderMt>::operator->(void)const
.text:00005EA8                 public ??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ
.text:00005EA8 ??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ proc near
.text:00005EA8                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+869p
.text:00005EA8
.text:00005EA8 var_4           = dword ptr -4
.text:00005EA8
.text:00005EA8                 push    ebp
.text:00005EA9                 mov     ebp, esp
.text:00005EAB                 push    ecx
.text:00005EAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005EB3                 mov     [ebp+var_4], ecx
.text:00005EB6                 mov     eax, [ebp+var_4]
.text:00005EB9                 mov     eax, [eax]
.text:00005EBB                 mov     esp, ebp
.text:00005EBD                 pop     ebp
.text:00005EBE                 retn
.text:00005EBE ??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ endp
.text:00005EBE
.text:00005EBE ; ---------------------------------------------------------------------------
.text:00005EBF                 align 10h
.text:00005EBF _text           ends
.text:00005EBF
.text:00005EC0 ; ===========================================================================
.text:00005EC0
.text:00005EC0 ; Segment type: Pure code
.text:00005EC0 ; Segment permissions: Read/Execute
.text:00005EC0 _text           segment para public 'CODE' use32
.text:00005EC0                 assume cs:_text
.text:00005EC0                 ;org 5EC0h
.text:00005EC0 ; COMDAT (pick any)
.text:00005EC0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005EC0
.text:00005EC0 ; =============== S U B R O U T I N E =======================================
.text:00005EC0
.text:00005EC0 ; Attributes: bp-based frame
.text:00005EC0
.text:00005EC0 ; public: __thiscall CMyComPtr<struct ICryptoSetPassword>::CMyComPtr<struct ICryptoSetPassword>(void)
.text:00005EC0                 public ??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ
.text:00005EC0 ??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ proc near
.text:00005EC0                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+8FDp
.text:00005EC0
.text:00005EC0 var_4           = dword ptr -4
.text:00005EC0
.text:00005EC0                 push    ebp
.text:00005EC1                 mov     ebp, esp
.text:00005EC3                 push    ecx
.text:00005EC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005ECB                 mov     [ebp+var_4], ecx
.text:00005ECE                 mov     eax, [ebp+var_4]
.text:00005ED1                 mov     dword ptr [eax], 0
.text:00005ED7                 mov     eax, [ebp+var_4]
.text:00005EDA                 mov     esp, ebp
.text:00005EDC                 pop     ebp
.text:00005EDD                 retn
.text:00005EDD ??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ endp
.text:00005EDD
.text:00005EDD ; ---------------------------------------------------------------------------
.text:00005EDE                 align 10h
.text:00005EDE _text           ends
.text:00005EDE
.text:00005EE0 ; ===========================================================================
.text:00005EE0
.text:00005EE0 ; Segment type: Pure code
.text:00005EE0 ; Segment permissions: Read/Execute
.text:00005EE0 _text           segment para public 'CODE' use32
.text:00005EE0                 assume cs:_text
.text:00005EE0                 ;org 5EE0h
.text:00005EE0 ; COMDAT (pick any)
.text:00005EE0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005EE0
.text:00005EE0 ; =============== S U B R O U T I N E =======================================
.text:00005EE0
.text:00005EE0 ; Attributes: bp-based frame
.text:00005EE0
.text:00005EE0 ; public: __thiscall CMyComPtr<struct ICryptoSetPassword>::~CMyComPtr<struct ICryptoSetPassword>(void)
.text:00005EE0                 public ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ
.text:00005EE0 ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ proc near
.text:00005EE0                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+966p
.text:00005EE0                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+9FAp ...
.text:00005EE0
.text:00005EE0 var_4           = dword ptr -4
.text:00005EE0
.text:00005EE0                 push    ebp
.text:00005EE1                 mov     ebp, esp
.text:00005EE3                 push    ecx
.text:00005EE4                 push    esi
.text:00005EE5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005EEC                 mov     [ebp+var_4], ecx
.text:00005EEF                 mov     eax, [ebp+var_4]
.text:00005EF2                 cmp     dword ptr [eax], 0
.text:00005EF5                 jz      short loc_5F12
.text:00005EF7                 mov     ecx, [ebp+var_4]
.text:00005EFA                 mov     edx, [ecx]
.text:00005EFC                 mov     eax, [ebp+var_4]
.text:00005EFF                 mov     ecx, [eax]
.text:00005F01                 mov     edx, [edx]
.text:00005F03                 mov     esi, esp
.text:00005F05                 push    ecx
.text:00005F06                 mov     eax, [edx+8]
.text:00005F09                 call    eax
.text:00005F0B                 cmp     esi, esp
.text:00005F0D                 call    __RTC_CheckEsp
.text:00005F12
.text:00005F12 loc_5F12:                               ; CODE XREF: CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>(void)+15j
.text:00005F12                 pop     esi
.text:00005F13                 add     esp, 4
.text:00005F16                 cmp     ebp, esp
.text:00005F18                 call    __RTC_CheckEsp
.text:00005F1D                 mov     esp, ebp
.text:00005F1F                 pop     ebp
.text:00005F20                 retn
.text:00005F20 ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ endp
.text:00005F20
.text:00005F20 ; ---------------------------------------------------------------------------
.text:00005F21                 align 4
.text:00005F21 _text           ends
.text:00005F21
.text:00005F24 ; ===========================================================================
.text:00005F24
.text:00005F24 ; Segment type: Pure code
.text:00005F24 ; Segment permissions: Read/Execute
.text:00005F24 _text           segment para public 'CODE' use32
.text:00005F24                 assume cs:_text
.text:00005F24                 ;org 5F24h
.text:00005F24 ; COMDAT (pick any)
.text:00005F24                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005F24
.text:00005F24 ; =============== S U B R O U T I N E =======================================
.text:00005F24
.text:00005F24 ; Attributes: bp-based frame
.text:00005F24
.text:00005F24 ; public: __thiscall CMyComPtr<struct ICryptoSetPassword>::operator struct ICryptoSetPassword *(void)const
.text:00005F24                 public ??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ
.text:00005F24 ??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ proc near
.text:00005F24                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+939p
.text:00005F24
.text:00005F24 var_4           = dword ptr -4
.text:00005F24
.text:00005F24                 push    ebp
.text:00005F25                 mov     ebp, esp
.text:00005F27                 push    ecx
.text:00005F28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F2F                 mov     [ebp+var_4], ecx
.text:00005F32                 mov     eax, [ebp+var_4]
.text:00005F35                 mov     eax, [eax]
.text:00005F37                 mov     esp, ebp
.text:00005F39                 pop     ebp
.text:00005F3A                 retn
.text:00005F3A ??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ endp
.text:00005F3A
.text:00005F3A ; ---------------------------------------------------------------------------
.text:00005F3B                 align 4
.text:00005F3B _text           ends
.text:00005F3B
.text:00005F3C ; ===========================================================================
.text:00005F3C
.text:00005F3C ; Segment type: Pure code
.text:00005F3C ; Segment permissions: Read/Execute
.text:00005F3C _text           segment para public 'CODE' use32
.text:00005F3C                 assume cs:_text
.text:00005F3C                 ;org 5F3Ch
.text:00005F3C ; COMDAT (pick any)
.text:00005F3C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005F3C
.text:00005F3C ; =============== S U B R O U T I N E =======================================
.text:00005F3C
.text:00005F3C ; Attributes: bp-based frame
.text:00005F3C
.text:00005F3C ; public: struct ICryptoSetPassword * * __thiscall CMyComPtr<struct ICryptoSetPassword>::operator&(void)
.text:00005F3C                 public ??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ
.text:00005F3C ??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ proc near
.text:00005F3C                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+90Cp
.text:00005F3C
.text:00005F3C var_4           = dword ptr -4
.text:00005F3C
.text:00005F3C                 push    ebp
.text:00005F3D                 mov     ebp, esp
.text:00005F3F                 push    ecx
.text:00005F40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F47                 mov     [ebp+var_4], ecx
.text:00005F4A                 mov     eax, [ebp+var_4]
.text:00005F4D                 mov     esp, ebp
.text:00005F4F                 pop     ebp
.text:00005F50                 retn
.text:00005F50 ??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ endp
.text:00005F50
.text:00005F50 ; ---------------------------------------------------------------------------
.text:00005F51                 align 4
.text:00005F51 _text           ends
.text:00005F51
.text:00005F54 ; ===========================================================================
.text:00005F54
.text:00005F54 ; Segment type: Pure code
.text:00005F54 ; Segment permissions: Read/Execute
.text:00005F54 _text           segment para public 'CODE' use32
.text:00005F54                 assume cs:_text
.text:00005F54                 ;org 5F54h
.text:00005F54 ; COMDAT (pick any)
.text:00005F54                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005F54
.text:00005F54 ; =============== S U B R O U T I N E =======================================
.text:00005F54
.text:00005F54 ; Attributes: bp-based frame
.text:00005F54
.text:00005F54 ; public: struct ICryptoSetPassword * __thiscall CMyComPtr<struct ICryptoSetPassword>::operator->(void)const
.text:00005F54                 public ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ
.text:00005F54 ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ proc near
.text:00005F54                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+B0Fp
.text:00005F54
.text:00005F54 var_4           = dword ptr -4
.text:00005F54
.text:00005F54                 push    ebp
.text:00005F55                 mov     ebp, esp
.text:00005F57                 push    ecx
.text:00005F58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F5F                 mov     [ebp+var_4], ecx
.text:00005F62                 mov     eax, [ebp+var_4]
.text:00005F65                 mov     eax, [eax]
.text:00005F67                 mov     esp, ebp
.text:00005F69                 pop     ebp
.text:00005F6A                 retn
.text:00005F6A ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ endp
.text:00005F6A
.text:00005F6A ; ---------------------------------------------------------------------------
.text:00005F6B                 align 4
.text:00005F6B _text           ends
.text:00005F6B
.text:00005F6C ; ===========================================================================
.text:00005F6C
.text:00005F6C ; Segment type: Pure code
.text:00005F6C ; Segment permissions: Read/Execute
.text:00005F6C _text           segment para public 'CODE' use32
.text:00005F6C                 assume cs:_text
.text:00005F6C                 ;org 5F6Ch
.text:00005F6C ; COMDAT (pick any)
.text:00005F6C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005F6C
.text:00005F6C ; =============== S U B R O U T I N E =======================================
.text:00005F6C
.text:00005F6C ; Attributes: bp-based frame
.text:00005F6C
.text:00005F6C ; public: __thiscall CMyComPtr<struct ICompressSetFinishMode>::CMyComPtr<struct ICompressSetFinishMode>(void)
.text:00005F6C                 public ??0?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ
.text:00005F6C ??0?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ proc near
.text:00005F6C                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+BF3p
.text:00005F6C
.text:00005F6C var_4           = dword ptr -4
.text:00005F6C
.text:00005F6C                 push    ebp
.text:00005F6D                 mov     ebp, esp
.text:00005F6F                 push    ecx
.text:00005F70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F77                 mov     [ebp+var_4], ecx
.text:00005F7A                 mov     eax, [ebp+var_4]
.text:00005F7D                 mov     dword ptr [eax], 0
.text:00005F83                 mov     eax, [ebp+var_4]
.text:00005F86                 mov     esp, ebp
.text:00005F88                 pop     ebp
.text:00005F89                 retn
.text:00005F89 ??0?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ endp
.text:00005F89
.text:00005F89 ; ---------------------------------------------------------------------------
.text:00005F8A                 align 4
.text:00005F8A _text           ends
.text:00005F8A
.text:00005F8C ; ===========================================================================
.text:00005F8C
.text:00005F8C ; Segment type: Pure code
.text:00005F8C ; Segment permissions: Read/Execute
.text:00005F8C _text           segment para public 'CODE' use32
.text:00005F8C                 assume cs:_text
.text:00005F8C                 ;org 5F8Ch
.text:00005F8C ; COMDAT (pick any)
.text:00005F8C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005F8C
.text:00005F8C ; =============== S U B R O U T I N E =======================================
.text:00005F8C
.text:00005F8C ; Attributes: bp-based frame
.text:00005F8C
.text:00005F8C ; public: __thiscall CMyComPtr<struct ICompressSetFinishMode>::~CMyComPtr<struct ICompressSetFinishMode>(void)
.text:00005F8C                 public ??1?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ
.text:00005F8C ??1?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ proc near
.text:00005F8C                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+C9Dp
.text:00005F8C                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+CD5p ...
.text:00005F8C
.text:00005F8C var_4           = dword ptr -4
.text:00005F8C
.text:00005F8C                 push    ebp
.text:00005F8D                 mov     ebp, esp
.text:00005F8F                 push    ecx
.text:00005F90                 push    esi
.text:00005F91                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F98                 mov     [ebp+var_4], ecx
.text:00005F9B                 mov     eax, [ebp+var_4]
.text:00005F9E                 cmp     dword ptr [eax], 0
.text:00005FA1                 jz      short loc_5FBE
.text:00005FA3                 mov     ecx, [ebp+var_4]
.text:00005FA6                 mov     edx, [ecx]
.text:00005FA8                 mov     eax, [ebp+var_4]
.text:00005FAB                 mov     ecx, [eax]
.text:00005FAD                 mov     edx, [edx]
.text:00005FAF                 mov     esi, esp
.text:00005FB1                 push    ecx
.text:00005FB2                 mov     eax, [edx+8]
.text:00005FB5                 call    eax
.text:00005FB7                 cmp     esi, esp
.text:00005FB9                 call    __RTC_CheckEsp
.text:00005FBE
.text:00005FBE loc_5FBE:                               ; CODE XREF: CMyComPtr<ICompressSetFinishMode>::~CMyComPtr<ICompressSetFinishMode>(void)+15j
.text:00005FBE                 pop     esi
.text:00005FBF                 add     esp, 4
.text:00005FC2                 cmp     ebp, esp
.text:00005FC4                 call    __RTC_CheckEsp
.text:00005FC9                 mov     esp, ebp
.text:00005FCB                 pop     ebp
.text:00005FCC                 retn
.text:00005FCC ??1?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ endp
.text:00005FCC
.text:00005FCC ; ---------------------------------------------------------------------------
.text:00005FCD                 align 10h
.text:00005FCD _text           ends
.text:00005FCD
.text:00005FD0 ; ===========================================================================
.text:00005FD0
.text:00005FD0 ; Segment type: Pure code
.text:00005FD0 ; Segment permissions: Read/Execute
.text:00005FD0 _text           segment para public 'CODE' use32
.text:00005FD0                 assume cs:_text
.text:00005FD0                 ;org 5FD0h
.text:00005FD0 ; COMDAT (pick any)
.text:00005FD0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005FD0
.text:00005FD0 ; =============== S U B R O U T I N E =======================================
.text:00005FD0
.text:00005FD0 ; Attributes: bp-based frame
.text:00005FD0
.text:00005FD0 ; public: __thiscall CMyComPtr<struct ICompressSetFinishMode>::operator struct ICompressSetFinishMode *(void)const
.text:00005FD0                 public ??B?$CMyComPtr@UICompressSetFinishMode@@@@QBEPAUICompressSetFinishMode@@XZ
.text:00005FD0 ??B?$CMyComPtr@UICompressSetFinishMode@@@@QBEPAUICompressSetFinishMode@@XZ proc near
.text:00005FD0                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+C2Fp
.text:00005FD0
.text:00005FD0 var_4           = dword ptr -4
.text:00005FD0
.text:00005FD0                 push    ebp
.text:00005FD1                 mov     ebp, esp
.text:00005FD3                 push    ecx
.text:00005FD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005FDB                 mov     [ebp+var_4], ecx
.text:00005FDE                 mov     eax, [ebp+var_4]
.text:00005FE1                 mov     eax, [eax]
.text:00005FE3                 mov     esp, ebp
.text:00005FE5                 pop     ebp
.text:00005FE6                 retn
.text:00005FE6 ??B?$CMyComPtr@UICompressSetFinishMode@@@@QBEPAUICompressSetFinishMode@@XZ endp
.text:00005FE6
.text:00005FE6 ; ---------------------------------------------------------------------------
.text:00005FE7                 align 4
.text:00005FE7 _text           ends
.text:00005FE7
.text:00005FE8 ; ===========================================================================
.text:00005FE8
.text:00005FE8 ; Segment type: Pure code
.text:00005FE8 ; Segment permissions: Read/Execute
.text:00005FE8 _text           segment para public 'CODE' use32
.text:00005FE8                 assume cs:_text
.text:00005FE8                 ;org 5FE8h
.text:00005FE8 ; COMDAT (pick any)
.text:00005FE8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00005FE8
.text:00005FE8 ; =============== S U B R O U T I N E =======================================
.text:00005FE8
.text:00005FE8 ; Attributes: bp-based frame
.text:00005FE8
.text:00005FE8 ; public: struct ICompressSetFinishMode * * __thiscall CMyComPtr<struct ICompressSetFinishMode>::operator&(void)
.text:00005FE8                 public ??I?$CMyComPtr@UICompressSetFinishMode@@@@QAEPAPAUICompressSetFinishMode@@XZ
.text:00005FE8 ??I?$CMyComPtr@UICompressSetFinishMode@@@@QAEPAPAUICompressSetFinishMode@@XZ proc near
.text:00005FE8                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+C02p
.text:00005FE8
.text:00005FE8 var_4           = dword ptr -4
.text:00005FE8
.text:00005FE8                 push    ebp
.text:00005FE9                 mov     ebp, esp
.text:00005FEB                 push    ecx
.text:00005FEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005FF3                 mov     [ebp+var_4], ecx
.text:00005FF6                 mov     eax, [ebp+var_4]
.text:00005FF9                 mov     esp, ebp
.text:00005FFB                 pop     ebp
.text:00005FFC                 retn
.text:00005FFC ??I?$CMyComPtr@UICompressSetFinishMode@@@@QAEPAPAUICompressSetFinishMode@@XZ endp
.text:00005FFC
.text:00005FFC ; ---------------------------------------------------------------------------
.text:00005FFD                 align 10h
.text:00005FFD _text           ends
.text:00005FFD
.text:00006000 ; ===========================================================================
.text:00006000
.text:00006000 ; Segment type: Pure code
.text:00006000 ; Segment permissions: Read/Execute
.text:00006000 _text           segment para public 'CODE' use32
.text:00006000                 assume cs:_text
.text:00006000                 ;org 6000h
.text:00006000 ; COMDAT (pick any)
.text:00006000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006000
.text:00006000 ; =============== S U B R O U T I N E =======================================
.text:00006000
.text:00006000 ; Attributes: bp-based frame
.text:00006000
.text:00006000 ; public: struct ICompressSetFinishMode * __thiscall CMyComPtr<struct ICompressSetFinishMode>::operator->(void)const
.text:00006000                 public ??C?$CMyComPtr@UICompressSetFinishMode@@@@QBEPAUICompressSetFinishMode@@XZ
.text:00006000 ??C?$CMyComPtr@UICompressSetFinishMode@@@@QBEPAUICompressSetFinishMode@@XZ proc near
.text:00006000                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+C42p
.text:00006000
.text:00006000 var_4           = dword ptr -4
.text:00006000
.text:00006000                 push    ebp
.text:00006001                 mov     ebp, esp
.text:00006003                 push    ecx
.text:00006004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000600B                 mov     [ebp+var_4], ecx
.text:0000600E                 mov     eax, [ebp+var_4]
.text:00006011                 mov     eax, [eax]
.text:00006013                 mov     esp, ebp
.text:00006015                 pop     ebp
.text:00006016                 retn
.text:00006016 ??C?$CMyComPtr@UICompressSetFinishMode@@@@QBEPAUICompressSetFinishMode@@XZ endp
.text:00006016
.text:00006016 ; ---------------------------------------------------------------------------
.text:00006017                 align 4
.text:00006017 _text           ends
.text:00006017
.text:00006018 ; ===========================================================================
.text:00006018
.text:00006018 ; Segment type: Pure code
.text:00006018 ; Segment permissions: Read/Execute
.text:00006018 _text           segment para public 'CODE' use32
.text:00006018                 assume cs:_text
.text:00006018                 ;org 6018h
.text:00006018 ; COMDAT (pick any)
.text:00006018                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006018
.text:00006018 ; =============== S U B R O U T I N E =======================================
.text:00006018
.text:00006018 ; Attributes: bp-based frame
.text:00006018
.text:00006018 ; public: __thiscall CObjArray<unsigned __int64 const *>::CObjArray<unsigned __int64 const *>(unsigned int)
.text:00006018                 public ??0?$CObjArray@PB_K@@QAE@I@Z
.text:00006018 ??0?$CObjArray@PB_K@@QAE@I@Z proc near  ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+D0Cp
.text:00006018
.text:00006018 var_8           = dword ptr -8
.text:00006018 var_4           = dword ptr -4
.text:00006018 arg_0           = dword ptr  8
.text:00006018
.text:00006018                 push    ebp
.text:00006019                 mov     ebp, esp
.text:0000601B                 sub     esp, 8
.text:0000601E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006025                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000602C                 mov     [ebp+var_4], ecx
.text:0000602F                 mov     eax, [ebp+var_4]
.text:00006032                 mov     dword ptr [eax], 0
.text:00006038                 cmp     [ebp+arg_0], 0
.text:0000603C                 jz      short loc_6065
.text:0000603E                 xor     ecx, ecx
.text:00006040                 mov     eax, [ebp+arg_0]
.text:00006043                 mov     edx, 4
.text:00006048                 mul     edx
.text:0000604A                 seto    cl
.text:0000604D                 neg     ecx
.text:0000604F                 or      ecx, eax
.text:00006051                 push    ecx             ; unsigned int
.text:00006052                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006057                 add     esp, 4
.text:0000605A                 mov     [ebp+var_8], eax
.text:0000605D                 mov     eax, [ebp+var_4]
.text:00006060                 mov     ecx, [ebp+var_8]
.text:00006063                 mov     [eax], ecx
.text:00006065
.text:00006065 loc_6065:                               ; CODE XREF: CObjArray<unsigned __int64 const *>::CObjArray<unsigned __int64 const *>(uint)+24j
.text:00006065                 mov     eax, [ebp+var_4]
.text:00006068                 add     esp, 8
.text:0000606B                 cmp     ebp, esp
.text:0000606D                 call    __RTC_CheckEsp
.text:00006072                 mov     esp, ebp
.text:00006074                 pop     ebp
.text:00006075                 retn    4
.text:00006075 ??0?$CObjArray@PB_K@@QAE@I@Z endp
.text:00006075
.text:00006075 _text           ends
.text:00006075
.text:00006078 ; ===========================================================================
.text:00006078
.text:00006078 ; Segment type: Pure code
.text:00006078 ; Segment permissions: Read/Execute
.text:00006078 _text           segment para public 'CODE' use32
.text:00006078                 assume cs:_text
.text:00006078                 ;org 6078h
.text:00006078 ; COMDAT (pick any)
.text:00006078                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006078
.text:00006078 ; =============== S U B R O U T I N E =======================================
.text:00006078
.text:00006078 ; Attributes: bp-based frame
.text:00006078
.text:00006078 ; public: __thiscall CObjArray<unsigned __int64 const *>::~CObjArray<unsigned __int64 const *>(void)
.text:00006078                 public ??1?$CObjArray@PB_K@@QAE@XZ
.text:00006078 ??1?$CObjArray@PB_K@@QAE@XZ proc near   ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+DE2p
.text:00006078                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+F0Fp ...
.text:00006078
.text:00006078 var_8           = dword ptr -8
.text:00006078 var_4           = dword ptr -4
.text:00006078
.text:00006078                 push    ebp
.text:00006079                 mov     ebp, esp
.text:0000607B                 sub     esp, 8
.text:0000607E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006085                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000608C                 mov     [ebp+var_4], ecx
.text:0000608F                 mov     eax, [ebp+var_4]
.text:00006092                 mov     ecx, [eax]
.text:00006094                 mov     [ebp+var_8], ecx
.text:00006097                 mov     edx, [ebp+var_8]
.text:0000609A                 push    edx             ; void *
.text:0000609B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000060A0                 add     esp, 4
.text:000060A3                 add     esp, 8
.text:000060A6                 cmp     ebp, esp
.text:000060A8                 call    __RTC_CheckEsp
.text:000060AD                 mov     esp, ebp
.text:000060AF                 pop     ebp
.text:000060B0                 retn
.text:000060B0 ??1?$CObjArray@PB_K@@QAE@XZ endp
.text:000060B0
.text:000060B0 ; ---------------------------------------------------------------------------
.text:000060B1                 align 4
.text:000060B1 _text           ends
.text:000060B1
.text:000060B4 ; ===========================================================================
.text:000060B4
.text:000060B4 ; Segment type: Pure code
.text:000060B4 ; Segment permissions: Read/Execute
.text:000060B4 _text           segment para public 'CODE' use32
.text:000060B4                 assume cs:_text
.text:000060B4                 ;org 60B4h
.text:000060B4 ; COMDAT (pick any)
.text:000060B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000060B4
.text:000060B4 ; =============== S U B R O U T I N E =======================================
.text:000060B4
.text:000060B4 ; Attributes: bp-based frame
.text:000060B4
.text:000060B4 ; public: __thiscall CObjArray<unsigned __int64 const *>::operator unsigned __int64 const * *(void)
.text:000060B4                 public ??B?$CObjArray@PB_K@@QAEPAPB_KXZ
.text:000060B4 ??B?$CObjArray@PB_K@@QAEPAPB_KXZ proc near
.text:000060B4                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+D9Dp
.text:000060B4                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+E72p ...
.text:000060B4
.text:000060B4 var_4           = dword ptr -4
.text:000060B4
.text:000060B4                 push    ebp
.text:000060B5                 mov     ebp, esp
.text:000060B7                 push    ecx
.text:000060B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000060BF                 mov     [ebp+var_4], ecx
.text:000060C2                 mov     eax, [ebp+var_4]
.text:000060C5                 mov     eax, [eax]
.text:000060C7                 mov     esp, ebp
.text:000060C9                 pop     ebp
.text:000060CA                 retn
.text:000060CA ??B?$CObjArray@PB_K@@QAEPAPB_KXZ endp
.text:000060CA
.text:000060CA ; ---------------------------------------------------------------------------
.text:000060CB                 align 4
.text:000060CB _text           ends
.text:000060CB
.text:000060CC ; ===========================================================================
.text:000060CC
.text:000060CC ; Segment type: Pure code
.text:000060CC ; Segment permissions: Read/Execute
.text:000060CC _text           segment para public 'CODE' use32
.text:000060CC                 assume cs:_text
.text:000060CC                 ;org 60CCh
.text:000060CC ; COMDAT (pick any)
.text:000060CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000060CC
.text:000060CC ; =============== S U B R O U T I N E =======================================
.text:000060CC
.text:000060CC ; Attributes: bp-based frame
.text:000060CC
.text:000060CC ; public: __thiscall CObjArray<struct ISequentialInStream *>::CObjArray<struct ISequentialInStream *>(unsigned int)
.text:000060CC                 public ??0?$CObjArray@PAUISequentialInStream@@@@QAE@I@Z
.text:000060CC ??0?$CObjArray@PAUISequentialInStream@@@@QAE@I@Z proc near
.text:000060CC                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+13EBp
.text:000060CC
.text:000060CC var_8           = dword ptr -8
.text:000060CC var_4           = dword ptr -4
.text:000060CC arg_0           = dword ptr  8
.text:000060CC
.text:000060CC                 push    ebp
.text:000060CD                 mov     ebp, esp
.text:000060CF                 sub     esp, 8
.text:000060D2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000060D9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000060E0                 mov     [ebp+var_4], ecx
.text:000060E3                 mov     eax, [ebp+var_4]
.text:000060E6                 mov     dword ptr [eax], 0
.text:000060EC                 cmp     [ebp+arg_0], 0
.text:000060F0                 jz      short loc_6119
.text:000060F2                 xor     ecx, ecx
.text:000060F4                 mov     eax, [ebp+arg_0]
.text:000060F7                 mov     edx, 4
.text:000060FC                 mul     edx
.text:000060FE                 seto    cl
.text:00006101                 neg     ecx
.text:00006103                 or      ecx, eax
.text:00006105                 push    ecx             ; unsigned int
.text:00006106                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000610B                 add     esp, 4
.text:0000610E                 mov     [ebp+var_8], eax
.text:00006111                 mov     eax, [ebp+var_4]
.text:00006114                 mov     ecx, [ebp+var_8]
.text:00006117                 mov     [eax], ecx
.text:00006119
.text:00006119 loc_6119:                               ; CODE XREF: CObjArray<ISequentialInStream *>::CObjArray<ISequentialInStream *>(uint)+24j
.text:00006119                 mov     eax, [ebp+var_4]
.text:0000611C                 add     esp, 8
.text:0000611F                 cmp     ebp, esp
.text:00006121                 call    __RTC_CheckEsp
.text:00006126                 mov     esp, ebp
.text:00006128                 pop     ebp
.text:00006129                 retn    4
.text:00006129 ??0?$CObjArray@PAUISequentialInStream@@@@QAE@I@Z endp
.text:00006129
.text:00006129 _text           ends
.text:00006129
.text:0000612C ; ===========================================================================
.text:0000612C
.text:0000612C ; Segment type: Pure code
.text:0000612C ; Segment permissions: Read/Execute
.text:0000612C _text           segment para public 'CODE' use32
.text:0000612C                 assume cs:_text
.text:0000612C                 ;org 612Ch
.text:0000612C ; COMDAT (pick any)
.text:0000612C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000612C
.text:0000612C ; =============== S U B R O U T I N E =======================================
.text:0000612C
.text:0000612C ; Attributes: bp-based frame
.text:0000612C
.text:0000612C ; public: __thiscall CObjArray<struct ISequentialInStream *>::~CObjArray<struct ISequentialInStream *>(void)
.text:0000612C                 public ??1?$CObjArray@PAUISequentialInStream@@@@QAE@XZ
.text:0000612C ??1?$CObjArray@PAUISequentialInStream@@@@QAE@XZ proc near
.text:0000612C                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1572p
.text:0000612C                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+15E6p ...
.text:0000612C
.text:0000612C var_8           = dword ptr -8
.text:0000612C var_4           = dword ptr -4
.text:0000612C
.text:0000612C                 push    ebp
.text:0000612D                 mov     ebp, esp
.text:0000612F                 sub     esp, 8
.text:00006132                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006139                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006140                 mov     [ebp+var_4], ecx
.text:00006143                 mov     eax, [ebp+var_4]
.text:00006146                 mov     ecx, [eax]
.text:00006148                 mov     [ebp+var_8], ecx
.text:0000614B                 mov     edx, [ebp+var_8]
.text:0000614E                 push    edx             ; void *
.text:0000614F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006154                 add     esp, 4
.text:00006157                 add     esp, 8
.text:0000615A                 cmp     ebp, esp
.text:0000615C                 call    __RTC_CheckEsp
.text:00006161                 mov     esp, ebp
.text:00006163                 pop     ebp
.text:00006164                 retn
.text:00006164 ??1?$CObjArray@PAUISequentialInStream@@@@QAE@XZ endp
.text:00006164
.text:00006164 ; ---------------------------------------------------------------------------
.text:00006165                 align 4
.text:00006165 _text           ends
.text:00006165
.text:00006168 ; ===========================================================================
.text:00006168
.text:00006168 ; Segment type: Pure code
.text:00006168 ; Segment permissions: Read/Execute
.text:00006168 _text           segment para public 'CODE' use32
.text:00006168                 assume cs:_text
.text:00006168                 ;org 6168h
.text:00006168 ; COMDAT (pick any)
.text:00006168                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006168
.text:00006168 ; =============== S U B R O U T I N E =======================================
.text:00006168
.text:00006168 ; Attributes: bp-based frame
.text:00006168
.text:00006168 ; public: __thiscall CObjArray<struct ISequentialInStream *>::operator struct ISequentialInStream * *(void)
.text:00006168                 public ??B?$CObjArray@PAUISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ
.text:00006168 ??B?$CObjArray@PAUISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ proc near
.text:00006168                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+143Ep
.text:00006168                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+1533p ...
.text:00006168
.text:00006168 var_4           = dword ptr -4
.text:00006168
.text:00006168                 push    ebp
.text:00006169                 mov     ebp, esp
.text:0000616B                 push    ecx
.text:0000616C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006173                 mov     [ebp+var_4], ecx
.text:00006176                 mov     eax, [ebp+var_4]
.text:00006179                 mov     eax, [eax]
.text:0000617B                 mov     esp, ebp
.text:0000617D                 pop     ebp
.text:0000617E                 retn
.text:0000617E ??B?$CObjArray@PAUISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ endp
.text:0000617E
.text:0000617E ; ---------------------------------------------------------------------------
.text:0000617F                 align 10h
.text:0000617F _text           ends
.text:0000617F
.text:00006180 ; ===========================================================================
.text:00006180
.text:00006180 ; Segment type: Pure code
.text:00006180 ; Segment permissions: Read/Execute
.text:00006180 _text           segment para public 'CODE' use32
.text:00006180                 assume cs:_text
.text:00006180                 ;org 6180h
.text:00006180 ; COMDAT (pick any)
.text:00006180                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006180
.text:00006180 ; =============== S U B R O U T I N E =======================================
.text:00006180
.text:00006180 ; Attributes: bp-based frame
.text:00006180
.text:00006180 ; public: void * __thiscall CMyComPtr<struct ISequentialInStream>::`scalar deleting destructor'(unsigned int)
.text:00006180                 public ??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z
.text:00006180 ??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z proc near
.text:00006180                                         ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)+7Fp
.text:00006180
.text:00006180 var_4           = dword ptr -4
.text:00006180 arg_0           = dword ptr  8
.text:00006180
.text:00006180                 push    ebp
.text:00006181                 mov     ebp, esp
.text:00006183                 push    ecx
.text:00006184                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000618B                 mov     [ebp+var_4], ecx
.text:0000618E                 mov     ecx, [ebp+var_4]
.text:00006191                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00006196                 mov     eax, [ebp+arg_0]
.text:00006199                 and     eax, 1
.text:0000619C                 jz      short loc_61AA
.text:0000619E                 mov     ecx, [ebp+var_4]
.text:000061A1                 push    ecx             ; void *
.text:000061A2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000061A7                 add     esp, 4
.text:000061AA
.text:000061AA loc_61AA:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::`scalar deleting destructor'(uint)+1Cj
.text:000061AA                 mov     eax, [ebp+var_4]
.text:000061AD                 add     esp, 4
.text:000061B0                 cmp     ebp, esp
.text:000061B2                 call    __RTC_CheckEsp
.text:000061B7                 mov     esp, ebp
.text:000061B9                 pop     ebp
.text:000061BA                 retn    4
.text:000061BA ??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z endp
.text:000061BA
.text:000061BA ; ---------------------------------------------------------------------------
.text:000061BD                 align 10h
.text:000061BD _text           ends
.text:000061BD
.text:000061C0 ; ===========================================================================
.text:000061C0
.text:000061C0 ; Segment type: Pure code
.text:000061C0 ; Segment permissions: Read/Execute
.text:000061C0 _text           segment para public 'CODE' use32
.text:000061C0                 assume cs:_text
.text:000061C0                 ;org 61C0h
.text:000061C0 ; COMDAT (pick any)
.text:000061C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000061C0
.text:000061C0 ; =============== S U B R O U T I N E =======================================
.text:000061C0
.text:000061C0 ; Attributes: bp-based frame
.text:000061C0
.text:000061C0 ; public: void * __thiscall CStreamBinder::`scalar deleting destructor'(unsigned int)
.text:000061C0                 public ??_GCStreamBinder@@QAEPAXI@Z
.text:000061C0 ??_GCStreamBinder@@QAEPAXI@Z proc near  ; CODE XREF: CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>(void)+7Fp
.text:000061C0
.text:000061C0 var_4           = dword ptr -4
.text:000061C0 arg_0           = dword ptr  8
.text:000061C0
.text:000061C0                 push    ebp
.text:000061C1                 mov     ebp, esp
.text:000061C3                 push    ecx
.text:000061C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000061CB                 mov     [ebp+var_4], ecx
.text:000061CE                 mov     ecx, [ebp+var_4] ; this
.text:000061D1                 call    ??1CStreamBinder@@QAE@XZ ; CStreamBinder::~CStreamBinder(void)
.text:000061D6                 mov     eax, [ebp+arg_0]
.text:000061D9                 and     eax, 1
.text:000061DC                 jz      short loc_61EA
.text:000061DE                 mov     ecx, [ebp+var_4]
.text:000061E1                 push    ecx             ; void *
.text:000061E2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000061E7                 add     esp, 4
.text:000061EA
.text:000061EA loc_61EA:                               ; CODE XREF: CStreamBinder::`scalar deleting destructor'(uint)+1Cj
.text:000061EA                 mov     eax, [ebp+var_4]
.text:000061ED                 add     esp, 4
.text:000061F0                 cmp     ebp, esp
.text:000061F2                 call    __RTC_CheckEsp
.text:000061F7                 mov     esp, ebp
.text:000061F9                 pop     ebp
.text:000061FA                 retn    4
.text:000061FA ??_GCStreamBinder@@QAEPAXI@Z endp
.text:000061FA
.text:000061FA ; ---------------------------------------------------------------------------
.text:000061FD                 align 10h
.text:000061FD _text           ends
.text:000061FD
.text:00006200 ; ===========================================================================
.text:00006200
.text:00006200 ; Segment type: Pure code
.text:00006200 ; Segment permissions: Read/Execute
.text:00006200 _text           segment para public 'CODE' use32
.text:00006200                 assume cs:_text
.text:00006200                 ;org 6200h
.text:00006200 ; COMDAT (pick any)
.text:00006200                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006200
.text:00006200 ; =============== S U B R O U T I N E =======================================
.text:00006200
.text:00006200 ; Attributes: bp-based frame
.text:00006200
.text:00006200 ; public: void * __thiscall NCoderMixer2::CCoderMT::`scalar deleting destructor'(unsigned int)
.text:00006200                 public ??_GCCoderMT@NCoderMixer2@@QAEPAXI@Z
.text:00006200 ??_GCCoderMT@NCoderMixer2@@QAEPAXI@Z proc near
.text:00006200                                         ; CODE XREF: CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>(void)+7Fp
.text:00006200
.text:00006200 var_4           = dword ptr -4
.text:00006200 arg_0           = dword ptr  8
.text:00006200
.text:00006200                 push    ebp
.text:00006201                 mov     ebp, esp
.text:00006203                 push    ecx
.text:00006204                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000620B                 mov     [ebp+var_4], ecx
.text:0000620E                 mov     ecx, [ebp+var_4] ; this
.text:00006211                 call    ??1CCoderMT@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CCoderMT::~CCoderMT(void)
.text:00006216                 mov     eax, [ebp+arg_0]
.text:00006219                 and     eax, 1
.text:0000621C                 jz      short loc_622A
.text:0000621E                 mov     ecx, [ebp+var_4]
.text:00006221                 push    ecx             ; void *
.text:00006222                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006227                 add     esp, 4
.text:0000622A
.text:0000622A loc_622A:                               ; CODE XREF: NCoderMixer2::CCoderMT::`scalar deleting destructor'(uint)+1Cj
.text:0000622A                 mov     eax, [ebp+var_4]
.text:0000622D                 add     esp, 4
.text:00006230                 cmp     ebp, esp
.text:00006232                 call    __RTC_CheckEsp
.text:00006237                 mov     esp, ebp
.text:00006239                 pop     ebp
.text:0000623A                 retn    4
.text:0000623A ??_GCCoderMT@NCoderMixer2@@QAEPAXI@Z endp
.text:0000623A
.text:0000623A ; ---------------------------------------------------------------------------
.text:0000623D                 align 10h
.text:0000623D _text           ends
.text:0000623D
.text:00006240 ; ===========================================================================
.text:00006240
.text:00006240 ; Segment type: Pure code
.text:00006240 ; Segment permissions: Read/Execute
.text:00006240 _text           segment para public 'CODE' use32
.text:00006240                 assume cs:_text
.text:00006240                 ;org 6240h
.text:00006240 ; COMDAT (pick any)
.text:00006240                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006240
.text:00006240 ; =============== S U B R O U T I N E =======================================
.text:00006240
.text:00006240 ; Attributes: bp-based frame
.text:00006240
.text:00006240 ; _DWORD __thiscall NCoderMixer2::CCoderMT::~CCoderMT(NCoderMixer2::CCoderMT *__hidden this)
.text:00006240                 public ??1CCoderMT@NCoderMixer2@@QAE@XZ
.text:00006240 ??1CCoderMT@NCoderMixer2@@QAE@XZ proc near
.text:00006240                                         ; CODE XREF: NCoderMixer2::CCoderMT::`scalar deleting destructor'(uint)+11p
.text:00006240
.text:00006240 var_10          = dword ptr -10h
.text:00006240 var_C           = dword ptr -0Ch
.text:00006240 var_4           = dword ptr -4
.text:00006240
.text:00006240                 push    ebp
.text:00006241                 mov     ebp, esp
.text:00006243                 push    0FFFFFFFFh
.text:00006245                 push    offset __ehhandler$??1CCoderMT@NCoderMixer2@@QAE@XZ
.text:0000624A                 mov     eax, large fs:0
.text:00006250                 push    eax
.text:00006251                 push    ecx
.text:00006252                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00006259                 mov     eax, dword ptr ds:___security_cookie
.text:0000625E                 xor     eax, ebp
.text:00006260                 push    eax
.text:00006261                 lea     eax, [ebp+var_C]
.text:00006264                 mov     large fs:0, eax
.text:0000626A                 mov     [ebp+var_10], ecx
.text:0000626D                 mov     eax, [ebp+var_10]
.text:00006270                 mov     dword ptr [eax], offset ??_7CCoderMT@NCoderMixer2@@6B@ ; const NCoderMixer2::CCoderMT::`vftable'
.text:00006276                 mov     [ebp+var_4], 5
.text:0000627D                 mov     ecx, [ebp+var_10] ; this
.text:00006280                 call    ?WaitThreadFinish@CVirtThread@@QAEXXZ ; CVirtThread::WaitThreadFinish(void)
.text:00006285                 mov     byte ptr [ebp+var_4], 4
.text:00006289                 mov     ecx, [ebp+var_10]
.text:0000628C                 add     ecx, 7Ch ; '|'
.text:0000628F                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)
.text:00006294                 mov     byte ptr [ebp+var_4], 3
.text:00006298                 mov     ecx, [ebp+var_10]
.text:0000629B                 add     ecx, 70h ; 'p'
.text:0000629E                 call    ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)
.text:000062A3                 mov     byte ptr [ebp+var_4], 2
.text:000062A7                 mov     ecx, [ebp+var_10]
.text:000062AA                 add     ecx, 5Ch ; '\'
.text:000062AD                 call    ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>(void)
.text:000062B2                 mov     byte ptr [ebp+var_4], 1
.text:000062B6                 mov     ecx, [ebp+var_10]
.text:000062B9                 add     ecx, 50h ; 'P'
.text:000062BC                 call    ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>(void)
.text:000062C1                 mov     byte ptr [ebp+var_4], 0
.text:000062C5                 mov     ecx, [ebp+var_10] ; this
.text:000062C8                 call    ??1CVirtThread@@QAE@XZ ; CVirtThread::~CVirtThread(void)
.text:000062CD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000062D4                 mov     ecx, [ebp+var_10]
.text:000062D7                 add     ecx, 18h        ; this
.text:000062DA                 call    ??1CCoder@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CCoder::~CCoder(void)
.text:000062DF                 mov     ecx, [ebp+var_C]
.text:000062E2                 mov     large fs:0, ecx
.text:000062E9                 pop     ecx
.text:000062EA                 add     esp, 10h
.text:000062ED                 cmp     ebp, esp
.text:000062EF                 call    __RTC_CheckEsp
.text:000062F4                 mov     esp, ebp
.text:000062F6                 pop     ebp
.text:000062F7                 retn
.text:000062F7 ??1CCoderMT@NCoderMixer2@@QAE@XZ endp
.text:000062F7
.text:000062F7 _text           ends
.text:000062F7
.text$x:000062F8 ; ===========================================================================
.text$x:000062F8
.text$x:000062F8 ; Segment type: Pure code
.text$x:000062F8 ; Segment permissions: Read/Execute
.text$x:000062F8 _text$x         segment para public 'CODE' use32
.text$x:000062F8                 assume cs:_text$x
.text$x:000062F8                 ;org 62F8h
.text$x:000062F8 ; COMDAT (pick associative to section at 6240)
.text$x:000062F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000062F8
.text$x:000062F8 ; =============== S U B R O U T I N E =======================================
.text$x:000062F8
.text$x:000062F8
.text$x:000062F8 __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:000062F8                                         ; DATA XREF: .xdata$x:00006384o
.text$x:000062F8                 mov     ecx, [ebp-10h]
.text$x:000062FB                 add     ecx, 18h        ; this
.text$x:000062FE                 jmp     ??1CCoder@NCoderMixer2@@QAE@XZ ; NCoderMixer2::CCoder::~CCoder(void)
.text$x:000062FE __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$0 endp
.text$x:000062FE
.text$x:00006303
.text$x:00006303 ; =============== S U B R O U T I N E =======================================
.text$x:00006303
.text$x:00006303
.text$x:00006303 __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:00006303                                         ; DATA XREF: .xdata$x:0000638Co
.text$x:00006303                 mov     ecx, [ebp-10h]  ; this
.text$x:00006306                 jmp     ??1CVirtThread@@QAE@XZ ; CVirtThread::~CVirtThread(void)
.text$x:00006306 __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$1 endp
.text$x:00006306
.text$x:0000630B
.text$x:0000630B ; =============== S U B R O U T I N E =======================================
.text$x:0000630B
.text$x:0000630B
.text$x:0000630B __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$2 proc near
.text$x:0000630B                                         ; DATA XREF: .xdata$x:00006394o
.text$x:0000630B                 mov     ecx, [ebp-10h]
.text$x:0000630E                 add     ecx, 50h ; 'P'
.text$x:00006311                 jmp     ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>(void)
.text$x:00006311 __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$2 endp
.text$x:00006311
.text$x:00006316
.text$x:00006316 ; =============== S U B R O U T I N E =======================================
.text$x:00006316
.text$x:00006316
.text$x:00006316 __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$3 proc near
.text$x:00006316                                         ; DATA XREF: .xdata$x:0000639Co
.text$x:00006316                 mov     ecx, [ebp-10h]
.text$x:00006319                 add     ecx, 5Ch ; '\'
.text$x:0000631C                 jmp     ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>(void)
.text$x:0000631C __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$3 endp
.text$x:0000631C
.text$x:00006321
.text$x:00006321 ; =============== S U B R O U T I N E =======================================
.text$x:00006321
.text$x:00006321
.text$x:00006321 __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$4 proc near
.text$x:00006321                                         ; DATA XREF: .xdata$x:000063A4o
.text$x:00006321                 mov     ecx, [ebp-10h]
.text$x:00006324                 add     ecx, 70h ; 'p'
.text$x:00006327                 jmp     ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)
.text$x:00006327 __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$4 endp
.text$x:00006327
.text$x:0000632C
.text$x:0000632C ; =============== S U B R O U T I N E =======================================
.text$x:0000632C
.text$x:0000632C
.text$x:0000632C __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$5 proc near
.text$x:0000632C                                         ; DATA XREF: .xdata$x:000063ACo
.text$x:0000632C                 mov     ecx, [ebp-10h]
.text$x:0000632F                 add     ecx, 7Ch ; '|'
.text$x:00006332                 jmp     ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)
.text$x:00006332 __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$5 endp
.text$x:00006332
.text$x:00006337
.text$x:00006337 ; =============== S U B R O U T I N E =======================================
.text$x:00006337
.text$x:00006337
.text$x:00006337 __ehhandler$??1CCoderMT@NCoderMixer2@@QAE@XZ proc near
.text$x:00006337                                         ; DATA XREF: NCoderMixer2::CCoderMT::~CCoderMT(void)+5o
.text$x:00006337
.text$x:00006337 arg_4           = dword ptr  8
.text$x:00006337
.text$x:00006337                 mov     edx, [esp+arg_4]
.text$x:0000633B                 lea     eax, [edx+0Ch]
.text$x:0000633E                 mov     ecx, [edx-8]
.text$x:00006341                 xor     ecx, eax
.text$x:00006343                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006348                 mov     eax, offset __ehfuncinfo$??1CCoderMT@NCoderMixer2@@QAE@XZ
.text$x:0000634D                 jmp     ___CxxFrameHandler3
.text$x:0000634D __ehhandler$??1CCoderMT@NCoderMixer2@@QAE@XZ endp
.text$x:0000634D
.text$x:0000634D ; ---------------------------------------------------------------------------
.text$x:00006352                 align 4
.text$x:00006352 _text$x         ends
.text$x:00006352
.rdata:00006354 ; ===========================================================================
.rdata:00006354
.rdata:00006354 ; Segment type: Pure data
.rdata:00006354 ; Segment permissions: Read
.rdata:00006354 _rdata          segment dword public 'DATA' use32
.rdata:00006354                 assume cs:_rdata
.rdata:00006354                 ;org 6354h
.rdata:00006354 ; COMDAT (pick largest)
.rdata:00006354                 dd offset ??_R4CCoderMT@NCoderMixer2@@6B@ ; const NCoderMixer2::CCoderMT::`RTTI Complete Object Locator'
.rdata:00006358                 public ??_7CCoderMT@NCoderMixer2@@6B@
.rdata:00006358 ; const NCoderMixer2::CCoderMT::`vftable'
.rdata:00006358 ??_7CCoderMT@NCoderMixer2@@6B@ dd offset ?Execute@CCoderMT@NCoderMixer2@@EAEXXZ
.rdata:00006358                                         ; DATA XREF: NCoderMixer2::CCoderMT::~CCoderMT(void)+30o
.rdata:00006358 _rdata          ends                    ; NCoderMixer2::CCoderMT::Execute(void)
.rdata:00006358
.xdata$x:0000635C ; ===========================================================================
.xdata$x:0000635C
.xdata$x:0000635C ; Segment type: Pure data
.xdata$x:0000635C ; Segment permissions: Read
.xdata$x:0000635C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000635C                 assume cs:_xdata$x
.xdata$x:0000635C                 ;org 635Ch
.xdata$x:0000635C ; COMDAT (pick associative to section at 6240)
.xdata$x:0000635C __ehfuncinfo$??1CCoderMT@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:0000635C                                         ; DATA XREF: __ehhandler$??1CCoderMT@NCoderMixer2@@QAE@XZ+11o
.xdata$x:0000635D                 db    5
.xdata$x:0000635E                 db  93h ; ô
.xdata$x:0000635F                 db  19h
.xdata$x:00006360                 db    6
.xdata$x:00006361                 db    0
.xdata$x:00006362                 db    0
.xdata$x:00006363                 db    0
.xdata$x:00006364                 dd offset __unwindtable$??1CCoderMT@NCoderMixer2@@QAE@XZ
.xdata$x:00006368                 db    0
.xdata$x:00006369                 db    0
.xdata$x:0000636A                 db    0
.xdata$x:0000636B                 db    0
.xdata$x:0000636C                 db    0
.xdata$x:0000636D                 db    0
.xdata$x:0000636E                 db    0
.xdata$x:0000636F                 db    0
.xdata$x:00006370                 db    0
.xdata$x:00006371                 db    0
.xdata$x:00006372                 db    0
.xdata$x:00006373                 db    0
.xdata$x:00006374                 db    0
.xdata$x:00006375                 db    0
.xdata$x:00006376                 db    0
.xdata$x:00006377                 db    0
.xdata$x:00006378                 db    0
.xdata$x:00006379                 db    0
.xdata$x:0000637A                 db    0
.xdata$x:0000637B                 db    0
.xdata$x:0000637C                 db    1
.xdata$x:0000637D                 db    0
.xdata$x:0000637E                 db    0
.xdata$x:0000637F                 db    0
.xdata$x:00006380 __unwindtable$??1CCoderMT@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:00006380                                         ; DATA XREF: .xdata$x:00006364o
.xdata$x:00006381                 db 0FFh
.xdata$x:00006382                 db 0FFh
.xdata$x:00006383                 db 0FFh
.xdata$x:00006384                 dd offset __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$0
.xdata$x:00006388                 db    0
.xdata$x:00006389                 db    0
.xdata$x:0000638A                 db    0
.xdata$x:0000638B                 db    0
.xdata$x:0000638C                 dd offset __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$1
.xdata$x:00006390                 db    1
.xdata$x:00006391                 db    0
.xdata$x:00006392                 db    0
.xdata$x:00006393                 db    0
.xdata$x:00006394                 dd offset __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$2
.xdata$x:00006398                 db    2
.xdata$x:00006399                 db    0
.xdata$x:0000639A                 db    0
.xdata$x:0000639B                 db    0
.xdata$x:0000639C                 dd offset __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$3
.xdata$x:000063A0                 db    3
.xdata$x:000063A1                 db    0
.xdata$x:000063A2                 db    0
.xdata$x:000063A3                 db    0
.xdata$x:000063A4                 dd offset __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$4
.xdata$x:000063A8                 db    4
.xdata$x:000063A9                 db    0
.xdata$x:000063AA                 db    0
.xdata$x:000063AB                 db    0
.xdata$x:000063AC                 dd offset __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$5
.xdata$x:000063AC _xdata$x        ends
.xdata$x:000063AC
.rdata$r:000063B0 ; ===========================================================================
.rdata$r:000063B0
.rdata$r:000063B0 ; Segment type: Pure data
.rdata$r:000063B0 ; Segment permissions: Read
.rdata$r:000063B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000063B0                 assume cs:_rdata$r
.rdata$r:000063B0                 ;org 63B0h
.rdata$r:000063B0 ; COMDAT (pick any)
.rdata$r:000063B0                 public ??_R4CCoderMT@NCoderMixer2@@6B@
.rdata$r:000063B0 ; const NCoderMixer2::CCoderMT::`RTTI Complete Object Locator'
.rdata$r:000063B0 ??_R4CCoderMT@NCoderMixer2@@6B@ db    0 ; DATA XREF: .rdata:00006354o
.rdata$r:000063B1                 db    0
.rdata$r:000063B2                 db    0
.rdata$r:000063B3                 db    0
.rdata$r:000063B4                 db    0
.rdata$r:000063B5                 db    0
.rdata$r:000063B6                 db    0
.rdata$r:000063B7                 db    0
.rdata$r:000063B8                 db    0
.rdata$r:000063B9                 db    0
.rdata$r:000063BA                 db    0
.rdata$r:000063BB                 db    0
.rdata$r:000063BC                 dd offset ??_R0?AVCCoderMT@NCoderMixer2@@@8 ; NCoderMixer2::CCoderMT `RTTI Type Descriptor'
.rdata$r:000063C0                 dd offset ??_R3CCoderMT@NCoderMixer2@@8 ; NCoderMixer2::CCoderMT::`RTTI Class Hierarchy Descriptor'
.rdata$r:000063C0 _rdata$r        ends
.rdata$r:000063C0
.data:000063C4 ; ===========================================================================
.data:000063C4
.data:000063C4 ; Segment type: Pure data
.data:000063C4 ; Segment permissions: Read/Write
.data:000063C4 _data           segment dword public 'DATA' use32
.data:000063C4                 assume cs:_data
.data:000063C4                 ;org 63C4h
.data:000063C4 ; COMDAT (pick any)
.data:000063C4                 public ??_R0?AVCCoderMT@NCoderMixer2@@@8
.data:000063C4 ; class NCoderMixer2::CCoderMT `RTTI Type Descriptor'
.data:000063C4 ??_R0?AVCCoderMT@NCoderMixer2@@@8 dd offset ??_7type_info@@6B@
.data:000063C4                                         ; DATA XREF: .rdata$r:000063BCo
.data:000063C4                                         ; .rdata$r:NCoderMixer2::CCoderMT::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000063C4                                         ; const type_info::`vftable'
.data:000063C8                 db    0
.data:000063C9                 db    0
.data:000063CA                 db    0
.data:000063CB                 db    0
.data:000063CC                 db  2Eh ; .
.data:000063CD                 db  3Fh ; ?
.data:000063CE                 db  41h ; A
.data:000063CF                 db  56h ; V
.data:000063D0                 db  43h ; C
.data:000063D1                 db  43h ; C
.data:000063D2                 db  6Fh ; o
.data:000063D3                 db  64h ; d
.data:000063D4                 db  65h ; e
.data:000063D5                 db  72h ; r
.data:000063D6                 db  4Dh ; M
.data:000063D7                 db  54h ; T
.data:000063D8                 db  40h ; @
.data:000063D9                 db  4Eh ; N
.data:000063DA                 db  43h ; C
.data:000063DB                 db  6Fh ; o
.data:000063DC                 db  64h ; d
.data:000063DD                 db  65h ; e
.data:000063DE                 db  72h ; r
.data:000063DF                 db  4Dh ; M
.data:000063E0                 db  69h ; i
.data:000063E1                 db  78h ; x
.data:000063E2                 db  65h ; e
.data:000063E3                 db  72h ; r
.data:000063E4                 db  32h ; 2
.data:000063E5                 db  40h ; @
.data:000063E6                 db  40h ; @
.data:000063E7                 db    0
.data:000063E7 _data           ends
.data:000063E7
.rdata$r:000063E8 ; ===========================================================================
.rdata$r:000063E8
.rdata$r:000063E8 ; Segment type: Pure data
.rdata$r:000063E8 ; Segment permissions: Read
.rdata$r:000063E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000063E8                 assume cs:_rdata$r
.rdata$r:000063E8                 ;org 63E8h
.rdata$r:000063E8 ; COMDAT (pick any)
.rdata$r:000063E8                 public ??_R3CCoderMT@NCoderMixer2@@8
.rdata$r:000063E8 ; NCoderMixer2::CCoderMT::`RTTI Class Hierarchy Descriptor'
.rdata$r:000063E8 ??_R3CCoderMT@NCoderMixer2@@8 db    0   ; DATA XREF: .rdata$r:000063C0o
.rdata$r:000063E8                                         ; .rdata$r:00006420o
.rdata$r:000063E9                 db    0
.rdata$r:000063EA                 db    0
.rdata$r:000063EB                 db    0
.rdata$r:000063EC                 db    1
.rdata$r:000063ED                 db    0
.rdata$r:000063EE                 db    0
.rdata$r:000063EF                 db    0
.rdata$r:000063F0                 db    3
.rdata$r:000063F1                 db    0
.rdata$r:000063F2                 db    0
.rdata$r:000063F3                 db    0
.rdata$r:000063F4                 dd offset ??_R2CCoderMT@NCoderMixer2@@8 ; NCoderMixer2::CCoderMT::`RTTI Base Class Array'
.rdata$r:000063F4 _rdata$r        ends
.rdata$r:000063F4
.rdata$r:000063F8 ; ===========================================================================
.rdata$r:000063F8
.rdata$r:000063F8 ; Segment type: Pure data
.rdata$r:000063F8 ; Segment permissions: Read
.rdata$r:000063F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000063F8                 assume cs:_rdata$r
.rdata$r:000063F8                 ;org 63F8h
.rdata$r:000063F8 ; COMDAT (pick any)
.rdata$r:000063F8                 public ??_R2CCoderMT@NCoderMixer2@@8
.rdata$r:000063F8 ; NCoderMixer2::CCoderMT::`RTTI Base Class Array'
.rdata$r:000063F8 ??_R2CCoderMT@NCoderMixer2@@8 dd offset ??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8
.rdata$r:000063F8                                         ; DATA XREF: .rdata$r:000063F4o
.rdata$r:000063F8                                         ; NCoderMixer2::CCoderMT::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000063FC                 dd offset ??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8 ; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (24,-1,0,64)'
.rdata$r:00006400                 dd offset ??_R1A@?0A@EA@CVirtThread@@8 ; CVirtThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006404                 db    0
.rdata$r:00006405                 align 4
.rdata$r:00006405 _rdata$r        ends
.rdata$r:00006405
.rdata$r:00006408 ; ===========================================================================
.rdata$r:00006408
.rdata$r:00006408 ; Segment type: Pure data
.rdata$r:00006408 ; Segment permissions: Read
.rdata$r:00006408 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006408                 assume cs:_rdata$r
.rdata$r:00006408                 ;org 6408h
.rdata$r:00006408 ; COMDAT (pick any)
.rdata$r:00006408                 public ??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8
.rdata$r:00006408 ; NCoderMixer2::CCoderMT::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006408 ??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8 dd offset ??_R0?AVCCoderMT@NCoderMixer2@@@8
.rdata$r:00006408                                         ; DATA XREF: .rdata$r:NCoderMixer2::CCoderMT::`RTTI Base Class Array'o
.rdata$r:00006408                                         ; NCoderMixer2::CCoderMT `RTTI Type Descriptor'
.rdata$r:0000640C                 db    2
.rdata$r:0000640D                 db    0
.rdata$r:0000640E                 db    0
.rdata$r:0000640F                 db    0
.rdata$r:00006410                 db    0
.rdata$r:00006411                 db    0
.rdata$r:00006412                 db    0
.rdata$r:00006413                 db    0
.rdata$r:00006414                 db 0FFh
.rdata$r:00006415                 db 0FFh
.rdata$r:00006416                 db 0FFh
.rdata$r:00006417                 db 0FFh
.rdata$r:00006418                 db    0
.rdata$r:00006419                 db    0
.rdata$r:0000641A                 db    0
.rdata$r:0000641B                 db    0
.rdata$r:0000641C                 db  40h ; @
.rdata$r:0000641D                 db    0
.rdata$r:0000641E                 db    0
.rdata$r:0000641F                 db    0
.rdata$r:00006420                 dd offset ??_R3CCoderMT@NCoderMixer2@@8 ; NCoderMixer2::CCoderMT::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006420 _rdata$r        ends
.rdata$r:00006420
.rdata$r:00006424 ; ===========================================================================
.rdata$r:00006424
.rdata$r:00006424 ; Segment type: Pure data
.rdata$r:00006424 ; Segment permissions: Read
.rdata$r:00006424 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006424                 assume cs:_rdata$r
.rdata$r:00006424                 ;org 6424h
.rdata$r:00006424 ; COMDAT (pick any)
.rdata$r:00006424                 public ??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8
.rdata$r:00006424 ; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (24, -1, 0, 64)'
.rdata$r:00006424 ??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8 dd offset ??_R0?AVCCoder@NCoderMixer2@@@8
.rdata$r:00006424                                         ; DATA XREF: .rdata$r:000063FCo
.rdata$r:00006424                                         ; NCoderMixer2::CCoder `RTTI Type Descriptor'
.rdata$r:00006428                 db    0
.rdata$r:00006429                 db    0
.rdata$r:0000642A                 db    0
.rdata$r:0000642B                 db    0
.rdata$r:0000642C                 db  18h
.rdata$r:0000642D                 db    0
.rdata$r:0000642E                 db    0
.rdata$r:0000642F                 db    0
.rdata$r:00006430                 db 0FFh
.rdata$r:00006431                 db 0FFh
.rdata$r:00006432                 db 0FFh
.rdata$r:00006433                 db 0FFh
.rdata$r:00006434                 db    0
.rdata$r:00006435                 db    0
.rdata$r:00006436                 db    0
.rdata$r:00006437                 db    0
.rdata$r:00006438                 db  40h ; @
.rdata$r:00006439                 db    0
.rdata$r:0000643A                 db    0
.rdata$r:0000643B                 db    0
.rdata$r:0000643C                 dd offset ??_R3CCoder@NCoderMixer2@@8 ; NCoderMixer2::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000643C _rdata$r        ends
.rdata$r:0000643C
.data:00006440 ; ===========================================================================
.data:00006440
.data:00006440 ; Segment type: Pure data
.data:00006440 ; Segment permissions: Read/Write
.data:00006440 _data           segment dword public 'DATA' use32
.data:00006440                 assume cs:_data
.data:00006440                 ;org 6440h
.data:00006440 ; COMDAT (pick any)
.data:00006440                 public ??_R0?AVCCoder@NCoderMixer2@@@8
.data:00006440 ; class NCoderMixer2::CCoder `RTTI Type Descriptor'
.data:00006440 ??_R0?AVCCoder@NCoderMixer2@@@8 dd offset ??_7type_info@@6B@
.data:00006440                                         ; DATA XREF: .rdata$r:NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (24,-1,0,64)'o
.data:00006440                                         ; .rdata$r:NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00006440                                         ; const type_info::`vftable'
.data:00006444                 align 8
.data:00006448 a_?avccoder@nco db '.?AVCCoder@NCoderMixer2@@',0
.data:00006462                 align 4
.data:00006462 _data           ends
.data:00006462
.rdata$r:00006464 ; ===========================================================================
.rdata$r:00006464
.rdata$r:00006464 ; Segment type: Pure data
.rdata$r:00006464 ; Segment permissions: Read
.rdata$r:00006464 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006464                 assume cs:_rdata$r
.rdata$r:00006464                 ;org 6464h
.rdata$r:00006464 ; COMDAT (pick any)
.rdata$r:00006464                 public ??_R3CCoder@NCoderMixer2@@8
.rdata$r:00006464 ; NCoderMixer2::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006464 ??_R3CCoder@NCoderMixer2@@8 db    0     ; DATA XREF: .rdata$r:0000643Co
.rdata$r:00006464                                         ; .rdata$r:00006494o
.rdata$r:00006465                 db    0
.rdata$r:00006466                 db    0
.rdata$r:00006467                 db    0
.rdata$r:00006468                 db    0
.rdata$r:00006469                 db    0
.rdata$r:0000646A                 db    0
.rdata$r:0000646B                 db    0
.rdata$r:0000646C                 db    1
.rdata$r:0000646D                 db    0
.rdata$r:0000646E                 db    0
.rdata$r:0000646F                 db    0
.rdata$r:00006470                 dd offset ??_R2CCoder@NCoderMixer2@@8 ; NCoderMixer2::CCoder::`RTTI Base Class Array'
.rdata$r:00006470 _rdata$r        ends
.rdata$r:00006470
.rdata$r:00006474 ; ===========================================================================
.rdata$r:00006474
.rdata$r:00006474 ; Segment type: Pure data
.rdata$r:00006474 ; Segment permissions: Read
.rdata$r:00006474 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006474                 assume cs:_rdata$r
.rdata$r:00006474                 ;org 6474h
.rdata$r:00006474 ; COMDAT (pick any)
.rdata$r:00006474                 public ??_R2CCoder@NCoderMixer2@@8
.rdata$r:00006474 ; NCoderMixer2::CCoder::`RTTI Base Class Array'
.rdata$r:00006474 ??_R2CCoder@NCoderMixer2@@8 dd offset ??_R1A@?0A@EA@CCoder@NCoderMixer2@@8
.rdata$r:00006474                                         ; DATA XREF: .rdata$r:00006470o
.rdata$r:00006474                                         ; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00006478                 db    0
.rdata$r:00006479                 align 4
.rdata$r:00006479 _rdata$r        ends
.rdata$r:00006479
.rdata$r:0000647C ; ===========================================================================
.rdata$r:0000647C
.rdata$r:0000647C ; Segment type: Pure data
.rdata$r:0000647C ; Segment permissions: Read
.rdata$r:0000647C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000647C                 assume cs:_rdata$r
.rdata$r:0000647C                 ;org 647Ch
.rdata$r:0000647C ; COMDAT (pick any)
.rdata$r:0000647C                 public ??_R1A@?0A@EA@CCoder@NCoderMixer2@@8
.rdata$r:0000647C ; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000647C ??_R1A@?0A@EA@CCoder@NCoderMixer2@@8 dd offset ??_R0?AVCCoder@NCoderMixer2@@@8
.rdata$r:0000647C                                         ; DATA XREF: .rdata$r:NCoderMixer2::CCoder::`RTTI Base Class Array'o
.rdata$r:0000647C                                         ; NCoderMixer2::CCoder `RTTI Type Descriptor'
.rdata$r:00006480                 db    0
.rdata$r:00006481                 db    0
.rdata$r:00006482                 db    0
.rdata$r:00006483                 db    0
.rdata$r:00006484                 db    0
.rdata$r:00006485                 db    0
.rdata$r:00006486                 db    0
.rdata$r:00006487                 db    0
.rdata$r:00006488                 db 0FFh
.rdata$r:00006489                 db 0FFh
.rdata$r:0000648A                 db 0FFh
.rdata$r:0000648B                 db 0FFh
.rdata$r:0000648C                 db    0
.rdata$r:0000648D                 db    0
.rdata$r:0000648E                 db    0
.rdata$r:0000648F                 db    0
.rdata$r:00006490                 db  40h ; @
.rdata$r:00006491                 db    0
.rdata$r:00006492                 db    0
.rdata$r:00006493                 db    0
.rdata$r:00006494                 dd offset ??_R3CCoder@NCoderMixer2@@8 ; NCoderMixer2::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006494 _rdata$r        ends
.rdata$r:00006494
.rdata$r:00006498 ; ===========================================================================
.rdata$r:00006498
.rdata$r:00006498 ; Segment type: Pure data
.rdata$r:00006498 ; Segment permissions: Read
.rdata$r:00006498 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006498                 assume cs:_rdata$r
.rdata$r:00006498                 ;org 6498h
.rdata$r:00006498 ; COMDAT (pick any)
.rdata$r:00006498                 public ??_R1A@?0A@EA@CVirtThread@@8
.rdata$r:00006498 ; CVirtThread::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00006498 ??_R1A@?0A@EA@CVirtThread@@8 dd offset ??_R0?AUCVirtThread@@@8
.rdata$r:00006498                                         ; DATA XREF: .rdata$r:00006400o
.rdata$r:00006498                                         ; .rdata$r:CVirtThread::`RTTI Base Class Array'o
.rdata$r:00006498                                         ; CVirtThread `RTTI Type Descriptor'
.rdata$r:0000649C                 db    0
.rdata$r:0000649D                 db    0
.rdata$r:0000649E                 db    0
.rdata$r:0000649F                 db    0
.rdata$r:000064A0                 db    0
.rdata$r:000064A1                 db    0
.rdata$r:000064A2                 db    0
.rdata$r:000064A3                 db    0
.rdata$r:000064A4                 db 0FFh
.rdata$r:000064A5                 db 0FFh
.rdata$r:000064A6                 db 0FFh
.rdata$r:000064A7                 db 0FFh
.rdata$r:000064A8                 db    0
.rdata$r:000064A9                 db    0
.rdata$r:000064AA                 db    0
.rdata$r:000064AB                 db    0
.rdata$r:000064AC                 db  40h ; @
.rdata$r:000064AD                 db    0
.rdata$r:000064AE                 db    0
.rdata$r:000064AF                 db    0
.rdata$r:000064B0                 dd offset ??_R3CVirtThread@@8 ; CVirtThread::`RTTI Class Hierarchy Descriptor'
.rdata$r:000064B0 _rdata$r        ends
.rdata$r:000064B0
.data:000064B4 ; ===========================================================================
.data:000064B4
.data:000064B4 ; Segment type: Pure data
.data:000064B4 ; Segment permissions: Read/Write
.data:000064B4 _data           segment dword public 'DATA' use32
.data:000064B4                 assume cs:_data
.data:000064B4                 ;org 64B4h
.data:000064B4 ; COMDAT (pick any)
.data:000064B4                 public ??_R0?AUCVirtThread@@@8
.data:000064B4 ; struct CVirtThread `RTTI Type Descriptor'
.data:000064B4 ??_R0?AUCVirtThread@@@8 dd offset ??_7type_info@@6B@
.data:000064B4                                         ; DATA XREF: .rdata$r:CVirtThread::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000064B4                                         ; .rdata$r:00006604o
.data:000064B4                                         ; const type_info::`vftable'
.data:000064B8                 db    0
.data:000064B9                 db    0
.data:000064BA                 db    0
.data:000064BB                 db    0
.data:000064BC                 db  2Eh ; .
.data:000064BD                 db  3Fh ; ?
.data:000064BE                 db  41h ; A
.data:000064BF                 db  55h ; U
.data:000064C0                 db  43h ; C
.data:000064C1                 db  56h ; V
.data:000064C2                 db  69h ; i
.data:000064C3                 db  72h ; r
.data:000064C4                 db  74h ; t
.data:000064C5                 db  54h ; T
.data:000064C6                 db  68h ; h
.data:000064C7                 db  72h ; r
.data:000064C8                 db  65h ; e
.data:000064C9                 db  61h ; a
.data:000064CA                 db  64h ; d
.data:000064CB                 db  40h ; @
.data:000064CC                 db  40h ; @
.data:000064CD                 db    0
.data:000064CE                 align 10h
.data:000064CE _data           ends
.data:000064CE
.rdata$r:000064D0 ; ===========================================================================
.rdata$r:000064D0
.rdata$r:000064D0 ; Segment type: Pure data
.rdata$r:000064D0 ; Segment permissions: Read
.rdata$r:000064D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000064D0                 assume cs:_rdata$r
.rdata$r:000064D0                 ;org 64D0h
.rdata$r:000064D0 ; COMDAT (pick any)
.rdata$r:000064D0                 public ??_R3CVirtThread@@8
.rdata$r:000064D0 ; CVirtThread::`RTTI Class Hierarchy Descriptor'
.rdata$r:000064D0 ??_R3CVirtThread@@8 db    0             ; DATA XREF: .rdata$r:000064B0o
.rdata$r:000064D0                                         ; .rdata$r:00006608o
.rdata$r:000064D1                 db    0
.rdata$r:000064D2                 db    0
.rdata$r:000064D3                 db    0
.rdata$r:000064D4                 db    0
.rdata$r:000064D5                 db    0
.rdata$r:000064D6                 db    0
.rdata$r:000064D7                 db    0
.rdata$r:000064D8                 db    1
.rdata$r:000064D9                 db    0
.rdata$r:000064DA                 db    0
.rdata$r:000064DB                 db    0
.rdata$r:000064DC                 dd offset ??_R2CVirtThread@@8 ; CVirtThread::`RTTI Base Class Array'
.rdata$r:000064DC _rdata$r        ends
.rdata$r:000064DC
.rdata$r:000064E0 ; ===========================================================================
.rdata$r:000064E0
.rdata$r:000064E0 ; Segment type: Pure data
.rdata$r:000064E0 ; Segment permissions: Read
.rdata$r:000064E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000064E0                 assume cs:_rdata$r
.rdata$r:000064E0                 ;org 64E0h
.rdata$r:000064E0 ; COMDAT (pick any)
.rdata$r:000064E0                 public ??_R2CVirtThread@@8
.rdata$r:000064E0 ; CVirtThread::`RTTI Base Class Array'
.rdata$r:000064E0 ??_R2CVirtThread@@8 dd offset ??_R1A@?0A@EA@CVirtThread@@8
.rdata$r:000064E0                                         ; DATA XREF: .rdata$r:000064DCo
.rdata$r:000064E0                                         ; CVirtThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000064E4                 db    0
.rdata$r:000064E5                 align 4
.rdata$r:000064E5 _rdata$r        ends
.rdata$r:000064E5
.text:000064E8 ; ===========================================================================
.text:000064E8
.text:000064E8 ; Segment type: Pure code
.text:000064E8 ; Segment permissions: Read/Execute
.text:000064E8 _text           segment para public 'CODE' use32
.text:000064E8                 assume cs:_text
.text:000064E8                 ;org 64E8h
.text:000064E8 ; COMDAT (pick any)
.text:000064E8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000064E8
.text:000064E8 ; =============== S U B R O U T I N E =======================================
.text:000064E8
.text:000064E8 ; Attributes: bp-based frame
.text:000064E8
.text:000064E8 ; _DWORD __thiscall CVirtThread::~CVirtThread(CVirtThread *__hidden this)
.text:000064E8                 public ??1CVirtThread@@QAE@XZ
.text:000064E8 ??1CVirtThread@@QAE@XZ proc near        ; CODE XREF: NCoderMixer2::CCoderMT::~CCoderMT(void)+88p
.text:000064E8                                         ; __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$1+3j
.text:000064E8
.text:000064E8 var_10          = dword ptr -10h
.text:000064E8 var_C           = dword ptr -0Ch
.text:000064E8 var_4           = dword ptr -4
.text:000064E8
.text:000064E8                 push    ebp
.text:000064E9                 mov     ebp, esp
.text:000064EB                 push    0FFFFFFFFh
.text:000064ED                 push    offset __ehhandler$??1CVirtThread@@QAE@XZ
.text:000064F2                 mov     eax, large fs:0
.text:000064F8                 push    eax
.text:000064F9                 push    ecx
.text:000064FA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00006501                 mov     eax, dword ptr ds:___security_cookie
.text:00006506                 xor     eax, ebp
.text:00006508                 push    eax
.text:00006509                 lea     eax, [ebp+var_C]
.text:0000650C                 mov     large fs:0, eax
.text:00006512                 mov     [ebp+var_10], ecx
.text:00006515                 mov     eax, [ebp+var_10]
.text:00006518                 mov     dword ptr [eax], offset ??_7CVirtThread@@6B@ ; const CVirtThread::`vftable'
.text:0000651E                 mov     [ebp+var_4], 2
.text:00006525                 mov     ecx, [ebp+var_10] ; this
.text:00006528                 call    ?WaitThreadFinish@CVirtThread@@QAEXXZ ; CVirtThread::WaitThreadFinish(void)
.text:0000652D                 mov     byte ptr [ebp+var_4], 1
.text:00006531                 mov     ecx, [ebp+var_10]
.text:00006534                 add     ecx, 0Ch        ; this
.text:00006537                 call    ??1CThread@NWindows@@QAE@XZ ; NWindows::CThread::~CThread(void)
.text:0000653C                 mov     byte ptr [ebp+var_4], 0
.text:00006540                 mov     ecx, [ebp+var_10]
.text:00006543                 add     ecx, 8          ; this
.text:00006546                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:0000654B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006552                 mov     ecx, [ebp+var_10]
.text:00006555                 add     ecx, 4          ; this
.text:00006558                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:0000655D                 mov     ecx, [ebp+var_C]
.text:00006560                 mov     large fs:0, ecx
.text:00006567                 pop     ecx
.text:00006568                 add     esp, 10h
.text:0000656B                 cmp     ebp, esp
.text:0000656D                 call    __RTC_CheckEsp
.text:00006572                 mov     esp, ebp
.text:00006574                 pop     ebp
.text:00006575                 retn
.text:00006575 ??1CVirtThread@@QAE@XZ endp
.text:00006575
.text:00006575 ; ---------------------------------------------------------------------------
.text:00006576                 align 4
.text:00006576 _text           ends
.text:00006576
.text$x:00006578 ; ===========================================================================
.text$x:00006578
.text$x:00006578 ; Segment type: Pure code
.text$x:00006578 ; Segment permissions: Read/Execute
.text$x:00006578 _text$x         segment para public 'CODE' use32
.text$x:00006578                 assume cs:_text$x
.text$x:00006578                 ;org 6578h
.text$x:00006578 ; COMDAT (pick associative to section at 64E8)
.text$x:00006578                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00006578
.text$x:00006578 ; =============== S U B R O U T I N E =======================================
.text$x:00006578
.text$x:00006578
.text$x:00006578 __unwindfunclet$??1CVirtThread@@QAE@XZ$0 proc near
.text$x:00006578                                         ; DATA XREF: .xdata$x:000065C0o
.text$x:00006578                 mov     ecx, [ebp-10h]
.text$x:0000657B                 add     ecx, 4          ; this
.text$x:0000657E                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:0000657E __unwindfunclet$??1CVirtThread@@QAE@XZ$0 endp
.text$x:0000657E
.text$x:00006583
.text$x:00006583 ; =============== S U B R O U T I N E =======================================
.text$x:00006583
.text$x:00006583
.text$x:00006583 __unwindfunclet$??1CVirtThread@@QAE@XZ$1 proc near
.text$x:00006583                                         ; DATA XREF: .xdata$x:000065C8o
.text$x:00006583                 mov     ecx, [ebp-10h]
.text$x:00006586                 add     ecx, 8          ; this
.text$x:00006589                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00006589 __unwindfunclet$??1CVirtThread@@QAE@XZ$1 endp
.text$x:00006589
.text$x:0000658E
.text$x:0000658E ; =============== S U B R O U T I N E =======================================
.text$x:0000658E
.text$x:0000658E
.text$x:0000658E __unwindfunclet$??1CVirtThread@@QAE@XZ$2 proc near
.text$x:0000658E                                         ; DATA XREF: .xdata$x:000065D0o
.text$x:0000658E                 mov     ecx, [ebp-10h]
.text$x:00006591                 add     ecx, 0Ch        ; this
.text$x:00006594                 jmp     ??1CThread@NWindows@@QAE@XZ ; NWindows::CThread::~CThread(void)
.text$x:00006594 __unwindfunclet$??1CVirtThread@@QAE@XZ$2 endp
.text$x:00006594
.text$x:00006599
.text$x:00006599 ; =============== S U B R O U T I N E =======================================
.text$x:00006599
.text$x:00006599
.text$x:00006599 __ehhandler$??1CVirtThread@@QAE@XZ proc near
.text$x:00006599                                         ; DATA XREF: CVirtThread::~CVirtThread(void)+5o
.text$x:00006599
.text$x:00006599 arg_4           = dword ptr  8
.text$x:00006599
.text$x:00006599                 mov     edx, [esp+arg_4]
.text$x:0000659D                 lea     eax, [edx+0Ch]
.text$x:000065A0                 mov     ecx, [edx-8]
.text$x:000065A3                 xor     ecx, eax
.text$x:000065A5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000065AA                 mov     eax, offset __ehfuncinfo$??1CVirtThread@@QAE@XZ
.text$x:000065AF                 jmp     ___CxxFrameHandler3
.text$x:000065AF __ehhandler$??1CVirtThread@@QAE@XZ endp
.text$x:000065AF
.text$x:000065AF _text$x         ends
.text$x:000065AF
.rdata:000065B4 ; ===========================================================================
.rdata:000065B4
.rdata:000065B4 ; Segment type: Pure data
.rdata:000065B4 ; Segment permissions: Read
.rdata:000065B4 _rdata          segment dword public 'DATA' use32
.rdata:000065B4                 assume cs:_rdata
.rdata:000065B4                 ;org 65B4h
.rdata:000065B4 ; COMDAT (pick largest)
.rdata:000065B4                 dd offset ??_R4CVirtThread@@6B@ ; const CVirtThread::`RTTI Complete Object Locator'
.rdata:000065B8                 public ??_7CVirtThread@@6B@
.rdata:000065B8 ; const CVirtThread::`vftable'
.rdata:000065B8 ??_7CVirtThread@@6B@ dd offset __purecall
.rdata:000065B8                                         ; DATA XREF: CVirtThread::~CVirtThread(void)+30o
.rdata:000065B8 _rdata          ends
.rdata:000065B8
.xdata$x:000065BC ; ===========================================================================
.xdata$x:000065BC
.xdata$x:000065BC ; Segment type: Pure data
.xdata$x:000065BC ; Segment permissions: Read
.xdata$x:000065BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000065BC                 assume cs:_xdata$x
.xdata$x:000065BC                 ;org 65BCh
.xdata$x:000065BC ; COMDAT (pick associative to section at 64E8)
.xdata$x:000065BC __unwindtable$??1CVirtThread@@QAE@XZ db 0FFh
.xdata$x:000065BC                                         ; DATA XREF: .xdata$x:000065DCo
.xdata$x:000065BD                 db 0FFh
.xdata$x:000065BE                 db 0FFh
.xdata$x:000065BF                 db 0FFh
.xdata$x:000065C0                 dd offset __unwindfunclet$??1CVirtThread@@QAE@XZ$0
.xdata$x:000065C4                 align 8
.xdata$x:000065C8                 dd offset __unwindfunclet$??1CVirtThread@@QAE@XZ$1
.xdata$x:000065CC                 db    1
.xdata$x:000065CD                 db    0
.xdata$x:000065CE                 db    0
.xdata$x:000065CF                 db    0
.xdata$x:000065D0                 dd offset __unwindfunclet$??1CVirtThread@@QAE@XZ$2
.xdata$x:000065D4 __ehfuncinfo$??1CVirtThread@@QAE@XZ db  22h ; "
.xdata$x:000065D4                                         ; DATA XREF: __ehhandler$??1CVirtThread@@QAE@XZ+11o
.xdata$x:000065D5                 db    5
.xdata$x:000065D6                 db  93h ; ô
.xdata$x:000065D7                 db  19h
.xdata$x:000065D8                 db    3
.xdata$x:000065D9                 db    0
.xdata$x:000065DA                 db    0
.xdata$x:000065DB                 db    0
.xdata$x:000065DC                 dd offset __unwindtable$??1CVirtThread@@QAE@XZ
.xdata$x:000065E0                 db    0
.xdata$x:000065E1                 db    0
.xdata$x:000065E2                 db    0
.xdata$x:000065E3                 db    0
.xdata$x:000065E4                 db    0
.xdata$x:000065E5                 db    0
.xdata$x:000065E6                 db    0
.xdata$x:000065E7                 db    0
.xdata$x:000065E8                 db    0
.xdata$x:000065E9                 db    0
.xdata$x:000065EA                 db    0
.xdata$x:000065EB                 db    0
.xdata$x:000065EC                 db    0
.xdata$x:000065ED                 db    0
.xdata$x:000065EE                 db    0
.xdata$x:000065EF                 db    0
.xdata$x:000065F0                 db    0
.xdata$x:000065F1                 db    0
.xdata$x:000065F2                 db    0
.xdata$x:000065F3                 db    0
.xdata$x:000065F4                 db    1
.xdata$x:000065F5                 db    0
.xdata$x:000065F6                 db    0
.xdata$x:000065F7                 db    0
.xdata$x:000065F7 _xdata$x        ends
.xdata$x:000065F7
.rdata$r:000065F8 ; ===========================================================================
.rdata$r:000065F8
.rdata$r:000065F8 ; Segment type: Pure data
.rdata$r:000065F8 ; Segment permissions: Read
.rdata$r:000065F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000065F8                 assume cs:_rdata$r
.rdata$r:000065F8                 ;org 65F8h
.rdata$r:000065F8 ; COMDAT (pick any)
.rdata$r:000065F8                 public ??_R4CVirtThread@@6B@
.rdata$r:000065F8 ; const CVirtThread::`RTTI Complete Object Locator'
.rdata$r:000065F8 ??_R4CVirtThread@@6B@ db    0           ; DATA XREF: .rdata:000065B4o
.rdata$r:000065F9                 db    0
.rdata$r:000065FA                 db    0
.rdata$r:000065FB                 db    0
.rdata$r:000065FC                 db    0
.rdata$r:000065FD                 db    0
.rdata$r:000065FE                 db    0
.rdata$r:000065FF                 db    0
.rdata$r:00006600                 db    0
.rdata$r:00006601                 db    0
.rdata$r:00006602                 db    0
.rdata$r:00006603                 db    0
.rdata$r:00006604                 dd offset ??_R0?AUCVirtThread@@@8 ; CVirtThread `RTTI Type Descriptor'
.rdata$r:00006608                 dd offset ??_R3CVirtThread@@8 ; CVirtThread::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006608 _rdata$r        ends
.rdata$r:00006608
.text:0000660C ; ===========================================================================
.text:0000660C
.text:0000660C ; Segment type: Pure code
.text:0000660C ; Segment permissions: Read/Execute
.text:0000660C _text           segment para public 'CODE' use32
.text:0000660C                 assume cs:_text
.text:0000660C                 ;org 660Ch
.text:0000660C ; COMDAT (pick any)
.text:0000660C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000660C
.text:0000660C ; =============== S U B R O U T I N E =======================================
.text:0000660C
.text:0000660C ; Attributes: bp-based frame
.text:0000660C
.text:0000660C ; _DWORD __thiscall NWindows::CThread::~CThread(NWindows::CThread *__hidden this)
.text:0000660C                 public ??1CThread@NWindows@@QAE@XZ
.text:0000660C ??1CThread@NWindows@@QAE@XZ proc near   ; CODE XREF: CVirtThread::~CVirtThread(void)+4Fp
.text:0000660C                                         ; __unwindfunclet$??1CVirtThread@@QAE@XZ$2+6j
.text:0000660C
.text:0000660C var_4           = dword ptr -4
.text:0000660C
.text:0000660C                 push    ebp
.text:0000660D                 mov     ebp, esp
.text:0000660F                 push    ecx
.text:00006610                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006617                 mov     [ebp+var_4], ecx
.text:0000661A                 mov     ecx, [ebp+var_4] ; this
.text:0000661D                 call    ?Close@CThread@NWindows@@QAEIXZ ; NWindows::CThread::Close(void)
.text:00006622                 add     esp, 4
.text:00006625                 cmp     ebp, esp
.text:00006627                 call    __RTC_CheckEsp
.text:0000662C                 mov     esp, ebp
.text:0000662E                 pop     ebp
.text:0000662F                 retn
.text:0000662F ??1CThread@NWindows@@QAE@XZ endp
.text:0000662F
.text:0000662F _text           ends
.text:0000662F
.text:00006630 ; ===========================================================================
.text:00006630
.text:00006630 ; Segment type: Pure code
.text:00006630 ; Segment permissions: Read/Execute
.text:00006630 _text           segment para public 'CODE' use32
.text:00006630                 assume cs:_text
.text:00006630                 ;org 6630h
.text:00006630 ; COMDAT (pick any)
.text:00006630                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006630
.text:00006630 ; =============== S U B R O U T I N E =======================================
.text:00006630
.text:00006630 ; Attributes: bp-based frame
.text:00006630
.text:00006630 ; unsigned int __thiscall NWindows::CThread::Close(NWindows::CThread *__hidden this)
.text:00006630                 public ?Close@CThread@NWindows@@QAEIXZ
.text:00006630 ?Close@CThread@NWindows@@QAEIXZ proc near
.text:00006630                                         ; CODE XREF: NWindows::CThread::~CThread(void)+11p
.text:00006630
.text:00006630 var_4           = dword ptr -4
.text:00006630
.text:00006630                 push    ebp
.text:00006631                 mov     ebp, esp
.text:00006633                 push    ecx
.text:00006634                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000663B                 mov     [ebp+var_4], ecx
.text:0000663E                 mov     eax, [ebp+var_4]
.text:00006641                 push    eax
.text:00006642                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:00006647                 add     esp, 4
.text:0000664A                 cmp     ebp, esp
.text:0000664C                 call    __RTC_CheckEsp
.text:00006651                 mov     esp, ebp
.text:00006653                 pop     ebp
.text:00006654                 retn
.text:00006654 ?Close@CThread@NWindows@@QAEIXZ endp
.text:00006654
.text:00006654 ; ---------------------------------------------------------------------------
.text:00006655                 align 4
.text:00006655 _text           ends
.text:00006655
.text:00006658 ; ===========================================================================
.text:00006658
.text:00006658 ; Segment type: Pure code
.text:00006658 ; Segment permissions: Read/Execute
.text:00006658 _text           segment para public 'CODE' use32
.text:00006658                 assume cs:_text
.text:00006658                 ;org 6658h
.text:00006658 ; COMDAT (pick any)
.text:00006658                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006658
.text:00006658 ; =============== S U B R O U T I N E =======================================
.text:00006658
.text:00006658 ; Attributes: bp-based frame
.text:00006658
.text:00006658 ; _DWORD __thiscall NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(NWindows::NSynchronization::CAutoResetEvent *__hidden this)
.text:00006658                 public ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:00006658 ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:00006658                                         ; CODE XREF: CVirtThread::~CVirtThread(void)+5Ep
.text:00006658                                         ; CVirtThread::~CVirtThread(void)+70p ...
.text:00006658
.text:00006658 var_4           = dword ptr -4
.text:00006658
.text:00006658                 push    ebp
.text:00006659                 mov     ebp, esp
.text:0000665B                 push    ecx
.text:0000665C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006663                 mov     [ebp+var_4], ecx
.text:00006666                 mov     ecx, [ebp+var_4] ; this
.text:00006669                 call    ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent(void)
.text:0000666E                 add     esp, 4
.text:00006671                 cmp     ebp, esp
.text:00006673                 call    __RTC_CheckEsp
.text:00006678                 mov     esp, ebp
.text:0000667A                 pop     ebp
.text:0000667B                 retn
.text:0000667B ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:0000667B
.text:0000667B _text           ends
.text:0000667B
.text:0000667C ; ===========================================================================
.text:0000667C
.text:0000667C ; Segment type: Pure code
.text:0000667C ; Segment permissions: Read/Execute
.text:0000667C _text           segment para public 'CODE' use32
.text:0000667C                 assume cs:_text
.text:0000667C                 ;org 667Ch
.text:0000667C ; COMDAT (pick any)
.text:0000667C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000667C
.text:0000667C ; =============== S U B R O U T I N E =======================================
.text:0000667C
.text:0000667C ; Attributes: bp-based frame
.text:0000667C
.text:0000667C ; _DWORD __thiscall NWindows::NSynchronization::CBaseEvent::~CBaseEvent(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:0000667C                 public ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ
.text:0000667C ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:0000667C                                         ; CODE XREF: NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)+11p
.text:0000667C                                         ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)+11p
.text:0000667C
.text:0000667C var_4           = dword ptr -4
.text:0000667C
.text:0000667C                 push    ebp
.text:0000667D                 mov     ebp, esp
.text:0000667F                 push    ecx
.text:00006680                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006687                 mov     [ebp+var_4], ecx
.text:0000668A                 mov     ecx, [ebp+var_4] ; this
.text:0000668D                 call    ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Close(void)
.text:00006692                 add     esp, 4
.text:00006695                 cmp     ebp, esp
.text:00006697                 call    __RTC_CheckEsp
.text:0000669C                 mov     esp, ebp
.text:0000669E                 pop     ebp
.text:0000669F                 retn
.text:0000669F ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:0000669F
.text:0000669F _text           ends
.text:0000669F
.text:000066A0 ; ===========================================================================
.text:000066A0
.text:000066A0 ; Segment type: Pure code
.text:000066A0 ; Segment permissions: Read/Execute
.text:000066A0 _text           segment para public 'CODE' use32
.text:000066A0                 assume cs:_text
.text:000066A0                 ;org 66A0h
.text:000066A0 ; COMDAT (pick any)
.text:000066A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000066A0
.text:000066A0 ; =============== S U B R O U T I N E =======================================
.text:000066A0
.text:000066A0 ; Attributes: bp-based frame
.text:000066A0
.text:000066A0 ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Close(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:000066A0                 public ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:000066A0 ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:000066A0                                         ; CODE XREF: NWindows::NSynchronization::CBaseEvent::~CBaseEvent(void)+11p
.text:000066A0
.text:000066A0 var_4           = dword ptr -4
.text:000066A0
.text:000066A0                 push    ebp
.text:000066A1                 mov     ebp, esp
.text:000066A3                 push    ecx
.text:000066A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000066AB                 mov     [ebp+var_4], ecx
.text:000066AE                 mov     eax, [ebp+var_4]
.text:000066B1                 push    eax
.text:000066B2                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:000066B7                 add     esp, 4
.text:000066BA                 cmp     ebp, esp
.text:000066BC                 call    __RTC_CheckEsp
.text:000066C1                 mov     esp, ebp
.text:000066C3                 pop     ebp
.text:000066C4                 retn
.text:000066C4 ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:000066C4
.text:000066C4 ; ---------------------------------------------------------------------------
.text:000066C5                 align 4
.text:000066C5 _text           ends
.text:000066C5
.text:000066C8 ; ===========================================================================
.text:000066C8
.text:000066C8 ; Segment type: Pure code
.text:000066C8 ; Segment permissions: Read/Execute
.text:000066C8 _text           segment para public 'CODE' use32
.text:000066C8                 assume cs:_text
.text:000066C8                 ;org 66C8h
.text:000066C8 ; COMDAT (pick any)
.text:000066C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000066C8
.text:000066C8 ; =============== S U B R O U T I N E =======================================
.text:000066C8
.text:000066C8 ; Attributes: bp-based frame
.text:000066C8
.text:000066C8 ; _DWORD __thiscall NCoderMixer2::CCoder::~CCoder(NCoderMixer2::CCoder *__hidden this)
.text:000066C8                 public ??1CCoder@NCoderMixer2@@QAE@XZ
.text:000066C8 ??1CCoder@NCoderMixer2@@QAE@XZ proc near
.text:000066C8                                         ; CODE XREF: NCoderMixer2::CCoderMT::~CCoderMT(void)+9Ap
.text:000066C8                                         ; __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$0+6j
.text:000066C8
.text:000066C8 var_10          = dword ptr -10h
.text:000066C8 var_C           = dword ptr -0Ch
.text:000066C8 var_4           = dword ptr -4
.text:000066C8
.text:000066C8                 push    ebp
.text:000066C9                 mov     ebp, esp
.text:000066CB                 push    0FFFFFFFFh
.text:000066CD                 push    offset __ehhandler$??1CCoder@NCoderMixer2@@QAE@XZ
.text:000066D2                 mov     eax, large fs:0
.text:000066D8                 push    eax
.text:000066D9                 push    ecx
.text:000066DA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000066E1                 mov     eax, dword ptr ds:___security_cookie
.text:000066E6                 xor     eax, ebp
.text:000066E8                 push    eax
.text:000066E9                 lea     eax, [ebp+var_C]
.text:000066EC                 mov     large fs:0, eax
.text:000066F2                 mov     [ebp+var_10], ecx
.text:000066F5                 mov     [ebp+var_4], 2
.text:000066FC                 mov     ecx, [ebp+var_10]
.text:000066FF                 add     ecx, 28h ; '('
.text:00006702                 call    ??1?$CRecordVector@PB_K@@QAE@XZ ; CRecordVector<unsigned __int64 const *>::~CRecordVector<unsigned __int64 const *>(void)
.text:00006707                 mov     byte ptr [ebp+var_4], 1
.text:0000670B                 mov     ecx, [ebp+var_10]
.text:0000670E                 add     ecx, 1Ch
.text:00006711                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00006716                 mov     byte ptr [ebp+var_4], 0
.text:0000671A                 mov     ecx, [ebp+var_10]
.text:0000671D                 add     ecx, 4
.text:00006720                 call    ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>(void)
.text:00006725                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000672C                 mov     ecx, [ebp+var_10]
.text:0000672F                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00006734                 mov     ecx, [ebp+var_C]
.text:00006737                 mov     large fs:0, ecx
.text:0000673E                 pop     ecx
.text:0000673F                 add     esp, 10h
.text:00006742                 cmp     ebp, esp
.text:00006744                 call    __RTC_CheckEsp
.text:00006749                 mov     esp, ebp
.text:0000674B                 pop     ebp
.text:0000674C                 retn
.text:0000674C ??1CCoder@NCoderMixer2@@QAE@XZ endp
.text:0000674C
.text:0000674C ; ---------------------------------------------------------------------------
.text:0000674D                 align 10h
.text:0000674D _text           ends
.text:0000674D
.text$x:00006750 ; ===========================================================================
.text$x:00006750
.text$x:00006750 ; Segment type: Pure code
.text$x:00006750 ; Segment permissions: Read/Execute
.text$x:00006750 _text$x         segment para public 'CODE' use32
.text$x:00006750                 assume cs:_text$x
.text$x:00006750                 ;org 6750h
.text$x:00006750 ; COMDAT (pick associative to section at 66C8)
.text$x:00006750                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00006750
.text$x:00006750 ; =============== S U B R O U T I N E =======================================
.text$x:00006750
.text$x:00006750
.text$x:00006750 __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$0 proc near
.text$x:00006750                                         ; DATA XREF: .xdata$x:00006790o
.text$x:00006750                 mov     ecx, [ebp-10h]
.text$x:00006753                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00006753 __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$0 endp
.text$x:00006753
.text$x:00006758
.text$x:00006758 ; =============== S U B R O U T I N E =======================================
.text$x:00006758
.text$x:00006758
.text$x:00006758 __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$1 proc near
.text$x:00006758                                         ; DATA XREF: .xdata$x:00006798o
.text$x:00006758                 mov     ecx, [ebp-10h]
.text$x:0000675B                 add     ecx, 4
.text$x:0000675E                 jmp     ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>(void)
.text$x:0000675E __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$1 endp
.text$x:0000675E
.text$x:00006763
.text$x:00006763 ; =============== S U B R O U T I N E =======================================
.text$x:00006763
.text$x:00006763
.text$x:00006763 __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$2 proc near
.text$x:00006763                                         ; DATA XREF: .xdata$x:000067A0o
.text$x:00006763                 mov     ecx, [ebp-10h]
.text$x:00006766                 add     ecx, 1Ch
.text$x:00006769                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:00006769 __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$2 endp
.text$x:00006769
.text$x:0000676E
.text$x:0000676E ; =============== S U B R O U T I N E =======================================
.text$x:0000676E
.text$x:0000676E
.text$x:0000676E __ehhandler$??1CCoder@NCoderMixer2@@QAE@XZ proc near
.text$x:0000676E                                         ; DATA XREF: NCoderMixer2::CCoder::~CCoder(void)+5o
.text$x:0000676E
.text$x:0000676E arg_4           = dword ptr  8
.text$x:0000676E
.text$x:0000676E                 mov     edx, [esp+arg_4]
.text$x:00006772                 lea     eax, [edx+0Ch]
.text$x:00006775                 mov     ecx, [edx-8]
.text$x:00006778                 xor     ecx, eax
.text$x:0000677A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000677F                 mov     eax, offset __ehfuncinfo$??1CCoder@NCoderMixer2@@QAE@XZ
.text$x:00006784                 jmp     ___CxxFrameHandler3
.text$x:00006784 __ehhandler$??1CCoder@NCoderMixer2@@QAE@XZ endp
.text$x:00006784
.text$x:00006784 ; ---------------------------------------------------------------------------
.text$x:00006789                 align 4
.text$x:00006789 _text$x         ends
.text$x:00006789
.xdata$x:0000678C ; ===========================================================================
.xdata$x:0000678C
.xdata$x:0000678C ; Segment type: Pure data
.xdata$x:0000678C ; Segment permissions: Read
.xdata$x:0000678C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000678C                 assume cs:_xdata$x
.xdata$x:0000678C                 ;org 678Ch
.xdata$x:0000678C ; COMDAT (pick associative to section at 66C8)
.xdata$x:0000678C __unwindtable$??1CCoder@NCoderMixer2@@QAE@XZ db 0FFh
.xdata$x:0000678C                                         ; DATA XREF: .xdata$x:000067ACo
.xdata$x:0000678D                 db 0FFh
.xdata$x:0000678E                 db 0FFh
.xdata$x:0000678F                 db 0FFh
.xdata$x:00006790                 dd offset __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$0
.xdata$x:00006794                 align 8
.xdata$x:00006798                 dd offset __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$1
.xdata$x:0000679C                 db    1
.xdata$x:0000679D                 db    0
.xdata$x:0000679E                 db    0
.xdata$x:0000679F                 db    0
.xdata$x:000067A0                 dd offset __unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$2
.xdata$x:000067A4 __ehfuncinfo$??1CCoder@NCoderMixer2@@QAE@XZ db  22h ; "
.xdata$x:000067A4                                         ; DATA XREF: __ehhandler$??1CCoder@NCoderMixer2@@QAE@XZ+11o
.xdata$x:000067A5                 db    5
.xdata$x:000067A6                 db  93h ; ô
.xdata$x:000067A7                 db  19h
.xdata$x:000067A8                 db    3
.xdata$x:000067A9                 db    0
.xdata$x:000067AA                 db    0
.xdata$x:000067AB                 db    0
.xdata$x:000067AC                 dd offset __unwindtable$??1CCoder@NCoderMixer2@@QAE@XZ
.xdata$x:000067B0                 db    0
.xdata$x:000067B1                 db    0
.xdata$x:000067B2                 db    0
.xdata$x:000067B3                 db    0
.xdata$x:000067B4                 db    0
.xdata$x:000067B5                 db    0
.xdata$x:000067B6                 db    0
.xdata$x:000067B7                 db    0
.xdata$x:000067B8                 db    0
.xdata$x:000067B9                 db    0
.xdata$x:000067BA                 db    0
.xdata$x:000067BB                 db    0
.xdata$x:000067BC                 db    0
.xdata$x:000067BD                 db    0
.xdata$x:000067BE                 db    0
.xdata$x:000067BF                 db    0
.xdata$x:000067C0                 db    0
.xdata$x:000067C1                 db    0
.xdata$x:000067C2                 db    0
.xdata$x:000067C3                 db    0
.xdata$x:000067C4                 db    1
.xdata$x:000067C5                 db    0
.xdata$x:000067C6                 db    0
.xdata$x:000067C7                 db    0
.xdata$x:000067C7 _xdata$x        ends
.xdata$x:000067C7
.text:000067C8 ; ===========================================================================
.text:000067C8
.text:000067C8 ; Segment type: Pure code
.text:000067C8 ; Segment permissions: Read/Execute
.text:000067C8 _text           segment para public 'CODE' use32
.text:000067C8                 assume cs:_text
.text:000067C8                 ;org 67C8h
.text:000067C8 ; COMDAT (pick any)
.text:000067C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000067C8
.text:000067C8 ; =============== S U B R O U T I N E =======================================
.text:000067C8
.text:000067C8 ; Attributes: bp-based frame
.text:000067C8
.text:000067C8 ; public: __thiscall CRecordVector<unsigned __int64 const *>::~CRecordVector<unsigned __int64 const *>(void)
.text:000067C8                 public ??1?$CRecordVector@PB_K@@QAE@XZ
.text:000067C8 ??1?$CRecordVector@PB_K@@QAE@XZ proc near
.text:000067C8                                         ; CODE XREF: NCoderMixer2::CCoder::~CCoder(void)+3Ap
.text:000067C8
.text:000067C8 var_8           = dword ptr -8
.text:000067C8 var_4           = dword ptr -4
.text:000067C8
.text:000067C8                 push    ebp
.text:000067C9                 mov     ebp, esp
.text:000067CB                 sub     esp, 8
.text:000067CE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000067D5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000067DC                 mov     [ebp+var_4], ecx
.text:000067DF                 mov     eax, [ebp+var_4]
.text:000067E2                 mov     ecx, [eax]
.text:000067E4                 mov     [ebp+var_8], ecx
.text:000067E7                 mov     edx, [ebp+var_8]
.text:000067EA                 push    edx             ; void *
.text:000067EB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000067F0                 add     esp, 4
.text:000067F3                 add     esp, 8
.text:000067F6                 cmp     ebp, esp
.text:000067F8                 call    __RTC_CheckEsp
.text:000067FD                 mov     esp, ebp
.text:000067FF                 pop     ebp
.text:00006800                 retn
.text:00006800 ??1?$CRecordVector@PB_K@@QAE@XZ endp
.text:00006800
.text:00006800 ; ---------------------------------------------------------------------------
.text:00006801                 align 4
.text:00006801 _text           ends
.text:00006801
.text:00006804 ; ===========================================================================
.text:00006804
.text:00006804 ; Segment type: Pure code
.text:00006804 ; Segment permissions: Read/Execute
.text:00006804 _text           segment para public 'CODE' use32
.text:00006804                 assume cs:_text
.text:00006804                 ;org 6804h
.text:00006804 ; COMDAT (pick any)
.text:00006804                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006804
.text:00006804 ; =============== S U B R O U T I N E =======================================
.text:00006804
.text:00006804 ; Attributes: bp-based frame
.text:00006804
.text:00006804 ; public: __thiscall CRecordVector<struct ISequentialInStream *>::~CRecordVector<struct ISequentialInStream *>(void)
.text:00006804                 public ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ
.text:00006804 ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ proc near
.text:00006804                                         ; CODE XREF: NCoderMixer2::CCoderMT::~CCoderMT(void)+7Cp
.text:00006804                                         ; __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$2+6j
.text:00006804
.text:00006804 var_8           = dword ptr -8
.text:00006804 var_4           = dword ptr -4
.text:00006804
.text:00006804                 push    ebp
.text:00006805                 mov     ebp, esp
.text:00006807                 sub     esp, 8
.text:0000680A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006811                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006818                 mov     [ebp+var_4], ecx
.text:0000681B                 mov     eax, [ebp+var_4]
.text:0000681E                 mov     ecx, [eax]
.text:00006820                 mov     [ebp+var_8], ecx
.text:00006823                 mov     edx, [ebp+var_8]
.text:00006826                 push    edx             ; void *
.text:00006827                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000682C                 add     esp, 4
.text:0000682F                 add     esp, 8
.text:00006832                 cmp     ebp, esp
.text:00006834                 call    __RTC_CheckEsp
.text:00006839                 mov     esp, ebp
.text:0000683B                 pop     ebp
.text:0000683C                 retn
.text:0000683C ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ endp
.text:0000683C
.text:0000683C ; ---------------------------------------------------------------------------
.text:0000683D                 align 10h
.text:0000683D _text           ends
.text:0000683D
.text:00006840 ; ===========================================================================
.text:00006840
.text:00006840 ; Segment type: Pure code
.text:00006840 ; Segment permissions: Read/Execute
.text:00006840 _text           segment para public 'CODE' use32
.text:00006840                 assume cs:_text
.text:00006840                 ;org 6840h
.text:00006840 ; COMDAT (pick any)
.text:00006840                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006840
.text:00006840 ; =============== S U B R O U T I N E =======================================
.text:00006840
.text:00006840 ; Attributes: bp-based frame
.text:00006840
.text:00006840 ; public: __thiscall CRecordVector<struct ISequentialOutStream *>::~CRecordVector<struct ISequentialOutStream *>(void)
.text:00006840                 public ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ
.text:00006840 ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ proc near
.text:00006840                                         ; CODE XREF: NCoderMixer2::CCoderMT::~CCoderMT(void)+6Dp
.text:00006840                                         ; __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$3+6j
.text:00006840
.text:00006840 var_8           = dword ptr -8
.text:00006840 var_4           = dword ptr -4
.text:00006840
.text:00006840                 push    ebp
.text:00006841                 mov     ebp, esp
.text:00006843                 sub     esp, 8
.text:00006846                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000684D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006854                 mov     [ebp+var_4], ecx
.text:00006857                 mov     eax, [ebp+var_4]
.text:0000685A                 mov     ecx, [eax]
.text:0000685C                 mov     [ebp+var_8], ecx
.text:0000685F                 mov     edx, [ebp+var_8]
.text:00006862                 push    edx             ; void *
.text:00006863                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006868                 add     esp, 4
.text:0000686B                 add     esp, 8
.text:0000686E                 cmp     ebp, esp
.text:00006870                 call    __RTC_CheckEsp
.text:00006875                 mov     esp, ebp
.text:00006877                 pop     ebp
.text:00006878                 retn
.text:00006878 ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ endp
.text:00006878
.text:00006878 ; ---------------------------------------------------------------------------
.text:00006879                 align 4
.text:00006879 _text           ends
.text:00006879
.text:0000687C ; ===========================================================================
.text:0000687C
.text:0000687C ; Segment type: Pure code
.text:0000687C ; Segment permissions: Read/Execute
.text:0000687C _text           segment para public 'CODE' use32
.text:0000687C                 assume cs:_text
.text:0000687C                 ;org 687Ch
.text:0000687C ; COMDAT (pick any)
.text:0000687C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000687C
.text:0000687C ; =============== S U B R O U T I N E =======================================
.text:0000687C
.text:0000687C ; Attributes: bp-based frame
.text:0000687C
.text:0000687C ; public: __thiscall CObjectVector<class CMyComPtr<struct ISequentialOutStream>>::~CObjectVector<class CMyComPtr<struct ISequentialOutStream>>(void)
.text:0000687C                 public ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
.text:0000687C ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ proc near
.text:0000687C                                         ; CODE XREF: NCoderMixer2::CCoderMT::~CCoderMT(void)+4Fp
.text:0000687C                                         ; __unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$5+6j
.text:0000687C
.text:0000687C var_20          = dword ptr -20h
.text:0000687C var_1C          = dword ptr -1Ch
.text:0000687C var_18          = dword ptr -18h
.text:0000687C var_14          = dword ptr -14h
.text:0000687C var_10          = dword ptr -10h
.text:0000687C var_C           = dword ptr -0Ch
.text:0000687C var_4           = dword ptr -4
.text:0000687C
.text:0000687C                 push    ebp
.text:0000687D                 mov     ebp, esp
.text:0000687F                 push    0FFFFFFFFh
.text:00006881                 push    offset __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
.text:00006886                 mov     eax, large fs:0
.text:0000688C                 push    eax
.text:0000688D                 sub     esp, 14h
.text:00006890                 mov     eax, 0CCCCCCCCh
.text:00006895                 mov     [ebp+var_20], eax
.text:00006898                 mov     [ebp+var_1C], eax
.text:0000689B                 mov     [ebp+var_18], eax
.text:0000689E                 mov     [ebp+var_14], eax
.text:000068A1                 mov     [ebp+var_10], eax
.text:000068A4                 mov     eax, dword ptr ds:___security_cookie
.text:000068A9                 xor     eax, ebp
.text:000068AB                 push    eax
.text:000068AC                 lea     eax, [ebp+var_C]
.text:000068AF                 mov     large fs:0, eax
.text:000068B5                 mov     [ebp+var_10], ecx
.text:000068B8                 mov     [ebp+var_4], 0
.text:000068BF                 mov     ecx, [ebp+var_10]
.text:000068C2                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000068C7                 mov     [ebp+var_14], eax
.text:000068CA
.text:000068CA loc_68CA:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void):loc_690Cj
.text:000068CA                 cmp     [ebp+var_14], 0
.text:000068CE                 jz      short loc_690E
.text:000068D0                 mov     eax, [ebp+var_14]
.text:000068D3                 sub     eax, 1
.text:000068D6                 mov     [ebp+var_14], eax
.text:000068D9                 mov     ecx, [ebp+var_14]
.text:000068DC                 push    ecx
.text:000068DD                 mov     ecx, [ebp+var_10]
.text:000068E0                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000068E5                 mov     edx, [eax]
.text:000068E7                 mov     [ebp+var_1C], edx
.text:000068EA                 mov     eax, [ebp+var_1C]
.text:000068ED                 mov     [ebp+var_18], eax
.text:000068F0                 cmp     [ebp+var_18], 0
.text:000068F4                 jz      short loc_6905
.text:000068F6                 push    1
.text:000068F8                 mov     ecx, [ebp+var_18]
.text:000068FB                 call    ??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z ; CMyComPtr<ISequentialOutStream>::`scalar deleting destructor'(uint)
.text:00006900                 mov     [ebp+var_20], eax
.text:00006903                 jmp     short loc_690C
.text:00006905 ; ---------------------------------------------------------------------------
.text:00006905
.text:00006905 loc_6905:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)+78j
.text:00006905                 mov     [ebp+var_20], 0
.text:0000690C
.text:0000690C loc_690C:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)+87j
.text:0000690C                 jmp     short loc_68CA
.text:0000690E ; ---------------------------------------------------------------------------
.text:0000690E
.text:0000690E loc_690E:                               ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)+52j
.text:0000690E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006915                 mov     ecx, [ebp+var_10]
.text:00006918                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000691D                 mov     ecx, [ebp+var_C]
.text:00006920                 mov     large fs:0, ecx
.text:00006927                 pop     ecx
.text:00006928                 add     esp, 20h
.text:0000692B                 cmp     ebp, esp
.text:0000692D                 call    __RTC_CheckEsp
.text:00006932                 mov     esp, ebp
.text:00006934                 pop     ebp
.text:00006935                 retn
.text:00006935 ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ endp
.text:00006935
.text:00006935 ; ---------------------------------------------------------------------------
.text:00006936                 align 4
.text:00006936 _text           ends
.text:00006936
.text$x:00006938 ; ===========================================================================
.text$x:00006938
.text$x:00006938 ; Segment type: Pure code
.text$x:00006938 ; Segment permissions: Read/Execute
.text$x:00006938 _text$x         segment para public 'CODE' use32
.text$x:00006938                 assume cs:_text$x
.text$x:00006938                 ;org 6938h
.text$x:00006938 ; COMDAT (pick associative to section at 687C)
.text$x:00006938                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00006938
.text$x:00006938 ; =============== S U B R O U T I N E =======================================
.text$x:00006938
.text$x:00006938
.text$x:00006938 __unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ$0 proc near
.text$x:00006938                                         ; DATA XREF: .xdata$x:00006960o
.text$x:00006938                 mov     ecx, [ebp-10h]
.text$x:0000693B                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000693B __unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ$0 endp
.text$x:0000693B
.text$x:00006940
.text$x:00006940 ; =============== S U B R O U T I N E =======================================
.text$x:00006940
.text$x:00006940
.text$x:00006940 __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ proc near
.text$x:00006940                                         ; DATA XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)+5o
.text$x:00006940
.text$x:00006940 arg_4           = dword ptr  8
.text$x:00006940
.text$x:00006940                 mov     edx, [esp+arg_4]
.text$x:00006944                 lea     eax, [edx+0Ch]
.text$x:00006947                 mov     ecx, [edx-18h]
.text$x:0000694A                 xor     ecx, eax
.text$x:0000694C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006951                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
.text$x:00006956                 jmp     ___CxxFrameHandler3
.text$x:00006956 __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ endp
.text$x:00006956
.text$x:00006956 ; ---------------------------------------------------------------------------
.text$x:0000695B                 align 4
.text$x:0000695B _text$x         ends
.text$x:0000695B
.xdata$x:0000695C ; ===========================================================================
.xdata$x:0000695C
.xdata$x:0000695C ; Segment type: Pure data
.xdata$x:0000695C ; Segment permissions: Read
.xdata$x:0000695C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000695C                 assume cs:_xdata$x
.xdata$x:0000695C                 ;org 695Ch
.xdata$x:0000695C ; COMDAT (pick associative to section at 687C)
.xdata$x:0000695C __unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ db 0FFh
.xdata$x:0000695C                                         ; DATA XREF: .xdata$x:0000696Co
.xdata$x:0000695D                 db 0FFh
.xdata$x:0000695E                 db 0FFh
.xdata$x:0000695F                 db 0FFh
.xdata$x:00006960                 dd offset __unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ$0
.xdata$x:00006964 __ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ db  22h ; "
.xdata$x:00006964                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ+11o
.xdata$x:00006965                 db    5
.xdata$x:00006966                 db  93h ; ô
.xdata$x:00006967                 db  19h
.xdata$x:00006968                 db    1
.xdata$x:00006969                 db    0
.xdata$x:0000696A                 db    0
.xdata$x:0000696B                 db    0
.xdata$x:0000696C                 dd offset __unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
.xdata$x:00006970                 db    0
.xdata$x:00006971                 db    0
.xdata$x:00006972                 db    0
.xdata$x:00006973                 db    0
.xdata$x:00006974                 db    0
.xdata$x:00006975                 db    0
.xdata$x:00006976                 db    0
.xdata$x:00006977                 db    0
.xdata$x:00006978                 db    0
.xdata$x:00006979                 db    0
.xdata$x:0000697A                 db    0
.xdata$x:0000697B                 db    0
.xdata$x:0000697C                 db    0
.xdata$x:0000697D                 db    0
.xdata$x:0000697E                 db    0
.xdata$x:0000697F                 db    0
.xdata$x:00006980                 db    0
.xdata$x:00006981                 db    0
.xdata$x:00006982                 db    0
.xdata$x:00006983                 db    0
.xdata$x:00006984                 db    1
.xdata$x:00006985                 db    0
.xdata$x:00006986                 db    0
.xdata$x:00006987                 db    0
.xdata$x:00006987 _xdata$x        ends
.xdata$x:00006987
.text:00006988 ; ===========================================================================
.text:00006988
.text:00006988 ; Segment type: Pure code
.text:00006988 ; Segment permissions: Read/Execute
.text:00006988 _text           segment para public 'CODE' use32
.text:00006988                 assume cs:_text
.text:00006988                 ;org 6988h
.text:00006988 ; COMDAT (pick any)
.text:00006988                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006988
.text:00006988 ; =============== S U B R O U T I N E =======================================
.text:00006988
.text:00006988 ; Attributes: bp-based frame
.text:00006988
.text:00006988 ; public: void * __thiscall CMyComPtr<struct ISequentialOutStream>::`scalar deleting destructor'(unsigned int)
.text:00006988                 public ??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z
.text:00006988 ??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z proc near
.text:00006988                                         ; CODE XREF: CObjectVector<CMyComPtr<ISequentialOutStream>>::~CObjectVector<CMyComPtr<ISequentialOutStream>>(void)+7Fp
.text:00006988
.text:00006988 var_4           = dword ptr -4
.text:00006988 arg_0           = dword ptr  8
.text:00006988
.text:00006988                 push    ebp
.text:00006989                 mov     ebp, esp
.text:0000698B                 push    ecx
.text:0000698C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006993                 mov     [ebp+var_4], ecx
.text:00006996                 mov     ecx, [ebp+var_4]
.text:00006999                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000699E                 mov     eax, [ebp+arg_0]
.text:000069A1                 and     eax, 1
.text:000069A4                 jz      short loc_69B2
.text:000069A6                 mov     ecx, [ebp+var_4]
.text:000069A9                 push    ecx             ; void *
.text:000069AA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000069AF                 add     esp, 4
.text:000069B2
.text:000069B2 loc_69B2:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::`scalar deleting destructor'(uint)+1Cj
.text:000069B2                 mov     eax, [ebp+var_4]
.text:000069B5                 add     esp, 4
.text:000069B8                 cmp     ebp, esp
.text:000069BA                 call    __RTC_CheckEsp
.text:000069BF                 mov     esp, ebp
.text:000069C1                 pop     ebp
.text:000069C2                 retn    4
.text:000069C2 ??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z endp
.text:000069C2
.text:000069C2 ; ---------------------------------------------------------------------------
.text:000069C5                 align 4
.text:000069C5 _text           ends
.text:000069C5
.text:000069C8 ; ===========================================================================
.text:000069C8
.text:000069C8 ; Segment type: Pure code
.text:000069C8 ; Segment permissions: Read/Execute
.text:000069C8 _text           segment para public 'CODE' use32
.text:000069C8                 assume cs:_text
.text:000069C8                 ;org 69C8h
.text:000069C8 ; COMDAT (pick any)
.text:000069C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000069C8
.text:000069C8 ; =============== S U B R O U T I N E =======================================
.text:000069C8
.text:000069C8 ; Attributes: bp-based frame
.text:000069C8
.text:000069C8 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:000069C8                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:000069C8 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:000069C8                                         ; CODE XREF: CMyComPtr<ISequentialOutStream>::`scalar deleting destructor'(uint)+11p
.text:000069C8
.text:000069C8 var_4           = dword ptr -4
.text:000069C8
.text:000069C8                 push    ebp
.text:000069C9                 mov     ebp, esp
.text:000069CB                 push    ecx
.text:000069CC                 push    esi
.text:000069CD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000069D4                 mov     [ebp+var_4], ecx
.text:000069D7                 mov     eax, [ebp+var_4]
.text:000069DA                 cmp     dword ptr [eax], 0
.text:000069DD                 jz      short loc_69FA
.text:000069DF                 mov     ecx, [ebp+var_4]
.text:000069E2                 mov     edx, [ecx]
.text:000069E4                 mov     eax, [ebp+var_4]
.text:000069E7                 mov     ecx, [eax]
.text:000069E9                 mov     edx, [edx]
.text:000069EB                 mov     esi, esp
.text:000069ED                 push    ecx
.text:000069EE                 mov     eax, [edx+8]
.text:000069F1                 call    eax
.text:000069F3                 cmp     esi, esp
.text:000069F5                 call    __RTC_CheckEsp
.text:000069FA
.text:000069FA loc_69FA:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:000069FA                 pop     esi
.text:000069FB                 add     esp, 4
.text:000069FE                 cmp     ebp, esp
.text:00006A00                 call    __RTC_CheckEsp
.text:00006A05                 mov     esp, ebp
.text:00006A07                 pop     ebp
.text:00006A08                 retn
.text:00006A08 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00006A08
.text:00006A08 ; ---------------------------------------------------------------------------
.text:00006A09                 align 4
.text:00006A09 _text           ends
.text:00006A09
.text:00006A0C ; ===========================================================================
.text:00006A0C
.text:00006A0C ; Segment type: Pure code
.text:00006A0C ; Segment permissions: Read/Execute
.text:00006A0C _text           segment para public 'CODE' use32
.text:00006A0C                 assume cs:_text
.text:00006A0C                 ;org 6A0Ch
.text:00006A0C ; COMDAT (pick any)
.text:00006A0C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006A0C
.text:00006A0C ; =============== S U B R O U T I N E =======================================
.text:00006A0C
.text:00006A0C ; Attributes: bp-based frame
.text:00006A0C
.text:00006A0C ; public: void * __thiscall NArchive::N7z::CCoderInfo::`vector deleting destructor'(unsigned int)
.text:00006A0C                 public ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z
.text:00006A0C ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z proc near
.text:00006A0C                                         ; CODE XREF: CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>(void)+33p
.text:00006A0C
.text:00006A0C var_4           = dword ptr -4
.text:00006A0C arg_0           = dword ptr  8
.text:00006A0C
.text:00006A0C                 push    ebp
.text:00006A0D                 mov     ebp, esp
.text:00006A0F                 push    ecx
.text:00006A10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006A17                 mov     [ebp+var_4], ecx
.text:00006A1A                 mov     eax, [ebp+arg_0]
.text:00006A1D                 and     eax, 2
.text:00006A20                 jz      short loc_6A58
.text:00006A22                 push    offset ??1CCoderInfo@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCoderInfo::~CCoderInfo(void)
.text:00006A27                 mov     ecx, [ebp+var_4]
.text:00006A2A                 mov     edx, [ecx-4]
.text:00006A2D                 push    edx
.text:00006A2E                 push    18h
.text:00006A30                 mov     eax, [ebp+var_4]
.text:00006A33                 push    eax
.text:00006A34                 call    ??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
.text:00006A39                 mov     ecx, [ebp+arg_0]
.text:00006A3C                 and     ecx, 1
.text:00006A3F                 jz      short loc_6A50
.text:00006A41                 mov     edx, [ebp+var_4]
.text:00006A44                 sub     edx, 4
.text:00006A47                 push    edx             ; void *
.text:00006A48                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006A4D                 add     esp, 4
.text:00006A50
.text:00006A50 loc_6A50:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+33j
.text:00006A50                 mov     eax, [ebp+var_4]
.text:00006A53                 sub     eax, 4
.text:00006A56                 jmp     short loc_6A77
.text:00006A58 ; ---------------------------------------------------------------------------
.text:00006A58
.text:00006A58 loc_6A58:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+14j
.text:00006A58                 mov     ecx, [ebp+var_4] ; this
.text:00006A5B                 call    ??1CCoderInfo@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCoderInfo::~CCoderInfo(void)
.text:00006A60                 mov     eax, [ebp+arg_0]
.text:00006A63                 and     eax, 1
.text:00006A66                 jz      short loc_6A74
.text:00006A68                 mov     ecx, [ebp+var_4]
.text:00006A6B                 push    ecx             ; void *
.text:00006A6C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006A71                 add     esp, 4
.text:00006A74
.text:00006A74 loc_6A74:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+5Aj
.text:00006A74                 mov     eax, [ebp+var_4]
.text:00006A77
.text:00006A77 loc_6A77:                               ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+4Aj
.text:00006A77                 add     esp, 4
.text:00006A7A                 cmp     ebp, esp
.text:00006A7C                 call    __RTC_CheckEsp
.text:00006A81                 mov     esp, ebp
.text:00006A83                 pop     ebp
.text:00006A84                 retn    4
.text:00006A84 ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z endp
.text:00006A84
.text:00006A84 ; ---------------------------------------------------------------------------
.text:00006A87                 align 4
.text:00006A87 _text           ends
.text:00006A87
.text:00006A88 ; ===========================================================================
.text:00006A88
.text:00006A88 ; Segment type: Pure code
.text:00006A88 ; Segment permissions: Read/Execute
.text:00006A88 _text           segment para public 'CODE' use32
.text:00006A88                 assume cs:_text
.text:00006A88                 ;org 6A88h
.text:00006A88 ; COMDAT (pick any)
.text:00006A88                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006A88
.text:00006A88 ; =============== S U B R O U T I N E =======================================
.text:00006A88
.text:00006A88 ; Attributes: bp-based frame
.text:00006A88
.text:00006A88 ; _DWORD __thiscall CStreamBinder::~CStreamBinder(CStreamBinder *__hidden this)
.text:00006A88                 public ??1CStreamBinder@@QAE@XZ
.text:00006A88 ??1CStreamBinder@@QAE@XZ proc near      ; CODE XREF: CStreamBinder::`scalar deleting destructor'(uint)+11p
.text:00006A88
.text:00006A88 var_10          = dword ptr -10h
.text:00006A88 var_C           = dword ptr -0Ch
.text:00006A88 var_4           = dword ptr -4
.text:00006A88
.text:00006A88                 push    ebp
.text:00006A89                 mov     ebp, esp
.text:00006A8B                 push    0FFFFFFFFh
.text:00006A8D                 push    offset __ehhandler$??1CStreamBinder@@QAE@XZ
.text:00006A92                 mov     eax, large fs:0
.text:00006A98                 push    eax
.text:00006A99                 push    ecx
.text:00006A9A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00006AA1                 mov     eax, dword ptr ds:___security_cookie
.text:00006AA6                 xor     eax, ebp
.text:00006AA8                 push    eax
.text:00006AA9                 lea     eax, [ebp+var_C]
.text:00006AAC                 mov     large fs:0, eax
.text:00006AB2                 mov     [ebp+var_10], ecx
.text:00006AB5                 mov     [ebp+var_4], 1
.text:00006ABC                 mov     ecx, [ebp+var_10]
.text:00006ABF                 add     ecx, 8          ; this
.text:00006AC2                 call    ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text:00006AC7                 mov     byte ptr [ebp+var_4], 0
.text:00006ACB                 mov     ecx, [ebp+var_10]
.text:00006ACE                 add     ecx, 4          ; this
.text:00006AD1                 call    ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text:00006AD6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00006ADD                 mov     ecx, [ebp+var_10] ; this
.text:00006AE0                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:00006AE5                 mov     ecx, [ebp+var_C]
.text:00006AE8                 mov     large fs:0, ecx
.text:00006AEF                 pop     ecx
.text:00006AF0                 add     esp, 10h
.text:00006AF3                 cmp     ebp, esp
.text:00006AF5                 call    __RTC_CheckEsp
.text:00006AFA                 mov     esp, ebp
.text:00006AFC                 pop     ebp
.text:00006AFD                 retn
.text:00006AFD ??1CStreamBinder@@QAE@XZ endp
.text:00006AFD
.text:00006AFD ; ---------------------------------------------------------------------------
.text:00006AFE                 align 10h
.text:00006AFE _text           ends
.text:00006AFE
.text$x:00006B00 ; ===========================================================================
.text$x:00006B00
.text$x:00006B00 ; Segment type: Pure code
.text$x:00006B00 ; Segment permissions: Read/Execute
.text$x:00006B00 _text$x         segment para public 'CODE' use32
.text$x:00006B00                 assume cs:_text$x
.text$x:00006B00                 ;org 6B00h
.text$x:00006B00 ; COMDAT (pick associative to section at 6A88)
.text$x:00006B00                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00006B00
.text$x:00006B00 ; =============== S U B R O U T I N E =======================================
.text$x:00006B00
.text$x:00006B00
.text$x:00006B00 __unwindfunclet$??1CStreamBinder@@QAE@XZ$0 proc near
.text$x:00006B00                                         ; DATA XREF: .xdata$x:00006B34o
.text$x:00006B00                 mov     ecx, [ebp-10h]  ; this
.text$x:00006B03                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00006B03 __unwindfunclet$??1CStreamBinder@@QAE@XZ$0 endp
.text$x:00006B03
.text$x:00006B08
.text$x:00006B08 ; =============== S U B R O U T I N E =======================================
.text$x:00006B08
.text$x:00006B08
.text$x:00006B08 __unwindfunclet$??1CStreamBinder@@QAE@XZ$1 proc near
.text$x:00006B08                                         ; DATA XREF: .xdata$x:00006B3Co
.text$x:00006B08                 mov     ecx, [ebp-10h]
.text$x:00006B0B                 add     ecx, 4          ; this
.text$x:00006B0E                 jmp     ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text$x:00006B0E __unwindfunclet$??1CStreamBinder@@QAE@XZ$1 endp
.text$x:00006B0E
.text$x:00006B13
.text$x:00006B13 ; =============== S U B R O U T I N E =======================================
.text$x:00006B13
.text$x:00006B13
.text$x:00006B13 __ehhandler$??1CStreamBinder@@QAE@XZ proc near
.text$x:00006B13                                         ; DATA XREF: CStreamBinder::~CStreamBinder(void)+5o
.text$x:00006B13
.text$x:00006B13 arg_4           = dword ptr  8
.text$x:00006B13
.text$x:00006B13                 mov     edx, [esp+arg_4]
.text$x:00006B17                 lea     eax, [edx+0Ch]
.text$x:00006B1A                 mov     ecx, [edx-8]
.text$x:00006B1D                 xor     ecx, eax
.text$x:00006B1F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006B24                 mov     eax, offset __ehfuncinfo$??1CStreamBinder@@QAE@XZ
.text$x:00006B29                 jmp     ___CxxFrameHandler3
.text$x:00006B29 __ehhandler$??1CStreamBinder@@QAE@XZ endp
.text$x:00006B29
.text$x:00006B29 ; ---------------------------------------------------------------------------
.text$x:00006B2E                 align 10h
.text$x:00006B2E _text$x         ends
.text$x:00006B2E
.xdata$x:00006B30 ; ===========================================================================
.xdata$x:00006B30
.xdata$x:00006B30 ; Segment type: Pure data
.xdata$x:00006B30 ; Segment permissions: Read
.xdata$x:00006B30 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006B30                 assume cs:_xdata$x
.xdata$x:00006B30                 ;org 6B30h
.xdata$x:00006B30 ; COMDAT (pick associative to section at 6A88)
.xdata$x:00006B30 __unwindtable$??1CStreamBinder@@QAE@XZ db 0FFh
.xdata$x:00006B30                                         ; DATA XREF: .xdata$x:00006B48o
.xdata$x:00006B31                 db 0FFh
.xdata$x:00006B32                 db 0FFh
.xdata$x:00006B33                 db 0FFh
.xdata$x:00006B34                 dd offset __unwindfunclet$??1CStreamBinder@@QAE@XZ$0
.xdata$x:00006B38                 db    0
.xdata$x:00006B39                 db    0
.xdata$x:00006B3A                 db    0
.xdata$x:00006B3B                 db    0
.xdata$x:00006B3C                 dd offset __unwindfunclet$??1CStreamBinder@@QAE@XZ$1
.xdata$x:00006B40 __ehfuncinfo$??1CStreamBinder@@QAE@XZ db  22h ; "
.xdata$x:00006B40                                         ; DATA XREF: __ehhandler$??1CStreamBinder@@QAE@XZ+11o
.xdata$x:00006B41                 db    5
.xdata$x:00006B42                 db  93h ; ô
.xdata$x:00006B43                 db  19h
.xdata$x:00006B44                 db    2
.xdata$x:00006B45                 db    0
.xdata$x:00006B46                 db    0
.xdata$x:00006B47                 db    0
.xdata$x:00006B48                 dd offset __unwindtable$??1CStreamBinder@@QAE@XZ
.xdata$x:00006B4C                 align 20h
.xdata$x:00006B60                 db    1
.xdata$x:00006B61                 db    0
.xdata$x:00006B62                 db    0
.xdata$x:00006B63                 db    0
.xdata$x:00006B63 _xdata$x        ends
.xdata$x:00006B63
.text:00006B64 ; ===========================================================================
.text:00006B64
.text:00006B64 ; Segment type: Pure code
.text:00006B64 ; Segment permissions: Read/Execute
.text:00006B64 _text           segment para public 'CODE' use32
.text:00006B64                 assume cs:_text
.text:00006B64                 ;org 6B64h
.text:00006B64 ; COMDAT (pick any)
.text:00006B64                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006B64
.text:00006B64 ; =============== S U B R O U T I N E =======================================
.text:00006B64
.text:00006B64 ; Attributes: bp-based frame
.text:00006B64
.text:00006B64 ; _DWORD __thiscall NArchive::N7z::CCoderInfo::~CCoderInfo(NArchive::N7z::CCoderInfo *__hidden this)
.text:00006B64                 public ??1CCoderInfo@N7z@NArchive@@QAE@XZ
.text:00006B64 ??1CCoderInfo@N7z@NArchive@@QAE@XZ proc near
.text:00006B64                                         ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+4Fp
.text:00006B64                                         ; DATA XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+16o
.text:00006B64
.text:00006B64 var_4           = dword ptr -4
.text:00006B64
.text:00006B64                 push    ebp
.text:00006B65                 mov     ebp, esp
.text:00006B67                 push    ecx
.text:00006B68                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006B6F                 mov     [ebp+var_4], ecx
.text:00006B72                 mov     ecx, [ebp+var_4]
.text:00006B75                 add     ecx, 8
.text:00006B78                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00006B7D                 add     esp, 4
.text:00006B80                 cmp     ebp, esp
.text:00006B82                 call    __RTC_CheckEsp
.text:00006B87                 mov     esp, ebp
.text:00006B89                 pop     ebp
.text:00006B8A                 retn
.text:00006B8A ??1CCoderInfo@N7z@NArchive@@QAE@XZ endp
.text:00006B8A
.text:00006B8A ; ---------------------------------------------------------------------------
.text:00006B8B                 align 4
.text:00006B8B _text           ends
.text:00006B8B
.text:00006B8C ; ===========================================================================
.text:00006B8C
.text:00006B8C ; Segment type: Pure code
.text:00006B8C ; Segment permissions: Read/Execute
.text:00006B8C _text           segment para public 'CODE' use32
.text:00006B8C                 assume cs:_text
.text:00006B8C                 ;org 6B8Ch
.text:00006B8C ; COMDAT (pick any)
.text:00006B8C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006B8C
.text:00006B8C ; =============== S U B R O U T I N E =======================================
.text:00006B8C
.text:00006B8C ; Attributes: bp-based frame
.text:00006B8C
.text:00006B8C ; _DWORD __thiscall NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(NWindows::NSynchronization::CManualResetEvent *__hidden this)
.text:00006B8C                 public ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:00006B8C ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:00006B8C                                         ; CODE XREF: CStreamBinder::~CStreamBinder(void)+3Ap
.text:00006B8C                                         ; CStreamBinder::~CStreamBinder(void)+49p ...
.text:00006B8C
.text:00006B8C var_4           = dword ptr -4
.text:00006B8C
.text:00006B8C                 push    ebp
.text:00006B8D                 mov     ebp, esp
.text:00006B8F                 push    ecx
.text:00006B90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006B97                 mov     [ebp+var_4], ecx
.text:00006B9A                 mov     ecx, [ebp+var_4] ; this
.text:00006B9D                 call    ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent(void)
.text:00006BA2                 add     esp, 4
.text:00006BA5                 cmp     ebp, esp
.text:00006BA7                 call    __RTC_CheckEsp
.text:00006BAC                 mov     esp, ebp
.text:00006BAE                 pop     ebp
.text:00006BAF                 retn
.text:00006BAF ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:00006BAF
.text:00006BAF _text           ends
.text:00006BAF
.text:00006BB0 ; ===========================================================================
.text:00006BB0
.text:00006BB0 ; Segment type: Pure code
.text:00006BB0 ; Segment permissions: Read/Execute
.text:00006BB0 _text           segment para public 'CODE' use32
.text:00006BB0                 assume cs:_text
.text:00006BB0                 ;org 6BB0h
.text:00006BB0 ; COMDAT (pick any)
.text:00006BB0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006BB0
.text:00006BB0 ; =============== S U B R O U T I N E =======================================
.text:00006BB0
.text:00006BB0 ; Attributes: bp-based frame
.text:00006BB0
.text:00006BB0 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:00006BB0                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:00006BB0 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:00006BB0                                         ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::CObjectVector<CMyComPtr<ISequentialInStream>>(void)+11p
.text:00006BB0                                         ; CObjectVector<CStreamBinder>::CObjectVector<CStreamBinder>(void)+11p ...
.text:00006BB0
.text:00006BB0 var_4           = dword ptr -4
.text:00006BB0
.text:00006BB0                 push    ebp
.text:00006BB1                 mov     ebp, esp
.text:00006BB3                 push    ecx
.text:00006BB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006BBB                 mov     [ebp+var_4], ecx
.text:00006BBE                 mov     eax, [ebp+var_4]
.text:00006BC1                 mov     dword ptr [eax], 0
.text:00006BC7                 mov     ecx, [ebp+var_4]
.text:00006BCA                 mov     dword ptr [ecx+4], 0
.text:00006BD1                 mov     edx, [ebp+var_4]
.text:00006BD4                 mov     dword ptr [edx+8], 0
.text:00006BDB                 mov     eax, [ebp+var_4]
.text:00006BDE                 mov     esp, ebp
.text:00006BE0                 pop     ebp
.text:00006BE1                 retn
.text:00006BE1 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:00006BE1
.text:00006BE1 ; ---------------------------------------------------------------------------
.text:00006BE2                 align 4
.text:00006BE2 _text           ends
.text:00006BE2
.text:00006BE4 ; ===========================================================================
.text:00006BE4
.text:00006BE4 ; Segment type: Pure code
.text:00006BE4 ; Segment permissions: Read/Execute
.text:00006BE4 _text           segment para public 'CODE' use32
.text:00006BE4                 assume cs:_text
.text:00006BE4                 ;org 6BE4h
.text:00006BE4 ; COMDAT (pick any)
.text:00006BE4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006BE4
.text:00006BE4 ; =============== S U B R O U T I N E =======================================
.text:00006BE4
.text:00006BE4 ; Attributes: bp-based frame
.text:00006BE4
.text:00006BE4 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00006BE4                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00006BE4 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00006BE4                                         ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::Size(void)+11p
.text:00006BE4                                         ; CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)+46p ...
.text:00006BE4
.text:00006BE4 var_4           = dword ptr -4
.text:00006BE4
.text:00006BE4                 push    ebp
.text:00006BE5                 mov     ebp, esp
.text:00006BE7                 push    ecx
.text:00006BE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006BEF                 mov     [ebp+var_4], ecx
.text:00006BF2                 mov     eax, [ebp+var_4]
.text:00006BF5                 mov     eax, [eax+4]
.text:00006BF8                 mov     esp, ebp
.text:00006BFA                 pop     ebp
.text:00006BFB                 retn
.text:00006BFB ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:00006BFB
.text:00006BFB _text           ends
.text:00006BFB
.text:00006BFC ; ===========================================================================
.text:00006BFC
.text:00006BFC ; Segment type: Pure code
.text:00006BFC ; Segment permissions: Read/Execute
.text:00006BFC _text           segment para public 'CODE' use32
.text:00006BFC                 assume cs:_text
.text:00006BFC                 ;org 6BFCh
.text:00006BFC ; COMDAT (pick any)
.text:00006BFC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006BFC
.text:00006BFC ; =============== S U B R O U T I N E =======================================
.text:00006BFC
.text:00006BFC ; Attributes: bp-based frame
.text:00006BFC
.text:00006BFC ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00006BFC                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:00006BFC ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:00006BFC                                         ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)+9Cp
.text:00006BFC                                         ; __unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ$0+3j ...
.text:00006BFC
.text:00006BFC var_8           = dword ptr -8
.text:00006BFC var_4           = dword ptr -4
.text:00006BFC
.text:00006BFC                 push    ebp
.text:00006BFD                 mov     ebp, esp
.text:00006BFF                 sub     esp, 8
.text:00006C02                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006C09                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C10                 mov     [ebp+var_4], ecx
.text:00006C13                 mov     eax, [ebp+var_4]
.text:00006C16                 mov     ecx, [eax]
.text:00006C18                 mov     [ebp+var_8], ecx
.text:00006C1B                 mov     edx, [ebp+var_8]
.text:00006C1E                 push    edx             ; void *
.text:00006C1F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006C24                 add     esp, 4
.text:00006C27                 add     esp, 8
.text:00006C2A                 cmp     ebp, esp
.text:00006C2C                 call    __RTC_CheckEsp
.text:00006C31                 mov     esp, ebp
.text:00006C33                 pop     ebp
.text:00006C34                 retn
.text:00006C34 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:00006C34
.text:00006C34 ; ---------------------------------------------------------------------------
.text:00006C35                 align 4
.text:00006C35 _text           ends
.text:00006C35
.text:00006C38 ; ===========================================================================
.text:00006C38
.text:00006C38 ; Segment type: Pure code
.text:00006C38 ; Segment permissions: Read/Execute
.text:00006C38 _text           segment para public 'CODE' use32
.text:00006C38                 assume cs:_text
.text:00006C38                 ;org 6C38h
.text:00006C38 ; COMDAT (pick any)
.text:00006C38                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006C38
.text:00006C38 ; =============== S U B R O U T I N E =======================================
.text:00006C38
.text:00006C38 ; Attributes: bp-based frame
.text:00006C38
.text:00006C38 ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:00006C38                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:00006C38 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:00006C38                                         ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::AddNew(void)+84p
.text:00006C38
.text:00006C38 var_8           = dword ptr -8
.text:00006C38 var_4           = dword ptr -4
.text:00006C38 arg_0           = dword ptr  8
.text:00006C38
.text:00006C38                 push    ebp
.text:00006C39                 mov     ebp, esp
.text:00006C3B                 sub     esp, 8
.text:00006C3E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006C45                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C4C                 mov     [ebp+var_4], ecx
.text:00006C4F                 mov     ecx, [ebp+var_4]
.text:00006C52                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:00006C57                 mov     eax, [ebp+var_4]
.text:00006C5A                 mov     ecx, [eax+4]
.text:00006C5D                 mov     edx, [ebp+var_4]
.text:00006C60                 mov     eax, [edx]
.text:00006C62                 mov     edx, [ebp+arg_0]
.text:00006C65                 mov     [eax+ecx*4], edx
.text:00006C68                 mov     eax, [ebp+var_4]
.text:00006C6B                 mov     ecx, [eax+4]
.text:00006C6E                 mov     [ebp+var_8], ecx
.text:00006C71                 mov     edx, [ebp+var_4]
.text:00006C74                 mov     eax, [edx+4]
.text:00006C77                 add     eax, 1
.text:00006C7A                 mov     ecx, [ebp+var_4]
.text:00006C7D                 mov     [ecx+4], eax
.text:00006C80                 mov     eax, [ebp+var_8]
.text:00006C83                 add     esp, 8
.text:00006C86                 cmp     ebp, esp
.text:00006C88                 call    __RTC_CheckEsp
.text:00006C8D                 mov     esp, ebp
.text:00006C8F                 pop     ebp
.text:00006C90                 retn    4
.text:00006C90 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:00006C90
.text:00006C90 ; ---------------------------------------------------------------------------
.text:00006C93                 align 4
.text:00006C93 _text           ends
.text:00006C93
.text:00006C94 ; ===========================================================================
.text:00006C94
.text:00006C94 ; Segment type: Pure code
.text:00006C94 ; Segment permissions: Read/Execute
.text:00006C94 _text           segment para public 'CODE' use32
.text:00006C94                 assume cs:_text
.text:00006C94                 ;org 6C94h
.text:00006C94 ; COMDAT (pick any)
.text:00006C94                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006C94
.text:00006C94 ; =============== S U B R O U T I N E =======================================
.text:00006C94
.text:00006C94 ; Attributes: bp-based frame
.text:00006C94
.text:00006C94 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00006C94                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00006C94 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00006C94                                         ; CODE XREF: CObjectVector<CMyComPtr<ISequentialInStream>>::operator[](uint)+15p
.text:00006C94                                         ; CObjectVector<CMyComPtr<ISequentialInStream>>::~CObjectVector<CMyComPtr<ISequentialInStream>>(void)+64p ...
.text:00006C94
.text:00006C94 var_4           = dword ptr -4
.text:00006C94 arg_0           = dword ptr  8
.text:00006C94
.text:00006C94                 push    ebp
.text:00006C95                 mov     ebp, esp
.text:00006C97                 push    ecx
.text:00006C98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C9F                 mov     [ebp+var_4], ecx
.text:00006CA2                 mov     eax, [ebp+var_4]
.text:00006CA5                 mov     ecx, [eax]
.text:00006CA7                 mov     edx, [ebp+arg_0]
.text:00006CAA                 lea     eax, [ecx+edx*4]
.text:00006CAD                 mov     esp, ebp
.text:00006CAF                 pop     ebp
.text:00006CB0                 retn    4
.text:00006CB0 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:00006CB0
.text:00006CB0 ; ---------------------------------------------------------------------------
.text:00006CB3                 align 4
.text:00006CB3 _text           ends
.text:00006CB3
.text:00006CB4 ; ===========================================================================
.text:00006CB4
.text:00006CB4 ; Segment type: Pure code
.text:00006CB4 ; Segment permissions: Read/Execute
.text:00006CB4 _text           segment para public 'CODE' use32
.text:00006CB4                 assume cs:_text
.text:00006CB4                 ;org 6CB4h
.text:00006CB4 ; COMDAT (pick any)
.text:00006CB4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006CB4
.text:00006CB4 ; =============== S U B R O U T I N E =======================================
.text:00006CB4
.text:00006CB4 ; Attributes: bp-based frame
.text:00006CB4
.text:00006CB4 ; public: void __thiscall CRecordVector<unsigned int>::ClearAndReserve(unsigned int)
.text:00006CB4                 public ?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z
.text:00006CB4 ?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z proc near
.text:00006CB4                                         ; CODE XREF: CRecordVector<uint>::ClearAndSetSize(uint)+15p
.text:00006CB4
.text:00006CB4 var_C           = dword ptr -0Ch
.text:00006CB4 var_8           = dword ptr -8
.text:00006CB4 var_4           = dword ptr -4
.text:00006CB4 arg_0           = dword ptr  8
.text:00006CB4
.text:00006CB4                 push    ebp
.text:00006CB5                 mov     ebp, esp
.text:00006CB7                 sub     esp, 0Ch
.text:00006CBA                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00006CC1                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006CC8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006CCF                 mov     [ebp+var_4], ecx
.text:00006CD2                 mov     ecx, [ebp+var_4]
.text:00006CD5                 call    ?Clear@?$CRecordVector@I@@QAEXXZ ; CRecordVector<uint>::Clear(void)
.text:00006CDA                 mov     eax, [ebp+var_4]
.text:00006CDD                 mov     ecx, [ebp+arg_0]
.text:00006CE0                 cmp     ecx, [eax+8]
.text:00006CE3                 jbe     short loc_6D3C
.text:00006CE5                 mov     edx, [ebp+var_4]
.text:00006CE8                 mov     eax, [edx]
.text:00006CEA                 mov     [ebp+var_8], eax
.text:00006CED                 mov     ecx, [ebp+var_8]
.text:00006CF0                 push    ecx             ; void *
.text:00006CF1                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006CF6                 add     esp, 4
.text:00006CF9                 mov     edx, [ebp+var_4]
.text:00006CFC                 mov     dword ptr [edx], 0
.text:00006D02                 mov     eax, [ebp+var_4]
.text:00006D05                 mov     dword ptr [eax+8], 0
.text:00006D0C                 xor     ecx, ecx
.text:00006D0E                 mov     eax, [ebp+arg_0]
.text:00006D11                 mov     edx, 4
.text:00006D16                 mul     edx
.text:00006D18                 seto    cl
.text:00006D1B                 neg     ecx
.text:00006D1D                 or      ecx, eax
.text:00006D1F                 push    ecx             ; unsigned int
.text:00006D20                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006D25                 add     esp, 4
.text:00006D28                 mov     [ebp+var_C], eax
.text:00006D2B                 mov     eax, [ebp+var_4]
.text:00006D2E                 mov     ecx, [ebp+var_C]
.text:00006D31                 mov     [eax], ecx
.text:00006D33                 mov     edx, [ebp+var_4]
.text:00006D36                 mov     eax, [ebp+arg_0]
.text:00006D39                 mov     [edx+8], eax
.text:00006D3C
.text:00006D3C loc_6D3C:                               ; CODE XREF: CRecordVector<uint>::ClearAndReserve(uint)+2Fj
.text:00006D3C                 add     esp, 0Ch
.text:00006D3F                 cmp     ebp, esp
.text:00006D41                 call    __RTC_CheckEsp
.text:00006D46                 mov     esp, ebp
.text:00006D48                 pop     ebp
.text:00006D49                 retn    4
.text:00006D49 ?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z endp
.text:00006D49
.text:00006D49 _text           ends
.text:00006D49
.text:00006D4C ; ===========================================================================
.text:00006D4C
.text:00006D4C ; Segment type: Pure code
.text:00006D4C ; Segment permissions: Read/Execute
.text:00006D4C _text           segment para public 'CODE' use32
.text:00006D4C                 assume cs:_text
.text:00006D4C                 ;org 6D4Ch
.text:00006D4C ; COMDAT (pick any)
.text:00006D4C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006D4C
.text:00006D4C ; =============== S U B R O U T I N E =======================================
.text:00006D4C
.text:00006D4C ; Attributes: bp-based frame
.text:00006D4C
.text:00006D4C ; public: void __thiscall CRecordVector<struct NCoderMixer2::CCoderStreamsInfo>::ClearAndReserve(unsigned int)
.text:00006D4C                 public ?ClearAndReserve@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXI@Z
.text:00006D4C ?ClearAndReserve@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXI@Z proc near
.text:00006D4C                                         ; CODE XREF: CRecordVector<NCoderMixer2::CCoderStreamsInfo>::ClearAndSetSize(uint)+15p
.text:00006D4C
.text:00006D4C var_C           = dword ptr -0Ch
.text:00006D4C var_8           = dword ptr -8
.text:00006D4C var_4           = dword ptr -4
.text:00006D4C arg_0           = dword ptr  8
.text:00006D4C
.text:00006D4C                 push    ebp
.text:00006D4D                 mov     ebp, esp
.text:00006D4F                 sub     esp, 0Ch
.text:00006D52                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00006D59                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006D60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006D67                 mov     [ebp+var_4], ecx
.text:00006D6A                 mov     ecx, [ebp+var_4]
.text:00006D6D                 call    ?Clear@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Clear(void)
.text:00006D72                 mov     eax, [ebp+var_4]
.text:00006D75                 mov     ecx, [ebp+arg_0]
.text:00006D78                 cmp     ecx, [eax+8]
.text:00006D7B                 jbe     short loc_6DD4
.text:00006D7D                 mov     edx, [ebp+var_4]
.text:00006D80                 mov     eax, [edx]
.text:00006D82                 mov     [ebp+var_8], eax
.text:00006D85                 mov     ecx, [ebp+var_8]
.text:00006D88                 push    ecx             ; void *
.text:00006D89                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006D8E                 add     esp, 4
.text:00006D91                 mov     edx, [ebp+var_4]
.text:00006D94                 mov     dword ptr [edx], 0
.text:00006D9A                 mov     eax, [ebp+var_4]
.text:00006D9D                 mov     dword ptr [eax+8], 0
.text:00006DA4                 xor     ecx, ecx
.text:00006DA6                 mov     eax, [ebp+arg_0]
.text:00006DA9                 mov     edx, 4
.text:00006DAE                 mul     edx
.text:00006DB0                 seto    cl
.text:00006DB3                 neg     ecx
.text:00006DB5                 or      ecx, eax
.text:00006DB7                 push    ecx             ; unsigned int
.text:00006DB8                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006DBD                 add     esp, 4
.text:00006DC0                 mov     [ebp+var_C], eax
.text:00006DC3                 mov     eax, [ebp+var_4]
.text:00006DC6                 mov     ecx, [ebp+var_C]
.text:00006DC9                 mov     [eax], ecx
.text:00006DCB                 mov     edx, [ebp+var_4]
.text:00006DCE                 mov     eax, [ebp+arg_0]
.text:00006DD1                 mov     [edx+8], eax
.text:00006DD4
.text:00006DD4 loc_6DD4:                               ; CODE XREF: CRecordVector<NCoderMixer2::CCoderStreamsInfo>::ClearAndReserve(uint)+2Fj
.text:00006DD4                 add     esp, 0Ch
.text:00006DD7                 cmp     ebp, esp
.text:00006DD9                 call    __RTC_CheckEsp
.text:00006DDE                 mov     esp, ebp
.text:00006DE0                 pop     ebp
.text:00006DE1                 retn    4
.text:00006DE1 ?ClearAndReserve@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXI@Z endp
.text:00006DE1
.text:00006DE1 _text           ends
.text:00006DE1
.text:00006DE4 ; ===========================================================================
.text:00006DE4
.text:00006DE4 ; Segment type: Pure code
.text:00006DE4 ; Segment permissions: Read/Execute
.text:00006DE4 _text           segment para public 'CODE' use32
.text:00006DE4                 assume cs:_text
.text:00006DE4                 ;org 6DE4h
.text:00006DE4 ; COMDAT (pick any)
.text:00006DE4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006DE4
.text:00006DE4 ; =============== S U B R O U T I N E =======================================
.text:00006DE4
.text:00006DE4 ; Attributes: bp-based frame
.text:00006DE4
.text:00006DE4 ; public: void __thiscall CRecordVector<struct NCoderMixer2::CBond>::ClearAndReserve(unsigned int)
.text:00006DE4                 public ?ClearAndReserve@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXI@Z
.text:00006DE4 ?ClearAndReserve@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXI@Z proc near
.text:00006DE4                                         ; CODE XREF: CRecordVector<NCoderMixer2::CBond>::ClearAndSetSize(uint)+15p
.text:00006DE4
.text:00006DE4 var_C           = dword ptr -0Ch
.text:00006DE4 var_8           = dword ptr -8
.text:00006DE4 var_4           = dword ptr -4
.text:00006DE4 arg_0           = dword ptr  8
.text:00006DE4
.text:00006DE4                 push    ebp
.text:00006DE5                 mov     ebp, esp
.text:00006DE7                 sub     esp, 0Ch
.text:00006DEA                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00006DF1                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006DF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006DFF                 mov     [ebp+var_4], ecx
.text:00006E02                 mov     ecx, [ebp+var_4]
.text:00006E05                 call    ?Clear@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXXZ ; CRecordVector<NCoderMixer2::CBond>::Clear(void)
.text:00006E0A                 mov     eax, [ebp+var_4]
.text:00006E0D                 mov     ecx, [ebp+arg_0]
.text:00006E10                 cmp     ecx, [eax+8]
.text:00006E13                 jbe     short loc_6E6C
.text:00006E15                 mov     edx, [ebp+var_4]
.text:00006E18                 mov     eax, [edx]
.text:00006E1A                 mov     [ebp+var_8], eax
.text:00006E1D                 mov     ecx, [ebp+var_8]
.text:00006E20                 push    ecx             ; void *
.text:00006E21                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006E26                 add     esp, 4
.text:00006E29                 mov     edx, [ebp+var_4]
.text:00006E2C                 mov     dword ptr [edx], 0
.text:00006E32                 mov     eax, [ebp+var_4]
.text:00006E35                 mov     dword ptr [eax+8], 0
.text:00006E3C                 xor     ecx, ecx
.text:00006E3E                 mov     eax, [ebp+arg_0]
.text:00006E41                 mov     edx, 8
.text:00006E46                 mul     edx
.text:00006E48                 seto    cl
.text:00006E4B                 neg     ecx
.text:00006E4D                 or      ecx, eax
.text:00006E4F                 push    ecx             ; unsigned int
.text:00006E50                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006E55                 add     esp, 4
.text:00006E58                 mov     [ebp+var_C], eax
.text:00006E5B                 mov     eax, [ebp+var_4]
.text:00006E5E                 mov     ecx, [ebp+var_C]
.text:00006E61                 mov     [eax], ecx
.text:00006E63                 mov     edx, [ebp+var_4]
.text:00006E66                 mov     eax, [ebp+arg_0]
.text:00006E69                 mov     [edx+8], eax
.text:00006E6C
.text:00006E6C loc_6E6C:                               ; CODE XREF: CRecordVector<NCoderMixer2::CBond>::ClearAndReserve(uint)+2Fj
.text:00006E6C                 add     esp, 0Ch
.text:00006E6F                 cmp     ebp, esp
.text:00006E71                 call    __RTC_CheckEsp
.text:00006E76                 mov     esp, ebp
.text:00006E78                 pop     ebp
.text:00006E79                 retn    4
.text:00006E79 ?ClearAndReserve@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXI@Z endp
.text:00006E79
.text:00006E79 _text           ends
.text:00006E79
.text:00006E7C ; ===========================================================================
.text:00006E7C
.text:00006E7C ; Segment type: Pure code
.text:00006E7C ; Segment permissions: Read/Execute
.text:00006E7C _text           segment para public 'CODE' use32
.text:00006E7C                 assume cs:_text
.text:00006E7C                 ;org 6E7Ch
.text:00006E7C ; COMDAT (pick any)
.text:00006E7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006E7C
.text:00006E7C ; =============== S U B R O U T I N E =======================================
.text:00006E7C
.text:00006E7C ; Attributes: bp-based frame
.text:00006E7C
.text:00006E7C ; public: void __thiscall CRecordVector<unsigned __int64>::ClearAndReserve(unsigned int)
.text:00006E7C                 public ?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z
.text:00006E7C ?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z proc near
.text:00006E7C                                         ; CODE XREF: CRecordVector<unsigned __int64>::ClearAndSetSize(uint)+15p
.text:00006E7C
.text:00006E7C var_C           = dword ptr -0Ch
.text:00006E7C var_8           = dword ptr -8
.text:00006E7C var_4           = dword ptr -4
.text:00006E7C arg_0           = dword ptr  8
.text:00006E7C
.text:00006E7C                 push    ebp
.text:00006E7D                 mov     ebp, esp
.text:00006E7F                 sub     esp, 0Ch
.text:00006E82                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00006E89                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006E90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006E97                 mov     [ebp+var_4], ecx
.text:00006E9A                 mov     ecx, [ebp+var_4]
.text:00006E9D                 call    ?Clear@?$CRecordVector@_K@@QAEXXZ ; CRecordVector<unsigned __int64>::Clear(void)
.text:00006EA2                 mov     eax, [ebp+var_4]
.text:00006EA5                 mov     ecx, [ebp+arg_0]
.text:00006EA8                 cmp     ecx, [eax+8]
.text:00006EAB                 jbe     short loc_6F04
.text:00006EAD                 mov     edx, [ebp+var_4]
.text:00006EB0                 mov     eax, [edx]
.text:00006EB2                 mov     [ebp+var_8], eax
.text:00006EB5                 mov     ecx, [ebp+var_8]
.text:00006EB8                 push    ecx             ; void *
.text:00006EB9                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006EBE                 add     esp, 4
.text:00006EC1                 mov     edx, [ebp+var_4]
.text:00006EC4                 mov     dword ptr [edx], 0
.text:00006ECA                 mov     eax, [ebp+var_4]
.text:00006ECD                 mov     dword ptr [eax+8], 0
.text:00006ED4                 xor     ecx, ecx
.text:00006ED6                 mov     eax, [ebp+arg_0]
.text:00006ED9                 mov     edx, 8
.text:00006EDE                 mul     edx
.text:00006EE0                 seto    cl
.text:00006EE3                 neg     ecx
.text:00006EE5                 or      ecx, eax
.text:00006EE7                 push    ecx             ; unsigned int
.text:00006EE8                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006EED                 add     esp, 4
.text:00006EF0                 mov     [ebp+var_C], eax
.text:00006EF3                 mov     eax, [ebp+var_4]
.text:00006EF6                 mov     ecx, [ebp+var_C]
.text:00006EF9                 mov     [eax], ecx
.text:00006EFB                 mov     edx, [ebp+var_4]
.text:00006EFE                 mov     eax, [ebp+arg_0]
.text:00006F01                 mov     [edx+8], eax
.text:00006F04
.text:00006F04 loc_6F04:                               ; CODE XREF: CRecordVector<unsigned __int64>::ClearAndReserve(uint)+2Fj
.text:00006F04                 add     esp, 0Ch
.text:00006F07                 cmp     ebp, esp
.text:00006F09                 call    __RTC_CheckEsp
.text:00006F0E                 mov     esp, ebp
.text:00006F10                 pop     ebp
.text:00006F11                 retn    4
.text:00006F11 ?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z endp
.text:00006F11
.text:00006F11 _text           ends
.text:00006F11
.text:00006F14 ; ===========================================================================
.text:00006F14
.text:00006F14 ; Segment type: Pure code
.text:00006F14 ; Segment permissions: Read/Execute
.text:00006F14 _text           segment para public 'CODE' use32
.text:00006F14                 assume cs:_text
.text:00006F14                 ;org 6F14h
.text:00006F14 ; COMDAT (pick any)
.text:00006F14                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00006F14
.text:00006F14 ; =============== S U B R O U T I N E =======================================
.text:00006F14
.text:00006F14 ; Attributes: bp-based frame
.text:00006F14
.text:00006F14 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:00006F14                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:00006F14 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:00006F14                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:00006F14
.text:00006F14 var_14          = dword ptr -14h
.text:00006F14 var_10          = dword ptr -10h
.text:00006F14 Dst             = dword ptr -0Ch
.text:00006F14 var_8           = dword ptr -8
.text:00006F14 var_4           = dword ptr -4
.text:00006F14
.text:00006F14                 push    ebp
.text:00006F15                 mov     ebp, esp
.text:00006F17                 sub     esp, 14h
.text:00006F1A                 mov     eax, 0CCCCCCCCh
.text:00006F1F                 mov     [ebp+var_14], eax
.text:00006F22                 mov     [ebp+var_10], eax
.text:00006F25                 mov     [ebp+Dst], eax
.text:00006F28                 mov     [ebp+var_8], eax
.text:00006F2B                 mov     [ebp+var_4], eax
.text:00006F2E                 mov     [ebp+var_4], ecx
.text:00006F31                 mov     eax, [ebp+var_4]
.text:00006F34                 mov     ecx, [ebp+var_4]
.text:00006F37                 mov     edx, [eax+4]
.text:00006F3A                 cmp     edx, [ecx+8]
.text:00006F3D                 jnz     loc_6FC8
.text:00006F43                 mov     eax, [ebp+var_4]
.text:00006F46                 mov     ecx, [eax+8]
.text:00006F49                 shr     ecx, 2
.text:00006F4C                 mov     edx, [ebp+var_4]
.text:00006F4F                 mov     eax, [edx+8]
.text:00006F52                 lea     ecx, [eax+ecx+1]
.text:00006F56                 mov     [ebp+var_8], ecx
.text:00006F59                 xor     ecx, ecx
.text:00006F5B                 mov     eax, [ebp+var_8]
.text:00006F5E                 mov     edx, 4
.text:00006F63                 mul     edx
.text:00006F65                 seto    cl
.text:00006F68                 neg     ecx
.text:00006F6A                 or      ecx, eax
.text:00006F6C                 push    ecx             ; unsigned int
.text:00006F6D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00006F72                 add     esp, 4
.text:00006F75                 mov     [ebp+var_10], eax
.text:00006F78                 mov     eax, [ebp+var_10]
.text:00006F7B                 mov     [ebp+Dst], eax
.text:00006F7E                 mov     ecx, [ebp+var_4]
.text:00006F81                 cmp     dword ptr [ecx+4], 0
.text:00006F85                 jz      short loc_6FA3
.text:00006F87                 mov     edx, [ebp+var_4]
.text:00006F8A                 mov     eax, [edx+4]
.text:00006F8D                 shl     eax, 2
.text:00006F90                 push    eax             ; Size
.text:00006F91                 mov     ecx, [ebp+var_4]
.text:00006F94                 mov     edx, [ecx]
.text:00006F96                 push    edx             ; Src
.text:00006F97                 mov     eax, [ebp+Dst]
.text:00006F9A                 push    eax             ; Dst
.text:00006F9B                 call    _memcpy
.text:00006FA0                 add     esp, 0Ch
.text:00006FA3
.text:00006FA3 loc_6FA3:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:00006FA3                 mov     ecx, [ebp+var_4]
.text:00006FA6                 mov     edx, [ecx]
.text:00006FA8                 mov     [ebp+var_14], edx
.text:00006FAB                 mov     eax, [ebp+var_14]
.text:00006FAE                 push    eax             ; void *
.text:00006FAF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006FB4                 add     esp, 4
.text:00006FB7                 mov     ecx, [ebp+var_4]
.text:00006FBA                 mov     edx, [ebp+Dst]
.text:00006FBD                 mov     [ecx], edx
.text:00006FBF                 mov     eax, [ebp+var_4]
.text:00006FC2                 mov     ecx, [ebp+var_8]
.text:00006FC5                 mov     [eax+8], ecx
.text:00006FC8
.text:00006FC8 loc_6FC8:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:00006FC8                 add     esp, 14h
.text:00006FCB                 cmp     ebp, esp
.text:00006FCD                 call    __RTC_CheckEsp
.text:00006FD2                 mov     esp, ebp
.text:00006FD4                 pop     ebp
.text:00006FD5                 retn
.text:00006FD5 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:00006FD5
.text:00006FD5 _text           ends
.text:00006FD5
UNDEF:00006FE0 ; ===========================================================================
UNDEF:00006FE0
UNDEF:00006FE0 ; Segment type: Externs
UNDEF:00006FE0 ; UNDEF
UNDEF:00006FE0                 extrn __RTC_CheckEsp:near
UNDEF:00006FE0                                         ; CODE XREF: NArchive::N7z::CDecProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+32p
UNDEF:00006FE0                                         ; NArchive::N7z::CDecProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+3Dp ...
UNDEF:00006FE4                 extrn __RTC_Shutdown:near
UNDEF:00006FE4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00006FE8                 extrn __RTC_InitBase:near
UNDEF:00006FE8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00006FEC                 extrn ___security_cookie:near
UNDEF:00006FEC                                         ; DATA XREF: NArchive::N7z::CDecoder::CDecoder(bool)+19r
UNDEF:00006FEC                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+2Er ...
UNDEF:00006FF0                 extrn ___CxxFrameHandler3:near
UNDEF:00006FF0                                         ; CODE XREF: __ehhandler$??0CDecoder@N7z@NArchive@@QAE@_N@Z+16j
UNDEF:00006FF0                                         ; __ehhandler$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z+19j ...
UNDEF:00006FF4 ; __fastcall __security_check_cookie(x)
UNDEF:00006FF4                 extrn @__security_check_cookie@4:near
UNDEF:00006FF4                                         ; CODE XREF: __ehhandler$??0CDecoder@N7z@NArchive@@QAE@_N@Z+Cp
UNDEF:00006FF4                                         ; __ehhandler$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z+Fp ...
UNDEF:00006FF8 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00006FF8                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00006FF8                                         ; CODE XREF: NArchive::N7z::CLockedSequentialInStreamMT::Read(void *,uint,uint *)+152p
UNDEF:00006FF8                                         ; NArchive::N7z::CLockedSequentialInStreamST::Read(void *,uint,uint *)+134p ...
UNDEF:00006FFC ; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00006FFC                 extrn __imp__EnterCriticalSection@4:near
UNDEF:00006FFC                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15p
UNDEF:00006FFC                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15r
UNDEF:00007000 ; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00007000                 extrn __imp__LeaveCriticalSection@4:near
UNDEF:00007000                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15p
UNDEF:00007000                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15r
UNDEF:00007004 ; void __cdecl operator delete(void *)
UNDEF:00007004                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$2+7p
UNDEF:00007004                                         ; __unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$3+7p ...
UNDEF:00007008 ; __int32 __thiscall NCoderMixer2::CMixerST::GetMainUnpackStream(NCoderMixer2::CMixerST *__hidden this, struct ISequentialInStream *const *, struct ISequentialInStream **)
UNDEF:00007008                 extrn ?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z:near
UNDEF:00007008                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+15D1p
UNDEF:0000700C ; bool __thiscall NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder(NCoderMixer2::CMixer *__hidden this, unsigned int)
UNDEF:0000700C                 extrn ?Is_PackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z:near
UNDEF:0000700C                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+147Dp
UNDEF:00007010 ; bool __thiscall NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree(NCoderMixer2::CMixer *__hidden this, unsigned int)
UNDEF:00007010                 extrn ?IsThere_ExternalCoder_in_PackTree@CMixer@NCoderMixer2@@QAE_NI@Z:near
UNDEF:00007010                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+10A4p
UNDEF:00007014                 extrn _IID_ICompressSetFinishMode:near
UNDEF:00007014                                         ; DATA XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+C0Ao
UNDEF:00007018 ; public: class UString & __thiscall UString::operator=(wchar_t const *)
UNDEF:00007018                 extrn ??4UString@@QAEAAV0@PB_W@Z:near
UNDEF:00007018                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+A5Ep
UNDEF:0000701C                 extrn _IID_ICryptoSetPassword:near
UNDEF:0000701C                                         ; DATA XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+914o
UNDEF:00007020                 extrn _IID_ICompressSetCoderMt:near
UNDEF:00007020                                         ; DATA XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+831o
UNDEF:00007024                 extrn _IID_ICompressSetDecoderProperties2:near
UNDEF:00007024                                         ; DATA XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+6A6o
UNDEF:00007028 ; __int32 __stdcall CreateCoder(unsigned __int64, bool, struct CCreatedCoder *)
UNDEF:00007028                 extrn ?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z:near
UNDEF:00007028                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+45Cp
UNDEF:0000702C ; _DWORD __thiscall NCoderMixer2::CMixerST::CMixerST(NCoderMixer2::CMixerST *__hidden this, bool)
UNDEF:0000702C                 extrn ??0CMixerST@NCoderMixer2@@QAE@_N@Z:near
UNDEF:0000702C                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+308p
UNDEF:00007030 ; void *__cdecl operator new(unsigned int)
UNDEF:00007030                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+237p
UNDEF:00007030                                         ; NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+2E5p ...
UNDEF:00007034 ; bool __thiscall NCoderMixer2::CBindInfo::CalcMapsAndCheck(NCoderMixer2::CBindInfo *__hidden this)
UNDEF:00007034                 extrn ?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ:near
UNDEF:00007034                                         ; CODE XREF: NArchive::N7z::CDecoder::Decode(IInStream *,unsigned __int64,NArchive::N7z::CFolders const &,uint,unsigned __int64 const *,ISequentialOutStream *,ICompressProgressInfo *,ISequentialInStream * *,ICryptoGetTextPassword *,bool &,bool &,UString &,bool,uint)+DDp
UNDEF:00007038 ; void __stdcall SysFreeString(BSTR bstrString)
UNDEF:00007038                 extrn __imp__SysFreeString@4:near
UNDEF:00007038                                         ; CODE XREF: CMyComBSTR::~CMyComBSTR(void)+17p
UNDEF:00007038                                         ; DATA XREF: CMyComBSTR::~CMyComBSTR(void)+17r
UNDEF:0000703C ; const type_info::`vftable'
UNDEF:0000703C                 extrn ??_7type_info@@6B@:near
UNDEF:0000703C                                         ; DATA XREF: .data:NCoderMixer2::CMixerMT `RTTI Type Descriptor'o
UNDEF:0000703C                                         ; .data:IUnknown `RTTI Type Descriptor'o ...
UNDEF:00007040 ; public: virtual long __thiscall NCoderMixer2::CMixerMT::SetBindInfo(struct NCoderMixer2::CBindInfo const &)
UNDEF:00007040                 extrn ?SetBindInfo@CMixerMT@NCoderMixer2@@UAEJABUCBindInfo@2@@Z:near
UNDEF:00007040                                         ; DATA XREF: .rdata:const NCoderMixer2::CMixerMT::`vftable'{for `NCoderMixer2::CMixer'}o
UNDEF:00007044 ; public: virtual void __thiscall NCoderMixer2::CMixerMT::AddCoder(struct CCreatedCoder const &)
UNDEF:00007044                 extrn ?AddCoder@CMixerMT@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z:near
UNDEF:00007044                                         ; DATA XREF: .rdata:00002978o
UNDEF:00007048 ; public: virtual class NCoderMixer2::CCoder & __thiscall NCoderMixer2::CMixerMT::GetCoder(unsigned int)
UNDEF:00007048                 extrn ?GetCoder@CMixerMT@NCoderMixer2@@UAEAAVCCoder@2@I@Z:near
UNDEF:00007048                                         ; DATA XREF: .rdata:0000297Co
UNDEF:0000704C ; public: virtual void __thiscall NCoderMixer2::CMixerMT::SelectMainCoder(bool)
UNDEF:0000704C                 extrn ?SelectMainCoder@CMixerMT@NCoderMixer2@@UAEX_N@Z:near
UNDEF:0000704C                                         ; DATA XREF: .rdata:00002980o
UNDEF:00007050 ; public: virtual void __thiscall NCoderMixer2::CMixerMT::ReInit(void)
UNDEF:00007050                 extrn ?ReInit@CMixerMT@NCoderMixer2@@UAEXXZ:near
UNDEF:00007050                                         ; DATA XREF: .rdata:00002984o
UNDEF:00007054 ; public: virtual long __thiscall NCoderMixer2::CMixerMT::Code(struct ISequentialInStream * const *, struct ISequentialOutStream * const *, struct ICompressProgressInfo *)
UNDEF:00007054                 extrn ?Code@CMixerMT@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z:near
UNDEF:00007054                                         ; DATA XREF: .rdata:0000298Co
UNDEF:00007058 ; public: virtual unsigned __int64 __thiscall NCoderMixer2::CMixerMT::GetBondStreamSize(unsigned int)const
UNDEF:00007058                 extrn ?GetBondStreamSize@CMixerMT@NCoderMixer2@@UBE_KI@Z:near
UNDEF:00007058                                         ; DATA XREF: .rdata:00002990o
UNDEF:0000705C                 extrn __purecall:near   ; DATA XREF: .rdata:00002CA0o
UNDEF:0000705C                                         ; .rdata:00002CA4o ...
UNDEF:00007060 ; const IID IID_IUnknown
UNDEF:00007060                 extrn _IID_IUnknown:near
UNDEF:00007060                                         ; DATA XREF: NCoderMixer2::CMixerMT::QueryInterface(_GUID const &,void * *)+Co
UNDEF:00007060                                         ; NArchive::N7z::CDecProgress::QueryInterface(_GUID const &,void * *)+Co ...
UNDEF:00007064 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00007064                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00007068 ; void __thiscall NCoderMixer2::CCoder::SetCoderInfo(NCoderMixer2::CCoder *__hidden this, const unsigned __int64 *, const unsigned __int64 *const *)
UNDEF:00007068                 extrn ?SetCoderInfo@CCoder@NCoderMixer2@@QAEXPB_KPBQB_K@Z:near
UNDEF:00007068                                         ; CODE XREF: NCoderMixer2::CMixerMT::SetCoderInfo(uint,unsigned __int64 const *,unsigned __int64 const * const *)+2Ap
UNDEF:0000706C ; void __thiscall NArchive::N7z::CFolders::ParseFolderInfo(NArchive::N7z::CFolders *__hidden this, unsigned int, struct NArchive::N7z::CFolder *)
UNDEF:0000706C                 extrn ?ParseFolderInfo@CFolders@N7z@NArchive@@QBEXIAAUCFolder@23@@Z:near
UNDEF:0000706C                                         ; CODE XREF: NArchive::N7z::CFolders::ParseFolderEx(uint,NArchive::N7z::CFolderEx &)+19p
UNDEF:00007070                 extrn _IID_ICompressProgressInfo:near
UNDEF:00007070                                         ; DATA XREF: NArchive::N7z::CDecProgress::QueryInterface(_GUID const &,void * *):loc_348Co
UNDEF:00007074 ; void __thiscall NCoderMixer2::CBindInfo::ClearMaps(NCoderMixer2::CBindInfo *__hidden this)
UNDEF:00007074                 extrn ?ClearMaps@CBindInfo@NCoderMixer2@@QAEXXZ:near
UNDEF:00007074                                         ; CODE XREF: NCoderMixer2::CBindInfo::Clear(void)+2Fp
UNDEF:00007078 ; __stdcall CriticalSection_Init(x)
UNDEF:00007078                 extrn _CriticalSection_Init@4:near
UNDEF:00007078                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)+12p
UNDEF:0000707C ; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:0000707C                 extrn __imp__DeleteCriticalSection@4:near
UNDEF:0000707C                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)+15p
UNDEF:0000707C                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)+15r
UNDEF:00007080                 extrn _IID_ISequentialInStream:near
UNDEF:00007080                                         ; DATA XREF: NArchive::N7z::CLockedSequentialInStreamMT::QueryInterface(_GUID const &,void * *):loc_3F88o
UNDEF:00007080                                         ; NArchive::N7z::CLockedSequentialInStreamST::QueryInterface(_GUID const &,void * *):loc_41E0o ...
UNDEF:00007084 ; public: virtual long __stdcall CLimitedSequentialInStream::Read(void *, unsigned int, unsigned int *)
UNDEF:00007084                 extrn ?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z:near
UNDEF:00007084                                         ; DATA XREF: .rdata:00004380o
UNDEF:00007088 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00007088                 extrn _memcpy:near      ; CODE XREF: CRecordVector<uint>::operator=(CRecordVector<uint> const &)+C3p
UNDEF:00007088                                         ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=(CRecordVector<NCoderMixer2::CCoderStreamsInfo> const &)+C3p ...
UNDEF:0000708C ; void __thiscall CVirtThread::WaitThreadFinish(CVirtThread *__hidden this)
UNDEF:0000708C                 extrn ?WaitThreadFinish@CVirtThread@@QAEXXZ:near
UNDEF:0000708C                                         ; CODE XREF: NCoderMixer2::CCoderMT::~CCoderMT(void)+40p
UNDEF:0000708C                                         ; CVirtThread::~CVirtThread(void)+40p
UNDEF:00007090 ; private: virtual void __thiscall NCoderMixer2::CCoderMT::Execute(void)
UNDEF:00007090                 extrn ?Execute@CCoderMT@NCoderMixer2@@EAEXXZ:near
UNDEF:00007090                                         ; DATA XREF: .rdata:const NCoderMixer2::CCoderMT::`vftable'o
UNDEF:00007094 ; __stdcall HandlePtr_Close(x)
UNDEF:00007094                 extrn _HandlePtr_Close@4:near
UNDEF:00007094                                         ; CODE XREF: NWindows::CThread::Close(void)+12p
UNDEF:00007094                                         ; NWindows::NSynchronization::CBaseEvent::Close(void)+12p
UNDEF:00007098 ; void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *))
UNDEF:00007098                 extrn ??_M@YGXPAXIHP6EX0@Z@Z:near
UNDEF:00007098                                         ; CODE XREF: NArchive::N7z::CCoderInfo::`vector deleting destructor'(uint)+28p
UNDEF:00007098
UNDEF:00007098