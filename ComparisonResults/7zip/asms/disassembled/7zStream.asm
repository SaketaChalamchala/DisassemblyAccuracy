.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 1FB16F131138A07F637BC12F0A2F74A9
.text:00000000 ; Input CRC32 : 6F6B3463
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\7zStream.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __stdcall SeqInStream_Read2(x, x, x, x)
.text:00000000                 public _SeqInStream_Read2@16
.text:00000000 _SeqInStream_Read2@16 proc near         ; CODE XREF: SeqInStream_Read(x,x,x)+11p
.text:00000000
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_8           = dword ptr  10h
.text:00000000 arg_C           = dword ptr  14h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 10h
.text:00000006                 push    esi
.text:00000007                 mov     eax, 0CCCCCCCCh
.text:0000000C                 mov     [ebp+var_10], eax
.text:0000000F                 mov     [ebp+var_C], eax
.text:00000012                 mov     [ebp+var_8], eax
.text:00000015                 mov     [ebp+var_4], eax
.text:00000018
.text:00000018 loc_18:                                 ; CODE XREF: SeqInStream_Read2(x,x,x,x)+6Bj
.text:00000018                 cmp     [ebp+arg_8], 0
.text:0000001C                 jz      short loc_6D
.text:0000001E                 mov     eax, [ebp+arg_8]
.text:00000021                 mov     [ebp+var_8], eax
.text:00000024                 mov     esi, esp
.text:00000026                 lea     ecx, [ebp+var_8]
.text:00000029                 push    ecx
.text:0000002A                 mov     edx, [ebp+arg_4]
.text:0000002D                 push    edx
.text:0000002E                 mov     eax, [ebp+arg_0]
.text:00000031                 push    eax
.text:00000032                 mov     ecx, [ebp+arg_0]
.text:00000035                 mov     edx, [ecx]
.text:00000037                 call    edx
.text:00000039                 cmp     esi, esp
.text:0000003B                 call    __RTC_CheckEsp
.text:00000040                 mov     [ebp+var_10], eax
.text:00000043                 cmp     [ebp+var_10], 0
.text:00000047                 jz      short loc_4E
.text:00000049                 mov     eax, [ebp+var_10]
.text:0000004C                 jmp     short loc_6F
.text:0000004E ; ---------------------------------------------------------------------------
.text:0000004E
.text:0000004E loc_4E:                                 ; CODE XREF: SeqInStream_Read2(x,x,x,x)+47j
.text:0000004E                 cmp     [ebp+var_8], 0
.text:00000052                 jnz     short loc_59
.text:00000054                 mov     eax, [ebp+arg_C]
.text:00000057                 jmp     short loc_6F
.text:00000059 ; ---------------------------------------------------------------------------
.text:00000059
.text:00000059 loc_59:                                 ; CODE XREF: SeqInStream_Read2(x,x,x,x)+52j
.text:00000059                 mov     eax, [ebp+arg_4]
.text:0000005C                 add     eax, [ebp+var_8]
.text:0000005F                 mov     [ebp+arg_4], eax
.text:00000062                 mov     ecx, [ebp+arg_8]
.text:00000065                 sub     ecx, [ebp+var_8]
.text:00000068                 mov     [ebp+arg_8], ecx
.text:0000006B                 jmp     short loc_18
.text:0000006D ; ---------------------------------------------------------------------------
.text:0000006D
.text:0000006D loc_6D:                                 ; CODE XREF: SeqInStream_Read2(x,x,x,x)+1Cj
.text:0000006D                 xor     eax, eax
.text:0000006F
.text:0000006F loc_6F:                                 ; CODE XREF: SeqInStream_Read2(x,x,x,x)+4Cj
.text:0000006F                                         ; SeqInStream_Read2(x,x,x,x)+57j
.text:0000006F                 push    edx
.text:00000070                 mov     ecx, ebp
.text:00000072                 push    eax
.text:00000073                 lea     edx, $LN9
.text:00000079                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000007E                 pop     eax
.text:0000007F                 pop     edx
.text:00000080                 pop     esi
.text:00000081                 add     esp, 10h
.text:00000084                 cmp     ebp, esp
.text:00000086                 call    __RTC_CheckEsp
.text:0000008B                 mov     esp, ebp
.text:0000008D                 pop     ebp
.text:0000008E                 retn    10h
.text:0000008E _SeqInStream_Read2@16 endp
.text:0000008E
.text:0000008E ; ---------------------------------------------------------------------------
.text:00000091                 align 4
.text:00000094 $LN9            dd 1                    ; DATA XREF: SeqInStream_Read2(x,x,x,x)+73o
.text:00000098                 dd offset $LN8
.text:0000009C $LN8            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000098o
.text:000000A4                 dd offset $LN7          ; "processed"
.text:000000A8 $LN7            db 'processed',0        ; DATA XREF: .text:000000A4o
.text:000000B2                 align 10h
.text:000000C0
.text:000000C0 ; =============== S U B R O U T I N E =======================================
.text:000000C0
.text:000000C0 ; Attributes: bp-based frame
.text:000000C0
.text:000000C0 ; __stdcall SeqInStream_Read(x, x, x)
.text:000000C0                 public _SeqInStream_Read@12
.text:000000C0 _SeqInStream_Read@12 proc near
.text:000000C0
.text:000000C0 arg_0           = dword ptr  8
.text:000000C0 arg_4           = dword ptr  0Ch
.text:000000C0 arg_8           = dword ptr  10h
.text:000000C0
.text:000000C0                 push    ebp
.text:000000C1                 mov     ebp, esp
.text:000000C3                 push    6
.text:000000C5                 mov     eax, [ebp+arg_8]
.text:000000C8                 push    eax
.text:000000C9                 mov     ecx, [ebp+arg_4]
.text:000000CC                 push    ecx
.text:000000CD                 mov     edx, [ebp+arg_0]
.text:000000D0                 push    edx
.text:000000D1                 call    _SeqInStream_Read2@16 ; SeqInStream_Read2(x,x,x,x)
.text:000000D6                 cmp     ebp, esp
.text:000000D8                 call    __RTC_CheckEsp
.text:000000DD                 pop     ebp
.text:000000DE                 retn    0Ch
.text:000000DE _SeqInStream_Read@12 endp
.text:000000DE
.text:000000DE ; ---------------------------------------------------------------------------
.text:000000E1                 align 10h
.text:000000F0
.text:000000F0 ; =============== S U B R O U T I N E =======================================
.text:000000F0
.text:000000F0 ; Attributes: bp-based frame
.text:000000F0
.text:000000F0 ; __stdcall SeqInStream_ReadByte(x, x)
.text:000000F0                 public _SeqInStream_ReadByte@8
.text:000000F0 _SeqInStream_ReadByte@8 proc near
.text:000000F0
.text:000000F0 var_10          = dword ptr -10h
.text:000000F0 var_C           = dword ptr -0Ch
.text:000000F0 var_8           = dword ptr -8
.text:000000F0 var_4           = dword ptr -4
.text:000000F0 arg_0           = dword ptr  8
.text:000000F0 arg_4           = dword ptr  0Ch
.text:000000F0
.text:000000F0                 push    ebp
.text:000000F1                 mov     ebp, esp
.text:000000F3                 sub     esp, 10h
.text:000000F6                 push    esi
.text:000000F7                 mov     eax, 0CCCCCCCCh
.text:000000FC                 mov     [ebp+var_10], eax
.text:000000FF                 mov     [ebp+var_C], eax
.text:00000102                 mov     [ebp+var_8], eax
.text:00000105                 mov     [ebp+var_4], eax
.text:00000108                 mov     [ebp+var_8], 1
.text:0000010F                 mov     esi, esp
.text:00000111                 lea     eax, [ebp+var_8]
.text:00000114                 push    eax
.text:00000115                 mov     ecx, [ebp+arg_4]
.text:00000118                 push    ecx
.text:00000119                 mov     edx, [ebp+arg_0]
.text:0000011C                 push    edx
.text:0000011D                 mov     eax, [ebp+arg_0]
.text:00000120                 mov     ecx, [eax]
.text:00000122                 call    ecx
.text:00000124                 cmp     esi, esp
.text:00000126                 call    __RTC_CheckEsp
.text:0000012B                 mov     [ebp+var_10], eax
.text:0000012E                 cmp     [ebp+var_10], 0
.text:00000132                 jz      short loc_139
.text:00000134                 mov     eax, [ebp+var_10]
.text:00000137                 jmp     short loc_146
.text:00000139 ; ---------------------------------------------------------------------------
.text:00000139
.text:00000139 loc_139:                                ; CODE XREF: SeqInStream_ReadByte(x,x)+42j
.text:00000139                 mov     eax, [ebp+var_8]
.text:0000013C                 sub     eax, 1
.text:0000013F                 neg     eax
.text:00000141                 sbb     eax, eax
.text:00000143                 and     eax, 6
.text:00000146
.text:00000146 loc_146:                                ; CODE XREF: SeqInStream_ReadByte(x,x)+47j
.text:00000146                 push    edx
.text:00000147                 mov     ecx, ebp
.text:00000149                 push    eax
.text:0000014A                 lea     edx, $LN6
.text:00000150                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000155                 pop     eax
.text:00000156                 pop     edx
.text:00000157                 pop     esi
.text:00000158                 add     esp, 10h
.text:0000015B                 cmp     ebp, esp
.text:0000015D                 call    __RTC_CheckEsp
.text:00000162                 mov     esp, ebp
.text:00000164                 pop     ebp
.text:00000165                 retn    8
.text:00000165 _SeqInStream_ReadByte@8 endp
.text:00000165
.text:00000165 ; ---------------------------------------------------------------------------
.text:00000168 $LN6            dd 1                    ; DATA XREF: SeqInStream_ReadByte(x,x)+5Ao
.text:0000016C                 dd offset $LN5
.text:00000170 $LN5            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:0000016Co
.text:00000178                 dd offset $LN4          ; "processed"
.text:0000017C $LN4            db 'processed',0        ; DATA XREF: .text:00000178o
.text:00000186                 align 10h
.text:00000190
.text:00000190 ; =============== S U B R O U T I N E =======================================
.text:00000190
.text:00000190 ; Attributes: bp-based frame
.text:00000190
.text:00000190 ; __stdcall LookInStream_SeekTo(x, x, x)
.text:00000190                 public _LookInStream_SeekTo@12
.text:00000190 _LookInStream_SeekTo@12 proc near
.text:00000190
.text:00000190 var_10          = dword ptr -10h
.text:00000190 var_C           = dword ptr -0Ch
.text:00000190 var_8           = dword ptr -8
.text:00000190 var_4           = dword ptr -4
.text:00000190 arg_0           = dword ptr  8
.text:00000190 arg_4           = dword ptr  0Ch
.text:00000190 arg_8           = dword ptr  10h
.text:00000190
.text:00000190                 push    ebp
.text:00000191                 mov     ebp, esp
.text:00000193                 sub     esp, 10h
.text:00000196                 push    esi
.text:00000197                 mov     eax, 0CCCCCCCCh
.text:0000019C                 mov     [ebp+var_10], eax
.text:0000019F                 mov     [ebp+var_C], eax
.text:000001A2                 mov     [ebp+var_8], eax
.text:000001A5                 mov     [ebp+var_4], eax
.text:000001A8                 mov     eax, [ebp+arg_4]
.text:000001AB                 mov     [ebp+var_C], eax
.text:000001AE                 mov     ecx, [ebp+arg_8]
.text:000001B1                 mov     [ebp+var_8], ecx
.text:000001B4                 mov     esi, esp
.text:000001B6                 push    0
.text:000001B8                 lea     edx, [ebp+var_C]
.text:000001BB                 push    edx
.text:000001BC                 mov     eax, [ebp+arg_0]
.text:000001BF                 push    eax
.text:000001C0                 mov     ecx, [ebp+arg_0]
.text:000001C3                 mov     edx, [ecx+0Ch]
.text:000001C6                 call    edx
.text:000001C8                 cmp     esi, esp
.text:000001CA                 call    __RTC_CheckEsp
.text:000001CF                 push    edx
.text:000001D0                 mov     ecx, ebp
.text:000001D2                 push    eax
.text:000001D3                 lea     edx, $LN5_0
.text:000001D9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000001DE                 pop     eax
.text:000001DF                 pop     edx
.text:000001E0                 pop     esi
.text:000001E1                 add     esp, 10h
.text:000001E4                 cmp     ebp, esp
.text:000001E6                 call    __RTC_CheckEsp
.text:000001EB                 mov     esp, ebp
.text:000001ED                 pop     ebp
.text:000001EE                 retn    0Ch
.text:000001EE _LookInStream_SeekTo@12 endp
.text:000001EE
.text:000001EE ; ---------------------------------------------------------------------------
.text:000001F1                 align 4
.text:000001F4 $LN5_0          dd 1                    ; DATA XREF: LookInStream_SeekTo(x,x,x)+43o
.text:000001F8                 dd offset $LN4_0
.text:000001FC $LN4_0          dd 0FFFFFFF4h, 8        ; DATA XREF: .text:000001F8o
.text:00000204                 dd offset $LN3
.text:00000208 $LN3            dd 0CCCC0074h, 0CCCCCCCCh ; DATA XREF: .text:00000204o
.text:00000210
.text:00000210 ; =============== S U B R O U T I N E =======================================
.text:00000210
.text:00000210 ; Attributes: bp-based frame
.text:00000210
.text:00000210 ; int __stdcall LookInStream_LookRead(int, void *Dst, int)
.text:00000210                 public _LookInStream_LookRead@12
.text:00000210 _LookInStream_LookRead@12 proc near     ; CODE XREF: SecToLook_Read(x,x,x)+20p
.text:00000210
.text:00000210 var_10          = dword ptr -10h
.text:00000210 var_C           = dword ptr -0Ch
.text:00000210 Src             = dword ptr -8
.text:00000210 var_4           = dword ptr -4
.text:00000210 arg_0           = dword ptr  8
.text:00000210 Dst             = dword ptr  0Ch
.text:00000210 arg_8           = dword ptr  10h
.text:00000210
.text:00000210                 push    ebp
.text:00000211                 mov     ebp, esp
.text:00000213                 sub     esp, 10h
.text:00000216                 push    esi
.text:00000217                 mov     eax, 0CCCCCCCCh
.text:0000021C                 mov     [ebp+var_10], eax
.text:0000021F                 mov     [ebp+var_C], eax
.text:00000222                 mov     [ebp+Src], eax
.text:00000225                 mov     [ebp+var_4], eax
.text:00000228                 mov     eax, [ebp+arg_8]
.text:0000022B                 cmp     dword ptr [eax], 0
.text:0000022E                 jnz     short loc_234
.text:00000230                 xor     eax, eax
.text:00000232                 jmp     short loc_28F
.text:00000234 ; ---------------------------------------------------------------------------
.text:00000234
.text:00000234 loc_234:                                ; CODE XREF: LookInStream_LookRead(x,x,x)+1Ej
.text:00000234                 mov     esi, esp
.text:00000236                 mov     ecx, [ebp+arg_8]
.text:00000239                 push    ecx
.text:0000023A                 lea     edx, [ebp+Src]
.text:0000023D                 push    edx
.text:0000023E                 mov     eax, [ebp+arg_0]
.text:00000241                 push    eax
.text:00000242                 mov     ecx, [ebp+arg_0]
.text:00000245                 mov     edx, [ecx]
.text:00000247                 call    edx
.text:00000249                 cmp     esi, esp
.text:0000024B                 call    __RTC_CheckEsp
.text:00000250                 mov     [ebp+var_10], eax
.text:00000253                 cmp     [ebp+var_10], 0
.text:00000257                 jz      short loc_25E
.text:00000259                 mov     eax, [ebp+var_10]
.text:0000025C                 jmp     short loc_28F
.text:0000025E ; ---------------------------------------------------------------------------
.text:0000025E
.text:0000025E loc_25E:                                ; CODE XREF: LookInStream_LookRead(x,x,x)+47j
.text:0000025E                 mov     eax, [ebp+arg_8]
.text:00000261                 mov     ecx, [eax]
.text:00000263                 push    ecx             ; Size
.text:00000264                 mov     edx, [ebp+Src]
.text:00000267                 push    edx             ; Src
.text:00000268                 mov     eax, [ebp+Dst]
.text:0000026B                 push    eax             ; Dst
.text:0000026C                 call    _memcpy
.text:00000271                 add     esp, 0Ch
.text:00000274                 mov     esi, esp
.text:00000276                 mov     ecx, [ebp+arg_8]
.text:00000279                 mov     edx, [ecx]
.text:0000027B                 push    edx
.text:0000027C                 mov     eax, [ebp+arg_0]
.text:0000027F                 push    eax
.text:00000280                 mov     ecx, [ebp+arg_0]
.text:00000283                 mov     edx, [ecx+4]
.text:00000286                 call    edx
.text:00000288                 cmp     esi, esp
.text:0000028A                 call    __RTC_CheckEsp
.text:0000028F
.text:0000028F loc_28F:                                ; CODE XREF: LookInStream_LookRead(x,x,x)+22j
.text:0000028F                                         ; LookInStream_LookRead(x,x,x)+4Cj
.text:0000028F                 push    edx
.text:00000290                 mov     ecx, ebp
.text:00000292                 push    eax
.text:00000293                 lea     edx, $LN7_0
.text:00000299                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000029E                 pop     eax
.text:0000029F                 pop     edx
.text:000002A0                 pop     esi
.text:000002A1                 add     esp, 10h
.text:000002A4                 cmp     ebp, esp
.text:000002A6                 call    __RTC_CheckEsp
.text:000002AB                 mov     esp, ebp
.text:000002AD                 pop     ebp
.text:000002AE                 retn    0Ch
.text:000002AE _LookInStream_LookRead@12 endp
.text:000002AE
.text:000002AE ; ---------------------------------------------------------------------------
.text:000002B1                 align 4
.text:000002B4 $LN7_0          dd 1                    ; DATA XREF: LookInStream_LookRead(x,x,x)+83o
.text:000002B8                 dd offset $LN6_0
.text:000002BC $LN6_0          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000002B8o
.text:000002C4                 dd offset $LN5_1        ; "lookBuf"
.text:000002C8 $LN5_1          db 'lookBuf',0          ; DATA XREF: .text:000002C4o
.text:000002D0
.text:000002D0 ; =============== S U B R O U T I N E =======================================
.text:000002D0
.text:000002D0 ; Attributes: bp-based frame
.text:000002D0
.text:000002D0 ; __stdcall LookInStream_Read2(x, x, x, x)
.text:000002D0                 public _LookInStream_Read2@16
.text:000002D0 _LookInStream_Read2@16 proc near        ; CODE XREF: LookInStream_Read(x,x,x)+11p
.text:000002D0
.text:000002D0 var_10          = dword ptr -10h
.text:000002D0 var_C           = dword ptr -0Ch
.text:000002D0 var_8           = dword ptr -8
.text:000002D0 var_4           = dword ptr -4
.text:000002D0 arg_0           = dword ptr  8
.text:000002D0 arg_4           = dword ptr  0Ch
.text:000002D0 arg_8           = dword ptr  10h
.text:000002D0 arg_C           = dword ptr  14h
.text:000002D0
.text:000002D0                 push    ebp
.text:000002D1                 mov     ebp, esp
.text:000002D3                 sub     esp, 10h
.text:000002D6                 push    esi
.text:000002D7                 mov     eax, 0CCCCCCCCh
.text:000002DC                 mov     [ebp+var_10], eax
.text:000002DF                 mov     [ebp+var_C], eax
.text:000002E2                 mov     [ebp+var_8], eax
.text:000002E5                 mov     [ebp+var_4], eax
.text:000002E8
.text:000002E8 loc_2E8:                                ; CODE XREF: LookInStream_Read2(x,x,x,x)+6Cj
.text:000002E8                 cmp     [ebp+arg_8], 0
.text:000002EC                 jz      short loc_33E
.text:000002EE                 mov     eax, [ebp+arg_8]
.text:000002F1                 mov     [ebp+var_8], eax
.text:000002F4                 mov     esi, esp
.text:000002F6                 lea     ecx, [ebp+var_8]
.text:000002F9                 push    ecx
.text:000002FA                 mov     edx, [ebp+arg_4]
.text:000002FD                 push    edx
.text:000002FE                 mov     eax, [ebp+arg_0]
.text:00000301                 push    eax
.text:00000302                 mov     ecx, [ebp+arg_0]
.text:00000305                 mov     edx, [ecx+8]
.text:00000308                 call    edx
.text:0000030A                 cmp     esi, esp
.text:0000030C                 call    __RTC_CheckEsp
.text:00000311                 mov     [ebp+var_10], eax
.text:00000314                 cmp     [ebp+var_10], 0
.text:00000318                 jz      short loc_31F
.text:0000031A                 mov     eax, [ebp+var_10]
.text:0000031D                 jmp     short loc_340
.text:0000031F ; ---------------------------------------------------------------------------
.text:0000031F
.text:0000031F loc_31F:                                ; CODE XREF: LookInStream_Read2(x,x,x,x)+48j
.text:0000031F                 cmp     [ebp+var_8], 0
.text:00000323                 jnz     short loc_32A
.text:00000325                 mov     eax, [ebp+arg_C]
.text:00000328                 jmp     short loc_340
.text:0000032A ; ---------------------------------------------------------------------------
.text:0000032A
.text:0000032A loc_32A:                                ; CODE XREF: LookInStream_Read2(x,x,x,x)+53j
.text:0000032A                 mov     eax, [ebp+arg_4]
.text:0000032D                 add     eax, [ebp+var_8]
.text:00000330                 mov     [ebp+arg_4], eax
.text:00000333                 mov     ecx, [ebp+arg_8]
.text:00000336                 sub     ecx, [ebp+var_8]
.text:00000339                 mov     [ebp+arg_8], ecx
.text:0000033C                 jmp     short loc_2E8
.text:0000033E ; ---------------------------------------------------------------------------
.text:0000033E
.text:0000033E loc_33E:                                ; CODE XREF: LookInStream_Read2(x,x,x,x)+1Cj
.text:0000033E                 xor     eax, eax
.text:00000340
.text:00000340 loc_340:                                ; CODE XREF: LookInStream_Read2(x,x,x,x)+4Dj
.text:00000340                                         ; LookInStream_Read2(x,x,x,x)+58j
.text:00000340                 push    edx
.text:00000341                 mov     ecx, ebp
.text:00000343                 push    eax
.text:00000344                 lea     edx, $LN9_0
.text:0000034A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000034F                 pop     eax
.text:00000350                 pop     edx
.text:00000351                 pop     esi
.text:00000352                 add     esp, 10h
.text:00000355                 cmp     ebp, esp
.text:00000357                 call    __RTC_CheckEsp
.text:0000035C                 mov     esp, ebp
.text:0000035E                 pop     ebp
.text:0000035F                 retn    10h
.text:0000035F _LookInStream_Read2@16 endp
.text:0000035F
.text:0000035F ; ---------------------------------------------------------------------------
.text:00000362                 align 4
.text:00000364 $LN9_0          dd 1                    ; DATA XREF: LookInStream_Read2(x,x,x,x)+74o
.text:00000368                 dd offset $LN8_0
.text:0000036C $LN8_0          dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000368o
.text:00000374                 dd offset $LN7_1        ; "processed"
.text:00000378 $LN7_1          db 'processed',0        ; DATA XREF: .text:00000374o
.text:00000382                 align 10h
.text:00000390
.text:00000390 ; =============== S U B R O U T I N E =======================================
.text:00000390
.text:00000390 ; Attributes: bp-based frame
.text:00000390
.text:00000390 ; __stdcall LookInStream_Read(x, x, x)
.text:00000390                 public _LookInStream_Read@12
.text:00000390 _LookInStream_Read@12 proc near
.text:00000390
.text:00000390 arg_0           = dword ptr  8
.text:00000390 arg_4           = dword ptr  0Ch
.text:00000390 arg_8           = dword ptr  10h
.text:00000390
.text:00000390                 push    ebp
.text:00000391                 mov     ebp, esp
.text:00000393                 push    6
.text:00000395                 mov     eax, [ebp+arg_8]
.text:00000398                 push    eax
.text:00000399                 mov     ecx, [ebp+arg_4]
.text:0000039C                 push    ecx
.text:0000039D                 mov     edx, [ebp+arg_0]
.text:000003A0                 push    edx
.text:000003A1                 call    _LookInStream_Read2@16 ; LookInStream_Read2(x,x,x,x)
.text:000003A6                 cmp     ebp, esp
.text:000003A8                 call    __RTC_CheckEsp
.text:000003AD                 pop     ebp
.text:000003AE                 retn    0Ch
.text:000003AE _LookInStream_Read@12 endp
.text:000003AE
.text:000003AE ; ---------------------------------------------------------------------------
.text:000003B1                 align 10h
.text:000003C0
.text:000003C0 ; =============== S U B R O U T I N E =======================================
.text:000003C0
.text:000003C0 ; Attributes: bp-based frame
.text:000003C0
.text:000003C0 ; __stdcall LookToRead_CreateVTable(x, x)
.text:000003C0                 public _LookToRead_CreateVTable@8
.text:000003C0 _LookToRead_CreateVTable@8 proc near
.text:000003C0
.text:000003C0 var_4           = dword ptr -4
.text:000003C0 arg_0           = dword ptr  8
.text:000003C0 arg_4           = dword ptr  0Ch
.text:000003C0
.text:000003C0                 push    ebp
.text:000003C1                 mov     ebp, esp
.text:000003C3                 push    ecx
.text:000003C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003CB                 cmp     [ebp+arg_4], 0
.text:000003CF                 jz      short loc_3DA
.text:000003D1                 mov     [ebp+var_4], offset _LookToRead_Look_Lookahead@12 ; LookToRead_Look_Lookahead(x,x,x)
.text:000003D8                 jmp     short loc_3E1
.text:000003DA ; ---------------------------------------------------------------------------
.text:000003DA
.text:000003DA loc_3DA:                                ; CODE XREF: LookToRead_CreateVTable(x,x)+Fj
.text:000003DA                 mov     [ebp+var_4], offset _LookToRead_Look_Exact@12 ; LookToRead_Look_Exact(x,x,x)
.text:000003E1
.text:000003E1 loc_3E1:                                ; CODE XREF: LookToRead_CreateVTable(x,x)+18j
.text:000003E1                 mov     eax, [ebp+arg_0]
.text:000003E4                 mov     ecx, [ebp+var_4]
.text:000003E7                 mov     [eax], ecx
.text:000003E9                 mov     edx, [ebp+arg_0]
.text:000003EC                 mov     dword ptr [edx+4], offset _LookToRead_Skip@8 ; LookToRead_Skip(x,x)
.text:000003F3                 mov     eax, [ebp+arg_0]
.text:000003F6                 mov     dword ptr [eax+8], offset _LookToRead_Read@12 ; LookToRead_Read(x,x,x)
.text:000003FD                 mov     ecx, [ebp+arg_0]
.text:00000400                 mov     dword ptr [ecx+0Ch], offset _LookToRead_Seek@12 ; LookToRead_Seek(x,x,x)
.text:00000407                 mov     esp, ebp
.text:00000409                 pop     ebp
.text:0000040A                 retn    8
.text:0000040A _LookToRead_CreateVTable@8 endp
.text:0000040A
.text:0000040A ; ---------------------------------------------------------------------------
.text:0000040D                 align 10h
.text:00000410
.text:00000410 ; =============== S U B R O U T I N E =======================================
.text:00000410
.text:00000410 ; Attributes: bp-based frame
.text:00000410
.text:00000410 ; __stdcall LookToRead_Look_Lookahead(x, x, x)
.text:00000410 _LookToRead_Look_Lookahead@12 proc near ; DATA XREF: LookToRead_CreateVTable(x,x)+11o
.text:00000410
.text:00000410 var_14          = dword ptr -14h
.text:00000410 var_10          = dword ptr -10h
.text:00000410 var_C           = dword ptr -0Ch
.text:00000410 var_8           = dword ptr -8
.text:00000410 var_4           = dword ptr -4
.text:00000410 arg_0           = dword ptr  8
.text:00000410 arg_4           = dword ptr  0Ch
.text:00000410 arg_8           = dword ptr  10h
.text:00000410
.text:00000410                 push    ebp
.text:00000411                 mov     ebp, esp
.text:00000413                 sub     esp, 14h
.text:00000416                 push    esi
.text:00000417                 mov     eax, 0CCCCCCCCh
.text:0000041C                 mov     [ebp+var_14], eax
.text:0000041F                 mov     [ebp+var_10], eax
.text:00000422                 mov     [ebp+var_C], eax
.text:00000425                 mov     [ebp+var_8], eax
.text:00000428                 mov     [ebp+var_4], eax
.text:0000042B                 mov     [ebp+var_4], 0
.text:00000432                 mov     eax, [ebp+arg_0]
.text:00000435                 mov     [ebp+var_8], eax
.text:00000438                 mov     ecx, [ebp+var_8]
.text:0000043B                 mov     edx, [ebp+var_8]
.text:0000043E                 mov     eax, [ecx+18h]
.text:00000441                 sub     eax, [edx+14h]
.text:00000444                 mov     [ebp+var_10], eax
.text:00000447                 jnz     short loc_493
.text:00000449                 mov     ecx, [ebp+arg_8]
.text:0000044C                 cmp     dword ptr [ecx], 0
.text:0000044F                 jbe     short loc_493
.text:00000451                 mov     edx, [ebp+var_8]
.text:00000454                 mov     dword ptr [edx+14h], 0
.text:0000045B                 mov     [ebp+var_10], 4000h
.text:00000462                 mov     esi, esp
.text:00000464                 lea     eax, [ebp+var_10]
.text:00000467                 push    eax
.text:00000468                 mov     ecx, [ebp+var_8]
.text:0000046B                 add     ecx, 1Ch
.text:0000046E                 push    ecx
.text:0000046F                 mov     edx, [ebp+var_8]
.text:00000472                 mov     eax, [edx+10h]
.text:00000475                 push    eax
.text:00000476                 mov     ecx, [ebp+var_8]
.text:00000479                 mov     edx, [ecx+10h]
.text:0000047C                 mov     eax, [edx]
.text:0000047E                 call    eax
.text:00000480                 cmp     esi, esp
.text:00000482                 call    __RTC_CheckEsp
.text:00000487                 mov     [ebp+var_4], eax
.text:0000048A                 mov     ecx, [ebp+var_8]
.text:0000048D                 mov     edx, [ebp+var_10]
.text:00000490                 mov     [ecx+18h], edx
.text:00000493
.text:00000493 loc_493:                                ; CODE XREF: LookToRead_Look_Lookahead(x,x,x)+37j
.text:00000493                                         ; LookToRead_Look_Lookahead(x,x,x)+3Fj
.text:00000493                 mov     eax, [ebp+arg_8]
.text:00000496                 mov     ecx, [ebp+var_10]
.text:00000499                 cmp     ecx, [eax]
.text:0000049B                 jnb     short loc_4A5
.text:0000049D                 mov     edx, [ebp+arg_8]
.text:000004A0                 mov     eax, [ebp+var_10]
.text:000004A3                 mov     [edx], eax
.text:000004A5
.text:000004A5 loc_4A5:                                ; CODE XREF: LookToRead_Look_Lookahead(x,x,x)+8Bj
.text:000004A5                 mov     ecx, [ebp+var_8]
.text:000004A8                 mov     edx, [ecx+14h]
.text:000004AB                 mov     eax, [ebp+var_8]
.text:000004AE                 lea     ecx, [eax+edx+1Ch]
.text:000004B2                 mov     edx, [ebp+arg_4]
.text:000004B5                 mov     [edx], ecx
.text:000004B7                 mov     eax, [ebp+var_4]
.text:000004BA                 push    edx
.text:000004BB                 mov     ecx, ebp
.text:000004BD                 push    eax
.text:000004BE                 lea     edx, $LN7_2
.text:000004C4                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000004C9                 pop     eax
.text:000004CA                 pop     edx
.text:000004CB                 pop     esi
.text:000004CC                 add     esp, 14h
.text:000004CF                 cmp     ebp, esp
.text:000004D1                 call    __RTC_CheckEsp
.text:000004D6                 mov     esp, ebp
.text:000004D8                 pop     ebp
.text:000004D9                 retn    0Ch
.text:000004D9 _LookToRead_Look_Lookahead@12 endp
.text:000004D9
.text:000004D9 ; ---------------------------------------------------------------------------
.text:000004DC $LN7_2          dd 1                    ; DATA XREF: LookToRead_Look_Lookahead(x,x,x)+AEo
.text:000004E0                 dd offset $LN6_1
.text:000004E4 $LN6_1          dd 0FFFFFFF0h, 4        ; DATA XREF: .text:000004E0o
.text:000004EC                 dd offset $LN5_2        ; "size2"
.text:000004F0 $LN5_2          db 'size2',0            ; DATA XREF: .text:000004ECo
.text:000004F6                 align 10h
.text:00000500
.text:00000500 ; =============== S U B R O U T I N E =======================================
.text:00000500
.text:00000500 ; Attributes: bp-based frame
.text:00000500
.text:00000500 ; __stdcall LookToRead_Look_Exact(x, x, x)
.text:00000500 _LookToRead_Look_Exact@12 proc near     ; DATA XREF: LookToRead_CreateVTable(x,x):loc_3DAo
.text:00000500
.text:00000500 var_C           = dword ptr -0Ch
.text:00000500 var_8           = dword ptr -8
.text:00000500 var_4           = dword ptr -4
.text:00000500 arg_0           = dword ptr  8
.text:00000500 arg_4           = dword ptr  0Ch
.text:00000500 arg_8           = dword ptr  10h
.text:00000500
.text:00000500                 push    ebp
.text:00000501                 mov     ebp, esp
.text:00000503                 sub     esp, 0Ch
.text:00000506                 push    esi
.text:00000507                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000050E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000515                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000051C                 mov     [ebp+var_4], 0
.text:00000523                 mov     eax, [ebp+arg_0]
.text:00000526                 mov     [ebp+var_8], eax
.text:00000529                 mov     ecx, [ebp+var_8]
.text:0000052C                 mov     edx, [ebp+var_8]
.text:0000052F                 mov     eax, [ecx+18h]
.text:00000532                 sub     eax, [edx+14h]
.text:00000535                 mov     [ebp+var_C], eax
.text:00000538                 jnz     short loc_59C
.text:0000053A                 mov     ecx, [ebp+arg_8]
.text:0000053D                 cmp     dword ptr [ecx], 0
.text:00000540                 jbe     short loc_59C
.text:00000542                 mov     edx, [ebp+var_8]
.text:00000545                 mov     dword ptr [edx+14h], 0
.text:0000054C                 mov     eax, [ebp+arg_8]
.text:0000054F                 cmp     dword ptr [eax], 4000h
.text:00000555                 jbe     short loc_560
.text:00000557                 mov     ecx, [ebp+arg_8]
.text:0000055A                 mov     dword ptr [ecx], 4000h
.text:00000560
.text:00000560 loc_560:                                ; CODE XREF: LookToRead_Look_Exact(x,x,x)+55j
.text:00000560                 mov     esi, esp
.text:00000562                 mov     edx, [ebp+arg_8]
.text:00000565                 push    edx
.text:00000566                 mov     eax, [ebp+var_8]
.text:00000569                 add     eax, 1Ch
.text:0000056C                 push    eax
.text:0000056D                 mov     ecx, [ebp+var_8]
.text:00000570                 mov     edx, [ecx+10h]
.text:00000573                 push    edx
.text:00000574                 mov     eax, [ebp+var_8]
.text:00000577                 mov     ecx, [eax+10h]
.text:0000057A                 mov     edx, [ecx]
.text:0000057C                 call    edx
.text:0000057E                 cmp     esi, esp
.text:00000580                 call    __RTC_CheckEsp
.text:00000585                 mov     [ebp+var_4], eax
.text:00000588                 mov     eax, [ebp+var_8]
.text:0000058B                 mov     ecx, [ebp+arg_8]
.text:0000058E                 mov     edx, [ecx]
.text:00000590                 mov     [eax+18h], edx
.text:00000593                 mov     eax, [ebp+var_8]
.text:00000596                 mov     ecx, [eax+18h]
.text:00000599                 mov     [ebp+var_C], ecx
.text:0000059C
.text:0000059C loc_59C:                                ; CODE XREF: LookToRead_Look_Exact(x,x,x)+38j
.text:0000059C                                         ; LookToRead_Look_Exact(x,x,x)+40j
.text:0000059C                 mov     edx, [ebp+arg_8]
.text:0000059F                 mov     eax, [ebp+var_C]
.text:000005A2                 cmp     eax, [edx]
.text:000005A4                 jnb     short loc_5AE
.text:000005A6                 mov     ecx, [ebp+arg_8]
.text:000005A9                 mov     edx, [ebp+var_C]
.text:000005AC                 mov     [ecx], edx
.text:000005AE
.text:000005AE loc_5AE:                                ; CODE XREF: LookToRead_Look_Exact(x,x,x)+A4j
.text:000005AE                 mov     eax, [ebp+var_8]
.text:000005B1                 mov     ecx, [eax+14h]
.text:000005B4                 mov     edx, [ebp+var_8]
.text:000005B7                 lea     eax, [edx+ecx+1Ch]
.text:000005BB                 mov     ecx, [ebp+arg_4]
.text:000005BE                 mov     [ecx], eax
.text:000005C0                 mov     eax, [ebp+var_4]
.text:000005C3                 pop     esi
.text:000005C4                 add     esp, 0Ch
.text:000005C7                 cmp     ebp, esp
.text:000005C9                 call    __RTC_CheckEsp
.text:000005CE                 mov     esp, ebp
.text:000005D0                 pop     ebp
.text:000005D1                 retn    0Ch
.text:000005D1 _LookToRead_Look_Exact@12 endp
.text:000005D1
.text:000005D1 ; ---------------------------------------------------------------------------
.text:000005D4                 align 10h
.text:000005E0
.text:000005E0 ; =============== S U B R O U T I N E =======================================
.text:000005E0
.text:000005E0 ; Attributes: bp-based frame
.text:000005E0
.text:000005E0 ; __stdcall LookToRead_Skip(x, x)
.text:000005E0 _LookToRead_Skip@8 proc near            ; DATA XREF: LookToRead_CreateVTable(x,x)+2Co
.text:000005E0
.text:000005E0 var_4           = dword ptr -4
.text:000005E0 arg_0           = dword ptr  8
.text:000005E0 arg_4           = dword ptr  0Ch
.text:000005E0
.text:000005E0                 push    ebp
.text:000005E1                 mov     ebp, esp
.text:000005E3                 push    ecx
.text:000005E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005EB                 mov     eax, [ebp+arg_0]
.text:000005EE                 mov     [ebp+var_4], eax
.text:000005F1                 mov     ecx, [ebp+var_4]
.text:000005F4                 mov     edx, [ecx+14h]
.text:000005F7                 add     edx, [ebp+arg_4]
.text:000005FA                 mov     eax, [ebp+var_4]
.text:000005FD                 mov     [eax+14h], edx
.text:00000600                 xor     eax, eax
.text:00000602                 mov     esp, ebp
.text:00000604                 pop     ebp
.text:00000605                 retn    8
.text:00000605 _LookToRead_Skip@8 endp
.text:00000605
.text:00000605 ; ---------------------------------------------------------------------------
.text:00000608                 align 10h
.text:00000610
.text:00000610 ; =============== S U B R O U T I N E =======================================
.text:00000610
.text:00000610 ; Attributes: bp-based frame
.text:00000610
.text:00000610 ; int __stdcall LookToRead_Read(int, void *Dst, int)
.text:00000610 _LookToRead_Read@12 proc near           ; DATA XREF: LookToRead_CreateVTable(x,x)+36o
.text:00000610
.text:00000610 Size            = dword ptr -8
.text:00000610 var_4           = dword ptr -4
.text:00000610 arg_0           = dword ptr  8
.text:00000610 Dst             = dword ptr  0Ch
.text:00000610 arg_8           = dword ptr  10h
.text:00000610
.text:00000610                 push    ebp
.text:00000611                 mov     ebp, esp
.text:00000613                 sub     esp, 8
.text:00000616                 push    esi
.text:00000617                 mov     [ebp+Size], 0CCCCCCCCh
.text:0000061E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000625                 mov     eax, [ebp+arg_0]
.text:00000628                 mov     [ebp+var_4], eax
.text:0000062B                 mov     ecx, [ebp+var_4]
.text:0000062E                 mov     edx, [ebp+var_4]
.text:00000631                 mov     eax, [ecx+18h]
.text:00000634                 sub     eax, [edx+14h]
.text:00000637                 mov     [ebp+Size], eax
.text:0000063A                 jnz     short loc_660
.text:0000063C                 mov     esi, esp
.text:0000063E                 mov     ecx, [ebp+arg_8]
.text:00000641                 push    ecx
.text:00000642                 mov     edx, [ebp+Dst]
.text:00000645                 push    edx
.text:00000646                 mov     eax, [ebp+var_4]
.text:00000649                 mov     ecx, [eax+10h]
.text:0000064C                 push    ecx
.text:0000064D                 mov     edx, [ebp+var_4]
.text:00000650                 mov     eax, [edx+10h]
.text:00000653                 mov     ecx, [eax]
.text:00000655                 call    ecx
.text:00000657                 cmp     esi, esp
.text:00000659                 call    __RTC_CheckEsp
.text:0000065E                 jmp     short loc_6A9
.text:00000660 ; ---------------------------------------------------------------------------
.text:00000660
.text:00000660 loc_660:                                ; CODE XREF: LookToRead_Read(x,x,x)+2Aj
.text:00000660                 mov     edx, [ebp+arg_8]
.text:00000663                 mov     eax, [ebp+Size]
.text:00000666                 cmp     eax, [edx]
.text:00000668                 jbe     short loc_672
.text:0000066A                 mov     ecx, [ebp+arg_8]
.text:0000066D                 mov     edx, [ecx]
.text:0000066F                 mov     [ebp+Size], edx
.text:00000672
.text:00000672 loc_672:                                ; CODE XREF: LookToRead_Read(x,x,x)+58j
.text:00000672                 mov     eax, [ebp+Size]
.text:00000675                 push    eax             ; Size
.text:00000676                 mov     ecx, [ebp+var_4]
.text:00000679                 mov     edx, [ecx+14h]
.text:0000067C                 mov     eax, [ebp+var_4]
.text:0000067F                 lea     ecx, [eax+edx+1Ch]
.text:00000683                 push    ecx             ; Src
.text:00000684                 mov     edx, [ebp+Dst]
.text:00000687                 push    edx             ; Dst
.text:00000688                 call    _memcpy
.text:0000068D                 add     esp, 0Ch
.text:00000690                 mov     eax, [ebp+var_4]
.text:00000693                 mov     ecx, [eax+14h]
.text:00000696                 add     ecx, [ebp+Size]
.text:00000699                 mov     edx, [ebp+var_4]
.text:0000069C                 mov     [edx+14h], ecx
.text:0000069F                 mov     eax, [ebp+arg_8]
.text:000006A2                 mov     ecx, [ebp+Size]
.text:000006A5                 mov     [eax], ecx
.text:000006A7                 xor     eax, eax
.text:000006A9
.text:000006A9 loc_6A9:                                ; CODE XREF: LookToRead_Read(x,x,x)+4Ej
.text:000006A9                 pop     esi
.text:000006AA                 add     esp, 8
.text:000006AD                 cmp     ebp, esp
.text:000006AF                 call    __RTC_CheckEsp
.text:000006B4                 mov     esp, ebp
.text:000006B6                 pop     ebp
.text:000006B7                 retn    0Ch
.text:000006B7 _LookToRead_Read@12 endp
.text:000006B7
.text:000006B7 ; ---------------------------------------------------------------------------
.text:000006BA                 align 10h
.text:000006C0
.text:000006C0 ; =============== S U B R O U T I N E =======================================
.text:000006C0
.text:000006C0 ; Attributes: bp-based frame
.text:000006C0
.text:000006C0 ; __stdcall LookToRead_Seek(x, x, x)
.text:000006C0 _LookToRead_Seek@12 proc near           ; DATA XREF: LookToRead_CreateVTable(x,x)+40o
.text:000006C0
.text:000006C0 var_4           = dword ptr -4
.text:000006C0 arg_0           = dword ptr  8
.text:000006C0 arg_4           = dword ptr  0Ch
.text:000006C0 arg_8           = dword ptr  10h
.text:000006C0
.text:000006C0                 push    ebp
.text:000006C1                 mov     ebp, esp
.text:000006C3                 push    ecx
.text:000006C4                 push    esi
.text:000006C5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006CC                 mov     eax, [ebp+arg_0]
.text:000006CF                 mov     [ebp+var_4], eax
.text:000006D2                 mov     ecx, [ebp+var_4]
.text:000006D5                 mov     dword ptr [ecx+18h], 0
.text:000006DC                 mov     edx, [ebp+var_4]
.text:000006DF                 mov     dword ptr [edx+14h], 0
.text:000006E6                 mov     esi, esp
.text:000006E8                 mov     eax, [ebp+arg_8]
.text:000006EB                 push    eax
.text:000006EC                 mov     ecx, [ebp+arg_4]
.text:000006EF                 push    ecx
.text:000006F0                 mov     edx, [ebp+var_4]
.text:000006F3                 mov     eax, [edx+10h]
.text:000006F6                 push    eax
.text:000006F7                 mov     ecx, [ebp+var_4]
.text:000006FA                 mov     edx, [ecx+10h]
.text:000006FD                 mov     eax, [edx+4]
.text:00000700                 call    eax
.text:00000702                 cmp     esi, esp
.text:00000704                 call    __RTC_CheckEsp
.text:00000709                 pop     esi
.text:0000070A                 add     esp, 4
.text:0000070D                 cmp     ebp, esp
.text:0000070F                 call    __RTC_CheckEsp
.text:00000714                 mov     esp, ebp
.text:00000716                 pop     ebp
.text:00000717                 retn    0Ch
.text:00000717 _LookToRead_Seek@12 endp
.text:00000717
.text:00000717 ; ---------------------------------------------------------------------------
.text:0000071A                 align 10h
.text:00000720
.text:00000720 ; =============== S U B R O U T I N E =======================================
.text:00000720
.text:00000720 ; Attributes: bp-based frame
.text:00000720
.text:00000720 ; __stdcall LookToRead_Init(x)
.text:00000720                 public _LookToRead_Init@4
.text:00000720 _LookToRead_Init@4 proc near
.text:00000720
.text:00000720 arg_0           = dword ptr  8
.text:00000720
.text:00000720                 push    ebp
.text:00000721                 mov     ebp, esp
.text:00000723                 mov     eax, [ebp+arg_0]
.text:00000726                 mov     dword ptr [eax+18h], 0
.text:0000072D                 mov     ecx, [ebp+arg_0]
.text:00000730                 mov     dword ptr [ecx+14h], 0
.text:00000737                 pop     ebp
.text:00000738                 retn    4
.text:00000738 _LookToRead_Init@4 endp
.text:00000738
.text:00000738 ; ---------------------------------------------------------------------------
.text:0000073B                 align 10h
.text:00000740
.text:00000740 ; =============== S U B R O U T I N E =======================================
.text:00000740
.text:00000740 ; Attributes: bp-based frame
.text:00000740
.text:00000740 ; __stdcall SecToLook_CreateVTable(x)
.text:00000740                 public _SecToLook_CreateVTable@4
.text:00000740 _SecToLook_CreateVTable@4 proc near
.text:00000740
.text:00000740 arg_0           = dword ptr  8
.text:00000740
.text:00000740                 push    ebp
.text:00000741                 mov     ebp, esp
.text:00000743                 mov     eax, [ebp+arg_0]
.text:00000746                 mov     dword ptr [eax], offset _SecToLook_Read@12 ; SecToLook_Read(x,x,x)
.text:0000074C                 pop     ebp
.text:0000074D                 retn    4
.text:0000074D _SecToLook_CreateVTable@4 endp
.text:0000074D
.text:00000750
.text:00000750 ; =============== S U B R O U T I N E =======================================
.text:00000750
.text:00000750 ; Attributes: bp-based frame
.text:00000750
.text:00000750 ; int __stdcall SecToLook_Read(int, void *Dst, int)
.text:00000750 _SecToLook_Read@12 proc near            ; DATA XREF: SecToLook_CreateVTable(x)+6o
.text:00000750
.text:00000750 var_4           = dword ptr -4
.text:00000750 arg_0           = dword ptr  8
.text:00000750 Dst             = dword ptr  0Ch
.text:00000750 arg_8           = dword ptr  10h
.text:00000750
.text:00000750                 push    ebp
.text:00000751                 mov     ebp, esp
.text:00000753                 push    ecx
.text:00000754                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000075B                 mov     eax, [ebp+arg_0]
.text:0000075E                 mov     [ebp+var_4], eax
.text:00000761                 mov     ecx, [ebp+arg_8]
.text:00000764                 push    ecx             ; int
.text:00000765                 mov     edx, [ebp+Dst]
.text:00000768                 push    edx             ; Dst
.text:00000769                 mov     eax, [ebp+var_4]
.text:0000076C                 mov     ecx, [eax+4]
.text:0000076F                 push    ecx             ; int
.text:00000770                 call    _LookInStream_LookRead@12 ; LookInStream_LookRead(x,x,x)
.text:00000775                 add     esp, 4
.text:00000778                 cmp     ebp, esp
.text:0000077A                 call    __RTC_CheckEsp
.text:0000077F                 mov     esp, ebp
.text:00000781                 pop     ebp
.text:00000782                 retn    0Ch
.text:00000782 _SecToLook_Read@12 endp
.text:00000782
.text:00000782 ; ---------------------------------------------------------------------------
.text:00000785                 align 10h
.text:00000790
.text:00000790 ; =============== S U B R O U T I N E =======================================
.text:00000790
.text:00000790 ; Attributes: bp-based frame
.text:00000790
.text:00000790 ; __stdcall SecToRead_CreateVTable(x)
.text:00000790                 public _SecToRead_CreateVTable@4
.text:00000790 _SecToRead_CreateVTable@4 proc near
.text:00000790
.text:00000790 arg_0           = dword ptr  8
.text:00000790
.text:00000790                 push    ebp
.text:00000791                 mov     ebp, esp
.text:00000793                 mov     eax, [ebp+arg_0]
.text:00000796                 mov     dword ptr [eax], offset _SecToRead_Read@12 ; SecToRead_Read(x,x,x)
.text:0000079C                 pop     ebp
.text:0000079D                 retn    4
.text:0000079D _SecToRead_CreateVTable@4 endp
.text:0000079D
.text:000007A0
.text:000007A0 ; =============== S U B R O U T I N E =======================================
.text:000007A0
.text:000007A0 ; Attributes: bp-based frame
.text:000007A0
.text:000007A0 ; __stdcall SecToRead_Read(x, x, x)
.text:000007A0 _SecToRead_Read@12 proc near            ; DATA XREF: SecToRead_CreateVTable(x)+6o
.text:000007A0
.text:000007A0 var_4           = dword ptr -4
.text:000007A0 arg_0           = dword ptr  8
.text:000007A0 arg_4           = dword ptr  0Ch
.text:000007A0 arg_8           = dword ptr  10h
.text:000007A0
.text:000007A0                 push    ebp
.text:000007A1                 mov     ebp, esp
.text:000007A3                 push    ecx
.text:000007A4                 push    esi
.text:000007A5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007AC                 mov     eax, [ebp+arg_0]
.text:000007AF                 mov     [ebp+var_4], eax
.text:000007B2                 mov     esi, esp
.text:000007B4                 mov     ecx, [ebp+arg_8]
.text:000007B7                 push    ecx
.text:000007B8                 mov     edx, [ebp+arg_4]
.text:000007BB                 push    edx
.text:000007BC                 mov     eax, [ebp+var_4]
.text:000007BF                 mov     ecx, [eax+4]
.text:000007C2                 push    ecx
.text:000007C3                 mov     edx, [ebp+var_4]
.text:000007C6                 mov     eax, [edx+4]
.text:000007C9                 mov     ecx, [eax+8]
.text:000007CC                 call    ecx
.text:000007CE                 cmp     esi, esp
.text:000007D0                 call    __RTC_CheckEsp
.text:000007D5                 pop     esi
.text:000007D6                 add     esp, 4
.text:000007D9                 cmp     ebp, esp
.text:000007DB                 call    __RTC_CheckEsp
.text:000007E0                 mov     esp, ebp
.text:000007E2                 pop     ebp
.text:000007E3                 retn    0Ch
.text:000007E3 _SecToRead_Read@12 endp
.text:000007E3
.text:000007E3 ; ---------------------------------------------------------------------------
.text:000007E6                 align 4
.text:000007E6 _text           ends
.text:000007E6
.rtc$TMZ:000007E8 ; ===========================================================================
.rtc$TMZ:000007E8
.rtc$TMZ:000007E8 ; Segment type: Pure data
.rtc$TMZ:000007E8 ; Segment permissions: Read
.rtc$TMZ:000007E8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000007E8                 assume cs:_rtc$TMZ
.rtc$TMZ:000007E8                 ;org 7E8h
.rtc$TMZ:000007E8 ; COMDAT (pick any)
.rtc$TMZ:000007E8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000007E8 _rtc$TMZ        ends
.rtc$TMZ:000007E8
.rtc$IMZ:000007EC ; ===========================================================================
.rtc$IMZ:000007EC
.rtc$IMZ:000007EC ; Segment type: Pure data
.rtc$IMZ:000007EC ; Segment permissions: Read
.rtc$IMZ:000007EC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000007EC                 assume cs:_rtc$IMZ
.rtc$IMZ:000007EC                 ;org 7ECh
.rtc$IMZ:000007EC ; COMDAT (pick any)
.rtc$IMZ:000007EC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000007EC _rtc$IMZ        ends
.rtc$IMZ:000007EC
UNDEF:000007F0 ; ===========================================================================
UNDEF:000007F0
UNDEF:000007F0 ; Segment type: Externs
UNDEF:000007F0 ; UNDEF
UNDEF:000007F0 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000007F0                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000007F0                                         ; CODE XREF: SeqInStream_Read2(x,x,x,x)+79p
UNDEF:000007F0                                         ; SeqInStream_ReadByte(x,x)+60p ...
UNDEF:000007F4                 extrn __RTC_CheckEsp:near
UNDEF:000007F4                                         ; CODE XREF: SeqInStream_Read2(x,x,x,x)+3Bp
UNDEF:000007F4                                         ; SeqInStream_Read2(x,x,x,x)+86p ...
UNDEF:000007F8                 extrn __RTC_Shutdown:near
UNDEF:000007F8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000007FC                 extrn __RTC_InitBase:near
UNDEF:000007FC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000800 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00000800                 extrn _memcpy:near      ; CODE XREF: LookInStream_LookRead(x,x,x)+5Cp
UNDEF:00000800                                         ; LookToRead_Read(x,x,x)+78p
UNDEF:00000800
UNDEF:00000800
UNDEF:00000800                 end